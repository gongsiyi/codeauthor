1:a6358d6: /*
1:a6358d6:  *
1:a6358d6:  * Derby - Class org.apache.derbyTesting.system.oe.direct.SimpleNonStandardOperations
1:a6358d6:  *
1:a6358d6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a6358d6:  * contributor license agreements.  See the NOTICE file distributed with
1:a6358d6:  * this work for additional information regarding copyright ownership.
1:a6358d6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a6358d6:  * (the "License"); you may not use this file except in compliance with
1:a6358d6:  * the License.  You may obtain a copy of the License at
1:a6358d6:  *
1:a6358d6:  *    http://www.apache.org/licenses/LICENSE-2.0
1:a6358d6:  *
1:a6358d6:  * Unless required by applicable law or agreed to in writing, 
1:a6358d6:  * software distributed under the License is distributed on an 
1:a6358d6:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:a6358d6:  * either express or implied. See the License for the specific 
1:a6358d6:  * language governing permissions and limitations under the License.
1:a6358d6:  */
1:a6358d6: package org.apache.derbyTesting.system.oe.direct;
1:a6358d6: 
1:a6358d6: import java.sql.Connection;
1:a6358d6: import java.sql.PreparedStatement;
1:a6358d6: import java.sql.ResultSet;
1:a6358d6: import java.sql.SQLException;
1:a6358d6: 
1:a6358d6: import org.apache.derbyTesting.system.oe.client.Operations;
1:a6358d6: import org.apache.derbyTesting.system.oe.client.Submitter;
1:eb03212: import org.apache.derbyTesting.system.oe.model.Address;
1:a6358d6: import org.apache.derbyTesting.system.oe.model.Customer;
1:a6358d6: import org.apache.derbyTesting.system.oe.util.OERandom;
1:a6358d6: 
1:a6358d6: /**
1:a6358d6:  * Collection of simple transactions that can be executed against
1:a6358d6:  * an order-entry database. These are not part of any standard
1:a6358d6:  * TPC-C specification but are useful for running specific
1:a6358d6:  * performance tests against Derby.
1:a6358d6:  * 
1:a6358d6:  * Since they are not standard operations there is no
1:a6358d6:  * ability to display the information. Any data selected
1:a6358d6:  * by a query is always fetched by processing all the
1:a6358d6:  * rows and all the columns using getXXX.
1:a6358d6:  *
1:a6358d6:  */
1:a6358d6: public class SimpleNonStandardOperations extends StatementHelper {
1:a6358d6:     
1:a6358d6:     /*
1:a6358d6:      * Reusable objects
1:a6358d6:      */
1:a6358d6:     private final Customer customer = new Customer();
1:a6358d6:     
1:eb03212:     private final Address address = new Address();
1:eb03212:     
1:a6358d6:     private final OERandom rand;
1:a6358d6: 
1:a6358d6:     public SimpleNonStandardOperations(Connection conn,
1:a6358d6:             int isolation) throws SQLException
1:a6358d6:     {
1:a6358d6:         super(conn, false, isolation);
1:a6358d6:         rand = Submitter.getRuntimeRandom(conn);
1:a6358d6:     }
1:a6358d6:     
1:a6358d6:     /**
1:a6358d6:      * Return an SimpleNonStandardOperations implementation based upon
1:a6358d6:      * SimpleNonStandardOperations with a single difference.
1:a6358d6:      * In this implementation the reset() executed after each
1:a6358d6:      * PreparedStatement execute
1:a6358d6:      * does nothing. Sees if there is any performance impact
1:a6358d6:      * of explicitly closing each ResultSet and clearing the
1:a6358d6:      * parameters.
1:a6358d6:      * <P>
1:a6358d6:      * Each ResultSet will be closed implicitly either at commit
1:a6358d6:      * time or at the next execution of the same PreparedStatement object.
1:a6358d6:      */
1:a6358d6:     public static SimpleNonStandardOperations noReset(final Connection conn,
1:a6358d6:             final int isolation)
1:a6358d6:         throws SQLException
1:a6358d6:     {
1:a6358d6:         return new SimpleNonStandardOperations(conn, isolation) {
1:a6358d6:             protected void reset(PreparedStatement ps) {}
1:a6358d6:         };
1:a6358d6:     }
1:a6358d6:     
1:a6358d6:     /**
1:a6358d6:      * Execute customerInquiry() with random parameters.
1:a6358d6:      * @throws SQLException 
1:a6358d6:      *
1:a6358d6:      */
1:a6358d6:     public void customerInquiry(int scale) throws SQLException
1:a6358d6:     {
1:a6358d6:         customerInquiry((short) rand.randomInt(1, scale),
1:a6358d6:                 (short) rand.district(), rand.NURand1023());
1:a6358d6:     }
1:a6358d6:     
1:a6358d6:     /**
1:a6358d6:      * Lookup a customer's information (name, address, balance)
1:a6358d6:      * fetching it by the identifier.
1:a6358d6:      * <BR>
1:a6358d6:      * Primary key lookup against the CUSTOMER table (which
1:a6358d6:      * of course can be arbitrarily large depending on the
1:a6358d6:      * scale of the database. The cardinality of the CUSTOMER
1:a6358d6:      * is 30,000 rows per warehouse, for example with a 20
1:a6358d6:      * warehouse system this test would perform a primary
1:a6358d6:      * key lookup against 600,000 rows.
1:a6358d6:      * 
1:a6358d6:      * @param w Warehouse for customer
1:a6358d6:      * @param d District for customer
1:a6358d6:      * @param c Customer identifier
1:a6358d6:      */
1:a6358d6:     public void customerInquiry(short w, short d, int c)
1:a6358d6:        throws SQLException
1:a6358d6:     {
1:a6358d6:         
1:a6358d6:         PreparedStatement customerInquiry = prepareStatement(
1:a6358d6:                 "SELECT C_BALANCE, C_FIRST, C_MIDDLE, C_LAST, " +
1:a6358d6:                 "C_STREET_1, C_STREET_2, C_CITY, C_STATE, C_ZIP, " +
1:a6358d6:                 "C_PHONE " +
1:a6358d6:                 "FROM CUSTOMER WHERE C_W_ID = ? AND C_D_ID = ? AND C_ID = ?");
1:a6358d6:         
1:a6358d6:             customerInquiry.setShort(1, w);
1:a6358d6:             customerInquiry.setShort(2, d);
1:a6358d6:             customerInquiry.setInt(3, c);
1:a6358d6:             ResultSet rs = customerInquiry.executeQuery();
1:a6358d6:             rs.next();
1:a6358d6:             
1:a6358d6:             customer.clear();
1:a6358d6:             customer.setBalance(rs.getString("C_BALANCE"));
1:a6358d6:             customer.setFirst(rs.getString("C_FIRST"));
1:a6358d6:             customer.setMiddle(rs.getString("C_MIDDLE"));
1:a6358d6:             customer.setLast(rs.getString("C_LAST"));
1:a6358d6:             
1:eb03212:             customer.setAddress(getAddress(address, rs, "C_STREET_1"));
1:a6358d6:             
1:a6358d6:             customer.setPhone(rs.getString("C_PHONE"));
1:a6358d6:             
1:a6358d6:             reset(customerInquiry);
1:a6358d6:             conn.commit();
1:a6358d6:     }
1:a6358d6:     
1:a6358d6:     /**
1:a6358d6:      * Execute customerAddressChange() with random parameters.
1:a6358d6:      * @throws SQLException 
1:a6358d6:      *
1:a6358d6:      */
1:a6358d6:     public void customerAddressChange(int scale) throws SQLException
1:a6358d6:     {
1:a6358d6:         customerAddressChange((short) rand.randomInt(1, scale),
1:a6358d6:                 (short) rand.district(), rand.NURand1023());
1:a6358d6:     }
1:a6358d6:     
1:a6358d6:     /**
1:a6358d6:      * Update a customers address with a new random value.
1:a6358d6:      * Update of a single row through a primary key.
1:a6358d6:      * <BR>
1:a6358d6:      * Primary key update against the CUSTOMER table (which
1:a6358d6:      * of course can be arbitrarily large depending on the
1:a6358d6:      * scale of the database. The cardinality of the CUSTOMER
1:a6358d6:      * is 30,000 rows per warehouse, for example with a 20
1:a6358d6:      * warehouse system this test would perform a primary
1:a6358d6:      * key lookup against 600,000 rows.
1:a6358d6:      * 
1:a6358d6:      * @param w Warehouse for customer
1:a6358d6:      * @param d District for customer
1:a6358d6:      * @param c Customer identifier
1:a6358d6:  
1:a6358d6:      */
1:a6358d6:     public void customerAddressChange(short w, short d, int c)
1:a6358d6:     throws SQLException
1:a6358d6:     {
1:a6358d6:         PreparedStatement customerAddressChange = prepareStatement(
1:a6358d6:                 "UPDATE CUSTOMER " +
1:a6358d6:                 "SET C_STREET_1 = ?, C_STREET_2 = ?, " +
1:a6358d6:                 "C_CITY = ?, C_STATE = ?, C_ZIP = ? " +
1:a6358d6:                 "WHERE C_W_ID = ? AND C_D_ID = ? AND C_ID = ?");
1:a6358d6:         
1:a6358d6:         customerAddressChange.setString(1, rand.randomAString10_20()); // c_street_1
1:a6358d6:         customerAddressChange.setString(2, rand.randomAString10_20()); // c_street_2
1:a6358d6:         customerAddressChange.setString(3, rand.randomAString10_20()); // c_city
1:a6358d6:         customerAddressChange.setString(4, rand.randomState()); // c_state
1:a6358d6:         customerAddressChange.setString(5, rand.randomZIP()); // c_zip
1:a6358d6:         
1:a6358d6:         customerAddressChange.setShort(6, w);
1:a6358d6:         customerAddressChange.setShort(7, d);
1:a6358d6:         customerAddressChange.setInt(8, c);
1:a6358d6:         
1:a6358d6:         customerAddressChange.executeUpdate();
1:a6358d6:         
1:a6358d6:         reset(customerAddressChange);
1:a6358d6:         
1:a6358d6:         conn.commit();
1:a6358d6:           
1:a6358d6:     }
1:a6358d6: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:eb03212
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.system.oe.model.Address;
/////////////////////////////////////////////////////////////////////////
1:     private final Address address = new Address();
1:     
/////////////////////////////////////////////////////////////////////////
1:             customer.setAddress(getAddress(address, rs, "C_STREET_1"));
commit:a6358d6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.system.oe.direct.SimpleNonStandardOperations
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.system.oe.direct;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: import org.apache.derbyTesting.system.oe.client.Operations;
1: import org.apache.derbyTesting.system.oe.client.Submitter;
1: import org.apache.derbyTesting.system.oe.model.Customer;
1: import org.apache.derbyTesting.system.oe.util.OERandom;
1: 
1: /**
1:  * Collection of simple transactions that can be executed against
1:  * an order-entry database. These are not part of any standard
1:  * TPC-C specification but are useful for running specific
1:  * performance tests against Derby.
1:  * 
1:  * Since they are not standard operations there is no
1:  * ability to display the information. Any data selected
1:  * by a query is always fetched by processing all the
1:  * rows and all the columns using getXXX.
1:  *
1:  */
1: public class SimpleNonStandardOperations extends StatementHelper {
1:     
1:     /*
1:      * Reusable objects
1:      */
1:     private final Customer customer = new Customer();
1:     
1:     private final OERandom rand;
1: 
1:     public SimpleNonStandardOperations(Connection conn,
1:             int isolation) throws SQLException
1:     {
1:         super(conn, false, isolation);
1:         rand = Submitter.getRuntimeRandom(conn);
1:     }
1:     
1:     /**
1:      * Return an SimpleNonStandardOperations implementation based upon
1:      * SimpleNonStandardOperations with a single difference.
1:      * In this implementation the reset() executed after each
1:      * PreparedStatement execute
1:      * does nothing. Sees if there is any performance impact
1:      * of explicitly closing each ResultSet and clearing the
1:      * parameters.
1:      * <P>
1:      * Each ResultSet will be closed implicitly either at commit
1:      * time or at the next execution of the same PreparedStatement object.
1:      */
1:     public static SimpleNonStandardOperations noReset(final Connection conn,
1:             final int isolation)
1:         throws SQLException
1:     {
1:         return new SimpleNonStandardOperations(conn, isolation) {
1:             protected void reset(PreparedStatement ps) {}
1:         };
1:     }
1:     
1:     /**
1:      * Execute customerInquiry() with random parameters.
1:      * @throws SQLException 
1:      *
1:      */
1:     public void customerInquiry(int scale) throws SQLException
1:     {
1:         customerInquiry((short) rand.randomInt(1, scale),
1:                 (short) rand.district(), rand.NURand1023());
1:     }
1:     
1:     /**
1:      * Lookup a customer's information (name, address, balance)
1:      * fetching it by the identifier.
1:      * <BR>
1:      * Primary key lookup against the CUSTOMER table (which
1:      * of course can be arbitrarily large depending on the
1:      * scale of the database. The cardinality of the CUSTOMER
1:      * is 30,000 rows per warehouse, for example with a 20
1:      * warehouse system this test would perform a primary
1:      * key lookup against 600,000 rows.
1:      * 
1:      * @param w Warehouse for customer
1:      * @param d District for customer
1:      * @param c Customer identifier
1:      */
1:     public void customerInquiry(short w, short d, int c)
1:        throws SQLException
1:     {
1:         
1:         PreparedStatement customerInquiry = prepareStatement(
1:                 "SELECT C_BALANCE, C_FIRST, C_MIDDLE, C_LAST, " +
1:                 "C_STREET_1, C_STREET_2, C_CITY, C_STATE, C_ZIP, " +
1:                 "C_PHONE " +
1:                 "FROM CUSTOMER WHERE C_W_ID = ? AND C_D_ID = ? AND C_ID = ?");
1:         
1:             customerInquiry.setShort(1, w);
1:             customerInquiry.setShort(2, d);
1:             customerInquiry.setInt(3, c);
1:             ResultSet rs = customerInquiry.executeQuery();
1:             rs.next();
1:             
1:             customer.clear();
1:             customer.setBalance(rs.getString("C_BALANCE"));
1:             customer.setFirst(rs.getString("C_FIRST"));
1:             customer.setMiddle(rs.getString("C_MIDDLE"));
1:             customer.setLast(rs.getString("C_LAST"));
1:             
0:             customer.setAddress(getAddress(rs, "C_STREET_1"));
1:             
1:             customer.setPhone(rs.getString("C_PHONE"));
1:             
1:             reset(customerInquiry);
1:             conn.commit();
1:     }
1:     
1:     /**
1:      * Execute customerAddressChange() with random parameters.
1:      * @throws SQLException 
1:      *
1:      */
1:     public void customerAddressChange(int scale) throws SQLException
1:     {
1:         customerAddressChange((short) rand.randomInt(1, scale),
1:                 (short) rand.district(), rand.NURand1023());
1:     }
1:     
1:     /**
1:      * Update a customers address with a new random value.
1:      * Update of a single row through a primary key.
1:      * <BR>
1:      * Primary key update against the CUSTOMER table (which
1:      * of course can be arbitrarily large depending on the
1:      * scale of the database. The cardinality of the CUSTOMER
1:      * is 30,000 rows per warehouse, for example with a 20
1:      * warehouse system this test would perform a primary
1:      * key lookup against 600,000 rows.
1:      * 
1:      * @param w Warehouse for customer
1:      * @param d District for customer
1:      * @param c Customer identifier
1:  
1:      */
1:     public void customerAddressChange(short w, short d, int c)
1:     throws SQLException
1:     {
1:         PreparedStatement customerAddressChange = prepareStatement(
1:                 "UPDATE CUSTOMER " +
1:                 "SET C_STREET_1 = ?, C_STREET_2 = ?, " +
1:                 "C_CITY = ?, C_STATE = ?, C_ZIP = ? " +
1:                 "WHERE C_W_ID = ? AND C_D_ID = ? AND C_ID = ?");
1:         
1:         customerAddressChange.setString(1, rand.randomAString10_20()); // c_street_1
1:         customerAddressChange.setString(2, rand.randomAString10_20()); // c_street_2
1:         customerAddressChange.setString(3, rand.randomAString10_20()); // c_city
1:         customerAddressChange.setString(4, rand.randomState()); // c_state
1:         customerAddressChange.setString(5, rand.randomZIP()); // c_zip
1:         
1:         customerAddressChange.setShort(6, w);
1:         customerAddressChange.setShort(7, d);
1:         customerAddressChange.setInt(8, c);
1:         
1:         customerAddressChange.executeUpdate();
1:         
1:         reset(customerAddressChange);
1:         
1:         conn.commit();
1:           
1:     }
1: }
============================================================================