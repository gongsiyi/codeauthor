1:eac0369: /*
4:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.OrderableAggregator
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:1a36302: import java.io.IOException;
1:1a36302: import java.io.ObjectInput;
1:1a36302: import java.io.ObjectOutput;
1:1a36302: 
1:1a36302: import org.apache.derby.iapi.error.StandardException;
1:c8603c4: import org.apache.derby.iapi.services.loader.ClassFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1:c8603c4: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Abstract aggregator for Orderable aggregates (max/min).
1:eac0369:  *
1:eac0369:  */
1:eac0369: abstract class OrderableAggregator extends SystemAggregator
1:eac0369: {
1:eac0369: 	protected DataValueDescriptor value;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 */
1:c8603c4: 	public void setup( ClassFactory cf, String aggregateName, DataTypeDescriptor returnDataType )
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see ExecAggregator#merge
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public void merge(ExecAggregator addend)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(addend instanceof OrderableAggregator,
1:eac0369: 				"addend is supposed to be the same type of aggregator for the merge operator");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Don't bother merging if the other has never been used.
1:eac0369: 		DataValueDescriptor bv = ((OrderableAggregator)addend).value;
1:eac0369: 		if (bv != null)
1:eac0369: 			this.accumulate(bv);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the result of the operations that we
1:eac0369: 	 * have been performing.  Returns a DataValueDescriptor.
1:eac0369: 	 *
1:eac0369: 	 * @return the result as a DataValueDescriptor 
1:eac0369: 	 */
1:2c6f0a2: 	public DataValueDescriptor getResult() throws StandardException
1:eac0369: 	{
1:eac0369: 		return value;
1:eac0369: 	}
1:b5105f3:         public String toString()
1:b5105f3:         {
1:b5105f3:             try {
1:b5105f3:             return "OrderableAggregator: " + value.getString();
1:b5105f3:             }
1:b5105f3:             catch (StandardException e)
1:b5105f3:             {
1:b5105f3:                 return super.toString() + ":" + e.getMessage();
1:b5105f3:             }
1:b5105f3:         }
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// EXTERNALIZABLE INTERFACE
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	/** 
1:eac0369: 	 * Although we are not expected to be persistent per se,
1:eac0369: 	 * we may be written out by the sorter temporarily.  So
1:eac0369: 	 * we need to be able to write ourselves out and read
1:eac0369: 	 * ourselves back in.  We rely on formatable to handle
1:eac0369: 	 * situations where <I>value</I> is null.
1:eac0369: 	 * <p>
1:eac0369: 	 * Why would we be called to write ourselves out if we
1:eac0369: 	 * are null?  For scalar aggregates, we don't bother
1:eac0369: 	 * setting up the aggregator since we only need a single
1:eac0369: 	 * row.  So for a scalar aggregate that needs to go to
1:eac0369: 	 * disk, the aggregator might be null.
1:eac0369: 	 * 
1:eac0369: 	 * @exception IOException on error
1:eac0369: 	 *
1:eac0369: 	 * @see java.io.Externalizable#writeExternal
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		out.writeObject(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see java.io.Externalizable#readExternal 
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException on error
1:eac0369: 	 * @exception ClassNotFoundException on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		value = (DataValueDescriptor) in.readObject();
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:b5105f3
/////////////////////////////////////////////////////////////////////////
1:         public String toString()
1:         {
1:             try {
1:             return "OrderableAggregator: " + value.getString();
1:             }
1:             catch (StandardException e)
1:             {
1:                 return super.toString() + ":" + e.getMessage();
1:             }
1:         }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
/////////////////////////////////////////////////////////////////////////
1: 	public void setup( ClassFactory cf, String aggregateName, DataTypeDescriptor returnDataType )
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:1a36302
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: import org.apache.derby.iapi.error.StandardException;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2c6f0a2
/////////////////////////////////////////////////////////////////////////
1: 	public DataValueDescriptor getResult() throws StandardException
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.OrderableAggregator
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
1: 
1: /**
1:  * Abstract aggregator for Orderable aggregates (max/min).
1:  *
0:  * @author jamie
1:  */
1: abstract class OrderableAggregator extends SystemAggregator
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	protected DataValueDescriptor value;
1: 
1: 	/**
1: 	 */
0: 	public void setup(String aggregateName)
1: 	{
1: 	}
1: 
1: 	/**
1: 	 * @see ExecAggregator#merge
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public void merge(ExecAggregator addend)
1: 		throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(addend instanceof OrderableAggregator,
1: 				"addend is supposed to be the same type of aggregator for the merge operator");
1: 		}
1: 
1: 		// Don't bother merging if the other has never been used.
1: 		DataValueDescriptor bv = ((OrderableAggregator)addend).value;
1: 		if (bv != null)
1: 			this.accumulate(bv);
1: 	}
1: 
1: 	/**
1: 	 * Return the result of the operations that we
1: 	 * have been performing.  Returns a DataValueDescriptor.
1: 	 *
1: 	 * @return the result as a DataValueDescriptor 
1: 	 */
0: 	public Object getResult()
1: 	{
1: 		return value;
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// EXTERNALIZABLE INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 	/** 
1: 	 * Although we are not expected to be persistent per se,
1: 	 * we may be written out by the sorter temporarily.  So
1: 	 * we need to be able to write ourselves out and read
1: 	 * ourselves back in.  We rely on formatable to handle
1: 	 * situations where <I>value</I> is null.
1: 	 * <p>
1: 	 * Why would we be called to write ourselves out if we
1: 	 * are null?  For scalar aggregates, we don't bother
1: 	 * setting up the aggregator since we only need a single
1: 	 * row.  So for a scalar aggregate that needs to go to
1: 	 * disk, the aggregator might be null.
1: 	 * 
1: 	 * @exception IOException on error
1: 	 *
1: 	 * @see java.io.Externalizable#writeExternal
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		super.writeExternal(out);
1: 		out.writeObject(value);
1: 	}
1: 
1: 	/** 
1: 	 * @see java.io.Externalizable#readExternal 
1: 	 *
1: 	 * @exception IOException on error
1: 	 * @exception ClassNotFoundException on error
1: 	 */
1: 	public void readExternal(ObjectInput in) 
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		value = (DataValueDescriptor) in.readObject();
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.execute.ExecAggregator;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0:  * Abstract aggregator for Orderable aggregates (max/min).
0:  *
0:  * @author jamie
0:  */
0: abstract class OrderableAggregator extends SystemAggregator
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	protected DataValueDescriptor value;
0: 
0: 	/**
0: 	 */
0: 	public void setup(String aggregateName)
0: 	{
0: 	}
0: 
0: 	/**
0: 	 * @see ExecAggregator#merge
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public void merge(ExecAggregator addend)
0: 		throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(addend instanceof OrderableAggregator,
0: 				"addend is supposed to be the same type of aggregator for the merge operator");
0: 		}
0: 
0: 		// Don't bother merging if the other has never been used.
0: 		DataValueDescriptor bv = ((OrderableAggregator)addend).value;
0: 		if (bv != null)
0: 			this.accumulate(bv);
0: 	}
0: 
0: 	/**
0: 	 * Return the result of the operations that we
0: 	 * have been performing.  Returns a DataValueDescriptor.
0: 	 *
0: 	 * @return the result as a DataValueDescriptor 
0: 	 */
0: 	public Object getResult()
0: 	{
0: 		return value;
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////
0: 	// 
0: 	// EXTERNALIZABLE INTERFACE
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 	/** 
0: 	 * Although we are not expected to be persistent per se,
0: 	 * we may be written out by the sorter temporarily.  So
0: 	 * we need to be able to write ourselves out and read
0: 	 * ourselves back in.  We rely on formatable to handle
0: 	 * situations where <I>value</I> is null.
0: 	 * <p>
0: 	 * Why would we be called to write ourselves out if we
0: 	 * are null?  For scalar aggregates, we don't bother
0: 	 * setting up the aggregator since we only need a single
0: 	 * row.  So for a scalar aggregate that needs to go to
0: 	 * disk, the aggregator might be null.
0: 	 * 
0: 	 * @exception IOException on error
0: 	 *
0: 	 * @see java.io.Externalizable#writeExternal
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		super.writeExternal(out);
0: 		out.writeObject(value);
0: 	}
0: 
0: 	/** 
0: 	 * @see java.io.Externalizable#readExternal 
0: 	 *
0: 	 * @exception IOException on error
0: 	 * @exception ClassNotFoundException on error
0: 	 */
0: 	public void readExternal(ObjectInput in) 
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		value = (DataValueDescriptor) in.readObject();
0: 	}
0: }
============================================================================