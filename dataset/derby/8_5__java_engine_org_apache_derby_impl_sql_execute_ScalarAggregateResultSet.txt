1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.ScalarAggregateResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
14:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:354870e: import org.apache.derby.iapi.sql.Activation;
1:354870e: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:354870e: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:354870e: import org.apache.derby.iapi.sql.execute.ExecRow;
1:354870e: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This ResultSet evaluates scalar, non distinct aggregates.
1:eac0369:  * It will scan the entire source result set and calculate
1:eac0369:  * the scalar aggregates when scanning the source during the 
1:eac0369:  * first call to next().
1:eac0369:  *
1:eac0369:  */
1:f77f36d: class ScalarAggregateResultSet extends GenericAggregateResultSet
1:eac0369: 	implements CursorResultSet 
1:eac0369: {
1:eac0369: 
1:eac0369: 	/* Run time statistics variables */
1:eac0369: 	public int rowsInput;
1:eac0369: 
1:eac0369:     // set in constructor and not altered during
1:eac0369:     // life of object.
1:eac0369: 	public 		boolean 			singleInputRow;
1:eac0369: 	protected 	boolean 			isInSortedOrder;		// true if source results in sorted order
1:eac0369: 
1:eac0369: 	// Cache ExecIndexRow for scalar aggregates
1:eac0369: 	protected ExecIndexRow sourceExecIndexRow;
1:eac0369: 
1:eac0369: 	// Remember whether or not a next() has been satisfied
1:eac0369: 	private boolean nextSatisfied;
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	 * Constructor
1:eac0369: 	 *
1:eac0369: 	 * @param	s			input result set
1:eac0369: 	 * @param	isInSortedOrder	true if the source results are in sorted order
1:eac0369: 	 * @param	aggregateItem	indicates the number of the
1:eac0369: 	 *		SavedObject off of the PreparedStatement that holds the
1:eac0369: 	 *		AggregatorInfoList used by this routine. 
1:eac0369: 	 * @param	a				activation
1:d868eed: 	 * @param	ra				saved object that builds an empty output row
1:eac0369: 	 * @param	resultSetNumber	The resultSetNumber for this result set
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:f77f36d:     ScalarAggregateResultSet(NoPutResultSet s,
1:eac0369: 					boolean isInSortedOrder,
1:eac0369: 					int	aggregateItem,
1:eac0369: 					Activation a,
1:d868eed: 					int ra,
1:eac0369: 					int resultSetNumber,
1:eac0369: 					boolean singleInputRow,
1:eac0369: 				    double optimizerEstimatedRowCount,
1:f77f36d: 				    double optimizerEstimatedCost) throws StandardException 
1:eac0369: 	{
1:f77f36d: 		super(s, aggregateItem, a, ra, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost);
1:eac0369: 		this.isInSortedOrder = isInSortedOrder;
1:eac0369: 		// source expected to be non-null, mystery stress test bug
1:eac0369: 		// - sometimes get NullPointerException in openCore().
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(source != null,
1:eac0369: 				"SARS(), source expected to be non-null");
2:eac0369: 		}
1:eac0369: 		this.singleInputRow = singleInputRow;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.DEBUG("AggregateTrace","execution time: "+ 
1:eac0369: 					a.getPreparedStatement().getSavedObject(aggregateItem));
1:eac0369: 		}
1:7008b63: 		recordConstructorTime();
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// ResultSet interface (leftover from NoPutResultSet)
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Open the scan.  Load the sorter and prepare to get
1:eac0369: 	 * rows from it.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cursor finished.
1:eac0369:      */
1:eac0369: 	public void	openCore() throws StandardException 
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 
1:eac0369: 		// source expected to be non-null, mystery stress test bug
1:eac0369: 		// - sometimes get NullPointerException in openCore().
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(source != null,
1:eac0369: 				"SARS.openCore(), source expected to be non-null");
1:eac0369: 	    	SanityManager.ASSERT( ! isOpen, "ScalarAggregateResultSet already open");
1:eac0369: 		}
1:eac0369: 
1:d868eed: 		sourceExecIndexRow = (ExecIndexRow) getRowTemplate().getClone();
1:eac0369: 
1:eac0369:         source.openCore();
1:eac0369: 
1:eac0369: 	    isOpen = true;
1:eac0369: 		numOpens++;
1:eac0369: 
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	protected int countOfRows;
1:eac0369: 
1:eac0369: 	/* RESOLVE - THIS NEXT METHOD IS OVERRIDEN IN DistinctScalarResultSet
1:eac0369: 	 * BEACAUSE OF A JIT ERROR. THERE IS NO OTHER
1:eac0369: 	 * REASON TO OVERRIDE IT IN DistinctScalarAggregateResultSet.  THE BUG WAS FOUND IN
1:eac0369: 	 * 1.1.6 WITH THE JIT.
1:eac0369: 	 */
1:eac0369: 	/**
1:eac0369: 	 * Return the next row.  If it is a scalar aggregate scan
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure.
1:eac0369: 	 * @exception StandardException ResultSetNotOpen thrown if not yet open.
1:eac0369: 	 *
1:eac0369: 	 * @return the next row in the result
1:eac0369: 	 */
1:eac0369: 	public ExecRow	getNextRowCore() throws StandardException 
1:eac0369: 	{
1:2a4654b: 		if( isXplainOnlyMode() )
1:2a4654b: 			return null;
1:2a4654b: 
1:eac0369: 		if (nextSatisfied)
1:eac0369: 		{
1:eac0369: 			clearCurrentRow();
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	    ExecIndexRow execIndexRow = null;
1:eac0369: 	    ExecIndexRow aggResult = null;
1:eac0369: 		//only care if it is a minAgg if we have a singleInputRow, then we know
1:eac0369: 		//we are only looking at one aggregate
1:354870e: 		boolean minAgg = (singleInputRow && aggregates[0].getAggregatorInfo().aggregateName.equals("MIN"));
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 	    if (isOpen)
1:eac0369: 	    {
1:eac0369: 			/*
1:eac0369: 			** We are dealing with a scalar aggregate.
1:eac0369: 			** Zip through each row and accumulate.
1:eac0369: 			** Accumulate into the first row.  Only
1:eac0369: 			** the first row is cloned.
1:eac0369: 			*/
1:eac0369: 	        while ((execIndexRow = getRowFromResultSet(false)) != null)
1:eac0369: 	        {
1:eac0369: 				/*
1:eac0369: 				** Use a clone of the first row as our result.  
1:eac0369: 				** We need to get a clone since we will be reusing
1:eac0369: 				** the original as the wrapper of the source row.
1:eac0369: 				** Turn cloning off since we wont be keeping any
1:eac0369: 				** other rows.
1:eac0369: 				*/
1:eac0369: 				if (aggResult == null)
1:eac0369: 				{
1:eac0369: 					/* No need to clone the row when doing the min/max 
1:eac0369: 					 * optimization for MIN, since we will not do another
1:eac0369: 					 * next on the underlying result set.
1:eac0369: 					 */
1:eac0369: 					aggResult = (singleInputRow && minAgg) ?
1:eac0369: 								execIndexRow :
1:eac0369: 								(ExecIndexRow) execIndexRow.getClone();
1:eac0369: 					
1:eac0369: 					initializeScalarAggregation(aggResult);
1:eac0369: 				}
1:eac0369: 				else
1:eac0369: 				{
1:eac0369: 					accumulateScalarAggregation(execIndexRow, aggResult, false);
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				/* Only need to look at first single row if 
1:eac0369: 				 * min/max optimization is on and operation is MIN
1:eac0369: 				 * or if operation is MAX first non-null row since null sorts
1:eac0369: 				 * as highest in btree
1:eac0369: 				 * Note only 1 aggregate is allowed in a singleInputRow 
1:eac0369:                  * optimization so we only need to look at the first aggregate
1:eac0369: 				 */
1:eac0369: 				if (singleInputRow && 
1:eac0369: 					(minAgg || 
1:eac0369:                      !aggResult.getColumn(aggregates[0].aggregatorColumnId).isNull()))
1:eac0369: 				{
1:eac0369: 					break;
1:eac0369: 				}
1:eac0369: 	        }
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** If we have aggregates, we need to generate a
1:eac0369: 			** value for them now.  Only finish the aggregation
1:eac0369: 			** if we haven't yet (i.e. if countOfRows == 0).
1:eac0369: 			** If there weren't any input rows, we'll allocate
1:eac0369: 			** one here.
1:eac0369: 			*/
1:eac0369: 			if (countOfRows == 0)
1:eac0369: 			{
1:eac0369: 				aggResult = finishAggregation(aggResult);
1:eac0369: 				setCurrentRow(aggResult);
1:eac0369: 				countOfRows++;
1:eac0369: 			}
1:eac0369: 	    }
1:eac0369: 
1:eac0369: 		nextSatisfied = true;
1:eac0369: 		nextTime += getElapsedMillis(beginTime);
1:eac0369: 		return aggResult;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * If the result set has been opened,
1:eac0369: 	 * close the open scan.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void	close() throws StandardException
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if ( isOpen )
1:eac0369: 	    {
1:eac0369: 			// we don't want to keep around a pointer to the
1:eac0369: 			// row ... so it can be thrown away.
1:eac0369: 			// REVISIT: does this need to be in a finally
1:eac0369: 			// block, to ensure that it is executed?
1:eac0369: 		    clearCurrentRow();
1:eac0369: 
1:eac0369: 	        countOfRows = 0;
1:eac0369: 			sourceExecIndexRow = null;
1:eac0369: 			source.close();
1:eac0369: 
1:eac0369: 			super.close();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 				SanityManager.DEBUG("CloseRepeatInfo","Close of SortResultSet repeated");
1:eac0369: 
1:eac0369: 		closeTime += getElapsedMillis(beginTime);
1:eac0369: 
1:eac0369: 		nextSatisfied = false;
1:eac0369: 		isOpen = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the total amount of time spent in this ResultSet
1:eac0369: 	 *
1:eac0369: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:eac0369: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:eac0369: 	 *
1:eac0369: 	 * @return long		The total amount of time spent (in milliseconds).
1:eac0369: 	 */
1:eac0369: 	public long getTimeSpent(int type)
1:eac0369: 	{
1:eac0369: 		long totTime = constructorTime + openTime + nextTime + 
1:eac0369: 						closeTime;
1:eac0369: 
1:eac0369: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1:eac0369: 		{
1:eac0369: 			return	totTime - originalSource.getTimeSpent(ENTIRE_RESULTSET_TREE);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return totTime;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// CursorResultSet interface
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This result set has its row location from
1:eac0369: 	 * the last fetch done. Always returns null.
1:eac0369: 	 *
1:eac0369: 	 * @see CursorResultSet
1:eac0369: 	 *
1:eac0369: 	 * @return the row location of the current cursor row.
1:eac0369: 	 * @exception StandardException thrown on failure to get row location
1:eac0369: 	 */
1:eac0369: 	public RowLocation getRowLocation() throws StandardException
1:eac0369: 	{
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This result set has its row from the last fetch done. 
1:eac0369: 	 * If the cursor is closed, a null is returned.
1:eac0369: 	 *
1:eac0369: 	 * @see CursorResultSet
1:eac0369: 	 *
1:eac0369: 	 * @return the last row returned;
1:eac0369: 	 * @exception StandardException thrown on failure.
1:eac0369: 	 */
1:eac0369: 	/* RESOLVE - this should return activation.getCurrentRow(resultSetNumber),
1:eac0369: 	 * once there is such a method.  (currentRow is redundant)
1:eac0369: 	 */
1:eac0369: 	public ExecRow getCurrentRow() throws StandardException 
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(isOpen, "SortResultSet expected to be open");
1:eac0369: 
1:eac0369: 		return currentRow;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// SCAN ABSTRACTION UTILITIES
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a row from the input result set.  
1:eac0369: 	 *
1:eac0369: 	 * @param doClone - true of the row should be cloned
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */	
1:eac0369: 	public ExecIndexRow getRowFromResultSet(boolean doClone)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		ExecRow					sourceRow;
1:eac0369: 		ExecIndexRow			inputRow = null;	
1:eac0369: 
1:eac0369: 		if ((sourceRow = source.getNextRowCore()) != null)
1:eac0369: 		{
1:eac0369: 			rowsInput++;
1:eac0369: 			sourceExecIndexRow.execRowToExecIndexRow(
1:eac0369: 					doClone ? sourceRow.getClone() : sourceRow);
1:eac0369: 			inputRow = sourceExecIndexRow;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return inputRow;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * reopen a scan on the table. scan parameters are evaluated
1:eac0369: 	 * at each open, so there is probably some way of altering
1:eac0369: 	 * their values...
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cursor finished.
1:eac0369: 	 */
1:eac0369: 	public void	reopenCore() throws StandardException 
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 	    	SanityManager.ASSERT(isOpen, "NormalizeResultSet already open");
1:eac0369: 
1:eac0369: 		source.reopenCore();
1:eac0369: 		numOpens++;
1:eac0369:         countOfRows = 0;
1:eac0369: 		nextSatisfied = false;
1:eac0369: 
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// AGGREGATION UTILITIES
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Run accumulation on every aggregate in this
1:eac0369: 	 * row.  This method is useful when draining the source
1:eac0369: 	 * or sorter, depending on whether or not there were any
1:eac0369: 	 * distinct aggregates.  Remember, if there are distinct
1:eac0369: 	 * aggregates, then the non-distinct aggregates were
1:eac0369: 	 * calculated on the way into the sorter and only the
1:eac0369: 	 * distinct aggregates will be accumulated here.
1:eac0369: 	 * Otherwise, all aggregates will be accumulated here.
1:eac0369: 	 *
1:6b50965: 	 * @param	inputRow	the input row
1:6b50965: 	 * @param	accumulateRow	the row with the accumulator (may be the same as the input row.
1:eac0369: 	 * @param	hasDistinctAggregates does this scan have distinct
1:eac0369: 	 *			aggregates.  Used to figure out whether to merge
1:eac0369: 	 *			or accumulate nondistinct aggregates.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	protected void accumulateScalarAggregation
1:eac0369: 	(
1:eac0369: 		ExecRow inputRow, 
1:eac0369: 		ExecRow accumulateRow, 
1:eac0369: 		boolean hasDistinctAggregates
1:eac0369: 	)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		int size = aggregates.length;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT((inputRow != null) && (accumulateRow != null), 
1:eac0369: 					"Null row passed to accumulateScalarAggregation");
1:eac0369: 		}
1:eac0369: 		for (int i = 0; i < size; i++)
1:eac0369: 		{
1:eac0369: 			GenericAggregator currAggregate = aggregates[i];
1:eac0369: 			if	(hasDistinctAggregates && 
1:eac0369: 				 !currAggregate.getAggregatorInfo().isDistinct())
1:eac0369: 			{
1:eac0369: 				currAggregate.merge(inputRow, accumulateRow);
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				currAggregate.accumulate(inputRow, accumulateRow);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// CLASS SPECIFIC
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Run the aggregator initialization method for
1:eac0369: 	** each aggregator in the row. 
1:eac0369: 	**
1:eac0369: 	** @param	row	the row to initialize
1:eac0369: 	**
1:eac0369: 	** @return Nothing.
1:eac0369: 	**
1:94f158a: 	** @exception	standard Derby exception
1:eac0369: 	*/
1:eac0369: 	private void initializeScalarAggregation(ExecRow row)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		int size = aggregates.length;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(row != null, 
1:eac0369: 					"Null row passed to initializeScalarAggregation");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		for (int i = 0; i < size; i++)
1:eac0369: 		{
1:eac0369: 			GenericAggregator currAggregate = aggregates[i];
1:eac0369: 			currAggregate.initialize(row);
1:eac0369: 			currAggregate.accumulate(row, row);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 		if( isXplainOnlyMode() )
1: 			return null;
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d868eed
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	 * @param	ra				saved object that builds an empty output row
/////////////////////////////////////////////////////////////////////////
1: 					int ra,
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		sourceExecIndexRow = (ExecIndexRow) getRowTemplate().getClone();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4e784bb
/////////////////////////////////////////////////////////////////////////
commit:354870e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
/////////////////////////////////////////////////////////////////////////
1: 		boolean minAgg = (singleInputRow && aggregates[0].getAggregatorInfo().aggregateName.equals("MIN"));
commit:7008b63
/////////////////////////////////////////////////////////////////////////
1: 		recordConstructorTime();
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
1: class ScalarAggregateResultSet extends GenericAggregateResultSet
/////////////////////////////////////////////////////////////////////////
1:     ScalarAggregateResultSet(NoPutResultSet s,
/////////////////////////////////////////////////////////////////////////
1: 				    double optimizerEstimatedCost) throws StandardException 
1: 		super(s, aggregateItem, a, ra, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost);
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.ScalarAggregateResultSet
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
1: 
0: import org.apache.derby.iapi.services.io.Formatable;
1: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
0: import org.apache.derby.iapi.services.io.FormatableArrayHolder;
1: 
0: import java.util.Properties;
0: import java.util.Vector;
0: import java.util.Enumeration;
1: 
1: /**
1:  * This ResultSet evaluates scalar, non distinct aggregates.
1:  * It will scan the entire source result set and calculate
1:  * the scalar aggregates when scanning the source during the 
1:  * first call to next().
1:  *
0:  * @author jerry (broken out from SortResultSet)
1:  */
0: public class ScalarAggregateResultSet extends GenericAggregateResultSet
1: 	implements CursorResultSet 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/* Run time statistics variables */
1: 	public int rowsInput;
1: 
1:     // set in constructor and not altered during
1:     // life of object.
1: 	public 		boolean 			singleInputRow;
0: 	protected 	ExecIndexRow 		sortTemplateRow;
1: 	protected 	boolean 			isInSortedOrder;		// true if source results in sorted order
1: 
1: 	// Cache ExecIndexRow for scalar aggregates
1: 	protected ExecIndexRow sourceExecIndexRow;
1: 
1: 	// Remember whether or not a next() has been satisfied
1: 	private boolean nextSatisfied;
1: 
1:     /**
1: 	 * Constructor
1: 	 *
1: 	 * @param	s			input result set
1: 	 * @param	isInSortedOrder	true if the source results are in sorted order
1: 	 * @param	aggregateItem	indicates the number of the
1: 	 *		SavedObject off of the PreparedStatement that holds the
1: 	 *		AggregatorInfoList used by this routine. 
1: 	 * @param	a				activation
0: 	 * @param	ra				generated method to build an empty
0: 	 *	 	output row 
1: 	 * @param	resultSetNumber	The resultSetNumber for this result set
1: 	 *
1: 	 * @exception StandardException Thrown on error
1: 	 */
0:     public ScalarAggregateResultSet(NoPutResultSet s,
1: 					boolean isInSortedOrder,
1: 					int	aggregateItem,
1: 					Activation a,
0: 					GeneratedMethod ra,
1: 					int resultSetNumber,
1: 					boolean singleInputRow,
1: 				    double optimizerEstimatedRowCount,
0: 				    double optimizerEstimatedCost,
0: 					GeneratedMethod c) throws StandardException 
1: 	{
0: 		super(s, aggregateItem, a, ra, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost, c);
1: 		this.isInSortedOrder = isInSortedOrder;
1: 		// source expected to be non-null, mystery stress test bug
1: 		// - sometimes get NullPointerException in openCore().
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(source != null,
1: 				"SARS(), source expected to be non-null");
1: 		}
0: 		sortTemplateRow = getExecutionFactory().getIndexableRow((ExecRow) rowAllocator.invoke(activation));
1: 		this.singleInputRow = singleInputRow;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.DEBUG("AggregateTrace","execution time: "+ 
1: 					a.getPreparedStatement().getSavedObject(aggregateItem));
1: 		}
0: 		constructorTime += getElapsedMillis(beginTime);
1:     }
1: 
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// ResultSet interface (leftover from NoPutResultSet)
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Open the scan.  Load the sorter and prepare to get
1: 	 * rows from it.
1: 	 *
1: 	 * @exception StandardException thrown if cursor finished.
1:      */
1: 	public void	openCore() throws StandardException 
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 
1: 		// source expected to be non-null, mystery stress test bug
1: 		// - sometimes get NullPointerException in openCore().
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(source != null,
1: 				"SARS.openCore(), source expected to be non-null");
1: 	    	SanityManager.ASSERT( ! isOpen, "ScalarAggregateResultSet already open");
1: 		}
1: 
0: 		sourceExecIndexRow = getExecutionFactory().getIndexableRow(sortTemplateRow);
1: 
1:         source.openCore();
1: 
1: 	    isOpen = true;
1: 		numOpens++;
1: 
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 
1: 	protected int countOfRows;
1: 
1: 	/* RESOLVE - THIS NEXT METHOD IS OVERRIDEN IN DistinctScalarResultSet
1: 	 * BEACAUSE OF A JIT ERROR. THERE IS NO OTHER
1: 	 * REASON TO OVERRIDE IT IN DistinctScalarAggregateResultSet.  THE BUG WAS FOUND IN
1: 	 * 1.1.6 WITH THE JIT.
1: 	 */
1: 	/**
1: 	 * Return the next row.  If it is a scalar aggregate scan
1: 	 *
1: 	 * @exception StandardException thrown on failure.
1: 	 * @exception StandardException ResultSetNotOpen thrown if not yet open.
1: 	 *
1: 	 * @return the next row in the result
1: 	 */
1: 	public ExecRow	getNextRowCore() throws StandardException 
1: 	{
1: 		if (nextSatisfied)
1: 		{
1: 			clearCurrentRow();
1: 			return null;
1: 		}
1: 
0: 	    ExecIndexRow sortResult = null;
0: 	    ExecRow result = null;
1: 	    ExecIndexRow execIndexRow = null;
1: 	    ExecIndexRow aggResult = null;
1: 		//only care if it is a minAgg if we have a singleInputRow, then we know
1: 		//we are only looking at one aggregate
0: 		boolean minAgg = (singleInputRow && aggregates[0].aggInfo.aggregateName.equals("MIN"));
1: 		beginTime = getCurrentTimeMillis();
1: 	    if (isOpen)
1: 	    {
1: 			/*
1: 			** We are dealing with a scalar aggregate.
1: 			** Zip through each row and accumulate.
1: 			** Accumulate into the first row.  Only
1: 			** the first row is cloned.
1: 			*/
1: 	        while ((execIndexRow = getRowFromResultSet(false)) != null)
1: 	        {
1: 				/*
1: 				** Use a clone of the first row as our result.  
1: 				** We need to get a clone since we will be reusing
1: 				** the original as the wrapper of the source row.
1: 				** Turn cloning off since we wont be keeping any
1: 				** other rows.
1: 				*/
1: 				if (aggResult == null)
1: 				{
1: 					/* No need to clone the row when doing the min/max 
1: 					 * optimization for MIN, since we will not do another
1: 					 * next on the underlying result set.
1: 					 */
1: 					aggResult = (singleInputRow && minAgg) ?
1: 								execIndexRow :
1: 								(ExecIndexRow) execIndexRow.getClone();
1: 					
1: 					initializeScalarAggregation(aggResult);
1: 				}
1: 				else
1: 				{
1: 					accumulateScalarAggregation(execIndexRow, aggResult, false);
1: 				}
1: 
1: 				/* Only need to look at first single row if 
1: 				 * min/max optimization is on and operation is MIN
1: 				 * or if operation is MAX first non-null row since null sorts
1: 				 * as highest in btree
1: 				 * Note only 1 aggregate is allowed in a singleInputRow 
1:                  * optimization so we only need to look at the first aggregate
1: 				 */
1: 				if (singleInputRow && 
1: 					(minAgg || 
1:                      !aggResult.getColumn(aggregates[0].aggregatorColumnId).isNull()))
1: 				{
1: 					break;
1: 				}
1: 	        }
1: 
1: 			/*
1: 			** If we have aggregates, we need to generate a
1: 			** value for them now.  Only finish the aggregation
1: 			** if we haven't yet (i.e. if countOfRows == 0).
1: 			** If there weren't any input rows, we'll allocate
1: 			** one here.
1: 			*/
1: 			if (countOfRows == 0)
1: 			{
1: 				aggResult = finishAggregation(aggResult);
0: 				currentRow = aggResult;
1: 				setCurrentRow(aggResult);
1: 				countOfRows++;
1: 			}
1: 	    }
1: 
1: 		nextSatisfied = true;
1: 		nextTime += getElapsedMillis(beginTime);
1: 		return aggResult;
1: 	}
1: 
1: 	/**
1: 	 * If the result set has been opened,
1: 	 * close the open scan.
1: 	 *
1: 	 * @exception StandardException thrown on error
1: 	 */
1: 	public void	close() throws StandardException
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 		if ( isOpen )
1: 	    {
1: 			// we don't want to keep around a pointer to the
1: 			// row ... so it can be thrown away.
1: 			// REVISIT: does this need to be in a finally
1: 			// block, to ensure that it is executed?
1: 		    clearCurrentRow();
0: 			if (closeCleanup != null) {
0: 				closeCleanup.invoke(activation); // let activation tidy up
1: 			}
1: 
1: 	        countOfRows = 0;
0: 			currentRow = null;
1: 			sourceExecIndexRow = null;
1: 			source.close();
1: 
1: 			super.close();
1: 		}
1: 		else
1: 			if (SanityManager.DEBUG)
1: 				SanityManager.DEBUG("CloseRepeatInfo","Close of SortResultSet repeated");
1: 
1: 		closeTime += getElapsedMillis(beginTime);
1: 
1: 		nextSatisfied = false;
1: 		isOpen = false;
1: 	}
1: 
1: 	/**
1: 	 * Return the total amount of time spent in this ResultSet
1: 	 *
1: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1: 	 *
1: 	 * @return long		The total amount of time spent (in milliseconds).
1: 	 */
1: 	public long getTimeSpent(int type)
1: 	{
1: 		long totTime = constructorTime + openTime + nextTime + 
1: 						closeTime;
1: 
1: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1: 		{
1: 			return	totTime - originalSource.getTimeSpent(ENTIRE_RESULTSET_TREE);
1: 		}
1: 		else
1: 		{
1: 			return totTime;
1: 		}
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// CursorResultSet interface
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * This result set has its row location from
1: 	 * the last fetch done. Always returns null.
1: 	 *
1: 	 * @see CursorResultSet
1: 	 *
1: 	 * @return the row location of the current cursor row.
1: 	 * @exception StandardException thrown on failure to get row location
1: 	 */
1: 	public RowLocation getRowLocation() throws StandardException
1: 	{
1: 		return null;
1: 	}
1: 
1: 	/**
1: 	 * This result set has its row from the last fetch done. 
1: 	 * If the cursor is closed, a null is returned.
1: 	 *
1: 	 * @see CursorResultSet
1: 	 *
1: 	 * @return the last row returned;
1: 	 * @exception StandardException thrown on failure.
1: 	 */
1: 	/* RESOLVE - this should return activation.getCurrentRow(resultSetNumber),
1: 	 * once there is such a method.  (currentRow is redundant)
1: 	 */
1: 	public ExecRow getCurrentRow() throws StandardException 
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(isOpen, "SortResultSet expected to be open");
1: 
1: 		return currentRow;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// SCAN ABSTRACTION UTILITIES
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Get a row from the input result set.  
1: 	 *
1: 	 * @param doClone - true of the row should be cloned
1: 	 *
1: 	 * @exception StandardException Thrown on error
1: 	 */	
1: 	public ExecIndexRow getRowFromResultSet(boolean doClone)
1: 		throws StandardException
1: 	{
1: 		ExecRow					sourceRow;
1: 		ExecIndexRow			inputRow = null;	
1: 
1: 		if ((sourceRow = source.getNextRowCore()) != null)
1: 		{
1: 			rowsInput++;
1: 			sourceExecIndexRow.execRowToExecIndexRow(
1: 					doClone ? sourceRow.getClone() : sourceRow);
1: 			inputRow = sourceExecIndexRow;
1: 		}
1: 
1: 		return inputRow;
1: 	}
1: 
1: 	/**
1: 	 * reopen a scan on the table. scan parameters are evaluated
1: 	 * at each open, so there is probably some way of altering
1: 	 * their values...
1: 	 *
1: 	 * @exception StandardException thrown if cursor finished.
1: 	 */
1: 	public void	reopenCore() throws StandardException 
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 		if (SanityManager.DEBUG)
1: 	    	SanityManager.ASSERT(isOpen, "NormalizeResultSet already open");
1: 
1: 		source.reopenCore();
1: 		numOpens++;
1:         countOfRows = 0;
1: 		nextSatisfied = false;
1: 
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// AGGREGATION UTILITIES
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Run accumulation on every aggregate in this
1: 	 * row.  This method is useful when draining the source
1: 	 * or sorter, depending on whether or not there were any
1: 	 * distinct aggregates.  Remember, if there are distinct
1: 	 * aggregates, then the non-distinct aggregates were
1: 	 * calculated on the way into the sorter and only the
1: 	 * distinct aggregates will be accumulated here.
1: 	 * Otherwise, all aggregates will be accumulated here.
1: 	 *
0: 	 * @param	the input row
0: 	 * @param	the row with the accumulator (may be the same as
0: 	 *			the input row.
1: 	 * @param	hasDistinctAggregates does this scan have distinct
1: 	 *			aggregates.  Used to figure out whether to merge
1: 	 *			or accumulate nondistinct aggregates.
1: 	 *
1: 	 * @exception StandardException Thrown on error
1: 	 */
1: 	protected void accumulateScalarAggregation
1: 	(
1: 		ExecRow inputRow, 
1: 		ExecRow accumulateRow, 
1: 		boolean hasDistinctAggregates
1: 	)
1: 		throws StandardException
1: 	{
1: 		int size = aggregates.length;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT((inputRow != null) && (accumulateRow != null), 
1: 					"Null row passed to accumulateScalarAggregation");
1: 		}
1: 		for (int i = 0; i < size; i++)
1: 		{
1: 			GenericAggregator currAggregate = aggregates[i];
1: 			if	(hasDistinctAggregates && 
1: 				 !currAggregate.getAggregatorInfo().isDistinct())
1: 			{
1: 				currAggregate.merge(inputRow, accumulateRow);
1: 			}
1: 			else
1: 			{
1: 				currAggregate.accumulate(inputRow, accumulateRow);
1: 			}
1: 		}
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// CLASS SPECIFIC
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: 
1: 	/*
1: 	** Run the aggregator initialization method for
1: 	** each aggregator in the row. 
1: 	**
1: 	** @param	row	the row to initialize
1: 	**
1: 	** @return Nothing.
1: 	**
0: 	** @exception	standard cloudscape exception
1: 	*/
1: 	private void initializeScalarAggregation(ExecRow row)
1: 		throws StandardException
1: 	{
1: 		int size = aggregates.length;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(row != null, 
1: 					"Null row passed to initializeScalarAggregation");
1: 		}
1: 
1: 		for (int i = 0; i < size; i++)
1: 		{
1: 			GenericAggregator currAggregate = aggregates[i];
1: 			currAggregate.initialize(row);
1: 			currAggregate.accumulate(row, row);
1: 		}
1: 	}
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 	** @exception	standard Derby exception
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param	inputRow	the input row
1: 	 * @param	accumulateRow	the row with the accumulator (may be the same as the input row.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.services.io.FormatableArrayHolder;
0: 
0: import java.util.Properties;
0: import java.util.Vector;
0: import java.util.Enumeration;
0: 
0: /**
0:  * This ResultSet evaluates scalar, non distinct aggregates.
0:  * It will scan the entire source result set and calculate
0:  * the scalar aggregates when scanning the source during the 
0:  * first call to next().
0:  *
0:  * @author jerry (broken out from SortResultSet)
0:  */
0: public class ScalarAggregateResultSet extends GenericAggregateResultSet
0: 	implements CursorResultSet 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/* Run time statistics variables */
0: 	public int rowsInput;
0: 
0:     // set in constructor and not altered during
0:     // life of object.
0: 	public 		boolean 			singleInputRow;
0: 	protected 	ExecIndexRow 		sortTemplateRow;
0: 	protected 	boolean 			isInSortedOrder;		// true if source results in sorted order
0: 
0: 	// Cache ExecIndexRow for scalar aggregates
0: 	protected ExecIndexRow sourceExecIndexRow;
0: 
0: 	// Remember whether or not a next() has been satisfied
0: 	private boolean nextSatisfied;
0: 
0:     /**
0: 	 * Constructor
0: 	 *
0: 	 * @param	s			input result set
0: 	 * @param	isInSortedOrder	true if the source results are in sorted order
0: 	 * @param	aggregateItem	indicates the number of the
0: 	 *		SavedObject off of the PreparedStatement that holds the
0: 	 *		AggregatorInfoList used by this routine. 
0: 	 * @param	a				activation
0: 	 * @param	ra				generated method to build an empty
0: 	 *	 	output row 
0: 	 * @param	resultSetNumber	The resultSetNumber for this result set
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */
0:     public ScalarAggregateResultSet(NoPutResultSet s,
0: 					boolean isInSortedOrder,
0: 					int	aggregateItem,
0: 					Activation a,
0: 					GeneratedMethod ra,
0: 					int resultSetNumber,
0: 					boolean singleInputRow,
0: 				    double optimizerEstimatedRowCount,
0: 				    double optimizerEstimatedCost,
0: 					GeneratedMethod c) throws StandardException 
0: 	{
0: 		super(s, aggregateItem, a, ra, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost, c);
0: 		this.isInSortedOrder = isInSortedOrder;
0: 		// source expected to be non-null, mystery stress test bug
0: 		// - sometimes get NullPointerException in openCore().
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(source != null,
0: 				"SARS(), source expected to be non-null");
0: 		}
0: 		sortTemplateRow = getExecutionFactory().getIndexableRow((ExecRow) rowAllocator.invoke(activation));
0: 		this.singleInputRow = singleInputRow;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.DEBUG("AggregateTrace","execution time: "+ 
0: 					a.getPreparedStatement().getSavedObject(aggregateItem));
0: 		}
0: 		constructorTime += getElapsedMillis(beginTime);
0:     }
0: 
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// ResultSet interface (leftover from NoPutResultSet)
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Open the scan.  Load the sorter and prepare to get
0: 	 * rows from it.
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0:      */
0: 	public void	openCore() throws StandardException 
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 
0: 		// source expected to be non-null, mystery stress test bug
0: 		// - sometimes get NullPointerException in openCore().
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(source != null,
0: 				"SARS.openCore(), source expected to be non-null");
0: 	    	SanityManager.ASSERT( ! isOpen, "ScalarAggregateResultSet already open");
0: 		}
0: 
0: 		sourceExecIndexRow = getExecutionFactory().getIndexableRow(sortTemplateRow);
0: 
0:         source.openCore();
0: 
0: 	    isOpen = true;
0: 		numOpens++;
0: 
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 
0: 	protected int countOfRows;
0: 
0: 	/* RESOLVE - THIS NEXT METHOD IS OVERRIDEN IN DistinctScalarResultSet
0: 	 * BEACAUSE OF A JIT ERROR. THERE IS NO OTHER
0: 	 * REASON TO OVERRIDE IT IN DistinctScalarAggregateResultSet.  THE BUG WAS FOUND IN
0: 	 * 1.1.6 WITH THE JIT.
0: 	 */
0: 	/**
0: 	 * Return the next row.  If it is a scalar aggregate scan
0: 	 *
0: 	 * @exception StandardException thrown on failure.
0: 	 * @exception StandardException ResultSetNotOpen thrown if not yet open.
0: 	 *
0: 	 * @return the next row in the result
0: 	 */
0: 	public ExecRow	getNextRowCore() throws StandardException 
0: 	{
0: 		if (nextSatisfied)
0: 		{
0: 			clearCurrentRow();
0: 			return null;
0: 		}
0: 
0: 	    ExecIndexRow sortResult = null;
0: 	    ExecRow result = null;
0: 	    ExecIndexRow execIndexRow = null;
0: 	    ExecIndexRow aggResult = null;
0: 		//only care if it is a minAgg if we have a singleInputRow, then we know
0: 		//we are only looking at one aggregate
0: 		boolean minAgg = (singleInputRow && aggregates[0].aggInfo.aggregateName.equals("MIN"));
0: 		beginTime = getCurrentTimeMillis();
0: 	    if (isOpen)
0: 	    {
0: 			/*
0: 			** We are dealing with a scalar aggregate.
0: 			** Zip through each row and accumulate.
0: 			** Accumulate into the first row.  Only
0: 			** the first row is cloned.
0: 			*/
0: 	        while ((execIndexRow = getRowFromResultSet(false)) != null)
0: 	        {
0: 				/*
0: 				** Use a clone of the first row as our result.  
0: 				** We need to get a clone since we will be reusing
0: 				** the original as the wrapper of the source row.
0: 				** Turn cloning off since we wont be keeping any
0: 				** other rows.
0: 				*/
0: 				if (aggResult == null)
0: 				{
0: 					/* No need to clone the row when doing the min/max 
0: 					 * optimization for MIN, since we will not do another
0: 					 * next on the underlying result set.
0: 					 */
0: 					aggResult = (singleInputRow && minAgg) ?
0: 								execIndexRow :
0: 								(ExecIndexRow) execIndexRow.getClone();
0: 					
0: 					initializeScalarAggregation(aggResult);
0: 				}
0: 				else
0: 				{
0: 					accumulateScalarAggregation(execIndexRow, aggResult, false);
0: 				}
0: 
0: 				/* Only need to look at first single row if 
0: 				 * min/max optimization is on and operation is MIN
0: 				 * or if operation is MAX first non-null row since null sorts
0: 				 * as highest in btree
0: 				 * Note only 1 aggregate is allowed in a singleInputRow 
0:                  * optimization so we only need to look at the first aggregate
0: 				 */
0: 				if (singleInputRow && 
0: 					(minAgg || 
0:                      !aggResult.getColumn(aggregates[0].aggregatorColumnId).isNull()))
0: 				{
0: 					break;
0: 				}
0: 	        }
0: 
0: 			/*
0: 			** If we have aggregates, we need to generate a
0: 			** value for them now.  Only finish the aggregation
0: 			** if we haven't yet (i.e. if countOfRows == 0).
0: 			** If there weren't any input rows, we'll allocate
0: 			** one here.
0: 			*/
0: 			if (countOfRows == 0)
0: 			{
0: 				aggResult = finishAggregation(aggResult);
0: 				currentRow = aggResult;
0: 				setCurrentRow(aggResult);
0: 				countOfRows++;
0: 			}
0: 	    }
0: 
0: 		nextSatisfied = true;
0: 		nextTime += getElapsedMillis(beginTime);
0: 		return aggResult;
0: 	}
0: 
0: 	/**
0: 	 * If the result set has been opened,
0: 	 * close the open scan.
0: 	 *
0: 	 * @exception StandardException thrown on error
0: 	 */
0: 	public void	close() throws StandardException
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 		if ( isOpen )
0: 	    {
0: 			// we don't want to keep around a pointer to the
0: 			// row ... so it can be thrown away.
0: 			// REVISIT: does this need to be in a finally
0: 			// block, to ensure that it is executed?
0: 		    clearCurrentRow();
0: 			if (closeCleanup != null) {
0: 				closeCleanup.invoke(activation); // let activation tidy up
0: 			}
0: 
0: 	        countOfRows = 0;
0: 			currentRow = null;
0: 			sourceExecIndexRow = null;
0: 			source.close();
0: 
0: 			super.close();
0: 		}
0: 		else
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.DEBUG("CloseRepeatInfo","Close of SortResultSet repeated");
0: 
0: 		closeTime += getElapsedMillis(beginTime);
0: 
0: 		nextSatisfied = false;
0: 		isOpen = false;
0: 	}
0: 
0: 	/**
0: 	 * Return the total amount of time spent in this ResultSet
0: 	 *
0: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
0: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
0: 	 *
0: 	 * @return long		The total amount of time spent (in milliseconds).
0: 	 */
0: 	public long getTimeSpent(int type)
0: 	{
0: 		long totTime = constructorTime + openTime + nextTime + 
0: 						closeTime;
0: 
0: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
0: 		{
0: 			return	totTime - originalSource.getTimeSpent(ENTIRE_RESULTSET_TREE);
0: 		}
0: 		else
0: 		{
0: 			return totTime;
0: 		}
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// CursorResultSet interface
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * This result set has its row location from
0: 	 * the last fetch done. Always returns null.
0: 	 *
0: 	 * @see CursorResultSet
0: 	 *
0: 	 * @return the row location of the current cursor row.
0: 	 * @exception StandardException thrown on failure to get row location
0: 	 */
0: 	public RowLocation getRowLocation() throws StandardException
0: 	{
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	 * This result set has its row from the last fetch done. 
0: 	 * If the cursor is closed, a null is returned.
0: 	 *
0: 	 * @see CursorResultSet
0: 	 *
0: 	 * @return the last row returned;
0: 	 * @exception StandardException thrown on failure.
0: 	 */
0: 	/* RESOLVE - this should return activation.getCurrentRow(resultSetNumber),
0: 	 * once there is such a method.  (currentRow is redundant)
0: 	 */
0: 	public ExecRow getCurrentRow() throws StandardException 
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(isOpen, "SortResultSet expected to be open");
0: 
0: 		return currentRow;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// SCAN ABSTRACTION UTILITIES
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Get a row from the input result set.  
0: 	 *
0: 	 * @param doClone - true of the row should be cloned
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */	
0: 	public ExecIndexRow getRowFromResultSet(boolean doClone)
0: 		throws StandardException
0: 	{
0: 		ExecRow					sourceRow;
0: 		ExecIndexRow			inputRow = null;	
0: 
0: 		if ((sourceRow = source.getNextRowCore()) != null)
0: 		{
0: 			rowsInput++;
0: 			sourceExecIndexRow.execRowToExecIndexRow(
0: 					doClone ? sourceRow.getClone() : sourceRow);
0: 			inputRow = sourceExecIndexRow;
0: 		}
0: 
0: 		return inputRow;
0: 	}
0: 
0: 	/**
0: 	 * reopen a scan on the table. scan parameters are evaluated
0: 	 * at each open, so there is probably some way of altering
0: 	 * their values...
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0: 	 */
0: 	public void	reopenCore() throws StandardException 
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 		if (SanityManager.DEBUG)
0: 	    	SanityManager.ASSERT(isOpen, "NormalizeResultSet already open");
0: 
0: 		source.reopenCore();
0: 		numOpens++;
0:         countOfRows = 0;
0: 		nextSatisfied = false;
0: 
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// AGGREGATION UTILITIES
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Run accumulation on every aggregate in this
0: 	 * row.  This method is useful when draining the source
0: 	 * or sorter, depending on whether or not there were any
0: 	 * distinct aggregates.  Remember, if there are distinct
0: 	 * aggregates, then the non-distinct aggregates were
0: 	 * calculated on the way into the sorter and only the
0: 	 * distinct aggregates will be accumulated here.
0: 	 * Otherwise, all aggregates will be accumulated here.
0: 	 *
0: 	 * @param	the input row
0: 	 * @param	the row with the accumulator (may be the same as
0: 	 *			the input row.
0: 	 * @param	hasDistinctAggregates does this scan have distinct
0: 	 *			aggregates.  Used to figure out whether to merge
0: 	 *			or accumulate nondistinct aggregates.
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	protected void accumulateScalarAggregation
0: 	(
0: 		ExecRow inputRow, 
0: 		ExecRow accumulateRow, 
0: 		boolean hasDistinctAggregates
0: 	)
0: 		throws StandardException
0: 	{
0: 		int size = aggregates.length;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT((inputRow != null) && (accumulateRow != null), 
0: 					"Null row passed to accumulateScalarAggregation");
0: 		}
0: 		for (int i = 0; i < size; i++)
0: 		{
0: 			GenericAggregator currAggregate = aggregates[i];
0: 			if	(hasDistinctAggregates && 
0: 				 !currAggregate.getAggregatorInfo().isDistinct())
0: 			{
0: 				currAggregate.merge(inputRow, accumulateRow);
0: 			}
0: 			else
0: 			{
0: 				currAggregate.accumulate(inputRow, accumulateRow);
0: 			}
0: 		}
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// CLASS SPECIFIC
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: 
0: 	/*
0: 	** Run the aggregator initialization method for
0: 	** each aggregator in the row. 
0: 	**
0: 	** @param	row	the row to initialize
0: 	**
0: 	** @return Nothing.
0: 	**
0: 	** @exception	standard cloudscape exception
0: 	*/
0: 	private void initializeScalarAggregation(ExecRow row)
0: 		throws StandardException
0: 	{
0: 		int size = aggregates.length;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(row != null, 
0: 					"Null row passed to initializeScalarAggregation");
0: 		}
0: 
0: 		for (int i = 0; i < size; i++)
0: 		{
0: 			GenericAggregator currAggregate = aggregates[i];
0: 			currAggregate.initialize(row);
0: 			currAggregate.accumulate(row, row);
0: 		}
0: 	}
0: }
============================================================================