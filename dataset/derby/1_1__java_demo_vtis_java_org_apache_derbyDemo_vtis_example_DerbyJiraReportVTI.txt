1:b7ecfd9: /*
1:b7ecfd9: 
1:b7ecfd9: Derby - Class org.apache.derbyDemo.vtis.example.DerbyJiraReportVTI
1:b7ecfd9: 
1:b7ecfd9: Licensed to the Apache Software Foundation (ASF) under one or more
1:b7ecfd9: contributor license agreements.  See the NOTICE file distributed with
1:b7ecfd9: this work for additional information regarding copyright ownership.
1:b7ecfd9: The ASF licenses this file to You under the Apache License, Version 2.0
1:b7ecfd9: (the "License"); you may not use this file except in compliance with
1:b7ecfd9: the License.  You may obtain a copy of the License at
1:b7ecfd9: 
1:b7ecfd9: http://www.apache.org/licenses/LICENSE-2.0
1:b7ecfd9: 
1:b7ecfd9: Unless required by applicable law or agreed to in writing, software
1:b7ecfd9: distributed under the License is distributed on an "AS IS" BASIS,
1:b7ecfd9: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7ecfd9: See the License for the specific language governing permissions and
1:b7ecfd9: limitations under the License.
1:b7ecfd9: 
1:b7ecfd9: */
1:b7ecfd9: 
1:b7ecfd9: package org.apache.derbyDemo.vtis.example;
1:b7ecfd9: 
1:66ed4a2: import java.io.FileInputStream;
1:fae21bf: import java.io.InputStream;
1:b7ecfd9: import java.sql.*;
1:b7ecfd9: import java.text.SimpleDateFormat;
1:b7ecfd9: 
1:fae21bf: import org.apache.derby.vti.XmlVTI;
1:b7ecfd9: import org.apache.derbyDemo.vtis.core.*;
1:b7ecfd9: 
1:b7ecfd9: /**
1:b7ecfd9:  * <p>
1:b7ecfd9:  * This is an XML-reading VTI which has been tweaked to handle
1:b7ecfd9:  * the formatting of JIRA ids found in Derby JIRA reports.
1:b7ecfd9:  * </p>
1:b7ecfd9:  *
1:b7ecfd9:   */
1:b7ecfd9: public  class   DerbyJiraReportVTI  extends XmlVTI
1:b7ecfd9: {
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // CONSTANTS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // STATE
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     private SimpleDateFormat    _dateFormatter;
1:b7ecfd9:     
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // CONSTRUCTORS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Construct from the same arguments as our superclass.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:fae21bf:     public  DerbyJiraReportVTI( InputStream is )
1:b7ecfd9:     {
1:fae21bf:         super
1:fae21bf:             (
1:fae21bf:              is,
1:fae21bf:              "item",
1:fae21bf:              0,
1:fae21bf:              "key", "type", "priority", "status", "component", "customfieldvalue", "title"
1:fae21bf:              );
1:fae21bf:     }
1:fae21bf:     
1:fae21bf:     ///////////////////////////////////////////////////////////////////////////////////
1:fae21bf:     //
1:fae21bf:     // FUNCTION ENTRY POINT (BOUND BY THE CREATE FUNCTION STATEMENT)
1:fae21bf:     //
1:fae21bf:     ///////////////////////////////////////////////////////////////////////////////////
1:fae21bf: 
1:66ed4a2:     /** Create from an file name identifying the server log file */
1:fae21bf:     public  static  DerbyJiraReportVTI  apacheNaturalJiraReport( String xmlResourceName )
1:fae21bf:         throws Exception
1:fae21bf:     {
1:66ed4a2:         return new DerbyJiraReportVTI( new FileInputStream( xmlResourceName ) );
1:b7ecfd9:     }
1:b7ecfd9:     
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // ResultSet BEHAVIOR
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * JIRA prepends "DERBY-" to the issue key. Strip off this prefix so that we
1:b7ecfd9:      * can sort the key as an integer value.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     public String getString( int columnIndex ) throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         String  rawValue = super.getString( columnIndex );
1:b7ecfd9: 
1:19d913d:         if ( !"key".equals( getColumnName( columnIndex ) ) )
1:b7ecfd9:         { return rawValue; }
1:b7ecfd9:         else
1:b7ecfd9:         { return rawValue.substring( 6 ); }
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // MINIONS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:66ed4a2
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileInputStream;
/////////////////////////////////////////////////////////////////////////
1:     /** Create from an file name identifying the server log file */
1:         return new DerbyJiraReportVTI( new FileInputStream( xmlResourceName ) );
commit:fae21bf
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
0: import java.net.URL;
1: import org.apache.derby.vti.XmlVTI;
/////////////////////////////////////////////////////////////////////////
1:     public  DerbyJiraReportVTI( InputStream is )
1:         super
1:             (
1:              is,
1:              "item",
1:              0,
1:              "key", "type", "priority", "status", "component", "customfieldvalue", "title"
1:              );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // FUNCTION ENTRY POINT (BOUND BY THE CREATE FUNCTION STATEMENT)
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     /** Create from an URL string identifying the server log file */
1:     public  static  DerbyJiraReportVTI  apacheNaturalJiraReport( String xmlResourceName )
1:         throws Exception
1:     {
0:         return new DerbyJiraReportVTI( (new URL( xmlResourceName )).openStream() );
commit:19d913d
/////////////////////////////////////////////////////////////////////////
1:         if ( !"key".equals( getColumnName( columnIndex ) ) )
commit:b7ecfd9
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyDemo.vtis.example.DerbyJiraReportVTI
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyDemo.vtis.example;
1: 
1: import java.sql.*;
1: import java.text.SimpleDateFormat;
1: 
1: import org.apache.derbyDemo.vtis.core.*;
1: 
1: /**
1:  * <p>
1:  * This is an XML-reading VTI which has been tweaked to handle
1:  * the formatting of JIRA ids found in Derby JIRA reports.
1:  * </p>
1:  *
1:   */
1: public  class   DerbyJiraReportVTI  extends XmlVTI
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private SimpleDateFormat    _dateFormatter;
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Construct from the same arguments as our superclass.
1:      * </p>
1:      */
0:     public  DerbyJiraReportVTI( String xmlResourceName, String rowTag, String[] childTags )
1:     {
0:         super( xmlResourceName, rowTag, childTags );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ResultSet BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * JIRA prepends "DERBY-" to the issue key. Strip off this prefix so that we
1:      * can sort the key as an integer value.
1:      * </p>
1:      */
1:     public String getString( int columnIndex ) throws SQLException
1:     {
1:         String  rawValue = super.getString( columnIndex );
1: 
0:         if ( !"key".equals( getColumnNames()[ columnIndex - 1 ] ) )
1:         { return rawValue; }
1:         else
1:         { return rawValue.substring( 6 ); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: }
============================================================================