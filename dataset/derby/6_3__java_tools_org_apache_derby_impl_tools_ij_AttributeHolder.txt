1:eac0369: /*
2:eac0369: 
1:985fc85:    Derby - Class org.apache.derby.impl.tools.ij.AttributeHolder
1:985fc85: 
1:11bc2d0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11bc2d0:    contributor license agreements.  See the NOTICE file distributed with
1:11bc2d0:    this work for additional information regarding copyright ownership.
1:11bc2d0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:11bc2d0:    (the "License"); you may not use this file except in compliance with
1:11bc2d0:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
1:985fc85: 
2:eac0369:  */
1:eac0369: 
1:eac0369: 
1:eac0369: package org.apache.derby.impl.tools.ij;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.Attribute;
1:eac0369: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1:eac0369: import java.util.Locale;
1:eac0369: import java.util.Vector;
1:eac0369: import java.util.Properties;
1:eac0369: import java.util.Enumeration;
1:eac0369: import java.util.StringTokenizer;
1:eac0369: import java.lang.reflect.Field;
1:eac0369: import java.sql.SQLException;
1:eac0369: 
1:8a9e2f1: public class AttributeHolder {
1:eac0369: 
1:eac0369:     //This is an inner class.  This class hold the details about each
1:eac0369:     //specific attribute which includes what the attribute is and
1:eac0369:     //any error found.
1:eac0369:     String name;
1:eac0369:     String value;
1:eac0369:     String token;
1:16d3334:     Vector<String> errors = new Vector<String>();
1:eac0369: 
1:8a9e2f1:     public String getName(){
1:eac0369:       return name;
1:eac0369:     }
1:8a9e2f1:     public void setName(String aString){
1:eac0369:       name = aString;
1:eac0369:     }
1:b1153d5:     String getValue(){
1:eac0369:       return value;
1:eac0369:     }
1:8a9e2f1:     public void setValue(String aString){
1:eac0369:       value = aString;
1:eac0369:     }
1:b1153d5:     String getToken(){
1:eac0369:       return token;
1:eac0369:     }
1:8a9e2f1:     public void setToken(String aString){
1:eac0369:       token = aString;
1:eac0369:     }
1:8a9e2f1:     public void addError(String aString) {
1:eac0369:       //Keep track of error message for later display.
1:eac0369:       if (!errors.contains(aString))
1:eac0369:         errors.addElement(aString);
1:eac0369:     }
1:8a9e2f1:    public void check( Vector validProps){
1:eac0369:       checkName( validProps);
1:eac0369:       //checkValue();
1:eac0369:       displayErrors();
1:eac0369:     }
1:b1153d5:     void displayErrors(){
1:eac0369:       //If no error are found then nothing is displayed.
1:16d3334:       Enumeration<String> e = errors.elements();
1:eac0369:       //In the first line, show the exact token that was parsed from
1:eac0369:       //the URL.
1:df9af89:       if (e.hasMoreElements())
1:eac0369:         display(LocalizedResource.getMessage("TL_urlLabel1", "[", getToken(), "]"));
1:eac0369:       //Show all errors.  More than one error can be found for an attribute.
1:df9af89:       while (e.hasMoreElements()){
1:16d3334:         String aString = e.nextElement();
1:eac0369:         displayIndented(aString);
1:eac0369:       }
1:eac0369:     }
1:b1153d5:     void checkName( Vector validProps){
1:eac0369:       if( validProps == null)
1:eac0369:           return; // valid properties are unknown
1:eac0369:       String anAtt = getName();
1:eac0369:       try {
1:eac0369:         //Check the found name against valid names.
1:eac0369:         if (!validProps.contains(anAtt)) {
1:eac0369:           //Check for case spelling of the name.
1:eac0369:           if (validProps.contains(anAtt.toLowerCase(java.util.Locale.ENGLISH))) {
1:eac0369:             errors.addElement(LocalizedResource.getMessage("TL_incorCase"));
1:eac0369:           }
1:eac0369:           //Check if this is even a valid attribute name.
1:eac0369:           else {
1:eac0369:             errors.addElement(LocalizedResource.getMessage("TL_unknownAtt"));
1:eac0369:           }
1:eac0369:         }
1:eac0369:         else {
1:eac0369:           //This Is a valid attribute.
1:eac0369:         }
1:eac0369:       }
1:eac0369:       catch (Exception ex) {
1:eac0369:         ex.printStackTrace();
1:eac0369:       }
1:eac0369:     }
1:b1153d5:     void checkValue(){
1:eac0369:       String anAtt = getName(); 
1:eac0369:       String aValue = getValue();
1:eac0369:       try {
1:eac0369:         //Check all attribute that require a boolean.
1:eac0369:         if (URLCheck.getBooleanAttributes().contains(anAtt)) {
1:eac0369:           if (!checkBoolean(aValue)) {
1:eac0369:             errors.addElement(LocalizedResource.getMessage("TL_trueFalse"));
1:eac0369:           }
1:eac0369:         }
1:eac0369:       }
1:eac0369:       catch (Exception ex) {
1:eac0369:         ex.printStackTrace();
1:eac0369:       }
1:eac0369:     }
1:b1153d5: 	  boolean checkBoolean(String aValue) {
1:eac0369: 		  if (aValue == null)
1:eac0369: 			  return false;
1:eac0369: 		  return aValue.toLowerCase(Locale.ENGLISH).equals("true") || 
1:eac0369: 			  aValue.toLowerCase(Locale.ENGLISH).equals("false");
1:eac0369: 	  }
1:b1153d5:     void display(String aString) {
1:eac0369: 		LocalizedResource.OutputWriter().println(aString);
1:eac0369:     }
1:b1153d5:     void displayIndented(String aString) {
1:eac0369: 		LocalizedResource.OutputWriter().println("   " + aString);
1:eac0369:     }
1:eac0369:   }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:16d3334
/////////////////////////////////////////////////////////////////////////
1:     Vector<String> errors = new Vector<String>();
/////////////////////////////////////////////////////////////////////////
1:       Enumeration<String> e = errors.elements();
1:         String aString = e.nextElement();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:6813da0
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11bc2d0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:8a9e2f1
/////////////////////////////////////////////////////////////////////////
1: public class AttributeHolder {
/////////////////////////////////////////////////////////////////////////
1:     public String getName(){
1:     public void setName(String aString){
1:     public void setValue(String aString){
1:     public void setToken(String aString){
1:     public void addError(String aString) {
1:    public void check( Vector validProps){
commit:b1153d5
/////////////////////////////////////////////////////////////////////////
0: class AttributeHolder {
/////////////////////////////////////////////////////////////////////////
0:     String getName(){
0:     void setName(String aString){
1:     String getValue(){
0:     void setValue(String aString){
1:     String getToken(){
0:     void setToken(String aString){
0:     void addError(String aString) {
0:     void check( Vector validProps){
1:     void displayErrors(){
/////////////////////////////////////////////////////////////////////////
1:     void checkName( Vector validProps){
/////////////////////////////////////////////////////////////////////////
1:     void checkValue(){
/////////////////////////////////////////////////////////////////////////
1: 	  boolean checkBoolean(String aValue) {
1:     void display(String aString) {
1:     void displayIndented(String aString) {
commit:df9af89
/////////////////////////////////////////////////////////////////////////
0:       Enumeration e = errors.elements();
1:       if (e.hasMoreElements())
1:       while (e.hasMoreElements()){
0:         String aString = (String)e.nextElement();
commit:985fc85
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.ij.AttributeHolder
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: 
1: package org.apache.derby.impl.tools.ij;
1: 
1: import org.apache.derby.iapi.reference.Attribute;
1: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
0: import org.apache.derby.tools.URLCheck;
1: import java.util.Locale;
1: import java.util.Vector;
1: import java.util.Properties;
1: import java.util.Enumeration;
1: import java.util.StringTokenizer;
1: import java.lang.reflect.Field;
1: import java.sql.SQLException;
1: 
0: public class AttributeHolder {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1:     //This is an inner class.  This class hold the details about each
1:     //specific attribute which includes what the attribute is and
1:     //any error found.
1:     String name;
1:     String value;
1:     String token;
0:     Vector errors = new Vector();
1: 
0:     public String getName(){
1:       return name;
1:     }
0:     public void setName(String aString){
1:       name = aString;
1:     }
0:     public String getValue(){
1:       return value;
1:     }
0:     public void setValue(String aString){
1:       value = aString;
1:     }
0:     public String getToken(){
1:       return token;
1:     }
0:     public void setToken(String aString){
1:       token = aString;
1:     }
0:     public void addError(String aString) {
1:       //Keep track of error message for later display.
1:       if (!errors.contains(aString))
1:         errors.addElement(aString);
1:     }
0:     public void check( Vector validProps){
1:       checkName( validProps);
1:       //checkValue();
1:       displayErrors();
1:     }
0:     public void displayErrors(){
1:       //If no error are found then nothing is displayed.
0:       Enumeration enum = errors.elements();
1:       //In the first line, show the exact token that was parsed from
1:       //the URL.
0:       if (enum.hasMoreElements())
1:         display(LocalizedResource.getMessage("TL_urlLabel1", "[", getToken(), "]"));
1:       //Show all errors.  More than one error can be found for an attribute.
0:       while (enum.hasMoreElements()){
0:         String aString = (String)enum.nextElement();
1:         displayIndented(aString);
1:       }
1:     }
0:     public void checkName( Vector validProps){
1:       if( validProps == null)
1:           return; // valid properties are unknown
1:       String anAtt = getName();
1:       try {
1:         //Check the found name against valid names.
1:         if (!validProps.contains(anAtt)) {
1:           //Check for case spelling of the name.
1:           if (validProps.contains(anAtt.toLowerCase(java.util.Locale.ENGLISH))) {
1:             errors.addElement(LocalizedResource.getMessage("TL_incorCase"));
1:           }
1:           //Check if this is even a valid attribute name.
1:           else {
1:             errors.addElement(LocalizedResource.getMessage("TL_unknownAtt"));
1:           }
1:         }
1:         else {
1:           //This Is a valid attribute.
1:         }
1:       }
1:       catch (Exception ex) {
1:         ex.printStackTrace();
1:       }
1:     }
0:     public void checkValue(){
1:       String anAtt = getName(); 
1:       String aValue = getValue();
1:       try {
1:         //Check all attribute that require a boolean.
1:         if (URLCheck.getBooleanAttributes().contains(anAtt)) {
1:           if (!checkBoolean(aValue)) {
1:             errors.addElement(LocalizedResource.getMessage("TL_trueFalse"));
1:           }
1:         }
1:       }
1:       catch (Exception ex) {
1:         ex.printStackTrace();
1:       }
1:     }
0: 	  public boolean checkBoolean(String aValue) {
1: 		  if (aValue == null)
1: 			  return false;
1: 		  return aValue.toLowerCase(Locale.ENGLISH).equals("true") || 
1: 			  aValue.toLowerCase(Locale.ENGLISH).equals("false");
1: 	  }
0:     public void display(String aString) {
1: 		LocalizedResource.OutputWriter().println(aString);
1:     }
0:     public void displayIndented(String aString) {
1: 		LocalizedResource.OutputWriter().println("   " + aString);
1:     }
1:   }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: 
0: package org.apache.derby.impl.tools.ij;
0: 
0: import org.apache.derby.iapi.reference.Attribute;
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
0: import org.apache.derby.tools.URLCheck;
0: import java.util.Locale;
0: import java.util.Vector;
0: import java.util.Properties;
0: import java.util.Enumeration;
0: import java.util.StringTokenizer;
0: import java.lang.reflect.Field;
0: import java.sql.SQLException;
0: 
0: public class AttributeHolder {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0:     //This is an inner class.  This class hold the details about each
0:     //specific attribute which includes what the attribute is and
0:     //any error found.
0:     String name;
0:     String value;
0:     String token;
0:     Vector errors = new Vector();
0: 
0:     public String getName(){
0:       return name;
0:     }
0:     public void setName(String aString){
0:       name = aString;
0:     }
0:     public String getValue(){
0:       return value;
0:     }
0:     public void setValue(String aString){
0:       value = aString;
0:     }
0:     public String getToken(){
0:       return token;
0:     }
0:     public void setToken(String aString){
0:       token = aString;
0:     }
0:     public void addError(String aString) {
0:       //Keep track of error message for later display.
0:       if (!errors.contains(aString))
0:         errors.addElement(aString);
0:     }
0:     public void check( Vector validProps){
0:       checkName( validProps);
0:       //checkValue();
0:       displayErrors();
0:     }
0:     public void displayErrors(){
0:       //If no error are found then nothing is displayed.
0:       Enumeration enum = errors.elements();
0:       //In the first line, show the exact token that was parsed from
0:       //the URL.
0:       if (enum.hasMoreElements())
0:         display(LocalizedResource.getMessage("TL_urlLabel1", "[", getToken(), "]"));
0:       //Show all errors.  More than one error can be found for an attribute.
0:       while (enum.hasMoreElements()){
0:         String aString = (String)enum.nextElement();
0:         displayIndented(aString);
0:       }
0:     }
0:     public void checkName( Vector validProps){
0:       if( validProps == null)
0:           return; // valid properties are unknown
0:       String anAtt = getName();
0:       try {
0:         //Check the found name against valid names.
0:         if (!validProps.contains(anAtt)) {
0:           //Check for case spelling of the name.
0:           if (validProps.contains(anAtt.toLowerCase(java.util.Locale.ENGLISH))) {
0:             errors.addElement(LocalizedResource.getMessage("TL_incorCase"));
0:           }
0:           //Check if this is even a valid attribute name.
0:           else {
0:             errors.addElement(LocalizedResource.getMessage("TL_unknownAtt"));
0:           }
0:         }
0:         else {
0:           //This Is a valid attribute.
0:         }
0:       }
0:       catch (Exception ex) {
0:         ex.printStackTrace();
0:       }
0:     }
0:     public void checkValue(){
0:       String anAtt = getName(); 
0:       String aValue = getValue();
0:       try {
0:         //Check all attribute that require a boolean.
0:         if (URLCheck.getBooleanAttributes().contains(anAtt)) {
0:           if (!checkBoolean(aValue)) {
0:             errors.addElement(LocalizedResource.getMessage("TL_trueFalse"));
0:           }
0:         }
0:       }
0:       catch (Exception ex) {
0:         ex.printStackTrace();
0:       }
0:     }
0: 	  public boolean checkBoolean(String aValue) {
0: 		  if (aValue == null)
0: 			  return false;
0: 		  return aValue.toLowerCase(Locale.ENGLISH).equals("true") || 
0: 			  aValue.toLowerCase(Locale.ENGLISH).equals("false");
0: 	  }
0:     public void display(String aString) {
0: 		LocalizedResource.OutputWriter().println(aString);
0:     }
0:     public void displayIndented(String aString) {
0: 		LocalizedResource.OutputWriter().println("   " + aString);
0:     }
0:   }
============================================================================