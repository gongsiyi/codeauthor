1:44900c5: /*
1:44900c5: 
1:44900c5:    Derby - Class org.apache.derby.iapi.services.sanity.ThreadDump
1:44900c5: 
1:44900c5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:44900c5:    contributor license agreements.  See the NOTICE file distributed with
1:44900c5:    this work for additional information regarding copyright ownership.
1:44900c5:    The ASF licenses this file to you under the Apache License, Version 2.0
1:44900c5:    (the "License"); you may not use this file except in compliance with
1:44900c5:    the License.  You may obtain a copy of the License at
1:44900c5: 
1:44900c5:       http://www.apache.org/licenses/LICENSE-2.0
1:44900c5: 
1:44900c5:    Unless required by applicable law or agreed to in writing, software
1:44900c5:    distributed under the License is distributed on an "AS IS" BASIS,
1:44900c5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44900c5:    See the License for the specific language governing permissions and
1:44900c5:    limitations under the License.
1:44900c5: 
1:44900c5:  */
1:44900c5: 
1:44900c5: package org.apache.derby.shared.common.sanity;
1:44900c5: 
1:44900c5: import java.util.Map;
1:44900c5: 
1:44900c5: public class ThreadDump {
1:44900c5: 
1:44900c5:     /**
1:44900c5:      * 
1:44900c5:      * @return A string representation of a full thread dump
1:44900c5:      */
1:44900c5:     public static String getStackDumpString() {
1:44900c5:         StringBuffer sb = new StringBuffer();
1:44900c5:         Map<Thread, StackTraceElement[]> st = Thread.getAllStackTraces();
1:44900c5:         for (Map.Entry<Thread, StackTraceElement[]> e : st.entrySet()) {
1:44900c5:             StackTraceElement[] lines = e.getValue();
1:44900c5:             Thread t = e.getKey();
1:44900c5:             sb.append("Thread name=" + t.getName() + " id=" + t.getId()
1:44900c5:                     + " priority=" + t.getPriority() + " state=" + t.getState()
1:44900c5:                     + " isdaemon=" + t.isDaemon() + "\n");
1:44900c5:             for (int i = 0; i < lines.length; i++) {
1:44900c5:                 sb.append("\t" + lines[i] + "\n");
1:44900c5: 
1:44900c5:             }
1:44900c5:             sb.append("\n");
1:44900c5:         }
1:44900c5:         return sb.toString();
1:44900c5:     }
1:44900c5: 
1:44900c5: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:44900c5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.services.sanity.ThreadDump
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.shared.common.sanity;
1: 
1: import java.util.Map;
1: 
1: public class ThreadDump {
1: 
1:     /**
1:      * 
1:      * @return A string representation of a full thread dump
1:      */
1:     public static String getStackDumpString() {
1:         StringBuffer sb = new StringBuffer();
1:         Map<Thread, StackTraceElement[]> st = Thread.getAllStackTraces();
1:         for (Map.Entry<Thread, StackTraceElement[]> e : st.entrySet()) {
1:             StackTraceElement[] lines = e.getValue();
1:             Thread t = e.getKey();
1:             sb.append("Thread name=" + t.getName() + " id=" + t.getId()
1:                     + " priority=" + t.getPriority() + " state=" + t.getState()
1:                     + " isdaemon=" + t.isDaemon() + "\n");
1:             for (int i = 0; i < lines.length; i++) {
1:                 sb.append("\t" + lines[i] + "\n");
1: 
1:             }
1:             sb.append("\n");
1:         }
1:         return sb.toString();
1:     }
1: 
1: }
============================================================================