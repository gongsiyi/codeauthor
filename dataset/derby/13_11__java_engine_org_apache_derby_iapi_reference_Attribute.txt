1:eac0369: /*
4:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.reference.Attribute
1:7ecc1f2: 
1:f5c9a3b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f5c9a3b:    contributor license agreements.  See the NOTICE file distributed with
1:f5c9a3b:    this work for additional information regarding copyright ownership.
1:f5c9a3b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f5c9a3b:    (the "License"); you may not use this file except in compliance with
1:f5c9a3b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
1:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.reference;
1:eac0369: 
1:eac0369: 
1:eac0369: /**
1:eac0369: 	List of all connection (JDBC) attributes by the system.
1:eac0369: 
1:eac0369: 
1:eac0369: 	<P>
1:eac0369: 	This class exists for two reasons
1:eac0369: 	<Ol>
1:eac0369: 	<LI> To act as the internal documentation for the attributes. 
1:eac0369: 	<LI> To remove the need to declare a java static field for the attributes
1:eac0369: 	name in the protocol/implementation class. This reduces the footprint as
1:eac0369: 	the string is final and thus can be included simply as a String constant pool entry.
1:eac0369: 	</OL>
1:eac0369: 	<P>
1:eac0369: 	This class should not be shipped with the product.
1:eac0369: 
1:eac0369: 	<P>
1:eac0369: 	This class has no methods, all it contains are String's which by
1:eac0369: 	are public, static and final since they are declared in an interface.
1:ceb72fe:     
1:ceb72fe:     <P>
1:ceb72fe:     At some point this class should be replaced by
1:ceb72fe:     org.apache.derby.shared.common.reference.Attribute.
1:ceb72fe:     The issue is that this class is used by ij to check attributes,
1:ceb72fe:     ij uses reflection on this class to get the list of valid attributes.
1:ceb72fe:     The expanded class in shared has the client attributes as well.
1:ceb72fe:     Ideally ij would work of an explicit list of attributes and not
1:ceb72fe:     infer the set from reflection. See DERBY-1151
1:eac0369: */
1:eac0369: 
1:5d24b1a: public interface Attribute {
1:eac0369: 
1:eac0369: 	/**
1:9a32c46: 		Not an attribute but the root for the JDBC URL that Derby supports.
1:eac0369: 	*/
1:eac0369: 	String PROTOCOL = "jdbc:derby:";
1:eac0369: 		
1:eac0369: 	/**
1:eac0369: 	 * The SQLJ protocol for getting the default connection
1:eac0369: 	 * for server side jdbc
1:eac0369: 	 */
1:eac0369: 	String SQLJ_NESTED = "jdbc:default:connection";
1:eac0369: 
1:eac0369: 	
1:9a32c46: 	// Network Protocols.  These need to be rejected by the embedded driver.
1:eac0369: 	
1:eac0369: 	/**
1:9a32c46: 	 * The protocol for Derby Network Client 
1:eac0369: 	 */ 
1:9a32c46: 	String DNC_PROTOCOL = "jdbc:derby://";
1:eac0369: 	
1:eac0369: 	/** 
1:9a32c46: 	 * The protocol for the IBM Universal JDBC Driver 
1:9a32c46: 	 * 
1:eac0369: 	 */
1:9a32c46: 	String JCC_PROTOCOL = "jdbc:derby:net:";
1:eac0369: 	
1:d203eea:     /**
1:d203eea:      * Attribute name for decrypting an encrypted database.
1:d203eea:      */
1:d203eea:     String DECRYPT_DATABASE = "decryptDatabase";
1:d203eea: 
1:eac0369: 	/**
1:eac0369: 		Attribute name to encrypt the database on disk.
1:eac0369: 		If set to true, all user data is stored encrypted on disk.
1:eac0369: 	 */
1:eac0369: 	String DATA_ENCRYPTION = "dataEncryption";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		If dataEncryption is true, use this attribute to pass in the 
1:eac0369: 		secret key.  The secret key must be at least 8 characters long.
1:eac0369: 		This key must not be stored persistently in cleartext anywhere. 
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	String BOOT_PASSWORD = "bootPassword";
1:eac0369: 
1:8a62d60:     /**
1:8a62d60: 	    The attribute that is used to chage the secret key of an encrypted
1:8a62d60:         database. The secret key must be at least 8 characters long.
1:8a62d60: 		This key must not be stored persistently in cleartext anywhere. 
1:8a62d60: 	 */
1:8a62d60: 
1:8a62d60: 	String NEW_BOOT_PASSWORD = "newBootPassword";
1:8a62d60: 
1:9e356f1:     /**
1:9e356f1:      * Attribute name to start replication master mode for a database.
1:9e356f1:      * If used, REPLICATION_SLAVE_HOST is a required attribute.
1:9e356f1:      */
1:9e356f1:     String REPLICATION_START_MASTER = "startMaster";
1:8a62d60: 
1:9e356f1:     /**
1:9e356f1:      * Attribute name to stop replication master mode for a database.
1:9e356f1:      */
1:9e356f1:     String REPLICATION_STOP_MASTER = "stopMaster";
1:9e356f1: 
1:9e356f1:     /**
1:813a7fd:      * Attribute name to start replication slave mode for a database.
1:813a7fd:      */
1:813a7fd:     String REPLICATION_START_SLAVE = "startSlave";
1:813a7fd: 
1:813a7fd:     /**
1:813a7fd:      * Attribute name to stop replication slave mode for a database.
1:813a7fd:      */
1:813a7fd:     String REPLICATION_STOP_SLAVE = "stopSlave";
1:813a7fd: 
1:813a7fd:     /**
1:b9c57d5:      * Attribute name to stop replication slave mode for a database.
1:b9c57d5:      * Internal use only
1:b9c57d5:      */
1:b9c57d5:     String REPLICATION_INTERNAL_SHUTDOWN_SLAVE = "internal_stopslave";
1:b9c57d5: 
1:b9c57d5:     /**
1:9e356f1:      * If startMaster is true, this attribute is used to specify the
1:9e356f1:      * host name the master should connect to. This is a required
1:9e356f1:      * attribute.
1:9e356f1:      */
1:9e356f1:     String REPLICATION_SLAVE_HOST = "slaveHost";
1:fd20d6b:     
1:fd20d6b:     /**
1:fd20d6b:      * Attribute name to start failover for a given database..
1:fd20d6b:      */
1:fd20d6b:     String REPLICATION_FAILOVER = "failover";
1:9e356f1: 
1:9e356f1:     /**
1:9e356f1:      * If startMaster is true, this attribute is used to specify the
1:9e356f1:      * port the master should connect to. This is an optional
1:9e356f1:      * attribute
1:9e356f1:      */
1:9e356f1:     String REPLICATION_SLAVE_PORT = "slavePort";
1:8a62d60: 
1:eac0369: 	/**
1:eac0369: 		The attribute that is used for the database name, from
1:eac0369: 		the JDBC notion of jdbc:<subprotocol>:<subname>
1:eac0369: 	*/
1:eac0369: 	String DBNAME_ATTR = "databaseName";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The attribute that is used to request a shutdown.
1:eac0369: 	*/
1:eac0369: 	String SHUTDOWN_ATTR = "shutdown";
1:eac0369: 
1:57af2a5:     /**
1:57af2a5:      * The attribute that is to keep autoloading idiom for driver
1:57af2a5:      */
1:57af2a5:     String DEREGISTER_ATTR = "deregister";
1:57af2a5: 
1:eac0369: 	/**
1:eac0369: 		The attribute that is used to request a database create.
1:eac0369: 	*/
1:eac0369: 	String CREATE_ATTR = "create";
1:eac0369: 
1:c406220:     /**
1:c406220:         The attribute that is used to request a drop database.
1:c406220:     */
1:c406220:     String DROP_ATTR = "drop";
1:c406220: 
1:eac0369: 	/**
1:eac0369: 		The attribute that is used to set the user name.
1:eac0369: 	*/
1:eac0369: 	String USERNAME_ATTR = "user";
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The attribute that is used to set the user password.
1:eac0369: 	*/
1:eac0369: 	String PASSWORD_ATTR = "password";
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The attribute that is used to set the connection's DRDA ID.
1:eac0369: 	*/
1:eac0369: 	String DRDAID_ATTR = "drdaID";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The attribute that is used to allow upgrade.
1:eac0369: 	*/
1:eac0369: 	String UPGRADE_ATTR = "upgrade";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Put the log on a different device.
1:eac0369: 	 */
1:eac0369: 	String LOG_DEVICE = "logDevice";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set the territory for the database.
1:eac0369: 	*/
1:eac0369: 	String TERRITORY = "territory";
1:eac0369: 
1:eac0369:     /**
1:eac0369:         Attribute for encrypting a database.
1:eac0369:         Specifies the cryptographic services provider.
1:eac0369:     */
1:eac0369:     String CRYPTO_PROVIDER = "encryptionProvider";
1:eac0369: 
1:eac0369:     /**
1:eac0369:         Attribute for encrypting a database.
1:eac0369:         Specifies the cryptographic algorithm.
1:eac0369:     */
1:eac0369:     String CRYPTO_ALGORITHM = "encryptionAlgorithm";
1:eac0369: 
1:eac0369:     /**
1:eac0369:         Attribute for encrypting a database.
1:eac0369:         Specifies the key length in bytes for the specified cryptographic algorithm.
1:eac0369:     */
1:eac0369: 	String CRYPTO_KEY_LENGTH = "encryptionKeyLength";
1:eac0369: 
1:eac0369: 	/**
1:eac0369:         Attribute for encrypting a database.
1:eac0369:         Specifies the actual key. When this is specified
1:eac0369: 		all the supplied crypto information is stored
1:eac0369: 		external to the database, ie by the application.
1:eac0369: 	*/
1:eac0369: 	String CRYPTO_EXTERNAL_KEY = "encryptionKey";
1:8a62d60: 
1:eac0369: 
1:8a62d60:     /**
1:8a62d60: 	    The attribute that is used to chage the encryption 
1:8a62d60:         key of an encrypted database. When this is specified
1:8a62d60:         all the supplied crypto information is stored
1:8a62d60:         external to the database, ie by the application.
1:8a62d60: 	*/
1:8a62d60: 	String NEW_CRYPTO_EXTERNAL_KEY = "newEncryptionKey";
1:8a62d60: 
1:8a62d60: 
1:eac0369: 	/**
1:eac0369: 	   One can encrypt the database with an encryption key at create time.
1:eac0369: 	   For security reasons, this key is not made persistent in the database.
1:eac0369: 
1:eac0369: 	   But it is necessary to verify the encryption key whenever booting the database  
1:eac0369: 	   before we access the data/logs to avoid the risk of corrupting the database because
1:eac0369: 	   of a wrong encryption key.
1:eac0369: 
1:eac0369: 	   This attribute refers to the name of the file where encrypted data is stored for
1:eac0369: 	   verification of encryption key.
1:eac0369: 	 */
1:eac0369: 	String CRYPTO_EXTERNAL_KEY_VERIFY_FILE = "verifyKey.dat";
1:eac0369: 
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 *	This attribute is used to request to  create a database from backup.
1:eac0369: 	 *  This will throw error if a database with same already exists at the 
1:eac0369: 	 *  location where we tring to create.
1:eac0369: 	 */
1:eac0369: 	String CREATE_FROM = "createFrom";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	This attribute is used to request a database restore from backup.
1:eac0369: 	 *  It must be used only when the active database is corrupted,
1:eac0369: 	 *	because it will cleanup the existing database and replace 
1:eac0369: 	 *	it from the backup.
1:eac0369: 	 */
1:eac0369: 	String RESTORE_FROM = "restoreFrom";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The attribute that is used to request a roll-forward recovery of the database.
1:eac0369: 	*/
1:eac0369: 	String ROLL_FORWARD_RECOVERY_FROM = "rollForwardRecoveryFrom";
1:eac0369: 
1:7233e33:     /**
1:7233e33:      * securityMechanism sets the DRDA mechanism in-use for the client.
1:7233e33:      * Internal only.
1:7233e33:      */
1:7233e33:     String CLIENT_SECURITY_MECHANISM = "securityMechanism";
1:eac0369: 
1:7233e33:     /**
1:7233e33:      * Internal attributes. Mainly used by DRDA and Derby BUILTIN
1:7233e33:      * authentication provider in some security mechanism context
1:7233e33:      * (SECMEC_USRSSBPWD).
1:7233e33:      *
1:7233e33:      * DRDA_SECTKN_IN is the random client seed (RDs)
1:7233e33:      * DRDA_SECTKN_OUT is the random server seed (RDr)
1:7233e33:      */
1:7233e33:     String DRDA_SECTKN_IN = "drdaSecTokenIn";
1:7233e33:     String DRDA_SECTKN_OUT = "drdaSecTokenOut";
1:cb29d72:     /**
1:cb29d72:      * Internal attribute which holds the value of the securityMechanism
1:cb29d72:      * attribute specified by the client. Used for passing information about
1:cb29d72:      * which security mechanism to use from the network server to the embedded
1:cb29d72:      * driver. Use another name than "securityMechanism" in order to prevent
1:cb29d72:      * confusion if an attempt is made to establish an embedded connection with
1:cb29d72:      * securityMechanism specified (see DERBY-3025).
1:cb29d72:      */
1:cb29d72:     String DRDA_SECMEC = "drdaSecMec";
1:ed89134: 
1:ed89134: 	/**
1:ca5edbb: 	 * Internal attribute. Used to always allow soft upgrade for
1:ca5edbb: 	 * authentication purposes in a two phase hard upgrade (to check
1:ca5edbb: 	 * database owner power before proceeding.  The purpose is to
1:ca5edbb: 	 * avoid failing soft upgrade due to a feature being set but not
1:ca5edbb: 	 * supported until after hard upgrade has taken place (e.g. during
1:dbed020: 	 * hard upgrade from 10.1 -&gt; 10.3 or higher if
1:ca5edbb: 	 * derby.database.sqlAuthorization is set,
1:ca5edbb: 	 * cf. DD_Version#checkVersion).
1:ca5edbb: 	 */
1:ca5edbb: 	 String SOFT_UPGRADE_NO_FEATURE_CHECK = "softUpgradeNoFeatureCheck";
1:ca5edbb: 
1:ca5edbb: 	/**
1:ed89134: 		Optional JDBC url attribute (at the database create time only) It can 
1:ed89134: 		be set to one of the following 2 values
1:ed89134: 		1) UCS_BASIC (This means codepoint based collation. This will also be 
1:ed89134: 		the default collation used by Derby if no collation attribute is 
1:ed89134: 		specified on the JDBC url at the database create time. This collation 
1:ed89134: 		is what Derby 10.2 and prior have supported)
1:ed89134: 		2)TERRITORY_BASED (the collation will be based on language 
1:401072f:        region specified by the existing Derby attribute called territory.
1:ed89134: 		If the territory attribute is not specified at the database create 
1:ed89134: 		time, Derby will use java.util.Locale.getDefault to determine the 
1:ed89134: 		territory for the newly created database. 
1:ed89134: 	*/
1:ed89134: 	String COLLATION = "collation";
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	 * hard upgrade from 10.1 -&gt; 10.3 or higher if
commit:7233e33
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * securityMechanism sets the DRDA mechanism in-use for the client.
1:      * Internal only.
1:      */
1:     String CLIENT_SECURITY_MECHANISM = "securityMechanism";
1:     /**
1:      * Internal attributes. Mainly used by DRDA and Derby BUILTIN
1:      * authentication provider in some security mechanism context
1:      * (SECMEC_USRSSBPWD).
1:      *
1:      * DRDA_SECTKN_IN is the random client seed (RDs)
1:      * DRDA_SECTKN_OUT is the random server seed (RDr)
1:      */
1:     String DRDA_SECTKN_IN = "drdaSecTokenIn";
1:     String DRDA_SECTKN_OUT = "drdaSecTokenOut";
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:401072f
/////////////////////////////////////////////////////////////////////////
1:        region specified by the existing Derby attribute called territory.
commit:ca5edbb
/////////////////////////////////////////////////////////////////////////
1: 	 * Internal attribute. Used to always allow soft upgrade for
1: 	 * authentication purposes in a two phase hard upgrade (to check
1: 	 * database owner power before proceeding.  The purpose is to
1: 	 * avoid failing soft upgrade due to a feature being set but not
1: 	 * supported until after hard upgrade has taken place (e.g. during
0: 	 * hard upgrade from 10.1 -> 10.3 or higher if
1: 	 * derby.database.sqlAuthorization is set,
1: 	 * cf. DD_Version#checkVersion).
1: 	 */
1: 	 String SOFT_UPGRADE_NO_FEATURE_CHECK = "softUpgradeNoFeatureCheck";
1: 
1: 	/**
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:d203eea
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Attribute name for decrypting an encrypted database.
1:      */
1:     String DECRYPT_DATABASE = "decryptDatabase";
1: 
commit:c406220
/////////////////////////////////////////////////////////////////////////
1:     /**
1:         The attribute that is used to request a drop database.
1:     */
1:     String DROP_ATTR = "drop";
1: 
author:Lily Wei
-------------------------------------------------------------------------------
commit:57af2a5
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * The attribute that is to keep autoloading idiom for driver
1:      */
1:     String DEREGISTER_ATTR = "deregister";
1: 
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:fd20d6b
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Attribute name to start failover for a given database..
1:      */
1:     String REPLICATION_FAILOVER = "failover";
commit:b9c57d5
/////////////////////////////////////////////////////////////////////////
1:      * Attribute name to stop replication slave mode for a database.
1:      * Internal use only
1:      */
1:     String REPLICATION_INTERNAL_SHUTDOWN_SLAVE = "internal_stopslave";
1: 
1:     /**
commit:813a7fd
/////////////////////////////////////////////////////////////////////////
1:      * Attribute name to start replication slave mode for a database.
1:      */
1:     String REPLICATION_START_SLAVE = "startSlave";
1: 
1:     /**
1:      * Attribute name to stop replication slave mode for a database.
1:      */
1:     String REPLICATION_STOP_SLAVE = "stopSlave";
1: 
1:     /**
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9e356f1
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Attribute name to start replication master mode for a database.
1:      * If used, REPLICATION_SLAVE_HOST is a required attribute.
1:      */
1:     String REPLICATION_START_MASTER = "startMaster";
1:     /**
1:      * Attribute name to stop replication master mode for a database.
1:      */
1:     String REPLICATION_STOP_MASTER = "stopMaster";
1: 
1:     /**
1:      * If startMaster is true, this attribute is used to specify the
1:      * host name the master should connect to. This is a required
1:      * attribute.
1:      */
1:     String REPLICATION_SLAVE_HOST = "slaveHost";
1: 
1:     /**
1:      * If startMaster is true, this attribute is used to specify the
1:      * port the master should connect to. This is an optional
1:      * attribute
1:      */
1:     String REPLICATION_SLAVE_PORT = "slavePort";
commit:cb29d72
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Internal attribute which holds the value of the securityMechanism
1:      * attribute specified by the client. Used for passing information about
1:      * which security mechanism to use from the network server to the embedded
1:      * driver. Use another name than "securityMechanism" in order to prevent
1:      * confusion if an attempt is made to establish an embedded connection with
1:      * securityMechanism specified (see DERBY-3025).
1:      */
1:     String DRDA_SECMEC = "drdaSecMec";
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:ed89134
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 		Optional JDBC url attribute (at the database create time only) It can 
1: 		be set to one of the following 2 values
1: 		1) UCS_BASIC (This means codepoint based collation. This will also be 
1: 		the default collation used by Derby if no collation attribute is 
1: 		specified on the JDBC url at the database create time. This collation 
1: 		is what Derby 10.2 and prior have supported)
1: 		2)TERRITORY_BASED (the collation will be based on language 
0: 		region specified by the exisiting Derby attribute called territory. 
1: 		If the territory attribute is not specified at the database create 
1: 		time, Derby will use java.util.Locale.getDefault to determine the 
1: 		territory for the newly created database. 
1: 	*/
1: 	String COLLATION = "collation";
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f5c9a3b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:8a62d60
/////////////////////////////////////////////////////////////////////////
1:     /**
1: 	    The attribute that is used to chage the secret key of an encrypted
1:         database. The secret key must be at least 8 characters long.
1: 		This key must not be stored persistently in cleartext anywhere. 
1: 	 */
1: 
1: 	String NEW_BOOT_PASSWORD = "newBootPassword";
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1: 	    The attribute that is used to chage the encryption 
1:         key of an encrypted database. When this is specified
1:         all the supplied crypto information is stored
1:         external to the database, ie by the application.
1: 	*/
1: 	String NEW_CRYPTO_EXTERNAL_KEY = "newEncryptionKey";
1: 
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ceb72fe
/////////////////////////////////////////////////////////////////////////
1:     
1:     <P>
1:     At some point this class should be replaced by
1:     org.apache.derby.shared.common.reference.Attribute.
1:     The issue is that this class is used by ij to check attributes,
1:     ij uses reflection on this class to get the list of valid attributes.
1:     The expanded class in shared has the client attributes as well.
1:     Ideally ij would work of an explicit list of attributes and not
1:     infer the set from reflection. See DERBY-1151
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.reference.Attribute
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public interface Attribute {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.reference
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.reference;
1: 
1: 
1: /**
1: 	List of all connection (JDBC) attributes by the system.
1: 
1: 
1: 	<P>
1: 	This class exists for two reasons
1: 	<Ol>
1: 	<LI> To act as the internal documentation for the attributes. 
1: 	<LI> To remove the need to declare a java static field for the attributes
1: 	name in the protocol/implementation class. This reduces the footprint as
1: 	the string is final and thus can be included simply as a String constant pool entry.
1: 	</OL>
1: 	<P>
1: 	This class should not be shipped with the product.
1: 
1: 	<P>
1: 	This class has no methods, all it contains are String's which by
1: 	are public, static and final since they are declared in an interface.
1: */
1: 
0: public interface Attribute { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	/**
0: 		Not an attribute but the root for the JDBC URL that Cloudscape supports.
1: 	*/
1: 	String PROTOCOL = "jdbc:derby:";
1: 		
1: 	/**
1: 	 * The SQLJ protocol for getting the default connection
1: 	 * for server side jdbc
1: 	 */
1: 	String SQLJ_NESTED = "jdbc:default:connection";
1: 
1: 
1: 	/**
1: 		Attribute name to encrypt the database on disk.
1: 		If set to true, all user data is stored encrypted on disk.
1: 	 */
1: 	String DATA_ENCRYPTION = "dataEncryption";
1: 
1: 	/**
1: 		If dataEncryption is true, use this attribute to pass in the 
1: 		secret key.  The secret key must be at least 8 characters long.
1: 		This key must not be stored persistently in cleartext anywhere. 
1: 	 */
1: 
1: 	String BOOT_PASSWORD = "bootPassword";
1: 
1: 	/**
1: 		The attribute that is used for the database name, from
1: 		the JDBC notion of jdbc:<subprotocol>:<subname>
1: 	*/
1: 	String DBNAME_ATTR = "databaseName";
1: 
1: 	/**
1: 		The attribute that is used to request a shutdown.
1: 	*/
1: 	String SHUTDOWN_ATTR = "shutdown";
1: 
1: 	/**
1: 		The attribute that is used to request a database create.
1: 	*/
1: 	String CREATE_ATTR = "create";
1: 
1: 	/**
1: 		The attribute that is used to set the user name.
1: 	*/
1: 	String USERNAME_ATTR = "user";
1: 
1: 
1: 	/**
1: 		The attribute that is used to set the user password.
1: 	*/
1: 	String PASSWORD_ATTR = "password";
1: 
1: 
1: 	/**
1: 		The attribute that is used to set the connection's DRDA ID.
1: 	*/
1: 	String DRDAID_ATTR = "drdaID";
1: 
1: 	/**
1: 		The attribute that is used to allow upgrade.
1: 	*/
1: 	String UPGRADE_ATTR = "upgrade";
1: 
1: 	/**
1: 		Put the log on a different device.
1: 	 */
1: 	String LOG_DEVICE = "logDevice";
1: 
1: 	/**
1: 		Set the territory for the database.
1: 	*/
1: 	String TERRITORY = "territory";
1: 
1: 	/**
0: 		Set the collation sequence of the database, currently on IDENTITY
0:         will be supported (strings will sort according to binary comparison).
1: 	*/
0: 	String COLLATE = "collate";
1: 
1:     /**
1:         Attribute for encrypting a database.
1:         Specifies the cryptographic services provider.
1:     */
1:     String CRYPTO_PROVIDER = "encryptionProvider";
1: 
1:     /**
1:         Attribute for encrypting a database.
1:         Specifies the cryptographic algorithm.
1:     */
1:     String CRYPTO_ALGORITHM = "encryptionAlgorithm";
1: 
1:     /**
1:         Attribute for encrypting a database.
1:         Specifies the key length in bytes for the specified cryptographic algorithm.
1:     */
1: 	String CRYPTO_KEY_LENGTH = "encryptionKeyLength";
1: 
1: 	/**
1:         Attribute for encrypting a database.
1:         Specifies the actual key. When this is specified
1: 		all the supplied crypto information is stored
1: 		external to the database, ie by the application.
1: 	*/
1: 	String CRYPTO_EXTERNAL_KEY = "encryptionKey";
1: 
1: 	/**
1: 	   One can encrypt the database with an encryption key at create time.
1: 	   For security reasons, this key is not made persistent in the database.
1: 
1: 	   But it is necessary to verify the encryption key whenever booting the database  
1: 	   before we access the data/logs to avoid the risk of corrupting the database because
1: 	   of a wrong encryption key.
1: 
1: 	   This attribute refers to the name of the file where encrypted data is stored for
1: 	   verification of encryption key.
1: 	 */
1: 	String CRYPTO_EXTERNAL_KEY_VERIFY_FILE = "verifyKey.dat";
1: 
1: 	
1: 	/**
1: 	 *	This attribute is used to request to  create a database from backup.
1: 	 *  This will throw error if a database with same already exists at the 
1: 	 *  location where we tring to create.
1: 	 */
1: 	String CREATE_FROM = "createFrom";
1: 
1: 	/**
1: 	 *	This attribute is used to request a database restore from backup.
1: 	 *  It must be used only when the active database is corrupted,
1: 	 *	because it will cleanup the existing database and replace 
1: 	 *	it from the backup.
1: 	 */
1: 	String RESTORE_FROM = "restoreFrom";
1: 
1: 	
1: 	/**
1: 		The attribute that is used to request a roll-forward recovery of the database.
1: 	*/
1: 	String ROLL_FORWARD_RECOVERY_FROM = "rollForwardRecoveryFrom";
1: 
1: 
1: }
1: 
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:9a32c46
/////////////////////////////////////////////////////////////////////////
1: 		Not an attribute but the root for the JDBC URL that Derby supports.
/////////////////////////////////////////////////////////////////////////
0: 	
1: 	// Network Protocols.  These need to be rejected by the embedded driver.
0: 	
0: 	/**
1: 	 * The protocol for Derby Network Client 
0: 	 */ 
1: 	String DNC_PROTOCOL = "jdbc:derby://";
0: 	
0: 	/** 
1: 	 * The protocol for the IBM Universal JDBC Driver 
1: 	 * 
0: 	 */
1: 	String JCC_PROTOCOL = "jdbc:derby:net:";
0: 	
0: 	
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.reference
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.reference;
0: 
0: 
0: /**
0: 	List of all connection (JDBC) attributes by the system.
0: 
0: 
0: 	<P>
0: 	This class exists for two reasons
0: 	<Ol>
0: 	<LI> To act as the internal documentation for the attributes. 
0: 	<LI> To remove the need to declare a java static field for the attributes
0: 	name in the protocol/implementation class. This reduces the footprint as
0: 	the string is final and thus can be included simply as a String constant pool entry.
0: 	</OL>
0: 	<P>
0: 	This class should not be shipped with the product.
0: 
0: 	<P>
0: 	This class has no methods, all it contains are String's which by
0: 	are public, static and final since they are declared in an interface.
0: */
0: 
0: public interface Attribute { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/**
0: 		Not an attribute but the root for the JDBC URL that Cloudscape supports.
0: 	*/
0: 	String PROTOCOL = "jdbc:derby:";
0: 		
0: 	/**
0: 	 * The SQLJ protocol for getting the default connection
0: 	 * for server side jdbc
0: 	 */
0: 	String SQLJ_NESTED = "jdbc:default:connection";
0: 
0: 
0: 	/**
0: 		Attribute name to encrypt the database on disk.
0: 		If set to true, all user data is stored encrypted on disk.
0: 	 */
0: 	String DATA_ENCRYPTION = "dataEncryption";
0: 
0: 	/**
0: 		If dataEncryption is true, use this attribute to pass in the 
0: 		secret key.  The secret key must be at least 8 characters long.
0: 		This key must not be stored persistently in cleartext anywhere. 
0: 	 */
0: 
0: 	String BOOT_PASSWORD = "bootPassword";
0: 
0: 	/**
0: 		The attribute that is used for the database name, from
0: 		the JDBC notion of jdbc:<subprotocol>:<subname>
0: 	*/
0: 	String DBNAME_ATTR = "databaseName";
0: 
0: 	/**
0: 		The attribute that is used to request a shutdown.
0: 	*/
0: 	String SHUTDOWN_ATTR = "shutdown";
0: 
0: 	/**
0: 		The attribute that is used to request a database create.
0: 	*/
0: 	String CREATE_ATTR = "create";
0: 
0: 	/**
0: 		The attribute that is used to set the user name.
0: 	*/
0: 	String USERNAME_ATTR = "user";
0: 
0: 
0: 	/**
0: 		The attribute that is used to set the user password.
0: 	*/
0: 	String PASSWORD_ATTR = "password";
0: 
0: 
0: 	/**
0: 		The attribute that is used to set the connection's DRDA ID.
0: 	*/
0: 	String DRDAID_ATTR = "drdaID";
0: 
0: 	/**
0: 		The attribute that is used to allow upgrade.
0: 	*/
0: 	String UPGRADE_ATTR = "upgrade";
0: 
0: 	/**
0: 		Put the log on a different device.
0: 	 */
0: 	String LOG_DEVICE = "logDevice";
0: 
0: 	/**
0: 		Set the territory for the database.
0: 	*/
0: 	String TERRITORY = "territory";
0: 
0: 	/**
0: 		Set the collation sequence of the database, currently on IDENTITY
0:         will be supported (strings will sort according to binary comparison).
0: 	*/
0: 	String COLLATE = "collate";
0: 
0:     /**
0:         Attribute for encrypting a database.
0:         Specifies the cryptographic services provider.
0:     */
0:     String CRYPTO_PROVIDER = "encryptionProvider";
0: 
0:     /**
0:         Attribute for encrypting a database.
0:         Specifies the cryptographic algorithm.
0:     */
0:     String CRYPTO_ALGORITHM = "encryptionAlgorithm";
0: 
0:     /**
0:         Attribute for encrypting a database.
0:         Specifies the key length in bytes for the specified cryptographic algorithm.
0:     */
0: 	String CRYPTO_KEY_LENGTH = "encryptionKeyLength";
0: 
0: 	/**
0:         Attribute for encrypting a database.
0:         Specifies the actual key. When this is specified
0: 		all the supplied crypto information is stored
0: 		external to the database, ie by the application.
0: 	*/
0: 	String CRYPTO_EXTERNAL_KEY = "encryptionKey";
0: 
0: 	/**
0: 	   One can encrypt the database with an encryption key at create time.
0: 	   For security reasons, this key is not made persistent in the database.
0: 
0: 	   But it is necessary to verify the encryption key whenever booting the database  
0: 	   before we access the data/logs to avoid the risk of corrupting the database because
0: 	   of a wrong encryption key.
0: 
0: 	   This attribute refers to the name of the file where encrypted data is stored for
0: 	   verification of encryption key.
0: 	 */
0: 	String CRYPTO_EXTERNAL_KEY_VERIFY_FILE = "verifyKey.dat";
0: 
0: 	
0: 	/**
0: 	 *	This attribute is used to request to  create a database from backup.
0: 	 *  This will throw error if a database with same already exists at the 
0: 	 *  location where we tring to create.
0: 	 */
0: 	String CREATE_FROM = "createFrom";
0: 
0: 	/**
0: 	 *	This attribute is used to request a database restore from backup.
0: 	 *  It must be used only when the active database is corrupted,
0: 	 *	because it will cleanup the existing database and replace 
0: 	 *	it from the backup.
0: 	 */
0: 	String RESTORE_FROM = "restoreFrom";
0: 
0: 	
0: 	/**
0: 		The attribute that is used to request a roll-forward recovery of the database.
0: 	*/
0: 	String ROLL_FORWARD_RECOVERY_FROM = "rollForwardRecoveryFrom";
0: 
0: 
0: }
0: 
0: 
============================================================================