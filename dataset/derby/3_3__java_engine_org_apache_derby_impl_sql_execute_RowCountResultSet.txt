1:69a192a: /*
4:69a192a: 
1:69a192a:    Derby - Class org.apache.derby.impl.sql.execute.RowCountResultSet
1:69a192a: 
1:69a192a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:69a192a:    contributor license agreements.  See the NOTICE file distributed with
1:69a192a:    this work for additional information regarding copyright ownership.
1:69a192a:    The ASF licenses this file to you under the Apache License, Version 2.0
1:69a192a:    (the "License"); you may not use this file except in compliance with
1:69a192a:    the License.  You may obtain a copy of the License at
1:69a192a: 
1:69a192a:       http://www.apache.org/licenses/LICENSE-2.0
1:69a192a: 
1:69a192a:    Unless required by applicable law or agreed to in writing, software
1:69a192a:    distributed under the License is distributed on an "AS IS" BASIS,
1:69a192a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:69a192a:    See the License for the specific language governing permissions and
1:69a192a:    limitations under the License.
1:69a192a: 
1:69a192a: */
1:69a192a: 
1:69a192a: package org.apache.derby.impl.sql.execute;
1:69a192a: 
1:00c7a20: import org.apache.derby.iapi.reference.SQLState;
1:69a192a: import org.apache.derby.iapi.sql.conn.StatementContext;
1:69a192a: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:69a192a: import org.apache.derby.iapi.sql.execute.ExecRow;
1:69a192a: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:69a192a: import org.apache.derby.iapi.sql.Activation;
1:69a192a: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:00c7a20: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:69a192a: import org.apache.derby.iapi.types.RowLocation;
1:00c7a20: import org.apache.derby.iapi.types.DataValueDescriptor;
1:69a192a: 
1:69a192a: 
1:69a192a: 
1:69a192a: /**
1:69a192a:  * This result set implements the filtering of rows needed for the <result
1:69a192a:  * offset clause> and the <fetch first clause>.  It sits on top of the normal
1:69a192a:  * SELECT's top result set, but under any ScrollInsensitiveResultSet needed for
1:69a192a:  * cursors. The latter positioning is needed for the correct functioning of
1:69a192a:  * <result offset clause> and <fetch first clause> in the presence of
1:69a192a:  * scrollable and/or updatable result sets and CURRENT OF cursors.
1:69a192a:  *
1:69a192a:  * It is only ever generated if at least one of the two clauses is present.
1:69a192a:  */
1:69a192a: class RowCountResultSet extends NoPutResultSetImpl
1:69a192a:     implements CursorResultSet
2:69a192a: {
1:69a192a:     // set in constructor and not altered during
1:69a192a:     // life of object.
1:69a192a:     final NoPutResultSet source;
1:69a192a:     final private boolean runTimeStatsOn;
1:00c7a20:     private long offset;
1:00c7a20:     private long fetchFirst;
1:00c7a20:     final private GeneratedMethod offsetMethod;
1:00c7a20:     final private GeneratedMethod fetchFirstMethod;
1:57c1b5c:     final private boolean hasJDBClimitClause;
1:640d05d: 
1:640d05d:     /**
1:640d05d:      * True if we haven't yet fetched any rows from this result set.
1:640d05d:      * Will be reset on close so the result set is ready to reuse.
1:640d05d:      */
1:640d05d:     private boolean virginal;
1:640d05d: 
1:640d05d:     /**
1:640d05d:      * Holds the number of rows returned so far in this round of using the
1:640d05d:      * result set.  Will be reset on close so the result set is ready to reuse.
1:640d05d:      */
1:640d05d:     private long rowsFetched;
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * RowCountResultSet constructor
1:69a192a:      *
1:69a192a:      * @param s               The source result set being filtered
1:69a192a:      * @param a               The activation for this result set,
1:69a192a:      *                        which provides the context for the row
1:69a192a:      *                        allocation operation
1:69a192a:      * @param resultSetNumber The resultSetNumber for the ResultSet
1:00c7a20:      * @param offsetMethod   Generated method
1:00c7a20:      * @param fetchFirstMethod Generated method
1:57c1b5c:      * @param hasJDBClimitClause True if offset/fetchFirst clauses were added by JDBC LIMIT escape syntax
1:69a192a:      * @param optimizerEstimatedRowCount
1:69a192a:      *                        Estimated total # of rows by optimizer
1:69a192a:      * @param optimizerEstimatedCost
1:69a192a:      *                        Estimated total cost by optimizer
1:69a192a:      * @exception StandardException Standard error policy
1:69a192a:      */
1:69a192a:     RowCountResultSet
1:69a192a:         (NoPutResultSet s,
1:69a192a:          Activation a,
1:69a192a:          int resultSetNumber,
1:00c7a20:          GeneratedMethod offsetMethod,
1:00c7a20:          GeneratedMethod fetchFirstMethod,
1:57c1b5c:          boolean hasJDBClimitClause,
1:69a192a:          double optimizerEstimatedRowCount,
1:69a192a:          double optimizerEstimatedCost)
1:00c7a20:             throws StandardException {
1:00c7a20: 
1:69a192a:         super(a,
1:69a192a:               resultSetNumber,
1:69a192a:               optimizerEstimatedRowCount,
1:69a192a:               optimizerEstimatedCost);
1:69a192a: 
1:00c7a20:         this.offsetMethod = offsetMethod;
1:00c7a20:         this.fetchFirstMethod = fetchFirstMethod;
1:57c1b5c:         this.hasJDBClimitClause = hasJDBClimitClause;
1:00c7a20: 
1:69a192a:         source = s;
1:69a192a: 
1:640d05d:         virginal = true;
1:640d05d:         rowsFetched = 0;
1:69a192a: 
1:69a192a:         /* Remember whether or not RunTimeStatistics is on */
1:69a192a:         runTimeStatsOn =
1:69a192a:             getLanguageConnectionContext().getRunTimeStatisticsMode();
1:69a192a:         recordConstructorTime();
1:69a192a:     }
1:69a192a: 
1:69a192a:     //
1:69a192a:     // NoPutResultSet interface
1:69a192a:     //
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * Open a scan on the table. scan parameters are evaluated
1:69a192a:      * at each open, so there is probably some way of altering
1:69a192a:      * their values...
1:69a192a:      *
1:69a192a:      * @exception StandardException thrown if cursor finished.
1:69a192a:      */
1:69a192a:     public void openCore() throws StandardException {
1:69a192a: 
1:69a192a:         boolean constantEval = true;
1:69a192a: 
1:69a192a:         beginTime = getCurrentTimeMillis();
1:640d05d: 
1:69a192a:         source.openCore();
1:69a192a:         isOpen = true;
1:640d05d: 
1:69a192a:         numOpens++;
1:69a192a: 
1:69a192a:         openTime += getElapsedMillis(beginTime);
1:69a192a:     }
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * Reopen a scan on the table. scan parameters are evaluated
1:69a192a:      * at each open, so there is probably some way of altering
1:69a192a:      * their values...
1:69a192a:      *
1:69a192a:      * @exception StandardException thrown if cursor finished.
1:69a192a:      */
1:69a192a:     public void reopenCore() throws StandardException {
1:69a192a: 
1:69a192a:         boolean constantEval = true;
1:69a192a: 
1:69a192a:         beginTime = getCurrentTimeMillis();
1:69a192a: 
1:69a192a:         if (SanityManager.DEBUG)
1:69a192a:             SanityManager.ASSERT(isOpen,
1:69a192a:                                  "RowCountResultSet not open, cannot reopen");
1:69a192a: 
1:69a192a:         source.reopenCore();
1:69a192a: 
1:108305b:         virginal = true;
1:108305b:         rowsFetched = 0;
1:69a192a:         isOpen = true;
1:69a192a: 
1:69a192a:         numOpens++;
1:69a192a: 
1:69a192a:         openTime += getElapsedMillis(beginTime);
1:69a192a:     }
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * Return the requested values computed from the next row (if any)
1:69a192a:      * <p>
1:69a192a:      * @exception StandardException thrown on failure.
1:69a192a:      * @exception StandardException ResultSetNotOpen thrown if not yet open.
1:69a192a:      *
1:69a192a:      * @return the next row in the result
1:69a192a:      */
1:69a192a:     public ExecRow  getNextRowCore() throws StandardException {
1:2a4654b: 	if( isXplainOnlyMode() )
1:2a4654b: 		return null;
1:69a192a: 
1:69a192a:         ExecRow result = null;
1:69a192a: 
1:69a192a:         beginTime = getCurrentTimeMillis();
1:69a192a: 
1:00c7a20:         if (virginal) {
1:00c7a20:             if (offsetMethod != null) {
1:00c7a20:                 DataValueDescriptor offVal
1:00c7a20:                     = (DataValueDescriptor)offsetMethod.invoke(activation);
1:69a192a: 
1:00c7a20:                 if (offVal.isNotNull().getBoolean()) {
1:00c7a20:                     offset = offVal.getLong();
1:69a192a: 
1:00c7a20:                     if (offset < 0) {
1:00c7a20:                         throw StandardException.newException(
1:00c7a20:                             SQLState.LANG_INVALID_ROW_COUNT_OFFSET,
1:00c7a20:                             Long.toString(offset));
1:00c7a20:                     } else {
1:00c7a20:                         offset = offVal.getLong();
1:00c7a20:                     }
1:69a192a:                 } else {
1:00c7a20:                     throw StandardException.newException(
1:00c7a20:                         SQLState.LANG_ROW_COUNT_OFFSET_FIRST_IS_NULL,
1:00c7a20:                         "OFFSET");
1:69a192a:                 }
1:00c7a20:             } else {
1:00c7a20:                 // not given
1:00c7a20:                 offset = 0;
1:00c7a20:             }
1:00c7a20: 
1:69a192a: 
1:00c7a20:             if (fetchFirstMethod != null) {
1:00c7a20:                 DataValueDescriptor fetchFirstVal
1:00c7a20:                     = (DataValueDescriptor)fetchFirstMethod.invoke(activation);
1:00c7a20: 
1:00c7a20:                 if (fetchFirstVal.isNotNull().getBoolean()) {
1:00c7a20: 
1:00c7a20:                     fetchFirst = fetchFirstVal.getLong();
1:00c7a20: 
1:57c1b5c:                     //
1:57c1b5c:                     // According to section 13.4.6 of the JDBC 4.1 MR spec, you
1:57c1b5c:                     // can specify a LIMIT of 0. This means that you want all rows
1:57c1b5c:                     // to be returned from the OFFSET onwards. This diverges from
1:57c1b5c:                     // the SQL Standard treatment of the FETCH FIRST clause. For the
1:57c1b5c:                     // SQL Standard, a FETCH FIRST value of 0 rows is supposed to
1:57c1b5c:                     // raise an error. See the functional spec attached to DERBY-5488.
1:57c1b5c:                     // Here we translate a JDBC LIMIT of 0 into a FETCH FIRST value of
1:57c1b5c:                     // Long.MAX_VALUE so that all rows will be returned from OFFSET onwards.
1:57c1b5c:                     //
1:57c1b5c:                     if ( hasJDBClimitClause && (fetchFirst == 0) ) { fetchFirst = Long.MAX_VALUE; }
1:57c1b5c: 
1:00c7a20:                     if (fetchFirst < 1) {
1:00c7a20:                         throw StandardException.newException(
1:00c7a20:                             SQLState.LANG_INVALID_ROW_COUNT_FIRST,
1:00c7a20:                             Long.toString(fetchFirst));
1:00c7a20:                     }
1:00c7a20:                 } else {
1:00c7a20:                     throw StandardException.newException(
1:00c7a20:                         SQLState.LANG_ROW_COUNT_OFFSET_FIRST_IS_NULL,
1:00c7a20:                         "FETCH FIRST/NEXT");
1:00c7a20:                 }
1:00c7a20:             }
1:00c7a20: 
1:00c7a20:             if (offset > 0) {
1:00c7a20:                 // Only skip rows the first time around
1:00c7a20:                 virginal = false;
1:00c7a20: 
1:00c7a20:                 long offsetCtr = offset;
1:00c7a20: 
1:00c7a20:                 do {
1:00c7a20:                     result = source.getNextRowCore();
1:00c7a20:                     offsetCtr--;
1:00c7a20: 
1:00c7a20:                     if (result != null && offsetCtr >= 0) {
1:00c7a20:                         rowsFiltered++;
1:00c7a20:                     } else {
1:00c7a20:                         break;
1:00c7a20:                     }
1:00c7a20:                 } while (true);
1:00c7a20:             } else {
1:00c7a20:                 if (fetchFirstMethod != null && rowsFetched >= fetchFirst) {
1:00c7a20:                     result = null;
1:00c7a20:                 } else {
1:00c7a20:                     result = source.getNextRowCore();
1:00c7a20:                 }
1:00c7a20:             }
1:69a192a:         } else {
1:00c7a20:             if (fetchFirstMethod != null && rowsFetched >= fetchFirst) {
1:69a192a:                 result = null;
1:69a192a:             } else {
2:69a192a:                 result = source.getNextRowCore();
1:69a192a:             }
1:69a192a:         }
1:69a192a: 
1:69a192a: 
1:69a192a:         if (result != null) {
1:640d05d:             rowsFetched++;
1:69a192a:             rowsSeen++;
1:69a192a:         }
1:69a192a: 
1:69a192a:         setCurrentRow(result);
1:69a192a: 
1:69a192a:         if (runTimeStatsOn) {
1:69a192a:             if (! isTopResultSet) {
1:69a192a:                  // This is simply for RunTimeStats.  We first need to get the
1:69a192a:                  // subquery tracking array via the StatementContext
1:69a192a:                 StatementContext sc = activation.getLanguageConnectionContext().
1:69a192a:                     getStatementContext();
1:69a192a:                 subqueryTrackingArray = sc.getSubqueryTrackingArray();
1:69a192a:             }
1:69a192a: 
1:69a192a:             nextTime += getElapsedMillis(beginTime);
1:69a192a:         }
1:69a192a:         return result;
1:69a192a:     }
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * Return the total amount of time spent in this ResultSet
1:69a192a:      *
1:69a192a:      * @param type
1:69a192a:      *    CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:69a192a:      *    ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:69a192a:      *
1:69a192a:      * @return long     The total amount of time spent (in milliseconds).
1:69a192a:      */
1:69a192a:     public long getTimeSpent(int type) {
1:69a192a:         long totTime = constructorTime + openTime + nextTime + closeTime;
1:69a192a: 
1:69a192a:         if (type == CURRENT_RESULTSET_ONLY) {
1:69a192a:             return  totTime - source.getTimeSpent(ENTIRE_RESULTSET_TREE);
1:69a192a:         } else {
1:69a192a:             return totTime;
1:69a192a:         }
1:69a192a:     }
1:69a192a: 
1:69a192a:     // ResultSet interface
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * @see org.apache.derby.iapi.sql.ResultSet#close
1:69a192a:      */
1:69a192a:     public void close() throws StandardException {
1:69a192a: 
1:69a192a:         beginTime = getCurrentTimeMillis();
1:69a192a:         if ( isOpen ) {
1:69a192a: 
1:69a192a:             // we don't want to keep around a pointer to the
1:69a192a:             // row ... so it can be thrown away.
1:69a192a:             // REVISIT: does this need to be in a finally
1:69a192a:             // block, to ensure that it is executed?
1:69a192a:             clearCurrentRow();
1:69a192a:             source.close();
1:69a192a: 
1:69a192a:             super.close();
1:69a192a:         } else {
1:69a192a:             if (SanityManager.DEBUG) {
1:69a192a:                 SanityManager.DEBUG("CloseRepeatInfo",
1:69a192a:                                     "Close of RowCountResultSet repeated");
1:69a192a:             }
1:69a192a:         }
1:69a192a: 
1:640d05d:         // Reset state for result set reuse, if any
1:640d05d:         virginal = true;
1:640d05d:         rowsFetched = 0;
1:640d05d: 
1:69a192a:         closeTime += getElapsedMillis(beginTime);
1:69a192a:     }
1:69a192a: 
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * @see org.apache.derby.iapi.sql.ResultSet#finish
1:69a192a:      */
1:69a192a:     public void finish() throws StandardException {
1:69a192a:         source.finish();
1:69a192a:         finishAndRTS();
1:69a192a:     }
1:69a192a: 
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * @see org.apache.derby.iapi.sql.ResultSet#clearCurrentRow
1:69a192a:      */
1:69a192a:     public final void clearCurrentRow()
1:69a192a:     {
1:69a192a:         currentRow = null;
1:69a192a:         activation.clearCurrentRow(resultSetNumber);
1:69a192a: 
1:69a192a:         // Added this since we need it to keep in synch for updatable result
1:69a192a:         // sets/cursors; this result set needs to be "transparent" in such
1:69a192a:         // cases, cf. getCurrentRow which gets the current row from the source
1:69a192a:         // as well.
1:69a192a:         source.clearCurrentRow();
1:69a192a:     }
1:69a192a: 
1:69a192a: 
1:69a192a: 
1:69a192a:     //
1:69a192a:     // CursorResultSet interface
1:69a192a:     //
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * Gets information from its source.
1:69a192a:      *
1:69a192a:      * @see org.apache.derby.iapi.sql.execute.CursorResultSet#getRowLocation
1:69a192a:      */
1:69a192a:     public RowLocation getRowLocation() throws StandardException {
1:69a192a: 
1:69a192a:         return ( (CursorResultSet)source ).getRowLocation();
1:69a192a:     }
1:69a192a: 
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * Gets information from source
1:69a192a:      *
1:69a192a:      * @see org.apache.derby.iapi.sql.execute.CursorResultSet#getCurrentRow
1:69a192a:      * @return the last row returned.
1:69a192a:      */
1:69a192a: 
1:69a192a:     /* RESOLVE - this should return activation.getCurrentRow(resultSetNumber),
1:69a192a:      * once there is such a method.  (currentRow is redundant)
1:69a192a:      */
1:69a192a:     public ExecRow getCurrentRow() throws StandardException
1:69a192a:     {
1:69a192a:         return ( (CursorResultSet)source ).getCurrentRow();
1:69a192a:         // return currentRow;
1:69a192a:     }
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * Override of NoPutResultSetImpl method. Ask the source.
1:69a192a:      */
1:69a192a:     public boolean isForUpdate() {
1:69a192a:         return source.isForUpdate();
1:69a192a:     }
1:69a192a: 
1:69a192a: 
1:69a192a:     /**
1:69a192a:      * Return underlying result set (the source og this result set) if it is a
1:69a192a:      * ProjectRestrictResultSet, else null.
1:69a192a:      */
1:69a192a:     public ProjectRestrictResultSet getUnderlyingProjectRestrictRS() {
1:69a192a:         if (source instanceof ProjectRestrictResultSet) {
1:69a192a:             return (ProjectRestrictResultSet)source;
1:69a192a:         } else {
1:69a192a:             return null;
1:69a192a:         }
1:69a192a:     }
1:69a192a: 
1:69a192a: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 	if( isXplainOnlyMode() )
1: 		return null;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:57c1b5c
/////////////////////////////////////////////////////////////////////////
1:     final private boolean hasJDBClimitClause;
/////////////////////////////////////////////////////////////////////////
1:      * @param hasJDBClimitClause True if offset/fetchFirst clauses were added by JDBC LIMIT escape syntax
/////////////////////////////////////////////////////////////////////////
1:          boolean hasJDBClimitClause,
/////////////////////////////////////////////////////////////////////////
1:         this.hasJDBClimitClause = hasJDBClimitClause;
/////////////////////////////////////////////////////////////////////////
1:                     //
1:                     // According to section 13.4.6 of the JDBC 4.1 MR spec, you
1:                     // can specify a LIMIT of 0. This means that you want all rows
1:                     // to be returned from the OFFSET onwards. This diverges from
1:                     // the SQL Standard treatment of the FETCH FIRST clause. For the
1:                     // SQL Standard, a FETCH FIRST value of 0 rows is supposed to
1:                     // raise an error. See the functional spec attached to DERBY-5488.
1:                     // Here we translate a JDBC LIMIT of 0 into a FETCH FIRST value of
1:                     // Long.MAX_VALUE so that all rows will be returned from OFFSET onwards.
1:                     //
1:                     if ( hasJDBClimitClause && (fetchFirst == 0) ) { fetchFirst = Long.MAX_VALUE; }
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:108305b
/////////////////////////////////////////////////////////////////////////
1:         virginal = true;
1:         rowsFetched = 0;
commit:00c7a20
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     private long offset;
1:     private long fetchFirst;
1:     final private GeneratedMethod offsetMethod;
1:     final private GeneratedMethod fetchFirstMethod;
/////////////////////////////////////////////////////////////////////////
1:      * @param offsetMethod   Generated method
1:      * @param fetchFirstMethod Generated method
/////////////////////////////////////////////////////////////////////////
1:          GeneratedMethod offsetMethod,
1:          GeneratedMethod fetchFirstMethod,
1:             throws StandardException {
1: 
1:         this.offsetMethod = offsetMethod;
1:         this.fetchFirstMethod = fetchFirstMethod;
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (virginal) {
1:             if (offsetMethod != null) {
1:                 DataValueDescriptor offVal
1:                     = (DataValueDescriptor)offsetMethod.invoke(activation);
1:                 if (offVal.isNotNull().getBoolean()) {
1:                     offset = offVal.getLong();
1:                     if (offset < 0) {
1:                         throw StandardException.newException(
1:                             SQLState.LANG_INVALID_ROW_COUNT_OFFSET,
1:                             Long.toString(offset));
1:                     } else {
1:                         offset = offVal.getLong();
1:                     }
1:                     throw StandardException.newException(
1:                         SQLState.LANG_ROW_COUNT_OFFSET_FIRST_IS_NULL,
1:                         "OFFSET");
1:             } else {
1:                 // not given
1:                 offset = 0;
1:             }
1: 
1:             if (fetchFirstMethod != null) {
1:                 DataValueDescriptor fetchFirstVal
1:                     = (DataValueDescriptor)fetchFirstMethod.invoke(activation);
1: 
1:                 if (fetchFirstVal.isNotNull().getBoolean()) {
1: 
1:                     fetchFirst = fetchFirstVal.getLong();
1: 
1:                     if (fetchFirst < 1) {
1:                         throw StandardException.newException(
1:                             SQLState.LANG_INVALID_ROW_COUNT_FIRST,
1:                             Long.toString(fetchFirst));
1:                     }
1:                 } else {
1:                     throw StandardException.newException(
1:                         SQLState.LANG_ROW_COUNT_OFFSET_FIRST_IS_NULL,
1:                         "FETCH FIRST/NEXT");
1:                 }
1:             }
1: 
1:             if (offset > 0) {
1:                 // Only skip rows the first time around
1:                 virginal = false;
1: 
1:                 long offsetCtr = offset;
1: 
1:                 do {
1:                     result = source.getNextRowCore();
1:                     offsetCtr--;
1: 
1:                     if (result != null && offsetCtr >= 0) {
1:                         rowsFiltered++;
1:                     } else {
1:                         break;
1:                     }
1:                 } while (true);
1:             } else {
1:                 if (fetchFirstMethod != null && rowsFetched >= fetchFirst) {
1:                     result = null;
1:                 } else {
1:                     result = source.getNextRowCore();
1:                 }
1:             }
1:             if (fetchFirstMethod != null && rowsFetched >= fetchFirst) {
commit:640d05d
/////////////////////////////////////////////////////////////////////////
0:     final private long offset;
0:     final private long fetchFirst;
1: 
1:     /**
1:      * True if we haven't yet fetched any rows from this result set.
1:      * Will be reset on close so the result set is ready to reuse.
1:      */
1:     private boolean virginal;
1: 
1:     /**
1:      * Holds the number of rows returned so far in this round of using the
1:      * result set.  Will be reset on close so the result set is ready to reuse.
1:      */
1:     private long rowsFetched;
/////////////////////////////////////////////////////////////////////////
1:         virginal = true;
1:         rowsFetched = 0;
/////////////////////////////////////////////////////////////////////////
0:         if (virginal && offset > 0) {
0:             // Only skip rows the first time around
0:             virginal = false;
1: 
0:             long offsetCtr = offset;
1: 
0:                 offsetCtr--;
0:                 if (result != null && offsetCtr >= 0) {
0:             if (fetchFirst != -1 && rowsFetched >= fetchFirst) {
/////////////////////////////////////////////////////////////////////////
1:             rowsFetched++;
/////////////////////////////////////////////////////////////////////////
1:         // Reset state for result set reuse, if any
1:         virginal = true;
1:         rowsFetched = 0;
1: 
commit:69a192a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.RowCountResultSet
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.conn.StatementContext;
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: 
1: 
1: /**
1:  * This result set implements the filtering of rows needed for the <result
1:  * offset clause> and the <fetch first clause>.  It sits on top of the normal
1:  * SELECT's top result set, but under any ScrollInsensitiveResultSet needed for
1:  * cursors. The latter positioning is needed for the correct functioning of
1:  * <result offset clause> and <fetch first clause> in the presence of
1:  * scrollable and/or updatable result sets and CURRENT OF cursors.
1:  *
1:  * It is only ever generated if at least one of the two clauses is present.
1:  */
1: class RowCountResultSet extends NoPutResultSetImpl
1:     implements CursorResultSet
1: {
1:     // set in constructor and not altered during
1:     // life of object.
1:     final NoPutResultSet source;
1:     final private boolean runTimeStatsOn;
0:     private long offset;
0:     private long fetchFirst;
1: 
1:     /**
1:      * RowCountResultSet constructor
1:      *
1:      * @param s               The source result set being filtered
1:      * @param a               The activation for this result set,
1:      *                        which provides the context for the row
1:      *                        allocation operation
1:      * @param resultSetNumber The resultSetNumber for the ResultSet
0:      * @param offset          The offset value (0 by default)
0:      * @param fetchFirst      The fetch first value (-1 if not in use)
1:      * @param optimizerEstimatedRowCount
1:      *                        Estimated total # of rows by optimizer
1:      * @param optimizerEstimatedCost
1:      *                        Estimated total cost by optimizer
1:      * @exception StandardException Standard error policy
1:      */
1:     RowCountResultSet
1:         (NoPutResultSet s,
1:          Activation a,
1:          int resultSetNumber,
0:          long offset,
0:          long fetchFirst,
1:          double optimizerEstimatedRowCount,
1:          double optimizerEstimatedCost)
0:         throws StandardException
1:     {
1:         super(a,
1:               resultSetNumber,
1:               optimizerEstimatedRowCount,
1:               optimizerEstimatedCost);
1: 
1:         source = s;
1: 
0:         this.offset = offset;
0:         this.fetchFirst = fetchFirst;
1: 
1:         /* Remember whether or not RunTimeStatistics is on */
1:         runTimeStatsOn =
1:             getLanguageConnectionContext().getRunTimeStatisticsMode();
1:         recordConstructorTime();
1:     }
1: 
1:     //
1:     // NoPutResultSet interface
1:     //
1: 
1:     /**
1:      * Open a scan on the table. scan parameters are evaluated
1:      * at each open, so there is probably some way of altering
1:      * their values...
1:      *
1:      * @exception StandardException thrown if cursor finished.
1:      */
1:     public void openCore() throws StandardException {
1: 
1:         boolean constantEval = true;
1: 
1:         beginTime = getCurrentTimeMillis();
1: 
1:         source.openCore();
1:         isOpen = true;
1: 
1:         numOpens++;
1: 
1:         openTime += getElapsedMillis(beginTime);
1:     }
1: 
1:     /**
1:      * Reopen a scan on the table. scan parameters are evaluated
1:      * at each open, so there is probably some way of altering
1:      * their values...
1:      *
1:      * @exception StandardException thrown if cursor finished.
1:      */
1:     public void reopenCore() throws StandardException {
1: 
1:         boolean constantEval = true;
1: 
1:         beginTime = getCurrentTimeMillis();
1: 
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(isOpen,
1:                                  "RowCountResultSet not open, cannot reopen");
1: 
1:         source.reopenCore();
1: 
1:         isOpen = true;
1: 
1:         numOpens++;
1: 
1:         openTime += getElapsedMillis(beginTime);
1:     }
1: 
1:     /**
1:      * Return the requested values computed from the next row (if any)
1:      * <p>
1:      * @exception StandardException thrown on failure.
1:      * @exception StandardException ResultSetNotOpen thrown if not yet open.
1:      *
1:      * @return the next row in the result
1:      */
1:     public ExecRow  getNextRowCore() throws StandardException {
1: 
1:         ExecRow result = null;
1: 
1:         beginTime = getCurrentTimeMillis();
1: 
0:         if (offset > 0) {
0:             do {
1:                 result = source.getNextRowCore();
0:                 offset--;
1: 
0:                 if (result != null && offset >= 0) {
0:                     rowsFiltered++;
1:                 } else {
0:                     break;
1:                 }
1: 
0:             } while (true);
1: 
0:             // only skip row first time
0:             offset = 0;
1:         } else {
1: 
0:             if (fetchFirst != -1 && rowsSeen >= fetchFirst) {
1:                 result = null;
1:             } else {
1:                 result = source.getNextRowCore();
1:             }
1:         }
1: 
1: 
1:         if (result != null) {
1:             rowsSeen++;
1:         }
1: 
1:         setCurrentRow(result);
1: 
1:         if (runTimeStatsOn) {
1:             if (! isTopResultSet) {
1:                  // This is simply for RunTimeStats.  We first need to get the
1:                  // subquery tracking array via the StatementContext
1:                 StatementContext sc = activation.getLanguageConnectionContext().
1:                     getStatementContext();
1:                 subqueryTrackingArray = sc.getSubqueryTrackingArray();
1:             }
1: 
1:             nextTime += getElapsedMillis(beginTime);
1:         }
1:         return result;
1:     }
1: 
1:     /**
1:      * Return the total amount of time spent in this ResultSet
1:      *
1:      * @param type
1:      *    CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:      *    ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:      *
1:      * @return long     The total amount of time spent (in milliseconds).
1:      */
1:     public long getTimeSpent(int type) {
1:         long totTime = constructorTime + openTime + nextTime + closeTime;
1: 
1:         if (type == CURRENT_RESULTSET_ONLY) {
1:             return  totTime - source.getTimeSpent(ENTIRE_RESULTSET_TREE);
1:         } else {
1:             return totTime;
1:         }
1:     }
1: 
1:     // ResultSet interface
1: 
1:     /**
1:      * @see org.apache.derby.iapi.sql.ResultSet#close
1:      */
1:     public void close() throws StandardException {
1: 
1:         beginTime = getCurrentTimeMillis();
1:         if ( isOpen ) {
1: 
1:             // we don't want to keep around a pointer to the
1:             // row ... so it can be thrown away.
1:             // REVISIT: does this need to be in a finally
1:             // block, to ensure that it is executed?
1:             clearCurrentRow();
1:             source.close();
1: 
1:             super.close();
1:         } else {
1:             if (SanityManager.DEBUG) {
1:                 SanityManager.DEBUG("CloseRepeatInfo",
1:                                     "Close of RowCountResultSet repeated");
1:             }
1:         }
1: 
1:         closeTime += getElapsedMillis(beginTime);
1:     }
1: 
1: 
1:     /**
1:      * @see org.apache.derby.iapi.sql.ResultSet#finish
1:      */
1:     public void finish() throws StandardException {
1:         source.finish();
1:         finishAndRTS();
1:     }
1: 
1: 
1:     /**
1:      * @see org.apache.derby.iapi.sql.ResultSet#clearCurrentRow
1:      */
1:     public final void clearCurrentRow()
1:     {
1:         currentRow = null;
1:         activation.clearCurrentRow(resultSetNumber);
1: 
1:         // Added this since we need it to keep in synch for updatable result
1:         // sets/cursors; this result set needs to be "transparent" in such
1:         // cases, cf. getCurrentRow which gets the current row from the source
1:         // as well.
1:         source.clearCurrentRow();
1:     }
1: 
1: 
1: 
1:     //
1:     // CursorResultSet interface
1:     //
1: 
1:     /**
1:      * Gets information from its source.
1:      *
1:      * @see org.apache.derby.iapi.sql.execute.CursorResultSet#getRowLocation
1:      */
1:     public RowLocation getRowLocation() throws StandardException {
1: 
1:         return ( (CursorResultSet)source ).getRowLocation();
1:     }
1: 
1: 
1:     /**
1:      * Gets information from source
1:      *
1:      * @see org.apache.derby.iapi.sql.execute.CursorResultSet#getCurrentRow
1:      * @return the last row returned.
1:      */
1: 
1:     /* RESOLVE - this should return activation.getCurrentRow(resultSetNumber),
1:      * once there is such a method.  (currentRow is redundant)
1:      */
1:     public ExecRow getCurrentRow() throws StandardException
1:     {
1:         return ( (CursorResultSet)source ).getCurrentRow();
1:         // return currentRow;
1:     }
1: 
1:     /**
1:      * Override of NoPutResultSetImpl method. Ask the source.
1:      */
1:     public boolean isForUpdate() {
1:         return source.isForUpdate();
1:     }
1: 
1: 
1:     /**
1:      * Return underlying result set (the source og this result set) if it is a
1:      * ProjectRestrictResultSet, else null.
1:      */
1:     public ProjectRestrictResultSet getUnderlyingProjectRestrictRS() {
1:         if (source instanceof ProjectRestrictResultSet) {
1:             return (ProjectRestrictResultSet)source;
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1: }
============================================================================