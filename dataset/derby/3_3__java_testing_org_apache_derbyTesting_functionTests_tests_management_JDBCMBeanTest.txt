1:251d8da: /*
4:251d8da: 
1:251d8da:    Derby - Class org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest
1:251d8da: 
1:251d8da:    Licensed to the Apache Software Foundation (ASF) under one or more
1:251d8da:    contributor license agreements.  See the NOTICE file distributed with
1:251d8da:    this work for additional information regarding copyright ownership.
1:251d8da:    The ASF licenses this file to you under the Apache License, Version 2.0
1:251d8da:    (the "License"); you may not use this file except in compliance with
1:251d8da:    the License.  You may obtain a copy of the License at
1:251d8da: 
1:251d8da:       http://www.apache.org/licenses/LICENSE-2.0
1:251d8da: 
1:251d8da:    Unless required by applicable law or agreed to in writing, software
1:251d8da:    distributed under the License is distributed on an "AS IS" BASIS,
1:251d8da:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:251d8da:    See the License for the specific language governing permissions and
1:251d8da:    limitations under the License.
1:251d8da: 
1:251d8da:  */
1:251d8da: 
1:251d8da: package org.apache.derbyTesting.functionTests.tests.management;
1:251d8da: 
1:88777c5: import java.sql.DatabaseMetaData;
1:d7b5f4a: import java.sql.Driver;
1:251d8da: import java.util.Hashtable;
1:251d8da: import javax.management.ObjectName;
1:d7b5f4a: import junit.framework.Test;
1:88777c5: 
1:251d8da: 
1:251d8da: /**
1:251d8da:  * <p>
1:251d8da:  * This JUnit test class is for testing the JDBCMBean that is available in
1:251d8da:  * Derby. Running these tests requires a JVM supporting J2SE 5.0 or better, due 
1:251d8da:  * to the implementation's dependency of the platform management agent.</p>
1:251d8da:  * <p>
1:251d8da:  * This class currently tests the following:</p>
1:251d8da:  * <ul>
1:251d8da:  *   <li>That the attributes we expect to be available exist</li>
1:251d8da:  *   <li>That these attributes are readable</li>
1:251d8da:  *   <li>That these attributes have the correct type</li>
1:251d8da:  *   <li>That these attributes have the correct value</li>
1:251d8da:  *   <li>That the MBean operations we expect to see are invokeable, and that
1:251d8da:  *       their return values are as expected.</li>
1:251d8da:  * <p>
1:251d8da:  * The test fixtures will fail if an exception occurs (will be reported as an 
1:251d8da:  * error in JUnit).</p>
1:251d8da:  */
1:251d8da: public class JDBCMBeanTest extends MBeanTest {
1:251d8da:     
1:251d8da:     public JDBCMBeanTest(String name) {
1:251d8da:         super(name);
3:251d8da:     }
1:251d8da:     
1:251d8da:     public static Test suite() {
1:251d8da:         
1:251d8da:         return MBeanTest.suite(JDBCMBeanTest.class, 
1:251d8da:                                         "JDBCMBeanTest");
1:251d8da:     }
1:251d8da:     
1:d7b5f4a:     /**
1:d7b5f4a:      * <p>
1:251d8da:      * Creates an object name instance for the MBean whose object name's textual
1:251d8da:      * representation contains:</p>
1:251d8da:      * <ul>
1:251d8da:      *   <li>type=JDBC</li>
1:251d8da:      * </ul>
1:251d8da:      * @return the object name representing Derby's JDBCMBean
1:251d8da:      * @throws MalformedObjectNameException if the object name is not valid
1:251d8da:      */
1:251d8da:     private ObjectName getJdbcMBeanObjectName() 
1:251d8da:             throws Exception {
1:251d8da:         
1:251d8da:         // get a reference to the JDBCMBean instance
1:251d8da:         Hashtable<String, String> keyProps = new Hashtable<String, String>();
1:251d8da:         keyProps.put("type", "JDBC");
1:251d8da:         return getDerbyMBeanName(keyProps);
1:251d8da:     }
1:251d8da:     
1:251d8da:     //
1:251d8da:     // ---------- TEST FIXTURES ------------
1:251d8da:     //
1:251d8da:     // This MBean currently has only read-only attributes, which will be tested.
1:251d8da:     // Expected operations will be invoked.
1:251d8da:     
1:251d8da:     
1:251d8da:     public void testAttributeCompliantDriver() throws Exception {
1:251d8da:         // we expect Derby's driver always to be JDBC compliant
1:251d8da:         assertBooleanAttribute(true, getJdbcMBeanObjectName(), "CompliantDriver");
1:251d8da:     }
1:251d8da:     
1:251d8da:     public void testAttributeDriverLevel() throws Exception {
1:88777c5:         // get JDBC version from DatabaseMetaData for comparison
1:88777c5:         DatabaseMetaData dmd = getConnection().getMetaData();
1:81923ad: 
1:81923ad:         String JDBCVersion =
1:88777c5:             dmd.getJDBCMajorVersion() + "." +
1:88777c5:             dmd.getJDBCMinorVersion();
1:251d8da: 
1:81923ad:         String driverLevelString = (String)getAttribute(
1:81923ad:             getJdbcMBeanObjectName(),
1:81923ad:             "DriverLevel");
1:81923ad: 
1:81923ad:         println("DatabaseMetaDataJDBCLevel = " + JDBCVersion);
1:81923ad:         println("MBean driverLevel  = " + driverLevelString);
1:81923ad: 
1:81923ad:         assertEquals(
1:61a0de9:             "Unexpected driver level string: " + driverLevelString +
1:61a0de9:             " JDBCVersion: " + JDBCVersion,
1:81923ad:             -1, driverLevelString.indexOf('?'));
1:81923ad:         assertTrue(
1:61a0de9:             "Unexpected driver level string: " + driverLevelString +
1:61a0de9:             " JDBCVersion: " + JDBCVersion,
1:61a0de9:              driverLevelString.matches("^J.*SE.* - JDBC .*" + JDBCVersion));
1:251d8da:     }
1:88777c5:     
1:251d8da:     /**
1:251d8da:      * <p>
1:d7b5f4a:      * Tests the MajorVersion attribute of the JDBCMBean. Will test that there
1:d7b5f4a:      * exists an attribute with that name that we are able to read, that it 
1:d7b5f4a:      * returns the correct type, and that the return value is as expected.</p>
1:d7b5f4a:      * <p>
1:d7b5f4a:      * The expected value is retreived from the embedded driver that is directly
1:d7b5f4a:      * accessible to this JVM, making the assumption that this driver's version
1:d7b5f4a:      * information is the same as the version information of the embedded driver
1:d7b5f4a:      * used in the JVM being instrumented using JMX (this may or may not be the
1:d7b5f4a:      * same JVM).</p>
1:d7b5f4a:      * 
1:d7b5f4a:      * @throws java.lang.Exception if an error occurs, or if the test fails.
1:d7b5f4a:      */
1:251d8da:     public void testAttributeMajorVersion() throws Exception {
1:d7b5f4a:         /* since the JDBCMBean instruments the embedded driver (InternalDriver),
1:d7b5f4a:          * we need to get expected values from the embedded driver even if
1:d7b5f4a:          * this test configuration is client/server.
1:d7b5f4a:          * Assuming that the embedded driver is available in the classpath.
1:d7b5f4a:          */
1:d7b5f4a:         Driver d = new org.apache.derby.jdbc.EmbeddedDriver();
1:d7b5f4a:         int expected = d.getMajorVersion();
1:251d8da:         assertIntAttribute(expected, getJdbcMBeanObjectName(), "MajorVersion");
1:251d8da:     }
1:88777c5:     
1:d7b5f4a:     /**
1:d7b5f4a:      * <p>
1:d7b5f4a:      * Tests the MinorVersion attribute of the JDBCMBean. Will test that there
1:d7b5f4a:      * exists an attribute with that name that we are able to read, that it 
1:d7b5f4a:      * returns the correct type, and that the return value is as expected.</p>
1:d7b5f4a:      * <p>
1:d7b5f4a:      * The expected value is retreived from the embedded driver that is directly
1:d7b5f4a:      * accessible to this JVM, making the assumption that this driver's version
1:d7b5f4a:      * information is the same as the version information of the embedded driver
1:d7b5f4a:      * used in the JVM being instrumented using JMX (this may or may not be the
1:d7b5f4a:      * same JVM).</p>
1:d7b5f4a:      * 
1:d7b5f4a:      * @throws java.lang.Exception if an error occurs, or if the test fails.
1:d7b5f4a:      */
1:251d8da:     public void testAttributeMinorVersion() throws Exception {
1:d7b5f4a:         /* since the JDBCMBean instruments the embedded driver (InternalDriver),
1:d7b5f4a:          * we need to get expected values from the embedded driver even if
1:d7b5f4a:          * this test configuration is client/server.
1:d7b5f4a:          * Assuming that DriverManager is available in the classpath.
1:d7b5f4a:          */
1:d7b5f4a:         Driver d = new org.apache.derby.jdbc.EmbeddedDriver();
1:d7b5f4a:         int expected = d.getMinorVersion();
1:251d8da:         assertIntAttribute(expected, getJdbcMBeanObjectName(), "MinorVersion");
1:251d8da:     }
1:251d8da: 
1:251d8da:     public void testOperationAcceptsURL() throws Exception {
1:251d8da:         String opName = "acceptsURL";
1:251d8da:         ObjectName objName = getJdbcMBeanObjectName();
1:251d8da:         Object[] params = new Object[1];
1:251d8da:         String[] signature = { "java.lang.String" };
1:251d8da:         Boolean accepted;
1:251d8da:         
1:251d8da:         // first, test that a simple valid embedded driver URL is accepted
1:251d8da:         params[0] = "jdbc:derby:testDatabase";
1:251d8da:         accepted = (Boolean)invokeOperation(objName, opName, params, signature);
1:251d8da:         assertTrue("URL: " + params[0], accepted);
1:251d8da:                 
1:251d8da:         // then, test that a valid embedded URL with a number of attributes is
1:251d8da:         // accepted
1:251d8da:         params[0] = "jdbc:derby:testDB;create=true;user=tester;password=mypass";
1:251d8da:         accepted = (Boolean)invokeOperation(objName, opName, params, signature);
1:251d8da:         assertTrue("URL: " + params[0], accepted);
1:251d8da:         
1:251d8da:         // then, check that an invalid URL is not accepted
1:251d8da:         params[0] = "jdbc:invalidProtocol:newDatabase";
1:251d8da:         accepted = (Boolean)invokeOperation(objName, opName, params, signature);
1:251d8da:         assertFalse("URL: " + params[0], accepted);
1:251d8da:     }
1:251d8da: 
1:251d8da: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
commit:61a0de9
/////////////////////////////////////////////////////////////////////////
1:             "Unexpected driver level string: " + driverLevelString +
1:             " JDBCVersion: " + JDBCVersion,
1:             "Unexpected driver level string: " + driverLevelString +
1:             " JDBCVersion: " + JDBCVersion,
1:              driverLevelString.matches("^J.*SE.* - JDBC .*" + JDBCVersion));
commit:81923ad
/////////////////////////////////////////////////////////////////////////
1: 
1:         String JDBCVersion =
1:         String driverLevelString = (String)getAttribute(
1:             getJdbcMBeanObjectName(),
1:             "DriverLevel");
1: 
1:         println("DatabaseMetaDataJDBCLevel = " + JDBCVersion);
1:         println("MBean driverLevel  = " + driverLevelString);
1: 
1:         assertEquals(
0:             "Unexpected driver level string: " + driverLevelString,
1:             -1, driverLevelString.indexOf('?'));
1:         assertTrue(
0:             "Unexpected driver level string: " + driverLevelString,
0:              driverLevelString.matches("^Java SE .*JDBC .*" + JDBCVersion));
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:88777c5
/////////////////////////////////////////////////////////////////////////
1: import java.sql.DatabaseMetaData;
1: 
0: import org.apache.derby.iapi.services.info.JVMInfo;
/////////////////////////////////////////////////////////////////////////
1:         // get JDBC version from DatabaseMetaData for comparison
1:         DatabaseMetaData dmd = getConnection().getMetaData();
0:         String JDBCVersion = "" + dmd.getJDBCMajorVersion() + 
1:             dmd.getJDBCMajorVersion() + "." +
1:             dmd.getJDBCMinorVersion();
0:         println("DatabaseMetaDataJDBCLevel = " + JDBCVersion);
0:         ObjectName driverLevel = getJdbcMBeanObjectName();
0:         String driverLevelString = driverLevel.toString();
0:         println("MBean driverLevel  = " + driverLevelString);
1:        
0:         assert(driverLevelString.indexOf('?') == -1);
0:         assert(driverLevelString.matches("^JRE - JDBC: " + JDBCVersion + ".*"));
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d7b5f4a
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Driver;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.Utilities;
/////////////////////////////////////////////////////////////////////////
0:         BufferedReader sysinfoOutput = Utilities.getSysinfoFromServer();
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Tests the MajorVersion attribute of the JDBCMBean. Will test that there
1:      * exists an attribute with that name that we are able to read, that it 
1:      * returns the correct type, and that the return value is as expected.</p>
1:      * <p>
1:      * The expected value is retreived from the embedded driver that is directly
1:      * accessible to this JVM, making the assumption that this driver's version
1:      * information is the same as the version information of the embedded driver
1:      * used in the JVM being instrumented using JMX (this may or may not be the
1:      * same JVM).</p>
1:      * 
1:      * @throws java.lang.Exception if an error occurs, or if the test fails.
1:      */
1:         /* since the JDBCMBean instruments the embedded driver (InternalDriver),
1:          * we need to get expected values from the embedded driver even if
1:          * this test configuration is client/server.
1:          * Assuming that the embedded driver is available in the classpath.
1:          */
1:         Driver d = new org.apache.derby.jdbc.EmbeddedDriver();
1:         int expected = d.getMajorVersion();
1:     /**
1:      * <p>
1:      * Tests the MinorVersion attribute of the JDBCMBean. Will test that there
1:      * exists an attribute with that name that we are able to read, that it 
1:      * returns the correct type, and that the return value is as expected.</p>
1:      * <p>
1:      * The expected value is retreived from the embedded driver that is directly
1:      * accessible to this JVM, making the assumption that this driver's version
1:      * information is the same as the version information of the embedded driver
1:      * used in the JVM being instrumented using JMX (this may or may not be the
1:      * same JVM).</p>
1:      * 
1:      * @throws java.lang.Exception if an error occurs, or if the test fails.
1:      */
1:         /* since the JDBCMBean instruments the embedded driver (InternalDriver),
1:          * we need to get expected values from the embedded driver even if
1:          * this test configuration is client/server.
1:          * Assuming that DriverManager is available in the classpath.
1:          */
1:         Driver d = new org.apache.derby.jdbc.EmbeddedDriver();
1:         int expected = d.getMinorVersion();
commit:251d8da
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.management;
1: 
0: import java.io.BufferedReader;
0: import java.sql.DatabaseMetaData;
1: import java.util.Hashtable;
1: import javax.management.ObjectName;
0: import junit.framework.Test;
1: 
1: 
1: /**
1:  * <p>
1:  * This JUnit test class is for testing the JDBCMBean that is available in
1:  * Derby. Running these tests requires a JVM supporting J2SE 5.0 or better, due 
1:  * to the implementation's dependency of the platform management agent.</p>
1:  * <p>
1:  * This class currently tests the following:</p>
1:  * <ul>
1:  *   <li>That the attributes we expect to be available exist</li>
1:  *   <li>That these attributes are readable</li>
1:  *   <li>That these attributes have the correct type</li>
1:  *   <li>That these attributes have the correct value</li>
1:  *   <li>That the MBean operations we expect to see are invokeable, and that
1:  *       their return values are as expected.</li>
1:  * <p>
1:  * The test fixtures will fail if an exception occurs (will be reported as an 
1:  * error in JUnit).</p>
1:  */
1: public class JDBCMBeanTest extends MBeanTest {
1:     
1:     public JDBCMBeanTest(String name) {
1:         super(name);
1:     }
1:     
1:     public static Test suite() {
1:         
1:         return MBeanTest.suite(JDBCMBeanTest.class, 
1:                                         "JDBCMBeanTest");
1:     }
1:     
1:     /**
1:      * <p>
1:      * Creates an object name instance for the MBean whose object name's textual
1:      * representation contains:</p>
1:      * <ul>
1:      *   <li>type=JDBC</li>
1:      * </ul>
1:      * @return the object name representing Derby's JDBCMBean
1:      * @throws MalformedObjectNameException if the object name is not valid
1:      */
1:     private ObjectName getJdbcMBeanObjectName() 
1:             throws Exception {
1:         
1:         // get a reference to the JDBCMBean instance
1:         Hashtable<String, String> keyProps = new Hashtable<String, String>();
1:         keyProps.put("type", "JDBC");
1:         return getDerbyMBeanName(keyProps);
1:     }
1:     
1:     //
1:     // ---------- TEST FIXTURES ------------
1:     //
1:     // This MBean currently has only read-only attributes, which will be tested.
1:     // Expected operations will be invoked.
1:     
1:     
1:     public void testAttributeCompliantDriver() throws Exception {
1:         // we expect Derby's driver always to be JDBC compliant
1:         assertBooleanAttribute(true, getJdbcMBeanObjectName(), "CompliantDriver");
1:     }
1:     
1:     public void testAttributeDriverLevel() throws Exception {
0:         String expected = "[Unable to get driver level from sysinfo]";
0:         // Get the expected value from sysinfo
0:         BufferedReader sysinfoOutput = getSysinfoFromServer();
0:         String line = null;
0:         while ((line = sysinfoOutput.readLine()) != null) {
0:             /* Looking for:
0:              *--------- Derby Information --------
0:              *JRE - JDBC: J2SE 5.0 - JDBC 3.0
0:              *            ^^^^^^^^^^^^^^^^^^^
0:              * (actual JRE/JDBC values may vary)*/
0:             if (line.matches("^JRE - JDBC: .*")) {
0:                 expected = line.substring(line.indexOf(": ") + 2);
1:             }
1:         }
1:         
0:         // test the attribute value against the expected value
0:         assertStringAttribute(expected,getJdbcMBeanObjectName(), "DriverLevel");
1:     }
1:     
1:     public void testAttributeMajorVersion() throws Exception {
0:         DatabaseMetaData dbmd = getConnection().getMetaData();
0:         int expected = dbmd.getDriverMajorVersion();
1:         assertIntAttribute(expected, getJdbcMBeanObjectName(), "MajorVersion");
1:     }
1:     
1:     public void testAttributeMinorVersion() throws Exception {
0:         DatabaseMetaData dbmd = getConnection().getMetaData();
0:         int expected = dbmd.getDriverMinorVersion();
1:         assertIntAttribute(expected, getJdbcMBeanObjectName(), "MinorVersion");
1:     }
1: 
1:     public void testOperationAcceptsURL() throws Exception {
1:         String opName = "acceptsURL";
1:         ObjectName objName = getJdbcMBeanObjectName();
1:         Object[] params = new Object[1];
1:         String[] signature = { "java.lang.String" };
1:         Boolean accepted;
1:         
1:         // first, test that a simple valid embedded driver URL is accepted
1:         params[0] = "jdbc:derby:testDatabase";
1:         accepted = (Boolean)invokeOperation(objName, opName, params, signature);
1:         assertTrue("URL: " + params[0], accepted);
1:                 
1:         // then, test that a valid embedded URL with a number of attributes is
1:         // accepted
1:         params[0] = "jdbc:derby:testDB;create=true;user=tester;password=mypass";
1:         accepted = (Boolean)invokeOperation(objName, opName, params, signature);
1:         assertTrue("URL: " + params[0], accepted);
1:         
1:         // then, check that an invalid URL is not accepted
1:         params[0] = "jdbc:invalidProtocol:newDatabase";
1:         accepted = (Boolean)invokeOperation(objName, opName, params, signature);
1:         assertFalse("URL: " + params[0], accepted);
1:     }
1: 
1: }
============================================================================