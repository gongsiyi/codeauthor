1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.load.LoadError
1:345de35: 
1:6d913c6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6d913c6:    contributor license agreements.  See the NOTICE file distributed with
1:6d913c6:    this work for additional information regarding copyright ownership.
1:6d913c6:    The ASF licenses this file to You under the Apache License, Version 2.0
1:6d913c6:    (the "License"); you may not use this file except in compliance with
1:6d913c6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.load;
1:eac0369: 
1:7695060: import java.io.IOException;
1:eac0369: import java.sql.SQLException;
1:eac0369: import org.apache.derby.iapi.error.ExceptionSeverity;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.error.PublicAPI;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * These exceptions are thrown by the import and export modules.
1:eac0369:  * 
1:eac0369:  *
1:eac0369: 	@see SQLException
1:eac0369:  */
1:eac0369: class LoadError {
1:eac0369: 	
1:eac0369: 	/**
1:94f158a: 	 Raised if, the Derby database connection is null.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	static SQLException connectionNull() {
1:eac0369: 		return PublicAPI.wrapStandardException(
1:eac0369: 			   StandardException.newException(SQLState.CONNECTION_NULL));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	   Raised if, there is data found between the stop delimiter and field/record spearator.
1:eac0369: 	   @param lineNumber Found invalid data on this line number in the data file
1:eac0369: 	   @param columnNumber Found invalid data for this column number in the data file
1:eac0369: 	*/
1:eac0369: 	static SQLException dataAfterStopDelimiter(int lineNumber, int columnNumber) {
1:eac0369: 		return PublicAPI.wrapStandardException(
1:eac0369: 			   StandardException.newException(SQLState.DATA_AFTER_STOP_DELIMITER,
1:ce40a31: 											  lineNumber, columnNumber));				 	
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	   Raised if, the passed data file can't be found.
1:eac0369: 	   @param fileName the data file name 
1:7478b0d: 	   @param ex the exception that prevented us from opening the file
1:eac0369: 	*/
1:7478b0d: 	static SQLException dataFileNotFound(String fileName, Exception ex) {
1:eac0369: 
1:eac0369: 		return PublicAPI.wrapStandardException(
1:7478b0d: 			   StandardException.newException(SQLState.DATA_FILE_NOT_FOUND, ex,
1:7478b0d: 											  fileName));
1:eac0369: 	}
1:eac0369: 
1:eac0369:   
1:eac0369: 	/**
1:eac0369: 	   Raised if, null is passed for data file url.
1:eac0369: 	*/
1:eac0369: 	static SQLException dataFileNull() {
1:eac0369:     return PublicAPI.wrapStandardException(
1:eac0369: 			   StandardException.newException(SQLState.DATA_FILE_NULL));
1:eac0369: 	}
1:927ad05:         /**
1:927ad05: 	   Raised if, data file exists.
1:927ad05: 	*/
1:927ad05: 	static SQLException dataFileExists(String fileName) {
1:927ad05:     return PublicAPI.wrapStandardException(
1:927ad05: 			   StandardException.newException(SQLState.DATA_FILE_EXISTS, fileName));
1:927ad05: 	}
1:927ad05: 	/**
1:927ad05:            Raised if, lob file exists.
1:927ad05:         */
1:927ad05:         static SQLException lobsFileExists(String fileName) {
1:927ad05:     return PublicAPI.wrapStandardException(
1:927ad05:                            StandardException.newException(SQLState.LOB_DATA_FILE_EXISTS, fileName));
1:927ad05:         }
1:eac0369: 	/**
1:eac0369: 	   Raised if, the entity (ie table/view) for import/export is missing in the database.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	static SQLException entityNameMissing() {
1:eac0369:     return PublicAPI.wrapStandardException(
1:eac0369: 		   StandardException.newException(SQLState.ENTITY_NAME_MISSING));
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:dbed020: 	   Raised if, field and record separators are substring of each other.
1:eac0369: 	*/
1:eac0369: 	static SQLException fieldAndRecordSeparatorsSubset() {
1:eac0369: 		return  PublicAPI.wrapStandardException(
1:eac0369: 				StandardException.newException(SQLState.FIELD_IS_RECORD_SEPERATOR_SUBSET));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	   Raised if, no column by given name is found in the resultset while importing.
1:eac0369: 	   @param columnName the resultset doesn't have this column name
1:eac0369: 	*/
1:eac0369: 	static SQLException invalidColumnName(String columnName) {
1:eac0369: 		return  PublicAPI.wrapStandardException(
1:eac0369: 				StandardException.newException(SQLState.INVALID_COLUMN_NAME , columnName));
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	   Raised if, no column by given number is found in the resultset while importing.
1:eac0369: 	   @param numberOfColumns the resultset doesn't have this column number
1:eac0369: 	*/
1:eac0369: 	static SQLException invalidColumnNumber(int numberOfColumns) {
1:eac0369: 		
1:eac0369: 		return PublicAPI.wrapStandardException(
1:ce40a31: 				StandardException.newException(SQLState.INVALID_COLUMN_NUMBER, numberOfColumns ));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	   Raised if, trying to export/import from an entity which has non supported
1:eac0369: 	   type columns in it.
1:eac0369: 	*/
1:eac0369: 	static SQLException nonSupportedTypeColumn(String columnName, String typeName) {
1:eac0369: 		return  PublicAPI.wrapStandardException(
1:eac0369: 				StandardException.newException(SQLState.UNSUPPORTED_COLUMN_TYPE,
1:eac0369: 											   columnName,
1:eac0369: 											   typeName));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	   Raised if, in case of fixed format, don't find the record separator for a row in the data file.
1:eac0369: 	   @param lineNumber the line number with the missing record separator in the data file
1:eac0369: 	*/
1:eac0369: 	static SQLException recordSeparatorMissing(int lineNumber) {
1:eac0369: 
1:eac0369: 		return  PublicAPI.wrapStandardException(
1:eac0369: 				StandardException.newException(SQLState.RECORD_SEPERATOR_MISSING,
1:ce40a31: 											   lineNumber));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	   Raised if, in case of fixed format, reach end of file before reading data for all the columns.
1:eac0369: 	*/
1:eac0369: 	static SQLException unexpectedEndOfFile(int lineNumber) {
1:eac0369:     return  PublicAPI.wrapStandardException(
1:eac0369: 			StandardException.newException(SQLState.UNEXPECTED_END_OF_FILE,
1:ce40a31: 										   lineNumber));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	   Raised if, got IOException while writing data to the file.
1:eac0369: 	*/
1:7695060: 	static SQLException errorWritingData(IOException ioe) {
1:eac0369: 		return PublicAPI.wrapStandardException(
1:7695060: 			StandardException.newException(SQLState.ERROR_WRITING_DATA, ioe));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Raised if period(.) is used a character delimiter
1:eac0369: 	 */
1:eac0369: 	static SQLException periodAsCharDelimiterNotAllowed()
1:eac0369: 	{
1:eac0369: 		return PublicAPI.wrapStandardException(
1:eac0369: 			   StandardException.newException(SQLState.PERIOD_AS_CHAR_DELIMITER_NOT_ALLOWED));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Raised if same delimiter character is used for more than one delimiter
1:eac0369: 	 * type . For eg using ';' for both column delimter and character delimter
1:eac0369: 	 */
1:eac0369: 	static SQLException delimitersAreNotMutuallyExclusive()
1:eac0369: 	{
1:eac0369: 		return PublicAPI.wrapStandardException(
1:eac0369: 			   StandardException.newException(SQLState.DELIMITERS_ARE_NOT_MUTUALLY_EXCLUSIVE));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	static SQLException tableNotFound(String tableName)
1:eac0369: 	{
1:eac0369: 	
1:eac0369: 		return PublicAPI.wrapStandardException(
1:eac0369: 			   StandardException.newException(SQLState.TABLE_NOT_FOUND, tableName));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 		
1:eac0369: 	/* Wrapper to throw an unknown excepton duing Import/Export.
1:eac0369: 	 * Typically this can be some IO error which is not generic error
1:eac0369: 	 * like the above error messages. 
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	static SQLException unexpectedError(Throwable t )
1:eac0369: 	{
1:eac0369: 		if (!(t instanceof SQLException))  
1:eac0369: 		{
1:eac0369: 			return PublicAPI.wrapStandardException(StandardException.plainWrapException(t));
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return (SQLException) t;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 
1:eac0369: 
1:eac0369: 	
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	   Raised if, field and record separators are substring of each other.
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 											  lineNumber, columnNumber));				 	
/////////////////////////////////////////////////////////////////////////
1: 				StandardException.newException(SQLState.INVALID_COLUMN_NUMBER, numberOfColumns ));
/////////////////////////////////////////////////////////////////////////
1: 											   lineNumber));
/////////////////////////////////////////////////////////////////////////
1: 										   lineNumber));
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:927ad05
/////////////////////////////////////////////////////////////////////////
1:         /**
1: 	   Raised if, data file exists.
1: 	*/
1: 	static SQLException dataFileExists(String fileName) {
1:     return PublicAPI.wrapStandardException(
1: 			   StandardException.newException(SQLState.DATA_FILE_EXISTS, fileName));
1: 	}
1: 	/**
1:            Raised if, lob file exists.
1:         */
1:         static SQLException lobsFileExists(String fileName) {
1:     return PublicAPI.wrapStandardException(
1:                            StandardException.newException(SQLState.LOB_DATA_FILE_EXISTS, fileName));
1:         }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:7695060
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: 	static SQLException errorWritingData(IOException ioe) {
1: 			StandardException.newException(SQLState.ERROR_WRITING_DATA, ioe));
commit:7478b0d
/////////////////////////////////////////////////////////////////////////
1: 	   @param ex the exception that prevented us from opening the file
1: 	static SQLException dataFileNotFound(String fileName, Exception ex) {
1: 			   StandardException.newException(SQLState.DATA_FILE_NOT_FOUND, ex,
1: 											  fileName));
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 	 Raised if, the Derby database connection is null.
commit:6d913c6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.load.LoadError
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.load;
1: 
1: import java.sql.SQLException;
1: import org.apache.derby.iapi.error.ExceptionSeverity;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.error.PublicAPI;
1: 
1: /**
1:  * These exceptions are thrown by the import and export modules.
1:  * 
1:  *
0:  * @author Mamta Satoor
1: 	@see SQLException
1:  */
1: class LoadError {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	
1: 	/**
0: 	 Raised if, the Cloudscape database connection is null.
1: 	*/
1: 
1: 	static SQLException connectionNull() {
1: 		return PublicAPI.wrapStandardException(
1: 			   StandardException.newException(SQLState.CONNECTION_NULL));
1: 	}
1: 
1: 	/**
1: 	   Raised if, there is data found between the stop delimiter and field/record spearator.
1: 	   @param lineNumber Found invalid data on this line number in the data file
1: 	   @param columnNumber Found invalid data for this column number in the data file
1: 	*/
1: 	static SQLException dataAfterStopDelimiter(int lineNumber, int columnNumber) {
1: 		return PublicAPI.wrapStandardException(
1: 			   StandardException.newException(SQLState.DATA_AFTER_STOP_DELIMITER,
0: 											  new Integer(lineNumber),new Integer(columnNumber)));				 	
1: 	}
1: 
1: 	/**
1: 	   Raised if, the passed data file can't be found.
1: 	   @param fileName the data file name 
1: 	*/
0: 	static SQLException dataFileNotFound(String fileName) {
1: 
1: 		return PublicAPI.wrapStandardException(
0: 			   StandardException.newException(SQLState.DATA_FILE_NOT_FOUND, fileName));
1: 	}
1: 
1:   
1: 	/**
1: 	   Raised if, null is passed for data file url.
1: 	*/
1: 	static SQLException dataFileNull() {
1:     return PublicAPI.wrapStandardException(
1: 			   StandardException.newException(SQLState.DATA_FILE_NULL));
1: 	}
1: 
1: 	/**
1: 	   Raised if, the entity (ie table/view) for import/export is missing in the database.
1: 	*/
1: 
1: 	static SQLException entityNameMissing() {
1:     return PublicAPI.wrapStandardException(
1: 		   StandardException.newException(SQLState.ENTITY_NAME_MISSING));
1: 
1: 	}
1: 
1: 
1: 	/**
0: 	   Raised if, field & record separators are substring of each other.
1: 	*/
1: 	static SQLException fieldAndRecordSeparatorsSubset() {
1: 		return  PublicAPI.wrapStandardException(
1: 				StandardException.newException(SQLState.FIELD_IS_RECORD_SEPERATOR_SUBSET));
1: 	}
1: 
1: 	/**
1: 	   Raised if, no column by given name is found in the resultset while importing.
1: 	   @param columnName the resultset doesn't have this column name
1: 	*/
1: 	static SQLException invalidColumnName(String columnName) {
1: 		return  PublicAPI.wrapStandardException(
1: 				StandardException.newException(SQLState.INVALID_COLUMN_NAME , columnName));
1: 
1: 	}
1: 
1: 
1: 	/**
1: 	   Raised if, no column by given number is found in the resultset while importing.
1: 	   @param numberOfColumns the resultset doesn't have this column number
1: 	*/
1: 	static SQLException invalidColumnNumber(int numberOfColumns) {
1: 		
1: 		return PublicAPI.wrapStandardException(
0: 				StandardException.newException(SQLState.INVALID_COLUMN_NUMBER,
0: 											   new Integer(numberOfColumns)
0: 											   ));
1: 	}
1: 
1: 	/**
1: 	   Raised if, trying to export/import from an entity which has non supported
1: 	   type columns in it.
1: 	*/
1: 	static SQLException nonSupportedTypeColumn(String columnName, String typeName) {
1: 		return  PublicAPI.wrapStandardException(
1: 				StandardException.newException(SQLState.UNSUPPORTED_COLUMN_TYPE,
1: 											   columnName,
1: 											   typeName));
1: 	}
1: 
1: 
1: 	/**
1: 	   Raised if, in case of fixed format, don't find the record separator for a row in the data file.
1: 	   @param lineNumber the line number with the missing record separator in the data file
1: 	*/
1: 	static SQLException recordSeparatorMissing(int lineNumber) {
1: 
1: 		return  PublicAPI.wrapStandardException(
1: 				StandardException.newException(SQLState.RECORD_SEPERATOR_MISSING,
0: 											   new Integer(lineNumber)));
1: 	}
1: 
1: 	/**
1: 	   Raised if, in case of fixed format, reach end of file before reading data for all the columns.
1: 	*/
1: 	static SQLException unexpectedEndOfFile(int lineNumber) {
1:     return  PublicAPI.wrapStandardException(
1: 			StandardException.newException(SQLState.UNEXPECTED_END_OF_FILE,
0: 										   new Integer(lineNumber)));
1: 	}
1: 
1: 	/**
1: 	   Raised if, got IOException while writing data to the file.
1: 	*/
0: 	static SQLException errorWritingData() {
1: 		return PublicAPI.wrapStandardException(
0: 			   StandardException.newException(SQLState.ERROR_WRITING_DATA));
1: 	}
1: 
1: 
1: 	/*
1: 	 * Raised if period(.) is used a character delimiter
1: 	 */
1: 	static SQLException periodAsCharDelimiterNotAllowed()
1: 	{
1: 		return PublicAPI.wrapStandardException(
1: 			   StandardException.newException(SQLState.PERIOD_AS_CHAR_DELIMITER_NOT_ALLOWED));
1: 	}
1: 
1: 	/*
1: 	 * Raised if same delimiter character is used for more than one delimiter
1: 	 * type . For eg using ';' for both column delimter and character delimter
1: 	 */
1: 	static SQLException delimitersAreNotMutuallyExclusive()
1: 	{
1: 		return PublicAPI.wrapStandardException(
1: 			   StandardException.newException(SQLState.DELIMITERS_ARE_NOT_MUTUALLY_EXCLUSIVE));
1: 	}
1: 
1: 
1: 	static SQLException tableNotFound(String tableName)
1: 	{
1: 	
1: 		return PublicAPI.wrapStandardException(
1: 			   StandardException.newException(SQLState.TABLE_NOT_FOUND, tableName));
1: 	}
1: 
1: 		
1: 	/* Wrapper to throw an unknown excepton duing Import/Export.
1: 	 * Typically this can be some IO error which is not generic error
1: 	 * like the above error messages. 
1: 	 */
1: 
1: 	static SQLException unexpectedError(Throwable t )
1: 	{
1: 		if (!(t instanceof SQLException))  
1: 		{
1: 			return PublicAPI.wrapStandardException(StandardException.plainWrapException(t));
1: 		}
1: 		else
1: 			return (SQLException) t;
1: 	}
1: 	
1: 
1: 
1: 	
1: }
1: 
1: 
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.load;
0: 
0: import java.sql.SQLException;
0: import org.apache.derby.iapi.error.ExceptionSeverity;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.error.PublicAPI;
0: 
0: /**
0:  * These exceptions are thrown by the import and export modules.
0:  * 
0:  *
0:  * @author Mamta Satoor
0: 	@see SQLException
0:  */
0: class LoadError {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	
0: 	/**
0: 	 Raised if, the Cloudscape database connection is null.
0: 	*/
0: 
0: 	static SQLException connectionNull() {
0: 		return PublicAPI.wrapStandardException(
0: 			   StandardException.newException(SQLState.CONNECTION_NULL));
0: 	}
0: 
0: 	/**
0: 	   Raised if, there is data found between the stop delimiter and field/record spearator.
0: 	   @param lineNumber Found invalid data on this line number in the data file
0: 	   @param columnNumber Found invalid data for this column number in the data file
0: 	*/
0: 	static SQLException dataAfterStopDelimiter(int lineNumber, int columnNumber) {
0: 		return PublicAPI.wrapStandardException(
0: 			   StandardException.newException(SQLState.DATA_AFTER_STOP_DELIMITER,
0: 											  new Integer(lineNumber),new Integer(columnNumber)));				 	
0: 	}
0: 
0: 	/**
0: 	   Raised if, the passed data file can't be found.
0: 	   @param fileName the data file name 
0: 	*/
0: 	static SQLException dataFileNotFound(String fileName) {
0: 
0: 		return PublicAPI.wrapStandardException(
0: 			   StandardException.newException(SQLState.DATA_FILE_NOT_FOUND, fileName));
0: 	}
0: 
0:   
0: 	/**
0: 	   Raised if, null is passed for data file url.
0: 	*/
0: 	static SQLException dataFileNull() {
0:     return PublicAPI.wrapStandardException(
0: 			   StandardException.newException(SQLState.DATA_FILE_NULL));
0: 	}
0: 
0: 	/**
0: 	   Raised if, the entity (ie table/view) for import/export is missing in the database.
0: 	*/
0: 
0: 	static SQLException entityNameMissing() {
0:     return PublicAPI.wrapStandardException(
0: 		   StandardException.newException(SQLState.ENTITY_NAME_MISSING));
0: 
0: 	}
0: 
0: 
0: 	/**
0: 	   Raised if, field & record separators are substring of each other.
0: 	*/
0: 	static SQLException fieldAndRecordSeparatorsSubset() {
0: 		return  PublicAPI.wrapStandardException(
0: 				StandardException.newException(SQLState.FIELD_IS_RECORD_SEPERATOR_SUBSET));
0: 	}
0: 
0: 	/**
0: 	   Raised if, no column by given name is found in the resultset while importing.
0: 	   @param columnName the resultset doesn't have this column name
0: 	*/
0: 	static SQLException invalidColumnName(String columnName) {
0: 		return  PublicAPI.wrapStandardException(
0: 				StandardException.newException(SQLState.INVALID_COLUMN_NAME , columnName));
0: 
0: 	}
0: 
0: 
0: 	/**
0: 	   Raised if, no column by given number is found in the resultset while importing.
0: 	   @param numberOfColumns the resultset doesn't have this column number
0: 	*/
0: 	static SQLException invalidColumnNumber(int numberOfColumns) {
0: 		
0: 		return PublicAPI.wrapStandardException(
0: 				StandardException.newException(SQLState.INVALID_COLUMN_NUMBER,
0: 											   new Integer(numberOfColumns)
0: 											   ));
0: 	}
0: 
0: 	/**
0: 	   Raised if, trying to export/import from an entity which has non supported
0: 	   type columns in it.
0: 	*/
0: 	static SQLException nonSupportedTypeColumn(String columnName, String typeName) {
0: 		return  PublicAPI.wrapStandardException(
0: 				StandardException.newException(SQLState.UNSUPPORTED_COLUMN_TYPE,
0: 											   columnName,
0: 											   typeName));
0: 	}
0: 
0: 
0: 	/**
0: 	   Raised if, in case of fixed format, don't find the record separator for a row in the data file.
0: 	   @param lineNumber the line number with the missing record separator in the data file
0: 	*/
0: 	static SQLException recordSeparatorMissing(int lineNumber) {
0: 
0: 		return  PublicAPI.wrapStandardException(
0: 				StandardException.newException(SQLState.RECORD_SEPERATOR_MISSING,
0: 											   new Integer(lineNumber)));
0: 	}
0: 
0: 	/**
0: 	   Raised if, in case of fixed format, reach end of file before reading data for all the columns.
0: 	*/
0: 	static SQLException unexpectedEndOfFile(int lineNumber) {
0:     return  PublicAPI.wrapStandardException(
0: 			StandardException.newException(SQLState.UNEXPECTED_END_OF_FILE,
0: 										   new Integer(lineNumber)));
0: 	}
0: 
0: 	/**
0: 	   Raised if, got IOException while writing data to the file.
0: 	*/
0: 	static SQLException errorWritingData() {
0: 		return PublicAPI.wrapStandardException(
0: 			   StandardException.newException(SQLState.ERROR_WRITING_DATA));
0: 	}
0: 
0: 
0: 	/*
0: 	 * Raised if period(.) is used a character delimiter
0: 	 */
0: 	static SQLException periodAsCharDelimiterNotAllowed()
0: 	{
0: 		return PublicAPI.wrapStandardException(
0: 			   StandardException.newException(SQLState.PERIOD_AS_CHAR_DELIMITER_NOT_ALLOWED));
0: 	}
0: 
0: 	/*
0: 	 * Raised if same delimiter character is used for more than one delimiter
0: 	 * type . For eg using ';' for both column delimter and character delimter
0: 	 */
0: 	static SQLException delimitersAreNotMutuallyExclusive()
0: 	{
0: 		return PublicAPI.wrapStandardException(
0: 			   StandardException.newException(SQLState.DELIMITERS_ARE_NOT_MUTUALLY_EXCLUSIVE));
0: 	}
0: 
0: 
0: 	static SQLException tableNotFound(String tableName)
0: 	{
0: 	
0: 		return PublicAPI.wrapStandardException(
0: 			   StandardException.newException(SQLState.TABLE_NOT_FOUND, tableName));
0: 	}
0: 
0: 		
0: 	/* Wrapper to throw an unknown excepton duing Import/Export.
0: 	 * Typically this can be some IO error which is not generic error
0: 	 * like the above error messages. 
0: 	 */
0: 
0: 	static SQLException unexpectedError(Throwable t )
0: 	{
0: 		if (!(t instanceof SQLException))  
0: 		{
0: 			return PublicAPI.wrapStandardException(StandardException.plainWrapException(t));
0: 		}
0: 		else
0: 			return (SQLException) t;
0: 	}
0: 	
0: 
0: 
0: 	
0: }
0: 
0: 
0: 
0: 
0: 
============================================================================