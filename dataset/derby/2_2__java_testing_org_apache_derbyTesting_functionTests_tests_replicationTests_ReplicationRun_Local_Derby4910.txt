1:b06f20e: /*
1:b06f20e:  
1:b06f20e: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_Derby4910
1:b06f20e:  
1:b06f20e: Licensed to the Apache Software Foundation (ASF) under one or more
1:b06f20e: contributor license agreements.  See the NOTICE file distributed with
1:b06f20e: this work for additional information regarding copyright ownership.
1:b06f20e: The ASF licenses this file to You under the Apache License, Version 2.0
1:b06f20e: (the "License"); you may not use this file except in compliance with
1:b06f20e: the License.  You may obtain a copy of the License at
1:b06f20e:  
1:b06f20e:    http://www.apache.org/licenses/LICENSE-2.0
1:b06f20e:  
1:b06f20e: Unless required by applicable law or agreed to in writing, software
1:b06f20e: distributed under the License is distributed on an "AS IS" BASIS,
1:b06f20e: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b06f20e: See the License for the specific language governing permissions and
1:b06f20e: limitations under the License.
1:b06f20e:  
1:b06f20e:  */
1:b06f20e: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:b06f20e: 
1:b06f20e: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:b06f20e: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:b06f20e: 
1:b06f20e: 
1:b06f20e: /**
1:b06f20e:  * Test that the startSlave command doesn't fail if it takes more than a
1:b06f20e:  * second before the master attempts to connect to the slave. Regression test
1:b06f20e:  * case for DERBY-4910.
1:b06f20e:  */
1:b06f20e: 
1:b06f20e: public class ReplicationRun_Local_Derby4910 extends ReplicationRun
1:b06f20e: {
1:b06f20e:     
1:b06f20e:     /**
1:b06f20e:      * Creates a new instance of this test class.
1:b06f20e:      * @param testcaseName Identifying the test.
1:b06f20e:      */
1:b06f20e:     public ReplicationRun_Local_Derby4910(String testcaseName)
1:b06f20e:     {
1:b06f20e:         super(testcaseName);
1:b06f20e:     }
1:b06f20e:     
1:b06f20e:     public static Test suite()
1:b06f20e:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("Replication test - DERBY-4910");
1:b06f20e:         
1:b06f20e:         suite.addTestSuite( ReplicationRun_Local_Derby4910.class );
1:b06f20e:         
1:b06f20e:         return SecurityManagerSetup.noSecurityManager(suite);
1:b06f20e: 
1:b06f20e:     }
1:b06f20e: 
1:b06f20e:     /**
1:b06f20e:      * Test that a slave can wait a while for the master to connect without
1:b06f20e:      * timing out. The startSlave command used to time out after one second
1:b06f20e:      * before DERBY-4910.
1:b06f20e:      */
1:b06f20e:     public void testSlaveWaitsForMaster() throws Exception
1:b06f20e:     {
1:b06f20e:         cleanAllTestHosts();
1:b06f20e:         
1:b06f20e:         initEnvironment();
1:b06f20e:         
1:b06f20e:         initMaster(masterServerHost,
1:b06f20e:                 replicatedDb);
1:b06f20e:         
1:136610d:         startServer(masterJvmVersion, derbyMasterVersion,
1:b06f20e:                 masterServerHost, ALL_INTERFACES, masterServerPort,
1:b06f20e:                 masterDbSubPath);
1:b06f20e:         
1:136610d:         startServer(slaveJvmVersion, derbySlaveVersion,
1:b06f20e:                 slaveServerHost, ALL_INTERFACES, slaveServerPort,
1:b06f20e:                 slaveDbSubPath);
1:b06f20e:         
1:b06f20e:         startServerMonitor(slaveServerHost);
1:b06f20e:         
1:b06f20e:         bootMasterDatabase(jvmVersion,
1:b06f20e:                 masterDatabasePath +FS+ masterDbSubPath, replicatedDb,
1:b06f20e:                 masterServerHost, masterServerPort,
1:b06f20e:                 null // bootLoad, // The "test" to start when booting db.
1:b06f20e:                 );
1:b06f20e:         
1:b06f20e:         initSlave(slaveServerHost,
1:b06f20e:                 jvmVersion,
1:b06f20e:                 replicatedDb);
1:b06f20e:         
1:b06f20e:         startSlave(jvmVersion, replicatedDb,
1:b06f20e:                 slaveServerHost, slaveServerPort,
1:b06f20e:                 slaveServerHost, 
1:b06f20e:                 slaveReplPort,
1:b06f20e:                 testClientHost);
1:b06f20e: 
1:b06f20e:         // DERBY-4910: The slave used to time out after one second if the
1:b06f20e:         // master hadn't connected to it yet. Wait for three seconds before
1:b06f20e:         // starting the master to verify that this isn't a problem anymore.
1:b06f20e:         Thread.sleep(3000L);
1:b06f20e:         
1:b06f20e:         startMaster(jvmVersion, replicatedDb,
1:b06f20e:                 masterServerHost, masterServerPort,
1:b06f20e:                 masterServerHost,
1:b06f20e:                 slaveServerPort, slaveServerHost,
1:b06f20e:                 slaveReplPort);
1:b06f20e:         
1:b06f20e:         // Replication "load"
1:b06f20e:         String dbPath = masterDatabasePath + FS + masterDbSubPath + FS +
1:b06f20e:                 replicatedDb;
1:b06f20e:         
1:b06f20e:         int tuplesToInsert = 10000;
1:b06f20e:         _testInsertUpdateDeleteOnMaster(masterServerHost, masterServerPort, 
1:b06f20e:                 dbPath, tuplesToInsert);
1:b06f20e:         
1:b06f20e:         failOver(jvmVersion,
1:b06f20e:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:b06f20e:                 masterServerHost, masterServerPort,
1:b06f20e:                 testClientHost);
1:b06f20e:         
1:b06f20e:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:b06f20e:                 slaveServerHost,slaveServerPort,
1:b06f20e:                 testClientHost);
1:b06f20e:         
1:b06f20e:         // verifySlave();
1:b06f20e:         dbPath = slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb;
1:b06f20e:         _verifyDatabase(slaveServerHost, slaveServerPort,
1:b06f20e:             dbPath, tuplesToInsert);
1:b06f20e:         // We should verify the master as well, 
1:b06f20e:         // at least to see that we still can connect.
1:b06f20e:         // verifyMaster();
1:b06f20e:         dbPath = masterDatabasePath +FS+masterDbSubPath +FS+ replicatedDb;
1:b06f20e:         _verifyDatabase(masterServerHost, masterServerPort,
1:b06f20e:             dbPath, tuplesToInsert);
1:b06f20e:     }
1:b06f20e: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("Replication test - DERBY-4910");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:136610d
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion, derbyMasterVersion,
1:         startServer(slaveJvmVersion, derbySlaveVersion,
commit:b06f20e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_Derby4910
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Test that the startSlave command doesn't fail if it takes more than a
1:  * second before the master attempts to connect to the slave. Regression test
1:  * case for DERBY-4910.
1:  */
1: 
1: public class ReplicationRun_Local_Derby4910 extends ReplicationRun
1: {
1:     
1:     /**
1:      * Creates a new instance of this test class.
1:      * @param testcaseName Identifying the test.
1:      */
1:     public ReplicationRun_Local_Derby4910(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("Replication test - DERBY-4910");
1:         
1:         suite.addTestSuite( ReplicationRun_Local_Derby4910.class );
1:         
1:         return SecurityManagerSetup.noSecurityManager(suite);
1: 
1:     }
1: 
1:     /**
1:      * Test that a slave can wait a while for the master to connect without
1:      * timing out. The startSlave command used to time out after one second
1:      * before DERBY-4910.
1:      */
1:     public void testSlaveWaitsForMaster() throws Exception
1:     {
1:         cleanAllTestHosts();
1:         
1:         initEnvironment();
1:         
1:         initMaster(masterServerHost,
1:                 replicatedDb);
1:         
0:         masterServer = startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost, ALL_INTERFACES, masterServerPort,
1:                 masterDbSubPath);
1:         
0:         slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
1:                 slaveServerHost, ALL_INTERFACES, slaveServerPort,
1:                 slaveDbSubPath);
1:         
1:         startServerMonitor(slaveServerHost);
1:         
1:         bootMasterDatabase(jvmVersion,
1:                 masterDatabasePath +FS+ masterDbSubPath, replicatedDb,
1:                 masterServerHost, masterServerPort,
1:                 null // bootLoad, // The "test" to start when booting db.
1:                 );
1:         
1:         initSlave(slaveServerHost,
1:                 jvmVersion,
1:                 replicatedDb);
1:         
1:         startSlave(jvmVersion, replicatedDb,
1:                 slaveServerHost, slaveServerPort,
1:                 slaveServerHost, 
1:                 slaveReplPort,
1:                 testClientHost);
1: 
1:         // DERBY-4910: The slave used to time out after one second if the
1:         // master hadn't connected to it yet. Wait for three seconds before
1:         // starting the master to verify that this isn't a problem anymore.
1:         Thread.sleep(3000L);
1:         
1:         startMaster(jvmVersion, replicatedDb,
1:                 masterServerHost, masterServerPort,
1:                 masterServerHost,
1:                 slaveServerPort, slaveServerHost,
1:                 slaveReplPort);
1:         
1:         // Replication "load"
1:         String dbPath = masterDatabasePath + FS + masterDbSubPath + FS +
1:                 replicatedDb;
1:         
1:         int tuplesToInsert = 10000;
1:         _testInsertUpdateDeleteOnMaster(masterServerHost, masterServerPort, 
1:                 dbPath, tuplesToInsert);
1:         
1:         failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost, masterServerPort,
1:                 testClientHost);
1:         
1:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         // verifySlave();
1:         dbPath = slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb;
1:         _verifyDatabase(slaveServerHost, slaveServerPort,
1:             dbPath, tuplesToInsert);
1:         // We should verify the master as well, 
1:         // at least to see that we still can connect.
1:         // verifyMaster();
1:         dbPath = masterDatabasePath +FS+masterDbSubPath +FS+ replicatedDb;
1:         _verifyDatabase(masterServerHost, masterServerPort,
1:             dbPath, tuplesToInsert);
1:     }
1: }
============================================================================