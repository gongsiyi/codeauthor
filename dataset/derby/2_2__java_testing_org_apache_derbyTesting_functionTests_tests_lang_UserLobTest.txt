1:57d42a5: /*
2:57d42a5: 
1:57d42a5:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UserLobTest
1:57d42a5: 
1:57d42a5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:57d42a5:    contributor license agreements.  See the NOTICE file distributed with
1:57d42a5:    this work for additional information regarding copyright ownership.
1:57d42a5:    The ASF licenses this file to you under the Apache License, Version 2.0
1:57d42a5:    (the "License"); you may not use this file except in compliance with
1:57d42a5:    the License.  You may obtain a copy of the License at
1:57d42a5: 
1:57d42a5:      http://www.apache.org/licenses/LICENSE-2.0
1:57d42a5: 
1:57d42a5:    Unless required by applicable law or agreed to in writing, software
1:57d42a5:    distributed under the License is distributed on an "AS IS" BASIS,
1:57d42a5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:57d42a5:    See the License for the specific language governing permissions and
1:57d42a5:    limitations under the License.
1:57d42a5: 
1:57d42a5:  */
1:57d42a5: 
1:57d42a5: package org.apache.derbyTesting.functionTests.tests.lang;
1:57d42a5: 
1:57d42a5: import java.sql.Connection;
1:57d42a5: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:57d42a5: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:57d42a5: 
1:57d42a5: /**
1:57d42a5:  * <p>
1:57d42a5:  * Additional tests for Blob/Clobs created from user-supplied large objects.
1:57d42a5:  * </p>
1:57d42a5:  */
1:57d42a5: public class UserLobTest extends GeneratedColumnsHelper
1:57d42a5: {
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5:     //
1:57d42a5:     // CONSTANTS
1:57d42a5:     //
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5: 
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5:     //
1:57d42a5:     // STATE
1:57d42a5:     //
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5: 
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5:     //
1:57d42a5:     // CONSTRUCTOR
1:57d42a5:     //
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5: 
1:57d42a5: 
1:57d42a5:     /**
1:57d42a5:      * Create a new instance.
1:57d42a5:      */
1:57d42a5: 
1:57d42a5:     public UserLobTest(String name)
1:57d42a5:     {
1:57d42a5:         super(name);
1:57d42a5:     }
1:57d42a5: 
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5:     //
1:57d42a5:     // JUnit BEHAVIOR
1:57d42a5:     //
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5: 
1:57d42a5: 
1:57d42a5:     /**
1:57d42a5:      * Construct top level suite in this JUnit test
1:57d42a5:      */
1:57d42a5:     public static Test suite()
1:57d42a5:     {
1:1ae02c9:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:1ae02c9:             UserLobTest.class);
1:1ae02c9: 
1:57d42a5:         Test        result = new CleanDatabaseTestSetup( suite );
1:57d42a5: 
1:57d42a5:         return result;
1:57d42a5:     }
1:57d42a5: 
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5:     //
1:57d42a5:     // TESTS
1:57d42a5:     //
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5: 
1:57d42a5:     /**
1:57d42a5:      * <p>
1:57d42a5:      * Test that user-defined LOBs can be stored in varbinary and varchar columns.
1:57d42a5:      * </p>
1:57d42a5:      */
1:57d42a5:     public  void    test_001_casts()
1:57d42a5:         throws Exception
1:57d42a5:     {
1:57d42a5:         Connection  conn = getConnection();
1:57d42a5: 
1:57d42a5:         //
1:57d42a5:         // Create some user defined functions which return lobs.
1:57d42a5:         // 
1:57d42a5:         goodStatement
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "create function f_2201_blob_1\n" +
1:57d42a5:              "(\n" +
1:57d42a5:              "	a_0 varchar( 10 )\n" +
1:57d42a5:              ")\n" +
1:57d42a5:              "returns blob\n" +
1:57d42a5:              "language java\n" +
1:57d42a5:              "parameter style java\n" +
1:57d42a5:              "no sql\n" +
1:57d42a5:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.blob_Blob_String'\n"
1:57d42a5:              );
1:57d42a5:         goodStatement
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "create function f_2201_clob_1\n" +
1:57d42a5:              "(\n" +
1:57d42a5:              "	a_0 varchar( 10 )\n" +
1:57d42a5:              ")\n" +
1:57d42a5:              "returns clob\n" +
1:57d42a5:              "language java\n" +
1:57d42a5:              "parameter style java\n" +
1:57d42a5:              "no sql\n" +
1:57d42a5:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.clob_Clob_String'\n"
1:57d42a5:              );
1:57d42a5: 
1:57d42a5:         //
1:57d42a5:         // Create some tables for storing the results of these functions
1:57d42a5:         // 
1:57d42a5:         goodStatement
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "create table t_2201_clob_blob_1( a clob, b blob )\n"
1:57d42a5:              );
1:57d42a5:         goodStatement
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "create table t_2201_chartypes_1( a char( 10 ), b varchar( 10 ), c long varchar )\n"
1:57d42a5:               );
1:57d42a5:         
1:57d42a5:         //
1:57d42a5:         // Successfully insert into these tables, casting as necessary.
1:57d42a5:         // 
1:57d42a5:         goodStatement
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "insert into t_2201_clob_blob_1( a, b ) values( f_2201_clob_1( 'abc' ), f_2201_blob_1( 'abc' ) )\n"
1:57d42a5:               );
1:57d42a5:         goodStatement
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "insert into t_2201_chartypes_1( a, b, c )\n" +
1:57d42a5:              "values\n" +
1:57d42a5:              "(\n" +
1:57d42a5:              "  cast( f_2201_clob_1( 'abc' ) as char( 10)),\n" +
1:57d42a5:              "  cast( f_2201_clob_1( 'def' ) as varchar( 10)),\n" +
1:57d42a5:              "  cast( f_2201_clob_1( 'ghi' ) as long varchar )\n" +
1:57d42a5:              ")\n"
1:57d42a5:               );
1:57d42a5:         assertResults
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "select * from t_2201_clob_blob_1",
1:57d42a5:              new String[][]
1:57d42a5:              {
1:57d42a5:                  { "abc" ,         "616263" },
1:57d42a5:              },
1:57d42a5:              false
1:57d42a5:              );
1:57d42a5:         assertResults
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "select * from t_2201_chartypes_1",
1:57d42a5:              new String[][]
1:57d42a5:              {
1:57d42a5:                  { "abc       ", "def", "ghi" },
1:57d42a5:              },
1:57d42a5:              false
1:57d42a5:              );
1:57d42a5:         assertResults
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "select length( a ), length( b ), length( c ) from t_2201_chartypes_1",
1:57d42a5:              new String[][]
1:57d42a5:              {
1:57d42a5:                  { "10", "3", "3" },
1:57d42a5:              },
1:57d42a5:              false
1:57d42a5:              );
1:57d42a5:         assertResults
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "values\n" +
1:57d42a5:              "(\n" +
1:57d42a5:              "  length( cast( f_2201_clob_1( 'abc' ) as char( 10)) ),\n" +
1:57d42a5:              "  length( cast( f_2201_clob_1( 'defg' ) as varchar( 10)) ),\n" +
1:57d42a5:              "  length( cast( f_2201_clob_1( 'hijkl' ) as long varchar ) ),\n" +
1:57d42a5:              "  length( f_2201_clob_1( 'mnopqr' ) )\n" +
1:57d42a5:              ")\n",
1:57d42a5:              new String[][]
1:57d42a5:              {
1:57d42a5:                  { "10", "4", "5", "6" },
1:57d42a5:              },
1:57d42a5:              false
1:57d42a5:              );
1:57d42a5:         assertResults
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "select length( a ), length( b ) from t_2201_clob_blob_1",
1:57d42a5:              new String[][]
1:57d42a5:              {
1:57d42a5:                  { "3", "3" },
1:57d42a5:              },
1:57d42a5:              false
1:57d42a5:              );
1:57d42a5:         assertResults
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "values ( varchar( f_2201_clob_1( 'abc' ) ) )",
1:57d42a5:              new String[][]
1:57d42a5:              {
1:57d42a5:                  { "abc" },
1:57d42a5:              },
1:57d42a5:              false
1:57d42a5:              );
1:57d42a5:         assertResults
1:57d42a5:             (
1:57d42a5:              conn,
1:57d42a5:              "values ( substr( f_2201_clob_1( 'abc' ), 2, 2 ), upper( f_2201_clob_1( 'defg' ) ) )",
1:57d42a5:              new String[][]
1:57d42a5:              {
1:57d42a5:                  { "bc", "DEFG" },
1:57d42a5:              },
1:57d42a5:              false
1:57d42a5:              );
1:57d42a5:     }
1:57d42a5: 
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5:     //
1:57d42a5:     // MINIONS
1:57d42a5:     //
1:57d42a5:     ///////////////////////////////////////////////////////////////////////////////////
1:57d42a5: 
1:57d42a5: 
1:57d42a5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:             UserLobTest.class);
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:57d42a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UserLobTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.DriverManager;
0: import java.util.ArrayList;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derby.iapi.util.StringUtil;
0: import org.apache.derby.catalog.DefaultInfo;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
0: import org.apache.derby.catalog.types.RoutineAliasInfo;
1: 
1: /**
1:  * <p>
1:  * Additional tests for Blob/Clobs created from user-supplied large objects.
1:  * </p>
1:  */
1: public class UserLobTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public UserLobTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(UserLobTest.class);
1:         Test        result = new CleanDatabaseTestSetup( suite );
1: 
1:         return result;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test that user-defined LOBs can be stored in varbinary and varchar columns.
1:      * </p>
1:      */
1:     public  void    test_001_casts()
1:         throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         //
1:         // Create some user defined functions which return lobs.
1:         // 
1:         goodStatement
1:             (
1:              conn,
1:              "create function f_2201_blob_1\n" +
1:              "(\n" +
1:              "	a_0 varchar( 10 )\n" +
1:              ")\n" +
1:              "returns blob\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.blob_Blob_String'\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create function f_2201_clob_1\n" +
1:              "(\n" +
1:              "	a_0 varchar( 10 )\n" +
1:              ")\n" +
1:              "returns clob\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.clob_Clob_String'\n"
1:              );
1: 
1:         //
1:         // Create some tables for storing the results of these functions
1:         // 
1:         goodStatement
1:             (
1:              conn,
1:              "create table t_2201_clob_blob_1( a clob, b blob )\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create table t_2201_chartypes_1( a char( 10 ), b varchar( 10 ), c long varchar )\n"
1:               );
1:         
1:         //
1:         // Successfully insert into these tables, casting as necessary.
1:         // 
1:         goodStatement
1:             (
1:              conn,
1:              "insert into t_2201_clob_blob_1( a, b ) values( f_2201_clob_1( 'abc' ), f_2201_blob_1( 'abc' ) )\n"
1:               );
1:         goodStatement
1:             (
1:              conn,
1:              "insert into t_2201_chartypes_1( a, b, c )\n" +
1:              "values\n" +
1:              "(\n" +
1:              "  cast( f_2201_clob_1( 'abc' ) as char( 10)),\n" +
1:              "  cast( f_2201_clob_1( 'def' ) as varchar( 10)),\n" +
1:              "  cast( f_2201_clob_1( 'ghi' ) as long varchar )\n" +
1:              ")\n"
1:               );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t_2201_clob_blob_1",
1:              new String[][]
1:              {
1:                  { "abc" ,         "616263" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              conn,
1:              "select * from t_2201_chartypes_1",
1:              new String[][]
1:              {
1:                  { "abc       ", "def", "ghi" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              conn,
1:              "select length( a ), length( b ), length( c ) from t_2201_chartypes_1",
1:              new String[][]
1:              {
1:                  { "10", "3", "3" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              conn,
1:              "values\n" +
1:              "(\n" +
1:              "  length( cast( f_2201_clob_1( 'abc' ) as char( 10)) ),\n" +
1:              "  length( cast( f_2201_clob_1( 'defg' ) as varchar( 10)) ),\n" +
1:              "  length( cast( f_2201_clob_1( 'hijkl' ) as long varchar ) ),\n" +
1:              "  length( f_2201_clob_1( 'mnopqr' ) )\n" +
1:              ")\n",
1:              new String[][]
1:              {
1:                  { "10", "4", "5", "6" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              conn,
1:              "select length( a ), length( b ) from t_2201_clob_blob_1",
1:              new String[][]
1:              {
1:                  { "3", "3" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              conn,
1:              "values ( varchar( f_2201_clob_1( 'abc' ) ) )",
1:              new String[][]
1:              {
1:                  { "abc" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              conn,
1:              "values ( substr( f_2201_clob_1( 'abc' ), 2, 2 ), upper( f_2201_clob_1( 'defg' ) ) )",
1:              new String[][]
1:              {
1:                  { "bc", "DEFG" },
1:              },
1:              false
1:              );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1: }
============================================================================