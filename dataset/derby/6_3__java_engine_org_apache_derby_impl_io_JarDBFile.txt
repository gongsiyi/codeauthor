1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.io.JarDBFile
1:345de35: 
1:2724c48:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2724c48:    contributor license agreements.  See the NOTICE file distributed with
1:2724c48:    this work for additional information regarding copyright ownership.
1:2724c48:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2724c48:    (the "License"); you may not use this file except in compliance with
1:2724c48:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
9:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.io;
1:eac0369: 
1:eac0369: import org.apache.derby.io.StorageFile;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.FileNotFoundException;
1:eac0369: import java.util.zip.ZipEntry;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * This class provides a jar file based implementation of the StorageFile interface. It is used by the
1:eac0369:  * database engine to access persistent data and transaction logs under the jar subsubprotocol.
1:eac0369:  */
1:ccbbcd4: class JarDBFile extends InputStreamFile<JarStorageFactory>
2:eac0369: {
1:eac0369: 
1:eac0369:     JarDBFile( JarStorageFactory storageFactory, String path)
1:eac0369:     {
1:eac0369:         super( storageFactory, path);
2:eac0369:     }
1:eac0369: 
1:eac0369:     JarDBFile( JarStorageFactory storageFactory, String parent, String name)
1:eac0369:     {
1:eac0369:         super( storageFactory, parent, name);
1:eac0369:     }
1:eac0369: 
1:eac0369:     JarDBFile( JarDBFile dir, String name)
1:eac0369:     {
1:eac0369:         super( dir,name);
1:eac0369:     }
1:eac0369: 
1:eac0369:     private JarDBFile( JarStorageFactory storageFactory, String child, int pathLen)
1:eac0369:     {
1:eac0369:         super( storageFactory, child, pathLen);
1:eac0369:     }
1:eac0369: 
1:747f261:     /**
1:eac0369:      * Tests whether the named file exists.
1:747f261:      *
1:eac0369:      * @return <b>true</b> if the named file exists, <b>false</b> if not.
1:747f261:      */
1:eac0369:     public boolean exists()
1:eac0369:     {
1:eac0369:         return getEntry() != null;
1:eac0369:     } // end of exists
1:747f261: 
1:eac0369:     private ZipEntry getEntry()
1:eac0369:     {
1:eac0369:         return storageFactory.zipData.getEntry( path);
1:eac0369:     }
1:747f261: 
1:eac0369:     /**
1:eac0369:      * Get the name of the parent directory if this name includes a parent.
3:eac0369:      *
1:eac0369:      * @return An StorageFile denoting the parent directory of this StorageFile, if it has a parent, null if
1:eac0369:      *         it does not have a parent.
1:eac0369:      */
1:eac0369:     StorageFile getParentDir( int pathLen)
1:eac0369:     {
1:eac0369:         return new JarDBFile( storageFactory, path, pathLen);
1:eac0369:     }
1:eac0369:     
1:eac0369:     /**
1:eac0369:      * Creates an input stream from a file name.
1:eac0369:      *
1:eac0369:      * @return an input stream suitable for reading from the file.
1:eac0369:      *
1:eac0369:      * @exception FileNotFoundException if the file is not found.
1:eac0369:      */
1:eac0369:     public InputStream getInputStream( ) throws FileNotFoundException
1:eac0369:     {
1:eac0369:         ZipEntry zipEntry = getEntry( );
1:eac0369: 		if (zipEntry == null)
1:eac0369: 			throw new java.io.FileNotFoundException(path);
1:eac0369: 
1:eac0369:         try
1:eac0369:         {
1:eac0369:             return storageFactory.zipData.getInputStream(zipEntry);
1:eac0369:         }
1:eac0369:         catch( IOException ioe){ throw new java.io.FileNotFoundException(path);}
1:eac0369:     } // end of getInputStream
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Get the file name for diagnostic purposes. Usually the same as getPath().
1:eac0369:      *
1:eac0369:      * @return the file name
1:eac0369:      */
1:eac0369:     public String toString()
1:eac0369:     {
1:eac0369:         return path;
1:747f261:     }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ccbbcd4
/////////////////////////////////////////////////////////////////////////
1: class JarDBFile extends InputStreamFile<JarStorageFactory>
commit:8ae4e15
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:84cc283
/////////////////////////////////////////////////////////////////////////
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dfc9ab0
/////////////////////////////////////////////////////////////////////////
0:         String pathFileURL = pathFile.toURI().toURL().toString();
commit:2724c48
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:747f261
/////////////////////////////////////////////////////////////////////////
0: import java.net.MalformedURLException;
0: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
1: 	/**
0:      * Return a URL for this file (resource). Returns a URL according to the
0:      * spec for java.net.JarURLConnection
1:      * 
0:      * @see org.apache.derby.io.StorageFile#getURL()
1:      */
0:     public URL getURL() throws MalformedURLException {
0:         File pathFile = new File(storageFactory.zipData.getName());
1: 
0:         String pathFileURL = pathFile.toURL().toString();
1: 
0:         return new URL("jar:" + pathFileURL + "!/" + path);
1:     }
commit:7a92d1f
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.io.JarDBFile
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.io;
1: 
1: import org.apache.derby.io.StorageFile;
0: import org.apache.derby.io.StorageRandomAccessFile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import java.io.File;
1: import java.io.InputStream;
0: import java.io.OutputStream;
1: import java.io.IOException;
1: import java.io.FileNotFoundException;
1: import java.util.zip.ZipEntry;
0: import java.util.zip.ZipFile;
1: 
0: import java.security.AccessController;
0: import java.security.PrivilegedAction;
0: import java.security.PrivilegedExceptionAction;
0: import java.security.PrivilegedActionException;
1: 
1: /**
1:  * This class provides a jar file based implementation of the StorageFile interface. It is used by the
1:  * database engine to access persistent data and transaction logs under the jar subsubprotocol.
1:  */
0: class JarDBFile extends InputStreamFile
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
0:     private final JarStorageFactory storageFactory;
1: 
1:     JarDBFile( JarStorageFactory storageFactory, String path)
1:     {
1:         super( storageFactory, path);
0:         this.storageFactory = storageFactory;
1:     }
1: 
1:     JarDBFile( JarStorageFactory storageFactory, String parent, String name)
1:     {
1:         super( storageFactory, parent, name);
0:         this.storageFactory = storageFactory;
1:     }
1: 
1:     JarDBFile( JarDBFile dir, String name)
1:     {
1:         super( dir,name);
0:         this.storageFactory = dir.storageFactory;
1:     }
1: 
1:     private JarDBFile( JarStorageFactory storageFactory, String child, int pathLen)
1:     {
1:         super( storageFactory, child, pathLen);
0:         this.storageFactory = storageFactory;
1:     }
1: 
1:     /**
1:      * Tests whether the named file exists.
1:      *
1:      * @return <b>true</b> if the named file exists, <b>false</b> if not.
1:      */
1:     public boolean exists()
1:     {
1:         return getEntry() != null;
1:     } // end of exists
1: 
1:     private ZipEntry getEntry()
1:     {
1:         return storageFactory.zipData.getEntry( path);
1:     }
1: 
1:     /**
0:      * Returns the length of the named file if it is not a directory. The return value is not specified
0:      * if the file is a directory.
1:      *
0:      * @return The length, in bytes, of the named file if it exists and is not a directory,
0:      *         0 if the file does not exist, or any value if the named file is a directory.
1:      */
0:     public long length()
1:     {
0:         ZipEntry entry = getEntry();
0:         if( entry == null)
0:             return 0;
0:         return entry.getSize();
0:     } // end of length
1: 
1:     /**
1:      * Get the name of the parent directory if this name includes a parent.
1:      *
1:      * @return An StorageFile denoting the parent directory of this StorageFile, if it has a parent, null if
1:      *         it does not have a parent.
1:      */
1:     StorageFile getParentDir( int pathLen)
1:     {
1:         return new JarDBFile( storageFactory, path, pathLen);
1:     }
1:     
1:     /**
1:      * Creates an input stream from a file name.
1:      *
1:      * @return an input stream suitable for reading from the file.
1:      *
1:      * @exception FileNotFoundException if the file is not found.
1:      */
1:     public InputStream getInputStream( ) throws FileNotFoundException
1:     {
1:         ZipEntry zipEntry = getEntry( );
1: 		if (zipEntry == null)
1: 			throw new java.io.FileNotFoundException(path);
1: 
1:         try
1:         {
1:             return storageFactory.zipData.getInputStream(zipEntry);
1:         }
1:         catch( IOException ioe){ throw new java.io.FileNotFoundException(path);}
1:     } // end of getInputStream
1: 
1:     /**
1:      * Get the file name for diagnostic purposes. Usually the same as getPath().
1:      *
1:      * @return the file name
1:      */
1:     public String toString()
1:     {
1:         return path;
1:     }
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.io;
0: 
0: import org.apache.derby.io.StorageFile;
0: import org.apache.derby.io.StorageRandomAccessFile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.io.File;
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.io.IOException;
0: import java.io.FileNotFoundException;
0: import java.util.zip.ZipEntry;
0: import java.util.zip.ZipFile;
0: 
0: import java.security.AccessController;
0: import java.security.PrivilegedAction;
0: import java.security.PrivilegedExceptionAction;
0: import java.security.PrivilegedActionException;
0: 
0: /**
0:  * This class provides a jar file based implementation of the StorageFile interface. It is used by the
0:  * database engine to access persistent data and transaction logs under the jar subsubprotocol.
0:  */
0: class JarDBFile extends InputStreamFile
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0:     private final JarStorageFactory storageFactory;
0: 
0:     JarDBFile( JarStorageFactory storageFactory, String path)
0:     {
0:         super( storageFactory, path);
0:         this.storageFactory = storageFactory;
0:     }
0: 
0:     JarDBFile( JarStorageFactory storageFactory, String parent, String name)
0:     {
0:         super( storageFactory, parent, name);
0:         this.storageFactory = storageFactory;
0:     }
0: 
0:     JarDBFile( JarDBFile dir, String name)
0:     {
0:         super( dir,name);
0:         this.storageFactory = dir.storageFactory;
0:     }
0: 
0:     private JarDBFile( JarStorageFactory storageFactory, String child, int pathLen)
0:     {
0:         super( storageFactory, child, pathLen);
0:         this.storageFactory = storageFactory;
0:     }
0: 
0:     /**
0:      * Tests whether the named file exists.
0:      *
0:      * @return <b>true</b> if the named file exists, <b>false</b> if not.
0:      */
0:     public boolean exists()
0:     {
0:         return getEntry() != null;
0:     } // end of exists
0: 
0:     private ZipEntry getEntry()
0:     {
0:         return storageFactory.zipData.getEntry( path);
0:     }
0: 
0:     /**
0:      * Returns the length of the named file if it is not a directory. The return value is not specified
0:      * if the file is a directory.
0:      *
0:      * @return The length, in bytes, of the named file if it exists and is not a directory,
0:      *         0 if the file does not exist, or any value if the named file is a directory.
0:      */
0:     public long length()
0:     {
0:         ZipEntry entry = getEntry();
0:         if( entry == null)
0:             return 0;
0:         return entry.getSize();
0:     } // end of length
0: 
0:     /**
0:      * Get the name of the parent directory if this name includes a parent.
0:      *
0:      * @return An StorageFile denoting the parent directory of this StorageFile, if it has a parent, null if
0:      *         it does not have a parent.
0:      */
0:     StorageFile getParentDir( int pathLen)
0:     {
0:         return new JarDBFile( storageFactory, path, pathLen);
0:     }
0:     
0:     /**
0:      * Creates an input stream from a file name.
0:      *
0:      * @return an input stream suitable for reading from the file.
0:      *
0:      * @exception FileNotFoundException if the file is not found.
0:      */
0:     public InputStream getInputStream( ) throws FileNotFoundException
0:     {
0:         ZipEntry zipEntry = getEntry( );
0: 		if (zipEntry == null)
0: 			throw new java.io.FileNotFoundException(path);
0: 
0:         try
0:         {
0:             return storageFactory.zipData.getInputStream(zipEntry);
0:         }
0:         catch( IOException ioe){ throw new java.io.FileNotFoundException(path);}
0:     } // end of getInputStream
0: 
0:     /**
0:      * Get the file name for diagnostic purposes. Usually the same as getPath().
0:      *
0:      * @return the file name
0:      */
0:     public String toString()
0:     {
0:         return path;
0:     }
0: }
============================================================================