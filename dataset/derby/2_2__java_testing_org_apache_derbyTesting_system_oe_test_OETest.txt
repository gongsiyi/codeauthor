1:38b4bbb: /*
5:6e8ab1f:  *
1:38b4bbb:  * Derby - Class org.apache.derbyTesting.system.oe.test.OETest
1:6e8ab1f:  *
1:38b4bbb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:38b4bbb:  * contributor license agreements.  See the NOTICE file distributed with
1:38b4bbb:  * this work for additional information regarding copyright ownership.
1:38b4bbb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:38b4bbb:  * (the "License"); you may not use this file except in compliance with
1:38b4bbb:  * the License.  You may obtain a copy of the License at
1:6e8ab1f:  *
1:38b4bbb:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6e8ab1f:  *
1:38b4bbb:  * Unless required by applicable law or agreed to in writing, 
1:38b4bbb:  * software distributed under the License is distributed on an 
1:38b4bbb:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:38b4bbb:  * either express or implied. See the License for the specific 
1:38b4bbb:  * language governing permissions and limitations under the License.
10:6e8ab1f:  */
1:38b4bbb: package org.apache.derbyTesting.system.oe.test;
2:6e8ab1f: 
1:6e8ab1f: 
1:1ae02c9: import java.sql.Connection;
1:1ae02c9: import java.sql.SQLException;
1:38b4bbb: import junit.framework.Test;
1:38b4bbb: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:38b4bbb: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:a6358d6: import org.apache.derbyTesting.system.oe.direct.SimpleNonStandardOperations;
1:7a0c00a: import org.apache.derbyTesting.system.oe.run.Checks;
1:7a0c00a: import org.apache.derbyTesting.system.oe.run.Populate;
1:7a0c00a: import org.apache.derbyTesting.system.oe.run.Schema;
1:a6358d6: 
11:6e8ab1f: /**
1:38b4bbb:  * Test the basic functionality of the Order Entry test
1:7a0c00a:  * using scale 1 as a functional test, to ensure that changes to the
1:38b4bbb:  * database do not break the performance test.
1:6e8ab1f:  *
1:6e8ab1f:  */
1:38b4bbb: public class OETest extends BaseJDBCTestCase {
1:6e8ab1f: 
1:6e8ab1f:    	
1:38b4bbb:     public OETest(String name) {
1:6e8ab1f:         super(name);
1:6e8ab1f:     }
1:7a0c00a:     
1:7a0c00a:       
1:38b4bbb:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Order Entry");
1:7a0c00a:         
1:7a0c00a:         suite.addTest(Schema.suite());
1:7a0c00a:         // Test load part
1:7a0c00a:         suite.addTest(new Populate("testLoad"));
1:7a0c00a:         // perform checks tests.
1:7a0c00a:         suite.addTest(Checks.suite());
1:7a0c00a: 
1:8404f5d:         suite.addTestSuite(OperationsTester.class);
1:a6358d6:         suite.addTestSuite(OETest.class);
1:c3834d8:         
1:c3834d8:         // Ensure the transactions left the data in a consistent state
1:c3834d8:         suite.addTest(Checks.consistencyChecks());
1:8404f5d:                 
1:38b4bbb:         return new CleanDatabaseTestSetup(suite);
10:6e8ab1f:     }
1:a6358d6:     
1:a6358d6:     private SimpleNonStandardOperations getNSOps() throws SQLException
1:a6358d6:     {
1:a6358d6:         return new SimpleNonStandardOperations(
1:a6358d6:                 getConnection(), Connection.TRANSACTION_SERIALIZABLE);
1:a6358d6:     }
1:a6358d6:     
1:a6358d6:     /**
1:a6358d6:      * Test the non-standard customer inquiry transaction
1:a6358d6:      */
1:a6358d6:     public void testCustomerInquiry() throws SQLException
1:a6358d6:     {
1:a6358d6:         SimpleNonStandardOperations nsops = getNSOps();
1:a6358d6:                    
1:a6358d6:         for (int i = 0; i < 20; i++)
1:a6358d6:             nsops.customerInquiry(1);
1:a6358d6:         
1:a6358d6:         nsops.close();
1:a6358d6:     }
1:a6358d6:     
1:a6358d6:     /**
1:a6358d6:      * Test the non-standard customer address change transaction
1:a6358d6:      */
1:a6358d6:     public void testCustomerAddressChange() throws SQLException
1:a6358d6:     {
1:a6358d6:         SimpleNonStandardOperations nsops = getNSOps();
1:a6358d6:                    
1:a6358d6:         for (int i = 0; i < 20; i++)
1:a6358d6:             nsops.customerAddressChange(1);
1:a6358d6:         
1:a6358d6:         nsops.close();
1:a6358d6:     }
1:6e8ab1f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Order Entry");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:c3834d8
/////////////////////////////////////////////////////////////////////////
1:         
1:         // Ensure the transactions left the data in a consistent state
1:         suite.addTest(Checks.consistencyChecks());
commit:a6358d6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.system.oe.direct.SimpleNonStandardOperations;
0: import java.sql.Connection;
0: import java.sql.SQLException;
1: 
/////////////////////////////////////////////////////////////////////////
1:         suite.addTestSuite(OETest.class);
1:     
1:     private SimpleNonStandardOperations getNSOps() throws SQLException
1:     {
1:         return new SimpleNonStandardOperations(
1:                 getConnection(), Connection.TRANSACTION_SERIALIZABLE);
1:     }
1:     
1:     /**
1:      * Test the non-standard customer inquiry transaction
1:      */
1:     public void testCustomerInquiry() throws SQLException
1:     {
1:         SimpleNonStandardOperations nsops = getNSOps();
1:                    
1:         for (int i = 0; i < 20; i++)
1:             nsops.customerInquiry(1);
1:         
1:         nsops.close();
1:     }
1:     
1:     /**
1:      * Test the non-standard customer address change transaction
1:      */
1:     public void testCustomerAddressChange() throws SQLException
1:     {
1:         SimpleNonStandardOperations nsops = getNSOps();
1:                    
1:         for (int i = 0; i < 20; i++)
1:             nsops.customerAddressChange(1);
1:         
1:         nsops.close();
1:     }
commit:8404f5d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         suite.addTestSuite(OperationsTester.class);
1:                 
commit:9f7e882
/////////////////////////////////////////////////////////////////////////
0:         ops.close();
commit:7a0c00a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.system.oe.run.Checks;
1: import org.apache.derbyTesting.system.oe.run.Populate;
1: import org.apache.derbyTesting.system.oe.run.Schema;
1:  * using scale 1 as a functional test, to ensure that changes to the
1:       
1:         suite.addTest(Schema.suite());
1:         // Test load part
1:         suite.addTest(new Populate("testLoad"));
1:         // perform checks tests.
1:         suite.addTest(Checks.suite());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:6e8ab1f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.system.oe.client.Operations;
0: import org.apache.derbyTesting.system.oe.load.SimpleInsert;
0: import org.apache.derbyTesting.system.oe.client.Load;
/////////////////////////////////////////////////////////////////////////
0: 	short scale = 1;
0:    	LoadTester tester;
1:    	
0:     public OETest(String name, short scale)
0:     {
1:     	super(name);
0:     	this.scale=scale;
1:  
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
0:         // Test load part and the cardinality after the
0:         // population.
0:         suite.addTest(new OETest("testInsertStmtLoad",(short)1));
0:         suite.addTest(new OETest("testWarehouseRows"));
0:         suite.addTest(new OETest("testStockRows"));
0:         suite.addTest(new OETest("testItemRows"));
0:         suite.addTest(new OETest("testCustomerRows"));
0:         suite.addTest(new OETest("testDistrictRows"));
0:         suite.addTest(new OETest("testOrdersRows"));
0:         suite.addTest(new OETest("testNewOrdersRows"));
0:         suite.addTest(new OETest("testOrderLineRows"));
0:         suite.addTest(new OETest("testHistoryRows"));
1:         
1:         
/////////////////////////////////////////////////////////////////////////
0:      * Test the Simple Load 
1:      */
0:     public void testInsertStmtLoad() throws Exception
0:     {
0:        loadTest(new SimpleInsert(getConnection(),scale));
1:     }
0:     
1:     /**
0:      * Test load part. 
0:      * Includes 
0:      * 1) populating the tables
0:      * 2) Check if the cardinality of all tables is per the 
0:      * TPC-C requirement as expected.
0:      * @param p  - Implementation of the Load to use for populating the database
0:      * @throws Exception
1:      */
0:     public void loadTest(Load p) throws Exception
0:     {
0:     	LoadTester tester = new LoadTester(p);
0:     	tester.test();
1:     }
0:     
1:     /**
0:      * Test cardinality of WAREHOUSE table
1:      * 
0:      * @throws Exception
1:      */
0:     public void testWarehouseRows() throws Exception
0:     {
0:     	getLoadTester().testWarehouseRows();
1:     }
0: 
1:     /**
0:      * Test cardinality of CUSTOMER table
1:      * 
0:      * @throws Exception
1:      */
0:     public void testCustomerRows() throws Exception
0:     {
0:     	getLoadTester().testCustomerRows();
1:     }
0: 
1:     /**
0:      * Test cardinality of DISTRICT table
1:      * 
0:      * @throws Exception
1:      */
0:     public void testDistrictRows() throws Exception
0:     {
0:     	getLoadTester().testDistrictRows();
1:     }
0:     
1:     /**
0:      * Test cardinality of HISTORY table
1:      * 
0:      * @throws Exception
1:      */
0:     public void testHistoryRows() throws Exception
0:     {
0:     	getLoadTester().testHistoryRows();
1:     }
0: 
1:     /**
0:      * Test cardinality of ITEM table
1:      * 
0:      * @throws Exception
1:      */
0:     public void testItemRows() throws Exception
0:     {
0:     	getLoadTester().testItemRows();
1:     }
0:     
1:     /**
0:      * Test cardinality of NEWORDERS table
1:      * 
0:      * @throws Exception
1:      */
0:     public void testNewOrdersRows() throws Exception
0:     {
0:     	getLoadTester().testNewOrdersRows();
1:     }
0:     
1:     /**
0:      * Test cardinality of ORDERLINE table
1:      * 
0:      * @throws Exception
1:      */
0:     public void testOrderLineRows() throws Exception
0:     {
0:     	getLoadTester().testOrderLineRows();
1:     }
0:     
1:     /**
0:      * Test cardinality of STOCK table
1:      * 
0:      * @throws Exception
1:      */
0:     public void testStockRows() throws Exception
0:     {
0:     	getLoadTester().testStockRows();
1:     }
0: 
1:     /**
0:      * Test cardinality of ORDERS table
1:      * 
0:      * @throws Exception
1:      */
0:     public void testOrdersRows() throws Exception
0:     {
0:     	getLoadTester().testOrdersRows();
1:     }
0:     
1:     /**
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
0:      * 
0:      * @return LoadTester to test the load part.
0:      * @throws SQLException
0:      */
0:     private LoadTester getLoadTester()
0:         throws SQLException
0:     {
0:     	if (tester != null)
0:     		return tester;
0:     	
0:     	tester = new LoadTester(new SimpleInsert(getConnection(),(short)1));
0:     	return tester;
0:     }
commit:38b4bbb
/////////////////////////////////////////////////////////////////////////
1: /*
0:  *
1:  * Derby - Class org.apache.derbyTesting.system.oe.test.OETest
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
0:  */
1: package org.apache.derbyTesting.system.oe.test;
0: 
0: import java.io.IOException;
0: import java.io.UnsupportedEncodingException;
0: import java.security.PrivilegedActionException;
0: import java.sql.SQLException;
0: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.system.oe.client.Operations;
0: import org.apache.derbyTesting.system.oe.direct.Standard;
0: 
0: /**
1:  * Test the basic functionality of the Order Entry test
0:  * as a functional test, to ensure that changes to the
1:  * database do not break the performance test.
0:  *
0:  */
1: public class OETest extends BaseJDBCTestCase {
0: 
1:     public OETest(String name) {
0:         super(name);
0:     }
0:     
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("Order Entry");
0:         
0:         suite.addTest(new OETest("testSchema"));
0:         suite.addTest(new OETest("testPrimaryKey"));
0:         suite.addTest(new OETest("testForeignKey"));
0:         suite.addTest(new OETest("testIndex"));
0:         
0:         suite.addTest(new OETest("testStandardOperations"));
0:         
1:         return new CleanDatabaseTestSetup(suite);
0:     }
0:     
0:     /**
0:      * Test setting up the base tables.
0:      */
0:     public void testSchema() throws UnsupportedEncodingException, SQLException, PrivilegedActionException, IOException
0:     {
0:         script("schema.sql");
0:     }
0:     /**
0:      * Test setting up the primary keys.
0:      */
0:     public void testPrimaryKey() throws UnsupportedEncodingException, SQLException, PrivilegedActionException, IOException
0:     {
0:         script("primarykey.sql");
0:     }
0:     /**
0:      * Test setting up the foreign keys.
0:      */
0:     public void testForeignKey() throws UnsupportedEncodingException, SQLException, PrivilegedActionException, IOException
0:     {
0:         script("foreignkey.sql");
0:     }
0:     /**
0:      * Test setting up the remaining indexes.
0:      */
0:     public void testIndex() throws UnsupportedEncodingException, SQLException, PrivilegedActionException, IOException
0:     {
0:         script("index.sql");
0:     }
0:     
0:     /**
0:      * Test the Standard implementations of the business transactions.
0:      */
0:     public void testStandardOperations() throws Exception
0:     {
0:         operationsTest(new Standard(getConnection()));
0:     }
0:     /**
0:      * Run a standard set of tests against an implementation
0:      * of Operations using the OperationsTester class.
0:      */
0:     private static void operationsTest(Operations ops) throws Exception
0:     {
0:         OperationsTester tester = new OperationsTester(ops);
0:         tester.test();
0:     }
0:     
0:     /**
0:      * Run a Order Entry script.
0:      */
0:     private void script(String name) throws UnsupportedEncodingException, SQLException, PrivilegedActionException, IOException {
0:         
0:         String script = "org/apache/derbyTesting/system/oe/schema/" + name;
0:         int errorCount = runScript(script,"US-ASCII");
0:         assertEquals("Errors in script ",0, errorCount);
0:     }
0: }
============================================================================