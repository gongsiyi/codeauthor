1:9f60172: 
1:b7730e4: /*
1:12988c7: 
1:b7730e4:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission
1:12988c7: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:12988c7: 
1:b7730e4: 	  http://www.apache.org/licenses/LICENSE-2.0
1:12988c7: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:12988c7: 
1:b7730e4:  */
1:12988c7: 
1:b7730e4: package org.apache.derby.iapi.sql.dictionary;
1:12988c7: 
1:b7730e4: import org.apache.derby.iapi.error.StandardException;
1:b7730e4: import org.apache.derby.catalog.UUID;
1:b7730e4: import org.apache.derby.iapi.sql.conn.Authorizer;
1:eb8b3a2: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:b7730e4: import org.apache.derby.iapi.reference.SQLState;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;
1:b7730e4: import org.apache.derby.iapi.store.access.TransactionController;
1:12988c7: import org.apache.derby.iapi.sql.Activation;
1:eb38311: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1:e4caed2: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:e4caed2: import org.apache.derby.iapi.services.context.ContextManager;
1:b7730e4: /**
1:428ad73:  * This class describes a routine execute permission
1:428ad73:  * required by a statement.
1:b7730e4:  */
1:12988c7: 
1:428ad73: public final class StatementRoutinePermission extends StatementPermission
2:b7730e4: {
1:428ad73: 	private UUID routineUUID;
1:12988c7: 
1:b7730e4: 	public StatementRoutinePermission( UUID routineUUID)
1:b7730e4: 	{
1:b7730e4: 		this.routineUUID = routineUUID;
2:12988c7: 	}
1:eb38311: 									 
1:2d2e717: 	/**
1:8875d69: 	 * Return routine UUID for this access descriptor
1:8875d69: 	 *
1:8875d69: 	 * @return	Routine UUID
1:8875d69: 	 */
1:8875d69: 	public UUID getRoutineUUID()
1:8875d69: 	{
1:8875d69: 		return routineUUID;
1:eb38311: 	}
1:8875d69: 
1:8875d69: 	/**
1:eb8b3a2: 	 * @see StatementPermission#check
1:b7730e4: 	 */
1:eb8b3a2: 	public void check( LanguageConnectionContext lcc,
1:12988c7: 					   boolean forGrant,
1:12988c7: 					   Activation activation) throws StandardException
1:b7730e4: 	{
1:9f60172:         genericCheck( lcc, forGrant, activation, "EXECUTE" );
1:8875d69: 	}
1:12988c7: 
1:98c7520: 	/**
1:98c7520: 	 * @see StatementPermission#isCorrectPermission
1:98c7520: 	 */
1:98c7520:     public boolean isCorrectPermission( PermissionsDescriptor raw )
1:98c7520:     {
1:98c7520:         if ( (raw == null) || !( raw instanceof RoutinePermsDescriptor) ) { return false; }
1:12988c7: 
1:98c7520:         RoutinePermsDescriptor pd = (RoutinePermsDescriptor) raw;
1:12988c7:         
1:98c7520:         return pd.getHasExecutePermission();
1:12988c7:     }
1:12988c7: 
1:98c7520: 	/**
1:98c7520: 	 * @see StatementPermission#getPrivilegedObject
1:98c7520: 	 */
1:98c7520:     public PrivilegedSQLObject getPrivilegedObject( DataDictionary dd ) throws StandardException
1:98c7520:     { return dd.getAliasDescriptor( routineUUID); }
1:12988c7: 
1:b7730e4: 	/**
1:2d2e717: 	 * @see StatementPermission#getPermissionDescriptor
1:2d2e717: 	 */
1:2d2e717: 	public PermissionsDescriptor getPermissionDescriptor(String authid, DataDictionary dd)
1:2d2e717: 	throws StandardException
1:2d2e717: 	{
1:2d2e717: 		return dd.getRoutinePermissions(routineUUID,authid);
1:12988c7: 	}
1:12988c7: 
1:98c7520: 	/**
1:98c7520: 	 * @see StatementPermission#getObjectType
1:98c7520: 	 */
1:98c7520:     public String getObjectType() { return "ROUTINE"; }
1:12988c7: 
1:12988c7: 	public String toString()
1:12988c7: 	{
1:12988c7: 		return "StatementRoutinePermission: " + routineUUID;
1:12988c7: 	}
1:12988c7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         genericCheck( lcc, forGrant, activation, "EXECUTE" );
commit:e4caed2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.services.context.ContextManager;
/////////////////////////////////////////////////////////////////////////
0: 				// Also add a dependency on the role (qua provider), so that if
0: 				// role is no longer available to the current user (e.g. grant
0: 				// is revoked, role is dropped, another role has been set), we
0: 				// are able to invalidate the ps or activation (the latter is
0: 				// used if the current role changes).
0: 				DependencyManager dm = dd.getDependencyManager();
0: 				RoleGrantDescriptor rgd = dd.getRoleDefinitionDescriptor(role);
0: 				ContextManager cm = lcc.getContextManager();
0: 				dm.addDependency(ps, rgd, cm);
0: 				dm.addDependency(activation, rgd, cm);
commit:eb38311
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
/////////////////////////////////////////////////////////////////////////
0: 		ExecPreparedStatement ps = activation.getPreparedStatement();
/////////////////////////////////////////////////////////////////////////
0: 		// Since no permission exists for the current user or PUBLIC,
/////////////////////////////////////////////////////////////////////////
0: 			// session, is lazily set to none when it is attemped
/////////////////////////////////////////////////////////////////////////
1: 
0: 			if (resolved /* using a role*/) {
0: 				// Also add a dependency on the role (qua provider),
0: 				// so that if role is no longer available to the
0: 				// current user (e.g. grant is revoked, role is
0: 				// dropped, another role has been set), we are able to
0: 				// invalidate the the ps.
0: 				//
0: 				// FIXME: Rather invalidate Activation so other
0: 				// sessions sharing the same ps are not impacted!!
0: 				dd.getDependencyManager().
0: 					addDependency(ps, dd.getRoleDefinitionDescriptor(role),
0: 								  lcc.getContextManager());
1: 			}
commit:8875d69
/////////////////////////////////////////////////////////////////////////
1: 	 * Return routine UUID for this access descriptor
1: 	 *
1: 	 * @return	Routine UUID
1: 	 */
1: 	public UUID getRoutineUUID()
1: 	{
1: 		return routineUUID;
1: 	}
1: 
1: 	/**
commit:12988c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Activation;
/////////////////////////////////////////////////////////////////////////
1: 					   boolean forGrant,
1: 					   Activation activation) throws StandardException
/////////////////////////////////////////////////////////////////////////
0: 		if (perms != null && perms.getHasExecutePermission()) {
0: 			// The user or PUBLIC has execute permission, all is well.
0: 			return;
1: 		}
1: 
0: 		boolean resolved = false;
1: 
0: 		// Since permission does not exists for the current user or PUBLIC,
0: 		// check if a permission exists for the current role (if set).
0: 		String role = lcc.getCurrentRoleId(activation);
1: 
0: 		if (role != null) {
1: 
0: 			// Check that role is still granted to current user or
0: 			// to PUBLIC: A revoked role which is current for this
0: 			// session, is lazily set to none when it is attempted
0: 			// used.
0: 			String dbo = dd.getAuthorizationDatabaseOwner();
0: 			RoleGrantDescriptor rd = dd.getRoleGrantDescriptor
0: 				(role, authorizationId, dbo);
1: 
0: 			if (rd == null) {
0: 				rd = dd.getRoleGrantDescriptor(
0: 					role,
0: 					Authorizer.PUBLIC_AUTHORIZATION_ID,
0: 					dbo);
1: 			}
1: 
0: 			if (rd == null) {
0: 				// We have lost the right to set this role, so we can't
0: 				// make use of any permission granted to it or its
0: 				// ancestors.
0: 				lcc.setCurrentRole(activation, null);
0: 			} else {
0: 				// The current role is OK, so we can make use of
0: 				// any permission granted to it.
0: 				//
0: 				// Look at the current role and, if necessary, the
0: 				// transitive closure of roles granted to current role to
0: 				// see if permission has been granted to any of the
0: 				// applicable roles.
1: 
0: 				RoleClosureIterator rci =
0: 					dd.createRoleClosureIterator
0: 					(activation.getTransactionController(),
0: 					 role, true /* inverse relation*/);
1: 
0: 				String r;
0: 				while (!resolved && (r = rci.next()) != null) {
0: 					perms = dd.
0: 						getRoutinePermissions(routineUUID, r);
1: 
0: 					if (perms != null &&
0: 							perms.getHasExecutePermission()) {
0: 						resolved = true;
1: 					}
1: 				}
1: 			}
1: 		}
1: 
0: 		if (!resolved) {
1: 
0: 				throw StandardException.newException(
0: 					SQLState.AUTH_INTERNAL_BAD_UUID, "routine");
1: 
0: 			SchemaDescriptor sd = dd.getSchemaDescriptor(
0: 				ad.getSchemaUUID(), tc);
1: 
0: 				throw StandardException.newException(
0: 					SQLState.AUTH_INTERNAL_BAD_UUID, "schema");
1: 
0: 			throw StandardException.newException(
0: 				(forGrant
0: 				 ? SQLState.AUTH_NO_EXECUTE_PERMISSION_FOR_GRANT
0: 				 : SQLState.AUTH_NO_EXECUTE_PERMISSION),
0: 				authorizationId,
0: 				ad.getDescriptorType(),
0: 				sd.getSchemaName(),
0: 				ad.getDescriptorName());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 	public String toString()
1: 	{
1: 		return "StatementRoutinePermission: " + routineUUID;
0: 	}
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:98c7520
/////////////////////////////////////////////////////////////////////////
0:         genericCheck( lcc, authorizationId, forGrant, activation, "EXECUTE" );
0: 	}
1: 	/**
1: 	 * @see StatementPermission#isCorrectPermission
1: 	 */
1:     public boolean isCorrectPermission( PermissionsDescriptor raw )
1:     {
1:         if ( (raw == null) || !( raw instanceof RoutinePermsDescriptor) ) { return false; }
1:         RoutinePermsDescriptor pd = (RoutinePermsDescriptor) raw;
0:         
1:         return pd.getHasExecutePermission();
0:     }
1: 	/**
1: 	 * @see StatementPermission#getPrivilegedObject
1: 	 */
1:     public PrivilegedSQLObject getPrivilegedObject( DataDictionary dd ) throws StandardException
1:     { return dd.getAliasDescriptor( routineUUID); }
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * @see StatementPermission#getObjectType
1: 	 */
1:     public String getObjectType() { return "ROUTINE"; }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:428ad73
/////////////////////////////////////////////////////////////////////////
1:  * This class describes a routine execute permission
1:  * required by a statement.
1: public final class StatementRoutinePermission extends StatementPermission
1: 	private UUID routineUUID;
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
0: 
1: 	/**
1: 	 * @see StatementPermission#getPermissionDescriptor
1: 	 */
1: 	public PermissionsDescriptor getPermissionDescriptor(String authid, DataDictionary dd)
1: 	throws StandardException
1: 	{
1: 		return dd.getRoutinePermissions(routineUUID,authid);
0: 	}
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:eb8b3a2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
/////////////////////////////////////////////////////////////////////////
1: 	 * @see StatementPermission#check
1: 	public void check( LanguageConnectionContext lcc,
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 		
commit:70a12d9
/////////////////////////////////////////////////////////////////////////
0: 			perms = dd.getRoutinePermissions(routineUUID, Authorizer.PUBLIC_AUTHORIZATION_ID);
0: 
0: 		if( perms == null || ! perms.getHasExecutePermission())
commit:c45f5b1
/////////////////////////////////////////////////////////////////////////
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission
0: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
0: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
0: 
1:  */
0: 
1: package org.apache.derby.iapi.sql.dictionary;
0: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;
1: import org.apache.derby.iapi.store.access.TransactionController;
0: 
1: /**
0:  * This class describes a routine permission used (required) by a statement.
1:  */
0: 
0: public class StatementRoutinePermission extends StatementPermission
1: {
0: 	protected UUID routineUUID;
0: 
1: 	public StatementRoutinePermission( UUID routineUUID)
1: 	{
1: 		this.routineUUID = routineUUID;
0: 	}
0: 									 
1: 	/**
0: 	 * @param tc the TransactionController
0: 	 * @param dd A DataDictionary
0: 	 * @param authorizationId A user
0: 	 * @param forGrant
0: 	 *
0: 	 * @exception StandardException if the permission has not been granted
1: 	 */
0: 	public void check( TransactionController tc,
0: 					   DataDictionary dd,
0: 					   String authorizationId,
0: 					   boolean forGrant) throws StandardException
1: 	{
0: 		RoutinePermsDescriptor perms = dd.getRoutinePermissions( routineUUID, authorizationId);
0: 		if( perms == null || ! perms.getHasExecutePermission())
1: 		{
0: 			AliasDescriptor ad = dd.getAliasDescriptor( routineUUID);
0: 			if( ad == null)
0: 				throw StandardException.newException( SQLState.AUTH_INTERNAL_BAD_UUID, "routine");
0: 			SchemaDescriptor sd = dd.getSchemaDescriptor( ad.getSchemaUUID(), tc);
0: 			if( sd == null)
0: 				throw StandardException.newException( SQLState.AUTH_INTERNAL_BAD_UUID, "schema");
0: 			throw StandardException.newException( forGrant ? SQLState.AUTH_NO_EXECUTE_PERMISSION_FOR_GRANT
0: 												  : SQLState.AUTH_NO_EXECUTE_PERMISSION,
0: 												  authorizationId,
0: 												  ad.getDescriptorType(),
0: 												  sd.getSchemaName(),
0: 												  ad.getDescriptorName());
0: 		}
0: 	} // end of check
0: 
0: }
============================================================================