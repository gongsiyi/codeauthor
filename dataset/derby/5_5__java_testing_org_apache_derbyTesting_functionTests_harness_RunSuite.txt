1:67614ad: /* 
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.RunSuite
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:67614ad: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:ad093f2: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
45:f68f62f: 
2:67614ad:  */
1:f68f62f: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import org.apache.derby.tools.sysinfo;
1:67614ad: import java.io.File;
1:67614ad: import java.io.InputStream;
1:67614ad: import java.io.InputStreamReader;
1:67614ad: import java.io.BufferedReader;
1:67614ad: import java.io.FileReader;
1:67614ad: import java.io.FileInputStream;
1:67614ad: import java.io.FileOutputStream;
1:67614ad: import java.io.BufferedOutputStream;
1:67614ad: import java.io.BufferedWriter;
1:67614ad: import java.io.FileWriter;
1:67614ad: import java.io.PrintWriter;
1:67614ad: import java.io.IOException;
1:67614ad: import java.io.FileNotFoundException;
1:67614ad: import java.lang.ClassNotFoundException;
1:67614ad: import java.sql.Timestamp;
1:67614ad: import java.util.Enumeration;
1:67614ad: import java.util.Properties;
1:67614ad: import java.util.Vector;
1:67614ad: import java.util.StringTokenizer;
1:67614ad: 
1:67614ad: public class RunSuite
1:67614ad: {
1:67614ad: 
1:67614ad:     static final boolean verbose=true;
1:67614ad: 
1:67614ad:     static String suites; // list of subsuites in this suite
1:3f5c48a:     static Vector<String> suitesToRun; // Vector of suites to run
1:67614ad: 
1:67614ad:     // Properties which may be specified
1:67614ad: 	static String jvmName = "";
1:67614ad: 	static String javaCmd = "java";
1:67614ad: 	static String jvmflags = ""; // jvm flags as one string
1:67614ad: 	static String javaVersion;
1:67614ad: 	static String classpath;
1:67614ad: 	static String classpathServer;
1:67614ad: 	static String testJavaFlags = ""; // formerly systest_javaflags
1:c1cd0b7: 	static String testSpecialProps = ""; 
1:67614ad: 	static String userdir;
1:67614ad: 	static String framework;
1:67614ad: 	static String runwithibmjvm;
1:67614ad: 	static String excludeJCC;
1:67614ad: 	static boolean useprocess = true;
1:67614ad: 	static boolean skipsed = false;
1:67614ad: 	static String systemdiff = "false";
1:67614ad: 	static String topSuiteName = "";
1:67614ad: 	static String outputdir; // location of output (default is userdir)
1:67614ad: 	static String outcopy = "false"; // true if support files should go to outDir
1:67614ad: 	static String canondir; // location of master dir (default is master)
1:67614ad: 	static String bootcp; //  path for j9 bootclasspath setting
1:67614ad: 	static String serverJvm; //  path for j9 bootclasspath setting
1:5ff5941: 	static String hostName; // needs to be settable for IPV6 testing; localhost otherwise. 
1:fb605fe: 	static String testEncoding; // setting the encoding.
1:67614ad: 	static String ijdefaultResourcePackage; // for ij tests only
1:67614ad: 	static String debug; // for setting verbose mode to pass down to RunTest
1:67614ad:     static String timeout; // to allow killing a hanging test
1:67614ad:     static String shutdownurl; //used mainly by useprocess=false tests
1:67614ad: 	static String reportstderr; // can set to disable (to turn off JIT errors, etc.)
1:67614ad: 	static Properties suiteProperties;
1:67614ad: 	static Properties specialProperties;
1:67614ad: 
1:67614ad: 	// Output variables
1:67614ad:     static PrintWriter pwOut = null; // for writing suite output
1:67614ad:     static File outDir; // test out dir
1:67614ad:     static File runDir; // where the suite/tests are run
1:67614ad:     static File outFile; // suite output file
1:67614ad: 
1:67614ad: 	public static void main(String[] args) throws Exception
1:67614ad: 	{
1:67614ad: 		if ((System.getProperty("java.vm.name") != null) && System.getProperty("java.vm.name").equals("J9"))
1:67614ad: 		{
1:67614ad: 		 		javaCmd = "j9";
1:67614ad: 				String javaHome = System.getProperty("java.home");
1:67614ad: 		}
1:67614ad: 		String j9config = System.getProperty("com.ibm.oti.configuration");
1:67614ad: 		if (j9config != null) 
1:ad093f2: 			if (j9config.equals("foun10")) 
1:67614ad: 				jvmName="j9_foundation";
1:e45787f: 			else if (j9config.equals("foun11")) 
1:e45787f: 				jvmName="j9_foundation11";
1:67614ad: 			else if (j9config.equals("max"))
1:67614ad: 				jvmName="j9_13";
1:31cc815: 			else if (j9config.equals("dee"))
1:31cc815: 				jvmName="j9dee15";
1:67614ad: 
1:67614ad: 	    String suiteName = args[0];
1:67614ad: 	    if ( suiteName == null )
1:67614ad: 	    {
1:67614ad: 	        System.out.println("No suite name argument.");
1:67614ad: 	        System.exit(1);
1:67614ad: 	    }
1:67614ad: 	    topSuiteName = suiteName;
1:67614ad: 	    System.out.println("Top suite: " + suiteName);
1:67614ad: 
1:67614ad: 	    // suiteName may be one suite or a list of suites
1:3f5c48a:         suitesToRun = new Vector<String>();
1:67614ad: 
1:67614ad:         // Get properties set in the suite's properties file
1:67614ad: 		suiteProperties = getSuiteProperties(suiteName, true);
1:67614ad: 
1:67614ad: 		// There may be system properties which will override
1:67614ad: 		// the suiteProperties. This will make it easier when you
1:67614ad: 		// do not want to edit the suite props for a special case
1:67614ad: 		getSystemProperties();
1:67614ad: 
1:67614ad:         // Get any special properties that are not the usual
1:67614ad:         // expected properties (we separate these from suiteProperties
1:67614ad:         // to avoid conflicts)
1:67614ad:         specialProperties =
1:67614ad:             SpecialFlags.getSpecialProperties(suiteProperties);
1:67614ad: 
1:67614ad:         // Setup the initial output
1:67614ad:         setOutput(suiteName);
1:67614ad: 
1:67614ad:         // Get the current time to write a timestamp
1:67614ad:         String startTime = CurrentTime.getTime();
1:67614ad: 
1:67614ad:         pwOut.println("******* Start Suite: " + suiteName +
1:67614ad:             " " + startTime + " *******");
1:67614ad: 
1:67614ad:         // Write sysinfo to the output file
1:67614ad:         if (useprocess) // doesn't work on Mac
1:67614ad:         {
1:67614ad:             SysInfoLog sysLog= new SysInfoLog();
1:67614ad:             sysLog.exec(jvmName, javaCmd, classpath, framework, pwOut, useprocess);
1:67614ad:         }
1:67614ad:             
1:67614ad:         getSuitesList(suiteName, true);
1:67614ad:         
1:67614ad:         // Get the current time to write a timestamp
1:67614ad:         String endTime = CurrentTime.getTime();
1:67614ad:         pwOut.println("******* End Suite: " + suiteName +
1:67614ad:             " " + endTime + " *******");
1:67614ad:         pwOut.close();
1:67614ad:         
1:67614ad: 		String genrep = System.getProperty("genrep");
1:67614ad: 		boolean isGenrep = true;
1:67614ad: 		if (genrep!=null) isGenrep = "true".equalsIgnoreCase(genrep);
1:67614ad: 		if (isGenrep) 
1:67614ad: 		{
1:67614ad: 		    String[] genargs = new String[6];
1:67614ad: 		    genargs[0] = args[0];
1:67614ad: 		    genargs[1] = jvmName;
1:67614ad: 		    genargs[2] = javaCmd;
1:67614ad: 		    genargs[3] = classpath;
1:67614ad: 		    genargs[4] = framework;
1:67614ad: 		    if (useprocess)
1:67614ad: 		        genargs[5] = "true";
1:67614ad: 		    else
1:67614ad: 		        genargs[5] = "false";
1:67614ad: 		    GenerateReport.main(genargs);
1:67614ad: 		}
1:67614ad: 	}
1:67614ad: 
1:67614ad:     static void getSuitesList(String topparent, boolean isTop)
1:67614ad:         throws Exception, ClassNotFoundException, IOException
1:67614ad:     {
1:67614ad: 		// Get the suite properties if it exists
1:67614ad:         Properties p;
1:67614ad:         if ( (suites == null) || (suites.length()==0) )
1:67614ad:         {
1:67614ad:             // There is a single suite, not a list, just add it
1:67614ad:             if (verbose) System.out.println("Suite to run: " + topparent+":"+topparent);
1:67614ad:             suitesToRun.addElement(topparent+":"+topparent);
1:67614ad:             // Use RunList class to issue the RunTest commands
1:67614ad:             if (verbose) System.out.println("Now do RunList");
1:67614ad:             //System.out.println("skipsed: " + skipsed);
1:67614ad:             RunList rl = new RunList(suitesToRun, runDir, outDir, pwOut,
1:67614ad:                 suiteProperties, specialProperties, topparent);
1:67614ad:             suitesToRun.removeAllElements();
1:67614ad:         }
1:67614ad:         else
1:67614ad:         {
1:67614ad:             isTop = false;
1:67614ad:             // Build the Vector from suites string
1:67614ad: 	        StringTokenizer st = new StringTokenizer(suites);
1:67614ad: 	        String subparent = "";
1:67614ad:             while (st.hasMoreTokens())
1:67614ad:             {
1:67614ad:                 subparent = st.nextToken();
1:67614ad:                 p = getSuiteProperties(subparent, isTop);
1:67614ad:                 if ( (p.getProperty("suites") == null) || (subparent.equals(topparent)) )
1:67614ad:                 {
1:67614ad:                     suitesToRun.addElement(topparent+":"+subparent);
1:67614ad:                     //System.out.println("Add to suitesToRun: " + topparent+":"+subparent);
1:67614ad:                     // Use RunList class to issue the RunTest commands
1:67614ad:                     if (verbose) System.out.println("Now do RunList");
1:67614ad:                     //System.out.println("skipsed: " + skipsed);
1:67614ad:                     RunList rl = new RunList(suitesToRun, runDir, outDir, pwOut,
1:67614ad:                         suiteProperties, specialProperties, topparent);
1:67614ad:                     suitesToRun.removeAllElements();
1:67614ad:                 }
1:67614ad:                 else // This suite also has nested suites
1:67614ad:                 {
1:67614ad:                     String sublist = p.getProperty("suites");
1:67614ad:                     //System.out.println("list for this SubSuite= " + sublist);
1:67614ad:                     BuildSuitesVector(subparent, sublist);
1:67614ad:                     // Use RunList class to issue the RunTest commands
1:67614ad:                     if (verbose) System.out.println("Now do RunList");
1:67614ad:                     //System.out.println("skipsed: " + skipsed);
1:67614ad:                     RunList rl = new RunList(suitesToRun, runDir, outDir, pwOut,
1:67614ad:                         suiteProperties, specialProperties, subparent);
1:67614ad:                     suitesToRun.removeAllElements();                    
1:67614ad:                 }
1:67614ad:             }
1:67614ad:         }
1:67614ad:     }
1:67614ad:     
1:67614ad:     static void BuildSuitesVector(String parent, String subsuites)
1:67614ad:         throws ClassNotFoundException, IOException
1:67614ad:     {
1:67614ad:         Properties p;
1:67614ad:         StringTokenizer st = new StringTokenizer(subsuites);
1:67614ad:         String child = "";
1:67614ad:         while (st.hasMoreTokens())
1:67614ad:         {
1:67614ad:             child = st.nextToken();
1:67614ad:             if (child.equals(parent))
1:67614ad:             {
1:67614ad:                 suitesToRun.addElement(parent+":"+child);
1:67614ad:                 //System.out.println("Add this: " + parent+":"+child);
1:67614ad:             }
1:67614ad:             else
1:67614ad:             {
1:67614ad:                 p = getSuiteProperties(child, false);
1:67614ad:                 if ( p.getProperty("suites") == null )
1:67614ad:                 {
1:67614ad:                     suitesToRun.addElement(parent+":"+child);
1:67614ad:                     //System.out.println("Add this: " + parent+":"+child);
1:67614ad:                 }
1:67614ad:                 else
1:67614ad:                 {
1:67614ad:                     String moresuites = p.getProperty("suites");
1:67614ad:                     BuildSuitesVector(child, moresuites);
1:67614ad:                 }
1:67614ad:             }
1:67614ad:         }
1:67614ad:     }
1:67614ad:             
1:67614ad:     
1:67614ad:     static Properties getSuiteProperties(String suiteName, boolean isTop)
1:67614ad:         throws ClassNotFoundException, IOException
1:67614ad:     {
1:67614ad:         // Locate the suite's config file and get the properties
1:67614ad:         // The file should be in the harness dir or user.dir
1:67614ad:         String suiteProps = "suites" + '/' + suiteName + ".properties";
1:67614ad:         userdir = System.getProperty("user.dir");
1:67614ad: 
1:67614ad:         InputStream is = RunTest.loadTestResource(suiteProps);
1:67614ad:         if (is == null)
1:67614ad:         {
1:67614ad:             // Look in userdir
1:67614ad:             suiteProps = userdir + '/' + suiteName + ".properties";
1:67614ad:             is = RunTest.loadTestResource(suiteProps);
1:67614ad:         }
1:67614ad:         Properties p = new Properties();
1:67614ad:         if (is == null)
1:67614ad:             return p;
1:67614ad: 
1:67614ad:         p.load(is);
1:67614ad:         // The top level suite may have special properties
1:67614ad:         // which get propagated to any subsuites
1:67614ad:         if (isTop == true)
1:67614ad:         {
1:67614ad: 			String tmpjvmName=jvmName;	
1:67614ad:             jvmName = p.getProperty("jvm");
1:67614ad: 		    if ( (jvmName == null) || (jvmName.length()==0) )
1:67614ad: 		    {
1:67614ad: 		        javaVersion = System.getProperty("java.version");
1:67614ad: 		    }
1:67614ad: 		    else
1:67614ad: 		        javaVersion = jvmName;
1:67614ad: 
1:ad093f2:             // for j9, we cannot just use java.version.
1:ad093f2:             String javavmVersion;
1:ad093f2:             if (System.getProperty("java.vm.name").equals("J9"))
1:ad093f2:                 javavmVersion = (System.getProperty("java.vm.version"));
1:ad093f2:             else
1:ad093f2:                 javavmVersion = javaVersion;
1:f68f62f:     		    
1:ad093f2: 		    JavaVersionHolder jvh = new JavaVersionHolder(javavmVersion);
1:67614ad: 		    String majorVersion = jvh.getMajorVersion();
1:67614ad: 		    String minorVersion = jvh.getMinorVersion();
1:67614ad:             int iminor = jvh.getMinorNumber();
1:67614ad:             int imajor = jvh.getMajorNumber();
1:67614ad:     		
1:67614ad: 		    if ( (iminor < 2) && (imajor < 2) )
1:67614ad: 		        jvmName = "currentjvm";
1:67614ad: 		    else
1:67614ad: 		        jvmName = "jdk" + majorVersion + minorVersion;
1:67614ad: 		if ( tmpjvmName != null)
1:67614ad: 			jvmName= tmpjvmName;
1:67614ad:             javaCmd = p.getProperty("javaCmd");
1:67614ad:             jvmflags = p.getProperty("jvmflags");
1:67614ad:             testJavaFlags = p.getProperty("testJavaFlags");
1:c1cd0b7:             testSpecialProps = p.getProperty("testSpecialProps");
1:67614ad:             classpath = p.getProperty("classpath");
1:67614ad:             classpathServer = p.getProperty("classpathServer");
1:67614ad:             framework = p.getProperty("framework");
1:67614ad: 		    String usepr = p.getProperty("useprocess");
1:67614ad: 		    if (usepr != null)
1:67614ad: 		    {
1:67614ad: 		        usepr = usepr.toLowerCase();
1:67614ad: 		        if (usepr.equals("false"))
1:67614ad: 		            useprocess = false;
1:67614ad: 		        else
1:67614ad: 		            useprocess = true;
1:67614ad: 		    }
1:67614ad: 		    else
1:67614ad: 		        useprocess = true;
1:67614ad: 
1:67614ad:             String nosed = p.getProperty("skipsed");
1:67614ad:             if (nosed != null)
1:67614ad:             {
1:67614ad:                 nosed = nosed.toLowerCase();
1:67614ad:                 if (nosed.equals("true"))
1:67614ad:                     skipsed = true;
1:67614ad:                 else
1:67614ad:                     skipsed = false;
1:67614ad:             }
1:67614ad:             else
1:67614ad:                 skipsed = false;
1:67614ad:                 
1:67614ad:             outputdir = p.getProperty("outputdir");
1:67614ad:             canondir = p.getProperty("canondir");
1:67614ad:             bootcp = p.getProperty("bootcp");
1:5ff5941:             hostName = p.getProperty("hostName");
1:67614ad:             serverJvm = p.getProperty("serverJvm");
1:67614ad:             systemdiff = p.getProperty("systemdiff");
1:67614ad:             ijdefaultResourcePackage = p.getProperty("ij.defaultResourcePackage");
1:67614ad:             outcopy = p.getProperty("outcopy");
1:67614ad:             debug = p.getProperty("verbose");
1:67614ad:             reportstderr = p.getProperty("reportstderr");
1:67614ad:             timeout = p.getProperty("timeout");
1:67614ad:             shutdownurl = p.getProperty("shutdownurl");
1:fb605fe:             testEncoding = p.getProperty("derbyTesting.encoding");
1:67614ad:         }
1:67614ad:         suites = p.getProperty("suites");
1:67614ad: 		return p;
1:67614ad:     }
1:67614ad: 
1:67614ad:     private static void getSystemProperties()
1:67614ad:     {
1:67614ad:         // Get any properties specified on the command line
1:67614ad:         // which may not have been specified in the suite prop file
1:67614ad:         Properties sp = System.getProperties();
1:67614ad:         String searchCP = sp.getProperty("ij.searchClassPath");
1:67614ad:         if (searchCP != null)
1:67614ad:             suiteProperties.put("ij.searchClassPath", searchCP);
1:67614ad: 		String frm = sp.getProperty("framework");
1:67614ad: 		if ( (frm != null) && (!frm.equals("embedded")) )
1:67614ad: 		{
1:67614ad: 		    framework = frm;
1:67614ad: 		    suiteProperties.put("framework", framework);
1:67614ad: 		}
1:67614ad: 		String j = sp.getProperty("jvm");
1:67614ad: 		if (j != null)
1:67614ad: 		    suiteProperties.put("jversion", j);
1:67614ad: 		
1:67614ad: 		String jcmd = sp.getProperty("javaCmd");
1:67614ad: 		if ((System.getProperty("java.vm.name") != null) && System.getProperty("java.vm.name").equals("J9"))
1:67614ad: 			jcmd = "j9";
1:67614ad: 		if (jcmd != null)
1:67614ad: 		{
1:67614ad: 		    javaCmd = jcmd;
1:67614ad: 		    suiteProperties.put("javaCmd", javaCmd);
1:67614ad: 		}
1:c92a9b3: 		// get System properties for jvmflags, and put them to the end, thus
1:c92a9b3: 		// when the time comes to have this converted into actual jvm flags
1:c92a9b3: 		// the ones given at the command line will overwrite whatever's in the suite
1:67614ad: 		String jflags = sp.getProperty("jvmflags");
1:adc593f: 		if (jvmflags != null && jvmflags.length() > 0)
1:67614ad: 		{
1:adc593f: 		  //DERBY-4680 Make sure ^ does not get appended to jvmflags
1:adc593f: 		    if (jflags != null && jflags.length() > 0)
1:3b16bbd: 		    		suiteProperties.put("jvmflags", (jvmflags + "^" + jflags));
1:3b16bbd: 			else
1:3b16bbd: 		    		suiteProperties.put("jvmflags", jvmflags);
1:3b16bbd: 		}
1:3b16bbd: 		else
1:3b16bbd: 		{
1:adc593f: 			if (jflags != null && jflags.length() >0)
1:3b16bbd: 		    		suiteProperties.put("jvmflags", jflags);
1:67614ad: 		}
1:67614ad: 		String testflags = sp.getProperty("testJavaFlags");
1:67614ad: 		if (testflags != null)
1:67614ad: 		{
1:adc593f: 		    if (testJavaFlags == null || testJavaFlags.length() == 0)
1:67614ad: 		        testJavaFlags = testflags;
1:67614ad: 		    else // add to testJavaFlags
1:67614ad: 		        testJavaFlags = testJavaFlags + "^" + testflags;
1:67614ad: 		    suiteProperties.put("testJavaFlags", testJavaFlags);
1:67614ad: 		}
1:c1cd0b7: 		String testprops = sp.getProperty("testSpecialProps");
1:c1cd0b7: 		if (testprops != null)
1:c1cd0b7: 		{
1:adc593f: 		    if (testSpecialProps == null || testSpecialProps.length() == 0)
1:c92a9b3: 		        testSpecialProps = testprops;
1:c1cd0b7: 		    else // add to testSpecialProps
1:c1cd0b7: 		        testSpecialProps = testSpecialProps + "^" + testprops;
1:c1cd0b7: 		    suiteProperties.put("testSpecialProps", testSpecialProps);
1:c1cd0b7: 		}
1:67614ad: 		String clpth = sp.getProperty("classpath");
1:67614ad: 		if (clpth != null)
1:67614ad: 		{
1:67614ad: 		    classpath = clpth;
1:67614ad: 		    suiteProperties.put("classpath", classpath);
1:67614ad: 		}
1:67614ad: 		String clsrv = sp.getProperty("classpathServer");
1:67614ad: 		if ( (clsrv != null) && (!clsrv.startsWith("${")) )
1:67614ad: 		{
1:67614ad: 		    classpathServer = clsrv;
1:67614ad: 		    suiteProperties.put("classpathServer", clsrv);
1:67614ad: 		}
1:67614ad: 		String usesys = sp.getProperty("usesystem");
1:67614ad: 		if (usesys != null)
1:67614ad: 		    suiteProperties.put("usesystem", usesys);
1:67614ad: 		String jarf = sp.getProperty("jarfile");
1:67614ad: 		if (jarf != null)
1:67614ad: 		    suiteProperties.put("jarfile", jarf);
1:67614ad: 		String upgtest = sp.getProperty("upgradetest");
1:67614ad: 		if (upgtest != null)
1:67614ad: 		    suiteProperties.put("upgradetest", upgtest);
1:67614ad: 		String rep = sp.getProperty("replication");
1:67614ad: 		if (rep != null)
1:67614ad: 		    suiteProperties.put("replication", rep);
1:67614ad: 		String encrypt = sp.getProperty("encryption");
1:67614ad: 		if (encrypt != null)
1:67614ad: 		    suiteProperties.put("encryption", encrypt);
1:c1cd0b7: 		String encryptAlgorithm = sp.getProperty("testEncryptionAlgorithm");
1:c1cd0b7: 		if (encryptAlgorithm != null)
1:c1cd0b7: 		    suiteProperties.put("testEncryptionAlgorithm", encryptAlgorithm);
1:67614ad: 		String jdk12test = sp.getProperty("jdk12test");
1:67614ad: 		if (jdk12test != null)
1:67614ad: 		    suiteProperties.put("jdk12test", jdk12test);
1:67614ad: 		String jdk12ex = sp.getProperty("jdk12exttest");
1:67614ad: 		if (jdk12ex != null)
1:67614ad: 		    suiteProperties.put("jdk12exttest", jdk12ex);
1:67614ad: 		String runwithibmjvm = sp.getProperty("runwithibmjvm");
1:67614ad: 		if (runwithibmjvm != null)
1:67614ad: 		    suiteProperties.put("runwithibmjvm", runwithibmjvm);
1:67614ad: 		String excludeJCC = sp.getProperty("excludeJCC");
1:67614ad: 		if (excludeJCC != null)
1:67614ad: 		    suiteProperties.put("excludeJCC", excludeJCC);
1:67614ad: 		String keep = sp.getProperty("keepfiles");
1:67614ad: 		if (keep != null)
1:67614ad: 		    suiteProperties.put("keepfiles", keep);
1:67614ad: 		String outd = sp.getProperty("outputdir");
1:67614ad: 		if (outd != null)
1:67614ad: 		{
1:67614ad: 		    outputdir = outd;
1:67614ad: 		    suiteProperties.put("outputdir", outputdir);
1:67614ad: 		}
1:67614ad: 		String canond = sp.getProperty("canondir");
1:67614ad: 		if (canond != null)
1:67614ad: 		{
1:67614ad: 		    canondir = canond;
1:67614ad: 		    suiteProperties.put("canondir", canondir);
1:67614ad: 		}
1:67614ad: 		String j9bootcp = sp.getProperty("bootcp");
1:67614ad: 		if (j9bootcp != null)
1:67614ad: 		{
1:67614ad: 		    bootcp = j9bootcp;
1:67614ad: 		    suiteProperties.put("bootcp", bootcp);
1:67614ad: 		}
1:5ff5941: 		String hostname = sp.getProperty("hostName");
1:5ff5941: 		if (hostname != null)
1:5ff5941: 			suiteProperties.put("hostName", hostname);
1:67614ad: 		String serverJvm = sp.getProperty("serverJvm");
1:67614ad: 		if (serverJvm != null)
1:67614ad: 		    suiteProperties.put("serverJvm", serverJvm);
1:fb605fe: 		String cmlTestEncoding = sp.getProperty("derbyTesting.encoding");
1:fb605fe: 		if (cmlTestEncoding != null)
1:fb605fe: 		    suiteProperties.put("derbyTesting.encoding", cmlTestEncoding);
1:945a0cc:                 String upgradejarpath = sp.getProperty("derbyTesting.jar.path");
1:945a0cc:                 if (upgradejarpath != null)
1:945a0cc:                     suiteProperties.put("derbyTesting.jar.path", upgradejarpath);
1:67614ad: 		String testout = sp.getProperty("testoutname");
1:67614ad: 		if (testout != null)
1:9f04bd3: 		    suiteProperties.put("testoutname", testout);
1:67614ad: 		String mtdir = sp.getProperty("mtestdir"); // used by multi tests
1:67614ad: 		if (mtdir != null)
1:67614ad: 		    suiteProperties.put("mtestdir", mtdir);
1:67614ad: 		String usepr = sp.getProperty("useprocess");
1:67614ad: 		if (usepr != null)
1:67614ad: 		{
1:67614ad: 		    // Some platforms cannot handle process exec
1:67614ad: 		    usepr = usepr.toLowerCase();
1:67614ad: 		    if (usepr.equals("false"))
1:67614ad: 		    {
1:67614ad: 		        useprocess = false;
1:67614ad: 		        suiteProperties.put("useprocess", usepr);
1:67614ad: 		    }
1:67614ad: 		}
1:67614ad: 		
1:67614ad:         String nosed = sp.getProperty("skipsed");
1:67614ad:         if (nosed != null)
1:67614ad:         {
1:67614ad:             // in some cases (like locales, we may want to skip the Sed)
1:67614ad:             nosed = nosed.toLowerCase();
1:67614ad:             if (nosed.equals("true"))
1:67614ad:             {
1:67614ad:                 skipsed = true;
1:67614ad:                 suiteProperties.put("skipsed", nosed);
1:67614ad:             }
1:67614ad:         }
1:67614ad: 		
1:67614ad: 		String sysdiff = sp.getProperty("systemdiff");
1:67614ad: 		if (sysdiff != null)
1:67614ad: 		{
1:67614ad: 		    // Use system diff if set to true
1:67614ad: 		    sysdiff = sysdiff.toLowerCase();
1:67614ad: 		    if (sysdiff.equals("true"))
1:67614ad: 		        suiteProperties.put("systemdiff", "true");
1:67614ad: 		}
1:67614ad: 		String defrespckg = sp.getProperty("ij.defaultResourcePackage");
1:67614ad: 		if (defrespckg != null)
1:67614ad: 		    suiteProperties.put("ij.defaultResourcePackage", defrespckg);
1:67614ad: 		String outcpy = sp.getProperty("outcopy");
1:67614ad: 		if (outcpy != null)
1:67614ad: 		    suiteProperties.put("outcopy", outcpy);
1:67614ad: 		String topsuite = sp.getProperty("suitename");
1:67614ad: 		if (topsuite != null)
1:67614ad: 		    suiteProperties.put("suitename", topsuite);
1:67614ad: 		else
1:67614ad: 		    suiteProperties.put("suitename", topSuiteName);
1:67614ad:         String dbug = sp.getProperty("verbose");
1:67614ad: 		if (dbug != null)
1:67614ad: 		    suiteProperties.put("verbose", dbug);
1:67614ad: 		String reporterr = sp.getProperty("reportstderr");
1:67614ad: 		if (reporterr != null)
1:67614ad: 		    suiteProperties.put("reportstderr", reporterr);
1:67614ad: 		String tout = sp.getProperty("timeout");
1:67614ad: 		if (tout != null)
1:67614ad: 		    suiteProperties.put("timeout", tout);
1:67614ad:     }
1:67614ad: 
1:67614ad:     private static void setOutput(String suiteName)
1:67614ad:         throws ClassNotFoundException, FileNotFoundException, IOException
1:67614ad:     {
1:67614ad:         boolean status = false;
1:67614ad:         // Use the defined output directory or user.dir by default
1:67614ad:         File tmpoutDir;
1:67614ad:         if ( (outputdir == null) || (outputdir.length()==0) )
1:67614ad:         {
1:67614ad:             tmpoutDir =
1:67614ad: 		        new File((new File(userdir)).getCanonicalPath());
1:67614ad: 		}
1:67614ad:         else
1:67614ad:         {
1:67614ad:             tmpoutDir =
1:67614ad:                 new File((new File(outputdir)).getCanonicalPath());
1:67614ad: 		}
1:67614ad:         outDir = tmpoutDir;
1:67614ad:         outDir.mkdir();
1:67614ad:         
1:67614ad: 		// runDir is where the suites/tests are run and where
1:67614ad: 		// any support files or scripts will be expected to live
1:67614ad: 		runDir =
1:67614ad: 		    new File((new File(userdir)).getCanonicalPath());
1:67614ad: 		    
1:67614ad:         // Set the suite property outputdir
1:67614ad:         suiteProperties.put("outputdir", outDir.getCanonicalPath());
1:67614ad: 
1:67614ad:         // Define the final suite summary file file
1:67614ad:         outFile = new File(outDir, suiteName + ".sum");
1:67614ad:         if (outFile.exists())
1:67614ad:             status = outFile.delete();
1:67614ad:  
1:67614ad:         // Define the suite.pass file
1:67614ad:         File passFile = new File(outDir, suiteName + ".pass");
1:67614ad:         if (passFile.exists())
1:67614ad:             status = passFile.delete();
1:67614ad: 
1:67614ad:         // Define the suite.fail file
1:67614ad:         File failFile = new File(outDir, suiteName + ".fail");
1:67614ad:         if (failFile.exists())
1:67614ad:             status = failFile.delete();
1:67614ad: 
1:67614ad:         // Create a PrintWriter for writing env and test info to the diff file
1:67614ad:         pwOut = new PrintWriter
1:67614ad:             (new BufferedWriter(new FileWriter(outFile.getPath()), 4096), true);
1:67614ad:     }
1:67614ad: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:     static Vector<String> suitesToRun; // Vector of suites to run
/////////////////////////////////////////////////////////////////////////
1:         suitesToRun = new Vector<String>();
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:adc593f
/////////////////////////////////////////////////////////////////////////
1: 		if (jvmflags != null && jvmflags.length() > 0)
1: 		  //DERBY-4680 Make sure ^ does not get appended to jvmflags
1: 		    if (jflags != null && jflags.length() > 0)
1: 			if (jflags != null && jflags.length() >0)
1: 		    if (testJavaFlags == null || testJavaFlags.length() == 0)
/////////////////////////////////////////////////////////////////////////
1: 		    if (testSpecialProps == null || testSpecialProps.length() == 0)
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:31cc815
/////////////////////////////////////////////////////////////////////////
1: 			else if (j9config.equals("dee"))
1: 				jvmName="j9dee15";
commit:9f04bd3
/////////////////////////////////////////////////////////////////////////
1: 		    suiteProperties.put("testoutname", testout);
commit:e45787f
/////////////////////////////////////////////////////////////////////////
1: 			else if (j9config.equals("foun11")) 
1: 				jvmName="j9_foundation11";
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:3b16bbd
/////////////////////////////////////////////////////////////////////////
0: 		if (jvmflags != null)
0: 			if (jflags != null)
1: 		    		suiteProperties.put("jvmflags", (jvmflags + "^" + jflags));
1: 			else
1: 		    		suiteProperties.put("jvmflags", jvmflags);
1: 		}
1: 		else
1: 		{
0: 			if (jflags != null)
1: 		    		suiteProperties.put("jvmflags", jflags);
commit:c92a9b3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		// get System properties for jvmflags, and put them to the end, thus
1: 		// when the time comes to have this converted into actual jvm flags
1: 		// the ones given at the command line will overwrite whatever's in the suite
0: 		    jvmflags = jvmflags + "^" + jflags;
/////////////////////////////////////////////////////////////////////////
1: 		        testSpecialProps = testprops;
commit:945a0cc
/////////////////////////////////////////////////////////////////////////
1:                 String upgradejarpath = sp.getProperty("derbyTesting.jar.path");
1:                 if (upgradejarpath != null)
1:                     suiteProperties.put("derbyTesting.jar.path", upgradejarpath);
commit:fb605fe
/////////////////////////////////////////////////////////////////////////
1: 	static String testEncoding; // setting the encoding.
/////////////////////////////////////////////////////////////////////////
1:             testEncoding = p.getProperty("derbyTesting.encoding");
/////////////////////////////////////////////////////////////////////////
1: 		String cmlTestEncoding = sp.getProperty("derbyTesting.encoding");
1: 		if (cmlTestEncoding != null)
1: 		    suiteProperties.put("derbyTesting.encoding", cmlTestEncoding);
commit:5ff5941
/////////////////////////////////////////////////////////////////////////
1: 	static String hostName; // needs to be settable for IPV6 testing; localhost otherwise. 
/////////////////////////////////////////////////////////////////////////
1:             hostName = p.getProperty("hostName");
/////////////////////////////////////////////////////////////////////////
1: 		String hostname = sp.getProperty("hostName");
1: 		if (hostname != null)
1: 			suiteProperties.put("hostName", hostname);
commit:c1cd0b7
/////////////////////////////////////////////////////////////////////////
1: 	static String testSpecialProps = ""; 
/////////////////////////////////////////////////////////////////////////
1:             testSpecialProps = p.getProperty("testSpecialProps");
/////////////////////////////////////////////////////////////////////////
1: 		String testprops = sp.getProperty("testSpecialProps");
1: 		if (testprops != null)
1: 		{
0: 		    if (testSpecialProps == null)
0: 		        testSpecialProps = testflags;
1: 		    else // add to testSpecialProps
1: 		        testSpecialProps = testSpecialProps + "^" + testprops;
1: 		    suiteProperties.put("testSpecialProps", testSpecialProps);
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		String encryptAlgorithm = sp.getProperty("testEncryptionAlgorithm");
1: 		if (encryptAlgorithm != null)
1: 		    suiteProperties.put("testEncryptionAlgorithm", encryptAlgorithm);
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /* 
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import org.apache.derby.tools.sysinfo;
1: import java.io.File;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.io.BufferedReader;
1: import java.io.FileReader;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.BufferedOutputStream;
1: import java.io.BufferedWriter;
1: import java.io.FileWriter;
1: import java.io.PrintWriter;
1: import java.io.IOException;
1: import java.io.FileNotFoundException;
1: import java.lang.ClassNotFoundException;
1: import java.sql.Timestamp;
1: import java.util.Enumeration;
1: import java.util.Properties;
1: import java.util.Vector;
1: import java.util.StringTokenizer;
1: 
1: public class RunSuite
1: { 
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1:     static final boolean verbose=true;
1: 
1:     static String suites; // list of subsuites in this suite
0:     static Vector suitesToRun; // Vector of suites to run
1: 
1:     // Properties which may be specified
1: 	static String jvmName = "";
1: 	static String javaCmd = "java";
1: 	static String jvmflags = ""; // jvm flags as one string
1: 	static String javaVersion;
1: 	static String classpath;
1: 	static String classpathServer;
1: 	static String testJavaFlags = ""; // formerly systest_javaflags
1: 	static String userdir;
1: 	static String framework;
1: 	static String runwithibmjvm;
1: 	static String excludeJCC;
1: 	static boolean useprocess = true;
1: 	static boolean skipsed = false;
1: 	static String systemdiff = "false";
1: 	static String topSuiteName = "";
1: 	static String outputdir; // location of output (default is userdir)
1: 	static String outcopy = "false"; // true if support files should go to outDir
1: 	static String canondir; // location of master dir (default is master)
1: 	static String bootcp; //  path for j9 bootclasspath setting
1: 	static String serverJvm; //  path for j9 bootclasspath setting
1: 	static String ijdefaultResourcePackage; // for ij tests only
1: 	static String debug; // for setting verbose mode to pass down to RunTest
1:     static String timeout; // to allow killing a hanging test
1:     static String shutdownurl; //used mainly by useprocess=false tests
1: 	static String reportstderr; // can set to disable (to turn off JIT errors, etc.)
1: 	static Properties suiteProperties;
1: 	static Properties specialProperties;
1: 
1: 	// Output variables
1:     static PrintWriter pwOut = null; // for writing suite output
1:     static File outDir; // test out dir
1:     static File runDir; // where the suite/tests are run
1:     static File outFile; // suite output file
1: 
1: 	public static void main(String[] args) throws Exception
1: 	{
1: 		if ((System.getProperty("java.vm.name") != null) && System.getProperty("java.vm.name").equals("J9"))
1: 		{
1: 		 		javaCmd = "j9";
1: 				String javaHome = System.getProperty("java.home");
0: 				//jvmflags = "-Xiss16k -Xss512k -Xmso16k -Xmx392388k";
1: 		}
1: 		String j9config = System.getProperty("com.ibm.oti.configuration");
1: 		if (j9config != null) 
0: 			if (j9config.equals("foun")) 
1: 				jvmName="j9_foundation";
1: 			else if (j9config.equals("max"))
1: 				jvmName="j9_13";
1: 
1: 	    String suiteName = args[0];
1: 	    if ( suiteName == null )
1: 	    {
1: 	        System.out.println("No suite name argument.");
1: 	        System.exit(1);
1: 	    }
1: 	    topSuiteName = suiteName;
1: 	    System.out.println("Top suite: " + suiteName);
1: 
1: 	    // suiteName may be one suite or a list of suites
0:         suitesToRun = new Vector();
1: 
1:         // Get properties set in the suite's properties file
1: 		suiteProperties = getSuiteProperties(suiteName, true);
1: 
1: 		// There may be system properties which will override
1: 		// the suiteProperties. This will make it easier when you
1: 		// do not want to edit the suite props for a special case
1: 		getSystemProperties();
1: 
1:         // Get any special properties that are not the usual
1:         // expected properties (we separate these from suiteProperties
1:         // to avoid conflicts)
1:         specialProperties =
1:             SpecialFlags.getSpecialProperties(suiteProperties);
1: 
1:         // Setup the initial output
1:         setOutput(suiteName);
1: 
1:         // Get the current time to write a timestamp
1:         String startTime = CurrentTime.getTime();
1: 
1:         pwOut.println("******* Start Suite: " + suiteName +
1:             " " + startTime + " *******");
1: 
1:         // Write sysinfo to the output file
1:         if (useprocess) // doesn't work on Mac
1:         {
1:             SysInfoLog sysLog= new SysInfoLog();
1:             sysLog.exec(jvmName, javaCmd, classpath, framework, pwOut, useprocess);
1:         }
1:             
1:         getSuitesList(suiteName, true);
1:         
1:         // Get the current time to write a timestamp
1:         String endTime = CurrentTime.getTime();
1:         pwOut.println("******* End Suite: " + suiteName +
1:             " " + endTime + " *******");
1:         pwOut.close();
1:         
1: 		String genrep = System.getProperty("genrep");
1: 		boolean isGenrep = true;
1: 		if (genrep!=null) isGenrep = "true".equalsIgnoreCase(genrep);
1: 		if (isGenrep) 
1: 		{
1: 		    String[] genargs = new String[6];
1: 		    genargs[0] = args[0];
1: 		    genargs[1] = jvmName;
1: 		    genargs[2] = javaCmd;
1: 		    genargs[3] = classpath;
1: 		    genargs[4] = framework;
1: 		    if (useprocess)
1: 		        genargs[5] = "true";
1: 		    else
1: 		        genargs[5] = "false";
1: 		    GenerateReport.main(genargs);
1: 		}
1: 	}
1: 
1:     static void getSuitesList(String topparent, boolean isTop)
1:         throws Exception, ClassNotFoundException, IOException
1:     {
1: 		// Get the suite properties if it exists
1:         Properties p;
1:         if ( (suites == null) || (suites.length()==0) )
1:         {
1:             // There is a single suite, not a list, just add it
1:             if (verbose) System.out.println("Suite to run: " + topparent+":"+topparent);
1:             suitesToRun.addElement(topparent+":"+topparent);
1:             // Use RunList class to issue the RunTest commands
1:             if (verbose) System.out.println("Now do RunList");
1:             //System.out.println("skipsed: " + skipsed);
1:             RunList rl = new RunList(suitesToRun, runDir, outDir, pwOut,
1:                 suiteProperties, specialProperties, topparent);
1:             suitesToRun.removeAllElements();
1:         }
1:         else
1:         {
1:             isTop = false;
1:             // Build the Vector from suites string
1: 	        StringTokenizer st = new StringTokenizer(suites);
1: 	        String subparent = "";
1:             while (st.hasMoreTokens())
1:             {
1:                 subparent = st.nextToken();
1:                 p = getSuiteProperties(subparent, isTop);
1:                 if ( (p.getProperty("suites") == null) || (subparent.equals(topparent)) )
1:                 {
1:                     suitesToRun.addElement(topparent+":"+subparent);
1:                     //System.out.println("Add to suitesToRun: " + topparent+":"+subparent);
1:                     // Use RunList class to issue the RunTest commands
1:                     if (verbose) System.out.println("Now do RunList");
1:                     //System.out.println("skipsed: " + skipsed);
1:                     RunList rl = new RunList(suitesToRun, runDir, outDir, pwOut,
1:                         suiteProperties, specialProperties, topparent);
1:                     suitesToRun.removeAllElements();
1:                 }
1:                 else // This suite also has nested suites
1:                 {
1:                     String sublist = p.getProperty("suites");
1:                     //System.out.println("list for this SubSuite= " + sublist);
1:                     BuildSuitesVector(subparent, sublist);
1:                     // Use RunList class to issue the RunTest commands
1:                     if (verbose) System.out.println("Now do RunList");
1:                     //System.out.println("skipsed: " + skipsed);
1:                     RunList rl = new RunList(suitesToRun, runDir, outDir, pwOut,
1:                         suiteProperties, specialProperties, subparent);
1:                     suitesToRun.removeAllElements();                    
1:                 }
1:             }
1:         }
1:     }
1:     
1:     static void BuildSuitesVector(String parent, String subsuites)
1:         throws ClassNotFoundException, IOException
1:     {
1:         Properties p;
1:         StringTokenizer st = new StringTokenizer(subsuites);
1:         String child = "";
1:         while (st.hasMoreTokens())
1:         {
1:             child = st.nextToken();
1:             if (child.equals(parent))
1:             {
1:                 suitesToRun.addElement(parent+":"+child);
1:                 //System.out.println("Add this: " + parent+":"+child);
1:             }
1:             else
1:             {
1:                 p = getSuiteProperties(child, false);
1:                 if ( p.getProperty("suites") == null )
1:                 {
1:                     suitesToRun.addElement(parent+":"+child);
1:                     //System.out.println("Add this: " + parent+":"+child);
1:                 }
1:                 else
1:                 {
1:                     String moresuites = p.getProperty("suites");
1:                     BuildSuitesVector(child, moresuites);
1:                 }
1:             }
1:         }
1:     }
1:             
1:     
1:     static Properties getSuiteProperties(String suiteName, boolean isTop)
1:         throws ClassNotFoundException, IOException
1:     {
1:         // Locate the suite's config file and get the properties
1:         // The file should be in the harness dir or user.dir
1:         String suiteProps = "suites" + '/' + suiteName + ".properties";
1:         userdir = System.getProperty("user.dir");
1: 
1:         InputStream is = RunTest.loadTestResource(suiteProps);
1:         if (is == null)
1:         {
1:             // Look in userdir
1:             suiteProps = userdir + '/' + suiteName + ".properties";
1:             is = RunTest.loadTestResource(suiteProps);
1:         }
1:         Properties p = new Properties();
1:         if (is == null)
1:             return p;
1: 
1:         p.load(is);
1:         // The top level suite may have special properties
1:         // which get propagated to any subsuites
1:         if (isTop == true)
1:         {
1: 			String tmpjvmName=jvmName;	
1:             jvmName = p.getProperty("jvm");
1: 		    if ( (jvmName == null) || (jvmName.length()==0) )
1: 		    {
1: 		        javaVersion = System.getProperty("java.version");
1: 		    }
1: 		    else
1: 		        javaVersion = jvmName;
1:     		    
0: 		    JavaVersionHolder jvh = new JavaVersionHolder(javaVersion);
1: 		    String majorVersion = jvh.getMajorVersion();
1: 		    String minorVersion = jvh.getMinorVersion();
1:             int iminor = jvh.getMinorNumber();
1:             int imajor = jvh.getMajorNumber();
1:     		
1: 		    if ( (iminor < 2) && (imajor < 2) )
1: 		        jvmName = "currentjvm";
1: 		    else
1: 		        jvmName = "jdk" + majorVersion + minorVersion;
1: 		if ( tmpjvmName != null)
1: 			jvmName= tmpjvmName;
1:             javaCmd = p.getProperty("javaCmd");
1:             jvmflags = p.getProperty("jvmflags");
1:             testJavaFlags = p.getProperty("testJavaFlags");
1:             classpath = p.getProperty("classpath");
1:             classpathServer = p.getProperty("classpathServer");
1:             framework = p.getProperty("framework");
1: 		    String usepr = p.getProperty("useprocess");
1: 		    if (usepr != null)
1: 		    {
1: 		        usepr = usepr.toLowerCase();
1: 		        if (usepr.equals("false"))
1: 		            useprocess = false;
1: 		        else
1: 		            useprocess = true;
1: 		    }
1: 		    else
1: 		        useprocess = true;
1: 
1:             String nosed = p.getProperty("skipsed");
1:             if (nosed != null)
1:             {
1:                 nosed = nosed.toLowerCase();
1:                 if (nosed.equals("true"))
1:                     skipsed = true;
1:                 else
1:                     skipsed = false;
1:             }
1:             else
1:                 skipsed = false;
1:                 
1:             outputdir = p.getProperty("outputdir");
1:             canondir = p.getProperty("canondir");
1:             bootcp = p.getProperty("bootcp");
1:             serverJvm = p.getProperty("serverJvm");
1:             systemdiff = p.getProperty("systemdiff");
1:             ijdefaultResourcePackage = p.getProperty("ij.defaultResourcePackage");
1:             outcopy = p.getProperty("outcopy");
1:             debug = p.getProperty("verbose");
1:             reportstderr = p.getProperty("reportstderr");
1:             timeout = p.getProperty("timeout");
1:             shutdownurl = p.getProperty("shutdownurl");
1:         }
1:         suites = p.getProperty("suites");
1: 		return p;
1:     }
1: 
1:     private static void getSystemProperties()
1:     {
1:         // Get any properties specified on the command line
1:         // which may not have been specified in the suite prop file
1:         Properties sp = System.getProperties();
1:         String searchCP = sp.getProperty("ij.searchClassPath");
1:         if (searchCP != null)
1:             suiteProperties.put("ij.searchClassPath", searchCP);
1: 		String frm = sp.getProperty("framework");
1: 		if ( (frm != null) && (!frm.equals("embedded")) )
1: 		{
1: 		    framework = frm;
1: 		    suiteProperties.put("framework", framework);
1: 		}
1: 		String j = sp.getProperty("jvm");
1: 		if (j != null)
1: 		    suiteProperties.put("jversion", j);
1: 		
1: 		String jcmd = sp.getProperty("javaCmd");
1: 		if ((System.getProperty("java.vm.name") != null) && System.getProperty("java.vm.name").equals("J9"))
1: 			jcmd = "j9";
1: 		if (jcmd != null)
1: 		{
1: 		    javaCmd = jcmd;
1: 		    suiteProperties.put("javaCmd", javaCmd);
1: 		}
1: 		String jflags = sp.getProperty("jvmflags");
0: 		if (jflags != null)
1: 		{
0: 		    jvmflags = jflags;
0: 		    suiteProperties.put("jvmflags", jvmflags);
1: 		}
1: 		String testflags = sp.getProperty("testJavaFlags");
1: 		if (testflags != null)
1: 		{
0: 		    if (testJavaFlags == null)
1: 		        testJavaFlags = testflags;
1: 		    else // add to testJavaFlags
1: 		        testJavaFlags = testJavaFlags + "^" + testflags;
1: 		    suiteProperties.put("testJavaFlags", testJavaFlags);
1: 		}
1: 		String clpth = sp.getProperty("classpath");
1: 		if (clpth != null)
1: 		{
1: 		    classpath = clpth;
1: 		    suiteProperties.put("classpath", classpath);
1: 		}
1: 		String clsrv = sp.getProperty("classpathServer");
1: 		if ( (clsrv != null) && (!clsrv.startsWith("${")) )
1: 		{
1: 		    classpathServer = clsrv;
1: 		    suiteProperties.put("classpathServer", clsrv);
1: 		}
1: 		String usesys = sp.getProperty("usesystem");
1: 		if (usesys != null)
1: 		    suiteProperties.put("usesystem", usesys);
1: 		String jarf = sp.getProperty("jarfile");
1: 		if (jarf != null)
1: 		    suiteProperties.put("jarfile", jarf);
1: 		String upgtest = sp.getProperty("upgradetest");
1: 		if (upgtest != null)
1: 		    suiteProperties.put("upgradetest", upgtest);
1: 		String rep = sp.getProperty("replication");
1: 		if (rep != null)
1: 		    suiteProperties.put("replication", rep);
1: 		String encrypt = sp.getProperty("encryption");
1: 		if (encrypt != null)
1: 		    suiteProperties.put("encryption", encrypt);
1: 		String jdk12test = sp.getProperty("jdk12test");
1: 		if (jdk12test != null)
1: 		    suiteProperties.put("jdk12test", jdk12test);
1: 		String jdk12ex = sp.getProperty("jdk12exttest");
1: 		if (jdk12ex != null)
1: 		    suiteProperties.put("jdk12exttest", jdk12ex);
1: 		String runwithibmjvm = sp.getProperty("runwithibmjvm");
1: 		if (runwithibmjvm != null)
1: 		    suiteProperties.put("runwithibmjvm", runwithibmjvm);
1: 		String excludeJCC = sp.getProperty("excludeJCC");
1: 		if (excludeJCC != null)
1: 		    suiteProperties.put("excludeJCC", excludeJCC);
1: 		String keep = sp.getProperty("keepfiles");
1: 		if (keep != null)
1: 		    suiteProperties.put("keepfiles", keep);
1: 		String outd = sp.getProperty("outputdir");
1: 		if (outd != null)
1: 		{
1: 		    outputdir = outd;
1: 		    suiteProperties.put("outputdir", outputdir);
1: 		}
1: 		String canond = sp.getProperty("canondir");
1: 		if (canond != null)
1: 		{
1: 		    canondir = canond;
1: 		    suiteProperties.put("canondir", canondir);
1: 		}
1: 		String j9bootcp = sp.getProperty("bootcp");
1: 		if (j9bootcp != null)
1: 		{
1: 		    bootcp = j9bootcp;
1: 		    suiteProperties.put("bootcp", bootcp);
1: 		}
1: 		String serverJvm = sp.getProperty("serverJvm");
1: 		if (serverJvm != null)
1: 		    suiteProperties.put("serverJvm", serverJvm);
1: 		String testout = sp.getProperty("testoutname");
1: 		if (testout != null)
0: 		    suiteProperties.put("testoutname", testout); // toursDemo
1: 		String mtdir = sp.getProperty("mtestdir"); // used by multi tests
1: 		if (mtdir != null)
1: 		    suiteProperties.put("mtestdir", mtdir);
1: 		String usepr = sp.getProperty("useprocess");
1: 		if (usepr != null)
1: 		{
1: 		    // Some platforms cannot handle process exec
1: 		    usepr = usepr.toLowerCase();
1: 		    if (usepr.equals("false"))
1: 		    {
1: 		        useprocess = false;
1: 		        suiteProperties.put("useprocess", usepr);
1: 		    }
1: 		}
1: 		
1:         String nosed = sp.getProperty("skipsed");
1:         if (nosed != null)
1:         {
1:             // in some cases (like locales, we may want to skip the Sed)
1:             nosed = nosed.toLowerCase();
1:             if (nosed.equals("true"))
1:             {
1:                 skipsed = true;
1:                 suiteProperties.put("skipsed", nosed);
1:             }
1:         }
1: 		
1: 		String sysdiff = sp.getProperty("systemdiff");
1: 		if (sysdiff != null)
1: 		{
1: 		    // Use system diff if set to true
1: 		    sysdiff = sysdiff.toLowerCase();
1: 		    if (sysdiff.equals("true"))
1: 		        suiteProperties.put("systemdiff", "true");
1: 		}
1: 		String defrespckg = sp.getProperty("ij.defaultResourcePackage");
1: 		if (defrespckg != null)
1: 		    suiteProperties.put("ij.defaultResourcePackage", defrespckg);
1: 		String outcpy = sp.getProperty("outcopy");
1: 		if (outcpy != null)
1: 		    suiteProperties.put("outcopy", outcpy);
1: 		String topsuite = sp.getProperty("suitename");
1: 		if (topsuite != null)
1: 		    suiteProperties.put("suitename", topsuite);
1: 		else
1: 		    suiteProperties.put("suitename", topSuiteName);
1:         String dbug = sp.getProperty("verbose");
1: 		if (dbug != null)
1: 		    suiteProperties.put("verbose", dbug);
1: 		String reporterr = sp.getProperty("reportstderr");
1: 		if (reporterr != null)
1: 		    suiteProperties.put("reportstderr", reporterr);
1: 		String tout = sp.getProperty("timeout");
1: 		if (tout != null)
1: 		    suiteProperties.put("timeout", tout);
1:     }
1: 
1:     private static void setOutput(String suiteName)
1:         throws ClassNotFoundException, FileNotFoundException, IOException
1:     {
1:         boolean status = false;
1:         // Use the defined output directory or user.dir by default
1:         File tmpoutDir;
1:         if ( (outputdir == null) || (outputdir.length()==0) )
1:         {
1:             tmpoutDir =
1: 		        new File((new File(userdir)).getCanonicalPath());
1: 		}
1:         else
1:         {
1:             tmpoutDir =
1:                 new File((new File(outputdir)).getCanonicalPath());
1: 		}
1:         outDir = tmpoutDir;
1:         outDir.mkdir();
1:         
1: 		// runDir is where the suites/tests are run and where
1: 		// any support files or scripts will be expected to live
1: 		runDir =
1: 		    new File((new File(userdir)).getCanonicalPath());
1: 		    
1:         // Set the suite property outputdir
1:         suiteProperties.put("outputdir", outDir.getCanonicalPath());
1: 
1:         // Define the final suite summary file file
1:         outFile = new File(outDir, suiteName + ".sum");
1:         if (outFile.exists())
1:             status = outFile.delete();
1:  
1:         // Define the suite.pass file
1:         File passFile = new File(outDir, suiteName + ".pass");
1:         if (passFile.exists())
1:             status = passFile.delete();
1: 
1:         // Define the suite.fail file
1:         File failFile = new File(outDir, suiteName + ".fail");
1:         if (failFile.exists())
1:             status = failFile.delete();
1: 
1:         // Create a PrintWriter for writing env and test info to the diff file
1:         pwOut = new PrintWriter
1:             (new BufferedWriter(new FileWriter(outFile.getPath()), 4096), true);
1:     }
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ad093f2
/////////////////////////////////////////////////////////////////////////
1: 			if (j9config.equals("foun10")) 
/////////////////////////////////////////////////////////////////////////
1: 
1:             // for j9, we cannot just use java.version.
1:             String javavmVersion;
1:             if (System.getProperty("java.vm.name").equals("J9"))
1:                 javavmVersion = (System.getProperty("java.vm.version"));
1:             else
1:                 javavmVersion = javaVersion;
1: 		    JavaVersionHolder jvh = new JavaVersionHolder(javavmVersion);
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /* 
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.RunSuite
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import org.apache.derby.tools.sysinfo;
0: import java.io.File;
0: import java.io.InputStream;
0: import java.io.InputStreamReader;
0: import java.io.BufferedReader;
0: import java.io.FileReader;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
0: import java.io.BufferedOutputStream;
0: import java.io.BufferedWriter;
0: import java.io.FileWriter;
0: import java.io.PrintWriter;
0: import java.io.IOException;
0: import java.io.FileNotFoundException;
0: import java.lang.ClassNotFoundException;
0: import java.sql.Timestamp;
0: import java.util.Enumeration;
0: import java.util.Properties;
0: import java.util.Vector;
0: import java.util.StringTokenizer;
1: 
0: public class RunSuite
0: {
1: 
0:     static final boolean verbose=true;
1: 
0:     static String suites; // list of subsuites in this suite
0:     static Vector suitesToRun; // Vector of suites to run
1: 
0:     // Properties which may be specified
0: 	static String jvmName = "";
0: 	static String javaCmd = "java";
0: 	static String jvmflags = ""; // jvm flags as one string
0: 	static String javaVersion;
0: 	static String classpath;
0: 	static String classpathServer;
0: 	static String testJavaFlags = ""; // formerly systest_javaflags
0: 	static String userdir;
0: 	static String framework;
0: 	static String runwithibmjvm;
0: 	static String excludeJCC;
0: 	static boolean useprocess = true;
0: 	static boolean skipsed = false;
0: 	static String systemdiff = "false";
0: 	static String topSuiteName = "";
0: 	static String outputdir; // location of output (default is userdir)
0: 	static String outcopy = "false"; // true if support files should go to outDir
0: 	static String canondir; // location of master dir (default is master)
0: 	static String bootcp; //  path for j9 bootclasspath setting
0: 	static String serverJvm; //  path for j9 bootclasspath setting
0: 	static String ijdefaultResourcePackage; // for ij tests only
0: 	static String debug; // for setting verbose mode to pass down to RunTest
0:     static String timeout; // to allow killing a hanging test
0:     static String shutdownurl; //used mainly by useprocess=false tests
0: 	static String reportstderr; // can set to disable (to turn off JIT errors, etc.)
0: 	static Properties suiteProperties;
0: 	static Properties specialProperties;
1: 
0: 	// Output variables
0:     static PrintWriter pwOut = null; // for writing suite output
0:     static File outDir; // test out dir
0:     static File runDir; // where the suite/tests are run
0:     static File outFile; // suite output file
1: 
0: 	public static void main(String[] args) throws Exception
0: 	{
0: 		if ((System.getProperty("java.vm.name") != null) && System.getProperty("java.vm.name").equals("J9"))
0: 		{
0: 		 		javaCmd = "j9";
0: 				String javaHome = System.getProperty("java.home");
0: 				//jvmflags = "-Xiss16k -Xss512k -Xmso16k -Xmx392388k";
0: 		}
0: 		String j9config = System.getProperty("com.ibm.oti.configuration");
0: 		if (j9config != null) 
0: 			if (j9config.equals("foun")) 
0: 				jvmName="j9_foundation";
0: 			else if (j9config.equals("max"))
0: 				jvmName="j9_13";
1: 
0: 	    String suiteName = args[0];
0: 	    if ( suiteName == null )
0: 	    {
0: 	        System.out.println("No suite name argument.");
0: 	        System.exit(1);
0: 	    }
0: 	    topSuiteName = suiteName;
0: 	    System.out.println("Top suite: " + suiteName);
1: 
0: 	    // suiteName may be one suite or a list of suites
0:         suitesToRun = new Vector();
1: 
0:         // Get properties set in the suite's properties file
0: 		suiteProperties = getSuiteProperties(suiteName, true);
1: 
0: 		// There may be system properties which will override
0: 		// the suiteProperties. This will make it easier when you
0: 		// do not want to edit the suite props for a special case
0: 		getSystemProperties();
1: 
0:         // Get any special properties that are not the usual
0:         // expected properties (we separate these from suiteProperties
0:         // to avoid conflicts)
0:         specialProperties =
0:             SpecialFlags.getSpecialProperties(suiteProperties);
1: 
0:         // Setup the initial output
0:         setOutput(suiteName);
1: 
0:         // Get the current time to write a timestamp
0:         String startTime = CurrentTime.getTime();
1: 
0:         pwOut.println("******* Start Suite: " + suiteName +
0:             " " + startTime + " *******");
1: 
0:         // Write sysinfo to the output file
0:         if (useprocess) // doesn't work on Mac
0:         {
0:             SysInfoLog sysLog= new SysInfoLog();
0:             sysLog.exec(jvmName, javaCmd, classpath, framework, pwOut, useprocess);
0:         }
1:             
0:         getSuitesList(suiteName, true);
1:         
0:         // Get the current time to write a timestamp
0:         String endTime = CurrentTime.getTime();
0:         pwOut.println("******* End Suite: " + suiteName +
0:             " " + endTime + " *******");
0:         pwOut.close();
1:         
0: 		String genrep = System.getProperty("genrep");
0: 		boolean isGenrep = true;
0: 		if (genrep!=null) isGenrep = "true".equalsIgnoreCase(genrep);
0: 		if (isGenrep) 
0: 		{
0: 		    String[] genargs = new String[6];
0: 		    genargs[0] = args[0];
0: 		    genargs[1] = jvmName;
0: 		    genargs[2] = javaCmd;
0: 		    genargs[3] = classpath;
0: 		    genargs[4] = framework;
0: 		    if (useprocess)
0: 		        genargs[5] = "true";
0: 		    else
0: 		        genargs[5] = "false";
0: 		    GenerateReport.main(genargs);
0: 		}
0: 	}
1: 
0:     static void getSuitesList(String topparent, boolean isTop)
0:         throws Exception, ClassNotFoundException, IOException
0:     {
0: 		// Get the suite properties if it exists
0:         Properties p;
0:         if ( (suites == null) || (suites.length()==0) )
0:         {
0:             // There is a single suite, not a list, just add it
0:             if (verbose) System.out.println("Suite to run: " + topparent+":"+topparent);
0:             suitesToRun.addElement(topparent+":"+topparent);
0:             // Use RunList class to issue the RunTest commands
0:             if (verbose) System.out.println("Now do RunList");
0:             //System.out.println("skipsed: " + skipsed);
0:             RunList rl = new RunList(suitesToRun, runDir, outDir, pwOut,
0:                 suiteProperties, specialProperties, topparent);
0:             suitesToRun.removeAllElements();
0:         }
0:         else
0:         {
0:             isTop = false;
0:             // Build the Vector from suites string
0: 	        StringTokenizer st = new StringTokenizer(suites);
0: 	        String subparent = "";
0:             while (st.hasMoreTokens())
0:             {
0:                 subparent = st.nextToken();
0:                 p = getSuiteProperties(subparent, isTop);
0:                 if ( (p.getProperty("suites") == null) || (subparent.equals(topparent)) )
0:                 {
0:                     suitesToRun.addElement(topparent+":"+subparent);
0:                     //System.out.println("Add to suitesToRun: " + topparent+":"+subparent);
0:                     // Use RunList class to issue the RunTest commands
0:                     if (verbose) System.out.println("Now do RunList");
0:                     //System.out.println("skipsed: " + skipsed);
0:                     RunList rl = new RunList(suitesToRun, runDir, outDir, pwOut,
0:                         suiteProperties, specialProperties, topparent);
0:                     suitesToRun.removeAllElements();
0:                 }
0:                 else // This suite also has nested suites
0:                 {
0:                     String sublist = p.getProperty("suites");
0:                     //System.out.println("list for this SubSuite= " + sublist);
0:                     BuildSuitesVector(subparent, sublist);
0:                     // Use RunList class to issue the RunTest commands
0:                     if (verbose) System.out.println("Now do RunList");
0:                     //System.out.println("skipsed: " + skipsed);
0:                     RunList rl = new RunList(suitesToRun, runDir, outDir, pwOut,
0:                         suiteProperties, specialProperties, subparent);
0:                     suitesToRun.removeAllElements();                    
0:                 }
0:             }
0:         }
0:     }
1:     
0:     static void BuildSuitesVector(String parent, String subsuites)
0:         throws ClassNotFoundException, IOException
0:     {
0:         Properties p;
0:         StringTokenizer st = new StringTokenizer(subsuites);
0:         String child = "";
0:         while (st.hasMoreTokens())
0:         {
0:             child = st.nextToken();
0:             if (child.equals(parent))
0:             {
0:                 suitesToRun.addElement(parent+":"+child);
0:                 //System.out.println("Add this: " + parent+":"+child);
0:             }
0:             else
0:             {
0:                 p = getSuiteProperties(child, false);
0:                 if ( p.getProperty("suites") == null )
0:                 {
0:                     suitesToRun.addElement(parent+":"+child);
0:                     //System.out.println("Add this: " + parent+":"+child);
0:                 }
0:                 else
0:                 {
0:                     String moresuites = p.getProperty("suites");
0:                     BuildSuitesVector(child, moresuites);
0:                 }
0:             }
0:         }
0:     }
1:             
1:     
0:     static Properties getSuiteProperties(String suiteName, boolean isTop)
0:         throws ClassNotFoundException, IOException
0:     {
0:         // Locate the suite's config file and get the properties
0:         // The file should be in the harness dir or user.dir
0:         String suiteProps = "suites" + '/' + suiteName + ".properties";
0:         userdir = System.getProperty("user.dir");
1: 
0:         InputStream is = RunTest.loadTestResource(suiteProps);
0:         if (is == null)
0:         {
0:             // Look in userdir
0:             suiteProps = userdir + '/' + suiteName + ".properties";
0:             is = RunTest.loadTestResource(suiteProps);
0:         }
0:         Properties p = new Properties();
0:         if (is == null)
0:             return p;
1: 
0:         p.load(is);
0:         // The top level suite may have special properties
0:         // which get propagated to any subsuites
0:         if (isTop == true)
0:         {
0: 			String tmpjvmName=jvmName;	
0:             jvmName = p.getProperty("jvm");
0: 		    if ( (jvmName == null) || (jvmName.length()==0) )
0: 		    {
0: 		        javaVersion = System.getProperty("java.version");
0: 		    }
0: 		    else
0: 		        javaVersion = jvmName;
1:     		    
0: 		    JavaVersionHolder jvh = new JavaVersionHolder(javaVersion);
0: 		    String majorVersion = jvh.getMajorVersion();
0: 		    String minorVersion = jvh.getMinorVersion();
0:             int iminor = jvh.getMinorNumber();
0:             int imajor = jvh.getMajorNumber();
1:     		
0: 		    if ( (iminor < 2) && (imajor < 2) )
0: 		        jvmName = "currentjvm";
0: 		    else
0: 		        jvmName = "jdk" + majorVersion + minorVersion;
0: 		if ( tmpjvmName != null)
0: 			jvmName= tmpjvmName;
0:             javaCmd = p.getProperty("javaCmd");
0:             jvmflags = p.getProperty("jvmflags");
0:             testJavaFlags = p.getProperty("testJavaFlags");
0:             classpath = p.getProperty("classpath");
0:             classpathServer = p.getProperty("classpathServer");
0:             framework = p.getProperty("framework");
0: 		    String usepr = p.getProperty("useprocess");
0: 		    if (usepr != null)
0: 		    {
0: 		        usepr = usepr.toLowerCase();
0: 		        if (usepr.equals("false"))
0: 		            useprocess = false;
0: 		        else
0: 		            useprocess = true;
0: 		    }
0: 		    else
0: 		        useprocess = true;
1: 
0:             String nosed = p.getProperty("skipsed");
0:             if (nosed != null)
0:             {
0:                 nosed = nosed.toLowerCase();
0:                 if (nosed.equals("true"))
0:                     skipsed = true;
0:                 else
0:                     skipsed = false;
0:             }
0:             else
0:                 skipsed = false;
1:                 
0:             outputdir = p.getProperty("outputdir");
0:             canondir = p.getProperty("canondir");
0:             bootcp = p.getProperty("bootcp");
0:             serverJvm = p.getProperty("serverJvm");
0:             systemdiff = p.getProperty("systemdiff");
0:             ijdefaultResourcePackage = p.getProperty("ij.defaultResourcePackage");
0:             outcopy = p.getProperty("outcopy");
0:             debug = p.getProperty("verbose");
0:             reportstderr = p.getProperty("reportstderr");
0:             timeout = p.getProperty("timeout");
0:             shutdownurl = p.getProperty("shutdownurl");
0:         }
0:         suites = p.getProperty("suites");
0: 		return p;
0:     }
1: 
0:     private static void getSystemProperties()
0:     {
0:         // Get any properties specified on the command line
0:         // which may not have been specified in the suite prop file
0:         Properties sp = System.getProperties();
0:         String searchCP = sp.getProperty("ij.searchClassPath");
0:         if (searchCP != null)
0:             suiteProperties.put("ij.searchClassPath", searchCP);
0: 		String frm = sp.getProperty("framework");
0: 		if ( (frm != null) && (!frm.equals("embedded")) )
0: 		{
0: 		    framework = frm;
0: 		    suiteProperties.put("framework", framework);
0: 		}
0: 		String j = sp.getProperty("jvm");
0: 		if (j != null)
0: 		    suiteProperties.put("jversion", j);
1: 		
0: 		String jcmd = sp.getProperty("javaCmd");
0: 		if ((System.getProperty("java.vm.name") != null) && System.getProperty("java.vm.name").equals("J9"))
0: 			jcmd = "j9";
0: 		if (jcmd != null)
0: 		{
0: 		    javaCmd = jcmd;
0: 		    suiteProperties.put("javaCmd", javaCmd);
0: 		}
0: 		String jflags = sp.getProperty("jvmflags");
0: 		if (jflags != null)
0: 		{
0: 		    jvmflags = jflags;
0: 		    suiteProperties.put("jvmflags", jvmflags);
0: 		}
0: 		String testflags = sp.getProperty("testJavaFlags");
0: 		if (testflags != null)
0: 		{
0: 		    if (testJavaFlags == null)
0: 		        testJavaFlags = testflags;
0: 		    else // add to testJavaFlags
0: 		        testJavaFlags = testJavaFlags + "^" + testflags;
0: 		    suiteProperties.put("testJavaFlags", testJavaFlags);
0: 		}
0: 		String clpth = sp.getProperty("classpath");
0: 		if (clpth != null)
0: 		{
0: 		    classpath = clpth;
0: 		    suiteProperties.put("classpath", classpath);
0: 		}
0: 		String clsrv = sp.getProperty("classpathServer");
0: 		if ( (clsrv != null) && (!clsrv.startsWith("${")) )
0: 		{
0: 		    classpathServer = clsrv;
0: 		    suiteProperties.put("classpathServer", clsrv);
0: 		}
0: 		String usesys = sp.getProperty("usesystem");
0: 		if (usesys != null)
0: 		    suiteProperties.put("usesystem", usesys);
0: 		String jarf = sp.getProperty("jarfile");
0: 		if (jarf != null)
0: 		    suiteProperties.put("jarfile", jarf);
0: 		String upgtest = sp.getProperty("upgradetest");
0: 		if (upgtest != null)
0: 		    suiteProperties.put("upgradetest", upgtest);
0: 		String rep = sp.getProperty("replication");
0: 		if (rep != null)
0: 		    suiteProperties.put("replication", rep);
0: 		String encrypt = sp.getProperty("encryption");
0: 		if (encrypt != null)
0: 		    suiteProperties.put("encryption", encrypt);
0: 		String jdk12test = sp.getProperty("jdk12test");
0: 		if (jdk12test != null)
0: 		    suiteProperties.put("jdk12test", jdk12test);
0: 		String jdk12ex = sp.getProperty("jdk12exttest");
0: 		if (jdk12ex != null)
0: 		    suiteProperties.put("jdk12exttest", jdk12ex);
0: 		String runwithibmjvm = sp.getProperty("runwithibmjvm");
0: 		if (runwithibmjvm != null)
0: 		    suiteProperties.put("runwithibmjvm", runwithibmjvm);
0: 		String excludeJCC = sp.getProperty("excludeJCC");
0: 		if (excludeJCC != null)
0: 		    suiteProperties.put("excludeJCC", excludeJCC);
0: 		String keep = sp.getProperty("keepfiles");
0: 		if (keep != null)
0: 		    suiteProperties.put("keepfiles", keep);
0: 		String outd = sp.getProperty("outputdir");
0: 		if (outd != null)
0: 		{
0: 		    outputdir = outd;
0: 		    suiteProperties.put("outputdir", outputdir);
0: 		}
0: 		String canond = sp.getProperty("canondir");
0: 		if (canond != null)
0: 		{
0: 		    canondir = canond;
0: 		    suiteProperties.put("canondir", canondir);
0: 		}
0: 		String j9bootcp = sp.getProperty("bootcp");
0: 		if (j9bootcp != null)
0: 		{
0: 		    bootcp = j9bootcp;
0: 		    suiteProperties.put("bootcp", bootcp);
0: 		}
0: 		String serverJvm = sp.getProperty("serverJvm");
0: 		if (serverJvm != null)
0: 		    suiteProperties.put("serverJvm", serverJvm);
0: 		String testout = sp.getProperty("testoutname");
0: 		if (testout != null)
0: 		    suiteProperties.put("testoutname", testout); // toursDemo
0: 		String mtdir = sp.getProperty("mtestdir"); // used by multi tests
0: 		if (mtdir != null)
0: 		    suiteProperties.put("mtestdir", mtdir);
0: 		String usepr = sp.getProperty("useprocess");
0: 		if (usepr != null)
0: 		{
0: 		    // Some platforms cannot handle process exec
0: 		    usepr = usepr.toLowerCase();
0: 		    if (usepr.equals("false"))
0: 		    {
0: 		        useprocess = false;
0: 		        suiteProperties.put("useprocess", usepr);
0: 		    }
0: 		}
1: 		
0:         String nosed = sp.getProperty("skipsed");
0:         if (nosed != null)
0:         {
0:             // in some cases (like locales, we may want to skip the Sed)
0:             nosed = nosed.toLowerCase();
0:             if (nosed.equals("true"))
0:             {
0:                 skipsed = true;
0:                 suiteProperties.put("skipsed", nosed);
0:             }
0:         }
1: 		
0: 		String sysdiff = sp.getProperty("systemdiff");
0: 		if (sysdiff != null)
0: 		{
0: 		    // Use system diff if set to true
0: 		    sysdiff = sysdiff.toLowerCase();
0: 		    if (sysdiff.equals("true"))
0: 		        suiteProperties.put("systemdiff", "true");
0: 		}
0: 		String defrespckg = sp.getProperty("ij.defaultResourcePackage");
0: 		if (defrespckg != null)
0: 		    suiteProperties.put("ij.defaultResourcePackage", defrespckg);
0: 		String outcpy = sp.getProperty("outcopy");
0: 		if (outcpy != null)
0: 		    suiteProperties.put("outcopy", outcpy);
0: 		String topsuite = sp.getProperty("suitename");
0: 		if (topsuite != null)
0: 		    suiteProperties.put("suitename", topsuite);
0: 		else
0: 		    suiteProperties.put("suitename", topSuiteName);
0:         String dbug = sp.getProperty("verbose");
0: 		if (dbug != null)
0: 		    suiteProperties.put("verbose", dbug);
0: 		String reporterr = sp.getProperty("reportstderr");
0: 		if (reporterr != null)
0: 		    suiteProperties.put("reportstderr", reporterr);
0: 		String tout = sp.getProperty("timeout");
0: 		if (tout != null)
0: 		    suiteProperties.put("timeout", tout);
0:     }
1: 
0:     private static void setOutput(String suiteName)
0:         throws ClassNotFoundException, FileNotFoundException, IOException
0:     {
0:         boolean status = false;
0:         // Use the defined output directory or user.dir by default
0:         File tmpoutDir;
0:         if ( (outputdir == null) || (outputdir.length()==0) )
0:         {
0:             tmpoutDir =
0: 		        new File((new File(userdir)).getCanonicalPath());
0: 		}
0:         else
0:         {
0:             tmpoutDir =
0:                 new File((new File(outputdir)).getCanonicalPath());
0: 		}
0:         outDir = tmpoutDir;
0:         outDir.mkdir();
1:         
0: 		// runDir is where the suites/tests are run and where
0: 		// any support files or scripts will be expected to live
0: 		runDir =
0: 		    new File((new File(userdir)).getCanonicalPath());
1: 		    
0:         // Set the suite property outputdir
0:         suiteProperties.put("outputdir", outDir.getCanonicalPath());
1: 
0:         // Define the final suite summary file file
0:         outFile = new File(outDir, suiteName + ".sum");
0:         if (outFile.exists())
0:             status = outFile.delete();
1:  
0:         // Define the suite.pass file
0:         File passFile = new File(outDir, suiteName + ".pass");
0:         if (passFile.exists())
0:             status = passFile.delete();
1: 
0:         // Define the suite.fail file
0:         File failFile = new File(outDir, suiteName + ".fail");
0:         if (failFile.exists())
0:             status = failFile.delete();
1: 
0:         // Create a PrintWriter for writing env and test info to the diff file
0:         pwOut = new PrintWriter
0:             (new BufferedWriter(new FileWriter(outFile.getPath()), 4096), true);
0:     }
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.RunSuite
0: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================