1:c806fce: /*
7:c806fce: 
1:c806fce:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.SysinfoCPCheckTest
1:c806fce: 
1:c806fce:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c806fce:    contributor license agreements.  See the NOTICE file distributed with
1:c806fce:    this work for additional information regarding copyright ownership.
1:c806fce:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c806fce:    (the "License"); you may not use this file except in compliance with
1:c806fce:    the License.  You may obtain a copy of the License at
1:c806fce: 
1:c806fce:       http://www.apache.org/licenses/LICENSE-2.0
1:c806fce: 
1:c806fce:    Unless required by applicable law or agreed to in writing, software
1:c806fce:    distributed under the License is distributed on an "AS IS" BASIS,
1:c806fce:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c806fce:    See the License for the specific language governing permissions and
1:c806fce:    limitations under the License.
1:c806fce: 
2:c806fce:  */
1:c806fce: 
1:c806fce: package org.apache.derbyTesting.functionTests.tests.tools;
1:c806fce: 
1:c806fce: import java.io.BufferedReader;
1:c806fce: import java.io.ByteArrayInputStream;
1:c806fce: import java.io.ByteArrayOutputStream;
1:c806fce: import java.io.IOException;
1:c806fce: import java.io.InputStreamReader;
1:c806fce: import java.io.PrintStream;
1:c7598f6: import java.util.Locale;
1:c806fce: import junit.framework.Test;
1:1ae02c9: import org.apache.derby.iapi.services.info.JVMInfo;
1:c806fce: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c806fce: import org.apache.derbyTesting.junit.Derby;
1:34c4f42: import org.apache.derbyTesting.junit.JDBC;
1:c7598f6: import org.apache.derbyTesting.junit.LocaleTestSetup;
1:c806fce: 
1:c806fce: public class SysinfoCPCheckTest extends BaseJDBCTestCase {
1:c806fce: 
1:c806fce:     public SysinfoCPCheckTest(String name) { 
1:c806fce:         super(name); 
1:d1b8db2:     }
1:c806fce: 
1:c806fce:     private static boolean isClient = true;
1:c806fce:     private static boolean isServer = true;
1:c806fce:     
1:c806fce:     public static Test suite() {
1:c806fce: 
1:c806fce:         if (!Derby.hasTools())
1:1ae02c9:             return new BaseTestSuite("empty: no tools support");
1:c806fce:         
1:c806fce:         // check to see if we have derbynet.jar or derbyclient.jar
1:c806fce:         // before starting the security manager...
1:c806fce:         if (!Derby.hasServer())
1:c806fce:             isServer=false;
1:c806fce:         if (!Derby.hasClient())
1:c806fce:             isClient=false;
1:c806fce: 
1:1ae02c9:         Test suite = new BaseTestSuite(
1:1ae02c9:             SysinfoCPCheckTest.class, "Sysinfo ClassPath Checker");
1:1ae02c9: 
1:c7598f6:         return new LocaleTestSetup(suite, Locale.ENGLISH);
1:c806fce:     }
1:c806fce: 
2:c806fce:     /**
1:c806fce:      * Test sysinfo.testClassPathChecker()
1:c806fce:      *
1:c806fce:      * Tests sysinfo classpathtester
1:c806fce:      * This test compares expected output strings; expected language is en_US
1:c806fce:      * 
1:c806fce:      */
1:c806fce:     /**
1:c806fce:      *  Test Classpath Checker output for 3 supported variations
1:c806fce:      */
1:c806fce:     public void testClassPathChecker() throws IOException {
1:62d63f6:         String Success = "Success: All Derby related classes found in class path.";
1:c806fce:         // for testing the -cp with valid class
1:c806fce:         String thisclass = "org.apache.derbyTesting.functionTests.tests.tools." +
1:c806fce:         "SysinfoCPCheckTest.class";
1:c806fce:         // initialize the array of arguments and expected return strings
1:c806fce:         // The purpose of the values in the inner level is:
1:c806fce:         // {0: argument to be passed with -cp,
1:c806fce:         //  1: line number in the output to compare with,
1:c806fce:         //  2: string to compare the above line with
1:c806fce:         //  3: optional string to search for in addition to the above line
1:c806fce:         //  4: a string/number to unravel the output
1:c806fce:         final String[][] tstargs = {
1:c806fce:                 // empty string; should check all; what to check? Just check top
1:c806fce:                 // to ensure it recognizes it needs to check all.
1:d1b8db2:                 {null, "0", "Testing for presence of all Derby-related " +
1:d1b8db2:                     "libraries; typically, only some are needed.", null},
1:d1b8db2:                 // incorrect syntax, or 'args' - should return usage
2:c806fce:                 {
1:7a7a289:                         "a",
1:7a7a289:                         "0",
1:62d63f6:                         "Usage: java org.apache.derby.tools.sysinfo -cp ["
1:7a7a289:                                 + " [ embedded ][ server ][ client] [ tools ]"
1:7a7a289:                                 + " [ anyClass.class ] ]", null },
1:d1b8db2:                 {"embedded", "6", Success, "derby.jar"}, 
1:d1b8db2:                 {"server", "10", Success, "derbynet.jar"},
1:d1b8db2:                 {"tools", "6", Success, "derbytools.jar"},
1:d1b8db2:                 {"client", "6", Success, "derbyclient.jar"},
1:d1b8db2:                 {thisclass, "6", Success, "SysinfoCPCheckTest"},
1:d1b8db2:                 // neg tst, hope this doesn't exist
1:d1b8db2:                 {"nonexist.class", "6", "    (nonexist not found.)", null}
1:c806fce:         };
1:34c4f42: 
1:c806fce:         
1:c806fce: 
1:c806fce:         PrintStream out = System.out;
1:c806fce: 
1:d1b8db2:         int tst=0;
1:d1b8db2:         for (tst=0; tst<tstargs.length ; tst++)
1:c806fce:         {
1:0c8386d:             ByteArrayOutputStream rawBytes = getOutputStream();
1:0c8386d: 
1:d1b8db2:             // First obtain the output for the sysinfo command
1:0c8386d:             PrintStream testOut = new PrintStream(rawBytes,
1:7d66c73:                     false);
1:d1b8db2:             setSystemOut(testOut);
1:d1b8db2:          
1:c806fce:             if (!checkClientOrServer(tstargs[tst][0]))
1:c806fce:                 continue;
1:c806fce: 
1:d1b8db2:             // First command has only 1 arg, prevent NPE with if/else block 
1:c806fce:             if (tstargs[tst][0] == null)
1:d1b8db2:                 org.apache.derby.tools.sysinfo.main(new String[] {"-cp"} );
1:c806fce:             else
2:c806fce:                 org.apache.derby.tools.sysinfo.main(
1:c806fce:                     new String[] {"-cp", tstargs[tst][0]} );
1:c806fce: 
1:d1b8db2:             setSystemOut(out);
1:c806fce: 
1:d1b8db2:             rawBytes.flush();
1:d1b8db2:             rawBytes.close();
1:c806fce: 
1:d1b8db2:             byte[] testRawBytes = rawBytes.toByteArray();
1:c806fce: 
1:d1b8db2:             //System.out.println("cp command: -cp " + tstargs[tst][0]);
1:c806fce: 
1:d1b8db2:             String s = null;
1:c806fce: 
2:d1b8db2:             try {
1:d1b8db2:                 BufferedReader sysinfoOutput = new BufferedReader(
1:d1b8db2:                     new InputStreamReader(
1:7d66c73:                         new ByteArrayInputStream(testRawBytes)));
1:c806fce: 
1:d1b8db2:                 // evaluate the output
1:c806fce:                 // compare the sentence picked
1:c806fce: 
1:c806fce:                 // first one is a bit different - is classpath dependent, so
1:c806fce:                 // we're not going to look through all lines.
1:d1b8db2:                 if (tstargs[tst][0]==null)
1:c806fce:                 {
1:c806fce:                     s=sysinfoOutput.readLine();
1:c806fce:                     assertEquals(tstargs[tst][2], s);
1:d1b8db2:                     while (s != null)
1:c806fce:                     {
1:c806fce:                         s=sysinfoOutput.readLine();
1:c806fce:                     }
1:c806fce:                     continue;
1:c806fce:                 }
1:c806fce: 
1:c806fce:                 if (!checkClientOrServer(tstargs[tst][0]))
1:c806fce:                     continue;
1:c806fce: 
1:c806fce:                 // get the appropriate line for the full line comparison
1:c806fce:                 int linenumber = Integer.parseInt(tstargs[tst][1]);
1:c806fce: 
1:c806fce:                 boolean found = false;
1:c806fce: 
1:c806fce:                 for (int i=0; i<linenumber; i++)
1:c806fce:                 {
2:c806fce:                     s = sysinfoOutput.readLine();
1:c806fce:                     if (tstargs[tst][3] != null)
1:c806fce:                     {
1:c806fce:                         // do the search for the optional string comparison
1:c806fce:                         if (s.indexOf(tstargs[tst][3])>0)
1:c806fce:                             found = true;
1:c806fce:                     }
1:c806fce:                 }
1:c806fce:                 if (tstargs[tst][3] != null && !found)
1:c806fce:                     fail ("did not find the string searched for: " + 
1:d1b8db2:                          tstargs[tst][3] + " for command -cp: " + tstargs[tst][0]);
1:c806fce: 
1:c806fce:                 // read the line to be compared
1:c806fce:                 s = sysinfoOutput.readLine();
1:c806fce: 
1:c806fce:                 if (s == null)
1:c806fce:                     fail("encountered unexpected null strings");
1:c806fce:                 else
1:c806fce:                 {
1:c806fce:                     assertEquals(tstargs[tst][2], s);
1:c806fce:                 }
1:c806fce: 
1:c806fce:                 // read one more line - should be the next command's sequence number
1:c806fce:                 s = sysinfoOutput.readLine();
1:c806fce: 
1:d1b8db2:                 sysinfoOutput.close();
1:d1b8db2:             } catch (Exception e) {
1:d1b8db2:                 e.printStackTrace();
1:d1b8db2:             }
1:c806fce:         }
1:c806fce:     }
1:c806fce: 
1:c806fce:     public boolean checkClientOrServer(String kind)
1:c806fce:     {
1:c806fce:         if (kind == null)
1:c806fce:             return true;
1:c806fce:         // if there is no derbynet.jar, the syntax should still
1:c806fce:         // work, but the comparisons will fail. So never mind.
1:4c5705a:         // JSR169 / J2ME does not support client or server
1:4c5705a:         if ((kind.equals("server") || kind.equals("client")) 
1:4c5705a:                 && JDBC.vmSupportsJSR169())
1:4c5705a:             return false;
1:4c5705a: 
1:c806fce:         if (kind.equals("server")) 
1:c806fce:             return isServer;
1:c806fce:         // same for derbyclient.jar
1:c806fce:         if (kind.equals("client"))
1:c806fce:             return isClient;
1:c806fce:         return true;
1:c806fce:     }
1:c806fce: 
1:0c8386d:     ByteArrayOutputStream getOutputStream() {
1:0c8386d:         return new ByteArrayOutputStream(20 * 1024);
1:34c4f42:     }
1:c806fce:     
1:81d9f9d:     public void testjavaVersion(){
1:0d57d84:         assertEquals(JVMInfo.J2SE_18, JVMInfo.JDK_ID);
1:0d57d84:     }
1:c806fce:      
1:0d57d84:     // Still testing this here although we don't actually put
1:0d57d84:     // out this line with sysinfo anymore.
1:0d57d84:     public void testderbyVMLevel() {
1:0d57d84:         switch (JVMInfo.JDK_ID) {
1:0d57d84:             case JVMInfo.J2SE_18:
1:0d57d84:                 assertEquals("Java SE 8 - JDBC 4.2", JVMInfo.derbyVMLevel());
1:0d57d84:                 break;
1:0d57d84:             default:
1:0d57d84:                 assertEquals("?-?", JVMInfo.derbyVMLevel());
1:0d57d84:                 break;
1:0d57d84:         }
1:0d57d84:     }
1:c806fce:      
1:81d9f9d:      public void testisSunJVM(){
1:81d9f9d:     	 if(JVMInfo.isSunJVM()==true){
1:81d9f9d:     		 assertEquals(true,JVMInfo.isSunJVM());	
1:c806fce:     	 }
1:81d9f9d:     	 else{
1:81d9f9d:     		 assertEquals(false,JVMInfo.isSunJVM());		 
1:c806fce:     	 }
1:c806fce:      }
1:c806fce:      
1:81d9f9d:      public void testisIBMJVM(){
1:81d9f9d:     	 if(JVMInfo.isIBMJVM()==true){
1:81d9f9d:     		 assertEquals(true,JVMInfo.isIBMJVM());	
1:c806fce:     	 }
1:81d9f9d:     	 else{
1:81d9f9d:     		 assertEquals(false,JVMInfo.isIBMJVM());		 
1:c806fce:     	 }
1:c806fce:     }
1:c806fce:      
1:81d9f9d:     public void testhasJNDI(){
1:81d9f9d:     	if(JVMInfo.hasJNDI()==true){
1:81d9f9d:     		assertEquals(true,JVMInfo.hasJNDI());		
1:c806fce:     	}
1:81d9f9d:     	else{
1:81d9f9d:     		assertEquals(false,JVMInfo.hasJNDI());
1:c806fce:     	}
1:c806fce:     	
1:c806fce:     }
1:c806fce: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0d57d84
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(JVMInfo.J2SE_18, JVMInfo.JDK_ID);
1:     }
1:     // Still testing this here although we don't actually put
1:     // out this line with sysinfo anymore.
1:     public void testderbyVMLevel() {
1:         switch (JVMInfo.JDK_ID) {
1:             case JVMInfo.J2SE_18:
1:                 assertEquals("Java SE 8 - JDBC 4.2", JVMInfo.derbyVMLevel());
1:                 break;
1:             default:
1:                 assertEquals("?-?", JVMInfo.derbyVMLevel());
1:                 break;
1:         }
1:     }
commit:c393694
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.info.JVMInfo;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite("empty: no tools support");
/////////////////////////////////////////////////////////////////////////
1:         Test suite = new BaseTestSuite(
1:             SysinfoCPCheckTest.class, "Sysinfo ClassPath Checker");
1: 
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:b6cdb88
/////////////////////////////////////////////////////////////////////////
0:      // Still testing this here although we don't actually put
0:      // out this line with sysinfo anymore.
0:          		assertEquals("Java SE 6 - JDBC 4.0",JVMInfo.derbyVMLevel());
0:          		assertEquals("Java SE 8 - JDBC 4.2",JVMInfo.derbyVMLevel());
commit:4c5705a
/////////////////////////////////////////////////////////////////////////
1:         // JSR169 / J2ME does not support client or server
1:         if ((kind.equals("server") || kind.equals("client")) 
1:                 && JDBC.vmSupportsJSR169())
1:             return false;
1: 
commit:34c4f42
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
0:         // JSR169 / J2ME does not support client or server
0:         if (JDBC.vmSupportsJSR169())
0:             return false;
1: 
/////////////////////////////////////////////////////////////////////////
1: }
commit:0c8386d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             ByteArrayOutputStream rawBytes = getOutputStream();
1: 
1:                 PrintStream testOut = new PrintStream(rawBytes,
/////////////////////////////////////////////////////////////////////////
1:     ByteArrayOutputStream getOutputStream() {
1:         return new ByteArrayOutputStream(20 * 1024);
commit:d1b8db2
/////////////////////////////////////////////////////////////////////////
1:                 {null, "0", "Testing for presence of all Derby-related " +
1:                     "libraries; typically, only some are needed.", null},
1:                 // incorrect syntax, or 'args' - should return usage
0:                 {"a", "0", "USAGE: java org.apache.derby.tools.sysinfo -cp [" +
0:                     " [ embedded ][ server ][ client] [ db2driver ] [ tools ]" +
0:                     " [  anyClass.class ] ]", null},
1:                 {"embedded", "6", Success, "derby.jar"}, 
1:                 {"server", "10", Success, "derbynet.jar"},
1:                 {"tools", "6", Success, "derbytools.jar"},
1:                 {"client", "6", Success, "derbyclient.jar"},
0:                 // let's not test the following valid value, it will 
0:                 // fail if db2jcc.jar is not on CLASSPATH
0:                 //{"db2driver", "6", Success, "db2jcc.jar"},
1:                 {thisclass, "6", Success, "SysinfoCPCheckTest"},
1:                 // neg tst, hope this doesn't exist
1:                 {"nonexist.class", "6", "    (nonexist not found.)", null}
1:         int tst=0;
1:         for (tst=0; tst<tstargs.length ; tst++)
1:             // First obtain the output for the sysinfo command
1:             try {
0:                 PrintStream testOut = new PrintStream(getOutputStream(),
0:                     false, outputEncoding);
1:                 setSystemOut(testOut);
0:             } catch (UnsupportedEncodingException uee) {
0:                 uee.printStackTrace();
1:             }
1: 
1:             // First command has only 1 arg, prevent NPE with if/else block 
1:                 org.apache.derby.tools.sysinfo.main(new String[] {"-cp"} );
1:             setSystemOut(out);
1:             rawBytes.flush();
1:             rawBytes.close();
1:             byte[] testRawBytes = rawBytes.toByteArray();
1:             //System.out.println("cp command: -cp " + tstargs[tst][0]);
1:             String s = null;
1:             try {
1:                 BufferedReader sysinfoOutput = new BufferedReader(
1:                     new InputStreamReader(
0:                         new ByteArrayInputStream(testRawBytes),
0:                             outputEncoding));
1:                 // evaluate the output
1:                 if (tstargs[tst][0]==null)
1:                     while (s != null)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                          tstargs[tst][3] + " for command -cp: " + tstargs[tst][0]);
/////////////////////////////////////////////////////////////////////////
1:                 sysinfoOutput.close();
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:             }
commit:c806fce
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.SysinfoCPCheckTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.tools;
1: 
1: import java.io.BufferedReader;
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStreamReader;
0: import java.io.OutputStream;
1: import java.io.PrintStream;
0: import java.io.UnsupportedEncodingException;
0: import java.security.AccessController;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.Derby;
1: 
1: public class SysinfoCPCheckTest extends BaseJDBCTestCase {
1: 
1:     public SysinfoCPCheckTest(String name) { 
1:         super(name); 
1:     }
1: 
0:     final String outputEncoding = "US-ASCII";
1: 
0:     private ByteArrayOutputStream rawBytes;
1: 
1:     private static boolean isClient = true;
1:     private static boolean isServer = true;
1:     
1:     public static Test suite() {
1: 
1:         if (!Derby.hasTools())
0:             return new TestSuite("empty: no tools support");
1:         
1:         // check to see if we have derbynet.jar or derbyclient.jar
1:         // before starting the security manager...
1:         if (!Derby.hasServer())
1:             isServer=false;
1:         if (!Derby.hasClient())
1:             isClient=false;
1: 
0:         Test suite = new TestSuite(SysinfoCPCheckTest.class, "Sysinfo ClassPath Checker");        
0:         return suite;
1:     }
1: 
1:     /**
1:      * Test sysinfo.testClassPathChecker()
1:      *
1:      * Tests sysinfo classpathtester
1:      * This test compares expected output strings; expected language is en_US
1:      * 
1:      */
1:     /**
1:      *  Test Classpath Checker output for 3 supported variations
1:      */
1:     public void testClassPathChecker() throws IOException {
0:         String Success = "SUCCESS: All Derby related classes found in class path.";
1:         // for testing the -cp with valid class
1:         String thisclass = "org.apache.derbyTesting.functionTests.tests.tools." +
1:         "SysinfoCPCheckTest.class";
1:         // initialize the array of arguments and expected return strings
1:         // The purpose of the values in the inner level is:
1:         // {0: argument to be passed with -cp,
1:         //  1: line number in the output to compare with,
1:         //  2: string to compare the above line with
1:         //  3: optional string to search for in addition to the above line
1:         //  4: a string/number to unravel the output
1:         final String[][] tstargs = {
1:                 // empty string; should check all; what to check? Just check top
1:                 // to ensure it recognizes it needs to check all.
0:                 {null, "0", "Testing for presence of all Derby-related librari" +
0:                     "es; typically, only some are needed.", null, "0"},
0:                     // incorrect syntax, or 'args' - should return usage
0:                     {"a", "0", "USAGE: java org.apache.derby.tools.sysinfo -cp [" +
0:                         " [ embedded ][ server ][ client] [ db2driver ] [ tools ]" +
0:                         " [  anyClass.class ] ]", null, "1"},
0:                         {"embedded", "6", Success, "derby.jar", "2"}, 
0:                         {"server", "10", Success, "derbynet.jar", "3"},
0:                         {"tools", "6", Success, "derbytools.jar", "4"},
0:                         {"client", "6", Success, "derbyclient.jar", "5"},
0:                         // let's not test the following valid value, it's likely to fail:
0:                         // {"db2driver", "6", Success, "db2jcc.jar"},
0:                         {thisclass, "6", Success, "SysinfoCPCheckTest", "6"},
0:                         // neg tst, hope this doesn't exist
0:                         {"nonexist.class", "6", "    (nonexist not found.)", null, "7"}
1:         };
1: 
0:         // First obtain the output of all sysinfo commands we want to test
0:         // we print a number for each of the commands to test for unraveling
0:         // them later.
1: 
0:         final String outputEncoding = "US-ASCII";
1: 
1:         PrintStream out = System.out;
0:         try {
0:             PrintStream testOut = new PrintStream(getOutputStream(),
0:                     false, outputEncoding);
0:             setSystemOut(testOut);
0:         } catch (UnsupportedEncodingException uee) {
0:             uee.printStackTrace();
1:         }
1: 
0:         for (int tst=0; tst<tstargs.length ; tst++)
1:         {
1:             if (!checkClientOrServer(tstargs[tst][0]))
1:                 continue;
1: 
0:             // print out a number to unravel the fulloutput later
0:             System.out.println(tstargs[tst][4]);
1: 
0:             // The first command has only 1 arg
1:             if (tstargs[tst][0] == null)
1:                 org.apache.derby.tools.sysinfo.main(
0:                     new String[] {"-cp"} );
1:             else
1:                 org.apache.derby.tools.sysinfo.main(
1:                     new String[] {"-cp", tstargs[tst][0]} );
1:         }
1: 
0:         setSystemOut(out);
1: 
0:         rawBytes.flush();
0:         rawBytes.close();
1: 
0:         byte[] testRawBytes = rawBytes.toByteArray();
1: 
0:         String s = null;
1: 
0:         try {
1: 
0:             BufferedReader sysinfoOutput = new BufferedReader(
0:                 new InputStreamReader(
0:                     new ByteArrayInputStream(testRawBytes),
0:                         outputEncoding));
1: 
1:             s = sysinfoOutput.readLine();
1: 
0:             // evaluate the output
0:             for (int tst=0; tst<tstargs.length ; tst++)
1:             {
0:                 //System.out.println("cp command: -cp " + tstargs[tst][0]);
1: 
1:                 // compare the sentence picked
1: 
1:                 // first one is a bit different - is classpath dependent, so
1:                 // we're not going to look through all lines.
0:                 if (tstargs[tst][4].equals("0"))
1:                 {
1:                     s=sysinfoOutput.readLine();
1:                     assertEquals(tstargs[tst][2], s);
0:                     while (!s.equals(tstargs[tst+1][4]))
1:                     {
1:                         s=sysinfoOutput.readLine();
1:                     }
1:                     continue;
1:                 }
1: 
1:                 if (!checkClientOrServer(tstargs[tst][0]))
1:                     continue;
1: 
0:                 if (!s.equals(tstargs[tst][4]))
0:                     fail("out of sync with expected lines, indicates a problem");
1: 
1:                 // get the appropriate line for the full line comparison
1:                 int linenumber = Integer.parseInt(tstargs[tst][1]);
1: 
1:                 boolean found = false;
1: 
1:                 for (int i=0; i<linenumber; i++)
1:                 {
1:                     s = sysinfoOutput.readLine();
1:                     if (tstargs[tst][3] != null)
1:                     {
1:                         // do the search for the optional string comparison
1:                         if (s.indexOf(tstargs[tst][3])>0)
1:                             found = true;
1:                     }
1:                 }
1:                 if (tstargs[tst][3] != null && !found)
1:                     fail ("did not find the string searched for: " + 
0:                             tstargs[tst][3] + " for command -cp: " + tstargs[tst][0]);
1: 
1:                 // read the line to be compared
1:                 s = sysinfoOutput.readLine();
1: 
1:                 if (s == null)
1:                     fail("encountered unexpected null strings");
1:                 else
1:                 {
1:                     assertEquals(tstargs[tst][2], s);
1:                 }
1: 
1:                 // read one more line - should be the next command's sequence number
1:                 s = sysinfoOutput.readLine();
1:             }
1: 
0:             sysinfoOutput.close();
0:         } catch (Exception e) {
0:             e.printStackTrace();
1:         }
1:     }
1: 
1:     public boolean checkClientOrServer(String kind)
1:     {
1:         if (kind == null)
1:             return true;
1:         // if there is no derbynet.jar, the syntax should still
1:         // work, but the comparisons will fail. So never mind.
1:         if (kind.equals("server")) 
1:             return isServer;
1:         // same for derbyclient.jar
1:         if (kind.equals("client"))
1:             return isClient;
1:         return true;
1:     }
1: 
1:     /**
0:      * Need to capture System.out so that we can compare it.
0:      * @param out
1:      */
0:     private void setSystemOut(final PrintStream out)
1:     {
0:         AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1: 
0:             public Object run(){
0:                 System.setOut(out);
0:                 return null;
1:             }
1:         }
0:         );       
1:     }
1: 
0:     OutputStream getOutputStream() {
0:         return rawBytes = new ByteArrayOutputStream(20 * 1024);
1:     }
1: 
0:     protected void tearDown() throws Exception {
0:         rawBytes = null;
0:         super.tearDown();
1:     }
1: }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:81d9f9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.info.JVMInfo;
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void testjavaVersion(){
0:   	   assertTrue( JVMInfo.JDK_ID == JVMInfo.J2SE_16 ||
0:   		       JVMInfo.JDK_ID == JVMInfo.J2SE_17 ||
0:   		       JVMInfo.JDK_ID == JVMInfo.J2SE_18 );  
0:      }
0:      
0:      public void testderbyVMLevel(){
0:      	switch (JVMInfo.JDK_ID) {
0:          	case JVMInfo.J2SE_16: 
0:          		assertEquals("Java SE 6 - JDBC 4.1",JVMInfo.derbyVMLevel());
0:          		break;
0:          	case JVMInfo.J2SE_17: 
0:          		assertEquals("Java SE 7 - JDBC 4.1",JVMInfo.derbyVMLevel());
0:          		break;
0:          	case JVMInfo.J2SE_18: 
0:          		assertEquals("Java SE 8 - JDBC 4.1",JVMInfo.derbyVMLevel());
0:          		break;
0:          	default: 
0:  			 assertEquals("?-?",JVMInfo.derbyVMLevel());
0:  			 break;
0:  		}
0:      	
0:      }
0:      
1:      public void testisSunJVM(){
1:     	 if(JVMInfo.isSunJVM()==true){
1:     		 assertEquals(true,JVMInfo.isSunJVM());	
0:     	 }
1:     	 else{
1:     		 assertEquals(false,JVMInfo.isSunJVM());		 
0:     	 }
0:      }
0:      
1:      public void testisIBMJVM(){
1:     	 if(JVMInfo.isIBMJVM()==true){
1:     		 assertEquals(true,JVMInfo.isIBMJVM());	
0:     	 }
1:     	 else{
1:     		 assertEquals(false,JVMInfo.isIBMJVM());		 
0:     	 }
0:     }
0:      
1:     public void testhasJNDI(){
1:     	if(JVMInfo.hasJNDI()==true){
1:     		assertEquals(true,JVMInfo.hasJNDI());		
0:     	}
1:     	else{
1:     		assertEquals(false,JVMInfo.hasJNDI());
0:     	}
0:     	
0:     }
commit:c7598f6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.LocaleTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         return new LocaleTestSetup(suite, Locale.ENGLISH);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:62d63f6
/////////////////////////////////////////////////////////////////////////
1:         String Success = "Success: All Derby related classes found in class path.";
/////////////////////////////////////////////////////////////////////////
1:                         "Usage: java org.apache.derby.tools.sysinfo -cp ["
author:Lily Wei
-------------------------------------------------------------------------------
commit:7a7a289
/////////////////////////////////////////////////////////////////////////
0:                 {
1:                         "a",
1:                         "0",
0:                         "USAGE: java org.apache.derby.tools.sysinfo -cp ["
1:                                 + " [ embedded ][ server ][ client] [ tools ]"
1:                                 + " [ anyClass.class ] ]", null },
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:7d66c73
/////////////////////////////////////////////////////////////////////////
0:         
/////////////////////////////////////////////////////////////////////////
0:             PrintStream testOut = new PrintStream(rawBytes,
1:                     false);
0:             setSystemOut(testOut);
0:          
/////////////////////////////////////////////////////////////////////////
1:                         new ByteArrayInputStream(testRawBytes)));
============================================================================