1:9c9a3ab: /*
1:9c9a3ab: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ReleaseCompileLocksTest
12:9c9a3ab: 
1:9c9a3ab: Licensed to the Apache Software Foundation (ASF) under one or more
1:9c9a3ab: contributor license agreements.  See the NOTICE file distributed with
1:9c9a3ab: this work for additional information regarding copyright ownership.
1:9c9a3ab: The ASF licenses this file to You under the Apache License, Version 2.0
1:9c9a3ab: (the "License"); you may not use this file except in compliance with
1:9c9a3ab: the License.  You may obtain a copy of the License at
1:9c9a3ab: 
1:9c9a3ab: http://www.apache.org/licenses/LICENSE-2.0
1:9c9a3ab: 
1:9c9a3ab: Unless required by applicable law or agreed to in writing, software
1:9c9a3ab: distributed under the License is distributed on an "AS IS" BASIS,
1:9c9a3ab: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9c9a3ab: See the License for the specific language governing permissions and
1:9c9a3ab: limitations under the License.
1:9c9a3ab: 
1:9c9a3ab: */
1:9c9a3ab: 
1:9c9a3ab: package org.apache.derbyTesting.functionTests.tests.lang;
1:9c9a3ab: 
1:9c9a3ab: import java.sql.Connection;
1:9c9a3ab: import java.sql.PreparedStatement;
1:9c9a3ab: import java.sql.ResultSet;
1:9c9a3ab: import java.sql.SQLException;
1:9c9a3ab: import java.sql.Statement;
1:1ae02c9: import junit.framework.Test;
1:9c9a3ab: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:9c9a3ab: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:9c9a3ab: import org.apache.derbyTesting.junit.JDBC;
1:9c9a3ab: import org.apache.derbyTesting.junit.TestConfiguration;
1:9c9a3ab: 
1:9c9a3ab: 
1:9c9a3ab: /**
1:9c9a3ab:  * Tests for forupdate. 
1:9c9a3ab:  *
1:9c9a3ab:  */
1:9c9a3ab: public class ReleaseCompileLocksTest extends BaseJDBCTestCase {
1:9c9a3ab: 
1:9c9a3ab: 
1:9c9a3ab: 	/* Public constructor required for running test as standalone JUnit. */    
1:9c9a3ab: 	public ReleaseCompileLocksTest(String name) {
1:9c9a3ab: 		super(name);
6:9c9a3ab: 	}
1:9c9a3ab:     
1:fc7482f:     /**
1:fc7482f:      * Sets the auto commit to false.
1:fc7482f:      */
1:fc7482f:     protected void initializeConnection(Connection conn) throws SQLException {
1:9c9a3ab:         conn.setAutoCommit(false);
1:9c9a3ab:     }
1:9c9a3ab: 
1:9c9a3ab: 
1:9c9a3ab: 	/* Set up fixture */ 
1:9c9a3ab: 	protected void setUp() throws SQLException {
1:fc7482f: 	    Statement stmt = createStatement();
1:9c9a3ab: 
1:9fa19f4: 	    stmt.execute("create function dmlstatic() returns INT " +
1:9fa19f4: 	    	"parameter style java language java external name " +
1:9fa19f4: 	    	"'org.apache.derbyTesting.functionTests.util.StaticInitializers." +
1:9fa19f4: 	    	"DMLInStaticInitializer.getANumber' no sql");
1:9c9a3ab:                   
1:9fa19f4: 	    stmt.execute("create function insertstatic() returns INT " +
1:9fa19f4: 	    	"parameter style java language java external name " +
1:9fa19f4: 	    	"'org.apache.derbyTesting.functionTests.util.StaticInitializers." +
1:9fa19f4: 	    	"InsertInStaticInitializer.getANumber' no sql");
1:dd32c16: 
1:dd32c16:         stmt.execute("CREATE PROCEDURE WAIT_FOR_POST_COMMIT() "
1:dd32c16:                 + "LANGUAGE JAVA EXTERNAL NAME "
1:dd32c16:                 + "'org.apache.derbyTesting.functionTests.util."
1:dd32c16:                 + "T_Access.waitForPostCommitToFinish' "
1:dd32c16:                 + "PARAMETER STYLE JAVA");
1:dd32c16: 
1:9c9a3ab:         stmt.close();
1:fc7482f:         commit();
1:9c9a3ab: 	}
1:9c9a3ab: 
1:9c9a3ab: 
1:9c9a3ab: 
1:9c9a3ab: 	/**
1:9c9a3ab:          * Create a suite of tests.
1:9c9a3ab:          **/
1:9c9a3ab:         public static Test suite() {
1:1ae02c9:             BaseTestSuite suite =
1:1ae02c9:                 new BaseTestSuite("ReleasecompileLocksTest");
1:1ae02c9: 
1:9c9a3ab:         	suite.addTest(baseSuite("ReleaseCompileLocksTest:embedded"));
1:9fa19f4:         	suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("ReleaseCompileLocksTest:client")));
1:9c9a3ab:         	return suite;
1:9c9a3ab:     	}
1:9c9a3ab: 
1:9c9a3ab: 	protected static Test baseSuite(String name) {
1:1ae02c9:             BaseTestSuite suite = new BaseTestSuite(name);
1:9c9a3ab:         	suite.addTestSuite(ReleaseCompileLocksTest.class);
1:9c9a3ab:         	
1:9c9a3ab: 		return new CleanDatabaseTestSetup(suite) 
2:9c9a3ab:         	{
1:9c9a3ab:             		protected void decorateSQL(Statement s) throws SQLException
1:9c9a3ab:             		{
1:9c9a3ab: 				s.execute("create table t1 (s int)");	
1:9c9a3ab:             		}
1:9c9a3ab:         	};
1:9c9a3ab:     	} 
1:9c9a3ab: 
1:9c9a3ab:         /*Fixtures*/
1:9c9a3ab:         public void testReleaseCompileLocks() throws Exception {
1:9c9a3ab:             
1:fc7482f:             Statement stmt = createStatement();
1:9c9a3ab: 
1:6c3076f:     		// Calling the method dmlstatic with jsr169 will not work because
1:6c3076f:     		// the procedures use DriverManager to get the default connection.
1:6c3076f:     		// Of course, this makes this test not fully useful with jsr169,
1:6c3076f:     		// but at least performing the call to locktable is performed.
1:6c3076f:             if (JDBC.vmSupportsJDBC3()) 
1:6c3076f:             	JDBC.assertFullResultSet(stmt.executeQuery(
1:6c3076f:             		"select (dmlstatic()) from sys.systables where " +
1:6c3076f:         			"CAST(tablename AS VARCHAR(128))= 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
1:6c3076f:     		else
1:6c3076f:     			JDBC.assertFullResultSet(stmt.executeQuery(
1:6c3076f:             		"select count(*) from sys.systables where " +
1:6c3076f:             		"CAST(tablename AS VARCHAR(128)) = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
1:dd32c16: 
1:6c3076f: 
1:dd32c16:         assertNoLocks(stmt);
1:fc7482f: 		commit();
1:9c9a3ab: 
1:9c9a3ab: 		stmt.execute("drop table t1");
1:9c9a3ab: 		stmt.execute("create table t1 (s int)");
1:fc7482f: 		commit();
1:9c9a3ab: 
1:6c3076f: 		// Calling the method insertstatic with jsr169 will not work because
1:6c3076f: 		// the procedures use DriverManager to get the default connection.
1:6c3076f: 		// Of course, this makes this test not fully useful with jsr169,
1:6c3076f: 		// but at least performing the call to locktable is performed.
1:6c3076f: 		if (JDBC.vmSupportsJDBC3())
1:6c3076f: 			JDBC.assertFullResultSet(stmt.executeQuery(
1:a44271c:         		"select (insertstatic()) from sys.systables where " +
1:6c3076f:         		"CAST(tablename AS VARCHAR(128)) = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
1:6c3076f: 		else
1:6c3076f: 			JDBC.assertFullResultSet(stmt.executeQuery(
1:6c3076f:         		"select count(*) from sys.systables where " +
1:96c3cce:         		"CAST(tablename AS VARCHAR(128)) = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
1:6c3076f: 			
1:dd32c16:         assertNoLocks(stmt);
1:9c9a3ab: 
1:9c9a3ab: 		JDBC.assertEmpty(stmt.executeQuery("select * from t1"));
1:9c9a3ab: 		stmt.execute("drop table t1");
1:fc7482f: 		commit();
1:dd32c16: 
1:dd32c16:         assertNoLocks(stmt);
1:fc7482f: 		commit();
1:9c9a3ab: 
1:9c9a3ab: 		stmt.execute("create table test_tab (x int)");
1:9c9a3ab: 		stmt.executeUpdate("insert into test_tab values (1)");
1:fc7482f: 		commit();
1:9c9a3ab: 
1:dd32c16:         assertNoLocks(stmt);
1:9c9a3ab: 		JDBC.assertSingleValueResultSet(stmt.executeQuery("select count(*) from sys.sysviews"), "0");
1:dd32c16:         assertNoLocks(stmt);
1:9c9a3ab: 		stmt.execute("insert into test_tab values (2)");
1:9c9a3ab: 
1:dd32c16:         waitForPostCommit(stmt);
1:9c9a3ab:                 ResultSet rs = stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1");
1:9c9a3ab: 		
1:9c9a3ab: 		String expectedValues[][] = {{"ROW", "X", "TEST_TAB", "(1,8)", "GRANT" }, {"TABLE", "IX", "TEST_TAB", "Tablelock","GRANT"}};
1:9c9a3ab:                 JDBC.assertFullResultSet(rs, expectedValues);
1:9c9a3ab: 
1:9fa19f4: 		try { 
1:9c9a3ab: 		  	stmt.execute("drop table t1");
1:9fa19f4: 		  	fail ("expected SQLException; table t should not exist");
1:9c9a3ab: 		} catch (SQLException e) {
1:9c9a3ab: 			assertSQLState("42Y55", e);
1:9fa19f4: 		}
1:9c9a3ab: 		stmt.execute("create table t1 (x int)");
1:fc7482f: 		commit();
1:9c9a3ab: 		
1:9c9a3ab: 		JDBC.assertEmpty(stmt.executeQuery("select * from t1"));
1:9c9a3ab: 
1:9c9a3ab: 		Connection conn1 = openDefaultConnection();
1:9c9a3ab:                 Statement stmt2 = conn1.createStatement();
1:9c9a3ab: 		stmt2.execute("create table t2 (x int)");
1:9c9a3ab: 		stmt2.execute("drop table t2");
1:9c9a3ab: 		stmt2.close();
1:fc7482f:         conn1.commit();
1:9c9a3ab: 		conn1.close();
1:9c9a3ab: 
1:9c9a3ab: 		stmt.execute("drop table test_tab");
1:9c9a3ab: 		stmt.execute("create table test_tab (x int)");
1:9c9a3ab: 		stmt.execute("insert into test_tab values (1)");
1:fc7482f: 		commit();
1:9c9a3ab: 
1:9c9a3ab: 		PreparedStatement ps = prepareStatement("update test_tab set x=2 where x=?");
1:9c9a3ab: 		ps.setCursorName("cursor1");
1:9c9a3ab: 		ps.setInt(1, 1);
1:9c9a3ab: 
1:dd32c16:         assertNoLocks(stmt);
1:9c9a3ab: 		ps.executeUpdate();
1:dd32c16: 
1:dd32c16:         waitForPostCommit(stmt);
1:9c9a3ab: 		rs = stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1");
1:9c9a3ab: 		String expectedValues1[][] = {{"ROW", "X", "TEST_TAB", "(1,7)", "GRANT" }, {"TABLE", "IX", "TEST_TAB", "Tablelock","GRANT"}};
1:9c9a3ab:                 JDBC.assertFullResultSet(rs, expectedValues1);
1:fc7482f: 		commit();
1:9c9a3ab: 
1:9c9a3ab: 		
1:9c9a3ab: 		stmt.execute("create table t (c1 int not null primary key, c2 int references t)");
1:9c9a3ab: 		stmt.executeUpdate("insert into t values (1,1)");
1:9c9a3ab: 		stmt.executeUpdate("insert into t values (2,1)");
1:fc7482f: 		commit();
1:9c9a3ab: 
1:9c9a3ab: 		ps = prepareStatement("select * from t where c1 = ? and c2 = ?");
1:9c9a3ab: 		ps.setCursorName("ps");
1:dd32c16:         assertNoLocks(stmt);
1:9c9a3ab: 
1:9c9a3ab: 		
1:9c9a3ab: 		stmt.execute("create table x(c1 int)");
1:9c9a3ab: 		stmt.execute("drop table x");
1:fc7482f: 		commit();
1:9c9a3ab: 
1:9c9a3ab: 		ps = prepareStatement("insert into t values (3,2)");
1:9c9a3ab: 		ps.setCursorName("pi");
1:dd32c16:         assertNoLocks(stmt);
1:fc7482f: 		commit();
1:9c9a3ab: 
1:9c9a3ab: 
1:9c9a3ab: 		stmt.execute("create table x(c1 int)");
1:9c9a3ab: 		stmt.execute("drop table x");
1:fc7482f: 		commit();
1:9c9a3ab: 
1:9c9a3ab: 		ps = prepareStatement("update t set c2 = c1, c1 = c2");
1:9c9a3ab: 		ps.setCursorName("p1");
1:dd32c16:         assertNoLocks(stmt);
1:fc7482f: 		commit();
1:9c9a3ab: 
1:9c9a3ab: 		
1:9c9a3ab: 		stmt.execute("create table x(c1 int)");
1:9c9a3ab: 		stmt.execute("drop table x");
1:fc7482f: 		commit();
1:9c9a3ab: 
1:9c9a3ab: 		ps = prepareStatement("delete from t");
1:9c9a3ab: 		ps.setCursorName("p1");
1:dd32c16:         assertNoLocks(stmt);
1:fc7482f: 		commit();
1:9c9a3ab: 		
1:9c9a3ab: 		stmt.execute("create trigger update_of_t after update on t for each row values 2");
1:9c9a3ab: 		stmt.execute("create trigger insert_of_t after insert on t for each row values 3");
1:fc7482f: 		commit();
1:9c9a3ab: 	
1:9c9a3ab: 		ps = prepareStatement("update t set c2=2 where c1=2");
1:9c9a3ab: 		ps.setCursorName("pu");
1:dd32c16:         assertNoLocks(stmt);
1:fc7482f: 		commit();
1:9c9a3ab: 
1:9c9a3ab: 		rs.close();
1:9c9a3ab: 		ps.close();
1:9c9a3ab: 		stmt.close();
1:9fa19f4:        }
1:dd32c16: 
1:dd32c16:     /**
1:dd32c16:      * Assert that the lock table is empty.
1:dd32c16:      * @param stmt the statement to use for querying the lock table
1:dd32c16:      */
1:dd32c16:     private void assertNoLocks(Statement stmt) throws SQLException {
1:dd32c16:         // First make sure there are no locks held by the post-commit worker
1:dd32c16:         // thread (DERBY-3258).
1:dd32c16:         waitForPostCommit(stmt);
1:dd32c16: 
1:dd32c16:         // Then verify that the lock table is empty.
1:dd32c16:         JDBC.assertEmpty(
1:dd32c16:                 stmt.executeQuery("SELECT * FROM SYSCS_DIAG.LOCK_TABLE"));
1:dd32c16:     }
1:dd32c16: 
1:dd32c16:     /**
1:dd32c16:      * Wait for post commit to finish.
1:dd32c16:      * @param stmt the statement to use for invoking WAIT_FOR_POST_COMMIT
1:dd32c16:      */
1:dd32c16:     private void waitForPostCommit(Statement stmt) throws SQLException {
1:dd32c16:         stmt.execute("CALL WAIT_FOR_POST_COMMIT()");
1:dd32c16:     }
1:9c9a3ab: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             BaseTestSuite suite =
1:                 new BaseTestSuite("ReleasecompileLocksTest");
1: 
1:             BaseTestSuite suite = new BaseTestSuite(name);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:dd32c16
/////////////////////////////////////////////////////////////////////////
1: 
1:         stmt.execute("CREATE PROCEDURE WAIT_FOR_POST_COMMIT() "
1:                 + "LANGUAGE JAVA EXTERNAL NAME "
1:                 + "'org.apache.derbyTesting.functionTests.util."
1:                 + "T_Access.waitForPostCommitToFinish' "
1:                 + "PARAMETER STYLE JAVA");
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertNoLocks(stmt);
/////////////////////////////////////////////////////////////////////////
1:         assertNoLocks(stmt);
1: 
1:         assertNoLocks(stmt);
1:         assertNoLocks(stmt);
1:         assertNoLocks(stmt);
1:         waitForPostCommit(stmt);
/////////////////////////////////////////////////////////////////////////
1:         assertNoLocks(stmt);
1: 
1:         waitForPostCommit(stmt);
/////////////////////////////////////////////////////////////////////////
1:         assertNoLocks(stmt);
/////////////////////////////////////////////////////////////////////////
1:         assertNoLocks(stmt);
/////////////////////////////////////////////////////////////////////////
1:         assertNoLocks(stmt);
/////////////////////////////////////////////////////////////////////////
1:         assertNoLocks(stmt);
/////////////////////////////////////////////////////////////////////////
1:         assertNoLocks(stmt);
1: 
1:     /**
1:      * Assert that the lock table is empty.
1:      * @param stmt the statement to use for querying the lock table
1:      */
1:     private void assertNoLocks(Statement stmt) throws SQLException {
1:         // First make sure there are no locks held by the post-commit worker
1:         // thread (DERBY-3258).
1:         waitForPostCommit(stmt);
1: 
1:         // Then verify that the lock table is empty.
1:         JDBC.assertEmpty(
1:                 stmt.executeQuery("SELECT * FROM SYSCS_DIAG.LOCK_TABLE"));
1:     }
1: 
1:     /**
1:      * Wait for post commit to finish.
1:      * @param stmt the statement to use for invoking WAIT_FOR_POST_COMMIT
1:      */
1:     private void waitForPostCommit(Statement stmt) throws SQLException {
1:         stmt.execute("CALL WAIT_FOR_POST_COMMIT()");
1:     }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:6c3076f
/////////////////////////////////////////////////////////////////////////
1:     		// Calling the method dmlstatic with jsr169 will not work because
1:     		// the procedures use DriverManager to get the default connection.
1:     		// Of course, this makes this test not fully useful with jsr169,
1:     		// but at least performing the call to locktable is performed.
1:             if (JDBC.vmSupportsJDBC3()) 
1:             	JDBC.assertFullResultSet(stmt.executeQuery(
1:             		"select (dmlstatic()) from sys.systables where " +
1:         			"CAST(tablename AS VARCHAR(128))= 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
1:     		else
1:     			JDBC.assertFullResultSet(stmt.executeQuery(
1:             		"select count(*) from sys.systables where " +
1:             		"CAST(tablename AS VARCHAR(128)) = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
1:     			
/////////////////////////////////////////////////////////////////////////
1: 		// Calling the method insertstatic with jsr169 will not work because
1: 		// the procedures use DriverManager to get the default connection.
1: 		// Of course, this makes this test not fully useful with jsr169,
1: 		// but at least performing the call to locktable is performed.
1: 		if (JDBC.vmSupportsJDBC3())
1: 			JDBC.assertFullResultSet(stmt.executeQuery(
1: 		else
1: 			JDBC.assertFullResultSet(stmt.executeQuery(
1:         		"select count(*) from sys.systables where " +
1:         		"CAST(tablename AS VARCHAR(128)) = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
1: 			
commit:a44271c
/////////////////////////////////////////////////////////////////////////
0:         	JDBC.assertFullResultSet(stmt.executeQuery(
0:         		"select (dmlstatic()) from sys.systables where " +
0:         		"tablename = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
/////////////////////////////////////////////////////////////////////////
0: 		JDBC.assertFullResultSet(stmt.executeQuery(
1:         		"select (insertstatic()) from sys.systables where " +
0:         		"tablename = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
commit:9fa19f4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	    stmt.execute("create function dmlstatic() returns INT " +
1: 	    	"parameter style java language java external name " +
1: 	    	"'org.apache.derbyTesting.functionTests.util.StaticInitializers." +
1: 	    	"DMLInStaticInitializer.getANumber' no sql");
1: 	    stmt.execute("create function insertstatic() returns INT " +
1: 	    	"parameter style java language java external name " +
1: 	    	"'org.apache.derbyTesting.functionTests.util.StaticInitializers." +
1: 	    	"InsertInStaticInitializer.getANumber' no sql");
/////////////////////////////////////////////////////////////////////////
0:         	TestSuite suite = new TestSuite("ReleasecompileLocksTest");
1:         	suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("ReleaseCompileLocksTest:client")));
/////////////////////////////////////////////////////////////////////////
1:         	try {    
0:         		JDBC.assertFullResultSet(stmt.executeQuery(
0:         			"select (dmlstatic()) from sys.systables where " +
0:         			"tablename = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
0:         	} catch (Throwable ie) {
0:         		fail("unexpected problem, cause: " +ie.getCause());
1:         	}
/////////////////////////////////////////////////////////////////////////
0:         		JDBC.assertFullResultSet(stmt.executeQuery(
0:         			"select (insertstatic()) from sys.systables where " +
0:         			"tablename = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
0:         	} catch (Throwable ie) {
0:         		fail("unexpected problem; cause: " + ie.getCause());
1:         	}
/////////////////////////////////////////////////////////////////////////
1: 		  	fail ("expected SQLException; table t should not exist");
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:96c3cce
/////////////////////////////////////////////////////////////////////////
0:         		"CAST(tablename AS VARCHAR(128))= 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
/////////////////////////////////////////////////////////////////////////
1:         		"CAST(tablename AS VARCHAR(128)) = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
commit:9c9a3ab
/////////////////////////////////////////////////////////////////////////
1: /*
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ReleaseCompileLocksTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
0: import junit.framework.Assert;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: 
1: /**
1:  * Tests for forupdate. 
1:  *
1:  */
1: public class ReleaseCompileLocksTest extends BaseJDBCTestCase {
1: 
0: 	public Statement stmt = null;
0: 	Connection conn = null;
1: 
1: 
1: 	/* Public constructor required for running test as standalone JUnit. */    
1: 	public ReleaseCompileLocksTest(String name) {
1: 		super(name);
1: 	}
1: 
1: 
1: 	/* Set up fixture */ 
1: 	protected void setUp() throws SQLException {
0: 	    stmt = createStatement();
0: 	    conn = getConnection();
1: 	    conn.setAutoCommit(false);
1: 
0: 	    stmt.execute("create function dmlstatic() returns INT parameter style java language java external name " +							  "'org.apache.derbyTesting.functionTests.tests.lang." + 
0:                  	this.getANumber() +
0: 			"' no sql");
1:                   
0: 	    stmt.execute("create function insertstatic() returns INT parameter style java language java external name " +					"'org.apache.derbyTesting.functionTests.tests.lang." +
0: 			this.getANumber() +
0: 			"' no sql");
1: 	}
1: 
1: 
0: 	/* Tear down the fixture */
0: 	protected void tearDown() throws Exception {
1:                 stmt.close();
0: 		super.tearDown();
1: 	}
1: 
1: 	/**
1:          * Create a suite of tests.
1:          **/
1:         public static Test suite() {
0:         	TestSuite suite = new TestSuite("ForUpdateTest");
1:         	suite.addTest(baseSuite("ReleaseCompileLocksTest:embedded"));
0:                 suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("ReleaseCompileLocksTest:client")));
1:         	return suite;
1:     	}
1: 
1: 	protected static Test baseSuite(String name) {
0:         	TestSuite suite = new TestSuite(name);
1:         	suite.addTestSuite(ReleaseCompileLocksTest.class);
1:         	
1: 		return new CleanDatabaseTestSetup(suite) 
1:         	{
1:             		protected void decorateSQL(Statement s) throws SQLException
1:             		{
1: 				s.execute("create table t1 (s int)");	
1:             		}
1:         	};
1:     	} 
1: 
1:         /*Fixtures*/
1:         public void testReleaseCompileLocks() throws Exception {
0:         	conn.commit();
1: 
0: 		try {
0:                 	stmt.executeQuery("select (dmlstatic()) from sys.systables where tablename = 'SYSCONGLOMERATES'");          
0: 		} catch (SQLException sqle) {
0: 			assertSQLState("42X51", sqle);
1: 		}
1: 		
1: 
0:                 JDBC.assertEmpty(stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1"));
0: 		conn.commit();
1: 
1: 		stmt.execute("drop table t1");
1: 		stmt.execute("create table t1 (s int)");
0: 		conn.commit();
1: 
1: 		
0: 		try {
0:                 	stmt.executeQuery("select (insertstatic()) from sys.systables where tablename = 'SYSCONGLOMERATES'"); 
0: 		} catch (SQLException sqle) {
0: 			assertSQLState("42X51", sqle);
1: 		}
1: 		
1: 
0:                 JDBC.assertEmpty(stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1"));
1: 
1: 		JDBC.assertEmpty(stmt.executeQuery("select * from t1"));
1: 		stmt.execute("drop table t1");
0: 		conn.commit();
1: 	
0: 		JDBC.assertEmpty(stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1"));
0: 		conn.commit();
1: 
1: 		stmt.execute("create table test_tab (x int)");
1: 		stmt.executeUpdate("insert into test_tab values (1)");
0: 		conn.commit();
1: 
0: 		JDBC.assertSingleValueResultSet(stmt.executeQuery("select count(*) from syscs_diag.lock_table"), "0");
1: 		JDBC.assertSingleValueResultSet(stmt.executeQuery("select count(*) from sys.sysviews"), "0");
0: 		JDBC.assertSingleValueResultSet(stmt.executeQuery("select count(*) from syscs_diag.lock_table"), "0");
1: 		stmt.execute("insert into test_tab values (2)");
1: 
1:                 ResultSet rs = stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1");
1: 		
1: 		String expectedValues[][] = {{"ROW", "X", "TEST_TAB", "(1,8)", "GRANT" }, {"TABLE", "IX", "TEST_TAB", "Tablelock","GRANT"}};
1:                 JDBC.assertFullResultSet(rs, expectedValues);
1: 
0: 		try { 
1: 		  	stmt.execute("drop table t1");
1: 		} catch (SQLException e) {
1: 			assertSQLState("42Y55", e);
1: 		}
1: 		stmt.execute("create table t1 (x int)");
0: 		conn.commit();
1: 		
1: 		JDBC.assertEmpty(stmt.executeQuery("select * from t1"));
1: 
1: 		Connection conn1 = openDefaultConnection();
1:                 Statement stmt2 = conn1.createStatement();
1: 		stmt2.execute("create table t2 (x int)");
1: 		stmt2.execute("drop table t2");
1: 		stmt2.close();
1: 		conn1.close();
1: 
1: 		stmt.execute("drop table test_tab");
1: 		stmt.execute("create table test_tab (x int)");
1: 		stmt.execute("insert into test_tab values (1)");
0: 		conn.commit();
1: 
1: 		PreparedStatement ps = prepareStatement("update test_tab set x=2 where x=?");
1: 		ps.setCursorName("cursor1");
1: 		ps.setInt(1, 1);
1: 
0: 		JDBC.assertSingleValueResultSet(stmt.executeQuery("select count(*) from syscs_diag.lock_table"), "0");
1: 		ps.executeUpdate();
1: 		
1: 		rs = stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1");
1: 		String expectedValues1[][] = {{"ROW", "X", "TEST_TAB", "(1,7)", "GRANT" }, {"TABLE", "IX", "TEST_TAB", "Tablelock","GRANT"}};
1:                 JDBC.assertFullResultSet(rs, expectedValues1);
0: 		conn.commit();
1: 
1: 		
1: 		stmt.execute("create table t (c1 int not null primary key, c2 int references t)");
1: 		stmt.executeUpdate("insert into t values (1,1)");
1: 		stmt.executeUpdate("insert into t values (2,1)");
0: 		conn.commit();
1: 
1: 		ps = prepareStatement("select * from t where c1 = ? and c2 = ?");
1: 		ps.setCursorName("ps");
0: 		JDBC.assertEmpty(stmt.executeQuery("select * from syscs_diag.lock_table"));
1: 
1: 		
1: 		stmt.execute("create table x(c1 int)");
1: 		stmt.execute("drop table x");
0: 		conn.commit();
1: 
1: 		ps = prepareStatement("insert into t values (3,2)");
1: 		ps.setCursorName("pi");
0: 		JDBC.assertEmpty(stmt.executeQuery("select * from syscs_diag.lock_table"));
0: 		conn.commit();
1: 
1: 
1: 		stmt.execute("create table x(c1 int)");
1: 		stmt.execute("drop table x");
0: 		conn.commit();
1: 
1: 		ps = prepareStatement("update t set c2 = c1, c1 = c2");
1: 		ps.setCursorName("p1");
0: 		JDBC.assertEmpty(stmt.executeQuery("select * from syscs_diag.lock_table"));
0: 		conn.commit();
1: 
1: 		
1: 		stmt.execute("create table x(c1 int)");
1: 		stmt.execute("drop table x");
0: 		conn.commit();
1: 
1: 		ps = prepareStatement("delete from t");
1: 		ps.setCursorName("p1");
0: 		JDBC.assertEmpty(stmt.executeQuery("select * from syscs_diag.lock_table"));
0: 		conn.commit();
1: 		
1: 		stmt.execute("create trigger update_of_t after update on t for each row values 2");
1: 		stmt.execute("create trigger insert_of_t after insert on t for each row values 3");
0: 		conn.commit();
1: 	
1: 		ps = prepareStatement("update t set c2=2 where c1=2");
1: 		ps.setCursorName("pu");
0: 		JDBC.assertEmpty(stmt.executeQuery("select * from syscs_diag.lock_table"));
0: 		conn.commit();
1: 
1: 		rs.close();
1: 		ps.close();
1: 		stmt.close();
1:        }
1: 
1:        
0:         private static int getANumber()
1: 	{
0: 		return 1;
1: 	}
1:         
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:fc7482f
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Sets the auto commit to false.
1:      */
1:     protected void initializeConnection(Connection conn) throws SQLException {
0:         conn.setAutoCommit(false);
0:     }
1: 	    Statement stmt = createStatement();
/////////////////////////////////////////////////////////////////////////
0:         
0:         stmt.close();
1:         commit();
/////////////////////////////////////////////////////////////////////////
0:             
1:             Statement stmt = createStatement();
/////////////////////////////////////////////////////////////////////////
1: 		commit();
1: 		commit();
/////////////////////////////////////////////////////////////////////////
1: 		commit();
1: 		commit();
1: 		commit();
/////////////////////////////////////////////////////////////////////////
1: 		commit();
/////////////////////////////////////////////////////////////////////////
1:         conn1.commit();
1: 		commit();
/////////////////////////////////////////////////////////////////////////
1: 		commit();
1: 		commit();
/////////////////////////////////////////////////////////////////////////
1: 		commit();
1: 		commit();
1: 		commit();
1: 		commit();
1: 		commit();
1: 		commit();
1: 		commit();
1: 		commit();
============================================================================