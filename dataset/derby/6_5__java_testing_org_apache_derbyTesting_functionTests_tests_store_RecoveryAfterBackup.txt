2:2fb9556: /*
2:2fb9556: 
1:2fb9556:    Derby - Class org.apache.derbyTesting.functionTests.store.LogChecksumSetup
1:2fb9556: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:2fb9556: 
1:2fb9556:       http://www.apache.org/licenses/LICENSE-2.0
1:2fb9556: 
1:2fb9556:    Unless required by applicable law or agreed to in writing, software
1:2fb9556:    distributed under the License is distributed on an "AS IS" BASIS,
1:2fb9556:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2fb9556:    See the License for the specific language governing permissions and
1:2fb9556:    limitations under the License.
1:2fb9556: 
1:2fb9556:  */
1:2fb9556: 
1:2fb9556: package org.apache.derbyTesting.functionTests.tests.store;
1:2fb9556: 
1:2fb9556: import java.sql.Connection;
1:2fb9556: import java.sql.ResultSet;
1:2fb9556: import java.sql.SQLException;
1:2fb9556: import java.sql.Statement;
1:2fb9556: import java.util.Properties;
1:2fb9556: 
1:2fb9556: import javax.sql.DataSource;
1:2fb9556: 
1:2fb9556: import org.apache.derby.tools.ij;
1:2fb9556: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:2fb9556: 
1:bfde6e0: /**
1:2fb9556:  * This test contains a recovery for a database that did recovery just
1:2fb9556:  * before it went down. After recovery more records are inserted into
1:2fb9556:  * the database before the database is shutdown.  Then, roll-forward
1:2fb9556:  * recovery of the database from the backup is performed.  It is then
1:2fb9556:  * checked that the records inserted after the first recovery is still
1:2fb9556:  * present.  This test was made to recreate the problem in DERBY-298.
1:2fb9556:  * The test should be run after store/RecoveryAfterBackupSetup.java.
1:2fb9556:  * 
1:2fb9556:  * @see RecoveryAfterBackupSetup
1:2fb9556:  */
1:2fb9556: public class RecoveryAfterBackup
1:2fb9556: {
1:2fb9556: 
1:2fb9556:     public static void main(String[] argv) throws Throwable 
1:2fb9556:     {
1:2fb9556:         try {
1:2fb9556:             ij.getPropertyArg(argv); 
1:2fb9556:             Connection conn = ij.startJBMS();
1:2fb9556:             conn.setAutoCommit(true);
1:2fb9556:             
1:2fb9556:             // After recovery table should contain two records with
1:2fb9556:             // values 0 and 1
1:2fb9556:             Statement s = conn.createStatement();
1:2fb9556:             ResultSet rs = s.executeQuery("SELECT COUNT(a), SUM(a) FROM t1");
1:2fb9556:             while (rs.next()) {
1:2fb9556:                 int count = rs.getInt(1);
1:2fb9556:                 int sum = rs.getInt(2);
1:2fb9556:                 if (count!=2 || sum!=1) {
1:2fb9556:                     System.out.print("Unexpected initial database state: ");
1:2fb9556:                 }
1:2fb9556:                 System.out.println("Count: " + count + " Sum: " + sum);
1:2fb9556:             }
1:2fb9556: 
1:2fb9556:             // Insert some more records
1:2fb9556:             System.out.println("Inserting records ...");
1:2fb9556:             s.execute ("INSERT INTO t1 SELECT a+2 FROM t1");
1:2fb9556:             s.execute ("INSERT INTO t1 SELECT a+4 FROM t1");
1:2fb9556:             s.execute ("INSERT INTO t1 SELECT a+8 FROM t1");
1:2fb9556:             s.execute ("INSERT INTO t1 SELECT a+16 FROM t1");
1:2fb9556:             s.execute ("INSERT INTO t1 SELECT a+32 FROM t1");
1:2fb9556:             s.execute ("INSERT INTO t1 SELECT a+64 FROM t1");
1:2fb9556:             s.execute ("INSERT INTO t1 SELECT a+128 FROM t1");
1:2fb9556: 
1:2fb9556:             // Shut down database
1:2fb9556:             System.out.println("Shutting down database ...");
1:2fb9556:             try {
1:c12c97d:             	TestUtil.getConnection("", "shutdown=true");
1:b9a2c36:             } catch(SQLException sqle) {
1:b9a2c36:                 if (sqle.getSQLState() != null 
1:b9a2c36:                     && sqle.getSQLState().equals("XJ015")) {
1:b9a2c36: 					System.out.println("Database shutdown completed");
1:b9a2c36:                 } else {
1:b9a2c36:                     throw sqle;
1:b9a2c36:                 }
1:2fb9556:             }
1:2fb9556: 
1:2fb9556:             // Start up with rollforward-recovery
1:2fb9556:             System.out.println("Starting restore with roll-forward recovery..");
1:c12c97d:             String dbName = "hairynosedwombat";
1:c12c97d:             String connAttrs = 
1:c12c97d:             	"rollForwardRecoveryFrom=extinout/mybackup/hairynosedwombat";
1:c12c97d:             conn = TestUtil.getConnection(dbName, connAttrs);
1:2fb9556: 
1:2fb9556:             // After restore table should contain all records inserted above
1:2fb9556:             System.out.println("Verifying database ...");
1:2fb9556:             s = conn.createStatement();
1:2fb9556:             rs = s.executeQuery("SELECT COUNT(a), SUM(a) FROM t1");
1:2fb9556:             while (rs.next()) {
1:2fb9556:                 int count = rs.getInt(1);
1:2fb9556:                 int sum = rs.getInt(2);
1:2fb9556:                 if (count!=256 || sum!=256*255/2) { // sum 0..n = n*(n-1)/2
1:2fb9556:                     System.out.print("Test FAILED: ");
1:2fb9556:                 }
1:2fb9556:                 System.out.println("Count: " + count + " Sum: " + sum);
1:2fb9556:             }
1:2fb9556: 
1:2fb9556:         } catch (SQLException sqle) {
1:2fb9556:             org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, 
1:2fb9556:                                                                     sqle);
1:2fb9556:             sqle.printStackTrace(System.out);
1:2fb9556:         }
1:2fb9556:     }
1:2fb9556: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:bfde6e0
/////////////////////////////////////////////////////////////////////////
1: /**
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c12c97d
/////////////////////////////////////////////////////////////////////////
1:             	TestUtil.getConnection("", "shutdown=true");
/////////////////////////////////////////////////////////////////////////
1:             String dbName = "hairynosedwombat";
1:             String connAttrs = 
1:             	"rollForwardRecoveryFrom=extinout/mybackup/hairynosedwombat";
1:             conn = TestUtil.getConnection(dbName, connAttrs);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:b9a2c36
/////////////////////////////////////////////////////////////////////////
1:             } catch(SQLException sqle) {
1:                 if (sqle.getSQLState() != null 
1:                     && sqle.getSQLState().equals("XJ015")) {
1: 					System.out.println("Database shutdown completed");
1:                 } else {
1:                     throw sqle;
1:                 }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:2fb9556
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.store.LogChecksumSetup
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Properties;
1: 
1: import javax.sql.DataSource;
1: 
1: import org.apache.derby.tools.ij;
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: 
1: /*
1:  * This test contains a recovery for a database that did recovery just
1:  * before it went down. After recovery more records are inserted into
1:  * the database before the database is shutdown.  Then, roll-forward
1:  * recovery of the database from the backup is performed.  It is then
1:  * checked that the records inserted after the first recovery is still
1:  * present.  This test was made to recreate the problem in DERBY-298.
1:  * The test should be run after store/RecoveryAfterBackupSetup.java.
1:  * 
0:  * @author oystein.grovlen@sun.com
1:  * @see RecoveryAfterBackupSetup
1:  */
1: public class RecoveryAfterBackup
1: {
1: 
1:     public static void main(String[] argv) throws Throwable 
1:     {
1:         try {
1:             ij.getPropertyArg(argv); 
1:             Connection conn = ij.startJBMS();
1:             conn.setAutoCommit(true);
1:             
1:             // After recovery table should contain two records with
1:             // values 0 and 1
1:             Statement s = conn.createStatement();
1:             ResultSet rs = s.executeQuery("SELECT COUNT(a), SUM(a) FROM t1");
1:             while (rs.next()) {
1:                 int count = rs.getInt(1);
1:                 int sum = rs.getInt(2);
1:                 if (count!=2 || sum!=1) {
1:                     System.out.print("Unexpected initial database state: ");
1:                 }
1:                 System.out.println("Count: " + count + " Sum: " + sum);
1:             }
1: 
1:             // Insert some more records
1:             System.out.println("Inserting records ...");
1:             s.execute ("INSERT INTO t1 SELECT a+2 FROM t1");
1:             s.execute ("INSERT INTO t1 SELECT a+4 FROM t1");
1:             s.execute ("INSERT INTO t1 SELECT a+8 FROM t1");
1:             s.execute ("INSERT INTO t1 SELECT a+16 FROM t1");
1:             s.execute ("INSERT INTO t1 SELECT a+32 FROM t1");
1:             s.execute ("INSERT INTO t1 SELECT a+64 FROM t1");
1:             s.execute ("INSERT INTO t1 SELECT a+128 FROM t1");
1: 
1:             // Shut down database
0:             Properties shutdownAttrs = new Properties();
0:             shutdownAttrs.setProperty("shutdownDatabase", "shutdown");
1:             System.out.println("Shutting down database ...");
1:             try {
0:                 DataSource ds = TestUtil.getDataSource(shutdownAttrs);
0:                 ds.getConnection();
0:             } catch (Throwable ith) {
0:                 ith.printStackTrace();
1:             }
1: 
1:             // Start up with rollforward-recovery
1:             System.out.println("Starting restore with roll-forward recovery..");
0:             Properties restoreAttrs = new Properties();
0:             restoreAttrs.setProperty("DatabaseName", "hairynosedwombat");
0:             restoreAttrs.setProperty("connectionAttributes", 
0:                   "rollForwardRecoveryFrom=extinout/mybackup/hairynosedwombat");
0:             DataSource ds = TestUtil.getDataSource(restoreAttrs);
0:             conn = ds.getConnection();
1: 
1:             // After restore table should contain all records inserted above
1:             System.out.println("Verifying database ...");
1:             s = conn.createStatement();
1:             rs = s.executeQuery("SELECT COUNT(a), SUM(a) FROM t1");
1:             while (rs.next()) {
1:                 int count = rs.getInt(1);
1:                 int sum = rs.getInt(2);
1:                 if (count!=256 || sum!=256*255/2) { // sum 0..n = n*(n-1)/2
1:                     System.out.print("Test FAILED: ");
1:                 }
1:                 System.out.println("Count: " + count + " Sum: " + sum);
1:             }
1: 
1:         } catch (SQLException sqle) {
1:             org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, 
1:                                                                     sqle);
1:             sqle.printStackTrace(System.out);
1:         }
1:     }
1: }
============================================================================