1:fe77ca5: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.classfile.ClassEnumeration
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.services.classfile;
1:fe77ca5: 
1:fe77ca5: import java.util.Enumeration;
1:fe77ca5: import java.util.HashSet;
1:fe77ca5: import java.util.StringTokenizer;
1:fe77ca5: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5: 	An enumeration that filters only classes
1:fe77ca5: 	from the enumeration of the class pool.
1:fe77ca5: 
1:fe77ca5: 	Code has been added to also include classes referenced in method and
1:fe77ca5: 	field signatures.
1:fe77ca5: */
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: class ClassEnumeration implements Enumeration {
1:fe77ca5: 	ClassHolder	cpt;
1:fe77ca5: 	Enumeration			inner;
1:fe77ca5: 	CONSTANT_Index_info	position;
1:996ca72: 	HashSet<String>           foundClasses;
1:fe77ca5:     Enumeration         classList;
1:fe77ca5: 
1:fe77ca5:     ClassEnumeration(   ClassHolder cpt,
1:fe77ca5:                         Enumeration e,
1:fe77ca5:                         Enumeration methods,
1:fe77ca5:                         Enumeration fields)
1:fe77ca5:     {
1:fe77ca5: 		this.cpt = cpt;
1:fe77ca5: 		inner = e;
1:996ca72: 		foundClasses = new HashSet<String>(30, 0.8f);
1:fe77ca5: 		findMethodReferences(methods, foundClasses);
1:fe77ca5: 		findFieldReferences(fields, foundClasses);
1:fe77ca5: 		findClassReferences(foundClasses);
1:fe77ca5: 		classList = java.util.Collections.enumeration(foundClasses);
1:fe77ca5: 
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public boolean hasMoreElements() {
1:fe77ca5: 	    return classList.hasMoreElements();
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	// uses cpt and inner
1:996ca72: 	private void findClassReferences(HashSet<String> foundClasses)
1:fe77ca5: 	{
1:fe77ca5: 
1:fe77ca5: 		ConstantPoolEntry	item;
1:fe77ca5: 		CONSTANT_Index_info	ref;
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 		while (inner.hasMoreElements())
1:fe77ca5: 		{
1:fe77ca5: 			item = (ConstantPoolEntry) inner.nextElement();
1:fe77ca5: 			if (item == null)
1:fe77ca5: 				continue;
1:fe77ca5: 			if (item.getTag() == VMDescriptor.CONSTANT_Class)
1:fe77ca5: 			{
1:fe77ca5: 				ref = (CONSTANT_Index_info) item;
1:fe77ca5: 
1:fe77ca5: 				String className = cpt.className(ref.getIndex());
1:fe77ca5: 
1:fe77ca5: 				// if this is an array type, distillClasses can
1:fe77ca5: 				// handle it
1:fe77ca5:                 if (className.startsWith("["))
1:fe77ca5:                 {
1:fe77ca5:                    distillClasses(className, foundClasses);
1:fe77ca5:                    continue;
1:fe77ca5:                 }
1:fe77ca5: 
1:fe77ca5:                 // now we've got either a primitive type or a classname
1:fe77ca5:                 // primitive types are all a single char
1:fe77ca5: 
1:fe77ca5:                 if (className.length() > 1)
1:fe77ca5:                 {
1:fe77ca5:                     //we've got a class
1:fe77ca5:                     if (className.startsWith("java"))
1:fe77ca5:                     {
1:fe77ca5:                         //skip it
1:fe77ca5:                         continue;
1:fe77ca5:                     }
1:fe77ca5: 
1:fe77ca5:                     foundClasses.add(className);
1:fe77ca5:                 }
1:fe77ca5: 			}
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	private void findMethodReferences(  Enumeration methods,
1:996ca72: 	                                    HashSet<String> foundClasses)
1:fe77ca5: 	{
1:fe77ca5: 	    while (methods.hasMoreElements())
1:fe77ca5: 	    {
1:fe77ca5: 	        ClassMember member = (ClassMember) methods.nextElement();
1:fe77ca5: 	        String description = member.getDescriptor();
1:fe77ca5: 	        distillClasses(description, foundClasses);
1:fe77ca5: 	    }
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	private void findFieldReferences(   Enumeration fields,
1:996ca72: 	                                    HashSet<String> foundClasses)
1:fe77ca5: 	{
1:fe77ca5: 	    while (fields.hasMoreElements())
1:fe77ca5: 	    {
1:fe77ca5: 	        ClassMember member = (ClassMember) fields.nextElement();
1:fe77ca5: 	        String description = member.getDescriptor();
1:fe77ca5: 	        distillClasses(description, foundClasses);
1:fe77ca5: 	    }
1:fe77ca5: 	}
1:fe77ca5: 
1:996ca72: 	void distillClasses(String fieldOrMethodSig, HashSet<String> foundClasses)
1:fe77ca5: 	{
1:fe77ca5: 	    if (fieldOrMethodSig == null || fieldOrMethodSig.length() < 1)
1:fe77ca5: 	    {
1:fe77ca5: 	        //empty string
1:fe77ca5: 	        return;
1:fe77ca5: 	    }
1:fe77ca5: 
1:fe77ca5: 	    if (fieldOrMethodSig.charAt(0) != '(')
1:fe77ca5: 	    {
1:fe77ca5:     	    // first time through, we're dealing with a field here
1:fe77ca5:     	    // otherwise, it is a token from a method signature
1:fe77ca5: 
1:fe77ca5:             int classNameStart = fieldOrMethodSig.indexOf('L');
1:fe77ca5: 
1:fe77ca5:             if (classNameStart == -1)
1:fe77ca5:             {
1:fe77ca5:                 // no class in the type, so stop
1:fe77ca5:                 return;
1:fe77ca5:             }
1:fe77ca5: 
1:fe77ca5:             // chop off any leading ['s or other Java-primitive type
1:fe77ca5:             // signifiers (like I or L) *AND* substitute the dots
1:fe77ca5: 	        String fieldType =
1:fe77ca5: 	            fieldOrMethodSig.substring(classNameStart + 1).replace('/', '.');
1:fe77ca5: 
1:fe77ca5:             // we have to check for the semi-colon in case we are
1:fe77ca5:             // actually looking at a token from a method signature
1:fe77ca5: 	        if (fieldType.endsWith(";"))
1:fe77ca5: 	        {
1:fe77ca5:     	        fieldType = fieldType.substring(0,fieldType.length()-1);
1:fe77ca5:             }
1:fe77ca5: 
1:fe77ca5: 	        if (fieldType.startsWith("java"))
1:fe77ca5: 	        {
1:fe77ca5: 	            return;     // it's a java base class and we don't care about
1:fe77ca5: 	                        // that either
1:fe77ca5: 	        }
1:fe77ca5: 
1:fe77ca5:             foundClasses.add(fieldType);
1:fe77ca5:             return;
1:fe77ca5:          }
1:fe77ca5:          else
1:fe77ca5:          {
1:fe77ca5:             // it's a method signature
1:fe77ca5:             StringTokenizer tokens = new StringTokenizer(fieldOrMethodSig, "();[");
1:fe77ca5:             while (tokens.hasMoreElements())
1:fe77ca5:             {
1:fe77ca5:                 String aToken = (String) tokens.nextToken();
1:fe77ca5:                 // because of the semi-colon delimiter in the tokenizer, we
1:fe77ca5:                 // can have only one class name per token and it must be the
1:fe77ca5:                 // last item in the token
1:fe77ca5:                 int classNameStart = aToken.indexOf('L');
1:fe77ca5:                 if (classNameStart != -1)
1:fe77ca5:                 {
1:fe77ca5:                     distillClasses(aToken, foundClasses);
1:fe77ca5:                 }
1:fe77ca5:                 else
1:fe77ca5:                 {
1:fe77ca5:                     continue;
1:fe77ca5:                 }
1:fe77ca5:             }
1:fe77ca5:          }
1:fe77ca5:      }
1:fe77ca5: 
1:fe77ca5: 	public Object nextElement() {
1:fe77ca5:         return classList.nextElement();
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:996ca72
/////////////////////////////////////////////////////////////////////////
1: 	HashSet<String>           foundClasses;
/////////////////////////////////////////////////////////////////////////
1: 		foundClasses = new HashSet<String>(30, 0.8f);
/////////////////////////////////////////////////////////////////////////
1: 	private void findClassReferences(HashSet<String> foundClasses)
/////////////////////////////////////////////////////////////////////////
1: 	                                    HashSet<String> foundClasses)
/////////////////////////////////////////////////////////////////////////
1: 	                                    HashSet<String> foundClasses)
/////////////////////////////////////////////////////////////////////////
1: 	void distillClasses(String fieldOrMethodSig, HashSet<String> foundClasses)
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.classfile.ClassEnumeration
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.classfile;
1: 
1: import java.util.Enumeration;
1: import java.util.HashSet;
1: import java.util.StringTokenizer;
1: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1: 
1: /**
1: 	An enumeration that filters only classes
1: 	from the enumeration of the class pool.
1: 
1: 	Code has been added to also include classes referenced in method and
1: 	field signatures.
1: */
1: 
1: 
1: class ClassEnumeration implements Enumeration {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 	ClassHolder	cpt;
1: 	Enumeration			inner;
1: 	CONSTANT_Index_info	position;
0: 	HashSet           foundClasses;
1:     Enumeration         classList;
1: 
1:     ClassEnumeration(   ClassHolder cpt,
1:                         Enumeration e,
1:                         Enumeration methods,
1:                         Enumeration fields)
1:     {
1: 		this.cpt = cpt;
1: 		inner = e;
0: 		foundClasses = new HashSet(30, 0.8f);
1: 		findMethodReferences(methods, foundClasses);
1: 		findFieldReferences(fields, foundClasses);
1: 		findClassReferences(foundClasses);
1: 		classList = java.util.Collections.enumeration(foundClasses);
1: 
1: 	}
1: 
1: 	public boolean hasMoreElements() {
1: 	    return classList.hasMoreElements();
1: 	}
1: 
1: 	// uses cpt and inner
0: 	private void findClassReferences(HashSet foundClasses)
1: 	{
1: 
1: 		ConstantPoolEntry	item;
1: 		CONSTANT_Index_info	ref;
1: 
1: 
1: 		while (inner.hasMoreElements())
1: 		{
1: 			item = (ConstantPoolEntry) inner.nextElement();
1: 			if (item == null)
1: 				continue;
1: 			if (item.getTag() == VMDescriptor.CONSTANT_Class)
1: 			{
1: 				ref = (CONSTANT_Index_info) item;
1: 
1: 				String className = cpt.className(ref.getIndex());
1: 
1: 				// if this is an array type, distillClasses can
1: 				// handle it
1:                 if (className.startsWith("["))
1:                 {
1:                    distillClasses(className, foundClasses);
1:                    continue;
1:                 }
1: 
1:                 // now we've got either a primitive type or a classname
1:                 // primitive types are all a single char
1: 
1:                 if (className.length() > 1)
1:                 {
1:                     //we've got a class
1:                     if (className.startsWith("java"))
1:                     {
1:                         //skip it
1:                         continue;
1:                     }
1: 
1:                     foundClasses.add(className);
1:                 }
1: 			}
1: 		}
1: 
1: 	}
1: 
1: 	private void findMethodReferences(  Enumeration methods,
0: 	                                    HashSet foundClasses)
1: 	{
1: 	    while (methods.hasMoreElements())
1: 	    {
1: 	        ClassMember member = (ClassMember) methods.nextElement();
1: 	        String description = member.getDescriptor();
1: 	        distillClasses(description, foundClasses);
1: 	    }
1: 	}
1: 
1: 	private void findFieldReferences(   Enumeration fields,
0: 	                                    HashSet foundClasses)
1: 	{
1: 	    while (fields.hasMoreElements())
1: 	    {
1: 	        ClassMember member = (ClassMember) fields.nextElement();
1: 	        String description = member.getDescriptor();
1: 	        distillClasses(description, foundClasses);
1: 	    }
1: 	}
1: 
0: 	void distillClasses(String fieldOrMethodSig, HashSet foundClasses)
1: 	{
1: 	    if (fieldOrMethodSig == null || fieldOrMethodSig.length() < 1)
1: 	    {
1: 	        //empty string
1: 	        return;
1: 	    }
1: 
1: 	    if (fieldOrMethodSig.charAt(0) != '(')
1: 	    {
1:     	    // first time through, we're dealing with a field here
1:     	    // otherwise, it is a token from a method signature
1: 
1:             int classNameStart = fieldOrMethodSig.indexOf('L');
1: 
1:             if (classNameStart == -1)
1:             {
1:                 // no class in the type, so stop
1:                 return;
1:             }
1: 
1:             // chop off any leading ['s or other Java-primitive type
1:             // signifiers (like I or L) *AND* substitute the dots
1: 	        String fieldType =
1: 	            fieldOrMethodSig.substring(classNameStart + 1).replace('/', '.');
1: 
1:             // we have to check for the semi-colon in case we are
1:             // actually looking at a token from a method signature
1: 	        if (fieldType.endsWith(";"))
1: 	        {
1:     	        fieldType = fieldType.substring(0,fieldType.length()-1);
1:             }
1: 
1: 	        if (fieldType.startsWith("java"))
1: 	        {
1: 	            return;     // it's a java base class and we don't care about
1: 	                        // that either
1: 	        }
1: 
1:             foundClasses.add(fieldType);
1:             return;
1:          }
1:          else
1:          {
1:             // it's a method signature
1:             StringTokenizer tokens = new StringTokenizer(fieldOrMethodSig, "();[");
1:             while (tokens.hasMoreElements())
1:             {
1:                 String aToken = (String) tokens.nextToken();
1:                 // because of the semi-colon delimiter in the tokenizer, we
1:                 // can have only one class name per token and it must be the
1:                 // last item in the token
1:                 int classNameStart = aToken.indexOf('L');
1:                 if (classNameStart != -1)
1:                 {
1:                     distillClasses(aToken, foundClasses);
1:                 }
1:                 else
1:                 {
1:                     continue;
1:                 }
1:             }
1:          }
1:      }
1: 
1: 	public Object nextElement() {
1:         return classList.nextElement();
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.classfile;
0: 
0: import java.util.Enumeration;
0: import java.util.HashSet;
0: import java.util.StringTokenizer;
0: import org.apache.derby.iapi.services.classfile.VMDescriptor;
0: 
0: /**
0: 	An enumeration that filters only classes
0: 	from the enumeration of the class pool.
0: 
0: 	Code has been added to also include classes referenced in method and
0: 	field signatures.
0: */
0: 
0: 
0: class ClassEnumeration implements Enumeration {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	ClassHolder	cpt;
0: 	Enumeration			inner;
0: 	CONSTANT_Index_info	position;
0: 	HashSet           foundClasses;
0:     Enumeration         classList;
0: 
0:     ClassEnumeration(   ClassHolder cpt,
0:                         Enumeration e,
0:                         Enumeration methods,
0:                         Enumeration fields)
0:     {
0: 		this.cpt = cpt;
0: 		inner = e;
0: 		foundClasses = new HashSet(30, 0.8f);
0: 		findMethodReferences(methods, foundClasses);
0: 		findFieldReferences(fields, foundClasses);
0: 		findClassReferences(foundClasses);
0: 		classList = java.util.Collections.enumeration(foundClasses);
0: 
0: 	}
0: 
0: 	public boolean hasMoreElements() {
0: 	    return classList.hasMoreElements();
0: 	}
0: 
0: 	// uses cpt and inner
0: 	private void findClassReferences(HashSet foundClasses)
0: 	{
0: 
0: 		ConstantPoolEntry	item;
0: 		CONSTANT_Index_info	ref;
0: 
0: 
0: 		while (inner.hasMoreElements())
0: 		{
0: 			item = (ConstantPoolEntry) inner.nextElement();
0: 			if (item == null)
0: 				continue;
0: 			if (item.getTag() == VMDescriptor.CONSTANT_Class)
0: 			{
0: 				ref = (CONSTANT_Index_info) item;
0: 
0: 				String className = cpt.className(ref.getIndex());
0: 
0: 				// if this is an array type, distillClasses can
0: 				// handle it
0:                 if (className.startsWith("["))
0:                 {
0:                    distillClasses(className, foundClasses);
0:                    continue;
0:                 }
0: 
0:                 // now we've got either a primitive type or a classname
0:                 // primitive types are all a single char
0: 
0:                 if (className.length() > 1)
0:                 {
0:                     //we've got a class
0:                     if (className.startsWith("java"))
0:                     {
0:                         //skip it
0:                         continue;
0:                     }
0: 
0:                     foundClasses.add(className);
0:                 }
0: 			}
0: 		}
0: 
0: 	}
0: 
0: 	private void findMethodReferences(  Enumeration methods,
0: 	                                    HashSet foundClasses)
0: 	{
0: 	    while (methods.hasMoreElements())
0: 	    {
0: 	        ClassMember member = (ClassMember) methods.nextElement();
0: 	        String description = member.getDescriptor();
0: 	        distillClasses(description, foundClasses);
0: 	    }
0: 	}
0: 
0: 	private void findFieldReferences(   Enumeration fields,
0: 	                                    HashSet foundClasses)
0: 	{
0: 	    while (fields.hasMoreElements())
0: 	    {
0: 	        ClassMember member = (ClassMember) fields.nextElement();
0: 	        String description = member.getDescriptor();
0: 	        distillClasses(description, foundClasses);
0: 	    }
0: 	}
0: 
0: 	void distillClasses(String fieldOrMethodSig, HashSet foundClasses)
0: 	{
0: 	    if (fieldOrMethodSig == null || fieldOrMethodSig.length() < 1)
0: 	    {
0: 	        //empty string
0: 	        return;
0: 	    }
0: 
0: 	    if (fieldOrMethodSig.charAt(0) != '(')
0: 	    {
0:     	    // first time through, we're dealing with a field here
0:     	    // otherwise, it is a token from a method signature
0: 
0:             int classNameStart = fieldOrMethodSig.indexOf('L');
0: 
0:             if (classNameStart == -1)
0:             {
0:                 // no class in the type, so stop
0:                 return;
0:             }
0: 
0:             // chop off any leading ['s or other Java-primitive type
0:             // signifiers (like I or L) *AND* substitute the dots
0: 	        String fieldType =
0: 	            fieldOrMethodSig.substring(classNameStart + 1).replace('/', '.');
0: 
0:             // we have to check for the semi-colon in case we are
0:             // actually looking at a token from a method signature
0: 	        if (fieldType.endsWith(";"))
0: 	        {
0:     	        fieldType = fieldType.substring(0,fieldType.length()-1);
0:             }
0: 
0: 	        if (fieldType.startsWith("java"))
0: 	        {
0: 	            return;     // it's a java base class and we don't care about
0: 	                        // that either
0: 	        }
0: 
0:             foundClasses.add(fieldType);
0:             return;
0:          }
0:          else
0:          {
0:             // it's a method signature
0:             StringTokenizer tokens = new StringTokenizer(fieldOrMethodSig, "();[");
0:             while (tokens.hasMoreElements())
0:             {
0:                 String aToken = (String) tokens.nextToken();
0:                 // because of the semi-colon delimiter in the tokenizer, we
0:                 // can have only one class name per token and it must be the
0:                 // last item in the token
0:                 int classNameStart = aToken.indexOf('L');
0:                 if (classNameStart != -1)
0:                 {
0:                     distillClasses(aToken, foundClasses);
0:                 }
0:                 else
0:                 {
0:                     continue;
0:                 }
0:             }
0:          }
0:      }
0: 
0: 	public Object nextElement() {
0:         return classList.nextElement();
0: 	}
0: 
0: }
============================================================================