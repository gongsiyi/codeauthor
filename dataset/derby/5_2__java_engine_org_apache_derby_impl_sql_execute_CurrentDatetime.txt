1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.CurrentDatetime
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: /* can't import due to name overlap:
1:eac0369: import java.util.Date;
1:eac0369: */
1:eac0369: import java.sql.Date;
1:eac0369: import java.sql.Time;
1:eac0369: import java.sql.Timestamp;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	CurrentDatetime provides execution support for ensuring
1:eac0369: 	that the current datetime is evaluated only once for a
1:eac0369: 	statement. The same value is returned for every
1:eac0369: 	CURRENT_DATE, CURRENT_TIME, and CURRENT_TIMESTAMP in the
1:eac0369: 	statement.
1:eac0369: 	<p>
1:eac0369: 	This is expected to be used by an activation and its
1:eac0369: 	result set, and so 'forget' must be called whenever you
1:eac0369: 	want to reuse the CurrentDatetime object for additional
1:eac0369: 	executions of the statement.
1:eac0369: 
1:eac0369:  */
1:eac0369: public class CurrentDatetime {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Holds the current datetime on the first evaluation of a current function
1:eac0369: 		in a statement, which contains all available fields.
1:eac0369: 	 */
1:eac0369: 	private java.util.Date currentDatetime;
1:eac0369: 	/**
1:eac0369: 		Holds the SQL DATE version of the current datetime.
1:eac0369: 	 */
1:eac0369: 	private Date currentDate;
1:eac0369: 	/**
1:eac0369: 		Holds the SQL TIME version of the current datetime.
1:eac0369: 	 */
1:eac0369: 	private Time currentTime;
1:eac0369: 	/**
1:eac0369: 		Holds the SQL TIMESTAMP version of the current datetime.
1:eac0369: 	 */
1:eac0369: 	private Timestamp currentTimestamp;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The constructor is public; note we wait until evaluation to
1:eac0369: 		put any values into the fields.
1:eac0369: 	 */
1:eac0369: 	public CurrentDatetime() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// class implementation
1:eac0369: 	final private void setCurrentDatetime() {
1:eac0369: 		if (currentDatetime == null)
1:eac0369: 			currentDatetime = new java.util.Date();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// class interface
1:eac0369: 
1:eac0369: 	public Date getCurrentDate() {
1:eac0369: 		if (currentDate == null) {
1:eac0369: 			setCurrentDatetime();
1:eac0369: 			currentDate = new Date(currentDatetime.getTime());
1:eac0369: 		}
1:eac0369: 		return currentDate;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Time getCurrentTime() {
1:eac0369: 		if (currentTime == null) {
1:eac0369: 			setCurrentDatetime();
1:eac0369: 			currentTime = new Time(currentDatetime.getTime());
1:eac0369: 		}
1:eac0369: 		return currentTime;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Timestamp getCurrentTimestamp() {
1:eac0369: 		if (currentTimestamp == null) {
1:eac0369: 			setCurrentDatetime();
1:eac0369: 			currentTimestamp = new Timestamp(currentDatetime.getTime());
1:eac0369: 		}
1:eac0369: 		return currentTimestamp;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		This is called prior to each execution of the statement, to
1:eac0369: 		ensure that it starts over with a new current datetime value.
1:eac0369: 	 */
1:eac0369: 	public void forget() {
1:eac0369: 		currentDatetime = null;
1:eac0369: 		currentDate = null;
1:eac0369: 		currentTime = null;
1:eac0369: 		currentTimestamp = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.CurrentDatetime
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: /* can't import due to name overlap:
1: import java.util.Date;
1: */
1: import java.sql.Date;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: 
1: /**
1: 	CurrentDatetime provides execution support for ensuring
1: 	that the current datetime is evaluated only once for a
1: 	statement. The same value is returned for every
1: 	CURRENT_DATE, CURRENT_TIME, and CURRENT_TIMESTAMP in the
1: 	statement.
1: 	<p>
1: 	This is expected to be used by an activation and its
1: 	result set, and so 'forget' must be called whenever you
1: 	want to reuse the CurrentDatetime object for additional
1: 	executions of the statement.
1: 
0: 	@author ames
1:  */
1: public class CurrentDatetime {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 		Holds the current datetime on the first evaluation of a current function
1: 		in a statement, which contains all available fields.
1: 	 */
1: 	private java.util.Date currentDatetime;
1: 	/**
1: 		Holds the SQL DATE version of the current datetime.
1: 	 */
1: 	private Date currentDate;
1: 	/**
1: 		Holds the SQL TIME version of the current datetime.
1: 	 */
1: 	private Time currentTime;
1: 	/**
1: 		Holds the SQL TIMESTAMP version of the current datetime.
1: 	 */
1: 	private Timestamp currentTimestamp;
1: 
1: 	/**
1: 		The constructor is public; note we wait until evaluation to
1: 		put any values into the fields.
1: 	 */
1: 	public CurrentDatetime() {
1: 	}
1: 
1: 	// class implementation
1: 	final private void setCurrentDatetime() {
1: 		if (currentDatetime == null)
1: 			currentDatetime = new java.util.Date();
1: 	}
1: 
1: 	// class interface
1: 
1: 	public Date getCurrentDate() {
1: 		if (currentDate == null) {
1: 			setCurrentDatetime();
1: 			currentDate = new Date(currentDatetime.getTime());
1: 		}
1: 		return currentDate;
1: 	}
1: 
1: 	public Time getCurrentTime() {
1: 		if (currentTime == null) {
1: 			setCurrentDatetime();
1: 			currentTime = new Time(currentDatetime.getTime());
1: 		}
1: 		return currentTime;
1: 	}
1: 
1: 	public Timestamp getCurrentTimestamp() {
1: 		if (currentTimestamp == null) {
1: 			setCurrentDatetime();
1: 			currentTimestamp = new Timestamp(currentDatetime.getTime());
1: 		}
1: 		return currentTimestamp;
1: 	}
1: 
1: 	/**
1: 		This is called prior to each execution of the statement, to
1: 		ensure that it starts over with a new current datetime value.
1: 	 */
1: 	public void forget() {
1: 		currentDatetime = null;
1: 		currentDate = null;
1: 		currentTime = null;
1: 		currentTimestamp = null;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: /* can't import due to name overlap:
0: import java.util.Date;
0: */
0: import java.sql.Date;
0: import java.sql.Time;
0: import java.sql.Timestamp;
0: 
0: /**
0: 	CurrentDatetime provides execution support for ensuring
0: 	that the current datetime is evaluated only once for a
0: 	statement. The same value is returned for every
0: 	CURRENT_DATE, CURRENT_TIME, and CURRENT_TIMESTAMP in the
0: 	statement.
0: 	<p>
0: 	This is expected to be used by an activation and its
0: 	result set, and so 'forget' must be called whenever you
0: 	want to reuse the CurrentDatetime object for additional
0: 	executions of the statement.
0: 
0: 	@author ames
0:  */
0: public class CurrentDatetime {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		Holds the current datetime on the first evaluation of a current function
0: 		in a statement, which contains all available fields.
0: 	 */
0: 	private java.util.Date currentDatetime;
0: 	/**
0: 		Holds the SQL DATE version of the current datetime.
0: 	 */
0: 	private Date currentDate;
0: 	/**
0: 		Holds the SQL TIME version of the current datetime.
0: 	 */
0: 	private Time currentTime;
0: 	/**
0: 		Holds the SQL TIMESTAMP version of the current datetime.
0: 	 */
0: 	private Timestamp currentTimestamp;
0: 
0: 	/**
0: 		The constructor is public; note we wait until evaluation to
0: 		put any values into the fields.
0: 	 */
0: 	public CurrentDatetime() {
0: 	}
0: 
0: 	// class implementation
0: 	final private void setCurrentDatetime() {
0: 		if (currentDatetime == null)
0: 			currentDatetime = new java.util.Date();
0: 	}
0: 
0: 	// class interface
0: 
0: 	public Date getCurrentDate() {
0: 		if (currentDate == null) {
0: 			setCurrentDatetime();
0: 			currentDate = new Date(currentDatetime.getTime());
0: 		}
0: 		return currentDate;
0: 	}
0: 
0: 	public Time getCurrentTime() {
0: 		if (currentTime == null) {
0: 			setCurrentDatetime();
0: 			currentTime = new Time(currentDatetime.getTime());
0: 		}
0: 		return currentTime;
0: 	}
0: 
0: 	public Timestamp getCurrentTimestamp() {
0: 		if (currentTimestamp == null) {
0: 			setCurrentDatetime();
0: 			currentTimestamp = new Timestamp(currentDatetime.getTime());
0: 		}
0: 		return currentTimestamp;
0: 	}
0: 
0: 	/**
0: 		This is called prior to each execution of the statement, to
0: 		ensure that it starts over with a new current datetime value.
0: 	 */
0: 	public void forget() {
0: 		currentDatetime = null;
0: 		currentDate = null;
0: 		currentTime = null;
0: 		currentTimestamp = null;
0: 	}
0: 
0: }
============================================================================