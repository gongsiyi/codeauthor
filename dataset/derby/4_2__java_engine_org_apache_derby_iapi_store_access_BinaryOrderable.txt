1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.BinaryOrderable
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.Orderable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /** 
1:eac0369: 
1:eac0369:   The Orderable interface represents a value that can
1:eac0369:   be linearly ordered.
1:eac0369:   <P>
1:dbed020:   Currently only supports linear (&lt;, =, &lt;=) operations.
1:eac0369:   Eventually we may want to do other types of orderings,
1:eac0369:   in which case there would probably be a number of interfaces
1:eac0369:   for each "class" of ordering.
1:eac0369:   <P>
1:eac0369:   The implementation must handle the comparison of null
1:eac0369:   values.  This may require some changes to the interface,
1:eac0369:   since (at least in some contexts) comparing a value with
1:eac0369:   null should return unknown instead of true or false.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface BinaryOrderable extends Orderable
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Compare this Orderable with a given Orderable for the purpose of
1:eac0369: 	 * index positioning.  This method treats nulls as ordered values -
1:eac0369: 	 * that is, it treats SQL null as equal to null and less than all
1:eac0369: 	 * other values.
1:eac0369: 	 *
1:eac0369: 	 * @param other		The Orderable to compare this one to.
1:eac0369: 	 *
1:dbed020: 	 * @return  &lt;0 - this Orderable is less than other.
1:eac0369: 	 * 			 0 - this Orderable equals other.
1:dbed020: 	 *			&gt;0 - this Orderable is greater than other.
1:eac0369:      *
1:eac0369:      *			The code should not explicitly look for -1, or 1.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	int binarycompare(
1:eac0369:     ObjectInput  in, 
1:eac0369:     Orderable    other) 
1:eac0369:         throws IOException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Compare this Orderable with a given Orderable for the purpose of
1:eac0369: 	 * qualification and sorting.  The caller gets to determine how nulls
1:eac0369: 	 * should be treated - they can either be ordered values or unknown
1:eac0369: 	 * values.
1:eac0369: 	 *
1:eac0369: 	 * @param op	Orderable.ORDER_OP_EQUALS means do an = comparison.
1:dbed020: 	 *				Orderable.ORDER_OP_LESSTHAN means compare this &lt; other.
1:dbed020: 	 *				Orderable.ORDER_OP_LESSOREQUALS means compare this &lt;= other.
1:eac0369: 	 * @param other	The Orderable to compare this one to.
1:eac0369: 	 * @param orderedNulls	True means to treat nulls as ordered values,
1:eac0369: 	 *						that is, treat SQL null as equal to null, and less
1:eac0369: 	 *						than all other values.
1:eac0369: 	 *						False means to treat nulls as unknown values,
1:eac0369: 	 *						that is, the result of any comparison with a null
1:eac0369: 	 *						is the UNKNOWN truth value.
1:eac0369: 	 * @param unknownRV		The return value to use if the result of the
1:eac0369: 	 *						comparison is the UNKNOWN truth value.  In other
1:eac0369: 	 *						words, if orderedNulls is false, and a null is
1:eac0369: 	 *						involved in the comparison, return unknownRV.
1:eac0369: 	 *						This parameter is not used orderedNulls is true.
1:eac0369: 	 *
1:eac0369: 	 * @return	true if the comparison is true.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	boolean binarycompare(
1:eac0369:     ObjectInput in,
1:eac0369:     int         op, 
1:eac0369:     Orderable   other,
1:eac0369:     boolean     orderedNulls, 
1:eac0369:     boolean     unknownRV)
1:eac0369: 				throws IOException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:   Currently only supports linear (&lt;, =, &lt;=) operations.
/////////////////////////////////////////////////////////////////////////
1: 	 * @return  &lt;0 - this Orderable is less than other.
1: 	 *			&gt;0 - this Orderable is greater than other.
/////////////////////////////////////////////////////////////////////////
1: 	 *				Orderable.ORDER_OP_LESSTHAN means compare this &lt; other.
1: 	 *				Orderable.ORDER_OP_LESSOREQUALS means compare this &lt;= other.
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.BinaryOrderable
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.types.Orderable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /** 
1: 
1:   The Orderable interface represents a value that can
1:   be linearly ordered.
1:   <P>
0:   Currently only supports linear (<, =, <=) operations.
1:   Eventually we may want to do other types of orderings,
1:   in which case there would probably be a number of interfaces
1:   for each "class" of ordering.
1:   <P>
1:   The implementation must handle the comparison of null
1:   values.  This may require some changes to the interface,
1:   since (at least in some contexts) comparing a value with
1:   null should return unknown instead of true or false.
1: 
1: **/
1: 
1: public interface BinaryOrderable extends Orderable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	 * Compare this Orderable with a given Orderable for the purpose of
1: 	 * index positioning.  This method treats nulls as ordered values -
1: 	 * that is, it treats SQL null as equal to null and less than all
1: 	 * other values.
1: 	 *
1: 	 * @param other		The Orderable to compare this one to.
1: 	 *
0: 	 * @return  <0 - this Orderable is less than other.
1: 	 * 			 0 - this Orderable equals other.
0: 	 *			>0 - this Orderable is greater than other.
1:      *
1:      *			The code should not explicitly look for -1, or 1.
1: 	 *
1: 	 * @exception IOException		Thrown on error
1: 	 */
1: 	int binarycompare(
1:     ObjectInput  in, 
1:     Orderable    other) 
1:         throws IOException;
1: 
1: 	/**
1: 	 * Compare this Orderable with a given Orderable for the purpose of
1: 	 * qualification and sorting.  The caller gets to determine how nulls
1: 	 * should be treated - they can either be ordered values or unknown
1: 	 * values.
1: 	 *
1: 	 * @param op	Orderable.ORDER_OP_EQUALS means do an = comparison.
0: 	 *				Orderable.ORDER_OP_LESSTHAN means compare this < other.
0: 	 *				Orderable.ORDER_OP_LESSOREQUALS means compare this <= other.
1: 	 * @param other	The Orderable to compare this one to.
1: 	 * @param orderedNulls	True means to treat nulls as ordered values,
1: 	 *						that is, treat SQL null as equal to null, and less
1: 	 *						than all other values.
1: 	 *						False means to treat nulls as unknown values,
1: 	 *						that is, the result of any comparison with a null
1: 	 *						is the UNKNOWN truth value.
1: 	 * @param unknownRV		The return value to use if the result of the
1: 	 *						comparison is the UNKNOWN truth value.  In other
1: 	 *						words, if orderedNulls is false, and a null is
1: 	 *						involved in the comparison, return unknownRV.
1: 	 *						This parameter is not used orderedNulls is true.
1: 	 *
1: 	 * @return	true if the comparison is true.
1: 	 *
1: 	 * @exception IOException		Thrown on error
1: 	 */
1: 	boolean binarycompare(
1:     ObjectInput in,
1:     int         op, 
1:     Orderable   other,
1:     boolean     orderedNulls, 
1:     boolean     unknownRV)
1: 				throws IOException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.types.Orderable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /** 
0: 
0:   The Orderable interface represents a value that can
0:   be linearly ordered.
0:   <P>
0:   Currently only supports linear (<, =, <=) operations.
0:   Eventually we may want to do other types of orderings,
0:   in which case there would probably be a number of interfaces
0:   for each "class" of ordering.
0:   <P>
0:   The implementation must handle the comparison of null
0:   values.  This may require some changes to the interface,
0:   since (at least in some contexts) comparing a value with
0:   null should return unknown instead of true or false.
0: 
0: **/
0: 
0: public interface BinaryOrderable extends Orderable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	 * Compare this Orderable with a given Orderable for the purpose of
0: 	 * index positioning.  This method treats nulls as ordered values -
0: 	 * that is, it treats SQL null as equal to null and less than all
0: 	 * other values.
0: 	 *
0: 	 * @param other		The Orderable to compare this one to.
0: 	 *
0: 	 * @return  <0 - this Orderable is less than other.
0: 	 * 			 0 - this Orderable equals other.
0: 	 *			>0 - this Orderable is greater than other.
0:      *
0:      *			The code should not explicitly look for -1, or 1.
0: 	 *
0: 	 * @exception IOException		Thrown on error
0: 	 */
0: 	int binarycompare(
0:     ObjectInput  in, 
0:     Orderable    other) 
0:         throws IOException;
0: 
0: 	/**
0: 	 * Compare this Orderable with a given Orderable for the purpose of
0: 	 * qualification and sorting.  The caller gets to determine how nulls
0: 	 * should be treated - they can either be ordered values or unknown
0: 	 * values.
0: 	 *
0: 	 * @param op	Orderable.ORDER_OP_EQUALS means do an = comparison.
0: 	 *				Orderable.ORDER_OP_LESSTHAN means compare this < other.
0: 	 *				Orderable.ORDER_OP_LESSOREQUALS means compare this <= other.
0: 	 * @param other	The Orderable to compare this one to.
0: 	 * @param orderedNulls	True means to treat nulls as ordered values,
0: 	 *						that is, treat SQL null as equal to null, and less
0: 	 *						than all other values.
0: 	 *						False means to treat nulls as unknown values,
0: 	 *						that is, the result of any comparison with a null
0: 	 *						is the UNKNOWN truth value.
0: 	 * @param unknownRV		The return value to use if the result of the
0: 	 *						comparison is the UNKNOWN truth value.  In other
0: 	 *						words, if orderedNulls is false, and a null is
0: 	 *						involved in the comparison, return unknownRV.
0: 	 *						This parameter is not used orderedNulls is true.
0: 	 *
0: 	 * @return	true if the comparison is true.
0: 	 *
0: 	 * @exception IOException		Thrown on error
0: 	 */
0: 	boolean binarycompare(
0:     ObjectInput in,
0:     int         op, 
0:     Orderable   other,
0:     boolean     orderedNulls, 
0:     boolean     unknownRV)
0: 				throws IOException;
0: }
============================================================================