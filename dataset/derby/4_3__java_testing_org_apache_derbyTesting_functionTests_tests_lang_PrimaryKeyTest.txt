1:49b5009: /*
3:49b5009:  
1:49b5009:  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest
1:49b5009:  
1:49b5009:  Licensed to the Apache Software Foundation (ASF) under one or more
1:49b5009:  contributor license agreements.  See the NOTICE file distributed with
1:49b5009:  this work for additional information regarding copyright ownership.
1:49b5009:  The ASF licenses this file to You under the Apache License, Version 2.0
1:49b5009:  (the "License"); you may not use this file except in compliance with
1:49b5009:  the License.  You may obtain a copy of the License at
1:49b5009: 
1:49b5009:  http://www.apache.org/licenses/LICENSE-2.0
1:49b5009:  
1:49b5009:  Unless required by applicable law or agreed to in writing, software
1:49b5009:  distributed under the License is distributed on an "AS IS" BASIS,
1:49b5009:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:49b5009:  See the License for the specific language governing permissions and
1:49b5009:  limitations under the License.
1:49b5009:  
1:49b5009:  */
1:49b5009: 
1:49b5009: package org.apache.derbyTesting.functionTests.tests.lang;
1:49b5009: 
1:49b5009: import java.sql.ResultSet;
1:49b5009: import java.sql.ResultSetMetaData;
1:49b5009: import java.sql.SQLException;
1:49b5009: import java.sql.Statement;
1:49b5009: import junit.framework.Test;
1:49b5009: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:49b5009: import org.apache.derbyTesting.junit.JDBC;
1:49b5009: 
1:49b5009: public class PrimaryKeyTest extends BaseJDBCTestCase
1:49b5009: {	
1:49b5009: 	public PrimaryKeyTest(String name)      {
1:49b5009: 		super(name);
2:49b5009: 	}
1:49b5009: 	public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(PrimaryKeyTest.class);
1:49b5009: 	}
1:7522707: 
1:7522707:     @Override
1:49b5009: 	protected void setUp() throws Exception {
1:49b5009: 		super.setUp();
1:49b5009: 		getConnection().setAutoCommit(false);
1:49b5009: 	}
1:49b5009: 
1:49b5009: 					/************ NEGATIVE TESTS ************/	
1:49b5009: 	/**
1:49b5009:  	 * 
1:49b5009:  	 * Tests that A table can't contain two primary keys.
1:49b5009:  	 *
1:49b5009:  	 *  @exception SQLException 
1:49b5009:  	 */ 	
1:49b5009: 	public void testDuplicatePrimaryKey() throws SQLException {
1:49b5009: 		Statement s = createStatement();
1:49b5009: 		//duplicate primary keys
1:49b5009: 		assertStatementError("42X90" , s , "create table neg (c1 int not null primary key, c2 int, c3 int not null constraint asdf primary key)");
1:49b5009: 		assertStatementError("42X90" , s , "create table neg (c1 int not null primary key, c2 int not null, primary key(c1, c2))");
1:49b5009: 	}
1:49b5009: 	/**
1:49b5009: 	 * Tests the Invalid constraint Definations.
1:49b5009: 	 *
1:49b5009: 	 *  @exception SQLException 
1:49b5009: 	 */ 
1:49b5009: 	public void testInvalidConstaintDefs() throws SQLException {
1:49b5009: 		Statement s = createStatement();
1:49b5009: 		//-- duplicate constraint names
1:49b5009: 		assertStatementError("42X91" , s , "create table neg (c1 int not null constraint asdf primary key, c2 int, c3 int constraint asdf unique)");
1:49b5009: 		//-- duplicate column names in same constraint column list
1:49b5009: 		assertStatementError("42X92" , s , "create table neg (c1 int not null, c2 int not null, primary key(c1, c2, c1))");
1:49b5009: 		//-- non-existant columns in constraint column list
1:49b5009: 		assertStatementError("42X93" , s , "create table neg (c1 int not null, c2 int not null, primary key(c1, c2, cx))");
1:49b5009: 	}
1:49b5009: 	/**
1:49b5009: 	 *  Tests Invalid constraint schema name
1:49b5009: 	 *
1:49b5009: 	 *
1:49b5009: 	 *   @exception SQLException 
1:49b5009: 	 */
1:49b5009: 	public void testInvalidConstraintSchemaNames() throws SQLException
1:49b5009: 	{
1:49b5009: 		Statement s = createStatement();
1:49b5009: 		// constraint names are required to be in the same schema as the table on which they are constrained.
1:49b5009: 		assertStatementError("42X85" , s , "create table neg (c1 int not null, c2 int not null, constraint bar.pkneg primary key(c1, c2))");
1:49b5009: 		assertStatementError("42X85" , s , "create table neg (c1 int not null, c2 int not null, constraint sys.pkneg primary key(c1, c2))");
1:49b5009: 		assertStatementError("42X85" , s , "create table neg (c1 int not null constraint bar.pkneg primary key, c2 int)");
1:49b5009: 		assertStatementError("42X85" , s , "create table neg (c1 int not null constraint sys.pkneg primary key, c2 int)");
1:49b5009: 	}
1:49b5009: 	/**
1:49b5009: 	 * Constraint Names must be Unique with in a schema
1:49b5009: 	 *
1:49b5009: 	 * @exception SQLException 
1:49b5009: 	 */
1:49b5009: 	public void testDuplicateConstraintNames() throws SQLException {
1:49b5009: 		Statement s = createStatement();
1:49b5009: 		assertUpdateCount(s , 0 , "create table neg1(c1 int not null constraint asdf primary key)");
1:49b5009: 		//-- constraint names must be unique within a schema
1:49b5009: 		assertStatementError("X0Y32" , s , "create table neg2(c1 int not null constraint asdf primary key)");
1:49b5009: 		assertUpdateCount(s , 0 , "drop table neg1");
1:49b5009: 		assertUpdateCount(s , 0 , "create table neg2(c1 int not null constraint asdf primary key)");
1:49b5009: 		assertUpdateCount(s , 0 , "drop table neg2");
1:49b5009: 
1:49b5009: 		//-- again with explict schema names, should fail
1:49b5009: 		assertUpdateCount(s , 0 , "create table neg1(c1 int not null constraint app.asdf primary key)");
1:49b5009: 		assertStatementError("X0Y32" , s , "create table neg2(c1 int not null constraint app.asdf primary key)");
1:49b5009: 
1:49b5009: 		//-- again with mixing schema names
1:49b5009: 		assertStatementError("X0Y32" , s , "create table neg1(c1 int not null constraint asdf primary key)");
1:49b5009: 		assertStatementError("X0Y32" , s , "create table neg2(c1 int not null constraint app.asdf primary key)");
1:49b5009: 		assertUpdateCount(s , 0 , "drop table neg1");
1:49b5009: 		assertUpdateCount(s , 0 , "create table neg2(c1 int not null constraint app.asdf primary key)");
1:49b5009: 	}
1:49b5009: 	/**
1:49b5009: 	 * Tests that primary and Unique key constraint cannot be Explicitely Nullable.
1:49b5009: 	 *
1:49b5009: 	 *  @exception SQLException 
1:49b5009: 	 */ 
1:49b5009:     public void testExplicitNullabilityOfConstraints() throws SQLException {
1:49b5009: 		Statement s = createStatement();
1:49b5009: 		//-- primary key cannot be explicitly nullable
1:49b5009: 		assertStatementError("42X01" , s , "create table neg2(c1 int null constraint asdf primary key)");
1:49b5009: 		assertStatementError("42X01" , s , "create table neg2(c1 int null, c2 int, constraint asdf primary key(c1, c2))");
1:49b5009: 		//-- test that a unique key can not be explicitly nullable
1:49b5009: 		assertStatementError("42X01" , s , "create table neg1(c1 int null unique)");
1:49b5009: 		assertStatementError("42X01" , s , "create table neg1(c1 int null, c2 int, constraint asdf unique(c1))");
1:49b5009: 	}
1:49b5009: 			
1:49b5009: 					/************* POSITIVE TESTS ************/
1:49b5009: 	/** 
1:49b5009: 	 * Tests that If a column is a part of Primary Key then it cann't contain NULL values.
1:49b5009: 	 * And also Unique key cann't contain nulls.
1:49b5009: 	 *
1:49b5009: 	 *  @exception SQLException 
1:49b5009: 	 */ 
1:49b5009: 	public void testKeyConstraintsImpliesNotNull() throws SQLException {
1:49b5009: 		//-- verify that a primary key implies not null
1:49b5009: 		Statement s = createStatement();
1:49b5009: 		assertUpdateCount(s , 0 , "create table pos1 (c1 int primary key)");
1:49b5009: 		assertUpdateCount(s , 1 , "insert into pos1(c1) values(1)");
1:49b5009: 		assertStatementError("23505" , s , "insert into pos1(c1) values(1)");
1:49b5009: 		assertStatementError("23502" , s , "insert into pos1(c1) values(null)");
1:49b5009: 		assertUpdateCount(s , 0 , "drop table pos1");
1:49b5009: 	}
1:49b5009: 	/**
1:49b5009: 	 * Tests that we can combile key constraints with not null.
1:49b5009: 	 *
1:49b5009: 	 *  @exception SQLException 
1:49b5009: 	 */ 
1:49b5009: 	public void testConstraintwithNotNull() throws SQLException
1:49b5009: 	{
1:49b5009: 		Statement s = createStatement();
1:49b5009: 		//-- verify that you can combine not null and unique/primary key constraints
1:49b5009: 		assertUpdateCount(s , 0 , "create table pos1 (c1 int not null unique, c2 int not null primary key)");
1:49b5009: 		assertStatementError("23502" , s , "insert into pos1 (c1) values (null)");
1:49b5009: 		assertStatementError("23502" , s , "insert into pos1 (c2) values (null)");
1:49b5009: 		assertUpdateCount(s , 0 , "drop table pos1");
1:49b5009: 
1:49b5009: 		//-- verify that you can combine multiple column constraints
1:49b5009: 		ResultSet rs1 = s.executeQuery("select count(*) from sys.sysconstraints");
1:49b5009: 		JDBC.assertSingleValueResultSet(rs1 , "0");
1:49b5009: 
1:49b5009: 		rs1 = s.executeQuery("select count(*) from sys.syskeys");
1:49b5009: 		JDBC.assertSingleValueResultSet(rs1 , "0");
1:49b5009: 
1:49b5009: 		//-- we will be adding 6 rows to both sysconstraints and syskeys
1:49b5009: 		assertUpdateCount(s , 0 , "create table pos1 (c1 int not null unique, c2 int not null primary key)");
1:49b5009: 		assertStatementError("23502" , s , "insert into pos1 (c1) values (null)");
1:49b5009: 		assertStatementError("23502" , s , "insert into pos1 (c2) values (null)");
1:49b5009: 		assertStatementError("23505" , s , "insert into pos1 values (1, 1), (1, 2)");
1:49b5009: 		assertStatementError("23505" , s , "insert into pos1 values (1, 1), (2, 1)");
1:49b5009: 
1:49b5009: 		rs1 = s.executeQuery("select count(*) from sys.sysconstraints");
1:49b5009: 		JDBC.assertSingleValueResultSet(rs1 , "2");
1:49b5009: 
1:49b5009: 		rs1 = s.executeQuery("select count(*) from sys.syskeys");
1:49b5009: 		JDBC.assertSingleValueResultSet(rs1 , "2");
1:49b5009: 
1:49b5009: 		assertUpdateCount(s , 0 , "drop table pos1");
1:49b5009: 	}
1:49b5009: 	/**
1:49b5009: 	 * tests that we can Delete from Primary Key
1:49b5009: 	 *
1:49b5009: 	 *  @exception SQLException 
1:49b5009: 	 */ 
1:49b5009: 	public void testDeleteFromPrimaryKey() throws SQLException {
1:49b5009: 		Statement s = createStatement();
1:49b5009: 		//-- verify that you can delete from a primary key
1:49b5009: 		assertUpdateCount(s , 0 , "create table pos1 (c1 int not null, c2 int not null, primary key(c2, c1))");
1:49b5009: 		assertUpdateCount(s , 1 , "insert into pos1 values (1, 2)");
1:49b5009: 		ResultSet rs = s.executeQuery("select count(*) from pos1");
1:49b5009: 		JDBC.assertSingleValueResultSet(rs , "1");
1:49b5009: 
1:49b5009: 		s.executeUpdate("delete from pos1");
1:49b5009: 
1:49b5009: 		rs = s.executeQuery("select count(*) from pos1");
1:49b5009: 		JDBC.assertSingleValueResultSet(rs , "0");
1:49b5009: 		assertUpdateCount(s , 0 , "drop table pos1");
1:49b5009: 
1:49b5009: 	}
1:49b5009: 	/**
1:49b5009: 	 * verify the consistency of the indexes on the system catalogs
1:49b5009: 	 *
1:49b5009: 	 *  @exception SQLException 
1:49b5009: 	 */ 
1:49b5009: 	public void testCatalog() throws SQLException {
1:49b5009: 		Statement s = createStatement();
1:49b5009: 		assertUpdateCount(s , 0 , "create table pos1(c1 int primary key)");
1:aa609d5: 		ResultSet rs = s.executeQuery("select tablename, SYSCS_UTIL.SYSCS_CHECK_TABLE('SYS', tablename) from sys.systables where CAST(tabletype AS CHAR(1)) = 'S'  and CAST(tablename AS VARCHAR(128)) != 'SYSDUMMY1' order by tablename");
1:49b5009:                 String[][] expectedCheckTables = new String[][]
1:aa609d5:                        {
1:49b5009:                         {"SYSALIASES","1"},
1:49b5009:                         {"SYSCHECKS","1"},
1:aa609d5:                         {"SYSCOLPERMS","1"},
1:aa609d5:                         {"SYSCOLUMNS","1"},
1:aa609d5:                         {"SYSCONGLOMERATES","1"},
1:aa609d5:                         {"SYSCONSTRAINTS","1"},
1:aa609d5:                         {"SYSDEPENDS","1"},
1:49b5009:                         {"SYSFILES","1"},
1:aa609d5:                         {"SYSFOREIGNKEYS","1"},
1:aa609d5:                         {"SYSKEYS","1"},
1:aa609d5:                         {"SYSPERMS", "1"},
1:aa609d5: 						{"SYSROLES", "1"},
1:ee59de8:                         {"SYSROUTINEPERMS","1"},
1:aa609d5:                         {"SYSSCHEMAS","1"},
1:aa609d5:                         {"SYSSEQUENCES", "1"},
1:aa609d5:                         {"SYSSTATEMENTS","1"},
1:49b5009:                         {"SYSSTATISTICS","1"},
1:49b5009:                         {"SYSTABLEPERMS","1"},
1:aa609d5:                         {"SYSTABLES","1"},
1:aa609d5:                         {"SYSTRIGGERS","1"},
1:aa609d5:                         {"SYSUSERS","1"},
1:aa609d5:                         {"SYSVIEWS","1"},
1:aa609d5:                        };
1:49b5009:                 JDBC.assertFullResultSet(rs,expectedCheckTables); 
1:49b5009: 		//-- drop tables
1:49b5009: 		assertUpdateCount(s , 0 , "drop table pos1");
1:49b5009: 		//-- verify it again
1:aa609d5:                 rs = s.executeQuery("select tablename, SYSCS_UTIL.SYSCS_CHECK_TABLE('SYS', tablename) from sys.systables where CAST(tabletype AS CHAR(1)) = 'S'  and CAST(tablename AS VARCHAR(128)) != 'SYSDUMMY1' order by tablename");
1:49b5009:                 JDBC.assertFullResultSet(rs, expectedCheckTables);
1:49b5009: 	}
1:49b5009: 	/**
1:49b5009: 	 * Testing The Bug5420
1:49b5009: 	 *
1:49b5009: 	 *  @exception SQLException 
1:49b5009: 	 */ 
1:49b5009: 	public void testBug5420() throws SQLException
1:49b5009: 	{
1:49b5009: 		Statement s = createStatement();
1:49b5009: 		//-- bug 5420 - constraint names in new schemas.
1:49b5009: 		assertUpdateCount(s , 0 , "create table B5420_1.t1 (c1 int not null primary key)");
1:49b5009: 		assertUpdateCount(s , 0 , "create table B5420_2.t2 (c2 int not null constraint c2pk primary key)");
1:49b5009: 		//-- two part constraint names are not allowed
1:49b5009: 		assertUpdateCount(s , 0 , "create table B5420_3.t3 (c3 int not null constraint B5420_3.c3pk primary key)");
1:49b5009: 		assertUpdateCount(s , 0 , "create table B5420_4.t4 (c4 int not null, primary key (c4))");
1:49b5009: 		assertUpdateCount(s , 0 , "create table B5420_5.t5 (c5 int not null, constraint c5pk primary key (c5))");
1:49b5009: 		//-- two part constraint names are not allowed
1:49b5009: 		assertUpdateCount(s , 0 , "create table B5420_6.t6 (c6 int not null, constraint B5420_6.c6pk primary key (c6))");
1:49b5009: 		ResultSet rs = s.executeQuery("	SELECT CAST (S.SCHEMANAME AS VARCHAR(12)), CAST (C.CONSTRAINTNAME AS VARCHAR(36)), CAST (T.TABLENAME AS VARCHAR(12)) FROM SYS.SYSCONSTRAINTS C , SYS.SYSTABLES T, SYS.SYSSCHEMAS S WHERE C.SCHEMAID = S.SCHEMAID AND C.TABLEID = T.TABLEID AND T.SCHEMAID = S.SCHEMAID AND CAST(S.SCHEMANAME AS VARCHAR(128)) LIKE 'B5420_%' ORDER BY 1,2,3");
1:49b5009: 		rs.next();
1:49b5009: 		ResultSetMetaData rsmd = rs.getMetaData();
1:49b5009: 		assertEquals(3 , rsmd.getColumnCount());
1:49b5009: 		int rows = 0;
1:49b5009: 		do
1:49b5009: 		{
1:49b5009: 			rows++;
1:49b5009: 		}while(rs.next());
1:49b5009: 		assertEquals(6 , rows);
1:49b5009: 		//-- clean up
1:49b5009: 		assertUpdateCount(s , 0 , "drop table B5420_1.t1");
1:49b5009: 		assertUpdateCount(s , 0 , "drop table B5420_2.t2");
1:49b5009: 		assertUpdateCount(s , 0 , "drop table B5420_3.t3");
1:49b5009: 		assertUpdateCount(s , 0 , "drop table B5420_4.t4");
1:49b5009: 		assertUpdateCount(s , 0 , "drop table B5420_5.t5");
1:49b5009: 		assertUpdateCount(s , 0 , "drop table B5420_6.t6");
1:49b5009: 	}
1:7522707: 
1:7522707:     public void testDerby5111() throws SQLException {
1:7522707:         final Statement s = createStatement();
1:7522707:         s.executeUpdate("create table t1 (t1_id integer not null, " +
1:7522707:                 "t0_id integer not null, value varchar(75) not null)");
1:7522707: 
1:7522707:         try {
1:7522707:             s.executeUpdate("create unique index ui1 on t1 (t1_id)");
1:7522707:             s.executeUpdate("alter table t1 add constraint pk1 " +
1:7522707:                     "                       primary key (t1_id)");
1:7522707:             s.executeUpdate("create unique index ui2 on t1 (t0_id, value)");
1:7522707: 
1:7522707:             s.executeUpdate("insert into t1 values(0, 0, 'Test')");
1:7522707: 
1:7522707:             // The next statement tries to insert a duplicate.  It used to
1:7522707:             // throw an NPE before the fix.
1:7522707:             assertStatementError(
1:7522707:                     "23505", s, "insert into t1 values(1, 0, 'Test')");
1:7522707:         } finally {
1:7522707:             try { s.executeUpdate("drop table t1"); } catch (SQLException e){}
1:7522707:         }
1:7522707:     }
1:49b5009: }
1:49b5009: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(PrimaryKeyTest.class);
commit:7522707
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testDerby5111() throws SQLException {
1:         final Statement s = createStatement();
1:         s.executeUpdate("create table t1 (t1_id integer not null, " +
1:                 "t0_id integer not null, value varchar(75) not null)");
1: 
1:         try {
1:             s.executeUpdate("create unique index ui1 on t1 (t1_id)");
1:             s.executeUpdate("alter table t1 add constraint pk1 " +
1:                     "                       primary key (t1_id)");
1:             s.executeUpdate("create unique index ui2 on t1 (t0_id, value)");
1: 
1:             s.executeUpdate("insert into t1 values(0, 0, 'Test')");
1: 
1:             // The next statement tries to insert a duplicate.  It used to
1:             // throw an NPE before the fix.
1:             assertStatementError(
1:                     "23505", s, "insert into t1 values(1, 0, 'Test')");
1:         } finally {
1:             try { s.executeUpdate("drop table t1"); } catch (SQLException e){}
1:         }
1:     }
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1:                         {"SYSROUTINEPERMS","1"},
0: 						{"SYSROLES", "1"}};
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:aa609d5
/////////////////////////////////////////////////////////////////////////
1: 		ResultSet rs = s.executeQuery("select tablename, SYSCS_UTIL.SYSCS_CHECK_TABLE('SYS', tablename) from sys.systables where CAST(tabletype AS CHAR(1)) = 'S'  and CAST(tablename AS VARCHAR(128)) != 'SYSDUMMY1' order by tablename");
1:                        {
1:                         {"SYSCOLPERMS","1"},
1:                         {"SYSCOLUMNS","1"},
1:                         {"SYSCONGLOMERATES","1"},
1:                         {"SYSCONSTRAINTS","1"},
1:                         {"SYSDEPENDS","1"},
1:                         {"SYSFOREIGNKEYS","1"},
1:                         {"SYSKEYS","1"},
1:                         {"SYSPERMS", "1"},
1: 						{"SYSROLES", "1"},
0:                         {"SYSROUTINEPERMS","1"},
1:                         {"SYSSCHEMAS","1"},
1:                         {"SYSSEQUENCES", "1"},
1:                         {"SYSSTATEMENTS","1"},
1:                         {"SYSTABLES","1"},
1:                         {"SYSTRIGGERS","1"},
1:                         {"SYSUSERS","1"},
1:                         {"SYSVIEWS","1"},
1:                        };
1:                 rs = s.executeQuery("select tablename, SYSCS_UTIL.SYSCS_CHECK_TABLE('SYS', tablename) from sys.systables where CAST(tabletype AS CHAR(1)) = 'S'  and CAST(tablename AS VARCHAR(128)) != 'SYSDUMMY1' order by tablename");
commit:bb40bcb
/////////////////////////////////////////////////////////////////////////
0: 						{"SYSROLES", "1"},
0:                         {"SYSSEQUENCES", "1"},
0:                         {"SYSPERMS", "1"}};
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:28e234d
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:49b5009
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest
1:  
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1:  
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.Utilities;
1: 
1: public class PrimaryKeyTest extends BaseJDBCTestCase
1: {	
1: 	public PrimaryKeyTest(String name)      {
1: 		super(name);
1: 	}
1: 	public static Test suite() {
0: 		return new TestSuite(PrimaryKeyTest.class);
1: 	}
1: 	protected void setUp() throws Exception {
1: 		super.setUp();
1: 		getConnection().setAutoCommit(false);
1: 	}
0: 	protected void tearDown() throws Exception {
0: 		super.tearDown();
1: 	}
1: 
1: 					/************ NEGATIVE TESTS ************/	
1: 	/**
1:  	 * 
1:  	 * Tests that A table can't contain two primary keys.
1:  	 *
1:  	 *  @exception SQLException 
1:  	 */ 	
1: 	public void testDuplicatePrimaryKey() throws SQLException {
1: 		Statement s = createStatement();
1: 		//duplicate primary keys
1: 		assertStatementError("42X90" , s , "create table neg (c1 int not null primary key, c2 int, c3 int not null constraint asdf primary key)");
1: 		assertStatementError("42X90" , s , "create table neg (c1 int not null primary key, c2 int not null, primary key(c1, c2))");
1: 	}
1: 	/**
1: 	 * Tests the Invalid constraint Definations.
1: 	 *
1: 	 *  @exception SQLException 
1: 	 */ 
1: 	public void testInvalidConstaintDefs() throws SQLException {
1: 		Statement s = createStatement();
1: 		//-- duplicate constraint names
1: 		assertStatementError("42X91" , s , "create table neg (c1 int not null constraint asdf primary key, c2 int, c3 int constraint asdf unique)");
1: 		//-- duplicate column names in same constraint column list
1: 		assertStatementError("42X92" , s , "create table neg (c1 int not null, c2 int not null, primary key(c1, c2, c1))");
1: 		//-- non-existant columns in constraint column list
1: 		assertStatementError("42X93" , s , "create table neg (c1 int not null, c2 int not null, primary key(c1, c2, cx))");
1: 	}
1: 	/**
1: 	 *  Tests Invalid constraint schema name
1: 	 *
1: 	 *
1: 	 *   @exception SQLException 
1: 	 */
1: 	public void testInvalidConstraintSchemaNames() throws SQLException
1: 	{
1: 		Statement s = createStatement();
1: 		// constraint names are required to be in the same schema as the table on which they are constrained.
1: 		assertStatementError("42X85" , s , "create table neg (c1 int not null, c2 int not null, constraint bar.pkneg primary key(c1, c2))");
1: 		assertStatementError("42X85" , s , "create table neg (c1 int not null, c2 int not null, constraint sys.pkneg primary key(c1, c2))");
1: 		assertStatementError("42X85" , s , "create table neg (c1 int not null constraint bar.pkneg primary key, c2 int)");
1: 		assertStatementError("42X85" , s , "create table neg (c1 int not null constraint sys.pkneg primary key, c2 int)");
1: 	}
1: 	/**
1: 	 * Constraint Names must be Unique with in a schema
1: 	 *
1: 	 * @exception SQLException 
1: 	 */
1: 	public void testDuplicateConstraintNames() throws SQLException {
1: 		Statement s = createStatement();
1: 		assertUpdateCount(s , 0 , "create table neg1(c1 int not null constraint asdf primary key)");
1: 		//-- constraint names must be unique within a schema
1: 		assertStatementError("X0Y32" , s , "create table neg2(c1 int not null constraint asdf primary key)");
1: 		assertUpdateCount(s , 0 , "drop table neg1");
1: 		assertUpdateCount(s , 0 , "create table neg2(c1 int not null constraint asdf primary key)");
1: 		assertUpdateCount(s , 0 , "drop table neg2");
1: 
1: 		//-- again with explict schema names, should fail
1: 		assertUpdateCount(s , 0 , "create table neg1(c1 int not null constraint app.asdf primary key)");
1: 		assertStatementError("X0Y32" , s , "create table neg2(c1 int not null constraint app.asdf primary key)");
1: 
1: 		//-- again with mixing schema names
1: 		assertStatementError("X0Y32" , s , "create table neg1(c1 int not null constraint asdf primary key)");
1: 		assertStatementError("X0Y32" , s , "create table neg2(c1 int not null constraint app.asdf primary key)");
1: 		assertUpdateCount(s , 0 , "drop table neg1");
1: 		assertUpdateCount(s , 0 , "create table neg2(c1 int not null constraint app.asdf primary key)");
1: 	}
1: 	/**
1: 	 * Tests that primary and Unique key constraint cannot be Explicitely Nullable.
1: 	 *
1: 	 *  @exception SQLException 
1: 	 */ 
1:     public void testExplicitNullabilityOfConstraints() throws SQLException {
1: 		Statement s = createStatement();
1: 		//-- primary key cannot be explicitly nullable
1: 		assertStatementError("42X01" , s , "create table neg2(c1 int null constraint asdf primary key)");
1: 		assertStatementError("42X01" , s , "create table neg2(c1 int null, c2 int, constraint asdf primary key(c1, c2))");
1: 		//-- test that a unique key can not be explicitly nullable
1: 		assertStatementError("42X01" , s , "create table neg1(c1 int null unique)");
1: 		assertStatementError("42X01" , s , "create table neg1(c1 int null, c2 int, constraint asdf unique(c1))");
1: 	}
1: 			
1: 					/************* POSITIVE TESTS ************/
1: 	/** 
1: 	 * Tests that If a column is a part of Primary Key then it cann't contain NULL values.
1: 	 * And also Unique key cann't contain nulls.
1: 	 *
1: 	 *  @exception SQLException 
1: 	 */ 
1: 	public void testKeyConstraintsImpliesNotNull() throws SQLException {
1: 		//-- verify that a primary key implies not null
1: 		Statement s = createStatement();
1: 		assertUpdateCount(s , 0 , "create table pos1 (c1 int primary key)");
1: 		assertUpdateCount(s , 1 , "insert into pos1(c1) values(1)");
1: 		assertStatementError("23505" , s , "insert into pos1(c1) values(1)");
1: 		assertStatementError("23502" , s , "insert into pos1(c1) values(null)");
0: 		//-- verify that a unique key can not contain nulls
0: 		assertStatementError("42831" , s , "create table pos1 (c1 int unique, c2 int)");
1: 		assertUpdateCount(s , 0 , "drop table pos1");
1: 	}
1: 	/**
1: 	 * Tests that we can combile key constraints with not null.
1: 	 *
1: 	 *  @exception SQLException 
1: 	 */ 
1: 	public void testConstraintwithNotNull() throws SQLException
1: 	{
1: 		Statement s = createStatement();
1: 		//-- verify that you can combine not null and unique/primary key constraints
1: 		assertUpdateCount(s , 0 , "create table pos1 (c1 int not null unique, c2 int not null primary key)");
1: 		assertStatementError("23502" , s , "insert into pos1 (c1) values (null)");
1: 		assertStatementError("23502" , s , "insert into pos1 (c2) values (null)");
1: 		assertUpdateCount(s , 0 , "drop table pos1");
1: 
1: 		//-- verify that you can combine multiple column constraints
1: 		ResultSet rs1 = s.executeQuery("select count(*) from sys.sysconstraints");
1: 		JDBC.assertSingleValueResultSet(rs1 , "0");
1: 
1: 		rs1 = s.executeQuery("select count(*) from sys.syskeys");
1: 		JDBC.assertSingleValueResultSet(rs1 , "0");
1: 
1: 		//-- we will be adding 6 rows to both sysconstraints and syskeys
1: 		assertUpdateCount(s , 0 , "create table pos1 (c1 int not null unique, c2 int not null primary key)");
1: 		assertStatementError("23502" , s , "insert into pos1 (c1) values (null)");
1: 		assertStatementError("23502" , s , "insert into pos1 (c2) values (null)");
1: 		assertStatementError("23505" , s , "insert into pos1 values (1, 1), (1, 2)");
1: 		assertStatementError("23505" , s , "insert into pos1 values (1, 1), (2, 1)");
1: 
1: 		rs1 = s.executeQuery("select count(*) from sys.sysconstraints");
1: 		JDBC.assertSingleValueResultSet(rs1 , "2");
1: 
1: 		rs1 = s.executeQuery("select count(*) from sys.syskeys");
1: 		JDBC.assertSingleValueResultSet(rs1 , "2");
1: 
1: 		assertUpdateCount(s , 0 , "drop table pos1");
1: 	}
1: 	/**
1: 	 * tests that we can Delete from Primary Key
1: 	 *
1: 	 *  @exception SQLException 
1: 	 */ 
1: 	public void testDeleteFromPrimaryKey() throws SQLException {
1: 		Statement s = createStatement();
1: 		//-- verify that you can delete from a primary key
1: 		assertUpdateCount(s , 0 , "create table pos1 (c1 int not null, c2 int not null, primary key(c2, c1))");
1: 		assertUpdateCount(s , 1 , "insert into pos1 values (1, 2)");
1: 		ResultSet rs = s.executeQuery("select count(*) from pos1");
1: 		JDBC.assertSingleValueResultSet(rs , "1");
1: 
1: 		s.executeUpdate("delete from pos1");
1: 
1: 		rs = s.executeQuery("select count(*) from pos1");
1: 		JDBC.assertSingleValueResultSet(rs , "0");
1: 		assertUpdateCount(s , 0 , "drop table pos1");
1: 
1: 	}
1: 	/**
1: 	 * verify the consistency of the indexes on the system catalogs
1: 	 *
1: 	 *  @exception SQLException 
1: 	 */ 
1: 	public void testCatalog() throws SQLException {
1: 		Statement s = createStatement();
1: 		assertUpdateCount(s , 0 , "create table pos1(c1 int primary key)");
0: 		ResultSet rs = s.executeQuery("select tablename, SYSCS_UTIL.SYSCS_CHECK_TABLE('SYS', tablename) from sys.systables where CAST(tabletype AS CHAR(1)) = 'S'  and CAST(tablename AS VARCHAR(128)) != 'SYSDUMMY1'");
1:                 String[][] expectedCheckTables = new String[][]
0:                        {{"SYSCONGLOMERATES","1"},
0:                         {"SYSTABLES","1"},
0:                         {"SYSCOLUMNS","1"},
0:                         {"SYSSCHEMAS","1"},
0:                         {"SYSCONSTRAINTS","1"},
0:                         {"SYSKEYS","1"},
0:                         {"SYSDEPENDS","1"},
1:                         {"SYSALIASES","1"},
0:                         {"SYSVIEWS","1"},
1:                         {"SYSCHECKS","1"},
0:                         {"SYSFOREIGNKEYS","1"},
0:                         {"SYSSTATEMENTS","1"},
1:                         {"SYSFILES","1"},
0:                         {"SYSTRIGGERS","1"},
1:                         {"SYSSTATISTICS","1"},
1:                         {"SYSTABLEPERMS","1"},
0:                         {"SYSCOLPERMS","1"},
0:                         {"SYSROUTINEPERMS","1"}};
1:                 JDBC.assertFullResultSet(rs,expectedCheckTables); 
1: 		//-- drop tables
1: 		assertUpdateCount(s , 0 , "drop table pos1");
1: 		//-- verify it again
0:                 rs = s.executeQuery("select tablename, SYSCS_UTIL.SYSCS_CHECK_TABLE('SYS', tablename) from sys.systables where CAST(tabletype AS CHAR(1)) = 'S'  and CAST(tablename AS VARCHAR(128)) != 'SYSDUMMY1'");
1:                 JDBC.assertFullResultSet(rs, expectedCheckTables);
1: 	}
1: 	/**
1: 	 * Testing The Bug5420
1: 	 *
1: 	 *  @exception SQLException 
1: 	 */ 
1: 	public void testBug5420() throws SQLException
1: 	{
1: 		Statement s = createStatement();
1: 		//-- bug 5420 - constraint names in new schemas.
1: 		assertUpdateCount(s , 0 , "create table B5420_1.t1 (c1 int not null primary key)");
1: 		assertUpdateCount(s , 0 , "create table B5420_2.t2 (c2 int not null constraint c2pk primary key)");
1: 		//-- two part constraint names are not allowed
1: 		assertUpdateCount(s , 0 , "create table B5420_3.t3 (c3 int not null constraint B5420_3.c3pk primary key)");
1: 		assertUpdateCount(s , 0 , "create table B5420_4.t4 (c4 int not null, primary key (c4))");
1: 		assertUpdateCount(s , 0 , "create table B5420_5.t5 (c5 int not null, constraint c5pk primary key (c5))");
1: 		//-- two part constraint names are not allowed
1: 		assertUpdateCount(s , 0 , "create table B5420_6.t6 (c6 int not null, constraint B5420_6.c6pk primary key (c6))");
1: 		ResultSet rs = s.executeQuery("	SELECT CAST (S.SCHEMANAME AS VARCHAR(12)), CAST (C.CONSTRAINTNAME AS VARCHAR(36)), CAST (T.TABLENAME AS VARCHAR(12)) FROM SYS.SYSCONSTRAINTS C , SYS.SYSTABLES T, SYS.SYSSCHEMAS S WHERE C.SCHEMAID = S.SCHEMAID AND C.TABLEID = T.TABLEID AND T.SCHEMAID = S.SCHEMAID AND CAST(S.SCHEMANAME AS VARCHAR(128)) LIKE 'B5420_%' ORDER BY 1,2,3");
1: 		rs.next();
1: 		ResultSetMetaData rsmd = rs.getMetaData();
1: 		assertEquals(3 , rsmd.getColumnCount());
1: 		int rows = 0;
1: 		do
1: 		{
1: 			rows++;
1: 		}while(rs.next());
1: 		assertEquals(6 , rows);
1: 		//-- clean up
1: 		assertUpdateCount(s , 0 , "drop table B5420_1.t1");
1: 		assertUpdateCount(s , 0 , "drop table B5420_2.t2");
1: 		assertUpdateCount(s , 0 , "drop table B5420_3.t3");
1: 		assertUpdateCount(s , 0 , "drop table B5420_4.t4");
1: 		assertUpdateCount(s , 0 , "drop table B5420_5.t5");
1: 		assertUpdateCount(s , 0 , "drop table B5420_6.t6");
1: 	}
1: }
1: 
============================================================================