1:5698f98: /*
1:5698f98:  *
1:5698f98:  * Derby - Classs org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest
1:5698f98:  *
1:5698f98:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5698f98:  * contributor license agreements.  See the NOTICE file distributed with
1:5698f98:  * this work for additional information regarding copyright ownership.
1:5698f98:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5698f98:  * (the "License"); you may not use this file except in compliance with
1:5698f98:  * the License.  You may obtain a copy of the License at
1:5698f98:  *
1:5698f98:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5698f98:  *
1:5698f98:  * Unless required by applicable law or agreed to in writing, 
1:5698f98:  * software distributed under the License is distributed on an 
1:5698f98:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:5698f98:  * either express or implied. See the License for the specific 
1:5698f98:  * language governing permissions and limitations under the License.
1:5698f98:  */
1:5698f98: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
2:5698f98: 
1:5698f98: import java.sql.Connection;
1:5698f98: import java.sql.PreparedStatement;
1:5698f98: import java.sql.ResultSet;
1:5698f98: import java.sql.ResultSetMetaData;
1:5698f98: import java.sql.SQLException;
1:5698f98: import java.sql.Statement;
1:5698f98: 
1:5698f98: import junit.framework.Test;
1:5698f98: 
1:5698f98: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:7c22a62: import org.apache.derbyTesting.junit.JDBC;
1:9f0e445: import org.apache.derbyTesting.junit.SQLUtilities;
1:5698f98: import org.apache.derbyTesting.junit.TestConfiguration;
1:5698f98: 
1:5698f98: public class PrepStmtMetaDataTest extends BaseJDBCTestCase {
1:5698f98: 
1:5698f98:     public PrepStmtMetaDataTest(String name) {
1:5698f98:         super(name);
1:5698f98:     }
1:7c22a62: 
1:5698f98:     /**
1:5698f98:      * Test getMetaData calls on prepared statements that do not return a
1:5698f98:      * ResultSet
1:5698f98:      */
1:5698f98:     public void testNoResultSetMeta() throws SQLException {
1:5698f98: 
1:5698f98:         // test MetaData with statements that
1:5698f98:         // do not return a ResultSet
1:0c33e95:         checkEmptyMetaData("create table ab(a int)", true);
1:0c33e95:         checkEmptyMetaData("alter table ab add column b int", true);
1:5698f98: 
1:0c33e95:         Statement s = createStatement();
1:5698f98:         s
1:5698f98:                 .execute("create procedure testproc() language java external name "
1:5698f98:                         + "'org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest.tstmeth'"
1:5698f98:                         + " parameter style java");
1:5698f98: 
1:5698f98:         // test call statement - shouldn't have meta data
1:0c33e95:         checkEmptyMetaData("call testproc()", false);
1:5698f98: 
1:5698f98:         // test drop procedure - meta data should be null
1:0c33e95:         checkEmptyMetaData("drop procedure testproc", true);
1:5698f98: 
1:5698f98:         // test create schema - meta data should be null
1:0c33e95:         checkEmptyMetaData("create schema myschema", true);
1:5698f98: 
1:5698f98:         // test drop schema - meta data should be null
1:0c33e95:         checkEmptyMetaData("drop schema myschema restrict", true);
1:5698f98: 
1:5698f98:         s.execute("CREATE TABLE TRIGTAB (i int)");
1:5698f98:         // test create trigger - meta data should be null
1:5698f98:         checkEmptyMetaData(
1:5698f98:                 "create trigger mytrig after insert on ab for each row insert into trigtab values(1)",
1:5698f98:                 true);
1:5698f98: 
1:5698f98:         // test drop trigger - meta data should be null
1:0c33e95:         checkEmptyMetaData("drop trigger mytrig", true);
1:5698f98: 
1:5698f98:         // test create view - meta data should be null
1:0c33e95:         checkEmptyMetaData("create view myview as select * from ab", true);
1:5698f98: 
1:5698f98:         // test drop view - meta data should be null
1:0c33e95:         checkEmptyMetaData("drop view myview", true);
1:5698f98: 
1:5698f98:         // test drop table - meta data should be null
1:0c33e95:         checkEmptyMetaData("drop table ab", false);
1:5698f98: 
1:5698f98:         // test create index - meta data should be null
1:0c33e95:         checkEmptyMetaData("create index aindex on ab(a)", true);
1:5698f98: 
1:5698f98:         // test drop index - meta data should be null
1:0c33e95:         checkEmptyMetaData("drop index aindex", false);
1:5698f98: 
1:5698f98:         // test insert - meta data should be null
1:0c33e95:         checkEmptyMetaData("insert into ab values(1,1)", true);
1:5698f98: 
1:5698f98:         // test update - meta data should be null
1:0c33e95:         checkEmptyMetaData("update ab set a = 2", false);
1:5698f98: 
1:5698f98:         // test delete - meta data should be null
1:0c33e95:         checkEmptyMetaData("delete from ab", false);
1:5698f98:         s.executeUpdate("drop table ab");
1:5698f98:         s.close();
1:5698f98:     }
1:5698f98: 
1:5698f98:     public void testAlterTableMeta() throws SQLException {
1:5698f98: 
1:0c33e95:        Statement s = createStatement();
1:5698f98:         s.executeUpdate("create table bug4579 (c11 int)");
1:5698f98:         s.executeUpdate("insert into bug4579 values (1)");
1:0c33e95:         PreparedStatement ps = prepareStatement("select * from bug4579");
1:5698f98:         ResultSetMetaData rsmd = ps.getMetaData();
1:5698f98:         assertEquals(1, rsmd.getColumnCount());
2:5698f98:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(1));
2:5698f98:         assertEquals("C11", rsmd.getColumnName(1));
1:5698f98: 
1:5698f98:         s.executeUpdate("alter table bug4579 add column c12 int");
1:f9a0689: 
1:f9a0689:         if (usingDerbyNetClient()) {
1:f9a0689:             // DERBY-2402 Client does not report added columns.
1:f9a0689:             // Take out check when DERBY-2402 is fixed
1:f9a0689:             //
1:f9a0689:         } else {
1:f9a0689:             rsmd = ps.getMetaData();
1:f9a0689:             assertEquals(2, rsmd.getColumnCount());
1:f9a0689:             assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(1));
1:f9a0689:             assertEquals("C11", rsmd.getColumnName(1));
1:f9a0689:             assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(2));
1:f9a0689:             assertEquals("C12", rsmd.getColumnName(2));
1:f9a0689:         }
1:5698f98: 
1:5698f98:         // ResultSetMetaData for select * after alter table and
1:5698f98:         // executeQuery.
1:5698f98:         s.executeUpdate("alter table bug4579 add column c13 int");
1:5698f98:         ResultSet rs = ps.executeQuery();
3:5698f98:         rsmd = ps.getMetaData();
1:5698f98:         assertEquals(3, rsmd.getColumnCount());
1:5698f98:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(1));
1:5698f98:         assertEquals("C11", rsmd.getColumnName(1));
2:5698f98:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(2));
2:5698f98:         assertEquals("C12", rsmd.getColumnName(2));
1:5698f98:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(3));
1:5698f98:         assertEquals("C13", rsmd.getColumnName(3));
1:f9a0689: 
1:f9a0689:         // Check ps metadata again
1:f9a0689:         rsmd = ps.getMetaData();
1:f9a0689:         assertEquals(3, rsmd.getColumnCount());
1:f9a0689:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(1));
1:f9a0689:         assertEquals("C11", rsmd.getColumnName(1));
1:f9a0689:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(2));
1:f9a0689:         assertEquals("C12", rsmd.getColumnName(2));
1:f9a0689:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(3));
1:f9a0689:         assertEquals("C13", rsmd.getColumnName(3));
1:f9a0689: 
1:5698f98:         rs.close();
1:5698f98:         ps.close();
1:5698f98:         s.executeUpdate("drop table bug4579");
1:5698f98:         s.close();
1:5698f98: 
1:5698f98:     }
1:5698f98: 
1:5698f98:     
1:5698f98:     /**
1:5698f98:      * Check the metatdata for a prepared statement that does not return a
1:5698f98:      * ResultSet is empty
1:5698f98:      * 
1:5698f98:      * @param sql
1:5698f98:      *            sql for prepared statement
1:5698f98:      * @param execute
1:5698f98:      *            execute PreparedStatement if true
1:5698f98:      * @throws SQLException
1:5698f98:      */
1:0c33e95:     private void checkEmptyMetaData(String sql, boolean execute)
1:5698f98:             throws SQLException {
1:0c33e95:         PreparedStatement ps = prepareStatement(sql);
1:0c33e95:         ResultSetMetaData rsmd = ps.getMetaData();
1:5698f98:         assertEmptyResultSetMetaData(rsmd);
1:5698f98:         if (execute)
1:5698f98:             ps.executeUpdate();
1:5698f98:         ps.close();
1:5698f98:     }
1:5698f98: 
1:7c22a62:     public void testAllDataTypesMetaData()  throws SQLException
1:7c22a62:     {
1:0c33e95:         Statement s = createStatement();
1:9f0e445:         SQLUtilities.createAndPopulateAllDataTypesTable(s);
1:0c33e95:         s.close();
1:0c33e95:         PreparedStatement ps = prepareStatement("SELECT * from AllDataTypesTable");
1:7c22a62:         ResultSetMetaData rsmd = ps.getMetaData();
1:7c22a62:         int colCount = rsmd.getColumnCount();
1:7c22a62:         assertEquals(17, colCount);
1:7c22a62:         // Column 1 SMALLINT
1:7c22a62:         assertEquals("",rsmd.getCatalogName(1));
1:7c22a62:         assertEquals("java.lang.Integer", rsmd.getColumnClassName(1));
1:7c22a62:         assertEquals(6, rsmd.getColumnDisplaySize(1));
1:7c22a62:         assertEquals("SMALLINTCOL", rsmd.getColumnLabel(1));
1:7c22a62:         assertEquals(java.sql.Types.SMALLINT,rsmd.getColumnType(1));
1:7c22a62:         assertEquals("SMALLINT", rsmd.getColumnTypeName(1));
1:7c22a62:         assertEquals(5,rsmd.getPrecision(1));
1:7c22a62:         assertEquals(0, rsmd.getScale(1));
1:7c22a62:         assertEquals("APP", rsmd.getSchemaName(1));
1:7c22a62:         assertEquals("ALLDATATYPESTABLE",rsmd.getTableName(1));
1:7c22a62:         assertFalse(rsmd.isAutoIncrement(1));
1:7c22a62:         assertFalse(rsmd.isCurrency(1));
1:7c22a62:         assertFalse(rsmd.isDefinitelyWritable(1));
1:7c22a62:         assertEquals(ResultSetMetaData.columnNullable, rsmd.isNullable(1));
1:7c22a62:         // DERBY-142 client returns incorrect value for isReadOnly
1:7c22a62:         if (usingEmbedded())
1:7c22a62:             assertFalse(rsmd.isReadOnly(1));
1:7c22a62:         assertTrue(rsmd.isSearchable(1));
1:7c22a62:         assertTrue(rsmd.isSigned(1));
1:7c22a62:         assertFalse(rsmd.isWritable(1));
1:7c22a62:         // COLUMN 2 INTEGER
1:7c22a62:         assertEquals("java.lang.Integer", rsmd.getColumnClassName(2));
1:7c22a62:         assertEquals(11, rsmd.getColumnDisplaySize(2));
1:7c22a62:         assertEquals("INTEGERCOL", rsmd.getColumnLabel(2));
1:7c22a62:         assertEquals(java.sql.Types.INTEGER,rsmd.getColumnType(2));
1:7c22a62:         assertEquals("INTEGER", rsmd.getColumnTypeName(2));
1:7c22a62:         assertEquals(10,rsmd.getPrecision(2));
1:7c22a62:         assertEquals(0, rsmd.getScale(2));       
1:7c22a62:         // COLUMN 3 BIGINT
1:7c22a62:         assertEquals("java.lang.Long", rsmd.getColumnClassName(3));
1:7c22a62:         assertEquals(20, rsmd.getColumnDisplaySize(3));
1:7c22a62:         assertEquals("BIGINTCOL", rsmd.getColumnLabel(3));
1:7c22a62:         assertEquals(java.sql.Types.BIGINT,rsmd.getColumnType(3));
1:7c22a62:         assertEquals("BIGINT", rsmd.getColumnTypeName(3));
1:7c22a62:         assertEquals(19,rsmd.getPrecision(3));
1:7c22a62:         assertEquals(0, rsmd.getScale(3));
1:7c22a62:         // COLUMN 4 DECIMAL
1:7c22a62:         assertEquals("java.math.BigDecimal", rsmd.getColumnClassName(4));
1:7c22a62:         assertEquals(12, rsmd.getColumnDisplaySize(4));
1:7c22a62:         assertEquals("DECIMALCOL", rsmd.getColumnLabel(4));
1:7c22a62:         assertEquals(java.sql.Types.DECIMAL,rsmd.getColumnType(4));
1:7c22a62:         assertEquals("DECIMAL", rsmd.getColumnTypeName(4));
1:7c22a62:         assertEquals(10,rsmd.getPrecision(4));
1:7c22a62:         assertEquals(5, rsmd.getScale(4));
1:7c22a62:         // COLUMN 5 REAL
1:7c22a62:         assertEquals("java.lang.Float", rsmd.getColumnClassName(5));
1:c0a5ce1:         assertEquals(15, rsmd.getColumnDisplaySize(5));
1:7c22a62:         assertEquals("REALCOL", rsmd.getColumnLabel(5));
1:7c22a62:         assertEquals(java.sql.Types.REAL,rsmd.getColumnType(5));
1:7c22a62:         assertEquals("REAL", rsmd.getColumnTypeName(5));
1:7c22a62:         assertEquals(7,rsmd.getPrecision(5));
1:7c22a62:         assertEquals(0, rsmd.getScale(5));
1:7c22a62:         
1:7c22a62:         // COLUMN 6 DOUBLE
1:7c22a62:         assertEquals("java.lang.Double", rsmd.getColumnClassName(6));
1:c0a5ce1:         assertEquals(24, rsmd.getColumnDisplaySize(6));
1:7c22a62:         assertEquals("DOUBLECOL", rsmd.getColumnLabel(6));
1:7c22a62:         assertEquals(java.sql.Types.DOUBLE,rsmd.getColumnType(6));
1:7c22a62:         assertEquals("DOUBLE", rsmd.getColumnTypeName(6));
1:7c22a62:         assertEquals(15,rsmd.getPrecision(6));
1:7c22a62:         assertEquals(0, rsmd.getScale(6));
1:7c22a62:         
1:7c22a62:         // COLUMN 7 CHAR (60)
1:7c22a62:         assertEquals("java.lang.String", rsmd.getColumnClassName(7));
1:7c22a62:         assertEquals(60, rsmd.getColumnDisplaySize(7));
1:7c22a62:         assertEquals("CHARCOL", rsmd.getColumnLabel(7));
1:7c22a62:         assertEquals(java.sql.Types.CHAR,rsmd.getColumnType(7));
1:7c22a62:         assertEquals("CHAR", rsmd.getColumnTypeName(7));
1:7c22a62:         assertEquals(60,rsmd.getPrecision(7));
1:7c22a62:         assertEquals(0, rsmd.getScale(7));
1:7c22a62:         
1:7c22a62:         // COLUMN 8 VARCHAR (60)
1:7c22a62:         assertEquals("java.lang.String", rsmd.getColumnClassName(8));
1:7c22a62:         assertEquals(60, rsmd.getColumnDisplaySize(8));
1:7c22a62:         assertEquals("VARCHARCOL", rsmd.getColumnLabel(8));
1:7c22a62:         assertEquals(java.sql.Types.VARCHAR,rsmd.getColumnType(8));
1:7c22a62:         assertEquals("VARCHAR", rsmd.getColumnTypeName(8));
1:7c22a62:         assertEquals(60,rsmd.getPrecision(8));
1:7c22a62:         assertEquals(0, rsmd.getScale(8));
1:7c22a62:         
1:7c22a62:         // COLUMN 9  LONG VARCHAR
1:7c22a62:         assertEquals("java.lang.String", rsmd.getColumnClassName(9));
1:7c22a62:         assertEquals(32700, rsmd.getColumnDisplaySize(9));
1:7c22a62:         assertEquals("LONGVARCHARCOL", rsmd.getColumnLabel(9));
1:7c22a62:         assertEquals(java.sql.Types.LONGVARCHAR,rsmd.getColumnType(9));
1:7c22a62:         assertEquals("LONG VARCHAR", rsmd.getColumnTypeName(9));
1:7c22a62:         assertEquals(32700,rsmd.getPrecision(9));
1:7c22a62:         assertEquals(0, rsmd.getScale(9));
1:7c22a62:         
1:7c22a62:         // COLUMN 10 CHAR FOR BIT DATA
1:7c22a62:         assertEquals("byte[]", rsmd.getColumnClassName(10));
1:7c22a62:         assertEquals(120, rsmd.getColumnDisplaySize(10));
1:7c22a62:         assertEquals("CHARFORBITCOL", rsmd.getColumnLabel(10));
1:7c22a62:         assertEquals(java.sql.Types.BINARY,rsmd.getColumnType(10));
1:7c22a62:         if (usingEmbedded())
1:7c22a62:             assertEquals("CHAR () FOR BIT DATA", rsmd.getColumnTypeName(10));
1:7c22a62:         else
1:7c22a62:             assertEquals("CHAR FOR BIT DATA", rsmd.getColumnTypeName(10));
1:7c22a62:         assertEquals(60,rsmd.getPrecision(10));
1:7c22a62:         assertEquals(0, rsmd.getScale(10));
1:7c22a62:         
1:7c22a62:         // COLUMN 11 VARCHAR FOR BIT DATA
1:7c22a62:         assertEquals("byte[]", rsmd.getColumnClassName(11));
1:7c22a62:         assertEquals(120, rsmd.getColumnDisplaySize(11));
1:7c22a62:         assertEquals("VARCHARFORBITCOL", rsmd.getColumnLabel(11));
1:7c22a62:         assertEquals(java.sql.Types.VARBINARY,rsmd.getColumnType(11));
1:7c22a62:         if (usingEmbedded())
1:7c22a62:             assertEquals("VARCHAR () FOR BIT DATA", rsmd.getColumnTypeName(11));
1:7c22a62:         else
1:7c22a62:             assertEquals("VARCHAR FOR BIT DATA", rsmd.getColumnTypeName(11));
1:7c22a62:         assertEquals(60,rsmd.getPrecision(11));
1:7c22a62:         assertEquals(0, rsmd.getScale(11));
1:7c22a62:     
1:7c22a62:         // COLUMN 12 LONG VARCHAR FOR BIT DATA
1:7c22a62:         assertEquals("byte[]", rsmd.getColumnClassName(12));
1:7c22a62:         assertEquals(65400, rsmd.getColumnDisplaySize(12));
1:7c22a62:         assertEquals("LVARCHARFORBITCOL", rsmd.getColumnLabel(12));
1:7c22a62:         assertEquals(java.sql.Types.LONGVARBINARY,rsmd.getColumnType(12));
1:7c22a62:         assertEquals("LONG VARCHAR FOR BIT DATA", rsmd.getColumnTypeName(12));
1:7c22a62:         assertEquals(32700,rsmd.getPrecision(12));
1:7c22a62:         assertEquals(0, rsmd.getScale(12));
1:7c22a62:         
1:7c22a62:         // COLUMN 13 CLOB
1:7c22a62:         assertEquals("java.sql.Clob", rsmd.getColumnClassName(13));
1:7c22a62:         assertEquals(1024, rsmd.getColumnDisplaySize(13));
1:7c22a62:         assertEquals("CLOBCOL", rsmd.getColumnLabel(13));
1:7c22a62:         assertEquals(java.sql.Types.CLOB,rsmd.getColumnType(13));
1:7c22a62:         assertEquals("CLOB", rsmd.getColumnTypeName(13));
1:7c22a62:         assertEquals(1024,rsmd.getPrecision(13));
1:7c22a62:         assertEquals(0, rsmd.getScale(13));
1:7c22a62:         
1:7c22a62:         // COLUMN 14 DATE
1:7c22a62:         assertEquals("java.sql.Date", rsmd.getColumnClassName(14));
1:7c22a62:         assertEquals(10, rsmd.getColumnDisplaySize(14));
1:7c22a62:         assertEquals("DATECOL", rsmd.getColumnLabel(14));
1:7c22a62:         assertEquals(java.sql.Types.DATE,rsmd.getColumnType(14));
1:7c22a62:         assertEquals("DATE", rsmd.getColumnTypeName(14));
1:7c22a62:         assertEquals(10,rsmd.getPrecision(14));
1:7c22a62:         assertEquals(0, rsmd.getScale(14));
1:7c22a62: 
1:7c22a62:         // COLUMN 15 TIME
1:7c22a62:         assertEquals("java.sql.Time", rsmd.getColumnClassName(15));
1:7c22a62:         assertEquals(8, rsmd.getColumnDisplaySize(15));
1:7c22a62:         assertEquals("TIMECOL", rsmd.getColumnLabel(15));
1:7c22a62:         assertEquals(java.sql.Types.TIME,rsmd.getColumnType(15));
1:7c22a62:         assertEquals("TIME", rsmd.getColumnTypeName(15));
1:7c22a62:         assertEquals(8,rsmd.getPrecision(15));
1:7c22a62:         assertEquals(0, rsmd.getScale(15));
1:7c22a62:         
1:7c22a62:         // COLUMN 16 TIMESTAMP
1:7c22a62:         assertEquals("java.sql.Timestamp", rsmd.getColumnClassName(16));
1:1e90bf4:         assertEquals(29, rsmd.getColumnDisplaySize(16));
1:7c22a62:         assertEquals("TIMESTAMPCOL", rsmd.getColumnLabel(16));
1:7c22a62:         assertEquals(java.sql.Types.TIMESTAMP,rsmd.getColumnType(16));
1:7c22a62:         assertEquals("TIMESTAMP", rsmd.getColumnTypeName(16));
1:1e90bf4:         assertEquals(29,rsmd.getPrecision(16));
1:1e90bf4:         assertEquals(9, rsmd.getScale(16));
1:7c22a62: 
1:7c22a62:         // COLUMN 17 BLOB
1:7c22a62:         assertEquals("java.sql.Blob", rsmd.getColumnClassName(17));
1:7c22a62:         assertEquals(2048, rsmd.getColumnDisplaySize(17));
1:7c22a62:         assertEquals("BLOBCOL", rsmd.getColumnLabel(17));
1:7c22a62:         assertEquals(java.sql.Types.BLOB,rsmd.getColumnType(17));
1:7c22a62:         assertEquals("BLOB", rsmd.getColumnTypeName(17));
1:7c22a62:         assertEquals(1024,rsmd.getPrecision(17));
1:7c22a62:         assertEquals(0, rsmd.getScale(17));
1:0c33e95:         
1:0c33e95:         ps.close();
1:7c22a62:     
1:7c22a62:     }
1:7c22a62:     
1:5698f98:     /**
1:5698f98:      * Assert that ResultSetMetaData is null or empty
1:5698f98:      * 
1:5698f98:      * @param rsmd
1:5698f98:      *            ResultSetMetaData to check
1:5698f98:      * @throws SQLException
1:5698f98:      */
1:5698f98:     private void assertEmptyResultSetMetaData(ResultSetMetaData rsmd)
1:5698f98:             throws SQLException {
1:5698f98:         if (rsmd != null)
1:5698f98:             assertEquals(0, rsmd.getColumnCount());
1:5698f98: 
1:5698f98:     }
1:5698f98: 
1:5698f98:     public static Test suite() {
1:5698f98:         return TestConfiguration.defaultSuite(PrepStmtMetaDataTest.class);
1:5698f98:     }
1:5698f98: 
1:5698f98:     public static void tstmeth() {
1:5698f98:         // for purpose of test, method may do nothing
1:5698f98:     }
1:5698f98: 
1:5698f98: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:c0a5ce1
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(15, rsmd.getColumnDisplaySize(5));
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(24, rsmd.getColumnDisplaySize(6));
commit:f9a0689
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (usingDerbyNetClient()) {
1:             // DERBY-2402 Client does not report added columns.
1:             // Take out check when DERBY-2402 is fixed
1:             //
1:         } else {
1:             rsmd = ps.getMetaData();
1:             assertEquals(2, rsmd.getColumnCount());
1:             assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(1));
1:             assertEquals("C11", rsmd.getColumnName(1));
1:             assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(2));
1:             assertEquals("C12", rsmd.getColumnName(2));
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Check ps metadata again
1:         rsmd = ps.getMetaData();
1:         assertEquals(3, rsmd.getColumnCount());
1:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(1));
1:         assertEquals("C11", rsmd.getColumnName(1));
1:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(2));
1:         assertEquals("C12", rsmd.getColumnName(2));
1:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(3));
1:         assertEquals("C13", rsmd.getColumnName(3));
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:1e90bf4
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(29, rsmd.getColumnDisplaySize(16));
1:         assertEquals(29,rsmd.getPrecision(16));
1:         assertEquals(9, rsmd.getScale(16));
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:8e2ea18
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:0c33e95
/////////////////////////////////////////////////////////////////////////
1:         checkEmptyMetaData("create table ab(a int)", true);
1:         checkEmptyMetaData("alter table ab add column b int", true);
1:         Statement s = createStatement();
1:         checkEmptyMetaData("call testproc()", false);
1:         checkEmptyMetaData("drop procedure testproc", true);
1:         checkEmptyMetaData("create schema myschema", true);
1:         checkEmptyMetaData("drop schema myschema restrict", true);
1:         checkEmptyMetaData("drop trigger mytrig", true);
1:         checkEmptyMetaData("create view myview as select * from ab", true);
1:         checkEmptyMetaData("drop view myview", true);
1:         checkEmptyMetaData("drop table ab", false);
1:         checkEmptyMetaData("create index aindex on ab(a)", true);
1:         checkEmptyMetaData("drop index aindex", false);
1:         checkEmptyMetaData("insert into ab values(1,1)", true);
1:         checkEmptyMetaData("update ab set a = 2", false);
1:         checkEmptyMetaData("delete from ab", false);
1:        Statement s = createStatement();
1:         PreparedStatement ps = prepareStatement("select * from bug4579");
/////////////////////////////////////////////////////////////////////////
1:     private void checkEmptyMetaData(String sql, boolean execute)
1:         PreparedStatement ps = prepareStatement(sql);
1:         ResultSetMetaData rsmd = ps.getMetaData();
/////////////////////////////////////////////////////////////////////////
1:         Statement s = createStatement();
1:         s.close();
1:         PreparedStatement ps = prepareStatement("SELECT * from AllDataTypesTable");
/////////////////////////////////////////////////////////////////////////
1:         
1:         ps.close();
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:9f0e445
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.SQLUtilities;
/////////////////////////////////////////////////////////////////////////
1:         SQLUtilities.createAndPopulateAllDataTypesTable(s);
commit:7c22a62
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1:     public void testAllDataTypesMetaData()  throws SQLException
1:     {
0:         Connection conn = getConnection();
0:         Statement s = conn.createStatement();
0:         JDBC.createAndPopulateAllDataTypesTable(s);
0:         PreparedStatement ps = conn.prepareStatement("SELECT * from AllDataTypesTable");
1:         ResultSetMetaData rsmd = ps.getMetaData();
1:         int colCount = rsmd.getColumnCount();
1:         assertEquals(17, colCount);
1:         // Column 1 SMALLINT
1:         assertEquals("",rsmd.getCatalogName(1));
1:         assertEquals("java.lang.Integer", rsmd.getColumnClassName(1));
1:         assertEquals(6, rsmd.getColumnDisplaySize(1));
1:         assertEquals("SMALLINTCOL", rsmd.getColumnLabel(1));
1:         assertEquals(java.sql.Types.SMALLINT,rsmd.getColumnType(1));
1:         assertEquals("SMALLINT", rsmd.getColumnTypeName(1));
1:         assertEquals(5,rsmd.getPrecision(1));
1:         assertEquals(0, rsmd.getScale(1));
1:         assertEquals("APP", rsmd.getSchemaName(1));
1:         assertEquals("ALLDATATYPESTABLE",rsmd.getTableName(1));
1:         assertFalse(rsmd.isAutoIncrement(1));
1:         assertFalse(rsmd.isCurrency(1));
1:         assertFalse(rsmd.isDefinitelyWritable(1));
1:         assertEquals(ResultSetMetaData.columnNullable, rsmd.isNullable(1));
1:         // DERBY-142 client returns incorrect value for isReadOnly
1:         if (usingEmbedded())
1:             assertFalse(rsmd.isReadOnly(1));
1:         assertTrue(rsmd.isSearchable(1));
1:         assertTrue(rsmd.isSigned(1));
1:         assertFalse(rsmd.isWritable(1));
1:         // COLUMN 2 INTEGER
1:         assertEquals("java.lang.Integer", rsmd.getColumnClassName(2));
1:         assertEquals(11, rsmd.getColumnDisplaySize(2));
1:         assertEquals("INTEGERCOL", rsmd.getColumnLabel(2));
1:         assertEquals(java.sql.Types.INTEGER,rsmd.getColumnType(2));
1:         assertEquals("INTEGER", rsmd.getColumnTypeName(2));
1:         assertEquals(10,rsmd.getPrecision(2));
1:         assertEquals(0, rsmd.getScale(2));       
1:         // COLUMN 3 BIGINT
1:         assertEquals("java.lang.Long", rsmd.getColumnClassName(3));
1:         assertEquals(20, rsmd.getColumnDisplaySize(3));
1:         assertEquals("BIGINTCOL", rsmd.getColumnLabel(3));
1:         assertEquals(java.sql.Types.BIGINT,rsmd.getColumnType(3));
1:         assertEquals("BIGINT", rsmd.getColumnTypeName(3));
1:         assertEquals(19,rsmd.getPrecision(3));
1:         assertEquals(0, rsmd.getScale(3));
1:         // COLUMN 4 DECIMAL
1:         assertEquals("java.math.BigDecimal", rsmd.getColumnClassName(4));
1:         assertEquals(12, rsmd.getColumnDisplaySize(4));
1:         assertEquals("DECIMALCOL", rsmd.getColumnLabel(4));
1:         assertEquals(java.sql.Types.DECIMAL,rsmd.getColumnType(4));
1:         assertEquals("DECIMAL", rsmd.getColumnTypeName(4));
1:         assertEquals(10,rsmd.getPrecision(4));
1:         assertEquals(5, rsmd.getScale(4));
1:         // COLUMN 5 REAL
1:         assertEquals("java.lang.Float", rsmd.getColumnClassName(5));
0:         assertEquals(13, rsmd.getColumnDisplaySize(5));
1:         assertEquals("REALCOL", rsmd.getColumnLabel(5));
1:         assertEquals(java.sql.Types.REAL,rsmd.getColumnType(5));
1:         assertEquals("REAL", rsmd.getColumnTypeName(5));
1:         assertEquals(7,rsmd.getPrecision(5));
1:         assertEquals(0, rsmd.getScale(5));
1:         
1:         // COLUMN 6 DOUBLE
1:         assertEquals("java.lang.Double", rsmd.getColumnClassName(6));
0:         assertEquals(22, rsmd.getColumnDisplaySize(6));
1:         assertEquals("DOUBLECOL", rsmd.getColumnLabel(6));
1:         assertEquals(java.sql.Types.DOUBLE,rsmd.getColumnType(6));
1:         assertEquals("DOUBLE", rsmd.getColumnTypeName(6));
1:         assertEquals(15,rsmd.getPrecision(6));
1:         assertEquals(0, rsmd.getScale(6));
1:         
1:         // COLUMN 7 CHAR (60)
1:         assertEquals("java.lang.String", rsmd.getColumnClassName(7));
1:         assertEquals(60, rsmd.getColumnDisplaySize(7));
1:         assertEquals("CHARCOL", rsmd.getColumnLabel(7));
1:         assertEquals(java.sql.Types.CHAR,rsmd.getColumnType(7));
1:         assertEquals("CHAR", rsmd.getColumnTypeName(7));
1:         assertEquals(60,rsmd.getPrecision(7));
1:         assertEquals(0, rsmd.getScale(7));
1:         
1:         // COLUMN 8 VARCHAR (60)
1:         assertEquals("java.lang.String", rsmd.getColumnClassName(8));
1:         assertEquals(60, rsmd.getColumnDisplaySize(8));
1:         assertEquals("VARCHARCOL", rsmd.getColumnLabel(8));
1:         assertEquals(java.sql.Types.VARCHAR,rsmd.getColumnType(8));
1:         assertEquals("VARCHAR", rsmd.getColumnTypeName(8));
1:         assertEquals(60,rsmd.getPrecision(8));
1:         assertEquals(0, rsmd.getScale(8));
1:         
1:         // COLUMN 9  LONG VARCHAR
1:         assertEquals("java.lang.String", rsmd.getColumnClassName(9));
1:         assertEquals(32700, rsmd.getColumnDisplaySize(9));
1:         assertEquals("LONGVARCHARCOL", rsmd.getColumnLabel(9));
1:         assertEquals(java.sql.Types.LONGVARCHAR,rsmd.getColumnType(9));
1:         assertEquals("LONG VARCHAR", rsmd.getColumnTypeName(9));
1:         assertEquals(32700,rsmd.getPrecision(9));
1:         assertEquals(0, rsmd.getScale(9));
1:         
1:         // COLUMN 10 CHAR FOR BIT DATA
1:         assertEquals("byte[]", rsmd.getColumnClassName(10));
1:         assertEquals(120, rsmd.getColumnDisplaySize(10));
1:         assertEquals("CHARFORBITCOL", rsmd.getColumnLabel(10));
1:         assertEquals(java.sql.Types.BINARY,rsmd.getColumnType(10));
1:         if (usingEmbedded())
1:             assertEquals("CHAR () FOR BIT DATA", rsmd.getColumnTypeName(10));
1:         else
1:             assertEquals("CHAR FOR BIT DATA", rsmd.getColumnTypeName(10));
1:         assertEquals(60,rsmd.getPrecision(10));
1:         assertEquals(0, rsmd.getScale(10));
1:         
1:         // COLUMN 11 VARCHAR FOR BIT DATA
1:         assertEquals("byte[]", rsmd.getColumnClassName(11));
1:         assertEquals(120, rsmd.getColumnDisplaySize(11));
1:         assertEquals("VARCHARFORBITCOL", rsmd.getColumnLabel(11));
1:         assertEquals(java.sql.Types.VARBINARY,rsmd.getColumnType(11));
1:         if (usingEmbedded())
1:             assertEquals("VARCHAR () FOR BIT DATA", rsmd.getColumnTypeName(11));
1:         else
1:             assertEquals("VARCHAR FOR BIT DATA", rsmd.getColumnTypeName(11));
1:         assertEquals(60,rsmd.getPrecision(11));
1:         assertEquals(0, rsmd.getScale(11));
1:     
1:         // COLUMN 12 LONG VARCHAR FOR BIT DATA
1:         assertEquals("byte[]", rsmd.getColumnClassName(12));
1:         assertEquals(65400, rsmd.getColumnDisplaySize(12));
1:         assertEquals("LVARCHARFORBITCOL", rsmd.getColumnLabel(12));
1:         assertEquals(java.sql.Types.LONGVARBINARY,rsmd.getColumnType(12));
1:         assertEquals("LONG VARCHAR FOR BIT DATA", rsmd.getColumnTypeName(12));
1:         assertEquals(32700,rsmd.getPrecision(12));
1:         assertEquals(0, rsmd.getScale(12));
1:         
1:         // COLUMN 13 CLOB
1:         assertEquals("java.sql.Clob", rsmd.getColumnClassName(13));
1:         assertEquals(1024, rsmd.getColumnDisplaySize(13));
1:         assertEquals("CLOBCOL", rsmd.getColumnLabel(13));
1:         assertEquals(java.sql.Types.CLOB,rsmd.getColumnType(13));
1:         assertEquals("CLOB", rsmd.getColumnTypeName(13));
1:         assertEquals(1024,rsmd.getPrecision(13));
1:         assertEquals(0, rsmd.getScale(13));
1:         
1:         // COLUMN 14 DATE
1:         assertEquals("java.sql.Date", rsmd.getColumnClassName(14));
1:         assertEquals(10, rsmd.getColumnDisplaySize(14));
1:         assertEquals("DATECOL", rsmd.getColumnLabel(14));
1:         assertEquals(java.sql.Types.DATE,rsmd.getColumnType(14));
1:         assertEquals("DATE", rsmd.getColumnTypeName(14));
1:         assertEquals(10,rsmd.getPrecision(14));
1:         assertEquals(0, rsmd.getScale(14));
1: 
1:         // COLUMN 15 TIME
1:         assertEquals("java.sql.Time", rsmd.getColumnClassName(15));
1:         assertEquals(8, rsmd.getColumnDisplaySize(15));
1:         assertEquals("TIMECOL", rsmd.getColumnLabel(15));
1:         assertEquals(java.sql.Types.TIME,rsmd.getColumnType(15));
1:         assertEquals("TIME", rsmd.getColumnTypeName(15));
1:         assertEquals(8,rsmd.getPrecision(15));
1:         assertEquals(0, rsmd.getScale(15));
1:         
1:         // COLUMN 16 TIMESTAMP
1:         assertEquals("java.sql.Timestamp", rsmd.getColumnClassName(16));
0:         assertEquals(26, rsmd.getColumnDisplaySize(16));
1:         assertEquals("TIMESTAMPCOL", rsmd.getColumnLabel(16));
1:         assertEquals(java.sql.Types.TIMESTAMP,rsmd.getColumnType(16));
1:         assertEquals("TIMESTAMP", rsmd.getColumnTypeName(16));
0:         assertEquals(26,rsmd.getPrecision(16));
0:         assertEquals(6, rsmd.getScale(16));
1: 
1:         // COLUMN 17 BLOB
1:         assertEquals("java.sql.Blob", rsmd.getColumnClassName(17));
1:         assertEquals(2048, rsmd.getColumnDisplaySize(17));
1:         assertEquals("BLOBCOL", rsmd.getColumnLabel(17));
1:         assertEquals(java.sql.Types.BLOB,rsmd.getColumnType(17));
1:         assertEquals("BLOB", rsmd.getColumnTypeName(17));
1:         assertEquals(1024,rsmd.getPrecision(17));
1:         assertEquals(0, rsmd.getScale(17));
1:     
1:     }
1:     
commit:5698f98
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Classs org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class PrepStmtMetaDataTest extends BaseJDBCTestCase {
1: 
1:     public PrepStmtMetaDataTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Test getMetaData calls on prepared statements that do not return a
1:      * ResultSet
1:      */
1:     public void testNoResultSetMeta() throws SQLException {
0:         Connection conn = getConnection();
0:         conn.setAutoCommit(true);
1: 
1:         // test MetaData with statements that
1:         // do not return a ResultSet
0:         checkEmptyMetaData(conn, "create table ab(a int)", true);
0:         checkEmptyMetaData(conn, "alter table ab add column b int", true);
1: 
0:         Statement s = conn.createStatement();
1:         s
1:                 .execute("create procedure testproc() language java external name "
1:                         + "'org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest.tstmeth'"
1:                         + " parameter style java");
1: 
1:         // test call statement - shouldn't have meta data
0:         checkEmptyMetaData(conn, "call testproc()", false);
1: 
1:         // test drop procedure - meta data should be null
0:         checkEmptyMetaData(conn, "drop procedure testproc", true);
1: 
1:         // test create schema - meta data should be null
0:         checkEmptyMetaData(conn, "create schema myschema", true);
1: 
1:         // test drop schema - meta data should be null
0:         checkEmptyMetaData(conn, "drop schema myschema restrict", true);
1: 
1:         s.execute("CREATE TABLE TRIGTAB (i int)");
1:         // test create trigger - meta data should be null
1:         checkEmptyMetaData(
0:                 conn,
1:                 "create trigger mytrig after insert on ab for each row insert into trigtab values(1)",
1:                 true);
1: 
1:         // test drop trigger - meta data should be null
0:         checkEmptyMetaData(conn, "drop trigger mytrig", true);
1: 
1:         // test create view - meta data should be null
0:         checkEmptyMetaData(conn, "create view myview as select * from ab", true);
1: 
1:         // test drop view - meta data should be null
0:         checkEmptyMetaData(conn, "drop view myview", true);
1: 
1:         // test drop table - meta data should be null
0:         checkEmptyMetaData(conn, "drop table ab", false);
1: 
1:         // test create index - meta data should be null
0:         checkEmptyMetaData(conn, "create index aindex on ab(a)", true);
1: 
1:         // test drop index - meta data should be null
0:         checkEmptyMetaData(conn, "drop index aindex", false);
1: 
1:         // test insert - meta data should be null
0:         checkEmptyMetaData(conn, "insert into ab values(1,1)", true);
1: 
1:         // test update - meta data should be null
0:         checkEmptyMetaData(conn, "update ab set a = 2", false);
1: 
1:         // test delete - meta data should be null
0:         checkEmptyMetaData(conn, "delete from ab", false);
1:         s.executeUpdate("drop table ab");
1:         s.close();
1:     }
1: 
1:     public void testAlterTableMeta() throws SQLException {
1: 
0:         Connection conn = getConnection();
0:         Statement s = conn.createStatement();
1:         s.executeUpdate("create table bug4579 (c11 int)");
1:         s.executeUpdate("insert into bug4579 values (1)");
0:         PreparedStatement ps = conn.prepareStatement("select * from bug4579");
1:         ResultSetMetaData rsmd = ps.getMetaData();
1:         assertEquals(1, rsmd.getColumnCount());
1:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(1));
1:         assertEquals("C11", rsmd.getColumnName(1));
1: 
0:         // DERBY-2402 Client does not report added columns.
0:         // Take out check when DERBY-2402 is fixed
0:         if (usingDerbyNetClient())
0:             return;
1: 
1:         s.executeUpdate("alter table bug4579 add column c12 int");
1:         rsmd = ps.getMetaData();
0:         assertEquals(2, rsmd.getColumnCount());
1:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(1));
1:         assertEquals("C11", rsmd.getColumnName(1));
1:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(2));
1:         assertEquals("C12", rsmd.getColumnName(2));
1: 
1:         // ResultSetMetaData for select * after alter table and
1:         // executeQuery.
1:         s.executeUpdate("alter table bug4579 add column c13 int");
1:         ResultSet rs = ps.executeQuery();
1:         rsmd = ps.getMetaData();
1:         assertEquals(3, rsmd.getColumnCount());
1:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(1));
1:         assertEquals("C11", rsmd.getColumnName(1));
1:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(2));
1:         assertEquals("C12", rsmd.getColumnName(2));
1:         assertEquals(java.sql.Types.INTEGER, rsmd.getColumnType(3));
1:         assertEquals("C13", rsmd.getColumnName(3));
1:         rs.close();
1:         ps.close();
1:         s.executeUpdate("drop table bug4579");
1:         s.close();
1: 
1:     }
1: 
1:     /**
1:      * Check the metatdata for a prepared statement that does not return a
1:      * ResultSet is empty
1:      * 
0:      * @param conn
0:      *            connection to use
1:      * @param sql
1:      *            sql for prepared statement
1:      * @param execute
1:      *            execute PreparedStatement if true
1:      * @throws SQLException
1:      */
0:     private void checkEmptyMetaData(Connection conn, String sql, boolean execute)
1:             throws SQLException {
0:         PreparedStatement ps;
0:         ResultSetMetaData rsmd;
0:         ps = conn.prepareStatement(sql);
1:         rsmd = ps.getMetaData();
1:         assertEmptyResultSetMetaData(rsmd);
1:         if (execute)
1:             ps.executeUpdate();
1:         ps.close();
1:     }
1: 
1:     /**
1:      * Assert that ResultSetMetaData is null or empty
1:      * 
1:      * @param rsmd
1:      *            ResultSetMetaData to check
1:      * @throws SQLException
1:      */
1:     private void assertEmptyResultSetMetaData(ResultSetMetaData rsmd)
1:             throws SQLException {
1:         if (rsmd != null)
1:             assertEquals(0, rsmd.getColumnCount());
1: 
1:     }
1: 
1:     public static Test suite() {
1:         return TestConfiguration.defaultSuite(PrepStmtMetaDataTest.class);
1:     }
1: 
1:     public static void tstmeth() {
1:         // for purpose of test, method may do nothing
1:     }
1: 
1: }
============================================================================