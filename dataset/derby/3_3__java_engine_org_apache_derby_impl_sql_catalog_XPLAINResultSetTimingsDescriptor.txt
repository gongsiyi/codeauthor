1:782dbe1: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:782dbe1:  */
1:782dbe1: 
1:48a9884: package org.apache.derby.impl.sql.catalog;
1:48a9884: 
1:48a9884: import java.sql.PreparedStatement;
1:48a9884: import java.sql.SQLException;
1:48a9884: 
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:48a9884: import java.sql.Types;
1:48a9884: 
1:48a9884: public class XPLAINResultSetTimingsDescriptor extends XPLAINTableDescriptor 
1:48a9884: {
1:48a9884: 
1:48a9884:     private UUID timing_id; // the timuing UUID for the result set timing information
1:48a9884:     private Long constructor_time; // the time needed to create an object, through a call of the constructor
1:48a9884:     private Long open_time; // the time needed to process all open calls
1:48a9884:     private Long next_time; // the time needed to process all next calls
1:48a9884:     private Long close_time; // the time needed to close the resultset
1:48a9884:     private Long execute_time; // the time needed for overall execution
1:48a9884:     private Long avg_next_time_per_row; // the avarage time needed for a next call per row
1:48a9884:     private Long projection_time; // the time needed by a ProjectRestrictResultSet to do the projection
1:48a9884:     private Long restriction_time; // the time needed by a ProjectRestrictResultSet to do the restriction
1:48a9884:     private Long temp_cong_create_time; //  the timestamp of th creation of a temporary conglomerate
1:48a9884:     private Long temp_cong_fetch_time; // the time needed to do a fetch from this temporary conglomerate
1:48a9884:     
1:48a9884: 
1:48a9884:     public XPLAINResultSetTimingsDescriptor() {}
1:48a9884:     public XPLAINResultSetTimingsDescriptor
1:48a9884:     (
1:48a9884:             UUID timing_id,
1:48a9884:             Long constructor_time,
1:48a9884:             Long open_time,
1:48a9884:             Long next_time,
1:48a9884:             Long close_time,
1:48a9884:             Long execute_time,
1:48a9884:             Long avg_next_time_per_row,
1:48a9884:             Long projection_time,
1:48a9884:             Long restriction_time,
1:48a9884:             Long temp_cong_create_time,
1:48a9884:             Long temp_cong_fetch_time
1:48a9884:     )
1:48a9884:     {
1:48a9884:         
1:48a9884:         this.timing_id = timing_id;
1:48a9884:         this.constructor_time = constructor_time;
1:48a9884:         this.open_time = open_time;
1:48a9884:         this.next_time = next_time;
1:48a9884:         this.close_time = close_time;
1:48a9884:         this.execute_time = execute_time;
1:48a9884:         this.avg_next_time_per_row = avg_next_time_per_row;
1:48a9884:         this.projection_time = projection_time;
1:48a9884:         this.restriction_time = restriction_time;
1:48a9884:         this.temp_cong_create_time = temp_cong_create_time;
1:48a9884:         this.temp_cong_fetch_time = temp_cong_fetch_time;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setStatementParameters(PreparedStatement ps)
1:48a9884:         throws SQLException
1:48a9884:     {
1:48a9884:         ps.setString(1, timing_id.toString());
1:638cea5:         ps.setObject(2, constructor_time, Types.BIGINT);
1:638cea5:         ps.setObject(3, open_time, Types.BIGINT);
1:638cea5:         ps.setObject(4, next_time, Types.BIGINT);
1:638cea5:         ps.setObject(5, close_time, Types.BIGINT);
1:638cea5:         ps.setObject(6, execute_time, Types.BIGINT);
1:638cea5:         ps.setObject(7, avg_next_time_per_row, Types.BIGINT);
1:638cea5:         ps.setObject(8, projection_time, Types.BIGINT);
1:638cea5:         ps.setObject(9, restriction_time, Types.BIGINT);
1:638cea5:         ps.setObject(10, temp_cong_create_time, Types.BIGINT);
1:638cea5:         ps.setObject(11, temp_cong_fetch_time, Types.BIGINT);
1:48a9884:     }
1:48a9884: 
1:48a9884:     public String getCatalogName() { return TABLENAME_STRING; }
1:48a9884:     static final String             TABLENAME_STRING = "SYSXPLAIN_RESULTSET_TIMINGS";
1:48a9884: 
1:48a9884:     private static final String[][] indexColumnNames =
1:48a9884:     {
1:48a9884:         {"TIMING_ID"}
1:48a9884:     };
1:48a9884: 
1:48a9884:     /**
1:48a9884:      * Builds a list of columns suitable for creating this Catalog.
1:48a9884:      *
1:48a9884:      * @return array of SystemColumn suitable for making this catalog.
1:48a9884:      */
1:48a9884:     public SystemColumn[] buildColumnList() {
1:48a9884:         
1:48a9884:         return new SystemColumn[] {
1:48a9884:             SystemColumnImpl.getUUIDColumn("TIMING_ID", false),
1:48a9884:             SystemColumnImpl.getColumn("CONSTRUCTOR_TIME", Types.BIGINT, true),
1:48a9884:             SystemColumnImpl.getColumn("OPEN_TIME", Types.BIGINT, true),
1:48a9884:             SystemColumnImpl.getColumn("NEXT_TIME", Types.BIGINT, true),
1:48a9884:             SystemColumnImpl.getColumn("CLOSE_TIME", Types.BIGINT, true),
1:48a9884:             SystemColumnImpl.getColumn("EXECUTE_TIME", Types.BIGINT, true),
1:48a9884:             SystemColumnImpl.getColumn("AVG_NEXT_TIME_PER_ROW", Types.BIGINT, true),
1:48a9884:             SystemColumnImpl.getColumn("PROJECTION_TIME", Types.BIGINT, true),
1:48a9884:             SystemColumnImpl.getColumn("RESTRICTION_TIME", Types.BIGINT, true),
1:48a9884:             SystemColumnImpl.getColumn("TEMP_CONG_CREATE_TIME", Types.BIGINT, true),
1:48a9884:             SystemColumnImpl.getColumn("TEMP_CONG_FETCH_TIME", Types.BIGINT, true),
1:48a9884:         };
1:48a9884:     }
1:48a9884: 
1:48a9884: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:638cea5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ps.setObject(2, constructor_time, Types.BIGINT);
1:         ps.setObject(3, open_time, Types.BIGINT);
1:         ps.setObject(4, next_time, Types.BIGINT);
1:         ps.setObject(5, close_time, Types.BIGINT);
1:         ps.setObject(6, execute_time, Types.BIGINT);
1:         ps.setObject(7, avg_next_time_per_row, Types.BIGINT);
1:         ps.setObject(8, projection_time, Types.BIGINT);
1:         ps.setObject(9, restriction_time, Types.BIGINT);
1:         ps.setObject(10, temp_cong_create_time, Types.BIGINT);
1:         ps.setObject(11, temp_cong_fetch_time, Types.BIGINT);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.impl.sql.catalog.SystemColumnImpl;
1: import java.sql.Types;
1: 
1: public class XPLAINResultSetTimingsDescriptor extends XPLAINTableDescriptor 
1: {
1: 
1:     private UUID timing_id; // the timuing UUID for the result set timing information
1:     private Long constructor_time; // the time needed to create an object, through a call of the constructor
1:     private Long open_time; // the time needed to process all open calls
1:     private Long next_time; // the time needed to process all next calls
1:     private Long close_time; // the time needed to close the resultset
1:     private Long execute_time; // the time needed for overall execution
1:     private Long avg_next_time_per_row; // the avarage time needed for a next call per row
1:     private Long projection_time; // the time needed by a ProjectRestrictResultSet to do the projection
1:     private Long restriction_time; // the time needed by a ProjectRestrictResultSet to do the restriction
1:     private Long temp_cong_create_time; //  the timestamp of th creation of a temporary conglomerate
1:     private Long temp_cong_fetch_time; // the time needed to do a fetch from this temporary conglomerate
1:     
1: 
1:     public XPLAINResultSetTimingsDescriptor() {}
1:     public XPLAINResultSetTimingsDescriptor
1:     (
1:             UUID timing_id,
1:             Long constructor_time,
1:             Long open_time,
1:             Long next_time,
1:             Long close_time,
1:             Long execute_time,
1:             Long avg_next_time_per_row,
1:             Long projection_time,
1:             Long restriction_time,
1:             Long temp_cong_create_time,
1:             Long temp_cong_fetch_time
1:     )
1:     {
1:         
1:         this.timing_id = timing_id;
1:         this.constructor_time = constructor_time;
1:         this.open_time = open_time;
1:         this.next_time = next_time;
1:         this.close_time = close_time;
1:         this.execute_time = execute_time;
1:         this.avg_next_time_per_row = avg_next_time_per_row;
1:         this.projection_time = projection_time;
1:         this.restriction_time = restriction_time;
1:         this.temp_cong_create_time = temp_cong_create_time;
1:         this.temp_cong_fetch_time = temp_cong_fetch_time;
1:     }
1: 
1:     public void setStatementParameters(PreparedStatement ps)
1:         throws SQLException
1:     {
1:         ps.setString(1, timing_id.toString());
0:         if (constructor_time != null)
0:             ps.setLong(2, constructor_time.longValue());
0:         else
0:             ps.setNull(2, Types.BIGINT);
0:         if (open_time != null)
0:             ps.setLong(3, open_time.longValue());
0:         else
0:             ps.setNull(3, Types.BIGINT);
0:         if (next_time != null)
0:             ps.setLong(4, next_time.longValue());
0:         else
0:             ps.setNull(4, Types.BIGINT);
0:         if (close_time != null)
0:             ps.setLong(5, close_time.longValue());
0:         else
0:             ps.setNull(5, Types.BIGINT);
0:         if (execute_time != null)
0:             ps.setLong(6, execute_time.longValue());
0:         else
0:             ps.setNull(6, Types.BIGINT);
0:         if (avg_next_time_per_row != null)
0:             ps.setLong(7, avg_next_time_per_row.longValue());
0:         else
0:             ps.setNull(7, Types.BIGINT);
0:         if (projection_time != null)
0:             ps.setLong(8, projection_time.longValue());
0:         else
0:             ps.setNull(8, Types.BIGINT);
0:         if (restriction_time != null)
0:             ps.setLong(9, restriction_time.longValue());
0:         else
0:             ps.setNull(9, Types.BIGINT);
0:         if (temp_cong_create_time != null)
0:             ps.setLong(10, temp_cong_create_time.longValue());
0:         else
0:             ps.setNull(10, Types.BIGINT);
0:         if (temp_cong_fetch_time != null)
0:             ps.setLong(11, temp_cong_fetch_time.longValue());
0:         else
0:             ps.setNull(11, Types.BIGINT);
1:     }
1: 
1:     public String getCatalogName() { return TABLENAME_STRING; }
1:     static final String             TABLENAME_STRING = "SYSXPLAIN_RESULTSET_TIMINGS";
1: 
1:     private static final String[][] indexColumnNames =
1:     {
1:         {"TIMING_ID"}
1:     };
1: 
1:     /**
1:      * Builds a list of columns suitable for creating this Catalog.
1:      *
1:      * @return array of SystemColumn suitable for making this catalog.
1:      */
1:     public SystemColumn[] buildColumnList() {
1:         
1:         return new SystemColumn[] {
1:             SystemColumnImpl.getUUIDColumn("TIMING_ID", false),
1:             SystemColumnImpl.getColumn("CONSTRUCTOR_TIME", Types.BIGINT, true),
1:             SystemColumnImpl.getColumn("OPEN_TIME", Types.BIGINT, true),
1:             SystemColumnImpl.getColumn("NEXT_TIME", Types.BIGINT, true),
1:             SystemColumnImpl.getColumn("CLOSE_TIME", Types.BIGINT, true),
1:             SystemColumnImpl.getColumn("EXECUTE_TIME", Types.BIGINT, true),
1:             SystemColumnImpl.getColumn("AVG_NEXT_TIME_PER_ROW", Types.BIGINT, true),
1:             SystemColumnImpl.getColumn("PROJECTION_TIME", Types.BIGINT, true),
1:             SystemColumnImpl.getColumn("RESTRICTION_TIME", Types.BIGINT, true),
1:             SystemColumnImpl.getColumn("TEMP_CONG_CREATE_TIME", Types.BIGINT, true),
1:             SystemColumnImpl.getColumn("TEMP_CONG_FETCH_TIME", Types.BIGINT, true),
1:         };
1:     }
1: 
1: }
============================================================================