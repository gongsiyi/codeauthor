1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.ContainerOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Compensation;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.Undoable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Log operation to create, drop or remove a container.
1:eac0369: 
1:eac0369: 	Both the doMe or the undoMe of a create actually caused the container
1:eac0369: 	header to be modified and flushed before the log record is flushed.  This
1:eac0369: 	is necessary for 2 reasons, one is that of ensuring enough disk space, and
1:eac0369: 	the other is because unlike any other operation, the log record create
1:eac0369: 	container is in the log stream before the container is in the container
1:eac0369: 	cache.  What this mean is that if a checkpoint started after the container
1:eac0369: 	operation but before the container is kept or is dirtied in the container
1:eac0369: 	cache, then checkpoint will not know to wait for the container to be kept
1:eac0369: 	or cleaned.  The checkpoint will erroneous assume that the operation does
1:eac0369: 	not need to be redone since its log instant is before the checkpoint but in
1:eac0369: 	fact the change has not been flushed to disk.
1:eac0369: 
1:eac0369: 	A drop or remove container does not have this problem.  The container exist
1:eac0369: 	and is in kept state when the operation is logged so the checkpoint will
1:eac0369: 	not overlook it and it doesn't need to flush the container header.  In the
1:eac0369: 	case of remove, the stub is flushed for a different reason - that of
1:eac0369: 	ensuring disk space.
1:eac0369: 
1:eac0369: */
1:eac0369: public class ContainerOperation extends ContainerBasicOperation implements Undoable
1:eac0369: {
1:eac0369: 	protected byte operation;		// create, drop, or remove
1:eac0369: 
1:eac0369: 	// in previous version of contianerOperation, there may not
1:eac0369: 	// be a createByteArray
1:eac0369: 	transient protected boolean hasCreateByteArray = true;
1:eac0369: 
1:eac0369: 	protected ByteArray createByteArray;	// information necessary to
1:eac0369: 															// recreate the container 
1:eac0369: 
1:eac0369: 	protected static final byte CREATE = (byte)1;
1:eac0369: 	protected static final byte DROP = (byte)2;
1:eac0369: 	protected static final byte REMOVE = (byte)4;
1:eac0369: 
1:eac0369: 	protected ContainerOperation(RawContainerHandle hdl, byte operation) 
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		super(hdl);
1:eac0369: 		this.operation = operation;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public ContainerOperation() { super(); }
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException  
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		out.writeByte(operation);
1:eac0369: 
1:eac0369: 		if (operation == CREATE)
1:eac0369: 		{
1:eac0369: 			try
1:eac0369: 			{
1:eac0369: 				createByteArray = containerHdl.logCreateContainerInfo();
1:eac0369: 			}
1:eac0369: 			catch (StandardException se)
1:eac0369: 			{
1:eac0369: 				throw new IOException(se.toString());
1:eac0369: 			}
1:eac0369: 					
1:eac0369: 			createByteArray.writeExternal(out);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@exception IOException cannot read log record from log stream
1:eac0369: 		@exception ClassNotFoundException cannot read ByteArray object
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in)
1:eac0369: 		 throws IOException, ClassNotFoundException 
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		operation = in.readByte();
1:eac0369: 
1:eac0369: 		if (operation == CREATE && hasCreateByteArray)
1:eac0369: 		{
1:eac0369: 			createByteArray = new ByteArray();
1:eac0369: 			createByteArray.readExternal(in);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_CONTAINER;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:f57b07d: 	 * override ContainerBasicOperation's findContainerForRedoRecovery
1:eac0369: 	 */
1:eac0369: 	/**
1:20bc69f:         Find container for load tran.
1:20bc69f:         <p>
1:eac0369: 		If we are in load tran, and the operation is a create, the container
1:eac0369: 		may not (should not?) exist yet.  We need to recreate it.
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	 */
1:f57b07d: 	protected RawContainerHandle findContainerForRedoRecovery(
1:f57b07d:     RawTransaction xact)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(createByteArray != null,
1:eac0369: 			"cannot reCreate container in load tran, createByteArray is null");
1:eac0369: 
1:eac0369: 		long sid = containerId.getSegmentId();
1:eac0369: 		long cid = containerId.getContainerId();
1:eac0369: 
1:f57b07d: 		xact.reCreateContainerForRedoRecovery(sid, cid, createByteArray);
1:eac0369: 
1:eac0369: 		// now we should be able to open this container
1:eac0369: 		return xact.openDroppedContainer(containerId, (LockingPolicy)null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public final void doMe(Transaction tran, LogInstant instant, 
1:eac0369: 						   LimitObjectInput in)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		switch (operation)
1:eac0369: 		{
1:eac0369: 		case DROP:
1:eac0369: 			containerHdl.dropContainer(instant, true);
1:eac0369: 			//
1:eac0369: 			// RESOLVE: if it hasn't been stubbified, even at redo time, we will
1:eac0369: 			// want to earmark this as a post commit work because we know it will
1:eac0369: 			// not be wasted effort.
1:eac0369: 			//
1:eac0369: 			break;
1:eac0369: 
1:eac0369: 		case REMOVE:
1:eac0369: 			containerHdl.removeContainer(instant);
1:eac0369: 			break;
1:eac0369: 
1:eac0369: 		case CREATE:
1:eac0369: 			break;
1:eac0369: 			// nothing to do with create container, it has already been synced to
1:eac0369: 			// disk.  If the container is subsequently dropped or even removed,
1:eac0369: 			// that's fine too.  Don't bother to find it.
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		releaseResource(tran);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Undo of create, drop or remove
1:eac0369: 
1:eac0369: 		@param tran the transaction that is undoing this operation
1:eac0369: 		@param hdl the container handle.  This is found here during runtime
1:eac0369: 		undo - in which case we made the CLR and passed in the containerHdl
1:eac0369: 		found in generateUndo and it is passed back to this; or it is found in
1:eac0369: 		the CLR's needsRedo and is passed in and this operation never found the
1:eac0369: 		container.  Either case, release resource at the end is safe
1:eac0369: 		@param CLRInstant the log instant of the CLR
1:eac0369: 		@param in optional data
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public void undoMe(Transaction tran, RawContainerHandle hdl,
1:eac0369: 					   LogInstant CLRInstant, LimitObjectInput in)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		switch(operation)
1:eac0369: 		{
1:eac0369: 		case DROP:
1:eac0369: 			if (SanityManager.DEBUG) {
1:eac0369: 				SanityManager.ASSERT(hdl != null, "container handle is null");
1:eac0369: 				SanityManager.ASSERT(hdl.getContainerStatus() != RawContainerHandle.COMMITTED_DROP,
1:eac0369: 									 "Undoing a drop but the container status is not dropped");
1:eac0369: 			}
1:eac0369: 			hdl.dropContainer(CLRInstant, false); // not dropped
1:eac0369: 			break;
1:eac0369: 
1:eac0369: 		case CREATE: 
1:eac0369: 			// remove the container
1:eac0369: 			hdl.removeContainer(CLRInstant);
1:eac0369: 			break;
1:eac0369: 
1:eac0369: 		case REMOVE:
1:eac0369: 			if (SanityManager.DEBUG) {
1:eac0369: 				SanityManager.THROWASSERT("cannot undo REMOVE, should not have generated a CLR in the first place");
1:eac0369: 			}
1:eac0369: 			break;
1:eac0369: 		}
1:eac0369: 		releaseResource(tran);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@see org.apache.derby.iapi.store.raw.Undoable
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public Compensation generateUndo(Transaction tran, LimitObjectInput in)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (operation == REMOVE)
1:eac0369: 			return null;		// cannot undo REMOVE
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			RawContainerHandle undoContainerHandle = findContainer(tran);
1:eac0369: 			
1:eac0369: 			// mark the container as pre-dirtied so that if a checkpoint
1:eac0369: 			// happens after the log record is sent to the log stream, the
1:eac0369: 			// cache cleaning will wait for this change.
1:eac0369: 			//
1:eac0369: 			// RESOLVE: don't do this now because if undo failed, this
1:eac0369: 			// container will be "stuck" in the preDirty state and checkpoint
1:eac0369: 			// will be stuck
1:eac0369: 			// undoContainerHandle.preDirty(true);
1:eac0369: 			//
1:eac0369: 
1:eac0369: 			return new ContainerUndoOperation(undoContainerHandle, this);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** debug */
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			String str = super.toString();
1:eac0369: 			switch(operation)
1:eac0369: 			{
1:eac0369: 			case CREATE: str += " CREATE container " + containerId;
1:eac0369: 				break;
1:eac0369: 			case DROP: str += " DROP container " + containerId;
1:eac0369: 				break;
1:eac0369: 			case REMOVE: str += " REMOVE container " + containerId;
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 			return str;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:f57b07d
/////////////////////////////////////////////////////////////////////////
1: 	 * override ContainerBasicOperation's findContainerForRedoRecovery
/////////////////////////////////////////////////////////////////////////
1: 	protected RawContainerHandle findContainerForRedoRecovery(
1:     RawTransaction xact)
/////////////////////////////////////////////////////////////////////////
1: 		xact.reCreateContainerForRedoRecovery(sid, cid, createByteArray);
commit:20bc69f
/////////////////////////////////////////////////////////////////////////
1:         Find container for load tran.
1:         <p>
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.ContainerOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.raw.Compensation;
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Undoable;
1: 
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: import java.io.ObjectOutput;
1: import java.io.InputStream;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /**
1: 	Log operation to create, drop or remove a container.
1: 
1: 	Both the doMe or the undoMe of a create actually caused the container
1: 	header to be modified and flushed before the log record is flushed.  This
1: 	is necessary for 2 reasons, one is that of ensuring enough disk space, and
1: 	the other is because unlike any other operation, the log record create
1: 	container is in the log stream before the container is in the container
1: 	cache.  What this mean is that if a checkpoint started after the container
1: 	operation but before the container is kept or is dirtied in the container
1: 	cache, then checkpoint will not know to wait for the container to be kept
1: 	or cleaned.  The checkpoint will erroneous assume that the operation does
1: 	not need to be redone since its log instant is before the checkpoint but in
1: 	fact the change has not been flushed to disk.
1: 
1: 	A drop or remove container does not have this problem.  The container exist
1: 	and is in kept state when the operation is logged so the checkpoint will
1: 	not overlook it and it doesn't need to flush the container header.  In the
1: 	case of remove, the stub is flushed for a different reason - that of
1: 	ensuring disk space.
1: 
1: */
1: public class ContainerOperation extends ContainerBasicOperation implements Undoable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	protected byte operation;		// create, drop, or remove
1: 
1: 	// in previous version of contianerOperation, there may not
1: 	// be a createByteArray
1: 	transient protected boolean hasCreateByteArray = true;
1: 
1: 	protected ByteArray createByteArray;	// information necessary to
1: 															// recreate the container 
1: 
1: 	protected static final byte CREATE = (byte)1;
1: 	protected static final byte DROP = (byte)2;
1: 	protected static final byte REMOVE = (byte)4;
1: 
1: 	protected ContainerOperation(RawContainerHandle hdl, byte operation) 
1: 		 throws StandardException
1: 	{
1: 		super(hdl);
1: 		this.operation = operation;
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public ContainerOperation() { super(); }
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException  
1: 	{
1: 		super.writeExternal(out);
1: 		out.writeByte(operation);
1: 
1: 		if (operation == CREATE)
1: 		{
1: 			try
1: 			{
1: 				createByteArray = containerHdl.logCreateContainerInfo();
1: 			}
1: 			catch (StandardException se)
1: 			{
1: 				throw new IOException(se.toString());
1: 			}
1: 					
1: 			createByteArray.writeExternal(out);
1: 		}
1: 	}
1: 
1: 	/**
1: 		@exception IOException cannot read log record from log stream
1: 		@exception ClassNotFoundException cannot read ByteArray object
1: 	 */
1: 	public void readExternal(ObjectInput in)
1: 		 throws IOException, ClassNotFoundException 
1: 	{
1: 		super.readExternal(in);
1: 		operation = in.readByte();
1: 
1: 		if (operation == CREATE && hasCreateByteArray)
1: 		{
1: 			createByteArray = new ByteArray();
1: 			createByteArray.readExternal(in);
1: 		}
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_CONTAINER;
1: 	}
1: 
1: 
1: 	/*
0: 	 * override ContainerBasicOperation's findContainerForLoadTran
1: 	 */
1: 	/**
1: 		If we are in load tran, and the operation is a create, the container
1: 		may not (should not?) exist yet.  We need to recreate it.
1: 
0: 		@exception StandardException Standard Cloudscape policy.
1: 	 */
0: 	protected RawContainerHandle findContainerForLoadTran(RawTransaction xact)
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(createByteArray != null,
1: 			"cannot reCreate container in load tran, createByteArray is null");
1: 
1: 		long sid = containerId.getSegmentId();
1: 		long cid = containerId.getContainerId();
1: 
0: 		xact.reCreateContainerForLoadTran(sid, cid, createByteArray);
1: 
1: 		// now we should be able to open this container
1: 		return xact.openDroppedContainer(containerId, (LockingPolicy)null);
1: 	}
1: 
1: 	/** 
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public final void doMe(Transaction tran, LogInstant instant, 
1: 						   LimitObjectInput in)
1: 		 throws StandardException
1: 	{
1: 
1: 		switch (operation)
1: 		{
1: 		case DROP:
1: 			containerHdl.dropContainer(instant, true);
1: 			//
1: 			// RESOLVE: if it hasn't been stubbified, even at redo time, we will
1: 			// want to earmark this as a post commit work because we know it will
1: 			// not be wasted effort.
1: 			//
1: 			break;
1: 
1: 		case REMOVE:
1: 			containerHdl.removeContainer(instant);
1: 			break;
1: 
1: 		case CREATE:
1: 			break;
1: 			// nothing to do with create container, it has already been synced to
1: 			// disk.  If the container is subsequently dropped or even removed,
1: 			// that's fine too.  Don't bother to find it.
1: 		}
1: 
1: 		releaseResource(tran);
1: 	}
1: 
1: 
1: 	/**
1: 		Undo of create, drop or remove
1: 
1: 		@param tran the transaction that is undoing this operation
1: 		@param hdl the container handle.  This is found here during runtime
1: 		undo - in which case we made the CLR and passed in the containerHdl
1: 		found in generateUndo and it is passed back to this; or it is found in
1: 		the CLR's needsRedo and is passed in and this operation never found the
1: 		container.  Either case, release resource at the end is safe
1: 		@param CLRInstant the log instant of the CLR
1: 		@param in optional data
0: 		@param dataLength optional data length
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public void undoMe(Transaction tran, RawContainerHandle hdl,
1: 					   LogInstant CLRInstant, LimitObjectInput in)
1: 		 throws StandardException
1: 	{
1: 		switch(operation)
1: 		{
1: 		case DROP:
1: 			if (SanityManager.DEBUG) {
1: 				SanityManager.ASSERT(hdl != null, "container handle is null");
1: 				SanityManager.ASSERT(hdl.getContainerStatus() != RawContainerHandle.COMMITTED_DROP,
1: 									 "Undoing a drop but the container status is not dropped");
1: 			}
1: 			hdl.dropContainer(CLRInstant, false); // not dropped
1: 			break;
1: 
1: 		case CREATE: 
1: 			// remove the container
1: 			hdl.removeContainer(CLRInstant);
1: 			break;
1: 
1: 		case REMOVE:
1: 			if (SanityManager.DEBUG) {
1: 				SanityManager.THROWASSERT("cannot undo REMOVE, should not have generated a CLR in the first place");
1: 			}
1: 			break;
1: 		}
1: 		releaseResource(tran);
1: 
1: 	}
1: 
1: 	/**
1: 		@see org.apache.derby.iapi.store.raw.Undoable
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public Compensation generateUndo(Transaction tran, LimitObjectInput in)
1: 		 throws StandardException
1: 	{
1: 		if (operation == REMOVE)
1: 			return null;		// cannot undo REMOVE
1: 		else
1: 		{
1: 			RawContainerHandle undoContainerHandle = findContainer(tran);
1: 			
1: 			// mark the container as pre-dirtied so that if a checkpoint
1: 			// happens after the log record is sent to the log stream, the
1: 			// cache cleaning will wait for this change.
1: 			//
1: 			// RESOLVE: don't do this now because if undo failed, this
1: 			// container will be "stuck" in the preDirty state and checkpoint
1: 			// will be stuck
1: 			// undoContainerHandle.preDirty(true);
1: 			//
1: 
1: 			return new ContainerUndoOperation(undoContainerHandle, this);
1: 		}
1: 	}
1: 
1: 	/** debug */
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			String str = super.toString();
1: 			switch(operation)
1: 			{
1: 			case CREATE: str += " CREATE container " + containerId;
1: 				break;
1: 			case DROP: str += " DROP container " + containerId;
1: 				break;
1: 			case REMOVE: str += " REMOVE container " + containerId;
1: 				break;
1: 			}
1: 			return str;
1: 		}
1: 		else
1: 			return null;
1: 	}
1: 
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.raw.Compensation;
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.Undoable;
0: 
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: import java.io.ObjectOutput;
0: import java.io.InputStream;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /**
0: 	Log operation to create, drop or remove a container.
0: 
0: 	Both the doMe or the undoMe of a create actually caused the container
0: 	header to be modified and flushed before the log record is flushed.  This
0: 	is necessary for 2 reasons, one is that of ensuring enough disk space, and
0: 	the other is because unlike any other operation, the log record create
0: 	container is in the log stream before the container is in the container
0: 	cache.  What this mean is that if a checkpoint started after the container
0: 	operation but before the container is kept or is dirtied in the container
0: 	cache, then checkpoint will not know to wait for the container to be kept
0: 	or cleaned.  The checkpoint will erroneous assume that the operation does
0: 	not need to be redone since its log instant is before the checkpoint but in
0: 	fact the change has not been flushed to disk.
0: 
0: 	A drop or remove container does not have this problem.  The container exist
0: 	and is in kept state when the operation is logged so the checkpoint will
0: 	not overlook it and it doesn't need to flush the container header.  In the
0: 	case of remove, the stub is flushed for a different reason - that of
0: 	ensuring disk space.
0: 
0: */
0: public class ContainerOperation extends ContainerBasicOperation implements Undoable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	protected byte operation;		// create, drop, or remove
0: 
0: 	// in previous version of contianerOperation, there may not
0: 	// be a createByteArray
0: 	transient protected boolean hasCreateByteArray = true;
0: 
0: 	protected ByteArray createByteArray;	// information necessary to
0: 															// recreate the container 
0: 
0: 	protected static final byte CREATE = (byte)1;
0: 	protected static final byte DROP = (byte)2;
0: 	protected static final byte REMOVE = (byte)4;
0: 
0: 	protected ContainerOperation(RawContainerHandle hdl, byte operation) 
0: 		 throws StandardException
0: 	{
0: 		super(hdl);
0: 		this.operation = operation;
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public ContainerOperation() { super(); }
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException  
0: 	{
0: 		super.writeExternal(out);
0: 		out.writeByte(operation);
0: 
0: 		if (operation == CREATE)
0: 		{
0: 			try
0: 			{
0: 				createByteArray = containerHdl.logCreateContainerInfo();
0: 			}
0: 			catch (StandardException se)
0: 			{
0: 				throw new IOException(se.toString());
0: 			}
0: 					
0: 			createByteArray.writeExternal(out);
0: 		}
0: 	}
0: 
0: 	/**
0: 		@exception IOException cannot read log record from log stream
0: 		@exception ClassNotFoundException cannot read ByteArray object
0: 	 */
0: 	public void readExternal(ObjectInput in)
0: 		 throws IOException, ClassNotFoundException 
0: 	{
0: 		super.readExternal(in);
0: 		operation = in.readByte();
0: 
0: 		if (operation == CREATE && hasCreateByteArray)
0: 		{
0: 			createByteArray = new ByteArray();
0: 			createByteArray.readExternal(in);
0: 		}
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_CONTAINER;
0: 	}
0: 
0: 
0: 	/*
0: 	 * override ContainerBasicOperation's findContainerForLoadTran
0: 	 */
0: 	/**
0: 		If we are in load tran, and the operation is a create, the container
0: 		may not (should not?) exist yet.  We need to recreate it.
0: 
0: 		@exception StandardException Standard Cloudscape policy.
0: 	 */
0: 	protected RawContainerHandle findContainerForLoadTran(RawTransaction xact)
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(createByteArray != null,
0: 			"cannot reCreate container in load tran, createByteArray is null");
0: 
0: 		long sid = containerId.getSegmentId();
0: 		long cid = containerId.getContainerId();
0: 
0: 		xact.reCreateContainerForLoadTran(sid, cid, createByteArray);
0: 
0: 		// now we should be able to open this container
0: 		return xact.openDroppedContainer(containerId, (LockingPolicy)null);
0: 	}
0: 
0: 	/** 
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public final void doMe(Transaction tran, LogInstant instant, 
0: 						   LimitObjectInput in)
0: 		 throws StandardException
0: 	{
0: 
0: 		switch (operation)
0: 		{
0: 		case DROP:
0: 			containerHdl.dropContainer(instant, true);
0: 			//
0: 			// RESOLVE: if it hasn't been stubbified, even at redo time, we will
0: 			// want to earmark this as a post commit work because we know it will
0: 			// not be wasted effort.
0: 			//
0: 			break;
0: 
0: 		case REMOVE:
0: 			containerHdl.removeContainer(instant);
0: 			break;
0: 
0: 		case CREATE:
0: 			break;
0: 			// nothing to do with create container, it has already been synced to
0: 			// disk.  If the container is subsequently dropped or even removed,
0: 			// that's fine too.  Don't bother to find it.
0: 		}
0: 
0: 		releaseResource(tran);
0: 	}
0: 
0: 
0: 	/**
0: 		Undo of create, drop or remove
0: 
0: 		@param tran the transaction that is undoing this operation
0: 		@param hdl the container handle.  This is found here during runtime
0: 		undo - in which case we made the CLR and passed in the containerHdl
0: 		found in generateUndo and it is passed back to this; or it is found in
0: 		the CLR's needsRedo and is passed in and this operation never found the
0: 		container.  Either case, release resource at the end is safe
0: 		@param CLRInstant the log instant of the CLR
0: 		@param in optional data
0: 		@param dataLength optional data length
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public void undoMe(Transaction tran, RawContainerHandle hdl,
0: 					   LogInstant CLRInstant, LimitObjectInput in)
0: 		 throws StandardException
0: 	{
0: 		switch(operation)
0: 		{
0: 		case DROP:
0: 			if (SanityManager.DEBUG) {
0: 				SanityManager.ASSERT(hdl != null, "container handle is null");
0: 				SanityManager.ASSERT(hdl.getContainerStatus() != RawContainerHandle.COMMITTED_DROP,
0: 									 "Undoing a drop but the container status is not dropped");
0: 			}
0: 			hdl.dropContainer(CLRInstant, false); // not dropped
0: 			break;
0: 
0: 		case CREATE: 
0: 			// remove the container
0: 			hdl.removeContainer(CLRInstant);
0: 			break;
0: 
0: 		case REMOVE:
0: 			if (SanityManager.DEBUG) {
0: 				SanityManager.THROWASSERT("cannot undo REMOVE, should not have generated a CLR in the first place");
0: 			}
0: 			break;
0: 		}
0: 		releaseResource(tran);
0: 
0: 	}
0: 
0: 	/**
0: 		@see org.apache.derby.iapi.store.raw.Undoable
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public Compensation generateUndo(Transaction tran, LimitObjectInput in)
0: 		 throws StandardException
0: 	{
0: 		if (operation == REMOVE)
0: 			return null;		// cannot undo REMOVE
0: 		else
0: 		{
0: 			RawContainerHandle undoContainerHandle = findContainer(tran);
0: 			
0: 			// mark the container as pre-dirtied so that if a checkpoint
0: 			// happens after the log record is sent to the log stream, the
0: 			// cache cleaning will wait for this change.
0: 			//
0: 			// RESOLVE: don't do this now because if undo failed, this
0: 			// container will be "stuck" in the preDirty state and checkpoint
0: 			// will be stuck
0: 			// undoContainerHandle.preDirty(true);
0: 			//
0: 
0: 			return new ContainerUndoOperation(undoContainerHandle, this);
0: 		}
0: 	}
0: 
0: 	/** debug */
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			String str = super.toString();
0: 			switch(operation)
0: 			{
0: 			case CREATE: str += " CREATE container " + containerId;
0: 				break;
0: 			case DROP: str += " DROP container " + containerId;
0: 				break;
0: 			case REMOVE: str += " REMOVE container " + containerId;
0: 				break;
0: 			}
0: 			return str;
0: 		}
0: 		else
0: 			return null;
0: 	}
0: 
0: 
0: }
============================================================================