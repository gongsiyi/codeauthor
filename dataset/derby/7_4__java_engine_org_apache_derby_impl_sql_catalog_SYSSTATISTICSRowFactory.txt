1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
18:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:4309044: import org.apache.derby.iapi.types.UserType;
1:eac0369: import org.apache.derby.iapi.types.DataValueFactory;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.catalog.Statistics;
1:eac0369: import org.apache.derby.iapi.types.*;
1:eac0369: 
1:eac0369: import java.sql.Timestamp;
1:7dd08d1: import java.sql.Types;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Factory for creating a SYSSTATISTICS row.
1:eac0369:  *
1:eac0369:  * @version 0.1
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public class SYSSTATISTICSRowFactory extends CatalogRowFactory
3:eac0369: {
1:eac0369: 	static final String TABLENAME_STRING = "SYSSTATISTICS";
1:eac0369: 
1:eac0369: 	/* column #s for sysstatistics (1 based) */
1:eac0369: 	
1:eac0369: 	/* unique UUID of this entry in statistics. 
1:eac0369: 	*/
1:eac0369: 	protected static final int 	SYSSTATISTICS_ID = 1;
1:eac0369: 
1:eac0369: 	/* reference id from sysconglomerates... */
1:eac0369: 	protected static final int  SYSSTATISTICS_REFERENCEID = 2;
1:eac0369: 
1:eac0369: 	/* table id--table for which this statistic is created */
1:eac0369: 	protected static final int SYSSTATISTICS_TABLEID = 3;
1:eac0369: 	
1:eac0369: 	/* time when this statistic was created/updated */
1:eac0369: 	protected static final int SYSSTATISTICS_TIMESTAMP = 4;
1:eac0369: 
1:eac0369: 	/* type of statistics-- we only have index (I) statistics right now but
1:eac0369: 	 * later on we might have table or column statistics.
1:eac0369: 	 */
1:eac0369: 	protected static final int SYSSTATISTICS_TYPE = 5;	
1:eac0369: 
1:eac0369:   	/* whether the statistics are valid or not; currently this is not used, but
1:eac0369: 	 * in the future the optimizer might be smart enough to recognize that a
1:eac0369: 	 * statistic has gone stale and then mark it as invalid (as opposed to
1:eac0369: 	 * dropping it which is a more drastic measure?)
1:eac0369: 	 */
1:eac0369:   	protected static final int SYSSTATISTICS_VALID = 6;
1:eac0369: 
1:eac0369: 	/* the  number of columns in this statistics */
1:eac0369: 	protected static final int SYSSTATISTICS_COLCOUNT = 7;
1:eac0369: 
1:eac0369: 	/* and finally the statistics */
1:eac0369: 	protected static final int SYSSTATISTICS_STAT = 8;
1:eac0369: 
1:eac0369: 	protected static final int SYSSTATISTICS_COLUMN_COUNT = 8;
1:eac0369: 
1:eac0369: 	/* first index on tableUUID, conglomerate UUID */
1:eac0369: 	protected static final int SYSSTATISTICS_INDEX1_ID = 0;
1:eac0369: 
1:eac0369: 	private static final boolean[] uniqueness = {false};
1:eac0369: 
1:eac0369: 	private static final int[][] indexColumnPositions =
1:eac0369: 	{
1:eac0369: 		{SYSSTATISTICS_TABLEID, SYSSTATISTICS_REFERENCEID}
2:eac0369: 	};
1:eac0369: 
1:eac0369: 	private static final String[] uuids =
1:eac0369: 	{
1:eac0369: 		"f81e0010-00e3-6612-5a96-009e3a3b5e00", // catalog UUID
1:eac0369: 		"08264012-00e3-6612-5a96-009e3a3b5e00",  // heap UUID.
1:eac0369: 		"c013800d-00e3-ffbe-37c6-009e3a3b5e00", // _INDEX1 UUID
1:eac0369: 	};
1:eac0369: 	/*
1:eac0369: 	 * STATE
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 *	CONSTRUCTORS
1:eac0369: 	 */
1:6870e87:     SYSSTATISTICSRowFactory(UUIDFactory uuidf, 
1:eac0369: 									ExecutionFactory ef, 
1:6870e87: 									DataValueFactory dvf)
1:eac0369: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:eac0369: 		
1:eac0369: 		initInfo(SYSSTATISTICS_COLUMN_COUNT, TABLENAME_STRING, 
1:c2ff613: 				 indexColumnPositions, uniqueness, uuids);
3:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:   /**
1:eac0369: 	 * Make a SYSSTATISTICS row
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return	Row suitable for inserting into SYSSTATISTICS.
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
2:eac0369: 					throws StandardException					
1:eac0369: 	{
1:eac0369: 		String myID = null, referenceID = null, tableID = null;
1:eac0369: 		String statName = null, colMap = null, statType = null;
1:eac0369: 		Timestamp updateTime = null;
1:eac0369: 		int columnCount = 0;
1:eac0369: 		Statistics statisticsObject = null;
1:eac0369: 		boolean validStat = false;
1:eac0369: 		ExecRow row = getExecutionFactory().getValueRow(SYSSTATISTICS_COLUMN_COUNT);
1:eac0369: 		
1:eac0369: 		if (td != null)
1:eac0369: 		{
1:eac0369: 			StatisticsDescriptor statDesc = (StatisticsDescriptor)td;
1:eac0369: 			myID = statDesc.getUUID().toString();
1:eac0369: 			tableID = statDesc.getTableUUID().toString();
1:eac0369: 			referenceID = statDesc.getReferenceID().toString();
1:eac0369: 			updateTime = statDesc.getUpdateTimestamp();
1:eac0369: 			statType = statDesc.getStatType();
1:eac0369:   			validStat = statDesc.isValid();
1:eac0369: 			statisticsObject = statDesc.getStatistic();
1:eac0369: 			columnCount = statDesc.getColumnCount();
1:eac0369: 		}
1:eac0369: 
1:eb47bdb: 		row.setColumn(1, new SQLChar(myID));
1:eb47bdb: 		row.setColumn(2, new SQLChar(referenceID));
1:eb47bdb: 		row.setColumn(3, new SQLChar(tableID));
1:eac0369: 		row.setColumn(4, new SQLTimestamp(updateTime));
1:eb47bdb: 		row.setColumn(5, new SQLChar(statType));
1:4309044:   		row.setColumn(6, new SQLBoolean(validStat));
1:4309044: 		row.setColumn(7, new SQLInteger(columnCount));
1:4309044: 		row.setColumn(8, new UserType(statisticsObject));
2:eac0369: 		return row;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	public TupleDescriptor buildDescriptor(
1:eac0369: 		 ExecRow 			row,
1:eac0369: 		 TupleDescriptor    parentDesc,
1:eac0369: 		 DataDictionary 	dd)
1:eac0369: 		throws StandardException
1:eac0369: 		 
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(
1:eac0369: 				row.nColumns() == SYSSTATISTICS_COLUMN_COUNT, 
1:eac0369: 				"Wrong number of columns for a SYSSTATISTICS row");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		DataValueDescriptor col;
1:eac0369: 		String scratch;
1:eac0369: 		UUIDFactory uuidFactory = getUUIDFactory();
1:eac0369: 		UUID statUUID, statReferenceUUID, statTableUUID;
1:eac0369: 		String statName;
1:eac0369: 		
1:eac0369: 		/* 1st column is UUID */
1:eac0369: 		col = row.getColumn(SYSSTATISTICS_ID);
1:eac0369: 		scratch = col.getString();
1:eac0369: 		statUUID = uuidFactory.recreateUUID(scratch);
1:eac0369: 
1:eac0369: 		/* 2nd column is reference UUID */
1:eac0369: 		col = row.getColumn(SYSSTATISTICS_REFERENCEID);
1:eac0369: 		scratch = col.getString();
1:eac0369: 		statReferenceUUID = uuidFactory.recreateUUID(scratch);
1:eac0369: 
1:eac0369: 		/* 3rd column is table UUID */
1:eac0369: 		col = row.getColumn(SYSSTATISTICS_TABLEID);
1:eac0369: 		scratch = col.getString();
1:eac0369: 		statTableUUID = uuidFactory.recreateUUID(scratch);
1:eac0369: 
1:eac0369: 		/* 4th column is timestamp */
1:eac0369: 		col = row.getColumn(SYSSTATISTICS_TIMESTAMP);
1:eac0369: 		Timestamp updateTime = (Timestamp) col.getObject();
1:eac0369: 
1:eac0369: 		/* 5th column is stat type -- string */
1:eac0369: 		col = row.getColumn(SYSSTATISTICS_TYPE);
1:eac0369: 		String statType = col.getString();
1:eac0369: 
1:eac0369: 		/* 6th column is stat valid -- boolean */
1:eac0369: 		col = row.getColumn(SYSSTATISTICS_VALID);
1:eac0369: 		boolean valid = col.getBoolean();
1:eac0369: 
1:eac0369: 		/* 7th column is column count */
1:eac0369: 		col = row.getColumn(SYSSTATISTICS_COLCOUNT);
1:eac0369: 		int columnCount = col.getInt();
1:eac0369: 
1:eac0369: 		/* 8th column is statistics itself */
1:eac0369: 		col = row.getColumn(SYSSTATISTICS_STAT);
1:eac0369: 		Statistics stat = (Statistics)col.getObject();
1:eac0369: 
1:eac0369: 		return new StatisticsDescriptor(dd, statUUID, statReferenceUUID,
1:eac0369: 										   statTableUUID, // statName, colMap,
1:eac0369: 										   statType, stat, columnCount);
1:eac0369: 	}			
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Builds a list of columns suitable for creating this Catalog.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return array of SystemColumn suitable for making this catalog.
1:eac0369: 	 */
1:eac0369: 	public SystemColumn[] buildColumnList()
1:2a5922a:         throws StandardException
1:eac0369: 	{
1:7dd08d1:             return new SystemColumn[] {
1:7dd08d1:                 SystemColumnImpl.getUUIDColumn("STATID", false),
1:7dd08d1:                 SystemColumnImpl.getUUIDColumn("REFERENCEID", false),
1:7dd08d1:                 SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:7dd08d1:                 SystemColumnImpl.getColumn("CREATIONTIMESTAMP", Types.TIMESTAMP, false),
1:7dd08d1:                 SystemColumnImpl.getIndicatorColumn("TYPE"),
1:7dd08d1:                 SystemColumnImpl.getColumn("VALID", Types.BOOLEAN, false),
1:7dd08d1:                 SystemColumnImpl.getColumn("COLCOUNT", Types.INTEGER, false),
1:7dd08d1:                 SystemColumnImpl.getJavaColumn("STATISTICS",
1:7dd08d1:                         "org.apache.derby.catalog.Statistics", false)
1:7dd08d1:             };
1:7dd08d1:         }
1:eac0369: }	
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:4309044
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.UserType;
/////////////////////////////////////////////////////////////////////////
1:   		row.setColumn(6, new SQLBoolean(validStat));
1: 		row.setColumn(7, new SQLInteger(columnCount));
1: 		row.setColumn(8, new UserType(statisticsObject));
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1:     SYSSTATISTICSRowFactory(UUIDFactory uuidf, 
1: 									DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:7dd08d1
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return new SystemColumn[] {
1:                 SystemColumnImpl.getUUIDColumn("STATID", false),
1:                 SystemColumnImpl.getUUIDColumn("REFERENCEID", false),
1:                 SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:                 SystemColumnImpl.getColumn("CREATIONTIMESTAMP", Types.TIMESTAMP, false),
1:                 SystemColumnImpl.getIndicatorColumn("TYPE"),
1:                 SystemColumnImpl.getColumn("VALID", Types.BOOLEAN, false),
1:                 SystemColumnImpl.getColumn("COLCOUNT", Types.INTEGER, false),
1:                 SystemColumnImpl.getJavaColumn("STATISTICS",
1:                         "org.apache.derby.catalog.Statistics", false)
1:             };
1:         }
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(1, new SQLChar(myID));
1: 		row.setColumn(2, new SQLChar(referenceID));
1: 		row.setColumn(3, new SQLChar(tableID));
1: 		row.setColumn(5, new SQLChar(statType));
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				 indexColumnPositions, uniqueness, uuids);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.types.TypeId;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.catalog.Statistics;
1: import org.apache.derby.iapi.types.*;
1: 
1: import java.sql.Timestamp;
1: 
1: /**
1:  * Factory for creating a SYSSTATISTICS row.
1:  *
1:  * @version 0.1
0:  * @author manish
1:  *
1:  */
1: 
1: public class SYSSTATISTICSRowFactory extends CatalogRowFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 	static final String TABLENAME_STRING = "SYSSTATISTICS";
1: 
1: 	/* column #s for sysstatistics (1 based) */
1: 	
1: 	/* unique UUID of this entry in statistics. 
1: 	*/
1: 	protected static final int 	SYSSTATISTICS_ID = 1;
1: 
1: 	/* reference id from sysconglomerates... */
1: 	protected static final int  SYSSTATISTICS_REFERENCEID = 2;
1: 
1: 	/* table id--table for which this statistic is created */
1: 	protected static final int SYSSTATISTICS_TABLEID = 3;
1: 	
1: 	/* time when this statistic was created/updated */
1: 	protected static final int SYSSTATISTICS_TIMESTAMP = 4;
1: 
1: 	/* type of statistics-- we only have index (I) statistics right now but
1: 	 * later on we might have table or column statistics.
1: 	 */
1: 	protected static final int SYSSTATISTICS_TYPE = 5;	
1: 
1:   	/* whether the statistics are valid or not; currently this is not used, but
1: 	 * in the future the optimizer might be smart enough to recognize that a
1: 	 * statistic has gone stale and then mark it as invalid (as opposed to
1: 	 * dropping it which is a more drastic measure?)
1: 	 */
1:   	protected static final int SYSSTATISTICS_VALID = 6;
1: 
1: 	/* the  number of columns in this statistics */
1: 	protected static final int SYSSTATISTICS_COLCOUNT = 7;
1: 
1: 	/* and finally the statistics */
1: 	protected static final int SYSSTATISTICS_STAT = 8;
1: 
1: 	protected static final int SYSSTATISTICS_COLUMN_COUNT = 8;
1: 
1: 	/* first index on tableUUID, conglomerate UUID */
1: 	protected static final int SYSSTATISTICS_INDEX1_ID = 0;
1: 
1: 	private static final boolean[] uniqueness = {false};
1: 
1: 	private static final int[][] indexColumnPositions =
1: 	{
1: 		{SYSSTATISTICS_TABLEID, SYSSTATISTICS_REFERENCEID}
1: 	};
1: 
0: 	private static final String[][] indexColumnNames =
1: 	{
0: 		{"TABLEID", "REFERENCEID"}
1: 	};
1: 
1: 	private static final String[] uuids =
1: 	{
1: 		"f81e0010-00e3-6612-5a96-009e3a3b5e00", // catalog UUID
1: 		"08264012-00e3-6612-5a96-009e3a3b5e00",  // heap UUID.
1: 		"c013800d-00e3-ffbe-37c6-009e3a3b5e00", // _INDEX1 UUID
1: 	};
1: 	/*
1: 	 * STATE
1: 	 */
0: 	private	SystemColumn[]		columnList;
1: 
1: 	/*
1: 	 *	CONSTRUCTORS
1: 	 */
0:     public	SYSSTATISTICSRowFactory(UUIDFactory uuidf, 
1: 									ExecutionFactory ef, 
0: 									DataValueFactory dvf,
0:                                     boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
1: 		
1: 		initInfo(SYSSTATISTICS_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames, uniqueness, uuids);
1: 	}
1: 
1: 
1:   /**
1: 	 * Make a SYSSTATISTICS row
1: 	 *
0: 	 * @param emptyRow	Make an empty row if this parameter is true
0: 	 * @param statDescriptor Descriptor from which to create the
0: 	 * statistic. 
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSSTATISTICS.
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 
1: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1: 					throws StandardException					
1: 	{
1: 		String myID = null, referenceID = null, tableID = null;
1: 		String statName = null, colMap = null, statType = null;
1: 		Timestamp updateTime = null;
1: 		int columnCount = 0;
1: 		Statistics statisticsObject = null;
1: 		boolean validStat = false;
1: 		ExecRow row = getExecutionFactory().getValueRow(SYSSTATISTICS_COLUMN_COUNT);
1: 		
1: 		if (td != null)
1: 		{
1: 			StatisticsDescriptor statDesc = (StatisticsDescriptor)td;
1: 			myID = statDesc.getUUID().toString();
1: 			tableID = statDesc.getTableUUID().toString();
1: 			referenceID = statDesc.getReferenceID().toString();
1: 			updateTime = statDesc.getUpdateTimestamp();
1: 			statType = statDesc.getStatType();
1:   			validStat = statDesc.isValid();
1: 			statisticsObject = statDesc.getStatistic();
1: 			columnCount = statDesc.getColumnCount();
1: 		}
1: 
0: 		row.setColumn(1, dvf.getCharDataValue(myID));
0: 		row.setColumn(2, dvf.getCharDataValue(referenceID));
0: 		row.setColumn(3, dvf.getCharDataValue(tableID));
1: 		row.setColumn(4, new SQLTimestamp(updateTime));
0: 		row.setColumn(5, dvf.getCharDataValue(statType));
0:   		row.setColumn(6, dvf.getDataValue(validStat));
0: 		row.setColumn(7, dvf.getDataValue(columnCount));
0: 		row.setColumn(8, dvf.getDataValue(statisticsObject));
1: 		return row;
1: 	}
1: 	
1: 	public TupleDescriptor buildDescriptor(
1: 		 ExecRow 			row,
1: 		 TupleDescriptor    parentDesc,
1: 		 DataDictionary 	dd)
1: 		throws StandardException
1: 		 
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(
1: 				row.nColumns() == SYSSTATISTICS_COLUMN_COUNT, 
1: 				"Wrong number of columns for a SYSSTATISTICS row");
1: 		}
1: 
1: 		DataValueDescriptor col;
1: 		String scratch;
1: 		UUIDFactory uuidFactory = getUUIDFactory();
1: 		UUID statUUID, statReferenceUUID, statTableUUID;
1: 		String statName;
1: 		
1: 		/* 1st column is UUID */
1: 		col = row.getColumn(SYSSTATISTICS_ID);
1: 		scratch = col.getString();
1: 		statUUID = uuidFactory.recreateUUID(scratch);
1: 
1: 		/* 2nd column is reference UUID */
1: 		col = row.getColumn(SYSSTATISTICS_REFERENCEID);
1: 		scratch = col.getString();
1: 		statReferenceUUID = uuidFactory.recreateUUID(scratch);
1: 
1: 		/* 3rd column is table UUID */
1: 		col = row.getColumn(SYSSTATISTICS_TABLEID);
1: 		scratch = col.getString();
1: 		statTableUUID = uuidFactory.recreateUUID(scratch);
1: 
1: 		/* 4th column is timestamp */
1: 		col = row.getColumn(SYSSTATISTICS_TIMESTAMP);
1: 		Timestamp updateTime = (Timestamp) col.getObject();
1: 
1: 		/* 5th column is stat type -- string */
1: 		col = row.getColumn(SYSSTATISTICS_TYPE);
1: 		String statType = col.getString();
1: 
1: 		/* 6th column is stat valid -- boolean */
1: 		col = row.getColumn(SYSSTATISTICS_VALID);
1: 		boolean valid = col.getBoolean();
1: 
1: 		/* 7th column is column count */
1: 		col = row.getColumn(SYSSTATISTICS_COLCOUNT);
1: 		int columnCount = col.getInt();
1: 
1: 		/* 8th column is statistics itself */
1: 		col = row.getColumn(SYSSTATISTICS_STAT);
1: 		Statistics stat = (Statistics)col.getObject();
1: 
1: 		return new StatisticsDescriptor(dd, statUUID, statReferenceUUID,
1: 										   statTableUUID, // statName, colMap,
1: 										   statType, stat, columnCount);
1: 	}			
1: 
0: 	public ExecIndexRow	buildEmptyIndexRow(int indexNumber,
0: 										   RowLocation rowLocation) 
1: 			throws StandardException
1: 	{
0: 		/* there is only one index-- just use hardwired values. */
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(3);
0: 		row.setColumn(1, getDataValueFactory().getCharDataValue((String)null));
0: 		row.setColumn(2, getDataValueFactory().getCharDataValue((String)null));
0: 		row.setColumn(3, rowLocation);
1: 		return row;
1: 	}
1: 
1: 	/**
1: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 *
1: 	 *
1: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
1: 	public SystemColumn[] buildColumnList()
1: 	{
0: 		if (columnList != null)
0: 			return columnList;
1: 
0: 		columnList = new SystemColumn[SYSSTATISTICS_COLUMN_COUNT];
1: 		
0: 		columnList[0] = new SystemColumnImpl(
0: 						   convertIdCase( "STATID"),			// column name
0: 						   SYSSTATISTICS_ID,    // column number
0: 						   0,					// precision
0: 						   0,					// scale
0: 						   false,				// nullability
0: 						   "CHAR",				// dataType
0: 						   true,				// built-in type
0: 						   36					// maxLength
0: 						   );
1: 		
0: 		columnList[1] = new SystemColumnImpl(
0: 						   convertIdCase( "REFERENCEID"),			  // column name
0: 						   SYSSTATISTICS_REFERENCEID, // column number
0: 						   0,						  // precision
0: 						   0,						  // scale
0: 						   false,					  // nullability
0: 						   "CHAR",					  // dataType
0: 						   true,					  // built-in type
0: 						   36						  // maxLength
0: 						   );
1: 
0: 		columnList[2] = new SystemColumnImpl(
0: 						   convertIdCase( "TABLEID"),			      // column name
0: 						   SYSSTATISTICS_TABLEID,    // column number
0: 						   0,						  // precision
0: 						   0,						  // scale
0: 						   false,					  // nullability
0: 						   "CHAR",					  // dataType
0: 						   true,					  // built-in type
0: 						   36						  // maxLength
0: 						   );
1: 
0: 		columnList[3] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "CREATIONTIMESTAMP"),	  // name 
0: 							SYSSTATISTICS_TIMESTAMP,  // column number
0: 							0,						  // precision
0: 							0,						  // scale
0: 							false,					  // nullability
0: 							"TIMESTAMP",			  // dataType
0: 							true,					  // built-in type
0: 							TypeId.TIMESTAMP_MAXWIDTH // maxLength
0: 			                );
1: 
0: 		columnList[4] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "TYPE"),	  			  	  // name 
0: 							SYSSTATISTICS_TYPE,  	  // column number
0: 							0,						  // precision
0: 							0,						  // scale
0: 							false,					  // nullability
0: 							"CHAR",					  // dataType
0: 							true,					  // built-in type
0: 							1						  // maxLength
0: 			                );
1: 
0: 		columnList[5] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "VALID"),	  			  	  // name 
0: 							SYSSTATISTICS_VALID,  	  // column number
0: 							0,						  // precision
0: 							0,						  // scale
0: 							false,					  // nullability
0: 							"BOOLEAN",					  // dataType
0: 							true,					  // built-in type
0: 							1						  // maxLength
0: 			                );
1: 
1: 
0: 		columnList[6] = 
0: 			       new SystemColumnImpl(
0: 							convertIdCase( "COLCOUNT"), 				// name
0: 							SYSSTATISTICS_COLCOUNT,    // column number
0: 							0,							// precision
0: 							0,							// scale
0: 							false,						// nullability
0: 							"INTEGER",					// data type
0: 							true,						// built in type
0: 							4							//maxlength
0: 							 );
0: 		columnList[7] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "STATISTICS"),	  		  // name 
0: 							SYSSTATISTICS_STAT,  	  // column number
0: 							0,						  // precision
0: 							0,						  // scale
0: 							false,					  // nullability
0: 							"org.apache.derby.catalog.Statistics",  // dataType
0: 							false,					  // built-in type
0: 							12						  // maxLength
0: 			                );
1: 
1: 
1: 
0: 		return columnList;
1: 	}
1: 
1: 
1: }	
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.catalog.Statistics;
0: import org.apache.derby.iapi.types.*;
0: 
0: import java.sql.Timestamp;
0: 
0: /**
0:  * Factory for creating a SYSSTATISTICS row.
0:  *
0:  * @version 0.1
0:  * @author manish
0:  *
0:  */
0: 
0: public class SYSSTATISTICSRowFactory extends CatalogRowFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	static final String TABLENAME_STRING = "SYSSTATISTICS";
0: 
0: 	/* column #s for sysstatistics (1 based) */
0: 	
0: 	/* unique UUID of this entry in statistics. 
0: 	*/
0: 	protected static final int 	SYSSTATISTICS_ID = 1;
0: 
0: 	/* reference id from sysconglomerates... */
0: 	protected static final int  SYSSTATISTICS_REFERENCEID = 2;
0: 
0: 	/* table id--table for which this statistic is created */
0: 	protected static final int SYSSTATISTICS_TABLEID = 3;
0: 	
0: 	/* time when this statistic was created/updated */
0: 	protected static final int SYSSTATISTICS_TIMESTAMP = 4;
0: 
0: 	/* type of statistics-- we only have index (I) statistics right now but
0: 	 * later on we might have table or column statistics.
0: 	 */
0: 	protected static final int SYSSTATISTICS_TYPE = 5;	
0: 
0:   	/* whether the statistics are valid or not; currently this is not used, but
0: 	 * in the future the optimizer might be smart enough to recognize that a
0: 	 * statistic has gone stale and then mark it as invalid (as opposed to
0: 	 * dropping it which is a more drastic measure?)
0: 	 */
0:   	protected static final int SYSSTATISTICS_VALID = 6;
0: 
0: 	/* the  number of columns in this statistics */
0: 	protected static final int SYSSTATISTICS_COLCOUNT = 7;
0: 
0: 	/* and finally the statistics */
0: 	protected static final int SYSSTATISTICS_STAT = 8;
0: 
0: 	protected static final int SYSSTATISTICS_COLUMN_COUNT = 8;
0: 
0: 	/* first index on tableUUID, conglomerate UUID */
0: 	protected static final int SYSSTATISTICS_INDEX1_ID = 0;
0: 
0: 	private static final boolean[] uniqueness = {false};
0: 
0: 	private static final int[][] indexColumnPositions =
0: 	{
0: 		{SYSSTATISTICS_TABLEID, SYSSTATISTICS_REFERENCEID}
0: 	};
0: 
0: 	private static final String[][] indexColumnNames =
0: 	{
0: 		{"TABLEID", "REFERENCEID"}
0: 	};
0: 
0: 	private static final String[] uuids =
0: 	{
0: 		"f81e0010-00e3-6612-5a96-009e3a3b5e00", // catalog UUID
0: 		"08264012-00e3-6612-5a96-009e3a3b5e00",  // heap UUID.
0: 		"c013800d-00e3-ffbe-37c6-009e3a3b5e00", // _INDEX1 UUID
0: 	};
0: 	/*
0: 	 * STATE
0: 	 */
0: 	private	SystemColumn[]		columnList;
0: 
0: 	/*
0: 	 *	CONSTRUCTORS
0: 	 */
0:     public	SYSSTATISTICSRowFactory(UUIDFactory uuidf, 
0: 									ExecutionFactory ef, 
0: 									DataValueFactory dvf,
0:                                     boolean convertIdToLower)
0: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		
0: 		initInfo(SYSSTATISTICS_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames, uniqueness, uuids);
0: 	}
0: 
0: 
0:   /**
0: 	 * Make a SYSSTATISTICS row
0: 	 *
0: 	 * @param emptyRow	Make an empty row if this parameter is true
0: 	 * @param statDescriptor Descriptor from which to create the
0: 	 * statistic. 
0: 	 *
0: 	 * @return	Row suitable for inserting into SYSSTATISTICS.
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 
0: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
0: 					throws StandardException					
0: 	{
0: 		String myID = null, referenceID = null, tableID = null;
0: 		String statName = null, colMap = null, statType = null;
0: 		Timestamp updateTime = null;
0: 		int columnCount = 0;
0: 		Statistics statisticsObject = null;
0: 		boolean validStat = false;
0: 		ExecRow row = getExecutionFactory().getValueRow(SYSSTATISTICS_COLUMN_COUNT);
0: 		
0: 		if (td != null)
0: 		{
0: 			StatisticsDescriptor statDesc = (StatisticsDescriptor)td;
0: 			myID = statDesc.getUUID().toString();
0: 			tableID = statDesc.getTableUUID().toString();
0: 			referenceID = statDesc.getReferenceID().toString();
0: 			updateTime = statDesc.getUpdateTimestamp();
0: 			statType = statDesc.getStatType();
0:   			validStat = statDesc.isValid();
0: 			statisticsObject = statDesc.getStatistic();
0: 			columnCount = statDesc.getColumnCount();
0: 		}
0: 
0: 		row.setColumn(1, dvf.getCharDataValue(myID));
0: 		row.setColumn(2, dvf.getCharDataValue(referenceID));
0: 		row.setColumn(3, dvf.getCharDataValue(tableID));
0: 		row.setColumn(4, new SQLTimestamp(updateTime));
0: 		row.setColumn(5, dvf.getCharDataValue(statType));
0:   		row.setColumn(6, dvf.getDataValue(validStat));
0: 		row.setColumn(7, dvf.getDataValue(columnCount));
0: 		row.setColumn(8, dvf.getDataValue(statisticsObject));
0: 		return row;
0: 	}
0: 	
0: 	public TupleDescriptor buildDescriptor(
0: 		 ExecRow 			row,
0: 		 TupleDescriptor    parentDesc,
0: 		 DataDictionary 	dd)
0: 		throws StandardException
0: 		 
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(
0: 				row.nColumns() == SYSSTATISTICS_COLUMN_COUNT, 
0: 				"Wrong number of columns for a SYSSTATISTICS row");
0: 		}
0: 
0: 		DataValueDescriptor col;
0: 		String scratch;
0: 		UUIDFactory uuidFactory = getUUIDFactory();
0: 		UUID statUUID, statReferenceUUID, statTableUUID;
0: 		String statName;
0: 		
0: 		/* 1st column is UUID */
0: 		col = row.getColumn(SYSSTATISTICS_ID);
0: 		scratch = col.getString();
0: 		statUUID = uuidFactory.recreateUUID(scratch);
0: 
0: 		/* 2nd column is reference UUID */
0: 		col = row.getColumn(SYSSTATISTICS_REFERENCEID);
0: 		scratch = col.getString();
0: 		statReferenceUUID = uuidFactory.recreateUUID(scratch);
0: 
0: 		/* 3rd column is table UUID */
0: 		col = row.getColumn(SYSSTATISTICS_TABLEID);
0: 		scratch = col.getString();
0: 		statTableUUID = uuidFactory.recreateUUID(scratch);
0: 
0: 		/* 4th column is timestamp */
0: 		col = row.getColumn(SYSSTATISTICS_TIMESTAMP);
0: 		Timestamp updateTime = (Timestamp) col.getObject();
0: 
0: 		/* 5th column is stat type -- string */
0: 		col = row.getColumn(SYSSTATISTICS_TYPE);
0: 		String statType = col.getString();
0: 
0: 		/* 6th column is stat valid -- boolean */
0: 		col = row.getColumn(SYSSTATISTICS_VALID);
0: 		boolean valid = col.getBoolean();
0: 
0: 		/* 7th column is column count */
0: 		col = row.getColumn(SYSSTATISTICS_COLCOUNT);
0: 		int columnCount = col.getInt();
0: 
0: 		/* 8th column is statistics itself */
0: 		col = row.getColumn(SYSSTATISTICS_STAT);
0: 		Statistics stat = (Statistics)col.getObject();
0: 
0: 		return new StatisticsDescriptor(dd, statUUID, statReferenceUUID,
0: 										   statTableUUID, // statName, colMap,
0: 										   statType, stat, columnCount);
0: 	}			
0: 
0: 	public ExecIndexRow	buildEmptyIndexRow(int indexNumber,
0: 										   RowLocation rowLocation) 
0: 			throws StandardException
0: 	{
0: 		/* there is only one index-- just use hardwired values. */
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(3);
0: 		row.setColumn(1, getDataValueFactory().getCharDataValue((String)null));
0: 		row.setColumn(2, getDataValueFactory().getCharDataValue((String)null));
0: 		row.setColumn(3, rowLocation);
0: 		return row;
0: 	}
0: 
0: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
0: 	 *
0: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
0: 	 */
0: 	public SystemColumn[] buildColumnList()
0: 	{
0: 		if (columnList != null)
0: 			return columnList;
0: 
0: 		columnList = new SystemColumn[SYSSTATISTICS_COLUMN_COUNT];
0: 		
0: 		columnList[0] = new SystemColumnImpl(
0: 						   convertIdCase( "STATID"),			// column name
0: 						   SYSSTATISTICS_ID,    // column number
0: 						   0,					// precision
0: 						   0,					// scale
0: 						   false,				// nullability
0: 						   "CHAR",				// dataType
0: 						   true,				// built-in type
0: 						   36					// maxLength
0: 						   );
0: 		
0: 		columnList[1] = new SystemColumnImpl(
0: 						   convertIdCase( "REFERENCEID"),			  // column name
0: 						   SYSSTATISTICS_REFERENCEID, // column number
0: 						   0,						  // precision
0: 						   0,						  // scale
0: 						   false,					  // nullability
0: 						   "CHAR",					  // dataType
0: 						   true,					  // built-in type
0: 						   36						  // maxLength
0: 						   );
0: 
0: 		columnList[2] = new SystemColumnImpl(
0: 						   convertIdCase( "TABLEID"),			      // column name
0: 						   SYSSTATISTICS_TABLEID,    // column number
0: 						   0,						  // precision
0: 						   0,						  // scale
0: 						   false,					  // nullability
0: 						   "CHAR",					  // dataType
0: 						   true,					  // built-in type
0: 						   36						  // maxLength
0: 						   );
0: 
0: 		columnList[3] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "CREATIONTIMESTAMP"),	  // name 
0: 							SYSSTATISTICS_TIMESTAMP,  // column number
0: 							0,						  // precision
0: 							0,						  // scale
0: 							false,					  // nullability
0: 							"TIMESTAMP",			  // dataType
0: 							true,					  // built-in type
0: 							TypeId.TIMESTAMP_MAXWIDTH // maxLength
0: 			                );
0: 
0: 		columnList[4] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "TYPE"),	  			  	  // name 
0: 							SYSSTATISTICS_TYPE,  	  // column number
0: 							0,						  // precision
0: 							0,						  // scale
0: 							false,					  // nullability
0: 							"CHAR",					  // dataType
0: 							true,					  // built-in type
0: 							1						  // maxLength
0: 			                );
0: 
0: 		columnList[5] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "VALID"),	  			  	  // name 
0: 							SYSSTATISTICS_VALID,  	  // column number
0: 							0,						  // precision
0: 							0,						  // scale
0: 							false,					  // nullability
0: 							"BOOLEAN",					  // dataType
0: 							true,					  // built-in type
0: 							1						  // maxLength
0: 			                );
0: 
0: 
0: 		columnList[6] = 
0: 			       new SystemColumnImpl(
0: 							convertIdCase( "COLCOUNT"), 				// name
0: 							SYSSTATISTICS_COLCOUNT,    // column number
0: 							0,							// precision
0: 							0,							// scale
0: 							false,						// nullability
0: 							"INTEGER",					// data type
0: 							true,						// built in type
0: 							4							//maxlength
0: 							 );
0: 		columnList[7] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "STATISTICS"),	  		  // name 
0: 							SYSSTATISTICS_STAT,  	  // column number
0: 							0,						  // precision
0: 							0,						  // scale
0: 							false,					  // nullability
0: 							"org.apache.derby.catalog.Statistics",  // dataType
0: 							false,					  // built-in type
0: 							12						  // maxLength
0: 			                );
0: 
0: 
0: 
0: 		return columnList;
0: 	}
0: 
0: 
0: }	
============================================================================