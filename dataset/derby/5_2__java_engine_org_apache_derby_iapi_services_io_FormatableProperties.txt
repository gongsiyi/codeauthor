1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.FormatableProperties
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:eac0369: import java.util.Enumeration;
1:eac0369: import java.util.Properties;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A formatable holder for a java.util.Properties.
1:eac0369:  * Used to avoid serializing Properties.
1:eac0369:  */
1:eac0369: public class FormatableProperties extends Properties implements Formatable
3:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for formatable
1:eac0369: 	 */
1:eac0369: 	public FormatableProperties() 
1:eac0369: 	{
1:eac0369: 		this(null);
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Creates an empty property list with the specified
1:eac0369: 	 * defaults.
1:eac0369: 	 *
1:eac0369: 	 * @param defaults the defaults
1:eac0369: 	 */
1:eac0369: 	public FormatableProperties(Properties defaults)
1:eac0369: 	{
1:eac0369: 		super(defaults);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Clear the defaults from this Properties set.
1:eac0369: 		This sets the default field to null and thus
1:eac0369: 		breaks any link with the Properties set that
1:eac0369: 		was the default.
1:eac0369: 	*/
1:eac0369: 	public void clearDefaults() {
1:eac0369: 		defaults = null;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Write the properties out.  Step through
1:eac0369: 	 * the enumeration and write the strings out
1:eac0369: 	 * in UTF.
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here
1:eac0369: 	 *
1:eac0369:  	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeInt(size());
1:eac0369: 		for (Enumeration e = keys(); e.hasMoreElements(); )
1:eac0369: 		{
1:eac0369: 			String key = (String)e.nextElement();
1:eac0369: 			out.writeUTF(key);
1:eac0369: 			out.writeUTF(getProperty(key));
1:eac0369: 		}
1:eac0369: 	}					
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read the properties from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in)
2:eac0369: 		throws IOException
1:eac0369: 	{
2:eac0369: 		int size = in.readInt();
2:eac0369: 		for (; size > 0; size--)
1:eac0369: 		{
2:eac0369: 			put(in.readUTF(), in.readUTF());
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.FORMATABLE_PROPERTIES_V01_ID; }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5baee93
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.FormatableProperties
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import java.util.Enumeration;
1: import java.util.Properties;
1: 
1: import java.io.IOException;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: 
1: /**
1:  * A formatable holder for a java.util.Properties.
1:  * Used to avoid serializing Properties.
1:  */
1: public class FormatableProperties extends Properties implements Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	/**
1: 	 * Niladic constructor for formatable
1: 	 */
1: 	public FormatableProperties() 
1: 	{
1: 		this(null);
1: 	}
1: 
1: 	/**
1: 	 * Creates an empty property list with the specified
1: 	 * defaults.
1: 	 *
1: 	 * @param defaults the defaults
1: 	 */
1: 	public FormatableProperties(Properties defaults)
1: 	{
1: 		super(defaults);
1: 	}
1: 
1: 	/**
1: 		Clear the defaults from this Properties set.
1: 		This sets the default field to null and thus
1: 		breaks any link with the Properties set that
1: 		was the default.
1: 	*/
1: 	public void clearDefaults() {
1: 		defaults = null;
1: 	}
1: 	
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 	/**
1: 	 * Write the properties out.  Step through
1: 	 * the enumeration and write the strings out
1: 	 * in UTF.
1: 	 *
1: 	 * @param out write bytes here
1: 	 *
1:  	 * @exception IOException thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeInt(size());
1: 		for (Enumeration e = keys(); e.hasMoreElements(); )
1: 		{
1: 			String key = (String)e.nextElement();
1: 			out.writeUTF(key);
1: 			out.writeUTF(getProperty(key));
1: 		}
1: 	}					
1: 
1: 	/**
1: 	 * Read the properties from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 */
1: 	public void readExternal(ObjectInput in)
1: 		throws IOException
1: 	{
1: 		int size = in.readInt();
1: 		for (; size > 0; size--)
1: 		{
1: 			put(in.readUTF(), in.readUTF());
1: 		}
1: 	}
1: 
0: 	public void readExternal(ArrayInputStream in)
1: 		throws IOException
1: 	{
1: 		int size = in.readInt();
1: 		for (; size > 0; size--)
1: 		{
1: 			put(in.readUTF(), in.readUTF());
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.FORMATABLE_PROPERTIES_V01_ID; }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import java.util.Enumeration;
0: import java.util.Properties;
0: 
0: import java.io.IOException;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: 
0: /**
0:  * A formatable holder for a java.util.Properties.
0:  * Used to avoid serializing Properties.
0:  */
0: public class FormatableProperties extends Properties implements Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	/**
0: 	 * Niladic constructor for formatable
0: 	 */
0: 	public FormatableProperties() 
0: 	{
0: 		this(null);
0: 	}
0: 
0: 	/**
0: 	 * Creates an empty property list with the specified
0: 	 * defaults.
0: 	 *
0: 	 * @param defaults the defaults
0: 	 */
0: 	public FormatableProperties(Properties defaults)
0: 	{
0: 		super(defaults);
0: 	}
0: 
0: 	/**
0: 		Clear the defaults from this Properties set.
0: 		This sets the default field to null and thus
0: 		breaks any link with the Properties set that
0: 		was the default.
0: 	*/
0: 	public void clearDefaults() {
0: 		defaults = null;
0: 	}
0: 	
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 	/**
0: 	 * Write the properties out.  Step through
0: 	 * the enumeration and write the strings out
0: 	 * in UTF.
0: 	 *
0: 	 * @param out write bytes here
0: 	 *
0:  	 * @exception IOException thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeInt(size());
0: 		for (Enumeration e = keys(); e.hasMoreElements(); )
0: 		{
0: 			String key = (String)e.nextElement();
0: 			out.writeUTF(key);
0: 			out.writeUTF(getProperty(key));
0: 		}
0: 	}					
0: 
0: 	/**
0: 	 * Read the properties from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 */
0: 	public void readExternal(ObjectInput in)
0: 		throws IOException
0: 	{
0: 		int size = in.readInt();
0: 		for (; size > 0; size--)
0: 		{
0: 			put(in.readUTF(), in.readUTF());
0: 		}
0: 	}
0: 
0: 	public void readExternal(ArrayInputStream in)
0: 		throws IOException
0: 	{
0: 		int size = in.readInt();
0: 		for (; size > 0; size--)
0: 		{
0: 			put(in.readUTF(), in.readUTF());
0: 		}
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.FORMATABLE_PROPERTIES_V01_ID; }
0: }
============================================================================