1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.FormatIdOutputStream
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.info.JVMInfo;
1:eac0369: 
1:eac0369: import java.io.DataOutputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectOutputStream;
1:eac0369: import java.io.OutputStream;
1:eac0369: import java.io.Serializable;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369:   A stream for serializing objects with format id tags.
1:eac0369: 
1:eac0369:   <P>An ObjectOutput (henceforth 'out') preceeds objects it writes with
1:eac0369:   a format id. The companion FormatIdInputStream (henceforth 'in')
1:eac0369:   uses these format ids in parsing the stored data. The stream
1:eac0369:   can be thought of as containing a sequence of (formatId,object) pairs
1:eac0369:   interspersed with other data. The assumption is that out.writeObject()
1:eac0369:   produces these pairs and in.readObject() uses the format ids to
1:eac0369:   construct objects from the pairs that out.writeObject produced.
1:eac0369:   The description below describes each supported pair and how in.readObject()
1:eac0369:   processes it.
1:eac0369: 
1:eac0369:   <OL>
1:eac0369:   <LI> (NULL_FORMAT_ID, nothing) in.readObject() returns null.
1:eac0369:   <LI> (SRING_FORMAT_ID, UTF8 encoded string)in.readObject reads and
1:eac0369:        returns this string.
1:eac0369:   <LI> (SERIALIZABLE_FORMAT_ID,serialized object) in.readObject() reads
1:eac0369:        the object using java serialization and returns it.
1:eac0369:   <LI> (A format id for a Storable, isNull flag and object if isNull == false)
1:eac0369:        (see note 1) in.readObject() reads the boolean isNull flag. If is null
1:eac0369: 	   is true, in.readObject() returns a Storable object of the correct
1:eac0369: 	   class which is null. If ifNull is false, in.readObject() restores
1:eac0369: 	   the object using its readExternal() method.
1:eac0369:   <LI> (A format id for a Formatable which is not Storable, the stored object)
1:eac0369:        (see note 1) in.readObject restores the object using its
1:eac0369: 	   readExternal() method.
1:eac0369:   </OL>
1:eac0369: 
1:eac0369:   <P>Note 1: The FormatIdInputStream uses
1:eac0369:   Monitor.newInstanceFromIdentifier(format id) to get the class.
1:eac0369:   <P>Note 2: An object may support more than one of the following
1:eac0369:   interfaces Storable, Formatable, Serializable. In this case out.writeObject
1:eac0369:   use the first of these interfaces which the object supports (based on the order
1:eac0369:   listed here) to determine how to write the object.
1:eac0369:  */
1:eac0369: public class FormatIdOutputStream
1:eac0369: extends DataOutputStream implements ObjectOutput, ErrorInfo
1:eac0369: {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Constructor for a FormatIdOutputStream
1:eac0369: 
1:eac0369: 	  @param out output goes here.
1:eac0369: 	  */
1:eac0369: 	public FormatIdOutputStream(OutputStream out)
1:eac0369: 	{
1:eac0369: 		super(out);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Write a format id for the object provied followed by the
1:eac0369: 	  object itself to this FormatIdOutputStream.
1:eac0369: 
1:eac0369: 	  @param ref a reference to the object.
1:eac0369: 	  @exception java.io.IOException the exception.
1:eac0369: 	  */
1:eac0369: 	public void writeObject(Object ref) throws IOException
1:eac0369: 	{
1:eac0369: 		if (ref == null)
1:eac0369: 		{
1:eac0369: 			FormatIdUtil.writeFormatIdInteger(this, StoredFormatIds.NULL_FORMAT_ID);
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (ref instanceof String)
1:eac0369: 		{
1:eac0369:             // String's are special cased to use writeUTF which is more
1:eac0369:             // efficient than the default writeObject(String), but the format
1:eac0369:             // can only store 65535 bytes.  The worst case size conversion is
1:eac0369:             // 3 bytes for each unicode character in a String, so limiting
1:eac0369:             // writeUTF optimization to strings smaller than 20000 should 
1:eac0369:             // insure that we won't call writeUTF() and produce more than
1:eac0369:             // 65535 bytes.
1:eac0369: 
1:eac0369:             String  str = (String) ref;
1:eac0369: 
1:eac0369:             if (str.length() <= 20000)
1:eac0369:             {
1:eac0369:                 FormatIdUtil.writeFormatIdInteger(
1:eac0369:                     this, StoredFormatIds.STRING_FORMAT_ID);
1:eac0369: 
1:eac0369:                 this.writeUTF((String)ref);
1:eac0369:                 return;
1:eac0369:             }
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Add debugging code to read-in every formatable that we write
1:eac0369: 		// to ensure that it can be read and it's correctly registered.
1:eac0369: 		OutputStream oldOut = null;
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 
1:eac0369: 			if (ref instanceof Formatable) {
1:eac0369: 
1:eac0369: 				oldOut = this.out;
1:eac0369: 
1:eac0369: 				this.out = new DebugByteTeeOutputStream(oldOut);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (ref instanceof Storable)
1:eac0369:         {
1:eac0369: 			Storable s = (Storable)ref;
1:eac0369: 
1:eac0369: 			int fmtId = s.getTypeFormatId();
1:eac0369: 
1:eac0369: 			if (fmtId != StoredFormatIds.SERIALIZABLE_FORMAT_ID) {
1:eac0369: 				FormatIdUtil.writeFormatIdInteger(this, fmtId);
1:eac0369: 				boolean isNull = s.isNull();
1:eac0369: 				writeBoolean(isNull);
1:eac0369: 				if (!isNull)
1:eac0369: 				{
1:eac0369: 					s.writeExternal(this);
1:eac0369: 				}
1:eac0369: 				if (SanityManager.DEBUG) {
1:eac0369: 					((DebugByteTeeOutputStream) this.out).checkObject(s);
1:eac0369: 					this.out = oldOut;
1:eac0369: 				}
1:eac0369: 				return;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		else if (ref instanceof Formatable)
1:eac0369: 		{
1:eac0369: 			Formatable f =
1:eac0369: 				(Formatable) ref;
1:eac0369: 			int fmtId = f.getTypeFormatId();
1:eac0369: 
1:eac0369: 			if (fmtId != StoredFormatIds.SERIALIZABLE_FORMAT_ID) {
1:eac0369: 				FormatIdUtil.writeFormatIdInteger(this,fmtId);
1:eac0369: 				f.writeExternal(this);
1:eac0369: 
1:eac0369: 				if (SanityManager.DEBUG) {
1:eac0369: 					((DebugByteTeeOutputStream) this.out).checkObject(f);
1:eac0369: 					this.out = oldOut;
1:eac0369: 				}
1:eac0369: 				return;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Otherwise we assume (ref instanceof Serializable).
1:eac0369: 		** If it isn't we'll get an error, which is what
1:eac0369: 	 	** we would expect if someone uses something that
1:eac0369: 	 	** doesn't support Serializable/Externalizable/Formattable
1:eac0369: 		** when it should.
1:eac0369: 		*/
1:eac0369: 		{
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** If we are debugging (SerializeTrace), we are
1:eac0369: 			** going to print out every unexpected serialized
1:eac0369: 			** class.  We print them out to stdout to help
1:eac0369: 			** in debugging (so they cause diffs in test runs).
1:eac0369: 			** This is only active in a SANE server.
1:eac0369: 			*/
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:eac0369: 				if (SanityManager.DEBUG_ON("SerializedTrace"))
1:eac0369: 				{
1:eac0369: 					String name = ref.getClass().getName();
1:eac0369: 					if (
1:eac0369: 						!name.startsWith("java.lang") &&
1:eac0369: 						!name.startsWith("java.math"))
1:eac0369: 					{
1:eac0369: 						SanityManager.DEBUG("SerializedTrace",
1:eac0369: 							"...writing serialized class: "+name);
1:eac0369: 						System.out.println(
1:eac0369: 							"...writing serialized class: "+name);
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			FormatIdUtil.writeFormatIdInteger(this, StoredFormatIds.SERIALIZABLE_FORMAT_ID);
1:eac0369: 			ObjectOutputStream oos = new ObjectOutputStream(this);
1:eac0369: 			oos.writeObject(ref);
1:eac0369: 			oos.flush();
1:eac0369: 
1:eac0369: 			if (SanityManager.DEBUG && ref instanceof Formatable) {
1:eac0369: 				((DebugByteTeeOutputStream) this.out).checkObject((Formatable) ref);
1:eac0369: 				this.out = oldOut;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Set the OutputStream for this FormatIdOutputStream to the stream
1:eac0369: 	  provided. It is the responsibility of the caller to flush or
1:eac0369: 	  close (as required) the previous stream this class was attached to.
1:eac0369: 
1:eac0369: 	  @param out The new output stream.
1:eac0369: 	  */
1:eac0369: 	public void setOutput(OutputStream out)
1:eac0369: 	{
1:eac0369: 		this.out = out;
1:eac0369: 		this.written = 0;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /* Methods of ErrorInfo, used here for SQLData error reporting */
1:eac0369: 
1:eac0369: 	public String getErrorInfo()
1:eac0369:     {
1:eac0369:         return null;
1:eac0369:     }
1:eac0369: 
1:eac0369:     public Exception getNestedException()
1:eac0369:     {
1:eac0369:           return null;
1:eac0369:     }
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.FormatIdOutputStream
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.info.JVMInfo;
1: 
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.io.ObjectOutput;
1: import java.io.ObjectOutputStream;
1: import java.io.OutputStream;
1: import java.io.Serializable;
1: 
1: 
1: /**
1:   A stream for serializing objects with format id tags.
1: 
1:   <P>An ObjectOutput (henceforth 'out') preceeds objects it writes with
1:   a format id. The companion FormatIdInputStream (henceforth 'in')
1:   uses these format ids in parsing the stored data. The stream
1:   can be thought of as containing a sequence of (formatId,object) pairs
1:   interspersed with other data. The assumption is that out.writeObject()
1:   produces these pairs and in.readObject() uses the format ids to
1:   construct objects from the pairs that out.writeObject produced.
1:   The description below describes each supported pair and how in.readObject()
1:   processes it.
1: 
1:   <OL>
1:   <LI> (NULL_FORMAT_ID, nothing) in.readObject() returns null.
1:   <LI> (SRING_FORMAT_ID, UTF8 encoded string)in.readObject reads and
1:        returns this string.
1:   <LI> (SERIALIZABLE_FORMAT_ID,serialized object) in.readObject() reads
1:        the object using java serialization and returns it.
1:   <LI> (A format id for a Storable, isNull flag and object if isNull == false)
1:        (see note 1) in.readObject() reads the boolean isNull flag. If is null
1: 	   is true, in.readObject() returns a Storable object of the correct
1: 	   class which is null. If ifNull is false, in.readObject() restores
1: 	   the object using its readExternal() method.
1:   <LI> (A format id for a Formatable which is not Storable, the stored object)
1:        (see note 1) in.readObject restores the object using its
1: 	   readExternal() method.
1:   </OL>
1: 
1:   <P>Note 1: The FormatIdInputStream uses
1:   Monitor.newInstanceFromIdentifier(format id) to get the class.
1:   <P>Note 2: An object may support more than one of the following
1:   interfaces Storable, Formatable, Serializable. In this case out.writeObject
1:   use the first of these interfaces which the object supports (based on the order
1:   listed here) to determine how to write the object.
1:  */
1: public class FormatIdOutputStream
1: extends DataOutputStream implements ObjectOutput, ErrorInfo
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	  Constructor for a FormatIdOutputStream
1: 
1: 	  @param out output goes here.
1: 	  */
1: 	public FormatIdOutputStream(OutputStream out)
1: 	{
1: 		super(out);
1: 	}
1: 
1: 	/**
1: 	  Write a format id for the object provied followed by the
1: 	  object itself to this FormatIdOutputStream.
1: 
1: 	  @param ref a reference to the object.
1: 	  @exception java.io.IOException the exception.
1: 	  */
1: 	public void writeObject(Object ref) throws IOException
1: 	{
1: 		if (ref == null)
1: 		{
1: 			FormatIdUtil.writeFormatIdInteger(this, StoredFormatIds.NULL_FORMAT_ID);
1: 			return;
1: 		}
1: 
1: 		if (ref instanceof String)
1: 		{
1:             // String's are special cased to use writeUTF which is more
1:             // efficient than the default writeObject(String), but the format
1:             // can only store 65535 bytes.  The worst case size conversion is
1:             // 3 bytes for each unicode character in a String, so limiting
1:             // writeUTF optimization to strings smaller than 20000 should 
1:             // insure that we won't call writeUTF() and produce more than
1:             // 65535 bytes.
1: 
1:             String  str = (String) ref;
1: 
1:             if (str.length() <= 20000)
1:             {
1:                 FormatIdUtil.writeFormatIdInteger(
1:                     this, StoredFormatIds.STRING_FORMAT_ID);
1: 
1:                 this.writeUTF((String)ref);
1:                 return;
1:             }
1: 		}
1: 
1: 		// Add debugging code to read-in every formatable that we write
1: 		// to ensure that it can be read and it's correctly registered.
1: 		OutputStream oldOut = null;
1: 		if (SanityManager.DEBUG) {
1: 
1: 			if (ref instanceof Formatable) {
1: 
1: 				oldOut = this.out;
1: 
1: 				this.out = new DebugByteTeeOutputStream(oldOut);
1: 			}
1: 		}
1: 
1: 		if (ref instanceof Storable)
1:         {
1: 			Storable s = (Storable)ref;
1: 
1: 			int fmtId = s.getTypeFormatId();
1: 
1: 			if (fmtId != StoredFormatIds.SERIALIZABLE_FORMAT_ID) {
1: 				FormatIdUtil.writeFormatIdInteger(this, fmtId);
1: 				boolean isNull = s.isNull();
1: 				writeBoolean(isNull);
1: 				if (!isNull)
1: 				{
1: 					s.writeExternal(this);
1: 				}
1: 				if (SanityManager.DEBUG) {
1: 					((DebugByteTeeOutputStream) this.out).checkObject(s);
1: 					this.out = oldOut;
1: 				}
1: 				return;
1: 			}
1: 		}
1: 		else if (ref instanceof Formatable)
1: 		{
1: 			Formatable f =
1: 				(Formatable) ref;
1: 			int fmtId = f.getTypeFormatId();
1: 
1: 			if (fmtId != StoredFormatIds.SERIALIZABLE_FORMAT_ID) {
1: 				FormatIdUtil.writeFormatIdInteger(this,fmtId);
1: 				f.writeExternal(this);
1: 
1: 				if (SanityManager.DEBUG) {
1: 					((DebugByteTeeOutputStream) this.out).checkObject(f);
1: 					this.out = oldOut;
1: 				}
1: 				return;
1: 			}
1: 		}
1: 
1: 		/*
1: 		** Otherwise we assume (ref instanceof Serializable).
1: 		** If it isn't we'll get an error, which is what
1: 	 	** we would expect if someone uses something that
1: 	 	** doesn't support Serializable/Externalizable/Formattable
1: 		** when it should.
1: 		*/
1: 		{
1: 
1: 			/*
1: 			** If we are debugging (SerializeTrace), we are
1: 			** going to print out every unexpected serialized
1: 			** class.  We print them out to stdout to help
1: 			** in debugging (so they cause diffs in test runs).
1: 			** This is only active in a SANE server.
1: 			*/
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				if (SanityManager.DEBUG_ON("SerializedTrace"))
1: 				{
1: 					String name = ref.getClass().getName();
1: 					if (
1: 						!name.startsWith("java.lang") &&
1: 						!name.startsWith("java.math"))
1: 					{
1: 						SanityManager.DEBUG("SerializedTrace",
1: 							"...writing serialized class: "+name);
1: 						System.out.println(
1: 							"...writing serialized class: "+name);
1: 					}
1: 				}
1: 			}
1: 
1: 			FormatIdUtil.writeFormatIdInteger(this, StoredFormatIds.SERIALIZABLE_FORMAT_ID);
1: 			ObjectOutputStream oos = new ObjectOutputStream(this);
1: 			oos.writeObject(ref);
1: 			oos.flush();
1: 
1: 			if (SanityManager.DEBUG && ref instanceof Formatable) {
1: 				((DebugByteTeeOutputStream) this.out).checkObject((Formatable) ref);
1: 				this.out = oldOut;
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	  Set the OutputStream for this FormatIdOutputStream to the stream
1: 	  provided. It is the responsibility of the caller to flush or
1: 	  close (as required) the previous stream this class was attached to.
1: 
1: 	  @param out The new output stream.
1: 	  */
1: 	public void setOutput(OutputStream out)
1: 	{
1: 		this.out = out;
1: 		this.written = 0;
1: 	}
1: 
1: 
1:     /* Methods of ErrorInfo, used here for SQLData error reporting */
1: 
1: 	public String getErrorInfo()
1:     {
1:         return null;
1:     }
1: 
1:     public Exception getNestedException()
1:     {
1:           return null;
1:     }
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.info.JVMInfo;
0: 
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.io.ObjectOutput;
0: import java.io.ObjectOutputStream;
0: import java.io.OutputStream;
0: import java.io.Serializable;
0: 
0: 
0: /**
0:   A stream for serializing objects with format id tags.
0: 
0:   <P>An ObjectOutput (henceforth 'out') preceeds objects it writes with
0:   a format id. The companion FormatIdInputStream (henceforth 'in')
0:   uses these format ids in parsing the stored data. The stream
0:   can be thought of as containing a sequence of (formatId,object) pairs
0:   interspersed with other data. The assumption is that out.writeObject()
0:   produces these pairs and in.readObject() uses the format ids to
0:   construct objects from the pairs that out.writeObject produced.
0:   The description below describes each supported pair and how in.readObject()
0:   processes it.
0: 
0:   <OL>
0:   <LI> (NULL_FORMAT_ID, nothing) in.readObject() returns null.
0:   <LI> (SRING_FORMAT_ID, UTF8 encoded string)in.readObject reads and
0:        returns this string.
0:   <LI> (SERIALIZABLE_FORMAT_ID,serialized object) in.readObject() reads
0:        the object using java serialization and returns it.
0:   <LI> (A format id for a Storable, isNull flag and object if isNull == false)
0:        (see note 1) in.readObject() reads the boolean isNull flag. If is null
0: 	   is true, in.readObject() returns a Storable object of the correct
0: 	   class which is null. If ifNull is false, in.readObject() restores
0: 	   the object using its readExternal() method.
0:   <LI> (A format id for a Formatable which is not Storable, the stored object)
0:        (see note 1) in.readObject restores the object using its
0: 	   readExternal() method.
0:   </OL>
0: 
0:   <P>Note 1: The FormatIdInputStream uses
0:   Monitor.newInstanceFromIdentifier(format id) to get the class.
0:   <P>Note 2: An object may support more than one of the following
0:   interfaces Storable, Formatable, Serializable. In this case out.writeObject
0:   use the first of these interfaces which the object supports (based on the order
0:   listed here) to determine how to write the object.
0:  */
0: public class FormatIdOutputStream
0: extends DataOutputStream implements ObjectOutput, ErrorInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	  Constructor for a FormatIdOutputStream
0: 
0: 	  @param out output goes here.
0: 	  */
0: 	public FormatIdOutputStream(OutputStream out)
0: 	{
0: 		super(out);
0: 	}
0: 
0: 	/**
0: 	  Write a format id for the object provied followed by the
0: 	  object itself to this FormatIdOutputStream.
0: 
0: 	  @param ref a reference to the object.
0: 	  @exception java.io.IOException the exception.
0: 	  */
0: 	public void writeObject(Object ref) throws IOException
0: 	{
0: 		if (ref == null)
0: 		{
0: 			FormatIdUtil.writeFormatIdInteger(this, StoredFormatIds.NULL_FORMAT_ID);
0: 			return;
0: 		}
0: 
0: 		if (ref instanceof String)
0: 		{
0:             // String's are special cased to use writeUTF which is more
0:             // efficient than the default writeObject(String), but the format
0:             // can only store 65535 bytes.  The worst case size conversion is
0:             // 3 bytes for each unicode character in a String, so limiting
0:             // writeUTF optimization to strings smaller than 20000 should 
0:             // insure that we won't call writeUTF() and produce more than
0:             // 65535 bytes.
0: 
0:             String  str = (String) ref;
0: 
0:             if (str.length() <= 20000)
0:             {
0:                 FormatIdUtil.writeFormatIdInteger(
0:                     this, StoredFormatIds.STRING_FORMAT_ID);
0: 
0:                 this.writeUTF((String)ref);
0:                 return;
0:             }
0: 		}
0: 
0: 		// Add debugging code to read-in every formatable that we write
0: 		// to ensure that it can be read and it's correctly registered.
0: 		OutputStream oldOut = null;
0: 		if (SanityManager.DEBUG) {
0: 
0: 			if (ref instanceof Formatable) {
0: 
0: 				oldOut = this.out;
0: 
0: 				this.out = new DebugByteTeeOutputStream(oldOut);
0: 			}
0: 		}
0: 
0: 		if (ref instanceof Storable)
0:         {
0: 			Storable s = (Storable)ref;
0: 
0: 			int fmtId = s.getTypeFormatId();
0: 
0: 			if (fmtId != StoredFormatIds.SERIALIZABLE_FORMAT_ID) {
0: 				FormatIdUtil.writeFormatIdInteger(this, fmtId);
0: 				boolean isNull = s.isNull();
0: 				writeBoolean(isNull);
0: 				if (!isNull)
0: 				{
0: 					s.writeExternal(this);
0: 				}
0: 				if (SanityManager.DEBUG) {
0: 					((DebugByteTeeOutputStream) this.out).checkObject(s);
0: 					this.out = oldOut;
0: 				}
0: 				return;
0: 			}
0: 		}
0: 		else if (ref instanceof Formatable)
0: 		{
0: 			Formatable f =
0: 				(Formatable) ref;
0: 			int fmtId = f.getTypeFormatId();
0: 
0: 			if (fmtId != StoredFormatIds.SERIALIZABLE_FORMAT_ID) {
0: 				FormatIdUtil.writeFormatIdInteger(this,fmtId);
0: 				f.writeExternal(this);
0: 
0: 				if (SanityManager.DEBUG) {
0: 					((DebugByteTeeOutputStream) this.out).checkObject(f);
0: 					this.out = oldOut;
0: 				}
0: 				return;
0: 			}
0: 		}
0: 
0: 		/*
0: 		** Otherwise we assume (ref instanceof Serializable).
0: 		** If it isn't we'll get an error, which is what
0: 	 	** we would expect if someone uses something that
0: 	 	** doesn't support Serializable/Externalizable/Formattable
0: 		** when it should.
0: 		*/
0: 		{
0: 
0: 			/*
0: 			** If we are debugging (SerializeTrace), we are
0: 			** going to print out every unexpected serialized
0: 			** class.  We print them out to stdout to help
0: 			** in debugging (so they cause diffs in test runs).
0: 			** This is only active in a SANE server.
0: 			*/
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (SanityManager.DEBUG_ON("SerializedTrace"))
0: 				{
0: 					String name = ref.getClass().getName();
0: 					if (
0: 						!name.startsWith("java.lang") &&
0: 						!name.startsWith("java.math"))
0: 					{
0: 						SanityManager.DEBUG("SerializedTrace",
0: 							"...writing serialized class: "+name);
0: 						System.out.println(
0: 							"...writing serialized class: "+name);
0: 					}
0: 				}
0: 			}
0: 
0: 			FormatIdUtil.writeFormatIdInteger(this, StoredFormatIds.SERIALIZABLE_FORMAT_ID);
0: 			ObjectOutputStream oos = new ObjectOutputStream(this);
0: 			oos.writeObject(ref);
0: 			oos.flush();
0: 
0: 			if (SanityManager.DEBUG && ref instanceof Formatable) {
0: 				((DebugByteTeeOutputStream) this.out).checkObject((Formatable) ref);
0: 				this.out = oldOut;
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	  Set the OutputStream for this FormatIdOutputStream to the stream
0: 	  provided. It is the responsibility of the caller to flush or
0: 	  close (as required) the previous stream this class was attached to.
0: 
0: 	  @param out The new output stream.
0: 	  */
0: 	public void setOutput(OutputStream out)
0: 	{
0: 		this.out = out;
0: 		this.written = 0;
0: 	}
0: 
0: 
0:     /* Methods of ErrorInfo, used here for SQLData error reporting */
0: 
0: 	public String getErrorInfo()
0:     {
0:         return null;
0:     }
0: 
0:     public Exception getNestedException()
0:     {
0:           return null;
0:     }
0: 
0: }
============================================================================