1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.sort.SortBufferScan
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.sort;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   A sort scan that just reads rows out of a sorter.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public class SortBufferScan extends SortScan
2:eac0369: {
1:eac0369: 	/**
1:eac0369: 	The sorter we're returning rows from.
1:eac0369: 	**/
1:eac0369: 	protected SortBuffer sortBuffer;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Constructors.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	SortBufferScan(
1:eac0369:     MergeSort           sort, 
1:eac0369:     TransactionManager  tran, 
1:eac0369:     SortBuffer          sortBuffer,
1:eac0369:     boolean             hold)
1:eac0369: 	{
1:eac0369: 		super(sort, tran, hold);
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.ASSERT(sortBuffer != null);
1:eac0369: 
1:eac0369: 		this.sortBuffer = sortBuffer;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Methods of MergeSortScan
1:eac0369: 	 */
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Move to the next position in the scan.
1:fa09146: 	@see org.apache.derby.iapi.store.access.ScanController#next
1:eac0369:     **/
1:eac0369:     public boolean next()
1:eac0369: 		throws StandardException
1:b89bd48:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             SanityManager.ASSERT(
1:eac0369:                 sortBuffer != null, 
1:eac0369:                 "next() called on scan after scan was closed.");
1:eac0369:         }
1:eac0369: 
1:b89bd48:         current = sortBuffer.removeFirst();
1:b89bd48:         return current != null;
1:b89bd48:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Close the scan.
1:eac0369:     **/
1:eac0369:     public boolean closeForEndTransaction(boolean closeHeldScan)
1:eac0369:     {
1:eac0369:         if (closeHeldScan || !hold)
1:eac0369:         {
1:eac0369:             close();
1:eac0369:             return(true);
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             return(false);
1:eac0369:         }
1:eac0369: 
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Close the scan.
1:fa09146: 	@see org.apache.derby.iapi.store.access.ScanController#close
1:eac0369:     **/
1:eac0369:     public void close()
1:eac0369: 	{
1:eac0369: 		if (super.sort != null)
1:eac0369: 		{
1:eac0369: 			sort.doneScanning(this, sortBuffer);
1:eac0369: 			sortBuffer = null;
1:eac0369: 		}
1:eac0369: 		super.close();
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b89bd48
/////////////////////////////////////////////////////////////////////////
1:     {
/////////////////////////////////////////////////////////////////////////
1:         current = sortBuffer.removeFirst();
1:         return current != null;
1:     }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@see org.apache.derby.iapi.store.access.ScanController#next
/////////////////////////////////////////////////////////////////////////
1: 	@see org.apache.derby.iapi.store.access.ScanController#close
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.sort.SortBufferScan
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.sort;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: 
1: /**
1: 
1:   A sort scan that just reads rows out of a sorter.
1: 
1: **/
1: 
1: public class SortBufferScan extends SortScan
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	The sorter we're returning rows from.
1: 	**/
1: 	protected SortBuffer sortBuffer;
1: 
1: 	/*
1: 	 * Constructors.
1: 	 */
1: 
1: 	SortBufferScan(
1:     MergeSort           sort, 
1:     TransactionManager  tran, 
1:     SortBuffer          sortBuffer,
1:     boolean             hold)
1: 	{
1: 		super(sort, tran, hold);
1: 
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(sortBuffer != null);
1: 
1: 		this.sortBuffer = sortBuffer;
1: 	}
1: 
1: 	/*
1: 	 * Methods of MergeSortScan
1: 	 */
1: 
1:     /**
1:     Move to the next position in the scan.
0: 	@see ScanController#next
1:     **/
1:     public boolean next()
1: 		throws StandardException
1: 	{
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(
1:                 sortBuffer != null, 
1:                 "next() called on scan after scan was closed.");
1:         }
1: 
0: 		super.current = sortBuffer.removeFirst();
0: 		return (super.current != null);
1: 	}
1: 
1:     /**
1:     Close the scan.
1:     **/
1:     public boolean closeForEndTransaction(boolean closeHeldScan)
1:     {
1:         if (closeHeldScan || !hold)
1:         {
1:             close();
1:             return(true);
1:         }
1:         else
1:         {
1:             return(false);
1:         }
1: 
1:     }
1: 
1:     /**
1:     Close the scan.
0: 	@see ScanController#close
1:     **/
1:     public void close()
1: 	{
1: 		if (super.sort != null)
1: 		{
1: 			sort.doneScanning(this, sortBuffer);
1: 			sortBuffer = null;
1: 		}
1: 		super.close();
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.sort;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: 
0: /**
0: 
0:   A sort scan that just reads rows out of a sorter.
0: 
0: **/
0: 
0: public class SortBufferScan extends SortScan
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	The sorter we're returning rows from.
0: 	**/
0: 	protected SortBuffer sortBuffer;
0: 
0: 	/*
0: 	 * Constructors.
0: 	 */
0: 
0: 	SortBufferScan(
0:     MergeSort           sort, 
0:     TransactionManager  tran, 
0:     SortBuffer          sortBuffer,
0:     boolean             hold)
0: 	{
0: 		super(sort, tran, hold);
0: 
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(sortBuffer != null);
0: 
0: 		this.sortBuffer = sortBuffer;
0: 	}
0: 
0: 	/*
0: 	 * Methods of MergeSortScan
0: 	 */
0: 
0:     /**
0:     Move to the next position in the scan.
0: 	@see ScanController#next
0:     **/
0:     public boolean next()
0: 		throws StandardException
0: 	{
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(
0:                 sortBuffer != null, 
0:                 "next() called on scan after scan was closed.");
0:         }
0: 
0: 		super.current = sortBuffer.removeFirst();
0: 		return (super.current != null);
0: 	}
0: 
0:     /**
0:     Close the scan.
0:     **/
0:     public boolean closeForEndTransaction(boolean closeHeldScan)
0:     {
0:         if (closeHeldScan || !hold)
0:         {
0:             close();
0:             return(true);
0:         }
0:         else
0:         {
0:             return(false);
0:         }
0: 
0:     }
0: 
0:     /**
0:     Close the scan.
0: 	@see ScanController#close
0:     **/
0:     public void close()
0: 	{
0: 		if (super.sort != null)
0: 		{
0: 			sort.doneScanning(this, sortBuffer);
0: 			sortBuffer = null;
0: 		}
0: 		super.close();
0: 	}
0: 
0: }
============================================================================