1:777a463: /*
1:777a463: 
1:777a463:  Derby - Class org.apache.derbyTesting.system.nstest.TimerThread
1:777a463: 
1:777a463:  Licensed to the Apache Software Foundation (ASF) under one or more
1:777a463:  contributor license agreements.  See the NOTICE file distributed with
1:777a463:  this work for additional information regarding copyright ownership.
1:777a463:  The ASF licenses this file to You under the Apache License, Version 2.0
1:777a463:  (the "License"); you may not use this file except in compliance with
1:777a463:  the License.  You may obtain a copy of the License at
1:777a463: 
1:777a463:  http://www.apache.org/licenses/LICENSE-2.0
1:777a463: 
1:777a463:  Unless required by applicable law or agreed to in writing, software
1:777a463:  distributed under the License is distributed on an "AS IS" BASIS,
1:777a463:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:777a463:  See the License for the specific language governing permissions and
1:777a463:  limitations under the License.
1:777a463: 
1:777a463:  */
1:777a463: package org.apache.derbyTesting.system.nstest;
1:777a463: 
1:777a463: /**
1:777a463:  * <p>
1:777a463:  * A thread which sleeps for a specified time period, then wakes up
1:777a463:  * and terminates the VM.
1:777a463:  * </p>
1:777a463:  */
1:777a463: public class TimerThread extends Thread
1:777a463: {
1:777a463:     ///////////////////////////////////////////////////////////////////////////////////
1:777a463:     //
1:777a463:     // CONSTANTS
1:777a463:     //
1:777a463:     ///////////////////////////////////////////////////////////////////////////////////
1:777a463: 
1:777a463:     ///////////////////////////////////////////////////////////////////////////////////
1:777a463:     //
1:777a463:     // STATE
1:777a463:     //
1:777a463:     ///////////////////////////////////////////////////////////////////////////////////
1:777a463: 
1:777a463:     private long    _sleepTime;
1:777a463:     private boolean _continueRunning = true;
1:777a463:     
1:777a463:     ///////////////////////////////////////////////////////////////////////////////////
1:777a463:     //
1:777a463:     // CONSTRUCTOR
1:777a463:     //
1:777a463:     ///////////////////////////////////////////////////////////////////////////////////
1:777a463: 
1:777a463: 	public TimerThread( long sleepTime )
1:777a463:     {
1:777a463:         _sleepTime = sleepTime;
1:777a463: 	}
1:777a463: 
1:777a463:     ///////////////////////////////////////////////////////////////////////////////////
1:777a463:     //
1:777a463:     // Thread BEHAVIOR
1:777a463:     //
1:777a463:     ///////////////////////////////////////////////////////////////////////////////////
1:777a463: 
1:777a463: 	/*
1:777a463: 	 * Implementation of run() method to sleep, wake up, and kill the program.
1:777a463: 	 * 
1:777a463: 	 */
1:777a463: 	public void run() {
1:777a463: 
1:777a463:         long    remainingTime = _sleepTime;
1:777a463:         
1:777a463:         while ( _continueRunning )
1:777a463:         {
1:777a463:             long    cycleStartTime = System.currentTimeMillis();
1:777a463:             
1:777a463:             try {
1:777a463:                 if ( remainingTime > 0L )
1:777a463:                 {
1:777a463:                     NsTest.logger.println( "TimerThread sleeping for " + remainingTime + " milliseconds." );
1:777a463:                     sleep( remainingTime );
1:777a463:                 }
1:777a463: 
1:777a463:                 //
1:777a463:                 // End the program. This will fire the shutdown hook which
1:777a463:                 // prints the final statistics.
1:777a463:                 //
1:777a463:                 NsTest.logger.println( "TimerThread attempting to shut down the program." );
1:777a463:                 NsTest.printStatistics();
1:777a463:                 Runtime.getRuntime().halt( 0 );
1:777a463:                 
1:777a463:             } catch (java.lang.InterruptedException ie)
1:777a463:             {
1:777a463:                 NsTest.printException( TimerThread.class.getName(), ie );
1:777a463:             }
1:777a463:             
1:777a463:             long    elapsedTime = System.currentTimeMillis() - cycleStartTime;
1:777a463: 
1:777a463:             remainingTime = remainingTime - elapsedTime;
1:777a463:         }
1:777a463: 	}
1:777a463: 
1:777a463:     ///////////////////////////////////////////////////////////////////////////////////
1:777a463:     //
1:777a463:     // OTHER BEHAVIOR
1:777a463:     //
1:777a463:     ///////////////////////////////////////////////////////////////////////////////////
1:777a463: 
1:777a463:     /** This method marks the thread for rundown */
1:777a463:     public  void    stopNow() { _continueRunning = false; }
1:777a463: 
1:777a463: }
1:777a463: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:777a463
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.system.nstest.TimerThread
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.system.nstest;
1: 
1: /**
1:  * <p>
1:  * A thread which sleeps for a specified time period, then wakes up
1:  * and terminates the VM.
1:  * </p>
1:  */
1: public class TimerThread extends Thread
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private long    _sleepTime;
1:     private boolean _continueRunning = true;
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	public TimerThread( long sleepTime )
1:     {
1:         _sleepTime = sleepTime;
1: 	}
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Thread BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	/*
1: 	 * Implementation of run() method to sleep, wake up, and kill the program.
1: 	 * 
1: 	 */
1: 	public void run() {
1: 
1:         long    remainingTime = _sleepTime;
1:         
1:         while ( _continueRunning )
1:         {
1:             long    cycleStartTime = System.currentTimeMillis();
1:             
1:             try {
1:                 if ( remainingTime > 0L )
1:                 {
1:                     NsTest.logger.println( "TimerThread sleeping for " + remainingTime + " milliseconds." );
1:                     sleep( remainingTime );
1:                 }
1: 
1:                 //
1:                 // End the program. This will fire the shutdown hook which
1:                 // prints the final statistics.
1:                 //
1:                 NsTest.logger.println( "TimerThread attempting to shut down the program." );
1:                 NsTest.printStatistics();
1:                 Runtime.getRuntime().halt( 0 );
1:                 
1:             } catch (java.lang.InterruptedException ie)
1:             {
1:                 NsTest.printException( TimerThread.class.getName(), ie );
1:             }
1:             
1:             long    elapsedTime = System.currentTimeMillis() - cycleStartTime;
1: 
1:             remainingTime = remainingTime - elapsedTime;
1:         }
1: 	}
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // OTHER BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** This method marks the thread for rundown */
1:     public  void    stopNow() { _continueRunning = false; }
1: 
1: }
1: 
============================================================================