1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.bytecode.Type
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.bytecode;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1:eac0369: import org.apache.derby.iapi.services.classfile.ClassHolder;
1:eac0369: 
1:eac0369: final class Type {
1:eac0369: 
1:eac0369: 	static final Type LONG = new Type("long", VMDescriptor.LONG);
1:eac0369: 	static final Type INT = new Type("int", VMDescriptor.INT);
1:eac0369: 	static final Type SHORT = new Type("short", VMDescriptor.SHORT);
1:eac0369: 	static final Type BYTE = new Type("byte", VMDescriptor.BYTE);
1:eac0369: 	static final Type BOOLEAN = new Type("boolean", VMDescriptor.BOOLEAN);
1:eac0369: 	static final Type FLOAT = new Type("float", VMDescriptor.FLOAT);
1:eac0369: 	static final Type DOUBLE = new Type("double", VMDescriptor.DOUBLE);
1:eac0369: 	static final Type STRING = new Type("java.lang.String", "Ljava/lang/String;");
1:eac0369: 
1:eac0369: 	private final String javaName; // e.g. java.lang.Object
1:eac0369: 	private final short vmType; // e.g. BCExpr.vm_reference
1:eac0369: 	private final String vmName; // e.g. Ljava/lang/Object;
1:eac0369: 	final String vmNameSimple; // e.g. java/lang/Object
1:eac0369: 
1:eac0369: 	Type(String javaName, String vmName) {
1:eac0369: 		this.vmName = vmName;
1:eac0369: 		this.javaName = javaName;
1:eac0369: 		vmType = BCJava.vmTypeId(vmName);
1:eac0369: 		vmNameSimple = ClassHolder.convertToInternalClassName(javaName);
1:eac0369: 	}
1:eac0369: 
1:5c2ad71:     @Override
1:5c2ad71:     public String toString() {
1:5c2ad71:         StringBuilder sb = new StringBuilder();
1:5c2ad71:         sb.append("[");
1:5c2ad71:         sb.append(javaName);
1:5c2ad71:         sb.append(", ");
1:5c2ad71:         sb.append(vmType);
1:5c2ad71:         sb.append(", ");
1:5c2ad71:         sb.append(vmName);
1:5c2ad71:         sb.append(", ");
1:5c2ad71:         sb.append(vmNameSimple);
1:5c2ad71:         sb.append("]");
1:5c2ad71:         
1:5c2ad71:         return sb.toString();
1:5c2ad71:     }
1:eac0369: 	/*
1:eac0369: 	** Class specific methods.
1:eac0369: 	*/
1:eac0369: 	
1:eac0369: 	String javaName() {
1:eac0369: 		return javaName;
1:eac0369: 	}
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 	 * Get the VM Type name (java/lang/Object)
1:eac0369: 	 */
1:eac0369: 	String vmName() {
1:eac0369: 		return vmName;
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 		Get the VM type (eg. VMDescriptor.INT)
1:eac0369: 	*/
1:eac0369: 	short vmType() {
1:eac0369: 		return vmType;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	int width() {
1:eac0369: 		return Type.width(vmType);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	static int width(short type) {
1:eac0369: 		switch (type) {
1:eac0369: 		case BCExpr.vm_void:
1:eac0369: 			return 0;
1:eac0369: 		case BCExpr.vm_long:
1:eac0369: 		case BCExpr.vm_double:
1:eac0369: 			return 2;
1:eac0369: 		default:
1:eac0369: 			return 1;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:5c2ad71
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String toString() {
1:         StringBuilder sb = new StringBuilder();
1:         sb.append("[");
1:         sb.append(javaName);
1:         sb.append(", ");
1:         sb.append(vmType);
1:         sb.append(", ");
1:         sb.append(vmName);
1:         sb.append(", ");
1:         sb.append(vmNameSimple);
1:         sb.append("]");
1:         
1:         return sb.toString();
1:     }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.bytecode.Type
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.bytecode;
1: 
1: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1: import org.apache.derby.iapi.services.classfile.ClassHolder;
1: 
1: final class Type {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	static final Type LONG = new Type("long", VMDescriptor.LONG);
1: 	static final Type INT = new Type("int", VMDescriptor.INT);
1: 	static final Type SHORT = new Type("short", VMDescriptor.SHORT);
1: 	static final Type BYTE = new Type("byte", VMDescriptor.BYTE);
1: 	static final Type BOOLEAN = new Type("boolean", VMDescriptor.BOOLEAN);
1: 	static final Type FLOAT = new Type("float", VMDescriptor.FLOAT);
1: 	static final Type DOUBLE = new Type("double", VMDescriptor.DOUBLE);
1: 	static final Type STRING = new Type("java.lang.String", "Ljava/lang/String;");
1: 
1: 	private final String javaName; // e.g. java.lang.Object
1: 	private final short vmType; // e.g. BCExpr.vm_reference
1: 	private final String vmName; // e.g. Ljava/lang/Object;
1: 	final String vmNameSimple; // e.g. java/lang/Object
1: 
1: 	Type(String javaName, String vmName) {
1: 		this.vmName = vmName;
1: 		this.javaName = javaName;
1: 		vmType = BCJava.vmTypeId(vmName);
1: 		vmNameSimple = ClassHolder.convertToInternalClassName(javaName);
1: 	}
1: 
1: 	/*
1: 	** Class specific methods.
1: 	*/
1: 	
1: 	String javaName() {
1: 		return javaName;
1: 	}
1: 
1: 	/**
1: 	 * Get the VM Type name (java/lang/Object)
1: 	 */
1: 	String vmName() {
1: 		return vmName;
1: 	}
1: 	/**
1: 		Get the VM type (eg. VMDescriptor.INT)
1: 	*/
1: 	short vmType() {
1: 		return vmType;
1: 	}
1: 
1: 	int width() {
1: 		return Type.width(vmType);
1: 	}
1: 
1: 	static int width(short type) {
1: 		switch (type) {
1: 		case BCExpr.vm_void:
1: 			return 0;
1: 		case BCExpr.vm_long:
1: 		case BCExpr.vm_double:
1: 			return 2;
1: 		default:
1: 			return 1;
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.bytecode;
0: 
0: import org.apache.derby.iapi.services.classfile.VMDescriptor;
0: import org.apache.derby.iapi.services.classfile.ClassHolder;
0: 
0: final class Type {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	static final Type LONG = new Type("long", VMDescriptor.LONG);
0: 	static final Type INT = new Type("int", VMDescriptor.INT);
0: 	static final Type SHORT = new Type("short", VMDescriptor.SHORT);
0: 	static final Type BYTE = new Type("byte", VMDescriptor.BYTE);
0: 	static final Type BOOLEAN = new Type("boolean", VMDescriptor.BOOLEAN);
0: 	static final Type FLOAT = new Type("float", VMDescriptor.FLOAT);
0: 	static final Type DOUBLE = new Type("double", VMDescriptor.DOUBLE);
0: 	static final Type STRING = new Type("java.lang.String", "Ljava/lang/String;");
0: 
0: 	private final String javaName; // e.g. java.lang.Object
0: 	private final short vmType; // e.g. BCExpr.vm_reference
0: 	private final String vmName; // e.g. Ljava/lang/Object;
0: 	final String vmNameSimple; // e.g. java/lang/Object
0: 
0: 	Type(String javaName, String vmName) {
0: 		this.vmName = vmName;
0: 		this.javaName = javaName;
0: 		vmType = BCJava.vmTypeId(vmName);
0: 		vmNameSimple = ClassHolder.convertToInternalClassName(javaName);
0: 	}
0: 
0: 	/*
0: 	** Class specific methods.
0: 	*/
0: 	
0: 	String javaName() {
0: 		return javaName;
0: 	}
0: 
0: 	/**
0: 	 * Get the VM Type name (java/lang/Object)
0: 	 */
0: 	String vmName() {
0: 		return vmName;
0: 	}
0: 	/**
0: 		Get the VM type (eg. VMDescriptor.INT)
0: 	*/
0: 	short vmType() {
0: 		return vmType;
0: 	}
0: 
0: 	int width() {
0: 		return Type.width(vmType);
0: 	}
0: 
0: 	static int width(short type) {
0: 		switch (type) {
0: 		case BCExpr.vm_void:
0: 			return 0;
0: 		case BCExpr.vm_long:
0: 		case BCExpr.vm_double:
0: 			return 2;
0: 		default:
0: 			return 1;
0: 		}
0: 	}
0: }
============================================================================