1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.IndexRow
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
16:eac0369: 
6:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: 
6:eac0369: /**
1:eac0369: 	Basic implementation of ExecIndexRow.
1:eac0369: 
1:eac0369:  */
1:ca6ed17: class IndexRow extends ValueRow implements ExecIndexRow
3:eac0369: {
3:eac0369: 	///////////////////////////////////////////////////////////////////////
3:eac0369: 	//
1:eac0369: 	//	STATE
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 
1:eac0369: 	private boolean[]	orderedNulls;
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:51f60c6: 	IndexRow(int ncols) {
1:eac0369: 		 super(ncols);
1:eac0369: 		 orderedNulls = new boolean[ncols];	/* Initializes elements to false */
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	EXECINDEXROW INTERFACE
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/* Column positions are one-based, arrays are zero-based */
1:eac0369: 	public void orderedNulls(int columnPosition) {
1:eac0369: 		orderedNulls[columnPosition] = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean areNullsOrdered(int columnPosition) {
1:eac0369: 		return orderedNulls[columnPosition];
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Turn the ExecRow into an ExecIndexRow.
1:eac0369: 	 */
1:eac0369: 	public void execRowToExecIndexRow(ExecRow valueRow)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.THROWASSERT(
1:eac0369: 				"execRowToExecIndexRow() not expected to be called for IndexRow");
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	ExecRow cloneMe() {
1:eac0369: 		return new IndexRow(nColumns());
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ca6ed17
/////////////////////////////////////////////////////////////////////////
1: class IndexRow extends ValueRow implements ExecIndexRow
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:33cf670
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:51f60c6
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.io.ObjectInput;
0: import java.io.ObjectOutput;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1: 	IndexRow(int ncols) {
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.IndexRow
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
1: 
1: 
1: /**
1: 	Basic implementation of ExecIndexRow.
1: 
0: 	@author jeff
1:  */
0: public class IndexRow extends ValueRow implements ExecIndexRow
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	STATE
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 
1: 	private boolean[]	orderedNulls;
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
0: 	 *
1: 	 */
0:     public	IndexRow() {}
1: 
0: 	public IndexRow(int ncols) {
1: 		 super(ncols);
1: 		 orderedNulls = new boolean[ncols];	/* Initializes elements to false */
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	EXECINDEXROW INTERFACE
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/* Column positions are one-based, arrays are zero-based */
1: 	public void orderedNulls(int columnPosition) {
1: 		orderedNulls[columnPosition] = true;
1: 	}
1: 
1: 	public boolean areNullsOrdered(int columnPosition) {
1: 		return orderedNulls[columnPosition];
1: 	}
1: 
1: 	/**
1: 	 * Turn the ExecRow into an ExecIndexRow.
0: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void execRowToExecIndexRow(ExecRow valueRow)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.THROWASSERT(
1: 				"execRowToExecIndexRow() not expected to be called for IndexRow");
1: 		}
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
0: 	//	FORMATABLE INTERFACE
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
1: 	{
0: 		super.readExternal( in );
1: 
0: 		int colCount = nColumns();
1: 
0: 		orderedNulls = new boolean[ colCount ];
0: 		for ( int ictr = 0; ictr < colCount; ictr++ ) { orderedNulls[ ictr ] = in.readBoolean(); }
1: 	}
1: 
1: 	/**
0: 	 * Write this object to a stream of stored objects.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
1: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
1: 	{
0: 		super.writeExternal( out );
0: 		int colCount = nColumns();
1: 
0: 		for ( int ictr = 0; ictr < colCount; ictr++ ) { out.writeBoolean( orderedNulls[ ictr ] ); }
1: 	}
1: 
1: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
1: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.INDEX_ROW_V01_ID; }
1: 
1: 	ExecRow cloneMe() {
1: 		return new IndexRow(nColumns());
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: 
0: /**
0: 	Basic implementation of ExecIndexRow.
0: 
0: 	@author jeff
0:  */
0: public class IndexRow extends ValueRow implements ExecIndexRow
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	STATE
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 
0: 	private boolean[]	orderedNulls;
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
0: 	 *
0: 	 */
0:     public	IndexRow() {}
0: 
0: 	public IndexRow(int ncols) {
0: 		 super(ncols);
0: 		 orderedNulls = new boolean[ncols];	/* Initializes elements to false */
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	EXECINDEXROW INTERFACE
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	/* Column positions are one-based, arrays are zero-based */
0: 	public void orderedNulls(int columnPosition) {
0: 		orderedNulls[columnPosition] = true;
0: 	}
0: 
0: 	public boolean areNullsOrdered(int columnPosition) {
0: 		return orderedNulls[columnPosition];
0: 	}
0: 
0: 	/**
0: 	 * Turn the ExecRow into an ExecIndexRow.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void execRowToExecIndexRow(ExecRow valueRow)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.THROWASSERT(
0: 				"execRowToExecIndexRow() not expected to be called for IndexRow");
0: 		}
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	FORMATABLE INTERFACE
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal( in );
0: 
0: 		int colCount = nColumns();
0: 
0: 		orderedNulls = new boolean[ colCount ];
0: 		for ( int ictr = 0; ictr < colCount; ictr++ ) { orderedNulls[ ictr ] = in.readBoolean(); }
0: 	}
0: 
0: 	/**
0: 	 * Write this object to a stream of stored objects.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
0: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
0: 	{
0: 		super.writeExternal( out );
0: 		int colCount = nColumns();
0: 
0: 		for ( int ictr = 0; ictr < colCount; ictr++ ) { out.writeBoolean( orderedNulls[ ictr ] ); }
0: 	}
0: 
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.INDEX_ROW_V01_ID; }
0: 
0: 	ExecRow cloneMe() {
0: 		return new IndexRow(nColumns());
0: 	}
0: }
============================================================================