1:ee0904b: /*
3:ee0904b:  
1:362b532:  Derby - Class org.apache.derbyTesting.system.optimizer.RunOptimizerTest
1:ee0904b:  
1:ee0904b:  Licensed to the Apache Software Foundation (ASF) under one or more
1:ee0904b:  contributor license agreements.  See the NOTICE file distributed with
1:ee0904b:  this work for additional information regarding copyright ownership.
1:ee0904b:  The ASF licenses this file to You under the Apache License, Version 2.0
1:ee0904b:  (the "License"); you may not use this file except in compliance with
1:ee0904b:  the License.  You may obtain a copy of the License at
1:ee0904b:  
1:ee0904b:  http://www.apache.org/licenses/LICENSE-2.0
1:ee0904b:  
1:ee0904b:  Unless required by applicable law or agreed to in writing, software
1:ee0904b:  distributed under the License is distributed on an "AS IS" BASIS,
1:ee0904b:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee0904b:  See the License for the specific language governing permissions and
1:ee0904b:  limitations under the License.
1:ee0904b:  
1:ee0904b:  */
1:ee0904b: package org.apache.derbyTesting.system.optimizer;
1:ee0904b: 
1:ee0904b: import java.io.File;
1:ee0904b: import java.sql.Connection;
1:ee0904b: import java.sql.DriverManager;
1:ee0904b: import java.sql.SQLException;
1:ee0904b: 
1:ee0904b: import org.apache.derbyTesting.system.optimizer.query.GenericQuery;
1:ee0904b: import org.apache.derbyTesting.system.optimizer.query.QueryList;
1:ee0904b: import org.apache.derbyTesting.system.optimizer.utils.DataUtils;
1:ee0904b: import org.apache.derbyTesting.system.optimizer.utils.TestViews;
1:ee0904b: /**
1:ee0904b:  * 
1:362b532:  * Class RunOptimizerTest: The main class that runs this test. 
1:ee0904b:  * 
1:ee0904b:  * To run the test use:
1:ee0904b:  * 
1:362b532:  * java org.apache.derbyTesting.system.optimizer.RunOptimizerTest -reset|-qlist
1:ee0904b:  * -reset = Reset the database and begin run
1:ee0904b:  * -qlist = Run only test queries from the 'query.list' file provided
1:ee0904b:  * No arguments will run all the default test queries, provided via classes
1:ee0904b:  * Query1 - Query6 in this test case.
1:ee0904b:  * 
1:ee0904b:  * Set the 'derby.langtest.mode' to 'client' to run this test using the 
1:ee0904b:  * DerbyClient against a Derby Network Server running on port 1527
1:ee0904b:  */
1:ee0904b: 
1:362b532: public class RunOptimizerTest {
1:ee0904b: 
1:ee0904b: 	public static void main(String[] args) {
1:ee0904b: 		Connection conn = null;
1:ee0904b: 		String driverClass=StaticValues.embedClass;
1:ee0904b: 		String jdbcurl=StaticValues.embedURL;
1:ee0904b: 		boolean reset=false;
1:2b0fe66: 		boolean verbose=false;
1:ee0904b: 		try {
1:2b0fe66: 			String mode=System.getProperty("derby.optimizertest.mode");
1:ee0904b: 			if(mode!=null){
1:ee0904b: 				if(mode.equalsIgnoreCase("client")){
1:ee0904b: 					driverClass=StaticValues.clientClass;
1:ee0904b: 					jdbcurl=StaticValues.clientURL;
3:ee0904b: 				}else{
1:ee0904b: 					driverClass=StaticValues.embedClass;
1:ee0904b: 					jdbcurl=StaticValues.embedURL;
4:ee0904b: 				}
1:ee0904b: 			}
1:d8644b2: 
1:d8644b2: 			File dir = new File("testdb");
1:d8644b2: 			if((!dir.exists())){
1:d8644b2: 				reset=true; // If nonexisting must always .init and .createObjects
1:d8644b2: 			}
1:d8644b2: 
1:ee0904b: 			System.out.println("Running test with url "+jdbcurl);
1:ee0904b: 			if(args.length>0){
1:2b0fe66: 				for(int i=0;i<args.length;i++){
1:2b0fe66: 					if(args[i].equalsIgnoreCase("-reset"))
1:2b0fe66: 						reset=true;
1:2b0fe66: 						else if(args[i].equalsIgnoreCase("-qlist"))
1:2b0fe66: 							QueryList.queryListOnly=true;
1:2b0fe66: 						else if(args[i].equalsIgnoreCase("-verbose"))
1:2b0fe66: 							verbose=true;
1:2b0fe66: 						else{
1:2b0fe66: 							printUsage();
1:2b0fe66: 							return;
1:2b0fe66: 						}
1:2b0fe66: 				}
1:ee0904b: 				}
1:2b0fe66: 			
1:ee0904b: 			Class.forName(driverClass);
1:d8644b2: 			if (reset) { // Must also be done if db nonexisting
1:d8644b2:                 System.out.println("Initializing db ...");
1:ee0904b: 				conn = DriverManager.getConnection(jdbcurl);
1:ee0904b: 				TestViews.init();
1:2b0fe66: 				DataUtils.dropObjects(conn,verbose);
1:2b0fe66: 				DataUtils.createObjects(conn,verbose);
1:ee0904b: 			}else{
1:d8644b2:                 System.out.println("Use existing db ...");
1:ee0904b: 				conn = DriverManager.getConnection(jdbcurl);
1:ee0904b: 			}
1:2b0fe66: 			DataUtils.insertData(conn,verbose);
1:ee0904b: 			QueryList.init(conn);
2:2b0fe66: 			if (verbose)
1:2b0fe66: 				System.out.println(" List of query scenarios to run: "+QueryList.getQList().size());
1:d8644b2:             System.out.println("Starting tests ...");
2:ee0904b: 			for(int i=0;i<QueryList.getQList().size();i++){
1:2b0fe66: 				if (verbose)
1:2b0fe66: 					System.out.println("\n______________________________________________________________________\n");
1:ee0904b: 				GenericQuery gq=(GenericQuery)QueryList.getQList().get(i);
1:2b0fe66: 				if (verbose)
1:2b0fe66: 					System.out.println("*** Running query: "+gq.getDescription()+" ***");
1:ee0904b: 				conn=null; //conn.close() throws "Invalid transaction state" exception
1:ee0904b: 				conn = DriverManager.getConnection(jdbcurl);
1:ee0904b: 				gq.setConnection(conn);
1:2b0fe66: 				gq.executeQueries(false,verbose); //using regular STATEMENTS
1:ee0904b: 				conn.close();
1:ee0904b: 				conn=null; //conn.close() throws "Invalid transaction state" exception
1:ee0904b: 				conn = DriverManager.getConnection(jdbcurl);
1:ee0904b: 				gq.setConnection(conn);
1:2b0fe66: 				gq.executeQueries(true,verbose); //using prepared STATEMENTS
1:ee0904b: 				
1:ee0904b: 			}
1:ee0904b: 		} catch (ClassNotFoundException cne) {
1:ee0904b: 			System.out.println("Class not found Exception: " + cne.getMessage());
1:ee0904b: 		} catch (SQLException sqe) {
1:ee0904b: 			System.out.println("SQL Exception :" + sqe);
1:ee0904b: 
1:ee0904b: 			sqe.printStackTrace();
1:ee0904b: 		}catch (Exception e){
1:ee0904b: 			System.out.println("Unexpected Exception "+e);
1:ee0904b: 			e.printStackTrace();
1:ee0904b: 		}
1:ee0904b: 		printResults();
1:ee0904b: 	}
1:ee0904b: 	private static void printUsage(){
1:ee0904b: 		System.out.println("Usage:");
1:362b532: 		System.out.println("\njava org.apache.derbyTesting.system.optimizer.RunOptimizerTest -reset|-qlist\n");
1:ee0904b: 		System.out.println("-reset = Reset the database and begin run");
1:ee0904b: 		System.out.println("-qlist = Run only test queries from the 'query.list' file provided");
1:ee0904b: 		System.out.println("\nNo arguments will run all the default test queries available in this test case.\n");
1:ee0904b: 	}
1:ee0904b: 	private static void printResults(){
1:ee0904b: 		System.out.println("\n\n========================= R E S U L T S =========================\n");
1:2b0fe66: 			for(int i=0;i<QueryList.getQList().size();i++){
1:ee0904b: 			System.out.println("\n________________________________________________________________________________________________");
1:ee0904b: 			GenericQuery gq=(GenericQuery)QueryList.getQList().get(i);
1:2b0fe66: 			if (gq.getPrepStmtRunResults().size()==0){
1:2b0fe66: 				System.out.println("Queries didn't run");
1:2b0fe66: 				System.exit(0);
1:2b0fe66: 			}
1:2b0fe66: 			else{
1:ee0904b: 			System.out.println("Timings for Query type: "+gq.getDescription()+"\n");
1:ee0904b: 			System.out.println("QueryName\tUsing PreparedStatment\tUsing Statement\tRows Expected");
1:ee0904b: 			System.out.println("------------------------------------------------------------------------------");
1:2b0fe66: 			System.out.println("Query size: " + gq.getQueries().size());
1:ee0904b: 			for(int k=0;k<gq.getQueries().size();k++){
1:ee0904b: 				String queryName="QUERY # "+(k+1);
1:2b0fe66: 				String[] prepStmtTimes=(String [])gq.getPrepStmtRunResults().get(k);
1:ee0904b: 				String [] stmtTimes=(String [])gq.getStmtRunResults().get(k);
1:ee0904b: 				for(int j=0; j<StaticValues.ITER;j++){
1:ee0904b: 					System.out.println(queryName+"\t"+prepStmtTimes[j]+"\t\t"+stmtTimes[j]+"\t"+gq.getRowsExpected(k));
1:362b532: 				}
1:2b0fe66: 			
1:ee0904b: 				System.out.println("*************************************************************************");
1:2b0fe66: 				
1:2b0fe66: 			}
1:ee0904b: 			System.out.println("\n________________________________________________________________________________________________");
1:ee0904b: 			}
1:ee0904b: 		}
1:2b0fe66: 			
1:ee0904b: 	}
1:ee0904b: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d8644b2
/////////////////////////////////////////////////////////////////////////
1: 
1: 			File dir = new File("testdb");
1: 			if((!dir.exists())){
1: 				reset=true; // If nonexisting must always .init and .createObjects
1: 			}
1: 
/////////////////////////////////////////////////////////////////////////
1: 			if (reset) { // Must also be done if db nonexisting
1:                 System.out.println("Initializing db ...");
1:                 System.out.println("Use existing db ...");
1:             System.out.println("Starting tests ...");
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2b0fe66
/////////////////////////////////////////////////////////////////////////
1: 		boolean verbose=false;
1: 			String mode=System.getProperty("derby.optimizertest.mode");
/////////////////////////////////////////////////////////////////////////
1: 				for(int i=0;i<args.length;i++){
1: 					if(args[i].equalsIgnoreCase("-reset"))
1: 						reset=true;
1: 						else if(args[i].equalsIgnoreCase("-qlist"))
1: 							QueryList.queryListOnly=true;
1: 						else if(args[i].equalsIgnoreCase("-verbose"))
1: 							verbose=true;
1: 						else{
1: 							printUsage();
1: 							return;
1: 						}
1: 				}
1: 			
1: 				if (verbose)
0: 					System.out.println("Initializing...");
1: 				DataUtils.dropObjects(conn,verbose);
1: 				DataUtils.createObjects(conn,verbose);
1: 			DataUtils.insertData(conn,verbose);
1: 			if (verbose)
1: 				System.out.println(" List of query scenarios to run: "+QueryList.getQList().size());
1: 				if (verbose)
1: 					System.out.println("\n______________________________________________________________________\n");
1: 				if (verbose)
1: 					System.out.println("*** Running query: "+gq.getDescription()+" ***");
1: 				gq.executeQueries(false,verbose); //using regular STATEMENTS
1: 				gq.executeQueries(true,verbose); //using prepared STATEMENTS
/////////////////////////////////////////////////////////////////////////
1: 			for(int i=0;i<QueryList.getQList().size();i++){
1: 			if (gq.getPrepStmtRunResults().size()==0){
1: 				System.out.println("Queries didn't run");
1: 				System.exit(0);
1: 			}
1: 			else{
1: 			System.out.println("Query size: " + gq.getQueries().size());
1: 				String[] prepStmtTimes=(String [])gq.getPrepStmtRunResults().get(k);
1: 			
1: 				
1: 			}
1: 			
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:362b532
/////////////////////////////////////////////////////////////////////////
1:  Derby - Class org.apache.derbyTesting.system.optimizer.RunOptimizerTest
/////////////////////////////////////////////////////////////////////////
1:  * Class RunOptimizerTest: The main class that runs this test. 
1:  * java org.apache.derbyTesting.system.optimizer.RunOptimizerTest -reset|-qlist
/////////////////////////////////////////////////////////////////////////
1: public class RunOptimizerTest {
/////////////////////////////////////////////////////////////////////////
1: 		System.out.println("\njava org.apache.derbyTesting.system.optimizer.RunOptimizerTest -reset|-qlist\n");
/////////////////////////////////////////////////////////////////////////
1: }
author:Army
-------------------------------------------------------------------------------
commit:ee0904b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
0:  Derby - Class org.apache.derbyTesting.system.langtest.RunLangTest
1:  
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1:  
1:  http://www.apache.org/licenses/LICENSE-2.0
1:  
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.system.optimizer;
1: 
1: import java.io.File;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: 
1: import org.apache.derbyTesting.system.optimizer.query.GenericQuery;
1: import org.apache.derbyTesting.system.optimizer.query.QueryList;
1: import org.apache.derbyTesting.system.optimizer.utils.DataUtils;
1: import org.apache.derbyTesting.system.optimizer.utils.TestViews;
1: /**
1:  * 
0:  * Class RunLangTest: The main class that runs this test. 
1:  * 
1:  * To run the test use:
1:  * 
0:  * java org.apache.derbyTesting.system.langtest.RunLangTest -reset|-qlist
1:  * -reset = Reset the database and begin run
1:  * -qlist = Run only test queries from the 'query.list' file provided
1:  * No arguments will run all the default test queries, provided via classes
1:  * Query1 - Query6 in this test case.
1:  * 
1:  * Set the 'derby.langtest.mode' to 'client' to run this test using the 
1:  * DerbyClient against a Derby Network Server running on port 1527
1:  */
1: 
0: public class RunLangTest {
1: 
1: 	public static void main(String[] args) {
1: 		Connection conn = null;
1: 		String driverClass=StaticValues.embedClass;
1: 		String jdbcurl=StaticValues.embedURL;
1: 		boolean reset=false;
1: 		try {
0: 			String mode=System.getProperty("derby.langtest.mode");
1: 			if(mode!=null){
1: 				if(mode.equalsIgnoreCase("client")){
1: 					driverClass=StaticValues.clientClass;
1: 					jdbcurl=StaticValues.clientURL;
1: 				}else{
1: 					driverClass=StaticValues.embedClass;
1: 					jdbcurl=StaticValues.embedURL;
1: 				}
1: 			}else{
1: 
0: 				File dir = new File("testdb");
0: 				if((!dir.exists())){
0: 					reset=true;
1: 				}
1: 			}
1: 			System.out.println("Running test with url "+jdbcurl);
1: 			if(args.length>0){
0: 				if(args[0].equalsIgnoreCase("-reset"))
0: 					reset=true;
0: 				else if(args[0].equalsIgnoreCase("-qlist")){
0: 					QueryList.queryListOnly=true;
1: 				}else{
0: 					printUsage();
0: 					return;
1: 				}
1: 			}
1: 			Class.forName(driverClass);
0: 			if (reset) {
0: 				System.out.println("Initializing...");
1: 				conn = DriverManager.getConnection(jdbcurl);
1: 				TestViews.init();
0: 				DataUtils.dropObjects(conn);
0: 				DataUtils.createObjects(conn);
1: 			}else{
1: 				conn = DriverManager.getConnection(jdbcurl);
1: 			}
0: 			DataUtils.insertData(conn);
1: 			QueryList.init(conn);
0: 			System.out.println(" List of query scenarios to run: "+QueryList.getQList().size());
1: 			for(int i=0;i<QueryList.getQList().size();i++){
0: 				System.out.println("\n______________________________________________________________________\n");
1: 				GenericQuery gq=(GenericQuery)QueryList.getQList().get(i);
0: 				System.out.println("*** Running query: "+gq.getDescription()+" ***");
1: 				conn=null; //conn.close() throws "Invalid transaction state" exception
1: 				conn = DriverManager.getConnection(jdbcurl);
1: 				gq.setConnection(conn);
0: 				gq.executeQueries(false); //using regular STATEMENTS
1: 				conn.close();
1: 				conn=null; //conn.close() throws "Invalid transaction state" exception
1: 				conn = DriverManager.getConnection(jdbcurl);
1: 				gq.setConnection(conn);
0: 				gq.executeQueries(true); //using prepared STATEMENTS
1: 				
1: 			}
1: 		} catch (ClassNotFoundException cne) {
1: 			System.out.println("Class not found Exception: " + cne.getMessage());
1: 		} catch (SQLException sqe) {
1: 			System.out.println("SQL Exception :" + sqe);
1: 
1: 			sqe.printStackTrace();
1: 		}catch (Exception e){
1: 			System.out.println("Unexpected Exception "+e);
1: 			e.printStackTrace();
1: 		}
1: 		printResults();
1: 	}
1: 	private static void printUsage(){
1: 		System.out.println("Usage:");
0: 		System.out.println("\njava org.apache.derbyTesting.system.langtest.RunLangTest -reset|-qlist\n");
1: 		System.out.println("-reset = Reset the database and begin run");
1: 		System.out.println("-qlist = Run only test queries from the 'query.list' file provided");
1: 		System.out.println("\nNo arguments will run all the default test queries available in this test case.\n");
1: 	}
1: 	private static void printResults(){
1: 		System.out.println("\n\n========================= R E S U L T S =========================\n");
1: 		for(int i=0;i<QueryList.getQList().size();i++){
1: 			System.out.println("\n________________________________________________________________________________________________");
1: 			GenericQuery gq=(GenericQuery)QueryList.getQList().get(i);
1: 			System.out.println("Timings for Query type: "+gq.getDescription()+"\n");
1: 			System.out.println("QueryName\tUsing PreparedStatment\tUsing Statement\tRows Expected");
1: 			System.out.println("------------------------------------------------------------------------------");
1: 					
1: 			for(int k=0;k<gq.getQueries().size();k++){
1: 				String queryName="QUERY # "+(k+1);
0: 				String [] prepStmtTimes=(String [])gq.getPrepStmtRunResults().get(k);
1: 				String [] stmtTimes=(String [])gq.getStmtRunResults().get(k);
1: 				for(int j=0; j<StaticValues.ITER;j++){
1: 					System.out.println(queryName+"\t"+prepStmtTimes[j]+"\t\t"+stmtTimes[j]+"\t"+gq.getRowsExpected(k));
1: 				}
1: 				System.out.println("*************************************************************************");
1: 			}
1: 			System.out.println("\n________________________________________________________________________________________________");
1: 		}
1: 	}
1: }
============================================================================