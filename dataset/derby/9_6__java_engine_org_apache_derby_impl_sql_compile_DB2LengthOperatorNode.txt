1:eac0369: /*
11:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.DB2LengthOperatorNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import java.lang.reflect.Modifier;
1:eac0369: import java.sql.Types;
1:f33fbaf: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:3bb140c: import org.apache.derby.iapi.services.compiler.LocalField;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * This node represents a unary DB2 compatible length operator
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public final class DB2LengthOperatorNode extends UnaryOperatorNode
2:eac0369: {
1:3bb140c:     /**
1:3bb140c:      * @param operand The operand of the node
1:3bb140c:      * @param cm context manager
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     DB2LengthOperatorNode(ValueNode operand, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(operand, "length", "getDB2Length", cm);
1:eac0369:     }
1:eac0369: 
1:3bb140c:     /**
1:eac0369: 	 * Bind this operator
1:eac0369: 	 *
1:eac0369: 	 * @param fromList			The query's FROM list
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates    The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:09c2697:         bindOperand( fromList, subqueryList, aggregates);
1:eac0369: 
1:099e28f:         // This operator is not allowed on XML types.
1:099e28f:         TypeId operandType = operand.getTypeId();
1:099e28f:         if (operandType.isXMLTypeId()) {
1:099e28f:             throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE,
1:099e28f:                                     getOperatorString(),
1:099e28f:                                     operandType.getSQLTypeName());
1:099e28f:         }
1:eac0369: 
1:eac0369:         setType( new DataTypeDescriptor( TypeId.getBuiltInTypeId( Types.INTEGER),
1:eac0369:                                          operand.getTypeServices().isNullable()));
1:3233189:         return this;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This is a length operator node.  Overrides this method
1:eac0369: 	 * in UnaryOperatorNode for code generation purposes.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     String getReceiverInterfaceName() {
1:eac0369: 	    return ClassName.ConcatableDataValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	 * Do code generation for this unary operator.
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1:eac0369: 	 * @param mb	The method the expression will go into
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 									throws StandardException
1:eac0369: 	{
1:eac0369: 		if (operand == null)
1:eac0369: 			return;
1:eac0369: 
1:eac0369:         int constantLength = getConstantLength();
1:eac0369:         // -1 if the length of a non-null operand depends on the data
1:eac0369:             
1:eac0369: 		String resultTypeName = getTypeCompiler().interfaceName();
1:eac0369: 
1:eac0369:         mb.pushThis();
1:eac0369: 		operand.generateExpression(acb, mb);
1:eac0369:         mb.upCast( ClassName.DataValueDescriptor);
1:eac0369:         mb.push( constantLength);
1:eac0369: 
1:eac0369:         /* Allocate an object for re-use to hold the result of the operator */
1:eac0369:         LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, resultTypeName);
1:eac0369:         mb.getField(field);
1:eac0369:         mb.callMethod(VMOpcode.INVOKEVIRTUAL, ClassName.BaseActivation, methodName, resultTypeName, 3);
1:eac0369: 
1:eac0369:         /*
1:eac0369:         ** Store the result of the method call in the field, so we can re-use
1:eac0369:         ** the object.
1:eac0369:         */
1:eac0369:         mb.putField(field);
1:eac0369:     } // end of generateExpression
1:eac0369: 
1:eac0369:     private int getConstantLength( ) throws StandardException
1:eac0369:     {
1:eac0369:         DataTypeDescriptor typeDescriptor = operand.getTypeServices();
1:eac0369:         
1:eac0369:         switch( typeDescriptor.getJDBCTypeId())
1:eac0369:         {
1:eac0369:         case Types.BIGINT:
1:eac0369:             return 8;
1:1a4ea31: 		case Types.BOOLEAN:
1:eac0369:         case Types.BIT:
1:eac0369:             return 1;
1:eac0369:         case Types.BINARY:
1:eac0369:         case Types.CHAR:
1:eac0369:             return typeDescriptor.getMaximumWidth();
1:eac0369:         case Types.DATE:
1:eac0369:             return 4;
1:eac0369:         case Types.DECIMAL:
1:eac0369:         case Types.NUMERIC:
1:eac0369:             return typeDescriptor.getPrecision()/2 + 1;
1:eac0369:         case Types.DOUBLE:
1:eac0369:             return 8;
1:eac0369:         case Types.FLOAT:
1:eac0369:         case Types.REAL:
1:eac0369:         case Types.INTEGER:
1:eac0369:             return 4;
1:eac0369:         case Types.SMALLINT:
1:eac0369:             return 2;
1:eac0369:         case Types.TIME:
1:eac0369:             return 3;
1:eac0369:         case Types.TIMESTAMP:
1:eac0369:             return 10;
1:eac0369:         case Types.TINYINT:
1:eac0369:             return 1;
1:eac0369:         case Types.LONGVARCHAR:
1:eac0369:         case Types.VARCHAR:
1:eac0369:         case Types.LONGVARBINARY:
1:eac0369:         case Types.VARBINARY:
1:eac0369:         case Types.BLOB:
1:eac0369:             return getConstantNodeLength();
1:eac0369:         default:
1:eac0369: 			return -1;
1:eac0369:         }
1:eac0369:     } // end of getConstantLength
1:eac0369: 
1:eac0369:     private int getConstantNodeLength() throws StandardException
1:eac0369:     {
1:eac0369:         if( operand instanceof ConstantNode)
1:eac0369:             return ((ConstantNode) operand).getValue().getLength();
1:eac0369:         return -1;
1:eac0369:     }        
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param operand The operand of the node
1:      * @param cm context manager
1:      * @throws StandardException
1:      */
1:     DB2LengthOperatorNode(ValueNode operand, ContextManager cm)
1:             throws StandardException {
1:         super(operand, "length", "getDB2Length", cm);
0:         setNodeType(C_NodeTypes.DB2_LENGTH_OPERATOR_NODE);
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     String getReceiverInterfaceName() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates    The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         bindOperand( fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1a4ea31
/////////////////////////////////////////////////////////////////////////
1: 		case Types.BOOLEAN:
commit:3233189
/////////////////////////////////////////////////////////////////////////
0:         bindOperand( fromList, subqueryList, aggregateVector);
/////////////////////////////////////////////////////////////////////////
1:         return this;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.DB2LengthOperatorNode
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.reference.ClassName;
1: 
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
1: import java.lang.reflect.Modifier;
1: 
1: import java.sql.Types;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * This node represents a unary DB2 compatible length operator
1:  *
0:  * @author Jack Klebanoff
1:  */
1: 
1: public final class DB2LengthOperatorNode extends UnaryOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1:     
1: 	/**
0: 	 * Initializer for a DB2LengthOperatorNode
1: 	 *
0: 	 * @param operand	The operand of the node
1: 	 */
0: 	public void init(Object	operand)
1: 	{
0: 		super.init( operand, "length", "getDB2Length");
1:     }
1: 
1:  
1: 	/**
1: 	 * Bind this operator
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList	fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
1: 			throws StandardException
1: 	{
0:         ValueNode boundExpression = super.bindExpression( fromList, subqueryList, aggregateVector);
1:         setType( new DataTypeDescriptor( TypeId.getBuiltInTypeId( Types.INTEGER),
1:                                          operand.getTypeServices().isNullable()));
0:         return boundExpression;
1:     }
1: 
1: 	/**
1: 	 * This is a length operator node.  Overrides this method
1: 	 * in UnaryOperatorNode for code generation purposes.
1: 	 */
0: 	public String getReceiverInterfaceName() {
1: 	    return ClassName.ConcatableDataValue;
1: 	}
1: 
1:     /**
1: 	 * Do code generation for this unary operator.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1: 	 * @param mb	The method the expression will go into
1: 	 *
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 									throws StandardException
1: 	{
1: 		if (operand == null)
1: 			return;
1: 
1:         int constantLength = getConstantLength();
1:         // -1 if the length of a non-null operand depends on the data
1:             
1: 		String resultTypeName = getTypeCompiler().interfaceName();
1: 
1:         mb.pushThis();
1: 		operand.generateExpression(acb, mb);
1:         mb.upCast( ClassName.DataValueDescriptor);
1:         mb.push( constantLength);
1: 
1:         /* Allocate an object for re-use to hold the result of the operator */
1:         LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, resultTypeName);
1:         mb.getField(field);
1:         mb.callMethod(VMOpcode.INVOKEVIRTUAL, ClassName.BaseActivation, methodName, resultTypeName, 3);
1: 
1:         /*
1:         ** Store the result of the method call in the field, so we can re-use
1:         ** the object.
1:         */
1:         mb.putField(field);
1:     } // end of generateExpression
1: 
1:     private int getConstantLength( ) throws StandardException
1:     {
1:         DataTypeDescriptor typeDescriptor = operand.getTypeServices();
1:         
1:         switch( typeDescriptor.getJDBCTypeId())
1:         {
1:         case Types.BIGINT:
1:             return 8;
0: 		case org.apache.derby.iapi.reference.JDBC30Translation.SQL_TYPES_BOOLEAN:
1:         case Types.BIT:
1:             return 1;
1:         case Types.BINARY:
1:         case Types.CHAR:
1:             return typeDescriptor.getMaximumWidth();
1:         case Types.DATE:
1:             return 4;
1:         case Types.DECIMAL:
1:         case Types.NUMERIC:
1:             return typeDescriptor.getPrecision()/2 + 1;
1:         case Types.DOUBLE:
1:             return 8;
1:         case Types.FLOAT:
1:         case Types.REAL:
1:         case Types.INTEGER:
1:             return 4;
1:         case Types.SMALLINT:
1:             return 2;
1:         case Types.TIME:
1:             return 3;
1:         case Types.TIMESTAMP:
1:             return 10;
1:         case Types.TINYINT:
1:             return 1;
1:         case Types.LONGVARCHAR:
1:         case Types.VARCHAR:
1:         case Types.LONGVARBINARY:
1:         case Types.VARBINARY:
1:         case Types.BLOB:
1:             return getConstantNodeLength();
1:         default:
1: 			return -1;
1:         }
1:     } // end of getConstantLength
1: 
1:     private int getConstantNodeLength() throws StandardException
1:     {
1:         if( operand instanceof ConstantNode)
1:             return ((ConstantNode) operand).getValue().getLength();
1:         return -1;
1:     }        
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:099e28f
/////////////////////////////////////////////////////////////////////////
0: 
1:         // This operator is not allowed on XML types.
1:         TypeId operandType = operand.getTypeId();
1:         if (operandType.isXMLTypeId()) {
1:             throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE,
1:                                     getOperatorString(),
1:                                     operandType.getSQLTypeName());
1:         }
0: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: import java.lang.reflect.Modifier;
0: 
0: import java.sql.Types;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * This node represents a unary DB2 compatible length operator
0:  *
0:  * @author Jack Klebanoff
0:  */
0: 
0: public final class DB2LengthOperatorNode extends UnaryOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0:     
0: 	/**
0: 	 * Initializer for a DB2LengthOperatorNode
0: 	 *
0: 	 * @param operand	The operand of the node
0: 	 */
0: 	public void init(Object	operand)
0: 	{
0: 		super.init( operand, "length", "getDB2Length");
0:     }
0: 
0:  
0: 	/**
0: 	 * Bind this operator
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList	fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
0: 			throws StandardException
0: 	{
0:         ValueNode boundExpression = super.bindExpression( fromList, subqueryList, aggregateVector);
0:         setType( new DataTypeDescriptor( TypeId.getBuiltInTypeId( Types.INTEGER),
0:                                          operand.getTypeServices().isNullable()));
0:         return boundExpression;
0:     }
0: 
0: 	/**
0: 	 * This is a length operator node.  Overrides this method
0: 	 * in UnaryOperatorNode for code generation purposes.
0: 	 */
0: 	public String getReceiverInterfaceName() {
0: 	    return ClassName.ConcatableDataValue;
0: 	}
0: 
0:     /**
0: 	 * Do code generation for this unary operator.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
0: 	 * @param mb	The method the expression will go into
0: 	 *
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 									throws StandardException
0: 	{
0: 		if (operand == null)
0: 			return;
0: 
0:         int constantLength = getConstantLength();
0:         // -1 if the length of a non-null operand depends on the data
0:             
0: 		String resultTypeName = getTypeCompiler().interfaceName();
0: 
0:         mb.pushThis();
0: 		operand.generateExpression(acb, mb);
0:         mb.upCast( ClassName.DataValueDescriptor);
0:         mb.push( constantLength);
0: 
0:         /* Allocate an object for re-use to hold the result of the operator */
0:         LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, resultTypeName);
0:         mb.getField(field);
0:         mb.callMethod(VMOpcode.INVOKEVIRTUAL, ClassName.BaseActivation, methodName, resultTypeName, 3);
0: 
0:         /*
0:         ** Store the result of the method call in the field, so we can re-use
0:         ** the object.
0:         */
0:         mb.putField(field);
0:     } // end of generateExpression
0: 
0:     private int getConstantLength( ) throws StandardException
0:     {
0:         DataTypeDescriptor typeDescriptor = operand.getTypeServices();
0:         
0:         switch( typeDescriptor.getJDBCTypeId())
0:         {
0:         case Types.BIGINT:
0:             return 8;
0: 		case org.apache.derby.iapi.reference.JDBC30Translation.SQL_TYPES_BOOLEAN:
0:         case Types.BIT:
0:             return 1;
0:         case Types.BINARY:
0:         case Types.CHAR:
0:             return typeDescriptor.getMaximumWidth();
0:         case Types.DATE:
0:             return 4;
0:         case Types.DECIMAL:
0:         case Types.NUMERIC:
0:             return typeDescriptor.getPrecision()/2 + 1;
0:         case Types.DOUBLE:
0:             return 8;
0:         case Types.FLOAT:
0:         case Types.REAL:
0:         case Types.INTEGER:
0:             return 4;
0:         case Types.SMALLINT:
0:             return 2;
0:         case Types.TIME:
0:             return 3;
0:         case Types.TIMESTAMP:
0:             return 10;
0:         case Types.TINYINT:
0:             return 1;
0:         case Types.LONGVARCHAR:
0:         case Types.VARCHAR:
0:         case Types.LONGVARBINARY:
0:         case Types.VARBINARY:
0:         case Types.BLOB:
0:             return getConstantNodeLength();
0:         default:
0: 			return -1;
0:         }
0:     } // end of getConstantLength
0: 
0:     private int getConstantNodeLength() throws StandardException
0:     {
0:         if( operand instanceof ConstantNode)
0:             return ((ConstantNode) operand).getValue().getLength();
0:         return -1;
0:     }        
0: }
============================================================================