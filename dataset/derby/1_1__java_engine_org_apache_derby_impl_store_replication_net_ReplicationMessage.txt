1:77323ec: /*
2:77323ec:  
1:1bac3f3:    Derby - Class org.apache.derby.impl.store.replication.net.ReplicationMessage
1:77323ec:  
1:77323ec:    Licensed to the Apache Software Foundation (ASF) under one or more
1:77323ec:    contributor license agreements.  See the NOTICE file distributed with
1:77323ec:    this work for additional information regarding copyright ownership.
1:77323ec:    The ASF licenses this file to you under the Apache License, Version 2.0
1:77323ec:    (the "License"); you may not use this file except in compliance with
1:77323ec:    the License.  You may obtain a copy of the License at
1:77323ec:  
1:77323ec:       http://www.apache.org/licenses/LICENSE-2.0
1:77323ec:  
1:77323ec:    Unless required by applicable law or agreed to in writing, software
1:77323ec:    distributed under the License is distributed on an "AS IS" BASIS,
1:77323ec:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:77323ec:    See the License for the specific language governing permissions and
1:77323ec:    limitations under the License.
1:77323ec:  
2:77323ec:  */
1:77323ec: 
1:1bac3f3: package org.apache.derby.impl.store.replication.net;
1:77323ec: 
1:77323ec: import java.io.Externalizable;
1:77323ec: import java.io.IOException;
1:77323ec: import java.io.ObjectInput;
1:77323ec: import java.io.ObjectOutput;
1:77323ec: 
2:77323ec: /**
1:77323ec:  * This message is used for the communication between the master and the
1:77323ec:  * slave during Replication. The message is composed of a type flag
1:77323ec:  * and corresponding object. Each type flag indicating the type of the 
1:77323ec:  * content bundled inside the message.
1:77323ec:  */
1:77323ec: public class ReplicationMessage implements Externalizable {
1:77323ec:     /**
1:77323ec:      * The version number is determined based on the database version
1:77323ec:      * of the current database. This would help to establish if the 
1:77323ec:      * master and the slave in replication are at compatible database
1:77323ec:      * versions.
1:77323ec:      */
1:77323ec:     public static final long serialVersionUID = 1L;
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * This is the content of the replication message.
1:77323ec:      */
1:77323ec:     private Object message;
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * The valid values for the type of the content of the message
1:77323ec:      * are listed below.
1:77323ec:      */
1:77323ec:     private int type;
1:77323ec:     
1:77323ec:     /**
1:29fd25c:      * used during the intial handshake between the master and
1:29fd25c:      * the slave. The initial handshake helps to negotiate the
1:29fd25c:      * message UIDs and send a appropriate error or acknowledgment.
1:29fd25c:      * The object this message contains will be a <code>Long</code>.
1:29fd25c:      * IMPORTANT: This constant must not be changed in future versions since 
1:29fd25c:      * we need it to decide slave/master version mismatch
1:29fd25c:      */
1:29fd25c:     public static final int TYPE_INITIATE_VERSION = 0;
1:29fd25c: 
1:29fd25c:     /**
1:29fd25c:      * Used during the intial handshake between the master and
1:29fd25c:      * the slave. Messages of this type are used to ensure that master and 
1:29fd25c:      * slave have identical log files by checking that they will insert 
1:29fd25c:      * the next log record on the same byte position in the log.
1:29fd25c:      * The object this message contains will be a <code>Long</code>.
1:29fd25c:      */
1:29fd25c:     public static final int TYPE_INITIATE_INSTANT = 1;
1:29fd25c: 
1:29fd25c:     /**
1:77323ec:      * This flag will be used for all messages that carry log records.
1:77323ec:      * The Object this message type contains will be a <code>byte</code>
1:77323ec:      * array. The content of the byte array is the log records in the
1:77323ec:      * binary form.
1:77323ec:      */
1:29fd25c:     public static final int TYPE_LOG = 10;
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * This flag is used to send an acknowledgment of successful completion
1:77323ec:      * of a requested operation. It will however not be used to signify
1:77323ec:      * reception for every message transmission. The object this message
1:77323ec:      * type contains will be a <code>String</code>. The SQLState of the
1:77323ec:      * error message can be used here.
1:77323ec:      */
1:29fd25c:     public static final int TYPE_ACK = 11;
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * Indicates that the requested operation was not able to be
1:77323ec:      * completed successfully. The object this message type contains
1:29fd25c:      * will be a <code>String[]</code> where the first length-1 fields
1:29fd25c:      * are used as arguments to create the exception and the last
1:29fd25c:      * field contains the SQLState. The SQLState is the last element
1:29fd25c:      * in the Array, because this means that the whole Array can be
1:29fd25c:      * used as input to the StandardException creator. The SQLState
1:29fd25c:      * will be ignored by the exception creator because there is one
1:29fd25c:      * argument too many. This way we don't have to make a copy of the
1:29fd25c:      * received Array, containing all elements except the SQLState
1:29fd25c:      * element.
1:77323ec:      */
1:29fd25c:     public static final int TYPE_ERROR = 12;
1:c283bcd: 
1:c283bcd:     /** A message used to check if the replication network is working. This
1:c283bcd:      * message type has no object
1:c283bcd:      */
1:c283bcd:     public static final int TYPE_PING = 13;
1:c283bcd: 
1:c283bcd:     /** A message sent as a response to a TYPE_PING message. This
1:c283bcd:      * message type has no object
1:c283bcd:      */
1:c283bcd:     public static final int TYPE_PONG = 14;
1:77323ec:     
1:77323ec:     /**
1:35452cf:      * Used to send a stop replication signal to the slave. Since this
1:35452cf:      * is a control signal the object this message contains will be null.
1:35452cf:      */
1:29fd25c:     public static final int TYPE_STOP = 20;
1:35452cf:     
1:35452cf:     /**
1:35452cf:      * Used to signal the slave that it must failover. The object associated
1:35452cf:      * with this message will be null.
1:35452cf:      */
1:29fd25c:     public static final int TYPE_FAILOVER = 21;
1:35452cf:     
1:35452cf:     /**
1:77323ec:      * public No args constructor required with Externalizable.
1:77323ec:      */
1:77323ec:     public ReplicationMessage() {}
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * Constructor used to set the <code>type</code> and <code>message</code>.
1:77323ec:      * This is used while creating messages for sending while readExternal is
1:77323ec:      * used on the receiving end.
3:77323ec:      *
1:77323ec:      * @param type      The type of this message. Must be one of the message
1:77323ec:      *                  type constants of this class (TYPE_LOG, TYPE_ACK,
1:77323ec:      *                  TYPE_ERROR, TYPE_INITIATE).
1:77323ec:      *
1:77323ec:      * @param message   The message to be transmitted.
1:77323ec:      *
1:77323ec:      */
1:77323ec:     public ReplicationMessage(int type, Object message){
1:77323ec:         this.type = type;
1:77323ec:         this.message = message;
1:77323ec:     }
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * Used to get the actual message that is wrapped inside the
1:77323ec:      * ReplicationMessage object.
1:77323ec:      *
1:77323ec:      * @return The object contained in the message
1:77323ec:      */
1:77323ec:     public Object getMessage(){
1:77323ec:         return message;
1:77323ec:     }
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * Used to get the type of this <code>ReplicationMessage</code>.
1:77323ec:      *
1:77323ec:      * @return The type of the message.
1:77323ec:      */
1:77323ec:     public int getType(){
1:77323ec:         return type;
1:77323ec:     }
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * Used to restore the contents of this object.
1:77323ec:      *
1:77323ec:      * @param in the stream to read data from in order to restore the object.
1:77323ec:      *
1:77323ec:      * @throws IOException If an exception occurs while reading from the
1:77323ec:      *                     <code>InputStream</code>.
1:77323ec:      *
1:77323ec:      * @throws ClassNotFoundException Class of a serialized object cannot
1:77323ec:      *                                be found.
1:77323ec:      *
1:77323ec:      */
1:77323ec:     public void readExternal(ObjectInput in) throws IOException,
1:77323ec:         ClassNotFoundException {
1:77323ec:         switch ((int)in.readLong()) {
1:77323ec:             case 1: {
1:77323ec:                 type = in.readInt();
1:77323ec:                 message = in.readObject();
1:77323ec:                 break;
1:77323ec:             }
1:77323ec:         }
1:77323ec:     }
1:77323ec:     
1:77323ec:     /**
1:77323ec:      * Used to save the contents of this Object.
1:77323ec:      *
1:77323ec:      * @param out the stream to write the object to.
1:77323ec:      *
1:77323ec:      * @throws IOException if an exception occurs while writing to the
1:77323ec:      *                     <code>OutputStream</code>.
1:77323ec:      *
1:77323ec:      */
1:77323ec:     public void writeExternal(ObjectOutput out) throws IOException {
1:77323ec:         out.writeLong(serialVersionUID);
1:77323ec:         out.writeInt(type);
1:77323ec:         out.writeObject(message);
1:77323ec:     }
1:77323ec: }
============================================================================
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:c283bcd
/////////////////////////////////////////////////////////////////////////
1: 
1:     /** A message used to check if the replication network is working. This
1:      * message type has no object
1:      */
1:     public static final int TYPE_PING = 13;
1: 
1:     /** A message sent as a response to a TYPE_PING message. This
1:      * message type has no object
1:      */
1:     public static final int TYPE_PONG = 14;
commit:1bac3f3
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.replication.net.ReplicationMessage
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.store.replication.net;
commit:29fd25c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * used during the intial handshake between the master and
1:      * the slave. The initial handshake helps to negotiate the
1:      * message UIDs and send a appropriate error or acknowledgment.
1:      * The object this message contains will be a <code>Long</code>.
1:      * IMPORTANT: This constant must not be changed in future versions since 
1:      * we need it to decide slave/master version mismatch
1:      */
1:     public static final int TYPE_INITIATE_VERSION = 0;
1: 
1:     /**
1:      * Used during the intial handshake between the master and
1:      * the slave. Messages of this type are used to ensure that master and 
1:      * slave have identical log files by checking that they will insert 
1:      * the next log record on the same byte position in the log.
1:      * The object this message contains will be a <code>Long</code>.
1:      */
1:     public static final int TYPE_INITIATE_INSTANT = 1;
1: 
1:     /**
1:     public static final int TYPE_LOG = 10;
/////////////////////////////////////////////////////////////////////////
1:     public static final int TYPE_ACK = 11;
1:      * will be a <code>String[]</code> where the first length-1 fields
1:      * are used as arguments to create the exception and the last
1:      * field contains the SQLState. The SQLState is the last element
1:      * in the Array, because this means that the whole Array can be
1:      * used as input to the StandardException creator. The SQLState
1:      * will be ignored by the exception creator because there is one
1:      * argument too many. This way we don't have to make a copy of the
1:      * received Array, containing all elements except the SQLState
1:      * element.
1:     public static final int TYPE_ERROR = 12;
1:     public static final int TYPE_STOP = 20;
1:     public static final int TYPE_FAILOVER = 21;
commit:35452cf
/////////////////////////////////////////////////////////////////////////
1:      * Used to send a stop replication signal to the slave. Since this
1:      * is a control signal the object this message contains will be null.
1:      */
0:     public static final int TYPE_STOP = 4;
1:     
1:     /**
1:      * Used to signal the slave that it must failover. The object associated
1:      * with this message will be null.
1:      */
0:     public static final int TYPE_FAILOVER = 5;
1:     
1:     /**
commit:77323ec
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
0:    Derby - Class org.apache.derby.impl.services.replication.net.ReplicationMessage
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
0: package org.apache.derby.impl.services.replication.net;
1: 
1: import java.io.Externalizable;
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: /**
1:  * This message is used for the communication between the master and the
1:  * slave during Replication. The message is composed of a type flag
1:  * and corresponding object. Each type flag indicating the type of the 
1:  * content bundled inside the message.
1:  *
0:  * For now the following message types are defined
1:  *
0:  * TYPE_LOG - This flag will be used for all messages will carry LogRecords.
0:  * TYPE_ACK - this flag is used to send a acknowledgment of successful
0:  *            completion of a requested operation. It will however not
0:  *            be used to signify reception for every message transmission
0:  *            since tcp would automatically take care of this.
0:  * TYPE_ERROR - Indicates that the requested operation was not able to be
0:  *              completed successfully.
0:  * TYPE_INITIATE - used during the intial handshake between the master and
0:  *                 the slave. The initial handshake helps to negotiate the
0:  *                 message UIDs and send a appropriate error or acknowledgment.
1:  */
1: public class ReplicationMessage implements Externalizable {
1:     /**
1:      * The version number is determined based on the database version
1:      * of the current database. This would help to establish if the 
1:      * master and the slave in replication are at compatible database
1:      * versions.
1:      */
1:     public static final long serialVersionUID = 1L;
1:     
1:     /**
1:      * This is the content of the replication message.
1:      */
1:     private Object message;
1:     
1:     /**
1:      * The valid values for the type of the content of the message
1:      * are listed below.
1:      */
1:     private int type;
1:     
1:     /**
1:      * This flag will be used for all messages that carry log records.
1:      * The Object this message type contains will be a <code>byte</code>
1:      * array. The content of the byte array is the log records in the
1:      * binary form.
1:      */
0:     public static final int TYPE_LOG = 0;
1:     
1:     /**
1:      * This flag is used to send an acknowledgment of successful completion
1:      * of a requested operation. It will however not be used to signify
1:      * reception for every message transmission. The object this message
1:      * type contains will be a <code>String</code>. The SQLState of the
1:      * error message can be used here.
1:      */
0:     public static final int TYPE_ACK = 1;
1:     
1:     /**
1:      * Indicates that the requested operation was not able to be
1:      * completed successfully. The object this message type contains
0:      * will be a <code>String</code>.
1:      */
0:     public static final int TYPE_ERROR = 2;
1:     
1:     /**
0:      * used during the intial handshake between the master and
0:      * the slave. The initial handshake helps to negotiate the
0:      * message UIDs and send a appropriate error or acknowledgment.
0:      * The object this message contains will be a <code>Long</code>.
1:      */
0:     public static final int TYPE_INITIATE = 3;
1:     
1:     /**
1:      * public No args constructor required with Externalizable.
1:      */
1:     public ReplicationMessage() {}
1:     
1:     /**
1:      * Constructor used to set the <code>type</code> and <code>message</code>.
1:      * This is used while creating messages for sending while readExternal is
1:      * used on the receiving end.
1:      *
1:      * @param type      The type of this message. Must be one of the message
1:      *                  type constants of this class (TYPE_LOG, TYPE_ACK,
1:      *                  TYPE_ERROR, TYPE_INITIATE).
1:      *
1:      * @param message   The message to be transmitted.
1:      *
1:      */
1:     public ReplicationMessage(int type, Object message){
1:         this.type = type;
1:         this.message = message;
1:     }
1:     
1:     /**
1:      * Used to get the actual message that is wrapped inside the
1:      * ReplicationMessage object.
1:      *
1:      * @return The object contained in the message
1:      */
1:     public Object getMessage(){
1:         return message;
1:     }
1:     
1:     /**
1:      * Used to get the type of this <code>ReplicationMessage</code>.
1:      *
1:      * @return The type of the message.
1:      */
1:     public int getType(){
1:         return type;
1:     }
1:     
1:     /**
1:      * Used to restore the contents of this object.
1:      *
1:      * @param in the stream to read data from in order to restore the object.
1:      *
1:      * @throws IOException If an exception occurs while reading from the
1:      *                     <code>InputStream</code>.
1:      *
1:      * @throws ClassNotFoundException Class of a serialized object cannot
1:      *                                be found.
1:      *
1:      */
1:     public void readExternal(ObjectInput in) throws IOException,
1:         ClassNotFoundException {
1:         switch ((int)in.readLong()) {
1:             case 1: {
1:                 type = in.readInt();
1:                 message = in.readObject();
1:                 break;
1:             }
1:         }
1:     }
1:     
1:     /**
1:      * Used to save the contents of this Object.
1:      *
1:      * @param out the stream to write the object to.
1:      *
1:      * @throws IOException if an exception occurs while writing to the
1:      *                     <code>OutputStream</code>.
1:      *
1:      */
1:     public void writeExternal(ObjectOutput out) throws IOException {
1:         out.writeLong(serialVersionUID);
1:         out.writeInt(type);
1:         out.writeObject(message);
1:     }
1: }
============================================================================