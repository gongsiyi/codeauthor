1:dbdd270: /*
1:dbdd270: * Licensed to the Apache Software Foundation (ASF) under one or more
1:dbdd270: * contributor license agreements.  See the NOTICE file distributed with
1:dbdd270: * this work for additional information regarding copyright ownership.
1:dbdd270: * The ASF licenses this file to you under the Apache License, Version 2.0
1:dbdd270: * (the "License"); you may not use this file except in compliance with
1:dbdd270: * the License.  You may obtain a copy of the License at
1:dbdd270: *
1:dbdd270: *     http://www.apache.org/licenses/LICENSE-2.0
1:dbdd270: *
1:dbdd270: * Unless required by applicable law or agreed to in writing, software
1:dbdd270: * distributed under the License is distributed on an "AS IS" BASIS,
1:dbdd270: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dbdd270: * See the License for the specific language governing permissions and
1:dbdd270: * limitations under the License.
1:dbdd270: */
1:a7f52a6: package org.apache.derbyTesting.functionTests.util.streams;
1:a7f52a6: 
1:a7f52a6: import java.io.ByteArrayInputStream;
1:a7f52a6: import java.io.IOException;
1:a7f52a6: 
1:a7f52a6: public class ReadOnceByteArrayInputStream extends ByteArrayInputStream {
1:a7f52a6: 
1:a7f52a6:     private boolean isClosed;
1:a7f52a6:     
1:a7f52a6:     public ReadOnceByteArrayInputStream(byte[] arg0) {
1:a7f52a6:         super(arg0);
1:a7f52a6:     }
1:a7f52a6: 
1:a7f52a6:     public ReadOnceByteArrayInputStream(byte[] arg0, int arg1, int arg2) {
1:a7f52a6:         super(arg0, arg1, arg2);
1:a7f52a6:     }
1:a7f52a6:     
1:a7f52a6:     public boolean markSupported()
1:a7f52a6:     {
1:a7f52a6:         return false;
1:a7f52a6:     }
1:a7f52a6:     
1:a7f52a6:     public void close() throws IOException
1:a7f52a6:     {
1:a7f52a6:         isClosed = true;
1:a7f52a6:         super.close();
1:a7f52a6:     }
1:a7f52a6:     
1:a7f52a6:     public int read(byte[] b,
1:a7f52a6:             int off,
1:a7f52a6:             int len)
1:a7f52a6:     {
1:a7f52a6:         if (isClosed)
1:a7f52a6:             return -1;
1:a7f52a6:         return super.read(b, off, len);
1:a7f52a6:     }
1:a7f52a6:     
1:a7f52a6:     public int read()
1:a7f52a6:     {
1:a7f52a6:         if (isClosed)
1:a7f52a6:             return -1;
1:a7f52a6:         return super.read();
1:a7f52a6:     }
1:a7f52a6: 
1:a7f52a6: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:dbdd270
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one or more
1: * contributor license agreements.  See the NOTICE file distributed with
1: * this work for additional information regarding copyright ownership.
1: * The ASF licenses this file to you under the Apache License, Version 2.0
1: * (the "License"); you may not use this file except in compliance with
1: * the License.  You may obtain a copy of the License at
1: *
1: *     http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing, software
1: * distributed under the License is distributed on an "AS IS" BASIS,
1: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: * See the License for the specific language governing permissions and
1: * limitations under the License.
1: */
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a7f52a6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.util.streams;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.IOException;
1: 
1: public class ReadOnceByteArrayInputStream extends ByteArrayInputStream {
1: 
1:     private boolean isClosed;
1:     
1:     public ReadOnceByteArrayInputStream(byte[] arg0) {
1:         super(arg0);
1:     }
1: 
1:     public ReadOnceByteArrayInputStream(byte[] arg0, int arg1, int arg2) {
1:         super(arg0, arg1, arg2);
1:     }
1:     
1:     public boolean markSupported()
1:     {
1:         return false;
1:     }
1:     
1:     public void close() throws IOException
1:     {
1:         isClosed = true;
1:         super.close();
1:     }
1:     
1:     public int read(byte[] b,
1:             int off,
1:             int len)
1:     {
1:         if (isClosed)
1:             return -1;
1:         return super.read(b, off, len);
1:     }
1:     
1:     public int read()
1:     {
1:         if (isClosed)
1:             return -1;
1:         return super.read();
1:     }
1: 
1: }
============================================================================