2:eac0369: /*
1:985fc85: 
1:3abc7d4:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Key
1:985fc85: 
1:20cdca3:    Licensed to the Apache Software Foundation (ASF) under one or more
1:20cdca3:    contributor license agreements.  See the NOTICE file distributed with
1:20cdca3:    this work for additional information regarding copyright ownership.
1:20cdca3:    The ASF licenses this file to you under the Apache License, Version 2.0
1:20cdca3:    (the "License"); you may not use this file except in compliance with
1:20cdca3:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
4:eac0369: 
3:eac0369:  */
1:eac0369: 
1:3abc7d4: package org.apache.derby.impl.tools.dblook;
1:eac0369: 
1:eac0369: import java.sql.Connection;
1:eac0369: import java.sql.Statement;
1:eac0369: import java.sql.PreparedStatement;
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.SQLException;
1:eac0369: 
1:eac0369: import java.util.HashMap;
1:eac0369: import java.util.ArrayList;
1:eac0369: import java.util.StringTokenizer;
1:eac0369: 
1:eac0369: import org.apache.derby.tools.dblook;
1:eac0369: 
1:eac0369: public class DB_Key {
1:eac0369: 
1:eac0369: 	// Prepared statements used throughout the DDL
1:eac0369: 	// generation process.
1:eac0369: 	private static PreparedStatement getReferenceCols;
1:eac0369: 	private static boolean printedHeader;
1:eac0369: 
1:eac0369: 	/* ************************************************
1:eac0369: 	 * Generate the DDL for all keys in a given
1:eac0369: 	 * database.
1:eac0369: 	 * @param conn Connection to the source database.
1:eac0369: 	 * @return The DDL for the keys has been written
1:eac0369: 	 *  to output via Logs.java.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static void doKeys(Connection conn)
1:eac0369: 		throws SQLException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		printedHeader = false;
1:eac0369: 		getReferenceCols = conn.prepareStatement("SELECT CG.TABLEID, " +
1:eac0369: 			"CG.DESCRIPTOR FROM SYS.SYSCONGLOMERATES CG, SYS.SYSKEYS K WHERE " +
1:eac0369: 			"K.CONSTRAINTID = ? AND K.CONGLOMERATEID = CG.CONGLOMERATEID");
1:eac0369: 
1:eac0369: 		// Non-foreign keys, first.
1:eac0369: 		Statement stmt = conn.createStatement();
1:eac0369: 		ResultSet rs = stmt.executeQuery("SELECT CS.CONSTRAINTNAME, CS.TYPE, " +
1:3130800: 			"CS.TABLEID, CS.CONSTRAINTID, CS.SCHEMAID, CS.STATE, CG.DESCRIPTOR, CG.ISCONSTRAINT " +
1:eac0369: 			"FROM SYS.SYSCONSTRAINTS CS, SYS.SYSCONGLOMERATES CG, SYS.SYSKEYS K " +
1:eac0369: 			"WHERE CS.STATE != 'D' AND CS.CONSTRAINTID = K.CONSTRAINTID AND " +
1:eac0369: 			"CG.CONGLOMERATEID = K.CONGLOMERATEID ORDER BY CS.TABLEID");
1:eac0369: 		createKeysFrom(rs);
1:eac0369: 
1:eac0369: 		// Now, foreign keys.
1:eac0369: 		rs = stmt.executeQuery("SELECT CS.CONSTRAINTNAME, CS.TYPE, CS.TABLEID, " +
1:3130800: 			"CS.CONSTRAINTID, CS.SCHEMAID, CS.STATE, CG.DESCRIPTOR, CG.ISCONSTRAINT, " +
1:eac0369: 			"K.DELETERULE, K.UPDATERULE, K.KEYCONSTRAINTID FROM SYS.SYSCONSTRAINTS CS, " +
1:eac0369: 			"SYS.SYSCONGLOMERATES CG, SYS.SYSFOREIGNKEYS K WHERE CS.STATE != 'D' " +
1:eac0369: 			"AND CS.CONSTRAINTID = K.CONSTRAINTID AND CG.CONGLOMERATEID = " +
1:eac0369: 			"K.CONGLOMERATEID ORDER BY CS.TABLEID");
1:eac0369: 		createKeysFrom(rs);
1:eac0369: 
1:eac0369: 		getReferenceCols.close();
1:eac0369: 		stmt.close();
1:eac0369: 		rs.close();
1:eac0369: 		return;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* ************************************************
1:eac0369: 	 * Generate the DDL for the a set of keys in the
1:eac0369: 	 * source database.
1:eac0369: 	 * @param rs Info on keys to dump; either a set of non-
1:eac0369: 	 *  foreign keys (primary and unique), or a set of
1:eac0369: 	 *  foreign keys.
1:eac0369: 	 * @return DDL for the receive set of keys has
1:eac0369: 	 *  been written to output via Logs.java.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	private static void createKeysFrom (ResultSet rs)
1:eac0369: 		throws SQLException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		boolean firstTime = true;
1:eac0369: 		while (rs.next()) {
1:eac0369: 
1:3130800: 			if (!rs.getBoolean(8))
1:eac0369: 			// this row is NOT for a constraint, so skip it.
1:eac0369: 				continue;
1:eac0369: 
1:eac0369: 			String tableId = rs.getString(3);
1:eac0369: 			String tableName = dblook.lookupTableId(tableId);
1:eac0369: 			if (dblook.isExcludedTable(tableName))
1:eac0369: 			// table isn't included in user-given list; skip it.
1:eac0369: 				continue;
1:eac0369: 
1:eac0369: 			if (firstTime) {
1:eac0369: 				printHeader();
1:eac0369: 				if (rs.getString(2).equals("F"))
1:19c10b5: 					Logs.reportMessage("DBLOOK_ForeignHeader");
1:eac0369: 				else
1:19c10b5: 					Logs.reportMessage("DBLOOK_PrimUniqueHeader");
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			StringBuffer kString = createKeyString(tableId, tableName, rs);
1:eac0369: 
1:eac0369: 			if (rs.getString(2).equals("F")) {
1:eac0369: 			// foreign key; we have to figure out the references info.
1:3130800: 				kString.append(makeFKReferenceClause(rs.getString(11),
1:3130800: 					rs.getString(9).charAt(0), rs.getString(10).charAt(0)));
1:eac0369: 			}
1:eac0369: 
1:3130800:             makeDeferredClauses( kString, rs, 6 );
1:3130800: 
1:eac0369: 			Logs.writeToNewDDL(kString.toString());
1:eac0369: 			Logs.writeStmtEndToNewDDL();
1:eac0369: 			Logs.writeNewlineToNewDDL();
1:eac0369: 			firstTime = false;
1:eac0369: 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* ************************************************
1:eac0369: 	 * Generate DDL for a specific key.
1:eac0369: 	 * @param tableId Id of table on which the key exists.
1:eac0369: 	 * @param tableName Name of table on which the key exists.
1:eac0369: 	 * @param aKey Info on the key to generate.
1:eac0369: 	 * @return DDL for the specified key is returned as
1:eac0369: 	 *  a string.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	private static StringBuffer createKeyString (String tableId,
1:eac0369: 		String tableName, ResultSet aKey)
1:eac0369: 		throws SQLException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		StringBuffer sb = new StringBuffer ("ALTER TABLE ");
1:eac0369: 		sb.append(tableName);
1:eac0369: 		sb.append(" ADD");
1:eac0369: 
1:eac0369: 		String constraintName = dblook.addQuotes(
1:eac0369: 			dblook.expandDoubleQuotes(aKey.getString(1)));
1:eac0369: 		sb.append(" CONSTRAINT ");
1:eac0369: 		sb.append(constraintName);
1:eac0369: 		sb.append(expandKeyType(aKey.getString(2).charAt(0)));
1:eac0369: 
1:eac0369: 		// For keys, we need to get the column list.
1:eac0369: 		sb.append("(");
1:eac0369: 		sb.append(dblook.getColumnListFromDescription(
1:3130800: 			tableId, aKey.getString(7)));
1:eac0369: 		sb.append(")");
1:eac0369: 
1:eac0369: 		return sb;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* ************************************************
1:eac0369: 	 * Takes a character representing a key type and
1:eac0369: 	 * returns the full type name (as it will appear in
1:eac0369: 	 * in the DDL).
1:eac0369: 	 * @param keyType Key type as a char.
1:eac0369: 	 * @return Key type as a full string.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	private static String expandKeyType(char keyType) {
1:eac0369: 
1:eac0369: 		switch (keyType) {
1:eac0369: 			case 'P':
1:eac0369: 				return " PRIMARY KEY ";
1:eac0369: 			case 'U':
1:eac0369: 				return " UNIQUE ";
1:eac0369: 			case 'F':
1:eac0369: 				return " FOREIGN KEY ";
1:eac0369: 			default:
1:eac0369: 				// shouldn't happen.
1:eac0369: 				Logs.debug("INTERNAL ERROR: unexpected key type" +
1:eac0369: 					keyType, (String)null);
1:eac0369: 				return "";
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* ************************************************
1:eac0369: 	 * Generate the DDL for a foreign key's "REFERENCES"
1:eac0369: 	 * clause.
1:eac0369: 	 * @param constraintId Id of the foreign key constraint.
1:eac0369: 	 * @param deleteChar What action to take on delete.
1:eac0369: 	 * @param updateChar What action to take on update.
1:eac0369: 	 * @return The DDL for the references clause of the
1:eac0369: 	 *  foreign key, returned as a string.
1:eac0369: 	 ****/
1:eac0369: 	
1:eac0369: 	private static String makeFKReferenceClause(String constraintId,
1:eac0369: 		char deleteChar, char updateChar)
1:eac0369: 		throws SQLException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		StringBuffer refClause = new StringBuffer();
1:eac0369: 
1:eac0369: 		getReferenceCols.setString(1, constraintId);
1:eac0369: 		ResultSet colsRS = getReferenceCols.executeQuery();
1:eac0369: 		colsRS.next();
1:eac0369: 		refClause.append(" REFERENCES ");
1:eac0369: 		refClause.append(dblook.lookupTableId(colsRS.getString(1)));
1:eac0369: 		refClause.append(" (");
1:eac0369: 		refClause.append(dblook.getColumnListFromDescription(
1:eac0369: 			colsRS.getString(1), colsRS.getString(2)));
1:eac0369: 		refClause.append(")");
1:eac0369: 
1:eac0369: 		// On delete.
1:eac0369: 		refClause.append(" ON DELETE ");
1:eac0369: 		switch (deleteChar) {
1:eac0369:  			case 'R':	refClause.append("NO ACTION"); break;
1:eac0369:  			case 'S':	refClause.append("RESTRICT"); break;
1:eac0369:  			case 'C':	refClause.append("CASCADE"); break;
1:eac0369:  			case 'U':	refClause.append("SET NULL"); break;
1:eac0369: 			default:	// shouldn't happen.
1:eac0369: 						Logs.debug("INTERNAL ERROR: unexpected 'on-delete' action: " +
1:eac0369: 							deleteChar, (String)null);
1:eac0369: 						break;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// On update
1:eac0369: 		refClause.append(" ON UPDATE ");
1:eac0369: 		switch (updateChar) {
1:eac0369:  			case 'R':	refClause.append("NO ACTION"); break;
1:eac0369:  			case 'S':	refClause.append("RESTRICT"); break;
1:eac0369: 			default:	// shouldn't happen.
1:eac0369: 						Logs.debug("INTERNAL ERROR: unexpected 'on-update' action: " +
1:eac0369: 							updateChar, (String)null);
1:eac0369: 						break;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		colsRS.close();
1:eac0369: 		return refClause.toString();
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* ************************************************
1:3130800: 	 * Generate the clauses for deferred constraints.
1:3130800: 	 * @param buffer    Evolving buffer where we write additional clauses.
1:3130800: 	 * @param aKey Info on the key to generate.
1:3130800: 	 * @param stateColumn 1-based position of the STATE column in the result set
1:3130800: 	 * @return DDL for the specified key is returned as
1:3130800: 	 *  a string.
1:3130800: 	 ****/
1:3130800: 
1:3130800: 	static void makeDeferredClauses
1:3130800:         ( StringBuffer buffer, ResultSet constraint, int stateColumn )
1:3130800: 		throws SQLException
1:3130800: 	{
1:3130800:         String              state = constraint.getString( stateColumn );
1:3130800: 		String              constraintName =
1:3130800:             dblook.addQuotes( dblook.expandDoubleQuotes( constraint.getString( 1 ) ) );
1:3130800:         boolean             deferrable = false;
1:3130800:         boolean             initiallyDeferred = false;
1:3130800:         boolean             enforced = true;
1:3130800: 
1:3130800:         // cloned from SYSCONSTRAINTSRowFactory.buildDescriptor()
1:3130800: 		switch ( state.charAt( 0 ) )
1:3130800: 		{
1:3130800:         case 'E': 
1:3130800:             deferrable = false;
1:3130800:             initiallyDeferred = false;
1:3130800:             enforced = true;
1:3130800:             break;
1:3130800:         case 'D':
1:3130800:             deferrable = false;
1:3130800:             initiallyDeferred = false;
1:3130800:             enforced = false;
1:3130800:             break;
1:3130800:         case 'e':
1:3130800:             deferrable = true;
1:3130800:             initiallyDeferred = true;
1:3130800:             enforced = true;
1:3130800:             break;
1:3130800:         case 'd':
1:3130800:             deferrable = true;
1:3130800:             initiallyDeferred = true;
1:3130800:             enforced = false;
1:3130800:             break;
1:3130800:         case 'i':
1:3130800:             deferrable = true;
1:3130800:             initiallyDeferred = false;
1:3130800:             enforced = true;
1:3130800:             break;
1:3130800:         case 'j':
1:3130800:             deferrable = true;
1:3130800:             initiallyDeferred = false;
1:3130800:             enforced = false;
1:3130800:             break;
1:3130800:         default: 
1:3130800:             Logs.debug
1:3130800:                 (
1:3130800:                  "INTERNAL ERROR: Invalid state value '" + state + "' for constraint " + constraintName,
1:3130800:                  (String) null
1:3130800:                  );
1:3130800:         }
1:3130800: 
1:3130800:         if ( deferrable )
1:3130800:         {
1:3130800:             buffer.append( " DEFERRABLE " );
1:3130800:             if ( initiallyDeferred )
1:3130800:             {
1:3130800:                 buffer.append( " INITIALLY DEFERRED " );
1:3130800:             }
1:3130800:         }
1:3130800:     }
1:3130800: 
1:3130800: 
1:3130800: 	/* ************************************************
1:eac0369: 	 * Print a simple header to output.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	private static void printHeader() {
1:eac0369: 
1:eac0369: 		if (printedHeader)
1:eac0369: 			return;
1:eac0369: 
1:eac0369: 		Logs.reportString("----------------------------------------------");
1:19c10b5: 		Logs.reportMessage("DBLOOK_KeysHeader");
1:eac0369: 		Logs.reportString("----------------------------------------------\n");
1:eac0369: 		printedHeader = true;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:3130800
/////////////////////////////////////////////////////////////////////////
1: 			"CS.TABLEID, CS.CONSTRAINTID, CS.SCHEMAID, CS.STATE, CG.DESCRIPTOR, CG.ISCONSTRAINT " +
/////////////////////////////////////////////////////////////////////////
1: 			"CS.CONSTRAINTID, CS.SCHEMAID, CS.STATE, CG.DESCRIPTOR, CG.ISCONSTRAINT, " +
/////////////////////////////////////////////////////////////////////////
1: 			if (!rs.getBoolean(8))
/////////////////////////////////////////////////////////////////////////
1: 				kString.append(makeFKReferenceClause(rs.getString(11),
1: 					rs.getString(9).charAt(0), rs.getString(10).charAt(0)));
1:             makeDeferredClauses( kString, rs, 6 );
1: 
/////////////////////////////////////////////////////////////////////////
1: 			tableId, aKey.getString(7)));
/////////////////////////////////////////////////////////////////////////
1: 	 * Generate the clauses for deferred constraints.
1: 	 * @param buffer    Evolving buffer where we write additional clauses.
1: 	 * @param aKey Info on the key to generate.
1: 	 * @param stateColumn 1-based position of the STATE column in the result set
1: 	 * @return DDL for the specified key is returned as
1: 	 *  a string.
1: 	 ****/
1: 
1: 	static void makeDeferredClauses
1:         ( StringBuffer buffer, ResultSet constraint, int stateColumn )
1: 		throws SQLException
1: 	{
1:         String              state = constraint.getString( stateColumn );
1: 		String              constraintName =
1:             dblook.addQuotes( dblook.expandDoubleQuotes( constraint.getString( 1 ) ) );
1:         boolean             deferrable = false;
1:         boolean             initiallyDeferred = false;
1:         boolean             enforced = true;
1: 
1:         // cloned from SYSCONSTRAINTSRowFactory.buildDescriptor()
1: 		switch ( state.charAt( 0 ) )
1: 		{
1:         case 'E': 
1:             deferrable = false;
1:             initiallyDeferred = false;
1:             enforced = true;
1:             break;
1:         case 'D':
1:             deferrable = false;
1:             initiallyDeferred = false;
1:             enforced = false;
1:             break;
1:         case 'e':
1:             deferrable = true;
1:             initiallyDeferred = true;
1:             enforced = true;
1:             break;
1:         case 'd':
1:             deferrable = true;
1:             initiallyDeferred = true;
1:             enforced = false;
1:             break;
1:         case 'i':
1:             deferrable = true;
1:             initiallyDeferred = false;
1:             enforced = true;
1:             break;
1:         case 'j':
1:             deferrable = true;
1:             initiallyDeferred = false;
1:             enforced = false;
1:             break;
1:         default: 
1:             Logs.debug
1:                 (
1:                  "INTERNAL ERROR: Invalid state value '" + state + "' for constraint " + constraintName,
1:                  (String) null
1:                  );
1:         }
1: 
1:         if ( deferrable )
1:         {
1:             buffer.append( " DEFERRABLE " );
1:             if ( initiallyDeferred )
1:             {
1:                 buffer.append( " INITIALLY DEFERRED " );
1:             }
1:         }
1:     }
1: 
1: 
1: 	/* ************************************************
author:David Van Couvering
-------------------------------------------------------------------------------
commit:20cdca3
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:19c10b5
/////////////////////////////////////////////////////////////////////////
1: 					Logs.reportMessage("DBLOOK_ForeignHeader");
1: 					Logs.reportMessage("DBLOOK_PrimUniqueHeader");
/////////////////////////////////////////////////////////////////////////
1: 		Logs.reportMessage("DBLOOK_KeysHeader");
commit:3abc7d4
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Key
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.tools.dblook;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:985fc85
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derby.impl.tools.cslook.DB_Key
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.cslook
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
0: package org.apache.derby.impl.tools.cslook;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: import java.util.HashMap;
1: import java.util.ArrayList;
1: import java.util.StringTokenizer;
1: 
1: import org.apache.derby.tools.dblook;
1: 
1: public class DB_Key {
1: 
1: 	/* 
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1: 	// Prepared statements used throughout the DDL
1: 	// generation process.
1: 	private static PreparedStatement getReferenceCols;
1: 	private static boolean printedHeader;
1: 
1: 	/* ************************************************
1: 	 * Generate the DDL for all keys in a given
1: 	 * database.
1: 	 * @param conn Connection to the source database.
1: 	 * @return The DDL for the keys has been written
1: 	 *  to output via Logs.java.
1: 	 ****/
1: 
1: 	public static void doKeys(Connection conn)
1: 		throws SQLException
1: 	{
1: 
1: 		printedHeader = false;
1: 		getReferenceCols = conn.prepareStatement("SELECT CG.TABLEID, " +
1: 			"CG.DESCRIPTOR FROM SYS.SYSCONGLOMERATES CG, SYS.SYSKEYS K WHERE " +
1: 			"K.CONSTRAINTID = ? AND K.CONGLOMERATEID = CG.CONGLOMERATEID");
1: 
1: 		// Non-foreign keys, first.
1: 		Statement stmt = conn.createStatement();
1: 		ResultSet rs = stmt.executeQuery("SELECT CS.CONSTRAINTNAME, CS.TYPE, " +
0: 			"CS.TABLEID, CS.CONSTRAINTID, CS.SCHEMAID, CG.DESCRIPTOR, CG.ISCONSTRAINT " +
1: 			"FROM SYS.SYSCONSTRAINTS CS, SYS.SYSCONGLOMERATES CG, SYS.SYSKEYS K " +
1: 			"WHERE CS.STATE != 'D' AND CS.CONSTRAINTID = K.CONSTRAINTID AND " +
1: 			"CG.CONGLOMERATEID = K.CONGLOMERATEID ORDER BY CS.TABLEID");
1: 		createKeysFrom(rs);
1: 
1: 		// Now, foreign keys.
1: 		rs = stmt.executeQuery("SELECT CS.CONSTRAINTNAME, CS.TYPE, CS.TABLEID, " +
0: 			"CS.CONSTRAINTID, CS.SCHEMAID, CG.DESCRIPTOR, CG.ISCONSTRAINT, " +
1: 			"K.DELETERULE, K.UPDATERULE, K.KEYCONSTRAINTID FROM SYS.SYSCONSTRAINTS CS, " +
1: 			"SYS.SYSCONGLOMERATES CG, SYS.SYSFOREIGNKEYS K WHERE CS.STATE != 'D' " +
1: 			"AND CS.CONSTRAINTID = K.CONSTRAINTID AND CG.CONGLOMERATEID = " +
1: 			"K.CONGLOMERATEID ORDER BY CS.TABLEID");
1: 		createKeysFrom(rs);
1: 
1: 		getReferenceCols.close();
1: 		stmt.close();
1: 		rs.close();
1: 		return;
1: 
1: 	}
1: 
1: 	/* ************************************************
1: 	 * Generate the DDL for the a set of keys in the
1: 	 * source database.
1: 	 * @param rs Info on keys to dump; either a set of non-
1: 	 *  foreign keys (primary and unique), or a set of
1: 	 *  foreign keys.
1: 	 * @return DDL for the receive set of keys has
1: 	 *  been written to output via Logs.java.
1: 	 ****/
1: 
1: 	private static void createKeysFrom (ResultSet rs)
1: 		throws SQLException
1: 	{
1: 
1: 		boolean firstTime = true;
1: 		while (rs.next()) {
1: 
0: 			if (!rs.getBoolean(7))
1: 			// this row is NOT for a constraint, so skip it.
1: 				continue;
1: 
1: 			String tableId = rs.getString(3);
1: 			String tableName = dblook.lookupTableId(tableId);
1: 			if (dblook.isExcludedTable(tableName))
1: 			// table isn't included in user-given list; skip it.
1: 				continue;
1: 
1: 			if (firstTime) {
1: 				printHeader();
1: 				if (rs.getString(2).equals("F"))
0: 					Logs.reportString(" Foreign\n");
1: 				else
0: 					Logs.reportString(" Primary/unique\n");
1: 			}
1: 
1: 			StringBuffer kString = createKeyString(tableId, tableName, rs);
1: 
1: 			if (rs.getString(2).equals("F")) {
1: 			// foreign key; we have to figure out the references info.
0: 				kString.append(makeFKReferenceClause(rs.getString(10),
0: 					rs.getString(8).charAt(0), rs.getString(9).charAt(0)));
1: 			}
1: 
1: 			Logs.writeToNewDDL(kString.toString());
1: 			Logs.writeStmtEndToNewDDL();
1: 			Logs.writeNewlineToNewDDL();
1: 			firstTime = false;
1: 
1: 		}
1: 
1: 		return;
1: 
1: 	}
1: 
1: 	/* ************************************************
1: 	 * Generate DDL for a specific key.
1: 	 * @param tableId Id of table on which the key exists.
1: 	 * @param tableName Name of table on which the key exists.
1: 	 * @param aKey Info on the key to generate.
1: 	 * @return DDL for the specified key is returned as
1: 	 *  a string.
1: 	 ****/
1: 
1: 	private static StringBuffer createKeyString (String tableId,
1: 		String tableName, ResultSet aKey)
1: 		throws SQLException
1: 	{
1: 
1: 		StringBuffer sb = new StringBuffer ("ALTER TABLE ");
1: 		sb.append(tableName);
1: 		sb.append(" ADD");
1: 
1: 		String constraintName = dblook.addQuotes(
1: 			dblook.expandDoubleQuotes(aKey.getString(1)));
1: 		sb.append(" CONSTRAINT ");
1: 		sb.append(constraintName);
1: 		sb.append(expandKeyType(aKey.getString(2).charAt(0)));
1: 
1: 		// For keys, we need to get the column list.
1: 		sb.append("(");
1: 		sb.append(dblook.getColumnListFromDescription(
0: 			tableId, aKey.getString(6)));
1: 		sb.append(")");
1: 
1: 		return sb;
1: 
1: 	}
1: 
1: 	/* ************************************************
1: 	 * Takes a character representing a key type and
1: 	 * returns the full type name (as it will appear in
1: 	 * in the DDL).
1: 	 * @param keyType Key type as a char.
1: 	 * @return Key type as a full string.
1: 	 ****/
1: 
1: 	private static String expandKeyType(char keyType) {
1: 
1: 		switch (keyType) {
1: 			case 'P':
1: 				return " PRIMARY KEY ";
1: 			case 'U':
1: 				return " UNIQUE ";
1: 			case 'F':
1: 				return " FOREIGN KEY ";
1: 			default:
1: 				// shouldn't happen.
1: 				Logs.debug("INTERNAL ERROR: unexpected key type" +
1: 					keyType, (String)null);
1: 				return "";
1: 		}
1: 
1: 	}
1: 
1: 	/* ************************************************
1: 	 * Generate the DDL for a foreign key's "REFERENCES"
1: 	 * clause.
1: 	 * @param constraintId Id of the foreign key constraint.
1: 	 * @param deleteChar What action to take on delete.
1: 	 * @param updateChar What action to take on update.
1: 	 * @return The DDL for the references clause of the
1: 	 *  foreign key, returned as a string.
1: 	 ****/
1: 	
1: 	private static String makeFKReferenceClause(String constraintId,
1: 		char deleteChar, char updateChar)
1: 		throws SQLException
1: 	{
1: 
1: 		StringBuffer refClause = new StringBuffer();
1: 
1: 		getReferenceCols.setString(1, constraintId);
1: 		ResultSet colsRS = getReferenceCols.executeQuery();
1: 		colsRS.next();
1: 		refClause.append(" REFERENCES ");
1: 		refClause.append(dblook.lookupTableId(colsRS.getString(1)));
1: 		refClause.append(" (");
1: 		refClause.append(dblook.getColumnListFromDescription(
1: 			colsRS.getString(1), colsRS.getString(2)));
1: 		refClause.append(")");
1: 
1: 		// On delete.
1: 		refClause.append(" ON DELETE ");
1: 		switch (deleteChar) {
1:  			case 'R':	refClause.append("NO ACTION"); break;
1:  			case 'S':	refClause.append("RESTRICT"); break;
1:  			case 'C':	refClause.append("CASCADE"); break;
1:  			case 'U':	refClause.append("SET NULL"); break;
1: 			default:	// shouldn't happen.
1: 						Logs.debug("INTERNAL ERROR: unexpected 'on-delete' action: " +
1: 							deleteChar, (String)null);
1: 						break;
1: 		}
1: 
1: 		// On update
1: 		refClause.append(" ON UPDATE ");
1: 		switch (updateChar) {
1:  			case 'R':	refClause.append("NO ACTION"); break;
1:  			case 'S':	refClause.append("RESTRICT"); break;
1: 			default:	// shouldn't happen.
1: 						Logs.debug("INTERNAL ERROR: unexpected 'on-update' action: " +
1: 							updateChar, (String)null);
1: 						break;
1: 		}
1: 
1: 		colsRS.close();
1: 		return refClause.toString();
1: 
1: 	}
1: 
1: 	/* ************************************************
1: 	 * Print a simple header to output.
1: 	 ****/
1: 
1: 	private static void printHeader() {
1: 
1: 		if (printedHeader)
1: 			return;
1: 
1: 		Logs.reportString("----------------------------------------------");
0: 		Logs.reportMessage("CSLOOK_Header", "keys");
1: 		Logs.reportString("----------------------------------------------\n");
1: 		printedHeader = true;
1: 
1: 	}
1: 
1: }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:89cd70b
/////////////////////////////////////////////////////////////////////////
0: 					Logs.reportMessage("CSLOOK_ForeignHeader");
0: 					Logs.reportMessage("CSLOOK_PrimUniqueHeader");
/////////////////////////////////////////////////////////////////////////
0: 		Logs.reportMessage("CSLOOK_KeysHeader");
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.cslook
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.cslook;
0: 
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: 
0: import java.util.HashMap;
0: import java.util.ArrayList;
0: import java.util.StringTokenizer;
0: 
0: import org.apache.derby.tools.dblook;
0: 
0: public class DB_Key {
0: 
0: 	/* 
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0: 	// Prepared statements used throughout the DDL
0: 	// generation process.
0: 	private static PreparedStatement getReferenceCols;
0: 	private static boolean printedHeader;
0: 
0: 	/* ************************************************
0: 	 * Generate the DDL for all keys in a given
0: 	 * database.
0: 	 * @param conn Connection to the source database.
0: 	 * @return The DDL for the keys has been written
0: 	 *  to output via Logs.java.
0: 	 ****/
0: 
0: 	public static void doKeys(Connection conn)
0: 		throws SQLException
0: 	{
0: 
0: 		printedHeader = false;
0: 		getReferenceCols = conn.prepareStatement("SELECT CG.TABLEID, " +
0: 			"CG.DESCRIPTOR FROM SYS.SYSCONGLOMERATES CG, SYS.SYSKEYS K WHERE " +
0: 			"K.CONSTRAINTID = ? AND K.CONGLOMERATEID = CG.CONGLOMERATEID");
0: 
0: 		// Non-foreign keys, first.
0: 		Statement stmt = conn.createStatement();
0: 		ResultSet rs = stmt.executeQuery("SELECT CS.CONSTRAINTNAME, CS.TYPE, " +
0: 			"CS.TABLEID, CS.CONSTRAINTID, CS.SCHEMAID, CG.DESCRIPTOR, CG.ISCONSTRAINT " +
0: 			"FROM SYS.SYSCONSTRAINTS CS, SYS.SYSCONGLOMERATES CG, SYS.SYSKEYS K " +
0: 			"WHERE CS.STATE != 'D' AND CS.CONSTRAINTID = K.CONSTRAINTID AND " +
0: 			"CG.CONGLOMERATEID = K.CONGLOMERATEID ORDER BY CS.TABLEID");
0: 		createKeysFrom(rs);
0: 
0: 		// Now, foreign keys.
0: 		rs = stmt.executeQuery("SELECT CS.CONSTRAINTNAME, CS.TYPE, CS.TABLEID, " +
0: 			"CS.CONSTRAINTID, CS.SCHEMAID, CG.DESCRIPTOR, CG.ISCONSTRAINT, " +
0: 			"K.DELETERULE, K.UPDATERULE, K.KEYCONSTRAINTID FROM SYS.SYSCONSTRAINTS CS, " +
0: 			"SYS.SYSCONGLOMERATES CG, SYS.SYSFOREIGNKEYS K WHERE CS.STATE != 'D' " +
0: 			"AND CS.CONSTRAINTID = K.CONSTRAINTID AND CG.CONGLOMERATEID = " +
0: 			"K.CONGLOMERATEID ORDER BY CS.TABLEID");
0: 		createKeysFrom(rs);
0: 
0: 		getReferenceCols.close();
0: 		stmt.close();
0: 		rs.close();
0: 		return;
0: 
0: 	}
0: 
0: 	/* ************************************************
0: 	 * Generate the DDL for the a set of keys in the
0: 	 * source database.
0: 	 * @param rs Info on keys to dump; either a set of non-
0: 	 *  foreign keys (primary and unique), or a set of
0: 	 *  foreign keys.
0: 	 * @return DDL for the receive set of keys has
0: 	 *  been written to output via Logs.java.
0: 	 ****/
0: 
0: 	private static void createKeysFrom (ResultSet rs)
0: 		throws SQLException
0: 	{
0: 
0: 		boolean firstTime = true;
0: 		while (rs.next()) {
0: 
0: 			if (!rs.getBoolean(7))
0: 			// this row is NOT for a constraint, so skip it.
0: 				continue;
0: 
0: 			String tableId = rs.getString(3);
0: 			String tableName = dblook.lookupTableId(tableId);
0: 			if (dblook.isExcludedTable(tableName))
0: 			// table isn't included in user-given list; skip it.
0: 				continue;
0: 
0: 			if (firstTime) {
0: 				printHeader();
0: 				if (rs.getString(2).equals("F"))
0: 					Logs.reportString(" Foreign\n");
0: 				else
0: 					Logs.reportString(" Primary/unique\n");
0: 			}
0: 
0: 			StringBuffer kString = createKeyString(tableId, tableName, rs);
0: 
0: 			if (rs.getString(2).equals("F")) {
0: 			// foreign key; we have to figure out the references info.
0: 				kString.append(makeFKReferenceClause(rs.getString(10),
0: 					rs.getString(8).charAt(0), rs.getString(9).charAt(0)));
0: 			}
0: 
0: 			Logs.writeToNewDDL(kString.toString());
0: 			Logs.writeStmtEndToNewDDL();
0: 			Logs.writeNewlineToNewDDL();
0: 			firstTime = false;
0: 
0: 		}
0: 
0: 		return;
0: 
0: 	}
0: 
0: 	/* ************************************************
0: 	 * Generate DDL for a specific key.
0: 	 * @param tableId Id of table on which the key exists.
0: 	 * @param tableName Name of table on which the key exists.
0: 	 * @param aKey Info on the key to generate.
0: 	 * @return DDL for the specified key is returned as
0: 	 *  a string.
0: 	 ****/
0: 
0: 	private static StringBuffer createKeyString (String tableId,
0: 		String tableName, ResultSet aKey)
0: 		throws SQLException
0: 	{
0: 
0: 		StringBuffer sb = new StringBuffer ("ALTER TABLE ");
0: 		sb.append(tableName);
0: 		sb.append(" ADD");
0: 
0: 		String constraintName = dblook.addQuotes(
0: 			dblook.expandDoubleQuotes(aKey.getString(1)));
0: 		sb.append(" CONSTRAINT ");
0: 		sb.append(constraintName);
0: 		sb.append(expandKeyType(aKey.getString(2).charAt(0)));
0: 
0: 		// For keys, we need to get the column list.
0: 		sb.append("(");
0: 		sb.append(dblook.getColumnListFromDescription(
0: 			tableId, aKey.getString(6)));
0: 		sb.append(")");
0: 
0: 		return sb;
0: 
0: 	}
0: 
0: 	/* ************************************************
0: 	 * Takes a character representing a key type and
0: 	 * returns the full type name (as it will appear in
0: 	 * in the DDL).
0: 	 * @param keyType Key type as a char.
0: 	 * @return Key type as a full string.
0: 	 ****/
0: 
0: 	private static String expandKeyType(char keyType) {
0: 
0: 		switch (keyType) {
0: 			case 'P':
0: 				return " PRIMARY KEY ";
0: 			case 'U':
0: 				return " UNIQUE ";
0: 			case 'F':
0: 				return " FOREIGN KEY ";
0: 			default:
0: 				// shouldn't happen.
0: 				Logs.debug("INTERNAL ERROR: unexpected key type" +
0: 					keyType, (String)null);
0: 				return "";
0: 		}
0: 
0: 	}
0: 
0: 	/* ************************************************
0: 	 * Generate the DDL for a foreign key's "REFERENCES"
0: 	 * clause.
0: 	 * @param constraintId Id of the foreign key constraint.
0: 	 * @param deleteChar What action to take on delete.
0: 	 * @param updateChar What action to take on update.
0: 	 * @return The DDL for the references clause of the
0: 	 *  foreign key, returned as a string.
0: 	 ****/
0: 	
0: 	private static String makeFKReferenceClause(String constraintId,
0: 		char deleteChar, char updateChar)
0: 		throws SQLException
0: 	{
0: 
0: 		StringBuffer refClause = new StringBuffer();
0: 
0: 		getReferenceCols.setString(1, constraintId);
0: 		ResultSet colsRS = getReferenceCols.executeQuery();
0: 		colsRS.next();
0: 		refClause.append(" REFERENCES ");
0: 		refClause.append(dblook.lookupTableId(colsRS.getString(1)));
0: 		refClause.append(" (");
0: 		refClause.append(dblook.getColumnListFromDescription(
0: 			colsRS.getString(1), colsRS.getString(2)));
0: 		refClause.append(")");
0: 
0: 		// On delete.
0: 		refClause.append(" ON DELETE ");
0: 		switch (deleteChar) {
0:  			case 'R':	refClause.append("NO ACTION"); break;
0:  			case 'S':	refClause.append("RESTRICT"); break;
0:  			case 'C':	refClause.append("CASCADE"); break;
0:  			case 'U':	refClause.append("SET NULL"); break;
0: 			default:	// shouldn't happen.
0: 						Logs.debug("INTERNAL ERROR: unexpected 'on-delete' action: " +
0: 							deleteChar, (String)null);
0: 						break;
0: 		}
0: 
0: 		// On update
0: 		refClause.append(" ON UPDATE ");
0: 		switch (updateChar) {
0:  			case 'R':	refClause.append("NO ACTION"); break;
0:  			case 'S':	refClause.append("RESTRICT"); break;
0: 			default:	// shouldn't happen.
0: 						Logs.debug("INTERNAL ERROR: unexpected 'on-update' action: " +
0: 							updateChar, (String)null);
0: 						break;
0: 		}
0: 
0: 		colsRS.close();
0: 		return refClause.toString();
0: 
0: 	}
0: 
0: 	/* ************************************************
0: 	 * Print a simple header to output.
0: 	 ****/
0: 
0: 	private static void printHeader() {
0: 
0: 		if (printedHeader)
0: 			return;
0: 
0: 		Logs.reportString("----------------------------------------------");
0: 		Logs.reportMessage("CSLOOK_Header", "keys");
0: 		Logs.reportString("----------------------------------------------\n");
0: 		printedHeader = true;
0: 
0: 	}
0: 
0: }
============================================================================