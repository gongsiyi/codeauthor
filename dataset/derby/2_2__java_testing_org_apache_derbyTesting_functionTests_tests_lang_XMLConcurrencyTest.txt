1:118ac26: /*
1:118ac26:  *
1:118ac26:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.XMLConcurrencyTest
1:118ac26:  *
1:118ac26:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:118ac26:  * contributor license agreements.  See the NOTICE file distributed with
1:118ac26:  * this work for additional information regarding copyright ownership.
1:118ac26:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:118ac26:  * (the "License"); you may not use this file except in compliance with
1:118ac26:  * the License.  You may obtain a copy of the License at
1:118ac26:  *
1:118ac26:  *    http://www.apache.org/licenses/LICENSE-2.0
1:118ac26:  *
1:118ac26:  * Unless required by applicable law or agreed to in writing,
1:118ac26:  * software distributed under the License is distributed on an
1:118ac26:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:118ac26:  * either express or implied. See the License for the specific
1:118ac26:  * language governing permissions and limitations under the License.
1:118ac26:  */
1:118ac26: package org.apache.derbyTesting.functionTests.tests.lang;
1:118ac26: 
1:118ac26: import java.sql.Connection;
1:118ac26: import java.sql.PreparedStatement;
1:118ac26: import java.sql.SQLException;
1:118ac26: import java.sql.Statement;
1:118ac26: import junit.framework.Test;
1:118ac26: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:118ac26: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:118ac26: import org.apache.derbyTesting.junit.JDBC;
1:118ac26: import org.apache.derbyTesting.junit.TestConfiguration;
1:118ac26: import org.apache.derbyTesting.junit.XML;
1:118ac26: 
1:118ac26: /**
1:118ac26:  * Test that XML operators can be invoked by multiple threads concurrently.
1:118ac26:  * Regression test case for DERBY-3870.
1:118ac26:  */
1:118ac26: public class XMLConcurrencyTest extends BaseJDBCTestCase {
1:118ac26: 
1:118ac26:     /** Create an instance of this test case. */
1:118ac26:     public XMLConcurrencyTest(String name) {
1:118ac26:         super(name);
1:118ac26:     }
1:118ac26: 
1:118ac26:     /** Create a suite of all test cases in this class. */
1:118ac26:     public static Test suite() {
1:118ac26:         // XML operators are engine functionality, so run this test in
1:118ac26:         // embedded mode only.
1:118ac26:         if (XML.classpathMeetsXMLReqs()) {
1:118ac26:             return new CleanDatabaseTestSetup(
1:118ac26:                 TestConfiguration.embeddedSuite(XMLConcurrencyTest.class)) {
1:118ac26:                     protected void decorateSQL(Statement s)
1:118ac26:                             throws SQLException {
1:118ac26:                         createTestTable(s);
1:118ac26:                     }
1:118ac26:                 };
1:118ac26:         } else {
1:1ae02c9:             return new BaseTestSuite("XMLConcurrencyTest - empty");
1:118ac26:         }
1:118ac26:     }
1:118ac26: 
1:118ac26:     /**
1:118ac26:      * Start four threads that execute queries that use all the XML operators.
1:118ac26:      * If each thread manages 100 iterations without failing, running
1:118ac26:      * concurrently with the other threads, the test case passes.
1:118ac26:      */
1:118ac26:     public void testConcurrency() throws Exception {
1:118ac26:         WorkerThread[] allThreads = new WorkerThread[4];
1:118ac26:         for (int i = 0; i < allThreads.length; i++) {
1:118ac26:             allThreads[i] = new WorkerThread(openDefaultConnection(), 100);
1:118ac26:             allThreads[i].start();
1:118ac26:         }
1:118ac26: 
1:118ac26:         for (int i = 0; i < allThreads.length; i++) {
1:118ac26:             allThreads[i].join();
1:118ac26:             Throwable t = allThreads[i].throwable;
1:118ac26:             if (t != null) {
1:118ac26:                 fail("Worker thread failed", t);
1:118ac26:             }
1:118ac26:         }
1:118ac26:     }
1:118ac26: 
1:118ac26:     /**
1:118ac26:      * A thread class that does the actual work in the test.
1:118ac26:      */
1:118ac26:     private class WorkerThread extends Thread {
1:118ac26:         final Connection conn;
1:118ac26:         final int iterations;
1:118ac26:         Throwable throwable;
1:118ac26: 
1:118ac26:         WorkerThread(Connection conn, int iterations) {
1:118ac26:             this.conn = conn;
1:118ac26:             this.iterations = iterations;
1:118ac26:         }
1:118ac26: 
1:118ac26:         public void run() {
1:118ac26:             try {
1:118ac26:                 runXMLTest(conn, iterations);
1:118ac26:             } catch (Throwable t) {
1:118ac26:                 throwable = t;
1:118ac26:             }
1:118ac26:         }
1:118ac26:     }
1:118ac26: 
1:118ac26:     /**
1:118ac26:      * <p>
1:118ac26:      * Create a table with test data. The table contains three columns:
1:118ac26:      * <p>
1:118ac26:      *
1:118ac26:      * <ol>
1:118ac26:      * <li>
1:118ac26:      * An ID column used to identify the rows and to give a stable ordering.
1:118ac26:      * </li>
1:118ac26:      * <li>
1:118ac26:      * A VARCHAR column holding the string representation of an XML document.
1:118ac26:      * </li>
1:118ac26:      * <li>
1:118ac26:      * An XML column holding the XML representation of the document in the
1:118ac26:      * VARCHAR column.
1:118ac26:      * </li>
1:118ac26:      * </ol>
1:118ac26:      */
1:118ac26:     private static void createTestTable(Statement s) throws SQLException {
1:118ac26:         s.executeUpdate("create table t (id int primary key " +
1:118ac26:                 "generated always as identity, vc varchar(100), " +
1:118ac26:                 "x generated always as " +
1:118ac26:                 "(xmlparse(document vc preserve whitespace)))");
1:118ac26: 
1:118ac26:         PreparedStatement ins = s.getConnection().prepareStatement(
1:118ac26:                 "insert into t(vc) values ?");
1:118ac26: 
1:118ac26:         String[] docs = {
1:118ac26:             "<doc><a x='1'>abc</a><b x='2'>def</b></doc>",
1:118ac26:             "<doc><a x='2'>abc</a><b x='3'>def</b></doc>",
1:118ac26:             "<doc/>",
1:118ac26:             "<a/>",
1:118ac26:             null,
1:118ac26:         };
1:118ac26: 
1:118ac26:         for (int i = 0; i < docs.length; i++) {
1:118ac26:             ins.setString(1, docs[i]);
1:118ac26:             ins.executeUpdate();
1:118ac26:         }
1:118ac26: 
1:118ac26:         ins.close();
1:118ac26:     }
1:118ac26: 
1:118ac26:     /**
1:118ac26:      * Do the work for one of the worker threads. Perform queries that use
1:118ac26:      * all the XML operators. Repeat the queries the specified number of times.
1:118ac26:      *
1:118ac26:      * @param conn the connection on which to execute the queries
1:118ac26:      * @param iterations the number of times each query should be executed
1:118ac26:      */
1:118ac26:     private static void runXMLTest(Connection conn, int iterations)
1:118ac26:             throws SQLException {
1:118ac26:         // Query that tests XMLQUERY and XMLSERIALIZE. Count the number of
1:118ac26:         // nodes with an attribute named x with a value greater than 1.
1:118ac26:         PreparedStatement ps1 = conn.prepareStatement(
1:118ac26:             "select id, xmlserialize(" +
1:118ac26:             "xmlquery('count(//*[@x>1])' passing by ref x empty on empty) " +
1:118ac26:             "as varchar(100)) from t order by id");
1:118ac26: 
1:118ac26:         String[][] expected1 = {
1:118ac26:             {"1", "1"}, {"2", "2"}, {"3", "0"}, {"4", "0"}, {"5", null}
1:118ac26:         };
1:118ac26: 
1:118ac26:         // Query that tests XMLEXISTS. Find all documents containing a "doc"
1:118ac26:         // node with a nested "a" node whose x attribute is 2.
1:118ac26:         PreparedStatement ps2 = conn.prepareStatement(
1:118ac26:             "select id from t where " +
1:118ac26:             "xmlexists('/doc/a[@x=2]' passing by ref x) " +
1:118ac26:             "order by id");
1:118ac26: 
1:118ac26:         String expected2 = "2";
1:118ac26: 
1:118ac26:         // Query that tests XMLPARSE and XMLSERIALIZE.
1:118ac26:         PreparedStatement ps3 = conn.prepareStatement(
1:118ac26:             "select count(*) from t where " +
1:118ac26:             "xmlserialize(xmlparse(document vc preserve whitespace) " +
1:118ac26:             "as varchar(100)) = " +
1:118ac26:             "xmlserialize(x as varchar(100))");
1:118ac26: 
1:118ac26:         String expected3 = "4";
1:118ac26: 
1:118ac26:         for (int i = 0; i < iterations; i++) {
1:118ac26:             JDBC.assertFullResultSet(ps1.executeQuery(), expected1);
1:118ac26:             JDBC.assertSingleValueResultSet(ps2.executeQuery(), expected2);
1:118ac26:             JDBC.assertSingleValueResultSet(ps3.executeQuery(), expected3);
1:118ac26:         }
1:118ac26: 
1:118ac26:         ps1.close();
1:118ac26:         ps2.close();
1:118ac26:         ps3.close();
1:118ac26:         conn.close();
1:118ac26:     }
1:118ac26: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite("XMLConcurrencyTest - empty");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:118ac26
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.XMLConcurrencyTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.XML;
1: 
1: /**
1:  * Test that XML operators can be invoked by multiple threads concurrently.
1:  * Regression test case for DERBY-3870.
1:  */
1: public class XMLConcurrencyTest extends BaseJDBCTestCase {
1: 
1:     /** Create an instance of this test case. */
1:     public XMLConcurrencyTest(String name) {
1:         super(name);
1:     }
1: 
1:     /** Create a suite of all test cases in this class. */
1:     public static Test suite() {
1:         // XML operators are engine functionality, so run this test in
1:         // embedded mode only.
1:         if (XML.classpathMeetsXMLReqs()) {
1:             return new CleanDatabaseTestSetup(
1:                 TestConfiguration.embeddedSuite(XMLConcurrencyTest.class)) {
1:                     protected void decorateSQL(Statement s)
1:                             throws SQLException {
1:                         createTestTable(s);
1:                     }
1:                 };
1:         } else {
0:             return new TestSuite("XMLConcurrencyTest - empty");
1:         }
1:     }
1: 
1:     /**
1:      * Start four threads that execute queries that use all the XML operators.
1:      * If each thread manages 100 iterations without failing, running
1:      * concurrently with the other threads, the test case passes.
1:      */
1:     public void testConcurrency() throws Exception {
1:         WorkerThread[] allThreads = new WorkerThread[4];
1:         for (int i = 0; i < allThreads.length; i++) {
1:             allThreads[i] = new WorkerThread(openDefaultConnection(), 100);
1:             allThreads[i].start();
1:         }
1: 
1:         for (int i = 0; i < allThreads.length; i++) {
1:             allThreads[i].join();
1:             Throwable t = allThreads[i].throwable;
1:             if (t != null) {
1:                 fail("Worker thread failed", t);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * A thread class that does the actual work in the test.
1:      */
1:     private class WorkerThread extends Thread {
1:         final Connection conn;
1:         final int iterations;
1:         Throwable throwable;
1: 
1:         WorkerThread(Connection conn, int iterations) {
1:             this.conn = conn;
1:             this.iterations = iterations;
1:         }
1: 
1:         public void run() {
1:             try {
1:                 runXMLTest(conn, iterations);
1:             } catch (Throwable t) {
1:                 throwable = t;
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Create a table with test data. The table contains three columns:
1:      * <p>
1:      *
1:      * <ol>
1:      * <li>
1:      * An ID column used to identify the rows and to give a stable ordering.
1:      * </li>
1:      * <li>
1:      * A VARCHAR column holding the string representation of an XML document.
1:      * </li>
1:      * <li>
1:      * An XML column holding the XML representation of the document in the
1:      * VARCHAR column.
1:      * </li>
1:      * </ol>
1:      */
1:     private static void createTestTable(Statement s) throws SQLException {
1:         s.executeUpdate("create table t (id int primary key " +
1:                 "generated always as identity, vc varchar(100), " +
1:                 "x generated always as " +
1:                 "(xmlparse(document vc preserve whitespace)))");
1: 
1:         PreparedStatement ins = s.getConnection().prepareStatement(
1:                 "insert into t(vc) values ?");
1: 
1:         String[] docs = {
1:             "<doc><a x='1'>abc</a><b x='2'>def</b></doc>",
1:             "<doc><a x='2'>abc</a><b x='3'>def</b></doc>",
1:             "<doc/>",
1:             "<a/>",
1:             null,
1:         };
1: 
1:         for (int i = 0; i < docs.length; i++) {
1:             ins.setString(1, docs[i]);
1:             ins.executeUpdate();
1:         }
1: 
1:         ins.close();
1:     }
1: 
1:     /**
1:      * Do the work for one of the worker threads. Perform queries that use
1:      * all the XML operators. Repeat the queries the specified number of times.
1:      *
1:      * @param conn the connection on which to execute the queries
1:      * @param iterations the number of times each query should be executed
1:      */
1:     private static void runXMLTest(Connection conn, int iterations)
1:             throws SQLException {
1:         // Query that tests XMLQUERY and XMLSERIALIZE. Count the number of
1:         // nodes with an attribute named x with a value greater than 1.
1:         PreparedStatement ps1 = conn.prepareStatement(
1:             "select id, xmlserialize(" +
1:             "xmlquery('count(//*[@x>1])' passing by ref x empty on empty) " +
1:             "as varchar(100)) from t order by id");
1: 
1:         String[][] expected1 = {
1:             {"1", "1"}, {"2", "2"}, {"3", "0"}, {"4", "0"}, {"5", null}
1:         };
1: 
1:         // Query that tests XMLEXISTS. Find all documents containing a "doc"
1:         // node with a nested "a" node whose x attribute is 2.
1:         PreparedStatement ps2 = conn.prepareStatement(
1:             "select id from t where " +
1:             "xmlexists('/doc/a[@x=2]' passing by ref x) " +
1:             "order by id");
1: 
1:         String expected2 = "2";
1: 
1:         // Query that tests XMLPARSE and XMLSERIALIZE.
1:         PreparedStatement ps3 = conn.prepareStatement(
1:             "select count(*) from t where " +
1:             "xmlserialize(xmlparse(document vc preserve whitespace) " +
1:             "as varchar(100)) = " +
1:             "xmlserialize(x as varchar(100))");
1: 
1:         String expected3 = "4";
1: 
1:         for (int i = 0; i < iterations; i++) {
1:             JDBC.assertFullResultSet(ps1.executeQuery(), expected1);
1:             JDBC.assertSingleValueResultSet(ps2.executeQuery(), expected2);
1:             JDBC.assertSingleValueResultSet(ps3.executeQuery(), expected3);
1:         }
1: 
1:         ps1.close();
1:         ps2.close();
1:         ps3.close();
1:         conn.close();
1:     }
1: }
============================================================================