1:cbd0ff1: /*
1:b64ccfc:  
1:cbd0ff1:    Derby - Class org.apache.derby.client.net.ClientJDBCObjectFactoryImpl
7:cbd0ff1:  
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:cbd0ff1:  
1:cbd0ff1:       http://www.apache.org/licenses/LICENSE-2.0
1:cbd0ff1:  
1:cbd0ff1:    Unless required by applicable law or agreed to in writing, software
1:cbd0ff1:    distributed under the License is distributed on an "AS IS" BASIS,
1:cbd0ff1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cbd0ff1:    See the License for the specific language governing permissions and
1:cbd0ff1:    limitations under the License.
1:cbd0ff1:  
5:cbd0ff1:  */
1:b13b17c: 
1:cbd0ff1: package org.apache.derby.client.net;
1:2e7a2af: 
1:b13b17c: import java.sql.BatchUpdateException;
1:69e3d06: import java.sql.CallableStatement;
1:69e3d06: import java.sql.PreparedStatement;
1:cbd0ff1: import java.sql.SQLException;
1:b13b17c: import java.util.Properties;
1:cbd0ff1: import org.apache.derby.client.ClientPooledConnection;
1:8fcae92: import org.apache.derby.client.ClientXAConnection;
1:1beab6c: import org.apache.derby.client.am.CachingLogicalConnection;
1:69e3d06: import org.apache.derby.client.am.ClientCallableStatement;
1:cbd0ff1: import org.apache.derby.client.am.ClientJDBCObjectFactory;
1:b54918e: import org.apache.derby.client.am.ClientMessageId;
1:b64ccfc: import org.apache.derby.client.am.LogicalConnection;
1:69e3d06: import org.apache.derby.client.am.ClientParameterMetaData;
1:69e3d06: import org.apache.derby.client.am.ClientPreparedStatement;
1:1beab6c: import org.apache.derby.client.am.LogicalCallableStatement;
1:1beab6c: import org.apache.derby.client.am.LogicalPreparedStatement;
1:cbd0ff1: import org.apache.derby.client.am.LogWriter;
1:cbd0ff1: import org.apache.derby.client.am.Agent;
1:cbd0ff1: import org.apache.derby.client.am.Section;
1:69e3d06: import org.apache.derby.client.am.ClientStatement;
1:cbd0ff1: import org.apache.derby.client.am.SqlException;
1:cbd0ff1: import org.apache.derby.client.am.Cursor;
1:1beab6c: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1:1beab6c: import org.apache.derby.client.am.stmtcache.StatementKey;
1:2e7a2af: import org.apache.derby.client.am.ColumnMetaData;
1:69e3d06: import org.apache.derby.client.am.ClientConnection;
1:69e3d06: import org.apache.derby.client.am.ClientDatabaseMetaData;
1:b13b17c: import org.apache.derby.client.am.MaterialStatement;
1:69e3d06: import org.apache.derby.client.am.ClientResultSet;
1:d6cf884: import org.apache.derby.client.am.StatementCacheInteractor;
1:b54918e: import org.apache.derby.client.am.Utils;
1:7863d83: import org.apache.derby.jdbc.BasicClientDataSource40;
1:b54918e: import org.apache.derby.shared.common.i18n.MessageUtil;
1:b54918e: import org.apache.derby.shared.common.error.ExceptionUtil;
1:cbd0ff1: 
6:cbd0ff1: /**
1:cbd0ff1:  * Implements the the ClientJDBCObjectFactory interface and returns the classes
1:69e3d06:  * that implement the JDBC3.0/2.0 interfaces
1:69e3d06:  * For example, newCallableStatement would return ClientCallableStatement
1:cbd0ff1:  */
1:b13b17c: 
1:cbd0ff1: public class ClientJDBCObjectFactoryImpl implements ClientJDBCObjectFactory{
1:b54918e:     /** 
1:b54918e:      *  The message utility instance we use to find messages
1:b54918e:      *  It's primed with the name of the client message bundle so that
1:b54918e:      *  it knows to look there if the message isn't found in the
1:b54918e:      *  shared message bundle.
1:b54918e:      */
1:b54918e:     private static final MessageUtil msgutil_ =
1:b54918e:         SqlException.getMessageUtil();
1:b54918e: 
1:cbd0ff1:     /**
1:b13b17c:      * @return an instance of {@link
1:b13b17c:      * org.apache.derby.client.ClientPooledConnection}
1:cbd0ff1:      */
2:8269b78:     public ClientPooledConnection newClientPooledConnection(
1:7863d83:             BasicClientDataSource40 ds,
1:8269b78:             LogWriter logWriter,
1:b13b17c:             String user,
1:cbd0ff1:             String password) throws SQLException {
1:8269b78: 
1:cbd0ff1:         return new ClientPooledConnection(ds,logWriter,user,password);
5:cbd0ff1:     }
1:b13b17c:     /**
1:b13b17c:      * @return an instance of {@link org.apache.derby.client.ClientXAConnection}
1:b64ccfc:      */
1:7863d83:     public ClientXAConnection newClientXAConnection(BasicClientDataSource40 ds,
1:8fcae92:         LogWriter logWriter,String user, String password) throws SQLException
1:8fcae92:     {
1:6372907:         return new ClientXAConnection(ds, logWriter, user, password);
1:b13b17c:     }
1:b54918e:     /**
1:69e3d06:      * Returns an instance of ClientCallableStatement.
1:407e52d:      *
1:407e52d:      * @param agent       The instance of NetAgent associated with this
1:475fc20:      *                    {@link org.apache.derby.client.am.ClientCallableStatement}
1:b13b17c:      *                    object.
1:407e52d:      * @param connection  The connection object associated with this
1:407e52d:      *                    PreparedStatement Object.
1:407e52d:      * @param sql         A String object that is the SQL statement to be sent 
1:407e52d:      *                    to the database.
1:407e52d:      * @param type        One of the ResultSet type constants
1:407e52d:      * @param concurrency One of the ResultSet concurrency constants
1:407e52d:      * @param holdability One of the ResultSet holdability constants
1:407e52d:      * @param cpc         The PooledConnection object that will be used to 
1:407e52d:      *                    notify the PooledConnection reference of the Error 
1:407e52d:      *                    Occurred and the Close events.
1:475fc20:      * @return a {@link org.apache.derby.client.am.ClientCallableStatement}
1:b13b17c:      *         object
1:407e52d:      * @throws SqlException
1:2e7a2af:      */
1:69e3d06:     public ClientCallableStatement newCallableStatement(Agent agent,
1:69e3d06:             ClientConnection connection,
1:cbd0ff1:             String sql,int type,int concurrency,
1:407e52d:             int holdability,ClientPooledConnection cpc) throws SqlException {
1:69e3d06:         return new ClientCallableStatement(agent,connection,sql,type,
1:407e52d:                 concurrency,holdability,cpc);
1:cbd0ff1:     }
1:b13b17c:    
1:b64ccfc:     /**
1:b13b17c:      * @return an instance of {@link
1:b13b17c:      * org.apache.derby.client.am.LogicalConnection}
1:cbd0ff1:      */
1:b64ccfc:     public LogicalConnection newLogicalConnection(
1:69e3d06:                     ClientConnection physicalConnection,
1:b64ccfc:                     ClientPooledConnection pooledConnection)
1:b64ccfc:         throws SqlException {
1:b64ccfc:         return new LogicalConnection(physicalConnection, pooledConnection);
1:b64ccfc:     }
1:b54918e:     
1:2e7a2af:    /**
1:b13b17c:     * Returns an instance of a {@link
1:b13b17c:     * org.apache.derby.client.am.CachingLogicalConnection}, which provides
1:b13b17c:     * caching of prepared statements.
1:2e7a2af:     *
1:1beab6c:     * @param physicalConnection the underlying physical connection
1:1beab6c:     * @param pooledConnection the pooled connection
1:1beab6c:     * @param stmtCache statement cache
1:1beab6c:     * @return A logical connection with statement caching capabilities.
1:1beab6c:     *
1:1beab6c:     * @throws SqlException if creation of the logical connection fails
1:cbd0ff1:     */
1:1beab6c:     public LogicalConnection newCachingLogicalConnection(
1:69e3d06:             ClientConnection physicalConnection,
1:1beab6c:             ClientPooledConnection pooledConnection,
1:1beab6c:             JDBCStatementCache stmtCache) throws SqlException {
1:1beab6c:         return new CachingLogicalConnection(physicalConnection,
1:1beab6c:                                             pooledConnection,
1:1beab6c:                                             stmtCache);
1:cbd0ff1:     }
1:b54918e: 
1:cbd0ff1:     /**
1:69e3d06:      * This method returns an instance of ClientPreparedStatement
1:69e3d06:      * which implements java.sql.PreparedStatement. It has the
1:69e3d06:      * ClientPooledConnection as one of its parameters
1:69e3d06:      * this is used to raise the Statement Events when the prepared
1:69e3d06:      * statement is closed.
1:407e52d:      *
1:407e52d:      * @param agent The instance of NetAgent associated with this
1:475fc20:      *              {@link org.apache.derby.client.am.ClientCallableStatement}
1:b13b17c:      *              object.
1:407e52d:      * @param connection The connection object associated with this
1:407e52d:      *                   PreparedStatement Object.
1:407e52d:      * @param sql        A String object that is the SQL statement to be sent
1:407e52d:      *                   to the database.
1:407e52d:      * @param section    Section
1:407e52d:      * @param cpc The ClientPooledConnection wraps the underlying physical
1:407e52d:      *            connection associated with this prepared statement.
1:407e52d:      *            It is used to pass the Statement closed and the Statement
1:407e52d:      *            error occurred events that occur back to the
1:407e52d:      *            ClientPooledConnection.
1:9ec13b2:      * @return a PreparedStatement object
1:407e52d:      * @throws SqlException
1:cbd0ff1:      */
1:69e3d06:     public ClientPreparedStatement newPreparedStatement(Agent agent,
1:69e3d06:             ClientConnection connection,
1:407e52d:             String sql,Section section,ClientPooledConnection cpc) 
1:407e52d:             throws SqlException {
1:69e3d06:         return new ClientPreparedStatement(agent,connection,sql,section,cpc);
1:cbd0ff1:     }
1:407e52d:     
1:407e52d:     /**
1:407e52d:      *
1:69e3d06:      * This method returns an instance of ClientPreparedStatement
1:b13b17c:      * which implements {@code java.sql.PreparedStatement}.
1:b13b17c:      * It has the {@link org.apache.derby.client.ClientPooledConnection} as one
1:b13b17c:      * of its parameters this is used to raise the Statement Events when the
1:b13b17c:      * prepared statement is closed.
1:407e52d:      *
1:407e52d:      * @param agent The instance of NetAgent associated with this
1:475fc20:      *              {@link org.apache.derby.client.am.ClientCallableStatement}
1:b13b17c:      *              object.
1:407e52d:      * @param connection  The connection object associated with this
1:407e52d:      *                    PreparedStatement Object.
1:407e52d:      * @param sql         A String object that is the SQL statement
1:407e52d:      *                    to be sent to the database.
1:407e52d:      * @param type        One of the ResultSet type constants.
1:407e52d:      * @param concurrency One of the ResultSet concurrency constants.
1:407e52d:      * @param holdability One of the ResultSet holdability constants.
1:407e52d:      * @param autoGeneratedKeys a flag indicating whether auto-generated
1:407e52d:      *                          keys should be returned.
1:407e52d:      * @param columnNames an array of column names indicating the columns that
1:407e52d:      *                    should be returned from the inserted row or rows.
1:407e52d:      * @param cpc The ClientPooledConnection wraps the underlying physical
1:407e52d:      *            connection associated with this prepared statement
1:407e52d:      *            it is used to pass the Statement closed and the Statement
1:407e52d:      *            error occurred events that occur back to the
1:407e52d:      *            ClientPooledConnection.
1:9ec13b2:      * @return a PreparedStatement object
1:407e52d:      * @throws SqlException
1:407e52d:      *
1:cbd0ff1:      */
1:69e3d06:     public ClientPreparedStatement newPreparedStatement(Agent agent,
1:69e3d06:             ClientConnection connection,
1:cbd0ff1:             String sql,int type,int concurrency,int holdability,
1:407e52d:             int autoGeneratedKeys,String [] columnNames,
1:b52081a:             int[] columnIndexes,
1:407e52d:             ClientPooledConnection cpc)
1:2e7a2af:             throws SqlException {
1:69e3d06: 
1:69e3d06:         return new ClientPreparedStatement(
1:69e3d06:             agent,
1:69e3d06:             connection,
1:69e3d06:             sql,
1:69e3d06:             type,
1:69e3d06:             concurrency,
1:69e3d06:             holdability,
1:69e3d06:             autoGeneratedKeys,
1:69e3d06:             columnNames,
1:69e3d06:             columnIndexes,
1:69e3d06:             cpc);
1:cbd0ff1:     }
1:407e52d: 
1:cbd0ff1:     /**
1:69e3d06:      * Returns a new logical prepared statement object.
1:1beab6c:      *
1:1beab6c:      * @param ps underlying physical prepared statement
1:1beab6c:      * @param stmtKey key for the underlying physical prepared statement
1:d6cf884:      * @param cacheInteractor the statement cache interactor
1:1beab6c:      * @return A logical prepared statement.
1:cbd0ff1:      */
1:d6cf884:     public LogicalPreparedStatement newLogicalPreparedStatement(
1:69e3d06:             PreparedStatement ps,
1:1beab6c:             StatementKey stmtKey,
1:d6cf884:             StatementCacheInteractor cacheInteractor) {
1:d6cf884:         return new LogicalPreparedStatement(ps, stmtKey, cacheInteractor);
1:cbd0ff1:     }
1:b54918e: 
1:cbd0ff1:     /**
1:1beab6c:      * Returns a new logical callable statement object.
2:1beab6c:      *
1:1beab6c:      * @param cs underlying physical callable statement
1:1beab6c:      * @param stmtKey key for the underlying physical callable statement
1:d6cf884:      * @param cacheInteractor the statement cache interactor
1:1beab6c:      * @return A logical callable statement.
1:cbd0ff1:      */
1:d6cf884:     public LogicalCallableStatement newLogicalCallableStatement(
1:69e3d06:             CallableStatement cs,
1:1beab6c:             StatementKey stmtKey,
1:d6cf884:             StatementCacheInteractor cacheInteractor) {
1:d6cf884:         return new LogicalCallableStatement(cs, stmtKey, cacheInteractor);
1:cbd0ff1:     }
1:2e7a2af: 
1:cbd0ff1:     /**
2:b13b17c:      * @return an instance of {@link org.apache.derby.client.net.NetConnection}
1:b13b17c:      */
1:69e3d06:     public ClientConnection newNetConnection(
1:8269b78:             LogWriter logWriter,
1:b13b17c:             int driverManagerLoginTimeout,
1:b13b17c:             String serverName,
2:b13b17c:             int portNumber,
2:b13b17c:             String databaseName,
1:69e3d06:             Properties properties) throws SqlException {
1:b13b17c: 
3:b13b17c:         return new NetConnection(
1:6372907:                 logWriter,
1:b13b17c:                 driverManagerLoginTimeout,
1:b13b17c:                 serverName,
2:b13b17c:                 portNumber,
2:b13b17c:                 databaseName,
2:b13b17c:                 properties);
1:b13b17c:     }
1:b13b17c:     /**
1:b13b17c:      * @return an instance of {@link org.apache.derby.client.net.NetConnection}
1:b13b17c:      */
1:69e3d06:     public ClientConnection newNetConnection(
1:6372907:             LogWriter logWriter, String user, String password,
1:7863d83:             BasicClientDataSource40 dataSource,
1:b13b17c:             int rmId,
1:b13b17c:             boolean isXAConn) throws SqlException {
1:b13b17c: 
1:b13b17c:         return new NetConnection(
1:6372907:                 logWriter,
1:b13b17c:                 user,
1:b13b17c:                 password,
1:b13b17c:                 dataSource,
1:b13b17c:                 rmId,
1:b13b17c:                 isXAConn);
1:b13b17c:     }
1:b13b17c: 
1:b13b17c:     /**
1:b13b17c:      * Returns an instance of NetConnection.
1:6372907:      * @param logWriter    LogWriter object associated with this connection.
1:407e52d:      * @param user         user id for this connection.
1:407e52d:      * @param password     password for this connection.
1:407e52d:      * @param dataSource   The DataSource object passed from the PooledConnection
1:407e52d:      *                     object from which this constructor was called.
1:407e52d:      * @param rmId         The Resource Manager ID for XA Connections
1:407e52d:      * @param isXAConn     true if this is a XA connection
1:407e52d:      * @param cpc          The ClientPooledConnection object from which this
1:407e52d:      *                     NetConnection constructor was called. This is used to
1:407e52d:      *                     pass StatementEvents back to the pooledConnection
1:407e52d:      *                     object.
1:475fc20:      * @return a {@link ClientConnection} object
1:407e52d:      * @throws             SqlException
1:b13b17c:      */
1:69e3d06:     public ClientConnection newNetConnection(
1:6372907:             LogWriter logWriter,String user,
1:8269b78:             String password,
1:7863d83:             BasicClientDataSource40 dataSource,
1:407e52d:             int rmId,boolean isXAConn,
1:407e52d:             ClientPooledConnection cpc) throws SqlException {
1:b13b17c: 
1:b13b17c:         return new NetConnection(
1:6372907:             logWriter,
1:b13b17c:             user,
1:b13b17c:             password,
1:b13b17c:             dataSource,
1:b13b17c:             rmId,
1:b13b17c:             isXAConn,
1:b13b17c:             cpc);
1:407e52d:     }
1:407e52d:     /**
1:b13b17c:      * @return an instance of {@link NetResultSet}
1:407e52d:      */
1:69e3d06:     public ClientResultSet newNetResultSet(Agent netAgent,
1:b13b17c:             MaterialStatement netStatement,
1:c247315:             Cursor cursor,
1:c247315:             int qryprctyp,int sqlcsrhld,int qryattscr,int qryattsns,
1:cbd0ff1:             int qryattset,long qryinsid,int actualResultSetType,
1:cbd0ff1:             int actualResultSetConcurrency,
1:cbd0ff1:             int actualResultSetHoldability) throws SqlException {
1:c247315:         return new NetResultSet((NetAgent)netAgent,
1:c247315:                 (NetStatement)netStatement,cursor,qryprctyp,sqlcsrhld,qryattscr,
1:cbd0ff1:                 qryattsns,qryattset,qryinsid,actualResultSetType,
1:cbd0ff1:                 actualResultSetConcurrency,actualResultSetHoldability);
1:cbd0ff1:     }
1:cbd0ff1:     /**
1:b13b17c:      * @return an instance of {@link NetDatabaseMetaData}
1:cbd0ff1:      */
1:69e3d06:     public ClientDatabaseMetaData newNetDatabaseMetaData(Agent netAgent,
1:69e3d06:             ClientConnection netConnection) {
1:cbd0ff1:         return new NetDatabaseMetaData((NetAgent)netAgent,
1:cbd0ff1:                 (NetConnection)netConnection);
1:2e7a2af:     }
1:8269b78:     
1:2e7a2af:      /**
2:2e7a2af:      * This method provides an instance of Statement 
1:2e7a2af:      * @param  agent            Agent
1:2e7a2af:      * @param  connection       Connection
1:2e7a2af:      * @param  type             int
1:2e7a2af:      * @param  concurrency      int
1:2e7a2af:      * @param  holdability      int
1:2e7a2af:      * @param autoGeneratedKeys int
1:2e7a2af:      * @param columnNames       String[]
1:b52081a:      * @param columnIndexes     int[]
1:69e3d06:      * @return a ClientStatement implementation
2:2e7a2af:      * @throws SqlException
1:2e7a2af:      *
1:2e7a2af:      */
1:69e3d06:      public ClientStatement newStatement(Agent agent,
1:69e3d06:                      ClientConnection connection, int type,
1:2e7a2af:                      int concurrency, int holdability,
1:b52081a:                      int autoGeneratedKeys, String[] columnNames,
1:b52081a:                      int[] columnIndexes) 
1:2e7a2af:                      throws SqlException {
1:69e3d06:          return new ClientStatement(
1:69e3d06:              agent,
1:69e3d06:              connection,
1:69e3d06:              type,
1:69e3d06:              concurrency,
1:69e3d06:              holdability,
1:69e3d06:              autoGeneratedKeys,
1:69e3d06:              columnNames,
1:69e3d06:              columnIndexes);
1:2e7a2af:      }
1:69e3d06:      
1:2e7a2af:      /**
1:b13b17c:      * Returns an instance of ColumnMetaData
1:2e7a2af:      *
1:2e7a2af:      * @param logWriter LogWriter
1:2e7a2af:      * @return a ColumnMetaData implementation
1:2e7a2af:      *
1:2e7a2af:      */
1:2e7a2af:     public ColumnMetaData newColumnMetaData(LogWriter logWriter) {
1:2e7a2af:         return new ColumnMetaData(logWriter);
1:2e7a2af:     }
1:2e7a2af: 
1:2e7a2af:     /**
1:b13b17c:      * Returns an instance of ColumnMetaData or ColumnMetaData40 depending
1:b13b17c:      * on the JDK version under use
1:2e7a2af:      *
1:2e7a2af:      * @param logWriter  LogWriter
1:2e7a2af:      * @param upperBound int
1:2e7a2af:      * @return a ColumnMetaData implementation
1:2e7a2af:      *
1:2e7a2af:      */
1:2e7a2af:     public ColumnMetaData newColumnMetaData(LogWriter logWriter, int upperBound) {
1:2e7a2af:         return new ColumnMetaData(logWriter,upperBound);
1:2e7a2af:     }
1:2e7a2af:     
1:2e7a2af:     /**
1:2e7a2af:      * 
1:2e7a2af:      * returns an instance of ParameterMetaData 
1:2e7a2af:      *
1:2e7a2af:      * @param columnMetaData ColumnMetaData
1:2e7a2af:      * @return a ParameterMetaData implementation
1:2e7a2af:      *
1:2e7a2af:      */
1:69e3d06:     public ClientParameterMetaData newParameterMetaData(
1:69e3d06:             ColumnMetaData columnMetaData) {
1:69e3d06:         return new ClientParameterMetaData(columnMetaData);
1:2e7a2af:     }
1:2e7a2af: 
1:cbd0ff1:     /**
1:b54918e:      * Creates a BatchUpdateException depending on the JVM level.
1:b54918e:      */
1:b13b17c:     public  BatchUpdateException    newBatchUpdateException
1:b54918e:         ( LogWriter logWriter, ClientMessageId msgid, Object[] args, long[] updateCounts, SqlException cause )
1:b54918e:     {
1:b13b17c:         BatchUpdateException bue = newBatchUpdateException
1:b54918e:             (
1:b54918e:              msgutil_.getCompleteMessage( msgid.msgid, args),
1:b54918e:              ExceptionUtil.getSQLStateFromIdentifier(msgid.msgid),
1:b54918e:              ExceptionUtil.getSeverityFromIdentifier(msgid.msgid),
1:cd1db93:              updateCounts,
1:cd1db93:              cause
1:b54918e:              );
1:b54918e:     
1:b54918e:         if (logWriter != null) {
1:b54918e:             logWriter.traceDiagnosable( bue );
1:b54918e:         }
1:cd1db93:     
1:b54918e:         if (cause != null) {
1:b54918e:             bue.setNextException(cause.getSQLException());
1:b54918e:         }
1:cd1db93: 
1:b54918e:         return bue;
1:b54918e:     }
1:b13b17c:     /** This method is overridden on JVM 8 */
1:b13b17c:     protected   BatchUpdateException   newBatchUpdateException
1:cd1db93:         ( String message, String sqlState, int errorCode, long[] updateCounts, SqlException cause  )
1:b54918e:     {
1:b13b17c:         BatchUpdateException bue = new BatchUpdateException
1:cd1db93:             ( message, sqlState, errorCode, Utils.squashLongs( updateCounts ) );
1:cd1db93: 
1:cd1db93:         if (cause != null) {
1:cd1db93:             bue.initCause(cause);
1:cd1db93:         }
1:cd1db93: 
1:cd1db93:         return bue;
1:b54918e:     }
1:cbd0ff1: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7863d83
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.BasicClientDataSource40;
/////////////////////////////////////////////////////////////////////////
1:             BasicClientDataSource40 ds,
/////////////////////////////////////////////////////////////////////////
1:     public ClientXAConnection newClientXAConnection(BasicClientDataSource40 ds,
/////////////////////////////////////////////////////////////////////////
1:             BasicClientDataSource40 dataSource,
/////////////////////////////////////////////////////////////////////////
1:             BasicClientDataSource40 dataSource,
commit:b565f41
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:475fc20
/////////////////////////////////////////////////////////////////////////
1:      *                    {@link org.apache.derby.client.am.ClientCallableStatement}
/////////////////////////////////////////////////////////////////////////
1:      * @return a {@link org.apache.derby.client.am.ClientCallableStatement}
/////////////////////////////////////////////////////////////////////////
1:      *              {@link org.apache.derby.client.am.ClientCallableStatement}
/////////////////////////////////////////////////////////////////////////
1:      *              {@link org.apache.derby.client.am.ClientCallableStatement}
/////////////////////////////////////////////////////////////////////////
1:      * @return a {@link ClientConnection} object
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.CallableStatement;
1: import java.sql.PreparedStatement;
1: import org.apache.derby.client.am.ClientCallableStatement;
1: import org.apache.derby.client.am.ClientParameterMetaData;
1: import org.apache.derby.client.am.ClientPreparedStatement;
1: import org.apache.derby.client.am.ClientStatement;
1: import org.apache.derby.client.am.ClientConnection;
1: import org.apache.derby.client.am.ClientDatabaseMetaData;
1: import org.apache.derby.client.am.ClientResultSet;
/////////////////////////////////////////////////////////////////////////
1:  * that implement the JDBC3.0/2.0 interfaces
1:  * For example, newCallableStatement would return ClientCallableStatement
/////////////////////////////////////////////////////////////////////////
1:      * Returns an instance of ClientCallableStatement.
/////////////////////////////////////////////////////////////////////////
1:     public ClientCallableStatement newCallableStatement(Agent agent,
1:             ClientConnection connection,
1:         return new ClientCallableStatement(agent,connection,sql,type,
/////////////////////////////////////////////////////////////////////////
1:                     ClientConnection physicalConnection,
/////////////////////////////////////////////////////////////////////////
1:             ClientConnection physicalConnection,
/////////////////////////////////////////////////////////////////////////
1:      * This method returns an instance of ClientPreparedStatement
1:      * which implements java.sql.PreparedStatement. It has the
1:      * ClientPooledConnection as one of its parameters
1:      * this is used to raise the Statement Events when the prepared
1:      * statement is closed.
/////////////////////////////////////////////////////////////////////////
1:     public ClientPreparedStatement newPreparedStatement(Agent agent,
1:             ClientConnection connection,
1:         return new ClientPreparedStatement(agent,connection,sql,section,cpc);
1:      * This method returns an instance of ClientPreparedStatement
/////////////////////////////////////////////////////////////////////////
1:     public ClientPreparedStatement newPreparedStatement(Agent agent,
1:             ClientConnection connection,
1: 
1:         return new ClientPreparedStatement(
1:             agent,
1:             connection,
1:             sql,
1:             type,
1:             concurrency,
1:             holdability,
1:             autoGeneratedKeys,
1:             columnNames,
1:             columnIndexes,
1:             cpc);
1:      * Returns a new logical prepared statement object.
/////////////////////////////////////////////////////////////////////////
1:             PreparedStatement ps,
/////////////////////////////////////////////////////////////////////////
1:             CallableStatement cs,
/////////////////////////////////////////////////////////////////////////
1:     public ClientConnection newNetConnection(
1:             Properties properties) throws SqlException {
/////////////////////////////////////////////////////////////////////////
1:     public ClientConnection newNetConnection(
/////////////////////////////////////////////////////////////////////////
1:     public ClientConnection newNetConnection(
/////////////////////////////////////////////////////////////////////////
0:     public ClientConnection newNetConnection(
/////////////////////////////////////////////////////////////////////////
0:     public ClientConnection newNetConnection(
/////////////////////////////////////////////////////////////////////////
0:     public ClientConnection newNetConnection(
/////////////////////////////////////////////////////////////////////////
1:     public ClientResultSet newNetResultSet(Agent netAgent,
/////////////////////////////////////////////////////////////////////////
1:     public ClientDatabaseMetaData newNetDatabaseMetaData(Agent netAgent,
1:             ClientConnection netConnection) {
/////////////////////////////////////////////////////////////////////////
1:      * @return a ClientStatement implementation
0:      public ClientStatement newStatement(
0:              Agent agent,
0:              ClientConnection connection) throws SqlException {
1: 
0:          return new ClientStatement(agent,connection);
/////////////////////////////////////////////////////////////////////////
0:      * @return a ClientStatement implementation
1:      public ClientStatement newStatement(Agent agent,
1:                      ClientConnection connection, int type,
1:          return new ClientStatement(
1:              agent,
1:              connection,
1:              type,
1:              concurrency,
1:              holdability,
1:              autoGeneratedKeys,
1:              columnNames,
1:              columnIndexes);
/////////////////////////////////////////////////////////////////////////
1:     public ClientParameterMetaData newParameterMetaData(
1:             ColumnMetaData columnMetaData) {
1:         return new ClientParameterMetaData(columnMetaData);
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
1: import java.sql.BatchUpdateException;
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.Connection;
0: import org.apache.derby.client.am.DatabaseMetaData;
1: import org.apache.derby.client.am.MaterialStatement;
0: import org.apache.derby.client.am.ResultSet;
/////////////////////////////////////////////////////////////////////////
0:  * that implement the JDBC3.0/2.0 interfaces.
0:  * For example newCallableStatement would return
0:  * {@link  CallableStatement}.
/////////////////////////////////////////////////////////////////////////
1:      * @return an instance of {@link
1:      * org.apache.derby.client.ClientPooledConnection}
/////////////////////////////////////////////////////////////////////////
1:      * @return an instance of {@link
0:      * org.apache.derby.client.ClientPooledConnection}
/////////////////////////////////////////////////////////////////////////
1:      * @return an instance of {@link org.apache.derby.client.ClientXAConnection}
/////////////////////////////////////////////////////////////////////////
0:      * Returns an instance of {@link
0:      * org.apache.derby.client.am.CallableStatement}.
0:      *                    {@link org.apache.derby.client.am.CallableStatement}
1:      *                    object.
/////////////////////////////////////////////////////////////////////////
0:      * @return a {@link org.apache.derby.client.am.CallableStatement}
1:      *         object
0:             Connection connection,
/////////////////////////////////////////////////////////////////////////
0:      * @return an instance of {@link
1:      * org.apache.derby.client.am.LogicalConnection}
0:             Connection physicalConnection,
1:     * Returns an instance of a {@link
1:     * org.apache.derby.client.am.CachingLogicalConnection}, which provides
1:     * caching of prepared statements.
/////////////////////////////////////////////////////////////////////////
0:             Connection physicalConnection,
/////////////////////////////////////////////////////////////////////////
0:      * This method returns an instance of PreparedStatement which
0:      * implements {@code java.sql.PreparedStatement}. It has the {@link
0:      * org.apache.derby.client.ClientPooledConnection} as one of its
0:      * parameters this is used to raise the Statement Events when the
1:      * prepared statement is closed.
0:      *              {@link org.apache.derby.client.am.CallableStatement}
1:      *              object.
/////////////////////////////////////////////////////////////////////////
0:             Connection connection,
/////////////////////////////////////////////////////////////////////////
1:      * which implements {@code java.sql.PreparedStatement}.
1:      * It has the {@link org.apache.derby.client.ClientPooledConnection} as one
1:      * of its parameters this is used to raise the Statement Events when the
0:      * prepared statement is closed.
0:      *              {@link org.apache.derby.client.am.CallableStatement}
1:      *              object.
/////////////////////////////////////////////////////////////////////////
0:             Connection connection,
/////////////////////////////////////////////////////////////////////////
0:      * @return a new connection, see {@link NetConnection}
0:     public Connection newNetConnection(
0:             LogWriter netLogWriter,
1:             String databaseName,
1: 
1:         return new NetConnection(
0:                 (NetLogWriter)netLogWriter,
1:                 databaseName,
1:                 properties);
0:      * @return a new connection, see {@link NetConnection}
0:     public Connection newNetConnection(
0:            LogWriter netLogWriter,
0:            ClientBaseDataSourceRoot clientDataSource,
1:            String user,
0:            String password) throws SqlException {
1: 
1:         return new NetConnection(
0:                 (NetLogWriter)netLogWriter,
0:                 clientDataSource,
1:                 user,
0:                 password);
1:     }
1:     /**
1:      * @return an instance of {@link org.apache.derby.client.net.NetConnection}
1:      */
0:     public Connection newNetConnection(
0:             LogWriter netLogWriter,
1:             int driverManagerLoginTimeout,
1:             String serverName,
1:             int portNumber,
1:             String databaseName,
0:             Properties properties) throws SqlException {
1: 
1:         return new NetConnection(
0:                 (NetLogWriter)netLogWriter,
1:                 driverManagerLoginTimeout,
1:                 serverName,
1:                 portNumber,
1:                 databaseName,
1:                 properties);
1:     }
1:     /**
1:      * @return an instance of {@link org.apache.derby.client.net.NetConnection}
1:      */
0:     public Connection newNetConnection(
0:             LogWriter netLogWriter,String user,
1:             int rmId,
1: 
1:         return new NetConnection(
0:                 (NetLogWriter)netLogWriter,
1:                 user,
1:                 password,
1:                 dataSource,
1:                 rmId,
1:      * @return an instance of {@link org.apache.derby.client.net.NetConnection}
1:      */
0:     public Connection newNetConnection(
0:             LogWriter netLogWriter,
0:             String ipaddr,
1:             int portNumber,
0:             ClientBaseDataSourceRoot dataSource,
1:             boolean isXAConn) throws SqlException {
1: 
1:         return new NetConnection(
0:                 (NetLogWriter)netLogWriter,
0:                 ipaddr,
1:                 portNumber,
1:                 dataSource,
1:                 isXAConn);
1:     }
1: 
1:     /**
1:      * Returns an instance of NetConnection.
/////////////////////////////////////////////////////////////////////////
0:      * @return a {@link Connection} object
0:     public Connection newNetConnection(
0:             LogWriter netLogWriter,String user,
1: 
0:         return new NetConnection(
0:             (NetLogWriter)netLogWriter,
0:             user,
1:             password,
0:             dataSource,
1:             rmId,
1:             isXAConn,
1:             cpc);
1:      * @return an instance of {@link NetResultSet}
0:     public ResultSet newNetResultSet(Agent netAgent,
1:             MaterialStatement netStatement,
/////////////////////////////////////////////////////////////////////////
1:      * @return an instance of {@link NetDatabaseMetaData}
0:     public DatabaseMetaData newNetDatabaseMetaData(Agent netAgent,
0:             Connection netConnection) {
/////////////////////////////////////////////////////////////////////////
0:      * @return a {@code java.sql.Statement} implementation
0:      public Statement newStatement(Agent agent, Connection connection)
/////////////////////////////////////////////////////////////////////////
0:      * @return a {@code java.sql.Statement} implementation
0:                      Connection connection, int type,
/////////////////////////////////////////////////////////////////////////
1:      * Returns an instance of ColumnMetaData
/////////////////////////////////////////////////////////////////////////
1:      * Returns an instance of ColumnMetaData or ColumnMetaData40 depending
1:      * on the JDK version under use
/////////////////////////////////////////////////////////////////////////
1:     public  BatchUpdateException    newBatchUpdateException
1:         BatchUpdateException bue = newBatchUpdateException
/////////////////////////////////////////////////////////////////////////
1:     /** This method is overridden on JVM 8 */
1:     protected   BatchUpdateException   newBatchUpdateException
1:         BatchUpdateException bue = new BatchUpdateException
commit:8269b78
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
/////////////////////////////////////////////////////////////////////////
1:     public ClientPooledConnection newClientPooledConnection(
0:             ClientBaseDataSourceRoot ds,
1:             LogWriter logWriter,
0:             String user,
1: 
1:     public ClientPooledConnection newClientPooledConnection(
0:             ClientBaseDataSourceRoot ds,
1:             LogWriter logWriter,
0:             String user,
1:             String password,
0:             int rmId) throws SQLException {
1: 
0:     public ClientXAConnection newClientXAConnection(ClientBaseDataSourceRoot ds,
0:         return new ClientXAConnection(ds,
/////////////////////////////////////////////////////////////////////////
0:             ClientBaseDataSourceRoot clientDataSource,
/////////////////////////////////////////////////////////////////////////
0:             ClientBaseDataSourceRoot dataSource,
/////////////////////////////////////////////////////////////////////////
0:             ClientBaseDataSourceRoot dataSource,
/////////////////////////////////////////////////////////////////////////
0:             ClientBaseDataSourceRoot dataSource,
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6372907
/////////////////////////////////////////////////////////////////////////
1:         return new ClientXAConnection(ds, logWriter, user, password);
/////////////////////////////////////////////////////////////////////////
0:             LogWriter logWriter,
/////////////////////////////////////////////////////////////////////////
1:                 logWriter,
/////////////////////////////////////////////////////////////////////////
1:             LogWriter logWriter, String user, String password,
1:                 logWriter,
/////////////////////////////////////////////////////////////////////////
1:      * @param logWriter    LogWriter object associated with this connection.
/////////////////////////////////////////////////////////////////////////
1:             LogWriter logWriter,String user,
1:             logWriter,
commit:407e52d
/////////////////////////////////////////////////////////////////////////
0:      * Returns an instance of org.apache.derby.client.am.CallableStatement.
1:      *
1:      * @param agent       The instance of NetAgent associated with this
0:      *                    CallableStatement object.
1:      * @param connection  The connection object associated with this
1:      *                    PreparedStatement Object.
1:      * @param sql         A String object that is the SQL statement to be sent 
1:      *                    to the database.
1:      * @param type        One of the ResultSet type constants
1:      * @param concurrency One of the ResultSet concurrency constants
1:      * @param holdability One of the ResultSet holdability constants
1:      * @param cpc         The PooledConnection object that will be used to 
1:      *                    notify the PooledConnection reference of the Error 
1:      *                    Occurred and the Close events.
0:      * @return a CallableStatement object
1:      * @throws SqlException
1:             int holdability,ClientPooledConnection cpc) throws SqlException {
1:                 concurrency,holdability,cpc);
/////////////////////////////////////////////////////////////////////////
0:      * This method returns an instance of PreparedStatement
0:      * which implements java.sql.PreparedStatement. It has the
0:      * ClientPooledConnection as one of its parameters
0:      * this is used to raise the Statement Events when the prepared
0:      * statement is closed.
1:      *
1:      * @param agent The instance of NetAgent associated with this
0:      *              CallableStatement object.
1:      * @param connection The connection object associated with this
1:      *                   PreparedStatement Object.
1:      * @param sql        A String object that is the SQL statement to be sent
1:      *                   to the database.
1:      * @param section    Section
1:      * @param cpc The ClientPooledConnection wraps the underlying physical
1:      *            connection associated with this prepared statement.
1:      *            It is used to pass the Statement closed and the Statement
1:      *            error occurred events that occur back to the
1:      *            ClientPooledConnection.
0:      * @returns a PreparedStatement object
1:      * @throws SqlException
1:             String sql,Section section,ClientPooledConnection cpc) 
1:             throws SqlException {
0:         return new PreparedStatement(agent,connection,sql,section,cpc);
1:     
1:     /**
1:      *
0:      * This method returns an instance of PreparedStatement
0:      * which implements java.sql.PreparedStatement.
0:      * It has the ClientPooledConnection as one of its parameters
0:      * this is used to raise the Statement Events when the prepared
0:      * statement is closed.
1:      *
1:      * @param agent The instance of NetAgent associated with this
0:      *              CallableStatement object.
1:      * @param connection  The connection object associated with this
1:      *                    PreparedStatement Object.
1:      * @param sql         A String object that is the SQL statement
1:      *                    to be sent to the database.
1:      * @param type        One of the ResultSet type constants.
1:      * @param concurrency One of the ResultSet concurrency constants.
1:      * @param holdability One of the ResultSet holdability constants.
1:      * @param autoGeneratedKeys a flag indicating whether auto-generated
1:      *                          keys should be returned.
1:      * @param columnNames an array of column names indicating the columns that
1:      *                    should be returned from the inserted row or rows.
1:      * @param cpc The ClientPooledConnection wraps the underlying physical
1:      *            connection associated with this prepared statement
1:      *            it is used to pass the Statement closed and the Statement
1:      *            error occurred events that occur back to the
1:      *            ClientPooledConnection.
0:      * @returns a PreparedStatement object
1:      * @throws SqlException
1:      *
1:             int autoGeneratedKeys,String [] columnNames,
1:             ClientPooledConnection cpc)
0:                 holdability,autoGeneratedKeys,columnNames,cpc);
1: 
/////////////////////////////////////////////////////////////////////////
0:      * Returns an instance of org.apache.derby.client.net.NetConnection.
0:      * @param netLogWriter Placeholder for NetLogWriter object associated
0:      *                     with this connection.
1:      * @param user         user id for this connection.
1:      * @param password     password for this connection.
1:      * @param dataSource   The DataSource object passed from the PooledConnection
1:      *                     object from which this constructor was called.
1:      * @param rmId         The Resource Manager ID for XA Connections
1:      * @param isXAConn     true if this is a XA connection
1:      * @param cpc          The ClientPooledConnection object from which this
1:      *                     NetConnection constructor was called. This is used to
1:      *                     pass StatementEvents back to the pooledConnection
1:      *                     object.
0:      * @returns a org.apache.derby.client.am.Connection object
1:      * @throws             SqlException
1:      */
0:     public org.apache.derby.client.am.Connection newNetConnection(
0:             org.apache.derby.client.am.LogWriter netLogWriter,String user,
0:             String password,
0:             org.apache.derby.jdbc.ClientBaseDataSource dataSource,
1:             int rmId,boolean isXAConn,
1:             ClientPooledConnection cpc) throws SqlException {
0:         return (org.apache.derby.client.am.Connection)
0:         (new NetConnection((NetLogWriter)netLogWriter,user,password,dataSource,rmId,
0:                 isXAConn,cpc));
1:     }
1:     /**
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:cd1db93
/////////////////////////////////////////////////////////////////////////
1:              updateCounts,
1:              cause
1:     
1: 
1:         ( String message, String sqlState, int errorCode, long[] updateCounts, SqlException cause  )
0:         java.sql.BatchUpdateException bue = new java.sql.BatchUpdateException
1:             ( message, sqlState, errorCode, Utils.squashLongs( updateCounts ) );
1: 
1:         if (cause != null) {
1:             bue.initCause(cause);
1:         }
1: 
1:         return bue;
commit:b54918e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.ClientMessageId;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.Utils;
1: import org.apache.derby.shared.common.i18n.MessageUtil;
1: import org.apache.derby.shared.common.error.ExceptionUtil;
/////////////////////////////////////////////////////////////////////////
1:     /** 
1:      *  The message utility instance we use to find messages
1:      *  It's primed with the name of the client message bundle so that
1:      *  it knows to look there if the message isn't found in the
1:      *  shared message bundle.
1:      */
1:     private static final MessageUtil msgutil_ =
1:         SqlException.getMessageUtil();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Creates a BatchUpdateException depending on the JVM level.
1:      */
0:     public  java.sql.BatchUpdateException    newBatchUpdateException
1:         ( LogWriter logWriter, ClientMessageId msgid, Object[] args, long[] updateCounts, SqlException cause )
1:     {
0:         java.sql.BatchUpdateException   bue = newBatchUpdateException
1:             (
1:              msgutil_.getCompleteMessage( msgid.msgid, args),
1:              ExceptionUtil.getSQLStateFromIdentifier(msgid.msgid),
1:              ExceptionUtil.getSeverityFromIdentifier(msgid.msgid),
0:              updateCounts
1:              );
1:     
1:         if (logWriter != null) {
1:             logWriter.traceDiagnosable( bue );
1:         }
1: 
1:         if (cause != null) {
0:             bue.initCause(cause);
1:             bue.setNextException(cause.getSQLException());
1:         }
1:     
1:         return bue;
1:     }
0:     /** This method is overriden on JVM 8 */
0:     protected   java.sql.BatchUpdateException   newBatchUpdateException
0:         ( String message, String sqlState, int errorCode, long[] updateCounts )
1:     {
0:         return new java.sql.BatchUpdateException( message, sqlState, errorCode, Utils.squashLongs( updateCounts ) );
1:     }
commit:9ec13b2
/////////////////////////////////////////////////////////////////////////
1:      * @return a PreparedStatement object
/////////////////////////////////////////////////////////////////////////
1:      * @return a PreparedStatement object
/////////////////////////////////////////////////////////////////////////
0:      * @return a org.apache.derby.client.am.Connection object
commit:b64ccfc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.LogicalConnection;
/////////////////////////////////////////////////////////////////////////
1:    
1:     /**
0:      * Returns an instance of org.apache.derby.client.am.LogicalConnection
1:      */
1:     public LogicalConnection newLogicalConnection(
0:                     org.apache.derby.client.am.Connection physicalConnection,
1:                     ClientPooledConnection pooledConnection)
1:         throws SqlException {
1:         return new LogicalConnection(physicalConnection, pooledConnection);
1:     }
commit:17d490d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientBaseDataSource;
/////////////////////////////////////////////////////////////////////////
0:     public ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,
/////////////////////////////////////////////////////////////////////////
0:     public ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,
/////////////////////////////////////////////////////////////////////////
0:             org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,
/////////////////////////////////////////////////////////////////////////
0:             org.apache.derby.jdbc.ClientBaseDataSource dataSource,
/////////////////////////////////////////////////////////////////////////
0:             org.apache.derby.jdbc.ClientBaseDataSource dataSource,
commit:2e7a2af
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.ParameterMetaData;
0: import org.apache.derby.client.am.Statement;
1: import org.apache.derby.client.am.ColumnMetaData;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * This method provides an instance of Statement 
0:      * @param  agent      Agent
0:      * @param  connection Connection
0:      * @return a java.sql.Statement implementation 
1:      * @throws SqlException
1:      *
1:      */
0:      public Statement newStatement(Agent agent, org.apache.derby.client.am.Connection connection) 
1:                                             throws SqlException {
0:          return new Statement(agent,connection);
1:      }
1:      
1:      /**
1:      * This method provides an instance of Statement 
1:      * @param  agent            Agent
1:      * @param  connection       Connection
1:      * @param  type             int
1:      * @param  concurrency      int
1:      * @param  holdability      int
1:      * @param autoGeneratedKeys int
1:      * @param columnNames       String[]
0:      * @return a java.sql.Statement implementation 
1:      * @throws SqlException
1:      *
1:      */
0:      public Statement newStatement(Agent agent, 
0:                      org.apache.derby.client.am.Connection connection, int type, 
1:                      int concurrency, int holdability,
0:                      int autoGeneratedKeys, String[] columnNames) 
1:                      throws SqlException {
0:          return new Statement(agent,connection,type,concurrency,holdability,
0:                  autoGeneratedKeys,columnNames);
1:      }
1:      
1:      /**
0:      * Returns an instanceof ColumnMetaData 
1:      *
1:      * @param logWriter LogWriter
1:      * @return a ColumnMetaData implementation
1:      *
1:      */
1:     public ColumnMetaData newColumnMetaData(LogWriter logWriter) {
1:         return new ColumnMetaData(logWriter);
1:     }
1: 
1:     /**
0:      * Returns an instanceof ColumnMetaData or ColumnMetaData40 depending 
0:      * on the jdk version under use
1:      *
1:      * @param logWriter  LogWriter
1:      * @param upperBound int
1:      * @return a ColumnMetaData implementation
1:      *
1:      */
1:     public ColumnMetaData newColumnMetaData(LogWriter logWriter, int upperBound) {
1:         return new ColumnMetaData(logWriter,upperBound);
1:     }
1:     
1:     /**
1:      * 
1:      * returns an instance of ParameterMetaData 
1:      *
1:      * @param columnMetaData ColumnMetaData
1:      * @return a ParameterMetaData implementation
1:      *
1:      */
0:     public ParameterMetaData newParameterMetaData(ColumnMetaData columnMetaData) {
0:         return new ParameterMetaData(columnMetaData);
1:     }
commit:cbd0ff1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.net.ClientJDBCObjectFactoryImpl
1:  
0:    Copyright (c) 2006 The Apache Software Foundation or its licensors, where applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.net;
1: 
0: import java.rmi.UnexpectedException;
0: import java.sql.Connection;
1: import java.sql.SQLException;
1: import org.apache.derby.client.ClientPooledConnection;
0: import org.apache.derby.client.am.CallableStatement;
1: import org.apache.derby.client.am.ClientJDBCObjectFactory;
0: import org.apache.derby.client.am.PreparedStatement;
0: import org.apache.derby.client.am.Configuration;
1: import org.apache.derby.client.am.LogWriter;
1: import org.apache.derby.client.am.Agent;
1: import org.apache.derby.client.am.Section;
1: import org.apache.derby.client.am.SqlException;
1: import org.apache.derby.client.am.Cursor;
0: import org.apache.derby.jdbc.ClientDataSource;
1: 
1: /**
1:  * Implements the the ClientJDBCObjectFactory interface and returns the classes
0:  * that implement the JDBC3.0/2.0 interfaces
0:  * For Eg. newCallableStatement would return
0:  * org.apache.derby.client.am.CallableStatement
1:  */
1: 
1: public class ClientJDBCObjectFactoryImpl implements ClientJDBCObjectFactory{
1:     /**
0:      * Returns an instance of org.apache.derby.client.ClientPooledConnection 
1:      */
0:     public ClientPooledConnection newClientPooledConnection(ClientDataSource ds,
0:             LogWriter logWriter,String user,
1:             String password) throws SQLException {
1:         return new ClientPooledConnection(ds,logWriter,user,password);
1:     }
1:     /**
0:      * Returns an instance of org.apache.derby.client.ClientPooledConnection 
1:      */
0:     public ClientPooledConnection newClientPooledConnection(ClientDataSource ds,
0:             LogWriter logWriter,String user,
0:             String password,int rmId) throws SQLException {
0:         return new ClientPooledConnection(ds,logWriter,user,password,rmId);
1:     }
1:     /**
0:      * Returns an instance of org.apache.derby.client.am.CallableStatement
1:      */
0:     public CallableStatement newCallableStatement(Agent agent,
0:             org.apache.derby.client.am.Connection connection,
1:             String sql,int type,int concurrency,
0:             int holdability) throws SqlException {
0:         return new CallableStatement(agent,connection,sql,type,
0:                 concurrency,holdability);
1:     }
1:     
1:     /**
0:      * returns an instance of org.apache.derby.client.am.PreparedStatement
1:      */
0:     public PreparedStatement newPreparedStatement(Agent agent,
0:             org.apache.derby.client.am.Connection connection,
0:             String sql,Section section) throws SqlException {
0:         return new PreparedStatement(agent,connection,sql,section);
1:     }
1:      /**
0:      * returns an instance of org.apache.derby.client.am.PreparedStatement
1:      */
0:     public PreparedStatement newPreparedStatement(Agent agent,
0:             org.apache.derby.client.am.Connection connection,
1:             String sql,int type,int concurrency,int holdability,
0:             int autoGeneratedKeys,String [] columnNames)
0:             throws SqlException {
0:         return new PreparedStatement(agent,connection,sql,type,concurrency,
0:                 holdability,autoGeneratedKeys,columnNames);
1:     }
1:     /**
0:      * returns an instance of org.apache.derby.client.net.NetConnection
1:      */
0:     public org.apache.derby.client.am.Connection newNetConnection(
0:             org.apache.derby.client.am.LogWriter netLogWriter,
0:             String databaseName,java.util.Properties properties)
0:             throws SqlException {
0:         return (org.apache.derby.client.am.Connection)
0:         (new NetConnection((NetLogWriter)netLogWriter,databaseName,properties));
1:     }
1:     /**
0:      * returns an instance of org.apache.derby.client.net.NetConnection
1:      */
0:     public org.apache.derby.client.am.Connection newNetConnection(
0:             org.apache.derby.client.am.LogWriter netLogWriter,
0:             org.apache.derby.jdbc.ClientDataSource clientDataSource,
0:             String user,String password) throws SqlException {
0:         return  (org.apache.derby.client.am.Connection)
0:         (new NetConnection((NetLogWriter)netLogWriter,clientDataSource
0:                 ,user,password));
1:     }
1:     /**
0:      * returns an instance of org.apache.derby.client.net.NetConnection
1:      */
0:     public org.apache.derby.client.am.Connection newNetConnection(
0:             org.apache.derby.client.am.LogWriter netLogWriter,
0:             int driverManagerLoginTimeout,String serverName,
0:             int portNumber,String databaseName,
0:             java.util.Properties properties) throws SqlException {
0:         return (org.apache.derby.client.am.Connection)
0:         (new NetConnection((NetLogWriter)netLogWriter,driverManagerLoginTimeout,
0:                 serverName,portNumber,databaseName,properties));
1:     }
1:     /**
0:      * returns an instance of org.apache.derby.client.net.NetConnection
1:      */
0:     public org.apache.derby.client.am.Connection newNetConnection(
0:             org.apache.derby.client.am.LogWriter netLogWriter,String user,
0:             String password,
0:             org.apache.derby.jdbc.ClientDataSource dataSource,
0:             int rmId,boolean isXAConn) throws SqlException {
0:         return (org.apache.derby.client.am.Connection)
0:         (new NetConnection((NetLogWriter)netLogWriter,user,password,dataSource,rmId,
0:                 isXAConn));
1:     }
1:     /**
0:      * returns an instance of org.apache.derby.client.net.NetConnection
1:      */
0:     public org.apache.derby.client.am.Connection newNetConnection(
0:             org.apache.derby.client.am.LogWriter netLogWriter,
0:             String ipaddr,int portNumber,
0:             org.apache.derby.jdbc.ClientDataSource dataSource,
0:             boolean isXAConn) throws SqlException {
0:         return (org.apache.derby.client.am.Connection)
0:         new NetConnection((NetLogWriter)netLogWriter,ipaddr,portNumber,dataSource,
0:                 isXAConn);
1:     }
1:     /**
0:      * returns an instance of org.apache.derby.client.net.NetResultSet
1:      */
0:     public org.apache.derby.client.am.ResultSet newNetResultSet(Agent netAgent,
0:             org.apache.derby.client.am.MaterialStatement netStatement,
0:             Cursor cursor,int sqlcsrhld,int qryattscr,int qryattsns,
1:             int qryattset,long qryinsid,int actualResultSetType,
1:             int actualResultSetConcurrency,
1:             int actualResultSetHoldability) throws SqlException {
0:         return new NetResultSet((NetAgent)netAgent,(NetStatement)netStatement,cursor,sqlcsrhld,qryattscr,
1:                 qryattsns,qryattset,qryinsid,actualResultSetType,
1:                 actualResultSetConcurrency,actualResultSetHoldability);
1:     }
1:     /**
0:      * returns an instance of org.apache.derby.client.net.NetDatabaseMetaData
1:      */
0:     public org.apache.derby.client.am.DatabaseMetaData newNetDatabaseMetaData(Agent netAgent,
0:             org.apache.derby.client.am.Connection netConnection) {
1:         return new NetDatabaseMetaData((NetAgent)netAgent,
1:                 (NetConnection)netConnection);
1:     }
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:d6cf884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.StatementCacheInteractor;
/////////////////////////////////////////////////////////////////////////
1:      * @param cacheInteractor the statement cache interactor
1:     public LogicalPreparedStatement newLogicalPreparedStatement(
1:             StatementCacheInteractor cacheInteractor) {
1:         return new LogicalPreparedStatement(ps, stmtKey, cacheInteractor);
/////////////////////////////////////////////////////////////////////////
1:      * @param cacheInteractor the statement cache interactor
1:     public LogicalCallableStatement newLogicalCallableStatement(
1:             StatementCacheInteractor cacheInteractor) {
1:         return new LogicalCallableStatement(cs, stmtKey, cacheInteractor);
commit:1beab6c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.CachingLogicalConnection;
1: import org.apache.derby.client.am.LogicalCallableStatement;
1: import org.apache.derby.client.am.LogicalPreparedStatement;
1: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1: import org.apache.derby.client.am.stmtcache.StatementKey;
/////////////////////////////////////////////////////////////////////////
0:    /**
0:     * Returns an instance of a {@code CachingLogicalConnection}, which
0:     * provides caching of prepared statements.
1:     *
1:     * @param physicalConnection the underlying physical connection
1:     * @param pooledConnection the pooled connection
1:     * @param stmtCache statement cache
1:     * @return A logical connection with statement caching capabilities.
1:     *
1:     * @throws SqlException if creation of the logical connection fails
0:     */
1:     public LogicalConnection newCachingLogicalConnection(
0:             org.apache.derby.client.am.Connection physicalConnection,
1:             ClientPooledConnection pooledConnection,
1:             JDBCStatementCache stmtCache) throws SqlException {
1:         return new CachingLogicalConnection(physicalConnection,
1:                                             pooledConnection,
1:                                             stmtCache);
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:      * Returns a new logcial prepared statement object.
1:      *
1:      * @param ps underlying physical prepared statement
1:      * @param stmtKey key for the underlying physical prepared statement
0:      * @param stmtCache the statement cache
1:      * @return A logical prepared statement.
0:      */
0:     public java.sql.PreparedStatement newLogicalPreparedStatement(
0:             java.sql.PreparedStatement ps,
1:             StatementKey stmtKey,
0:             JDBCStatementCache stmtCache) {
0:         return new LogicalPreparedStatement(ps, stmtKey, stmtCache);
0:     }
0: 
0:     /**
1:      * Returns a new logical callable statement object.
1:      *
1:      * @param cs underlying physical callable statement
1:      * @param stmtKey key for the underlying physical callable statement
0:      * @param stmtCache the statement cache
1:      * @return A logical callable statement.
0:      */
0:     public java.sql.CallableStatement newLogicalCallableStatement(
0:             java.sql.CallableStatement cs,
1:             StatementKey stmtKey,
0:             JDBCStatementCache stmtCache) {
0:         return new LogicalCallableStatement(cs, stmtKey, stmtCache);
0:     }
0: 
0:     /**
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:b52081a
/////////////////////////////////////////////////////////////////////////
1:             int[] columnIndexes,
0:                 holdability,autoGeneratedKeys,columnNames, columnIndexes, cpc);
/////////////////////////////////////////////////////////////////////////
1:      * @param columnIndexes     int[]
/////////////////////////////////////////////////////////////////////////
1:                      int autoGeneratedKeys, String[] columnNames,
1:                      int[] columnIndexes) 
0:                  autoGeneratedKeys,columnNames, columnIndexes);
author:Army
-------------------------------------------------------------------------------
commit:8fcae92
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.ClientXAConnection;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.net.NetLogWriter;
0: import org.apache.derby.jdbc.ClientXADataSource;
/////////////////////////////////////////////////////////////////////////
0:      * Returns an instance of org.apache.derby.client.ClientXAConnection 
0:      */
0:     public ClientXAConnection newClientXAConnection(ClientBaseDataSource ds,
1:         LogWriter logWriter,String user, String password) throws SQLException
1:     {
0:         return new ClientXAConnection((ClientXADataSource)ds,
0:             (NetLogWriter)logWriter,user,password);
0:     }
0:     /**
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:c247315
/////////////////////////////////////////////////////////////////////////
1:             Cursor cursor,
1:             int qryprctyp,int sqlcsrhld,int qryattscr,int qryattsns,
1:         return new NetResultSet((NetAgent)netAgent,
1:                 (NetStatement)netStatement,cursor,qryprctyp,sqlcsrhld,qryattscr,
============================================================================