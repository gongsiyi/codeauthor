1:c1d0340: /*
1:c1d0340:  * Derby - Class org.apache.derby.client.am.DateTimeValue
1:c1d0340:  *
1:c1d0340:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c1d0340:  * contributor license agreements.  See the NOTICE file distributed with
1:c1d0340:  * this work for additional information regarding copyright ownership.
1:c1d0340:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c1d0340:  * (the "License"); you may not use this file except in compliance with
1:c1d0340:  * the License.  You may obtain a copy of the License at
1:c1d0340:  *
1:c1d0340:  *    http://www.apache.org/licenses/LICENSE-2.0
1:c1d0340:  *
1:c1d0340:  * Unless required by applicable law or agreed to in writing, software
1:c1d0340:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c1d0340:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c1d0340:  * See the License for the specific language governing permissions and
1:c1d0340:  * limitations under the License.
1:c1d0340:  */
1:c1d0340: 
1:c1d0340: package org.apache.derby.client.am;
1:c1d0340: 
1:c1d0340: import java.sql.Date;
1:c1d0340: import java.sql.Time;
1:c1d0340: import java.sql.Timestamp;
1:c1d0340: import java.util.Calendar;
1:c1d0340: 
1:c1d0340: /**
1:c1d0340:  * This class represents a date or time value as it is represented in the
1:c1d0340:  * database. In contrast to {@code java.sql.Date}, {@code java.sql.Time} and
1:c1d0340:  * {@code java.sql.Timestamp}, which are based on {@code java.util.Date}, this
1:c1d0340:  * class does <b>not</b> represent the time as an offset from midnight,
1:c1d0340:  * January 1, 1970 GMT. Instead, it holds each component (year, month, day,
1:c1d0340:  * hour, minute, second, nanosecond) as it would have been represented in a
1:c1d0340:  * given calendar. Since it does not hold information about the time zone for
1:c1d0340:  * the time it represents, it does not point to a well-defined point in time
1:c1d0340:  * without being used together with a {@code java.util.Calendar} object.
1:c1d0340:  */
1:c1d0340: public class DateTimeValue {
1:c1d0340:     private final int year;
1:c1d0340:     private final int month;
1:c1d0340:     private final int day;
1:c1d0340:     private final int hours;
1:c1d0340:     private final int minutes;
1:c1d0340:     private final int seconds;
1:c1d0340:     private final int nanos;
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Construct a {@code DateTimeValue} from a {@code java.util.Calendar}.
1:c1d0340:      *
1:c1d0340:      * @param cal the calendar from which to get the values of the fields
1:c1d0340:      * @param nanoFraction the nano second fraction of a second (the
1:c1d0340:      * milliseconds will be taken from {@code cal}, so only the six least
1:c1d0340:      * significant digits of this value are used)
1:c1d0340:      */
1:c1d0340:     private DateTimeValue(Calendar cal, int nanoFraction) {
1:c1d0340:         year = cal.get(Calendar.YEAR);
1:c1d0340:         month = cal.get(Calendar.MONTH);
1:c1d0340:         day = cal.get(Calendar.DAY_OF_MONTH);
1:c1d0340:         hours = cal.get(Calendar.HOUR_OF_DAY);
1:c1d0340:         minutes = cal.get(Calendar.MINUTE);
1:c1d0340:         seconds = cal.get(Calendar.SECOND);
1:c1d0340: 
1:c1d0340:         // In practice, we could probably just use nanoFraction directly here,
1:c1d0340:         // when it's set but since java.util.Calendar allows time zone offsets
1:c1d0340:         // to be specified in milliseconds, let's get the time zone adjusted
1:c1d0340:         // millisecond component too.
1:c1d0340:         int millis = cal.get(Calendar.MILLISECOND);
1:c1d0340:         nanos = (millis * 1000000) + (nanoFraction % 1000000);
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Create an instance from a {@code java.sql.Timestamp} using the specified
1:c1d0340:      * {@code java.util.Calendar}.
1:c1d0340:      */
1:0326967:     DateTimeValue(Date date, Calendar cal) {
1:c1d0340:         this(initCalendar(cal, date), 0);
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Create an instance from a {@code java.sql.Time} using the specified
1:c1d0340:      * {@code java.util.Calendar}.
1:c1d0340:      */
1:0326967:     DateTimeValue(Time time, Calendar cal) {
1:c1d0340:         this(initCalendar(cal, time), 0);
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Create an instance from a {@code java.sql.Timestamp} using the specified
1:c1d0340:      * {@code java.util.Calendar}.
1:c1d0340:      */
1:0326967:     DateTimeValue(Timestamp ts, Calendar cal) {
1:c1d0340:         this(initCalendar(cal, ts), ts.getNanos());
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Create an instance from a {@code java.sql.Date} using the default
1:c1d0340:      * calendar.
1:c1d0340:      */
1:c1d0340:     public DateTimeValue(Date date) {
1:c1d0340:         this(date, Calendar.getInstance());
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Create an instance from a {@code java.sql.Time} using the default
1:c1d0340:      * calendar.
1:c1d0340:      */
1:c1d0340:     public DateTimeValue(Time time) {
1:c1d0340:         this(time, Calendar.getInstance());
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Create an instance from a {@code java.sql.Timestamp} using the default
1:c1d0340:      * calendar.
1:c1d0340:      */
1:c1d0340:     public DateTimeValue(Timestamp ts) {
1:c1d0340:         this(ts, Calendar.getInstance());
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Set the time of a calendar.
1:c1d0340:      *
1:c1d0340:      * @param cal the calendar
1:c1d0340:      * @param date an object representing the new time of the calendar
1:c1d0340:      * @return the calendar (same as {@code cal})
1:c1d0340:      */
1:c1d0340:     private static Calendar initCalendar(Calendar cal, java.util.Date date) {
1:c1d0340:         cal.clear();
1:c1d0340:         cal.setTime(date);
1:c1d0340:         return cal;
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Get the year component.
1:c1d0340:      */
1:c1d0340:     public int getYear() {
1:c1d0340:         return year;
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Get the month component. First month is 0 ({@code Calendar.JANUARY}).
1:c1d0340:      */
1:c1d0340:     public int getMonth() {
1:c1d0340:         return month;
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Get day of month component. First day of the month is 1.
1:c1d0340:      */
1:c1d0340:     public int getDayOfMonth() {
1:c1d0340:         return day;
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Get hour of day component (24 hour clock).
1:c1d0340:      */
1:c1d0340:     public int getHours() {
1:c1d0340:         return hours;
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Get minute component.
1:c1d0340:      */
1:c1d0340:     public int getMinutes() {
1:c1d0340:         return minutes;
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Get second component.
1:c1d0340:      */
1:c1d0340:     public int getSeconds() {
1:c1d0340:         return seconds;
1:c1d0340:     }
1:c1d0340: 
1:c1d0340:     /**
1:c1d0340:      * Get nanosecond component.
1:c1d0340:      */
1:c1d0340:     public int getNanos() {
1:c1d0340:         return nanos;
1:c1d0340:     }
1:c1d0340: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:     DateTimeValue(Date date, Calendar cal) {
/////////////////////////////////////////////////////////////////////////
1:     DateTimeValue(Time time, Calendar cal) {
/////////////////////////////////////////////////////////////////////////
1:     DateTimeValue(Timestamp ts, Calendar cal) {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c1d0340
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derby.client.am.DateTimeValue
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.derby.client.am;
1: 
1: import java.sql.Date;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: import java.util.Calendar;
1: 
1: /**
1:  * This class represents a date or time value as it is represented in the
1:  * database. In contrast to {@code java.sql.Date}, {@code java.sql.Time} and
1:  * {@code java.sql.Timestamp}, which are based on {@code java.util.Date}, this
1:  * class does <b>not</b> represent the time as an offset from midnight,
1:  * January 1, 1970 GMT. Instead, it holds each component (year, month, day,
1:  * hour, minute, second, nanosecond) as it would have been represented in a
1:  * given calendar. Since it does not hold information about the time zone for
1:  * the time it represents, it does not point to a well-defined point in time
1:  * without being used together with a {@code java.util.Calendar} object.
1:  */
1: public class DateTimeValue {
1:     private final int year;
1:     private final int month;
1:     private final int day;
1:     private final int hours;
1:     private final int minutes;
1:     private final int seconds;
1:     private final int nanos;
1: 
1:     /**
1:      * Construct a {@code DateTimeValue} from a {@code java.util.Calendar}.
1:      *
1:      * @param cal the calendar from which to get the values of the fields
1:      * @param nanoFraction the nano second fraction of a second (the
1:      * milliseconds will be taken from {@code cal}, so only the six least
1:      * significant digits of this value are used)
1:      */
1:     private DateTimeValue(Calendar cal, int nanoFraction) {
1:         year = cal.get(Calendar.YEAR);
1:         month = cal.get(Calendar.MONTH);
1:         day = cal.get(Calendar.DAY_OF_MONTH);
1:         hours = cal.get(Calendar.HOUR_OF_DAY);
1:         minutes = cal.get(Calendar.MINUTE);
1:         seconds = cal.get(Calendar.SECOND);
1: 
1:         // In practice, we could probably just use nanoFraction directly here,
1:         // when it's set but since java.util.Calendar allows time zone offsets
1:         // to be specified in milliseconds, let's get the time zone adjusted
1:         // millisecond component too.
1:         int millis = cal.get(Calendar.MILLISECOND);
1:         nanos = (millis * 1000000) + (nanoFraction % 1000000);
1:     }
1: 
1:     /**
1:      * Create an instance from a {@code java.sql.Timestamp} using the specified
1:      * {@code java.util.Calendar}.
1:      */
0:     public DateTimeValue(Date date, Calendar cal) {
1:         this(initCalendar(cal, date), 0);
1:     }
1: 
1:     /**
1:      * Create an instance from a {@code java.sql.Time} using the specified
1:      * {@code java.util.Calendar}.
1:      */
0:     public DateTimeValue(Time time, Calendar cal) {
1:         this(initCalendar(cal, time), 0);
1:     }
1: 
1:     /**
1:      * Create an instance from a {@code java.sql.Timestamp} using the specified
1:      * {@code java.util.Calendar}.
1:      */
0:     public DateTimeValue(Timestamp ts, Calendar cal) {
1:         this(initCalendar(cal, ts), ts.getNanos());
1:     }
1: 
1:     /**
1:      * Create an instance from a {@code java.sql.Date} using the default
1:      * calendar.
1:      */
1:     public DateTimeValue(Date date) {
1:         this(date, Calendar.getInstance());
1:     }
1: 
1:     /**
1:      * Create an instance from a {@code java.sql.Time} using the default
1:      * calendar.
1:      */
1:     public DateTimeValue(Time time) {
1:         this(time, Calendar.getInstance());
1:     }
1: 
1:     /**
1:      * Create an instance from a {@code java.sql.Timestamp} using the default
1:      * calendar.
1:      */
1:     public DateTimeValue(Timestamp ts) {
1:         this(ts, Calendar.getInstance());
1:     }
1: 
1:     /**
1:      * Set the time of a calendar.
1:      *
1:      * @param cal the calendar
1:      * @param date an object representing the new time of the calendar
1:      * @return the calendar (same as {@code cal})
1:      */
1:     private static Calendar initCalendar(Calendar cal, java.util.Date date) {
1:         cal.clear();
1:         cal.setTime(date);
1:         return cal;
1:     }
1: 
1:     /**
1:      * Get the year component.
1:      */
1:     public int getYear() {
1:         return year;
1:     }
1: 
1:     /**
1:      * Get the month component. First month is 0 ({@code Calendar.JANUARY}).
1:      */
1:     public int getMonth() {
1:         return month;
1:     }
1: 
1:     /**
1:      * Get day of month component. First day of the month is 1.
1:      */
1:     public int getDayOfMonth() {
1:         return day;
1:     }
1: 
1:     /**
1:      * Get hour of day component (24 hour clock).
1:      */
1:     public int getHours() {
1:         return hours;
1:     }
1: 
1:     /**
1:      * Get minute component.
1:      */
1:     public int getMinutes() {
1:         return minutes;
1:     }
1: 
1:     /**
1:      * Get second component.
1:      */
1:     public int getSeconds() {
1:         return seconds;
1:     }
1: 
1:     /**
1:      * Get nanosecond component.
1:      */
1:     public int getNanos() {
1:         return nanos;
1:     }
1: }
============================================================================