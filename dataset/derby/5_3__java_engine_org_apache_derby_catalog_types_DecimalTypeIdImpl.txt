1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.catalog.types.DecimalTypeIdImpl
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.catalog.types;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import java.sql.Types;
1:eac0369: 
1:eac0369: public class DecimalTypeIdImpl extends BaseTypeIdImpl
1:eac0369: {
1:506f4c8: 	/**
1:506f4c8: 	 * Public niladic constructor. Needed for Serializable interface to work.
1:506f4c8: 	 *
1:506f4c8: 	 */
1:506f4c8: 	public	DecimalTypeIdImpl() { super(); }
1:506f4c8: 
1:eac0369: 	/* this class is needed because writeexternal for this class stores
1:eac0369: 	   extra information; when the object is sent over the wire the niladic
1:eac0369: 	   constructor is first called and then we call the readExternal method. 
1:eac0369: 	   the readExternal needs to know the formatId atleast for decimal types
1:eac0369: 	   to read the extra information.
1:eac0369: 	*/
1:2afe578: 	public DecimalTypeIdImpl(boolean isNumeric) 
1:eac0369: 	{
1:eac0369: 		super(StoredFormatIds.DECIMAL_TYPE_ID_IMPL);
1:2afe578:         if (isNumeric)
1:2afe578:             setNumericType();
1:eac0369: 	}
1:eac0369: 	
2:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal( ObjectInput in )
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		boolean isNumeric = in.readBoolean();
1:eac0369: 
1:eac0369: 		super.readExternal(in);
1:eac0369: 
1:eac0369: 		if (isNumeric)
1:eac0369: 		{
1:eac0369: 			setNumericType();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Write this object to a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal( ObjectOutput out )
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:2afe578: 		out.writeBoolean(getJDBCTypeId() == Types.NUMERIC);
1:eac0369: 
1:eac0369: 		super.writeExternal(out);
1:eac0369: 	}
1:eac0369: 
1:2afe578: 	private void setNumericType()
1:eac0369: 	{
1:d039ced: 		unqualifiedName = "NUMERIC";
1:eac0369: 		JDBCTypeId = Types.NUMERIC;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:506f4c8
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Public niladic constructor. Needed for Serializable interface to work.
1: 	 *
1: 	 */
1: 	public	DecimalTypeIdImpl() { super(); }
1: 
commit:d039ced
/////////////////////////////////////////////////////////////////////////
1: 		unqualifiedName = "NUMERIC";
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2afe578
/////////////////////////////////////////////////////////////////////////
1: 	public DecimalTypeIdImpl(boolean isNumeric) 
1:         if (isNumeric)
1:             setNumericType();
/////////////////////////////////////////////////////////////////////////
1: 		out.writeBoolean(getJDBCTypeId() == Types.NUMERIC);
1: 	private void setNumericType()
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.catalog.types.DecimalTypeIdImpl
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.catalog.types;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import java.sql.Types;
1: 
1: public class DecimalTypeIdImpl extends BaseTypeIdImpl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 	/* this class is needed because writeexternal for this class stores
1: 	   extra information; when the object is sent over the wire the niladic
1: 	   constructor is first called and then we call the readExternal method. 
1: 	   the readExternal needs to know the formatId atleast for decimal types
1: 	   to read the extra information.
1: 	*/
0: 	public DecimalTypeIdImpl() 
1: 	{
1: 		super(StoredFormatIds.DECIMAL_TYPE_ID_IMPL);
1: 	}
1: 	
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		boolean isNumeric = in.readBoolean();
1: 
1: 		super.readExternal(in);
1: 
1: 		if (isNumeric)
1: 		{
1: 			setNumericType();
1: 		}
1: 
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
0: 		out.writeBoolean(JDBCTypeId == Types.NUMERIC);
1: 
1: 		super.writeExternal(out);
1: 	}
1: 
0: 	public void setNumericType()
1: 	{
0: 		SQLTypeName = "NUMERIC";
1: 		JDBCTypeId = Types.NUMERIC;
1: 	}
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.catalog.types;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import java.sql.Types;
0: 
0: public class DecimalTypeIdImpl extends BaseTypeIdImpl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	/* this class is needed because writeexternal for this class stores
0: 	   extra information; when the object is sent over the wire the niladic
0: 	   constructor is first called and then we call the readExternal method. 
0: 	   the readExternal needs to know the formatId atleast for decimal types
0: 	   to read the extra information.
0: 	*/
0: 	public DecimalTypeIdImpl() 
0: 	{
0: 		super(StoredFormatIds.DECIMAL_TYPE_ID_IMPL);
0: 	}
0: 	
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		boolean isNumeric = in.readBoolean();
0: 
0: 		super.readExternal(in);
0: 
0: 		if (isNumeric)
0: 		{
0: 			setNumericType();
0: 		}
0: 
0: 	}
0: 
0: 	/**
0: 	 * Write this object to a stream of stored objects.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
0: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
0: 	{
0: 		out.writeBoolean(JDBCTypeId == Types.NUMERIC);
0: 
0: 		super.writeExternal(out);
0: 	}
0: 
0: 	public void setNumericType()
0: 	{
0: 		SQLTypeName = "NUMERIC";
0: 		JDBCTypeId = Types.NUMERIC;
0: 	}
0: }
============================================================================