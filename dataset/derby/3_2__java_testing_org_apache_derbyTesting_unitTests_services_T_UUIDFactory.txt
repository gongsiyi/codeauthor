1:2bc809f: /*
4:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_UUIDFactory
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedAction;
1:56c1dc2: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: 
1:2bc809f: import  org.apache.derby.catalog.UUID;
1:2bc809f: 
1:56c1dc2: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 	Test to ensure a implementation of the UUID module
1:2bc809f: 	implements the protocol correctly. 
1:2bc809f: */
1:2bc809f: 
1:2bc809f: public class T_UUIDFactory extends T_Generic {
1:2bc809f: 
1:2bc809f: 	protected UUIDFactory factory;
1:2bc809f: 	boolean resultSoFar;
1:2bc809f: 
1:2bc809f: 	public 	T_UUIDFactory() {
1:2bc809f: 		super();
3:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	protected String getModuleToTestProtocolName() {
1:2bc809f: 
1:2bc809f: 		return "A.Dummy.Name";
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Run all the tests, each test that starts with 'S' is a single user
1:2bc809f: 		test, each test that starts with 'M' is a multi-user test.
1:2bc809f: 
1:2bc809f: 		@exception T_Fail The test failed in some way.
1:2bc809f: 	*/
1:2bc809f: 	protected void runTests() throws T_Fail {
1:2bc809f: 
1:56c1dc2: 		factory = getMonitor().getUUIDFactory();
1:2bc809f: 		if (factory == null) {
1:2bc809f: 			throw T_Fail.testFailMsg(getModuleToTestProtocolName() + " module not started.");
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (!testUUID())
1:2bc809f: 			throw T_Fail.testFailMsg("testUUID indicated failure");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Tests
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	protected boolean testUUID() {
1:2bc809f: 		resultSoFar = true;
1:2bc809f: 
1:2bc809f: 		UUID uuid1 = factory.createUUID();
1:2bc809f: 		UUID uuid2 = factory.createUUID();
1:2bc809f: 
1:2bc809f: 		if (uuid1.equals(uuid2)){
2:2bc809f: 			// Resolve: format this with a message factory
2:2bc809f: 			String message =  
1:2bc809f: 				"UUID factory created matching UUIDS '%0' and '%1'";
2:2bc809f: 			out.printlnWithHeader(message);
2:2bc809f: 			resultSoFar =  false;
1:2bc809f: 		}
1:56c1dc2: 
1:2bc809f: 		if (!uuid1.equals(uuid1)){
1:2bc809f: 			// Resolve: format this with a message factory
1:2bc809f: 			String message = 
1:2bc809f: 				"UUID '%0' does not equal itself";
1:2bc809f: 			resultSoFar =  false;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (uuid1.hashCode() != uuid1.hashCode()){
1:2bc809f: 			// Resolve: format this with a message factory
1:2bc809f: 			String message = 
1:2bc809f: 				"UUID '%0' does not hash to the same thing twice.";
1:2bc809f: 			out.printlnWithHeader(message);
1:2bc809f: 			resultSoFar =  false;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		// Check that we can go from UUID to string and back.
1:2bc809f: 		
1:2bc809f: 		String suuid1 = uuid1.toString();
1:2bc809f: 		UUID uuid3 = factory.recreateUUID(suuid1);
1:2bc809f: 		if (!uuid3.equals(uuid1)){
1:2bc809f: 			// Resolve: format this with a message factory
1:2bc809f: 			String message = 
1:2bc809f: 				"Couldn't recreate UUID: "
1:2bc809f: 				+ uuid3.toString() 
2:2bc809f: 				+ " != "
1:2bc809f: 				+ uuid1.toString();
1:2bc809f: 			out.printlnWithHeader(message);
1:2bc809f: 			resultSoFar =  false;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		// Check that we can transform from string to UUID and back
1:2bc809f: 		// for a few "interesting" UUIDs.
1:2bc809f: 
1:2bc809f: 		// This one came from GUIDGEN.EXE.
1:2bc809f: 		testUUIDConversions(out, "7878FCD0-DA09-11d0-BAFE-0060973F0942");
1:2bc809f: 
1:2bc809f: 		// Interesting bit patterns.
1:2bc809f: 		testUUIDConversions(out, "80706050-4030-2010-8070-605040302010");
1:2bc809f: 		testUUIDConversions(out, "f0e0d0c0-b0a0-9080-7060-504030201000");
1:2bc809f: 		testUUIDConversions(out, "00000000-0000-0000-0000-000000000000");
1:2bc809f: 		testUUIDConversions(out, "ffffffff-ffff-ffff-ffff-ffffffffffff");
1:2bc809f: 
1:2bc809f: 		// A couple self-generated ones for good measure.
1:2bc809f: 		testUUIDConversions(out, factory.createUUID().toString());
1:2bc809f:  		testUUIDConversions(out, factory.createUUID().toString());
1:2bc809f: 
1:2bc809f: 		return resultSoFar;
1:2bc809f: 	
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private void testUUIDConversions(HeaderPrintWriter out, String uuidstring)
3:2bc809f: 	{
1:2bc809f: 		UUID uuid = factory.recreateUUID(uuidstring);
1:2bc809f: 		if (!uuidstring.equalsIgnoreCase(uuid.toString())){
1:2bc809f: 			// Resolve: format this with a message factory
1:2bc809f: 			String message = 
1:2bc809f: 				"Couldn't recreate UUID String: "
2:2bc809f: 				+ uuidstring 
1:2bc809f: 				+ " != " 
1:2bc809f: 				+ uuid.toString();
1:2bc809f: 			out.printlnWithHeader(message);
1:2bc809f: 			resultSoFar =  false;
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged Monitor lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  ModuleFactory  getMonitor()
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ModuleFactory>()
1:56c1dc2:              {
1:56c1dc2:                  public ModuleFactory run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getMonitor();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:2bc809f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: import org.apache.derby.iapi.services.monitor.ModuleFactory;
/////////////////////////////////////////////////////////////////////////
1: 		factory = getMonitor().getUUIDFactory();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged Monitor lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ModuleFactory  getMonitor()
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ModuleFactory>()
1:              {
1:                  public ModuleFactory run()
1:                  {
1:                      return Monitor.getMonitor();
1:                  }
1:              }
1:              );
1:     }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b9bd28c
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_UUIDFactory
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: 
1: import  org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: 
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: 
1: /**
1: 	Test to ensure a implementation of the UUID module
1: 	implements the protocol correctly. 
1: */
1: 
1: public class T_UUIDFactory extends T_Generic {
1: 
1: 	protected UUIDFactory factory;
1: 	boolean resultSoFar;
1: 
1: 	public 	T_UUIDFactory() {
1: 		super();
1: 	}
1: 
1: 	protected String getModuleToTestProtocolName() {
1: 
1: 		return "A.Dummy.Name";
1: 	}
1: 
1: 	/**
1: 		Run all the tests, each test that starts with 'S' is a single user
1: 		test, each test that starts with 'M' is a multi-user test.
1: 
1: 		@exception T_Fail The test failed in some way.
1: 	*/
1: 	protected void runTests() throws T_Fail {
1: 
0: 		factory = Monitor.getMonitor().getUUIDFactory();
1: 		if (factory == null) {
1: 			throw T_Fail.testFailMsg(getModuleToTestProtocolName() + " module not started.");
1: 		}
1: 
1: 		if (!testUUID())
1: 			throw T_Fail.testFailMsg("testUUID indicated failure");
1: 	}
1: 
1: 
1: 	/*
1: 	** Tests
1: 	*/
1: 
1: 	protected boolean testUUID() {
1: 		resultSoFar = true;
1: 
1: 		UUID uuid1 = factory.createUUID();
1: 		UUID uuid2 = factory.createUUID();
1: 
1: 		if (uuid1.equals(uuid2)){
1: 			// Resolve: format this with a message factory
1: 			String message =  
1: 				"UUID factory created matching UUIDS '%0' and '%1'";
1: 			out.printlnWithHeader(message);
1: 			resultSoFar =  false;
1: 		}
1: 
1: 		if (!uuid1.equals(uuid1)){
1: 			// Resolve: format this with a message factory
1: 			String message = 
1: 				"UUID '%0' does not equal itself";
1: 			resultSoFar =  false;
1: 		}
1: 
1: 		if (uuid1.hashCode() != uuid1.hashCode()){
1: 			// Resolve: format this with a message factory
1: 			String message = 
1: 				"UUID '%0' does not hash to the same thing twice.";
1: 			out.printlnWithHeader(message);
1: 			resultSoFar =  false;
1: 		}
1: 
1: 		// Check that we can go from UUID to string and back.
1: 		
1: 		String suuid1 = uuid1.toString();
1: 		UUID uuid3 = factory.recreateUUID(suuid1);
1: 		if (!uuid3.equals(uuid1)){
1: 			// Resolve: format this with a message factory
1: 			String message = 
1: 				"Couldn't recreate UUID: "
1: 				+ uuid3.toString() 
1: 				+ " != "
1: 				+ uuid1.toString();
1: 			out.printlnWithHeader(message);
1: 			resultSoFar =  false;
1: 		}
1: 
1: 		// Check that we can transform from string to UUID and back
1: 		// for a few "interesting" UUIDs.
1: 
1: 		// This one came from GUIDGEN.EXE.
1: 		testUUIDConversions(out, "7878FCD0-DA09-11d0-BAFE-0060973F0942");
1: 
1: 		// Interesting bit patterns.
1: 		testUUIDConversions(out, "80706050-4030-2010-8070-605040302010");
1: 		testUUIDConversions(out, "f0e0d0c0-b0a0-9080-7060-504030201000");
1: 		testUUIDConversions(out, "00000000-0000-0000-0000-000000000000");
1: 		testUUIDConversions(out, "ffffffff-ffff-ffff-ffff-ffffffffffff");
1: 
1: 		// A couple self-generated ones for good measure.
1: 		testUUIDConversions(out, factory.createUUID().toString());
1:  		testUUIDConversions(out, factory.createUUID().toString());
1: 
1: 		return resultSoFar;
1: 	
1: 	}
1: 
1: 	private void testUUIDConversions(HeaderPrintWriter out, String uuidstring)
1: 	{
1: 		UUID uuid = factory.recreateUUID(uuidstring);
1: 		if (!uuidstring.equalsIgnoreCase(uuid.toString())){
1: 			// Resolve: format this with a message factory
1: 			String message = 
1: 				"Couldn't recreate UUID String: "
1: 				+ uuidstring 
1: 				+ " != " 
1: 				+ uuid.toString();
1: 			out.printlnWithHeader(message);
1: 			resultSoFar =  false;
1: 		}
1: 
0: 		byte[] uuidByteArray = uuid.toByteArray();
0: 		UUID uuid_b = factory.recreateUUID(uuidByteArray);
0: 		if (!uuid_b.equals(uuid))
1: 		{
1: 			// Resolve: format this with a message factory
0: 			String badByteArrayString = "";
0: 			for (int ix = 0; ix < 16; ix++)
1: 			{
0: 				badByteArrayString +=
0: 					Integer.toHexString(0x00ff&uuidByteArray[ix])+".";
1: 			}
1: 
1: 			String message = 
0: 				"Conversion error: "
1: 				+ uuidstring 
1: 				+ " != " 
0: 				+ badByteArrayString;
1: 			out.printlnWithHeader(message);
1: 			resultSoFar =  false;
1: 		}
1: 	}
1: }
============================================================================