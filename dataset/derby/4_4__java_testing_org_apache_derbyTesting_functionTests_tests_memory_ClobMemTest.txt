1:b52ccdf: /**
1:b52ccdf:  * Derby - Class org.apache.derbyTesting.functionTests.tests.memory.ClobMemTest
1:b52ccdf:  *
1:b52ccdf:  * Licensed to the Apache Software Foundation (ASF) under one
1:b52ccdf:  * or more contributor license agreements.  See the NOTICE file
1:b52ccdf:  * distributed with this work for additional information
1:b52ccdf:  * regarding copyright ownership.  The ASF licenses this file
1:b52ccdf:  * to you under the Apache License, Version 2.0 (the
1:b52ccdf:  * "License"); you may not use this file except in compliance
1:b52ccdf:  * with the License.  You may obtain a copy of the License at
1:b52ccdf:  *
1:b52ccdf:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b52ccdf:  *
1:b52ccdf:  * Unless required by applicable law or agreed to in writing,
1:b52ccdf:  * software distributed under the License is distributed on an
1:b52ccdf:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b52ccdf:  * KIND, either express or implied.  See the License for the
1:b52ccdf:  * specific language governing permissions and limitations
1:b52ccdf:  * under the License.
1:b52ccdf:  */
1:b52ccdf: package org.apache.derbyTesting.functionTests.tests.memory;
7:b52ccdf: 
1:b52ccdf: import java.io.IOException;
1:b52ccdf: import java.io.InputStream;
1:b52ccdf: import java.io.Reader;
1:b52ccdf: import java.lang.reflect.InvocationTargetException;
1:b52ccdf: import java.lang.reflect.Method;
1:b52ccdf: import java.sql.PreparedStatement;
1:b52ccdf: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:1ae02c9: import java.util.Arrays;
1:1ae02c9: import java.util.Properties;
1:b52ccdf: import junit.framework.Test;
1:b52ccdf: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1:b52ccdf: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:b52ccdf: import org.apache.derbyTesting.junit.JDBC;
1:b52ccdf: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:b52ccdf: import org.apache.derbyTesting.junit.TestConfiguration;
1:b52ccdf: 
1:b52ccdf: public class ClobMemTest extends BaseJDBCTestCase {
1:b52ccdf: 
1:b52ccdf:     private static final int LONG_CLOB_LENGTH = 18000000;
1:b52ccdf:     private static final String LONG_CLOB_LENGTH_STRING= "18000000";
1:b52ccdf:     private static final char[] SHORT_CLOB_CHARS = new char[] {'\uc911','\uc5d0','a', '\uc608', '\uae30',
1:b52ccdf:             '\uce58'};
1:b52ccdf: 
1:b52ccdf:     public ClobMemTest(String name) {
1:b52ccdf:         super(name);
2:b52ccdf:     }
1:b52ccdf: 
1:55bc97f:     /**
1:b52ccdf:      * Insert a clob and test length.
1:b52ccdf:      *
1:b52ccdf:      * @param lengthless  if true use the lengthless setCharacterStream api
1:b52ccdf:      *
1:b52ccdf:      * @throws SQLException
1:b52ccdf:      * @throws IOException
1:b52ccdf:      * @throws InvocationTargetException
1:b52ccdf:      * @throws IllegalAccessException
1:b52ccdf:      * @throws IllegalArgumentException
1:b52ccdf:      */
1:b52ccdf:     private void testClobLength(boolean lengthless) throws SQLException, IOException, IllegalArgumentException,
1:b52ccdf:             IllegalAccessException, InvocationTargetException {
1:b52ccdf:         setAutoCommit(false);
1:b52ccdf:         Statement s = createStatement();
1:b52ccdf:         s.executeUpdate("CREATE TABLE CLOBTABLE (K INT CONSTRAINT PK PRIMARY KEY, C CLOB(" + LONG_CLOB_LENGTH + "))");
1:b52ccdf: 
1:b52ccdf:         PreparedStatement ps = prepareStatement("INSERT INTO CLOBTABLE VALUES(?,?)");
1:b52ccdf:         // We allocate 16MB for the test so use something bigger than that.
1:b52ccdf:         ps.setInt(1,1);
1:b52ccdf:         LoopingAlphabetReader reader = new LoopingAlphabetReader(LONG_CLOB_LENGTH);
1:b52ccdf:         if (lengthless) {
1:b52ccdf:             Method m = null;
1:b52ccdf:             try {
1:3f5c48a:                 Class<?> c = ps.getClass();
1:b52ccdf:                 m = c.getMethod("setCharacterStream",new Class[] {Integer.TYPE,
1:b52ccdf:                             InputStream.class});
1:b52ccdf:             } catch (NoSuchMethodException e) {
1:b52ccdf:                 // ignore method not found as method may not be present for
1:b52ccdf:                 // jdk's lower than 1.6.
1:b52ccdf:                 println("Skipping lengthless insert because method is not available");
1:b52ccdf:                 return;
1:b52ccdf:             }
1:39b3237:             m.invoke(ps, new Object[] {2, reader});
1:b52ccdf:         }
1:b52ccdf:         else
1:b52ccdf:             ps.setCharacterStream(2, reader, LONG_CLOB_LENGTH);
1:b52ccdf:         ps.executeUpdate();
1:b52ccdf:         // insert a zero length clob.
1:b52ccdf:         ps.setInt(1, 2);
1:b52ccdf:         ps.setString(2, "");
1:b52ccdf:         ps.executeUpdate();
1:b52ccdf:         // insert a null clob.
1:b52ccdf:         ps.setInt(1, 3);
1:b52ccdf:         ps.setString(2,null);
1:b52ccdf:         ps.executeUpdate();
1:b52ccdf:         // insert a short clob
1:b52ccdf:         ps.setInt(1, 4);
1:b52ccdf:         ps.setString(2, new String(SHORT_CLOB_CHARS));
1:b52ccdf:         ps.executeUpdate();
1:b52ccdf:         // Currently need to use optimizer override to force use of the index.
1:b52ccdf:         // Derby should use sort avoidance and do it automatically, but there
1:b52ccdf:         // appears to be a bug.
1:b52ccdf:         ResultSet rs = s.executeQuery("SELECT K, LENGTH(C), C FROM CLOBTABLE" +
1:b52ccdf:                 "-- DERBY-PROPERTIES constraint=pk\n ORDER BY K");
1:b52ccdf:         rs.next();
1:b52ccdf:         assertEquals(LONG_CLOB_LENGTH_STRING,rs.getString(2));
1:b52ccdf:         // make sure we can still access the clob after getting length.
1:b52ccdf:         // It should be ok because we reset the stream
1:b52ccdf:         Reader rsReader = rs.getCharacterStream(3);
1:b52ccdf:         int len= 0;
1:b52ccdf:         char[] buf = new char[32672];
1:b52ccdf:         for (;;)  {
1:b52ccdf:                 int size = rsReader.read(buf);
1:b52ccdf:                 if (size == -1)
1:b52ccdf:                         break;
1:b52ccdf:                 len += size;
1:b52ccdf:                 int expectedValue = ((len -1) % 26) + 'a';
1:b52ccdf:                 if (size != 0)
1:b52ccdf:                     assertEquals(expectedValue,buf[size -1]);
1:b52ccdf:         }
1:b52ccdf: 
1:b52ccdf:         assertEquals(LONG_CLOB_LENGTH,len);
1:b52ccdf:         // empty clob
1:b52ccdf:         rs.next();
1:b52ccdf:         assertEquals("0",rs.getString(2));
1:b52ccdf:         String chars = rs.getString(3);
1:b52ccdf:         assertEquals(0, chars.length());
1:b52ccdf:         // null clob
1:b52ccdf:         rs.next();
1:b52ccdf:         assertEquals(null, rs.getString(2));
1:b52ccdf:         chars = rs.getString(3);
1:b52ccdf:         assertEquals(null, chars);
1:b52ccdf:         // short clob
1:b52ccdf:         rs.next();
1:b52ccdf:         assertEquals("" + SHORT_CLOB_CHARS.length , rs.getString(2));
1:b52ccdf:         chars = rs.getString(3);
1:b52ccdf:         assertTrue(Arrays.equals(chars.toCharArray(), SHORT_CLOB_CHARS));
1:b52ccdf:         rs.close();
1:b52ccdf: 
1:b52ccdf:         // Select just length without selecting the clob.
1:b52ccdf:         rs = s.executeQuery("SELECT K, LENGTH(C)  FROM CLOBTABLE " +
1:b52ccdf:                 "ORDER BY K");
1:b52ccdf:         JDBC.assertFullResultSet(rs, new String [][] {{"1",LONG_CLOB_LENGTH_STRING},{"2","0"},
1:b52ccdf:                 {"3",null},{"4","6"}});
1:b52ccdf:     }
1:b52ccdf: 
1:b52ccdf:     /**
1:b52ccdf:      * Test the length after inserting with the setCharacterStream api
1:b52ccdf:      * that takes length.  In this case the length will be encoded at the
1:b52ccdf:      * begining of the stream and the call should be fairly low overhead.
1:b52ccdf:      *
1:b52ccdf:      * @throws SQLException
1:b52ccdf:      * @throws IOException
1:b52ccdf:      * @throws InvocationTargetException
1:b52ccdf:      * @throws IllegalAccessException
1:b52ccdf:      * @throws IllegalArgumentException
1:b52ccdf:      */
1:b52ccdf:     public void testClobLength() throws SQLException, IOException, IllegalArgumentException, IllegalAccessException,
1:b52ccdf:             InvocationTargetException {
1:b52ccdf:         testClobLength(false);
1:b52ccdf:     }
1:b52ccdf: 
1:b52ccdf:     /**
1:b52ccdf:      * Test the length after inserting the clob value with the lengthless
1:b52ccdf:      * setCharacterStream api. In this case we will have to read the whole
1:b52ccdf:      * stream to get the length.
1:b52ccdf:      *
1:b52ccdf:      * @throws SQLException
1:b52ccdf:      * @throws IOException
1:b52ccdf:      * @throws InvocationTargetException
1:b52ccdf:      * @throws IllegalAccessException
1:b52ccdf:      * @throws IllegalArgumentException
1:b52ccdf:      */
1:b52ccdf:     public void testClobLengthWithLengthlessInsert() throws SQLException, IOException, IllegalArgumentException,
1:b52ccdf:             IllegalAccessException, InvocationTargetException {
1:b52ccdf:         testClobLength(true);
1:b52ccdf:     }
1:b52ccdf: 
1:b52ccdf:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite =  new BaseTestSuite();
1:7f0f775:         // Just add Derby-6096 embedded as it takes time to run
1:7f0f775:         suite.addTest(new ClobMemTest("xtestderby6096ClobHashJoin"));
1:7f0f775:         suite.addTest(TestConfiguration.defaultSuite(ClobMemTest.class));
1:b52ccdf:         Properties p = new Properties();
1:b52ccdf:         // use small pageCacheSize so we don't run out of memory on the insert.
1:b52ccdf:         p.setProperty("derby.storage.pageCacheSize", "100");
1:b52ccdf:         return new SystemPropertyTestSetup(suite,p);
1:b52ccdf:     }
1:b52ccdf: 
1:b52ccdf: 
1:b52ccdf:     /**
1:55bc97f:      * Tests that a clob can be safely occur multiple times in a SQL
1:55bc97f:      * select and test that large objects streams are not being
1:55bc97f:      * materialized when cloned.  Same as
1:55bc97f:      * testDerby4477_3645_3646_Repro_lowmem, but now using clob rather
1:55bc97f:      * than blob.
1:55bc97f:      * @see BlobMemTest#testDerby4477_3645_3646_Repro_lowmem
1:55bc97f:      */
1:55bc97f:     public void testDerby4477_3645_3646_Repro_lowmem_clob()
1:55bc97f:             throws SQLException, IOException {
1:55bc97f: 
1:55bc97f:         setAutoCommit(false);
1:55bc97f: 
1:55bc97f:         Statement s = createStatement();
1:2d733d9:         int clobsize = LONG_CLOB_LENGTH;
1:b52ccdf: 
1:55bc97f:         s.executeUpdate(
1:55bc97f:             "CREATE TABLE T_MAIN(" +
1:55bc97f:             "ID INT  GENERATED ALWAYS AS IDENTITY PRIMARY KEY, " +
1:55bc97f:             "V CLOB(" + clobsize + ") )");
1:55bc97f: 
1:55bc97f:         PreparedStatement ps = prepareStatement(
1:55bc97f:             "INSERT INTO T_MAIN(V) VALUES (?)");
1:55bc97f: 
1:55bc97f:         int blobLen = clobsize;
1:55bc97f:         LoopingAlphabetReader stream = new LoopingAlphabetReader(blobLen);
1:55bc97f:         ps.setCharacterStream(1, stream, blobLen);
1:55bc97f: 
1:55bc97f:         ps.executeUpdate();
1:55bc97f:         ps.close();
1:55bc97f: 
1:55bc97f:         s.executeUpdate("CREATE TABLE T_COPY ( V1 CLOB(" + clobsize +
1:55bc97f:                         "), V2 CLOB(" + clobsize + "))");
1:55bc97f: 
1:55bc97f:         // This failed in the repro for DERBY-3645 solved as part of
1:55bc97f:         // DERBY-4477:
1:55bc97f:         s.executeUpdate("INSERT INTO T_COPY SELECT  V, V FROM T_MAIN");
1:55bc97f: 
1:55bc97f:         // Check that the two results are identical:
1:55bc97f:         ResultSet rs = s.executeQuery("SELECT * FROM T_COPY");
1:55bc97f:         rs.next();
1:55bc97f:         Reader is = rs.getCharacterStream(1);
1:55bc97f: 
1:51826c3:         stream = new LoopingAlphabetReader(blobLen);
1:55bc97f:         assertEquals(stream, is);
1:55bc97f: 
1:55bc97f:         is = rs.getCharacterStream(2);
1:55bc97f: 
1:51826c3:         stream = new LoopingAlphabetReader(blobLen);
1:55bc97f:         assertEquals(stream, is);
1:55bc97f:         rs.close();
1:55bc97f: 
1:55bc97f:         // This failed in the repro for DERBY-3646 solved as part of
1:55bc97f:         // DERBY-4477 (repro slightly rewoked here):
1:55bc97f:         rs = s.executeQuery("SELECT 'I', V, ID, V from T_MAIN");
1:55bc97f:         rs.next();
1:55bc97f: 
1:55bc97f:         is = rs.getCharacterStream(2);
1:51826c3:         stream = new LoopingAlphabetReader(blobLen);
1:55bc97f:         assertEquals(stream, is);
1:55bc97f: 
1:55bc97f:         is = rs.getCharacterStream(4);
1:51826c3:         stream = new LoopingAlphabetReader(blobLen);
1:55bc97f:         assertEquals(stream, is);
1:55bc97f: 
1:55bc97f:         // clean up
1:55bc97f:         stream.close();
1:55bc97f:         is.close();
1:55bc97f:         s.close();
1:55bc97f:         rs.close();
1:55bc97f: 
1:55bc97f:         rollback();
1:55bc97f:     }
1:7f0f775: 
1:7f0f775:     
1:7f0f775:     /**
1:7f0f775:      * 
1:7f0f775:      * DERBY-6096 Make clob hash join does not run out of memory.
1:7f0f775:      * Prior to fix clobs were estimated at 0. We will test with
1:7f0f775:      * 32K clobs even though the estimatedUsage is at 10k. The default
1:7f0f775:      * max memory per table is only 1MB.
1:7f0f775:      * 
1:7f0f775:      * @throws SQLException
1:7f0f775:      */
1:7f0f775:     public void xtestderby6096ClobHashJoin() throws SQLException {
1:7f0f775:         char[] c = new char[32000];
1:7f0f775:         Arrays.fill(c, 'a'); 
1:7f0f775:         String cdata  = new String(new char[32000]);
1:7f0f775:         Statement s = createStatement();
1:7f0f775:         s.execute("create table d6096(i int, c clob)");
1:7f0f775:         PreparedStatement ps = prepareStatement("insert into d6096 values (?, ?)");
1:7f0f775:         ps.setString(2, cdata);
1:7f0f775:         for (int i = 0; i < 2000; i++) {
1:7f0f775:             ps.setInt(1, i);
1:7f0f775:             ps.execute();
1:7f0f775:         }
1:7f0f775:         ResultSet rs = s.executeQuery("select * from d6096 t1, d6096 t2 where t1.i=t2.i");
1:7f0f775:         // just a single fetch will build the hash table and consume the memory.
1:7f0f775:         assertTrue(rs.next());
1:7f0f775:         // derby.tests.debug prints memory usage
1:90553c5:         if (TestConfiguration.getCurrent().isVerbose()) {
1:90553c5:             System.gc();
1:90553c5:             println("TotalMemory:" + Runtime.getRuntime().totalMemory()
1:90553c5:                     + " " + "Free Memory:"
1:90553c5:                     + Runtime.getRuntime().freeMemory());
1:90553c5:         }
1:7f0f775:         rs.close();
1:7f0f775:     }
1:b52ccdf: }
1:7f0f775: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:             m.invoke(ps, new Object[] {2, reader});
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Arrays;
1: import java.util.Properties;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =  new BaseTestSuite();
commit:2d733d9
/////////////////////////////////////////////////////////////////////////
1:         int clobsize = LONG_CLOB_LENGTH;
commit:51826c3
/////////////////////////////////////////////////////////////////////////
1:         stream = new LoopingAlphabetReader(blobLen);
1:         stream = new LoopingAlphabetReader(blobLen);
/////////////////////////////////////////////////////////////////////////
1:         stream = new LoopingAlphabetReader(blobLen);
1:         stream = new LoopingAlphabetReader(blobLen);
commit:55bc97f
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Tests that a clob can be safely occur multiple times in a SQL
1:      * select and test that large objects streams are not being
1:      * materialized when cloned.  Same as
1:      * testDerby4477_3645_3646_Repro_lowmem, but now using clob rather
1:      * than blob.
1:      * @see BlobMemTest#testDerby4477_3645_3646_Repro_lowmem
1:      */
1:     public void testDerby4477_3645_3646_Repro_lowmem_clob()
1:             throws SQLException, IOException {
1:         setAutoCommit(false);
1: 
1:         Statement s = createStatement();
0:         // int clobsize = LONG_BLOB_LENGTH;
0:         int clobsize = 35000;
1: 
1:         s.executeUpdate(
1:             "CREATE TABLE T_MAIN(" +
1:             "ID INT  GENERATED ALWAYS AS IDENTITY PRIMARY KEY, " +
1:             "V CLOB(" + clobsize + ") )");
1: 
1:         PreparedStatement ps = prepareStatement(
1:             "INSERT INTO T_MAIN(V) VALUES (?)");
1: 
1:         int blobLen = clobsize;
1:         LoopingAlphabetReader stream = new LoopingAlphabetReader(blobLen);
1:         ps.setCharacterStream(1, stream, blobLen);
1: 
1:         ps.executeUpdate();
1:         ps.close();
1: 
1:         s.executeUpdate("CREATE TABLE T_COPY ( V1 CLOB(" + clobsize +
1:                         "), V2 CLOB(" + clobsize + "))");
1: 
1:         // This failed in the repro for DERBY-3645 solved as part of
1:         // DERBY-4477:
1:         s.executeUpdate("INSERT INTO T_COPY SELECT  V, V FROM T_MAIN");
1: 
1:         // Check that the two results are identical:
1:         ResultSet rs = s.executeQuery("SELECT * FROM T_COPY");
1:         rs.next();
1:         Reader is = rs.getCharacterStream(1);
1: 
0:         stream.reopen();
1:         assertEquals(stream, is);
1: 
1:         is = rs.getCharacterStream(2);
1: 
0:         stream.reopen();
1:         assertEquals(stream, is);
1:         rs.close();
1: 
1:         // This failed in the repro for DERBY-3646 solved as part of
1:         // DERBY-4477 (repro slightly rewoked here):
1:         rs = s.executeQuery("SELECT 'I', V, ID, V from T_MAIN");
1:         rs.next();
1: 
1:         is = rs.getCharacterStream(2);
0:         stream.reopen();
1:         assertEquals(stream, is);
1: 
1:         is = rs.getCharacterStream(4);
0:         stream.reopen();
1:         assertEquals(stream, is);
1: 
1:         // clean up
1:         stream.close();
1:         is.close();
1:         s.close();
1:         rs.close();
1: 
1:         rollback();
1:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:                 Class<?> c = ps.getClass();
commit:90553c5
/////////////////////////////////////////////////////////////////////////
1:         if (TestConfiguration.getCurrent().isVerbose()) {
1:             System.gc();
1:             println("TotalMemory:" + Runtime.getRuntime().totalMemory()
1:                     + " " + "Free Memory:"
1:                     + Runtime.getRuntime().freeMemory());
1:         }
commit:3d37865
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:7f0f775
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestSuite;
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite =  new TestSuite();
1:         // Just add Derby-6096 embedded as it takes time to run
1:         suite.addTest(new ClobMemTest("xtestderby6096ClobHashJoin"));
1:         suite.addTest(TestConfiguration.defaultSuite(ClobMemTest.class));
/////////////////////////////////////////////////////////////////////////
1: 
1:     
1:     /**
1:      * 
1:      * DERBY-6096 Make clob hash join does not run out of memory.
1:      * Prior to fix clobs were estimated at 0. We will test with
1:      * 32K clobs even though the estimatedUsage is at 10k. The default
1:      * max memory per table is only 1MB.
1:      * 
1:      * @throws SQLException
1:      */
1:     public void xtestderby6096ClobHashJoin() throws SQLException {
1:         char[] c = new char[32000];
1:         Arrays.fill(c, 'a'); 
1:         String cdata  = new String(new char[32000]);
1:         Statement s = createStatement();
1:         s.execute("create table d6096(i int, c clob)");
1:         PreparedStatement ps = prepareStatement("insert into d6096 values (?, ?)");
1:         ps.setString(2, cdata);
1:         for (int i = 0; i < 2000; i++) {
1:             ps.setInt(1, i);
1:             ps.execute();
1:         }
1:         ResultSet rs = s.executeQuery("select * from d6096 t1, d6096 t2 where t1.i=t2.i");
1:         // just a single fetch will build the hash table and consume the memory.
1:         assertTrue(rs.next());
1:         // derby.tests.debug prints memory usage
0:         System.gc();
0:         println("TotalMemory:" + Runtime.getRuntime().totalMemory()
0:                 + " " + "Free Memory:"
0:                 + Runtime.getRuntime().freeMemory());
1:         rs.close();
1:     }
1: 
commit:b52ccdf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.memory.ClobMemTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.memory;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: 
0: import java.util.Arrays;
0: import java.util.Properties;
0: import java.sql.SQLException;
0: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class ClobMemTest extends BaseJDBCTestCase {
1: 
1:     private static final int LONG_CLOB_LENGTH = 18000000;
1:     private static final String LONG_CLOB_LENGTH_STRING= "18000000";
1:     private static final char[] SHORT_CLOB_CHARS = new char[] {'\uc911','\uc5d0','a', '\uc608', '\uae30',
1:             '\uce58'};
1: 
1:     public ClobMemTest(String name) {
1:         super(name);
1:     }
1: 
0:     public void tearDown() throws SQLException {
0:         rollback();
1:     }
1: 
1: 
1: 
1:     /**
1:      * Insert a clob and test length.
1:      *
1:      * @param lengthless  if true use the lengthless setCharacterStream api
1:      *
1:      * @throws SQLException
1:      * @throws IOException
1:      * @throws InvocationTargetException
1:      * @throws IllegalAccessException
1:      * @throws IllegalArgumentException
1:      */
1:     private void testClobLength(boolean lengthless) throws SQLException, IOException, IllegalArgumentException,
1:             IllegalAccessException, InvocationTargetException {
1:         setAutoCommit(false);
1:         Statement s = createStatement();
1:         s.executeUpdate("CREATE TABLE CLOBTABLE (K INT CONSTRAINT PK PRIMARY KEY, C CLOB(" + LONG_CLOB_LENGTH + "))");
1: 
1:         PreparedStatement ps = prepareStatement("INSERT INTO CLOBTABLE VALUES(?,?)");
1:         // We allocate 16MB for the test so use something bigger than that.
1:         ps.setInt(1,1);
1:         LoopingAlphabetReader reader = new LoopingAlphabetReader(LONG_CLOB_LENGTH);
1:         if (lengthless) {
1:             Method m = null;
1:             try {
0:                 Class c = ps.getClass();
1:                 m = c.getMethod("setCharacterStream",new Class[] {Integer.TYPE,
1:                             InputStream.class});
1:             } catch (NoSuchMethodException e) {
1:                 // ignore method not found as method may not be present for
1:                 // jdk's lower than 1.6.
1:                 println("Skipping lengthless insert because method is not available");
1:                 return;
1:             }
0:             m.invoke(ps, new Object[] {new Integer(2), reader});
1:         }
1:         else
1:             ps.setCharacterStream(2, reader, LONG_CLOB_LENGTH);
1:         ps.executeUpdate();
1:         // insert a zero length clob.
1:         ps.setInt(1, 2);
1:         ps.setString(2, "");
1:         ps.executeUpdate();
1:         // insert a null clob.
1:         ps.setInt(1, 3);
1:         ps.setString(2,null);
1:         ps.executeUpdate();
1:         // insert a short clob
1:         ps.setInt(1, 4);
1:         ps.setString(2, new String(SHORT_CLOB_CHARS));
1:         ps.executeUpdate();
1:         // Currently need to use optimizer override to force use of the index.
1:         // Derby should use sort avoidance and do it automatically, but there
1:         // appears to be a bug.
1:         ResultSet rs = s.executeQuery("SELECT K, LENGTH(C), C FROM CLOBTABLE" +
1:                 "-- DERBY-PROPERTIES constraint=pk\n ORDER BY K");
1:         rs.next();
1:         assertEquals(LONG_CLOB_LENGTH_STRING,rs.getString(2));
1:         // make sure we can still access the clob after getting length.
1:         // It should be ok because we reset the stream
1:         Reader rsReader = rs.getCharacterStream(3);
1:         int len= 0;
1:         char[] buf = new char[32672];
1:         for (;;)  {
1:                 int size = rsReader.read(buf);
1:                 if (size == -1)
1:                         break;
1:                 len += size;
1:                 int expectedValue = ((len -1) % 26) + 'a';
1:                 if (size != 0)
1:                     assertEquals(expectedValue,buf[size -1]);
1:         }
1: 
1:         assertEquals(LONG_CLOB_LENGTH,len);
1:         // empty clob
1:         rs.next();
1:         assertEquals("0",rs.getString(2));
1:         String chars = rs.getString(3);
1:         assertEquals(0, chars.length());
1:         // null clob
1:         rs.next();
1:         assertEquals(null, rs.getString(2));
1:         chars = rs.getString(3);
1:         assertEquals(null, chars);
1:         // short clob
1:         rs.next();
1:         assertEquals("" + SHORT_CLOB_CHARS.length , rs.getString(2));
1:         chars = rs.getString(3);
1:         assertTrue(Arrays.equals(chars.toCharArray(), SHORT_CLOB_CHARS));
1:         rs.close();
1: 
1:         // Select just length without selecting the clob.
1:         rs = s.executeQuery("SELECT K, LENGTH(C)  FROM CLOBTABLE " +
1:                 "ORDER BY K");
1:         JDBC.assertFullResultSet(rs, new String [][] {{"1",LONG_CLOB_LENGTH_STRING},{"2","0"},
1:                 {"3",null},{"4","6"}});
1:     }
1: 
1:     /**
1:      * Test the length after inserting with the setCharacterStream api
1:      * that takes length.  In this case the length will be encoded at the
1:      * begining of the stream and the call should be fairly low overhead.
1:      *
1:      * @throws SQLException
1:      * @throws IOException
1:      * @throws InvocationTargetException
1:      * @throws IllegalAccessException
1:      * @throws IllegalArgumentException
1:      */
1:     public void testClobLength() throws SQLException, IOException, IllegalArgumentException, IllegalAccessException,
1:             InvocationTargetException {
1:         testClobLength(false);
1:     }
1: 
1:     /**
1:      * Test the length after inserting the clob value with the lengthless
1:      * setCharacterStream api. In this case we will have to read the whole
1:      * stream to get the length.
1:      *
1:      * @throws SQLException
1:      * @throws IOException
1:      * @throws InvocationTargetException
1:      * @throws IllegalAccessException
1:      * @throws IllegalArgumentException
1:      */
1:     public void testClobLengthWithLengthlessInsert() throws SQLException, IOException, IllegalArgumentException,
1:             IllegalAccessException, InvocationTargetException {
1:         testClobLength(true);
1:     }
1: 
1:     public static Test suite() {
0:         Test suite =  TestConfiguration.defaultSuite(ClobMemTest.class);
1:         Properties p = new Properties();
1:         // use small pageCacheSize so we don't run out of memory on the insert.
1:         p.setProperty("derby.storage.pageCacheSize", "100");
1:         return new SystemPropertyTestSetup(suite,p);
1:     }
1: 
1: 
1: 
1: }
============================================================================