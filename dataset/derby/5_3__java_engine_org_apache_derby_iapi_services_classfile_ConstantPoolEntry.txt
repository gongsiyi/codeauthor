1:fe77ca5: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.classfile.ConstantPoolEntry
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.services.classfile;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1:fe77ca5: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:fe77ca5: 
1:fe77ca5: import java.io.IOException;
1:fe77ca5: 
1:fe77ca5: /** Constant Pool class - pages 92-99 */
1:fe77ca5: public abstract class ConstantPoolEntry /*implements PoolEntry*/
1:fe77ca5: {
1:fe77ca5: 	
1:fe77ca5: 	protected int tag; // u1 (page 83)
1:fe77ca5: 	protected boolean doubleSlot; // Some entries take up two slots! (see footnote page 98) 
1:fe77ca5: 
1:fe77ca5: 	/* Index within Vector */
1:fe77ca5: 	protected int index;
1:fe77ca5: 
1:fe77ca5: 	protected ConstantPoolEntry(int tag) {
1:fe77ca5: 		this.tag = tag;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	int getIndex() {
1:fe77ca5: 		if (SanityManager.DEBUG) {
1:fe77ca5: 			if (index <= 0)
1:fe77ca5: 			{
1:fe77ca5: 				SanityManager.THROWASSERT("index is expected to be > 0, is " + index);
1:fe77ca5: 			}
1:fe77ca5: 		}
1:fe77ca5: 		return index;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	void setIndex(int index) {
1:fe77ca5: 		this.index = index;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	boolean doubleSlot() {
1:fe77ca5: 		return doubleSlot;
1:fe77ca5: 	}
1:fe77ca5: 
2:fe77ca5: 	/**
1:fe77ca5: 		Return the key used to key this object in a hashtable
1:fe77ca5: 	*/
1:fe77ca5: 	Object getKey() {
1:fe77ca5: 		return this;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		Return an estimate of the size of the constant pool entry.
1:fe77ca5: 	*/
1:fe77ca5: 	abstract int classFileSize();
1:fe77ca5: 
1:fe77ca5: 	void put(ClassFormatOutput out) throws IOException {
1:fe77ca5: 		out.putU1(tag);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/*
1:fe77ca5: 	** Public API methods
1:fe77ca5: 	*/
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		Return the tag or type of the entry. Will be equal to one of the
1:fe77ca5: 		constants above, e.g. CONSTANT_Class.
1:fe77ca5: 	*/
1:fe77ca5: 	final int getTag() {
1:fe77ca5: 		return tag;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**	
1:fe77ca5: 		Get the first index in a index type pool entry.
1:fe77ca5: 		This call is valid when getTag() returns one of
1:fe77ca5: 		<UL> 
1:fe77ca5: 		<LI> CONSTANT_Class
1:fe77ca5: 		<LI> CONSTANT_Fieldref
1:fe77ca5: 		<LI> CONSTANT_Methodref
1:fe77ca5: 		<LI> CONSTANT_InterfaceMethodref
1:fe77ca5: 		<LI> CONSTANT_String
1:fe77ca5: 		<LI> CONSTANT_NameAndType
1:fe77ca5: 		</UL>
1:fe77ca5: 	*/
1:fe77ca5: 	int getI1() { return 0; }
1:fe77ca5: 
1:fe77ca5: 	/**	
1:fe77ca5: 		Get the second index in a index type pool entry.
1:fe77ca5: 		This call is valid when getTag() returns one of
1:fe77ca5: 		<UL> 
1:fe77ca5: 		<LI> CONSTANT_Fieldref
1:fe77ca5: 		<LI> CONSTANT_Methodref
1:fe77ca5: 		<LI> CONSTANT_InterfaceMethodref
1:fe77ca5: 		<LI> CONSTANT_NameAndType
1:fe77ca5: 		</UL>
1:fe77ca5: 	*/	
1:fe77ca5: 	int getI2() { return 0; };
1:fe77ca5: }
1:fe77ca5: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.classfile.ConstantPoolEntry
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.classfile;
1: 
1: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.io.IOException;
1: 
1: /** Constant Pool class - pages 92-99 */
1: public abstract class ConstantPoolEntry /*implements PoolEntry*/
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 	
1: 	protected int tag; // u1 (page 83)
1: 	protected boolean doubleSlot; // Some entries take up two slots! (see footnote page 98) 
1: 
1: 	/* Index within Vector */
1: 	protected int index;
1: 
1: 	protected ConstantPoolEntry(int tag) {
1: 		this.tag = tag;
1: 	}
1: 
1: 	int getIndex() {
1: 		if (SanityManager.DEBUG) {
1: 			if (index <= 0)
1: 			{
1: 				SanityManager.THROWASSERT("index is expected to be > 0, is " + index);
1: 			}
1: 		}
1: 		return index;
1: 	}
1: 
1: 	void setIndex(int index) {
1: 		this.index = index;
1: 	}
1: 
1: 	boolean doubleSlot() {
1: 		return doubleSlot;
1: 	}
1: 
1: 	/**
1: 		Return the key used to key this object in a hashtable
1: 	*/
1: 	Object getKey() {
1: 		return this;
1: 	}
1: 
1: 	/**
1: 		Return an estimate of the size of the constant pool entry.
1: 	*/
1: 	abstract int classFileSize();
1: 
1: 	void put(ClassFormatOutput out) throws IOException {
1: 		out.putU1(tag);
1: 	}
1: 
1: 	/*
1: 	** Public API methods
1: 	*/
1: 
1: 	/**
1: 		Return the tag or type of the entry. Will be equal to one of the
1: 		constants above, e.g. CONSTANT_Class.
1: 	*/
1: 	final int getTag() {
1: 		return tag;
1: 	}
1: 
1: 	/**	
1: 		Get the first index in a index type pool entry.
1: 		This call is valid when getTag() returns one of
1: 		<UL> 
1: 		<LI> CONSTANT_Class
1: 		<LI> CONSTANT_Fieldref
1: 		<LI> CONSTANT_Methodref
1: 		<LI> CONSTANT_InterfaceMethodref
1: 		<LI> CONSTANT_String
1: 		<LI> CONSTANT_NameAndType
1: 		</UL>
1: 	*/
1: 	int getI1() { return 0; }
1: 
1: 	/**	
1: 		Get the second index in a index type pool entry.
1: 		This call is valid when getTag() returns one of
1: 		<UL> 
1: 		<LI> CONSTANT_Fieldref
1: 		<LI> CONSTANT_Methodref
1: 		<LI> CONSTANT_InterfaceMethodref
1: 		<LI> CONSTANT_NameAndType
1: 		</UL>
1: 	*/	
1: 	int getI2() { return 0; };
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.classfile;
0: 
0: import org.apache.derby.iapi.services.classfile.VMDescriptor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.io.IOException;
0: 
0: /** Constant Pool class - pages 92-99 */
0: public abstract class ConstantPoolEntry /*implements PoolEntry*/
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	
0: 	protected int tag; // u1 (page 83)
0: 	protected boolean doubleSlot; // Some entries take up two slots! (see footnote page 98) 
0: 
0: 	/* Index within Vector */
0: 	protected int index;
0: 
0: 	protected ConstantPoolEntry(int tag) {
0: 		this.tag = tag;
0: 	}
0: 
0: 	int getIndex() {
0: 		if (SanityManager.DEBUG) {
0: 			if (index <= 0)
0: 			{
0: 				SanityManager.THROWASSERT("index is expected to be > 0, is " + index);
0: 			}
0: 		}
0: 		return index;
0: 	}
0: 
0: 	void setIndex(int index) {
0: 		this.index = index;
0: 	}
0: 
0: 	boolean doubleSlot() {
0: 		return doubleSlot;
0: 	}
0: 
0: 	/**
0: 		Return the key used to key this object in a hashtable
0: 	*/
0: 	Object getKey() {
0: 		return this;
0: 	}
0: 
0: 	/**
0: 		Return an estimate of the size of the constant pool entry.
0: 	*/
0: 	abstract int classFileSize();
0: 
0: 	void put(ClassFormatOutput out) throws IOException {
0: 		out.putU1(tag);
0: 	}
0: 
0: 	/*
0: 	** Public API methods
0: 	*/
0: 
0: 	/**
0: 		Return the tag or type of the entry. Will be equal to one of the
0: 		constants above, e.g. CONSTANT_Class.
0: 	*/
0: 	final int getTag() {
0: 		return tag;
0: 	}
0: 
0: 	/**	
0: 		Get the first index in a index type pool entry.
0: 		This call is valid when getTag() returns one of
0: 		<UL> 
0: 		<LI> CONSTANT_Class
0: 		<LI> CONSTANT_Fieldref
0: 		<LI> CONSTANT_Methodref
0: 		<LI> CONSTANT_InterfaceMethodref
0: 		<LI> CONSTANT_String
0: 		<LI> CONSTANT_NameAndType
0: 		</UL>
0: 	*/
0: 	int getI1() { return 0; }
0: 
0: 	/**	
0: 		Get the second index in a index type pool entry.
0: 		This call is valid when getTag() returns one of
0: 		<UL> 
0: 		<LI> CONSTANT_Fieldref
0: 		<LI> CONSTANT_Methodref
0: 		<LI> CONSTANT_InterfaceMethodref
0: 		<LI> CONSTANT_NameAndType
0: 		</UL>
0: 	*/	
0: 	int getI2() { return 0; };
0: }
0: 
============================================================================