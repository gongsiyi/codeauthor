1:2da9275: /*
1:2da9275: 
1:2da9275:    Derby - Class org.apache.derbyTesting.functionTests.harness.MultiTest
1:2da9275: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:2da9275: 
1:2da9275:       http://www.apache.org/licenses/LICENSE-2.0
1:2da9275: 
1:2da9275:    Unless required by applicable law or agreed to in writing, software
1:2da9275:    distributed under the License is distributed on an "AS IS" BASIS,
1:2da9275:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2da9275:    See the License for the specific language governing permissions and
1:2da9275:    limitations under the License.
1:2da9275: 
1:2da9275:  */
1:2da9275: 
1:2da9275: package org.apache.derbyTesting.functionTests.harness;
1:2da9275: 
1:2da9275: import java.io.IOException;
1:cd5dc32: import java.io.File;
1:2da9275: import java.io.FileOutputStream;
1:2da9275: import java.io.FileNotFoundException;
1:2da9275: import java.io.InputStream;
1:2da9275: import java.io.FileInputStream;
1:2da9275: import java.io.BufferedInputStream;
1:2da9275: import java.util.Vector;
1:2da9275: import java.util.Enumeration;
1:2da9275: import org.apache.derby.impl.tools.ij.*;
1:2da9275: 
1:2da9275: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1:2da9275: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1:6eb4ff8: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:6eb4ff8: 
1:2da9275: 
1:2da9275: /**
1:2da9275:  * MultiTest is a multiuser test harness.  It
1:2da9275:  * runs multiple threads with differing scripts
1:2da9275:  * against an embedded server.  For syntax see
1:2da9275:  * grammar.jj
1:2da9275:  *
1:2da9275:  * Tests are ended as soon as an unexpected error
1:2da9275:  * has occurred or after the specified test duration
1:2da9275:  * has transpired.  The main loop ends by explicitly
1:2da9275:  * quitting (i.e. doing a System.exit()).
1:2da9275:  *
1:2da9275:  * Deprecated APIs: this test uses AppStreamWriter instead
1:2da9275:  * of the preferred AppStreamWriter.  This is because utilMain()
1:2da9275:  * uses AppStreamWriter (deliberately, i think) so since
1:2da9275:  * that is called from this, there you have it.
1:2da9275:  */
1:2da9275: 
1:2da9275: public class MultiTest
1:2da9275: {
1:2da9275: 
1:2da9275: 	private static final  int MAX_WAIT_FOR_COMPLETION = 180; 
1:2da9275: 
1:2da9275: 	private static mtTestSuite suite;
1:2da9275: 	private static LocalizedOutput log; 
1:2da9275: 	private static String	inputDir;
1:2da9275: 	private static String	outputDir;
1:2da9275: 	private static String	testName;
1:2da9275: 
1:2da9275: 
1:2da9275: 	
1:2da9275: 	public MultiTest () { };
1:2da9275: 
1:2da9275: 	public static void syntax()
1:2da9275: 	{
1:2da9275: 		System.out.println("Syntax:"
1:2da9275: 				+"\n\t <file>\t- the cmd file"
1:2da9275: 				+"\n\t[-o <dir>]\t-the output directory"
1:2da9275: 				+"\n\t[-i <dir>]\t-the input directory");
1:2da9275: 	}
1:2da9275: 
1:2da9275: 	/**
1:2da9275: 	** Main loop
1:2da9275: 	@exception IOException thrown on error
1:2da9275: 	@exception ParseException thrown on error
1:2da9275: 	@exception FileNotFoundException thrown on error
1:2da9275: 	*/
1:2da9275: 	public static void main(String[] args) 
1:2da9275: 			throws IOException, ParseException, FileNotFoundException
1:2da9275: 	{
1:2da9275: 		String	cmdFilePath;
1:2da9275: 		InputStream	in;
1:2da9275: 		String	cmdFile;
1:2da9275: 		mtTester[] testers;
1:2da9275: 		int	i;
1:2da9275: 		int	max;
1:2da9275: 
1:2da9275: 		if ((cmdFile = util.getFileArg(args)) == null)
1:2da9275: 		{
1:2da9275: 			syntax();
1:2da9275: 			return;
1:2da9275: 		}
1:2da9275: 
1:2da9275: 		LocalizedResource.getInstance();
1:2da9275: 
1:2da9275: 		testName = getTestName(cmdFile);
1:2da9275: 		inputDir = util.getArg("-i", args);
1:2da9275: 		outputDir = util.getArg("-o", args);
1:2da9275: 
1:2da9275: 		/*
1:2da9275: 		** If cmdfile doesn't have a path, prepend
1:2da9275: 		** inputDir
1:2da9275: 		*/
1:2da9275: 		cmdFilePath = ((inputDir != null) && (cmdFile.indexOf("/") == -1)) ?
1:2da9275: 				(inputDir + "/" + cmdFile) : cmdFile;
1:2da9275: 		try 
1:2da9275: 		{
1:2da9275: 			in = new BufferedInputStream(new FileInputStream(cmdFilePath), 
1:2da9275: 										utilMain.BUFFEREDFILESIZE);
1:2da9275:       	} catch (FileNotFoundException e) {
1:2da9275: 			System.out.println("MultiTest ERROR: config file not found: "+cmdFile);
1:2da9275:         	return; 
1:2da9275:       	}
1:2da9275: 		mtGrammar parser = new mtGrammar(in);
1:2da9275: 		suite = parser.grammarStatement();
1:2da9275: 		suite.setRoot(inputDir);
1:2da9275: 		suite.init();
1:2da9275: 	
1:ece3ee6: 		log = openFile(outputDir, testName + ".log");
1:2da9275: 
1:2da9275: 		try
1:2da9275: 		{
1:2da9275: 			seqRunCases(suite.getInitCases(), 
1:2da9275: 						"initialization", 
1:2da9275: 						inputDir, 
1:2da9275: 						outputDir);
1:2da9275: 		} catch (ijFatalException e) 
1:2da9275: 		{
1:2da9275: 			System.exit(1);
1:2da9275: 		}
1:2da9275: 
1:2da9275: 		max = suite.getNumThreads();
1:2da9275: 		System.out.println("...running with "+max+" threads");
1:2da9275: 		testers = new mtTester[max];
1:2da9275: 
1:2da9275: 		// create the testers
1:2da9275: 		for (i = 0; i < max; i++)
1:2da9275: 		{
1:2da9275: 			String tester = "Tester" + (i+1);
1:2da9275: 			try 
1:2da9275: 			{
1:ece3ee6: 				LocalizedOutput out = openFile(outputDir, tester + ".out");
1:2da9275: 				testers[i] = new mtTester(tester, suite, out, log);
1:2da9275: 			} catch (IOException e) {
1:2da9275: 				System.out.println("MultiTest ERROR: unable open output file "+e);
1:2da9275: 				return;
1:2da9275: 			}
1:2da9275: 		}
1:2da9275: 
1:2da9275: 		long duration = execTesters(testers);
1:2da9275: 
1:2da9275: 		log.println("");
1:2da9275: 		log.println("test ran "+duration+" ms");
1:2da9275: 		log.println("total memory is "+Runtime.getRuntime().totalMemory());
1:2da9275: 		log.println("free memory  is "+Runtime.getRuntime().freeMemory());
1:cd5dc32: 		// Delete the .out files for Testers that did not report errors.
1:cd5dc32: 		for (i = 0; i < max; i++)
1:2da9275: 		{
1:cd5dc32: 			if ( testers[i].noFailure() )
1:2da9275: 			{
1:cd5dc32: 				log.println("Deleting " + "Tester" + (i+1) + ".out" + "(" + outputDir + ")");
1:cd5dc32: 				File out = new File(outputDir, "Tester" + (i+1) + ".out");
1:cd5dc32: 				out.delete();
1:2da9275: 			}
1:2da9275: 			else
1:2da9275: 			{
1:cd5dc32: 				log.println("Tester" + (i+1) + " failed.");
1:2da9275: 			}
1:2da9275: 		}
1:2da9275:         
1:2da9275: 		System.exit(0);
1:2da9275: 	}
1:2da9275: 
1:2da9275: 	/*
1:2da9275: 	**
1:2da9275: 	** NOTE ON OUT OF MEMORY PROBLEMS:  in theory 
1:2da9275: 	** when the VM runs out of memory an OutOfMemoryException
1:2da9275: 	** should be thrown by the runtime, but unfortunately, that
1:2da9275: 	** doesn't always seem to be the case.  When running this
1:2da9275: 	** program the Testers just wind up hanging on memory
1:2da9275: 	** allocation if there is insufficient memory.  To combat
1:2da9275: 	** this we try to manually stop each thread, but when
1:2da9275: 	** there is no memory, this doesn't seem to do anything
1:2da9275: 	** either.  Also, we grab some memory up front and release
1:2da9275: 	** that after telling the threads to stop themselves.
1:2da9275: 	*/
1:2da9275: 	private static long execTesters(mtTester[] testers)
1:2da9275: 			throws FileNotFoundException, IOException
1:2da9275: 	{
1:2da9275: 		boolean interrupted = false;
1:2da9275: 		boolean allWereAlive = true;
1:2da9275: 		int		i;
1:2da9275: 		long 	duration = 0;
1:2da9275: 		int 	max = testers.length;
1:2da9275: 		Thread[] threads;
1:2da9275: 		byte[] extraMemory;
1:2da9275: 
1:2da9275: 		// new thread group
1:2da9275: 		ThreadGroup tg = new ThreadGroup("workers");
1:2da9275: 		//tg.allowThreadSuspension(false);
1:2da9275: 
1:2da9275: 		// grab start time
1:2da9275: 		long start = System.currentTimeMillis();
1:2da9275: 		long runTime = suite.getTimeMillis();
1:2da9275: 		System.out.println("...running duration "+suite.getTime());
1:2da9275: 
1:2da9275: 		// grab some memory to make stopping easier
1:2da9275:  		extraMemory = new byte[4096];
1:2da9275: 
1:2da9275: 		threads = new Thread[max];	
1:2da9275: 		// run them
1:2da9275: 		for (i = 0; i < max; i++)
1:2da9275: 		{
1:2da9275: 			threads[i] = new Thread(tg, testers[i]);
1:2da9275: 			threads[i].start();
1:2da9275: 		}
1:2da9275: 
1:2da9275: 		// loop sleeping 800ms a bite.
1:2da9275: 		while (((duration = (System.currentTimeMillis() - start)) < runTime) &&
1:2da9275: 				(allWereAlive = allAlive(threads)) && (!interrupted))
1:2da9275: 		{
1:2da9275: 			try 
1:2da9275: 			{ 
1:2da9275: 				Thread.sleep(800L); 
1:2da9275: 			} catch (InterruptedException e) 
1:2da9275: 			{ 
1:2da9275: 				interrupted = true;	
1:2da9275: 			}
1:2da9275: 		}
1:2da9275: 
1:2da9275: 		System.out.println("...stopping testers");
1:2da9275: 
1:2da9275: 
1:2da9275: 		/*
1:2da9275: 		** Free up 2k of memory and garbage
1:2da9275: 		** collect.  That should allow any
1:2da9275: 		** starved testers to stop themselves.
1:2da9275: 		*/
1:2da9275: 		extraMemory = null;
1:2da9275: 		System.gc();
1:2da9275: 
1:2da9275: 		/*
1:2da9275: 		** Now stop everyone. First ask them to
1:2da9275: 		** willingly stop.  By calling mtTester.stop()
1:2da9275: 		** we prevent the testers from picking up the
1:2da9275: 		** next task.  
1:2da9275: 		*/
1:2da9275: 		for (i = 0; i < testers.length; i++)
1:2da9275: 		{
1:2da9275: 			testers[i].stop();
1:2da9275: 		}
1:2da9275: 
1:2da9275: 		/*
1:2da9275: 		** Sleep 180 seconds, or until everyone
1:2da9275: 		** is done.
1:2da9275: 		*/
1:2da9275: 		System.out.println("...waiting for testers to complete");
1:2da9275: 		for (i = 0; i < MAX_WAIT_FOR_COMPLETION; i++)
1:2da9275: 		{
1:2da9275: 			try 
1:2da9275: 			{ 
1:2da9275: 				Thread.sleep((long)1000); 
1:2da9275: 			} catch (InterruptedException e) 
1:2da9275: 			{
1:2da9275: 				System.out.println("...Unexpected InterrupedException: "+e);
1:2da9275: 			}
1:2da9275: 			if (allDead(threads))
1:2da9275: 			{
1:2da9275: 				break;
1:2da9275: 			}
1:2da9275: 		}
1:2da9275: 
1:2da9275: 		if (i == MAX_WAIT_FOR_COMPLETION)
1:2da9275: 		{
1:2da9275: 			log.println("WARNING: testers didn't die willingly, so I'm going to kill 'em.");
1:2da9275: 			log.println("\tThis may result in connection resources that aren't cleaned up");
1:2da9275: 			log.println("\t(e.g. you may see problems in the final script run with deadlocks).");
1:2da9275: 		}
1:2da9275: 	
1:2da9275: 		/*	
1:2da9275: 		** Now stop everyone that hasn't already stopped.
1:6eb4ff8: 		* First get thread dumps for jdk 15.
1:2da9275: 		*/
1:6eb4ff8: 		TestUtil.dumpAllStackTracesIfSupported(log);
1:2da9275: 		for (i = 0; i < MAX_WAIT_FOR_COMPLETION && (tg.isDestroyed() == false ); i++) 
1:2da9275: 		{ 
1:2da9275: 
1:2da9275: 			// can't really stop - deprecated because 'unsafe'. interrupt.
1:2da9275: 			tg.interrupt();
1:2da9275: 			try { Thread.sleep((long) 1000); } catch (InterruptedException e) {}
1:2da9275: 
1:2da9275: 			try 
1:2da9275: 			{ 
1:2da9275: 				tg.destroy(); 
1:2da9275: 			} catch (IllegalThreadStateException e)
1:2da9275: 			{
1:2da9275: 				log.println("...waiting for ThreadGroup.interrupt() to work its magic");
1:2da9275: 				try { Thread.sleep((long)1000); } catch (InterruptedException e2) {}
1:2da9275: 				continue;
1:2da9275: 			}
1:2da9275: 			break;	
1:2da9275: 		} 
1:2da9275: 
1:2da9275: 		if (interrupted == true)
1:2da9275: 		{
1:2da9275: 			System.out.println("TEST CASE SUMMARY: run interrupted");
1:2da9275: 		}
1:2da9275: 		else if (allWereAlive == false)
1:2da9275: 		{
1:2da9275: 			System.out.println("TEST CASE SUMMARY: abnormal termination due to error(s)"+
1:2da9275: 				" -- see test log (./"+testName+"/"+testName+".log) for details ");
1:2da9275: 		}
1:2da9275: 		else
1:2da9275: 		{
1:2da9275: 			System.out.println("TEST CASE SUMMARY: normal termination");
1:2da9275: 			if (i < MAX_WAIT_FOR_COMPLETION)
1:2da9275: 			{
1:2da9275: 				try
1:2da9275: 				{
1:2da9275: 					seqRunCases(suite.getFinalCases(), 
1:2da9275: 							"last checks", 
1:2da9275: 							inputDir, 
1:2da9275: 							outputDir);
1:2da9275: 				} catch (ijFatalException e)  
1:2da9275: 				{ 
1:2da9275: 					System.out.println("...error running final test cases");
1:2da9275: 				}
1:2da9275: 			}
1:2da9275: 			else
1:2da9275: 			{
1:2da9275: 				System.out.println("...timed out trying to kill all testers,\n" +
1:2da9275: 								"   skipping last scripts (if any).  NOTE: the\n"+
1:2da9275: 								"   likely cause of the problem killing testers is\n"+
1:2da9275: 								"   probably not enough VM memory OR test cases that\n"+
1:2da9275: 								"   run for very long periods of time (so testers do not\n"+
1:2da9275: 								"   have a chance to notice stop() requests");
1:2da9275: 			}
1:2da9275: 		}
1:2da9275: 
1:2da9275: 		return duration;
1:2da9275: 	}
1:2da9275: 
1:2da9275: 
1:2da9275: 	/**
1:2da9275: 	** Search through the list of threads and see
1:2da9275: 	** if they are all alive.
1:2da9275: 	*/
1:2da9275: 	public static boolean allAlive(Thread[] threads)
1:2da9275: 	{
1:2da9275: 		int	i;
1:2da9275: 		for (i = 0; i < threads.length; i++)
1:2da9275: 		{
1:2da9275: 			if (threads[i].isAlive() == false)
1:2da9275: 				break;
1:2da9275: 		}
1:2da9275: 		return (i == threads.length);
1:2da9275: 	}
1:2da9275: 
1:2da9275: 	/**
1:2da9275: 	** Search through the list of threads and see
1:2da9275: 	** if they are all alive.
1:2da9275: 	*/
1:2da9275: 	public static boolean allDead(Thread[] threads)
1:2da9275: 	{
1:2da9275: 		int	i;
1:2da9275: 		for (i = 0; i < threads.length; i++)
1:2da9275: 		{
1:2da9275: 			if (threads[i].isAlive() == true)
1:2da9275: 				break;
1:2da9275: 		}
1:2da9275: 		return (i == threads.length);
1:2da9275: 	}
1:2da9275: 
1:2da9275: 	/**
1:2da9275: 	** Figure out the name of the log file and open
1:2da9275: 	** it 
1:2da9275: 	*/
1:ece3ee6: 	private static LocalizedOutput openFile(String dir, String fileName) 
1:2da9275: 			throws IOException
1:2da9275: 	{
1:2da9275: 		
1:ece3ee6: 		java.io.File file = new java.io.File(dir, fileName);
1:2da9275: 
1:ece3ee6: 		return new LocalizedOutput(new FileOutputStream(file));
1:2da9275: 	}
1:2da9275: 	/**
1:2da9275: 	** Sequentially run scripts
1:2da9275: 	*/
1:2da9275: 	private static void seqRunCases(Vector cases, String descr, String inputDir, String outputDir) 
1:2da9275: 		throws FileNotFoundException, IOException, ijFatalException
1:2da9275: 	{
1:2da9275: 		LocalizedOutput	out;
1:2da9275: 		BufferedInputStream	in;
1:2da9275: 		mtTestCase		testCase;
1:2da9275: 
1:2da9275: 		if (cases == null)
1:2da9275: 		{
1:2da9275: 			System.out.println("...no "+descr+" being performed");
1:2da9275: 			return;
1:2da9275: 		}
1:2da9275: 
1:2da9275: 		Enumeration e = cases.elements();
1:2da9275: 
1:2da9275: 		while (e.hasMoreElements())
1:2da9275: 		{
1:2da9275: 			testCase = (mtTestCase)e.nextElement();
1:ece3ee6: 			String testName = testCase.getFile();
1:ece3ee6: 			System.out.println("...running "+descr+" via "+testName);
1:ece3ee6: 			String logFileName = 
1:ece3ee6: 				testName.substring(0, testName.lastIndexOf('.'));
1:ece3ee6: 			out = openFile(outputDir, logFileName + ".out");
1:2da9275: 			in = testCase.initialize(inputDir);
1:2da9275: 			testCase.runMe(log, out, in);
1:2da9275: 		}
1:2da9275: 	}
1:2da9275: 
1:2da9275: 	/**
1:2da9275: 	** Given the command file, infer the test name.
1:2da9275: 	** Takes the portion of the file name between
1:2da9275: 	** the last '.' and the last '/'.  e.g.
1:dbed020: 	** x/y/Name.suffix -&gt; Name
1:2da9275: 	**
1:2da9275: 	*/
1:2da9275: 	private static String getTestName(String cmdFile)
1:2da9275: 	{
1:2da9275: 		int slash, dotSpot;
1:2da9275: 
1:2da9275: 		slash = cmdFile.lastIndexOf("/");
1:2da9275: 		if (slash == -1)
1:2da9275: 		{
1:2da9275: 			slash = 0;
1:2da9275: 		}
1:2da9275: 
1:2da9275: 		dotSpot = cmdFile.lastIndexOf(".");
2:2da9275: 		if (dotSpot == -1)
1:2da9275: 		{
1:2da9275: 			dotSpot = cmdFile.length();
1:2da9275: 		}
1:2da9275: 		return cmdFile.substring(slash, dotSpot);
1:2da9275: 
1:2da9275: 	}
1:2da9275: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	** x/y/Name.suffix -&gt; Name
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6eb4ff8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: 
/////////////////////////////////////////////////////////////////////////
1: 		* First get thread dumps for jdk 15.
1: 		TestUtil.dumpAllStackTracesIfSupported(log);
commit:2da9275
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.MultiTest
1: 
0:    Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.io.IOException;
1: import java.io.FileOutputStream;
1: import java.io.FileNotFoundException;
1: import java.io.InputStream;
1: import java.io.FileInputStream;
1: import java.io.BufferedInputStream;
1: import java.util.Vector;
1: import java.util.Enumeration;
1: import org.apache.derby.impl.tools.ij.*;
1: 
1: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1: 
1: /**
1:  * MultiTest is a multiuser test harness.  It
1:  * runs multiple threads with differing scripts
1:  * against an embedded server.  For syntax see
1:  * grammar.jj
1:  *
1:  * Tests are ended as soon as an unexpected error
1:  * has occurred or after the specified test duration
1:  * has transpired.  The main loop ends by explicitly
1:  * quitting (i.e. doing a System.exit()).
1:  *
1:  * Deprecated APIs: this test uses AppStreamWriter instead
1:  * of the preferred AppStreamWriter.  This is because utilMain()
1:  * uses AppStreamWriter (deliberately, i think) so since
1:  * that is called from this, there you have it.
1:  */
1: 
1: public class MultiTest
1: {
1: 
1: 	private static final  int MAX_WAIT_FOR_COMPLETION = 180; 
1: 
1: 	private static mtTestSuite suite;
1: 	private static LocalizedOutput log; 
1: 	private static String	inputDir;
1: 	private static String	outputDir;
1: 	private static String	testName;
1: 
1: 
1: 	
1: 	public MultiTest () { };
1: 
1: 	public static void syntax()
1: 	{
1: 		System.out.println("Syntax:"
1: 				+"\n\t <file>\t- the cmd file"
1: 				+"\n\t[-o <dir>]\t-the output directory"
1: 				+"\n\t[-i <dir>]\t-the input directory");
1: 	}
1: 
1: 	/**
1: 	** Main loop
1: 	@exception IOException thrown on error
1: 	@exception ParseException thrown on error
1: 	@exception FileNotFoundException thrown on error
1: 	*/
1: 	public static void main(String[] args) 
1: 			throws IOException, ParseException, FileNotFoundException
1: 	{
1: 		String	cmdFilePath;
1: 		InputStream	in;
1: 		String	cmdFile;
1: 		mtTester[] testers;
1: 		int	i;
1: 		int	max;
1: 
1: 		if ((cmdFile = util.getFileArg(args)) == null)
1: 		{
1: 			syntax();
1: 			return;
1: 		}
1: 
1: 		LocalizedResource.getInstance();
1: 
1: 		testName = getTestName(cmdFile);
1: 		inputDir = util.getArg("-i", args);
1: 		outputDir = util.getArg("-o", args);
1: 
1: 		/*
1: 		** If cmdfile doesn't have a path, prepend
1: 		** inputDir
1: 		*/
1: 		cmdFilePath = ((inputDir != null) && (cmdFile.indexOf("/") == -1)) ?
1: 				(inputDir + "/" + cmdFile) : cmdFile;
1: 		try 
1: 		{
1: 			in = new BufferedInputStream(new FileInputStream(cmdFilePath), 
1: 										utilMain.BUFFEREDFILESIZE);
1:       	} catch (FileNotFoundException e) {
1: 			System.out.println("MultiTest ERROR: config file not found: "+cmdFile);
1:         	return; 
1:       	}
1: 		mtGrammar parser = new mtGrammar(in);
1: 		suite = parser.grammarStatement();
1: 		suite.setRoot(inputDir);
1: 		suite.init();
1: 	
0: 		log = openFile(outputDir, testName, ".log");
1: 
1: 		try
1: 		{
1: 			seqRunCases(suite.getInitCases(), 
1: 						"initialization", 
1: 						inputDir, 
1: 						outputDir);
1: 		} catch (ijFatalException e) 
1: 		{
1: 			System.exit(1);
1: 		}
1: 
1: 		max = suite.getNumThreads();
1: 		System.out.println("...running with "+max+" threads");
1: 		testers = new mtTester[max];
1: 
1: 		// create the testers
1: 		for (i = 0; i < max; i++)
1: 		{
1: 			String tester = "Tester" + (i+1);
1: 			try 
1: 			{
0: 				LocalizedOutput out = openFile(outputDir, tester, ".out");
1: 				testers[i] = new mtTester(tester, suite, out, log);
1: 			} catch (IOException e) {
1: 				System.out.println("MultiTest ERROR: unable open output file "+e);
1: 				return;
1: 			}
1: 		}
1: 
1: 		long duration = execTesters(testers);
1: 
1: 		log.println("");
1: 		log.println("test ran "+duration+" ms");
1: 		log.println("total memory is "+Runtime.getRuntime().totalMemory());
1: 		log.println("free memory  is "+Runtime.getRuntime().freeMemory());
1: 		System.exit(0);
1: 	}
1: 
1: 	/*
1: 	**
1: 	** NOTE ON OUT OF MEMORY PROBLEMS:  in theory 
1: 	** when the VM runs out of memory an OutOfMemoryException
1: 	** should be thrown by the runtime, but unfortunately, that
1: 	** doesn't always seem to be the case.  When running this
1: 	** program the Testers just wind up hanging on memory
1: 	** allocation if there is insufficient memory.  To combat
1: 	** this we try to manually stop each thread, but when
1: 	** there is no memory, this doesn't seem to do anything
1: 	** either.  Also, we grab some memory up front and release
1: 	** that after telling the threads to stop themselves.
1: 	*/
1: 	private static long execTesters(mtTester[] testers)
1: 			throws FileNotFoundException, IOException
1: 	{
1: 		boolean interrupted = false;
1: 		boolean allWereAlive = true;
1: 		int		i;
1: 		long 	duration = 0;
1: 		int 	max = testers.length;
1: 		Thread[] threads;
1: 		byte[] extraMemory;
1: 
1: 		// new thread group
1: 		ThreadGroup tg = new ThreadGroup("workers");
1: 		//tg.allowThreadSuspension(false);
1: 
1: 		// grab start time
1: 		long start = System.currentTimeMillis();
1: 		long runTime = suite.getTimeMillis();
1: 		System.out.println("...running duration "+suite.getTime());
1: 
1: 		// grab some memory to make stopping easier
1:  		extraMemory = new byte[4096];
1: 
1: 		threads = new Thread[max];	
1: 		// run them
1: 		for (i = 0; i < max; i++)
1: 		{
1: 			threads[i] = new Thread(tg, testers[i]);
1: 			threads[i].start();
1: 		}
1: 
1: 		// loop sleeping 800ms a bite.
1: 		while (((duration = (System.currentTimeMillis() - start)) < runTime) &&
1: 				(allWereAlive = allAlive(threads)) && (!interrupted))
1: 		{
1: 			try 
1: 			{ 
1: 				Thread.sleep(800L); 
1: 			} catch (InterruptedException e) 
1: 			{ 
1: 				interrupted = true;	
1: 			}
1: 		}
1: 
1: 		System.out.println("...stopping testers");
1: 
1: 
1: 		/*
1: 		** Free up 2k of memory and garbage
1: 		** collect.  That should allow any
1: 		** starved testers to stop themselves.
1: 		*/
1: 		extraMemory = null;
1: 		System.gc();
1: 
1: 		/*
1: 		** Now stop everyone. First ask them to
1: 		** willingly stop.  By calling mtTester.stop()
1: 		** we prevent the testers from picking up the
1: 		** next task.  
1: 		*/
1: 		for (i = 0; i < testers.length; i++)
1: 		{
1: 			testers[i].stop();
1: 		}
1: 
1: 		/*
1: 		** Sleep 180 seconds, or until everyone
1: 		** is done.
1: 		*/
1: 		System.out.println("...waiting for testers to complete");
1: 		for (i = 0; i < MAX_WAIT_FOR_COMPLETION; i++)
1: 		{
1: 			try 
1: 			{ 
1: 				Thread.sleep((long)1000); 
1: 			} catch (InterruptedException e) 
1: 			{
1: 				System.out.println("...Unexpected InterrupedException: "+e);
1: 			}
1: 			if (allDead(threads))
1: 			{
1: 				break;
1: 			}
1: 		}
1: 
1: 		if (i == MAX_WAIT_FOR_COMPLETION)
1: 		{
1: 			log.println("WARNING: testers didn't die willingly, so I'm going to kill 'em.");
1: 			log.println("\tThis may result in connection resources that aren't cleaned up");
1: 			log.println("\t(e.g. you may see problems in the final script run with deadlocks).");
1: 		}
1: 	
1: 		/*	
1: 		** Now stop everyone that hasn't already stopped.
1: 		*/
1: 		for (i = 0; i < MAX_WAIT_FOR_COMPLETION && (tg.isDestroyed() == false ); i++) 
1: 		{ 
1: 
1: 			// can't really stop - deprecated because 'unsafe'. interrupt.
1: 			tg.interrupt();
1: 			try { Thread.sleep((long) 1000); } catch (InterruptedException e) {}
1: 
1: 			try 
1: 			{ 
1: 				tg.destroy(); 
1: 			} catch (IllegalThreadStateException e)
1: 			{
1: 				log.println("...waiting for ThreadGroup.interrupt() to work its magic");
1: 				try { Thread.sleep((long)1000); } catch (InterruptedException e2) {}
1: 				continue;
1: 			}
1: 			break;	
1: 		} 
1: 
1: 		if (interrupted == true)
1: 		{
1: 			System.out.println("TEST CASE SUMMARY: run interrupted");
1: 		}
1: 		else if (allWereAlive == false)
1: 		{
1: 			System.out.println("TEST CASE SUMMARY: abnormal termination due to error(s)"+
1: 				" -- see test log (./"+testName+"/"+testName+".log) for details ");
1: 		}
1: 		else
1: 		{
1: 			System.out.println("TEST CASE SUMMARY: normal termination");
1: 			if (i < MAX_WAIT_FOR_COMPLETION)
1: 			{
1: 				try
1: 				{
1: 					seqRunCases(suite.getFinalCases(), 
1: 							"last checks", 
1: 							inputDir, 
1: 							outputDir);
1: 				} catch (ijFatalException e)  
1: 				{ 
1: 					System.out.println("...error running final test cases");
1: 				}
1: 			}
1: 			else
1: 			{
1: 				System.out.println("...timed out trying to kill all testers,\n" +
1: 								"   skipping last scripts (if any).  NOTE: the\n"+
1: 								"   likely cause of the problem killing testers is\n"+
1: 								"   probably not enough VM memory OR test cases that\n"+
1: 								"   run for very long periods of time (so testers do not\n"+
1: 								"   have a chance to notice stop() requests");
1: 			}
1: 		}
1: 
1: 		return duration;
1: 	}
1: 
1: 
1: 	/**
1: 	** Search through the list of threads and see
1: 	** if they are all alive.
1: 	*/
1: 	public static boolean allAlive(Thread[] threads)
1: 	{
1: 		int	i;
1: 		for (i = 0; i < threads.length; i++)
1: 		{
1: 			if (threads[i].isAlive() == false)
1: 				break;
1: 		}
1: 		return (i == threads.length);
1: 	}
1: 
1: 	/**
1: 	** Search through the list of threads and see
1: 	** if they are all alive.
1: 	*/
1: 	public static boolean allDead(Thread[] threads)
1: 	{
1: 		int	i;
1: 		for (i = 0; i < threads.length; i++)
1: 		{
1: 			if (threads[i].isAlive() == true)
1: 				break;
1: 		}
1: 		return (i == threads.length);
1: 	}
1: 
1: 	/**
1: 	** Figure out the name of the log file and open
1: 	** it 
1: 	*/
0: 	private static LocalizedOutput openFile(String dir, String fileName, String suffix) 
1: 			throws IOException
1: 	{
0: 		String filePath;
0: 		String base;
0: 		int	dotSpot;
0: 		String newFile;
0: 		filePath = (dir == null) ? fileName : (dir + "/" + fileName);
1: 
0: 		if (suffix != null)
1: 		{
0: 			dotSpot = filePath.lastIndexOf(".");
1: 			if (dotSpot == -1)
1: 			{
0: 				dotSpot = filePath.length();
1: 			}
1: 
0: 			base = filePath.substring(0, dotSpot);
0: 			newFile = base + suffix;
1: 		}
1: 		else
1: 		{
0: 			newFile = filePath;
1: 		}	
0: 		return new LocalizedOutput(new FileOutputStream(newFile));
1: 	}
1: 	/**
1: 	** Sequentially run scripts
1: 	*/
1: 	private static void seqRunCases(Vector cases, String descr, String inputDir, String outputDir) 
1: 		throws FileNotFoundException, IOException, ijFatalException
1: 	{
1: 		LocalizedOutput	out;
1: 		BufferedInputStream	in;
1: 		mtTestCase		testCase;
1: 
1: 		if (cases == null)
1: 		{
1: 			System.out.println("...no "+descr+" being performed");
1: 			return;
1: 		}
1: 
1: 		Enumeration e = cases.elements();
1: 
1: 		while (e.hasMoreElements())
1: 		{
1: 			testCase = (mtTestCase)e.nextElement();
0: 			System.out.println("...running "+descr+" via "+testCase.getFile());	
0: 			out = openFile(outputDir, testCase.getFile(), ".out");
1: 			in = testCase.initialize(inputDir);
1: 			testCase.runMe(log, out, in);
1: 		}
1: 	}
1: 
1: 	/**
1: 	** Given the command file, infer the test name.
1: 	** Takes the portion of the file name between
1: 	** the last '.' and the last '/'.  e.g.
0: 	** x/y/Name.suffix -> Name
1: 	**
1: 	*/
1: 	private static String getTestName(String cmdFile)
1: 	{
1: 		int slash, dotSpot;
1: 
1: 		slash = cmdFile.lastIndexOf("/");
1: 		if (slash == -1)
1: 		{
1: 			slash = 0;
1: 		}
1: 
1: 		dotSpot = cmdFile.lastIndexOf(".");
1: 		if (dotSpot == -1)
1: 		{
1: 			dotSpot = cmdFile.length();
1: 		}
1: 		return cmdFile.substring(slash, dotSpot);
1: 
1: 	}
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:cd5dc32
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1: 		// Delete the .out files for Testers that did not report errors.
1: 		for (i = 0; i < max; i++)
0: 		{
1: 			if ( testers[i].noFailure() )
0: 			{
1: 				log.println("Deleting " + "Tester" + (i+1) + ".out" + "(" + outputDir + ")");
1: 				File out = new File(outputDir, "Tester" + (i+1) + ".out");
1: 				out.delete();
0: 			}
0: 			else
0: 			{
1: 				log.println("Tester" + (i+1) + " failed.");
0: 			}
0: 		}
0:         
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ece3ee6
/////////////////////////////////////////////////////////////////////////
1: 		log = openFile(outputDir, testName + ".log");
/////////////////////////////////////////////////////////////////////////
1: 				LocalizedOutput out = openFile(outputDir, tester + ".out");
/////////////////////////////////////////////////////////////////////////
1: 	private static LocalizedOutput openFile(String dir, String fileName) 
0: 		
1: 		java.io.File file = new java.io.File(dir, fileName);
1: 		return new LocalizedOutput(new FileOutputStream(file));
/////////////////////////////////////////////////////////////////////////
1: 			String testName = testCase.getFile();
1: 			System.out.println("...running "+descr+" via "+testName);
1: 			String logFileName = 
1: 				testName.substring(0, testName.lastIndexOf('.'));
1: 			out = openFile(outputDir, logFileName + ".out");
============================================================================