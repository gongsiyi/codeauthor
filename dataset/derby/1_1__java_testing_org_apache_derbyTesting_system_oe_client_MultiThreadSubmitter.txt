1:31ad846: /*
1:31ad846:  *
1:31ad846:  * Derby - Class org.apache.derbyTesting.system.oe.client.MultiThreadSubmitter
1:31ad846:  *
1:31ad846:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:31ad846:  * contributor license agreements.  See the NOTICE file distributed with
1:31ad846:  * this work for additional information regarding copyright ownership.
1:31ad846:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:31ad846:  * (the "License"); you may not use this file except in compliance with
1:31ad846:  * the License.  You may obtain a copy of the License at
1:31ad846:  *
1:31ad846:  *    http://www.apache.org/licenses/LICENSE-2.0
1:31ad846:  *
1:31ad846:  * Unless required by applicable law or agreed to in writing, 
1:31ad846:  * software distributed under the License is distributed on an 
1:31ad846:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:31ad846:  * either express or implied. See the License for the specific 
1:31ad846:  * language governing permissions and limitations under the License.
1:31ad846:  */
1:31ad846: package org.apache.derbyTesting.system.oe.client;
1:31ad846: 
1:31ad846: /**
1:31ad846:  * Execute transactions using multiple threads.
1:31ad846:  * A single thread uses a single submitter,
1:31ad846:  * submitters are created outside of this class.
1:31ad846:  */
1:31ad846: public class MultiThreadSubmitter {
1:31ad846: 
1:31ad846:     /**
1:31ad846:      * Execute count transactions per submitter
1:31ad846:      * using a newly created thread for each
1:31ad846:      * submitter. In total (count*submitter.length)
1:31ad846:      * transactions will be executed. The time returned
1:31ad846:      * will be the time to execute all the transactions.
1:31ad846:      * 
1:f73c63e:      * Each submitter will have its clearTransactionCount called
1:f73c63e:      * before the run.
1:f73c63e:      * 
1:31ad846:      * @param submitters Submitters to use.
1:31ad846:      * @param displays Displays for each submitter.
1:31ad846:      * If null then null will be passed into each transaction
1:31ad846:      * execution
1:31ad846:      * @param count Number of transactions per thread.
1:31ad846:      * @return Time to excute all of the transactions.
1:31ad846:      */
1:31ad846:     public static long multiRun(
1:31ad846:             Submitter[] submitters,
1:31ad846:             Object[] displays,
1:31ad846:             int count) {
1:31ad846: 
1:31ad846:         Thread[] threads = new Thread[submitters.length];
1:31ad846:         for (int i = 0; i < submitters.length; i++) {
1:f73c63e:             submitters[i].clearTransactionCount();
1:31ad846:             Object displayData = displays == null ? null : displays[i];
1:31ad846:             threads[i] = newThread(i, submitters[i], displayData, count);
1:31ad846:         }
1:31ad846: 
1:31ad846:         // Start all the threads
1:31ad846:         long start = System.currentTimeMillis();
1:31ad846:         for (int i = 0; i < threads.length; i++)
1:31ad846:             threads[i].start();
1:31ad846: 
1:31ad846:         // and then wait for them to finish
1:31ad846:         for (int i = 0; i < threads.length; i++) {
1:31ad846:             try {
1:31ad846:                 threads[i].join();
1:31ad846:             } catch (InterruptedException e) {
1:31ad846:                 e.printStackTrace();
1:31ad846:             }
1:31ad846:         }
1:31ad846: 
1:31ad846:         long end = System.currentTimeMillis();
1:31ad846: 
1:31ad846:         return end - start;
1:31ad846:     }
1:31ad846: 
1:31ad846:     /**
1:31ad846:      * Return a thread that will run count transactions using a submitter.
1:31ad846:      * 
1:31ad846:      * @param threadId
1:31ad846:      *            Number of thread.
1:31ad846:      * @param submitter
1:31ad846:      *            Submitter
1:31ad846:      * @param displayData
1:31ad846:      *            DisplayData for this submitter
1:31ad846:      * @param count
1:31ad846:      *            Number of transactions to run.
1:31ad846:      * 
1:31ad846:      * @return Thread (not started)
1:31ad846:      */
1:31ad846:     private static Thread newThread(final int threadId,
1:31ad846:             final Submitter submitter,
1:31ad846:             final Object displayData, final int count) {
1:31ad846:         Thread t = new Thread("OE_Thread:" + threadId) {
1:31ad846: 
1:31ad846:             public void run() {
1:31ad846:                 try {
1:31ad846:                     submitter.runTransactions(displayData, count);
1:31ad846:                 } catch (Exception e) {
1:31ad846:                     e.printStackTrace();
1:31ad846:                 }
1:31ad846:             }
1:31ad846:         };
1:31ad846: 
1:31ad846:         return t;
1:31ad846:     }
1:31ad846: 
1:31ad846: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f73c63e
/////////////////////////////////////////////////////////////////////////
1:      * Each submitter will have its clearTransactionCount called
1:      * before the run.
1:      * 
/////////////////////////////////////////////////////////////////////////
1:             submitters[i].clearTransactionCount();
commit:31ad846
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.system.oe.client.MultiThreadSubmitter
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.system.oe.client;
1: 
1: /**
1:  * Execute transactions using multiple threads.
1:  * A single thread uses a single submitter,
1:  * submitters are created outside of this class.
1:  */
1: public class MultiThreadSubmitter {
1: 
1:     /**
1:      * Execute count transactions per submitter
1:      * using a newly created thread for each
1:      * submitter. In total (count*submitter.length)
1:      * transactions will be executed. The time returned
1:      * will be the time to execute all the transactions.
1:      * 
1:      * @param submitters Submitters to use.
1:      * @param displays Displays for each submitter.
1:      * If null then null will be passed into each transaction
1:      * execution
1:      * @param count Number of transactions per thread.
1:      * @return Time to excute all of the transactions.
1:      */
1:     public static long multiRun(
1:             Submitter[] submitters,
1:             Object[] displays,
1:             int count) {
1: 
1:         Thread[] threads = new Thread[submitters.length];
1:         for (int i = 0; i < submitters.length; i++) {
1:             Object displayData = displays == null ? null : displays[i];
1:             threads[i] = newThread(i, submitters[i], displayData, count);
1:         }
1: 
1:         // Start all the threads
1:         long start = System.currentTimeMillis();
1:         for (int i = 0; i < threads.length; i++)
1:             threads[i].start();
1: 
1:         // and then wait for them to finish
1:         for (int i = 0; i < threads.length; i++) {
1:             try {
1:                 threads[i].join();
1:             } catch (InterruptedException e) {
1:                 e.printStackTrace();
1:             }
1:         }
1: 
1:         long end = System.currentTimeMillis();
1: 
1:         return end - start;
1:     }
1: 
1:     /**
1:      * Return a thread that will run count transactions using a submitter.
1:      * 
1:      * @param threadId
1:      *            Number of thread.
1:      * @param submitter
1:      *            Submitter
1:      * @param displayData
1:      *            DisplayData for this submitter
1:      * @param count
1:      *            Number of transactions to run.
1:      * 
1:      * @return Thread (not started)
1:      */
1:     private static Thread newThread(final int threadId,
1:             final Submitter submitter,
1:             final Object displayData, final int count) {
1:         Thread t = new Thread("OE_Thread:" + threadId) {
1: 
1:             public void run() {
1:                 try {
1:                     submitter.runTransactions(displayData, count);
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         };
1: 
1:         return t;
1:     }
1: 
1: }
============================================================================