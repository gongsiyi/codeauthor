1:0acf797: /*
1:0acf797: 
1:0acf797:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.FullName
1:0acf797: 
1:0acf797:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0acf797:    contributor license agreements.  See the NOTICE file distributed with
1:0acf797:    this work for additional information regarding copyright ownership.
1:0acf797:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0acf797:    (the "License"); you may not use this file except in compliance with
1:0acf797:    the License.  You may obtain a copy of the License at
1:0acf797: 
1:0acf797:      http://www.apache.org/licenses/LICENSE-2.0
1:0acf797: 
1:0acf797:    Unless required by applicable law or agreed to in writing, software
1:0acf797:    distributed under the License is distributed on an "AS IS" BASIS,
1:0acf797:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0acf797:    See the License for the specific language governing permissions and
1:0acf797:    limitations under the License.
1:0acf797: 
1:0acf797:  */
1:0acf797: 
1:0acf797: package org.apache.derbyTesting.functionTests.tests.lang;
1:0acf797: 
1:0acf797: import java.io.Externalizable;
1:0acf797: import java.io.IOException;
1:0acf797: import java.io.ObjectInput;
1:0acf797: import java.io.ObjectOutput;
1:0acf797: 
1:0acf797: /**
1:0acf797:  * A Comparable UDT for tests.
1:0acf797:  */
1:0acf797: public class FullName implements Comparable<FullName>, Externalizable
1:0acf797: {
1:0acf797:     // initial version id
1:0acf797:     private static final int FIRST_VERSION = 0;
1:0acf797: 
1:0acf797:     private String  _firstName;
1:0acf797:     private String  _lastName;
1:0acf797: 
1:0acf797:     // 0-arg constructor needed for UDT contract
1:0acf797:     public  FullName() {}
1:0acf797: 
1:0acf797:     public FullName( String firstName, String lastName )
1:0acf797:     {
1:0acf797:         _firstName = firstName;
1:0acf797:         _lastName = lastName;
1:0acf797:     }
1:0acf797: 
1:0acf797:     public  String  firstName() { return _firstName; }
1:0acf797:     public  String  lastName() { return _lastName; }
1:0acf797: 
1:0acf797:         // methods to be registered as functions
1:0acf797:     public static FullName makeFullName( String firstName, String lastName ) { return new FullName( firstName, lastName ); }
1:0acf797: 
1:0acf797:     public  String  toString()
1:0acf797:     {
1:0acf797:         return _firstName + " " + _lastName;
1:0acf797:     }
1:0acf797: 
1:0acf797:     // Externalizable implementation
1:0acf797:     public void writeExternal( ObjectOutput out ) throws IOException
1:0acf797:     {
1:0acf797:         // first write the version id
1:0acf797:         out.writeInt( FIRST_VERSION );
1:0acf797: 
1:0acf797:         // now write the state
1:0acf797:         out.writeObject( _firstName );
1:0acf797:         out.writeObject( _lastName );
1:0acf797:     }  
1:0acf797:     public void readExternal( ObjectInput in )throws IOException, ClassNotFoundException
1:0acf797:     {
1:0acf797:         // read the version id
1:0acf797:         int oldVersion = in.readInt();
1:0acf797: 
1:0acf797:         _firstName = (String) in.readObject();
1:0acf797:         _lastName = (String) in.readObject();
1:0acf797:     }
1:0acf797: 
1:0acf797:     // Comparable implementation
1:0acf797:     public  int compareTo( FullName that )
1:0acf797:     {
1:0acf797:         if ( that == null ) { return 1; }
1:0acf797: 
1:0acf797:         int     result = this._lastName.compareTo( that._lastName );
1:0acf797:         if ( result != 0 ) { return result; }
1:0acf797: 
1:0acf797:         return this._firstName.compareTo( that._firstName );
1:0acf797:     }
1:0acf797:     public  boolean equals( Object other )
1:0acf797:     {
1:0acf797:         if ( other == null ) { return false; }
1:0acf797:         else if ( !(other instanceof FullName) ) { return false; }
1:0acf797:         else { return (compareTo( (FullName) other ) == 0); }
1:0acf797:     }
1:0acf797:     public  int hashCode() { return toString().hashCode(); }
1:0acf797: 
1:0acf797: }
1:0acf797: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:0acf797
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.FullName
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.Externalizable;
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: /**
1:  * A Comparable UDT for tests.
1:  */
1: public class FullName implements Comparable<FullName>, Externalizable
1: {
1:     // initial version id
1:     private static final int FIRST_VERSION = 0;
1: 
1:     private String  _firstName;
1:     private String  _lastName;
1: 
1:     // 0-arg constructor needed for UDT contract
1:     public  FullName() {}
1: 
1:     public FullName( String firstName, String lastName )
1:     {
1:         _firstName = firstName;
1:         _lastName = lastName;
1:     }
1: 
1:     public  String  firstName() { return _firstName; }
1:     public  String  lastName() { return _lastName; }
1: 
1:         // methods to be registered as functions
1:     public static FullName makeFullName( String firstName, String lastName ) { return new FullName( firstName, lastName ); }
1: 
1:     public  String  toString()
1:     {
1:         return _firstName + " " + _lastName;
1:     }
1: 
1:     // Externalizable implementation
1:     public void writeExternal( ObjectOutput out ) throws IOException
1:     {
1:         // first write the version id
1:         out.writeInt( FIRST_VERSION );
1: 
1:         // now write the state
1:         out.writeObject( _firstName );
1:         out.writeObject( _lastName );
1:     }  
1:     public void readExternal( ObjectInput in )throws IOException, ClassNotFoundException
1:     {
1:         // read the version id
1:         int oldVersion = in.readInt();
1: 
1:         _firstName = (String) in.readObject();
1:         _lastName = (String) in.readObject();
1:     }
1: 
1:     // Comparable implementation
1:     public  int compareTo( FullName that )
1:     {
1:         if ( that == null ) { return 1; }
1: 
1:         int     result = this._lastName.compareTo( that._lastName );
1:         if ( result != 0 ) { return result; }
1: 
1:         return this._firstName.compareTo( that._firstName );
1:     }
1:     public  boolean equals( Object other )
1:     {
1:         if ( other == null ) { return false; }
1:         else if ( !(other instanceof FullName) ) { return false; }
1:         else { return (compareTo( (FullName) other ) == 0); }
1:     }
1:     public  int hashCode() { return toString().hashCode(); }
1: 
1: }
1: 
============================================================================