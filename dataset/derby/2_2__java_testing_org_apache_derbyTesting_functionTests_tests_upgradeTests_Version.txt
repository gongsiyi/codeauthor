1:6409b40: /*
5:6409b40: 
1:6409b40: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Version
1:6409b40: 
1:6409b40: Licensed to the Apache Software Foundation (ASF) under one or more
1:6409b40: contributor license agreements.  See the NOTICE file distributed with
1:6409b40: this work for additional information regarding copyright ownership.
1:6409b40: The ASF licenses this file to You under the Apache License, Version 2.0
1:6409b40: (the "License"); you may not use this file except in compliance with
1:6409b40: the License.  You may obtain a copy of the License at
1:6409b40: 
1:6409b40:    http://www.apache.org/licenses/LICENSE-2.0
1:6409b40: 
1:6409b40: Unless required by applicable law or agreed to in writing, software
1:6409b40: distributed under the License is distributed on an "AS IS" BASIS,
1:6409b40: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6409b40: See the License for the specific language governing permissions and
1:6409b40: limitations under the License.
1:6409b40: 
1:6409b40: */
1:6409b40: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1:6409b40: 
1:6409b40: import java.util.ArrayList;
1:6409b40: import java.util.Arrays;
1:6409b40: import java.util.HashMap;
1:6409b40: 
1:6409b40: import org.apache.derby.iapi.services.info.ProductVersionHolder;
1:6409b40: 
1:6409b40: /**
1:6409b40:  * <p>
1:6409b40:  * A Derby version.
1:6409b40:  * </p>
1:6409b40:  */
1:e18f54b: public class Version implements Comparable<Version>
2:6409b40: {
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40:     //
1:6409b40:     // CONSTANTS
1:6409b40:     //
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40: 
1:6409b40:     private static final int EXPECTED_LEG_COUNT = 4;
1:6409b40: 
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40:     //
1:6409b40:     // STATE
1:6409b40:     //
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40: 
1:6409b40:     private int[] _legs;
1:6409b40:     private String _key;
1:6409b40:     private String _branchID;
1:6409b40: 
1:6409b40:     // we keep one class loader per version so that we don't have an explosion
1:6409b40:     // of class loaders for redundant versions
1:e18f54b:     private static HashMap<String, ClassLoader> _classLoaders =
1:e18f54b:             new HashMap<String, ClassLoader>();
1:6409b40:     
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40:     //
1:6409b40:     // CONSTRUCTOR
1:6409b40:     //
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40: 
1:6409b40:     /** Construct a version from four legs */
1:6409b40:     public Version( int major, int minor, int fixpack, int bugversion )
1:6409b40:     {
1:6409b40:         this( new int[] { major, minor, fixpack, bugversion } );
2:6409b40:     }
1:6409b40:     
1:6409b40:     /** Construct a version from its legs */
1:6409b40:     public Version( int[] legs )
1:6409b40:     {
1:a61fd53:         constructorMinion( legs );
1:6409b40:     }
1:6409b40: 
1:a61fd53:     /** Construct from a Derby ProductVersionHolder  */
1:a61fd53:     public Version( ProductVersionHolder pvh )
1:6409b40:     {
1:a61fd53:         constructorMinion( getLegs( pvh ) );
1:6409b40:     }
1:a61fd53:     private void constructorMinion( int[] legs )
1:6409b40:     {
1:6409b40:         if ( legs == null ) { legs = new int[] {}; }
1:6409b40:         int count = legs.length;
1:6409b40: 
1:6409b40:         if ( count != EXPECTED_LEG_COUNT )
1:6409b40:         {
1:6409b40:             throw new IllegalArgumentException( "Expected " + EXPECTED_LEG_COUNT + " legs but only saw " + count );
1:6409b40:         }
1:6409b40: 
1:6409b40:         _legs = new int[ count ];
1:6409b40:         for ( int i = 0; i < count; i++ ) { _legs[ i ] = legs[ i ]; }
1:a61fd53: 
1:a61fd53:         makeKey();
1:6409b40:     }
1:6409b40:     private int[] getLegs( ProductVersionHolder pvh )
1:6409b40:     {
1:6409b40:         int[] result = new int[ EXPECTED_LEG_COUNT ];
1:6409b40:         int   idx = 0;
1:6409b40: 
1:6409b40:         result[ idx++ ] = pvh.getMajorVersion();
1:6409b40:         result[ idx++ ] = pvh.getMinorVersion();
1:6409b40:         result[ idx++ ] = pvh.getMaintVersion() / ProductVersionHolder.MAINT_ENCODING;
1:6409b40:         result[ idx++ ] = pvh.getMaintVersion() % ProductVersionHolder.MAINT_ENCODING;
1:6409b40: 
1:6409b40:         return result;
1:6409b40:      }
1:6409b40: 
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40:     //
1:6409b40:     // PUBLIC BEHAVIOR
1:6409b40:     //
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40: 
1:6409b40:     /**
1:6409b40:      * <p>
1:6409b40:      * Pretty-print this version.
1:6409b40:      * </p>
1:6409b40:      */
1:6409b40:     public String toString()
1:6409b40:     {
1:6409b40:         return _key;
1:6409b40:     }
1:6409b40: 
1:6409b40:     /**
1:6409b40:      * <p>
1:6409b40:      * Pretty-print the branch id, that is, the major + minor legs of the Version.
1:6409b40:      * </p>
1:6409b40:      */
1:6409b40:     public String getBranchID()
1:6409b40:     {
1:6409b40:         if ( _branchID == null )
1:6409b40:         {
1:6409b40:             _branchID = Integer.toString(_legs[ 0 ]) + '.' + Integer.toString(_legs[ 1 ]);
1:6409b40:         }
1:6409b40: 
1:6409b40:         return _branchID;
1:6409b40:     }
1:6409b40: 
1:6409b40:     /**
1:6409b40:      * <p>
1:6409b40:      * Get a class loader for this version.
1:6409b40:      * </p>
1:6409b40:      */
1:6409b40:     public ClassLoader getClassLoader()
1:6409b40:     {
1:a61fd53:         ClassLoader retval = (ClassLoader) _classLoaders.get( _key );
1:a61fd53:         if ( retval != null ) { return retval; }
1:a61fd53:         
1:a61fd53:         addClassLoader( );
1:a61fd53:         
1:6409b40:         return (ClassLoader) _classLoaders.get( _key );
1:6409b40:     }
1:6409b40:     
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40:     //
1:6409b40:     // Comparable BEHAVIOR
1:6409b40:     //
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40: 
1:e18f54b:     public int compareTo( Version other )
1:6409b40:     {
1:6409b40:         if ( other == null ) { return 1; }
1:6409b40: 
1:6409b40:         for ( int i = 0; i < EXPECTED_LEG_COUNT; i++ )
1:6409b40:         {
1:e18f54b:             int result = this._legs[ i ] - other._legs[ i ];
1:6409b40: 
1:6409b40:             if ( result != 0 ) { return result; }
1:6409b40:         }
1:6409b40: 
1:6409b40:         return 0;
1:6409b40:     }
1:6409b40: 
1:e18f54b:     public boolean equals( Object other ) {
1:e18f54b:         return (other instanceof Version) && (compareTo((Version) other) == 0);
1:e18f54b:     }
1:6409b40:     public int hashCode() { return toString().hashCode(); }
1:6409b40:     
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40:     //
1:6409b40:     // MINIONS
1:6409b40:     //
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40: 
1:6409b40:     /**
1:6409b40:      * <p>
1:6409b40:      * Add the class loader for this version if it doesn't already exist.
1:6409b40:      * </p>
1:6409b40:      */
1:a61fd53:     private void addClassLoader( )
1:6409b40:     {
1:a61fd53:         ClassLoader classLoader = UpgradeClassLoader.makeClassLoader( _legs );
1:6409b40: 
1:a61fd53:         _classLoaders.put( _key, classLoader );
1:6409b40:     }
1:6409b40: 
1:6409b40:     /**
1:6409b40:      * <p>
1:6409b40:      * Make the key for looking up our class loader.
1:6409b40:      * </p>
1:6409b40:      */
1:6409b40:     private void makeKey()
1:6409b40:     {
1:6409b40:         StringBuffer buffer = new StringBuffer();
1:6409b40:         int          legCount = _legs.length;
1:6409b40: 
1:6409b40:         for ( int i = 0; i < legCount; i++ )
1:6409b40:         {
1:6409b40:             if ( i > 0 ) { buffer.append( '.' ); }
1:6409b40:             buffer.append( _legs[ i ] );
1:6409b40:         }
1:6409b40: 
1:6409b40:         _key = buffer.toString();
1:6409b40:     }
1:6409b40: 
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40:     //
1:6409b40:     // INNER CLASSES
1:6409b40:     //
1:6409b40:     ///////////////////////////////////////////////////////////////////////////////////
1:6409b40: 
1:6409b40:     /**
1:6409b40:      * <p>
1:6409b40:      * This is a sequence of Versions. It is the caller's responsibility to
1:6409b40:      * determine whether the Versions are in sort order.
1:6409b40:      * </p>
1:6409b40:      */
1:6409b40:     public static final class Trajectory implements Comparable
1:6409b40:     {
1:6409b40:         private Version[] _versions;
1:6409b40: 
1:6409b40:         /**
1:6409b40:          * <p>
1:6409b40:          * Construct from a list of Versions.
1:6409b40:          * </p>
1:6409b40:          */
1:e18f54b:         public Trajectory( ArrayList<Version> versionList )
1:6409b40:         {
1:e18f54b:             if (versionList == null) {
1:e18f54b:                 versionList = new ArrayList<Version>();
1:e18f54b:             }
1:6409b40: 
1:6409b40:             Version[] versions = new Version[ versionList.size() ];
1:6409b40:             versionList.toArray( versions );
1:6409b40: 
1:6409b40:             constructorMinion( versions );
1:6409b40:         }
1:6409b40: 
1:6409b40:         /**
1:6409b40:          * <p>
1:6409b40:          * Construct from an array of Versions.
1:6409b40:          * </p>
1:6409b40:          */
1:6409b40:         public Trajectory( Version[] versions )
1:6409b40:         {
1:6409b40:             if ( versions == null ) { versions = new Version[ 0 ]; }
1:6409b40: 
1:6409b40:             constructorMinion( versions );
1:6409b40:         }
1:6409b40: 
1:6409b40:         private void constructorMinion( Version[] versions )
1:6409b40:         {
1:6409b40:             int count = versions .length;
1:6409b40:             _versions = new Version[ count ];
1:6409b40: 
1:6409b40:             for ( int i = 0; i < count; i++ ) { _versions[ i ] = versions[ i ]; }
1:6409b40:         }
1:6409b40: 
1:6409b40:         /**
1:6409b40:          * <p>
1:6409b40:          * Sort this Trajectory so that the Versions are arranged in ascending
1:6409b40:          * order. Returns this Trajectory after the sort.
1:6409b40:          * </p>
1:6409b40:          */
1:6409b40:         public Trajectory sort()
1:6409b40:         {
1:6409b40:             Arrays.sort( _versions );
1:6409b40: 
1:6409b40:             return this;
1:6409b40:         }
1:6409b40: 
1:6409b40:         public int getVersionCount() { return _versions.length; }
1:6409b40:         public Version getVersion( int idx ) { return _versions[ idx ]; }
1:6409b40: 
1:6409b40:         /**
1:6409b40:          * <p>
1:b05fa6e:          * Return the ending Version of this Trajectory.
1:b05fa6e:          * </p>
1:b05fa6e:          */
1:b05fa6e:         public Version getEndingVersion()
1:b05fa6e:         {
1:b05fa6e:             return getVersion( getVersionCount() -1 );
1:b05fa6e:         }
1:b05fa6e:         
1:b05fa6e:         /**
1:b05fa6e:          * <p>
1:6409b40:          * Return true if this Trajectory starts at the desired Version.
1:6409b40:          * </p>
1:6409b40:          */
1:6409b40:         public boolean startsAt( Version candidate )
1:6409b40:         {
1:6409b40:             return ( getVersion( 0 ).equals( candidate ) );
1:6409b40:         }
1:6409b40:         
1:6409b40:         /**
1:6409b40:          * <p>
1:6409b40:          * Return true if this Trajectory starts at the desired branch.
1:6409b40:          * </p>
1:6409b40:          */
1:6409b40:         public boolean startsAt( String branchID )
1:6409b40:         {
1:6409b40:             return ( getVersion( 0 ).getBranchID().equals( branchID ) );
1:6409b40:         }
1:6409b40:         
1:6409b40:         /**
1:6409b40:          * <p>
1:6409b40:          * Return true if this Trajectory contains the desired Version.
1:6409b40:          * </p>
1:6409b40:          */
1:6409b40:         public boolean contains( Version candidate )
1:6409b40:         {
1:6409b40:             int count = getVersionCount();
1:6409b40:             for ( int i = 0; i < count; i++ )
1:6409b40:             {
1:6409b40:                 if ( getVersion( i ).equals( candidate ) ) { return true; }
1:6409b40:             }
1:6409b40:             
1:6409b40:             return false;
1:6409b40:         }
1:6409b40:         
1:6409b40:         /**
1:6409b40:          * <p>
1:6409b40:          * Return true if this Trajectory contains a version from the desired branch.
1:6409b40:          * </p>
1:6409b40:          */
1:6409b40:         public boolean contains( String branchID )
1:6409b40:         {
1:6409b40:             int count = getVersionCount();
1:6409b40:             for ( int i = 0; i < count; i++ )
1:6409b40:             {
1:6409b40:                 if ( getVersion( i ).getBranchID().equals( branchID ) ) { return true; }
1:6409b40:             }
1:6409b40:             
1:6409b40:             return false;
1:6409b40:         }
1:6409b40:         
1:6409b40:         /**
1:6409b40:          * <p>
1:6409b40:          * Return true if this Trajectory ends at the desired Version.
1:6409b40:          * </p>
1:6409b40:          */
1:6409b40:         public boolean endsAt( Version candidate )
1:6409b40:         {
1:6409b40:             return ( getVersion( getVersionCount() - 1 ).equals( candidate ) );
1:6409b40:         }
1:6409b40:         
1:6409b40:         /**
1:6409b40:          * <p>
1:6409b40:          * Return true if this Trajectory ends at the desired branch.
1:6409b40:          * </p>
1:6409b40:          */
1:6409b40:         public boolean endsAt( String branchID )
1:6409b40:         {
1:6409b40:             return ( getVersion( getVersionCount() - 1 ).getBranchID().equals( branchID ) );
1:6409b40:         }
1:6409b40:         
1:6409b40:         public String toString()
1:6409b40:         {
1:6409b40:             StringBuffer buffer = new StringBuffer();
1:6409b40:             int          count = _versions.length;
1:6409b40: 
1:6409b40:             for ( int i = 0; i < count; i++ )
1:6409b40:             {
1:6409b40:                 if ( i > 0 ) { buffer.append( " -> " ); }
1:6409b40:                 buffer.append( _versions[ i ].toString() );
1:6409b40:             }
1:6409b40: 
1:6409b40:             return buffer.toString();
1:6409b40:         }
1:6409b40: 
2:6409b40:         public int compareTo( Object other )
1:6409b40:         {
1:6409b40:             if ( other == null ) { return -1; }
1:6409b40:             if ( !(other instanceof Trajectory) ) { return -1; }
1:6409b40: 
1:6409b40:             Trajectory that = (Trajectory) other;
1:6409b40:             int           thisLength = this.getVersionCount();
1:6409b40:             int           thatLength = that.getVersionCount();
1:6409b40:             int           minLength = thisLength < thatLength ? thisLength : thatLength;
1:6409b40: 
1:6409b40:             for ( int i = 0; i < minLength; i++ )
1:6409b40:             {
1:6409b40:                 int result = this.getVersion( i ).compareTo( that.getVersion( i ) );
1:6409b40:                 if ( result != 0 ) { return result; }
1:6409b40:             }
1:6409b40: 
1:6409b40:             return thisLength - thatLength;
1:6409b40:         }
1:6409b40: 
2:6409b40:         public boolean equals( Object other ) { return ( compareTo( other ) == 0 ); }
1:6409b40: 
1:6409b40:         public int hashCode() { return toString().hashCode(); }
1:6409b40:     }
1:6409b40: 
1:6409b40: 
1:6409b40: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
1: public class Version implements Comparable<Version>
/////////////////////////////////////////////////////////////////////////
1:     private static HashMap<String, ClassLoader> _classLoaders =
1:             new HashMap<String, ClassLoader>();
/////////////////////////////////////////////////////////////////////////
1:     public int compareTo( Version other )
1:             int result = this._legs[ i ] - other._legs[ i ];
/////////////////////////////////////////////////////////////////////////
1:     public boolean equals( Object other ) {
1:         return (other instanceof Version) && (compareTo((Version) other) == 0);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         public Trajectory( ArrayList<Version> versionList )
1:             if (versionList == null) {
1:                 versionList = new ArrayList<Version>();
1:             }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b05fa6e
/////////////////////////////////////////////////////////////////////////
1:          * Return the ending Version of this Trajectory.
1:          * </p>
1:          */
1:         public Version getEndingVersion()
1:         {
1:             return getVersion( getVersionCount() -1 );
1:         }
1:         
1:         /**
1:          * <p>
commit:a61fd53
/////////////////////////////////////////////////////////////////////////
1:         constructorMinion( legs );
1:     /** Construct from a Derby ProductVersionHolder  */
1:     public Version( ProductVersionHolder pvh )
1:         constructorMinion( getLegs( pvh ) );
1:     private void constructorMinion( int[] legs )
/////////////////////////////////////////////////////////////////////////
1: 
1:         makeKey();
/////////////////////////////////////////////////////////////////////////
1:         ClassLoader retval = (ClassLoader) _classLoaders.get( _key );
1:         if ( retval != null ) { return retval; }
1:         
1:         addClassLoader( );
1:         
/////////////////////////////////////////////////////////////////////////
1:     private void addClassLoader( )
1:         ClassLoader classLoader = UpgradeClassLoader.makeClassLoader( _legs );
1:         _classLoaders.put( _key, classLoader );
commit:6409b40
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Version
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.HashMap;
1: 
1: import org.apache.derby.iapi.services.info.ProductVersionHolder;
1: 
1: /**
1:  * <p>
1:  * A Derby version.
1:  * </p>
1:  */
0: public class Version implements Comparable
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static final int EXPECTED_LEG_COUNT = 4;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private int[] _legs;
1:     private String _key;
1:     private String _branchID;
1: 
1:     // we keep one class loader per version so that we don't have an explosion
1:     // of class loaders for redundant versions
0:     private static HashMap _classLoaders = new HashMap();
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Construct a version from four legs */
1:     public Version( int major, int minor, int fixpack, int bugversion )
1:     {
1:         this( new int[] { major, minor, fixpack, bugversion } );
1:     }
1:     
1:     /** Construct a version from its legs */
1:     public Version( int[] legs )
1:     {
0:         constructorMinion( legs, null );
1:     }
1: 
0:     /** Construct from a Derby ProductVersionHolder and a classloader */
0:     public Version( ProductVersionHolder pvh, ClassLoader classLoader )
1:     {
0:         constructorMinion( getLegs( pvh ), classLoader );
1:     }
0:     private void constructorMinion( int[] legs, ClassLoader classLoader )
1:     {
1:         if ( legs == null ) { legs = new int[] {}; }
1:         int count = legs.length;
1: 
1:         if ( count != EXPECTED_LEG_COUNT )
1:         {
1:             throw new IllegalArgumentException( "Expected " + EXPECTED_LEG_COUNT + " legs but only saw " + count );
1:         }
1: 
1:         _legs = new int[ count ];
1:         for ( int i = 0; i < count; i++ ) { _legs[ i ] = legs[ i ]; }
1:         
0:         addClassLoader( classLoader );
1:     }
1:     private int[] getLegs( ProductVersionHolder pvh )
1:     {
1:         int[] result = new int[ EXPECTED_LEG_COUNT ];
1:         int   idx = 0;
1: 
1:         result[ idx++ ] = pvh.getMajorVersion();
1:         result[ idx++ ] = pvh.getMinorVersion();
1:         result[ idx++ ] = pvh.getMaintVersion() / ProductVersionHolder.MAINT_ENCODING;
1:         result[ idx++ ] = pvh.getMaintVersion() % ProductVersionHolder.MAINT_ENCODING;
1: 
1:         return result;
1:      }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // PUBLIC BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Pretty-print this version.
1:      * </p>
1:      */
1:     public String toString()
1:     {
1:         return _key;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Pretty-print the branch id, that is, the major + minor legs of the Version.
1:      * </p>
1:      */
1:     public String getBranchID()
1:     {
1:         if ( _branchID == null )
1:         {
1:             _branchID = Integer.toString(_legs[ 0 ]) + '.' + Integer.toString(_legs[ 1 ]);
1:         }
1: 
1:         return _branchID;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Get a class loader for this version.
1:      * </p>
1:      */
1:     public ClassLoader getClassLoader()
1:     {
1:         return (ClassLoader) _classLoaders.get( _key );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Comparable BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public int compareTo( Object other )
1:     {
1:         if ( other == null ) { return 1; }
0:         if ( !(other instanceof Version) ) { return 1; }
1: 
0:         Version that = (Version) other;
1: 
1:         for ( int i = 0; i < EXPECTED_LEG_COUNT; i++ )
1:         {
0:             int result = this._legs[ i ] - that._legs[ i ];
1: 
1:             if ( result != 0 ) { return result; }
1:         }
1: 
1:         return 0;
1:     }
1: 
1:     public boolean equals( Object other ) { return ( compareTo( other ) == 0 ); }
1:     public int hashCode() { return toString().hashCode(); }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Add the class loader for this version if it doesn't already exist.
1:      * </p>
1:      */
0:     private void addClassLoader( ClassLoader classLoader)
1:     {
0:         makeKey();
1: 
0:         if ( classLoader == null ) { classLoader = getClassLoader(); }
0:         else { _classLoaders.put( _key, classLoader ); }
1: 
0:         if ( classLoader == null )
1:         {
0:             classLoader = UpgradeClassLoader.makeClassLoader( _legs );
1: 
0:             _classLoaders.put( _key, classLoader );
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Make the key for looking up our class loader.
1:      * </p>
1:      */
1:     private void makeKey()
1:     {
1:         StringBuffer buffer = new StringBuffer();
1:         int          legCount = _legs.length;
1: 
1:         for ( int i = 0; i < legCount; i++ )
1:         {
1:             if ( i > 0 ) { buffer.append( '.' ); }
1:             buffer.append( _legs[ i ] );
1:         }
1: 
1:         _key = buffer.toString();
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // INNER CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * This is a sequence of Versions. It is the caller's responsibility to
1:      * determine whether the Versions are in sort order.
1:      * </p>
1:      */
1:     public static final class Trajectory implements Comparable
1:     {
1:         private Version[] _versions;
1: 
1:         /**
1:          * <p>
1:          * Construct from a list of Versions.
1:          * </p>
1:          */
0:         public Trajectory( ArrayList versionList )
1:         {
0:             if ( versionList == null ) { versionList = new ArrayList(); }
1: 
1:             Version[] versions = new Version[ versionList.size() ];
1:             versionList.toArray( versions );
1: 
1:             constructorMinion( versions );
1:         }
1: 
1:         /**
1:          * <p>
1:          * Construct from an array of Versions.
1:          * </p>
1:          */
1:         public Trajectory( Version[] versions )
1:         {
1:             if ( versions == null ) { versions = new Version[ 0 ]; }
1: 
1:             constructorMinion( versions );
1:         }
1: 
1:         private void constructorMinion( Version[] versions )
1:         {
1:             int count = versions .length;
1:             _versions = new Version[ count ];
1: 
1:             for ( int i = 0; i < count; i++ ) { _versions[ i ] = versions[ i ]; }
1:         }
1: 
1:         /**
1:          * <p>
1:          * Sort this Trajectory so that the Versions are arranged in ascending
1:          * order. Returns this Trajectory after the sort.
1:          * </p>
1:          */
1:         public Trajectory sort()
1:         {
1:             Arrays.sort( _versions );
1: 
1:             return this;
1:         }
1: 
1:         public int getVersionCount() { return _versions.length; }
1:         public Version getVersion( int idx ) { return _versions[ idx ]; }
1: 
1:         /**
1:          * <p>
1:          * Return true if this Trajectory starts at the desired Version.
1:          * </p>
1:          */
1:         public boolean startsAt( Version candidate )
1:         {
1:             return ( getVersion( 0 ).equals( candidate ) );
1:         }
1:         
1:         /**
1:          * <p>
1:          * Return true if this Trajectory starts at the desired branch.
1:          * </p>
1:          */
1:         public boolean startsAt( String branchID )
1:         {
1:             return ( getVersion( 0 ).getBranchID().equals( branchID ) );
1:         }
1:         
1:         /**
1:          * <p>
1:          * Return true if this Trajectory contains the desired Version.
1:          * </p>
1:          */
1:         public boolean contains( Version candidate )
1:         {
1:             int count = getVersionCount();
1:             for ( int i = 0; i < count; i++ )
1:             {
1:                 if ( getVersion( i ).equals( candidate ) ) { return true; }
1:             }
1:             
1:             return false;
1:         }
1:         
1:         /**
1:          * <p>
1:          * Return true if this Trajectory contains a version from the desired branch.
1:          * </p>
1:          */
1:         public boolean contains( String branchID )
1:         {
1:             int count = getVersionCount();
1:             for ( int i = 0; i < count; i++ )
1:             {
1:                 if ( getVersion( i ).getBranchID().equals( branchID ) ) { return true; }
1:             }
1:             
1:             return false;
1:         }
1:         
1:         /**
1:          * <p>
1:          * Return true if this Trajectory ends at the desired Version.
1:          * </p>
1:          */
1:         public boolean endsAt( Version candidate )
1:         {
1:             return ( getVersion( getVersionCount() - 1 ).equals( candidate ) );
1:         }
1:         
1:         /**
1:          * <p>
1:          * Return true if this Trajectory ends at the desired branch.
1:          * </p>
1:          */
1:         public boolean endsAt( String branchID )
1:         {
1:             return ( getVersion( getVersionCount() - 1 ).getBranchID().equals( branchID ) );
1:         }
1:         
1:         public String toString()
1:         {
1:             StringBuffer buffer = new StringBuffer();
1:             int          count = _versions.length;
1: 
1:             for ( int i = 0; i < count; i++ )
1:             {
1:                 if ( i > 0 ) { buffer.append( " -> " ); }
1:                 buffer.append( _versions[ i ].toString() );
1:             }
1: 
1:             return buffer.toString();
1:         }
1: 
1:         public int compareTo( Object other )
1:         {
1:             if ( other == null ) { return -1; }
1:             if ( !(other instanceof Trajectory) ) { return -1; }
1: 
1:             Trajectory that = (Trajectory) other;
1:             int           thisLength = this.getVersionCount();
1:             int           thatLength = that.getVersionCount();
1:             int           minLength = thisLength < thatLength ? thisLength : thatLength;
1: 
1:             for ( int i = 0; i < minLength; i++ )
1:             {
1:                 int result = this.getVersion( i ).compareTo( that.getVersion( i ) );
1:                 if ( result != 0 ) { return result; }
1:             }
1: 
1:             return thisLength - thatLength;
1:         }
1: 
1:         public boolean equals( Object other ) { return ( compareTo( other ) == 0 ); }
1: 
1:         public int hashCode() { return toString().hashCode(); }
1:     }
1: 
1: 
1: }
============================================================================