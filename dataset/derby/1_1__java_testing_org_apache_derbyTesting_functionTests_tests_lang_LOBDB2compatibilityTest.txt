1:562dccb: /*
1:562dccb: 
1:562dccb:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LOBDB2compatibilityTest
1:562dccb: 
1:562dccb:    Licensed to the Apache Software Foundation (ASF) under one or more
1:562dccb:    contributor license agreements.  See the NOTICE file distributed with
1:562dccb:    this work for additional information regarding copyright ownership.
1:562dccb:    The ASF licenses this file to you under the Apache License, Version 2.0
1:562dccb:    (the "License"); you may not use this file except in compliance with
1:562dccb:    the License.  You may obtain a copy of the License at
1:562dccb: 
1:562dccb:      http://www.apache.org/licenses/LICENSE-2.0
1:562dccb: 
1:562dccb:    Unless required by applicable law or agreed to in writing, software
1:562dccb:    distributed under the License is distributed on an "AS IS" BASIS,
1:562dccb:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:562dccb:    See the License for the specific language governing permissions and
1:562dccb:    limitations under the License.
1:562dccb: 
1:562dccb:  */
1:562dccb: 
1:562dccb: package org.apache.derbyTesting.functionTests.tests.lang;
1:562dccb: 
1:562dccb: import java.sql.ResultSet;
1:562dccb: import java.sql.Statement;
1:562dccb: import junit.framework.Test;
1:562dccb: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:562dccb: import org.apache.derbyTesting.junit.JDBC;
1:562dccb: import org.apache.derbyTesting.junit.TestConfiguration;
1:562dccb: 
1:562dccb: /**
1:562dccb:  * Test to run in db2 compatibility mode
1:562dccb:  */
1:562dccb: public final class LOBDB2compatibilityTest extends BaseJDBCTestCase {
1:562dccb: 
1:562dccb:     /**
1:562dccb:      * Public constructor required for running test as standalone JUnit.
1:562dccb:      * @param name test name
1:562dccb:      */
1:562dccb:     public LOBDB2compatibilityTest(String name)
1:562dccb:     {
1:562dccb:         super(name);
1:562dccb:     }
1:562dccb: 
1:562dccb:     public static Test suite()
1:562dccb:     {
1:562dccb:         return TestConfiguration.defaultSuite(LOBDB2compatibilityTest.class);
1:562dccb:     }
1:562dccb: 
1:562dccb:     public void test_LOBDB2compatibility() throws Exception
1:562dccb:     {
1:562dccb:         ResultSet rs;
1:562dccb:         final Statement st = createStatement();
1:562dccb: 
1:562dccb:         String [][] expRS;
1:562dccb: 
1:562dccb:         st.executeUpdate("create table t1(c11 int)");
1:562dccb:         st.executeUpdate("insert into t1 values(1)");
1:562dccb:         
1:562dccb:         // Equal tests are allowed only for BLOB==BLOB
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             "select c11 from t1 where cast(x'1111' as "
1:562dccb:             + "blob(5))=cast(x'1111' as blob(5))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast(x'1111' as "
1:562dccb:             + "blob(5))=cast(x'1111' as blob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast(x'1110' as "
1:562dccb:             + "blob(5))=cast(x'1110' as blob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast(x'1111' as "
1:562dccb:             + "blob(5))=cast(x'11100000' as blob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast(x'1111' as "
1:562dccb:             + "blob(5))=cast(x'1110000000' as blob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where x'11' = cast(x'11' as blob(1))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast(x'11' as blob(1)) = x'11'");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast(x'11' as blob(1)) = "
1:562dccb:             + "cast(x'11' as blob(1))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where '1' = cast('1' as clob(1))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast('1' as clob(1)) = '1'");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast('1' as clob(1)) = "
1:562dccb:             + "cast('1' as clob(1))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " select c11 from t1 where '1' = cast('1' as nclob(1))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " select c11 from t1 where cast('1' as nclob(1)) = '1'");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " select c11 from t1 where cast('1' as nclob(1)) = "
1:562dccb:             + "cast('1' as nclob(1))");
1:562dccb:         
1:562dccb:         //
1:562dccb:         // NCLOB is comparable with CLOB
1:562dccb:         //
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             "select c11 from t1 where cast('1' as nclob(10)) = "
1:562dccb:             + "cast('1' as clob(10))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " select c11 from t1 where cast('1' as clob(10)) = "
1:562dccb:             + "cast('1' as nclob(10))");
1:562dccb:         
1:562dccb:         assertStatementError("42Y55", st, "drop table b");
1:562dccb:         assertStatementError("42Y55", st, "drop table c");
1:562dccb:         assertStatementError("42Y55", st, "drop table n");
1:562dccb:         
1:562dccb:         st.executeUpdate("create table b(blob blob(3K))");
1:562dccb:         st.executeUpdate("create table c(clob clob(2M))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st, "create table n(nclob nclob(1G))");
1:562dccb:         
1:562dccb:         st.executeUpdate(
1:562dccb:             " insert into b values(cast(X'0031' as blob(3K)))");
1:562dccb:         
1:562dccb:         st.executeUpdate(
1:562dccb:             " insert into c values(cast('2' as clob(2M)))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " insert into n values(cast('3' as nclob(1G)))");
1:562dccb:         
1:562dccb:         st.executeUpdate(
1:562dccb:             " insert into b values(cast(X'0031' as blob(3K)))");
1:562dccb:         
1:562dccb:         st.executeUpdate(
1:562dccb:             " insert into c values(cast('2' as clob(2M)))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " insert into n values(cast('3' as nclob(1G)))");
1:562dccb:         
1:562dccb:         st.executeUpdate(
1:562dccb:             " insert into b values(cast(X'0031' as blob(3K)))");
1:562dccb:         
1:562dccb:         st.executeUpdate(
1:562dccb:             " insert into c values(cast('2' as clob(2M)))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " insert into n values(cast('3' as nclob(1G)))");
1:562dccb:         
1:562dccb:         rs = st.executeQuery("select blob from b");
1:562dccb:         
1:562dccb:         expRS = new String [][]
1:562dccb:         {
1:562dccb:             {"0031"},
1:562dccb:             {"0031"},
1:562dccb:             {"0031"}
1:562dccb:         };
1:562dccb:         
1:562dccb:         JDBC.assertFullResultSet(rs, expRS, true);
1:562dccb:         
1:562dccb:         rs = st.executeQuery("select clob from c");
1:562dccb:         
1:562dccb:         expRS = new String [][]
1:562dccb:         {
1:562dccb:             {"2"},
1:562dccb:             {"2"},
1:562dccb:             {"2"}
1:562dccb:         };
1:562dccb:         
1:562dccb:         JDBC.assertFullResultSet(rs, expRS, true);
1:562dccb:         
1:562dccb:         assertStatementError("42X05", st,
1:562dccb:             " select nclob from n");
1:562dccb:         
1:562dccb:         //
1:562dccb:         // Comparsion using tables
1:562dccb:         //
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             "select * from b as b1, b as b2 where b1.blob=b2.blob");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select * from b as b1, b as b2 where b1.blob!=b2.blob");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select * from b as b1, b as b2 where b1.blob=x'0001'");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select * from b as b1, b as b2 where x'0001'=b1.blob");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select * from b as b1, b as b2 where x'0001'!=b1.blob");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select * from b as b1, b as b2 where b1.blob=X'7575'");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select * from b as b1, b as b2 where X'7575'=b1.blob");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c.clob from c where c.clob = '2'");
1:562dccb:         
1:562dccb:         assertStatementError("42X05", st,
1:562dccb:             " select n.nclob from n where n.nclob = '3'");
1:562dccb:         
1:562dccb:         //
1:562dccb:         // ORDER tests on LOB types (not allowed)
1:562dccb:         //
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             "select c11 from t1 where cast(x'1111' as "
1:562dccb:             + "blob(5))=cast(x'1111' as blob(5))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast(x'1111' as "
1:562dccb:             + "blob(5))!=cast(x'1111' as blob(5))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast(x'1111' as "
1:562dccb:             + "blob(5))<cast(x'1111' as blob(5))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast(x'1111' as "
1:562dccb:             + "blob(5))>cast(x'1111' as blob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast(x'1111' as "
1:562dccb:             + "blob(5))<=cast(x'1110' as blob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast(x'1111' as "
1:562dccb:             + "blob(5))>=cast(x'11100000' as blob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "clob(5))=cast('fish' as clob(5))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "clob(5))!=cast('fish' as clob(5))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "clob(5))<cast('fish' as clob(5))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "clob(5))>cast('fish' as clob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "clob(5))<=cast('fish' as clob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("42818", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "clob(5))>=cast('fish' as clob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "nclob(5))=cast('fish' as nclob(5))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "nclob(5))!=cast('fish' as nclob(5))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "nclob(5))<cast('fish' as nclob(5))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "nclob(5))>cast('fish' as nclob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "nclob(5))<=cast('fish' as nclob(7))");
1:562dccb:         
1:562dccb:         assertStatementError("0A000", st,
1:562dccb:             " select c11 from t1 where cast('fish' as "
1:562dccb:             + "nclob(5))>=cast('fish' as nclob(7))");
1:562dccb:         
1:562dccb:         //
1:562dccb:         // BIT STRING literal is not allowed in DB2
1:562dccb:         //
1:562dccb:         assertStatementError("42X01", st,
1:562dccb:             "values cast(B'1' as blob(10))");
1:562dccb:         
1:562dccb:         rollback();
1:562dccb:         st.close();
1:562dccb:     }
1:562dccb: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:562dccb
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LOBDB2compatibilityTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test to run in db2 compatibility mode
1:  */
1: public final class LOBDB2compatibilityTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      * @param name test name
1:      */
1:     public LOBDB2compatibilityTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     public static Test suite()
1:     {
1:         return TestConfiguration.defaultSuite(LOBDB2compatibilityTest.class);
1:     }
1: 
1:     public void test_LOBDB2compatibility() throws Exception
1:     {
1:         ResultSet rs;
1:         final Statement st = createStatement();
1: 
1:         String [][] expRS;
1: 
1:         st.executeUpdate("create table t1(c11 int)");
1:         st.executeUpdate("insert into t1 values(1)");
1:         
1:         // Equal tests are allowed only for BLOB==BLOB
1:         assertStatementError("42818", st,
1:             "select c11 from t1 where cast(x'1111' as "
1:             + "blob(5))=cast(x'1111' as blob(5))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast(x'1111' as "
1:             + "blob(5))=cast(x'1111' as blob(7))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast(x'1110' as "
1:             + "blob(5))=cast(x'1110' as blob(7))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast(x'1111' as "
1:             + "blob(5))=cast(x'11100000' as blob(7))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast(x'1111' as "
1:             + "blob(5))=cast(x'1110000000' as blob(7))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where x'11' = cast(x'11' as blob(1))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast(x'11' as blob(1)) = x'11'");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast(x'11' as blob(1)) = "
1:             + "cast(x'11' as blob(1))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where '1' = cast('1' as clob(1))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast('1' as clob(1)) = '1'");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast('1' as clob(1)) = "
1:             + "cast('1' as clob(1))");
1:         
1:         assertStatementError("0A000", st,
1:             " select c11 from t1 where '1' = cast('1' as nclob(1))");
1:         
1:         assertStatementError("0A000", st,
1:             " select c11 from t1 where cast('1' as nclob(1)) = '1'");
1:         
1:         assertStatementError("0A000", st,
1:             " select c11 from t1 where cast('1' as nclob(1)) = "
1:             + "cast('1' as nclob(1))");
1:         
1:         //
1:         // NCLOB is comparable with CLOB
1:         //
1:         assertStatementError("0A000", st,
1:             "select c11 from t1 where cast('1' as nclob(10)) = "
1:             + "cast('1' as clob(10))");
1:         
1:         assertStatementError("0A000", st,
1:             " select c11 from t1 where cast('1' as clob(10)) = "
1:             + "cast('1' as nclob(10))");
1:         
1:         assertStatementError("42Y55", st, "drop table b");
1:         assertStatementError("42Y55", st, "drop table c");
1:         assertStatementError("42Y55", st, "drop table n");
1:         
1:         st.executeUpdate("create table b(blob blob(3K))");
1:         st.executeUpdate("create table c(clob clob(2M))");
1:         
1:         assertStatementError("0A000", st, "create table n(nclob nclob(1G))");
1:         
1:         st.executeUpdate(
1:             " insert into b values(cast(X'0031' as blob(3K)))");
1:         
1:         st.executeUpdate(
1:             " insert into c values(cast('2' as clob(2M)))");
1:         
1:         assertStatementError("0A000", st,
1:             " insert into n values(cast('3' as nclob(1G)))");
1:         
1:         st.executeUpdate(
1:             " insert into b values(cast(X'0031' as blob(3K)))");
1:         
1:         st.executeUpdate(
1:             " insert into c values(cast('2' as clob(2M)))");
1:         
1:         assertStatementError("0A000", st,
1:             " insert into n values(cast('3' as nclob(1G)))");
1:         
1:         st.executeUpdate(
1:             " insert into b values(cast(X'0031' as blob(3K)))");
1:         
1:         st.executeUpdate(
1:             " insert into c values(cast('2' as clob(2M)))");
1:         
1:         assertStatementError("0A000", st,
1:             " insert into n values(cast('3' as nclob(1G)))");
1:         
1:         rs = st.executeQuery("select blob from b");
1:         
1:         expRS = new String [][]
1:         {
1:             {"0031"},
1:             {"0031"},
1:             {"0031"}
1:         };
1:         
1:         JDBC.assertFullResultSet(rs, expRS, true);
1:         
1:         rs = st.executeQuery("select clob from c");
1:         
1:         expRS = new String [][]
1:         {
1:             {"2"},
1:             {"2"},
1:             {"2"}
1:         };
1:         
1:         JDBC.assertFullResultSet(rs, expRS, true);
1:         
1:         assertStatementError("42X05", st,
1:             " select nclob from n");
1:         
1:         //
1:         // Comparsion using tables
1:         //
1:         assertStatementError("42818", st,
1:             "select * from b as b1, b as b2 where b1.blob=b2.blob");
1:         
1:         assertStatementError("42818", st,
1:             " select * from b as b1, b as b2 where b1.blob!=b2.blob");
1:         
1:         assertStatementError("42818", st,
1:             " select * from b as b1, b as b2 where b1.blob=x'0001'");
1:         
1:         assertStatementError("42818", st,
1:             " select * from b as b1, b as b2 where x'0001'=b1.blob");
1:         
1:         assertStatementError("42818", st,
1:             " select * from b as b1, b as b2 where x'0001'!=b1.blob");
1:         
1:         assertStatementError("42818", st,
1:             " select * from b as b1, b as b2 where b1.blob=X'7575'");
1:         
1:         assertStatementError("42818", st,
1:             " select * from b as b1, b as b2 where X'7575'=b1.blob");
1:         
1:         assertStatementError("42818", st,
1:             " select c.clob from c where c.clob = '2'");
1:         
1:         assertStatementError("42X05", st,
1:             " select n.nclob from n where n.nclob = '3'");
1:         
1:         //
1:         // ORDER tests on LOB types (not allowed)
1:         //
1:         assertStatementError("42818", st,
1:             "select c11 from t1 where cast(x'1111' as "
1:             + "blob(5))=cast(x'1111' as blob(5))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast(x'1111' as "
1:             + "blob(5))!=cast(x'1111' as blob(5))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast(x'1111' as "
1:             + "blob(5))<cast(x'1111' as blob(5))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast(x'1111' as "
1:             + "blob(5))>cast(x'1111' as blob(7))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast(x'1111' as "
1:             + "blob(5))<=cast(x'1110' as blob(7))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast(x'1111' as "
1:             + "blob(5))>=cast(x'11100000' as blob(7))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "clob(5))=cast('fish' as clob(5))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "clob(5))!=cast('fish' as clob(5))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "clob(5))<cast('fish' as clob(5))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "clob(5))>cast('fish' as clob(7))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "clob(5))<=cast('fish' as clob(7))");
1:         
1:         assertStatementError("42818", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "clob(5))>=cast('fish' as clob(7))");
1:         
1:         assertStatementError("0A000", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "nclob(5))=cast('fish' as nclob(5))");
1:         
1:         assertStatementError("0A000", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "nclob(5))!=cast('fish' as nclob(5))");
1:         
1:         assertStatementError("0A000", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "nclob(5))<cast('fish' as nclob(5))");
1:         
1:         assertStatementError("0A000", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "nclob(5))>cast('fish' as nclob(7))");
1:         
1:         assertStatementError("0A000", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "nclob(5))<=cast('fish' as nclob(7))");
1:         
1:         assertStatementError("0A000", st,
1:             " select c11 from t1 where cast('fish' as "
1:             + "nclob(5))>=cast('fish' as nclob(7))");
1:         
1:         //
1:         // BIT STRING literal is not allowed in DB2
1:         //
1:         assertStatementError("42X01", st,
1:             "values cast(B'1' as blob(10))");
1:         
1:         rollback();
1:         st.close();
1:     }
1: }
============================================================================