1:1b454a1: /*
1:1b454a1: 
1:1b454a1:    Derby - Class org.apache.derby.iapi.services.io.CloneableStream
1:1b454a1: 
1:1b454a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1b454a1:    contributor license agreements.  See the NOTICE file distributed with
1:1b454a1:    this work for additional information regarding copyright ownership.
1:1b454a1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:1b454a1:    (the "License"); you may not use this file except in compliance with
1:1b454a1:    the License.  You may obtain a copy of the License at
1:1b454a1: 
1:1b454a1:       http://www.apache.org/licenses/LICENSE-2.0
1:1b454a1: 
1:1b454a1:    Unless required by applicable law or agreed to in writing, software
1:1b454a1:    distributed under the License is distributed on an "AS IS" BASIS,
1:1b454a1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1b454a1:    See the License for the specific language governing permissions and
1:1b454a1:    limitations under the License.
1:1b454a1: 
1:1b454a1:  */
1:1b454a1: 
1:1b454a1: package org.apache.derby.iapi.services.io;
1:1b454a1: 
1:1b454a1: import java.io.InputStream;
1:1b454a1: 
1:1b454a1: /**
1:1b454a1:  * This is a simple interface that is used by streams that can clone themselves.
1:1b454a1:  * <p>
1:1b454a1:  * The purpose is for the implementation of BLOB/CLOB (and potentially other
1:1b454a1:  * types whose value is represented by a stream), for which their size makes it
1:1b454a1:  * impossible or very expensive to materialize the value.
1:1b454a1:  */
1:1b454a1: public interface CloneableStream {
1:1b454a1: 
1:1b454a1:     /**
1:1b454a1:      * Clone the stream.
1:1b454a1:      * <p>
1:1b454a1:      * To be used when a "deep" clone of a stream is required rather than
1:1b454a1:      * multiple references to the same stream.
1:1b454a1:      * <p>
1:1b454a1:      * The resulting clone should support reads, resets, closes which 
1:1b454a1:      * do not affect the original stream source of the clone.
1:1b454a1:      *
1:1b454a1:      * @return The cloned stream.
1:1b454a1:      */
1:1b454a1:     public InputStream cloneStream() ;
1:1b454a1: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:1b454a1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.services.io.CloneableStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.InputStream;
1: 
1: /**
1:  * This is a simple interface that is used by streams that can clone themselves.
1:  * <p>
1:  * The purpose is for the implementation of BLOB/CLOB (and potentially other
1:  * types whose value is represented by a stream), for which their size makes it
1:  * impossible or very expensive to materialize the value.
1:  */
1: public interface CloneableStream {
1: 
1:     /**
1:      * Clone the stream.
1:      * <p>
1:      * To be used when a "deep" clone of a stream is required rather than
1:      * multiple references to the same stream.
1:      * <p>
1:      * The resulting clone should support reads, resets, closes which 
1:      * do not affect the original stream source of the clone.
1:      *
1:      * @return The cloned stream.
1:      */
1:     public InputStream cloneStream() ;
1: }
============================================================================