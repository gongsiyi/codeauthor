1:d32b042: /*
1:d32b042:   Class org.apache.derbyTesting.functionTests.tests.engine.Derby6396Test
1:d32b042: 
1:d32b042:   Licensed to the Apache Software Foundation (ASF) under one or more
1:d32b042:   contributor license agreements.  See the NOTICE file distributed with
1:d32b042:   this work for additional information regarding copyright ownership.
1:d32b042:   The ASF licenses this file to you under the Apache License, Version 2.0
1:d32b042:   (the "License"); you may not use this file except in compliance with
1:d32b042:   the License.  You may obtain a copy of the License at
1:d32b042: 
1:d32b042:   http://www.apache.org/licenses/LICENSE-2.0
1:d32b042: 
1:d32b042:   Unless required by applicable law or agreed to in writing, software
1:d32b042:   distributed under the License is distributed on an "AS IS" BASIS,
1:d32b042:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d32b042:   See the License for the specific language governing permissions and
1:d32b042:   limitations under the License.
1:d32b042: 
1:d32b042: */
1:d32b042: 
1:d32b042: package org.apache.derbyTesting.functionTests.tests.engine;
1:d32b042: 
1:d32b042: import java.io.File;
1:d32b042: import java.sql.SQLException;
1:d32b042: import junit.framework.Test;
1:d32b042: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:d32b042: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:d32b042: import org.apache.derbyTesting.junit.TestConfiguration;
1:d32b042: 
1:d32b042: /**
1:d32b042:  * Regression test case for DERBY-6396. Verify that booting the database
1:d32b042:  * does not fail with a NullPointerException if the user lacks read access
1:d32b042:  * on the temporary directory.
1:d32b042:  */
1:d32b042: public class Derby6396Test extends BaseJDBCTestCase {
1:d32b042:     private File tmpDir;
1:d32b042: 
1:d32b042:     public Derby6396Test(String name) {
1:d32b042:         super(name);
1:d32b042:     }
1:d32b042: 
1:d32b042:     public static Test suite() {
1:d32b042:         // Use a separate database for this test to reduce the risk of
1:d32b042:         // interfering with other tests when changing file permissions.
1:d32b042:         return TestConfiguration.singleUseDatabaseDecorator(
1:d32b042:                 TestConfiguration.embeddedSuite(Derby6396Test.class));
1:d32b042:     }
1:d32b042: 
1:d32b042:     @Override
1:d32b042:     protected void tearDown() throws Exception {
1:d32b042:         if (tmpDir != null) {
1:d32b042:             // Reset the permission of the temporary directory so that we
1:d32b042:             // don't run into problems when dropping the database.
1:d32b042:             PrivilegedFileOpsForTests.setReadable(tmpDir, true, true);
1:d32b042:             tmpDir = null;
1:d32b042:         }
1:d32b042:         super.tearDown();
1:d32b042:     }
1:d32b042: 
1:d32b042:     public void testTempNotReadable() throws SQLException {
1:d32b042:         final TestConfiguration config = TestConfiguration.getCurrent();
1:d32b042: 
1:d32b042:         // First make sure the database exists and is not booted.
1:d32b042:         getConnection().close();
1:d32b042:         config.shutdownDatabase();
1:d32b042: 
1:d32b042:         // Now make sure the database has a tmp directory that cannot be read.
1:d32b042:         tmpDir = new File(
1:d32b042:             config.getDatabasePath(config.getDefaultDatabaseName()), "tmp");
1:d32b042:         assertTrue(PrivilegedFileOpsForTests.mkdir(tmpDir));
1:d32b042:         PrivilegedFileOpsForTests.setReadable(tmpDir, false, true);
1:d32b042: 
1:d32b042:         // Booting the database used to fail with a NullPointerException.
1:d32b042:         // Should succeed now.
1:d32b042:         getConnection().close();
1:d32b042:     }
1:d32b042: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d32b042
/////////////////////////////////////////////////////////////////////////
1: /*
1:   Class org.apache.derbyTesting.functionTests.tests.engine.Derby6396Test
1: 
1:   Licensed to the Apache Software Foundation (ASF) under one or more
1:   contributor license agreements.  See the NOTICE file distributed with
1:   this work for additional information regarding copyright ownership.
1:   The ASF licenses this file to you under the Apache License, Version 2.0
1:   (the "License"); you may not use this file except in compliance with
1:   the License.  You may obtain a copy of the License at
1: 
1:   http://www.apache.org/licenses/LICENSE-2.0
1: 
1:   Unless required by applicable law or agreed to in writing, software
1:   distributed under the License is distributed on an "AS IS" BASIS,
1:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:   See the License for the specific language governing permissions and
1:   limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.engine;
1: 
1: import java.io.File;
1: import java.sql.SQLException;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Regression test case for DERBY-6396. Verify that booting the database
1:  * does not fail with a NullPointerException if the user lacks read access
1:  * on the temporary directory.
1:  */
1: public class Derby6396Test extends BaseJDBCTestCase {
1:     private File tmpDir;
1: 
1:     public Derby6396Test(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // Use a separate database for this test to reduce the risk of
1:         // interfering with other tests when changing file permissions.
1:         return TestConfiguration.singleUseDatabaseDecorator(
1:                 TestConfiguration.embeddedSuite(Derby6396Test.class));
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         if (tmpDir != null) {
1:             // Reset the permission of the temporary directory so that we
1:             // don't run into problems when dropping the database.
1:             PrivilegedFileOpsForTests.setReadable(tmpDir, true, true);
1:             tmpDir = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     public void testTempNotReadable() throws SQLException {
1:         final TestConfiguration config = TestConfiguration.getCurrent();
1: 
1:         // First make sure the database exists and is not booted.
1:         getConnection().close();
1:         config.shutdownDatabase();
1: 
1:         // Now make sure the database has a tmp directory that cannot be read.
1:         tmpDir = new File(
1:             config.getDatabasePath(config.getDefaultDatabaseName()), "tmp");
1:         assertTrue(PrivilegedFileOpsForTests.mkdir(tmpDir));
1:         PrivilegedFileOpsForTests.setReadable(tmpDir, false, true);
1: 
1:         // Booting the database used to fail with a NullPointerException.
1:         // Should succeed now.
1:         getConnection().close();
1:     }
1: }
============================================================================