1:1453acc: /*
13:1453acc: 
1:1453acc:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest
1:1453acc: 
1:1453acc:        Licensed to the Apache Software Foundation (ASF) under one
1:1453acc:        or more contributor license agreements.  See the NOTICE file
1:1453acc:        distributed with this work for additional information
1:1453acc:        regarding copyright ownership.  The ASF licenses this file
1:1453acc:        to you under the Apache License, Version 2.0 (the
1:1453acc:        "License"); you may not use this file except in compliance
1:1453acc:        with the License.  You may obtain a copy of the License at
1:1453acc: 
1:1453acc:          http://www.apache.org/licenses/LICENSE-2.0
1:1453acc: 
1:1453acc:        Unless required by applicable law or agreed to in writing,
1:1453acc:        software distributed under the License is distributed on an
1:1453acc:        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1453acc:        KIND, either express or implied.  See the License for the
1:1453acc:        specific language governing permissions and limitations
1:1453acc:        under the License
2:1453acc: */
1:1453acc: package org.apache.derbyTesting.functionTests.tests.lang;
1:1453acc: 
1:1453acc: import java.sql.DatabaseMetaData;
1:1453acc: import java.sql.ResultSet;
1:1453acc: import java.sql.SQLException;
1:1453acc: import java.sql.Statement;
1:1453acc: 
1:1453acc: import junit.framework.Assert;
1:1453acc: import junit.framework.Test;
1:1453acc: 
1:1453acc: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:25a9abc: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:25a9abc: import org.apache.derbyTesting.junit.TestConfiguration;
1:1453acc: 
2:1453acc: /**
1:1453acc:  * Test for creating tables using a query expression.
1:1453acc:  */
1:1453acc: public final class CreateTableFromQueryTest extends BaseJDBCTestCase {
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Public constructor required for running test as standalone JUnit.
1:1453acc:      */
1:1453acc:     public CreateTableFromQueryTest(String name)
1:25a9abc:     {
1:1453acc:         super(name);
5:1453acc:     }
1:25a9abc: 
1:b843fce:     /*
1:b843fce:      * Factored out for reuse in other TestCases which add
1:b843fce:      * the same test method in their suite() method.
1:b843fce:      *
1:b843fce:      * Currently done for a few testcases reused in replication testing:
1:b843fce:      * o.a.dT.ft.tests.replicationTests.StandardTests.
1:b843fce:      */
1:b843fce:     public static void decorate(Statement stmt)
1:b843fce:          throws SQLException
1:b843fce:     {
1:b843fce:         // create base tables t1 and t2
1:b843fce:         stmt.executeUpdate(
1:b843fce:                 "create table t1(i int not null, s smallint, f float, dp "
1:b843fce:                 + "double precision, v varchar(10) not null)");
1:b843fce:         
1:b843fce:         stmt.executeUpdate("create table t2 (a int, s varchar(5))");
1:b843fce:     }
1:b843fce:     
1:1453acc:     /**
1:1453acc:      * Create a suite of tests.
1:1453acc:     */
1:1453acc:     public static Test suite()
2:1453acc:     {
1:25a9abc:         Test test = TestConfiguration.embeddedSuite(CreateTableFromQueryTest.class);
1:25a9abc:         return new CleanDatabaseTestSetup(test) {
1:25a9abc: 
1:25a9abc:             protected void decorateSQL(Statement stmt) throws SQLException
1:1453acc:             {
1:b843fce:                 decorate(stmt);
1:25a9abc:             }
1:25a9abc:         };
1:1453acc:     }
1:25a9abc: 
1:1453acc:     /**
1:1453acc:      * Test basic table creation.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testBasicTableCreation() throws Exception
1:1453acc:     {
1:1453acc:         positiveTest("create table t3 as select * from t1 with no data",
1:1453acc:             new String [] {"I", "S", "F", "DP", "V"},
1:1453acc:             new String [] {"NO", "YES", "YES", "YES", "NO"},
1:1453acc:             new String [] {"INTEGER", "SMALLINT", "DOUBLE", "DOUBLE", "VARCHAR"});
1:1453acc:     }
1:25a9abc:     
1:1453acc:     /**
1:1453acc:      * Test creating table with a list of column names.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testCreateTableWithColumnList() throws Exception
1:1453acc:     {
1:1453acc:         positiveTest(
1:1453acc:             "create table t3 (a,b,c,d,e) as select * from t1 with no data",
1:1453acc:             new String [] {"A", "B", "C", "D", "E"},
1:1453acc:             new String [] {"NO", "YES", "YES", "YES", "NO"},
1:1453acc:             new String [] {"INTEGER", "SMALLINT", "DOUBLE", "DOUBLE", "VARCHAR"});
1:1453acc:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test creating a table with a subset of the base table's columns.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testCreateTableWithSubsetOfColumns() throws Exception
1:1453acc:     {
1:1453acc:         positiveTest("create table t3 as select v,f from t1 with no data",
1:1453acc:             new String [] {"V", "F"},
1:1453acc:             new String [] {"NO", "YES"},
1:1453acc:             new String [] {"VARCHAR", "DOUBLE"});
1:1453acc:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test creating a table with a subset of the base table's columns
1:1453acc:      * and a column list.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testCreateTableWithSubsetOfColumnsAndColumnList() throws Exception
1:1453acc:     {
1:1453acc:         positiveTest(
1:1453acc:             "create table t3 (a,b,c) as select v,dp,i from t1 with no data",
1:1453acc:             new String [] {"A", "B", "C"},
1:1453acc:             new String [] {"NO", "YES", "NO"},
1:1453acc:             new String [] {"VARCHAR", "DOUBLE", "INTEGER"});
1:1453acc:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test creating a table with multiple base tables.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testCreateTableWithMultipleBaseTables() throws Exception
1:1453acc:     {
1:1453acc:         positiveTest("create table t3 (one, two) as select x.s, y.v from "
1:1453acc:                      + "t1 y, t2 x where x.a = y.i with no data",
1:1453acc:             new String [] {"ONE", "TWO"},
1:1453acc:             new String [] {"YES", "NO"},
1:1453acc:             new String [] {"VARCHAR", "VARCHAR"});
1:1453acc:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test creating a table with a column list and system generated
1:1453acc:      * column names in the query.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testCreateTableWithDerivedColumnName() throws Exception
1:1453acc:     {
1:1453acc:         positiveTest(
1:1453acc:             "create table t3 (x,y) as select 2*i,2.0*f from t1 with no data",
1:1453acc:             new String [] {"X", "Y"},
1:1453acc:             new String [] {"NO", "YES"},
1:1453acc:             new String [] {"INTEGER", "DOUBLE"});
1:1453acc:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test creating a table from a values statement.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testCreateTableFromValues() throws Exception
1:1453acc:     {
1:1453acc:         positiveTest(
1:1453acc:             "create table t3 (x,y) as values (1, 'name') with no data",
1:1453acc:             new String [] {"X", "Y"},
1:1453acc:             new String [] {"NO", "NO"},
1:1453acc:             new String [] {"INTEGER", "CHAR"});
1:1453acc:     }
1:d5ef906:     
1:d5ef906:     public void testCreateTableWithGroupByInQuery() throws Exception 
1:d5ef906:     {
1:d5ef906:         positiveTest(
1:d5ef906:             "create table t3 (x, y) as " +
1:d5ef906:             " (select v, sum(i) from t1 where i > 0 " +
1:d5ef906:             " group by i, v having i <= " +
1:d5ef906:             " ANY (select a from t2)) with no data",
1:d5ef906:             new String[] {"X", "Y"},
1:d5ef906:             new String[] {"NO", "YES"},
1:d5ef906:             new String[] {"VARCHAR", "INTEGER"});
1:d5ef906:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test error when base table does not exist.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testBaseTableDoesNotExist() throws Exception
1:1453acc:     {
1:ce3737f:         assertStatementError("42X05", createStatement(),
1:1453acc:             "create table t3 as select * from t4 with no data");
1:1453acc:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test error when parameters are supplied in the query expression.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testParametersNotAllowed() throws Exception
1:1453acc:     {
1:ce3737f:         assertStatementError("42X99", createStatement(),
1:1453acc:             "create table t3 as select * from t1 where i = ? with no data");
1:1453acc:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test error when duplicate column names are specified in the column list.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testDuplicateColumnName() throws Exception
1:1453acc:     {
1:ce3737f:         assertStatementError("42X12", createStatement(),
1:1453acc:             "create table t3 (c1,c2,c1) "
1:1453acc:                 + "as select i, s, f from t1 with no data");
1:1453acc:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test error when the number of columns in the column list does
1:1453acc:      * not match the number of columns in the query expression.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testColumnCountMismatch() throws Exception
1:1453acc:     {
1:ce3737f:         assertStatementError("42X70", createStatement(),
1:1453acc:             "create table t3 (c1,c2,c3) as select i,s from t1 with no data");
1:1453acc:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test error when the query expression contains system generated
1:1453acc:      * column names and no column list was provided.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testSystemGeneratedColumnName() throws Exception
1:1453acc:     {
1:ce3737f:         assertStatementError("42909", createStatement(),
1:1453acc:             "create table t3 as select i, 2*i from t1 with no data");
1:1453acc:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test error when the column type can not be determined.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testNullValues() throws Exception
1:1453acc:     {
1:ce3737f:         assertStatementError("42X07", createStatement(),
1:1453acc:             "create table t3 (x) as values null with no data");
1:1453acc:     }
1:1453acc: 
1:1453acc:     /**
1:1453acc:      * Test error for unimplemented WITH DATA clause.
1:1453acc:      * @throws Exception
1:1453acc:      */
1:1453acc:     public void testUnimplementedWithDataClause() throws Exception
1:1453acc:     {
1:ce3737f:         assertStatementError("0A000", createStatement(),
1:1453acc:             "create table t3 as select * from t1 with data");
1:1453acc:     }
1:d25aee0:     
1:d25aee0:     /**
1:d25aee0:      * Test error for creating table where the data type is invalid.
1:d25aee0:      */
1:d25aee0:     public void testInvalidDataType() throws Exception
1:d25aee0:     {
1:ce3737f:         Statement stmt = createStatement();
1:ce3737f: 
1:d25aee0:         // USER (Java Object)
2:d25aee0:         assertStatementError("42X71", stmt,
1:d25aee0:             "create table t as select aliasinfo from sys.sysaliases with no data");
1:d25aee0:         
1:d25aee0:         // DECIMAL(44,0)
1:d25aee0:         assertStatementError("42X71", stmt,
1:d25aee0:         	"create table t(x) as values 12345678901234567890123456789012345678901234 with no data");
1:d25aee0:     }
1:d25aee0:    
1:1453acc:     private void positiveTest(String sql, String [] columnNames,
1:1453acc:             String [] nullability, String [] types) throws Exception
1:1453acc:     {
1:ce3737f:         Statement stmt = createStatement();
1:ce3737f: 
1:1453acc:         // create table
1:1453acc:         stmt.executeUpdate(sql);
1:1453acc: 
1:1453acc:         // check column's name, nullability, and type
1:1453acc:         DatabaseMetaData dmd = getConnection().getMetaData();
1:1453acc:         ResultSet rs = dmd.getColumns(null, null, "T3", null);
1:1453acc:         int col = 0;
1:1453acc:         while (rs.next()) {
1:1453acc:             Assert.assertEquals("Column names do not match:",
1:1453acc:                     columnNames[col], rs.getString("COLUMN_NAME"));
1:1453acc:             Assert.assertEquals("Nullability incorrect:",
1:1453acc:                     nullability[col], rs.getString("IS_NULLABLE"));
1:1453acc:             Assert.assertEquals("Column type incorrect:",
1:1453acc:                     types[col], rs.getString("TYPE_NAME"));
1:1453acc:             col++;
1:1453acc:         }
1:ce3737f:         rs.close();
1:1453acc:         Assert.assertEquals("Unexpected column count:",
1:1453acc:                 columnNames.length, col);
1:1453acc:         stmt.executeUpdate("drop table t3");
1:1453acc:     }
1:1453acc:     
1:1453acc:     /**
1:1453acc:      * Set the fixture up with base tables t1 and t2.
1:1453acc:      */
1:1453acc:     protected void setUp() throws SQLException
1:1453acc:     {
1:ce3737f:         setAutoCommit(false);
1:1453acc:     }
1:1453acc: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:46e7e7c
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ce3737f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertStatementError("42X05", createStatement(),
/////////////////////////////////////////////////////////////////////////
1:         assertStatementError("42X99", createStatement(),
/////////////////////////////////////////////////////////////////////////
1:         assertStatementError("42X12", createStatement(),
/////////////////////////////////////////////////////////////////////////
1:         assertStatementError("42X70", createStatement(),
/////////////////////////////////////////////////////////////////////////
1:         assertStatementError("42909", createStatement(),
/////////////////////////////////////////////////////////////////////////
1:         assertStatementError("42X07", createStatement(),
/////////////////////////////////////////////////////////////////////////
1:         assertStatementError("0A000", createStatement(),
/////////////////////////////////////////////////////////////////////////
1:         Statement stmt = createStatement();
1: 
/////////////////////////////////////////////////////////////////////////
1:         Statement stmt = createStatement();
1: 
/////////////////////////////////////////////////////////////////////////
1:         rs.close();
/////////////////////////////////////////////////////////////////////////
1:         setAutoCommit(false);
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:b843fce
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * Factored out for reuse in other TestCases which add
1:      * the same test method in their suite() method.
1:      *
1:      * Currently done for a few testcases reused in replication testing:
1:      * o.a.dT.ft.tests.replicationTests.StandardTests.
1:      */
1:     public static void decorate(Statement stmt)
1:          throws SQLException
1:     {
1:         // create base tables t1 and t2
1:         stmt.executeUpdate(
1:                 "create table t1(i int not null, s smallint, f float, dp "
1:                 + "double precision, v varchar(10) not null)");
1:         
1:         stmt.executeUpdate("create table t2 (a int, s varchar(5))");
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:                 decorate(stmt);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:25a9abc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         Test test = TestConfiguration.embeddedSuite(CreateTableFromQueryTest.class);
1:         return new CleanDatabaseTestSetup(test) {
1: 
1:             protected void decorateSQL(Statement stmt) throws SQLException
1:             {
0:                 // create base tables t1 and t2       
0:                 stmt.executeUpdate(
0:                     "create table t1(i int not null, s smallint, f float, dp "
0:                     + "double precision, v varchar(10) not null)");
1: 
0:                 stmt.executeUpdate("create table t2 (a int, s varchar(5))");
1: 
1:             }
1:         };
/////////////////////////////////////////////////////////////////////////
1:     
0:        getConnection().setAutoCommit(false);
/////////////////////////////////////////////////////////////////////////
0:         getConnection().commit();
author:Army
-------------------------------------------------------------------------------
commit:d25aee0
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Test error for creating table where the data type is invalid.
1:      */
1:     public void testInvalidDataType() throws Exception
1:     {
0:         // BOOLEAN
1:         assertStatementError("42X71", stmt,
0:             "create table t as select systemalias from sys.sysaliases with no data");
1: 
1:         // USER (Java Object)
1:         assertStatementError("42X71", stmt,
1:             "create table t as select aliasinfo from sys.sysaliases with no data");
1:         
1:         // DECIMAL(44,0)
1:         assertStatementError("42X71", stmt,
1:         	"create table t(x) as values 12345678901234567890123456789012345678901234 with no data");
1:     }
commit:d5ef906
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testCreateTableWithGroupByInQuery() throws Exception 
1:     {
1:         positiveTest(
1:             "create table t3 (x, y) as " +
1:             " (select v, sum(i) from t1 where i > 0 " +
1:             " group by i, v having i <= " +
1:             " ANY (select a from t2)) with no data",
1:             new String[] {"X", "Y"},
1:             new String[] {"NO", "YES"},
1:             new String[] {"VARCHAR", "INTEGER"});
1:     }
commit:1453acc
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest
1: 
1:        Licensed to the Apache Software Foundation (ASF) under one
1:        or more contributor license agreements.  See the NOTICE file
1:        distributed with this work for additional information
1:        regarding copyright ownership.  The ASF licenses this file
1:        to you under the Apache License, Version 2.0 (the
1:        "License"); you may not use this file except in compliance
1:        with the License.  You may obtain a copy of the License at
1: 
1:          http://www.apache.org/licenses/LICENSE-2.0
1: 
1:        Unless required by applicable law or agreed to in writing,
1:        software distributed under the License is distributed on an
1:        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:        KIND, either express or implied.  See the License for the
1:        specific language governing permissions and limitations
1:        under the License
1: */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Assert;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  * Test for creating tables using a query expression.
1:  */
1: public final class CreateTableFromQueryTest extends BaseJDBCTestCase {
0:     private Statement stmt;
1: 
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      */
1:     public CreateTableFromQueryTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Create a suite of tests.
1:     */
1:     public static Test suite()
1:     {
0:         final TestSuite suite = new TestSuite("CreateTableFromQueryTest");
0:         suite.addTestSuite(CreateTableFromQueryTest.class);
0:         return suite;
1:     }
1: 
1:     /**
1:      * Test basic table creation.
1:      * @throws Exception
1:      */
1:     public void testBasicTableCreation() throws Exception
1:     {
1:         positiveTest("create table t3 as select * from t1 with no data",
1:             new String [] {"I", "S", "F", "DP", "V"},
1:             new String [] {"NO", "YES", "YES", "YES", "NO"},
1:             new String [] {"INTEGER", "SMALLINT", "DOUBLE", "DOUBLE", "VARCHAR"});
1:     }
1:     
1:     /**
1:      * Test creating table with a list of column names.
1:      * @throws Exception
1:      */
1:     public void testCreateTableWithColumnList() throws Exception
1:     {
1:         positiveTest(
1:             "create table t3 (a,b,c,d,e) as select * from t1 with no data",
1:             new String [] {"A", "B", "C", "D", "E"},
1:             new String [] {"NO", "YES", "YES", "YES", "NO"},
1:             new String [] {"INTEGER", "SMALLINT", "DOUBLE", "DOUBLE", "VARCHAR"});
1:     }
1: 
1:     /**
1:      * Test creating a table with a subset of the base table's columns.
1:      * @throws Exception
1:      */
1:     public void testCreateTableWithSubsetOfColumns() throws Exception
1:     {
1:         positiveTest("create table t3 as select v,f from t1 with no data",
1:             new String [] {"V", "F"},
1:             new String [] {"NO", "YES"},
1:             new String [] {"VARCHAR", "DOUBLE"});
1:     }
1: 
1:     /**
1:      * Test creating a table with a subset of the base table's columns
1:      * and a column list.
1:      * @throws Exception
1:      */
1:     public void testCreateTableWithSubsetOfColumnsAndColumnList() throws Exception
1:     {
1:         positiveTest(
1:             "create table t3 (a,b,c) as select v,dp,i from t1 with no data",
1:             new String [] {"A", "B", "C"},
1:             new String [] {"NO", "YES", "NO"},
1:             new String [] {"VARCHAR", "DOUBLE", "INTEGER"});
1:     }
1: 
1:     /**
1:      * Test creating a table with multiple base tables.
1:      * @throws Exception
1:      */
1:     public void testCreateTableWithMultipleBaseTables() throws Exception
1:     {
1:         positiveTest("create table t3 (one, two) as select x.s, y.v from "
1:                      + "t1 y, t2 x where x.a = y.i with no data",
1:             new String [] {"ONE", "TWO"},
1:             new String [] {"YES", "NO"},
1:             new String [] {"VARCHAR", "VARCHAR"});
1:     }
1: 
1:     /**
1:      * Test creating a table with a column list and system generated
1:      * column names in the query.
1:      * @throws Exception
1:      */
1:     public void testCreateTableWithDerivedColumnName() throws Exception
1:     {
1:         positiveTest(
1:             "create table t3 (x,y) as select 2*i,2.0*f from t1 with no data",
1:             new String [] {"X", "Y"},
1:             new String [] {"NO", "YES"},
1:             new String [] {"INTEGER", "DOUBLE"});
1:     }
1: 
1:     /**
1:      * Test creating a table from a values statement.
1:      * @throws Exception
1:      */
1:     public void testCreateTableFromValues() throws Exception
1:     {
1:         positiveTest(
1:             "create table t3 (x,y) as values (1, 'name') with no data",
1:             new String [] {"X", "Y"},
1:             new String [] {"NO", "NO"},
1:             new String [] {"INTEGER", "CHAR"});
1:     }
1: 
1:     /**
1:      * Test error when base table does not exist.
1:      * @throws Exception
1:      */
1:     public void testBaseTableDoesNotExist() throws Exception
1:     {
0:         assertStatementError("42X05", stmt,
1:             "create table t3 as select * from t4 with no data");
1:     }
1: 
1:     /**
1:      * Test error when parameters are supplied in the query expression.
1:      * @throws Exception
1:      */
1:     public void testParametersNotAllowed() throws Exception
1:     {
0:         assertStatementError("42X99", stmt,
1:             "create table t3 as select * from t1 where i = ? with no data");
1:     }
1: 
1:     /**
1:      * Test error when duplicate column names are specified in the column list.
1:      * @throws Exception
1:      */
1:     public void testDuplicateColumnName() throws Exception
1:     {
0:         assertStatementError("42X12", stmt,
1:             "create table t3 (c1,c2,c1) "
1:                 + "as select i, s, f from t1 with no data");
1:     }
1: 
1:     /**
1:      * Test error when the number of columns in the column list does
1:      * not match the number of columns in the query expression.
1:      * @throws Exception
1:      */
1:     public void testColumnCountMismatch() throws Exception
1:     {
0:         assertStatementError("42X70", stmt,
1:             "create table t3 (c1,c2,c3) as select i,s from t1 with no data");
1:     }
1: 
1:     /**
1:      * Test error when the query expression contains system generated
1:      * column names and no column list was provided.
1:      * @throws Exception
1:      */
1:     public void testSystemGeneratedColumnName() throws Exception
1:     {
0:         assertStatementError("42909", stmt,
1:             "create table t3 as select i, 2*i from t1 with no data");
1:     }
1: 
1:     /**
1:      * Test error when the column type can not be determined.
1:      * @throws Exception
1:      */
1:     public void testNullValues() throws Exception
1:     {
0:         assertStatementError("42X07", stmt,
1:             "create table t3 (x) as values null with no data");
1:     }
1: 
1:     /**
1:      * Test error for unimplemented WITH DATA clause.
1:      * @throws Exception
1:      */
1:     public void testUnimplementedWithDataClause() throws Exception
1:     {
0:         assertStatementError("0A000", stmt,
1:             "create table t3 as select * from t1 with data");
1:     }
1:    
1:     private void positiveTest(String sql, String [] columnNames,
1:             String [] nullability, String [] types) throws Exception
1:     {
1:         // create table
1:         stmt.executeUpdate(sql);
1: 
1:         // check column's name, nullability, and type
1:         DatabaseMetaData dmd = getConnection().getMetaData();
1:         ResultSet rs = dmd.getColumns(null, null, "T3", null);
1:         int col = 0;
1:         while (rs.next()) {
1:             Assert.assertEquals("Column names do not match:",
1:                     columnNames[col], rs.getString("COLUMN_NAME"));
1:             Assert.assertEquals("Nullability incorrect:",
1:                     nullability[col], rs.getString("IS_NULLABLE"));
1:             Assert.assertEquals("Column type incorrect:",
1:                     types[col], rs.getString("TYPE_NAME"));
1:             col++;
1:         }
1:         Assert.assertEquals("Unexpected column count:",
1:                 columnNames.length, col);
1:         stmt.executeUpdate("drop table t3");
1:     }
1: 
1:     /**
1:      * Set the fixture up with base tables t1 and t2.
1:      */
1:     protected void setUp() throws SQLException
1:     {    
0:         getConnection().setAutoCommit(false);
1: 
0:         stmt = createStatement();
1: 
0:         // create base tables t1 and t2       
0:         stmt.executeUpdate(
0:             "create table t1(i int not null, s smallint, f float, dp "
0:             + "double precision, v varchar(10) not null)");
1: 
0:         stmt.executeUpdate("create table t2 (a int, s varchar(5))");
1:     }
1:     
1:     /**
0:      * Tear-down the fixture by removing the tables
0:      * (if they still exist).
1:      */
0:     protected void tearDown() throws Exception
1:     {
0:         // drop tables
0:         try {
0:             stmt.execute("drop table t1");
0:         } catch (SQLException e) {
0:             assertSQLState("42Y55", e);
1:         }
1: 
0:         try {
0:             stmt.execute("drop table t2");
0:         } catch (SQLException e) {
0:             assertSQLState("42Y55", e);
1:         }
1: 
0:         try {
0:             stmt.execute("drop table t3");
0:         } catch (SQLException e) {
0:             assertSQLState("42Y55", e);
1:         }
1: 
0:         stmt.close();
1: 
0:         super.tearDown();
1:     }
1: }
============================================================================