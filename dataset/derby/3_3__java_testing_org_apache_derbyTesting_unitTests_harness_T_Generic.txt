1:2bc809f: /*
3:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.harness.T_Generic
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.harness;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:2bc809f: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.UnitTest;
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.UnitTestConstants;
1:2bc809f: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: 
1:2bc809f: import java.util.Properties;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 	Abstract class which executes a unit test.
1:2bc809f: 
1:2bc809f: 	<P>To write a test,	extend this class with a class which implements the two
1:2bc809f: 	abstract methods:
1:2bc809f: <UL>	
1:2bc809f:     <LI>runTests
1:2bc809f: 	<LI>setUp
1:2bc809f: </UL>
1:2bc809f: 	@see UnitTest
1:2bc809f: 	@see ModuleControl
1:2bc809f: */
1:2bc809f: public abstract class T_Generic implements UnitTest, ModuleControl
1:2bc809f: {
1:2bc809f: 	/**
1:2bc809f: 	  The unqualified name for the module to test. This is set by the generic
1:2bc809f: 	  code.
1:2bc809f: 	  */
1:2bc809f: 	protected String shortModuleToTestName;
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  The start parameters for your test. This is set by generic code.
1:2bc809f: 	  */
1:2bc809f: 	protected Properties startParams;
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  The HeaderPrintWriter for test output. This is set by the
1:2bc809f: 	  generic code.
1:2bc809f: 	  */
1:2bc809f: 	protected HeaderPrintWriter out;
1:2bc809f: 
1:2bc809f: 	protected T_Generic()
1:2bc809f: 	{
3:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Public methods of ModuleControl
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  ModuleControl.start
1:2bc809f: 	  
1:2bc809f: 	  @see ModuleControl#boot
1:2bc809f: 	  @exception StandardException Module cannot be started.
1:2bc809f: 	  */
1:2bc809f: 	public void boot(boolean create, Properties startParams)
1:2bc809f: 		 throws StandardException
1:2bc809f: 	{
1:2bc809f: 		shortModuleToTestName =
1:2bc809f: 			getModuleToTestProtocolName()
1:2bc809f: 			.substring(getModuleToTestProtocolName().lastIndexOf('.')+1);
1:2bc809f: 
1:2bc809f: 		this.startParams = startParams;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  ModuleControl.stop
1:2bc809f: 	  
1:2bc809f: 	  @see ModuleControl#stop
1:2bc809f: 	  */
1:2bc809f: 	public void stop() {
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Public methods of UnitTest
1:2bc809f: 	*/
1:2bc809f: 	/**
1:2bc809f: 	  UnitTest.Execute
1:2bc809f: 	  
1:2bc809f: 	  @see UnitTest#Execute
1:2bc809f: 	  */
1:2bc809f: 	public boolean Execute(HeaderPrintWriter out)
1:2bc809f: 	{
1:2bc809f: 		this.out = out;
1:2bc809f: 
1:2bc809f: 		String myClass = this.getClass().getName();
1:2bc809f: 		String testName = myClass.substring(myClass.lastIndexOf('.') + 1);
1:2bc809f: 
1:2bc809f: 		System.out.println("-- Unit Test " + testName + " starting");
1:2bc809f: 
1:2bc809f: 		try
1:2bc809f: 		{
1:2bc809f: 			runTests();
1:2bc809f: 		}
1:2bc809f: 		
1:2bc809f: 		catch (Throwable t)
1:2bc809f: 		{
1:e70c716: 			FAIL(t.toString());
1:e70c716: 			t.printStackTrace(out.getPrintWriter());
1:2bc809f: 			return false;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		System.out.println("-- Unit Test " + testName + " finished");
1:2bc809f: 
1:2bc809f: 		return true;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  UnitTest.UnitTestDuration
1:2bc809f: 	  
1:2bc809f: 	  @return UnitTestConstants.DURATION_MICRO
1:2bc809f: 	  @see UnitTest#UnitTestDuration
1:2bc809f: 	  @see UnitTestConstants
1:2bc809f: 	  */
1:2bc809f: 	public int UnitTestDuration() {
1:2bc809f: 		return UnitTestConstants.DURATION_MICRO;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  UnitTest.UnitTestType
1:2bc809f: 	  
1:2bc809f: 	  @return UnitTestConstants.TYPE_COMMON
1:2bc809f: 	  @see UnitTest#UnitTestType
1:2bc809f: 	  @see UnitTestConstants
1:2bc809f: 	  */
1:2bc809f: 	public int UnitTestType() {
1:2bc809f: 		return UnitTestConstants.TYPE_COMMON;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  Emit a message indicating why the test failed.
1:2bc809f: 
1:2bc809f: 	  RESOLVE: Should this be localized?
1:2bc809f: 
1:2bc809f: 	  @param msg the message.
1:2bc809f: 	  @return false
1:2bc809f: 	*/
1:2bc809f: 	protected boolean FAIL(String msg) {
1:2bc809f: 		out.println("[" + Thread.currentThread().getName() + "] FAIL - " + msg);
1:2bc809f: 		return false;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  Emit a message saying the test passed.
1:2bc809f: 	  You may use this to emit messages indicating individual test cases
1:2bc809f: 	  within a unit test passed.
1:2bc809f: 
1:2bc809f: 	  <P>RESOLVE:Localize this.
1:df4020d: 	  @param testName the test which passed.
1:2bc809f: 	  @return true
1:2bc809f: 	  */
1:2bc809f: 	protected boolean PASS(String testName) {
1:2bc809f: 		out.println("[" + Thread.currentThread().getName() + "] Pass - "+shortModuleToTestName +" " + testName);
1:2bc809f: 		return true;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Emit a message during a unit test run, indent the message
1:2bc809f: 		to allow the PASS/FAIL messages to stand out.
1:2bc809f: 	*/
1:2bc809f: 	public void REPORT(String msg) {
1:2bc809f: 		out.println("[" + Thread.currentThread().getName() + "]     " + msg);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	
1:2bc809f: 	/**
1:2bc809f: 	  Abstract methods to implement for your test.
1:2bc809f: 	  */
1:2bc809f: 	
1:2bc809f: 	/**
1:2bc809f: 	  Run the test. The test should raise an exception if it
1:2bc809f: 	  fails. runTests should return if the tests pass.
1:2bc809f: 
1:2bc809f: 	  @exception Exception Test code throws these
1:2bc809f: 	  */
1:2bc809f: 	protected abstract void runTests() throws Exception;
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  Get the name of the protocol for the module to test.
1:2bc809f: 	  This is the 'factory.MODULE' variable.
1:2bc809f: 	  
1:2bc809f: 	  'moduleName' to the name of the module to test. 
1:2bc809f: 
1:2bc809f: 	  */
1:2bc809f: 	protected abstract String getModuleToTestProtocolName();
1:2bc809f: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e70c716
/////////////////////////////////////////////////////////////////////////
1: 			FAIL(t.toString());
1: 			t.printStackTrace(out.getPrintWriter());
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
1: 	  @param testName the test which passed.
/////////////////////////////////////////////////////////////////////////
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.harness.T_Generic
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.harness;
1: 
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: import org.apache.derbyTesting.unitTests.harness.UnitTest;
1: import org.apache.derbyTesting.unitTests.harness.UnitTestConstants;
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 	Abstract class which executes a unit test.
1: 
1: 	<P>To write a test,	extend this class with a class which implements the two
1: 	abstract methods:
1: <UL>	
1:     <LI>runTests
1: 	<LI>setUp
1: </UL>
1: 	@see UnitTest
1: 	@see ModuleControl
1: */
1: public abstract class T_Generic implements UnitTest, ModuleControl
1: {
1: 	/**
1: 	  The unqualified name for the module to test. This is set by the generic
1: 	  code.
1: 	  */
1: 	protected String shortModuleToTestName;
1: 
1: 	/**
1: 	  The start parameters for your test. This is set by generic code.
1: 	  */
1: 	protected Properties startParams;
1: 
1: 	/**
1: 	  The HeaderPrintWriter for test output. This is set by the
1: 	  generic code.
1: 	  */
1: 	protected HeaderPrintWriter out;
1: 
1: 	protected T_Generic()
1: 	{
1: 	}
1: 
1: 	/*
1: 	** Public methods of ModuleControl
1: 	*/
1: 
1: 	/**
1: 	  ModuleControl.start
1: 	  
1: 	  @see ModuleControl#boot
1: 	  @exception StandardException Module cannot be started.
1: 	  */
1: 	public void boot(boolean create, Properties startParams)
1: 		 throws StandardException
1: 	{
1: 		shortModuleToTestName =
1: 			getModuleToTestProtocolName()
1: 			.substring(getModuleToTestProtocolName().lastIndexOf('.')+1);
1: 
1: 		this.startParams = startParams;
1: 	}
1: 
1: 	/**
1: 	  ModuleControl.stop
1: 	  
1: 	  @see ModuleControl#stop
1: 	  */
1: 	public void stop() {
1: 	}
1: 
1: 	/*
1: 	** Public methods of UnitTest
1: 	*/
1: 	/**
1: 	  UnitTest.Execute
1: 	  
1: 	  @see UnitTest#Execute
1: 	  */
1: 	public boolean Execute(HeaderPrintWriter out)
1: 	{
1: 		this.out = out;
1: 
1: 		String myClass = this.getClass().getName();
1: 		String testName = myClass.substring(myClass.lastIndexOf('.') + 1);
1: 
1: 		System.out.println("-- Unit Test " + testName + " starting");
1: 
1: 		try
1: 		{
1: 			runTests();
1: 		}
1: 		
1: 		catch (Throwable t)
1: 		{
1: 			
0: 			while (t != null) {
0: 				FAIL(t.toString());
0: 				t.printStackTrace(out.getPrintWriter());
0: 				if (t instanceof StandardException) {
0: 					t = ((StandardException) t).getNestedException();
0: 					continue;
1: 				}
0: 				break;
1: 			}
1: 			return false;
1: 		}
1: 
1: 		System.out.println("-- Unit Test " + testName + " finished");
1: 
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	  UnitTest.UnitTestDuration
1: 	  
1: 	  @return UnitTestConstants.DURATION_MICRO
1: 	  @see UnitTest#UnitTestDuration
1: 	  @see UnitTestConstants
1: 	  */
1: 	public int UnitTestDuration() {
1: 		return UnitTestConstants.DURATION_MICRO;
1: 	}
1: 
1: 	/**
1: 	  UnitTest.UnitTestType
1: 	  
1: 	  @return UnitTestConstants.TYPE_COMMON
1: 	  @see UnitTest#UnitTestType
1: 	  @see UnitTestConstants
1: 	  */
1: 	public int UnitTestType() {
1: 		return UnitTestConstants.TYPE_COMMON;
1: 	}
1: 
1: 	/**
1: 	  Emit a message indicating why the test failed.
1: 
1: 	  RESOLVE: Should this be localized?
1: 
1: 	  @param msg the message.
1: 	  @return false
1: 	*/
1: 	protected boolean FAIL(String msg) {
1: 		out.println("[" + Thread.currentThread().getName() + "] FAIL - " + msg);
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	  Emit a message saying the test passed.
1: 	  You may use this to emit messages indicating individual test cases
1: 	  within a unit test passed.
1: 
1: 	  <P>RESOLVE:Localize this.
0: 	  @param test the test which passed.
1: 	  @return true
1: 	  */
1: 	protected boolean PASS(String testName) {
1: 		out.println("[" + Thread.currentThread().getName() + "] Pass - "+shortModuleToTestName +" " + testName);
1: 		return true;
1: 	}
1: 
1: 	/**
1: 		Emit a message during a unit test run, indent the message
1: 		to allow the PASS/FAIL messages to stand out.
1: 	*/
1: 	public void REPORT(String msg) {
1: 		out.println("[" + Thread.currentThread().getName() + "]     " + msg);
1: 	}
1: 
1: 	
1: 	/**
1: 	  Abstract methods to implement for your test.
1: 	  */
1: 	
1: 	/**
1: 	  Run the test. The test should raise an exception if it
1: 	  fails. runTests should return if the tests pass.
1: 
1: 	  @exception Exception Test code throws these
1: 	  */
1: 	protected abstract void runTests() throws Exception;
1: 
1: 	/**
1: 	  Get the name of the protocol for the module to test.
1: 	  This is the 'factory.MODULE' variable.
1: 	  
1: 	  'moduleName' to the name of the module to test. 
1: 
0: 	  @param testConfiguration the configuration for this test.
1: 	  */
1: 	protected abstract String getModuleToTestProtocolName();
1: }
============================================================================