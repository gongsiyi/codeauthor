1:ee59de8: /*
5:ee59de8: 
1:ee59de8:    Derby - Class org.apache.derby.impl.sql.execute.SetRoleConstantAction
1:eb38311: 
1:ee59de8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ee59de8:    contributor license agreements.  See the NOTICE file distributed with
1:ee59de8:    this work for additional information regarding copyright ownership.
1:ee59de8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ee59de8:    (the "License"); you may not use this file except in compliance with
1:ee59de8:    the License.  You may obtain a copy of the License at
1:ee59de8: 
1:ee59de8:       http://www.apache.org/licenses/LICENSE-2.0
1:ee59de8: 
1:ee59de8:    Unless required by applicable law or agreed to in writing, software
1:ee59de8:    distributed under the License is distributed on an "AS IS" BASIS,
1:ee59de8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee59de8:    See the License for the specific language governing permissions and
1:ee59de8:    limitations under the License.
1:ee59de8: 
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: package org.apache.derby.impl.sql.execute;
1:ee59de8: 
1:ee59de8: 
1:ee59de8: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:4e3ddd7: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
1:ee59de8: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:ee59de8: import org.apache.derby.iapi.sql.ParameterValueSet;
1:ee59de8: import org.apache.derby.iapi.sql.StatementType;
1:eb38311: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:ee59de8: import org.apache.derby.iapi.types.DataValueDescriptor;
1:ee59de8: import org.apache.derby.iapi.error.StandardException;
1:ee59de8: import org.apache.derby.iapi.sql.Activation;
1:ee59de8: import org.apache.derby.iapi.reference.SQLState;
1:ee59de8: import org.apache.derby.iapi.store.access.TransactionController;
1:44ea4f0: import org.apache.derby.iapi.util.IdUtil;
1:64f3218: import org.apache.derby.iapi.util.StringUtil;
1:ee59de8: 
1:ee59de8: /**
1:ee59de8:  *  This class describes actions that are ALWAYS performed for a
1:ee59de8:  *  SET ROLE Statement at Execution time.
1:ee59de8:  *
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: class SetRoleConstantAction implements ConstantAction
1:ee59de8: {
1:ee59de8: 
1:ee59de8:     private final String  roleName;
1:ee59de8:     private final int     type;
1:ee59de8: 
1:ee59de8:     // CONSTRUCTORS
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Make the ConstantAction for a SET ROLE statement.
1:ee59de8:      *
1:ee59de8:      *  @param roleName Name of role.
1:ee59de8:      *  @param type     type of set role (literal role name or ?)
1:ee59de8:      */
1:ee59de8:     SetRoleConstantAction(String roleName, int type)
1:ee59de8:     {
1:ee59de8:         this.roleName = roleName;
1:ee59de8:         this.type = type;
4:ee59de8:     }
1:ee59de8: 
1:ee59de8:     ///////////////////////////////////////////////
1:ee59de8:     //
1:ee59de8:     // OBJECT SHADOWS
1:ee59de8:     //
1:ee59de8:     ///////////////////////////////////////////////
1:ee59de8: 
1:ee59de8:     public String toString()
1:ee59de8:     {
1:ee59de8:         // Do not put this under SanityManager.DEBUG - it is needed for
1:ee59de8:         // error reporting.
1:ee59de8:         // If the error happens after we have figured out the role name for
1:ee59de8:         // dynamic we want to use it rather than ?
1:ee59de8:         return "SET ROLE " +
1:ee59de8:             ((type == StatementType.SET_ROLE_DYNAMIC && roleName == null) ?
1:ee59de8:              "?" : roleName);
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     // INTERFACE METHODS
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      *  This is the guts of the Execution-time logic for SET ROLE.
1:ee59de8:      *
1:ee59de8:      *  @see ConstantAction#executeConstantAction
1:ee59de8:      *
1:ee59de8:      * @exception StandardException     Thrown on failure
1:ee59de8:      */
1:ee59de8:     public void executeConstantAction( Activation activation )
1:ee59de8:                         throws StandardException {
1:ee59de8: 
1:ee59de8:         LanguageConnectionContext   lcc;
1:ee59de8:         DataDictionary              dd;
1:ee59de8: 
1:ee59de8:         // find the language context.
1:ee59de8:         lcc = activation.getLanguageConnectionContext();
1:ee59de8: 
1:ee59de8:         dd = lcc.getDataDictionary();
1:ee59de8:         String thisRoleName = roleName;
1:ee59de8: 
1:9f60172:         final String currentAuthId = lcc.getCurrentUserId(activation);
1:ee59de8:         final String dbo = lcc.getDataDictionary().
1:ee59de8:             getAuthorizationDatabaseOwner();
1:ee59de8: 
1:ee59de8:         TransactionController tc = lcc.getTransactionExecute();
1:ee59de8: 
1:ee59de8:         // SQL 2003, section 18.3, General rule 1:
1:ee59de8:         if (!tc.isIdle()) {
1:99d7d8b:             throw StandardException.newException
1:ee59de8:                 (SQLState.INVALID_TRANSACTION_STATE_ACTIVE_CONNECTION);
1:ee59de8:         }
1:ee59de8: 
1:ee59de8:         if (type == StatementType.SET_ROLE_DYNAMIC) {
1:ee59de8:             ParameterValueSet pvs = activation.getParameterValueSet();
1:ee59de8:             DataValueDescriptor dvs = pvs.getParameter(0);
1:44ea4f0:             // SQL 2003, section 18.3, GR2: trim whitespace first, and
1:44ea4f0:             // interpret as identifier, then we convert it to case normal form
1:44ea4f0:             // here.
1:0ea31ca:             String roleId = dvs.getString();
1:44ea4f0: 
1:0ea31ca:             if (roleId == null) {
1:64f3218:                 throw StandardException.newException(SQLState.ID_PARSE_ERROR);
1:64f3218:             }
1:64f3218: 
1:0ea31ca:             thisRoleName = IdUtil.parseRoleId(roleId);
1:44ea4f0:         }
1:64f3218: 
1:fe8c4c2:         RoleGrantDescriptor rdDef = null;
1:44ea4f0: 
1:eb38311:         try {
1:eb38311:             String oldRole = lcc.getCurrentRoleId(activation);
1:44ea4f0: 
1:eb38311:             if (oldRole != null && !oldRole.equals(thisRoleName)) {
1:eb38311:                 rdDef = dd.getRoleDefinitionDescriptor(oldRole);
1:eb38311: 
1:eb38311:                 if (rdDef != null) {
1:eb38311:                     dd.getDependencyManager().invalidateFor(
1:eb38311:                         rdDef,
1:e4caed2:                         DependencyManager.RECHECK_PRIVILEGES,
1:eb38311:                         lcc);
1:eb38311:                 } // else: old role else no longer exists, so ignore.
1:eb38311:             }
1:eb38311: 
1:eb38311:             if (thisRoleName != null) {
1:fe8c4c2:                 rdDef = dd.getRoleDefinitionDescriptor(thisRoleName);
1:ee59de8: 
1:ee59de8:                 // SQL 2003, section 18.3, General rule 4:
1:fe8c4c2:                 if (rdDef == null) {
3:ee59de8:                     throw StandardException.newException
1:ee59de8:                         (SQLState.ROLE_INVALID_SPECIFICATION, thisRoleName);
1:ee59de8:                 }
1:ee59de8: 
1:9f60172:                 if (!lcc.roleIsSettable(activation, thisRoleName)) {
1:34b59c6:                     throw StandardException.newException
1:99d7d8b:                               (SQLState. ROLE_INVALID_SPECIFICATION_NOT_GRANTED,
1:99d7d8b:                                thisRoleName);
1:99d7d8b:                 }
1:ee59de8:             }
1:eb38311:         } finally {
1:eb38311:             // reading above changes idle state, so reestablish it
1:eb38311:             lcc.userCommit();
1:ee59de8:         }
1:ee59de8: 
1:fe8c4c2:         lcc.setCurrentRole(activation, rdDef != null ? thisRoleName : null);
1:ee59de8:     }
1:ee59de8: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:         final String currentAuthId = lcc.getCurrentUserId(activation);
/////////////////////////////////////////////////////////////////////////
1:                 if (!lcc.roleIsSettable(activation, thisRoleName)) {
commit:0ea31ca
/////////////////////////////////////////////////////////////////////////
1:             String roleId = dvs.getString();
1:             if (roleId == null) {
1:             thisRoleName = IdUtil.parseRoleId(roleId);
commit:64f3218
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.StringUtil;
/////////////////////////////////////////////////////////////////////////
0:             // NONE is a special case and is not allowed with its special
0:             // meaning in SET ROLE ?. Even if there is a role with case normal
0:             // form "NONE", we require it to be delimited here, since it would
0:             // have had to be delimited to get created, too. We could have
0:             // chosen to be lenient here, but it seems safer to be restrictive.
0:             if (StringUtil.SQLToUpperCase(thisRoleName).equals("NONE")) {
1:                 throw StandardException.newException(SQLState.ID_PARSE_ERROR);
1:             }
1: 
1: 
commit:44ea4f0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.IdUtil;
/////////////////////////////////////////////////////////////////////////
1:             // SQL 2003, section 18.3, GR2: trim whitespace first, and
1:             // interpret as identifier, then we convert it to case normal form
1:             // here.
1: 
0:             if (thisRoleName == null) {
0:                 throw StandardException.newException(SQLState.ID_PARSE_ERROR);
1:             }
1: 
0:             thisRoleName = thisRoleName.trim();
1: 
0:             thisRoleName = IdUtil.parseSQLIdentifier(thisRoleName);
commit:e4caed2
/////////////////////////////////////////////////////////////////////////
1:                         DependencyManager.RECHECK_PRIVILEGES,
commit:eb38311
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             String oldRole = lcc.getCurrentRoleId(activation);
1: 
1:             if (oldRole != null && !oldRole.equals(thisRoleName)) {
1:                 rdDef = dd.getRoleDefinitionDescriptor(oldRole);
1: 
1:                 if (rdDef != null) {
1:                     dd.getDependencyManager().invalidateFor(
1:                         rdDef,
0:                         DependencyManager.INTERNAL_RECOMPILE_REQUEST,
1:                         lcc);
1:                 } // else: old role else no longer exists, so ignore.
1:             }
1: 
1:             if (thisRoleName != null) {
/////////////////////////////////////////////////////////////////////////
1:         } finally {
1:             // reading above changes idle state, so reestablish it
1:             lcc.userCommit();
commit:fe8c4c2
/////////////////////////////////////////////////////////////////////////
1:         RoleGrantDescriptor rdDef = null;
1:                 rdDef = dd.getRoleDefinitionDescriptor(thisRoleName);
1:                 if (rdDef == null) {
/////////////////////////////////////////////////////////////////////////
1:         lcc.setCurrentRole(activation, rdDef != null ? thisRoleName : null);
commit:4e3ddd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
/////////////////////////////////////////////////////////////////////////
0:         RoleGrantDescriptor rd = null;
commit:34b59c6
/////////////////////////////////////////////////////////////////////////
0:                 if (!lcc.roleIsSettable(thisRoleName)) {
1:                     throw StandardException.newException
commit:99d7d8b
/////////////////////////////////////////////////////////////////////////
0:                     if (rd == null) {
0:                         // or if not, via PUBLIC?
0:                         rd = dd.getRoleGrantDescriptor
0:                             (thisRoleName,
0:                              Authorizer.PUBLIC_AUTHORIZATION_ID,
0:                              dbo);
0:                         // Nope, we can't set this role, so throw.
0:                         if (rd == null) {
1:                             throw StandardException.newException
1:                               (SQLState. ROLE_INVALID_SPECIFICATION_NOT_GRANTED,
1:                                thisRoleName);
1:                         }
/////////////////////////////////////////////////////////////////////////
0:         lcc.setCurrentRole(activation, rd != null ? thisRoleName : null);
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.SetRoleConstantAction
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.RoleDescriptor;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.ParameterValueSet;
1: import org.apache.derby.iapi.sql.StatementType;
0: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.reference.Limits;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: /**
1:  *  This class describes actions that are ALWAYS performed for a
1:  *  SET ROLE Statement at Execution time.
1:  *
1:  */
1: 
1: class SetRoleConstantAction implements ConstantAction
1: {
1: 
1:     private final String  roleName;
1:     private final int     type;
1: 
1:     // CONSTRUCTORS
1: 
1:     /**
1:      * Make the ConstantAction for a SET ROLE statement.
1:      *
1:      *  @param roleName Name of role.
1:      *  @param type     type of set role (literal role name or ?)
1:      */
1:     SetRoleConstantAction(String roleName, int type)
1:     {
1:         this.roleName = roleName;
1:         this.type = type;
1:     }
1: 
1:     ///////////////////////////////////////////////
1:     //
1:     // OBJECT SHADOWS
1:     //
1:     ///////////////////////////////////////////////
1: 
1:     public String toString()
1:     {
1:         // Do not put this under SanityManager.DEBUG - it is needed for
1:         // error reporting.
1:         // If the error happens after we have figured out the role name for
1:         // dynamic we want to use it rather than ?
1:         return "SET ROLE " +
1:             ((type == StatementType.SET_ROLE_DYNAMIC && roleName == null) ?
1:              "?" : roleName);
1:     }
1: 
1:     // INTERFACE METHODS
1: 
1:     /**
1:      *  This is the guts of the Execution-time logic for SET ROLE.
1:      *
1:      *  @see ConstantAction#executeConstantAction
1:      *
1:      * @exception StandardException     Thrown on failure
1:      */
1:     public void executeConstantAction( Activation activation )
1:                         throws StandardException {
1: 
1:         LanguageConnectionContext   lcc;
1:         DataDictionary              dd;
1: 
1:         // find the language context.
1:         lcc = activation.getLanguageConnectionContext();
1: 
1:         dd = lcc.getDataDictionary();
1:         String thisRoleName = roleName;
1: 
0:         final String currentAuthId = lcc.getAuthorizationId();
1:         final String dbo = lcc.getDataDictionary().
1:             getAuthorizationDatabaseOwner();
1: 
1:         TransactionController tc = lcc.getTransactionExecute();
1: 
1:         // SQL 2003, section 18.3, General rule 1:
1:         if (!tc.isIdle()) {
1:             throw StandardException.newException
1:                 (SQLState.INVALID_TRANSACTION_STATE_ACTIVE_CONNECTION);
1:         }
1: 
1:         if (type == StatementType.SET_ROLE_DYNAMIC) {
1:             ParameterValueSet pvs = activation.getParameterValueSet();
1:             DataValueDescriptor dvs = pvs.getParameter(0);
0:             thisRoleName = dvs.getString();
1:         }
1: 
0:         RoleDescriptor rd = null;
1: 
0:         if (thisRoleName != null) {
0:             try {
0:                 rd = dd.getRoleDefinitionDescriptor(thisRoleName);
1: 
1:                 // SQL 2003, section 18.3, General rule 4:
0:                 if (rd == null) {
1:                     throw StandardException.newException
1:                         (SQLState.ROLE_INVALID_SPECIFICATION, thisRoleName);
1:                 }
1: 
0:                 if (!currentAuthId.equals(dbo)) {
0:                     // is it granted to us mere mortals?
0:                     rd = dd.getRoleGrantDescriptor(thisRoleName,
0:                                                    currentAuthId,
0:                                                    dbo);
0:                     if (rd == null &&
0:                         (dd.getRoleGrantDescriptor
0:                          (thisRoleName,
0:                           Authorizer.PUBLIC_AUTHORIZATION_ID,
0:                           dbo) == null)) {
1: 
1:                         throw StandardException.newException
0:                             (SQLState.ROLE_INVALID_SPECIFICATION_NOT_GRANTED,
0:                              thisRoleName);
1:                     }
1:                 }
0:             } finally {
0:                 // reading above changes idle state, so reestablish it
0:                 lcc.userCommit();
1:             }
1:         }
1: 
0:         lcc.setCurrentRole(rd);
1:     }
1: }
============================================================================