1:33776ff: /*
11:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.ClientXAConnection
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: package org.apache.derby.client;
1:33776ff: 
1:69e3d06: import java.sql.Connection;
1:d506170: import java.sql.SQLException;
1:70f7692: import javax.sql.XAConnection;
1:70f7692: import javax.transaction.xa.XAResource;
1:70f7692: 
1:fba7fba: import org.apache.derby.client.am.ClientMessageId;
1:6372907: import org.apache.derby.client.am.LogWriter;
1:33776ff: import org.apache.derby.client.am.SqlException;
1:70f7692: import org.apache.derby.client.net.NetXAConnection;
1:b13b17c: import org.apache.derby.client.net.NetXAResource;
1:7863d83: import org.apache.derby.jdbc.BasicClientDataSource40;
1:fba7fba: import org.apache.derby.shared.common.reference.SQLState;
1:33776ff: 
1:70f7692: public class ClientXAConnection extends ClientPooledConnection implements XAConnection {
1:70f7692:     private static int rmIdSeed_ = 95688932; // semi-random starting value for rmId
1:33776ff: 
1:70f7692:     private XAResource xares_ = null;
1:b13b17c:     private NetXAResource netXares_ = null;
1:70f7692:     private boolean fFirstGetConnection_ = true;
1:b13b17c: 
1:b13b17c:      // logicalConnection_ is inherited from ClientPooledConnection
1:69e3d06:     private Connection logicalCon_;
1:b13b17c: 
1:70f7692:     // This connection is used to access the indoubt table
1:70f7692:     private NetXAConnection controlCon_ = null;
1:33776ff: 
1:7863d83:     public ClientXAConnection(BasicClientDataSource40 ds,
1:6372907:                               LogWriter logWtr,
1:70f7692:                               String userId,
1:d506170:                               String password) throws SQLException {
1:70f7692:         super(ds, logWtr, userId, password, getUnigueRmId());
1:33776ff: 
1:70f7692:         // Have to instantiate a real connection here,
1:70f7692:         // otherwise if XA function is called before the connect happens,
1:70f7692:         // an error will be returned
1:70f7692:         // Note: conApp will be set after this call
1:70f7692:         logicalCon_ = super.getConnection();
1:33776ff: 
1:0326967:         netXares_ = new NetXAResource(this, netXAPhysicalConnection_);
1:70f7692:         xares_ = netXares_;
5:70f7692:     }
1:70f7692: 
1:69e3d06:     public Connection getConnection() throws SQLException {
1:70f7692:         if (fFirstGetConnection_) {
1:70f7692:             // Since super.getConnection() has already been called once
1:70f7692:             // in the constructor, we don't need to call it again for the
1:70f7692:             // call of this method.
1:70f7692:             fFirstGetConnection_ = false;
1:70f7692:         } else {
1:70f7692:             // A new connection object is required
1:70f7692:             logicalCon_ = super.getConnection();
1:70f7692:         }
1:70f7692:         return logicalCon_;
1:70f7692:     }
1:33776ff: 
1:70f7692:     private static synchronized int getUnigueRmId() {
1:70f7692:         rmIdSeed_ += 1;
1:70f7692:         return rmIdSeed_;
1:70f7692:     }
1:33776ff: 
1:70f7692:     public int getRmId() {
1:70f7692:         return rmId_;
1:70f7692:     }
1:33776ff: 
1:d506170:     public XAResource getXAResource() throws SQLException {
1:d506170:         if (logWriter_ != null) {
1:70f7692:             logWriter_.traceExit(this, "getXAResource", xares_);
1:d506170:         }
1:fba7fba:         // DERBY-2532
1:fba7fba:         if (super.physicalConnection_ == null) {
1:fba7fba:             throw new SqlException(logWriter_,
1:fba7fba:                     new ClientMessageId(SQLState.NO_CURRENT_CONNECTION)
1:fba7fba:                 ).getSQLException();
1:fba7fba:         }
1:70f7692:         return xares_;
1:d506170:     }
1:33776ff: 
1:d506170:     public synchronized void close() throws SQLException {
1:70f7692:         super.close();
1:70f7692:     }
1:70f7692: }
1:33776ff: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7863d83
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.BasicClientDataSource40;
/////////////////////////////////////////////////////////////////////////
1:     public ClientXAConnection(BasicClientDataSource40 ds,
commit:b565f41
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:         netXares_ = new NetXAResource(this, netXAPhysicalConnection_);
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
0: import org.apache.derby.client.am.ClientConnection;
/////////////////////////////////////////////////////////////////////////
1:     private Connection logicalCon_;
/////////////////////////////////////////////////////////////////////////
1:     public Connection getConnection() throws SQLException {
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.Connection;
1: import org.apache.derby.client.net.NetXAResource;
/////////////////////////////////////////////////////////////////////////
1:     private NetXAResource netXares_ = null;
1: 
1:      // logicalConnection_ is inherited from ClientPooledConnection
0:     private java.sql.Connection logicalCon_;
1: 
0:                               NetLogWriter logWtr,
/////////////////////////////////////////////////////////////////////////
0:         netXares_ = new NetXAResource(this,
0:     public java.sql.Connection getConnection() throws SQLException {
commit:8269b78
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
/////////////////////////////////////////////////////////////////////////
0:     public ClientXAConnection(ClientBaseDataSourceRoot ds,
/////////////////////////////////////////////////////////////////////////
0:     public NetXAConnection createControlConnection(
0:             NetLogWriter logWriter,
0:             String user,
0:             String password,
0:             ClientBaseDataSourceRoot dataSource,
0:             int rmId,
0:             boolean isXAConn) throws SQLException {
0:         try {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6372907
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.LogWriter;
/////////////////////////////////////////////////////////////////////////
1:                               LogWriter logWtr,
commit:db8b20b
/////////////////////////////////////////////////////////////////////////
commit:407e52d
/////////////////////////////////////////////////////////////////////////
0:                     isXAConn,
0:                     this);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fba7fba
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.ClientMessageId;
1: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-2532
1:         if (super.physicalConnection_ == null) {
1:             throw new SqlException(logWriter_,
1:                     new ClientMessageId(SQLState.NO_CURRENT_CONNECTION)
1:                 ).getSQLException();
1:         }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dadd05a
/////////////////////////////////////////////////////////////////////////
0:             controlCon_.getNetConnection().setTransactionIsolation(
0:                     Connection.TRANSACTION_READ_UNCOMMITTED);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d506170
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
1:                               String password) throws SQLException {
/////////////////////////////////////////////////////////////////////////
0:     public Connection getConnection() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public XAResource getXAResource() throws SQLException {
/////////////////////////////////////////////////////////////////////////
0:                                                    boolean isXAConn) throws SQLException {
0:         try
0:         {
0:             controlCon_ = new NetXAConnection(logWriter,
0:                     user,
0:                     password,
0:                     dataSource,
0:                     rmId,
0:                     isXAConn);
0:             controlCon_.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
1:             if (logWriter_ != null) {
0:                 logWriter_.traceExit(this, "createControlConnection", controlCon_);
1:             }
0:             return controlCon_;
0:         catch ( SqlException se )
0:         {
0:             throw se.getSQLException();
1:         }            
1:     public synchronized void close() throws SQLException {
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Connection;
1: import javax.sql.XAConnection;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.apache.derby.client.net.NetXAConnection;
0: import org.apache.derby.jdbc.ClientXADataSource;
1: public class ClientXAConnection extends ClientPooledConnection implements XAConnection {
1:     private static int rmIdSeed_ = 95688932; // semi-random starting value for rmId
0:     private ClientXADataSource derbyds_ = null;
1:     private XAResource xares_ = null;
0:     private org.apache.derby.client.net.NetXAResource netXares_ = null;
1:     private boolean fFirstGetConnection_ = true;
0:     private Connection logicalCon_; // logicalConnection_ is inherited from ClientPooledConnection
1:     // This connection is used to access the indoubt table
1:     private NetXAConnection controlCon_ = null;
0:     public ClientXAConnection(ClientXADataSource ds,
0:                               org.apache.derby.client.net.NetLogWriter logWtr,
1:                               String userId,
0:                               String password) throws SqlException {
1:         super(ds, logWtr, userId, password, getUnigueRmId());
0:         derbyds_ = ds;
1:         // Have to instantiate a real connection here,
1:         // otherwise if XA function is called before the connect happens,
1:         // an error will be returned
1:         // Note: conApp will be set after this call
1:         logicalCon_ = super.getConnection();
0:         netXares_ = new org.apache.derby.client.net.NetXAResource(this,
0:                 rmId_, userId, password, netXAPhysicalConnection_);
1:         xares_ = netXares_;
1: 
0:     public Connection getConnection() throws SqlException {
1:         if (fFirstGetConnection_) {
1:             // Since super.getConnection() has already been called once
1:             // in the constructor, we don't need to call it again for the
1:             // call of this method.
1:             fFirstGetConnection_ = false;
1:         } else {
1:             // A new connection object is required
1:             logicalCon_ = super.getConnection();
0:             if (this.physicalConnection_ != null) { // have a physical connection, check if a NetXAResource
0:                 if (netXAPhysicalConnection_ != null) { // the XAResource is a NetXAResource, re-initialize it
0:                     netXares_.initForReuse();
1:                 }
1:             }
1:         return logicalCon_;
1:     private static synchronized int getUnigueRmId() {
1:         rmIdSeed_ += 1;
1:         return rmIdSeed_;
1:     }
1:     public int getRmId() {
1:         return rmId_;
1:     }
0:     public XAResource getXAResource() throws SqlException {
0:         if (logWriter_ != null) {
1:             logWriter_.traceExit(this, "getXAResource", xares_);
1:         }
1:         return xares_;
1:     }
0:     public ClientXADataSource getDataSource() throws SqlException {
0:         if (logWriter_ != null) {
0:             logWriter_.traceExit(this, "getDataSource", derbyds_);
1:         }
0:         return derbyds_;
1:     }
0:     public NetXAConnection createControlConnection(NetLogWriter logWriter,
0:                                                    String user,
0:                                                    String password,
0:                                                    org.apache.derby.jdbc.ClientDataSource dataSource,
0:                                                    int rmId,
0:                                                    boolean isXAConn) throws SqlException {
0:         controlCon_ = new NetXAConnection(logWriter,
0:                 user,
0:                 password,
0:                 dataSource,
0:                 rmId,
0:                 isXAConn);
0:         controlCon_.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
0:         if (logWriter_ != null) {
0:             logWriter_.traceExit(this, "createControlConnection", controlCon_);
1:         }
0:         return controlCon_;
1:     }
0:     public synchronized void close() throws SqlException {
1:         super.close();
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.ClientXAConnection
1: 
0:    Copyright (c) 2003, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.client;
1: 
1: import org.apache.derby.client.am.SqlException;
0: import org.apache.derby.jdbc.ClientXADataSource;
0: import org.apache.derby.client.net.NetXAConnection;
0: import org.apache.derby.client.net.NetLogWriter;
0: import java.sql.*;
0: import javax.sql.*;
0: import javax.transaction.xa.*;
1: 
0: public class ClientXAConnection extends ClientPooledConnection implements XAConnection
0: {
0:   private static int rmIdSeed_ = 95688932; // semi-random starting value for rmId
1: 
0:   private ClientXADataSource derbyds_ = null;
0:   private XAResource xares_ = null;
0:   private org.apache.derby.client.net.NetXAResource netXares_ = null;
0:   private boolean fFirstGetConnection_ = true;
0:   private Connection logicalCon_; // logicalConnection_ is inherited from ClientPooledConnection 
0:   // This connection is used to access the indoubt table
0:   private NetXAConnection controlCon_ = null;
1: 
0:   public ClientXAConnection (ClientXADataSource ds,
0:                           org.apache.derby.client.net.NetLogWriter logWtr,
0:                           String          userId,
0:                           String          password) throws SqlException
0:   {
0:     super (ds,logWtr,userId, password, getUnigueRmId());
0:     derbyds_ = ds;
1: 
0:     // Have to instantiate a real connection here,
0:     // otherwise if XA function is called before the connect happens,
0:     // an error will be returned
0:     // Note: conApp will be set after this call
0:     logicalCon_ = super.getConnection();
1: 
0:     netXares_ = new org.apache.derby.client.net.NetXAResource( this,
0:             rmId_, userId, password, netXAPhysicalConnection_ );
0:     xares_ = netXares_;
0:   }
1: 
0:   public Connection getConnection() throws SqlException
0:   {
0:     if ( fFirstGetConnection_ )
0:     {
0:       // Since super.getConnection() has already been called once
0:       // in the constructor, we don't need to call it again for the
0:       // call of this method.
0:       fFirstGetConnection_ = false;
0:     }
0:     else
0:     {
0:       // A new connection object is required
0:       logicalCon_ = super.getConnection();
0:       if( this.physicalConnection_ != null )
0:       { // have a physical connection, check if a NetXAResource
0:         if( netXAPhysicalConnection_ != null )
0:         { // the XAResource is a NetXAResource, re-initialize it
0:           netXares_.initForReuse();
0:         }
0:       }
0:     }
0:     return logicalCon_;
0:   }
1: 
0:   private static synchronized int getUnigueRmId()
0:   {
0:     rmIdSeed_ += 1;
0:     return rmIdSeed_;
0:   }
1: 
0:   public int getRmId()
0:   {
0:     return rmId_;
0:   }
1: 
0:   public XAResource getXAResource() throws SqlException
0:   {
0:     if (logWriter_ != null) logWriter_.traceExit (this, "getXAResource", xares_);
1: 
0:     return xares_;
0:   }
1: 
0:   public ClientXADataSource getDataSource() throws SqlException
0:   {
0:     if (logWriter_ != null) logWriter_.traceExit (this, "getDataSource", derbyds_);
1: 
0:     return derbyds_;
0:   }
1: 
0:   public NetXAConnection createControlConnection(NetLogWriter logWriter,
0:       String user,
0:       String password,
0:       org.apache.derby.jdbc.ClientDataSource dataSource,
0:       int rmId,
0:       boolean isXAConn) throws SqlException
0:   {
1: 
0:     controlCon_ = new NetXAConnection (
0:         logWriter,
0:         user,
0:         password,
0:         dataSource,
0:         rmId,
0:         isXAConn);
0:     controlCon_.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
1: 
0:     if (logWriter_ != null) logWriter_.traceExit (this, "createControlConnection", controlCon_);
1: 
0:     return controlCon_;
0:   }
1: 
1: 
0:   public synchronized void close() throws SqlException
0:   {
0:     super.close();
0:   }
0: }
1: 
============================================================================