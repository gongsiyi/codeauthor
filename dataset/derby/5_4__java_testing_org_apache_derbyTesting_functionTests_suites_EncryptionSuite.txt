1:4f1a993: /*
3:4f1a993: 
1:4f1a993:    Derby - Class org.apache.derbyTesting.functionTests.suites.EncryptionSuite
1:4f1a993: 
1:4f1a993:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4f1a993:    contributor license agreements.  See the NOTICE file distributed with
1:4f1a993:    this work for additional information regarding copyright ownership.
1:4f1a993:    The ASF licenses this file to you under the Apache License, Version 2.0
1:4f1a993:    (the "License"); you may not use this file except in compliance with
1:4f1a993:    the License.  You may obtain a copy of the License at
1:4f1a993: 
1:4f1a993:       http://www.apache.org/licenses/LICENSE-2.0
1:4f1a993: 
1:4f1a993:    Unless required by applicable law or agreed to in writing, software
1:4f1a993:    distributed under the License is distributed on an "AS IS" BASIS,
1:4f1a993:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f1a993:    See the License for the specific language governing permissions and
1:4f1a993:    limitations under the License.
1:4f1a993: 
1:4f1a993:  */
1:4f1a993: package org.apache.derbyTesting.functionTests.suites;
1:f46f9b8: 
1:1a36302: import java.sql.Connection;
1:f46f9b8: import java.sql.SQLException;
1:1a36302: import java.sql.Statement;
1:1a36302: import java.util.Properties;
1:1ae02c9: import junit.framework.Test;
1:1a36302: import org.apache.derbyTesting.functionTests.tests.store.AccessTest;
1:f46f9b8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:4f1a993: import org.apache.derbyTesting.junit.Decorator;
1:f46f9b8: import org.apache.derbyTesting.junit.JDBC;
1:4f1a993: 
1:4f1a993: /**
1:4f1a993:  * A suite that runs a set of tests using encrypted
1:4f1a993:  * databases with a number of algorithms.
1:4f1a993:  * This is a general encryption test to see if
1:4f1a993:  * tests run without any problems when encryption
1:4f1a993:  * is enabled.
1:4f1a993:  * <BR>
1:f18bc35:  * It is not for testing of encryption functionality,
1:4f1a993:  * e.g. testing that bootPassword must be a certain
1:4f1a993:  * length etc. That should be in a specific JUnit test
1:4f1a993:  * that probably needs to control database creation
1:4f1a993:  * more carefully than this.
1:4f1a993:  * <BR>
1:4f1a993:  * The same set of tests is run for each algorithm,
1:4f1a993:  * and each algorithm (obviously) uses a single
1:4f1a993:  * use database with the required encryption setup.
1:4f1a993:  * 
1:4f1a993:  * @see Decorator#encryptedDatabase(Test)
1:4f1a993:  * @see Decorator#encryptedDatabase(Test, String)
1:4f1a993:  *
1:4f1a993:  */
1:f46f9b8: public final class EncryptionSuite extends BaseJDBCTestCase {
1:4f1a993:     
1:4f1a993: 
1:f46f9b8:     public EncryptionSuite(String name) {
1:f46f9b8:         super(name);
1:4f1a993:     }
1:4f1a993:     
1:4f1a993:     /**
1:4f1a993:      * Runs tests with a set of encryption algorithms.
1:4f1a993:      * The set comes from the set of algorithms used
1:4f1a993:      * for the same purpose in the old harness.
1:4f1a993:      */
1:4f1a993:     public static Test suite()
1:4f1a993:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Encrpytion Suite");
1:4f1a993:         
1:f46f9b8:         // Encryption only supported for Derby in J2SE/J2EE environments.
1:f46f9b8:         // J2ME (JSR169) does not support encryption.
1:f46f9b8:         if (JDBC.vmSupportsJDBC3()) {
1:f46f9b8:         
1:f46f9b8:           suite.addTest(Decorator.encryptedDatabase(baseSuite("default")));
2:f46f9b8:           suite.addTest(encryptedSuite("AES/CBC/NoPadding"));
1:f46f9b8:           suite.addTest(encryptedSuite("DES/ECB/NoPadding"));
1:f46f9b8:           suite.addTest(encryptedSuite("DESede/CFB/NoPadding"));
1:f46f9b8:           suite.addTest(encryptedSuite("DES/CBC/NoPadding"));
1:f46f9b8:           suite.addTest(encryptedSuite("Blowfish/CBC/NoPadding"));
1:d6d16dc:           suite.addTest(encryptedSuite("AES/OFB/NoPadding"));
1:f46f9b8:         }
1:4f1a993:         
1:4f1a993:         return suite;
1:4f1a993:     }
1:4f1a993:     
1:4f1a993:     private static Test encryptedSuite(String algorithm)
1:4f1a993:     {
1:4f1a993:         return Decorator.encryptedDatabase(baseSuite(algorithm), algorithm);
1:4f1a993:     }
1:4f1a993:     
1:4f1a993:     /**
1:4f1a993:      * Set of tests which are run for each encryption algorithm.
1:4f1a993:      */
1:4f1a993:     private static Test baseSuite(String algorithm)
1:4f1a993:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("Encryption Algorithm: " + algorithm);
1:4f1a993:         
1:f46f9b8:         // Very simple test to get the setup working while we have
1:f46f9b8:         // no tests that were previously run under encryption converted.
1:f46f9b8:         suite.addTestSuite(EncryptionSuite.class);
1:f46f9b8:         
1:1a36302:         Properties sysProps = new Properties();
1:1a36302:         sysProps.put("derby.optimizer.optimizeJoinOrder", "false");
1:1a36302:         sysProps.put("derby.optimizer.ruleBasedOptimization", "true");
1:1a36302:         sysProps.put("derby.optimizer.noTimeout", "true");
1:1a36302:         
1:1a36302:         suite.addTestSuite(AccessTest.class);
1:1a36302:         
1:4f1a993:         return suite;
1:4f1a993:     }
1:f46f9b8:     
1:1a36302:     protected void setUp() {
1:1a36302:         
1:1a36302:         try { 
1:1a36302:                 Connection conn = getConnection();
1:1a36302:                 Statement s = createStatement();
1:1a36302: 
1:1a36302:                 s.execute("CREATE FUNCTION  PADSTRING (DATA VARCHAR(32000), "
1:1a36302:                         + "LENGTH INTEGER) RETURNS VARCHAR(32000) EXTERNAL NAME " +
1:1a36302:                         "'org.apache.derbyTesting.functionTests.util.Formatters" +
1:1a36302:                 ".padString' LANGUAGE JAVA PARAMETER STYLE JAVA");
1:1a36302:                 s.close();
1:1a36302:                 conn.close();
1:1a36302: 
1:1a36302:         } catch (SQLException se) {
1:1a36302:             // ignore
1:1a36302:         }
1:1a36302:     }
1:1a36302:     
1:1a36302:     public void tearDown() throws Exception {
1:1a36302:         Statement st = createStatement();
1:1a36302:         super.tearDown();
1:1a36302:         try {
1:1a36302:             st.executeUpdate("DROP FUNCTION PADSTRING");
1:1a36302:         } catch (SQLException e) {
1:1a36302:             // never mind.
1:1a36302:         }
1:1a36302:     }
1:1a36302:     
1:f46f9b8:     /**
1:f46f9b8:      * Very simple test that ensures we can get a connection to
1:f46f9b8:      * the booted encrypted database.
1:f46f9b8:      * @throws SQLException
1:f46f9b8:      */
1:548062e:     public void testEncryptedDBConnection() throws SQLException
1:f46f9b8:     {
1:f46f9b8:         getConnection().close();
1:f46f9b8:     }
1:1a36302:     
1:1a36302:     
1:4f1a993: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Encrpytion Suite");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("Encryption Algorithm: " + algorithm);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:1a36302
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.util.Properties;
1: import org.apache.derbyTesting.functionTests.tests.store.AccessTest;
/////////////////////////////////////////////////////////////////////////
1:         Properties sysProps = new Properties();
1:         sysProps.put("derby.optimizer.optimizeJoinOrder", "false");
1:         sysProps.put("derby.optimizer.ruleBasedOptimization", "true");
1:         sysProps.put("derby.optimizer.noTimeout", "true");
1:         
1:         suite.addTestSuite(AccessTest.class);
1:         
1:     protected void setUp() {
1:         
1:         try { 
1:                 Connection conn = getConnection();
1:                 Statement s = createStatement();
1: 
1:                 s.execute("CREATE FUNCTION  PADSTRING (DATA VARCHAR(32000), "
1:                         + "LENGTH INTEGER) RETURNS VARCHAR(32000) EXTERNAL NAME " +
1:                         "'org.apache.derbyTesting.functionTests.util.Formatters" +
1:                 ".padString' LANGUAGE JAVA PARAMETER STYLE JAVA");
1:                 s.close();
1:                 conn.close();
1: 
1:         } catch (SQLException se) {
1:             // ignore
1:         }
1:     }
1:     
1:     public void tearDown() throws Exception {
1:         Statement st = createStatement();
1:         super.tearDown();
1:         try {
1:             st.executeUpdate("DROP FUNCTION PADSTRING");
1:         } catch (SQLException e) {
1:             // never mind.
1:         }
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     
commit:548062e
/////////////////////////////////////////////////////////////////////////
1:     public void testEncryptedDBConnection() throws SQLException
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:d6d16dc
/////////////////////////////////////////////////////////////////////////
1:           suite.addTest(encryptedSuite("AES/OFB/NoPadding"));
commit:f18bc35
/////////////////////////////////////////////////////////////////////////
1:  * It is not for testing of encryption functionality,
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5d68e5f
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f46f9b8
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1: public final class EncryptionSuite extends BaseJDBCTestCase {
1:     public EncryptionSuite(String name) {
1:         super(name);
/////////////////////////////////////////////////////////////////////////
1:         // Encryption only supported for Derby in J2SE/J2EE environments.
1:         // J2ME (JSR169) does not support encryption.
1:         if (JDBC.vmSupportsJDBC3()) {
1:         
1:           suite.addTest(Decorator.encryptedDatabase(baseSuite("default")));
1:           suite.addTest(encryptedSuite("AES/CBC/NoPadding"));
1:           suite.addTest(encryptedSuite("DES/ECB/NoPadding"));
1:           suite.addTest(encryptedSuite("DESede/CFB/NoPadding"));
1:           suite.addTest(encryptedSuite("DES/CBC/NoPadding"));
1:           suite.addTest(encryptedSuite("Blowfish/CBC/NoPadding"));
1:           suite.addTest(encryptedSuite("AES/CBC/NoPadding"));
1:         }
/////////////////////////////////////////////////////////////////////////
1:         // Very simple test to get the setup working while we have
1:         // no tests that were previously run under encryption converted.
1:         suite.addTestSuite(EncryptionSuite.class);
1:         
1:     
1:     /**
1:      * Very simple test that ensures we can get a connection to
1:      * the booted encrypted database.
1:      * @throws SQLException
1:      */
0:     public void testConnection() throws SQLException
1:     {
1:         getConnection().close();
1:     }
commit:4f1a993
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.suites.EncryptionSuite
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.suites;
1: 
0: import org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest;
1: import org.apache.derbyTesting.junit.Decorator;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
1:  * A suite that runs a set of tests using encrypted
1:  * databases with a number of algorithms.
1:  * This is a general encryption test to see if
1:  * tests run without any problems when encryption
1:  * is enabled.
1:  * <BR>
0:  * It is not for testing of encrpytion functionality,
1:  * e.g. testing that bootPassword must be a certain
1:  * length etc. That should be in a specific JUnit test
1:  * that probably needs to control database creation
1:  * more carefully than this.
1:  * <BR>
1:  * The same set of tests is run for each algorithm,
1:  * and each algorithm (obviously) uses a single
1:  * use database with the required encryption setup.
1:  * 
1:  * @see Decorator#encryptedDatabase(Test)
1:  * @see Decorator#encryptedDatabase(Test, String)
1:  *
1:  */
0: public final class EncryptionSuite {
1:     
1: 
0:     private EncryptionSuite() {
0:         super();
1:     }
1:     
1:     /**
1:      * Runs tests with a set of encryption algorithms.
1:      * The set comes from the set of algorithms used
1:      * for the same purpose in the old harness.
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("Encrpytion Suite");
1:         
0:         suite.addTest(Decorator.encryptedDatabase(baseSuite("default")));
0:         suite.addTest(encryptedSuite("AES/CBC/NoPadding"));
0:         suite.addTest(encryptedSuite("DES/ECB/NoPadding"));
0:         suite.addTest(encryptedSuite("DESede/CFB/NoPadding"));
0:         suite.addTest(encryptedSuite("DES/CBC/NoPadding"));
0:         suite.addTest(encryptedSuite("Blowfish/CBC/NoPadding"));
0:         suite.addTest(encryptedSuite("AES/CBC/NoPadding"));
1:         
1:         return suite;
1:     }
1:     
1:     private static Test encryptedSuite(String algorithm)
1:     {
1:         return Decorator.encryptedDatabase(baseSuite(algorithm), algorithm);
1:     }
1:     
1:     /**
1:      * Set of tests which are run for each encryption algorithm.
1:      */
1:     private static Test baseSuite(String algorithm)
1:     {
0:         TestSuite suite = new TestSuite("Encryption Algorithm: " + algorithm);
1:         
0:         // LobStreamsTest was in the encrpytion suite for the old harness. 
0:         suite.addTest(LobStreamsTest.suite());
1:         return suite;
1:     }
1: }
============================================================================