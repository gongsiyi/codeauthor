1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:eac0369: 
1:eac0369: import java.util.ArrayList;
1:801cf0d: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:f2fad75: public class ConstraintDescriptorList extends ArrayList<ConstraintDescriptor>
1:eac0369: {
1:eac0369: 
1:eac0369: 	private boolean scanned;
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 	 * Mark whether or not the underlying system table has
1:eac0369: 	 * been scanned.  (If a table does not have any
1:eac0369: 	 * constraints then the size of its CDL will always
1:eac0369: 	 * be 0.  We used these get/set methods to determine
1:eac0369: 	 * when we need to scan the table.
3:eac0369: 	 *
1:eac0369: 	 * @param scanned	Whether or not the underlying system table has been scanned.
1:eac0369: 	 */
1:eac0369: 	public void setScanned(boolean scanned)
1:eac0369: 	{
1:eac0369: 		this.scanned = scanned;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not the underlying system table has been scanned.
1:eac0369: 	 *
1:eac0369: 	 * @return		Where or not the underlying system table has been scanned.
1:eac0369: 	 */
1:eac0369: 	public boolean getScanned()
1:eac0369: 	{
1:eac0369: 		return scanned;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the ConstraintDescriptor with the matching UUID String for the backing index.
1:eac0369: 	 *
1:eac0369: 	 * @param indexUUID		The UUID  for the backing index.
1:eac0369: 	 *
1:eac0369: 	 * @return The matching ConstraintDescriptor.
1:eac0369: 	 */
1:eac0369: 	public ConstraintDescriptor getConstraintDescriptor(UUID indexUUID)
1:eac0369: 	{
1:eac0369: 		ConstraintDescriptor retCD = null;
1:eac0369: 		int size = size();
1:eac0369: 
1:eac0369: 		for (int index = 0; index < size; index++)
1:eac0369: 		{
1:eac0369: 			ConstraintDescriptor cd = elementAt(index);
1:eac0369: 
1:eac0369: 			if (! (cd instanceof KeyConstraintDescriptor))
1:eac0369: 			{
1:eac0369: 				continue;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			KeyConstraintDescriptor keyCD = (KeyConstraintDescriptor) cd;
1:eac0369: 
1:eac0369: 			if (keyCD.getIndexId().equals(indexUUID))
1:eac0369: 			{
1:eac0369: 				retCD = cd;
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return retCD;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the ConstraintDescriptor with the matching constraint id.
1:eac0369: 	 *
1:eac0369: 	 * @param uuid		The constraint id.
1:eac0369: 	 *
1:eac0369: 	 * @return The matching ConstraintDescriptor.
1:eac0369: 	 */
1:eac0369: 	public ConstraintDescriptor getConstraintDescriptorById(UUID uuid)
1:eac0369: 	{
1:eac0369: 		ConstraintDescriptor returnCD = null;
1:eac0369: 		int size = size();
1:eac0369: 
1:eac0369: 		for (int index = 0; index < size; index++)
1:eac0369: 		{
1:eac0369: 			ConstraintDescriptor cd = elementAt(index);
1:eac0369: 
1:eac0369: 			if (cd.getUUID().equals(uuid))
1:eac0369: 			{
1:eac0369: 				returnCD = cd;
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return returnCD;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Drop the constraint with the given UUID.
1:eac0369: 	  *
1:eac0369: 	  * @param uuid		The constraint id.
1:eac0369: 	  *
1:eac0369: 	  * @return The matching ConstraintDescriptor.
1:eac0369: 	  */
1:eac0369: 	public ConstraintDescriptor dropConstraintDescriptorById(UUID uuid)
1:eac0369: 	{
2:eac0369: 		ConstraintDescriptor cd = null;
1:eac0369: 		int size = size();
1:eac0369: 
1:eac0369: 		for (int index = 0; index < size; index++)
1:eac0369: 		{
2:eac0369: 			cd = elementAt(index);
1:eac0369: 
1:eac0369: 			if (cd.getUUID().equals(uuid))
1:eac0369: 			{
1:eac0369: 				remove( cd );
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return cd;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the ConstraintDescriptor with the matching constraint name.
1:eac0369: 	 *
2:eac0369: 	 * @param sd		The constraint schema descriptor.
2:eac0369: 	 * @param name		The constraint name.
1:eac0369: 	 *
1:eac0369: 	 * @return The matching ConstraintDescriptor.
1:eac0369: 	 */
1:eac0369: 	public ConstraintDescriptor getConstraintDescriptorByName(SchemaDescriptor sd,
1:eac0369: 																String name)
1:eac0369: 	{
1:eac0369: 		ConstraintDescriptor retCD = null;
1:eac0369: 		int size = size();
1:eac0369: 
1:eac0369: 		for (int index = 0; index < size; index++)
1:eac0369: 		{
1:eac0369: 			ConstraintDescriptor cd = elementAt(index);
1:eac0369: 
1:eac0369: 			if (cd.getConstraintName().equals(name))
1:eac0369: 			{
1:eac0369: 				if ((sd == null) ||
1:eac0369: 					(sd.equals(cd.getSchemaDescriptor())))
1:eac0369: 				{
1:eac0369: 					retCD = cd;
1:eac0369: 					break;
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return retCD;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the ConstraintDescriptor with the matching constraint name.
1:eac0369: 	 *
1:eac0369: 	 * @return The matching ConstraintDescriptor.
1:eac0369: 	 */
1:eac0369: 	public ReferencedKeyConstraintDescriptor getPrimaryKey()
1:eac0369: 	{
1:eac0369: 		int size = size();
1:eac0369: 
1:eac0369: 		for (int index = 0; index < size; index++)
1:eac0369: 		{
1:eac0369: 			ConstraintDescriptor cd = elementAt(index);
1:eac0369: 
1:eac0369: 			if (cd.getConstraintType() == DataDictionary.PRIMARYKEY_CONSTRAINT)	
1:eac0369: 			{
1:eac0369: 				return (ReferencedKeyConstraintDescriptor)cd;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return (ReferencedKeyConstraintDescriptor)null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:09bee7d:      * Return a list of constraints where enforced is
1:eac0369: 	 * as passed in.
1:eac0369: 	 *
1:09bee7d:      * @param enforced true or false
1:eac0369: 	 *
1:eac0369: 	 * @return a constraint descriptor list built from this.  Always
1:eac0369: 	 * a new list even if all the elements in this were of the correct
1:eac0369: 	 * type (i.e. not optimized for the case where every element is
1:eac0369: 	 * desired).
1:eac0369: 	 */
1:09bee7d:     public ConstraintDescriptorList getConstraintDescriptorList(boolean enforced)
1:eac0369: 	{
1:eac0369: 		ConstraintDescriptorList cdl = new ConstraintDescriptorList();
1:eac0369: 		int size = size();
1:eac0369: 
1:eac0369: 		for (int index = 0; index < size; index++)
1:eac0369: 		{
1:eac0369: 			ConstraintDescriptor cd = elementAt(index);
1:eac0369: 
1:09bee7d:             if (cd.enforced() == enforced)
1:eac0369: 			{
1:eac0369: 				cdl.add(cd);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return cdl;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the nth (0-based) element in the list.
1:eac0369: 	 *
1:eac0369: 	 * @param n	Which element to return.
1:eac0369: 	 *
1:eac0369: 	 * @return The nth element in the list.
1:eac0369: 	 */
1:eac0369: 	public ConstraintDescriptor elementAt(int n)
1:eac0369: 	{
1:f2fad75: 		return get(n);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return a ConstraintDescriptorList containing the ConstraintDescriptors
1:eac0369: 	 * of the specified type that are in this list.
1:eac0369: 	 *
1:eac0369: 	 * @param type	The constraint type.
1:eac0369: 	 *
1:eac0369: 	 * @return A ConstraintDescriptorList containing the ConstraintDescriptors
1:eac0369: 	 * of the specified type that are in this list.
1:eac0369: 	 */
1:eac0369: 	public ConstraintDescriptorList getSubList(int type)
1:eac0369: 	{
1:eac0369: 		ConstraintDescriptorList cdl = new ConstraintDescriptorList();
1:eac0369: 		int size = size();
1:eac0369: 
1:eac0369: 		for (int index = 0; index < size; index++)
1:eac0369: 		{
1:801cf0d:             ConstraintDescriptor cd = elementAt(index);
1:eac0369: 
1:eac0369: 			if (cd.getConstraintType() == type)
1:eac0369: 			{
1:eac0369: 				cdl.add(cd);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return cdl;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:09bee7d
/////////////////////////////////////////////////////////////////////////
1:      * Return a list of constraints where enforced is
1:      * @param enforced true or false
1:     public ConstraintDescriptorList getConstraintDescriptorList(boolean enforced)
/////////////////////////////////////////////////////////////////////////
1:             if (cd.enforced() == enforced)
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
/////////////////////////////////////////////////////////////////////////
1:             ConstraintDescriptor cd = elementAt(index);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f2fad75
/////////////////////////////////////////////////////////////////////////
1: public class ConstraintDescriptorList extends ArrayList<ConstraintDescriptor>
/////////////////////////////////////////////////////////////////////////
1: 		return get(n);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.catalog.UUID;
1: 
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.catalog.UUID;
1: 
1: import java.util.ArrayList;
1: 
0: public class ConstraintDescriptorList extends ArrayList
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private boolean scanned;
1: 
1: 	/**
1: 	 * Mark whether or not the underlying system table has
1: 	 * been scanned.  (If a table does not have any
1: 	 * constraints then the size of its CDL will always
1: 	 * be 0.  We used these get/set methods to determine
1: 	 * when we need to scan the table.
1: 	 *
1: 	 * @param scanned	Whether or not the underlying system table has been scanned.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void setScanned(boolean scanned)
1: 	{
1: 		this.scanned = scanned;
1: 	}
1: 
1: 	/**
1: 	 * Return whether or not the underlying system table has been scanned.
1: 	 *
1: 	 * @return		Where or not the underlying system table has been scanned.
1: 	 */
1: 	public boolean getScanned()
1: 	{
1: 		return scanned;
1: 	}
1: 
1: 	/**
1: 	 * Get the ConstraintDescriptor with the matching UUID String for the backing index.
1: 	 *
1: 	 * @param indexUUID		The UUID  for the backing index.
1: 	 *
1: 	 * @return The matching ConstraintDescriptor.
1: 	 */
1: 	public ConstraintDescriptor getConstraintDescriptor(UUID indexUUID)
1: 	{
1: 		ConstraintDescriptor retCD = null;
1: 		int size = size();
1: 
1: 		for (int index = 0; index < size; index++)
1: 		{
1: 			ConstraintDescriptor cd = elementAt(index);
1: 
1: 			if (! (cd instanceof KeyConstraintDescriptor))
1: 			{
1: 				continue;
1: 			}
1: 
1: 			KeyConstraintDescriptor keyCD = (KeyConstraintDescriptor) cd;
1: 
1: 			if (keyCD.getIndexId().equals(indexUUID))
1: 			{
1: 				retCD = cd;
1: 				break;
1: 			}
1: 		}
1: 		return retCD;
1: 	}
1: 
1: 	/**
1: 	 * Get the ConstraintDescriptor with the matching constraint id.
1: 	 *
1: 	 * @param uuid		The constraint id.
1: 	 *
1: 	 * @return The matching ConstraintDescriptor.
1: 	 */
1: 	public ConstraintDescriptor getConstraintDescriptorById(UUID uuid)
1: 	{
1: 		ConstraintDescriptor returnCD = null;
1: 		int size = size();
1: 
1: 		for (int index = 0; index < size; index++)
1: 		{
1: 			ConstraintDescriptor cd = elementAt(index);
1: 
1: 			if (cd.getUUID().equals(uuid))
1: 			{
1: 				returnCD = cd;
1: 				break;
1: 			}
1: 		}
1: 		return returnCD;
1: 	}
1: 
1: 	/**
1: 	  *	Drop the constraint with the given UUID.
1: 	  *
1: 	  * @param uuid		The constraint id.
1: 	  *
1: 	  * @return The matching ConstraintDescriptor.
1: 	  */
1: 	public ConstraintDescriptor dropConstraintDescriptorById(UUID uuid)
1: 	{
1: 		ConstraintDescriptor cd = null;
1: 		int size = size();
1: 
1: 		for (int index = 0; index < size; index++)
1: 		{
1: 			cd = elementAt(index);
1: 
1: 			if (cd.getUUID().equals(uuid))
1: 			{
1: 				remove( cd );
1: 				break;
1: 			}
1: 		}
1: 
1: 		return cd;
1: 	}
1: 
1: 
1: 
1: 	/**
1: 	 * Get the ConstraintDescriptor with the matching constraint name.
1: 	 *
1: 	 * @param sd		The constraint schema descriptor.
1: 	 * @param name		The constraint name.
1: 	 *
1: 	 * @return The matching ConstraintDescriptor.
1: 	 */
1: 	public ConstraintDescriptor getConstraintDescriptorByName(SchemaDescriptor sd,
1: 																String name)
1: 	{
1: 		ConstraintDescriptor retCD = null;
1: 		int size = size();
1: 
1: 		for (int index = 0; index < size; index++)
1: 		{
1: 			ConstraintDescriptor cd = elementAt(index);
1: 
1: 			if (cd.getConstraintName().equals(name))
1: 			{
1: 				if ((sd == null) ||
1: 					(sd.equals(cd.getSchemaDescriptor())))
1: 				{
1: 					retCD = cd;
1: 					break;
1: 				}
1: 			}
1: 		}
1: 		return retCD;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Get the ConstraintDescriptor with the matching constraint name.
1: 	 *
1: 	 * @param sd		The constraint schema descriptor.
1: 	 * @param name		The constraint name.
1: 	 *
1: 	 * @return The matching ConstraintDescriptor.
1: 	 */
1: 	public ReferencedKeyConstraintDescriptor getPrimaryKey()
1: 	{
1: 		int size = size();
1: 
1: 		for (int index = 0; index < size; index++)
1: 		{
1: 			ConstraintDescriptor cd = elementAt(index);
1: 
1: 			if (cd.getConstraintType() == DataDictionary.PRIMARYKEY_CONSTRAINT)	
1: 			{
1: 				return (ReferencedKeyConstraintDescriptor)cd;
1: 			}
1: 		}
1: 		return (ReferencedKeyConstraintDescriptor)null;
1: 	}
1: 
1: 	/**
0: 	 * Return a list of constraints where enabled is
1: 	 * as passed in.
1: 	 *
0: 	 * @param enabled true or false
1: 	 *
1: 	 * @return a constraint descriptor list built from this.  Always
1: 	 * a new list even if all the elements in this were of the correct
1: 	 * type (i.e. not optimized for the case where every element is
1: 	 * desired).
1: 	 */
0: 	public ConstraintDescriptorList getConstraintDescriptorList(boolean enabled)
1: 	{
1: 		ConstraintDescriptorList cdl = new ConstraintDescriptorList();
1: 		int size = size();
1: 
1: 		for (int index = 0; index < size; index++)
1: 		{
1: 			ConstraintDescriptor cd = elementAt(index);
1: 
0: 			if (cd.isEnabled() == enabled)
1: 			{
1: 				cdl.add(cd);
1: 			}
1: 		}
1: 		return cdl;
1: 	}
1: 
1: 	/**
1: 	 * Return the nth (0-based) element in the list.
1: 	 *
1: 	 * @param n	Which element to return.
1: 	 *
1: 	 * @return The nth element in the list.
1: 	 */
1: 	public ConstraintDescriptor elementAt(int n)
1: 	{
0: 		return (ConstraintDescriptor) get(n);
1: 	}
1: 
1: 	/**
1: 	 * Return a ConstraintDescriptorList containing the ConstraintDescriptors
1: 	 * of the specified type that are in this list.
1: 	 *
1: 	 * @param type	The constraint type.
1: 	 *
1: 	 * @return A ConstraintDescriptorList containing the ConstraintDescriptors
1: 	 * of the specified type that are in this list.
1: 	 */
1: 	public ConstraintDescriptorList getSubList(int type)
1: 	{
1: 		ConstraintDescriptor cd = null;
1: 		ConstraintDescriptorList cdl = new ConstraintDescriptorList();
1: 		int size = size();
1: 
1: 		for (int index = 0; index < size; index++)
1: 		{
1: 			cd = elementAt(index);
1: 
1: 			if (cd.getConstraintType() == type)
1: 			{
1: 				cdl.add(cd);
1: 			}
1: 		}
1: 		return cdl;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.util.ArrayList;
0: 
0: public class ConstraintDescriptorList extends ArrayList
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private boolean scanned;
0: 
0: 	/**
0: 	 * Mark whether or not the underlying system table has
0: 	 * been scanned.  (If a table does not have any
0: 	 * constraints then the size of its CDL will always
0: 	 * be 0.  We used these get/set methods to determine
0: 	 * when we need to scan the table.
0: 	 *
0: 	 * @param scanned	Whether or not the underlying system table has been scanned.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setScanned(boolean scanned)
0: 	{
0: 		this.scanned = scanned;
0: 	}
0: 
0: 	/**
0: 	 * Return whether or not the underlying system table has been scanned.
0: 	 *
0: 	 * @return		Where or not the underlying system table has been scanned.
0: 	 */
0: 	public boolean getScanned()
0: 	{
0: 		return scanned;
0: 	}
0: 
0: 	/**
0: 	 * Get the ConstraintDescriptor with the matching UUID String for the backing index.
0: 	 *
0: 	 * @param indexUUID		The UUID  for the backing index.
0: 	 *
0: 	 * @return The matching ConstraintDescriptor.
0: 	 */
0: 	public ConstraintDescriptor getConstraintDescriptor(UUID indexUUID)
0: 	{
0: 		ConstraintDescriptor retCD = null;
0: 		int size = size();
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			ConstraintDescriptor cd = elementAt(index);
0: 
0: 			if (! (cd instanceof KeyConstraintDescriptor))
0: 			{
0: 				continue;
0: 			}
0: 
0: 			KeyConstraintDescriptor keyCD = (KeyConstraintDescriptor) cd;
0: 
0: 			if (keyCD.getIndexId().equals(indexUUID))
0: 			{
0: 				retCD = cd;
0: 				break;
0: 			}
0: 		}
0: 		return retCD;
0: 	}
0: 
0: 	/**
0: 	 * Get the ConstraintDescriptor with the matching constraint id.
0: 	 *
0: 	 * @param uuid		The constraint id.
0: 	 *
0: 	 * @return The matching ConstraintDescriptor.
0: 	 */
0: 	public ConstraintDescriptor getConstraintDescriptorById(UUID uuid)
0: 	{
0: 		ConstraintDescriptor returnCD = null;
0: 		int size = size();
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			ConstraintDescriptor cd = elementAt(index);
0: 
0: 			if (cd.getUUID().equals(uuid))
0: 			{
0: 				returnCD = cd;
0: 				break;
0: 			}
0: 		}
0: 		return returnCD;
0: 	}
0: 
0: 	/**
0: 	  *	Drop the constraint with the given UUID.
0: 	  *
0: 	  * @param uuid		The constraint id.
0: 	  *
0: 	  * @return The matching ConstraintDescriptor.
0: 	  */
0: 	public ConstraintDescriptor dropConstraintDescriptorById(UUID uuid)
0: 	{
0: 		ConstraintDescriptor cd = null;
0: 		int size = size();
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			cd = elementAt(index);
0: 
0: 			if (cd.getUUID().equals(uuid))
0: 			{
0: 				remove( cd );
0: 				break;
0: 			}
0: 		}
0: 
0: 		return cd;
0: 	}
0: 
0: 
0: 
0: 	/**
0: 	 * Get the ConstraintDescriptor with the matching constraint name.
0: 	 *
0: 	 * @param sd		The constraint schema descriptor.
0: 	 * @param name		The constraint name.
0: 	 *
0: 	 * @return The matching ConstraintDescriptor.
0: 	 */
0: 	public ConstraintDescriptor getConstraintDescriptorByName(SchemaDescriptor sd,
0: 																String name)
0: 	{
0: 		ConstraintDescriptor retCD = null;
0: 		int size = size();
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			ConstraintDescriptor cd = elementAt(index);
0: 
0: 			if (cd.getConstraintName().equals(name))
0: 			{
0: 				if ((sd == null) ||
0: 					(sd.equals(cd.getSchemaDescriptor())))
0: 				{
0: 					retCD = cd;
0: 					break;
0: 				}
0: 			}
0: 		}
0: 		return retCD;
0: 	}
0: 
0: 
0: 	/**
0: 	 * Get the ConstraintDescriptor with the matching constraint name.
0: 	 *
0: 	 * @param sd		The constraint schema descriptor.
0: 	 * @param name		The constraint name.
0: 	 *
0: 	 * @return The matching ConstraintDescriptor.
0: 	 */
0: 	public ReferencedKeyConstraintDescriptor getPrimaryKey()
0: 	{
0: 		int size = size();
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			ConstraintDescriptor cd = elementAt(index);
0: 
0: 			if (cd.getConstraintType() == DataDictionary.PRIMARYKEY_CONSTRAINT)	
0: 			{
0: 				return (ReferencedKeyConstraintDescriptor)cd;
0: 			}
0: 		}
0: 		return (ReferencedKeyConstraintDescriptor)null;
0: 	}
0: 
0: 	/**
0: 	 * Return a list of constraints where enabled is
0: 	 * as passed in.
0: 	 *
0: 	 * @param enabled true or false
0: 	 *
0: 	 * @return a constraint descriptor list built from this.  Always
0: 	 * a new list even if all the elements in this were of the correct
0: 	 * type (i.e. not optimized for the case where every element is
0: 	 * desired).
0: 	 */
0: 	public ConstraintDescriptorList getConstraintDescriptorList(boolean enabled)
0: 	{
0: 		ConstraintDescriptorList cdl = new ConstraintDescriptorList();
0: 		int size = size();
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			ConstraintDescriptor cd = elementAt(index);
0: 
0: 			if (cd.isEnabled() == enabled)
0: 			{
0: 				cdl.add(cd);
0: 			}
0: 		}
0: 		return cdl;
0: 	}
0: 
0: 	/**
0: 	 * Return the nth (0-based) element in the list.
0: 	 *
0: 	 * @param n	Which element to return.
0: 	 *
0: 	 * @return The nth element in the list.
0: 	 */
0: 	public ConstraintDescriptor elementAt(int n)
0: 	{
0: 		return (ConstraintDescriptor) get(n);
0: 	}
0: 
0: 	/**
0: 	 * Return a ConstraintDescriptorList containing the ConstraintDescriptors
0: 	 * of the specified type that are in this list.
0: 	 *
0: 	 * @param type	The constraint type.
0: 	 *
0: 	 * @return A ConstraintDescriptorList containing the ConstraintDescriptors
0: 	 * of the specified type that are in this list.
0: 	 */
0: 	public ConstraintDescriptorList getSubList(int type)
0: 	{
0: 		ConstraintDescriptor cd = null;
0: 		ConstraintDescriptorList cdl = new ConstraintDescriptorList();
0: 		int size = size();
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			cd = elementAt(index);
0: 
0: 			if (cd.getConstraintType() == type)
0: 			{
0: 				cdl.add(cd);
0: 			}
0: 		}
0: 		return cdl;
0: 	}
0: }
============================================================================