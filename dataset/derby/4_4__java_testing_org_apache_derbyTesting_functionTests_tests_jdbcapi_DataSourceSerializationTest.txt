1:efa5857: /*
1:efa5857: 
1:efa5857:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest
1:efa5857: 
1:efa5857:    Licensed to the Apache Software Foundation (ASF) under one or more
1:efa5857:    contributor license agreements.  See the NOTICE file distributed with
1:efa5857:    this work for additional information regarding copyright ownership.
1:efa5857:    The ASF licenses this file to You under the Apache License, Version 2.0
1:efa5857:    (the "License"); you may not use this file except in compliance with
1:efa5857:    the License.  You may obtain a copy of the License at
1:efa5857: 
1:efa5857:       http://www.apache.org/licenses/LICENSE-2.0
1:efa5857: 
1:efa5857:    Unless required by applicable law or agreed to in writing, software
1:efa5857:    distributed under the License is distributed on an "AS IS" BASIS,
1:efa5857:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:efa5857:    See the License for the specific language governing permissions and
1:efa5857:    limitations under the License.
1:efa5857: 
1:efa5857:  */
1:efa5857: 
1:efa5857: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:efa5857: 
1:efa5857: import java.io.FileInputStream;
1:efa5857: import java.io.FileNotFoundException;
1:8f89c09: import java.io.IOException;
1:efa5857: import java.io.InputStream;
1:efa5857: import java.io.ObjectInputStream;
1:c35e4f0: import java.lang.reflect.Method;
1:efa5857: import java.security.AccessController;
1:efa5857: import java.security.PrivilegedActionException;
1:efa5857: import java.security.PrivilegedExceptionAction;
1:efa5857: import javax.sql.DataSource;
1:efa5857: import junit.framework.Test;
1:efa5857: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:efa5857: import org.apache.derbyTesting.junit.Derby;
1:c35e4f0: import org.apache.derbyTesting.junit.JDBC;
1:efa5857: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:efa5857: 
1:efa5857: /**
1:efa5857:  * Makes sure that old serialized data sources can be de-serialized with the
1:c35e4f0:  * current version of the data source.
1:efa5857:  * <p>
1:efa5857:  * Serialized data source from old versions are expected to be found in
1:7cdf43a:  * <tt>testData/serializedDataSources</tt>, with the following filename
1:efa5857:  * format CLASSNAME-VERSION.ser, where CLASSNAME is the unqualified name of the
1:efa5857:  * data source class, and VERSION is the Derby version. An example:
1:efa5857:  * <tt>ClientPooledConnectionDataSource-10_1.ser</tt>
1:efa5857:  * <p>
1:efa5857:  * A separation between JDBC 4.0 specific classes and the other classes is not
1:c35e4f0:  * made before release 10.10.
1:efa5857:  * <p>
1:efa5857:  * This test should detect the typical incompatible changes in the current
1:efa5857:  * data source implementations, for instance deleting a field or changing its
1:efa5857:  * type.
1:efa5857:  */
1:efa5857: public class DataSourceSerializationTest
1:efa5857:         extends BaseJDBCTestCase {
1:efa5857: 
1:efa5857:     /** Constant for Derby version 10.0.2.1. */
1:efa5857:     private static final String VERSION_10_0_2_1 = "10_0_2_1";
1:efa5857:     /** Constant for Derby version 10.1.3.1. */
1:efa5857:     private static final String VERSION_10_1_3_1 = "10_1_3_1";
1:efa5857:     /** Constant for Derby version 10.2.2.0 */
1:efa5857:     private static final String VERSION_10_2_2_0 = "10_2_2_0";
1:efa5857:     /** Constant for Derby version 10.3.2.1. */
1:efa5857:     private static final String VERSION_10_3_2_1 = "10_3_2_1";
1:c35e4f0:     /** Constant for Derby version 10.10.1.0. */
1:c35e4f0:     private static final String VERSION_10_10_1_0 = "10_10_1_0";
1:7863d83:     /** Constant for Derby version 10.11.1.0. */
1:7863d83:     private static final String VERSION_10_11_1_0 = "10_11_1_0";
1:c35e4f0:     private final String _40Suffix = "40";
1:efa5857: 
1:efa5857:     public DataSourceSerializationTest(String name) {
1:efa5857:         super(name);
1:efa5857:     }
1:efa5857: 
1:efa5857:     /**
1:efa5857:      * Tests the de-serialization of the basic embedded data source.
1:efa5857:      *
1:efa5857:      * @throws Exception for a number of error conditions
1:efa5857:      */
1:efa5857:     public void serTestEmbeddedDataSource()
1:efa5857:             throws Exception {
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:c35e4f0:             final String EMBEDDED_CLASS = "EmbeddedDataSource";
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:c35e4f0:         }
1:c35e4f0:         
1:38667d9:         final String EMBEDDED_CLASS = "BasicEmbeddedDataSource40";
1:c35e4f0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, false);
1:c35e4f0:         
1:efa5857:     }
1:efa5857: 
1:efa5857:     /**
1:efa5857:      * Tests the de-serialization of the embedded connection pool data source.
1:efa5857:      *
1:efa5857:      * @throws Exception for a number of error conditions
1:efa5857:      */
1:efa5857:     public void serTestEmbeddedConnectionPoolDataSource()
1:efa5857:             throws Exception {
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:c35e4f0:             final String EMBEDDED_CLASS = "EmbeddedConnectionPoolDataSource";
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:c35e4f0:         }
1:c35e4f0: 
1:c35e4f0:         final String EMBEDDED_CLASS =
1:38667d9:                 "BasicEmbeddedConnectionPoolDataSource40";
1:c35e4f0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, false);
1:efa5857:     }
1:efa5857: 
1:efa5857:     /**
1:efa5857:      * Tests the de-serialization of the embedded XA data source.
1:efa5857:      *
1:efa5857:      * @throws Exception for a number of error conditions
1:efa5857:      */
1:efa5857:     public void serTestEmbeddedXADataSource()
1:efa5857:             throws Exception {
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:c35e4f0:             final String EMBEDDED_CLASS = "EmbeddedXADataSource";
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, true);
1:c35e4f0:             deSerializeDs(EMBEDDED_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:c35e4f0:         }
1:c35e4f0:         
1:38667d9:         final String EMBEDDED_CLASS = "BasicEmbeddedXADataSource40";
1:c35e4f0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, false);
1:efa5857:     }
1:efa5857: 
1:efa5857:     /**
1:efa5857:      * Tests the de-serialization of the basic client data source.
1:efa5857:      *
1:efa5857:      * @throws Exception for a number of error conditions
1:efa5857:      */
1:efa5857:     public void serTestClientDataSource()
1:efa5857:             throws Exception {
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:c35e4f0:             final String CLIENT_CLASS = "ClientDataSource";
1:c35e4f0:             // No client driver for Derby 10.0
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:c35e4f0:         }
1:c35e4f0:         
1:38667d9:         final String CLIENT_CLASS = "BasicClientDataSource40";
1:c35e4f0:         deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, false);
1:efa5857:     }
1:efa5857: 
1:efa5857:     /**
1:efa5857:      * Tests the de-serialization of the client connection pool data source.
1:efa5857:      *
1:efa5857:      * @throws Exception for a number of error conditions
1:efa5857:      */
1:efa5857:     public void serTestClientConnectionPoolDataSource()
1:efa5857:             throws Exception {
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:c35e4f0:             final String CLIENT_CLASS = "ClientConnectionPoolDataSource";
1:c35e4f0:             // No client driver for Derby 10.0
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:c35e4f0:         }
1:c35e4f0:          
1:38667d9:         final String CLIENT_CLASS = "BasicClientConnectionPoolDataSource40";
1:c35e4f0:         deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, false);
1:efa5857:     }
1:efa5857: 
1:efa5857:     /**
1:efa5857:      * Tests the de-serialization of the client XA data source.
1:efa5857:      *
1:efa5857:      * @throws Exception for a number of error conditions
1:efa5857:      */
1:efa5857:     public void serTestClientXADataSource()
1:efa5857:             throws Exception {
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:c35e4f0:             final String CLIENT_CLASS = "ClientXADataSource";
1:c35e4f0:             // No client driver for Derby 10.0
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, true);
1:c35e4f0:             deSerializeDs(CLIENT_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:c35e4f0:         }
1:c35e4f0:          
1:38667d9:         final String CLIENT_CLASS = "BasicClientXADataSource40";
1:c35e4f0:         deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, false);
1:efa5857:     }
1:efa5857: 
1:efa5857:     /**
1:efa5857:      * Attempts to de-serialize a data source object from a file.
1:efa5857:      * <p>
1:efa5857:      * <ol> <li>Derby version string - UTF</li>
1:efa5857:      *      <li>Derby build number - UTF</li>
1:efa5857:      *      <li>Derby data source - object</li>
1:efa5857:      *      <li>Derby data source reference - object</li>
1:efa5857:      * </ol>
1:efa5857:      * <p>
1:efa5857:      * If the object is successfully instantiated and cast to
1:0746b5a:      * {@link javax.sql.DataSource}
1:efa5857:      *
1:efa5857:      * @param className name of the class to de-serialize
1:efa5857:      * @param version Derby version
1:efa5857:      *
1:efa5857:      * @throws Exception on a number of error conditions
1:efa5857:      */
1:c35e4f0:     private void deSerializeDs(
1:c35e4f0:             String className, String version, boolean dsHasJNDI)
1:efa5857:             throws Exception {
1:c35e4f0: 
1:c35e4f0:         if (!JDBC.vmSupportsJDBC4() && className.contains("40")) {
1:c35e4f0:             // Running old Java, bail out if JDBC4
1:c35e4f0:             return;
1:c35e4f0:         }
1:c35e4f0: 
1:efa5857:         // Construct the filename
1:efa5857:         final StringBuffer fname = new StringBuffer(className);
1:efa5857:         fname.append('-');
1:efa5857:         fname.append(version);
1:efa5857:         fname.append(".ser");
1:eec86ed:         println( "Deserializing " + fname.toString() );
1:efa5857: 
1:efa5857:         // De-serialize the data source.
1:efa5857:         InputStream is;
1:efa5857:         try {
1:e18f54b:             is = AccessController.doPrivileged(
1:e18f54b:                   new PrivilegedExceptionAction<InputStream>() {
1:e18f54b:                 public InputStream run() throws FileNotFoundException {
1:efa5857:                     return new FileInputStream(
1:efa5857:                             SupportFilesSetup.getReadOnly(fname.toString()));
1:efa5857:                 }
1:efa5857:             });
1:efa5857:             } catch (PrivilegedActionException e) {
1:efa5857:                 // e.getException() should be a FileNotFoundException.
1:efa5857:                 throw (FileNotFoundException)e.getException();
1:efa5857:             }
1:efa5857: 
1:8f89c09:         assertNotNull("FileInputStream is null", is);
1:8f89c09:         Object dsObj = null;
1:8f89c09:         DataSource ds = null;
1:c35e4f0:         Object dsRef = null;
1:8f89c09:         // Used to preserve original error information in case of exception when 
1:8f89c09:         // closing the input stream.
1:8f89c09:         boolean testSequencePassed = false;
1:8f89c09:         try {
1:8f89c09:             ObjectInputStream ois = new ObjectInputStream(is);
1:8f89c09:             String buildVersion = ois.readUTF();
1:8f89c09:             String buildNumber = ois.readUTF();
1:8f89c09:             println("Data source " + className + ", version " +
1:8f89c09:                     buildVersion + ", build " + buildNumber);
1:8f89c09:             dsObj = ois.readObject();
1:8f89c09:             assertNotNull("De-serialized data source is null", dsObj);
1:8f89c09:             assertTrue("Unexpected class instantiated: " +
1:8f89c09:                     dsObj.getClass().getName(),
1:8f89c09:                     dsObj.getClass().getName().indexOf(className) > 0);
1:8f89c09:             ds = (DataSource)dsObj;
1:8f89c09:             // Just see if the object is usable.
1:8f89c09:             int newTimeout = ds.getLoginTimeout() +9;
1:8f89c09:             assertFalse(ds.getLoginTimeout() == newTimeout);
1:8f89c09:             ds.setLoginTimeout(newTimeout);
1:8f89c09:             assertEquals(newTimeout, ds.getLoginTimeout());
1:efa5857: 
1:c35e4f0:             if (dsHasJNDI) {
1:c35e4f0:                 // Recreate the data source using reference.
1:c35e4f0:                 dsRef = ois.readObject();
1:c35e4f0:             }
1:8f89c09:             ois.close();
1:8f89c09:             testSequencePassed = true;
1:8f89c09:         } finally {
1:8f89c09:             if (testSequencePassed) {
1:8f89c09:                 is.close();
1:8f89c09:             } else {
1:8f89c09:                 try {
1:8f89c09:                     is.close();
1:8f89c09:                 } catch (IOException ioe) {
1:8f89c09:                     // Ignore this to preserve the original exception.
1:8f89c09:                 }
1:8f89c09:             }
1:8f89c09:         }
1:8f89c09: 
1:c35e4f0:         if (dsHasJNDI) {
1:c35e4f0:             // Recreate ds via the Reference's factory class.  We use
1:c35e4f0:             // reflection here to make the test runnable for non JNDI
1:c35e4f0:             // environments. (Even though this code would not be executed in
1:c35e4f0:             // that environment, the VM will try to load the classes if
1:c35e4f0:             // reference directly in the source. So, resort to reflection...)
1:c35e4f0:             Method getFactoryClassName =
1:c35e4f0:                     Class.forName("javax.naming.Reference").getMethod(
1:c35e4f0:                     "getFactoryClassName", null);
1:c35e4f0:             String factoryClassName =
1:c35e4f0:                     (String)getFactoryClassName.invoke(dsRef, null);
1:4469400:             Class<?> clazz = Class.forName(factoryClassName);
1:4469400:             Object factory = clazz.getConstructor().newInstance();
1:c35e4f0:             Method getObjectInstance =
1:c35e4f0:                     factory.getClass().getMethod("getObjectInstance",
1:c35e4f0:                     new Class[] {
1:c35e4f0:                         Class.forName("java.lang.Object"),
1:c35e4f0:                         Class.forName("javax.naming.Name"),
1:c35e4f0:                         Class.forName("javax.naming.Context"),
1:c35e4f0:                         Class.forName( "java.util.Hashtable")});
1:c35e4f0:             Object recreatedDs =
1:c35e4f0:                     getObjectInstance.invoke(
1:c35e4f0:                     factory, new Object[] {dsRef, null, null, null});
1:c35e4f0:             ds = (DataSource)recreatedDs;
1:c35e4f0:             assertTrue("Unexpected class instantiated by Reference: " +
1:c35e4f0:                     dsObj.getClass().getName(),
1:c35e4f0:                     dsObj.getClass().getName().indexOf(className) > 0);
1:c35e4f0:         }
1:efa5857:     }
1:efa5857: 
1:efa5857:     /**
1:efa5857:      * Returns an appropariate suite of tests to run.
1:efa5857:      *
1:efa5857:      * @return A test suite.
1:efa5857:      */
1:efa5857:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("DataSourceSerializationTest");
1:1ae02c9: 
1:7cdf43a:         String filePrefix = "functionTests/testData/serializedDataSources/";
1:efa5857:         // De-serialize embedded data sources only if we have the engine code.
1:efa5857:         if (Derby.hasEmbedded()) {
1:efa5857:             suite.addTest(new DataSourceSerializationTest(
1:efa5857:                     "serTestEmbeddedDataSource"));
1:efa5857:             suite.addTest(new DataSourceSerializationTest(
1:efa5857:                     "serTestEmbeddedConnectionPoolDataSource"));
1:efa5857:             suite.addTest(new DataSourceSerializationTest(
1:efa5857:                     "serTestEmbeddedXADataSource"));
1:efa5857:         }
1:efa5857: 
1:efa5857:         // De-serialize client data sources only if we have the client code.
1:efa5857:         if (Derby.hasClient()) {
1:efa5857:             suite.addTest(new DataSourceSerializationTest(
1:efa5857:                     "serTestClientDataSource"));
1:efa5857:             suite.addTest(new DataSourceSerializationTest(
1:efa5857:                     "serTestClientConnectionPoolDataSource"));
1:efa5857:             suite.addTest(new DataSourceSerializationTest(
1:efa5857:                     "serTestClientXADataSource"));
1:efa5857:         }
1:efa5857: 
1:efa5857:         return new SupportFilesSetup(suite, new String[] {
1:efa5857:                 // 10.0 resources
1:efa5857:                 filePrefix + "EmbeddedDataSource-10_0_2_1.ser",
1:efa5857:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_0_2_1.ser",
1:efa5857:                 filePrefix + "EmbeddedXADataSource-10_0_2_1.ser",
1:efa5857: 
1:efa5857:                 // 10.1 resources
1:efa5857:                 filePrefix + "EmbeddedDataSource-10_1_3_1.ser",
1:efa5857:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_1_3_1.ser",
1:efa5857:                 filePrefix + "EmbeddedXADataSource-10_1_3_1.ser",
1:efa5857:                 filePrefix + "ClientDataSource-10_1_3_1.ser",
1:efa5857:                 filePrefix + "ClientConnectionPoolDataSource-10_1_3_1.ser",
1:efa5857:                 filePrefix + "ClientXADataSource-10_1_3_1.ser",
1:efa5857: 
1:efa5857:                 // 10.2 resources
1:efa5857:                 filePrefix + "EmbeddedDataSource-10_2_2_0.ser",
1:efa5857:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_2_2_0.ser",
1:efa5857:                 filePrefix + "EmbeddedXADataSource-10_2_2_0.ser",
1:efa5857:                 filePrefix + "ClientDataSource-10_2_2_0.ser",
1:efa5857:                 filePrefix + "ClientConnectionPoolDataSource-10_2_2_0.ser",
1:efa5857:                 filePrefix + "ClientXADataSource-10_2_2_0.ser",
1:efa5857: 
1:efa5857:                 // 10.3 resources
1:efa5857:                 filePrefix + "EmbeddedDataSource-10_3_2_1.ser",
1:efa5857:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_3_2_1.ser",
1:efa5857:                 filePrefix + "EmbeddedXADataSource-10_3_2_1.ser",
1:efa5857:                 filePrefix + "ClientDataSource-10_3_2_1.ser",
1:efa5857:                 filePrefix + "ClientConnectionPoolDataSource-10_3_2_1.ser",
1:efa5857:                 filePrefix + "ClientXADataSource-10_3_2_1.ser",
1:c35e4f0: 
1:c35e4f0:                 // 10.10 resources
1:c35e4f0:                 filePrefix + "EmbeddedDataSource-10_10_1_0.ser",
1:c35e4f0:                 filePrefix + "EmbeddedDataSource40-10_10_1_0.ser",
1:c35e4f0:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_10_1_0.ser",
1:c35e4f0:                 filePrefix + "EmbeddedConnectionPoolDataSource40-10_10_1_0.ser",
1:c35e4f0:                 filePrefix + "EmbeddedXADataSource-10_10_1_0.ser",
1:c35e4f0:                 filePrefix + "EmbeddedXADataSource40-10_10_1_0.ser",
1:c35e4f0:                 filePrefix + "ClientDataSource-10_10_1_0.ser",
1:c35e4f0:                 filePrefix + "ClientDataSource40-10_10_1_0.ser",
1:c35e4f0:                 filePrefix + "ClientConnectionPoolDataSource-10_10_1_0.ser",
1:c35e4f0:                 filePrefix + "ClientConnectionPoolDataSource40-10_10_1_0.ser",
1:c35e4f0:                 filePrefix + "ClientXADataSource-10_10_1_0.ser",
1:c35e4f0:                 filePrefix + "ClientXADataSource40-10_10_1_0.ser",
1:38667d9:                 filePrefix + "BasicEmbeddedDataSource40-10_10_1_0.ser",
1:c35e4f0:                 filePrefix +
1:38667d9:                     "BasicEmbeddedConnectionPoolDataSource40-10_10_1_0.ser",
1:38667d9:                 filePrefix + "BasicEmbeddedXADataSource40-10_10_1_0.ser",
1:38667d9:                 filePrefix + "BasicClientDataSource40-10_10_1_0.ser",
1:c35e4f0:                 filePrefix +
1:38667d9:                     "BasicClientConnectionPoolDataSource40-10_10_1_0.ser",
1:38667d9:                 filePrefix + "BasicClientXADataSource40-10_10_1_0.ser",
1:7863d83: 
1:7863d83:                 // 10.11 resources
1:7863d83:                 filePrefix + "EmbeddedDataSource-10_11_1_0.ser",
1:7863d83:                 filePrefix + "EmbeddedDataSource40-10_11_1_0.ser",
1:7863d83:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_11_1_0.ser",
1:7863d83:                 filePrefix + "EmbeddedConnectionPoolDataSource40-10_11_1_0.ser",
1:7863d83:                 filePrefix + "EmbeddedXADataSource-10_11_1_0.ser",
1:7863d83:                 filePrefix + "EmbeddedXADataSource40-10_11_1_0.ser",
1:7863d83:                 filePrefix + "ClientDataSource-10_11_1_0.ser",
1:7863d83:                 filePrefix + "ClientDataSource40-10_11_1_0.ser",
1:7863d83:                 filePrefix + "ClientConnectionPoolDataSource-10_11_1_0.ser",
1:7863d83:                 filePrefix + "ClientConnectionPoolDataSource40-10_11_1_0.ser",
1:7863d83:                 filePrefix + "ClientXADataSource-10_11_1_0.ser",
1:7863d83:                 filePrefix + "ClientXADataSource40-10_11_1_0.ser",
1:7863d83:                 filePrefix + "BasicEmbeddedDataSource40-10_11_1_0.ser",
1:7863d83:                 filePrefix +
1:7863d83:                     "BasicEmbeddedConnectionPoolDataSource40-10_11_1_0.ser",
1:7863d83:                 filePrefix + "BasicEmbeddedXADataSource40-10_11_1_0.ser",
1:7863d83:                 filePrefix + "BasicClientDataSource40-10_11_1_0.ser",
1:7863d83:                 filePrefix +
1:7863d83:                     "BasicClientConnectionPoolDataSource40-10_11_1_0.ser",
1:7863d83:                 filePrefix + "BasicClientXADataSource40-10_11_1_0.ser",
1:efa5857:             });
1:efa5857:     }
1:efa5857: }
1:efa5857: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:             Class<?> clazz = Class.forName(factoryClassName);
1:             Object factory = clazz.getConstructor().newInstance();
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
1:         println( "Deserializing " + fname.toString() );
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("DataSourceSerializationTest");
1: 
commit:7863d83
/////////////////////////////////////////////////////////////////////////
1:     /** Constant for Derby version 10.11.1.0. */
1:     private static final String VERSION_10_11_1_0 = "10_11_1_0";
/////////////////////////////////////////////////////////////////////////
1: 
1:                 // 10.11 resources
1:                 filePrefix + "EmbeddedDataSource-10_11_1_0.ser",
1:                 filePrefix + "EmbeddedDataSource40-10_11_1_0.ser",
1:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_11_1_0.ser",
1:                 filePrefix + "EmbeddedConnectionPoolDataSource40-10_11_1_0.ser",
1:                 filePrefix + "EmbeddedXADataSource-10_11_1_0.ser",
1:                 filePrefix + "EmbeddedXADataSource40-10_11_1_0.ser",
1:                 filePrefix + "ClientDataSource-10_11_1_0.ser",
1:                 filePrefix + "ClientDataSource40-10_11_1_0.ser",
1:                 filePrefix + "ClientConnectionPoolDataSource-10_11_1_0.ser",
1:                 filePrefix + "ClientConnectionPoolDataSource40-10_11_1_0.ser",
1:                 filePrefix + "ClientXADataSource-10_11_1_0.ser",
1:                 filePrefix + "ClientXADataSource40-10_11_1_0.ser",
1:                 filePrefix + "BasicEmbeddedDataSource40-10_11_1_0.ser",
1:                 filePrefix +
1:                     "BasicEmbeddedConnectionPoolDataSource40-10_11_1_0.ser",
1:                 filePrefix + "BasicEmbeddedXADataSource40-10_11_1_0.ser",
1:                 filePrefix + "BasicClientDataSource40-10_11_1_0.ser",
1:                 filePrefix +
1:                     "BasicClientConnectionPoolDataSource40-10_11_1_0.ser",
1:                 filePrefix + "BasicClientXADataSource40-10_11_1_0.ser",
commit:38667d9
/////////////////////////////////////////////////////////////////////////
1:         final String EMBEDDED_CLASS = "BasicEmbeddedDataSource40";
/////////////////////////////////////////////////////////////////////////
1:                 "BasicEmbeddedConnectionPoolDataSource40";
/////////////////////////////////////////////////////////////////////////
1:         final String EMBEDDED_CLASS = "BasicEmbeddedXADataSource40";
/////////////////////////////////////////////////////////////////////////
1:         final String CLIENT_CLASS = "BasicClientDataSource40";
/////////////////////////////////////////////////////////////////////////
1:         final String CLIENT_CLASS = "BasicClientConnectionPoolDataSource40";
/////////////////////////////////////////////////////////////////////////
1:         final String CLIENT_CLASS = "BasicClientXADataSource40";
/////////////////////////////////////////////////////////////////////////
1:                 filePrefix + "BasicEmbeddedDataSource40-10_10_1_0.ser",
1:                     "BasicEmbeddedConnectionPoolDataSource40-10_10_1_0.ser",
1:                 filePrefix + "BasicEmbeddedXADataSource40-10_10_1_0.ser",
1:                 filePrefix + "BasicClientDataSource40-10_10_1_0.ser",
1:                     "BasicClientConnectionPoolDataSource40-10_10_1_0.ser",
1:                 filePrefix + "BasicClientXADataSource40-10_10_1_0.ser",
commit:c35e4f0
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
1: import org.apache.derbyTesting.junit.JDBC;
1:  * current version of the data source.
/////////////////////////////////////////////////////////////////////////
1:  * made before release 10.10.
/////////////////////////////////////////////////////////////////////////
1:     /** Constant for Derby version 10.10.1.0. */
1:     private static final String VERSION_10_10_1_0 = "10_10_1_0";
1:     private final String _40Suffix = "40";
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJNDI()) {
1:             final String EMBEDDED_CLASS = "EmbeddedDataSource";
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, true);
1:             deSerializeDs(EMBEDDED_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:         }
1:         
0:         final String EMBEDDED_CLASS = "NonJNDIEmbeddedDataSource40";
1:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, false);
1:         
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJNDI()) {
1:             final String EMBEDDED_CLASS = "EmbeddedConnectionPoolDataSource";
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, true);
1:             deSerializeDs(EMBEDDED_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:         }
1: 
1:         final String EMBEDDED_CLASS =
0:                 "NonJNDIEmbeddedConnectionPoolDataSource40";
1:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, false);
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJNDI()) {
1:             final String EMBEDDED_CLASS = "EmbeddedXADataSource";
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1, true);
1:             deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, true);
1:             deSerializeDs(EMBEDDED_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:         }
1:         
0:         final String EMBEDDED_CLASS = "NonJNDIEmbeddedXADataSource40";
1:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_10_1_0, false);
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJNDI()) {
1:             final String CLIENT_CLASS = "ClientDataSource";
1:             // No client driver for Derby 10.0
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1, true);
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0, true);
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1, true);
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, true);
1:             deSerializeDs(CLIENT_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:         }
1:         
0:         final String CLIENT_CLASS = "NonJNDIClientDataSource40";
1:         deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, false);
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJNDI()) {
1:             final String CLIENT_CLASS = "ClientConnectionPoolDataSource";
1:             // No client driver for Derby 10.0
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1, true);
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0, true);
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1, true);
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, true);
1:             deSerializeDs(CLIENT_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:         }
1:          
0:         final String CLIENT_CLASS = "NonJNDIClientConnectionPoolDataSource40";
1:         deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, false);
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJNDI()) {
1:             final String CLIENT_CLASS = "ClientXADataSource";
1:             // No client driver for Derby 10.0
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1, true);
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0, true);
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1, true);
1:             deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, true);
1:             deSerializeDs(CLIENT_CLASS + _40Suffix, VERSION_10_10_1_0, true);
1:         }
1:          
0:         final String CLIENT_CLASS = "NonJNDIClientXADataSource40";
1:         deSerializeDs(CLIENT_CLASS, VERSION_10_10_1_0, false);
/////////////////////////////////////////////////////////////////////////
1:     private void deSerializeDs(
1:             String className, String version, boolean dsHasJNDI)
1: 
1:         if (!JDBC.vmSupportsJDBC4() && className.contains("40")) {
1:             // Running old Java, bail out if JDBC4
1:             return;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         Object dsRef = null;
/////////////////////////////////////////////////////////////////////////
1:             if (dsHasJNDI) {
1:                 // Recreate the data source using reference.
1:                 dsRef = ois.readObject();
1:             }
/////////////////////////////////////////////////////////////////////////
1:         if (dsHasJNDI) {
1:             // Recreate ds via the Reference's factory class.  We use
1:             // reflection here to make the test runnable for non JNDI
1:             // environments. (Even though this code would not be executed in
1:             // that environment, the VM will try to load the classes if
1:             // reference directly in the source. So, resort to reflection...)
1:             Method getFactoryClassName =
1:                     Class.forName("javax.naming.Reference").getMethod(
1:                     "getFactoryClassName", null);
1:             String factoryClassName =
1:                     (String)getFactoryClassName.invoke(dsRef, null);
0:             Object factory =
0:                     Class.forName(factoryClassName).newInstance();
1:             Method getObjectInstance =
1:                     factory.getClass().getMethod("getObjectInstance",
1:                     new Class[] {
1:                         Class.forName("java.lang.Object"),
1:                         Class.forName("javax.naming.Name"),
1:                         Class.forName("javax.naming.Context"),
1:                         Class.forName( "java.util.Hashtable")});
1:             Object recreatedDs =
1:                     getObjectInstance.invoke(
1:                     factory, new Object[] {dsRef, null, null, null});
1:             ds = (DataSource)recreatedDs;
1:             assertTrue("Unexpected class instantiated by Reference: " +
1:                     dsObj.getClass().getName(),
1:                     dsObj.getClass().getName().indexOf(className) > 0);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:                 // 10.10 resources
1:                 filePrefix + "EmbeddedDataSource-10_10_1_0.ser",
1:                 filePrefix + "EmbeddedDataSource40-10_10_1_0.ser",
1:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_10_1_0.ser",
1:                 filePrefix + "EmbeddedConnectionPoolDataSource40-10_10_1_0.ser",
1:                 filePrefix + "EmbeddedXADataSource-10_10_1_0.ser",
1:                 filePrefix + "EmbeddedXADataSource40-10_10_1_0.ser",
1:                 filePrefix + "ClientDataSource-10_10_1_0.ser",
1:                 filePrefix + "ClientDataSource40-10_10_1_0.ser",
1:                 filePrefix + "ClientConnectionPoolDataSource-10_10_1_0.ser",
1:                 filePrefix + "ClientConnectionPoolDataSource40-10_10_1_0.ser",
1:                 filePrefix + "ClientXADataSource-10_10_1_0.ser",
1:                 filePrefix + "ClientXADataSource40-10_10_1_0.ser",
0:                 filePrefix + "NonJNDIEmbeddedDataSource40-10_10_1_0.ser",
1:                 filePrefix +
0:                     "NonJNDIEmbeddedConnectionPoolDataSource40-10_10_1_0.ser",
0:                 filePrefix + "NonJNDIEmbeddedXADataSource40-10_10_1_0.ser",
0:                 filePrefix + "NonJNDIClientDataSource40-10_10_1_0.ser",
1:                 filePrefix +
0:                     "NonJNDIClientConnectionPoolDataSource40-10_10_1_0.ser",
0:                 filePrefix + "NonJNDIClientXADataSource40-10_10_1_0.ser",
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
1:             is = AccessController.doPrivileged(
1:                   new PrivilegedExceptionAction<InputStream>() {
1:                 public InputStream run() throws FileNotFoundException {
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:0746b5a
/////////////////////////////////////////////////////////////////////////
1:      * {@link javax.sql.DataSource}
commit:7cdf43a
/////////////////////////////////////////////////////////////////////////
1:  * <tt>testData/serializedDataSources</tt>, with the following filename
/////////////////////////////////////////////////////////////////////////
1:         String filePrefix = "functionTests/testData/serializedDataSources/";
commit:8f89c09
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("FileInputStream is null", is);
1:         Object dsObj = null;
1:         DataSource ds = null;
0:         Reference dsRef = null;
1:         // Used to preserve original error information in case of exception when 
1:         // closing the input stream.
1:         boolean testSequencePassed = false;
1:         try {
1:             ObjectInputStream ois = new ObjectInputStream(is);
1:             String buildVersion = ois.readUTF();
1:             String buildNumber = ois.readUTF();
1:             println("Data source " + className + ", version " +
1:                     buildVersion + ", build " + buildNumber);
1:             dsObj = ois.readObject();
1:             assertNotNull("De-serialized data source is null", dsObj);
1:             assertTrue("Unexpected class instantiated: " +
1:                     dsObj.getClass().getName(),
1:                     dsObj.getClass().getName().indexOf(className) > 0);
1:             ds = (DataSource)dsObj;
1:             // Just see if the object is usable.
1:             int newTimeout = ds.getLoginTimeout() +9;
1:             assertFalse(ds.getLoginTimeout() == newTimeout);
1:             ds.setLoginTimeout(newTimeout);
1:             assertEquals(newTimeout, ds.getLoginTimeout());
0:             // Recreate the data source using reference.
0:             dsRef = (Reference)ois.readObject();
1:             ois.close();
1:             testSequencePassed = true;
1:         } finally {
1:             if (testSequencePassed) {
1:                 is.close();
1:             } else {
1:                 try {
1:                     is.close();
1:                 } catch (IOException ioe) {
1:                     // Ignore this to preserve the original exception.
1:                 }
1:             }
1:         }
1: 
commit:efa5857
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.io.FileInputStream;
1: import java.io.FileNotFoundException;
1: import java.io.InputStream;
1: import java.io.ObjectInputStream;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
0: import javax.naming.Reference;
0: import javax.naming.spi.ObjectFactory;
1: import javax.sql.DataSource;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.Derby;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
1: /**
1:  * Makes sure that old serialized data sources can be de-serialized with the
0:  * current version of the data souce.
1:  * <p>
1:  * Serialized data source from old versions are expected to be found in
0:  * <tt>testData/serialized-data-sources</tt>, with the following filename
1:  * format CLASSNAME-VERSION.ser, where CLASSNAME is the unqualified name of the
1:  * data source class, and VERSION is the Derby version. An example:
1:  * <tt>ClientPooledConnectionDataSource-10_1.ser</tt>
1:  * <p>
1:  * A separation between JDBC 4.0 specific classes and the other classes is not
0:  * made.
1:  * <p>
1:  * This test should detect the typical incompatible changes in the current
1:  * data source implementations, for instance deleting a field or changing its
1:  * type.
1:  */
1: public class DataSourceSerializationTest
1:         extends BaseJDBCTestCase {
1: 
1:     /** Constant for Derby version 10.0.2.1. */
1:     private static final String VERSION_10_0_2_1 = "10_0_2_1";
1:     /** Constant for Derby version 10.1.3.1. */
1:     private static final String VERSION_10_1_3_1 = "10_1_3_1";
1:     /** Constant for Derby version 10.2.2.0 */
1:     private static final String VERSION_10_2_2_0 = "10_2_2_0";
1:     /** Constant for Derby version 10.3.2.1. */
1:     private static final String VERSION_10_3_2_1 = "10_3_2_1";
1: 
1:     public DataSourceSerializationTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Tests the de-serialization of the basic embedded data source.
1:      *
1:      * @throws Exception for a number of error conditions
1:      */
1:     public void serTestEmbeddedDataSource()
1:             throws Exception {
0:         final String EMBEDDED_CLASS = "EmbeddedDataSource";
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1);
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1);
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0);
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1);
1:     }
1: 
1:     /**
1:      * Tests the de-serialization of the embedded connection pool data source.
1:      *
1:      * @throws Exception for a number of error conditions
1:      */
1:     public void serTestEmbeddedConnectionPoolDataSource()
1:             throws Exception {
0:         final String EMBEDDED_CLASS = "EmbeddedConnectionPoolDataSource";
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1);
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1);
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0);
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1);
1:     }
1: 
1:     /**
1:      * Tests the de-serialization of the embedded XA data source.
1:      *
1:      * @throws Exception for a number of error conditions
1:      */
1:     public void serTestEmbeddedXADataSource()
1:             throws Exception {
0:         final String EMBEDDED_CLASS = "EmbeddedXADataSource";
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1);
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1);
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0);
0:         deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1);
1:     }
1: 
1:     /**
1:      * Tests the de-serialization of the basic client data source.
1:      *
1:      * @throws Exception for a number of error conditions
1:      */
1:     public void serTestClientDataSource()
1:             throws Exception {
0:         final String CLIENT_CLASS = "ClientDataSource";
0:         // No client driver for Derby 10.0
0:         deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1);
0:         deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0);
0:         deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1);
1:     }
1: 
1:     /**
1:      * Tests the de-serialization of the client connection pool data source.
1:      *
1:      * @throws Exception for a number of error conditions
1:      */
1:     public void serTestClientConnectionPoolDataSource()
1:             throws Exception {
0:         final String CLIENT_CLASS = "ClientConnectionPoolDataSource";
0:         // No client driver for Derby 10.0
0:         deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1);
0:         deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0);
0:         deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1);
1:     }
1: 
1:     /**
1:      * Tests the de-serialization of the client XA data source.
1:      *
1:      * @throws Exception for a number of error conditions
1:      */
1:     public void serTestClientXADataSource()
1:             throws Exception {
0:         final String CLIENT_CLASS = "ClientXADataSource";
0:         // No client driver for Derby 10.0
0:         deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1);
0:         deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0);
0:         deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1);
1:     }
1: 
1:     /**
1:      * Attempts to de-serialize a data source object from a file.
1:      * <p>
1:      * <ol> <li>Derby version string - UTF</li>
1:      *      <li>Derby build number - UTF</li>
1:      *      <li>Derby data source - object</li>
1:      *      <li>Derby data source reference - object</li>
1:      * </ol>
1:      * <p>
1:      * If the object is successfully instantiated and cast to
0:      * {@link java.sql.DataSource}
1:      *
1:      * @param className name of the class to de-serialize
1:      * @param version Derby version
1:      *
1:      * @throws Exception on a number of error conditions
1:      */
0:     private void deSerializeDs(String className, String version)
1:             throws Exception {
1:         // Construct the filename
1:         final StringBuffer fname = new StringBuffer(className);
1:         fname.append('-');
1:         fname.append(version);
1:         fname.append(".ser");
1: 
1:         // De-serialize the data source.
1:         InputStream is;
1:         try {
0:             is = (FileInputStream)AccessController.doPrivileged(
0:                   new PrivilegedExceptionAction() {
0:                 public Object run() throws FileNotFoundException {
1:                     return new FileInputStream(
1:                             SupportFilesSetup.getReadOnly(fname.toString()));
1:                 }
1:             });
1:             } catch (PrivilegedActionException e) {
1:                 // e.getException() should be a FileNotFoundException.
1:                 throw (FileNotFoundException)e.getException();
1:             }
1: 
0:         ObjectInputStream ois = new ObjectInputStream(is);
0:         String buildVersion = ois.readUTF();
0:         String buildNumber = ois.readUTF();
0:         println("Data source " + className + ", version " +
0:                 buildVersion + ", build " + buildNumber);
0:         Object dsObj = ois.readObject();
0:         assertNotNull("De-serialized data source is null", dsObj);
0:         assertTrue("Unexpected class instantiated: " +
0:                 dsObj.getClass().getName(),
0:                 dsObj.getClass().getName().indexOf(className) > 0);
0:         DataSource ds = (DataSource)dsObj;
0:         // Just see if the object is usable.
0:         int newTimeout = ds.getLoginTimeout() +9;
0:         assertFalse(ds.getLoginTimeout() == newTimeout);
0:         ds.setLoginTimeout(newTimeout);
0:         assertEquals(newTimeout, ds.getLoginTimeout());
1: 
0:         // Recreate the data source using reference.
0:         Reference dsRef = (Reference)ois.readObject();
0:         String factoryClassName = dsRef.getFactoryClassName();
0:         ObjectFactory factory =
0:             (ObjectFactory)Class.forName(factoryClassName).newInstance();
0:         Object recreatedDs =
0:             factory.getObjectInstance(dsRef, null, null, null);
0:         ds = (DataSource)recreatedDs;
0:         assertTrue("Unexpected class instantiated by Reference: " +
0:                 dsObj.getClass().getName(),
0:                 dsObj.getClass().getName().indexOf(className) > 0);
1:     }
1: 
1:     /**
1:      * Returns an appropariate suite of tests to run.
1:      *
1:      * @return A test suite.
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("DataSourceSerializationTest");
0:         String filePrefix = "functionTests/testData/serialized-data-sources/";
1:         // De-serialize embedded data sources only if we have the engine code.
1:         if (Derby.hasEmbedded()) {
1:             suite.addTest(new DataSourceSerializationTest(
1:                     "serTestEmbeddedDataSource"));
1:             suite.addTest(new DataSourceSerializationTest(
1:                     "serTestEmbeddedConnectionPoolDataSource"));
1:             suite.addTest(new DataSourceSerializationTest(
1:                     "serTestEmbeddedXADataSource"));
1:         }
1: 
1:         // De-serialize client data sources only if we have the client code.
1:         if (Derby.hasClient()) {
1:             suite.addTest(new DataSourceSerializationTest(
1:                     "serTestClientDataSource"));
1:             suite.addTest(new DataSourceSerializationTest(
1:                     "serTestClientConnectionPoolDataSource"));
1:             suite.addTest(new DataSourceSerializationTest(
1:                     "serTestClientXADataSource"));
1:         }
1: 
1:         return new SupportFilesSetup(suite, new String[] {
1:                 // 10.0 resources
1:                 filePrefix + "EmbeddedDataSource-10_0_2_1.ser",
1:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_0_2_1.ser",
1:                 filePrefix + "EmbeddedXADataSource-10_0_2_1.ser",
1: 
1:                 // 10.1 resources
1:                 filePrefix + "EmbeddedDataSource-10_1_3_1.ser",
1:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_1_3_1.ser",
1:                 filePrefix + "EmbeddedXADataSource-10_1_3_1.ser",
1:                 filePrefix + "ClientDataSource-10_1_3_1.ser",
1:                 filePrefix + "ClientConnectionPoolDataSource-10_1_3_1.ser",
1:                 filePrefix + "ClientXADataSource-10_1_3_1.ser",
1: 
1:                 // 10.2 resources
1:                 filePrefix + "EmbeddedDataSource-10_2_2_0.ser",
1:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_2_2_0.ser",
1:                 filePrefix + "EmbeddedXADataSource-10_2_2_0.ser",
1:                 filePrefix + "ClientDataSource-10_2_2_0.ser",
1:                 filePrefix + "ClientConnectionPoolDataSource-10_2_2_0.ser",
1:                 filePrefix + "ClientXADataSource-10_2_2_0.ser",
1: 
1:                 // 10.3 resources
1:                 filePrefix + "EmbeddedDataSource-10_3_2_1.ser",
1:                 filePrefix + "EmbeddedConnectionPoolDataSource-10_3_2_1.ser",
1:                 filePrefix + "EmbeddedXADataSource-10_3_2_1.ser",
1:                 filePrefix + "ClientDataSource-10_3_2_1.ser",
1:                 filePrefix + "ClientConnectionPoolDataSource-10_3_2_1.ser",
1:                 filePrefix + "ClientXADataSource-10_3_2_1.ser",
1:             });
1:     }
1: }
1: 
============================================================================