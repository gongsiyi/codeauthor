1:9206d5b: /*
1:9206d5b: 
1:9206d5b:    Derby - Class org.apache.derby.impl.jdbc.EmbedCallableStatement42
1:9206d5b: 
1:9206d5b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:9206d5b:    contributor license agreements.  See the NOTICE file distributed with
1:9206d5b:    this work for additional information regarding copyright ownership.
1:9206d5b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:9206d5b:    (the "License"); you may not use this file except in compliance with
1:9206d5b:    the License.  You may obtain a copy of the License at
1:9206d5b: 
1:9206d5b:       http://www.apache.org/licenses/LICENSE-2.0
1:9206d5b: 
1:9206d5b:    Unless required by applicable law or agreed to in writing, software
1:9206d5b:    distributed under the License is distributed on an "AS IS" BASIS,
1:9206d5b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9206d5b:    See the License for the specific language governing permissions and
1:9206d5b:    limitations under the License.
1:9206d5b: 
1:9206d5b:  */
1:9206d5b: 
1:9206d5b: package org.apache.derby.impl.jdbc;
1:9206d5b: 
1:9206d5b: import java.sql.SQLException;
1:9206d5b: import java.sql.SQLType;
1:9206d5b: 
1:b5f2776: public class EmbedCallableStatement42 extends EmbedCallableStatement
1:9206d5b: {
1:9206d5b:         
1:9206d5b:     /** Creates a new instance of EmbedCallableStatement42 */
1:9206d5b:     public EmbedCallableStatement42(EmbedConnection conn, String sql,
1:9206d5b:         int resultSetType,
1:9206d5b:         int resultSetConcurrency,
1:9206d5b:         int resultSetHoldability) throws SQLException{
1:9206d5b:         super(conn, sql, resultSetType, resultSetConcurrency, resultSetHoldability);     
1:9206d5b:     }
1:9206d5b: 
1:9206d5b:     public  void registerOutParameter( int parameterIndex, SQLType sqlType )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:9206d5b:         checkStatus();
1:4c2fc4a:         registerOutParameter( parameterIndex, Util42.getTypeAsInt( sqlType ) );
1:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, int scale )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:9206d5b:         checkStatus();
1:4c2fc4a:         registerOutParameter( parameterIndex, Util42.getTypeAsInt( sqlType ), scale );
1:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, String typeName )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:9206d5b:         checkStatus();
1:4c2fc4a:         registerOutParameter( parameterIndex, Util42.getTypeAsInt( sqlType ), typeName );
1:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( String parameterName, SQLType sqlType )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:17efc16:         checkStatus();
1:4c2fc4a:         registerOutParameter( parameterName, Util42.getTypeAsInt( sqlType ) );
1:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( String parameterName, SQLType sqlType, int scale )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:17efc16:         checkStatus();
1:4c2fc4a:         registerOutParameter( parameterName, Util42.getTypeAsInt( sqlType ), scale );
1:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( String parameterName,  SQLType sqlType, String typeName )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:17efc16:         checkStatus();
1:4c2fc4a:         registerOutParameter( parameterName, Util42.getTypeAsInt( sqlType ), typeName );
1:17efc16:     }
1:17efc16: 
1:17efc16:     public  void setObject
1:17efc16:         ( int parameterIndex, java.lang.Object x, SQLType targetSqlType )
1:17efc16:         throws SQLException
1:17efc16:     {
1:17efc16:         checkStatus();
1:4c2fc4a:         setObject( parameterIndex, x, Util42.getTypeAsInt( targetSqlType ) );
1:17efc16:     }
1:17efc16:     
1:17efc16:     public void setObject
1:17efc16:         (
1:17efc16:          int parameterIndex, java.lang.Object x,
1:17efc16:          SQLType targetSqlType, int scaleOrLength
1:17efc16:          )  throws SQLException
1:17efc16:     {
1:17efc16:         checkStatus();
1:4c2fc4a:         setObject( parameterIndex, x, Util42.getTypeAsInt( targetSqlType ), scaleOrLength );
1:17efc16:     }
1:17efc16: 
1:17efc16:     public  void setObject( String parameterName, Object x, SQLType sqlType )
1:17efc16:         throws SQLException
1:17efc16:     {
1:17efc16:         checkStatus();
1:4c2fc4a:         setObject( parameterName, x, Util42.getTypeAsInt( sqlType ) );
1:17efc16:     }
1:17efc16:     
1:17efc16:     public  void setObject( String parameterName, Object x, SQLType sqlType, int scaleOrLength )
1:17efc16:         throws SQLException
1:17efc16:     {
1:17efc16:         checkStatus();
1:4c2fc4a:         setObject( parameterName, x, Util42.getTypeAsInt( sqlType ), scaleOrLength );
1:9206d5b:     }
1:9206d5b:     
1:9206d5b: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b5f2776
/////////////////////////////////////////////////////////////////////////
1: public class EmbedCallableStatement42 extends EmbedCallableStatement
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4c2fc4a
/////////////////////////////////////////////////////////////////////////
1:         registerOutParameter( parameterIndex, Util42.getTypeAsInt( sqlType ) );
1:         registerOutParameter( parameterIndex, Util42.getTypeAsInt( sqlType ), scale );
1:         registerOutParameter( parameterIndex, Util42.getTypeAsInt( sqlType ), typeName );
1:         registerOutParameter( parameterName, Util42.getTypeAsInt( sqlType ) );
1:         registerOutParameter( parameterName, Util42.getTypeAsInt( sqlType ), scale );
1:         registerOutParameter( parameterName, Util42.getTypeAsInt( sqlType ), typeName );
/////////////////////////////////////////////////////////////////////////
1:         setObject( parameterIndex, x, Util42.getTypeAsInt( targetSqlType ) );
/////////////////////////////////////////////////////////////////////////
1:         setObject( parameterIndex, x, Util42.getTypeAsInt( targetSqlType ), scaleOrLength );
1:         setObject( parameterName, x, Util42.getTypeAsInt( sqlType ) );
1:         setObject( parameterName, x, Util42.getTypeAsInt( sqlType ), scaleOrLength );
commit:17efc16
/////////////////////////////////////////////////////////////////////////
1:         checkStatus();
0:         registerOutParameter( parameterName, Util42.getTypeAsInt( this, sqlType ) );
1:         checkStatus();
0:         registerOutParameter( parameterName, Util42.getTypeAsInt( this, sqlType ), scale );
1:         checkStatus();
0:         registerOutParameter( parameterName, Util42.getTypeAsInt( this, sqlType ), typeName );
1:     }
1: 
1:     public  void setObject
1:         ( int parameterIndex, java.lang.Object x, SQLType targetSqlType )
1:         throws SQLException
1:     {
1:         checkStatus();
0:         setObject( parameterIndex, x, Util42.getTypeAsInt( this, targetSqlType ) );
1:     }
1:     
1:     public void setObject
1:         (
1:          int parameterIndex, java.lang.Object x,
1:          SQLType targetSqlType, int scaleOrLength
1:          )  throws SQLException
1:     {
1:         checkStatus();
0:         setObject( parameterIndex, x, Util42.getTypeAsInt( this, targetSqlType ), scaleOrLength );
1:     }
1: 
1:     public  void setObject( String parameterName, Object x, SQLType sqlType )
1:         throws SQLException
1:     {
1:         checkStatus();
0:         setObject( parameterName, x, Util42.getTypeAsInt( this, sqlType ) );
1:     }
1:     
1:     public  void setObject( String parameterName, Object x, SQLType sqlType, int scaleOrLength )
1:         throws SQLException
1:     {
1:         checkStatus();
0:         setObject( parameterName, x, Util42.getTypeAsInt( this, sqlType ), scaleOrLength );
commit:9206d5b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.jdbc.EmbedCallableStatement42
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
1: import java.sql.SQLException;
1: import java.sql.SQLType;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: public class EmbedCallableStatement42 extends EmbedCallableStatement40
1: {
1:         
1:     /** Creates a new instance of EmbedCallableStatement42 */
1:     public EmbedCallableStatement42(EmbedConnection conn, String sql,
1:         int resultSetType,
1:         int resultSetConcurrency,
1:         int resultSetHoldability) throws SQLException{
1:         super(conn, sql, resultSetType, resultSetConcurrency, resultSetHoldability);     
1:     }
1: 
1:     public  void registerOutParameter( int parameterIndex, SQLType sqlType )
1:         throws SQLException
1:     {
1:         checkStatus();
0:         registerOutParameter( parameterIndex, Util42.getTypeAsInt( this, sqlType ) );
1:     }
1:     
1:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, int scale )
1:         throws SQLException
1:     {
1:         checkStatus();
0:         registerOutParameter( parameterIndex, Util42.getTypeAsInt( this, sqlType ), scale );
1:     }
1:     
1:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, String typeName )
1:         throws SQLException
1:     {
1:         checkStatus();
0:         registerOutParameter( parameterIndex, Util42.getTypeAsInt( this, sqlType ), typeName );
1:     }
1:     
1:     public  void registerOutParameter( String parameterName, SQLType sqlType )
1:         throws SQLException
1:     {
0:         throw Util.notImplemented();
1:     }
1:     
1:     public  void registerOutParameter( String parameterName, SQLType sqlType, int scale )
1:         throws SQLException
1:     {
0:         throw Util.notImplemented();
1:     }
1:     
1:     public  void registerOutParameter( String parameterName,  SQLType sqlType, String typeName )
1:         throws SQLException
1:     {
0:         throw Util.notImplemented();
1:     }
1:     
1: }
============================================================================