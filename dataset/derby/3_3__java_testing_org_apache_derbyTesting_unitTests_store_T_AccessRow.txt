1:2bc809f: /*
3:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.store.T_AccessRow
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.store;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.store.access.*;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.io.Storable;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.types.DataValueDescriptor;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.types.SQLInteger;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: 
1:2bc809f: public class T_AccessRow
2:2bc809f: { 
1:2bc809f: 
1:2bc809f: 	protected DataValueDescriptor column[];
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	Construct a new row which can hold the provided number of columns.
1:2bc809f: 	**/
1:2bc809f: 	public T_AccessRow(int ncols)
1:2bc809f: 	{
1:2bc809f: 		 column = new DataValueDescriptor[ncols];
1:2bc809f: 		 for (int i = 0; i < ncols; i++)
1:2bc809f: 			 column[i] = new SQLInteger(0);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	Construct a new row with three integer columns which
1:2bc809f: 	have the column values provided.
1:2bc809f: 	**/
1:2bc809f: 	public T_AccessRow(int col0value, int col1value, int col2value)
1:92268ac: 	{
1:2bc809f: 		column = new DataValueDescriptor[3];
1:2bc809f: 		column[0] = new SQLInteger(col0value);
1:2bc809f: 		column[1] = new SQLInteger(col1value);
1:2bc809f: 		column[2] = new SQLInteger(col2value);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public DataValueDescriptor getCol(int colid)
1:2bc809f: 	{
1:2bc809f: 		if (colid >= column.length)
1:2bc809f: 			return null;
1:2bc809f: 		else
1:2bc809f: 			return column[colid];
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void setCol(int colid, DataValueDescriptor val)
1:2bc809f: 	{
1:2bc809f: 		if (colid >= column.length)
1:2bc809f: 			realloc(colid + 1);
1:2bc809f: 		column[colid] = val;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean equals(T_AccessRow other) throws StandardException
1:2bc809f: 	{
1:2bc809f: 		if (other == null)
1:2bc809f: 			return false;
1:2bc809f: 		if (other.column.length != this.column.length)
1:2bc809f: 			return false;
1:2bc809f: 		for (int i = 0; i < this.column.length; i++)
1:2bc809f: 			if (this.column[i].compare(other.column[i]) != 0)
1:2bc809f: 				return false;
1:2bc809f: 		return true;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public String toString()
1:2bc809f: 	{
1:2bc809f: 		String s = "{ ";
1:2bc809f: 		for (int i = 0; i < column.length; i++)
1:2bc809f: 		{
1:2bc809f: 			s += column[i].toString();
1:2bc809f: 			if (i < (column.length - 1))
1:2bc809f: 				s += ", ";
1:2bc809f: 		}
1:2bc809f: 		s += " }";
1:2bc809f: 		return s;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	// Set the number of columns in the row to ncols, preserving
1:2bc809f: 	// the existing contents.
1:2bc809f: 	protected void realloc(int ncols)
1:2bc809f: 	{
1:2bc809f: 		DataValueDescriptor newcol[] = new DataValueDescriptor[ncols];
1:2bc809f: 		for (int i = 0; i < column.length; i++)
1:2bc809f: 			newcol[i] = column[i];
1:2bc809f: 		column = newcol;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public Storable getStorableColumn(int colid)
1:2bc809f: 	{
1:2bc809f: 		return column[colid];
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void setStorableColumn(int colid, Storable value) {
1:2bc809f: 		column[colid] = (DataValueDescriptor) value;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public int nColumns()
1:2bc809f: 	{
1:2bc809f: 		return column.length;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public DataValueDescriptor[] getRowArray() {
1:2bc809f: 		return column;
1:2bc809f: 	}
1:2bc809f: 
1:9495437: 	public DataValueDescriptor[] getRowArrayClone() {
1:2bc809f: 		DataValueDescriptor[] retval = new DataValueDescriptor[column.length];
1:2bc809f: 		for (int index = 0; index < column.length; index++)
1:854dd10: 			retval[index] = column[index].cloneValue(false);
1:2bc809f: 		return retval;
1:2bc809f: 	}
1:2bc809f: }
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9495437
/////////////////////////////////////////////////////////////////////////
1: 	public DataValueDescriptor[] getRowArrayClone() {
commit:92268ac
/////////////////////////////////////////////////////////////////////////
0: 	public DataValueDescriptor[] getRowArrayClone()
0:         throws StandardException
1:     {
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1: 			retval[index] = column[index].cloneValue(false);
commit:b4e2eb7
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.store.T_AccessRow
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.store;
1: 
1: import org.apache.derby.iapi.store.access.*;
1: 
1: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.types.CloneableObject;
1: 
1: import org.apache.derby.iapi.types.SQLInteger;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: public class T_AccessRow
1: { 
1: 
1: 	protected DataValueDescriptor column[];
1: 
1: 	/**
1: 	Construct a new row which can hold the provided number of columns.
1: 	**/
1: 	public T_AccessRow(int ncols)
1: 	{
1: 		 column = new DataValueDescriptor[ncols];
1: 		 for (int i = 0; i < ncols; i++)
1: 			 column[i] = new SQLInteger(0);
1: 	}
1: 
1: 	/**
1: 	Construct a new row with three integer columns which
1: 	have the column values provided.
1: 	**/
1: 	public T_AccessRow(int col0value, int col1value, int col2value)
1: 	{
1: 		column = new DataValueDescriptor[3];
1: 		column[0] = new SQLInteger(col0value);
1: 		column[1] = new SQLInteger(col1value);
1: 		column[2] = new SQLInteger(col2value);
1: 	}
1: 
1: 	public DataValueDescriptor getCol(int colid)
1: 	{
1: 		if (colid >= column.length)
1: 			return null;
1: 		else
1: 			return column[colid];
1: 	}
1: 
1: 	public void setCol(int colid, DataValueDescriptor val)
1: 	{
1: 		if (colid >= column.length)
1: 			realloc(colid + 1);
1: 		column[colid] = val;
1: 	}
1: 
1: 	public boolean equals(T_AccessRow other) throws StandardException
1: 	{
1: 		if (other == null)
1: 			return false;
1: 		if (other.column.length != this.column.length)
1: 			return false;
1: 		for (int i = 0; i < this.column.length; i++)
1: 			if (this.column[i].compare(other.column[i]) != 0)
1: 				return false;
1: 		return true;
1: 	}
1: 
1: 	public String toString()
1: 	{
1: 		String s = "{ ";
1: 		for (int i = 0; i < column.length; i++)
1: 		{
1: 			s += column[i].toString();
1: 			if (i < (column.length - 1))
1: 				s += ", ";
1: 		}
1: 		s += " }";
1: 		return s;
1: 	}
1: 
1: 	// Set the number of columns in the row to ncols, preserving
1: 	// the existing contents.
1: 	protected void realloc(int ncols)
1: 	{
1: 		DataValueDescriptor newcol[] = new DataValueDescriptor[ncols];
1: 		for (int i = 0; i < column.length; i++)
1: 			newcol[i] = column[i];
1: 		column = newcol;
1: 	}
1: 
1: 	public Storable getStorableColumn(int colid)
1: 	{
1: 		return column[colid];
1: 	}
1: 
1: 	public void setStorableColumn(int colid, Storable value) {
1: 		column[colid] = (DataValueDescriptor) value;
1: 	}
1: 
1: 	public int nColumns()
1: 	{
1: 		return column.length;
1: 	}
1: 
1: 	public DataValueDescriptor[] getRowArray() {
1: 		return column;
1: 	}
1: 
0: 	public DataValueDescriptor[] getRowArrayClone() {
1: 		DataValueDescriptor[] retval = new DataValueDescriptor[column.length];
1: 		for (int index = 0; index < column.length; index++)
0: 			retval[index] = column[index].getClone();
1: 		return retval;
1: 	}
1: }
1: 
1: 
1: 
1: 
============================================================================