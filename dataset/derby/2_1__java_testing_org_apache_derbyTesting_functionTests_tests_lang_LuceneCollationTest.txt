1:d847ced: /*
1:d847ced: 
1:d847ced:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneCollationTest
1:d847ced: 
1:d847ced:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d847ced:    contributor license agreements.  See the NOTICE file distributed with
1:d847ced:    this work for additional information regarding copyright ownership.
1:d847ced:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d847ced:    (the "License"); you may not use this file except in compliance with
1:d847ced:    the License.  You may obtain a copy of the License at
1:d847ced: 
1:d847ced:      http://www.apache.org/licenses/LICENSE-2.0
1:d847ced: 
1:d847ced:    Unless required by applicable law or agreed to in writing, software
1:d847ced:    distributed under the License is distributed on an "AS IS" BASIS,
1:d847ced:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d847ced:    See the License for the specific language governing permissions and
1:d847ced:    limitations under the License.
1:d847ced: 
1:d847ced:  */
1:d847ced: 
1:d847ced: package org.apache.derbyTesting.functionTests.tests.lang;
1:d847ced: 
1:d847ced: import java.sql.Connection;
1:d847ced: import java.sql.PreparedStatement;
1:d847ced: import junit.framework.Test;
1:d847ced: import org.apache.derbyTesting.junit.Decorator;
1:d847ced: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:d847ced: import org.apache.derbyTesting.junit.TestConfiguration;
1:d847ced: 
1:d847ced: /**
1:d847ced:  * <p>
1:d847ced:  * Test that the Lucene plugin works on databases with territory based collation enabled.
1:d847ced:  * </p>
1:d847ced:  */
1:d847ced: public class LuceneCollationTest extends GeneratedColumnsHelper
1:d847ced: {
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced:     //
1:d847ced:     // CONSTANTS
1:d847ced:     //
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced: 
1:d847ced:     private static  final   String      RUTH = "RUTH";
1:d847ced: 
1:d847ced:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', true )";
1:d847ced:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', false )";
1:2277df2:     private static  final   String      INDEX_POEMS = "call LuceneSupport.createIndex( 'ruth', 'poems', 'poemText', null )";
1:2277df2:     private static  final   String      UPDATE_POEMS_INDEX = "call LuceneSupport.updateIndex( 'ruth', 'poems', 'poemText', null )";
1:d847ced:     private static  final   String      DROP_POEMS_INDEX = "call LuceneSupport.dropIndex( 'ruth', 'poems', 'poemText' )";
1:d847ced: 
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced:     //
1:d847ced:     // STATE
1:d847ced:     //
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced: 
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced:     //
1:d847ced:     // CONSTRUCTOR
1:d847ced:     //
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced: 
1:d847ced:     /**
1:d847ced:      * Create a new instance.
1:d847ced:      */
1:d847ced: 
1:d847ced:     public LuceneCollationTest(String name)
1:d847ced:     {
1:d847ced:         super(name);
1:d847ced:     }
1:d847ced: 
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced:     //
1:d847ced:     // JUnit BEHAVIOR
1:d847ced:     //
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced: 
1:d847ced: 
1:d847ced:     /**
1:d847ced:      * Construct top level suite in this JUnit test
1:d847ced:      */
1:d847ced:     public static Test suite()
1:d847ced:     {
1:d847ced:         Test        collationTest = Decorator.territoryCollatedDatabase
1:d847ced:             (
1:d847ced:              TestConfiguration.embeddedSuite( LuceneCollationTest.class ),
1:d847ced:              "en"
1:d847ced:              );
1:d847ced: 
1:d847ced:         //
1:d847ced:         // Turn off the security manager. trying to override the default security manager
1:d847ced:         // with a lucene-specific policy file fails because the decorators don't compose correctly.
1:d847ced:         //
1:d847ced:         return SecurityManagerSetup.noSecurityManager( collationTest );
1:d847ced:     }
1:d847ced: 
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced:     //
1:d847ced:     // TESTS
1:d847ced:     //
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced: 
1:d847ced:     /**
1:d847ced:      * <p>
1:d847ced:      * Verify that the collation is what we expect.
1:d847ced:      * </p>
1:d847ced:      */
1:d847ced:     public  void    test_001_collation()
1:d847ced:         throws Exception
1:d847ced:     {
1:d847ced:         Connection  conn = getConnection();
1:d847ced: 
1:d847ced:         assertResults
1:d847ced:             (
1:d847ced:              conn,
1:d847ced:              "values syscs_util.syscs_get_database_property( 'derby.database.collation' )",
1:d847ced:              new String[][]
1:d847ced:              {
1:d847ced:                  { "TERRITORY_BASED" },
1:d847ced:              },
1:d847ced:              true
1:d847ced:              );
1:d847ced:     }
1:d847ced: 
1:d847ced:     /**
1:d847ced:      * <p>
1:d847ced:      * Verify that basic operations work with collation turned on.
1:d847ced:      * </p>
1:d847ced:      */
1:d847ced:     public  void    test_002_basic()
1:d847ced:         throws Exception
1:d847ced:     {
1:d847ced:         Connection  conn = openUserConnection( RUTH );
1:d847ced: 
1:d847ced:         createSchema( conn );
1:d847ced: 
1:d847ced:         goodStatement( conn, LOAD_TOOL );
1:d847ced:         goodStatement( conn, INDEX_POEMS );
1:d847ced:         goodStatement( conn, UPDATE_POEMS_INDEX );
1:d847ced: 
1:d847ced:         assertResults
1:d847ced:             (
1:d847ced:              conn,
1:a4e6298:              "select * from table ( ruth.poems__poemText( 'star', 1000, null ) ) luceneResults order by poemID",
1:d847ced:              new String[][]
1:d847ced:              {
1:2277df2:                  { "3", "3", "2", "0.22933942" },
1:2277df2:                  { "4", "4", "3", "0.22933942" },
1:2277df2:                  { "5", "5", "4", "0.26756266" },
1:d847ced:              },
1:d847ced:              false
1:d847ced:              );
1:d847ced: 
1:d847ced:         assertResults
1:d847ced:             (
1:d847ced:              conn,
1:cb62199:              "select schemaName, tableName, columnName from table ( LuceneSupport.listIndexes() ) listindexes",
1:d847ced:              new String[][]
1:d847ced:              {
1:cb62199:                  { "RUTH", "POEMS", "POEMTEXT" },
1:d847ced:              },
1:d847ced:              false
1:d847ced:              );
1:d847ced:         
1:d847ced:         goodStatement( conn, DROP_POEMS_INDEX );
1:d847ced:         goodStatement( conn, UNLOAD_TOOL );
1:d847ced: 
1:d847ced:         dropSchema( conn );
1:d847ced:     }
1:d847ced: 
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced:     //
1:d847ced:     // MINIONS
1:d847ced:     //
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced: 
1:d847ced:     private void    createSchema( Connection conn )  throws Exception
1:d847ced:     {
1:d847ced:         createPoemsTable( conn );
1:d847ced:     }
1:d847ced:     private void    createPoemsTable( Connection conn )
1:d847ced:         throws Exception
1:d847ced:     {
1:d847ced:         goodStatement
1:d847ced:             (
1:d847ced:              conn,
1:d847ced:              "create table poems\n" +
1:d847ced:              "(\n" +
1:d847ced:              "    poemID int,\n" +
1:d847ced:              "    versionStamp int not null,\n" +
1:d847ced:              "    originalAuthor       varchar( 50 ),\n" +
1:d847ced:              "    lastEditor           varchar( 50 ),\n" +
1:d847ced:              "    poemText            clob,\n" +
1:d847ced:              "    constraint poemsKey primary key( poemID, versionStamp )\n" +
1:d847ced:              ")\n"
1:d847ced:              );
1:d847ced: 
1:d847ced:         PreparedStatement   ps = conn.prepareStatement( "insert into poems values ( ?, ?, ?, ?, ? )" );
1:d847ced: 
1:d847ced:         int     poemID = 1;
1:d847ced:         int     versionStamp = 1;
1:d847ced: 
1:d847ced:         ps.setInt( 1, poemID++ );
1:d847ced:         ps.setInt( 2, versionStamp++ );
1:d847ced:         ps.setString( 3, "Geoffrey Chaucer" );
1:d847ced:         ps.setString( 4, "Geoffrey Chaucer" );
1:d847ced:         ps.setString( 5, "Whan that Aprill, with his shoures soote The droghte of March hath perced to the roote And bathed every veyne in swich licour, Of which vertu engendred is the flour;" );
1:d847ced:         ps.executeUpdate();
1:d847ced: 
1:d847ced:         ps.setInt( 1, poemID++ );
1:d847ced:         ps.setInt( 2, versionStamp++ );
1:d847ced:         ps.setString( 3, "Andrew Marvell" );
1:d847ced:         ps.setString( 4, "Andrew Marvell" );
1:d847ced:         ps.setString( 5, "Had we but world enough, and time, This coyness, lady, were no crime." );
1:d847ced:         ps.executeUpdate();
1:d847ced: 
1:d847ced:         ps.setInt( 1, poemID++ );
1:d847ced:         ps.setInt( 2, versionStamp++ );
1:d847ced:         ps.setString( 3, "John Milton" );
1:d847ced:         ps.setString( 4, "John Milton" );
1:d847ced:         ps.setString( 5, "From morn to noon he fell, from noon to dewy eve, a summers day, and with the setting sun dropped from the ze4ith like a falling star on Lemnos, the Aegean isle" );
1:d847ced:         ps.executeUpdate();
1:d847ced: 
1:d847ced:         ps.setInt( 1, poemID++ );
1:d847ced:         ps.setInt( 2, versionStamp++ );
1:d847ced:         ps.setString( 3, "Lord Byron" );
1:d847ced:         ps.setString( 4, "Lord Byron" );
1:d847ced:         ps.setString( 5, "The Assyrian came down like the wolf on the fold, And his cohorts were gleaming in purple and gold; And the sheen of their spears was like stars on the sea, When the blue wave rolls nightly on deep Galilee." );
1:d847ced:         ps.executeUpdate();
1:d847ced: 
1:d847ced:         ps.setInt( 1, poemID++ );
1:d847ced:         ps.setInt( 2, versionStamp++ );
1:d847ced:         ps.setString( 3, "Walt Whitman" );
1:d847ced:         ps.setString( 4, "Walt Whitman" );
1:d847ced:         ps.setString( 5, "When lilacs last in the dooryard bloomd, And the great star early droopd in the western sky in the night, I mournd, and yet shall mourn with ever-returning spring." );
1:d847ced:         ps.executeUpdate();
1:d847ced: 
1:d847ced:         ps.close();
1:d847ced:     }
1:d847ced: 
1:d847ced:     private void    dropSchema( Connection conn )    throws Exception
1:d847ced:     {
1:d847ced:         goodStatement( conn, "drop table poems" );
1:d847ced:     }
1:d847ced:     
1:d847ced: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a4e6298
/////////////////////////////////////////////////////////////////////////
1:              "select * from table ( ruth.poems__poemText( 'star', 1000, null ) ) luceneResults order by poemID",
commit:4cedf31
/////////////////////////////////////////////////////////////////////////
0:              "select * from table ( ruth.poems__poemText( 'star', null, 1000, null ) ) luceneResults order by poemID",
commit:0b71ff5
/////////////////////////////////////////////////////////////////////////
0:              "select * from table ( ruth.poems__poemText( 'star', null, 1000, 0 ) ) luceneResults order by poemID",
commit:9cc25e2
/////////////////////////////////////////////////////////////////////////
0:              "select * from table ( ruth.poems__poemText( 'star', 1000, 0 ) ) luceneResults order by poemID",
commit:2277df2
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String      INDEX_POEMS = "call LuceneSupport.createIndex( 'ruth', 'poems', 'poemText', null )";
1:     private static  final   String      UPDATE_POEMS_INDEX = "call LuceneSupport.updateIndex( 'ruth', 'poems', 'poemText', null )";
/////////////////////////////////////////////////////////////////////////
0:              "select * from table ( ruth.poems__poemText( 'star', 0 ) ) luceneResults order by poemID",
1:                  { "3", "3", "2", "0.22933942" },
1:                  { "4", "4", "3", "0.22933942" },
1:                  { "5", "5", "4", "0.26756266" },
commit:cb62199
/////////////////////////////////////////////////////////////////////////
1:              "select schemaName, tableName, columnName from table ( LuceneSupport.listIndexes() ) listindexes",
1:                  { "RUTH", "POEMS", "POEMTEXT" },
commit:d847ced
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneCollationTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
0: import java.sql.SQLException;
1: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.util.ArrayList;
0: import java.util.Arrays;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.Decorator;
0: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * <p>
1:  * Test that the Lucene plugin works on databases with territory based collation enabled.
1:  * </p>
1:  */
1: public class LuceneCollationTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String      RUTH = "RUTH";
1: 
1:     private static  final   String      LOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', true )";
1:     private static  final   String      UNLOAD_TOOL = "call syscs_util.syscs_register_tool( 'luceneSupport', false )";
0:     private static  final   String      INDEX_POEMS = "call LuceneSupport.createIndex( 'ruth', 'poems', 'poemText' )";
0:     private static  final   String      UPDATE_POEMS_INDEX = "call LuceneSupport.updateIndex( 'ruth', 'poems', 'poemText' )";
1:     private static  final   String      DROP_POEMS_INDEX = "call LuceneSupport.dropIndex( 'ruth', 'poems', 'poemText' )";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public LuceneCollationTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
1:         Test        collationTest = Decorator.territoryCollatedDatabase
1:             (
1:              TestConfiguration.embeddedSuite( LuceneCollationTest.class ),
1:              "en"
1:              );
1: 
1:         //
1:         // Turn off the security manager. trying to override the default security manager
1:         // with a lucene-specific policy file fails because the decorators don't compose correctly.
1:         //
1:         return SecurityManagerSetup.noSecurityManager( collationTest );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Verify that the collation is what we expect.
1:      * </p>
1:      */
1:     public  void    test_001_collation()
1:         throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         assertResults
1:             (
1:              conn,
1:              "values syscs_util.syscs_get_database_property( 'derby.database.collation' )",
1:              new String[][]
1:              {
1:                  { "TERRITORY_BASED" },
1:              },
1:              true
1:              );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Verify that basic operations work with collation turned on.
1:      * </p>
1:      */
1:     public  void    test_002_basic()
1:         throws Exception
1:     {
1:         Connection  conn = openUserConnection( RUTH );
1: 
1:         createSchema( conn );
1: 
1:         goodStatement( conn, LOAD_TOOL );
1:         goodStatement( conn, INDEX_POEMS );
1:         goodStatement( conn, UPDATE_POEMS_INDEX );
1: 
1:         assertResults
1:             (
1:              conn,
0:              "select * from table ( ruth.poems__poemText( 'star', 0 ) ) luceneResults",
1:              new String[][]
1:              {
0:                  { "5", "5", "4", "0.3304931" },
0:                  { "3", "3", "2", "0.2832798" },
1:              },
1:              false
1:              );
1: 
1:         assertResults
1:             (
1:              conn,
0:              "select id, schemaName, tableName, columnName from table ( LuceneSupport.listIndexes() ) listindexes",
1:              new String[][]
1:              {
0:                  { "1", "RUTH", "POEMS", "POEMTEXT" },
1:              },
1:              false
1:              );
1:         
1:         goodStatement( conn, DROP_POEMS_INDEX );
1:         goodStatement( conn, UNLOAD_TOOL );
1: 
1:         dropSchema( conn );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private void    createSchema( Connection conn )  throws Exception
1:     {
1:         createPoemsTable( conn );
1:     }
1:     private void    createPoemsTable( Connection conn )
1:         throws Exception
1:     {
1:         goodStatement
1:             (
1:              conn,
1:              "create table poems\n" +
1:              "(\n" +
1:              "    poemID int,\n" +
1:              "    versionStamp int not null,\n" +
1:              "    originalAuthor       varchar( 50 ),\n" +
1:              "    lastEditor           varchar( 50 ),\n" +
1:              "    poemText            clob,\n" +
1:              "    constraint poemsKey primary key( poemID, versionStamp )\n" +
1:              ")\n"
1:              );
1: 
1:         PreparedStatement   ps = conn.prepareStatement( "insert into poems values ( ?, ?, ?, ?, ? )" );
1: 
1:         int     poemID = 1;
1:         int     versionStamp = 1;
1: 
1:         ps.setInt( 1, poemID++ );
1:         ps.setInt( 2, versionStamp++ );
1:         ps.setString( 3, "Geoffrey Chaucer" );
1:         ps.setString( 4, "Geoffrey Chaucer" );
1:         ps.setString( 5, "Whan that Aprill, with his shoures soote The droghte of March hath perced to the roote And bathed every veyne in swich licour, Of which vertu engendred is the flour;" );
1:         ps.executeUpdate();
1: 
1:         ps.setInt( 1, poemID++ );
1:         ps.setInt( 2, versionStamp++ );
1:         ps.setString( 3, "Andrew Marvell" );
1:         ps.setString( 4, "Andrew Marvell" );
1:         ps.setString( 5, "Had we but world enough, and time, This coyness, lady, were no crime." );
1:         ps.executeUpdate();
1: 
1:         ps.setInt( 1, poemID++ );
1:         ps.setInt( 2, versionStamp++ );
1:         ps.setString( 3, "John Milton" );
1:         ps.setString( 4, "John Milton" );
1:         ps.setString( 5, "From morn to noon he fell, from noon to dewy eve, a summers day, and with the setting sun dropped from the ze4ith like a falling star on Lemnos, the Aegean isle" );
1:         ps.executeUpdate();
1: 
1:         ps.setInt( 1, poemID++ );
1:         ps.setInt( 2, versionStamp++ );
1:         ps.setString( 3, "Lord Byron" );
1:         ps.setString( 4, "Lord Byron" );
1:         ps.setString( 5, "The Assyrian came down like the wolf on the fold, And his cohorts were gleaming in purple and gold; And the sheen of their spears was like stars on the sea, When the blue wave rolls nightly on deep Galilee." );
1:         ps.executeUpdate();
1: 
1:         ps.setInt( 1, poemID++ );
1:         ps.setInt( 2, versionStamp++ );
1:         ps.setString( 3, "Walt Whitman" );
1:         ps.setString( 4, "Walt Whitman" );
1:         ps.setString( 5, "When lilacs last in the dooryard bloomd, And the great star early droopd in the western sky in the night, I mournd, and yet shall mourn with ever-returning spring." );
1:         ps.executeUpdate();
1: 
1:         ps.close();
1:     }
1: 
1:     private void    dropSchema( Connection conn )    throws Exception
1:     {
1:         goodStatement( conn, "drop table poems" );
1:     }
1:     
1: }
============================================================================