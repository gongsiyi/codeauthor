1:a8908bd: /*
1:a8908bd:  
1:a8908bd:    Derby - Class org.apache.derby.client.am.UpdateSensitiveBlobLocatorInputStream
1:a8908bd:  
1:a8908bd:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a8908bd:    contributor license agreements.  See the NOTICE file distributed with
1:a8908bd:    this work for additional information regarding copyright ownership.
1:a8908bd:    The ASF licenses this file to You under the Apache License, Version 2.0
1:a8908bd:    (the "License"); you may not use this file except in compliance with
1:a8908bd:    the License.  You may obtain a copy of the License at
1:a8908bd:  
1:a8908bd:       http://www.apache.org/licenses/LICENSE-2.0
1:a8908bd:  
1:a8908bd:    Unless required by applicable law or agreed to in writing, software
1:a8908bd:    distributed under the License is distributed on an "AS IS" BASIS,
1:a8908bd:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8908bd:    See the License for the specific language governing permissions and
1:a8908bd:    limitations under the License.
1:a8908bd:  
1:a8908bd:  */
1:a8908bd: 
1:a8908bd: package org.apache.derby.client.am;
1:a8908bd: 
1:a8908bd: import java.io.InputStream;
1:a8908bd: 
1:a8908bd: /**
1:a8908bd:  * This class extends from the UpdateSensitiveLOBLocatorInputStream
1:a8908bd:  * and creates and returns an implementation of the Blob specific
1:a8908bd:  * locator InputStream. It also over-rides the reCreateStream method
1:a8908bd:  * which re-creates the underlying Blob locator stream whenever a
1:a8908bd:  * update happens on the Blob object associated with this stream.
1:a8908bd:  */
1:ee33904: class UpdateSensitiveBlobLocatorInputStream
1:a8908bd:         extends UpdateSensitiveLOBLocatorInputStream {
1:a8908bd:     //Stores the Blob instance associated with
1:a8908bd:     //this InputStream.
1:69e3d06:     private ClientBlob blob = null;
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * Creates an instance of the BlobLocatorInputStream
1:a8908bd:      * and and calls the super class constructors with 
1:a8908bd:      * appropriate initializers.
1:a8908bd:      *
1:90543a4:      * @param con connection to be used to read the
1:b13b17c:      *        {@code Blob} value from the server
1:b13b17c:      * @param blob {@code Blob} object that contains locator for
1:b13b17c:      *        the {@code Blob} value on the server.
1:a8908bd:      *
1:a8908bd:      * @throws SqlException If any exception occurs during stream
1:a8908bd:      *                      creation.
1:a8908bd:      */
1:69e3d06:     UpdateSensitiveBlobLocatorInputStream(
1:69e3d06:             ClientConnection con,
1:69e3d06:             ClientBlob blob) throws SqlException {
1:69e3d06: 
1:a8908bd:         super(con, blob, new BlobLocatorInputStream(con, blob));
1:a8908bd:         this.blob = blob;
1:a8908bd:     }
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * Creates an instance of the BlobLocatorInputStream.
1:a8908bd:      *
1:90543a4:      * @param con connection to be used to read the
1:b13b17c:      *        {@code Blob} value from the server
1:b13b17c:      * @param blob {@code Blob} object that contains locator for
1:b13b17c:      *        the {@code Blob} value on the server.
1:b13b17c:      * @param position the position in the {@code Blob} of the first
1:a8908bd:      *        byte to read.
1:a8908bd:      * @param length the maximum number of bytes to read from
1:b13b17c:      *        the {@code Blob}.
1:a8908bd:      *
1:a8908bd:      * @throws SqlException If any exception occurs during stream
1:a8908bd:      *                      creation.
1:a8908bd:      */
1:69e3d06:     UpdateSensitiveBlobLocatorInputStream(
1:69e3d06:             ClientConnection con,
1:69e3d06:             ClientBlob blob,
1:69e3d06:             long position,
1:69e3d06:             long length) throws SqlException {
1:69e3d06: 
1:a8908bd:         super(con, blob, 
1:a8908bd:                 new BlobLocatorInputStream(con, blob, position, length), 
1:a8908bd:                 position, length);
1:a8908bd:         this.blob = blob;
1:a8908bd:     }
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * Re-creates the underlying Locator stream
1:a8908bd:      * with the current position and the length
1:a8908bd:      * values if specified.
1:a8908bd:      *
1:a8908bd:      * @throws SqlException If any exception occurs while
1:a8908bd:      *                      re-creating the underlying streams.
1:a8908bd:      */
1:a8908bd:     protected InputStream reCreateStream() throws SqlException {
1:ee33904:         InputStream is_;
1:a8908bd:         
1:a8908bd:         //Verify if a subset of the underlying
1:a8908bd:         //LOB data was requested.
1:a8908bd:         if(length != -1) {
1:a8908bd:             //The length information is available.
1:a8908bd:             //It should be used while re-creating
1:a8908bd:             //the stream.
1:a8908bd:             is_ = new BlobLocatorInputStream(con, blob, currentPos, 
1:a8908bd:                     length - currentPos +1);
1:a8908bd:         }
1:a8908bd:         else {
1:a8908bd:             //The length information is not
1:a8908bd:             //available.
1:a8908bd:             is_ = new BlobLocatorInputStream(con, blob, currentPos, -1);
1:a8908bd:         }
1:a8908bd:         return is_;
1:a8908bd:     }
1:a8908bd: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1:     private ClientBlob blob = null;
/////////////////////////////////////////////////////////////////////////
1:     UpdateSensitiveBlobLocatorInputStream(
1:             ClientConnection con,
1:             ClientBlob blob) throws SqlException {
1: 
/////////////////////////////////////////////////////////////////////////
1:     UpdateSensitiveBlobLocatorInputStream(
1:             ClientConnection con,
1:             ClientBlob blob,
1:             long position,
1:             long length) throws SqlException {
1: 
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      *        {@code Blob} value from the server
1:      * @param blob {@code Blob} object that contains locator for
1:      *        the {@code Blob} value on the server.
/////////////////////////////////////////////////////////////////////////
1:      *        {@code Blob} value from the server
1:      * @param blob {@code Blob} object that contains locator for
1:      *        the {@code Blob} value on the server.
1:      * @param position the position in the {@code Blob} of the first
1:      *        the {@code Blob}.
commit:ee33904
/////////////////////////////////////////////////////////////////////////
1: class UpdateSensitiveBlobLocatorInputStream
/////////////////////////////////////////////////////////////////////////
0:     UpdateSensitiveBlobLocatorInputStream(Connection con, Blob blob)
/////////////////////////////////////////////////////////////////////////
0:     UpdateSensitiveBlobLocatorInputStream(Connection con, Blob blob,
/////////////////////////////////////////////////////////////////////////
1:         InputStream is_;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:90543a4
/////////////////////////////////////////////////////////////////////////
1:      * @param con connection to be used to read the
/////////////////////////////////////////////////////////////////////////
1:      * @param con connection to be used to read the
commit:a8908bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.UpdateSensitiveBlobLocatorInputStream
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am;
1: 
0: import java.io.BufferedInputStream;
1: import java.io.InputStream;
1: 
1: /**
1:  * This class extends from the UpdateSensitiveLOBLocatorInputStream
1:  * and creates and returns an implementation of the Blob specific
1:  * locator InputStream. It also over-rides the reCreateStream method
1:  * which re-creates the underlying Blob locator stream whenever a
1:  * update happens on the Blob object associated with this stream.
1:  */
0: public class UpdateSensitiveBlobLocatorInputStream 
1:         extends UpdateSensitiveLOBLocatorInputStream {
1:     //Stores the Blob instance associated with
1:     //this InputStream.
0:     private Blob blob = null;
1:     
1:     /**
1:      * Creates an instance of the BlobLocatorInputStream
1:      * and and calls the super class constructors with 
1:      * appropriate initializers.
1:      *
0:      * @param connection connection to be used to read the
0:      *        <code>Blob</code> value from the server
0:      * @param blob <code>Blob</code> object that contains locator for
0:      *        the <code>Blob</code> value on the server.
1:      *
1:      * @throws SqlException If any exception occurs during stream
1:      *                      creation.
1:      */
0:     public UpdateSensitiveBlobLocatorInputStream(Connection con, Blob blob)
0:     throws SqlException {
1:         super(con, blob, new BlobLocatorInputStream(con, blob));
1:         this.blob = blob;
1:     }
1:     
1:     /**
1:      * Creates an instance of the BlobLocatorInputStream.
1:      *
0:      * @param connection connection to be used to read the
0:      *        <code>Blob</code> value from the server
0:      * @param blob <code>Blob</code> object that contains locator for
0:      *        the <code>Blob</code> value on the server.
0:      * @param position the position in the <code>Blob</code> of the first
1:      *        byte to read.
1:      * @param length the maximum number of bytes to read from
0:      *        the <code>Blob</code>.
1:      *
1:      * @throws SqlException If any exception occurs during stream
1:      *                      creation.
1:      */
0:     public UpdateSensitiveBlobLocatorInputStream(Connection con, Blob blob,
0:             long position, long length) throws SqlException {
1:         super(con, blob, 
1:                 new BlobLocatorInputStream(con, blob, position, length), 
1:                 position, length);
1:         this.blob = blob;
1:     }
1:     
1:     /**
1:      * Re-creates the underlying Locator stream
1:      * with the current position and the length
1:      * values if specified.
1:      *
1:      * @throws SqlException If any exception occurs while
1:      *                      re-creating the underlying streams.
1:      */
1:     protected InputStream reCreateStream() throws SqlException {
0:         InputStream is_ = null;
1:         
1:         //Verify if a subset of the underlying
1:         //LOB data was requested.
1:         if(length != -1) {
1:             //The length information is available.
1:             //It should be used while re-creating
1:             //the stream.
1:             is_ = new BlobLocatorInputStream(con, blob, currentPos, 
1:                     length - currentPos +1);
1:         }
1:         else {
1:             //The length information is not
1:             //available.
1:             is_ = new BlobLocatorInputStream(con, blob, currentPos, -1);
1:         }
1:         return is_;
1:     }
1: }
============================================================================