1:fe8c4c2: /*
8:fe8c4c2: 
1:fe8c4c2:    Derby - Class org.apache.derby.impl.sql.catalog.RoleClosureIteratorImpl
1:fe8c4c2: 
1:fe8c4c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:fe8c4c2:    contributor license agreements.  See the NOTICE file distributed with
1:fe8c4c2:    this work for additional information regarding copyright ownership.
1:fe8c4c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:fe8c4c2:    (the "License"); you may not use this file except in compliance with
1:fe8c4c2:    the License.  You may obtain a copy of the License at
1:fe8c4c2: 
1:fe8c4c2:       http://www.apache.org/licenses/LICENSE-2.0
1:fe8c4c2: 
1:fe8c4c2:    Unless required by applicable law or agreed to in writing, software
1:fe8c4c2:    distributed under the License is distributed on an "AS IS" BASIS,
1:fe8c4c2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fe8c4c2:    See the License for the specific language governing permissions and
1:fe8c4c2:    limitations under the License.
1:fe8c4c2: 
2:fe8c4c2:  */
1:fe8c4c2: 
1:fe8c4c2: package org.apache.derby.impl.sql.catalog;
1:fe8c4c2: 
1:fe8c4c2: import java.util.List;
1:fe8c4c2: import java.util.HashMap;
1:fe8c4c2: import java.util.ArrayList;
1:fe8c4c2: import java.util.Iterator;
1:0674d16: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
1:0674d16: import org.apache.derby.iapi.sql.dictionary.RoleClosureIterator;
1:0674d16: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:0674d16: import org.apache.derby.iapi.store.access.TransactionController;
1:fe8c4c2: 
2:fe8c4c2: /**
1:fe8c4c2:  * Allows iterator over the role grant closure defined by the relation
1:fe8c4c2:  * <code>GRANT</code> role-a <code>TO</code> role-b, or its inverse.
1:fe8c4c2:  * <p>
1:fe8c4c2:  * The graph is represented as a <code>HashMap</code> where the key is
1:fe8c4c2:  * the node and the value is a List grant descriptors representing
1:fe8c4c2:  * outgoing arcs. The set constructed depends on whether <code>inverse</code>
1:fe8c4c2:  * was specified in the constructor.
1:fe8c4c2:  * @see org.apache.derby.iapi.sql.dictionary.RoleClosureIterator
1:0674d16:  */
1:fe8c4c2: public class RoleClosureIteratorImpl implements RoleClosureIterator
1:fe8c4c2: {
1:0674d16:     /**
1:fe8c4c2:      * true if closure is inverse of GRANT role-a TO role-b.
1:fe8c4c2:      */
1:fe8c4c2:     private final boolean inverse;
1:0674d16: 
1:fe8c4c2:     /**
1:fe8c4c2:      * Holds roles seen so far when computing the closure.
1:fe8c4c2:      * <ul>
1:fe8c4c2:      *   <li>Key: role name. Depending on value of {@code inverse}, the
1:fe8c4c2:      *       key represents and is compared against {@code roleName()}
1:fe8c4c2:      *       or {@code grantee()} of role descriptors visited.</li>
1:fe8c4c2:      *   <li>Value: none</li>
1:fe8c4c2:      * </ul>
1:fe8c4c2:      */
1:f2fad75:     private HashMap<String,Object> seenSoFar;
1:fe8c4c2: 
1:fe8c4c2:     /**
1:fe8c4c2:      * Holds the grant graph.
1:fe8c4c2:      * <ul>
1:fe8c4c2:      *   <li>key: role name</li>
1:fe8c4c2:      *   <li>value: list of {@code RoleGrantDescriptor}, making up outgoing arcs
1:fe8c4c2:      *        in graph</li>
1:fe8c4c2:      * </ul>
1:fe8c4c2:      */
1:f2fad75:     private HashMap<String,List<RoleGrantDescriptor>> graph;
1:fe8c4c2: 
1:fe8c4c2:     /**
1:fe8c4c2:      * Holds discovered, but not yet handed out, roles in the closure.
1:fe8c4c2:      */
1:f2fad75:     private List<RoleGrantDescriptor> lifo;
1:fe8c4c2: 
1:fe8c4c2:     /**
1:fe8c4c2:      * Last node returned by next; a logical pointer into the arcs
1:fe8c4c2:      * list of a node we are currently processing.
1:fe8c4c2:      */
1:f2fad75:     private Iterator<RoleGrantDescriptor> currNodeIter;
1:fe8c4c2: 
1:fe8c4c2:     /**
1:0674d16:      * DataDictionaryImpl used to get closure graph
1:0674d16:      */
1:0674d16:     private DataDictionaryImpl dd;
1:0674d16: 
1:0674d16:     /**
1:0674d16:      * TransactionController used to get closure graph
1:0674d16:      */
1:0674d16:     private TransactionController tc;
1:0674d16: 
1:0674d16:     /**
1:0674d16:      * The role for which we compute the closure.
1:0674d16:      */
1:0674d16:     private String root;
1:0674d16: 
1:0674d16:     /**
1:0674d16:      * true before next is called the first time
1:0674d16:      */
1:0674d16:     private boolean initial;
1:0674d16: 
1:0674d16:     /**
1:fe8c4c2:      * Constructor (package private).
1:fe8c4c2:      * Use {@code createRoleClosureIterator} to obtain an instance.
1:fe8c4c2:      * @see org.apache.derby.iapi.sql.dictionary.DataDictionary#createRoleClosureIterator
1:fe8c4c2:      *
1:fe8c4c2:      * @param root The role name for which to compute the closure
1:fe8c4c2:      * @param inverse If {@code true}, {@code graph} represents the
1:fe8c4c2:      *                grant<sup>-1</sup> relation.
1:0674d16:      * @param dd data dictionary
1:0674d16:      * @param tc transaction controller
1:fe8c4c2:      *
1:fe8c4c2:      */
1:fe8c4c2:     RoleClosureIteratorImpl(String root, boolean inverse,
1:0674d16:                             DataDictionaryImpl dd,
1:0674d16:                             TransactionController tc) {
1:fe8c4c2:         this.inverse = inverse;
1:0674d16:         this.graph = null;
1:0674d16:         this.root = root;
1:0674d16:         this.dd = dd;
1:0674d16:         this.tc = tc;
1:f2fad75:         seenSoFar = new HashMap<String,Object>();
1:f2fad75:         lifo      = new ArrayList<RoleGrantDescriptor>(); // remaining work stack
1:fe8c4c2: 
1:0674d16:         RoleGrantDescriptor dummy = new RoleGrantDescriptor
1:0674d16:             (null,
1:0674d16:              null,
1:0674d16:              inverse ? root : null,
1:0674d16:              inverse ? null : root,
1:0674d16:              null,
1:0674d16:              false,
1:0674d16:              false);
1:f2fad75:         List<RoleGrantDescriptor> dummyList = new ArrayList<RoleGrantDescriptor>();
1:0674d16:         dummyList.add(dummy);
1:0674d16:         currNodeIter = dummyList.iterator();
1:0674d16:         initial = true;
1:0674d16:     }
1:0674d16: 
1:0674d16: 
1:0674d16:     public String next() throws StandardException {
1:0674d16:         if (initial) {
1:0674d16:             // Optimization so we don't compute the closure for the current
1:0674d16:             // role if unnecessary (when next is only called once).
1:0674d16:             initial = false;
1:0674d16:             seenSoFar.put(root, null);
1:0674d16: 
1:0674d16:             return root;
1:0674d16: 
1:0674d16:         } else if (graph == null) {
1:0674d16:             // We get here the second time next is called.
1:0674d16:             graph = dd.getRoleGrantGraph(tc, inverse);
1:f2fad75:             List<RoleGrantDescriptor> outArcs = graph.get(root);
1:0674d16:             if (outArcs != null) {
1:0674d16:                 currNodeIter = outArcs.iterator();
1:0674d16:             }
1:0674d16:         }
1:0674d16: 
1:fe8c4c2:         RoleGrantDescriptor result = null;
1:fe8c4c2: 
1:fe8c4c2:         while (result == null) {
1:fe8c4c2:             while (currNodeIter.hasNext()) {
1:fe8c4c2:                 RoleGrantDescriptor r =
1:fe8c4c2:                     (RoleGrantDescriptor)currNodeIter.next();
1:fe8c4c2: 
1:fe8c4c2:                 if (seenSoFar.containsKey
1:fe8c4c2:                         (inverse ? r.getRoleName() : r.getGrantee())) {
1:fe8c4c2:                     continue;
2:fe8c4c2:                 } else {
1:fe8c4c2:                     lifo.add(r);
1:fe8c4c2:                     result = r;
1:fe8c4c2:                     break;
1:0674d16:                 }
5:fe8c4c2:             }
1:fe8c4c2: 
1:fe8c4c2:             if (result == null) {
1:fe8c4c2:                 // not more candidates located outgoing from the
1:fe8c4c2:                 // latest found node, pick another and continue
1:fe8c4c2:                 RoleGrantDescriptor newNode = null;
1:fe8c4c2: 
2:fe8c4c2:                 currNodeIter = null;
1:fe8c4c2: 
1:fe8c4c2:                 while (lifo.size() > 0 && currNodeIter == null) {
1:fe8c4c2: 
1:f2fad75:                     newNode = lifo.remove(lifo.size() - 1);
1:fe8c4c2: 
1:fe8c4c2:                     // In the example (see interface doc), the
1:fe8c4c2:                     // iterator of outgoing arcs for f (grant inverse)
1:fe8c4c2:                     // would contain {e,c,d}.
1:f2fad75:                     List<RoleGrantDescriptor> outArcs = graph.get(
1:fe8c4c2:                         inverse? newNode.getRoleName(): newNode.getGrantee());
1:fe8c4c2: 
1:fe8c4c2:                     if (outArcs != null) {
1:fe8c4c2:                         currNodeIter = outArcs.iterator();
1:fe8c4c2:                     } // else: leaf node, pop next candidate, if any
1:fe8c4c2:                 }
1:fe8c4c2: 
1:fe8c4c2:                 if (currNodeIter == null) {
1:fe8c4c2:                     // candidate stack is empty, done
1:fe8c4c2:                     currNodeIter = null;
1:fe8c4c2:                     break;
1:fe8c4c2:                 }
1:fe8c4c2:             }
1:fe8c4c2:         }
1:fe8c4c2: 
1:fe8c4c2:         if (result != null) {
1:0674d16:             String role = inverse ? result.getRoleName(): result.getGrantee();
1:0674d16:             seenSoFar.put(role, null);
1:0674d16:             return role;
1:fe8c4c2:         } else {
1:0674d16:             return null;
1:fe8c4c2:         }
1:fe8c4c2:     }
1:fe8c4c2: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f2fad75
/////////////////////////////////////////////////////////////////////////
1:     private HashMap<String,Object> seenSoFar;
/////////////////////////////////////////////////////////////////////////
1:     private HashMap<String,List<RoleGrantDescriptor>> graph;
1:     private List<RoleGrantDescriptor> lifo;
1:     private Iterator<RoleGrantDescriptor> currNodeIter;
/////////////////////////////////////////////////////////////////////////
1:         seenSoFar = new HashMap<String,Object>();
1:         lifo      = new ArrayList<RoleGrantDescriptor>(); // remaining work stack
/////////////////////////////////////////////////////////////////////////
1:         List<RoleGrantDescriptor> dummyList = new ArrayList<RoleGrantDescriptor>();
/////////////////////////////////////////////////////////////////////////
1:             List<RoleGrantDescriptor> outArcs = graph.get(root);
/////////////////////////////////////////////////////////////////////////
1:                     newNode = lifo.remove(lifo.size() - 1);
1:                     List<RoleGrantDescriptor> outArcs = graph.get(
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:12988c7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0674d16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.RoleClosureIterator;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.store.access.TransactionController;
/////////////////////////////////////////////////////////////////////////
1:      * DataDictionaryImpl used to get closure graph
1:      */
1:     private DataDictionaryImpl dd;
1: 
1:     /**
1:      * TransactionController used to get closure graph
1:      */
1:     private TransactionController tc;
1: 
1:     /**
1:      * The role for which we compute the closure.
1:      */
1:     private String root;
1: 
1:     /**
1:      * true before next is called the first time
1:      */
1:     private boolean initial;
1: 
1:     /**
0:      * true of iterator is open and next can be called
1:      */
0:     private boolean open;
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * @param dd data dictionary
1:      * @param tc transaction controller
1:                             DataDictionaryImpl dd,
1:                             TransactionController tc) {
1:         this.graph = null;
1:         this.root = root;
1:         this.dd = dd;
1:         this.tc = tc;
1:         RoleGrantDescriptor dummy = new RoleGrantDescriptor
1:             (null,
1:              null,
1:              inverse ? root : null,
1:              inverse ? null : root,
1:              null,
1:              false,
1:              false);
0:         List dummyList = new ArrayList();
1:         dummyList.add(dummy);
1:         currNodeIter = dummyList.iterator();
1:         initial = true;
0:         open = true;
1:     public String next() throws StandardException {
0:         if (!open) {
0:             if (SanityManager.DEBUG) {
0:                 SanityManager.
0:                     THROWASSERT("next called on a closed RoleClosureIterator");
1:             }
1: 
1:             return null;
1:         }
1: 
1:         if (initial) {
1:             // Optimization so we don't compute the closure for the current
1:             // role if unnecessary (when next is only called once).
1:             initial = false;
1:             seenSoFar.put(root, null);
1: 
1:             return root;
1: 
1:         } else if (graph == null) {
1:             // We get here the second time next is called.
1:             graph = dd.getRoleGrantGraph(tc, inverse);
0:             List outArcs = (List)graph.get(root);
1:             if (outArcs != null) {
1:                 currNodeIter = outArcs.iterator();
1:             }
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:             String role = inverse ? result.getRoleName(): result.getGrantee();
1:             seenSoFar.put(role, null);
1:             return role;
/////////////////////////////////////////////////////////////////////////
0:         open = false;
0:         seenSoFar = null;
0:         dd = null;
0:         tc = null;
commit:fe8c4c2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.RoleClosureIteratorImpl
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
0: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.RoleClosureIterator;
0: import org.apache.derby.iapi.error.StandardException;
1: import java.util.List;
1: import java.util.HashMap;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: 
1: /**
1:  * Allows iterator over the role grant closure defined by the relation
1:  * <code>GRANT</code> role-a <code>TO</code> role-b, or its inverse.
1:  * <p>
1:  * The graph is represented as a <code>HashMap</code> where the key is
1:  * the node and the value is a List grant descriptors representing
1:  * outgoing arcs. The set constructed depends on whether <code>inverse</code>
1:  * was specified in the constructor.
1:  * @see org.apache.derby.iapi.sql.dictionary.RoleClosureIterator
1:  */
1: public class RoleClosureIteratorImpl implements RoleClosureIterator
1: {
1:     /**
1:      * true if closure is inverse of GRANT role-a TO role-b.
1:      */
1:     private final boolean inverse;
1: 
1:     /**
1:      * Holds roles seen so far when computing the closure.
1:      * <ul>
1:      *   <li>Key: role name. Depending on value of {@code inverse}, the
1:      *       key represents and is compared against {@code roleName()}
1:      *       or {@code grantee()} of role descriptors visited.</li>
1:      *   <li>Value: none</li>
1:      * </ul>
1:      */
0:     private HashMap seenSoFar;
1: 
1:     /**
1:      * Holds the grant graph.
1:      * <ul>
1:      *   <li>key: role name</li>
1:      *   <li>value: list of {@code RoleGrantDescriptor}, making up outgoing arcs
1:      *        in graph</li>
1:      * </ul>
1:      */
0:     private HashMap graph;
1: 
1:     /**
1:      * Holds discovered, but not yet handed out, roles in the closure.
1:      */
0:     private List lifo;
1: 
1:     /**
1:      * Last node returned by next; a logical pointer into the arcs
1:      * list of a node we are currently processing.
1:      */
0:     private Iterator currNodeIter;
1: 
1:     /**
1:      * Constructor (package private).
1:      * Use {@code createRoleClosureIterator} to obtain an instance.
1:      * @see org.apache.derby.iapi.sql.dictionary.DataDictionary#createRoleClosureIterator
1:      *
1:      * @param root The role name for which to compute the closure
1:      * @param inverse If {@code true}, {@code graph} represents the
1:      *                grant<sup>-1</sup> relation.
0:      * @param graph The grant graph for which to construct a closure
0:      *              and iterator.
1:      *
1:      */
1:     RoleClosureIteratorImpl(String root, boolean inverse,
0:                             HashMap graph) {
1:         this.inverse = inverse;
0:         this.graph = graph;
1: 
0:         // we omit root from closure, so don't add it here.
0:         seenSoFar = new HashMap();
0:         lifo      = new ArrayList(); // remaining work stack
0:         // present iterator of outgoing arcs of the node we are
0:         // currently looking at
0:         List outgoingArcs = (List)graph.get(root);
0:         if (outgoingArcs != null) {
0:             this.currNodeIter = outgoingArcs.iterator();
1:         } else {
0:             // empty
0:             this.currNodeIter = new ArrayList().iterator();
1:         }
1: 
1: 
1:     }
1: 
1: 
0:     public String next() {
1:         RoleGrantDescriptor result = null;
1: 
1:         while (result == null) {
1:             while (currNodeIter.hasNext()) {
1:                 RoleGrantDescriptor r =
1:                     (RoleGrantDescriptor)currNodeIter.next();
1: 
1:                 if (seenSoFar.containsKey
1:                         (inverse ? r.getRoleName() : r.getGrantee())) {
1:                     continue;
1:                 } else {
1:                     lifo.add(r);
1:                     result = r;
1:                     break;
1:                 }
1:             }
1: 
1:             if (result == null) {
1:                 // not more candidates located outgoing from the
1:                 // latest found node, pick another and continue
1:                 RoleGrantDescriptor newNode = null;
1: 
1:                 currNodeIter = null;
1: 
1:                 while (lifo.size() > 0 && currNodeIter == null) {
1: 
0:                     newNode = (RoleGrantDescriptor)lifo.remove(lifo.size() - 1);
1: 
1:                     // In the example (see interface doc), the
1:                     // iterator of outgoing arcs for f (grant inverse)
1:                     // would contain {e,c,d}.
0:                     List outArcs = (List)graph.get(
1:                         inverse? newNode.getRoleName(): newNode.getGrantee());
1: 
1:                     if (outArcs != null) {
1:                         currNodeIter = outArcs.iterator();
1:                     } // else: leaf node, pop next candidate, if any
1:                 }
1: 
1:                 if (currNodeIter == null) {
1:                     // candidate stack is empty, done
1:                     currNodeIter = null;
1:                     break;
1:                 }
1:             }
1:         }
1: 
1:         if (result != null) {
0:             seenSoFar.put(inverse ? result.getRoleName(): result.getGrantee(),
0:                           null);
0:             return inverse ? result.getRoleName() : result.getGrantee();
1:         } else {
0:             return null;
1:         }
1:     }
1: 
1: 
0:     public void close() throws StandardException{
0:         seenSoFar = null;
0:         graph = null;
0:         lifo = null;
1:         currNodeIter = null;
1:     }
1: }
============================================================================