1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.daemon.Serviceable
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.daemon;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369:   To use a DaemonService, one implements the Serviceable interface.  Only one
1:eac0369:   DaemonService will call this at any given time.  However, if this Serviceable
1:eac0369:   object subscribes to or enqueues to the DeamonService multiple times, then
1:eac0369:   multiple DaemonService threads may call this Serviceable object at the same
1:eac0369:   time.  The Serviceable object must decide what synchronization it needs to
1:eac0369:   provide depending on what work it needs to do.
1:eac0369: 
1:eac0369:   The Serviceable interface does not provide a way to pass a work object to
1:eac0369:   identify what work needs to be done, it is assumed that the Serviceable
1:eac0369:   object knows that.  If a Serviceable object has different work for the
1:eac0369:   DaemonService to do, it must somehow encapsulate or identify the different
1:eac0369:   work by an intermediary object which implements the Serviceable interface and
1:eac0369:   which can an identify the different work and pass it along to the object that
1:eac0369:   can deal with them.
1:eac0369: */
1:eac0369: 
1:5d24b1a: public interface Serviceable {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Do whatever it is that you want the daemon to do for you. There may be
1:eac0369: 		multiple daemon objects on different thread calling performWork at the
1:eac0369: 		same time. 
1:eac0369: 
1:eac0369: 		The DaemonService will always call performWork with a context manager
1:eac0369: 		set up.  the DaemonService will clean up the context if an exception is
1:eac0369: 		thrown.  However, it is up to performWork to manage its own
1:eac0369: 		transaction.  If you start a transaction in performWork, you
1:eac0369: 		<B>must</B> commit or abort it at the end.  You may leave the
1:eac0369: 		transaction open so that other serviceable may use the transaction and
1:eac0369: 		context without starting a new one.  On the same token, there may
1:eac0369: 		already be an opened transaction on the context.  Serviceable
1:eac0369: 		performWork should always check the state of the context before use.
1:eac0369: 
1:eac0369: 		A Serviceable object should be well behaved while it is performing the
1:eac0369: 		daemon work, i.e., it should not take too many resources or hog the CPU
1:eac0369: 		for too long or deadlock with anyone else.
1:eac0369: 
1:eac0369: 		@param context the contextManager set up by the DaemonService.  There
1:eac0369: 		may or may not be the necessary context on it, depending on which other
1:eac0369: 		Serviceable object it has done work for.
1:eac0369: 		@return the return status is only significant if the Serviceable client
1:eac0369: 		was enqueued instead of subscribed.  For subscribed client, the return
1:eac0369: 		status is ignored.  For enqueue client, it returns DONE or REQUEUE.  If
1:eac0369: 		a REQUEUEd is returned, it would be desirable if this should not be
1:eac0369: 		serviceASAP, although no harm is done if this still maintains that this
1:eac0369: 		should be serviced ASAP ...
1:eac0369: 
1:3fd26f3: 	    @exception StandardException  Standard Derby exception policy
1:eac0369: 
1:eac0369: 		<P>MT - depends on the work.  Be wary of multiple DaemonService thread
1:eac0369: 		calling at the same time if you subscribe or enqueue multiple times.
1:eac0369: 	*/
1:eac0369: 	public int performWork(ContextManager context) throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/** return status for performWork - only meaningful for enqueued client */
1:eac0369: 	public static int DONE = 1;	// the daemon work is finished, the
1:eac0369: 								// DaemonService can get rid of this client
1:eac0369: 	public static int REQUEUE = 2;// the daemon work is not finished, requeue
1:eac0369: 								  // the request to be serviced again later.
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		If this work should be done as soon as possible, then return true.  
1:eac0369: 		If it doesn't make any difference if it is done sooner rather than
1:eac0369: 		later, then return false.  
1:eac0369: 
1:eac0369: 		The difference is whether or not the daemon service will be notified to
1:eac0369: 		work on this when this work is enqueued or subscribed, in case the
1:eac0369: 		serviceable work is put together but not sent to the daemon service
1:eac0369: 		directly, like in post commit processing
1:eac0369: 
1:eac0369: 		<P>MT - MT safe
1:eac0369: 	*/
1:eac0369: 	public boolean serviceASAP();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		If this work should be done immediately on the user thread then return true.  
1:eac0369: 		If it doesn't make any difference if this work is done on a the user thread
1:eac0369: 		immediately or if it is performed by another thread asynchronously
1:eac0369: 		later, then return false.  
1:eac0369: 	*/
1:eac0369: 	public boolean serviceImmediately();
1:eac0369: 
1:eac0369: }
1:eac0369: 
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 	    @exception StandardException  Standard Derby exception policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.daemon.Serviceable
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public interface Serviceable {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.daemon
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.daemon;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:   To use a DaemonService, one implements the Serviceable interface.  Only one
1:   DaemonService will call this at any given time.  However, if this Serviceable
1:   object subscribes to or enqueues to the DeamonService multiple times, then
1:   multiple DaemonService threads may call this Serviceable object at the same
1:   time.  The Serviceable object must decide what synchronization it needs to
1:   provide depending on what work it needs to do.
1: 
1:   The Serviceable interface does not provide a way to pass a work object to
1:   identify what work needs to be done, it is assumed that the Serviceable
1:   object knows that.  If a Serviceable object has different work for the
1:   DaemonService to do, it must somehow encapsulate or identify the different
1:   work by an intermediary object which implements the Serviceable interface and
1:   which can an identify the different work and pass it along to the object that
1:   can deal with them.
1: */
1: 
0: public interface Serviceable { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 		Do whatever it is that you want the daemon to do for you. There may be
1: 		multiple daemon objects on different thread calling performWork at the
1: 		same time. 
1: 
1: 		The DaemonService will always call performWork with a context manager
1: 		set up.  the DaemonService will clean up the context if an exception is
1: 		thrown.  However, it is up to performWork to manage its own
1: 		transaction.  If you start a transaction in performWork, you
1: 		<B>must</B> commit or abort it at the end.  You may leave the
1: 		transaction open so that other serviceable may use the transaction and
1: 		context without starting a new one.  On the same token, there may
1: 		already be an opened transaction on the context.  Serviceable
1: 		performWork should always check the state of the context before use.
1: 
1: 		A Serviceable object should be well behaved while it is performing the
1: 		daemon work, i.e., it should not take too many resources or hog the CPU
1: 		for too long or deadlock with anyone else.
1: 
1: 		@param context the contextManager set up by the DaemonService.  There
1: 		may or may not be the necessary context on it, depending on which other
1: 		Serviceable object it has done work for.
1: 		@return the return status is only significant if the Serviceable client
1: 		was enqueued instead of subscribed.  For subscribed client, the return
1: 		status is ignored.  For enqueue client, it returns DONE or REQUEUE.  If
1: 		a REQUEUEd is returned, it would be desirable if this should not be
1: 		serviceASAP, although no harm is done if this still maintains that this
1: 		should be serviced ASAP ...
1: 
0: 	    @exception StandardException  Standard cloudscape exception policy
1: 
1: 		<P>MT - depends on the work.  Be wary of multiple DaemonService thread
1: 		calling at the same time if you subscribe or enqueue multiple times.
1: 	*/
1: 	public int performWork(ContextManager context) throws StandardException;
1: 
1: 
1: 	/** return status for performWork - only meaningful for enqueued client */
1: 	public static int DONE = 1;	// the daemon work is finished, the
1: 								// DaemonService can get rid of this client
1: 	public static int REQUEUE = 2;// the daemon work is not finished, requeue
1: 								  // the request to be serviced again later.
1: 
1: 
1: 
1: 	/**
1: 		If this work should be done as soon as possible, then return true.  
1: 		If it doesn't make any difference if it is done sooner rather than
1: 		later, then return false.  
1: 
1: 		The difference is whether or not the daemon service will be notified to
1: 		work on this when this work is enqueued or subscribed, in case the
1: 		serviceable work is put together but not sent to the daemon service
1: 		directly, like in post commit processing
1: 
1: 		<P>MT - MT safe
1: 	*/
1: 	public boolean serviceASAP();
1: 
1: 
1: 	/**
1: 		If this work should be done immediately on the user thread then return true.  
1: 		If it doesn't make any difference if this work is done on a the user thread
1: 		immediately or if it is performed by another thread asynchronously
1: 		later, then return false.  
1: 	*/
1: 	public boolean serviceImmediately();
1: 
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.daemon
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.daemon;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:   To use a DaemonService, one implements the Serviceable interface.  Only one
0:   DaemonService will call this at any given time.  However, if this Serviceable
0:   object subscribes to or enqueues to the DeamonService multiple times, then
0:   multiple DaemonService threads may call this Serviceable object at the same
0:   time.  The Serviceable object must decide what synchronization it needs to
0:   provide depending on what work it needs to do.
0: 
0:   The Serviceable interface does not provide a way to pass a work object to
0:   identify what work needs to be done, it is assumed that the Serviceable
0:   object knows that.  If a Serviceable object has different work for the
0:   DaemonService to do, it must somehow encapsulate or identify the different
0:   work by an intermediary object which implements the Serviceable interface and
0:   which can an identify the different work and pass it along to the object that
0:   can deal with them.
0: */
0: 
0: public interface Serviceable { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		Do whatever it is that you want the daemon to do for you. There may be
0: 		multiple daemon objects on different thread calling performWork at the
0: 		same time. 
0: 
0: 		The DaemonService will always call performWork with a context manager
0: 		set up.  the DaemonService will clean up the context if an exception is
0: 		thrown.  However, it is up to performWork to manage its own
0: 		transaction.  If you start a transaction in performWork, you
0: 		<B>must</B> commit or abort it at the end.  You may leave the
0: 		transaction open so that other serviceable may use the transaction and
0: 		context without starting a new one.  On the same token, there may
0: 		already be an opened transaction on the context.  Serviceable
0: 		performWork should always check the state of the context before use.
0: 
0: 		A Serviceable object should be well behaved while it is performing the
0: 		daemon work, i.e., it should not take too many resources or hog the CPU
0: 		for too long or deadlock with anyone else.
0: 
0: 		@param context the contextManager set up by the DaemonService.  There
0: 		may or may not be the necessary context on it, depending on which other
0: 		Serviceable object it has done work for.
0: 		@return the return status is only significant if the Serviceable client
0: 		was enqueued instead of subscribed.  For subscribed client, the return
0: 		status is ignored.  For enqueue client, it returns DONE or REQUEUE.  If
0: 		a REQUEUEd is returned, it would be desirable if this should not be
0: 		serviceASAP, although no harm is done if this still maintains that this
0: 		should be serviced ASAP ...
0: 
0: 	    @exception StandardException  Standard cloudscape exception policy
0: 
0: 		<P>MT - depends on the work.  Be wary of multiple DaemonService thread
0: 		calling at the same time if you subscribe or enqueue multiple times.
0: 	*/
0: 	public int performWork(ContextManager context) throws StandardException;
0: 
0: 
0: 	/** return status for performWork - only meaningful for enqueued client */
0: 	public static int DONE = 1;	// the daemon work is finished, the
0: 								// DaemonService can get rid of this client
0: 	public static int REQUEUE = 2;// the daemon work is not finished, requeue
0: 								  // the request to be serviced again later.
0: 
0: 
0: 
0: 	/**
0: 		If this work should be done as soon as possible, then return true.  
0: 		If it doesn't make any difference if it is done sooner rather than
0: 		later, then return false.  
0: 
0: 		The difference is whether or not the daemon service will be notified to
0: 		work on this when this work is enqueued or subscribed, in case the
0: 		serviceable work is put together but not sent to the daemon service
0: 		directly, like in post commit processing
0: 
0: 		<P>MT - MT safe
0: 	*/
0: 	public boolean serviceASAP();
0: 
0: 
0: 	/**
0: 		If this work should be done immediately on the user thread then return true.  
0: 		If it doesn't make any difference if this work is done on a the user thread
0: 		immediately or if it is performed by another thread asynchronously
0: 		later, then return false.  
0: 	*/
0: 	public boolean serviceImmediately();
0: 
0: }
0: 
============================================================================