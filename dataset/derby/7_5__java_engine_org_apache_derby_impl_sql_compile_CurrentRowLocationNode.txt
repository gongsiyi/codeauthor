1:eac0369: /*
11:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.CurrentRowLocationNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import java.lang.reflect.Modifier;
1:f33fbaf: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:3bb140c: import org.apache.derby.iapi.services.compiler.LocalField;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * The CurrentRowLocation operator is used by DELETE and UPDATE to get the
1:eac0369:  * RowLocation of the current row for the target table.  The bind() operations
1:eac0369:  * for DELETE and UPDATE add a column to the target list of the SelectNode
1:eac0369:  * that represents the ResultSet to be deleted or updated.
1:eac0369:  */
1:eac0369: 
1:3bb140c: class CurrentRowLocationNode extends ValueNode
1:eac0369: {
1:3bb140c: 
1:3bb140c:     CurrentRowLocationNode(ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:     }
1:3bb140c: 
1:eac0369: 	/**
1:eac0369: 	 * Binding this expression means setting the result DataTypeServices.
1:eac0369: 	 * In this case, the result type is always the same.
1:eac0369: 	 *
1:eac0369: 	 * @param fromList			The FROM list for the statement.  This parameter
1:eac0369: 	 *							is not used in this case.
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode bindExpression(FromList fromList,
1:3bb140c:                              SubqueryList subqueryList,
1:3bb140c:                              List<AggregateNode> aggregates)
1:3bb140c:             throws StandardException
1:eac0369: 	{
1:eac0369: 		setType(new DataTypeDescriptor(TypeId.getBuiltInTypeId(TypeId.REF_NAME),
1:eac0369: 						false		/* Not nullable */
1:eac0369: 					)
1:eac0369: 				);
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * CurrentRowLocationNode is used in updates and deletes.  See generate() in
1:eac0369: 	 * UpdateNode and DeleteNode to get the full overview of generate().  This
1:eac0369: 	 * class is responsible for generating the method that will return the RowLocation
1:eac0369: 	 * for the next row to be updated or deleted.
1:eac0369: 	 *
1:eac0369: 	 * This routine will generate a method of the form:
1:eac0369: 	 *
1:eac0369: 	 *		private SQLRef	fieldx;
1:eac0369: 	 *
1:eac0369: 	 *		...
1:eac0369: 	 *
1:ab2cc4a:      *      protected DataValueDescriptor exprx()
1:eac0369: 	 *				throws StandardException
1:eac0369: 	 *		{
1:eac0369: 	 *			return fieldx = <SQLRefConstructor>(
1:eac0369: 	 *									"result set member".getRowLocation(),
1:eac0369: 	 *									fieldx);
1:eac0369: 	 *		}
1:eac0369: 	 * and return the generated code:
1:eac0369: 	 *    exprx()
1:eac0369: 	 *
1:eac0369: 	 * ("result set member" is a member of the generated class added by UpdateNode or
1:eac0369: 	 * DeleteNode.)
1:eac0369: 	 * This exprx function is used within another exprx function,
1:eac0369: 	 * and so doesn't need a static field or to be public; but
1:eac0369: 	 * at present, it has both. 
1:eac0369: 	 *
1:eac0369: 	 * fieldx is a generated field that is initialized to null when the
1:eac0369: 	 * activation is constructed.  getSQLRef will re-use fieldx on calls
1:eac0369: 	 * after the first call, rather than allocate a new SQLRef for each call.
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class being built
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mbex)
2:eac0369: 									throws StandardException
1:eac0369: 	{
1:eac0369: 		/* Generate a new method */
1:eac0369: 		/* only used within the other exprFuns, so can be private */
1:eac0369: 		MethodBuilder mb = acb.newGeneratedFun(ClassName.DataValueDescriptor, Modifier.PROTECTED);
1:eac0369: 		
1:eac0369: 		/* Allocate an object for re-use to hold the result of the operator */
1:eac0369: 		LocalField field =
1:eac0369: 			acb.newFieldDeclaration(Modifier.PRIVATE, ClassName.RefDataValue);
1:eac0369: 
1:eac0369: 
1:eac0369: 		/* Fill in the body of the method
1:eac0369: 		 * generates:
1:eac0369: 		 *    return TypeFactory.getSQLRef(this.ROWLOCATIONSCANRESULTSET.getRowLocation());
1:eac0369: 		 * and adds it to exprFun
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		mb.pushThis();
1:eac0369: 		mb.getField((String)null, acb.getRowLocationScanResultSetName(), ClassName.CursorResultSet);
1:eac0369: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getRowLocation", ClassName.RowLocation, 0);
1:eac0369: 
1:eac0369: 
1:ba7683c: 		acb.generateDataValue(mb, getTypeCompiler(), 
1:ba7683c: 				getTypeServices().getCollationType(), field);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Store the result of the method call in the field, so we can re-use
1:eac0369: 		** the object.
1:eac0369: 		*/
1:eac0369: 		mb.putField(field);
1:eac0369: 
1:eac0369: 		/* Stuff the full expression into a return statement and add that to the
1:eac0369: 		 * body of the new method.
1:eac0369: 		 */
1:eac0369: 		mb.methodReturn();
1:eac0369: 
1:eac0369: 		// complete the method
1:eac0369: 		mb.complete();
1:eac0369: 
1:eac0369: 		/* Generate the call to the new method */
1:eac0369: 		mbex.pushThis();
1:eac0369: 		mbex.callMethod(VMOpcode.INVOKEVIRTUAL, (String) null, mb.getName(), ClassName.DataValueDescriptor, 0);
1:eac0369: 	}
1:01217c2: 	
1:2706d1f:     boolean isEquivalent(ValueNode o)
1:01217c2: 	{
1:01217c2: 		return false;
1:01217c2: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     boolean isEquivalent(ValueNode o)
commit:ab2cc4a
/////////////////////////////////////////////////////////////////////////
1:      *      protected DataValueDescriptor exprx()
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
1: class CurrentRowLocationNode extends ValueNode
1: 
1:     CurrentRowLocationNode(ContextManager cm) {
1:         super(cm);
0:         setNodeType(C_NodeTypes.CURRENT_ROW_LOCATION_NODE);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode bindExpression(FromList fromList,
1:                              SubqueryList subqueryList,
1:                              List<AggregateNode> aggregates)
1:             throws StandardException
/////////////////////////////////////////////////////////////////////////
0:      *      DataValueDescriptor exprx()
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mbex)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
0:     ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List aggregates)
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 							List aggregateVector)
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:ba7683c
/////////////////////////////////////////////////////////////////////////
1: 		acb.generateDataValue(mb, getTypeCompiler(), 
1: 				getTypeServices().getCollationType(), field);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	protected boolean isEquivalent(ValueNode o)
1: 	{
1: 		return false;
1: 	}
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.CurrentRowLocationNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.RefDataValue;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: 
0: import org.apache.derby.iapi.services.compiler.ClassBuilder;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
1: 
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
1: import java.lang.reflect.Modifier;
0: import org.apache.derby.iapi.reference.ClassName;
1: 
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.catalog.TypeDescriptor;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * The CurrentRowLocation operator is used by DELETE and UPDATE to get the
1:  * RowLocation of the current row for the target table.  The bind() operations
1:  * for DELETE and UPDATE add a column to the target list of the SelectNode
1:  * that represents the ResultSet to be deleted or updated.
1:  */
1: 
0: public class CurrentRowLocationNode extends ValueNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	 * Binding this expression means setting the result DataTypeServices.
1: 	 * In this case, the result type is always the same.
1: 	 *
1: 	 * @param fromList			The FROM list for the statement.  This parameter
1: 	 *							is not used in this case.
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
0: 							Vector aggregateVector)
1: 					throws StandardException
1: 	{
1: 		setType(new DataTypeDescriptor(TypeId.getBuiltInTypeId(TypeId.REF_NAME),
1: 						false		/* Not nullable */
1: 					)
1: 				);
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * CurrentRowLocationNode is used in updates and deletes.  See generate() in
1: 	 * UpdateNode and DeleteNode to get the full overview of generate().  This
1: 	 * class is responsible for generating the method that will return the RowLocation
1: 	 * for the next row to be updated or deleted.
1: 	 *
1: 	 * This routine will generate a method of the form:
1: 	 *
1: 	 *		private SQLRef	fieldx;
1: 	 *
1: 	 *		...
1: 	 *
0: 	 *		public DataValueDescriptor exprx()
1: 	 *				throws StandardException
1: 	 *		{
1: 	 *			return fieldx = <SQLRefConstructor>(
1: 	 *									"result set member".getRowLocation(),
1: 	 *									fieldx);
1: 	 *		}
1: 	 * and return the generated code:
1: 	 *    exprx()
1: 	 *
1: 	 * ("result set member" is a member of the generated class added by UpdateNode or
1: 	 * DeleteNode.)
1: 	 * This exprx function is used within another exprx function,
1: 	 * and so doesn't need a static field or to be public; but
1: 	 * at present, it has both. 
1: 	 *
1: 	 * fieldx is a generated field that is initialized to null when the
1: 	 * activation is constructed.  getSQLRef will re-use fieldx on calls
1: 	 * after the first call, rather than allocate a new SQLRef for each call.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class being built
1: 	 *
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mbex)
1: 									throws StandardException
1: 	{
1: 		/* Generate a new method */
1: 		/* only used within the other exprFuns, so can be private */
1: 		MethodBuilder mb = acb.newGeneratedFun(ClassName.DataValueDescriptor, Modifier.PROTECTED);
1: 		
1: 		/* Allocate an object for re-use to hold the result of the operator */
1: 		LocalField field =
1: 			acb.newFieldDeclaration(Modifier.PRIVATE, ClassName.RefDataValue);
1: 
1: 
1: 		/* Fill in the body of the method
1: 		 * generates:
1: 		 *    return TypeFactory.getSQLRef(this.ROWLOCATIONSCANRESULTSET.getRowLocation());
1: 		 * and adds it to exprFun
1: 		 */
1: 
1: 		mb.pushThis();
1: 		mb.getField((String)null, acb.getRowLocationScanResultSetName(), ClassName.CursorResultSet);
1: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getRowLocation", ClassName.RowLocation, 0);
1: 
1: 
0: 		acb.generateDataValue(mb, getTypeCompiler(), field);
1: 
1: 		/*
1: 		** Store the result of the method call in the field, so we can re-use
1: 		** the object.
1: 		*/
1: 		mb.putField(field);
1: 
1: 		/* Stuff the full expression into a return statement and add that to the
1: 		 * body of the new method.
1: 		 */
1: 		mb.methodReturn();
1: 
1: 		// complete the method
1: 		mb.complete();
1: 
1: 		/* Generate the call to the new method */
1: 		mbex.pushThis();
1: 		mbex.callMethod(VMOpcode.INVOKEVIRTUAL, (String) null, mb.getName(), ClassName.DataValueDescriptor, 0);
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.RefDataValue;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: 
0: import org.apache.derby.iapi.services.compiler.ClassBuilder;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: 
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import java.lang.reflect.Modifier;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.catalog.TypeDescriptor;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * The CurrentRowLocation operator is used by DELETE and UPDATE to get the
0:  * RowLocation of the current row for the target table.  The bind() operations
0:  * for DELETE and UPDATE add a column to the target list of the SelectNode
0:  * that represents the ResultSet to be deleted or updated.
0:  */
0: 
0: public class CurrentRowLocationNode extends ValueNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Binding this expression means setting the result DataTypeServices.
0: 	 * In this case, the result type is always the same.
0: 	 *
0: 	 * @param fromList			The FROM list for the statement.  This parameter
0: 	 *							is not used in this case.
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
0: 							Vector aggregateVector)
0: 					throws StandardException
0: 	{
0: 		setType(new DataTypeDescriptor(TypeId.getBuiltInTypeId(TypeId.REF_NAME),
0: 						false		/* Not nullable */
0: 					)
0: 				);
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * CurrentRowLocationNode is used in updates and deletes.  See generate() in
0: 	 * UpdateNode and DeleteNode to get the full overview of generate().  This
0: 	 * class is responsible for generating the method that will return the RowLocation
0: 	 * for the next row to be updated or deleted.
0: 	 *
0: 	 * This routine will generate a method of the form:
0: 	 *
0: 	 *		private SQLRef	fieldx;
0: 	 *
0: 	 *		...
0: 	 *
0: 	 *		public DataValueDescriptor exprx()
0: 	 *				throws StandardException
0: 	 *		{
0: 	 *			return fieldx = <SQLRefConstructor>(
0: 	 *									"result set member".getRowLocation(),
0: 	 *									fieldx);
0: 	 *		}
0: 	 * and return the generated code:
0: 	 *    exprx()
0: 	 *
0: 	 * ("result set member" is a member of the generated class added by UpdateNode or
0: 	 * DeleteNode.)
0: 	 * This exprx function is used within another exprx function,
0: 	 * and so doesn't need a static field or to be public; but
0: 	 * at present, it has both. 
0: 	 *
0: 	 * fieldx is a generated field that is initialized to null when the
0: 	 * activation is constructed.  getSQLRef will re-use fieldx on calls
0: 	 * after the first call, rather than allocate a new SQLRef for each call.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class being built
0: 	 *
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mbex)
0: 									throws StandardException
0: 	{
0: 		/* Generate a new method */
0: 		/* only used within the other exprFuns, so can be private */
0: 		MethodBuilder mb = acb.newGeneratedFun(ClassName.DataValueDescriptor, Modifier.PROTECTED);
0: 		
0: 		/* Allocate an object for re-use to hold the result of the operator */
0: 		LocalField field =
0: 			acb.newFieldDeclaration(Modifier.PRIVATE, ClassName.RefDataValue);
0: 
0: 
0: 		/* Fill in the body of the method
0: 		 * generates:
0: 		 *    return TypeFactory.getSQLRef(this.ROWLOCATIONSCANRESULTSET.getRowLocation());
0: 		 * and adds it to exprFun
0: 		 */
0: 
0: 		mb.pushThis();
0: 		mb.getField((String)null, acb.getRowLocationScanResultSetName(), ClassName.CursorResultSet);
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getRowLocation", ClassName.RowLocation, 0);
0: 
0: 
0: 		acb.generateDataValue(mb, getTypeCompiler(), field);
0: 
0: 		/*
0: 		** Store the result of the method call in the field, so we can re-use
0: 		** the object.
0: 		*/
0: 		mb.putField(field);
0: 
0: 		/* Stuff the full expression into a return statement and add that to the
0: 		 * body of the new method.
0: 		 */
0: 		mb.methodReturn();
0: 
0: 		// complete the method
0: 		mb.complete();
0: 
0: 		/* Generate the call to the new method */
0: 		mbex.pushThis();
0: 		mbex.callMethod(VMOpcode.INVOKEVIRTUAL, (String) null, mb.getName(), ClassName.DataValueDescriptor, 0);
0: 	}
0: }
============================================================================