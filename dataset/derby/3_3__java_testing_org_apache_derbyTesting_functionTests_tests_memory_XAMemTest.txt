1:849dab2: /*
4:849dab2: 
1:849dab2:    Derby - Class org.apache.derbyTesting.functionTests.tests.memory.XAMemTest
1:849dab2: 
1:849dab2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:849dab2:    contributor license agreements.  See the NOTICE file distributed with
1:849dab2:    this work for additional information regarding copyright ownership.
1:849dab2:    The ASF licenses this file to You under the Apache License, Version 2.0
1:849dab2:    (the "License"); you may not use this file except in compliance with
1:849dab2:    the License.  You may obtain a copy of the License at
1:849dab2: 
1:849dab2:       http://www.apache.org/licenses/LICENSE-2.0
1:849dab2: 
1:849dab2:    Unless required by applicable law or agreed to in writing, software
1:849dab2:    distributed under the License is distributed on an "AS IS" BASIS,
1:849dab2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:849dab2:    See the License for the specific language governing permissions and
1:849dab2:    limitations under the License.
1:849dab2: 
1:849dab2:  */
1:849dab2: package org.apache.derbyTesting.functionTests.tests.memory;
1:849dab2: 
1:849dab2: import java.sql.Connection;
1:849dab2: import java.sql.SQLException;
1:849dab2: import java.sql.Statement;
1:849dab2: import javax.sql.XAConnection;
1:849dab2: import javax.sql.XADataSource;
1:849dab2: import javax.transaction.xa.XAResource;
1:849dab2: import javax.transaction.xa.Xid;
1:849dab2: import junit.framework.Test;
1:849dab2: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:849dab2: import org.apache.derbyTesting.junit.J2EEDataSource;
1:c0091b3: import org.apache.derbyTesting.junit.JDBC;
1:849dab2: import org.apache.derbyTesting.junit.TestConfiguration;
1:849dab2: import org.apache.derbyTesting.junit.XATestUtil;
1:849dab2: 
1:849dab2: /**
1:849dab2:  * Tests verifying that the memory usage for certain XA operations / access
1:849dab2:  * patterns isn't unreasonably high.
1:849dab2:  */
1:849dab2: public class XAMemTest
1:849dab2:         extends BaseJDBCTestCase {
1:849dab2: 
1:849dab2:     public XAMemTest(String name) {
1:849dab2:         super(name);
1:849dab2:     }
1:849dab2: 
1:849dab2:     public void setUp()
1:849dab2:             throws SQLException {
1:849dab2:         // Create the default wombat database if it doesn't exist.
1:849dab2:         // Required to run some of the test cases individually.
1:849dab2:         getConnection();
1:849dab2:     }
1:849dab2: 
1:849dab2:     /**
1:849dab2:      * DERBY-4137: Execute a bunch of successful XA transactions with a
1:849dab2:      * transaction timeout specified.
1:849dab2:      *
1:849dab2:      * @throws Exception if something goes wrong
1:849dab2:      */
1:849dab2:     public void testDerby4137_TransactionTimeoutSpecifiedNotExceeded()
1:849dab2:             throws Exception {
1:849dab2:         XADataSource xads = J2EEDataSource.getXADataSource();
1:849dab2:         XAConnection xac = xads.getXAConnection();
1:849dab2:         XAResource xar = xac.getXAResource();
1:849dab2:         Xid xid = XATestUtil.getXid(8, 9, 10);
1:849dab2:         Connection con = xac.getConnection();
1:849dab2:         Statement stmt = con.createStatement();
1:849dab2:         
1:849dab2:         // Set a long timeout such that the queue won't be able to clean
1:849dab2:         // itself as part of normal processing.
1:849dab2:         xar.setTransactionTimeout(100000);
1:849dab2:         
1:849dab2:         // 60'000 iterations was selected to balance duration versus chance of
1:849dab2:         // detecting a "memory leak". The test failed before DERBY-4137 was
1:849dab2:         // addressed.
1:849dab2:         for (int i=0; i < 60000; i++) {
1:849dab2:             xar.start(xid, XAResource.TMNOFLAGS);
1:849dab2:             stmt.executeQuery("values 1");    
1:849dab2:             xar.end(xid, XAResource.TMSUCCESS);
1:849dab2:             xar.commit(xid, true);
1:849dab2:         }
1:849dab2:         xac.close();
1:849dab2:     }
1:849dab2: 
1:849dab2:     public static Test suite() {
1:c0091b3:         if (JDBC.vmSupportsJDBC3()) {
1:c0091b3:             return TestConfiguration.defaultSuite(XAMemTest.class);
1:c0091b3:         }
1:c0091b3: 
1:1ae02c9:         return new BaseTestSuite(
1:1ae02c9:             "XAMemTest skipped - XADataSource not available");
1:849dab2:     }
1:849dab2: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(
1:             "XAMemTest skipped - XADataSource not available");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c0091b3
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJDBC3()) {
1:             return TestConfiguration.defaultSuite(XAMemTest.class);
1:         }
1: 
0:         return new TestSuite("XAMemTest skipped - XADataSource not available");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:849dab2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.memory.XAMemTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.memory;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import javax.sql.XAConnection;
1: import javax.sql.XADataSource;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.J2EEDataSource;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.XATestUtil;
1: 
1: /**
1:  * Tests verifying that the memory usage for certain XA operations / access
1:  * patterns isn't unreasonably high.
1:  */
1: public class XAMemTest
1:         extends BaseJDBCTestCase {
1: 
1:     public XAMemTest(String name) {
1:         super(name);
1:     }
1: 
1:     public void setUp()
1:             throws SQLException {
1:         // Create the default wombat database if it doesn't exist.
1:         // Required to run some of the test cases individually.
1:         getConnection();
1:     }
1: 
1:     /**
1:      * DERBY-4137: Execute a bunch of successful XA transactions with a
1:      * transaction timeout specified.
1:      *
1:      * @throws Exception if something goes wrong
1:      */
1:     public void testDerby4137_TransactionTimeoutSpecifiedNotExceeded()
1:             throws Exception {
1:         XADataSource xads = J2EEDataSource.getXADataSource();
1:         XAConnection xac = xads.getXAConnection();
1:         XAResource xar = xac.getXAResource();
1:         Xid xid = XATestUtil.getXid(8, 9, 10);
1:         Connection con = xac.getConnection();
1:         Statement stmt = con.createStatement();
1:         
1:         // Set a long timeout such that the queue won't be able to clean
1:         // itself as part of normal processing.
1:         xar.setTransactionTimeout(100000);
1:         
1:         // 60'000 iterations was selected to balance duration versus chance of
1:         // detecting a "memory leak". The test failed before DERBY-4137 was
1:         // addressed.
1:         for (int i=0; i < 60000; i++) {
1:             xar.start(xid, XAResource.TMNOFLAGS);
1:             stmt.executeQuery("values 1");    
1:             xar.end(xid, XAResource.TMSUCCESS);
1:             xar.commit(xid, true);
1:         }
1:         xac.close();
1:     }
1: 
1:     public static Test suite() {
0:         return TestConfiguration.defaultSuite(XAMemTest.class);
1:     }
1: }
============================================================================