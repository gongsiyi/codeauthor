1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_Key
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 
1:2bc809f: 	Key for these objects is an array of objects
1:2bc809f: 
1:2bc809f: 	value - Integer or String - implies what object should be used in the cache.
1:2bc809f: 	waitms - time to wait in ms on a set or create (simulates the object being loaded into the cache).
1:2bc809f: 	canFind - true of the object can be found on a set, false if it can't. (simulates a request for a non-existent object)
1:2bc809f: 	raiseException - true if an exception should be raised during set or create identity
1:2bc809f: 
1:2bc809f: 
1:2bc809f: */
1:2bc809f: public class T_Key  {
1:2bc809f: 
1:2bc809f: 	private Object	value;
1:2bc809f: 	private long		waitms;
1:2bc809f: 	private boolean   canFind;
1:2bc809f: 	private boolean   raiseException;
1:2bc809f: 
1:2bc809f: 	public static T_Key		simpleInt(int value) {
1:39b3237: 		return new T_Key(value, 0, true, false);
1:2bc809f: 	}
1:2bc809f: 	public static T_Key		dontFindInt(int value) {
1:39b3237: 		return new T_Key(value, 0, false, false);
1:2bc809f: 	}
1:2bc809f: 	public static T_Key		exceptionInt(int value) {
1:39b3237: 		return new T_Key(value, 0, true, true);
1:2bc809f: 	}
1:2bc809f: 	
1:2bc809f: 	/**
1:2bc809f: 		48%/48%/4% chance of Int/String/invalid key
1:2bc809f: 		90%/5%/5% chance of can find / can't find / raise exception
1:2bc809f: 	*/
1:2bc809f: 	public static T_Key randomKey() {
1:2bc809f: 
1:2bc809f: 		double rand = Math.random();
1:2bc809f: 		T_Key tkey = new T_Key();
1:2bc809f: 
1:2bc809f: 		if (rand < 0.48)
1:39b3237: 			tkey.value = (int) (100.0 * rand);
1:2bc809f: 		else if (rand < 0.96)
1:39b3237: 			tkey.value = (int) (100.0 * rand);
1:2bc809f: 		else
1:2bc809f: 			tkey.value = Boolean.FALSE;
1:2bc809f: 
1:2bc809f: 		rand = Math.random();
1:2bc809f: 
1:2bc809f: 		if (rand < 0.90)
1:2bc809f: 			tkey.canFind = true;
1:2bc809f: 		else if (rand < 0.95)
1:2bc809f: 			tkey.canFind = false;
1:2bc809f: 		else {
1:2bc809f: 			tkey.canFind = true;
1:2bc809f: 			tkey.raiseException = false;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		rand = Math.random();
1:2bc809f: 
1:2bc809f: 		if (rand < 0.30) {
1:2bc809f: 			tkey.waitms = (long) (rand * 1000.0); // Range 0 - 0.3 secs
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		return tkey;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private T_Key() {
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	private T_Key(Object value, long waitms, boolean canFind, boolean raiseException) {
1:2bc809f: 
1:2bc809f: 		this.value = value;
1:2bc809f: 		this.waitms = waitms;
1:2bc809f: 		this.canFind = canFind;
1:2bc809f: 		this.raiseException = raiseException;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public Object getValue() {
1:2bc809f: 		return value;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public long getWait() {
1:2bc809f: 		return waitms;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean canFind() {
1:2bc809f: 		return canFind;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean raiseException() {
1:2bc809f: 		return raiseException;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean equals(Object other) {
1:2bc809f: 		if (other instanceof T_Key) {
1:2bc809f: 			return value.equals(((T_Key) other).value);
1:2bc809f: 		}
1:2bc809f: 		return false;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public int hashCode() {
1:2bc809f: 		return value.hashCode();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public String toString() {
1:2bc809f: 		return value + " " + waitms + " " + canFind + " " + raiseException;
1:2bc809f: 	}
1:2bc809f: }
1:2bc809f: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1: 		return new T_Key(value, 0, true, false);
1: 		return new T_Key(value, 0, false, false);
1: 		return new T_Key(value, 0, true, true);
/////////////////////////////////////////////////////////////////////////
1: 			tkey.value = (int) (100.0 * rand);
1: 			tkey.value = (int) (100.0 * rand);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_Key
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: /**
1: 
1: 	Key for these objects is an array of objects
1: 
1: 	value - Integer or String - implies what object should be used in the cache.
1: 	waitms - time to wait in ms on a set or create (simulates the object being loaded into the cache).
1: 	canFind - true of the object can be found on a set, false if it can't. (simulates a request for a non-existent object)
1: 	raiseException - true if an exception should be raised during set or create identity
1: 
1: 
1: */
1: public class T_Key  {
1: 
1: 	private Object	value;
1: 	private long		waitms;
1: 	private boolean   canFind;
1: 	private boolean   raiseException;
1: 
1: 	public static T_Key		simpleInt(int value) {
0: 		return new T_Key(new Integer(value), 0, true, false);
1: 	}
1: 	public static T_Key		dontFindInt(int value) {
0: 		return new T_Key(new Integer(value), 0, false, false);
1: 	}
1: 	public static T_Key		exceptionInt(int value) {
0: 		return new T_Key(new Integer(value), 0, true, true);
1: 	}
1: 	
1: 	/**
1: 		48%/48%/4% chance of Int/String/invalid key
1: 		90%/5%/5% chance of can find / can't find / raise exception
1: 	*/
1: 	public static T_Key randomKey() {
1: 
1: 		double rand = Math.random();
1: 		T_Key tkey = new T_Key();
1: 
1: 		if (rand < 0.48)
0: 			tkey.value = new Integer((int) (100.0 * rand));
1: 		else if (rand < 0.96)
0: 			tkey.value = new Integer((int) (100.0 * rand));
1: 		else
1: 			tkey.value = Boolean.FALSE;
1: 
1: 		rand = Math.random();
1: 
1: 		if (rand < 0.90)
1: 			tkey.canFind = true;
1: 		else if (rand < 0.95)
1: 			tkey.canFind = false;
1: 		else {
1: 			tkey.canFind = true;
1: 			tkey.raiseException = false;
1: 		}
1: 
1: 		rand = Math.random();
1: 
1: 		if (rand < 0.30) {
1: 			tkey.waitms = (long) (rand * 1000.0); // Range 0 - 0.3 secs
1: 		}
1: 
1: 		return tkey;
1: 	}
1: 
1: 	private T_Key() {
1: 	}
1: 
1: 
1: 	private T_Key(Object value, long waitms, boolean canFind, boolean raiseException) {
1: 
1: 		this.value = value;
1: 		this.waitms = waitms;
1: 		this.canFind = canFind;
1: 		this.raiseException = raiseException;
1: 	}
1: 
1: 	public Object getValue() {
1: 		return value;
1: 	}
1: 
1: 	public long getWait() {
1: 		return waitms;
1: 	}
1: 
1: 	public boolean canFind() {
1: 		return canFind;
1: 	}
1: 
1: 	public boolean raiseException() {
1: 		return raiseException;
1: 	}
1: 
1: 	public boolean equals(Object other) {
1: 		if (other instanceof T_Key) {
1: 			return value.equals(((T_Key) other).value);
1: 		}
1: 		return false;
1: 	}
1: 
1: 	public int hashCode() {
1: 		return value.hashCode();
1: 	}
1: 
1: 	public String toString() {
1: 		return value + " " + waitms + " " + canFind + " " + raiseException;
1: 	}
1: }
1: 
============================================================================