1:f68f62f: /*
2:f68f62f: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.util.T_Access
1:f68f62f: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
1:f68f62f:  */
1:f68f62f: 
1:f68f62f: package org.apache.derbyTesting.functionTests.util;
1:f68f62f: 
1:f68f62f: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:f68f62f: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1:f68f62f: import org.apache.derby.iapi.store.access.AccessFactory;
1:f68f62f: import java.sql.SQLException;
1:f68f62f: 
1:f68f62f: /**
1:f68f62f:    This class provides mechanism to call access Factory methods  from sql-j.
1:f68f62f:   */
1:f68f62f: 
1:f68f62f: public class T_Access
1:f68f62f: {
1:f68f62f: 
1:f68f62f: 	public static AccessFactory getAccessFactory() throws SQLException
1:f68f62f: 	{
1:f68f62f: 		LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
1:1985a18: 		return lcc.getTransactionExecute().getAccessManager();
1:f68f62f: 	}
1:f68f62f: 
1:f68f62f: 	/*
1:f68f62f: 	 *Followng call waits until post commit thread queue is empty.
1:f68f62f: 	 *This call is useful for tests which checks for the following type
1:f68f62f: 	 *of cases:
1:f68f62f: 	 *  1) Checking for space usage after delete statements
1:f68f62f: 	 *  2) Checking for locks when delete statements are involved,
1:f68f62f: 	 *     because post commit thread might be holding locks when
1:f68f62f: 	 *     checking for snap shot of locks, so best thing to do
1:f68f62f: 	 *     to get consistent results is to call the following function
1:f68f62f: 	 *     before checking for locks (eg: store/updatelocks.sql)
1:f68f62f: 	 *  3) Depending on whethere the  space is not released yet by the post commit thread
1:f68f62f: 	 *     for commited deletes or not can change the order of rows in the heap.
1:f68f62f: 	 *     In such cases , it is good idea to call this method before doing
1:f68f62f: 	 *     inserts(Even adding/dropping constraints can have effect because they
1:f68f62f: 	 *     do inderectly deletes/inserts on system tables.) eg: lang/fk_nonsps.sql
1:f68f62f: 	 */
1:f68f62f: 	public static void waitForPostCommitToFinish() throws SQLException
1:f68f62f: 	{
1:f68f62f: 			AccessFactory af = getAccessFactory();
1:f68f62f: 			af.waitForPostCommitToFinishWork();
1:f68f62f: 	}
1:f68f62f: }
1:f68f62f: 
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1985a18
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		return lcc.getTransactionExecute().getAccessManager();
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.T_Access
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
0: import org.apache.derby.iapi.error.StandardException; 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionFactory;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.store.access.AccessFactory;
0: import org.apache.derby.iapi.error.PublicAPI;
1: import java.sql.SQLException;
1: 
1: /**
1:    This class provides mechanism to call access Factory methods  from sql-j.
1:   */
1: 
1: public class T_Access
1: {
1: 
1: 	public static AccessFactory getAccessFactory() throws SQLException
1: 	{
1: 		LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
0: 		LanguageConnectionFactory lcf = lcc.getLanguageConnectionFactory();
0: 		return (AccessFactory)lcf.getAccessFactory();
1: 	}
1: 
1: 	/*
1: 	 *Followng call waits until post commit thread queue is empty.
1: 	 *This call is useful for tests which checks for the following type
1: 	 *of cases:
1: 	 *  1) Checking for space usage after delete statements
1: 	 *  2) Checking for locks when delete statements are involved,
1: 	 *     because post commit thread might be holding locks when
1: 	 *     checking for snap shot of locks, so best thing to do
1: 	 *     to get consistent results is to call the following function
1: 	 *     before checking for locks (eg: store/updatelocks.sql)
1: 	 *  3) Depending on whethere the  space is not released yet by the post commit thread
1: 	 *     for commited deletes or not can change the order of rows in the heap.
1: 	 *     In such cases , it is good idea to call this method before doing
1: 	 *     inserts(Even adding/dropping constraints can have effect because they
1: 	 *     do inderectly deletes/inserts on system tables.) eg: lang/fk_nonsps.sql
1: 	 */
1: 	public static void waitForPostCommitToFinish() throws SQLException
1: 	{
1: 			AccessFactory af = getAccessFactory();
1: 			af.waitForPostCommitToFinishWork();
1: 	}
1: }
1: 
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.util.T_Access
0: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.util
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.util;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionFactory;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.access.AccessFactory;
0: import org.apache.derby.iapi.error.PublicAPI;
0: import java.sql.SQLException;
0: 
0: /**
0:    This class provides mechanism to call access Factory methods  from sql-j.
0:   */
0: 
0: public class T_Access
0: { 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 
0: 	public static AccessFactory getAccessFactory() throws SQLException
0: 	{
0: 		LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
0: 		LanguageConnectionFactory lcf = lcc.getLanguageConnectionFactory();
0: 		return (AccessFactory)lcf.getAccessFactory();
0: 	}
0: 
0: 	/*
0: 	 *Followng call waits until post commit thread queue is empty.
0: 	 *This call is useful for tests which checks for the following type
0: 	 *of cases:
0: 	 *  1) Checking for space usage after delete statements
0: 	 *  2) Checking for locks when delete statements are involved,
0: 	 *     because post commit thread might be holding locks when
0: 	 *     checking for snap shot of locks, so best thing to do
0: 	 *     to get consistent results is to call the following function
0: 	 *     before checking for locks (eg: store/updatelocks.sql)
0: 	 *  3) Depending on whethere the  space is not released yet by the post commit thread
0: 	 *     for commited deletes or not can change the order of rows in the heap.
0: 	 *     In such cases , it is good idea to call this method before doing
0: 	 *     inserts(Even adding/dropping constraints can have effect because they
0: 	 *     do inderectly deletes/inserts on system tables.) eg: lang/fk_nonsps.sql
0: 	 */
0: 	public static void waitForPostCommitToFinish() throws SQLException
0: 	{
0: 			AccessFactory af = getAccessFactory();
0: 			af.waitForPostCommitToFinishWork();
0: 	}
0: }
0: 
============================================================================