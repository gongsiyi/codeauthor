1:9c8b07b: /*
1:9c8b07b: 
1:9c8b07b:    Derby - Class org.apache.derbyBuild.TagReader
1:9c8b07b: 
1:9c8b07b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:9c8b07b:    contributor license agreements.  See the NOTICE file distributed with
1:9c8b07b:    this work for additional information regarding copyright ownership.
1:9c8b07b:    The ASF licenses this file to You under the Apache License, Version 2.0
1:9c8b07b:    (the "License"); you may not use this file except in compliance with
1:9c8b07b:    the License.  You may obtain a copy of the License at
1:9c8b07b: 
1:9c8b07b:       http://www.apache.org/licenses/LICENSE-2.0
1:9c8b07b: 
1:9c8b07b:    Unless required by applicable law or agreed to in writing, software
1:9c8b07b:    distributed under the License is distributed on an "AS IS" BASIS,
1:9c8b07b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9c8b07b:    See the License for the specific language governing permissions and
1:9c8b07b:    limitations under the License.
1:9c8b07b: 
1:9c8b07b:  */
1:9c8b07b: 
1:9c8b07b: package org.apache.derbyBuild;
1:9c8b07b: 
1:9c8b07b: import java.io.*;
1:9c8b07b: import java.text.ParseException;
1:9c8b07b: 
1:9c8b07b: /**
1:9c8b07b:  * <p>
1:9c8b07b:  * This little machine is constructed from an xml/html document/element and is used to parse
1:9c8b07b:  * content inside that element. This machine advances through the element,
1:9c8b07b:  * letting the operator look for substrings. This machine was created to read
1:9c8b07b:  * elements in JIRA's html reports, which are not well-formed xml documents.
1:9c8b07b:  * </p>
1:9c8b07b:  *
1:9c8b07b:  * <p>
1:9c8b07b:  * To operate the TagReader, keep positioning on substrings, following some
1:9c8b07b:  * pattern which allows you to navigate to the content you need.
1:9c8b07b:  * </p>
1:9c8b07b:  */
1:9c8b07b: public class TagReader
1:9c8b07b: {
1:9c8b07b:     /////////////////////////////////////////////////////////////////////////
1:9c8b07b:     //
1:9c8b07b:     //  CONSTANTS
1:9c8b07b:     //
1:9c8b07b:     /////////////////////////////////////////////////////////////////////////
1:9c8b07b: 
1:9c8b07b:     private static final int NOT_FOUND = -1;
1:9c8b07b:     
1:9c8b07b:     /////////////////////////////////////////////////////////////////////////
1:9c8b07b:     //
1:9c8b07b:     //  STATE
1:9c8b07b:     //
1:9c8b07b:     /////////////////////////////////////////////////////////////////////////f
1:9c8b07b: 
1:9c8b07b:     private String _content;
1:9c8b07b:     private int _cursor;
1:9c8b07b: 
1:9c8b07b:     /////////////////////////////////////////////////////////////////////////
1:9c8b07b:     //
1:9c8b07b:     //  CONSTRUCTORS
1:9c8b07b:     //
1:9c8b07b:     /////////////////////////////////////////////////////////////////////////
1:9c8b07b: 
1:9c8b07b:     /** Wrap a TagReader around a piece of content */
1:9c8b07b:     public TagReader( String content )
1:9c8b07b:     {
1:9c8b07b:         if ( content == null ) { content = ""; }
1:9c8b07b:         
1:9c8b07b:         _content = content;
1:9c8b07b: 
1:9c8b07b:         init();
1:9c8b07b:     }
1:9c8b07b: 
1:9c8b07b:     /** Wrap a TagReader around the content siphoned out of a stream */
1:9c8b07b:     public TagReader( InputStream is ) throws IOException
1:9c8b07b:     {
1:9c8b07b:         StringWriter buffer = new StringWriter();
1:9c8b07b: 
1:9c8b07b:         while( true )
1:9c8b07b:         {
1:9c8b07b:             int nextChar = is.read();
1:9c8b07b:             if ( nextChar < 0 ) { break; }
1:9c8b07b: 
1:9c8b07b:             buffer.write( nextChar );
1:9c8b07b:         }
1:9c8b07b: 
1:9c8b07b:         _content = buffer.toString();
1:9c8b07b: 
1:9c8b07b:         is.close();
1:9c8b07b: 
1:9c8b07b:         init();
1:9c8b07b:     }
1:9c8b07b: 
1:9c8b07b:     /** Initialization common to all constructors */
1:9c8b07b:     private void init()
1:9c8b07b:     {
1:9c8b07b:         reset();
1:9c8b07b:     }
1:9c8b07b: 
1:9c8b07b:     /////////////////////////////////////////////////////////////////////////
1:9c8b07b:     //
1:9c8b07b:     //  PUBLIC BEHAVIOR
1:9c8b07b:     //
1:9c8b07b:     /////////////////////////////////////////////////////////////////////////
1:9c8b07b: 
1:9c8b07b:     /**
1:9c8b07b:      * <p>
1:9c8b07b:      * Resets the reader to the beginning of the content.
1:9c8b07b:      * </p>
1:9c8b07b:      */
1:9c8b07b:     public void reset()
1:9c8b07b:     {
1:9c8b07b:         _cursor = 0;
1:9c8b07b:     }
1:9c8b07b:     
1:9c8b07b:     /**
1:9c8b07b:      * <p>
1:9c8b07b:      * Starting at the current position, search for a substring in the content. If the substring is found, positions
1:9c8b07b:      * the reader AFTER the substring and returns that new cursor position. If the
1:9c8b07b:      * substring is not found, does not advance the cursor, but returns -1.
1:9c8b07b:      * </p>
1:9c8b07b:      */
1:9c8b07b:     public int position( String tag, boolean failIfNotFound ) throws ParseException
1:9c8b07b:     {
1:9c8b07b:         int retval = NOT_FOUND;
1:9c8b07b:         
1:9c8b07b:         if ( _cursor < _content.length() )
1:9c8b07b:         {
1:9c8b07b:             retval = _content.indexOf( tag, _cursor );
1:9c8b07b: 
1:9c8b07b:             if ( retval < 0 ) { retval = NOT_FOUND; }
1:9c8b07b:             else
1:9c8b07b:             {
1:9c8b07b:                 retval += tag.length();
1:9c8b07b:                 _cursor = retval;
1:9c8b07b:             }
1:9c8b07b:         }
1:9c8b07b: 
1:9c8b07b:         if ( failIfNotFound && ( retval == NOT_FOUND ) )
1:9c8b07b:         {
1:9c8b07b:             throw new ParseException( "Could not find substring '" + tag + "'", _cursor );
1:9c8b07b:         }
1:9c8b07b: 
1:9c8b07b:         return retval;
1:9c8b07b:     }
1:9c8b07b: 
1:9c8b07b:     /**
1:9c8b07b:      * <p>
1:9c8b07b:      * Starting at the current position, search for a substring in the content. If the
1:9c8b07b:      * substring is found, return everything from the cursor up to the start of the substring
1:9c8b07b:      * and position the reader AFTER the substring. If the substring is not found, return null
1:9c8b07b:      * and do not alter the cursor.
1:9c8b07b:      * </p>
1:9c8b07b:      */
1:9c8b07b:     public String getUpTill( String tag, boolean failIfNotFound ) throws ParseException
1:9c8b07b:     {
1:9c8b07b:         int oldCursor = _cursor;
1:9c8b07b:         int endIdx = position( tag, failIfNotFound );
1:9c8b07b: 
1:9c8b07b:         if ( endIdx < 0 ) { return null; }
1:9c8b07b: 
1:9c8b07b:         return _content.substring( oldCursor, endIdx - tag.length() );
1:9c8b07b:     }
1:9c8b07b: 
1:9c8b07b:     /////////////////////////////////////////////////////////////////////////
1:9c8b07b:     //
1:9c8b07b:     //  MINIONS
1:9c8b07b:     //
1:9c8b07b:     /////////////////////////////////////////////////////////////////////////
1:9c8b07b: 
1:9c8b07b: 
1:9c8b07b: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9c8b07b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyBuild.TagReader
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyBuild;
1: 
1: import java.io.*;
1: import java.text.ParseException;
1: 
1: /**
1:  * <p>
1:  * This little machine is constructed from an xml/html document/element and is used to parse
1:  * content inside that element. This machine advances through the element,
1:  * letting the operator look for substrings. This machine was created to read
1:  * elements in JIRA's html reports, which are not well-formed xml documents.
1:  * </p>
1:  *
1:  * <p>
1:  * To operate the TagReader, keep positioning on substrings, following some
1:  * pattern which allows you to navigate to the content you need.
1:  * </p>
1:  */
1: public class TagReader
1: {
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTANTS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     private static final int NOT_FOUND = -1;
1:     
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  STATE
1:     //
1:     /////////////////////////////////////////////////////////////////////////f
1: 
1:     private String _content;
1:     private int _cursor;
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTRUCTORS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /** Wrap a TagReader around a piece of content */
1:     public TagReader( String content )
1:     {
1:         if ( content == null ) { content = ""; }
1:         
1:         _content = content;
1: 
1:         init();
1:     }
1: 
1:     /** Wrap a TagReader around the content siphoned out of a stream */
1:     public TagReader( InputStream is ) throws IOException
1:     {
1:         StringWriter buffer = new StringWriter();
1: 
1:         while( true )
1:         {
1:             int nextChar = is.read();
1:             if ( nextChar < 0 ) { break; }
1: 
1:             buffer.write( nextChar );
1:         }
1: 
1:         _content = buffer.toString();
1: 
1:         is.close();
1: 
1:         init();
1:     }
1: 
1:     /** Initialization common to all constructors */
1:     private void init()
1:     {
1:         reset();
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  PUBLIC BEHAVIOR
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Resets the reader to the beginning of the content.
1:      * </p>
1:      */
1:     public void reset()
1:     {
1:         _cursor = 0;
1:     }
1:     
1:     /**
1:      * <p>
1:      * Starting at the current position, search for a substring in the content. If the substring is found, positions
1:      * the reader AFTER the substring and returns that new cursor position. If the
1:      * substring is not found, does not advance the cursor, but returns -1.
1:      * </p>
1:      */
1:     public int position( String tag, boolean failIfNotFound ) throws ParseException
1:     {
1:         int retval = NOT_FOUND;
1:         
1:         if ( _cursor < _content.length() )
1:         {
1:             retval = _content.indexOf( tag, _cursor );
1: 
1:             if ( retval < 0 ) { retval = NOT_FOUND; }
1:             else
1:             {
1:                 retval += tag.length();
1:                 _cursor = retval;
1:             }
1:         }
1: 
1:         if ( failIfNotFound && ( retval == NOT_FOUND ) )
1:         {
1:             throw new ParseException( "Could not find substring '" + tag + "'", _cursor );
1:         }
1: 
1:         return retval;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Starting at the current position, search for a substring in the content. If the
1:      * substring is found, return everything from the cursor up to the start of the substring
1:      * and position the reader AFTER the substring. If the substring is not found, return null
1:      * and do not alter the cursor.
1:      * </p>
1:      */
1:     public String getUpTill( String tag, boolean failIfNotFound ) throws ParseException
1:     {
1:         int oldCursor = _cursor;
1:         int endIdx = position( tag, failIfNotFound );
1: 
1:         if ( endIdx < 0 ) { return null; }
1: 
1:         return _content.substring( oldCursor, endIdx - tag.length() );
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  MINIONS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1: 
1: }
============================================================================