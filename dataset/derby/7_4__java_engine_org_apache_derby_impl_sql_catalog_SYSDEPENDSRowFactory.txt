1:fd46794: /*
22:eac0369: 
1:fd46794:    Derby - Class org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory
1:fd46794: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:fd46794: 
1:fd46794:       http://www.apache.org/licenses/LICENSE-2.0
1:fd46794: 
1:fd46794:    Unless required by applicable law or agreed to in writing, software
1:fd46794:    distributed under the License is distributed on an "AS IS" BASIS,
1:fd46794:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd46794:    See the License for the specific language governing permissions and
1:fd46794:    limitations under the License.
1:fd46794: 
1:fd46794: */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:7dd08d1: import java.sql.Types;
1:7dd08d1: 
1:6fbf669: import org.apache.derby.catalog.DependableFinder;
1:eac0369: import org.apache.derby.catalog.TypeDescriptor;
1:6fbf669: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:6fbf669: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.DependencyDescriptor;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:6fbf669: import org.apache.derby.iapi.sql.execute.ExecRow;
1:6fbf669: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:6fbf669: import org.apache.derby.iapi.types.DataValueDescriptor;
1:6fbf669: import org.apache.derby.iapi.types.DataValueFactory;
1:eb47bdb: import org.apache.derby.iapi.types.SQLChar;
1:4309044: import org.apache.derby.iapi.types.UserType;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * Factory for creating a SYSDEPENDSS row.
6:eac0369:  *
4:eac0369:  */
1:345de35: 
1:eac0369: public class SYSDEPENDSRowFactory extends CatalogRowFactory
3:eac0369: {
1:eac0369: 	private static final String		TABLENAME_STRING = "SYSDEPENDS";
1:345de35: 
1:eac0369: 	protected static final int		SYSDEPENDS_COLUMN_COUNT = 4;
1:eac0369: 	protected static final int		SYSDEPENDS_DEPENDENTID = 1;
1:eac0369: 	protected static final int		SYSDEPENDS_DEPENDENTTYPE = 2;
1:eac0369: 	protected static final int		SYSDEPENDS_PROVIDERID = 3;
1:eac0369: 	protected static final int		SYSDEPENDS_PROVIDERTYPE = 4;
1:eac0369: 
1:eac0369: 	protected static final int		SYSDEPENDS_INDEX1_ID = 0;
1:eac0369: 	protected static final int		SYSDEPENDS_INDEX2_ID = 1;
1:eac0369: 
1:eac0369: 	
1:eac0369:     private	static	final	boolean[]	uniqueness = {
1:eac0369: 		                                               false,
1:eac0369: 													   false
2:eac0369: 	                                                 };
1:eac0369: 
1:eac0369: 	private static final int[][] indexColumnPositions =
1:eac0369: 	{
1:eac0369: 		{SYSDEPENDS_DEPENDENTID},
1:eac0369: 		{SYSDEPENDS_PROVIDERID}
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	private	static	final	String[]	uuids =
1:eac0369: 	{
1:eac0369: 		 "8000003e-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
1:eac0369: 		,"80000043-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
1:eac0369: 		,"80000040-00d0-fd77-3ed8-000a0a0b1900"	// SYSDEPENDS_INDEX1
1:eac0369: 		,"80000042-00d0-fd77-3ed8-000a0a0b1900"	// SYSDEPENDS_INDEX2
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:6870e87:     SYSDEPENDSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1:eac0369: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:eac0369: 		initInfo(SYSDEPENDS_COLUMN_COUNT,TABLENAME_STRING, indexColumnPositions,
1:c2ff613: 				 uniqueness, uuids );
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	METHODS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369:   /**
1:eac0369: 	 * Make a SYSDEPENDS row
1:eac0369: 	 *
1:eac0369: 	 * @param td DependencyDescriptor. If its null then we want to make an empty
1:eac0369: 	 * row. 
1:eac0369: 	 *
1:eac0369: 	 * @return	Row suitable for inserting into SYSDEPENDS.
1:eac0369: 	 *
2:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public ExecRow makeRow(TupleDescriptor	td, TupleDescriptor parent)
2:eac0369: 					throws StandardException 
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor		col;
1:eac0369: 		ExecRow    				row;
1:eac0369: 		String					dependentID = null;
1:eac0369: 		DependableFinder		dependentBloodhound = null;
1:eac0369: 		String					providerID = null;
1:eac0369: 		DependableFinder		providerBloodhound = null;
1:eac0369: 
1:eac0369: 		if (td != null)
1:eac0369: 		{
1:eac0369: 			DependencyDescriptor dd = (DependencyDescriptor)td;
1:eac0369: 			dependentID	= dd.getUUID().toString();
1:eac0369: 			dependentBloodhound = dd.getDependentFinder();
1:eac0369: 			if ( dependentBloodhound == null )
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(SQLState.DEP_UNABLE_TO_STORE);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			providerID	= dd.getProviderID().toString();
1:eac0369: 			providerBloodhound = dd.getProviderFinder();
1:eac0369: 			if ( providerBloodhound == null )
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(SQLState.DEP_UNABLE_TO_STORE);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Insert info into sysdepends */
1:eac0369: 
1:eac0369: 		/* RESOLVE - It would be nice to require less knowledge about sysdepends
1:eac0369: 		 * and have this be more table driven.
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		/* Build the row to insert  */
1:eac0369: 		row = getExecutionFactory().getValueRow(SYSDEPENDS_COLUMN_COUNT);
1:eac0369: 
1:eac0369: 		/* 1st column is DEPENDENTID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SYSDEPENDS_DEPENDENTID, new SQLChar(dependentID));
1:eac0369: 
1:eac0369: 		/* 2nd column is DEPENDENTFINDER */
1:eac0369: 		row.setColumn(SYSDEPENDS_DEPENDENTTYPE,
1:4309044: 				new UserType(dependentBloodhound));
1:eac0369: 
1:eac0369: 		/* 3rd column is PROVIDERID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SYSDEPENDS_PROVIDERID, new SQLChar(providerID));
1:eac0369: 
1:eac0369: 		/* 4th column is PROVIDERFINDER */
1:eac0369: 		row.setColumn(SYSDEPENDS_PROVIDERTYPE,
1:4309044: 				new UserType(providerBloodhound));
1:eac0369: 
1:eac0369: 		return row;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make a ConstraintDescriptor out of a SYSDEPENDS row
1:eac0369: 	 *
1:eac0369: 	 * @param row a SYSDEPENDSS row
1:eac0369: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1:eac0369: 	 * @param dd dataDictionary
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public TupleDescriptor buildDescriptor(
1:eac0369: 		ExecRow					row,
1:eac0369: 		TupleDescriptor			parentTupleDescriptor,
1:eac0369: 		DataDictionary 			dd )
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		DependencyDescriptor dependencyDesc = null;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(
1:eac0369: 				row.nColumns() == SYSDEPENDS_COLUMN_COUNT, 
1:eac0369: 				"Wrong number of columns for a SYSDEPENDS row");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		String				dependentIDstring;
1:eac0369: 		UUID				dependentUUID;
1:eac0369: 		DependableFinder	dependentBloodhound;
1:eac0369: 		String				providerIDstring;
1:eac0369: 		UUID				providerUUID;
1:eac0369: 		DependableFinder	providerBloodhound;
1:eac0369: 
1:eac0369: 		/* 1st column is DEPENDENTID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSDEPENDS_DEPENDENTID);
1:eac0369: 		dependentIDstring = col.getString();
1:eac0369: 		dependentUUID = getUUIDFactory().recreateUUID(dependentIDstring);
1:eac0369: 
1:eac0369: 		/* 2nd column is DEPENDENTTYPE */
1:eac0369: 		col = row.getColumn(SYSDEPENDS_DEPENDENTTYPE);
1:eac0369: 		dependentBloodhound = (DependableFinder) col.getObject();
1:eac0369: 
1:eac0369: 		/* 3rd column is PROVIDERID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSDEPENDS_PROVIDERID);
1:eac0369: 		providerIDstring = col.getString();
1:eac0369: 		providerUUID = getUUIDFactory().recreateUUID(providerIDstring);
1:eac0369: 
1:eac0369: 		/* 4th column is PROVIDERTYPE */
1:eac0369: 		col = row.getColumn(SYSDEPENDS_PROVIDERTYPE);
1:eac0369: 		providerBloodhound = (DependableFinder) col.getObject();
1:eac0369: 
1:eac0369: 		/* now build and return the descriptor */
1:eac0369: 		return new DependencyDescriptor(dependentUUID, dependentBloodhound,
1:eac0369: 										   providerUUID, providerBloodhound);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Builds a list of columns suitable for creating this Catalog.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return array of SystemColumn suitable for making this catalog.
1:eac0369: 	 */
1:eac0369: 	public SystemColumn[]	buildColumnList()
1:2a5922a:         throws StandardException
1:eac0369: 	{
1:7dd08d1:             return new SystemColumn[] {
1:7dd08d1:                 SystemColumnImpl.getUUIDColumn("DEPENDENTID", false),
1:7dd08d1:                 SystemColumnImpl.getJavaColumn("DEPENDENTFINDER",
1:7dd08d1:                         "org.apache.derby.catalog.DependableFinder", false),
1:7dd08d1:                 SystemColumnImpl.getUUIDColumn("PROVIDERID", false),
1:7dd08d1:                 SystemColumnImpl.getJavaColumn("PROVIDERFINDER",
1:7dd08d1:                         "org.apache.derby.catalog.DependableFinder", false),
1:7dd08d1:            };
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:4309044
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.UserType;
/////////////////////////////////////////////////////////////////////////
1: 				new UserType(dependentBloodhound));
1: 				new UserType(providerBloodhound));
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1:     SYSDEPENDSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:7dd08d1
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: 
/////////////////////////////////////////////////////////////////////////
1:             return new SystemColumn[] {
1:                 SystemColumnImpl.getUUIDColumn("DEPENDENTID", false),
1:                 SystemColumnImpl.getJavaColumn("DEPENDENTFINDER",
1:                         "org.apache.derby.catalog.DependableFinder", false),
1:                 SystemColumnImpl.getUUIDColumn("PROVIDERID", false),
1:                 SystemColumnImpl.getJavaColumn("PROVIDERFINDER",
1:                         "org.apache.derby.catalog.DependableFinder", false),
1:            };
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLChar;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(SYSDEPENDS_DEPENDENTID, new SQLChar(dependentID));
1: 		row.setColumn(SYSDEPENDS_PROVIDERID, new SQLChar(providerID));
commit:6fbf669
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.DependableFinder;
1: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.DependencyDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.DataValueFactory;
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				 uniqueness, uuids );
commit:fd46794
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
commit:345de35
/////////////////////////////////////////////////////////////////////////
1: 
0:  * Copyright 2000, 2001WESTHAM
1: 
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
1:  *
0:  * Product ID: 5697-F53
1:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
1:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
0: import	org.apache.derby.catalog.Dependable;
0: import	org.apache.derby.catalog.DependableFinder;
1: 
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.catalog.UUID;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.catalog.TypeDescriptor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
1: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DependencyDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.catalog.IndexDescriptor;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: /**
1:  * Factory for creating a SYSDEPENDSS row.
1:  *
0:  * @author jerry
1:  */
1: 
1: public class SYSDEPENDSRowFactory extends CatalogRowFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001;
1: 	private static final String		TABLENAME_STRING = "SYSDEPENDS";
1: 
1: 	protected static final int		SYSDEPENDS_COLUMN_COUNT = 4;
1: 	protected static final int		SYSDEPENDS_DEPENDENTID = 1;
1: 	protected static final int		SYSDEPENDS_DEPENDENTTYPE = 2;
1: 	protected static final int		SYSDEPENDS_PROVIDERID = 3;
1: 	protected static final int		SYSDEPENDS_PROVIDERTYPE = 4;
1: 
1: 	protected static final int		SYSDEPENDS_INDEX1_ID = 0;
1: 	protected static final int		SYSDEPENDS_INDEX2_ID = 1;
1: 
1: 	
1:     private	static	final	boolean[]	uniqueness = {
1: 		                                               false,
1: 													   false
1: 	                                                 };
1: 
1: 	private static final int[][] indexColumnPositions =
1: 	{
1: 		{SYSDEPENDS_DEPENDENTID},
1: 		{SYSDEPENDS_PROVIDERID}
1: 	};
1: 
0: 	private static final String[][] indexColumnNames =
1: 	{
0: 		{"DEPENDENTID"},   
0: 		{"PROVIDERID"}
1: 	};
1: 
1: 	private	static	final	String[]	uuids =
1: 	{
1: 		 "8000003e-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
1: 		,"80000043-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
1: 		,"80000040-00d0-fd77-3ed8-000a0a0b1900"	// SYSDEPENDS_INDEX1
1: 		,"80000042-00d0-fd77-3ed8-000a0a0b1900"	// SYSDEPENDS_INDEX2
1: 	};
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
0:     public	SYSDEPENDSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
1: 		initInfo(SYSDEPENDS_COLUMN_COUNT,TABLENAME_STRING, indexColumnPositions,
0: 				 indexColumnNames, uniqueness, uuids );
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	METHODS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1: 	 * Make a SYSDEPENDS row
1: 	 *
1: 	 * @param td DependencyDescriptor. If its null then we want to make an empty
1: 	 * row. 
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSDEPENDS.
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public ExecRow makeRow(TupleDescriptor	td, TupleDescriptor parent)
1: 					throws StandardException 
1: 	{
1: 		DataValueDescriptor		col;
1: 		ExecRow    				row;
1: 		String					dependentID = null;
1: 		DependableFinder		dependentBloodhound = null;
1: 		String					providerID = null;
1: 		DependableFinder		providerBloodhound = null;
1: 
1: 		if (td != null)
1: 		{
1: 			DependencyDescriptor dd = (DependencyDescriptor)td;
1: 			dependentID	= dd.getUUID().toString();
1: 			dependentBloodhound = dd.getDependentFinder();
1: 			if ( dependentBloodhound == null )
1: 			{
1: 				throw StandardException.newException(SQLState.DEP_UNABLE_TO_STORE);
1: 			}
1: 
1: 			providerID	= dd.getProviderID().toString();
1: 			providerBloodhound = dd.getProviderFinder();
1: 			if ( providerBloodhound == null )
1: 			{
1: 				throw StandardException.newException(SQLState.DEP_UNABLE_TO_STORE);
1: 			}
1: 
1: 		}
1: 
1: 		/* Insert info into sysdepends */
1: 
1: 		/* RESOLVE - It would be nice to require less knowledge about sysdepends
1: 		 * and have this be more table driven.
1: 		 */
1: 
1: 		/* Build the row to insert  */
1: 		row = getExecutionFactory().getValueRow(SYSDEPENDS_COLUMN_COUNT);
1: 
1: 		/* 1st column is DEPENDENTID (UUID - char(36)) */
0: 		row.setColumn(SYSDEPENDS_DEPENDENTID, dvf.getCharDataValue(dependentID));
1: 
1: 		/* 2nd column is DEPENDENTFINDER */
1: 		row.setColumn(SYSDEPENDS_DEPENDENTTYPE,
0: 				dvf.getDataValue(dependentBloodhound));
1: 
1: 		/* 3rd column is PROVIDERID (UUID - char(36)) */
0: 		row.setColumn(SYSDEPENDS_PROVIDERID, dvf.getCharDataValue(providerID));
1: 
1: 		/* 4th column is PROVIDERFINDER */
1: 		row.setColumn(SYSDEPENDS_PROVIDERTYPE,
0: 				dvf.getDataValue(providerBloodhound));
1: 
1: 		return row;
1: 	}
1: 
1: 	/**
0: 	 * Builds an empty index row.
1: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
1: 	 *
0: 	 * @return corresponding empty index row
1: 	 * @exception   StandardException thrown on failure
1: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
1: 			throws StandardException
1: 	{
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(2);
1: 
0: 		/* both indices are on UUID */
0: 		row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
1: 
0: 		row.setColumn(2, rowLocation);
1: 
0: 		return	row;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make a ConstraintDescriptor out of a SYSDEPENDS row
1: 	 *
1: 	 * @param row a SYSDEPENDSS row
1: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1: 	 * @param dd dataDictionary
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public TupleDescriptor buildDescriptor(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd )
1: 					throws StandardException
1: 	{
1: 		DependencyDescriptor dependencyDesc = null;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(
1: 				row.nColumns() == SYSDEPENDS_COLUMN_COUNT, 
1: 				"Wrong number of columns for a SYSDEPENDS row");
1: 		}
1: 
1: 		DataValueDescriptor	col;
1: 		String				dependentIDstring;
1: 		UUID				dependentUUID;
1: 		DependableFinder	dependentBloodhound;
1: 		String				providerIDstring;
1: 		UUID				providerUUID;
1: 		DependableFinder	providerBloodhound;
1: 
1: 		/* 1st column is DEPENDENTID (UUID - char(36)) */
1: 		col = row.getColumn(SYSDEPENDS_DEPENDENTID);
1: 		dependentIDstring = col.getString();
1: 		dependentUUID = getUUIDFactory().recreateUUID(dependentIDstring);
1: 
1: 		/* 2nd column is DEPENDENTTYPE */
1: 		col = row.getColumn(SYSDEPENDS_DEPENDENTTYPE);
1: 		dependentBloodhound = (DependableFinder) col.getObject();
1: 
1: 		/* 3rd column is PROVIDERID (UUID - char(36)) */
1: 		col = row.getColumn(SYSDEPENDS_PROVIDERID);
1: 		providerIDstring = col.getString();
1: 		providerUUID = getUUIDFactory().recreateUUID(providerIDstring);
1: 
1: 		/* 4th column is PROVIDERTYPE */
1: 		col = row.getColumn(SYSDEPENDS_PROVIDERTYPE);
1: 		providerBloodhound = (DependableFinder) col.getObject();
1: 
1: 		/* now build and return the descriptor */
1: 		return new DependencyDescriptor(dependentUUID, dependentBloodhound,
1: 										   providerUUID, providerBloodhound);
1: 	}
1: 
1: 	/**
1: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 *
1: 	 *
1: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
1: 	public SystemColumn[]	buildColumnList()
1: 	{
0: 		int						index = 0;
0: 		SystemColumn[]			columnList = new SystemColumn[SYSDEPENDS_COLUMN_COUNT];
1: 
0: 		// describe columns
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "DEPENDENTID"),			// column name
0: 							SYSDEPENDS_DEPENDENTID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			               );
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "DEPENDENTFINDER"),		// column name
0: 							SYSDEPENDS_DEPENDENTTYPE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"org.apache.derby.catalog.DependableFinder",	    // dataType
0: 							false,				// built-in type
0: 							TypeDescriptor.MAXIMUM_WIDTH_UNKNOWN // maxLength
0: 			               );
1: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "PROVIDERID"),		// column name
0: 							SYSDEPENDS_PROVIDERID,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// datatype
0: 							true,				// built-in type
0: 							36					// maxLength
0: 							);
1: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "PROVIDERFINDER"),			// column name
0: 							SYSDEPENDS_PROVIDERTYPE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"org.apache.derby.catalog.DependableFinder",	    // dataType
0: 							false,				// built-in type
0: 							TypeDescriptor.MAXIMUM_WIDTH_UNKNOWN // maxLength
0: 			               );
1: 
0: 		return	columnList;
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
0:  *
0:  * Product ID: 5697-F53
0:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
0:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import	org.apache.derby.catalog.Dependable;
0: import	org.apache.derby.catalog.DependableFinder;
0: 
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.catalog.TypeDescriptor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DependencyDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.catalog.IndexDescriptor;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: /**
0:  * Factory for creating a SYSDEPENDSS row.
0:  *
0:  * @author jerry
0:  */
0: 
0: public class SYSDEPENDSRowFactory extends CatalogRowFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001;
0: 	private static final String		TABLENAME_STRING = "SYSDEPENDS";
0: 
0: 	protected static final int		SYSDEPENDS_COLUMN_COUNT = 4;
0: 	protected static final int		SYSDEPENDS_DEPENDENTID = 1;
0: 	protected static final int		SYSDEPENDS_DEPENDENTTYPE = 2;
0: 	protected static final int		SYSDEPENDS_PROVIDERID = 3;
0: 	protected static final int		SYSDEPENDS_PROVIDERTYPE = 4;
0: 
0: 	protected static final int		SYSDEPENDS_INDEX1_ID = 0;
0: 	protected static final int		SYSDEPENDS_INDEX2_ID = 1;
0: 
0: 	
0:     private	static	final	boolean[]	uniqueness = {
0: 		                                               false,
0: 													   false
0: 	                                                 };
0: 
0: 	private static final int[][] indexColumnPositions =
0: 	{
0: 		{SYSDEPENDS_DEPENDENTID},
0: 		{SYSDEPENDS_PROVIDERID}
0: 	};
0: 
0: 	private static final String[][] indexColumnNames =
0: 	{
0: 		{"DEPENDENTID"},   
0: 		{"PROVIDERID"}
0: 	};
0: 
0: 	private	static	final	String[]	uuids =
0: 	{
0: 		 "8000003e-00d0-fd77-3ed8-000a0a0b1900"	// catalog UUID
0: 		,"80000043-00d0-fd77-3ed8-000a0a0b1900"	// heap UUID
0: 		,"80000040-00d0-fd77-3ed8-000a0a0b1900"	// SYSDEPENDS_INDEX1
0: 		,"80000042-00d0-fd77-3ed8-000a0a0b1900"	// SYSDEPENDS_INDEX2
0: 	};
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0:     public	SYSDEPENDSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower)
0: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(SYSDEPENDS_COLUMN_COUNT,TABLENAME_STRING, indexColumnPositions,
0: 				 indexColumnNames, uniqueness, uuids );
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	METHODS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0:   /**
0: 	 * Make a SYSDEPENDS row
0: 	 *
0: 	 * @param td DependencyDescriptor. If its null then we want to make an empty
0: 	 * row. 
0: 	 *
0: 	 * @return	Row suitable for inserting into SYSDEPENDS.
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecRow makeRow(TupleDescriptor	td, TupleDescriptor parent)
0: 					throws StandardException 
0: 	{
0: 		DataValueDescriptor		col;
0: 		ExecRow    				row;
0: 		String					dependentID = null;
0: 		DependableFinder		dependentBloodhound = null;
0: 		String					providerID = null;
0: 		DependableFinder		providerBloodhound = null;
0: 
0: 		if (td != null)
0: 		{
0: 			DependencyDescriptor dd = (DependencyDescriptor)td;
0: 			dependentID	= dd.getUUID().toString();
0: 			dependentBloodhound = dd.getDependentFinder();
0: 			if ( dependentBloodhound == null )
0: 			{
0: 				throw StandardException.newException(SQLState.DEP_UNABLE_TO_STORE);
0: 			}
0: 
0: 			providerID	= dd.getProviderID().toString();
0: 			providerBloodhound = dd.getProviderFinder();
0: 			if ( providerBloodhound == null )
0: 			{
0: 				throw StandardException.newException(SQLState.DEP_UNABLE_TO_STORE);
0: 			}
0: 
0: 		}
0: 
0: 		/* Insert info into sysdepends */
0: 
0: 		/* RESOLVE - It would be nice to require less knowledge about sysdepends
0: 		 * and have this be more table driven.
0: 		 */
0: 
0: 		/* Build the row to insert  */
0: 		row = getExecutionFactory().getValueRow(SYSDEPENDS_COLUMN_COUNT);
0: 
0: 		/* 1st column is DEPENDENTID (UUID - char(36)) */
0: 		row.setColumn(SYSDEPENDS_DEPENDENTID, dvf.getCharDataValue(dependentID));
0: 
0: 		/* 2nd column is DEPENDENTFINDER */
0: 		row.setColumn(SYSDEPENDS_DEPENDENTTYPE,
0: 				dvf.getDataValue(dependentBloodhound));
0: 
0: 		/* 3rd column is PROVIDERID (UUID - char(36)) */
0: 		row.setColumn(SYSDEPENDS_PROVIDERID, dvf.getCharDataValue(providerID));
0: 
0: 		/* 4th column is PROVIDERFINDER */
0: 		row.setColumn(SYSDEPENDS_PROVIDERTYPE,
0: 				dvf.getDataValue(providerBloodhound));
0: 
0: 		return row;
0: 	}
0: 
0: 	/**
0: 	 * Builds an empty index row.
0: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
0: 	 *
0: 	 * @return corresponding empty index row
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
0: 			throws StandardException
0: 	{
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(2);
0: 
0: 		/* both indices are on UUID */
0: 		row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 		row.setColumn(2, rowLocation);
0: 
0: 		return	row;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Make a ConstraintDescriptor out of a SYSDEPENDS row
0: 	 *
0: 	 * @param row a SYSDEPENDSS row
0: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
0: 	 * @param dd dataDictionary
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public TupleDescriptor buildDescriptor(
0: 		ExecRow					row,
0: 		TupleDescriptor			parentTupleDescriptor,
0: 		DataDictionary 			dd )
0: 					throws StandardException
0: 	{
0: 		DependencyDescriptor dependencyDesc = null;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(
0: 				row.nColumns() == SYSDEPENDS_COLUMN_COUNT, 
0: 				"Wrong number of columns for a SYSDEPENDS row");
0: 		}
0: 
0: 		DataValueDescriptor	col;
0: 		String				dependentIDstring;
0: 		UUID				dependentUUID;
0: 		DependableFinder	dependentBloodhound;
0: 		String				providerIDstring;
0: 		UUID				providerUUID;
0: 		DependableFinder	providerBloodhound;
0: 
0: 		/* 1st column is DEPENDENTID (UUID - char(36)) */
0: 		col = row.getColumn(SYSDEPENDS_DEPENDENTID);
0: 		dependentIDstring = col.getString();
0: 		dependentUUID = getUUIDFactory().recreateUUID(dependentIDstring);
0: 
0: 		/* 2nd column is DEPENDENTTYPE */
0: 		col = row.getColumn(SYSDEPENDS_DEPENDENTTYPE);
0: 		dependentBloodhound = (DependableFinder) col.getObject();
0: 
0: 		/* 3rd column is PROVIDERID (UUID - char(36)) */
0: 		col = row.getColumn(SYSDEPENDS_PROVIDERID);
0: 		providerIDstring = col.getString();
0: 		providerUUID = getUUIDFactory().recreateUUID(providerIDstring);
0: 
0: 		/* 4th column is PROVIDERTYPE */
0: 		col = row.getColumn(SYSDEPENDS_PROVIDERTYPE);
0: 		providerBloodhound = (DependableFinder) col.getObject();
0: 
0: 		/* now build and return the descriptor */
0: 		return new DependencyDescriptor(dependentUUID, dependentBloodhound,
0: 										   providerUUID, providerBloodhound);
0: 	}
0: 
0: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
0: 	 *
0: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
0: 	 */
0: 	public SystemColumn[]	buildColumnList()
0: 	{
0: 		int						index = 0;
0: 		SystemColumn[]			columnList = new SystemColumn[SYSDEPENDS_COLUMN_COUNT];
0: 
0: 		// describe columns
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "DEPENDENTID"),			// column name
0: 							SYSDEPENDS_DEPENDENTID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			               );
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "DEPENDENTFINDER"),		// column name
0: 							SYSDEPENDS_DEPENDENTTYPE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"org.apache.derby.catalog.DependableFinder",	    // dataType
0: 							false,				// built-in type
0: 							TypeDescriptor.MAXIMUM_WIDTH_UNKNOWN // maxLength
0: 			               );
0: 
0: 		columnList[index++] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "PROVIDERID"),		// column name
0: 							SYSDEPENDS_PROVIDERID,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// datatype
0: 							true,				// built-in type
0: 							36					// maxLength
0: 							);
0: 
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "PROVIDERFINDER"),			// column name
0: 							SYSDEPENDS_PROVIDERTYPE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"org.apache.derby.catalog.DependableFinder",	    // dataType
0: 							false,				// built-in type
0: 							TypeDescriptor.MAXIMUM_WIDTH_UNKNOWN // maxLength
0: 			               );
0: 
0: 		return	columnList;
0: 	}
0: }
============================================================================