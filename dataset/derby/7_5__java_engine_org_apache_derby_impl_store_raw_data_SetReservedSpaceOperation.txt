1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Represents shrinking of the reserved space of a particular row on a page.
1:eac0369: 	This operation is not undoable.
1:eac0369: */
1:3546404: public final class SetReservedSpaceOperation extends PageBasicOperation {
1:eac0369: 
1:eac0369: 	protected int	doMeSlot;	// slot where record is at
1:eac0369: 	protected int	recordId;	// recordId
1:eac0369: 	protected int	newValue;	// the new reserved space value
1:eac0369: 	protected int	oldValue;	// the old reserved space value (for BI_logging)
1:eac0369: 
1:3546404:     SetReservedSpaceOperation(BasePage page, int slot,
1:eac0369: 									 int recordId, int newValue, int oldValue)
1:eac0369: 	{
1:eac0369: 		super(page);
1:eac0369: 		doMeSlot = slot;
1:eac0369: 		this.recordId = recordId;
1:eac0369: 		this.newValue = newValue;
1:eac0369: 		this.oldValue = oldValue;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) // we only use this for shrinking
1:eac0369: 			SanityManager.ASSERT(oldValue > newValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public SetReservedSpaceOperation() { super(); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_SET_RESERVED_SPACE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 
1:eac0369: 		CompressedNumber.writeInt(out, doMeSlot);
1:eac0369: 		CompressedNumber.writeInt(out, recordId);
1:eac0369: 		CompressedNumber.writeInt(out, newValue);
1:eac0369: 		CompressedNumber.writeInt(out, oldValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read this in
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 		@exception ClassNotFoundException log stream corrupted
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		doMeSlot = CompressedNumber.readInt(in);
1:eac0369: 		recordId = CompressedNumber.readInt(in);
1:eac0369: 		newValue = CompressedNumber.readInt(in);
1:eac0369: 		oldValue = CompressedNumber.readInt(in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Loggable methods
1:eac0369: 	 */
1:eac0369: 	/**
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:94f158a: 		@exception StandardException Standard Derby policy.		
1:eac0369: 	  
1:eac0369: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1:eac0369: 	*/
1:eac0369: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(oldValue ==
1:eac0369: 								 this.page.getReservedCount(doMeSlot));
1:eac0369: 			SanityManager.ASSERT(newValue < oldValue,
1:eac0369: 				"cannot set reserved space to be bigger than before"); 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		page.setReservedSpace(instant, doMeSlot, newValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * method to support BeforeImageLogging - This log operation is not
1:eac0369: 	 * undoable in the logical sense , but all log operations that touch a page
1:eac0369: 	 * must support physical undo during RRR transaction.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * restore the before image of the page
1:eac0369: 	 *
1:94f158a: 	 * @exception StandardException Standard Derby Error Policy
1:eac0369: 	 * @exception IOException problem reading the complete log record from the
1:eac0369: 	 * input stream
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public void restoreMe(Transaction xact, BasePage undoPage, LogInstant CLRinstant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException
1:eac0369: 	{
1:eac0369: 		int slot = undoPage.findRecordById(recordId,Page.FIRST_SLOT_NUMBER);
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if ( ! getPageId().equals(undoPage.getPageId()))
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 								"restoreMe cannot restore to a different page. "
1:eac0369: 								 + "doMe page:" + getPageId() + " undoPage:" + 
1:eac0369: 								 undoPage.getPageId());
1:eac0369: 			if (slot != doMeSlot)
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 								"restoreMe cannot restore to a different slot. "
1:eac0369: 								 + "doMe slot:" + doMeSlot + " undoMe slot: " +
1:eac0369: 								 slot + " recordId:" + recordId);
1:eac0369: 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		page.setReservedSpace(CLRinstant, slot, oldValue);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  DEBUG: Print self.
1:eac0369: 	*/
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return super.toString() +
1:eac0369: 				"Set Reserved space of recordId " + recordId + " from " + oldValue + " to " + newValue;
1:eac0369: 		}
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public final class SetReservedSpaceOperation extends PageBasicOperation {
1:     SetReservedSpaceOperation(BasePage page, int slot,
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.		
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby Error Policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction; 
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
0: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: 
0: import java.io.OutputStream;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /**
1: 	Represents shrinking of the reserved space of a particular row on a page.
1: 	This operation is not undoable.
1: */
0: public class SetReservedSpaceOperation extends PageBasicOperation {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	protected int	doMeSlot;	// slot where record is at
1: 	protected int	recordId;	// recordId
1: 	protected int	newValue;	// the new reserved space value
1: 	protected int	oldValue;	// the old reserved space value (for BI_logging)
1: 
0: 	public SetReservedSpaceOperation(BasePage page, int slot, 
1: 									 int recordId, int newValue, int oldValue)
1: 	{
1: 		super(page);
1: 		doMeSlot = slot;
1: 		this.recordId = recordId;
1: 		this.newValue = newValue;
1: 		this.oldValue = oldValue;
1: 
1: 		if (SanityManager.DEBUG) // we only use this for shrinking
1: 			SanityManager.ASSERT(oldValue > newValue);
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 	// no-arg constructor, required by Formatable 
1: 	public SetReservedSpaceOperation() { super(); }
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_SET_RESERVED_SPACE;
1: 	}
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		super.writeExternal(out);
1: 
1: 		CompressedNumber.writeInt(out, doMeSlot);
1: 		CompressedNumber.writeInt(out, recordId);
1: 		CompressedNumber.writeInt(out, newValue);
1: 		CompressedNumber.writeInt(out, oldValue);
1: 	}
1: 
1: 	/**
1: 		Read this in
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException log stream corrupted
1: 	*/
1: 	public void readExternal(ObjectInput in) 
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		doMeSlot = CompressedNumber.readInt(in);
1: 		recordId = CompressedNumber.readInt(in);
1: 		newValue = CompressedNumber.readInt(in);
1: 		oldValue = CompressedNumber.readInt(in);
1: 	}
1: 
1: 	/*
1: 	 * Loggable methods
1: 	 */
1: 	/**
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
1: 	  
1: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1: 	*/
1: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(oldValue ==
1: 								 this.page.getReservedCount(doMeSlot));
1: 			SanityManager.ASSERT(newValue < oldValue,
1: 				"cannot set reserved space to be bigger than before"); 
1: 		}
1: 
1: 		page.setReservedSpace(instant, doMeSlot, newValue);
1: 	}
1: 
1: 	/*
1: 	 * method to support BeforeImageLogging - This log operation is not
1: 	 * undoable in the logical sense , but all log operations that touch a page
1: 	 * must support physical undo during RRR transaction.
1: 	 */
1: 
1: 	/**
1: 	 * restore the before image of the page
1: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
1: 	 * @exception IOException problem reading the complete log record from the
1: 	 * input stream
1: 	 */
1: 
1: 	public void restoreMe(Transaction xact, BasePage undoPage, LogInstant CLRinstant, LimitObjectInput in)
1: 		 throws StandardException, IOException
1: 	{
1: 		int slot = undoPage.findRecordById(recordId,Page.FIRST_SLOT_NUMBER);
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if ( ! getPageId().equals(undoPage.getPageId()))
1: 				SanityManager.THROWASSERT(
1: 								"restoreMe cannot restore to a different page. "
1: 								 + "doMe page:" + getPageId() + " undoPage:" + 
1: 								 undoPage.getPageId());
1: 			if (slot != doMeSlot)
1: 				SanityManager.THROWASSERT(
1: 								"restoreMe cannot restore to a different slot. "
1: 								 + "doMe slot:" + doMeSlot + " undoMe slot: " +
1: 								 slot + " recordId:" + recordId);
1: 
1: 		}
1: 
1: 		page.setReservedSpace(CLRinstant, slot, oldValue);
1: 
1: 	}
1: 
1: 	/**
1: 	  DEBUG: Print self.
1: 	*/
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return super.toString() +
1: 				"Set Reserved space of recordId " + recordId + " from " + oldValue + " to " + newValue;
1: 		}
1: 		return null;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction; 
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: 
0: import java.io.OutputStream;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /**
0: 	Represents shrinking of the reserved space of a particular row on a page.
0: 	This operation is not undoable.
0: */
0: public class SetReservedSpaceOperation extends PageBasicOperation {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	protected int	doMeSlot;	// slot where record is at
0: 	protected int	recordId;	// recordId
0: 	protected int	newValue;	// the new reserved space value
0: 	protected int	oldValue;	// the old reserved space value (for BI_logging)
0: 
0: 	public SetReservedSpaceOperation(BasePage page, int slot, 
0: 									 int recordId, int newValue, int oldValue)
0: 	{
0: 		super(page);
0: 		doMeSlot = slot;
0: 		this.recordId = recordId;
0: 		this.newValue = newValue;
0: 		this.oldValue = oldValue;
0: 
0: 		if (SanityManager.DEBUG) // we only use this for shrinking
0: 			SanityManager.ASSERT(oldValue > newValue);
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 	// no-arg constructor, required by Formatable 
0: 	public SetReservedSpaceOperation() { super(); }
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_SET_RESERVED_SPACE;
0: 	}
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		super.writeExternal(out);
0: 
0: 		CompressedNumber.writeInt(out, doMeSlot);
0: 		CompressedNumber.writeInt(out, recordId);
0: 		CompressedNumber.writeInt(out, newValue);
0: 		CompressedNumber.writeInt(out, oldValue);
0: 	}
0: 
0: 	/**
0: 		Read this in
0: 		@exception IOException error reading from log stream
0: 		@exception ClassNotFoundException log stream corrupted
0: 	*/
0: 	public void readExternal(ObjectInput in) 
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		doMeSlot = CompressedNumber.readInt(in);
0: 		recordId = CompressedNumber.readInt(in);
0: 		newValue = CompressedNumber.readInt(in);
0: 		oldValue = CompressedNumber.readInt(in);
0: 	}
0: 
0: 	/*
0: 	 * Loggable methods
0: 	 */
0: 	/**
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
0: 	  
0: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
0: 	*/
0: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(oldValue ==
0: 								 this.page.getReservedCount(doMeSlot));
0: 			SanityManager.ASSERT(newValue < oldValue,
0: 				"cannot set reserved space to be bigger than before"); 
0: 		}
0: 
0: 		page.setReservedSpace(instant, doMeSlot, newValue);
0: 	}
0: 
0: 	/*
0: 	 * method to support BeforeImageLogging - This log operation is not
0: 	 * undoable in the logical sense , but all log operations that touch a page
0: 	 * must support physical undo during RRR transaction.
0: 	 */
0: 
0: 	/**
0: 	 * restore the before image of the page
0: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
0: 	 * @exception IOException problem reading the complete log record from the
0: 	 * input stream
0: 	 */
0: 
0: 	public void restoreMe(Transaction xact, BasePage undoPage, LogInstant CLRinstant, LimitObjectInput in)
0: 		 throws StandardException, IOException
0: 	{
0: 		int slot = undoPage.findRecordById(recordId,Page.FIRST_SLOT_NUMBER);
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if ( ! getPageId().equals(undoPage.getPageId()))
0: 				SanityManager.THROWASSERT(
0: 								"restoreMe cannot restore to a different page. "
0: 								 + "doMe page:" + getPageId() + " undoPage:" + 
0: 								 undoPage.getPageId());
0: 			if (slot != doMeSlot)
0: 				SanityManager.THROWASSERT(
0: 								"restoreMe cannot restore to a different slot. "
0: 								 + "doMe slot:" + doMeSlot + " undoMe slot: " +
0: 								 slot + " recordId:" + recordId);
0: 
0: 		}
0: 
0: 		page.setReservedSpace(CLRinstant, slot, oldValue);
0: 
0: 	}
0: 
0: 	/**
0: 	  DEBUG: Print self.
0: 	*/
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return super.toString() +
0: 				"Set Reserved space of recordId " + recordId + " from " + oldValue + " to " + newValue;
0: 		}
0: 		return null;
0: 	}
0: }
============================================================================