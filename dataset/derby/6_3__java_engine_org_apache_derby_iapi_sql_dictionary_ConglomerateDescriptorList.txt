1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import java.util.Iterator;
1:eac0369: import java.util.ArrayList;
1:89f21fb: import java.util.Arrays;
1:eac0369: 
1:89f21fb: public class ConglomerateDescriptorList extends
1:89f21fb:         ArrayList<ConglomerateDescriptor>
1:eac0369: {
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 	 * Get a conglomerate descriptor by its number
1:eac0369: 	 *
1:eac0369: 	 * @param conglomerateNumber	The number of the conglomerate we're looking for
1:eac0369: 	 *
1:eac0369: 	 * @return	The ConglomerateDescriptor if found in this list,
1:eac0369: 	 *		null if not found.
1:eac0369: 	 */
1:eac0369: 	public ConglomerateDescriptor getConglomerateDescriptor(long conglomerateNumber)
1:eac0369: 	{
1:eac0369: 		ConglomerateDescriptor	returnValue = null;
1:eac0369: 
1:89f21fb:         for (ConglomerateDescriptor conglomerateDescriptor : this)
1:eac0369: 		{
1:eac0369: 			if (conglomerateNumber == conglomerateDescriptor.getConglomerateNumber())
1:eac0369: 			{
1:eac0369: 				returnValue = conglomerateDescriptor;
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
3:eac0369: 		return returnValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get an array of conglomerate descriptors with the given conglomerate
1:eac0369: 	 * number.  We get more than one descriptors if duplicate indexes share
1:eac0369: 	 * one conglomerate.
1:eac0369: 	 *
1:eac0369: 	 * @param conglomerateNumber	The number of the conglomerate
1:eac0369: 	 *
1:eac0369: 	 * @return	Array of ConglomerateDescriptors if found in this list,
1:eac0369: 	 *		size 0 array if not found.
1:eac0369: 	 */
1:eac0369: 	public ConglomerateDescriptor[] getConglomerateDescriptors(long conglomerateNumber)
1:eac0369: 	{
1:eac0369: 		int size = size(), j = 0;
1:eac0369: 		ConglomerateDescriptor[] draft = new ConglomerateDescriptor[size];
1:eac0369: 
1:89f21fb:         for (ConglomerateDescriptor conglomerateDescriptor : this)
1:eac0369: 		{
1:eac0369: 			if (conglomerateNumber == conglomerateDescriptor.getConglomerateNumber())
1:eac0369: 				draft[j++] = conglomerateDescriptor;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (j == size)
1:eac0369: 			return draft;
1:eac0369: 
1:89f21fb:         return Arrays.copyOf(draft, j);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a conglomerate descriptor by its Name
1:eac0369: 	 *
1:eac0369: 	 * @param conglomerateName	The Name of the conglomerate we're looking for
1:eac0369: 	 *
1:eac0369: 	 * @return	The ConglomerateDescriptor if found in this list,
1:eac0369: 	 *		null if not found.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public ConglomerateDescriptor getConglomerateDescriptor(String conglomerateName)
1:eac0369: 	{
1:eac0369: 		ConglomerateDescriptor	returnValue = null;
1:eac0369: 
1:89f21fb:         for (ConglomerateDescriptor conglomerateDescriptor : this)
1:eac0369: 		{
1:eac0369: 			if (conglomerateName.equals(conglomerateDescriptor.getConglomerateName()))
1:eac0369: 			{
1:eac0369: 				returnValue = conglomerateDescriptor;
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return returnValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a conglomerate descriptor by its UUID String
1:eac0369: 	 *
1:eac0369: 	 * @param uuid	The UUID of the conglomerate we're looking for
1:eac0369: 	 *
1:eac0369: 	 * @return	The ConglomerateDescriptor if found in this list,
1:eac0369: 	 *		null if not found.
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public ConglomerateDescriptor getConglomerateDescriptor(UUID uuid)
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:eac0369: 		ConglomerateDescriptor	returnValue = null;
1:eac0369: 
1:89f21fb:         for (ConglomerateDescriptor conglomerateDescriptor : this)
1:eac0369: 		{
1:eac0369: 			if (uuid.equals(conglomerateDescriptor.getUUID()))
1:eac0369: 			{
1:eac0369: 				returnValue = conglomerateDescriptor;
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return returnValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get an array of conglomerate descriptors by a UUID String.  We get
1:eac0369: 	 * more than one descriptors if duplicate indexes share one conglomerate.
1:eac0369: 	 *
1:eac0369: 	 * @param uuid	The UUID of the conglomerate
1:eac0369: 	 *
1:eac0369: 	 * @return	Array of ConglomerateDescriptors if found in this list,
1:eac0369: 	 *		size 0 array if not found.
1:eac0369: 	 */
1:eac0369: 	public ConglomerateDescriptor[] getConglomerateDescriptors(UUID uuid)
1:eac0369: 	{
1:eac0369: 		int size = size(), j = 0;
1:eac0369: 		ConglomerateDescriptor[] draft = new ConglomerateDescriptor[size];
1:eac0369: 
1:89f21fb:         for (ConglomerateDescriptor conglomerateDescriptor : this)
1:eac0369: 		{
1:eac0369: 			if (uuid.equals(conglomerateDescriptor.getUUID()))
1:eac0369: 				draft[j++] = conglomerateDescriptor;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (j == size)
1:eac0369: 			return draft;
1:eac0369: 
1:89f21fb:         return Arrays.copyOf(draft, j);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Remove the specified conglomerate descriptor from the
1:eac0369: 	 * conglomerate descriptor list.  If the descriptor
1:eac0369: 	 * is not found, no errors are issued.
1:eac0369: 	 *
1:6b50965: 	 * @param tableID table uuid, ignored
2:eac0369: 	 * @param cgDesc the conglomerate
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void dropConglomerateDescriptor(UUID tableID, ConglomerateDescriptor cgDesc) 
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:89f21fb:         Iterator<ConglomerateDescriptor> iterator = iterator();
1:89f21fb:         while (iterator.hasNext())
1:eac0369: 		{
1:89f21fb:             ConglomerateDescriptor localCgDesc = iterator.next();
1:eac0369: 			if (localCgDesc.getConglomerateNumber() == cgDesc.getConglomerateNumber() &&
1:eac0369: 				localCgDesc.getConglomerateName().equals(cgDesc.getConglomerateName()) &&
1:eac0369: 				localCgDesc.getSchemaID().equals(cgDesc.getSchemaID()))
1:eac0369: 			{
1:eac0369: 				iterator.remove();
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Remove the specified conglomerate descriptor from the
1:eac0369: 	 * conglomerate descriptor list.  If the descriptor
1:eac0369: 	 * is not found, no errors are issued.
1:eac0369: 	 *
1:6b50965: 	 * @param conglomerateID table uuid, ignored
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void dropConglomerateDescriptorByUUID(UUID conglomerateID) 
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:89f21fb:         Iterator<ConglomerateDescriptor> iterator = iterator();
1:89f21fb:         while (iterator.hasNext())
1:eac0369: 		{
1:89f21fb:             ConglomerateDescriptor localCgDesc = iterator.next();
1:eac0369: 			if ( conglomerateID.equals( localCgDesc.getUUID() ) )
1:eac0369: 			{
1:eac0369: 				iterator.remove();
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:89f21fb
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: public class ConglomerateDescriptorList extends
1:         ArrayList<ConglomerateDescriptor>
/////////////////////////////////////////////////////////////////////////
1:         for (ConglomerateDescriptor conglomerateDescriptor : this)
/////////////////////////////////////////////////////////////////////////
1:         for (ConglomerateDescriptor conglomerateDescriptor : this)
1:         return Arrays.copyOf(draft, j);
/////////////////////////////////////////////////////////////////////////
1:         for (ConglomerateDescriptor conglomerateDescriptor : this)
/////////////////////////////////////////////////////////////////////////
1:         for (ConglomerateDescriptor conglomerateDescriptor : this)
/////////////////////////////////////////////////////////////////////////
1:         for (ConglomerateDescriptor conglomerateDescriptor : this)
1:         return Arrays.copyOf(draft, j);
/////////////////////////////////////////////////////////////////////////
1:         Iterator<ConglomerateDescriptor> iterator = iterator();
1:         while (iterator.hasNext())
1:             ConglomerateDescriptor localCgDesc = iterator.next();
/////////////////////////////////////////////////////////////////////////
1:         Iterator<ConglomerateDescriptor> iterator = iterator();
1:         while (iterator.hasNext())
1:             ConglomerateDescriptor localCgDesc = iterator.next();
commit:b3e9947
/////////////////////////////////////////////////////////////////////////
0:         System.arraycopy(draft, 0, returnValue, 0, j);
/////////////////////////////////////////////////////////////////////////
0:         System.arraycopy(draft, 0, returnValue, 0, j);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f2fad75
/////////////////////////////////////////////////////////////////////////
0: public class ConglomerateDescriptorList extends ArrayList<TupleDescriptor>
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param tableID table uuid, ignored
/////////////////////////////////////////////////////////////////////////
1: 	 * @param conglomerateID table uuid, ignored
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: import java.util.Iterator;
1: import java.util.ArrayList;
1: 
0: public class ConglomerateDescriptorList extends ArrayList
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 
1: 	/**
1: 	 * Get a conglomerate descriptor by its number
1: 	 *
1: 	 * @param conglomerateNumber	The number of the conglomerate we're looking for
1: 	 *
1: 	 * @return	The ConglomerateDescriptor if found in this list,
1: 	 *		null if not found.
1: 	 */
1: 	public ConglomerateDescriptor getConglomerateDescriptor(long conglomerateNumber)
1: 	{
0: 		ConglomerateDescriptor conglomerateDescriptor;
1: 		ConglomerateDescriptor	returnValue = null;
1: 
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			conglomerateDescriptor = (ConglomerateDescriptor) get(index);
1: 			if (conglomerateNumber == conglomerateDescriptor.getConglomerateNumber())
1: 			{
1: 				returnValue = conglomerateDescriptor;
1: 				break;
1: 			}
1: 		}
1: 
1: 		return returnValue;
1: 	}
1: 
1: 	/**
1: 	 * Get an array of conglomerate descriptors with the given conglomerate
1: 	 * number.  We get more than one descriptors if duplicate indexes share
1: 	 * one conglomerate.
1: 	 *
1: 	 * @param conglomerateNumber	The number of the conglomerate
1: 	 *
1: 	 * @return	Array of ConglomerateDescriptors if found in this list,
1: 	 *		size 0 array if not found.
1: 	 */
1: 	public ConglomerateDescriptor[] getConglomerateDescriptors(long conglomerateNumber)
1: 	{
0: 		ConglomerateDescriptor conglomerateDescriptor;
1: 
1: 		int size = size(), j = 0;
1: 		ConglomerateDescriptor[] draft = new ConglomerateDescriptor[size];
1: 
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			conglomerateDescriptor = (ConglomerateDescriptor) get(index);
1: 			if (conglomerateNumber == conglomerateDescriptor.getConglomerateNumber())
1: 				draft[j++] = conglomerateDescriptor;
1: 		}
1: 
1: 		if (j == size)
1: 			return draft;
0: 		ConglomerateDescriptor[] returnValue = new ConglomerateDescriptor[j];
0: 		for (int i = 0; i < j; i++)
0: 			returnValue[i] = draft[i];
1: 
1: 		return returnValue;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Get a conglomerate descriptor by its Name
1: 	 *
1: 	 * @param conglomerateName	The Name of the conglomerate we're looking for
1: 	 *
1: 	 * @return	The ConglomerateDescriptor if found in this list,
1: 	 *		null if not found.
1: 	 */
1: 
1: 	public ConglomerateDescriptor getConglomerateDescriptor(String conglomerateName)
1: 	{
0: 		ConglomerateDescriptor conglomerateDescriptor;
1: 		ConglomerateDescriptor	returnValue = null;
1: 
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			conglomerateDescriptor = (ConglomerateDescriptor) get(index);
1: 			if (conglomerateName.equals(conglomerateDescriptor.getConglomerateName()))
1: 			{
1: 				returnValue = conglomerateDescriptor;
1: 				break;
1: 			}
1: 		}
1: 
1: 		return returnValue;
1: 	}
1: 
1: 	/**
1: 	 * Get a conglomerate descriptor by its UUID String
1: 	 *
1: 	 * @param uuid	The UUID of the conglomerate we're looking for
1: 	 *
1: 	 * @return	The ConglomerateDescriptor if found in this list,
1: 	 *		null if not found.
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 
1: 	public ConglomerateDescriptor getConglomerateDescriptor(UUID uuid)
1: 						throws StandardException
1: 	{
0: 		ConglomerateDescriptor conglomerateDescriptor;
1: 		ConglomerateDescriptor	returnValue = null;
1: 
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			conglomerateDescriptor = (ConglomerateDescriptor) get(index);
1: 
1: 			if (uuid.equals(conglomerateDescriptor.getUUID()))
1: 			{
1: 				returnValue = conglomerateDescriptor;
1: 				break;
1: 			}
1: 		}
1: 
1: 		return returnValue;
1: 	}
1: 
1: 	/**
1: 	 * Get an array of conglomerate descriptors by a UUID String.  We get
1: 	 * more than one descriptors if duplicate indexes share one conglomerate.
1: 	 *
1: 	 * @param uuid	The UUID of the conglomerate
1: 	 *
1: 	 * @return	Array of ConglomerateDescriptors if found in this list,
1: 	 *		size 0 array if not found.
1: 	 */
1: 	public ConglomerateDescriptor[] getConglomerateDescriptors(UUID uuid)
1: 	{
0: 		ConglomerateDescriptor conglomerateDescriptor;
1: 
1: 		int size = size(), j = 0;
1: 		ConglomerateDescriptor[] draft = new ConglomerateDescriptor[size];
1: 
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			conglomerateDescriptor = (ConglomerateDescriptor) get(index);
1: 			if (uuid.equals(conglomerateDescriptor.getUUID()))
1: 				draft[j++] = conglomerateDescriptor;
1: 		}
1: 
1: 		if (j == size)
1: 			return draft;
0: 		ConglomerateDescriptor[] returnValue = new ConglomerateDescriptor[j];
0: 		for (int i = 0; i < j; i++)
0: 			returnValue[i] = draft[i];
1: 
1: 		return returnValue;
1: 	}
1: 
1: 	/**
1: 	 * Remove the specified conglomerate descriptor from the
1: 	 * conglomerate descriptor list.  If the descriptor
1: 	 * is not found, no errors are issued.
1: 	 *
0: 	 * @param tableId table uuid, ignored
1: 	 * @param cgDesc the conglomerate
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public void dropConglomerateDescriptor(UUID tableID, ConglomerateDescriptor cgDesc) 
1: 						throws StandardException
1: 	{
0: 		for (Iterator iterator = iterator(); iterator.hasNext(); )
1: 		{
0: 			ConglomerateDescriptor localCgDesc = (ConglomerateDescriptor) iterator.next();
1: 			if (localCgDesc.getConglomerateNumber() == cgDesc.getConglomerateNumber() &&
1: 				localCgDesc.getConglomerateName().equals(cgDesc.getConglomerateName()) &&
1: 				localCgDesc.getSchemaID().equals(cgDesc.getSchemaID()))
1: 			{
1: 				iterator.remove();
1: 				break;
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Remove the specified conglomerate descriptor from the
1: 	 * conglomerate descriptor list.  If the descriptor
1: 	 * is not found, no errors are issued.
1: 	 *
0: 	 * @param tableId table uuid, ignored
1: 	 * @param cgDesc the conglomerate
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public void dropConglomerateDescriptorByUUID(UUID conglomerateID) 
1: 						throws StandardException
1: 	{
0: 		for (Iterator iterator = iterator(); iterator.hasNext(); )
1: 		{
0: 			ConglomerateDescriptor localCgDesc = (ConglomerateDescriptor) iterator.next();
1: 			if ( conglomerateID.equals( localCgDesc.getUUID() ) )
1: 			{
1: 				iterator.remove();
1: 				break;
1: 			}
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.util.Iterator;
0: import java.util.ArrayList;
0: 
0: public class ConglomerateDescriptorList extends ArrayList
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 
0: 	/**
0: 	 * Get a conglomerate descriptor by its number
0: 	 *
0: 	 * @param conglomerateNumber	The number of the conglomerate we're looking for
0: 	 *
0: 	 * @return	The ConglomerateDescriptor if found in this list,
0: 	 *		null if not found.
0: 	 */
0: 	public ConglomerateDescriptor getConglomerateDescriptor(long conglomerateNumber)
0: 	{
0: 		ConglomerateDescriptor conglomerateDescriptor;
0: 		ConglomerateDescriptor	returnValue = null;
0: 
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			conglomerateDescriptor = (ConglomerateDescriptor) get(index);
0: 			if (conglomerateNumber == conglomerateDescriptor.getConglomerateNumber())
0: 			{
0: 				returnValue = conglomerateDescriptor;
0: 				break;
0: 			}
0: 		}
0: 
0: 		return returnValue;
0: 	}
0: 
0: 	/**
0: 	 * Get an array of conglomerate descriptors with the given conglomerate
0: 	 * number.  We get more than one descriptors if duplicate indexes share
0: 	 * one conglomerate.
0: 	 *
0: 	 * @param conglomerateNumber	The number of the conglomerate
0: 	 *
0: 	 * @return	Array of ConglomerateDescriptors if found in this list,
0: 	 *		size 0 array if not found.
0: 	 */
0: 	public ConglomerateDescriptor[] getConglomerateDescriptors(long conglomerateNumber)
0: 	{
0: 		ConglomerateDescriptor conglomerateDescriptor;
0: 
0: 		int size = size(), j = 0;
0: 		ConglomerateDescriptor[] draft = new ConglomerateDescriptor[size];
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			conglomerateDescriptor = (ConglomerateDescriptor) get(index);
0: 			if (conglomerateNumber == conglomerateDescriptor.getConglomerateNumber())
0: 				draft[j++] = conglomerateDescriptor;
0: 		}
0: 
0: 		if (j == size)
0: 			return draft;
0: 		ConglomerateDescriptor[] returnValue = new ConglomerateDescriptor[j];
0: 		for (int i = 0; i < j; i++)
0: 			returnValue[i] = draft[i];
0: 
0: 		return returnValue;
0: 	}
0: 
0: 
0: 	/**
0: 	 * Get a conglomerate descriptor by its Name
0: 	 *
0: 	 * @param conglomerateName	The Name of the conglomerate we're looking for
0: 	 *
0: 	 * @return	The ConglomerateDescriptor if found in this list,
0: 	 *		null if not found.
0: 	 */
0: 
0: 	public ConglomerateDescriptor getConglomerateDescriptor(String conglomerateName)
0: 	{
0: 		ConglomerateDescriptor conglomerateDescriptor;
0: 		ConglomerateDescriptor	returnValue = null;
0: 
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			conglomerateDescriptor = (ConglomerateDescriptor) get(index);
0: 			if (conglomerateName.equals(conglomerateDescriptor.getConglomerateName()))
0: 			{
0: 				returnValue = conglomerateDescriptor;
0: 				break;
0: 			}
0: 		}
0: 
0: 		return returnValue;
0: 	}
0: 
0: 	/**
0: 	 * Get a conglomerate descriptor by its UUID String
0: 	 *
0: 	 * @param uuid	The UUID of the conglomerate we're looking for
0: 	 *
0: 	 * @return	The ConglomerateDescriptor if found in this list,
0: 	 *		null if not found.
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 
0: 	public ConglomerateDescriptor getConglomerateDescriptor(UUID uuid)
0: 						throws StandardException
0: 	{
0: 		ConglomerateDescriptor conglomerateDescriptor;
0: 		ConglomerateDescriptor	returnValue = null;
0: 
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			conglomerateDescriptor = (ConglomerateDescriptor) get(index);
0: 
0: 			if (uuid.equals(conglomerateDescriptor.getUUID()))
0: 			{
0: 				returnValue = conglomerateDescriptor;
0: 				break;
0: 			}
0: 		}
0: 
0: 		return returnValue;
0: 	}
0: 
0: 	/**
0: 	 * Get an array of conglomerate descriptors by a UUID String.  We get
0: 	 * more than one descriptors if duplicate indexes share one conglomerate.
0: 	 *
0: 	 * @param uuid	The UUID of the conglomerate
0: 	 *
0: 	 * @return	Array of ConglomerateDescriptors if found in this list,
0: 	 *		size 0 array if not found.
0: 	 */
0: 	public ConglomerateDescriptor[] getConglomerateDescriptors(UUID uuid)
0: 	{
0: 		ConglomerateDescriptor conglomerateDescriptor;
0: 
0: 		int size = size(), j = 0;
0: 		ConglomerateDescriptor[] draft = new ConglomerateDescriptor[size];
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			conglomerateDescriptor = (ConglomerateDescriptor) get(index);
0: 			if (uuid.equals(conglomerateDescriptor.getUUID()))
0: 				draft[j++] = conglomerateDescriptor;
0: 		}
0: 
0: 		if (j == size)
0: 			return draft;
0: 		ConglomerateDescriptor[] returnValue = new ConglomerateDescriptor[j];
0: 		for (int i = 0; i < j; i++)
0: 			returnValue[i] = draft[i];
0: 
0: 		return returnValue;
0: 	}
0: 
0: 	/**
0: 	 * Remove the specified conglomerate descriptor from the
0: 	 * conglomerate descriptor list.  If the descriptor
0: 	 * is not found, no errors are issued.
0: 	 *
0: 	 * @param tableId table uuid, ignored
0: 	 * @param cgDesc the conglomerate
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public void dropConglomerateDescriptor(UUID tableID, ConglomerateDescriptor cgDesc) 
0: 						throws StandardException
0: 	{
0: 		for (Iterator iterator = iterator(); iterator.hasNext(); )
0: 		{
0: 			ConglomerateDescriptor localCgDesc = (ConglomerateDescriptor) iterator.next();
0: 			if (localCgDesc.getConglomerateNumber() == cgDesc.getConglomerateNumber() &&
0: 				localCgDesc.getConglomerateName().equals(cgDesc.getConglomerateName()) &&
0: 				localCgDesc.getSchemaID().equals(cgDesc.getSchemaID()))
0: 			{
0: 				iterator.remove();
0: 				break;
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Remove the specified conglomerate descriptor from the
0: 	 * conglomerate descriptor list.  If the descriptor
0: 	 * is not found, no errors are issued.
0: 	 *
0: 	 * @param tableId table uuid, ignored
0: 	 * @param cgDesc the conglomerate
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public void dropConglomerateDescriptorByUUID(UUID conglomerateID) 
0: 						throws StandardException
0: 	{
0: 		for (Iterator iterator = iterator(); iterator.hasNext(); )
0: 		{
0: 			ConglomerateDescriptor localCgDesc = (ConglomerateDescriptor) iterator.next();
0: 			if ( conglomerateID.equals( localCgDesc.getUUID() ) )
0: 			{
0: 				iterator.remove();
0: 				break;
0: 			}
0: 		}
0: 	}
0: }
============================================================================