1:ff22a62: /*
1:ff22a62: 
1:ff22a62:    Derby - Class org.apache.derbyDemo.scores.data.Data
1:ff22a62: 
1:ff22a62:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ff22a62:    contributor license agreements.  See the NOTICE file distributed with
1:ff22a62:    this work for additional information regarding copyright ownership.
1:ff22a62:    The ASF licenses this file to You under the Apache License, Version 2.0
1:ff22a62:    (the "License"); you may not use this file except in compliance with
1:ff22a62:    the License.  You may obtain a copy of the License at
1:ff22a62: 
1:ff22a62:       http://www.apache.org/licenses/LICENSE-2.0
1:ff22a62: 
1:ff22a62:    Unless required by applicable law or agreed to in writing, software
1:ff22a62:    distributed under the License is distributed on an "AS IS" BASIS,
1:ff22a62:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff22a62:    See the License for the specific language governing permissions and
1:ff22a62:    limitations under the License.
1:ff22a62: 
1:ff22a62:  */
1:ff22a62: 
1:ff22a62: package org.apache.derbyDemo.scores.data;
1:ff22a62: 
1:ff22a62: import java.sql.*;
1:ff22a62: 
1:ff22a62: import org.apache.derbyDemo.scores.util.*;
1:ff22a62: 
1:ff22a62: /**
1:ff22a62:  * <p>
1:ff22a62:  * Data used by Scores application
1:ff22a62:  * </p>
1:ff22a62:  *
1:ff22a62:  */
1:ff22a62: public  class   Data
1:ff22a62: {
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // CONSTANTS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     private static  final   int     QUESTIONS_PER_TEMPLATE = 10;
1:ff22a62:     private static  final   double  IMPROVEMENT_PER_TAKING = 2.0;
1:ff22a62:     private static  final   double  GRAMMAR_SCHOOL_PENALTY = 20.0;
1:ff22a62:     private static  final   double  PER_STUDENT_FLUCTUATION = 3.0;
1:ff22a62:     private static  final   double  FLUCTATION_MULTIPLIER = 2.0;
1:ff22a62:     
1:ff22a62:     public  static  final   School  LincolnGrammar =
1:ff22a62:         new School( "Lincoln Grammar", true );
1:ff22a62:     public  static  final   School  WashingtonHS =
1:ff22a62:         new School( "Washington HS", false );
1:ff22a62: 
1:ff22a62:     public  static  final   Student AliceToklas = new Student
1:ff22a62:         ( "Alice", "Toklas", "1998-03-21", LincolnGrammar );
1:ff22a62:     public  static  final   Student GertrudeStein = new Student
1:ff22a62:         ( "Gertrude", "Stein", "1999-07-15", LincolnGrammar );
1:ff22a62:     public  static  final   Student HenryJames = new Student
1:ff22a62:         ( "Henry", "James", "2000-09-03", LincolnGrammar );
1:ff22a62:     public  static  final   Student GoreVidal = new Student
1:ff22a62:         ( "Gore", "Vidal", "2008-12-25", LincolnGrammar );
1:ff22a62: 
1:ff22a62:     public  static  final   Student TrumanCapote = new Student
1:ff22a62:         ( "Truman", "Capote", "1992-08-05", WashingtonHS );
1:ff22a62:     public  static  final   Student WaltWhitman = new Student
1:ff22a62:         ( "Walt", "Whitman", "1991-12-28", WashingtonHS );
1:ff22a62:     public  static  final   Student DorothyParker = new Student
1:ff22a62:         ( "Dorothy", "Parker", "1990-01-09", WashingtonHS );
1:ff22a62:     public  static  final   Student AndrewSullivan = new Student
1:ff22a62:         ( "Andrew", "Sullivan", "1989-02-20", WashingtonHS );
1:ff22a62: 
1:ff22a62:     public  static  final   Test GradeSchoolMath =
1:ff22a62:         new Test( "Grade School Math", true, 90.0 );
1:ff22a62:     public  static  final   Test GradeSchoolEnglish =
1:ff22a62:         new Test( "Grade School English", true, 85.0 );
1:ff22a62:     public  static  final   Test HighSchoolMath =
1:ff22a62:         new Test( "High School Math", false, 80.0 );
1:ff22a62:     public  static  final   Test HighSchoolEnglish =
1:ff22a62:         new Test( "High School English", false, 75.0 );
1:ff22a62: 
1:ff22a62:     public  static  final   Question    GSM_1 =
1:ff22a62:         new Question( "GSM_1", 1, 5, 2, GradeSchoolMath );
1:ff22a62:     public  static  final   Question    GSM_2 =
1:ff22a62:         new Question( "GSM_2", 2, 3, 1, GradeSchoolMath );
1:ff22a62:     public  static  final   Question    GSM_3 =
1:ff22a62:         new Question( "GSM_3", 3, 4, 3, GradeSchoolMath );
1:ff22a62:     
1:ff22a62:     public  static  final   Question    GSE_1 =
1:ff22a62:         new Question( "GSE_1", 3, 5, 2, GradeSchoolEnglish );
1:ff22a62:     public  static  final   Question    GSE_2 =
1:ff22a62:         new Question( "GSE_2", 2, 3, 1, GradeSchoolEnglish );
1:ff22a62:     public  static  final   Question    GSE_3 =
1:ff22a62:         new Question( "GSE_3", 1, 4, 3, GradeSchoolEnglish );
1:ff22a62: 
1:ff22a62:     public  static  final   Question    HSM_1 =
1:ff22a62:         new Question( "HSM_1", 1, 5, 2, HighSchoolMath );
1:ff22a62:     public  static  final   Question    HSM_2 =
1:ff22a62:         new Question( "HSM_2", 2, 3, 1, HighSchoolMath );
1:ff22a62:     public  static  final   Question    HSM_3 =
1:ff22a62:         new Question( "HSM_3", 3, 4, 3, HighSchoolMath );
1:ff22a62:     
1:ff22a62:     public  static  final   Question    HSE_1 =
1:ff22a62:         new Question( "HSE_1", 3, 5, 2, HighSchoolEnglish );
1:ff22a62:     public  static  final   Question    HSE_2 =
1:ff22a62:         new Question( "HSE_2", 2, 3, 1, HighSchoolEnglish );
1:ff22a62:     public  static  final   Question    HSE_3 =
1:ff22a62:         new Question( "HSE_3", 1, 4, 3, HighSchoolEnglish );
1:ff22a62: 
1:ff22a62:     public  static  final   Question[]      QUESTIONS =
1:ff22a62:     {
1:ff22a62:         GSM_1,
1:ff22a62:         GSM_2,
1:ff22a62:         GSM_3,
1:ff22a62:         
1:ff22a62:         GSE_1,
1:ff22a62:         GSE_2,
1:ff22a62:         GSE_3,
1:ff22a62:         
1:ff22a62:         HSM_1,
1:ff22a62:         HSM_2,
1:ff22a62:         HSM_3,
1:ff22a62:         
1:ff22a62:         HSE_1,
1:ff22a62:         HSE_2,
1:ff22a62:         HSE_3,
1:ff22a62:     };
1:ff22a62:     
1:ff22a62:     public  static  final   School[] SCHOOLS =
1:ff22a62:     {
1:ff22a62:         LincolnGrammar,
1:ff22a62:         WashingtonHS,
1:ff22a62:     };
1:ff22a62: 
1:ff22a62:     public  static  final   Student[]   STUDENTS =
1:ff22a62:     {
1:ff22a62:         AliceToklas,
1:ff22a62:         GertrudeStein,
1:ff22a62:         TrumanCapote,
1:ff22a62:         WaltWhitman,
1:ff22a62:         HenryJames,
1:ff22a62:         GoreVidal,
1:ff22a62:         DorothyParker,
1:ff22a62:         AndrewSullivan,
1:ff22a62:     };
1:ff22a62: 
1:ff22a62:     public  static  final   Test[]  TESTS =
1:ff22a62:     {
1:ff22a62:         GradeSchoolMath,
1:ff22a62:         GradeSchoolEnglish,
1:ff22a62:         HighSchoolMath,
1:ff22a62:         HighSchoolEnglish,
1:ff22a62:     };
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // STATE
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // INNER CLASSES
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     public  abstract    static  class   KeyedObject
1:ff22a62:     {
1:ff22a62:         private Integer _key;
1:ff22a62:         
1:ff22a62:         public  void                create( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             Logger  log = Logger.getLogger();
1:ff22a62:             boolean loggingEnabled = log.isLoggingEnabled();
1:ff22a62:             
1:ff22a62:             // don't print out the chatter from creating these rows.
1:ff22a62:             try {
1:ff22a62:                 log.enableLogging( false );
1:ff22a62: 
1:ff22a62:                 createMinion( database );
1:ff22a62:             }
1:ff22a62:             finally
1:ff22a62:             {
1:ff22a62:                 log.enableLogging( loggingEnabled );
1:ff22a62:             }
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         protected   abstract    void    createMinion( Database database )
1:ff22a62:             throws SQLException;
1:ff22a62: 
1:ff22a62:         protected   abstract    PreparedStatement   getKeyFinder
1:ff22a62:             ( Database database )
1:ff22a62:             throws SQLException;
1:ff22a62: 
1:ff22a62:         public  int getPrimaryKey( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             if ( _key == null )
1:ff22a62:             {
1:ff22a62:                 PreparedStatement   ps = getKeyFinder( database );
1:ff22a62: 
1:ff22a62:                 setPrimaryKey( Utils.getScalarValue( ps ) );
1:ff22a62:             }
1:ff22a62: 
1:ff22a62:             return _key.intValue();
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         private void    setPrimaryKey( int key )
1:ff22a62:         {
1:ff22a62:             _key = new Integer( key );          
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         public  SQLException    notImplemented()
1:ff22a62:         { return new SQLException( "Not implemented." ); }
1:ff22a62:     }
1:ff22a62: 
1:ff22a62: 
1:ff22a62:     public  static  class   School  extends KeyedObject
1:ff22a62:     {
1:ff22a62:         private String      _schoolName;
1:ff22a62:         private boolean     _isGrammarSchool;
1:ff22a62: 
1:ff22a62:         public  School( String schoolName, boolean isGrammarSchool )
1:ff22a62:         {
1:ff22a62:             _schoolName = schoolName;
1:ff22a62:             _isGrammarSchool = isGrammarSchool;
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         public  String      getSchoolName() { return _schoolName; }
1:ff22a62:         public  boolean     isGrammarSchool() { return _isGrammarSchool; }
1:ff22a62: 
1:ff22a62:         protected   void                createMinion( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             Connection          conn = database.getConnection();
1:ff22a62: 
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "insert into School( schoolName ) values ( ? )"
1:ff22a62:                  );
1:ff22a62: 
1:ff22a62:             ps.setString( 1, _schoolName );
1:ff22a62: 
1:ff22a62:             ps.execute();
1:ff22a62:             Utils.close( ps );
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         protected   PreparedStatement   getKeyFinder( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             Connection          conn = database.getConnection();
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "select schoolID from School where schoolName = ?"
1:ff22a62:                  );
1:ff22a62: 
1:ff22a62:             ps.setString( 1, _schoolName );
1:ff22a62: 
1:ff22a62:             return ps;
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     public  static  class   Student extends KeyedObject
1:ff22a62:     {
1:ff22a62:         private String  _firstName;
1:ff22a62:         private String  _lastName;
1:ff22a62:         private String  _birthday;
1:ff22a62:         private School  _school;
1:ff22a62: 
1:ff22a62:         public  Student
1:ff22a62:             (
1:ff22a62:              String firstName,
1:ff22a62:              String lastName,
1:ff22a62:              String birthday,
1:ff22a62:              School school
1:ff22a62:              )
1:ff22a62:         {
1:ff22a62:             _firstName = firstName;
1:ff22a62:             _lastName = lastName;
1:ff22a62:             _birthday = birthday;
1:ff22a62:             _school = school;
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         public  String  getFirstName() { return _firstName; }
1:ff22a62:         public  String  getLastName() { return _lastName; }
1:ff22a62:         public  String  getBirthday() { return _birthday; }
1:ff22a62:         public  School  getSchool() { return _school; }
1:ff22a62: 
1:ff22a62:         protected   void                createMinion( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             int                 param = 1;
1:ff22a62:             Connection          conn = database.getConnection();
1:ff22a62:             java.sql.Date       sqlDate =
1:ff22a62:                 java.sql.Date.valueOf( _birthday );
1:ff22a62: 
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "insert into Student\n" +
1:ff22a62:                  "( schoolID, lastName, firstName, birthday )\n" +
1:ff22a62:                  "values( ?, ?, ?, ? )"
1:ff22a62:                  );
1:ff22a62: 
1:ff22a62:             ps.setInt( param++, _school.getPrimaryKey( database ) );
1:ff22a62:             ps.setString( param++, _lastName );
1:ff22a62:             ps.setString( param++, _firstName );
1:ff22a62:             ps.setDate( param++, sqlDate );
1:ff22a62: 
1:ff22a62:             ps.execute();
1:ff22a62:             Utils.close( ps );
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         protected   PreparedStatement   getKeyFinder( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             Connection          conn = database.getConnection();
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "select studentID from Student\n" +
1:ff22a62:                  "where lastName = ? and firstName = ?"
1:ff22a62:                  );
1:ff22a62: 
1:ff22a62:             ps.setString( 1, _lastName );
1:ff22a62:             ps.setString( 2, _firstName );
1:ff22a62: 
1:ff22a62:             return ps;
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     public  static  class   Test    extends KeyedObject
1:ff22a62:     {
1:ff22a62:         private String      _testName;
1:ff22a62:         private boolean     _grammarSchoolTest;
1:ff22a62:         private double      _highSchoolScore;
1:ff22a62: 
1:ff22a62:         public  Test
1:ff22a62:             (
1:ff22a62:              String     testName,
1:ff22a62:              boolean    grammarSchoolTest,
1:ff22a62:              double     highSchoolScore
1:ff22a62:              )
1:ff22a62:         {
1:ff22a62:             _testName = testName;
1:ff22a62:             _grammarSchoolTest = grammarSchoolTest;
1:ff22a62:             _highSchoolScore = highSchoolScore;
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         public  String      getTestName() { return _testName; }
1:ff22a62:         
1:ff22a62:         public  boolean     isGrammarSchoolTest()
1:ff22a62:         { return _grammarSchoolTest; }
1:ff22a62:         
1:ff22a62:         public  double      getHighSchoolScore()
1:ff22a62:         { return _highSchoolScore; }
1:ff22a62: 
1:ff22a62:         protected   void                createMinion( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             Connection          conn = database.getConnection();
1:ff22a62: 
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "insert into Test( testName ) values ( ? )"
1:ff22a62:                  );
1:ff22a62: 
1:ff22a62:             ps.setString( 1, _testName );
1:ff22a62: 
1:ff22a62:             ps.execute();
1:ff22a62:             Utils.close( ps );
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         protected   PreparedStatement   getKeyFinder( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             Connection          conn = database.getConnection();
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "select testID from Test where testName = ?"
1:ff22a62:                  );
1:ff22a62: 
1:ff22a62:             ps.setString( 1, _testName );
1:ff22a62: 
1:ff22a62:             return ps;
1:ff22a62:         }
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     public  static  class   TestTaking  extends KeyedObject
1:ff22a62:     {
1:ff22a62:         private Student _student;
1:ff22a62:         private Test    _test;
1:ff22a62: 
1:ff22a62:         public  TestTaking( Student student, Test test )
1:ff22a62:         {
1:ff22a62:             _student = student;
1:ff22a62:             _test = test;
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         public  Student     getStudent() { return _student; }
1:ff22a62:         public  Test        getTest() { return _test; }
1:ff22a62: 
1:ff22a62:         protected   void                createMinion( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             Connection          conn = database.getConnection();
1:ff22a62:             int                 param = 1;
1:ff22a62: 
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "insert into TestTaking\n" +
1:ff22a62:                  "( studentID, testID, score ) values ( ?, ?, ? )"
1:ff22a62:                  );
1:ff22a62: 
1:ff22a62:             ps.setInt( param++, _student.getPrimaryKey( database ) );
1:ff22a62:             ps.setInt( param++, _test.getPrimaryKey( database ) );
1:ff22a62:             ps.setInt( param++, -1 );
1:ff22a62: 
1:ff22a62:             ps.execute();
1:ff22a62:             Utils.close( ps );
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         protected   PreparedStatement   getKeyFinder( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             Connection          conn = database.getConnection();
1:ff22a62:             int                 param = 1;
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "select max( takingID ) from TestTaking\n" +
1:ff22a62:                  "where studentID = ? and testID = ?"
1:ff22a62:                  );
1:ff22a62: 
1:ff22a62:             ps.setInt( param++, _student.getPrimaryKey( database ) );
1:ff22a62:             ps.setInt( param++, _test.getPrimaryKey( database ) );
1:ff22a62: 
1:ff22a62:             return ps;
1:ff22a62:         }
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     public  static  class   Question    extends KeyedObject
1:ff22a62:     {
1:ff22a62:         private String  _questionName;
1:ff22a62:         private int     _difficulty;
1:ff22a62:         private int     _numberOfChoices;
1:ff22a62:         private int     _correctChoice;
1:ff22a62:         private Test    _test;
1:ff22a62: 
1:ff22a62:         public  Question
1:ff22a62:             (
1:ff22a62:              String questionName,
1:ff22a62:              int    difficulty,
1:ff22a62:              int    numberOfChoices,
1:ff22a62:              int    correctChoice,
1:ff22a62:              Test   test
1:ff22a62:              )
1:ff22a62:         {
1:ff22a62:             _questionName = questionName;
1:ff22a62:             _difficulty = difficulty;
1:ff22a62:             _numberOfChoices = numberOfChoices;
1:ff22a62:             _correctChoice = correctChoice;
1:ff22a62:             _test = test;
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         public  String      getQuestionName() { return _questionName; }
1:ff22a62:         
1:ff22a62:         public  int         getDifficulty() { return _difficulty; }
1:ff22a62:         
1:ff22a62:         public  int         getNumberOfChoices()
1:ff22a62:         { return _numberOfChoices; }
1:ff22a62:         
1:ff22a62:         public  int         getCorrectChoice() { return _correctChoice; }
1:ff22a62:         public  Test        getTest() { return _test; }
1:ff22a62: 
1:ff22a62:         protected   void                createMinion( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             Connection          conn = database.getConnection();
1:ff22a62:             int                 param = 1;
1:ff22a62: 
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "insert into Question\n" +
1:ff22a62:                  "( testID, questionName, difficulty, " +
1:ff22a62:                  "numberOfChoices, correctChoice )\n" +
1:ff22a62:                  "values ( ?, ?, ?, ?, ? )"
1:ff22a62:                  );
1:ff22a62: 
1:ff22a62:             ps.setInt( param++, _test.getPrimaryKey( database ) );
1:ff22a62:             ps.setString( param++, _questionName );
1:ff22a62:             ps.setInt( param++, _difficulty );
1:ff22a62:             ps.setInt( param++, _numberOfChoices );
1:ff22a62:             ps.setInt( param++, _correctChoice );
1:ff22a62: 
1:ff22a62:             ps.execute();
1:ff22a62:             Utils.close( ps );
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         protected   PreparedStatement   getKeyFinder( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             Connection          conn = database.getConnection();
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "select questionID from Question where questionName = ?"
1:ff22a62:                  );
1:ff22a62: 
1:ff22a62:             ps.setString( 1, _questionName );
1:ff22a62: 
1:ff22a62:             return ps;
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     public  static  class   QuestionTaking  extends KeyedObject
1:ff22a62:     {
1:ff22a62:         private TestTaking  _testTaking;
1:ff22a62:         private Question    _question;
1:ff22a62:         private int         _actualChoice;
1:ff22a62: 
1:ff22a62:         public  QuestionTaking
1:ff22a62:             (
1:ff22a62:              TestTaking testTaking,
1:ff22a62:              Question   question,
1:ff22a62:              int        actualChoice
1:ff22a62:              )
1:ff22a62:         {
1:ff22a62:             _testTaking = testTaking;
1:ff22a62:             _question = question;
1:ff22a62:             _actualChoice = actualChoice;
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         public  TestTaking  getTestTaking() { return _testTaking; }
1:ff22a62:         public  Question    getQuestion() { return _question; }
1:ff22a62:         public  int         getActualChoice() { return _actualChoice; }
1:ff22a62: 
1:ff22a62:         protected   void                createMinion( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             Connection          conn = database.getConnection();
1:ff22a62:             int                 param = 1;
1:ff22a62: 
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "insert into QuestionTaking\n" +
1:ff22a62:                  "( questionID, takingID, actualChoice ) values ( ?, ?, ? )"
1:ff22a62:                  );
1:ff22a62: 
1:ff22a62:             ps.setInt( param++, _question.getPrimaryKey( database ) );
1:ff22a62:             ps.setInt( param++, _testTaking.getPrimaryKey( database ) );
1:ff22a62:             ps.setInt( param++, _actualChoice );
1:ff22a62: 
1:ff22a62:             ps.execute();
1:ff22a62:             Utils.close( ps );
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         protected   PreparedStatement   getKeyFinder( Database database )
1:ff22a62:             throws SQLException
1:ff22a62:         {
1:ff22a62:             // no primary key for this table!
1:ff22a62:             throw notImplemented();
1:ff22a62:         }
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // CONSTRUCTOR
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Create an object to populate the tables for the Scores application.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  Data()
1:ff22a62:     {
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // PUBLIC BEHAVIOR
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Initialize the Scores application with data.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  void    initialize( Database database )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         initialize( database, SCHOOLS );
1:ff22a62:         initialize( database, STUDENTS );
1:ff22a62:         initialize( database, TESTS );
1:ff22a62:         initializeQuestions( database );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Make the students take their tests.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  void    takeTests( Database database )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         int                 testCount = TESTS.length;
1:ff22a62:         int                 takings = 0;
1:ff22a62: 
1:ff22a62:         for ( int i = 0; i < testCount; i++ )
1:ff22a62:         {
1:ff22a62:             takings = takeTest( database, TESTS[ i ], takings );
1:ff22a62:         }
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Make all eligible students take the test.
1:ff22a62:      * Grammar school tests are taken
1:ff22a62:      * by all students. High school tests are only taken by high school
1:ff22a62:      * students. Returns the number of test takings so far (this is used
1:ff22a62:      * to throttle diagnostic noise.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  int takeTest( Database database, Test test, int takings )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         Logger      log = Logger.getLogger();
1:ff22a62:         boolean     loggingEnabled = log.isLoggingEnabled();
1:ff22a62:         int         studentCount = STUDENTS.length;
1:ff22a62:         double      highSchoolScore = test.getHighSchoolScore();
1:ff22a62:         double      grammarSchoolScore =
1:ff22a62:             highSchoolScore - GRAMMAR_SCHOOL_PENALTY;
1:ff22a62:         double      fluctuation;
1:ff22a62:         double      targetScore;
1:ff22a62: 
1:ff22a62:         for ( int i = 0; i < studentCount; i++ )
1:ff22a62:         {
1:ff22a62:             Student     student = STUDENTS[ i ];
1:ff22a62:             boolean     grammarSchoolStudent =
1:ff22a62:                 student.getSchool().isGrammarSchool();
1:ff22a62: 
1:ff22a62:             if ( grammarSchoolStudent && (!test.isGrammarSchoolTest()) )
1:ff22a62:             { continue; }
1:ff22a62: 
1:ff22a62:             if ( grammarSchoolStudent )
1:ff22a62:             { targetScore = grammarSchoolScore; }
1:ff22a62:             else
1:ff22a62:             { targetScore = highSchoolScore; }
1:ff22a62: 
1:ff22a62:             fluctuation = (((double) i) * FLUCTATION_MULTIPLIER) * (-1.0);
1:ff22a62:             targetScore += fluctuation;
1:ff22a62: 
1:ff22a62:             try {
1:ff22a62:                 //
1:ff22a62:                 // Only print out the first test taking.
1:ff22a62:                 // They all look alike.
1:ff22a62:                 //
1:ff22a62:                 if ( takings > 0 ) { log.enableLogging( false ); }
1:ff22a62: 
1:ff22a62:                 takeTest( database, student, test, targetScore );
1:ff22a62:                 takings++;
1:ff22a62:             }
1:ff22a62:             finally
1:ff22a62:             {
1:ff22a62:                 log.enableLogging( loggingEnabled );
1:ff22a62:             }
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         return takings;
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Take a test.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  void    takeTest
1:ff22a62:         (
1:ff22a62:          Database   database,
1:ff22a62:          Student    student,
1:ff22a62:          Test       test,
1:ff22a62:          double     initialTargetScore
1:ff22a62:          )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         Logger      log = Logger.getLogger();
1:ff22a62:         boolean     loggingEnabled = log.isLoggingEnabled();
1:ff22a62:         TestTaking  testTaking;
1:ff22a62:         
1:ff22a62:         // don't print out the chatter from creating these rows.
1:ff22a62:         try {
1:ff22a62:             log.enableLogging( false );
1:ff22a62:             
1:ff22a62:             testTaking = takeTestingMinion
1:ff22a62:                 ( database, student, test, initialTargetScore );
1:ff22a62:         }
1:ff22a62:         finally
1:ff22a62:         {
1:ff22a62:             log.enableLogging( loggingEnabled );
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         // I want to see this, though
1:ff22a62:         finishTest( database, testTaking );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * The guts of test taking, removed here
1:ff22a62:      * to a separate method so that we can turn off logging.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     private TestTaking  takeTestingMinion
1:ff22a62:         (
1:ff22a62:          Database   database,
1:ff22a62:          Student    student,
1:ff22a62:          Test       test,
1:ff22a62:          double     initialTargetScore
1:ff22a62:          )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         TestTaking          testTaking = new TestTaking( student, test );
1:ff22a62:         Connection          conn = database.getConnection();
1:ff22a62:         double              targetScore = makeTargetScore
1:ff22a62:             ( database, student, test, initialTargetScore );
1:ff22a62: 
1:ff22a62:         //
1:ff22a62:         // Initiate the test.
1:ff22a62:         //
1:ff22a62:         testTaking.create( database );
1:ff22a62: 
1:ff22a62:         //
1:ff22a62:         // Now get the questions which have to be answered.
1:ff22a62:         //
1:ff22a62: 
1:ff22a62:         PreparedStatement   ps = Utils.prepare
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "select questionName, difficulty, numberOfChoices, " +
1:ff22a62:              "correctChoice from Question\n" +
1:ff22a62:              "where testID = ?"
1:ff22a62:              );
1:ff22a62:         ps.setInt( 1, test.getPrimaryKey( database ) );
1:ff22a62: 
1:ff22a62:         ResultSet           rs = ps.executeQuery();
1:ff22a62:         
1:ff22a62:         double              weightSoFar = 0.0;
1:ff22a62:         double              answersSoFar = 0.0;
1:ff22a62:         double              scoreSoFar = 0.0;
1:ff22a62: 
1:ff22a62:         while( rs.next() )
1:ff22a62:         {
1:ff22a62:             int             column = 1;
1:ff22a62:             Question        question = new Question
1:ff22a62:                 (
1:ff22a62:                  rs.getString( column++ ),
1:ff22a62:                  rs.getInt( column++ ),
1:ff22a62:                  rs.getInt( column++ ),
1:ff22a62:                  rs.getInt( column++ ),
1:ff22a62:                  test
1:ff22a62:                  );
1:ff22a62:             int             correctChoice = question.getCorrectChoice();
1:ff22a62:             int             difficulty = question.getDifficulty();
1:ff22a62:             int             actualChoice;
1:ff22a62: 
1:ff22a62:             //
1:ff22a62:             // Answer the question correctly if we haven't achieved our
1:ff22a62:             // target score.
1:ff22a62:             //
1:ff22a62:             if ( scoreSoFar <= targetScore )
1:ff22a62:             { actualChoice = correctChoice; }
1:ff22a62:             else
1:ff22a62:             { actualChoice = correctChoice - 1; }
1:ff22a62: 
1:ff22a62:             weightSoFar += Utils.weighQuestion( difficulty );
1:ff22a62:             answersSoFar += Utils.scoreAnswer
1:ff22a62:                 (
1:ff22a62:                  difficulty,
1:ff22a62:                  question.getNumberOfChoices(),
1:ff22a62:                  correctChoice,
1:ff22a62:                  actualChoice
1:ff22a62:                  );
1:ff22a62:             scoreSoFar = Utils.finishScore( weightSoFar, answersSoFar );
1:ff22a62: 
1:ff22a62:             QuestionTaking  questionTaking =
1:ff22a62:                 new QuestionTaking( testTaking, question, actualChoice );
1:ff22a62: 
1:ff22a62:             questionTaking.create( database );
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         return testTaking;
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * The student's grade should improve with each taking.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     private double  makeTargetScore
1:ff22a62:         (
1:ff22a62:          Database   database,
1:ff22a62:          Student    student,
1:ff22a62:          Test       test,
1:ff22a62:          double     initialTargetScore
1:ff22a62:          )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         int                 param = 1;
1:ff22a62:         PreparedStatement   ps = Utils.prepare
1:ff22a62:             (
1:ff22a62:              database.getConnection(),
1:ff22a62:              "select count(*) from TestTaking\n" +
1:ff22a62:              "where studentID = ? and testID = ?"
1:ff22a62:              );
1:ff22a62: 
1:ff22a62:         ps.setInt( param++, student.getPrimaryKey( database ) );
1:ff22a62:         ps.setInt( param++, test.getPrimaryKey( database ) );
1:ff22a62:         
1:ff22a62:         int     takingCount = Utils.getScalarValue( ps );
1:ff22a62: 
1:ff22a62:         return
1:ff22a62:             (((double) takingCount) * IMPROVEMENT_PER_TAKING) +
1:ff22a62:             initialTargetScore;
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Finish taking a Test. This involves updating the datestamp and
1:ff22a62:      * triggering Test scoring.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     private void    finishTest( Database database, TestTaking testTaking )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         Connection          conn = database.getConnection();
1:ff22a62:         int                 param = 1;
1:ff22a62:         java.sql.Date       date =
1:ff22a62:             new java.sql.Date( System.currentTimeMillis() );
1:ff22a62:         PreparedStatement   ps = Utils.prepare
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "update TestTaking set takingDate = ? where takingID = ?\n"
1:ff22a62:              );
1:ff22a62: 
1:ff22a62:         ps.setDate( param++, date );
1:ff22a62:         ps.setInt( param++, testTaking.getPrimaryKey( database ) );
1:ff22a62: 
1:ff22a62:         ps.execute();
1:ff22a62: 
1:ff22a62:         Utils.close( ps );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Report which students in the given school incorrectly answered the
1:ff22a62:      * given question.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public void    reportWhoNeedsImprovement
1:ff22a62:         ( Database database, School school, String questionName )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         Connection          conn = database.getConnection();
1:ff22a62:         int                 param = 1;
1:ff22a62:         PreparedStatement   ps = Utils.prepare
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "select st.lastName, st.firstName\n" +
1:ff22a62:              "from School sc, Student st,\n" +
1:ff22a62:              "     LastTaking lt, QuestionTaking qt,\n" +
1:ff22a62:              "     Question q\n" +
1:ff22a62:              "where\n" +
1:ff22a62:              "q.questionName = ?\n" +
1:ff22a62:              "and sc.schoolID = ?\n" +
1:ff22a62:              "\n" +
1:ff22a62:              "and q.questionID = qt.questionID\n" +
1:ff22a62:              "and sc.schoolID = st.schoolID\n" +
1:ff22a62:              "\n" +
1:ff22a62:              "and lt.testID = q.testID\n" +
1:ff22a62:              "and lt.studentID = st.studentID\n" +
1:ff22a62:              "and lt.takingID = qt.takingID\n" +
1:ff22a62:              "\n" +
1:ff22a62:              "and scoreAnswer"+
1:ff22a62:              "( q.difficulty, q.numberOfChoices, " +
1:ff22a62:              "q.correctChoice, qt.actualChoice )\n" +
1:ff22a62:              "  < weighQuestion( q.difficulty )\n" +
1:ff22a62:              "\n" +
1:ff22a62:              "order by st.lastName, st.firstName\n"
1:ff22a62:              );
1:ff22a62: 
1:ff22a62:         ps.setString( param++, questionName );
1:ff22a62:         ps.setInt( param++, school.getPrimaryKey( database ) );
1:ff22a62: 
1:ff22a62:         ResultSet   rs = ps.executeQuery();
1:ff22a62: 
1:ff22a62:         Database.prettyPrint( conn, rs );
1:ff22a62: 
1:ff22a62:         Utils.close( rs );
1:ff22a62:         Utils.close( ps );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // MINIONS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Create a bunch of questions from the template questions.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     private void    initializeQuestions( Database database )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         int     count = QUESTIONS.length;
1:ff22a62: 
1:ff22a62:         for ( int i = 0; i < count; i++ )
1:ff22a62:         {
1:ff22a62:             Question    template = QUESTIONS[ i ];
1:ff22a62: 
1:ff22a62:             for ( int j = 0; j < QUESTIONS_PER_TEMPLATE; j++ )
1:ff22a62:             {
1:ff22a62:                 Question    clone = new Question
1:ff22a62:                     (
1:ff22a62:                      template.getQuestionName() + '_' + j,
1:ff22a62:                      template.getDifficulty(),
1:ff22a62:                      template.getNumberOfChoices(),
1:ff22a62:                      template.getCorrectChoice(),
1:ff22a62:                      template.getTest()
1:ff22a62:                      );
1:ff22a62: 
1:ff22a62:                 clone.create( database );
1:ff22a62:             }
1:ff22a62:         }
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Populate a table with its objects.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     private void    initialize( Database database, KeyedObject[] objects )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         int     count = objects.length;
1:ff22a62: 
1:ff22a62:         for ( int i = 0; i < count; i++ )
1:ff22a62:         { objects[ i ].create( database ); }
1:ff22a62:     }
1:ff22a62: 
1:ff22a62: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ff22a62
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyDemo.scores.data.Data
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyDemo.scores.data;
1: 
1: import java.sql.*;
1: 
1: import org.apache.derbyDemo.scores.util.*;
1: 
1: /**
1:  * <p>
1:  * Data used by Scores application
1:  * </p>
1:  *
0:  * @author Rick Hillegas
1:  */
1: public  class   Data
1: {
1:     ////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     private static  final   int     QUESTIONS_PER_TEMPLATE = 10;
1:     private static  final   double  IMPROVEMENT_PER_TAKING = 2.0;
1:     private static  final   double  GRAMMAR_SCHOOL_PENALTY = 20.0;
1:     private static  final   double  PER_STUDENT_FLUCTUATION = 3.0;
1:     private static  final   double  FLUCTATION_MULTIPLIER = 2.0;
1:     
1:     public  static  final   School  LincolnGrammar =
1:         new School( "Lincoln Grammar", true );
1:     public  static  final   School  WashingtonHS =
1:         new School( "Washington HS", false );
1: 
1:     public  static  final   Student AliceToklas = new Student
1:         ( "Alice", "Toklas", "1998-03-21", LincolnGrammar );
1:     public  static  final   Student GertrudeStein = new Student
1:         ( "Gertrude", "Stein", "1999-07-15", LincolnGrammar );
1:     public  static  final   Student HenryJames = new Student
1:         ( "Henry", "James", "2000-09-03", LincolnGrammar );
1:     public  static  final   Student GoreVidal = new Student
1:         ( "Gore", "Vidal", "2008-12-25", LincolnGrammar );
1: 
1:     public  static  final   Student TrumanCapote = new Student
1:         ( "Truman", "Capote", "1992-08-05", WashingtonHS );
1:     public  static  final   Student WaltWhitman = new Student
1:         ( "Walt", "Whitman", "1991-12-28", WashingtonHS );
1:     public  static  final   Student DorothyParker = new Student
1:         ( "Dorothy", "Parker", "1990-01-09", WashingtonHS );
1:     public  static  final   Student AndrewSullivan = new Student
1:         ( "Andrew", "Sullivan", "1989-02-20", WashingtonHS );
1: 
1:     public  static  final   Test GradeSchoolMath =
1:         new Test( "Grade School Math", true, 90.0 );
1:     public  static  final   Test GradeSchoolEnglish =
1:         new Test( "Grade School English", true, 85.0 );
1:     public  static  final   Test HighSchoolMath =
1:         new Test( "High School Math", false, 80.0 );
1:     public  static  final   Test HighSchoolEnglish =
1:         new Test( "High School English", false, 75.0 );
1: 
1:     public  static  final   Question    GSM_1 =
1:         new Question( "GSM_1", 1, 5, 2, GradeSchoolMath );
1:     public  static  final   Question    GSM_2 =
1:         new Question( "GSM_2", 2, 3, 1, GradeSchoolMath );
1:     public  static  final   Question    GSM_3 =
1:         new Question( "GSM_3", 3, 4, 3, GradeSchoolMath );
1:     
1:     public  static  final   Question    GSE_1 =
1:         new Question( "GSE_1", 3, 5, 2, GradeSchoolEnglish );
1:     public  static  final   Question    GSE_2 =
1:         new Question( "GSE_2", 2, 3, 1, GradeSchoolEnglish );
1:     public  static  final   Question    GSE_3 =
1:         new Question( "GSE_3", 1, 4, 3, GradeSchoolEnglish );
1: 
1:     public  static  final   Question    HSM_1 =
1:         new Question( "HSM_1", 1, 5, 2, HighSchoolMath );
1:     public  static  final   Question    HSM_2 =
1:         new Question( "HSM_2", 2, 3, 1, HighSchoolMath );
1:     public  static  final   Question    HSM_3 =
1:         new Question( "HSM_3", 3, 4, 3, HighSchoolMath );
1:     
1:     public  static  final   Question    HSE_1 =
1:         new Question( "HSE_1", 3, 5, 2, HighSchoolEnglish );
1:     public  static  final   Question    HSE_2 =
1:         new Question( "HSE_2", 2, 3, 1, HighSchoolEnglish );
1:     public  static  final   Question    HSE_3 =
1:         new Question( "HSE_3", 1, 4, 3, HighSchoolEnglish );
1: 
1:     public  static  final   Question[]      QUESTIONS =
1:     {
1:         GSM_1,
1:         GSM_2,
1:         GSM_3,
1:         
1:         GSE_1,
1:         GSE_2,
1:         GSE_3,
1:         
1:         HSM_1,
1:         HSM_2,
1:         HSM_3,
1:         
1:         HSE_1,
1:         HSE_2,
1:         HSE_3,
1:     };
1:     
1:     public  static  final   School[] SCHOOLS =
1:     {
1:         LincolnGrammar,
1:         WashingtonHS,
1:     };
1: 
1:     public  static  final   Student[]   STUDENTS =
1:     {
1:         AliceToklas,
1:         GertrudeStein,
1:         TrumanCapote,
1:         WaltWhitman,
1:         HenryJames,
1:         GoreVidal,
1:         DorothyParker,
1:         AndrewSullivan,
1:     };
1: 
1:     public  static  final   Test[]  TESTS =
1:     {
1:         GradeSchoolMath,
1:         GradeSchoolEnglish,
1:         HighSchoolMath,
1:         HighSchoolEnglish,
1:     };
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ////////////////////////////////////////////////////////
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // INNER CLASSES
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     public  abstract    static  class   KeyedObject
1:     {
1:         private Integer _key;
1:         
1:         public  void                create( Database database )
1:             throws SQLException
1:         {
1:             Logger  log = Logger.getLogger();
1:             boolean loggingEnabled = log.isLoggingEnabled();
1:             
1:             // don't print out the chatter from creating these rows.
1:             try {
1:                 log.enableLogging( false );
1: 
1:                 createMinion( database );
1:             }
1:             finally
1:             {
1:                 log.enableLogging( loggingEnabled );
1:             }
1:         }
1: 
1:         protected   abstract    void    createMinion( Database database )
1:             throws SQLException;
1: 
1:         protected   abstract    PreparedStatement   getKeyFinder
1:             ( Database database )
1:             throws SQLException;
1: 
1:         public  int getPrimaryKey( Database database )
1:             throws SQLException
1:         {
1:             if ( _key == null )
1:             {
1:                 PreparedStatement   ps = getKeyFinder( database );
1: 
1:                 setPrimaryKey( Utils.getScalarValue( ps ) );
1:             }
1: 
1:             return _key.intValue();
1:         }
1: 
1:         private void    setPrimaryKey( int key )
1:         {
1:             _key = new Integer( key );          
1:         }
1: 
1:         public  SQLException    notImplemented()
1:         { return new SQLException( "Not implemented." ); }
1:     }
1: 
1: 
1:     public  static  class   School  extends KeyedObject
1:     {
1:         private String      _schoolName;
1:         private boolean     _isGrammarSchool;
1: 
1:         public  School( String schoolName, boolean isGrammarSchool )
1:         {
1:             _schoolName = schoolName;
1:             _isGrammarSchool = isGrammarSchool;
1:         }
1: 
1:         public  String      getSchoolName() { return _schoolName; }
1:         public  boolean     isGrammarSchool() { return _isGrammarSchool; }
1: 
1:         protected   void                createMinion( Database database )
1:             throws SQLException
1:         {
1:             Connection          conn = database.getConnection();
1: 
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "insert into School( schoolName ) values ( ? )"
1:                  );
1: 
1:             ps.setString( 1, _schoolName );
1: 
1:             ps.execute();
1:             Utils.close( ps );
1:         }
1: 
1:         protected   PreparedStatement   getKeyFinder( Database database )
1:             throws SQLException
1:         {
1:             Connection          conn = database.getConnection();
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "select schoolID from School where schoolName = ?"
1:                  );
1: 
1:             ps.setString( 1, _schoolName );
1: 
1:             return ps;
1:         }
1: 
1:     }
1:     
1:     public  static  class   Student extends KeyedObject
1:     {
1:         private String  _firstName;
1:         private String  _lastName;
1:         private String  _birthday;
1:         private School  _school;
1: 
1:         public  Student
1:             (
1:              String firstName,
1:              String lastName,
1:              String birthday,
1:              School school
1:              )
1:         {
1:             _firstName = firstName;
1:             _lastName = lastName;
1:             _birthday = birthday;
1:             _school = school;
1:         }
1: 
1:         public  String  getFirstName() { return _firstName; }
1:         public  String  getLastName() { return _lastName; }
1:         public  String  getBirthday() { return _birthday; }
1:         public  School  getSchool() { return _school; }
1: 
1:         protected   void                createMinion( Database database )
1:             throws SQLException
1:         {
1:             int                 param = 1;
1:             Connection          conn = database.getConnection();
1:             java.sql.Date       sqlDate =
1:                 java.sql.Date.valueOf( _birthday );
1: 
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "insert into Student\n" +
1:                  "( schoolID, lastName, firstName, birthday )\n" +
1:                  "values( ?, ?, ?, ? )"
1:                  );
1: 
1:             ps.setInt( param++, _school.getPrimaryKey( database ) );
1:             ps.setString( param++, _lastName );
1:             ps.setString( param++, _firstName );
1:             ps.setDate( param++, sqlDate );
1: 
1:             ps.execute();
1:             Utils.close( ps );
1:         }
1: 
1:         protected   PreparedStatement   getKeyFinder( Database database )
1:             throws SQLException
1:         {
1:             Connection          conn = database.getConnection();
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "select studentID from Student\n" +
1:                  "where lastName = ? and firstName = ?"
1:                  );
1: 
1:             ps.setString( 1, _lastName );
1:             ps.setString( 2, _firstName );
1: 
1:             return ps;
1:         }
1: 
1:     }
1:     
1:     public  static  class   Test    extends KeyedObject
1:     {
1:         private String      _testName;
1:         private boolean     _grammarSchoolTest;
1:         private double      _highSchoolScore;
1: 
1:         public  Test
1:             (
1:              String     testName,
1:              boolean    grammarSchoolTest,
1:              double     highSchoolScore
1:              )
1:         {
1:             _testName = testName;
1:             _grammarSchoolTest = grammarSchoolTest;
1:             _highSchoolScore = highSchoolScore;
1:         }
1: 
1:         public  String      getTestName() { return _testName; }
1:         
1:         public  boolean     isGrammarSchoolTest()
1:         { return _grammarSchoolTest; }
1:         
1:         public  double      getHighSchoolScore()
1:         { return _highSchoolScore; }
1: 
1:         protected   void                createMinion( Database database )
1:             throws SQLException
1:         {
1:             Connection          conn = database.getConnection();
1: 
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "insert into Test( testName ) values ( ? )"
1:                  );
1: 
1:             ps.setString( 1, _testName );
1: 
1:             ps.execute();
1:             Utils.close( ps );
1:         }
1: 
1:         protected   PreparedStatement   getKeyFinder( Database database )
1:             throws SQLException
1:         {
1:             Connection          conn = database.getConnection();
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "select testID from Test where testName = ?"
1:                  );
1: 
1:             ps.setString( 1, _testName );
1: 
1:             return ps;
1:         }
1:     }
1: 
1:     public  static  class   TestTaking  extends KeyedObject
1:     {
1:         private Student _student;
1:         private Test    _test;
1: 
1:         public  TestTaking( Student student, Test test )
1:         {
1:             _student = student;
1:             _test = test;
1:         }
1: 
1:         public  Student     getStudent() { return _student; }
1:         public  Test        getTest() { return _test; }
1: 
1:         protected   void                createMinion( Database database )
1:             throws SQLException
1:         {
1:             Connection          conn = database.getConnection();
1:             int                 param = 1;
1: 
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "insert into TestTaking\n" +
1:                  "( studentID, testID, score ) values ( ?, ?, ? )"
1:                  );
1: 
1:             ps.setInt( param++, _student.getPrimaryKey( database ) );
1:             ps.setInt( param++, _test.getPrimaryKey( database ) );
1:             ps.setInt( param++, -1 );
1: 
1:             ps.execute();
1:             Utils.close( ps );
1:         }
1: 
1:         protected   PreparedStatement   getKeyFinder( Database database )
1:             throws SQLException
1:         {
1:             Connection          conn = database.getConnection();
1:             int                 param = 1;
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "select max( takingID ) from TestTaking\n" +
1:                  "where studentID = ? and testID = ?"
1:                  );
1: 
1:             ps.setInt( param++, _student.getPrimaryKey( database ) );
1:             ps.setInt( param++, _test.getPrimaryKey( database ) );
1: 
1:             return ps;
1:         }
1:     }
1: 
1:     public  static  class   Question    extends KeyedObject
1:     {
1:         private String  _questionName;
1:         private int     _difficulty;
1:         private int     _numberOfChoices;
1:         private int     _correctChoice;
1:         private Test    _test;
1: 
1:         public  Question
1:             (
1:              String questionName,
1:              int    difficulty,
1:              int    numberOfChoices,
1:              int    correctChoice,
1:              Test   test
1:              )
1:         {
1:             _questionName = questionName;
1:             _difficulty = difficulty;
1:             _numberOfChoices = numberOfChoices;
1:             _correctChoice = correctChoice;
1:             _test = test;
1:         }
1: 
1:         public  String      getQuestionName() { return _questionName; }
1:         
1:         public  int         getDifficulty() { return _difficulty; }
1:         
1:         public  int         getNumberOfChoices()
1:         { return _numberOfChoices; }
1:         
1:         public  int         getCorrectChoice() { return _correctChoice; }
1:         public  Test        getTest() { return _test; }
1: 
1:         protected   void                createMinion( Database database )
1:             throws SQLException
1:         {
1:             Connection          conn = database.getConnection();
1:             int                 param = 1;
1: 
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "insert into Question\n" +
1:                  "( testID, questionName, difficulty, " +
1:                  "numberOfChoices, correctChoice )\n" +
1:                  "values ( ?, ?, ?, ?, ? )"
1:                  );
1: 
1:             ps.setInt( param++, _test.getPrimaryKey( database ) );
1:             ps.setString( param++, _questionName );
1:             ps.setInt( param++, _difficulty );
1:             ps.setInt( param++, _numberOfChoices );
1:             ps.setInt( param++, _correctChoice );
1: 
1:             ps.execute();
1:             Utils.close( ps );
1:         }
1: 
1:         protected   PreparedStatement   getKeyFinder( Database database )
1:             throws SQLException
1:         {
1:             Connection          conn = database.getConnection();
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "select questionID from Question where questionName = ?"
1:                  );
1: 
1:             ps.setString( 1, _questionName );
1: 
1:             return ps;
1:         }
1: 
1:     }
1: 
1:     public  static  class   QuestionTaking  extends KeyedObject
1:     {
1:         private TestTaking  _testTaking;
1:         private Question    _question;
1:         private int         _actualChoice;
1: 
1:         public  QuestionTaking
1:             (
1:              TestTaking testTaking,
1:              Question   question,
1:              int        actualChoice
1:              )
1:         {
1:             _testTaking = testTaking;
1:             _question = question;
1:             _actualChoice = actualChoice;
1:         }
1: 
1:         public  TestTaking  getTestTaking() { return _testTaking; }
1:         public  Question    getQuestion() { return _question; }
1:         public  int         getActualChoice() { return _actualChoice; }
1: 
1:         protected   void                createMinion( Database database )
1:             throws SQLException
1:         {
1:             Connection          conn = database.getConnection();
1:             int                 param = 1;
1: 
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "insert into QuestionTaking\n" +
1:                  "( questionID, takingID, actualChoice ) values ( ?, ?, ? )"
1:                  );
1: 
1:             ps.setInt( param++, _question.getPrimaryKey( database ) );
1:             ps.setInt( param++, _testTaking.getPrimaryKey( database ) );
1:             ps.setInt( param++, _actualChoice );
1: 
1:             ps.execute();
1:             Utils.close( ps );
1:         }
1: 
1:         protected   PreparedStatement   getKeyFinder( Database database )
1:             throws SQLException
1:         {
1:             // no primary key for this table!
1:             throw notImplemented();
1:         }
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Create an object to populate the tables for the Scores application.
1:      * </p>
1:      */
1:     public  Data()
1:     {
1:     }
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // PUBLIC BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Initialize the Scores application with data.
1:      * </p>
1:      */
1:     public  void    initialize( Database database )
1:         throws SQLException
1:     {
1:         initialize( database, SCHOOLS );
1:         initialize( database, STUDENTS );
1:         initialize( database, TESTS );
1:         initializeQuestions( database );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Make the students take their tests.
1:      * </p>
1:      */
1:     public  void    takeTests( Database database )
1:         throws SQLException
1:     {
1:         int                 testCount = TESTS.length;
1:         int                 takings = 0;
1: 
1:         for ( int i = 0; i < testCount; i++ )
1:         {
1:             takings = takeTest( database, TESTS[ i ], takings );
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Make all eligible students take the test.
1:      * Grammar school tests are taken
1:      * by all students. High school tests are only taken by high school
1:      * students. Returns the number of test takings so far (this is used
1:      * to throttle diagnostic noise.
1:      * </p>
1:      */
1:     public  int takeTest( Database database, Test test, int takings )
1:         throws SQLException
1:     {
1:         Logger      log = Logger.getLogger();
1:         boolean     loggingEnabled = log.isLoggingEnabled();
1:         int         studentCount = STUDENTS.length;
1:         double      highSchoolScore = test.getHighSchoolScore();
1:         double      grammarSchoolScore =
1:             highSchoolScore - GRAMMAR_SCHOOL_PENALTY;
1:         double      fluctuation;
1:         double      targetScore;
1: 
1:         for ( int i = 0; i < studentCount; i++ )
1:         {
1:             Student     student = STUDENTS[ i ];
1:             boolean     grammarSchoolStudent =
1:                 student.getSchool().isGrammarSchool();
1: 
1:             if ( grammarSchoolStudent && (!test.isGrammarSchoolTest()) )
1:             { continue; }
1: 
1:             if ( grammarSchoolStudent )
1:             { targetScore = grammarSchoolScore; }
1:             else
1:             { targetScore = highSchoolScore; }
1: 
1:             fluctuation = (((double) i) * FLUCTATION_MULTIPLIER) * (-1.0);
1:             targetScore += fluctuation;
1: 
1:             try {
1:                 //
1:                 // Only print out the first test taking.
1:                 // They all look alike.
1:                 //
1:                 if ( takings > 0 ) { log.enableLogging( false ); }
1: 
1:                 takeTest( database, student, test, targetScore );
1:                 takings++;
1:             }
1:             finally
1:             {
1:                 log.enableLogging( loggingEnabled );
1:             }
1:         }
1: 
1:         return takings;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Take a test.
1:      * </p>
1:      */
1:     public  void    takeTest
1:         (
1:          Database   database,
1:          Student    student,
1:          Test       test,
1:          double     initialTargetScore
1:          )
1:         throws SQLException
1:     {
1:         Logger      log = Logger.getLogger();
1:         boolean     loggingEnabled = log.isLoggingEnabled();
1:         TestTaking  testTaking;
1:         
1:         // don't print out the chatter from creating these rows.
1:         try {
1:             log.enableLogging( false );
1:             
1:             testTaking = takeTestingMinion
1:                 ( database, student, test, initialTargetScore );
1:         }
1:         finally
1:         {
1:             log.enableLogging( loggingEnabled );
1:         }
1: 
1:         // I want to see this, though
1:         finishTest( database, testTaking );
1:     }
1: 
1:     /**
1:      * <p>
1:      * The guts of test taking, removed here
1:      * to a separate method so that we can turn off logging.
1:      * </p>
1:      */
1:     private TestTaking  takeTestingMinion
1:         (
1:          Database   database,
1:          Student    student,
1:          Test       test,
1:          double     initialTargetScore
1:          )
1:         throws SQLException
1:     {
1:         TestTaking          testTaking = new TestTaking( student, test );
1:         Connection          conn = database.getConnection();
1:         double              targetScore = makeTargetScore
1:             ( database, student, test, initialTargetScore );
1: 
1:         //
1:         // Initiate the test.
1:         //
1:         testTaking.create( database );
1: 
1:         //
1:         // Now get the questions which have to be answered.
1:         //
1: 
1:         PreparedStatement   ps = Utils.prepare
1:             (
1:              conn,
1:              "select questionName, difficulty, numberOfChoices, " +
1:              "correctChoice from Question\n" +
1:              "where testID = ?"
1:              );
1:         ps.setInt( 1, test.getPrimaryKey( database ) );
1: 
1:         ResultSet           rs = ps.executeQuery();
1:         
1:         double              weightSoFar = 0.0;
1:         double              answersSoFar = 0.0;
1:         double              scoreSoFar = 0.0;
1: 
1:         while( rs.next() )
1:         {
1:             int             column = 1;
1:             Question        question = new Question
1:                 (
1:                  rs.getString( column++ ),
1:                  rs.getInt( column++ ),
1:                  rs.getInt( column++ ),
1:                  rs.getInt( column++ ),
1:                  test
1:                  );
1:             int             correctChoice = question.getCorrectChoice();
1:             int             difficulty = question.getDifficulty();
1:             int             actualChoice;
1: 
1:             //
1:             // Answer the question correctly if we haven't achieved our
1:             // target score.
1:             //
1:             if ( scoreSoFar <= targetScore )
1:             { actualChoice = correctChoice; }
1:             else
1:             { actualChoice = correctChoice - 1; }
1: 
1:             weightSoFar += Utils.weighQuestion( difficulty );
1:             answersSoFar += Utils.scoreAnswer
1:                 (
1:                  difficulty,
1:                  question.getNumberOfChoices(),
1:                  correctChoice,
1:                  actualChoice
1:                  );
1:             scoreSoFar = Utils.finishScore( weightSoFar, answersSoFar );
1: 
1:             QuestionTaking  questionTaking =
1:                 new QuestionTaking( testTaking, question, actualChoice );
1: 
1:             questionTaking.create( database );
1:         }
1: 
1:         return testTaking;
1:     }
1: 
1:     /**
1:      * <p>
1:      * The student's grade should improve with each taking.
1:      * </p>
1:      */
1:     private double  makeTargetScore
1:         (
1:          Database   database,
1:          Student    student,
1:          Test       test,
1:          double     initialTargetScore
1:          )
1:         throws SQLException
1:     {
1:         int                 param = 1;
1:         PreparedStatement   ps = Utils.prepare
1:             (
1:              database.getConnection(),
1:              "select count(*) from TestTaking\n" +
1:              "where studentID = ? and testID = ?"
1:              );
1: 
1:         ps.setInt( param++, student.getPrimaryKey( database ) );
1:         ps.setInt( param++, test.getPrimaryKey( database ) );
1:         
1:         int     takingCount = Utils.getScalarValue( ps );
1: 
1:         return
1:             (((double) takingCount) * IMPROVEMENT_PER_TAKING) +
1:             initialTargetScore;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Finish taking a Test. This involves updating the datestamp and
1:      * triggering Test scoring.
1:      * </p>
1:      */
1:     private void    finishTest( Database database, TestTaking testTaking )
1:         throws SQLException
1:     {
1:         Connection          conn = database.getConnection();
1:         int                 param = 1;
1:         java.sql.Date       date =
1:             new java.sql.Date( System.currentTimeMillis() );
1:         PreparedStatement   ps = Utils.prepare
1:             (
1:              conn,
1:              "update TestTaking set takingDate = ? where takingID = ?\n"
1:              );
1: 
1:         ps.setDate( param++, date );
1:         ps.setInt( param++, testTaking.getPrimaryKey( database ) );
1: 
1:         ps.execute();
1: 
1:         Utils.close( ps );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Report which students in the given school incorrectly answered the
1:      * given question.
1:      * </p>
1:      */
1:     public void    reportWhoNeedsImprovement
1:         ( Database database, School school, String questionName )
1:         throws SQLException
1:     {
1:         Connection          conn = database.getConnection();
1:         int                 param = 1;
1:         PreparedStatement   ps = Utils.prepare
1:             (
1:              conn,
1:              "select st.lastName, st.firstName\n" +
1:              "from School sc, Student st,\n" +
1:              "     LastTaking lt, QuestionTaking qt,\n" +
1:              "     Question q\n" +
1:              "where\n" +
1:              "q.questionName = ?\n" +
1:              "and sc.schoolID = ?\n" +
1:              "\n" +
1:              "and q.questionID = qt.questionID\n" +
1:              "and sc.schoolID = st.schoolID\n" +
1:              "\n" +
1:              "and lt.testID = q.testID\n" +
1:              "and lt.studentID = st.studentID\n" +
1:              "and lt.takingID = qt.takingID\n" +
1:              "\n" +
1:              "and scoreAnswer"+
1:              "( q.difficulty, q.numberOfChoices, " +
1:              "q.correctChoice, qt.actualChoice )\n" +
1:              "  < weighQuestion( q.difficulty )\n" +
1:              "\n" +
1:              "order by st.lastName, st.firstName\n"
1:              );
1: 
1:         ps.setString( param++, questionName );
1:         ps.setInt( param++, school.getPrimaryKey( database ) );
1: 
1:         ResultSet   rs = ps.executeQuery();
1: 
1:         Database.prettyPrint( conn, rs );
1: 
1:         Utils.close( rs );
1:         Utils.close( ps );
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ////////////////////////////////////////////////////////
1:     
1:     /**
1:      * <p>
1:      * Create a bunch of questions from the template questions.
1:      * </p>
1:      */
1:     private void    initializeQuestions( Database database )
1:         throws SQLException
1:     {
1:         int     count = QUESTIONS.length;
1: 
1:         for ( int i = 0; i < count; i++ )
1:         {
1:             Question    template = QUESTIONS[ i ];
1: 
1:             for ( int j = 0; j < QUESTIONS_PER_TEMPLATE; j++ )
1:             {
1:                 Question    clone = new Question
1:                     (
1:                      template.getQuestionName() + '_' + j,
1:                      template.getDifficulty(),
1:                      template.getNumberOfChoices(),
1:                      template.getCorrectChoice(),
1:                      template.getTest()
1:                      );
1: 
1:                 clone.create( database );
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Populate a table with its objects.
1:      * </p>
1:      */
1:     private void    initialize( Database database, KeyedObject[] objects )
1:         throws SQLException
1:     {
1:         int     count = objects.length;
1: 
1:         for ( int i = 0; i < count; i++ )
1:         { objects[ i ].create( database ); }
1:     }
1: 
1: }
============================================================================