1:85e98cb: /*
1:85e98cb: 
1:85e98cb:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace
1:85e98cb: 
1:85e98cb:    Licensed to the Apache Software Foundation (ASF) under one or more
1:85e98cb:    contributor license agreements.  See the NOTICE file distributed with
1:85e98cb:    this work for additional information regarding copyright ownership.
1:85e98cb:    The ASF licenses this file to you under the Apache License, Version 2.0
1:85e98cb:    (the "License"); you may not use this file except in compliance with
1:85e98cb:    the License.  You may obtain a copy of the License at
1:85e98cb: 
1:85e98cb:      http://www.apache.org/licenses/LICENSE-2.0
1:85e98cb: 
1:85e98cb:    Unless required by applicable law or agreed to in writing, software
1:85e98cb:    distributed under the License is distributed on an "AS IS" BASIS,
1:85e98cb:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:85e98cb:    See the License for the specific language governing permissions and
1:85e98cb:    limitations under the License.
1:85e98cb: 
1:85e98cb:  */
1:85e98cb: 
1:85e98cb: package org.apache.derbyTesting.functionTests.tests.lang;
1:85e98cb: 
1:85e98cb: import java.io.PrintWriter;
1:85e98cb: 
1:85e98cb: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:85e98cb: import org.apache.derby.iapi.util.JBitSet;
1:85e98cb: import org.apache.derby.iapi.sql.compile.AccessPath;
1:85e98cb: import org.apache.derby.iapi.sql.compile.CostEstimate;
1:85e98cb: import org.apache.derby.iapi.sql.compile.JoinStrategy;
1:85e98cb: import org.apache.derby.iapi.sql.compile.OptTrace;
1:85e98cb: import org.apache.derby.iapi.sql.compile.Optimizable;
1:b6cc9d7: import org.apache.derby.iapi.sql.compile.OptimizableList;
1:85e98cb: import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;
1:85e98cb: 
1:85e98cb: /**
1:85e98cb:  * Dummy implementation of OptTrace to test the loading of custom
1:85e98cb:  * trace logic for the Optimizer.
1:85e98cb:  */
1:85e98cb: public  class   DummyOptTrace   implements  OptTrace
1:85e98cb: {
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb:     //
1:85e98cb:     //	CONSTANTS
1:85e98cb:     //
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb: 
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb:     //
1:85e98cb:     //	STATE
1:85e98cb:     //
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb: 
1:85e98cb:     private StringBuffer    _buffer;
1:85e98cb:     private static  String  _fullTrace;
1:85e98cb: 
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb:     //
1:85e98cb:     //	CONSTRUCTOR
1:85e98cb:     //
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb: 
1:85e98cb:     /** 0-arg constructor required by OptTrace contract */
1:85e98cb:     public  DummyOptTrace()
1:85e98cb:     {
1:85e98cb:         _buffer = new StringBuffer();
1:85e98cb:     }
1:85e98cb: 
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb:     //
1:85e98cb:     //	FUNCTION FOR RETRIEVING THE FULL TRACE
1:85e98cb:     //
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb: 
1:85e98cb:     public  static  String  fullTrace()    { return _fullTrace; }
1:85e98cb: 
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb:     //
1:85e98cb:     //	BEHAVIOR
1:85e98cb:     //
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb: 
1:85e98cb:     //
1:85e98cb:     // We only provide implementation for these methods.
1:85e98cb:     //
1:85e98cb:     public  void    traceStartStatement( String statementText ) { _buffer.append( "<text>" + statementText + "</text>" ); }
1:85e98cb:     public  void    printToWriter( PrintWriter out )   { _fullTrace = _buffer.toString(); }
1:85e98cb: 
1:85e98cb:     //
1:85e98cb:     // Don't need to bother implementing the rest of the behavior.
1:85e98cb:     //
1:3c3e7db:     public  void    traceStartQueryBlock( long timeOptimizationStarted, int optimizerID, OptimizableList optimizableList ) {}
1:3c3e7db:     public  void    traceEndQueryBlock() {}
1:85e98cb:     public  void    traceTimeout( long currentTime, CostEstimate bestCost ) {}
1:85e98cb:     public  void    traceVacuous() {}
1:85e98cb:     public  void    traceCompleteJoinOrder() {}
1:85e98cb:     public  void    traceSortCost( CostEstimate sortCost, CostEstimate currentCost ) {}
1:85e98cb:     public  void    traceNoBestPlan() {}
1:85e98cb:     public  void    traceModifyingAccessPaths( int optimizerID ) {}
1:85e98cb:     public  void    traceShortCircuiting( boolean timeExceeded, Optimizable thisOpt, int joinPosition ) {}
1:85e98cb:     public  void    traceSkippingJoinOrder( int nextOptimizable, int joinPosition, int[] proposedJoinOrder, JBitSet assignedTableMap ) {}
1:85e98cb:     public  void    traceIllegalUserJoinOrder() {}
1:85e98cb:     public  void    traceUserJoinOrderOptimized() {}
1:85e98cb:     public  void    traceJoinOrderConsideration( int joinPosition, int[] proposedJoinOrder, JBitSet assignedTableMap ) {}
1:85e98cb:     public  void    traceCostWithoutSortAvoidance( CostEstimate currentCost ) {}
1:85e98cb:     public  void    traceCostWithSortAvoidance( CostEstimate currentSortAvoidanceCost ) {}
1:85e98cb:     public  void    traceCurrentPlanAvoidsSort( CostEstimate bestCost, CostEstimate currentSortAvoidanceCost ) {}
1:85e98cb:     public  void    traceCheapestPlanSoFar( int planType, CostEstimate currentCost ) {}
1:85e98cb:     public  void    traceSortNeededForOrdering( int planType, RequiredRowOrdering requiredRowOrdering ) {}
1:b6cc9d7:     public  void    traceRememberingBestJoinOrder
1:b6cc9d7:         ( int joinPosition, int[] bestJoinOrder, int planType, CostEstimate planCost, JBitSet assignedTableMap ) {}
1:85e98cb:     public  void    traceSkippingBecauseTooMuchMemory( int maxMemoryPerTable ) {}
1:85e98cb:     public  void    traceCostOfNScans( int tableNumber, double rowCount, CostEstimate cost ) {}
1:85e98cb:     public  void    traceSkipUnmaterializableHashJoin() {}
1:85e98cb:     public  void    traceSkipHashJoinNoHashKeys() {}
1:85e98cb:     public  void    traceHashKeyColumns( int[] hashKeyColumns ) {}
1:85e98cb:     public  void    traceOptimizingJoinNode() {}
1:85e98cb:     public  void    traceConsideringJoinStrategy( JoinStrategy js, int tableNumber ) {}
1:85e98cb:     public  void    traceRememberingBestAccessPath( AccessPath accessPath, int tableNumber, int planType ) {}
1:85e98cb:     public  void    traceNoMoreConglomerates( int tableNumber ) {}
1:85e98cb:     public  void    traceConsideringConglomerate( ConglomerateDescriptor cd, int tableNumber ) {}
1:85e98cb:     public  void    traceScanningHeapWithUniqueKey() {}
1:85e98cb:     public  void    traceAddingUnorderedOptimizable( int predicateCount ) {}
1:85e98cb:     public  void    traceChangingAccessPathForTable( int tableNumber ) {}
1:85e98cb:     public  void    traceNoStartStopPosition() {}
1:85e98cb:     public  void    traceNonCoveringIndexCost( double cost, int tableNumber ) {}
1:85e98cb:     public  void    traceConstantStartStopPositions() {}
1:85e98cb:     public  void    traceEstimatingCostOfConglomerate( ConglomerateDescriptor cd, int tableNumber ) {}
1:85e98cb:     public  void    traceLookingForSpecifiedIndex( String indexName, int tableNumber ) {}
1:85e98cb:     public  void    traceSingleMatchedRowCost( double cost, int tableNumber ) {}
1:85e98cb:     public  void    traceCostIncludingExtra1stColumnSelectivity( CostEstimate cost, int tableNumber ) {}
1:85e98cb:     public  void    traceNextAccessPath( String baseTable, int predicateCount ) {}
1:85e98cb:     public  void    traceCostIncludingExtraStartStop( CostEstimate cost, int tableNumber ) {}
1:85e98cb:     public  void    traceCostIncludingExtraQualifierSelectivity( CostEstimate cost, int tableNumber ) {}
1:85e98cb:     public  void    traceCostIncludingExtraNonQualifierSelectivity( CostEstimate cost, int tableNumber ) {}
1:85e98cb:     public  void    traceCostOfNoncoveringIndex( CostEstimate cost, int tableNumber ) {}
1:85e98cb:     public  void    traceRememberingJoinStrategy( JoinStrategy joinStrategy, int tableNumber ) {}
1:85e98cb:     public  void    traceRememberingBestAccessPathSubstring( AccessPath ap, int tableNumber ) {}
1:85e98cb:     public  void    traceRememberingBestSortAvoidanceAccessPathSubstring( AccessPath ap, int tableNumber ) {}
1:85e98cb:     public  void    traceRememberingBestUnknownAccessPathSubstring( AccessPath ap, int tableNumber ) {}
1:85e98cb:     public  void    traceCostOfConglomerateScan
1:85e98cb:         (
1:85e98cb:          int    tableNumber,
1:85e98cb:          ConglomerateDescriptor cd,
1:85e98cb:          CostEstimate   costEstimate,
1:85e98cb:          int    numExtraFirstColumnPreds,
1:85e98cb:          double    extraFirstColumnSelectivity,
1:85e98cb:          int    numExtraStartStopPreds,
1:85e98cb:          double    extraStartStopSelectivity,
1:85e98cb:          int    startStopPredCount,
1:85e98cb:          double    statStartStopSelectivity,
1:85e98cb:          int    numExtraQualifiers,
1:85e98cb:          double    extraQualifierSelectivity,
1:85e98cb:          int    numExtraNonQualifiers,
1:85e98cb:          double    extraNonQualifierSelectivity
1:85e98cb:          )  {}
1:85e98cb:     public  void    traceCostIncludingCompositeSelectivityFromStats( CostEstimate cost, int tableNumber ) {}
1:85e98cb:     public  void    traceCompositeSelectivityFromStatistics( double statCompositeSelectivity ) {}
1:85e98cb:     public  void    traceCostIncludingStatsForIndex( CostEstimate cost, int tableNumber ) {}
1:85e98cb: 
1:85e98cb:     
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb:     //
1:85e98cb:     //	NESTED SUBCLASS WHICH IS MISSING THE 0-ARG CONSTRUCTOR
1:85e98cb:     //
1:85e98cb:     ////////////////////////////////////////////////////////////////////////
1:85e98cb: 
1:85e98cb:     public  static  final   class   BadSubclass extends DummyOptTrace
1:85e98cb:     {
1:85e98cb:         public  BadSubclass( int dummy ) {}
1:85e98cb:     }
1:85e98cb: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:3c3e7db
/////////////////////////////////////////////////////////////////////////
1:     public  void    traceStartQueryBlock( long timeOptimizationStarted, int optimizerID, OptimizableList optimizableList ) {}
1:     public  void    traceEndQueryBlock() {}
commit:b6cc9d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.OptimizableList;
/////////////////////////////////////////////////////////////////////////
0:     public  void    traceStart( long timeOptimizationStarted, int optimizerID, OptimizableList optimizableList ) {}
/////////////////////////////////////////////////////////////////////////
1:     public  void    traceRememberingBestJoinOrder
1:         ( int joinPosition, int[] bestJoinOrder, int planType, CostEstimate planCost, JBitSet assignedTableMap ) {}
commit:85e98cb
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.PrintWriter;
1: 
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.util.JBitSet;
1: import org.apache.derby.iapi.sql.compile.AccessPath;
1: import org.apache.derby.iapi.sql.compile.CostEstimate;
1: import org.apache.derby.iapi.sql.compile.JoinStrategy;
1: import org.apache.derby.iapi.sql.compile.OptTrace;
1: import org.apache.derby.iapi.sql.compile.Optimizable;
1: import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;
1: 
1: /**
1:  * Dummy implementation of OptTrace to test the loading of custom
1:  * trace logic for the Optimizer.
1:  */
1: public  class   DummyOptTrace   implements  OptTrace
1: {
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	STATE
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     private StringBuffer    _buffer;
1:     private static  String  _fullTrace;
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /** 0-arg constructor required by OptTrace contract */
1:     public  DummyOptTrace()
1:     {
1:         _buffer = new StringBuffer();
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	FUNCTION FOR RETRIEVING THE FULL TRACE
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     public  static  String  fullTrace()    { return _fullTrace; }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     //
1:     // We only provide implementation for these methods.
1:     //
1:     public  void    traceStartStatement( String statementText ) { _buffer.append( "<text>" + statementText + "</text>" ); }
1:     public  void    printToWriter( PrintWriter out )   { _fullTrace = _buffer.toString(); }
1: 
1:     //
1:     // Don't need to bother implementing the rest of the behavior.
1:     //
0:     public  void    traceStart( long timeOptimizationStarted, int optimizerID ) {}
1:     public  void    traceTimeout( long currentTime, CostEstimate bestCost ) {}
1:     public  void    traceVacuous() {}
1:     public  void    traceCompleteJoinOrder() {}
1:     public  void    traceSortCost( CostEstimate sortCost, CostEstimate currentCost ) {}
1:     public  void    traceNoBestPlan() {}
1:     public  void    traceModifyingAccessPaths( int optimizerID ) {}
1:     public  void    traceShortCircuiting( boolean timeExceeded, Optimizable thisOpt, int joinPosition ) {}
1:     public  void    traceSkippingJoinOrder( int nextOptimizable, int joinPosition, int[] proposedJoinOrder, JBitSet assignedTableMap ) {}
1:     public  void    traceIllegalUserJoinOrder() {}
1:     public  void    traceUserJoinOrderOptimized() {}
1:     public  void    traceJoinOrderConsideration( int joinPosition, int[] proposedJoinOrder, JBitSet assignedTableMap ) {}
1:     public  void    traceCostWithoutSortAvoidance( CostEstimate currentCost ) {}
1:     public  void    traceCostWithSortAvoidance( CostEstimate currentSortAvoidanceCost ) {}
1:     public  void    traceCurrentPlanAvoidsSort( CostEstimate bestCost, CostEstimate currentSortAvoidanceCost ) {}
1:     public  void    traceCheapestPlanSoFar( int planType, CostEstimate currentCost ) {}
1:     public  void    traceSortNeededForOrdering( int planType, RequiredRowOrdering requiredRowOrdering ) {}
0:     public  void    traceRememberingBestJoinOrder( int joinPosition, int[] bestJoinOrder, JBitSet assignedTableMap ) {}
1:     public  void    traceSkippingBecauseTooMuchMemory( int maxMemoryPerTable ) {}
1:     public  void    traceCostOfNScans( int tableNumber, double rowCount, CostEstimate cost ) {}
1:     public  void    traceSkipUnmaterializableHashJoin() {}
1:     public  void    traceSkipHashJoinNoHashKeys() {}
1:     public  void    traceHashKeyColumns( int[] hashKeyColumns ) {}
1:     public  void    traceOptimizingJoinNode() {}
1:     public  void    traceConsideringJoinStrategy( JoinStrategy js, int tableNumber ) {}
1:     public  void    traceRememberingBestAccessPath( AccessPath accessPath, int tableNumber, int planType ) {}
1:     public  void    traceNoMoreConglomerates( int tableNumber ) {}
1:     public  void    traceConsideringConglomerate( ConglomerateDescriptor cd, int tableNumber ) {}
1:     public  void    traceScanningHeapWithUniqueKey() {}
1:     public  void    traceAddingUnorderedOptimizable( int predicateCount ) {}
1:     public  void    traceChangingAccessPathForTable( int tableNumber ) {}
1:     public  void    traceNoStartStopPosition() {}
1:     public  void    traceNonCoveringIndexCost( double cost, int tableNumber ) {}
1:     public  void    traceConstantStartStopPositions() {}
1:     public  void    traceEstimatingCostOfConglomerate( ConglomerateDescriptor cd, int tableNumber ) {}
1:     public  void    traceLookingForSpecifiedIndex( String indexName, int tableNumber ) {}
1:     public  void    traceSingleMatchedRowCost( double cost, int tableNumber ) {}
1:     public  void    traceCostIncludingExtra1stColumnSelectivity( CostEstimate cost, int tableNumber ) {}
1:     public  void    traceNextAccessPath( String baseTable, int predicateCount ) {}
1:     public  void    traceCostIncludingExtraStartStop( CostEstimate cost, int tableNumber ) {}
1:     public  void    traceCostIncludingExtraQualifierSelectivity( CostEstimate cost, int tableNumber ) {}
1:     public  void    traceCostIncludingExtraNonQualifierSelectivity( CostEstimate cost, int tableNumber ) {}
1:     public  void    traceCostOfNoncoveringIndex( CostEstimate cost, int tableNumber ) {}
1:     public  void    traceRememberingJoinStrategy( JoinStrategy joinStrategy, int tableNumber ) {}
1:     public  void    traceRememberingBestAccessPathSubstring( AccessPath ap, int tableNumber ) {}
1:     public  void    traceRememberingBestSortAvoidanceAccessPathSubstring( AccessPath ap, int tableNumber ) {}
1:     public  void    traceRememberingBestUnknownAccessPathSubstring( AccessPath ap, int tableNumber ) {}
1:     public  void    traceCostOfConglomerateScan
1:         (
1:          int    tableNumber,
1:          ConglomerateDescriptor cd,
1:          CostEstimate   costEstimate,
1:          int    numExtraFirstColumnPreds,
1:          double    extraFirstColumnSelectivity,
1:          int    numExtraStartStopPreds,
1:          double    extraStartStopSelectivity,
1:          int    startStopPredCount,
1:          double    statStartStopSelectivity,
1:          int    numExtraQualifiers,
1:          double    extraQualifierSelectivity,
1:          int    numExtraNonQualifiers,
1:          double    extraNonQualifierSelectivity
1:          )  {}
1:     public  void    traceCostIncludingCompositeSelectivityFromStats( CostEstimate cost, int tableNumber ) {}
1:     public  void    traceCompositeSelectivityFromStatistics( double statCompositeSelectivity ) {}
1:     public  void    traceCostIncludingStatsForIndex( CostEstimate cost, int tableNumber ) {}
1: 
1:     
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	NESTED SUBCLASS WHICH IS MISSING THE 0-ARG CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     public  static  final   class   BadSubclass extends DummyOptTrace
1:     {
1:         public  BadSubclass( int dummy ) {}
1:     }
1: }
============================================================================