1:099e28f: /*
8:099e28f: 
1:099e28f:    Derby - Class org.apache.derby.impl.sql.compile.XMLTypeCompiler
1:099e28f: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:099e28f: 
1:099e28f:       http://www.apache.org/licenses/LICENSE-2.0
1:099e28f: 
1:099e28f:    Unless required by applicable law or agreed to in writing, software
1:099e28f:    distributed under the License is distributed on an "AS IS" BASIS,
1:099e28f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:099e28f:    See the License for the specific language governing permissions and
1:099e28f:    limitations under the License.
1:099e28f: 
2:099e28f:  */
1:099e28f: 
1:099e28f: package org.apache.derby.impl.sql.compile;
1:099e28f: 
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:099e28f: import org.apache.derby.iapi.services.loader.ClassFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:6b50965: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:099e28f: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:099e28f: 
2:099e28f: /**
1:099e28f:  * This class implements TypeCompiler for the XML type.
1:099e28f:  */
1:099e28f: 
1:4469400: public class XMLTypeCompiler extends BaseTypeCompiler
2:099e28f: {
1:099e28f:     /**
1:099e28f:      * Tell whether this type (XML) can be converted to the given type.
3:099e28f:      *
1:099e28f:      * An XML value can't be converted to any other type, per
1:099e28f:      * SQL/XML[2003] 6.3 <cast specification>
1:099e28f:      *
1:099e28f:      * @see TypeCompiler#convertible
1:099e28f:      */
1:099e28f:     public boolean convertible(TypeId otherType, 
1:099e28f:                             boolean forDataTypeFunction)
1:099e28f:     {
1:099e28f:         // An XML value cannot be converted to any non-XML type.  If
1:099e28f:         // user wants to convert an XML value to a string, then
1:099e28f:         // s/he must use the provided SQL/XML serialization operator
1:099e28f:         // (namely, XMLSERIALIZE).
1:099e28f:         return otherType.isXMLTypeId();
2:099e28f:     }
1:099e28f: 
1:099e28f:     /**
1:099e28f:      * Tell whether this type (XML) is compatible with the given type.
1:099e28f:      *
2:099e28f:      * @param otherType The TypeId of the other type.
1:099e28f:      */
1:099e28f:     public boolean compatible(TypeId otherType)
1:099e28f:     {
1:099e28f:         // An XML value is not compatible (i.e. cannot be "coalesced")
1:099e28f:         // into any non-XML type.
1:099e28f:         return otherType.isXMLTypeId();
1:099e28f:     }
1:099e28f: 
1:099e28f:     /**
1:099e28f:      * Tell whether this type (XML) can be stored into from the given type.
1:099e28f:      * Only XML values can be stored into an XML type, per SQL/XML spec:
1:099e28f:      *
2:099e28f:      * 4.2.2 XML comparison and assignment
1:099e28f:      * Values of XML type are assignable to sites of XML type.
1:099e28f:      *
1:099e28f:      * @param otherType The TypeId of the other type.
1:099e28f:      * @param cf A ClassFactory
1:099e28f:      */
1:099e28f:     public boolean storable(TypeId otherType, ClassFactory cf)
1:099e28f:     {
1:099e28f:         // The only type of value that can be stored as XML
1:099e28f:         // is an XML value.  Strings are not allowed.  If
1:099e28f:         // the user wants to store a string value as XML,
1:099e28f:         // s/he must use the provided XML parse operator
1:099e28f:         // (namely, XMLPARSE) to parse the string into
1:099e28f:         // XML.
1:099e28f:         return otherType.isXMLTypeId();
1:099e28f:     }
1:099e28f: 
1:099e28f:     /**
1:099e28f:      * @see TypeCompiler#interfaceName
1:099e28f:      */
1:099e28f:     public String interfaceName() {
1:099e28f:         return ClassName.XMLDataValue;
1:099e28f:     }
1:099e28f: 
1:099e28f:     /**
1:099e28f:      * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:099e28f:      */
1:099e28f:     public String getCorrespondingPrimitiveTypeName()
1:099e28f:     {
2:099e28f:         int formatId = getStoredFormatIdFromTypeId();
2:099e28f:         if (formatId == StoredFormatIds.XML_TYPE_ID)
1:099e28f:             return "org.apache.derby.iapi.types.XML";
1:099e28f: 
1:099e28f:         if (SanityManager.DEBUG) {
2:099e28f:             SanityManager.THROWASSERT(
1:099e28f:                 "unexpected formatId in getCorrespondingPrimitiveTypeName(): "
1:099e28f:                 + formatId);
1:099e28f:         }
1:099e28f: 
2:099e28f:         return null;
1:099e28f:     }
1:099e28f: 
1:099e28f:     /**
1:099e28f:      * @see TypeCompiler#getCastToCharWidth
1:099e28f:      *
1:099e28f:      * While it is true XML values can't be cast to char, this method
1:099e28f:      * can get called before we finish type checking--so we return a dummy
1:099e28f:      * value here and let the type check throw the appropriate error.
1:099e28f:      */
1:099e28f:     public int getCastToCharWidth(DataTypeDescriptor dts)
1:099e28f:     {
1:099e28f:         return -1;
1:099e28f:     }
1:099e28f: 
1:099e28f:     /**
1:6b50965:      * @see BaseTypeCompiler#nullMethodName
1:099e28f:      */
1:44fad02:     String nullMethodName()
1:099e28f:     {
1:099e28f:         if (SanityManager.DEBUG) {
1:44fad02:             if (getStoredFormatIdFromTypeId() != StoredFormatIds.XML_TYPE_ID)
1:44fad02:                 SanityManager.THROWASSERT(
1:44fad02:                 "unexpected formatId in nullMethodName(): " + 
1:44fad02:                      getStoredFormatIdFromTypeId());
1:099e28f:         }
1:44fad02:         
1:44fad02:         return "getNullXML";
1:099e28f:     }
1:099e28f: 
1:099e28f:     /**
1:6b50965:      * @see BaseTypeCompiler#dataValueMethodName
1:099e28f:      */
1:3bb140c:     @Override
1:099e28f:     protected String dataValueMethodName()
1:099e28f:     {
1:099e28f:         int formatId = getStoredFormatIdFromTypeId();
1:099e28f:         if (formatId == StoredFormatIds.XML_TYPE_ID)
1:099e28f:             return "getXMLDataValue";
1:099e28f: 
1:099e28f:         if (SanityManager.DEBUG) {
1:099e28f:             SanityManager.THROWASSERT(
1:099e28f:                 "unexpected formatId in dataValueMethodName() - " + formatId);
1:099e28f:         }
1:099e28f: 
1:099e28f:         return null;
1:099e28f:     }
1:099e28f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: public class XMLTypeCompiler extends BaseTypeCompiler
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.types.TypeId;
0: class XMLTypeCompiler extends BaseTypeCompiler
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:44fad02
/////////////////////////////////////////////////////////////////////////
1:     String nullMethodName()
1:             if (getStoredFormatIdFromTypeId() != StoredFormatIds.XML_TYPE_ID)
1:                 SanityManager.THROWASSERT(
1:                 "unexpected formatId in nullMethodName(): " + 
1:                      getStoredFormatIdFromTypeId());
1:         
1:         return "getNullXML";
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:2bb198a
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
/////////////////////////////////////////////////////////////////////////
1:      * @see BaseTypeCompiler#nullMethodName
/////////////////////////////////////////////////////////////////////////
1:      * @see BaseTypeCompiler#dataValueMethodName
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:099e28f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.XMLTypeCompiler
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.TypeId;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.reference.ClassName;
1: 
1: /**
1:  * This class implements TypeCompiler for the XML type.
1:  */
1: 
0: public class XMLTypeCompiler extends BaseTypeCompiler
1: {
1:     /**
0:      * Tell whether this type (XML) can be compared to the given type.
0:      * Says SQL/XML[2003] spec:
1:      *
1:      * 4.2.2 XML comparison and assignment
0:      * "XML values are not comparable."
1:      *
1:      * @param otherType The TypeId of the other type.
1:      */
0:     public boolean comparable(TypeId otherType,
0:                             boolean forEquals,
0:                             ClassFactory cs)
1:     {
0:         // An XML value cannot be compared to any type--
0:         // not even to other XML values.
0:         return false;
1:     }
1: 
1:     /**
1:      * Tell whether this type (XML) can be converted to the given type.
1:      *
1:      * An XML value can't be converted to any other type, per
1:      * SQL/XML[2003] 6.3 <cast specification>
1:      *
1:      * @see TypeCompiler#convertible
1:      */
1:     public boolean convertible(TypeId otherType, 
1:                             boolean forDataTypeFunction)
1:     {
1:         // An XML value cannot be converted to any non-XML type.  If
1:         // user wants to convert an XML value to a string, then
1:         // s/he must use the provided SQL/XML serialization operator
1:         // (namely, XMLSERIALIZE).
1:         return otherType.isXMLTypeId();
1:     }
1: 
1:     /**
1:      * Tell whether this type (XML) is compatible with the given type.
1:      *
1:      * @param otherType The TypeId of the other type.
1:      */
1:     public boolean compatible(TypeId otherType)
1:     {
1:         // An XML value is not compatible (i.e. cannot be "coalesced")
1:         // into any non-XML type.
1:         return otherType.isXMLTypeId();
1:     }
1: 
1:     /**
1:      * Tell whether this type (XML) can be stored into from the given type.
1:      * Only XML values can be stored into an XML type, per SQL/XML spec:
1:      *
1:      * 4.2.2 XML comparison and assignment
1:      * Values of XML type are assignable to sites of XML type.
1:      *
1:      * @param otherType The TypeId of the other type.
1:      * @param cf A ClassFactory
1:      */
1:     public boolean storable(TypeId otherType, ClassFactory cf)
1:     {
1:         // The only type of value that can be stored as XML
1:         // is an XML value.  Strings are not allowed.  If
1:         // the user wants to store a string value as XML,
1:         // s/he must use the provided XML parse operator
1:         // (namely, XMLPARSE) to parse the string into
1:         // XML.
1:         return otherType.isXMLTypeId();
1:     }
1: 
1:     /**
1:      * @see TypeCompiler#interfaceName
1:      */
1:     public String interfaceName() {
1:         return ClassName.XMLDataValue;
1:     }
1: 
1:     /**
1:      * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:      */
1:     public String getCorrespondingPrimitiveTypeName()
1:     {
1:         int formatId = getStoredFormatIdFromTypeId();
1:         if (formatId == StoredFormatIds.XML_TYPE_ID)
1:             return "org.apache.derby.iapi.types.XML";
1: 
1:         if (SanityManager.DEBUG) {
1:             SanityManager.THROWASSERT(
1:                 "unexpected formatId in getCorrespondingPrimitiveTypeName(): "
1:                 + formatId);
1:         }
1: 
1:         return null;
1:     }
1: 
1:     /**
1:      * @see TypeCompiler#getCastToCharWidth
1:      *
1:      * While it is true XML values can't be cast to char, this method
1:      * can get called before we finish type checking--so we return a dummy
1:      * value here and let the type check throw the appropriate error.
1:      */
1:     public int getCastToCharWidth(DataTypeDescriptor dts)
1:     {
1:         return -1;
1:     }
1: 
1:     /**
0:      * @see TypeCompiler#nullMethodName
1:      */
0:     protected String nullMethodName()
1:     {
1:         int formatId = getStoredFormatIdFromTypeId();
1:         if (formatId == StoredFormatIds.XML_TYPE_ID)
0:             return "getNullXML";
1: 
1:         if (SanityManager.DEBUG) {
1:             SanityManager.THROWASSERT(
0:                 "unexpected formatId in nullMethodName(): " + formatId);
1:         }
1: 
1:         return null;
1:     }
1: 
1:     /**
0:      * @see TypeCompiler#dataValueMethodName
1:      */
1:     protected String dataValueMethodName()
1:     {
1:         int formatId = getStoredFormatIdFromTypeId();
1:         if (formatId == StoredFormatIds.XML_TYPE_ID)
1:             return "getXMLDataValue";
1: 
1:         if (SanityManager.DEBUG) {
1:             SanityManager.THROWASSERT(
1:                 "unexpected formatId in dataValueMethodName() - " + formatId);
1:         }
1: 
1:         return null;
1:     }
1: }
============================================================================