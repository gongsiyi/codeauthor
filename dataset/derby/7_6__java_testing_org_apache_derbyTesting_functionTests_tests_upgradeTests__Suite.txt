1:10e07a5: /*
1:e3f8545: 
1:10e07a5: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests._Suite
1:daa4827: 
1:10e07a5: Licensed to the Apache Software Foundation (ASF) under one or more
1:10e07a5: contributor license agreements.  See the NOTICE file distributed with
1:10e07a5: this work for additional information regarding copyright ownership.
1:10e07a5: The ASF licenses this file to You under the Apache License, Version 2.0
1:10e07a5: (the "License"); you may not use this file except in compliance with
1:10e07a5: the License.  You may obtain a copy of the License at
1:daa4827: 
1:10e07a5:    http://www.apache.org/licenses/LICENSE-2.0
3:cdda215: 
1:10e07a5: Unless required by applicable law or agreed to in writing, software
1:10e07a5: distributed under the License is distributed on an "AS IS" BASIS,
1:10e07a5: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10e07a5: See the License for the specific language governing permissions and
1:10e07a5: limitations under the License.
1:cdda215: 
1:daa4827: */
1:10e07a5: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1:2133a29: 
1:2133a29: import java.util.Arrays;
1:10e07a5: import junit.framework.Test;
1:10e07a5: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:daa4827: 
1:10e07a5: /**
1:10e07a5:  * Run the full upgrade suite. This is the only
1:10e07a5:  * way to run tests in this package.
1:cdda215:  * A set of tests are run against a number of
1:cdda215:  * previous releases, see the static OLD_VERSIONS
1:cdda215:  * field in this class.
1:cdda215:  * 
1:cdda215:  * Each test against the old release consists of following phases:
1:daa4827:    
1:cdda215:     <OL>
1:cdda215:     <LI> Create database with the <B>old</B> release.
1:cdda215:     <LI> Boot the database with the <B>new</B> release in soft upgrade mode.
1:cdda215:     Try to execute functionality that is not allowed in soft upgrade.
1:cdda215:     <LI> Boot the database with the <B>old</B> release to ensure the
1:cdda215:     database can be booted by the old release after soft upgrade.
1:cdda215:     <LI> Boot the database with the <B>new</B> release in hard upgrade mode,
1:cdda215:     specifying the upgrade=true attribute.
1:cdda215:     <LI> Boot the database with the <B>old</B> release to ensure the
1:cdda215:     database can not be booted by the old release after hard upgrade.
1:cdda215:     </OL>
1:cdda215:     The class PhaseChanger is the decorator that sets up the
1:cdda215:     fixtures to run in a given phase.
1:daa4827: 
1:cdda215:     <P>
1:cdda215:     The test fixtures themseleves are in JUnit test classes
1:cdda215:     that are sub-classes of UpgradeChange. The set of fixtures
1:cdda215:     in BasicSetup is general setup and the changes per release
1:cdda215:     are in classes of the form Changes10_1 etc.
1:daa4827:     
1:cdda215:     <P>
1:cdda215:     The class UpgradeRun hooks up the test fixtures for a set
1:cdda215:     of runs against a single old release into a single suite.
1:cdda215:     Each fixture is run multiple times, once per phase against
1:cdda215:     each old release.
1:daa4827:     
1:cdda215:     @see UpgradeRun
1:cdda215:     @see UpgradeChange
2:10e07a5:  */
1:10e07a5: public class _Suite extends BaseTestCase {
1:daa4827:     
1:cdda215:     /**
1:daa4827:      * Property that gives the location of a file listing old versions 
1:daa4827:      * to be tested.
1:daa4827:      * To be able to override default values hard-coded for OLD_VERSIONS.
1:daa4827:      */
1:daa4827:      static final String OLD_VERSIONS_PATH_PROPERTY =
1:daa4827:          "derbyTesting.oldVersionsPath";
1:daa4827:     /**
1:2a42e33:      * Property that indicates the location of the
1:2a42e33:      * old releases.
1:2a42e33:      */
1:2a42e33:     static final String OLD_RELEASE_PATH_PROPERTY =
1:2a42e33:         "derbyTesting.oldReleasePath";
1:daa4827:     
1:2a42e33:     /**
1:b4fdbf8:      * The saved location in svn at apache for older releases for testing
1:b4fdbf8:      */
1:9a6e26b:     static final String OLD_JAR_URL =
1:3f3db19:         "http://svn.apache.org/repos/asf/db/derby/jars";
1:b4fdbf8:     
1:b4fdbf8:     /**
1:cdda215:      * List of the versions to test against.
1:cdda215:      * The tests look for the jar files in each releasae
1:cdda215:      * in the folder:
1:b4fdbf8:      * ${derbyTesting.oldReleasePath}/M.m.f.p
1:cdda215:      * 
1:b4fdbf8:      * If derbyTesting.oldReleasePath is not set then it is assumed the files can
1:b4fdbf8:      * be accessed from the svn repository at apache. If this location is
1:b4fdbf8:      * not available, then the test will fail.
1:cdda215:      * 
1:b4fdbf8:      * If the property is set, but ${derbyTesting.oldReleasePath}/M.m.f.p does not exist
1:b4fdbf8:      * for a specific release then those sets of tests will be skipped.
1:9a6e26b:      * 
1:9a6e26b:      * One can also set derbyTesting.oldReleasePath to a checked out
1:9a6e26b:      * version of the jars from the Apache svn repo. E.g.
1:9a6e26b:      * 
1:9a6e26b:      * cd $HOME
1:9a6e26b:      * mkdir derby_upgrade
1:9a6e26b:      * cd derby_upgrade
1:9a6e26b:      * svn co https://svn.apache.org/repos/asf/db/derby/jars
1:9a6e26b:      * 
1:9a6e26b:      * Then set derbyTesting.oldReleasePath as:
1:9a6e26b:      *   -DderbyTesting.oldReleasePath=$HOME/derby_upgrade/jars
1:9a6e26b:      * when running tests.
1:cdda215:      */
1:daa4827: 
1:e65365e:     private static int[][] old;
1:2a42e33: 
1:10e07a5:     /**
1:10e07a5:      * Use suite method instead.
1:10e07a5:      */
1:10e07a5:     private _Suite(String name) {
1:10e07a5:         super(name);
21:daa4827:     }
1:daa4827:     
1:10e07a5:     public static Test suite() {
1:daa4827:         String id = "Upgrade Suite: "
1:daa4827:                 + OLD_RELEASE_PATH_PROPERTY + "=" + UpgradeRun.jarPath
1:daa4827:                 + " / " + OLD_VERSIONS_PATH_PROPERTY + "=" + UpgradeRun.oldVersionsPath;
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(id);
1:daa4827: 
1:e65365e:         old = OldVersions.getSupportedVersions();
1:e65365e:         
1:e65365e:         for (int i = 0; i < old.length; i++) {
1:478d624: 
1:478d624:             // DERBY-6288: One of the class files in 10.0.2.1 is not
1:478d624:             // well-formed and causes some noise when running with JaCoCo.
1:478d624:             if (runsWithJaCoCo() &&
1:478d624:                     Arrays.equals(old[i], new int[]{10, 0, 2, 1})) {
1:478d624:                 println("Skipped version 10.0.2.1 with JaCoCo");
1:478d624:                 continue;
1:478d624:             }
1:478d624: 
1:000d4bc:             // DERBY-4913. Test upgrade and create together for 10.3.3.0 since
1:000d4bc:             // that combination seems to trigger a different code path.
1:2133a29:             if (Arrays.equals(old[i],OldVersions.VERSION_10_3_3_0))
1:000d4bc:                 suite.addTest(UpgradeRun.suite(old[i], true));
1:000d4bc:             else
1:000d4bc:                 suite.addTest(UpgradeRun.suite(old[i], false));
1:daa4827:         }
1:000d4bc: 
1:daa4827:         
1:10e07a5:         return suite;
1:daa4827:     }
1:daa4827:     
1:daa4827: 
1:daa4827: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(id);
commit:15b2b98
/////////////////////////////////////////////////////////////////////////
0:         {10, 3, 3, 0}, // 10.3.3.0 (May 12, 2008 / SVN 652961)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:478d624
/////////////////////////////////////////////////////////////////////////
1: 
1:             // DERBY-6288: One of the class files in 10.0.2.1 is not
1:             // well-formed and causes some noise when running with JaCoCo.
1:             if (runsWithJaCoCo() &&
1:                     Arrays.equals(old[i], new int[]{10, 0, 2, 1})) {
1:                 println("Skipped version 10.0.2.1 with JaCoCo");
1:                 continue;
1:             }
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:2133a29
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: 
/////////////////////////////////////////////////////////////////////////
1:             if (Arrays.equals(old[i],OldVersions.VERSION_10_3_3_0))
commit:000d4bc
/////////////////////////////////////////////////////////////////////////
1:             // DERBY-4913. Test upgrade and create together for 10.3.3.0 since
1:             // that combination seems to trigger a different code path.
0:             if (i == OldVersions.VERSION_10_3_3_0_OFFSET)
1:                 suite.addTest(UpgradeRun.suite(old[i], true));
1:             else
1:                 suite.addTest(UpgradeRun.suite(old[i], false));
1:         
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e65365e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static int[][] old;
/////////////////////////////////////////////////////////////////////////
1:         old = OldVersions.getSupportedVersions();
1:         
1:         for (int i = 0; i < old.length; i++) {
0:             suite.addTest(UpgradeRun.suite(old[i]));
commit:daa4827
/////////////////////////////////////////////////////////////////////////
0: import java.io.BufferedReader;
0: import java.io.FileReader;
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:      * Property that gives the location of a file listing old versions 
1:      * to be tested.
1:      * To be able to override default values hard-coded for OLD_VERSIONS.
1:      */
1:      static final String OLD_VERSIONS_PATH_PROPERTY =
1:          "derbyTesting.oldVersionsPath";
1:     /**
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static OldVersions old;
/////////////////////////////////////////////////////////////////////////
1:         String id = "Upgrade Suite: "
1:                 + OLD_RELEASE_PATH_PROPERTY + "=" + UpgradeRun.jarPath
1:                 + " / " + OLD_VERSIONS_PATH_PROPERTY + "=" + UpgradeRun.oldVersionsPath;
0:         TestSuite suite = new TestSuite(id);       
0:         if ( UpgradeRun.oldVersionsPath != null )
0:         {
0:             old = new OldVersions(UpgradeRun.oldVersionsPath);
1:         }
0:         OldVersions.show();
0:         for (int i = 0; i < old.VERSIONS.length; i++) {
0:                 (old.VERSIONS[i][0]==10) && (old.VERSIONS[i][1]==0))) {
0:                 traceit("Skipping 10.0 on JSR169");
0:                   && old.VERSIONS[i][0]==10 && old.VERSIONS[i][1]==3 
0:                   && old.VERSIONS[i][2]==1 && old.VERSIONS[i][3]==4 ) {
0:                 traceit("Skipping 10.3.1.4 on CVM/phoneme");
0:             suite.addTest(UpgradeRun.suite(old.VERSIONS[i]));
0:     private static class OldVersions{
1: 
0:         private static int[][] VERSIONS =
0:           {
0:             {10, 0, 2, 1}, // 10.0.2.1 (incubator release)
0:             {10, 1, 1, 0}, // 10.1.1.0 (Aug 3, 2005 / SVN 208786)
0:             {10, 1, 2, 1}, // 10.1.2.1 (Nov 18, 2005 / SVN 330608)
0:             {10, 1, 3, 1}, // 10.1.3.1 (Jun 30, 2006 / SVN 417277)
0:             {10, 2, 1, 6}, // 10.2.1.6 (Oct 02, 2006 / SVN 452058)
0:             {10, 2, 2, 0}, // 10.2.2.0 (Dec 12, 2006 / SVN 485682)
0:             {10, 3, 1, 4}, // 10.3.1.4 (Aug 1, 2007 / SVN 561794)
0:             {10, 3, 3, 0}, // 10.3.3.0 (May 12, 2008 / SVN 652961)
0:             {10, 4, 1, 3}, // 10.4.1.3 (April 24, 2008 / SVN 648739)
0:             {10, 4, 2, 0}, // 10.4.2.0 (September 05, 2008 / SVN 693552)
0:           };
0:         private OldVersions(String oldVersionsPath)
0:         {
0:             BufferedReader br = null;
0:             try{
0:                 FileReader fr = new FileReader(oldVersionsPath);
0:                 br = new BufferedReader(fr);
1:             }
0:             catch (java.io.FileNotFoundException fNFE)
0:             {
0:                 alarm("File '" + oldVersionsPath 
0:                         + "' was not found, using default old versions for upgrade tests.");
0:                 return;
1:             }
0:             traceit("Run upgrade tests on versions defined in '" + oldVersionsPath + "'");
0:             getVersions(br, oldVersionsPath);
1:         }
1: 
0:         private void getVersions(BufferedReader br, String oldVersionsPath) 
0:         {
0:             VERSIONS = new int[256][4];
1: 
0:             int versions = 0;
1: 
0:             String line = null;
0:             int lineNum = 0;
0:             try {
0:                 while ((line = br.readLine()) != null) {
0:                     lineNum++;
0:                     /* Ignore lines not matching the regexp: "^[\\d]+\\.[\\d]+\\.[\\d]+\\.[\\d]"
0:                      * NB. java.util.regex.Matcher and java.util.regex.Pattern can not be
0:                      * used on small devices(JSR219).
1:                      */
0:                     try {
0:                         String[] parts = split4(line,'.');
0:                         // String[] parts = line.split("\\."); // JSR219 does NOT have String.split()!
0:                         if (parts.length >= 3) {
1: 
0:                             int[] vstr = new int[4];
0:                             for (int i = 0; i < 4; i++) // Using first 4 values
0:                             {
0:                                 String str = parts[i];
0:                                 if (i == 3) { // Clean... remove trailing non-digits
0:                                     str = clean(str,"0123456789");
1:                                 }
0:                                 vstr[i] = Integer.parseInt(str);
1:                             }
0:                             VERSIONS[versions++] = vstr;
0:                         } else {
0:                             alarm("Illegal version format on: " + line);
1:                         }
0:                     } catch (NumberFormatException nfe) {
0:                         alarm("NumberFormatException on line " + lineNum + ": " + line + ": " + " " + nfe.getMessage());
0:                     } catch (ArrayIndexOutOfBoundsException aie) {
0:                         alarm("ArrayIndexOutOfBoundsException on line " + lineNum + ": " + line + ": " + " " + aie.getMessage());
1:                     }
1:                 }
0:             } catch (IOException ioe) {
0:                 alarm("Error reading from file: " + oldVersionsPath + ioe.getMessage());
1:             }
1:             
0:             int[][] finalVERSIONS = new int[versions][4];
0:             for (int v = 0; v < versions; v++) {
0:                 finalVERSIONS[v] = VERSIONS[v];
1:             }
0:             VERSIONS = finalVERSIONS;
1: 
1:         }
1: 
0:         private static void show() {
0:             traceit("Upgrade test versions listed:");
0:             for (int o = 0; o < VERSIONS.length; o++) {
0:                 String ver = "";
0:                 for (int i = 0; i < VERSIONS[o].length; i++) {
0:                     if (i == 0) {
0:                         ver = "" + VERSIONS[o][i];
0:                     } else {
0:                         ver = ver + "." + VERSIONS[o][i];
1:                     }
1:                 }
0:                 traceit(ver);
1:             }
1:         }
0:         private static String[] split4(String l, char c)
0:         {
0:             String[] res = new String[4];
0:             try{
0:             int p0 = l.indexOf(c);
0:             if (p0<0) return res;
1:             
0:             res[0] = l.substring(0, p0);
0:             int p1 = l.indexOf(c,p0+1);
0:             if (p1<0) return res;
1:             
0:             res[1] = l.substring(p0+1, p1);
0:             int p2 = l.indexOf(c,p1+1); 
0:             if (p2<0) return res;
1:             
0:             res[2] = l.substring(p1+1, p2);
0:             int p3 = l.indexOf(c,p2+1); 
0:             if (p3<0) p3=l.length();
1:             
0:             res[3] = l.substring(p2+1, p3);
1:             
0:             } catch(StringIndexOutOfBoundsException sie){
0:                 println("split4 StringIndexOutOfBoundsException: "+sie.getMessage());
0:                 sie.printStackTrace();
1:             }
0:             return res;
1:         }
0:         private static String clean(String l, String allowed)
0:         {
0:             for (int i=0;i<l.length();i++)
0:             {
0:                 if (!matches(l.charAt(i),allowed))
0:                 {
0:                     return l.substring(0,i);
1:                 }
1:             }
0:             return l;
1:         }
0:         private static boolean matches(char c, String allowed)
0:         {
0:             for (int j=0;j<allowed.length();j++)
0:             {
0:                 if (allowed.charAt(j) == c) return true;
1:             }
0:             return false;
1:         }
1:         
1:     }
commit:449e5bc
/////////////////////////////////////////////////////////////////////////
0:         {10, 4, 2, 0}, // 10.4.2.0 (September 05, 2008 / SVN 693552)
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:963d9f4
/////////////////////////////////////////////////////////////////////////
0:         {10, 4, 1, 3}, // 10.4.1.3 (April 24, 2008 / SVN 648739)
commit:ea5ca3f
/////////////////////////////////////////////////////////////////////////
0:         {10, 3, 1, 4}, // 10.3.1.4 (Aug 1, 2007 / SVN 561794)
commit:29e9328
/////////////////////////////////////////////////////////////////////////
0:         {10, 3, 1, 4}, // 10.3.1.4 (Aug 30, 2007 / SVN 571336)
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:8a319fb
/////////////////////////////////////////////////////////////////////////
0: import java.util.Enumeration;
0: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
0:             if ((JDBC.vmSupportsJSR169() && 
0:                 (OLD_VERSIONS[i][0]==10) && (OLD_VERSIONS[i][1]==0))) {
0:                 continue;
0:             }
0:             // Derby 10.3.1.4 does not boot on the phoneME advanced platform,
0:             // (see DERBY-3176) so don't run upgrade tests in this combination.
0:             if ( System.getProperty("java.vm.name").equals("CVM")
0:                   && System.getProperty("java.vm.version").startsWith("phoneme")
0:                   && OLD_VERSIONS[i][0]==10 && OLD_VERSIONS[i][1]==3 
0:                   && OLD_VERSIONS[i][2]==1 && OLD_VERSIONS[i][3]==4 ) {
0:                 continue;
0:             }
0:             suite.addTest(UpgradeRun.suite(OLD_VERSIONS[i]));
commit:3f3db19
/////////////////////////////////////////////////////////////////////////
1:         "http://svn.apache.org/repos/asf/db/derby/jars";
commit:a762300
/////////////////////////////////////////////////////////////////////////
0:                 (OLD_VERSIONS[i][0]==10) && (OLD_VERSIONS[i][1]==0)))
0:                 suite.addTest(UpgradeRun.suite(OLD_VERSIONS[i]));
commit:75476a0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
0:             // JSR169 support was only added with 10.1, so don't
0:             // run 10.0 to later upgrade if that's what our jvm is supporting.
0:             if (!(JDBC.vmSupportsJSR169() && 
0:                 (OLD_VERSIONS[i][0]==10) && (OLD_VERSIONS[i][1]==0))); 
commit:b4fdbf8
/////////////////////////////////////////////////////////////////////////
1:      * The saved location in svn at apache for older releases for testing
1:      */
0:     public static final String OLD_JAR_URL =
0:         "https://svn.apache.org/repos/asf/db/derby/jars";
1:     
1:     /**
1:      * ${derbyTesting.oldReleasePath}/M.m.f.p
1:      * If derbyTesting.oldReleasePath is not set then it is assumed the files can
1:      * be accessed from the svn repository at apache. If this location is
1:      * not available, then the test will fail.
1:      * If the property is set, but ${derbyTesting.oldReleasePath}/M.m.f.p does not exist
1:      * for a specific release then those sets of tests will be skipped.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e3f8545
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = new TestSuite("Upgrade Suite: "
0:                 + OLD_RELEASE_PATH_PROPERTY + "=" + UpgradeRun.jarPath);       
/////////////////////////////////////////////////////////////////////////
1: 
commit:9a6e26b
/////////////////////////////////////////////////////////////////////////
1:     static final String OLD_JAR_URL =
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      * One can also set derbyTesting.oldReleasePath to a checked out
1:      * version of the jars from the Apache svn repo. E.g.
1:      * 
1:      * cd $HOME
1:      * mkdir derby_upgrade
1:      * cd derby_upgrade
1:      * svn co https://svn.apache.org/repos/asf/db/derby/jars
1:      * 
1:      * Then set derbyTesting.oldReleasePath as:
1:      *   -DderbyTesting.oldReleasePath=$HOME/derby_upgrade/jars
1:      * when running tests.
commit:2a42e33
/////////////////////////////////////////////////////////////////////////
1:      * Property that indicates the location of the
1:      * old releases.
1:      */
1:     static final String OLD_RELEASE_PATH_PROPERTY =
1:         "derbyTesting.oldReleasePath";
1:     
1:     /**
/////////////////////////////////////////////////////////////////////////
0:         if (getSystemProperty(OLD_RELEASE_PATH_PROPERTY) == null)
0:                     "empty: no upgrade tests: " +
0:                     OLD_RELEASE_PATH_PROPERTY + " not set");
commit:cdda215
/////////////////////////////////////////////////////////////////////////
1:  * A set of tests are run against a number of
1:  * previous releases, see the static OLD_VERSIONS
1:  * field in this class.
1:  * 
1:  * Each test against the old release consists of following phases:
1:    
1:     <OL>
1:     <LI> Create database with the <B>old</B> release.
1:     <LI> Boot the database with the <B>new</B> release in soft upgrade mode.
1:     Try to execute functionality that is not allowed in soft upgrade.
1:     <LI> Boot the database with the <B>old</B> release to ensure the
1:     database can be booted by the old release after soft upgrade.
1:     <LI> Boot the database with the <B>new</B> release in hard upgrade mode,
1:     specifying the upgrade=true attribute.
1:     <LI> Boot the database with the <B>old</B> release to ensure the
1:     database can not be booted by the old release after hard upgrade.
1:     </OL>
1:     The class PhaseChanger is the decorator that sets up the
1:     fixtures to run in a given phase.
1: 
1:     <P>
1:     The test fixtures themseleves are in JUnit test classes
1:     that are sub-classes of UpgradeChange. The set of fixtures
1:     in BasicSetup is general setup and the changes per release
1:     are in classes of the form Changes10_1 etc.
1:     
1:     <P>
1:     The class UpgradeRun hooks up the test fixtures for a set
1:     of runs against a single old release into a single suite.
1:     Each fixture is run multiple times, once per phase against
1:     each old release.
1:     
1:     @see UpgradeRun
1:     @see UpgradeChange
1:     /**
1:      * List of the versions to test against.
1:      * The tests look for the jar files in each releasae
1:      * in the folder:
0:      * ${derbyTesting.jar.path}/M.m.f.p/lib
1:      * 
0:      * If derbyTesting.jar.path is not set then no tests will be run.
1:      * 
0:      * If ${derbyTesting.jar.path}/M.m.f.p/lib does not exist
0:      * for a specific release then those sets of tests will
0:      * be skipped.
1:      */
0:         {10, 0, 2, 1}, // 10.0.2.1 (incubator release)
0:         {10, 2, 1, 6}, // 10.2.1.6 (Oct 02, 2006 / SVN 452058)
0:         {10, 2, 2, 0}, // 10.2.2.0 (Dec 12, 2006 / SVN 485682)
/////////////////////////////////////////////////////////////////////////
0:         if (getSystemProperty("derbyTesting.jar.path") == null)
0:             return new TestSuite(
0:                     "empty: no upgrade tests: derbyTesting.jar.path not set");
0:         
commit:10e07a5
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests._Suite
0: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
0: 
1:    http://www.apache.org/licenses/LICENSE-2.0
0: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
0: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
0: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: 
1: import org.apache.derbyTesting.junit.BaseTestCase;
0: 
1: /**
1:  * Run the full upgrade suite. This is the only
1:  * way to run tests in this package.
0:  *
1:  */
1: public class _Suite extends BaseTestCase {
0:     
0:     private static final int[][] OLD_VERSIONS =
0:     {
0:         // {10, 0, 2, 1}, // 10.0.2.1 (incubator release)
0:         {10, 1, 1, 0}, // 10.1.1.0 (Aug 3, 2005 / SVN 208786)
0:         {10, 1, 2, 1}, // 10.1.2.1 (Nov 18, 2005 / SVN 330608)
0:         {10, 1, 3, 1}, // 10.1.3.1 (Jun 30, 2006 / SVN 417277)
0:         // {10, 2, 1, 6}, // 10.2.1.6 (Oct 02, 2006 / SVN 452058)
0:         // {10, 2, 1, 6}, // 10.2.2.0 (Dec 12, 2006 / SVN 485682)
0:     };
0: 
0: 
1:     /**
1:      * Use suite method instead.
1:      */
1:     private _Suite(String name) {
1:         super(name);
0:     }
0:     
1:     public static Test suite() {
0:         
0:         TestSuite suite = new TestSuite("Upgrade Suite");       
0: 
0:         for (int i = 0; i < OLD_VERSIONS.length; i++) {
0:             suite.addTest(UpgradeRun.suite(OLD_VERSIONS[i]));
0:         }
0:         
1:         return suite;
0:     }
0:     
0: 
0: }
============================================================================