1:f41a8a7: /*
1:f41a8a7:  
1:f41a8a7: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_showStateChange
1:f41a8a7:  
1:f41a8a7: Licensed to the Apache Software Foundation (ASF) under one or more
1:f41a8a7: contributor license agreements.  See the NOTICE file distributed with
1:f41a8a7: this work for additional information regarding copyright ownership.
1:f41a8a7: The ASF licenses this file to You under the Apache License, Version 2.0
1:f41a8a7: (the "License"); you may not use this file except in compliance with
1:f41a8a7: the License.  You may obtain a copy of the License at
1:f41a8a7:  
1:f41a8a7:    http://www.apache.org/licenses/LICENSE-2.0
1:f41a8a7:  
1:f41a8a7: Unless required by applicable law or agreed to in writing, software
1:f41a8a7: distributed under the License is distributed on an "AS IS" BASIS,
1:f41a8a7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f41a8a7: See the License for the specific language governing permissions and
1:f41a8a7: limitations under the License.
1:f41a8a7:  
1:f41a8a7:  */
1:f41a8a7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:f41a8a7: 
1:f41a8a7: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:f41a8a7: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:f41a8a7: 
1:f41a8a7: 
1:f41a8a7: /**
1:f41a8a7:  * Run a replication test on localhost
1:f41a8a7:  * by using default values for master and slave hosts,
1:f41a8a7:  * and master and slave ports.
1:f41a8a7:  * This test is intended to be run separatly showing 
1:f41a8a7:  * state change during a "normal" replication session.
1:f41a8a7:  */
1:f41a8a7: 
1:f41a8a7: public class ReplicationRun_Local_showStateChange extends ReplicationRun
1:f41a8a7: {
1:f41a8a7:     
1:f41a8a7:     /**
1:f41a8a7:      * Creates a new instance of ReplicationRun_Local
1:f41a8a7:      * @param testcaseName Identifying the test.
1:f41a8a7:      */
1:f41a8a7:     public ReplicationRun_Local_showStateChange(String testcaseName)
1:f41a8a7:     {
1:f41a8a7:         super(testcaseName);
1:f41a8a7:     }
1:f41a8a7:     
1:f41a8a7:     protected void setUp() throws Exception
1:f41a8a7:     {
1:f41a8a7:         super.setUp();
1:f41a8a7:     }
1:f41a8a7:     
1:f41a8a7:     protected void tearDown() throws Exception
1:f41a8a7:     {
1:f41a8a7:         super.tearDown();
1:f41a8a7:     }
1:f41a8a7:     
1:f41a8a7:     public static Test suite()
1:f41a8a7:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ReplicationRun_Local_showStateChange Suite");
1:f41a8a7:         
1:f41a8a7:         suite.addTestSuite( ReplicationRun_Local_showStateChange.class  );
1:f41a8a7:         
1:f41a8a7:         return SecurityManagerSetup.noSecurityManager(suite);
1:f41a8a7: 
1:f41a8a7:     }
1:f41a8a7:     
1:f41a8a7:     public void testReplication_Local_showStateChange_showReplState()
1:f41a8a7:     throws Exception
1:f41a8a7:     {
1:f41a8a7:         util.DEBUG(""); // Just to get a nicer print of showCurrentState()...
1:f41a8a7:         
1:f41a8a7:         cleanAllTestHosts();
1:f41a8a7:         
1:f41a8a7:         initEnvironment();
1:f41a8a7:         
1:f41a8a7:         initMaster(masterServerHost,
1:f41a8a7:                 replicatedDb);
1:f41a8a7:         
1:136610d:         startServer(masterJvmVersion, derbyMasterVersion,
1:f41a8a7:                 masterServerHost, ALL_INTERFACES, masterServerPort,
1:f41a8a7:                 masterDbSubPath);
1:f41a8a7:         
1:136610d:         startServer(slaveJvmVersion, derbySlaveVersion,
1:f41a8a7:                 slaveServerHost, ALL_INTERFACES, slaveServerPort,
1:f41a8a7:                 slaveDbSubPath);
1:f41a8a7:         
1:f41a8a7:         final long L=0L;//1000L;
1:f41a8a7:         final long S=0L;
1:f41a8a7:         boolean outerPrintDebug = util.printDebug;
1:f41a8a7:         util.printDebug = true;
1:f41a8a7:         String masterDb = masterDatabasePath +FS+masterDbSubPath +FS+ replicatedDb;
1:f41a8a7:         String slaveDb = slaveDatabasePath +FS+slaveDbSubPath +FS+ replicatedDb;
1:f41a8a7:         showCurrentState("1 started servers",S, masterDb, masterServerHost, masterServerPort);
1:f41a8a7:         showCurrentState("1 started servers",S, slaveDb, slaveServerHost, slaveServerPort);
1:f41a8a7:         
1:f41a8a7:         startServerMonitor(slaveServerHost);
1:f41a8a7:         
1:f41a8a7:         bootMasterDatabase(jvmVersion,
1:f41a8a7:                 masterDatabasePath +FS+ masterDbSubPath, replicatedDb,
1:f41a8a7:                 masterServerHost, masterServerPort,
1:f41a8a7:                 null // bootLoad, // The "test" to start when booting db.
1:f41a8a7:                 );
1:f41a8a7:         showCurrentState("2 master booted",S, masterDb, masterServerHost, masterServerPort);
1:f41a8a7:         showCurrentState("2 master booted",S, slaveDb, slaveServerHost, slaveServerPort);
1:f41a8a7:         
1:f41a8a7:         initSlave(slaveServerHost,
1:f41a8a7:                 jvmVersion,
1:f41a8a7:                 replicatedDb);
1:f41a8a7:         showCurrentState("3 slave filled",S, masterDb, masterServerHost, masterServerPort);
1:f41a8a7:         // Causes XRE09 'The database has already been booted' in startSlave - CORRECT?:
1:f41a8a7:         // showCurrentState("3 slave filled",S, slaveDb, slaveServerHost, slaveServerPort);
1:f41a8a7:         
1:f41a8a7:         startSlave(jvmVersion, replicatedDb,
1:f41a8a7:                 slaveServerHost, slaveServerPort,
1:f41a8a7:                 slaveServerHost, 
1:f41a8a7:                 slaveReplPort,
1:f41a8a7:                 testClientHost);
1:f41a8a7:         showCurrentState("4 slave started",S, masterDb, masterServerHost, masterServerPort);
1:f41a8a7:         // HANGS! on ClientDataSource.getConnection:
1:f41a8a7:         // showCurrentState("4 slave started",S, slaveDb, slaveServerHost, slaveServerPort);
1:f41a8a7:         
1:f41a8a7:         startMaster(jvmVersion, replicatedDb,
1:f41a8a7:                 masterServerHost, masterServerPort,
1:f41a8a7:                 masterServerHost,
1:f41a8a7:                 slaveServerPort, slaveServerHost,
1:f41a8a7:                 slaveReplPort);
1:f41a8a7:         showCurrentState("5 master started",S, masterDb, masterServerHost, masterServerPort);
1:f41a8a7:         showCurrentState("5 master started",S, slaveDb, slaveServerHost, slaveServerPort);
1:f41a8a7:         
1:f41a8a7:         // Replication "load"
1:f41a8a7:         util.DEBUG("Running replication load.");
1:f41a8a7:         int tuplesToInsert = 10000;
1:f41a8a7:         _testInsertUpdateDeleteOnMaster(masterServerHost, masterServerPort, 
1:f41a8a7:                 masterDb, tuplesToInsert);
1:f41a8a7:         
1:f41a8a7:         failOver(jvmVersion,
1:f41a8a7:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:f41a8a7:                 masterServerHost, masterServerPort,
1:f41a8a7:                 testClientHost);
1:f41a8a7:         waitForSQLState("08004", 
1:f41a8a7:             10L, 100,
1:f41a8a7:             slaveDb, slaveServerHost, slaveServerPort);
1:f41a8a7:         showCurrentState("6 failover initiated",S, masterDb, masterServerHost, masterServerPort);
1:f41a8a7:         showCurrentState("6 failover initiated",S, slaveDb, slaveServerHost, slaveServerPort);
1:f41a8a7:         waitForConnect(100L, 200,
1:f41a8a7:             slaveDb, slaveServerHost, slaveServerPort);
1:f41a8a7:         showCurrentState("6 failover initiated + wait..",S, masterDb, masterServerHost, masterServerPort);
1:f41a8a7:         showCurrentState("6 failover initiated + wait..",S, slaveDb, slaveServerHost, slaveServerPort);
1:f41a8a7:         
1:f41a8a7:         connectPing(slaveDb,
1:f41a8a7:                 slaveServerHost,slaveServerPort,
1:f41a8a7:                 testClientHost);
1:f41a8a7:         
1:f41a8a7:         showCurrentState("7 failover completed",S, masterDb, masterServerHost, masterServerPort);
1:f41a8a7:         showCurrentState("7 failover completed",S, slaveDb, slaveServerHost, slaveServerPort);
1:f41a8a7:         util.printDebug = outerPrintDebug;
1:f41a8a7:         // verifySlave();
1:f41a8a7:         _verifyDatabase(slaveServerHost, slaveServerPort,
1:f41a8a7:             slaveDb, tuplesToInsert);
1:f41a8a7:         // We should verify the master as well, at least to see that we still can connect.
1:f41a8a7:         // verifyMaster();
1:f41a8a7:         _verifyDatabase(masterServerHost, masterServerPort,
1:f41a8a7:             masterDb, tuplesToInsert);
1:f41a8a7:     }
1:f41a8a7:     
1:f41a8a7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ReplicationRun_Local_showStateChange Suite");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:136610d
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion, derbyMasterVersion,
1:         startServer(slaveJvmVersion, derbySlaveVersion,
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f41a8a7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_showStateChange
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Run a replication test on localhost
1:  * by using default values for master and slave hosts,
1:  * and master and slave ports.
1:  * This test is intended to be run separatly showing 
1:  * state change during a "normal" replication session.
1:  */
1: 
1: public class ReplicationRun_Local_showStateChange extends ReplicationRun
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Local
1:      * @param testcaseName Identifying the test.
1:      */
1:     public ReplicationRun_Local_showStateChange(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
1:     protected void setUp() throws Exception
1:     {
1:         super.setUp();
1:     }
1:     
1:     protected void tearDown() throws Exception
1:     {
1:         super.tearDown();
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Local_showStateChange Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Local_showStateChange.class  );
1:         
1:         return SecurityManagerSetup.noSecurityManager(suite);
1: 
1:     }
1:     
1:     public void testReplication_Local_showStateChange_showReplState()
1:     throws Exception
1:     {
1:         util.DEBUG(""); // Just to get a nicer print of showCurrentState()...
1:         
1:         cleanAllTestHosts();
1:         
1:         initEnvironment();
1:         
1:         initMaster(masterServerHost,
1:                 replicatedDb);
1:         
0:         masterServer = startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost, ALL_INTERFACES, masterServerPort,
1:                 masterDbSubPath);
1:         
0:         slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
1:                 slaveServerHost, ALL_INTERFACES, slaveServerPort,
1:                 slaveDbSubPath);
1:         
1:         final long L=0L;//1000L;
1:         final long S=0L;
1:         boolean outerPrintDebug = util.printDebug;
1:         util.printDebug = true;
1:         String masterDb = masterDatabasePath +FS+masterDbSubPath +FS+ replicatedDb;
1:         String slaveDb = slaveDatabasePath +FS+slaveDbSubPath +FS+ replicatedDb;
1:         showCurrentState("1 started servers",S, masterDb, masterServerHost, masterServerPort);
1:         showCurrentState("1 started servers",S, slaveDb, slaveServerHost, slaveServerPort);
1:         
1:         startServerMonitor(slaveServerHost);
1:         
1:         bootMasterDatabase(jvmVersion,
1:                 masterDatabasePath +FS+ masterDbSubPath, replicatedDb,
1:                 masterServerHost, masterServerPort,
1:                 null // bootLoad, // The "test" to start when booting db.
1:                 );
1:         showCurrentState("2 master booted",S, masterDb, masterServerHost, masterServerPort);
1:         showCurrentState("2 master booted",S, slaveDb, slaveServerHost, slaveServerPort);
1:         
1:         initSlave(slaveServerHost,
1:                 jvmVersion,
1:                 replicatedDb);
1:         showCurrentState("3 slave filled",S, masterDb, masterServerHost, masterServerPort);
1:         // Causes XRE09 'The database has already been booted' in startSlave - CORRECT?:
1:         // showCurrentState("3 slave filled",S, slaveDb, slaveServerHost, slaveServerPort);
1:         
1:         startSlave(jvmVersion, replicatedDb,
1:                 slaveServerHost, slaveServerPort,
1:                 slaveServerHost, 
1:                 slaveReplPort,
1:                 testClientHost);
1:         showCurrentState("4 slave started",S, masterDb, masterServerHost, masterServerPort);
1:         // HANGS! on ClientDataSource.getConnection:
1:         // showCurrentState("4 slave started",S, slaveDb, slaveServerHost, slaveServerPort);
1:         
1:         startMaster(jvmVersion, replicatedDb,
1:                 masterServerHost, masterServerPort,
1:                 masterServerHost,
1:                 slaveServerPort, slaveServerHost,
1:                 slaveReplPort);
1:         showCurrentState("5 master started",S, masterDb, masterServerHost, masterServerPort);
1:         showCurrentState("5 master started",S, slaveDb, slaveServerHost, slaveServerPort);
1:         
1:         // Replication "load"
1:         util.DEBUG("Running replication load.");
1:         int tuplesToInsert = 10000;
1:         _testInsertUpdateDeleteOnMaster(masterServerHost, masterServerPort, 
1:                 masterDb, tuplesToInsert);
1:         
1:         failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost, masterServerPort,
1:                 testClientHost);
1:         waitForSQLState("08004", 
1:             10L, 100,
1:             slaveDb, slaveServerHost, slaveServerPort);
1:         showCurrentState("6 failover initiated",S, masterDb, masterServerHost, masterServerPort);
1:         showCurrentState("6 failover initiated",S, slaveDb, slaveServerHost, slaveServerPort);
1:         waitForConnect(100L, 200,
1:             slaveDb, slaveServerHost, slaveServerPort);
1:         showCurrentState("6 failover initiated + wait..",S, masterDb, masterServerHost, masterServerPort);
1:         showCurrentState("6 failover initiated + wait..",S, slaveDb, slaveServerHost, slaveServerPort);
1:         
1:         connectPing(slaveDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         showCurrentState("7 failover completed",S, masterDb, masterServerHost, masterServerPort);
1:         showCurrentState("7 failover completed",S, slaveDb, slaveServerHost, slaveServerPort);
1:         util.printDebug = outerPrintDebug;
1:         // verifySlave();
1:         _verifyDatabase(slaveServerHost, slaveServerPort,
1:             slaveDb, tuplesToInsert);
1:         // We should verify the master as well, at least to see that we still can connect.
1:         // verifyMaster();
1:         _verifyDatabase(masterServerHost, masterServerPort,
1:             masterDb, tuplesToInsert);
1:     }
1:     
1: }
============================================================================