1:3130800: /*
1:3130800: 
1:3130800:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.Test_6661
1:3130800: 
1:3130800:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3130800:    contributor license agreements.  See the NOTICE file distributed with
1:3130800:    this work for additional information regarding copyright ownership.
1:3130800:    The ASF licenses this file to You under the Apache License, Version 2.0
1:3130800:    (the "License"); you may not use this file except in compliance with
1:3130800:    the License.  You may obtain a copy of the License at
1:3130800: 
1:3130800:       http://www.apache.org/licenses/LICENSE-2.0
1:3130800: 
1:3130800:    Unless required by applicable law or agreed to in writing, software
1:3130800:    distributed under the License is distributed on an "AS IS" BASIS,
1:3130800:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3130800:    See the License for the specific language governing permissions and
1:3130800:    limitations under the License.
1:3130800: 
1:3130800:  */
1:3130800: 
1:3130800: package org.apache.derbyTesting.functionTests.tests.tools;
1:3130800: 
1:3130800: import java.sql.Connection;
1:3130800: import java.sql.SQLException;
1:3130800: import junit.framework.Test;
1:3130800: 
1:3130800: import org.apache.derby.tools.dblook;
1:3130800: 
1:3130800: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:3130800: import org.apache.derbyTesting.junit.BaseTestSuite;
1:3130800: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:3130800: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:3130800: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:3130800: import org.apache.derbyTesting.junit.TestConfiguration;
1:3130800: 
1:3130800: /**
1:3130800:  * Test that deferrable constraints are recreated correctly by dblook.
1:3130800:  */
1:3130800: public class Test_6661 extends BaseJDBCTestCase
1:3130800: {
1:3130800:     ///////////////////////////////////////////////////////////////////////////////////
1:3130800:     //
1:3130800:     // CONSTANTS
1:3130800:     //
1:3130800:     ///////////////////////////////////////////////////////////////////////////////////
1:3130800: 
1:3130800:     private static  final   String[][]  EXPECTED_CONSTRAINT_STATE = new String[][]
1:3130800:     {
1:3130800:         { "CHECK6661_INIT_DEFERRED", "e" },
1:3130800:         { "CHECK6661_INIT_IMMEDIATE", "i" },
1:3130800:         { "CHECK6661_VANILLA", "E" },
1:3130800:         { "TPRIM6661_INIT_DEFERRED", "e" },
1:3130800:         { "TPRIM6661_INIT_IMMEDIATE", "i" },
1:3130800:         { "TPRIM6661_VANILLA", "E" },
1:3130800:         { "TREF6661_INIT_DEFERRED", "e" },
1:3130800:         { "TREF6661_INIT_IMMEDIATE","i" },
1:3130800:         { "TREF6661_VANILLA", "E" },
1:3130800:         { "TUNIQUE6661_INIT_DEFERRED", "e" },
1:3130800:         { "TUNIQUE6661_INIT_IMMEDIATE", "i" },
1:3130800:         { "TUNIQUE6661_VANILLA", "E" },
1:3130800:     };
1:3130800: 
1:3130800:     private static  final   String  DBLOOK_OUTPUT = SupportFilesSetup.getReadWrite( "dblookOutput.sql" ).getPath();
1:3130800: 
1:3130800:     ///////////////////////////////////////////////////////////////////////////////////
1:3130800:     //
1:3130800:     // STATE
1:3130800:     //
1:3130800:     ///////////////////////////////////////////////////////////////////////////////////
1:3130800: 
1:3130800:     ///////////////////////////////////////////////////////////////////////////////////
1:3130800:     //
1:3130800:     // CONSTRUCTOR
1:3130800:     //
1:3130800:     ///////////////////////////////////////////////////////////////////////////////////
1:3130800: 
1:3130800: 	public Test_6661(String name)
1:3130800:     {
1:3130800: 		super( name );
1:3130800: 	}
1:3130800: 	
1:3130800:     ///////////////////////////////////////////////////////////////////////////////////
1:3130800:     //
1:3130800:     // JUnit BEHAVIOR
1:3130800:     //
1:3130800:     ///////////////////////////////////////////////////////////////////////////////////
1:3130800: 
1:3130800: 	public static Test suite()
1:3130800:     {
1:3130800:         BaseTestSuite baseTest = new BaseTestSuite( Test_6661.class, "Test_6661" );
1:881d002:         Test        singleUseWrapper = TestConfiguration.singleUseDatabaseDecorator( baseTest );
1:881d002:         Test        cleanDatabaseWrapper = new CleanDatabaseTestSetup( singleUseWrapper );
1:881d002:         Test        supportFileWrapper = new SupportFilesSetup( cleanDatabaseWrapper );
1:881d002:         Test        noSecurityWrapper = SecurityManagerSetup.noSecurityManager( supportFileWrapper );
1:3130800: 
1:3130800:         return noSecurityWrapper;
1:3130800: 	}
1:3130800: 	
1:3130800:     ///////////////////////////////////////////////////////////////////////////////////
1:3130800:     //
1:3130800:     // TESTS
1:3130800:     //
1:3130800:     ///////////////////////////////////////////////////////////////////////////////////
1:3130800: 
1:3130800: 	public void test_01() throws Exception
1:3130800:     {
1:3130800:         Connection  conn = getConnection();
1:3130800: 
1:3130800:         //
1:3130800:         // Create and verify a number of constraints.
1:3130800:         //
1:3130800:         goodStatement
1:3130800:             (
1:3130800:              conn,
1:3130800:              "create table tprim6661_vanilla\n" +
1:3130800:              "(\n" +
1:3130800:              "    keyCol  int not null,\n" +
1:3130800:              "    constraint tprim6661_vanilla primary key( keyCol )\n" +
1:3130800:              ")\n"
1:3130800:              );
1:3130800:         goodStatement
1:3130800:             (
1:3130800:              conn,
1:3130800:              "create table tprim6661_init_deferred\n" +
1:3130800:              "(\n" +
1:3130800:              "    keyCol  int not null,\n" +
1:3130800:              "    constraint tprim6661_init_deferred primary key( keyCol ) deferrable initially deferred\n" +
1:3130800:              ")\n"
1:3130800:              );
1:3130800:         goodStatement
1:3130800:             (
1:3130800:              conn,
1:3130800:              "create table tprim6661_init_immediate\n" +
1:3130800:              "(\n" +
1:3130800:              "    keyCol  int not null,\n" +
1:3130800:              "    constraint tprim6661_init_immediate primary key( keyCol ) deferrable\n" +
1:3130800:              ")\n"
1:3130800:              );
1:3130800:         goodStatement
1:3130800:             (
1:3130800:              conn,
1:3130800:              "create table tunique6661_vanilla\n" +
1:3130800:              "(\n" +
1:3130800:              "    keyCol  int not null,\n" +
1:3130800:              "    constraint tunique6661_vanilla primary key( keyCol )\n" +
1:3130800:              ")\n"
1:3130800:              );
1:3130800:         goodStatement
1:3130800:             (
1:3130800:              conn,
1:3130800:              "create table tunique6661_init_deferred\n" +
1:3130800:              "(\n" +
1:3130800:              "    keyCol  int not null,\n" +
1:3130800:              "    constraint tunique6661_init_deferred primary key( keyCol ) deferrable initially deferred\n" +
1:3130800:              ")\n"
1:3130800:              );
1:3130800:         goodStatement
1:3130800:             (
1:3130800:              conn,
1:3130800:              "create table tunique6661_init_immediate\n" +
1:3130800:              "(\n" +
1:3130800:              "    keyCol  int not null,\n" +
1:3130800:              "    constraint tunique6661_init_immediate primary key( keyCol ) deferrable\n" +
1:3130800:              ")\n"
1:3130800:              );
1:3130800:         goodStatement
1:3130800:             (
1:3130800:              conn,
1:3130800:              "create table tref6661\n" +
1:3130800:              "(\n" +
1:3130800:              "    tref6661_vanilla int,\n" +
1:3130800:              "    tref6661_init_deferred int,\n" +
1:3130800:              "    tref6661_init_immediate int,\n" +
1:3130800:              "\n" +
1:3130800:              "    constraint tref6661_vanilla foreign key( tref6661_vanilla ) references tprim6661_vanilla( keyCol ),\n" +
1:3130800: "    constraint tref6661_init_deferred foreign key( tref6661_init_deferred ) references tprim6661_vanilla( keyCol ) deferrable initially deferred,\n" +
1:3130800:              "    constraint tref6661_init_immediate foreign key( tref6661_init_immediate ) references tprim6661_vanilla( keyCol ) deferrable\n" +
1:3130800:              ")\n"
1:3130800:              );
1:3130800:         goodStatement
1:3130800:             (
1:3130800:              conn,
1:3130800:              "create table tcheck6661\n" +
1:3130800:              "(\n" +
1:3130800:              "    a int,\n" +
1:3130800:              "\n" +
1:3130800:              "    constraint check6661_vanilla check( a > 0 ),\n" +
1:3130800:              "    constraint check6661_init_deferred check( a > 10 ) deferrable initially deferred,\n" +
1:3130800:              "    constraint check6661_init_immediate check( a > 100 ) deferrable\n" +
1:3130800:              ")\n" 
1:3130800:              );
1:3130800: 
1:3130800:         String  query = "select constraintname, state from sys.sysconstraints order by constraintname";
1:3130800:         assertResults( conn, query, EXPECTED_CONSTRAINT_STATE, true );
1:3130800: 
1:3130800:         //
1:3130800:         // Create a dblook script.
1:3130800:         //
1:3130800:         TestConfiguration   config = getTestConfiguration();
1:3130800:         String      dbName = config.getPhysicalDatabaseName( config.getDefaultDatabaseName() );
1:3130800:         new dblook
1:3130800:             (
1:3130800:              new String[]
1:3130800:              {
1:3130800:                  "-d",
1:3130800:                  "jdbc:derby:" + dbName,
1:3130800:                  "-o",
1:3130800:                  DBLOOK_OUTPUT
1:3130800:              }
1:3130800:              );
1:3130800: 
1:3130800:         //
1:3130800:         // Drop the schema objects.
1:3130800:         //
1:3130800:         goodStatement( conn, "drop table tcheck6661" );
1:3130800:         goodStatement( conn, "drop table tref6661" );
1:3130800:         goodStatement( conn, "drop table tunique6661_init_immediate" );
1:3130800:         goodStatement( conn, "drop table tunique6661_init_deferred" );
1:3130800:         goodStatement( conn, "drop table tunique6661_vanilla" );
1:3130800:         goodStatement( conn, "drop table tprim6661_init_immediate" );
1:3130800:         goodStatement( conn, "drop table tprim6661_init_deferred" );
1:3130800:         goodStatement( conn, "drop table tprim6661_vanilla" );
1:3130800:         assertResults( conn, query, new String[][] {}, true );
1:3130800: 
1:3130800:         //
1:3130800:         // Now run the script created by dblook and verify that the
1:3130800:         // deferred constraints were re-created correctly.
1:3130800:         //
1:3130800:         dblook_test.runDDL( conn, DBLOOK_OUTPUT );
1:3130800:         assertResults( conn, query, EXPECTED_CONSTRAINT_STATE, true );
1:3130800: 	}
1:3130800:     
1:3130800: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:881d002
/////////////////////////////////////////////////////////////////////////
1:         Test        singleUseWrapper = TestConfiguration.singleUseDatabaseDecorator( baseTest );
1:         Test        cleanDatabaseWrapper = new CleanDatabaseTestSetup( singleUseWrapper );
1:         Test        supportFileWrapper = new SupportFilesSetup( cleanDatabaseWrapper );
1:         Test        noSecurityWrapper = SecurityManagerSetup.noSecurityManager( supportFileWrapper );
commit:3130800
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.Test_6661
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.tools;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import junit.framework.Test;
1: 
1: import org.apache.derby.tools.dblook;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test that deferrable constraints are recreated correctly by dblook.
1:  */
1: public class Test_6661 extends BaseJDBCTestCase
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String[][]  EXPECTED_CONSTRAINT_STATE = new String[][]
1:     {
1:         { "CHECK6661_INIT_DEFERRED", "e" },
1:         { "CHECK6661_INIT_IMMEDIATE", "i" },
1:         { "CHECK6661_VANILLA", "E" },
1:         { "TPRIM6661_INIT_DEFERRED", "e" },
1:         { "TPRIM6661_INIT_IMMEDIATE", "i" },
1:         { "TPRIM6661_VANILLA", "E" },
1:         { "TREF6661_INIT_DEFERRED", "e" },
1:         { "TREF6661_INIT_IMMEDIATE","i" },
1:         { "TREF6661_VANILLA", "E" },
1:         { "TUNIQUE6661_INIT_DEFERRED", "e" },
1:         { "TUNIQUE6661_INIT_IMMEDIATE", "i" },
1:         { "TUNIQUE6661_VANILLA", "E" },
1:     };
1: 
1:     private static  final   String  DBLOOK_OUTPUT = SupportFilesSetup.getReadWrite( "dblookOutput.sql" ).getPath();
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	public Test_6661(String name)
1:     {
1: 		super( name );
1: 	}
1: 	
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	public static Test suite()
1:     {
1:         BaseTestSuite baseTest = new BaseTestSuite( Test_6661.class, "Test_6661" );
0:         Test        supportFileWrapper = new SupportFilesSetup( baseTest );
0:         Test        cleanDatabaseWrapper = new CleanDatabaseTestSetup( supportFileWrapper );
0:         Test        noSecurityWrapper = SecurityManagerSetup.noSecurityManager( cleanDatabaseWrapper );
1: 
1:         return noSecurityWrapper;
1: 	}
1: 	
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	public void test_01() throws Exception
1:     {
1:         Connection  conn = getConnection();
1: 
1:         //
1:         // Create and verify a number of constraints.
1:         //
1:         goodStatement
1:             (
1:              conn,
1:              "create table tprim6661_vanilla\n" +
1:              "(\n" +
1:              "    keyCol  int not null,\n" +
1:              "    constraint tprim6661_vanilla primary key( keyCol )\n" +
1:              ")\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create table tprim6661_init_deferred\n" +
1:              "(\n" +
1:              "    keyCol  int not null,\n" +
1:              "    constraint tprim6661_init_deferred primary key( keyCol ) deferrable initially deferred\n" +
1:              ")\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create table tprim6661_init_immediate\n" +
1:              "(\n" +
1:              "    keyCol  int not null,\n" +
1:              "    constraint tprim6661_init_immediate primary key( keyCol ) deferrable\n" +
1:              ")\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create table tunique6661_vanilla\n" +
1:              "(\n" +
1:              "    keyCol  int not null,\n" +
1:              "    constraint tunique6661_vanilla primary key( keyCol )\n" +
1:              ")\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create table tunique6661_init_deferred\n" +
1:              "(\n" +
1:              "    keyCol  int not null,\n" +
1:              "    constraint tunique6661_init_deferred primary key( keyCol ) deferrable initially deferred\n" +
1:              ")\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create table tunique6661_init_immediate\n" +
1:              "(\n" +
1:              "    keyCol  int not null,\n" +
1:              "    constraint tunique6661_init_immediate primary key( keyCol ) deferrable\n" +
1:              ")\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create table tref6661\n" +
1:              "(\n" +
1:              "    tref6661_vanilla int,\n" +
1:              "    tref6661_init_deferred int,\n" +
1:              "    tref6661_init_immediate int,\n" +
1:              "\n" +
1:              "    constraint tref6661_vanilla foreign key( tref6661_vanilla ) references tprim6661_vanilla( keyCol ),\n" +
1: "    constraint tref6661_init_deferred foreign key( tref6661_init_deferred ) references tprim6661_vanilla( keyCol ) deferrable initially deferred,\n" +
1:              "    constraint tref6661_init_immediate foreign key( tref6661_init_immediate ) references tprim6661_vanilla( keyCol ) deferrable\n" +
1:              ")\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create table tcheck6661\n" +
1:              "(\n" +
1:              "    a int,\n" +
1:              "\n" +
1:              "    constraint check6661_vanilla check( a > 0 ),\n" +
1:              "    constraint check6661_init_deferred check( a > 10 ) deferrable initially deferred,\n" +
1:              "    constraint check6661_init_immediate check( a > 100 ) deferrable\n" +
1:              ")\n" 
1:              );
1: 
1:         String  query = "select constraintname, state from sys.sysconstraints order by constraintname";
1:         assertResults( conn, query, EXPECTED_CONSTRAINT_STATE, true );
1: 
1:         //
1:         // Create a dblook script.
1:         //
1:         TestConfiguration   config = getTestConfiguration();
1:         String      dbName = config.getPhysicalDatabaseName( config.getDefaultDatabaseName() );
1:         new dblook
1:             (
1:              new String[]
1:              {
1:                  "-d",
1:                  "jdbc:derby:" + dbName,
1:                  "-o",
1:                  DBLOOK_OUTPUT
1:              }
1:              );
1: 
1:         //
1:         // Drop the schema objects.
1:         //
1:         goodStatement( conn, "drop table tcheck6661" );
1:         goodStatement( conn, "drop table tref6661" );
1:         goodStatement( conn, "drop table tunique6661_init_immediate" );
1:         goodStatement( conn, "drop table tunique6661_init_deferred" );
1:         goodStatement( conn, "drop table tunique6661_vanilla" );
1:         goodStatement( conn, "drop table tprim6661_init_immediate" );
1:         goodStatement( conn, "drop table tprim6661_init_deferred" );
1:         goodStatement( conn, "drop table tprim6661_vanilla" );
1:         assertResults( conn, query, new String[][] {}, true );
1: 
1:         //
1:         // Now run the script created by dblook and verify that the
1:         // deferred constraints were re-created correctly.
1:         //
1:         dblook_test.runDDL( conn, DBLOOK_OUTPUT );
1:         assertResults( conn, query, EXPECTED_CONSTRAINT_STATE, true );
1: 	}
1:     
1: }
============================================================================