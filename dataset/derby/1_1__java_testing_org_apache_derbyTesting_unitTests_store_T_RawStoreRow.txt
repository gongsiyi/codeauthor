1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.store.T_RawStoreRow
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.store;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.store.raw.*;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.store.access.*;
1:2bc809f: import org.apache.derby.iapi.types.SQLChar;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.types.DataValueDescriptor;
1:2bc809f: 
1:2bc809f: import java.io.*;
1:2bc809f: 
1:2bc809f: /* 
1:2bc809f:  * Implements a row of N columns of strings, or objects.
1:2bc809f:  * Used for testing raw store functionality.
1:2bc809f:  */
1:2bc809f: public class T_RawStoreRow {
1:2bc809f: 
1:2bc809f: 	DataValueDescriptor[] col;
1:2bc809f: 
1:2bc809f: 	public T_RawStoreRow(int numberOfColumns) {
1:2bc809f: 		super();
1:2bc809f: 		col = new DataValueDescriptor[numberOfColumns];
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public T_RawStoreRow(String data) {
1:2bc809f: 		this(1);
1:2bc809f: 		col[0] = data == null ? new SQLChar() : new SQLChar(data);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public DataValueDescriptor[] getRow() {
1:2bc809f: 		return col;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void setColumn(int columnId, String data)
1:2bc809f: 	{
1:2bc809f: 		col[columnId] = data == null ? new SQLChar() : new SQLChar(data);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void setColumn(int columnId, int stringLen, String data)
1:2bc809f: 	{
1:2bc809f: 		// in store it will take (stringLen * 2) bytes
1:2bc809f: 		col[columnId] = new SQLChar(T_Util.getStringFromData(data, stringLen));
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void setColumn(int columnId, DataValueDescriptor data)
1:2bc809f: 	{
1:2bc809f: 		col[columnId] = data;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public DataValueDescriptor getStorableColumn(int columnId) {
1:2bc809f: 
1:2bc809f: 		return col[columnId];
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public DataValueDescriptor getColumn(int columnId) {
1:2bc809f: 
1:2bc809f: 		return col[columnId];
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void setStorableColumn(int columnId, DataValueDescriptor value) {
1:2bc809f: 
1:2bc809f: 		col[columnId] = value;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public  int nColumns() {
1:2bc809f: 		return col.length;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public String toString() {
1:2bc809f: 		StringBuffer sb = new StringBuffer("");
1:2bc809f: 		for (int i = 0; i < nColumns(); i++) {
1:2bc809f: 			sb.append(col[i].toString());
1:2bc809f: 			if (i < (nColumns() - 1))
1:2bc809f: 				sb.append(",");
1:2bc809f: 		}
1:2bc809f: 		sb.append("");
1:2bc809f: 
1:2bc809f: 		return sb.toString();
1:2bc809f: 	}
1:2bc809f: }
1:2bc809f: 
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.store.T_RawStoreRow
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.store;
1: 
1: import org.apache.derby.iapi.store.raw.*;
1: 
1: import org.apache.derby.iapi.store.access.*;
1: import org.apache.derby.iapi.types.SQLChar;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import java.io.*;
1: 
1: /* 
1:  * Implements a row of N columns of strings, or objects.
1:  * Used for testing raw store functionality.
1:  */
1: public class T_RawStoreRow {
1: 
1: 	DataValueDescriptor[] col;
1: 
1: 	public T_RawStoreRow(int numberOfColumns) {
1: 		super();
1: 		col = new DataValueDescriptor[numberOfColumns];
1: 	}
1: 
1: 	public T_RawStoreRow(String data) {
1: 		this(1);
1: 		col[0] = data == null ? new SQLChar() : new SQLChar(data);
1: 	}
1: 
1: 	public DataValueDescriptor[] getRow() {
1: 		return col;
1: 	}
1: 
1: 	public void setColumn(int columnId, String data)
1: 	{
1: 		col[columnId] = data == null ? new SQLChar() : new SQLChar(data);
1: 	}
1: 
1: 	public void setColumn(int columnId, int stringLen, String data)
1: 	{
1: 		// in store it will take (stringLen * 2) bytes
1: 		col[columnId] = new SQLChar(T_Util.getStringFromData(data, stringLen));
1: 	}
1: 
1: 	public void setColumn(int columnId, DataValueDescriptor data)
1: 	{
1: 		col[columnId] = data;
1: 	}
1: 
1: 	public DataValueDescriptor getStorableColumn(int columnId) {
1: 
1: 		return col[columnId];
1: 	}
1: 
1: 	public DataValueDescriptor getColumn(int columnId) {
1: 
1: 		return col[columnId];
1: 	}
1: 
1: 	public void setStorableColumn(int columnId, DataValueDescriptor value) {
1: 
1: 		col[columnId] = value;
1: 	}
1: 
1: 	public  int nColumns() {
1: 		return col.length;
1: 	}
1: 
1: 	public String toString() {
1: 		StringBuffer sb = new StringBuffer("");
1: 		for (int i = 0; i < nColumns(); i++) {
1: 			sb.append(col[i].toString());
1: 			if (i < (nColumns() - 1))
1: 				sb.append(",");
1: 		}
1: 		sb.append("");
1: 
1: 		return sb.toString();
1: 	}
1: }
1: 
============================================================================