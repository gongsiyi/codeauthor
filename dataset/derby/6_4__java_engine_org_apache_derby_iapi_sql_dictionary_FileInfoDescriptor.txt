1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.depend.Provider;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.StatementType;
1:eac0369: import org.apache.derby.catalog.DependableFinder;
1:eac0369: import org.apache.derby.catalog.Dependable;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A Descriptor for a file that has been stored in the database.
1:eac0369:  */
1:f2fad75: public final class  FileInfoDescriptor extends UniqueSQLObjectDescriptor 
1:f2fad75: 	implements Provider
1:eac0369: {
1:eac0369: 	/** A type tho indicate the file is a jar file **/
1:eac0369: 	public static final int JAR_FILE_TYPE = 0;
1:eac0369: 
1:eac0369: 	/** external interface to this class:
1:eac0369: 		<ol>
1:eac0369: 		<li>public long	getGenerationId();
1:eac0369: 		</ol>
1:eac0369: 	*/
1:4eece41: 	private final UUID id;
1:4eece41: 	private final SchemaDescriptor sd;
1:4eece41: 	private final String sqlName;
1:4eece41: 	private final long generationId;
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a FileInfoDescriptor.
1:eac0369: 	 *
1:eac0369: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
1:eac0369: 	 * @param id        	The id for this file
1:eac0369: 	 * @param sd			The schema for this file.
1:eac0369: 	 * @param sqlName		The SQL name of this file.
1:eac0369: 	 * @param generationId  The generation id for the
1:eac0369: 	 *                      version of the file this describes.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public FileInfoDescriptor(DataDictionary dataDictionary,
1:eac0369: 								 UUID id,
1:eac0369: 								 SchemaDescriptor sd,
1:eac0369: 								 String sqlName,
1:eac0369: 								 long generationId)
1:eac0369: 	{
1:eac0369: 		super( dataDictionary );
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (sd.getSchemaName() == null)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("new FileInfoDescriptor() schema "+
1:eac0369: 					"name is null for FileInfo "+sqlName);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		this.id = id;
1:eac0369: 		this.sd = sd;
1:eac0369: 		this.sqlName = sqlName;
1:eac0369: 		this.generationId = generationId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public SchemaDescriptor getSchemaDescriptor()
1:eac0369: 	{
1:eac0369: 		return sd;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String getName()
1:eac0369: 	{
1:eac0369: 		return sqlName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see UniqueTupleDescriptor#getUUID
1:eac0369: 	 */
1:eac0369: 	public UUID	getUUID()
1:eac0369: 	{
1:eac0369: 		return id;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Gets the generationId for the current version of this file. The
1:eac0369: 	 * triple (schemaName,SQLName,generationId) are unique for the
1:eac0369: 	 * life of this database.
1:eac0369: 	 *
1:eac0369: 	 * @return	the generationId for this file
1:eac0369: 	 */
1:eac0369: 	public long getGenerationId()
1:eac0369: 	{
1:eac0369: 		return generationId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// Provider interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**		
1:eac0369: 	  @see Dependable#getDependableFinder
1:eac0369: 	 */
1:eac0369: 	public DependableFinder getDependableFinder()
1:eac0369: 	{
1:eac0369: 	    return	getDependableFinder(StoredFormatIds.FILE_INFO_FINDER_V01_ID);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  @see Dependable#getObjectName
1:eac0369: 	 */
1:eac0369: 	public String getObjectName()
1:eac0369: 	{
1:eac0369: 		return sqlName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  @see Dependable#getObjectID
1:eac0369: 	 */
1:eac0369: 	public UUID getObjectID()
1:eac0369: 	{
1:eac0369: 		return id;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  @see Dependable#getClassType
1:eac0369: 	 */
1:eac0369: 	public String getClassType()
1:eac0369: 	{
1:eac0369: 		return Dependable.FILE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// class interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	
1:eac0369: 	/** @see TupleDescriptor#getDescriptorType */
1:eac0369: 	public String getDescriptorType() { return "Jar file"; }
1:eac0369: 
1:eac0369: 	/** @see TupleDescriptor#getDescriptorName */
1:eac0369: 	public String getDescriptorName() { return sqlName; }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f2fad75
/////////////////////////////////////////////////////////////////////////
1: public final class  FileInfoDescriptor extends UniqueSQLObjectDescriptor 
1: 	implements Provider
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4eece41
/////////////////////////////////////////////////////////////////////////
0: public final class  FileInfoDescriptor extends TupleDescriptor 
/////////////////////////////////////////////////////////////////////////
1: 	private final UUID id;
1: 	private final SchemaDescriptor sd;
1: 	private final String sqlName;
1: 	private final long generationId;
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.depend.Provider;
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.StatementType;
1: import org.apache.derby.catalog.DependableFinder;
1: import org.apache.derby.catalog.Dependable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: /**
1:  * A Descriptor for a file that has been stored in the database.
1:  */
0: public class  FileInfoDescriptor extends TupleDescriptor 
0: 	implements Provider, UniqueSQLObjectDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/** A type tho indicate the file is a jar file **/
1: 	public static final int JAR_FILE_TYPE = 0;
1: 
1: 	/** external interface to this class:
1: 		<ol>
1: 		<li>public long	getGenerationId();
1: 		</ol>
1: 	*/
0: 	UUID id;
0: 	SchemaDescriptor sd;
0: 	String sqlName;
0: 	long generationId;
1: 	
1: 	/**
1: 	 * Constructor for a FileInfoDescriptor.
1: 	 *
1: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
1: 	 * @param id        	The id for this file
1: 	 * @param sd			The schema for this file.
1: 	 * @param sqlName		The SQL name of this file.
1: 	 * @param generationId  The generation id for the
1: 	 *                      version of the file this describes.
1: 	 */
1: 
1: 	public FileInfoDescriptor(DataDictionary dataDictionary,
1: 								 UUID id,
1: 								 SchemaDescriptor sd,
1: 								 String sqlName,
1: 								 long generationId)
1: 	{
1: 		super( dataDictionary );
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (sd.getSchemaName() == null)
1: 			{
1: 				SanityManager.THROWASSERT("new FileInfoDescriptor() schema "+
1: 					"name is null for FileInfo "+sqlName);
1: 			}
1: 		}
1: 		this.id = id;
1: 		this.sd = sd;
1: 		this.sqlName = sqlName;
1: 		this.generationId = generationId;
1: 	}
1: 
1: 	public SchemaDescriptor getSchemaDescriptor()
1: 	{
1: 		return sd;
1: 	}
1: 
1: 	public String getName()
1: 	{
1: 		return sqlName;
1: 	}
1: 
1: 	/**
1: 	 * @see UniqueTupleDescriptor#getUUID
1: 	 */
1: 	public UUID	getUUID()
1: 	{
1: 		return id;
1: 	}
1: 
1: 	/**
1: 	 * Gets the generationId for the current version of this file. The
1: 	 * triple (schemaName,SQLName,generationId) are unique for the
1: 	 * life of this database.
1: 	 *
1: 	 * @return	the generationId for this file
1: 	 */
1: 	public long getGenerationId()
1: 	{
1: 		return generationId;
1: 	}
1: 
1: 	//
1: 	// Provider interface
1: 	//
1: 
1: 	/**		
1: 	  @see Dependable#getDependableFinder
1: 	 */
1: 	public DependableFinder getDependableFinder()
1: 	{
1: 	    return	getDependableFinder(StoredFormatIds.FILE_INFO_FINDER_V01_ID);
1: 	}
1: 
1: 	/**
1: 	  @see Dependable#getObjectName
1: 	 */
1: 	public String getObjectName()
1: 	{
1: 		return sqlName;
1: 	}
1: 
1: 	/**
1: 	  @see Dependable#getObjectID
1: 	 */
1: 	public UUID getObjectID()
1: 	{
1: 		return id;
1: 	}
1: 
1: 	/**
1: 	  @see Dependable#getClassType
1: 	 */
1: 	public String getClassType()
1: 	{
1: 		return Dependable.FILE;
1: 	}
1: 
1: 	//
1: 	// class interface
1: 	//
1: 
1: 	
1: 	/** @see TupleDescriptor#getDescriptorType */
1: 	public String getDescriptorType() { return "Jar file"; }
1: 
1: 	/** @see TupleDescriptor#getDescriptorName */
1: 	public String getDescriptorName() { return sqlName; }
1: 
1: 
1: 
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.depend.Provider;
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.StatementType;
0: import org.apache.derby.catalog.DependableFinder;
0: import org.apache.derby.catalog.Dependable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: /**
0:  * A Descriptor for a file that has been stored in the database.
0:  */
0: public class  FileInfoDescriptor extends TupleDescriptor 
0: 	implements Provider, UniqueSQLObjectDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/** A type tho indicate the file is a jar file **/
0: 	public static final int JAR_FILE_TYPE = 0;
0: 
0: 	/** external interface to this class:
0: 		<ol>
0: 		<li>public long	getGenerationId();
0: 		</ol>
0: 	*/
0: 	UUID id;
0: 	SchemaDescriptor sd;
0: 	String sqlName;
0: 	long generationId;
0: 	
0: 	/**
0: 	 * Constructor for a FileInfoDescriptor.
0: 	 *
0: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
0: 	 * @param id        	The id for this file
0: 	 * @param sd			The schema for this file.
0: 	 * @param sqlName		The SQL name of this file.
0: 	 * @param generationId  The generation id for the
0: 	 *                      version of the file this describes.
0: 	 */
0: 
0: 	public FileInfoDescriptor(DataDictionary dataDictionary,
0: 								 UUID id,
0: 								 SchemaDescriptor sd,
0: 								 String sqlName,
0: 								 long generationId)
0: 	{
0: 		super( dataDictionary );
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (sd.getSchemaName() == null)
0: 			{
0: 				SanityManager.THROWASSERT("new FileInfoDescriptor() schema "+
0: 					"name is null for FileInfo "+sqlName);
0: 			}
0: 		}
0: 		this.id = id;
0: 		this.sd = sd;
0: 		this.sqlName = sqlName;
0: 		this.generationId = generationId;
0: 	}
0: 
0: 	public SchemaDescriptor getSchemaDescriptor()
0: 	{
0: 		return sd;
0: 	}
0: 
0: 	public String getName()
0: 	{
0: 		return sqlName;
0: 	}
0: 
0: 	/**
0: 	 * @see UniqueTupleDescriptor#getUUID
0: 	 */
0: 	public UUID	getUUID()
0: 	{
0: 		return id;
0: 	}
0: 
0: 	/**
0: 	 * Gets the generationId for the current version of this file. The
0: 	 * triple (schemaName,SQLName,generationId) are unique for the
0: 	 * life of this database.
0: 	 *
0: 	 * @return	the generationId for this file
0: 	 */
0: 	public long getGenerationId()
0: 	{
0: 		return generationId;
0: 	}
0: 
0: 	//
0: 	// Provider interface
0: 	//
0: 
0: 	/**		
0: 	  @see Dependable#getDependableFinder
0: 	 */
0: 	public DependableFinder getDependableFinder()
0: 	{
0: 	    return	getDependableFinder(StoredFormatIds.FILE_INFO_FINDER_V01_ID);
0: 	}
0: 
0: 	/**
0: 	  @see Dependable#getObjectName
0: 	 */
0: 	public String getObjectName()
0: 	{
0: 		return sqlName;
0: 	}
0: 
0: 	/**
0: 	  @see Dependable#getObjectID
0: 	 */
0: 	public UUID getObjectID()
0: 	{
0: 		return id;
0: 	}
0: 
0: 	/**
0: 	  @see Dependable#getClassType
0: 	 */
0: 	public String getClassType()
0: 	{
0: 		return Dependable.FILE;
0: 	}
0: 
0: 	//
0: 	// class interface
0: 	//
0: 
0: 	
0: 	/** @see TupleDescriptor#getDescriptorType */
0: 	public String getDescriptorType() { return "Jar file"; }
0: 
0: 	/** @see TupleDescriptor#getDescriptorName */
0: 	public String getDescriptorName() { return sqlName; }
0: 
0: 
0: 
0: }
============================================================================