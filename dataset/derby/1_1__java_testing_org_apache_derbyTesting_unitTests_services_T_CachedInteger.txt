1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_CachedInteger
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.cache.*;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 
1:2bc809f: */
1:2bc809f: public class T_CachedInteger extends T_Cacheable {
1:2bc809f: 
1:2bc809f: 	protected T_Key		keyValue;
1:2bc809f: 		
1:2bc809f: 	public T_CachedInteger() {
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Cacheable methods
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		@exception StandardException  Standard Derby Error policy
1:2bc809f: 	*/
1:2bc809f: 	public Cacheable setIdentity(Object key) throws StandardException {
1:2bc809f: 
1:2bc809f: 		super.setIdentity(key);
1:2bc809f: 
1:2bc809f: 		T_Key tkey = (T_Key) key;	// instanceof check provided by superclass
1:2bc809f: 
1:2bc809f: 		if (!(tkey.getValue() instanceof Integer)) {
1:2bc809f: 
1:2bc809f: 			return getCorrectObject(tkey.getValue()).setIdentity(key);
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		// potentially pretend to wait and potentally behave as not found.
1:2bc809f: 		if (!dummySet(tkey))
1:2bc809f: 			return null;
1:2bc809f: 		keyValue = tkey;
1:2bc809f: 
1:2bc809f: 		return this;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		@exception StandardException  Standard Derby Error policy
1:2bc809f: 	*/
1:2bc809f: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException {
1:2bc809f: 		super.createIdentity(key, createParameter);
1:2bc809f: 
1:2bc809f: 		T_Key tkey = (T_Key) key;	// instanceof check provided by superclass
1:2bc809f: 
1:2bc809f: 		if (!(tkey.getValue() instanceof Integer)) {
1:2bc809f: 
1:2bc809f: 			return getCorrectObject(tkey.getValue()).createIdentity(key, createParameter);
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 		// potentially pretend to wait and potentally behave as not found.
1:2bc809f: 		if (!dummySet(tkey))
1:2bc809f: 			return null;
1:2bc809f: 
1:2bc809f: 		keyValue = tkey;
1:2bc809f: 
1:2bc809f: 		return this;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Put the object into the No Identity state. 
1:2bc809f: 
1:2bc809f: 		<BR> MT - single thread required - Method must only be called be cache manager
1:2bc809f: 		and the cache manager will guarantee only one thread can be calling it.
1:2bc809f: 
1:2bc809f: 	*/
1:2bc809f: 	public void clearIdentity() {
1:2bc809f: 		keyValue = null;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Get the identity of this object.
1:2bc809f: 
1:2bc809f: 		<BR> MT - thread safe.
1:2bc809f: 
1:2bc809f: 	*/
1:2bc809f: 	public Object getIdentity() {
1:2bc809f: 		return keyValue;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		@exception StandardException  Standard Derby Error policy
1:2bc809f: 	*/
1:2bc809f: 	public void clean(boolean forRemove) throws StandardException {
1:2bc809f: 		super.clean(forRemove);
1:2bc809f: 	}
1:2bc809f: }
1:2bc809f: 
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_CachedInteger
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: import org.apache.derby.iapi.services.cache.*;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1: 
1: */
1: public class T_CachedInteger extends T_Cacheable {
1: 
1: 	protected T_Key		keyValue;
1: 		
1: 	public T_CachedInteger() {
1: 	}
1: 
1: 	/*
1: 	** Cacheable methods
1: 	*/
1: 
1: 
1: 	/**
1: 		@exception StandardException  Standard Derby Error policy
1: 	*/
1: 	public Cacheable setIdentity(Object key) throws StandardException {
1: 
1: 		super.setIdentity(key);
1: 
1: 		T_Key tkey = (T_Key) key;	// instanceof check provided by superclass
1: 
1: 		if (!(tkey.getValue() instanceof Integer)) {
1: 
1: 			return getCorrectObject(tkey.getValue()).setIdentity(key);
1: 		}
1: 
1: 		// potentially pretend to wait and potentally behave as not found.
1: 		if (!dummySet(tkey))
1: 			return null;
1: 		keyValue = tkey;
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 		@exception StandardException  Standard Derby Error policy
1: 	*/
1: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException {
1: 		super.createIdentity(key, createParameter);
1: 
1: 		T_Key tkey = (T_Key) key;	// instanceof check provided by superclass
1: 
1: 		if (!(tkey.getValue() instanceof Integer)) {
1: 
1: 			return getCorrectObject(tkey.getValue()).createIdentity(key, createParameter);
1: 		}
1: 
1: 
1: 		// potentially pretend to wait and potentally behave as not found.
1: 		if (!dummySet(tkey))
1: 			return null;
1: 
1: 		keyValue = tkey;
1: 
1: 		return this;
1: 	}
1: 
1: 
1: 
1: 	/**
1: 		Put the object into the No Identity state. 
1: 
1: 		<BR> MT - single thread required - Method must only be called be cache manager
1: 		and the cache manager will guarantee only one thread can be calling it.
1: 
1: 	*/
1: 	public void clearIdentity() {
1: 		keyValue = null;
1: 	}
1: 
1: 	/**
1: 		Get the identity of this object.
1: 
1: 		<BR> MT - thread safe.
1: 
1: 	*/
1: 	public Object getIdentity() {
1: 		return keyValue;
1: 	}
1: 
1: 	/**
1: 		@exception StandardException  Standard Derby Error policy
1: 	*/
1: 	public void clean(boolean forRemove) throws StandardException {
1: 		super.clean(forRemove);
1: 	}
1: }
1: 
============================================================================