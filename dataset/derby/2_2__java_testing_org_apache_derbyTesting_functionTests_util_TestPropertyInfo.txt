1:f68f62f: /*
6:f68f62f: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.util.TestPropertyInfo
1:f68f62f: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
1:f68f62f:  */
1:f68f62f: 
1:f68f62f: package org.apache.derbyTesting.functionTests.util;
1:f68f62f: 
1:69373d6: import java.util.Properties;
1:69373d6: 
1:f68f62f: import org.apache.derby.iapi.error.PublicAPI;
1:69373d6: import org.apache.derby.iapi.error.StandardException;
1:f68f62f: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1:69373d6: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:f68f62f: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:f68f62f: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:f68f62f: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:f68f62f: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:f68f62f: import org.apache.derby.iapi.store.access.ConglomerateController;
1:f68f62f: import org.apache.derby.iapi.store.access.TransactionController;
1:f68f62f: 
1:f68f62f: /**
1:f68f62f:  * This class extends PropertyInfo to provide support for viewing ALL
1:f68f62f:  * table/index properties, not just the user-visible ones.
1:f68f62f:  */
1:f68f62f: public class TestPropertyInfo
1:f68f62f: {
1:f68f62f: 
1:f68f62f:     /**
1:f68f62f:      * Get ALL the Properties associated with a given table, not just the
1:f68f62f: 	 * customer-visible ones.
1:f68f62f:      *
1:f68f62f: 	 * @param schemaName    The name of the schema that the table is in.
1:f68f62f: 	 * @param tableName     The name of the table.
1:f68f62f: 	 * 
1:f68f62f: 	 * @return Properties   The Properties associated with the specified table.
1:f68f62f:      *                      (An empty Properties is returned if the table does not exist.)
1:f68f62f:      * @exception java.sql.SQLException thrown on error
1:f68f62f:      */
1:f68f62f:     public static String getAllTableProperties(String schemaName, String tableName)
1:f68f62f:         throws java.sql.SQLException
1:f68f62f: 	{
1:f68f62f: 		Properties p =	TestPropertyInfo.getConglomerateProperties( schemaName, tableName, false );
1:f68f62f: 		if (p == null)
1:f68f62f: 			return null;
1:f68f62f: 
1:f68f62f: 		return org.apache.derbyTesting.functionTests.util.PropertyUtil.sortProperties(p);
1:f68f62f: 	}
1:f68f62f: 
1:f68f62f: /**
1:f68f62f:      * Get a specific property  associated with a given table, not just the
1:f68f62f: 	 * customer-visible ones.
1:f68f62f:      *
1:f68f62f: 	 * @param schemaName    The name of the schema that the table is in.
1:f68f62f: 	 * @param tableName     The name of the table.
1:f68f62f: 	 * 
1:f68f62f: 	 * @param key           The table property  to retrieve
1:f68f62f: 	 * @return               Property value 
1:f68f62f:      * @exception java.sql.SQLException thrown on error
1:f68f62f:      */
1:f68f62f: 	public static String getTableProperty(String schemaName, String tableName,
1:f68f62f: 										  String key) throws java.sql.SQLException
1:f68f62f: 	{
1:f68f62f: 		return TestPropertyInfo.getConglomerateProperties( schemaName, tableName, false ).getProperty(key);
1:f68f62f: 	}
1:f68f62f: 
1:f68f62f:     /**
1:f68f62f:      * Get ALL the Properties associated with a given index, not just the customer-visible ones.
1:f68f62f:      *
1:f68f62f: 	 * @param schemaName    The name of the schema that the index is in.
1:f68f62f: 	 * @param indexName     The name of the index.
1:f68f62f: 	 * 
1:f68f62f: 	 * @return Properties   The Properties associated with the specified index.
1:f68f62f:      *                      (An empty Properties is returned if the index does not exist.)
1:f68f62f:      * @exception java.sql.SQLException thrown on error
1:f68f62f:      */
1:f68f62f:     public static String getAllIndexProperties(String schemaName, String indexName)
1:f68f62f:         throws java.sql.SQLException
1:f68f62f: 	{
1:f68f62f: 		Properties p = TestPropertyInfo.getConglomerateProperties( schemaName, indexName, true );
1:f68f62f: 
1:f68f62f: 		if (p == null)
1:f68f62f: 			return null;
1:f68f62f: 
1:f68f62f: 		return org.apache.derbyTesting.functionTests.util.PropertyUtil.sortProperties(p);
1:f68f62f: 	}
1:f68f62f: 
1:f68f62f: 	/**
1:f68f62f: 	  Return the passed in Properties object with a property filtered out.
1:f68f62f: 	  This is useful for filtering system depenent properties to make
1:f68f62f: 	  test canons stable.
1:f68f62f: 	  */
1:f68f62f: 	public static Properties filter(Properties p, String filterMe)
1:f68f62f: 	{
1:f68f62f: 		p.remove(filterMe);
1:f68f62f: 		return p;
1:f68f62f: 	}
1:f68f62f: 
1:f68f62f: 	private static Properties	getConglomerateProperties( String schemaName, String conglomerateName, boolean isIndex )
1:f68f62f:         throws java.sql.SQLException
1:f68f62f: 	{
1:f68f62f: 		ConglomerateController    cc;
1:f68f62f: 		ConglomerateDescriptor    cd;
1:f68f62f: 		DataDictionary            dd;
1:f68f62f: 		Properties				  properties;
1:f68f62f: 		SchemaDescriptor		  sd;
1:f68f62f: 		TableDescriptor           td;
1:f68f62f: 		TransactionController     tc;
1:f68f62f: 		long					  conglomerateNumber;
1:f68f62f: 
1:f68f62f:         // find the language context.
1:f68f62f:         LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
1:f68f62f: 
1:f68f62f:         // Get the current transaction controller
1:f68f62f:         tc = lcc.getTransactionExecute();
1:f68f62f: 
1:f68f62f: 		try {
1:f68f62f: 
1:f68f62f: 		// find the DataDictionary
1:f68f62f: 		dd = lcc.getDataDictionary();
1:f68f62f: 
1:f68f62f: 
1:f68f62f: 		// get the SchemaDescriptor
1:f68f62f: 		sd = dd.getSchemaDescriptor(schemaName, tc, true);
1:f68f62f: 		if ( !isIndex)
1:f68f62f: 		{
1:f68f62f: 			// get the TableDescriptor for the table
1:0978789: 			td = dd.getTableDescriptor(conglomerateName, sd, tc);
1:f68f62f: 
1:f68f62f: 			// Return an empty Properties if table does not exist or if it is for a view.
1:f68f62f: 			if ((td == null) || td.getTableType() == TableDescriptor.VIEW_TYPE) { return new Properties(); }
1:f68f62f: 
1:f68f62f: 			conglomerateNumber = td.getHeapConglomerateId();
1:f68f62f: 		}
1:f68f62f: 		else
1:f68f62f: 		{
1:f68f62f: 			// get the ConglomerateDescriptor for the index
1:f68f62f: 			cd = dd.getConglomerateDescriptor(conglomerateName, sd, false);
1:f68f62f: 
1:f68f62f: 			// Return an empty Properties if index does not exist
1:f68f62f: 			if (cd == null) { return new Properties(); }
1:f68f62f: 
1:f68f62f: 			conglomerateNumber = cd.getConglomerateNumber();
1:f68f62f: 		}
1:f68f62f: 
1:f68f62f: 		cc = tc.openConglomerate(
1:f68f62f:                 conglomerateNumber,
1:f68f62f:                 false,
1:f68f62f:                 0, 
1:f68f62f:                 TransactionController.MODE_RECORD,
1:f68f62f:                 TransactionController.ISOLATION_SERIALIZABLE);
1:f68f62f: 
1:f68f62f: 		properties = cc.getInternalTablePropertySet( new Properties() );
1:f68f62f: 
1:f68f62f: 		cc.close();
1:f68f62f: 
1:f68f62f: 		} catch (StandardException se) {
1:f68f62f: 			throw PublicAPI.wrapStandardException(se);
1:f68f62f: 		}
1:f68f62f: 
1:f68f62f:         return properties;
1:f68f62f: 	}
1:f68f62f: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:0978789
/////////////////////////////////////////////////////////////////////////
1: 			td = dd.getTableDescriptor(conglomerateName, sd, tc);
commit:69373d6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.TestPropertyInfo
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.error.PublicAPI;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1: 
0: import org.apache.derby.iapi.db.PropertyInfo;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
0: import java.util.Properties;
1: 
1: /**
1:  * This class extends PropertyInfo to provide support for viewing ALL
1:  * table/index properties, not just the user-visible ones.
1:  */
1: public class TestPropertyInfo
1: {
1: 
1:     /**
1:      * Get ALL the Properties associated with a given table, not just the
1: 	 * customer-visible ones.
1:      *
1: 	 * @param schemaName    The name of the schema that the table is in.
1: 	 * @param tableName     The name of the table.
1: 	 * 
1: 	 * @return Properties   The Properties associated with the specified table.
1:      *                      (An empty Properties is returned if the table does not exist.)
1:      * @exception java.sql.SQLException thrown on error
1:      */
1:     public static String getAllTableProperties(String schemaName, String tableName)
1:         throws java.sql.SQLException
1: 	{
1: 		Properties p =	TestPropertyInfo.getConglomerateProperties( schemaName, tableName, false );
1: 		if (p == null)
1: 			return null;
1: 
1: 		return org.apache.derbyTesting.functionTests.util.PropertyUtil.sortProperties(p);
1: 	}
1: 
1: /**
1:      * Get a specific property  associated with a given table, not just the
1: 	 * customer-visible ones.
1:      *
1: 	 * @param schemaName    The name of the schema that the table is in.
1: 	 * @param tableName     The name of the table.
1: 	 * 
1: 	 * @param key           The table property  to retrieve
1: 	 * @return               Property value 
1:      * @exception java.sql.SQLException thrown on error
1:      */
1: 	public static String getTableProperty(String schemaName, String tableName,
1: 										  String key) throws java.sql.SQLException
1: 	{
1: 		return TestPropertyInfo.getConglomerateProperties( schemaName, tableName, false ).getProperty(key);
1: 	}
1: 
1:     /**
1:      * Get ALL the Properties associated with a given index, not just the customer-visible ones.
1:      *
1: 	 * @param schemaName    The name of the schema that the index is in.
1: 	 * @param indexName     The name of the index.
1: 	 * 
1: 	 * @return Properties   The Properties associated with the specified index.
1:      *                      (An empty Properties is returned if the index does not exist.)
1:      * @exception java.sql.SQLException thrown on error
1:      */
1:     public static String getAllIndexProperties(String schemaName, String indexName)
1:         throws java.sql.SQLException
1: 	{
1: 		Properties p = TestPropertyInfo.getConglomerateProperties( schemaName, indexName, true );
1: 
1: 		if (p == null)
1: 			return null;
1: 
1: 		return org.apache.derbyTesting.functionTests.util.PropertyUtil.sortProperties(p);
1: 	}
1: 
1: 	/**
1: 	  Return the passed in Properties object with a property filtered out.
1: 	  This is useful for filtering system depenent properties to make
1: 	  test canons stable.
1: 	  */
1: 	public static Properties filter(Properties p, String filterMe)
1: 	{
1: 		p.remove(filterMe);
1: 		return p;
1: 	}
1: 
1: 	private static Properties	getConglomerateProperties( String schemaName, String conglomerateName, boolean isIndex )
1:         throws java.sql.SQLException
1: 	{
1: 		ConglomerateController    cc;
1: 		ConglomerateDescriptor    cd;
1: 		DataDictionary            dd;
1: 		Properties				  properties;
1: 		SchemaDescriptor		  sd;
1: 		TableDescriptor           td;
1: 		TransactionController     tc;
1: 		long					  conglomerateNumber;
1: 
1:         // find the language context.
1:         LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
1: 
1:         // Get the current transaction controller
1:         tc = lcc.getTransactionExecute();
1: 
1: 		try {
1: 
1: 		// find the DataDictionary
1: 		dd = lcc.getDataDictionary();
1: 
1: 
1: 		// get the SchemaDescriptor
1: 		sd = dd.getSchemaDescriptor(schemaName, tc, true);
1: 		if ( !isIndex)
1: 		{
1: 			// get the TableDescriptor for the table
0: 			td = dd.getTableDescriptor(conglomerateName, sd);
1: 
1: 			// Return an empty Properties if table does not exist or if it is for a view.
1: 			if ((td == null) || td.getTableType() == TableDescriptor.VIEW_TYPE) { return new Properties(); }
1: 
1: 			conglomerateNumber = td.getHeapConglomerateId();
1: 		}
1: 		else
1: 		{
1: 			// get the ConglomerateDescriptor for the index
1: 			cd = dd.getConglomerateDescriptor(conglomerateName, sd, false);
1: 
1: 			// Return an empty Properties if index does not exist
1: 			if (cd == null) { return new Properties(); }
1: 
1: 			conglomerateNumber = cd.getConglomerateNumber();
1: 		}
1: 
1: 		cc = tc.openConglomerate(
1:                 conglomerateNumber,
1:                 false,
1:                 0, 
1:                 TransactionController.MODE_RECORD,
1:                 TransactionController.ISOLATION_SERIALIZABLE);
1: 
1: 		properties = cc.getInternalTablePropertySet( new Properties() );
1: 
1: 		cc.close();
1: 
1: 		} catch (StandardException se) {
1: 			throw PublicAPI.wrapStandardException(se);
1: 		}
1: 
1:         return properties;
1: 	}
1: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.util.TestPropertyInfo
0: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.util
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.util;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.error.PublicAPI;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
0: 
0: import org.apache.derby.iapi.db.PropertyInfo;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * This class extends PropertyInfo to provide support for viewing ALL
0:  * table/index properties, not just the user-visible ones.
0:  */
0: public class TestPropertyInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:     /**
0:      * Get ALL the Properties associated with a given table, not just the
0: 	 * customer-visible ones.
0:      *
0: 	 * @param schemaName    The name of the schema that the table is in.
0: 	 * @param tableName     The name of the table.
0: 	 * 
0: 	 * @return Properties   The Properties associated with the specified table.
0:      *                      (An empty Properties is returned if the table does not exist.)
0:      * @exception java.sql.SQLException thrown on error
0:      */
0:     public static String getAllTableProperties(String schemaName, String tableName)
0:         throws java.sql.SQLException
0: 	{
0: 		Properties p =	TestPropertyInfo.getConglomerateProperties( schemaName, tableName, false );
0: 		if (p == null)
0: 			return null;
0: 
0: 		return org.apache.derbyTesting.functionTests.util.PropertyUtil.sortProperties(p);
0: 	}
0: 
0: /**
0:      * Get a specific property  associated with a given table, not just the
0: 	 * customer-visible ones.
0:      *
0: 	 * @param schemaName    The name of the schema that the table is in.
0: 	 * @param tableName     The name of the table.
0: 	 * 
0: 	 * @param key           The table property  to retrieve
0: 	 * @return               Property value 
0:      * @exception java.sql.SQLException thrown on error
0:      */
0: 	public static String getTableProperty(String schemaName, String tableName,
0: 										  String key) throws java.sql.SQLException
0: 	{
0: 		return TestPropertyInfo.getConglomerateProperties( schemaName, tableName, false ).getProperty(key);
0: 	}
0: 
0:     /**
0:      * Get ALL the Properties associated with a given index, not just the customer-visible ones.
0:      *
0: 	 * @param schemaName    The name of the schema that the index is in.
0: 	 * @param indexName     The name of the index.
0: 	 * 
0: 	 * @return Properties   The Properties associated with the specified index.
0:      *                      (An empty Properties is returned if the index does not exist.)
0:      * @exception java.sql.SQLException thrown on error
0:      */
0:     public static String getAllIndexProperties(String schemaName, String indexName)
0:         throws java.sql.SQLException
0: 	{
0: 		Properties p = TestPropertyInfo.getConglomerateProperties( schemaName, indexName, true );
0: 
0: 		if (p == null)
0: 			return null;
0: 
0: 		return org.apache.derbyTesting.functionTests.util.PropertyUtil.sortProperties(p);
0: 	}
0: 
0: 	/**
0: 	  Return the passed in Properties object with a property filtered out.
0: 	  This is useful for filtering system depenent properties to make
0: 	  test canons stable.
0: 	  */
0: 	public static Properties filter(Properties p, String filterMe)
0: 	{
0: 		p.remove(filterMe);
0: 		return p;
0: 	}
0: 
0: 	private static Properties	getConglomerateProperties( String schemaName, String conglomerateName, boolean isIndex )
0:         throws java.sql.SQLException
0: 	{
0: 		ConglomerateController    cc;
0: 		ConglomerateDescriptor    cd;
0: 		DataDictionary            dd;
0: 		Properties				  properties;
0: 		SchemaDescriptor		  sd;
0: 		TableDescriptor           td;
0: 		TransactionController     tc;
0: 		long					  conglomerateNumber;
0: 
0:         // find the language context.
0:         LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
0: 
0:         // Get the current transaction controller
0:         tc = lcc.getTransactionExecute();
0: 
0: 		try {
0: 
0: 		// find the DataDictionary
0: 		dd = lcc.getDataDictionary();
0: 
0: 
0: 		// get the SchemaDescriptor
0: 		sd = dd.getSchemaDescriptor(schemaName, tc, true);
0: 		if ( !isIndex)
0: 		{
0: 			// get the TableDescriptor for the table
0: 			td = dd.getTableDescriptor(conglomerateName, sd);
0: 
0: 			// Return an empty Properties if table does not exist or if it is for a view.
0: 			if ((td == null) || td.getTableType() == TableDescriptor.VIEW_TYPE) { return new Properties(); }
0: 
0: 			conglomerateNumber = td.getHeapConglomerateId();
0: 		}
0: 		else
0: 		{
0: 			// get the ConglomerateDescriptor for the index
0: 			cd = dd.getConglomerateDescriptor(conglomerateName, sd, false);
0: 
0: 			// Return an empty Properties if index does not exist
0: 			if (cd == null) { return new Properties(); }
0: 
0: 			conglomerateNumber = cd.getConglomerateNumber();
0: 		}
0: 
0: 		cc = tc.openConglomerate(
0:                 conglomerateNumber,
0:                 false,
0:                 0, 
0:                 TransactionController.MODE_RECORD,
0:                 TransactionController.ISOLATION_SERIALIZABLE);
0: 
0: 		properties = cc.getInternalTablePropertySet( new Properties() );
0: 
0: 		cc.close();
0: 
0: 		} catch (StandardException se) {
0: 			throw PublicAPI.wrapStandardException(se);
0: 		}
0: 
0:         return properties;
0: 	}
0: }
============================================================================