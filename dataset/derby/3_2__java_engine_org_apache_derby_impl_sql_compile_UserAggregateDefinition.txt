1:c8603c4: /*
10:c8603c4: 
1:c8603c4:    Derby - Class org.apache.derby.impl.sql.compile.UserAggregateDefinition
1:c8603c4: 
1:c8603c4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c8603c4:    contributor license agreements.  See the NOTICE file distributed with
1:c8603c4:    this work for additional information regarding copyright ownership.
1:c8603c4:    The ASF licenses this file to you under the Apache License, Version 2.0
1:c8603c4:    (the "License"); you may not use this file except in compliance with
1:c8603c4:    the License.  You may obtain a copy of the License at
1:c8603c4: 
1:c8603c4:       http://www.apache.org/licenses/LICENSE-2.0
1:c8603c4: 
1:c8603c4:    Unless required by applicable law or agreed to in writing, software
1:c8603c4:    distributed under the License is distributed on an "AS IS" BASIS,
1:c8603c4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c8603c4:    See the License for the specific language governing permissions and
1:c8603c4:    limitations under the License.
1:c8603c4: 
1:c8603c4:  */
1:c8603c4: 
1:c8603c4: package org.apache.derby.impl.sql.compile;
1:c8603c4: 
1:c8603c4: import org.apache.derby.catalog.types.AggregateAliasInfo;
1:c8603c4: import org.apache.derby.iapi.error.StandardException;
1:c8603c4: import org.apache.derby.iapi.reference.ClassName;
1:c8603c4: import org.apache.derby.iapi.reference.SQLState;
1:2cf546d: import org.apache.derby.iapi.services.context.ContextManager;
1:c8603c4: import org.apache.derby.iapi.services.context.ContextService;
1:c8603c4: import org.apache.derby.iapi.services.loader.ClassFactory;
1:c8603c4: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:2cf546d: import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
1:c8603c4: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1:c8603c4: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:c8603c4: import org.apache.derby.iapi.types.JSQLType;
1:c8603c4: 
1:c8603c4: /**
1:c8603c4:  * Definition for user-defined aggregates.
1:c8603c4:  *
1:c8603c4:  */
1:3bb140c: class UserAggregateDefinition implements AggregateDefinition
3:c8603c4: {
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // CONSTANTS
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:c8603c4:     // the Aggregator interface has 3 parameter types
1:c8603c4:     private static  final   int INPUT_TYPE = 0;
1:c8603c4:     private static  final   int RETURN_TYPE = INPUT_TYPE + 1;
1:c8603c4:     private static  final   int AGGREGATOR_TYPE = RETURN_TYPE + 1;
1:c8603c4:     private static  final   int AGGREGATOR_PARAM_COUNT = AGGREGATOR_TYPE + 1;
1:c8603c4: 
1:f798a41:     private static  final   String  DERBY_BYTE_ARRAY_NAME = "byte[]";
1:f798a41: 
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // STATE
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:c8603c4:     private AliasDescriptor _alias;
1:c8603c4: 
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // CONSTRUCTOR
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:c8603c4: 	/**
1:c8603c4: 	 * Conjure out of thin air.
1:c8603c4: 	 */
1:4469400:     public UserAggregateDefinition( AliasDescriptor alias )
1:c8603c4:     {
1:c8603c4:         _alias = alias;
2:c8603c4:     }
1:c8603c4: 
1:f3c6217:     ///////////////////////////////////////////////////////////////////////////////////
1:f3c6217:     //
1:f3c6217:     // BEHAVIOR
1:f3c6217:     //
1:f3c6217:     ///////////////////////////////////////////////////////////////////////////////////
1:f3c6217: 
1:f3c6217:     /** Get the wrapped alias descriptor */
1:f3c6217:     public  AliasDescriptor getAliasDescriptor() { return _alias; }
1:f3c6217: 
1:c8603c4: 	/**
1:c8603c4: 	 * Determines the result datatype and verifies that the input datatype is correct.
1:c8603c4: 	 *
1:c8603c4: 	 * @param inputType	the input type
1:c8603c4: 	 * @param aggregatorClass (Output arg) the name of the Derby execution-time class which wraps the aggregate logic
1:c8603c4: 	 *
1:c8603c4: 	 * @return the result type of the user-defined aggregator
1:c8603c4: 	 */
1:c8603c4: 	public final DataTypeDescriptor	getAggregator
1:c8603c4:         ( DataTypeDescriptor inputType, StringBuffer aggregatorClass )
2:c8603c4:         throws StandardException
1:c8603c4: 	{
1:c8603c4: 		try
1:c8603c4: 		{
1:c8603c4: 			CompilerContext cc = (CompilerContext)
1:a0dbbd7: 				QueryTreeNode.getContext(CompilerContext.CONTEXT_ID);
1:c8603c4:             ClassFactory    classFactory = cc.getClassFactory();
1:2cf546d:             TypeCompilerFactory tcf = cc.getTypeCompilerFactory();
1:c8603c4: 
1:71c8e86:             Class<?>   derbyAggregatorInterface = classFactory.loadApplicationClass( "org.apache.derby.agg.Aggregator" );
1:71c8e86:             Class<?>   userAggregatorClass = classFactory.loadApplicationClass( _alias.getJavaClassName() );
1:c8603c4: 
1:d861c23:             Class[][]   typeBounds = classFactory.getClassInspector().getTypeBounds
1:0ad97c9:                 ( derbyAggregatorInterface, userAggregatorClass );
1:c8603c4: 
1:c8603c4:             if (
1:d861c23:                 (typeBounds == null) ||
1:d861c23:                 (typeBounds.length != AGGREGATOR_PARAM_COUNT) ||
1:d861c23:                 (typeBounds[ INPUT_TYPE ] == null) ||
1:d861c23:                 (typeBounds[ RETURN_TYPE ] == null)
1:d861c23:                 )
1:c8603c4:             {
3:d861c23:                 throw StandardException.newException
1:d861c23:                     (
1:c8603c4:                      SQLState.LANG_ILLEGAL_UDA_CLASS,
1:d861c23:                      _alias.getSchemaName(),
1:d861c23:                      _alias.getName(),
1:d861c23:                      userAggregatorClass.getName()
1:d861c23:                      );
1:c8603c4:             }
1:0ad97c9: 
1:e1f49ca:             Class<?>[] genericParameterTypes =
1:e1f49ca:                 classFactory.getClassInspector().getGenericParameterTypes(
1:e1f49ca:                     derbyAggregatorInterface, userAggregatorClass);
1:c8603c4: 
1:e1f49ca:             if ( genericParameterTypes == null ) {
1:e1f49ca:                 genericParameterTypes = new Class<?>[ AGGREGATOR_PARAM_COUNT ];
1:c8603c4:             }
1:c8603c4: 
1:c8603c4:             AggregateAliasInfo  aai = (AggregateAliasInfo) _alias.getAliasInfo();
1:c8603c4:             DataTypeDescriptor  expectedInputType = DataTypeDescriptor.getType( aai.getForType() );
1:c8603c4:             DataTypeDescriptor  expectedReturnType = DataTypeDescriptor.getType( aai.getReturnType() );
1:71c8e86:             Class<?>       expectedInputClass = getJavaClass( classFactory, expectedInputType );
1:71c8e86:             Class<?>       expectedReturnClass = getJavaClass( classFactory, expectedReturnType );
1:d861c23: 
1:2cf546d:             // the input operand must be coercible to the expected input type of the aggregate
1:2cf546d:             if ( !tcf.getTypeCompiler( expectedInputType.getTypeId() ).storable( inputType.getTypeId(), classFactory ) )
1:2cf546d:             { return null; }
1:d861c23:             
1:d861c23:             //
1:d861c23:             // Make sure that the declared input type of the UDA actually falls within
1:d861c23:             // the type bounds of the Aggregator implementation.
1:d861c23:             //
1:d861c23:             Class[] inputBounds = typeBounds[ INPUT_TYPE ];
1:d861c23:             for ( int i = 0; i < inputBounds.length; i++ )
1:d861c23:             {
1:0ad97c9:                 vetCompatibility
1:71c8e86:                     ( (Class<?>) inputBounds[ i ], expectedInputClass, SQLState.LANG_UDA_WRONG_INPUT_TYPE );
1:0ad97c9:             }
1:0ad97c9:             if ( genericParameterTypes[ INPUT_TYPE ] != null )
1:0ad97c9:             {
1:0ad97c9:                 vetCompatibility
1:0ad97c9:                     ( genericParameterTypes[ INPUT_TYPE ], expectedInputClass, SQLState.LANG_UDA_WRONG_INPUT_TYPE );
1:d861c23:             }
1:d861c23: 
1:d861c23:             //
1:d861c23:             // Make sure that the declared return type of the UDA actually falls within
1:d861c23:             // the type bounds of the Aggregator implementation.
1:d861c23:             //
1:d861c23:             Class[] returnBounds = typeBounds[ RETURN_TYPE ];
1:d861c23:             for ( int i = 0; i < returnBounds.length; i++ )
1:d861c23:             {
1:0ad97c9:                 vetCompatibility
1:0ad97c9:                     ( returnBounds[ i ], expectedReturnClass, SQLState.LANG_UDA_WRONG_RETURN_TYPE );
1:0ad97c9:             }
1:0ad97c9:             if ( genericParameterTypes[ RETURN_TYPE ] != null )
1:0ad97c9:             {
1:0ad97c9:                 vetCompatibility
1:0ad97c9:                     ( genericParameterTypes[ RETURN_TYPE ], expectedReturnClass, SQLState.LANG_UDA_WRONG_RETURN_TYPE );
1:d861c23:             }
1:d861c23: 
1:c8603c4:             aggregatorClass.append( ClassName.UserDefinedAggregator );
1:c8603c4: 
1:c8603c4:             return expectedReturnType;
1:c8603c4: 		}
1:c8603c4: 		catch (ClassNotFoundException cnfe) { throw aggregatorInstantiation( cnfe ); }
1:c8603c4: 	}
1:c8603c4: 
1:0ad97c9:     /**
1:0ad97c9:      * Verify that an actual type is compatible with the expected type.
1:0ad97c9:      */
1:71c8e86:     private void    vetCompatibility( Class<?> actualClass, Class<?> expectedClass, String sqlState )
1:0ad97c9:         throws StandardException
1:0ad97c9:     {
1:0ad97c9:         if ( !actualClass.isAssignableFrom( expectedClass ) )
1:0ad97c9:         {
1:0ad97c9:             throw StandardException.newException
1:0ad97c9:                 (
1:0ad97c9:                  sqlState,
1:0ad97c9:                  _alias.getSchemaName(),
1:0ad97c9:                  _alias.getName(),
1:0ad97c9:                  expectedClass.toString(),
1:0ad97c9:                  actualClass.toString()
1:0ad97c9:                  );
1:0ad97c9:         }
1:0ad97c9:     }
1:0ad97c9: 
1:2cf546d: 	/**
1:2cf546d: 	 * Wrap the input operand in an implicit CAST node as necessary in order to
1:2cf546d:      * coerce it the correct type for the aggregator. Return null if no cast is necessary.
1:2cf546d: 	 */
1:3bb140c:     final ValueNode castInputValue
1:3bb140c:         ( ValueNode inputValue, ContextManager cm )
1:2cf546d:         throws StandardException
1:2cf546d: 	{
1:2cf546d:         AggregateAliasInfo  aai = (AggregateAliasInfo) _alias.getAliasInfo();
1:2cf546d:         DataTypeDescriptor  expectedInputType = DataTypeDescriptor.getType( aai.getForType() );
1:2cf546d:         DataTypeDescriptor  actualInputType = inputValue.getTypeServices();
1:2cf546d: 
1:2cf546d:         // no cast needed if the types match exactly
1:2cf546d:         if ( expectedInputType.isExactTypeAndLengthMatch( actualInputType ) ) { return null; }
1:2cf546d:         else
1:2cf546d:         {
1:3bb140c:             return StaticMethodCallNode.makeCast(
1:3bb140c:                 inputValue, expectedInputType, cm);
1:2cf546d:         }
1:2cf546d:     }
1:2cf546d:     
1:c8603c4:     /**
1:c8603c4:      * Get the Java class corresponding to a Derby datatype.
1:c8603c4:      */
1:e1f49ca:     private Class<?> getJavaClass( ClassFactory classFactory, DataTypeDescriptor dtd )
1:c8603c4:         throws StandardException, ClassNotFoundException
1:c8603c4:     {
1:c8603c4:         JSQLType    jsqlType = new JSQLType( dtd );
1:c8603c4:         String  javaClassName = MethodCallNode.getObjectTypeName( jsqlType, null );
1:c8603c4: 
1:f798a41:         //
1:f798a41:         // The real class name of byte[] is [B. Class.forName( "byte[]" ) will throw a
1:f798a41:         // ClassNotFoundException.
1:f798a41:         //
1:f798a41:         if ( DERBY_BYTE_ARRAY_NAME.equals( javaClassName ) )
1:f798a41:         { javaClassName = byte[].class.getName(); }
1:f798a41:         
1:f798a41:         return classFactory.loadApplicationClass( javaClassName );
1:c8603c4:     }
1:c8603c4: 
1:c8603c4:     /**
1:c8603c4:      * Make a "Could not instantiate aggregator" exception.
1:c8603c4:      */
1:c8603c4:     private StandardException   aggregatorInstantiation( Throwable t )
1:c8603c4:     {
1:c8603c4:         return StandardException.newException
1:d861c23:             (
1:c8603c4:              SQLState.LANG_UDA_INSTANTIATION,
1:c8603c4:              t,
1:c8603c4:              _alias.getJavaClassName(),
1:d861c23:              _alias.getSchemaName(),
1:d861c23:              _alias.getName(),
1:c8603c4:              t.getMessage()
4:c8603c4:              );
1:c8603c4:     }
1:2cf546d: 
1:c8603c4:     
1:c8603c4: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:     public UserAggregateDefinition( AliasDescriptor alias )
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: 				QueryTreeNode.getContext(CompilerContext.CONTEXT_ID);
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:             Class<?>   derbyAggregatorInterface = classFactory.loadApplicationClass( "org.apache.derby.agg.Aggregator" );
1:             Class<?>   userAggregatorClass = classFactory.loadApplicationClass( _alias.getJavaClassName() );
/////////////////////////////////////////////////////////////////////////
1:             Class<?>       expectedInputClass = getJavaClass( classFactory, expectedInputType );
1:             Class<?>       expectedReturnClass = getJavaClass( classFactory, expectedReturnType );
/////////////////////////////////////////////////////////////////////////
1:                     ( (Class<?>) inputBounds[ i ], expectedInputClass, SQLState.LANG_UDA_WRONG_INPUT_TYPE );
/////////////////////////////////////////////////////////////////////////
1:     private void    vetCompatibility( Class<?> actualClass, Class<?> expectedClass, String sqlState )
commit:0ad97c9
/////////////////////////////////////////////////////////////////////////
0:             Class[]   genericParameterTypes = classFactory.getClassInspector().getGenericParameterTypes
1:                 ( derbyAggregatorInterface, userAggregatorClass );
0:             if ( genericParameterTypes == null ) { genericParameterTypes = new Class[ AGGREGATOR_PARAM_COUNT ]; }
1: 
/////////////////////////////////////////////////////////////////////////
1:                 vetCompatibility
0:                     ( inputBounds[ i ], expectedInputClass, SQLState.LANG_UDA_WRONG_INPUT_TYPE );
1:             }
1:             if ( genericParameterTypes[ INPUT_TYPE ] != null )
1:             {
1:                 vetCompatibility
1:                     ( genericParameterTypes[ INPUT_TYPE ], expectedInputClass, SQLState.LANG_UDA_WRONG_INPUT_TYPE );
/////////////////////////////////////////////////////////////////////////
1:                 vetCompatibility
1:                     ( returnBounds[ i ], expectedReturnClass, SQLState.LANG_UDA_WRONG_RETURN_TYPE );
1:             }
1:             if ( genericParameterTypes[ RETURN_TYPE ] != null )
1:             {
1:                 vetCompatibility
1:                     ( genericParameterTypes[ RETURN_TYPE ], expectedReturnClass, SQLState.LANG_UDA_WRONG_RETURN_TYPE );
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Verify that an actual type is compatible with the expected type.
1:      */
0:     private void    vetCompatibility( Class actualClass, Class expectedClass, String sqlState )
1:         throws StandardException
1:     {
1:         if ( !actualClass.isAssignableFrom( expectedClass ) )
1:         {
1:             throw StandardException.newException
1:                 (
1:                  sqlState,
1:                  _alias.getSchemaName(),
1:                  _alias.getName(),
1:                  expectedClass.toString(),
1:                  actualClass.toString()
1:                  );
1:         }
1:     }
1: 
commit:b3834d3
/////////////////////////////////////////////////////////////////////////
0:             Class   userAggregatorClass = classFactory.loadApplicationClass( _alias.getJavaClassName() );
commit:2cf546d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.compile.NodeFactory;
1: import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
/////////////////////////////////////////////////////////////////////////
1:             TypeCompilerFactory tcf = cc.getTypeCompilerFactory();
/////////////////////////////////////////////////////////////////////////
1:             // the input operand must be coercible to the expected input type of the aggregate
1:             if ( !tcf.getTypeCompiler( expectedInputType.getTypeId() ).storable( inputType.getTypeId(), classFactory ) )
1:             { return null; }
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Wrap the input operand in an implicit CAST node as necessary in order to
1:      * coerce it the correct type for the aggregator. Return null if no cast is necessary.
1: 	 */
0: 	public final ValueNode	castInputValue
0:         ( ValueNode inputValue, NodeFactory nodeFactory, ContextManager cm )
1:         throws StandardException
1: 	{
1:         AggregateAliasInfo  aai = (AggregateAliasInfo) _alias.getAliasInfo();
1:         DataTypeDescriptor  expectedInputType = DataTypeDescriptor.getType( aai.getForType() );
1:         DataTypeDescriptor  actualInputType = inputValue.getTypeServices();
1: 
1:         // no cast needed if the types match exactly
1:         if ( expectedInputType.isExactTypeAndLengthMatch( actualInputType ) ) { return null; }
1:         else
1:         {
0:             return StaticMethodCallNode.makeCast( inputValue, expectedInputType, nodeFactory, cm );
1:         }
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1: 
commit:f798a41
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String  DERBY_BYTE_ARRAY_NAME = "byte[]";
1: 
/////////////////////////////////////////////////////////////////////////
0:             Class       expectedInputClass = getJavaClass( classFactory, expectedInputType );
0:             Class       expectedReturnClass = getJavaClass( classFactory, expectedReturnType );
/////////////////////////////////////////////////////////////////////////
0:     private Class   getJavaClass( ClassFactory classFactory, DataTypeDescriptor dtd )
1:         //
1:         // The real class name of byte[] is [B. Class.forName( "byte[]" ) will throw a
1:         // ClassNotFoundException.
1:         //
1:         if ( DERBY_BYTE_ARRAY_NAME.equals( javaClassName ) )
1:         { javaClassName = byte[].class.getName(); }
1:         
1:         return classFactory.loadApplicationClass( javaClassName );
commit:d861c23
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             Class[][]   typeBounds = classFactory.getClassInspector().getTypeBounds
1:                 (typeBounds == null) ||
1:                 (typeBounds.length != AGGREGATOR_PARAM_COUNT) ||
1:                 (typeBounds[ INPUT_TYPE ] == null) ||
1:                 (typeBounds[ RETURN_TYPE ] == null)
1:                 )
1:                 throw StandardException.newException
1:                      userAggregatorClass.getName()
0:             // the input operand must be the expected input type of the aggregate
0:             if ( !inputType.getTypeId().equals( expectedInputType.getTypeId() ) ) { return null; }
1:             
1:             //
1:             // Make sure that the declared input type of the UDA actually falls within
1:             // the type bounds of the Aggregator implementation.
1:             //
1:             Class[] inputBounds = typeBounds[ INPUT_TYPE ];
1:             for ( int i = 0; i < inputBounds.length; i++ )
0:                 Class   inputBound = inputBounds[ i ];
1:                 
0:                 if ( !inputBound.isAssignableFrom( expectedInputClass ) )
1:                 {
1:                     throw StandardException.newException
1:                         (
0:                          SQLState.LANG_UDA_WRONG_INPUT_TYPE,
1:                          _alias.getSchemaName(),
1:                          _alias.getName(),
0:                          expectedInputClass.toString(),
0:                          inputBound.toString()
1:                          );
1:                 }
1: 
1:             //
1:             // Make sure that the declared return type of the UDA actually falls within
1:             // the type bounds of the Aggregator implementation.
1:             //
1:             Class[] returnBounds = typeBounds[ RETURN_TYPE ];
1:             for ( int i = 0; i < returnBounds.length; i++ )
0:                 Class   returnBound = returnBounds[ i ];
1:                 
0:                 if ( !returnBound.isAssignableFrom( expectedReturnClass ) )
1:                 {
1:                     throw StandardException.newException
1:                         (
0:                          SQLState.LANG_UDA_WRONG_RETURN_TYPE,
1:                          _alias.getSchemaName(),
1:                          _alias.getName(),
0:                          expectedReturnClass.toString(),
0:                          returnBound.toString()
1:                 }
commit:f3c6217
/////////////////////////////////////////////////////////////////////////
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Get the wrapped alias descriptor */
1:     public  AliasDescriptor getAliasDescriptor() { return _alias; }
1: 
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.UserAggregateDefinition
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import java.lang.reflect.Method;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.catalog.TypeDescriptor;
1: import org.apache.derby.catalog.types.AggregateAliasInfo;
0: import org.apache.derby.iapi.types.TypeId;
1: import org.apache.derby.iapi.types.JSQLType;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
1: 
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.ClassName;
1: 
1: /**
1:  * Definition for user-defined aggregates.
1:  *
1:  */
0: public class UserAggregateDefinition implements AggregateDefinition 
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     // the Aggregator interface has 3 parameter types
1:     private static  final   int INPUT_TYPE = 0;
1:     private static  final   int RETURN_TYPE = INPUT_TYPE + 1;
1:     private static  final   int AGGREGATOR_TYPE = RETURN_TYPE + 1;
1:     private static  final   int AGGREGATOR_PARAM_COUNT = AGGREGATOR_TYPE + 1;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private AliasDescriptor _alias;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Conjure out of thin air.
1: 	 */
0: 	public UserAggregateDefinition( AliasDescriptor alias )
1:     {
1:         _alias = alias;
1:     }
1: 
1: 	/**
1: 	 * Determines the result datatype and verifies that the input datatype is correct.
1: 	 *
1: 	 * @param inputType	the input type
1: 	 * @param aggregatorClass (Output arg) the name of the Derby execution-time class which wraps the aggregate logic
1: 	 *
1: 	 * @return the result type of the user-defined aggregator
1: 	 */
1: 	public final DataTypeDescriptor	getAggregator
1:         ( DataTypeDescriptor inputType, StringBuffer aggregatorClass )
1:         throws StandardException
1: 	{
1: 		try
1: 		{
0: 			TypeId compType = inputType.getTypeId();
1: 		
1: 			CompilerContext cc = (CompilerContext)
0: 				ContextService.getContext(CompilerContext.CONTEXT_ID);
0: 			TypeCompilerFactory tcf = cc.getTypeCompilerFactory();
0: 			TypeCompiler tc = tcf.getTypeCompiler(compType);
1:             ClassFactory    classFactory = cc.getClassFactory();
1: 
0:             Class   userAggregatorClass = classFactory.loadApplicationClass( _alias.getJavaClassName() );
0:             Class   derbyAggregatorInterface = classFactory.loadApplicationClass( "org.apache.derby.agg.Aggregator" );
1: 
0:             Class[] aggregatorTypes = classFactory.getClassInspector().getGenericParameterTypes
0:                 ( derbyAggregatorInterface, userAggregatorClass );
1: 
1:             if (
0:                 !derbyAggregatorInterface.isAssignableFrom( userAggregatorClass ) ||
0:                 (aggregatorTypes == null) ||
0:                 (aggregatorTypes.length != AGGREGATOR_PARAM_COUNT) ||
0:                 (aggregatorTypes[ INPUT_TYPE ] == null) ||
0:                 (aggregatorTypes[ RETURN_TYPE ] == null)
0:                )
1:             {
0: 				throw StandardException.newException
0:                     (
1:                      SQLState.LANG_ILLEGAL_UDA_CLASS,
0:                      _alias.getSchemaName(),
0:                      _alias.getName(),
0:                      _alias.getJavaClassName()
1:                      );
1:             }
1: 
0:             Class   actualInputClass = aggregatorTypes[ INPUT_TYPE ];
0:             Class   actualReturnClass = aggregatorTypes[ RETURN_TYPE ];
1: 
1:             AggregateAliasInfo  aai = (AggregateAliasInfo) _alias.getAliasInfo();
1:             DataTypeDescriptor  expectedInputType = DataTypeDescriptor.getType( aai.getForType() );
1:             DataTypeDescriptor  expectedReturnType = DataTypeDescriptor.getType( aai.getReturnType() );
0:             Class       expectedInputClass = getJavaClass( expectedInputType );
0:             Class       expectedReturnClass = getJavaClass( expectedReturnType );
1: 
0:             // check that the aggregator has the correct input and return types
0:             if ( actualInputClass != expectedInputClass )
1:             {
0: 				throw StandardException.newException
0:                     (
0:                      SQLState.LANG_UDA_WRONG_INPUT_TYPE,
0:                      _alias.getSchemaName(),
0:                      _alias.getName(),
0:                      expectedInputClass.toString(),
0:                      actualInputClass.toString()
1:                      );
1:             }
1: 		
0:             if ( actualReturnClass != expectedReturnClass )
1:             {
0: 				throw StandardException.newException
0:                     (
0:                      SQLState.LANG_UDA_WRONG_RETURN_TYPE,
0:                      _alias.getSchemaName(),
0:                      _alias.getName(),
0:                      expectedReturnClass.toString(),
0:                      actualReturnClass.toString()
1:                      );
1:             }
1: 
1:             aggregatorClass.append( ClassName.UserDefinedAggregator );
1: 
1:             return expectedReturnType;
1: 		}
1: 		catch (ClassNotFoundException cnfe) { throw aggregatorInstantiation( cnfe ); }
1: 	}
1: 
1:     /**
1:      * Get the Java class corresponding to a Derby datatype.
1:      */
0:     private Class   getJavaClass( DataTypeDescriptor dtd )
1:         throws StandardException, ClassNotFoundException
1:     {
1:         JSQLType    jsqlType = new JSQLType( dtd );
1:         String  javaClassName = MethodCallNode.getObjectTypeName( jsqlType, null );
1: 
0:         return Class.forName( javaClassName );
1:     }
1: 
1:     /**
1:      * Make a "Could not instantiate aggregator" exception.
1:      */
1:     private StandardException   aggregatorInstantiation( Throwable t )
1:         throws StandardException
1:     {
1:         return StandardException.newException
0:             (
1:              SQLState.LANG_UDA_INSTANTIATION,
1:              t,
1:              _alias.getJavaClassName(),
0:              _alias.getSchemaName(),
0:              _alias.getName(),
1:              t.getMessage()
1:              );
1:     }
1:     
1: }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
1:             Class<?>[] genericParameterTypes =
1:                 classFactory.getClassInspector().getGenericParameterTypes(
1:                     derbyAggregatorInterface, userAggregatorClass);
0: 
1:             if ( genericParameterTypes == null ) {
1:                 genericParameterTypes = new Class<?>[ AGGREGATOR_PARAM_COUNT ];
0:             }
/////////////////////////////////////////////////////////////////////////
1:     private Class<?> getJavaClass( ClassFactory classFactory, DataTypeDescriptor dtd )
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.catalog.types.AggregateAliasInfo;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.JSQLType;
1: class UserAggregateDefinition implements AggregateDefinition
/////////////////////////////////////////////////////////////////////////
0:     UserAggregateDefinition( AliasDescriptor alias )
/////////////////////////////////////////////////////////////////////////
1:     final ValueNode castInputValue
1:         ( ValueNode inputValue, ContextManager cm )
/////////////////////////////////////////////////////////////////////////
1:             return StaticMethodCallNode.makeCast(
1:                 inputValue, expectedInputType, cm);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3d1bc57
/////////////////////////////////////////////////////////////////////////
============================================================================