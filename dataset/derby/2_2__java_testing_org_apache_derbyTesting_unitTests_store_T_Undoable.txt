1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.store.T_DaemonService
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.store;
1:2bc809f: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.store.raw.*;
1:2bc809f: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:2bc809f: import org.apache.derby.iapi.services.io.Formatable;
1:2bc809f: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:2bc809f: import org.apache.derby.iapi.util.ByteArray;
1:2bc809f: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1:2bc809f: import java.io.IOException;
1:2bc809f: import java.io.IOException;
1:2bc809f: import java.io.InputStream;
1:2bc809f: import java.io.ObjectInput;
1:2bc809f: import java.io.ObjectOutput;
1:2bc809f: import java.io.StreamCorruptedException;
1:2bc809f: import java.util.Vector;
1:2bc809f: import java.io.OutputStream;
1:2bc809f: import java.io.InputStream;
1:2bc809f: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:2bc809f: 
1:2bc809f: //
1:2bc809f: // Tracing can be done like so (commented out)
1:2bc809f: //import org.apache.derbyTesting.unitTests.util.MsgTrace;
1:2bc809f: 
1:2bc809f: public class T_Undoable
1:2bc809f: implements Undoable
1:2bc809f: {
1:2bc809f: 	static final int REMOVE_NONE  = 0;
1:2bc809f: 	static final int REMOVE_ME    = 1;
1:2bc809f: 	static final int REMOVE_TO_ME = 2;
1:2bc809f: 
1:2bc809f: 	protected ByteArray preparedLog;
1:2bc809f: 	protected DynamicByteArrayOutputStream logBuffer;
1:2bc809f: 
1:2bc809f: 	GlobalTransactionId tid = null;
1:2bc809f: 	int tranSeq = -1;
1:2bc809f: 	int recordSeq = -1;
1:2bc809f: 	int removeWhat = REMOVE_NONE;
1:2bc809f: 	int LWMTranSeq = 0;
1:2bc809f: 	boolean rollBack = true;
1:2bc809f: 	int lastRecord = -1;
1:2bc809f: 	boolean lastTransaction = false;
1:2bc809f: 	int optionalDataLen;
1:2bc809f: 	boolean verbose;
1:2bc809f: 
1:2bc809f: 	// no-arg constructor, required by Formatable 
1:2bc809f: 	public T_Undoable() { super(); }
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	T_Undoable(GlobalTransactionId tid, int tranSeq, int recordSeq,
1:2bc809f: 			   int removeWhat, int LWMTranSeq,
1:2bc809f: 			   boolean rollBack, int lastRecord, boolean lastTransaction,
1:2bc809f: 			   int optionalDataLen,boolean verbose)
1:2bc809f: 		 throws T_Fail
1:2bc809f: 	{
1:2bc809f: //MsgTrace.traceString("{{{tu.new");
1:2bc809f: 		T_Fail.T_ASSERT((removeWhat >= REMOVE_NONE) &&
1:2bc809f: 							 (removeWhat <= REMOVE_TO_ME));
1:2bc809f: 		T_Fail.T_ASSERT(rollBack == (recordSeq < 0));
1:2bc809f: 		T_Fail.T_ASSERT(rollBack == (tranSeq < 0));
1:2bc809f: 		this.tid = tid;
1:2bc809f: 		this.tranSeq = tranSeq;
1:2bc809f: 		this.recordSeq = recordSeq;
1:2bc809f: 		this.removeWhat = removeWhat;
1:2bc809f: 		this.LWMTranSeq = LWMTranSeq;
1:2bc809f: 		this.rollBack = rollBack;
1:2bc809f: 		this.lastRecord = lastRecord;
1:2bc809f: 		this.lastTransaction = lastTransaction;
1:2bc809f: 		this.optionalDataLen = optionalDataLen;
1:2bc809f: 		this.verbose = verbose;
1:2bc809f: 		
1:2bc809f: 		try {
1:2bc809f: 			writeOptionalDataToBuffer();
1:2bc809f: 		} catch (IOException ioe) {
1:2bc809f: 			throw T_Fail.exceptionFail(ioe);
1:2bc809f: 		} catch (StandardException se) {
1:2bc809f: 			throw T_Fail.exceptionFail(se);
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: //MsgTrace.traceString("}}}tu.new");
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: 	
1:2bc809f: 	private void writeOptionalDataToBuffer()
1:2bc809f: 		throws StandardException, IOException
1:2bc809f: 	{
1:2bc809f: 
1:2bc809f: 		if (logBuffer == null) {
1:2bc809f: 			// YYZ: need to revisit this.  Do we really want to allocate this much for a buffer every time?
1:2bc809f: 			logBuffer = new DynamicByteArrayOutputStream(1024); // init size 1K
1:2bc809f: 		} else {
1:2bc809f: 			logBuffer.reset();
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		int optionalDataStart = logBuffer.getPosition();
1:2bc809f: 
1:2bc809f: 		if (SanityManager.DEBUG) {
1:2bc809f: 			SanityManager.ASSERT(optionalDataStart == 0,
1:2bc809f: 				"Buffer for writing the optional data should start at position 0");
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: //MsgTrace.traceString("{{{tu.writeOpetionalData");
1:2bc809f: 		if (optionalDataLen > 0)
1:2bc809f: 		{
1:2bc809f: 			byte[] buf = new byte[optionalDataLen];
1:2bc809f: 			for (int ix=0;ix <optionalDataLen;ix++)
1:2bc809f: 				buf[ix] = (byte)ix;
1:2bc809f: 			logBuffer.write(buf);
1:2bc809f: 		}
1:2bc809f: //MsgTrace.traceString("}}}tu.writeOpetionalData");
1:2bc809f: 
1:2bc809f: 		int optionalDataLength = logBuffer.getPosition() - optionalDataStart;
1:2bc809f: 		
1:2bc809f: 		if (SanityManager.DEBUG) {
1:2bc809f: 			if (optionalDataLength != logBuffer.getUsed())
1:2bc809f: 				SanityManager.THROWASSERT("wrong optional data length, optionalDataLength = "
1:2bc809f: 					+ optionalDataLength + ", logBuffer.getUsed() = " + logBuffer.getUsed());
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		// set the position to the beginning of the buffer
1:2bc809f: 		logBuffer.setPosition(optionalDataStart);
1:2bc809f: 
1:2bc809f: 		this.preparedLog = new ByteArray (logBuffer.getByteArray(), optionalDataStart,
1:2bc809f: 			optionalDataLength);
1:2bc809f: 	}
1:2bc809f: 	
1:2bc809f: 	/*
1:2bc809f: 	  Loggable methods
1:2bc809f: 	  */
1:2bc809f: 	public void doMe(Transaction xact, LogInstant instant,
1:2bc809f: 					 LimitObjectInput in)
1:2bc809f: 	{
1:2bc809f: 		if (verbose)
1:2bc809f: 			System.out.println("Loggable.doMe("+toString()+")");
1:2bc809f: 		return;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 		methods to support prepared log
1:2bc809f: 		the following two methods should not be called during recover
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	public ByteArray getPreparedLog()
1:2bc809f: 	{
1:2bc809f: 		return this.preparedLog;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean needsRedo(Transaction xact) {return false;}
1:2bc809f: 	public void releaseResource(Transaction xact) {return;}
1:2bc809f: 	public int group () { return Loggable.RAWSTORE ; };
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	  Undoable methods.
1:2bc809f: 	 */
1:2bc809f: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
1:2bc809f: 		 throws StandardException, IOException
1:2bc809f: 	{
1:2bc809f: //MsgTrace.traceString("+++tu.generateUndo");
1:2bc809f: 		return new T_Compensation();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	  Formatable methods
1:2bc809f: 	  */
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	 @exception IOException	thrown on error
1:2bc809f: 	 */
1:2bc809f: 	public void writeExternal(ObjectOutput out)
1:2bc809f: 	throws IOException
1:2bc809f: 	{
1:2bc809f: //MsgTrace.traceString("{{{tu.writeExternal");
1:2bc809f: 		if (SanityManager.DEBUG)
1:2bc809f: 		{
1:2bc809f: 			SanityManager.ASSERT((removeWhat >= REMOVE_NONE) &&
1:2bc809f: 								 (removeWhat <= REMOVE_TO_ME));
1:2bc809f: 			SanityManager.ASSERT(rollBack == (recordSeq < 0));
1:2bc809f: 			SanityManager.ASSERT(rollBack == (tranSeq < 0));
1:2bc809f: 		}
1:2bc809f: 		out.writeObject(tid);
1:2bc809f: 		out.writeInt(tranSeq);
1:2bc809f: 		out.writeInt(recordSeq);
1:2bc809f: 		out.writeInt(removeWhat);
1:2bc809f: 		out.writeInt(LWMTranSeq);
1:2bc809f: 		out.writeBoolean(rollBack);
1:2bc809f: 		out.writeInt(lastRecord);
1:2bc809f: 		out.writeBoolean(lastTransaction);
1:2bc809f: 		out.writeInt(optionalDataLen);
1:2bc809f: //MsgTrace.traceString("}}}tu.writeExternal");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void readExternal(ObjectInput in) 
1:2bc809f: 	throws IOException,ClassNotFoundException
1:2bc809f: 	{
1:2bc809f: //MsgTrace.traceString("{{{tu.readExternal");
1:2bc809f: 		try
1:2bc809f: 		{
1:2bc809f: 			tid = (GlobalTransactionId)in.readObject();
1:2bc809f: 			tranSeq = in.readInt();
1:2bc809f: 			recordSeq = in.readInt();
1:2bc809f: 			removeWhat = in.readInt();
1:2bc809f: 			LWMTranSeq = in.readInt();
1:2bc809f: 			rollBack = in.readBoolean();
1:2bc809f: 			lastRecord = in.readInt();
1:2bc809f: 			lastTransaction = in.readBoolean();
1:2bc809f: 			optionalDataLen = in.readInt();
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		catch ( ClassCastException exception ) {
1:2bc809f: //MsgTrace.traceString("{{{tu.readExternal---exception");
1:2bc809f: 			throw new StreamCorruptedException();
1:2bc809f: 		}
1:2bc809f: //MsgTrace.traceString("}}}tu.readExternal");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public int getTypeFormatId()
1:2bc809f: 	{
1:2bc809f: 		return StoredFormatIds.SERIALIZABLE_FORMAT_ID;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	  Object methods.
1:2bc809f: 	  */
1:2bc809f: 	public String toString()
1:2bc809f: 	{
1:2bc809f: 	    String traceTid = "tid: null";
1:2bc809f: 
1:2bc809f: 		if (tid !=null) traceTid = "tid: "+tid;
1:2bc809f: 
1:2bc809f: 		String traceRemoveWhat;
1:2bc809f: 		switch (removeWhat)
1:2bc809f: 		{
1:2bc809f: 		case  REMOVE_NONE:
1:2bc809f: 			traceRemoveWhat = "REMOVE_NONE";
1:2bc809f: 			break;
1:2bc809f: 		case  REMOVE_ME:
1:2bc809f: 			traceRemoveWhat = "REMOVE_ME";
1:2bc809f: 			break;
1:2bc809f: 		case  REMOVE_TO_ME:
1:2bc809f: 			traceRemoveWhat = "REMOVE_TO_ME";
1:2bc809f: 			break;
1:2bc809f: 		default:
1:2bc809f: 			traceRemoveWhat = "removeWhat: invalidValue";
1:2bc809f: 			break;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		return
1:2bc809f: 			traceTid+" "+
1:2bc809f: 			"tranSeq: "+tranSeq+" "+
1:2bc809f: 			"recordSeq: "+recordSeq+" "+
1:2bc809f: 			traceRemoveWhat+" "+
1:2bc809f: 			"LWMTranSeq: "+LWMTranSeq+" "+
1:2bc809f: 			"rollback: "+rollBack+" "+
1:2bc809f: 			"lastRecord: "+lastRecord+" "+
1:2bc809f: 			"optionalDataLen: "+optionalDataLen+" "+
1:2bc809f: 			"lastTransaction: "+lastTransaction;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.store.T_DaemonService
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.store;
1: 
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: 
1: import org.apache.derby.iapi.store.raw.*;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.util.ByteArray;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: import java.io.StreamCorruptedException;
1: import java.util.Vector;
1: import java.io.OutputStream;
1: import java.io.InputStream;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: //
1: // Tracing can be done like so (commented out)
1: //import org.apache.derbyTesting.unitTests.util.MsgTrace;
1: 
1: public class T_Undoable
1: implements Undoable
1: {
1: 	static final int REMOVE_NONE  = 0;
1: 	static final int REMOVE_ME    = 1;
1: 	static final int REMOVE_TO_ME = 2;
1: 
1: 	protected ByteArray preparedLog;
1: 	protected DynamicByteArrayOutputStream logBuffer;
1: 
1: 	GlobalTransactionId tid = null;
1: 	int tranSeq = -1;
1: 	int recordSeq = -1;
1: 	int removeWhat = REMOVE_NONE;
1: 	int LWMTranSeq = 0;
1: 	boolean rollBack = true;
1: 	int lastRecord = -1;
1: 	boolean lastTransaction = false;
1: 	int optionalDataLen;
1: 	boolean verbose;
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public T_Undoable() { super(); }
1: 
1: 
1: 	T_Undoable(GlobalTransactionId tid, int tranSeq, int recordSeq,
1: 			   int removeWhat, int LWMTranSeq,
1: 			   boolean rollBack, int lastRecord, boolean lastTransaction,
1: 			   int optionalDataLen,boolean verbose)
1: 		 throws T_Fail
1: 	{
1: //MsgTrace.traceString("{{{tu.new");
1: 		T_Fail.T_ASSERT((removeWhat >= REMOVE_NONE) &&
1: 							 (removeWhat <= REMOVE_TO_ME));
1: 		T_Fail.T_ASSERT(rollBack == (recordSeq < 0));
1: 		T_Fail.T_ASSERT(rollBack == (tranSeq < 0));
1: 		this.tid = tid;
1: 		this.tranSeq = tranSeq;
1: 		this.recordSeq = recordSeq;
1: 		this.removeWhat = removeWhat;
1: 		this.LWMTranSeq = LWMTranSeq;
1: 		this.rollBack = rollBack;
1: 		this.lastRecord = lastRecord;
1: 		this.lastTransaction = lastTransaction;
1: 		this.optionalDataLen = optionalDataLen;
1: 		this.verbose = verbose;
1: 		
1: 		try {
1: 			writeOptionalDataToBuffer();
1: 		} catch (IOException ioe) {
1: 			throw T_Fail.exceptionFail(ioe);
1: 		} catch (StandardException se) {
1: 			throw T_Fail.exceptionFail(se);
1: 		}
1: 
1: //MsgTrace.traceString("}}}tu.new");
1: 
1: 	}
1: 	
1: 	private void writeOptionalDataToBuffer()
1: 		throws StandardException, IOException
1: 	{
1: 
1: 		if (logBuffer == null) {
1: 			// YYZ: need to revisit this.  Do we really want to allocate this much for a buffer every time?
1: 			logBuffer = new DynamicByteArrayOutputStream(1024); // init size 1K
1: 		} else {
1: 			logBuffer.reset();
1: 		}
1: 
1: 		int optionalDataStart = logBuffer.getPosition();
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(optionalDataStart == 0,
1: 				"Buffer for writing the optional data should start at position 0");
1: 		}
1: 
1: //MsgTrace.traceString("{{{tu.writeOpetionalData");
1: 		if (optionalDataLen > 0)
1: 		{
1: 			byte[] buf = new byte[optionalDataLen];
1: 			for (int ix=0;ix <optionalDataLen;ix++)
1: 				buf[ix] = (byte)ix;
1: 			logBuffer.write(buf);
1: 		}
1: //MsgTrace.traceString("}}}tu.writeOpetionalData");
1: 
1: 		int optionalDataLength = logBuffer.getPosition() - optionalDataStart;
1: 		
1: 		if (SanityManager.DEBUG) {
1: 			if (optionalDataLength != logBuffer.getUsed())
1: 				SanityManager.THROWASSERT("wrong optional data length, optionalDataLength = "
1: 					+ optionalDataLength + ", logBuffer.getUsed() = " + logBuffer.getUsed());
1: 		}
1: 
1: 		// set the position to the beginning of the buffer
1: 		logBuffer.setPosition(optionalDataStart);
1: 
1: 		this.preparedLog = new ByteArray (logBuffer.getByteArray(), optionalDataStart,
1: 			optionalDataLength);
1: 	}
1: 	
1: 	/*
1: 	  Loggable methods
1: 	  */
1: 	public void doMe(Transaction xact, LogInstant instant,
1: 					 LimitObjectInput in)
1: 	{
1: 		if (verbose)
1: 			System.out.println("Loggable.doMe("+toString()+")");
1: 		return;
1: 	}
1: 
1: 	/*
1: 		methods to support prepared log
1: 		the following two methods should not be called during recover
1: 	*/
1: 
1: 	public ByteArray getPreparedLog()
1: 	{
1: 		return this.preparedLog;
1: 	}
1: 
1: 	public boolean needsRedo(Transaction xact) {return false;}
1: 	public void releaseResource(Transaction xact) {return;}
1: 	public int group () { return Loggable.RAWSTORE ; };
1: 
1: 	/*
1: 	  Undoable methods.
1: 	 */
1: 	public Compensation generateUndo(Transaction xact, LimitObjectInput in)
1: 		 throws StandardException, IOException
1: 	{
1: //MsgTrace.traceString("+++tu.generateUndo");
1: 		return new T_Compensation();
1: 	}
1: 
1: 	/*
1: 	  Formatable methods
1: 	  */
1: 
1: 	/**
1: 	 @exception IOException	thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out)
1: 	throws IOException
1: 	{
1: //MsgTrace.traceString("{{{tu.writeExternal");
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT((removeWhat >= REMOVE_NONE) &&
1: 								 (removeWhat <= REMOVE_TO_ME));
1: 			SanityManager.ASSERT(rollBack == (recordSeq < 0));
1: 			SanityManager.ASSERT(rollBack == (tranSeq < 0));
1: 		}
1: 		out.writeObject(tid);
1: 		out.writeInt(tranSeq);
1: 		out.writeInt(recordSeq);
1: 		out.writeInt(removeWhat);
1: 		out.writeInt(LWMTranSeq);
1: 		out.writeBoolean(rollBack);
1: 		out.writeInt(lastRecord);
1: 		out.writeBoolean(lastTransaction);
1: 		out.writeInt(optionalDataLen);
1: //MsgTrace.traceString("}}}tu.writeExternal");
1: 	}
1: 
1: 	public void readExternal(ObjectInput in) 
1: 	throws IOException,ClassNotFoundException
1: 	{
1: //MsgTrace.traceString("{{{tu.readExternal");
1: 		try
1: 		{
1: 			tid = (GlobalTransactionId)in.readObject();
1: 			tranSeq = in.readInt();
1: 			recordSeq = in.readInt();
1: 			removeWhat = in.readInt();
1: 			LWMTranSeq = in.readInt();
1: 			rollBack = in.readBoolean();
1: 			lastRecord = in.readInt();
1: 			lastTransaction = in.readBoolean();
1: 			optionalDataLen = in.readInt();
1: 		}
1: 
1: 		catch ( ClassCastException exception ) {
1: //MsgTrace.traceString("{{{tu.readExternal---exception");
1: 			throw new StreamCorruptedException();
1: 		}
1: //MsgTrace.traceString("}}}tu.readExternal");
1: 	}
1: 
1: 	public int getTypeFormatId()
1: 	{
1: 		return StoredFormatIds.SERIALIZABLE_FORMAT_ID;
1: 	}
1: 
1: 	/*
1: 	  Object methods.
1: 	  */
1: 	public String toString()
1: 	{
1: 	    String traceTid = "tid: null";
1: 
1: 		if (tid !=null) traceTid = "tid: "+tid;
1: 
1: 		String traceRemoveWhat;
1: 		switch (removeWhat)
1: 		{
1: 		case  REMOVE_NONE:
1: 			traceRemoveWhat = "REMOVE_NONE";
1: 			break;
1: 		case  REMOVE_ME:
1: 			traceRemoveWhat = "REMOVE_ME";
1: 			break;
1: 		case  REMOVE_TO_ME:
1: 			traceRemoveWhat = "REMOVE_TO_ME";
1: 			break;
1: 		default:
1: 			traceRemoveWhat = "removeWhat: invalidValue";
1: 			break;
1: 		}
1: 
1: 		return
1: 			traceTid+" "+
1: 			"tranSeq: "+tranSeq+" "+
1: 			"recordSeq: "+recordSeq+" "+
1: 			traceRemoveWhat+" "+
1: 			"LWMTranSeq: "+LWMTranSeq+" "+
1: 			"rollback: "+rollBack+" "+
1: 			"lastRecord: "+lastRecord+" "+
1: 			"optionalDataLen: "+optionalDataLen+" "+
1: 			"lastTransaction: "+lastTransaction;
1: 	}
1: 
1: }
============================================================================