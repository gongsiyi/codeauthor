1:33467a5: /*
2:33467a5: 
1:33467a5:    Derby - Class org.apache.derby.impl.io.VFMemoryStorageFactory
1:33467a5: 
1:33467a5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:33467a5:    contributor license agreements.  See the NOTICE file distributed with
1:33467a5:    this work for additional information regarding copyright ownership.
1:33467a5:    The ASF licenses this file to you under the Apache License, Version 2.0
1:33467a5:    (the "License"); you may not use this file except in compliance with
1:33467a5:    the License.  You may obtain a copy of the License at
1:33467a5: 
1:33467a5:       http://www.apache.org/licenses/LICENSE-2.0
1:33467a5: 
1:33467a5:    Unless required by applicable law or agreed to in writing, software
1:33467a5:    distributed under the License is distributed on an "AS IS" BASIS,
1:33467a5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33467a5:    See the License for the specific language governing permissions and
1:33467a5:    limitations under the License.
1:33467a5: 
2:33467a5:  */
1:33467a5: 
1:33467a5: package org.apache.derby.impl.io;
1:33467a5: 
1:33467a5: import java.io.File;
1:33467a5: import java.io.IOException;
1:33467a5: import java.io.OutputStream;
1:33467a5: import java.util.HashMap;
1:33467a5: import java.util.Map;
1:33467a5: 
1:33467a5: import org.apache.derby.impl.io.vfmem.PathUtil;
1:33467a5: import org.apache.derby.impl.io.vfmem.DataStore;
1:33467a5: import org.apache.derby.impl.io.vfmem.VirtualFile;
1:33467a5: 
1:33467a5: import org.apache.derby.io.StorageFactory;
1:33467a5: import org.apache.derby.io.StorageFile;
1:33467a5: import org.apache.derby.io.WritableStorageFactory;
1:33467a5: 
2:33467a5: /**
1:33467a5:  * A storage factory for virtual files, where the contents of the files are
1:33467a5:  * stored in main memory.
1:b36288f:  * <p>
1:b36288f:  * Note that data store deletion may happen inside one of two different methods;
1:b36288f:  * either in {@code shutdown} or in {@code init}. This is due to the current
1:b36288f:  * implementation and the fact that dropping a database is done through the
1:b36288f:  * file IO interface by deleting the service root. As the deletion then becomes
1:b36288f:  * a two step process, someone else may boot the database again before the
1:b36288f:  * reference to the store has been removed. To avoid this, the
1:b36288f:  * {@code init}-method will never initialize with a store scheduled for
1:b36288f:  * deletion. I have only seen this issue in heavily loaded multithreaded
1:b36288f:  * environments (2 CPUs/cores should be enough to reproduce).
1:33467a5:  */
1:33467a5: public class VFMemoryStorageFactory
1:33467a5:         implements StorageFactory, WritableStorageFactory {
1:33467a5: 
1:33467a5:     /** References to the databases created / existing. */
1:33467a5:     //@GuardedBy("DATABASES")
1:400f6eb:     private static final Map<String,DataStore> DATABASES = new HashMap<String,DataStore>();
1:33467a5: 
1:33467a5:     /**
1:b1a01b2:      * Dummy store used to carry out frequent operations that don't
1:b1a01b2:      * require a "proper store", for instance getting the canonical name
1:b1a01b2:      * of the data store.
1:b1a01b2:      */
1:b1a01b2:     private static final DataStore DUMMY_STORE = new DataStore("::DUMMY::");
1:b1a01b2: 
1:0ee61e0:     /** The canonical (unique) name of the database (absolute path). */
1:33467a5:     private String canonicalName;
1:33467a5:     /** The data directory of the database. */
1:33467a5:     private StorageFile dataDirectory;
1:d5036cd:     /** The temporary directory for the database (absolute path). */
1:33467a5:     private StorageFile tempDir;
1:33467a5:     /** The data store used for the database. */
1:33467a5:     private DataStore dbData;
1:33467a5: 
1:b1a01b2:     /**
1:33467a5:      * Creates a new, uninitialized instance of the storage factory.
1:33467a5:      * <p>
1:33467a5:      * To initialize the instance, {@code init} must be called.
2:33467a5:      *
1:33467a5:      * @see #init
1:33467a5:      */
1:33467a5:     public VFMemoryStorageFactory() {
1:33467a5:         // Do nothing here, see the init-method.
6:33467a5:     }
1:33467a5: 
1:b36288f:     /**
1:33467a5:      * Initializes the storage factory instance by setting up a temporary
1:33467a5:      * directory, the database directory and checking if the database being
1:33467a5:      * named already exists.
1:33467a5:      *
1:33467a5:      * @param home the value of {@code system.home} for this storage factory
1:33467a5:      * @param databaseName the name of the database, all relative pathnames are
1:33467a5:      *      relative to this name
1:33467a5:      * @param tempDirNameIgnored ignored
1:d5036cd:      * @param uniqueName used to determine when the temporary directory can be
1:d5036cd:      *      created, but not to name the temporary directory itself
1:33467a5:      *
1:33467a5:      * @exception IOException on an error (unexpected).
1:33467a5:      */
1:33467a5:     public void init(String home, String databaseName,
1:d5036cd:                      String tempDirNameIgnored, String uniqueName)
1:33467a5:             throws IOException {
1:33467a5:         // Handle cases where a database name is specified.
1:33467a5:         if (databaseName != null) {
1:33467a5:             if (home != null &&
1:20e986d:                     !new File(databaseName).isAbsolute()) {
1:33467a5:                 canonicalName = new File(home, databaseName).getCanonicalPath();
1:b1a01b2:             } else {
1:33467a5:                 canonicalName = new File(databaseName).getCanonicalPath();
1:33467a5:             }
3:33467a5:             synchronized (DATABASES) {
1:b36288f:                 this.dbData = (DataStore)DATABASES.get(canonicalName);
1:b36288f:                 // If the store has been scheduled for deletion, purge it.
1:b36288f:                 if (dbData != null && dbData.scheduledForDeletion()) {
1:b36288f:                     DATABASES.remove(canonicalName);
1:b36288f:                     dbData.purge();
1:b36288f:                     dbDropCleanupInDummy(canonicalName);
1:b36288f:                     dbData = null;
1:b36288f:                 }
1:b36288f:                 if (dbData == null) {
1:b36288f:                     if (uniqueName != null) {
1:b36288f:                         // Create a new data store.
1:b36288f:                         this.dbData = new DataStore(canonicalName);
1:b36288f:                         DATABASES.put(canonicalName, dbData);
1:b36288f:                     } else {
1:b36288f:                         // We have a database name, but no unique name.
1:b36288f:                         // Assume that the client only wants to do some
1:b36288f:                         // "book-keeping" operations, like getting the
1:b36288f:                         // canonical name.
1:b36288f:                         this.dbData = DUMMY_STORE;
1:b36288f:                     }
1:33467a5:                 }
1:33467a5:             }
1:33467a5:             // Specify the data directory and the temp directory.
1:33467a5:             dataDirectory = new VirtualFile(canonicalName, dbData);
1:0ee61e0:             tempDir = new VirtualFile(normalizePath(canonicalName, "tmp"),
1:d5036cd:                                       dbData);
1:33467a5: 
1:33467a5:         // Handle cases where the database name is null, but a system home
1:33467a5:         // directory has been specified.
1:33467a5:         } else if (home != null) {
1:b1a01b2:             // Return the "system home directory" and specify a temporary
1:b1a01b2:             // directory for it (may never by used).
1:b1a01b2:             // As databases are created, the dummy will contain the
1:b1a01b2:             // directory names of the database locations, but the
1:b1a01b2:             // databases themselves will be stored in separate stores.
1:33467a5:             final String absHome = new File(home).getCanonicalPath();
1:b1a01b2:             dbData = DUMMY_STORE;
1:33467a5:             dataDirectory = new VirtualFile(absHome, dbData);
2:33467a5:             tempDir = new VirtualFile(getSeparator() + "tmp", dbData);
1:33467a5:         }
1:33467a5: 
1:33467a5:         // Create the temporary directory, if one has been specified.
1:d5036cd:         // Creating the temporary directory too early casues the
1:d5036cd:         // BaseDataFileFactory to fail, hence the check for uniqueName.
1:d5036cd:         // This check is also used by BaseStorageFactory.
1:d5036cd:         if (uniqueName != null && tempDir != null && !tempDir.exists()) {
1:33467a5:             tempDir.mkdirs();
1:dc43cf8:             tempDir.limitAccessToOwner(); // nop, but follow pattern
1:33467a5:         }
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:b36288f:      * Normally does nothing, but if the database is in a state such that it
1:b36288f:      * should be deleted this will happen here.
1:b36288f:      */
1:33467a5:     public void shutdown() {
1:b36288f:         // If the data store has been scheduled for deletion, which happens
1:b36288f:         // when the store detects that the service root has been deleted, then
1:b36288f:         // delete the whole store to release the memory.
1:b36288f:         if (dbData.scheduledForDeletion()) {
1:b36288f:             DataStore store;
1:b36288f:             synchronized (DATABASES) {
1:b36288f:                 store = (DataStore)DATABASES.remove(canonicalName);
1:b36288f:                 // Must clean up the dummy while holding monitor.
1:b36288f:                 if (store != null && store == dbData) {
1:b36288f:                     dbDropCleanupInDummy(canonicalName);
1:b36288f:                 }
1:b36288f:             }
1:b36288f:             // If this is the correct store, purge it now.
1:b36288f:             if (store != null && store == dbData) {
1:b36288f:                 dbData.purge(); // Idempotent.
1:b36288f:                 dbData = null;
1:b36288f:             }
1:b36288f:         }
1:33467a5:     }
1:33467a5: 
1:33467a5:     public String getCanonicalName() {
1:33467a5:         return canonicalName;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:0e00e5e:      * Set the canonicalName. May need adjustment due to DERBY-5096
1:0e00e5e:      * 
1:0e00e5e:      * @param name uniquely identifiable name for this database
1:0e00e5e:      */
1:0e00e5e:     public void setCanonicalName(String name) {
1:0e00e5e:        canonicalName = name;
1:0e00e5e:     }
1:0e00e5e:     
1:0e00e5e:     /**
1:33467a5:      * Returns a handle to the specific storage file.
1:33467a5:      *
1:33467a5:      * @param path the path of the file or directory
1:33467a5:      * @return A path handle.
1:33467a5:      */
1:33467a5:     public StorageFile newStorageFile(String path) {
1:33467a5:         // No need to separate between temporary and non-temporary files, since
1:33467a5:         // all files are non-persistant and the path will determine where the
1:33467a5:         // files are stored.
1:33467a5:         if (path == null) {
1:33467a5:             // Return the database directory as described by StorageFactory.
1:33467a5:             return dataDirectory;
1:33467a5:         }
1:0ee61e0:         return new VirtualFile(normalizePath(path), dbData);
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns a handle to the specified storage file.
1:33467a5:      *
1:33467a5:      * @param directoryName the name of the parent directory
1:33467a5:      * @param fileName the name of the file
1:33467a5:      * @return A path handle.
1:33467a5:      */
1:33467a5:     public StorageFile newStorageFile(String directoryName, String fileName) {
1:0ee61e0:             return new VirtualFile(
1:0ee61e0:                                 normalizePath(directoryName, fileName), dbData);
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns a handle to the specified storage file.
1:33467a5:      *
1:33467a5:      * @param directoryName the name of the parent directory
1:33467a5:      * @param fileName the name of the file
1:33467a5:      * @return A path handle.
1:33467a5:      */
1:33467a5:     public StorageFile newStorageFile(StorageFile directoryName,
1:33467a5:                                       String fileName) {
1:0ee61e0:         return newStorageFile(directoryName == null ? null
1:0ee61e0:                                                     : directoryName.getPath(),
1:0ee61e0:                               fileName);
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns the temporary directory for this storage factory instance.
1:33467a5:      *
1:33467a5:      * @return A {@code StorageFile}-object representing the temp directory.
1:33467a5:      */
1:33467a5:     public StorageFile getTempDir() {
1:33467a5:         return tempDir;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * The service is fast and supports random access.
1:33467a5:      *
1:33467a5:      * @return {@code true}
1:33467a5:      */
1:33467a5:     public boolean isFast() {
2:33467a5:         return true;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * The service supports writes.
1:33467a5:      *
1:33467a5:      * @return {@code false}
1:33467a5:      */
1:33467a5:     public boolean isReadOnlyDatabase() {
2:33467a5:         return false;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * The service supports random access.
1:33467a5:      *
1:33467a5:      * @return {@code true}
1:33467a5:      */
1:33467a5:     public boolean supportsRandomAccess() {
1:33467a5:         return true;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public int getStorageFactoryVersion() {
1:33467a5:         return StorageFactory.VERSION_NUMBER;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Creates a handle to a temporary file.
1:33467a5:      *
1:33467a5:      * @param prefix requested prefix for the file name
1:33467a5:      * @param suffix requested suffix for the file name, if {@code null} then
1:33467a5:      *      {@code .tmp} will be used
1:33467a5:      * @return A handle to the temporary file.
1:33467a5:      */
1:33467a5:     public StorageFile createTemporaryFile(String prefix, String suffix) {
1:33467a5:         String name;
1:33467a5:         if (suffix == null) {
1:33467a5:             suffix = ".tmp";
1:33467a5:         }
1:33467a5:         if (prefix == null) {
1:33467a5:             name = dbData.getTempFileCounter() + suffix;
3:33467a5:         } else {
1:33467a5:             name = prefix + dbData.getTempFileCounter() + suffix;
1:33467a5:         }
1:33467a5:         return newStorageFile(tempDir, name);
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns the path separator used by this storage factory.
1:33467a5:      *
1:33467a5:      * @return {@code PathUtil.SEP}
1:33467a5:      */
1:33467a5:     public char getSeparator() {
1:33467a5:         return PathUtil.SEP;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * The sync method is a no-op for this storage factory.
1:33467a5:      *
1:33467a5:      * @param stream ignored
1:33467a5:      * @param metaData ignored
1:33467a5:      */
1:33467a5:     public void sync(OutputStream stream, boolean metaData) {
1:33467a5:         // Does nothing, data is stored only in memory.
1:33467a5:     }
1:33467a5: 
1:33467a5:     public boolean supportsWriteSync() {
1:33467a5:         // TODO: What will give us the best performance here?
1:33467a5:         return true;
1:33467a5:     }
1:0ee61e0: 
1:0ee61e0:     /**
1:0ee61e0:      * Returns a normalized absolute path.
1:0ee61e0:      *
1:0ee61e0:      * @param dir parent directory, if {@code null} the {@code dataDirectory}
1:0ee61e0:      *      will be used
1:0ee61e0:      * @param file the file name ({@code null} not allowed)
1:0ee61e0:      * @return A path.
1:0ee61e0:      * @throws NullPointerException if {@code file} is {@code null}
1:0ee61e0:      */
1:0ee61e0:     private String normalizePath(String dir, String file) {
1:6d2e2b6:         if (dir == null || dir.length() == 0) {
1:0ee61e0:             dir = dataDirectory.getPath();
1:20e986d:         } else if (!new File(dir).isAbsolute()) {
1:0ee61e0:             dir = new File(dataDirectory.getPath(), dir).getPath();
1:0ee61e0:         }
1:0ee61e0:         // We now have an absolute path for the directory.
1:0ee61e0:         // Use java.io.File to get consistent behavior.
1:0ee61e0:         return (new File(dir, file).getPath());
1:0ee61e0:     }
1:0ee61e0: 
1:0ee61e0:     /**
1:0ee61e0:      * Returns a normalized absolute path.
1:0ee61e0:      *
1:0ee61e0:      * @param path path, if {@code null} the {@code dataDirectory} will be used
1:0ee61e0:      * @return A path.
1:0ee61e0:      */
1:0ee61e0:     private String normalizePath(String path) {
1:6d2e2b6:         if (path == null || path.length() == 0) {
1:0ee61e0:             return dataDirectory.getPath();
1:20e986d:         } else if (new File(path).isAbsolute()) {
1:0ee61e0:             return path;
1:0ee61e0:         } else {
1:0ee61e0:             return new File(dataDirectory.getPath(), path).getPath();
1:0ee61e0:         }
1:0ee61e0:     }
1:b36288f: 
1:b36288f:     /**
1:b36288f:      * Cleans up the internal dummy data store after a database has been
1:b36288f:      * dropped.
1:b36288f:      *
1:b36288f:      * @param dbPath absolute path of the dropped database
1:b36288f:      */
1:b36288f:     private void dbDropCleanupInDummy(String dbPath) {
1:b36288f:         while (dbPath != null && DUMMY_STORE.deleteEntry(dbPath)) {
1:b36288f:             dbPath = new File(dbPath).getParent();
1:b36288f:         }
1:b36288f:     }
1:33467a5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:400f6eb
/////////////////////////////////////////////////////////////////////////
1:     private static final Map<String,DataStore> DATABASES = new HashMap<String,DataStore>();
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:0e00e5e
/////////////////////////////////////////////////////////////////////////
1:      * Set the canonicalName. May need adjustment due to DERBY-5096
1:      * 
1:      * @param name uniquely identifiable name for this database
1:      */
1:     public void setCanonicalName(String name) {
1:        canonicalName = name;
1:     }
1:     
1:     /**
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:dc43cf8
/////////////////////////////////////////////////////////////////////////
1:             tempDir.limitAccessToOwner(); // nop, but follow pattern
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6d2e2b6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (dir == null || dir.length() == 0) {
/////////////////////////////////////////////////////////////////////////
1:         if (path == null || path.length() == 0) {
commit:b36288f
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * Note that data store deletion may happen inside one of two different methods;
1:  * either in {@code shutdown} or in {@code init}. This is due to the current
1:  * implementation and the fact that dropping a database is done through the
1:  * file IO interface by deleting the service root. As the deletion then becomes
1:  * a two step process, someone else may boot the database again before the
1:  * reference to the store has been removed. To avoid this, the
1:  * {@code init}-method will never initialize with a store scheduled for
1:  * deletion. I have only seen this issue in heavily loaded multithreaded
1:  * environments (2 CPUs/cores should be enough to reproduce).
/////////////////////////////////////////////////////////////////////////
0:      * TODO: Remove this method once the new mechanism has been added.
/////////////////////////////////////////////////////////////////////////
1:                 this.dbData = (DataStore)DATABASES.get(canonicalName);
1:                 // If the store has been scheduled for deletion, purge it.
1:                 if (dbData != null && dbData.scheduledForDeletion()) {
1:                     DATABASES.remove(canonicalName);
1:                     dbData.purge();
1:                     dbDropCleanupInDummy(canonicalName);
1:                     dbData = null;
1:                 }
1:                 if (dbData == null) {
1:                     if (uniqueName != null) {
1:                         // Create a new data store.
1:                         this.dbData = new DataStore(canonicalName);
1:                         DATABASES.put(canonicalName, dbData);
1:                     } else {
1:                         // We have a database name, but no unique name.
1:                         // Assume that the client only wants to do some
1:                         // "book-keeping" operations, like getting the
1:                         // canonical name.
1:                         this.dbData = DUMMY_STORE;
1:                     }
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Normally does nothing, but if the database is in a state such that it
1:      * should be deleted this will happen here.
1:      */
1:         // If the data store has been scheduled for deletion, which happens
1:         // when the store detects that the service root has been deleted, then
1:         // delete the whole store to release the memory.
1:         if (dbData.scheduledForDeletion()) {
1:             DataStore store;
1:             synchronized (DATABASES) {
1:                 store = (DataStore)DATABASES.remove(canonicalName);
1:                 // Must clean up the dummy while holding monitor.
1:                 if (store != null && store == dbData) {
1:                     dbDropCleanupInDummy(canonicalName);
1:                 }
1:             }
1:             // If this is the correct store, purge it now.
1:             if (store != null && store == dbData) {
1:                 dbData.purge(); // Idempotent.
1:                 dbData = null;
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Cleans up the internal dummy data store after a database has been
1:      * dropped.
1:      *
1:      * @param dbPath absolute path of the dropped database
1:      */
1:     private void dbDropCleanupInDummy(String dbPath) {
1:         while (dbPath != null && DUMMY_STORE.deleteEntry(dbPath)) {
1:             dbPath = new File(dbPath).getParent();
1:         }
1:     }
commit:b1a01b2
/////////////////////////////////////////////////////////////////////////
1:      * Dummy store used to carry out frequent operations that don't
1:      * require a "proper store", for instance getting the canonical name
1:      * of the data store.
1:      */
1:     private static final DataStore DUMMY_STORE = new DataStore("::DUMMY::");
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:                 } else if (uniqueName != null) {
1:                 } else {
0:                     // We have a database name, but no unique name.
0:                     // Assume that the client only wants to do some
0:                     // "book-keeping" operations, like getting the
0:                     // canonical name.
0:                     this.dbData = DUMMY_STORE;
/////////////////////////////////////////////////////////////////////////
1:             // Return the "system home directory" and specify a temporary
1:             // directory for it (may never by used).
1:             // As databases are created, the dummy will contain the
1:             // directory names of the database locations, but the
1:             // databases themselves will be stored in separate stores.
1:             dbData = DUMMY_STORE;
commit:20e986d
/////////////////////////////////////////////////////////////////////////
0:                 store.purge();
/////////////////////////////////////////////////////////////////////////
1:                     !new File(databaseName).isAbsolute()) {
/////////////////////////////////////////////////////////////////////////
1:         } else if (!new File(dir).isAbsolute()) {
/////////////////////////////////////////////////////////////////////////
1:         } else if (new File(path).isAbsolute()) {
commit:0ee61e0
/////////////////////////////////////////////////////////////////////////
1:     /** The canonical (unique) name of the database (absolute path). */
/////////////////////////////////////////////////////////////////////////
1:             tempDir = new VirtualFile(normalizePath(canonicalName, "tmp"),
/////////////////////////////////////////////////////////////////////////
1:         return new VirtualFile(normalizePath(path), dbData);
/////////////////////////////////////////////////////////////////////////
1:             return new VirtualFile(
1:                                 normalizePath(directoryName, fileName), dbData);
/////////////////////////////////////////////////////////////////////////
1:         return newStorageFile(directoryName == null ? null
1:                                                     : directoryName.getPath(),
1:                               fileName);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns a normalized absolute path.
1:      *
1:      * @param dir parent directory, if {@code null} the {@code dataDirectory}
1:      *      will be used
1:      * @param file the file name ({@code null} not allowed)
1:      * @return A path.
1:      * @throws NullPointerException if {@code file} is {@code null}
1:      */
1:     private String normalizePath(String dir, String file) {
0:         if (dir == null || dir.equals("")) {
1:             dir = dataDirectory.getPath();
0:         } else if (dir.charAt(0) != getSeparator()) {
1:             dir = new File(dataDirectory.getPath(), dir).getPath();
1:         }
1:         // We now have an absolute path for the directory.
1:         // Use java.io.File to get consistent behavior.
1:         return (new File(dir, file).getPath());
1:     }
1: 
1:     /**
1:      * Returns a normalized absolute path.
1:      *
1:      * @param path path, if {@code null} the {@code dataDirectory} will be used
1:      * @return A path.
1:      */
1:     private String normalizePath(String path) {
0:         if (path == null || path.equals("")) {
1:             return dataDirectory.getPath();
0:         } else if (path.charAt(0) == getSeparator()) {
1:             return path;
1:         } else {
1:             return new File(dataDirectory.getPath(), path).getPath();
1:         }
1:     }
commit:d5036cd
/////////////////////////////////////////////////////////////////////////
1:     /** The temporary directory for the database (absolute path). */
/////////////////////////////////////////////////////////////////////////
1:      * @param uniqueName used to determine when the temporary directory can be
1:      *      created, but not to name the temporary directory itself
1:                      String tempDirNameIgnored, String uniqueName)
/////////////////////////////////////////////////////////////////////////
0:             tempDir = new VirtualFile(PathUtil.join(canonicalName, "tmp"),
1:                                       dbData);
/////////////////////////////////////////////////////////////////////////
1:         // Creating the temporary directory too early casues the
1:         // BaseDataFileFactory to fail, hence the check for uniqueName.
1:         // This check is also used by BaseStorageFactory.
1:         if (uniqueName != null && tempDir != null && !tempDir.exists()) {
commit:33467a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.io.VFMemoryStorageFactory
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.io;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.derby.impl.io.vfmem.PathUtil;
1: import org.apache.derby.impl.io.vfmem.DataStore;
1: import org.apache.derby.impl.io.vfmem.VirtualFile;
1: 
1: import org.apache.derby.io.StorageFactory;
1: import org.apache.derby.io.StorageFile;
1: import org.apache.derby.io.WritableStorageFactory;
1: 
1: /**
1:  * A storage factory for virtual files, where the contents of the files are
1:  * stored in main memory.
1:  */
1: public class VFMemoryStorageFactory
1:         implements StorageFactory, WritableStorageFactory {
1: 
1:     /** References to the databases created / existing. */
1:     //@GuardedBy("DATABASES")
0:     private static final Map DATABASES = new HashMap();
1: 
1:     /**
0:      * Deletes the database if it exists.
1:      *
0:      * @param dbName the database name
0:      * @return {@code true} if the database was deleted, {@code false} otherwise
1:      */
0:     public static boolean purgeDatabase(final String dbName) {
0:         // TODO: Should we check if the database is booted / active?
1:         synchronized (DATABASES) {
0:             DataStore store = (DataStore)DATABASES.remove(dbName);
0:             if (store != null) {
0:                 // Delete everything.
0:                 store.deleteAll("/");
1:                 return true;
1:             }
1:             return false;
1:         }
1:     }
1: 
0:     /** The canonical (unique) name of the database. */
1:     private String canonicalName;
1:     /** The data directory of the database. */
1:     private StorageFile dataDirectory;
0:     /** The temporary directory for the database. */
1:     private StorageFile tempDir;
1:     /** The data store used for the database. */
1:     private DataStore dbData;
1: 
1:     /**
1:      * Creates a new, uninitialized instance of the storage factory.
1:      * <p>
1:      * To initialize the instance, {@code init} must be called.
1:      *
1:      * @see #init
1:      */
1:     public VFMemoryStorageFactory() {
1:         // Do nothing here, see the init-method.
1:     }
1: 
1:     /**
1:      * Initializes the storage factory instance by setting up a temporary
1:      * directory, the database directory and checking if the database being
1:      * named already exists.
1:      *
1:      * @param home the value of {@code system.home} for this storage factory
1:      * @param databaseName the name of the database, all relative pathnames are
1:      *      relative to this name
1:      * @param tempDirNameIgnored ignored
0:      * @param uniqueNameIgnored ignored
1:      *
1:      * @exception IOException on an error (unexpected).
1:      */
1:     public void init(String home, String databaseName,
0:                      String tempDirNameIgnored, String uniqueNameIgnored)
1:             throws IOException {
1:         // Handle cases where a database name is specified.
1:         if (databaseName != null) {
0:             // TODO: Is using java.io.File the right thing to do?
0:             //       Should we just set the canonical name equal to the
0:             //       specified database name instead?
1:             if (home != null &&
0:                     !databaseName.startsWith(String.valueOf(getSeparator()))) {
1:                 canonicalName = new File(home, databaseName).getCanonicalPath();
1:             } else {
1:                 canonicalName = new File(databaseName).getCanonicalPath();
1:             }
1:             synchronized (DATABASES) {
0:                 if (DATABASES.containsKey(canonicalName)) {
0:                     // Fetch the existing data store.
0:                     this.dbData = (DataStore)DATABASES.get(canonicalName);
1:                 } else {
0:                     // Create a new data store.
0:                     this.dbData = new DataStore(canonicalName);
0:                     DATABASES.put(canonicalName, dbData);
1:                 }
1:             }
1:             // Specify the data directory and the temp directory.
1:             dataDirectory = new VirtualFile(canonicalName, dbData);
1:             tempDir = new VirtualFile(getSeparator() + "tmp", dbData);
1: 
1:         // Handle cases where the database name is null, but a system home
1:         // directory has been specified.
1:         } else if (home != null) {
0:             // Return the "system home directory" and create a temporary
0:             // directory for it.
1:             final String absHome = new File(home).getCanonicalPath();
1:             synchronized (DATABASES) {
0:                 dbData = (DataStore)DATABASES.get(absHome);
0:                 if (dbData == null) {
0:                     // Create a new data store for the specified home.
0:                     dbData = new DataStore(absHome);
0:                     DATABASES.put(absHome, dbData);
1:                 }
1:             }
1:             dataDirectory = new VirtualFile(absHome, dbData);
1:             tempDir = new VirtualFile(getSeparator() + "tmp", dbData);
1:         }
1: 
1:         // Create the temporary directory, if one has been specified.
0:         if (tempDir != null && !tempDir.exists()) {
1:             tempDir.mkdirs();
1:         }
1:     }
1: 
1:     public void shutdown() {
0:         // For now, do nothing.
0:         // TODO: Deleting stuff doesn't seem to play nice when running the
0:         // regression tests, as CleanDatabaseTestSetup fails then. The cause
0:         // is unknown and should be investigated.
1:     }
1: 
1:     public String getCanonicalName() {
1:         return canonicalName;
1:     }
1: 
1:     /**
1:      * Returns a handle to the specific storage file.
1:      *
1:      * @param path the path of the file or directory
1:      * @return A path handle.
1:      */
1:     public StorageFile newStorageFile(String path) {
1:         // No need to separate between temporary and non-temporary files, since
1:         // all files are non-persistant and the path will determine where the
1:         // files are stored.
1:         if (path == null) {
1:             // Return the database directory as described by StorageFactory.
1:             return dataDirectory;
1:         }
0:         return new VirtualFile(path, dbData);
1:     }
1: 
1:     /**
1:      * Returns a handle to the specified storage file.
1:      *
1:      * @param directoryName the name of the parent directory
1:      * @param fileName the name of the file
1:      * @return A path handle.
1:      */
1:     public StorageFile newStorageFile(String directoryName, String fileName) {
0:         return new VirtualFile(PathUtil.join(directoryName, fileName), dbData);
1:     }
1: 
1:     /**
1:      * Returns a handle to the specified storage file.
1:      *
1:      * @param directoryName the name of the parent directory
1:      * @param fileName the name of the file
1:      * @return A path handle.
1:      */
1:     public StorageFile newStorageFile(StorageFile directoryName,
1:                                       String fileName) {
0:         return newStorageFile(directoryName.getPath(), fileName);
1:     }
1: 
1:     /**
1:      * Returns the temporary directory for this storage factory instance.
1:      *
1:      * @return A {@code StorageFile}-object representing the temp directory.
1:      */
1:     public StorageFile getTempDir() {
1:         return tempDir;
1:     }
1: 
1:     /**
1:      * The service is fast and supports random access.
1:      *
1:      * @return {@code true}
1:      */
1:     public boolean isFast() {
1:         return true;
1:     }
1: 
1:     /**
1:      * The service supports writes.
1:      *
1:      * @return {@code false}
1:      */
1:     public boolean isReadOnlyDatabase() {
1:         return false;
1:     }
1: 
1:     /**
1:      * The service supports random access.
1:      *
1:      * @return {@code true}
1:      */
1:     public boolean supportsRandomAccess() {
1:         return true;
1:     }
1: 
1:     public int getStorageFactoryVersion() {
1:         return StorageFactory.VERSION_NUMBER;
1:     }
1: 
1:     /**
1:      * Creates a handle to a temporary file.
1:      *
1:      * @param prefix requested prefix for the file name
1:      * @param suffix requested suffix for the file name, if {@code null} then
1:      *      {@code .tmp} will be used
1:      * @return A handle to the temporary file.
1:      */
1:     public StorageFile createTemporaryFile(String prefix, String suffix) {
1:         String name;
1:         if (suffix == null) {
1:             suffix = ".tmp";
1:         }
1:         if (prefix == null) {
1:             name = dbData.getTempFileCounter() + suffix;
1:         } else {
1:             name = prefix + dbData.getTempFileCounter() + suffix;
1:         }
1:         return newStorageFile(tempDir, name);
1:     }
1: 
1:     /**
1:      * Returns the path separator used by this storage factory.
1:      *
1:      * @return {@code PathUtil.SEP}
1:      */
1:     public char getSeparator() {
1:         return PathUtil.SEP;
1:     }
1: 
1:     /**
1:      * The sync method is a no-op for this storage factory.
1:      *
1:      * @param stream ignored
1:      * @param metaData ignored
1:      */
1:     public void sync(OutputStream stream, boolean metaData) {
1:         // Does nothing, data is stored only in memory.
0:         // TODO: Are there any streams that needs to be flushed?
1:     }
1: 
1:     public boolean supportsWriteSync() {
1:         // TODO: What will give us the best performance here?
1:         return true;
1:     }
1: }
============================================================================