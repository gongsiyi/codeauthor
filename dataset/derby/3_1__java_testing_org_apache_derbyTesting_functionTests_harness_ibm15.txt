1:0c0db14: /*
1:0c0db14: 
1:0c0db14:    Derby - Class org.apache.derbyTesting.functionTests.harness.ibm15
1:0c0db14: 
1:0c0db14:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0c0db14:    contributor license agreements.  See the NOTICE file distributed with
1:0c0db14:    this work for additional information regarding copyright ownership.
1:0c0db14:    The ASF licenses this file to You under the Apache License, Version 2.0
1:0c0db14:    (the "License"); you may not use this file except in compliance with
1:0c0db14:    the License.  You may obtain a copy of the License at
1:0c0db14: 
1:0c0db14:       http://www.apache.org/licenses/LICENSE-2.0
1:0c0db14: 
1:0c0db14:    Unless required by applicable law or agreed to in writing, software
1:0c0db14:    distributed under the License is distributed on an "AS IS" BASIS,
1:0c0db14:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0c0db14:    See the License for the specific language governing permissions and
1:0c0db14:    limitations under the License.
1:0c0db14: 
1:0c0db14:  */
1:0c0db14: 
1:0c0db14: package org.apache.derbyTesting.functionTests.harness;
1:0c0db14: 
1:0c0db14: import java.util.Vector;
1:0c0db14: import java.util.StringTokenizer;
1:0c0db14: 
1:0c0db14: /**
1:0c0db14:   <p>This class is for IBM's jdk 1.5.
1:0c0db14: 
1:0c0db14:  */
1:0c0db14: public class ibm15 extends jvm {
1:0c0db14: 
1:0c0db14: 	public String getName(){return "ibm15";}
1:0c0db14:     public ibm15(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
1:0c0db14:     long ss, long oss, long ms, long mx, String classpath, String prof,
1:3f5c48a:     boolean verify, boolean noverify, boolean nojit, Vector<String> D) {
1:0c0db14:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
1:0c0db14: 		verify,noverify,nojit,D);
1:0c0db14:     }
1:0c0db14:     // more typical use:
1:3f5c48a:     public ibm15(String classpath, Vector<String> D) {
1:0c0db14:         super(classpath,D);
1:0c0db14:     }
1:0c0db14:     // more typical use:
1:3f5c48a:     public ibm15(long ms, long mx, String classpath, Vector<String> D) {
1:0c0db14:         super(ms,mx,classpath,D);
1:0c0db14:     }
1:0c0db14:     // actual use
1:0c0db14:     public ibm15() { }
1:0c0db14: 
1:0c0db14:     // return the command line to invoke this VM.  The caller then adds
1:0c0db14:     // the class and program arguments.
1:3f5c48a:     public Vector<String> getCommandLine()
1:0c0db14:     {
1:0c0db14:         StringBuffer sb = new StringBuffer();
1:3f5c48a:         Vector<String> v = super.getCommandLine();
1:0c0db14:         appendOtherFlags(sb);
1:0c0db14:         String s = sb.toString();
1:0c0db14:         StringTokenizer st = new StringTokenizer(s);
1:0c0db14:         while (st.hasMoreTokens())
1:0c0db14:         {
1:0c0db14:             v.addElement(st.nextToken());
1:0c0db14:         }
1:0c0db14:         return v;
1:0c0db14: 	}
1:0c0db14: 
1:0c0db14: 	public void appendOtherFlags(StringBuffer sb)
1:0c0db14: 	{
1:0c0db14:         if (noasyncgc) warn("ibm15 does not support noasyncgc");
1:0c0db14:         if (verbosegc) sb.append(" -verbose:gc");
1:0c0db14:         if (noclassgc) sb.append(" -Xnoclassgc");
1:0c0db14:         if (ss>=0) warn("ibm15 does not support ss");
1:0c0db14:         if (oss>=0) warn("ibm15 does not support oss");
1:0c0db14:         if (ms>=0) {
1:0c0db14:           sb.append(" -ms");
1:0c0db14:           sb.append(ms);
1:0c0db14:         }
1:0c0db14:         if (mx>=0) {
1:0c0db14:           sb.append(" -mx");
1:0c0db14:           sb.append(mx);
1:0c0db14:         }
1:0c0db14:         if (classpath!=null) {
1:0c0db14:           sb.append(" -classpath ");
1:0c0db14:           sb.append(classpath);
1:0c0db14:         }
1:0c0db14:         if (prof!=null) warn("ibm15 does not support prof");
1:0c0db14:         if (verify) warn("ibm15 does not support verify");
1:0c0db14:         if (noverify) warn("ibm15 does not support noverify");
1:0c0db14:         if (nojit) sb.append(" -Djava.compiler=NONE");
1:0c0db14:         if (D != null)
1:0c0db14:           for (int i=0; i<D.size();i++) {
1:0c0db14: 	        sb.append(" -D");
1:0c0db14: 	        sb.append((String)(D.elementAt(i)));
1:0c0db14:           }
1:0c0db14:     }
1:0c0db14: 	public String getDintro() { return "-D"; }
1:0c0db14: }
1:0c0db14: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:     boolean verify, boolean noverify, boolean nojit, Vector<String> D) {
1:     public ibm15(String classpath, Vector<String> D) {
1:     public ibm15(long ms, long mx, String classpath, Vector<String> D) {
/////////////////////////////////////////////////////////////////////////
1:     public Vector<String> getCommandLine()
1:         Vector<String> v = super.getCommandLine();
commit:0c0db14
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.ibm15
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.util.Vector;
1: import java.util.StringTokenizer;
1: 
1: /**
1:   <p>This class is for IBM's jdk 1.5.
1: 
0:   @author ames
1:  */
1: public class ibm15 extends jvm {
1: 
1: 	public String getName(){return "ibm15";}
1:     public ibm15(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
1:     long ss, long oss, long ms, long mx, String classpath, String prof,
0:     boolean verify, boolean noverify, boolean nojit, Vector D) {
1:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
1: 		verify,noverify,nojit,D);
1:     }
1:     // more typical use:
0:     public ibm15(String classpath, Vector D) {
1:         super(classpath,D);
1:     }
1:     // more typical use:
0:     public ibm15(long ms, long mx, String classpath, Vector D) {
1:         super(ms,mx,classpath,D);
1:     }
1:     // actual use
1:     public ibm15() { }
1: 
1:     // return the command line to invoke this VM.  The caller then adds
1:     // the class and program arguments.
0:     public Vector getCommandLine()
1:     {
1:         StringBuffer sb = new StringBuffer();
0:         Vector v = super.getCommandLine();
1:         appendOtherFlags(sb);
1:         String s = sb.toString();
1:         StringTokenizer st = new StringTokenizer(s);
1:         while (st.hasMoreTokens())
1:         {
1:             v.addElement(st.nextToken());
1:         }
1:         return v;
1: 	}
1: 
1: 	public void appendOtherFlags(StringBuffer sb)
1: 	{
1:         if (noasyncgc) warn("ibm15 does not support noasyncgc");
1:         if (verbosegc) sb.append(" -verbose:gc");
1:         if (noclassgc) sb.append(" -Xnoclassgc");
1:         if (ss>=0) warn("ibm15 does not support ss");
1:         if (oss>=0) warn("ibm15 does not support oss");
1:         if (ms>=0) {
1:           sb.append(" -ms");
1:           sb.append(ms);
1:         }
1:         if (mx>=0) {
1:           sb.append(" -mx");
1:           sb.append(mx);
1:         }
1:         if (classpath!=null) {
1:           sb.append(" -classpath ");
1:           sb.append(classpath);
1:         }
1:         if (prof!=null) warn("ibm15 does not support prof");
1:         if (verify) warn("ibm15 does not support verify");
1:         if (noverify) warn("ibm15 does not support noverify");
1:         if (nojit) sb.append(" -Djava.compiler=NONE");
1:         if (D != null)
1:           for (int i=0; i<D.size();i++) {
1: 	        sb.append(" -D");
1: 	        sb.append((String)(D.elementAt(i)));
1:           }
1:     }
1: 	public String getDintro() { return "-D"; }
1: }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
0:    Licensed to the Apache Software Foundation (ASF) under one or more
0:    contributor license agreements.  See the NOTICE file distributed with
0:    this work for additional information regarding copyright ownership.
0:    The ASF licenses this file to You under the Apache License, Version 2.0
0:    (the "License"); you may not use this file except in compliance with
0:    the License.  You may obtain a copy of the License at
commit:558e1e4
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.ibm15
0: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.harness;
0: 
0: import java.util.Vector;
0: import java.util.StringTokenizer;
0: 
0: /**
0:   <p>This class is for IBM's jdk 1.5.
0: 
0:   @author ames
0:  */
0: public class ibm15 extends jvm {
0: 
0: 	public String getName(){return "ibm15";}
0:     public ibm15(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
0:     long ss, long oss, long ms, long mx, String classpath, String prof,
0:     boolean verify, boolean noverify, boolean nojit, Vector D) {
0:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
0: 		verify,noverify,nojit,D);
0:     }
0:     // more typical use:
0:     public ibm15(String classpath, Vector D) {
0:         super(classpath,D);
0:     }
0:     // more typical use:
0:     public ibm15(long ms, long mx, String classpath, Vector D) {
0:         super(ms,mx,classpath,D);
0:     }
0:     // actual use
0:     public ibm15() { }
0: 
0:     // return the command line to invoke this VM.  The caller then adds
0:     // the class and program arguments.
0:     public Vector getCommandLine()
0:     {
0:         StringBuffer sb = new StringBuffer();
0:         Vector v = super.getCommandLine();
0:         appendOtherFlags(sb);
0:         String s = sb.toString();
0:         StringTokenizer st = new StringTokenizer(s);
0:         while (st.hasMoreTokens())
0:         {
0:             v.addElement(st.nextToken());
0:         }
0:         return v;
0: 	}
0: 
0: 	public void appendOtherFlags(StringBuffer sb)
0: 	{
0:         if (noasyncgc) warn("ibm15 does not support noasyncgc");
0:         if (verbosegc) sb.append(" -verbose:gc");
0:         if (noclassgc) sb.append(" -Xnoclassgc");
0:         if (ss>=0) warn("ibm15 does not support ss");
0:         if (oss>=0) warn("ibm15 does not support oss");
0:         if (ms>=0) {
0:           sb.append(" -ms");
0:           sb.append(ms);
0:         }
0:         if (mx>=0) {
0:           sb.append(" -mx");
0:           sb.append(mx);
0:         }
0:         if (classpath!=null) {
0:           sb.append(" -classpath ");
0:           sb.append(classpath);
0:         }
0:         if (prof!=null) warn("ibm15 does not support prof");
0:         if (verify) warn("ibm15 does not support verify");
0:         if (noverify) warn("ibm15 does not support noverify");
0:         if (nojit) sb.append(" -Djava.compiler=NONE");
0:         if (D != null)
0:           for (int i=0; i<D.size();i++) {
0: 	        sb.append(" -D");
0: 	        sb.append((String)(D.elementAt(i)));
0:           }
0:     }
0: 	public String getDintro() { return "-D"; }
0: }
0: 
============================================================================