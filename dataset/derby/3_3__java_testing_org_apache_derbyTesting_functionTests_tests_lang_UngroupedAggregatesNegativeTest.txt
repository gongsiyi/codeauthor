1:ead590c: /*
1:ead590c:  * 
1:c8603c4:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UngroupedAggregatesNegativeTest
1:ead590c:  * 
1:ead590c:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
1:ead590c:  * agreements. See the NOTICE file distributed with this work for additional information
1:ead590c:  * regarding copyright ownership. The ASF licenses this file to You under the Apache
1:ead590c:  * License, Version 2.0 (the "License"); you may not use this file except in compliance
1:ead590c:  * with the License. You may obtain a copy of the License at
1:ead590c:  * 
1:ead590c:  * http://www.apache.org/licenses/LICENSE-2.0
1:ead590c:  * 
1:ead590c:  * Unless required by applicable law or agreed to in writing, software distributed under
1:ead590c:  * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ead590c:  * KIND, either express or implied. See the License for the specific language governing
1:ead590c:  * permissions and limitations under the License.
1:ead590c:  * 
2:ead590c:  */
1:ead590c: package org.apache.derbyTesting.functionTests.tests.lang;
6:ead590c: 
1:ead590c: import java.sql.SQLException;
1:ead590c: import java.sql.Statement;
1:ead590c: 
1:ead590c: import junit.framework.Test;
1:ead590c: 
1:ead590c: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:ead590c: import org.apache.derbyTesting.junit.TestConfiguration;
1:ead590c: 
2:ead590c: /**
1:ead590c:  * Test case for ungroupedAggregatesNegative.sql. 
1:ead590c:  * It provides negative tests for ungrouped aggregates.
1:ead590c:  */
1:ead590c: public class UngroupedAggregatesNegativeTest extends BaseJDBCTestCase {
1:ead590c: 
1:ead590c:     public UngroupedAggregatesNegativeTest(String name) {
1:ead590c:         super(name);
4:ead590c:     }
1:ead590c: 
1:ead590c:     public static Test suite() {
1:ead590c:         return TestConfiguration.defaultSuite(
1:ead590c:                 UngroupedAggregatesNegativeTest.class);
1:ead590c:     }
1:ead590c: 
1:ead590c:     public void setUp() throws SQLException {
1:ead590c:         String sql = "create table t1 (c1 int)";
1:c8603c4:         Statement st = createStatement();
1:ead590c:         st.executeUpdate(sql);
1:1cb558f: 
1:ead590c:         sql = "create table t2 (c1 int)";
1:ead590c:         st.executeUpdate(sql);
1:ead590c: 
1:ead590c:         sql = "insert into t2 values 1,2,3";
1:ead590c:         assertEquals(3, st.executeUpdate(sql));
1:ead590c: 
1:ead590c:         st.close();
1:1cb558f:     }
1:c8603c4: 
1:8e08903:     public void tearDown() throws Exception {
1:ead590c:         dropTable("t1");
1:ead590c:         dropTable("t2");
1:8e08903:         super.tearDown();
1:1cb558f:     }
1:c8603c4: 
1:c8603c4:     /**
1:ead590c:      * Mix aggregate and non-aggregate expressions in the select list.
1:c8603c4:      */
1:ead590c:     public void testSelect() throws SQLException {
1:ead590c:         String sql = "select c1, max(c1) from t1";
1:ead590c:         assertCompileError("42Y35", sql);
1:c8603c4: 
1:ead590c:         sql = "select c1 * max(c1) from t1";
1:ead590c:         assertCompileError("42Y35", sql);
1:ead590c:     }
1:c8603c4: 
1:ead590c:     /**
1:ead590c:      * Aggregate in where clause.
1:ead590c:      */
1:ead590c:     public void testWhereClause() {
1:ead590c:         String sql = "select c1 from t1 where max(c1) = 1";
1:ead590c:         assertCompileError("42903", sql);
1:ead590c:     }
1:ead590c: 
1:ead590c:     /**
1:ead590c:      * Aggregate in ON clause of inner join.
1:ead590c:      */
1:ead590c:     public void testOnClause() {
1:ead590c:         String sql = "select * from t1 join t1 " + "as t2 on avg(t2.c1) > 10";
1:ead590c:         assertCompileError("42Z07", sql);
1:ead590c:     }
1:ead590c: 
1:ead590c:     /**
1:ead590c:      * Correlated subquery in select list, 
1:ead590c:      * and noncorrelated subquery that returns more than 1 row.
1:ead590c:      * @throws SQLException 
1:ead590c:      */
1:ead590c:     public void testSubquery() throws SQLException {
1:ead590c:         String sql = "select max(c1), (select t2.c1 from t2 "
1:ead590c:                 + "where t1.c1 = t2.c1) from t1";
1:ead590c:         assertCompileError("42Y29", sql);
1:ead590c: 
1:ead590c:         sql = "select max(c1), (select t2.c1 from t2) from t1";
2:ead590c:         Statement st = createStatement();
1:ead590c:         assertStatementError("21000", st, sql);
1:ead590c:         st.close();
1:c8603c4:     }
1:ead590c: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4e5e965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8e08903
/////////////////////////////////////////////////////////////////////////
1:     public void tearDown() throws Exception {
1:         super.tearDown();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:02b86bb
/////////////////////////////////////////////////////////////////////////
commit:9662d02
/////////////////////////////////////////////////////////////////////////
0:             if ( !"XBCM5".equals( actualSQLState ) && !"XJ001".equals( actualSQLState )  && !"42ZC8".equals( actualSQLState ) )
commit:1cb558f
/////////////////////////////////////////////////////////////////////////
0:         st.execute
0:             (
0:              "create derby aggregate bad_mode for int\n" +
0:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.ModeAggregate'"
0:              );
1:         
0:         try {
0:             st.execute
0:                 (
0:                  "select bad_mode( columnnumber ) from sys.syscolumns" 
0:                  );
0:             fail( "Aggregate unexpectedly succeeded." );
0:         } catch (SQLException se)
0:         {
0:             String  actualSQLState = se.getSQLState();
0:             if ( !"XBCM5".equals( actualSQLState ) && !"XJ001".equals( actualSQLState ) )
0:             {
0:                 fail( "Unexpected SQLState: " + actualSQLState );
1:             }
1:         }
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UngroupedAggregatesNegativeTest
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Test that we get a reasonable error when trying to invoke
0:      * a user-defined aggregate on a vm which doesn't support generics.
1:      */
0:     public  void    testUDAWithoutGenerics() throws Exception
0:     {
0:         if (JDBC.vmSupportsJDBC3()) { return; }
1:         
1:         Statement st = createStatement();
1: 
0:         st.execute( "create derby aggregate bad_mode for int\n" +
0:                     "external name 'org.apache.derbyTesting.functionTests.tests.lang.ModeAggregate'" );
1: 
0:         assertStatementError("XBCM5", st,
0:                              "select bad_mode( columnnumber ) from sys.syscolumns" );
1:     }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:ead590c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
0:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UngroupedAggregatesTest
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
1:  * agreements. See the NOTICE file distributed with this work for additional information
1:  * regarding copyright ownership. The ASF licenses this file to You under the Apache
1:  * License, Version 2.0 (the "License"); you may not use this file except in compliance
1:  * with the License. You may obtain a copy of the License at
1:  * 
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software distributed under
1:  * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied. See the License for the specific language governing
1:  * permissions and limitations under the License.
1:  * 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test case for ungroupedAggregatesNegative.sql. 
1:  * It provides negative tests for ungrouped aggregates.
1:  */
1: public class UngroupedAggregatesNegativeTest extends BaseJDBCTestCase {
1: 
1:     public UngroupedAggregatesNegativeTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         return TestConfiguration.defaultSuite(
1:                 UngroupedAggregatesNegativeTest.class);
1:     }
1: 
1:     public void setUp() throws SQLException {
1:         String sql = "create table t1 (c1 int)";
1:         Statement st = createStatement();
1:         st.executeUpdate(sql);
1: 
1:         sql = "create table t2 (c1 int)";
1:         st.executeUpdate(sql);
1: 
1:         sql = "insert into t2 values 1,2,3";
1:         assertEquals(3, st.executeUpdate(sql));
1: 
1:         st.close();
1:     }
1: 
0:     public void tearDown() throws SQLException {
1:         dropTable("t1");
1:         dropTable("t2");
1:     }
1: 
1:     /**
1:      * Mix aggregate and non-aggregate expressions in the select list.
1:      */
1:     public void testSelect() throws SQLException {
1:         String sql = "select c1, max(c1) from t1";
1:         assertCompileError("42Y35", sql);
1: 
1:         sql = "select c1 * max(c1) from t1";
1:         assertCompileError("42Y35", sql);
1:     }
1: 
1:     /**
1:      * Aggregate in where clause.
1:      */
1:     public void testWhereClause() {
1:         String sql = "select c1 from t1 where max(c1) = 1";
1:         assertCompileError("42903", sql);
1:     }
1: 
1:     /**
1:      * Aggregate in ON clause of inner join.
1:      */
1:     public void testOnClause() {
1:         String sql = "select * from t1 join t1 " + "as t2 on avg(t2.c1) > 10";
1:         assertCompileError("42Z07", sql);
1:     }
1: 
1:     /**
1:      * Correlated subquery in select list, 
1:      * and noncorrelated subquery that returns more than 1 row.
1:      * @throws SQLException 
1:      */
1:     public void testSubquery() throws SQLException {
1:         String sql = "select max(c1), (select t2.c1 from t2 "
1:                 + "where t1.c1 = t2.c1) from t1";
1:         assertCompileError("42Y29", sql);
1: 
1:         sql = "select max(c1), (select t2.c1 from t2) from t1";
1:         Statement st = createStatement();
1:         assertStatementError("21000", st, sql);
1:         st.close();
1:     }
1: }
============================================================================