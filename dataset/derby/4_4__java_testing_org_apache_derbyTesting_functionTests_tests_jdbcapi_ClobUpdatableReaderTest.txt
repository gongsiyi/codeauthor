1:e1fc783: /*
1:e1fc783:  *
1:fcdce55:  * Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest
1:e1fc783:  *
1:e1fc783:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e1fc783:  * contributor license agreements.  See the NOTICE file distributed with
1:e1fc783:  * this work for additional information regarding copyright ownership.
1:e1fc783:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e1fc783:  * (the "License"); you may not use this file except in compliance with
1:e1fc783:  * the License.  You may obtain a copy of the License at
1:e1fc783:  *
1:e1fc783:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e1fc783:  *
1:e1fc783:  * Unless required by applicable law or agreed to in writing,
1:e1fc783:  * software distributed under the License is distributed on an
1:e1fc783:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:e1fc783:  * either express or implied. See the License for the specific
1:e1fc783:  * language governing permissions and limitations under the License.
1:e1fc783:  */
9:e1fc783: 
1:e1fc783: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:e1fc783: 
1:1ae02c9: import java.io.IOException;
1:1ae02c9: import java.io.InputStream;
1:f839f5e: import java.io.Reader;
1:e1fc783: import java.io.StringReader;
1:e1fc783: import java.io.Writer;
1:e1fc783: import java.sql.Clob;
1:e1fc783: import java.sql.PreparedStatement;
1:e1fc783: import java.sql.ResultSet;
1:f839f5e: import java.sql.SQLException;
1:e1fc783: import java.sql.Statement;
1:e1fc783: import junit.framework.Test;
1:f839f5e: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1:e1fc783: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:2333262: import org.apache.derbyTesting.junit.Decorator;
1:e1fc783: import org.apache.derbyTesting.junit.TestConfiguration;
1:f839f5e: 
1:e1fc783: /**
1:e5b15ce:  * Test class to test <code>UpdateableReader</code> for <code>Clob</code> in
1:e5b15ce:  * embedded driver.
1:e1fc783:  */
1:fcdce55: public class ClobUpdatableReaderTest extends BaseJDBCTestCase {
1:ddb70fe: 
1:e1fc783:     private final String dummy = "This is a new String";
1:ddb70fe: 
1:fcdce55:     public ClobUpdatableReaderTest (String name) {
1:e1fc783:         super (name);
9:e1fc783:     }
1:ddb70fe: 
1:e5b15ce:     /**
1:80424bf:      * Test updating a large clob
1:80424bf:      */
1:80424bf:     public void testUpdateableStoreReader () throws Exception {
1:ddb70fe:         getConnection().setAutoCommit (false);
1:ddb70fe:         PreparedStatement ps = prepareStatement ("insert into updateClob " +
1:ddb70fe:                 "(id , data) values (? ,?)");
1:ddb70fe:         ps.setInt (1, 2);
1:ddb70fe:         StringBuffer sb = new StringBuffer ();
1:ddb70fe:         String base = "SampleSampleSample";
1:ddb70fe:         for (int i = 0; i < 100000; i++) {
1:ddb70fe:             sb.append (base);
1:80424bf:         }
1:ddb70fe:         //insert a large enough data to ensure stream is created in dvd
1:ddb70fe:         ps.setCharacterStream (2, new StringReader (sb.toString()),
1:ddb70fe:                                             sb.length());
1:ddb70fe:         ps.execute();
1:ddb70fe:         ps.close();
1:ddb70fe:         Statement stmt = createStatement ();
1:ddb70fe:         ResultSet rs = stmt.executeQuery("select data from " +
1:ddb70fe:                 "updateClob where id = 2");
1:ddb70fe:         rs.next();
1:ddb70fe:         Clob clob = rs.getClob (1);
1:ddb70fe:         rs.close();
1:ddb70fe:         stmt.close();
1:ddb70fe:         assertEquals (sb.length(), clob.length());
1:ddb70fe:         Reader r = clob.getCharacterStream();
1:ddb70fe:         String newString = "this is a new string";
1:ddb70fe:         //access reader before modifying the clob
1:ddb70fe:         long l = r.skip (100);
1:ddb70fe:         clob.setString (1001, newString);
1:ddb70fe:         //l chars are already skipped
1:ddb70fe:         long toSkip = 1000 - l;
1:ddb70fe:         while (toSkip > 0) {
1:ddb70fe:             long skipped = r.skip (toSkip);
1:ddb70fe:             toSkip -= skipped;
1:80424bf:         }
1:ddb70fe:         char [] newdata = new char [newString.length()];
1:ddb70fe:         int len = r.read(newdata);
1:ddb70fe:         assertEquals ("updated not reflected", newString,
1:ddb70fe:                                 new String (newdata, 0, len));
1:ddb70fe:         r.close();
1:80424bf:     }
1:80424bf: 
1:80424bf:     /**
1:e1fc783:      * Tests updates on reader.
1:e1fc783:      */
1:e1fc783:     public void testUpdateableReader () throws Exception {
1:ddb70fe:         getConnection().setAutoCommit (false);
1:ddb70fe:         PreparedStatement ps = prepareStatement ("insert into updateClob " +
1:ddb70fe:                 "(id , data) values (? ,?)");
1:ddb70fe:         ps.setInt (1, 1);
1:ddb70fe:         StringBuffer sb = new StringBuffer ();
1:ddb70fe:         String base = "SampleSampleSample";
1:ddb70fe:         for (int i = 0; i < 100; i++) {
1:ddb70fe:             sb.append (base);
1:80424bf:         }
1:ddb70fe:         ps.setCharacterStream (2, new StringReader (sb.toString()),
1:ddb70fe:                                             sb.length());
1:ddb70fe:         ps.execute();
1:ddb70fe:         ps.close();
1:ddb70fe:         Statement stmt = createStatement ();
1:ddb70fe:         ResultSet rs = stmt.executeQuery("select data from " +
1:ddb70fe:                 "updateClob where id = 1");
1:ddb70fe:         rs.next();
1:ddb70fe:         Clob clob = rs.getClob (1);
1:ddb70fe:         rs.close();
1:ddb70fe:         stmt.close();
1:ddb70fe:         assertEquals (sb.length(), clob.length());
1:ddb70fe:         Reader r = clob.getCharacterStream();
1:ddb70fe:         char [] clobData = new char [sb.length()];
1:ddb70fe:         r.read (clobData);
1:ddb70fe:         assertEquals ("mismatch from inserted string",
1:ddb70fe:                             String.valueOf (clobData), sb.toString());
1:ddb70fe:         r.close();
1:ddb70fe:         //update before gettting the reader
1:ddb70fe:         clob.setString (50, dummy);
1:ddb70fe:         r = clob.getCharacterStream();
1:ddb70fe:         r.skip (49);
1:ddb70fe:         char [] newChars = new char [dummy.length()];
1:ddb70fe:         r.read (newChars);
1:ddb70fe:         assertEquals ("update not reflected", dummy,
1:ddb70fe:                                     String.valueOf (newChars));
1:ddb70fe:         //update again and see if stream is refreshed
1:ddb70fe:         clob.setString (75, dummy);
1:ddb70fe:         r.skip (75 - 50 - dummy.length());
1:ddb70fe:         char [] testChars = new char [dummy.length()];
1:ddb70fe:         r.read (testChars);
1:ddb70fe:         assertEquals ("update not reflected", dummy,
1:ddb70fe:                                     String.valueOf (newChars));
1:ddb70fe:         r.close();
1:ddb70fe:         //try inserting some unicode string
1:ddb70fe:         String unicodeStr = getUnicodeString();
1:ddb70fe:         clob.setString (50, unicodeStr);
1:ddb70fe:         char [] utf16Chars = new char [unicodeStr.length()];
1:ddb70fe:         r = clob.getCharacterStream();
1:ddb70fe:         r.skip(49);
1:ddb70fe:         r.read(utf16Chars);
1:ddb70fe:         assertEquals ("update not reflected",  unicodeStr,
1:ddb70fe:                                     String.valueOf (utf16Chars));
1:ddb70fe:         r.close();
1:ddb70fe:         Writer w = clob.setCharacterStream (1);
1:ddb70fe:         //write enough data to switch the data to file
1:ddb70fe:         r = clob.getCharacterStream ();
1:ddb70fe:         for (int i = 0; i < 10000; i++) {
1:ddb70fe:             w.write (dummy);
1:80424bf:         }
1:ddb70fe:         w.close();
1:ddb70fe:         clob.setString (500, unicodeStr);
1:ddb70fe:         r.skip (499);
1:ddb70fe:         char [] unicodeChars = new char [unicodeStr.length()];
1:ddb70fe:         r.read (unicodeChars);
1:ddb70fe:         assertEquals ("update not reflected",  unicodeStr,
1:ddb70fe:                                     String.valueOf (unicodeChars));
1:ddb70fe:     }
1:ddb70fe: 
1:e5b15ce:     /**
1:f839f5e:      * Tests that the Clob can handle multiple streams and the length call
1:f839f5e:      * multiplexed.
1:f839f5e:      * <p>
1:f839f5e:      * This test was written after bug DERBY-2806 was reported, where getting
1:f839f5e:      * the length of the Clob after fetching a stream from it would exhaust
1:f839f5e:      * the stream and cause the next read to return -1.
1:f839f5e:      * <p>
1:f839f5e:      * The test is written to work on a Clob that operates on streams from
1:f839f5e:      * the store, which currently means that it must be over a certain size
1:f839f5e:      * and that no modifying methods can be called on it.
1:f839f5e:      */
1:f839f5e:     public void testMultiplexedOperationProblem()
1:f839f5e:             throws IOException, SQLException {
1:ddb70fe:         getConnection().setAutoCommit(false);
1:f839f5e:         int length = 266000;
1:f839f5e:         PreparedStatement ps = prepareStatement(
1:f839f5e:                 "insert into updateClob (id, data) values (?,?)");
1:f839f5e:         ps.setInt(1, length);
1:f839f5e:         ps.setCharacterStream(2, new LoopingAlphabetReader(length), length);
1:f839f5e:         assertEquals(1, ps.executeUpdate());
1:f839f5e:         ps.close();
1:f839f5e:         PreparedStatement psFetchClob = prepareStatement(
1:f839f5e:                 "select data from updateClob where id = ?");
1:f839f5e:         psFetchClob.setInt(1, length);
1:f839f5e:         ResultSet rs = psFetchClob.executeQuery();
1:f839f5e:         assertTrue("No Clob of length " + length + " in database", rs.next());
1:f839f5e:         Clob clob = rs.getClob(1);
1:f839f5e:         assertEquals(length, clob.length());
1:f839f5e:         Reader r = clob.getCharacterStream();
1:f839f5e:         int lastReadChar = r.read();
1:f839f5e:         lastReadChar = assertCorrectChar(lastReadChar, r.read());
1:f839f5e:         lastReadChar = assertCorrectChar(lastReadChar, r.read());
1:f839f5e:         assertEquals(length, clob.length());
1:f839f5e:         // Must be bigger than internal buffers might be.
1:f839f5e:         int nextChar;
1:f839f5e:         for (int i = 2; i < 160000; i++) {
1:f839f5e:             nextChar = r.read();
1:f839f5e:             // Check manually to report position where it fails.
1:f839f5e:             if (nextChar == -1) {
1:f839f5e:                 fail("Failed at position " + i + ", stream should not be" +
1:f839f5e:                         " exhausted now");
1:f839f5e:             }
1:f839f5e:             lastReadChar = assertCorrectChar(lastReadChar, nextChar);
1:f839f5e:         }
1:f839f5e:         lastReadChar = assertCorrectChar(lastReadChar, r.read());
1:f839f5e:         lastReadChar = assertCorrectChar(lastReadChar, r.read());
1:f839f5e:         InputStream ra = clob.getAsciiStream();
1:f839f5e:         assertEquals(length, clob.length());
1:f839f5e:         int lastReadAscii = ra.read();
1:f839f5e:         lastReadAscii = assertCorrectChar(lastReadAscii, ra.read());
1:f839f5e:         lastReadAscii = assertCorrectChar(lastReadAscii, ra.read());
1:f839f5e:         assertEquals(length, clob.length());
1:f839f5e:         lastReadAscii = assertCorrectChar(lastReadAscii, ra.read());
1:f839f5e:         lastReadChar = assertCorrectChar(lastReadChar, r.read());
1:ddb70fe:         // Close resources.
1:ddb70fe:         r.close();
1:ddb70fe:         ra.close();
1:ddb70fe:         rs.close();
1:ddb70fe:         psFetchClob.close();
1:f839f5e:     }
1:f839f5e: 
1:f839f5e: 
1:f839f5e:     /**
1:f839f5e:      * Asserts that the two specified characters follow each other in the
1:f839f5e:      * modern latin lowercase alphabet.
1:f839f5e:      */
1:f839f5e:     private int assertCorrectChar(int prevChar, int nextChar)
1:f839f5e:             throws IOException {
1:f839f5e:         assertTrue("Reached EOF unexpectedly", nextChar != -1);
1:f839f5e:         if (nextChar < 97 && nextChar > 122) {
1:f839f5e:             fail("Char out of range: " + nextChar);
1:f839f5e:         }
1:f839f5e:         if (prevChar < 97 && prevChar > 122) {
1:f839f5e:             fail("Char out of range: " + prevChar);
1:f839f5e:         }
1:f839f5e:         if (prevChar > -1) {
1:f839f5e:             // Work with modern latin lowercase: 97 - 122
1:f839f5e:             if (prevChar == 122) {
1:f839f5e:                 assertTrue(prevChar + " -> " + nextChar,
1:f839f5e:                         nextChar == 97);
1:f839f5e:             } else {
1:f839f5e:                 assertTrue(prevChar + " -> " + nextChar,
1:f839f5e:                         nextChar == prevChar +1);
1:f839f5e:             }
1:f839f5e:         }
1:f839f5e:         return nextChar;
1:f839f5e:     }
1:f839f5e:     /**
1:e5b15ce:      * Generates a (static) string containing various Unicode characters.
1:e5b15ce:      *
1:e5b15ce:      * @return a string with ASCII and non-ASCII characters
1:e5b15ce:      */
1:e1fc783:     private String getUnicodeString () {
1:e1fc783:         char[] fill = new char[4];
1:e1fc783:         fill[0] = 'd';          // 1 byte UTF8 character (ASCII)
1:e1fc783:         fill[1] = '\u03a9';     // 2 byte UTF8 character (Greek)
1:e1fc783:         fill[2] = '\u0e14';     // 3 byte UTF8 character (Thai)
1:e1fc783:         fill[3] = 'j';          // 1 byte UTF8 character (ASCII)
1:80424bf:         StringBuffer sb = new StringBuffer ();
1:e1fc783:         for (int i = 0; i < 4; i++) {
1:e1fc783:             sb.append (fill);
1:80424bf:         }
1:ddb70fe:         return sb.toString();
1:e1fc783:     }
1:ddb70fe: 
1:e1fc783:     /**
1:e1fc783:      * Setup the test.
1:e5b15ce:      *
1:e5b15ce:      * @throws SQLException if database access fails
1:e1fc783:      */
1:e1fc783:     public void setUp() throws Exception {
1:ddb70fe:         Statement stmt = createStatement ();
1:e1fc783:         stmt.execute ("create table updateClob " +
1:e1fc783:                 "(id integer primary key, data clob)");
1:80424bf:         stmt.close();
1:ddb70fe:         commit();
1:e1fc783:     }
1:ddb70fe: 
1:e1fc783:     public static Test suite() {
1:1ae02c9:         BaseTestSuite ts = new BaseTestSuite("ClobUpdatableReaderTest");
1:a8908bd:         ts.addTest(TestConfiguration.defaultSuite(
1:fcdce55:                     ClobUpdatableReaderTest.class));
1:1ae02c9:         BaseTestSuite encSuite =
1:1ae02c9:             new BaseTestSuite("ClobUpdatableReaderTest:encrypted");
1:fcdce55:         encSuite.addTestSuite (ClobUpdatableReaderTest.class);
1:2333262:         ts.addTest(Decorator.encryptedDatabase (encSuite));
1:2333262:         return ts;
1:ddb70fe:     }
1:80424bf: 
1:e1fc783:     /**
1:e5b15ce:      * Cleans up the database.
1:e5b15ce:      */
1:e1fc783:     protected void tearDown() throws java.lang.Exception {
1:ddb70fe:         rollback();
1:ddb70fe:         Statement stmt = createStatement ();
1:e1fc783:         stmt.execute ("drop table updateClob");
3:e1fc783:         stmt.close();
1:ddb70fe:         commit();
1:ddb70fe:         super.tearDown();
1:e1fc783:     }
1:e1fc783: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.InputStream;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite ts = new BaseTestSuite("ClobUpdatableReaderTest");
1:         BaseTestSuite encSuite =
1:             new BaseTestSuite("ClobUpdatableReaderTest:encrypted");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:ddb70fe
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:         getConnection().setAutoCommit (false);
1:         PreparedStatement ps = prepareStatement ("insert into updateClob " +
1:                 "(id , data) values (? ,?)");
1:         ps.setInt (1, 2);
1:         StringBuffer sb = new StringBuffer ();
1:         String base = "SampleSampleSample";
1:         for (int i = 0; i < 100000; i++) {
1:             sb.append (base);
1:         //insert a large enough data to ensure stream is created in dvd
1:         ps.setCharacterStream (2, new StringReader (sb.toString()),
1:                                             sb.length());
1:         ps.execute();
1:         ps.close();
1:         Statement stmt = createStatement ();
1:         ResultSet rs = stmt.executeQuery("select data from " +
1:                 "updateClob where id = 2");
1:         rs.next();
1:         Clob clob = rs.getClob (1);
1:         rs.close();
1:         stmt.close();
1:         assertEquals (sb.length(), clob.length());
1:         Reader r = clob.getCharacterStream();
1:         String newString = "this is a new string";
1:         //access reader before modifying the clob
1:         long l = r.skip (100);
1:         clob.setString (1001, newString);
1:         //l chars are already skipped
1:         long toSkip = 1000 - l;
1:         while (toSkip > 0) {
1:             long skipped = r.skip (toSkip);
1:             toSkip -= skipped;
1:         char [] newdata = new char [newString.length()];
1:         int len = r.read(newdata);
1:         assertEquals ("updated not reflected", newString,
1:                                 new String (newdata, 0, len));
1:         r.close();
1:         getConnection().setAutoCommit (false);
1:         PreparedStatement ps = prepareStatement ("insert into updateClob " +
1:                 "(id , data) values (? ,?)");
1:         ps.setInt (1, 1);
1:         StringBuffer sb = new StringBuffer ();
1:         String base = "SampleSampleSample";
1:         for (int i = 0; i < 100; i++) {
1:             sb.append (base);
1:         ps.setCharacterStream (2, new StringReader (sb.toString()),
1:                                             sb.length());
1:         ps.execute();
1:         ps.close();
1:         Statement stmt = createStatement ();
1:         ResultSet rs = stmt.executeQuery("select data from " +
1:                 "updateClob where id = 1");
1:         rs.next();
1:         Clob clob = rs.getClob (1);
1:         rs.close();
1:         stmt.close();
1:         assertEquals (sb.length(), clob.length());
1:         Reader r = clob.getCharacterStream();
1:         char [] clobData = new char [sb.length()];
1:         r.read (clobData);
1:         assertEquals ("mismatch from inserted string",
1:                             String.valueOf (clobData), sb.toString());
1:         r.close();
1:         //update before gettting the reader
1:         clob.setString (50, dummy);
1:         r = clob.getCharacterStream();
1:         r.skip (49);
1:         char [] newChars = new char [dummy.length()];
1:         r.read (newChars);
1:         assertEquals ("update not reflected", dummy,
1:                                     String.valueOf (newChars));
1:         //update again and see if stream is refreshed
1:         clob.setString (75, dummy);
1:         r.skip (75 - 50 - dummy.length());
1:         char [] testChars = new char [dummy.length()];
1:         r.read (testChars);
1:         assertEquals ("update not reflected", dummy,
1:                                     String.valueOf (newChars));
1:         r.close();
1:         //try inserting some unicode string
1:         String unicodeStr = getUnicodeString();
1:         clob.setString (50, unicodeStr);
1:         char [] utf16Chars = new char [unicodeStr.length()];
1:         r = clob.getCharacterStream();
1:         r.skip(49);
1:         r.read(utf16Chars);
1:         assertEquals ("update not reflected",  unicodeStr,
1:                                     String.valueOf (utf16Chars));
1:         r.close();
1:         Writer w = clob.setCharacterStream (1);
1:         //write enough data to switch the data to file
1:         r = clob.getCharacterStream ();
1:         for (int i = 0; i < 10000; i++) {
1:             w.write (dummy);
1:         w.close();
1:         clob.setString (500, unicodeStr);
1:         r.skip (499);
1:         char [] unicodeChars = new char [unicodeStr.length()];
1:         r.read (unicodeChars);
1:         assertEquals ("update not reflected",  unicodeStr,
1:                                     String.valueOf (unicodeChars));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         getConnection().setAutoCommit(false);
/////////////////////////////////////////////////////////////////////////
1:         // Close resources.
1:         r.close();
1:         ra.close();
1:         rs.close();
1:         psFetchClob.close();
/////////////////////////////////////////////////////////////////////////
1:         return sb.toString();
1: 
1:         Statement stmt = createStatement ();
1:         commit();
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1:         rollback();
1:         Statement stmt = createStatement ();
1:         commit();
1:         super.tearDown();
commit:fcdce55
/////////////////////////////////////////////////////////////////////////
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest
/////////////////////////////////////////////////////////////////////////
1: public class ClobUpdatableReaderTest extends BaseJDBCTestCase {
1:     public ClobUpdatableReaderTest (String name) {
/////////////////////////////////////////////////////////////////////////
0:         TestSuite ts = new TestSuite ("ClobUpdatableReaderTest");
1:                     ClobUpdatableReaderTest.class));
0:         TestSuite encSuite = new TestSuite ("ClobUpdatableReaderTest:encrypted");
1:         encSuite.addTestSuite (ClobUpdatableReaderTest.class);
commit:f839f5e
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
0: import java.io.IOException;
0: import java.io.InputStream;
1: import java.io.Reader;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Tests that the Clob can handle multiple streams and the length call
1:      * multiplexed.
1:      * <p>
1:      * This test was written after bug DERBY-2806 was reported, where getting
1:      * the length of the Clob after fetching a stream from it would exhaust
1:      * the stream and cause the next read to return -1.
1:      * <p>
1:      * The test is written to work on a Clob that operates on streams from
1:      * the store, which currently means that it must be over a certain size
1:      * and that no modifying methods can be called on it.
1:      */
1:     public void testMultiplexedOperationProblem()
1:             throws IOException, SQLException {
1:         int length = 266000;
1:         PreparedStatement ps = prepareStatement(
1:                 "insert into updateClob (id, data) values (?,?)");
1:         ps.setInt(1, length);
1:         ps.setCharacterStream(2, new LoopingAlphabetReader(length), length);
1:         assertEquals(1, ps.executeUpdate());
1:         ps.close();
1:         PreparedStatement psFetchClob = prepareStatement(
1:                 "select data from updateClob where id = ?");
1:         psFetchClob.setInt(1, length);
1:         ResultSet rs = psFetchClob.executeQuery();
1:         assertTrue("No Clob of length " + length + " in database", rs.next());
1:         Clob clob = rs.getClob(1);
1:         assertEquals(length, clob.length());
1:         Reader r = clob.getCharacterStream();
1:         int lastReadChar = r.read();
1:         lastReadChar = assertCorrectChar(lastReadChar, r.read());
1:         lastReadChar = assertCorrectChar(lastReadChar, r.read());
1:         assertEquals(length, clob.length());
1:         // Must be bigger than internal buffers might be.
1:         int nextChar;
1:         for (int i = 2; i < 160000; i++) {
1:             nextChar = r.read();
1:             // Check manually to report position where it fails.
1:             if (nextChar == -1) {
1:                 fail("Failed at position " + i + ", stream should not be" +
1:                         " exhausted now");
1:             }
1:             lastReadChar = assertCorrectChar(lastReadChar, nextChar);
1:         }
1:         lastReadChar = assertCorrectChar(lastReadChar, r.read());
1:         lastReadChar = assertCorrectChar(lastReadChar, r.read());
1:         InputStream ra = clob.getAsciiStream();
1:         assertEquals(length, clob.length());
1:         int lastReadAscii = ra.read();
1:         lastReadAscii = assertCorrectChar(lastReadAscii, ra.read());
1:         lastReadAscii = assertCorrectChar(lastReadAscii, ra.read());
1:         assertEquals(length, clob.length());
1:         lastReadAscii = assertCorrectChar(lastReadAscii, ra.read());
1:         lastReadChar = assertCorrectChar(lastReadChar, r.read());
1:     }
1: 
1: 
1:     /**
1:      * Asserts that the two specified characters follow each other in the
1:      * modern latin lowercase alphabet.
1:      */
1:     private int assertCorrectChar(int prevChar, int nextChar)
1:             throws IOException {
1:         assertTrue("Reached EOF unexpectedly", nextChar != -1);
1:         if (nextChar < 97 && nextChar > 122) {
1:             fail("Char out of range: " + nextChar);
1:         }
1:         if (prevChar < 97 && prevChar > 122) {
1:             fail("Char out of range: " + prevChar);
1:         }
1:         if (prevChar > -1) {
1:             // Work with modern latin lowercase: 97 - 122
1:             if (prevChar == 122) {
1:                 assertTrue(prevChar + " -> " + nextChar,
1:                         nextChar == 97);
1:             } else {
1:                 assertTrue(prevChar + " -> " + nextChar,
1:                         nextChar == prevChar +1);
1:             }
1:         }
1:         return nextChar;
1:     }
1:     /**
commit:80424bf
/////////////////////////////////////////////////////////////////////////
1:      * Test updating a large clob
1:      */
1:     public void testUpdateableStoreReader () throws Exception {
0:         Connection con = getConnection();
0:         try {
0:             con.setAutoCommit (false);
0:             PreparedStatement ps = con.prepareStatement ("insert into updateClob " +
0:                     "(id , data) values (? ,?)");
0:             ps.setInt (1, 2);
1:             StringBuffer sb = new StringBuffer ();
0:             String base = "SampleSampleSample";
0:             for (int i = 0; i < 100000; i++) {
0:                 sb.append (base);
1:             }
0:             //insert a large enough data to ensure stream is created in dvd
0:             ps.setCharacterStream (2, new StringReader (sb.toString()), 
0:                                                 sb.length());
0:             ps.execute();
0:             ps.close();
0:             Statement stmt = con.createStatement ();
0:             ResultSet rs = stmt.executeQuery("select data from " +
0:                     "updateClob where id = 2");
0:             rs.next();
0:             Clob clob = rs.getClob (1);            
0:             rs.close();
1:             stmt.close();
0:             assertEquals (sb.length(), clob.length());
0:             Reader r = clob.getCharacterStream();
0:             String newString = "this is a new string";
0:             //access reader before modifying the clob
0:             long l = r.skip (100);
0:             clob.setString (1001, newString);
0:             //l chars are already skipped
0:             long toSkip = 1000 - l;
0:             while (toSkip > 0) {
0:                 long skipped = r.skip (toSkip);
0:                 toSkip -= skipped;
1:             }
0:             char [] newdata = new char [newString.length()];
0:             int len = r.read(newdata);
0:             assertEquals ("updated not reflected", newString, 
0:                                     new String (newdata, 0, len));
0:             r.close();
1:         }
0:         finally {
0:             if (con != null) {
0:                 con.commit ();
0:                 con.close ();
1:             }
1:         }
1: 
1:     }
1: 
1:     /**
commit:e5b15ce
/////////////////////////////////////////////////////////////////////////
0:  * Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdateableReaderTest
/////////////////////////////////////////////////////////////////////////
1:  * Test class to test <code>UpdateableReader</code> for <code>Clob</code> in
1:  * embedded driver.
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Generates a (static) string containing various Unicode characters.
1:      *
1:      * @return a string with ASCII and non-ASCII characters
1:      */
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @throws SQLException if database access fails
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Cleans up the database.
1:      */
commit:e1fc783
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
0:  * Derby - Class ClobUpdateableReaderTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import java.io.Reader;
1: import java.io.StringReader;
1: import java.io.Writer;
1: import java.sql.Clob;
0: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
0:  * Test class to test Updateable Reader for Clob in embedder driver.
1:  */
0: public class ClobUpdateableReaderTest extends BaseJDBCTestCase {
1:     
1:     private final String dummy = "This is a new String";
1:         
0:     public ClobUpdateableReaderTest (String name) {
1:         super (name);
1:     }
1:     
1:     /**
1:      * Tests updates on reader.
1:      */
1:     public void testUpdateableReader () throws Exception {
0:         Connection con = getConnection();
0:         try {
0:             con.setAutoCommit (false);
0:             PreparedStatement ps = con.prepareStatement ("insert into updateClob " +
0:                     "(id , data) values (? ,?)");
0:             ps.setInt (1, 1);
0:             StringBuffer sb = new StringBuffer ();
0:             String base = "SampleSampleSample";
0:             for (int i = 0; i < 100; i++) {
0:                 sb.append (base);
1:             }
0:             ps.setCharacterStream (2, new StringReader (sb.toString()), 
0:                                                 sb.length());
0:             ps.execute();
0:             ps.close();
0:             Statement stmt = con.createStatement ();
0:             ResultSet rs = stmt.executeQuery("select data from " +
0:                     "updateClob where id = 1");
0:             rs.next();
0:             Clob clob = rs.getClob (1);
0:             rs.close();
1:             stmt.close();
0:             assertEquals (sb.length(), clob.length());
0:             Reader r = clob.getCharacterStream();
0:             char [] clobData = new char [sb.length()];
0:             r.read (clobData);
0:             assertEquals ("mismatch from inserted string", 
0:                                 String.valueOf (clobData), sb.toString());
0:             r.close();
0:             //update before gettting the reader
0:             clob.setString (50, dummy);        
0:             r = clob.getCharacterStream();
0:             r.skip (49);
0:             char [] newChars = new char [dummy.length()];
0:             r.read (newChars);
0:             assertEquals ("update not reflected", dummy,
0:                                         String.valueOf (newChars));
0:             //update again and see if stream is refreshed
0:             clob.setString (75, dummy);
0:             r.skip (75 - 50 - dummy.length());
0:             char [] testChars = new char [dummy.length()];
0:             r.read (testChars);
0:             assertEquals ("update not reflected", dummy,
0:                                         String.valueOf (newChars));
0:             r.close();
0:             //try inserting some unicode string
0:             String unicodeStr = getUnicodeString();
0:             clob.setString (50, unicodeStr);
0:             char [] utf16Chars = new char [unicodeStr.length()];
0:             r = clob.getCharacterStream();
0:             r.skip(49);
0:             r.read(utf16Chars);
0:             assertEquals ("update not reflected",  unicodeStr,
0:                                         String.valueOf (utf16Chars));
0:             r.close();
0:             Writer w = clob.setCharacterStream (1);
0:             //write enough data to switch the data to file
0:             r = clob.getCharacterStream ();
0:             for (int i = 0; i < 10000; i++) {
0:                 w.write (dummy);
1:             }
0:             w.close();            
0:             clob.setString (500, unicodeStr);
0:             r.skip (499);
0:             char [] unicodeChars = new char [unicodeStr.length()];
0:             r.read (unicodeChars);
0:             assertEquals ("update not reflected",  unicodeStr,
0:                                         String.valueOf (unicodeChars));            
1:         }
0:         finally {
0:             if (con != null) {
0:                 con.commit ();
0:                 con.close();
1:             }
1:         }
1:     }   
1:     
1:     private String getUnicodeString () {
1:         char[] fill = new char[4];
1:         fill[0] = 'd';          // 1 byte UTF8 character (ASCII)
1:         fill[1] = '\u03a9';     // 2 byte UTF8 character (Greek)
1:         fill[2] = '\u0e14';     // 3 byte UTF8 character (Thai)
1:         fill[3] = 'j';          // 1 byte UTF8 character (ASCII)
0:         StringBuffer sb = new StringBuffer ();
1:         for (int i = 0; i < 4; i++) {
1:             sb.append (fill);
1:         }
0:         return sb.toString();        
1:     }
1:     
1:     /**
1:      * Setup the test.
0:      * @throws a SQLException.
1:      */
1:     public void setUp() throws Exception {
0:         Connection con = getConnection ();
0:         Statement stmt = con.createStatement ();
1:         stmt.execute ("create table updateClob " +
1:                 "(id integer primary key, data clob)");
1:         stmt.close();
0:         con.commit();
0:         con.close();
1:     }
1:     
1:     public static Test suite() {
0:         return TestConfiguration.embeddedSuite(
0:                     ClobUpdateableReaderTest.class);
1:     }        
1: 
1:     protected void tearDown() throws java.lang.Exception {
0:         Connection con = getConnection ();
0:         Statement stmt = con.createStatement ();
1:         stmt.execute ("drop table updateClob");
1:         stmt.close();
0:         con.close();
1:     }
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8908bd
/////////////////////////////////////////////////////////////////////////
1:         ts.addTest(TestConfiguration.defaultSuite(
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2333262
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.Decorator;
/////////////////////////////////////////////////////////////////////////
0:         TestSuite ts = new TestSuite ("ClobUpdateableReaderTest");
0:         ts.addTest(TestConfiguration.embeddedSuite(
0:                     ClobUpdateableReaderTest.class));
0:         TestSuite encSuite = new TestSuite ("ClobUpdateableReaderTest:encrypted");
0:         encSuite.addTestSuite (ClobUpdateableReaderTest.class);
1:         ts.addTest(Decorator.encryptedDatabase (encSuite));
1:         return ts;
============================================================================