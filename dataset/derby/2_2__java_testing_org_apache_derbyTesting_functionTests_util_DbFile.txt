1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.util.DbFile
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
17:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.util;
1:67614ad: 
1:67614ad: import org.apache.derby.iapi.error.StandardException;
1:67614ad: import org.apache.derby.iapi.store.access.FileResource;
1:67614ad: import java.io.BufferedInputStream;
1:67614ad: import java.io.BufferedReader;
1:67614ad: import java.io.File;
1:67614ad: import java.io.FileOutputStream;
1:67614ad: import java.io.IOException;
1:67614ad: import java.io.InputStream;
1:67614ad: import java.io.InputStreamReader;
1:67614ad: import java.io.OutputStream;
1:67614ad: import java.lang.StringBuffer;
1:67614ad: import java.net.URL;
1:67614ad: 
2:67614ad: /**
1:67614ad:   Utility class for testing files stored in the database.
1:67614ad:   */ 
1:67614ad: public class DbFile
1:67614ad: {
1:67614ad: 	/**
1:67614ad: 	  Read the current generation of a file stored in the
1:67614ad: 	  database we are connected to and return a 1 line string
1:67614ad: 	  representation of the file.
1:67614ad: 
1:67614ad: 	  Sample usage
1:67614ad: 	  values org.apache.derbyTesting.functionTests.util.DbFile::readAsString('S1','J1');
1:67614ad: 	  @exception Exception Oops.
1:67614ad: 	  */
1:67614ad: /*	
1:67614ad: CANT USE JarAccess - not a public API (actually it's gone!)
1:67614ad: public static String
1:67614ad: 	readAsString(String schemaName, String sqlName)
1:67614ad: 		 throws Exception
1:67614ad: 	{
1:67614ad: 		InputStream is = JarAccess.getAsStream(schemaName,
1:67614ad: 											sqlName,
1:67614ad:  											FileResource.CURRENT_GENERATION_ID);
1:67614ad: 		return stringFromFile(is);
1:67614ad: 	}
1:67614ad: */
1:67614ad: 	/**
1:67614ad: 	  Create a string that contains a representation of the content of
1:67614ad: 	  a file for testing.
1:67614ad: 	  @exception Exception Oops.
1:67614ad: 	  */
1:67614ad: 	public static String
1:67614ad: 	stringFromFile(InputStream is)
1:67614ad: 		 throws Exception
1:67614ad: 	{
1:67614ad: 		InputStreamReader isr = new InputStreamReader(is);
1:67614ad: 		BufferedReader br =
1:67614ad: 			new BufferedReader(isr);
1:67614ad: 		StringBuffer sb = new StringBuffer();
1:67614ad: 		String l;
1:67614ad: 		while((l = br.readLine()) != null) {
1:67614ad: 			sb.append(l);
1:67614ad: 			sb.append("<CR>");
1:67614ad: 		}
1:67614ad: 		is.close();
1:67614ad: 		return sb.toString();
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	/**
1:67614ad: 	  Get the URL for a resource.
1:67614ad: 
1:67614ad: 	  @param packageName the name of the resource package
1:67614ad: 	  @param name the name of the resourse.
1:67614ad: 	  */
1:67614ad: 	public static URL
1:67614ad: 	getResourceURL(String packageName, String name)
1:67614ad: 	{
1:67614ad: 		String resourceName =
1:67614ad: 			"/"+
1:67614ad: 			packageName.replace('.','/')+
1:67614ad: 			"/"+
1:67614ad: 			name;
1:67614ad: 		//
1:67614ad: 		//We need a class to get our URL. Since we give a
1:67614ad: 		//fully qualified name for the URL, any class will
1:67614ad: 		//do.
1:67614ad: 		Class c = resourceName.getClass();
1:67614ad: 		URL url = c.getResource(resourceName);
1:67614ad: 		return url;
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	/**
1:67614ad: 	  Get an InputStream for reading a resource.
1:67614ad: 
1:67614ad: 	  @param packageName the name of the resource package
1:67614ad: 	  @param name the name of the resourse.
1:67614ad: 	  @exception Exception Oops.
1:67614ad: 	  */
1:67614ad: 	public static InputStream
1:67614ad: 	getResourceAsStream(String packageName, String name)
1:67614ad: 	{
1:67614ad: 		String resourceName =
1:67614ad: 			"/"+
1:67614ad: 			packageName.replace('.','/')+
1:67614ad: 			"/"+
1:67614ad: 			name;
1:67614ad: 		//
1:67614ad: 		//We need a class to get our URL. Since we give a
1:67614ad: 		//fully qualified name for the URL, any class will
1:67614ad: 		//do.
1:67614ad: 		Class c = resourceName.getClass();
1:67614ad: 		InputStream result = c.getResourceAsStream(resourceName);
1:67614ad: 		return result;
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	public	static	boolean	deleteFile( String outputFileName )
1:67614ad: 		 throws Exception
1:67614ad: 	{
1:67614ad: 		File f = new File( outputFileName );
1:67614ad: 
1:67614ad: 		return f.delete();
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	public static String mkFileFromResource
1:67614ad: 	(String packageName, String resourceName)
1:67614ad: 		 throws Exception
1:67614ad: 	{
1:67614ad: 		return mkFileFromResource( packageName, resourceName, resourceName );
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	public static String mkFileFromResource
1:67614ad: 	( String packageName, String resourceName, String outputFileName )
1:67614ad: 		 throws Exception
1:67614ad: 	{
1:67614ad: 		File f = new File( outputFileName );
1:67614ad: 		InputStream is = getResourceAsStream(packageName,resourceName);
1:67614ad: 		BufferedInputStream bis = new BufferedInputStream(is);
1:67614ad: 		OutputStream os = new FileOutputStream(f);
1:67614ad: 		byte[]buf=new byte[4096];
1:67614ad: 		int readThisTime = 0;
1:67614ad: 		while((readThisTime = bis.read(buf)) != -1)
1:67614ad: 			os.write(buf,0,readThisTime);
1:67614ad: 		os.close();
1:67614ad: 		return f.getAbsolutePath();
1:67614ad: 	}
1:67614ad: }
1:67614ad:  
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.util
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.access.FileResource;
1: import java.io.BufferedInputStream;
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.io.OutputStream;
1: import java.lang.StringBuffer;
1: import java.net.URL;
1: 
1: /**
1:   Utility class for testing files stored in the database.
1:   */ 
1: public class DbFile
1: { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	  Read the current generation of a file stored in the
1: 	  database we are connected to and return a 1 line string
1: 	  representation of the file.
1: 
1: 	  Sample usage
1: 	  values org.apache.derbyTesting.functionTests.util.DbFile::readAsString('S1','J1');
1: 	  @exception Exception Oops.
1: 	  */
1: /*	
1: CANT USE JarAccess - not a public API (actually it's gone!)
1: public static String
1: 	readAsString(String schemaName, String sqlName)
1: 		 throws Exception
1: 	{
1: 		InputStream is = JarAccess.getAsStream(schemaName,
1: 											sqlName,
1:  											FileResource.CURRENT_GENERATION_ID);
1: 		return stringFromFile(is);
1: 	}
1: */
1: 	/**
1: 	  Create a string that contains a representation of the content of
1: 	  a file for testing.
1: 	  @exception Exception Oops.
1: 	  */
1: 	public static String
1: 	stringFromFile(InputStream is)
1: 		 throws Exception
1: 	{
1: 		InputStreamReader isr = new InputStreamReader(is);
1: 		BufferedReader br =
1: 			new BufferedReader(isr);
1: 		StringBuffer sb = new StringBuffer();
1: 		String l;
1: 		while((l = br.readLine()) != null) {
1: 			sb.append(l);
1: 			sb.append("<CR>");
1: 		}
1: 		is.close();
1: 		return sb.toString();
1: 	}
1: 
1: 	/**
1: 	  Get the URL for a resource.
1: 
1: 	  @param packageName the name of the resource package
1: 	  @param name the name of the resourse.
1: 	  */
1: 	public static URL
1: 	getResourceURL(String packageName, String name)
1: 	{
1: 		String resourceName =
1: 			"/"+
1: 			packageName.replace('.','/')+
1: 			"/"+
1: 			name;
1: 		//
1: 		//We need a class to get our URL. Since we give a
1: 		//fully qualified name for the URL, any class will
1: 		//do.
1: 		Class c = resourceName.getClass();
1: 		URL url = c.getResource(resourceName);
1: 		return url;
1: 	}
1: 
1: 	/**
1: 	  Get an InputStream for reading a resource.
1: 
1: 	  @param packageName the name of the resource package
1: 	  @param name the name of the resourse.
1: 	  @exception Exception Oops.
1: 	  */
1: 	public static InputStream
1: 	getResourceAsStream(String packageName, String name)
1: 	{
1: 		String resourceName =
1: 			"/"+
1: 			packageName.replace('.','/')+
1: 			"/"+
1: 			name;
1: 		//
1: 		//We need a class to get our URL. Since we give a
1: 		//fully qualified name for the URL, any class will
1: 		//do.
1: 		Class c = resourceName.getClass();
1: 		InputStream result = c.getResourceAsStream(resourceName);
1: 		return result;
1: 	}
1: 
1: 	public	static	boolean	deleteFile( String outputFileName )
1: 		 throws Exception
1: 	{
1: 		File f = new File( outputFileName );
1: 
1: 		return f.delete();
1: 	}
1: 
1: 	public static String mkFileFromResource
1: 	(String packageName, String resourceName)
1: 		 throws Exception
1: 	{
1: 		return mkFileFromResource( packageName, resourceName, resourceName );
1: 	}
1: 
1: 	public static String mkFileFromResource
1: 	( String packageName, String resourceName, String outputFileName )
1: 		 throws Exception
1: 	{
1: 		File f = new File( outputFileName );
1: 		InputStream is = getResourceAsStream(packageName,resourceName);
1: 		BufferedInputStream bis = new BufferedInputStream(is);
1: 		OutputStream os = new FileOutputStream(f);
1: 		byte[]buf=new byte[4096];
1: 		int readThisTime = 0;
1: 		while((readThisTime = bis.read(buf)) != -1)
1: 			os.write(buf,0,readThisTime);
1: 		os.close();
1: 		return f.getAbsolutePath();
1: 	}
1: }
1:  
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.DbFile
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.util;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.FileResource;
0: import java.io.BufferedInputStream;
0: import java.io.BufferedReader;
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.InputStreamReader;
0: import java.io.OutputStream;
0: import java.lang.StringBuffer;
0: import java.net.URL;
1: 
0: /**
0:   Utility class for testing files stored in the database.
0:   */ 
0: public class DbFile
0: {
0: 	/**
0: 	  Read the current generation of a file stored in the
0: 	  database we are connected to and return a 1 line string
0: 	  representation of the file.
1: 
0: 	  Sample usage
0: 	  values org.apache.derbyTesting.functionTests.util.DbFile::readAsString('S1','J1');
0: 	  @exception Exception Oops.
0: 	  */
0: /*	
0: CANT USE JarAccess - not a public API (actually it's gone!)
0: public static String
0: 	readAsString(String schemaName, String sqlName)
0: 		 throws Exception
0: 	{
0: 		InputStream is = JarAccess.getAsStream(schemaName,
0: 											sqlName,
0:  											FileResource.CURRENT_GENERATION_ID);
0: 		return stringFromFile(is);
0: 	}
0: */
0: 	/**
0: 	  Create a string that contains a representation of the content of
0: 	  a file for testing.
0: 	  @exception Exception Oops.
0: 	  */
0: 	public static String
0: 	stringFromFile(InputStream is)
0: 		 throws Exception
0: 	{
0: 		InputStreamReader isr = new InputStreamReader(is);
0: 		BufferedReader br =
0: 			new BufferedReader(isr);
0: 		StringBuffer sb = new StringBuffer();
0: 		String l;
0: 		while((l = br.readLine()) != null) {
0: 			sb.append(l);
0: 			sb.append("<CR>");
0: 		}
0: 		is.close();
0: 		return sb.toString();
0: 	}
1: 
0: 	/**
0: 	  Get the URL for a resource.
1: 
0: 	  @param packageName the name of the resource package
0: 	  @param name the name of the resourse.
0: 	  */
0: 	public static URL
0: 	getResourceURL(String packageName, String name)
0: 	{
0: 		String resourceName =
0: 			"/"+
0: 			packageName.replace('.','/')+
0: 			"/"+
0: 			name;
0: 		//
0: 		//We need a class to get our URL. Since we give a
0: 		//fully qualified name for the URL, any class will
0: 		//do.
0: 		Class c = resourceName.getClass();
0: 		URL url = c.getResource(resourceName);
0: 		return url;
0: 	}
1: 
0: 	/**
0: 	  Get an InputStream for reading a resource.
1: 
0: 	  @param packageName the name of the resource package
0: 	  @param name the name of the resourse.
0: 	  @exception Exception Oops.
0: 	  */
0: 	public static InputStream
0: 	getResourceAsStream(String packageName, String name)
0: 	{
0: 		String resourceName =
0: 			"/"+
0: 			packageName.replace('.','/')+
0: 			"/"+
0: 			name;
0: 		//
0: 		//We need a class to get our URL. Since we give a
0: 		//fully qualified name for the URL, any class will
0: 		//do.
0: 		Class c = resourceName.getClass();
0: 		InputStream result = c.getResourceAsStream(resourceName);
0: 		return result;
0: 	}
1: 
0: 	public	static	boolean	deleteFile( String outputFileName )
0: 		 throws Exception
0: 	{
0: 		File f = new File( outputFileName );
1: 
0: 		return f.delete();
0: 	}
1: 
0: 	public static String mkFileFromResource
0: 	(String packageName, String resourceName)
0: 		 throws Exception
0: 	{
0: 		return mkFileFromResource( packageName, resourceName, resourceName );
0: 	}
1: 
0: 	public static String mkFileFromResource
0: 	( String packageName, String resourceName, String outputFileName )
0: 		 throws Exception
0: 	{
0: 		File f = new File( outputFileName );
0: 		InputStream is = getResourceAsStream(packageName,resourceName);
0: 		BufferedInputStream bis = new BufferedInputStream(is);
0: 		OutputStream os = new FileOutputStream(f);
0: 		byte[]buf=new byte[4096];
0: 		int readThisTime = 0;
0: 		while((readThisTime = bis.read(buf)) != -1)
0: 			os.write(buf,0,readThisTime);
0: 		os.close();
0: 		return f.getAbsolutePath();
0: 	}
0: }
1:  
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.util.DbFile
0: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================