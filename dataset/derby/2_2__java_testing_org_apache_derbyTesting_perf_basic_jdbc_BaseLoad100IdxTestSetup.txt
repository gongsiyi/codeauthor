1:c3bf4ea: /*
1:c3bf4ea: 
1:c3bf4ea: Derby - Class org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100IdxTestSetup
1:c3bf4ea: 
1:c3bf4ea: Licensed to the Apache Software Foundation (ASF) under one or more
1:c3bf4ea: contributor license agreements.  See the NOTICE file distributed with
1:c3bf4ea: this work for additional information regarding copyright ownership.
1:c3bf4ea: The ASF licenses this file to You under the Apache License, Version 2.0
1:c3bf4ea: (the "License"); you may not use this file except in compliance with
1:c3bf4ea: the License.  You may obtain a copy of the License at
1:c3bf4ea: 
1:c3bf4ea:    http://www.apache.org/licenses/LICENSE-2.0
1:c3bf4ea: 
1:c3bf4ea: Unless required by applicable law or agreed to in writing, software
1:c3bf4ea: distributed under the License is distributed on an "AS IS" BASIS,
1:c3bf4ea: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c3bf4ea: See the License for the specific language governing permissions and
1:c3bf4ea: limitations under the License.
1:c3bf4ea: 
1:c3bf4ea: */
1:c3bf4ea: package org.apache.derbyTesting.perf.basic.jdbc;
1:c3bf4ea: 
1:c3bf4ea: import java.sql.Statement;
1:c3bf4ea: import java.sql.SQLException;
1:c3bf4ea: import junit.framework.Test;
1:c3bf4ea: 
1:c3bf4ea: /**
1:c3bf4ea:  * Extend the BaseLoad100TestSetup to add indexes
1:c3bf4ea:  * Base table is similar to BaseLoad100TestSetup and the algorithm to load data is the same
1:c3bf4ea:  * @see BaseLoad100TestSetup
1:c3bf4ea:  */
1:c3bf4ea: public class BaseLoad100IdxTestSetup extends BaseLoad100TestSetup {
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * constructor
1:c3bf4ea:      * @param test name of the test
1:c3bf4ea:      */
1:c3bf4ea:     public BaseLoad100IdxTestSetup(Test test) {
1:c3bf4ea:         super(test);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * @param test name of test
2:c3bf4ea:      * @param rowsToLoad number of rows to insert
1:c3bf4ea:      */
1:c3bf4ea:     public BaseLoad100IdxTestSetup(Test test, int rowsToLoad)
1:c3bf4ea:     {
1:c3bf4ea:         super(test);
1:c3bf4ea:         this.rowsToLoad=rowsToLoad;
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * @param test name of the test
1:c3bf4ea:      * @param tableName name of the table to insert the rows into
1:c3bf4ea:      */
1:c3bf4ea:     public BaseLoad100IdxTestSetup(Test test, String tableName)
1:c3bf4ea:     {
1:c3bf4ea:         super(test);
1:c3bf4ea:         this.tableName = tableName;
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * @param test name of test
1:df4020d:      * @param rowcount number of rows to insert
1:c3bf4ea:      * @param tableName name of the table to insert the rows into
1:c3bf4ea:      */
1:c3bf4ea:      public BaseLoad100IdxTestSetup(Test test,int rowcount, String tableName)
1:c3bf4ea:     {
1:c3bf4ea:         super(test,rowcount,tableName);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Override the decorateSQL and create the necessary schema.
1:c3bf4ea:      * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1:c3bf4ea:      */
1:c3bf4ea:     protected void decorateSQL(Statement s)
1:c3bf4ea:         throws SQLException
1:c3bf4ea:     {
1:c3bf4ea:         s.execute("CREATE TABLE " +tableName+" ("
1:c3bf4ea:                 + "i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, "
1:c3bf4ea:                 + "c6 CHAR(20), c7 CHAR(20), c8 CHAR(20), c9 CHAR(20))");
1:c3bf4ea:         s.execute("CREATE UNIQUE INDEX " +tableName +"x on "+ tableName+"(i1,i3)");
1:c3bf4ea: 
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea: 
1:c3bf4ea: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
1:      * @param rowcount number of rows to insert
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c3bf4ea
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100IdxTestSetup
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.perf.basic.jdbc;
1: 
1: import java.sql.Statement;
1: import java.sql.SQLException;
1: import junit.framework.Test;
1: 
1: /**
1:  * Extend the BaseLoad100TestSetup to add indexes
1:  * Base table is similar to BaseLoad100TestSetup and the algorithm to load data is the same
1:  * @see BaseLoad100TestSetup
1:  */
1: public class BaseLoad100IdxTestSetup extends BaseLoad100TestSetup {
1: 
1:     /**
1:      * constructor
1:      * @param test name of the test
1:      */
1:     public BaseLoad100IdxTestSetup(Test test) {
1:         super(test);
1:     }
1: 
1:     /**
1:      * @param test name of test
1:      * @param rowsToLoad number of rows to insert
1:      */
1:     public BaseLoad100IdxTestSetup(Test test, int rowsToLoad)
1:     {
1:         super(test);
1:         this.rowsToLoad=rowsToLoad;
1:     }
1: 
1:     /**
1:      * @param test name of the test
1:      * @param tableName name of the table to insert the rows into
1:      */
1:     public BaseLoad100IdxTestSetup(Test test, String tableName)
1:     {
1:         super(test);
1:         this.tableName = tableName;
1:     }
1: 
1:     /**
1:      * @param test name of test
1:      * @param rowsToLoad number of rows to insert
1:      * @param tableName name of the table to insert the rows into
1:      */
1:      public BaseLoad100IdxTestSetup(Test test,int rowcount, String tableName)
1:     {
1:         super(test,rowcount,tableName);
1:     }
1: 
1:     /**
1:      * Override the decorateSQL and create the necessary schema.
1:      * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1:      */
1:     protected void decorateSQL(Statement s)
1:         throws SQLException
1:     {
1:         s.execute("CREATE TABLE " +tableName+" ("
1:                 + "i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, "
1:                 + "c6 CHAR(20), c7 CHAR(20), c8 CHAR(20), c9 CHAR(20))");
1:         s.execute("CREATE UNIQUE INDEX " +tableName +"x on "+ tableName+"(i1,i3)");
1: 
1:     }
1: 
1: 
1: }
============================================================================