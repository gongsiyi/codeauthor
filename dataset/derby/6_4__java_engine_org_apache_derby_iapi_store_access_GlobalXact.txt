1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.GlobalXact
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: This abstract class represents a global transaction id which can be tested
1:eac0369: for equality against other transaction ids, which can be hashed into a
1:eac0369: hash table, and which can be output as a string. 
1:eac0369: <P>
1:eac0369: This class has 2 direct subclasses. 
1:eac0369: <UL>
1:eac0369: <LI> org.apache.derby.iapi.store.access.xa.XAXactId : 
1:eac0369: this class is a specific implementation of the JTA Xid interface
1:eac0369: <LI> org.apache.derby.impl.store.access.GlobalXactId : 
1:3fd26f3: this class represents internal Derby transaction ids
1:eac0369: </UL>
1:eac0369: <P>
1:eac0369: The main reason for this class is to ensure that equality etc. works in a
1:eac0369: consistent way across both subclasses. 
1:eac0369: **/
1:eac0369: 
1:eac0369: public abstract class GlobalXact {
1:eac0369:     
1:eac0369:     /**************************************************************************
1:eac0369:      * Protected Fields of the class
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     protected int     format_id;
1:eac0369:     protected byte[]  global_id;
1:eac0369:     protected byte[]  branch_id;
1:eac0369: 
1:eac0369:     public boolean equals(Object other) 
1:eac0369:     {
1:eac0369: 		if (other == this)
1:eac0369: 			return true;
1:eac0369: 
1:eac0369: 		if (other instanceof GlobalXact) {
1:eac0369: 	
1:eac0369: 			GlobalXact other_xact = (GlobalXact) other;
1:eac0369: 		
1:eac0369: 			return(
1:eac0369: 				   java.util.Arrays.equals(
1:eac0369: 									other_xact.global_id,
1:eac0369: 									this.global_id)          &&
1:eac0369: 				   java.util.Arrays.equals(
1:eac0369: 									other_xact.branch_id,
1:eac0369: 									this.branch_id)          &&
1:eac0369: 				   other_xact.format_id == this.format_id);
1:eac0369: 		
1:eac0369: 	    }
1:eac0369: 
1:eac0369: 		return false;	
1:eac0369:     }
1:eac0369: 
1:eac0369:     public String toString()
1:eac0369:     {
1:eac0369: 		String globalhex = "";
1:eac0369: 		String branchhex = "";
1:eac0369: 		if (global_id != null) 
1:eac0369: 	    {
1:eac0369: 			int mask = 0;
1:eac0369: 			for (int i = 0; i < global_id.length; i++)
1:eac0369: 		    {
1:eac0369: 				mask = (global_id[i] & 0xFF);
1:2dabeef:                 if (mask < 16) {
1:2dabeef:                     globalhex += "0" + Integer.toHexString(mask);
1:2dabeef:                 } else {
1:2dabeef:                     globalhex += Integer.toHexString(mask);
1:2dabeef:                 }
1:eac0369: 		    }
1:eac0369: 	    }
1:eac0369: 	
1:eac0369: 		if (branch_id != null)
1:eac0369: 	    {
1:eac0369: 			int mask = 0;
1:eac0369: 			for (int i = 0; i < branch_id.length; i++)
1:eac0369: 		    {
1:eac0369: 				mask = (branch_id[i] & 0xFF);
1:2dabeef:                 if (mask < 16) {
1:2dabeef:                     branchhex += "0" + Integer.toHexString(mask);
1:2dabeef:                 } else {
1:2dabeef:                     branchhex += Integer.toHexString(mask);
1:2dabeef:                 }
1:eac0369: 		    }
1:eac0369: 	    }
1:eac0369: 
1:eac0369: 		return("(" + format_id + "," + globalhex + "," + branchhex + ")");
1:eac0369: 	
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:        Provide a hashCode which is compatable with the equals() method.
1:eac0369:        
1:eac0369:        @see java.lang.Object#hashCode
1:eac0369:     **/
1:eac0369:     public int hashCode()
1:eac0369:     {
1:eac0369: 		// make sure hash does not overflow int, the only unknown is
1:eac0369: 		// format_id.  Lop off top bits.
1:eac0369: 		int hash = global_id.length + branch_id.length + (format_id & 0xFFFFFFF);
1:eac0369: 
1:eac0369: 		for (int i = 0; i < global_id.length; i++) 
1:eac0369: 	    {
1:eac0369: 			hash += global_id[i];
1:eac0369: 	    }
1:eac0369: 		for (int i = 0; i < branch_id.length; i++) 
1:eac0369: 	    {
1:eac0369: 			hash += branch_id[i];
1:eac0369: 	    }
1:eac0369: 	
1:eac0369: 		return(hash);
1:eac0369:     }
1:eac0369:     
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2dabeef
/////////////////////////////////////////////////////////////////////////
1:                 if (mask < 16) {
1:                     globalhex += "0" + Integer.toHexString(mask);
1:                 } else {
1:                     globalhex += Integer.toHexString(mask);
1:                 }
/////////////////////////////////////////////////////////////////////////
1:                 if (mask < 16) {
1:                     branchhex += "0" + Integer.toHexString(mask);
1:                 } else {
1:                     branchhex += Integer.toHexString(mask);
1:                 }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: this class represents internal Derby transaction ids
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.GlobalXact
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: 
1: /**
1: 
1: This abstract class represents a global transaction id which can be tested
1: for equality against other transaction ids, which can be hashed into a
1: hash table, and which can be output as a string. 
1: <P>
1: This class has 2 direct subclasses. 
1: <UL>
1: <LI> org.apache.derby.iapi.store.access.xa.XAXactId : 
1: this class is a specific implementation of the JTA Xid interface
1: <LI> org.apache.derby.impl.store.access.GlobalXactId : 
0: this class represents internal cloudscape transaction ids
1: </UL>
1: <P>
1: The main reason for this class is to ensure that equality etc. works in a
1: consistent way across both subclasses. 
1: **/
1: 
1: public abstract class GlobalXact {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:     
1:     /**************************************************************************
1:      * Protected Fields of the class
1:      **************************************************************************
1:      */
1:     protected int     format_id;
1:     protected byte[]  global_id;
1:     protected byte[]  branch_id;
1: 
1:     public boolean equals(Object other) 
1:     {
1: 		if (other == this)
1: 			return true;
1: 
1: 		if (other instanceof GlobalXact) {
1: 	
1: 			GlobalXact other_xact = (GlobalXact) other;
1: 		
1: 			return(
1: 				   java.util.Arrays.equals(
1: 									other_xact.global_id,
1: 									this.global_id)          &&
1: 				   java.util.Arrays.equals(
1: 									other_xact.branch_id,
1: 									this.branch_id)          &&
1: 				   other_xact.format_id == this.format_id);
1: 		
1: 	    }
1: 
1: 		return false;	
1:     }
1: 
1:     public String toString()
1:     {
1: 		String globalhex = "";
1: 		String branchhex = "";
1: 		if (global_id != null) 
1: 	    {
1: 			int mask = 0;
1: 			for (int i = 0; i < global_id.length; i++)
1: 		    {
1: 				mask = (global_id[i] & 0xFF);
0: 				globalhex += Integer.toHexString(mask);
1: 		    }
1: 	    }
1: 	
1: 		if (branch_id != null)
1: 	    {
1: 			int mask = 0;
1: 			for (int i = 0; i < branch_id.length; i++)
1: 		    {
1: 				mask = (branch_id[i] & 0xFF);
0: 				branchhex += Integer.toHexString(mask);
1: 		    }
1: 	    }
1: 
1: 		return("(" + format_id + "," + globalhex + "," + branchhex + ")");
1: 	
1:     }
1: 
1: 
1:     /**
1:        Provide a hashCode which is compatable with the equals() method.
1:        
1:        @see java.lang.Object#hashCode
1:     **/
1:     public int hashCode()
1:     {
1: 		// make sure hash does not overflow int, the only unknown is
1: 		// format_id.  Lop off top bits.
1: 		int hash = global_id.length + branch_id.length + (format_id & 0xFFFFFFF);
1: 
1: 		for (int i = 0; i < global_id.length; i++) 
1: 	    {
1: 			hash += global_id[i];
1: 	    }
1: 		for (int i = 0; i < branch_id.length; i++) 
1: 	    {
1: 			hash += branch_id[i];
1: 	    }
1: 	
1: 		return(hash);
1:     }
1:     
1: }
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: 
0: /**
0: 
0: This abstract class represents a global transaction id which can be tested
0: for equality against other transaction ids, which can be hashed into a
0: hash table, and which can be output as a string. 
0: <P>
0: This class has 2 direct subclasses. 
0: <UL>
0: <LI> org.apache.derby.iapi.store.access.xa.XAXactId : 
0: this class is a specific implementation of the JTA Xid interface
0: <LI> org.apache.derby.impl.store.access.GlobalXactId : 
0: this class represents internal cloudscape transaction ids
0: </UL>
0: <P>
0: The main reason for this class is to ensure that equality etc. works in a
0: consistent way across both subclasses. 
0: **/
0: 
0: public abstract class GlobalXact {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0:     
0:     /**************************************************************************
0:      * Protected Fields of the class
0:      **************************************************************************
0:      */
0:     protected int     format_id;
0:     protected byte[]  global_id;
0:     protected byte[]  branch_id;
0: 
0:     public boolean equals(Object other) 
0:     {
0: 		if (other == this)
0: 			return true;
0: 
0: 		if (other instanceof GlobalXact) {
0: 	
0: 			GlobalXact other_xact = (GlobalXact) other;
0: 		
0: 			return(
0: 				   java.util.Arrays.equals(
0: 									other_xact.global_id,
0: 									this.global_id)          &&
0: 				   java.util.Arrays.equals(
0: 									other_xact.branch_id,
0: 									this.branch_id)          &&
0: 				   other_xact.format_id == this.format_id);
0: 		
0: 	    }
0: 
0: 		return false;	
0:     }
0: 
0:     public String toString()
0:     {
0: 		String globalhex = "";
0: 		String branchhex = "";
0: 		if (global_id != null) 
0: 	    {
0: 			int mask = 0;
0: 			for (int i = 0; i < global_id.length; i++)
0: 		    {
0: 				mask = (global_id[i] & 0xFF);
0: 				globalhex += Integer.toHexString(mask);
0: 		    }
0: 	    }
0: 	
0: 		if (branch_id != null)
0: 	    {
0: 			int mask = 0;
0: 			for (int i = 0; i < branch_id.length; i++)
0: 		    {
0: 				mask = (branch_id[i] & 0xFF);
0: 				branchhex += Integer.toHexString(mask);
0: 		    }
0: 	    }
0: 
0: 		return("(" + format_id + "," + globalhex + "," + branchhex + ")");
0: 	
0:     }
0: 
0: 
0:     /**
0:        Provide a hashCode which is compatable with the equals() method.
0:        
0:        @see java.lang.Object#hashCode
0:     **/
0:     public int hashCode()
0:     {
0: 		// make sure hash does not overflow int, the only unknown is
0: 		// format_id.  Lop off top bits.
0: 		int hash = global_id.length + branch_id.length + (format_id & 0xFFFFFFF);
0: 
0: 		for (int i = 0; i < global_id.length; i++) 
0: 	    {
0: 			hash += global_id[i];
0: 	    }
0: 		for (int i = 0; i < branch_id.length; i++) 
0: 	    {
0: 			hash += branch_id[i];
0: 	    }
0: 	
0: 		return(hash);
0:     }
0:     
0: }
0: 
0: 
0: 
============================================================================