1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_Cacheable
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.cache.*;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 
1:2bc809f: */
1:2bc809f: public abstract class T_Cacheable implements Cacheable {
1:2bc809f: 
1:2bc809f: 	protected boolean	isDirty;
1:2bc809f: 
1:2bc809f: 	protected Thread       owner;
1:2bc809f: 		
1:2bc809f: 	public T_Cacheable() {
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Cacheable methods
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	public Cacheable setIdentity(Object key) throws StandardException {
1:2bc809f: 		// we expect a key of type Object[]
1:2bc809f: 		if (!(key instanceof T_Key)) {
1:2bc809f: 			throw T_CacheException.invalidKey();
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		owner = null;
1:2bc809f: 
1:2bc809f: 		return null; // must be overriden by super class	
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException {
1:2bc809f: 
1:2bc809f: 		// we expect a key of type Object[]
1:2bc809f: 		if (!(key instanceof T_Key)) {
1:2bc809f: 			throw T_CacheException.invalidKey();
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		owner = (Thread) createParameter;
1:2bc809f: 
1:2bc809f: 		return null; // must be overriden by super class
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Returns true of the object is dirty. Will only be called when the object is unkept.
1:2bc809f: 
1:2bc809f: 		<BR> MT - thread safe 
1:2bc809f: 
1:2bc809f: 	*/
1:2bc809f: 	public boolean isDirty() {
1:2bc809f: 		synchronized (this) {
1:2bc809f: 			return isDirty;
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	public void clean(boolean forRemove) throws StandardException {
1:2bc809f: 		synchronized (this) {
1:2bc809f: 			isDirty = false;
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Implementation specific methods
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	protected Cacheable getCorrectObject(Object keyValue) throws StandardException {
1:2bc809f: 
1:2bc809f: 		Cacheable correctType;
1:2bc809f: 
1:2bc809f: 		if (keyValue instanceof Integer) {
1:2bc809f: 
1:2bc809f: 			correctType = new T_CachedInteger();
1:2bc809f: 		//} else if (keyValue instanceof String) {
1:2bc809f: 			//correctType = new T_CachedString();
1:2bc809f: 		} else {
1:2bc809f: 
1:2bc809f: 			throw T_CacheException.invalidKey();
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		return correctType;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	protected boolean dummySet(T_Key tkey) throws StandardException {
1:2bc809f: 
1:2bc809f: 		// first wait
1:2bc809f: 		if (tkey.getWait() != 0) {
1:2bc809f: 			synchronized (this) {
1:2bc809f: 
1:2bc809f: 				try {
1:2bc809f: 					wait(tkey.getWait());
1:2bc809f: 				} catch (InterruptedException ie) {
1:2bc809f: 					// RESOLVE
1:2bc809f: 				}
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (!tkey.canFind())
1:2bc809f: 			return false;
1:2bc809f: 
1:2bc809f: 		if (tkey.raiseException())
1:2bc809f: 			throw T_CacheException.identityFail();
1:2bc809f: 
1:2bc809f: 		return true;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void setDirty() {
1:2bc809f: 		synchronized (this) {
1:2bc809f: 			isDirty = true;
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean canRemove() {
1:2bc809f: 
1:2bc809f: 		synchronized (this) {
1:2bc809f: 			if (owner == null)
1:2bc809f: 				owner = Thread.currentThread();
1:2bc809f: 
1:2bc809f: 			if (owner == Thread.currentThread())
1:2bc809f: 				return true;
1:2bc809f: 			return false;
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: }
1:2bc809f: 
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_Cacheable
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: import org.apache.derby.iapi.services.cache.*;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1: 
1: */
1: public abstract class T_Cacheable implements Cacheable {
1: 
1: 	protected boolean	isDirty;
1: 
1: 	protected Thread       owner;
1: 		
1: 	public T_Cacheable() {
1: 	}
1: 
1: 	/*
1: 	** Cacheable methods
1: 	*/
1: 
1: 	public Cacheable setIdentity(Object key) throws StandardException {
1: 		// we expect a key of type Object[]
1: 		if (!(key instanceof T_Key)) {
1: 			throw T_CacheException.invalidKey();
1: 		}
1: 
1: 		owner = null;
1: 
1: 		return null; // must be overriden by super class	
1: 	}
1: 
1: 
1: 
1: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException {
1: 
1: 		// we expect a key of type Object[]
1: 		if (!(key instanceof T_Key)) {
1: 			throw T_CacheException.invalidKey();
1: 		}
1: 
1: 		owner = (Thread) createParameter;
1: 
1: 		return null; // must be overriden by super class
1: 	}
1: 
1: 	/**
1: 		Returns true of the object is dirty. Will only be called when the object is unkept.
1: 
1: 		<BR> MT - thread safe 
1: 
1: 	*/
1: 	public boolean isDirty() {
1: 		synchronized (this) {
1: 			return isDirty;
1: 		}
1: 	}
1: 
1: 
1: 
1: 	public void clean(boolean forRemove) throws StandardException {
1: 		synchronized (this) {
1: 			isDirty = false;
1: 		}
1: 	}
1: 
1: 	/*
1: 	** Implementation specific methods
1: 	*/
1: 
1: 	protected Cacheable getCorrectObject(Object keyValue) throws StandardException {
1: 
1: 		Cacheable correctType;
1: 
1: 		if (keyValue instanceof Integer) {
1: 
1: 			correctType = new T_CachedInteger();
1: 		//} else if (keyValue instanceof String) {
1: 			//correctType = new T_CachedString();
1: 		} else {
1: 
1: 			throw T_CacheException.invalidKey();
1: 		}
1: 
1: 		return correctType;
1: 	}
1: 
1: 	protected boolean dummySet(T_Key tkey) throws StandardException {
1: 
1: 		// first wait
1: 		if (tkey.getWait() != 0) {
1: 			synchronized (this) {
1: 
1: 				try {
1: 					wait(tkey.getWait());
1: 				} catch (InterruptedException ie) {
1: 					// RESOLVE
1: 				}
1: 			}
1: 		}
1: 
1: 		if (!tkey.canFind())
1: 			return false;
1: 
1: 		if (tkey.raiseException())
1: 			throw T_CacheException.identityFail();
1: 
1: 		return true;
1: 	}
1: 
1: 	public void setDirty() {
1: 		synchronized (this) {
1: 			isDirty = true;
1: 		}
1: 	}
1: 
1: 	public boolean canRemove() {
1: 
1: 		synchronized (this) {
1: 			if (owner == null)
1: 				owner = Thread.currentThread();
1: 
1: 			if (owner == Thread.currentThread())
1: 				return true;
1: 			return false;
1: 		}
1: 	}
1: }
1: 
============================================================================