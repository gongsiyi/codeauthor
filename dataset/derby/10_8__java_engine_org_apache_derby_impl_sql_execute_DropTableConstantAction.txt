1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.DropTableConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.StatementType;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DefaultDescriptor;
1:801cf0d: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptorList;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:c44e39a: import java.util.Iterator;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This class  describes actions that are ALWAYS performed for a
1:eac0369:  *	DROP TABLE Statement at Execution time.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: class DropTableConstantAction extends DDLSingleTableConstantAction
2:eac0369: {
1:eac0369: 
1:eac0369: 	private final long				conglomerateNumber;
1:eac0369: 	private final String				fullTableName;
1:eac0369: 	private final String				tableName;
1:eac0369: 	private final SchemaDescriptor	sd;
1:eac0369: 	private final boolean 	cascade; 		
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make the ConstantAction for a DROP TABLE statement.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 *	@param	fullTableName		Fully qualified table name
1:eac0369: 	 *	@param	tableName			Table name.
1:eac0369: 	 *	@param	sd					Schema that table lives in.
1:6b50965: 	 *  @param  conglomerateNumber	Conglomerate number for heap
1:eac0369: 	 *  @param  tableId				UUID for table
1:eac0369: 	 *  @param  behavior			drop behavior: RESTRICT, CASCADE or default
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	DropTableConstantAction(
1:eac0369: 								String				fullTableName,
1:eac0369: 								String				tableName,
1:eac0369: 								SchemaDescriptor	sd,
1:eac0369: 								long				conglomerateNumber,
1:eac0369: 								UUID				tableId,
1:eac0369: 								int					behavior)
1:eac0369: 	{
1:eac0369: 		super(tableId);
1:eac0369: 		this.fullTableName = fullTableName;
1:eac0369: 		this.tableName = tableName;
1:eac0369: 		this.sd = sd;
1:eac0369: 		this.conglomerateNumber = conglomerateNumber;
1:eac0369: 		this.cascade = (behavior == StatementType.DROP_CASCADE);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(sd != null, "SchemaDescriptor is null");
2:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// OBJECT METHODS
1:eac0369: 
1:eac0369: 	public	String	toString()
1:eac0369: 	{
1:eac0369: 		// Do not put this under SanityManager.DEBUG - it is needed for
1:eac0369: 		// error reporting.
1:eac0369: 		return "DROP TABLE " + fullTableName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	This is the guts of the Execution-time logic for DROP TABLE.
1:eac0369: 	 *
1:eac0369: 	 *	@see ConstantAction#executeConstantAction
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void	executeConstantAction( Activation activation )
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:eac0369: 		TableDescriptor td;
1:eac0369: 		UUID tableID;
1:eac0369: 		ConglomerateDescriptor[] cds;
1:eac0369: 
1:eac0369: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:eac0369: 		DataDictionary dd = lcc.getDataDictionary();
1:eac0369: 		DependencyManager dm = dd.getDependencyManager();
1:eac0369: 		TransactionController tc = lcc.getTransactionExecute();
1:eac0369: 
1:eac0369: 		if ((sd != null) && sd.getSchemaName().equals(SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME)) {
1:eac0369: 			td = lcc.getTableDescriptorForDeclaredGlobalTempTable(tableName); //check if this is a temp table before checking data dictionary
1:eac0369: 
1:eac0369: 			if (td == null) //td null here means it is not a temporary table. Look for table in physical SESSION schema
1:0978789: 				td = dd.getTableDescriptor(tableName, sd, tc);
1:eac0369: 
1:eac0369: 			if (td == null) //td null means tableName is not a temp table and it is not a physical table in SESSION schema
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, fullTableName);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (td.getTableType() ==  TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE) {
1:eac0369: 				dm.invalidateFor(td, DependencyManager.DROP_TABLE, lcc);
1:eac0369: 				tc.dropConglomerate(td.getHeapConglomerateId());
1:eac0369: 				lcc.dropDeclaredGlobalTempTable(tableName);
1:eac0369: 				return;
1:7fd0c6e: 			}
1:eac0369:         }
1:eac0369: 
1:eac0369: 		/* Lock the table before we access the data dictionary
1:eac0369: 		 * to prevent deadlocks.
1:eac0369: 		 *
1:eac0369: 		 * Note that for DROP TABLE replayed at Targets during REFRESH,
1:eac0369: 		 * the conglomerateNumber will be 0. That's ok. During REFRESH,
1:eac0369: 		 * we don't need to lock the conglomerate.
1:eac0369: 		 */
1:eac0369: 		if ( conglomerateNumber != 0 ) { lockTableForDDL(tc, conglomerateNumber, true); }
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Inform the data dictionary that we are about to write to it.
1:eac0369: 		** There are several calls to data dictionary "get" methods here
1:eac0369: 		** that might be done in "read" mode in the data dictionary, but
1:eac0369: 		** it seemed safer to do this whole operation in "write" mode.
1:eac0369: 		**
1:eac0369: 		** We tell the data dictionary we're done writing at the end of
1:eac0369: 		** the transaction.
1:eac0369: 		*/
1:eac0369: 		dd.startWriting(lcc);
1:eac0369: 
1:eac0369: 		/* Get the table descriptor. */
1:eac0369: 		td = dd.getTableDescriptor(tableId);
1:eac0369: 
1:eac0369: 		if (td == null)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, fullTableName);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Get an exclusive table lock on the table. */
1:eac0369: 		long heapId = td.getHeapConglomerateId();
1:eac0369: 		lockTableForDDL(tc, heapId, true);
1:eac0369: 
1:eac0369: 		/* Drop the triggers */
1:801cf0d:         for (TriggerDescriptor trd : dd.getTriggerDescriptors(td)) {
1:9213b42:             trd.drop(lcc);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Drop all defaults */
1:eac0369: 		ColumnDescriptorList cdl = td.getColumnDescriptorList();
1:eac0369: 		
1:801cf0d:         for (ColumnDescriptor cd : cdl)
1:eac0369: 		{
1:7fd0c6e:             //
1:7fd0c6e:             // If we are at level 10.11 or higher, then we need to drop the
1:7fd0c6e:             // sequence generator which backs the identity column.
1:7fd0c6e:             // See DERBY-6542.
1:7fd0c6e:             //
1:7fd0c6e:             if (
1:7fd0c6e:                 cd.isAutoincrement() &&
1:7fd0c6e:                 dd.checkVersion( DataDictionary.DD_VERSION_DERBY_10_11, null )
1:7fd0c6e:                 )
1:7fd0c6e:             {
1:7fd0c6e:                 dropIdentitySequence( dd, td, activation );
1:7fd0c6e:             }
1:7fd0c6e:             
1:eac0369: 			// If column has a default we drop the default and
1:eac0369: 			// any dependencies
1:eac0369: 			if (cd.getDefaultInfo() != null)
1:eac0369: 			{
1:eac0369: 				DefaultDescriptor defaultDesc = cd.getDefaultDescriptor(dd);
1:eac0369: 				dm.clearDependencies(lcc, defaultDesc);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Drop the columns */
1:eac0369: 		dd.dropAllColumnDescriptors(tableId, tc);
1:eac0369: 
1:b7e13a9: 		/* Drop all table and column permission descriptors */
1:b7e13a9: 		dd.dropAllTableAndColPermDescriptors(tableId, tc);
1:eac0369: 
1:eac0369: 		/* Drop the constraints */
1:eac0369: 		dropAllConstraintDescriptors(td, activation);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Drop all the conglomerates.  Drop the heap last, because the
1:eac0369: 		** store needs it for locking the indexes when they are dropped.
1:eac0369: 		*/
1:eac0369: 		cds = td.getConglomerateDescriptors();
1:eac0369: 
1:eac0369: 		long[] dropped = new long[cds.length - 1];
1:eac0369: 		int numDropped = 0;
1:eac0369: 		for (int index = 0; index < cds.length; index++)
1:eac0369: 		{
1:eac0369: 			ConglomerateDescriptor cd = cds[index];
1:eac0369: 
1:eac0369: 			/* if it's for an index, since similar indexes share one
1:eac0369: 			 * conglomerate, we only drop the conglomerate once
1:eac0369: 			 */
1:eac0369: 			if (cd.getConglomerateNumber() != heapId)
1:eac0369: 			{
1:eac0369: 				long thisConglom = cd.getConglomerateNumber();
1:eac0369: 
1:eac0369: 				int i;
1:eac0369: 				for (i = 0; i < numDropped; i++)
1:eac0369: 				{
1:eac0369: 					if (dropped[i] == thisConglom)
1:eac0369: 						break;
1:eac0369: 				}
1:eac0369: 				if (i == numDropped)	// not dropped
1:eac0369: 				{
1:eac0369: 					dropped[numDropped++] = thisConglom;
1:eac0369: 					tc.dropConglomerate(thisConglom);
1:eac0369: 					dd.dropStatisticsDescriptors(td.getUUID(), cd.getUUID(), tc);
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Prepare all dependents to invalidate.  (This is there chance
1:eac0369: 		 * to say that they can't be invalidated.  For example, an open
1:eac0369: 		 * cursor referencing a table/view that the user is attempting to
1:eac0369: 		 * drop.) If no one objects, then invalidate any dependent objects.
1:eac0369: 		 * We check for invalidation before we drop the table descriptor
1:eac0369: 		 * since the table descriptor may be looked up as part of
1:eac0369: 		 * decoding tuples in SYSDEPENDS.
1:eac0369: 		 */
1:eac0369: 
1:93e7f0e: 		dm.invalidateFor(td, DependencyManager.DROP_TABLE, lcc);
1:eac0369: 
1:b8c6110:         //
1:b8c6110:         // The table itself can depend on the user defined types of its columns.
1:b8c6110:         // Drop all of those dependencies now.
1:b8c6110:         //
1:b8c6110:         adjustUDTDependencies( lcc, dd, td, null, true );
1:b8c6110: 
1:eac0369: 		/* Drop the table */
1:eac0369: 		dd.dropTableDescriptor(td, sd, tc);
1:eac0369: 
1:eac0369: 		/* Drop the conglomerate descriptors */
1:eac0369: 		dd.dropAllConglomerateDescriptors(td, tc);
1:eac0369: 
1:eac0369: 		/* Drop the store element at last, to prevent dangling reference
1:eac0369: 		 * for open cursor, beetle 4393.
1:eac0369: 		 */
1:eac0369: 		tc.dropConglomerate(heapId);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:7fd0c6e:     /** Drop the sequence generator backing an identity column */
1:7fd0c6e:     public  static  void    dropIdentitySequence
1:7fd0c6e:         ( DataDictionary dataDictionary, TableDescriptor tableDescriptor, Activation activation )
1:7fd0c6e:         throws StandardException
1:7fd0c6e:     {
1:7fd0c6e:         DropSequenceConstantAction  dsca = new DropSequenceConstantAction
1:7fd0c6e:             (
1:7fd0c6e:              dataDictionary.getSystemSchemaDescriptor(),
1:7fd0c6e:              TableDescriptor.makeSequenceName( tableDescriptor.getUUID() )
1:7fd0c6e:              );
1:7fd0c6e:         dsca.executeConstantAction( activation );
1:7fd0c6e:     }
1:7fd0c6e: 
1:eac0369: 	private void dropAllConstraintDescriptors(TableDescriptor td, Activation activation)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		ConstraintDescriptor				cd;
1:eac0369: 		ConstraintDescriptorList 			cdl;
1:eac0369: 		ConstraintDescriptor 				fkcd;
1:eac0369: 		ConstraintDescriptorList 			fkcdl;
1:eac0369: 		LanguageConnectionContext			lcc = activation.getLanguageConnectionContext();
1:eac0369: 		DataDictionary dd = lcc.getDataDictionary();
1:eac0369: 		DependencyManager dm = dd.getDependencyManager();
1:eac0369: 		TransactionController tc = lcc.getTransactionExecute();
1:eac0369: 
1:eac0369: 		cdl = dd.getConstraintDescriptors(td);
1:eac0369: 		
1:eac0369: 		/*
1:eac0369: 		** First go, don't drop unique or primary keys.
1:eac0369: 		** This will ensure that self-referential constraints
1:eac0369: 		** will work ok, even if not cascading.
1:eac0369: 	 	*/
1:eac0369: 		/* The current element will be deleted underneath
1:eac0369: 		 * the loop, so we only increment the counter when
1:eac0369: 		 * skipping an element. (HACK!)
1:eac0369: 		 */
1:eac0369: 		for(int index = 0; index < cdl.size(); )
1:eac0369: 		{
1:eac0369: 			cd = cdl.elementAt(index);
1:eac0369: 			if (cd instanceof ReferencedKeyConstraintDescriptor)
1:eac0369: 			{
1:eac0369: 				index++;
1:eac0369: 				continue;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			dm.invalidateFor(cd, DependencyManager.DROP_CONSTRAINT, lcc);
1:c437565: 			dropConstraint(cd, td, activation, lcc, true);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 	 	** Referenced keys (unique or pk) constraints only
1:eac0369: 		*/
1:eac0369: 		/* The current element will be deleted underneath
1:eac0369: 		 * the loop. (HACK!)
1:eac0369: 		 */
1:eac0369: 		while (cdl.size() > 0)
1:eac0369: 		{
1:eac0369: 			cd = cdl.elementAt(0);
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:eac0369: 				if (!(cd instanceof ReferencedKeyConstraintDescriptor))
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT("Constraint descriptor not an instance of " +
1:eac0369: 					"ReferencedKeyConstraintDescriptor as expected.  Is a "+ cd.getClass().getName());
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** Drop the referenced constraint (after we got
1:eac0369: 			** the primary keys) now.  Do this prior to
1:eac0369: 			** droping the referenced keys to avoid performing
1:eac0369: 			** a lot of extra work updating the referencedcount
1:eac0369: 			** field of sys.sysconstraints.
1:eac0369: 			**
1:eac0369: 			** Pass in false to dropConstraintsAndIndex so it
1:eac0369: 			** doesn't clear dependencies, we'll do that ourselves.
1:eac0369: 			*/
1:c437565: 			dropConstraint(cd, td, activation, lcc, false);
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** If we are going to cascade, get all the
1:eac0369: 			** referencing foreign keys and zap them first.
1:eac0369: 			*/
1:eac0369: 			if (cascade)
1:eac0369: 			{
1:eac0369: 				/*
1:eac0369: 				** Go to the system tables to get the foreign keys
1:eac0369: 				** to be safe
1:eac0369: 				*/
1:eac0369: 
1:eac0369: 				fkcdl = dd.getForeignKeys(cd.getUUID());
1:eac0369: 
1:eac0369: 				/*
1:eac0369: 				** For each FK that references this key, drop
1:eac0369: 				** it.
1:eac0369: 				*/
1:eac0369: 				for(int inner = 0; inner < fkcdl.size(); inner++)
1:eac0369: 				{
1:eac0369: 					fkcd = (ConstraintDescriptor) fkcdl.elementAt(inner);
1:eac0369: 					dm.invalidateFor(fkcd, DependencyManager.DROP_CONSTRAINT, lcc);
1:c437565: 					dropConstraint(fkcd, td, activation, lcc, true);
1:eac0369: 					activation.addWarning(
1:eac0369: 						StandardException.newWarning(SQLState.LANG_CONSTRAINT_DROPPED,
1:eac0369:  							fkcd.getConstraintName(),
1:eac0369: 							fkcd.getTableDescriptor().getName()));
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** Now that we got rid of the fks (if we were cascading), it is 
1:eac0369: 			** ok to do an invalidate for.
1:eac0369: 			*/
1:eac0369: 			dm.invalidateFor(cd, DependencyManager.DROP_CONSTRAINT, lcc);
1:eac0369: 			dm.clearDependencies(lcc, cd);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7fd0c6e
/////////////////////////////////////////////////////////////////////////
1:         }
/////////////////////////////////////////////////////////////////////////
1:             //
1:             // If we are at level 10.11 or higher, then we need to drop the
1:             // sequence generator which backs the identity column.
1:             // See DERBY-6542.
1:             //
1:             if (
1:                 cd.isAutoincrement() &&
1:                 dd.checkVersion( DataDictionary.DD_VERSION_DERBY_10_11, null )
1:                 )
1:             {
1:                 dropIdentitySequence( dd, td, activation );
1:             }
1:             
/////////////////////////////////////////////////////////////////////////
1:     /** Drop the sequence generator backing an identity column */
1:     public  static  void    dropIdentitySequence
1:         ( DataDictionary dataDictionary, TableDescriptor tableDescriptor, Activation activation )
1:         throws StandardException
1:     {
1:         DropSequenceConstantAction  dsca = new DropSequenceConstantAction
1:             (
1:              dataDictionary.getSystemSchemaDescriptor(),
1:              TableDescriptor.makeSequenceName( tableDescriptor.getUUID() )
1:              );
1:         dsca.executeConstantAction( activation );
1:     }
1: 
commit:b8c6110
/////////////////////////////////////////////////////////////////////////
1:         //
1:         // The table itself can depend on the user defined types of its columns.
1:         // Drop all of those dependencies now.
1:         //
1:         adjustUDTDependencies( lcc, dd, td, null, true );
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptorList;
/////////////////////////////////////////////////////////////////////////
1:         for (TriggerDescriptor trd : dd.getTriggerDescriptors(td)) {
1:         for (ColumnDescriptor cd : cdl)
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:c44e39a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0:         for (Iterator descIter = tdl.iterator(); descIter.hasNext(); ) {
0:             TriggerDescriptor trd = (TriggerDescriptor)descIter.next();
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Army
-------------------------------------------------------------------------------
commit:c437565
/////////////////////////////////////////////////////////////////////////
1: 			dropConstraint(cd, td, activation, lcc, true);
/////////////////////////////////////////////////////////////////////////
1: 			dropConstraint(cd, td, activation, lcc, false);
/////////////////////////////////////////////////////////////////////////
1: 					dropConstraint(fkcd, td, activation, lcc, true);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:0978789
/////////////////////////////////////////////////////////////////////////
1: 				td = dd.getTableDescriptor(tableName, sd, tc);
commit:997ee7f
/////////////////////////////////////////////////////////////////////////
0: 			cd.drop(lcc, true);
/////////////////////////////////////////////////////////////////////////
0: 			cd.drop(lcc, false);
/////////////////////////////////////////////////////////////////////////
0: 					fkcd.drop(lcc, true);
commit:9213b42
/////////////////////////////////////////////////////////////////////////
1:             trd.drop(lcc);
commit:e87a9fd
/////////////////////////////////////////////////////////////////////////
0: 						tc, lcc, true);
/////////////////////////////////////////////////////////////////////////
0: 						tc, lcc, false);
/////////////////////////////////////////////////////////////////////////
0: 							tc, lcc, true);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.DropTableConstantAction
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.StatementType;
1: 
1: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.DefaultDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
1: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1: 
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
0: import java.util.Enumeration;
1: 
1: /**
1:  *	This class  describes actions that are ALWAYS performed for a
1:  *	DROP TABLE Statement at Execution time.
1:  *
0:  *	@author Rick Hillegas	Extracted code from DropTableResultSet.
1:  */
1: 
1: class DropTableConstantAction extends DDLSingleTableConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	private final long				conglomerateNumber;
1: 	private final String				fullTableName;
1: 	private final String				tableName;
1: 	private final SchemaDescriptor	sd;
1: 	private final boolean 	cascade; 		
1: 
1: 	// CONSTRUCTORS
1: 
1: 
1: 	/**
1: 	 *	Make the ConstantAction for a DROP TABLE statement.
1: 	 *
1: 	 *
1: 	 *	@param	fullTableName		Fully qualified table name
1: 	 *	@param	tableName			Table name.
1: 	 *	@param	sd					Schema that table lives in.
0: 	 *  @param  conglomerateNubmer	Conglomerate number for heap
1: 	 *  @param  tableId				UUID for table
1: 	 *  @param  behavior			drop behavior: RESTRICT, CASCADE or default
1: 	 *
1: 	 */
1: 	DropTableConstantAction(
1: 								String				fullTableName,
1: 								String				tableName,
1: 								SchemaDescriptor	sd,
1: 								long				conglomerateNumber,
1: 								UUID				tableId,
1: 								int					behavior)
1: 	{
1: 		super(tableId);
1: 		this.fullTableName = fullTableName;
1: 		this.tableName = tableName;
1: 		this.sd = sd;
1: 		this.conglomerateNumber = conglomerateNumber;
1: 		this.cascade = (behavior == StatementType.DROP_CASCADE);
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(sd != null, "SchemaDescriptor is null");
1: 		}
1: 	}
1: 
1: 	// OBJECT METHODS
1: 
1: 	public	String	toString()
1: 	{
1: 		// Do not put this under SanityManager.DEBUG - it is needed for
1: 		// error reporting.
1: 		return "DROP TABLE " + fullTableName;
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for DROP TABLE.
1: 	 *
1: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction( Activation activation )
1: 						throws StandardException
1: 	{
1: 		TableDescriptor td;
1: 		UUID tableID;
1: 		ConglomerateDescriptor[] cds;
1: 
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
1: 		DependencyManager dm = dd.getDependencyManager();
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 
1: 		if ((sd != null) && sd.getSchemaName().equals(SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME)) {
1: 			td = lcc.getTableDescriptorForDeclaredGlobalTempTable(tableName); //check if this is a temp table before checking data dictionary
1: 
1: 			if (td == null) //td null here means it is not a temporary table. Look for table in physical SESSION schema
0: 				td = dd.getTableDescriptor(tableName, sd);
1: 
1: 			if (td == null) //td null means tableName is not a temp table and it is not a physical table in SESSION schema
1: 			{
1: 				throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, fullTableName);
1: 			}
1: 
1: 			if (td.getTableType() ==  TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE) {
1: 				dm.invalidateFor(td, DependencyManager.DROP_TABLE, lcc);
1: 				tc.dropConglomerate(td.getHeapConglomerateId());
1: 				lcc.dropDeclaredGlobalTempTable(tableName);
1: 				return;
1: 			}
1:     }
1: 
1: 		/* Lock the table before we access the data dictionary
1: 		 * to prevent deadlocks.
1: 		 *
1: 		 * Note that for DROP TABLE replayed at Targets during REFRESH,
1: 		 * the conglomerateNumber will be 0. That's ok. During REFRESH,
1: 		 * we don't need to lock the conglomerate.
1: 		 */
1: 		if ( conglomerateNumber != 0 ) { lockTableForDDL(tc, conglomerateNumber, true); }
1: 
1: 		/*
1: 		** Inform the data dictionary that we are about to write to it.
1: 		** There are several calls to data dictionary "get" methods here
1: 		** that might be done in "read" mode in the data dictionary, but
1: 		** it seemed safer to do this whole operation in "write" mode.
1: 		**
1: 		** We tell the data dictionary we're done writing at the end of
1: 		** the transaction.
1: 		*/
1: 		dd.startWriting(lcc);
1: 
1: 		/* Get the table descriptor. */
1: 		td = dd.getTableDescriptor(tableId);
1: 
1: 		if (td == null)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, fullTableName);
1: 		}
1: 
1: 		/* Get an exclusive table lock on the table. */
1: 		long heapId = td.getHeapConglomerateId();
1: 		lockTableForDDL(tc, heapId, true);
1: 
1: 		/* Drop the triggers */
0: 		GenericDescriptorList tdl = dd.getTriggerDescriptors(td);
0: 		Enumeration descs = tdl.elements();
0: 		while (descs.hasMoreElements())
1: 		{
0: 			TriggerDescriptor trd = (TriggerDescriptor) descs.nextElement();
0: 			DropTriggerConstantAction.dropTriggerDescriptor(lcc, dm, dd, tc, trd, activation);	
1: 		}
1: 
1: 		/* Drop all defaults */
1: 		ColumnDescriptorList cdl = td.getColumnDescriptorList();
0: 		int					 cdlSize = cdl.size();
1: 		
0: 		for (int index = 0; index < cdlSize; index++)
1: 		{
0: 			ColumnDescriptor cd = (ColumnDescriptor) cdl.elementAt(index);
1: 
1: 			// If column has a default we drop the default and
1: 			// any dependencies
1: 			if (cd.getDefaultInfo() != null)
1: 			{
1: 				DefaultDescriptor defaultDesc = cd.getDefaultDescriptor(dd);
1: 				dm.clearDependencies(lcc, defaultDesc);
1: 			}
1: 		}
1: 
1: 		/* Drop the columns */
1: 		dd.dropAllColumnDescriptors(tableId, tc);
1: 
1: 		/* Drop the constraints */
1: 		dropAllConstraintDescriptors(td, activation);
1: 
1: 		/*
1: 		** Drop all the conglomerates.  Drop the heap last, because the
1: 		** store needs it for locking the indexes when they are dropped.
1: 		*/
1: 		cds = td.getConglomerateDescriptors();
1: 
1: 		long[] dropped = new long[cds.length - 1];
1: 		int numDropped = 0;
1: 		for (int index = 0; index < cds.length; index++)
1: 		{
1: 			ConglomerateDescriptor cd = cds[index];
1: 
1: 			/* if it's for an index, since similar indexes share one
1: 			 * conglomerate, we only drop the conglomerate once
1: 			 */
1: 			if (cd.getConglomerateNumber() != heapId)
1: 			{
1: 				long thisConglom = cd.getConglomerateNumber();
1: 
1: 				int i;
1: 				for (i = 0; i < numDropped; i++)
1: 				{
1: 					if (dropped[i] == thisConglom)
1: 						break;
1: 				}
1: 				if (i == numDropped)	// not dropped
1: 				{
1: 					dropped[numDropped++] = thisConglom;
1: 					tc.dropConglomerate(thisConglom);
1: 					dd.dropStatisticsDescriptors(td.getUUID(), cd.getUUID(), tc);
1: 				}
1: 			}
1: 		}
1: 
1: 		/* Prepare all dependents to invalidate.  (This is there chance
1: 		 * to say that they can't be invalidated.  For example, an open
1: 		 * cursor referencing a table/view that the user is attempting to
1: 		 * drop.) If no one objects, then invalidate any dependent objects.
1: 		 * We check for invalidation before we drop the table descriptor
1: 		 * since the table descriptor may be looked up as part of
1: 		 * decoding tuples in SYSDEPENDS.
1: 		 */
1: 
0: 		dm.invalidateFor(td, cascade ?
0: 						DependencyManager.DROP_TABLE_CASCADE : DependencyManager.DROP_TABLE,
0: 						lcc);
1: 
1: 		/* Drop the table */
1: 		dd.dropTableDescriptor(td, sd, tc);
1: 
1: 		/* Drop the conglomerate descriptors */
1: 		dd.dropAllConglomerateDescriptors(td, tc);
1: 
1: 		/* Drop the store element at last, to prevent dangling reference
1: 		 * for open cursor, beetle 4393.
1: 		 */
1: 		tc.dropConglomerate(heapId);
1: 
1: 	}
1: 
1: 	private void dropAllConstraintDescriptors(TableDescriptor td, Activation activation)
1: 		throws StandardException
1: 	{
1: 		ConstraintDescriptor				cd;
1: 		ConstraintDescriptorList 			cdl;
1: 		ConstraintDescriptor 				fkcd;
1: 		ConstraintDescriptorList 			fkcdl;
1: 		LanguageConnectionContext			lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
1: 		DependencyManager dm = dd.getDependencyManager();
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 
1: 		cdl = dd.getConstraintDescriptors(td);
1: 		
1: 		/*
1: 		** First go, don't drop unique or primary keys.
1: 		** This will ensure that self-referential constraints
1: 		** will work ok, even if not cascading.
1: 	 	*/
1: 		/* The current element will be deleted underneath
1: 		 * the loop, so we only increment the counter when
1: 		 * skipping an element. (HACK!)
1: 		 */
1: 		for(int index = 0; index < cdl.size(); )
1: 		{
1: 			cd = cdl.elementAt(index);
1: 			if (cd instanceof ReferencedKeyConstraintDescriptor)
1: 			{
1: 				index++;
1: 				continue;
1: 			}
1: 
1: 			dm.invalidateFor(cd, DependencyManager.DROP_CONSTRAINT, lcc);
0: 			DropConstraintConstantAction.dropConstraintAndIndex(dm, td, dd, cd, 
0: 						tc, activation, true);
1: 		}
1: 
1: 		/*
1: 	 	** Referenced keys (unique or pk) constraints only
1: 		*/
1: 		/* The current element will be deleted underneath
1: 		 * the loop. (HACK!)
1: 		 */
1: 		while (cdl.size() > 0)
1: 		{
1: 			cd = cdl.elementAt(0);
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				if (!(cd instanceof ReferencedKeyConstraintDescriptor))
1: 				{
1: 					SanityManager.THROWASSERT("Constraint descriptor not an instance of " +
1: 					"ReferencedKeyConstraintDescriptor as expected.  Is a "+ cd.getClass().getName());
1: 				}
1: 			}
1: 
1: 			/*
1: 			** Drop the referenced constraint (after we got
1: 			** the primary keys) now.  Do this prior to
1: 			** droping the referenced keys to avoid performing
1: 			** a lot of extra work updating the referencedcount
1: 			** field of sys.sysconstraints.
1: 			**
1: 			** Pass in false to dropConstraintsAndIndex so it
1: 			** doesn't clear dependencies, we'll do that ourselves.
1: 			*/
0: 			DropConstraintConstantAction.dropConstraintAndIndex(dm, td, dd, cd, 
0: 						tc, activation, false);
1: 
1: 			/*
1: 			** If we are going to cascade, get all the
1: 			** referencing foreign keys and zap them first.
1: 			*/
1: 			if (cascade)
1: 			{
1: 				/*
1: 				** Go to the system tables to get the foreign keys
1: 				** to be safe
1: 				*/
1: 
1: 				fkcdl = dd.getForeignKeys(cd.getUUID());
1: 
1: 				/*
1: 				** For each FK that references this key, drop
1: 				** it.
1: 				*/
1: 				for(int inner = 0; inner < fkcdl.size(); inner++)
1: 				{
1: 					fkcd = (ConstraintDescriptor) fkcdl.elementAt(inner);
1: 					dm.invalidateFor(fkcd, DependencyManager.DROP_CONSTRAINT, lcc);
0: 					DropConstraintConstantAction.dropConstraintAndIndex(
0: 							dm, fkcd.getTableDescriptor(), dd, fkcd,
0: 							tc, activation, true);
1: 					activation.addWarning(
1: 						StandardException.newWarning(SQLState.LANG_CONSTRAINT_DROPPED,
1:  							fkcd.getConstraintName(),
1: 							fkcd.getTableDescriptor().getName()));
1: 				}
1: 			}
1: 
1: 			/*
1: 			** Now that we got rid of the fks (if we were cascading), it is 
1: 			** ok to do an invalidate for.
1: 			*/
1: 			dm.invalidateFor(cd, DependencyManager.DROP_CONSTRAINT, lcc);
1: 			dm.clearDependencies(lcc, cd);
1: 		}
1: 	}
1: 
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param  conglomerateNumber	Conglomerate number for heap
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b7e13a9
/////////////////////////////////////////////////////////////////////////
1: 		/* Drop all table and column permission descriptors */
1: 		dd.dropAllTableAndColPermDescriptors(tableId, tc);
0: 
commit:93e7f0e
/////////////////////////////////////////////////////////////////////////
1: 		dm.invalidateFor(td, DependencyManager.DROP_TABLE, lcc);
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.StatementType;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DefaultDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
0: import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
0: 
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.util.Enumeration;
0: 
0: /**
0:  *	This class  describes actions that are ALWAYS performed for a
0:  *	DROP TABLE Statement at Execution time.
0:  *
0:  *	@author Rick Hillegas	Extracted code from DropTableResultSet.
0:  */
0: 
0: class DropTableConstantAction extends DDLSingleTableConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private final long				conglomerateNumber;
0: 	private final String				fullTableName;
0: 	private final String				tableName;
0: 	private final SchemaDescriptor	sd;
0: 	private final boolean 	cascade; 		
0: 
0: 	// CONSTRUCTORS
0: 
0: 
0: 	/**
0: 	 *	Make the ConstantAction for a DROP TABLE statement.
0: 	 *
0: 	 *
0: 	 *	@param	fullTableName		Fully qualified table name
0: 	 *	@param	tableName			Table name.
0: 	 *	@param	sd					Schema that table lives in.
0: 	 *  @param  conglomerateNubmer	Conglomerate number for heap
0: 	 *  @param  tableId				UUID for table
0: 	 *  @param  behavior			drop behavior: RESTRICT, CASCADE or default
0: 	 *
0: 	 */
0: 	DropTableConstantAction(
0: 								String				fullTableName,
0: 								String				tableName,
0: 								SchemaDescriptor	sd,
0: 								long				conglomerateNumber,
0: 								UUID				tableId,
0: 								int					behavior)
0: 	{
0: 		super(tableId);
0: 		this.fullTableName = fullTableName;
0: 		this.tableName = tableName;
0: 		this.sd = sd;
0: 		this.conglomerateNumber = conglomerateNumber;
0: 		this.cascade = (behavior == StatementType.DROP_CASCADE);
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(sd != null, "SchemaDescriptor is null");
0: 		}
0: 	}
0: 
0: 	// OBJECT METHODS
0: 
0: 	public	String	toString()
0: 	{
0: 		// Do not put this under SanityManager.DEBUG - it is needed for
0: 		// error reporting.
0: 		return "DROP TABLE " + fullTableName;
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for DROP TABLE.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 						throws StandardException
0: 	{
0: 		TableDescriptor td;
0: 		UUID tableID;
0: 		ConglomerateDescriptor[] cds;
0: 
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 
0: 		if ((sd != null) && sd.getSchemaName().equals(SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME)) {
0: 			td = lcc.getTableDescriptorForDeclaredGlobalTempTable(tableName); //check if this is a temp table before checking data dictionary
0: 
0: 			if (td == null) //td null here means it is not a temporary table. Look for table in physical SESSION schema
0: 				td = dd.getTableDescriptor(tableName, sd);
0: 
0: 			if (td == null) //td null means tableName is not a temp table and it is not a physical table in SESSION schema
0: 			{
0: 				throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, fullTableName);
0: 			}
0: 
0: 			if (td.getTableType() ==  TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE) {
0: 				dm.invalidateFor(td, DependencyManager.DROP_TABLE, lcc);
0: 				tc.dropConglomerate(td.getHeapConglomerateId());
0: 				lcc.dropDeclaredGlobalTempTable(tableName);
0: 				return;
0: 			}
0:     }
0: 
0: 		/* Lock the table before we access the data dictionary
0: 		 * to prevent deadlocks.
0: 		 *
0: 		 * Note that for DROP TABLE replayed at Targets during REFRESH,
0: 		 * the conglomerateNumber will be 0. That's ok. During REFRESH,
0: 		 * we don't need to lock the conglomerate.
0: 		 */
0: 		if ( conglomerateNumber != 0 ) { lockTableForDDL(tc, conglomerateNumber, true); }
0: 
0: 		/*
0: 		** Inform the data dictionary that we are about to write to it.
0: 		** There are several calls to data dictionary "get" methods here
0: 		** that might be done in "read" mode in the data dictionary, but
0: 		** it seemed safer to do this whole operation in "write" mode.
0: 		**
0: 		** We tell the data dictionary we're done writing at the end of
0: 		** the transaction.
0: 		*/
0: 		dd.startWriting(lcc);
0: 
0: 		/* Get the table descriptor. */
0: 		td = dd.getTableDescriptor(tableId);
0: 
0: 		if (td == null)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, fullTableName);
0: 		}
0: 
0: 		/* Get an exclusive table lock on the table. */
0: 		long heapId = td.getHeapConglomerateId();
0: 		lockTableForDDL(tc, heapId, true);
0: 
0: 		/* Drop the triggers */
0: 		GenericDescriptorList tdl = dd.getTriggerDescriptors(td);
0: 		Enumeration descs = tdl.elements();
0: 		while (descs.hasMoreElements())
0: 		{
0: 			TriggerDescriptor trd = (TriggerDescriptor) descs.nextElement();
0: 			DropTriggerConstantAction.dropTriggerDescriptor(lcc, dm, dd, tc, trd, activation);	
0: 		}
0: 
0: 		/* Drop all defaults */
0: 		ColumnDescriptorList cdl = td.getColumnDescriptorList();
0: 		int					 cdlSize = cdl.size();
0: 		
0: 		for (int index = 0; index < cdlSize; index++)
0: 		{
0: 			ColumnDescriptor cd = (ColumnDescriptor) cdl.elementAt(index);
0: 
0: 			// If column has a default we drop the default and
0: 			// any dependencies
0: 			if (cd.getDefaultInfo() != null)
0: 			{
0: 				DefaultDescriptor defaultDesc = cd.getDefaultDescriptor(dd);
0: 				dm.clearDependencies(lcc, defaultDesc);
0: 			}
0: 		}
0: 
0: 		/* Drop the columns */
0: 		dd.dropAllColumnDescriptors(tableId, tc);
0: 
0: 		/* Drop the constraints */
0: 		dropAllConstraintDescriptors(td, activation);
0: 
0: 		/*
0: 		** Drop all the conglomerates.  Drop the heap last, because the
0: 		** store needs it for locking the indexes when they are dropped.
0: 		*/
0: 		cds = td.getConglomerateDescriptors();
0: 
0: 		long[] dropped = new long[cds.length - 1];
0: 		int numDropped = 0;
0: 		for (int index = 0; index < cds.length; index++)
0: 		{
0: 			ConglomerateDescriptor cd = cds[index];
0: 
0: 			/* if it's for an index, since similar indexes share one
0: 			 * conglomerate, we only drop the conglomerate once
0: 			 */
0: 			if (cd.getConglomerateNumber() != heapId)
0: 			{
0: 				long thisConglom = cd.getConglomerateNumber();
0: 
0: 				int i;
0: 				for (i = 0; i < numDropped; i++)
0: 				{
0: 					if (dropped[i] == thisConglom)
0: 						break;
0: 				}
0: 				if (i == numDropped)	// not dropped
0: 				{
0: 					dropped[numDropped++] = thisConglom;
0: 					tc.dropConglomerate(thisConglom);
0: 					dd.dropStatisticsDescriptors(td.getUUID(), cd.getUUID(), tc);
0: 				}
0: 			}
0: 		}
0: 
0: 		/* Prepare all dependents to invalidate.  (This is there chance
0: 		 * to say that they can't be invalidated.  For example, an open
0: 		 * cursor referencing a table/view that the user is attempting to
0: 		 * drop.) If no one objects, then invalidate any dependent objects.
0: 		 * We check for invalidation before we drop the table descriptor
0: 		 * since the table descriptor may be looked up as part of
0: 		 * decoding tuples in SYSDEPENDS.
0: 		 */
0: 
0: 		dm.invalidateFor(td, cascade ?
0: 						DependencyManager.DROP_TABLE_CASCADE : DependencyManager.DROP_TABLE,
0: 						lcc);
0: 
0: 		/* Drop the table */
0: 		dd.dropTableDescriptor(td, sd, tc);
0: 
0: 		/* Drop the conglomerate descriptors */
0: 		dd.dropAllConglomerateDescriptors(td, tc);
0: 
0: 		/* Drop the store element at last, to prevent dangling reference
0: 		 * for open cursor, beetle 4393.
0: 		 */
0: 		tc.dropConglomerate(heapId);
0: 
0: 	}
0: 
0: 	private void dropAllConstraintDescriptors(TableDescriptor td, Activation activation)
0: 		throws StandardException
0: 	{
0: 		ConstraintDescriptor				cd;
0: 		ConstraintDescriptorList 			cdl;
0: 		ConstraintDescriptor 				fkcd;
0: 		ConstraintDescriptorList 			fkcdl;
0: 		LanguageConnectionContext			lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 
0: 		cdl = dd.getConstraintDescriptors(td);
0: 		
0: 		/*
0: 		** First go, don't drop unique or primary keys.
0: 		** This will ensure that self-referential constraints
0: 		** will work ok, even if not cascading.
0: 	 	*/
0: 		/* The current element will be deleted underneath
0: 		 * the loop, so we only increment the counter when
0: 		 * skipping an element. (HACK!)
0: 		 */
0: 		for(int index = 0; index < cdl.size(); )
0: 		{
0: 			cd = cdl.elementAt(index);
0: 			if (cd instanceof ReferencedKeyConstraintDescriptor)
0: 			{
0: 				index++;
0: 				continue;
0: 			}
0: 
0: 			dm.invalidateFor(cd, DependencyManager.DROP_CONSTRAINT, lcc);
0: 			DropConstraintConstantAction.dropConstraintAndIndex(dm, td, dd, cd, 
0: 						tc, activation, true);
0: 		}
0: 
0: 		/*
0: 	 	** Referenced keys (unique or pk) constraints only
0: 		*/
0: 		/* The current element will be deleted underneath
0: 		 * the loop. (HACK!)
0: 		 */
0: 		while (cdl.size() > 0)
0: 		{
0: 			cd = cdl.elementAt(0);
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				if (!(cd instanceof ReferencedKeyConstraintDescriptor))
0: 				{
0: 					SanityManager.THROWASSERT("Constraint descriptor not an instance of " +
0: 					"ReferencedKeyConstraintDescriptor as expected.  Is a "+ cd.getClass().getName());
0: 				}
0: 			}
0: 
0: 			/*
0: 			** Drop the referenced constraint (after we got
0: 			** the primary keys) now.  Do this prior to
0: 			** droping the referenced keys to avoid performing
0: 			** a lot of extra work updating the referencedcount
0: 			** field of sys.sysconstraints.
0: 			**
0: 			** Pass in false to dropConstraintsAndIndex so it
0: 			** doesn't clear dependencies, we'll do that ourselves.
0: 			*/
0: 			DropConstraintConstantAction.dropConstraintAndIndex(dm, td, dd, cd, 
0: 						tc, activation, false);
0: 
0: 			/*
0: 			** If we are going to cascade, get all the
0: 			** referencing foreign keys and zap them first.
0: 			*/
0: 			if (cascade)
0: 			{
0: 				/*
0: 				** Go to the system tables to get the foreign keys
0: 				** to be safe
0: 				*/
0: 
0: 				fkcdl = dd.getForeignKeys(cd.getUUID());
0: 
0: 				/*
0: 				** For each FK that references this key, drop
0: 				** it.
0: 				*/
0: 				for(int inner = 0; inner < fkcdl.size(); inner++)
0: 				{
0: 					fkcd = (ConstraintDescriptor) fkcdl.elementAt(inner);
0: 					dm.invalidateFor(fkcd, DependencyManager.DROP_CONSTRAINT, lcc);
0: 					DropConstraintConstantAction.dropConstraintAndIndex(
0: 							dm, fkcd.getTableDescriptor(), dd, fkcd,
0: 							tc, activation, true);
0: 					activation.addWarning(
0: 						StandardException.newWarning(SQLState.LANG_CONSTRAINT_DROPPED,
0:  							fkcd.getConstraintName(),
0: 							fkcd.getTableDescriptor().getName()));
0: 				}
0: 			}
0: 
0: 			/*
0: 			** Now that we got rid of the fks (if we were cascading), it is 
0: 			** ok to do an invalidate for.
0: 			*/
0: 			dm.invalidateFor(cd, DependencyManager.DROP_CONSTRAINT, lcc);
0: 			dm.clearDependencies(lcc, cd);
0: 		}
0: 	}
0: 
0: }
============================================================================