1:e1fc783: /* 
5:e1fc783: 
1:bb0c274:    Derby - Class org.apache.derby.impl.jdbc.ClobAsciiStream
1:bb0c274: 
1:bb0c274:    Licensed to the Apache Software Foundation (ASF) under one
1:bb0c274:    or more contributor license agreements.  See the NOTICE file
1:bb0c274:    distributed with this work for additional information
1:bb0c274:    regarding copyright ownership.  The ASF licenses this file
1:bb0c274:    to you under the Apache License, Version 2.0 (the
1:bb0c274:    "License"); you may not use this file except in compliance
1:bb0c274:    with the License.  You may obtain a copy of the License at
1:bb0c274: 
1:bb0c274:      http://www.apache.org/licenses/LICENSE-2.0
1:bb0c274: 
1:bb0c274:    Unless required by applicable law or agreed to in writing,
1:bb0c274:    software distributed under the License is distributed on an
1:bb0c274:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bb0c274:    KIND, either express or implied.  See the License for the
1:bb0c274:    specific language governing permissions and limitations
1:bb0c274:    under the License.
1:bb0c274: 
1:bb0c274:  */
1:e1fc783: package org.apache.derby.impl.jdbc;
1:e1fc783: 
1:e1fc783: import java.io.IOException;
1:e1fc783: import java.io.OutputStream;
1:e1fc783: import java.io.Writer;
1:e1fc783: 
1:685a147: /**
1:685a147:  * Wrap a Writer as an OutputStream to support Clob.setAsciiStream().
1:685a147:  * Any value written to the OutputStream is a valid ASCII value
1:685a147:  * (0-255 from JDBC 4 spec appendix C2) thus this class simply
1:685a147:  * passes the written values onto the Writer.
1:685a147:  *
1:e1fc783:  */
1:e1fc783: final class ClobAsciiStream extends OutputStream {
1:e5b15ce: 
1:685a147:     private final Writer writer;
1:685a147:     private final char[] buffer = new char[1024];
1:e1fc783:     
1:e1fc783:     ClobAsciiStream (Writer writer){
1:e1fc783:         this.writer = writer;
1:e1fc783:     }
1:e1fc783: 
1:e1fc783:     /**
1:e5b15ce:      * Writes the specified byte to this output stream.
1:e5b15ce:      * <p>
1:e5b15ce:      * The general contract for <code>write</code> is that one byte is written
1:e5b15ce:      * to the output stream. The byte to be written is the eight low-order bits
1:e5b15ce:      * of the argument <code>b</code>. The 24 high-order bits of <code>b</code>
1:e5b15ce:      * are ignored.
1:e1fc783:      * 
1:e1fc783:      * @param b   the <code>byte</code>.
1:e1fc783:      * @exception IOException  if an I/O error occurs. In particular, 
1:e1fc783:      *             an <code>IOException</code> may be thrown if the 
1:e1fc783:      *             output stream has been closed.
1:e1fc783:      */
1:e1fc783:     public void write(int b) throws IOException {
1:685a147:         writer.write(b & 0xff);
1:e1fc783:     }
1:e1fc783: 
1:e1fc783:     /**
1:e1fc783:      * Writes <code>len</code> bytes from the specified byte array 
1:e1fc783:      * starting at offset <code>off</code> to this output stream. 
1:e5b15ce:      * <p>
1:e1fc783:      * The general contract for <code>write(b, off, len)</code> is that 
1:e1fc783:      * some of the bytes in the array <code>b</code> are written to the 
1:e1fc783:      * output stream in order; element <code>b[off]</code> is the first 
1:e1fc783:      * byte written and <code>b[off+len-1]</code> is the last byte written 
1:e1fc783:      * by this operation.
2:e1fc783:      * <p>
1:e1fc783:      * The <code>write</code> method of <code>OutputStream</code> calls 
1:e1fc783:      * the write method of one argument on each of the bytes to be 
1:e1fc783:      * written out. Subclasses are encouraged to override this method and 
1:e1fc783:      * provide a more efficient implementation. 
1:e1fc783:      * <p>
1:e1fc783:      * If <code>b</code> is <code>null</code>, a 
1:e1fc783:      * <code>NullPointerException</code> is thrown.
1:e1fc783:      * <p>
1:e1fc783:      * If <code>off</code> is negative, or <code>len</code> is negative, or 
1:e1fc783:      * <code>off+len</code> is greater than the length of the array 
1:e1fc783:      * <code>b</code>, then an <tt>IndexOutOfBoundsException</tt> is thrown.
1:e1fc783:      * 
1:e1fc783:      * @param b     the data.
1:e1fc783:      * @param off   the start offset in the data.
1:e1fc783:      * @param len   the number of bytes to write.
1:e1fc783:      * @exception IOException  if an I/O error occurs. In particular, 
1:e1fc783:      *             an <code>IOException</code> is thrown if the output 
1:e1fc783:      *             stream is closed.
1:e1fc783:      */
1:e1fc783:     public void write(byte[] b, int off, int len) throws IOException {
1:e1fc783:         
1:685a147:         while (len > 0)
1:685a147:         {
1:685a147:             int clen = Math.min(len, buffer.length);
1:685a147:             for (int i = 0; i < clen; i++) {
1:fffde77:                 buffer[i] = (char)(b[off + i] & 0xff);
1:e1fc783:             }
1:685a147:             writer.write(buffer, 0, clen);
1:685a147:             off += clen;
1:685a147:             len -= clen;
1:e1fc783:         }
1:e1fc783:     }    
1:685a147: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fffde77
/////////////////////////////////////////////////////////////////////////
1:                 buffer[i] = (char)(b[off + i] & 0xff);
commit:e5b15ce
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Writes the specified byte to this output stream.
1:      * <p>
1:      * The general contract for <code>write</code> is that one byte is written
1:      * to the output stream. The byte to be written is the eight low-order bits
1:      * of the argument <code>b</code>. The 24 high-order bits of <code>b</code>
1:      * are ignored.
/////////////////////////////////////////////////////////////////////////
1:      * <p>
commit:bb0c274
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.ClobAsciiStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
commit:ffb9317
/////////////////////////////////////////////////////////////////////////
commit:e1fc783
/////////////////////////////////////////////////////////////////////////
1: /* 
0:    Derby - Class org.apache.derby.impl.jdbc.ClobAsciiStream
1:  
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
0:       http://www.apache.org/licenses/LICENSE-2.0
1:  
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.Writer;
1: 
1: final class ClobAsciiStream extends OutputStream {
0:     private Writer writer;
1:     
1:     ClobAsciiStream (Writer writer){
1:         this.writer = writer;
1:     }
1: 
1:     /**
0:      * Writes the specified byte to this output stream. The general 
0:      * contract for <code>write</code> is that one byte is written 
0:      * to the output stream. The byte to be written is the eight 
0:      * low-order bits of the argument <code>b</code>. The 24 
0:      * high-order bits of <code>b</code> are ignored.
1:      * <p>
0:      * Subclasses of <code>OutputStream</code> must provide an 
0:      * implementation for this method. 
1:      * 
1:      * @param b   the <code>byte</code>.
1:      * @exception IOException  if an I/O error occurs. In particular, 
1:      *             an <code>IOException</code> may be thrown if the 
1:      *             output stream has been closed.
1:      */
1:     public void write(int b) throws IOException {
0:         writer.write (b);
1:     }
1: 
1:     /**
1:      * Writes <code>len</code> bytes from the specified byte array 
1:      * starting at offset <code>off</code> to this output stream. 
1:      * The general contract for <code>write(b, off, len)</code> is that 
1:      * some of the bytes in the array <code>b</code> are written to the 
1:      * output stream in order; element <code>b[off]</code> is the first 
1:      * byte written and <code>b[off+len-1]</code> is the last byte written 
1:      * by this operation.
1:      * <p>
1:      * The <code>write</code> method of <code>OutputStream</code> calls 
1:      * the write method of one argument on each of the bytes to be 
1:      * written out. Subclasses are encouraged to override this method and 
1:      * provide a more efficient implementation. 
1:      * <p>
1:      * If <code>b</code> is <code>null</code>, a 
1:      * <code>NullPointerException</code> is thrown.
1:      * <p>
1:      * If <code>off</code> is negative, or <code>len</code> is negative, or 
1:      * <code>off+len</code> is greater than the length of the array 
1:      * <code>b</code>, then an <tt>IndexOutOfBoundsException</tt> is thrown.
1:      * 
1:      * @param b     the data.
1:      * @param off   the start offset in the data.
1:      * @param len   the number of bytes to write.
1:      * @exception IOException  if an I/O error occurs. In particular, 
1:      *             an <code>IOException</code> is thrown if the output 
1:      *             stream is closed.
1:      */
1:     public void write(byte[] b, int off, int len) throws IOException {
0:         char [] c = new char [len];
0:         for (int i = off; i < len; i++) {
0:             c [i - off] = (char) b [i];
1:         }
0:         writer.write(c);
1:     }    
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:685a147
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Wrap a Writer as an OutputStream to support Clob.setAsciiStream().
1:  * Any value written to the OutputStream is a valid ASCII value
1:  * (0-255 from JDBC 4 spec appendix C2) thus this class simply
1:  * passes the written values onto the Writer.
1:  *
0:  */
1:     private final Writer writer;
1:     private final char[] buffer = new char[1024];
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         writer.write(b & 0xff);
/////////////////////////////////////////////////////////////////////////
0:         
1:         while (len > 0)
1:         {
1:             int clen = Math.min(len, buffer.length);
1:             for (int i = 0; i < clen; i++) {
0:                 buffer[i] = (char) b[off + i];
1:             }
1:             writer.write(buffer, 0, clen);
1:             off += clen;
1:             len -= clen;
============================================================================