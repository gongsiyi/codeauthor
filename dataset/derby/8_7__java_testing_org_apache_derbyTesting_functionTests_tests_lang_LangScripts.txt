1:a41eb3a: /*
2:a41eb3a:  *
1:a41eb3a:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LangScripts
1:a41eb3a:  *
1:dff95a1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:  * contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:  * this work for additional information regarding copyright ownership.
1:dff95a1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:  * (the "License"); you may not use this file except in compliance with
1:dff95a1:  * the License.  You may obtain a copy of the License at
1:a41eb3a:  *
1:a41eb3a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:a41eb3a:  *
1:a41eb3a:  * Unless required by applicable law or agreed to in writing, 
1:a41eb3a:  * software distributed under the License is distributed on an 
1:a41eb3a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:a41eb3a:  * either express or implied. See the License for the specific 
1:a41eb3a:  * language governing permissions and limitations under the License.
2:a41eb3a:  */
1:a41eb3a: package org.apache.derbyTesting.functionTests.tests.lang;
1:5bfe324: 
1:a41eb3a: import junit.framework.Test;
1:a41eb3a: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:3bd1dd8: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:f68ca1f: import org.apache.derbyTesting.junit.JDBC;
1:c40688b: import org.apache.derbyTesting.junit.TestConfiguration;
5:a41eb3a: 
1:67d1151: /**
1:67d1151:  * LangScripts runs SQL scripts (.sql files) in the lang package
1:67d1151:  * and compares the output to a canon file in the
1:67d1151:  * standard master package.
1:67d1151:  * <BR>
1:67d1151:  * Its suite() method returns a set of tests where each test is an instance of
1:67d1151:  * this class for an individual script wrapped in a clean database decorator.
1:67d1151:  * <BR>
1:67d1151:  * It can also be used as a command line program to run one or more
1:67d1151:  * language based SQL scripts as tests.
1:67d1151:  *
1:67d1151:  */
1:4483839: public final class LangScripts extends ScriptTestCase {
1:5bfe324: 
1:5bfe324:     /**
1:c40688b:      * Language SQL scripts (.sql files) that run under Derby's client
1:f68ca1f:      * and emebedded configurations. SQL tests are put in this category
1:f68ca1f:      * if they are likely to have some testing of the protocol,
1:f68ca1f:      * typically tests related to data types.
1:f68ca1f:      * 
1:5bfe324:      */
1:f68ca1f:     private static final String[] CLIENT_AND_EMBEDDED_TESTS = {
1:f68ca1f:         "LOB",
1:f68ca1f:         "bit",
1:5bfe324:         "bit2",
1:f68ca1f:         "stringtypes",
1:607c9b7:         "holdCursorIJ"
2:5bfe324:         };
1:5bfe324:     
1:5bfe324:     /**
1:67d1151:      * Language SQL scripts (.sql files) that only run in embedded.
1:af47911:      * Most tests that are testing SQL functionality can just 
1:af47911:      * run in emebdded.
1:5bfe324:      */
1:5bfe324:     private static final String[] EMBEDDED_TESTS = {
1:5a27a07:         "aggregate",        
1:3df869c:         "cast",
1:dbe8ee1:         "comparisons",
1:dbe8ee1:         "delete",
1:f68ca1f:         "derived",
1:5bfe324:         "depend",
1:f68ca1f:         "ejbql",
1:f68ca1f:         "floattypes",
1:00658db:         "functions",
1:00658db:         "identifier",
1:00658db:         "implicitConversions",
1:00658db:         "innerjoin",
1:dbe8ee1:         "insert",
1:00658db:         "intersect",
1:00658db:         "joins",
1:00658db:         "logop",
1:00658db:         "modifyColumn",
1:00658db:         "nonreserved",
1:00658db:         "orderby",
1:00658db:         "positionedDelUpd",
1:f68ca1f:         "refActions1",
1:482878d:         "reopenScan",
1:dbe8ee1:         "schemas",
1:dbe8ee1:         "select",
1:f68ca1f:         "synonym",
1:f68ca1f:         "tempRestrictions",
1:5bfe324:         "union",
1:dbe8ee1:         "update",
1:dbe8ee1:         "valuesclause",
1:2a4654b:         "xplain",
1:f68ca1f:         };
1:f68ca1f:     
1:f68ca1f:     /**
1:f68ca1f:      * Tests that run in embedded and require JDBC3_TESTS
1:f68ca1f:      * (ie. can not run on JSR169).
1:f68ca1f:      */
1:f68ca1f:     private static final String[] JDBC3_TESTS = {
1:f68ca1f:     };
1:5bfe324: 
1:4483839: 	/**
1:67d1151: 	 * Run a set of language SQL scripts (.sql files) passed in on the
1:67d1151: 	 * command line. Note the .sql suffix must not be provided as
1:67d1151:      * part of the script name.
1:4483839: 	 * <code>
1:4483839: 	 * example
1:4483839: 	 * java org.apache.derbyTesting.functionTests.tests.lang.LangScripts case union
1:4483839: 	 * </code>
1:4483839: 	 */
1:4483839: 	public static void main(String[] args)
1:4483839: 	{
1:4483839: 		junit.textui.TestRunner.run(getSuite(args));
1:a41eb3a: 	}
1:a41eb3a: 
1:4483839: 	/**
1:4483839: 	 * Return the suite that runs all the langauge SQL scripts.
1:4483839: 	 */
1:4483839: 	public static Test suite() {
1:c40688b:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("LangScripts");
1:f68ca1f:         suite.addTest(getSuite(CLIENT_AND_EMBEDDED_TESTS));
1:c40688b:         suite.addTest(getSuite(EMBEDDED_TESTS));
1:f68ca1f:         if (JDBC.vmSupportsJDBC3())
1:f68ca1f:             suite.addTest(getSuite(JDBC3_TESTS));
1:5bfe324:         
1:c40688b:         // Set up the scripts run with the network client
1:1ae02c9:         BaseTestSuite clientTests = new BaseTestSuite("LangScripts:client");
1:f68ca1f:         clientTests.addTest(getSuite(CLIENT_AND_EMBEDDED_TESTS));
1:eba07fc:         Test client = TestConfiguration.clientServerDecorator(clientTests);
1:5bfe324:         
1:c40688b:         // add those client tests into the top-level suite.
1:c40688b:         suite.addTest(client);
1:c40688b: 
1:5bfe324:         return suite;
1:4483839:     }
1:4483839:     
1:4483839: 	/*
1:4483839: 	 * A single JUnit test that runs a single language SQL script.
1:4483839: 	 */
1:4483839: 	private LangScripts(String langTest){
1:4483839: 		super(langTest);
1:a41eb3a: 	}
1:a41eb3a: 	
1:4483839:     /**
1:4483839:      * Return a suite of language SQL tests from the list of
1:e3aea2b:      * script names. Each test is surrounded in a decorator
1:e3aea2b:      * that cleans the database.
1:4483839:       */
1:4483839: 	private static Test getSuite(String[] list)
1:4483839: 	{
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("SQL scripts");
1:4483839:         for (int i = 0; i < list.length; i++)
1:e3aea2b:             suite.addTest(
1:e3aea2b:             		new CleanDatabaseTestSetup(
1:e3aea2b:             		new LangScripts(list[i])));
1:a41eb3a: 
1:a41eb3a:         return getIJConfig(suite);
1:a41eb3a:     }
1:a41eb3a: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("LangScripts");
1:         BaseTestSuite clientTests = new BaseTestSuite("LangScripts:client");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("SQL scripts");
commit:53521cc
/////////////////////////////////////////////////////////////////////////
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1:         "xplain",
commit:cdb51b5
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:482878d
/////////////////////////////////////////////////////////////////////////
1:         "reopenScan",
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:607c9b7
/////////////////////////////////////////////////////////////////////////
1:         "holdCursorIJ"
commit:45ac509
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:87d0d61
/////////////////////////////////////////////////////////////////////////
commit:e11756a
/////////////////////////////////////////////////////////////////////////
commit:5a27a07
/////////////////////////////////////////////////////////////////////////
1:         "aggregate",        
commit:86be795
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:292e7b6
/////////////////////////////////////////////////////////////////////////
commit:dfba1e0
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:00658db
/////////////////////////////////////////////////////////////////////////
1:         "functions",
0:         "groupBy",
1:         "identifier",
1:         "implicitConversions",
1:         "innerjoin",
1:         "intersect",
1:         "joins",
1:         "logop",
0:         "miscerrors",
1:         "modifyColumn",
1:         "nonreserved",
1:         "orderby",
1:         "positionedDelUpd",
0:         "precedence",
commit:3df869c
/////////////////////////////////////////////////////////////////////////
1:         "cast",
/////////////////////////////////////////////////////////////////////////
commit:f68ca1f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:      * and emebedded configurations. SQL tests are put in this category
1:      * if they are likely to have some testing of the protocol,
1:      * typically tests related to data types.
1:      * 
1:     private static final String[] CLIENT_AND_EMBEDDED_TESTS = {
1:         "LOB",
1:         "bit",
0:         "nulls",
1:         "stringtypes",
/////////////////////////////////////////////////////////////////////////
0:         "case",
0:         "constantExpression",
1:         "derived",
1:         "ejbql",
1:         "floattypes",
1:         "refActions1",
1:         "synonym",
1:         "tempRestrictions",
1:         };
1:     
1:     /**
1:      * Tests that run in embedded and require JDBC3_TESTS
1:      * (ie. can not run on JSR169).
1:      */
1:     private static final String[] JDBC3_TESTS = {
0:         "cast",  // DERBY-2228 (also never ran with J2ME with old harness)
1:     };
/////////////////////////////////////////////////////////////////////////
1:         suite.addTest(getSuite(CLIENT_AND_EMBEDDED_TESTS));
1:         if (JDBC.vmSupportsJDBC3())
1:             suite.addTest(getSuite(JDBC3_TESTS));
1:         clientTests.addTest(getSuite(CLIENT_AND_EMBEDDED_TESTS));
commit:af47911
/////////////////////////////////////////////////////////////////////////
1:      * Most tests that are testing SQL functionality can just 
1:      * run in emebdded.
0:         "aggregate",
0:         "bit",
0:         "LOB",
0:         "nulls",
commit:dbe8ee1
/////////////////////////////////////////////////////////////////////////
0:         "aggbuiltin",
1:         "comparisons",
1:         "delete",
1:         "insert",
1:         "schemas",
1:         "select",
0:         "stringtypes",
1:         "update",
1:         "valuesclause",
0:         "views",
commit:985662b
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = new TestSuite("LangScripts");
0:         TestSuite clientTests = new TestSuite("LangScripts:client");
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = new TestSuite("SQL scripts");
commit:eba07fc
/////////////////////////////////////////////////////////////////////////
1:         Test client = TestConfiguration.clientServerDecorator(clientTests);
commit:c40688b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:      * Language SQL scripts (.sql files) that run under Derby's client
0:      * and emebdded configurations.
/////////////////////////////////////////////////////////////////////////
1:         
0:         suite.addTest(getSuite(DERBY_TESTS));
1:         suite.addTest(getSuite(EMBEDDED_TESTS));
1:         // Set up the scripts run with the network client
0:         TestSuite clientTests = new TestSuite();
0:         clientTests.addTest(getSuite(SQL_LANGUAGE_TESTS));
0:         clientTests.addTest(getSuite(DERBY_TESTS));
0:         Test client = TestConfiguration.derbyClientServerDecorator(clientTests);
1:         // add those client tests into the top-level suite.
1:         suite.addTest(client);
1: 
commit:67d1151
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * LangScripts runs SQL scripts (.sql files) in the lang package
1:  * and compares the output to a canon file in the
1:  * standard master package.
1:  * <BR>
1:  * Its suite() method returns a set of tests where each test is an instance of
1:  * this class for an individual script wrapped in a clean database decorator.
1:  * <BR>
1:  * It can also be used as a command line program to run one or more
1:  * language based SQL scripts as tests.
1:  *
1:  */
0: 	 * Language SQL scripts (.sql files) that run under all configurations.
/////////////////////////////////////////////////////////////////////////
0:      * Language SQL scripts (.sql files) that run under Derby's client configurations.
/////////////////////////////////////////////////////////////////////////
1:      * Language SQL scripts (.sql files) that only run in embedded.
/////////////////////////////////////////////////////////////////////////
1: 	 * Run a set of language SQL scripts (.sql files) passed in on the
1: 	 * command line. Note the .sql suffix must not be provided as
1:      * part of the script name.
commit:5bfe324
/////////////////////////////////////////////////////////////////////////
0: 	 * Language SQL scripts that run under all configurations.
1: 
1:     /**
0:      * Language SQL scripts that run under Derby's clients configurations.
1:      */
0:     private static final String[] DERBY_TESTS = {
1:         "bit2",
0:         "derived",
1:         };
1:     
1:     /**
0:      * Language SQL scripts that only run in embedded.
1:      */
1:     private static final String[] EMBEDDED_TESTS = {
0:         "arithmetic",
1:         "depend",
1:         "union",
1:         };	
1: 
0: 	 * Run a set of language SQL scripts passed in on the
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = new TestSuite();
0:         suite.addTest(getSuite(SQL_LANGUAGE_TESTS));
1:         
0:         if (usingEmbedded() || usingDerbyNetClient())
0:             suite.addTest(getSuite(DERBY_TESTS));
1:         
0:         if (usingEmbedded())
0:             suite.addTest(getSuite(EMBEDDED_TESTS));
1:         
1:         return suite;
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
commit:e3aea2b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.CleanDatabaseTestSetup;
/////////////////////////////////////////////////////////////////////////
0: 		"constantExpression",
0: 		"depend",
0: 		"derived",
/////////////////////////////////////////////////////////////////////////
1:      * script names. Each test is surrounded in a decorator
1:      * that cleans the database.
1:             suite.addTest(
1:             		new CleanDatabaseTestSetup(
1:             		new LangScripts(list[i])));
commit:4483839
/////////////////////////////////////////////////////////////////////////
1: public final class LangScripts extends ScriptTestCase {
1: 	/**
0: 	 * All the langauge SQL scripts to be run as JUnit tests.
1: 	 */
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 	 * Run a set of langauge SQL scripts passed in on the
0: 	 * command line.
1: 	 * <code>
1: 	 * example
1: 	 * java org.apache.derbyTesting.functionTests.tests.lang.LangScripts case union
1: 	 * </code>
1: 	 */
1: 	public static void main(String[] args)
1: 	{
1: 		junit.textui.TestRunner.run(getSuite(args));
1: 	 * Return the suite that runs all the langauge SQL scripts.
1: 	public static Test suite() {
0:     	return getSuite(SQL_LANGUAGE_TESTS);
1:     }
1:     
1: 	/*
1: 	 * A single JUnit test that runs a single language SQL script.
1: 	 */
1: 	private LangScripts(String langTest){
1: 		super(langTest);
1:     /**
1:      * Return a suite of language SQL tests from the list of
0:      * script names.
1:       */
1: 	private static Test getSuite(String[] list)
1: 	{
1:         for (int i = 0; i < list.length; i++)
0:             suite.addTest(new LangScripts(list[i]));
commit:a41eb3a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LangScripts
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1: 
0: public class LangScripts extends ScriptTestCase {
1: 	
0: 	private static final String[] SQL_LANGUAGE_TESTS = {
0: 		"arithmetic",
0: 		"bit2",
0: 		"case",
0: 		"union",
0: 		};
1: 	
0: 	LangScripts(String langTest){
0: 		super(langTest);
1: 	}
1: 
0: 	/**
0: 	 * SQL scripts in the lang folder.
1: 	 */
0: 	protected String getArea() {
0: 		return "lang";
1: 	}
1: 	
0:     public static Test suite() {
0:         TestSuite suite = new TestSuite();
0:         for (int i = 0; i < SQL_LANGUAGE_TESTS.length; i++)
0:             suite.addTest(new LangScripts(SQL_LANGUAGE_TESTS[i]));
1: 
1:         return getIJConfig(suite);
1:     }
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
============================================================================