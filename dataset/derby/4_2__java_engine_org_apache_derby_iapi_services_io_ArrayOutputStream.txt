1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.ArrayOutputStream
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.EOFException;
1:eac0369: import java.io.OutputStream;
1:eac0369: 
1:eac0369: public class ArrayOutputStream extends OutputStream implements Limit {
1:eac0369: 
1:eac0369: 	private byte[] pageData;
1:eac0369: 
1:eac0369: 	private int		start;
1:eac0369: 	private int		end;		// exclusive
1:eac0369: 	private int		position;
1:eac0369: 
1:eac0369: 	public ArrayOutputStream() {
1:eac0369: 		super();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public ArrayOutputStream(byte[] data) {
1:eac0369: 		super();
1:eac0369: 		setData(data);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void setData(byte[] data) {
1:eac0369: 		pageData = data;
1:eac0369: 		start = 0;
1:eac0369: 		if (data != null)
1:eac0369: 			end = data.length;
1:eac0369: 		else
1:eac0369: 			end = 0;
1:eac0369: 		position = 0;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of OutputStream
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public void write(int b) throws IOException {
1:eac0369: 		if (position >= end)
1:eac0369: 			throw new EOFException();
1:eac0369: 
1:eac0369: 		pageData[position++] = (byte) b;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void write(byte b[], int off, int len) throws IOException {
1:eac0369: 
1:eac0369: 		if ((position + len) > end)
1:eac0369: 			throw new EOFException();
1:eac0369: 
1:eac0369: 		System.arraycopy(b, off, pageData, position, len);
1:eac0369: 		position += len;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of LengthOutputStream
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public int getPosition() {
1:eac0369: 		return position;
1:eac0369: 	}
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 		Set the position of the stream pointer.
1:eac0369: 	*/
1:eac0369: 	public void setPosition(int newPosition)
1:eac0369: 		throws IOException {
1:eac0369: 		if ((newPosition < start) || (newPosition > end))
1:eac0369: 			throw new EOFException();
1:eac0369: 
1:eac0369: 		position = newPosition;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void setLimit(int length) throws IOException {
1:eac0369: 
1:eac0369: 		if (length < 0) {
1:eac0369: 			throw new EOFException();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if ((position + length) > end) {
1:eac0369: 			throw new EOFException();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		start = position;
1:eac0369: 		end = position + length;
1:eac0369: 
1:eac0369: 		return;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int clearLimit() {
1:eac0369: 
1:eac0369: 		int unwritten = end - position;
1:eac0369: 
1:eac0369: 		end = pageData.length;
1:eac0369: 
1:eac0369: 		return unwritten;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.ArrayOutputStream
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.IOException;
1: import java.io.EOFException;
1: import java.io.OutputStream;
1: 
1: public class ArrayOutputStream extends OutputStream implements Limit {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private byte[] pageData;
1: 
1: 	private int		start;
1: 	private int		end;		// exclusive
1: 	private int		position;
1: 
1: 	public ArrayOutputStream() {
1: 		super();
1: 	}
1: 
1: 	public ArrayOutputStream(byte[] data) {
1: 		super();
1: 		setData(data);
1: 	}
1: 
1: 	public void setData(byte[] data) {
1: 		pageData = data;
1: 		start = 0;
1: 		if (data != null)
1: 			end = data.length;
1: 		else
1: 			end = 0;
1: 		position = 0;
1: 
1: 	}
1: 
1: 	/*
1: 	** Methods of OutputStream
1: 	*/
1: 
1: 	public void write(int b) throws IOException {
1: 		if (position >= end)
1: 			throw new EOFException();
1: 
1: 		pageData[position++] = (byte) b;
1: 
1: 	}
1: 
1: 	public void write(byte b[], int off, int len) throws IOException {
1: 
1: 		if ((position + len) > end)
1: 			throw new EOFException();
1: 
1: 		System.arraycopy(b, off, pageData, position, len);
1: 		position += len;
1: 	}
1: 
1: 	/*
1: 	** Methods of LengthOutputStream
1: 	*/
1: 
1: 	public int getPosition() {
1: 		return position;
1: 	}
1: 
1: 	/**
1: 		Set the position of the stream pointer.
1: 	*/
1: 	public void setPosition(int newPosition)
1: 		throws IOException {
1: 		if ((newPosition < start) || (newPosition > end))
1: 			throw new EOFException();
1: 
1: 		position = newPosition;
1: 	}
1: 
1: 	public void setLimit(int length) throws IOException {
1: 
1: 		if (length < 0) {
1: 			throw new EOFException();
1: 		}
1: 
1: 		if ((position + length) > end) {
1: 			throw new EOFException();
1: 		}
1: 
1: 		start = position;
1: 		end = position + length;
1: 
1: 		return;
1: 	}
1: 
1: 	public int clearLimit() {
1: 
1: 		int unwritten = end - position;
1: 
1: 		end = pageData.length;
1: 
1: 		return unwritten;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import java.io.IOException;
0: import java.io.EOFException;
0: import java.io.OutputStream;
0: 
0: public class ArrayOutputStream extends OutputStream implements Limit {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private byte[] pageData;
0: 
0: 	private int		start;
0: 	private int		end;		// exclusive
0: 	private int		position;
0: 
0: 	public ArrayOutputStream() {
0: 		super();
0: 	}
0: 
0: 	public ArrayOutputStream(byte[] data) {
0: 		super();
0: 		setData(data);
0: 	}
0: 
0: 	public void setData(byte[] data) {
0: 		pageData = data;
0: 		start = 0;
0: 		if (data != null)
0: 			end = data.length;
0: 		else
0: 			end = 0;
0: 		position = 0;
0: 
0: 	}
0: 
0: 	/*
0: 	** Methods of OutputStream
0: 	*/
0: 
0: 	public void write(int b) throws IOException {
0: 		if (position >= end)
0: 			throw new EOFException();
0: 
0: 		pageData[position++] = (byte) b;
0: 
0: 	}
0: 
0: 	public void write(byte b[], int off, int len) throws IOException {
0: 
0: 		if ((position + len) > end)
0: 			throw new EOFException();
0: 
0: 		System.arraycopy(b, off, pageData, position, len);
0: 		position += len;
0: 	}
0: 
0: 	/*
0: 	** Methods of LengthOutputStream
0: 	*/
0: 
0: 	public int getPosition() {
0: 		return position;
0: 	}
0: 
0: 	/**
0: 		Set the position of the stream pointer.
0: 	*/
0: 	public void setPosition(int newPosition)
0: 		throws IOException {
0: 		if ((newPosition < start) || (newPosition > end))
0: 			throw new EOFException();
0: 
0: 		position = newPosition;
0: 	}
0: 
0: 	public void setLimit(int length) throws IOException {
0: 
0: 		if (length < 0) {
0: 			throw new EOFException();
0: 		}
0: 
0: 		if ((position + length) > end) {
0: 			throw new EOFException();
0: 		}
0: 
0: 		start = position;
0: 		end = position + length;
0: 
0: 		return;
0: 	}
0: 
0: 	public int clearLimit() {
0: 
0: 		int unwritten = end - position;
0: 
0: 		end = pageData.length;
0: 
0: 		return unwritten;
0: 	}
0: }
============================================================================