1:f945aa4: /*
2:f945aa4: 
1:f945aa4:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.RelativeTest
1:f945aa4: 
1:f945aa4:    Licensed to the Apache Software Foundation (ASF) under one
1:f945aa4:    or more contributor license agreements.  See the NOTICE file
1:f945aa4:    distributed with this work for additional information
1:f945aa4:    regarding copyright ownership.  The ASF licenses this file
1:f945aa4:    to you under the Apache License, Version 2.0 (the
1:f945aa4:    "License"); you may not use this file except in compliance
1:f945aa4:    with the License.  You may obtain a copy of the License at
1:f945aa4: 
1:f945aa4:      http://www.apache.org/licenses/LICENSE-2.0
1:f945aa4: 
1:f945aa4:    Unless required by applicable law or agreed to in writing,
1:f945aa4:    software distributed under the License is distributed on an
1:f945aa4:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f945aa4:    KIND, either express or implied.  See the License for the
1:f945aa4:    specific language governing permissions and limitations
1:f945aa4:    under the License.
1:f945aa4: 
1:f945aa4:  */
1:f945aa4: 
1:f945aa4: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:f945aa4: 
1:1ae02c9: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:f945aa4: import junit.framework.Test;
1:f945aa4: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:f945aa4: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:f945aa4: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:f945aa4: import org.apache.derbyTesting.junit.TestConfiguration;
1:f945aa4: 
1:f945aa4: /**
1:f945aa4:  * Tests relative scrolling of a resultset. This is the JUnit conversion of
1:f945aa4:  * jdbcapi/testRelative test.
1:f945aa4:  */
1:f945aa4: public class RelativeTest extends BaseJDBCTestCase {
1:f945aa4: 
1:f945aa4: 	public RelativeTest(String name) {
1:f945aa4: 		super(name);
1:f945aa4: 	}
1:f945aa4: 
1:f945aa4: 	/**
1:f945aa4: 	 * Test relative scrolling of ResultSet with concurrency set to
1:f945aa4: 	 * CONCUR_READ_ONLY.
1:f945aa4: 	 */
1:f945aa4: 	public void testScrolling_CONCUR_READ_ONLY() throws SQLException {
1:f945aa4: 		int concurrency = ResultSet.CONCUR_READ_ONLY;
1:f945aa4: 		Statement stmt1 = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:f945aa4: 				concurrency);
1:f945aa4: 		ResultSet rs = stmt1.executeQuery("select * from testRelative");
1:f945aa4: 
1:f945aa4: 		rs.next(); // First Record
1:f945aa4: 		assertEquals("work1", rs.getString("name"));
1:f945aa4: 		rs.relative(2);
1:f945aa4: 		assertEquals("work3", rs.getString("name"));
1:f945aa4: 		assertEquals(false, rs.isFirst());
1:f945aa4: 		assertEquals(false, rs.isLast());
1:f945aa4: 		assertEquals(false, rs.isAfterLast());
1:f945aa4: 		rs.relative(-2);
1:f945aa4: 		assertEquals("work1", rs.getString("name"));
1:f945aa4: 
1:f945aa4: 		rs.relative(10);
1:f945aa4: 		try {
1:f945aa4: 			/*
1:f945aa4: 			 * Attempting to move beyond the first/last row in the result set
1:f945aa4: 			 * positions the cursor before/after the the first/last row.
1:f945aa4: 			 * Therefore, attempting to get value will throw an exception.
1:f945aa4: 			 */
1:f945aa4: 			rs.getString("name");
1:48082b3: 			fail("FAIL - Attempting to read from an invalid row should have " +
1:48082b3: 					"thrown an exception");
1:f945aa4: 		} catch (SQLException sqle) {
1:f945aa4: 			/**
1:f945aa4: 			 * sets the expected sql state for the expected exceptions,
1:f945aa4: 			 * according to return value of usingDerbyNetClient().
1:f945aa4: 			 */
1:f945aa4: 			String NO_CURRENT_ROW_SQL_STATE = "";
1:f945aa4: 			if (usingDerbyNetClient()) {
1:f945aa4: 				NO_CURRENT_ROW_SQL_STATE = "XJ121";
1:f945aa4: 			} else {
1:f945aa4: 				NO_CURRENT_ROW_SQL_STATE = "24000";
1:f945aa4: 			}
1:f945aa4: 			assertSQLState(NO_CURRENT_ROW_SQL_STATE, sqle);
1:f945aa4: 		}
1:f945aa4: 	}
1:f945aa4: 
1:f945aa4: 	/**
1:f945aa4: 	 * Test relative scrolling of ResultSet with concurrency set to
1:f945aa4: 	 * CONCUR_UPDATABLE.
1:f945aa4: 	 */
1:f945aa4: 	public void testScrolling_CONCUR_UPDATABLE() throws SQLException {
1:f945aa4: 		int concurrency = ResultSet.CONCUR_UPDATABLE;
1:f945aa4: 		Statement stmt1 = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:f945aa4: 				concurrency);
1:f945aa4: 		ResultSet rs = stmt1.executeQuery("select * from testRelative");
1:f945aa4: 
1:f945aa4: 		rs.next(); // First Record
1:f945aa4: 		assertEquals("work1", rs.getString("name"));
1:f945aa4: 		rs.relative(2);
1:f945aa4: 		assertEquals("work3", rs.getString("name"));
1:f945aa4: 		assertEquals(false, rs.isFirst());
1:f945aa4: 		assertEquals(false, rs.isLast());
1:f945aa4: 		assertEquals(false, rs.isAfterLast());
1:f945aa4: 		rs.relative(-2);
1:f945aa4: 		assertEquals("work1", rs.getString("name"));
1:f945aa4: 
1:f945aa4: 		rs.relative(10);
1:f945aa4: 		try {
1:f945aa4: 			/*
1:f945aa4: 			 * Attempting to move beyond the first/last row in the result set
1:f945aa4: 			 * positions the cursor before/after the the first/last row.
1:f945aa4: 			 * Therefore, attempting to get value now will throw an exception.
1:f945aa4: 			 */
1:f945aa4: 			rs.getString("name");
1:48082b3: 			fail("FAIL - Attempting to read from an invalid row should have " +
1:48082b3: 				"thrown an exception");
1:f945aa4: 		} catch (SQLException sqle) {
1:f945aa4: 			/**
1:f945aa4: 			 * sets the expected sql state for the expected exceptions,
1:f945aa4: 			 * according to return value of usingDerbyNetClient().
1:f945aa4: 			 */
1:f945aa4: 			String NO_CURRENT_ROW_SQL_STATE = "";
1:f945aa4: 			if (usingDerbyNetClient()) {
1:f945aa4: 				NO_CURRENT_ROW_SQL_STATE = "XJ121";
1:f945aa4: 			} else {
1:f945aa4: 				NO_CURRENT_ROW_SQL_STATE = "24000";
1:f945aa4: 			}
1:f945aa4: 			assertSQLState(NO_CURRENT_ROW_SQL_STATE, sqle);
1:f945aa4: 		}
1:f945aa4: 	}
1:f945aa4: 
1:f945aa4: 	/**
1:f945aa4: 	 * Runs the test fixtures in embedded and client.
1:f945aa4: 	 * 
1:f945aa4: 	 * @return test suite
1:f945aa4: 	 */
1:f945aa4: 	public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("RelativeTest");
1:f945aa4: 		suite.addTest(baseSuite("RelativeTest:embedded"));
1:f945aa4: 		suite.addTest(TestConfiguration
1:f945aa4: 				.clientServerDecorator(baseSuite("RelativeTest:client")));
1:f945aa4: 		return suite;
1:f945aa4: 	}
1:f945aa4: 
1:f945aa4: 	/**
1:f945aa4: 	 * Base suite of tests that will run in both embedded and client.
1:f945aa4: 	 * 
1:f945aa4: 	 * @param name
1:f945aa4: 	 *            Name for the suite.
1:f945aa4: 	 */
1:f945aa4: 	private static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:f945aa4: 		suite.addTestSuite(RelativeTest.class);
1:f945aa4: 		return new CleanDatabaseTestSetup(DatabasePropertyTestSetup
1:f945aa4: 				.setLockTimeouts(suite, 2, 4)) {
1:f945aa4: 
1:f945aa4: 			/**
1:f945aa4: 			 * Creates the tables used in the test cases.
1:f945aa4: 			 * 
1:f945aa4: 			 * @exception SQLException
1:f945aa4: 			 *                if a database error occurs
1:f945aa4: 			 */
1:f945aa4: 			protected void decorateSQL(Statement stmt) throws SQLException {
1:f945aa4: 				stmt.execute("create table testRelative("
1:f945aa4: 						+ "name varchar(10), i int)");
1:f945aa4: 
1:f945aa4: 				stmt.execute("insert into testRelative values ("
1:f945aa4: 						+ "'work1', NULL)");
1:f945aa4: 				stmt.execute("insert into testRelative values ("
1:f945aa4: 						+ "'work2', NULL)");
1:f945aa4: 				stmt.execute("insert into testRelative values ("
1:f945aa4: 						+ "'work3', NULL)");
1:f945aa4: 				stmt.execute("insert into testRelative values ("
1:f945aa4: 						+ "'work4', NULL)");
1:f945aa4: 			}
1:f945aa4: 		};
1:f945aa4: 	}
1:f945aa4: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("RelativeTest");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:48082b3
/////////////////////////////////////////////////////////////////////////
1: 			fail("FAIL - Attempting to read from an invalid row should have " +
1: 					"thrown an exception");
/////////////////////////////////////////////////////////////////////////
1: 			fail("FAIL - Attempting to read from an invalid row should have " +
1: 				"thrown an exception");
commit:f945aa4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.RelativeTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import java.sql.*;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.Utilities;
1: 
1: /**
1:  * Tests relative scrolling of a resultset. This is the JUnit conversion of
1:  * jdbcapi/testRelative test.
1:  */
1: public class RelativeTest extends BaseJDBCTestCase {
1: 
1: 	public RelativeTest(String name) {
1: 		super(name);
1: 	}
1: 
1: 	/**
1: 	 * Test relative scrolling of ResultSet with concurrency set to
1: 	 * CONCUR_READ_ONLY.
1: 	 */
1: 	public void testScrolling_CONCUR_READ_ONLY() throws SQLException {
1: 		int concurrency = ResultSet.CONCUR_READ_ONLY;
1: 		Statement stmt1 = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1: 				concurrency);
1: 		ResultSet rs = stmt1.executeQuery("select * from testRelative");
1: 
1: 		rs.next(); // First Record
1: 		assertEquals("work1", rs.getString("name"));
1: 		rs.relative(2);
1: 		assertEquals("work3", rs.getString("name"));
1: 		assertEquals(false, rs.isFirst());
1: 		assertEquals(false, rs.isLast());
1: 		assertEquals(false, rs.isAfterLast());
1: 		rs.relative(-2);
1: 		assertEquals("work1", rs.getString("name"));
1: 
1: 		rs.relative(10);
1: 		try {
1: 			/*
1: 			 * Attempting to move beyond the first/last row in the result set
1: 			 * positions the cursor before/after the the first/last row.
1: 			 * Therefore, attempting to get value will throw an exception.
1: 			 */
1: 			rs.getString("name");
1: 		} catch (SQLException sqle) {
1: 			/**
1: 			 * sets the expected sql state for the expected exceptions,
1: 			 * according to return value of usingDerbyNetClient().
1: 			 */
1: 			String NO_CURRENT_ROW_SQL_STATE = "";
1: 			if (usingDerbyNetClient()) {
1: 				NO_CURRENT_ROW_SQL_STATE = "XJ121";
1: 			} else {
1: 				NO_CURRENT_ROW_SQL_STATE = "24000";
1: 			}
1: 			assertSQLState(NO_CURRENT_ROW_SQL_STATE, sqle);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Test relative scrolling of ResultSet with concurrency set to
1: 	 * CONCUR_UPDATABLE.
1: 	 */
1: 	public void testScrolling_CONCUR_UPDATABLE() throws SQLException {
1: 		int concurrency = ResultSet.CONCUR_UPDATABLE;
1: 		Statement stmt1 = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1: 				concurrency);
1: 		ResultSet rs = stmt1.executeQuery("select * from testRelative");
1: 
1: 		rs.next(); // First Record
1: 		assertEquals("work1", rs.getString("name"));
1: 		rs.relative(2);
1: 		assertEquals("work3", rs.getString("name"));
1: 		assertEquals(false, rs.isFirst());
1: 		assertEquals(false, rs.isLast());
1: 		assertEquals(false, rs.isAfterLast());
1: 		rs.relative(-2);
1: 		assertEquals("work1", rs.getString("name"));
1: 
1: 		rs.relative(10);
1: 		try {
1: 			/*
1: 			 * Attempting to move beyond the first/last row in the result set
1: 			 * positions the cursor before/after the the first/last row.
1: 			 * Therefore, attempting to get value now will throw an exception.
1: 			 */
1: 			rs.getString("name");
1: 		} catch (SQLException sqle) {
1: 			/**
1: 			 * sets the expected sql state for the expected exceptions,
1: 			 * according to return value of usingDerbyNetClient().
1: 			 */
1: 			String NO_CURRENT_ROW_SQL_STATE = "";
1: 			if (usingDerbyNetClient()) {
1: 				NO_CURRENT_ROW_SQL_STATE = "XJ121";
1: 			} else {
1: 				NO_CURRENT_ROW_SQL_STATE = "24000";
1: 			}
1: 			assertSQLState(NO_CURRENT_ROW_SQL_STATE, sqle);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Runs the test fixtures in embedded and client.
1: 	 * 
1: 	 * @return test suite
1: 	 */
1: 	public static Test suite() {
0: 		TestSuite suite = new TestSuite("RelativeTest");
1: 		suite.addTest(baseSuite("RelativeTest:embedded"));
1: 		suite.addTest(TestConfiguration
1: 				.clientServerDecorator(baseSuite("RelativeTest:client")));
1: 		return suite;
1: 	}
1: 
1: 	/**
1: 	 * Base suite of tests that will run in both embedded and client.
1: 	 * 
1: 	 * @param name
1: 	 *            Name for the suite.
1: 	 */
1: 	private static Test baseSuite(String name) {
0: 		TestSuite suite = new TestSuite(name);
1: 		suite.addTestSuite(RelativeTest.class);
1: 		return new CleanDatabaseTestSetup(DatabasePropertyTestSetup
1: 				.setLockTimeouts(suite, 2, 4)) {
1: 
1: 			/**
1: 			 * Creates the tables used in the test cases.
1: 			 * 
1: 			 * @exception SQLException
1: 			 *                if a database error occurs
1: 			 */
1: 			protected void decorateSQL(Statement stmt) throws SQLException {
1: 				stmt.execute("create table testRelative("
1: 						+ "name varchar(10), i int)");
1: 
1: 				stmt.execute("insert into testRelative values ("
1: 						+ "'work1', NULL)");
1: 				stmt.execute("insert into testRelative values ("
1: 						+ "'work2', NULL)");
1: 				stmt.execute("insert into testRelative values ("
1: 						+ "'work3', NULL)");
1: 				stmt.execute("insert into testRelative values ("
1: 						+ "'work4', NULL)");
1: 			}
1: 		};
1: 	}
1: }
============================================================================