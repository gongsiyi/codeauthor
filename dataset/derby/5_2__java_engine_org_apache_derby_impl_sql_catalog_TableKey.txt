1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.TableKey
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A TableKey represents a immutable unique identifier for a SQL object.
1:eac0369:  * It has a schemaid and a name	. 
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: final class TableKey 
1:eac0369: {
1:eac0369: 	private final String	tableName;
1:eac0369: 	private final UUID	schemaId;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for when you have both the table and schema names.
1:eac0369: 	 *
1:6b50965: 	 * @param schemaUUID		The UUID of the schema being referecned
1:eac0369: 	 * @param tableName		The name of the table being referenced	 
1:eac0369: 	 */
1:eac0369: 	TableKey(UUID schemaUUID, String tableName)
1:eac0369: 	{
1:eac0369: 		this.tableName = tableName;
1:eac0369: 		this.schemaId = schemaUUID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the table name (without the schema name).
1:eac0369: 	 *
1:eac0369: 	 * @return Table name as a String
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	String getTableName()
1:eac0369: 	{
1:eac0369: 		return tableName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the schema id.
1:eac0369: 	 *
1:eac0369: 	 * @return Schema id as a String
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	UUID getSchemaId()
1:eac0369: 	{
1:eac0369: 		return schemaId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * 2 TableKeys are equal if their both their schemaIds and tableNames are
1:eac0369: 	 * equal.
1:eac0369: 	 *
1:eac0369: 	 * @param otherTableKey	The other TableKey, as Object.
1:eac0369: 	 *
1:eac0369: 	 * @return boolean		Whether or not the 2 TableKey are equal.
1:eac0369: 	 */
1:eac0369: 	public boolean equals(Object otherTableKey)
1:eac0369: 	{
1:eac0369: 		if (otherTableKey instanceof TableKey) {
1:eac0369: 
1:eac0369: 			TableKey otk = (TableKey) otherTableKey;
1:eac0369: 			if (tableName.equals(otk.tableName) && schemaId.equals(otk.schemaId))
1:eac0369: 				return true;
1:eac0369: 		}
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int hashCode()
1:eac0369: 	{
1:eac0369: 		return tableName.hashCode();
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param schemaUUID		The UUID of the schema being referecned
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.TableKey
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: /**
1:  * A TableKey represents a immutable unique identifier for a SQL object.
1:  * It has a schemaid and a name	. 
1:  *
0:  * @author Jamie -- lifed from Comp/TableName
1:  */
1: 
1: final class TableKey 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	private final String	tableName;
1: 	private final UUID	schemaId;
1: 
1: 
1: 	/**
1: 	 * Constructor for when you have both the table and schema names.
1: 	 *
0: 	 * @param schemaId		The UUID of the schema being referecned
1: 	 * @param tableName		The name of the table being referenced	 
1: 	 */
1: 	TableKey(UUID schemaUUID, String tableName)
1: 	{
1: 		this.tableName = tableName;
1: 		this.schemaId = schemaUUID;
1: 	}
1: 
1: 	/**
1: 	 * Get the table name (without the schema name).
1: 	 *
1: 	 * @return Table name as a String
1: 	 */
1: 
1: 	String getTableName()
1: 	{
1: 		return tableName;
1: 	}
1: 
1: 	/**
1: 	 * Get the schema id.
1: 	 *
1: 	 * @return Schema id as a String
1: 	 */
1: 
1: 	UUID getSchemaId()
1: 	{
1: 		return schemaId;
1: 	}
1: 
1: 	/**
1: 	 * 2 TableKeys are equal if their both their schemaIds and tableNames are
1: 	 * equal.
1: 	 *
1: 	 * @param otherTableKey	The other TableKey, as Object.
1: 	 *
1: 	 * @return boolean		Whether or not the 2 TableKey are equal.
1: 	 */
1: 	public boolean equals(Object otherTableKey)
1: 	{
1: 		if (otherTableKey instanceof TableKey) {
1: 
1: 			TableKey otk = (TableKey) otherTableKey;
1: 			if (tableName.equals(otk.tableName) && schemaId.equals(otk.schemaId))
1: 				return true;
1: 		}
1: 		return false;
1: 	}
1: 
1: 	public int hashCode()
1: 	{
1: 		return tableName.hashCode();
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: /**
0:  * A TableKey represents a immutable unique identifier for a SQL object.
0:  * It has a schemaid and a name	. 
0:  *
0:  * @author Jamie -- lifed from Comp/TableName
0:  */
0: 
0: final class TableKey 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	private final String	tableName;
0: 	private final UUID	schemaId;
0: 
0: 
0: 	/**
0: 	 * Constructor for when you have both the table and schema names.
0: 	 *
0: 	 * @param schemaId		The UUID of the schema being referecned
0: 	 * @param tableName		The name of the table being referenced	 
0: 	 */
0: 	TableKey(UUID schemaUUID, String tableName)
0: 	{
0: 		this.tableName = tableName;
0: 		this.schemaId = schemaUUID;
0: 	}
0: 
0: 	/**
0: 	 * Get the table name (without the schema name).
0: 	 *
0: 	 * @return Table name as a String
0: 	 */
0: 
0: 	String getTableName()
0: 	{
0: 		return tableName;
0: 	}
0: 
0: 	/**
0: 	 * Get the schema id.
0: 	 *
0: 	 * @return Schema id as a String
0: 	 */
0: 
0: 	UUID getSchemaId()
0: 	{
0: 		return schemaId;
0: 	}
0: 
0: 	/**
0: 	 * 2 TableKeys are equal if their both their schemaIds and tableNames are
0: 	 * equal.
0: 	 *
0: 	 * @param otherTableKey	The other TableKey, as Object.
0: 	 *
0: 	 * @return boolean		Whether or not the 2 TableKey are equal.
0: 	 */
0: 	public boolean equals(Object otherTableKey)
0: 	{
0: 		if (otherTableKey instanceof TableKey) {
0: 
0: 			TableKey otk = (TableKey) otherTableKey;
0: 			if (tableName.equals(otk.tableName) && schemaId.equals(otk.schemaId))
0: 				return true;
0: 		}
0: 		return false;
0: 	}
0: 
0: 	public int hashCode()
0: 	{
0: 		return tableName.hashCode();
0: 	}
0: 
0: }
============================================================================