1:8badf99: /*
3:8badf99: 
1:8badf99:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.BootLockMinion
1:8badf99: 
1:8badf99:    Licensed to the Apache Software Foundation (ASF) under one or more
1:8badf99:    contributor license agreements.  See the NOTICE file distributed with
1:8badf99:    this work for additional information regarding copyright ownership.
1:8badf99:    The ASF licenses this file to You under the Apache License, Version 2.0
1:8badf99:    (the "License"); you may not use this file except in compliance with
1:8badf99:    the License.  You may obtain a copy of the License at
1:8badf99: 
1:8badf99:       http://www.apache.org/licenses/LICENSE-2.0
1:8badf99: 
1:8badf99:    Unless required by applicable law or agreed to in writing, software
1:8badf99:    distributed under the License is distributed on an "AS IS" BASIS,
1:8badf99:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8badf99:    See the License for the specific language governing permissions and
1:8badf99:    limitations under the License.
1:8badf99: 
1:8badf99:  */
1:8badf99: 
1:8badf99: package org.apache.derbyTesting.functionTests.tests.store;
1:8badf99: 
1:8badf99: import java.sql.Connection;
1:8badf99: import java.sql.Statement;
1:414ba6f: import java.io.File;
1:a946353: import javax.sql.DataSource;
1:a946353: import org.apache.derbyTesting.junit.JDBCDataSource;
1:8badf99: 
1:8badf99: /**
1:8badf99:  * Create and boot the supplied db argument. This auxiliary program is used by
1:8badf99:  * {@code BootLockTest.java} to boot a db in a different jvm and subsequently
1:8badf99:  * attempt a boot to from the original VM to detect dual boot attempt.
1:6c65c08:  * <p/>
1:6c65c08:  * Started as:
1:6c65c08:  * {@code java org.apache.derbyTesting.functionTests.tests.store.BootLockMinion <dbname> <port>}
1:8badf99:  */
1:8badf99: 
1:8badf99: public class BootLockMinion {
1:e9f4ad9:     private static int WAIT_FOR_DESTROY_MAX_MILLIS = BootLockTest.MINION_WAIT_MAX_MILLIS;
1:e9f4ad9:     
1:8badf99:     public static void main(String[] args) {
1:8badf99:         String dbName = args[0];
1:8badf99:         Connection con;
1:8badf99:         Statement stmt;
1:8badf99:         System.setProperty("derby.stream.error.file",
1:8badf99:                            "BootLockMinion.log");
1:8badf99:         try
1:8badf99:         {
1:a946353:             DataSource ds = JDBCDataSource.getDataSource(dbName);
1:a946353:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:8badf99: 
1:8badf99:             con = ds.getConnection();
1:8badf99:             stmt = con.createStatement();
1:8badf99: 
1:8badf99:             stmt.execute("create table t1(i int)");
1:414ba6f:             // Once we are finished creating the database and making the
1:414ba6f:             // connection, create the file minionComplete that BootLockTest
1:414ba6f:             //can check in order to proceed with its work.
1:414ba6f:             File checkFile = new File(BootLockTest.minionCompleteFileName);
1:414ba6f:             checkFile.createNewFile();
1:8badf99:             //infinite loop until we get killed by BootLockTest.java
1:e9f4ad9:             int wait = WAIT_FOR_DESTROY_MAX_MILLIS;
1:e9f4ad9:             while(wait > 0)
1:8badf99:             {
1:e9f4ad9:                 Thread.sleep(10000);
1:e9f4ad9:                 wait -= 10000;
1:8badf99:             }
1:e9f4ad9:             System.err.println("BootLockMinion exceeded maximum wait for destroy");
1:8badf99:         }
1:8badf99:         catch (Exception e) {
1:8badf99:             e.printStackTrace();
1:8badf99:         }
1:8badf99:     }
1:8badf99: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a946353
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.DataSource;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
/////////////////////////////////////////////////////////////////////////
1:             DataSource ds = JDBCDataSource.getDataSource(dbName);
1:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
commit:c712a5b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.EmbeddedDataSource;
/////////////////////////////////////////////////////////////////////////
0:             EmbeddedDataSource ds = new EmbeddedDataSource();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5570eb0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.EmbeddedDataSource40;
/////////////////////////////////////////////////////////////////////////
0:             EmbeddedDataSource40 ds = new EmbeddedDataSource40();
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:e9f4ad9
/////////////////////////////////////////////////////////////////////////
1:     private static int WAIT_FOR_DESTROY_MAX_MILLIS = BootLockTest.MINION_WAIT_MAX_MILLIS;
1:     
/////////////////////////////////////////////////////////////////////////
1:             int wait = WAIT_FOR_DESTROY_MAX_MILLIS;
1:             while(wait > 0)
1:                 Thread.sleep(10000);
1:                 wait -= 10000;
1:             System.err.println("BootLockMinion exceeded maximum wait for destroy");
commit:414ba6f
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1:             // Once we are finished creating the database and making the
1:             // connection, create the file minionComplete that BootLockTest
1:             //can check in order to proceed with its work.
1:             File checkFile = new File(BootLockTest.minionCompleteFileName);
1:             checkFile.createNewFile();
commit:c6cafe4
/////////////////////////////////////////////////////////////////////////
commit:c8bb7d7
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:6c65c08
/////////////////////////////////////////////////////////////////////////
1:  * <p/>
1:  * Started as:
1:  * {@code java org.apache.derbyTesting.functionTests.tests.store.BootLockMinion <dbname> <port>}
commit:8badf99
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.BootLockMinion
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
0: import java.net.Socket;
0: import java.lang.Integer;
1: 
0: import org.apache.derby.jdbc.EmbeddedSimpleDataSource;
1: /**
1:  * Create and boot the supplied db argument. This auxiliary program is used by
1:  * {@code BootLockTest.java} to boot a db in a different jvm and subsequently
1:  * attempt a boot to from the original VM to detect dual boot attempt.
0: * <p>
0:  * You can verify this subprogram by invoking it directly as:
0:  * </p>
0:  * <p>
0:  * {@code java org.apache.derbyTesting.functionTests.tests.store.BootLockMinion <dbname>}
0:  * </p>
1:  */
1: 
1: public class BootLockMinion {
1:     public static void main(String[] args) {
1:         String dbName = args[0];
0:         int portNumber = Integer.decode(args[1]).intValue();
1:         Connection con;
1:         Statement stmt;
1:         System.setProperty("derby.stream.error.file",
1:                            "BootLockMinion.log");
1:         try
1:         {
0:             EmbeddedSimpleDataSource ds = new EmbeddedSimpleDataSource();
0:             ds.setDatabaseName(dbName);
0:             ds.setCreateDatabase("create");
1: 
1:             con = ds.getConnection();
1:             stmt = con.createStatement();
1: 
1:             stmt.execute("create table t1(i int)");
1: 
0:             // Signal to parent that we have booted dbName, so it can try,
0:             // too..
0:             Socket parentS;
0:             parentS = new Socket("localhost", portNumber);
1: 
1:             //infinite loop until we get killed by BootLockTest.java
0:             for(;;)
1:             {
0:                 Thread.sleep(30000);
1:             }
1:         }
1:         catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:     }
1: }
============================================================================