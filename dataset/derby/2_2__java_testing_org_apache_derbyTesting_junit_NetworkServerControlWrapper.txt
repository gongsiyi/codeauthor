1:04353ef: /*
1:04353ef:    Derby - Class org.apache.derbyTesting.junit.NetworkServerControlWrapper
1:04353ef: 
1:04353ef:    Licensed to the Apache Software Foundation (ASF) under one or more
1:04353ef:    contributor license agreements.  See the NOTICE file distributed with
1:04353ef:    this work for additional information regarding copyright ownership.
1:04353ef:    The ASF licenses this file to You under the Apache License, Version 2.0
1:04353ef:    (the "License"); you may not use this file except in compliance with
1:04353ef:    the License.  You may obtain a copy of the License at
1:04353ef: 
1:04353ef:       http://www.apache.org/licenses/LICENSE-2.0
1:04353ef: 
1:04353ef:    Unless required by applicable law or agreed to in writing, software
1:04353ef:    distributed under the License is distributed on an "AS IS" BASIS,
1:04353ef:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:04353ef:    See the License for the specific language governing permissions and
1:04353ef:    limitations under the License.
1:04353ef: 
1:04353ef: */
1:04353ef: package org.apache.derbyTesting.junit;
1:04353ef: 
1:04353ef: import java.io.PrintWriter;
1:04353ef: import java.lang.reflect.Method;
1:04353ef: 
1:04353ef: /**
1:04353ef:  * A class wrapping a {@code NetworkServerControl} instance, using reflection
1:04353ef:  * to allow {@code TestConfiguration} to be used without having
1:04353ef:  * <tt>derbynet.jar</tt> on the classpath.
1:04353ef:  * <p>
1:04353ef:  * Only methods actually required by {@code TestConfiguration} are wrapped, and
1:04353ef:  * this class depends on the functionality implemented by
1:04353ef:  * {@link org.apache.derbyTesting.junit.NetworkServerTestSetup}.
1:04353ef:  * <p>
1:04353ef:  * The problem before was that an exception was thrown during class loading
1:04353ef:  * time, even if the network server functionality was never required by the
1:04353ef:  * tests being run. With this wrapper, an exception will be thrown only if the
1:04353ef:  * functionality is actually required and the necessary classes are not on the
1:04353ef:  * classpath.
1:04353ef:  */
1:04353ef: public class NetworkServerControlWrapper {
1:04353ef: 
1:04353ef:     private static final int PING = 0;
1:04353ef:     private static final int SHUTDOWN = 1;
1:04353ef:     private static final int START = 2;
1:04353ef: 
1:04353ef:     /** Associated {@code NetworkServerControl} instance. */
1:04353ef:     private final Object ctrl;
1:04353ef: 
1:04353ef:     /** Array with the various method objects. */
1:04353ef:     private final Method[] METHODS = new Method[3];
1:04353ef: 
1:04353ef:     /**
1:04353ef:      * Creates a new wrapper object.
1:04353ef:      *
1:04353ef:      * @throws Exception if creating the {@code NetworkServerControl} instance
1:04353ef:      *      fails
1:04353ef:      */
1:04353ef:     NetworkServerControlWrapper()
1:04353ef:             throws Exception {
1:04353ef:         // Try to load the NetworkServerControl class.
1:2510115:         Class<?> clazzSC = null;
1:04353ef:         try {
1:04353ef:             clazzSC =
1:04353ef:                     Class.forName("org.apache.derby.drda.NetworkServerControl");
1:04353ef:         } catch (ClassNotFoundException cnfe) {
1:04353ef:             BaseTestCase.fail("No runtime support for network server", cnfe);
1:04353ef:         }
1:2510115:         Class<?> clazzTS = Class.forName(
1:04353ef:                 "org.apache.derbyTesting.junit.NetworkServerTestSetup");
1:2510115:         Method m = clazzTS.getMethod("getNetworkServerControl");
1:04353ef:         // Invoke method to obtain the NSC instance.
1:2510115:         this.ctrl = m.invoke(null);
1:04353ef: 
1:04353ef:         // Create the NSC method objects.
1:2510115:         METHODS[PING] = clazzSC.getMethod("ping");
1:2510115:         METHODS[SHUTDOWN] = clazzSC.getMethod("shutdown");
1:04353ef:         METHODS[START] = clazzSC.getMethod(
1:04353ef:                 "start", new Class[] {PrintWriter.class});
1:04353ef:     }
1:04353ef: 
1:04353ef:     /**
1:04353ef:      * Helper method that invokes a method returning {@code void}.
1:04353ef:      *
1:04353ef:      * @param methodIndex index of the method to invoke ({@link #METHODS})
1:04353ef:      * @param args arguments to pass to the method being invoked
1:04353ef:      * @throws Exception a broad range of exceptions can be thrown, both
1:04353ef:      *      related to reflection and any exceptions the invoked methods
1:04353ef:      *      themselves might throw
1:04353ef:      */
1:04353ef:     private final void invoke(int methodIndex, Object[] args)
1:04353ef:             throws Exception {
1:04353ef:         try {
1:04353ef:             // Invoke the method with the passed in arguments.
1:04353ef:             METHODS[methodIndex].invoke(this.ctrl, args);
1:04353ef:         } catch (IllegalArgumentException iae) {
1:04353ef:             // Something is off with the passed in arguments.
1:04353ef:             BaseTestCase.fail("Test framework programming error", iae);
1:04353ef:         }
1:04353ef:     }
1:04353ef: 
1:04353ef:     // Method forwarding / invocation follows below //
1:04353ef: 
1:04353ef:     /** @see org.apache.derby.drda.NetworkServerControl#ping */
1:04353ef:     public void ping()
1:04353ef:             throws Exception {
1:04353ef:         invoke(PING, null);
1:04353ef:     }
1:04353ef: 
1:04353ef:     /** @see org.apache.derby.drda.NetworkServerControl#shutdown */
1:04353ef:     public void shutdown()
1:04353ef:             throws Exception {
1:04353ef:         invoke(SHUTDOWN, null);
1:04353ef:     }
1:04353ef: 
1:04353ef:     /** @see org.apache.derby.drda.NetworkServerControl#start */
1:04353ef:     public void start(PrintWriter printWriter)
1:04353ef:             throws Exception {
1:04353ef:         invoke(START, new Object[] {printWriter});
1:04353ef:     }
1:04353ef: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2510115
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazzSC = null;
1:         Class<?> clazzTS = Class.forName(
1:         Method m = clazzTS.getMethod("getNetworkServerControl");
1:         this.ctrl = m.invoke(null);
1:         METHODS[PING] = clazzSC.getMethod("ping");
1:         METHODS[SHUTDOWN] = clazzSC.getMethod("shutdown");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:04353ef
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derbyTesting.junit.NetworkServerControlWrapper
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.io.PrintWriter;
1: import java.lang.reflect.Method;
1: 
1: /**
1:  * A class wrapping a {@code NetworkServerControl} instance, using reflection
1:  * to allow {@code TestConfiguration} to be used without having
1:  * <tt>derbynet.jar</tt> on the classpath.
1:  * <p>
1:  * Only methods actually required by {@code TestConfiguration} are wrapped, and
1:  * this class depends on the functionality implemented by
1:  * {@link org.apache.derbyTesting.junit.NetworkServerTestSetup}.
1:  * <p>
1:  * The problem before was that an exception was thrown during class loading
1:  * time, even if the network server functionality was never required by the
1:  * tests being run. With this wrapper, an exception will be thrown only if the
1:  * functionality is actually required and the necessary classes are not on the
1:  * classpath.
1:  */
1: public class NetworkServerControlWrapper {
1: 
1:     private static final int PING = 0;
1:     private static final int SHUTDOWN = 1;
1:     private static final int START = 2;
1: 
1:     /** Associated {@code NetworkServerControl} instance. */
1:     private final Object ctrl;
1: 
1:     /** Array with the various method objects. */
1:     private final Method[] METHODS = new Method[3];
1: 
1:     /**
1:      * Creates a new wrapper object.
1:      *
1:      * @throws Exception if creating the {@code NetworkServerControl} instance
1:      *      fails
1:      */
1:     NetworkServerControlWrapper()
1:             throws Exception {
1:         // Try to load the NetworkServerControl class.
0:         Class clazzSC = null;
1:         try {
1:             clazzSC =
1:                     Class.forName("org.apache.derby.drda.NetworkServerControl");
1:         } catch (ClassNotFoundException cnfe) {
1:             BaseTestCase.fail("No runtime support for network server", cnfe);
1:         }
0:         Class clazzTS = Class.forName(
1:                 "org.apache.derbyTesting.junit.NetworkServerTestSetup");
0:         Method m = clazzTS.getMethod("getNetworkServerControl", null);
1:         // Invoke method to obtain the NSC instance.
0:         this.ctrl = m.invoke(null, null);
1: 
1:         // Create the NSC method objects.
0:         METHODS[PING] = clazzSC.getMethod("ping", null);
0:         METHODS[SHUTDOWN] = clazzSC.getMethod("shutdown", null);
1:         METHODS[START] = clazzSC.getMethod(
1:                 "start", new Class[] {PrintWriter.class});
1:     }
1: 
1:     /**
1:      * Helper method that invokes a method returning {@code void}.
1:      *
1:      * @param methodIndex index of the method to invoke ({@link #METHODS})
1:      * @param args arguments to pass to the method being invoked
1:      * @throws Exception a broad range of exceptions can be thrown, both
1:      *      related to reflection and any exceptions the invoked methods
1:      *      themselves might throw
1:      */
1:     private final void invoke(int methodIndex, Object[] args)
1:             throws Exception {
1:         try {
1:             // Invoke the method with the passed in arguments.
1:             METHODS[methodIndex].invoke(this.ctrl, args);
1:         } catch (IllegalArgumentException iae) {
1:             // Something is off with the passed in arguments.
1:             BaseTestCase.fail("Test framework programming error", iae);
1:         }
1:     }
1: 
1:     // Method forwarding / invocation follows below //
1: 
1:     /** @see org.apache.derby.drda.NetworkServerControl#ping */
1:     public void ping()
1:             throws Exception {
1:         invoke(PING, null);
1:     }
1: 
1:     /** @see org.apache.derby.drda.NetworkServerControl#shutdown */
1:     public void shutdown()
1:             throws Exception {
1:         invoke(SHUTDOWN, null);
1:     }
1: 
1:     /** @see org.apache.derby.drda.NetworkServerControl#start */
1:     public void start(PrintWriter printWriter)
1:             throws Exception {
1:         invoke(START, new Object[] {printWriter});
1:     }
1: }
============================================================================