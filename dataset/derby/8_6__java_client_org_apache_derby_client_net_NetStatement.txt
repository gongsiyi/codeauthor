1:33776ff: /*
5:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.NetStatement
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:69e3d06: import java.util.ArrayList;
1:33776ff: import org.apache.derby.client.am.ColumnMetaData;
1:70f7692: import org.apache.derby.client.am.Section;
1:33776ff: import org.apache.derby.client.am.SqlException;
1:69e3d06: import org.apache.derby.client.am.ClientStatement;
1:69e3d06: import org.apache.derby.client.am.MaterialStatement;
1:2e7a2af: import org.apache.derby.jdbc.ClientDriver;
1:33776ff: 
1:0326967: class NetStatement implements MaterialStatement {
1:33776ff: 
1:69e3d06:     ClientStatement statement_;
1:33776ff: 
1:33776ff: 
1:70f7692:     // Alias for (NetConnection) statement_.connection
1:70f7692:     NetConnection netConnection_;
1:33776ff: 
1:70f7692:     // Alias for (NetAgent) statement_.agent
1:70f7692:     NetAgent netAgent_;
1:33776ff: 
1:33776ff: 
1:70f7692:     // If qryrowset is sent on opnqry then it also needs to be sent on every subsequent cntqry.
1:0326967:     boolean qryrowsetSentOnOpnqry_ = false;
1:33776ff: 
1:70f7692:     //---------------------constructors/finalizer---------------------------------
1:33776ff: 
1:70f7692:     private NetStatement() {
1:70f7692:         initNetStatement();
3:70f7692:     }
1:33776ff: 
1:70f7692:     private void resetNetStatement() {
1:70f7692:         initNetStatement();
1:70f7692:     }
1:33776ff: 
1:70f7692:     private void initNetStatement() {
1:70f7692:         qryrowsetSentOnOpnqry_ = false;
1:70f7692:     }
1:33776ff: 
1:70f7692:     // Relay constructor for NetPreparedStatement.
1:69e3d06:     NetStatement(
1:69e3d06:             ClientStatement statement,
1:69e3d06:             NetAgent netAgent,
1:69e3d06:             NetConnection netConnection) {
1:69e3d06: 
1:70f7692:         this();
1:70f7692:         initNetStatement(statement, netAgent, netConnection);
1:70f7692:     }
1:33776ff: 
1:69e3d06:     void resetNetStatement(
1:69e3d06:             ClientStatement statement,
1:69e3d06:             NetAgent netAgent,
1:69e3d06:             NetConnection netConnection) {
1:69e3d06: 
1:70f7692:         resetNetStatement();
1:70f7692:         initNetStatement(statement, netAgent, netConnection);
1:70f7692:     }
1:33776ff: 
1:69e3d06:     private void initNetStatement(
1:69e3d06:             ClientStatement statement,
1:69e3d06:             NetAgent netAgent,
1:69e3d06:             NetConnection netConnection) {
1:69e3d06: 
1:70f7692:         netAgent_ = netAgent;
1:70f7692:         netConnection_ = netConnection;
1:70f7692:         statement_ = statement;
1:95049cf:         statement_.setMaterialStatement(this);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void reset_() {
1:70f7692:         qryrowsetSentOnOpnqry_ = false;
1:70f7692:     }
1:33776ff: 
1:70f7692:     // Called by abstract Connection.createStatement().newStatement() for jdbc 2 statements with scroll attributes
1:70f7692:     NetStatement(NetAgent netAgent, NetConnection netConnection, int type, int concurrency, int holdability) throws SqlException {
1:69e3d06:         this(ClientDriver.getFactory().newStatement(
1:69e3d06:                  netAgent,
1:69e3d06:                  netConnection,
1:69e3d06:                  type,
1:69e3d06:                  concurrency,
1:69e3d06:                  holdability,
1:69e3d06:                  ClientStatement.NO_GENERATED_KEYS,
1:69e3d06:                  null,
1:69e3d06:                  null),
1:69e3d06:              netAgent,
1:69e3d06:              netConnection);
1:70f7692:     }
1:33776ff: 
1:70f7692:     void resetNetStatement(NetAgent netAgent, NetConnection netConnection, int type, int concurrency, int holdability) throws SqlException {
1:69e3d06:         statement_.resetStatement(
1:69e3d06:             netAgent,
1:69e3d06:             netConnection,
1:69e3d06:             type,
1:69e3d06:             concurrency,
1:69e3d06:             holdability,
1:69e3d06:             ClientStatement.NO_GENERATED_KEYS,
1:69e3d06:             null,
1:69e3d06:             null);
2:70f7692:         resetNetStatement(statement_, netAgent, netConnection);
1:70f7692:     }
1:33776ff: 
1:70f7692:     // ------------------------abstract box car methods-----------------------------------------------
1:33776ff: 
1:69e3d06:     public void writeSetSpecialRegister_(
1:69e3d06:             Section section,
1:69e3d06:             ArrayList sqlsttList) throws SqlException {
1:69e3d06: 
1:29c10e3:         netAgent_.statementRequest_.writeSetSpecialRegister(section,sqlsttList);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void readSetSpecialRegister_() throws SqlException {
1:70f7692:         netAgent_.statementReply_.readSetSpecialRegister(statement_);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void writeExecuteImmediate_(String sql,
1:70f7692:                                        Section section) throws SqlException {
1:70f7692:         netAgent_.statementRequest_.writeExecuteImmediate(this, sql, section);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void readExecuteImmediate_() throws SqlException {
1:70f7692:         netAgent_.statementReply_.readExecuteImmediate(statement_);
1:70f7692:     }
1:33776ff: 
1:70f7692:     // NOTE: NET processing does not require parameters supplied on the "read-side" so parameter sql is ignored.
1:70f7692:     public void readExecuteImmediateForBatch_(String sql) throws SqlException {
1:70f7692:         readExecuteImmediate_();
1:70f7692:     }
1:70f7692: 
1:70f7692:     public void writePrepareDescribeOutput_(String sql,
1:70f7692:                                             Section section) throws SqlException {
1:70f7692:         netAgent_.statementRequest_.writePrepareDescribeOutput(this, sql, section);
1:70f7692:     }
1:70f7692: 
1:70f7692:     public void readPrepareDescribeOutput_() throws SqlException {
1:70f7692:         netAgent_.statementReply_.readPrepareDescribeOutput(statement_);
1:70f7692:     }
1:70f7692: 
1:70f7692:     public void writeOpenQuery_(Section section,
2:33776ff:                                 int fetchSize,
1:70f7692:                                 int resultSetType)
1:70f7692:             throws SqlException {
1:70f7692:         netAgent_.statementRequest_.writeOpenQuery(this,
1:70f7692:                 section,
1:70f7692:                 fetchSize,
1:70f7692:                 resultSetType);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void readOpenQuery_() throws SqlException {
1:70f7692:         netAgent_.statementReply_.readOpenQuery(statement_);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void writeExecuteCall_(boolean outputExpected,
1:70f7692:                                   String procedureName,
1:70f7692:                                   Section section,
1:70f7692:                                   int fetchSize,
1:70f7692:                                   boolean suppressResultSets,
1:70f7692:                                   int resultSetType,
1:70f7692:                                   ColumnMetaData parameterMetaData,
1:70f7692:                                   Object[] inputs) throws SqlException {
1:70f7692:         netAgent_.statementRequest_.writeExecuteCall(this,
1:70f7692:                 outputExpected,
1:70f7692:                 procedureName,
1:70f7692:                 section,
1:70f7692:                 fetchSize,
1:70f7692:                 suppressResultSets,
1:70f7692:                 resultSetType,
1:70f7692:                 parameterMetaData,
1:70f7692:                 inputs);
1:70f7692:     }
1:70f7692: 
1:70f7692:     public void readExecuteCall_() throws SqlException {
1:70f7692:         netAgent_.statementReply_.readExecuteCall(statement_);
1:70f7692:     }
1:70f7692: 
1:70f7692:     public void writePrepare_(String sql, Section section) throws SqlException {
1:70f7692:         netAgent_.statementRequest_.writePrepare(this, sql, section);
1:70f7692:     }
1:70f7692: 
1:70f7692:     public void readPrepare_() throws SqlException {
1:70f7692:         netAgent_.statementReply_.readPrepare(statement_);
1:70f7692:     }
1:70f7692: 
1:70f7692:     public void markClosedOnServer_() {
1:70f7692:     }
1:70f7692: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class NetStatement implements MaterialStatement {
/////////////////////////////////////////////////////////////////////////
1:     boolean qryrowsetSentOnOpnqry_ = false;
/////////////////////////////////////////////////////////////////////////
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import org.apache.derby.client.am.ClientStatement;
1: import org.apache.derby.client.am.MaterialStatement;
1:     ClientStatement statement_;
/////////////////////////////////////////////////////////////////////////
1:     NetStatement(
1:             ClientStatement statement,
1:             NetAgent netAgent,
1:             NetConnection netConnection) {
1: 
1:     void resetNetStatement(
1:             ClientStatement statement,
1:             NetAgent netAgent,
1:             NetConnection netConnection) {
1: 
1:     private void initNetStatement(
1:             ClientStatement statement,
1:             NetAgent netAgent,
1:             NetConnection netConnection) {
1: 
/////////////////////////////////////////////////////////////////////////
1:         this(ClientDriver.getFactory().newStatement(
1:                  netAgent,
1:                  netConnection,
1:                  type,
1:                  concurrency,
1:                  holdability,
1:                  ClientStatement.NO_GENERATED_KEYS,
1:                  null,
1:                  null),
1:              netAgent,
1:              netConnection);
1:         statement_.resetStatement(
1:             netAgent,
1:             netConnection,
1:             type,
1:             concurrency,
1:             holdability,
1:             ClientStatement.NO_GENERATED_KEYS,
1:             null,
1:             null);
1:     public void writeSetSpecialRegister_(
1:             Section section,
1:             ArrayList sqlsttList) throws SqlException {
1: 
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.MaterialStatement;
0: public class NetStatement implements MaterialStatement {
/////////////////////////////////////////////////////////////////////////
0:     NetStatement(Statement statement,
0:                  NetAgent netAgent,
0:                  NetConnection netConnection) {
0:     void resetNetStatement(Statement statement,
0:                            NetAgent netAgent,
0:                            NetConnection netConnection) {
0:     private void initNetStatement(Statement statement,
0:                                   NetAgent netAgent,
0:                                   NetConnection netConnection) {
commit:95049cf
/////////////////////////////////////////////////////////////////////////
1:         statement_.setMaterialStatement(this);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c50ba59
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:b52081a
/////////////////////////////////////////////////////////////////////////
0:         this(ClientDriver.getFactory().newStatement(netAgent, netConnection, type, concurrency, holdability, java.sql.Statement.NO_GENERATED_KEYS, 
0:                 null,null
0:                 ),
0:         statement_.resetStatement(netAgent, netConnection, type, concurrency, holdability, java.sql.Statement.NO_GENERATED_KEYS, 
0:                 null, null);
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:29c10e3
/////////////////////////////////////////////////////////////////////////
0:     public void writeSetSpecialRegister_(Section section, java.util.ArrayList sqlsttList) throws SqlException {
1:         netAgent_.statementRequest_.writeSetSpecialRegister(section,sqlsttList);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2e7a2af
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.ClientDriver;
/////////////////////////////////////////////////////////////////////////
0:         this(ClientDriver.getFactory().newStatement(netAgent, netConnection),
/////////////////////////////////////////////////////////////////////////
0:         this(ClientDriver.getFactory().newStatement(netAgent, netConnection, type, concurrency, holdability, java.sql.Statement.NO_GENERATED_KEYS, null),
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.Section;
0: import org.apache.derby.client.am.Statement;
0: public class NetStatement implements org.apache.derby.client.am.MaterialStatement {
0:     Statement statement_;
1:     // Alias for (NetConnection) statement_.connection
1:     NetConnection netConnection_;
1:     // Alias for (NetAgent) statement_.agent
1:     NetAgent netAgent_;
1:     // If qryrowset is sent on opnqry then it also needs to be sent on every subsequent cntqry.
0:     public boolean qryrowsetSentOnOpnqry_ = false;
1:     //---------------------constructors/finalizer---------------------------------
1:     private NetStatement() {
1:         initNetStatement();
1:     }
1:     private void resetNetStatement() {
1:         initNetStatement();
1:     }
1:     private void initNetStatement() {
1:         qryrowsetSentOnOpnqry_ = false;
1:     }
1:     // Relay constructor for NetPreparedStatement.
0:     NetStatement(org.apache.derby.client.am.Statement statement, NetAgent netAgent, NetConnection netConnection) {
1:         this();
1:         initNetStatement(statement, netAgent, netConnection);
1:     }
0:     void resetNetStatement(org.apache.derby.client.am.Statement statement, NetAgent netAgent, NetConnection netConnection) {
1:         resetNetStatement();
1:         initNetStatement(statement, netAgent, netConnection);
1:     }
0:     private void initNetStatement(org.apache.derby.client.am.Statement statement, NetAgent netAgent, NetConnection netConnection) {
1:         netAgent_ = netAgent;
1:         netConnection_ = netConnection;
1:         statement_ = statement;
0:         statement_.materialStatement_ = this;
1:     }
0:     // Called by abstract Connection.createStatement().newStatement() for jdbc 1 statements
0:     NetStatement(NetAgent netAgent, NetConnection netConnection) throws SqlException {
0:         this(new Statement(netAgent, netConnection),
0:                 netAgent,
0:                 netConnection);
1:     }
0:     void netReset(NetAgent netAgent, NetConnection netConnection) throws SqlException {
0:         statement_.resetStatement(netAgent, netConnection);
1:         resetNetStatement(statement_, netAgent, netConnection);
1:     }
1:     public void reset_() {
1:         qryrowsetSentOnOpnqry_ = false;
1:     }
1:     // Called by abstract Connection.createStatement().newStatement() for jdbc 2 statements with scroll attributes
1:     NetStatement(NetAgent netAgent, NetConnection netConnection, int type, int concurrency, int holdability) throws SqlException {
0:         this(new Statement(netAgent, netConnection, type, concurrency, holdability, java.sql.Statement.NO_GENERATED_KEYS, null),
0:                 netAgent,
0:                 netConnection);
1:     }
1:     void resetNetStatement(NetAgent netAgent, NetConnection netConnection, int type, int concurrency, int holdability) throws SqlException {
0:         statement_.resetStatement(netAgent, netConnection, type, concurrency, holdability, java.sql.Statement.NO_GENERATED_KEYS, null);
1:         resetNetStatement(statement_, netAgent, netConnection);
1:     }
0:     protected void finalize() throws java.lang.Throwable {
0:         super.finalize();
1:     }
1:     // ------------------------abstract box car methods-----------------------------------------------
0:     public void writeSetSpecialRegister_(java.util.ArrayList sqlsttList) throws SqlException {
0:         netAgent_.statementRequest_.writeSetSpecialRegister(sqlsttList);
1:     }
1:     public void readSetSpecialRegister_() throws SqlException {
1:         netAgent_.statementReply_.readSetSpecialRegister(statement_);
1:     }
1:     public void writeExecuteImmediate_(String sql,
1:                                        Section section) throws SqlException {
1:         netAgent_.statementRequest_.writeExecuteImmediate(this, sql, section);
1:     }
1:     public void readExecuteImmediate_() throws SqlException {
1:         netAgent_.statementReply_.readExecuteImmediate(statement_);
1:     }
1:     // NOTE: NET processing does not require parameters supplied on the "read-side" so parameter sql is ignored.
1:     public void readExecuteImmediateForBatch_(String sql) throws SqlException {
1:         readExecuteImmediate_();
1:     }
1: 
1:     public void writePrepareDescribeOutput_(String sql,
1:                                             Section section) throws SqlException {
1:         netAgent_.statementRequest_.writePrepareDescribeOutput(this, sql, section);
1:     }
1: 
1:     public void readPrepareDescribeOutput_() throws SqlException {
1:         netAgent_.statementReply_.readPrepareDescribeOutput(statement_);
1:     }
1: 
1:     public void writeOpenQuery_(Section section,
1:                                 int resultSetType)
1:             throws SqlException {
1:         netAgent_.statementRequest_.writeOpenQuery(this,
1:                 section,
1:                 fetchSize,
1:                 resultSetType);
1:     }
1:     public void readOpenQuery_() throws SqlException {
1:         netAgent_.statementReply_.readOpenQuery(statement_);
1:     }
1:     public void writeExecuteCall_(boolean outputExpected,
1:                                   String procedureName,
1:                                   Section section,
1:                                   int fetchSize,
1:                                   boolean suppressResultSets,
1:                                   int resultSetType,
1:                                   ColumnMetaData parameterMetaData,
1:                                   Object[] inputs) throws SqlException {
1:         netAgent_.statementRequest_.writeExecuteCall(this,
1:                 outputExpected,
1:                 procedureName,
1:                 section,
1:                 fetchSize,
1:                 suppressResultSets,
1:                 resultSetType,
1:                 parameterMetaData,
1:                 inputs);
1:     }
1: 
1:     public void readExecuteCall_() throws SqlException {
1:         netAgent_.statementReply_.readExecuteCall(statement_);
1:     }
1: 
1:     public void writePrepare_(String sql, Section section) throws SqlException {
1:         netAgent_.statementRequest_.writePrepare(this, sql, section);
1:     }
1: 
1:     public void readPrepare_() throws SqlException {
1:         netAgent_.statementReply_.readPrepare(statement_);
1:     }
1: 
1:     public void markClosedOnServer_() {
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.NetStatement
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
0: import org.apache.derby.client.am.Section;
1: import org.apache.derby.client.am.ColumnMetaData;
0: import org.apache.derby.client.am.Statement;
1: import org.apache.derby.client.am.SqlException;
1: 
0: public class NetStatement implements org.apache.derby.client.am.MaterialStatement
0: {
1: 
0:   Statement statement_;
1: 
1: 
0:   // Alias for (NetConnection) statement_.connection
0:   NetConnection netConnection_;
1: 
0:   // Alias for (NetAgent) statement_.agent
0:    NetAgent netAgent_;
1: 
1: 
0:   // If qryrowset is sent on opnqry then it also needs to be sent on every subsequent cntqry.
0:   public boolean qryrowsetSentOnOpnqry_ = false;
1: 
0:   //---------------------constructors/finalizer---------------------------------
1: 
0:   private NetStatement()
0:   {
0:     initNetStatement();
0:   }
1: 
0:   private void resetNetStatement()
0:   {
0:     initNetStatement();
0:   }
1: 
0:   private void initNetStatement()
0:   {
0:     qryrowsetSentOnOpnqry_ = false;
0:   }
1: 
0:   // Relay constructor for NetPreparedStatement.
0:   NetStatement (org.apache.derby.client.am.Statement statement, NetAgent netAgent, NetConnection netConnection)
0:   {
0:     this();
0:     initNetStatement (statement, netAgent, netConnection);
0:   }
1: 
0:   void resetNetStatement (org.apache.derby.client.am.Statement statement, NetAgent netAgent, NetConnection netConnection)
0:   {
0:     resetNetStatement();
0:     initNetStatement (statement, netAgent, netConnection);
0:   }
1: 
0:   private void initNetStatement (org.apache.derby.client.am.Statement statement, NetAgent netAgent, NetConnection netConnection)
0:   {
0:     netAgent_ = netAgent;
0:     netConnection_ = netConnection;
0:     statement_ = statement;
0:     statement_.materialStatement_ = this;
0:   }
1: 
0:   // Called by abstract Connection.createStatement().newStatement() for jdbc 1 statements
0:   NetStatement (NetAgent netAgent, NetConnection netConnection) throws SqlException
0:   {
0:     this (new Statement (netAgent, netConnection),
0:           netAgent,
0:           netConnection);
0:   }
1: 
0:   void netReset (NetAgent netAgent, NetConnection netConnection) throws SqlException
0:   {
0:     statement_.resetStatement(netAgent, netConnection);
0:     resetNetStatement (statement_, netAgent, netConnection);
0:   }
1: 
0:   public void reset_ ()
0:   {
0:     qryrowsetSentOnOpnqry_ = false;
0:   }
1: 
0:   // Called by abstract Connection.createStatement().newStatement() for jdbc 2 statements with scroll attributes
0:   NetStatement (NetAgent netAgent, NetConnection netConnection, int type, int concurrency, int holdability) throws SqlException
0:   {
0:     this (new Statement (netAgent, netConnection, type, concurrency, holdability, java.sql.Statement.NO_GENERATED_KEYS, null),
0:           netAgent,
0:           netConnection);
0:   }
1: 
0:   void resetNetStatement (NetAgent netAgent, NetConnection netConnection, int type, int concurrency, int holdability) throws SqlException
0:   {
0:     statement_.resetStatement(netAgent, netConnection, type, concurrency, holdability, java.sql.Statement.NO_GENERATED_KEYS,null);
0:     resetNetStatement (statement_, netAgent, netConnection);
0:   }
1: 
0:   protected void finalize () throws java.lang.Throwable
0:   {
0:     super.finalize();
0:   }
1: 
0:   // ------------------------abstract box car methods-----------------------------------------------
1: 
0:   public void writeSetSpecialRegister_ (java.util.ArrayList sqlsttList) throws SqlException
0:   { netAgent_.statementRequest_.writeSetSpecialRegister (sqlsttList); }
0:   public void readSetSpecialRegister_ () throws SqlException
0:   { netAgent_.statementReply_.readSetSpecialRegister (statement_); }
0:   public void writeExecuteImmediate_ (String sql,
0:                                      Section section) throws SqlException
0:   { netAgent_.statementRequest_.writeExecuteImmediate (this, sql, section); }
0:   public void readExecuteImmediate_ () throws SqlException
0:   { netAgent_.statementReply_.readExecuteImmediate (statement_); }
1: 
0:   // NOTE: NET processing does not require parameters supplied on the "read-side" so parameter sql is ignored.
0:   public void readExecuteImmediateForBatch_ (String sql) throws SqlException
0:   { readExecuteImmediate_(); }
1: 
0:   public void writePrepareDescribeOutput_ (String sql,
0:                                           Section section) throws SqlException
0:   { netAgent_.statementRequest_.writePrepareDescribeOutput (this, sql, section); }
0:   public void readPrepareDescribeOutput_ () throws SqlException
0:   { netAgent_.statementReply_.readPrepareDescribeOutput (statement_); }
1: 
0:   public void writeOpenQuery_ (Section section,
1:                               int fetchSize,
0:                               int resultSetType)
0:                                throws SqlException
0:   {
0:     netAgent_.statementRequest_.writeOpenQuery (
0:       this,
0:       section,
0:       fetchSize,
0:       resultSetType);
0:   }
0:   public void readOpenQuery_ () throws SqlException
0:   { netAgent_.statementReply_.readOpenQuery (statement_); }
1: 
0:   public void writeExecuteCall_ (boolean outputExpected,
0:                                 String procedureName,
0:                                 Section section,
1:                                 int fetchSize,
0:                                 boolean suppressResultSets,
0:                                 int resultSetType,
0:                                 ColumnMetaData parameterMetaData,
0:                                 Object[] inputs) throws SqlException
0:   {
0:     netAgent_.statementRequest_.writeExecuteCall (
0:       this,
0:       outputExpected,
0:       procedureName,
0:       section,
0:       fetchSize,
0:       suppressResultSets,
0:       resultSetType,
0:       parameterMetaData,
0:       inputs);
0:   }
0:   public void readExecuteCall_ () throws SqlException
0:   { netAgent_.statementReply_.readExecuteCall (statement_); }
1: 
0:   public void writePrepare_ (String sql, Section section) throws SqlException
0:   { netAgent_.statementRequest_.writePrepare (this, sql, section); }
0:   public void readPrepare_ () throws SqlException
0:   { netAgent_.statementReply_.readPrepare (statement_); }
1: 
0:   public void markClosedOnServer_ () {}
0: }
============================================================================