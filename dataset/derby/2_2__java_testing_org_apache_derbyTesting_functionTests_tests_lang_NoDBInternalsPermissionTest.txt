1:a0dbbd7: /*
1:a0dbbd7: 
1:a0dbbd7:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.NoDBInternalsPermissionTest
1:a0dbbd7: 
1:a0dbbd7:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a0dbbd7:    contributor license agreements.  See the NOTICE file distributed with
1:a0dbbd7:    this work for additional information regarding copyright ownership.
1:a0dbbd7:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a0dbbd7:    (the "License"); you may not use this file except in compliance with
1:a0dbbd7:    the License.  You may obtain a copy of the License at
1:a0dbbd7: 
1:a0dbbd7:      http://www.apache.org/licenses/LICENSE-2.0
1:a0dbbd7: 
1:a0dbbd7:    Unless required by applicable law or agreed to in writing, software
1:a0dbbd7:    distributed under the License is distributed on an "AS IS" BASIS,
1:a0dbbd7:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0dbbd7:    See the License for the specific language governing permissions and
1:a0dbbd7:    limitations under the License.
1:a0dbbd7: 
1:a0dbbd7:  */
1:a0dbbd7: 
1:a0dbbd7: package org.apache.derbyTesting.functionTests.tests.lang;
1:a0dbbd7: 
1:a0dbbd7: import java.io.File;
1:a0dbbd7: import java.security.AccessControlException;
1:a0dbbd7: import java.sql.Connection;
1:a0dbbd7: import java.sql.DriverManager;
1:a0dbbd7: import java.sql.SQLException;
1:a0dbbd7: import junit.framework.Test;
1:a0dbbd7: import org.apache.derbyTesting.junit.BaseTestSuite;
1:a0dbbd7: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:a0dbbd7: import org.apache.derbyTesting.junit.TestConfiguration;
1:a0dbbd7: 
1:a0dbbd7: import org.apache.derby.iapi.services.context.ContextService;
1:b6a45f5: import org.apache.derby.impl.jdbc.EmbedConnection;
1:b1008f3: import org.apache.derby.impl.services.jce.JCECipherFactoryBuilder;
1:d7a318a: import org.apache.derby.impl.store.raw.data.BaseDataFileFactory;
1:a0dbbd7: 
1:a0dbbd7: /**
1:b6a45f5:  * <p>
1:a0dbbd7:  * Test backup and restore of databases with Lucene indexes.
1:a0dbbd7:  * </p>
1:a0dbbd7:  */
1:a0dbbd7: public class NoDBInternalsPermissionTest extends GeneratedColumnsHelper
1:a0dbbd7: {
1:a0dbbd7:     ///////////////////////////////////////////////////////////////////////////////////
1:a0dbbd7:     //
1:a0dbbd7:     // CONSTANTS
1:a0dbbd7:     //
1:a0dbbd7:     ///////////////////////////////////////////////////////////////////////////////////
1:a0dbbd7: 
1:a0dbbd7:     private static  final   String      POLICY_FILE = "org/apache/derbyTesting/functionTests/tests/lang/no_derby_internals.policy";
1:a0dbbd7: 
1:a0dbbd7:     ///////////////////////////////////////////////////////////////////////////////////
1:a0dbbd7:     //
1:a0dbbd7:     // STATE
1:a0dbbd7:     //
1:a0dbbd7:     ///////////////////////////////////////////////////////////////////////////////////
1:a0dbbd7: 
1:a0dbbd7:     ///////////////////////////////////////////////////////////////////////////////////
1:a0dbbd7:     //
1:a0dbbd7:     // CONSTRUCTOR
1:a0dbbd7:     //
1:a0dbbd7:     ///////////////////////////////////////////////////////////////////////////////////
1:a0dbbd7: 
1:a0dbbd7:     /**
1:a0dbbd7:      * Create a new instance.
1:a0dbbd7:      */
1:a0dbbd7: 
1:a0dbbd7:     public NoDBInternalsPermissionTest( String name )
1:a0dbbd7:     {
1:a0dbbd7:         super( name );
1:a0dbbd7:     }
1:b1008f3: 
1:a0dbbd7:     ///////////////////////////////////////////////////////////////////////////////////
1:a0dbbd7:     //
1:a0dbbd7:     // JUnit BEHAVIOR
1:a0dbbd7:     //
1:a0dbbd7:     ///////////////////////////////////////////////////////////////////////////////////
1:a0dbbd7: 
1:a0dbbd7: 
1:b1008f3:     /**
1:a0dbbd7:      * Construct top level suite in this JUnit test
1:a0dbbd7:      */
1:a0dbbd7:     public static Test suite()
1:a0dbbd7:     {
1:a0dbbd7:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite( NoDBInternalsPermissionTest.class );
1:a0dbbd7: 
1:a0dbbd7:         Test        secureTest = new SecurityManagerSetup( suite, POLICY_FILE );
1:a0dbbd7: 
1:a0dbbd7:         return secureTest;
1:a0dbbd7:     }
1:a0dbbd7: 
1:a0dbbd7:     ///////////////////////////////////////////////////////////////////////////////////
1:a0dbbd7:     //
1:a0dbbd7:     // TESTS
1:a0dbbd7:     //
1:a0dbbd7:     ///////////////////////////////////////////////////////////////////////////////////
1:a0dbbd7: 
1:b6a45f5:     /**
1:b1008f3:      * <p>
1:a0dbbd7:      * Verify that user code can't call static entry points in ContextService.
1:a0dbbd7:      * </p>
1:a0dbbd7:      */
1:a0dbbd7:     public  void    test_001_ContextService()
1:a0dbbd7:         throws Exception
1:a0dbbd7:     {
1:a0dbbd7:         try {
1:a0dbbd7:             ContextService.stop();
1:a0dbbd7:             fail( "Should have raised an AccessControlException" );
1:a0dbbd7:         }
1:a0dbbd7:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:a0dbbd7:         try {
1:a0dbbd7:             ContextService.getFactory();
1:a0dbbd7:             fail( "Should have raised an AccessControlException" );
1:a0dbbd7:         }
1:a0dbbd7:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:a0dbbd7:         try {
1:a0dbbd7:             ContextService.getContext( "some context id"  );
1:a0dbbd7:             fail( "Should have raised an AccessControlException" );
1:a0dbbd7:         }
1:a0dbbd7:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:a0dbbd7:         try {
1:a0dbbd7:             ContextService.getContextOrNull( "some context id" );
1:a0dbbd7:             fail( "Should have raised an AccessControlException" );
1:a0dbbd7:         }
1:a0dbbd7:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:a0dbbd7:     }
1:1ae0d7d: 
1:1ae0d7d:     /**
1:1ae0d7d:      * <p>
1:b6a45f5:      * Verify that user code can't call EmbedConnection.getContextManager().
1:b6a45f5:      * </p>
1:b6a45f5:      */
1:b6a45f5:     public  void    test_002_EmbedConnection()
1:b6a45f5:         throws Exception
1:b6a45f5:     {
1:b6a45f5:         try {
1:99015e8:             Connection  conn = getConnection();
1:b6a45f5:             ((EmbedConnection) conn).getContextManager();
1:b6a45f5:             fail( "Should have raised an AccessControlException" );
1:b6a45f5:         }
1:b6a45f5:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:b6a45f5:     }
1:d7a318a: 
1:d7a318a:     /**
1:d7a318a:      * <p>
1:b1008f3:      * Verify that you need usederbyinternals permission to create a cipher factory.
1:b1008f3:      * See DERBY-6630.
1:b1008f3:      * </p>
1:b1008f3:      */
1:b1008f3:     public  void    test_003_JCECipherFactory()
1:b1008f3:         throws Exception
1:b1008f3:     {
1:b1008f3:         try {
1:b1008f3:             JCECipherFactoryBuilder builder = new JCECipherFactoryBuilder();
1:b1008f3:             builder.createCipherFactory( true, null, true );
1:b1008f3:             fail( "Should have raised an AccessControlException" );
1:b1008f3:         }
1:b1008f3:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:b1008f3:     }
1:a0dbbd7: 
1:a0dbbd7:     /**
1:a0dbbd7:      * <p>
1:d7a318a:      * Verify that you need usederbyinternals permission to boot a BaseDataFileFactory.
1:d7a318a:      * See DERBY-6636.
1:d7a318a:      * </p>
1:d7a318a:      */
1:1ae0d7d:     public  void    test_004_BaseDataFileFactory()
1:d7a318a:         throws Exception
1:d7a318a:     {
1:d7a318a:         try {
1:d7a318a:             BaseDataFileFactory bdff = new BaseDataFileFactory();
1:d7a318a:             fail( "Should have raised an AccessControlException" );
1:d7a318a:         }
1:d7a318a:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:d7a318a:     }
1:a0dbbd7: 
1:a0dbbd7:     /**
1:a0dbbd7:      * <p>
1:1ae0d7d:      * Verify that you need usederbyinternals permission to get the LCC from a Connection.
1:1ae0d7d:      * See DERBY-6751.
1:1ae0d7d:      * </p>
1:1ae0d7d:      */
1:1ae0d7d:     public  void    test_005_EmbedConnection_getLCC()
1:1ae0d7d:         throws Exception
1:1ae0d7d:     {
1:1ae0d7d:         try {
1:1ae0d7d:             Connection  conn = getConnection();
1:1ae0d7d:             ((EmbedConnection) conn).getLanguageConnection();
1:1ae0d7d:             fail( "Should have raised an AccessControlException" );
1:1ae0d7d:         }
1:1ae0d7d:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:1ae0d7d:     }
1:a0dbbd7: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:99015e8
/////////////////////////////////////////////////////////////////////////
1:             Connection  conn = getConnection();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:1ae0d7d
/////////////////////////////////////////////////////////////////////////
1:     public  void    test_004_BaseDataFileFactory()
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Verify that you need usederbyinternals permission to get the LCC from a Connection.
1:      * See DERBY-6751.
1:      * </p>
1:      */
1:     public  void    test_005_EmbedConnection_getLCC()
1:         throws Exception
1:     {
1:         try {
1:             Connection  conn = getConnection();
1:             ((EmbedConnection) conn).getLanguageConnection();
1:             fail( "Should have raised an AccessControlException" );
1:         }
1:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:     }
commit:d7a318a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.store.raw.data.BaseDataFileFactory;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Verify that you need usederbyinternals permission to boot a BaseDataFileFactory.
1:      * See DERBY-6636.
1:      * </p>
1:      */
0:     public  void    test_004_BasDataFileFactory()
1:         throws Exception
1:     {
1:         try {
1:             BaseDataFileFactory bdff = new BaseDataFileFactory();
1:             fail( "Should have raised an AccessControlException" );
1:         }
1:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:     }
commit:b1008f3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.services.jce.JCECipherFactoryBuilder;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Verify that you need usederbyinternals permission to create a cipher factory.
1:      * See DERBY-6630.
1:      * </p>
1:      */
1:     public  void    test_003_JCECipherFactory()
1:         throws Exception
1:     {
1:         try {
1:             JCECipherFactoryBuilder builder = new JCECipherFactoryBuilder();
1:             builder.createCipherFactory( true, null, true );
1:             fail( "Should have raised an AccessControlException" );
1:         }
1:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:     }
commit:b6a45f5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.jdbc.EmbedConnection;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Verify that user code can't call EmbedConnection.getContextManager().
1:      * </p>
1:      */
1:     public  void    test_002_EmbedConnection()
1:         throws Exception
1:     {
0:         Connection  conn = getConnection();
1:         try {
1:             ((EmbedConnection) conn).getContextManager();
1:             fail( "Should have raised an AccessControlException" );
1:         }
1:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:     }
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.NoDBInternalsPermissionTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.File;
1: import java.security.AccessControlException;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: import org.apache.derby.iapi.services.context.ContextService;
1: 
1: /**
1:  * <p>
1:  * Test backup and restore of databases with Lucene indexes.
1:  * </p>
1:  */
1: public class NoDBInternalsPermissionTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String      POLICY_FILE = "org/apache/derbyTesting/functionTests/tests/lang/no_derby_internals.policy";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public NoDBInternalsPermissionTest( String name )
1:     {
1:         super( name );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite( NoDBInternalsPermissionTest.class );
1: 
1:         Test        secureTest = new SecurityManagerSetup( suite, POLICY_FILE );
1: 
1:         return secureTest;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Verify that user code can't call static entry points in ContextService.
1:      * </p>
1:      */
1:     public  void    test_001_ContextService()
1:         throws Exception
1:     {
1:         try {
1:             ContextService.stop();
1:             fail( "Should have raised an AccessControlException" );
1:         }
1:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:         try {
1:             ContextService.getFactory();
1:             fail( "Should have raised an AccessControlException" );
1:         }
1:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:         try {
1:             ContextService.getContext( "some context id"  );
1:             fail( "Should have raised an AccessControlException" );
1:         }
1:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:         try {
1:             ContextService.getContextOrNull( "some context id" );
1:             fail( "Should have raised an AccessControlException" );
1:         }
1:         catch (AccessControlException e) { println( "Caught an AccessControlException" ); }
1:     }
1: 
1: }
============================================================================