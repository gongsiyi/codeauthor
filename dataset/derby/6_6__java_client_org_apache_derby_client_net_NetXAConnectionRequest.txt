1:33776ff: /*
3:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.NetXAConnectionRequest
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:33776ff: import javax.transaction.xa.XAResource;
1:33776ff: import javax.transaction.xa.Xid;
1:33776ff: 
1:70f7692: import org.apache.derby.client.am.SqlException;
1:33776ff: 
1:0326967: class NetXAConnectionRequest extends NetResultSetRequest {
1:1451af7:     NetXAConnectionRequest(NetAgent netAgent, int bufferSize) {
1:1451af7:         super(netAgent, bufferSize);
1:70f7692:     }
1:33776ff: 
1:70f7692:     //----------------------------- entry points ---------------------------------
1:33776ff: 
1:33776ff: 
1:70f7692:     //Build the SYNNCTL commit command
1:70f7692:     public void writeLocalXACommit(NetConnection conn) throws SqlException {
1:70f7692:         NetXACallInfo callInfo =
1:70f7692:                 conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:70f7692:         Xid xid = callInfo.xid_;
1:70f7692:         buildSYNCCTLMigrate();   // xa migrate to resync server
1:70f7692:         buildSYNCCTLCommit(CodePoint.TMLOCAL, xid);   // xa local commit
1:70f7692:     }
1:33776ff: 
1:70f7692:     //Build the SYNNCTL rollback command
1:70f7692:     public void writeLocalXARollback(NetConnection conn) throws SqlException {
1:70f7692:         NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:70f7692:         buildSYNCCTLRollback(CodePoint.TMLOCAL);   // xa local rollback
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void writeXaStartUnitOfWork(NetConnection conn) throws SqlException {
1:70f7692:         NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:70f7692:         Xid xid = callInfo.xid_;
1:70f7692:         int xaFlags = callInfo.xaFlags_;
1:cccf5dd:         long xaTimeout = callInfo.xaTimeoutMillis_;
1:33776ff: 
1:70f7692:         // create DSS command with reply.
1:70f7692:         createCommand();
1:33776ff: 
1:70f7692:         // save the length bytes for later update
1:70f7692:         markLengthBytes(CodePoint.SYNCCTL);
1:33776ff: 
1:70f7692:         // SYNCTYPE
1:70f7692:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_NEW_UOW);
1:33776ff: 
1:70f7692:         if (xid.getFormatId() != -1) {
1:70f7692:             writeXID(CodePoint.XID, xid);
1:70f7692:         } else
1:70f7692:         // write the null XID for local transaction on XA connection
1:70f7692:         {
1:70f7692:             writeNullXID(CodePoint.XID);
1:70f7692:         }
1:33776ff: 
1:70f7692:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:52acd5a: 
1:cccf5dd:         // Check whether the timeout value was specified.
1:cccf5dd:         // Value less than 0 means no timeout is specified.
1:52acd5a:         // DERBY-4232: The DRDA spec says that SYNCCTL should only have a
1:52acd5a:         // timeout property if TMNOFLAGS is specified.
1:52acd5a:         if (xaTimeout >= 0 && xaFlags == XAResource.TMNOFLAGS) {
1:cccf5dd:             writeXATimeout(CodePoint.TIMEOUT, xaTimeout);
1:cccf5dd:         }
1:52acd5a: 
1:70f7692:         updateLengthBytes();
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void writeXaEndUnitOfWork(NetConnection conn) throws SqlException {
1:70f7692:         NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:70f7692:         Xid xid = callInfo.xid_;
1:70f7692:         int xaFlags = callInfo.xaFlags_;
1:33776ff: 
1:70f7692:         createCommand();
1:33776ff: 
1:70f7692:         // save the length bytes for later update
1:70f7692:         markLengthBytes(CodePoint.SYNCCTL);
1:33776ff: 
1:70f7692:         // SYNCTYPE
1:70f7692:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_END_UOW);
1:33776ff: 
1:70f7692:         if (xid.getFormatId() != -1) {
1:70f7692:             writeXID(CodePoint.XID, xid);
1:70f7692:         } else
1:70f7692:         // write the null XID for local transaction on XA connection
1:70f7692:         {
1:70f7692:             writeNullXID(CodePoint.XID);
1:70f7692:         }
1:33776ff: 
1:70f7692:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:33776ff: 
1:70f7692:         updateLengthBytes();
1:70f7692:     }
1:33776ff: 
1:70f7692:     protected void writeXaPrepare(NetConnection conn) throws SqlException {
1:70f7692:         NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:70f7692:         Xid xid = callInfo.xid_;
1:70f7692:         // don't forget that xars.prepare() does not have flags, assume TMNOFLAGS
1:70f7692:         int xaFlags = XAResource.TMNOFLAGS;
1:33776ff: 
1:70f7692:         createCommand();
1:33776ff: 
1:70f7692:         // save the length bytes for later update
1:70f7692:         markLengthBytes(CodePoint.SYNCCTL);
1:33776ff: 
1:70f7692:         // SYNCTYPE
1:70f7692:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_PREPARE);
1:33776ff: 
1:70f7692:         if (xid.getFormatId() != -1) {
1:70f7692:             writeXID(CodePoint.XID, xid);
1:70f7692:         } else
1:70f7692:         // write the null XID for local transaction on XA connection
1:70f7692:         {
1:70f7692:             writeNullXID(CodePoint.XID);
1:70f7692:         }
1:33776ff: 
1:70f7692:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:70f7692:         updateLengthBytes();
1:70f7692:     }
1:33776ff: 
1:70f7692:     protected void writeXaCommit(NetConnection conn, Xid xid) throws SqlException {
1:70f7692:         NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:70f7692:         int xaFlags = callInfo.xaFlags_;
1:33776ff: 
1:70f7692:         // create DSS command with no reply.
1:70f7692:         createCommand();
1:33776ff: 
1:70f7692:         // save the length bytes for later update
1:70f7692:         markLengthBytes(CodePoint.SYNCCTL);
1:33776ff: 
1:70f7692:         // SYNCTYPE
1:70f7692:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_COMMITTED);
1:33776ff: 
1:70f7692:         if (xid.getFormatId() != -1) {
1:70f7692:             writeXID(CodePoint.XID, xid);
1:70f7692:         } else
1:70f7692:         // write the null XID for local transaction on XA connection
1:70f7692:         {
1:70f7692:             writeNullXID(CodePoint.XID);
1:70f7692:         }
1:33776ff: 
1:70f7692:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:70f7692:         updateLengthBytes();
1:70f7692:     }
1:33776ff: 
1:70f7692:     protected void writeXaRollback(NetConnection conn, Xid xid) throws SqlException {
1:70f7692:         int xaFlags = XAResource.TMNOFLAGS;
1:70f7692: 
1:70f7692:         // create DSS command with no reply.
1:70f7692:         createCommand();
1:33776ff: 
1:70f7692:         // save the length bytes for later update
1:70f7692:         markLengthBytes(CodePoint.SYNCCTL);
1:33776ff: 
1:70f7692:         // SYNCTYPE
1:70f7692:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_ROLLBACK);
1:33776ff: 
1:70f7692:         if (xid.getFormatId() != -1) {
1:70f7692:             writeXID(CodePoint.XID, xid);
1:70f7692:         } else
1:70f7692:         // write the null XID for local transaction on XA connection
1:70f7692:         {
1:70f7692:             writeNullXID(CodePoint.XID);
1:70f7692:         }
1:33776ff: 
1:70f7692:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:70f7692:         updateLengthBytes();
1:70f7692:     }
1:33776ff: 
1:70f7692:     protected void writeXaRecover(NetConnection conn, int flag) throws SqlException {
1:70f7692:         // create DSS command with no reply.
1:70f7692:         createCommand();
1:33776ff: 
1:70f7692:         // save the length bytes for later update
1:70f7692:         markLengthBytes(CodePoint.SYNCCTL);
1:33776ff: 
1:70f7692:         // SYNCTYPE
1:70f7692:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_INDOUBT);
1:70f7692:         writeXAFlags(CodePoint.XAFLAGS, flag);
1:70f7692:         updateLengthBytes();
1:70f7692:     }
1:33776ff: 
1:70f7692:     protected void writeXaForget(NetConnection conn, Xid xid) throws SqlException {
1:33776ff: 
1:70f7692:         // create DSS command with no reply.
1:70f7692:         createCommand();
1:33776ff: 
1:70f7692:         // save the length bytes for later update
1:70f7692:         markLengthBytes(CodePoint.SYNCCTL);
1:33776ff: 
1:70f7692:         // SYNCTYPE
1:70f7692:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_REQ_FORGET);
1:33776ff: 
1:70f7692:         writeXID(CodePoint.XID, xid);
1:33776ff: 
1:70f7692:         updateLengthBytes();
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void writeSYNCType(int codepoint, int syncType) {
1:70f7692:         writeScalar1Byte(codepoint, syncType);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void writeForget(int codepoint, int value) {
1:70f7692:         writeScalar1Byte(codepoint, value);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void writeReleaseConversation(int codepoint, int value) {
1:70f7692:         writeScalar1Byte(codepoint, value);
1:70f7692:     }
1:33776ff: 
1:70f7692:     void writeNullXID(int codepoint) {
1:70f7692:         int nullXID = -1;
1:70f7692:         writeScalar4Bytes(codepoint, nullXID);
1:70f7692:     }
1:33776ff: 
1:70f7692:     void writeXID(int codepoint, Xid xid) throws SqlException {
1:70f7692:         int len = 0;
1:70f7692:         int formatId = xid.getFormatId();
1:70f7692:         byte[] gtrid = xid.getGlobalTransactionId();
1:70f7692:         byte[] bqual = xid.getBranchQualifier();
1:33776ff: 
1:70f7692:         markLengthBytes(codepoint);
1:33776ff: 
1:70f7692:         len = 4;                    // length of formatId
1:70f7692:         len += (bqual.length + 4);  // bqual length
1:70f7692:         len += (gtrid.length + 4);  // gtrid length
1:33776ff: 
1:70f7692:         write4Bytes(formatId);
1:70f7692:         write4Bytes(gtrid.length);
1:70f7692:         write4Bytes(bqual.length);
1:33776ff: 
1:f6e1e6f:         writeBytes(gtrid);
1:f6e1e6f:         writeBytes(bqual);
1:33776ff: 
1:70f7692:         updateLengthBytes();
1:33776ff: 
1:70f7692:     }
1:33776ff: 
1:33776ff: 
1:70f7692:     void writeXAFlags(int codepoint, int xaFlags) {
1:70f7692:         writeScalar4Bytes(codepoint, xaFlags);
1:70f7692:     }
1:33776ff: 
1:33776ff: 
1:cccf5dd:     void writeXATimeout(int codepoint, long xaTimeout) {
1:cccf5dd:         writeScalar8Bytes(codepoint, xaTimeout);
1:cccf5dd:     }
1:cccf5dd: 
1:cccf5dd: 
1:70f7692:     //----------------------helper methods----------------------------------------
1:70f7692:     // These methods are "private protected", which is not a recognized java privilege,
1:70f7692:     // but means that these methods are private to this class and to subclasses,
1:70f7692:     // and should not be used as package-wide friendly methods.
1:33776ff: 
1:33776ff: 
1:33776ff: 
1:33776ff: 
1:33776ff: 
1:70f7692:     void buildSYNCCTLMigrate() throws SqlException {
1:70f7692:     }
1:33776ff: 
1:70f7692:     void buildSYNCCTLCommit(int xaFlags, Xid xid) throws SqlException {
1:70f7692:         createCommand();
1:33776ff: 
1:70f7692:         // save the length bytes for later update
1:70f7692:         markLengthBytes(CodePoint.SYNCCTL);
1:33776ff: 
1:70f7692:         // SYNCTYPE
1:70f7692:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_COMMITTED);
1:33776ff: 
1:70f7692:         if (xid.getFormatId() != -1) {
1:70f7692:             writeXID(CodePoint.XID, xid);
1:70f7692:         } else
1:70f7692:         // write the null XID for local transaction on XA connection
1:70f7692:         {
1:70f7692:             writeNullXID(CodePoint.XID);
1:70f7692:         }
1:33776ff: 
1:70f7692:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:33776ff: 
1:70f7692:         updateLengthBytes();
1:70f7692:     }
1:33776ff: 
1:70f7692:     void buildSYNCCTLRollback(int xaFlags) throws SqlException {
1:70f7692:         createCommand();
1:33776ff: 
1:70f7692:         // save the length bytes for later update
1:70f7692:         markLengthBytes(CodePoint.SYNCCTL);
1:33776ff: 
1:70f7692:         // SYNCTYPE
1:70f7692:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_ROLLBACK);
1:33776ff: 
1:70f7692:         // write the null XID for local transaction on XA connection
1:70f7692:         writeNullXID(CodePoint.XID);
1:70f7692:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:70f7692:         updateLengthBytes();
1:70f7692:     }
1:33776ff: 
20:33776ff: }
1:33776ff: 
1:33776ff: 
1:33776ff: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class NetXAConnectionRequest extends NetResultSetRequest {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f6e1e6f
/////////////////////////////////////////////////////////////////////////
1:         writeBytes(gtrid);
1:         writeBytes(bqual);
commit:52acd5a
/////////////////////////////////////////////////////////////////////////
1: 
1:         // DERBY-4232: The DRDA spec says that SYNCCTL should only have a
1:         // timeout property if TMNOFLAGS is specified.
1:         if (xaTimeout >= 0 && xaFlags == XAResource.TMNOFLAGS) {
1: 
commit:cccf5dd
/////////////////////////////////////////////////////////////////////////
1:         long xaTimeout = callInfo.xaTimeoutMillis_;
/////////////////////////////////////////////////////////////////////////
1:         // Check whether the timeout value was specified.
1:         // Value less than 0 means no timeout is specified.
0:         if (xaTimeout >= 0) {
1:             writeXATimeout(CodePoint.TIMEOUT, xaTimeout);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     void writeXATimeout(int codepoint, long xaTimeout) {
1:         writeScalar8Bytes(codepoint, xaTimeout);
1:     }
1: 
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:1451af7
/////////////////////////////////////////////////////////////////////////
1:     NetXAConnectionRequest(NetAgent netAgent, int bufferSize) {
1:         super(netAgent, bufferSize);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.SqlException;
0: public class NetXAConnectionRequest extends NetResultSetRequest {
0:     NetXAConnectionRequest(NetAgent netAgent, CcsidManager ccsidManager, int bufferSize) {
0:         super(netAgent, ccsidManager, bufferSize);
1:     }
1:     //----------------------------- entry points ---------------------------------
1:     //Build the SYNNCTL commit command
1:     public void writeLocalXACommit(NetConnection conn) throws SqlException {
1:         NetXACallInfo callInfo =
1:                 conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:         Xid xid = callInfo.xid_;
1:         buildSYNCCTLMigrate();   // xa migrate to resync server
1:         buildSYNCCTLCommit(CodePoint.TMLOCAL, xid);   // xa local commit
1:     }
1:     //Build the SYNNCTL rollback command
1:     public void writeLocalXARollback(NetConnection conn) throws SqlException {
1:         NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:         buildSYNCCTLRollback(CodePoint.TMLOCAL);   // xa local rollback
1:     }
1:     public void writeXaStartUnitOfWork(NetConnection conn) throws SqlException {
1:         NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:         Xid xid = callInfo.xid_;
1:         int xaFlags = callInfo.xaFlags_;
1:         // create DSS command with reply.
1:         createCommand();
1:         // save the length bytes for later update
1:         markLengthBytes(CodePoint.SYNCCTL);
1:         // SYNCTYPE
1:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_NEW_UOW);
1:         if (xid.getFormatId() != -1) {
1:             writeXID(CodePoint.XID, xid);
1:         } else
1:         // write the null XID for local transaction on XA connection
1:         {
1:             writeNullXID(CodePoint.XID);
1:         }
1:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:         updateLengthBytes();
1:     }
1:     public void writeXaEndUnitOfWork(NetConnection conn) throws SqlException {
1:         NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:         Xid xid = callInfo.xid_;
1:         int xaFlags = callInfo.xaFlags_;
1:         createCommand();
1:         // save the length bytes for later update
1:         markLengthBytes(CodePoint.SYNCCTL);
1:         // SYNCTYPE
1:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_END_UOW);
1:         if (xid.getFormatId() != -1) {
1:             writeXID(CodePoint.XID, xid);
1:         } else
1:         // write the null XID for local transaction on XA connection
1:         {
1:             writeNullXID(CodePoint.XID);
1:         }
1:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:         updateLengthBytes();
1:     }
1:     protected void writeXaPrepare(NetConnection conn) throws SqlException {
1:         NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:         Xid xid = callInfo.xid_;
1:         // don't forget that xars.prepare() does not have flags, assume TMNOFLAGS
1:         int xaFlags = XAResource.TMNOFLAGS;
1:         createCommand();
1:         // save the length bytes for later update
1:         markLengthBytes(CodePoint.SYNCCTL);
1:         // SYNCTYPE
1:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_PREPARE);
1:         if (xid.getFormatId() != -1) {
1:             writeXID(CodePoint.XID, xid);
1:         } else
1:         // write the null XID for local transaction on XA connection
1:         {
1:             writeNullXID(CodePoint.XID);
1:         }
1:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:         updateLengthBytes();
1:     }
1:     protected void writeXaCommit(NetConnection conn, Xid xid) throws SqlException {
1:         NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
1:         int xaFlags = callInfo.xaFlags_;
1:         // create DSS command with no reply.
1:         createCommand();
1:         // save the length bytes for later update
1:         markLengthBytes(CodePoint.SYNCCTL);
1:         // SYNCTYPE
1:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_COMMITTED);
1:         if (xid.getFormatId() != -1) {
1:             writeXID(CodePoint.XID, xid);
1:         } else
1:         // write the null XID for local transaction on XA connection
1:         {
1:             writeNullXID(CodePoint.XID);
1:         }
1:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:         updateLengthBytes();
1:     }
1:     protected void writeXaRollback(NetConnection conn, Xid xid) throws SqlException {
1:         int xaFlags = XAResource.TMNOFLAGS;
1:         // create DSS command with no reply.
1:         createCommand();
1:         // save the length bytes for later update
1:         markLengthBytes(CodePoint.SYNCCTL);
1: 
1:         // SYNCTYPE
1:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_ROLLBACK);
1:         if (xid.getFormatId() != -1) {
1:             writeXID(CodePoint.XID, xid);
1:         } else
1:         // write the null XID for local transaction on XA connection
1:         {
1:             writeNullXID(CodePoint.XID);
1:         }
1:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:         updateLengthBytes();
1:     }
1:     protected void writeXaRecover(NetConnection conn, int flag) throws SqlException {
1:         // create DSS command with no reply.
1:         createCommand();
1:         // save the length bytes for later update
1:         markLengthBytes(CodePoint.SYNCCTL);
1:         // SYNCTYPE
1:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_INDOUBT);
1:         writeXAFlags(CodePoint.XAFLAGS, flag);
1:         updateLengthBytes();
1:     }
1:     protected void writeXaForget(NetConnection conn, Xid xid) throws SqlException {
1:         // create DSS command with no reply.
1:         createCommand();
1:         // save the length bytes for later update
1:         markLengthBytes(CodePoint.SYNCCTL);
1:         // SYNCTYPE
1:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_REQ_FORGET);
1:         writeXID(CodePoint.XID, xid);
1:         updateLengthBytes();
1:     }
1:     public void writeSYNCType(int codepoint, int syncType) {
1:         writeScalar1Byte(codepoint, syncType);
1:     }
1:     public void writeForget(int codepoint, int value) {
1:         writeScalar1Byte(codepoint, value);
1:     }
1:     public void writeReleaseConversation(int codepoint, int value) {
1:         writeScalar1Byte(codepoint, value);
1:     }
1:     void writeNullXID(int codepoint) {
1:         int nullXID = -1;
1:         writeScalar4Bytes(codepoint, nullXID);
1:     }
1:     void writeXID(int codepoint, Xid xid) throws SqlException {
1:         int len = 0;
1:         int formatId = xid.getFormatId();
1:         byte[] gtrid = xid.getGlobalTransactionId();
1:         byte[] bqual = xid.getBranchQualifier();
1:         markLengthBytes(codepoint);
1:         len = 4;                    // length of formatId
1:         len += (bqual.length + 4);  // bqual length
1:         len += (gtrid.length + 4);  // gtrid length
1:         write4Bytes(formatId);
1:         write4Bytes(gtrid.length);
1:         write4Bytes(bqual.length);
0:         // Mare sure request buffer has enough space to write this byte array.
0:         ensureLength(offset_ + gtrid.length);
0:         System.arraycopy(gtrid, 0, bytes_, offset_, gtrid.length);
0:         offset_ += gtrid.length;
0:         ensureLength(offset_ + bqual.length);
0:         System.arraycopy(bqual, 0, bytes_, offset_, bqual.length);
0:         offset_ += bqual.length;
1:         updateLengthBytes();
1:     }
1:     void writeXAFlags(int codepoint, int xaFlags) {
1:         writeScalar4Bytes(codepoint, xaFlags);
1:     }
1:     //----------------------helper methods----------------------------------------
1:     // These methods are "private protected", which is not a recognized java privilege,
1:     // but means that these methods are private to this class and to subclasses,
1:     // and should not be used as package-wide friendly methods.
1:     void buildSYNCCTLMigrate() throws SqlException {
1:     }
1:     void buildSYNCCTLCommit(int xaFlags, Xid xid) throws SqlException {
1:         createCommand();
1:         // save the length bytes for later update
1:         markLengthBytes(CodePoint.SYNCCTL);
1:         // SYNCTYPE
1:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_COMMITTED);
1:         if (xid.getFormatId() != -1) {
1:             writeXID(CodePoint.XID, xid);
1:         } else
1:         // write the null XID for local transaction on XA connection
1:         {
1:             writeNullXID(CodePoint.XID);
1:         }
1:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:         updateLengthBytes();
1:     }
1:     void buildSYNCCTLRollback(int xaFlags) throws SqlException {
1:         createCommand();
1:         // save the length bytes for later update
1:         markLengthBytes(CodePoint.SYNCCTL);
1:         // SYNCTYPE
1:         writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_ROLLBACK);
1:         // write the null XID for local transaction on XA connection
1:         writeNullXID(CodePoint.XID);
1:         writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1:         updateLengthBytes();
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.NetXAConnectionRequest
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
0: import org.apache.derby.client.am.SqlException;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
0: public class NetXAConnectionRequest extends NetResultSetRequest
0: {
0:   NetXAConnectionRequest (NetAgent netAgent, CcsidManager ccsidManager, int bufferSize)
0:   {
0:     super (netAgent, ccsidManager, bufferSize);
1:   }
1: 
0:   //----------------------------- entry points ---------------------------------
1: 
1: 
0:   //Build the SYNNCTL commit command
0:   public void writeLocalXACommit (NetConnection conn) throws SqlException
0:   {
0:     NetXACallInfo callInfo =
0:           conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
0:     Xid xid = callInfo.xid_;
0:     buildSYNCCTLMigrate();   // xa migrate to resync server
0:     buildSYNCCTLCommit(CodePoint.TMLOCAL, xid);   // xa local commit
1:   }
1: 
0:   //Build the SYNNCTL rollback command
0:   public void writeLocalXARollback (NetConnection conn) throws SqlException
0:   {
0:     NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
0:     buildSYNCCTLRollback(CodePoint.TMLOCAL);   // xa local rollback
1:   }
1: 
0:   public void writeXaStartUnitOfWork(NetConnection conn) throws SqlException
0:   {
0:     NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
0:     Xid xid = callInfo.xid_;
0:     int xaFlags = callInfo.xaFlags_;
1: 
0:     // create DSS command with reply.
0:     createCommand ();
1: 
0:     // save the length bytes for later update
0:     markLengthBytes (CodePoint.SYNCCTL);
1: 
0:     // SYNCTYPE
0:     writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_NEW_UOW);
1: 
0:     if (xid.getFormatId() != -1)
0:       writeXID(CodePoint.XID, xid);
0:     else
0:       // write the null XID for local transaction on XA connection
0:       writeNullXID(CodePoint.XID);
1: 
0:     writeXAFlags(CodePoint.XAFLAGS, xaFlags);
0:     updateLengthBytes();
1:   }
1: 
0:   public void writeXaEndUnitOfWork(NetConnection conn) throws SqlException
0:   {
0:     NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
0:     Xid xid = callInfo.xid_;
0:     int xaFlags = callInfo.xaFlags_;
1: 
0:     createCommand ();
1: 
0:     // save the length bytes for later update
0:     markLengthBytes (CodePoint.SYNCCTL);
1: 
0:     // SYNCTYPE
0:     writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_END_UOW);
1: 
0:     if (xid.getFormatId() != -1)
0:       writeXID(CodePoint.XID, xid);
0:     else
0:       // write the null XID for local transaction on XA connection
0:       writeNullXID(CodePoint.XID);
1: 
0:     writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1: 
0:     updateLengthBytes();
1:   }
1: 
0:  protected void writeXaPrepare(NetConnection conn) throws SqlException
0:  {
0:    NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
0:    Xid xid = callInfo.xid_;
0:   // don't forget that xars.prepare() does not have flags, assume TMNOFLAGS
0:    int xaFlags = XAResource.TMNOFLAGS;
1: 
0:    createCommand ();
1: 
0:    // save the length bytes for later update
0:    markLengthBytes (CodePoint.SYNCCTL);
1: 
0:    // SYNCTYPE
0:    writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_PREPARE);
1: 
0:    if (xid.getFormatId() != -1)
0:      writeXID(CodePoint.XID, xid);
0:    else
0:      // write the null XID for local transaction on XA connection
0:      writeNullXID(CodePoint.XID);
1: 
0:    writeXAFlags(CodePoint.XAFLAGS, xaFlags);
0:    updateLengthBytes();
1:   }
1: 
0:   protected void writeXaCommit(NetConnection conn, Xid xid) throws SqlException
0:   {
0:    NetXACallInfo callInfo = conn.xares_.callInfoArray_[conn.currXACallInfoOffset_];
0:    int xaFlags = callInfo.xaFlags_;
1: 
0:    // create DSS command with no reply.
0:    createCommand ();
1: 
0:    // save the length bytes for later update
0:    markLengthBytes (CodePoint.SYNCCTL);
1: 
0:    // SYNCTYPE
0:    writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_COMMITTED);
1: 
0:    if (xid.getFormatId() != -1)
0:      writeXID(CodePoint.XID, xid);
0:    else
0:      // write the null XID for local transaction on XA connection
0:      writeNullXID(CodePoint.XID);
1: 
0:    writeXAFlags(CodePoint.XAFLAGS, xaFlags);
0:    updateLengthBytes();
1:  }
1: 
0:   protected void writeXaRollback(NetConnection conn, Xid xid) throws SqlException
0:   {
0:     int xaFlags = XAResource.TMNOFLAGS;
1: 
0:     // create DSS command with no reply.
0:     createCommand ();
1: 
0:     // save the length bytes for later update
0:     markLengthBytes (CodePoint.SYNCCTL);
1: 
0:     // SYNCTYPE
0:     writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_ROLLBACK);
1: 
0:     if (xid.getFormatId() != -1)
0:       writeXID(CodePoint.XID, xid);
0:     else
0:       // write the null XID for local transaction on XA connection
0:       writeNullXID(CodePoint.XID);
1: 
0:     writeXAFlags(CodePoint.XAFLAGS, xaFlags);
0:     updateLengthBytes();
1:  }
1: 
0:  protected void writeXaRecover(NetConnection conn, int flag) throws SqlException
0:  {
0:    // create DSS command with no reply.
0:     createCommand ();
1: 
0:     // save the length bytes for later update
0:     markLengthBytes (CodePoint.SYNCCTL);
1: 
0:     // SYNCTYPE
0:     writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_INDOUBT);
0:     writeXAFlags(CodePoint.XAFLAGS, flag);
0:     updateLengthBytes();
1:  }
1: 
0:  protected void writeXaForget(NetConnection conn, Xid xid) throws SqlException
0:  {
1: 
0:    // create DSS command with no reply.
0:     createCommand ();
1: 
0:     // save the length bytes for later update
0:     markLengthBytes (CodePoint.SYNCCTL);
1: 
0:     // SYNCTYPE
0:     writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_REQ_FORGET);
1: 
0:     writeXID(CodePoint.XID, xid);
1: 
0:     updateLengthBytes();
1:  }
1: 
0:   public void writeSYNCType(int codepoint, int syncType)
0:   {
0:     writeScalar1Byte (codepoint, syncType);
1:   }
1: 
0:   public void writeForget(int codepoint, int value)
0:   {
0:     writeScalar1Byte (codepoint, value);
1:   }
1: 
0:   public void writeReleaseConversation(int codepoint, int value)
0:   {
0:     writeScalar1Byte (codepoint, value);
1:   }
1: 
0:   void writeNullXID(int codepoint)
0:   {
0:     int nullXID = -1;
0:     writeScalar4Bytes (codepoint, nullXID);
1:   }
1: 
0:   void writeXID(int codepoint, Xid xid) throws SqlException
0:   {
0:     int len = 0;
0:     int formatId = xid.getFormatId();
0:     byte[] gtrid = xid.getGlobalTransactionId();
0:     byte[] bqual = xid.getBranchQualifier();
1: 
0:     markLengthBytes(codepoint);
1: 
0:     len = 4;                    // length of formatId
0:     len += (bqual.length + 4);  // bqual length
0:     len += (gtrid.length + 4);  // gtrid length
1: 
0:     write4Bytes(formatId);
0:     write4Bytes(gtrid.length);
0:     write4Bytes(bqual.length);
1: 
0:     // Mare sure request buffer has enough space to write this byte array.
0:     ensureLength (offset_ + gtrid.length);
0:     System.arraycopy(gtrid, 0, bytes_, offset_, gtrid.length);
0:     offset_ += gtrid.length;
1: 
0:     ensureLength (offset_ + bqual.length);
0:     System.arraycopy(bqual, 0, bytes_, offset_, bqual.length);
0:     offset_ += bqual.length;
1: 
0:     updateLengthBytes();
1: 
1:   }
1: 
1: 
0:   void writeXAFlags(int codepoint, int xaFlags)
0:   {
0:     writeScalar4Bytes (codepoint, xaFlags);
1:   }
1: 
1: 
0:   //----------------------helper methods----------------------------------------
0:   // These methods are "private protected", which is not a recognized java privilege,
0:   // but means that these methods are private to this class and to subclasses,
0:   // and should not be used as package-wide friendly methods.
1: 
1: 
1: 
1: 
1: 
0:   void buildSYNCCTLMigrate() throws SqlException
0:   {
1:   }
1: 
0:   void buildSYNCCTLCommit (int xaFlags, Xid xid) throws SqlException
0:   {
0:     createCommand ();
1: 
0:     // save the length bytes for later update
0:     markLengthBytes (CodePoint.SYNCCTL);
1: 
0:     // SYNCTYPE
0:     writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_COMMITTED);
1: 
0:     if (xid.getFormatId() != -1)
0:       writeXID(CodePoint.XID, xid);
0:     else
0:       // write the null XID for local transaction on XA connection
0:       writeNullXID(CodePoint.XID);
1: 
0:     writeXAFlags(CodePoint.XAFLAGS, xaFlags);
1: 
0:     updateLengthBytes();
1:   }
1: 
0:   void buildSYNCCTLRollback (int xaFlags) throws SqlException
0:   {
0:     createCommand ();
1: 
0:     // save the length bytes for later update
0:     markLengthBytes (CodePoint.SYNCCTL);
1: 
0:     // SYNCTYPE
0:     writeSYNCType(CodePoint.SYNCTYPE, CodePoint.SYNCTYPE_ROLLBACK);
1: 
0:     // write the null XID for local transaction on XA connection
0:     writeNullXID(CodePoint.XID);
0:     writeXAFlags(CodePoint.XAFLAGS, xaFlags);
0:     updateLengthBytes();
1:   }
1: 
1: }
1: 
1: 
1: 
============================================================================