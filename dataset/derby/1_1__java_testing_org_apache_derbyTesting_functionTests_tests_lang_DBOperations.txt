1:09ea7c0: /*
1:09ea7c0: 
1:09ea7c0: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DBOperations
1:09ea7c0: 
1:09ea7c0: Licensed to the Apache Software Foundation (ASF) under one or more
1:09ea7c0: contributor license agreements.  See the NOTICE file distributed with
1:09ea7c0: this work for additional information regarding copyright ownership.
1:09ea7c0: The ASF licenses this file to You under the Apache License, Version 2.0
1:09ea7c0: (the "License"); you may not use this file except in compliance with
1:09ea7c0: the License.  You may obtain a copy of the License at
1:09ea7c0: 
1:09ea7c0:    http://www.apache.org/licenses/LICENSE-2.0
1:09ea7c0: 
1:09ea7c0: Unless required by applicable law or agreed to in writing, software
1:09ea7c0: distributed under the License is distributed on an "AS IS" BASIS,
1:09ea7c0: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09ea7c0: See the License for the specific language governing permissions and
1:09ea7c0: limitations under the License.
1:09ea7c0: 
1:09ea7c0: */
1:09ea7c0: 
1:09ea7c0: package org.apache.derbyTesting.functionTests.tests.lang;
1:09ea7c0: 
1:09ea7c0: import java.sql.Connection;
1:09ea7c0: import java.sql.SQLException;
1:09ea7c0: import java.sql.Statement;
1:09ea7c0: 
1:09ea7c0: class DBOperations implements Runnable {
1:09ea7c0:     private Connection con;
1:09ea7c0:     private int keyVal;
1:09ea7c0:     private SQLException exception;
1:09ea7c0:     private Throwable unexpectedException;
1:09ea7c0:     
1:09ea7c0:     /**
1:09ea7c0:      * Instantiates DBOperation object.
1:09ea7c0:      * @param con Connection to be used within this object.
1:09ea7c0:      * @param keyValue key value while executing dmls.
1:09ea7c0:      */
1:09ea7c0:     DBOperations(Connection con, int keyValue) throws SQLException {
1:09ea7c0:         this.con = con;
1:09ea7c0:         this.keyVal = keyValue;
1:09ea7c0:         con.setAutoCommit(false);
1:09ea7c0:     }
1:09ea7c0:     
1:09ea7c0:     /**
1:09ea7c0:      * Deletes the record with key value passed in constroctor.
1:09ea7c0:      */
1:09ea7c0:     void delete () throws SQLException {
1:09ea7c0:         Statement stmt = con.createStatement();
1:09ea7c0:         stmt.execute("delete from tab1 where i = " + keyVal);
1:09ea7c0:         stmt.close();
1:09ea7c0:     }
1:09ea7c0:     
1:09ea7c0:     /**
1:09ea7c0:      * Inserts a record with key value passed in constroctor.
1:09ea7c0:      */
1:09ea7c0:     void insert () throws SQLException {
1:09ea7c0:         Statement stmt = con.createStatement();
1:09ea7c0:         try {
1:09ea7c0:             
1:09ea7c0:             stmt.executeUpdate("insert into tab1 values ("+keyVal+")");
1:09ea7c0:         }
1:09ea7c0:         catch (SQLException e) {
1:09ea7c0:             exception = e;
1:09ea7c0:         }
1:09ea7c0:         stmt.close();
1:09ea7c0:     }
1:09ea7c0:     
1:09ea7c0:     /**
1:09ea7c0:      * Rollbacks the transaction.
1:09ea7c0:      */
1:09ea7c0:     void rollback () throws SQLException {
1:09ea7c0:         con.rollback();
1:09ea7c0:     }
1:09ea7c0:     
1:09ea7c0:     /**
1:09ea7c0:      * Returns the SQLException received while executing insert.
1:09ea7c0:      * Null if no transaction was received.
1:09ea7c0:      * @return SQLException
1:09ea7c0:      */
1:09ea7c0:     SQLException getException () {
1:09ea7c0:         return exception;
1:09ea7c0:     }
1:09ea7c0:     
1:09ea7c0:     /**
1:09ea7c0:      * commits the trasnaction.
1:09ea7c0:      */
1:09ea7c0:     void commit () throws SQLException {
1:09ea7c0:         con.commit();
1:09ea7c0:     } 
1:09ea7c0:     
1:09ea7c0:     /**
1:09ea7c0:      * Returns if any unexpected trasnaction was thrown during any 
1:09ea7c0:      * of the operation.
1:09ea7c0:      * @return Throwable
1:09ea7c0:      */
1:09ea7c0:     public Throwable getUnexpectedException() {
1:09ea7c0:         return unexpectedException;
1:09ea7c0:     } 
1:09ea7c0: 
1:09ea7c0:     public void run() {
1:09ea7c0:         try {
1:09ea7c0:             insert();
1:09ea7c0:         }
1:09ea7c0:         catch (Throwable e) {
1:09ea7c0:             unexpectedException = e;
1:09ea7c0:         }
1:09ea7c0:     }
1:09ea7c0: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:69d36a0
/////////////////////////////////////////////////////////////////////////
commit:09ea7c0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DBOperations
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: class DBOperations implements Runnable {
1:     private Connection con;
1:     private int keyVal;
1:     private SQLException exception;
1:     private Throwable unexpectedException;
1:     
1:     /**
1:      * Instantiates DBOperation object.
1:      * @param con Connection to be used within this object.
1:      * @param keyValue key value while executing dmls.
0:      * @return 
1:      */
1:     DBOperations(Connection con, int keyValue) throws SQLException {
1:         this.con = con;
1:         this.keyVal = keyValue;
1:         con.setAutoCommit(false);
1:     }
1:     
1:     /**
1:      * Deletes the record with key value passed in constroctor.
1:      */
1:     void delete () throws SQLException {
1:         Statement stmt = con.createStatement();
1:         stmt.execute("delete from tab1 where i = " + keyVal);
1:         stmt.close();
1:     }
1:     
1:     /**
1:      * Inserts a record with key value passed in constroctor.
1:      */
1:     void insert () throws SQLException {
1:         Statement stmt = con.createStatement();
1:         try {
1:             
1:             stmt.executeUpdate("insert into tab1 values ("+keyVal+")");
1:         }
1:         catch (SQLException e) {
1:             exception = e;
1:         }
1:         stmt.close();
1:     }
1:     
1:     /**
1:      * Rollbacks the transaction.
1:      */
1:     void rollback () throws SQLException {
1:         con.rollback();
1:     }
1:     
1:     /**
1:      * Returns the SQLException received while executing insert.
1:      * Null if no transaction was received.
1:      * @return SQLException
1:      */
1:     SQLException getException () {
1:         return exception;
1:     }
1:     
1:     /**
1:      * commits the trasnaction.
1:      */
1:     void commit () throws SQLException {
1:         con.commit();
1:     } 
1:     
1:     /**
1:      * Returns if any unexpected trasnaction was thrown during any 
1:      * of the operation.
1:      * @return Throwable
1:      */
1:     public Throwable getUnexpectedException() {
1:         return unexpectedException;
1:     } 
1: 
1:     public void run() {
1:         try {
1:             insert();
1:         }
1:         catch (Throwable e) {
1:             unexpectedException = e;
1:         }
1:     }
1: }
============================================================================