2:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.xact.TransactionFactory
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw.xact;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.services.daemon.Serviceable;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:3c1f634: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
1:eac0369: import org.apache.derby.iapi.services.locks.LockFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.TransactionInfo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.Corruptable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	This module is intended to be used only within the RawStore. RawStore functionality
1:eac0369: 	is accessed only through the RawStoreFactory interface.
1:eac0369: 	The transaction manager is responsible for:
1:eac0369: 
1:eac0369: 	<UL>
1:eac0369: 	<LI>Generating unique transaction identifiers.
1:eac0369: 	<LI>Keeping a list of all open transactions within the raw store.
1:eac0369: 	</UL>
1:eac0369: 
1:eac0369: 	@see RawStoreFactory
1:eac0369: 	@see Transaction
1:eac0369: */
1:eac0369: 
1:eac0369: public interface TransactionFactory extends Corruptable {
1:eac0369: 
1:eac0369: 	public static String MODULE =
1:eac0369:         "org.apache.derby.iapi.store.raw.xact.TransactionFactory";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the LockFactory to use with this store.
1:eac0369: 	*/
1:eac0369: 	public LockFactory getLockFactory();
1:eac0369: 
1:ee9c803: 	/**
1:eac0369: 	 * Return the module providing XAresource interface to the transaction
1:eac0369:      * table.
1:eac0369:      *
1:3fd26f3: 	 * @exception StandardException Standard Derby exception policy.
1:eac0369: 	 */
1:eac0369: 	public /* XAResourceManager */ Object getXAResourceManager()
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Start a new transaction within the given raw store. This method will
1:eac0369:         push a transaction context as described in
1:eac0369:         RawStoreFactory.startTransaction
1:eac0369: 
1:eac0369:         @param contextMgr is the context manager to use.  It must be the current
1:eac0369:                           context manager.
1:eac0369:         @param transName is the transaction name. It will be displayed in the
1:eac0369:             transactiontable VTI.
1:eac0369: 
1:eac0369: 		@see RawStoreFactory#startTransaction
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public RawTransaction startTransaction(
1:eac0369:     RawStoreFactory rsf,
1:eac0369:     ContextManager  contextMgr,
1:eac0369:     String transName)
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Start a new read only transaction within the given raw store. This 
1:eac0369:         method will push a transaction context as described in
1:eac0369:         RawStoreFactory.startNestedTransaction
1:eac0369: 
1:9819cf8: 		@param rsf                      the RawStoreFactory
1:9819cf8: 		@param parentTransaction   the parent transaction
1:eac0369: 		@param compatibilitySpace   compatibility space to use for locks.
2:eac0369:         @param contextMgr           is the context manager to use.  It must be 
2:eac0369:                                     the current context manager.
2:eac0369:         @param transName            is the transaction name. It will be 
2:eac0369:                                     displayed in the transactiontable VTI.
1:eac0369: 
1:eac0369: 		@see RawStoreFactory#startNestedReadOnlyUserTransaction
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public RawTransaction startNestedReadOnlyUserTransaction(
1:eac0369:     RawStoreFactory rsf,
1:9819cf8:     RawTransaction parentTransaction,
1:3c1f634:     CompatibilitySpace compatibilitySpace,
1:eac0369:     ContextManager  contextMgr,
2:eac0369:     String          transName)
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Start a new update transaction within the given raw store. This method 
1:eac0369:         will push a transaction context as described in
1:eac0369:         RawStoreFactory.startNestedTransaction
1:eac0369: 
1:9819cf8: 		@param rsf                      the RawStoreFactory
1:9819cf8: 		@param parentTransaction   the parent transaction
1:ceaf7df:         @param contextMgr               is the context manager to use.  It must
1:ceaf7df:                                         be the current context manager.
1:ceaf7df:         @param transName                is the transaction name. It will be 
1:ceaf7df:                                         displayed in the transactiontable VTI.
1:ceaf7df:         @param flush_log_on_xact_end    By default should the transaction commit
1:ceaf7df:                                         and abort be synced to the log.  Normal
1:ceaf7df:                                         usage should pick true, unless there
1:ceaf7df:                                         is specific performance need and usage
1:ceaf7df:                                         works correctly if a commit can be 
1:ceaf7df:                                         lost on system crash.
1:eac0369: 
1:eac0369: 		@see RawStoreFactory#startNestedUpdateUserTransaction
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public RawTransaction startNestedUpdateUserTransaction(
1:eac0369:     RawStoreFactory rsf,
1:9819cf8:     RawTransaction parentTransaction,
1:eac0369:     ContextManager  contextMgr,
1:ceaf7df:     String          transName,
1:ceaf7df:     boolean         flush_log_on_xact_end)
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Start a new transaction within the given raw store. This method will
1:eac0369:         push a transaction context as described in
1:eac0369:         RawStoreFactory.startTransaction
1:eac0369: 
1:eac0369:         @param format_id  the format id part of the Xid - ie. Xid.getFormatId().
1:eac0369:         @param global_id  the global transaction identifier part of XID - ie.
1:eac0369:                           Xid.getGlobalTransactionId().
1:eac0369:         @param branch_id  The branch qualifier of the Xid - ie.
1:eac0369:                           Xid.getBranchQaulifier()
1:eac0369:         @param contextMgr is the context manager to use.  It must be the current
1:eac0369:                           context manager.
1:eac0369: 
1:eac0369: 		@see RawStoreFactory#startGlobalTransaction
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public RawTransaction startGlobalTransaction(
1:eac0369:     RawStoreFactory rsf,
1:eac0369:     ContextManager  contextMgr, 
1:eac0369:     int             format_id,
1:eac0369:     byte[]          global_id,
1:eac0369:     byte[]          branch_id)
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Find a user transaction within the given raw store and the given
1:eac0369: 		contextMgr.  If no user transaction exist, then start one with name
1:eac0369:         transName. This method will push a transaction context as described in
1:eac0369: 		RawStoreFactory.startTransaction
1:eac0369: 
1:eac0369: 		@see RawStoreFactory#findUserTransaction
1:eac0369: 		@see RawStoreFactory#startTransaction
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public RawTransaction findUserTransaction(
1:eac0369:         RawStoreFactory rsf,
1:eac0369:         ContextManager contextMgr,
1:eac0369:         String transName) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Start a new nested top transaction within the given raw store. This
1:eac0369:         method will push a transaction context as described in
1:eac0369:         RawStoreFactory.startNestedTopTransaction
1:eac0369: 
1:eac0369: 		@see RawStoreFactory#startTransaction(ContextManager, String)
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public RawTransaction startNestedTopTransaction(RawStoreFactory rsf, ContextManager contextMgr) throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Start a new internal transaction within the given raw store. This 
1:eac0369:         method will push a transaction context as described in 
1:eac0369:         RawStoreFactory.startInternalTransaction
1:eac0369: 
1:eac0369: 		@see RawStoreFactory#startTransaction
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public RawTransaction startInternalTransaction(RawStoreFactory rsf, ContextManager contextMgr) throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Find a transaction using a transactionId and make the passed in
1:eac0369: 		transaction assume the identity and properties of that transaction.
1:eac0369: 		Used in recovery only.
1:eac0369: 	*/
1:eac0369: 	public boolean findTransaction(TransactionId id, RawTransaction tran);
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Reset any resettable transaction Id 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public void resetTranId() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The first log instant that belongs to a transaction that is still
1:eac0369: 		active in the raw store. This is the first log record of the longest
1:eac0369: 		running transaction at this moment. 
1:eac0369: 	*/
1:eac0369: 	public LogInstant firstUpdateInstant();
1:eac0369: 
1:eac0369: 	/**
1:eac0369:         Run through all prepared transactions known to this factory 
1:eac0369:         and restore their state such that they remain after recovery, and
1:eac0369:         can be found and handled by a XA transaction manager.  This includes
1:eac0369:         creating a context manager for each, pushing a xact context, and
1:eac0369:         reclaiming update locks on all data changed by the transaction.
1:eac0369: 
1:eac0369: 		Used only in recovery.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Derby Standard Error policy
1:eac0369: 	*/
1:eac0369: 	public void handlePreparedXacts(
1:eac0369:     RawStoreFactory rsf)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Rollback and close all transactions known to this factory using a
1:eac0369: 		passed in transaction.  Used only in recovery.
1:eac0369: 
1:eac0369: 		@param recoveryTransaction the transaction used to rollback
1:3fd26f3: 		@exception StandardException Derby Standard Error policy
1:eac0369: 	*/
1:eac0369: 	public void rollbackAllTransactions(RawTransaction recoveryTransaction, 
1:eac0369: 										RawStoreFactory rsf)
1:eac0369: 		 throws StandardException ;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Submit a post commit work to the post commit daemon.
1:eac0369: 		The work is always added to the deamon, regardless of the
1:eac0369: 		state it returns.
1:eac0369: 
1:eac0369: 		@return true if the daemon indicates it is being overloaded,
1:eac0369: 		false it's happy.
1:eac0369: 
1:eac0369: 		<MT> must be MT-safe
1:eac0369: 	*/
1:eac0369: 	public boolean submitPostCommitWork(Serviceable work);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		make Transaction factory aware of which raw store factory it belongs to
1:eac0369: 	*/
1:eac0369: 	public void setRawStoreFactory(RawStoreFactory rsf) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Returns true if the transaction factory has no active updating 
1:eac0369:         transaction
1:eac0369: 	*/
1:eac0369: 	public boolean noActiveUpdateTransaction();
1:32635d2: 
1:eac0369: 
1:32635d2:     /**
1:32635d2:      * Check if there are any prepared transanctions.
1:32635d2:      *
1:32635d2:      * <P>MT - unsafe, called during boot, which is single threaded.
1:32635d2:      *
1:32635d2:      * @return   <tt>true</tt> if prepared transactions exist,
1:32635d2:      *			 <tt>false</tt> otherwise.
1:32635d2:      */
1:32635d2: 	public boolean hasPreparedXact();
1:32635d2: 
1:eac0369: 	/**
1:eac0369: 		Database creation finished
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby exception policy.
1:eac0369: 	*/
1:eac0369: 	public void createFinished() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the transaction table so it can get logged with the checkpoint
1:eac0369: 		log record.
1:eac0369: 	 */
1:eac0369: 	public Formatable getTransactionTable();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Use this transaction table, which is gotten from a checkpoint
1:eac0369: 		operation.  Use ONLY during recovery.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby exception policy.
1:eac0369: 	 */
1:eac0369: 	public void useTransactionTable(Formatable transactionTable) 
1:eac0369: 		 throws StandardException; 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  @see org.apache.derby.iapi.store.access.AccessFactory#getTransactionInfo
1:eac0369: 	 */
1:eac0369: 	public TransactionInfo[] getTransactionInfo();
1:b4b8d3b: 
1:b4b8d3b: 
1:b4b8d3b: 	/**
1:b4b8d3b: 	 * Checks if there any backup blocking operations are in progress and 
1:402725c: 	 * prevents new ones from starting until the backup is finished. 
1:b4b8d3b: 	 *
1:b4b8d3b: 	 * @param wait if <tt>true</tt>, waits for the current backup blocking 
1:402725c: 	 *             operations in progress to finish.
1:b4b8d3b: 	 * @return     <tt>true</tt> if there are no backup blocking 
1:b4b8d3b: 	 *             operations in progress.
1:b4b8d3b: 	 *             <tt>false</tt> otherwise.
1:b4b8d3b: 	 * @exception StandardException if interrupted or a runtime exception occurs.
1:b4b8d3b: 	 */
1:402725c: 	public boolean blockBackupBlockingOperations(boolean wait) 
1:b4b8d3b: 		throws StandardException ;
1:b4b8d3b: 
1:b4b8d3b: 	/**
1:b4b8d3b: 	 * Backup completed. Allow backup blocking operations. 
1:b4b8d3b: 	 */
1:402725c: 	public void  unblockBackupBlockingOperations();
1:b4b8d3b: 
1:b4b8d3b: 													   
1:b4b8d3b: 
1:b4b8d3b: 													   
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9819cf8
/////////////////////////////////////////////////////////////////////////
1: 		@param rsf                      the RawStoreFactory
1: 		@param parentTransaction   the parent transaction
/////////////////////////////////////////////////////////////////////////
1:     RawTransaction parentTransaction,
/////////////////////////////////////////////////////////////////////////
1: 		@param rsf                      the RawStoreFactory
1: 		@param parentTransaction   the parent transaction
/////////////////////////////////////////////////////////////////////////
1:     RawTransaction parentTransaction,
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:ceaf7df
/////////////////////////////////////////////////////////////////////////
1:         @param contextMgr               is the context manager to use.  It must
1:                                         be the current context manager.
1:         @param transName                is the transaction name. It will be 
1:                                         displayed in the transactiontable VTI.
1:         @param flush_log_on_xact_end    By default should the transaction commit
1:                                         and abort be synced to the log.  Normal
1:                                         usage should pick true, unless there
1:                                         is specific performance need and usage
1:                                         works correctly if a commit can be 
1:                                         lost on system crash.
/////////////////////////////////////////////////////////////////////////
1:     String          transName,
1:     boolean         flush_log_on_xact_end)
commit:402725c
/////////////////////////////////////////////////////////////////////////
1: 	 * prevents new ones from starting until the backup is finished. 
1: 	 *             operations in progress to finish.
1: 	public boolean blockBackupBlockingOperations(boolean wait) 
1: 	public void  unblockBackupBlockingOperations();
commit:b4b8d3b
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 	/**
1: 	 * Checks if there any backup blocking operations are in progress and 
0: 	 * stops from new ones from starting until the backup is finished. 
1: 	 *
1: 	 * @param wait if <tt>true</tt>, waits for the current backup blocking 
0: 	 *             operation in progress to finish.
1: 	 * @return     <tt>true</tt> if there are no backup blocking 
1: 	 *             operations in progress.
1: 	 *             <tt>false</tt> otherwise.
1: 	 * @exception StandardException if interrupted or a runtime exception occurs.
1: 	 */
0: 	public boolean stopBackupBlockingOperations(boolean wait) 
1: 		throws StandardException ;
1: 
1: 	/**
1: 	 * Backup completed. Allow backup blocking operations. 
1: 	 */
0: 	public void backupFinished();
1: 
1: 													   
1: 
1: 													   
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby exception policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Derby Standard Error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Derby Standard Error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby exception policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby exception policy.
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3c1f634
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
/////////////////////////////////////////////////////////////////////////
1:     CompatibilitySpace compatibilitySpace,
commit:ee9c803
/////////////////////////////////////////////////////////////////////////
1: 	/**
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:32635d2
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Check if there are any prepared transanctions.
1:      *
1:      * <P>MT - unsafe, called during boot, which is single threaded.
1:      *
1:      * @return   <tt>true</tt> if prepared transactions exist,
1:      *			 <tt>false</tt> otherwise.
1:      */
1: 	public boolean hasPreparedXact();
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.xact.TransactionFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw.xact;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.daemon.Serviceable;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.locks.LockFactory;
1: 
1: import org.apache.derby.iapi.store.access.TransactionInfo;
1: 
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Corruptable;
1: 
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1: 	This module is intended to be used only within the RawStore. RawStore functionality
1: 	is accessed only through the RawStoreFactory interface.
1: 	The transaction manager is responsible for:
1: 
1: 	<UL>
1: 	<LI>Generating unique transaction identifiers.
1: 	<LI>Keeping a list of all open transactions within the raw store.
1: 	</UL>
1: 
1: 	@see RawStoreFactory
1: 	@see Transaction
1: */
1: 
1: public interface TransactionFactory extends Corruptable {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	public static String MODULE =
1:         "org.apache.derby.iapi.store.raw.xact.TransactionFactory";
1: 
1: 	/**
1: 		Get the LockFactory to use with this store.
1: 	*/
1: 	public LockFactory getLockFactory();
1: 
1: 	/*
1: 	 * Return the module providing XAresource interface to the transaction
1:      * table.
1:      *
0: 	 * @exception StandardException Standard cloudscape exception policy.
1: 	 */
1: 	public /* XAResourceManager */ Object getXAResourceManager()
1:         throws StandardException;
1: 
1: 	/**
1: 		Start a new transaction within the given raw store. This method will
1:         push a transaction context as described in
1:         RawStoreFactory.startTransaction
1: 
1:         @param contextMgr is the context manager to use.  It must be the current
1:                           context manager.
1:         @param transName is the transaction name. It will be displayed in the
1:             transactiontable VTI.
1: 
1: 		@see RawStoreFactory#startTransaction
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public RawTransaction startTransaction(
1:     RawStoreFactory rsf,
1:     ContextManager  contextMgr,
1:     String transName)
1:         throws StandardException;
1: 
1: 	/**
1: 		Start a new read only transaction within the given raw store. This 
1:         method will push a transaction context as described in
1:         RawStoreFactory.startNestedTransaction
1: 
1: 		@param compatibilitySpace   compatibility space to use for locks.
1:         @param contextMgr           is the context manager to use.  It must be 
1:                                     the current context manager.
1:         @param transName            is the transaction name. It will be 
1:                                     displayed in the transactiontable VTI.
1: 
1: 		@see RawStoreFactory#startNestedReadOnlyUserTransaction
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public RawTransaction startNestedReadOnlyUserTransaction(
1:     RawStoreFactory rsf,
0:     Object          compatibilitySpace,
1:     ContextManager  contextMgr,
1:     String          transName)
1:         throws StandardException;
1: 
1: 	/**
1: 		Start a new update transaction within the given raw store. This method 
1:         will push a transaction context as described in
1:         RawStoreFactory.startNestedTransaction
1: 
1:         @param contextMgr           is the context manager to use.  It must be 
1:                                     the current context manager.
1:         @param transName            is the transaction name. It will be 
1:                                     displayed in the transactiontable VTI.
1: 
1: 		@see RawStoreFactory#startNestedUpdateUserTransaction
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public RawTransaction startNestedUpdateUserTransaction(
1:     RawStoreFactory rsf,
1:     ContextManager  contextMgr,
1:     String          transName)
1:         throws StandardException;
1: 
1: 
1: 	/**
1: 		Start a new transaction within the given raw store. This method will
1:         push a transaction context as described in
1:         RawStoreFactory.startTransaction
1: 
1:         @param format_id  the format id part of the Xid - ie. Xid.getFormatId().
1:         @param global_id  the global transaction identifier part of XID - ie.
1:                           Xid.getGlobalTransactionId().
1:         @param branch_id  The branch qualifier of the Xid - ie.
1:                           Xid.getBranchQaulifier()
1:         @param contextMgr is the context manager to use.  It must be the current
1:                           context manager.
1: 
1: 		@see RawStoreFactory#startGlobalTransaction
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public RawTransaction startGlobalTransaction(
1:     RawStoreFactory rsf,
1:     ContextManager  contextMgr, 
1:     int             format_id,
1:     byte[]          global_id,
1:     byte[]          branch_id)
1:         throws StandardException;
1: 
1: 	/**
1: 		Find a user transaction within the given raw store and the given
1: 		contextMgr.  If no user transaction exist, then start one with name
1:         transName. This method will push a transaction context as described in
1: 		RawStoreFactory.startTransaction
1: 
1: 		@see RawStoreFactory#findUserTransaction
1: 		@see RawStoreFactory#startTransaction
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public RawTransaction findUserTransaction(
1:         RawStoreFactory rsf,
1:         ContextManager contextMgr,
1:         String transName) throws StandardException;
1: 
1: 	/**
1: 		Start a new nested top transaction within the given raw store. This
1:         method will push a transaction context as described in
1:         RawStoreFactory.startNestedTopTransaction
1: 
1: 		@see RawStoreFactory#startTransaction(ContextManager, String)
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public RawTransaction startNestedTopTransaction(RawStoreFactory rsf, ContextManager contextMgr) throws StandardException;
1: 
1: 
1: 	/**
1: 		Start a new internal transaction within the given raw store. This 
1:         method will push a transaction context as described in 
1:         RawStoreFactory.startInternalTransaction
1: 
1: 		@see RawStoreFactory#startTransaction
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public RawTransaction startInternalTransaction(RawStoreFactory rsf, ContextManager contextMgr) throws StandardException;
1: 
1: 
1: 	/**
1: 		Find a transaction using a transactionId and make the passed in
1: 		transaction assume the identity and properties of that transaction.
1: 		Used in recovery only.
1: 	*/
1: 	public boolean findTransaction(TransactionId id, RawTransaction tran);
1: 
1: 
1: 	/**
1: 		Reset any resettable transaction Id 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public void resetTranId() throws StandardException;
1: 
1: 	/**
1: 		The first log instant that belongs to a transaction that is still
1: 		active in the raw store. This is the first log record of the longest
1: 		running transaction at this moment. 
1: 	*/
1: 	public LogInstant firstUpdateInstant();
1: 
1: 	/**
1:         Run through all prepared transactions known to this factory 
1:         and restore their state such that they remain after recovery, and
1:         can be found and handled by a XA transaction manager.  This includes
1:         creating a context manager for each, pushing a xact context, and
1:         reclaiming update locks on all data changed by the transaction.
1: 
1: 		Used only in recovery.
1: 
0: 		@exception StandardException Cloudscape Standard Error policy
1: 	*/
1: 	public void handlePreparedXacts(
1:     RawStoreFactory rsf)
1: 		 throws StandardException;
1: 
1: 
1: 	/**
1: 		Rollback and close all transactions known to this factory using a
1: 		passed in transaction.  Used only in recovery.
1: 
1: 		@param recoveryTransaction the transaction used to rollback
0: 		@exception StandardException Cloudscape Standard Error policy
1: 	*/
1: 	public void rollbackAllTransactions(RawTransaction recoveryTransaction, 
1: 										RawStoreFactory rsf)
1: 		 throws StandardException ;
1: 
1: 
1: 	/**
1: 		Submit a post commit work to the post commit daemon.
1: 		The work is always added to the deamon, regardless of the
1: 		state it returns.
1: 
1: 		@return true if the daemon indicates it is being overloaded,
1: 		false it's happy.
1: 
1: 		<MT> must be MT-safe
1: 	*/
1: 	public boolean submitPostCommitWork(Serviceable work);
1: 
1: 	/**
1: 		make Transaction factory aware of which raw store factory it belongs to
1: 	*/
1: 	public void setRawStoreFactory(RawStoreFactory rsf) throws StandardException;
1: 
1: 	/**
1: 		Returns true if the transaction factory has no active updating 
1:         transaction
1: 	*/
1: 	public boolean noActiveUpdateTransaction();
1: 
1: 	/**
1: 		Database creation finished
1: 
0: 		@exception StandardException Standard cloudscape exception policy.
1: 	*/
1: 	public void createFinished() throws StandardException;
1: 
1: 	/**
1: 		Return the transaction table so it can get logged with the checkpoint
1: 		log record.
1: 	 */
1: 	public Formatable getTransactionTable();
1: 
1: 	/**
1: 		Use this transaction table, which is gotten from a checkpoint
1: 		operation.  Use ONLY during recovery.
1: 
0: 		@exception StandardException Standard cloudscape exception policy.
1: 	 */
1: 	public void useTransactionTable(Formatable transactionTable) 
1: 		 throws StandardException; 
1: 
1: 	/**
1: 	  @see org.apache.derby.iapi.store.access.AccessFactory#getTransactionInfo
1: 	 */
1: 	public TransactionInfo[] getTransactionInfo();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw.xact;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.daemon.Serviceable;
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.locks.LockFactory;
0: 
0: import org.apache.derby.iapi.store.access.TransactionInfo;
0: 
0: import org.apache.derby.iapi.store.raw.RawStoreFactory;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.Corruptable;
0: 
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0: 	This module is intended to be used only within the RawStore. RawStore functionality
0: 	is accessed only through the RawStoreFactory interface.
0: 	The transaction manager is responsible for:
0: 
0: 	<UL>
0: 	<LI>Generating unique transaction identifiers.
0: 	<LI>Keeping a list of all open transactions within the raw store.
0: 	</UL>
0: 
0: 	@see RawStoreFactory
0: 	@see Transaction
0: */
0: 
0: public interface TransactionFactory extends Corruptable {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	public static String MODULE =
0:         "org.apache.derby.iapi.store.raw.xact.TransactionFactory";
0: 
0: 	/**
0: 		Get the LockFactory to use with this store.
0: 	*/
0: 	public LockFactory getLockFactory();
0: 
0: 	/*
0: 	 * Return the module providing XAresource interface to the transaction
0:      * table.
0:      *
0: 	 * @exception StandardException Standard cloudscape exception policy.
0: 	 */
0: 	public /* XAResourceManager */ Object getXAResourceManager()
0:         throws StandardException;
0: 
0: 	/**
0: 		Start a new transaction within the given raw store. This method will
0:         push a transaction context as described in
0:         RawStoreFactory.startTransaction
0: 
0:         @param contextMgr is the context manager to use.  It must be the current
0:                           context manager.
0:         @param transName is the transaction name. It will be displayed in the
0:             transactiontable VTI.
0: 
0: 		@see RawStoreFactory#startTransaction
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public RawTransaction startTransaction(
0:     RawStoreFactory rsf,
0:     ContextManager  contextMgr,
0:     String transName)
0:         throws StandardException;
0: 
0: 	/**
0: 		Start a new read only transaction within the given raw store. This 
0:         method will push a transaction context as described in
0:         RawStoreFactory.startNestedTransaction
0: 
0: 		@param compatibilitySpace   compatibility space to use for locks.
0:         @param contextMgr           is the context manager to use.  It must be 
0:                                     the current context manager.
0:         @param transName            is the transaction name. It will be 
0:                                     displayed in the transactiontable VTI.
0: 
0: 		@see RawStoreFactory#startNestedReadOnlyUserTransaction
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public RawTransaction startNestedReadOnlyUserTransaction(
0:     RawStoreFactory rsf,
0:     Object          compatibilitySpace,
0:     ContextManager  contextMgr,
0:     String          transName)
0:         throws StandardException;
0: 
0: 	/**
0: 		Start a new update transaction within the given raw store. This method 
0:         will push a transaction context as described in
0:         RawStoreFactory.startNestedTransaction
0: 
0:         @param contextMgr           is the context manager to use.  It must be 
0:                                     the current context manager.
0:         @param transName            is the transaction name. It will be 
0:                                     displayed in the transactiontable VTI.
0: 
0: 		@see RawStoreFactory#startNestedUpdateUserTransaction
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public RawTransaction startNestedUpdateUserTransaction(
0:     RawStoreFactory rsf,
0:     ContextManager  contextMgr,
0:     String          transName)
0:         throws StandardException;
0: 
0: 
0: 	/**
0: 		Start a new transaction within the given raw store. This method will
0:         push a transaction context as described in
0:         RawStoreFactory.startTransaction
0: 
0:         @param format_id  the format id part of the Xid - ie. Xid.getFormatId().
0:         @param global_id  the global transaction identifier part of XID - ie.
0:                           Xid.getGlobalTransactionId().
0:         @param branch_id  The branch qualifier of the Xid - ie.
0:                           Xid.getBranchQaulifier()
0:         @param contextMgr is the context manager to use.  It must be the current
0:                           context manager.
0: 
0: 		@see RawStoreFactory#startGlobalTransaction
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public RawTransaction startGlobalTransaction(
0:     RawStoreFactory rsf,
0:     ContextManager  contextMgr, 
0:     int             format_id,
0:     byte[]          global_id,
0:     byte[]          branch_id)
0:         throws StandardException;
0: 
0: 	/**
0: 		Find a user transaction within the given raw store and the given
0: 		contextMgr.  If no user transaction exist, then start one with name
0:         transName. This method will push a transaction context as described in
0: 		RawStoreFactory.startTransaction
0: 
0: 		@see RawStoreFactory#findUserTransaction
0: 		@see RawStoreFactory#startTransaction
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public RawTransaction findUserTransaction(
0:         RawStoreFactory rsf,
0:         ContextManager contextMgr,
0:         String transName) throws StandardException;
0: 
0: 	/**
0: 		Start a new nested top transaction within the given raw store. This
0:         method will push a transaction context as described in
0:         RawStoreFactory.startNestedTopTransaction
0: 
0: 		@see RawStoreFactory#startTransaction(ContextManager, String)
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public RawTransaction startNestedTopTransaction(RawStoreFactory rsf, ContextManager contextMgr) throws StandardException;
0: 
0: 
0: 	/**
0: 		Start a new internal transaction within the given raw store. This 
0:         method will push a transaction context as described in 
0:         RawStoreFactory.startInternalTransaction
0: 
0: 		@see RawStoreFactory#startTransaction
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public RawTransaction startInternalTransaction(RawStoreFactory rsf, ContextManager contextMgr) throws StandardException;
0: 
0: 
0: 	/**
0: 		Find a transaction using a transactionId and make the passed in
0: 		transaction assume the identity and properties of that transaction.
0: 		Used in recovery only.
0: 	*/
0: 	public boolean findTransaction(TransactionId id, RawTransaction tran);
0: 
0: 
0: 	/**
0: 		Reset any resettable transaction Id 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public void resetTranId() throws StandardException;
0: 
0: 	/**
0: 		The first log instant that belongs to a transaction that is still
0: 		active in the raw store. This is the first log record of the longest
0: 		running transaction at this moment. 
0: 	*/
0: 	public LogInstant firstUpdateInstant();
0: 
0: 	/**
0:         Run through all prepared transactions known to this factory 
0:         and restore their state such that they remain after recovery, and
0:         can be found and handled by a XA transaction manager.  This includes
0:         creating a context manager for each, pushing a xact context, and
0:         reclaiming update locks on all data changed by the transaction.
0: 
0: 		Used only in recovery.
0: 
0: 		@exception StandardException Cloudscape Standard Error policy
0: 	*/
0: 	public void handlePreparedXacts(
0:     RawStoreFactory rsf)
0: 		 throws StandardException;
0: 
0: 
0: 	/**
0: 		Rollback and close all transactions known to this factory using a
0: 		passed in transaction.  Used only in recovery.
0: 
0: 		@param recoveryTransaction the transaction used to rollback
0: 		@exception StandardException Cloudscape Standard Error policy
0: 	*/
0: 	public void rollbackAllTransactions(RawTransaction recoveryTransaction, 
0: 										RawStoreFactory rsf)
0: 		 throws StandardException ;
0: 
0: 
0: 	/**
0: 		Submit a post commit work to the post commit daemon.
0: 		The work is always added to the deamon, regardless of the
0: 		state it returns.
0: 
0: 		@return true if the daemon indicates it is being overloaded,
0: 		false it's happy.
0: 
0: 		<MT> must be MT-safe
0: 	*/
0: 	public boolean submitPostCommitWork(Serviceable work);
0: 
0: 	/**
0: 		make Transaction factory aware of which raw store factory it belongs to
0: 	*/
0: 	public void setRawStoreFactory(RawStoreFactory rsf) throws StandardException;
0: 
0: 	/**
0: 		Returns true if the transaction factory has no active updating 
0:         transaction
0: 	*/
0: 	public boolean noActiveUpdateTransaction();
0: 
0: 	/**
0: 		Database creation finished
0: 
0: 		@exception StandardException Standard cloudscape exception policy.
0: 	*/
0: 	public void createFinished() throws StandardException;
0: 
0: 	/**
0: 		Return the transaction table so it can get logged with the checkpoint
0: 		log record.
0: 	 */
0: 	public Formatable getTransactionTable();
0: 
0: 	/**
0: 		Use this transaction table, which is gotten from a checkpoint
0: 		operation.  Use ONLY during recovery.
0: 
0: 		@exception StandardException Standard cloudscape exception policy.
0: 	 */
0: 	public void useTransactionTable(Formatable transactionTable) 
0: 		 throws StandardException; 
0: 
0: 	/**
0: 	  @see org.apache.derby.iapi.store.access.AccessFactory#getTransactionInfo
0: 	 */
0: 	public TransactionInfo[] getTransactionInfo();
0: }
============================================================================