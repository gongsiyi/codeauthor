1:33776ff: /*
5:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.NetResultSet
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:69e3d06: import java.sql.ResultSet;
1:33776ff: import org.apache.derby.client.am.Cursor;
1:70f7692: import org.apache.derby.client.am.DisconnectException;
1:69e3d06: import org.apache.derby.client.am.ClientResultSet;
1:33776ff: import org.apache.derby.client.am.Section;
1:70f7692: import org.apache.derby.client.am.SqlException;
1:0326967: 
1:33776ff: 
1:33776ff: 
1:0326967: class NetResultSet extends ClientResultSet {
1:70f7692:     // Alias for (NetConnection) super.statement.connection
1:70f7692:     private final NetConnection netConnection_;
1:33776ff: 
1:70f7692:     // Alias for (NetStatement) super.statement
1:70f7692:     private final NetStatement netStatement_;
1:33776ff: 
1:70f7692:     // Alias for (NetCursor) super.cursor
1:70f7692:     final NetCursor netCursor_;
1:33776ff: 
1:70f7692:     // Alias for (NetAgent) super.agent
1:70f7692:     final private NetAgent netAgent_;
1:33776ff: 
1:c247315:     // Indicates whether the fixed row protocol is being used. If so,
1:c247315:     // the fetch size will always be 1.
1:c247315:     private boolean isFixedRowProtocol = false;
1:c247315:     
1:70f7692:     //-----------------------------state------------------------------------------
1:33776ff: 
1:70f7692:     // This is used to avoid sending multiple outovr over subsequent next()'s
1:0326967:     boolean firstOutovrBuilt_ = false;
1:33776ff: 
1:70f7692:     //---------------------constructors/finalizer---------------------------------
1:33776ff: 
1:70f7692:     // parseOpnqrym() is called right after this constructor is called.
1:33776ff: 
1:70f7692:     NetResultSet(NetAgent netAgent,
1:70f7692:                  NetStatement netStatement,
1:70f7692:                  Cursor cursor,
1:c247315:                  int qryprctyp,  //protocolType, CodePoint.FIXROWPRC |
1:c247315:                                  //              CodePoint.LMTBLKPRC
1:70f7692:                  int sqlcsrhld, // holdOption, 0xF0 for false (default) | 0xF1 for true.
1:70f7692:                  int qryattscr, // scrollOption, 0xF0 for false (default) | 0xF1 for true.
1:c247315:                  int qryattsns, // sensitivity, CodePoint.QRYUNK | 
1:c247315:                                 //              CodePoint.QRYINS |
1:c247315:                                 //              CodePoint.QRYSNSSTC
1:70f7692:                  int qryattset, // rowsetCursor, 0xF0 for false (default) | 0xF1 for true.
1:70f7692:                  long qryinsid, // instanceIdentifier, 0 (if not returned, check default) or number
1:70f7692:                  int actualResultSetType,
1:70f7692:                  int actualResultSetConcurrency,
1:70f7692:                  int actualResultSetHoldability) //throws DisconnectException
1:70f7692:     {
1:70f7692:         super(netAgent,
1:70f7692:                 netStatement.statement_,
1:70f7692:                 //new NetCursor (netAgent, qryprctyp),
1:70f7692:                 cursor,
1:70f7692:                 // call the constructor with the real resultSetType and resultSetConcurrency
1:70f7692:                 // returned from the server
1:70f7692:                 actualResultSetType,
1:70f7692:                 actualResultSetConcurrency,
1:70f7692:                 actualResultSetHoldability);
1:33776ff: 
1:70f7692:         netAgent_ = netAgent;
1:33776ff: 
1:70f7692:         // Set up cheat-links
1:70f7692:         netCursor_ = (NetCursor) cursor_;
1:70f7692:         netStatement_ = netStatement;
1:70f7692:         netConnection_ = netStatement.netConnection_;
1:33776ff: 
1:70f7692:         netCursor_.netResultSet_ = this;
1:33776ff: 
1:70f7692:         cursorHold_ = (sqlcsrhld != 0xf0);
1:70f7692:         if (qryattscr == 0xF1) {
1:70f7692:             scrollable_ = true;
1:70f7692:         }
1:33776ff: 
1:c247315:         // The number of rows returned by the server will always be 1 when the
1:c247315:         // Fixed Row Protocol is being used.
1:c247315:         if (qryprctyp == CodePoint.FIXROWPRC) {
1:c247315:             isFixedRowProtocol = true;
1:c247315:             fetchSize_ = 1;
1:c247315:         } else {
1:c247315:             fetchSize_ = suggestedFetchSize_;
1:c247315:         }
1:c247315: 
1:70f7692:         switch (qryattsns) {
1:70f7692:         case CodePoint.QRYUNK:
1:70f7692:             sensitivity_ = sensitivity_unknown__;
1:70f7692:             break;
1:70f7692:         case CodePoint.QRYINS:
1:70f7692:             sensitivity_ = sensitivity_insensitive__;
1:70f7692:             break;
1:c247315:         case CodePoint.QRYSNSSTC:
1:c247315:             sensitivity_ = sensitivity_sensitive_static__;
1:c247315:             break;
1:70f7692:         default:   // shouldn't happen
1:70f7692:             break;
1:70f7692:         }
1:70f7692: 
1:70f7692:         if (qryattset == 0xF1) {
1:70f7692:             isRowsetCursor_ = true;
1:70f7692:         }
1:70f7692: 
1:70f7692:         queryInstanceIdentifier_ = qryinsid;
10:33776ff:     }
1:33776ff: 
1:33776ff: 
1:70f7692:     //-------------------------------flow methods---------------------------------
1:33776ff: 
1:70f7692:     // Go through the QRYDTA's received, and calculate the column offsets for each row.
1:70f7692:     protected void parseRowset_() throws SqlException {
1:70f7692:         int row = 0;
1:70f7692:         // Parse all the rows received in the rowset
1:70f7692:         // The index we are passing will keep track of which row in the rowset we are parsing
1:70f7692:         // so we can reuse the columnDataPosition/Length/IsNull arrays.
1:5e88312:         while (netCursor_.calculateColumnOffsetsForRow_(row, true)) {
1:70f7692:             rowsReceivedInCurrentRowset_++;
1:70f7692:             row++;
1:70f7692:         }
1:33776ff: 
1:70f7692:         // if rowset is not complete and an endqryrm was received, will skip the while loop
1:70f7692:         // and go to the checkAndThrow method.  otherwise flow an cntqry to try to complete
1:70f7692:         // the rowset.
1:70f7692:         // -- there is no need to complete the rowset for rowset cursors.  fetching stops when
1:70f7692:         //    the end of data is returned or when an error occurs.  all successfully fetched rows
1:70f7692:         //    are returned to the user.  the specific error is not returned until the next fetch.
1:70f7692:         while (rowsReceivedInCurrentRowset_ != fetchSize_ &&
1:5e88312:                 !netCursor_.allRowsReceivedFromServer() && !isRowsetCursor_ &&
1:c247315:                 sensitivity_ != sensitivity_sensitive_dynamic__ &&
1:c247315:                 sensitivity_ != sensitivity_sensitive_static__) {
1:70f7692:             flowFetchToCompleteRowset();
1:5e88312:             while (netCursor_.calculateColumnOffsetsForRow_(row, true)) {
1:70f7692:                 rowsReceivedInCurrentRowset_++;
1:70f7692:                 row++;
1:70f7692:             }
1:70f7692:         }
1:70f7692:         checkAndThrowReceivedQueryTerminatingException();
1:33776ff:     }
1:33776ff: 
1:70f7692:     public void setFetchSize_(int rows) {
1:c247315:         // Do not change the fetchSize for Fixed Row Protocol
1:c247315:         suggestedFetchSize_ = (rows == 0) ? 64 : rows;
1:c247315:         if (!isFixedRowProtocol) {
1:c247315:             fetchSize_ = suggestedFetchSize_;
1:c247315:         }
1:33776ff:     }
1:33776ff: 
1:70f7692:     //-----------------------------helper methods---------------------------------
1:33776ff: 
1:70f7692:     void flowFetchToCompleteRowset() throws DisconnectException {
1:70f7692:         try {
1:70f7692:             agent_.beginWriteChain(statement_);
1:33776ff: 
1:74fb1b0:             writeScrollableFetch_((generatedSection_ == null) ? statement_.getSection() : generatedSection_,
1:70f7692:                     fetchSize_ - rowsReceivedInCurrentRowset_,
1:70f7692:                     scrollOrientation_relative__,
1:70f7692:                     1,
1:70f7692:                     false);  // false means do not disard pending
1:70f7692:             // partial row and pending query blocks
1:33776ff: 
1:70f7692:             agent_.flow(statement_);
1:70f7692:             readScrollableFetch_();
1:70f7692:             agent_.endReadChain();
1:70f7692:         } catch (SqlException e) {
1:70f7692:             throw new DisconnectException(agent_, e);
1:70f7692:         }
1:33776ff:     }
1:70f7692: 
1:70f7692:     // ------------------------------- abstract box car methods --------------------------------------
1:70f7692:     public void writeFetch_(Section section) throws SqlException {
1:69e3d06:         if (resultSetType_ == ResultSet.TYPE_FORWARD_ONLY && fetchSize_ != 0 &&
1:70f7692:                 rowsYetToBeReceivedForRowset_ > 0) {
1:70f7692:             netAgent_.resultSetRequest_.writeFetch(this,
1:70f7692:                     section,
1:70f7692:                     rowsYetToBeReceivedForRowset_);
1:70f7692:         } else {
1:70f7692:             netAgent_.resultSetRequest_.writeFetch(this,
1:70f7692:                     section,
1:70f7692:                     fetchSize_);
1:70f7692:         }
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void readFetch_() throws SqlException {
1:70f7692:         netAgent_.resultSetReply_.readFetch(this);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void writeScrollableFetch_(Section section,
1:70f7692:                                       int fetchSize,
1:70f7692:                                       int orientation,
1:70f7692:                                       long rowToFetch,
1:70f7692:                                       boolean resetQueryBlocks) throws SqlException {
1:70f7692:         netAgent_.resultSetRequest_.writeScrollableFetch(this,
1:70f7692:                 section,
1:70f7692:                 fetchSize,
1:70f7692:                 orientation,
1:70f7692:                 rowToFetch,
1:70f7692:                 resetQueryBlocks);
1:70f7692:     }
1:33776ff: 
1:70f7692:     // think about splitting out the position cursor stuff from the fetch stuff
1:70f7692:     // use commented out abstract position cursor methods above
1:70f7692:     public void readScrollableFetch_() throws SqlException {
1:70f7692:         netAgent_.resultSetReply_.readScrollableFetch(this);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void writePositioningFetch_(Section section,
1:70f7692:                                        int orientation,
1:70f7692:                                        long rowToFetch) throws SqlException {
1:70f7692:         netAgent_.resultSetRequest_.writePositioningFetch(this,
1:70f7692:                 section,
1:70f7692:                 orientation,
1:70f7692:                 rowToFetch);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void readPositioningFetch_() throws SqlException {
1:70f7692:         netAgent_.resultSetReply_.readPositioningFetch(this);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void writeCursorClose_(Section section) throws SqlException {
1:70f7692:         netAgent_.resultSetRequest_.writeCursorClose(this, section);
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void readCursorClose_() throws SqlException {
1:70f7692:         netAgent_.resultSetReply_.readCursorClose(this);
1:70f7692:     }
1:5e88312: 
1:5e88312:     /**
1:5e88312:      * Method that is invoked by <code>closeX()</code> before the
1:5e88312:      * result set is actually being closed. If QRYCLSIMP is enabled on
1:5e88312:      * the cursor, scan data buffer for end of data (SQL state
1:5e88312:      * 02000). If end of data is received, the result set is closed on
1:5e88312:      * the server.
1:5e88312:      *
1:5e88312:      * @exception SqlException
1:5e88312:      */
1:5e88312:     protected void preClose_() throws SqlException {
1:5e88312:         if (netCursor_.getQryclsimpEnabled()) {
1:5e88312:             netCursor_.scanDataBufferForEndOfData();
1:5e88312:         }
1:5e88312:     }
1:0326967: 
1:0326967:     // Analyze the error handling here, and whether or not can be pushed to
1:0326967:     // common can we make this the common layer fetch method.  Called by the
1:0326967:     // read/skip Fdoca bytes methods in the net whenever data reads exhaust the
1:0326967:     // internal buffer used by this reply.
1:0326967:     void flowFetch() throws DisconnectException, SqlException {
1:0326967:         agent_.beginWriteChain(statement_);
1:0326967:         writeFetch_((generatedSection_ == null) ?
1:74fb1b0:                 statement_.getSection() :
1:0326967:                 generatedSection_);
1:0326967:         agent_.flow(statement_);
1:0326967:         readFetch_();
1:0326967:         agent_.endReadChain();
1:0326967:     }
1:0326967: 
1:33776ff: }
============================================================================
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:74fb1b0
/////////////////////////////////////////////////////////////////////////
1:             writeScrollableFetch_((generatedSection_ == null) ? statement_.getSection() : generatedSection_,
/////////////////////////////////////////////////////////////////////////
1:                 statement_.getSection() :
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: 
1: class NetResultSet extends ClientResultSet {
/////////////////////////////////////////////////////////////////////////
1:     boolean firstOutovrBuilt_ = false;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     // Analyze the error handling here, and whether or not can be pushed to
1:     // common can we make this the common layer fetch method.  Called by the
1:     // read/skip Fdoca bytes methods in the net whenever data reads exhaust the
1:     // internal buffer used by this reply.
1:     void flowFetch() throws DisconnectException, SqlException {
1:         agent_.beginWriteChain(statement_);
1:         writeFetch_((generatedSection_ == null) ?
0:                 statement_.section_ :
1:                 generatedSection_);
1:         agent_.flow(statement_);
1:         readFetch_();
1:         agent_.endReadChain();
1:     }
1: 
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
1: import org.apache.derby.client.am.ClientResultSet;
0: public class NetResultSet extends ClientResultSet {
/////////////////////////////////////////////////////////////////////////
1:         if (resultSetType_ == ResultSet.TYPE_FORWARD_ONLY && fetchSize_ != 0 &&
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.ResultSet;
0: public class NetResultSet extends ResultSet {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:c247315
/////////////////////////////////////////////////////////////////////////
1:     // Indicates whether the fixed row protocol is being used. If so,
1:     // the fetch size will always be 1.
1:     private boolean isFixedRowProtocol = false;
1:     
/////////////////////////////////////////////////////////////////////////
1:                  int qryprctyp,  //protocolType, CodePoint.FIXROWPRC |
1:                                  //              CodePoint.LMTBLKPRC
1:                  int qryattsns, // sensitivity, CodePoint.QRYUNK | 
1:                                 //              CodePoint.QRYINS |
1:                                 //              CodePoint.QRYSNSSTC
/////////////////////////////////////////////////////////////////////////
1:         // The number of rows returned by the server will always be 1 when the
1:         // Fixed Row Protocol is being used.
1:         if (qryprctyp == CodePoint.FIXROWPRC) {
1:             isFixedRowProtocol = true;
1:             fetchSize_ = 1;
1:         } else {
1:             fetchSize_ = suggestedFetchSize_;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         case CodePoint.QRYSNSSTC:
1:             sensitivity_ = sensitivity_sensitive_static__;
1:             break;
/////////////////////////////////////////////////////////////////////////
1:                 sensitivity_ != sensitivity_sensitive_dynamic__ &&
1:                 sensitivity_ != sensitivity_sensitive_static__) {
/////////////////////////////////////////////////////////////////////////
1:         // Do not change the fetchSize for Fixed Row Protocol
1:         suggestedFetchSize_ = (rows == 0) ? 64 : rows;
1:         if (!isFixedRowProtocol) {
1:             fetchSize_ = suggestedFetchSize_;
1:         }
commit:5e88312
/////////////////////////////////////////////////////////////////////////
1:         while (netCursor_.calculateColumnOffsetsForRow_(row, true)) {
/////////////////////////////////////////////////////////////////////////
1:                 !netCursor_.allRowsReceivedFromServer() && !isRowsetCursor_ &&
1:             while (netCursor_.calculateColumnOffsetsForRow_(row, true)) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Method that is invoked by <code>closeX()</code> before the
1:      * result set is actually being closed. If QRYCLSIMP is enabled on
1:      * the cursor, scan data buffer for end of data (SQL state
1:      * 02000). If end of data is received, the result set is closed on
1:      * the server.
1:      *
1:      * @exception SqlException
1:      */
1:     protected void preClose_() throws SqlException {
1:         if (netCursor_.getQryclsimpEnabled()) {
1:             netCursor_.scanDataBufferForEndOfData();
1:         }
1:     }
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.DisconnectException;
1: import org.apache.derby.client.am.SqlException;
0: public class NetResultSet extends org.apache.derby.client.am.ResultSet {
1:     // Alias for (NetConnection) super.statement.connection
1:     private final NetConnection netConnection_;
1:     // Alias for (NetStatement) super.statement
1:     private final NetStatement netStatement_;
1:     // Alias for (NetCursor) super.cursor
1:     final NetCursor netCursor_;
1:     // Alias for (NetAgent) super.agent
1:     final private NetAgent netAgent_;
1:     //-----------------------------state------------------------------------------
1:     // This is used to avoid sending multiple outovr over subsequent next()'s
0:     public boolean firstOutovrBuilt_ = false;
1:     //---------------------constructors/finalizer---------------------------------
1:     // parseOpnqrym() is called right after this constructor is called.
1:     NetResultSet(NetAgent netAgent,
1:                  NetStatement netStatement,
1:                  Cursor cursor,
0:                  //int qryprctyp,  //protocolType, CodePoint.FIXROWPRC | CodePoint.LMTBLKPRC
1:                  int sqlcsrhld, // holdOption, 0xF0 for false (default) | 0xF1 for true.
1:                  int qryattscr, // scrollOption, 0xF0 for false (default) | 0xF1 for true.
0:                  int qryattsns, // sensitivity, CodePoint.QRYUNK | CodePoint.QRYINS
1:                  int qryattset, // rowsetCursor, 0xF0 for false (default) | 0xF1 for true.
1:                  long qryinsid, // instanceIdentifier, 0 (if not returned, check default) or number
1:                  int actualResultSetType,
1:                  int actualResultSetConcurrency,
1:                  int actualResultSetHoldability) //throws DisconnectException
1:     {
1:         super(netAgent,
1:                 netStatement.statement_,
1:                 //new NetCursor (netAgent, qryprctyp),
1:                 cursor,
1:                 // call the constructor with the real resultSetType and resultSetConcurrency
1:                 // returned from the server
1:                 actualResultSetType,
1:                 actualResultSetConcurrency,
1:                 actualResultSetHoldability);
1:         netAgent_ = netAgent;
1:         // Set up cheat-links
1:         netCursor_ = (NetCursor) cursor_;
1:         netStatement_ = netStatement;
1:         netConnection_ = netStatement.netConnection_;
1:         netCursor_.netResultSet_ = this;
1:         cursorHold_ = (sqlcsrhld != 0xf0);
1:         if (qryattscr == 0xF1) {
1:             scrollable_ = true;
1:         }
1:         switch (qryattsns) {
1:         case CodePoint.QRYUNK:
1:             sensitivity_ = sensitivity_unknown__;
1:             break;
1:         case CodePoint.QRYINS:
1:             sensitivity_ = sensitivity_insensitive__;
1:             break;
1:         default:   // shouldn't happen
1:             break;
1:         }
1: 
1:         if (qryattset == 0xF1) {
1:             isRowsetCursor_ = true;
1:         }
1: 
1:         queryInstanceIdentifier_ = qryinsid;
0:         nestingLevel_ = (int) ((queryInstanceIdentifier_ >>> 48) & 0xFFFF);
1:     //-------------------------------flow methods---------------------------------
1:     // Go through the QRYDTA's received, and calculate the column offsets for each row.
1:     protected void parseRowset_() throws SqlException {
1:         int row = 0;
1:         // Parse all the rows received in the rowset
1:         // The index we are passing will keep track of which row in the rowset we are parsing
1:         // so we can reuse the columnDataPosition/Length/IsNull arrays.
0:         while (netCursor_.calculateColumnOffsetsForRow_(row)) {
1:             rowsReceivedInCurrentRowset_++;
1:             row++;
1:         }
1:         // if rowset is not complete and an endqryrm was received, will skip the while loop
1:         // and go to the checkAndThrow method.  otherwise flow an cntqry to try to complete
1:         // the rowset.
1:         // -- there is no need to complete the rowset for rowset cursors.  fetching stops when
1:         //    the end of data is returned or when an error occurs.  all successfully fetched rows
1:         //    are returned to the user.  the specific error is not returned until the next fetch.
1:         while (rowsReceivedInCurrentRowset_ != fetchSize_ &&
0:                 !netCursor_.allRowsReceivedFromServer_ && !isRowsetCursor_ &&
0:                 sensitivity_ != sensitivity_sensitive_dynamic__) {
1:             flowFetchToCompleteRowset();
0:             while (netCursor_.calculateColumnOffsetsForRow_(row)) {
1:                 rowsReceivedInCurrentRowset_++;
1:                 row++;
1:             }
1:         }
1:         checkAndThrowReceivedQueryTerminatingException();
1:     public void setFetchSize_(int rows) {
0:         fetchSize_ = (rows == 0) ? 64 : rows;
1:     //-----------------------------helper methods---------------------------------
1:     void flowFetchToCompleteRowset() throws DisconnectException {
1:         try {
1:             agent_.beginWriteChain(statement_);
0:             writeScrollableFetch_((generatedSection_ == null) ? statement_.section_ : generatedSection_,
1:                     fetchSize_ - rowsReceivedInCurrentRowset_,
1:                     scrollOrientation_relative__,
1:                     1,
1:                     false);  // false means do not disard pending
1:             // partial row and pending query blocks
1:             agent_.flow(statement_);
1:             readScrollableFetch_();
1:             agent_.endReadChain();
1:         } catch (SqlException e) {
1:             throw new DisconnectException(agent_, e);
1:         }
1: 
0:     void queryDataWasReturnedOnOpen() throws DisconnectException {
1:     // ------------------------------- abstract box car methods --------------------------------------
1:     public void writeFetch_(Section section) throws SqlException {
0:         if (resultSetType_ == java.sql.ResultSet.TYPE_FORWARD_ONLY && fetchSize_ != 0 &&
1:                 rowsYetToBeReceivedForRowset_ > 0) {
1:             netAgent_.resultSetRequest_.writeFetch(this,
1:                     section,
1:                     rowsYetToBeReceivedForRowset_);
1:         } else {
1:             netAgent_.resultSetRequest_.writeFetch(this,
1:                     section,
1:                     fetchSize_);
1:         }
1:     }
1:     public void readFetch_() throws SqlException {
1:         netAgent_.resultSetReply_.readFetch(this);
1:     }
1:     public void writeScrollableFetch_(Section section,
1:                                       int fetchSize,
1:                                       int orientation,
1:                                       long rowToFetch,
1:                                       boolean resetQueryBlocks) throws SqlException {
1:         netAgent_.resultSetRequest_.writeScrollableFetch(this,
1:                 section,
1:                 fetchSize,
1:                 orientation,
1:                 rowToFetch,
1:                 resetQueryBlocks);
1:     }
1:     // think about splitting out the position cursor stuff from the fetch stuff
1:     // use commented out abstract position cursor methods above
1:     public void readScrollableFetch_() throws SqlException {
1:         netAgent_.resultSetReply_.readScrollableFetch(this);
1:     }
1:     public void writePositioningFetch_(Section section,
1:                                        int orientation,
1:                                        long rowToFetch) throws SqlException {
1:         netAgent_.resultSetRequest_.writePositioningFetch(this,
1:                 section,
1:                 orientation,
1:                 rowToFetch);
1:     }
1:     public void readPositioningFetch_() throws SqlException {
1:         netAgent_.resultSetReply_.readPositioningFetch(this);
1:     }
1:     public void writeCursorClose_(Section section) throws SqlException {
1:         netAgent_.resultSetRequest_.writeCursorClose(this, section);
1:     }
1:     public void readCursorClose_() throws SqlException {
1:         netAgent_.resultSetReply_.readCursorClose(this);
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.NetResultSet
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.client.net;
1: 
0: import org.apache.derby.client.am.SqlException;
0: import org.apache.derby.client.am.DisconnectException;
1: import org.apache.derby.client.am.Cursor;
1: import org.apache.derby.client.am.Section;
1: 
1: 
0: public class NetResultSet extends org.apache.derby.client.am.ResultSet
0: {
0:   // Alias for (NetConnection) super.statement.connection
0:   private final NetConnection netConnection_;
1: 
0:   // Alias for (NetStatement) super.statement
0:   private final NetStatement netStatement_;
1: 
0:   // Alias for (NetCursor) super.cursor
0:   final NetCursor netCursor_;
1: 
0:   // Alias for (NetAgent) super.agent
0:   final private NetAgent netAgent_;
1: 
0:   //-----------------------------state------------------------------------------
1: 
0:   // This is used to avoid sending multiple outovr over subsequent next()'s
0:   public boolean firstOutovrBuilt_ = false;
1: 
0:   //---------------------constructors/finalizer---------------------------------
1: 
0:   // parseOpnqrym() is called right after this constructor is called.
1: 
0:   NetResultSet (NetAgent netAgent,
0:                NetStatement netStatement,
0:                Cursor cursor,
0:                //int qryprctyp,  //protocolType, CodePoint.FIXROWPRC | CodePoint.LMTBLKPRC
0:                int sqlcsrhld,  // holdOption, 0xF0 for false (default) | 0xF1 for true.
0:                int qryattscr,  // scrollOption, 0xF0 for false (default) | 0xF1 for true.
0:                int qryattsns,  // sensitivity, CodePoint.QRYUNK | CodePoint.QRYINS
0:                int qryattset,  // rowsetCursor, 0xF0 for false (default) | 0xF1 for true.
0:                long qryinsid,  // instanceIdentifier, 0 (if not returned, check default) or number
0:                int actualResultSetType,
0:                int actualResultSetConcurrency,
0:                int actualResultSetHoldability
0:                ) //throws DisconnectException
0:   {
0:     super (netAgent,
0:            netStatement.statement_,
0:            //new NetCursor (netAgent, qryprctyp),
0:            cursor,
0:            // call the constructor with the real resultSetType and resultSetConcurrency
0:            // returned from the server
0:            actualResultSetType,
0:            actualResultSetConcurrency,
0:            actualResultSetHoldability);
1: 
0:     netAgent_ = netAgent;
1: 
0:     // Set up cheat-links
0:     netCursor_ = (NetCursor) cursor_;
0:     netStatement_ = netStatement;
0:     netConnection_ = netStatement.netConnection_;
1: 
0:     netCursor_.netResultSet_ = this;
1: 
0:     cursorHold_ = (sqlcsrhld != 0xf0);
0:     if (qryattscr == 0xF1) scrollable_ = true;
1: 
0:     switch (qryattsns) {
0:     case CodePoint.QRYUNK:
0:       sensitivity_ = sensitivity_unknown__;
0:       break;
0:     case CodePoint.QRYINS:
0:       sensitivity_ = sensitivity_insensitive__;
0:       break;
0:     default:   // shouldn't happen
0:       break;
1:     }
1: 
0:     if (qryattset == 0xF1) isRowsetCursor_ = true;
1: 
0:     queryInstanceIdentifier_ = qryinsid;
0:     nestingLevel_ = (int)((queryInstanceIdentifier_ >>> 48) & 0xFFFF);
1:   }
1: 
1: 
0:   //-------------------------------flow methods---------------------------------
1: 
0:   // Go through the QRYDTA's received, and calculate the column offsets for each row.
0:   protected void parseRowset_ () throws SqlException
0:   {
0:     int row = 0;
0:     // Parse all the rows received in the rowset
0:     // The index we are passing will keep track of which row in the rowset we are parsing
0:     // so we can reuse the columnDataPosition/Length/IsNull arrays.
0:     while (netCursor_.calculateColumnOffsetsForRow_(row)) {
0:       rowsReceivedInCurrentRowset_++;
0:       row++;
1:     }
1: 
0:     // if rowset is not complete and an endqryrm was received, will skip the while loop
0:     // and go to the checkAndThrow method.  otherwise flow an cntqry to try to complete
0:     // the rowset.
0:     // -- there is no need to complete the rowset for rowset cursors.  fetching stops when
0:     //    the end of data is returned or when an error occurs.  all successfully fetched rows
0:     //    are returned to the user.  the specific error is not returned until the next fetch.
0:     while (rowsReceivedInCurrentRowset_ != fetchSize_ &&
0:            !netCursor_.allRowsReceivedFromServer_ && !isRowsetCursor_ &&
0:            sensitivity_ != sensitivity_sensitive_dynamic__) {
0:       flowFetchToCompleteRowset ();
0:       while (netCursor_.calculateColumnOffsetsForRow_(row)) {
0:         rowsReceivedInCurrentRowset_++;
0:         row++;
1:       }
1:     }
0:     checkAndThrowReceivedQueryTerminatingException();
1:   }
1: 
0:   public void setFetchSize_ (int rows) { fetchSize_ = (rows == 0) ? 64 : rows; }
1: 
0:   //-----------------------------helper methods---------------------------------
1: 
0:   void flowFetchToCompleteRowset () throws DisconnectException
0:   {
0:     try {
0:       agent_.beginWriteChain (statement_);
1: 
0:       writeScrollableFetch_ ((generatedSection_ == null) ? statement_.section_ : generatedSection_,
0:                             fetchSize_ - rowsReceivedInCurrentRowset_,
0:                             scrollOrientation_relative__,
0:                             1,
0:                             false);  // false means do not disard pending
0:                                      // partial row and pending query blocks
1: 
0:       agent_.flow (statement_);
0:       readScrollableFetch_ ();
0:       agent_.endReadChain ();
1:     }
0:     catch (SqlException e) {
0:       throw new DisconnectException (agent_, e);
1:     }
1:   }
1: 
0:   void queryDataWasReturnedOnOpen() throws DisconnectException
0:   {
1:   }
1: 
0:   // ------------------------------- abstract box car methods --------------------------------------
0:   public void writeFetch_ (Section section) throws SqlException
0:   {
0:     if (resultSetType_ == java.sql.ResultSet.TYPE_FORWARD_ONLY && fetchSize_ != 0 &&
0:         rowsYetToBeReceivedForRowset_ > 0)
0:       netAgent_.resultSetRequest_.writeFetch (this,
0:                                              section,
0:                                              rowsYetToBeReceivedForRowset_);
0:     else
0:       netAgent_.resultSetRequest_.writeFetch (this,
0:                                              section,
0:                                              fetchSize_);
1:   }
1: 
0:   public void readFetch_ () throws SqlException
0:   { netAgent_.resultSetReply_.readFetch (this); }
1: 
0:   public void writeScrollableFetch_ (Section section,
0:                                     int fetchSize,
0:                                     int orientation,
0:                                     long rowToFetch,
0:                                     boolean resetQueryBlocks) throws SqlException
0:   {
0:     netAgent_.resultSetRequest_.writeScrollableFetch (
0:       this,
0:       section,
0:       fetchSize,
0:       orientation,
0:       rowToFetch,
0:       resetQueryBlocks);
1:   }
1: 
0:   // think about splitting out the position cursor stuff from the fetch stuff
0:   // use commented out abstract position cursor methods above
0:   public void readScrollableFetch_ () throws SqlException
0:   { netAgent_.resultSetReply_.readScrollableFetch (this); }
1: 
0:   public void writePositioningFetch_ (Section section,
0:                                      int orientation,
0:                                      long rowToFetch) throws SqlException
0:   {
0:     netAgent_.resultSetRequest_.writePositioningFetch (
0:       this,
0:       section,
0:       orientation,
0:       rowToFetch);
1:   }
1: 
0:   public void readPositioningFetch_ () throws SqlException
0:   { netAgent_.resultSetReply_.readPositioningFetch (this); }
1: 
0:   public void writeCursorClose_ (Section section) throws SqlException
0:   { netAgent_.resultSetRequest_.writeCursorClose (this, section); }
0:   public void readCursorClose_ () throws SqlException
0:   { netAgent_.resultSetReply_.readCursorClose (this); }
1: }
============================================================================