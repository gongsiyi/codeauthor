1:86ebb44: /*
3:86ebb44: 
1:86ebb44:    Derby - Class
1:86ebb44:        org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest
1:86ebb44: 
1:86ebb44:    Licensed to the Apache Software Foundation (ASF) under one or more
1:86ebb44:    contributor license agreements.  See the NOTICE file distributed with
1:86ebb44:    this work for additional information regarding copyright ownership.
1:86ebb44:    The ASF licenses this file to You under the Apache License, Version 2.0
1:86ebb44:    (the "License"); you may not use this file except in compliance with
1:86ebb44:    the License.  You may obtain a copy of the License at
1:86ebb44: 
1:86ebb44:       http://www.apache.org/licenses/LICENSE-2.0
1:86ebb44: 
1:86ebb44:    Unless required by applicable law or agreed to in writing, software
1:86ebb44:    distributed under the License is distributed on an "AS IS" BASIS,
1:86ebb44:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:86ebb44:    See the License for the specific language governing permissions and
1:86ebb44:    limitations under the License.
1:86ebb44: 
1:86ebb44:  */
1:86ebb44: package org.apache.derbyTesting.functionTests.tests.store;
1:86ebb44: 
1:86ebb44: import java.sql.Connection;
1:86ebb44: import java.sql.DatabaseMetaData;
1:86ebb44: import java.sql.PreparedStatement;
1:86ebb44: import java.sql.ResultSet;
1:86ebb44: import java.sql.SQLException;
1:86ebb44: import java.sql.Statement;
1:86ebb44: import javax.sql.DataSource;
1:86ebb44: import junit.framework.Test;
1:86ebb44: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:86ebb44: import org.apache.derbyTesting.junit.Decorator;
1:86ebb44: import org.apache.derbyTesting.junit.JDBC;
1:86ebb44: import org.apache.derbyTesting.junit.JDBCDataSource;
1:86ebb44: import org.apache.derbyTesting.junit.TestConfiguration;
1:86ebb44: 
1:86ebb44: /**
1:86ebb44:  * Tests that database decryption works, and that various error conditions
1:86ebb44:  * are detected and dealt with.
1:86ebb44:  * <p>
1:86ebb44:  * NOTE: Care must be taken to shut down a database before testing the
1:86ebb44:  * various connection attributes that apply to cryptographic operations, as
1:86ebb44:  * they are typically ignored if the database has already been booted.
1:86ebb44:  */
1:86ebb44: public class DecryptDatabaseTest
1:86ebb44:     extends BaseJDBCTestCase {
1:86ebb44: 
1:86ebb44:     private static final String TABLE = "DECRYPTTABLE";
1:86ebb44:     private static final String BOOTPW = "Thursday";
1:e744e84:     private static final String ALREADY_BOOTED = "01J17";
1:86ebb44:     /** Current encryption algorithm, used when re-encrypting during set up. */
1:86ebb44:     private static String encryptionAlgorithm;
1:86ebb44: 
1:86ebb44:     public DecryptDatabaseTest(String name) {
1:86ebb44:         super(name);
1:86ebb44:     }
1:86ebb44: 
1:86ebb44:     /** Makes sure that the database is encrypted. */
1:86ebb44:     public void setUp()
1:86ebb44:             throws Exception {
1:86ebb44:         super.setUp();
1:86ebb44: 
1:86ebb44:         // Connect.
1:86ebb44:         try {
1:86ebb44:             connect(false, BOOTPW, null).close();
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("Did you change the boot password?", "XJ004", sqle);
1:86ebb44:             // Create the database and save the encryption algorithm.
1:86ebb44:             getConnection();
1:86ebb44:             saveEncryptionAlgorithm();
1:86ebb44:         }
1:86ebb44: 
1:86ebb44:         // Make sure the database is (still) encrypted.
1:86ebb44:         TestConfiguration tc = getTestConfiguration();
1:86ebb44:         tc.shutdownDatabase();
1:86ebb44:         try {
1:86ebb44:             connect(false, null, null);
1:86ebb44:             tc.shutdownDatabase();
1:86ebb44:             // Database has been decrypted. Encrypt it again.
1:86ebb44:             println("encrypting database (" + encryptionAlgorithm + ")");
1:86ebb44:             connect(false, BOOTPW, "dataEncryption=true;encryptionAlgorithm=" +
1:86ebb44:                     encryptionAlgorithm);
1:86ebb44:             tc.shutdownDatabase();
1:86ebb44:             connect(false, null, null);
1:86ebb44:             fail("database encryption failed");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XBM06", sqle);
1:86ebb44:         }
1:86ebb44:     }
1:345f23d: 
1:86ebb44:     /** Stashes away the encryption algorithm such that we can re-encrypt. */
1:86ebb44:     private void saveEncryptionAlgorithm()
1:86ebb44:             throws SQLException {
1:86ebb44:         Statement stmt = createStatement();
1:86ebb44:         ResultSet rs = stmt.executeQuery("values syscs_util." +
1:86ebb44:                 "syscs_get_database_property('encryptionAlgorithm')");
1:86ebb44:         if (rs.next()) {
1:86ebb44:             String alg = rs.getString(1);
1:86ebb44:             if (alg != null && !alg.equals(encryptionAlgorithm)) {
1:86ebb44:                 encryptionAlgorithm = alg;
1:86ebb44:             }
1:86ebb44:             assertFalse(rs.next());
1:86ebb44:         }
1:86ebb44:         rs.close();
1:86ebb44:         stmt.close();
1:86ebb44:     }
1:86ebb44: 
1:86ebb44:     /**
1:86ebb44:      * Tests that the encrypted database cannot be decrypted without the
1:86ebb44:      * boot password.
1:86ebb44:      */
1:86ebb44:     public void testDecryptDatabaseNegative()
1:86ebb44:             throws SQLException {
1:86ebb44:         // Boot with the wrong password, connection attempt should fail.
1:86ebb44:         try {
1:86ebb44:             connect(false, "verywrongpw", null);
1:86ebb44:             fail("connection succeeded with wrong password");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XJ040", sqle);
1:86ebb44:         }
1:86ebb44:         // Boot without password, connection attempt should fail.
1:86ebb44:         try {
1:86ebb44:             connect(false, null, null);
1:86ebb44:             fail("connection succeeded without password");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XBM06", sqle);
1:86ebb44:         }
1:86ebb44: 
1:86ebb44:         // Boot with the wrong password, connection attempt should fail.
1:86ebb44:         try {
1:86ebb44:             connect(true, "verywrongpw", null);
1:86ebb44:             fail("decryption succeeded with wrong password");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XJ040", sqle);
1:86ebb44:         }
1:86ebb44:         // Boot without password, connection attempt should fail.
1:86ebb44:         try {
1:86ebb44:             connect(true, null, null);
1:86ebb44:             fail("decryption succeeded without password");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XBM06", sqle);
1:86ebb44:         }
1:86ebb44:         try {
1:86ebb44:             connect(true, null, null);
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XBM06", sqle);
1:86ebb44:         }
1:86ebb44:         
1:345f23d:         // Bad setting for decryptDatabase
1:345f23d:         try {
1:345f23d:             connect( false, BOOTPW, "decryptDatabase=fred" );
1:345f23d:             fail( "bad decryptDatabase setting not detected" );
1:345f23d:         } catch (SQLException sqle) {
1:345f23d:             assertSQLState("XJ05B", sqle);
1:345f23d:         }
1:345f23d: 
1:86ebb44:         connect(false, BOOTPW, null);
1:86ebb44:     }
1:86ebb44: 
1:86ebb44:     /**
1:86ebb44:      * Tests that the encrypted database can be decrypted.
1:86ebb44:      * <p>
1:86ebb44:      * This is tested by first populating an encrypted database, and then
1:86ebb44:      * accessing the data in the end by booting the database without a boot
1:86ebb44:      * password. We verify that connection attempts with incorrect or missing
1:86ebb44:      * boot passwords before decryption fail.
1:86ebb44:      */
1:86ebb44:     public void testDecryptDatabase()
1:86ebb44:             throws SQLException {
1:86ebb44:         populateDatabase(true, 1000);
1:86ebb44:         getTestConfiguration().shutdownDatabase();
1:86ebb44: 
1:86ebb44:         // Connect to decrypt the database.
1:86ebb44:         Connection con = connect(true, BOOTPW, null);
1:86ebb44:         JDBC.assertNoWarnings(con.getWarnings());
1:86ebb44:         Statement stmt = con.createStatement();
1:86ebb44:         JDBC.assertDrainResults(
1:86ebb44:                 stmt.executeQuery("select * from " + TABLE), 1000);
1:86ebb44:         stmt.close();
1:86ebb44:         con.close();
1:86ebb44:         getTestConfiguration().shutdownDatabase();
1:86ebb44: 
1:86ebb44:         // Boot again without boot password to verify that it works.
1:86ebb44:         con = connect(false, null, null);
1:86ebb44:         stmt = con.createStatement();
1:86ebb44:         JDBC.assertDrainResults(
1:86ebb44:                 stmt.executeQuery("select * from " + TABLE), 1000);
1:86ebb44:         JDBC.assertFullResultSet(
1:86ebb44:                 stmt.executeQuery("select * from " + TABLE +
1:86ebb44:                     " where id <= 6 order by id ASC"),
1:86ebb44:                 new String[][] {{"1"},{"2"},{"3"},{"4"},{"5"},{"6"}});
1:86ebb44:         stmt.close();
1:86ebb44:         con.close();
1:86ebb44:     }
1:86ebb44: 
1:86ebb44:     /**
1:86ebb44:      * Tests that trying to decrypt an already booted database doesn't actually
1:86ebb44:      * decrypt the database.
1:86ebb44:      * <p>
1:86ebb44:      * The internal code isn't set up to deal with decryption/encryption while
1:86ebb44:      * other activities take place concurrently, so crypto operations are only
1:86ebb44:      * performed when booting a database.
1:86ebb44:      */
1:86ebb44:     public void testDecryptOnBootedDatabase()
1:86ebb44:             throws SQLException {
1:86ebb44:         getConnection();
1:e744e84: 
1:e744e84:         // These connection attempts should succeed but raise a warning
1:e744e84:         // that encryption change is not possible while the database is booted.
1:e744e84:         println( "Test warning " + ALREADY_BOOTED );
1:e744e84:         vetChangeWarning( connect( false, BOOTPW, "dataEncryption=true" ) );
1:e744e84:         vetChangeWarning( connect( false, BOOTPW, "newBootPassword=foo" ) );
1:e744e84:         vetChangeWarning( connect( false, BOOTPW, "newEncryptionKey=foo" ) );
1:e744e84:         vetChangeWarning( connect( false, BOOTPW, "decryptDatabase=true" ) );
1:e744e84:         
1:86ebb44:         // Connect to decrypt the database. We expect this to fail since the
1:86ebb44:         // database is already booted. In this case fail means ignored...
1:86ebb44:         connect(true, BOOTPW, null).close();
1:86ebb44:         getTestConfiguration().shutdownDatabase();
1:86ebb44:         try {
1:86ebb44:             connect(false, null, null);
1:86ebb44:             fail("decrypted already booted database");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XBM06", sqle);
1:86ebb44:         }
1:86ebb44:     }
1:e744e84:     private void    vetChangeWarning( Connection conn )
1:e744e84:         throws SQLException
1:e744e84:     {
1:e744e84:         assertWarning( conn, ALREADY_BOOTED );
1:e744e84:         conn.close();
1:e744e84:     }
1:e744e84: 
1:86ebb44: 
1:86ebb44:     /**
1:86ebb44:      * Tests that asking to decrypt an un-encrypted doesn't fail.
1:86ebb44:      */
1:86ebb44:     public void testDecryptUnEncryptedDatabase()
1:86ebb44:             throws SQLException {
1:86ebb44:         // First decrypt the database.
1:86ebb44:         Connection con = connect(true, BOOTPW, null);
1:86ebb44:         JDBC.assertNoWarnings(con.getWarnings());
1:86ebb44:         con.close();
1:86ebb44: 
1:86ebb44:         // Shut down the database.
1:86ebb44:         getTestConfiguration().shutdownDatabase();
1:86ebb44: 
1:86ebb44:         // Specify the decrypt attribute again on the decrypted database.
1:86ebb44:         // We expect that this request is simply ignored.
1:86ebb44:         con = connect(true, null, null);
1:86ebb44:         con.close();
1:86ebb44:     }
1:86ebb44: 
1:86ebb44:     /**
1:86ebb44:      * Tests that conflicting connection attributes are detected and flagged.
1:86ebb44:      */
1:86ebb44:     public void testConflictingConnectionAttributes()
1:86ebb44:             throws SQLException {
1:86ebb44:         // Encryption attributes are typically ignored if the database has
1:86ebb44:         // already been booted.
1:86ebb44:         try {
1:86ebb44:             connect(true, BOOTPW, "newBootPassword=MondayMilk");
1:86ebb44:             fail("connected with conflicting attributes (newBootPassword)");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XJ048", sqle);
1:86ebb44:         }
1:86ebb44:         try {
1:86ebb44:             connect(true, BOOTPW, "newEncryptionKey=6162636465666768");
1:86ebb44:             fail("connected with conflicting attributes (newEncryptionKey)");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XJ048", sqle);
1:86ebb44:         }
1:86ebb44:         try {
1:86ebb44:             connect(true, BOOTPW, "createFrom=./nonexistdb");
1:86ebb44:             fail("connected with conflicting attributes (createFrom)");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XJ081", sqle);
1:86ebb44:         }
1:86ebb44:         try {
1:86ebb44:             connect(true, BOOTPW, "restoreFrom=./nonexistdb");
1:86ebb44:             fail("connected with conflicting attributes (restoreFrom)");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XJ081", sqle);
1:86ebb44:         }
1:86ebb44:         try {
1:86ebb44:             connect(true, BOOTPW, "rollForwardRecoveryFrom=./nonexistdb");
1:86ebb44:             fail("connected with conflicting attrs (rollForwardRecoveryFrom)");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XJ081", sqle);
1:86ebb44:         }
1:86ebb44:         // Decrypt the database, then specify both encryption and decryption.
1:86ebb44:         connect(true, BOOTPW, null);
1:86ebb44:         getTestConfiguration().shutdownDatabase();
1:86ebb44:         try {
1:86ebb44:             connect(true, BOOTPW, "dataEncryption=true");
1:86ebb44:             fail("connected with conflicting attributes (dataEncryption)");
1:86ebb44:         } catch (SQLException sqle) {
1:86ebb44:             assertSQLState("XJ048", sqle);
1:86ebb44:         }
1:86ebb44:     }
1:86ebb44: 
1:86ebb44:     /**
1:86ebb44:      * Attempts to connect to the default database with the specified
1:86ebb44:      * attributes.
1:86ebb44:      *
1:86ebb44:      * @param decrypt whether or not to request database decryption
1:86ebb44:      * @param bootPassword boot password, may be {@code null}
1:86ebb44:      * @param otherAttrs additional boot attributes
1:86ebb44:      * @return A connection.
1:86ebb44:      * @throws SQLException if the connection cannot be established
1:86ebb44:      */
1:86ebb44:     private Connection connect(boolean decrypt,
1:86ebb44:                                String bootPassword,
1:86ebb44:                                String otherAttrs)
1:86ebb44:             throws SQLException {
1:86ebb44:         DataSource ds = JDBCDataSource.getDataSource();
1:86ebb44:         JDBCDataSource.clearStringBeanProperty(ds, "connectionAttributes");
1:86ebb44:         StringBuffer attrs = new StringBuffer();
1:86ebb44:         if (decrypt) {
1:86ebb44:             attrs.append("decryptDatabase=true").append(';');
1:86ebb44:         }
1:86ebb44:         if (bootPassword != null) {
1:86ebb44:             attrs.append("bootPassword=").append(bootPassword).append(';');
1:86ebb44:         }
1:86ebb44:         if (otherAttrs != null) {
1:86ebb44:             attrs.append(otherAttrs).append(';');
1:86ebb44:         }
1:86ebb44:         if (attrs.length() > 0) {
1:86ebb44:             JDBCDataSource.setBeanProperty(
1:86ebb44:                     ds, "connectionAttributes", attrs.toString());
1:86ebb44:         }
1:86ebb44:         println("connectionAttributes: " +
1:86ebb44:                 (attrs.length() == 0 ? "<empty>" : attrs.toString()));
1:86ebb44:         return ds.getConnection();
1:86ebb44:     }
1:86ebb44: 
1:86ebb44:     /**
1:86ebb44:      * Populates the database (simple one-column table).
1:86ebb44:      *
1:86ebb44:      * @param init if {@code true} the table will be created or reset (the
1:86ebb44:      *      identity column will also be reset)
1:86ebb44:      * @param rows number of rows to insert
1:86ebb44:      */
1:86ebb44:     private void populateDatabase(boolean init, int rows)
1:86ebb44:             throws SQLException {
1:86ebb44:         setAutoCommit(false);
1:86ebb44:         DatabaseMetaData meta = getConnection().getMetaData();
1:86ebb44:         ResultSet rs = meta.getTables(null, null, TABLE, null);
1:86ebb44:         boolean hasTable = rs.next();
1:86ebb44:         assertFalse(rs.next());
1:86ebb44:         rs.close();
1:86ebb44:         if (init) {
1:86ebb44:             Statement stmt = createStatement();
1:86ebb44:             if (hasTable) {
1:86ebb44:                 println("deleting rows from table " + TABLE);
1:86ebb44:                 stmt.executeUpdate("delete from " + TABLE);
1:86ebb44:                 println("resetting identity column");
1:86ebb44:                 stmt.executeUpdate("ALTER TABLE " + TABLE + " ALTER COLUMN " +
1:86ebb44:                         "id RESTART WITH 1");
1:86ebb44:             } else {
1:86ebb44:                 println("creating table " + TABLE);
1:86ebb44:                 stmt.executeUpdate("create table " + TABLE + " (" +
1:86ebb44:                         "id int generated always as identity)");
1:86ebb44:             }
1:86ebb44:         }
1:86ebb44:         println("populating database");
1:86ebb44:         PreparedStatement ps = prepareStatement(
1:86ebb44:                 "insert into " + TABLE + " values (DEFAULT)");
1:86ebb44:         for (int i=0; i < rows; i++) {
1:86ebb44:             ps.executeUpdate();
1:86ebb44:         }
1:86ebb44:         commit();
1:86ebb44:         setAutoCommit(true);
1:86ebb44:     }
1:86ebb44: 
1:86ebb44:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("DecryptDatabaseTest suite");
1:86ebb44:         suite.addTest(wrapTest());
1:86ebb44:         suite.addTest(wrapTest("AES/OFB/NoPadding"));
1:86ebb44:         return suite;
1:86ebb44:     }
1:86ebb44: 
1:86ebb44:     /** Wraps the default set of tests in the default encryption setup. */
1:86ebb44:     private static Test wrapTest() {
1:86ebb44:         return Decorator.encryptedDatabaseBpw(
1:86ebb44:                           TestConfiguration.embeddedSuite(
1:86ebb44:                               DecryptDatabaseTest.class),
1:86ebb44:                           BOOTPW);
1:86ebb44:     }
1:86ebb44: 
1:86ebb44:     /**
1:86ebb44:      * Wraps the default set of tests in the specified encryption setup.
1:86ebb44:      *
1:86ebb44:      * @param encryptionMethod encryption specification, for instance
1:86ebb44:      *      "AES/OFB/NoPadding"
1:86ebb44:      */
1:86ebb44:     private static Test wrapTest(String encryptionMethod) {
1:86ebb44:         return Decorator.encryptedDatabaseBpw(
1:86ebb44:                           TestConfiguration.embeddedSuite(
1:86ebb44:                               DecryptDatabaseTest.class),
1:86ebb44:                           encryptionMethod,
1:86ebb44:                           BOOTPW);
1:86ebb44:     }
1:86ebb44: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("DecryptDatabaseTest suite");
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e744e84
/////////////////////////////////////////////////////////////////////////
1:     private static final String ALREADY_BOOTED = "01J17";
/////////////////////////////////////////////////////////////////////////
1: 
1:         // These connection attempts should succeed but raise a warning
1:         // that encryption change is not possible while the database is booted.
1:         println( "Test warning " + ALREADY_BOOTED );
1:         vetChangeWarning( connect( false, BOOTPW, "dataEncryption=true" ) );
1:         vetChangeWarning( connect( false, BOOTPW, "newBootPassword=foo" ) );
1:         vetChangeWarning( connect( false, BOOTPW, "newEncryptionKey=foo" ) );
1:         vetChangeWarning( connect( false, BOOTPW, "decryptDatabase=true" ) );
1:         
/////////////////////////////////////////////////////////////////////////
1:     private void    vetChangeWarning( Connection conn )
1:         throws SQLException
1:     {
1:         assertWarning( conn, ALREADY_BOOTED );
1:         conn.close();
1:     }
1: 
commit:345f23d
/////////////////////////////////////////////////////////////////////////
1:         
1:         // Bad setting for decryptDatabase
1:         try {
1:             connect( false, BOOTPW, "decryptDatabase=fred" );
1:             fail( "bad decryptDatabase setting not detected" );
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ05B", sqle);
1:         }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:86ebb44
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class
1:        org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import javax.sql.DataSource;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.Decorator;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Tests that database decryption works, and that various error conditions
1:  * are detected and dealt with.
1:  * <p>
1:  * NOTE: Care must be taken to shut down a database before testing the
1:  * various connection attributes that apply to cryptographic operations, as
1:  * they are typically ignored if the database has already been booted.
1:  */
1: public class DecryptDatabaseTest
1:     extends BaseJDBCTestCase {
1: 
1:     private static final String TABLE = "DECRYPTTABLE";
1:     private static final String BOOTPW = "Thursday";
1:     /** Current encryption algorithm, used when re-encrypting during set up. */
1:     private static String encryptionAlgorithm;
1: 
1:     public DecryptDatabaseTest(String name) {
1:         super(name);
1:     }
1: 
1:     /** Makes sure that the database is encrypted. */
1:     public void setUp()
1:             throws Exception {
1:         super.setUp();
1: 
1:         // Connect.
1:         try {
1:             connect(false, BOOTPW, null).close();
1:         } catch (SQLException sqle) {
1:             assertSQLState("Did you change the boot password?", "XJ004", sqle);
1:             // Create the database and save the encryption algorithm.
1:             getConnection();
1:             saveEncryptionAlgorithm();
1:         }
1: 
1:         // Make sure the database is (still) encrypted.
1:         TestConfiguration tc = getTestConfiguration();
1:         tc.shutdownDatabase();
1:         try {
1:             connect(false, null, null);
1:             tc.shutdownDatabase();
1:             // Database has been decrypted. Encrypt it again.
1:             println("encrypting database (" + encryptionAlgorithm + ")");
1:             connect(false, BOOTPW, "dataEncryption=true;encryptionAlgorithm=" +
1:                     encryptionAlgorithm);
1:             tc.shutdownDatabase();
1:             connect(false, null, null);
1:             fail("database encryption failed");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XBM06", sqle);
1:         }
1:     }
1: 
1:     /** Stashes away the encryption algorithm such that we can re-encrypt. */
1:     private void saveEncryptionAlgorithm()
1:             throws SQLException {
1:         Statement stmt = createStatement();
1:         ResultSet rs = stmt.executeQuery("values syscs_util." +
1:                 "syscs_get_database_property('encryptionAlgorithm')");
1:         if (rs.next()) {
1:             String alg = rs.getString(1);
1:             if (alg != null && !alg.equals(encryptionAlgorithm)) {
1:                 encryptionAlgorithm = alg;
1:             }
1:             assertFalse(rs.next());
1:         }
1:         rs.close();
1:         stmt.close();
1:     }
1: 
1:     /**
1:      * Tests that the encrypted database cannot be decrypted without the
1:      * boot password.
1:      */
1:     public void testDecryptDatabaseNegative()
1:             throws SQLException {
1:         // Boot with the wrong password, connection attempt should fail.
1:         try {
1:             connect(false, "verywrongpw", null);
1:             fail("connection succeeded with wrong password");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ040", sqle);
1:         }
1:         // Boot without password, connection attempt should fail.
1:         try {
1:             connect(false, null, null);
1:             fail("connection succeeded without password");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XBM06", sqle);
1:         }
1: 
1:         // Boot with the wrong password, connection attempt should fail.
1:         try {
1:             connect(true, "verywrongpw", null);
1:             fail("decryption succeeded with wrong password");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ040", sqle);
1:         }
1:         // Boot without password, connection attempt should fail.
1:         try {
1:             connect(true, null, null);
1:             fail("decryption succeeded without password");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XBM06", sqle);
1:         }
1:         try {
1:             connect(true, null, null);
1:         } catch (SQLException sqle) {
1:             assertSQLState("XBM06", sqle);
1:         }
1:         connect(false, BOOTPW, null);
1:     }
1: 
1:     /**
1:      * Tests that the encrypted database can be decrypted.
1:      * <p>
1:      * This is tested by first populating an encrypted database, and then
1:      * accessing the data in the end by booting the database without a boot
1:      * password. We verify that connection attempts with incorrect or missing
1:      * boot passwords before decryption fail.
1:      */
1:     public void testDecryptDatabase()
1:             throws SQLException {
1:         populateDatabase(true, 1000);
1:         getTestConfiguration().shutdownDatabase();
1: 
1:         // Connect to decrypt the database.
1:         Connection con = connect(true, BOOTPW, null);
1:         JDBC.assertNoWarnings(con.getWarnings());
1:         Statement stmt = con.createStatement();
1:         JDBC.assertDrainResults(
1:                 stmt.executeQuery("select * from " + TABLE), 1000);
1:         stmt.close();
1:         con.close();
1:         getTestConfiguration().shutdownDatabase();
1: 
1:         // Boot again without boot password to verify that it works.
1:         con = connect(false, null, null);
1:         stmt = con.createStatement();
1:         JDBC.assertDrainResults(
1:                 stmt.executeQuery("select * from " + TABLE), 1000);
1:         JDBC.assertFullResultSet(
1:                 stmt.executeQuery("select * from " + TABLE +
1:                     " where id <= 6 order by id ASC"),
1:                 new String[][] {{"1"},{"2"},{"3"},{"4"},{"5"},{"6"}});
1:         stmt.close();
1:         con.close();
1:     }
1: 
1:     /**
1:      * Tests that trying to decrypt an already booted database doesn't actually
1:      * decrypt the database.
1:      * <p>
1:      * The internal code isn't set up to deal with decryption/encryption while
1:      * other activities take place concurrently, so crypto operations are only
1:      * performed when booting a database.
1:      */
1:     public void testDecryptOnBootedDatabase()
1:             throws SQLException {
1:         getConnection();
1:         // Connect to decrypt the database. We expect this to fail since the
1:         // database is already booted. In this case fail means ignored...
1:         connect(true, BOOTPW, null).close();
1:         getTestConfiguration().shutdownDatabase();
1:         try {
1:             connect(false, null, null);
1:             fail("decrypted already booted database");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XBM06", sqle);
1:         }
1:     }
1: 
1:     /**
1:      * Tests that asking to decrypt an un-encrypted doesn't fail.
1:      */
1:     public void testDecryptUnEncryptedDatabase()
1:             throws SQLException {
1:         // First decrypt the database.
1:         Connection con = connect(true, BOOTPW, null);
1:         JDBC.assertNoWarnings(con.getWarnings());
1:         con.close();
1: 
1:         // Shut down the database.
1:         getTestConfiguration().shutdownDatabase();
1: 
1:         // Specify the decrypt attribute again on the decrypted database.
1:         // We expect that this request is simply ignored.
1:         con = connect(true, null, null);
1:         con.close();
1:     }
1: 
1:     /**
1:      * Tests that conflicting connection attributes are detected and flagged.
1:      */
1:     public void testConflictingConnectionAttributes()
1:             throws SQLException {
1:         // Encryption attributes are typically ignored if the database has
1:         // already been booted.
1:         try {
1:             connect(true, BOOTPW, "newBootPassword=MondayMilk");
1:             fail("connected with conflicting attributes (newBootPassword)");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ048", sqle);
1:         }
1:         try {
1:             connect(true, BOOTPW, "newEncryptionKey=6162636465666768");
1:             fail("connected with conflicting attributes (newEncryptionKey)");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ048", sqle);
1:         }
1:         try {
1:             connect(true, BOOTPW, "createFrom=./nonexistdb");
1:             fail("connected with conflicting attributes (createFrom)");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ081", sqle);
1:         }
1:         try {
1:             connect(true, BOOTPW, "restoreFrom=./nonexistdb");
1:             fail("connected with conflicting attributes (restoreFrom)");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ081", sqle);
1:         }
1:         try {
1:             connect(true, BOOTPW, "rollForwardRecoveryFrom=./nonexistdb");
1:             fail("connected with conflicting attrs (rollForwardRecoveryFrom)");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ081", sqle);
1:         }
1:         // Decrypt the database, then specify both encryption and decryption.
1:         connect(true, BOOTPW, null);
1:         getTestConfiguration().shutdownDatabase();
1:         try {
1:             connect(true, BOOTPW, "dataEncryption=true");
1:             fail("connected with conflicting attributes (dataEncryption)");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ048", sqle);
1:         }
1:     }
1: 
1:     /**
1:      * Attempts to connect to the default database with the specified
1:      * attributes.
1:      *
1:      * @param decrypt whether or not to request database decryption
1:      * @param bootPassword boot password, may be {@code null}
1:      * @param otherAttrs additional boot attributes
1:      * @return A connection.
1:      * @throws SQLException if the connection cannot be established
1:      */
1:     private Connection connect(boolean decrypt,
1:                                String bootPassword,
1:                                String otherAttrs)
1:             throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSource();
1:         JDBCDataSource.clearStringBeanProperty(ds, "connectionAttributes");
1:         StringBuffer attrs = new StringBuffer();
1:         if (decrypt) {
1:             attrs.append("decryptDatabase=true").append(';');
1:         }
1:         if (bootPassword != null) {
1:             attrs.append("bootPassword=").append(bootPassword).append(';');
1:         }
1:         if (otherAttrs != null) {
1:             attrs.append(otherAttrs).append(';');
1:         }
1:         if (attrs.length() > 0) {
1:             JDBCDataSource.setBeanProperty(
1:                     ds, "connectionAttributes", attrs.toString());
1:         }
1:         println("connectionAttributes: " +
1:                 (attrs.length() == 0 ? "<empty>" : attrs.toString()));
1:         return ds.getConnection();
1:     }
1: 
1:     /**
1:      * Populates the database (simple one-column table).
1:      *
1:      * @param init if {@code true} the table will be created or reset (the
1:      *      identity column will also be reset)
1:      * @param rows number of rows to insert
1:      */
1:     private void populateDatabase(boolean init, int rows)
1:             throws SQLException {
1:         setAutoCommit(false);
1:         DatabaseMetaData meta = getConnection().getMetaData();
1:         ResultSet rs = meta.getTables(null, null, TABLE, null);
1:         boolean hasTable = rs.next();
1:         assertFalse(rs.next());
1:         rs.close();
1:         if (init) {
1:             Statement stmt = createStatement();
1:             if (hasTable) {
1:                 println("deleting rows from table " + TABLE);
1:                 stmt.executeUpdate("delete from " + TABLE);
1:                 println("resetting identity column");
1:                 stmt.executeUpdate("ALTER TABLE " + TABLE + " ALTER COLUMN " +
1:                         "id RESTART WITH 1");
1:             } else {
1:                 println("creating table " + TABLE);
1:                 stmt.executeUpdate("create table " + TABLE + " (" +
1:                         "id int generated always as identity)");
1:             }
1:         }
1:         println("populating database");
1:         PreparedStatement ps = prepareStatement(
1:                 "insert into " + TABLE + " values (DEFAULT)");
1:         for (int i=0; i < rows; i++) {
1:             ps.executeUpdate();
1:         }
1:         commit();
1:         setAutoCommit(true);
1:     }
1: 
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("DecryptDatabaseTest suite");
1:         suite.addTest(wrapTest());
1:         suite.addTest(wrapTest("AES/OFB/NoPadding"));
1:         return suite;
1:     }
1: 
1:     /** Wraps the default set of tests in the default encryption setup. */
1:     private static Test wrapTest() {
1:         return Decorator.encryptedDatabaseBpw(
1:                           TestConfiguration.embeddedSuite(
1:                               DecryptDatabaseTest.class),
1:                           BOOTPW);
1:     }
1: 
1:     /**
1:      * Wraps the default set of tests in the specified encryption setup.
1:      *
1:      * @param encryptionMethod encryption specification, for instance
1:      *      "AES/OFB/NoPadding"
1:      */
1:     private static Test wrapTest(String encryptionMethod) {
1:         return Decorator.encryptedDatabaseBpw(
1:                           TestConfiguration.embeddedSuite(
1:                               DecryptDatabaseTest.class),
1:                           encryptionMethod,
1:                           BOOTPW);
1:     }
1: }
============================================================================