1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.FormatIdUtil
1:26d0c8e: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
1:26d0c8e:  */
1:26d0c8e: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:26d0c8e: 
1:eac0369: import java.io.DataInput;
1:eac0369: import java.io.DataOutput;
1:eac0369: import java.io.IOException;
1:26d0c8e: 
2:26d0c8e: /**
1:eac0369:   Utility class with static methods for constructing and reading the byte array
1:eac0369:   representation of format id's.
1:26d0c8e: 
1:eac0369:   <P>This utility supports a number of families of format ids. The byte array
1:eac0369:   form of each family is a different length. In all cases the first two bits
1:eac0369:   of the first byte indicate the family for an id. The list below describes
1:eac0369:   each family and gives its two bit identifier in parens.
12:eac0369: 
1:eac0369:   <UL> 
1:eac0369:   <LI> (0) - The format id is a one byte number between 0 and 63 inclusive. 
1:eac0369:              The byte[] encoding fits in one byte.
1:eac0369:   <LI> (1) - The format id is a two byte number between 16384 to 32767
1:eac0369:              inclusive. The byte[] encoding stores the high order byte
1:eac0369: 			 first. 
1:eac0369:   <LI> (2) - The format id is four byte number between 2147483648 and
1:eac0369:              3221225471 inclusive. The byte[] encoding stores the high
1:eac0369: 			 order byte first.
1:eac0369:   <LI> (3) - Future expansion.
1:eac0369:   </UL>
1:26d0c8e:  */
1:eac0369: public final class FormatIdUtil
6:26d0c8e: {
1:26d0c8e: 
1:eac0369: 	private FormatIdUtil() {
1:26d0c8e: 	}
1:26d0c8e: 
1:eac0369: 	public static int getFormatIdByteLength(int formatId) {
1:eac0369: 			return 2;
1:26d0c8e: 	}
1:26d0c8e: 
1:eac0369: 	public static void writeFormatIdInteger(DataOutput out, int formatId) throws IOException {
1:eac0369: 		out.writeShort(formatId);
1:26d0c8e: 	}
1:26d0c8e: 
1:eac0369: 	public static int readFormatIdInteger(DataInput in)
1:eac0369: 		throws IOException {
1:26d0c8e: 
1:eac0369: 		return in.readUnsignedShort();
1:26d0c8e: 	}
1:26d0c8e: 
1:eac0369: 	public static int readFormatIdInteger(byte[] data) {
1:eac0369: 
1:eac0369: 		int a = data[0];
1:eac0369: 		int b = data[1];
1:eac0369: 		return (((a & 0xff) << 8) | (b & 0xff));
1:26d0c8e: 	}
1:eac0369: 
1:eac0369: 	public static String formatIdToString(int fmtId) {
1:eac0369: 
1:eac0369: 		return Integer.toString(fmtId);
1:26d0c8e: 	}
1:26d0c8e: 
7:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:47e1295
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:26d0c8e
/////////////////////////////////////////////////////////////////////////
0: 	private	static	final	int		BYTE_MASK = 0xFF;
0: 	private	static	final	int		NIBBLE_MASK = 0xF;
0: 	private	static	final	int		NIBBLE_SHIFT = 4;
0: 	private	static	final	int		HEX_RADIX = 16;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0: 	 * <p>
0: 	 * Encode a byte array as a string.
0: 	 * </p>
1: 	 */
0: 	public	static	String	toString( byte[] written, int count )
1: 	{
0: 		char[]	chars = new char[ count * 2 ];
0: 		int		charIdx = 0;
1: 
0: 		for ( int i = 0; i < count; i++ )
1: 		{
0: 			int		current = written[ i ] & BYTE_MASK;
0: 			int		lowNibble = current & NIBBLE_MASK;
0: 			int		highNibble = current >>> NIBBLE_SHIFT;
1: 
0: 			chars[ charIdx++ ] = encodeNibble( lowNibble );
0: 			chars[ charIdx++ ] = encodeNibble( highNibble );
1: 		}
1: 
0: 		return new String( chars );
1: 	}
1: 
1: 	/**
0: 	 * <p>
0: 	 * Decode a byte array which had been encoded as a string.
0: 	 * </p>
1: 	 */
0: 	public	static	byte[]	fromString( String objString )
1: 	{
0: 		char[]	chars = objString.toCharArray();
0: 		int		count = chars.length;
0: 		byte[]	bytes = new byte[ count / 2 ];
0: 		int		byteIdx = 0;
1: 
0: 		for ( int i = 0; i < count; i = i + 2 )
1: 		{
0: 			int lowNibble = decodeNibble( chars[ i ] );
0: 			int highNibble = decodeNibble( chars[ i + 1 ] );
1: 
0: 			bytes[ byteIdx++ ] = (byte) ( ( highNibble << NIBBLE_SHIFT ) | lowNibble );
1: 		}
1: 
0: 		return bytes;
1: 	}
1: 
0: 	private	static	char	encodeNibble( int nibble )
1: 	{
0: 		return Character.forDigit( nibble, HEX_RADIX );
1: 	}
1: 
0: 	private	static	int		decodeNibble( char c )
1: 	{
0: 		return Character.digit( c, HEX_RADIX );
1: 	}
1:     
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.FormatIdUtil
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
0:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
0: /**
1:   Utility class with static methods for constructing and reading the byte array
1:   representation of format id's.
1: 
1:   <P>This utility supports a number of families of format ids. The byte array
1:   form of each family is a different length. In all cases the first two bits
1:   of the first byte indicate the family for an id. The list below describes
1:   each family and gives its two bit identifier in parens.
1: 
1:   <UL> 
1:   <LI> (0) - The format id is a one byte number between 0 and 63 inclusive. 
1:              The byte[] encoding fits in one byte.
1:   <LI> (1) - The format id is a two byte number between 16384 to 32767
1:              inclusive. The byte[] encoding stores the high order byte
1: 			 first. 
1:   <LI> (2) - The format id is four byte number between 2147483648 and
1:              3221225471 inclusive. The byte[] encoding stores the high
1: 			 order byte first.
1:   <LI> (3) - Future expansion.
1:   </UL>
0:  */
1: public final class FormatIdUtil
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	private FormatIdUtil() {
1: 	}
1: 
1: 	public static int getFormatIdByteLength(int formatId) {
1: 			return 2;
1: 	}
1: 
1: 	public static void writeFormatIdInteger(DataOutput out, int formatId) throws IOException {
1: 		out.writeShort(formatId);
1: 	}
1: 
1: 	public static int readFormatIdInteger(DataInput in)
1: 		throws IOException {
1: 
1: 		return in.readUnsignedShort();
1: 	}
1: 
1: 	public static int readFormatIdInteger(byte[] data) {
1: 
1: 		int a = data[0];
1: 		int b = data[1];
1: 		return (((a & 0xff) << 8) | (b & 0xff));
1: 	}
1: 
1: 	public static String formatIdToString(int fmtId) {
1: 
1: 		return Integer.toString(fmtId);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
0: import java.io.IOException;
0: 
0: /**
0:   Utility class with static methods for constructing and reading the byte array
0:   representation of format id's.
0: 
0:   <P>This utility supports a number of families of format ids. The byte array
0:   form of each family is a different length. In all cases the first two bits
0:   of the first byte indicate the family for an id. The list below describes
0:   each family and gives its two bit identifier in parens.
0: 
0:   <UL> 
0:   <LI> (0) - The format id is a one byte number between 0 and 63 inclusive. 
0:              The byte[] encoding fits in one byte.
0:   <LI> (1) - The format id is a two byte number between 16384 to 32767
0:              inclusive. The byte[] encoding stores the high order byte
0: 			 first. 
0:   <LI> (2) - The format id is four byte number between 2147483648 and
0:              3221225471 inclusive. The byte[] encoding stores the high
0: 			 order byte first.
0:   <LI> (3) - Future expansion.
0:   </UL>
0:  */
0: public final class FormatIdUtil
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	private FormatIdUtil() {
0: 	}
0: 
0: 	public static int getFormatIdByteLength(int formatId) {
0: 			return 2;
0: 	}
0: 
0: 	public static void writeFormatIdInteger(DataOutput out, int formatId) throws IOException {
0: 		out.writeShort(formatId);
0: 	}
0: 
0: 	public static int readFormatIdInteger(DataInput in)
0: 		throws IOException {
0: 
0: 		return in.readUnsignedShort();
0: 	}
0: 
0: 	public static int readFormatIdInteger(byte[] data) {
0: 
0: 		int a = data[0];
0: 		int b = data[1];
0: 		return (((a & 0xff) << 8) | (b & 0xff));
0: 	}
0: 
0: 	public static String formatIdToString(int fmtId) {
0: 
0: 		return Integer.toString(fmtId);
0: 	}
0: }
============================================================================