1:bce78c9: /*
1:bce78c9: 
1:bce78c9:    Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.helpers.DisposableIndexStatistics
1:bce78c9: 
1:bce78c9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:bce78c9:    contributor license agreements.  See the NOTICE file distributed with
1:bce78c9:    this work for additional information regarding copyright ownership.
1:bce78c9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:bce78c9:    (the "License"); you may not use this file except in compliance with
1:bce78c9:    the License.  You may obtain a copy of the License at
1:bce78c9: 
1:bce78c9:       http://www.apache.org/licenses/LICENSE-2.0
1:bce78c9: 
1:bce78c9:    Unless required by applicable law or agreed to in writing, software
1:bce78c9:    distributed under the License is distributed on an "AS IS" BASIS,
1:bce78c9:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bce78c9:    See the License for the specific language governing permissions and
1:bce78c9:    limitations under the License.
1:bce78c9: 
1:bce78c9:  */
1:bce78c9: package org.apache.derbyTesting.functionTests.tests.upgradeTests.helpers;
1:bce78c9: 
1:bce78c9: import java.sql.Connection;
1:bce78c9: import java.sql.PreparedStatement;
1:bce78c9: import java.sql.SQLException;
1:bce78c9: import java.sql.Statement;
1:bce78c9: import java.util.ArrayList;
1:bce78c9: import java.util.Arrays;
1:bce78c9: import java.util.List;
1:bce78c9: 
1:bce78c9: import junit.framework.Assert;
1:bce78c9: 
1:6be56bc: import org.apache.derbyTesting.junit.DerbyVersion;
1:bce78c9: import org.apache.derbyTesting.junit.IndexStatsUtil;
1:bce78c9: 
1:bce78c9: /**
1:bce78c9:  * Helper class encapsulating logic used in the upgrade test for testing
1:bce78c9:  * functionality dropping, and skipping generation of, disposable statistics
1:bce78c9:  * entries.
1:bce78c9:  */
1:bce78c9: public class DisposableIndexStatistics {
1:bce78c9: 
1:3574e10:     /**
1:3574e10:      * A row count currently chosen at will.
1:3574e10:      * <p>
1:3574e10:      * Note that if being used for testing the automatic istat daemon, the
1:3574e10:      * number of rows must be sufficiently high to trigger statistics creation,
1:3574e10:      * and likewise for the deltas when adding more rows to trigger an update.
1:3574e10:      */
1:bce78c9:     private static final int ROW_COUNT = 2000;
1:bce78c9: 
1:6be56bc:     private final DerbyVersion oldVersion;
1:bce78c9:     private final Connection con;
1:bce78c9:     private final String tbl;
1:bce78c9:     private final String fktbl;
1:bce78c9:     private final String pktbl;
1:bce78c9: 
1:bce78c9:     /**
1:bce78c9:      * Creates a new helper instance using the given connection and table.
1:bce78c9:      *
1:bce78c9:      * @param con connection
1:bce78c9:      * @param tableName base table name
1:bce78c9:      */
1:6be56bc:     public DisposableIndexStatistics(DerbyVersion oldVersion,
1:6be56bc:                                      Connection con,
1:6be56bc:                                      String tableName) {
1:6be56bc:         this.oldVersion = oldVersion;
1:bce78c9:         this.con = con;
1:bce78c9:         this.tbl = tableName;
1:bce78c9:         this.fktbl = tableName + "_FK";
1:bce78c9:         this.pktbl = tableName + "_PK_2COL";
1:bce78c9:     }
1:6be56bc: 
1:bce78c9:     /** Creates and populates the test tables. */
1:bce78c9:     public void createAndPopulateTables()
1:bce78c9:             throws SQLException {
1:bce78c9:         con.setAutoCommit(true);
1:bce78c9:         Statement stmt = con.createStatement();
1:bce78c9:         // Populate the tables first, then add the indexes/constraints.
1:bce78c9:         // This ensure the statistics are actually created.
1:bce78c9:         // Statistics: two entries due to two columns in the index.
1:bce78c9:         stmt.executeUpdate("create table " + pktbl + "( " +
1:bce78c9:                     "id1 int generated always as identity, " +
1:bce78c9:                     "id2 int not null" +
1:bce78c9:                 ")");
1:bce78c9:         // Statistics: zero entries (single-column primary key), one without
1:bce78c9:         //             optimization logic.
1:bce78c9:         stmt.executeUpdate("create table " + fktbl + "( " +
1:bce78c9:                     "id int not null generated always as identity" +
1:bce78c9:                 ")");
1:bce78c9:         // Statistics: three with DERBY-5681 fixed and optimization,
1:bce78c9:         //             otherwise five.
1:bce78c9:         stmt.executeUpdate("create table " + tbl + "( " +
1:bce78c9:                     "id int not null generated always as identity, " +
1:bce78c9:                     "fk_dropped int not null, " +
1:bce78c9:                     "fk_self int, " +
1:bce78c9:                     "fk_self_notnull int not null, " +
1:bce78c9:                     "nonunique int" +
1:bce78c9:                 ")");
1:bce78c9: 
1:bce78c9:         // Insert data
1:bce78c9:         insertData(con);
1:bce78c9: 
1:bce78c9:         IndexStatsUtil stats = new IndexStatsUtil(con);
1:bce78c9:         // Add constraints
1:bce78c9:         stmt.executeUpdate("alter table " + pktbl + " add constraint " +
1:bce78c9:                 "PK_TWOCOL_PKTAB primary key (id1, id2)");
1:bce78c9:         stats.getStatsTable(pktbl, 2);
1:bce78c9:         stmt.executeUpdate("alter table " + fktbl + " add constraint " +
1:bce78c9:                 "PK_FKTAB primary key (id)");
1:bce78c9:         stats.getStatsTable(fktbl, 1);
1:bce78c9:         stmt.executeUpdate("alter table " + tbl + " add constraint " +
1:bce78c9:                 "PK_MAIN primary key (id)");
1:bce78c9:         stats.getStatsTable(tbl, 1);
1:bce78c9:         stmt.executeUpdate("create index DUPS_MAIN on " + tbl + "(nonunique)");
1:bce78c9:         stats.getStatsTable(tbl, 2);
1:bce78c9:         stmt.executeUpdate("alter table " + tbl + " add constraint " +
1:bce78c9:                 "FKS_MAIN foreign key (fk_self) references " + tbl + "(id)");
1:bce78c9:         stats.getStatsTable(tbl, 3);
1:bce78c9:         stmt.executeUpdate("alter table " + tbl + " add constraint " +
1:bce78c9:                 "FKSNN_MAIN foreign key (fk_self_notnull) references " +
1:bce78c9:                 tbl + "(id)");
1:bce78c9:         stats.getStatsTable(tbl, 4);
1:bce78c9: 
1:bce78c9:         int preFkAddition = stats.getStatsTable(tbl).length;
1:bce78c9:         // This doesn't trigger DERBY-5681.
1:bce78c9:         stmt.executeUpdate("alter table " + tbl + " add constraint " +
1:bce78c9:                 "fk_to_be_dropped foreign key (fk_dropped) " +
1:bce78c9:                 "references " + fktbl + "(id)");
2:bce78c9:         Assert.assertTrue(stats.getStatsTable(tbl).length == preFkAddition +1);
1:bce78c9:         stmt.executeUpdate("alter table " + tbl + " drop constraint " +
1:bce78c9:                 "fk_to_be_dropped");
1:bce78c9:         Assert.assertTrue(stats.getStatsTable(tbl).length == preFkAddition);
1:bce78c9: 
1:bce78c9:         // Trigger DERBY-5681.
1:bce78c9:         stmt.executeUpdate("alter table " + tbl + " add constraint " +
1:bce78c9:                 "fk_on_pk foreign key (id) " +
1:bce78c9:                 "references " + fktbl + "(id)");
1:bce78c9:         stmt.executeUpdate("call syscs_util.syscs_update_statistics(" +
1:bce78c9:                 "'APP', '" + tbl + "', null)");
1:bce78c9:         Assert.assertTrue(stats.getStatsTable(tbl).length == preFkAddition +1);
1:bce78c9:         stmt.executeUpdate("alter table " + tbl + " drop constraint " +
1:bce78c9:                 "fk_on_pk");
1:bce78c9:         // Derby failed to drop the statistics when the constraint got dropped.
1:6be56bc:         // DERBY-5681: Originally fixed in 10.9, but has now been backported
1:6be56bc:         //      all the way back to 10.3.
1:6be56bc:         int tableStatsCount = stats.getStatsTable(tbl).length;
1:6be56bc:         if (hasDerby5681Bug(oldVersion)) {
1:6be56bc:             Assert.assertEquals(preFkAddition +1, tableStatsCount);
1:6be56bc:         } else {
1:6be56bc:             Assert.assertEquals(preFkAddition, tableStatsCount);
1:6be56bc:         }
1:bce78c9: 
1:6be56bc:         // Several valid states here, use a relaxed range check.
1:6be56bc:         int max = getNumTotalPossibleStats();
1:a2f00b4:         int min = max - (getNumNotNeededDisposableStats() + 
1:a2f00b4:                          getNumOrphanedDisposableStats());
1:6be56bc:         int cur = getAllRelevantStats(null);
1:6be56bc:         Assert.assertTrue("cur=" + cur + ", min=" + min, cur >= min);
1:6be56bc:         Assert.assertTrue("cur=" + cur + ", max=" + max, cur <= max);
1:bce78c9:     }
1:bce78c9: 
1:bce78c9:     private void insertData(Connection con)
1:bce78c9:             throws SQLException {
1:bce78c9:         // Populate the foreign key table.
1:bce78c9:         boolean oldAutoCommitValue = con.getAutoCommit();
1:bce78c9:         con.setAutoCommit(false);
1:bce78c9:         PreparedStatement ps = con.prepareStatement(
1:bce78c9:                 "insert into " + fktbl + " values (DEFAULT)");
1:bce78c9:         for (int row = 0; row < ROW_COUNT; row++) {
1:bce78c9:             ps.executeUpdate();
1:bce78c9:         }
1:bce78c9:         ps.close();
1:bce78c9:         con.commit();
1:bce78c9: 
1:3574e10:         // Populate primary key table (has a multi-column primary key)
1:bce78c9:         ps = con.prepareStatement(
1:bce78c9:                 "insert into " + pktbl + " values (DEFAULT, ?)");
1:3574e10:         for (int row = 0; row < ROW_COUNT; row++) {
1:bce78c9:             ps.setInt(1, row);
1:bce78c9:             ps.executeUpdate();
1:bce78c9:         }
1:bce78c9:         ps.close();
1:bce78c9:         con.commit();
1:bce78c9: 
1:bce78c9:         // Populate the main table.
1:3574e10:         // The modulo operations are used to vary the number of unique values
1:3574e10:         // in the columns and have been chosen at will.
1:bce78c9:         ps = con.prepareStatement(
1:bce78c9:                 "insert into " + tbl + " values (DEFAULT,?,?,?,?)");
1:bce78c9:         for (int row = 0; row < ROW_COUNT; row++) {
1:3574e10:             ps.setInt(1, (row % ROW_COUNT) +1);
1:bce78c9:             ps.setInt(2, (row % 2000) +1);
1:bce78c9:             ps.setInt(3, (row % 19) +1);
1:bce78c9:             ps.setInt(4, row % 10);
1:bce78c9:             ps.executeUpdate();
1:bce78c9:         }
1:bce78c9:         ps.close();
1:bce78c9:         con.commit();
1:bce78c9:         con.setAutoCommit(oldAutoCommitValue);
1:bce78c9:     }
1:bce78c9: 
1:bce78c9:     /** Returns the names of the tables used by this test. */
1:bce78c9:     public String[] getTableNames() {
1:bce78c9:         return new String[] {tbl, fktbl, pktbl};
1:bce78c9:     }
1:bce78c9: 
1:6be56bc:     /**
1:6be56bc:      * Asserts the number of statistics entries for all relevant tables.
1:6be56bc:      *
1:a2f00b4:      * @param orphaned_disposedOf tells if the orphaned disposable statistics 
1:a2f00b4:      *      entries are expected to have been removed at this point
1:a2f00b4:      * @param notneeded_disposedOf tells if the unneeded statistics (like 
1:a2f00b4:      *      single column unique key indexes) are expected to have been 
1:a2f00b4:      *      removed at this point
1:6be56bc:      */
1:a2f00b4:     public void assertStatsCount(
1:a2f00b4:     boolean orphaned_disposedOf,
1:a2f00b4:     boolean notneeded_disposedOf)
1:bce78c9:             throws SQLException {
1:a2f00b4: 
1:6be56bc:         int expected = getNumTotalPossibleStats();
1:a2f00b4: 
1:a2f00b4:         if (!hasDerby5681Bug(oldVersion)) {
1:6be56bc:             // Here we correct for the orphaned statistics entry, but not for
1:31c208a:             // entries that are considered extraneous by newer releases (for
1:6be56bc:             // instance statistics for single column unique indexes).
1:a2f00b4:             expected -= getNumOrphanedDisposableStats();
1:a2f00b4: 
1:a2f00b4:         } else if (orphaned_disposedOf) {
1:a2f00b4:             // if the bug exists and we got rid of the orphaned stat.
1:a2f00b4:             expected -= getNumOrphanedDisposableStats();
1:6be56bc:         }
1:a2f00b4: 
1:a2f00b4:         // Adjust expected count if the disposable stats should be gone.
1:a2f00b4:         if (notneeded_disposedOf) {
1:a2f00b4:             expected -= getNumNotNeededDisposableStats();
1:a2f00b4:         }
1:a2f00b4: 
1:e18f54b:         // used for reporting only
1:e18f54b:         ArrayList<IndexStatsUtil.IdxStats> entries =
1:e18f54b:                 new ArrayList<IndexStatsUtil.IdxStats>();
1:bce78c9:         int found = getAllRelevantStats(entries);
1:bce78c9:         if (found != expected) {
2:bce78c9:             Assert.assertEquals(
1:bce78c9:                     IndexStatsUtil.buildStatString(
1:bce78c9:                         getStatArray(entries),
1:bce78c9:                         "DisposableIndexStatistics tables"),
1:bce78c9:                 expected, found);
1:bce78c9:         }
1:bce78c9:     }
1:bce78c9: 
1:bce78c9:     /** Converts the list of statistics to an array. */
1:e18f54b:     private IndexStatsUtil.IdxStats[] getStatArray(
1:e18f54b:             List<IndexStatsUtil.IdxStats> list) {
1:e18f54b:         return list.toArray(new IndexStatsUtil.IdxStats[list.size()]);
1:bce78c9:     }
1:bce78c9: 
1:6be56bc:     /**
1:bce78c9:      * Fetches all relevant statistics.
1:bce78c9:      *
1:bce78c9:      * @param list list to append statistics to (may be {@code null})
1:bce78c9:      * @return The number of relevant statistics entries found.
1:bce78c9:      * @throws SQLException if something goes wrong
1:bce78c9:      */
1:e18f54b:     private int getAllRelevantStats(List<IndexStatsUtil.IdxStats> list)
1:bce78c9:             throws SQLException {
1:bce78c9:         boolean oldAutoCommitValue = con.getAutoCommit();
1:bce78c9:         con.setAutoCommit(true);
1:bce78c9:         IndexStatsUtil stats = new IndexStatsUtil(con);
1:bce78c9:         String[] tables = getTableNames();
1:bce78c9:         int count = 0;
1:bce78c9:         for (int i=0; i < tables.length; i++) {
1:bce78c9:             IndexStatsUtil.IdxStats[] entries = stats.getStatsTable(tables[i]);
1:bce78c9:             if (list != null) {
1:bce78c9:                 list.addAll(Arrays.asList(entries));
1:bce78c9:             }
1:bce78c9:             count += entries.length;
1:bce78c9:         }
1:bce78c9:         stats.release(false);
1:bce78c9:         con.setAutoCommit(oldAutoCommitValue);
1:bce78c9:         return count;
1:bce78c9:     }
1:bce78c9: 
1:bce78c9:     /**
1:bce78c9:      * Total number of possible statistics entries.
1:bce78c9:      * <p>
1:bce78c9:      * This number includes orphaned and unnecessary statistics, and these
1:bce78c9:      * entries are expected to be purged out when running with the current/
1:bce78c9:      * newest version of Derby.
1:bce78c9:      */
1:bce78c9:     public static int getNumTotalPossibleStats() {
1:bce78c9:         return 8;
1:bce78c9:     }
1:bce78c9: 
1:bce78c9:     /** Number of disposable statistics entries. */
1:a2f00b4:     public static int getNumNotNeededDisposableStats() {
1:a2f00b4:         return 2;
1:a2f00b4:     }
1:a2f00b4: 
1:a2f00b4:     public static int getNumOrphanedDisposableStats() {
1:a2f00b4:         return 1;
1:bce78c9:     }
1:bce78c9: 
1:bce78c9:     /**
1:6be56bc:      * Tells if the old version is affected by the DERBY-5681 bug.
1:6be56bc:      * <p>
1:6be56bc:      * The bug is that Derby fails to drop a statistics entry for a foreign key
1:6be56bc:      * constraint, leaving an orphaned and outdated entry behind.
1:6be56bc:      *
1:6be56bc:      * @param oldVersion the old derbyVersion used in the test
1:6be56bc:      * @return {@code true} if the old version has the bug.
1:6be56bc:      */
1:6be56bc:     public static boolean hasDerby5681Bug(DerbyVersion oldVersion) {
1:6be56bc:         if (oldVersion.atLeast(DerbyVersion._10_9)) {
1:6be56bc:             return false;
1:6be56bc:         }
1:6be56bc: 
1:6be56bc:         // Here we have to check the versions within each branch back to 10.5
1:6be56bc:         // (the test isn't run for older versions).
1:6be56bc:         if (oldVersion.atMajorMinor(10, 8)) {
1:6be56bc:             return !oldVersion.greaterThan(DerbyVersion._10_8_2_2);
1:6be56bc:         }
1:6be56bc:         if (oldVersion.atMajorMinor(10, 7)) {
1:6be56bc:             return !oldVersion.greaterThan(DerbyVersion._10_7_1_1);
1:6be56bc:         }
1:6be56bc:         if (oldVersion.atMajorMinor(10, 6)) {
1:6be56bc:             return !oldVersion.greaterThan(DerbyVersion._10_6_2_1);
1:6be56bc:         }
1:6be56bc:         if (oldVersion.atMajorMinor(10, 5)) {
1:6be56bc:             return !oldVersion.greaterThan(DerbyVersion._10_5_3_0);
1:6be56bc:         }
1:6be56bc:         throw new IllegalStateException(
1:6be56bc:                 "didn't expect to get here, old version is " + oldVersion);
1:6be56bc:     }
1:bce78c9: }
============================================================================
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:a2f00b4
/////////////////////////////////////////////////////////////////////////
1:         int min = max - (getNumNotNeededDisposableStats() + 
1:                          getNumOrphanedDisposableStats());
/////////////////////////////////////////////////////////////////////////
1:      * @param orphaned_disposedOf tells if the orphaned disposable statistics 
1:      *      entries are expected to have been removed at this point
1:      * @param notneeded_disposedOf tells if the unneeded statistics (like 
1:      *      single column unique key indexes) are expected to have been 
1:      *      removed at this point
1:     public void assertStatsCount(
1:     boolean orphaned_disposedOf,
1:     boolean notneeded_disposedOf)
1: 
1: 
1:         if (!hasDerby5681Bug(oldVersion)) {
1:             expected -= getNumOrphanedDisposableStats();
1: 
1:         } else if (orphaned_disposedOf) {
1:             // if the bug exists and we got rid of the orphaned stat.
1:             expected -= getNumOrphanedDisposableStats();
1: 
1:         // Adjust expected count if the disposable stats should be gone.
1:         if (notneeded_disposedOf) {
1:             expected -= getNumNotNeededDisposableStats();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static int getNumNotNeededDisposableStats() {
1:         return 2;
1:     }
1: 
1:     public static int getNumOrphanedDisposableStats() {
1:         return 1;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
1:         // used for reporting only
1:         ArrayList<IndexStatsUtil.IdxStats> entries =
1:                 new ArrayList<IndexStatsUtil.IdxStats>();
/////////////////////////////////////////////////////////////////////////
1:     private IndexStatsUtil.IdxStats[] getStatArray(
1:             List<IndexStatsUtil.IdxStats> list) {
1:         return list.toArray(new IndexStatsUtil.IdxStats[list.size()]);
/////////////////////////////////////////////////////////////////////////
1:     private int getAllRelevantStats(List<IndexStatsUtil.IdxStats> list)
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:31c208a
/////////////////////////////////////////////////////////////////////////
1:             // entries that are considered extraneous by newer releases (for
0:         ArrayList entries = new ArrayList(); // used for reporting only
commit:6be56bc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.DerbyVersion;
/////////////////////////////////////////////////////////////////////////
1:     private final DerbyVersion oldVersion;
/////////////////////////////////////////////////////////////////////////
1:     public DisposableIndexStatistics(DerbyVersion oldVersion,
1:                                      Connection con,
1:                                      String tableName) {
1:         this.oldVersion = oldVersion;
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-5681: Originally fixed in 10.9, but has now been backported
1:         //      all the way back to 10.3.
1:         int tableStatsCount = stats.getStatsTable(tbl).length;
1:         if (hasDerby5681Bug(oldVersion)) {
1:             Assert.assertEquals(preFkAddition +1, tableStatsCount);
1:         } else {
1:             Assert.assertEquals(preFkAddition, tableStatsCount);
1:         }
1:         // Several valid states here, use a relaxed range check.
1:         int max = getNumTotalPossibleStats();
0:         int min = max - getNumDisposableStats();
1:         int cur = getAllRelevantStats(null);
1:         Assert.assertTrue("cur=" + cur + ", min=" + min, cur >= min);
1:         Assert.assertTrue("cur=" + cur + ", max=" + max, cur <= max);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Asserts the number of statistics entries for all relevant tables.
1:      *
0:      * @param disposedOf tells if the disposable statistics entries are
0:      *      expected to have been removed at this point
1:      */
0:     public void assertStatsCount(boolean disposedOf)
1:         int expected = getNumTotalPossibleStats();
0:         // Adjust expected count if the disposable stats should be gone.
0:         if (disposedOf) {
0:             expected -= getNumDisposableStats();
0:         } else if (!hasDerby5681Bug(oldVersion)) {
1:             // Here we correct for the orphaned statistics entry, but not for
0:             // entires that are considered extraneous by newer releases (for
1:             // instance statistics for single column unique indexes).
0:             expected--;
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Tells if the old version is affected by the DERBY-5681 bug.
1:      * <p>
1:      * The bug is that Derby fails to drop a statistics entry for a foreign key
1:      * constraint, leaving an orphaned and outdated entry behind.
1:      *
1:      * @param oldVersion the old derbyVersion used in the test
1:      * @return {@code true} if the old version has the bug.
1:      */
1:     public static boolean hasDerby5681Bug(DerbyVersion oldVersion) {
1:         if (oldVersion.atLeast(DerbyVersion._10_9)) {
1:             return false;
1:         }
1: 
1:         // Here we have to check the versions within each branch back to 10.5
1:         // (the test isn't run for older versions).
1:         if (oldVersion.atMajorMinor(10, 8)) {
1:             return !oldVersion.greaterThan(DerbyVersion._10_8_2_2);
1:         }
1:         if (oldVersion.atMajorMinor(10, 7)) {
1:             return !oldVersion.greaterThan(DerbyVersion._10_7_1_1);
1:         }
1:         if (oldVersion.atMajorMinor(10, 6)) {
1:             return !oldVersion.greaterThan(DerbyVersion._10_6_2_1);
1:         }
1:         if (oldVersion.atMajorMinor(10, 5)) {
1:             return !oldVersion.greaterThan(DerbyVersion._10_5_3_0);
1:         }
1:         throw new IllegalStateException(
1:                 "didn't expect to get here, old version is " + oldVersion);
1:     }
commit:3574e10
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * A row count currently chosen at will.
1:      * <p>
1:      * Note that if being used for testing the automatic istat daemon, the
1:      * number of rows must be sufficiently high to trigger statistics creation,
1:      * and likewise for the deltas when adding more rows to trigger an update.
1:      */
/////////////////////////////////////////////////////////////////////////
1:         // Populate primary key table (has a multi-column primary key)
1:         for (int row = 0; row < ROW_COUNT; row++) {
/////////////////////////////////////////////////////////////////////////
1:         // The modulo operations are used to vary the number of unique values
1:         // in the columns and have been chosen at will.
1:             ps.setInt(1, (row % ROW_COUNT) +1);
commit:bce78c9
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.helpers.DisposableIndexStatistics
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests.helpers;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import junit.framework.Assert;
1: 
1: import org.apache.derbyTesting.junit.IndexStatsUtil;
1: 
1: /**
1:  * Helper class encapsulating logic used in the upgrade test for testing
1:  * functionality dropping, and skipping generation of, disposable statistics
1:  * entries.
1:  */
1: public class DisposableIndexStatistics {
1: 
1:     private static final int ROW_COUNT = 2000;
1: 
1:     private final Connection con;
1:     private final String tbl;
1:     private final String fktbl;
1:     private final String pktbl;
1: 
1:     /**
1:      * Creates a new helper instance using the given connection and table.
1:      *
1:      * @param con connection
1:      * @param tableName base table name
1:      */
0:     public DisposableIndexStatistics(Connection con, String tableName) {
1:         this.con = con;
1:         this.tbl = tableName;
1:         this.fktbl = tableName + "_FK";
1:         this.pktbl = tableName + "_PK_2COL";
1:     }
1: 
1:     /** Creates and populates the test tables. */
1:     public void createAndPopulateTables()
1:             throws SQLException {
1:         con.setAutoCommit(true);
1:         Statement stmt = con.createStatement();
1:         // Populate the tables first, then add the indexes/constraints.
1:         // This ensure the statistics are actually created.
1:         // Statistics: two entries due to two columns in the index.
1:         stmt.executeUpdate("create table " + pktbl + "( " +
1:                     "id1 int generated always as identity, " +
1:                     "id2 int not null" +
1:                 ")");
1:         // Statistics: zero entries (single-column primary key), one without
1:         //             optimization logic.
1:         stmt.executeUpdate("create table " + fktbl + "( " +
1:                     "id int not null generated always as identity" +
1:                 ")");
1:         // Statistics: three with DERBY-5681 fixed and optimization,
1:         //             otherwise five.
1:         stmt.executeUpdate("create table " + tbl + "( " +
1:                     "id int not null generated always as identity, " +
1:                     "fk_dropped int not null, " +
1:                     "fk_self int, " +
1:                     "fk_self_notnull int not null, " +
1:                     "nonunique int" +
1:                 ")");
1: 
1:         // Insert data
1:         insertData(con);
1: 
1:         IndexStatsUtil stats = new IndexStatsUtil(con);
1:         // Add constraints
1:         stmt.executeUpdate("alter table " + pktbl + " add constraint " +
1:                 "PK_TWOCOL_PKTAB primary key (id1, id2)");
1:         stats.getStatsTable(pktbl, 2);
1:         stmt.executeUpdate("alter table " + fktbl + " add constraint " +
1:                 "PK_FKTAB primary key (id)");
1:         stats.getStatsTable(fktbl, 1);
1:         stmt.executeUpdate("alter table " + tbl + " add constraint " +
1:                 "PK_MAIN primary key (id)");
1:         stats.getStatsTable(tbl, 1);
1:         stmt.executeUpdate("create index DUPS_MAIN on " + tbl + "(nonunique)");
1:         stats.getStatsTable(tbl, 2);
1:         stmt.executeUpdate("alter table " + tbl + " add constraint " +
1:                 "FKS_MAIN foreign key (fk_self) references " + tbl + "(id)");
1:         stats.getStatsTable(tbl, 3);
1:         stmt.executeUpdate("alter table " + tbl + " add constraint " +
1:                 "FKSNN_MAIN foreign key (fk_self_notnull) references " +
1:                 tbl + "(id)");
1:         stats.getStatsTable(tbl, 4);
1: 
1:         int preFkAddition = stats.getStatsTable(tbl).length;
1:         // This doesn't trigger DERBY-5681.
1:         stmt.executeUpdate("alter table " + tbl + " add constraint " +
1:                 "fk_to_be_dropped foreign key (fk_dropped) " +
1:                 "references " + fktbl + "(id)");
1:         Assert.assertTrue(stats.getStatsTable(tbl).length == preFkAddition +1);
1:         stmt.executeUpdate("alter table " + tbl + " drop constraint " +
1:                 "fk_to_be_dropped");
1:         Assert.assertTrue(stats.getStatsTable(tbl).length == preFkAddition);
1: 
1:         // Trigger DERBY-5681.
1:         stmt.executeUpdate("alter table " + tbl + " add constraint " +
1:                 "fk_on_pk foreign key (id) " +
1:                 "references " + fktbl + "(id)");
1:         stmt.executeUpdate("call syscs_util.syscs_update_statistics(" +
1:                 "'APP', '" + tbl + "', null)");
1:         Assert.assertTrue(stats.getStatsTable(tbl).length == preFkAddition +1);
1:         stmt.executeUpdate("alter table " + tbl + " drop constraint " +
1:                 "fk_on_pk");
1:         // Derby failed to drop the statistics when the constraint got dropped.
1:         Assert.assertTrue(stats.getStatsTable(tbl).length == preFkAddition +1);
1: 
0:         // Do an assert, but since we may be run with both old and new
0:         // releases allow for two cases.
1:         Assert.assertEquals(
0:                 getNumTotalPossibleStats(), getAllRelevantStats(null));
1:     }
1: 
1:     private void insertData(Connection con)
1:             throws SQLException {
1:         // Populate the foreign key table.
1:         boolean oldAutoCommitValue = con.getAutoCommit();
1:         con.setAutoCommit(false);
1:         PreparedStatement ps = con.prepareStatement(
1:                 "insert into " + fktbl + " values (DEFAULT)");
1:         for (int row = 0; row < ROW_COUNT; row++) {
1:             ps.executeUpdate();
1:         }
1:         ps.close();
1:         con.commit();
1: 
1:         ps = con.prepareStatement(
1:                 "insert into " + pktbl + " values (DEFAULT, ?)");
0:         int reducedRowNumber = ROW_COUNT / 3;
0:         for (int row = 0; row < reducedRowNumber; row++) {
1:             ps.setInt(1, row);
1:             ps.executeUpdate();
1:         }
1:         ps.close();
1:         con.commit();
1: 
1:         // Populate the main table.
1:         ps = con.prepareStatement(
1:                 "insert into " + tbl + " values (DEFAULT,?,?,?,?)");
1:         for (int row = 0; row < ROW_COUNT; row++) {
0:             ps.setInt(1, (row % reducedRowNumber) +1);
1:             ps.setInt(2, (row % 2000) +1);
1:             ps.setInt(3, (row % 19) +1);
1:             ps.setInt(4, row % 10);
1:             ps.executeUpdate();
1:         }
1:         ps.close();
1:         con.commit();
1:         con.setAutoCommit(oldAutoCommitValue);
1:     }
1: 
1:     /** Returns the names of the tables used by this test. */
1:     public String[] getTableNames() {
1:         return new String[] {tbl, fktbl, pktbl};
1:     }
1: 
0:     /** Asserts the number of statistics entries for all relevant tables. */
0:     public void assertStatsCount(int expected)
1:             throws SQLException {
0:         ArrayList entries = new ArrayList();
1:         int found = getAllRelevantStats(entries);
1:         if (found != expected) {
1:             Assert.assertEquals(
1:                     IndexStatsUtil.buildStatString(
1:                         getStatArray(entries),
1:                         "DisposableIndexStatistics tables"),
1:                 expected, found);
1:         }
1:     }
1: 
1:     /** Converts the list of statistics to an array. */
0:     private IndexStatsUtil.IdxStats[] getStatArray(List list) {
0:         int size = list.size();
0:         IndexStatsUtil.IdxStats[] ret = new IndexStatsUtil.IdxStats[size];
0:         list.toArray(ret);
0:         return ret;
1:     }
1: 
1:     /**
1:      * Fetches all relevant statistics.
1:      *
1:      * @param list list to append statistics to (may be {@code null})
1:      * @return The number of relevant statistics entries found.
1:      * @throws SQLException if something goes wrong
1:      */
0:     private int getAllRelevantStats(List list)
1:             throws SQLException {
1:         boolean oldAutoCommitValue = con.getAutoCommit();
1:         con.setAutoCommit(true);
1:         IndexStatsUtil stats = new IndexStatsUtil(con);
1:         String[] tables = getTableNames();
1:         int count = 0;
1:         for (int i=0; i < tables.length; i++) {
1:             IndexStatsUtil.IdxStats[] entries = stats.getStatsTable(tables[i]);
1:             if (list != null) {
1:                 list.addAll(Arrays.asList(entries));
1:             }
1:             count += entries.length;
1:         }
1:         stats.release(false);
1:         con.setAutoCommit(oldAutoCommitValue);
1:         return count;
1:     }
1: 
1:     /**
1:      * Total number of possible statistics entries.
1:      * <p>
1:      * This number includes orphaned and unnecessary statistics, and these
1:      * entries are expected to be purged out when running with the current/
1:      * newest version of Derby.
1:      */
1:     public static int getNumTotalPossibleStats() {
1:         return 8;
1:     }
1: 
1:     /** Number of disposable statistics entries. */
0:     public static int getNumDisposableStats() {
0:         return 3;
1:     }
1: }
============================================================================