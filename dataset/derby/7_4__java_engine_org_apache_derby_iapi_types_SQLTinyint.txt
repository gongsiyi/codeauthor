3:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.SQLTinyint
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
20:eac0369: 
9:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.Storable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.cache.ClassSize;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.PreparedStatement;
1:eac0369: import java.sql.SQLException;
1:eac0369: 
7:eac0369: /**
1:eac0369:  * SQLTinyint satisfies the DataValueDescriptor
1:eac0369:  * interfaces (i.e., OrderableDataType). It implements a tinyint column, 
1:eac0369:  * e.g. for storing a column value; it can be specified
1:eac0369:  * when constructed to not allow nulls. Nullability cannot be changed
1:eac0369:  * after construction, as it affects the storage size and mechanism.
1:eac0369:  * <p>
1:eac0369:  * Because OrderableDataType is a subtype of ValueColumn,
1:eac0369:  * SQLTinyint can play a role in either a ValueColumn/Row
1:eac0369:  * or a OrderableDataType/Row, interchangeably.
1:eac0369:  * <p>
1:eac0369:  * We assume the store has a flag for nullness of the value,
1:eac0369:  * and simply return a 0-length array for the stored form
1:eac0369:  * when the value is null.
1:eac0369:  */
1:eac0369: public final class SQLTinyint
1:eac0369: 	extends NumberDataType
17:eac0369: {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * constants
1:eac0369: 	 */
1:eac0369: 	static final int TINYINT_LENGTH = 1;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * object state
1:eac0369: 	 */
1:eac0369: 	private byte value;
1:eac0369: 	private boolean isnull;
1:eac0369: 
1:eac0369:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( SQLTinyint.class);
1:eac0369: 
1:eac0369:     public int estimateMemoryUsage()
1:eac0369:     {
1:eac0369:         return BASE_MEMORY_USAGE;
17:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * class interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Constructors
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * No-arg constructor, required by Formattable.
1:eac0369: 	 * This constructor also gets used when we are
1:eac0369:      * allocating space for a byte.
1:eac0369: 	 */
1:eac0369: 	public SQLTinyint() 
1:eac0369: 	{
1:eac0369: 		isnull = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public SQLTinyint(byte val)
1:eac0369: 	{
1:eac0369: 		value = val;
1:eac0369: 	}
1:eac0369: 
1:854dd10: 	/* This constructor gets used for the cloneValue() method */
1:854dd10: 	private SQLTinyint(byte val, boolean isnull) {
1:eac0369: 		value = val;
1:eac0369: 		this.isnull = isnull;
1:eac0369: 	}
1:eac0369: 
1:4309044: 	public SQLTinyint(Byte obj) {
1:4309044: 		if (isnull = (obj == null))
1:4309044: 			;
1:4309044: 		else
1:4309044: 			value = obj.byteValue();
1:4309044: 	}
1:4309044: 
1:eac0369: 	//////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// DataValueDescriptor interface
1:eac0369: 	// (mostly implemented in DataType)
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#getInt 
1:eac0369: 	 */
1:eac0369: 	public int	getInt()
1:eac0369: 	{
1:eac0369: 		return (int) value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#getByte 
1:eac0369: 	 */
1:eac0369: 	public byte	getByte() 
1:eac0369: 	{
1:eac0369: 		return value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#getShort 
1:eac0369: 	 */
1:eac0369: 	public short	getShort()
1:eac0369: 	{
1:eac0369: 		return (short) value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#getLong 
1:eac0369: 	 */
1:eac0369: 	public long	getLong()
1:eac0369: 	{
1:eac0369: 		return (long) value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#getFloat 
1:eac0369: 	 */
1:eac0369: 	public float	getFloat()
1:eac0369: 	{
1:eac0369: 		return (float) value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#getDouble 
1:eac0369: 	 */
1:eac0369: 	public double	getDouble()
1:eac0369: 	{
1:eac0369: 		return (double) value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#getBoolean 
1:eac0369: 	 */
1:eac0369: 	public boolean	getBoolean()
1:eac0369: 	{
1:eac0369: 		return (value != 0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#getString 
1:eac0369: 	 */
1:eac0369: 	public String	getString()
1:eac0369: 	{
2:eac0369: 		return (isNull()) ? 
1:eac0369: 					null:
1:eac0369: 					Byte.toString(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#getLength 
1:eac0369: 	 */
1:eac0369: 	public int	getLength()
1:eac0369: 	{
1:eac0369: 		return TINYINT_LENGTH;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#getObject 
1:eac0369: 	 */
1:eac0369: 	public Object	getObject() 
1:eac0369: 	{
1:eac0369: 		return (isNull()) ?
1:eac0369: 					null:
1:ce40a31: 					value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// this is for DataType's error generator
1:eac0369: 	public String getTypeName()
1:eac0369: 	{
1:eac0369: 		return TypeId.TINYINT_NAME;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Storable interface, implies Externalizable, TypedFormat
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() 
1:eac0369: 	{
1:eac0369: 		return StoredFormatIds.SQL_TINYINT_ID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see Storable#isNull
1:eac0369: 	 */
1:eac0369: 	public boolean isNull()
1:eac0369: 	{
1:eac0369: 		return isnull;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException {
1:eac0369: 
1:eac0369: 		// never called when value is null
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(! isNull());
1:eac0369: 
1:eac0369: 		out.writeByte(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see java.io.Externalizable#readExternal */
1:eac0369: 	public void readExternal(ObjectInput in) throws IOException {
1:eac0369: 
2:eac0369: 		value = in.readByte();
2:eac0369: 		isnull = false;
1:eac0369: 	}
1:806114c: 
1:eac0369: 	/**
1:eac0369: 	 * @see Storable#restoreToNull
11:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public void restoreToNull()
1:eac0369: 	{
1:eac0369: 		value = 0;
1:eac0369: 		isnull = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @exception StandardException		Thrown on error */
1:eac0369: 	protected int typeCompare(DataValueDescriptor arg) throws StandardException
1:eac0369: 	{
1:eac0369: 		/* neither are null, get the value */
1:eac0369: 		int thisValue, otherValue;
1:eac0369: 
1:eac0369: 		/* Do comparisons with ints to avoid overflow problems */
1:eac0369: 		thisValue = this.getInt();
1:eac0369: 		otherValue = arg.getInt();
1:eac0369: 		if (thisValue == otherValue)
1:eac0369: 			return 0;
1:eac0369: 		else if (thisValue > otherValue)
1:eac0369: 			return 1;
2:eac0369: 		else
1:eac0369: 			return -1;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 */
1:eac0369: 
1:854dd10: 	/** @see DataValueDescriptor#cloneValue */
1:854dd10: 	public DataValueDescriptor cloneValue(boolean forceMaterialization)
1:eac0369: 	{
1:eac0369: 		return new SQLTinyint(value, isnull);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see DataValueDescriptor#getNewNull
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor getNewNull()
1:eac0369: 	{
1:eac0369: 		return new SQLTinyint();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#setValueFromResultSet 
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
1:eac0369: 									  boolean isNullable)
1:eac0369: 		throws SQLException
1:eac0369: 	{
1:eac0369: 			value = resultSet.getByte(colNumber);
1:eac0369: 			isnull = (isNullable && resultSet.wasNull());
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 		Set the value into a PreparedStatement.
1:eac0369: 
1:eac0369: 		@exception SQLException Error setting value in PreparedStatement
1:eac0369: 	*/
1:eac0369: 	public final void setInto(PreparedStatement ps, int position) throws SQLException {
1:eac0369: 
1:eac0369: 		if (isNull()) {
1:eac0369: 			ps.setNull(position, java.sql.Types.TINYINT);
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		ps.setByte(position, value);
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 		Set this value into a ResultSet for a subsequent ResultSet.insertRow
1:eac0369: 		or ResultSet.updateRow. This method will only be called for non-null values.
1:eac0369: 
1:eac0369: 		@exception SQLException thrown by the ResultSet object
1:eac0369: 		@exception StandardException thrown by me accessing my value.
1:eac0369: 	*/
1:eac0369: 	public final void setInto(ResultSet rs, int position) throws SQLException, StandardException {
1:eac0369: 		rs.updateByte(position, value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@exception StandardException thrown if string not accepted
1:eac0369: 	 */
1:eac0369: 	public void setValue(String theValue)
5:eac0369: 		throws StandardException
1:eac0369: 	{
2:eac0369: 		if (theValue == null)
1:eac0369: 		{
1:eac0369: 			value = 0;
1:eac0369: 			isnull = true;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 		    try {
1:eac0369: 		        value = Byte.valueOf(theValue.trim()).byteValue();
1:eac0369: 			} catch (NumberFormatException nfe) {
1:eac0369: 			    throw invalidFormat();
1:eac0369: 			}
1:eac0369: 			isnull = false;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	public void setValue(byte theValue)
1:eac0369: 	{
1:eac0369: 		value = theValue;
1:eac0369: 		isnull = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@exception StandardException if outsideRangeForTinyint
1:eac0369: 	 */
1:eac0369: 	public void setValue(short theValue) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
1:eac0369: 		value = (byte)theValue;
1:eac0369: 		isnull = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@exception StandardException if outsideRangeForTinyint
1:eac0369: 	 */
1:eac0369: 	public void setValue(int theValue) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
1:eac0369: 		value = (byte)theValue;
1:eac0369: 		isnull = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@exception StandardException if outsideRangeForTinyint
1:eac0369: 	 */
1:eac0369: 	public void setValue(long theValue) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
1:eac0369: 		value = (byte)theValue;
1:eac0369: 		isnull = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see NumberDataValue#setValue
1:eac0369: 	 *
5:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void setValue(float theValue) throws StandardException
1:eac0369: 	{
1:eac0369: 		theValue = NumberDataType.normalizeREAL(theValue);
1:eac0369: 
1:eac0369: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
1:eac0369: 
1:eac0369: 		float floorValue = (float)Math.floor(theValue);
1:eac0369: 
1:eac0369: 		value = (byte)floorValue;
1:eac0369: 		isnull = false;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see NumberDataValue#setValue
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void setValue(double theValue) throws StandardException
1:eac0369: 	{
1:eac0369: 		theValue = NumberDataType.normalizeDOUBLE(theValue);
1:eac0369: 
1:eac0369: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
1:eac0369: 			throw outOfRange();
1:eac0369: 
1:eac0369: 		double floorValue = Math.floor(theValue);
1:eac0369: 
1:eac0369: 		value = (byte)floorValue;
1:eac0369: 		isnull = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see NumberDataValue#setValue
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public void setValue(boolean theValue)
1:eac0369: 	{
1:eac0369: 		value = theValue?(byte)1:(byte)0;
1:eac0369: 		isnull = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	
1:eac0369: 	protected void setFrom(DataValueDescriptor theValue) throws StandardException {
1:eac0369: 
1:eac0369: 		setValue(theValue.getByte());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/** @see DataValueDescriptor#typePrecedence */
1:eac0369: 	public int typePrecedence()
1:eac0369: 	{
1:eac0369: 		return TypeId.TINYINT_PRECEDENCE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** SQL Operators
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The = operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:eac0369: 	 * @param left			The value on the left side of the =
1:eac0369: 	 * @param right			The value on the right side of the =
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the two parameters are equal
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue equals(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getByte() == right.getByte());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dbed020: 	 * The &lt;&gt; operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:dbed020: 	 * @param left			The value on the left side of the operator
1:dbed020: 	 * @param right			The value on the right side of the operator
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the two parameters
1:eac0369: 	 *			are not equal
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue notEquals(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getByte() != right.getByte());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dbed020: 	 * The &lt; operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:dbed020: 	 * @param left			The value on the left side of the operator
1:dbed020: 	 * @param right			The value on the right side of the operator
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the first operand is less
1:eac0369: 	 *			than the second operand
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue lessThan(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getByte() < right.getByte());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dbed020: 	 * The &lt; operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:dbed020: 	 * @param left			The value on the left side of the operator
1:dbed020: 	 * @param right			The value on the right side of the operator
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the first operand is greater
1:eac0369: 	 *			than the second operand
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue greaterThan(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getByte() > right.getByte());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dbed020: 	 * The &lt;= operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:dbed020: 	 * @param left			The value on the left side of the operator
1:dbed020: 	 * @param right			The value on the right side of the operator
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the first operand is less
1:eac0369: 	 *			than or equal to the second operand
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue lessOrEquals(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getByte() <= right.getByte());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dbed020: 	 * The &gt;= operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:dbed020: 	 * @param left			The value on the left side of the operator
1:dbed020: 	 * @param right			The value on the right side of the operator
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the first operand is greater
1:eac0369: 	 *			than or equal to the second operand
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue greaterOrEquals(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getByte() >= right.getByte());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This method implements the * operator for "tinyint * tinyint".
1:eac0369: 	 *
1:eac0369: 	 * @param left	The first value to be multiplied
1:eac0369: 	 * @param right	The second value to be multiplied
4:eac0369: 	 * @param result	The result of a previous call to this method, null
4:eac0369: 	 *					if not called yet
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQLTinyint containing the result of the multiplication
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public NumberDataValue times(NumberDataValue left,
2:eac0369: 							NumberDataValue right,
4:eac0369: 							NumberDataValue result)
1:eac0369: 				throws StandardException
1:eac0369: 	{
4:eac0369: 		if (result == null)
1:eac0369: 		{
4:eac0369: 			result = new SQLTinyint();
1:eac0369: 		}
1:eac0369: 
2:eac0369: 		if (left.isNull() || right.isNull())
1:eac0369: 		{
4:eac0369: 			result.setToNull();
7:eac0369: 			return result;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
3:eac0369: 		** Java does not check for overflow with integral types. We have to
3:eac0369: 		** check the result ourselves.
3:eac0369: 		**
1:eac0369: 		** The product of 2 bytes is an int, so we check to see if the product
1:eac0369: 		** is in the range of values for a byte.
1:eac0369: 		*/
1:eac0369: 		int product = left.getByte() * right.getByte();
1:eac0369: 		result.setValue(product);
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		mod(tinyint, tinyint)
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public NumberDataValue mod(NumberDataValue dividend,
2:eac0369: 							 NumberDataValue divisor,
1:eac0369: 							 NumberDataValue result)
1:eac0369: 				throws StandardException
1:eac0369: 	{
1:eac0369: 		if (result == null)
1:eac0369: 		{
1:eac0369: 			result = new SQLTinyint();
1:eac0369: 		}
1:eac0369: 
2:eac0369: 		if (dividend.isNull() || divisor.isNull())
1:eac0369: 		{
1:eac0369: 			result.setToNull();
1:eac0369: 			return result;
1:eac0369: 		}
1:eac0369: 
2:eac0369: 		/* Catch divide by 0 */
1:eac0369: 		byte byteDivisor = divisor.getByte();
2:eac0369: 		if (byteDivisor == 0)
1:eac0369: 		{
2:eac0369: 			throw StandardException.newException(SQLState.LANG_DIVIDE_BY_ZERO);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		result.setValue(dividend.getByte() % byteDivisor);
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * This method implements the unary minus operator for tinyint.
1:eac0369: 	 *
1:eac0369: 	 * @param result	The result of a previous call to this method, null
1:eac0369: 	 *					if not called yet
1:eac0369: 	 *
2:eac0369: 	 * @return	A SQLTinyint containing the result of the division
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public NumberDataValue minus(NumberDataValue result)
1:eac0369: 									throws StandardException
1:eac0369: 	{
1:eac0369: 		if (result == null)
1:eac0369: 		{
1:eac0369: 			result = new SQLTinyint();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (this.isNull())
1:eac0369: 		{
1:eac0369: 			result.setToNull();
1:eac0369: 			return result;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		int operandValue = this.getByte();
1:eac0369: 
1:eac0369: 		result.setValue(-operandValue);
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method implements the isNegative method.
1:eac0369:      *
1:eac0369:      * @return  A boolean.  If this.value is negative, return true.
1:eac0369:      *          For positive values or null, return false.
1:eac0369:      */
1:eac0369: 
1:eac0369:     protected boolean isNegative()
1:eac0369:     {
1:eac0369:         return !isNull() && value < 0;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * String display of value
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (isNull())
1:eac0369: 			return "NULL";
1:eac0369: 		else
1:eac0369: 			return Byte.toString(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Hash code
1:eac0369: 	 */
1:eac0369: 	public int hashCode()
1:eac0369: 	{
1:eac0369: 		return (int) value;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	 * The &lt;&gt; operator as called from the language module, as opposed to
1: 	 * @param left			The value on the left side of the operator
1: 	 * @param right			The value on the right side of the operator
/////////////////////////////////////////////////////////////////////////
1: 	 * The &lt; operator as called from the language module, as opposed to
1: 	 * @param left			The value on the left side of the operator
1: 	 * @param right			The value on the right side of the operator
/////////////////////////////////////////////////////////////////////////
1: 	 * The &lt; operator as called from the language module, as opposed to
1: 	 * @param left			The value on the left side of the operator
1: 	 * @param right			The value on the right side of the operator
/////////////////////////////////////////////////////////////////////////
1: 	 * The &lt;= operator as called from the language module, as opposed to
1: 	 * @param left			The value on the left side of the operator
1: 	 * @param right			The value on the right side of the operator
/////////////////////////////////////////////////////////////////////////
1: 	 * The &gt;= operator as called from the language module, as opposed to
1: 	 * @param left			The value on the left side of the operator
1: 	 * @param right			The value on the right side of the operator
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 					value;
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:4309044
/////////////////////////////////////////////////////////////////////////
1: 	public SQLTinyint(Byte obj) {
1: 		if (isnull = (obj == null))
1: 			;
1: 		else
1: 			value = obj.byteValue();
1: 	}
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4ecfb0e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1: 	/* This constructor gets used for the cloneValue() method */
1: 	private SQLTinyint(byte val, boolean isnull) {
/////////////////////////////////////////////////////////////////////////
1: 	/** @see DataValueDescriptor#cloneValue */
1: 	public DataValueDescriptor cloneValue(boolean forceMaterialization)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:806114c
/////////////////////////////////////////////////////////////////////////
1: 	
commit:2a58829
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:2c6f0a2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.SQLTinyint
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
1: 
1: import org.apache.derby.iapi.services.cache.ClassSize;
1: 
0: import org.apache.derby.iapi.types.NumberDataType;
0: import org.apache.derby.iapi.types.SQLBoolean;
1: 
0: import java.math.BigDecimal;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: import java.sql.ResultSet;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
1: /**
1:  * SQLTinyint satisfies the DataValueDescriptor
1:  * interfaces (i.e., OrderableDataType). It implements a tinyint column, 
1:  * e.g. for storing a column value; it can be specified
1:  * when constructed to not allow nulls. Nullability cannot be changed
1:  * after construction, as it affects the storage size and mechanism.
1:  * <p>
1:  * Because OrderableDataType is a subtype of ValueColumn,
1:  * SQLTinyint can play a role in either a ValueColumn/Row
1:  * or a OrderableDataType/Row, interchangeably.
1:  * <p>
1:  * We assume the store has a flag for nullness of the value,
1:  * and simply return a 0-length array for the stored form
1:  * when the value is null.
1:  */
1: public final class SQLTinyint
1: 	extends NumberDataType
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	/*
1: 	 * constants
1: 	 */
1: 	static final int TINYINT_LENGTH = 1;
1: 
1: 	/*
1: 	 * object state
1: 	 */
1: 	private byte value;
1: 	private boolean isnull;
1: 
1:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( SQLTinyint.class);
1: 
1:     public int estimateMemoryUsage()
1:     {
1:         return BASE_MEMORY_USAGE;
1:     }
1: 
1: 	/*
1: 	 * class interface
1: 	 */
1: 
1: 	/*
1: 	 * Constructors
1: 	 */
1: 
1: 	/**
1: 	 * No-arg constructor, required by Formattable.
1: 	 * This constructor also gets used when we are
1:      * allocating space for a byte.
1: 	 */
1: 	public SQLTinyint() 
1: 	{
1: 		isnull = true;
1: 	}
1: 
1: 	public SQLTinyint(byte val)
1: 	{
1: 		value = val;
1: 	}
1: 
0: 	/* This constructor gets used for the getClone() method */
0: 	public SQLTinyint(byte val, boolean isnull)
1: 	{
1: 		value = val;
1: 		this.isnull = isnull;
1: 	}
1: 
1: 	//////////////////////////////////////////////////////////////
1: 	//
1: 	// DataValueDescriptor interface
1: 	// (mostly implemented in DataType)
1: 	//
1: 	//////////////////////////////////////////////////////////////
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#getInt 
1: 	 */
1: 	public int	getInt()
1: 	{
1: 		return (int) value;
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#getByte 
1: 	 */
1: 	public byte	getByte() 
1: 	{
1: 		return value;
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#getShort 
1: 	 */
1: 	public short	getShort()
1: 	{
1: 		return (short) value;
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#getLong 
1: 	 */
1: 	public long	getLong()
1: 	{
1: 		return (long) value;
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#getFloat 
1: 	 */
1: 	public float	getFloat()
1: 	{
1: 		return (float) value;
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#getDouble 
1: 	 */
1: 	public double	getDouble()
1: 	{
1: 		return (double) value;
1: 	}
1: 
1: 	/** 
0: 	 * @see DataValueDescriptor#getBigDecimal 
1: 	 */
0: 	public BigDecimal	getBigDecimal()
1: 	{
1: 		return (isNull()) ?
0: 					null :
0: 					BigDecimal.valueOf(value);
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#getBoolean 
1: 	 */
1: 	public boolean	getBoolean()
1: 	{
1: 		return (value != 0);
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#getString 
1: 	 */
1: 	public String	getString()
1: 	{
1: 		return (isNull()) ? 
1: 					null:
1: 					Byte.toString(value);
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#getLength 
1: 	 */
1: 	public int	getLength()
1: 	{
1: 		return TINYINT_LENGTH;
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#getObject 
1: 	 */
1: 	public Object	getObject() 
1: 	{
1: 		return (isNull()) ?
1: 					null:
0: 					new Integer(value);
1: 	}
1: 
1: 	// this is for DataType's error generator
1: 	public String getTypeName()
1: 	{
1: 		return TypeId.TINYINT_NAME;
1: 	}
1: 
1: 	/*
1: 	 * Storable interface, implies Externalizable, TypedFormat
1: 	 */
1: 
1: 
1: 	/**
1: 		Return my format identifier.
1: 
1: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1: 	*/
1: 	public int getTypeFormatId() 
1: 	{
1: 		return StoredFormatIds.SQL_TINYINT_ID;
1: 	}
1: 
1: 	/**
1: 	 * @see Storable#isNull
1: 	 */
1: 	public boolean isNull()
1: 	{
1: 		return isnull;
1: 	}
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException {
1: 
1: 		// never called when value is null
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(! isNull());
1: 
1: 		out.writeByte(value);
1: 	}
1: 
1: 	/** @see java.io.Externalizable#readExternal */
1: 	public void readExternal(ObjectInput in) throws IOException {
1: 
1: 		value = in.readByte();
1: 		isnull = false;
1: 	}
0: 	public void readExternalFromArray(ArrayInputStream in) throws IOException {
1: 
1: 		value = in.readByte();
1: 		isnull = false;
1: 	}
1: 
1: 
1: 	/**
1: 	 * @see Storable#restoreToNull
1: 	 *
1: 	 */
1: 	public void restoreToNull()
1: 	{
1: 		value = 0;
1: 		isnull = true;
1: 	}
1: 
1: 	/** @exception StandardException		Thrown on error */
1: 	protected int typeCompare(DataValueDescriptor arg) throws StandardException
1: 	{
1: 		/* neither are null, get the value */
1: 		int thisValue, otherValue;
1: 
1: 		/* Do comparisons with ints to avoid overflow problems */
1: 		thisValue = this.getInt();
1: 		otherValue = arg.getInt();
1: 		if (thisValue == otherValue)
1: 			return 0;
1: 		else if (thisValue > otherValue)
1: 			return 1;
1: 		else
1: 			return -1;
1: 	}
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
0: 	/** @see DataValueDescriptor#getClone */
0: 	public DataValueDescriptor getClone()
1: 	{
1: 		return new SQLTinyint(value, isnull);
1: 	}
1: 
1: 	/**
1: 	 * @see DataValueDescriptor#getNewNull
1: 	 */
1: 	public DataValueDescriptor getNewNull()
1: 	{
1: 		return new SQLTinyint();
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#setValueFromResultSet 
1: 	 *
1: 	 * @exception SQLException		Thrown on error
1: 	 */
1: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
1: 									  boolean isNullable)
1: 		throws SQLException
1: 	{
1: 			value = resultSet.getByte(colNumber);
1: 			isnull = (isNullable && resultSet.wasNull());
1: 	}
1: 	/**
1: 		Set the value into a PreparedStatement.
1: 
1: 		@exception SQLException Error setting value in PreparedStatement
1: 	*/
1: 	public final void setInto(PreparedStatement ps, int position) throws SQLException {
1: 
1: 		if (isNull()) {
1: 			ps.setNull(position, java.sql.Types.TINYINT);
1: 			return;
1: 		}
1: 
1: 		ps.setByte(position, value);
1: 	}
1: 	/**
1: 		Set this value into a ResultSet for a subsequent ResultSet.insertRow
1: 		or ResultSet.updateRow. This method will only be called for non-null values.
1: 
1: 		@exception SQLException thrown by the ResultSet object
1: 		@exception StandardException thrown by me accessing my value.
1: 	*/
1: 	public final void setInto(ResultSet rs, int position) throws SQLException, StandardException {
1: 		rs.updateByte(position, value);
1: 	}
1: 
1: 
1: 	/**
1: 		@exception StandardException thrown if string not accepted
1: 	 */
1: 	public void setValue(String theValue)
1: 		throws StandardException
1: 	{
1: 		if (theValue == null)
1: 		{
1: 			value = 0;
1: 			isnull = true;
1: 		}
1: 		else
1: 		{
1: 		    try {
1: 		        value = Byte.valueOf(theValue.trim()).byteValue();
1: 			} catch (NumberFormatException nfe) {
1: 			    throw invalidFormat();
1: 			}
1: 			isnull = false;
1: 		}
1: 	}
1: 
1: 
1: 	public void setValue(byte theValue)
1: 	{
1: 		value = theValue;
1: 		isnull = false;
1: 	}
1: 
1: 	/**
1: 		@exception StandardException if outsideRangeForTinyint
1: 	 */
1: 	public void setValue(short theValue) throws StandardException
1: 	{
1: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
1: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
1: 		value = (byte)theValue;
1: 		isnull = false;
1: 	}
1: 
1: 	/**
1: 		@exception StandardException if outsideRangeForTinyint
1: 	 */
1: 	public void setValue(int theValue) throws StandardException
1: 	{
1: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
1: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
1: 		value = (byte)theValue;
1: 		isnull = false;
1: 	}
1: 
1: 	/**
1: 		@exception StandardException if outsideRangeForTinyint
1: 	 */
1: 	public void setValue(long theValue) throws StandardException
1: 	{
1: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
1: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
1: 		value = (byte)theValue;
1: 		isnull = false;
1: 	}
1: 
1: 	/**
1: 	 * @see NumberDataValue#setValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public void setValue(float theValue) throws StandardException
1: 	{
1: 		theValue = NumberDataType.normalizeREAL(theValue);
1: 
1: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
1: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
1: 
1: 		float floorValue = (float)Math.floor(theValue);
1: 
1: 		value = (byte)floorValue;
1: 		isnull = false;
1: 
1: 	}
1: 
1: 	/**
1: 	 * @see NumberDataValue#setValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public void setValue(double theValue) throws StandardException
1: 	{
1: 		theValue = NumberDataType.normalizeDOUBLE(theValue);
1: 
1: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
1: 			throw outOfRange();
1: 
1: 		double floorValue = Math.floor(theValue);
1: 
1: 		value = (byte)floorValue;
1: 		isnull = false;
1: 	}
1: 
1: 	/**
1: 	 * @see NumberDataValue#setValue
1: 	 *
1: 	 */
1: 	public void setValue(boolean theValue)
1: 	{
1: 		value = theValue?(byte)1:(byte)0;
1: 		isnull = false;
1: 	}
1: 
1: 	/**
0: 	 * @see DataValueDescriptor#setValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */	
0: 	public void setValue(Object theValue)
1: 		throws StandardException
1: 	{
1: 		if (theValue == null)
1: 		{
0: 			setToNull();
1: 		}
0: 		else if (theValue instanceof Number)
1: 		{
0: 			this.setValue(((Number)theValue).byteValue());
1: 		}
1: 		else
1: 		{
0: 			genericSetObject(theValue);
1: 		}
1: 	}
1: 	protected void setFrom(DataValueDescriptor theValue) throws StandardException {
1: 
1: 		setValue(theValue.getByte());
1: 	}
1: 
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
1: 	/** @see DataValueDescriptor#typePrecedence */
1: 	public int typePrecedence()
1: 	{
1: 		return TypeId.TINYINT_PRECEDENCE;
1: 	}
1: 
1: 	/*
1: 	** SQL Operators
1: 	*/
1: 
1: 	/**
1: 	 * The = operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
1: 	 * @param left			The value on the left side of the =
1: 	 * @param right			The value on the right side of the =
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the two parameters are equal
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue equals(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getByte() == right.getByte());
1: 	}
1: 
1: 	/**
0: 	 * The <> operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
0: 	 * @param left			The value on the left side of the <>
0: 	 * @param right			The value on the right side of the <>
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the two parameters
1: 	 *			are not equal
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue notEquals(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getByte() != right.getByte());
1: 	}
1: 
1: 	/**
0: 	 * The < operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
0: 	 * @param left			The value on the left side of the <
0: 	 * @param right			The value on the right side of the <
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the first operand is less
1: 	 *			than the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue lessThan(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getByte() < right.getByte());
1: 	}
1: 
1: 	/**
0: 	 * The > operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
0: 	 * @param left			The value on the left side of the >
0: 	 * @param right			The value on the right side of the >
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the first operand is greater
1: 	 *			than the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue greaterThan(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getByte() > right.getByte());
1: 	}
1: 
1: 	/**
0: 	 * The <= operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
0: 	 * @param left			The value on the left side of the <=
0: 	 * @param right			The value on the right side of the <=
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the first operand is less
1: 	 *			than or equal to the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue lessOrEquals(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getByte() <= right.getByte());
1: 	}
1: 
1: 	/**
0: 	 * The >= operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
0: 	 * @param left			The value on the left side of the >=
0: 	 * @param right			The value on the right side of the >=
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the first operand is greater
1: 	 *			than or equal to the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue greaterOrEquals(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getByte() >= right.getByte());
1: 	}
1: 
1: 
1: 	/**
0: 	 * This method implements the + operator for "byte + byte".
1: 	 *
0: 	 * @param addend1	One of the addends
0: 	 * @param addend2	The other addend
1: 	 * @param result	The result of a previous call to this method, null
1: 	 *					if not called yet
1: 	 *
0: 	 * @return	A SQLTinyint containing the result of the addition
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public NumberDataValue plus(NumberDataValue addend1,
0: 							NumberDataValue addend2,
1: 							NumberDataValue result)
1: 				throws StandardException
1: 	{
1: 		if (result == null)
1: 		{
1: 			result = new SQLTinyint();
1: 		}
1: 
0: 		if (addend1.isNull() || addend2.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 
1: 		/*
1: 		** Java does not check for overflow with integral types. We have to
1: 		** check the result ourselves.
1: 		**
0: 		** The sum of 2 bytes is an int, so we check to see if the sum
0: 		** is in the range of values for a bytes.
1: 		*/
0: 		int sum = addend1.getByte() + addend2.getByte();
1: 
0: 		result.setValue(sum);
1: 		return result;
1: 	}
1: 
1: 	/**
0: 	 * This method implements the - operator for "tinyint - tinyint".
1: 	 *
0: 	 * @param left	The value to be subtracted from
0: 	 * @param right	The value to be subtracted
1: 	 * @param result	The result of a previous call to this method, null
1: 	 *					if not called yet
1: 	 *
0: 	 * @return	A SQLTinyint containing the result of the subtraction
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public NumberDataValue minus(NumberDataValue left,
1: 							NumberDataValue right,
1: 							NumberDataValue result)
1: 				throws StandardException
1: 	{
1: 		if (result == null)
1: 		{
1: 			result = new SQLTinyint();
1: 		}
1: 
1: 		if (left.isNull() || right.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 
1: 		/*
1: 		** Java does not check for overflow with integral types. We have to
1: 		** check the result ourselves.
1: 		**
0: 		** The difference of 2 bytes is an int, so we check to see if the
0: 		** difference is in the range of values for a byte.
1: 		*/
0: 		int difference = left.getByte() - right.getByte();
1: 
0: 		result.setValue(difference);
1: 		return result;
1: 	}
1: 
1: 	/**
1: 	 * This method implements the * operator for "tinyint * tinyint".
1: 	 *
1: 	 * @param left	The first value to be multiplied
1: 	 * @param right	The second value to be multiplied
1: 	 * @param result	The result of a previous call to this method, null
1: 	 *					if not called yet
1: 	 *
1: 	 * @return	A SQLTinyint containing the result of the multiplication
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public NumberDataValue times(NumberDataValue left,
1: 							NumberDataValue right,
1: 							NumberDataValue result)
1: 				throws StandardException
1: 	{
1: 		if (result == null)
1: 		{
1: 			result = new SQLTinyint();
1: 		}
1: 
1: 		if (left.isNull() || right.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 
1: 		/*
1: 		** Java does not check for overflow with integral types. We have to
1: 		** check the result ourselves.
1: 		**
1: 		** The product of 2 bytes is an int, so we check to see if the product
1: 		** is in the range of values for a byte.
1: 		*/
1: 		int product = left.getByte() * right.getByte();
1: 		result.setValue(product);
1: 		return result;
1: 	}
1: 
1: 	/**
0: 	 * This method implements the / operator for "tinyint / tinyint".
1: 	 *
0: 	 * @param dividend	The numerator
0: 	 * @param divisor	The denominator
1: 	 * @param result	The result of a previous call to this method, null
1: 	 *					if not called yet
1: 	 *
1: 	 * @return	A SQLTinyint containing the result of the division
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public NumberDataValue divide(NumberDataValue dividend,
1: 							 NumberDataValue divisor,
1: 							 NumberDataValue result)
1: 				throws StandardException
1: 	{
0: 		byte	byteDivisor;
1: 
1: 		if (result == null)
1: 		{
1: 			result = new SQLTinyint();
1: 		}
1: 
1: 		if (dividend.isNull() || divisor.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 
1: 		/* Catch divide by 0 */
0: 		byteDivisor = divisor.getByte();
1: 		if (byteDivisor == 0)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_DIVIDE_BY_ZERO);
1: 		}
1: 
0: 		result.setValue((byte) (dividend.getByte() / byteDivisor));
1: 		return result;
1: 	}
1: 	/**
1: 		mod(tinyint, tinyint)
1: 	*/
1: 
1: 	public NumberDataValue mod(NumberDataValue dividend,
1: 							 NumberDataValue divisor,
1: 							 NumberDataValue result)
1: 				throws StandardException
1: 	{
1: 		if (result == null)
1: 		{
1: 			result = new SQLTinyint();
1: 		}
1: 
1: 		if (dividend.isNull() || divisor.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 
1: 		/* Catch divide by 0 */
1: 		byte byteDivisor = divisor.getByte();
1: 		if (byteDivisor == 0)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_DIVIDE_BY_ZERO);
1: 		}
1: 
1: 		result.setValue(dividend.getByte() % byteDivisor);
1: 		return result;
1: 	}
1: 	/**
1: 	 * This method implements the unary minus operator for tinyint.
1: 	 *
1: 	 * @param result	The result of a previous call to this method, null
1: 	 *					if not called yet
1: 	 *
1: 	 * @return	A SQLTinyint containing the result of the division
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public NumberDataValue minus(NumberDataValue result)
1: 									throws StandardException
1: 	{
1: 		if (result == null)
1: 		{
1: 			result = new SQLTinyint();
1: 		}
1: 
1: 		if (this.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 
1: 		int operandValue = this.getByte();
1: 
1: 		result.setValue(-operandValue);
1: 		return result;
1: 	}
1: 
1:     /**
1:      * This method implements the isNegative method.
1:      *
1:      * @return  A boolean.  If this.value is negative, return true.
1:      *          For positive values or null, return false.
1:      */
1: 
1:     protected boolean isNegative()
1:     {
1:         return !isNull() && value < 0;
1:     }
1: 
1: 	/*
1: 	 * String display of value
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (isNull())
1: 			return "NULL";
1: 		else
1: 			return Byte.toString(value);
1: 	}
1: 
1: 
1: 	/*
1: 	 * Hash code
1: 	 */
1: 	public int hashCode()
1: 	{
1: 		return (int) value;
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.services.cache.ClassSize;
0: 
0: import org.apache.derby.iapi.types.NumberDataType;
0: import org.apache.derby.iapi.types.SQLBoolean;
0: 
0: import java.math.BigDecimal;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.sql.ResultSet;
0: import java.sql.PreparedStatement;
0: import java.sql.SQLException;
0: 
0: /**
0:  * SQLTinyint satisfies the DataValueDescriptor
0:  * interfaces (i.e., OrderableDataType). It implements a tinyint column, 
0:  * e.g. for storing a column value; it can be specified
0:  * when constructed to not allow nulls. Nullability cannot be changed
0:  * after construction, as it affects the storage size and mechanism.
0:  * <p>
0:  * Because OrderableDataType is a subtype of ValueColumn,
0:  * SQLTinyint can play a role in either a ValueColumn/Row
0:  * or a OrderableDataType/Row, interchangeably.
0:  * <p>
0:  * We assume the store has a flag for nullness of the value,
0:  * and simply return a 0-length array for the stored form
0:  * when the value is null.
0:  */
0: public final class SQLTinyint
0: 	extends NumberDataType
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/*
0: 	 * constants
0: 	 */
0: 	static final int TINYINT_LENGTH = 1;
0: 
0: 	/*
0: 	 * object state
0: 	 */
0: 	private byte value;
0: 	private boolean isnull;
0: 
0:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( SQLTinyint.class);
0: 
0:     public int estimateMemoryUsage()
0:     {
0:         return BASE_MEMORY_USAGE;
0:     }
0: 
0: 	/*
0: 	 * class interface
0: 	 */
0: 
0: 	/*
0: 	 * Constructors
0: 	 */
0: 
0: 	/**
0: 	 * No-arg constructor, required by Formattable.
0: 	 * This constructor also gets used when we are
0:      * allocating space for a byte.
0: 	 */
0: 	public SQLTinyint() 
0: 	{
0: 		isnull = true;
0: 	}
0: 
0: 	public SQLTinyint(byte val)
0: 	{
0: 		value = val;
0: 	}
0: 
0: 	/* This constructor gets used for the getClone() method */
0: 	public SQLTinyint(byte val, boolean isnull)
0: 	{
0: 		value = val;
0: 		this.isnull = isnull;
0: 	}
0: 
0: 	//////////////////////////////////////////////////////////////
0: 	//
0: 	// DataValueDescriptor interface
0: 	// (mostly implemented in DataType)
0: 	//
0: 	//////////////////////////////////////////////////////////////
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#getInt 
0: 	 */
0: 	public int	getInt()
0: 	{
0: 		return (int) value;
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#getByte 
0: 	 */
0: 	public byte	getByte() 
0: 	{
0: 		return value;
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#getShort 
0: 	 */
0: 	public short	getShort()
0: 	{
0: 		return (short) value;
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#getLong 
0: 	 */
0: 	public long	getLong()
0: 	{
0: 		return (long) value;
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#getFloat 
0: 	 */
0: 	public float	getFloat()
0: 	{
0: 		return (float) value;
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#getDouble 
0: 	 */
0: 	public double	getDouble()
0: 	{
0: 		return (double) value;
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#getBigDecimal 
0: 	 */
0: 	public BigDecimal	getBigDecimal()
0: 	{
0: 		return (isNull()) ?
0: 					null :
0: 					BigDecimal.valueOf(value);
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#getBoolean 
0: 	 */
0: 	public boolean	getBoolean()
0: 	{
0: 		return (value != 0);
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#getString 
0: 	 */
0: 	public String	getString()
0: 	{
0: 		return (isNull()) ? 
0: 					null:
0: 					Byte.toString(value);
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#getLength 
0: 	 */
0: 	public int	getLength()
0: 	{
0: 		return TINYINT_LENGTH;
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#getObject 
0: 	 */
0: 	public Object	getObject() 
0: 	{
0: 		return (isNull()) ?
0: 					null:
0: 					new Integer(value);
0: 	}
0: 
0: 	// this is for DataType's error generator
0: 	public String getTypeName()
0: 	{
0: 		return TypeId.TINYINT_NAME;
0: 	}
0: 
0: 	/*
0: 	 * Storable interface, implies Externalizable, TypedFormat
0: 	 */
0: 
0: 
0: 	/**
0: 		Return my format identifier.
0: 
0: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
0: 	*/
0: 	public int getTypeFormatId() 
0: 	{
0: 		return StoredFormatIds.SQL_TINYINT_ID;
0: 	}
0: 
0: 	/**
0: 	 * @see Storable#isNull
0: 	 */
0: 	public boolean isNull()
0: 	{
0: 		return isnull;
0: 	}
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException {
0: 
0: 		// never called when value is null
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(! isNull());
0: 
0: 		out.writeByte(value);
0: 	}
0: 
0: 	/** @see java.io.Externalizable#readExternal */
0: 	public void readExternal(ObjectInput in) throws IOException {
0: 
0: 		value = in.readByte();
0: 		isnull = false;
0: 	}
0: 	public void readExternalFromArray(ArrayInputStream in) throws IOException {
0: 
0: 		value = in.readByte();
0: 		isnull = false;
0: 	}
0: 
0: 
0: 	/**
0: 	 * @see Storable#restoreToNull
0: 	 *
0: 	 */
0: 	public void restoreToNull()
0: 	{
0: 		value = 0;
0: 		isnull = true;
0: 	}
0: 
0: 	/** @exception StandardException		Thrown on error */
0: 	protected int typeCompare(DataValueDescriptor arg) throws StandardException
0: 	{
0: 		/* neither are null, get the value */
0: 		int thisValue, otherValue;
0: 
0: 		/* Do comparisons with ints to avoid overflow problems */
0: 		thisValue = this.getInt();
0: 		otherValue = arg.getInt();
0: 		if (thisValue == otherValue)
0: 			return 0;
0: 		else if (thisValue > otherValue)
0: 			return 1;
0: 		else
0: 			return -1;
0: 	}
0: 
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 */
0: 
0: 	/** @see DataValueDescriptor#getClone */
0: 	public DataValueDescriptor getClone()
0: 	{
0: 		return new SQLTinyint(value, isnull);
0: 	}
0: 
0: 	/**
0: 	 * @see DataValueDescriptor#getNewNull
0: 	 */
0: 	public DataValueDescriptor getNewNull()
0: 	{
0: 		return new SQLTinyint();
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#setValueFromResultSet 
0: 	 *
0: 	 * @exception SQLException		Thrown on error
0: 	 */
0: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
0: 									  boolean isNullable)
0: 		throws SQLException
0: 	{
0: 			value = resultSet.getByte(colNumber);
0: 			isnull = (isNullable && resultSet.wasNull());
0: 	}
0: 	/**
0: 		Set the value into a PreparedStatement.
0: 
0: 		@exception SQLException Error setting value in PreparedStatement
0: 	*/
0: 	public final void setInto(PreparedStatement ps, int position) throws SQLException {
0: 
0: 		if (isNull()) {
0: 			ps.setNull(position, java.sql.Types.TINYINT);
0: 			return;
0: 		}
0: 
0: 		ps.setByte(position, value);
0: 	}
0: 	/**
0: 		Set this value into a ResultSet for a subsequent ResultSet.insertRow
0: 		or ResultSet.updateRow. This method will only be called for non-null values.
0: 
0: 		@exception SQLException thrown by the ResultSet object
0: 		@exception StandardException thrown by me accessing my value.
0: 	*/
0: 	public final void setInto(ResultSet rs, int position) throws SQLException, StandardException {
0: 		rs.updateByte(position, value);
0: 	}
0: 
0: 
0: 	/**
0: 		@exception StandardException thrown if string not accepted
0: 	 */
0: 	public void setValue(String theValue)
0: 		throws StandardException
0: 	{
0: 		if (theValue == null)
0: 		{
0: 			value = 0;
0: 			isnull = true;
0: 		}
0: 		else
0: 		{
0: 		    try {
0: 		        value = Byte.valueOf(theValue.trim()).byteValue();
0: 			} catch (NumberFormatException nfe) {
0: 			    throw invalidFormat();
0: 			}
0: 			isnull = false;
0: 		}
0: 	}
0: 
0: 
0: 	public void setValue(byte theValue)
0: 	{
0: 		value = theValue;
0: 		isnull = false;
0: 	}
0: 
0: 	/**
0: 		@exception StandardException if outsideRangeForTinyint
0: 	 */
0: 	public void setValue(short theValue) throws StandardException
0: 	{
0: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
0: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
0: 		value = (byte)theValue;
0: 		isnull = false;
0: 	}
0: 
0: 	/**
0: 		@exception StandardException if outsideRangeForTinyint
0: 	 */
0: 	public void setValue(int theValue) throws StandardException
0: 	{
0: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
0: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
0: 		value = (byte)theValue;
0: 		isnull = false;
0: 	}
0: 
0: 	/**
0: 		@exception StandardException if outsideRangeForTinyint
0: 	 */
0: 	public void setValue(long theValue) throws StandardException
0: 	{
0: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
0: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
0: 		value = (byte)theValue;
0: 		isnull = false;
0: 	}
0: 
0: 	/**
0: 	 * @see NumberDataValue#setValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(float theValue) throws StandardException
0: 	{
0: 		theValue = NumberDataType.normalizeREAL(theValue);
0: 
0: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
0: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
0: 
0: 		float floorValue = (float)Math.floor(theValue);
0: 
0: 		value = (byte)floorValue;
0: 		isnull = false;
0: 
0: 	}
0: 
0: 	/**
0: 	 * @see NumberDataValue#setValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(double theValue) throws StandardException
0: 	{
0: 		theValue = NumberDataType.normalizeDOUBLE(theValue);
0: 
0: 		if (theValue > Byte.MAX_VALUE || theValue < Byte.MIN_VALUE)
0: 			throw outOfRange();
0: 
0: 		double floorValue = Math.floor(theValue);
0: 
0: 		value = (byte)floorValue;
0: 		isnull = false;
0: 	}
0: 
0: 	/**
0: 	 * @see NumberDataValue#setValue
0: 	 *
0: 	 */
0: 	public void setValue(boolean theValue)
0: 	{
0: 		value = theValue?(byte)1:(byte)0;
0: 		isnull = false;
0: 	}
0: 
0: 	/**
0: 	 * @see DataValueDescriptor#setValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */	
0: 	public void setValue(Object theValue)
0: 		throws StandardException
0: 	{
0: 		if (theValue == null)
0: 		{
0: 			setToNull();
0: 		}
0: 		else if (theValue instanceof Number)
0: 		{
0: 			this.setValue(((Number)theValue).byteValue());
0: 		}
0: 		else
0: 		{
0: 			genericSetObject(theValue);
0: 		}
0: 	}
0: 	protected void setFrom(DataValueDescriptor theValue) throws StandardException {
0: 
0: 		setValue(theValue.getByte());
0: 	}
0: 
0: 
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 */
0: 
0: 	/** @see DataValueDescriptor#typePrecedence */
0: 	public int typePrecedence()
0: 	{
0: 		return TypeId.TINYINT_PRECEDENCE;
0: 	}
0: 
0: 	/*
0: 	** SQL Operators
0: 	*/
0: 
0: 	/**
0: 	 * The = operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the =
0: 	 * @param right			The value on the right side of the =
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the two parameters are equal
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue equals(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getByte() == right.getByte());
0: 	}
0: 
0: 	/**
0: 	 * The <> operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the <>
0: 	 * @param right			The value on the right side of the <>
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the two parameters
0: 	 *			are not equal
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue notEquals(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getByte() != right.getByte());
0: 	}
0: 
0: 	/**
0: 	 * The < operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the <
0: 	 * @param right			The value on the right side of the <
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the first operand is less
0: 	 *			than the second operand
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue lessThan(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getByte() < right.getByte());
0: 	}
0: 
0: 	/**
0: 	 * The > operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the >
0: 	 * @param right			The value on the right side of the >
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the first operand is greater
0: 	 *			than the second operand
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue greaterThan(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getByte() > right.getByte());
0: 	}
0: 
0: 	/**
0: 	 * The <= operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the <=
0: 	 * @param right			The value on the right side of the <=
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the first operand is less
0: 	 *			than or equal to the second operand
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue lessOrEquals(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getByte() <= right.getByte());
0: 	}
0: 
0: 	/**
0: 	 * The >= operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the >=
0: 	 * @param right			The value on the right side of the >=
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the first operand is greater
0: 	 *			than or equal to the second operand
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue greaterOrEquals(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getByte() >= right.getByte());
0: 	}
0: 
0: 
0: 	/**
0: 	 * This method implements the + operator for "byte + byte".
0: 	 *
0: 	 * @param addend1	One of the addends
0: 	 * @param addend2	The other addend
0: 	 * @param result	The result of a previous call to this method, null
0: 	 *					if not called yet
0: 	 *
0: 	 * @return	A SQLTinyint containing the result of the addition
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public NumberDataValue plus(NumberDataValue addend1,
0: 							NumberDataValue addend2,
0: 							NumberDataValue result)
0: 				throws StandardException
0: 	{
0: 		if (result == null)
0: 		{
0: 			result = new SQLTinyint();
0: 		}
0: 
0: 		if (addend1.isNull() || addend2.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 
0: 		/*
0: 		** Java does not check for overflow with integral types. We have to
0: 		** check the result ourselves.
0: 		**
0: 		** The sum of 2 bytes is an int, so we check to see if the sum
0: 		** is in the range of values for a bytes.
0: 		*/
0: 		int sum = addend1.getByte() + addend2.getByte();
0: 
0: 		result.setValue(sum);
0: 		return result;
0: 	}
0: 
0: 	/**
0: 	 * This method implements the - operator for "tinyint - tinyint".
0: 	 *
0: 	 * @param left	The value to be subtracted from
0: 	 * @param right	The value to be subtracted
0: 	 * @param result	The result of a previous call to this method, null
0: 	 *					if not called yet
0: 	 *
0: 	 * @return	A SQLTinyint containing the result of the subtraction
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public NumberDataValue minus(NumberDataValue left,
0: 							NumberDataValue right,
0: 							NumberDataValue result)
0: 				throws StandardException
0: 	{
0: 		if (result == null)
0: 		{
0: 			result = new SQLTinyint();
0: 		}
0: 
0: 		if (left.isNull() || right.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 
0: 		/*
0: 		** Java does not check for overflow with integral types. We have to
0: 		** check the result ourselves.
0: 		**
0: 		** The difference of 2 bytes is an int, so we check to see if the
0: 		** difference is in the range of values for a byte.
0: 		*/
0: 		int difference = left.getByte() - right.getByte();
0: 
0: 		result.setValue(difference);
0: 		return result;
0: 	}
0: 
0: 	/**
0: 	 * This method implements the * operator for "tinyint * tinyint".
0: 	 *
0: 	 * @param left	The first value to be multiplied
0: 	 * @param right	The second value to be multiplied
0: 	 * @param result	The result of a previous call to this method, null
0: 	 *					if not called yet
0: 	 *
0: 	 * @return	A SQLTinyint containing the result of the multiplication
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public NumberDataValue times(NumberDataValue left,
0: 							NumberDataValue right,
0: 							NumberDataValue result)
0: 				throws StandardException
0: 	{
0: 		if (result == null)
0: 		{
0: 			result = new SQLTinyint();
0: 		}
0: 
0: 		if (left.isNull() || right.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 
0: 		/*
0: 		** Java does not check for overflow with integral types. We have to
0: 		** check the result ourselves.
0: 		**
0: 		** The product of 2 bytes is an int, so we check to see if the product
0: 		** is in the range of values for a byte.
0: 		*/
0: 		int product = left.getByte() * right.getByte();
0: 		result.setValue(product);
0: 		return result;
0: 	}
0: 
0: 	/**
0: 	 * This method implements the / operator for "tinyint / tinyint".
0: 	 *
0: 	 * @param dividend	The numerator
0: 	 * @param divisor	The denominator
0: 	 * @param result	The result of a previous call to this method, null
0: 	 *					if not called yet
0: 	 *
0: 	 * @return	A SQLTinyint containing the result of the division
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public NumberDataValue divide(NumberDataValue dividend,
0: 							 NumberDataValue divisor,
0: 							 NumberDataValue result)
0: 				throws StandardException
0: 	{
0: 		byte	byteDivisor;
0: 
0: 		if (result == null)
0: 		{
0: 			result = new SQLTinyint();
0: 		}
0: 
0: 		if (dividend.isNull() || divisor.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 
0: 		/* Catch divide by 0 */
0: 		byteDivisor = divisor.getByte();
0: 		if (byteDivisor == 0)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_DIVIDE_BY_ZERO);
0: 		}
0: 
0: 		result.setValue((byte) (dividend.getByte() / byteDivisor));
0: 		return result;
0: 	}
0: 	/**
0: 		mod(tinyint, tinyint)
0: 	*/
0: 
0: 	public NumberDataValue mod(NumberDataValue dividend,
0: 							 NumberDataValue divisor,
0: 							 NumberDataValue result)
0: 				throws StandardException
0: 	{
0: 		if (result == null)
0: 		{
0: 			result = new SQLTinyint();
0: 		}
0: 
0: 		if (dividend.isNull() || divisor.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 
0: 		/* Catch divide by 0 */
0: 		byte byteDivisor = divisor.getByte();
0: 		if (byteDivisor == 0)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_DIVIDE_BY_ZERO);
0: 		}
0: 
0: 		result.setValue(dividend.getByte() % byteDivisor);
0: 		return result;
0: 	}
0: 	/**
0: 	 * This method implements the unary minus operator for tinyint.
0: 	 *
0: 	 * @param result	The result of a previous call to this method, null
0: 	 *					if not called yet
0: 	 *
0: 	 * @return	A SQLTinyint containing the result of the division
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public NumberDataValue minus(NumberDataValue result)
0: 									throws StandardException
0: 	{
0: 		if (result == null)
0: 		{
0: 			result = new SQLTinyint();
0: 		}
0: 
0: 		if (this.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 
0: 		int operandValue = this.getByte();
0: 
0: 		result.setValue(-operandValue);
0: 		return result;
0: 	}
0: 
0:     /**
0:      * This method implements the isNegative method.
0:      *
0:      * @return  A boolean.  If this.value is negative, return true.
0:      *          For positive values or null, return false.
0:      */
0: 
0:     protected boolean isNegative()
0:     {
0:         return !isNull() && value < 0;
0:     }
0: 
0: 	/*
0: 	 * String display of value
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (isNull())
0: 			return "NULL";
0: 		else
0: 			return Byte.toString(value);
0: 	}
0: 
0: 
0: 	/*
0: 	 * Hash code
0: 	 */
0: 	public int hashCode()
0: 	{
0: 		return (int) value;
0: 	}
0: }
============================================================================