1:431cefd: /*
1:431cefd: 
1:431cefd:    Derby - Class org.apache.derby.diag.DiagUtil
1:431cefd: 
1:431cefd:    Licensed to the Apache Software Foundation (ASF) under one or more
1:431cefd:    contributor license agreements.  See the NOTICE file distributed with
1:431cefd:    this work for additional information regarding copyright ownership.
1:431cefd:    The ASF licenses this file to You under the Apache License, Version 2.0
1:431cefd:    (the "License"); you may not use this file except in compliance with
1:431cefd:    the License.  You may obtain a copy of the License at
1:431cefd: 
1:431cefd:       http://www.apache.org/licenses/LICENSE-2.0
1:431cefd: 
1:431cefd:    Unless required by applicable law or agreed to in writing, software
1:431cefd:    distributed under the License is distributed on an "AS IS" BASIS,
1:431cefd:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:431cefd:    See the License for the specific language governing permissions and
1:431cefd:    limitations under the License.
1:431cefd: 
1:431cefd:  */
1:431cefd: 
1:431cefd: package org.apache.derby.diag;
1:431cefd: 
1:a0dbbd7: import java.security.AccessController;
1:a0dbbd7: import java.security.PrivilegedAction;
1:a0dbbd7: 
1:431cefd: import org.apache.derby.iapi.error.StandardException;
1:431cefd: import org.apache.derby.iapi.reference.SQLState;
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:431cefd: import org.apache.derby.iapi.services.context.ContextService;
1:431cefd: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:431cefd: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:431cefd: 
1:431cefd: /**
1:431cefd:  * Utility methods for the package of diagnostic vtis.
1:431cefd:  */
1:431cefd: abstract    class   DiagUtil
1:431cefd: {
1:431cefd:     /**
1:431cefd:      * Raise an exception if we are running with SQL authorization turned on
1:431cefd:      * but the current user isn't the database owner. This method is used
1:431cefd:      * to restrict access to VTIs which disclose sensitive information.
1:431cefd:      * See DERBY-5395.
1:431cefd:      */
1:431cefd:     static void    checkAccess()   throws StandardException
1:431cefd:     {
1:431cefd:         LanguageConnectionContext lcc = (LanguageConnectionContext)
1:a0dbbd7:             getContextOrNull(LanguageConnectionContext.CONTEXT_ID);
1:431cefd:         DataDictionary  dd = lcc.getDataDictionary();
1:431cefd: 
1:431cefd:         if ( dd.usesSqlAuthorization() )
1:431cefd:         {
1:431cefd:             String  databaseOwner = dd.getAuthorizationDatabaseOwner();
1:431cefd:             String  currentUser = lcc.getStatementContext().getSQLSessionContext().getCurrentUser();
1:431cefd: 
1:431cefd:             if ( !databaseOwner.equals( currentUser ) )
1:431cefd:             {
1:431cefd:                 throw StandardException.newException( SQLState.DBO_ONLY );
1:431cefd:             }
1:431cefd:         }
1:431cefd:     }
1:a0dbbd7: 
1:431cefd:     
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of a Context. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  Context    getContextOrNull( final String contextID )
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getContextOrNull( contextID );
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<Context>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public Context run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getContextOrNull( contextID );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:431cefd: }
1:431cefd: 
1:431cefd: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: import org.apache.derby.iapi.services.context.Context;
/////////////////////////////////////////////////////////////////////////
1:             getContextOrNull(LanguageConnectionContext.CONTEXT_ID);
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of a Context. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Context    getContextOrNull( final String contextID )
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getContextOrNull( contextID );
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<Context>()
1:                  {
1:                      public Context run()
1:                      {
1:                          return ContextService.getContextOrNull( contextID );
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
commit:431cefd
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.diag.DiagUtil
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.diag;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
1: /**
1:  * Utility methods for the package of diagnostic vtis.
1:  */
1: abstract    class   DiagUtil
1: {
1:     /**
1:      * Raise an exception if we are running with SQL authorization turned on
1:      * but the current user isn't the database owner. This method is used
1:      * to restrict access to VTIs which disclose sensitive information.
1:      * See DERBY-5395.
1:      */
1:     static void    checkAccess()   throws StandardException
1:     {
1:         LanguageConnectionContext lcc = (LanguageConnectionContext)
0:             ContextService.getContextOrNull(LanguageConnectionContext.CONTEXT_ID);
1:         DataDictionary  dd = lcc.getDataDictionary();
1: 
1:         if ( dd.usesSqlAuthorization() )
1:         {
1:             String  databaseOwner = dd.getAuthorizationDatabaseOwner();
1:             String  currentUser = lcc.getStatementContext().getSQLSessionContext().getCurrentUser();
1: 
1:             if ( !databaseOwner.equals( currentUser ) )
1:             {
1:                 throw StandardException.newException( SQLState.DBO_ONLY );
1:             }
1:         }
1:     }
1: 
1: }
1: 
1: 
============================================================================