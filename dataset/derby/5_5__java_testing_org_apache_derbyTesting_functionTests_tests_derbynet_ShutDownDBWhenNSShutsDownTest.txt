1:177992f: /*
2:177992f:  *
1:177992f:  * Derby - Class ShutDownDBWhenNSShutsDownTest
1:177992f:  *
1:dff95a1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:  * contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:  * this work for additional information regarding copyright ownership.
1:dff95a1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:  * (the "License"); you may not use this file except in compliance with
1:dff95a1:  * the License.  You may obtain a copy of the License at
1:177992f:  *
1:177992f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:177992f:  *
1:177992f:  * Unless required by applicable law or agreed to in writing,
1:177992f:  * software distributed under the License is distributed on an
1:177992f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:177992f:  * either express or implied. See the License for the specific
1:177992f:  * language governing permissions and limitations under the License.
1:177992f:  */
1:177992f: 
1:177992f: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:177992f: 
1:177992f: import java.io.File;
1:0c9f73e: import java.sql.Connection;
1:0c9f73e: import java.sql.SQLException;
1:0c9f73e: import java.sql.Statement;
1:0c9f73e: import junit.framework.Test;
1:177992f: import org.apache.derby.drda.NetworkServerControl;
1:9d44c9e: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:0c9f73e: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:0c9f73e: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1:0c9f73e: import org.apache.derbyTesting.junit.TestConfiguration;
1:177992f: 
1:177992f: /**
1:177992f:  * Derby-1274 - Network Server should shutdown the databases it has booted when
1:177992f:  * started from the command line.
1:177992f:  *
1:177992f:  * Tests that the network server will shutdown the databases it has booted when
1:177992f:  * started from the command line and that it will not shut down the databases
1:177992f:  * when started from the API.
1:177992f:  */
1:11a5a28: public class ShutDownDBWhenNSShutsDownTest extends BaseJDBCTestCase {
1:177992f:     
1:177992f:     /**
1:0c9f73e:      * Only run the fixtures in network server mode as that's what they are testing.
1:0c9f73e:      */
1:0c9f73e:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ShutDownDBWhenNSShutsDownTest");
1:177992f:         
1:0c9f73e:         suite.addTest(TestConfiguration.clientServerDecorator(
1:0c9f73e:            new ShutDownDBWhenNSShutsDownTest(
1:0c9f73e:                    "testEngineShutdownDoesNotTakeDownNSManualReload")));
1:177992f: 
1:0c9f73e:         /* DERBY-2066
1:0c9f73e:         suite.addTest(TestConfiguration.clientServerDecorator(
1:0c9f73e:                 new ShutDownDBWhenNSShutsDownTest(
1:0c9f73e:                         "testEngineShutdownDoesNotTakeDownNSAutoReload")));
1:0c9f73e:         */
1:177992f:         
1:0c9f73e:         suite.addTest(TestConfiguration.clientServerDecorator(
1:0c9f73e:                 new ShutDownDBWhenNSShutsDownTest(
1:0c9f73e:                         "testDatabasesShutDownWhenNSShutdownAPI")));
1:177992f:       
1:0c9f73e:         return suite;
5:177992f:     }
1:177992f: 
1:177992f: 
1:0c9f73e:     /**
1:177992f:      * Creates a new instance of ShutDownDBWhenNSShutsDownTest
1:177992f:      */
1:177992f:     public ShutDownDBWhenNSShutsDownTest(String name) {
1:177992f:         super(name);
1:177992f:     }
1:177992f:     
1:177992f:     /**
1:0c9f73e:      * Test the scenario from scenarioEngineShutdownDoesNotTakeDownNS
1:0c9f73e:      * reloading the embedded driver after the network server has shutdown.
1:0c9f73e:      * @throws Exception
1:0c9f73e:      */
1:0c9f73e:     public void testEngineShutdownDoesNotTakeDownNSManualReload() throws Exception
1:0c9f73e:     {
1:0c9f73e:         scenarioEngineShutdownDoesNotTakeDownNS(true);
1:177992f:     }
1:177992f:  
1:0c9f73e:     /**
1:0c9f73e:      * Test the scenario from scenarioEngineShutdownDoesNotTakeDownNS
1:0c9f73e:      * relying on the network server to reloading the embedded driver
1:0c9f73e:      * after the network server has shutdown.
1:0c9f73e:      * @throws Exception
1:0c9f73e:      */
1:0c9f73e:     public void testEngineShutdownDoesNotTakeDownNSAutoReload() throws Exception
1:0c9f73e:     {
1:0c9f73e:         scenarioEngineShutdownDoesNotTakeDownNS(false);
1:177992f:     }
1:177992f:     
1:0c9f73e:     /**
1:57fd882:      * Test that a shutdown of the engine does not take down the network
1:57fd882:      * server. Before DERBY-1326 was fixed, shutting down the engine would
1:57fd882:      * leave the network server in an inconsistent state which could make
1:57fd882:      * clients hang infinitely.
1:57fd882:      */
1:0c9f73e:     private void scenarioEngineShutdownDoesNotTakeDownNS(
1:0c9f73e:             boolean loadEmbeddedDriver) throws Exception {
1:177992f:             
1:177992f:         
1:57fd882:         Connection[] conns = new Connection[20];
1:57fd882: 
1:57fd882:         // first make sure there are 20 active worker threads on the server
1:57fd882:         for (int i = 0; i < conns.length; i++) {
1:57fd882:             conns[i] = openDefaultConnection();
1:57fd882:         }
1:57fd882: 
1:57fd882:         // then close them, leaving 20 free worker threads ready to pick up new
1:57fd882:         // sessions
1:57fd882:         for (int i = 0; i < conns.length; i++) {
1:57fd882:             conns[i].close();
1:3b26923:             conns[i] = null;
1:57fd882:         }
1:57fd882: 
1:57fd882:         // Give the free threads a little time to close their sessions. This is
1:57fd882:         // done to ensure that there are free threads waiting for new sessions,
1:57fd882:         // which makes the DERBY-1326 hang more reliably reproducible.
1:57fd882:         Thread.sleep(500);
1:57fd882: 
1:57fd882:         // shut down the engine
1:45da985:         TestConfiguration.getCurrent().shutdownEngine();
1:4469400: 
1:4469400:         Class<?> clazz;
1:0c9f73e:         if (loadEmbeddedDriver)
1:4469400:         {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
1:4469400:             clazz.getConstructor().newInstance();
1:4469400:         }
1:57fd882: 
1:57fd882:         // see if it is still possible to connect to the server (before
1:57fd882:         // DERBY-1326, this would hang)
1:57fd882:         for (int i = 0; i < 20; i++) {
1:57fd882:             openDefaultConnection().close();
1:57fd882:         }
1:57fd882:     }
1:57fd882:     
1:57fd882:     /**
1:0c9f73e:      * Test that the NetworkServer does not shut down the
1:177992f:      * databases it has booted when started from the API.
1:0c9f73e:      * This fixture must be run with a clientServerDecorator().
1:177992f:      */
1:0c9f73e:     public void testDatabasesShutDownWhenNSShutdownAPI()
1:177992f:             throws Exception
1:177992f:     {
1:177992f:         // Check that the databases will not be shutdown when the server is
1:177992f:         // shut down.
1:177992f:         shutdownServerCheckDBShutDown(false);
1:57fd882:     }
1:177992f:     
1:0c9f73e:     /**
1:177992f:      * Test that the NetworkServer shuts down the databases it has booted when
1:177992f:      * started from the command line, and that it does not shut down the
1:0c9f73e:      * databases it has booted when started from the API.
1:0c9f73e:      */
1:0c9f73e:     public void XXtestDatabasesShutDownWhenNSShutdown()
1:0c9f73e:             throws Exception
1:0c9f73e:     {
1:177992f:          // The server was started from the command line when the test was
1:177992f:         // started. Check that the database will be shut down when the server
1:177992f:         // is shut down.
1:177992f:         shutdownServerCheckDBShutDown(true);
1:177992f:     }
1:177992f: 
1:177992f:     /**
1:177992f:      * Checks whether the server shuts down causes the databases it has booted
1:177992f:      * to be shut down.
1:177992f:      *
1:177992f:      * Creates a database and shuts down the server. If the server was started
1:177992f:      * from the command line the database should be shut down. If the server
1:177992f:      * was started from the api the database should not be shut down.
1:177992f:      *
1:177992f:      * If the database has been shut down the db.lck file should not exist.
1:177992f:      *
1:177992f:      * @param dbShutDown Indicates whether the database should have been shut
1:177992f:      * down.
1:177992f:      */
1:177992f:     private void shutdownServerCheckDBShutDown(boolean dbShutDown)
1:177992f:             throws Exception
1:177992f:     {
1:177992f:         // connect to database
1:177992f:         createDatabase();
1:177992f:         
1:0c9f73e:         NetworkServerControl server = NetworkServerTestSetup.getNetworkServerControl();
1:177992f: 
1:177992f:         // shut down the server
1:177992f:         server.shutdown();
1:177992f: 
1:177992f:         // check if db.lck exists
1:177992f:         String fileName = getSystemProperty("derby.system.home") +
1:0c9f73e:                 java.io.File.separator +
1:3df869c:                 TestConfiguration.getCurrent().getDefaultDatabaseName() +
1:177992f:                 java.io.File.separator + "db.lck";
1:c9a2190: 
1:9d44c9e:         File lockFile = new File(fileName);
1:9d44c9e: 
1:c9a2190:         boolean fileNotFound = false;
1:c9a2190:         int i = 0;
1:c9a2190:         do {
1:c9a2190:             Thread.sleep(500);
1:9d44c9e:             fileNotFound = !PrivilegedFileOpsForTests.exists(lockFile);
1:c9a2190:             i ++;
1:c9a2190:         } while (fileNotFound != dbShutDown && i < 120);
1:c9a2190: 
1:c9a2190:         assertEquals("Database is shut down", dbShutDown, fileNotFound);
1:177992f:     }
1:177992f: 
1:177992f:     private void createDatabase() throws SQLException {
1:03a99e2:         Connection conn = getConnection();
1:177992f:         conn.setAutoCommit(false);
1:177992f:         Statement st = conn.createStatement();
1:177992f:         st.execute("CREATE TABLE T1 (a int)");
1:177992f:         st.execute("INSERT INTO T1 VALUES (1), (2), (3), (4), (5)");
1:177992f:         st.execute("DROP TABLE T1");
1:177992f:         conn.commit();
1:11a5a28:         conn.close();
1:177992f:     }
1:177992f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: 
1:         Class<?> clazz;
1:         {
1:             clazz = Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
1:             clazz.getConstructor().newInstance();
1:         }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ShutDownDBWhenNSShutsDownTest");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
/////////////////////////////////////////////////////////////////////////
1:         File lockFile = new File(fileName);
1: 
1:             fileNotFound = !PrivilegedFileOpsForTests.exists(lockFile);
commit:57fd882
/////////////////////////////////////////////////////////////////////////
1:      * Test that a shutdown of the engine does not take down the network
1:      * server. Before DERBY-1326 was fixed, shutting down the engine would
1:      * leave the network server in an inconsistent state which could make
1:      * clients hang infinitely.
1:      */
0:     public void testEngineShutdownDoesNotTakeDownNS() throws Exception {
1:         Connection[] conns = new Connection[20];
1: 
1:         // first make sure there are 20 active worker threads on the server
1:         for (int i = 0; i < conns.length; i++) {
1:             conns[i] = openDefaultConnection();
1:         }
1: 
1:         // then close them, leaving 20 free worker threads ready to pick up new
1:         // sessions
1:         for (int i = 0; i < conns.length; i++) {
1:             conns[i].close();
1:         }
1: 
1:         // Give the free threads a little time to close their sessions. This is
1:         // done to ensure that there are free threads waiting for new sessions,
1:         // which makes the DERBY-1326 hang more reliably reproducible.
1:         Thread.sleep(500);
1: 
1:         // shut down the engine
0:         try {
0:             getConnection("", "shutdown=true");
0:             fail("shutdown didn't raise exception");
0:         } catch (SQLException sqle) {
0:             assertSQLState("XJ015", sqle);
1:         }
1: 
1:         // see if it is still possible to connect to the server (before
1:         // DERBY-1326, this would hang)
1:         for (int i = 0; i < 20; i++) {
1:             openDefaultConnection().close();
1:         }
1:     }
1: 
1:     /**
commit:c9a2190
/////////////////////////////////////////////////////////////////////////
1: 
1:         boolean fileNotFound = false;
1:         int i = 0;
1:         do {
1:             Thread.sleep(500);
0:             fileNotFound = !fileExists(fileName);
1:             i ++;
1:         } while (fileNotFound != dbShutDown && i < 120);
1: 
1:         assertEquals("Database is shut down", dbShutDown, fileNotFound);
commit:177992f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class ShutDownDBWhenNSShutsDownTest
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License")
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
0: import java.util.Properties;
0: import org.apache.derbyTesting.functionTests.util.BaseTestCase;
0: import org.apache.derbyTesting.functionTests.util.TestUtil;
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: import org.apache.derby.drda.NetworkServerControl;
1: 
0: import junit.framework.*;
0: import java.sql.*;
0: import java.io.PrintWriter;
1: import java.io.File;
0: import java.security.AccessController;
1: 
1: /**
1:  * Derby-1274 - Network Server should shutdown the databases it has booted when
1:  * started from the command line.
1:  *
1:  * Tests that the network server will shutdown the databases it has booted when
1:  * started from the command line and that it will not shut down the databases
1:  * when started from the API.
1:  */
0: public class ShutDownDBWhenNSShutsDownTest extends BaseTestCase {
1: 
1: 
0:     NetworkServerControl server = null;
1: 
1: 
1:     /**
1:      * Creates a new instance of ShutDownDBWhenNSShutsDownTest
1:      */
1:     public ShutDownDBWhenNSShutsDownTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Test that the NetworkServer shuts down the databases it has booted when
1:      * started from the command line, and that it does not shut down the
1:      * databases it has booted when started from the API.
1:      */
0:     public void testDatabasesShutDownWhenNSShutdown()
1:             throws Exception
1:     {
0:         server = new NetworkServerControl();
1:         // The server was started from the command line when the test was
1:         // started. Check that the database will be shut down when the server
1:         // is shut down.
1:         shutdownServerCheckDBShutDown(true);
1: 
0:         // Start the server form the API and test that the databases will not
0:         // be shutdown when the server is shutdown
0:         server.start(null);
1: 
0:         // wait until the server accepts connections
0:         int i = 0;
0:         while (!pingServer() && i < 10 ) {
0:             Thread.sleep(1000);
0:             i++;
1:         }
1: 
1:         // Check that the databases will not be shutdown when the server is
1:         // shut down.
1:         shutdownServerCheckDBShutDown(false);
1:     }
1: 
1:     /**
1:      * Checks whether the server shuts down causes the databases it has booted
1:      * to be shut down.
1:      *
1:      * Creates a database and shuts down the server. If the server was started
1:      * from the command line the database should be shut down. If the server
1:      * was started from the api the database should not be shut down.
1:      *
1:      * If the database has been shut down the db.lck file should not exist.
1:      *
1:      * @param dbShutDown Indicates whether the database should have been shut
1:      * down.
1:      */
1:     private void shutdownServerCheckDBShutDown(boolean dbShutDown)
1:             throws Exception
1:     {
1:         // connect to database
1:         createDatabase();
1: 
1:         // shut down the server
0:         shutdownServer();
1: 
1:         // check if db.lck exists
1:         String fileName = getSystemProperty("derby.system.home") +
0:                 java.io.File.separator + "wombat" +
1:                 java.io.File.separator + "db.lck";
0:         assertEquals("Database is shut down",
0:                 dbShutDown,
0:                 !fileExists(fileName));
1:     }
1: 
0:     private boolean fileExists (final String fileName) throws Exception {
0:         Boolean b = (Boolean) AccessController.doPrivileged
0:             (new java.security.PrivilegedAction(){
0:                 public Object run(){
0:                     File file = new File(fileName);
0:                     return new Boolean(file.exists());
1:                 }
0:         });
1: 
0:         return b.booleanValue();
1:     }
1: 
0:     private boolean pingServer() {
0: 		try {
0: 			server.ping();
1: 		}
0: 		catch (Exception e) {
0: 			return false;
1: 		}
0: 		return true;
1:     }
1: 
1:     private void createDatabase() throws SQLException {
0:         Connection conn = BaseJDBCTestCase.getConnection();
1:         conn.setAutoCommit(false);
1:         Statement st = conn.createStatement();
1:         st.execute("CREATE TABLE T1 (a int)");
1:         st.execute("INSERT INTO T1 VALUES (1), (2), (3), (4), (5)");
1:         st.execute("DROP TABLE T1");
1:         conn.commit();
1:     }
1: 
0:     private void shutdownServer() throws Exception {
1:         server.shutdown();
1:     }
1: 
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3df869c
/////////////////////////////////////////////////////////////////////////
1:                 TestConfiguration.getCurrent().getDefaultDatabaseName() +
commit:3b26923
/////////////////////////////////////////////////////////////////////////
1:             conns[i] = null;
commit:0c9f73e
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: 
0: import org.apache.derby.drda.NetworkServerControl;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Only run the fixtures in network server mode as that's what they are testing.
0:      * @return
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("ShutDownDBWhenNSShutsDownTest");
0:         
1:         suite.addTest(TestConfiguration.clientServerDecorator(
1:            new ShutDownDBWhenNSShutsDownTest(
1:                    "testEngineShutdownDoesNotTakeDownNSManualReload")));
1:         /* DERBY-2066
1:         suite.addTest(TestConfiguration.clientServerDecorator(
1:                 new ShutDownDBWhenNSShutsDownTest(
1:                         "testEngineShutdownDoesNotTakeDownNSAutoReload")));
1:         */
0:         
1:         suite.addTest(TestConfiguration.clientServerDecorator(
1:                 new ShutDownDBWhenNSShutsDownTest(
1:                         "testDatabasesShutDownWhenNSShutdownAPI")));
0:       
1:         return suite;
0:     }
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Test the scenario from scenarioEngineShutdownDoesNotTakeDownNS
1:      * reloading the embedded driver after the network server has shutdown.
1:      * @throws Exception
1:      */
1:     public void testEngineShutdownDoesNotTakeDownNSManualReload() throws Exception
1:     {
1:         scenarioEngineShutdownDoesNotTakeDownNS(true);
0:     }
0:  
1:     /**
1:      * Test the scenario from scenarioEngineShutdownDoesNotTakeDownNS
1:      * relying on the network server to reloading the embedded driver
1:      * after the network server has shutdown.
1:      * @throws Exception
1:      */
1:     public void testEngineShutdownDoesNotTakeDownNSAutoReload() throws Exception
1:     {
1:         scenarioEngineShutdownDoesNotTakeDownNS(false);
0:     }
0:     
1:     private void scenarioEngineShutdownDoesNotTakeDownNS(
1:             boolean loadEmbeddedDriver) throws Exception {
0:             
0:         
/////////////////////////////////////////////////////////////////////////
0:         
1:         if (loadEmbeddedDriver)
0:             Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Test that the NetworkServer does not shut down the
1:      * databases it has booted when started from the API.
1:      * This fixture must be run with a clientServerDecorator().
1:      */
1:     public void testDatabasesShutDownWhenNSShutdownAPI()
1:             throws Exception
1:     {
0:         // Check that the databases will not be shutdown when the server is
0:         // shut down.
0:         shutdownServerCheckDBShutDown(false);
0:     }
0:     
1:     public void XXtestDatabasesShutDownWhenNSShutdown()
0:          // The server was started from the command line when the test was
/////////////////////////////////////////////////////////////////////////
0:         
1:         NetworkServerControl server = NetworkServerTestSetup.getNetworkServerControl();
0:         server.shutdown();
1:                 java.io.File.separator +
0:                 TestConfiguration.getCurrent().getDatabaseName() +
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:45da985
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         TestConfiguration.getCurrent().shutdownEngine();
commit:03a99e2
/////////////////////////////////////////////////////////////////////////
1:         Connection conn = getConnection();
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.BaseTestCase;
commit:11a5a28
/////////////////////////////////////////////////////////////////////////
1: public class ShutDownDBWhenNSShutsDownTest extends BaseJDBCTestCase {
/////////////////////////////////////////////////////////////////////////
0:         Connection conn = getXConnection();
1:         conn.close();
============================================================================