1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.cache.Cacheable
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.cache;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Any object that implements this interface can be cached using the services of
1:eac0369: 	the CacheManager/CacheFactory. In addition to implementing this interface the
1:eac0369: 	class must be public and it must have a public no-arg constructor. This is because
1:eac0369: 	the cache manager will construct objects itself and then set their identity
1:eac0369: 	by calling the setIdentity method.
1:eac0369: 	<P>
1:eac0369: 	A Cacheable object has five states:
1:eac0369: 	<OL>
1:eac0369: 	<OL>
1:eac0369: 	<LI> No identity - The object is only accessable by the cache manager
1:eac0369: 	<LI> Identity, clean, unkept - The object has an identity, is clean but is only accessable by the cache manager
1:eac0369: 	<LI> Identity, clean, kept - The object has an identity, is clean, and is in use by one or more threads 
1:eac0369: 	<LI> Identity, kept, dirty - The object has an identity, is dirty, and is in use by one or more threads 
1:eac0369: 	<LI> Identity, unkept, dirty - The object has an identity, is dirty but is only accessable by the cache manager
1:eac0369: 	</OL>
1:eac0369: 	</OL>
1:eac0369: 	<BR>
1:eac0369: 	While the object is kept it is guaranteed
1:eac0369: 	not to change identity. While it is unkept no-one outside of the
1:eac0369: 	cache manager can have a reference to the object.
1:eac0369: 	The cache manager returns kept objects and they return to the unkept state
1:eac0369: 	when all the current users of the object have released it.
1:eac0369: 	<BR>
1:eac0369: 	It is required that the object can only move into a dirty state while it is kept.
1:eac0369: 
1:eac0369: 	<BR> MT - Mutable : thread aware - Calls to Cacheable method must only be made by the
1:eac0369: 	cache manager or the object itself.
1:eac0369: 
1:eac0369: 	@see CacheManager
1:eac0369: 	@see CacheFactory
1:eac0369: 	@see Class#newInstance
1:eac0369: */
1:eac0369: public interface Cacheable  {
1:eac0369: 
1:eac0369: 	/**
1:d1d5ad1:         Set the identity of the object.
1:d1d5ad1:         <p>
1:eac0369: 		Set the identity of the object to represent an item that already exists,
1:eac0369: 		e.g. an existing container.
1:eac0369: 		The object will be in the No Identity state,
1:eac0369: 		ie. it will have just been created or clearIdentity() was just called. 
1:eac0369: 		<BR>
1:eac0369: 		The object must copy the information out of key, not just store a reference to key.
1:eac0369: 		After this call the expression getIdentity().equals(key) must return true.
1:eac0369: 		<BR>
1:eac0369: 		If the class of the object needs to change (e.g. to support a different format)
1:eac0369: 		then the object should create a new object, call its initParameter() with the parameters
1:eac0369: 		the original object was called with, set its identity and return a reference to it. The cache
1:eac0369: 		manager will discard the reference to the old object. 
1:eac0369: 		<BR>
1:eac0369: 		If an exception is thrown the object must be left in the no-identity state.
1:eac0369: 
1:eac0369: 		<BR> MT - single thread required - Method must only be called be cache manager
1:eac0369: 		and the cache manager will guarantee only one thread can be calling it.
1:eac0369: 
1:eac0369: 		@return an object reference if the object can take on the identity, null otherwise.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby Policy
1:eac0369: 
1:eac0369: 		@see CacheManager#find
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public Cacheable setIdentity(Object key) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:d1d5ad1:         Create a new item.
1:d1d5ad1:         <p>
1:eac0369: 		Create a new item and set the identity of the object to represent it.
1:eac0369: 		The object will be in the No Identity state,
1:eac0369: 		ie. it will have just been created or clearIdentity() was just called. 
1:eac0369: 		<BR>
1:eac0369: 		The object must copy the information out of key, not just store a reference to key
1:eac0369: 		if the key is not immutable.
1:eac0369: 		After this call the expression getIdentity().equals(key) must return true.
1:eac0369: 		<BR>
1:eac0369: 		<BR>
1:eac0369: 		If the class of the object needs to change (e.g. to support a different format)
1:eac0369: 		then the object should create a new object, call its initParameter() with the parameters
1:eac0369: 		the original object was called with, set its identity and return a reference to it. The cache
1:eac0369: 		manager will discard the reference to the old object. 
1:eac0369: 		<BR>
1:eac0369: 		If an exception is thrown the object must be left in the no-identity state.
1:eac0369: 
1:eac0369: 		<BR> MT - single thread required - Method must only be called be cache manager
1:eac0369: 		and the cache manager will guarantee only one thread can be calling it.
1:eac0369: 
1:eac0369: 		@return an object reference if the object can take on the identity, null otherwise.
1:eac0369: 
1:eac0369: 		@exception StandardException If forCreate is true and the object cannot be created.
1:eac0369: 
1:eac0369: 		@see CacheManager#create
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Put the object into the No Identity state. 
1:eac0369: 
1:eac0369: 		<BR> MT - single thread required - Method must only be called be cache manager
1:eac0369: 		and the cache manager will guarantee only one thread can be calling it.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public void clearIdentity();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the identity of this object.
1:eac0369: 
1:eac0369: 		<BR> MT - thread safe.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public Object getIdentity();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Returns true of the object is dirty. 
1:eac0369: 		May be called when the object is kept or unkept.
1:eac0369: 
1:eac0369: 		<BR> MT - thread safe 
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public boolean isDirty();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Clean the object.
1:eac0369: 		It is up to the object to ensure synchronization of the isDirty()
1:eac0369: 		and clean() method calls.
1:eac0369: 		<BR>
1:eac0369: 		If forRemove is true then the 
1:eac0369: 		object is being removed due to an explict remove request, in this case
1:eac0369: 		the cache manager will have called this method regardless of the
1:eac0369: 		state of the isDirty() 
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		If an exception is thrown the object must be left in the clean state.
1:eac0369: 
1:eac0369: 		<BR> MT - thread safe - Can be called at any time by the cache manager, it is the
1:eac0369: 		responsibility of the object implementing Cacheable to ensure any users of the
1:eac0369: 		object do not conflict with the clean call.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public void clean(boolean forRemove) throws StandardException;
1:eac0369: }
1:eac0369: 
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby Policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:d1d5ad1
/////////////////////////////////////////////////////////////////////////
1:         Set the identity of the object.
1:         <p>
/////////////////////////////////////////////////////////////////////////
1:         Create a new item.
1:         <p>
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.cache.Cacheable
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.cache
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.cache;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1: 	Any object that implements this interface can be cached using the services of
1: 	the CacheManager/CacheFactory. In addition to implementing this interface the
1: 	class must be public and it must have a public no-arg constructor. This is because
1: 	the cache manager will construct objects itself and then set their identity
1: 	by calling the setIdentity method.
1: 	<P>
1: 	A Cacheable object has five states:
1: 	<OL>
1: 	<OL>
1: 	<LI> No identity - The object is only accessable by the cache manager
1: 	<LI> Identity, clean, unkept - The object has an identity, is clean but is only accessable by the cache manager
1: 	<LI> Identity, clean, kept - The object has an identity, is clean, and is in use by one or more threads 
1: 	<LI> Identity, kept, dirty - The object has an identity, is dirty, and is in use by one or more threads 
1: 	<LI> Identity, unkept, dirty - The object has an identity, is dirty but is only accessable by the cache manager
1: 	</OL>
1: 	</OL>
1: 	<BR>
1: 	While the object is kept it is guaranteed
1: 	not to change identity. While it is unkept no-one outside of the
1: 	cache manager can have a reference to the object.
1: 	The cache manager returns kept objects and they return to the unkept state
1: 	when all the current users of the object have released it.
1: 	<BR>
1: 	It is required that the object can only move into a dirty state while it is kept.
1: 
1: 	<BR> MT - Mutable : thread aware - Calls to Cacheable method must only be made by the
1: 	cache manager or the object itself.
1: 
1: 	@see CacheManager
1: 	@see CacheFactory
1: 	@see Class#newInstance
1: */
1: public interface Cacheable  {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 		Set the identity of the object to represent an item that already exists,
1: 		e.g. an existing container.
1: 		The object will be in the No Identity state,
1: 		ie. it will have just been created or clearIdentity() was just called. 
1: 		<BR>
1: 		The object must copy the information out of key, not just store a reference to key.
1: 		After this call the expression getIdentity().equals(key) must return true.
1: 		<BR>
1: 		If the class of the object needs to change (e.g. to support a different format)
1: 		then the object should create a new object, call its initParameter() with the parameters
1: 		the original object was called with, set its identity and return a reference to it. The cache
1: 		manager will discard the reference to the old object. 
1: 		<BR>
1: 		If an exception is thrown the object must be left in the no-identity state.
1: 
1: 		<BR> MT - single thread required - Method must only be called be cache manager
1: 		and the cache manager will guarantee only one thread can be calling it.
1: 
1: 		@return an object reference if the object can take on the identity, null otherwise.
1: 
0: 		@exception StandardException Standard Cloudscape Policy
1: 
1: 		@see CacheManager#find
1: 
1: 	*/
1: 	public Cacheable setIdentity(Object key) throws StandardException;
1: 
1: 	/**
1: 		Create a new item and set the identity of the object to represent it.
1: 		The object will be in the No Identity state,
1: 		ie. it will have just been created or clearIdentity() was just called. 
1: 		<BR>
1: 		The object must copy the information out of key, not just store a reference to key
1: 		if the key is not immutable.
1: 		After this call the expression getIdentity().equals(key) must return true.
1: 		<BR>
1: 		<BR>
1: 		If the class of the object needs to change (e.g. to support a different format)
1: 		then the object should create a new object, call its initParameter() with the parameters
1: 		the original object was called with, set its identity and return a reference to it. The cache
1: 		manager will discard the reference to the old object. 
1: 		<BR>
1: 		If an exception is thrown the object must be left in the no-identity state.
1: 
1: 		<BR> MT - single thread required - Method must only be called be cache manager
1: 		and the cache manager will guarantee only one thread can be calling it.
1: 
1: 		@return an object reference if the object can take on the identity, null otherwise.
1: 
1: 		@exception StandardException If forCreate is true and the object cannot be created.
1: 
1: 		@see CacheManager#create
1: 
1: 	*/
1: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException;
1: 
1: 
1: 	/**
1: 		Put the object into the No Identity state. 
1: 
1: 		<BR> MT - single thread required - Method must only be called be cache manager
1: 		and the cache manager will guarantee only one thread can be calling it.
1: 
1: 	*/
1: 	public void clearIdentity();
1: 
1: 	/**
1: 		Get the identity of this object.
1: 
1: 		<BR> MT - thread safe.
1: 
1: 	*/
1: 	public Object getIdentity();
1: 
1: 
1: 	/**
1: 		Returns true of the object is dirty. 
1: 		May be called when the object is kept or unkept.
1: 
1: 		<BR> MT - thread safe 
1: 
1: 	*/
1: 	public boolean isDirty();
1: 
1: 	/**
1: 		Clean the object.
1: 		It is up to the object to ensure synchronization of the isDirty()
1: 		and clean() method calls.
1: 		<BR>
1: 		If forRemove is true then the 
1: 		object is being removed due to an explict remove request, in this case
1: 		the cache manager will have called this method regardless of the
1: 		state of the isDirty() 
1: 
1: 		<BR>
1: 		If an exception is thrown the object must be left in the clean state.
1: 
1: 		<BR> MT - thread safe - Can be called at any time by the cache manager, it is the
1: 		responsibility of the object implementing Cacheable to ensure any users of the
1: 		object do not conflict with the clean call.
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 
1: 	*/
1: 	public void clean(boolean forRemove) throws StandardException;
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.cache
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.cache;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0: 	Any object that implements this interface can be cached using the services of
0: 	the CacheManager/CacheFactory. In addition to implementing this interface the
0: 	class must be public and it must have a public no-arg constructor. This is because
0: 	the cache manager will construct objects itself and then set their identity
0: 	by calling the setIdentity method.
0: 	<P>
0: 	A Cacheable object has five states:
0: 	<OL>
0: 	<OL>
0: 	<LI> No identity - The object is only accessable by the cache manager
0: 	<LI> Identity, clean, unkept - The object has an identity, is clean but is only accessable by the cache manager
0: 	<LI> Identity, clean, kept - The object has an identity, is clean, and is in use by one or more threads 
0: 	<LI> Identity, kept, dirty - The object has an identity, is dirty, and is in use by one or more threads 
0: 	<LI> Identity, unkept, dirty - The object has an identity, is dirty but is only accessable by the cache manager
0: 	</OL>
0: 	</OL>
0: 	<BR>
0: 	While the object is kept it is guaranteed
0: 	not to change identity. While it is unkept no-one outside of the
0: 	cache manager can have a reference to the object.
0: 	The cache manager returns kept objects and they return to the unkept state
0: 	when all the current users of the object have released it.
0: 	<BR>
0: 	It is required that the object can only move into a dirty state while it is kept.
0: 
0: 	<BR> MT - Mutable : thread aware - Calls to Cacheable method must only be made by the
0: 	cache manager or the object itself.
0: 
0: 	@see CacheManager
0: 	@see CacheFactory
0: 	@see Class#newInstance
0: */
0: public interface Cacheable  {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		Set the identity of the object to represent an item that already exists,
0: 		e.g. an existing container.
0: 		The object will be in the No Identity state,
0: 		ie. it will have just been created or clearIdentity() was just called. 
0: 		<BR>
0: 		The object must copy the information out of key, not just store a reference to key.
0: 		After this call the expression getIdentity().equals(key) must return true.
0: 		<BR>
0: 		If the class of the object needs to change (e.g. to support a different format)
0: 		then the object should create a new object, call its initParameter() with the parameters
0: 		the original object was called with, set its identity and return a reference to it. The cache
0: 		manager will discard the reference to the old object. 
0: 		<BR>
0: 		If an exception is thrown the object must be left in the no-identity state.
0: 
0: 		<BR> MT - single thread required - Method must only be called be cache manager
0: 		and the cache manager will guarantee only one thread can be calling it.
0: 
0: 		@return an object reference if the object can take on the identity, null otherwise.
0: 
0: 		@exception StandardException Standard Cloudscape Policy
0: 
0: 		@see CacheManager#find
0: 
0: 	*/
0: 	public Cacheable setIdentity(Object key) throws StandardException;
0: 
0: 	/**
0: 		Create a new item and set the identity of the object to represent it.
0: 		The object will be in the No Identity state,
0: 		ie. it will have just been created or clearIdentity() was just called. 
0: 		<BR>
0: 		The object must copy the information out of key, not just store a reference to key
0: 		if the key is not immutable.
0: 		After this call the expression getIdentity().equals(key) must return true.
0: 		<BR>
0: 		<BR>
0: 		If the class of the object needs to change (e.g. to support a different format)
0: 		then the object should create a new object, call its initParameter() with the parameters
0: 		the original object was called with, set its identity and return a reference to it. The cache
0: 		manager will discard the reference to the old object. 
0: 		<BR>
0: 		If an exception is thrown the object must be left in the no-identity state.
0: 
0: 		<BR> MT - single thread required - Method must only be called be cache manager
0: 		and the cache manager will guarantee only one thread can be calling it.
0: 
0: 		@return an object reference if the object can take on the identity, null otherwise.
0: 
0: 		@exception StandardException If forCreate is true and the object cannot be created.
0: 
0: 		@see CacheManager#create
0: 
0: 	*/
0: 	public Cacheable createIdentity(Object key, Object createParameter) throws StandardException;
0: 
0: 
0: 	/**
0: 		Put the object into the No Identity state. 
0: 
0: 		<BR> MT - single thread required - Method must only be called be cache manager
0: 		and the cache manager will guarantee only one thread can be calling it.
0: 
0: 	*/
0: 	public void clearIdentity();
0: 
0: 	/**
0: 		Get the identity of this object.
0: 
0: 		<BR> MT - thread safe.
0: 
0: 	*/
0: 	public Object getIdentity();
0: 
0: 
0: 	/**
0: 		Returns true of the object is dirty. 
0: 		May be called when the object is kept or unkept.
0: 
0: 		<BR> MT - thread safe 
0: 
0: 	*/
0: 	public boolean isDirty();
0: 
0: 	/**
0: 		Clean the object.
0: 		It is up to the object to ensure synchronization of the isDirty()
0: 		and clean() method calls.
0: 		<BR>
0: 		If forRemove is true then the 
0: 		object is being removed due to an explict remove request, in this case
0: 		the cache manager will have called this method regardless of the
0: 		state of the isDirty() 
0: 
0: 		<BR>
0: 		If an exception is thrown the object must be left in the clean state.
0: 
0: 		<BR> MT - thread safe - Can be called at any time by the cache manager, it is the
0: 		responsibility of the object implementing Cacheable to ensure any users of the
0: 		object do not conflict with the clean call.
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 
0: 	*/
0: 	public void clean(boolean forRemove) throws StandardException;
0: }
0: 
============================================================================