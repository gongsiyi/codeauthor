1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_L1
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.locks.*;
1:2bc809f: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: import java.util.Hashtable;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 	Unit test Lockable
1:2bc809f: 	<BR>
1:2bc809f: 	A simple Lockable that allows a single locker, but that locker
1:2bc809f: 	can lock the object multiple times, standard Lockable behaviour.
1:2bc809f: */
1:2bc809f: 
1:2bc809f: class T_L1 implements Lockable {
1:2bc809f: 
1:2bc809f: 	long value = 0;
1:2bc809f: 	int count = 0;
1:2bc809f: 
1:2bc809f: 	Latch latch;
1:2bc809f: 
1:2bc809f: 	T_L1() {
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Lockable methods (Simple, qualifier assumed to be null).
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	/** 
1:2bc809f: 		Qualififier is assumed to be null.
1:2bc809f: 	@see Lockable#lockEvent
1:2bc809f: 	*/
1:2bc809f: 	public void lockEvent(Latch lockInfo) {
1:2bc809f:         if (SanityManager.DEBUG)
1:2bc809f:             SanityManager.ASSERT(lockInfo.getQualifier() == null);
1:2bc809f: 
1:2bc809f: 		latch = lockInfo;
1:2bc809f: 
1:2bc809f: 		count++;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean requestCompatible(Object requestedQualifier, Object grantedQualifier) {
1:2bc809f: 		return false;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean lockerAlwaysCompatible() {
1:2bc809f: 		return true;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/** 
1:2bc809f: 		Qualififier is assumed to be null.
1:2bc809f: 	@see Lockable#unlockEvent
1:2bc809f: 	*/
1:2bc809f: 	public void unlockEvent(Latch lockInfo) {
1:2bc809f:         if (SanityManager.DEBUG)
1:2bc809f:             SanityManager.ASSERT(lockInfo.getQualifier() == null);
1:2bc809f: 		
1:2bc809f: 		count--;
1:2bc809f:         if (SanityManager.DEBUG)
1:2bc809f:             SanityManager.ASSERT(count >= 0);
1:2bc809f: 		latch = null;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean lockAttributes(int flag, Hashtable t)
1:2bc809f: 	{
1:2bc809f: 		return false;
1:2bc809f: 	}
1:2bc809f: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_L1
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: import org.apache.derby.iapi.services.locks.*;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import java.util.Hashtable;
1: 
1: /**
1: 	Unit test Lockable
1: 	<BR>
1: 	A simple Lockable that allows a single locker, but that locker
1: 	can lock the object multiple times, standard Lockable behaviour.
1: */
1: 
1: class T_L1 implements Lockable {
1: 
1: 	long value = 0;
1: 	int count = 0;
1: 
1: 	Latch latch;
1: 
1: 	T_L1() {
1: 	}
1: 
1: 	/*
1: 	** Lockable methods (Simple, qualifier assumed to be null).
1: 	*/
1: 
1: 	/** 
1: 		Qualififier is assumed to be null.
1: 	@see Lockable#lockEvent
1: 	*/
1: 	public void lockEvent(Latch lockInfo) {
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(lockInfo.getQualifier() == null);
1: 
1: 		latch = lockInfo;
1: 
1: 		count++;
1: 	}
1: 
1: 	public boolean requestCompatible(Object requestedQualifier, Object grantedQualifier) {
1: 		return false;
1: 	}
1: 
1: 	public boolean lockerAlwaysCompatible() {
1: 		return true;
1: 	}
1: 
1: 	/** 
1: 		Qualififier is assumed to be null.
1: 	@see Lockable#unlockEvent
1: 	*/
1: 	public void unlockEvent(Latch lockInfo) {
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(lockInfo.getQualifier() == null);
1: 		
1: 		count--;
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(count >= 0);
1: 		latch = null;
1: 	}
1: 
1: 	public boolean lockAttributes(int flag, Hashtable t)
1: 	{
1: 		return false;
1: 	}
1: }
============================================================================