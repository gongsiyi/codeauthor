1:e2f4f82: /*
1:e2f4f82: 
1:e2f4f82:    Derby - Class org.apache.derbyTesting.junit.ReleaseRepository
1:e2f4f82: 
1:e2f4f82:    Licensed to the Apache Software Foundation (ASF) under one or more
1:e2f4f82:    contributor license agreements.  See the NOTICE file distributed with
1:e2f4f82:    this work for additional information regarding copyright ownership.
1:e2f4f82:    The ASF licenses this file to you under the Apache License, Version 2.0
1:e2f4f82:    (the "License"); you may not use this file except in compliance with
1:e2f4f82:    the License.  You may obtain a copy of the License at
1:e2f4f82: 
1:e2f4f82:       http://www.apache.org/licenses/LICENSE-2.0
1:e2f4f82: 
1:e2f4f82:    Unless required by applicable law or agreed to in writing, software
1:e2f4f82:    distributed under the License is distributed on an "AS IS" BASIS,
1:e2f4f82:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e2f4f82:    See the License for the specific language governing permissions and
1:e2f4f82:    limitations under the License.
1:e2f4f82: 
1:e2f4f82:  */
1:e2f4f82: package org.apache.derbyTesting.junit;
1:e2f4f82: 
1:e2f4f82: import java.io.File;
1:e2f4f82: import java.io.FileFilter;
1:e2f4f82: import java.io.IOException;
1:e2f4f82: import java.util.ArrayList;
1:e2f4f82: import java.util.Collections;
1:e2f4f82: import java.util.List;
1:e2f4f82: 
1:e2f4f82: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:e2f4f82: 
1:e2f4f82: /**
1:e2f4f82:  * A repository for Derby releases.
1:e2f4f82:  * <p>
1:e2f4f82:  * The releases are used by tests, for instance by the upgrade and compatibility
1:e2f4f82:  * tests, to verify characteristics and behavior across Derby releases.
1:e2f4f82:  * <p>
1:e2f4f82:  * This particular repository is rather dumb - it is up to the user to keep the
1:e2f4f82:  * repository content updated. The repository layout is based on the layout of
1:e2f4f82:  * the SVN repository for releases at
1:e2f4f82:  * {@code https://svn.apache.org/repos/asf/db/derby/jars}. This means there will
1:e2f4f82:  * be a directory for each release, where the directory name is the release
1:e2f4f82:  * version. Inside this directory, all the distribution JARs can be found.
1:e2f4f82:  * <p>
1:e2f4f82:  * The repository location defaults to {@code $HOME/.derbyTestingReleases} on
1:e2f4f82:  * UNIX-like systems, and to {@code %UserProfile%\.derbyTestingReleases} on
1:e2f4f82:  * Windows (in Java, both of these maps to the system property 'user.home').
1:e2f4f82:  * The location can be overridden by specifying the system property
1:e2f4f82:  * {@code derbyTesting.oldReleasePath}.
1:e2f4f82:  * <p>
1:e2f4f82:  * If the default location doesn't exist, and the system property
1:e2f4f82:  * {@code derbyTesting.oldReleasePath} is unspecified, it is up to the tests
1:e2f4f82:  * using the release repository to decide if this condition fails the test or
1:e2f4f82:  * not. If the system property is set to a non-existing directory an exception
1:e2f4f82:  * will be thrown when instantiating the repository.
1:e2f4f82:  * <p>
1:e2f4f82:  * The repository is lazily initialized, as there's no reason to incur the
1:e2f4f82:  * initialization cost when running tests that don't require the repository.
1:e2f4f82:  * The disk is inspected only when the repository is instantiated, any updates
1:e2f4f82:  * to the on-disk repository after the repository has been instantiated will
1:e2f4f82:  * not take effect.
1:e2f4f82:  * <p>
1:e2f4f82:  * <em>Implementation note</em>: This code should be runnable with J2ME, which
1:e2f4f82:  * means that it needs to be compatible with J2SE 1.4 for the time being.
1:e2f4f82:  */
1:e2f4f82: public class ReleaseRepository {
1:e2f4f82: 
1:e2f4f82:     /**
1:e2f4f82:      * The property used to override the location of the repository. The name
1:e2f4f82:      * is used for compatibility reasons.
1:e2f4f82:      */
1:e2f4f82:     private static final String OVERRIDE_HOME_PROP =
1:e2f4f82:             "derbyTesting.oldReleasePath";
1:e2f4f82:     private static final File DEFAULT_HOME;
1:e2f4f82:     static {
1:e2f4f82:         String home = BaseTestCase.getSystemProperty("user.home");
1:e2f4f82:         DEFAULT_HOME = new File(home, ".derbyTestingReleases");
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** The repository instance. */
1:e2f4f82:     private static ReleaseRepository repos;
1:e2f4f82: 
1:e2f4f82:     /**
1:e2f4f82:      * Returns the release repository object.
1:e2f4f82:      * <p>
1:e2f4f82:      * The release repository will be built from a default directory, or
1:e2f4f82:      * from the directory specified by the system property
1:e2f4f82:      * {@code derbyTesting.oldReleasePath}.
1:e2f4f82:      *
1:e2f4f82:      * @return The release repository object.
1:e2f4f82:      */
1:e2f4f82:     public static synchronized ReleaseRepository getInstance()
3:e2f4f82:             throws IOException {
1:e2f4f82:         if (repos == null) {
1:e2f4f82:             File location = DEFAULT_HOME;
1:e2f4f82:             String overrideLoc = BaseTestCase.getSystemProperty(
1:e2f4f82:                     OVERRIDE_HOME_PROP);
1:e2f4f82:             if (overrideLoc != null) {
1:e2f4f82:                 location = new File(overrideLoc);
1:e2f4f82:                 if (!PrivilegedFileOpsForTests.exists(location)) {
1:e2f4f82:                     throw new IOException("the specified Derby release " +
1:e2f4f82:                         "repository doesn't exist: " + location.getPath());
1:e2f4f82:                 }
1:e2f4f82:             }
1:e2f4f82:             repos = new ReleaseRepository(location);
1:e2f4f82:             repos.buildDistributionList();
1:e2f4f82:         }
1:e2f4f82:         return repos;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** The repository location (on disk). */
1:e2f4f82:     private final File reposLocation;
1:e2f4f82:     /**
1:e2f4f82:      * List of distributions found in the repository. If {@code null}, the
1:e2f4f82:      * repository hasn't been initialized.
1:e2f4f82:      */
1:2510115:     private List<DerbyDistribution> dists;
1:e2f4f82: 
1:e2f4f82:     /**
1:e2f4f82:      * Creates a new, empty repository.
1:e2f4f82:      *
1:e2f4f82:      * @param reposLocation the location of the repository contents
1:e2f4f82:      * @see #buildDistributionList()
1:e2f4f82:      */
1:e2f4f82:     private ReleaseRepository(File reposLocation) {
1:e2f4f82:         this.reposLocation = reposLocation;
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /**
1:e2f4f82:      * Returns the list of distributions in the repository.
1:e2f4f82:      *
1:e2f4f82:      * @return A sorted list of Derby distributions, with the newest
1:e2f4f82:      *      distribution at index zero, or an empty list if there are no
1:e2f4f82:      *      distributions in the repository.
1:e2f4f82:      */
1:88b4254:     public DerbyDistribution[] getDistributions() {
1:e2f4f82:         DerbyDistribution[] clone = new DerbyDistribution[dists.size()];
1:e2f4f82:         dists.toArray(clone);
1:e2f4f82:         return clone;
1:e2f4f82:     }
1:e2f4f82: 
1:88b4254:     private void buildDistributionList() {
1:e2f4f82:         if (dists != null) {
1:e2f4f82:             throw new IllegalStateException("repository already initialized");
1:e2f4f82:         }
1:e2f4f82: 
1:e2f4f82:         File[] tmpCandDists = reposLocation.listFiles(new FileFilter() {
1:e2f4f82: 
1:e2f4f82:             public boolean accept(File pathname) {
1:e2f4f82:                 if (!pathname.isDirectory()) {
1:e2f4f82:                     return false;
1:e2f4f82:                 }
1:e2f4f82:                 String name = pathname.getName();
1:e2f4f82:                 // Stay away from regexp for now (JSR169).
1:e2f4f82:                 // Allow only digits and three dots ("10.8.1.2")
1:e2f4f82:                 int dots = 0;
1:e2f4f82:                 for (int i=0; i < name.length(); i++) {
1:e2f4f82:                     char ch = name.charAt(i);
1:e2f4f82:                     if (ch == '.') {
1:e2f4f82:                         dots++;
1:e2f4f82:                     } else if (!Character.isDigit(ch)) {
1:e2f4f82:                         return false;
1:e2f4f82:                     }
1:e2f4f82:                 }
1:e2f4f82:                 return dots == 3;
1:e2f4f82:             }
1:e2f4f82:         });
1:e2f4f82:         if (tmpCandDists == null) {
1:e2f4f82:             tmpCandDists = new File[0];
1:e2f4f82:         }
1:e2f4f82:         traceit("{ReleaseRepository} " + tmpCandDists.length +
1:e2f4f82:                 " candidate releases at " + reposLocation);
1:e2f4f82: 
1:2510115:         dists = new ArrayList<DerbyDistribution>(tmpCandDists.length);
1:e2f4f82:         for (int i=0; i < tmpCandDists.length; i++) {
1:e2f4f82:             File dir = tmpCandDists[i];
1:e2f4f82:             // We extract the version from the directory name.
1:e2f4f82:             // We can also extract it by running sysinfo if that turns out to
1:e2f4f82:             // be necessary.
1:e2f4f82:             // From the check in the FileFilter we know we'll get four
1:e2f4f82:             // components when splitting on dot.
1:e2f4f82:             String[] comp = Utilities.split(dir.getName(), '.');
1:e2f4f82:             DerbyVersion version;
1:e2f4f82:             try {
1:e2f4f82:                 version = new DerbyVersion(
1:e2f4f82:                         Integer.parseInt(comp[0]),
1:e2f4f82:                         Integer.parseInt(comp[1]),
1:e2f4f82:                         Integer.parseInt(comp[2]),
1:e2f4f82:                         Integer.parseInt(comp[3]));
1:e2f4f82:             } catch (NumberFormatException nfe) {
1:e2f4f82:                 traceit("skipped distribution, invalid version: " +
1:e2f4f82:                         dir.getAbsolutePath());
1:e2f4f82:                 continue;
1:e2f4f82:             }
1:572f3e8:             DerbyDistribution dist = DerbyDistribution.newInstance(
1:572f3e8:                     version, dir);
1:e2f4f82:             // TODO: 10.0.1.2 is considered invalid because it doesn't have a
1:e2f4f82:             //       a client JAR. Accept, ignore, or warn all the time?
1:e2f4f82:             if (dist == null) {
1:e2f4f82:                 traceit("skipped invalid distribution: " +
1:e2f4f82:                         dir.getAbsolutePath());
1:e2f4f82:             } else {
1:e2f4f82:                 dists.add(dist);
1:e2f4f82:             }
1:e2f4f82:         }
1:e2f4f82:         filterDistributions(dists);
1:e2f4f82:         Collections.sort(dists);
1:e2f4f82:         dists = Collections.unmodifiableList(dists);
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /**
1:e2f4f82:      * Filters out distributions that cannot be run in the current environment
1:e2f4f82:      * for some reason.
1:e2f4f82:      * <p>
1:e2f4f82:      * The reason for getting filtered out is typically due to lacking
1:e2f4f82:      * functionality or a bug in a specific Derby distribution.
1:e2f4f82:      *
1:e2f4f82:      * @param dists the list of distributions to filter (modified in-place)
1:e2f4f82:      */
1:e2f4f82:     private void filterDistributions(List dists) {
1:e2f4f82:         // Specific version we want to filter out in some situations.
1:e2f4f82:         DerbyVersion jsr169Support = DerbyVersion._10_1;
1:e2f4f82:         DerbyVersion noPhoneMEBoot = DerbyVersion._10_3_1_4;
1:e2f4f82: 
1:e2f4f82:         for (int i=dists.size() -1; i >= 0; i--) {
1:e2f4f82:             DerbyDistribution dist = (DerbyDistribution)dists.get(i);
1:e2f4f82:             DerbyVersion distVersion = dist.getVersion();
1:e2f4f82:             // JSR169 support was only added with 10.1, so don't
1:e2f4f82:             // run 10.0 to later upgrade if that's what our jvm is supporting.
1:e2f4f82:             if (JDBC.vmSupportsJSR169() &&
1:e2f4f82:                     distVersion.lessThan(jsr169Support)) {
1:e2f4f82:                 println("skipping " + distVersion.toString() + " on JSR169");
1:e2f4f82:                 dists.remove(i);
1:e2f4f82:                 continue;
1:e2f4f82:             }
1:e2f4f82:             // Derby 10.3.1.4 does not boot on the phoneME advanced platform,
1:e2f4f82:             // (see DERBY-3176) so don't run upgrade tests in this combination.
1:e2f4f82:             if (BaseTestCase.isPhoneME() &&
1:e2f4f82:                     noPhoneMEBoot.equals(distVersion)) {
1:e2f4f82:                 println("skipping " + noPhoneMEBoot.toString() +
1:e2f4f82:                         " on CVM/phoneme");
1:e2f4f82:                 dists.remove(i);
1:e2f4f82:                 continue;
1:e2f4f82:             }
1:e2f4f82:         }
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Prints a trace message if tracing is enabled. */
1:e2f4f82:     private static void traceit(String msg) {
1:e2f4f82:         BaseTestCase.traceit(msg);
1:e2f4f82:     }
1:e2f4f82: 
1:e2f4f82:     /** Prints a debug message if debugging is enabled. */
1:e2f4f82:     private static void println(String msg) {
1:e2f4f82:         BaseTestCase.println(msg);
1:e2f4f82:     }
1:e2f4f82: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:572f3e8
/////////////////////////////////////////////////////////////////////////
1:             DerbyDistribution dist = DerbyDistribution.newInstance(
1:                     version, dir);
commit:2510115
/////////////////////////////////////////////////////////////////////////
1:     private List<DerbyDistribution> dists;
/////////////////////////////////////////////////////////////////////////
1:         dists = new ArrayList<DerbyDistribution>(tmpCandDists.length);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:88b4254
/////////////////////////////////////////////////////////////////////////
1:     public DerbyDistribution[] getDistributions() {
1:     private void buildDistributionList() {
commit:e2f4f82
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.junit.ReleaseRepository
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.io.File;
1: import java.io.FileFilter;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1: 
1: /**
1:  * A repository for Derby releases.
1:  * <p>
1:  * The releases are used by tests, for instance by the upgrade and compatibility
1:  * tests, to verify characteristics and behavior across Derby releases.
1:  * <p>
1:  * This particular repository is rather dumb - it is up to the user to keep the
1:  * repository content updated. The repository layout is based on the layout of
1:  * the SVN repository for releases at
1:  * {@code https://svn.apache.org/repos/asf/db/derby/jars}. This means there will
1:  * be a directory for each release, where the directory name is the release
1:  * version. Inside this directory, all the distribution JARs can be found.
1:  * <p>
1:  * The repository location defaults to {@code $HOME/.derbyTestingReleases} on
1:  * UNIX-like systems, and to {@code %UserProfile%\.derbyTestingReleases} on
1:  * Windows (in Java, both of these maps to the system property 'user.home').
1:  * The location can be overridden by specifying the system property
1:  * {@code derbyTesting.oldReleasePath}.
1:  * <p>
1:  * If the default location doesn't exist, and the system property
1:  * {@code derbyTesting.oldReleasePath} is unspecified, it is up to the tests
1:  * using the release repository to decide if this condition fails the test or
1:  * not. If the system property is set to a non-existing directory an exception
1:  * will be thrown when instantiating the repository.
1:  * <p>
1:  * The repository is lazily initialized, as there's no reason to incur the
1:  * initialization cost when running tests that don't require the repository.
1:  * The disk is inspected only when the repository is instantiated, any updates
1:  * to the on-disk repository after the repository has been instantiated will
1:  * not take effect.
1:  * <p>
1:  * <em>Implementation note</em>: This code should be runnable with J2ME, which
1:  * means that it needs to be compatible with J2SE 1.4 for the time being.
1:  */
1: public class ReleaseRepository {
1: 
1:     /**
1:      * The property used to override the location of the repository. The name
1:      * is used for compatibility reasons.
1:      */
1:     private static final String OVERRIDE_HOME_PROP =
1:             "derbyTesting.oldReleasePath";
1:     private static final File DEFAULT_HOME;
1:     static {
1:         String home = BaseTestCase.getSystemProperty("user.home");
1:         DEFAULT_HOME = new File(home, ".derbyTestingReleases");
1:     }
1: 
1:     /** The repository instance. */
1:     private static ReleaseRepository repos;
1: 
1:     /**
1:      * Returns the release repository object.
1:      * <p>
1:      * The release repository will be built from a default directory, or
1:      * from the directory specified by the system property
1:      * {@code derbyTesting.oldReleasePath}.
1:      *
1:      * @return The release repository object.
1:      */
1:     public static synchronized ReleaseRepository getInstance()
1:             throws IOException {
1:         if (repos == null) {
1:             File location = DEFAULT_HOME;
1:             String overrideLoc = BaseTestCase.getSystemProperty(
1:                     OVERRIDE_HOME_PROP);
1:             if (overrideLoc != null) {
1:                 location = new File(overrideLoc);
1:                 if (!PrivilegedFileOpsForTests.exists(location)) {
1:                     throw new IOException("the specified Derby release " +
1:                         "repository doesn't exist: " + location.getPath());
1:                 }
1:             }
1:             repos = new ReleaseRepository(location);
1:             repos.buildDistributionList();
1:         }
1:         return repos;
1:     }
1: 
1:     /** The repository location (on disk). */
1:     private final File reposLocation;
1:     /**
1:      * List of distributions found in the repository. If {@code null}, the
1:      * repository hasn't been initialized.
1:      */
0:     private List dists;
1: 
1:     /**
1:      * Creates a new, empty repository.
1:      *
1:      * @param reposLocation the location of the repository contents
1:      * @see #buildDistributionList()
1:      */
1:     private ReleaseRepository(File reposLocation) {
1:         this.reposLocation = reposLocation;
1:     }
1: 
1:     /**
1:      * Returns the list of distributions in the repository.
1:      *
1:      * @return A sorted list of Derby distributions, with the newest
1:      *      distribution at index zero, or an empty list if there are no
1:      *      distributions in the repository.
1:      */
0:     public DerbyDistribution[] getDistributions()
1:             throws IOException {
1:         DerbyDistribution[] clone = new DerbyDistribution[dists.size()];
1:         dists.toArray(clone);
1:         return clone;
1:     }
1: 
0:     private void buildDistributionList()
1:             throws IOException {
1:         if (dists != null) {
1:             throw new IllegalStateException("repository already initialized");
1:         }
1: 
1:         File[] tmpCandDists = reposLocation.listFiles(new FileFilter() {
1: 
1:             public boolean accept(File pathname) {
1:                 if (!pathname.isDirectory()) {
1:                     return false;
1:                 }
1:                 String name = pathname.getName();
1:                 // Stay away from regexp for now (JSR169).
1:                 // Allow only digits and three dots ("10.8.1.2")
1:                 int dots = 0;
1:                 for (int i=0; i < name.length(); i++) {
1:                     char ch = name.charAt(i);
1:                     if (ch == '.') {
1:                         dots++;
1:                     } else if (!Character.isDigit(ch)) {
1:                         return false;
1:                     }
1:                 }
1:                 return dots == 3;
1:             }
1:         });
1:         if (tmpCandDists == null) {
1:             tmpCandDists = new File[0];
1:         }
1:         traceit("{ReleaseRepository} " + tmpCandDists.length +
1:                 " candidate releases at " + reposLocation);
1: 
0:         dists = new ArrayList(tmpCandDists.length);
1:         for (int i=0; i < tmpCandDists.length; i++) {
1:             File dir = tmpCandDists[i];
1:             // We extract the version from the directory name.
1:             // We can also extract it by running sysinfo if that turns out to
1:             // be necessary.
1:             // From the check in the FileFilter we know we'll get four
1:             // components when splitting on dot.
1:             String[] comp = Utilities.split(dir.getName(), '.');
1:             DerbyVersion version;
1:             try {
1:                 version = new DerbyVersion(
1:                         Integer.parseInt(comp[0]),
1:                         Integer.parseInt(comp[1]),
1:                         Integer.parseInt(comp[2]),
1:                         Integer.parseInt(comp[3]));
1:             } catch (NumberFormatException nfe) {
1:                 traceit("skipped distribution, invalid version: " +
1:                         dir.getAbsolutePath());
1:                 continue;
1:             }
0:             DerbyDistribution dist = DerbyDistribution.getInstance(
0:                     dir, version);
1:             // TODO: 10.0.1.2 is considered invalid because it doesn't have a
1:             //       a client JAR. Accept, ignore, or warn all the time?
1:             if (dist == null) {
1:                 traceit("skipped invalid distribution: " +
1:                         dir.getAbsolutePath());
1:             } else {
1:                 dists.add(dist);
1:             }
1:         }
1:         filterDistributions(dists);
1:         Collections.sort(dists);
1:         dists = Collections.unmodifiableList(dists);
1:     }
1: 
1:     /**
1:      * Filters out distributions that cannot be run in the current environment
1:      * for some reason.
1:      * <p>
1:      * The reason for getting filtered out is typically due to lacking
1:      * functionality or a bug in a specific Derby distribution.
1:      *
1:      * @param dists the list of distributions to filter (modified in-place)
1:      */
1:     private void filterDistributions(List dists) {
1:         // Specific version we want to filter out in some situations.
1:         DerbyVersion jsr169Support = DerbyVersion._10_1;
1:         DerbyVersion noPhoneMEBoot = DerbyVersion._10_3_1_4;
1: 
1:         for (int i=dists.size() -1; i >= 0; i--) {
1:             DerbyDistribution dist = (DerbyDistribution)dists.get(i);
1:             DerbyVersion distVersion = dist.getVersion();
1:             // JSR169 support was only added with 10.1, so don't
1:             // run 10.0 to later upgrade if that's what our jvm is supporting.
1:             if (JDBC.vmSupportsJSR169() &&
1:                     distVersion.lessThan(jsr169Support)) {
1:                 println("skipping " + distVersion.toString() + " on JSR169");
1:                 dists.remove(i);
1:                 continue;
1:             }
1:             // Derby 10.3.1.4 does not boot on the phoneME advanced platform,
1:             // (see DERBY-3176) so don't run upgrade tests in this combination.
1:             if (BaseTestCase.isPhoneME() &&
1:                     noPhoneMEBoot.equals(distVersion)) {
1:                 println("skipping " + noPhoneMEBoot.toString() +
1:                         " on CVM/phoneme");
1:                 dists.remove(i);
1:                 continue;
1:             }
1:         }
1:     }
1: 
1:     /** Prints a trace message if tracing is enabled. */
1:     private static void traceit(String msg) {
1:         BaseTestCase.traceit(msg);
1:     }
1: 
1:     /** Prints a debug message if debugging is enabled. */
1:     private static void println(String msg) {
1:         BaseTestCase.println(msg);
1:     }
1: }
============================================================================