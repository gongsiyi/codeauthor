1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.bytecode.BCJava
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.bytecode;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.compiler.JavaFactory;
1:eac0369: import org.apache.derby.iapi.services.compiler.ClassBuilder;
1:eac0369: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:eac0369: import org.apache.derby.iapi.services.loader.ClassFactory;
1:eac0369: import org.apache.derby.iapi.services.classfile.ClassHolder;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.cache.Cacheable;
1:eac0369: import org.apache.derby.iapi.services.cache.CacheableFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.cache.CacheFactory;
1:eac0369: import org.apache.derby.iapi.services.cache.CacheManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1:eac0369: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedActionException;
1:56c1dc2: import java.security.PrivilegedExceptionAction;
1:eac0369: import java.util.Properties;
1:eac0369: import java.util.Hashtable;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	<p>
1:eac0369: 	<b>Debugging problems with generated classes</b>
1:eac0369: 	<p>
1:eac0369: 	When the code has been generated incorrectly, all sorts of
1:eac0369: 	odd things can go wrong.  This is one recommended approach to
1:eac0369: 	finding the problem.
1:eac0369: 	<p>
1:eac0369: 	First, turn on ByteCodeGenInstr and DumpClassFile. Look
1:eac0369: 	for missing files (right now they are consecutively numbered
1:eac0369: 	by the activation class builder; later on they won't be, but
1:eac0369: 	BytCodeGenInstr dumps messages about the classes it has).
1:eac0369: 	Look at the log to make sure that all "GEN starting class/method"
1:eac0369: 	messages are paired with a "GEN ending class/method" message.
1:eac0369: 	If a file is missing or the pairing is missing, then something
1:eac0369: 	went wrong when the system tried to generate the bytecodes.
1:eac0369: 	Resort to your favorite debugging tool to step through
1:eac0369: 	the faulty statement.
1:eac0369: 	<p>
1:eac0369: 	If you get class files but the system crashes on you (I had
1:eac0369: 	an OS segmentation fault once) or you get funny messages like
1:eac0369: 	JDBC Excpetion: ac5 where ac5 is just the name of a generated
1:eac0369: 	class, then one of the following is likely:
1:eac0369: 	<ul>
1:eac0369: 	<li> you are calling INVOKEVIRTUAL when
1:eac0369: 	     you are supposed to call INVOKEINTERFACE
1:eac0369: 	<li> you have an inexact match on a method argument or
1:eac0369: 	     return type.
1:eac0369: 	<li> you are trying to get to a superclass's field using
1:eac0369: 	     a subclass.
1:eac0369: 	</ul>
1:eac0369: 	The best way to locate the problem here is to do this (replace
1:eac0369: 	ac5.class with the name of your class file):
1:eac0369: 	<ol>
1:dbed020: 	<li> javap -c -v ac5 &gt; ac5.gp<br>
1:eac0369: 		 if javap reports "Class not found", and the file ac5.class does
1:eac0369: 		 exist in the current directory, then the .class file is probably
1:eac0369: 		 corrupt.  Try running mocha on it to see if that works. The
1:eac0369: 		 problem will be in the code that generates the entries for
1:eac0369: 		 the class file -- most likely the ConstantPool is bad, an
1:eac0369: 		 attribute got created incorrectly, or
1:eac0369: 		 perhaps the instruction streams are goofed up.
1:eac0369: 	<li> java mocha.Decompiler ac5.class<br>
1:eac0369: 	     if mocha cannot create good java source, then you really
1:eac0369: 	     need to go back and examine the calls creating the java 
1:eac0369: 	     constructs; a parameter might have been null when it should
1:eac0369: 	     have, a call to turn an expression into a statement may be
1:eac0369: 	     missing, or something else may be wrong.
1:eac0369: 	<li> mv ac5.mocha ac5.java
1:eac0369: 	<li> vi ac5.java ; you will have to fix any new SQLBoolean(1, ...)
1:eac0369: 	     calls to be new SQLBoolean(true, ...).  Also mocha 
1:eac0369: 	     occasionally messes up other stuff too.  Just iterate on it
1:eac0369: 	     until it builds or you figure out what is wrong with
1:eac0369: 	     the generated code.
1:eac0369: 	<li> javac ac5.java
1:dbed020: 	<li> javap -v -c ac5 &gt; ac5.jp
1:dbed020: 	<li> sed '1,$s/#[0-9]* &lt;/# &lt;/' ac5.gp &gt; ac5.gn
1:dbed020: 	<li> sed '1,$s/#[0-9]* &lt;/# &lt;/' ac5.jp &gt; ac5.jn<br>
1:eac0369: 	     These seds are to get rid of constant pool entry numbers,
1:eac0369: 	     which will be wildly different on the two files.
1:eac0369: 	<li> vdiff32 ac5.gn ac5.jn<br>
1:eac0369: 	     this tool shows you side-by-side diffs.  If you change
1:eac0369: 	     to the window that interleaves the diffs, you can see the 
1:eac0369: 	     length of the line.  Look for places where there are
1:eac0369: 	     invokevirtual vs. invokeinterface differences, differences
1:eac0369: 	     in the class name of a field, differences in the class name
1:eac0369: 	     of a method parameter or return type.  The generated code
1:eac0369: 	     *will* have some unavoidable differences from the
1:eac0369: 	     compiled code, such as:
1:eac0369: 	     <ul>
1:eac0369: 	     <li> it will have goto's at the end of try blocks
1:eac0369: 		  rather than return's.
1:eac0369: 	     <li> it will do a getstatic on a static final field
1:eac0369: 		  rather than inlining the static final field's value
1:eac0369: 	     <li> it will have more checkcast's in it, since it
1:eac0369: 		  doesn't see if the checkcast will always succeed
1:eac0369: 		  and thus remove it.
1:eac0369: 	     </ul>
1:eac0369: 	     Once you find a diff, you need to track down where
1:eac0369: 	     the call was generated and modify it appropriately:
1:eac0369: 	     change newMethodCall to newInterfaceMethodCall;
1:eac0369: 	     add newCastExpression to get a argument into the right
1:eac0369: 	     type for the parameter; ensure the return type given for
1:eac0369: 	     the method is its declared return type.
1:eac0369: 	</ol>
1:eac0369: 	@see org.apache.derby.iapi.services.compiler.JavaFactory
1:eac0369: 
1:eac0369:  */
1:eac0369: public class BCJava implements JavaFactory, CacheableFactory, ModuleControl {
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////
1:eac0369: 	//  
1:eac0369: 	//	MEMBERS
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/* Cache of Java class names versus VM type names */
1:eac0369: 	private CacheManager	vmTypeIdCache;
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// class interface
1:eac0369: 	//
1:eac0369: 	public BCJava() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// ModuleControl interface
1:eac0369: 	//
1:eac0369: 	/**
1:eac0369: 		Start this module. We need a read/write version of the class utilities
1:eac0369: 
1:94f158a: 		@exception StandardException standard Derby policy
1:eac0369: 	 */
1:eac0369: 	public void boot(boolean create, Properties properties) throws StandardException {
1:eac0369: 
1:56c1dc2:         CacheFactory cf = (CacheFactory) startSystemModule( org.apache.derby.iapi.reference.Module.CacheFactory );
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** The initial and maximum cache sizes are based on experiments
1:eac0369: 		** that I did with some of the language tests.  I found that
1:eac0369: 		** the size quickly grew to about 40, then continued to grow
1:eac0369: 		** slowly after that.
1:eac0369: 		**
1:eac0369: 		**			-	Jeff
1:eac0369: 		*/
1:eac0369: 		vmTypeIdCache =
1:eac0369: 			cf.newCacheManager(
1:eac0369: 				this,
1:eac0369: 				"VMTypeIdCache",
1:eac0369: 				64,
1:eac0369: 				256);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Stop this module.  In this case, nothing needs to be done.
1:eac0369: 	 */
1:eac0369: 	public void stop() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// JavaFactory interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * a class.  Once it is created, fields, methods,
1:eac0369: 	 * interfaces, static initialization code, 
1:eac0369: 	 * and constructors can be added to it.
1:eac0369: 	 * <verbatim>
1:eac0369: 	   Java: package #packageName;
1:eac0369: 	  	 #modifiers #className extends #superClass { }
1:eac0369: 	  		// modifiers is the | of the JVM constants for
1:eac0369: 	  		// the modifiers such as static, public, etc.
1:eac0369: 	   </verbatim>
1:eac0369: 	 *
1:6b50965: 	 * See java.lang.reflect.Modifiers
1:eac0369: 	 * @param packageName the name of the package the class is in.
1:eac0369: 	 *	null if it is in the default package.
1:eac0369: 	 * @param modifiers the | of the Modifiers
1:eac0369: 	 *	constants representing the visibility and control of this
1:eac0369: 	 *	method.
1:eac0369: 	 * @param className the name of the class or interface
1:eac0369: 	 * @param superClass the name of the superclass or superinterface
1:eac0369: 	 *
1:eac0369: 	 * @return the class builder.
1:eac0369: 	 */
1:eac0369: 	public ClassBuilder newClassBuilder(ClassFactory cf, String packageName,
1:eac0369: 		int modifiers, String className, String superClass) {
1:eac0369: 		
1:eac0369: 		return new BCClass(cf, packageName, modifiers, className, superClass, this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** CacheableFactory interface
1:eac0369: 	*/
1:eac0369: 	public Cacheable newCacheable(CacheManager cm) {
1:eac0369: 		return new VMTypeIdCacheable();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// UTILITIES specific to this implementation
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the VM Type ID that corresponds with the given java type name.
1:eac0369: 	 * This uses the cache of VM type ids.
1:eac0369: 	 *
1:eac0369: 	 * @param javaType	The java type name to translate to a java VM type id
1:eac0369: 	 *
1:eac0369: 	 * @return		The java VM type ID
1:eac0369: 	 */
1:eac0369: 	Type type(String javaType) {
1:eac0369: 
1:eac0369: 		Type retval;
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			VMTypeIdCacheable vtic = (VMTypeIdCacheable) vmTypeIdCache.find(javaType);
1:eac0369: 
1:eac0369: 			retval = (Type) vtic.descriptor();
1:eac0369: 
1:eac0369: 			vmTypeIdCache.release(vtic);
1:eac0369: 
1:eac0369: 			return retval;
1:eac0369: 
1:eac0369: 		} catch (StandardException se) {
1:eac0369: 			if (SanityManager.DEBUG) {
1:e7d2a42: 				SanityManager.THROWASSERT("Unexpected exception", se);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** If we're running a sane server, let's act as if the
1:eac0369: 			** exception didn't happen, and just get the vmTypeId the
1:eac0369: 			** slow way, without caching.
1:eac0369: 			*/
1:eac0369: 			retval = new Type(javaType, ClassHolder.convertToInternalDescriptor(javaType));
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return retval;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	String vmType(BCMethodDescriptor md) {
1:eac0369: 		String retval;
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			VMTypeIdCacheable vtic = (VMTypeIdCacheable) vmTypeIdCache.find(md);
1:eac0369: 
1:eac0369: 			retval = vtic.descriptor().toString();
1:eac0369: 
1:eac0369: 			vmTypeIdCache.release(vtic);
1:eac0369: 
1:eac0369: 		} catch (StandardException se) {
1:eac0369: 			if (SanityManager.DEBUG) {
1:e7d2a42: 				SanityManager.THROWASSERT("Unexpected exception", se);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** If we're running a sane server, let's act as if the
1:eac0369: 			** exception didn't happen, and just get the vmTypeId the
1:eac0369: 			** slow way, without caching.
1:eac0369: 			*/
1:eac0369: 			retval = md.buildMethodDescriptor();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return retval;
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * Map vm types as strings to vm types as the VM
1:eac0369: 	 * handles, with int ids. Used in mapping opcodes
1:eac0369: 	 * based on type of operand/stack entry available.
1:eac0369: 	 */
1:eac0369: 	static short vmTypeId(String vmTypeS) {
1:eac0369: 		char vmTypeC = vmTypeS.charAt(0);
1:eac0369: 		switch(vmTypeC) {
1:eac0369: 			case VMDescriptor.C_CLASS : return BCExpr.vm_reference;
1:eac0369: 			case VMDescriptor.C_BYTE : return BCExpr.vm_byte;
1:eac0369: 			case VMDescriptor.C_CHAR : return BCExpr.vm_char;
1:eac0369: 			case VMDescriptor.C_DOUBLE : return BCExpr.vm_double;
1:eac0369: 			case VMDescriptor.C_FLOAT : return BCExpr.vm_float;
1:eac0369: 			case VMDescriptor.C_INT : return BCExpr.vm_int;
1:eac0369: 			case VMDescriptor.C_LONG : return BCExpr.vm_long;
1:eac0369: 			case VMDescriptor.C_SHORT : return BCExpr.vm_short;
1:eac0369: 			case VMDescriptor.C_BOOLEAN : return BCExpr.vm_int;
1:eac0369: 			case VMDescriptor.C_ARRAY : return BCExpr.vm_reference;
1:eac0369: 			case VMDescriptor.C_VOID : return BCExpr.vm_void;
1:eac0369: 			default: 
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				SanityManager.THROWASSERT("No type match for "+vmTypeS);
1:eac0369: 		}
1:eac0369: 		return BCExpr.vm_void;
1:eac0369: 	}
1:56c1dc2: 
1:56c1dc2:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged startup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  Object  startSystemModule( final String factoryInterface )
1:56c1dc2:         throws StandardException
1:56c1dc2:     {
1:56c1dc2:         try {
1:56c1dc2:             return AccessController.doPrivileged
1:56c1dc2:                 (
1:56c1dc2:                  new PrivilegedExceptionAction<Object>()
1:56c1dc2:                  {
1:56c1dc2:                      public Object run()
1:56c1dc2:                          throws StandardException
1:56c1dc2:                      {
1:56c1dc2:                          return Monitor.startSystemModule( factoryInterface );
1:56c1dc2:                      }
1:56c1dc2:                  }
1:56c1dc2:                  );
1:56c1dc2:         } catch (PrivilegedActionException pae)
1:56c1dc2:         {
1:56c1dc2:             throw StandardException.plainWrapException( pae );
1:56c1dc2:         }
1:56c1dc2:     }
1:56c1dc2: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	<li> javap -c -v ac5 &gt; ac5.gp<br>
/////////////////////////////////////////////////////////////////////////
1: 	<li> javap -v -c ac5 &gt; ac5.jp
1: 	<li> sed '1,$s/#[0-9]* &lt;/# &lt;/' ac5.gp &gt; ac5.gn
1: 	<li> sed '1,$s/#[0-9]* &lt;/# &lt;/' ac5.jp &gt; ac5.jn<br>
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1:         CacheFactory cf = (CacheFactory) startSystemModule( org.apache.derby.iapi.reference.Module.CacheFactory );
/////////////////////////////////////////////////////////////////////////
1: 
1:     
1:     /**
1:      * Privileged startup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Object  startSystemModule( final String factoryInterface )
1:         throws StandardException
1:     {
1:         try {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedExceptionAction<Object>()
1:                  {
1:                      public Object run()
1:                          throws StandardException
1:                      {
1:                          return Monitor.startSystemModule( factoryInterface );
1:                      }
1:                  }
1:                  );
1:         } catch (PrivilegedActionException pae)
1:         {
1:             throw StandardException.plainWrapException( pae );
1:         }
1:     }
1: 
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1: 				SanityManager.THROWASSERT("Unexpected exception", se);
/////////////////////////////////////////////////////////////////////////
1: 				SanityManager.THROWASSERT("Unexpected exception", se);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException standard Derby policy
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * See java.lang.reflect.Modifiers
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.bytecode.BCJava
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.bytecode;
1: 
1: import org.apache.derby.iapi.services.compiler.JavaFactory;
1: import org.apache.derby.iapi.services.compiler.ClassBuilder;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.services.classfile.ClassHolder;
1: 
1: import org.apache.derby.iapi.services.cache.Cacheable;
1: import org.apache.derby.iapi.services.cache.CacheableFactory;
1: 
1: import org.apache.derby.iapi.services.cache.CacheFactory;
1: import org.apache.derby.iapi.services.cache.CacheManager;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1: 
1: import java.util.Properties;
1: import java.util.Hashtable;
1: 
1: /**
1: 	<p>
1: 	<b>Debugging problems with generated classes</b>
1: 	<p>
1: 	When the code has been generated incorrectly, all sorts of
1: 	odd things can go wrong.  This is one recommended approach to
1: 	finding the problem.
1: 	<p>
1: 	First, turn on ByteCodeGenInstr and DumpClassFile. Look
1: 	for missing files (right now they are consecutively numbered
1: 	by the activation class builder; later on they won't be, but
1: 	BytCodeGenInstr dumps messages about the classes it has).
1: 	Look at the log to make sure that all "GEN starting class/method"
1: 	messages are paired with a "GEN ending class/method" message.
1: 	If a file is missing or the pairing is missing, then something
1: 	went wrong when the system tried to generate the bytecodes.
1: 	Resort to your favorite debugging tool to step through
1: 	the faulty statement.
1: 	<p>
1: 	If you get class files but the system crashes on you (I had
1: 	an OS segmentation fault once) or you get funny messages like
1: 	JDBC Excpetion: ac5 where ac5 is just the name of a generated
1: 	class, then one of the following is likely:
1: 	<ul>
1: 	<li> you are calling INVOKEVIRTUAL when
1: 	     you are supposed to call INVOKEINTERFACE
1: 	<li> you have an inexact match on a method argument or
1: 	     return type.
1: 	<li> you are trying to get to a superclass's field using
1: 	     a subclass.
1: 	</ul>
1: 	The best way to locate the problem here is to do this (replace
1: 	ac5.class with the name of your class file):
1: 	<ol>
0: 	<li> javap -c -v ac5 >ac5.gp<br>
1: 		 if javap reports "Class not found", and the file ac5.class does
1: 		 exist in the current directory, then the .class file is probably
1: 		 corrupt.  Try running mocha on it to see if that works. The
1: 		 problem will be in the code that generates the entries for
1: 		 the class file -- most likely the ConstantPool is bad, an
1: 		 attribute got created incorrectly, or
1: 		 perhaps the instruction streams are goofed up.
1: 	<li> java mocha.Decompiler ac5.class<br>
1: 	     if mocha cannot create good java source, then you really
1: 	     need to go back and examine the calls creating the java 
1: 	     constructs; a parameter might have been null when it should
1: 	     have, a call to turn an expression into a statement may be
1: 	     missing, or something else may be wrong.
1: 	<li> mv ac5.mocha ac5.java
1: 	<li> vi ac5.java ; you will have to fix any new SQLBoolean(1, ...)
1: 	     calls to be new SQLBoolean(true, ...).  Also mocha 
1: 	     occasionally messes up other stuff too.  Just iterate on it
1: 	     until it builds or you figure out what is wrong with
1: 	     the generated code.
1: 	<li> javac ac5.java
0: 	<li> javap -v -c ac5 >ac5.jp
0: 	<li> sed '1,$s/#[0-9]* </# </' ac5.gp > ac5.gn
0: 	<li> sed '1,$s/#[0-9]* </# </' ac5.jp > ac5.jn<br>
1: 	     These seds are to get rid of constant pool entry numbers,
1: 	     which will be wildly different on the two files.
1: 	<li> vdiff32 ac5.gn ac5.jn<br>
1: 	     this tool shows you side-by-side diffs.  If you change
1: 	     to the window that interleaves the diffs, you can see the 
1: 	     length of the line.  Look for places where there are
1: 	     invokevirtual vs. invokeinterface differences, differences
1: 	     in the class name of a field, differences in the class name
1: 	     of a method parameter or return type.  The generated code
1: 	     *will* have some unavoidable differences from the
1: 	     compiled code, such as:
1: 	     <ul>
1: 	     <li> it will have goto's at the end of try blocks
1: 		  rather than return's.
1: 	     <li> it will do a getstatic on a static final field
1: 		  rather than inlining the static final field's value
1: 	     <li> it will have more checkcast's in it, since it
1: 		  doesn't see if the checkcast will always succeed
1: 		  and thus remove it.
1: 	     </ul>
1: 	     Once you find a diff, you need to track down where
1: 	     the call was generated and modify it appropriately:
1: 	     change newMethodCall to newInterfaceMethodCall;
1: 	     add newCastExpression to get a argument into the right
1: 	     type for the parameter; ensure the return type given for
1: 	     the method is its declared return type.
1: 	</ol>
1: 	@see org.apache.derby.iapi.services.compiler.JavaFactory
1: 
0: 	@author ames
1:  */
1: public class BCJava implements JavaFactory, CacheableFactory, ModuleControl {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	//////////////////////////////////////////////////////////////
1: 	//  
1: 	//	MEMBERS
1: 	//
1: 	//////////////////////////////////////////////////////////////
1: 
1: 	/* Cache of Java class names versus VM type names */
1: 	private CacheManager	vmTypeIdCache;
1: 
1: 	//
1: 	// class interface
1: 	//
1: 	public BCJava() {
1: 	}
1: 
1: 	//
1: 	// ModuleControl interface
1: 	//
1: 	/**
1: 		Start this module. We need a read/write version of the class utilities
1: 
0: 		@exception StandardException standard cloudscape policy
1: 	 */
1: 	public void boot(boolean create, Properties properties) throws StandardException {
1: 
0: 		CacheFactory cf =
0: 			(CacheFactory) Monitor.startSystemModule(org.apache.derby.iapi.reference.Module.CacheFactory);
1: 
1: 		/*
1: 		** The initial and maximum cache sizes are based on experiments
1: 		** that I did with some of the language tests.  I found that
1: 		** the size quickly grew to about 40, then continued to grow
1: 		** slowly after that.
1: 		**
1: 		**			-	Jeff
1: 		*/
1: 		vmTypeIdCache =
1: 			cf.newCacheManager(
1: 				this,
1: 				"VMTypeIdCache",
1: 				64,
1: 				256);
1: 	}
1: 
1: 	/**
1: 		Stop this module.  In this case, nothing needs to be done.
1: 	 */
1: 	public void stop() {
1: 	}
1: 
1: 	//
1: 	// JavaFactory interface
1: 	//
1: 
1: 	/**
1: 	 * a class.  Once it is created, fields, methods,
1: 	 * interfaces, static initialization code, 
1: 	 * and constructors can be added to it.
1: 	 * <verbatim>
1: 	   Java: package #packageName;
1: 	  	 #modifiers #className extends #superClass { }
1: 	  		// modifiers is the | of the JVM constants for
1: 	  		// the modifiers such as static, public, etc.
1: 	   </verbatim>
1: 	 *
0: 	 * @see java.lang.reflect.Modifiers
1: 	 * @param packageName the name of the package the class is in.
1: 	 *	null if it is in the default package.
1: 	 * @param modifiers the | of the Modifiers
1: 	 *	constants representing the visibility and control of this
1: 	 *	method.
1: 	 * @param className the name of the class or interface
1: 	 * @param superClass the name of the superclass or superinterface
1: 	 *
1: 	 * @return the class builder.
1: 	 */
1: 	public ClassBuilder newClassBuilder(ClassFactory cf, String packageName,
1: 		int modifiers, String className, String superClass) {
1: 		
1: 		return new BCClass(cf, packageName, modifiers, className, superClass, this);
1: 	}
1: 
1: 	/*
1: 	** CacheableFactory interface
1: 	*/
1: 	public Cacheable newCacheable(CacheManager cm) {
1: 		return new VMTypeIdCacheable();
1: 	}
1: 
1: 	///////////////////////////////////////////
1: 	//
1: 	// UTILITIES specific to this implementation
1: 	//
1: 	////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Get the VM Type ID that corresponds with the given java type name.
1: 	 * This uses the cache of VM type ids.
1: 	 *
1: 	 * @param javaType	The java type name to translate to a java VM type id
1: 	 *
1: 	 * @return		The java VM type ID
1: 	 */
1: 	Type type(String javaType) {
1: 
1: 		Type retval;
1: 
1: 		try {
1: 
1: 			VMTypeIdCacheable vtic = (VMTypeIdCacheable) vmTypeIdCache.find(javaType);
1: 
1: 			retval = (Type) vtic.descriptor();
1: 
1: 			vmTypeIdCache.release(vtic);
1: 
1: 			return retval;
1: 
1: 		} catch (StandardException se) {
1: 			if (SanityManager.DEBUG) {
0: 				SanityManager.THROWASSERT("Unexpected exception " + se, se);
1: 			}
1: 
1: 			/*
1: 			** If we're running a sane server, let's act as if the
1: 			** exception didn't happen, and just get the vmTypeId the
1: 			** slow way, without caching.
1: 			*/
1: 			retval = new Type(javaType, ClassHolder.convertToInternalDescriptor(javaType));
1: 		}
1: 
1: 		return retval;
1: 	}
1: 
1: 	String vmType(BCMethodDescriptor md) {
1: 		String retval;
1: 
1: 		try {
1: 
1: 			VMTypeIdCacheable vtic = (VMTypeIdCacheable) vmTypeIdCache.find(md);
1: 
1: 			retval = vtic.descriptor().toString();
1: 
1: 			vmTypeIdCache.release(vtic);
1: 
1: 		} catch (StandardException se) {
1: 			if (SanityManager.DEBUG) {
0: 				SanityManager.THROWASSERT("Unexpected exception " + se, se);
1: 			}
1: 
1: 			/*
1: 			** If we're running a sane server, let's act as if the
1: 			** exception didn't happen, and just get the vmTypeId the
1: 			** slow way, without caching.
1: 			*/
1: 			retval = md.buildMethodDescriptor();
1: 		}
1: 
1: 		return retval;
1: 	}
1: 	/**
1: 	 * Map vm types as strings to vm types as the VM
1: 	 * handles, with int ids. Used in mapping opcodes
1: 	 * based on type of operand/stack entry available.
1: 	 */
1: 	static short vmTypeId(String vmTypeS) {
1: 		char vmTypeC = vmTypeS.charAt(0);
1: 		switch(vmTypeC) {
1: 			case VMDescriptor.C_CLASS : return BCExpr.vm_reference;
1: 			case VMDescriptor.C_BYTE : return BCExpr.vm_byte;
1: 			case VMDescriptor.C_CHAR : return BCExpr.vm_char;
1: 			case VMDescriptor.C_DOUBLE : return BCExpr.vm_double;
1: 			case VMDescriptor.C_FLOAT : return BCExpr.vm_float;
1: 			case VMDescriptor.C_INT : return BCExpr.vm_int;
1: 			case VMDescriptor.C_LONG : return BCExpr.vm_long;
1: 			case VMDescriptor.C_SHORT : return BCExpr.vm_short;
1: 			case VMDescriptor.C_BOOLEAN : return BCExpr.vm_int;
1: 			case VMDescriptor.C_ARRAY : return BCExpr.vm_reference;
1: 			case VMDescriptor.C_VOID : return BCExpr.vm_void;
1: 			default: 
1: 				if (SanityManager.DEBUG)
1: 				SanityManager.THROWASSERT("No type match for "+vmTypeS);
1: 		}
1: 		return BCExpr.vm_void;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.bytecode;
0: 
0: import org.apache.derby.iapi.services.compiler.JavaFactory;
0: import org.apache.derby.iapi.services.compiler.ClassBuilder;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.classfile.ClassHolder;
0: 
0: import org.apache.derby.iapi.services.cache.Cacheable;
0: import org.apache.derby.iapi.services.cache.CacheableFactory;
0: 
0: import org.apache.derby.iapi.services.cache.CacheFactory;
0: import org.apache.derby.iapi.services.cache.CacheManager;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.monitor.ModuleControl;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.classfile.VMDescriptor;
0: 
0: import java.util.Properties;
0: import java.util.Hashtable;
0: 
0: /**
0: 	<p>
0: 	<b>Debugging problems with generated classes</b>
0: 	<p>
0: 	When the code has been generated incorrectly, all sorts of
0: 	odd things can go wrong.  This is one recommended approach to
0: 	finding the problem.
0: 	<p>
0: 	First, turn on ByteCodeGenInstr and DumpClassFile. Look
0: 	for missing files (right now they are consecutively numbered
0: 	by the activation class builder; later on they won't be, but
0: 	BytCodeGenInstr dumps messages about the classes it has).
0: 	Look at the log to make sure that all "GEN starting class/method"
0: 	messages are paired with a "GEN ending class/method" message.
0: 	If a file is missing or the pairing is missing, then something
0: 	went wrong when the system tried to generate the bytecodes.
0: 	Resort to your favorite debugging tool to step through
0: 	the faulty statement.
0: 	<p>
0: 	If you get class files but the system crashes on you (I had
0: 	an OS segmentation fault once) or you get funny messages like
0: 	JDBC Excpetion: ac5 where ac5 is just the name of a generated
0: 	class, then one of the following is likely:
0: 	<ul>
0: 	<li> you are calling INVOKEVIRTUAL when
0: 	     you are supposed to call INVOKEINTERFACE
0: 	<li> you have an inexact match on a method argument or
0: 	     return type.
0: 	<li> you are trying to get to a superclass's field using
0: 	     a subclass.
0: 	</ul>
0: 	The best way to locate the problem here is to do this (replace
0: 	ac5.class with the name of your class file):
0: 	<ol>
0: 	<li> javap -c -v ac5 >ac5.gp<br>
0: 		 if javap reports "Class not found", and the file ac5.class does
0: 		 exist in the current directory, then the .class file is probably
0: 		 corrupt.  Try running mocha on it to see if that works. The
0: 		 problem will be in the code that generates the entries for
0: 		 the class file -- most likely the ConstantPool is bad, an
0: 		 attribute got created incorrectly, or
0: 		 perhaps the instruction streams are goofed up.
0: 	<li> java mocha.Decompiler ac5.class<br>
0: 	     if mocha cannot create good java source, then you really
0: 	     need to go back and examine the calls creating the java 
0: 	     constructs; a parameter might have been null when it should
0: 	     have, a call to turn an expression into a statement may be
0: 	     missing, or something else may be wrong.
0: 	<li> mv ac5.mocha ac5.java
0: 	<li> vi ac5.java ; you will have to fix any new SQLBoolean(1, ...)
0: 	     calls to be new SQLBoolean(true, ...).  Also mocha 
0: 	     occasionally messes up other stuff too.  Just iterate on it
0: 	     until it builds or you figure out what is wrong with
0: 	     the generated code.
0: 	<li> javac ac5.java
0: 	<li> javap -v -c ac5 >ac5.jp
0: 	<li> sed '1,$s/#[0-9]* </# </' ac5.gp > ac5.gn
0: 	<li> sed '1,$s/#[0-9]* </# </' ac5.jp > ac5.jn<br>
0: 	     These seds are to get rid of constant pool entry numbers,
0: 	     which will be wildly different on the two files.
0: 	<li> vdiff32 ac5.gn ac5.jn<br>
0: 	     this tool shows you side-by-side diffs.  If you change
0: 	     to the window that interleaves the diffs, you can see the 
0: 	     length of the line.  Look for places where there are
0: 	     invokevirtual vs. invokeinterface differences, differences
0: 	     in the class name of a field, differences in the class name
0: 	     of a method parameter or return type.  The generated code
0: 	     *will* have some unavoidable differences from the
0: 	     compiled code, such as:
0: 	     <ul>
0: 	     <li> it will have goto's at the end of try blocks
0: 		  rather than return's.
0: 	     <li> it will do a getstatic on a static final field
0: 		  rather than inlining the static final field's value
0: 	     <li> it will have more checkcast's in it, since it
0: 		  doesn't see if the checkcast will always succeed
0: 		  and thus remove it.
0: 	     </ul>
0: 	     Once you find a diff, you need to track down where
0: 	     the call was generated and modify it appropriately:
0: 	     change newMethodCall to newInterfaceMethodCall;
0: 	     add newCastExpression to get a argument into the right
0: 	     type for the parameter; ensure the return type given for
0: 	     the method is its declared return type.
0: 	</ol>
0: 	@see org.apache.derby.iapi.services.compiler.JavaFactory
0: 
0: 	@author ames
0:  */
0: public class BCJava implements JavaFactory, CacheableFactory, ModuleControl {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	//////////////////////////////////////////////////////////////
0: 	//  
0: 	//	MEMBERS
0: 	//
0: 	//////////////////////////////////////////////////////////////
0: 
0: 	/* Cache of Java class names versus VM type names */
0: 	private CacheManager	vmTypeIdCache;
0: 
0: 	//
0: 	// class interface
0: 	//
0: 	public BCJava() {
0: 	}
0: 
0: 	//
0: 	// ModuleControl interface
0: 	//
0: 	/**
0: 		Start this module. We need a read/write version of the class utilities
0: 
0: 		@exception StandardException standard cloudscape policy
0: 	 */
0: 	public void boot(boolean create, Properties properties) throws StandardException {
0: 
0: 		CacheFactory cf =
0: 			(CacheFactory) Monitor.startSystemModule(org.apache.derby.iapi.reference.Module.CacheFactory);
0: 
0: 		/*
0: 		** The initial and maximum cache sizes are based on experiments
0: 		** that I did with some of the language tests.  I found that
0: 		** the size quickly grew to about 40, then continued to grow
0: 		** slowly after that.
0: 		**
0: 		**			-	Jeff
0: 		*/
0: 		vmTypeIdCache =
0: 			cf.newCacheManager(
0: 				this,
0: 				"VMTypeIdCache",
0: 				64,
0: 				256);
0: 	}
0: 
0: 	/**
0: 		Stop this module.  In this case, nothing needs to be done.
0: 	 */
0: 	public void stop() {
0: 	}
0: 
0: 	//
0: 	// JavaFactory interface
0: 	//
0: 
0: 	/**
0: 	 * a class.  Once it is created, fields, methods,
0: 	 * interfaces, static initialization code, 
0: 	 * and constructors can be added to it.
0: 	 * <verbatim>
0: 	   Java: package #packageName;
0: 	  	 #modifiers #className extends #superClass { }
0: 	  		// modifiers is the | of the JVM constants for
0: 	  		// the modifiers such as static, public, etc.
0: 	   </verbatim>
0: 	 *
0: 	 * @see java.lang.reflect.Modifiers
0: 	 * @param packageName the name of the package the class is in.
0: 	 *	null if it is in the default package.
0: 	 * @param modifiers the | of the Modifiers
0: 	 *	constants representing the visibility and control of this
0: 	 *	method.
0: 	 * @param className the name of the class or interface
0: 	 * @param superClass the name of the superclass or superinterface
0: 	 *
0: 	 * @return the class builder.
0: 	 */
0: 	public ClassBuilder newClassBuilder(ClassFactory cf, String packageName,
0: 		int modifiers, String className, String superClass) {
0: 		
0: 		return new BCClass(cf, packageName, modifiers, className, superClass, this);
0: 	}
0: 
0: 	/*
0: 	** CacheableFactory interface
0: 	*/
0: 	public Cacheable newCacheable(CacheManager cm) {
0: 		return new VMTypeIdCacheable();
0: 	}
0: 
0: 	///////////////////////////////////////////
0: 	//
0: 	// UTILITIES specific to this implementation
0: 	//
0: 	////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Get the VM Type ID that corresponds with the given java type name.
0: 	 * This uses the cache of VM type ids.
0: 	 *
0: 	 * @param javaType	The java type name to translate to a java VM type id
0: 	 *
0: 	 * @return		The java VM type ID
0: 	 */
0: 	Type type(String javaType) {
0: 
0: 		Type retval;
0: 
0: 		try {
0: 
0: 			VMTypeIdCacheable vtic = (VMTypeIdCacheable) vmTypeIdCache.find(javaType);
0: 
0: 			retval = (Type) vtic.descriptor();
0: 
0: 			vmTypeIdCache.release(vtic);
0: 
0: 			return retval;
0: 
0: 		} catch (StandardException se) {
0: 			if (SanityManager.DEBUG) {
0: 				SanityManager.THROWASSERT("Unexpected exception " + se, se);
0: 			}
0: 
0: 			/*
0: 			** If we're running a sane server, let's act as if the
0: 			** exception didn't happen, and just get the vmTypeId the
0: 			** slow way, without caching.
0: 			*/
0: 			retval = new Type(javaType, ClassHolder.convertToInternalDescriptor(javaType));
0: 		}
0: 
0: 		return retval;
0: 	}
0: 
0: 	String vmType(BCMethodDescriptor md) {
0: 		String retval;
0: 
0: 		try {
0: 
0: 			VMTypeIdCacheable vtic = (VMTypeIdCacheable) vmTypeIdCache.find(md);
0: 
0: 			retval = vtic.descriptor().toString();
0: 
0: 			vmTypeIdCache.release(vtic);
0: 
0: 		} catch (StandardException se) {
0: 			if (SanityManager.DEBUG) {
0: 				SanityManager.THROWASSERT("Unexpected exception " + se, se);
0: 			}
0: 
0: 			/*
0: 			** If we're running a sane server, let's act as if the
0: 			** exception didn't happen, and just get the vmTypeId the
0: 			** slow way, without caching.
0: 			*/
0: 			retval = md.buildMethodDescriptor();
0: 		}
0: 
0: 		return retval;
0: 	}
0: 	/**
0: 	 * Map vm types as strings to vm types as the VM
0: 	 * handles, with int ids. Used in mapping opcodes
0: 	 * based on type of operand/stack entry available.
0: 	 */
0: 	static short vmTypeId(String vmTypeS) {
0: 		char vmTypeC = vmTypeS.charAt(0);
0: 		switch(vmTypeC) {
0: 			case VMDescriptor.C_CLASS : return BCExpr.vm_reference;
0: 			case VMDescriptor.C_BYTE : return BCExpr.vm_byte;
0: 			case VMDescriptor.C_CHAR : return BCExpr.vm_char;
0: 			case VMDescriptor.C_DOUBLE : return BCExpr.vm_double;
0: 			case VMDescriptor.C_FLOAT : return BCExpr.vm_float;
0: 			case VMDescriptor.C_INT : return BCExpr.vm_int;
0: 			case VMDescriptor.C_LONG : return BCExpr.vm_long;
0: 			case VMDescriptor.C_SHORT : return BCExpr.vm_short;
0: 			case VMDescriptor.C_BOOLEAN : return BCExpr.vm_int;
0: 			case VMDescriptor.C_ARRAY : return BCExpr.vm_reference;
0: 			case VMDescriptor.C_VOID : return BCExpr.vm_void;
0: 			default: 
0: 				if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("No type match for "+vmTypeS);
0: 		}
0: 		return BCExpr.vm_void;
0: 	}
0: }
============================================================================