1:90e68d8: /*
4:90e68d8: 
1:90e68d8: Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.SuicideOfStreamingTest
1:90e68d8: 
1:90e68d8: Licensed to the Apache Software Foundation (ASF) under one or more
1:90e68d8: contributor license agreements.  See the NOTICE file distributed with
1:90e68d8: this work for additional information regarding copyright ownership.
1:90e68d8: The ASF licenses this file to you under the Apache License, Version 2.0
1:90e68d8: (the "License"); you may not use this file except in compliance with
1:90e68d8: the License.  You may obtain a copy of the License at
1:90e68d8: 
1:90e68d8: http://www.apache.org/licenses/LICENSE-2.0
1:90e68d8: 
1:90e68d8: Unless required by applicable law or agreed to in writing, software
1:90e68d8: distributed under the License is distributed on an "AS IS" BASIS,
1:90e68d8: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90e68d8: See the License for the specific language governing permissions and
1:90e68d8: limitations under the License.
1:90e68d8: 
1:90e68d8: */
1:90e68d8: 
1:90e68d8: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:90e68d8: 
1:90e68d8: import java.io.IOException;
1:1ae02c9: import java.io.InputStream;
1:90e68d8: import java.sql.PreparedStatement;
1:90e68d8: import java.sql.ResultSet;
1:90e68d8: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:1ae02c9: import junit.framework.Test;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:1ae02c9: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:90e68d8: 
1:90e68d8: /**
1:90e68d8:  * Test that an exception is raised if the flow of data from the server to the
1:90e68d8:  * client is aborted.
1:90e68d8:  *
1:90e68d8:  * This test is somewhat special, and care should be taken if new tests are
1:90e68d8:  * added here. The requirements for this test are:<ol>
1:90e68d8:  *      <li>Must be run with the network client driver (DerbyNetClient)</li>
1:90e68d8:  *      <li>Derby must have been built in SANE mode</li>
1:90e68d8:  *      <li>System property <i>derby.debug.suicideOfLayerBStreaming</i> must be
1:90e68d8:  *          set to <i>true</i> in the server-side VM</li></ol>
1:90e68d8:  * 
1:90e68d8:  * Note that action must be taken if this test is to be run with a separate VM
1:90e68d8:  * for the network server (includes running the server on a remote host).
1:90e68d8:  */
1:90e68d8: public class SuicideOfStreamingTest
1:90e68d8:     extends BaseJDBCTestCase {
1:90e68d8: 
1:90e68d8:     /**
1:90e68d8:      * Create instance of the named test.
1:90e68d8:      */
1:90e68d8:     public SuicideOfStreamingTest(String name) {
1:90e68d8:         super(name);
1:90e68d8:     }
1:90e68d8: 
1:90e68d8:     /**
1:90e68d8:      * Create table, insert row and set debug property.
1:90e68d8:      */
1:90e68d8:     public void setUp()
1:90e68d8:             throws Exception {
1:90e68d8:         // Create the table.
1:90e68d8:         Statement createTableSt = createStatement();
1:90e68d8:         createTableSt.execute(
1:90e68d8:                 "create table TEST_TABLE( TEST_COL blob( 65536 ))");
1:90e68d8:         createTableSt.close();
1:90e68d8:         // Insert a row.
1:90e68d8:         PreparedStatement insertLobSt = prepareStatement(
1:90e68d8:                 "insert into TEST_TABLE (TEST_COL) values (?)");
1:90e68d8:         int lobLength = 65536;
1:90e68d8:         insertLobSt.setBinaryStream(1,
1:90e68d8:                 new LoopingAlphabetStream(lobLength), lobLength);
1:90e68d8:         insertLobSt.executeUpdate();
1:90e68d8:         insertLobSt.close();
1:90e68d8:         setSystemProperty("derby.debug.suicideOfLayerBStreaming", "true");
1:90e68d8:     }
1:90e68d8: 
1:90e68d8:     /**
1:90e68d8:      * Unset the debug property.
1:90e68d8:      */
1:90e68d8:     public void tearDown()
1:0ae864a:             throws Exception {
1:90e68d8:         removeSystemProperty("derby.debug.suicideOfLayerBStreaming");
1:0ae864a:         super.tearDown();
1:90e68d8:     }
1:90e68d8: 
1:90e68d8:     /**
1:90e68d8:      * Test that the client throws an exception when an exception is thrown on
1:90e68d8:      * the server side when streaming from the database.
1:90e68d8:      */
1:90e68d8:     public void testInterruptedReadOfLob()
1:90e68d8:             throws IOException, SQLException {
1:90e68d8:         PreparedStatement fetchLobSt = prepareStatement(
1:90e68d8:                 "select TEST_COL from TEST_TABLE");
1:90e68d8:         ResultSet rs = fetchLobSt.executeQuery();
1:90e68d8:         try {
1:90e68d8:             rs.next();
1:90e68d8:             InputStream is = rs.getBinaryStream(1);
1:90e68d8:             // Read the stream.
1:90e68d8:             int c;
1:90e68d8:             while ( (c = is.read() ) > -1) {}
1:90e68d8:             fail("Reading stream should have raised exception.");
1:90e68d8:         } catch (SQLException sqle) {
1:90e68d8:             assertSQLState("58009", sqle);
1:90e68d8:         }
1:90e68d8:         rs.close();
1:90e68d8:         fetchLobSt.close();
1:90e68d8:     }
1:90e68d8: 
1:90e68d8:     /**
1:90e68d8:      * Return a test suite.
1:90e68d8:      *
1:90e68d8:      * @return an empty suite if Derby is built with in INSANE mode,
1:90e68d8:      *      a suite with one or more tests otherwise.
1:90e68d8:      */
1:90e68d8:     public static Test suite() {
1:90e68d8:         if (SanityManager.DEBUG) {
1:90e68d8:             // [NOTE] Observe that the CleanDatabaseTestSetup is wrapping the
1:90e68d8:             //      client/server decorator. This is intentional, because the
1:90e68d8:             //      network server tend to enter an invalid state when setting
1:90e68d8:             //      the debug property used by this test. To avoid the error,
1:90e68d8:             //      we use an embedded connection to clean the database, while
1:90e68d8:             //      the test itself uses a network connection.
1:90e68d8:             //      This means this test will not run with a remote server.
1:90e68d8: 
1:90e68d8:             // [NOTE] To observe the protocol error that should not be seen,
1:90e68d8:             //      move the CleanDatabaseTestSetup inside the client/server
1:90e68d8:             //      decorator. The error is intermittent, so more than one run
1:90e68d8:             //      may be required.
1:90e68d8:             return new CleanDatabaseTestSetup(
1:90e68d8:                     TestConfiguration.clientServerDecorator(
1:1ae02c9:                         new BaseTestSuite(SuicideOfStreamingTest.class,
1:90e68d8:                                       "SuicideOfStreamingTest")));
1:90e68d8:         }
1:1ae02c9:         return new BaseTestSuite(
1:1ae02c9:             "SuicideOfStreamingTest <DISABLED IN INSANE MODE>");
1:90e68d8:     }
1:90e68d8: 
1:90e68d8: } // End class SuicideOfStreamingTest
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:                         new BaseTestSuite(SuicideOfStreamingTest.class,
1:         return new BaseTestSuite(
1:             "SuicideOfStreamingTest <DISABLED IN INSANE MODE>");
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:0ae864a
/////////////////////////////////////////////////////////////////////////
1:             throws Exception {
1:         super.tearDown();
commit:90e68d8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.SuicideOfStreamingTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to you under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1: 
0: import java.io.InputStream;
1: import java.io.IOException;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
0: import java.sql.Statement;
1: import java.sql.SQLException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * Test that an exception is raised if the flow of data from the server to the
1:  * client is aborted.
1:  *
1:  * This test is somewhat special, and care should be taken if new tests are
1:  * added here. The requirements for this test are:<ol>
1:  *      <li>Must be run with the network client driver (DerbyNetClient)</li>
1:  *      <li>Derby must have been built in SANE mode</li>
1:  *      <li>System property <i>derby.debug.suicideOfLayerBStreaming</i> must be
1:  *          set to <i>true</i> in the server-side VM</li></ol>
1:  * 
1:  * Note that action must be taken if this test is to be run with a separate VM
1:  * for the network server (includes running the server on a remote host).
1:  */
1: public class SuicideOfStreamingTest
1:     extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Create instance of the named test.
1:      */
1:     public SuicideOfStreamingTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Create table, insert row and set debug property.
1:      */
1:     public void setUp()
1:             throws Exception {
1:         // Create the table.
1:         Statement createTableSt = createStatement();
1:         createTableSt.execute(
1:                 "create table TEST_TABLE( TEST_COL blob( 65536 ))");
1:         createTableSt.close();
1:         // Insert a row.
1:         PreparedStatement insertLobSt = prepareStatement(
1:                 "insert into TEST_TABLE (TEST_COL) values (?)");
1:         int lobLength = 65536;
1:         insertLobSt.setBinaryStream(1,
1:                 new LoopingAlphabetStream(lobLength), lobLength);
1:         insertLobSt.executeUpdate();
1:         insertLobSt.close();
1:         setSystemProperty("derby.debug.suicideOfLayerBStreaming", "true");
1:     }
1: 
1:     /**
1:      * Unset the debug property.
1:      */
1:     public void tearDown()
0:             throws SQLException {
1:         removeSystemProperty("derby.debug.suicideOfLayerBStreaming");
1:     }
1: 
1:     /**
1:      * Test that the client throws an exception when an exception is thrown on
1:      * the server side when streaming from the database.
1:      */
1:     public void testInterruptedReadOfLob()
1:             throws IOException, SQLException {
1:         PreparedStatement fetchLobSt = prepareStatement(
1:                 "select TEST_COL from TEST_TABLE");
1:         ResultSet rs = fetchLobSt.executeQuery();
1:         try {
1:             rs.next();
1:             InputStream is = rs.getBinaryStream(1);
1:             // Read the stream.
1:             int c;
1:             while ( (c = is.read() ) > -1) {}
1:             fail("Reading stream should have raised exception.");
1:         } catch (SQLException sqle) {
1:             assertSQLState("58009", sqle);
1:         }
1:         rs.close();
1:         fetchLobSt.close();
1:     }
1: 
1:     /**
1:      * Return a test suite.
1:      *
1:      * @return an empty suite if Derby is built with in INSANE mode,
1:      *      a suite with one or more tests otherwise.
1:      */
1:     public static Test suite() {
1:         if (SanityManager.DEBUG) {
1:             // [NOTE] Observe that the CleanDatabaseTestSetup is wrapping the
1:             //      client/server decorator. This is intentional, because the
1:             //      network server tend to enter an invalid state when setting
1:             //      the debug property used by this test. To avoid the error,
1:             //      we use an embedded connection to clean the database, while
1:             //      the test itself uses a network connection.
1:             //      This means this test will not run with a remote server.
1: 
1:             // [NOTE] To observe the protocol error that should not be seen,
1:             //      move the CleanDatabaseTestSetup inside the client/server
1:             //      decorator. The error is intermittent, so more than one run
1:             //      may be required.
1:             return new CleanDatabaseTestSetup(
1:                     TestConfiguration.clientServerDecorator(
0:                         new TestSuite(SuicideOfStreamingTest.class,
1:                                       "SuicideOfStreamingTest")));
1:         }
0:         return new TestSuite("SuicideOfStreamingTest <DISABLED IN INSANE MODE>");
1:     }
1: 
1: } // End class SuicideOfStreamingTest
============================================================================