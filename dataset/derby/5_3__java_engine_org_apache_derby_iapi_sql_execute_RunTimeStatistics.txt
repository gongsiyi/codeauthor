1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.execute.RunTimeStatistics
1:7ecc1f2: 
1:2dd2d11:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd2d11:    contributor license agreements.  See the NOTICE file distributed with
1:2dd2d11:    this work for additional information regarding copyright ownership.
1:2dd2d11:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2dd2d11:    (the "License"); you may not use this file except in compliance with
1:2dd2d11:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.execute;
1:eac0369: 
1:eac0369: import java.io.Serializable;
1:eac0369: 
1:eac0369: import java.sql.Time;
1:eac0369: import java.sql.Timestamp;
1:eac0369: 
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1:48a9884: 
2:eac0369: /**
1:eac0369: 	
1:eac0369:   * A RunTimeStatistics object is a representation of the query execution plan and run
1:eac0369:   * time statistics for a java.sql.ResultSet.
1:eac0369:   * 
1:eac0369:   * A query execution plan is a tree
1:eac0369:   * of execution nodes.  There are a number of possible node types.  Statistics 
1:eac0369:   * are accumulated during execution at each node.  The types of statistics include
1:eac0369:   * the amount of time spent in specific operations (if STATISTICS TIMING is SET ON),
1:eac0369:   * the number of rows passed to the node by its child(ren) and the number of rows
1:eac0369:   * returned by the node to its parent.  (The exact statistics are specific to each
1:eac0369:   * node type.)
1:eac0369:   * <P>
1:eac0369:   * RunTimeStatistics is most meaningful for DML statements (SELECT, INSERT, DELETE
1:eac0369:   * and UPDATE).
1:eac0369:   *
1:eac0369:   */
1:eac0369: public interface RunTimeStatistics
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Get the total compile time for the associated query in milliseconds.
1:eac0369: 	 * Compile time can be divided into parse, bind, optimize and generate times.
1:eac0369: 	 * <P>
1:eac0369: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
1:eac0369: 	 * 
1:eac0369: 	 * @return	The total compile time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getCompileTimeInMillis();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the parse time for the associated query in milliseconds.
1:eac0369: 	 * <P>
1:eac0369: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
1:eac0369: 	 * 
1:eac0369: 	 * @return	The parse time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getParseTimeInMillis();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the bind time for the associated query in milliseconds.
1:eac0369: 	 * 
1:eac0369: 	 * @return	The bind time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getBindTimeInMillis();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the optimize time for the associated query in milliseconds.
1:eac0369: 	 * <P>
1:eac0369: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
1:eac0369: 	 * 
1:eac0369: 	 * @return	The optimize time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getOptimizeTimeInMillis();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the generate time for the associated query in milliseconds.
1:eac0369: 	 * <P>
1:eac0369: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
1:eac0369: 	 * 
1:eac0369: 	 * @return	The generate time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getGenerateTimeInMillis();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the execute time for the associated query in milliseconds.
1:eac0369: 	 * <P>
1:eac0369: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
1:eac0369: 	 * 
1:eac0369: 	 * @return	The execute time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getExecuteTimeInMillis();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the timestamp for the beginning of query compilation. 
1:eac0369: 	 * <P>
1:eac0369: 	 * A null is returned if STATISTICS TIMING is not SET ON.
1:eac0369: 	 *
1:eac0369: 	 * @return	The timestamp for the beginning of query compilation.
1:eac0369: 	 */
1:eac0369: 	public Timestamp getBeginCompilationTimestamp(); 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the timestamp for the end of query compilation. 
1:eac0369: 	 * <P>
1:eac0369: 	 * A null is returned if STATISTICS TIMING is not SET ON.
1:eac0369: 	 *
1:eac0369: 	 * @return	The timestamp for the end of query compilation.
1:eac0369: 	 */
1:eac0369: 	public Timestamp getEndCompilationTimestamp(); 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the timestamp for the beginning of query execution. 
1:eac0369: 	 * <P>
1:eac0369: 	 * A null is returned if STATISTICS TIMING is not SET ON.
1:eac0369: 	 *
1:eac0369: 	 * @return	The timestamp for the beginning of query execution.
1:eac0369: 	 */
1:eac0369: 	public Timestamp getBeginExecutionTimestamp(); 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the timestamp for the end of query execution. 
1:eac0369: 	 * <P>
1:eac0369: 	 * A null is returned if STATISTICS TIMING is not SET ON.
1:eac0369: 	 *
1:eac0369: 	 * @return	The timestamp for the end of query execution.
1:eac0369: 	 */
1:eac0369: 	public Timestamp getEndExecutionTimestamp(); 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the name of the associated query or statement.
1:eac0369: 	 * (This will be an internally generated name if the
1:eac0369: 	 * user did not assign a name.)
1:eac0369: 	 *
1:eac0369: 	 * @return	The name of the associated query or statement.
1:eac0369: 	 */
1:eac0369: 	public String getStatementName();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the name of the Stored Prepared Statement used
1:eac0369: 	 * for the statement.  This method returns
1:eac0369: 	 * a value only for <i>EXECUTE STATEMENT</i> statements;
1:eac0369: 	 * otherwise, returns null.
1:eac0369: 	 * <p>
1:eac0369: 	 * Note that the name is returned in the schema.name
1:eac0369: 	 * format (e.g. APP.MYSTMT).
1:eac0369: 	 *
1:eac0369: 	 * @return	The Stored Prepared Statement name of 
1:eac0369: 	 * the associated statement, or null if it is not an EXECUTE 
1:eac0369: 	 * STATEMENT statement.
1:eac0369: 	 */
1:eac0369: 	public String getSPSName();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the text for the associated query or statement.
1:eac0369: 	 *
1:eac0369: 	 * @return	The text for the associated query or statement.
1:eac0369: 	 */
1:eac0369: 	public String getStatementText();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a String representation of the execution plan 
1:eac0369: 	 * for the associated query or statement.
1:eac0369: 	 *
1:eac0369: 	 * @return	The execution plan for the associated query or statement.
1:eac0369: 	 */
1:eac0369: 	public String getStatementExecutionPlanText();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a String representation of the information on the nodes 
1:eac0369: 	 * relating to table and index scans from the execution plan for 
1:eac0369: 	 * the associated query or statement.
1:eac0369: 	 *
1:eac0369: 	 * @return	The nodes relating to table and index scans
1:eac0369: 	 * from the execution plan for the associated query or statement.
1:eac0369: 	 */
1:eac0369: 	public String getScanStatisticsText();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a String representation of the information on the nodes 
1:eac0369: 	 * relating to table and index scans from the execution plan for 
1:eac0369: 	 * the associated query or statement for a particular table.
1:eac0369: 	 * <P>
1:eac0369: 	 * @param   tableName The table for which user desires statistics.
1:eac0369: 	 * <P>
1:eac0369: 	 * @return	The nodes relating to table and index scans
1:eac0369: 	 * from the execution plan for the associated query or statement.
1:eac0369: 	 */
1:eac0369: 	public String getScanStatisticsText(String tableName);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the estimated row count for the number of rows returned
1:eac0369: 	 * by the associated query or statement.
1:eac0369: 	 *
1:eac0369: 	 * @return	The estimated number of rows returned by the associated
1:eac0369: 	 * query or statement.
1:eac0369: 	 */
1:eac0369: 	public double getEstimatedRowCount();
1:48a9884: 	
1:48a9884: 	/**
1:48a9884: 	 * Initiate a visit of the ResultSetStatistics tree from the top.
1:48a9884: 	 * @param v the visitor that wishes to visit the tree.
1:48a9884: 	 */
1:48a9884: 	public void acceptFromTopResultSet(XPLAINVisitor v);
1:48a9884: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * Initiate a visit of the ResultSetStatistics tree from the top.
1: 	 * @param v the visitor that wishes to visit the tree.
1: 	 */
1: 	public void acceptFromTopResultSet(XPLAINVisitor v);
1: 
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2dd2d11
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.execute.RunTimeStatistics
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
1: import java.io.Serializable;
1: 
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: 
1: /**
1: 	
1:   * A RunTimeStatistics object is a representation of the query execution plan and run
1:   * time statistics for a java.sql.ResultSet.
1:   * 
1:   * A query execution plan is a tree
1:   * of execution nodes.  There are a number of possible node types.  Statistics 
1:   * are accumulated during execution at each node.  The types of statistics include
1:   * the amount of time spent in specific operations (if STATISTICS TIMING is SET ON),
1:   * the number of rows passed to the node by its child(ren) and the number of rows
1:   * returned by the node to its parent.  (The exact statistics are specific to each
1:   * node type.)
1:   * <P>
1:   * RunTimeStatistics is most meaningful for DML statements (SELECT, INSERT, DELETE
1:   * and UPDATE).
1:   *
1:   */
1: public interface RunTimeStatistics
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	 * Get the total compile time for the associated query in milliseconds.
1: 	 * Compile time can be divided into parse, bind, optimize and generate times.
1: 	 * <P>
1: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
1: 	 * 
1: 	 * @return	The total compile time for the associated query in milliseconds.
1: 	 */
1: 	public long getCompileTimeInMillis();
1: 
1: 	/**
1: 	 * Get the parse time for the associated query in milliseconds.
1: 	 * <P>
1: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
1: 	 * 
1: 	 * @return	The parse time for the associated query in milliseconds.
1: 	 */
1: 	public long getParseTimeInMillis();
1: 
1: 	/**
1: 	 * Get the bind time for the associated query in milliseconds.
1: 	 * 
1: 	 * @return	The bind time for the associated query in milliseconds.
1: 	 */
1: 	public long getBindTimeInMillis();
1: 
1: 	/**
1: 	 * Get the optimize time for the associated query in milliseconds.
1: 	 * <P>
1: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
1: 	 * 
1: 	 * @return	The optimize time for the associated query in milliseconds.
1: 	 */
1: 	public long getOptimizeTimeInMillis();
1: 
1: 	/**
1: 	 * Get the generate time for the associated query in milliseconds.
1: 	 * <P>
1: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
1: 	 * 
1: 	 * @return	The generate time for the associated query in milliseconds.
1: 	 */
1: 	public long getGenerateTimeInMillis();
1: 
1: 	/**
1: 	 * Get the execute time for the associated query in milliseconds.
1: 	 * <P>
1: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
1: 	 * 
1: 	 * @return	The execute time for the associated query in milliseconds.
1: 	 */
1: 	public long getExecuteTimeInMillis();
1: 
1: 	/**
1: 	 * Get the timestamp for the beginning of query compilation. 
1: 	 * <P>
1: 	 * A null is returned if STATISTICS TIMING is not SET ON.
1: 	 *
1: 	 * @return	The timestamp for the beginning of query compilation.
1: 	 */
1: 	public Timestamp getBeginCompilationTimestamp(); 
1: 
1: 	/**
1: 	 * Get the timestamp for the end of query compilation. 
1: 	 * <P>
1: 	 * A null is returned if STATISTICS TIMING is not SET ON.
1: 	 *
1: 	 * @return	The timestamp for the end of query compilation.
1: 	 */
1: 	public Timestamp getEndCompilationTimestamp(); 
1: 
1: 	/**
1: 	 * Get the timestamp for the beginning of query execution. 
1: 	 * <P>
1: 	 * A null is returned if STATISTICS TIMING is not SET ON.
1: 	 *
1: 	 * @return	The timestamp for the beginning of query execution.
1: 	 */
1: 	public Timestamp getBeginExecutionTimestamp(); 
1: 
1: 	/**
1: 	 * Get the timestamp for the end of query execution. 
1: 	 * <P>
1: 	 * A null is returned if STATISTICS TIMING is not SET ON.
1: 	 *
1: 	 * @return	The timestamp for the end of query execution.
1: 	 */
1: 	public Timestamp getEndExecutionTimestamp(); 
1: 
1: 	/**
1: 	 * Get the name of the associated query or statement.
1: 	 * (This will be an internally generated name if the
1: 	 * user did not assign a name.)
1: 	 *
1: 	 * @return	The name of the associated query or statement.
1: 	 */
1: 	public String getStatementName();
1: 
1: 	/**
1: 	 * Get the name of the Stored Prepared Statement used
1: 	 * for the statement.  This method returns
1: 	 * a value only for <i>EXECUTE STATEMENT</i> statements;
1: 	 * otherwise, returns null.
1: 	 * <p>
1: 	 * Note that the name is returned in the schema.name
1: 	 * format (e.g. APP.MYSTMT).
1: 	 *
1: 	 * @return	The Stored Prepared Statement name of 
1: 	 * the associated statement, or null if it is not an EXECUTE 
1: 	 * STATEMENT statement.
1: 	 */
1: 	public String getSPSName();
1: 
1: 	/**
1: 	 * Get the text for the associated query or statement.
1: 	 *
1: 	 * @return	The text for the associated query or statement.
1: 	 */
1: 	public String getStatementText();
1: 
1: 	/**
1: 	 * Get a String representation of the execution plan 
1: 	 * for the associated query or statement.
1: 	 *
1: 	 * @return	The execution plan for the associated query or statement.
1: 	 */
1: 	public String getStatementExecutionPlanText();
1: 
1: 	/**
1: 	 * Get a String representation of the information on the nodes 
1: 	 * relating to table and index scans from the execution plan for 
1: 	 * the associated query or statement.
1: 	 *
1: 	 * @return	The nodes relating to table and index scans
1: 	 * from the execution plan for the associated query or statement.
1: 	 */
1: 	public String getScanStatisticsText();
1: 
1: 	/**
1: 	 * Get a String representation of the information on the nodes 
1: 	 * relating to table and index scans from the execution plan for 
1: 	 * the associated query or statement for a particular table.
1: 	 * <P>
1: 	 * @param   tableName The table for which user desires statistics.
1: 	 * <P>
1: 	 * @return	The nodes relating to table and index scans
1: 	 * from the execution plan for the associated query or statement.
1: 	 */
1: 	public String getScanStatisticsText(String tableName);
1: 
1: 	/**
1: 	 * Get the estimated row count for the number of rows returned
1: 	 * by the associated query or statement.
1: 	 *
1: 	 * @return	The estimated number of rows returned by the associated
1: 	 * query or statement.
1: 	 */
1: 	public double getEstimatedRowCount();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.execute;
0: 
0: import java.io.Serializable;
0: 
0: import java.sql.Time;
0: import java.sql.Timestamp;
0: 
0: /**
0: 	
0:   * A RunTimeStatistics object is a representation of the query execution plan and run
0:   * time statistics for a java.sql.ResultSet.
0:   * 
0:   * A query execution plan is a tree
0:   * of execution nodes.  There are a number of possible node types.  Statistics 
0:   * are accumulated during execution at each node.  The types of statistics include
0:   * the amount of time spent in specific operations (if STATISTICS TIMING is SET ON),
0:   * the number of rows passed to the node by its child(ren) and the number of rows
0:   * returned by the node to its parent.  (The exact statistics are specific to each
0:   * node type.)
0:   * <P>
0:   * RunTimeStatistics is most meaningful for DML statements (SELECT, INSERT, DELETE
0:   * and UPDATE).
0:   *
0:   */
0: public interface RunTimeStatistics
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	 * Get the total compile time for the associated query in milliseconds.
0: 	 * Compile time can be divided into parse, bind, optimize and generate times.
0: 	 * <P>
0: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
0: 	 * 
0: 	 * @return	The total compile time for the associated query in milliseconds.
0: 	 */
0: 	public long getCompileTimeInMillis();
0: 
0: 	/**
0: 	 * Get the parse time for the associated query in milliseconds.
0: 	 * <P>
0: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
0: 	 * 
0: 	 * @return	The parse time for the associated query in milliseconds.
0: 	 */
0: 	public long getParseTimeInMillis();
0: 
0: 	/**
0: 	 * Get the bind time for the associated query in milliseconds.
0: 	 * 
0: 	 * @return	The bind time for the associated query in milliseconds.
0: 	 */
0: 	public long getBindTimeInMillis();
0: 
0: 	/**
0: 	 * Get the optimize time for the associated query in milliseconds.
0: 	 * <P>
0: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
0: 	 * 
0: 	 * @return	The optimize time for the associated query in milliseconds.
0: 	 */
0: 	public long getOptimizeTimeInMillis();
0: 
0: 	/**
0: 	 * Get the generate time for the associated query in milliseconds.
0: 	 * <P>
0: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
0: 	 * 
0: 	 * @return	The generate time for the associated query in milliseconds.
0: 	 */
0: 	public long getGenerateTimeInMillis();
0: 
0: 	/**
0: 	 * Get the execute time for the associated query in milliseconds.
0: 	 * <P>
0: 	 * 0 is returned if STATISTICS TIMING is not SET ON.
0: 	 * 
0: 	 * @return	The execute time for the associated query in milliseconds.
0: 	 */
0: 	public long getExecuteTimeInMillis();
0: 
0: 	/**
0: 	 * Get the timestamp for the beginning of query compilation. 
0: 	 * <P>
0: 	 * A null is returned if STATISTICS TIMING is not SET ON.
0: 	 *
0: 	 * @return	The timestamp for the beginning of query compilation.
0: 	 */
0: 	public Timestamp getBeginCompilationTimestamp(); 
0: 
0: 	/**
0: 	 * Get the timestamp for the end of query compilation. 
0: 	 * <P>
0: 	 * A null is returned if STATISTICS TIMING is not SET ON.
0: 	 *
0: 	 * @return	The timestamp for the end of query compilation.
0: 	 */
0: 	public Timestamp getEndCompilationTimestamp(); 
0: 
0: 	/**
0: 	 * Get the timestamp for the beginning of query execution. 
0: 	 * <P>
0: 	 * A null is returned if STATISTICS TIMING is not SET ON.
0: 	 *
0: 	 * @return	The timestamp for the beginning of query execution.
0: 	 */
0: 	public Timestamp getBeginExecutionTimestamp(); 
0: 
0: 	/**
0: 	 * Get the timestamp for the end of query execution. 
0: 	 * <P>
0: 	 * A null is returned if STATISTICS TIMING is not SET ON.
0: 	 *
0: 	 * @return	The timestamp for the end of query execution.
0: 	 */
0: 	public Timestamp getEndExecutionTimestamp(); 
0: 
0: 	/**
0: 	 * Get the name of the associated query or statement.
0: 	 * (This will be an internally generated name if the
0: 	 * user did not assign a name.)
0: 	 *
0: 	 * @return	The name of the associated query or statement.
0: 	 */
0: 	public String getStatementName();
0: 
0: 	/**
0: 	 * Get the name of the Stored Prepared Statement used
0: 	 * for the statement.  This method returns
0: 	 * a value only for <i>EXECUTE STATEMENT</i> statements;
0: 	 * otherwise, returns null.
0: 	 * <p>
0: 	 * Note that the name is returned in the schema.name
0: 	 * format (e.g. APP.MYSTMT).
0: 	 *
0: 	 * @return	The Stored Prepared Statement name of 
0: 	 * the associated statement, or null if it is not an EXECUTE 
0: 	 * STATEMENT statement.
0: 	 */
0: 	public String getSPSName();
0: 
0: 	/**
0: 	 * Get the text for the associated query or statement.
0: 	 *
0: 	 * @return	The text for the associated query or statement.
0: 	 */
0: 	public String getStatementText();
0: 
0: 	/**
0: 	 * Get a String representation of the execution plan 
0: 	 * for the associated query or statement.
0: 	 *
0: 	 * @return	The execution plan for the associated query or statement.
0: 	 */
0: 	public String getStatementExecutionPlanText();
0: 
0: 	/**
0: 	 * Get a String representation of the information on the nodes 
0: 	 * relating to table and index scans from the execution plan for 
0: 	 * the associated query or statement.
0: 	 *
0: 	 * @return	The nodes relating to table and index scans
0: 	 * from the execution plan for the associated query or statement.
0: 	 */
0: 	public String getScanStatisticsText();
0: 
0: 	/**
0: 	 * Get a String representation of the information on the nodes 
0: 	 * relating to table and index scans from the execution plan for 
0: 	 * the associated query or statement for a particular table.
0: 	 * <P>
0: 	 * @param   tableName The table for which user desires statistics.
0: 	 * <P>
0: 	 * @return	The nodes relating to table and index scans
0: 	 * from the execution plan for the associated query or statement.
0: 	 */
0: 	public String getScanStatisticsText(String tableName);
0: 
0: 	/**
0: 	 * Get the estimated row count for the number of rows returned
0: 	 * by the associated query or statement.
0: 	 *
0: 	 * @return	The estimated number of rows returned by the associated
0: 	 * query or statement.
0: 	 */
0: 	public double getEstimatedRowCount();
0: }
============================================================================