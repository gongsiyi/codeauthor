1:eac0369: /*
4:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.io.CPStorageFactory
1:345de35: 
1:2724c48:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2724c48:    contributor license agreements.  See the NOTICE file distributed with
1:2724c48:    this work for additional information regarding copyright ownership.
1:2724c48:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2724c48:    (the "License"); you may not use this file except in compliance with
1:2724c48:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.io;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.io.StorageFactory;
1:eac0369: import org.apache.derby.io.StorageFile;
1:eac0369: 
1:eac0369: import java.io.FileNotFoundException;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.OutputStream;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * This class provides a class path based implementation of the StorageFactory interface. It is used by the
1:eac0369:  * database engine to access persistent data and transaction logs under the classpath subsubprotocol.
1:eac0369:  */
1:eac0369: 
1:eac0369: public class CPStorageFactory extends BaseStorageFactory
1:bf4839e: {   
1:eac0369:     /**
1:eac0369:      * Construct a persistent StorageFile from a path name.
4:eac0369:      *
1:eac0369:      * @param path The path name of the file
1:eac0369:      *
1:eac0369:      * @return A corresponding StorageFile object
1:eac0369:      */
1:eac0369:     StorageFile newPersistentFile( String path)
3:eac0369:     {
1:eac0369:         return new CPFile( this, path);
2:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Construct a StorageFile from a directory and file name.
1:eac0369:      *
1:eac0369:      * @param directoryName The directory part of the path name. Must not be null, nor may it be in the temp dir.
1:eac0369:      * @param fileName The name of the file within the directory.
1:eac0369:      *
1:eac0369:      * @return A corresponding StorageFile object
1:eac0369:      */
1:eac0369:     StorageFile newPersistentFile( String directoryName, String fileName)
1:eac0369:     {
1:eac0369:         if( directoryName == null || directoryName.length() == 0)
1:eac0369:             return newPersistentFile( fileName);
1:eac0369:         return new CPFile( this, directoryName, fileName);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Construct a StorageFile from a directory and file name.
1:eac0369:      *
1:eac0369:      * @param directoryName The directory part of the path name.
1:eac0369:      * @param fileName The name of the file within the directory.
1:eac0369:      *
1:eac0369:      * @return A corresponding StorageFile object
1:eac0369:      */
1:eac0369:     StorageFile newPersistentFile( StorageFile directoryName, String fileName)
1:eac0369:     {
1:eac0369:         if( directoryName == null)
1:eac0369:             return newPersistentFile( fileName);
1:eac0369:         return new CPFile( (CPFile) directoryName, fileName);
1:eac0369:     }
1:eac0369: 
1:eac0369:     void doInit() throws IOException
1:eac0369:     {
1:eac0369:         if( dataDirectory != null)
1:eac0369:         {
1:eac0369:             separatedDataDirectory = dataDirectory + '/'; // Class paths use '/' as a separator
1:eac0369:             canonicalName = dataDirectory;
1:eac0369:             createTempDir();
1:eac0369:         }
1:eac0369:     } // end of doInit
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2724c48
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:bf4839e
/////////////////////////////////////////////////////////////////////////
1: {   
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.io.CPStorageFactory
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.io;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.io.StorageFactory;
1: import org.apache.derby.io.StorageFile;
1: 
1: import java.io.FileNotFoundException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.io.IOException;
1: 
1: import java.util.Properties;
1: 
1: /**
1:  * This class provides a class path based implementation of the StorageFactory interface. It is used by the
1:  * database engine to access persistent data and transaction logs under the classpath subsubprotocol.
1:  */
1: 
1: public class CPStorageFactory extends BaseStorageFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0:     boolean useContextLoader = true;
1:     
1:     /**
0:      * Classes implementing the StorageFactory interface must have a null
0:      * constructor.  This method is called when the database is booted up to
0:      * initialize the class. It should perform all actions necessary to start the
0:      * basic storage, such as creating a temporary file directory.
1:      *
0:      * The init method will be called once, before any other method is called, and will not
0:      * be called again.
1:      *
0:      * @param home The name of the directory containing the database. It comes from the system.home system property.
0:      *             It may be null. A storage factory may decide to ignore this parameter. (For instance the classpath
0:      *             storage factory ignores it.
0:      * @param databaseName The name of the database (directory). All relative pathnames are relative to this directory.
0:      *                     If null then the storage factory will only be used to deal with the directory containing
0:      *                     the databases.
0:      * @param create If true then the database is being created.
0:      * @param tempDirName The name of the temporary file directory set in properties. If null then a default
0:      *                    directory should be used. Each database should get a separate temporary file
0:      *                    directory within this one to avoid collisions.
0:      * @param uniqueName A unique name that can be used to create the temporary file directory for this database.
1:      *
0:      * @exception IOException on an error (unexpected).
1:      */
0:     public void init( String home, String databaseName, String tempDirName, String uniqueName)
0:         throws IOException
1:     {
0:         // Prefix the database name with a '/' so that the class loader will not use a Cloudscape
0:         // internal package.
0:         if( databaseName == null
0:             || ( databaseName.length() > 0
0:                  && (databaseName.charAt( 0) == '/' || databaseName.charAt( 0) == getSeparator())))
0:             super.init( home, databaseName, tempDirName, uniqueName);
0:         else
0:             super.init( home, "/" + databaseName, tempDirName, uniqueName);
1:     }
1:     
1:     /**
1:      * Construct a persistent StorageFile from a path name.
1:      *
1:      * @param path The path name of the file
1:      *
1:      * @return A corresponding StorageFile object
1:      */
1:     StorageFile newPersistentFile( String path)
1:     {
1:         return new CPFile( this, path);
1:     }
1: 
1:     /**
1:      * Construct a StorageFile from a directory and file name.
1:      *
1:      * @param directoryName The directory part of the path name. Must not be null, nor may it be in the temp dir.
1:      * @param fileName The name of the file within the directory.
1:      *
1:      * @return A corresponding StorageFile object
1:      */
1:     StorageFile newPersistentFile( String directoryName, String fileName)
1:     {
1:         if( directoryName == null || directoryName.length() == 0)
1:             return newPersistentFile( fileName);
1:         return new CPFile( this, directoryName, fileName);
1:     }
1: 
1:     /**
1:      * Construct a StorageFile from a directory and file name.
1:      *
1:      * @param directoryName The directory part of the path name.
1:      * @param fileName The name of the file within the directory.
1:      *
1:      * @return A corresponding StorageFile object
1:      */
1:     StorageFile newPersistentFile( StorageFile directoryName, String fileName)
1:     {
1:         if( directoryName == null)
1:             return newPersistentFile( fileName);
1:         return new CPFile( (CPFile) directoryName, fileName);
1:     }
1: 
1:     void doInit() throws IOException
1:     {
1:         if( dataDirectory != null)
1:         {
1:             separatedDataDirectory = dataDirectory + '/'; // Class paths use '/' as a separator
1:             canonicalName = dataDirectory;
1:             createTempDir();
1:         }
1:     } // end of doInit
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.io;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.io.StorageFactory;
0: import org.apache.derby.io.StorageFile;
0: 
0: import java.io.FileNotFoundException;
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.io.IOException;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * This class provides a class path based implementation of the StorageFactory interface. It is used by the
0:  * database engine to access persistent data and transaction logs under the classpath subsubprotocol.
0:  */
0: 
0: public class CPStorageFactory extends BaseStorageFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0:     boolean useContextLoader = true;
0:     
0:     /**
0:      * Classes implementing the StorageFactory interface must have a null
0:      * constructor.  This method is called when the database is booted up to
0:      * initialize the class. It should perform all actions necessary to start the
0:      * basic storage, such as creating a temporary file directory.
0:      *
0:      * The init method will be called once, before any other method is called, and will not
0:      * be called again.
0:      *
0:      * @param home The name of the directory containing the database. It comes from the system.home system property.
0:      *             It may be null. A storage factory may decide to ignore this parameter. (For instance the classpath
0:      *             storage factory ignores it.
0:      * @param databaseName The name of the database (directory). All relative pathnames are relative to this directory.
0:      *                     If null then the storage factory will only be used to deal with the directory containing
0:      *                     the databases.
0:      * @param create If true then the database is being created.
0:      * @param tempDirName The name of the temporary file directory set in properties. If null then a default
0:      *                    directory should be used. Each database should get a separate temporary file
0:      *                    directory within this one to avoid collisions.
0:      * @param uniqueName A unique name that can be used to create the temporary file directory for this database.
0:      *
0:      * @exception IOException on an error (unexpected).
0:      */
0:     public void init( String home, String databaseName, String tempDirName, String uniqueName)
0:         throws IOException
0:     {
0:         // Prefix the database name with a '/' so that the class loader will not use a Cloudscape
0:         // internal package.
0:         if( databaseName == null
0:             || ( databaseName.length() > 0
0:                  && (databaseName.charAt( 0) == '/' || databaseName.charAt( 0) == getSeparator())))
0:             super.init( home, databaseName, tempDirName, uniqueName);
0:         else
0:             super.init( home, "/" + databaseName, tempDirName, uniqueName);
0:     }
0:     
0:     /**
0:      * Construct a persistent StorageFile from a path name.
0:      *
0:      * @param path The path name of the file
0:      *
0:      * @return A corresponding StorageFile object
0:      */
0:     StorageFile newPersistentFile( String path)
0:     {
0:         return new CPFile( this, path);
0:     }
0: 
0:     /**
0:      * Construct a StorageFile from a directory and file name.
0:      *
0:      * @param directoryName The directory part of the path name. Must not be null, nor may it be in the temp dir.
0:      * @param fileName The name of the file within the directory.
0:      *
0:      * @return A corresponding StorageFile object
0:      */
0:     StorageFile newPersistentFile( String directoryName, String fileName)
0:     {
0:         if( directoryName == null || directoryName.length() == 0)
0:             return newPersistentFile( fileName);
0:         return new CPFile( this, directoryName, fileName);
0:     }
0: 
0:     /**
0:      * Construct a StorageFile from a directory and file name.
0:      *
0:      * @param directoryName The directory part of the path name.
0:      * @param fileName The name of the file within the directory.
0:      *
0:      * @return A corresponding StorageFile object
0:      */
0:     StorageFile newPersistentFile( StorageFile directoryName, String fileName)
0:     {
0:         if( directoryName == null)
0:             return newPersistentFile( fileName);
0:         return new CPFile( (CPFile) directoryName, fileName);
0:     }
0: 
0:     void doInit() throws IOException
0:     {
0:         if( dataDirectory != null)
0:         {
0:             separatedDataDirectory = dataDirectory + '/'; // Class paths use '/' as a separator
0:             canonicalName = dataDirectory;
0:             createTempDir();
0:         }
0:     } // end of doInit
0: }
============================================================================