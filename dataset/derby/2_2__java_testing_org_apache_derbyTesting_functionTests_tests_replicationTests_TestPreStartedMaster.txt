1:db8dae7: /*
1:db8dae7:  
1:db8dae7: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMaster
1:db8dae7:  
1:db8dae7: Licensed to the Apache Software Foundation (ASF) under one or more
1:db8dae7: contributor license agreements.  See the NOTICE file distributed with
1:db8dae7: this work for additional information regarding copyright ownership.
1:db8dae7: The ASF licenses this file to You under the Apache License, Version 2.0
1:db8dae7: (the "License"); you may not use this file except in compliance with
1:db8dae7: the License.  You may obtain a copy of the License at
1:db8dae7:  
1:db8dae7:    http://www.apache.org/licenses/LICENSE-2.0
1:db8dae7:  
1:db8dae7: Unless required by applicable law or agreed to in writing, software
1:db8dae7: distributed under the License is distributed on an "AS IS" BASIS,
1:db8dae7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db8dae7: See the License for the specific language governing permissions and
1:db8dae7: limitations under the License.
1:db8dae7:  
1:db8dae7:  */
1:db8dae7: 
1:db8dae7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:db8dae7: 
1:db8dae7: import java.io.IOException;
1:db8dae7: import java.sql.Connection;
1:db8dae7: import java.sql.DriverManager;
1:db8dae7: import java.sql.SQLException;
1:db8dae7: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:db8dae7: import org.apache.derbyTesting.junit.TestConfiguration;
1:db8dae7: 
1:db8dae7: /**
1:db8dae7:  * Test that after startMaster, new attempts for startMaster or startSlave do fail.
1:db8dae7:  */
1:db8dae7: public class TestPreStartedMaster extends ClientRunner
1:db8dae7: {
1:db8dae7:     
1:db8dae7:     public TestPreStartedMaster(String testcaseName)
1:db8dae7:     {
1:db8dae7:         super(testcaseName);
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     public static Test suite()
1:db8dae7:         throws Exception
1:db8dae7:     {
1:db8dae7:         System.out.println("**** TestPreStartedMaster.suite()");
1:db8dae7:         
1:db8dae7:         initEnvironment();
1:db8dae7:         
1:db8dae7:         // String masterHostName = System.getProperty("test.serverHost", "localhost");
1:db8dae7:         // int masterPortNo = Integer.parseInt(System.getProperty("test.serverPort", "1527"));
1:db8dae7:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("TestPreStartedMaster");
1:db8dae7:                 
1:db8dae7:         suite.addTest(TestPreStartedMaster.suite(masterServerHost, masterServerPort));
1:db8dae7:         System.out.println("*** Done suite.addTest(TestPreStartedMaster.suite())");
1:db8dae7:         
1:db8dae7:         return (Test)suite;
1:db8dae7:     }
1:db8dae7: 
1:db8dae7:     /**
1:db8dae7:      * Adds this class to the *existing server* suite.
1:db8dae7:      */
1:db8dae7:     public static Test suite(String serverHost, int serverPort)
1:db8dae7:     {
1:db8dae7:         System.out.println("*** TestPreStartedMaster.suite(serverHost,serverPort)");
1:db8dae7:      
1:db8dae7:         Test t = TestConfiguration.existingServerSuite(TestPreStartedMaster.class,false,serverHost,serverPort);
1:db8dae7:         System.out.println("*** Done TestConfiguration.existingServerSuite(TestPreStartedMaster.class,false,serverHost,serverPort)");
1:db8dae7:         return t;
1:db8dae7:    }
1:db8dae7: 
1:db8dae7:     
1:db8dae7:     /**
1:db8dae7:      *
1:db8dae7:      *
1:40a554b:      * @throws java.sql.SQLException 
1:40a554b:      * @throws java.io.IOException 
1:40a554b:      * @throws java.lang.InterruptedException 
1:db8dae7:      */
1:db8dae7:     public void testStartMasterConnect_OK()
1:db8dae7:     throws SQLException, IOException, InterruptedException
1:db8dae7:     {
1:db8dae7:         System.out.println("**** TestPreStartedMaster.testStartMasterConnect_OK() "+
1:db8dae7:                 getTestConfiguration().getJDBCClient().getJDBCDriverName());
1:db8dae7:         
1:db8dae7:         Connection conn = null;
1:db8dae7:         String db = masterDatabasePath +"/"+ReplicationRun.masterDbSubPath +"/"+ replicatedDb;
1:db8dae7:         String connectionURL = "jdbc:derby:"  
1:db8dae7:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:db8dae7:                 + db
1:db8dae7:                 + ";startMaster=true"
1:db8dae7:                 + ";slaveHost=" + slaveServerHost 
1:db8dae7:                 + ";slavePort=" + slaveReplPort;
1:db8dae7:         System.out.println(connectionURL);
1:db8dae7:         // First StartMaster connect ok:
1:db8dae7:         try
1:db8dae7:         {
1:db8dae7:             conn = DriverManager.getConnection(connectionURL);
1:db8dae7:             System.out.println("1. startMaster Successfully connected as: " + connectionURL);
1:db8dae7:         }
1:db8dae7:         catch (SQLException se)
1:db8dae7:         {
1:db8dae7:             int ec = se.getErrorCode();
1:db8dae7:             String ss = se.getSQLState();
1:db8dae7:             String msg = ec + " " + ss + " " + se.getMessage();
1:db8dae7:             System.out.println(msg);
1:db8dae7:             throw se;
1:db8dae7:         }
1:db8dae7:         
1:db8dae7:         System.out.println("2. startMaster attempt should fail on: " + connectionURL);
1:db8dae7:         System.out.println("********************'' 2. CURRENTLY HANGS!!!! Skipping.");
1:40a554b:         // if (false)
1:40a554b:         { // FIXME! PRELIM Hangs!!
1:db8dae7:         // A 2. StartMaster connect should fail:
1:db8dae7:         try
1:db8dae7:         {
1:db8dae7:             conn = DriverManager.getConnection(connectionURL); // FIXME! PRELIM Hangs!!
1:db8dae7:             System.out.println("2. Unexpectedly connected as: " + connectionURL);
1:db8dae7:             assertTrue("2. Unexpectedly connected as: " + connectionURL, false);
1:db8dae7:         }
1:db8dae7:         catch (SQLException se)
1:db8dae7:         {
1:db8dae7:             int ec = se.getErrorCode();
1:db8dae7:             String ss = se.getSQLState();
1:db8dae7:             String msg = ec + " " + ss + " " + se.getMessage();
1:db8dae7:             System.out.println("2. startMaster No connection as expected: " + msg);
1:db8dae7:             assertSQLState("2. startMaster Unexpected SQLException: " + msg, "XJ004", se);
1:db8dae7:         }
1:db8dae7:         }
1:db8dae7:         
1:db8dae7:         // A 2. StartSlave connect should fail:
1:db8dae7:         db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
1:db8dae7:         connectionURL = "jdbc:derby:"  
1:db8dae7:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:db8dae7:                 + db
1:db8dae7:                 + ";startSlave=true"
1:db8dae7:                 + ";slaveHost=" + slaveServerHost 
1:db8dae7:                 + ";slavePort=" + slaveReplPort;
1:db8dae7:         System.out.println(connectionURL);
1:db8dae7:         try
1:db8dae7:         {
1:db8dae7:             conn = DriverManager.getConnection(connectionURL);
1:db8dae7:             System.out.println("2. startSlave Unexpectedly connected as: " + connectionURL);
1:db8dae7:             assertTrue("2. startSlave Unexpectedly connected as: " + connectionURL, false);
1:db8dae7:         }
1:db8dae7:         catch (SQLException se)
1:db8dae7:         {
1:db8dae7:             int ec = se.getErrorCode();
1:db8dae7:             String ss = se.getSQLState();
1:db8dae7:             String msg = ec + " " + ss + " " + se.getMessage();
1:db8dae7:             System.out.println("2. startSlave No connection as expected: " + msg);
1:db8dae7:             // SQLCODE: -1, SQLSTATE: XRE09
1:db8dae7:             assertSQLState("2. startSlave Unexpected SQLException: " + msg, "XRE09", se);
1:db8dae7:         }
1:db8dae7:  
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     public void verifyTestStartMasterConnect_OK()
1:db8dae7:     throws SQLException, IOException, InterruptedException
1:db8dae7:     {
1:db8dae7: 
1:db8dae7:     }
1:db8dae7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("TestPreStartedMaster");
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:40a554b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @throws java.sql.SQLException 
1:      * @throws java.io.IOException 
1:      * @throws java.lang.InterruptedException 
/////////////////////////////////////////////////////////////////////////
1:         // if (false)
1:         { // FIXME! PRELIM Hangs!!
commit:db8dae7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMaster
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
0: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test that after startMaster, new attempts for startMaster or startSlave do fail.
1:  */
1: public class TestPreStartedMaster extends ClientRunner
1: {
1:     
1:     public TestPreStartedMaster(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
1:     public static Test suite()
1:         throws Exception
1:     {
1:         System.out.println("**** TestPreStartedMaster.suite()");
1:         
1:         initEnvironment();
1:         
1:         // String masterHostName = System.getProperty("test.serverHost", "localhost");
1:         // int masterPortNo = Integer.parseInt(System.getProperty("test.serverPort", "1527"));
1:         
0:         TestSuite suite = new TestSuite("TestPreStartedMaster");
1:                 
1:         suite.addTest(TestPreStartedMaster.suite(masterServerHost, masterServerPort));
1:         System.out.println("*** Done suite.addTest(TestPreStartedMaster.suite())");
1:         
1:         return (Test)suite;
1:     }
1: 
1:     /**
1:      * Adds this class to the *existing server* suite.
1:      */
1:     public static Test suite(String serverHost, int serverPort)
1:     {
1:         System.out.println("*** TestPreStartedMaster.suite(serverHost,serverPort)");
1:      
1:         Test t = TestConfiguration.existingServerSuite(TestPreStartedMaster.class,false,serverHost,serverPort);
1:         System.out.println("*** Done TestConfiguration.existingServerSuite(TestPreStartedMaster.class,false,serverHost,serverPort)");
1:         return t;
1:    }
1: 
1:     
1:     /**
1:      *
1:      *
0:      * @throws SQLException, IOException, InterruptedException
1:      */
1:     public void testStartMasterConnect_OK()
1:     throws SQLException, IOException, InterruptedException
1:     {
1:         System.out.println("**** TestPreStartedMaster.testStartMasterConnect_OK() "+
1:                 getTestConfiguration().getJDBCClient().getJDBCDriverName());
1:         
1:         Connection conn = null;
1:         String db = masterDatabasePath +"/"+ReplicationRun.masterDbSubPath +"/"+ replicatedDb;
1:         String connectionURL = "jdbc:derby:"  
1:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:                 + db
1:                 + ";startMaster=true"
1:                 + ";slaveHost=" + slaveServerHost 
1:                 + ";slavePort=" + slaveReplPort;
1:         System.out.println(connectionURL);
1:         // First StartMaster connect ok:
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL);
1:             System.out.println("1. startMaster Successfully connected as: " + connectionURL);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
1:             System.out.println(msg);
1:             throw se;
1:         }
1:         
1:         System.out.println("2. startMaster attempt should fail on: " + connectionURL);
1:         System.out.println("********************'' 2. CURRENTLY HANGS!!!! Skipping.");
0:         if (false){ // FIXME! PRELIM Hangs!!
1:         // A 2. StartMaster connect should fail:
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL); // FIXME! PRELIM Hangs!!
1:             System.out.println("2. Unexpectedly connected as: " + connectionURL);
1:             assertTrue("2. Unexpectedly connected as: " + connectionURL, false);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
1:             System.out.println("2. startMaster No connection as expected: " + msg);
1:             assertSQLState("2. startMaster Unexpected SQLException: " + msg, "XJ004", se);
1:         }
1:         }
1:         
1:         // A 2. StartSlave connect should fail:
1:         db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
1:         connectionURL = "jdbc:derby:"  
1:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:                 + db
1:                 + ";startSlave=true"
1:                 + ";slaveHost=" + slaveServerHost 
1:                 + ";slavePort=" + slaveReplPort;
1:         System.out.println(connectionURL);
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL);
1:             System.out.println("2. startSlave Unexpectedly connected as: " + connectionURL);
1:             assertTrue("2. startSlave Unexpectedly connected as: " + connectionURL, false);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
1:             System.out.println("2. startSlave No connection as expected: " + msg);
1:             // SQLCODE: -1, SQLSTATE: XRE09
1:             assertSQLState("2. startSlave Unexpected SQLException: " + msg, "XRE09", se);
1:         }
1:  
1:     }
1:     
1:     public void verifyTestStartMasterConnect_OK()
1:     throws SQLException, IOException, InterruptedException
1:     {
1: 
1:     }
1: }
============================================================================