1:10e07a5: /*
1:10e07a5: 
1:10e07a5: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeChange
1:10e07a5: 
1:10e07a5: Licensed to the Apache Software Foundation (ASF) under one or more
1:10e07a5: contributor license agreements.  See the NOTICE file distributed with
1:10e07a5: this work for additional information regarding copyright ownership.
1:10e07a5: The ASF licenses this file to You under the Apache License, Version 2.0
1:10e07a5: (the "License"); you may not use this file except in compliance with
1:10e07a5: the License.  You may obtain a copy of the License at
1:10e07a5: 
1:10e07a5:    http://www.apache.org/licenses/LICENSE-2.0
1:10e07a5: 
1:10e07a5: Unless required by applicable law or agreed to in writing, software
1:10e07a5: distributed under the License is distributed on an "AS IS" BASIS,
1:10e07a5: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10e07a5: See the License for the specific language governing permissions and
1:10e07a5: limitations under the License.
1:10e07a5: 
1:10e07a5: */
1:10e07a5: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1:10e07a5: 
1:10e07a5: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:6be56bc: import org.apache.derbyTesting.junit.DerbyVersion;
1:10e07a5: 
1:10e07a5: /**
1:10e07a5:  * Abstract class to provide support for test fixtures for
1:10e07a5:  * upgrade change testing.
1:10e07a5:  *
1:10e07a5:  */
1:10e07a5: abstract class UpgradeChange extends BaseJDBCTestCase {
1:10e07a5:       
1:10e07a5:     /**
1:10e07a5:      * Thread local for the phase of the test set.
1:10e07a5:      * Contains an Integer object.
1:10e07a5:      */
1:e18f54b:     static final ThreadLocal<Integer> phase = new ThreadLocal<Integer>();
1:10e07a5:     
1:10e07a5:     /**
1:10e07a5:      * Thread local for the old version of the engine.
1:10e07a5:      * Contains a int array with four entries corresponding
1:10e07a5:      * to the four part Derby number.
1:10e07a5:      */
1:e18f54b:     static final ThreadLocal<int[]> oldVersion = new ThreadLocal<int[]>();
1:10e07a5:     
1:10e07a5:     /**
1:daf5fa3:      * SWL state thrown when a feature requires upgrade
1:daf5fa3:      * to a newer version and thus cannot be run in soft
1:daf5fa3:      * upgrade mode.
1:daf5fa3:      */
1:daf5fa3:     static final String SQLSTATE_NEED_UPGRADE = "XCL47";
1:daf5fa3:     
1:daf5fa3:     /**
1:10e07a5:      * Phases in upgrade test
1:10e07a5:      */
1:10e07a5:     static final String[] PHASES =
1:10e07a5:     {"CREATE", "SOFT UPGRADE", "POST SOFT UPGRADE", "UPGRADE", "POST UPGRADE"};
1:10e07a5:     
1:10e07a5:     
1:10e07a5:     /**
1:10e07a5:      * Create a database with old version
1:10e07a5:      */
1:10e07a5:     static final int PH_CREATE = 0;
1:10e07a5:     /**
1:10e07a5:      * Perform soft upgrade with new version
1:10e07a5:      */
1:10e07a5:     static final int PH_SOFT_UPGRADE = 1;
1:10e07a5:     /**
1:10e07a5:      * Boot the database with old release after soft upgrade
1:10e07a5:      */
1:10e07a5:     static final int PH_POST_SOFT_UPGRADE = 2;
1:10e07a5:     /**
1:10e07a5:      * Perform hard upgrade with new version
1:10e07a5:      */
1:10e07a5:     
1:10e07a5:     static final int PH_HARD_UPGRADE = 3;
1:10e07a5:     /**
1:42aa1d6:      * Boot the database with old release after hard upgrade.
1:42aa1d6:      * Expected to fail to connect, so no tests need to have
1:42aa1d6:      * cases for this condition.
1:10e07a5:      */
1:10e07a5:     static final int PH_POST_HARD_UPGRADE = 4;
1:10e07a5:     
1:10e07a5:     public UpgradeChange(String name) {
1:10e07a5:         super(name);
2:10e07a5:     }
1:df731e9: 
1:10e07a5:     /**
1:10e07a5:      * Get the phase of the upgrade sequence we are running.
1:10e07a5:      * One of PH_CREATE, PH_SOFT_UPGRADE, PH_POST_SOFT_UPGRADE,
1:10e07a5:      * PH_HARD_UPGRADE, PH_POST_HARD_UPGRADE.
1:10e07a5:      */
1:10e07a5:     final int getPhase()
1:10e07a5:     {
1:e18f54b:         return phase.get();
1:10e07a5:     }
1:10e07a5:     
1:10e07a5:     /**
1:6be56bc:      * Returns a {@code DerbyVersion} object describing the old version.
1:6be56bc:      *
1:6be56bc:      * @return A version object.
1:6be56bc:      */
1:6be56bc:     final DerbyVersion getOldVersion() {
1:6be56bc:         return new DerbyVersion(
1:6be56bc:                 getOldMajor(), getOldMinor(), getOldFixPack(), getOldPoint());
1:6be56bc:     }
1:6be56bc: 
1:6be56bc:     /**
1:10e07a5:      * Get the major number of the old version being upgraded
1:10e07a5:      * from.
1:10e07a5:      */
1:10e07a5:     final int getOldMajor() {
1:10e07a5:         return ((int[]) oldVersion.get())[0];
1:10e07a5:     }
1:10e07a5:     
1:10e07a5:     /**
1:10e07a5:      * Get the minor number of the old version being upgraded
1:10e07a5:      * from.
1:10e07a5:      */    
1:10e07a5:     final int getOldMinor() {
1:10e07a5:         return ((int[]) oldVersion.get())[1];
1:10e07a5:     }
1:10e07a5:     
1:10e07a5:     /**
1:df731e9:      * Get the fixpack number of the old version being upgraded
1:df731e9:      * from.
1:df731e9:      */    
1:df731e9:     final int getOldFixPack() {
1:df731e9:         return ((int[]) oldVersion.get())[2];
1:df731e9:     }
1:df731e9:     
1:df731e9:     /**
1:df731e9:      * Get the point number of the old version being upgraded
1:df731e9:      * from.
1:df731e9:      */    
1:df731e9:     final int getOldPoint() {
1:df731e9:         return ((int[]) oldVersion.get())[3];
1:df731e9:     }
1:df731e9:     
1:df731e9:     /**
1:10e07a5:      * Return true if the old version is equal to or more
1:10e07a5:      * recent that the passed in major and minor version.
1:10e07a5:      */
1:10e07a5:     boolean oldAtLeast(int requiredMajor, int requiredMinor) 
1:10e07a5:     {
1:10e07a5:         if (getOldMajor() > requiredMajor)
1:10e07a5:             return true;
1:10e07a5:         if ((getOldMajor() == requiredMajor)
1:10e07a5:             && (getOldMinor() >= requiredMinor))
1:10e07a5:             return true;
1:10e07a5:         return false;
1:df731e9:     } 
1:caf6b95: 
1:caf6b95:     /**
1:caf6b95:      * Return true if and only if the old version is less than the
1:caf6b95:      * specified version.
1:caf6b95:      */
1:caf6b95:     boolean oldLessThan(int major, int minor, int fixpack, int point) {
1:caf6b95:         int[] old = (int[]) oldVersion.get();
1:caf6b95:         int[] version = new int[]{major, minor, fixpack, point};
1:caf6b95: 
1:caf6b95:         for (int i = 0; i < old.length; i++) {
1:caf6b95:             if (old[i] < version[i]) return true;
1:caf6b95:             if (old[i] > version[i]) return false;
1:caf6b95:         }
1:caf6b95: 
1:caf6b95:         // Old version matches exactly. That is, not less than.
1:caf6b95:         return false;
1:caf6b95:     } 
1:caf6b95: 
1:df731e9:     /**
1:df731e9:      * Return true if and only if the old version is equal to the
1:df731e9:      *  passed major, minor, fixpack and point version
1:df731e9:      * specified version.
1:df731e9:      */
1:df731e9:     boolean oldIs(int requiredMajor, int requiredMinor, 
1:df731e9:     		int requiredFixpack, int requiredPoint) {
1:df731e9:         return (getOldMajor() == requiredMajor)
1:df731e9:         && (getOldMinor() == requiredMinor) 
1:df731e9:         && (getOldFixPack() == requiredFixpack)
1:df731e9:         && (getOldPoint() == requiredPoint);
1:10e07a5:     }
1:10e07a5: 
1:cdda215:     /**
1:cdda215:      * Return true if the old version is equal
1:cdda215:      *  the passed in major and minor version.
1:cdda215:      */
1:cdda215:     boolean oldIs(int requiredMajor, int requiredMinor) 
1:cdda215:     {
1:cdda215:         return (getOldMajor() == requiredMajor)
1:cdda215:           && (getOldMinor() == requiredMinor);
1:35067bf:      }
1:35067bf:     
1:35067bf:     /**
1:35067bf:      * Pretty-print the phase.
1:35067bf:      */
1:35067bf:     String  getPhaseString()
1:35067bf:     {
1:35067bf:         return PHASES[ getPhase() ];
1:35067bf:     }
1:35067bf: 
1:35067bf:     /**
1:35067bf:      * Pretty-print the original version number.
1:35067bf:      */
1:35067bf:     String  getOldVersionString()
1:35067bf:     {
1:35067bf:         return "( " + getOldMajor() + ", " + getOldMinor() + ", " + getOldFixPack() + ", " + getOldPoint() + " )";
1:35067bf:     }
1:cdda215: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
1:     static final ThreadLocal<Integer> phase = new ThreadLocal<Integer>();
1:     static final ThreadLocal<int[]> oldVersion = new ThreadLocal<int[]>();
/////////////////////////////////////////////////////////////////////////
1:         return phase.get();
commit:caf6b95
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return true if and only if the old version is less than the
1:      * specified version.
1:      */
1:     boolean oldLessThan(int major, int minor, int fixpack, int point) {
1:         int[] old = (int[]) oldVersion.get();
1:         int[] version = new int[]{major, minor, fixpack, point};
1: 
1:         for (int i = 0; i < old.length; i++) {
1:             if (old[i] < version[i]) return true;
1:             if (old[i] > version[i]) return false;
1:         }
1: 
1:         // Old version matches exactly. That is, not less than.
1:         return false;
1:     }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6be56bc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.DerbyVersion;
/////////////////////////////////////////////////////////////////////////
1:      * Returns a {@code DerbyVersion} object describing the old version.
1:      *
1:      * @return A version object.
1:      */
1:     final DerbyVersion getOldVersion() {
1:         return new DerbyVersion(
1:                 getOldMajor(), getOldMinor(), getOldFixPack(), getOldPoint());
1:     }
1: 
1:     /**
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:35067bf
/////////////////////////////////////////////////////////////////////////
1:      }
1:     
1:     /**
1:      * Pretty-print the phase.
1:      */
1:     String  getPhaseString()
1:     {
1:         return PHASES[ getPhase() ];
1:     }
1: 
1:     /**
1:      * Pretty-print the original version number.
1:      */
1:     String  getOldVersionString()
1:     {
1:         return "( " + getOldMajor() + ", " + getOldMinor() + ", " + getOldFixPack() + ", " + getOldPoint() + " )";
1:     }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:df731e9
/////////////////////////////////////////////////////////////////////////
1:      * Get the fixpack number of the old version being upgraded
1:      * from.
1:      */    
1:     final int getOldFixPack() {
1:         return ((int[]) oldVersion.get())[2];
1:     }
1:     
1:     /**
1:      * Get the point number of the old version being upgraded
1:      * from.
1:      */    
1:     final int getOldPoint() {
1:         return ((int[]) oldVersion.get())[3];
1:     }
1:     
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     } 
1: 
1:     /**
1:      * Return true if and only if the old version is equal to the
1:      *  passed major, minor, fixpack and point version
1:      * specified version.
1:      */
1:     boolean oldIs(int requiredMajor, int requiredMinor, 
1:     		int requiredFixpack, int requiredPoint) {
1:         return (getOldMajor() == requiredMajor)
1:         && (getOldMinor() == requiredMinor) 
1:         && (getOldFixPack() == requiredFixpack)
1:         && (getOldPoint() == requiredPoint);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:42aa1d6
/////////////////////////////////////////////////////////////////////////
1:      * Boot the database with old release after hard upgrade.
1:      * Expected to fail to connect, so no tests need to have
1:      * cases for this condition.
commit:daf5fa3
/////////////////////////////////////////////////////////////////////////
1:      * SWL state thrown when a feature requires upgrade
1:      * to a newer version and thus cannot be run in soft
1:      * upgrade mode.
1:      */
1:     static final String SQLSTATE_NEED_UPGRADE = "XCL47";
1:     
1:     /**
commit:cdda215
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Return true if the old version is equal
1:      *  the passed in major and minor version.
1:      */
1:     boolean oldIs(int requiredMajor, int requiredMinor) 
1:     {
1:         return (getOldMajor() == requiredMajor)
1:           && (getOldMinor() == requiredMinor);
1:      } 
commit:10e07a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeChange
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: 
1: /**
1:  * Abstract class to provide support for test fixtures for
1:  * upgrade change testing.
1:  *
1:  */
1: abstract class UpgradeChange extends BaseJDBCTestCase {
1:       
1:     /**
1:      * Thread local for the phase of the test set.
1:      * Contains an Integer object.
1:      */
0:     static ThreadLocal phase = new ThreadLocal();
1:     
1:     /**
1:      * Thread local for the old version of the engine.
1:      * Contains a int array with four entries corresponding
1:      * to the four part Derby number.
1:      */
0:     static ThreadLocal oldVersion = new ThreadLocal();
1:     
1:     /**
1:      * Phases in upgrade test
1:      */
1:     static final String[] PHASES =
1:     {"CREATE", "SOFT UPGRADE", "POST SOFT UPGRADE", "UPGRADE", "POST UPGRADE"};
1:     
1:     
1:     /**
1:      * Create a database with old version
1:      */
1:     static final int PH_CREATE = 0;
1:     /**
1:      * Perform soft upgrade with new version
1:      */
1:     static final int PH_SOFT_UPGRADE = 1;
1:     /**
1:      * Boot the database with old release after soft upgrade
1:      */
1:     static final int PH_POST_SOFT_UPGRADE = 2;
1:     /**
1:      * Perform hard upgrade with new version
1:      */
1:     
1:     static final int PH_HARD_UPGRADE = 3;
1:     /**
0:      * Boot the database with old release after hard upgrade
1:      */
1:     static final int PH_POST_HARD_UPGRADE = 4;
1:     
1:     public UpgradeChange(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Get the phase of the upgrade sequence we are running.
1:      * One of PH_CREATE, PH_SOFT_UPGRADE, PH_POST_SOFT_UPGRADE,
1:      * PH_HARD_UPGRADE, PH_POST_HARD_UPGRADE.
1:      */
1:     final int getPhase()
1:     {
0:         return ((Integer) phase.get()).intValue();
1:     }
1:     
1:     /**
1:      * Get the major number of the old version being upgraded
1:      * from.
1:      */
1:     final int getOldMajor() {
1:         return ((int[]) oldVersion.get())[0];
1:     }
1:     
1:     /**
1:      * Get the minor number of the old version being upgraded
1:      * from.
1:      */    
1:     final int getOldMinor() {
1:         return ((int[]) oldVersion.get())[1];
1:     }
1:     
1:     /**
1:      * Return true if the old version is equal to or more
1:      * recent that the passed in major and minor version.
1:      */
1:     boolean oldAtLeast(int requiredMajor, int requiredMinor) 
1:     {
1:         if (getOldMajor() > requiredMajor)
1:             return true;
1:         if ((getOldMajor() == requiredMajor)
1:             && (getOldMinor() >= requiredMinor))
1:             return true;
1:         return false;
1:     } 
1: }
============================================================================