1:88e75e5: /*
1:88e75e5: 
1:88e75e5:    Derby - Class org.apache.derbyTesting.functionsTests.tests.memorydb.MemoryDbManager
1:88e75e5: 
1:88e75e5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88e75e5:    contributor license agreements.  See the NOTICE file distributed with
1:88e75e5:    this work for additional information regarding copyright ownership.
1:88e75e5:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88e75e5:    (the "License"); you may not use this file except in compliance with
1:88e75e5:    the License.  You may obtain a copy of the License at
1:88e75e5: 
1:88e75e5:       http://www.apache.org/licenses/LICENSE-2.0
1:88e75e5: 
1:88e75e5:    Unless required by applicable law or agreed to in writing, software
1:88e75e5:    distributed under the License is distributed on an "AS IS" BASIS,
1:88e75e5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88e75e5:    See the License for the specific language governing permissions and
1:88e75e5:    limitations under the License.
1:88e75e5: 
1:88e75e5:  */
1:88e75e5: package org.apache.derbyTesting.functionTests.tests.memorydb;
1:88e75e5: 
1:88e75e5: import java.sql.Connection;
1:88e75e5: import java.sql.DriverManager;
1:88e75e5: import java.sql.PreparedStatement;
1:88e75e5: import java.sql.SQLException;
1:88e75e5: import java.sql.SQLWarning;
1:88e75e5: import java.sql.Statement;
1:88e75e5: import java.util.ArrayList;
1:88e75e5: 
1:88e75e5: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:88e75e5: 
1:88e75e5: /**
1:88e75e5:  * Collection of convenience methods for dealing with in-memory databases.
1:88e75e5:  * The class will keep track of databases, connections and statements
1:88e75e5:  * created through its methods, and will delete / close these when the
1:88e75e5:  * clean up method is invoked. This is very much the same as what
1:88e75e5:  * {@code BaseJDBCTestCase} does, with the exception of deleting the
1:88e75e5:  * databases.
1:88e75e5:  * <p>
1:88e75e5:  * Note: It may be possible to integrate this functionality into the existing
1:88e75e5:  * JUnit framework, for instance if you want to run the entire test suite with
1:88e75e5:  * the in-memory back end.
1:88e75e5:  */
1:88e75e5: public class MemoryDbManager {
1:88e75e5: 
1:88e75e5:     private static final String ATTR_CREATE = ";create=true";
1:88e75e5: 
1:88e75e5:     /** JDBC protocl prefix used for in-memory databases. */
1:88e75e5:     private static final String JDBC_PREFIX = "jdbc:derby:memory:";
1:88e75e5:     /** Shared manager instance. */
1:88e75e5:     private static final MemoryDbManager DBM = new MemoryDbManager();
1:88e75e5: 
1:88e75e5:     /**
1:88e75e5:      * Returns a shared manager instance.
1:88e75e5:      *
1:88e75e5:      * @return The shared manager instance.
1:88e75e5:      */
1:88e75e5:     public static MemoryDbManager getSharedInstance() {
1:88e75e5:         return DBM;
2:88e75e5:     }
1:88e75e5: 
1:88e75e5:     /** List of openend statements, closed at clean up. */
1:eec86ed:     private final ArrayList<Statement> STATEMENTS = new ArrayList<Statement>();
1:88e75e5:     /** List of openend connections, closed at clean up. */
1:eec86ed:     private final ArrayList<Connection> CONNECTIONS = new ArrayList<Connection>();
1:88e75e5:     /** List of created databases, deleted at clean up. */
1:eec86ed:     private final ArrayList<String> DATABASES = new ArrayList<String>();
1:88e75e5: 
1:88e75e5:     public MemoryDbManager() { }
1:88e75e5: 
1:88e75e5:     /**
1:88e75e5:      * Creates a new connection to the specified database (url).
1:88e75e5:      * <p>
1:88e75e5:      * Note that the specified URL will be appended to a fixed JDBC protcol
1:88e75e5:      * prefix.
1:88e75e5:      *
1:88e75e5:      * @param dbNameAndAttributes database name and any JDBC url attributes
1:88e75e5:      * @return A connection to the specified database.
1:88e75e5:      * @throws SQLException if connecting to the database fails
1:88e75e5:      */
1:88e75e5:     public Connection getConnection(String dbNameAndAttributes)
1:88e75e5:             throws SQLException {
1:88e75e5:         final String url = JDBC_PREFIX + dbNameAndAttributes;
1:88e75e5:         try {
1:88e75e5:             DriverManager.getDriver(url);
1:88e75e5:         } catch (SQLException sqle) {
1:88e75e5:             // Rely on logic in the default method for obtaining a
1:88e75e5:             // connection to load the driver.
1:88e75e5:             new BaseJDBCTestCase("dummy") {}.getConnection();
1:88e75e5:         }
1:88e75e5:         Connection con = DriverManager.getConnection(url);
1:88e75e5:         if (!CONNECTIONS.contains(con)) {
1:88e75e5:             CONNECTIONS.add(con);
1:88e75e5:         }
1:88e75e5:         return con;
1:88e75e5:     }
1:88e75e5: 
1:88e75e5:     /**
1:88e75e5:      * Creates a new statement from the given connection and keeps track of
1:88e75e5:      * it and closes it when the clean up is invoked.
1:88e75e5:      *
1:88e75e5:      * @param con the connection to use for creation
1:88e75e5:      * @return A new statement.
1:88e75e5:      * @throws SQLException if creating the statement fails
1:88e75e5:      * @see #cleanUp()
1:88e75e5:      */
1:88e75e5:     public Statement createStatement(Connection con)
1:88e75e5:             throws SQLException {
1:88e75e5:         Statement stmt = con.createStatement();
1:88e75e5:         STATEMENTS.add(stmt);
1:88e75e5:         if (!CONNECTIONS.contains(con)) {
1:88e75e5:             CONNECTIONS.add(con);
1:88e75e5:         }
1:88e75e5:         return stmt;
1:88e75e5:     }
1:88e75e5: 
1:88e75e5:     /**
1:88e75e5:      * Creates a new prepared statement from the given connection and keeps
1:88e75e5:      * track of it and closes it when the clean up is invoked.
1:88e75e5:      *
1:88e75e5:      * @param con the connection to use for creation
1:88e75e5:      * @param sql the sql text to prepare
1:88e75e5:      * @return A new prepared statement.
1:88e75e5:      * @throws SQLException if creating the statement fails
1:88e75e5:      * @see #cleanUp()
1:88e75e5:      */
1:88e75e5:     public PreparedStatement prepareStatement(Connection con, String sql)
1:88e75e5:             throws SQLException {
1:88e75e5:         PreparedStatement pStmt = con.prepareStatement(sql);
1:88e75e5:         STATEMENTS.add(pStmt);
1:88e75e5:         if (!CONNECTIONS.contains(con)) {
1:88e75e5:             CONNECTIONS.add(con);
1:88e75e5:         }
1:88e75e5:         return pStmt;
1:88e75e5:     }
1:88e75e5: 
1:88e75e5:     /**
1:88e75e5:      * Drops the specified database.
1:88e75e5:      * <p>
1:88e75e5:      * Note that the specified URL will be appended to a fixed JDBC protcol
1:88e75e5:      * prefix.
1:88e75e5:      *
1:88e75e5:      * @param dbNameAndAttributes the database name and any attributes
1:88e75e5:      *      required to access the database (<em>excluding</em> the delete
1:88e75e5:      *      attribute, which is added by this method)
1:88e75e5:      * @throws SQLException if deleting the database fails
1:88e75e5:      */
1:88e75e5:     public void dropDatabase(String dbNameAndAttributes)
1:88e75e5:             throws SQLException {
1:88e75e5:         String url = JDBC_PREFIX + dbNameAndAttributes + ";drop=true";
1:88e75e5:         try {
1:88e75e5:             DriverManager.getConnection(url);
1:88e75e5:             BaseJDBCTestCase.fail("Dropping database should raise exception.");
1:88e75e5:         } catch (SQLException sqle) {
1:88e75e5:             if (sqle.getSQLState().equals("08006")) {
1:88e75e5:                 // Database was deleted.
1:88e75e5:             } else if (sqle.getSQLState().equals("XJ004")) {
1:88e75e5:                 // Database didn't exist. Already dropped?
1:88e75e5:             } else {
1:88e75e5:                 BaseJDBCTestCase.assertSQLState("Dropping database failed: (" +
1:88e75e5:                         sqle.getSQLState() + ") "+ sqle.getMessage(),
1:88e75e5:                         "08006", sqle);
1:88e75e5:             }
1:88e75e5:         }
1:88e75e5:     }
1:88e75e5: 
1:88e75e5:     /**
1:88e75e5:      * Creates a new database and keeps track of it to delete it when the
1:88e75e5:      * clean up is invoked.
1:88e75e5:      * <p>
1:88e75e5:      * If the database already exists, a connection to the existing
1:88e75e5:      * database is returned.
1:88e75e5:      *
1:88e75e5:      * @param dbName the database name
1:88e75e5:      * @return A connection to the database.
1:88e75e5:      * @throws SQLException if creating or connecting to the database fails
1:88e75e5:      */
1:88e75e5:     public Connection createDatabase(String dbName)
1:88e75e5:             throws SQLException {
1:88e75e5:         return createDatabase(dbName, null, null, null);
1:88e75e5:     }
1:88e75e5: 
1:88e75e5:     /**
1:88e75e5:      * Creates a new database and keeps track of it to delete it when the
1:88e75e5:      * clean up is invoked.
1:88e75e5:      * <p>
1:88e75e5:      * If the database already exists, a connection to the existing
1:88e75e5:      * database is returned.
1:88e75e5:      *
1:88e75e5:      * @param dbName the database name
1:88e75e5:      * @param dbAttributes database attributes (i.e. encryption)
1:88e75e5:      * @param user user name
1:88e75e5:      * @param password user password
1:88e75e5:      * @return A connection to the database.
1:88e75e5:      * @throws SQLException if creating or connecting to the database fails
1:88e75e5:      */
1:88e75e5:     public Connection createDatabase(String dbName, String dbAttributes,
1:88e75e5:                                      String user, String password)
1:88e75e5:             throws SQLException {
1:88e75e5:         String userAttr = "";
1:88e75e5:         if (user != null) {
1:88e75e5:             userAttr = ";user=" + user;
1:88e75e5:         }
1:88e75e5:         if (password != null) {
1:88e75e5:             userAttr += ";password=" + password;
1:88e75e5:         }
1:88e75e5:         String url = dbName;
1:88e75e5:         if (dbAttributes != null) {
1:88e75e5:             url += ";" + dbAttributes;
1:88e75e5:         }
1:88e75e5:         if (!userAttr.equals("")) {
1:88e75e5:             url += userAttr;
1:88e75e5:         }
1:88e75e5:         if (url.indexOf(ATTR_CREATE) == -1) {
1:88e75e5:             url += ATTR_CREATE;
1:88e75e5:         }
1:88e75e5:         Connection con = getConnection(url);
1:88e75e5:         if (con.getWarnings() != null) {
1:88e75e5:             // See if there are more than one warning.
1:88e75e5:             SQLWarning w = con.getWarnings();
1:88e75e5:             String warnings = w.getMessage();
1:88e75e5:             while ((w = w.getNextWarning()) != null) {
1:88e75e5:                 warnings += " || " + w.getMessage();
1:88e75e5:             }
1:88e75e5:             BaseJDBCTestCase.fail(
1:88e75e5:                     "Warning(s) when creating database: " + warnings);
1:88e75e5:         }
1:88e75e5:         // Keep track of the database we just created, so that we can
1:88e75e5:         // delete it.
1:88e75e5:         DATABASES.add(dbName + userAttr);
1:88e75e5:         return con;
1:88e75e5: 
1:88e75e5:     }
1:88e75e5: 
1:88e75e5:     /**
1:88e75e5:      * Cleans up database resources by closing known statements and
1:88e75e5:      * connection, and deleting known in-memory databases.
1:88e75e5:      * @throws SQLException
1:88e75e5:      */
1:88e75e5:     public void cleanUp()
1:88e75e5:             throws SQLException {
1:88e75e5:         // Close all known statements.
1:88e75e5:         for (int i=STATEMENTS.size() -1; i >= 0; i--) {
1:eec86ed:             Statement stmt = STATEMENTS.remove(i);
1:88e75e5:             stmt.close();
1:88e75e5:         }
1:88e75e5:         // Close all known connections.
1:88e75e5:         for (int i=CONNECTIONS.size() -1; i >= 0; i--) {
1:eec86ed:             Connection con = CONNECTIONS.remove(i);
1:88e75e5:             try {
1:88e75e5:                 con.rollback();
1:88e75e5:             } catch (SQLException sqle) {
1:88e75e5:                 // Ignore this exception.
1:88e75e5:             }
1:88e75e5:             con.close();
1:88e75e5:         }
1:88e75e5:         // Delete all known databases.
1:88e75e5:         for (int i=DATABASES.size() -1; i >= 0; i--) {
1:eec86ed:             dropDatabase(DATABASES.remove(i));
1:88e75e5:         }
1:88e75e5:     }
1:88e75e5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
1:     private final ArrayList<Statement> STATEMENTS = new ArrayList<Statement>();
1:     private final ArrayList<Connection> CONNECTIONS = new ArrayList<Connection>();
1:     private final ArrayList<String> DATABASES = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
1:             Statement stmt = STATEMENTS.remove(i);
1:             Connection con = CONNECTIONS.remove(i);
/////////////////////////////////////////////////////////////////////////
1:             dropDatabase(DATABASES.remove(i));
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:c406220
/////////////////////////////////////////////////////////////////////////
commit:88e75e5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionsTests.tests.memorydb.MemoryDbManager
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.memorydb;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.SQLWarning;
1: import java.sql.Statement;
1: import java.util.ArrayList;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: 
1: /**
1:  * Collection of convenience methods for dealing with in-memory databases.
1:  * The class will keep track of databases, connections and statements
1:  * created through its methods, and will delete / close these when the
1:  * clean up method is invoked. This is very much the same as what
1:  * {@code BaseJDBCTestCase} does, with the exception of deleting the
1:  * databases.
1:  * <p>
1:  * Note: It may be possible to integrate this functionality into the existing
1:  * JUnit framework, for instance if you want to run the entire test suite with
1:  * the in-memory back end.
1:  */
1: public class MemoryDbManager {
1: 
1:     private static final String ATTR_CREATE = ";create=true";
1: 
1:     /** JDBC protocl prefix used for in-memory databases. */
1:     private static final String JDBC_PREFIX = "jdbc:derby:memory:";
1:     /** Shared manager instance. */
1:     private static final MemoryDbManager DBM = new MemoryDbManager();
1: 
1:     /**
1:      * Returns a shared manager instance.
1:      *
1:      * @return The shared manager instance.
1:      */
1:     public static MemoryDbManager getSharedInstance() {
1:         return DBM;
1:     }
1: 
1:     /** List of openend statements, closed at clean up. */
0:     private final ArrayList STATEMENTS = new ArrayList();
1:     /** List of openend connections, closed at clean up. */
0:     private final ArrayList CONNECTIONS = new ArrayList();
1:     /** List of created databases, deleted at clean up. */
0:     private final ArrayList DATABASES = new ArrayList();
1: 
1:     public MemoryDbManager() { }
1: 
1:     /**
1:      * Creates a new connection to the specified database (url).
1:      * <p>
1:      * Note that the specified URL will be appended to a fixed JDBC protcol
1:      * prefix.
1:      *
1:      * @param dbNameAndAttributes database name and any JDBC url attributes
1:      * @return A connection to the specified database.
1:      * @throws SQLException if connecting to the database fails
1:      */
1:     public Connection getConnection(String dbNameAndAttributes)
1:             throws SQLException {
1:         final String url = JDBC_PREFIX + dbNameAndAttributes;
1:         try {
1:             DriverManager.getDriver(url);
1:         } catch (SQLException sqle) {
1:             // Rely on logic in the default method for obtaining a
1:             // connection to load the driver.
1:             new BaseJDBCTestCase("dummy") {}.getConnection();
1:         }
1:         Connection con = DriverManager.getConnection(url);
1:         if (!CONNECTIONS.contains(con)) {
1:             CONNECTIONS.add(con);
1:         }
1:         return con;
1:     }
1: 
1:     /**
1:      * Creates a new statement from the given connection and keeps track of
1:      * it and closes it when the clean up is invoked.
1:      *
1:      * @param con the connection to use for creation
1:      * @return A new statement.
1:      * @throws SQLException if creating the statement fails
1:      * @see #cleanUp()
1:      */
1:     public Statement createStatement(Connection con)
1:             throws SQLException {
1:         Statement stmt = con.createStatement();
1:         STATEMENTS.add(stmt);
1:         if (!CONNECTIONS.contains(con)) {
1:             CONNECTIONS.add(con);
1:         }
1:         return stmt;
1:     }
1: 
1:     /**
1:      * Creates a new prepared statement from the given connection and keeps
1:      * track of it and closes it when the clean up is invoked.
1:      *
1:      * @param con the connection to use for creation
1:      * @param sql the sql text to prepare
1:      * @return A new prepared statement.
1:      * @throws SQLException if creating the statement fails
1:      * @see #cleanUp()
1:      */
1:     public PreparedStatement prepareStatement(Connection con, String sql)
1:             throws SQLException {
1:         PreparedStatement pStmt = con.prepareStatement(sql);
1:         STATEMENTS.add(pStmt);
1:         if (!CONNECTIONS.contains(con)) {
1:             CONNECTIONS.add(con);
1:         }
1:         return pStmt;
1:     }
1: 
1:     /**
1:      * Drops the specified database.
1:      * <p>
1:      * Note that the specified URL will be appended to a fixed JDBC protcol
1:      * prefix.
1:      *
1:      * @param dbNameAndAttributes the database name and any attributes
1:      *      required to access the database (<em>excluding</em> the delete
1:      *      attribute, which is added by this method)
1:      * @throws SQLException if deleting the database fails
1:      */
1:     public void dropDatabase(String dbNameAndAttributes)
1:             throws SQLException {
0:         // DISABLED because the feature isn't implemented yet (see DERBY-4428)
0:         if (true) {
0:             return;
1:         }
1:         String url = JDBC_PREFIX + dbNameAndAttributes + ";drop=true";
1:         try {
1:             DriverManager.getConnection(url);
1:             BaseJDBCTestCase.fail("Dropping database should raise exception.");
1:         } catch (SQLException sqle) {
1:             if (sqle.getSQLState().equals("08006")) {
1:                 // Database was deleted.
1:             } else if (sqle.getSQLState().equals("XJ004")) {
1:                 // Database didn't exist. Already dropped?
1:             } else {
1:                 BaseJDBCTestCase.assertSQLState("Dropping database failed: (" +
1:                         sqle.getSQLState() + ") "+ sqle.getMessage(),
1:                         "08006", sqle);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Creates a new database and keeps track of it to delete it when the
1:      * clean up is invoked.
1:      * <p>
1:      * If the database already exists, a connection to the existing
1:      * database is returned.
1:      *
1:      * @param dbName the database name
1:      * @return A connection to the database.
1:      * @throws SQLException if creating or connecting to the database fails
1:      */
1:     public Connection createDatabase(String dbName)
1:             throws SQLException {
1:         return createDatabase(dbName, null, null, null);
1:     }
1: 
1:     /**
1:      * Creates a new database and keeps track of it to delete it when the
1:      * clean up is invoked.
1:      * <p>
1:      * If the database already exists, a connection to the existing
1:      * database is returned.
1:      *
1:      * @param dbName the database name
1:      * @param dbAttributes database attributes (i.e. encryption)
1:      * @param user user name
1:      * @param password user password
1:      * @return A connection to the database.
1:      * @throws SQLException if creating or connecting to the database fails
1:      */
1:     public Connection createDatabase(String dbName, String dbAttributes,
1:                                      String user, String password)
1:             throws SQLException {
1:         String userAttr = "";
1:         if (user != null) {
1:             userAttr = ";user=" + user;
1:         }
1:         if (password != null) {
1:             userAttr += ";password=" + password;
1:         }
1:         String url = dbName;
1:         if (dbAttributes != null) {
1:             url += ";" + dbAttributes;
1:         }
1:         if (!userAttr.equals("")) {
1:             url += userAttr;
1:         }
1:         if (url.indexOf(ATTR_CREATE) == -1) {
1:             url += ATTR_CREATE;
1:         }
1:         Connection con = getConnection(url);
1:         if (con.getWarnings() != null) {
1:             // See if there are more than one warning.
1:             SQLWarning w = con.getWarnings();
1:             String warnings = w.getMessage();
1:             while ((w = w.getNextWarning()) != null) {
1:                 warnings += " || " + w.getMessage();
1:             }
1:             BaseJDBCTestCase.fail(
1:                     "Warning(s) when creating database: " + warnings);
1:         }
1:         // Keep track of the database we just created, so that we can
1:         // delete it.
1:         DATABASES.add(dbName + userAttr);
1:         return con;
1: 
1:     }
1: 
1:     /**
1:      * Cleans up database resources by closing known statements and
1:      * connection, and deleting known in-memory databases.
1:      * @throws SQLException
1:      */
1:     public void cleanUp()
1:             throws SQLException {
1:         // Close all known statements.
1:         for (int i=STATEMENTS.size() -1; i >= 0; i--) {
0:             Statement stmt = (Statement)STATEMENTS.remove(i);
1:             stmt.close();
1:         }
1:         // Close all known connections.
1:         for (int i=CONNECTIONS.size() -1; i >= 0; i--) {
0:             Connection con = (Connection)CONNECTIONS.remove(i);
1:             try {
1:                 con.rollback();
1:             } catch (SQLException sqle) {
1:                 // Ignore this exception.
1:             }
1:             con.close();
1:         }
1:         // Delete all known databases.
1:         for (int i=DATABASES.size() -1; i >= 0; i--) {
0:             dropDatabase((String)DATABASES.remove(i));
1:         }
1:     }
1: }
============================================================================