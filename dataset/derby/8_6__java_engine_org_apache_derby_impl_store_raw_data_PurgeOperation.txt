1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.PurgeOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	USE WITH EXTREME Caution: Purge records from a Page.
1:eac0369: 
1:eac0369: 	Represents purging of a range of rows from the page.
1:eac0369: 
1:eac0369: 	<PRE>
1:787ceb4: 	@derby.formatId	LOGOP_PURGE
1:eac0369: 		the formatId is written by FormatIdOutputStream when this object is
1:eac0369: 		written out by writeObject
1:787ceb4: 	@derby.purpose	purge num_rows from the page
1:787ceb4: 	@derby.upgrade
1:787ceb4: 	@derby.diskLayout
1:eac0369: 		PagePhysicalOperation	the super class
1:eac0369: 		slot(CompressedInt)	the slot to start purging
1:eac0369: 		num_rows(CompressedInt)	number of rows rows to purge
1:eac0369: 		recordIds(CompressedInt[num_rows]) the recordIds of the purged rows
1:eac0369: 
1:eac0369: 		OptionalData	the before images of the rows that were purged
1:787ceb4: 	@derby.endFormat
1:eac0369: 	</PRE>
1:eac0369: 
1:eac0369:    @see Page#purgeAtSlot
1:eac0369: */
1:eac0369: public final class PurgeOperation extends PhysicalPageOperation {
1:eac0369: 
1:eac0369: 	protected int	slot;	// purge num_rows records starting at this slot
1:eac0369: 							// caller must guarentee that during undo of the
1:eac0369: 							// log record, this slot is the correct slot to
1:eac0369: 							// re-insert the purged record 
1:eac0369: 	protected int 	num_rows;
1:eac0369: 	protected int[]	recordIds;	// record Id
1:eac0369: 
1:eac0369: 
1:eac0369: 	transient protected ByteArray preparedLog;
1:eac0369: 
1:3546404:     PurgeOperation(RawTransaction t, BasePage page, int slot, int
1:eac0369: 						  num_rows, int[] recordIds, boolean needDataLogged)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		super(page);
1:eac0369: 
1:eac0369: 		this.slot = slot;
1:eac0369: 		this.num_rows = num_rows;
1:eac0369: 		this.recordIds = recordIds;
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			writeOptionalDataToBuffer(t, needDataLogged);
1:eac0369: 		} catch (IOException ioe) {
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1:eac0369: 		}
1:eac0369: 	
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public PurgeOperation() { super(); }
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 
1:eac0369: 		CompressedNumber.writeInt(out, slot);
1:eac0369: 		CompressedNumber.writeInt(out, num_rows);
1:eac0369: 
1:eac0369: 		for (int i = 0; i < num_rows; i++)
1:eac0369: 			CompressedNumber.writeInt(out, recordIds[i]);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read this in
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 		@exception ClassNotFoundException log stream corrupted
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		slot = CompressedNumber.readInt(in);
1:eac0369: 		num_rows = CompressedNumber.readInt(in);
1:eac0369: 
1:eac0369: 		recordIds = new int[num_rows];
1:eac0369: 		for (int i = 0; i < num_rows; i++)
1:eac0369: 			recordIds[i] = CompressedNumber.readInt(in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_PURGE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Loggable methods
1:eac0369: 	 */
1:eac0369: 	/**
1:eac0369: 		Apply the purge operation to the page.
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:94f158a: 		@exception StandardException Standard Derby policy.		
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1:eac0369: 	*/
1:eac0369: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) 
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		// purge the records in the stored version
1:eac0369: 		// we need to remove from high to low because the slots will be moved down
1:eac0369: 		// as soon as one is removed.
1:eac0369: 
1:eac0369: 		// we could get the slot with the recordId but that will be a waste
1:eac0369: 		// since the page was never unlatch and the slot number is good
1:eac0369: 
1:eac0369: 		for (int i = num_rows-1; i >= 0; i--)
1:eac0369: 		{
1:eac0369: 			this.page.purgeRecord(instant, slot+i, recordIds[i]);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * PhysicalPageOperation methods
1:eac0369: 	 */
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 		Undo the purge operation on the page.
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:94f158a: 		@exception StandardException Standard Derby policy.		
1:eac0369: 
1:eac0369: 		@see PhysicalPageOperation#undoMe
1:eac0369: 	*/
1:eac0369: 	public void undoMe(Transaction xact, BasePage undoPage,
1:eac0369: 					   LogInstant CLRInstant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		for (int i = 0; i < num_rows; i++)
1:eac0369: 		{
1:eac0369: 			undoPage.storeRecord(CLRInstant, slot+i, true, in);
1:eac0369: 		}
1:eac0369: 		undoPage.setAuxObject(null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * PageBasicOperation
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * restore the before image of the page
1:eac0369: 	 *
1:94f158a: 	 * @exception StandardException Standard Derby Error Policy
1:eac0369: 	 * @exception IOException problem reading the complete log record from the
1:eac0369: 	 * input stream
1:eac0369: 	 */
1:eac0369: 	public void restoreMe(Transaction xact, BasePage undoPage,
1:eac0369: 					   LogInstant CLRInstant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		undoMe(xact, undoPage, CLRInstant, in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 		methods to support prepared log
1:eac0369: 		
1:eac0369: 		the following two methods should not be called during recover
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public ByteArray getPreparedLog()
1:eac0369: 	{
1:eac0369: 		return (this.preparedLog);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Write out the purged record from the page.  Used for undo only.
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectOutput.
1:94f158a: 		@exception StandardException Standard Derby policy.		
1:eac0369: 	*/
1:eac0369: 	private void writeOptionalDataToBuffer(RawTransaction t, boolean needDataLogged)
1:eac0369: 		throws StandardException, IOException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(this.page != null);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		DynamicByteArrayOutputStream logBuffer = t.getLogBuffer();
1:eac0369: 		int optionalDataStart = logBuffer.getPosition();
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(optionalDataStart == 0,
1:eac0369: 				"Buffer for writing the optional data should start at position 0");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		for (int i = 0; i < num_rows; i++)
1:eac0369: 		{
1:eac0369: 			if(needDataLogged)
1:eac0369: 			{
1:eac0369: 				this.page.logRecord(i+slot, BasePage.LOG_RECORD_DEFAULT, 
1:eac0369: 									recordIds[i],  (FormatableBitSet) null, logBuffer,
1:eac0369: 									(RecordHandle)null);
1:eac0369: 			}else
1:eac0369: 			{
1:eac0369: 				this.page.logRecord(i+slot, BasePage.LOG_RECORD_FOR_PURGE, 
1:eac0369: 									recordIds[i],  (FormatableBitSet) null, logBuffer,
1:eac0369: 									(RecordHandle)null);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		int optionalDataLength = logBuffer.getPosition() - optionalDataStart;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			if (optionalDataLength != logBuffer.getUsed())
1:eac0369: 				SanityManager.THROWASSERT("wrong optional data length, optionalDataLength = "
1:eac0369: 					+ optionalDataLength + ", logBuffer.getUsed() = " + logBuffer.getUsed());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// set the position to the beginning of the buffer
1:eac0369: 		logBuffer.setPosition(optionalDataStart);
1:eac0369: 
1:eac0369: 		this.preparedLog = new ByteArray(logBuffer.getByteArray(), optionalDataStart,
1:eac0369: 			optionalDataLength);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  DEBUG: Print self.
1:eac0369: 	*/
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			String str = super.toString() + 
1:eac0369: 				"Purge : " + num_rows + " slots starting at " + slot;
1:eac0369: 
1:eac0369: 			for (int i = 0; i < num_rows; i++)
1:eac0369: 			{
1:eac0369: 				str += " (recordId=" + recordIds[i] + ")";
1:eac0369: 			}
1:eac0369: 			return str;
1:eac0369: 		}	
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     PurgeOperation(RawTransaction t, BasePage page, int slot, int
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1: 	@derby.formatId	LOGOP_PURGE
1: 	@derby.purpose	purge num_rows from the page
1: 	@derby.upgrade
1: 	@derby.diskLayout
1: 	@derby.endFormat
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.		
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.		
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby Error Policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.		
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.PurgeOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction; 
1: 
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.util.ByteArray;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: 
1: 
0: import java.io.OutputStream;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /**
1: 	USE WITH EXTREME Caution: Purge records from a Page.
1: 
1: 	Represents purging of a range of rows from the page.
1: 
1: 	<PRE>
0: 	@format_id	LOGOP_PURGE
1: 		the formatId is written by FormatIdOutputStream when this object is
1: 		written out by writeObject
0: 	@purpose	purge num_rows from the page
0: 	@upgrade
0: 	@disk_layout
1: 		PagePhysicalOperation	the super class
1: 		slot(CompressedInt)	the slot to start purging
1: 		num_rows(CompressedInt)	number of rows rows to purge
1: 		recordIds(CompressedInt[num_rows]) the recordIds of the purged rows
1: 
1: 		OptionalData	the before images of the rows that were purged
0: 	@end_format
1: 	</PRE>
1: 
1:    @see Page#purgeAtSlot
1: */
1: public final class PurgeOperation extends PhysicalPageOperation {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	protected int	slot;	// purge num_rows records starting at this slot
1: 							// caller must guarentee that during undo of the
1: 							// log record, this slot is the correct slot to
1: 							// re-insert the purged record 
1: 	protected int 	num_rows;
1: 	protected int[]	recordIds;	// record Id
1: 
1: 
1: 	transient protected ByteArray preparedLog;
1: 
0: 	public PurgeOperation(RawTransaction t, BasePage page, int slot, int
1: 						  num_rows, int[] recordIds, boolean needDataLogged)
1: 		throws StandardException
1: 	{
1: 		super(page);
1: 
1: 		this.slot = slot;
1: 		this.num_rows = num_rows;
1: 		this.recordIds = recordIds;
1: 
1: 		try {
1: 			writeOptionalDataToBuffer(t, needDataLogged);
1: 		} catch (IOException ioe) {
1: 			throw StandardException.newException(
1:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1: 		}
1: 	
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public PurgeOperation() { super(); }
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		super.writeExternal(out);
1: 
1: 		CompressedNumber.writeInt(out, slot);
1: 		CompressedNumber.writeInt(out, num_rows);
1: 
1: 		for (int i = 0; i < num_rows; i++)
1: 			CompressedNumber.writeInt(out, recordIds[i]);
1: 	}
1: 
1: 	/**
1: 		Read this in
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException log stream corrupted
1: 	*/
1: 	public void readExternal(ObjectInput in) 
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		slot = CompressedNumber.readInt(in);
1: 		num_rows = CompressedNumber.readInt(in);
1: 
1: 		recordIds = new int[num_rows];
1: 		for (int i = 0; i < num_rows; i++)
1: 			recordIds[i] = CompressedNumber.readInt(in);
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_PURGE;
1: 	}
1: 
1: 
1: 	/*
1: 	 * Loggable methods
1: 	 */
1: 	/**
1: 		Apply the purge operation to the page.
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
1: 
1: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1: 	*/
1: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) 
1: 		 throws StandardException, IOException 
1: 	{
1: 		// purge the records in the stored version
1: 		// we need to remove from high to low because the slots will be moved down
1: 		// as soon as one is removed.
1: 
1: 		// we could get the slot with the recordId but that will be a waste
1: 		// since the page was never unlatch and the slot number is good
1: 
1: 		for (int i = num_rows-1; i >= 0; i--)
1: 		{
1: 			this.page.purgeRecord(instant, slot+i, recordIds[i]);
1: 		}
1: 	}
1: 
1: 	/*
1: 	 * PhysicalPageOperation methods
1: 	 */
1: 	
1: 	/**
1: 		Undo the purge operation on the page.
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
1: 
1: 		@see PhysicalPageOperation#undoMe
1: 	*/
1: 	public void undoMe(Transaction xact, BasePage undoPage,
1: 					   LogInstant CLRInstant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		for (int i = 0; i < num_rows; i++)
1: 		{
1: 			undoPage.storeRecord(CLRInstant, slot+i, true, in);
1: 		}
1: 		undoPage.setAuxObject(null);
1: 	}
1: 
1: 
1: 	/*
1: 	 * PageBasicOperation
1: 	 */
1: 
1: 	/**
1: 	 * restore the before image of the page
1: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
1: 	 * @exception IOException problem reading the complete log record from the
1: 	 * input stream
1: 	 */
1: 	public void restoreMe(Transaction xact, BasePage undoPage,
1: 					   LogInstant CLRInstant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		undoMe(xact, undoPage, CLRInstant, in);
1: 	}
1: 
1: 	/*
1: 		methods to support prepared log
1: 		
1: 		the following two methods should not be called during recover
1: 	*/
1: 
1: 	public ByteArray getPreparedLog()
1: 	{
1: 		return (this.preparedLog);
1: 	}
1: 
1: 	/**
1: 		Write out the purged record from the page.  Used for undo only.
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectOutput.
0: 		@exception StandardException Standard Cloudscape policy.		
1: 	*/
1: 	private void writeOptionalDataToBuffer(RawTransaction t, boolean needDataLogged)
1: 		throws StandardException, IOException
1: 	{
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(this.page != null);
1: 		}
1: 
1: 		DynamicByteArrayOutputStream logBuffer = t.getLogBuffer();
1: 		int optionalDataStart = logBuffer.getPosition();
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(optionalDataStart == 0,
1: 				"Buffer for writing the optional data should start at position 0");
1: 		}
1: 
1: 		for (int i = 0; i < num_rows; i++)
1: 		{
1: 			if(needDataLogged)
1: 			{
1: 				this.page.logRecord(i+slot, BasePage.LOG_RECORD_DEFAULT, 
1: 									recordIds[i],  (FormatableBitSet) null, logBuffer,
1: 									(RecordHandle)null);
1: 			}else
1: 			{
1: 				this.page.logRecord(i+slot, BasePage.LOG_RECORD_FOR_PURGE, 
1: 									recordIds[i],  (FormatableBitSet) null, logBuffer,
1: 									(RecordHandle)null);
1: 			}
1: 		}
1: 		
1: 		int optionalDataLength = logBuffer.getPosition() - optionalDataStart;
1: 
1: 		if (SanityManager.DEBUG) {
1: 			if (optionalDataLength != logBuffer.getUsed())
1: 				SanityManager.THROWASSERT("wrong optional data length, optionalDataLength = "
1: 					+ optionalDataLength + ", logBuffer.getUsed() = " + logBuffer.getUsed());
1: 		}
1: 
1: 		// set the position to the beginning of the buffer
1: 		logBuffer.setPosition(optionalDataStart);
1: 
1: 		this.preparedLog = new ByteArray(logBuffer.getByteArray(), optionalDataStart,
1: 			optionalDataLength);
1: 	}
1: 
1: 	/**
1: 	  DEBUG: Print self.
1: 	*/
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			String str = super.toString() + 
1: 				"Purge : " + num_rows + " slots starting at " + slot;
1: 
1: 			for (int i = 0; i < num_rows; i++)
1: 			{
1: 				str += " (recordId=" + recordIds[i] + ")";
1: 			}
1: 			return str;
1: 		}	
1: 		else
1: 			return null;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction; 
0: 
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: 
0: 
0: import java.io.OutputStream;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /**
0: 	USE WITH EXTREME Caution: Purge records from a Page.
0: 
0: 	Represents purging of a range of rows from the page.
0: 
0: 	<PRE>
0: 	@format_id	LOGOP_PURGE
0: 		the formatId is written by FormatIdOutputStream when this object is
0: 		written out by writeObject
0: 	@purpose	purge num_rows from the page
0: 	@upgrade
0: 	@disk_layout
0: 		PagePhysicalOperation	the super class
0: 		slot(CompressedInt)	the slot to start purging
0: 		num_rows(CompressedInt)	number of rows rows to purge
0: 		recordIds(CompressedInt[num_rows]) the recordIds of the purged rows
0: 
0: 		OptionalData	the before images of the rows that were purged
0: 	@end_format
0: 	</PRE>
0: 
0:    @see Page#purgeAtSlot
0: */
0: public final class PurgeOperation extends PhysicalPageOperation {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	protected int	slot;	// purge num_rows records starting at this slot
0: 							// caller must guarentee that during undo of the
0: 							// log record, this slot is the correct slot to
0: 							// re-insert the purged record 
0: 	protected int 	num_rows;
0: 	protected int[]	recordIds;	// record Id
0: 
0: 
0: 	transient protected ByteArray preparedLog;
0: 
0: 	public PurgeOperation(RawTransaction t, BasePage page, int slot, int
0: 						  num_rows, int[] recordIds, boolean needDataLogged)
0: 		throws StandardException
0: 	{
0: 		super(page);
0: 
0: 		this.slot = slot;
0: 		this.num_rows = num_rows;
0: 		this.recordIds = recordIds;
0: 
0: 		try {
0: 			writeOptionalDataToBuffer(t, needDataLogged);
0: 		} catch (IOException ioe) {
0: 			throw StandardException.newException(
0:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
0: 		}
0: 	
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public PurgeOperation() { super(); }
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		super.writeExternal(out);
0: 
0: 		CompressedNumber.writeInt(out, slot);
0: 		CompressedNumber.writeInt(out, num_rows);
0: 
0: 		for (int i = 0; i < num_rows; i++)
0: 			CompressedNumber.writeInt(out, recordIds[i]);
0: 	}
0: 
0: 	/**
0: 		Read this in
0: 		@exception IOException error reading from log stream
0: 		@exception ClassNotFoundException log stream corrupted
0: 	*/
0: 	public void readExternal(ObjectInput in) 
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		slot = CompressedNumber.readInt(in);
0: 		num_rows = CompressedNumber.readInt(in);
0: 
0: 		recordIds = new int[num_rows];
0: 		for (int i = 0; i < num_rows; i++)
0: 			recordIds[i] = CompressedNumber.readInt(in);
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_PURGE;
0: 	}
0: 
0: 
0: 	/*
0: 	 * Loggable methods
0: 	 */
0: 	/**
0: 		Apply the purge operation to the page.
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
0: 
0: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
0: 	*/
0: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) 
0: 		 throws StandardException, IOException 
0: 	{
0: 		// purge the records in the stored version
0: 		// we need to remove from high to low because the slots will be moved down
0: 		// as soon as one is removed.
0: 
0: 		// we could get the slot with the recordId but that will be a waste
0: 		// since the page was never unlatch and the slot number is good
0: 
0: 		for (int i = num_rows-1; i >= 0; i--)
0: 		{
0: 			this.page.purgeRecord(instant, slot+i, recordIds[i]);
0: 		}
0: 	}
0: 
0: 	/*
0: 	 * PhysicalPageOperation methods
0: 	 */
0: 	
0: 	/**
0: 		Undo the purge operation on the page.
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
0: 
0: 		@see PhysicalPageOperation#undoMe
0: 	*/
0: 	public void undoMe(Transaction xact, BasePage undoPage,
0: 					   LogInstant CLRInstant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		for (int i = 0; i < num_rows; i++)
0: 		{
0: 			undoPage.storeRecord(CLRInstant, slot+i, true, in);
0: 		}
0: 		undoPage.setAuxObject(null);
0: 	}
0: 
0: 
0: 	/*
0: 	 * PageBasicOperation
0: 	 */
0: 
0: 	/**
0: 	 * restore the before image of the page
0: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
0: 	 * @exception IOException problem reading the complete log record from the
0: 	 * input stream
0: 	 */
0: 	public void restoreMe(Transaction xact, BasePage undoPage,
0: 					   LogInstant CLRInstant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		undoMe(xact, undoPage, CLRInstant, in);
0: 	}
0: 
0: 	/*
0: 		methods to support prepared log
0: 		
0: 		the following two methods should not be called during recover
0: 	*/
0: 
0: 	public ByteArray getPreparedLog()
0: 	{
0: 		return (this.preparedLog);
0: 	}
0: 
0: 	/**
0: 		Write out the purged record from the page.  Used for undo only.
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectOutput.
0: 		@exception StandardException Standard Cloudscape policy.		
0: 	*/
0: 	private void writeOptionalDataToBuffer(RawTransaction t, boolean needDataLogged)
0: 		throws StandardException, IOException
0: 	{
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(this.page != null);
0: 		}
0: 
0: 		DynamicByteArrayOutputStream logBuffer = t.getLogBuffer();
0: 		int optionalDataStart = logBuffer.getPosition();
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(optionalDataStart == 0,
0: 				"Buffer for writing the optional data should start at position 0");
0: 		}
0: 
0: 		for (int i = 0; i < num_rows; i++)
0: 		{
0: 			if(needDataLogged)
0: 			{
0: 				this.page.logRecord(i+slot, BasePage.LOG_RECORD_DEFAULT, 
0: 									recordIds[i],  (FormatableBitSet) null, logBuffer,
0: 									(RecordHandle)null);
0: 			}else
0: 			{
0: 				this.page.logRecord(i+slot, BasePage.LOG_RECORD_FOR_PURGE, 
0: 									recordIds[i],  (FormatableBitSet) null, logBuffer,
0: 									(RecordHandle)null);
0: 			}
0: 		}
0: 		
0: 		int optionalDataLength = logBuffer.getPosition() - optionalDataStart;
0: 
0: 		if (SanityManager.DEBUG) {
0: 			if (optionalDataLength != logBuffer.getUsed())
0: 				SanityManager.THROWASSERT("wrong optional data length, optionalDataLength = "
0: 					+ optionalDataLength + ", logBuffer.getUsed() = " + logBuffer.getUsed());
0: 		}
0: 
0: 		// set the position to the beginning of the buffer
0: 		logBuffer.setPosition(optionalDataStart);
0: 
0: 		this.preparedLog = new ByteArray(logBuffer.getByteArray(), optionalDataStart,
0: 			optionalDataLength);
0: 	}
0: 
0: 	/**
0: 	  DEBUG: Print self.
0: 	*/
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			String str = super.toString() + 
0: 				"Purge : " + num_rows + " slots starting at " + slot;
0: 
0: 			for (int i = 0; i < num_rows; i++)
0: 			{
0: 				str += " (recordId=" + recordIds[i] + ")";
0: 			}
0: 			return str;
0: 		}	
0: 		else
0: 			return null;
0: 	}
0: }
============================================================================