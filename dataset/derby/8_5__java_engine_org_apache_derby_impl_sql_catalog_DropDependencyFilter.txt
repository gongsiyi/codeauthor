1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.DropDependencyFilter
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
12:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:afe6225: import org.apache.derby.iapi.error.StandardException;
1:afe6225: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:afe6225: import org.apache.derby.iapi.sql.execute.ExecRow;
1:afe6225: import org.apache.derby.iapi.sql.execute.TupleFilter;
1:afe6225: import org.apache.derby.iapi.types.BooleanDataValue;
1:afe6225: import org.apache.derby.iapi.types.DataValueDescriptor;
1:afe6225: import org.apache.derby.iapi.types.DataValueFactory;
1:afe6225: import org.apache.derby.iapi.types.SQLBoolean;
1:eac0369: 
1:eac0369: 
3:eac0369: /**
1:eac0369: * A Filter to qualify tuples coming from a scan of SYSDEPENDS.
1:eac0369: * Tuples qualify if they have the right providerID.
2:eac0369: *
1:eac0369: */
1:eac0369: public class DropDependencyFilter implements TupleFilter
3:eac0369: {
1:eac0369: 	//////////////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTANTS
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	STATE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	UUID				providerID;
1:eac0369: 
1:eac0369: 	UUIDFactory			uuidFactory = null;
1:eac0369: 	DataValueFactory	dataValueFactory = null;
1:eac0369: 
1:eac0369: 	BooleanDataValue	trueValue;
1:eac0369: 	BooleanDataValue	falseValue;
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Construct a TupleFilter to qualify SYSDEPENDS rows with the
1:eac0369: 	  * designated providerID.
1:eac0369: 	  *
1:eac0369: 	  *	@param	providerID	UUID of provider. Tuples with this ID qualify.
1:eac0369: 	  */
1:eac0369: 	public	DropDependencyFilter( UUID providerID )
1:eac0369: 	{
1:eac0369: 		this.providerID = providerID;
3:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	TupleFilter BEHAVIOR
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Initialize a Filter with a vector of parameters. This is a NOP.
1:eac0369: 	  * We initialize this filter at Constructor time.
1:eac0369: 	  *
1:eac0369: 	  *	@param	parameters	An ExecRow of parameter values
1:eac0369: 	  *
1:eac0369: 	  * @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369:     public	void	init( ExecRow parameters )
1:eac0369: 		throws StandardException
1:eac0369: 	{}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Pump a SYSDEPENDS row through the Filter. If the providerID of the
1:eac0369: 	  * row matches our providerID, we return true. Otherwise we return false.
1:eac0369: 	  *
1:6b50965: 	  *	@param	currentRow		SYSDEPENDS row
1:eac0369: 	  *
1:eac0369: 	  *	@return	True if the row has our providerID. False otherwise.
1:eac0369: 	  *
1:eac0369: 	  * @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369:     public	BooleanDataValue	execute( ExecRow currentRow )
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		/* 3rd column is PROVIDERID (UUID - char(36)) */
1:eac0369: 		DataValueDescriptor	col = currentRow.getColumn(SYSDEPENDSRowFactory.SYSDEPENDS_PROVIDERID);
1:eac0369: 		String	providerIDstring = col.getString();
1:eac0369: 		UUID	providerUUID = getUUIDFactory().recreateUUID(providerIDstring);
1:eac0369: 
1:eac0369: 		if ( providerID.equals( providerUUID ) ) { return getTrueValue(); }
1:eac0369: 		else { return getFalseValue(); }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	MINIONS
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Get the UUID factory
1:eac0369: 	  *
1:eac0369: 	  *	@return	the UUID factory
1:eac0369: 	  *
1:eac0369: 	  * @exception   StandardException thrown on failure
1:eac0369: 	  */
1:eac0369: 	private	UUIDFactory	getUUIDFactory()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if ( uuidFactory == null )
1:eac0369: 		{
1:56c1dc2: 			uuidFactory = DataDictionaryImpl.getMonitor().getUUIDFactory();
1:eac0369: 		}
1:eac0369: 		return	uuidFactory;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Gets a BooleanDataValue representing TRUE.
1:eac0369: 	  *
1:eac0369: 	  *	@return	a TRUE value
1:eac0369: 	  * @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	private BooleanDataValue	getTrueValue()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if ( trueValue == null )
1:eac0369: 		{
1:4309044: 			trueValue = new SQLBoolean( true );
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return	trueValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Gets a BooleanDataValue representing FALSE
1:eac0369: 	  *
1:eac0369: 	  *	@return	a FALSE value
1:eac0369: 	  * @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	private BooleanDataValue	getFalseValue()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if ( falseValue == null )
1:eac0369: 		{
1:4309044: 			falseValue = new SQLBoolean( false );
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return	falseValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: 			uuidFactory = DataDictionaryImpl.getMonitor().getUUIDFactory();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:afe6225
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.TupleFilter;
1: import org.apache.derby.iapi.types.BooleanDataValue;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.SQLBoolean;
/////////////////////////////////////////////////////////////////////////
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:4309044
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.types.SQLBoolean;
/////////////////////////////////////////////////////////////////////////
1: 			trueValue = new SQLBoolean( true );
/////////////////////////////////////////////////////////////////////////
1: 			falseValue = new SQLBoolean( false );
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	  *	@param	currentRow		SYSDEPENDS row
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.DropDependencyFilter
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: 
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.types.DataValueFactory;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.sql.execute.TupleFilter;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: 
1: 
1: /**
1: * A Filter to qualify tuples coming from a scan of SYSDEPENDS.
1: * Tuples qualify if they have the right providerID.
1: *
0: * @author Rick
1: */
1: public class DropDependencyFilter implements TupleFilter
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	//////////////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTANTS
1: 	//
1: 	//////////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 	//////////////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	STATE
1: 	//
1: 	//////////////////////////////////////////////////////////////////////////////////////
1: 
1: 	UUID				providerID;
1: 
1: 	UUIDFactory			uuidFactory = null;
1: 	DataValueFactory	dataValueFactory = null;
1: 
1: 	BooleanDataValue	trueValue;
1: 	BooleanDataValue	falseValue;
1: 
1: 	//////////////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	//////////////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  *	Construct a TupleFilter to qualify SYSDEPENDS rows with the
1: 	  * designated providerID.
1: 	  *
1: 	  *	@param	providerID	UUID of provider. Tuples with this ID qualify.
1: 	  */
1: 	public	DropDependencyFilter( UUID providerID )
1: 	{
1: 		this.providerID = providerID;
1: 	}
1: 
1: 
1: 	//////////////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	TupleFilter BEHAVIOR
1: 	//
1: 	//////////////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  *	Initialize a Filter with a vector of parameters. This is a NOP.
1: 	  * We initialize this filter at Constructor time.
1: 	  *
1: 	  *	@param	parameters	An ExecRow of parameter values
1: 	  *
1: 	  * @exception StandardException		Thrown on error
1: 	  */
1:     public	void	init( ExecRow parameters )
1: 		throws StandardException
1: 	{}
1: 
1: 	/**
1: 	  *	Pump a SYSDEPENDS row through the Filter. If the providerID of the
1: 	  * row matches our providerID, we return true. Otherwise we return false.
1: 	  *
0: 	  *	@param	row		SYSDEPENDS row
1: 	  *
1: 	  *	@return	True if the row has our providerID. False otherwise.
1: 	  *
1: 	  * @exception StandardException		Thrown on error
1: 	  */
1:     public	BooleanDataValue	execute( ExecRow currentRow )
1: 		throws StandardException
1: 	{
1: 		/* 3rd column is PROVIDERID (UUID - char(36)) */
1: 		DataValueDescriptor	col = currentRow.getColumn(SYSDEPENDSRowFactory.SYSDEPENDS_PROVIDERID);
1: 		String	providerIDstring = col.getString();
1: 		UUID	providerUUID = getUUIDFactory().recreateUUID(providerIDstring);
1: 
1: 		if ( providerID.equals( providerUUID ) ) { return getTrueValue(); }
1: 		else { return getFalseValue(); }
1: 	}
1: 
1: 
1: 	//////////////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	MINIONS
1: 	//
1: 	//////////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 	/**
1: 	  *	Get the UUID factory
1: 	  *
1: 	  *	@return	the UUID factory
1: 	  *
1: 	  * @exception   StandardException thrown on failure
1: 	  */
1: 	private	UUIDFactory	getUUIDFactory()
1: 		throws StandardException
1: 	{
1: 		if ( uuidFactory == null )
1: 		{
0: 			uuidFactory = Monitor.getMonitor().getUUIDFactory();
1: 		}
1: 		return	uuidFactory;
1: 	}
1: 
1: 	/**
0: 	  *	Gets the DataValueFactory for this connection.
1: 	  *
0: 	  *	@return	the data value factory for this connection
1: 	  */
0: 	private DataValueFactory	getDataValueFactory()
1: 	{
0: 		if ( dataValueFactory == null )
1: 		{
0: 			LanguageConnectionContext	lcc = (LanguageConnectionContext) 
0: 					                          ContextService.getContext
0: 							                  (LanguageConnectionContext.CONTEXT_ID);
1: 
0: 			dataValueFactory = lcc.getDataValueFactory();
1: 		}
1: 
0: 		return	dataValueFactory;
1: 	}
1: 
1: 	/**
1: 	  *	Gets a BooleanDataValue representing TRUE.
1: 	  *
1: 	  *	@return	a TRUE value
1: 	  * @exception StandardException		Thrown on error
1: 	  */
1: 	private BooleanDataValue	getTrueValue()
1: 		throws StandardException
1: 	{
1: 		if ( trueValue == null )
1: 		{
0: 			trueValue = getDataValueFactory().getDataValue( true );
1: 		}
1: 
1: 		return	trueValue;
1: 	}
1: 
1: 	/**
1: 	  *	Gets a BooleanDataValue representing FALSE
1: 	  *
1: 	  *	@return	a FALSE value
1: 	  * @exception StandardException		Thrown on error
1: 	  */
1: 	private BooleanDataValue	getFalseValue()
1: 		throws StandardException
1: 	{
1: 		if ( falseValue == null )
1: 		{
0: 			falseValue = getDataValueFactory().getDataValue( false );
1: 		}
1: 
1: 		return	falseValue;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: 
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.sql.execute.TupleFilter;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: 
0: 
0: /**
0: * A Filter to qualify tuples coming from a scan of SYSDEPENDS.
0: * Tuples qualify if they have the right providerID.
0: *
0: * @author Rick
0: */
0: public class DropDependencyFilter implements TupleFilter
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	//////////////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTANTS
0: 	//
0: 	//////////////////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 	//////////////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	STATE
0: 	//
0: 	//////////////////////////////////////////////////////////////////////////////////////
0: 
0: 	UUID				providerID;
0: 
0: 	UUIDFactory			uuidFactory = null;
0: 	DataValueFactory	dataValueFactory = null;
0: 
0: 	BooleanDataValue	trueValue;
0: 	BooleanDataValue	falseValue;
0: 
0: 	//////////////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	//////////////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  *	Construct a TupleFilter to qualify SYSDEPENDS rows with the
0: 	  * designated providerID.
0: 	  *
0: 	  *	@param	providerID	UUID of provider. Tuples with this ID qualify.
0: 	  */
0: 	public	DropDependencyFilter( UUID providerID )
0: 	{
0: 		this.providerID = providerID;
0: 	}
0: 
0: 
0: 	//////////////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	TupleFilter BEHAVIOR
0: 	//
0: 	//////////////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  *	Initialize a Filter with a vector of parameters. This is a NOP.
0: 	  * We initialize this filter at Constructor time.
0: 	  *
0: 	  *	@param	parameters	An ExecRow of parameter values
0: 	  *
0: 	  * @exception StandardException		Thrown on error
0: 	  */
0:     public	void	init( ExecRow parameters )
0: 		throws StandardException
0: 	{}
0: 
0: 	/**
0: 	  *	Pump a SYSDEPENDS row through the Filter. If the providerID of the
0: 	  * row matches our providerID, we return true. Otherwise we return false.
0: 	  *
0: 	  *	@param	row		SYSDEPENDS row
0: 	  *
0: 	  *	@return	True if the row has our providerID. False otherwise.
0: 	  *
0: 	  * @exception StandardException		Thrown on error
0: 	  */
0:     public	BooleanDataValue	execute( ExecRow currentRow )
0: 		throws StandardException
0: 	{
0: 		/* 3rd column is PROVIDERID (UUID - char(36)) */
0: 		DataValueDescriptor	col = currentRow.getColumn(SYSDEPENDSRowFactory.SYSDEPENDS_PROVIDERID);
0: 		String	providerIDstring = col.getString();
0: 		UUID	providerUUID = getUUIDFactory().recreateUUID(providerIDstring);
0: 
0: 		if ( providerID.equals( providerUUID ) ) { return getTrueValue(); }
0: 		else { return getFalseValue(); }
0: 	}
0: 
0: 
0: 	//////////////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	MINIONS
0: 	//
0: 	//////////////////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 	/**
0: 	  *	Get the UUID factory
0: 	  *
0: 	  *	@return	the UUID factory
0: 	  *
0: 	  * @exception   StandardException thrown on failure
0: 	  */
0: 	private	UUIDFactory	getUUIDFactory()
0: 		throws StandardException
0: 	{
0: 		if ( uuidFactory == null )
0: 		{
0: 			uuidFactory = Monitor.getMonitor().getUUIDFactory();
0: 		}
0: 		return	uuidFactory;
0: 	}
0: 
0: 	/**
0: 	  *	Gets the DataValueFactory for this connection.
0: 	  *
0: 	  *	@return	the data value factory for this connection
0: 	  */
0: 	private DataValueFactory	getDataValueFactory()
0: 	{
0: 		if ( dataValueFactory == null )
0: 		{
0: 			LanguageConnectionContext	lcc = (LanguageConnectionContext) 
0: 					                          ContextService.getContext
0: 							                  (LanguageConnectionContext.CONTEXT_ID);
0: 
0: 			dataValueFactory = lcc.getDataValueFactory();
0: 		}
0: 
0: 		return	dataValueFactory;
0: 	}
0: 
0: 	/**
0: 	  *	Gets a BooleanDataValue representing TRUE.
0: 	  *
0: 	  *	@return	a TRUE value
0: 	  * @exception StandardException		Thrown on error
0: 	  */
0: 	private BooleanDataValue	getTrueValue()
0: 		throws StandardException
0: 	{
0: 		if ( trueValue == null )
0: 		{
0: 			trueValue = getDataValueFactory().getDataValue( true );
0: 		}
0: 
0: 		return	trueValue;
0: 	}
0: 
0: 	/**
0: 	  *	Gets a BooleanDataValue representing FALSE
0: 	  *
0: 	  *	@return	a FALSE value
0: 	  * @exception StandardException		Thrown on error
0: 	  */
0: 	private BooleanDataValue	getFalseValue()
0: 		throws StandardException
0: 	{
0: 		if ( falseValue == null )
0: 		{
0: 			falseValue = getDataValueFactory().getDataValue( false );
0: 		}
0: 
0: 		return	falseValue;
0: 	}
0: 
0: }
============================================================================