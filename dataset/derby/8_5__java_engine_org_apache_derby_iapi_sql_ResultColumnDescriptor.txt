1:fe77ca5: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.ResultColumnDescriptor
1:7ecc1f2: 
1:4590cd8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4590cd8:    contributor license agreements.  See the NOTICE file distributed with
1:4590cd8:    this work for additional information regarding copyright ownership.
1:4590cd8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:4590cd8:    (the "License"); you may not use this file except in compliance with
1:4590cd8:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.sql;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * A ResultColumnDescriptor describes a result column in a ResultSet.
1:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: public interface ResultColumnDescriptor
1:fe77ca5: {
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns a DataTypeDescriptor for the column. This DataTypeDescriptor
1:fe77ca5: 	 * will not represent an actual value, it will only represent the type
1:fe77ca5: 	 * that all values in the column will have.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	A DataTypeDescriptor describing the type of the column.
1:fe77ca5: 	 */
1:fe77ca5: 	DataTypeDescriptor	getType();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the name of the Column.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	A String containing the name of the column.
1:fe77ca5: 	 */
1:fe77ca5: 	String	getName();
1:fe77ca5: 
1:fe77ca5: 	/**
1:b57ee34: 	 * Get the name of the schema for the Column's base table, if any.
1:b57ee34: 	 * Following example queries will all return APP (assuming user is in schema APP)
1:b57ee34: 	 * select t.a from t
1:b57ee34: 	 * select b.a from t as b
1:b57ee34: 	 * select app.t.a from t
1:fe77ca5: 	 *
1:b57ee34: 	 * @return	The name of the schema of the Column's base table. If the column
1:b57ee34: 	 *		is not in a schema (i.e. is a derived column), it returns NULL.
1:fe77ca5: 	 */
1:b57ee34: 	String	getSourceSchemaName();
1:fe77ca5: 
1:fe77ca5: 	/**
1:b57ee34: 	 * Get the name of the underlying(base) table this column comes from, if any.
1:b57ee34: 	 * Following example queries will all return T
1:b57ee34: 	 * select a from t
1:b57ee34: 	 * select b.a from t as b
1:b57ee34: 	 * select t.a from t
1:fe77ca5: 	 *
1:b57ee34: 	 * @return	A String containing the name of the base table of the Column
1:fe77ca5: 	 *		is in. If the column is not in a table (i.e. is a
2:fe77ca5: 	 * 		derived column), it returns NULL.
1:f668d94:      *      The name of the Column's base table. If the column
1:b57ee34: 	 *		is not in a schema (i.e. is a derived column), it returns NULL.
1:fe77ca5: 	 */
1:fe77ca5: 	String	getSourceTableName();
1:fe77ca5: 
1:fe77ca5: 	/**
1:b57ee34: 	 * Return true if the column is wirtable by a positioned update.
1:b57ee34: 	 *
1:b57ee34: 	 * @return TRUE, if the column is a base column of a table and is 
1:b57ee34: 	 * writable by a positioned update.
1:b57ee34: 	 */
1:b57ee34: 	boolean updatableByCursor();
1:b57ee34: 
1:b57ee34: 	/**
1:fe77ca5: 	 * Get the position of the Column.
1:fe77ca5: 	 * NOTE - position is 1-based.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	An int containing the position of the Column
1:fe77ca5: 	 *		within the table.
1:fe77ca5: 	 */
1:fe77ca5: 	int	getColumnPosition();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Tell us if the column is an autoincrement column or not.
1:fe77ca5: 	 * 
1:fe77ca5: 	 * @return TRUE, if the column is a base column of a table and is an
1:fe77ca5: 	 * autoincrement column.
1:fe77ca5: 	 */
1:fe77ca5: 	boolean isAutoincrement();
1:fe77ca5: 
1:ec4aa98: 	/**
1:ec4aa98: 	 * Return true if this result column represents a generated column.
1:ec4aa98: 	 */
1:3bb140c:     boolean hasGenerationClause();
1:ec4aa98:     
1:fe77ca5: 	/*
1:fe77ca5: 	 * NOTE: These interfaces are intended to support JDBC. There are some
1:fe77ca5: 	 * JDBC methods on java.sql.ResultSetMetaData that have no equivalent
1:fe77ca5: 	 * here, mainly because they are of questionable use to us.  They are:
1:fe77ca5: 	 * getCatalogName() (will we support catalogs?), getColumnLabel(),
1:fe77ca5: 	 * isCaseSensitive(), isCurrency(),
1:fe77ca5: 	 * isDefinitelyWritable(), isReadOnly(), isSearchable(), isSigned(),
1:fe77ca5: 	 * isWritable()). The JDBC driver implements these itself, using
1:fe77ca5: 	 * the data type information and knowing data type characteristics.
1:fe77ca5: 	 */
1:fe77ca5: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
1:      *      The name of the Column's base table. If the column
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1:     boolean hasGenerationClause();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ec4aa98
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Return true if this result column represents a generated column.
1: 	 */
0: 	public boolean hasGenerationClause();
1:     
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:4590cd8
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b57ee34
/////////////////////////////////////////////////////////////////////////
1: 	 * Get the name of the schema for the Column's base table, if any.
1: 	 * Following example queries will all return APP (assuming user is in schema APP)
1: 	 * select t.a from t
1: 	 * select b.a from t as b
1: 	 * select app.t.a from t
1: 	 * @return	The name of the schema of the Column's base table. If the column
1: 	 *		is not in a schema (i.e. is a derived column), it returns NULL.
1: 	String	getSourceSchemaName();
1: 	 * Get the name of the underlying(base) table this column comes from, if any.
1: 	 * Following example queries will all return T
1: 	 * select a from t
1: 	 * select b.a from t as b
1: 	 * select t.a from t
1: 	 * @return	A String containing the name of the base table of the Column
0: 	 * @return	The name of the Column's base table. If the column
1: 	 *		is not in a schema (i.e. is a derived column), it returns NULL.
1: 	 * Return true if the column is wirtable by a positioned update.
1: 	 *
1: 	 * @return TRUE, if the column is a base column of a table and is 
1: 	 * writable by a positioned update.
1: 	 */
1: 	boolean updatableByCursor();
1: 
1: 	/**
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.ResultColumnDescriptor
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql;
1: 
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
1: /**
1:  * A ResultColumnDescriptor describes a result column in a ResultSet.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
1: public interface ResultColumnDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	 * Returns a DataTypeDescriptor for the column. This DataTypeDescriptor
1: 	 * will not represent an actual value, it will only represent the type
1: 	 * that all values in the column will have.
1: 	 *
1: 	 * @return	A DataTypeDescriptor describing the type of the column.
1: 	 */
1: 	DataTypeDescriptor	getType();
1: 
1: 	/**
1: 	 * Returns the name of the Column.
1: 	 *
1: 	 * @return	A String containing the name of the column.
1: 	 */
1: 	String	getName();
1: 
1: 	/**
0: 	 * Get the name of the schema the Column is in, if any.
1: 	 *
0: 	 * @return	A String containing the name of the schema the Column
0: 	 *		is in.  If the column is not in a schema (i.e. is a
1: 	 * 		derived column), it returns NULL.
1: 	 */
0: 	String	getSchemaName();
1: 
1: 	/**
0: 	 * Get the name of the table the Column is in, if any.
1: 	 *
0: 	 * @return	A String containing the name of the table the Column
1: 	 *		is in. If the column is not in a table (i.e. is a
1: 	 * 		derived column), it returns NULL.
1: 	 */
1: 	String	getSourceTableName();
1: 
1: 	/**
1: 	 * Get the position of the Column.
1: 	 * NOTE - position is 1-based.
1: 	 *
1: 	 * @return	An int containing the position of the Column
1: 	 *		within the table.
1: 	 */
1: 	int	getColumnPosition();
1: 
1: 	/**
1: 	 * Tell us if the column is an autoincrement column or not.
1: 	 * 
1: 	 * @return TRUE, if the column is a base column of a table and is an
1: 	 * autoincrement column.
1: 	 */
1: 	boolean isAutoincrement();
1: 
1: 	/*
1: 	 * NOTE: These interfaces are intended to support JDBC. There are some
1: 	 * JDBC methods on java.sql.ResultSetMetaData that have no equivalent
1: 	 * here, mainly because they are of questionable use to us.  They are:
1: 	 * getCatalogName() (will we support catalogs?), getColumnLabel(),
1: 	 * isCaseSensitive(), isCurrency(),
1: 	 * isDefinitelyWritable(), isReadOnly(), isSearchable(), isSigned(),
1: 	 * isWritable()). The JDBC driver implements these itself, using
1: 	 * the data type information and knowing data type characteristics.
1: 	 */
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: /**
0:  * A ResultColumnDescriptor describes a result column in a ResultSet.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public interface ResultColumnDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Returns a DataTypeDescriptor for the column. This DataTypeDescriptor
0: 	 * will not represent an actual value, it will only represent the type
0: 	 * that all values in the column will have.
0: 	 *
0: 	 * @return	A DataTypeDescriptor describing the type of the column.
0: 	 */
0: 	DataTypeDescriptor	getType();
0: 
0: 	/**
0: 	 * Returns the name of the Column.
0: 	 *
0: 	 * @return	A String containing the name of the column.
0: 	 */
0: 	String	getName();
0: 
0: 	/**
0: 	 * Get the name of the schema the Column is in, if any.
0: 	 *
0: 	 * @return	A String containing the name of the schema the Column
0: 	 *		is in.  If the column is not in a schema (i.e. is a
0: 	 * 		derived column), it returns NULL.
0: 	 */
0: 	String	getSchemaName();
0: 
0: 	/**
0: 	 * Get the name of the table the Column is in, if any.
0: 	 *
0: 	 * @return	A String containing the name of the table the Column
0: 	 *		is in. If the column is not in a table (i.e. is a
0: 	 * 		derived column), it returns NULL.
0: 	 */
0: 	String	getSourceTableName();
0: 
0: 	/**
0: 	 * Get the position of the Column.
0: 	 * NOTE - position is 1-based.
0: 	 *
0: 	 * @return	An int containing the position of the Column
0: 	 *		within the table.
0: 	 */
0: 	int	getColumnPosition();
0: 
0: 	/**
0: 	 * Tell us if the column is an autoincrement column or not.
0: 	 * 
0: 	 * @return TRUE, if the column is a base column of a table and is an
0: 	 * autoincrement column.
0: 	 */
0: 	boolean isAutoincrement();
0: 
0: 	/*
0: 	 * NOTE: These interfaces are intended to support JDBC. There are some
0: 	 * JDBC methods on java.sql.ResultSetMetaData that have no equivalent
0: 	 * here, mainly because they are of questionable use to us.  They are:
0: 	 * getCatalogName() (will we support catalogs?), getColumnLabel(),
0: 	 * isCaseSensitive(), isCurrency(),
0: 	 * isDefinitelyWritable(), isReadOnly(), isSearchable(), isSigned(),
0: 	 * isWritable()). The JDBC driver implements these itself, using
0: 	 * the data type information and knowing data type characteristics.
0: 	 */
0: }
============================================================================