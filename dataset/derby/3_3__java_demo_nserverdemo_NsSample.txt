1:df69fcc: /*
6:df69fcc: 
1:df69fcc:    Derby - Class nserverdemo.NsSample
1:df69fcc: 
1:44e2455:    Licensed to the Apache Software Foundation (ASF) under one or more
1:44e2455:    contributor license agreements.  See the NOTICE file distributed with
1:44e2455:    this work for additional information regarding copyright ownership.
1:44e2455:    The ASF licenses this file to You under the Apache License, Version 2.0
1:44e2455:    (the "License"); you may not use this file except in compliance with
1:44e2455:    the License.  You may obtain a copy of the License at
1:df69fcc: 
1:df69fcc:       http://www.apache.org/licenses/LICENSE-2.0
1:df69fcc: 
1:df69fcc:    Unless required by applicable law or agreed to in writing, software
1:df69fcc:    distributed under the License is distributed on an "AS IS" BASIS,
1:df69fcc:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:df69fcc:    See the License for the specific language governing permissions and
1:df69fcc:    limitations under the License.
1:df69fcc: 
2:df69fcc:  */
1:df69fcc:  
1:df69fcc: package nserverdemo;
1:df69fcc: 
1:df69fcc: 
1:df69fcc: import java.util.Properties;
1:df69fcc: import java.sql.SQLException;
1:df69fcc: import java.sql.DriverManager;
1:df69fcc: import java.io.IOException;
1:df69fcc: import java.sql.Connection;
1:df69fcc: import java.sql.Statement;
1:df69fcc: import java.sql.ResultSet;
1:df69fcc: import java.sql.SQLException;
1:df69fcc: import java.sql.SQLWarning;
1:df69fcc: import java.io.PrintWriter;
1:df69fcc: 
1:df69fcc: 
1:6558c14: /**
1:df69fcc: 
1:df69fcc:  The Network Server sample demo program is a
1:df69fcc:  simple JDBC application that interacts with the Derby Network Server.
1:df69fcc:  The program:
1:df69fcc: 
1:df69fcc:  1.	starts the Derby Network Server
1:1695a5d:  2. creates the database if not already created
1:1695a5d:  3. checks to see if the schema is already created, and if not,
1:1695a5d:  4. creates the schema which includes the table SAMPLETBL and corresponding indexes.
1:1695a5d:  5. connects to the database
1:1695a5d:  6. loads the schema by inserting data
1:1695a5d:  7. starts client threads to perform database related operations
1:1695a5d:  8. has each of the clients perform DML operations (select, insert, delete, update) using JDBC calls,
1:df69fcc:     i)	 one client opens an embedded connection to perform database operations
1:df69fcc:          You can open an embedded connection in the same JVM that starts the Derby Network
1:df69fcc:          Server.
1:df69fcc:     ii)  one client opens a client connection to the Derby Network Server to perform database operations.
1:1695a5d:  9. waits for the client threads to finish the tasks
1:1695a5d:  10.shuts down the Derby Network Server at the end of the demo
1:df69fcc: 
1:df69fcc:  <P>
1:df69fcc:  Usage: java nserverdemo.NsSample
1:df69fcc:  <P>
1:df69fcc:  Please note, a file derby.log is created in the directory you run this program.
1:df69fcc:  This file contains the logging of connections made with the derby network server
1:df69fcc:  */
1:df69fcc: 
1:df69fcc: public class NsSample {
1:df69fcc: 
1:45f64ad: 	public static final String DERBY_CLIENT_DRIVER = "org.apache.derby.jdbc.ClientDriver";
1:df69fcc: 	public static int NUM_ROWS = 50; /* Number of rows to load initially */
1:df69fcc: 	public static int ITERATIONS = 10;  //Each client does these many iterations
1:df69fcc: 	public static int NUM_CLIENT_THREADS = 2;
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 	// network server control specific
1:df69fcc: 	private static int NETWORKSERVER_PORT=1621;
1:df69fcc: 
1:df69fcc: 	// Derby database connection URL for embedded environment
1:df69fcc: 	public static final String CS_EMBED_DBURL="jdbc:derby:NSSampledb;";
1:df69fcc: 
1:df69fcc: 	// To connect to Derby Network Server
1:df69fcc: 	// This URL describes the target database for type 4 connectivity
1:df69fcc: 	// Notice that the properties may be established via the URL syntax
1:6558c14:         // URL for the Derby client JDBC driver.
1:6558c14: 	private static final String DERBY_CLIENT_URL= "jdbc:derby://localhost:"+NETWORKSERVER_PORT+"/NSSampledb;create=true;";
1:6558c14: 
1:6558c14:         // Default to using the Derby Client JDBC Driver for database connections
1:6558c14:         String url = DERBY_CLIENT_URL;
1:6558c14:         String jdbcDriver = DERBY_CLIENT_DRIVER;
1:df69fcc: 
1:df69fcc: 	public static void main(String[] args) throws Exception {
1:df69fcc: 
1:6558c14:                    new nserverdemo.NsSample().startSample(args);
1:6558c14:         }
1:6558c14: 	public void startSample(String[] args) throws Exception {
1:df69fcc: 	  NetworkServerUtil nwServer;
1:6558c14: 
1:df69fcc: 	  Connection conn = null;
1:df69fcc: 
1:df69fcc: 	  PrintWriter pw = null;
1:6558c14:           
1:6558c14:       
1:6558c14: 
1:df69fcc: 	  try  {
1:6558c14: 
1:df69fcc: 		pw = new PrintWriter(System.out,true);	// to print messages
1:6558c14: 		pw.println("Using JDBC driver: " + jdbcDriver);
1:df69fcc: 
1:df69fcc: 		/* Start - In order to start the network server do the following
1:df69fcc: 		   In case you want to start the server as a script or another program
1:df69fcc: 		   comment out the next block of code (i.e. until the comment line 'End - network server started')
1:df69fcc: 		   Also, comment out the 'Shutdown Derby Network Server' line of code at the bottom
1:df69fcc: 		   In case you decide to comment out the starting of the network server, make sure that the
1:df69fcc: 		   client thread is not making an embedded connection but instead making only a client connection.
1:df69fcc: 		   Also note, the server logs messages to the file derby.log in the
1:df69fcc: 		   directory you run this program
1:6558c14: 		 */
1:df69fcc: 
3:6558c14: 		 	{
1:df69fcc: 				nwServer = new NetworkServerUtil(NETWORKSERVER_PORT,pw);
1:df69fcc: 				nwServer.start();
1:6558c14: 
1:df69fcc: 				boolean knowIfServerUp = false; //do we know if server is ready to accept connections
1:df69fcc: 				int numTimes = 5;
1:df69fcc: 
1:df69fcc: 				// Test to see if server is ready for connections, for 15 seconds.
1:df69fcc: 				while(!knowIfServerUp && (numTimes >0)) {
1:df69fcc: 					try {
1:df69fcc: 						// testing for connection to see if the network server is up and running
1:df69fcc: 						// if server is not ready yet, this method will throw an exception
1:df69fcc: 						numTimes--;
1:df69fcc: 						nwServer.testForConnection();
1:df69fcc: 						knowIfServerUp = true;
1:6558c14: 					}
1:df69fcc: 					catch(Exception e) {
1:df69fcc: 						System.out.println("[NsSample] Unable to obtain a connection to network server, trying again after 3000 ms.");
1:df69fcc: 						Thread.currentThread().sleep(3000);
5:df69fcc: 					}
1:df69fcc: 				}
1:df69fcc: 				if(!knowIfServerUp) {
1:df69fcc: 					pw.println("[NsSample] Exiting, since unable to connect to Derby Network Server.");
1:df69fcc: 					pw.println("[NsSample] Please try to increase the amount of time to keep trying to connect to the Server.");
1:df69fcc: 					System.exit(1);
1:df69fcc: 				}
1:df69fcc: 
1:df69fcc: 				pw.println("[NsSample] Derby Network Server started.");
1:df69fcc: 			}
1:df69fcc: 		/*End - network server started*/
1:df69fcc: 
1:df69fcc: 		pw.println("[NsSample] Sample Derby Network Server program demo starting. ");
1:df69fcc: 		pw.println("Please wait .....................");
1:df69fcc: 
1:df69fcc: 		// See Derby documentation for description of properties that may be set
1:df69fcc: 		//  in the context of the network server.
1:df69fcc: 		Properties properties = new java.util.Properties();
1:df69fcc: 
1:df69fcc: 		// The user and password properties are a must, required by JCC
1:45f64ad: 		properties.setProperty("user","derbyuser");
1:45f64ad: 		properties.setProperty("password","pass");
1:df69fcc: 
1:6558c14: 		// Get database connection via DriverManager api
2:df69fcc: 		try	{
1:df69fcc: 			
1:6558c14: 			conn =  (Connection) DriverManager.getConnection(url, properties);
1:df69fcc: 		} catch(Exception e) {
1:df69fcc: 			pw.println("[NsSample] Connection request unsuccessful, exception thrown was: ");
1:df69fcc: 			pw.println("[NsSample] Please check if all the jar files are in the classpath and the dbUrl is set correctly.");
2:df69fcc: 			e.printStackTrace();
2:df69fcc: 			System.exit(1);  //critical error, so exit
1:df69fcc: 		  }
1:df69fcc: 
1:df69fcc: 		NsSampleWork.checkAndCreateSchema(conn,pw); // Check and create the necessary schema if not already created
1:df69fcc: 		NsSampleWork.loadSchema(conn,NUM_ROWS,pw); // Insert rows into the table
1:df69fcc: 		conn.close();
1:df69fcc: 
1:df69fcc: 		// Start client threads to perform database related sql operations
1:df69fcc: 		NsSampleClientThread clientThreads[] = new NsSampleClientThread[NUM_CLIENT_THREADS];
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 		/* Only the JVM that starts the Derby Network Server can obtain an embedded connection
1:df69fcc: 		   Please pay attention to the database URL
1:df69fcc: 		   Also, you need not load the org.apache.derby.jdbc.EmbeddedDriver since it is already loaded when
1:df69fcc: 		   the network server starts up.
1:df69fcc: 		   1. Derby embedded database url - jdbc:derby:databasename
1:df69fcc: 		*/
1:df69fcc: 		clientThreads[0] = new NsSampleClientThread(1,CS_EMBED_DBURL,properties,pw);
1:df69fcc: 		clientThreads[0].start();
1:df69fcc: 
1:df69fcc: 
1:df69fcc: 		/*
1:df69fcc: 		   2. The below client threads obtain a client connection to Derby Network Server
1:df69fcc: 		   One can also get a client connection from another JVM
1:df69fcc: 		   Please be aware of the database URL for obtaining a client connection
1:df69fcc: 		 */
1:df69fcc: 		for (int i=1; i<NUM_CLIENT_THREADS; i++) {
1:6558c14: 			clientThreads[i] = new NsSampleClientThread(i+1,url,properties,pw);
1:df69fcc: 			clientThreads[i].start();
1:df69fcc: 
1:df69fcc: 		}
1:df69fcc: 
1:df69fcc: 		// Wait for the client threads to complete all the work
1:df69fcc: 		for (int i = 0; i < NUM_CLIENT_THREADS; i++)
1:df69fcc: 		   clientThreads[i].join();
1:df69fcc: 
1:df69fcc: 		 // Shutdown Derby network server
1:df69fcc: 		 pw.println("[NsSample] Shutting down network server.");
1:df69fcc: 		 nwServer.shutdown();
1:df69fcc: 		 pw.println("[NsSample] End of Network server demo.");
1:df69fcc: 
2:df69fcc:    	  } catch (Exception e) {
1:df69fcc: 		  e.printStackTrace();
1:df69fcc: 		}
1:df69fcc:    	  finally
1:6558c14:    	  {
1:df69fcc: 		if(pw != null) pw.close();
1:6558c14:       }
1:6558c14: 	 }
1:6558c14: 
1:df69fcc: 
1:df69fcc: }
============================================================================
author:Camilla Haase
-------------------------------------------------------------------------------
commit:1695a5d
/////////////////////////////////////////////////////////////////////////
1:  2. creates the database if not already created
1:  3. checks to see if the schema is already created, and if not,
1:  4. creates the schema which includes the table SAMPLETBL and corresponding indexes.
1:  5. connects to the database
1:  6. loads the schema by inserting data
1:  7. starts client threads to perform database related operations
1:  8. has each of the clients perform DML operations (select, insert, delete, update) using JDBC calls,
1:  9. waits for the client threads to finish the tasks
1:  10.shuts down the Derby Network Server at the end of the demo
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:45f64ad
/////////////////////////////////////////////////////////////////////////
0:  2.	loads the derby client JDBC driver
/////////////////////////////////////////////////////////////////////////
1: 	public static final String DERBY_CLIENT_DRIVER = "org.apache.derby.jdbc.ClientDriver";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		properties.setProperty("user","derbyuser");
1: 		properties.setProperty("password","pass");
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:44e2455
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6558c14
/////////////////////////////////////////////////////////////////////////
0:  2.	loads the IBM DB2 JDBC Universal driver or derby client JDBC driver
0:         (default is the derby client JDBC driver)
/////////////////////////////////////////////////////////////////////////
0:         public static final String DERBY_CLIENT_DRIVER = "org.apache.derby.jdbc.ClientDriver";
/////////////////////////////////////////////////////////////////////////
1:         // URL for the Derby client JDBC driver.
1: 	private static final String DERBY_CLIENT_URL= "jdbc:derby://localhost:"+NETWORKSERVER_PORT+"/NSSampledb;create=true;";
1: 
1:         // Default to using the Derby Client JDBC Driver for database connections
1:         String url = DERBY_CLIENT_URL;
1:         String jdbcDriver = DERBY_CLIENT_DRIVER;
1:                    new nserverdemo.NsSample().startSample(args);
1:         }
1: 	public void startSample(String[] args) throws Exception {
1:           
1:       
1: 
0:                 // Determine which JDBC driver we are using with Derby
0:                 parseArguments(args);
1: 
1: 		pw.println("Using JDBC driver: " + jdbcDriver);
/////////////////////////////////////////////////////////////////////////
0: 		// Load the JDBC Driver
0: 			Class.forName(jdbcDriver).newInstance();
0: 			pw.println("[NsSample] Unable to load the JDBC driver. Following exception was thrown");
/////////////////////////////////////////////////////////////////////////
1: 		// Get database connection via DriverManager api
1: 			conn =  (Connection) DriverManager.getConnection(url, properties);
/////////////////////////////////////////////////////////////////////////
1: 			clientThreads[i] = new NsSampleClientThread(i+1,url,properties,pw);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Determine which jdbc driver to use by parsing the command line args.
0:      *  Accepted values:
0:      *  jccjdbclient   - The DB2 type 4 universal driver
0:      *  derbyclient    - The Derby network driver (default).
0:      *  Note: because this is just a sample, we only care about whether
0:      *  the above values are specified.  If they are not, then we default
0:      *  to the Derby network driver.
1:      */
0:     private void parseArguments(String[] args)
1:     {
0:         int length = args.length;
1: 
0:         for (int index = 0; index < length; index++)
1:         {
0:             if (args[index].equalsIgnoreCase("jccjdbcclient"))
1:             {
0:                 jdbcDriver = DB2_JDBC_UNIVERSAL_DRIVER;
0:                 url = CS_NS_DBURL;
0:                 break;
0:             } else if (args[index].equalsIgnoreCase("derbyClient"))
1:             {
0:                 jdbcDriver = DERBY_CLIENT_DRIVER;
0:                 url = DERBY_CLIENT_URL;
0:                 break;
1:             }
1:         }
1:     }
1: 
commit:df69fcc
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class nserverdemo.NsSample
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1:  
1: package nserverdemo;
1: 
1: 
1: import java.util.Properties;
1: import java.sql.SQLException;
1: import java.sql.DriverManager;
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.SQLWarning;
1: import java.io.PrintWriter;
1: 
1: 
0: /**
1: 
1:  The Network Server sample demo program is a
1:  simple JDBC application that interacts with the Derby Network Server.
1:  The program:
1: 
1:  1.	starts the Derby Network Server
0:  2.	loads the IBM DB2 JDBC Universal driver
0:  3. creates the database if not already created
0:  4. checks to see if the schema is already created, and if not,
0:  5. creates the schema which includes the table SAMPLETBL and corresponding indexes.
0:  6. connects to the database
0:  7. loads the schema by inserting data
0:  8. starts client threads to perform database related operations
0:  9. has each of the clients perform DML operations (select, insert, delete, update) using JDBC calls,
1:     i)	 one client opens an embedded connection to perform database operations
1:          You can open an embedded connection in the same JVM that starts the Derby Network
1:          Server.
1:     ii)  one client opens a client connection to the Derby Network Server to perform database operations.
0:  10.waits for the client threads to finish the tasks
0:  11.shuts down the Derby Network Server at the end of the demo
1: 
1:  <P>
1:  Usage: java nserverdemo.NsSample
1:  <P>
1:  Please note, a file derby.log is created in the directory you run this program.
1:  This file contains the logging of connections made with the derby network server
1:  */
1: 
1: public class NsSample {
1: 
0: 	public static final String DB2_JDBC_UNIVERSAL_DRIVER = new String("com.ibm.db2.jcc.DB2Driver");
1: 	public static int NUM_ROWS = 50; /* Number of rows to load initially */
1: 	public static int ITERATIONS = 10;  //Each client does these many iterations
1: 	public static int NUM_CLIENT_THREADS = 2;
1: 
1: 
1: 	// network server control specific
1: 	private static int NETWORKSERVER_PORT=1621;
1: 
1: 	// Derby database connection URL for embedded environment
1: 	public static final String CS_EMBED_DBURL="jdbc:derby:NSSampledb;";
1: 
1: 	// To connect to Derby Network Server
1: 	// This URL describes the target database for type 4 connectivity
1: 	// Notice that the properties may be established via the URL syntax
0: 	private static final String CS_NS_DBURL= "jdbc:derby:net://localhost:"+NETWORKSERVER_PORT+"/NSSampledb;create=true;retrieveMessagesFromServerOnGetMessage=true;deferPrepares=true;";
1: 
1: 	public static void main(String[] args) throws Exception {
1: 
1: 	  NetworkServerUtil nwServer;
1: 
0: 	  // DB2Connection provides additional functionality than java.sql.Connection
0: 	  // One can use either depending on the requirements
1: 	  Connection conn = null;
1: 
1: 	  PrintWriter pw = null;
1: 
1: 	  try  {
1: 		pw = new PrintWriter(System.out,true);	// to print messages
1: 
1: 		/* Start - In order to start the network server do the following
1: 		   In case you want to start the server as a script or another program
1: 		   comment out the next block of code (i.e. until the comment line 'End - network server started')
1: 		   Also, comment out the 'Shutdown Derby Network Server' line of code at the bottom
1: 		   In case you decide to comment out the starting of the network server, make sure that the
1: 		   client thread is not making an embedded connection but instead making only a client connection.
1: 		   Also note, the server logs messages to the file derby.log in the
1: 		   directory you run this program
1: 		 */
1: 
0: 		 	{
1: 				nwServer = new NetworkServerUtil(NETWORKSERVER_PORT,pw);
1: 				nwServer.start();
1: 
1: 				boolean knowIfServerUp = false; //do we know if server is ready to accept connections
1: 				int numTimes = 5;
1: 
1: 				// Test to see if server is ready for connections, for 15 seconds.
1: 				while(!knowIfServerUp && (numTimes >0)) {
1: 					try {
1: 						// testing for connection to see if the network server is up and running
1: 						// if server is not ready yet, this method will throw an exception
1: 						numTimes--;
1: 						nwServer.testForConnection();
1: 						knowIfServerUp = true;
1: 					}
1: 					catch(Exception e) {
1: 						System.out.println("[NsSample] Unable to obtain a connection to network server, trying again after 3000 ms.");
1: 						Thread.currentThread().sleep(3000);
1: 					}
1: 				}
1: 				if(!knowIfServerUp) {
1: 					pw.println("[NsSample] Exiting, since unable to connect to Derby Network Server.");
1: 					pw.println("[NsSample] Please try to increase the amount of time to keep trying to connect to the Server.");
1: 					System.exit(1);
1: 				}
1: 
1: 				pw.println("[NsSample] Derby Network Server started.");
1: 			}
1: 		/*End - network server started*/
1: 
1: 		pw.println("[NsSample] Sample Derby Network Server program demo starting. ");
1: 		pw.println("Please wait .....................");
1: 
0: 		// Load the JCC Driver
1: 		try	{
0: 			Class.forName(DB2_JDBC_UNIVERSAL_DRIVER).newInstance();
1: 		} catch (Exception e) {
0: 			pw.println("[NsSample] Unable to load JCC driver. Following exception was thrown");
1: 			e.printStackTrace();
1: 			System.exit(1);  //critical error, so exit
1: 		  }
1: 
1: 
1: 		// See Derby documentation for description of properties that may be set
1: 		//  in the context of the network server.
1: 		Properties properties = new java.util.Properties();
1: 
1: 		// The user and password properties are a must, required by JCC
0: 		properties.setProperty("user","cloud");
0: 		properties.setProperty("password","scape");
1: 
0: 		// Get database connection using the JCC client via DriverManager api
1: 		try	{
1: 			
0: 			conn =  (Connection) DriverManager.getConnection(CS_NS_DBURL, properties);
1: 		} catch(Exception e) {
1: 			pw.println("[NsSample] Connection request unsuccessful, exception thrown was: ");
1: 			pw.println("[NsSample] Please check if all the jar files are in the classpath and the dbUrl is set correctly.");
1: 			e.printStackTrace();
1: 			System.exit(1);  //critical error, so exit
1: 		  }
1: 
1: 		NsSampleWork.checkAndCreateSchema(conn,pw); // Check and create the necessary schema if not already created
1: 		NsSampleWork.loadSchema(conn,NUM_ROWS,pw); // Insert rows into the table
1: 		conn.close();
1: 
1: 		// Start client threads to perform database related sql operations
1: 		NsSampleClientThread clientThreads[] = new NsSampleClientThread[NUM_CLIENT_THREADS];
1: 
1: 
1: 		/* Only the JVM that starts the Derby Network Server can obtain an embedded connection
1: 		   Please pay attention to the database URL
1: 		   Also, you need not load the org.apache.derby.jdbc.EmbeddedDriver since it is already loaded when
1: 		   the network server starts up.
1: 		   1. Derby embedded database url - jdbc:derby:databasename
1: 		*/
1: 		clientThreads[0] = new NsSampleClientThread(1,CS_EMBED_DBURL,properties,pw);
1: 		clientThreads[0].start();
1: 
1: 
1: 		/*
1: 		   2. The below client threads obtain a client connection to Derby Network Server
1: 		   One can also get a client connection from another JVM
1: 		   Please be aware of the database URL for obtaining a client connection
1: 		 */
1: 		for (int i=1; i<NUM_CLIENT_THREADS; i++) {
0: 			clientThreads[i] = new NsSampleClientThread(i+1,CS_NS_DBURL,properties,pw);
1: 			clientThreads[i].start();
1: 
1: 		}
1: 
1: 		// Wait for the client threads to complete all the work
1: 		for (int i = 0; i < NUM_CLIENT_THREADS; i++)
1: 		   clientThreads[i].join();
1: 
1: 		 // Shutdown Derby network server
1: 		 pw.println("[NsSample] Shutting down network server.");
1: 		 nwServer.shutdown();
1: 		 pw.println("[NsSample] End of Network server demo.");
1: 
1:    	  } catch (Exception e) {
1: 		  e.printStackTrace();
1: 		}
1:    	  finally
0:    	  {
1: 		if(pw != null) pw.close();
1:       }
1: 	 }
1: }
commit:6f35451
/////////////////////////////////////////////////////////////////////////
0: 
0:    Derby - Class nserverdemo.NsSample
0: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  
/////////////////////////////////////////////////////////////////////////
commit:3288ee5
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Connection;
/////////////////////////////////////////////////////////////////////////
0: 	private static final String CS_NS_DBURL= "jdbc:derby:net://localhost:"+NETWORKSERVER_PORT+"/NSSampledb;create=true;retrieveMessagesFromServerOnGetMessage=true;deferPrepares=true;";
/////////////////////////////////////////////////////////////////////////
0: 	  Connection conn = null;
/////////////////////////////////////////////////////////////////////////
0: 			
0: 			conn =  (Connection) DriverManager.getConnection(CS_NS_DBURL, properties);
commit:67614ad
/////////////////////////////////////////////////////////////////////////
============================================================================