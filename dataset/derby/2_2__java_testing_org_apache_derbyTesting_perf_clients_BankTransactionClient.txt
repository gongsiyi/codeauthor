1:f02a9f2: /*
1:f02a9f2: 
1:f02a9f2: Derby - Class org.apache.derbyTesting.perf.clients.BankTransactionClient
1:f02a9f2: 
1:f02a9f2: Licensed to the Apache Software Foundation (ASF) under one or more
1:f02a9f2: contributor license agreements.  See the NOTICE file distributed with
1:f02a9f2: this work for additional information regarding copyright ownership.
1:f02a9f2: The ASF licenses this file to You under the Apache License, Version 2.0
1:f02a9f2: (the "License"); you may not use this file except in compliance with
1:f02a9f2: the License.  You may obtain a copy of the License at
1:f02a9f2: 
1:f02a9f2:    http://www.apache.org/licenses/LICENSE-2.0
1:f02a9f2: 
1:f02a9f2: Unless required by applicable law or agreed to in writing, software
1:f02a9f2: distributed under the License is distributed on an "AS IS" BASIS,
1:f02a9f2: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f02a9f2: See the License for the specific language governing permissions and
1:f02a9f2: limitations under the License.
1:f02a9f2: 
1:f02a9f2: */
1:f02a9f2: 
1:f02a9f2: package org.apache.derbyTesting.perf.clients;
1:f02a9f2: 
1:9a05e65: import java.io.PrintStream;
1:f02a9f2: import java.sql.Connection;
1:f02a9f2: import java.sql.PreparedStatement;
1:f02a9f2: import java.sql.ResultSet;
1:f02a9f2: import java.sql.SQLException;
1:f02a9f2: import java.util.Random;
1:f02a9f2: 
1:f02a9f2: /**
1:f02a9f2:  * This class implements a client thread which performs bank transactions. The
1:f02a9f2:  * transactions are intended to perform the same operations as the transactions
1:f02a9f2:  * specified by the TPC-B benchmark.
1:f02a9f2:  */
1:f02a9f2: public class BankTransactionClient implements Client {
1:f02a9f2: 
1:f02a9f2:     /** Random number generator. */
1:f02a9f2:     private final Random random = new Random();
1:f02a9f2: 
1:f02a9f2:     /** The number of branches in the database. */
1:f02a9f2:     private final int branches;
1:f02a9f2:     /** The number of tellers per branch. */
1:f02a9f2:     private final int tellersPerBranch;
1:f02a9f2:     /** The number of accounts per branch. */
1:f02a9f2:     private final int accountsPerBranch;
1:f02a9f2: 
1:f02a9f2:     /** The connection on which the operations are performed. */
1:f02a9f2:     private Connection conn;
1:f02a9f2:     /** Statement that updates the balance of the account. */
1:f02a9f2:     private PreparedStatement updateAccount;
1:f02a9f2:     /** Statement that updated the history table. */
1:f02a9f2:     private PreparedStatement updateHistory;
1:f02a9f2:     /** Statement that updates the balance of the teller. */
1:f02a9f2:     private PreparedStatement updateTeller;
1:f02a9f2:     /** Statement that updated the balance of the branch. */
1:f02a9f2:     private PreparedStatement updateBranch;
1:f02a9f2:     /** Statement that retrieves the current account balance. */
1:f02a9f2:     private PreparedStatement retrieveAccountBalance;
1:f02a9f2: 
1:f02a9f2:     /**
1:f02a9f2:      * Create a client that works on a database with the given number of
1:f02a9f2:      * branches, tellers and accounts.
1:f02a9f2:      *
1:f02a9f2:      * @param branches the number of branches in the database
1:f02a9f2:      * @param tellersPerBranch the number of tellers per branch
1:f02a9f2:      * @param accountsPerBranch the number of accounts per branch
1:f02a9f2:      */
1:f02a9f2:     public BankTransactionClient(int branches, int tellersPerBranch,
1:f02a9f2:                                  int accountsPerBranch) {
1:f02a9f2:         if (branches <= 0 || tellersPerBranch <= 0 || accountsPerBranch <= 0) {
1:f02a9f2:             throw new IllegalArgumentException(
1:f02a9f2:                 "all arguments must be greater than 0");
1:f02a9f2:         }
1:f02a9f2:         this.branches = branches;
1:f02a9f2:         this.tellersPerBranch = tellersPerBranch;
1:f02a9f2:         this.accountsPerBranch = accountsPerBranch;
1:f02a9f2:     }
1:f02a9f2: 
1:f02a9f2:     /**
1:f02a9f2:      * Create a client that works on a database with the default number of
1:f02a9f2:      * tellers and accounts per branch.
1:f02a9f2:      *
1:f02a9f2:      * @param scale the scale factor for the database (equal to the number of
1:f02a9f2:      * branches)
1:f02a9f2:      *
1:f02a9f2:      * @see BankAccountFiller#BankAccountFiller(int)
1:f02a9f2:      */
1:f02a9f2:     public BankTransactionClient(int scale) {
1:f02a9f2:         this(scale,
1:f02a9f2:              BankAccountFiller.DEFAULT_TELLERS_PER_BRANCH,
1:f02a9f2:              BankAccountFiller.DEFAULT_ACCOUNTS_PER_BRANCH);
1:f02a9f2:     }
1:f02a9f2: 
1:f02a9f2:     /**
1:f02a9f2:      * Initialize the connection and the statements used by the test.
1:f02a9f2:      */
1:f02a9f2:     public void init(Connection c) throws SQLException {
1:f02a9f2:         conn = c;
1:f02a9f2:         c.setAutoCommit(false);
1:f02a9f2: 
1:f02a9f2:         updateAccount = c.prepareStatement(
1:f02a9f2:             "UPDATE " + BankAccountFiller.ACCOUNT_TABLE +
1:f02a9f2:             " SET ACCOUNT_BALANCE = ACCOUNT_BALANCE + ? WHERE ACCOUNT_ID = ?");
1:f02a9f2: 
1:f02a9f2:         updateHistory = c.prepareStatement(
1:f02a9f2:             "INSERT INTO " + BankAccountFiller.HISTORY_TABLE +
1:f02a9f2:             "(ACCOUNT_ID, TELLER_ID, BRANCH_ID, AMOUNT, TIME_STAMP, " +
1:f02a9f2:             "EXTRA_DATA) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, '" +
1:f02a9f2:             BankAccountFiller.createJunk(BankAccountFiller.HISTORY_EXTRA) +
1:f02a9f2:             "')");
1:f02a9f2: 
1:f02a9f2:         updateTeller = c.prepareStatement(
1:f02a9f2:             "UPDATE " + BankAccountFiller.TELLER_TABLE +
1:f02a9f2:             " SET TELLER_BALANCE = TELLER_BALANCE + ? WHERE TELLER_ID = ?");
1:f02a9f2: 
1:f02a9f2:         updateBranch = c.prepareStatement(
1:f02a9f2:             "UPDATE " + BankAccountFiller.BRANCH_TABLE +
1:f02a9f2:             " SET BRANCH_BALANCE = BRANCH_BALANCE + ? WHERE BRANCH_ID = ?");
1:f02a9f2: 
1:f02a9f2:         retrieveAccountBalance = c.prepareStatement(
1:f02a9f2:             "SELECT ACCOUNT_BALANCE FROM " + BankAccountFiller.ACCOUNT_TABLE +
1:f02a9f2:             " WHERE ACCOUNT_ID = ?");
1:f02a9f2:     }
1:f02a9f2: 
1:f02a9f2:     /**
1:f02a9f2:      * Perform a single transaction with a profile like the one specified in
1:f02a9f2:      * Clause 1.2 of the TPC-B specification.
1:f02a9f2:      */
1:f02a9f2:     public void doWork() throws SQLException {
1:f02a9f2: 
1:f02a9f2:         // Get the transaction input
1:f02a9f2:         final int tellerId = fetchTellerId();
1:f02a9f2:         final int branchId = fetchBranchId(tellerId);
1:f02a9f2:         final int accountId = fetchAccountId(branchId);
1:f02a9f2:         final int delta = fetchDelta();
1:f02a9f2: 
1:f02a9f2:         // Update the account balance
1:f02a9f2:         updateAccount.setInt(1, delta);
1:f02a9f2:         updateAccount.setInt(2, accountId);
1:f02a9f2:         updateAccount.executeUpdate();
1:f02a9f2: 
1:f02a9f2:         // Add a transaction log entry
1:f02a9f2:         updateHistory.setInt(1, accountId);
1:f02a9f2:         updateHistory.setInt(2, tellerId);
1:f02a9f2:         updateHistory.setInt(3, branchId);
1:f02a9f2:         updateHistory.setInt(4, delta);
1:f02a9f2:         updateHistory.executeUpdate();
1:f02a9f2: 
1:f02a9f2:         // Update the teller balance
1:f02a9f2:         updateTeller.setInt(1, delta);
1:f02a9f2:         updateTeller.setInt(2, tellerId);
1:f02a9f2:         updateTeller.executeUpdate();
1:f02a9f2: 
1:f02a9f2:         // Update the branch balance
1:f02a9f2:         updateBranch.setInt(1, delta);
1:f02a9f2:         updateBranch.setInt(2, branchId);
1:f02a9f2:         updateBranch.executeUpdate();
1:f02a9f2: 
1:f02a9f2:         // Retrieve the balance
1:f02a9f2:         retrieveAccountBalance.setInt(1, accountId);
1:f02a9f2:         ResultSet rs = retrieveAccountBalance.executeQuery();
1:f02a9f2:         rs.next();
1:f02a9f2:         rs.getString(1);
1:f02a9f2:         rs.close();
1:f02a9f2:         conn.commit();
1:f02a9f2:     }
1:f02a9f2: 
1:9a05e65:     public void printReport(PrintStream out) {}
1:9a05e65:     
1:f02a9f2:     /**
1:f02a9f2:      * Generate a random teller id.
1:f02a9f2:      */
1:f02a9f2:     private int fetchTellerId() {
1:f02a9f2:         return random.nextInt(tellersPerBranch * branches);
1:f02a9f2:     }
1:f02a9f2: 
1:f02a9f2:     /**
1:f02a9f2:      * Find the branch the specified teller belongs to.
1:f02a9f2:      *
1:f02a9f2:      * @param tellerId the id of the teller
1:f02a9f2:      * @return the id of the branch for this teller
1:f02a9f2:      */
1:f02a9f2:     private int fetchBranchId(int tellerId) {
1:f02a9f2:         return tellerId / tellersPerBranch;
1:f02a9f2:     }
1:f02a9f2: 
1:f02a9f2:     /**
1:f02a9f2:      * Generate a random account id based on the specified branch. Per Clause
1:f02a9f2:      * 5.3.5 of the TPC-B specification, the accounts should be fetched from
1:f02a9f2:      * the selected branch 85% of the time (or always if that's the only
1:f02a9f2:      * branch), and from another branch the rest of the time.
1:f02a9f2:      *
1:f02a9f2:      * @param branchId the id of the selected branch
1:f02a9f2:      * @return the id of a random account
1:f02a9f2:      */
1:f02a9f2:     private int fetchAccountId(int branchId) {
1:f02a9f2:         int branch;
1:f02a9f2:         if (branches == 1 || random.nextFloat() < 0.85f) {
1:f02a9f2:             // pick an account in the same branch
1:f02a9f2:             branch = branchId;
1:f02a9f2:         } else {
1:f02a9f2:             // pick an account in one of the other branches
1:f02a9f2:             branch = random.nextInt(branches - 1);
1:f02a9f2:             if (branch >= branchId) {
1:f02a9f2:                 branch++;
1:f02a9f2:             }
1:f02a9f2:         }
1:f02a9f2:         // select a random account in the selected branch
1:f02a9f2:         return branch * accountsPerBranch + random.nextInt(accountsPerBranch);
1:f02a9f2:     }
1:f02a9f2: 
1:f02a9f2:     /**
1:f02a9f2:      * Generate a random delta value between -99999 and +99999, both inclusive
1:f02a9f2:      * (TPC-B specification, Clause 5.3.6). The delta value specifies how much
1:f02a9f2:      * the balance should increase or decrease.
1:f02a9f2:      *
1:f02a9f2:      * @return a random value in the range [-99999,+99999]
1:f02a9f2:      */
1:f02a9f2:     private int fetchDelta() {
1:f02a9f2:         return random.nextInt(199999) - 99999; // [-99999,+99999]
1:f02a9f2:     }
1:f02a9f2: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9a05e65
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintStream;
/////////////////////////////////////////////////////////////////////////
1:     public void printReport(PrintStream out) {}
1:     
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f02a9f2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.clients.BankTransactionClient
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.perf.clients;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.util.Random;
1: 
1: /**
1:  * This class implements a client thread which performs bank transactions. The
1:  * transactions are intended to perform the same operations as the transactions
1:  * specified by the TPC-B benchmark.
1:  */
1: public class BankTransactionClient implements Client {
1: 
1:     /** Random number generator. */
1:     private final Random random = new Random();
1: 
1:     /** The number of branches in the database. */
1:     private final int branches;
1:     /** The number of tellers per branch. */
1:     private final int tellersPerBranch;
1:     /** The number of accounts per branch. */
1:     private final int accountsPerBranch;
1: 
1:     /** The connection on which the operations are performed. */
1:     private Connection conn;
1:     /** Statement that updates the balance of the account. */
1:     private PreparedStatement updateAccount;
1:     /** Statement that updated the history table. */
1:     private PreparedStatement updateHistory;
1:     /** Statement that updates the balance of the teller. */
1:     private PreparedStatement updateTeller;
1:     /** Statement that updated the balance of the branch. */
1:     private PreparedStatement updateBranch;
1:     /** Statement that retrieves the current account balance. */
1:     private PreparedStatement retrieveAccountBalance;
1: 
1:     /**
1:      * Create a client that works on a database with the given number of
1:      * branches, tellers and accounts.
1:      *
1:      * @param branches the number of branches in the database
1:      * @param tellersPerBranch the number of tellers per branch
1:      * @param accountsPerBranch the number of accounts per branch
1:      */
1:     public BankTransactionClient(int branches, int tellersPerBranch,
1:                                  int accountsPerBranch) {
1:         if (branches <= 0 || tellersPerBranch <= 0 || accountsPerBranch <= 0) {
1:             throw new IllegalArgumentException(
1:                 "all arguments must be greater than 0");
1:         }
1:         this.branches = branches;
1:         this.tellersPerBranch = tellersPerBranch;
1:         this.accountsPerBranch = accountsPerBranch;
1:     }
1: 
1:     /**
1:      * Create a client that works on a database with the default number of
1:      * tellers and accounts per branch.
1:      *
1:      * @param scale the scale factor for the database (equal to the number of
1:      * branches)
1:      *
1:      * @see BankAccountFiller#BankAccountFiller(int)
1:      */
1:     public BankTransactionClient(int scale) {
1:         this(scale,
1:              BankAccountFiller.DEFAULT_TELLERS_PER_BRANCH,
1:              BankAccountFiller.DEFAULT_ACCOUNTS_PER_BRANCH);
1:     }
1: 
1:     /**
1:      * Initialize the connection and the statements used by the test.
1:      */
1:     public void init(Connection c) throws SQLException {
1:         conn = c;
1:         c.setAutoCommit(false);
1: 
1:         updateAccount = c.prepareStatement(
1:             "UPDATE " + BankAccountFiller.ACCOUNT_TABLE +
1:             " SET ACCOUNT_BALANCE = ACCOUNT_BALANCE + ? WHERE ACCOUNT_ID = ?");
1: 
1:         updateHistory = c.prepareStatement(
1:             "INSERT INTO " + BankAccountFiller.HISTORY_TABLE +
1:             "(ACCOUNT_ID, TELLER_ID, BRANCH_ID, AMOUNT, TIME_STAMP, " +
1:             "EXTRA_DATA) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, '" +
1:             BankAccountFiller.createJunk(BankAccountFiller.HISTORY_EXTRA) +
1:             "')");
1: 
1:         updateTeller = c.prepareStatement(
1:             "UPDATE " + BankAccountFiller.TELLER_TABLE +
1:             " SET TELLER_BALANCE = TELLER_BALANCE + ? WHERE TELLER_ID = ?");
1: 
1:         updateBranch = c.prepareStatement(
1:             "UPDATE " + BankAccountFiller.BRANCH_TABLE +
1:             " SET BRANCH_BALANCE = BRANCH_BALANCE + ? WHERE BRANCH_ID = ?");
1: 
1:         retrieveAccountBalance = c.prepareStatement(
1:             "SELECT ACCOUNT_BALANCE FROM " + BankAccountFiller.ACCOUNT_TABLE +
1:             " WHERE ACCOUNT_ID = ?");
1:     }
1: 
1:     /**
1:      * Perform a single transaction with a profile like the one specified in
1:      * Clause 1.2 of the TPC-B specification.
1:      */
1:     public void doWork() throws SQLException {
1: 
1:         // Get the transaction input
1:         final int tellerId = fetchTellerId();
1:         final int branchId = fetchBranchId(tellerId);
1:         final int accountId = fetchAccountId(branchId);
1:         final int delta = fetchDelta();
1: 
1:         // Update the account balance
1:         updateAccount.setInt(1, delta);
1:         updateAccount.setInt(2, accountId);
1:         updateAccount.executeUpdate();
1: 
1:         // Add a transaction log entry
1:         updateHistory.setInt(1, accountId);
1:         updateHistory.setInt(2, tellerId);
1:         updateHistory.setInt(3, branchId);
1:         updateHistory.setInt(4, delta);
1:         updateHistory.executeUpdate();
1: 
1:         // Update the teller balance
1:         updateTeller.setInt(1, delta);
1:         updateTeller.setInt(2, tellerId);
1:         updateTeller.executeUpdate();
1: 
1:         // Update the branch balance
1:         updateBranch.setInt(1, delta);
1:         updateBranch.setInt(2, branchId);
1:         updateBranch.executeUpdate();
1: 
1:         // Retrieve the balance
1:         retrieveAccountBalance.setInt(1, accountId);
1:         ResultSet rs = retrieveAccountBalance.executeQuery();
1:         rs.next();
1:         rs.getString(1);
1:         rs.close();
1:         conn.commit();
1:     }
1: 
1:     /**
1:      * Generate a random teller id.
1:      */
1:     private int fetchTellerId() {
1:         return random.nextInt(tellersPerBranch * branches);
1:     }
1: 
1:     /**
1:      * Find the branch the specified teller belongs to.
1:      *
1:      * @param tellerId the id of the teller
1:      * @return the id of the branch for this teller
1:      */
1:     private int fetchBranchId(int tellerId) {
1:         return tellerId / tellersPerBranch;
1:     }
1: 
1:     /**
1:      * Generate a random account id based on the specified branch. Per Clause
1:      * 5.3.5 of the TPC-B specification, the accounts should be fetched from
1:      * the selected branch 85% of the time (or always if that's the only
1:      * branch), and from another branch the rest of the time.
1:      *
1:      * @param branchId the id of the selected branch
1:      * @return the id of a random account
1:      */
1:     private int fetchAccountId(int branchId) {
1:         int branch;
1:         if (branches == 1 || random.nextFloat() < 0.85f) {
1:             // pick an account in the same branch
1:             branch = branchId;
1:         } else {
1:             // pick an account in one of the other branches
1:             branch = random.nextInt(branches - 1);
1:             if (branch >= branchId) {
1:                 branch++;
1:             }
1:         }
1:         // select a random account in the selected branch
1:         return branch * accountsPerBranch + random.nextInt(accountsPerBranch);
1:     }
1: 
1:     /**
1:      * Generate a random delta value between -99999 and +99999, both inclusive
1:      * (TPC-B specification, Clause 5.3.6). The delta value specifies how much
1:      * the balance should increase or decrease.
1:      *
1:      * @return a random value in the range [-99999,+99999]
1:      */
1:     private int fetchDelta() {
1:         return random.nextInt(199999) - 99999; // [-99999,+99999]
1:     }
1: }
============================================================================