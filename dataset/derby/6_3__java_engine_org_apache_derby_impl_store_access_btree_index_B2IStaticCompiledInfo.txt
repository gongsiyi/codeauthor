1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree.index;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.ArrayInputStream;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: This class implements the static compiled information relevant to a btree
1:eac0369: secondary index.  It is what is returned by 
1:eac0369: B2I.getStaticCompiledOpenConglomInfo().
1:eac0369: <p>
1:eac0369: Currently the only interesting information stored is Conglomerate for this
1:eac0369: index and the Conglomerate for the base table of this conglomerate.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public class B2IStaticCompiledInfo implements StaticCompiledOpenConglomInfo
1:eac0369: {
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Fields of the class 
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Conglomerate data structure for this index.
1:eac0369:      **/
1:eac0369:     B2I b2i;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Conglomerate data structure for this base table of this index.
1:eac0369:      **/
1:eac0369:     StaticCompiledOpenConglomInfo   base_table_static_info;
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Empty arg constructor used by the monitor to create object to read into.
1:eac0369:      **/
1:eac0369:     public B2IStaticCompiledInfo()
1:eac0369:     {
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Constructor used to build class from scratch.
1:eac0369:      * <p>
1:eac0369:      * @param b2i    the btree Conglomerate that we are compiling.
1:eac0369:      **/
1:eac0369:     B2IStaticCompiledInfo(
1:eac0369:     TransactionController   tc,
1:eac0369:     B2I                     b2i) 
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         this.b2i = b2i;
1:eac0369: 
1:eac0369:         this.base_table_static_info = 
1:eac0369:             tc.getStaticCompiledConglomInfo(b2i.baseConglomerateId);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Private/Protected methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of StaticCompiledOpenConglomInfo Interface:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:06dbbcf:      * return the "Conglomerate".
1:eac0369:      * <p>
1:eac0369:      * For secondaryindex compiled info return the secondary index conglomerate.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return the secondary index Conglomerate Object.
1:eac0369:      **/
1:eac0369:     public DataValueDescriptor getConglom()
1:eac0369:     {
1:eac0369:         return(b2i);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of Storable Interface (via StaticCompiledOpenConglomInfo):
1:eac0369:      *     This class is responsible for re/storing its own state.
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Return whether the value is null or not.
1:eac0369: 	The containerid being zero is what determines nullness;  subclasses
1:eac0369: 	are not expected to override this method.
1:eac0369: 	@see org.apache.derby.iapi.services.io.Storable#isNull
1:eac0369: 	**/
1:eac0369: 	public boolean isNull()
1:eac0369: 	{
1:eac0369: 		return(b2i == null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Restore the in-memory representation to the null value.
1:eac0369: 	The containerid being zero is what determines nullness;  subclasses
1:eac0369: 	are not expected to override this method.
1:eac0369: 
1:eac0369: 	@see org.apache.derby.iapi.services.io.Storable#restoreToNull
1:eac0369: 	**/
1:eac0369: 	public void restoreToNull()
1:eac0369: 	{
1:eac0369: 		b2i = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return my format identifier.
1:eac0369:      *
1:eac0369:      * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:eac0369:      **/
1:eac0369: 	public int getTypeFormatId()
1:eac0369:     {
1:eac0369: 		return StoredFormatIds.ACCESS_B2I_STATIC_COMPILED_V1_ID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Restore the in-memory representation from the stream.
1:eac0369: 
1:eac0369: 	@exception ClassNotFoundException Thrown if the stored representation is
1:eac0369: 	serialized and a class named in the stream could not be found.
1:eac0369: 
1:eac0369:     @exception IOException thrown by readObject()
1:eac0369: 
1:eac0369: 	
1:eac0369: 	@see java.io.Externalizable#readExternal
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369:         throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369:         // read in the B2I
1:eac0369:         b2i = new B2I();
1:eac0369:         b2i.readExternal(in);
1:eac0369: 
1:eac0369:         // read in base table conglomerate
1:eac0369:         base_table_static_info = 
1:eac0369:             (StaticCompiledOpenConglomInfo) in.readObject();
1:eac0369: 	}
1:eac0369: 	public void readExternalFromArray(ArrayInputStream in) 
1:eac0369:         throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369:         // read in the B2I
1:eac0369:         b2i = new B2I();
1:eac0369:         b2i.readExternal(in);
1:eac0369: 
1:eac0369:         // read in base table conglomerate
1:eac0369:         base_table_static_info = 
1:eac0369:             (StaticCompiledOpenConglomInfo) in.readObject();
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	Store the stored representation of the column value in the stream.
1:eac0369: 	It might be easier to simply store the properties - which would certainly
1:eac0369: 	make upgrading easier.
1:eac0369: 
1:eac0369:     @exception IOException thrown by writeObject()
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public void writeExternal(ObjectOutput out) 
1:eac0369:         throws IOException
1:eac0369:     {
1:eac0369:         // first write the B2I object (the type we "know")
1:eac0369:         b2i.writeExternal(out);
1:eac0369: 
1:eac0369:         // write Conglomerate object as an object
1:eac0369:         out.writeObject(base_table_static_info);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:06dbbcf
/////////////////////////////////////////////////////////////////////////
1:      * return the "Conglomerate".
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree.index;
1: 
1: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds; 
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
1: 
1: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: 
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: /**
1: 
1: This class implements the static compiled information relevant to a btree
1: secondary index.  It is what is returned by 
1: B2I.getStaticCompiledOpenConglomInfo().
1: <p>
1: Currently the only interesting information stored is Conglomerate for this
1: index and the Conglomerate for the base table of this conglomerate.
1: 
1: **/
1: 
1: public class B2IStaticCompiledInfo implements StaticCompiledOpenConglomInfo
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1:     /**************************************************************************
1:      * Fields of the class 
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Conglomerate data structure for this index.
1:      **/
1:     B2I b2i;
1: 
1:     /**
1:      * Conglomerate data structure for this base table of this index.
1:      **/
1:     StaticCompiledOpenConglomInfo   base_table_static_info;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Empty arg constructor used by the monitor to create object to read into.
1:      **/
1:     public B2IStaticCompiledInfo()
1:     {
1:     }
1: 
1:     /**
1:      * Constructor used to build class from scratch.
1:      * <p>
1:      * @param b2i    the btree Conglomerate that we are compiling.
1:      **/
1:     B2IStaticCompiledInfo(
1:     TransactionController   tc,
1:     B2I                     b2i) 
1:         throws StandardException
1:     {
1:         this.b2i = b2i;
1: 
1:         this.base_table_static_info = 
1:             tc.getStaticCompiledConglomInfo(b2i.baseConglomerateId);
1:     }
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of StaticCompiledOpenConglomInfo Interface:
1:      **************************************************************************
1:      */
1: 
1:     /**
0:      * return the "Conglomerate"
1:      * <p>
1:      * For secondaryindex compiled info return the secondary index conglomerate.
1:      * <p>
1:      *
1: 	 * @return the secondary index Conglomerate Object.
1:      **/
1:     public DataValueDescriptor getConglom()
1:     {
1:         return(b2i);
1:     }
1: 
1:     /**************************************************************************
1:      * Public Methods of Storable Interface (via StaticCompiledOpenConglomInfo):
1:      *     This class is responsible for re/storing its own state.
1:      **************************************************************************
1:      */
1: 
1: 
1: 	/**
1: 	Return whether the value is null or not.
1: 	The containerid being zero is what determines nullness;  subclasses
1: 	are not expected to override this method.
1: 	@see org.apache.derby.iapi.services.io.Storable#isNull
1: 	**/
1: 	public boolean isNull()
1: 	{
1: 		return(b2i == null);
1: 	}
1: 
1: 	/**
1: 	Restore the in-memory representation to the null value.
1: 	The containerid being zero is what determines nullness;  subclasses
1: 	are not expected to override this method.
1: 
1: 	@see org.apache.derby.iapi.services.io.Storable#restoreToNull
1: 	**/
1: 	public void restoreToNull()
1: 	{
1: 		b2i = null;
1: 	}
1: 
1:     /**
1:      * Return my format identifier.
1:      *
1:      * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:      **/
1: 	public int getTypeFormatId()
1:     {
1: 		return StoredFormatIds.ACCESS_B2I_STATIC_COMPILED_V1_ID;
1: 	}
1: 
1: 	/**
1: 	Restore the in-memory representation from the stream.
1: 
1: 	@exception ClassNotFoundException Thrown if the stored representation is
1: 	serialized and a class named in the stream could not be found.
1: 
1:     @exception IOException thrown by readObject()
1: 
1: 	
1: 	@see java.io.Externalizable#readExternal
1: 	*/
1: 	public void readExternal(ObjectInput in) 
1:         throws IOException, ClassNotFoundException
1: 	{
1:         // read in the B2I
1:         b2i = new B2I();
1:         b2i.readExternal(in);
1: 
1:         // read in base table conglomerate
1:         base_table_static_info = 
1:             (StaticCompiledOpenConglomInfo) in.readObject();
1: 	}
1: 	public void readExternalFromArray(ArrayInputStream in) 
1:         throws IOException, ClassNotFoundException
1: 	{
1:         // read in the B2I
1:         b2i = new B2I();
1:         b2i.readExternal(in);
1: 
1:         // read in base table conglomerate
1:         base_table_static_info = 
1:             (StaticCompiledOpenConglomInfo) in.readObject();
1: 	}
1: 	
1: 	/**
1: 	Store the stored representation of the column value in the stream.
1: 	It might be easier to simply store the properties - which would certainly
1: 	make upgrading easier.
1: 
1:     @exception IOException thrown by writeObject()
1: 
1: 	*/
1: 	public void writeExternal(ObjectOutput out) 
1:         throws IOException
1:     {
1:         // first write the B2I object (the type we "know")
1:         b2i.writeExternal(out);
1: 
1:         // write Conglomerate object as an object
1:         out.writeObject(base_table_static_info);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree.index
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree.index;
0: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds; 
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
0: 
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: 
0: import java.io.IOException;
0: import java.io.ObjectInput;
0: import java.io.ObjectOutput;
0: 
0: /**
0: 
0: This class implements the static compiled information relevant to a btree
0: secondary index.  It is what is returned by 
0: B2I.getStaticCompiledOpenConglomInfo().
0: <p>
0: Currently the only interesting information stored is Conglomerate for this
0: index and the Conglomerate for the base table of this conglomerate.
0: 
0: **/
0: 
0: public class B2IStaticCompiledInfo implements StaticCompiledOpenConglomInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0:     /**************************************************************************
0:      * Fields of the class 
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Conglomerate data structure for this index.
0:      **/
0:     B2I b2i;
0: 
0:     /**
0:      * Conglomerate data structure for this base table of this index.
0:      **/
0:     StaticCompiledOpenConglomInfo   base_table_static_info;
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Empty arg constructor used by the monitor to create object to read into.
0:      **/
0:     public B2IStaticCompiledInfo()
0:     {
0:     }
0: 
0:     /**
0:      * Constructor used to build class from scratch.
0:      * <p>
0:      * @param b2i    the btree Conglomerate that we are compiling.
0:      **/
0:     B2IStaticCompiledInfo(
0:     TransactionController   tc,
0:     B2I                     b2i) 
0:         throws StandardException
0:     {
0:         this.b2i = b2i;
0: 
0:         this.base_table_static_info = 
0:             tc.getStaticCompiledConglomInfo(b2i.baseConglomerateId);
0:     }
0: 
0:     /**************************************************************************
0:      * Private/Protected methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Public Methods of StaticCompiledOpenConglomInfo Interface:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * return the "Conglomerate"
0:      * <p>
0:      * For secondaryindex compiled info return the secondary index conglomerate.
0:      * <p>
0:      *
0: 	 * @return the secondary index Conglomerate Object.
0:      **/
0:     public DataValueDescriptor getConglom()
0:     {
0:         return(b2i);
0:     }
0: 
0:     /**************************************************************************
0:      * Public Methods of Storable Interface (via StaticCompiledOpenConglomInfo):
0:      *     This class is responsible for re/storing its own state.
0:      **************************************************************************
0:      */
0: 
0: 
0: 	/**
0: 	Return whether the value is null or not.
0: 	The containerid being zero is what determines nullness;  subclasses
0: 	are not expected to override this method.
0: 	@see org.apache.derby.iapi.services.io.Storable#isNull
0: 	**/
0: 	public boolean isNull()
0: 	{
0: 		return(b2i == null);
0: 	}
0: 
0: 	/**
0: 	Restore the in-memory representation to the null value.
0: 	The containerid being zero is what determines nullness;  subclasses
0: 	are not expected to override this method.
0: 
0: 	@see org.apache.derby.iapi.services.io.Storable#restoreToNull
0: 	**/
0: 	public void restoreToNull()
0: 	{
0: 		b2i = null;
0: 	}
0: 
0:     /**
0:      * Return my format identifier.
0:      *
0:      * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
0:      **/
0: 	public int getTypeFormatId()
0:     {
0: 		return StoredFormatIds.ACCESS_B2I_STATIC_COMPILED_V1_ID;
0: 	}
0: 
0: 	/**
0: 	Restore the in-memory representation from the stream.
0: 
0: 	@exception ClassNotFoundException Thrown if the stored representation is
0: 	serialized and a class named in the stream could not be found.
0: 
0:     @exception IOException thrown by readObject()
0: 
0: 	
0: 	@see java.io.Externalizable#readExternal
0: 	*/
0: 	public void readExternal(ObjectInput in) 
0:         throws IOException, ClassNotFoundException
0: 	{
0:         // read in the B2I
0:         b2i = new B2I();
0:         b2i.readExternal(in);
0: 
0:         // read in base table conglomerate
0:         base_table_static_info = 
0:             (StaticCompiledOpenConglomInfo) in.readObject();
0: 	}
0: 	public void readExternalFromArray(ArrayInputStream in) 
0:         throws IOException, ClassNotFoundException
0: 	{
0:         // read in the B2I
0:         b2i = new B2I();
0:         b2i.readExternal(in);
0: 
0:         // read in base table conglomerate
0:         base_table_static_info = 
0:             (StaticCompiledOpenConglomInfo) in.readObject();
0: 	}
0: 	
0: 	/**
0: 	Store the stored representation of the column value in the stream.
0: 	It might be easier to simply store the properties - which would certainly
0: 	make upgrading easier.
0: 
0:     @exception IOException thrown by writeObject()
0: 
0: 	*/
0: 	public void writeExternal(ObjectOutput out) 
0:         throws IOException
0:     {
0:         // first write the B2I object (the type we "know")
0:         b2i.writeExternal(out);
0: 
0:         // write Conglomerate object as an object
0:         out.writeObject(base_table_static_info);
0: 	}
0: }
============================================================================