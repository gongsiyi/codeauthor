1:eac0369: /*
5:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.DTSClassInfo
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableInstanceGetter;
1:eac0369: 
1:eac0369: public class DTSClassInfo extends FormatableInstanceGetter {
1:e11914a: 
1:eac0369:         public Object getNewInstance() {
1:e11914a:         	
1:57cb998:         	//The format id for DVDs are handled first.  
1:57cb998:         	Object returnObject = DataValueFactoryImpl.getNullDVDWithUCS_BASICcollation(fmtId);
1:b260d95:         	return returnObject;
1:b260d95: 
1:eac0369: 
2:eac0369:         }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5465561
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b260d95
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         	return returnObject;
1: 
commit:e11914a
/////////////////////////////////////////////////////////////////////////
1:         	
1:         	
0:         		// Does not handle StoredFormatIds.SQL_DECIMAL_ID as
0:         		// different implementations are required for different VMs.
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.DTSClassInfo
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.FormatableInstanceGetter;
1: 
1: public class DTSClassInfo extends FormatableInstanceGetter {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1:         public Object getNewInstance() {
1: 
0:                 switch (fmtId) {
0:                 /* Wrappers */
0:                 case StoredFormatIds.SQL_BIT_ID: return new SQLBit();
0:                 case StoredFormatIds.SQL_BOOLEAN_ID: return new SQLBoolean();
0:                 case StoredFormatIds.SQL_CHAR_ID: return new SQLChar();
0:                 case StoredFormatIds.SQL_DATE_ID: return new SQLDate();
0:                 case StoredFormatIds.SQL_DECIMAL_ID: return new SQLDecimal();
0:                 case StoredFormatIds.SQL_DOUBLE_ID: return new SQLDouble();
0:                 case StoredFormatIds.SQL_INTEGER_ID: return new SQLInteger();
0:                 case StoredFormatIds.SQL_LONGINT_ID: return new SQLLongint();
0:                 case StoredFormatIds.SQL_NATIONAL_CHAR_ID: return new SQLNationalChar();
0:                 case StoredFormatIds.SQL_NATIONAL_LONGVARCHAR_ID: return new SQLNationalLongvarchar();
0:                 case StoredFormatIds.SQL_NATIONAL_VARCHAR_ID: return new SQLNationalVarchar();
0:                 case StoredFormatIds.SQL_REAL_ID: return new SQLReal();
0:                 case StoredFormatIds.SQL_REF_ID: return new SQLRef();
0:                 case StoredFormatIds.SQL_SMALLINT_ID: return new SQLSmallint();
0:                 case StoredFormatIds.SQL_TIME_ID: return new SQLTime();
0:                 case StoredFormatIds.SQL_TIMESTAMP_ID: return new SQLTimestamp();
0:                 case StoredFormatIds.SQL_TINYINT_ID: return new SQLTinyint();
0:                 case StoredFormatIds.SQL_VARCHAR_ID: return new SQLVarchar();
0:                 case StoredFormatIds.SQL_LONGVARCHAR_ID: return new SQLLongvarchar();
0:                 case StoredFormatIds.SQL_VARBIT_ID: return new SQLVarbit();
0:                 case StoredFormatIds.SQL_LONGVARBIT_ID: return new SQLLongVarbit();
0:                 case StoredFormatIds.SQL_USERTYPE_ID_V3: return new UserType();
0:                 case StoredFormatIds.SQL_BLOB_ID: return new SQLBlob();
0:                 case StoredFormatIds.SQL_CLOB_ID: return new SQLClob();
0:                 case StoredFormatIds.SQL_NCLOB_ID: return new SQLNClob();
1: 
0:                 /* Type ids */
0:                 case StoredFormatIds.BIT_TYPE_ID: 
0:                 case StoredFormatIds.BOOLEAN_TYPE_ID: 
0:                 case StoredFormatIds.CHAR_TYPE_ID: 
0:                 case StoredFormatIds.DATE_TYPE_ID: 
0:                 case StoredFormatIds.DECIMAL_TYPE_ID: 
0:                 case StoredFormatIds.DOUBLE_TYPE_ID: 
0:                 case StoredFormatIds.INT_TYPE_ID: 
0:                 case StoredFormatIds.LONGINT_TYPE_ID: 
0:                 case StoredFormatIds.LONGVARBIT_TYPE_ID: 
0:                 case StoredFormatIds.LONGVARCHAR_TYPE_ID: 
0:                 case StoredFormatIds.NATIONAL_CHAR_TYPE_ID: 
0:                 case StoredFormatIds.NATIONAL_LONGVARCHAR_TYPE_ID: 
0:                 case StoredFormatIds.NATIONAL_VARCHAR_TYPE_ID: 
0:                 case StoredFormatIds.REAL_TYPE_ID: 
0:                 case StoredFormatIds.REF_TYPE_ID: 
0:                 case StoredFormatIds.SMALLINT_TYPE_ID: 
0:                 case StoredFormatIds.TIME_TYPE_ID: 
0:                 case StoredFormatIds.TIMESTAMP_TYPE_ID: 
0:                 case StoredFormatIds.TINYINT_TYPE_ID: 
0:                 case StoredFormatIds.USERDEFINED_TYPE_ID_V3: 
0:                 case StoredFormatIds.VARBIT_TYPE_ID: 
0:                 case StoredFormatIds.VARCHAR_TYPE_ID: 
0:                 case StoredFormatIds.BLOB_TYPE_ID:
0:                 case StoredFormatIds.CLOB_TYPE_ID:
0:                 case StoredFormatIds.NCLOB_TYPE_ID:
0:                         return new TypeId(fmtId);
0:                 default:
0:                         return null;
1:                 }
1: 
1:         }
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:111785f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:57cb998
/////////////////////////////////////////////////////////////////////////
0:         	// Does not handle StoredFormatIds.SQL_DECIMAL_ID as different
0:         	// implementations are required for different VMs.
1:         	//The format id for DVDs are handled first.  
1:         	Object returnObject = DataValueFactoryImpl.getNullDVDWithUCS_BASICcollation(fmtId);
0:         	if (returnObject != null) return returnObject;
0:         	//If we are still here, then it means that we are not working with
0:         	//format id for DVD. Handle the other format ids in following code.
0:         	switch (fmtId) {        	
commit:3a2db6b
/////////////////////////////////////////////////////////////////////////
commit:219004d
/////////////////////////////////////////////////////////////////////////
0:                 	return new CollatorSQLChar();
commit:d0ed190
/////////////////////////////////////////////////////////////////////////
0:                 case StoredFormatIds.SQL_CHAR_WITH_NON_DEFAULT_COLLATION_ID: 
0:                 	return new SQLCharWithNonDefaultCollation();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4aef9b0
/////////////////////////////////////////////////////////////////////////
0:                 case StoredFormatIds.ROW_MULTISET_CATALOG_ID:
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:099e28f
/////////////////////////////////////////////////////////////////////////
0:                 case StoredFormatIds.XML_ID: return new XML();
/////////////////////////////////////////////////////////////////////////
0:                 case StoredFormatIds.XML_TYPE_ID:
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatableInstanceGetter;
0: 
0: public class DTSClassInfo extends FormatableInstanceGetter {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0:         public Object getNewInstance() {
0: 
0:                 switch (fmtId) {
0:                 /* Wrappers */
0:                 case StoredFormatIds.SQL_BIT_ID: return new SQLBit();
0:                 case StoredFormatIds.SQL_BOOLEAN_ID: return new SQLBoolean();
0:                 case StoredFormatIds.SQL_CHAR_ID: return new SQLChar();
0:                 case StoredFormatIds.SQL_DATE_ID: return new SQLDate();
0:                 case StoredFormatIds.SQL_DECIMAL_ID: return new SQLDecimal();
0:                 case StoredFormatIds.SQL_DOUBLE_ID: return new SQLDouble();
0:                 case StoredFormatIds.SQL_INTEGER_ID: return new SQLInteger();
0:                 case StoredFormatIds.SQL_LONGINT_ID: return new SQLLongint();
0:                 case StoredFormatIds.SQL_NATIONAL_CHAR_ID: return new SQLNationalChar();
0:                 case StoredFormatIds.SQL_NATIONAL_LONGVARCHAR_ID: return new SQLNationalLongvarchar();
0:                 case StoredFormatIds.SQL_NATIONAL_VARCHAR_ID: return new SQLNationalVarchar();
0:                 case StoredFormatIds.SQL_REAL_ID: return new SQLReal();
0:                 case StoredFormatIds.SQL_REF_ID: return new SQLRef();
0:                 case StoredFormatIds.SQL_SMALLINT_ID: return new SQLSmallint();
0:                 case StoredFormatIds.SQL_TIME_ID: return new SQLTime();
0:                 case StoredFormatIds.SQL_TIMESTAMP_ID: return new SQLTimestamp();
0:                 case StoredFormatIds.SQL_TINYINT_ID: return new SQLTinyint();
0:                 case StoredFormatIds.SQL_VARCHAR_ID: return new SQLVarchar();
0:                 case StoredFormatIds.SQL_LONGVARCHAR_ID: return new SQLLongvarchar();
0:                 case StoredFormatIds.SQL_VARBIT_ID: return new SQLVarbit();
0:                 case StoredFormatIds.SQL_LONGVARBIT_ID: return new SQLLongVarbit();
0:                 case StoredFormatIds.SQL_USERTYPE_ID_V3: return new UserType();
0:                 case StoredFormatIds.SQL_BLOB_ID: return new SQLBlob();
0:                 case StoredFormatIds.SQL_CLOB_ID: return new SQLClob();
0:                 case StoredFormatIds.SQL_NCLOB_ID: return new SQLNClob();
0: 
0:                 /* Type ids */
0:                 case StoredFormatIds.BIT_TYPE_ID: 
0:                 case StoredFormatIds.BOOLEAN_TYPE_ID: 
0:                 case StoredFormatIds.CHAR_TYPE_ID: 
0:                 case StoredFormatIds.DATE_TYPE_ID: 
0:                 case StoredFormatIds.DECIMAL_TYPE_ID: 
0:                 case StoredFormatIds.DOUBLE_TYPE_ID: 
0:                 case StoredFormatIds.INT_TYPE_ID: 
0:                 case StoredFormatIds.LONGINT_TYPE_ID: 
0:                 case StoredFormatIds.LONGVARBIT_TYPE_ID: 
0:                 case StoredFormatIds.LONGVARCHAR_TYPE_ID: 
0:                 case StoredFormatIds.NATIONAL_CHAR_TYPE_ID: 
0:                 case StoredFormatIds.NATIONAL_LONGVARCHAR_TYPE_ID: 
0:                 case StoredFormatIds.NATIONAL_VARCHAR_TYPE_ID: 
0:                 case StoredFormatIds.REAL_TYPE_ID: 
0:                 case StoredFormatIds.REF_TYPE_ID: 
0:                 case StoredFormatIds.SMALLINT_TYPE_ID: 
0:                 case StoredFormatIds.TIME_TYPE_ID: 
0:                 case StoredFormatIds.TIMESTAMP_TYPE_ID: 
0:                 case StoredFormatIds.TINYINT_TYPE_ID: 
0:                 case StoredFormatIds.USERDEFINED_TYPE_ID_V3: 
0:                 case StoredFormatIds.VARBIT_TYPE_ID: 
0:                 case StoredFormatIds.VARCHAR_TYPE_ID: 
0:                 case StoredFormatIds.BLOB_TYPE_ID:
0:                 case StoredFormatIds.CLOB_TYPE_ID:
0:                 case StoredFormatIds.NCLOB_TYPE_ID:
0:                         return new TypeId(fmtId);
0:                 default:
0:                         return null;
0:                 }
0: 
0:         }
0: }
============================================================================