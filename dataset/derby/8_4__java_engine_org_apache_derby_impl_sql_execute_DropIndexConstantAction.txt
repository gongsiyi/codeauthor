2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.DropIndexConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.depend.Dependency;
1:eac0369: import org.apache.derby.iapi.sql.depend.Dependent;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import java.util.Enumeration;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This class  describes actions that are ALWAYS performed for a
1:eac0369:  *	DROP INDEX Statement at Execution time.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: class DropIndexConstantAction extends IndexConstantAction
4:eac0369: {
1:eac0369: 
1:eac0369: 	private String				fullIndexName;
1:eac0369: 	private long				tableConglomerateId;
1:eac0369: 
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make the ConstantAction for a DROP INDEX statement.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 *	@param	fullIndexName		Fully qualified index name
1:eac0369: 	 *	@param	indexName			Index name.
1:eac0369: 	 *	@param	tableName			The table name
1:eac0369: 	 *	@param	schemaName			Schema that index lives in.
1:eac0369: 	 *  @param  tableId				UUID for table
1:eac0369: 	 *  @param  tableConglomerateId	heap Conglomerate Id for table
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	DropIndexConstantAction(
1:eac0369: 								String				fullIndexName,
1:eac0369: 								String				indexName,
1:eac0369: 								String				tableName,
1:eac0369: 								String				schemaName,
1:eac0369: 								UUID				tableId,
1:eac0369: 								long				tableConglomerateId)
1:eac0369: 	{
1:eac0369: 		super(tableId, indexName, tableName, schemaName);
1:eac0369: 		this.fullIndexName = fullIndexName;
1:eac0369: 		this.tableConglomerateId = tableConglomerateId;
4:eac0369: 	}
1:eac0369: 
1:eac0369: 	// OBJECT METHODS
1:eac0369: 
1:eac0369: 	public	String	toString()
1:eac0369: 	{
1:eac0369: 		// Do not put this under SanityManager.DEBUG - it is needed for
1:eac0369: 		// error reporting.
1:eac0369: 		return "DROP INDEX " + fullIndexName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	This is the guts of the Execution-time logic for DROP INDEX.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void	executeConstantAction(Activation activation)
2:eac0369: 						throws StandardException
1:eac0369: 	{
1:eac0369: 		TableDescriptor td;
1:eac0369: 		ConglomerateDescriptor cd;
1:eac0369: 
1:eac0369: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:eac0369: 		DataDictionary dd = lcc.getDataDictionary();
1:eac0369: 		TransactionController tc = lcc.getTransactionExecute();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Inform the data dictionary that we are about to write to it.
1:eac0369: 		** There are several calls to data dictionary "get" methods here
1:eac0369: 		** that might be done in "read" mode in the data dictionary, but
1:eac0369: 		** it seemed safer to do this whole operation in "write" mode.
1:eac0369: 		**
1:eac0369: 		** We tell the data dictionary we're done writing at the end of
1:eac0369: 		** the transaction.
1:eac0369: 		*/
1:eac0369: 		dd.startWriting(lcc);
1:eac0369: 
1:eac0369: 		// need to lock heap in exclusive mode first.  Because we can't first
1:eac0369: 		// shared lock the row in SYSCONGLOMERATES and later exclusively lock
1:eac0369: 		// it, this is potential deadlock (track 879).  Also td need to be
1:eac0369: 		// gotten after we get the lock, a concurrent thread could be modifying
1:eac0369: 		// table shape (track 3804, 3825)
1:eac0369: 
1:eac0369: 		// older version (or target) has to get td first, potential deadlock
1:eac0369: 		if (tableConglomerateId == 0)
1:eac0369: 		{
1:eac0369: 			td = dd.getTableDescriptor(tableId);
1:eac0369: 			if (td == null)
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(
1:eac0369: 					SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, tableName);
1:eac0369: 			}
1:eac0369: 			tableConglomerateId = td.getHeapConglomerateId();
1:eac0369: 		}
1:eac0369: 		lockTableForDDL(tc, tableConglomerateId, true);
1:eac0369: 
1:eac0369: 		td = dd.getTableDescriptor(tableId);
1:eac0369: 		if (td == null)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, tableName);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If the schema descriptor is null, then
1:eac0369: 		** we must have just read ourselves in.  
1:eac0369: 		** So we will get the corresponding schema
1:eac0369: 		** descriptor from the data dictionary.
1:eac0369: 		*/
1:eac0369: 		SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, true) ;
1:eac0369: 
1:eac0369: 		/* Get the conglomerate descriptor for the index, along
1:eac0369: 		 * with an exclusive row lock on the row in sys.sysconglomerates
1:eac0369: 		 * in order to ensure that no one else compiles against the
1:eac0369: 		 * index.
1:eac0369: 		 */
1:eac0369: 		cd = dd.getConglomerateDescriptor(indexName, sd, true);
1:eac0369: 
1:eac0369: 		if (cd == null)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_INDEX_NOT_FOUND_DURING_EXECUTION, fullIndexName);
1:eac0369: 		}
1:eac0369: 
1:c437565: 		/* Since we support the sharing of conglomerates across
1:c437565: 		 * multiple indexes, dropping the physical conglomerate
1:c437565: 		 * for the index might affect other indexes/constraints
1:c437565: 		 * which share the conglomerate.  The following call will
1:c437565: 		 * deal with that situation by creating a new physical
1:c437565: 		 * conglomerate to replace the dropped one, if necessary.
1:c437565: 		 */
1:c437565: 		dropConglomerate(cd, td, activation, lcc);
1:c437565: 		return;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Army
-------------------------------------------------------------------------------
commit:c437565
/////////////////////////////////////////////////////////////////////////
1: 		/* Since we support the sharing of conglomerates across
1: 		 * multiple indexes, dropping the physical conglomerate
1: 		 * for the index might affect other indexes/constraints
1: 		 * which share the conglomerate.  The following call will
1: 		 * deal with that situation by creating a new physical
1: 		 * conglomerate to replace the dropped one, if necessary.
1: 		 */
1: 		dropConglomerate(cd, td, activation, lcc);
1: 		return;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:997ee7f
/////////////////////////////////////////////////////////////////////////
commit:1429957
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		cd.drop(lcc, td);
commit:e87a9fd
/////////////////////////////////////////////////////////////////////////
0: 		dropIndex(dm, dd, tc, cd, td, activation.getLanguageConnectionContext());
/////////////////////////////////////////////////////////////////////////
0: 							LanguageConnectionContext lcc)
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.DropIndexConstantAction
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.sql.depend.Dependency;
1: import org.apache.derby.iapi.sql.depend.Dependent;
1: 
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: import java.util.Enumeration;
1: 
1: 
1: /**
1:  *	This class  describes actions that are ALWAYS performed for a
1:  *	DROP INDEX Statement at Execution time.
1:  *
0:  *	@author Jeff Lichtman	Cribbed from DropTableConstantAction
1:  */
1: 
1: class DropIndexConstantAction extends IndexConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	private String				fullIndexName;
1: 	private long				tableConglomerateId;
1: 
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 *	Make the ConstantAction for a DROP INDEX statement.
1: 	 *
1: 	 *
1: 	 *	@param	fullIndexName		Fully qualified index name
1: 	 *	@param	indexName			Index name.
1: 	 *	@param	tableName			The table name
1: 	 *	@param	schemaName			Schema that index lives in.
1: 	 *  @param  tableId				UUID for table
1: 	 *  @param  tableConglomerateId	heap Conglomerate Id for table
1: 	 *
1: 	 */
1: 	DropIndexConstantAction(
1: 								String				fullIndexName,
1: 								String				indexName,
1: 								String				tableName,
1: 								String				schemaName,
1: 								UUID				tableId,
1: 								long				tableConglomerateId)
1: 	{
1: 		super(tableId, indexName, tableName, schemaName);
1: 		this.fullIndexName = fullIndexName;
1: 		this.tableConglomerateId = tableConglomerateId;
1: 	}
1: 
1: 	// OBJECT METHODS
1: 
1: 	public	String	toString()
1: 	{
1: 		// Do not put this under SanityManager.DEBUG - it is needed for
1: 		// error reporting.
1: 		return "DROP INDEX " + fullIndexName;
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for DROP INDEX.
1: 	 *
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction(Activation activation)
1: 						throws StandardException
1: 	{
1: 		TableDescriptor td;
1: 		ConglomerateDescriptor cd;
1: 
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 
1: 		/*
1: 		** Inform the data dictionary that we are about to write to it.
1: 		** There are several calls to data dictionary "get" methods here
1: 		** that might be done in "read" mode in the data dictionary, but
1: 		** it seemed safer to do this whole operation in "write" mode.
1: 		**
1: 		** We tell the data dictionary we're done writing at the end of
1: 		** the transaction.
1: 		*/
1: 		dd.startWriting(lcc);
1: 
1: 		// need to lock heap in exclusive mode first.  Because we can't first
1: 		// shared lock the row in SYSCONGLOMERATES and later exclusively lock
1: 		// it, this is potential deadlock (track 879).  Also td need to be
1: 		// gotten after we get the lock, a concurrent thread could be modifying
1: 		// table shape (track 3804, 3825)
1: 
1: 		// older version (or target) has to get td first, potential deadlock
1: 		if (tableConglomerateId == 0)
1: 		{
1: 			td = dd.getTableDescriptor(tableId);
1: 			if (td == null)
1: 			{
1: 				throw StandardException.newException(
1: 					SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, tableName);
1: 			}
1: 			tableConglomerateId = td.getHeapConglomerateId();
1: 		}
1: 		lockTableForDDL(tc, tableConglomerateId, true);
1: 
1: 		td = dd.getTableDescriptor(tableId);
1: 		if (td == null)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, tableName);
1: 		}
1: 
1: 		/*
1: 		** If the schema descriptor is null, then
1: 		** we must have just read ourselves in.  
1: 		** So we will get the corresponding schema
1: 		** descriptor from the data dictionary.
1: 		*/
1: 		SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, true) ;
1: 
1: 		/* Get the conglomerate descriptor for the index, along
1: 		 * with an exclusive row lock on the row in sys.sysconglomerates
1: 		 * in order to ensure that no one else compiles against the
1: 		 * index.
1: 		 */
1: 		cd = dd.getConglomerateDescriptor(indexName, sd, true);
1: 
1: 		if (cd == null)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_INDEX_NOT_FOUND_DURING_EXECUTION, fullIndexName);
1: 		}
1: 
0: 		/* Prepare all dependents to invalidate.  (This is there chance
0: 		 * to say that they can't be invalidated.)
0: 		 * We check for invalidation before we drop the conglomerate descriptor
0: 		 * since the conglomerate descriptor may be looked up as part of
0: 		 * decoding tuples in SYSDEPENDS.
1: 		 */
0: 		dropIndex(dm, dd, tc, cd, td, activation);
1: 	}
1: 
0: 	public static void dropIndex(DependencyManager 	dm,
0: 							DataDictionary			dd,
0: 							TransactionController	tc,
0: 							ConglomerateDescriptor	cd,
0: 							TableDescriptor			td,
0: 							Activation				act)
1: 		throws StandardException
1: 	{	
0: 		LanguageConnectionContext lcc = act.getLanguageConnectionContext();
0: 		if (SanityManager.DEBUG)
1: 		{
0: 			SanityManager.ASSERT(tc != null, "tc is null");
0: 			SanityManager.ASSERT(cd != null, "cd is null");
1: 		}
1: 
0: 		// only drop the conglomerate if no similar index but with different
0: 		// name. Get from dd in case we drop other dup indexes with a cascade operation
1: 
0: 		if (dd.getConglomerateDescriptors(cd.getConglomerateNumber()).length == 1)
1: 		{
0: 			/* Drop statistics */
0: 			dd.dropStatisticsDescriptors(td.getUUID(), cd.getUUID(), tc);
1: 
0: 			/* Drop the conglomerate */
0: 			tc.dropConglomerate(cd.getConglomerateNumber());
1: 		}
1: 
0: 		// invalidate any prepared statements that
0: 		// depended on the index (including this one)
0: 		dm.invalidateFor(cd, DependencyManager.DROP_INDEX, lcc);
1: 
0: 		/* Drop the conglomerate descriptor */
0: 		dd.dropConglomerateDescriptor(cd, tc);
1: 
1: 		/* 
0: 		** Remove the conglomerate descriptor from the list hanging off of the
0: 		** table descriptor
1: 		*/
0: 		td.removeConglomerateDescriptor(cd);
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:318307e
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.depend.Dependency;
0: import org.apache.derby.iapi.sql.depend.Dependent;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.util.Enumeration;
0: 
0: 
0: /**
0:  *	This class  describes actions that are ALWAYS performed for a
0:  *	DROP INDEX Statement at Execution time.
0:  *
0:  *	@author Jeff Lichtman	Cribbed from DropTableConstantAction
0:  */
0: 
0: class DropIndexConstantAction extends IndexConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private String				fullIndexName;
0: 	private long				tableConglomerateId;
0: 
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 *	Make the ConstantAction for a DROP INDEX statement.
0: 	 *
0: 	 *
0: 	 *	@param	fullIndexName		Fully qualified index name
0: 	 *	@param	indexName			Index name.
0: 	 *	@param	tableName			The table name
0: 	 *	@param	schemaName			Schema that index lives in.
0: 	 *  @param  tableId				UUID for table
0: 	 *  @param  tableConglomerateId	heap Conglomerate Id for table
0: 	 *
0: 	 */
0: 	DropIndexConstantAction(
0: 								String				fullIndexName,
0: 								String				indexName,
0: 								String				tableName,
0: 								String				schemaName,
0: 								UUID				tableId,
0: 								long				tableConglomerateId)
0: 	{
0: 		super(tableId, indexName, tableName, schemaName);
0: 		this.fullIndexName = fullIndexName;
0: 		this.tableConglomerateId = tableConglomerateId;
0: 	}
0: 
0: 	// OBJECT METHODS
0: 
0: 	public	String	toString()
0: 	{
0: 		// Do not put this under SanityManager.DEBUG - it is needed for
0: 		// error reporting.
0: 		return "DROP INDEX " + fullIndexName;
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for DROP INDEX.
0: 	 *
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction(Activation activation)
0: 						throws StandardException
0: 	{
0: 		TableDescriptor td;
0: 		ConglomerateDescriptor cd;
0: 
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 
0: 		/*
0: 		** Inform the data dictionary that we are about to write to it.
0: 		** There are several calls to data dictionary "get" methods here
0: 		** that might be done in "read" mode in the data dictionary, but
0: 		** it seemed safer to do this whole operation in "write" mode.
0: 		**
0: 		** We tell the data dictionary we're done writing at the end of
0: 		** the transaction.
0: 		*/
0: 		dd.startWriting(lcc);
0: 
0: 		// need to lock heap in exclusive mode first.  Because we can't first
0: 		// shared lock the row in SYSCONGLOMERATES and later exclusively lock
0: 		// it, this is potential deadlock (track 879).  Also td need to be
0: 		// gotten after we get the lock, a concurrent thread could be modifying
0: 		// table shape (track 3804, 3825)
0: 
0: 		// older version (or target) has to get td first, potential deadlock
0: 		if (tableConglomerateId == 0)
0: 		{
0: 			td = dd.getTableDescriptor(tableId);
0: 			if (td == null)
0: 			{
0: 				throw StandardException.newException(
0: 					SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, tableName);
0: 			}
0: 			tableConglomerateId = td.getHeapConglomerateId();
0: 		}
0: 		lockTableForDDL(tc, tableConglomerateId, true);
0: 
0: 		td = dd.getTableDescriptor(tableId);
0: 		if (td == null)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND_DURING_EXECUTION, tableName);
0: 		}
0: 
0: 		/*
0: 		** If the schema descriptor is null, then
0: 		** we must have just read ourselves in.  
0: 		** So we will get the corresponding schema
0: 		** descriptor from the data dictionary.
0: 		*/
0: 		SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, true) ;
0: 
0: 		/* Get the conglomerate descriptor for the index, along
0: 		 * with an exclusive row lock on the row in sys.sysconglomerates
0: 		 * in order to ensure that no one else compiles against the
0: 		 * index.
0: 		 */
0: 		cd = dd.getConglomerateDescriptor(indexName, sd, true);
0: 
0: 		if (cd == null)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_INDEX_NOT_FOUND_DURING_EXECUTION, fullIndexName);
0: 		}
0: 
0: 		/* Prepare all dependents to invalidate.  (This is there chance
0: 		 * to say that they can't be invalidated.)
0: 		 * We check for invalidation before we drop the conglomerate descriptor
0: 		 * since the conglomerate descriptor may be looked up as part of
0: 		 * decoding tuples in SYSDEPENDS.
0: 		 */
0: 		dropIndex(dm, dd, tc, cd, td, activation);
0: 	}
0: 
0: 	public static void dropIndex(DependencyManager 	dm,
0: 							DataDictionary			dd,
0: 							TransactionController	tc,
0: 							ConglomerateDescriptor	cd,
0: 							TableDescriptor			td,
0: 							Activation				act)
0: 		throws StandardException
0: 	{	
0: 		LanguageConnectionContext lcc = act.getLanguageConnectionContext();
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(tc != null, "tc is null");
0: 			SanityManager.ASSERT(cd != null, "cd is null");
0: 		}
0: 
0: 		// only drop the conglomerate if no similar index but with different
0: 		// name. Get from dd in case we drop other dup indexes with a cascade operation
0: 
0: 		if (dd.getConglomerateDescriptors(cd.getConglomerateNumber()).length == 1)
0: 		{
0: 			/* Drop statistics */
0: 			dd.dropStatisticsDescriptors(td.getUUID(), cd.getUUID(), tc);
0: 
0: 			/* Drop the conglomerate */
0: 			tc.dropConglomerate(cd.getConglomerateNumber());
0: 		}
0: 
0: 		// invalidate any prepared statements that
0: 		// depended on the index (including this one)
0: 		dm.invalidateFor(cd, DependencyManager.DROP_INDEX, lcc);
0: 
0: 		/* Drop the conglomerate descriptor */
0: 		dd.dropConglomerateDescriptor(cd, tc);
0: 
0: 		/* 
0: 		** Remove the conglomerate descriptor from the list hanging off of the
0: 		** table descriptor
0: 		*/
0: 		td.removeConglomerateDescriptor(cd);
0: 	}
0: 
0: }
============================================================================