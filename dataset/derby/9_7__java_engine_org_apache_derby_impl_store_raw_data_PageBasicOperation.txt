1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.PageBasicOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.RePreparable;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.PageKey;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: import org.apache.derby.iapi.services.property.PropertyUtil;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
2:eac0369: /**
1:eac0369:     A PageBasicOperation changed the content of a page, this is the root class of all
1:eac0369: 	page oriented operation. Each PageBasicOperation record change(s)
1:eac0369: 	that apply to <B>one and only one page</B>.  The pageID that is changed
1:eac0369: 	must be recorded in the log operation - in other words, redo
1:eac0369: 	must be physical (or more correctly, in Gray's term, physiological, since
1:eac0369: 	changes are logical <B>within</B> a page).
1:eac0369: 	<BR>Undo can be logical, but the undo logic must be hidden in
1:eac0369: 	generateUndo. By the time a compensation operation is logged as a
1:eac0369: 	LogOperation, the page that needs roll back must be determined.
1:eac0369: 
1:eac0369: 	<PRE>
1:787ceb4: 	@derby.formatId	no format id, an abstract class.
1:787ceb4: 	@derby.purpose	provide methods for logical undo
1:787ceb4: 	@derby.upgrade
1:787ceb4: 	@derby.diskLayout
1:eac0369: 		pageId(PageKey)			the page this operation applies to
1:eac0369: 		pageVersion(CompressedLong)	the page version this operation applied to
1:eac0369: 		OptionalData	none
1:787ceb4: 	@derby.endFormat
1:eac0369: 	</PRE>
1:eac0369: 
1:eac0369: 	@see Loggable
1:eac0369: */
1:eac0369: 
1:3546404: abstract class PageBasicOperation implements Loggable, RePreparable
1:eac0369: {
1:eac0369: 
1:eac0369: 
1:eac0369: 	/* page info this operation changed */
1:eac0369: 	private PageKey     pageId;
1:eac0369: 	private long        pageVersion;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/* runtime page and data necessary to maintain it */
1:eac0369: 	transient protected BasePage	        page;
1:eac0369: 	transient protected RawContainerHandle	containerHdl;
1:eac0369: 	transient protected boolean	            foundHere;
1:eac0369: 
1:3546404:     PageBasicOperation(BasePage page)
1:eac0369:     {
1:eac0369: 		if (SanityManager.DEBUG) 
1:eac0369:         {
1:eac0369: 			SanityManager.ASSERT(
1:eac0369:                 page != null, 
1:eac0369:                 "cannot create page operation on a null page pointer");
1:eac0369: 		}
1:eac0369: 
1:eac0369:         // runtime info
1:eac0369: 		this.page = page;
1:eac0369: 
1:eac0369:         // info which will be logged.
1:eac0369: 		pageId      = page.getPageId();
1:eac0369: 		pageVersion = page.getPageVersion();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable
1:3546404:     PageBasicOperation()
1:eac0369:     {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "Page Operation: " + pageId.toString() +
1:eac0369: 				" pageVersion " + pageVersion + " : ";
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		pageId.writeExternal(out);
1:eac0369: 		CompressedNumber.writeLong(out, pageVersion);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369:         throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		pageId = PageKey.read(in);
1:eac0369: 
1:eac0369: 		pageVersion = CompressedNumber.readLong(in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Loggable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/** Returns true if this op should be redone during recovery redo,
1:eac0369: 	    if so, get and latched the page.
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby policy.
1:eac0369: 	 */
1:eac0369: 	public final boolean needsRedo(Transaction xact)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (findpage(xact) == null)	// committed dropped container
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		long pversion = page.getPageVersion();
1:eac0369: 		if (pversion == pageVersion)
1:eac0369: 			return true;
1:eac0369: 
1:eac0369: 		releaseResource(xact);
1:eac0369: 
1:eac0369: 		if (pversion > pageVersion)
1:eac0369: 			return false;
1:eac0369: 		else
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_MISSING_LOG, pageId, 
1:ce40a31:                     pversion, 
1:ce40a31:                     pageVersion);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Release latched page and any other resources acquired during a previous
1:eac0369: 		findpage, safe to call multiple times.
1:eac0369: 
1:eac0369: 		In this RawStore implementataion, resource is acquired by a log
1:eac0369: 		operation in one of two places
1:eac0369: 		<nl>
1:eac0369: 		<li> during runtime or recovery undo in PageOperation.generateUndo()
1:eac0369: 		<li> during recovery redo in PageBasicOperation.needsRedo()
1:eac0369: 		</nl>
1:eac0369: 	 */
1:eac0369: 	public void releaseResource(Transaction xact)
1:eac0369: 	{
1:eac0369: 		if (!foundHere)			// don't release anything not found by this
1:eac0369: 			return;
1:eac0369: 
1:eac0369: 		if (page != null)
1:eac0369: 		{
1:eac0369: 			page.unlatch();
1:eac0369: 			page = null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (containerHdl != null)
1:eac0369: 		{
1:eac0369: 			containerHdl.close();
1:eac0369: 			containerHdl = null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		foundHere = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		A page operation is a RAWSTORE log record
1:eac0369: 	*/
1:eac0369: 	public int group()
1:eac0369: 	{
1:eac0369: 		return(Loggable.RAWSTORE | Loggable.XA_NEEDLOCK);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		the default for optional data is set to null.  If an operation has optional data,
1:eac0369: 		the operation need to prepare the optional data for this method.
1:eac0369: 
1:eac0369: 		WARNING: If a log operation extends this class, and the operation has optional data,
1:eac0369: 		it MUST overwrite this method to return a ByteArray that contains the optional data. 
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby policy.
1:eac0369: 	*/
1:eac0369: 	public ByteArray getPreparedLog() throws StandardException
1:eac0369: 	{
1:eac0369: 		return (ByteArray) null;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of RePreparable Interface:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * reclaim locks associated with the changes in this log record.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void reclaimPrepareLocks(
1:eac0369:     Transaction     t,
1:eac0369:     LockingPolicy   locking_policy)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.DEBUG_PRINT("", "PageBasicOperation.reclaimPrepareLocks().");
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 *	Methods specific to this class
1:eac0369: 	 */
1:eac0369: 		 
1:eac0369: 	/**
1:eac0369: 		Reset the pageNumber
1:eac0369: 	*/
1:eac0369: 	protected final void resetPageNumber(long pageNumber)
1:eac0369: 	{
1:eac0369: 		pageId = new PageKey(pageId.getContainerId(), pageNumber);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected final PageKey getPageId() {
1:eac0369: 		return pageId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Find the page the operation applies to and latch it, this only
1:eac0369: 	    uses the segmentId, containerId, and pageId stored in this log
1:eac0369: 		record to find the page.
1:eac0369: 
1:eac0369: 		@return null if container is dropped and committed (possibly
1:eac0369: 		stubbified), else return the latched page
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby policy.
1:eac0369: 	 */
1:eac0369: 	public final BasePage findpage(Transaction xact) throws StandardException 
1:eac0369: 	{
1:eac0369: 		releaseResource(xact);
1:eac0369: 
1:eac0369: 		RawTransaction rtran = (RawTransaction)xact;
1:eac0369: 		containerHdl = rtran.openDroppedContainer(pageId.getContainerId(),
1:eac0369: 			(LockingPolicy) null);
1:eac0369: 
1:eac0369: 		if (containerHdl == null)
1:eac0369:         {
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_CONTAINER_VANISHED, pageId.getContainerId());
1:eac0369:         }
1:eac0369: 
1:eac0369: 		foundHere = true;
1:eac0369: 
1:eac0369: 		// if container is dropped and committed, cannot look at any page, 
1:eac0369:         // it may be a container stub
1:eac0369: 		if (containerHdl.getContainerStatus() == RawContainerHandle.COMMITTED_DROP)
1:eac0369: 		{
1:eac0369: 			releaseResource(xact);
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		StandardException getPageException = null;
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			// get and latch page - we don't know the status of the page or what
1:eac0369: 			// kind of page we are looking for, get any type of page
1:eac0369: 			page = (BasePage)(containerHdl.getAnyPage(pageId.getPageNumber()));
1:eac0369: 		}
1:eac0369: 		catch (StandardException se)
1:eac0369: 		{
1:eac0369: 			getPageException = se;
1:eac0369: 		}
1:eac0369: 			
1:eac0369: 		//Try to initialize the page if page not found exception occurs during
1:eac0369: 		//recovery and the page version is zero(Init Page).
1:eac0369: 		//We do this if derby.storage.patchInitPageRecoverError is set.
1:eac0369: 		if (page == null && getPageException != null && pageVersion == 0)
1:eac0369: 			if (PropertyUtil.getSystemBoolean(RawStoreFactory.PATCH_INITPAGE_RECOVER_ERROR))
1:f57b07d: 				page = getPageForRedoRecovery(xact);
1:eac0369: 		
1:eac0369: 		// maybe we are in rollforward recovery and this is an init page operation,
1:eac0369: 		// give subclass a chance to create the page
1:eac0369: 		if (page == null && getPageException != null)
1:eac0369: 		{
1:eac0369: 			//if are rolloforward recovery reload the page using load tran methods
1:eac0369: 			//that initialize the page. because in rollforward recovery, we 
1:eac0369: 			//might be actually recreating the page container did not exist 
1:eac0369: 			//in the backup when we started the rollforward recovery.
1:eac0369: 
1:eac0369: 			if (rtran.inRollForwardRecovery())
1:eac0369: 			{
1:eac0369: 				if (SanityManager.DEBUG) 
1:eac0369: 					if(SanityManager.DEBUG_ON("LoadTran"))
1:eac0369: 						SanityManager.DEBUG_PRINT(
1:f57b07d:                             "Trace", "got null page " + pageId + 
1:f57b07d:                             " and getPageException, attempt last ditch effort");
1:eac0369: 
1:f57b07d: 				page = getPageForRedoRecovery(xact);
1:eac0369: 				
1:eac0369: 				if (SanityManager.DEBUG) 
1:eac0369: 					if(SanityManager.DEBUG_ON("LoadTran"))
1:eac0369: 						SanityManager.DEBUG_PRINT(
1:f57b07d:                             "Trace"," getPageForRedoRecovery, got page=" + 
1:f57b07d:                             (page != null));
1:eac0369: 			}	
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (page == null)
1:eac0369: 		{
1:eac0369: 			if (getPageException != null)
1:eac0369:             {
1:eac0369: 				throw getPageException;	// that is the original error
1:eac0369:             }
1:eac0369: 			else
1:eac0369:             {
1:eac0369: 				throw StandardException.newException(
1:eac0369:                         SQLState.DATA_MISSING_PAGE, pageId);
1:eac0369:             }
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return page;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Subclass (e.g., init page) that wishes to do something about missing
1:eac0369: 		pages in load tran should override this method to return the page
1:eac0369: 
1:94f158a: 		@exception StandardException Derby Standard error policy
1:eac0369: 	 */
1:f57b07d: 	protected BasePage getPageForRedoRecovery(Transaction xact)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final Page getPage() {
1:eac0369: 		return page;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final long getPageVersion() {
1:eac0369: 		return pageVersion;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Undo the change indicated by this log operation and optional data.
1:eac0369: 		The page the undo should apply to is the latched undoPage.
1:eac0369: 		The undoPage must be the same page as the doMe page and the undo
1:eac0369: 		operation must restore the before image of the row that changed.  
1:eac0369: 
1:eac0369: 		<BR> this can only be used under special circumstances: namely
1:eac0369: 		table level locking, and no internal or nested transaction, and all
1:eac0369: 		operations are rollec back with restoreMe instead of undoMe.
1:eac0369: 
1:eac0369: 		<BR><B>This method is here to support BeforeImageLogging</B>
1:eac0369: 
1:eac0369: 		@param xact			the Transaction doing the rollback
1:eac0369: 		@param undoPage		the page to rollback changes on
1:eac0369: 		@param CLRinstant	the log instant of this (PageUndo) operation
1:eac0369: 		@param in			optional data for the rollback operation
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
1:94f158a: 		@exception StandardException Standard Derby policy.		
1:eac0369: 	*/
1:eac0369: 	abstract public void restoreMe(Transaction xact, BasePage undoPage,
1:eac0369: 								LogInstant CLRinstant, LimitObjectInput in) 
1:eac0369: 		 throws StandardException, IOException;
1:eac0369: 
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:                     pversion, 
1:                     pageVersion);
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: abstract class PageBasicOperation implements Loggable, RePreparable
/////////////////////////////////////////////////////////////////////////
1:     PageBasicOperation(BasePage page)
/////////////////////////////////////////////////////////////////////////
1:     PageBasicOperation()
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1: 	@derby.formatId	no format id, an abstract class.
1: 	@derby.purpose	provide methods for logical undo
1: 	@derby.upgrade
1: 	@derby.diskLayout
1: 	@derby.endFormat
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Derby Standard error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.		
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:f57b07d
/////////////////////////////////////////////////////////////////////////
1: 				page = getPageForRedoRecovery(xact);
/////////////////////////////////////////////////////////////////////////
1:                             "Trace", "got null page " + pageId + 
1:                             " and getPageException, attempt last ditch effort");
1: 				page = getPageForRedoRecovery(xact);
1:                             "Trace"," getPageForRedoRecovery, got page=" + 
1:                             (page != null));
/////////////////////////////////////////////////////////////////////////
1: 	protected BasePage getPageForRedoRecovery(Transaction xact)
commit:20bc69f
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.PageBasicOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.RePreparable;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.PageKey;
1: 
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: 
0: import java.io.InputStream;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: /**
1:     A PageBasicOperation changed the content of a page, this is the root class of all
1: 	page oriented operation. Each PageBasicOperation record change(s)
1: 	that apply to <B>one and only one page</B>.  The pageID that is changed
1: 	must be recorded in the log operation - in other words, redo
1: 	must be physical (or more correctly, in Gray's term, physiological, since
1: 	changes are logical <B>within</B> a page).
1: 	<BR>Undo can be logical, but the undo logic must be hidden in
1: 	generateUndo. By the time a compensation operation is logged as a
1: 	LogOperation, the page that needs roll back must be determined.
1: 
1: 	<PRE>
0: 	@format_id	no format id, an abstract class.
0: 	@purpose	provide methods for logical undo
0: 	@upgrade
0: 	@disk_layout
1: 		pageId(PageKey)			the page this operation applies to
1: 		pageVersion(CompressedLong)	the page version this operation applied to
1: 		OptionalData	none
0: 	@end_format
1: 	</PRE>
1: 
1: 	@see Loggable
1: */
1: 
0: public abstract class PageBasicOperation implements Loggable, RePreparable 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 
1: 	/* page info this operation changed */
1: 	private PageKey     pageId;
1: 	private long        pageVersion;
1: 
1: 
1: 	/* runtime page and data necessary to maintain it */
1: 	transient protected BasePage	        page;
1: 	transient protected RawContainerHandle	containerHdl;
1: 	transient protected boolean	            foundHere;
1: 
0: 	protected PageBasicOperation(BasePage page) 
1:     {
1: 		if (SanityManager.DEBUG) 
1:         {
1: 			SanityManager.ASSERT(
1:                 page != null, 
1:                 "cannot create page operation on a null page pointer");
1: 		}
1: 
1:         // runtime info
1: 		this.page = page;
1: 
1:         // info which will be logged.
1: 		pageId      = page.getPageId();
1: 		pageVersion = page.getPageVersion();
1: 	}
1: 
1: 	// no-arg constructor, required by Formatable
0: 	public PageBasicOperation() 
1:     {
1: 	}
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "Page Operation: " + pageId.toString() +
1: 				" pageVersion " + pageVersion + " : ";
1: 		}
1: 		else
1: 			return null;
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		pageId.writeExternal(out);
1: 		CompressedNumber.writeLong(out, pageVersion);
1: 	}
1: 
1: 	public void readExternal(ObjectInput in) 
1:         throws IOException, ClassNotFoundException
1: 	{
1: 		pageId = PageKey.read(in);
1: 
1: 		pageVersion = CompressedNumber.readLong(in);
1: 	}
1: 
1: 	/*
1: 	 * Loggable methods
1: 	 */
1: 
1: 	/** Returns true if this op should be redone during recovery redo,
1: 	    if so, get and latched the page.
1: 
0: 		@exception StandardException Standard Cloudscape policy.
1: 	 */
1: 	public final boolean needsRedo(Transaction xact)
1: 		 throws StandardException
1: 	{
1: 		if (findpage(xact) == null)	// committed dropped container
1: 			return false;
1: 
1: 		long pversion = page.getPageVersion();
1: 		if (pversion == pageVersion)
1: 			return true;
1: 
1: 		releaseResource(xact);
1: 
1: 		if (pversion > pageVersion)
1: 			return false;
1: 		else
1: 			throw StandardException.newException(
1:                     SQLState.DATA_MISSING_LOG, pageId, 
0:                     new Long(pversion), 
0:                     new Long(pageVersion));
1: 	}
1: 
1: 	/** Release latched page and any other resources acquired during a previous
1: 		findpage, safe to call multiple times.
1: 
1: 		In this RawStore implementataion, resource is acquired by a log
1: 		operation in one of two places
1: 		<nl>
1: 		<li> during runtime or recovery undo in PageOperation.generateUndo()
1: 		<li> during recovery redo in PageBasicOperation.needsRedo()
1: 		</nl>
1: 	 */
1: 	public void releaseResource(Transaction xact)
1: 	{
1: 		if (!foundHere)			// don't release anything not found by this
1: 			return;
1: 
1: 		if (page != null)
1: 		{
1: 			page.unlatch();
1: 			page = null;
1: 		}
1: 
1: 		if (containerHdl != null)
1: 		{
1: 			containerHdl.close();
1: 			containerHdl = null;
1: 		}
1: 
1: 		foundHere = false;
1: 	}
1: 
1: 	/**
1: 		A page operation is a RAWSTORE log record
1: 	*/
1: 	public int group()
1: 	{
1: 		return(Loggable.RAWSTORE | Loggable.XA_NEEDLOCK);
1: 	}
1: 
1: 	/**
1: 		the default for optional data is set to null.  If an operation has optional data,
1: 		the operation need to prepare the optional data for this method.
1: 
1: 		WARNING: If a log operation extends this class, and the operation has optional data,
1: 		it MUST overwrite this method to return a ByteArray that contains the optional data. 
1: 
0: 		@exception StandardException Standard Cloudscape policy.
1: 	*/
1: 	public ByteArray getPreparedLog() throws StandardException
1: 	{
1: 		return (ByteArray) null;
1: 	}
1: 
1:     /**************************************************************************
1:      * Public Methods of RePreparable Interface:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * reclaim locks associated with the changes in this log record.
1:      * <p>
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void reclaimPrepareLocks(
1:     Transaction     t,
1:     LockingPolicy   locking_policy)
1: 		throws StandardException
1:     {
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.DEBUG_PRINT("", "PageBasicOperation.reclaimPrepareLocks().");
1:     }
1: 
1: 	/*
1: 	 *	Methods specific to this class
1: 	 */
1: 		 
1: 	/**
1: 		Reset the pageNumber
1: 	*/
1: 	protected final void resetPageNumber(long pageNumber)
1: 	{
1: 		pageId = new PageKey(pageId.getContainerId(), pageNumber);
1: 	}
1: 
1: 	protected final PageKey getPageId() {
1: 		return pageId;
1: 	}
1: 
1: 	/** Find the page the operation applies to and latch it, this only
1: 	    uses the segmentId, containerId, and pageId stored in this log
1: 		record to find the page.
1: 
1: 		@return null if container is dropped and committed (possibly
1: 		stubbified), else return the latched page
1: 
0: 		@exception StandardException Standard Cloudscape policy.
1: 	 */
1: 	public final BasePage findpage(Transaction xact) throws StandardException 
1: 	{
1: 		releaseResource(xact);
1: 
1: 		RawTransaction rtran = (RawTransaction)xact;
1: 		containerHdl = rtran.openDroppedContainer(pageId.getContainerId(),
1: 			(LockingPolicy) null);
1: 
1: 		if (containerHdl == null)
1:         {
1: 			throw StandardException.newException(
1:                     SQLState.DATA_CONTAINER_VANISHED, pageId.getContainerId());
1:         }
1: 
1: 		foundHere = true;
1: 
1: 		// if container is dropped and committed, cannot look at any page, 
1:         // it may be a container stub
1: 		if (containerHdl.getContainerStatus() == RawContainerHandle.COMMITTED_DROP)
1: 		{
1: 			releaseResource(xact);
1: 			return null;
1: 		}
1: 
1: 		StandardException getPageException = null;
1: 		try
1: 		{
1: 			// get and latch page - we don't know the status of the page or what
1: 			// kind of page we are looking for, get any type of page
1: 			page = (BasePage)(containerHdl.getAnyPage(pageId.getPageNumber()));
1: 		}
1: 		catch (StandardException se)
1: 		{
1: 			getPageException = se;
1: 		}
1: 			
1: 		//Try to initialize the page if page not found exception occurs during
1: 		//recovery and the page version is zero(Init Page).
1: 		//We do this if derby.storage.patchInitPageRecoverError is set.
1: 		if (page == null && getPageException != null && pageVersion == 0)
1: 			if (PropertyUtil.getSystemBoolean(RawStoreFactory.PATCH_INITPAGE_RECOVER_ERROR))
0: 				page = getPageForLoadTran(xact);
1: 		
1: 		// maybe we are in rollforward recovery and this is an init page operation,
1: 		// give subclass a chance to create the page
1: 		if (page == null && getPageException != null)
1: 		{
1: 			//if are rolloforward recovery reload the page using load tran methods
1: 			//that initialize the page. because in rollforward recovery, we 
1: 			//might be actually recreating the page container did not exist 
1: 			//in the backup when we started the rollforward recovery.
1: 
1: 			if (rtran.inRollForwardRecovery())
1: 			{
1: 				if (SanityManager.DEBUG) 
1: 					if(SanityManager.DEBUG_ON("LoadTran"))
1: 						SanityManager.DEBUG_PRINT(
0: 											  "Trace", "got null page " + pageId + 
0: 											  " and getPageException, now attempt last ditch effort");
1: 
0: 				page = getPageForLoadTran(xact);
1: 				
1: 				if (SanityManager.DEBUG) 
1: 					if(SanityManager.DEBUG_ON("LoadTran"))
1: 						SanityManager.DEBUG_PRINT(
0: 											  "Trace"," getPageForLoadTran, got page=" + 
0: 											  (page != null));
1: 			}	
1: 		}
1: 
1: 		if (page == null)
1: 		{
1: 			if (getPageException != null)
1:             {
1: 				throw getPageException;	// that is the original error
1:             }
1: 			else
1:             {
1: 				throw StandardException.newException(
1:                         SQLState.DATA_MISSING_PAGE, pageId);
1:             }
1: 		}
1: 
1: 		return page;
1: 	}
1: 
1: 	/**
1: 		Subclass (e.g., init page) that wishes to do something about missing
1: 		pages in load tran should override this method to return the page
1: 
0: 		@exception StandardException Cloudscape Standard error policy
1: 	 */
0: 	protected BasePage getPageForLoadTran(Transaction xact)
1: 		 throws StandardException
1: 	{
1: 		return null;
1: 	}
1: 
1: 	public final Page getPage() {
1: 		return page;
1: 	}
1: 
1: 	public final long getPageVersion() {
1: 		return pageVersion;
1: 	}
1: 
1: 
1: 	/**
1: 		Undo the change indicated by this log operation and optional data.
1: 		The page the undo should apply to is the latched undoPage.
1: 		The undoPage must be the same page as the doMe page and the undo
1: 		operation must restore the before image of the row that changed.  
1: 
1: 		<BR> this can only be used under special circumstances: namely
1: 		table level locking, and no internal or nested transaction, and all
1: 		operations are rollec back with restoreMe instead of undoMe.
1: 
1: 		<BR><B>This method is here to support BeforeImageLogging</B>
1: 
1: 		@param xact			the Transaction doing the rollback
1: 		@param undoPage		the page to rollback changes on
0: 		@param undoRecordId	the recordId to rollback changes on
1: 		@param CLRinstant	the log instant of this (PageUndo) operation
1: 		@param in			optional data for the rollback operation
1: 
1: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
1: 	*/
1: 	abstract public void restoreMe(Transaction xact, BasePage undoPage,
1: 								LogInstant CLRinstant, LimitObjectInput in) 
1: 		 throws StandardException, IOException;
1: 
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RePreparable;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.PageKey;
0: 
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.RawStoreFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: 
0: import java.io.InputStream;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: /**
0:     A PageBasicOperation changed the content of a page, this is the root class of all
0: 	page oriented operation. Each PageBasicOperation record change(s)
0: 	that apply to <B>one and only one page</B>.  The pageID that is changed
0: 	must be recorded in the log operation - in other words, redo
0: 	must be physical (or more correctly, in Gray's term, physiological, since
0: 	changes are logical <B>within</B> a page).
0: 	<BR>Undo can be logical, but the undo logic must be hidden in
0: 	generateUndo. By the time a compensation operation is logged as a
0: 	LogOperation, the page that needs roll back must be determined.
0: 
0: 	<PRE>
0: 	@format_id	no format id, an abstract class.
0: 	@purpose	provide methods for logical undo
0: 	@upgrade
0: 	@disk_layout
0: 		pageId(PageKey)			the page this operation applies to
0: 		pageVersion(CompressedLong)	the page version this operation applied to
0: 		OptionalData	none
0: 	@end_format
0: 	</PRE>
0: 
0: 	@see Loggable
0: */
0: 
0: public abstract class PageBasicOperation implements Loggable, RePreparable 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 
0: 	/* page info this operation changed */
0: 	private PageKey     pageId;
0: 	private long        pageVersion;
0: 
0: 
0: 	/* runtime page and data necessary to maintain it */
0: 	transient protected BasePage	        page;
0: 	transient protected RawContainerHandle	containerHdl;
0: 	transient protected boolean	            foundHere;
0: 
0: 	protected PageBasicOperation(BasePage page) 
0:     {
0: 		if (SanityManager.DEBUG) 
0:         {
0: 			SanityManager.ASSERT(
0:                 page != null, 
0:                 "cannot create page operation on a null page pointer");
0: 		}
0: 
0:         // runtime info
0: 		this.page = page;
0: 
0:         // info which will be logged.
0: 		pageId      = page.getPageId();
0: 		pageVersion = page.getPageVersion();
0: 	}
0: 
0: 	// no-arg constructor, required by Formatable
0: 	public PageBasicOperation() 
0:     {
0: 	}
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "Page Operation: " + pageId.toString() +
0: 				" pageVersion " + pageVersion + " : ";
0: 		}
0: 		else
0: 			return null;
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		pageId.writeExternal(out);
0: 		CompressedNumber.writeLong(out, pageVersion);
0: 	}
0: 
0: 	public void readExternal(ObjectInput in) 
0:         throws IOException, ClassNotFoundException
0: 	{
0: 		pageId = PageKey.read(in);
0: 
0: 		pageVersion = CompressedNumber.readLong(in);
0: 	}
0: 
0: 	/*
0: 	 * Loggable methods
0: 	 */
0: 
0: 	/** Returns true if this op should be redone during recovery redo,
0: 	    if so, get and latched the page.
0: 
0: 		@exception StandardException Standard Cloudscape policy.
0: 	 */
0: 	public final boolean needsRedo(Transaction xact)
0: 		 throws StandardException
0: 	{
0: 		if (findpage(xact) == null)	// committed dropped container
0: 			return false;
0: 
0: 		long pversion = page.getPageVersion();
0: 		if (pversion == pageVersion)
0: 			return true;
0: 
0: 		releaseResource(xact);
0: 
0: 		if (pversion > pageVersion)
0: 			return false;
0: 		else
0: 			throw StandardException.newException(
0:                     SQLState.DATA_MISSING_LOG, pageId, 
0:                     new Long(pversion), 
0:                     new Long(pageVersion));
0: 	}
0: 
0: 	/** Release latched page and any other resources acquired during a previous
0: 		findpage, safe to call multiple times.
0: 
0: 		In this RawStore implementataion, resource is acquired by a log
0: 		operation in one of two places
0: 		<nl>
0: 		<li> during runtime or recovery undo in PageOperation.generateUndo()
0: 		<li> during recovery redo in PageBasicOperation.needsRedo()
0: 		</nl>
0: 	 */
0: 	public void releaseResource(Transaction xact)
0: 	{
0: 		if (!foundHere)			// don't release anything not found by this
0: 			return;
0: 
0: 		if (page != null)
0: 		{
0: 			page.unlatch();
0: 			page = null;
0: 		}
0: 
0: 		if (containerHdl != null)
0: 		{
0: 			containerHdl.close();
0: 			containerHdl = null;
0: 		}
0: 
0: 		foundHere = false;
0: 	}
0: 
0: 	/**
0: 		A page operation is a RAWSTORE log record
0: 	*/
0: 	public int group()
0: 	{
0: 		return(Loggable.RAWSTORE | Loggable.XA_NEEDLOCK);
0: 	}
0: 
0: 	/**
0: 		the default for optional data is set to null.  If an operation has optional data,
0: 		the operation need to prepare the optional data for this method.
0: 
0: 		WARNING: If a log operation extends this class, and the operation has optional data,
0: 		it MUST overwrite this method to return a ByteArray that contains the optional data. 
0: 
0: 		@exception StandardException Standard Cloudscape policy.
0: 	*/
0: 	public ByteArray getPreparedLog() throws StandardException
0: 	{
0: 		return (ByteArray) null;
0: 	}
0: 
0:     /**************************************************************************
0:      * Public Methods of RePreparable Interface:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * reclaim locks associated with the changes in this log record.
0:      * <p>
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void reclaimPrepareLocks(
0:     Transaction     t,
0:     LockingPolicy   locking_policy)
0: 		throws StandardException
0:     {
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.DEBUG_PRINT("", "PageBasicOperation.reclaimPrepareLocks().");
0:     }
0: 
0: 	/*
0: 	 *	Methods specific to this class
0: 	 */
0: 		 
0: 	/**
0: 		Reset the pageNumber
0: 	*/
0: 	protected final void resetPageNumber(long pageNumber)
0: 	{
0: 		pageId = new PageKey(pageId.getContainerId(), pageNumber);
0: 	}
0: 
0: 	protected final PageKey getPageId() {
0: 		return pageId;
0: 	}
0: 
0: 	/** Find the page the operation applies to and latch it, this only
0: 	    uses the segmentId, containerId, and pageId stored in this log
0: 		record to find the page.
0: 
0: 		@return null if container is dropped and committed (possibly
0: 		stubbified), else return the latched page
0: 
0: 		@exception StandardException Standard Cloudscape policy.
0: 	 */
0: 	public final BasePage findpage(Transaction xact) throws StandardException 
0: 	{
0: 		releaseResource(xact);
0: 
0: 		RawTransaction rtran = (RawTransaction)xact;
0: 		containerHdl = rtran.openDroppedContainer(pageId.getContainerId(),
0: 			(LockingPolicy) null);
0: 
0: 		if (containerHdl == null)
0:         {
0: 			throw StandardException.newException(
0:                     SQLState.DATA_CONTAINER_VANISHED, pageId.getContainerId());
0:         }
0: 
0: 		foundHere = true;
0: 
0: 		// if container is dropped and committed, cannot look at any page, 
0:         // it may be a container stub
0: 		if (containerHdl.getContainerStatus() == RawContainerHandle.COMMITTED_DROP)
0: 		{
0: 			releaseResource(xact);
0: 			return null;
0: 		}
0: 
0: 		StandardException getPageException = null;
0: 		try
0: 		{
0: 			// get and latch page - we don't know the status of the page or what
0: 			// kind of page we are looking for, get any type of page
0: 			page = (BasePage)(containerHdl.getAnyPage(pageId.getPageNumber()));
0: 		}
0: 		catch (StandardException se)
0: 		{
0: 			getPageException = se;
0: 		}
0: 			
0: 		//Try to initialize the page if page not found exception occurs during
0: 		//recovery and the page version is zero(Init Page).
0: 		//We do this if derby.storage.patchInitPageRecoverError is set.
0: 		if (page == null && getPageException != null && pageVersion == 0)
0: 			if (PropertyUtil.getSystemBoolean(RawStoreFactory.PATCH_INITPAGE_RECOVER_ERROR))
0: 				page = getPageForLoadTran(xact);
0: 		
0: 		// maybe we are in rollforward recovery and this is an init page operation,
0: 		// give subclass a chance to create the page
0: 		if (page == null && getPageException != null)
0: 		{
0: 			//if are rolloforward recovery reload the page using load tran methods
0: 			//that initialize the page. because in rollforward recovery, we 
0: 			//might be actually recreating the page container did not exist 
0: 			//in the backup when we started the rollforward recovery.
0: 
0: 			if (rtran.inRollForwardRecovery())
0: 			{
0: 				if (SanityManager.DEBUG) 
0: 					if(SanityManager.DEBUG_ON("LoadTran"))
0: 						SanityManager.DEBUG_PRINT(
0: 											  "Trace", "got null page " + pageId + 
0: 											  " and getPageException, now attempt last ditch effort");
0: 
0: 				page = getPageForLoadTran(xact);
0: 				
0: 				if (SanityManager.DEBUG) 
0: 					if(SanityManager.DEBUG_ON("LoadTran"))
0: 						SanityManager.DEBUG_PRINT(
0: 											  "Trace"," getPageForLoadTran, got page=" + 
0: 											  (page != null));
0: 			}	
0: 		}
0: 
0: 		if (page == null)
0: 		{
0: 			if (getPageException != null)
0:             {
0: 				throw getPageException;	// that is the original error
0:             }
0: 			else
0:             {
0: 				throw StandardException.newException(
0:                         SQLState.DATA_MISSING_PAGE, pageId);
0:             }
0: 		}
0: 
0: 		return page;
0: 	}
0: 
0: 	/**
0: 		Subclass (e.g., init page) that wishes to do something about missing
0: 		pages in load tran should override this method to return the page
0: 
0: 		@exception StandardException Cloudscape Standard error policy
0: 	 */
0: 	protected BasePage getPageForLoadTran(Transaction xact)
0: 		 throws StandardException
0: 	{
0: 		return null;
0: 	}
0: 
0: 	public final Page getPage() {
0: 		return page;
0: 	}
0: 
0: 	public final long getPageVersion() {
0: 		return pageVersion;
0: 	}
0: 
0: 
0: 	/**
0: 		Undo the change indicated by this log operation and optional data.
0: 		The page the undo should apply to is the latched undoPage.
0: 		The undoPage must be the same page as the doMe page and the undo
0: 		operation must restore the before image of the row that changed.  
0: 
0: 		<BR> this can only be used under special circumstances: namely
0: 		table level locking, and no internal or nested transaction, and all
0: 		operations are rollec back with restoreMe instead of undoMe.
0: 
0: 		<BR><B>This method is here to support BeforeImageLogging</B>
0: 
0: 		@param xact			the Transaction doing the rollback
0: 		@param undoPage		the page to rollback changes on
0: 		@param undoRecordId	the recordId to rollback changes on
0: 		@param CLRinstant	the log instant of this (PageUndo) operation
0: 		@param in			optional data for the rollback operation
0: 
0: 		@exception IOException Can be thrown by any of the methods of ObjectInput.
0: 		@exception StandardException Standard Cloudscape policy.		
0: 	*/
0: 	abstract public void restoreMe(Transaction xact, BasePage undoPage,
0: 								LogInstant CLRinstant, LimitObjectInput in) 
0: 		 throws StandardException, IOException;
0: 
0: 
0: }
============================================================================