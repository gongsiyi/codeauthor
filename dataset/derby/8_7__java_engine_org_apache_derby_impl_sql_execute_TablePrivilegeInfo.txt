1:b7730e4: /*
5:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.impl.sql.execute.TablePrivilegeInfo
1:b7730e4: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4: 	  http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: package org.apache.derby.impl.sql.execute;
1:b7730e4: 
1:42544c4: import org.apache.derby.iapi.services.io.ArrayUtil;
1:b7730e4: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:b7730e4: import org.apache.derby.iapi.sql.Activation;
1:b7730e4: import org.apache.derby.iapi.error.StandardException;
1:b7730e4: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:b7730e4: import org.apache.derby.iapi.store.access.TransactionController;
1:08313de: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:17f7626: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1:17f7626: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:17f7626: import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:17f7626: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:17f7626: import org.apache.derby.iapi.reference.SQLState;
1:b7730e4: 
1:b7730e4: import java.util.List;
1:b7730e4: import java.util.Iterator;
1:b7730e4: 
1:b7730e4: public class TablePrivilegeInfo extends PrivilegeInfo
5:b7730e4: {
1:b7730e4: 	// Action types
1:b7730e4: 	public static final int SELECT_ACTION = 0;
1:b7730e4: 	public static final int DELETE_ACTION = 1;
1:b7730e4: 	public static final int INSERT_ACTION = 2;
1:b7730e4: 	public static final int UPDATE_ACTION = 3;
1:b7730e4: 	public static final int REFERENCES_ACTION = 4;
1:b7730e4: 	public static final int TRIGGER_ACTION = 5;
1:b7730e4: 	public static final int ACTION_COUNT = 6;
1:8c26fb6: 
1:b7730e4: 	private static final String YES_WITH_GRANT_OPTION = "Y";
1:b7730e4: 	private static final String YES_WITHOUT_GRANT_OPTION = "y";
1:b7730e4: 	private static final String NO = "N";
1:b7730e4: 
1:b7730e4: 	private static final String[][] actionString =
1:b7730e4: 	{{"s", "S"}, {"d", "D"}, {"i", "I"}, {"u", "U"}, {"r", "R"}, {"t", "T"}};
1:b7730e4: 
1:42544c4:     private final TableDescriptor td;
1:42544c4:     private final boolean[] actionAllowed;
1:42544c4:     private final FormatableBitSet[] columnBitSets;
1:42544c4:     private final List descriptorList;
1:b7730e4: 	
1:b7730e4: 	/**
1:b7730e4: 	 * @param actionAllowed actionAllowed[action] is true if action is in the privilege set.
1:b7730e4: 	 */
1:b7730e4: 	public TablePrivilegeInfo( TableDescriptor td,
1:b7730e4: 							   boolean[] actionAllowed,
1:17f7626: 							   FormatableBitSet[] columnBitSets,
1:17f7626: 							   List descriptorList)
1:b7730e4: 	{
1:42544c4:         // Copy the arrays so that modification outside doesn't change
1:42544c4:         // the internal state.
1:42544c4:         this.actionAllowed = ArrayUtil.copy(actionAllowed);
1:42544c4:         this.columnBitSets = new FormatableBitSet[columnBitSets.length];
1:42544c4:         for (int i = 0; i < columnBitSets.length; i++) {
1:42544c4:             if (columnBitSets[i] != null) {
1:42544c4:                 this.columnBitSets[i] = new FormatableBitSet(columnBitSets[i]);
1:42544c4:             }
1:42544c4:         }
1:42544c4: 
1:b7730e4: 		this.td = td;
1:17f7626: 		this.descriptorList = descriptorList;
1:17f7626: 	}
1:17f7626: 	
1:17f7626: 	/**
1:17f7626: 	 * Determines whether a user is the owner of an object
1:17f7626: 	 * (table, function, or procedure). Note that the database 
1:17f7626: 	 * creator can access database objects without needing to be 
1:17f7626: 	 * their owner.
1:17f7626: 	 *
1:17f7626: 	 * @param user					authorizationId of current user
1:17f7626: 	 * @param td       		        table descriptor being checked against
1:17f7626: 	 * @param sd					SchemaDescriptor
1:17f7626: 	 * @param dd					DataDictionary
1:17f7626: 	 * @param lcc                   LanguageConnectionContext
1:17f7626: 	 * @param grant                 grant if true; revoke if false
1:17f7626: 	 *
1:17f7626: 	 * @exception StandardException if user does not own the object
1:17f7626: 	 */
1:17f7626: 	protected void checkOwnership( String user,
1:17f7626: 								   TableDescriptor td,
1:17f7626: 								   SchemaDescriptor sd,
1:17f7626: 								   DataDictionary dd,
1:17f7626: 								   LanguageConnectionContext lcc,
1:17f7626: 								   boolean grant)
1:17f7626: 		throws StandardException
1:17f7626: 	{
1:17f7626: 		super.checkOwnership(user, td, sd, dd);
1:17f7626: 		
1:17f7626: 		// additional check specific to this subclass
1:17f7626: 		if (grant)
1:17f7626: 		{
1:17f7626: 			checkPrivileges(user, td, sd, dd, lcc);
1:17f7626: 		}
1:17f7626: 	}
1:17f7626: 	
1:17f7626: 	/**
1:17f7626: 	 * Determines if the privilege is grantable by this grantor
1:17f7626: 	 * for the given view.
1:17f7626: 	 * 
1:17f7626: 	 * Note that the database owner can access database objects 
1:17f7626: 	 * without needing to be their owner.  This method should only 
1:17f7626: 	 * be called if it is a GRANT.
1:17f7626: 	 * 
1:17f7626: 	 * @param user					authorizationId of current user
1:17f7626: 	 * @param td		            TableDescriptor to be checked against
1:17f7626: 	 * @param sd					SchemaDescriptor
1:17f7626: 	 * @param dd					DataDictionary
1:17f7626: 	 * @param lcc                   LanguageConnectionContext
1:17f7626: 	 *
1:17f7626: 	 * @exception StandardException if user does not have permission to grant
1:17f7626: 	 */
1:17f7626: 	private void checkPrivileges( String user,
1:17f7626: 								   TableDescriptor td,
1:17f7626: 								   SchemaDescriptor sd,
1:17f7626: 								   DataDictionary dd,
1:17f7626: 								   LanguageConnectionContext lcc)
1:17f7626: 		throws StandardException
1:17f7626: 	{
1:439d1e8: 		if (user.equals(dd.getAuthorizationDatabaseOwner())) return;
1:17f7626: 		
1:17f7626: 		//  check view specific
1:17f7626: 		if (td.getTableType() == TableDescriptor.VIEW_TYPE) 
1:17f7626: 		{
1:17f7626: 			if (descriptorList != null )
1:17f7626: 			{			    		   
1:17f7626: 				TransactionController tc = lcc.getTransactionExecute();
1:17f7626: 				int siz = descriptorList.size();
1:17f7626: 				for (int i=0; i < siz; i++)
1:17f7626: 				{
1:17f7626: 					TupleDescriptor p;
1:17f7626: 					SchemaDescriptor s = null;
1:17f7626: 
1:17f7626: 					p = (TupleDescriptor)descriptorList.get(i);
1:17f7626: 					if (p instanceof TableDescriptor)
1:17f7626: 					{
1:17f7626: 						TableDescriptor t = (TableDescriptor)p;
1:17f7626: 						s = t.getSchemaDescriptor();
1:17f7626: 			    	}
1:17f7626: 					else if (p instanceof ViewDescriptor)
1:17f7626: 					{
1:17f7626: 						ViewDescriptor v = (ViewDescriptor)p;	
1:17f7626: 						s = dd.getSchemaDescriptor(v.getCompSchemaId(), tc);
1:17f7626: 					}
1:17f7626: 			    	else if (p instanceof AliasDescriptor)
1:17f7626: 			    	{
1:17f7626: 			    		AliasDescriptor a = (AliasDescriptor)p;
1:17f7626: 						s = dd.getSchemaDescriptor( a.getSchemaUUID(), tc);
1:17f7626: 			    	}
1:17f7626: 								
1:17f7626: 					if (s != null && !user.equals(s.getAuthorizationId()) ) 
1:17f7626: 					{
1:17f7626: 						throw StandardException.newException(
1:17f7626: 				    			   SQLState.AUTH_NO_OBJECT_PERMISSION,
1:17f7626: 				    			   user,
1:17f7626: 				    			   "grant",
1:17f7626: 				    			   sd.getSchemaName(),
1:17f7626: 								   td.getName());		  
1:17f7626: 					}
1:17f7626: 			    			   
1:17f7626: 			    	// FUTURE: if object is not own by grantor then check if 
1:17f7626: 			    	//         the grantor have grant option.
1:17f7626: 				}
1:17f7626: 			}
1:17f7626: 		}
1:69e77e3: 	}
1:b7730e4: 	
1:b7730e4: 	/**
1:b7730e4: 	 *	This is the guts of the Execution-time logic for GRANT/REVOKE of a table privilege
1:b7730e4: 	 *
1:b7730e4: 	 * @param activation
1:b7730e4: 	 * @param grant true if grant, false if revoke
1:b7730e4: 	 * @param grantees a list of authorization ids (strings)
1:b7730e4: 	 *
1:b7730e4: 	 * @exception StandardException		Thrown on failure
1:b7730e4: 	 */
1:b7730e4: 	public void executeGrantRevoke( Activation activation,
1:b7730e4: 									boolean grant,
1:b7730e4: 									List grantees)
1:b7730e4: 		throws StandardException
1:b7730e4: 	{
1:b7730e4: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:b7730e4: 		DataDictionary dd = lcc.getDataDictionary();
1:9f60172:         String currentUser = lcc.getCurrentUserId(activation);
1:b7730e4: 		TransactionController tc = lcc.getTransactionExecute();
1:17f7626: 		SchemaDescriptor sd = td.getSchemaDescriptor();
1:17f7626: 		
1:b7730e4: 		// Check that the current user has permission to grant the privileges.
1:17f7626: 		checkOwnership( currentUser, td, sd, dd, lcc, grant);
1:b7730e4: 		
1:b7730e4: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:b7730e4: 
1:b7730e4: 		TablePermsDescriptor tablePermsDesc =
1:b7730e4: 		  ddg.newTablePermsDescriptor( td,
1:b7730e4: 									   getPermString( SELECT_ACTION, false),
1:b7730e4: 									   getPermString( DELETE_ACTION, false),
1:b7730e4: 									   getPermString( INSERT_ACTION, false),
1:b7730e4: 									   getPermString( UPDATE_ACTION, false),
1:b7730e4: 									   getPermString( REFERENCES_ACTION, false),
1:b7730e4: 									   getPermString( TRIGGER_ACTION, false),
1:b7730e4: 									   currentUser);
1:b7730e4: 			
1:b7730e4: 		ColPermsDescriptor[] colPermsDescs = new ColPermsDescriptor[ columnBitSets.length];
1:b7730e4: 		for( int i = 0; i < columnBitSets.length; i++)
1:b7730e4: 		{
1:b7730e4: 			if( columnBitSets[i] != null ||
1:b7730e4: 				// If it is a revoke and no column list is specified then revoke all column permissions.
1:b7730e4: 				// A null column bitSet in a ColPermsDescriptor indicates that all the column permissions
1:b7730e4: 				// should be removed.
1:b7730e4: 				(!grant) && hasColumnPermissions(i) && actionAllowed[i]
1:b7730e4: 				)
1:b7730e4: 			{
1:b7730e4: 				colPermsDescs[i] = ddg.newColPermsDescriptor( td,
1:b7730e4: 															  getActionString(i, false),
1:b7730e4: 															  columnBitSets[i],
1:b7730e4: 															  currentUser);
1:69e77e3: 			}
5:b7730e4: 		}
1:b7730e4: 
1:b7730e4: 
1:b7730e4: 		dd.startWriting(lcc);
1:b7730e4: 		// Add or remove the privileges to/from the SYS.SYSTABLEPERMS and SYS.SYSCOLPERMS tables
1:b7730e4: 		for( Iterator itr = grantees.iterator(); itr.hasNext();)
1:ac100d6: 		{
1:8c26fb6: 			// Keep track to see if any privileges are revoked by a revoke 
1:8c26fb6: 			// statement. If a privilege is not revoked, we need to raise a 
1:8c26fb6: 			// warning. For table privileges, we do not check if privilege for 
1:8c26fb6: 			// a specific action has been revoked or not. Also, we do not check
1:8c26fb6: 			// privileges for specific columns. If at least one privilege has 
1:8c26fb6: 			// been revoked, we do not raise a warning. This has to be refined 
1:8c26fb6: 			// further to check for specific actions/columns and raise warning 
1:8c26fb6: 			// if any privilege has not been revoked.
1:8c26fb6: 			boolean privileges_revoked = false;
1:ac100d6: 						
1:b7730e4: 			String grantee = (String) itr.next();
1:b7730e4: 			if( tablePermsDesc != null)
1:08313de: 			{
1:08313de: 				if (dd.addRemovePermissionsDescriptor( grant, tablePermsDesc, grantee, tc))
1:08313de: 				{
1:8c26fb6: 					privileges_revoked = true;
1:763e014: 					dd.getDependencyManager().invalidateFor
1:763e014: 						(tablePermsDesc,
1:763e014: 						 DependencyManager.REVOKE_PRIVILEGE, lcc);
1:763e014: 
1:763e014: 					// When revoking a privilege from a Table we need to
1:763e014: 					// invalidate all GPSs refering to it. But GPSs aren't
1:763e014: 					// Dependents of TablePermsDescr, but of the
1:763e014: 					// TableDescriptor itself, so we must send
1:763e014: 					// INTERNAL_RECOMPILE_REQUEST to the TableDescriptor's
1:763e014: 					// Dependents.
1:763e014: 					dd.getDependencyManager().invalidateFor
1:763e014: 						(td, DependencyManager.INTERNAL_RECOMPILE_REQUEST, lcc);
1:08313de: 				}
1:08313de: 			}
1:b7730e4: 			for( int i = 0; i < columnBitSets.length; i++)
1:ac100d6: 			{
1:b7730e4: 				if( colPermsDescs[i] != null)
1:08313de: 				{
1:08313de: 					if (dd.addRemovePermissionsDescriptor( grant, colPermsDescs[i], grantee, tc)) 
1:ac100d6: 					{
1:8c26fb6: 						privileges_revoked = true;
1:08313de: 						dd.getDependencyManager().invalidateFor(colPermsDescs[i], DependencyManager.REVOKE_PRIVILEGE, lcc);
1:0eb97d9: 						// When revoking a privilege from a Table we need to
1:0eb97d9: 						// invalidate all GPSs refering to it. But GPSs aren't
1:0eb97d9: 						// Dependents of colPermsDescs[i], but of the
1:0eb97d9: 						// TableDescriptor itself, so we must send
1:0eb97d9: 						// INTERNAL_RECOMPILE_REQUEST to the TableDescriptor's
1:0eb97d9: 						// Dependents.
1:0eb97d9: 						dd.getDependencyManager().invalidateFor
1:0eb97d9: 							(td,
1:0eb97d9: 							 DependencyManager.INTERNAL_RECOMPILE_REQUEST,
1:0eb97d9: 							 lcc);
1:08313de: 					}
1:ac100d6: 				}
1:ac100d6: 			}
1:ac100d6: 			
1:8c26fb6: 			addWarningIfPrivilegeNotRevoked(activation, grant, privileges_revoked, grantee);
1:8c26fb6: 		}
1:b7730e4: 	} // end of executeConstantAction
1:8c26fb6: 
1:b7730e4: 	private String getPermString( int action, boolean forGrantOption)
1:ac100d6: 	{
1:b7730e4: 		if( actionAllowed[ action] && columnBitSets[action] == null)
1:b7730e4: 			return forGrantOption ? YES_WITH_GRANT_OPTION : YES_WITHOUT_GRANT_OPTION;
1:b7730e4: 		else
1:b7730e4: 			return NO;
1:b7730e4: 	} // end of getPermString
1:b7730e4: 
1:b7730e4: 	private String getActionString( int action, boolean forGrantOption)
1:8c26fb6: 	{
1:b7730e4: 		return actionString[action][forGrantOption ? 1 : 0];
1:b7730e4: 	}
1:b7730e4: 
1:b7730e4: 	private boolean hasColumnPermissions( int action)
1:b7730e4: 	{
1:b7730e4: 		return action == SELECT_ACTION || action == UPDATE_ACTION || action == REFERENCES_ACTION;
1:b7730e4: 	}
1:b7730e4: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:42544c4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
1:     private final TableDescriptor td;
1:     private final boolean[] actionAllowed;
1:     private final FormatableBitSet[] columnBitSets;
1:     private final List descriptorList;
/////////////////////////////////////////////////////////////////////////
1:         // Copy the arrays so that modification outside doesn't change
1:         // the internal state.
1:         this.actionAllowed = ArrayUtil.copy(actionAllowed);
1:         this.columnBitSets = new FormatableBitSet[columnBitSets.length];
1:         for (int i = 0; i < columnBitSets.length; i++) {
1:             if (columnBitSets[i] != null) {
1:                 this.columnBitSets[i] = new FormatableBitSet(columnBitSets[i]);
1:             }
1:         }
1: 
commit:763e014
/////////////////////////////////////////////////////////////////////////
1: 					dd.getDependencyManager().invalidateFor
1: 						(tablePermsDesc,
1: 						 DependencyManager.REVOKE_PRIVILEGE, lcc);
1: 
1: 					// When revoking a privilege from a Table we need to
1: 					// invalidate all GPSs refering to it. But GPSs aren't
1: 					// Dependents of TablePermsDescr, but of the
1: 					// TableDescriptor itself, so we must send
1: 					// INTERNAL_RECOMPILE_REQUEST to the TableDescriptor's
1: 					// Dependents.
1: 					dd.getDependencyManager().invalidateFor
1: 						(td, DependencyManager.INTERNAL_RECOMPILE_REQUEST, lcc);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:         String currentUser = lcc.getCurrentUserId(activation);
commit:0eb97d9
/////////////////////////////////////////////////////////////////////////
1: 						// When revoking a privilege from a Table we need to
1: 						// invalidate all GPSs refering to it. But GPSs aren't
1: 						// Dependents of colPermsDescs[i], but of the
1: 						// TableDescriptor itself, so we must send
1: 						// INTERNAL_RECOMPILE_REQUEST to the TableDescriptor's
1: 						// Dependents.
1: 						dd.getDependencyManager().invalidateFor
1: 							(td,
1: 							 DependencyManager.INTERNAL_RECOMPILE_REQUEST,
1: 							 lcc);
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:98df2e3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:439d1e8
/////////////////////////////////////////////////////////////////////////
1: 		if (user.equals(dd.getAuthorizationDatabaseOwner())) return;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:17f7626
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
0: 	private List descriptorList;
1: 							   FormatableBitSet[] columnBitSets,
1: 							   List descriptorList)
1: 		this.descriptorList = descriptorList;
1: 	}
1: 	
1: 	/**
1: 	 * Determines whether a user is the owner of an object
1: 	 * (table, function, or procedure). Note that the database 
1: 	 * creator can access database objects without needing to be 
1: 	 * their owner.
1: 	 *
1: 	 * @param user					authorizationId of current user
1: 	 * @param td       		        table descriptor being checked against
1: 	 * @param sd					SchemaDescriptor
1: 	 * @param dd					DataDictionary
1: 	 * @param lcc                   LanguageConnectionContext
1: 	 * @param grant                 grant if true; revoke if false
1: 	 *
1: 	 * @exception StandardException if user does not own the object
1: 	 */
1: 	protected void checkOwnership( String user,
1: 								   TableDescriptor td,
1: 								   SchemaDescriptor sd,
1: 								   DataDictionary dd,
1: 								   LanguageConnectionContext lcc,
1: 								   boolean grant)
1: 		throws StandardException
1: 	{
1: 		super.checkOwnership(user, td, sd, dd);
1: 		
1: 		// additional check specific to this subclass
1: 		if (grant)
1: 		{
1: 			checkPrivileges(user, td, sd, dd, lcc);
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * Determines if the privilege is grantable by this grantor
1: 	 * for the given view.
1: 	 * 
1: 	 * Note that the database owner can access database objects 
1: 	 * without needing to be their owner.  This method should only 
1: 	 * be called if it is a GRANT.
1: 	 * 
1: 	 * @param user					authorizationId of current user
1: 	 * @param td		            TableDescriptor to be checked against
1: 	 * @param sd					SchemaDescriptor
1: 	 * @param dd					DataDictionary
1: 	 * @param lcc                   LanguageConnectionContext
1: 	 *
1: 	 * @exception StandardException if user does not have permission to grant
1: 	 */
1: 	private void checkPrivileges( String user,
1: 								   TableDescriptor td,
1: 								   SchemaDescriptor sd,
1: 								   DataDictionary dd,
1: 								   LanguageConnectionContext lcc)
1: 		throws StandardException
1: 	{
0: 		if (user.equals(dd.getAuthorizationDBA())) return;
1: 		
1: 		//  check view specific
1: 		if (td.getTableType() == TableDescriptor.VIEW_TYPE) 
1: 		{
1: 			if (descriptorList != null )
1: 			{			    		   
1: 				TransactionController tc = lcc.getTransactionExecute();
1: 				int siz = descriptorList.size();
1: 				for (int i=0; i < siz; i++)
1: 				{
1: 					TupleDescriptor p;
1: 					SchemaDescriptor s = null;
1: 
1: 					p = (TupleDescriptor)descriptorList.get(i);
1: 					if (p instanceof TableDescriptor)
1: 					{
1: 						TableDescriptor t = (TableDescriptor)p;
1: 						s = t.getSchemaDescriptor();
1: 			    	}
1: 					else if (p instanceof ViewDescriptor)
1: 					{
1: 						ViewDescriptor v = (ViewDescriptor)p;	
1: 						s = dd.getSchemaDescriptor(v.getCompSchemaId(), tc);
1: 					}
1: 			    	else if (p instanceof AliasDescriptor)
1: 			    	{
1: 			    		AliasDescriptor a = (AliasDescriptor)p;
1: 						s = dd.getSchemaDescriptor( a.getSchemaUUID(), tc);
1: 			    	}
1: 								
1: 					if (s != null && !user.equals(s.getAuthorizationId()) ) 
1: 					{
1: 						throw StandardException.newException(
1: 				    			   SQLState.AUTH_NO_OBJECT_PERMISSION,
1: 				    			   user,
1: 				    			   "grant",
1: 				    			   sd.getSchemaName(),
1: 								   td.getName());		  
1: 					}
1: 			    			   
1: 			    	// FUTURE: if object is not own by grantor then check if 
1: 			    	//         the grantor have grant option.
1: 				}
1: 			}
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		SchemaDescriptor sd = td.getSchemaDescriptor();
1: 		
1: 		checkOwnership( currentUser, td, sd, dd, lcc, grant);
commit:08313de
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
/////////////////////////////////////////////////////////////////////////
1: 			{
1: 				if (dd.addRemovePermissionsDescriptor( grant, tablePermsDesc, grantee, tc))
1: 				{
0: 	        		dd.getDependencyManager().invalidateFor(tablePermsDesc, DependencyManager.REVOKE_PRIVILEGE, lcc);
1: 				}
1: 			}
1: 				{
1: 					if (dd.addRemovePermissionsDescriptor( grant, colPermsDescs[i], grantee, tc))					
1: 		        		dd.getDependencyManager().invalidateFor(colPermsDescs[i], DependencyManager.REVOKE_PRIVILEGE, lcc);
1: 				}
commit:7a1a699
/////////////////////////////////////////////////////////////////////////
commit:69e77e3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				} 
/////////////////////////////////////////////////////////////////////////
1: 					} 
commit:ac100d6
/////////////////////////////////////////////////////////////////////////
0: 			// It is possible for grant statement to look like following
0: 			//   grant all privileges on t11 to mamata2, mamata3;
0: 			// This means that dd.addRemovePermissionsDescriptor will be called
0: 			// twice for tablePermsDesc, once for each grantee.
0: 			// First it's called for mamta2. After a row is inserted for mamta2 
0: 			// into SYS.SYSTABLEPERMS, the tablePermsDesc's uuid will get 
0: 			// populated with the uuid of the row that just got inserted into 
0: 			// SYS.SYSTABLEPERMS for mamta2
0: 			// Next, before dd.addRemovePermissionsDescriptor gets called for 
0: 			// MAMTA3, we should set the tablePermsDesc's uuid to null or 
0: 			// otherwise, we will think that there is a duplicate row getting
0: 			// inserted for the same uuid.
0: 			// Same logic applies to colPermsDescriptor
1: 			{
0: 				if (!grant)
1: 				{
0: 					TablePermsDescriptor tempTablePermsDesc = 
0: 						dd.getTablePermissions(td.getUUID(), grantee);
0: 					tablePermsDesc.setUUID(tempTablePermsDesc.getUUID());
1: 					
0: 				} else
0: 	            	tablePermsDesc.setUUID(null);
1: 			}
1: 				{
0: 					if (!grant)
1: 					{
0: 						ColPermsDescriptor tempColPermsDescriptor = 
0: 							dd.getColumnPermissions(td.getUUID(), colPermsDescs[i].getType() ,grant, grantee);
0: 						colPermsDescs[i].setUUID(tempColPermsDescriptor.getUUID());
1: 						
0: 					} else
0: 		            	colPermsDescs[i].setUUID(null);
0: 					dd.addRemovePermissionsDescriptor( grant, colPermsDescs[i], grantee, tc);					
1: 				}
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:8c26fb6
/////////////////////////////////////////////////////////////////////////
1: 			// Keep track to see if any privileges are revoked by a revoke 
1: 			// statement. If a privilege is not revoked, we need to raise a 
1: 			// warning. For table privileges, we do not check if privilege for 
1: 			// a specific action has been revoked or not. Also, we do not check
1: 			// privileges for specific columns. If at least one privilege has 
1: 			// been revoked, we do not raise a warning. This has to be refined 
1: 			// further to check for specific actions/columns and raise warning 
1: 			// if any privilege has not been revoked.
1: 			boolean privileges_revoked = false;
1: 						
1: 					privileges_revoked = true;
0: 					dd.getDependencyManager().invalidateFor(tablePermsDesc, DependencyManager.REVOKE_PRIVILEGE, lcc);
0: 					if (dd.addRemovePermissionsDescriptor( grant, colPermsDescs[i], grantee, tc)) 
1: 					{
1: 						privileges_revoked = true;
0: 						dd.getDependencyManager().invalidateFor(colPermsDescs[i], DependencyManager.REVOKE_PRIVILEGE, lcc);
1: 					}
1: 			
1: 			addWarningIfPrivilegeNotRevoked(activation, grant, privileges_revoked, grantee);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:50ba36b
/////////////////////////////////////////////////////////////////////////
0: 		checkOwnership( currentUser, td, td.getSchemaDescriptor(), dd);
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.TablePrivilegeInfo
1: 
0:    Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: 
1: import java.util.List;
1: import java.util.Iterator;
1: 
1: public class TablePrivilegeInfo extends PrivilegeInfo
1: {
1: 	// Action types
1: 	public static final int SELECT_ACTION = 0;
1: 	public static final int DELETE_ACTION = 1;
1: 	public static final int INSERT_ACTION = 2;
1: 	public static final int UPDATE_ACTION = 3;
1: 	public static final int REFERENCES_ACTION = 4;
1: 	public static final int TRIGGER_ACTION = 5;
1: 	public static final int ACTION_COUNT = 6;
1: 
1: 	private static final String YES_WITH_GRANT_OPTION = "Y";
1: 	private static final String YES_WITHOUT_GRANT_OPTION = "y";
1: 	private static final String NO = "N";
1: 
1: 	private static final String[][] actionString =
1: 	{{"s", "S"}, {"d", "D"}, {"i", "I"}, {"u", "U"}, {"r", "R"}, {"t", "T"}};
1: 
0: 	private TableDescriptor td;
0: 	private boolean[] actionAllowed;
0: 	private FormatableBitSet[] columnBitSets;
1: 	
1: 	/**
1: 	 * @param actionAllowed actionAllowed[action] is true if action is in the privilege set.
0: 	 * @param columnNames columnNames[action] is the list of columns associated with the action, null if
0: 	 *					the privilege applies to all columns.
1: 	 */
1: 	public TablePrivilegeInfo( TableDescriptor td,
1: 							   boolean[] actionAllowed,
0: 							   FormatableBitSet[] columnBitSets)
1: 	{
0: 		this.actionAllowed = actionAllowed;
0: 		this.columnBitSets = columnBitSets;
1: 		this.td = td;
1: 	}
1: 	
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for GRANT/REVOKE of a table privilege
1: 	 *
1: 	 * @param activation
1: 	 * @param grant true if grant, false if revoke
1: 	 * @param grantees a list of authorization ids (strings)
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void executeGrantRevoke( Activation activation,
1: 									boolean grant,
1: 									List grantees)
1: 		throws StandardException
1: 	{
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
0: 		String currentUser = lcc.getAuthorizationId();
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 
1: 		// Check that the current user has permission to grant the privileges.
0: 		checkOwnership( currentUser, td, td.getSchemaDescriptor());
1: 		
1: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
1: 		TablePermsDescriptor tablePermsDesc =
1: 		  ddg.newTablePermsDescriptor( td,
1: 									   getPermString( SELECT_ACTION, false),
1: 									   getPermString( DELETE_ACTION, false),
1: 									   getPermString( INSERT_ACTION, false),
1: 									   getPermString( UPDATE_ACTION, false),
1: 									   getPermString( REFERENCES_ACTION, false),
1: 									   getPermString( TRIGGER_ACTION, false),
1: 									   currentUser);
1: 			
1: 		ColPermsDescriptor[] colPermsDescs = new ColPermsDescriptor[ columnBitSets.length];
1: 		for( int i = 0; i < columnBitSets.length; i++)
1: 		{
1: 			if( columnBitSets[i] != null ||
1: 				// If it is a revoke and no column list is specified then revoke all column permissions.
1: 				// A null column bitSet in a ColPermsDescriptor indicates that all the column permissions
1: 				// should be removed.
1: 				(!grant) && hasColumnPermissions(i) && actionAllowed[i]
1: 				)
1: 			{
1: 				colPermsDescs[i] = ddg.newColPermsDescriptor( td,
1: 															  getActionString(i, false),
1: 															  columnBitSets[i],
1: 															  currentUser);
1: 			}
1: 		}
1: 
1: 
1: 		dd.startWriting(lcc);
1: 		// Add or remove the privileges to/from the SYS.SYSTABLEPERMS and SYS.SYSCOLPERMS tables
1: 		for( Iterator itr = grantees.iterator(); itr.hasNext();)
1: 		{
1: 			String grantee = (String) itr.next();
1: 			if( tablePermsDesc != null)
0: 				dd.addRemovePermissionsDescriptor( grant, tablePermsDesc, grantee, tc);
1: 			for( int i = 0; i < columnBitSets.length; i++)
1: 			{
1: 				if( colPermsDescs[i] != null)
0: 					dd.addRemovePermissionsDescriptor( grant, colPermsDescs[i], grantee, tc);
1: 			}
1: 		}
1: 	} // end of executeConstantAction
1: 
1: 	private String getPermString( int action, boolean forGrantOption)
1: 	{
1: 		if( actionAllowed[ action] && columnBitSets[action] == null)
1: 			return forGrantOption ? YES_WITH_GRANT_OPTION : YES_WITHOUT_GRANT_OPTION;
1: 		else
1: 			return NO;
1: 	} // end of getPermString
1: 
1: 	private String getActionString( int action, boolean forGrantOption)
1: 	{
1: 		return actionString[action][forGrantOption ? 1 : 0];
1: 	}
1: 
1: 	private boolean hasColumnPermissions( int action)
1: 	{
1: 		return action == SELECT_ACTION || action == UPDATE_ACTION || action == REFERENCES_ACTION;
1: 	}
1: }
============================================================================