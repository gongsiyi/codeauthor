1:f7ce263: /**
1:f7ce263:  * Derby - Class org.apache.derbyTesting.functionTests.tests.memory.RolesDependencyTest
1:f7ce263:  *
1:f7ce263:  * Licensed to the Apache Software Foundation (ASF) under one
1:f7ce263:  * or more contributor license agreements.  See the NOTICE file
1:f7ce263:  * distributed with this work for additional information
1:f7ce263:  * regarding copyright ownership.  The ASF licenses this file
1:f7ce263:  * to you under the Apache License, Version 2.0 (the
1:f7ce263:  * "License"); you may not use this file except in compliance
1:f7ce263:  * with the License.  You may obtain a copy of the License at
1:f7ce263:  *
1:f7ce263:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f7ce263:  *
1:f7ce263:  * Unless required by applicable law or agreed to in writing,
1:f7ce263:  * software distributed under the License is distributed on an
1:f7ce263:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f7ce263:  * KIND, either express or implied.  See the License for the
1:f7ce263:  * specific language governing permissions and limitations
1:f7ce263:  * under the License.
1:f7ce263:  */
1:f7ce263: 
1:f7ce263: package org.apache.derbyTesting.functionTests.tests.memory;
1:f7ce263: 
1:f7ce263: import java.sql.Connection;
1:f7ce263: import java.sql.ResultSet;
1:f7ce263: import java.sql.SQLException;
1:f7ce263: import java.sql.Statement;
1:f7ce263: import junit.framework.Test;
1:f7ce263: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:f7ce263: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:f7ce263: import org.apache.derbyTesting.junit.JDBC;
1:f7ce263: import org.apache.derbyTesting.junit.TestConfiguration;
1:f7ce263: 
1:f7ce263: /**
1:f7ce263:  * Test memory requirements for the activation's dependencies on the current
1:f7ce263:  * role.
1:f7ce263:  */
1:f7ce263: public class RolesDependencyTest extends BaseJDBCTestCase {
1:f7ce263: 
1:f7ce263:     public RolesDependencyTest(String name) {
1:f7ce263:         super(name);
1:f7ce263:     }
1:f7ce263: 
1:f7ce263:     public static Test suite() {
1:1ae02c9:         Test test = new BaseTestSuite(RolesDependencyTest.class);
1:f7ce263: 
1:f7ce263:         // Populate database with data as DBO
1:f7ce263:         test = new CleanDatabaseTestSetup(test) {
1:f7ce263:             protected void decorateSQL(Statement s) throws SQLException {
1:f7ce263:                 s.execute("create schema s1");
1:f7ce263:                 s.execute("create table s1.t1(x int)");
1:f7ce263:                 s.execute("insert into s1.t1 values 1");
1:f7ce263:                 s.execute("create role role1");
1:f7ce263:                 s.execute("grant select on s1.t1 to role1");
1:f7ce263:                 s.execute("grant role1 to user1");
1:f7ce263:             }
1:f7ce263:         };
1:f7ce263: 
1:f7ce263:         // Enable SQL authorization
1:f7ce263:         return TestConfiguration.sqlAuthorizationDecorator(test);
1:f7ce263:     }
1:f7ce263: 
1:f7ce263:     /**
1:f7ce263:      * Regression test case for DERBY-4571. When executing a query that
1:f7ce263:      * needed a privilege that was granted to the current role, a reference
1:f7ce263:      * to the activation would be leaked at each execution because the
1:f7ce263:      * activation's dependency on the current role was added to the dependency
1:f7ce263:      * manager and never removed. This eventually lead to OutOfMemoryErrors.
1:f7ce263:      */
1:f7ce263:     public void testCurrentRoleDependencyMemleak() throws SQLException {
1:f7ce263:         Connection c = openUserConnection("user1");
1:f7ce263:         Statement s = c.createStatement();
1:f7ce263:         s.execute("set role role1");
1:f7ce263:         for (int i = 0; i < 40000; i++) {
1:f7ce263:             ResultSet rs = s.executeQuery("select * from s1.t1");
1:f7ce263:             JDBC.assertDrainResults(rs, 1);
1:f7ce263:         }
1:f7ce263:         s.close();
1:f7ce263:         c.close();
1:f7ce263:     }
1:f7ce263: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         Test test = new BaseTestSuite(RolesDependencyTest.class);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f7ce263
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.memory.RolesDependencyTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.memory;
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test memory requirements for the activation's dependencies on the current
1:  * role.
1:  */
1: public class RolesDependencyTest extends BaseJDBCTestCase {
1: 
1:     public RolesDependencyTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
0:         Test test = new TestSuite(RolesDependencyTest.class);
1: 
1:         // Populate database with data as DBO
1:         test = new CleanDatabaseTestSetup(test) {
1:             protected void decorateSQL(Statement s) throws SQLException {
1:                 s.execute("create schema s1");
1:                 s.execute("create table s1.t1(x int)");
1:                 s.execute("insert into s1.t1 values 1");
1:                 s.execute("create role role1");
1:                 s.execute("grant select on s1.t1 to role1");
1:                 s.execute("grant role1 to user1");
1:             }
1:         };
1: 
1:         // Enable SQL authorization
1:         return TestConfiguration.sqlAuthorizationDecorator(test);
1:     }
1: 
1:     /**
1:      * Regression test case for DERBY-4571. When executing a query that
1:      * needed a privilege that was granted to the current role, a reference
1:      * to the activation would be leaked at each execution because the
1:      * activation's dependency on the current role was added to the dependency
1:      * manager and never removed. This eventually lead to OutOfMemoryErrors.
1:      */
1:     public void testCurrentRoleDependencyMemleak() throws SQLException {
1:         Connection c = openUserConnection("user1");
1:         Statement s = c.createStatement();
1:         s.execute("set role role1");
1:         for (int i = 0; i < 40000; i++) {
1:             ResultSet rs = s.executeQuery("select * from s1.t1");
1:             JDBC.assertDrainResults(rs, 1);
1:         }
1:         s.close();
1:         c.close();
1:     }
1: }
============================================================================