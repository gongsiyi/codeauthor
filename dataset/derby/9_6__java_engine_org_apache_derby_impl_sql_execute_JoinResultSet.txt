1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.JoinResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.ResultSet;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Takes 2 NoPutResultSets and a join filter and returns
1:eac0369:  * the join's rows satisfying the filter as a result set.
3:eac0369:  *
1:eac0369:  */
1:f77f36d: abstract class JoinResultSet extends NoPutResultSetImpl
1:eac0369: 	implements CursorResultSet
2:eac0369: {
1:eac0369: 	/* Run time statistics variables */
1:eac0369: 	public int rowsSeenLeft;
1:eac0369: 	public int rowsSeenRight;
1:eac0369: 	public int rowsReturned;
1:eac0369: 	public long restrictionTime;
1:eac0369: 
1:eac0369: 	protected boolean isRightOpen;
1:eac0369: 	protected ExecRow leftRow;
1:eac0369: 	protected ExecRow rightRow;
1:eac0369: 	protected ExecRow mergedRow;
1:eac0369: 
1:eac0369:     // set in constructor and not altered during
1:eac0369:     // life of object.
1:eac0369:     public	  NoPutResultSet leftResultSet;
1:eac0369: 	protected int		  leftNumCols;
1:eac0369: 	public	  NoPutResultSet rightResultSet;
1:eac0369: 	protected int		  rightNumCols;
1:eac0369:     protected GeneratedMethod restriction;
1:eac0369: 	public	  boolean oneRowRightSide;
1:eac0369: 	public	  boolean notExistsRightSide;  //right side is NOT EXISTS
1:eac0369: 	
1:c7248d5: 	String userSuppliedOptimizerOverrides;
1:eac0369: 
1:eac0369:     /*
1:eac0369:      * class interface
1:eac0369:      *
1:eac0369:      */
1:f77f36d:     JoinResultSet(NoPutResultSet leftResultSet,
1:eac0369: 								   int leftNumCols,
1:eac0369: 								   NoPutResultSet rightResultSet,
1:eac0369: 								   int rightNumCols,
1:eac0369: 								   Activation activation,
1:eac0369: 								   GeneratedMethod restriction,
1:eac0369: 								   int resultSetNumber,
1:eac0369: 								   boolean oneRowRightSide,
1:eac0369: 								   boolean notExistsRightSide,
1:eac0369: 								   double optimizerEstimatedRowCount,
1:eac0369: 								   double optimizerEstimatedCost,
1:f77f36d: 								   String userSuppliedOptimizerOverrides)
1:eac0369:     {
1:eac0369: 		super(activation, resultSetNumber, optimizerEstimatedRowCount, 
1:eac0369: 			  optimizerEstimatedCost);
1:eac0369:         this.leftResultSet = leftResultSet;
1:eac0369: 		this.leftNumCols = leftNumCols;
1:eac0369:         this.rightResultSet = rightResultSet;
1:eac0369: 		this.rightNumCols = rightNumCols;
1:eac0369:         this.restriction = restriction;
1:eac0369: 		this.oneRowRightSide = oneRowRightSide;
1:eac0369: 		this.notExistsRightSide = notExistsRightSide;
1:7008b63: 
1:c7248d5: 		this.userSuppliedOptimizerOverrides = userSuppliedOptimizerOverrides;
1:7008b63: 		
1:7008b63: 		recordConstructorTime();
2:eac0369:     }
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// ResultSet interface (leftover from NoPutResultSet)
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Clear any private state that changes during scans.
1:eac0369: 	 * This includes things like the last row seen, etc.
1:eac0369: 	 * THis does not include immutable things that are
1:eac0369: 	 * typically set up in the constructor.
1:eac0369: 	 * <p>
1:eac0369: 	 * This method is called on open()/close() and reopen()
1:eac0369: 	 */
1:eac0369: 	void clearScanState()
1:eac0369: 	{
1:eac0369: 		leftRow = null;
1:eac0369: 		rightRow = null;
1:eac0369: 		mergedRow = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * open a scan on the join. 
1:eac0369: 	 * For a join, this means:
1:eac0369: 	 *	o  Open the left ResultSet
1:eac0369: 	 *  o  Do a getNextRow() on the left ResultSet to establish a position
1:eac0369: 	 *	   and get "parameter values" for the right ResultSet.
1:eac0369: 	 *	   NOTE: It is possible for the getNextRow() to return null, in which
1:eac0369: 	 *	   case there is no need to open the RightResultSet.  We must remember
1:eac0369: 	 *	   this condition.
1:eac0369: 	 *	o  If the getNextRow() on the left ResultSet succeeded, then open()
1:eac0369: 	 *	   the right ResultSet.
1:eac0369: 	 *
1:eac0369: 	 * scan parameters are evaluated at each open, so there is probably 
1:eac0369: 	 * some way of altering their values...
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369:      */
1:eac0369: 	public void	openCore() throws StandardException
1:eac0369: 	{
2:eac0369: 		clearScanState();
1:eac0369: 
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 	    	SanityManager.ASSERT( ! isOpen, "JoinResultSet already open");
1:eac0369: 
1:eac0369: 		leftResultSet.openCore();
1:0a6a846: 
1:0a6a846: 		try {
1:0a6a846: 			leftRow = leftResultSet.getNextRowCore();
1:0a6a846: 			if (leftRow != null)
1:0a6a846: 			{
1:0a6a846: 				openRight();
1:0a6a846: 				rowsSeenLeft++;
1:0a6a846: 			}
1:0a6a846: 		} catch (StandardException e) {
1:0a6a846: 			// DERBY-4330 Result set tree must be atomically open or
1:0a6a846: 			// closed for reuse to work (after DERBY-827).
1:0a6a846: 
1:0a6a846: 			isOpen = true; // to make close work:
1:0a6a846: 			try { close(); } catch (StandardException ee) {}
1:0a6a846: 			throw e;
1:eac0369: 		}
1:0a6a846: 
1:0a6a846: 	    isOpen = true;
1:eac0369: 		numOpens++;
1:eac0369: 
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * reopen a a join.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cursor finished.
1:eac0369:      */
1:eac0369: 	public void	reopenCore() throws StandardException 
1:eac0369: 	{
1:eac0369: 		clearScanState();
1:eac0369: 
1:eac0369: 		// Reopen the left and get the next row
1:eac0369: 		leftResultSet.reopenCore();
2:eac0369: 		leftRow = leftResultSet.getNextRowCore();
2:eac0369: 		if (leftRow != null)
1:eac0369: 		{
1:eac0369: 			// Open the right
2:eac0369: 			openRight();
2:eac0369: 			rowsSeenLeft++;
1:eac0369: 		}
1:eac0369: 		else if (isRightOpen)
1:eac0369: 		{
1:eac0369: 			closeRight();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		numOpens++;
1:eac0369: 
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * If the result set has been opened,
1:eac0369: 	 * close the open scan.
1:eac0369: 	 * <n>
1:eac0369: 	 * <B>WARNING</B> does not track close
1:eac0369: 	 * time, since it is expected to be called
1:eac0369: 	 * directly by its subclasses, and we don't
1:eac0369: 	 * want to skew the times
1:eac0369: 	 * 
2:eac0369: 	 * @exception StandardException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void	close() throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		if ( isOpen )
1:eac0369: 	    {
1:eac0369: 	        leftResultSet.close();
1:eac0369: 			if (isRightOpen)
1:eac0369: 			{
1:eac0369: 				closeRight();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			super.close();
1:eac0369: 	    }
1:eac0369: 		else
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 				SanityManager.DEBUG("CloseRepeatInfo","Close of JoinResultSet repeated");
1:eac0369: 
1:7e37413: 		clearScanState();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void finish() throws StandardException {
1:eac0369: 		leftResultSet.finish();
1:eac0369: 		rightResultSet.finish();
1:eac0369: 		super.finish();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// CursorResultSet interface
1:eac0369: 	//
1:eac0369: 	/**
1:eac0369: 	 * A join is combining rows from two sources, so it has no
1:eac0369: 	 * single row location to return; just return a null.
1:eac0369: 	 *
1:eac0369: 	 * @see CursorResultSet
1:eac0369: 	 *
1:eac0369: 	 * @return the row location of the current cursor row.
1:eac0369: 	 */
1:eac0369: 	public RowLocation getRowLocation() {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("Join used in positioned update/delete");
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * A join is combining rows from two sources, so it 
1:eac0369: 	 * should never be used in a positioned update or delete.
1:eac0369: 	 *
1:eac0369: 	 * @see CursorResultSet
1:eac0369: 	 *
1:eac0369: 	 * @return a null value.
1:eac0369: 	 */
1:eac0369: 	public ExecRow getCurrentRow() {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("Join used in positioned update/delete");
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* Class implementation */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * open the rightResultSet.  If already open,
1:eac0369: 	 * just reopen.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	protected void openRight() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (isRightOpen)
1:eac0369: 		{
1:eac0369: 			rightResultSet.reopenCore();
1:eac0369: 		}	
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			rightResultSet.openCore();
1:eac0369: 			isRightOpen = true;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * close the rightResultSet
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	protected void closeRight() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(isRightOpen, "isRightOpen is expected to be true");
1:eac0369: 		rightResultSet.close();
1:eac0369: 		isRightOpen = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0a6a846
/////////////////////////////////////////////////////////////////////////
1: 
1: 		try {
1: 			leftRow = leftResultSet.getNextRowCore();
1: 			if (leftRow != null)
1: 			{
1: 				openRight();
1: 				rowsSeenLeft++;
1: 			}
1: 		} catch (StandardException e) {
1: 			// DERBY-4330 Result set tree must be atomically open or
1: 			// closed for reuse to work (after DERBY-827).
1: 
1: 			isOpen = true; // to make close work:
1: 			try { close(); } catch (StandardException ee) {}
1: 			throw e;
1: 
1: 	    isOpen = true;
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:7e37413
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		clearScanState();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7008b63
/////////////////////////////////////////////////////////////////////////
1: 
1: 		
1: 		recordConstructorTime();
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
1: abstract class JoinResultSet extends NoPutResultSetImpl
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     JoinResultSet(NoPutResultSet leftResultSet,
/////////////////////////////////////////////////////////////////////////
1: 								   String userSuppliedOptimizerOverrides)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.JoinResultSet
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.ResultSet;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: /**
1:  * Takes 2 NoPutResultSets and a join filter and returns
1:  * the join's rows satisfying the filter as a result set.
1:  *
0:  * @author ames
1:  */
0: public abstract class JoinResultSet extends NoPutResultSetImpl
1: 	implements CursorResultSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/* Run time statistics variables */
1: 	public int rowsSeenLeft;
1: 	public int rowsSeenRight;
1: 	public int rowsReturned;
1: 	public long restrictionTime;
1: 
1: 	protected boolean isRightOpen;
1: 	protected ExecRow leftRow;
1: 	protected ExecRow rightRow;
1: 	protected ExecRow mergedRow;
1: 
1:     // set in constructor and not altered during
1:     // life of object.
1:     public	  NoPutResultSet leftResultSet;
1: 	protected int		  leftNumCols;
1: 	public	  NoPutResultSet rightResultSet;
1: 	protected int		  rightNumCols;
1:     protected GeneratedMethod restriction;
0:     protected GeneratedMethod closeCleanup;
1: 	public	  boolean oneRowRightSide;
1: 	public	  boolean notExistsRightSide;  //right side is NOT EXISTS
1: 
1:     /*
1:      * class interface
1:      *
1:      */
0:     public JoinResultSet(NoPutResultSet leftResultSet,
1: 								   int leftNumCols,
1: 								   NoPutResultSet rightResultSet,
1: 								   int rightNumCols,
1: 								   Activation activation,
1: 								   GeneratedMethod restriction,
1: 								   int resultSetNumber,
1: 								   boolean oneRowRightSide,
1: 								   boolean notExistsRightSide,
1: 								   double optimizerEstimatedRowCount,
1: 								   double optimizerEstimatedCost,
0: 								   GeneratedMethod closeCleanup)
1:     {
1: 		super(activation, resultSetNumber, optimizerEstimatedRowCount, 
1: 			  optimizerEstimatedCost);
1:         this.leftResultSet = leftResultSet;
1: 		this.leftNumCols = leftNumCols;
1:         this.rightResultSet = rightResultSet;
1: 		this.rightNumCols = rightNumCols;
1:         this.restriction = restriction;
1: 		this.oneRowRightSide = oneRowRightSide;
1: 		this.notExistsRightSide = notExistsRightSide;
0:         this.closeCleanup = closeCleanup;
0: 		constructorTime += getElapsedMillis(beginTime);
1:     }
1: 
1: 	//
1: 	// ResultSet interface (leftover from NoPutResultSet)
1: 	//
1: 
1: 	/**
1: 	 * Clear any private state that changes during scans.
1: 	 * This includes things like the last row seen, etc.
1: 	 * THis does not include immutable things that are
1: 	 * typically set up in the constructor.
1: 	 * <p>
1: 	 * This method is called on open()/close() and reopen()
1: 	 */
1: 	void clearScanState()
1: 	{
1: 		leftRow = null;
1: 		rightRow = null;
1: 		mergedRow = null;
1: 	}
1: 
1: 	/**
1:      * open a scan on the join. 
1: 	 * For a join, this means:
1: 	 *	o  Open the left ResultSet
1: 	 *  o  Do a getNextRow() on the left ResultSet to establish a position
1: 	 *	   and get "parameter values" for the right ResultSet.
1: 	 *	   NOTE: It is possible for the getNextRow() to return null, in which
1: 	 *	   case there is no need to open the RightResultSet.  We must remember
1: 	 *	   this condition.
1: 	 *	o  If the getNextRow() on the left ResultSet succeeded, then open()
1: 	 *	   the right ResultSet.
1: 	 *
1: 	 * scan parameters are evaluated at each open, so there is probably 
1: 	 * some way of altering their values...
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1:      */
1: 	public void	openCore() throws StandardException
1: 	{
1: 		clearScanState();
1: 
1: 		beginTime = getCurrentTimeMillis();
1: 		if (SanityManager.DEBUG)
1: 	    	SanityManager.ASSERT( ! isOpen, "JoinResultSet already open");
1: 
0: 	    isOpen = true;
1: 		leftResultSet.openCore();
1: 		leftRow = leftResultSet.getNextRowCore();
1: 		if (leftRow != null)
1: 		{
1: 			openRight();
1: 			rowsSeenLeft++;
1: 		}
1: 		numOpens++;
1: 
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/**
1:      * reopen a a join.
1: 	 *
1: 	 * @exception StandardException thrown if cursor finished.
1:      */
1: 	public void	reopenCore() throws StandardException 
1: 	{
1: 		clearScanState();
1: 
1: 		// Reopen the left and get the next row
1: 		leftResultSet.reopenCore();
1: 		leftRow = leftResultSet.getNextRowCore();
1: 		if (leftRow != null)
1: 		{
1: 			// Open the right
1: 			openRight();
1: 			rowsSeenLeft++;
1: 		}
1: 		else if (isRightOpen)
1: 		{
1: 			closeRight();
1: 		}
1: 
1: 		numOpens++;
1: 
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 
1: 	/**
1: 	 * If the result set has been opened,
1: 	 * close the open scan.
1: 	 * <n>
1: 	 * <B>WARNING</B> does not track close
1: 	 * time, since it is expected to be called
1: 	 * directly by its subclasses, and we don't
1: 	 * want to skew the times
1: 	 * 
1: 	 * @exception StandardException thrown on error
1: 	 */
1: 	public void	close() throws StandardException
1: 	{
1: 		clearScanState();
1: 
1: 		if ( isOpen )
1: 	    {
0: 			if (closeCleanup != null) {
0: 				closeCleanup.invoke(activation); // let activation tidy up
1: 			}
1: 
1: 	        leftResultSet.close();
1: 			if (isRightOpen)
1: 			{
1: 				closeRight();
1: 			}
1: 
1: 			super.close();
1: 	    }
1: 		else
1: 			if (SanityManager.DEBUG)
1: 				SanityManager.DEBUG("CloseRepeatInfo","Close of JoinResultSet repeated");
1: 
1: 	}
1: 
1: 	public void finish() throws StandardException {
1: 		leftResultSet.finish();
1: 		rightResultSet.finish();
1: 		super.finish();
1: 	}
1: 
1: 	//
1: 	// CursorResultSet interface
1: 	//
1: 	/**
1: 	 * A join is combining rows from two sources, so it has no
1: 	 * single row location to return; just return a null.
1: 	 *
1: 	 * @see CursorResultSet
1: 	 *
1: 	 * @return the row location of the current cursor row.
1: 	 */
1: 	public RowLocation getRowLocation() {
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("Join used in positioned update/delete");
1: 		return null;
1: 	}
1: 
1: 	/**
1: 	 * A join is combining rows from two sources, so it 
1: 	 * should never be used in a positioned update or delete.
1: 	 *
1: 	 * @see CursorResultSet
1: 	 *
1: 	 * @return a null value.
1: 	 */
1: 	public ExecRow getCurrentRow() {
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("Join used in positioned update/delete");
1: 		return null;
1: 	}
1: 
1: 	/* Class implementation */
1: 
1: 	/**
1: 	 * open the rightResultSet.  If already open,
1: 	 * just reopen.
1: 	 *
0: 	 * @return Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	protected void openRight() throws StandardException
1: 	{
1: 		if (isRightOpen)
1: 		{
1: 			rightResultSet.reopenCore();
1: 		}	
1: 		else
1: 		{
1: 			rightResultSet.openCore();
1: 			isRightOpen = true;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * close the rightResultSet
1: 	 *
0: 	 * @return Nothing
1: 	 *
1: 	 * @exception StandardException thrown on error
1: 	 */
1: 	protected void closeRight() throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(isRightOpen, "isRightOpen is expected to be true");
1: 		rightResultSet.close();
1: 		isRightOpen = false;
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:c7248d5
/////////////////////////////////////////////////////////////////////////
0: 	
1: 	String userSuppliedOptimizerOverrides;
/////////////////////////////////////////////////////////////////////////
0: 								   String userSuppliedOptimizerOverrides,
/////////////////////////////////////////////////////////////////////////
1: 		this.userSuppliedOptimizerOverrides = userSuppliedOptimizerOverrides;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: /**
0:  * Takes 2 NoPutResultSets and a join filter and returns
0:  * the join's rows satisfying the filter as a result set.
0:  *
0:  * @author ames
0:  */
0: public abstract class JoinResultSet extends NoPutResultSetImpl
0: 	implements CursorResultSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/* Run time statistics variables */
0: 	public int rowsSeenLeft;
0: 	public int rowsSeenRight;
0: 	public int rowsReturned;
0: 	public long restrictionTime;
0: 
0: 	protected boolean isRightOpen;
0: 	protected ExecRow leftRow;
0: 	protected ExecRow rightRow;
0: 	protected ExecRow mergedRow;
0: 
0:     // set in constructor and not altered during
0:     // life of object.
0:     public	  NoPutResultSet leftResultSet;
0: 	protected int		  leftNumCols;
0: 	public	  NoPutResultSet rightResultSet;
0: 	protected int		  rightNumCols;
0:     protected GeneratedMethod restriction;
0:     protected GeneratedMethod closeCleanup;
0: 	public	  boolean oneRowRightSide;
0: 	public	  boolean notExistsRightSide;  //right side is NOT EXISTS
0: 
0:     /*
0:      * class interface
0:      *
0:      */
0:     public JoinResultSet(NoPutResultSet leftResultSet,
0: 								   int leftNumCols,
0: 								   NoPutResultSet rightResultSet,
0: 								   int rightNumCols,
0: 								   Activation activation,
0: 								   GeneratedMethod restriction,
0: 								   int resultSetNumber,
0: 								   boolean oneRowRightSide,
0: 								   boolean notExistsRightSide,
0: 								   double optimizerEstimatedRowCount,
0: 								   double optimizerEstimatedCost,
0: 								   GeneratedMethod closeCleanup)
0:     {
0: 		super(activation, resultSetNumber, optimizerEstimatedRowCount, 
0: 			  optimizerEstimatedCost);
0:         this.leftResultSet = leftResultSet;
0: 		this.leftNumCols = leftNumCols;
0:         this.rightResultSet = rightResultSet;
0: 		this.rightNumCols = rightNumCols;
0:         this.restriction = restriction;
0: 		this.oneRowRightSide = oneRowRightSide;
0: 		this.notExistsRightSide = notExistsRightSide;
0:         this.closeCleanup = closeCleanup;
0: 		constructorTime += getElapsedMillis(beginTime);
0:     }
0: 
0: 	//
0: 	// ResultSet interface (leftover from NoPutResultSet)
0: 	//
0: 
0: 	/**
0: 	 * Clear any private state that changes during scans.
0: 	 * This includes things like the last row seen, etc.
0: 	 * THis does not include immutable things that are
0: 	 * typically set up in the constructor.
0: 	 * <p>
0: 	 * This method is called on open()/close() and reopen()
0: 	 */
0: 	void clearScanState()
0: 	{
0: 		leftRow = null;
0: 		rightRow = null;
0: 		mergedRow = null;
0: 	}
0: 
0: 	/**
0:      * open a scan on the join. 
0: 	 * For a join, this means:
0: 	 *	o  Open the left ResultSet
0: 	 *  o  Do a getNextRow() on the left ResultSet to establish a position
0: 	 *	   and get "parameter values" for the right ResultSet.
0: 	 *	   NOTE: It is possible for the getNextRow() to return null, in which
0: 	 *	   case there is no need to open the RightResultSet.  We must remember
0: 	 *	   this condition.
0: 	 *	o  If the getNextRow() on the left ResultSet succeeded, then open()
0: 	 *	   the right ResultSet.
0: 	 *
0: 	 * scan parameters are evaluated at each open, so there is probably 
0: 	 * some way of altering their values...
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0:      */
0: 	public void	openCore() throws StandardException
0: 	{
0: 		clearScanState();
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 		if (SanityManager.DEBUG)
0: 	    	SanityManager.ASSERT( ! isOpen, "JoinResultSet already open");
0: 
0: 	    isOpen = true;
0: 		leftResultSet.openCore();
0: 		leftRow = leftResultSet.getNextRowCore();
0: 		if (leftRow != null)
0: 		{
0: 			openRight();
0: 			rowsSeenLeft++;
0: 		}
0: 		numOpens++;
0: 
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0:      * reopen a a join.
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0:      */
0: 	public void	reopenCore() throws StandardException 
0: 	{
0: 		clearScanState();
0: 
0: 		// Reopen the left and get the next row
0: 		leftResultSet.reopenCore();
0: 		leftRow = leftResultSet.getNextRowCore();
0: 		if (leftRow != null)
0: 		{
0: 			// Open the right
0: 			openRight();
0: 			rowsSeenLeft++;
0: 		}
0: 		else if (isRightOpen)
0: 		{
0: 			closeRight();
0: 		}
0: 
0: 		numOpens++;
0: 
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 
0: 	/**
0: 	 * If the result set has been opened,
0: 	 * close the open scan.
0: 	 * <n>
0: 	 * <B>WARNING</B> does not track close
0: 	 * time, since it is expected to be called
0: 	 * directly by its subclasses, and we don't
0: 	 * want to skew the times
0: 	 * 
0: 	 * @exception StandardException thrown on error
0: 	 */
0: 	public void	close() throws StandardException
0: 	{
0: 		clearScanState();
0: 
0: 		if ( isOpen )
0: 	    {
0: 			if (closeCleanup != null) {
0: 				closeCleanup.invoke(activation); // let activation tidy up
0: 			}
0: 
0: 	        leftResultSet.close();
0: 			if (isRightOpen)
0: 			{
0: 				closeRight();
0: 			}
0: 
0: 			super.close();
0: 	    }
0: 		else
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.DEBUG("CloseRepeatInfo","Close of JoinResultSet repeated");
0: 
0: 	}
0: 
0: 	public void finish() throws StandardException {
0: 		leftResultSet.finish();
0: 		rightResultSet.finish();
0: 		super.finish();
0: 	}
0: 
0: 	//
0: 	// CursorResultSet interface
0: 	//
0: 	/**
0: 	 * A join is combining rows from two sources, so it has no
0: 	 * single row location to return; just return a null.
0: 	 *
0: 	 * @see CursorResultSet
0: 	 *
0: 	 * @return the row location of the current cursor row.
0: 	 */
0: 	public RowLocation getRowLocation() {
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("Join used in positioned update/delete");
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	 * A join is combining rows from two sources, so it 
0: 	 * should never be used in a positioned update or delete.
0: 	 *
0: 	 * @see CursorResultSet
0: 	 *
0: 	 * @return a null value.
0: 	 */
0: 	public ExecRow getCurrentRow() {
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("Join used in positioned update/delete");
0: 		return null;
0: 	}
0: 
0: 	/* Class implementation */
0: 
0: 	/**
0: 	 * open the rightResultSet.  If already open,
0: 	 * just reopen.
0: 	 *
0: 	 * @return Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	protected void openRight() throws StandardException
0: 	{
0: 		if (isRightOpen)
0: 		{
0: 			rightResultSet.reopenCore();
0: 		}	
0: 		else
0: 		{
0: 			rightResultSet.openCore();
0: 			isRightOpen = true;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * close the rightResultSet
0: 	 *
0: 	 * @return Nothing
0: 	 *
0: 	 * @exception StandardException thrown on error
0: 	 */
0: 	protected void closeRight() throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(isRightOpen, "isRightOpen is expected to be true");
0: 		rightResultSet.close();
0: 		isRightOpen = false;
0: 	}
0: 
0: }
============================================================================