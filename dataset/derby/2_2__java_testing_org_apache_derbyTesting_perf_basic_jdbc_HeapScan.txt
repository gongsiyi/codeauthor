1:c3bf4ea: /*
2:c3bf4ea: 
1:c3bf4ea: Derby - Class org.apache.derbyTesting.perf.basic.jdbc.HeapScan
1:c3bf4ea: 
1:c3bf4ea: Licensed to the Apache Software Foundation (ASF) under one or more
1:c3bf4ea: contributor license agreements.  See the NOTICE file distributed with
1:c3bf4ea: this work for additional information regarding copyright ownership.
1:c3bf4ea: The ASF licenses this file to You under the Apache License, Version 2.0
1:c3bf4ea: (the "License"); you may not use this file except in compliance with
1:c3bf4ea: the License.  You may obtain a copy of the License at
1:c3bf4ea: 
1:c3bf4ea: http://www.apache.org/licenses/LICENSE-2.0
1:c3bf4ea: 
1:c3bf4ea: Unless required by applicable law or agreed to in writing, software
1:c3bf4ea: distributed under the License is distributed on an "AS IS" BASIS,
1:c3bf4ea: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c3bf4ea: See the License for the specific language governing permissions and
1:c3bf4ea: limitations under the License.
1:c3bf4ea: 
1:c3bf4ea: */
1:c3bf4ea: package org.apache.derbyTesting.perf.basic.jdbc;
1:c3bf4ea: 
1:c3bf4ea: 
1:1ae02c9: import java.sql.Connection;
1:1ae02c9: import java.sql.PreparedStatement;
1:1ae02c9: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:c3bf4ea: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c3bf4ea: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1:c3bf4ea: 
1:c3bf4ea: /**
1:c3bf4ea:  * Heap Scan tests
1:c3bf4ea:  *
1:c3bf4ea:  */
1:c3bf4ea: public class HeapScan extends JDBCPerfTestCase {
1:c3bf4ea: 
1:c3bf4ea:     PreparedStatement select = null;
1:876391e:     private PreparedStatement selectWithPred;
1:c3bf4ea:     protected static String tableName = "SCANTEST";
1:c3bf4ea:     protected static int rowcount = 10000;
1:876391e:     private boolean binaryData;
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * @return suite of tests
1:c3bf4ea:      */
1:c3bf4ea:     public static Test suite()
1:c3bf4ea:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("HeapScanTests");
1:876391e:         suite.addTest(baseSuite("HeapScan:CHAR", false));
1:876391e:         suite.addTest(baseSuite("HeapScan:BINARY", true));
1:876391e:         return suite;
1:876391e:     }
1:876391e: 
1:876391e:     /**
1:876391e:      * Create a suite of all the tests in this class with the appropriate
1:876391e:      * decorator.
1:876391e:      *
1:876391e:      * @param name the name of the returned test suite
1:876391e:      * @param binaryData whether or not these tests should use binary data
1:876391e:      * instead of character data
1:876391e:      * @return a test suite
1:876391e:      */
1:876391e:     private static Test baseSuite(String name, boolean binaryData) {
1:c3bf4ea:         int iterations = 700, repeats = 4;
1:c3bf4ea: 
1:1ae02c9:         BaseTestSuite heapScan = new BaseTestSuite(name);
1:876391e:         heapScan.addTest(new HeapScan("Scan100", binaryData,
1:876391e:                                       iterations, repeats));
1:876391e:         heapScan.addTest(new HeapScan("Scan100GetData", binaryData,
1:876391e:                                       iterations, repeats));
1:876391e:         heapScan.addTest(new HeapScan("Scan100WithPredicate", binaryData,
1:876391e:                                       iterations, repeats));
1:876391e:         return new BaseLoad100TestSetup(
1:876391e:                 heapScan, rowcount, tableName, binaryData);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Scan tests.
1:c3bf4ea:      * @param name test name
1:c3bf4ea:      * @param iterations iterations of the test to measure
1:c3bf4ea:      * @param repeats number of times to repeat the test
1:c3bf4ea:      */
1:c3bf4ea:     public HeapScan(String name,int iterations, int repeats)
1:c3bf4ea:     {
1:876391e:         this(name, false, iterations, repeats);
1:876391e:     }
1:876391e: 
1:876391e:     /**
1:876391e:      * Scan tests.
1:876391e:      * @param name test name
1:876391e:      * @param binaryData whether or not binary data should be used instead
1:876391e:      *                   of character data
1:876391e:      * @param iterations iterations of the test to measure
1:876391e:      * @param repeats number of times to repeat the test
1:876391e:      */
1:876391e:     public HeapScan(String name, boolean binaryData,
1:876391e:                     int iterations, int repeats)
1:876391e:     {
1:c3bf4ea:         super(name,iterations,repeats);
1:876391e:         this.binaryData = binaryData;
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Do the necessary setup for the test ,prepare the statement
1:c3bf4ea:      */
1:c3bf4ea:     public void setUp() throws Exception {
1:876391e: 
1:f18f8b0:         select = prepareStatement("SELECT * FROM " + tableName);
1:c3bf4ea: 
1:876391e:         // Create a SELECT statement that uses predicates. Also initialize
1:876391e:         // the predicates with some data of the correct type for this test
1:876391e:         // (either character data or binary data).
1:876391e:         selectWithPred = prepareStatement(
1:876391e:                 "SELECT * FROM " + tableName + " WHERE " +
1:876391e:                 "c6=? OR c7=? OR c8=? OR c9=?");
1:876391e:         Object predicate = "abcdef";
1:876391e:         if (binaryData) {
1:876391e:             predicate = ((String) predicate).getBytes("US-ASCII");
1:876391e:         }
1:876391e:         for (int i = 1; i <= 4; i++) {
1:876391e:             selectWithPred.setObject(i, predicate);
1:876391e:         }
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Override initializeConnection to set the autocommit to false
1:c3bf4ea:      */
1:c3bf4ea:     public void initializeConnection(Connection conn)
1:c3bf4ea:     throws SQLException
1:c3bf4ea:     {
1:c3bf4ea:         conn.setAutoCommit(false);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * This test simply tests a heap scan which iterates through all the
1:c3bf4ea:      * rows in the columns. The column data are not retrieved using getXXX
1:c3bf4ea:      * @throws Exception
1:c3bf4ea:      */
1:c3bf4ea:     public void Scan100() throws Exception
1:c3bf4ea:     {
1:c3bf4ea: 
1:c3bf4ea:         ResultSet rs = select.executeQuery();
1:c3bf4ea:         int actualCount = 0;
1:c3bf4ea:         while (rs.next()) {
1:c3bf4ea:             actualCount++;
1:c3bf4ea:         }
1:c3bf4ea: 
1:c3bf4ea:         assertEquals(actualCount,rowcount);
1:c3bf4ea:         rs.close();
1:f18f8b0:         commit();
1:c3bf4ea: 
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * This test simply tests a heap scan which iterates through all the
1:c3bf4ea:      * rows in the columns. The column data are retrieved using getXXX
1:c3bf4ea:      * @throws Exception
1:c3bf4ea:      */
1:c3bf4ea:     public void Scan100GetData() throws Exception
1:c3bf4ea:     {
1:c3bf4ea:         ResultSet rs = select.executeQuery();
1:c3bf4ea: 
1:c3bf4ea:         int actualCount = 0;
1:c3bf4ea:         while (rs.next()) {
1:c3bf4ea: 
1:c3bf4ea:             int i1 = rs.getInt(1);
1:c3bf4ea:             int i2 = rs.getInt(2);
1:c3bf4ea:             int i3 = rs.getInt(3);
1:c3bf4ea:             int i4 = rs.getInt(4);
1:c3bf4ea:             int i5 = rs.getInt(5);
1:c3bf4ea: 
1:876391e:             Object c6 = rs.getObject(6);
1:876391e:             Object c7 = rs.getObject(7);
1:876391e:             Object c8 = rs.getObject(8);
1:876391e:             Object c9 = rs.getObject(9);
1:c3bf4ea: 
1:c3bf4ea:             actualCount++;
1:c3bf4ea:         }
1:c3bf4ea:         assertEquals(actualCount,rowcount);
1:c3bf4ea:         rs.close();
1:f18f8b0:         commit();
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:876391e:      * Test the performance of a table scan that needs to compare all the
1:876391e:      * char values in the table with some specified values. Used to test the
1:876391e:      * performance gains in DERBY-4608.
1:876391e:      */
1:876391e:     public void Scan100WithPredicate() throws SQLException {
1:876391e:         ResultSet rs = selectWithPred.executeQuery();
1:876391e:         assertFalse("should be empty", rs.next());
1:876391e:         rs.close();
1:876391e:         commit();
1:876391e:     }
1:876391e: 
1:876391e:     /**
1:c3bf4ea:      * Cleanup - close resources opened in this test.
1:c3bf4ea:      **/
1:c3bf4ea:     public void tearDown() throws Exception {
1:f18f8b0:         // The statements will be closed by BaseJDBCTestCase.tearDown(), but
1:f18f8b0:         // we need to set the fields to null to allow them to be garbage
1:f18f8b0:         // collected.
1:c3bf4ea:         select = null;
1:f18f8b0:         selectWithPred = null;
1:c3bf4ea:         super.tearDown();
1:c3bf4ea:     }
1:c3bf4ea: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("HeapScanTests");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite heapScan = new BaseTestSuite(name);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f18f8b0
/////////////////////////////////////////////////////////////////////////
1:         select = prepareStatement("SELECT * FROM " + tableName);
/////////////////////////////////////////////////////////////////////////
1:         commit();
/////////////////////////////////////////////////////////////////////////
1:         commit();
/////////////////////////////////////////////////////////////////////////
1:         // The statements will be closed by BaseJDBCTestCase.tearDown(), but
1:         // we need to set the fields to null to allow them to be garbage
1:         // collected.
1:         selectWithPred = null;
commit:876391e
/////////////////////////////////////////////////////////////////////////
1:     private PreparedStatement selectWithPred;
1:     private boolean binaryData;
0:         TestSuite suite = new TestSuite("HeapScanTests");
1:         suite.addTest(baseSuite("HeapScan:CHAR", false));
1:         suite.addTest(baseSuite("HeapScan:BINARY", true));
1:         return suite;
1:     }
1: 
1:     /**
1:      * Create a suite of all the tests in this class with the appropriate
1:      * decorator.
1:      *
1:      * @param name the name of the returned test suite
1:      * @param binaryData whether or not these tests should use binary data
1:      * instead of character data
1:      * @return a test suite
1:      */
1:     private static Test baseSuite(String name, boolean binaryData) {
0:         TestSuite heapScan = new TestSuite(name);
1:         heapScan.addTest(new HeapScan("Scan100", binaryData,
1:                                       iterations, repeats));
1:         heapScan.addTest(new HeapScan("Scan100GetData", binaryData,
1:                                       iterations, repeats));
1:         heapScan.addTest(new HeapScan("Scan100WithPredicate", binaryData,
1:                                       iterations, repeats));
1:         return new BaseLoad100TestSetup(
1:                 heapScan, rowcount, tableName, binaryData);
/////////////////////////////////////////////////////////////////////////
1:         this(name, false, iterations, repeats);
1:     }
1: 
1:     /**
1:      * Scan tests.
1:      * @param name test name
1:      * @param binaryData whether or not binary data should be used instead
1:      *                   of character data
1:      * @param iterations iterations of the test to measure
1:      * @param repeats number of times to repeat the test
1:      */
1:     public HeapScan(String name, boolean binaryData,
1:                     int iterations, int repeats)
1:     {
1:         this.binaryData = binaryData;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Create a SELECT statement that uses predicates. Also initialize
1:         // the predicates with some data of the correct type for this test
1:         // (either character data or binary data).
1:         selectWithPred = prepareStatement(
1:                 "SELECT * FROM " + tableName + " WHERE " +
1:                 "c6=? OR c7=? OR c8=? OR c9=?");
1:         Object predicate = "abcdef";
1:         if (binaryData) {
1:             predicate = ((String) predicate).getBytes("US-ASCII");
1:         }
1:         for (int i = 1; i <= 4; i++) {
1:             selectWithPred.setObject(i, predicate);
1:         }
/////////////////////////////////////////////////////////////////////////
1:             Object c6 = rs.getObject(6);
1:             Object c7 = rs.getObject(7);
1:             Object c8 = rs.getObject(8);
1:             Object c9 = rs.getObject(9);
/////////////////////////////////////////////////////////////////////////
1:      * Test the performance of a table scan that needs to compare all the
1:      * char values in the table with some specified values. Used to test the
1:      * performance gains in DERBY-4608.
1:      */
1:     public void Scan100WithPredicate() throws SQLException {
1:         ResultSet rs = selectWithPred.executeQuery();
1:         assertFalse("should be empty", rs.next());
1:         rs.close();
1:         commit();
1:     }
1: 
1:     /**
0:         selectWithPred = null; // will be closed in super.tearDown()
commit:c3bf4ea
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.basic.jdbc.HeapScan
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.perf.basic.jdbc;
1: 
1: 
0: import java.sql.*;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1: 
1: /**
1:  * Heap Scan tests
1:  *
1:  */
1: public class HeapScan extends JDBCPerfTestCase {
1: 
1:     PreparedStatement select = null;
1:     protected static String tableName = "SCANTEST";
1:     protected static int rowcount = 10000;
1: 
1:     /**
1:      * @return suite of tests
1:      */
1:     public static Test suite()
1:     {
1:         int iterations = 700, repeats = 4;
1: 
0:         TestSuite heapScan = new TestSuite("HeapScanTests");
0:         heapScan.addTest(new HeapScan("Scan100",iterations,repeats));
0:         heapScan.addTest(new HeapScan("Scan100GetData",iterations,repeats));
0:         return new BaseLoad100TestSetup(heapScan,rowcount,tableName);
1:     }
1: 
1:     /**
1:      * Scan tests.
1:      * @param name test name
1:      * @param iterations iterations of the test to measure
1:      * @param repeats number of times to repeat the test
1:      */
1:     public HeapScan(String name,int iterations, int repeats)
1:     {
1:         super(name,iterations,repeats);
1:     }
1: 
1:     /**
1:      * Do the necessary setup for the test ,prepare the statement
1:      */
1:     public void setUp() throws Exception {
1: 
0:         select = openDefaultConnection().prepareStatement("SELECT * FROM "+tableName);
1:     }
1: 
1: 
1:     /**
1:      * Override initializeConnection to set the autocommit to false
1:      */
1:     public void initializeConnection(Connection conn)
1:     throws SQLException
1:     {
1:         conn.setAutoCommit(false);
1:     }
1: 
1: 
1:     /**
1:      * This test simply tests a heap scan which iterates through all the
1:      * rows in the columns. The column data are not retrieved using getXXX
1:      * @throws Exception
1:      */
1:     public void Scan100() throws Exception
1:     {
1: 
1:         ResultSet rs = select.executeQuery();
1:         int actualCount = 0;
1:         while (rs.next()) {
1:             actualCount++;
1:         }
1: 
1:         assertEquals(actualCount,rowcount);
1:         rs.close();
0:         getConnection().commit();
1: 
1:     }
1: 
1:     /**
1:      * This test simply tests a heap scan which iterates through all the
1:      * rows in the columns. The column data are retrieved using getXXX
1:      * @throws Exception
1:      */
1:     public void Scan100GetData() throws Exception
1:     {
1:         ResultSet rs = select.executeQuery();
1: 
1:         int actualCount = 0;
1:         while (rs.next()) {
1: 
1:             int i1 = rs.getInt(1);
1:             int i2 = rs.getInt(2);
1:             int i3 = rs.getInt(3);
1:             int i4 = rs.getInt(4);
1:             int i5 = rs.getInt(5);
1: 
0:             String c6 = rs.getString(6);
0:             String c7 = rs.getString(7);
0:             String c8 = rs.getString(8);
0:             String c9 = rs.getString(9);
1: 
1:             actualCount++;
1:         }
1:         assertEquals(actualCount,rowcount);
0:         getConnection().commit();
1:         rs.close();
1:     }
1: 
1:     /**
1:      * Cleanup - close resources opened in this test.
1:      **/
1:     public void tearDown() throws Exception {
1: 
0:         select.close();
1:         select = null;
1:         super.tearDown();
1:     }
1: }
============================================================================