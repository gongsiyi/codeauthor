1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.SYSFILESRowFactory
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
16:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.db.Database;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:eb47bdb: import org.apache.derby.iapi.types.SQLChar;
1:4309044: import org.apache.derby.iapi.types.SQLLongint;
1:eb47bdb: import org.apache.derby.iapi.types.SQLVarchar;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: import org.apache.derby.iapi.types.DataValueFactory;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: import org.apache.derby.catalog.TypeDescriptor;
1:eac0369: import org.apache.derby.catalog.UUID;
1:ea3f2e4: 
1:ea3f2e4: import java.sql.Types;
1:eac0369: import java.util.Properties;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * Factory for creating a SYSFILES row.
4:eac0369:  *
1:eac0369:  *
1:eac0369:  * @version 0.1
1:eac0369:  */
1:eac0369: 
1:ea3f2e4: class SYSFILESRowFactory extends CatalogRowFactory
5:eac0369: {
1:ea3f2e4: 	private static final String	TABLENAME_STRING = "SYSFILES";
1:eac0369: 
1:ea3f2e4:     private static final int		SYSFILES_COLUMN_COUNT = 4;
1:eac0369: 
1:eac0369: 	/* Column #s (1 based) */
1:ea3f2e4:     private static final int		ID_COL_NUM = 1;
1:ea3f2e4:     private static final String   ID_COL_NAME = "FILEID";
1:eac0369: 
1:ea3f2e4:     private static final int		SCHEMA_ID_COL_NUM = 2;
1:ea3f2e4:     private static final String   SCHEMA_ID_COL_NAME = "SCHEMAID";
1:eac0369: 
1:ea3f2e4:     private static final int		NAME_COL_NUM = 3;
1:ea3f2e4:     private static final String   NAME_COL_NAME = "FILENAME";
1:eac0369: 
1:ea3f2e4:     private static final int		GENERATION_ID_COL_NUM = 4;
1:ea3f2e4:     private static final String   GENERATION_ID_COL_NAME = "GENERATIONID";
1:eac0369: 
1:ea3f2e4:     static final int		SYSFILES_INDEX1_ID = 0;
1:ea3f2e4:     static final int		SYSFILES_INDEX2_ID = 1;
1:eac0369: 
1:eac0369: 	private static final int[][] indexColumnPositions =
1:eac0369: 	{
1:eac0369: 		{NAME_COL_NUM, SCHEMA_ID_COL_NUM},
1:eac0369: 		{ID_COL_NUM}
2:eac0369: 	};
1:eac0369: 
1:eac0369:     private	static	final	boolean[]	uniqueness = null;
1:eac0369: 
1:eac0369: 	private	static	final	String[]	uuids =
1:eac0369: 	{
1:eac0369: 		"80000000-00d3-e222-873f-000a0a0b1900",	// catalog UUID
1:eac0369: 		"80000000-00d3-e222-9920-000a0a0b1900",	// heap UUID
1:eac0369: 		"80000000-00d3-e222-a373-000a0a0b1900",	// SYSSQLFILES_INDEX1
1:eac0369: 		"80000000-00d3-e222-be7b-000a0a0b1900"	// SYSSQLFILES_INDEX2
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:6870e87:     SYSFILESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf) 
1:eac0369: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:eac0369: 		initInfo(SYSFILES_COLUMN_COUNT, TABLENAME_STRING, 
1:c2ff613: 				 indexColumnPositions, uniqueness, uuids );
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	METHODS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make a SYSFILES row
1:eac0369: 	 *
1:eac0369: 	 * @return	Row suitable for inserting into SYSFILES
1:eac0369: 	 *
2:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
2:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		String					id_S = null;
1:eac0369: 		String					schemaId_S = null;
1:eac0369: 		String                  SQLname = null;
1:eac0369: 		long                    generationId = 0;
1:eac0369: 		
1:eac0369: 		ExecRow        			row;
1:eac0369: 
1:eac0369: 		if (td != null)	
1:eac0369: 		{
1:eac0369: 			FileInfoDescriptor descriptor = (FileInfoDescriptor)td;
1:eac0369: 			id_S = descriptor.getUUID().toString();
1:eac0369: 			schemaId_S = descriptor.getSchemaDescriptor().getUUID().toString();
1:eac0369: 			SQLname = descriptor.getName();
1:eac0369: 			generationId = descriptor.getGenerationId();
1:eac0369: 		}
1:eac0369: 	
1:eac0369: 		/* Build the row to insert  */
1:eac0369: 		row = getExecutionFactory().getValueRow(SYSFILES_COLUMN_COUNT);
1:eac0369: 
2:eac0369: 		/* 1st column is ID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(ID_COL_NUM, new SQLChar(id_S));
1:eac0369: 
2:eac0369: 		/* 2nd column is SCHEMAID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SCHEMA_ID_COL_NUM, new SQLChar(schemaId_S));
1:eac0369: 
1:eac0369: 		/* 3rd column is NAME (varchar(30)) */
1:eb47bdb: 		row.setColumn(NAME_COL_NUM, new SQLVarchar(SQLname));
1:eac0369: 
1:eac0369: 		/* 4th column is GENERATIONID (long) */
1:4309044: 		row.setColumn(GENERATION_ID_COL_NUM, new SQLLongint(generationId));
1:eac0369: 
1:eac0369: 		return row;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make a descriptor out of a SYSFILES row
1:eac0369: 	 *
1:eac0369: 	 * @param row a row
1:eac0369: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1:eac0369: 	 * @param dd dataDictionary
1:eac0369: 	 *
1:eac0369: 	 * @return	a descriptor equivalent to a row
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public TupleDescriptor buildDescriptor(
1:eac0369: 		ExecRow					row,
1:eac0369: 		TupleDescriptor			parentTupleDescriptor,
1:eac0369: 		DataDictionary 			dd )
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (row.nColumns() != SYSFILES_COLUMN_COUNT)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("Wrong number of columns for a SYSFILES row: "+
1:eac0369: 							 row.nColumns());
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:eac0369: 
1:eac0369: 		String	id_S;
1:eac0369: 		UUID    id;
1:eac0369: 		String	schemaId_S;
1:eac0369: 		UUID    schemaId;
1:eac0369: 		String	name;
1:eac0369: 		long     generationId;
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 
1:eac0369: 		SchemaDescriptor	schemaDescriptor;
1:eac0369: 		FileInfoDescriptor	result;
1:eac0369: 
1:eac0369: 		/* 1st column is ID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(ID_COL_NUM);
1:eac0369: 		id_S = col.getString();
1:eac0369: 		id = getUUIDFactory().recreateUUID(id_S);
1:eac0369: 
1:eac0369: 		/* 2nd column is SchemaId */
1:eac0369: 		col = row.getColumn(SCHEMA_ID_COL_NUM);
1:eac0369: 		schemaId_S = col.getString();
1:eac0369: 		schemaId = getUUIDFactory().recreateUUID(schemaId_S);
1:eac0369: 		
1:eac0369: 		schemaDescriptor = dd.getSchemaDescriptor(schemaId, null);
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (schemaDescriptor == null)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("Missing schema for FileInfo: "+id_S);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* 3nd column is NAME (varchar(128)) */
1:eac0369: 		col = row.getColumn(NAME_COL_NUM);
1:eac0369: 		name = col.getString();
1:eac0369: 
1:eac0369: 		/* 4th column is generationId (long) */
1:eac0369: 		col = row.getColumn(GENERATION_ID_COL_NUM);
1:eac0369: 		generationId = col.getLong();
1:eac0369: 
1:eac0369: 	    result = ddg.newFileInfoDescriptor(id,schemaDescriptor,name,
1:eac0369: 										   generationId);
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Builds a list of columns suitable for creating this Catalog.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return array of SystemColumn suitable for making this catalog.
1:eac0369: 	 */
1:ea3f2e4:     public SystemColumn[]   buildColumnList()
1:2a5922a:         throws StandardException
1:ea3f2e4:     {
1:ea3f2e4:         return new SystemColumn[] {
1:ea3f2e4:            SystemColumnImpl.getUUIDColumn(ID_COL_NAME, false),
1:ea3f2e4:            SystemColumnImpl.getUUIDColumn(SCHEMA_ID_COL_NAME, false),
1:ea3f2e4:            SystemColumnImpl.getIdentifierColumn(NAME_COL_NAME, false),
1:ea3f2e4:            SystemColumnImpl.getColumn(GENERATION_ID_COL_NAME, Types.BIGINT, false)
1:ea3f2e4:                 
1:ea3f2e4:         };
1:ea3f2e4:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:4309044
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLLongint;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(GENERATION_ID_COL_NUM, new SQLLongint(generationId));
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1:     SYSFILESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf) 
1: 		super(uuidf,ef,dvf);
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLChar;
1: import org.apache.derby.iapi.types.SQLVarchar;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(ID_COL_NUM, new SQLChar(id_S));
1: 		row.setColumn(SCHEMA_ID_COL_NUM, new SQLChar(schemaId_S));
1: 		row.setColumn(NAME_COL_NUM, new SQLVarchar(SQLname));
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
commit:ea3f2e4
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
1: class SYSFILESRowFactory extends CatalogRowFactory
1: 	private static final String	TABLENAME_STRING = "SYSFILES";
1:     private static final int		SYSFILES_COLUMN_COUNT = 4;
1:     private static final int		ID_COL_NUM = 1;
1:     private static final String   ID_COL_NAME = "FILEID";
1:     private static final int		SCHEMA_ID_COL_NUM = 2;
1:     private static final String   SCHEMA_ID_COL_NAME = "SCHEMAID";
1:     private static final int		NAME_COL_NUM = 3;
1:     private static final String   NAME_COL_NAME = "FILENAME";
1:     private static final int		GENERATION_ID_COL_NUM = 4;
1:     private static final String   GENERATION_ID_COL_NAME = "GENERATIONID";
1:     static final int		SYSFILES_INDEX1_ID = 0;
1:     static final int		SYSFILES_INDEX2_ID = 1;
/////////////////////////////////////////////////////////////////////////
0:     SYSFILESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
/////////////////////////////////////////////////////////////////////////
1:     public SystemColumn[]   buildColumnList()
1:     {
1:         return new SystemColumn[] {
1:            SystemColumnImpl.getUUIDColumn(ID_COL_NAME, false),
1:            SystemColumnImpl.getUUIDColumn(SCHEMA_ID_COL_NAME, false),
1:            SystemColumnImpl.getIdentifierColumn(NAME_COL_NAME, false),
1:            SystemColumnImpl.getColumn(GENERATION_ID_COL_NAME, Types.BIGINT, false)
1:                 
1:         };
1:     }
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				 indexColumnPositions, uniqueness, uuids );
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSFILESRowFactory
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.db.Database;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.catalog.TypeDescriptor;
1: import org.apache.derby.catalog.UUID;
1: import java.util.Properties;
1: 
1: /**
1:  * Factory for creating a SYSFILES row.
1:  *
1:  *
1:  * @version 0.1
0:  * @author Rick Hillegas (extracted from DataDictionaryImpl).
1:  */
1: 
0: public class SYSFILESRowFactory extends CatalogRowFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	protected static final String	TABLENAME_STRING = "SYSFILES";
1: 
0: 	protected static final int		SYSFILES_COLUMN_COUNT = 4;
1: 
1: 	/* Column #s (1 based) */
0: 	protected static final int		ID_COL_NUM = 1;
0: 	protected static final String   ID_COL_NAME = "FILEID";
1: 
0: 	protected static final int		SCHEMA_ID_COL_NUM = 2;
0: 	protected static final String   SCHEMA_ID_COL_NAME = "SCHEMAID";
1: 
0: 	protected static final int		NAME_COL_NUM = 3;
0: 	protected static final String   NAME_COL_NAME = "FILENAME";
1: 
0: 	protected static final int		GENERATION_ID_COL_NUM = 4;
0: 	protected static final String   GENERATION_ID_COL_NAME = "GENERATIONID";
1: 
0: 	protected static final int		SYSFILES_INDEX1_ID = 0;
0: 	protected static final int		SYSFILES_INDEX2_ID = 1;
1: 
1: 	private static final int[][] indexColumnPositions =
1: 	{
1: 		{NAME_COL_NUM, SCHEMA_ID_COL_NUM},
1: 		{ID_COL_NUM}
1: 	};
1: 
0: 	private static final String[][] indexColumnNames =
1: 	{
0: 		{NAME_COL_NAME, SCHEMA_ID_COL_NAME},
0: 		{ID_COL_NAME}
1: 	};
1: 
1:     private	static	final	boolean[]	uniqueness = null;
1: 
1: 	private	static	final	String[]	uuids =
1: 	{
1: 		"80000000-00d3-e222-873f-000a0a0b1900",	// catalog UUID
1: 		"80000000-00d3-e222-9920-000a0a0b1900",	// heap UUID
1: 		"80000000-00d3-e222-a373-000a0a0b1900",	// SYSSQLFILES_INDEX1
1: 		"80000000-00d3-e222-be7b-000a0a0b1900"	// SYSSQLFILES_INDEX2
1: 	};
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
0:     public	SYSFILESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower) 
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
1: 		initInfo(SYSFILES_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames, uniqueness, uuids );
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	METHODS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make a SYSFILES row
1: 	 *
0: 	 * @param emptyRow Make an empty row if this parameter is true
0: 	 * @param descriptor A descriptor
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSFILES
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 
1: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1: 					throws StandardException
1: 	{
1: 		String					id_S = null;
1: 		String					schemaId_S = null;
1: 		String                  SQLname = null;
1: 		long                    generationId = 0;
1: 		
1: 		ExecRow        			row;
1: 
1: 		if (td != null)	
1: 		{
1: 			FileInfoDescriptor descriptor = (FileInfoDescriptor)td;
1: 			id_S = descriptor.getUUID().toString();
1: 			schemaId_S = descriptor.getSchemaDescriptor().getUUID().toString();
1: 			SQLname = descriptor.getName();
1: 			generationId = descriptor.getGenerationId();
1: 		}
1: 	
1: 		/* Build the row to insert  */
1: 		row = getExecutionFactory().getValueRow(SYSFILES_COLUMN_COUNT);
1: 
1: 		/* 1st column is ID (UUID - char(36)) */
0: 		row.setColumn(ID_COL_NUM, dvf.getCharDataValue(id_S));
1: 
1: 		/* 2nd column is SCHEMAID (UUID - char(36)) */
0: 		row.setColumn(SCHEMA_ID_COL_NUM, dvf.getCharDataValue(schemaId_S));
1: 
1: 		/* 3rd column is NAME (varchar(30)) */
0: 		row.setColumn(NAME_COL_NUM, dvf.getVarcharDataValue(SQLname));
1: 
1: 		/* 4th column is GENERATIONID (long) */
0: 		row.setColumn(GENERATION_ID_COL_NUM, dvf.getDataValue(generationId));
1: 
1: 		return row;
1: 	}
1: 
1: 	/**
0: 	 * Builds an empty index row.
1: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
1: 	 *
0: 	 * @return corresponding empty index row
1: 	 * @exception   StandardException thrown on failure
1: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
1: 			throws StandardException
1: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
1: 
0: 		row.setColumn(ncols + 1,  rowLocation);
1: 
0: 		switch( indexNumber )
1: 		{
0: 		    case SYSFILES_INDEX1_ID:
0: 				/* 1st column is NAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
1: 
1: 				/* 2nd column is SCHEMAID (UUID - char(36)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
1: 
0: 				break;
1: 
0: 		    case SYSFILES_INDEX2_ID:
1: 				/* 1st column is ID (UUID - char(36)) */
0: 				row.setColumn(1,
0: 							  getDataValueFactory().getCharDataValue((String) null));
1: 
0: 				break;
0: 		}	// end switch
1: 
0: 		return	row;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make a descriptor out of a SYSFILES row
1: 	 *
1: 	 * @param row a row
1: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1: 	 * @param dd dataDictionary
1: 	 *
1: 	 * @return	a descriptor equivalent to a row
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public TupleDescriptor buildDescriptor(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd )
1: 					throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (row.nColumns() != SYSFILES_COLUMN_COUNT)
1: 			{
1: 				SanityManager.THROWASSERT("Wrong number of columns for a SYSFILES row: "+
1: 							 row.nColumns());
1: 			}
1: 		}
1: 
1: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
1: 		String	id_S;
1: 		UUID    id;
1: 		String	schemaId_S;
1: 		UUID    schemaId;
1: 		String	name;
1: 		long     generationId;
1: 		DataValueDescriptor	col;
1: 
1: 		SchemaDescriptor	schemaDescriptor;
1: 		FileInfoDescriptor	result;
1: 
1: 		/* 1st column is ID (UUID - char(36)) */
1: 		col = row.getColumn(ID_COL_NUM);
1: 		id_S = col.getString();
1: 		id = getUUIDFactory().recreateUUID(id_S);
1: 
1: 		/* 2nd column is SchemaId */
1: 		col = row.getColumn(SCHEMA_ID_COL_NUM);
1: 		schemaId_S = col.getString();
1: 		schemaId = getUUIDFactory().recreateUUID(schemaId_S);
1: 		
1: 		schemaDescriptor = dd.getSchemaDescriptor(schemaId, null);
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (schemaDescriptor == null)
1: 			{
1: 				SanityManager.THROWASSERT("Missing schema for FileInfo: "+id_S);
1: 			}
1: 		}
1: 
1: 		/* 3nd column is NAME (varchar(128)) */
1: 		col = row.getColumn(NAME_COL_NUM);
1: 		name = col.getString();
1: 
1: 		/* 4th column is generationId (long) */
1: 		col = row.getColumn(GENERATION_ID_COL_NUM);
1: 		generationId = col.getLong();
1: 
1: 	    result = ddg.newFileInfoDescriptor(id,schemaDescriptor,name,
1: 										   generationId);
1: 		return result;
1: 	}
1: 
1: 	/**
1: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 *
1: 	 *
1: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
0: 	public SystemColumn[]	buildColumnList()
1: 	{
0: 		int						index = 0;
0: 		SystemColumn[]			columnList = new SystemColumn[SYSFILES_COLUMN_COUNT];
1: 
0: 		// describe columns
1: 
0: 		columnList[index++] = new SystemColumnImpl(	
0: 								convertIdCase( ID_COL_NAME),		// column name
0: 								ID_COL_NUM,	        // column number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								36					// maxLength
0: 			                   );
1: 
0: 		columnList[index++] = new SystemColumnImpl(	
0: 								convertIdCase( SCHEMA_ID_COL_NAME),	// column name
0: 								SCHEMA_ID_COL_NUM,	// schema number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								36					// maxLength
0: 			                   );
1: 
0: 		columnList[index++] = new SystemColumnImpl(	
0: 								convertIdCase( NAME_COL_NAME),		// column name
0: 								NAME_COL_NUM, 	    // column number
0: 								false				// nullability
0: 			                   );
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( GENERATION_ID_COL_NAME),		// column name
0: 							GENERATION_ID_COL_NUM,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"BIGINT",			// dataType
0: 							true,				// built-in type
0: 							TypeId.LONGINT_MAXWIDTH	// maxLength
0: 			               );
0: 		return	columnList;
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:318307e
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.db.Database;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.catalog.TypeDescriptor;
0: import org.apache.derby.catalog.UUID;
0: import java.util.Properties;
0: 
0: /**
0:  * Factory for creating a SYSFILES row.
0:  *
0:  *
0:  * @version 0.1
0:  * @author Rick Hillegas (extracted from DataDictionaryImpl).
0:  */
0: 
0: public class SYSFILESRowFactory extends CatalogRowFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	protected static final String	TABLENAME_STRING = "SYSFILES";
0: 
0: 	protected static final int		SYSFILES_COLUMN_COUNT = 4;
0: 
0: 	/* Column #s (1 based) */
0: 	protected static final int		ID_COL_NUM = 1;
0: 	protected static final String   ID_COL_NAME = "FILEID";
0: 
0: 	protected static final int		SCHEMA_ID_COL_NUM = 2;
0: 	protected static final String   SCHEMA_ID_COL_NAME = "SCHEMAID";
0: 
0: 	protected static final int		NAME_COL_NUM = 3;
0: 	protected static final String   NAME_COL_NAME = "FILENAME";
0: 
0: 	protected static final int		GENERATION_ID_COL_NUM = 4;
0: 	protected static final String   GENERATION_ID_COL_NAME = "GENERATIONID";
0: 
0: 	protected static final int		SYSFILES_INDEX1_ID = 0;
0: 	protected static final int		SYSFILES_INDEX2_ID = 1;
0: 
0: 	private static final int[][] indexColumnPositions =
0: 	{
0: 		{NAME_COL_NUM, SCHEMA_ID_COL_NUM},
0: 		{ID_COL_NUM}
0: 	};
0: 
0: 	private static final String[][] indexColumnNames =
0: 	{
0: 		{NAME_COL_NAME, SCHEMA_ID_COL_NAME},
0: 		{ID_COL_NAME}
0: 	};
0: 
0:     private	static	final	boolean[]	uniqueness = null;
0: 
0: 	private	static	final	String[]	uuids =
0: 	{
0: 		"80000000-00d3-e222-873f-000a0a0b1900",	// catalog UUID
0: 		"80000000-00d3-e222-9920-000a0a0b1900",	// heap UUID
0: 		"80000000-00d3-e222-a373-000a0a0b1900",	// SYSSQLFILES_INDEX1
0: 		"80000000-00d3-e222-be7b-000a0a0b1900"	// SYSSQLFILES_INDEX2
0: 	};
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0:     public	SYSFILESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower) 
0: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(SYSFILES_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames, uniqueness, uuids );
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	METHODS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Make a SYSFILES row
0: 	 *
0: 	 * @param emptyRow Make an empty row if this parameter is true
0: 	 * @param descriptor A descriptor
0: 	 *
0: 	 * @return	Row suitable for inserting into SYSFILES
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 
0: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
0: 					throws StandardException
0: 	{
0: 		String					id_S = null;
0: 		String					schemaId_S = null;
0: 		String                  SQLname = null;
0: 		long                    generationId = 0;
0: 		
0: 		ExecRow        			row;
0: 
0: 		if (td != null)	
0: 		{
0: 			FileInfoDescriptor descriptor = (FileInfoDescriptor)td;
0: 			id_S = descriptor.getUUID().toString();
0: 			schemaId_S = descriptor.getSchemaDescriptor().getUUID().toString();
0: 			SQLname = descriptor.getName();
0: 			generationId = descriptor.getGenerationId();
0: 		}
0: 	
0: 		/* Build the row to insert  */
0: 		row = getExecutionFactory().getValueRow(SYSFILES_COLUMN_COUNT);
0: 
0: 		/* 1st column is ID (UUID - char(36)) */
0: 		row.setColumn(ID_COL_NUM, dvf.getCharDataValue(id_S));
0: 
0: 		/* 2nd column is SCHEMAID (UUID - char(36)) */
0: 		row.setColumn(SCHEMA_ID_COL_NUM, dvf.getCharDataValue(schemaId_S));
0: 
0: 		/* 3rd column is NAME (varchar(30)) */
0: 		row.setColumn(NAME_COL_NUM, dvf.getVarcharDataValue(SQLname));
0: 
0: 		/* 4th column is GENERATIONID (long) */
0: 		row.setColumn(GENERATION_ID_COL_NUM, dvf.getDataValue(generationId));
0: 
0: 		return row;
0: 	}
0: 
0: 	/**
0: 	 * Builds an empty index row.
0: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
0: 	 *
0: 	 * @return corresponding empty index row
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
0: 			throws StandardException
0: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
0: 
0: 		row.setColumn(ncols + 1,  rowLocation);
0: 
0: 		switch( indexNumber )
0: 		{
0: 		    case SYSFILES_INDEX1_ID:
0: 				/* 1st column is NAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
0: 
0: 				/* 2nd column is SCHEMAID (UUID - char(36)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				break;
0: 
0: 		    case SYSFILES_INDEX2_ID:
0: 				/* 1st column is ID (UUID - char(36)) */
0: 				row.setColumn(1,
0: 							  getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				break;
0: 		}	// end switch
0: 
0: 		return	row;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Make a descriptor out of a SYSFILES row
0: 	 *
0: 	 * @param row a row
0: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
0: 	 * @param dd dataDictionary
0: 	 *
0: 	 * @return	a descriptor equivalent to a row
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public TupleDescriptor buildDescriptor(
0: 		ExecRow					row,
0: 		TupleDescriptor			parentTupleDescriptor,
0: 		DataDictionary 			dd )
0: 					throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (row.nColumns() != SYSFILES_COLUMN_COUNT)
0: 			{
0: 				SanityManager.THROWASSERT("Wrong number of columns for a SYSFILES row: "+
0: 							 row.nColumns());
0: 			}
0: 		}
0: 
0: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
0: 
0: 		String	id_S;
0: 		UUID    id;
0: 		String	schemaId_S;
0: 		UUID    schemaId;
0: 		String	name;
0: 		long     generationId;
0: 		DataValueDescriptor	col;
0: 
0: 		SchemaDescriptor	schemaDescriptor;
0: 		FileInfoDescriptor	result;
0: 
0: 		/* 1st column is ID (UUID - char(36)) */
0: 		col = row.getColumn(ID_COL_NUM);
0: 		id_S = col.getString();
0: 		id = getUUIDFactory().recreateUUID(id_S);
0: 
0: 		/* 2nd column is SchemaId */
0: 		col = row.getColumn(SCHEMA_ID_COL_NUM);
0: 		schemaId_S = col.getString();
0: 		schemaId = getUUIDFactory().recreateUUID(schemaId_S);
0: 		
0: 		schemaDescriptor = dd.getSchemaDescriptor(schemaId, null);
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (schemaDescriptor == null)
0: 			{
0: 				SanityManager.THROWASSERT("Missing schema for FileInfo: "+id_S);
0: 			}
0: 		}
0: 
0: 		/* 3nd column is NAME (varchar(128)) */
0: 		col = row.getColumn(NAME_COL_NUM);
0: 		name = col.getString();
0: 
0: 		/* 4th column is generationId (long) */
0: 		col = row.getColumn(GENERATION_ID_COL_NUM);
0: 		generationId = col.getLong();
0: 
0: 	    result = ddg.newFileInfoDescriptor(id,schemaDescriptor,name,
0: 										   generationId);
0: 		return result;
0: 	}
0: 
0: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
0: 	 *
0: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
0: 	 */
0: 	public SystemColumn[]	buildColumnList()
0: 	{
0: 		int						index = 0;
0: 		SystemColumn[]			columnList = new SystemColumn[SYSFILES_COLUMN_COUNT];
0: 
0: 		// describe columns
0: 
0: 		columnList[index++] = new SystemColumnImpl(	
0: 								convertIdCase( ID_COL_NAME),		// column name
0: 								ID_COL_NUM,	        // column number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								36					// maxLength
0: 			                   );
0: 
0: 		columnList[index++] = new SystemColumnImpl(	
0: 								convertIdCase( SCHEMA_ID_COL_NAME),	// column name
0: 								SCHEMA_ID_COL_NUM,	// schema number
0: 								0,					// precision
0: 								0,					// scale
0: 								false,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								36					// maxLength
0: 			                   );
0: 
0: 		columnList[index++] = new SystemColumnImpl(	
0: 								convertIdCase( NAME_COL_NAME),		// column name
0: 								NAME_COL_NUM, 	    // column number
0: 								false				// nullability
0: 			                   );
0: 		columnList[index++] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( GENERATION_ID_COL_NAME),		// column name
0: 							GENERATION_ID_COL_NUM,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"BIGINT",			// dataType
0: 							true,				// built-in type
0: 							TypeId.LONGINT_MAXWIDTH	// maxLength
0: 			               );
0: 		return	columnList;
0: 	}
0: 
0: }
============================================================================