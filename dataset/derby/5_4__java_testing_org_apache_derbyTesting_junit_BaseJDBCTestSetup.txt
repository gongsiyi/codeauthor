1:8f784a4: /*
2:8f784a4:  *
1:8f784a4:  * Derby - Class org.apache.derbyTesting.functionTests.util.BaseJDBCTestSetup
1:8f784a4:  *
1:15651f5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:  * contributor license agreements.  See the NOTICE file distributed with
1:15651f5:  * this work for additional information regarding copyright ownership.
1:15651f5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:  * (the "License"); you may not use this file except in compliance with
1:15651f5:  * the License.  You may obtain a copy of the License at
1:8f784a4:  *
1:8f784a4:  *    http://www.apache.org/licenses/LICENSE-2.0
1:8f784a4:  *
1:8f784a4:  * Unless required by applicable law or agreed to in writing, 
1:8f784a4:  * software distributed under the License is distributed on an 
1:8f784a4:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:8f784a4:  * either express or implied. See the License for the specific 
1:8f784a4:  * language governing permissions and limitations under the License.
1:8f784a4:  */
1:3bd1dd8: package org.apache.derbyTesting.junit;
2:8f784a4: 
1:8f784a4: import java.sql.*;
1:3bd1dd8: 
1:8f784a4: import junit.framework.Test;
1:8f784a4: 
1:8f784a4: /**
1:8f784a4:  * Base class for JDBC JUnit test decorators.
1:8f784a4:  */
1:8f784a4: public abstract class BaseJDBCTestSetup
1:23c0fed:     extends BaseTestSetup {
1:8f784a4: 	
1:8f784a4: 	public BaseJDBCTestSetup(Test test) {
1:8f784a4: 		super(test);
1:8f784a4: 	}
1:8f784a4: 	
1:8f784a4: 	/**
1:8f784a4: 	 * Maintain a single connection to the default
1:8f784a4: 	 * database, opened at the first call to getConnection.
1:8f784a4: 	 * Typical setup will just require a single connection.
1:8f784a4: 	 * @see BaseJDBCTestSetup#getConnection()
1:8f784a4: 	 */
1:8f784a4: 	private Connection conn;
1:8f784a4: 	
1:8f784a4:     /**
1:8f784a4:      * Return the current configuration for the test.
1:8f784a4:      */
1:8f784a4:     public final TestConfiguration getTestConfiguration()
1:8f784a4:     {
1:e0104e8:     	return TestConfiguration.getCurrent();
1:8f784a4:     }
1:8f784a4:     
1:8f784a4:     /**
1:8f784a4:      * Obtain the connection to the default database.
1:8f784a4:      * This class maintains a single connection returned
1:8f784a4:      * by this class, it is opened on the first call to
1:8f784a4:      * this method. Subsequent calls will return the same
1:8f784a4:      * connection object unless it has been closed. In that
1:8f784a4:      * case a new connection object will be returned.
1:8f784a4:      * <P>
1:8f784a4:      * The tearDown method will close the connection if
1:8f784a4:      * it is open.
1:df2b52c:      * @see TestConfiguration#openDefaultConnection()
1:8f784a4:      */
1:8f784a4:     public final Connection getConnection() throws SQLException
1:8f784a4:     {
1:8f784a4:     	if (conn != null)
1:8f784a4:     	{
1:8f784a4:     		if (!conn.isClosed())
1:8f784a4:     			return conn;
1:8f784a4:     		conn = null;
1:8f784a4:     	}
1:df2b52c:     	return conn = getTestConfiguration().openDefaultConnection();
1:8f784a4:     }
1:8f784a4:     
1:8f784a4:     /**
1:8f784a4:      * Print debug string.
1:8f784a4:      * @param text String to print
1:8f784a4:      */
1:8f784a4:     public void println(final String text) {
1:8f784a4:         if (getTestConfiguration().isVerbose()) {
1:8f784a4:             System.out.println("DEBUG: " + text);
1:8f784a4:         }
1:8f784a4:     }
1:8f784a4:     
1:8f784a4:     /**
1:8f784a4:      * Tear down this fixture, sub-classes should call
1:dbed020:      * super.tearDown(). This cleans up and closes the connection
1:8f784a4:      * if it is open.
1:8f784a4:      */
1:8f784a4:     protected void tearDown()
1:8f784a4:     throws java.lang.Exception
1:8f784a4:     {
1:fcaa724:         clearConnection();
1:fcaa724:     }
1:fcaa724: 
1:fcaa724:     /**
1:fcaa724:      * Close the default connection and null out the reference to it.
1:fcaa724:      * Typically only called from {@code tearDown()}.
1:fcaa724:      */
1:fcaa724:     void clearConnection() throws SQLException {
1:fcaa724:         JDBC.cleanup(conn);
1:df2b52c:         conn = null;
1:8f784a4:     }
1:8f784a4: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * super.tearDown(). This cleans up and closes the connection
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:fcaa724
/////////////////////////////////////////////////////////////////////////
1:         clearConnection();
1:     }
1: 
1:     /**
1:      * Close the default connection and null out the reference to it.
1:      * Typically only called from {@code tearDown()}.
1:      */
1:     void clearConnection() throws SQLException {
1:         JDBC.cleanup(conn);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:9c86d82
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:23c0fed
/////////////////////////////////////////////////////////////////////////
1:     extends BaseTestSetup {
commit:e0104e8
/////////////////////////////////////////////////////////////////////////
1:     	return TestConfiguration.getCurrent();
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.junit;
1: 
commit:df2b52c
/////////////////////////////////////////////////////////////////////////
1:      * @see TestConfiguration#openDefaultConnection()
/////////////////////////////////////////////////////////////////////////
1:     	return conn = getTestConfiguration().openDefaultConnection();
/////////////////////////////////////////////////////////////////////////
1:         conn = null;
commit:8f784a4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.util.BaseJDBCTestSetup
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
0: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.sql.*;
1: 
0: import junit.extensions.TestSetup;
1: import junit.framework.Test;
1: 
1: /**
1:  * Base class for JDBC JUnit test decorators.
1:  */
1: public abstract class BaseJDBCTestSetup
0:     extends TestSetup {
1: 	
1: 	public BaseJDBCTestSetup(Test test) {
1: 		super(test);
1: 	}
1: 	
1: 	/**
1: 	 * Maintain a single connection to the default
1: 	 * database, opened at the first call to getConnection.
1: 	 * Typical setup will just require a single connection.
1: 	 * @see BaseJDBCTestSetup#getConnection()
1: 	 */
1: 	private Connection conn;
1: 	
1:     /**
1:      * Return the current configuration for the test.
1:      */
1:     public final TestConfiguration getTestConfiguration()
1:     {
0:     	return TestConfiguration.DERBY_TEST_CONFIG;
1:     }
1:     
1:     /**
1:      * Obtain the connection to the default database.
1:      * This class maintains a single connection returned
1:      * by this class, it is opened on the first call to
1:      * this method. Subsequent calls will return the same
1:      * connection object unless it has been closed. In that
1:      * case a new connection object will be returned.
1:      * <P>
1:      * The tearDown method will close the connection if
1:      * it is open.
0:      * @see TestConfiguration#getDefaultConnection()
1:      */
1:     public final Connection getConnection() throws SQLException
1:     {
1:     	if (conn != null)
1:     	{
1:     		if (!conn.isClosed())
1:     			return conn;
1:     		conn = null;
1:     	}
0:     	return conn = getTestConfiguration().getDefaultConnection();
1:     }
1:     
1:     /**
1:      * Print debug string.
1:      * @param text String to print
1:      */
1:     public void println(final String text) {
1:         if (getTestConfiguration().isVerbose()) {
1:             System.out.println("DEBUG: " + text);
1:         }
1:     }
1:     
1:     /**
1:      * Tear down this fixture, sub-classes should call
0:      * super.tearDown(). This cleanups & closes the connection
1:      * if it is open.
1:      */
1:     protected void tearDown()
1:     throws java.lang.Exception
1:     {
0:     	JDBC.cleanup(conn);
1:     }
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
============================================================================