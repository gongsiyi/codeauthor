1:c5935ad: /*
3:c5935ad:  
1:c5935ad: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p5
1:c5935ad:  
1:c5935ad: Licensed to the Apache Software Foundation (ASF) under one or more
1:c5935ad: contributor license agreements.  See the NOTICE file distributed with
1:c5935ad: this work for additional information regarding copyright ownership.
1:c5935ad: The ASF licenses this file to You under the Apache License, Version 2.0
1:c5935ad: (the "License"); you may not use this file except in compliance with
1:c5935ad: the License.  You may obtain a copy of the License at
1:c5935ad:  
1:c5935ad:    http://www.apache.org/licenses/LICENSE-2.0
1:c5935ad:  
1:c5935ad: Unless required by applicable law or agreed to in writing, software
1:c5935ad: distributed under the License is distributed on an "AS IS" BASIS,
1:c5935ad: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5935ad: See the License for the specific language governing permissions and
1:c5935ad: limitations under the License.
1:c5935ad:  
1:c5935ad:  */
1:c5935ad: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:c5935ad: 
1:c5935ad: import java.sql.Connection;
1:c5935ad: import java.sql.DriverManager;
1:c5935ad: import java.sql.SQLException;
1:c5935ad: import java.sql.Statement;
1:c5935ad: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c5935ad: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:c5935ad: 
1:c5935ad: 
1:c5935ad: /**
1:c5935ad:  * Run a replication test on localhost
1:c5935ad:  * by using default values for master and slave hosts,
1:c5935ad:  * and master and slave ports.
1:c5935ad:  * Test DERBY-3924 verifying the fix for DERBY-3878.
1:c5935ad:  * 
1:c5935ad:  */
1:c5935ad: 
1:c5935ad: public class ReplicationRun_Local_3_p5 extends ReplicationRun_Local_3
1:c5935ad: {
1:dfbf41e:     
1:c5935ad: 
1:c5935ad:     /**
1:c5935ad:      * Creates a new instance of ReplicationRun_Local
1:c5935ad:      * @param testcaseName Identifying the test.
1:c5935ad:      */
1:c5935ad:     // String getDerbyServerPID = null;
1:c5935ad:     public ReplicationRun_Local_3_p5(String testcaseName)
1:c5935ad:     {
1:c5935ad:         super(testcaseName);
1:c5935ad: 
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     public static Test suite()
1:c5935ad:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ReplicationRun_Local_3_p5 Suite");
1:c5935ad:         
1:c5935ad:         suite.addTestSuite( ReplicationRun_Local_3_p5.class);
1:c5935ad:         
1:c5935ad:         return SecurityManagerSetup.noSecurityManager(suite);
1:c5935ad: 
1:c5935ad:     }
1:c5935ad:         
1:c5935ad:     /**
1:c5935ad:      * Test that DERBY-3924 fixed DERBY-3878.
1:c5935ad:      * @throws java.lang.Exception
1:c5935ad:      */
1:c5935ad:     public void testReplication_Local_3_p5_DERBY_3878()
1:c5935ad:     throws Exception
1:c5935ad:     {
1:c5935ad:         makeReadyForReplication();
1:c5935ad:         
1:c5935ad:         // getDerbyServerPID = userDir +FS+ "getDerbyServerPID";
1:c5935ad:         // mk_getDerbyServerPID_Cmd(getDerbyServerPID);
1:c5935ad:         
1:c5935ad:         // Run a "load" on the master to make sure there
1:c5935ad:         // has been replication to slave.
1:c5935ad:         replicationTest = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun";
1:c5935ad:         util.DEBUG("replicationTest: " + replicationTest);
1:c5935ad:         replicationVerify = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify";
1:c5935ad:         util.DEBUG("replicationVerify: " + replicationVerify);
1:c5935ad:         
1:c5935ad:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
1:c5935ad:                 jvmVersion,
1:c5935ad:                 testClientHost,
1:c5935ad:                 masterServerHost, masterServerPort,
1:c5935ad:                 replicatedDb);
1:c5935ad:                 
1:c5935ad:         _killMasterServer(); // "Crash" master.
1:dfbf41e: 
1:dfbf41e:         stopSlave(slaveServerHost,
1:dfbf41e:                   slaveServerPort,
1:dfbf41e:                   slaveDatabasePath,
1:dfbf41e:                   replicatedDb,
1:dfbf41e:                   false); // master server dead
1:dfbf41e: 
1:c5935ad:         // Try to re-establish replication mode:
1:136610d:         startServer(masterJvmVersion, derbyMasterVersion,
1:c5935ad:                 masterServerHost,
2:c5935ad:                 ALL_INTERFACES,
1:c5935ad:                 masterServerPort,
1:c5935ad:                 masterDbSubPath);
1:c5935ad: 
1:c5935ad:         if ( masterServerHost.equalsIgnoreCase("localhost") || localEnv )
1:c5935ad:         {
1:c5935ad:              String URL = masterURL(replicatedDb);
1:c5935ad:             Class.forName(DRIVER_CLASS_NAME); // Needed when running from classes!
1:c5935ad:             util.DEBUG("bootMasterDatabase getConnection("+URL+")");
1:c5935ad:             Connection conn = DriverManager.getConnection(URL);
1:c5935ad:             Statement s = conn.createStatement();
1:c5935ad:             s.execute("call syscs_util.syscs_freeze_database()");
1:c5935ad:             conn.close();
1:c5935ad:         }
1:c5935ad:         else
1:c5935ad:         {
1:c5935ad:             runTest(freezeDB,
1:c5935ad:                     jvmVersion,
1:c5935ad:                     testClientHost,
1:c5935ad:                     masterServerHost, masterServerPort,
1:c5935ad:                     replicatedDb);
1:c5935ad:         }
1:c5935ad:         initSlave(slaveServerHost, // Copy master contents to slave again.
1:c5935ad:                 jvmVersion,
1:c5935ad:                 replicatedDb);
1:c5935ad: 
1:dfbf41e:         /* Slave server still running, so no need to start slave server */
1:c5935ad:         
1:c5935ad:         startSlave(jvmVersion, replicatedDb, // should cause an address-already-in-use exception without the fix for DERBY-3878
1:c5935ad:                 slaveServerHost,             // Verified that we get 'Address already in use' and then hangs!
1:c5935ad:                 slaveServerPort,             // without the fix for DERBY-3878
2:c5935ad:                 slaveServerHost,
1:c5935ad:                 slaveReplPort,
1:c5935ad:                 testClientHost);
1:c5935ad:         
1:c5935ad:         startMaster(jvmVersion, replicatedDb, 
1:c5935ad:                 masterServerHost,
1:c5935ad:                 masterServerPort,
1:c5935ad:                 masterServerHost,
2:c5935ad:                 slaveServerPort,
1:c5935ad:                 slaveServerHost,
1:c5935ad:                 slaveReplPort);
1:c5935ad:         // Should now be back in "normal" replication mode state.
1:c5935ad:         
1:dfbf41e:         assertSqlStateSlaveConn(REPLICATION_SLAVE_STARTED_OK);
1:c5935ad:         
1:c5935ad:         failOver(jvmVersion,
1:c5935ad:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:c5935ad:                 masterServerHost,  // Where the master db is run.
1:c5935ad:                 masterServerPort,
1:c5935ad:                 testClientHost);
1:c5935ad:                 
1:c5935ad:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:c5935ad:                 slaveServerHost,slaveServerPort,
1:c5935ad:                 testClientHost);
1:c5935ad:         
1:c5935ad:         verifySlave(); // Starts slave and does a very simple verification.
1:c5935ad:         
1:c5935ad:         // We should verify the master as well, at least to see that we still can connect.
1:c5935ad:         verifyMaster();
1:c5935ad:         
1:c5935ad:         stopServer(jvmVersion, derbyVersion,
1:c5935ad:                 slaveServerHost, slaveServerPort);
1:c5935ad:         
1:c5935ad:         stopServer(jvmVersion, derbyVersion,
1:c5935ad:                 masterServerHost, masterServerPort);
1:c5935ad:         
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     private void _killMasterServer()
1:c5935ad:         throws ClassNotFoundException, SQLException
1:c5935ad:     {
1:c5935ad:              String URL = masterURL(replicatedDb); // So far only used for master!
1:c5935ad:             Class.forName(DRIVER_CLASS_NAME); // Needed when running from classes!
1:c5935ad:             Connection conn = DriverManager.getConnection(URL);
1:c5935ad:             Statement s = conn.createStatement();
1:c5935ad:             conn.setAutoCommit(false); // 
1:c5935ad:             s.execute("create procedure kill(in p integer)"
1:c5935ad:                     + " parameter style java"
1:c5935ad:                     + " no sql"
1:c5935ad:                     + " language java"
1:c5935ad:                     + " external name"
1:c5935ad:                       + "'java.lang.System.exit'");
1:c5935ad:             try{
1:c5935ad:                 s.execute("call kill(0)");
1:c5935ad:             } catch (SQLException se)
1:c5935ad:             {
1:c5935ad:                 int errCode = se.getErrorCode();
1:c5935ad:                 String msg = se.getMessage();
1:c5935ad:                 String sState = se.getSQLState();
1:c5935ad:                 String expectedState = "08006";
1:c5935ad:                 msg = errCode + " " + sState + " " + msg 
1:c5935ad:                         + ". Expected: "+ expectedState;
1:c5935ad:                 if ( (errCode == 40000)
1:c5935ad:                 && (sState.equalsIgnoreCase(expectedState) ) )
1:c5935ad:                 {
1:c5935ad:                     util.DEBUG("As expected. " + msg);
1:c5935ad:                 }
1:c5935ad:                 else
1:c5935ad:                 {
1:c5935ad:                     assertTrue("kill() failed. " + msg, false);
1:c5935ad:                 }
1:c5935ad:                 
1:c5935ad:             }
1:c5935ad:             /* The connection is now gone!
1:c5935ad:             conn.rollback();
1:c5935ad:             conn.close();
1:c5935ad:             */
1:c5935ad:         
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     /*
1:c5935ad:     private void _killServer(String masterServerHost, int masterServerPort)
1:c5935ad:     throws InterruptedException, IOException
1:c5935ad:     {
1:c5935ad:         // This will work for "Unix" only!!
1:c5935ad:         util.DEBUG("_killServer: " + masterServerHost +":" + masterServerPort);
1:c5935ad: 
1:c5935ad:         String PID = runUserCommand(getDerbyServerPID + " " + masterServerPort,testUser);
1:c5935ad:         runUserCommand("kill " + PID,testUser);
1:c5935ad: 
1:c5935ad:     }
1:c5935ad:     
1:c5935ad:     private void mk_getDerbyServerPID_Cmd(String cmdName)
1:c5935ad:             throws IOException
1:c5935ad:     {
1:c5935ad:         String cmd = "#!/bin/bash"
1:c5935ad:             + LF + "PORTNO=$1"
1:c5935ad:             + LF + "if [ \"${PORTNO}\" == \"\" ]"
1:c5935ad:             + LF + "then"
1:c5935ad:             + LF + "  echo UNDEFINED_PORT_NUMBER"
1:c5935ad:             + LF + "  PORTNO=UNDEFINED_PORT_NUMBER"
1:c5935ad:             + LF + "fi"
1:c5935ad:             + LF + "ps auxwww"
1:c5935ad:               + "| grep \"org.apache.derby.drda.NetworkServerControl "
1:c5935ad:               + "start -h 0.0.0.0 -p ${PORTNO}\" | grep -v grep "
1:c5935ad:               + "| gawk '{ print $2 }'";
1:c5935ad:         util.writeToFile(cmd, cmdName);
1:c5935ad:         runUserCommand("chmod +x " + cmdName,testUser);
1:c5935ad:     }
1:c5935ad:     */
1:c5935ad:         
1:c5935ad: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ReplicationRun_Local_3_p5 Suite");
commit:dfbf41e
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         stopSlave(slaveServerHost,
1:                   slaveServerPort,
1:                   slaveDatabasePath,
1:                   replicatedDb,
1:                   false); // master server dead
1: 
/////////////////////////////////////////////////////////////////////////
1:         /* Slave server still running, so no need to start slave server */
/////////////////////////////////////////////////////////////////////////
1:         assertSqlStateSlaveConn(REPLICATION_SLAVE_STARTED_OK);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:136610d
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion, derbyMasterVersion,
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c5935ad
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p5
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
0: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Run a replication test on localhost
1:  * by using default values for master and slave hosts,
1:  * and master and slave ports.
1:  * Test DERBY-3924 verifying the fix for DERBY-3878.
1:  * 
1:  */
1: 
1: public class ReplicationRun_Local_3_p5 extends ReplicationRun_Local_3
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Local
1:      * @param testcaseName Identifying the test.
1:      */
1:     // String getDerbyServerPID = null;
1:     public ReplicationRun_Local_3_p5(String testcaseName)
1:     {
1:         super(testcaseName);
1: 
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Local_3_p5 Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Local_3_p5.class);
1:         
1:         return SecurityManagerSetup.noSecurityManager(suite);
1: 
1:     }
1:         
1:     /**
1:      * Test that DERBY-3924 fixed DERBY-3878.
1:      * @throws java.lang.Exception
1:      */
1:     public void testReplication_Local_3_p5_DERBY_3878()
1:     throws Exception
1:     {
1:         makeReadyForReplication();
1:         
1:         // getDerbyServerPID = userDir +FS+ "getDerbyServerPID";
1:         // mk_getDerbyServerPID_Cmd(getDerbyServerPID);
1:         
1:         // Run a "load" on the master to make sure there
1:         // has been replication to slave.
1:         replicationTest = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun";
1:         util.DEBUG("replicationTest: " + replicationTest);
1:         replicationVerify = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify";
1:         util.DEBUG("replicationVerify: " + replicationVerify);
1:         
1:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
1:                 jvmVersion,
1:                 testClientHost,
1:                 masterServerHost, masterServerPort,
1:                 replicatedDb);
1:                 
1:         _killMasterServer(); // "Crash" master.
1:         
0:         Thread.sleep(5000L); // Need time to settle down if we had load.
0:         // With this sleep we always have REPLICATION_SLAVE_SHUTDOWN_OK
0:         String expected = "XRE42"; // REPLICATION_SLAVE_SHUTDOWN_OK
0:         // if ( replicationTest != null ) expected = "XRE41"; // SLAVE_OPERATION_DENIED_WHILE_CONNECTED  = "XRE41" if had load and no sleep
0:         assertException( 
0:             _stopSlave(slaveServerHost, slaveServerPort, 
0:                 slaveDatabasePath +FS+ slaveDbSubPath +FS+ replicatedDb), // OK when master is gone.
0:             expected);
1:         
1:         // Try to re-establish replication mode:
0:         // No change. Thread.sleep(5000L); // Need time to settle down if we had load?
0:         masterServer = startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost,
1:                 ALL_INTERFACES,
1:                 masterServerPort,
1:                 masterDbSubPath);
1: 
1:         if ( masterServerHost.equalsIgnoreCase("localhost") || localEnv )
1:         {
1:              String URL = masterURL(replicatedDb);
1:             Class.forName(DRIVER_CLASS_NAME); // Needed when running from classes!
1:             util.DEBUG("bootMasterDatabase getConnection("+URL+")");
1:             Connection conn = DriverManager.getConnection(URL);
1:             Statement s = conn.createStatement();
1:             s.execute("call syscs_util.syscs_freeze_database()");
1:             conn.close();
1:         }
1:         else
1:         {
1:             runTest(freezeDB,
1:                     jvmVersion,
1:                     testClientHost,
1:                     masterServerHost, masterServerPort,
1:                     replicatedDb);
1:         }
1:         initSlave(slaveServerHost, // Copy master contents to slave again.
1:                 jvmVersion,
1:                 replicatedDb);
1: 
0:         /* Slave server still running, so do not need: 
0:         slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
1:                 slaveServerHost,
1:                 ALL_INTERFACES,
1:                 slaveServerPort,
0:                 slaveDbSubPath); */
1:         
0:         Thread.sleep(5000L); // Need time to settle down if we had load.
1:         startSlave(jvmVersion, replicatedDb, // should cause an address-already-in-use exception without the fix for DERBY-3878
1:                 slaveServerHost,             // Verified that we get 'Address already in use' and then hangs!
1:                 slaveServerPort,             // without the fix for DERBY-3878
1:                 slaveServerHost,
1:                 slaveReplPort,
1:                 testClientHost);
1:         
1:         startMaster(jvmVersion, replicatedDb, 
1:                 masterServerHost,
1:                 masterServerPort,
1:                 masterServerHost,
1:                 slaveServerPort,
1:                 slaveServerHost,
1:                 slaveReplPort);
1:         // Should now be back in "normal" replication mode state.
1:         
0:         assertSqlStateSlaveConn("XRE08"); // REPLICATION_SLAVE_STARTED_OK
1:         
1:         failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost,  // Where the master db is run.
1:                 masterServerPort,
1:                 testClientHost);
1:                 
1:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         verifySlave(); // Starts slave and does a very simple verification.
1:         
1:         // We should verify the master as well, at least to see that we still can connect.
1:         verifyMaster();
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 slaveServerHost, slaveServerPort);
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 masterServerHost, masterServerPort);
1:         
1:     }
1:     
1:     private void _killMasterServer()
1:         throws ClassNotFoundException, SQLException
1:     {
1:              String URL = masterURL(replicatedDb); // So far only used for master!
1:             Class.forName(DRIVER_CLASS_NAME); // Needed when running from classes!
1:             Connection conn = DriverManager.getConnection(URL);
1:             Statement s = conn.createStatement();
1:             conn.setAutoCommit(false); // 
1:             s.execute("create procedure kill(in p integer)"
1:                     + " parameter style java"
1:                     + " no sql"
1:                     + " language java"
1:                     + " external name"
1:                       + "'java.lang.System.exit'");
1:             try{
1:                 s.execute("call kill(0)");
1:             } catch (SQLException se)
1:             {
1:                 int errCode = se.getErrorCode();
1:                 String msg = se.getMessage();
1:                 String sState = se.getSQLState();
1:                 String expectedState = "08006";
1:                 msg = errCode + " " + sState + " " + msg 
1:                         + ". Expected: "+ expectedState;
1:                 if ( (errCode == 40000)
1:                 && (sState.equalsIgnoreCase(expectedState) ) )
1:                 {
1:                     util.DEBUG("As expected. " + msg);
1:                 }
1:                 else
1:                 {
1:                     assertTrue("kill() failed. " + msg, false);
1:                 }
1:                 
1:             }
1:             /* The connection is now gone!
1:             conn.rollback();
1:             conn.close();
1:             */
1:         
1:     }
1:     
1:     /*
1:     private void _killServer(String masterServerHost, int masterServerPort)
1:     throws InterruptedException, IOException
1:     {
1:         // This will work for "Unix" only!!
1:         util.DEBUG("_killServer: " + masterServerHost +":" + masterServerPort);
1: 
1:         String PID = runUserCommand(getDerbyServerPID + " " + masterServerPort,testUser);
1:         runUserCommand("kill " + PID,testUser);
1: 
1:     }
1:     
1:     private void mk_getDerbyServerPID_Cmd(String cmdName)
1:             throws IOException
1:     {
1:         String cmd = "#!/bin/bash"
1:             + LF + "PORTNO=$1"
1:             + LF + "if [ \"${PORTNO}\" == \"\" ]"
1:             + LF + "then"
1:             + LF + "  echo UNDEFINED_PORT_NUMBER"
1:             + LF + "  PORTNO=UNDEFINED_PORT_NUMBER"
1:             + LF + "fi"
1:             + LF + "ps auxwww"
1:               + "| grep \"org.apache.derby.drda.NetworkServerControl "
1:               + "start -h 0.0.0.0 -p ${PORTNO}\" | grep -v grep "
1:               + "| gawk '{ print $2 }'";
1:         util.writeToFile(cmd, cmdName);
1:         runUserCommand("chmod +x " + cmdName,testUser);
1:     }
1:     */
1:         
1: }
============================================================================