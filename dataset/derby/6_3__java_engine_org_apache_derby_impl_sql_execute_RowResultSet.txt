1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.RowResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:eac0369: import org.apache.derby.iapi.services.stream.InfoStreams;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.ResultDescription;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Takes a constant row value and returns it as
1:eac0369:  * a result set.
1:eac0369:  * <p>
1:eac0369:  * This class actually probably never underlies a select statement,
1:eac0369:  * but in case it might and because it has the same behavior as the
1:eac0369:  * ones that do, we have it implement CursorResultSet and give
1:eac0369:  * reasonable answers.
1:eac0369:  *
1:eac0369:  */
1:6bc9897: class RowResultSet extends NoPutResultSetImpl
1:eac0369: 	implements CursorResultSet {
1:eac0369: 
1:eac0369: 	/* Run time statistics variables */
1:eac0369: 	public int rowsReturned;
1:eac0369: 
1:eac0369: 	private boolean canCacheRow;
1:eac0369: 	private boolean next;
1:eac0369: 	private GeneratedMethod row;
1:eac0369: 	private ExecRow		cachedRow;
1:eac0369: 
1:eac0369:     //
1:eac0369:     // class interface
1:eac0369:     //
1:eac0369:     RowResultSet
1:eac0369: 	(
1:eac0369: 		Activation 	activation, 
1:eac0369: 		GeneratedMethod row, 
1:eac0369: 		boolean 		canCacheRow,
1:eac0369: 		int 			resultSetNumber,
1:eac0369: 		double 			optimizerEstimatedRowCount,
1:f77f36d: 		double 			optimizerEstimatedCost
1:eac0369: 	)
5:eac0369: 	{
1:eac0369: 		super(activation, resultSetNumber, 
1:eac0369: 			  optimizerEstimatedRowCount, optimizerEstimatedCost);
1:eac0369: 
1:eac0369:         this.row = row;
1:eac0369: 		this.canCacheRow = canCacheRow;
1:7008b63: 		recordConstructorTime();
6:eac0369:     }
1:eac0369: 
1:eac0369: 	/* This constructor takes in a constant row value, as the cache row.  See the
1:eac0369: 	 * usage in beetle 4373 for materializing subquery.
1:eac0369: 	 */
1:eac0369:     RowResultSet
1:eac0369: 	(
1:eac0369: 		Activation 		activation, 
1:eac0369: 		ExecRow 		constantRow, 
1:eac0369: 		boolean 		canCacheRow,
1:eac0369: 		int 			resultSetNumber,
1:eac0369: 		double 			optimizerEstimatedRowCount,
1:f77f36d: 		double 			optimizerEstimatedCost
1:eac0369: 	)
1:eac0369: 	{
1:eac0369: 		super(activation, resultSetNumber, 
1:eac0369: 			  optimizerEstimatedRowCount, optimizerEstimatedCost);
1:eac0369: 
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369:         this.cachedRow = constantRow;
1:eac0369: 		this.canCacheRow = canCacheRow;
1:7008b63: 		recordConstructorTime();
1:eac0369:     }
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// ResultSet interface (leftover from NoPutResultSet)
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * Sets state to 'open'.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if activation closed.
1:eac0369:      */
1:eac0369: 	public void	openCore() throws StandardException 
1:eac0369: 	{
1:eac0369: 	   	next = false;
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 	    isOpen = true;
1:eac0369: 		numOpens++;
1:eac0369: 
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * If open and not returned yet, returns the row
1:eac0369:      * after plugging the parameters into the expressions.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure.
1:eac0369:      */
1:eac0369: 	public ExecRow	getNextRowCore() throws StandardException {
1:2a4654b: 		if( isXplainOnlyMode() )
1:2a4654b: 			return null;
1:eac0369: 
1:eac0369: 		currentRow = null;
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (isOpen) 
1:eac0369: 		{
1:eac0369: 			if (!next) 
1:eac0369: 			{
1:eac0369: 	            next = true;
1:408abd5: 				if (cachedRow != null)
1:408abd5:                 {
1:408abd5:                     currentRow = cachedRow;
1:408abd5:                 }
1:408abd5:                 else if (row != null)
1:408abd5:                 {
1:408abd5:                     currentRow = (ExecRow) row.invoke(activation);
1:408abd5:                     if (canCacheRow)
1:408abd5:                     {
1:408abd5:                         cachedRow = currentRow;
1:408abd5:                     }
1:408abd5:                 }
1:eac0369: 				rowsReturned++;
1:eac0369: 			}
1:eac0369: 			setCurrentRow(currentRow);
1:eac0369: 
1:eac0369: 			nextTime += getElapsedMillis(beginTime);
1:eac0369: 	    }
1:eac0369: 	    return currentRow;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * @see org.apache.derby.iapi.sql.ResultSet#close
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void	close() throws StandardException
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (isOpen) {
1:eac0369: 
1:eac0369: 			// we don't want to keep around a pointer to the
1:eac0369: 			// row ... so it can be thrown away.
1:eac0369: 			// REVISIT: does this need to be in a finally
1:eac0369: 			// block, to ensure that it is executed?
1:eac0369: 	    	clearCurrentRow();
1:eac0369: 	    	next = false;
1:eac0369: 
1:eac0369: 			super.close();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 				SanityManager.DEBUG("CloseRepeatInfo","Close of RowResultSet repeated");
1:eac0369: 
1:eac0369: 		closeTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the total amount of time spent in this ResultSet
1:eac0369: 	 *
1:eac0369: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:eac0369: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:eac0369: 	 *
1:eac0369: 	 * @return long		The total amount of time spent (in milliseconds).
1:eac0369: 	 */
1:eac0369: 	public long getTimeSpent(int type)
1:eac0369: 	{
1:eac0369: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1:eac0369: 		return totTime;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// CursorResultSet interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This is not operating against a stored table,
1:eac0369: 	 * so it has no row location to report.
1:eac0369: 	 *
1:eac0369: 	 * @see CursorResultSet
1:eac0369: 	 *
1:eac0369: 	 * @return a null.
1:eac0369: 	 */
1:eac0369: 	public RowLocation getRowLocation() {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("RowResultSet used in positioned update/delete");
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This is not used in positioned update and delete,
1:eac0369: 	 * so just return a null.
1:eac0369: 	 *
1:eac0369: 	 * @see CursorResultSet
1:eac0369: 	 *
1:eac0369: 	 * @return a null.
1:eac0369: 	 */
1:eac0369: 	public ExecRow getCurrentRow() {
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("RowResultSet used in positioned update/delete");
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 		if( isXplainOnlyMode() )
1: 			return null;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:408abd5
/////////////////////////////////////////////////////////////////////////
1: 				if (cachedRow != null)
1:                 {
1:                     currentRow = cachedRow;
1:                 }
1:                 else if (row != null)
1:                 {
1:                     currentRow = (ExecRow) row.invoke(activation);
1:                     if (canCacheRow)
1:                     {
1:                         cachedRow = currentRow;
1:                     }
1:                 }
commit:7008b63
/////////////////////////////////////////////////////////////////////////
1: 		recordConstructorTime();
/////////////////////////////////////////////////////////////////////////
1: 		recordConstructorTime();
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		double 			optimizerEstimatedCost
/////////////////////////////////////////////////////////////////////////
1: 		double 			optimizerEstimatedCost
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:6bc9897
/////////////////////////////////////////////////////////////////////////
1: class RowResultSet extends NoPutResultSetImpl
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.RowResultSet
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: import org.apache.derby.iapi.services.stream.InfoStreams;
1: 
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.ResultDescription;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: /**
1:  * Takes a constant row value and returns it as
1:  * a result set.
1:  * <p>
1:  * This class actually probably never underlies a select statement,
1:  * but in case it might and because it has the same behavior as the
1:  * ones that do, we have it implement CursorResultSet and give
1:  * reasonable answers.
1:  *
0:  * @author ames
1:  */
0: public class RowResultSet extends NoPutResultSetImpl
1: 	implements CursorResultSet {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/* Run time statistics variables */
1: 	public int rowsReturned;
1: 
1: 	private boolean canCacheRow;
1: 	private boolean next;
1: 	private GeneratedMethod row;
0: 	protected GeneratedMethod closeCleanup;
1: 	private ExecRow		cachedRow;
1: 
1:     //
1:     // class interface
1:     //
1:     RowResultSet
1: 	(
1: 		Activation 	activation, 
1: 		GeneratedMethod row, 
1: 		boolean 		canCacheRow,
1: 		int 			resultSetNumber,
1: 		double 			optimizerEstimatedRowCount,
0: 		double 			optimizerEstimatedCost,
0: 		GeneratedMethod closeCleanup
1: 	)
1: 	{
1: 		super(activation, resultSetNumber, 
1: 			  optimizerEstimatedRowCount, optimizerEstimatedCost);
1: 
1:         this.row = row;
0: 		this.closeCleanup = closeCleanup;
1: 		this.canCacheRow = canCacheRow;
0: 		constructorTime += getElapsedMillis(beginTime);
1:     }
1: 
1: 	/* This constructor takes in a constant row value, as the cache row.  See the
1: 	 * usage in beetle 4373 for materializing subquery.
1: 	 */
1:     RowResultSet
1: 	(
1: 		Activation 		activation, 
1: 		ExecRow 		constantRow, 
1: 		boolean 		canCacheRow,
1: 		int 			resultSetNumber,
1: 		double 			optimizerEstimatedRowCount,
0: 		double 			optimizerEstimatedCost,
0: 		GeneratedMethod closeCleanup
1: 	)
1: 	{
1: 		super(activation, resultSetNumber, 
1: 			  optimizerEstimatedRowCount, optimizerEstimatedCost);
1: 
1: 		beginTime = getCurrentTimeMillis();
1:         this.cachedRow = constantRow;
0: 		this.closeCleanup = closeCleanup;
1: 		this.canCacheRow = canCacheRow;
0: 		constructorTime += getElapsedMillis(beginTime);
1:     }
1: 
1: 	//
1: 	// ResultSet interface (leftover from NoPutResultSet)
1: 	//
1: 
1: 	/**
1:      * Sets state to 'open'.
1: 	 *
1: 	 * @exception StandardException thrown if activation closed.
1:      */
1: 	public void	openCore() throws StandardException 
1: 	{
1: 	   	next = false;
1: 		beginTime = getCurrentTimeMillis();
1: 	    isOpen = true;
1: 		numOpens++;
1: 
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/**
1:      * If open and not returned yet, returns the row
1:      * after plugging the parameters into the expressions.
1: 	 *
1: 	 * @exception StandardException thrown on failure.
1:      */
1: 	public ExecRow	getNextRowCore() throws StandardException {
1: 
1: 		currentRow = null;
1: 		beginTime = getCurrentTimeMillis();
1: 		if (isOpen) 
1: 		{
1: 			if (!next) 
1: 			{
1: 	            next = true;
0: 				if (currentRow == null)
1: 				{
0: 					if (cachedRow != null)
1: 					{
0: 						currentRow = cachedRow;
1: 					}
0: 					else if (row != null)
1: 					{
0: 						currentRow = (ExecRow) row.invoke(activation);
0: 						if (canCacheRow)
1: 						{
0: 							cachedRow = currentRow;
1: 						}
1: 					}
1: 				}
1: 				rowsReturned++;
1: 			}
1: 			setCurrentRow(currentRow);
1: 
1: 			nextTime += getElapsedMillis(beginTime);
1: 	    }
1: 	    return currentRow;
1: 	}
1: 
1: 	/**
1:      * @see org.apache.derby.iapi.sql.ResultSet#close
1: 	 *
1: 	 * @exception StandardException thrown on error
1: 	 */
1: 	public void	close() throws StandardException
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 		if (isOpen) {
0: 			if (closeCleanup != null) {
0: 				closeCleanup.invoke(activation); // let activation tidy up
1: 			}
1: 
1: 			// we don't want to keep around a pointer to the
1: 			// row ... so it can be thrown away.
1: 			// REVISIT: does this need to be in a finally
1: 			// block, to ensure that it is executed?
1: 	    	clearCurrentRow();
1: 	    	next = false;
1: 
1: 			super.close();
1: 		}
1: 		else
1: 			if (SanityManager.DEBUG)
1: 				SanityManager.DEBUG("CloseRepeatInfo","Close of RowResultSet repeated");
1: 
1: 		closeTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/**
1: 	 * Return the total amount of time spent in this ResultSet
1: 	 *
1: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1: 	 *
1: 	 * @return long		The total amount of time spent (in milliseconds).
1: 	 */
1: 	public long getTimeSpent(int type)
1: 	{
1: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1: 		return totTime;
1: 	}
1: 
1: 	//
1: 	// CursorResultSet interface
1: 	//
1: 
1: 	/**
1: 	 * This is not operating against a stored table,
1: 	 * so it has no row location to report.
1: 	 *
1: 	 * @see CursorResultSet
1: 	 *
1: 	 * @return a null.
1: 	 */
1: 	public RowLocation getRowLocation() {
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("RowResultSet used in positioned update/delete");
1: 		return null;
1: 	}
1: 
1: 	/**
1: 	 * This is not used in positioned update and delete,
1: 	 * so just return a null.
1: 	 *
1: 	 * @see CursorResultSet
1: 	 *
1: 	 * @return a null.
1: 	 */
1: 	public ExecRow getCurrentRow() {
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("RowResultSet used in positioned update/delete");
1: 		return null;
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: /**
0:  * Takes a constant row value and returns it as
0:  * a result set.
0:  * <p>
0:  * This class actually probably never underlies a select statement,
0:  * but in case it might and because it has the same behavior as the
0:  * ones that do, we have it implement CursorResultSet and give
0:  * reasonable answers.
0:  *
0:  * @author ames
0:  */
0: public class RowResultSet extends NoPutResultSetImpl
0: 	implements CursorResultSet {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/* Run time statistics variables */
0: 	public int rowsReturned;
0: 
0: 	private boolean canCacheRow;
0: 	private boolean next;
0: 	private GeneratedMethod row;
0: 	protected GeneratedMethod closeCleanup;
0: 	private ExecRow		cachedRow;
0: 
0:     //
0:     // class interface
0:     //
0:     RowResultSet
0: 	(
0: 		Activation 	activation, 
0: 		GeneratedMethod row, 
0: 		boolean 		canCacheRow,
0: 		int 			resultSetNumber,
0: 		double 			optimizerEstimatedRowCount,
0: 		double 			optimizerEstimatedCost,
0: 		GeneratedMethod closeCleanup
0: 	)
0: 	{
0: 		super(activation, resultSetNumber, 
0: 			  optimizerEstimatedRowCount, optimizerEstimatedCost);
0: 
0:         this.row = row;
0: 		this.closeCleanup = closeCleanup;
0: 		this.canCacheRow = canCacheRow;
0: 		constructorTime += getElapsedMillis(beginTime);
0:     }
0: 
0: 	/* This constructor takes in a constant row value, as the cache row.  See the
0: 	 * usage in beetle 4373 for materializing subquery.
0: 	 */
0:     RowResultSet
0: 	(
0: 		Activation 		activation, 
0: 		ExecRow 		constantRow, 
0: 		boolean 		canCacheRow,
0: 		int 			resultSetNumber,
0: 		double 			optimizerEstimatedRowCount,
0: 		double 			optimizerEstimatedCost,
0: 		GeneratedMethod closeCleanup
0: 	)
0: 	{
0: 		super(activation, resultSetNumber, 
0: 			  optimizerEstimatedRowCount, optimizerEstimatedCost);
0: 
0: 		beginTime = getCurrentTimeMillis();
0:         this.cachedRow = constantRow;
0: 		this.closeCleanup = closeCleanup;
0: 		this.canCacheRow = canCacheRow;
0: 		constructorTime += getElapsedMillis(beginTime);
0:     }
0: 
0: 	//
0: 	// ResultSet interface (leftover from NoPutResultSet)
0: 	//
0: 
0: 	/**
0:      * Sets state to 'open'.
0: 	 *
0: 	 * @exception StandardException thrown if activation closed.
0:      */
0: 	public void	openCore() throws StandardException 
0: 	{
0: 	   	next = false;
0: 		beginTime = getCurrentTimeMillis();
0: 	    isOpen = true;
0: 		numOpens++;
0: 
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0:      * If open and not returned yet, returns the row
0:      * after plugging the parameters into the expressions.
0: 	 *
0: 	 * @exception StandardException thrown on failure.
0:      */
0: 	public ExecRow	getNextRowCore() throws StandardException {
0: 
0: 		currentRow = null;
0: 		beginTime = getCurrentTimeMillis();
0: 		if (isOpen) 
0: 		{
0: 			if (!next) 
0: 			{
0: 	            next = true;
0: 				if (currentRow == null)
0: 				{
0: 					if (cachedRow != null)
0: 					{
0: 						currentRow = cachedRow;
0: 					}
0: 					else if (row != null)
0: 					{
0: 						currentRow = (ExecRow) row.invoke(activation);
0: 						if (canCacheRow)
0: 						{
0: 							cachedRow = currentRow;
0: 						}
0: 					}
0: 				}
0: 				rowsReturned++;
0: 			}
0: 			setCurrentRow(currentRow);
0: 
0: 			nextTime += getElapsedMillis(beginTime);
0: 	    }
0: 	    return currentRow;
0: 	}
0: 
0: 	/**
0:      * @see org.apache.derby.iapi.sql.ResultSet#close
0: 	 *
0: 	 * @exception StandardException thrown on error
0: 	 */
0: 	public void	close() throws StandardException
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 		if (isOpen) {
0: 			if (closeCleanup != null) {
0: 				closeCleanup.invoke(activation); // let activation tidy up
0: 			}
0: 
0: 			// we don't want to keep around a pointer to the
0: 			// row ... so it can be thrown away.
0: 			// REVISIT: does this need to be in a finally
0: 			// block, to ensure that it is executed?
0: 	    	clearCurrentRow();
0: 	    	next = false;
0: 
0: 			super.close();
0: 		}
0: 		else
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.DEBUG("CloseRepeatInfo","Close of RowResultSet repeated");
0: 
0: 		closeTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0: 	 * Return the total amount of time spent in this ResultSet
0: 	 *
0: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
0: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
0: 	 *
0: 	 * @return long		The total amount of time spent (in milliseconds).
0: 	 */
0: 	public long getTimeSpent(int type)
0: 	{
0: 		long totTime = constructorTime + openTime + nextTime + closeTime;
0: 		return totTime;
0: 	}
0: 
0: 	//
0: 	// CursorResultSet interface
0: 	//
0: 
0: 	/**
0: 	 * This is not operating against a stored table,
0: 	 * so it has no row location to report.
0: 	 *
0: 	 * @see CursorResultSet
0: 	 *
0: 	 * @return a null.
0: 	 */
0: 	public RowLocation getRowLocation() {
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("RowResultSet used in positioned update/delete");
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	 * This is not used in positioned update and delete,
0: 	 * so just return a null.
0: 	 *
0: 	 * @see CursorResultSet
0: 	 *
0: 	 * @return a null.
0: 	 */
0: 	public ExecRow getCurrentRow() {
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("RowResultSet used in positioned update/delete");
0: 		return null;
0: 	}
0: }
============================================================================