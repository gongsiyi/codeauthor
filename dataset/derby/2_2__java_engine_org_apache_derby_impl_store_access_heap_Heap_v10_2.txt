1:b61f876: /*
1:b61f876: 
1:b61f876:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2I
1:b61f876: 
1:b61f876:    Licensed to the Apache Software Foundation (ASF) under one or more
1:b61f876:    contributor license agreements.  See the NOTICE file distributed with
1:b61f876:    this work for additional information regarding copyright ownership.
1:b61f876:    The ASF licenses this file to you under the Apache License, Version 2.0
1:b61f876:    (the "License"); you may not use this file except in compliance with
1:b61f876:    the License.  You may obtain a copy of the License at
1:b61f876: 
1:b61f876:       http://www.apache.org/licenses/LICENSE-2.0
1:b61f876: 
1:b61f876:    Unless required by applicable law or agreed to in writing, software
1:b61f876:    distributed under the License is distributed on an "AS IS" BASIS,
1:b61f876:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b61f876:    See the License for the specific language governing permissions and
1:b61f876:    limitations under the License.
1:b61f876: 
1:b61f876:  */
1:b61f876: 
1:b61f876: package org.apache.derby.impl.store.access.heap;
1:b61f876: 
1:b61f876: 
1:b61f876: import org.apache.derby.iapi.services.io.StoredFormatIds; 
1:b61f876: 
1:b61f876: import java.io.IOException; 
1:b61f876: import java.io.ObjectOutput;
1:b61f876: import java.io.ObjectInput;
1:b61f876: 
1:b61f876: import java.lang.ClassNotFoundException;
1:b61f876: 
1:b61f876: 
1:b61f876: /**
1:787ceb4:  * @derby.formatId ACCESS_HEAP_V2_ID
1:b61f876:  *
1:787ceb4:  * @derby.purpose   The tag that describes the on disk representation of the Heap
1:bdd93c5:  *            conglomerate object.  Access contains no "directory" of 
1:bdd93c5:  *            conglomerate information.  In order to bootstrap opening a file
1:bdd93c5:  *            it encodes the factory that can open the conglomerate in the 
1:bdd93c5:  *            conglomerate id itself.  There exists a single HeapFactory which
1:bdd93c5:  *            must be able to read all heap format id's.  
1:bdd93c5:  *
1:bdd93c5:  *            This format was used for all Derby database Heap's in version
1:bdd93c5:  *            10.2 and previous versions.
1:b61f876:  *
1:787ceb4:  * @derby.upgrade   The format id of this object is currently always read from disk
1:bdd93c5:  *            as the first field of the conglomerate itself.  A bootstrap
1:bdd93c5:  *            problem exists as we don't know the format id of the heap 
1:bdd93c5:  *            until we are in the "middle" of reading the Heap.  Thus the
1:bdd93c5:  *            base Heap implementation must be able to read and write 
1:bdd93c5:  *            all formats based on the reading the 
1:bdd93c5:  *            "format_of_this_conglomerate". 
1:b61f876:  *
1:bdd93c5:  *            soft upgrade to ACCESS_HEAP_V3_ID:
1:bdd93c5:  *                read:
1:bdd93c5:  *                    old format is readable by current Heap implementation,
1:bdd93c5:  *                    with automatic in memory creation of default collation
1:bdd93c5:  *                    id needed by new format.  No code other than
1:bdd93c5:  *                    readExternal and writeExternal need know about old format.
1:bdd93c5:  *                write:
1:bdd93c5:  *                    will never write out new format id in soft upgrade mode.
1:bdd93c5:  *                    Code in readExternal and writeExternal handles writing
1:bdd93c5:  *                    correct version.  Code in the factory handles making
1:bdd93c5:  *                    sure new conglomerates use the Heap_v10_2 class
1:bdd93c5:  *                    that will write out old format info.
1:bdd93c5:  *
1:bdd93c5:  *            hard upgrade to ACCESS_HEAP_V3_ID:
1:bdd93c5:  *                read:
1:bdd93c5:  *                    old format is readable by current Heap implementation,
1:bdd93c5:  *                    with automatic in memory creation of default collation
1:bdd93c5:  *                    id needed by new format.
1:bdd93c5:  *                write:
1:bdd93c5:  *                    Only "lazy" upgrade will happen.  New format will only
1:bdd93c5:  *                    get written for new conglomerate created after the 
1:bdd93c5:  *                    upgrade.  Old conglomerates continue to be handled the
1:bdd93c5:  *                    same as soft upgrade.
1:b61f876:  *
1:787ceb4:  * @derby.diskLayout
1:b61f876:  *     format_of_this_conlgomerate(byte[])
1:b61f876:  *     containerid(long)
1:b61f876:  *     segmentid(int)
1:b61f876:  *     number_of_columns(int)
1:b61f876:  *     array_of_format_ids(byte[][])
1:b61f876:  **/
1:b61f876: 
1:b61f876: 
1:b61f876: 
1:b61f876: public class Heap_v10_2 extends Heap
1:b61f876: {
1:b61f876: 
1:b61f876:     /**
1:b61f876:      * No arg constructor, required by Formatable.
1:b61f876:      **/
1:b61f876:     public Heap_v10_2()
1:b61f876:     {
1:b61f876:         super();
1:b61f876:     }
1:b61f876: 
1:b61f876: 
1:b61f876:     /**************************************************************************
1:b61f876:      * Public Methods required by Storable interface, implies 
1:b61f876:      *     Externalizable, TypedFormat:
1:b61f876:      **************************************************************************
1:b61f876:      */
1:b61f876: 
1:b61f876:     /**
1:b61f876:      * Return my format identifier.
1:b61f876:      * <p>
1:bdd93c5:      * This identifier was used for Heap in all Derby versions prior to 10.3.
1:bdd93c5:      * Databases hard upgraded to a version 10.3 and later will write the new 
1:bdd93c5:      * format, see Heap.  Databases created in 10.3 and later will also write 
1:bdd93c5:      * the new format, see Heap.
1:b61f876:      *
1:b61f876:      * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:b61f876:      **/
1:b61f876: 	public int getTypeFormatId() 
1:b61f876:     {
1:bdd93c5:         // return identifier used for Heap in all derby versions prior to 10.3
1:bdd93c5: 		return StoredFormatIds.ACCESS_HEAP_V2_ID;
1:b61f876: 	}
1:b61f876: 
1:b61f876:     /**
1:b61f876:      * Store the stored representation of the column value in the
1:b61f876:      * stream.
1:b61f876:      * <p>
1:b61f876:      * For more detailed description of the format see documentation
1:b61f876:      * at top of file.
1:b61f876:      *
1:b61f876:      * @see java.io.Externalizable#writeExternal
1:b61f876:      **/
1:b61f876: 	public void writeExternal(ObjectOutput out) throws IOException 
1:b61f876:     {
1:b61f876: 		super.writeExternal_v10_2(out);
1:b61f876: 	}
1:b61f876: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1:  * @derby.formatId ACCESS_HEAP_V2_ID
1:  * @derby.purpose   The tag that describes the on disk representation of the Heap
/////////////////////////////////////////////////////////////////////////
1:  * @derby.upgrade   The format id of this object is currently always read from disk
/////////////////////////////////////////////////////////////////////////
1:  * @derby.diskLayout
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:bdd93c5
/////////////////////////////////////////////////////////////////////////
1:  *            conglomerate object.  Access contains no "directory" of 
1:  *            conglomerate information.  In order to bootstrap opening a file
1:  *            it encodes the factory that can open the conglomerate in the 
1:  *            conglomerate id itself.  There exists a single HeapFactory which
1:  *            must be able to read all heap format id's.  
1:  *
1:  *            This format was used for all Derby database Heap's in version
1:  *            10.2 and previous versions.
1:  *            as the first field of the conglomerate itself.  A bootstrap
1:  *            problem exists as we don't know the format id of the heap 
1:  *            until we are in the "middle" of reading the Heap.  Thus the
1:  *            base Heap implementation must be able to read and write 
1:  *            all formats based on the reading the 
1:  *            "format_of_this_conglomerate". 
1:  *            soft upgrade to ACCESS_HEAP_V3_ID:
1:  *                read:
1:  *                    old format is readable by current Heap implementation,
1:  *                    with automatic in memory creation of default collation
1:  *                    id needed by new format.  No code other than
1:  *                    readExternal and writeExternal need know about old format.
1:  *                write:
1:  *                    will never write out new format id in soft upgrade mode.
1:  *                    Code in readExternal and writeExternal handles writing
1:  *                    correct version.  Code in the factory handles making
1:  *                    sure new conglomerates use the Heap_v10_2 class
1:  *                    that will write out old format info.
1:  *
1:  *            hard upgrade to ACCESS_HEAP_V3_ID:
1:  *                read:
1:  *                    old format is readable by current Heap implementation,
1:  *                    with automatic in memory creation of default collation
1:  *                    id needed by new format.
1:  *                write:
1:  *                    Only "lazy" upgrade will happen.  New format will only
1:  *                    get written for new conglomerate created after the 
1:  *                    upgrade.  Old conglomerates continue to be handled the
1:  *                    same as soft upgrade.
/////////////////////////////////////////////////////////////////////////
1:      * This identifier was used for Heap in all Derby versions prior to 10.3.
1:      * Databases hard upgraded to a version 10.3 and later will write the new 
1:      * format, see Heap.  Databases created in 10.3 and later will also write 
1:      * the new format, see Heap.
1:         // return identifier used for Heap in all derby versions prior to 10.3
1: 		return StoredFormatIds.ACCESS_HEAP_V2_ID;
commit:b61f876
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2I
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.heap;
1: 
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds; 
1: 
1: import java.io.IOException; 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: 
1: import java.lang.ClassNotFoundException;
1: 
1: 
1: /**
0:  * @format_id ACCESS_HEAP_V2_ID
1:  *
0:  * @purpose   The tag that describes the on disk representation of the Heap
0:  *            conglomerate object.  The Heap conglomerate object is stored in
0:  *            a field of a row in the Conglomerate directory.
1:  *
0:  * @upgrade   The format id of this object is currently always read from disk
0:  *            as a separate column in the conglomerate directory.  To read
0:  *            A conglomerate object from disk and upgrade it to the current
0:  *            version do the following:
1:  *
0:  *                format_id = get format id from a separate column
0:  *                Upgradable conglom_obj = instantiate empty obj(format_id)
0:  *                read in conglom_obj from disk
0:  *                conglom = conglom_obj.upgradeToCurrent();
1:  *
0:  * @disk_layout
1:  *     format_of_this_conlgomerate(byte[])
1:  *     containerid(long)
1:  *     segmentid(int)
1:  *     number_of_columns(int)
1:  *     array_of_format_ids(byte[][])
1:  **/
1: 
1: 
1: 
1: public class Heap_v10_2 extends Heap
1: {
1: 
1:     /**
1:      * No arg constructor, required by Formatable.
1:      **/
1:     public Heap_v10_2()
1:     {
1:         super();
1:     }
1: 
1: 
1:     /**************************************************************************
1:      * Public Methods required by Storable interface, implies 
1:      *     Externalizable, TypedFormat:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Return my format identifier.
1:      * <p>
0:      * This identifier was used for Heap in all Derby versions prior to and
0:      * including 10.2.  Databases hard upgraded to a version subsequent
0:      * to 10.2 will write the new format, see Heap.  Databases created in
0:      * a version subsequent to 10.2 will also write the new formate, see
0:      * Heap.
1:      *
1:      * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:      **/
1: 	public int getTypeFormatId() 
1:     {
0: 		return StoredFormatIds.ACCESS_HEAP_V3_ID;
1: 	}
1: 
1:     /**
1:      * Store the stored representation of the column value in the
1:      * stream.
1:      * <p>
1:      * For more detailed description of the format see documentation
1:      * at top of file.
1:      *
1:      * @see java.io.Externalizable#writeExternal
1:      **/
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1:     {
1: 		super.writeExternal_v10_2(out);
1: 	}
1: }
============================================================================