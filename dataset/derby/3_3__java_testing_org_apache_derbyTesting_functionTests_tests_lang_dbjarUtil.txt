1:bf4839e: /*
2:bf4839e: 
1:bf4839e: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.cursor
1:bf4839e: 
1:dff95a1: Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1: contributor license agreements.  See the NOTICE file distributed with
1:dff95a1: this work for additional information regarding copyright ownership.
1:dff95a1: The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1: (the "License"); you may not use this file except in compliance with
1:dff95a1: the License.  You may obtain a copy of the License at
1:bf4839e: 
1:bf4839e:    http://www.apache.org/licenses/LICENSE-2.0
1:bf4839e: 
1:bf4839e: Unless required by applicable law or agreed to in writing, software
1:bf4839e: distributed under the License is distributed on an "AS IS" BASIS,
1:bf4839e: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf4839e: See the License for the specific language governing permissions and
1:bf4839e: limitations under the License.
1:bf4839e: 
1:bf4839e: */
1:bf4839e: 
1:bf4839e: package org.apache.derbyTesting.functionTests.tests.lang;
1:bf4839e: 
1:bf4839e: import java.io.BufferedInputStream;
1:bf4839e: import java.io.File;
1:bf4839e: import java.io.FileInputStream;
1:bf4839e: import java.io.FileOutputStream;
1:bf4839e: import java.io.IOException;
1:bf4839e: import java.net.MalformedURLException;
1:bf4839e: import java.net.URL;
1:bf4839e: import java.net.URLClassLoader;
1:bf4839e: import java.util.zip.ZipEntry;
1:bf4839e: import java.util.zip.ZipOutputStream;
1:bf4839e: 
1:bf4839e: /**
1:bf4839e: 	Simple program to archive a database up in a jar file
1:bf4839e: 	within the test harness.
1:bf4839e: */
1:bf4839e: 
1:bf4839e: public class dbjarUtil
1:bf4839e: {
1:bf4839e: 	/**
1:bf4839e: 		jarname - jarname to use
1:bf4839e: 		path - path to database
1:bf4839e: 		dbname - database name in archive
1:bf4839e: 	*/
1:bf4839e: 	public static void createArchive(String jarName, String path, String dbName) throws Exception {
1:bf4839e: 
1:bf4839e: 		String root = System.getProperty("derby.system.home", System.getProperty("user.dir"));
1:bf4839e: 
1:bf4839e: 		// get list of files
1:bf4839e: 		File top = new File(root, path);
1:bf4839e: 
1:bf4839e: 		if (!top.isDirectory())
1:bf4839e: 			throw new Exception(top.toString() + " is not a directory");
1:bf4839e: 
1:bf4839e: 		// jar file paths in the JDB CURL are relative to the root
1:bf4839e: 		// derby.system.home or user.dir, so need to create the jar there.
1:bf4839e: 		ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(new File(root, jarName))); 
1:bf4839e: 
1:bf4839e: 		addEntries(zos, top, dbName, top.getPath().length());
1:bf4839e: 		
1:bf4839e: 		zos.close(); 
1:bf4839e: 	}
1:bf4839e: 
1:bf4839e: 
1:bf4839e: 	static void addEntries(ZipOutputStream zos, File dir, String dbName, int old) throws Exception {
1:bf4839e: 
1:bf4839e: 		String[] list = dir.list();
1:bf4839e: 
1:bf4839e: 		for (int i = 0; i < list.length; i++) {
1:bf4839e: 
1:bf4839e: 			File f = new File(dir, list[i]);
1:bf4839e: 			if (f.isDirectory()) {
1:bf4839e: 				addEntries(zos, f, dbName, old);
1:bf4839e: 			} else {
1:bf4839e: 				addFile(zos, f, dbName, old);
1:bf4839e: 			}
1:bf4839e: 
1:bf4839e: 		}
1:bf4839e: 	}
1:bf4839e: 
1:bf4839e: 
1:bf4839e: 
1:bf4839e: 
1:bf4839e:     static void addFile(
1:bf4839e:         ZipOutputStream zos, 
1:bf4839e:         File f, String dbName, int old) throws IOException
1:bf4839e:     {
1:bf4839e: 
1:bf4839e: 		String s = f.getPath().replace(File.separatorChar, '/');
1:bf4839e: 
1:bf4839e: 		s = s.substring(old);
1:bf4839e: 
1:bf4839e: 		s = dbName.concat(s);
1:bf4839e: 
1:bf4839e: 		// jar has forward slashes!
1:bf4839e:         ZipEntry ze= new ZipEntry(s); 
1:bf4839e:         ze.setTime(f.lastModified()); 
1:bf4839e: 
1:bf4839e:         zos.putNextEntry(ze); 
1:bf4839e: 
1:bf4839e: 		byte[] byte8= new byte[1024]; 
1:bf4839e:         BufferedInputStream bufferedInputStream10= new BufferedInputStream((new FileInputStream(f))); 
1:bf4839e:         while (true)
1:bf4839e:         {
1:bf4839e:             int int9= bufferedInputStream10.read(byte8, 0, byte8.length); 
1:bf4839e:             if (int9 == -1)
1:bf4839e:             {
1:bf4839e:                 break;
1:bf4839e:             }
1:bf4839e:             zos.write(byte8, 0, int9); 
1:bf4839e:         }
1:bf4839e: 
1:bf4839e:         bufferedInputStream10.close(); 
1:bf4839e:         zos.closeEntry(); 
1:bf4839e:     }
1:bf4839e:   
1:bf4839e:     public static void setDBContextClassLoader(String jarName) throws MalformedURLException
1:bf4839e:     {
1:bf4839e: 		String root = System.getProperty("derby.system.home", System.getProperty("user.dir"));
1:bf4839e: 
1:bf4839e: 		File jar = new File(root, jarName);
1:bf4839e: 		
1:eec86ed: 		URLClassLoader cl = new URLClassLoader(new URL[] {jar.toURI().toURL()});
1:bf4839e:     	java.lang.Thread.currentThread().setContextClassLoader(cl);
1:bf4839e:    
1:bf4839e:     }
1:bf4839e: 
1:bf4839e:     public static void setNullContextClassLoader()
1:bf4839e:     {
1:bf4839e:     	java.lang.Thread.currentThread().setContextClassLoader(null);
1:bf4839e:     }
1:bf4839e: 
1:bf4839e: }
1:bf4839e: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
1: 		URLClassLoader cl = new URLClassLoader(new URL[] {jar.toURI().toURL()});
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:bf4839e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.cursor
1: 
0: Copyright 1999, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0: Licensed under the Apache License, Version 2.0 (the "License");
0: you may not use this file except in compliance with the License.
0: You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.BufferedInputStream;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipOutputStream;
1: 
1: /**
1: 	Simple program to archive a database up in a jar file
1: 	within the test harness.
1: */
1: 
1: public class dbjarUtil
1: {
1: 	/**
1: 		jarname - jarname to use
1: 		path - path to database
1: 		dbname - database name in archive
1: 	*/
1: 	public static void createArchive(String jarName, String path, String dbName) throws Exception {
1: 
1: 		String root = System.getProperty("derby.system.home", System.getProperty("user.dir"));
1: 
1: 		// get list of files
1: 		File top = new File(root, path);
1: 
1: 		if (!top.isDirectory())
1: 			throw new Exception(top.toString() + " is not a directory");
1: 
1: 		// jar file paths in the JDB CURL are relative to the root
1: 		// derby.system.home or user.dir, so need to create the jar there.
1: 		ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(new File(root, jarName))); 
1: 
1: 		addEntries(zos, top, dbName, top.getPath().length());
1: 		
1: 		zos.close(); 
1: 	}
1: 
1: 
1: 	static void addEntries(ZipOutputStream zos, File dir, String dbName, int old) throws Exception {
1: 
1: 		String[] list = dir.list();
1: 
1: 		for (int i = 0; i < list.length; i++) {
1: 
1: 			File f = new File(dir, list[i]);
1: 			if (f.isDirectory()) {
1: 				addEntries(zos, f, dbName, old);
1: 			} else {
1: 				addFile(zos, f, dbName, old);
1: 			}
1: 
1: 		}
1: 	}
1: 
1: 
1: 
1: 
1:     static void addFile(
1:         ZipOutputStream zos, 
1:         File f, String dbName, int old) throws IOException
1:     {
1: 
1: 		String s = f.getPath().replace(File.separatorChar, '/');
1: 
1: 		s = s.substring(old);
1: 
1: 		s = dbName.concat(s);
1: 
1: 		// jar has forward slashes!
1:         ZipEntry ze= new ZipEntry(s); 
1:         ze.setTime(f.lastModified()); 
1: 
1:         zos.putNextEntry(ze); 
1: 
1: 		byte[] byte8= new byte[1024]; 
1:         BufferedInputStream bufferedInputStream10= new BufferedInputStream((new FileInputStream(f))); 
1:         while (true)
1:         {
1:             int int9= bufferedInputStream10.read(byte8, 0, byte8.length); 
1:             if (int9 == -1)
1:             {
1:                 break;
1:             }
1:             zos.write(byte8, 0, int9); 
1:         }
1: 
1:         bufferedInputStream10.close(); 
1:         zos.closeEntry(); 
1:     }
1:   
1:     public static void setDBContextClassLoader(String jarName) throws MalformedURLException
1:     {
1: 		String root = System.getProperty("derby.system.home", System.getProperty("user.dir"));
1: 
1: 		File jar = new File(root, jarName);
1: 		
0: 		URLClassLoader cl = new URLClassLoader(new URL[] {jar.toURL()});
1:     	java.lang.Thread.currentThread().setContextClassLoader(cl);
1:    
1:     }
1: 
1:     public static void setNullContextClassLoader()
1:     {
1:     	java.lang.Thread.currentThread().setContextClassLoader(null);
1:     }
1: 
1: }
1: 
============================================================================