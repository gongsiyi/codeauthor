1:a517b4e: /*
11:a517b4e: 
1:6b23802:    Derby - Class org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest
1:a517b4e: 
1:a517b4e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a517b4e:    contributor license agreements.  See the NOTICE file distributed with
1:a517b4e:    this work for additional information regarding copyright ownership.
1:a517b4e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a517b4e:    (the "License"); you may not use this file except in compliance with
1:a517b4e:    the License.  You may obtain a copy of the License at
1:a517b4e: 
1:a517b4e:       http://www.apache.org/licenses/LICENSE-2.0
1:a517b4e: 
1:a517b4e:    Unless required by applicable law or agreed to in writing, software
1:a517b4e:    distributed under the License is distributed on an "AS IS" BASIS,
1:a517b4e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a517b4e:    See the License for the specific language governing permissions and
1:a517b4e:    limitations under the License.
1:a517b4e: 
1:a517b4e:  */
1:a517b4e: 
1:a517b4e: package org.apache.derbyTesting.unitTests.junit;
1:a517b4e: 
1:a517b4e: import java.io.ByteArrayInputStream;
1:a517b4e: import java.io.ByteArrayOutputStream;
1:a517b4e: import java.io.IOException;
1:a517b4e: import java.io.ObjectInputStream;
1:a517b4e: import java.io.ObjectOutputStream;
1:e957546: import java.lang.reflect.Method;
1:1ae02c9: import junit.framework.Test;
1:1ae02c9: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:a517b4e: 
1:a517b4e: 
1:a517b4e: /**
1:a517b4e:  * This class is used to test the FormatableBitSet implementation.
1:a517b4e:  */
1:857ee80: public class FormatableBitSetTest extends BaseTestCase {
1:a517b4e:     private byte[] bits24;
1:a517b4e:     private byte[] bits24C;
1:a517b4e: 
1:a517b4e:     private FormatableBitSet empty;
1:a517b4e:     private FormatableBitSet bitset18;
1:a517b4e:     private FormatableBitSet bitset18C;
1:a517b4e: 
1:a517b4e:     /**
1:e957546:      * <code>Integer.bitCount</code> method. Only available in JDK 1.5 or
1:e957546:      * later.
1:e957546:      */
1:e957546:     private final static Method bitCount;
1:e957546:     static {
1:e957546:         Method m = null;
1:e957546:         try {
1:e957546:             m = Integer.class.getMethod("bitCount", new Class[]{Integer.TYPE});
1:e957546:         } catch (Throwable t) {}
1:e957546:         bitCount = m;
1:e957546:     }
1:e957546: 
1:e957546:     /**
1:a517b4e:      * Create a test with the given name.
1:a517b4e:      *
1:a517b4e:      * @param name name of the test.
1:a517b4e:      */
1:a517b4e:     public FormatableBitSetTest(String name) {
1:a517b4e:         super(name);
33:a517b4e:     }
1:a517b4e: 
1:a517b4e:     /**
1:a517b4e:      *
1:a517b4e:      */
1:a517b4e:     public void setUp() {
1:a517b4e:         //1100 1110 0011 1100 0000
1:a517b4e:         bits24  = new byte[] { (byte)0xce, (byte)0x3c, 0x0 };
1:a517b4e: 
1:a517b4e:         // 0011 0001 1100 0011 1100
1:a517b4e:         bits24C = new byte[] { (byte)0x31, (byte)0xc3, (byte)0xc0 };
1:a517b4e: 
1:a517b4e:         empty = new FormatableBitSet();
1:a517b4e:         bitset18 = new FormatableBitSet(bits24);
1:a517b4e:         bitset18.shrink(18);
1:a517b4e:         bitset18C = new FormatableBitSet(bits24C);
1:a517b4e:         bitset18C.shrink(18);
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     /**
1:a517b4e:      * Release the resources that are used in this test
1:a517b4e:      *
1:a517b4e:      * @throws Exception
1:a517b4e:      */
1:a517b4e:     public void tearDown() throws Exception {
1:a517b4e:         empty = null;
1:a517b4e:         bits24 = null;
1:a517b4e:         bits24C = null;
1:a517b4e:         bitset18 = null;
1:a517b4e:         bitset18C = null;
1:a517b4e:         super.tearDown();
1:a517b4e:     }
1:a517b4e:     /**
1:a517b4e:      * Return a suite with all tests in this class (default suite)
1:a517b4e:      *
1:a517b4e:      * @throws Exception
1:a517b4e:      */
1:a517b4e:     public static Test suite() {
1:1ae02c9:         BaseTestSuite ts = new BaseTestSuite(FormatableBitSetTest.class,
1:a517b4e:                              "FormatableBitSetTest suite");
1:e957546: 
1:e957546:         if (bitCount != null) {
1:e957546:             ts.addTest(new FormatableBitSetTest("numBitsSetInOneByte"));
1:e957546:             ts.addTest(new FormatableBitSetTest("numBitsSetInTwoBytes"));
1:e957546:         }
1:e957546: 
1:e957546:         return ts;
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     /**
1:a517b4e:      * Test case that does a sanity check of the setup
1:a517b4e:      */
1:a517b4e:     public void testSetup() {
5:a517b4e:         assertEquals(0,empty.getLength());
5:a517b4e:         assertEquals(0,empty.getLengthInBytes());
5:a517b4e:         assertEquals(0,empty.getNumBitsSet());
1:c7205c1:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(0,empty.getByteArray().length);
1:a517b4e: 
6:a517b4e:         assertEquals(18,bitset18.getLength());
5:a517b4e:         assertEquals(3,bitset18.getLengthInBytes());
2:a517b4e:         assertEquals(9,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(bits24,bitset18.getByteArray());
1:a517b4e: 
1:a517b4e:         assertEquals(18,bitset18C.getLength());
1:a517b4e:         assertEquals(3,bitset18C.getLengthInBytes());
1:a517b4e:         assertEquals(9,bitset18C.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18C.invariantHolds());
1:8a6ea6d:         assertEquals(bits24C,bitset18C.getByteArray());
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for single arg constructor
1:a517b4e:     public void testIntCtor0() {
1:a517b4e:         FormatableBitSet zeroBits = new FormatableBitSet(0);
2:a517b4e:         assertEquals(0,zeroBits.getLength());
2:a517b4e:         assertEquals(0,zeroBits.getLengthInBytes());
2:a517b4e:         assertEquals(0,zeroBits.getNumBitsSet());
1:c7205c1:         assertTrue(zeroBits.invariantHolds());
1:8a6ea6d:         assertEquals(0,zeroBits.getByteArray().length);
1:a517b4e:     }
1:a517b4e:     public void testIntCtor1() {
1:a517b4e:         FormatableBitSet oneBit = new FormatableBitSet(1);
2:a517b4e:         assertEquals(1,oneBit.getLength());
2:a517b4e:         assertEquals(1,oneBit.getLengthInBytes());
2:a517b4e:         assertEquals(0,oneBit.getNumBitsSet());
1:c7205c1:         assertTrue(oneBit.invariantHolds());
1:8a6ea6d:         assertEquals(1,oneBit.getByteArray().length);
1:a517b4e:     }
1:a517b4e:     public void testIntCtor8() {
1:a517b4e:         FormatableBitSet eightBits = new FormatableBitSet(8);
1:a517b4e:         assertEquals(8,eightBits.getLength());
1:a517b4e:         assertEquals(1,eightBits.getLengthInBytes());
1:a517b4e:         assertEquals(0,eightBits.getNumBitsSet());
1:c7205c1:         assertTrue(eightBits.invariantHolds());
1:8a6ea6d:         assertEquals(1,eightBits.getByteArray().length);
1:a517b4e:     }
1:a517b4e:     public void testIntCtor9() {
1:a517b4e:         FormatableBitSet nineBits = new FormatableBitSet(9);
2:a517b4e:         assertEquals(9,nineBits.getLength());
2:a517b4e:         assertEquals(2,nineBits.getLengthInBytes());
2:a517b4e:         assertEquals(0,nineBits.getNumBitsSet());
1:c7205c1:         assertTrue(nineBits.invariantHolds());
1:8a6ea6d:         assertEquals(2,nineBits.getByteArray().length);
1:a517b4e:     }
1:a517b4e:     public void testIntCtorNeg() {
1:65a2bbd:         try { FormatableBitSet negBits = new FormatableBitSet(-1); fail(); }
1:65a2bbd:         catch(IllegalArgumentException iae) {}
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for the copy constructor
1:a517b4e:     public void testEmptyCpyCtor() {
1:a517b4e:         FormatableBitSet emptyCpy = new FormatableBitSet(empty);
1:a517b4e:         assertEquals(0,emptyCpy.getLength());
1:a517b4e:         assertEquals(0,emptyCpy.getLengthInBytes());
1:a517b4e:         assertEquals(0,emptyCpy.getNumBitsSet());
1:c7205c1:         assertTrue(emptyCpy.invariantHolds());
1:a517b4e:     }
1:a517b4e:     public void testCpyCtor() {
1:a517b4e:         FormatableBitSet cpy = new FormatableBitSet(bitset18);
1:a517b4e:         assertEquals(18,cpy.getLength());
1:a517b4e:         assertEquals(3,cpy.getLengthInBytes());
1:a517b4e:         assertEquals(9,cpy.getNumBitsSet());
1:a517b4e:         assertEquals(0,cpy.compare(bitset18));
1:a517b4e:         assertTrue(cpy.equals(bitset18));
1:c7205c1:         assertTrue(cpy.invariantHolds());
1:8a6ea6d:         assertEquals(3,cpy.getByteArray().length);
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for grow(int)
1:a517b4e:     public void testGrowEmpty() {
1:a517b4e:         empty.grow(18);
1:a517b4e:         assertEquals(18,empty.getLength());
1:a517b4e:         assertEquals(3,empty.getLengthInBytes());
1:a517b4e:         assertEquals(0,empty.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(3,empty.getByteArray().length);
1:a517b4e:     }
1:a517b4e:     public void testGrow() {
1:a517b4e:         bitset18.grow(25);
1:a517b4e:         assertEquals(25,bitset18.getLength());
1:a517b4e:         assertEquals(4,bitset18.getLengthInBytes());
1:a517b4e:         assertEquals(9,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(4,bitset18.getByteArray().length);
1:a517b4e:     }
1:a517b4e:     public void testGrowSmaller() {
1:a517b4e:         bitset18.grow(9);
1:a517b4e:         assertEquals(18,bitset18.getLength());
1:8a6ea6d:         assertEquals(3,bitset18.getLengthInBytes());
1:8a6ea6d:         assertEquals(9,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(3,bitset18.getByteArray().length);
1:a517b4e:     }
1:a517b4e:     public void testGrowNeg() {
1:8a6ea6d:         try { bitset18.grow(-9); fail(); }
1:8a6ea6d:         catch (IllegalArgumentException iae) {}
1:8a6ea6d:     }
1:8a6ea6d:     public void testGrow0() {
1:8a6ea6d:         empty.grow(0);
1:8a6ea6d:         assertEquals(0,empty.getLength());
1:8a6ea6d:         assertEquals(0,empty.getLengthInBytes());
1:8a6ea6d:         assertEquals(0,empty.getNumBitsSet());
1:8a6ea6d:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(0,empty.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testGrow1() {
1:8a6ea6d:         empty.grow(1);
1:8a6ea6d:         assertEquals(1,empty.getLength());
1:8a6ea6d:         assertEquals(1,empty.getLengthInBytes());
1:8a6ea6d:         assertEquals(0,empty.getNumBitsSet());
1:8a6ea6d:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(1,empty.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testGrow2() {
1:8a6ea6d:         empty.grow(2);
1:8a6ea6d:         assertEquals(2,empty.getLength());
1:8a6ea6d:         assertEquals(1,empty.getLengthInBytes());
1:8a6ea6d:         assertEquals(0,empty.getNumBitsSet());
1:8a6ea6d:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(1,empty.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testGrow3() {
1:8a6ea6d:         empty.grow(3);
1:8a6ea6d:         assertEquals(3,empty.getLength());
1:8a6ea6d:         assertEquals(1,empty.getLengthInBytes());
1:8a6ea6d:         assertEquals(0,empty.getNumBitsSet());
1:8a6ea6d:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(1,empty.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testGrow4() {
1:8a6ea6d:         empty.grow(4);
1:8a6ea6d:         assertEquals(4,empty.getLength());
1:8a6ea6d:         assertEquals(1,empty.getLengthInBytes());
1:8a6ea6d:         assertEquals(0,empty.getNumBitsSet());
1:8a6ea6d:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(1,empty.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testGrow5() {
1:8a6ea6d:         empty.grow(5);
1:8a6ea6d:         assertEquals(5,empty.getLength());
1:8a6ea6d:         assertEquals(1,empty.getLengthInBytes());
1:8a6ea6d:         assertEquals(0,empty.getNumBitsSet());
1:8a6ea6d:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(1,empty.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testGrow6() {
1:8a6ea6d:         empty.grow(6);
1:8a6ea6d:         assertEquals(6,empty.getLength());
1:8a6ea6d:         assertEquals(1,empty.getLengthInBytes());
1:8a6ea6d:         assertEquals(0,empty.getNumBitsSet());
1:8a6ea6d:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(1,empty.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testGrow7() {
1:8a6ea6d:         empty.grow(7);
1:8a6ea6d:         assertEquals(7,empty.getLength());
1:8a6ea6d:         assertEquals(1,empty.getLengthInBytes());
1:8a6ea6d:         assertEquals(0,empty.getNumBitsSet());
1:8a6ea6d:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(1,empty.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testGrow8() {
1:8a6ea6d:         empty.grow(8);
1:8a6ea6d:         assertEquals(8,empty.getLength());
1:8a6ea6d:         assertEquals(1,empty.getLengthInBytes());
1:8a6ea6d:         assertEquals(0,empty.getNumBitsSet());
1:8a6ea6d:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(1,empty.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testGrow9() {
1:8a6ea6d:         empty.grow(9);
1:8a6ea6d:         assertEquals(9,empty.getLength());
1:8a6ea6d:         assertEquals(2,empty.getByteArray().length);
1:8a6ea6d:         assertEquals(0,empty.getNumBitsSet());
1:8a6ea6d:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(2,empty.getLengthInBytes());
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for shrink(int)
1:a517b4e:     public void testShrinkEmpty() {
1:8bb781c:         empty.shrink(0);
1:8bb781c:         assertEquals(0,empty.getLength());
1:8bb781c:         assertEquals(0,empty.getLengthInBytes());
1:8bb781c:         assertEquals(0,empty.getNumBitsSet());
1:c7205c1:         assertTrue(empty.invariantHolds());
1:8a6ea6d:         assertEquals(0,empty.getByteArray().length);
1:a517b4e:     }
1:a517b4e:     public void testShrink() {
1:a517b4e:         bitset18.shrink(9);
1:a517b4e:         assertEquals(9,bitset18.getLength());
1:a517b4e:         assertEquals(2,bitset18.getLengthInBytes());
1:a517b4e:         assertEquals(5,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(2,bitset18.getByteArray().length);
1:a517b4e:     }
1:a517b4e:     public void testShrinkLarger() {
1:8a6ea6d:         try { bitset18.shrink(25); fail(); }
1:8a6ea6d:         catch (IllegalArgumentException iae) {}
1:a517b4e:     }
1:a517b4e:     public void testShrinkNeg() {
2:a517b4e:         try {
1:a517b4e:             bitset18.shrink(-9);
2:a517b4e:             fail();
1:65a2bbd:         } catch (IllegalArgumentException iae) {}
1:a517b4e:     }
1:a517b4e:     public void testShrink0() {
1:8a6ea6d:         bitset18.shrink(0);
1:8a6ea6d:         assertEquals(0,bitset18.getLength());
1:8a6ea6d:         assertEquals(0,bitset18.getLengthInBytes());
1:8a6ea6d:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(0,bitset18.getNumBitsSet());
1:8a6ea6d:         assertEquals(0,bitset18.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testShrink1() {
1:8a6ea6d:         bitset18.shrink(1);
1:8a6ea6d:         assertEquals(1,bitset18.getLength());
1:8a6ea6d:         assertEquals(1,bitset18.getLengthInBytes());
1:8a6ea6d:         assertEquals(1,bitset18.getNumBitsSet());
1:8a6ea6d:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(1,bitset18.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testShrink2() {
1:8a6ea6d:         bitset18.shrink(2);
1:8a6ea6d:         assertEquals(2,bitset18.getLength());
1:8a6ea6d:         assertEquals(1,bitset18.getLengthInBytes());
1:8a6ea6d:         assertEquals(2,bitset18.getNumBitsSet());
1:8a6ea6d:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(1,bitset18.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testShrink3() {
1:8a6ea6d:         bitset18.shrink(3);
1:8a6ea6d:         assertEquals(3,bitset18.getLength());
1:8a6ea6d:         assertEquals(1,bitset18.getLengthInBytes());
1:8a6ea6d:         assertEquals(2,bitset18.getNumBitsSet());
1:8a6ea6d:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(1,bitset18.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testShrink4() {
1:8a6ea6d:         bitset18.shrink(4);
1:8a6ea6d:         assertEquals(4,bitset18.getLength());
1:8a6ea6d:         assertEquals(1,bitset18.getLengthInBytes());
1:8a6ea6d:         assertEquals(2,bitset18.getNumBitsSet());
1:8a6ea6d:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(1,bitset18.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testShrink5() {
1:8a6ea6d:         bitset18.shrink(5);
1:8a6ea6d:         assertEquals(5,bitset18.getLength());
1:8a6ea6d:         assertEquals(1,bitset18.getLengthInBytes());
1:8a6ea6d:         assertEquals(3,bitset18.getNumBitsSet());
1:8a6ea6d:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(1,bitset18.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testShrink6() {
1:8a6ea6d:         bitset18.shrink(6);
1:8a6ea6d:         assertEquals(6,bitset18.getLength());
1:8a6ea6d:         assertEquals(1,bitset18.getLengthInBytes());
1:8a6ea6d:         assertEquals(4,bitset18.getNumBitsSet());
1:8a6ea6d:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(1,bitset18.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testShrink7() {
1:8a6ea6d:         bitset18.shrink(7);
1:8a6ea6d:         assertEquals(7,bitset18.getLength());
1:8a6ea6d:         assertEquals(1,bitset18.getLengthInBytes());
1:8a6ea6d:         assertEquals(5,bitset18.getNumBitsSet());
1:8a6ea6d:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(1,bitset18.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testShrink8() {
1:8a6ea6d:         bitset18.shrink(8);
1:8a6ea6d:         assertEquals(8,bitset18.getLength());
1:8a6ea6d:         assertEquals(1,bitset18.getLengthInBytes());
1:8a6ea6d:         assertEquals(5,bitset18.getNumBitsSet());
1:8a6ea6d:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(1,bitset18.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testShrink9() {
1:8a6ea6d:         bitset18.shrink(9);
1:8a6ea6d:         assertEquals(9,bitset18.getLength());
1:8a6ea6d:         assertEquals(2,bitset18.getLengthInBytes());
1:8a6ea6d:         assertEquals(5,bitset18.getNumBitsSet());
1:8a6ea6d:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(2,bitset18.getByteArray().length);
1:8a6ea6d:     }
1:8a6ea6d:     public void testShrink10() {
1:8a6ea6d:         bitset18.shrink(10);
1:8a6ea6d:         assertEquals(10,bitset18.getLength());
1:8a6ea6d:         assertEquals(2,bitset18.getLengthInBytes());
1:8a6ea6d:         assertEquals(5,bitset18.getNumBitsSet());
1:8a6ea6d:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(2,bitset18.getByteArray().length);
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for compare(FormatableBitSet)
1:a517b4e:     public void testCompareSameEmpty() {
1:a517b4e:         assertEquals(0,empty.compare(empty));
1:a517b4e:     }
1:a517b4e:     public void testCompareAnotherEmpty() {
1:a517b4e:         assertEquals(0,empty.compare(new FormatableBitSet()));
1:a517b4e:     }
1:a517b4e:     public void testCompare18Empty() {
1:a517b4e:         // Would expect -1 since empty is smaller than bitset18 (based
1:a517b4e:         //on documentation)
1:a517b4e:         //assertEquals(-1,bitset18.compare(new FormatableBitSet()));
1:a517b4e:         assertEquals(1,bitset18.compare(new FormatableBitSet()));
1:a517b4e:     }
1:a517b4e:     public void testCompareEmpty18() {
1:a517b4e:         // Would expect 1 since empty is smaller than bitset18 (based
1:a517b4e:         //on documentation)
1:a517b4e:         //assertEquals(1,empty.compare(bitset18));
1:a517b4e:         assertEquals(-1,empty.compare(bitset18));
1:a517b4e:     }
1:a517b4e:     public void testCompareToComplement() {
1:a517b4e:         assertEquals(1, bitset18.compare(bitset18C));
1:a517b4e:     }
1:a517b4e:     public void testCompareDifferentArray() {
1:a517b4e:         FormatableBitSet small = new FormatableBitSet(bitset18);
1:a517b4e:         small.shrink(9);
1:c7205c1:         assertTrue(small.invariantHolds());
1:a517b4e:         FormatableBitSet large = new FormatableBitSet(bitset18);
1:a517b4e:         large.grow(100);
1:c7205c1:         assertTrue(large.invariantHolds());
1:a517b4e:         large.shrink(9);
1:c7205c1:         assertTrue(large.invariantHolds());
1:a517b4e:         assertEquals(0,small.compare(large));
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for isSet(int)
1:a517b4e:     public void testIsSetEmpty() {
1:aa13c70:         try { empty.isSet(-8); fail(); } catch (IllegalArgumentException iae) {}
1:aa13c70:         try { empty.isSet(-1); fail(); } catch (IllegalArgumentException iae) {}
1:aa13c70:         try { empty.isSet(0); fail(); } catch (IllegalArgumentException iae) {}
1:a517b4e:     }
1:a517b4e:     public void testIsSet() {
1:aa13c70:         try { bitset18C.isSet(-8); fail(); }
1:aa13c70:         catch (IllegalArgumentException iae) {}
1:aa13c70: 
1:aa13c70:         try { bitset18C.isSet(-1); fail(); }
1:aa13c70:         catch (IllegalArgumentException iae) {}
1:a517b4e: 
1:a517b4e:         assertFalse(bitset18C.isSet(0));
1:a517b4e:         assertFalse(bitset18C.isSet(1));
1:a517b4e:         assertTrue(bitset18C.isSet(2));
1:a517b4e:         assertTrue(bitset18C.isSet(3));
1:a517b4e:         assertFalse(bitset18C.isSet(4));
1:a517b4e:         assertFalse(bitset18C.isSet(5));
1:a517b4e:         assertFalse(bitset18C.isSet(6));
1:a517b4e:         assertTrue(bitset18C.isSet(7));
1:a517b4e:         assertTrue(bitset18C.isSet(8));
1:a517b4e:         assertTrue(bitset18C.isSet(9));
1:a517b4e:         assertFalse(bitset18C.isSet(10));
1:a517b4e:         assertFalse(bitset18C.isSet(11));
1:a517b4e:         assertFalse(bitset18C.isSet(12));
1:a517b4e:         assertFalse(bitset18C.isSet(13));
1:a517b4e:         assertTrue(bitset18C.isSet(14));
1:a517b4e:         assertTrue(bitset18C.isSet(15));
1:a517b4e:         assertTrue(bitset18C.isSet(16));
1:a517b4e:         assertTrue(bitset18C.isSet(17));
1:aa13c70:         try { bitset18C.isSet(18); fail(); }
1:aa13c70:         catch (IllegalArgumentException iae) {}
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for set(int)
1:a517b4e:     public void testSetEmpty() {
1:aa13c70:         try { empty.set(-8); fail(); } catch (IllegalArgumentException iae) {}
1:aa13c70:         try { empty.set(-1); fail(); } catch (IllegalArgumentException iae) {}
1:aa13c70:         try { empty.set(0); fail(); } catch (IllegalArgumentException iae) {}
1:a517b4e:     }
1:a517b4e:     public void testSet() {
1:aa13c70:         try { bitset18.set(-8); fail(); }
1:aa13c70:         catch (IllegalArgumentException iae) {}
1:aa13c70:         try { bitset18.set(-1); fail(); }
1:aa13c70:         catch (IllegalArgumentException iae) {}
1:a517b4e:         bitset18.set(0);
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:         bitset18.set(1);
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:aa13c70:         try { bitset18.set(18); fail(); }
1:aa13c70:         catch (IllegalArgumentException iae) {}
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for clear(int)
1:a517b4e:     public void testClearEmpty() {
1:aa13c70:         try { empty.clear(-8); fail(); } catch (IllegalArgumentException iae) {}
1:aa13c70:         try { empty.clear(-1); fail(); } catch (IllegalArgumentException iae) {}
1:aa13c70:         try { empty.clear(0); fail(); } catch (IllegalArgumentException iae) {}
1:a517b4e:     }
1:a517b4e:     public void testClear() {
1:aa13c70:         try { bitset18.clear(-8); fail(); }
1:aa13c70:         catch (IllegalArgumentException iae) {}
1:aa13c70:         try { bitset18.clear(-1); fail(); }
1:aa13c70:         catch (IllegalArgumentException iae) {}
1:a517b4e:         bitset18.clear(0);
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:         bitset18.clear(1);
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:aa13c70:         try { bitset18.clear(18); fail(); }
1:aa13c70:         catch (IllegalArgumentException iae) {}
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for anySetBit()
1:a517b4e:     public void testAnySetBitEmpty() {
1:17711ec:         assertEquals(empty.anySetBit(),-1);
1:a517b4e:     }
1:a517b4e:     public void testAnySetBit() {
1:a517b4e:         assertEquals(2,bitset18C.anySetBit());
1:a517b4e:         bitset18C.clear(2);
1:a517b4e:         assertEquals(3,bitset18C.anySetBit());
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for anySetBit(int)
1:a517b4e:     public void testAnySetBitBeyondBit() {
1:a517b4e:         assertEquals(4,bitset18.anySetBit(1));
1:a517b4e:     }
1:a517b4e:     public void testAnySetBitBeyondBitNeg() {
1:a517b4e:         assertEquals(1,bitset18.anySetBit(0));
1:a517b4e:         assertEquals(0,bitset18.anySetBit(-1));
1:17711ec:         try { bitset18.anySetBit(-2); fail(); }
1:17711ec:         catch (ArrayIndexOutOfBoundsException e) {}
1:17711ec:         try { bitset18.anySetBit(-3); fail(); }
1:17711ec:         catch (ArrayIndexOutOfBoundsException e) {}
1:a517b4e:     }
1:a517b4e:     public void testAnySetBitBeyondBitPastEnd() {
1:17711ec:         assertEquals(-1, bitset18.anySetBit(18));
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for or(FormatableBitSet)
1:a517b4e:     public void testORWithNull() {
1:a517b4e:         FormatableBitSet cpy = new FormatableBitSet(bitset18);
1:c7205c1:         assertTrue(cpy.invariantHolds());
1:a517b4e:         bitset18.or(null);
1:a517b4e:         assertEquals(9,bitset18.getNumBitsSet());
1:a517b4e:         assertTrue(cpy.equals(bitset18));
1:a517b4e:     }
1:a517b4e:     public void testORWithEmpty() {
1:a517b4e:         FormatableBitSet cpy = new FormatableBitSet(bitset18);
1:a517b4e:         bitset18.or(empty);
1:a517b4e:         assertEquals(9,bitset18.getNumBitsSet());
1:a517b4e:         assertTrue(cpy.equals(bitset18));
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e:     public void testORWithComplement() {
1:a517b4e:         bitset18.or(bitset18C);
1:a517b4e:         assertEquals(bitset18.getNumBitsSet(),18);
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e:     public void testORWithSmaller() {
1:a517b4e:         bitset18C.shrink(9);
1:a517b4e:         bitset18.or(bitset18C);
3:a517b4e:         assertEquals(13,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e:     public void testORWithLarger() {
1:a517b4e:         bitset18.shrink(9);
1:a517b4e:         bitset18.or(bitset18C);
1:a517b4e:         assertEquals(14,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for and(FormatableBitSet)
1:a517b4e:     public void testANDWithNull() {
1:c7205c1:         bitset18.and(null);
1:c7205c1:         assertEquals(18,bitset18.getLength());
1:c7205c1:         assertEquals(3,bitset18.getLengthInBytes());
2:c7205c1:         assertEquals(3,bitset18.getByteArray().length);
1:c7205c1:         assertEquals(0,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e:     public void testANDWithEmpty() {
1:a517b4e:         bitset18.and(new FormatableBitSet());
1:a517b4e:         assertEquals(0,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e:     public void testANDWithComplement() {
1:a517b4e:         bitset18.and(bitset18C);
1:a517b4e:         assertEquals(0,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e:     public void testANDWithSmaller() {
1:a517b4e:         bitset18C.shrink(9);
1:a517b4e:         bitset18.and(bitset18C);
1:a517b4e:         assertEquals(0,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e:     public void testANDWithLarger() {
1:a517b4e:         bitset18.shrink(9);
1:a517b4e:         bitset18.and(bitset18C);
1:a517b4e:         assertEquals(0,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e: 
1:a517b4e:     // Test cases for xor(FormatableBitSet)
1:a517b4e:     public void testXORWithNull() {
1:c7205c1:         FormatableBitSet cpy = new FormatableBitSet(bitset18);
1:c7205c1:         bitset18.xor(null);
1:c7205c1:         assertEquals(9,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(cpy.equals(bitset18));
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e:     public void testXORWithEmpty() {
1:a517b4e:         FormatableBitSet cpy = new FormatableBitSet(bitset18);
1:c7205c1:         bitset18.xor(empty);
1:c7205c1:         assertEquals(18,bitset18.getLength());
1:c7205c1:         assertEquals(3,bitset18.getLengthInBytes());
1:c7205c1:         assertEquals(9,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(cpy.equals(bitset18));
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(3,bitset18.getByteArray().length);
1:a517b4e:     }
1:a517b4e:     public void testXORWithComplement() {
1:a517b4e:         bitset18.set(2);
1:a517b4e:         bitset18.set(3);
3:a517b4e:         bitset18.xor(bitset18C);
1:a517b4e:         assertEquals(16,bitset18.getNumBitsSet());
1:a517b4e:         assertFalse(bitset18.isSet(2));
1:a517b4e:         assertFalse(bitset18.isSet(3));
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e:     public void testXORWithSmaller() {
1:a517b4e:         bitset18C.shrink(9);
1:c7205c1:         bitset18.xor(bitset18C);
1:c7205c1:         assertEquals(18,bitset18.getLength());
1:c7205c1:         assertEquals(3,bitset18.getLengthInBytes());
1:c7205c1:         assertEquals(13,bitset18.getNumBitsSet());
1:c7205c1:         assertTrue(bitset18.invariantHolds());
1:8a6ea6d:         assertEquals(3,bitset18.getByteArray().length);
1:a517b4e:     }
1:a517b4e:     public void testXORWithLarger() {
1:a517b4e:         bitset18.shrink(9);
1:c7205c1:         bitset18.xor(bitset18C);
1:c7205c1:         assertEquals(14,bitset18.getNumBitsSet());
3:c7205c1:         assertTrue(bitset18.invariantHolds());
1:a517b4e:     }
1:a517b4e: 
1:e957546:     // count one-bits in a byte with Integer.bitCount()
1:e957546:     private static int bitsInByte(byte b) throws Exception {
1:39b3237:         Integer arg = b & 0xff;
1:e957546:         Integer ret = (Integer) bitCount.invoke(null, new Object[] { arg });
1:e957546:         return ret.intValue();
1:e957546:     }
1:e957546: 
1:e957546:     // test getNumBitsSet() for a one-byte bit set
1:e957546:     public void numBitsSetInOneByte() throws Exception {
1:e957546:         for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; ++i) {
1:e957546:             final byte b = (byte) i;
1:e957546:             FormatableBitSet bs = new FormatableBitSet(new byte[] { b });
1:e957546:             assertEquals("invalid bit count for b=" + b,
1:e957546:                          bitsInByte(b), bs.getNumBitsSet());
1:e957546:         }
1:e957546:     }
1:e957546: 
1:e957546:     // test getNumBitsSet() for a two-byte bit set
1:e957546:     public void numBitsSetInTwoBytes() throws Exception {
1:e957546:         for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; ++i) {
1:e957546:             final byte b1 = (byte) i;
1:e957546:             final int bits1 = bitsInByte(b1);
1:e957546:             for (int j = Byte.MIN_VALUE; j <= Byte.MAX_VALUE; ++j) {
1:e957546:                 final byte b2 = (byte) j;
1:e957546:                 FormatableBitSet bs =
1:e957546:                     new FormatableBitSet(new byte[] { b1, b2 });
1:e957546:                 assertEquals(
1:e957546:                     "invalid bit count for b1=" + b1 + " and b2=" + b2,
1:e957546:                     bits1 + bitsInByte(b2), bs.getNumBitsSet());
1:e957546:             }
1:e957546:         }
1:e957546:     }
1:e957546: 
1:a517b4e:     // Test case for writeExternal(ObjectOut) and readExternal(ObjectOut)
1:a517b4e:     public void testExternal() throws IOException {
1:a517b4e:         ByteArrayOutputStream buf = new ByteArrayOutputStream();
1:a517b4e:         ObjectOutputStream oos = new ObjectOutputStream(buf);
1:a517b4e:         bitset18.writeExternal(oos);
1:a517b4e:         oos.flush();
1:a517b4e: 
1:c7205c1:         empty.readExternal
1:c7205c1:             (new ObjectInputStream(new ByteArrayInputStream
1:c7205c1:                                    (buf.toByteArray())));
1:a517b4e:         assertTrue(empty.equals(bitset18));
1:c7205c1:         assertTrue(empty.invariantHolds());
1:a517b4e:     }
1:a517b4e: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:         Integer arg = b & 0xff;
commit:6b23802
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite ts = new BaseTestSuite(FormatableBitSetTest.class,
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:857ee80
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.BaseTestCase;
/////////////////////////////////////////////////////////////////////////
1: public class FormatableBitSetTest extends BaseTestCase {
commit:8a6ea6d
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(0,empty.getByteArray().length);
1:         assertEquals(bits24,bitset18.getByteArray());
1:         assertEquals(bits24C,bitset18C.getByteArray());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(0,zeroBits.getByteArray().length);
1:         assertEquals(1,oneBit.getByteArray().length);
1:         assertEquals(1,eightBits.getByteArray().length);
1:         assertEquals(2,nineBits.getByteArray().length);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(3,cpy.getByteArray().length);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(3,empty.getByteArray().length);
1:         assertEquals(4,bitset18.getByteArray().length);
1:         assertEquals(3,bitset18.getLengthInBytes());
1:         assertEquals(9,bitset18.getNumBitsSet());
1:         assertEquals(3,bitset18.getByteArray().length);
1:         try { bitset18.grow(-9); fail(); }
1:         catch (IllegalArgumentException iae) {}
1:     }
1:     public void testGrow0() {
1:         empty.grow(0);
1:         assertEquals(0,empty.getLength());
1:         assertEquals(0,empty.getLengthInBytes());
1:         assertEquals(0,empty.getNumBitsSet());
1:         assertTrue(empty.invariantHolds());
1:         assertEquals(0,empty.getByteArray().length);
1:     }
1:     public void testGrow1() {
1:         empty.grow(1);
1:         assertEquals(1,empty.getLength());
1:         assertEquals(1,empty.getLengthInBytes());
1:         assertEquals(0,empty.getNumBitsSet());
1:         assertTrue(empty.invariantHolds());
1:         assertEquals(1,empty.getByteArray().length);
1:     }
1:     public void testGrow2() {
1:         empty.grow(2);
1:         assertEquals(2,empty.getLength());
1:         assertEquals(1,empty.getLengthInBytes());
1:         assertEquals(0,empty.getNumBitsSet());
1:         assertTrue(empty.invariantHolds());
1:         assertEquals(1,empty.getByteArray().length);
1:     }
1:     public void testGrow3() {
1:         empty.grow(3);
1:         assertEquals(3,empty.getLength());
1:         assertEquals(1,empty.getLengthInBytes());
1:         assertEquals(0,empty.getNumBitsSet());
1:         assertTrue(empty.invariantHolds());
1:         assertEquals(1,empty.getByteArray().length);
1:     }
1:     public void testGrow4() {
1:         empty.grow(4);
1:         assertEquals(4,empty.getLength());
1:         assertEquals(1,empty.getLengthInBytes());
1:         assertEquals(0,empty.getNumBitsSet());
1:         assertTrue(empty.invariantHolds());
1:         assertEquals(1,empty.getByteArray().length);
1:     }
1:     public void testGrow5() {
1:         empty.grow(5);
1:         assertEquals(5,empty.getLength());
1:         assertEquals(1,empty.getLengthInBytes());
1:         assertEquals(0,empty.getNumBitsSet());
1:         assertTrue(empty.invariantHolds());
1:         assertEquals(1,empty.getByteArray().length);
1:     }
1:     public void testGrow6() {
1:         empty.grow(6);
1:         assertEquals(6,empty.getLength());
1:         assertEquals(1,empty.getLengthInBytes());
1:         assertEquals(0,empty.getNumBitsSet());
1:         assertTrue(empty.invariantHolds());
1:         assertEquals(1,empty.getByteArray().length);
1:     }
1:     public void testGrow7() {
1:         empty.grow(7);
1:         assertEquals(7,empty.getLength());
1:         assertEquals(1,empty.getLengthInBytes());
1:         assertEquals(0,empty.getNumBitsSet());
1:         assertTrue(empty.invariantHolds());
1:         assertEquals(1,empty.getByteArray().length);
1:     }
1:     public void testGrow8() {
1:         empty.grow(8);
1:         assertEquals(8,empty.getLength());
1:         assertEquals(1,empty.getLengthInBytes());
1:         assertEquals(0,empty.getNumBitsSet());
1:         assertTrue(empty.invariantHolds());
1:         assertEquals(1,empty.getByteArray().length);
1:     }
1:     public void testGrow9() {
1:         empty.grow(9);
1:         assertEquals(9,empty.getLength());
1:         assertEquals(2,empty.getByteArray().length);
1:         assertEquals(0,empty.getNumBitsSet());
1:         assertTrue(empty.invariantHolds());
1:         assertEquals(2,empty.getLengthInBytes());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(0,empty.getByteArray().length);
1:         assertEquals(2,bitset18.getByteArray().length);
1:         try { bitset18.shrink(25); fail(); }
1:         catch (IllegalArgumentException iae) {}
/////////////////////////////////////////////////////////////////////////
1:         bitset18.shrink(0);
1:         assertEquals(0,bitset18.getLength());
1:         assertEquals(0,bitset18.getLengthInBytes());
1:         assertTrue(bitset18.invariantHolds());
1:         assertEquals(0,bitset18.getNumBitsSet());
1:         assertEquals(0,bitset18.getByteArray().length);
1:     }
1:     public void testShrink1() {
1:         bitset18.shrink(1);
1:         assertEquals(1,bitset18.getLength());
1:         assertEquals(1,bitset18.getLengthInBytes());
1:         assertEquals(1,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         assertEquals(1,bitset18.getByteArray().length);
1:     }
1:     public void testShrink2() {
1:         bitset18.shrink(2);
1:         assertEquals(2,bitset18.getLength());
1:         assertEquals(1,bitset18.getLengthInBytes());
1:         assertEquals(2,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         assertEquals(1,bitset18.getByteArray().length);
1:     }
1:     public void testShrink3() {
1:         bitset18.shrink(3);
1:         assertEquals(3,bitset18.getLength());
1:         assertEquals(1,bitset18.getLengthInBytes());
1:         assertEquals(2,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         assertEquals(1,bitset18.getByteArray().length);
1:     }
1:     public void testShrink4() {
1:         bitset18.shrink(4);
1:         assertEquals(4,bitset18.getLength());
1:         assertEquals(1,bitset18.getLengthInBytes());
1:         assertEquals(2,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         assertEquals(1,bitset18.getByteArray().length);
1:     }
1:     public void testShrink5() {
1:         bitset18.shrink(5);
1:         assertEquals(5,bitset18.getLength());
1:         assertEquals(1,bitset18.getLengthInBytes());
1:         assertEquals(3,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         assertEquals(1,bitset18.getByteArray().length);
1:     }
1:     public void testShrink6() {
1:         bitset18.shrink(6);
1:         assertEquals(6,bitset18.getLength());
1:         assertEquals(1,bitset18.getLengthInBytes());
1:         assertEquals(4,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         assertEquals(1,bitset18.getByteArray().length);
1:     }
1:     public void testShrink7() {
1:         bitset18.shrink(7);
1:         assertEquals(7,bitset18.getLength());
1:         assertEquals(1,bitset18.getLengthInBytes());
1:         assertEquals(5,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         assertEquals(1,bitset18.getByteArray().length);
1:     }
1:     public void testShrink8() {
1:         bitset18.shrink(8);
1:         assertEquals(8,bitset18.getLength());
1:         assertEquals(1,bitset18.getLengthInBytes());
1:         assertEquals(5,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         assertEquals(1,bitset18.getByteArray().length);
1:     }
1:     public void testShrink9() {
1:         bitset18.shrink(9);
1:         assertEquals(9,bitset18.getLength());
1:         assertEquals(2,bitset18.getLengthInBytes());
1:         assertEquals(5,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         assertEquals(2,bitset18.getByteArray().length);
1:     }
1:     public void testShrink10() {
1:         bitset18.shrink(10);
1:         assertEquals(10,bitset18.getLength());
1:         assertEquals(2,bitset18.getLengthInBytes());
1:         assertEquals(5,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         assertEquals(2,bitset18.getByteArray().length);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(3,bitset18.getByteArray().length);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(3,bitset18.getByteArray().length);
commit:e957546
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
1:      * <code>Integer.bitCount</code> method. Only available in JDK 1.5 or
1:      * later.
1:      */
1:     private final static Method bitCount;
1:     static {
1:         Method m = null;
1:         try {
1:             m = Integer.class.getMethod("bitCount", new Class[]{Integer.TYPE});
1:         } catch (Throwable t) {}
1:         bitCount = m;
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:         TestSuite ts = new TestSuite(FormatableBitSetTest.class,
1: 
1:         if (bitCount != null) {
1:             ts.addTest(new FormatableBitSetTest("numBitsSetInOneByte"));
1:             ts.addTest(new FormatableBitSetTest("numBitsSetInTwoBytes"));
1:         }
1: 
1:         return ts;
/////////////////////////////////////////////////////////////////////////
1:     // count one-bits in a byte with Integer.bitCount()
1:     private static int bitsInByte(byte b) throws Exception {
0:         Integer arg = new Integer(b & 0xff);
1:         Integer ret = (Integer) bitCount.invoke(null, new Object[] { arg });
1:         return ret.intValue();
1:     }
1: 
1:     // test getNumBitsSet() for a one-byte bit set
1:     public void numBitsSetInOneByte() throws Exception {
1:         for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; ++i) {
1:             final byte b = (byte) i;
1:             FormatableBitSet bs = new FormatableBitSet(new byte[] { b });
1:             assertEquals("invalid bit count for b=" + b,
1:                          bitsInByte(b), bs.getNumBitsSet());
1:         }
1:     }
1: 
1:     // test getNumBitsSet() for a two-byte bit set
1:     public void numBitsSetInTwoBytes() throws Exception {
1:         for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; ++i) {
1:             final byte b1 = (byte) i;
1:             final int bits1 = bitsInByte(b1);
1:             for (int j = Byte.MIN_VALUE; j <= Byte.MAX_VALUE; ++j) {
1:                 final byte b2 = (byte) j;
1:                 FormatableBitSet bs =
1:                     new FormatableBitSet(new byte[] { b1, b2 });
1:                 assertEquals(
1:                     "invalid bit count for b1=" + b1 + " and b2=" + b2,
1:                     bits1 + bitsInByte(b2), bs.getNumBitsSet());
1:             }
1:         }
1:     }
1: 
commit:17711ec
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(empty.anySetBit(),-1);
/////////////////////////////////////////////////////////////////////////
1:         try { bitset18.anySetBit(-2); fail(); }
1:         catch (ArrayIndexOutOfBoundsException e) {}
1:         try { bitset18.anySetBit(-3); fail(); }
1:         catch (ArrayIndexOutOfBoundsException e) {}
1:         assertEquals(-1, bitset18.anySetBit(18));
commit:65a2bbd
/////////////////////////////////////////////////////////////////////////
1:         try { FormatableBitSet negBits = new FormatableBitSet(-1); fail(); }
1:         catch(IllegalArgumentException iae) {}
/////////////////////////////////////////////////////////////////////////
1:         } catch (IllegalArgumentException iae) {}
commit:c7205c1
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(empty.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18C.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(zeroBits.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(oneBit.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(eightBits.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(nineBits.invariantHolds());
/////////////////////////////////////////////////////////////////////////
0:         assertTrue(negBits.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(emptyCpy.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(cpy.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(bitset18.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(empty.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(small.invariantHolds());
1:         assertTrue(large.invariantHolds());
1:         assertTrue(large.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(cpy.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
1:         bitset18.and(null);
1:         assertEquals(18,bitset18.getLength());
1:         assertEquals(3,bitset18.getLengthInBytes());
1:         assertEquals(3,bitset18.getByteArray().length);
1:         assertEquals(0,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
1:         assertTrue(bitset18.invariantHolds());
1:         FormatableBitSet cpy = new FormatableBitSet(bitset18);
1:         bitset18.xor(null);
1:         assertEquals(9,bitset18.getNumBitsSet());
1:         assertTrue(cpy.equals(bitset18));
1:         assertTrue(bitset18.invariantHolds());
1:         bitset18.xor(empty);
1:         assertEquals(18,bitset18.getLength());
1:         assertEquals(3,bitset18.getLengthInBytes());
1:         assertEquals(3,bitset18.getByteArray().length);
1:         assertEquals(9,bitset18.getNumBitsSet());
1:         assertTrue(cpy.equals(bitset18));
1:         assertTrue(bitset18.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(bitset18.invariantHolds());
1:         bitset18.xor(bitset18C);
1:         assertEquals(18,bitset18.getLength());
1:         assertEquals(3,bitset18.getLengthInBytes());
0:         assertEquals(3,bitset18.getByteArray().length);
1:         assertEquals(13,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
1:         bitset18.xor(bitset18C);
1:         assertEquals(14,bitset18.getNumBitsSet());
1:         assertTrue(bitset18.invariantHolds());
/////////////////////////////////////////////////////////////////////////
1:         empty.readExternal
1:             (new ObjectInputStream(new ByteArrayInputStream
1:                                    (buf.toByteArray())));
1:         assertTrue(empty.invariantHolds());
commit:aa13c70
/////////////////////////////////////////////////////////////////////////
1:         try { empty.isSet(-8); fail(); } catch (IllegalArgumentException iae) {}
1:         try { empty.isSet(-1); fail(); } catch (IllegalArgumentException iae) {}
1:         try { empty.isSet(0); fail(); } catch (IllegalArgumentException iae) {}
1:         try { bitset18C.isSet(-8); fail(); }
1:         catch (IllegalArgumentException iae) {}
1: 
1:         try { bitset18C.isSet(-1); fail(); }
1:         catch (IllegalArgumentException iae) {}
/////////////////////////////////////////////////////////////////////////
1:         try { bitset18C.isSet(18); fail(); }
1:         catch (IllegalArgumentException iae) {}
1:         try { empty.set(-8); fail(); } catch (IllegalArgumentException iae) {}
1:         try { empty.set(-1); fail(); } catch (IllegalArgumentException iae) {}
1:         try { empty.set(0); fail(); } catch (IllegalArgumentException iae) {}
1:         try { bitset18.set(-8); fail(); }
1:         catch (IllegalArgumentException iae) {}
1:         try { bitset18.set(-1); fail(); }
1:         catch (IllegalArgumentException iae) {}
1:         try { bitset18.set(18); fail(); }
1:         catch (IllegalArgumentException iae) {}
1:         try { empty.clear(-8); fail(); } catch (IllegalArgumentException iae) {}
1:         try { empty.clear(-1); fail(); } catch (IllegalArgumentException iae) {}
1:         try { empty.clear(0); fail(); } catch (IllegalArgumentException iae) {}
1:         try { bitset18.clear(-8); fail(); }
1:         catch (IllegalArgumentException iae) {}
1:         try { bitset18.clear(-1); fail(); }
1:         catch (IllegalArgumentException iae) {}
1:         try { bitset18.clear(18); fail(); }
1:         catch (IllegalArgumentException iae) {}
/////////////////////////////////////////////////////////////////////////
0:             try { bitset18.xor(bitset18C); fail(); }
0:             catch (IllegalArgumentException iae) {}
commit:72a3df4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:9fdfb40
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(0,negBits.getLengthInBytes());
0:         assertEquals(0,negBits.getByteArray().length);
commit:8bb781c
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(0,empty.getByteArray().length);
/////////////////////////////////////////////////////////////////////////
1:         empty.shrink(0);
1:         assertEquals(0,empty.getLength());
1:         assertEquals(0,empty.getLengthInBytes());
0:         assertEquals(0,empty.getByteArray().length);
1:         assertEquals(0,empty.getNumBitsSet());
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(0,empty.getByteArray().length);
0:         assertEquals(0,empty.getByteArray().length);
/////////////////////////////////////////////////////////////////////////
0:         empty.isSet(-1);
0:             assertFalse(empty.isSet(0));
/////////////////////////////////////////////////////////////////////////
0:         try { empty.set(-1); fail(); } 
0:         catch (ArrayIndexOutOfBoundsException e) {}
0:             catch (ArrayIndexOutOfBoundsException e) {}
/////////////////////////////////////////////////////////////////////////
0:         try { empty.clear(-1); fail(); } 
0:         catch (ArrayIndexOutOfBoundsException e) {}
0:             try { empty.clear(0); fail(); } 
0:             catch (ArrayIndexOutOfBoundsException e) {}
/////////////////////////////////////////////////////////////////////////
0:         try { empty.anySetBit(); fail(); } 
0:         catch (ArrayIndexOutOfBoundsException e) {}
/////////////////////////////////////////////////////////////////////////
0:             assertEquals(0,empty.getByteArray().length);
commit:a517b4e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derbyTesting.unitTests.junit.FormatableBitSet
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.junit;
1: 
0: import junit.framework.*;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
0: import org.apache.derby.shared.common.sanity.SanityManager;
0: import org.apache.derby.shared.common.sanity.AssertFailure;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
1: 
1: 
1: /**
1:  * This class is used to test the FormatableBitSet implementation.
1:  */
0: public class FormatableBitSetTest extends TestCase {
1:     private byte[] bits24;
1:     private byte[] bits24C;
1: 
1:     private FormatableBitSet empty;
1:     private FormatableBitSet bitset18;
1:     private FormatableBitSet bitset18C;
1: 
1:     /**
1:      * Create a test with the given name.
1:      *
1:      * @param name name of the test.
1:      */
1:     public FormatableBitSetTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      *
1:      */
1:     public void setUp() {
1:         //1100 1110 0011 1100 0000
1:         bits24  = new byte[] { (byte)0xce, (byte)0x3c, 0x0 };
1: 
1:         // 0011 0001 1100 0011 1100
1:         bits24C = new byte[] { (byte)0x31, (byte)0xc3, (byte)0xc0 };
1: 
1:         empty = new FormatableBitSet();
1:         bitset18 = new FormatableBitSet(bits24);
1:         bitset18.shrink(18);
1:         bitset18C = new FormatableBitSet(bits24C);
1:         bitset18C.shrink(18);
1:     }
1: 
1:     /**
1:      * Release the resources that are used in this test
1:      *
1:      * @throws Exception
1:      */
1:     public void tearDown() throws Exception {
1:         empty = null;
1:         bits24 = null;
1:         bits24C = null;
1:         bitset18 = null;
1:         bitset18C = null;
1:         super.tearDown();
1:     }
1:     /**
1:      * Return a suite with all tests in this class (default suite)
1:      *
1:      * @throws Exception
1:      */
1:     public static Test suite() {
0:         return new TestSuite(FormatableBitSetTest.class,
1:                              "FormatableBitSetTest suite");
1:     }
1: 
1:     /**
1:      * Test case that does a sanity check of the setup
1:      */
1:     public void testSetup() {
1:         assertEquals(0,empty.getLength());
1:         assertEquals(0,empty.getLengthInBytes());
0:         assertEquals(null,empty.getByteArray());
1:         assertEquals(0,empty.getNumBitsSet());
1: 
1:         assertEquals(18,bitset18.getLength());
1:         assertEquals(3,bitset18.getLengthInBytes());
0:         assertEquals(bits24,bitset18.getByteArray());
1:         assertEquals(9,bitset18.getNumBitsSet());
1: 
1:         assertEquals(18,bitset18C.getLength());
1:         assertEquals(3,bitset18C.getLengthInBytes());
0:         assertEquals(bits24C,bitset18C.getByteArray());
1:         assertEquals(9,bitset18C.getNumBitsSet());
1:     }
1: 
1:     // Test cases for single arg constructor
1:     public void testIntCtor0() {
1:         FormatableBitSet zeroBits = new FormatableBitSet(0);
1:         assertEquals(0,zeroBits.getLength());
1:         assertEquals(0,zeroBits.getLengthInBytes());
0:         assertEquals(0,zeroBits.getByteArray().length);
1:         assertEquals(0,zeroBits.getNumBitsSet());
1:     }
1:     public void testIntCtor1() {
1:         FormatableBitSet oneBit = new FormatableBitSet(1);
1:         assertEquals(1,oneBit.getLength());
1:         assertEquals(1,oneBit.getLengthInBytes());
0:         assertEquals(1,oneBit.getByteArray().length);
1:         assertEquals(0,oneBit.getNumBitsSet());
1:     }
1:     public void testIntCtor8() {
1:         FormatableBitSet eightBits = new FormatableBitSet(8);
1:         assertEquals(8,eightBits.getLength());
1:         assertEquals(1,eightBits.getLengthInBytes());
0:         assertEquals(1,eightBits.getByteArray().length);
1:         assertEquals(0,eightBits.getNumBitsSet());
1:     }
1:     public void testIntCtor9() {
1:         FormatableBitSet nineBits = new FormatableBitSet(9);
1:         assertEquals(9,nineBits.getLength());
1:         assertEquals(2,nineBits.getLengthInBytes());
0:         assertEquals(2,nineBits.getByteArray().length);
1:         assertEquals(0,nineBits.getNumBitsSet());
1:     }
1:     public void testIntCtorNeg() {
0:         // Should throw an exception?
0:         FormatableBitSet negBits = new FormatableBitSet(-1);
0:         assertEquals(-1,negBits.getLength());
0:         assertEquals(1,negBits.getLengthInBytes());
0:         assertEquals(1,negBits.getByteArray().length);
0:         assertEquals(0,negBits.getNumBitsSet());
1:     }
1: 
0:     // Test cases for two-arg constructor
0:     public void testArrayIntCtor0() {
0:         byte[] zeroByteArray = new byte[0];
0:         FormatableBitSet zeroBits = new FormatableBitSet(zeroByteArray,0);
1:         assertEquals(0,zeroBits.getLength());
1:         assertEquals(0,zeroBits.getLengthInBytes());
0:         assertEquals(0,zeroBits.getByteArray().length);
0:         assertEquals(zeroByteArray,zeroBits.getByteArray());
1:         assertEquals(0,zeroBits.getNumBitsSet());
1:     }
0:     public void testArrayIntCtor9() {
0:         byte[] twoByteArray = new byte[2];
0:         FormatableBitSet nineBits = new FormatableBitSet(twoByteArray,9);
1:         assertEquals(9,nineBits.getLength());
1:         assertEquals(2,nineBits.getLengthInBytes());
0:         assertEquals(twoByteArray,nineBits.getByteArray());
0:         assertEquals(2,nineBits.getByteArray().length);
1:         assertEquals(0,nineBits.getNumBitsSet());
1:     }
0:     public void testArrayIntCtor0_1() {
0:         byte[] zeroByteArray = new byte[0];
0:         FormatableBitSet oneBit = new FormatableBitSet(zeroByteArray,1);
1:         assertEquals(1,oneBit.getLength());
1:         assertEquals(1,oneBit.getLengthInBytes());
0:         assertEquals(1,oneBit.getByteArray().length);
1:         assertEquals(0,oneBit.getNumBitsSet());
1:     }
0:     // Not covered by other tests
0:     public void testArrayIntCtor1_0() {
0:         byte[] oneByteArray = new byte[1];
1:         try {
0:             FormatableBitSet zeroBits = new FormatableBitSet(oneByteArray,0);
1:             fail();
0:         } catch (ArrayIndexOutOfBoundsException e) {}
0:         //      assertEquals(0,zeroBits.getLength());
0:         //      assertEquals(0,zeroBits.getLengthInBytes());
0:         //      assertEquals(oneByteArray,zeroBits.getByteArray());
0:         //      assertEquals(0,zeroBits.getNumBitsSet());
1:     }
1: 
1:     // Test cases for the copy constructor
1:     public void testEmptyCpyCtor() {
1:         FormatableBitSet emptyCpy = new FormatableBitSet(empty);
1:         assertEquals(0,emptyCpy.getLength());
1:         assertEquals(0,emptyCpy.getLengthInBytes());
0:         // FAILURE - the byte array of the copy is not null
0:         //assertEquals(null,emptyCpy.getByteArray());
1:         assertEquals(0,emptyCpy.getNumBitsSet());
1:     }
1:     public void testCpyCtor() {
1:         FormatableBitSet cpy = new FormatableBitSet(bitset18);
1:         assertEquals(18,cpy.getLength());
1:         assertEquals(3,cpy.getLengthInBytes());
0:         assertEquals(3,cpy.getByteArray().length);
1:         assertEquals(9,cpy.getNumBitsSet());
1:         assertEquals(0,cpy.compare(bitset18));
1:         assertTrue(cpy.equals(bitset18));
1:     }
1: 
1:     // Test cases for grow(int)
1:     public void testGrowEmpty() {
1:         empty.grow(18);
1:         assertEquals(18,empty.getLength());
1:         assertEquals(3,empty.getLengthInBytes());
0:         assertEquals(3,empty.getByteArray().length);
1:         assertEquals(0,empty.getNumBitsSet());
1:     }
1:     public void testGrow() {
1:         bitset18.grow(25);
1:         assertEquals(25,bitset18.getLength());
1:         assertEquals(4,bitset18.getLengthInBytes());
0:         assertEquals(4,bitset18.getByteArray().length);
1:         assertEquals(9,bitset18.getNumBitsSet());
1:     }
0:     // OK - should fail?
1:     public void testGrowSmaller() {
1:         bitset18.grow(9);
1:         assertEquals(18,bitset18.getLength());
1:     }
0:     // OK - should fail?
1:     public void testGrowNeg() {
0:         bitset18.grow(-9);
1:         assertEquals(18,bitset18.getLength());
1:     }
1: 
1:     // Test cases for shrink(int)
1:     public void testShrinkEmpty() {
0:         if (SanityManager.DEBUG) {
0:             try { empty.shrink(0); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
0:             empty.shrink(0);
1:             assertEquals(0,empty.getLength());
1:             assertEquals(0,empty.getLengthInBytes());
0:             assertEquals(null,empty.getByteArray());
1:             assertEquals(0,empty.getNumBitsSet());
1:         }
1:     }
1:     public void testShrink() {
1:         bitset18.shrink(9);
1:         assertEquals(9,bitset18.getLength());
1:         assertEquals(2,bitset18.getLengthInBytes());
0:         assertEquals(2,bitset18.getByteArray().length);
1:         assertEquals(5,bitset18.getNumBitsSet());
1:     }
0:     // OK - should fail?
1:     public void testShrinkLarger() {
0:         bitset18.shrink(25);
1:         assertEquals(18,bitset18.getLength());
1:     }
1:     public void testShrinkNeg() {
1:         try {
1:             bitset18.shrink(-9);
1:             fail();
0:         } catch (ArrayIndexOutOfBoundsException e) {}
1:     }
0:     // Should be allowed?
1:     public void testShrink0() {
0:         try { bitset18.shrink(0); fail(); }
0:         catch (ArrayIndexOutOfBoundsException e) {}
0:         //      assertEquals(0,bitset18.getLength());
0:         //      assertEquals(0,bitset18.getLengthInBytes());
0:         //      assertEquals(0,bitset18.getByteArray().length);
0:         //      assertEquals(0,bitset18.getNumBitsSet());
1:     }
1: 
1:     // Test cases for compare(FormatableBitSet)
1:     public void testCompareSameEmpty() {
1:         assertEquals(0,empty.compare(empty));
1:     }
1:     public void testCompareAnotherEmpty() {
1:         assertEquals(0,empty.compare(new FormatableBitSet()));
1:     }
1:     public void testCompare18Empty() {
1:         // Would expect -1 since empty is smaller than bitset18 (based
1:         //on documentation)
1:         //assertEquals(-1,bitset18.compare(new FormatableBitSet()));
1:         assertEquals(1,bitset18.compare(new FormatableBitSet()));
1:     }
1:     public void testCompareEmpty18() {
1:         // Would expect 1 since empty is smaller than bitset18 (based
1:         //on documentation)
1:         //assertEquals(1,empty.compare(bitset18));
1:         assertEquals(-1,empty.compare(bitset18));
1:     }
1:     public void testCompareToComplement() {
1:         assertEquals(1, bitset18.compare(bitset18C));
1:     }
1:     public void testCompareDifferentArray() {
1:         FormatableBitSet small = new FormatableBitSet(bitset18);
1:         small.shrink(9);
1:         FormatableBitSet large = new FormatableBitSet(bitset18);
1:         large.grow(100);
1:         large.shrink(9);
1:         assertEquals(0,small.compare(large));
1:     }
1: 
0:     // Test cases for concatenate(FormatableBitSet)
0:     // Not covered by other tests
0:     public void testCatSameEmpty() {
0:         empty.concatenate(empty);
1:         assertEquals(0,empty.getLength());
1:         assertEquals(0,empty.getLengthInBytes());
0:         assertEquals(null,empty.getByteArray());
1:         assertEquals(0,empty.getNumBitsSet());
1:     }
0:     public void testCatAnotherEmpty() {
0:         empty.concatenate(new FormatableBitSet());
1:         assertEquals(0,empty.getLength());
1:         assertEquals(0,empty.getLengthInBytes());
0:         assertEquals(null,empty.getByteArray());
1:         assertEquals(0,empty.getNumBitsSet());
1:     }
0:     public void testCatSame() {
0:         bitset18.concatenate(bitset18);
0:         // Failure - is 18
0:         //assertEquals(36,bitset18.getLength());
0:         // Failure - is 3
0:         //assertEquals(5,bitset18.getLengthInBytes());
0:         // Failure - is 3
0:         //assertEquals(5,bitset18.getByteArray().length);
0:         // Failure - is 9
0:         //assertEquals(18,bitset18.getNumBitsSet());
1:     }
0:     public void testCatAnother() {
0:         bitset18.concatenate(new FormatableBitSet(bitset18));
0:         // Failure - is 18
0:         //assertEquals(36,bitset18.getLength());
0:         // Failure - is 3
0:         //assertEquals(5,bitset18.getLengthInBytes());
0:         // Failure - is 3
0:         //assertEquals(5,bitset18.getByteArray().length);
0:         // Failure - is 9
0:         //assertEquals(18,bitset18.getNumBitsSet());
1:     }
1: 
1:     // Test cases for isSet(int)
1:     public void testIsSetEmpty() {
0:         try { empty.isSet(-1); fail(); } catch (NullPointerException npe) {}
0:         if (SanityManager.DEBUG) {
0:             try { empty.isSet(0); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
0:             try { empty.isSet(0); fail(); } catch (NullPointerException e) {}
1:         }
1:     }
1:     public void testIsSet() {
0:         // Should trigger an exception?
0:         assertFalse(bitset18C.isSet(-1));
1: 
1:         assertFalse(bitset18C.isSet(0));
1:         assertFalse(bitset18C.isSet(1));
1:         assertTrue(bitset18C.isSet(2));
1:         assertTrue(bitset18C.isSet(3));
1:         assertFalse(bitset18C.isSet(4));
1:         assertFalse(bitset18C.isSet(5));
1:         assertFalse(bitset18C.isSet(6));
1:         assertTrue(bitset18C.isSet(7));
1:         assertTrue(bitset18C.isSet(8));
1:         assertTrue(bitset18C.isSet(9));
1:         assertFalse(bitset18C.isSet(10));
1:         assertFalse(bitset18C.isSet(11));
1:         assertFalse(bitset18C.isSet(12));
1:         assertFalse(bitset18C.isSet(13));
1:         assertTrue(bitset18C.isSet(14));
1:         assertTrue(bitset18C.isSet(15));
1:         assertTrue(bitset18C.isSet(16));
1:         assertTrue(bitset18C.isSet(17));
1: 
0:         if (SanityManager.DEBUG) {
0:             try { bitset18C.isSet(18); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
0:             // Should fail?
0:             assertFalse(bitset18C.isSet(18));
1:         }
1:     }
1: 
1:     // Test cases for set(int)
1:     public void testSetEmpty() {
0:         try { empty.set(-1); fail(); } catch (NullPointerException npe) {}
0:         if (SanityManager.DEBUG) {
0:             try { empty.set(0); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
0:             try { empty.set(0); fail(); }
0:             catch (NullPointerException npe) {}
1:         }
1:     }
1:     public void testSet() {
0:         // Should trigger an exception?
0:         bitset18.set(-1);
1:         bitset18.set(0);
1:         bitset18.set(1);
0:         if (SanityManager.DEBUG) {
0:             try { bitset18.set(18); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
0:             bitset18.set(18);
1:             assertEquals(18,bitset18.getLength());
1:             assertEquals(3,bitset18.getLengthInBytes());
0:             assertEquals(3,bitset18.getByteArray().length);
1:             assertEquals(9,bitset18.getNumBitsSet());
1:         }
1:     }
1: 
1:     // Test cases for clear(int)
1:     public void testClearEmpty() {
0:         try { empty.clear(-1); fail(); } catch (NullPointerException npe) {}
0:         if (SanityManager.DEBUG) {
0:             try { empty.clear(0); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
0:             try { empty.clear(0); fail(); } catch (NullPointerException npe) {}
1:         }
1:     }
1:     public void testClear() {
0:         // Should trigger an exception?
0:         bitset18.clear(-1);
1:         bitset18.clear(0);
1:         bitset18.clear(1);
1: 
0:         if (SanityManager.DEBUG) {
0:             try { bitset18.clear(18); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
0:             bitset18.clear(18);
1:             assertEquals(18,bitset18.getLength());
1:             assertEquals(3,bitset18.getLengthInBytes());
0:             assertEquals(3,bitset18.getByteArray().length);
0:             // Should have been 9?
0:             assertEquals(7,bitset18.getNumBitsSet());
1:         }
1:     }
1: 
1:     // Test cases for anySetBit()
1:     public void testAnySetBitEmpty() {
0:         // More reasonable to return -1 here ?
0:         try { empty.anySetBit(); fail(); } catch (NullPointerException npe) {}
0:         //assertEquals(empty.anySetBit(),-1);
1:     }
1:     public void testAnySetBit() {
1:         assertEquals(2,bitset18C.anySetBit());
1:         bitset18C.clear(2);
1:         assertEquals(3,bitset18C.anySetBit());
1:     }
1: 
1:     // Test cases for anySetBit(int)
1:     public void testAnySetBitBeyondBit() {
1:         assertEquals(4,bitset18.anySetBit(1));
1:     }
1:     public void testAnySetBitBeyondBitNeg() {
1:         assertEquals(1,bitset18.anySetBit(0));
1:         assertEquals(0,bitset18.anySetBit(-1));
1: 
0:         // Should be 0 or failure?
0:         assertEquals(10,bitset18.anySetBit(-2));
0:         // Should be 0 or failure?
0:         assertEquals(10,bitset18.anySetBit(-3));
1:     }
1:     public void testAnySetBitBeyondBitPastEnd() {
0:         if (SanityManager.DEBUG) {
0:             try { bitset18.anySetBit(18); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
0:             assertEquals(-1, bitset18.anySetBit(18));
1:         }
1:     }
1: 
1:     // Test cases for or(FormatableBitSet)
1:     public void testORWithNull() {
1:         FormatableBitSet cpy = new FormatableBitSet(bitset18);
1:         bitset18.or(null);
1:         assertEquals(9,bitset18.getNumBitsSet());
1:         assertTrue(cpy.equals(bitset18));
1:     }
1:     public void testORWithEmpty() {
1:         FormatableBitSet cpy = new FormatableBitSet(bitset18);
1:         bitset18.or(empty);
1:         assertEquals(9,bitset18.getNumBitsSet());
1:         assertTrue(cpy.equals(bitset18));
1:     }
1:     public void testORWithComplement() {
1:         bitset18.or(bitset18C);
1:         assertEquals(bitset18.getNumBitsSet(),18);
1:     }
1:     public void testORWithSmaller() {
1:         bitset18C.shrink(9);
1:         bitset18.or(bitset18C);
1:         assertEquals(13,bitset18.getNumBitsSet());
1:     }
1:     public void testORWithLarger() {
1:         bitset18.shrink(9);
1:         bitset18.or(bitset18C);
1:         assertEquals(14,bitset18.getNumBitsSet());
1:     }
1: 
1:     // Test cases for and(FormatableBitSet)
1:     public void testANDWithNull() {
0:         if (SanityManager.DEBUG) {
0:             try { bitset18.and(null); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
0:             try { bitset18.and(null); fail(); }
0:             catch (NullPointerException npe) {}
1:         }
1:     }
1:     public void testANDWithEmpty() {
1:         bitset18.and(new FormatableBitSet());
1:         assertEquals(0,bitset18.getNumBitsSet());
1:     }
1:     public void testANDWithComplement() {
1:         bitset18.and(bitset18C);
1:         assertEquals(0,bitset18.getNumBitsSet());
1:     }
1:     public void testANDWithSmaller() {
1:         bitset18C.shrink(9);
1:         bitset18.and(bitset18C);
1:         assertEquals(0,bitset18.getNumBitsSet());
1:     }
1:     public void testANDWithLarger() {
1:         bitset18.shrink(9);
1:         bitset18.and(bitset18C);
1:         assertEquals(0,bitset18.getNumBitsSet());
1:     }
1: 
1:     // Test cases for xor(FormatableBitSet)
1:     public void testXORWithNull() {
0:         try { bitset18.xor(null); fail(); } catch (NullPointerException npe) {}
1:     }
1:     public void testXORWithEmpty() {
1:         FormatableBitSet cpy = new FormatableBitSet(bitset18);
0:         if (SanityManager.DEBUG) {
0:             try { bitset18.xor(empty); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
0:             bitset18.xor(empty);
1:             assertEquals(0,empty.getLength());
1:             assertEquals(0,empty.getLengthInBytes());
0:             assertEquals(null,empty.getByteArray());
1:             assertEquals(0,empty.getNumBitsSet());
1:         }
0:         //assertEquals(9,bitset18.getNumBitsSet());
0:         //assertTrue(cpy.equals(bitset18));
1:     }
1:     public void testXORWithComplement() {
1:         bitset18.set(2);
1:         bitset18.set(3);
1:         bitset18.xor(bitset18C);
1:         assertEquals(16,bitset18.getNumBitsSet());
1:         assertFalse(bitset18.isSet(2));
1:         assertFalse(bitset18.isSet(3));
1:     }
1:     public void testXORWithSmaller() {
1:         bitset18C.shrink(9);
0:         if (SanityManager.DEBUG) {
0:             try { bitset18.xor(bitset18C); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
1:             bitset18.xor(bitset18C);
1:             assertEquals(18,bitset18.getLength());
1:             assertEquals(3,bitset18.getLengthInBytes());
0:             assertEquals(3,bitset18.getByteArray().length);
1:             assertEquals(13,bitset18.getNumBitsSet());
1: 
1:         }
0:         //assertEquals(13,bitset18.getNumBitsSet());
1:     }
1:     public void testXORWithLarger() {
1:         bitset18.shrink(9);
0:         if (SanityManager.DEBUG) {
0:             try { bitset18.xor(bitset18C); fail(); } catch (AssertFailure af) {}
1:         }
0:         else {
1:             bitset18.xor(bitset18C);
0:             // Should have been 18?
0:             assertEquals(17,bitset18.getLength());
1:             assertEquals(3,bitset18.getLengthInBytes());
0:             assertEquals(3,bitset18.getByteArray().length);
0:             // Should have been 9?
1:             assertEquals(13,bitset18.getNumBitsSet());
1:         }
0:         //assertEquals(14,bitset18.getNumBitsSet());
1:     }
1: 
1:     // Test case for writeExternal(ObjectOut) and readExternal(ObjectOut)
1:     public void testExternal() throws IOException {
1:         ByteArrayOutputStream buf = new ByteArrayOutputStream();
1:         ObjectOutputStream oos = new ObjectOutputStream(buf);
1:         bitset18.writeExternal(oos);
1:         oos.flush();
1: 
0:         empty.readExternal(new ObjectInputStream(new ByteArrayInputStream(buf.toByteArray())));
1:         assertTrue(empty.equals(bitset18));
1:     }
1: 
0:     // ERROR - Negative array size argument
0:     // Not covered by other tests
0:     //     public void testReadExternalFromArray() throws IOException {
0:     //      ByteArrayOutputStream buf = new ByteArrayOutputStream();
0:     //      ObjectOutput oos = new ObjectOutputStream(buf);
0:     //      bitset18.writeExternal(oos);
0:     //     oos.flush();
0:     //     empty.readExternalFromArray(new ArrayInputStream(buf.toByteArray()));
0:     //     assertTrue(empty.equals(bitset18));
0:     //      }
1: }
============================================================================