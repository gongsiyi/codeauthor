1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationSchemeBase
1:345de35: 
1:88a3cb9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88a3cb9:    contributor license agreements.  See the NOTICE file distributed with
1:88a3cb9:    this work for additional information regarding copyright ownership.
1:88a3cb9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88a3cb9:    (the "License"); you may not use this file except in compliance with
1:88a3cb9:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.jdbc.authentication;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextService;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.AccessFactory;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.jdbc.AuthenticationService;
1:eac0369: import org.apache.derby.authentication.UserAuthenticator;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.error.ExceptionSeverity;
1:eac0369: import org.apache.derby.iapi.reference.MessageId;
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: import java.util.Enumeration;
1:eac0369: import java.sql.SQLException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This is the base JNDI authentication scheme class.
1:eac0369:  *
1:eac0369:  * The generic environment JNDI properties for the selected JNDI
1:eac0369:  * scheme are retrieved here so that the user can set JNDI properties
1:eac0369:  * at the database or system level.
1:eac0369:  *
1:eac0369:  * @see org.apache.derby.authentication.UserAuthenticator 
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public abstract class JNDIAuthenticationSchemeBase implements UserAuthenticator
1:eac0369: {
1:eac0369: 	protected  final JNDIAuthenticationService authenticationService;
1:eac0369: 	protected String providerURL;
1:eac0369: 
1:eac0369: 	private AccessFactory store;
1:eac0369: 	protected Properties initDirContextEnv;
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// Constructor
1:eac0369: 	//
1:eac0369: 	// We get passed some Users properties if the authentication service
1:eac0369: 	// could not set them as part of System properties.
1:eac0369: 	//
1:eac0369: 	public JNDIAuthenticationSchemeBase(JNDIAuthenticationService as, Properties dbProperties) {
1:eac0369: 
1:eac0369: 			this.authenticationService = as;
1:eac0369: 
1:eac0369: 			//
1:eac0369: 			// Let's initialize the Directory Context environment based on
1:eac0369: 			// generic JNDI properties. Each JNDI scheme can then add its
1:eac0369: 			// specific scheme properties on top of it.
1:eac0369: 			//
1:eac0369: 			setInitDirContextEnv(dbProperties);
1:eac0369: 
1:eac0369: 			// Specify the ones for this scheme if not already specified
1:eac0369: 			this.setJNDIProviderProperties();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * To be OVERRIDEN by subclasses. This basically tests and sets
1:eac0369: 	 * default/expected JNDI properties for the JNDI provider scheme.
1:eac0369: 	 *
1:eac0369: 	 **/
1:eac0369: 	abstract protected void setJNDIProviderProperties();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Construct the initial JNDI directory context environment Properties
1:eac0369: 	 * object. We retrieve JNDI environment properties that the user may
1:eac0369: 	 * have set at the database level.
1:eac0369: 	 *
1:eac0369: 	 **/
1:eac0369: 	private void setInitDirContextEnv(Properties dbProps) {
1:eac0369: 
1:eac0369: 		//
1:eac0369: 		// We retrieve JNDI properties set at the database level	
1:cbd7b15: 		// if any. If dbProps == null, there are obviously no database
1:cbd7b15: 		// properties to retrieve.
1:eac0369: 		//
1:eac0369: 		initDirContextEnv = new Properties();
1:cbd7b15:                 
1:cbd7b15: 		if(dbProps != null) {
1:cbd7b15: 			for (Enumeration keys = dbProps.propertyNames(); keys.hasMoreElements(); ) {
1:eac0369: 
1:cbd7b15: 				String key = (String) keys.nextElement();
1:eac0369: 
1:cbd7b15: 				if (key.startsWith("java.naming.")) {
1:cbd7b15: 					initDirContextEnv.put(key, dbProps.getProperty(key));
1:cbd7b15: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	protected static final SQLException getLoginSQLException(Exception e) {
1:eac0369: 
1:eac0369: 		String text = MessageService.getTextMessage(SQLState.LOGIN_FAILED, e);
1:eac0369: 
1:eac0369: 		SQLException sqle = new SQLException(
1:eac0369: 							text, SQLState.LOGIN_FAILED, ExceptionSeverity.SESSION_SEVERITY);
1:eac0369: 
1:eac0369: 		return sqle;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:88a3cb9
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:cbd7b15
/////////////////////////////////////////////////////////////////////////
1: 		// if any. If dbProps == null, there are obviously no database
1: 		// properties to retrieve.
1:                 
1: 		if(dbProps != null) {
1: 			for (Enumeration keys = dbProps.propertyNames(); keys.hasMoreElements(); ) {
1: 				String key = (String) keys.nextElement();
1: 				if (key.startsWith("java.naming.")) {
1: 					initDirContextEnv.put(key, dbProps.getProperty(key));
1: 				}
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationSchemeBase
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc.authentication
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc.authentication;
1: 
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.AccessFactory;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.jdbc.AuthenticationService;
1: import org.apache.derby.authentication.UserAuthenticator;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.ExceptionSeverity;
1: import org.apache.derby.iapi.reference.MessageId;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: 
1: import java.util.Properties;
1: import java.util.Enumeration;
1: import java.sql.SQLException;
1: 
1: /**
1:  * This is the base JNDI authentication scheme class.
1:  *
1:  * The generic environment JNDI properties for the selected JNDI
1:  * scheme are retrieved here so that the user can set JNDI properties
1:  * at the database or system level.
1:  *
1:  * @see org.apache.derby.authentication.UserAuthenticator 
1:  *
1:  */
1: 
1: public abstract class JNDIAuthenticationSchemeBase implements UserAuthenticator
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	protected  final JNDIAuthenticationService authenticationService;
1: 	protected String providerURL;
1: 
1: 	private AccessFactory store;
1: 	protected Properties initDirContextEnv;
1: 
1: 	//
1: 	// Constructor
1: 	//
1: 	// We get passed some Users properties if the authentication service
1: 	// could not set them as part of System properties.
1: 	//
1: 	public JNDIAuthenticationSchemeBase(JNDIAuthenticationService as, Properties dbProperties) {
1: 
1: 			this.authenticationService = as;
1: 
1: 			//
1: 			// Let's initialize the Directory Context environment based on
1: 			// generic JNDI properties. Each JNDI scheme can then add its
1: 			// specific scheme properties on top of it.
1: 			//
1: 			setInitDirContextEnv(dbProperties);
1: 
1: 			// Specify the ones for this scheme if not already specified
1: 			this.setJNDIProviderProperties();
1: 	}
1: 
1: 
1: 	/**
1: 	 * To be OVERRIDEN by subclasses. This basically tests and sets
1: 	 * default/expected JNDI properties for the JNDI provider scheme.
1: 	 *
1: 	 **/
1: 	abstract protected void setJNDIProviderProperties();
1: 
1: 	/**
1: 	 * Construct the initial JNDI directory context environment Properties
1: 	 * object. We retrieve JNDI environment properties that the user may
1: 	 * have set at the database level.
1: 	 *
1: 	 **/
1: 	private void setInitDirContextEnv(Properties dbProps) {
1: 
1: 		//
1: 		// We retrieve JNDI properties set at the database level	
0: 		// if any.
1: 		//
1: 		initDirContextEnv = new Properties();
1: 
0: 		for (Enumeration keys = dbProps.propertyNames(); keys.hasMoreElements(); ) {
1: 
0: 			String key = (String) keys.nextElement();
1: 
0: 			if (key.startsWith("java.naming.")) {
0: 				initDirContextEnv.put(key, dbProps.getProperty(key));
1: 			}
1: 		}
1: 	}
1: 	
1: 	protected static final SQLException getLoginSQLException(Exception e) {
1: 
1: 		String text = MessageService.getTextMessage(SQLState.LOGIN_FAILED, e);
1: 
1: 		SQLException sqle = new SQLException(
1: 							text, SQLState.LOGIN_FAILED, ExceptionSeverity.SESSION_SEVERITY);
1: 
1: 		return sqle;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc.authentication
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.jdbc.authentication;
0: 
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.AccessFactory;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.jdbc.AuthenticationService;
0: import org.apache.derby.authentication.UserAuthenticator;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.ExceptionSeverity;
0: import org.apache.derby.iapi.reference.MessageId;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: 
0: import java.util.Properties;
0: import java.util.Enumeration;
0: import java.sql.SQLException;
0: 
0: /**
0:  * This is the base JNDI authentication scheme class.
0:  *
0:  * The generic environment JNDI properties for the selected JNDI
0:  * scheme are retrieved here so that the user can set JNDI properties
0:  * at the database or system level.
0:  *
0:  * @see org.apache.derby.authentication.UserAuthenticator 
0:  *
0:  */
0: 
0: public abstract class JNDIAuthenticationSchemeBase implements UserAuthenticator
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	protected  final JNDIAuthenticationService authenticationService;
0: 	protected String providerURL;
0: 
0: 	private AccessFactory store;
0: 	protected Properties initDirContextEnv;
0: 
0: 	//
0: 	// Constructor
0: 	//
0: 	// We get passed some Users properties if the authentication service
0: 	// could not set them as part of System properties.
0: 	//
0: 	public JNDIAuthenticationSchemeBase(JNDIAuthenticationService as, Properties dbProperties) {
0: 
0: 			this.authenticationService = as;
0: 
0: 			//
0: 			// Let's initialize the Directory Context environment based on
0: 			// generic JNDI properties. Each JNDI scheme can then add its
0: 			// specific scheme properties on top of it.
0: 			//
0: 			setInitDirContextEnv(dbProperties);
0: 
0: 			// Specify the ones for this scheme if not already specified
0: 			this.setJNDIProviderProperties();
0: 	}
0: 
0: 
0: 	/**
0: 	 * To be OVERRIDEN by subclasses. This basically tests and sets
0: 	 * default/expected JNDI properties for the JNDI provider scheme.
0: 	 *
0: 	 **/
0: 	abstract protected void setJNDIProviderProperties();
0: 
0: 	/**
0: 	 * Construct the initial JNDI directory context environment Properties
0: 	 * object. We retrieve JNDI environment properties that the user may
0: 	 * have set at the database level.
0: 	 *
0: 	 **/
0: 	private void setInitDirContextEnv(Properties dbProps) {
0: 
0: 		//
0: 		// We retrieve JNDI properties set at the database level	
0: 		// if any.
0: 		//
0: 		initDirContextEnv = new Properties();
0: 
0: 		for (Enumeration keys = dbProps.propertyNames(); keys.hasMoreElements(); ) {
0: 
0: 			String key = (String) keys.nextElement();
0: 
0: 			if (key.startsWith("java.naming.")) {
0: 				initDirContextEnv.put(key, dbProps.getProperty(key));
0: 			}
0: 		}
0: 	}
0: 	
0: 	protected static final SQLException getLoginSQLException(Exception e) {
0: 
0: 		String text = MessageService.getTextMessage(SQLState.LOGIN_FAILED, e);
0: 
0: 		SQLException sqle = new SQLException(
0: 							text, SQLState.LOGIN_FAILED, ExceptionSeverity.SESSION_SEVERITY);
0: 
0: 		return sqle;
0: 	}
0: 
0: }
============================================================================