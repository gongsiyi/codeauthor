1:fe77ca5: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.TestConstraintNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:fe77ca5: 
3:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package	org.apache.derby.impl.sql.compile;
1:fe77ca5: 
1:f33fbaf: import java.util.List;
1:af1c18c: import org.apache.derby.catalog.UUID;
1:fe77ca5: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:fe77ca5: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:af1c18c: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:fe77ca5: 
4:fe77ca5: /**
1:fe77ca5:  * A TestConstraintNode is used to determine when a constraint
1:fe77ca5:  * has been violated.
2:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: 
1:3bb140c: class TestConstraintNode extends UnaryLogicalOperatorNode
2:fe77ca5: {
1:af1c18c:     private final String sqlState;
1:af1c18c:     private final String tableName;
1:af1c18c:     private final UUID cid;
1:af1c18c:     private final boolean deferrable;
1:af1c18c:     private final String constraintName;
1:fe77ca5: 
1:3bb140c:     /**
1:3bb140c:      * @param booleanValue The operand of the constraint test
1:3bb140c:      * @param sqlState The SQLState of the exception to throw if the
1:3bb140c:     *              constraint has failed
1:3bb140c:      * @param tableName The name of the table that the constraint is on
1:af1c18c:      * @param cd The descriptor of the constraint being checked
1:3bb140c:      * @param cm context manager
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     TestConstraintNode(
1:3bb140c:             ValueNode booleanValue,
1:3bb140c:             String sqlState,
1:3bb140c:             String tableName,
1:af1c18c:             ConstraintDescriptor cd,
1:3bb140c:             ContextManager cm) throws StandardException {
1:af1c18c:         super(booleanValue,
1:af1c18c:                 cd.deferrable() ?
1:af1c18c:                         "throwExceptionIfImmediateAndFalse" :
1:af1c18c:                         "throwExceptionIfFalse",
1:af1c18c:                 cm);
1:3bb140c:         this.sqlState = sqlState;
1:2706d1f:         this.tableName = tableName;
1:af1c18c:         this.cid = cd.getUUID();
1:af1c18c:         this.deferrable = cd.deferrable();
1:af1c18c:         this.constraintName = cd.getConstraintName();
1:3bb140c:     }
1:fe77ca5: 
1:3bb140c:     /**
1:fe77ca5: 	 * Bind this logical operator.  All that has to be done for binding
1:fe77ca5: 	 * a logical operator is to bind the operand, check that the operand
1:fe77ca5: 	 * is SQLBoolean, and set the result type to SQLBoolean.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param fromList			The query's FROM list
1:fe77ca5: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The new top of the expression tree.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:fe77ca5: 			throws StandardException
1:fe77ca5: 	{
1:09c2697:         bindOperand(fromList, subqueryList, aggregates);
1:fe77ca5: 
1:fe77ca5: 		/*
1:fe77ca5: 		** If the operand is not boolean, cast it.
1:fe77ca5: 		*/
1:fe77ca5: 
1:3233189: 		if (!operand.getTypeServices().getTypeId().isBooleanTypeId())
1:fe77ca5: 		{
1:3bb140c:             operand = new CastNode(
1:fe77ca5: 					operand,
1:fe77ca5: 					new DataTypeDescriptor(TypeId.BOOLEAN_ID, true),
1:fe77ca5: 					getContextManager());
1:fe77ca5: 			((CastNode) operand).bindCastNodeOnly();
2:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		/* Set the type info */
1:fe77ca5: 		setFullTypeInfo();
1:fe77ca5: 
1:fe77ca5: 		return this;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Do code generation for the TestConstraint operator.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1:fe77ca5: 	 * @param mb	The method the expression will go into
1:fe77ca5: 	 *
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:fe77ca5: 									throws StandardException
1:fe77ca5: 	{
1:fe77ca5: 
1:fe77ca5: 		/*
1:fe77ca5: 		** This generates the following code:
1:fe77ca5: 		**
1:fe77ca5: 		** operand.testConstraint(sqlState, tableName, constraintName)
1:fe77ca5: 		*/
1:fe77ca5: 
1:fe77ca5: 		operand.generateExpression(acb, mb);
1:fe77ca5: 
1:fe77ca5: 		mb.push(sqlState);
1:fe77ca5: 		mb.push(tableName);
1:af1c18c:         mb.push(constraintName);
1:fe77ca5: 
1:af1c18c:         if (deferrable) {
1:af1c18c:             acb.pushThisAsActivation(mb); // arg 4
1:af1c18c:             mb.push(acb.addItem(cid)); // arg 5
1:fe77ca5: 
1:af1c18c:             mb.callMethod(
1:af1c18c:                 VMOpcode.INVOKEINTERFACE,
1:af1c18c:                 ClassName.BooleanDataValue,
1:af1c18c:                 "throwExceptionIfImmediateAndFalse",
1:af1c18c:                 ClassName.BooleanDataValue,
1:af1c18c:                 5);
1:af1c18c:         } else {
1:af1c18c:             mb.callMethod(VMOpcode.INVOKEINTERFACE, ClassName.BooleanDataValue,
1:af1c18c:                     "throwExceptionIfFalse", ClassName.BooleanDataValue, 3);
1:af1c18c:         }
1:fe77ca5: 	}
1:fe77ca5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     private final String sqlState;
1:     private final String tableName;
1:     private final UUID cid;
1:     private final boolean deferrable;
1:     private final String constraintName;
1:      * @param cd The descriptor of the constraint being checked
/////////////////////////////////////////////////////////////////////////
1:             ConstraintDescriptor cd,
1:         super(booleanValue,
1:                 cd.deferrable() ?
1:                         "throwExceptionIfImmediateAndFalse" :
1:                         "throwExceptionIfFalse",
1:                 cm);
1:         this.cid = cd.getUUID();
1:         this.deferrable = cd.deferrable();
1:         this.constraintName = cd.getConstraintName();
/////////////////////////////////////////////////////////////////////////
1:         mb.push(constraintName);
1:         if (deferrable) {
1:             acb.pushThisAsActivation(mb); // arg 4
1:             mb.push(acb.addItem(cid)); // arg 5
1:             mb.callMethod(
1:                 VMOpcode.INVOKEINTERFACE,
1:                 ClassName.BooleanDataValue,
1:                 "throwExceptionIfImmediateAndFalse",
1:                 ClassName.BooleanDataValue,
1:                 5);
1:         } else {
1:             mb.callMethod(VMOpcode.INVOKEINTERFACE, ClassName.BooleanDataValue,
1:                     "throwExceptionIfFalse", ClassName.BooleanDataValue, 3);
1:         }
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         this.tableName = tableName;
0:         this.constraintName = constraintName;
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
1: class TestConstraintNode extends UnaryLogicalOperatorNode
1:     /**
1:      * @param booleanValue The operand of the constraint test
1:      * @param sqlState The SQLState of the exception to throw if the
1:     *              constraint has failed
1:      * @param tableName The name of the table that the constraint is on
0:      * @param constraintName The name of the constraint being checked
1:      * @param cm context manager
1:      * @throws StandardException
1:      */
1:     TestConstraintNode(
1:             ValueNode booleanValue,
1:             String sqlState,
1:             String tableName,
0:             String constraintName,
1:             ContextManager cm) throws StandardException {
0:         super(booleanValue, "throwExceptionIfFalse", cm);
0:         setNodeType(C_NodeTypes.TEST_CONSTRAINT_NODE);
1:         this.sqlState = sqlState;
0:        this.tableName = tableName;
0:        this.constraintName = constraintName;
1:     }
1:     /**
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             operand = new CastNode(
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         bindOperand(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3233189
/////////////////////////////////////////////////////////////////////////
0: 		bindOperand(fromList, subqueryList, aggregateVector);
1: 		if (!operand.getTypeServices().getTypeId().isBooleanTypeId())
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.TestConstraintNode
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.reference.ClassName;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * A TestConstraintNode is used to determine when a constraint
1:  * has been violated.
1:  *
0:  * @author jeff
1:  */
1: 
0: public class TestConstraintNode extends UnaryLogicalOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	private String sqlState;
0: 	private String tableName;
0: 	private String constraintName;
1: 
1: 	/**
0: 	 * Initializer for a TestConstraintNode
1: 	 *
0: 	 * @param operand	The operand of the constraint test
0: 	 * @param sqlState	The SQLState of the exception to throw if the
0: 	 *					constraint has failed
0: 	 * @param tableName	The name of the table that the constraint is on
0: 	 * @param constraintName	The name of the constraint being checked
1: 	 */
1: 
0: 	public void init(Object booleanValue,
0: 					 Object sqlState,
0: 					 Object tableName,
0: 					 Object constraintName)
1: 	{
0: 		super.init(booleanValue, "throwExceptionIfFalse");
0: 		this.sqlState = (String) sqlState;
0: 		this.tableName = (String) tableName;
0: 		this.constraintName = (String) constraintName;
1: 	}
1: 
1: 	/**
1: 	 * Bind this logical operator.  All that has to be done for binding
1: 	 * a logical operator is to bind the operand, check that the operand
1: 	 * is SQLBoolean, and set the result type to SQLBoolean.
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
1: 			throws StandardException
1: 	{
0: 		bindUnaryOperator(fromList, subqueryList, aggregateVector);
1: 
1: 		/*
1: 		** If the operand is not boolean, cast it.
1: 		*/
1: 
0: 		if ( ! operand.getTypeServices().getTypeId().getSQLTypeName().equals(
0: 														TypeId.BOOLEAN_NAME))
1: 		{
0: 			operand = (ValueNode)
0: 				getNodeFactory().getNode(
0: 					C_NodeTypes.CAST_NODE,
1: 					operand,
1: 					new DataTypeDescriptor(TypeId.BOOLEAN_ID, true),
1: 					getContextManager());
1: 			((CastNode) operand).bindCastNodeOnly();
1: 		}
1: 
1: 		/* Set the type info */
1: 		setFullTypeInfo();
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Do code generation for the TestConstraint operator.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1: 	 * @param mb	The method the expression will go into
1: 	 *
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 									throws StandardException
1: 	{
1: 
1: 		/*
1: 		** This generates the following code:
1: 		**
1: 		** operand.testConstraint(sqlState, tableName, constraintName)
1: 		*/
1: 
1: 		operand.generateExpression(acb, mb);
1: 
1: 		mb.push(sqlState);
1: 		mb.push(tableName);
0: 		mb.push(constraintName);
1: 
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, ClassName.BooleanDataValue,
0: 				"throwExceptionIfFalse", ClassName.BooleanDataValue, 3);
1: 
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
0: 	 * @param booleanValue	The operand of the constraint test
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * A TestConstraintNode is used to determine when a constraint
0:  * has been violated.
0:  *
0:  * @author jeff
0:  */
0: 
0: public class TestConstraintNode extends UnaryLogicalOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	private String sqlState;
0: 	private String tableName;
0: 	private String constraintName;
0: 
0: 	/**
0: 	 * Initializer for a TestConstraintNode
0: 	 *
0: 	 * @param operand	The operand of the constraint test
0: 	 * @param sqlState	The SQLState of the exception to throw if the
0: 	 *					constraint has failed
0: 	 * @param tableName	The name of the table that the constraint is on
0: 	 * @param constraintName	The name of the constraint being checked
0: 	 */
0: 
0: 	public void init(Object booleanValue,
0: 					 Object sqlState,
0: 					 Object tableName,
0: 					 Object constraintName)
0: 	{
0: 		super.init(booleanValue, "throwExceptionIfFalse");
0: 		this.sqlState = (String) sqlState;
0: 		this.tableName = (String) tableName;
0: 		this.constraintName = (String) constraintName;
0: 	}
0: 
0: 	/**
0: 	 * Bind this logical operator.  All that has to be done for binding
0: 	 * a logical operator is to bind the operand, check that the operand
0: 	 * is SQLBoolean, and set the result type to SQLBoolean.
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
0: 			throws StandardException
0: 	{
0: 		bindUnaryOperator(fromList, subqueryList, aggregateVector);
0: 
0: 		/*
0: 		** If the operand is not boolean, cast it.
0: 		*/
0: 
0: 		if ( ! operand.getTypeServices().getTypeId().getSQLTypeName().equals(
0: 														TypeId.BOOLEAN_NAME))
0: 		{
0: 			operand = (ValueNode)
0: 				getNodeFactory().getNode(
0: 					C_NodeTypes.CAST_NODE,
0: 					operand,
0: 					new DataTypeDescriptor(TypeId.BOOLEAN_ID, true),
0: 					getContextManager());
0: 			((CastNode) operand).bindCastNodeOnly();
0: 		}
0: 
0: 		/* Set the type info */
0: 		setFullTypeInfo();
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Do code generation for the TestConstraint operator.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
0: 	 * @param mb	The method the expression will go into
0: 	 *
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 									throws StandardException
0: 	{
0: 
0: 		/*
0: 		** This generates the following code:
0: 		**
0: 		** operand.testConstraint(sqlState, tableName, constraintName)
0: 		*/
0: 
0: 		operand.generateExpression(acb, mb);
0: 
0: 		mb.push(sqlState);
0: 		mb.push(tableName);
0: 		mb.push(constraintName);
0: 
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, ClassName.BooleanDataValue,
0: 				"throwExceptionIfFalse", ClassName.BooleanDataValue, 3);
0: 
0: 	}
0: }
============================================================================