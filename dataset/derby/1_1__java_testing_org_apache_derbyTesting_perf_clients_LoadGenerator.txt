1:106ea47: /*
1:106ea47: 
1:106ea47: Derby - Class org.apache.derbyTesting.perf.clients.LoadGenerator
1:106ea47: 
1:106ea47: Licensed to the Apache Software Foundation (ASF) under one or more
1:106ea47: contributor license agreements.  See the NOTICE file distributed with
1:106ea47: this work for additional information regarding copyright ownership.
1:106ea47: The ASF licenses this file to You under the Apache License, Version 2.0
1:106ea47: (the "License"); you may not use this file except in compliance with
1:106ea47: the License.  You may obtain a copy of the License at
1:106ea47: 
1:106ea47:    http://www.apache.org/licenses/LICENSE-2.0
1:106ea47: 
1:106ea47: Unless required by applicable law or agreed to in writing, software
1:106ea47: distributed under the License is distributed on an "AS IS" BASIS,
1:106ea47: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:106ea47: See the License for the specific language governing permissions and
1:106ea47: limitations under the License.
1:106ea47: 
1:106ea47: */
1:106ea47: 
1:106ea47: package org.apache.derbyTesting.perf.clients;
1:106ea47: 
1:106ea47: import java.io.PrintStream;
1:106ea47: 
1:106ea47: /**
1:106ea47:  * Interface implemented by load generators. A load generator generates the
1:106ea47:  * test load on the DBMS by invoking the clients' {@code doWork()} methods.
1:106ea47:  * Different load generators may generate load with different characteristics.
1:106ea47:  * The actual database operations performed are decided by the clients passed
1:106ea47:  * in to the load generator's {@code init()} method.
1:106ea47:  */
1:106ea47: public interface LoadGenerator {
1:106ea47:     /**
1:106ea47:      * Initialize the load generator.
1:106ea47:      * @param clients tells the load generator which clients it should use
1:106ea47:      * to generate load with
1:106ea47:      */
1:106ea47:     void init(Client[] clients);
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Start the warmup phase. This means that the load generator is started,
1:106ea47:      * but the results are not collected.
1:106ea47:      */
1:106ea47:     void startWarmup();
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Move from the warmup phase to the steady-state phase. Start collecting
1:106ea47:      * results.
1:106ea47:      */
1:106ea47:     void startSteadyState();
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Stop the load generator.
1:106ea47:      */
1:106ea47:     void stop();
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Print a report from the test run.
1:106ea47:      *
1:106ea47:      * @param out stream to print the report to
1:106ea47:      */
1:106ea47:     void printReport(PrintStream out);
1:106ea47: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:106ea47
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.clients.LoadGenerator
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.perf.clients;
1: 
1: import java.io.PrintStream;
1: 
1: /**
1:  * Interface implemented by load generators. A load generator generates the
1:  * test load on the DBMS by invoking the clients' {@code doWork()} methods.
1:  * Different load generators may generate load with different characteristics.
1:  * The actual database operations performed are decided by the clients passed
1:  * in to the load generator's {@code init()} method.
1:  */
1: public interface LoadGenerator {
1:     /**
1:      * Initialize the load generator.
1:      * @param clients tells the load generator which clients it should use
1:      * to generate load with
1:      */
1:     void init(Client[] clients);
1: 
1:     /**
1:      * Start the warmup phase. This means that the load generator is started,
1:      * but the results are not collected.
1:      */
1:     void startWarmup();
1: 
1:     /**
1:      * Move from the warmup phase to the steady-state phase. Start collecting
1:      * results.
1:      */
1:     void startSteadyState();
1: 
1:     /**
1:      * Stop the load generator.
1:      */
1:     void stop();
1: 
1:     /**
1:      * Print a report from the test run.
1:      *
1:      * @param out stream to print the report to
1:      */
1:     void printReport(PrintStream out);
1: }
============================================================================