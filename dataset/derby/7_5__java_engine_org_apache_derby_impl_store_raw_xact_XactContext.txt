1:eac0369: /*
1:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.xact.XactContext
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.xact;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: // This is the recommended super-class for all contexts.
1:eac0369: import org.apache.derby.iapi.services.context.ContextImpl;
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.ExceptionSeverity;
1:eac0369: 
2:eac0369: /**
1:7a4afea: The context associated with the transaction.
1:eac0369: 
1:7a4afea: This object stores the context associated with the raw store transaction
1:7a4afea: on the stack.  It stores info about the transaction opened within a 
1:7a4afea: context manager (ie. typically a single user) for a single RawStoreFactory.
1:eac0369: 
1:7a4afea: **/
2:7a4afea: 
1:824ca0b: final class XactContext extends ContextImpl {
1:7a4afea: 
1:eac0369: 	private		RawTransaction	xact;
1:eac0369: 	private     RawStoreFactory factory;
1:eac0369: 	private		boolean   abortAll; // true if any exception causes this transaction to be aborted.
1:eac0369: 
1:824ca0b: 	XactContext(ContextManager cm, String name, Xact xact, boolean abortAll, RawStoreFactory factory) {
1:eac0369: 		super(cm, name);
1:eac0369: 
1:eac0369: 		this.xact = xact;
1:eac0369: 		this.abortAll = abortAll;
1:eac0369: 		this.factory = factory;
1:eac0369: 		xact.xc = this;	// double link between transaction and myself
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Context methods (most are implemented by super-class)
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public void cleanupOnError(Throwable error) throws StandardException {
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:     		SanityManager.ASSERT(getContextManager() != null);
1:eac0369:     	}
1:eac0369: 
1:eac0369: 		boolean throwAway = false;
1:eac0369: 
1:eac0369: 		if (error instanceof StandardException) {
1:eac0369: 			StandardException se = (StandardException) error;
1:eac0369: 
1:eac0369: 			if (abortAll) {
1:eac0369: 				// any error aborts an internal/nested xact and its transaction
1:eac0369: 
1:eac0369: 				if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
1:eac0369:                 {
1:eac0369: 					throw StandardException.newException(
1:eac0369:                         SQLState.XACT_INTERNAL_TRANSACTION_EXCEPTION, error);
1:eac0369:                 }
1:eac0369: 
1:eac0369: 				throwAway = true;
1:eac0369: 
1:eac0369: 
1:eac0369: 			} else {
1:eac0369: 
1:eac0369: 				// If the severity is lower than a transaction error then do nothing.
1:eac0369: 				if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
1:eac0369:                 {
1:eac0369: 					return;
1:eac0369:                 }
1:eac0369:                  
1:eac0369: 
1:eac0369: 				// If the session is going to disappear then we want to close this
1:eac0369: 				// transaction, not just abort it.
1:eac0369: 				if (se.getSeverity() >= ExceptionSeverity.SESSION_SEVERITY)
1:eac0369: 					throwAway = true;
1:eac0369: 			}
1:eac0369: 		} else {
1:eac0369: 			// some java* error, throw away the transaction.
1:eac0369: 			throwAway = true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			if (xact != null) {
1:eac0369: 				// abort the transaction
1:eac0369: 				xact.abort();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 		} catch (StandardException se) {
1:eac0369: 			// if we get an error during abort then shut the system down
1:eac0369: 			throwAway = true;
1:eac0369: 
1:eac0369: 			// if the system was being shut down anyway, do nothing
1:eac0369: 			if ((se.getSeverity() <= ExceptionSeverity.SESSION_SEVERITY) &&
1:eac0369: 				(se.getSeverity() >= ((StandardException) error).getSeverity())) {
1:eac0369: 
1:eac0369: 				throw factory.markCorrupt(
1:eac0369:                     StandardException.newException(
1:eac0369:                         SQLState.XACT_ABORT_EXCEPTION, se));
1:eac0369: 			}
1:eac0369: 
1:eac0369: 		} finally {
1:eac0369: 
1:eac0369: 			if (throwAway) {
1:eac0369: 				// xact close will pop this context out of the context
1:eac0369: 				// stack 
1:eac0369: 				xact.close();
1:eac0369: 				xact = null;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:824ca0b: 	RawTransaction getTransaction() {
1:eac0369: 		return xact;
1:eac0369: 	}
1:eac0369: 
1:824ca0b: 	RawStoreFactory getFactory() {
1:eac0369: 		return factory;
1:eac0369: 	}
1:eac0369: 
1:824ca0b: 	void substituteTransaction(Xact newTran)
1:eac0369: 	{
1:eac0369: 		// disengage old tran from this xact context
1:eac0369: 		Xact oldTran = (Xact)xact;
1:eac0369: 		if (oldTran.xc == this)
1:eac0369: 			oldTran.xc = null;
1:eac0369: 
1:eac0369: 		// set up double link between new transaction and myself
1:eac0369: 		xact = newTran;
1:eac0369: 		((Xact)xact).xc = this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:824ca0b
/////////////////////////////////////////////////////////////////////////
1: final class XactContext extends ContextImpl {
1: 	XactContext(ContextManager cm, String name, Xact xact, boolean abortAll, RawStoreFactory factory) {
/////////////////////////////////////////////////////////////////////////
1: 	RawTransaction getTransaction() {
1: 	RawStoreFactory getFactory() {
1: 	void substituteTransaction(Xact newTran)
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.xact.XactContext
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.xact;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: // This is the recommended super-class for all contexts.
1: import org.apache.derby.iapi.services.context.ContextImpl;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.error.ExceptionSeverity;
1: /**
0: 	Store the transaction opened within a context manager (ie. typically
0: 	a single user) for a single RawStoreFactory.
1: 
1: */
0: public class XactContext extends ContextImpl {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	private		RawTransaction	xact;
1: 	private     RawStoreFactory factory;
1: 	private		boolean   abortAll; // true if any exception causes this transaction to be aborted.
1: 
0: 	public XactContext(ContextManager cm, String name, Xact xact, boolean abortAll, RawStoreFactory factory) {
1: 		super(cm, name);
1: 
1: 		this.xact = xact;
1: 		this.abortAll = abortAll;
1: 		this.factory = factory;
1: 		xact.xc = this;	// double link between transaction and myself
1: 	}
1: 
1: 
1: 	/*
1: 	** Context methods (most are implemented by super-class)
1: 	*/
1: 
1: 
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public void cleanupOnError(Throwable error) throws StandardException {
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:     		SanityManager.ASSERT(getContextManager() != null);
1:     	}
1: 
1: 		boolean throwAway = false;
1: 
1: 		if (error instanceof StandardException) {
1: 			StandardException se = (StandardException) error;
1: 
1: 			if (abortAll) {
1: 				// any error aborts an internal/nested xact and its transaction
1: 
1: 				if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
1:                 {
1: 					throw StandardException.newException(
1:                         SQLState.XACT_INTERNAL_TRANSACTION_EXCEPTION, error);
1:                 }
1: 
1: 				throwAway = true;
1: 
1: 
1: 			} else {
1: 
1: 				// If the severity is lower than a transaction error then do nothing.
1: 				if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
1:                 {
1: 					return;
1:                 }
1:                  
1: 
1: 				// If the session is going to disappear then we want to close this
1: 				// transaction, not just abort it.
1: 				if (se.getSeverity() >= ExceptionSeverity.SESSION_SEVERITY)
1: 					throwAway = true;
1: 			}
1: 		} else {
1: 			// some java* error, throw away the transaction.
1: 			throwAway = true;
1: 		}
1: 
1: 		try {
1: 
1: 			if (xact != null) {
1: 				// abort the transaction
1: 				xact.abort();
1: 			}
1: 
1: 		} catch (StandardException se) {
1: 			// if we get an error during abort then shut the system down
1: 			throwAway = true;
1: 
1: 			// if the system was being shut down anyway, do nothing
1: 			if ((se.getSeverity() <= ExceptionSeverity.SESSION_SEVERITY) &&
1: 				(se.getSeverity() >= ((StandardException) error).getSeverity())) {
1: 
1: 				throw factory.markCorrupt(
1:                     StandardException.newException(
1:                         SQLState.XACT_ABORT_EXCEPTION, se));
1: 			}
1: 
1: 		} finally {
1: 
1: 			if (throwAway) {
1: 				// xact close will pop this context out of the context
1: 				// stack 
1: 				xact.close();
1: 				xact = null;
1: 			}
1: 		}
1: 
1: 	}
1: 
0: 	public RawTransaction getTransaction() {
1: 		return xact;
1: 	}
1: 
0: 	protected RawStoreFactory getFactory() {
1: 		return factory;
1: 	}
1: 
0: 	public void substituteTransaction(Xact newTran)
1: 	{
1: 		// disengage old tran from this xact context
1: 		Xact oldTran = (Xact)xact;
1: 		if (oldTran.xc == this)
1: 			oldTran.xc = null;
1: 
1: 		// set up double link between new transaction and myself
1: 		xact = newTran;
1: 		((Xact)xact).xc = this;
1: 	}
1: 
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:7a4afea
/////////////////////////////////////////////////////////////////////////
0: /**
1: The context associated with the transaction.
1: 
1: This object stores the context associated with the raw store transaction
1: on the stack.  It stores info about the transaction opened within a 
1: context manager (ie. typically a single user) for a single RawStoreFactory.
1: 
1: **/
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.xact;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: // This is the recommended super-class for all contexts.
0: import org.apache.derby.iapi.services.context.ContextImpl;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.raw.RawStoreFactory;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.error.ExceptionSeverity;
0: /**
0: 	Store the transaction opened within a context manager (ie. typically
0: 	a single user) for a single RawStoreFactory.
0: 
0: */
0: public class XactContext extends ContextImpl {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private		RawTransaction	xact;
0: 	private     RawStoreFactory factory;
0: 	private		boolean   abortAll; // true if any exception causes this transaction to be aborted.
0: 
0: 	public XactContext(ContextManager cm, String name, Xact xact, boolean abortAll, RawStoreFactory factory) {
0: 		super(cm, name);
0: 
0: 		this.xact = xact;
0: 		this.abortAll = abortAll;
0: 		this.factory = factory;
0: 		xact.xc = this;	// double link between transaction and myself
0: 	}
0: 
0: 
0: 	/*
0: 	** Context methods (most are implemented by super-class)
0: 	*/
0: 
0: 
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public void cleanupOnError(Throwable error) throws StandardException {
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:     		SanityManager.ASSERT(getContextManager() != null);
0:     	}
0: 
0: 		boolean throwAway = false;
0: 
0: 		if (error instanceof StandardException) {
0: 			StandardException se = (StandardException) error;
0: 
0: 			if (abortAll) {
0: 				// any error aborts an internal/nested xact and its transaction
0: 
0: 				if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
0:                 {
0: 					throw StandardException.newException(
0:                         SQLState.XACT_INTERNAL_TRANSACTION_EXCEPTION, error);
0:                 }
0: 
0: 				throwAway = true;
0: 
0: 
0: 			} else {
0: 
0: 				// If the severity is lower than a transaction error then do nothing.
0: 				if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
0:                 {
0: 					return;
0:                 }
0:                  
0: 
0: 				// If the session is going to disappear then we want to close this
0: 				// transaction, not just abort it.
0: 				if (se.getSeverity() >= ExceptionSeverity.SESSION_SEVERITY)
0: 					throwAway = true;
0: 			}
0: 		} else {
0: 			// some java* error, throw away the transaction.
0: 			throwAway = true;
0: 		}
0: 
0: 		try {
0: 
0: 			if (xact != null) {
0: 				// abort the transaction
0: 				xact.abort();
0: 			}
0: 
0: 		} catch (StandardException se) {
0: 			// if we get an error during abort then shut the system down
0: 			throwAway = true;
0: 
0: 			// if the system was being shut down anyway, do nothing
0: 			if ((se.getSeverity() <= ExceptionSeverity.SESSION_SEVERITY) &&
0: 				(se.getSeverity() >= ((StandardException) error).getSeverity())) {
0: 
0: 				throw factory.markCorrupt(
0:                     StandardException.newException(
0:                         SQLState.XACT_ABORT_EXCEPTION, se));
0: 			}
0: 
0: 		} finally {
0: 
0: 			if (throwAway) {
0: 				// xact close will pop this context out of the context
0: 				// stack 
0: 				xact.close();
0: 				xact = null;
0: 			}
0: 		}
0: 
0: 	}
0: 
0: 	public RawTransaction getTransaction() {
0: 		return xact;
0: 	}
0: 
0: 	protected RawStoreFactory getFactory() {
0: 		return factory;
0: 	}
0: 
0: 	public void substituteTransaction(Xact newTran)
0: 	{
0: 		// disengage old tran from this xact context
0: 		Xact oldTran = (Xact)xact;
0: 		if (oldTran.xc == this)
0: 			oldTran.xc = null;
0: 
0: 		// set up double link between new transaction and myself
0: 		xact = newTran;
0: 		((Xact)xact).xc = this;
0: 	}
0: 
0: }
============================================================================