1:a3ffa1e: /*
3:a3ffa1e: 
1:a3ffa1e:    Derby - Class org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest
1:a3ffa1e: 
1:a3ffa1e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a3ffa1e:    contributor license agreements.  See the NOTICE file distributed with
1:a3ffa1e:    this work for additional information regarding copyright ownership.
1:a3ffa1e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a3ffa1e:    (the "License"); you may not use this file except in compliance with
1:a3ffa1e:    the License.  You may obtain a copy of the License at
1:a3ffa1e: 
1:a3ffa1e:       http://www.apache.org/licenses/LICENSE-2.0
1:a3ffa1e: 
1:a3ffa1e:    Unless required by applicable law or agreed to in writing, software
1:a3ffa1e:    distributed under the License is distributed on an "AS IS" BASIS,
1:a3ffa1e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a3ffa1e:    See the License for the specific language governing permissions and
1:a3ffa1e:    limitations under the License.
1:a3ffa1e: 
1:a3ffa1e:  */
1:a3ffa1e: 
1:a3ffa1e: package org.apache.derbyTesting.functionTests.tests.management;
1:a3ffa1e: 
1:e1c58c7: import java.util.Set;
1:e1c58c7: 
1:a3ffa1e: import javax.management.ObjectName;
1:a3ffa1e: 
1:a3ffa1e: import junit.framework.Test;
1:a3ffa1e: 
1:a3ffa1e: 
1:a3ffa1e: /**
1:bdbc3cb:  * <p>
1:a3ffa1e:  * Test the ManagementMBean interface provided by Derby
1:a3ffa1e:  * which has two implementations. A built in one and
1:a3ffa1e:  * one that can be created by a user.
1:bdbc3cb:  * </p>
1:bdbc3cb:  *
1:bdbc3cb:  * <p>
1:bdbc3cb:  * If you set the debug flag (-Dderby.tests.debug=true), then the test
1:bdbc3cb:  * will print out the number of MBeans which it finds. This should be
1:bdbc3cb:  * EXPECTED_BEAN_COUNT but could be something greater if MBeans
1:bdbc3cb:  * are left hanging around from other tests.
1:bdbc3cb:  * </p>
1:a3ffa1e:  */
1:a3ffa1e: public class ManagementMBeanTest extends MBeanTest {
1:bdbc3cb: 
1:bdbc3cb:     private static final String MANAGEMENT = "Management";
1:bdbc3cb:     private static final String VERSION = "Version";
1:bdbc3cb: 
1:bdbc3cb:     // 1 NetworkServer, 1 JDBC, 2 Version, 2 Management beans
1:bdbc3cb:     private static final int EXPECTED_BEAN_COUNT = 6;
1:bdbc3cb:     
1:bdbc3cb:     // MBean names
1:bdbc3cb:     private static final String[] MBEAN_TYPES =
1:bdbc3cb:     {
1:bdbc3cb:         "NetworkServer",
1:bdbc3cb:         MANAGEMENT,
1:bdbc3cb:         "JDBC",
1:bdbc3cb:         VERSION,
1:bdbc3cb:     };
1:a3ffa1e:     
1:a3ffa1e:     public ManagementMBeanTest(String name) {
1:a3ffa1e:         super(name);
2:a3ffa1e:     }
1:a3ffa1e:     
1:a3ffa1e:     public static Test suite() {
1:a3ffa1e:         
1:a3ffa1e:         return MBeanTest.suite(ManagementMBeanTest.class, 
1:ffd9cf9:                                         "ManagementMBeanTest");
1:a3ffa1e:     }
1:a3ffa1e:     
1:e1c58c7:     /**
1:e1c58c7:      * Test that the MBean created by the application can
1:e1c58c7:      * successfully start and stop Derby's JMX management.
1:e1c58c7:      */
1:a3ffa1e:     public void testStartStopManagementFromApplication()
1:a3ffa1e:         throws Exception
2:a3ffa1e:     {
1:a3ffa1e:         ObjectName appMgmtBean = getApplicationManagementMBean();
1:a3ffa1e:         startStopManagement(appMgmtBean);
1:a3ffa1e:     }
1:a3ffa1e:     
1:e1c58c7:     /**
1:e1c58c7:      * Test that the MBean with the passed in name can
1:e1c58c7:      * successfully start and stop Derby's JMX management.
1:e1c58c7:      */
1:a3ffa1e:     private void startStopManagement(ObjectName mbean) throws Exception
1:e1c58c7:     {
1:a3ffa1e:         // Test fixtures start off active
1:a3ffa1e:         assertBooleanAttribute(true, mbean, "ManagementActive");
1:bdbc3cb: 
1:bdbc3cb:         // may include MBeans left over from other engines which ran
1:bdbc3cb:         // in earlier tests
1:bdbc3cb:         StatsTuple originalStats = getCurrentStats( "Original" );
1:bdbc3cb: 
1:bdbc3cb:         assertTrue("DerbyMBeanCount:" + originalStats.getBeanCount(), originalStats.getBeanCount() >= EXPECTED_BEAN_COUNT );
1:e1c58c7:         
1:a3ffa1e:         // Should be a no-op
1:a3ffa1e:         invokeOperation(mbean, "startManagement");
1:a3ffa1e:         assertBooleanAttribute(true, mbean, "ManagementActive");
1:a3ffa1e:         
1:e1c58c7:         // so should have the same number of MBeans registered
1:bdbc3cb:         StatsTuple nopStats = getCurrentStats( "NOP" );
1:bdbc3cb: 
1:bdbc3cb:         compareStats( originalStats, nopStats );
1:e1c58c7:         
1:a3ffa1e:         // now stop management
1:a3ffa1e:         invokeOperation(mbean, "stopManagement");
1:a3ffa1e:         assertBooleanAttribute(false, mbean, "ManagementActive");
1:e1c58c7:         
1:bdbc3cb:         // the stop should have brought down 1 JDBC bean, 1 NetworkServer bean
1:bdbc3cb:         // and 2 Version beans. it should have left 2 Management beans standing.
1:bdbc3cb:         StatsTuple afterStopping = getCurrentStats( "After Stopping" );
1:a3ffa1e:         
1:bdbc3cb:         int[] expectedCounts = new int[ MBEAN_TYPES.length ];
1:bdbc3cb:         for ( int i = 0; i < MBEAN_TYPES.length; i++ )
1:bdbc3cb:         {
1:bdbc3cb:             int expectedDifference = 1;
1:bdbc3cb: 
1:bdbc3cb:             if ( MANAGEMENT.equals( MBEAN_TYPES[ i ] ) ) { expectedDifference = 0; }
1:bdbc3cb:             else if ( VERSION.equals( MBEAN_TYPES[ i ] ) ) { expectedDifference = 2; }
1:bdbc3cb: 
1:bdbc3cb:             expectedCounts[ i ] = originalStats.typeCounts[ i ] - expectedDifference;
1:bdbc3cb:         }
1:bdbc3cb:         StatsTuple expectedStats = new StatsTuple( null, expectedCounts );
1:bdbc3cb: 
1:bdbc3cb:         compareStats( expectedStats, afterStopping );
1:bdbc3cb:         
1:bdbc3cb:         // now start management again and have the original MBeans.
1:a3ffa1e:         invokeOperation(mbean, "startManagement");
1:a3ffa1e:         assertBooleanAttribute(true, mbean, "ManagementActive");
1:bdbc3cb:         
1:bdbc3cb:         StatsTuple afterRestarting = getCurrentStats( "After Restarting" );
1:bdbc3cb: 
1:bdbc3cb:         compareStats( originalStats, afterRestarting );
1:e1c58c7:     }
1:bdbc3cb: 
1:bdbc3cb:     /**
1:bdbc3cb:      * Get information on the current MBeans.
1:bdbc3cb:      */
1:bdbc3cb:     private StatsTuple getCurrentStats( String tag ) throws Exception
1:bdbc3cb:     {
1:bdbc3cb:         Set<ObjectName> beanNames = getDerbyDomainMBeans();
1:bdbc3cb:         StatsTuple retval = new StatsTuple( beanNames, countMBeanTypes( beanNames ) );
1:bdbc3cb: 
1:bdbc3cb:         println( tag + " bean count = " + retval.getBeanCount() );
1:bdbc3cb: 
1:bdbc3cb:         return retval;
1:bdbc3cb:     }
1:bdbc3cb: 
1:bdbc3cb: 
1:bdbc3cb:     /**
1:bdbc3cb:      * Verify that the mbean information is what we expect.
1:bdbc3cb:      */
1:bdbc3cb:     private void compareStats( StatsTuple expected, StatsTuple actual ) throws Exception
1:bdbc3cb:     {
1:bdbc3cb:         assertEquals( expected.getBeanCount(), actual.getBeanCount() );
1:bdbc3cb: 
1:bdbc3cb:         for ( int i = 0; i < MBEAN_TYPES.length; i++ )
1:bdbc3cb:         {
1:bdbc3cb:             assertEquals( MBEAN_TYPES[ i ], expected.typeCounts[ i ], actual.typeCounts[ i ] );
1:bdbc3cb:         }
1:bdbc3cb:     }
1:bdbc3cb: 
1:bdbc3cb:     /**
1:bdbc3cb:      * Count the number of MBeans per type.
1:bdbc3cb:      */
1:bdbc3cb:     private int[] countMBeanTypes( Set<ObjectName> names ) throws Exception
1:bdbc3cb:     {
1:bdbc3cb:         int[] retval = new int[ MBEAN_TYPES.length ];
1:bdbc3cb: 
1:bdbc3cb:         for (ObjectName name : names)
1:bdbc3cb:         {
1:bdbc3cb:             String beanType = name.getKeyProperty("type");
1:bdbc3cb: 
1:bdbc3cb:             for ( int i = 0; i < MBEAN_TYPES.length; i++ )
1:bdbc3cb:             {
1:bdbc3cb:                 if ( MBEAN_TYPES[ i ].equals( beanType ) ) { retval[ i ]++; }
1:bdbc3cb:             }
1:bdbc3cb:         }
1:bdbc3cb: 
1:bdbc3cb:         return retval;
1:bdbc3cb:     }
1:bdbc3cb: 
1:bdbc3cb:     private static final class StatsTuple
1:bdbc3cb:     {
1:bdbc3cb:         Set<ObjectName> beanNames;
1:bdbc3cb:         int[]  typeCounts;
1:bdbc3cb: 
1:bdbc3cb:         public StatsTuple( Set<ObjectName> beanNames, int[] typeCounts )
1:bdbc3cb:         {
1:bdbc3cb:             this.beanNames = beanNames;
1:bdbc3cb:             this.typeCounts = typeCounts;
1:bdbc3cb:         }
1:bdbc3cb: 
1:bdbc3cb:         public int getBeanCount()
1:bdbc3cb:         {
1:bdbc3cb:             int total = 0;
1:bdbc3cb: 
1:bdbc3cb:             for ( int i = 0; i < typeCounts.length; i++ ) { total += typeCounts[ i ]; }
1:bdbc3cb: 
1:bdbc3cb:             return total;
1:bdbc3cb:         }
1:bdbc3cb:     }
1:bdbc3cb: 
1:a3ffa1e: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:bdbc3cb
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * </p>
1:  *
1:  * <p>
1:  * If you set the debug flag (-Dderby.tests.debug=true), then the test
1:  * will print out the number of MBeans which it finds. This should be
1:  * EXPECTED_BEAN_COUNT but could be something greater if MBeans
1:  * are left hanging around from other tests.
1:  * </p>
1: 
1:     private static final String MANAGEMENT = "Management";
1:     private static final String VERSION = "Version";
1: 
1:     // 1 NetworkServer, 1 JDBC, 2 Version, 2 Management beans
1:     private static final int EXPECTED_BEAN_COUNT = 6;
1:     
1:     // MBean names
1:     private static final String[] MBEAN_TYPES =
1:     {
1:         "NetworkServer",
1:         MANAGEMENT,
1:         "JDBC",
1:         VERSION,
1:     };
/////////////////////////////////////////////////////////////////////////
1: 
1:         // may include MBeans left over from other engines which ran
1:         // in earlier tests
1:         StatsTuple originalStats = getCurrentStats( "Original" );
1: 
1:         assertTrue("DerbyMBeanCount:" + originalStats.getBeanCount(), originalStats.getBeanCount() >= EXPECTED_BEAN_COUNT );
1:         StatsTuple nopStats = getCurrentStats( "NOP" );
1: 
1:         compareStats( originalStats, nopStats );
1:         // the stop should have brought down 1 JDBC bean, 1 NetworkServer bean
1:         // and 2 Version beans. it should have left 2 Management beans standing.
1:         StatsTuple afterStopping = getCurrentStats( "After Stopping" );
1:         int[] expectedCounts = new int[ MBEAN_TYPES.length ];
1:         for ( int i = 0; i < MBEAN_TYPES.length; i++ )
1:         {
1:             int expectedDifference = 1;
1: 
1:             if ( MANAGEMENT.equals( MBEAN_TYPES[ i ] ) ) { expectedDifference = 0; }
1:             else if ( VERSION.equals( MBEAN_TYPES[ i ] ) ) { expectedDifference = 2; }
1: 
1:             expectedCounts[ i ] = originalStats.typeCounts[ i ] - expectedDifference;
1:         }
1:         StatsTuple expectedStats = new StatsTuple( null, expectedCounts );
1: 
1:         compareStats( expectedStats, afterStopping );
1:         
1:         // now start management again and have the original MBeans.
1:         
1:         StatsTuple afterRestarting = getCurrentStats( "After Restarting" );
1: 
1:         compareStats( originalStats, afterRestarting );
1: 
1:     /**
1:      * Get information on the current MBeans.
1:      */
1:     private StatsTuple getCurrentStats( String tag ) throws Exception
1:     {
1:         Set<ObjectName> beanNames = getDerbyDomainMBeans();
1:         StatsTuple retval = new StatsTuple( beanNames, countMBeanTypes( beanNames ) );
1: 
1:         println( tag + " bean count = " + retval.getBeanCount() );
1: 
1:         return retval;
1:     }
1: 
1: 
1:     /**
1:      * Verify that the mbean information is what we expect.
1:      */
1:     private void compareStats( StatsTuple expected, StatsTuple actual ) throws Exception
1:     {
1:         assertEquals( expected.getBeanCount(), actual.getBeanCount() );
1: 
1:         for ( int i = 0; i < MBEAN_TYPES.length; i++ )
1:         {
1:             assertEquals( MBEAN_TYPES[ i ], expected.typeCounts[ i ], actual.typeCounts[ i ] );
1:         }
1:     }
1: 
1:     /**
1:      * Count the number of MBeans per type.
1:      */
1:     private int[] countMBeanTypes( Set<ObjectName> names ) throws Exception
1:     {
1:         int[] retval = new int[ MBEAN_TYPES.length ];
1: 
1:         for (ObjectName name : names)
1:         {
1:             String beanType = name.getKeyProperty("type");
1: 
1:             for ( int i = 0; i < MBEAN_TYPES.length; i++ )
1:             {
1:                 if ( MBEAN_TYPES[ i ].equals( beanType ) ) { retval[ i ]++; }
1:             }
1:         }
1: 
1:         return retval;
1:     }
1: 
1:     private static final class StatsTuple
1:     {
1:         Set<ObjectName> beanNames;
1:         int[]  typeCounts;
1: 
1:         public StatsTuple( Set<ObjectName> beanNames, int[] typeCounts )
1:         {
1:             this.beanNames = beanNames;
1:             this.typeCounts = typeCounts;
1:         }
1: 
1:         public int getBeanCount()
1:         {
1:             int total = 0;
1: 
1:             for ( int i = 0; i < typeCounts.length; i++ ) { total += typeCounts[ i ]; }
1: 
1:             return total;
1:         }
1:     }
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3522c2e
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("DerbyMBeanCount:" + derbyMbeanCount, derbyMbeanCount >= 2);
commit:9f69067
/////////////////////////////////////////////////////////////////////////
0:         // leaving only management MBeans, the one registered
0:         // by this test and the one registered by Derby
0:         // (which has the system key property).
0:         assertEquals(2, managementOnly.size());
commit:ffd9cf9
/////////////////////////////////////////////////////////////////////////
1:                                         "ManagementMBeanTest");
commit:e1c58c7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test that the MBean created by the application can
1:      * successfully start and stop Derby's JMX management.
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test that the MBean with the passed in name can
1:      * successfully start and stop Derby's JMX management.
1:      */
0:         int derbyMbeanCount = getDerbyDomainMBeans().size();
0:         assertTrue(derbyMbeanCount > 0);
1:         
1:         // so should have the same number of MBeans registered
0:         assertEquals(derbyMbeanCount, getDerbyDomainMBeans().size());
1:         
0:         // leaving only management MBeans.
0:         Set<ObjectName> managementOnly = getDerbyDomainMBeans();
0:         assertEquals(1, managementOnly.size());
0:         for (ObjectName name : managementOnly)
1:         {
0:             assertEquals("Management", name.getKeyProperty("type"));
1:         }
1:         
0:         // now start management again and have the same MBeans.
0:         assertEquals(derbyMbeanCount, getDerbyDomainMBeans().size());
commit:a3ffa1e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.management;
1: 
1: import javax.management.ObjectName;
1: 
1: import junit.framework.Test;
1: 
1: 
1: /**
1:  * Test the ManagementMBean interface provided by Derby
1:  * which has two implementations. A built in one and
1:  * one that can be created by a user.
1:  */
1: public class ManagementMBeanTest extends MBeanTest {
1:     
1:     public ManagementMBeanTest(String name) {
1:         super(name);
1:     }
1:     
1:     public static Test suite() {
1:         
1:         return MBeanTest.suite(ManagementMBeanTest.class, 
0:                                         "ManagementMBeanTest:client");
1:     }
1:     
1:     public void testStartStopManagementFromApplication()
1:         throws Exception
1:     {
1:         ObjectName appMgmtBean = getApplicationManagementMBean();
1:         startStopManagement(appMgmtBean);
1:     }
1:     
1:     private void startStopManagement(ObjectName mbean) throws Exception
1:     {
1:         // Test fixtures start off active
1:         assertBooleanAttribute(true, mbean, "ManagementActive");
1:         
1:         // Should be a no-op
1:         invokeOperation(mbean, "startManagement");
1:         assertBooleanAttribute(true, mbean, "ManagementActive");
1:         
1:         // now stop management
1:         invokeOperation(mbean, "stopManagement");
1:         assertBooleanAttribute(false, mbean, "ManagementActive");
1:         
0:         // now start management again
1:         invokeOperation(mbean, "startManagement");
1:         assertBooleanAttribute(true, mbean, "ManagementActive");
1: 
1:     }
1: }
============================================================================