1:eac0369: /*
8:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.AndNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:3bb140c: class AndNode extends BinaryLogicalOperatorNode
2:eac0369: {
1:3bb140c:     /**
1:3bb140c:      * @param leftOperand The left operand of the AND
1:3bb140c:      * @param rightOperand The right operand of the AND
1:3bb140c:      * @param cm context manager
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     AndNode(
1:3bb140c:             ValueNode leftOperand,
1:3bb140c:             ValueNode rightOperand,
1:3bb140c:             ContextManager cm) throws StandardException {
1:3bb140c:         super(leftOperand, rightOperand, "and", cm);
1:3bb140c:         this.shortCircuitValue = false;
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /**
1:af1c18c:      * @param leftOperand The left operand of the AND
1:af1c18c:      * @param rightOperand The right operand of the AND
1:af1c18c:      * @param methodName The methods name
1:af1c18c:      * @param cm context manager
1:af1c18c:      * @throws StandardException
1:af1c18c:      */
1:af1c18c:     AndNode(ValueNode leftOperand,
1:af1c18c:             ValueNode rightOperand,
1:af1c18c:             String  methodName,
1:af1c18c:             ContextManager cm) throws StandardException {
1:af1c18c:         super(leftOperand, rightOperand, methodName, cm);
1:af1c18c:         this.shortCircuitValue = false;
1:af1c18c:     }
1:af1c18c: 
1:af1c18c:     /**
1:eac0369: 	 * Bind this logical operator.  All that has to be done for binding
1:eac0369: 	 * a logical operator is to bind the operands, check that both operands
1:eac0369: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
3:eac0369: 	 *
1:eac0369: 	 * @param fromList			The query's FROM list
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:09c2697:         super.bindExpression(fromList, subqueryList, aggregates);
1:eac0369: 
1:eac0369: 		postBindFixup();
1:eac0369: 		return this;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	
4:eac0369: 	/**
1:eac0369: 	 * Preprocess an expression tree.  We do a number of transformations
1:eac0369: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1:eac0369: 	 * subquery flattening.
1:eac0369: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1:eac0369: 	 *
1:eac0369: 	 * @param	numTables			Number of tables in the DML Statement
1:eac0369: 	 * @param	outerFromList		FromList from outer query block
1:eac0369: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1:eac0369: 	 * @param	outerPredicateList	PredicateList from outer query block
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode preprocess(int numTables,
1:eac0369: 								FromList outerFromList,
1:eac0369: 								SubqueryList outerSubqueryList,
1:eac0369: 								PredicateList outerPredicateList) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		/* If the left child is an OR, then mark it as the 1st OR in
1:eac0369: 		 * the list.  That will allow us to consider converting the OR
1:eac0369: 		 * to an IN list when we preprocess the 1st OR in the list.
1:eac0369: 		 */
1:eac0369: 		if (leftOperand instanceof OrNode)
1:eac0369: 		{
1:eac0369: 			((OrNode) leftOperand).setFirstOr();
1:eac0369: 		}
1:eac0369: 		leftOperand = leftOperand.preprocess(numTables,
1:eac0369: 											 outerFromList, outerSubqueryList,
1:eac0369: 											 outerPredicateList);
1:eac0369: 		/* We need to rerun the changeToCNF() phase if our left operand
1:eac0369: 		 * is an AndNode.  This can happen due to a predicate transformation,
1:eac0369: 		 * such as the ones for LIKE and BETWEEN, underneath us.
1:eac0369: 		 */
1:eac0369: 		if (leftOperand instanceof AndNode)
1:eac0369: 		{
1:eac0369: 			changeToCNF(false);
1:eac0369: 		}
1:eac0369: 		rightOperand = rightOperand.preprocess(numTables,
1:eac0369: 											   outerFromList, outerSubqueryList,
1:eac0369: 											   outerPredicateList);
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1:eac0369: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1:eac0369: 	 * ComparisonOperators and boolean expressions.  We invert 
1:eac0369: 	 * ComparisonOperators and replace boolean expressions with 
1:eac0369: 	 * boolean expression = false.
1:eac0369: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
1:eac0369: 	 * still could be NotNodes left in the tree.
1:eac0369: 	 *
1:eac0369: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1:eac0369: 	 *							
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	ValueNode eliminateNots(boolean underNotNode) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		leftOperand = leftOperand.eliminateNots(underNotNode);
1:eac0369: 		rightOperand = rightOperand.eliminateNots(underNotNode);
1:eac0369: 		if (! underNotNode)
1:eac0369: 		{
1:eac0369: 			return this;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Convert the AndNode to an OrNode */
1:eac0369: 		ValueNode	orNode;
1:eac0369: 
1:3bb140c:         orNode = new OrNode(leftOperand, rightOperand, getContextManager());
1:ef158f2: 		orNode.setType(getTypeServices());
1:eac0369: 		return orNode;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Do the 1st step in putting an expression into conjunctive normal
1:eac0369: 	 * form.  This step ensures that the top level of the expression is
1:eac0369: 	 * a chain of AndNodes terminated by a true BooleanConstantNode.
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode putAndsOnTop()
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		SanityManager.ASSERT(rightOperand != null,
1:eac0369: 			"rightOperand is expected to be non-null");
1:eac0369: 		rightOperand = rightOperand.putAndsOnTop();
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Verify that putAndsOnTop() did its job correctly.  Verify that the top level 
1:eac0369: 	 * of the expression is a chain of AndNodes terminated by a true BooleanConstantNode.
1:eac0369: 	 *
1:eac0369: 	 * @return		Boolean which reflects validity of the tree.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     boolean verifyPutAndsOnTop()
1:eac0369: 	{
1:eac0369: 		boolean isValid = true;
1:eac0369: 
1:eac0369: 		if (SanityManager.ASSERT)
1:eac0369: 		{
1:eac0369: 			isValid = ((rightOperand instanceof AndNode) ||
1:eac0369: 					   (rightOperand.isBooleanTrue()));
1:eac0369: 
1:eac0369: 			if (rightOperand instanceof AndNode)
1:eac0369: 			{
1:eac0369: 				isValid = rightOperand.verifyPutAndsOnTop();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return isValid;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Finish putting an expression into conjunctive normal
1:eac0369: 	 * form.  An expression tree in conjunctive normal form meets
1:eac0369: 	 * the following criteria:
1:eac0369: 	 *		o  If the expression tree is not null,
1:eac0369: 	 *		   the top level will be a chain of AndNodes terminating
1:eac0369: 	 *		   in a true BooleanConstantNode.
1:eac0369: 	 *		o  The left child of an AndNode will never be an AndNode.
1:eac0369: 	 *		o  Any right-linked chain that includes an AndNode will
1:eac0369: 	 *		   be entirely composed of AndNodes terminated by a true BooleanConstantNode.
1:eac0369: 	 *		o  The left child of an OrNode will never be an OrNode.
1:eac0369: 	 *		o  Any right-linked chain that includes an OrNode will
1:eac0369: 	 *		   be entirely composed of OrNodes terminated by a false BooleanConstantNode.
1:eac0369: 	 *		o  ValueNodes other than AndNodes and OrNodes are considered
1:eac0369: 	 *		   leaf nodes for purposes of expression normalization.
1:eac0369: 	 *		   In other words, we won't do any normalization under
1:eac0369: 	 *		   those nodes.
1:eac0369: 	 *
1:eac0369: 	 * In addition, we track whether or not we are under a top level AndNode.  
1:eac0369: 	 * SubqueryNodes need to know this for subquery flattening.
1:eac0369: 	 *
1:eac0369: 	 * @param	underTopAndNode		Whether or not we are under a top level AndNode.
1:eac0369: 	 *							
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode changeToCNF(boolean underTopAndNode)
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		AndNode curAnd = this;
1:eac0369: 
1:eac0369: 		/* Top chain will be a chain of Ands terminated by a non-AndNode.
1:eac0369: 		 * (putAndsOnTop() has taken care of this. If the last node in
1:eac0369: 		 * the chain is not a true BooleanConstantNode then we need to do the
1:eac0369: 		 * transformation to make it so.
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		/* Add the true BooleanConstantNode if not there yet */
1:eac0369: 		if (!(rightOperand instanceof AndNode) &&
1:eac0369: 			!(rightOperand.isBooleanTrue()))
1:eac0369: 		{
1:3bb140c:            BooleanConstantNode trueNode =
1:3bb140c:                     new BooleanConstantNode(true, getContextManager());
1:3bb140c:             AndNode newRightOperand = new AndNode(
1:3bb140c:                     curAnd.getRightOperand(), trueNode, getContextManager());
1:3bb140c:            curAnd.setRightOperand(newRightOperand);
1:3bb140c:            newRightOperand.postBindFixup();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* If leftOperand is an AndNode, then we modify the tree from:
1:eac0369: 		 *
1:eac0369: 		 *				this
1:eac0369: 		 *			   /	\
1:eac0369: 		 *			And2	Nodex
1:eac0369: 		 *		   /	\		...
1:eac0369: 		 *		left2	right2
1:eac0369: 		 *
1:eac0369: 		 *	to:
1:eac0369: 		 *
1:eac0369: 		 *						this
1:eac0369: 		 *					   /	\
1:eac0369: 		 *	left2.changeToCNF()		 And2
1:eac0369: 		 *							/	\
1:eac0369: 		 *		right2.changeToCNF()	  Nodex.changeToCNF()
1:eac0369: 		 *
1:eac0369: 		 *	NOTE: We could easily switch places between left2.changeToCNF() and 
1:eac0369: 		 *  right2.changeToCNF().
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		/* Pull up the AndNode chain to our left */
1:eac0369: 		while (leftOperand instanceof AndNode)
1:eac0369: 		{
1:eac0369: 			ValueNode newLeft;
1:eac0369: 			AndNode	  oldLeft;
1:eac0369: 			AndNode	  newRight;
1:eac0369: 			ValueNode oldRight;
1:eac0369: 
1:eac0369: 			/* For "clarity", we first get the new and old operands */
1:eac0369: 			newLeft = ((AndNode) leftOperand).getLeftOperand();
1:eac0369: 			oldLeft = (AndNode) leftOperand;
1:eac0369: 			newRight = (AndNode) leftOperand;
1:eac0369: 			oldRight = rightOperand;
1:eac0369: 
1:eac0369: 			/* We then twiddle the tree to match the above diagram */
1:eac0369: 			leftOperand = newLeft;
1:eac0369: 			rightOperand = newRight;
1:eac0369: 			newRight.setLeftOperand(oldLeft.getRightOperand());
1:eac0369: 			newRight.setRightOperand(oldRight);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Finally, we continue to normalize the left and right subtrees. */
1:eac0369: 		leftOperand = leftOperand.changeToCNF(underTopAndNode);
1:eac0369: 		rightOperand = rightOperand.changeToCNF(underTopAndNode);
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Verify that changeToCNF() did its job correctly.  Verify that:
1:eac0369: 	 *		o  AndNode  - rightOperand is not instanceof OrNode
1:eac0369: 	 *				      leftOperand is not instanceof AndNode
1:eac0369: 	 *		o  OrNode	- rightOperand is not instanceof AndNode
1:eac0369: 	 *					  leftOperand is not instanceof OrNode
1:eac0369: 	 *
1:eac0369: 	 * @return		Boolean which reflects validity of the tree.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     boolean verifyChangeToCNF()
1:eac0369: 	{
1:eac0369: 		boolean isValid = true;
1:eac0369: 
1:eac0369: 		if (SanityManager.ASSERT)
1:eac0369: 		{
1:eac0369: 			isValid = ((rightOperand instanceof AndNode) ||
1:eac0369: 					   (rightOperand.isBooleanTrue()));
1:eac0369: 			if (rightOperand instanceof AndNode)
1:eac0369: 			{
1:eac0369: 				isValid = rightOperand.verifyChangeToCNF();
1:eac0369: 			}
1:eac0369: 			if (leftOperand instanceof AndNode)
1:eac0369: 			{
1:eac0369: 				isValid = false;
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				isValid = isValid && leftOperand.verifyChangeToCNF();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return isValid;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Do bind() by hand for an AndNode that was generated after bind(),
1:eac0369: 	 * eg by putAndsOnTop(). (Set the data type and nullability info.)
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	void postBindFixup()
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		setType(resolveLogicalBinaryOperator(
1:eac0369: 							leftOperand.getTypeServices(),
1:eac0369: 							rightOperand.getTypeServices()
1:eac0369: 											)
1:eac0369: 				);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1:      * @param leftOperand The left operand of the AND
1:      * @param rightOperand The right operand of the AND
1:      * @param methodName The methods name
1:      * @param cm context manager
1:      * @throws StandardException
1:      */
1:     AndNode(ValueNode leftOperand,
1:             ValueNode rightOperand,
1:             String  methodName,
1:             ContextManager cm) throws StandardException {
1:         super(leftOperand, rightOperand, methodName, cm);
1:         this.shortCircuitValue = false;
1:     }
1: 
1:     /**
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: class AndNode extends BinaryLogicalOperatorNode
1:     /**
1:      * @param leftOperand The left operand of the AND
1:      * @param rightOperand The right operand of the AND
1:      * @param cm context manager
1:      * @throws StandardException
1:      */
1:     AndNode(
1:             ValueNode leftOperand,
1:             ValueNode rightOperand,
1:             ContextManager cm) throws StandardException {
1:         super(leftOperand, rightOperand, "and", cm);
0:         setNodeType(C_NodeTypes.AND_NODE);
1:         this.shortCircuitValue = false;
1:     }
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode preprocess(int numTables,
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         orNode = new OrNode(leftOperand, rightOperand, getContextManager());
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode putAndsOnTop()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     boolean verifyPutAndsOnTop()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode changeToCNF(boolean underTopAndNode)
/////////////////////////////////////////////////////////////////////////
1:            BooleanConstantNode trueNode =
1:                     new BooleanConstantNode(true, getContextManager());
1:             AndNode newRightOperand = new AndNode(
1:                     curAnd.getRightOperand(), trueNode, getContextManager());
1:            curAnd.setRightOperand(newRightOperand);
1:            newRightOperand.postBindFixup();
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     boolean verifyChangeToCNF()
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         super.bindExpression(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:         FromList fromList, SubqueryList subqueryList, List aggregateVector)
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:003b975
/////////////////////////////////////////////////////////////////////////
0: 	 * @param leftOperand	The left operand of the AND
commit:e1e0b16
/////////////////////////////////////////////////////////////////////////
0: 	 * @param leftOperand_ERROR_THAT_WILL_BE_REVERTED	The left operand of the AND
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ef158f2
/////////////////////////////////////////////////////////////////////////
1: 		orNode.setType(getTypeServices());
commit:4549ad4
/////////////////////////////////////////////////////////////////////////
0: 		super.init(leftOperand, rightOperand, "and");
0: 		this.shortCircuitValue = false;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.AndNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.compile.NodeFactory;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import java.util.Vector;
1: 
0: public class AndNode extends BinaryLogicalOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
0: 	 * Initializer for an AndNode
1: 	 *
0: 	 * @param leftOperand	The left operand of the AND
0: 	 * @param rightOperand	The right operand of the AND
1: 	 */
1: 
0: 	public void init(Object leftOperand, Object rightOperand)
1: 	{
0: 		super.init(leftOperand, rightOperand, Boolean.FALSE, "and");
1: 	}
1: 
1: 	/**
1: 	 * Bind this logical operator.  All that has to be done for binding
1: 	 * a logical operator is to bind the operands, check that both operands
1: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector)
1: 			throws StandardException
1: 	{
0: 		super.bindExpression(fromList, subqueryList, aggregateVector);
1: 
1: 		postBindFixup();
1: 		return this;
1: 	}
1: 
1: 	
1: 	/**
1: 	 * Preprocess an expression tree.  We do a number of transformations
1: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1: 	 * subquery flattening.
1: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1: 	 *
1: 	 * @param	numTables			Number of tables in the DML Statement
1: 	 * @param	outerFromList		FromList from outer query block
1: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1: 	 * @param	outerPredicateList	PredicateList from outer query block
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public ValueNode preprocess(int numTables,
1: 								FromList outerFromList,
1: 								SubqueryList outerSubqueryList,
1: 								PredicateList outerPredicateList) 
1: 					throws StandardException
1: 	{
1: 		/* If the left child is an OR, then mark it as the 1st OR in
1: 		 * the list.  That will allow us to consider converting the OR
1: 		 * to an IN list when we preprocess the 1st OR in the list.
1: 		 */
1: 		if (leftOperand instanceof OrNode)
1: 		{
1: 			((OrNode) leftOperand).setFirstOr();
1: 		}
1: 		leftOperand = leftOperand.preprocess(numTables,
1: 											 outerFromList, outerSubqueryList,
1: 											 outerPredicateList);
1: 		/* We need to rerun the changeToCNF() phase if our left operand
1: 		 * is an AndNode.  This can happen due to a predicate transformation,
1: 		 * such as the ones for LIKE and BETWEEN, underneath us.
1: 		 */
1: 		if (leftOperand instanceof AndNode)
1: 		{
1: 			changeToCNF(false);
1: 		}
1: 		rightOperand = rightOperand.preprocess(numTables,
1: 											   outerFromList, outerSubqueryList,
1: 											   outerPredicateList);
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1: 	 * ComparisonOperators and boolean expressions.  We invert 
1: 	 * ComparisonOperators and replace boolean expressions with 
1: 	 * boolean expression = false.
1: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
1: 	 * still could be NotNodes left in the tree.
1: 	 *
1: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1: 	 *							
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	ValueNode eliminateNots(boolean underNotNode) 
1: 					throws StandardException
1: 	{
1: 		leftOperand = leftOperand.eliminateNots(underNotNode);
1: 		rightOperand = rightOperand.eliminateNots(underNotNode);
1: 		if (! underNotNode)
1: 		{
1: 			return this;
1: 		}
1: 
1: 		/* Convert the AndNode to an OrNode */
1: 		ValueNode	orNode;
1: 
0: 		orNode = (ValueNode) getNodeFactory().getNode(
0: 												C_NodeTypes.OR_NODE,
0: 												leftOperand,
0: 												rightOperand,
0: 												getContextManager());
0: 		orNode.setType(dataTypeServices);
1: 		return orNode;
1: 	}
1: 
1: 	/**
1: 	 * Do the 1st step in putting an expression into conjunctive normal
1: 	 * form.  This step ensures that the top level of the expression is
1: 	 * a chain of AndNodes terminated by a true BooleanConstantNode.
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public ValueNode putAndsOnTop() 
1: 					throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		SanityManager.ASSERT(rightOperand != null,
1: 			"rightOperand is expected to be non-null");
1: 		rightOperand = rightOperand.putAndsOnTop();
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Verify that putAndsOnTop() did its job correctly.  Verify that the top level 
1: 	 * of the expression is a chain of AndNodes terminated by a true BooleanConstantNode.
1: 	 *
1: 	 * @return		Boolean which reflects validity of the tree.
1: 	 */
0: 	public boolean verifyPutAndsOnTop()
1: 	{
1: 		boolean isValid = true;
1: 
1: 		if (SanityManager.ASSERT)
1: 		{
1: 			isValid = ((rightOperand instanceof AndNode) ||
1: 					   (rightOperand.isBooleanTrue()));
1: 
1: 			if (rightOperand instanceof AndNode)
1: 			{
1: 				isValid = rightOperand.verifyPutAndsOnTop();
1: 			}
1: 		}
1: 
1: 		return isValid;
1: 	}
1: 
1: 	/**
1: 	 * Finish putting an expression into conjunctive normal
1: 	 * form.  An expression tree in conjunctive normal form meets
1: 	 * the following criteria:
1: 	 *		o  If the expression tree is not null,
1: 	 *		   the top level will be a chain of AndNodes terminating
1: 	 *		   in a true BooleanConstantNode.
1: 	 *		o  The left child of an AndNode will never be an AndNode.
1: 	 *		o  Any right-linked chain that includes an AndNode will
1: 	 *		   be entirely composed of AndNodes terminated by a true BooleanConstantNode.
1: 	 *		o  The left child of an OrNode will never be an OrNode.
1: 	 *		o  Any right-linked chain that includes an OrNode will
1: 	 *		   be entirely composed of OrNodes terminated by a false BooleanConstantNode.
1: 	 *		o  ValueNodes other than AndNodes and OrNodes are considered
1: 	 *		   leaf nodes for purposes of expression normalization.
1: 	 *		   In other words, we won't do any normalization under
1: 	 *		   those nodes.
1: 	 *
1: 	 * In addition, we track whether or not we are under a top level AndNode.  
1: 	 * SubqueryNodes need to know this for subquery flattening.
1: 	 *
1: 	 * @param	underTopAndNode		Whether or not we are under a top level AndNode.
1: 	 *							
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public ValueNode changeToCNF(boolean underTopAndNode) 
1: 					throws StandardException
1: 	{
1: 		AndNode curAnd = this;
1: 
1: 		/* Top chain will be a chain of Ands terminated by a non-AndNode.
1: 		 * (putAndsOnTop() has taken care of this. If the last node in
1: 		 * the chain is not a true BooleanConstantNode then we need to do the
1: 		 * transformation to make it so.
1: 		 */
1: 
1: 		/* Add the true BooleanConstantNode if not there yet */
1: 		if (!(rightOperand instanceof AndNode) &&
1: 			!(rightOperand.isBooleanTrue()))
1: 		{
0: 			BooleanConstantNode	trueNode;
1: 
0: 			trueNode = (BooleanConstantNode) getNodeFactory().getNode(
0: 											C_NodeTypes.BOOLEAN_CONSTANT_NODE,
0: 											Boolean.TRUE,
0: 											getContextManager());
0: 			curAnd.setRightOperand(
0: 					(ValueNode) getNodeFactory().getNode(
0: 											C_NodeTypes.AND_NODE,
0: 											curAnd.getRightOperand(),
0: 											trueNode,
0: 											getContextManager()));
0: 			((AndNode) curAnd.getRightOperand()).postBindFixup();
1: 		}
1: 
1: 		/* If leftOperand is an AndNode, then we modify the tree from:
1: 		 *
1: 		 *				this
1: 		 *			   /	\
1: 		 *			And2	Nodex
1: 		 *		   /	\		...
1: 		 *		left2	right2
1: 		 *
1: 		 *	to:
1: 		 *
1: 		 *						this
1: 		 *					   /	\
1: 		 *	left2.changeToCNF()		 And2
1: 		 *							/	\
1: 		 *		right2.changeToCNF()	  Nodex.changeToCNF()
1: 		 *
1: 		 *	NOTE: We could easily switch places between left2.changeToCNF() and 
1: 		 *  right2.changeToCNF().
1: 		 */
1: 
1: 		/* Pull up the AndNode chain to our left */
1: 		while (leftOperand instanceof AndNode)
1: 		{
1: 			ValueNode newLeft;
1: 			AndNode	  oldLeft;
1: 			AndNode	  newRight;
1: 			ValueNode oldRight;
1: 
1: 			/* For "clarity", we first get the new and old operands */
1: 			newLeft = ((AndNode) leftOperand).getLeftOperand();
1: 			oldLeft = (AndNode) leftOperand;
1: 			newRight = (AndNode) leftOperand;
1: 			oldRight = rightOperand;
1: 
1: 			/* We then twiddle the tree to match the above diagram */
1: 			leftOperand = newLeft;
1: 			rightOperand = newRight;
1: 			newRight.setLeftOperand(oldLeft.getRightOperand());
1: 			newRight.setRightOperand(oldRight);
1: 		}
1: 
1: 		/* Finally, we continue to normalize the left and right subtrees. */
1: 		leftOperand = leftOperand.changeToCNF(underTopAndNode);
1: 		rightOperand = rightOperand.changeToCNF(underTopAndNode);
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Verify that changeToCNF() did its job correctly.  Verify that:
1: 	 *		o  AndNode  - rightOperand is not instanceof OrNode
1: 	 *				      leftOperand is not instanceof AndNode
1: 	 *		o  OrNode	- rightOperand is not instanceof AndNode
1: 	 *					  leftOperand is not instanceof OrNode
1: 	 *
1: 	 * @return		Boolean which reflects validity of the tree.
1: 	 */
0: 	public boolean verifyChangeToCNF()
1: 	{
1: 		boolean isValid = true;
1: 
1: 		if (SanityManager.ASSERT)
1: 		{
1: 			isValid = ((rightOperand instanceof AndNode) ||
1: 					   (rightOperand.isBooleanTrue()));
1: 			if (rightOperand instanceof AndNode)
1: 			{
1: 				isValid = rightOperand.verifyChangeToCNF();
1: 			}
1: 			if (leftOperand instanceof AndNode)
1: 			{
1: 				isValid = false;
1: 			}
1: 			else
1: 			{
1: 				isValid = isValid && leftOperand.verifyChangeToCNF();
1: 			}
1: 		}
1: 
1: 		return isValid;
1: 	}
1: 
1: 	/**
1: 	 * Do bind() by hand for an AndNode that was generated after bind(),
1: 	 * eg by putAndsOnTop(). (Set the data type and nullability info.)
1: 	 *
0: 	 * @return	None.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	void postBindFixup()
1: 					throws StandardException
1: 	{
1: 		setType(resolveLogicalBinaryOperator(
1: 							leftOperand.getTypeServices(),
1: 							rightOperand.getTypeServices()
1: 											)
1: 				);
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.compile.NodeFactory;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import java.util.Vector;
0: 
0: public class AndNode extends BinaryLogicalOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * Initializer for an AndNode
0: 	 *
0: 	 * @param leftOperand	The left operand of the AND
0: 	 * @param rightOperand	The right operand of the AND
0: 	 */
0: 
0: 	public void init(Object leftOperand, Object rightOperand)
0: 	{
0: 		super.init(leftOperand, rightOperand, Boolean.FALSE, "and");
0: 	}
0: 
0: 	/**
0: 	 * Bind this logical operator.  All that has to be done for binding
0: 	 * a logical operator is to bind the operands, check that both operands
0: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector)
0: 			throws StandardException
0: 	{
0: 		super.bindExpression(fromList, subqueryList, aggregateVector);
0: 
0: 		postBindFixup();
0: 		return this;
0: 	}
0: 
0: 	
0: 	/**
0: 	 * Preprocess an expression tree.  We do a number of transformations
0: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
0: 	 * subquery flattening.
0: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
0: 	 *
0: 	 * @param	numTables			Number of tables in the DML Statement
0: 	 * @param	outerFromList		FromList from outer query block
0: 	 * @param	outerSubqueryList	SubqueryList from outer query block
0: 	 * @param	outerPredicateList	PredicateList from outer query block
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ValueNode preprocess(int numTables,
0: 								FromList outerFromList,
0: 								SubqueryList outerSubqueryList,
0: 								PredicateList outerPredicateList) 
0: 					throws StandardException
0: 	{
0: 		/* If the left child is an OR, then mark it as the 1st OR in
0: 		 * the list.  That will allow us to consider converting the OR
0: 		 * to an IN list when we preprocess the 1st OR in the list.
0: 		 */
0: 		if (leftOperand instanceof OrNode)
0: 		{
0: 			((OrNode) leftOperand).setFirstOr();
0: 		}
0: 		leftOperand = leftOperand.preprocess(numTables,
0: 											 outerFromList, outerSubqueryList,
0: 											 outerPredicateList);
0: 		/* We need to rerun the changeToCNF() phase if our left operand
0: 		 * is an AndNode.  This can happen due to a predicate transformation,
0: 		 * such as the ones for LIKE and BETWEEN, underneath us.
0: 		 */
0: 		if (leftOperand instanceof AndNode)
0: 		{
0: 			changeToCNF(false);
0: 		}
0: 		rightOperand = rightOperand.preprocess(numTables,
0: 											   outerFromList, outerSubqueryList,
0: 											   outerPredicateList);
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
0: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
0: 	 * ComparisonOperators and boolean expressions.  We invert 
0: 	 * ComparisonOperators and replace boolean expressions with 
0: 	 * boolean expression = false.
0: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
0: 	 * still could be NotNodes left in the tree.
0: 	 *
0: 	 * @param	underNotNode		Whether or not we are under a NotNode.
0: 	 *							
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	ValueNode eliminateNots(boolean underNotNode) 
0: 					throws StandardException
0: 	{
0: 		leftOperand = leftOperand.eliminateNots(underNotNode);
0: 		rightOperand = rightOperand.eliminateNots(underNotNode);
0: 		if (! underNotNode)
0: 		{
0: 			return this;
0: 		}
0: 
0: 		/* Convert the AndNode to an OrNode */
0: 		ValueNode	orNode;
0: 
0: 		orNode = (ValueNode) getNodeFactory().getNode(
0: 												C_NodeTypes.OR_NODE,
0: 												leftOperand,
0: 												rightOperand,
0: 												getContextManager());
0: 		orNode.setType(dataTypeServices);
0: 		return orNode;
0: 	}
0: 
0: 	/**
0: 	 * Do the 1st step in putting an expression into conjunctive normal
0: 	 * form.  This step ensures that the top level of the expression is
0: 	 * a chain of AndNodes terminated by a true BooleanConstantNode.
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ValueNode putAndsOnTop() 
0: 					throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		SanityManager.ASSERT(rightOperand != null,
0: 			"rightOperand is expected to be non-null");
0: 		rightOperand = rightOperand.putAndsOnTop();
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Verify that putAndsOnTop() did its job correctly.  Verify that the top level 
0: 	 * of the expression is a chain of AndNodes terminated by a true BooleanConstantNode.
0: 	 *
0: 	 * @return		Boolean which reflects validity of the tree.
0: 	 */
0: 	public boolean verifyPutAndsOnTop()
0: 	{
0: 		boolean isValid = true;
0: 
0: 		if (SanityManager.ASSERT)
0: 		{
0: 			isValid = ((rightOperand instanceof AndNode) ||
0: 					   (rightOperand.isBooleanTrue()));
0: 
0: 			if (rightOperand instanceof AndNode)
0: 			{
0: 				isValid = rightOperand.verifyPutAndsOnTop();
0: 			}
0: 		}
0: 
0: 		return isValid;
0: 	}
0: 
0: 	/**
0: 	 * Finish putting an expression into conjunctive normal
0: 	 * form.  An expression tree in conjunctive normal form meets
0: 	 * the following criteria:
0: 	 *		o  If the expression tree is not null,
0: 	 *		   the top level will be a chain of AndNodes terminating
0: 	 *		   in a true BooleanConstantNode.
0: 	 *		o  The left child of an AndNode will never be an AndNode.
0: 	 *		o  Any right-linked chain that includes an AndNode will
0: 	 *		   be entirely composed of AndNodes terminated by a true BooleanConstantNode.
0: 	 *		o  The left child of an OrNode will never be an OrNode.
0: 	 *		o  Any right-linked chain that includes an OrNode will
0: 	 *		   be entirely composed of OrNodes terminated by a false BooleanConstantNode.
0: 	 *		o  ValueNodes other than AndNodes and OrNodes are considered
0: 	 *		   leaf nodes for purposes of expression normalization.
0: 	 *		   In other words, we won't do any normalization under
0: 	 *		   those nodes.
0: 	 *
0: 	 * In addition, we track whether or not we are under a top level AndNode.  
0: 	 * SubqueryNodes need to know this for subquery flattening.
0: 	 *
0: 	 * @param	underTopAndNode		Whether or not we are under a top level AndNode.
0: 	 *							
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ValueNode changeToCNF(boolean underTopAndNode) 
0: 					throws StandardException
0: 	{
0: 		AndNode curAnd = this;
0: 
0: 		/* Top chain will be a chain of Ands terminated by a non-AndNode.
0: 		 * (putAndsOnTop() has taken care of this. If the last node in
0: 		 * the chain is not a true BooleanConstantNode then we need to do the
0: 		 * transformation to make it so.
0: 		 */
0: 
0: 		/* Add the true BooleanConstantNode if not there yet */
0: 		if (!(rightOperand instanceof AndNode) &&
0: 			!(rightOperand.isBooleanTrue()))
0: 		{
0: 			BooleanConstantNode	trueNode;
0: 
0: 			trueNode = (BooleanConstantNode) getNodeFactory().getNode(
0: 											C_NodeTypes.BOOLEAN_CONSTANT_NODE,
0: 											Boolean.TRUE,
0: 											getContextManager());
0: 			curAnd.setRightOperand(
0: 					(ValueNode) getNodeFactory().getNode(
0: 											C_NodeTypes.AND_NODE,
0: 											curAnd.getRightOperand(),
0: 											trueNode,
0: 											getContextManager()));
0: 			((AndNode) curAnd.getRightOperand()).postBindFixup();
0: 		}
0: 
0: 		/* If leftOperand is an AndNode, then we modify the tree from:
0: 		 *
0: 		 *				this
0: 		 *			   /	\
0: 		 *			And2	Nodex
0: 		 *		   /	\		...
0: 		 *		left2	right2
0: 		 *
0: 		 *	to:
0: 		 *
0: 		 *						this
0: 		 *					   /	\
0: 		 *	left2.changeToCNF()		 And2
0: 		 *							/	\
0: 		 *		right2.changeToCNF()	  Nodex.changeToCNF()
0: 		 *
0: 		 *	NOTE: We could easily switch places between left2.changeToCNF() and 
0: 		 *  right2.changeToCNF().
0: 		 */
0: 
0: 		/* Pull up the AndNode chain to our left */
0: 		while (leftOperand instanceof AndNode)
0: 		{
0: 			ValueNode newLeft;
0: 			AndNode	  oldLeft;
0: 			AndNode	  newRight;
0: 			ValueNode oldRight;
0: 
0: 			/* For "clarity", we first get the new and old operands */
0: 			newLeft = ((AndNode) leftOperand).getLeftOperand();
0: 			oldLeft = (AndNode) leftOperand;
0: 			newRight = (AndNode) leftOperand;
0: 			oldRight = rightOperand;
0: 
0: 			/* We then twiddle the tree to match the above diagram */
0: 			leftOperand = newLeft;
0: 			rightOperand = newRight;
0: 			newRight.setLeftOperand(oldLeft.getRightOperand());
0: 			newRight.setRightOperand(oldRight);
0: 		}
0: 
0: 		/* Finally, we continue to normalize the left and right subtrees. */
0: 		leftOperand = leftOperand.changeToCNF(underTopAndNode);
0: 		rightOperand = rightOperand.changeToCNF(underTopAndNode);
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Verify that changeToCNF() did its job correctly.  Verify that:
0: 	 *		o  AndNode  - rightOperand is not instanceof OrNode
0: 	 *				      leftOperand is not instanceof AndNode
0: 	 *		o  OrNode	- rightOperand is not instanceof AndNode
0: 	 *					  leftOperand is not instanceof OrNode
0: 	 *
0: 	 * @return		Boolean which reflects validity of the tree.
0: 	 */
0: 	public boolean verifyChangeToCNF()
0: 	{
0: 		boolean isValid = true;
0: 
0: 		if (SanityManager.ASSERT)
0: 		{
0: 			isValid = ((rightOperand instanceof AndNode) ||
0: 					   (rightOperand.isBooleanTrue()));
0: 			if (rightOperand instanceof AndNode)
0: 			{
0: 				isValid = rightOperand.verifyChangeToCNF();
0: 			}
0: 			if (leftOperand instanceof AndNode)
0: 			{
0: 				isValid = false;
0: 			}
0: 			else
0: 			{
0: 				isValid = isValid && leftOperand.verifyChangeToCNF();
0: 			}
0: 		}
0: 
0: 		return isValid;
0: 	}
0: 
0: 	/**
0: 	 * Do bind() by hand for an AndNode that was generated after bind(),
0: 	 * eg by putAndsOnTop(). (Set the data type and nullability info.)
0: 	 *
0: 	 * @return	None.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	void postBindFixup()
0: 					throws StandardException
0: 	{
0: 		setType(resolveLogicalBinaryOperator(
0: 							leftOperand.getTypeServices(),
0: 							rightOperand.getTypeServices()
0: 											)
0: 				);
0: 	}
0: }
============================================================================