1:7861eea: /*
1:7861eea:  *
1:7861eea:  * Derby - Class org.apache.derbyTesting.functionTests.tests.store.LiveLockTest
1:7861eea:  *
1:7861eea:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7861eea:  * contributor license agreements.  See the NOTICE file distributed with
1:7861eea:  * this work for additional information regarding copyright ownership.
1:7861eea:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7861eea:  * (the "License"); you may not use this file except in compliance with
1:7861eea:  * the License.  You may obtain a copy of the License at
1:7861eea:  *
1:7861eea:  *    http://www.apache.org/licenses/LICENSE-2.0
1:7861eea:  *
1:7861eea:  * Unless required by applicable law or agreed to in writing,
1:7861eea:  * software distributed under the License is distributed on an
1:7861eea:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:7861eea:  * either express or implied. See the License for the specific
1:7861eea:  * language governing permissions and limitations under the License.
1:7861eea:  */
1:7861eea: package org.apache.derbyTesting.functionTests.tests.store;
3:7861eea: 
1:7861eea: import java.sql.Connection;
1:7861eea: import java.sql.ResultSet;
1:7861eea: import java.sql.SQLException;
1:7861eea: import java.sql.Statement;
1:7861eea: import java.util.LinkedList;
1:7861eea: 
1:7861eea: import junit.framework.Test;
1:7861eea: 
1:7861eea: 
1:7861eea: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:7861eea: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:7861eea: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:7861eea: import org.apache.derbyTesting.junit.TestConfiguration;
1:7861eea: 
1:7861eea: /**
1:7861eea:  * Test to test two threads doing staggered select then update of a row
1:7861eea:  * Staggered selects should not starve the update.
1:7861eea:  * 
1:7861eea:  */
1:7861eea: public class LiveLockTest extends BaseJDBCTestCase {
1:3f5c48a:     private LinkedList<Exception> listExceptions = new LinkedList<Exception>();
1:7861eea: 
1:7861eea:     private Object syncObject = new Object();
1:7861eea:     private boolean updateDone = false;
1:7861eea: 
1:7861eea:     public LiveLockTest(String name) {
1:7861eea:         super(name);
1:7861eea:     }
1:7861eea: 
1:7861eea:     /**
1:3f5c48a:      * Start three threads. Two doing staggered selects and a third trying
1:7861eea:      * to do an update.  The update should not be starved by the staggered
1:7861eea:      * selects.
1:7861eea:      */
1:3f5c48a:     public void testLiveLock() throws Exception {
1:7861eea: 
1:7861eea:         Thread[] t = createThreads();
1:7861eea:         waitForThreads(t);
1:7861eea:         checkExceptions();
1:7861eea:     }
1:7861eea: 
1:7861eea:     /**
1:7861eea:      * There should be no exceptions. The update should have gotten through
1:7861eea:      * 
1:3f5c48a:      * @throws Exception
1:7861eea:      *             if any occurred
1:7861eea:      */
1:3f5c48a:     private void checkExceptions() throws Exception {
1:3f5c48a:         for (Exception e : listExceptions) {
1:7861eea:             throw e;
1:7861eea:         }
1:7861eea:     }
1:7861eea: 
1:7861eea:     private void waitForThreads(Thread[] t) {
1:7861eea:         for (int i = 0; i < t.length; i++) {
1:7861eea:             try {
1:7861eea:                 t[i].join();
1:7861eea:             } catch (InterruptedException e) {
1:7861eea:                 fail("FAIL - InterruptedException  thrown waiting for the threads");
1:7861eea:             }
1:7861eea:         }
1:7861eea: 
1:7861eea:     }
1:7861eea: 
1:7861eea:     private Thread[] createThreads() {
1:7861eea:         Thread[] t = new Thread[3];
1:7861eea:         // First select thread will start right away. Doing iterative
1:7861eea:         // selects
1:7861eea:         t[0] = new Thread(new Runnable() {
1:7861eea:             public void run() {
1:7861eea:                 selectWorker(0);
1:7861eea:             }
1:7861eea:         }, "SelectThread1");
1:7861eea:         // Second select will wait 1 second before it starts. so
1:7861eea:         // selects will alternately be aquiring share locks.
1:7861eea:         t[1] = new Thread(new Runnable() {
1:7861eea:             public void run() {
1:7861eea:                 selectWorker(1000);
1:7861eea:             }
1:7861eea:         }, "SelectThread2");
1:7861eea:         // Update thread waits 2 seconds to start to make sure both
1:7861eea:         // selects have locks. It should not be starved.
1:7861eea:         t[2] = new Thread(new Runnable() {
1:7861eea:             public void run() {
1:7861eea:                 updateWorker();
1:7861eea:             }
1:7861eea:         }, "UpdateThread");
1:7861eea:         t[0].start();
1:7861eea:         t[1].start();
1:7861eea:         t[2].start();
1:7861eea:         return t;
1:7861eea:     }
1:7861eea: 
1:7861eea:     private void selectWorker(int delay) {
1:7861eea:         Connection threadConnection = null;
1:7861eea: 
1:7861eea:         try {
1:7861eea:             if (delay > 0)
1:08c0ccb:                 Thread.sleep(delay);
1:7861eea:             threadConnection = openDefaultConnection();
1:7861eea:             Statement stmt = threadConnection.createStatement();
1:7861eea: 
1:7861eea:             threadConnection.setAutoCommit(false);
1:7861eea:             /* set isolation level to repeatable read */
1:7861eea:             threadConnection
1:7861eea:                     .setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
1:7861eea:             // While our update is still not done, keep on doing the
1:7861eea:             // staggered select.
1:7861eea:             // Let's stop after 10 selects just in case the test fails 
1:7861eea:             // and the update doesn't get through. We would have gotten
1:7861eea:             // a lock timeout by then, so we will get a test failure.
1:7861eea:             // We don't want it to run forever if live lock ever breaks.
1:7861eea:             int tries = 0;
1:08c0ccb:             while (!isUpdateDone()) {
1:7861eea:                 ResultSet rs = stmt.executeQuery("select * from t");
1:7861eea:                 while (rs.next())
2:7861eea:                     ;
1:140391a:                 Thread.sleep(4000);
1:7861eea:                 threadConnection.commit();
1:7861eea:                 tries++;
1:7861eea:                 if (tries == 10)
1:7861eea:                     fail("Update did not occur after 10 selects");
1:7861eea:             }
1:7861eea:         } catch (Exception e) {
1:7861eea:             synchronized (syncObject) {
1:7861eea:                 listExceptions.add(e);
1:7861eea:             }
1:7861eea:         }
1:7861eea:     }
1:7861eea: 
1:7861eea:     private void updateWorker() {
1:7861eea:         Connection threadConnection = null;
1:7861eea:         try {
1:7861eea:             Thread.sleep(2000);
1:7861eea:             threadConnection = openDefaultConnection();
1:7861eea:             Statement stmt = threadConnection.createStatement();
1:7861eea: 
1:7861eea:             stmt.executeUpdate("UPDATE T SET I = 456 where I = 456");
1:7861eea:             synchronized (syncObject) {
1:7861eea:                 setUpdateDone(true);
1:7861eea:                 threadConnection.commit();
1:7861eea:             }
1:7861eea:         } catch (Exception e) {
1:7861eea:             synchronized (syncObject) {
1:7861eea:                 listExceptions.add(e);
1:7861eea:             }
1:7861eea:         }
1:7861eea:     }
1:7861eea: 
1:7861eea:     public static Test suite() {
1:7861eea: 
1:7861eea:         Test suite = TestConfiguration
1:7861eea:                 .embeddedSuite(LiveLockTest.class);
1:7861eea:         return new CleanDatabaseTestSetup(DatabasePropertyTestSetup
1:140391a:                 .setLockTimeouts(suite, 1, 10)) {
1:7861eea:             /**
1:7861eea:              * Creates the table used in the test cases.
1:7861eea:              * 
1:7861eea:              */
1:7861eea:             protected void decorateSQL(Statement s) throws SQLException {
1:7861eea:                 s.executeUpdate("CREATE TABLE T (I INT)");
1:7861eea:                 s.executeUpdate("INSERT INTO T VALUES(456)");
1:7861eea:             }
1:7861eea: 
1:7861eea:         };
1:7861eea: 
1:7861eea:     }
1:7861eea: 
1:7861eea:     public boolean isUpdateDone() {
1:7861eea:         synchronized (syncObject) {
1:7861eea:             return updateDone;
1:7861eea:         }
1:7861eea:     }
1:7861eea: 
1:7861eea:     public void setUpdateDone(boolean updateDone) {
1:7861eea:         synchronized (syncObject) {
1:7861eea:             this.updateDone = updateDone;
1:7861eea:         }
1:7861eea:     }
1:7861eea: 
1:7861eea: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private LinkedList<Exception> listExceptions = new LinkedList<Exception>();
/////////////////////////////////////////////////////////////////////////
1:      * Start three threads. Two doing staggered selects and a third trying
1:     public void testLiveLock() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception
1:     private void checkExceptions() throws Exception {
1:         for (Exception e : listExceptions) {
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:140391a
/////////////////////////////////////////////////////////////////////////
1:                 Thread.sleep(4000);
/////////////////////////////////////////////////////////////////////////
1:                 .setLockTimeouts(suite, 1, 10)) {
commit:08c0ccb
/////////////////////////////////////////////////////////////////////////
1:                 Thread.sleep(delay);
/////////////////////////////////////////////////////////////////////////
1:             while (!isUpdateDone()) {
commit:7861eea
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.store.LiveLockTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.util.Iterator;
1: import java.util.LinkedList;
1: 
1: import junit.framework.Test;
1: 
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test to test two threads doing staggered select then update of a row
1:  * Staggered selects should not starve the update.
1:  * 
1:  */
1: public class LiveLockTest extends BaseJDBCTestCase {
0:     private LinkedList listExceptions = new LinkedList();
1: 
1:     private Object syncObject = new Object();
1:     private boolean updateDone = false;
1: 
1:     public LiveLockTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
0:      * Start three threads. Two doing staggered selets and a third trying 
1:      * to do an update.  The update should not be starved by the staggered
1:      * selects.
0:      * @throws SQLException
1:      */
0:     public void testLiveLock() throws SQLException {
1: 
1:         Thread[] t = createThreads();
1:         waitForThreads(t);
1:         checkExceptions();
1:     }
1: 
1:     /**
1:      * There should be no exceptions. The update should have gotten through
1:      * 
0:      * @throws SQLException
1:      *             if any occurred
1:      */
0:     private void checkExceptions() throws SQLException {
1: 
0:         for (Iterator i = listExceptions.iterator(); i.hasNext();) {
0:             SQLException e = (SQLException) i.next();
1:             throw e;
1:         }
1: 
1:     }
1: 
1:     private void waitForThreads(Thread[] t) {
1:         for (int i = 0; i < t.length; i++) {
1:             try {
1:                 t[i].join();
1:             } catch (InterruptedException e) {
1:                 fail("FAIL - InterruptedException  thrown waiting for the threads");
1:             }
1:         }
1: 
1:     }
1: 
1:     private Thread[] createThreads() {
1:         Thread[] t = new Thread[3];
1:         // First select thread will start right away. Doing iterative
1:         // selects
1:         t[0] = new Thread(new Runnable() {
1:             public void run() {
1:                 selectWorker(0);
1:             }
1:         }, "SelectThread1");
1:         // Second select will wait 1 second before it starts. so
1:         // selects will alternately be aquiring share locks.
1:         t[1] = new Thread(new Runnable() {
1:             public void run() {
1:                 selectWorker(1000);
1:             }
1:         }, "SelectThread2");
1:         // Update thread waits 2 seconds to start to make sure both
1:         // selects have locks. It should not be starved.
1:         t[2] = new Thread(new Runnable() {
1:             public void run() {
1:                 updateWorker();
1:             }
1:         }, "UpdateThread");
1:         t[0].start();
1:         t[1].start();
1:         t[2].start();
1:         return t;
1:     }
1: 
1:     private void selectWorker(int delay) {
1:         Connection threadConnection = null;
1: 
1:         try {
1:             if (delay > 0)
1:                 ;
0:             Thread.sleep(delay);
1:             threadConnection = openDefaultConnection();
1:             Statement stmt = threadConnection.createStatement();
1: 
1:             threadConnection.setAutoCommit(false);
1:             /* set isolation level to repeatable read */
1:             threadConnection
1:                     .setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
1:             // While our update is still not done, keep on doing the
1:             // staggered select.
1:             // Let's stop after 10 selects just in case the test fails 
1:             // and the update doesn't get through. We would have gotten
1:             // a lock timeout by then, so we will get a test failure.
1:             // We don't want it to run forever if live lock ever breaks.
1:             int tries = 0;
0:             while (!isUpdateDone() && tries <= 10) {
1:                 ResultSet rs = stmt.executeQuery("select * from t");
1:                 while (rs.next())
1:                     ;
0:                 Thread.sleep(3000);
1:                 threadConnection.commit();
1:                 tries++;
1:                 if (tries == 10)
1:                     fail("Update did not occur after 10 selects");
1:             }
1:         } catch (Exception e) {
1:             synchronized (syncObject) {
1:                 listExceptions.add(e);
1:             }
1:         }
1:     }
1: 
1:     private void updateWorker() {
1:         Connection threadConnection = null;
1:         try {
1:             Thread.sleep(2000);
1:             threadConnection = openDefaultConnection();
1:             Statement stmt = threadConnection.createStatement();
1: 
1:             stmt.executeUpdate("UPDATE T SET I = 456 where I = 456");
1:             synchronized (syncObject) {
1:                 setUpdateDone(true);
1:                 threadConnection.commit();
1:             }
1:         } catch (Exception e) {
1:             synchronized (syncObject) {
1:                 listExceptions.add(e);
1:             }
1:         }
1:     }
1: 
1:     public static Test suite() {
1: 
1:         Test suite = TestConfiguration
1:                 .embeddedSuite(LiveLockTest.class);
1:         return new CleanDatabaseTestSetup(DatabasePropertyTestSetup
0:                 .setLockTimeouts(suite, 5, 10)) {
1:             /**
1:              * Creates the table used in the test cases.
1:              * 
1:              */
1:             protected void decorateSQL(Statement s) throws SQLException {
1:                 s.executeUpdate("CREATE TABLE T (I INT)");
1:                 s.executeUpdate("INSERT INTO T VALUES(456)");
1:             }
1: 
1:         };
1: 
1:     }
1: 
1:     public boolean isUpdateDone() {
1:         synchronized (syncObject) {
1:             return updateDone;
1:         }
1:     }
1: 
1:     public void setUpdateDone(boolean updateDone) {
1:         synchronized (syncObject) {
1:             this.updateDone = updateDone;
1:         }
1:     }
1: 
1: }
============================================================================