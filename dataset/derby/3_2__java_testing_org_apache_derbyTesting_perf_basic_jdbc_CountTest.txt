1:c3bf4ea: /*
1:c3bf4ea: 
1:c3bf4ea: Derby - Class org.apache.derbyTesting.perf.basic.jdbc.CountTest
1:c3bf4ea: 
1:c3bf4ea: Licensed to the Apache Software Foundation (ASF) under one or more
1:c3bf4ea: contributor license agreements.  See the NOTICE file distributed with
1:c3bf4ea: this work for additional information regarding copyright ownership.
1:c3bf4ea: The ASF licenses this file to You under the Apache License, Version 2.0
1:c3bf4ea: (the "License"); you may not use this file except in compliance with
1:c3bf4ea: the License.  You may obtain a copy of the License at
1:c3bf4ea: 
1:c3bf4ea: http://www.apache.org/licenses/LICENSE-2.0
1:c3bf4ea: 
1:c3bf4ea: Unless required by applicable law or agreed to in writing, software
1:c3bf4ea: distributed under the License is distributed on an "AS IS" BASIS,
1:c3bf4ea: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c3bf4ea: See the License for the specific language governing permissions and
1:c3bf4ea: limitations under the License.
1:c3bf4ea: 
1:c3bf4ea: */
1:c3bf4ea: package org.apache.derbyTesting.perf.basic.jdbc;
1:c3bf4ea: 
1:c3bf4ea: 
1:1ae02c9: import java.sql.Connection;
1:1ae02c9: import java.sql.PreparedStatement;
1:1ae02c9: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:c3bf4ea: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c3bf4ea: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1:c3bf4ea: 
1:c3bf4ea: /**
1:c3bf4ea:  * Add tests to measure performance of count.
1:c3bf4ea:  */
1:c3bf4ea: public class CountTest extends JDBCPerfTestCase {
1:c3bf4ea: 
1:c3bf4ea:     PreparedStatement select = null;
1:c3bf4ea:     static String tableName = "COUNTTEST";
1:c3bf4ea:     protected static int rowcount = 10000;
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Suite of tests to return.
1:c3bf4ea:      */
1:c3bf4ea:     public static Test suite()
1:c3bf4ea:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("CountTest");
1:c3bf4ea:         int iterations = 1200, repeats = 4;
1:c3bf4ea: 
1:c3bf4ea:         suite.addTest(new CountTest("Count100",iterations,repeats));
1:c3bf4ea:         return new BaseLoad100TestSetup(suite,rowcount,tableName);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Constructor -create a CountTest
1:c3bf4ea:      * @param name testname
1:c3bf4ea:      * @param iterations iterations for the test to measure
1:c3bf4ea:      * @param repeats number of times to repeat the test
1:c3bf4ea:      */
1:c3bf4ea:     public CountTest(String name,int iterations, int repeats)
1:c3bf4ea:     {
1:c3bf4ea:         super(name,iterations,repeats);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * setup for the test.
1:c3bf4ea:      **/
1:c3bf4ea:     public void setUp() throws Exception {
1:c3bf4ea: 
1:c3bf4ea:         select = openDefaultConnection().prepareStatement("SELECT COUNT(i1) FROM "+tableName);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Override initializeConnection to set the autocommit to false
1:c3bf4ea:      */
1:c3bf4ea:     public void initializeConnection(Connection conn)
1:c3bf4ea:         throws SQLException
1:c3bf4ea:     {
1:c3bf4ea:         conn.setAutoCommit(false);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Execute the count query for the BaseLoad100TestSetup schema.
1:c3bf4ea:      * @throws Exception
1:c3bf4ea:      */
1:c3bf4ea:     public void Count100() throws Exception
1:c3bf4ea:     {
1:c3bf4ea:         ResultSet rs = select.executeQuery();
1:c3bf4ea:         rs.next();
1:c3bf4ea:         assertEquals(rowcount,rs.getInt(1));
1:c3bf4ea:         rs.close();
1:c3bf4ea:         getConnection().commit();
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Cleanup - close resources opened in this test.
1:c3bf4ea:      **/
1:c3bf4ea:     public void tearDown() throws Exception {
1:c3bf4ea:         select.close();
1:c3bf4ea:         select = null;
1:c3bf4ea:         super.tearDown();
1:c3bf4ea:     }
1:c3bf4ea: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("CountTest");
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c3bf4ea
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.basic.jdbc.CountTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.perf.basic.jdbc;
1: 
1: 
0: import java.sql.*;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1: 
1: /**
1:  * Add tests to measure performance of count.
1:  */
1: public class CountTest extends JDBCPerfTestCase {
1: 
1:     PreparedStatement select = null;
1:     static String tableName = "COUNTTEST";
1:     protected static int rowcount = 10000;
1: 
1:     /**
1:      * Suite of tests to return.
0:      * @return
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("CountTest");
1:         int iterations = 1200, repeats = 4;
1: 
1:         suite.addTest(new CountTest("Count100",iterations,repeats));
1:         return new BaseLoad100TestSetup(suite,rowcount,tableName);
1:     }
1: 
1:     /**
1:      * Constructor -create a CountTest
1:      * @param name testname
1:      * @param iterations iterations for the test to measure
1:      * @param repeats number of times to repeat the test
1:      */
1:     public CountTest(String name,int iterations, int repeats)
1:     {
1:         super(name,iterations,repeats);
1:     }
1: 
1:     /**
1:      * setup for the test.
1:      **/
1:     public void setUp() throws Exception {
1: 
1:         select = openDefaultConnection().prepareStatement("SELECT COUNT(i1) FROM "+tableName);
1:     }
1: 
1: 
1:     /**
1:      * Override initializeConnection to set the autocommit to false
1:      */
1:     public void initializeConnection(Connection conn)
1:         throws SQLException
1:     {
1:         conn.setAutoCommit(false);
1:     }
1: 
1: 
1:     /**
1:      * Execute the count query for the BaseLoad100TestSetup schema.
1:      * @throws Exception
1:      */
1:     public void Count100() throws Exception
1:     {
1:         ResultSet rs = select.executeQuery();
1:         rs.next();
1:         assertEquals(rowcount,rs.getInt(1));
1:         rs.close();
1:         getConnection().commit();
1:     }
1: 
1:     /**
1:      * Cleanup - close resources opened in this test.
1:      **/
1:     public void tearDown() throws Exception {
1:         select.close();
1:         select = null;
1:         super.tearDown();
1:     }
1: }
============================================================================