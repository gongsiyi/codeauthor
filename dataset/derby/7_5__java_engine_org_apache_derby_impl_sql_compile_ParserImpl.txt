1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.ParserImpl
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:d9878ca: import java.io.StringReader;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:70a4f2d: import org.apache.derby.iapi.sql.compile.Parser;
1:70a4f2d: import org.apache.derby.iapi.sql.compile.Visitable;
1:eac0369: 
1:eac0369: public class ParserImpl implements Parser
2:eac0369: {
1:eac0369: 	/*
1:eac0369: 	** We will use the following constant to pass in to
1:eac0369: 	** our CharStream.  It is the size of the internal
1:eac0369: 	** buffers that are used to buffer tokens.  It
1:eac0369: 	** should be set to what is typically around the
1:eac0369: 	** largest token that is likely to be hit.  Note
1:eac0369: 	** that if the size is exceeded, the buffer will
1:eac0369: 	** automatically be expanded by 2048, so it is ok
1:eac0369: 	** to choose something that is smaller than the
1:eac0369: 	** max token supported.
1:eac0369: 	**
1:eac0369: 	** Since, JavaCC generates parser and tokenmanagers classes
1:eac0369: 	** tightly connected, to use another parser or tokenmanager
1:eac0369: 	** inherit this class, override the following methods
1:eac0369: 	** to use specific instances:<ul>
1:eac0369: 	** <li>getTokenManager()</li>
1:eac0369: 	** <li>getParser()</li>
1:eac0369: 	** <li>parseGoalProduction(...)</li>
1:eac0369: 	** </ul>
1:eac0369: 	**
1:eac0369: 	*/
1:eac0369: 	static final int LARGE_TOKEN_SIZE = 128;
1:eac0369: 
1:eac0369:         /* Don't ever access these objects directly, call getParser(), and getTokenManager() */
1:be0b54f:         private SQLParser cachedParser; 
1:9f2ed7d:         private Object cachedTokenManager;
1:eac0369: 
1:9f2ed7d:         private CharStream charStream;
1:eac0369:         protected String SQLtext;
1:eac0369: 
1:9f2ed7d:         private final CompilerContext cc;
1:eac0369: 
4:eac0369: 	/**
1:eac0369: 	 * Constructor for Parser
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public ParserImpl(CompilerContext cc)
1:eac0369: 	{
1:eac0369: 		this.cc = cc;
1:eac0369: 	}
1:eac0369: 
1:70a4f2d: 	public Visitable parseStatement(String statementSQLText)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		return parseStatement(statementSQLText, (Object[])null);
1:eac0369: 	}
1:eac0369: 
1:eac0369:         /**
1:eac0369: 	 * Returns a initialized (clean) TokenManager, paired w. the Parser in getParser,
1:eac0369: 	 * Appropriate for this ParserImpl object.
1:eac0369: 	 */
1:eac0369:         protected Object getTokenManager()
1:eac0369:         {
1:eac0369: 	    /* returned a cached tokenmanager if already exists, otherwise create */
1:eac0369: 	    SQLParserTokenManager tm = (SQLParserTokenManager) cachedTokenManager;
1:eac0369: 	    if (tm == null) {
1:eac0369: 		tm = new SQLParserTokenManager(charStream);
1:eac0369: 		cachedTokenManager = tm;
1:eac0369: 	    } else {
1:eac0369: 		tm.ReInit(charStream);
1:eac0369: 	    }
1:eac0369: 	    return tm;
1:eac0369: 	}
1:eac0369: 
1:be0b54f:      /**
1:eac0369: 	 * new parser, appropriate for the ParserImpl object.
1:eac0369: 	 */
1:be0b54f:      private SQLParser getParser()
1:eac0369:         {
1:eac0369: 	    SQLParserTokenManager tm = (SQLParserTokenManager) getTokenManager();
1:eac0369: 	    /* returned a cached Parser if already exists, otherwise create */
1:3bb140c:         SQLParser p = cachedParser;
1:eac0369: 	    if (p == null) {
1:eac0369: 		p = new SQLParser(tm);
1:eac0369: 		p.setCompilerContext(cc);
1:eac0369: 		cachedParser = p;
1:eac0369: 	    } else {
1:eac0369: 		p.ReInit(tm);
1:eac0369: 	    }
1:eac0369: 	    return p;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Parse a statement and return a query tree.  Implements the Parser
1:eac0369: 	 * interface
4:eac0369: 	 *
1:6b50965: 	 * @param statementSQLText	Statement to parse
1:eac0369: 	 * @param paramDefaults	parameter defaults. Passed around as an array
1:eac0369: 	 *                      of objects, but is really an array of StorableDataValues
2:eac0369: 	 * @return	A QueryTree representing the parsed statement
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException	Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:70a4f2d: 	public Visitable parseStatement(String statementSQLText, Object[] paramDefaults)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:d9878ca:         return parseStatementOrSearchCondition(
1:d9878ca:                 statementSQLText, paramDefaults, true);
1:d9878ca:     }
1:eac0369: 
1:d9878ca:     /**
1:d9878ca:      * Parse a full SQL statement or a fragment that represents a
1:d9878ca:      * {@code <search condition>}.
1:d9878ca:      *
1:d9878ca:      * @param sql the SQL statement or fragment to parse
1:d9878ca:      * @param paramDefaults parameter defaults to pass on to the parser
1:d9878ca:      *   in the case where {@code sql} is a full SQL statement
1:d9878ca:      * @param isStatement {@code true} if {@code sql} is a full SQL statement,
1:d9878ca:      *   {@code false} if it is a fragment
1:d9878ca:      * @return parse tree for the SQL
1:d9878ca:      * @throws StandardException if an error happens during parsing
1:d9878ca:      */
1:d9878ca:     private Visitable parseStatementOrSearchCondition(
1:d9878ca:             String sql, Object[] paramDefaults, boolean isStatement)
1:d9878ca:         throws StandardException
1:d9878ca:     {
1:d9878ca:         StringReader sqlText = new StringReader(sql);
1:eac0369: 
1:eac0369: 		/* Get a char stream if we don't have one already */
1:eac0369: 		if (charStream == null)
1:eac0369: 		{
1:eac0369: 			charStream = new UCode_CharStream(sqlText, 1, 1, LARGE_TOKEN_SIZE);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			charStream.ReInit(sqlText, 1, 1, LARGE_TOKEN_SIZE);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* remember the string that we're parsing */
1:d9878ca:         SQLtext = sql;
1:eac0369: 
1:eac0369: 		/* Parse the statement, and return the QueryTree */
1:eac0369: 		try
1:eac0369: 		{
1:d9878ca:             SQLParser p = getParser();
1:d9878ca:             return isStatement
1:d9878ca:                     ? p.Statement(sql, paramDefaults)
1:d9878ca:                     : p.SearchCondition(sql);
1:eac0369: 		}
1:eac0369: 		catch (ParseException e)
1:eac0369: 		{
1:eac0369: 		    throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, e.getMessage());
1:eac0369: 		}
1:eac0369: 		catch (TokenMgrError e)
1:eac0369: 		{
1:089d842: 			// Derby - 2103.
1:089d842: 			// When the exception occurs cachedParser may live with
1:089d842: 			// some flags set inappropriately that may cause Exception
1:089d842: 			// in the subsequent compilation. This seems to be a javacc bug.
1:089d842: 			// Issue Javacc-152 has been raised.
1:089d842: 			// As a workaround, the cachedParser object is cleared to ensure
1:089d842: 			// that the exception does not have any side effect.
1:089d842: 			// TODO : Remove the following line if javacc-152 is fixed.
1:089d842: 			cachedParser = null;
1:eac0369: 		    throw StandardException.newException(SQLState.LANG_LEXICAL_ERROR, e.getMessage());
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:d9878ca:     @Override
1:d9878ca:     public Visitable parseSearchCondition(String sqlFragment)
1:d9878ca:             throws StandardException {
1:d9878ca:         return parseStatementOrSearchCondition(sqlFragment, null, false);
1:d9878ca:     }
1:d9878ca: 
1:eac0369: 	/**
1:eac0369: 	 * Returns the current SQL text string that is being parsed.
1:eac0369: 	 *
1:eac0369: 	 * @return	Current SQL text string.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public	String		getSQLtext()
1:eac0369: 	{	return	SQLtext; }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d9878ca
/////////////////////////////////////////////////////////////////////////
1: import java.io.StringReader;
/////////////////////////////////////////////////////////////////////////
1:         return parseStatementOrSearchCondition(
1:                 statementSQLText, paramDefaults, true);
1:     }
1:     /**
1:      * Parse a full SQL statement or a fragment that represents a
1:      * {@code <search condition>}.
1:      *
1:      * @param sql the SQL statement or fragment to parse
1:      * @param paramDefaults parameter defaults to pass on to the parser
1:      *   in the case where {@code sql} is a full SQL statement
1:      * @param isStatement {@code true} if {@code sql} is a full SQL statement,
1:      *   {@code false} if it is a fragment
1:      * @return parse tree for the SQL
1:      * @throws StandardException if an error happens during parsing
1:      */
1:     private Visitable parseStatementOrSearchCondition(
1:             String sql, Object[] paramDefaults, boolean isStatement)
1:         throws StandardException
1:     {
1:         StringReader sqlText = new StringReader(sql);
/////////////////////////////////////////////////////////////////////////
1:         SQLtext = sql;
1:             SQLParser p = getParser();
1:             return isStatement
1:                     ? p.Statement(sql, paramDefaults)
1:                     : p.SearchCondition(sql);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Visitable parseSearchCondition(String sqlFragment)
1:             throws StandardException {
1:         return parseStatementOrSearchCondition(sqlFragment, null, false);
1:     }
1: 
commit:9f2ed7d
/////////////////////////////////////////////////////////////////////////
1:         private Object cachedTokenManager;
1:         private CharStream charStream;
1:         private final CompilerContext cc;
commit:70a4f2d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Parser;
1: import org.apache.derby.iapi.sql.compile.Visitable;
/////////////////////////////////////////////////////////////////////////
1: 	public Visitable parseStatement(String statementSQLText)
/////////////////////////////////////////////////////////////////////////
1: 	public Visitable parseStatement(String statementSQLText, Object[] paramDefaults)
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1:         SQLParser p = cachedParser;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:089d842
/////////////////////////////////////////////////////////////////////////
1: 			// Derby - 2103.
1: 			// When the exception occurs cachedParser may live with
1: 			// some flags set inappropriately that may cause Exception
1: 			// in the subsequent compilation. This seems to be a javacc bug.
1: 			// Issue Javacc-152 has been raised.
1: 			// As a workaround, the cachedParser object is cleared to ensure
1: 			// that the exception does not have any side effect.
1: 			// TODO : Remove the following line if javacc-152 is fixed.
1: 			cachedParser = null;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:be0b54f
/////////////////////////////////////////////////////////////////////////
1:         private SQLParser cachedParser; 
/////////////////////////////////////////////////////////////////////////
0: 	public StatementNode parseStatement(String statementSQLText) 
/////////////////////////////////////////////////////////////////////////
1:      /**
1:      private SQLParser getParser()
/////////////////////////////////////////////////////////////////////////
0: 	public StatementNode parseStatement(String statementSQLText, Object[] paramDefaults) 
/////////////////////////////////////////////////////////////////////////
0: 		    return getParser().Statement(statementSQLText, paramDefaults);
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.ParserImpl
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.impl.sql.compile.QueryTreeNode;
0: import org.apache.derby.iapi.sql.compile.Parser;
0: import org.apache.derby.iapi.sql.Statement;
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: public class ParserImpl implements Parser
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/*
1: 	** We will use the following constant to pass in to
1: 	** our CharStream.  It is the size of the internal
1: 	** buffers that are used to buffer tokens.  It
1: 	** should be set to what is typically around the
1: 	** largest token that is likely to be hit.  Note
1: 	** that if the size is exceeded, the buffer will
1: 	** automatically be expanded by 2048, so it is ok
1: 	** to choose something that is smaller than the
1: 	** max token supported.
1: 	**
1: 	** Since, JavaCC generates parser and tokenmanagers classes
1: 	** tightly connected, to use another parser or tokenmanager
1: 	** inherit this class, override the following methods
1: 	** to use specific instances:<ul>
1: 	** <li>getTokenManager()</li>
1: 	** <li>getParser()</li>
1: 	** <li>parseGoalProduction(...)</li>
1: 	** </ul>
1: 	**
1: 	*/
1: 	static final int LARGE_TOKEN_SIZE = 128;
1: 
1:         /* Don't ever access these objects directly, call getParser(), and getTokenManager() */
0:         protected Object cachedParser; 
0: 	protected Object cachedTokenManager;
1: 
0: 	protected CharStream charStream;
1:         protected String SQLtext;
1: 
0:         protected final CompilerContext cc;
1: 
1: 	/**
1: 	 * Constructor for Parser
1: 	 */
1: 
1: 	public ParserImpl(CompilerContext cc)
1: 	{
1: 		this.cc = cc;
1: 	}
1: 
0: 	public QueryTreeNode parseStatement(String statementSQLText) 
1: 		throws StandardException
1: 	{
1: 		return parseStatement(statementSQLText, (Object[])null);
1: 	}
1: 
1:         /**
1: 	 * Returns a initialized (clean) TokenManager, paired w. the Parser in getParser,
1: 	 * Appropriate for this ParserImpl object.
1: 	 */
1:         protected Object getTokenManager()
1:         {
1: 	    /* returned a cached tokenmanager if already exists, otherwise create */
1: 	    SQLParserTokenManager tm = (SQLParserTokenManager) cachedTokenManager;
1: 	    if (tm == null) {
1: 		tm = new SQLParserTokenManager(charStream);
1: 		cachedTokenManager = tm;
1: 	    } else {
1: 		tm.ReInit(charStream);
1: 	    }
1: 	    return tm;
1: 	}
1: 
1:         /**
1: 	 * new parser, appropriate for the ParserImpl object.
1: 	 */
0:         protected Object getParser()
1:         {
1: 	    SQLParserTokenManager tm = (SQLParserTokenManager) getTokenManager();
1: 	    /* returned a cached Parser if already exists, otherwise create */
0: 	    SQLParser p = (SQLParser) cachedParser;
1: 	    if (p == null) {
1: 		p = new SQLParser(tm);
1: 		p.setCompilerContext(cc);
1: 		cachedParser = p;
1: 	    } else {
1: 		p.ReInit(tm);
1: 	    }
1: 	    return p;
1: 	}
1: 
1: 	/**
1: 	 * Parse a statement and return a query tree.  Implements the Parser
1: 	 * interface
1: 	 *
0: 	 * @param statementSQLTextThe	Statement to parse
1: 	 * @param paramDefaults	parameter defaults. Passed around as an array
1: 	 *                      of objects, but is really an array of StorableDataValues
0: 	 * @param topLevel	true if this is a top level statement, false if not (as in
0: 	 *                            create/copy publication target ddl)*
1: 	 * @return	A QueryTree representing the parsed statement
1: 	 *
1: 	 * @exception StandardException	Thrown on error
1: 	 */
1: 
0: 	public QueryTreeNode parseStatement(String statementSQLText, Object[] paramDefaults) 
1: 		throws StandardException
1: 	{
1: 
0: 		java.io.Reader sqlText = new java.io.StringReader(statementSQLText);
1: 
1: 		/* Get a char stream if we don't have one already */
1: 		if (charStream == null)
1: 		{
1: 			charStream = new UCode_CharStream(sqlText, 1, 1, LARGE_TOKEN_SIZE);
1: 		}
1: 		else
1: 		{
1: 			charStream.ReInit(sqlText, 1, 1, LARGE_TOKEN_SIZE);
1: 		}
1: 
1: 		/* remember the string that we're parsing */
0: 		SQLtext = statementSQLText;
1: 
1: 		/* Parse the statement, and return the QueryTree */
1: 		try
1: 		{
0: 		    return parseGoalProduction( statementSQLText, paramDefaults);
1: 		}
1: 		catch (ParseException e)
1: 		{
1: 		    throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, e.getMessage());
1: 		}
1: 		catch (TokenMgrError e)
1: 		{
1: 		    throw StandardException.newException(SQLState.LANG_LEXICAL_ERROR, e.getMessage());
1: 		}
1: 	}
1: 
1:         /**
0: 	 * Parse the goal production, e.g. "statement" for the normal SQL parser.
1: 	 *
0: 	 * @param statementSQLText The Statement to parse
0: 	 * @param paramDefaults	parameter defaults.  Passed around as an array
0: 	 *						of objects, but is really an array of StorableDataValues
1:          *
1: 	 * @return	A QueryTree representing the parsed statement
1: 	 *
0: 	 * @exception ParseException
0:          * @exception TokenMgrError
1:          */
0:         protected QueryTreeNode parseGoalProduction( String statementSQLText,
0:                                                    Object[] paramDefaults)
0:             throws ParseException, TokenMgrError, StandardException
1:         {
0: 	    SQLParser p = (SQLParser) getParser();
0: 	    return p.Statement( statementSQLText, paramDefaults);
0: 	} // End of parseGoalProduction
1: 
1: 	/**
1: 	 * Returns the current SQL text string that is being parsed.
1: 	 *
1: 	 * @return	Current SQL text string.
1: 	 *
1: 	 */
1: 	public	String		getSQLtext()
1: 	{	return	SQLtext; }
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param statementSQLText	Statement to parse
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.impl.sql.compile.QueryTreeNode;
0: import org.apache.derby.iapi.sql.compile.Parser;
0: import org.apache.derby.iapi.sql.Statement;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: public class ParserImpl implements Parser
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/*
0: 	** We will use the following constant to pass in to
0: 	** our CharStream.  It is the size of the internal
0: 	** buffers that are used to buffer tokens.  It
0: 	** should be set to what is typically around the
0: 	** largest token that is likely to be hit.  Note
0: 	** that if the size is exceeded, the buffer will
0: 	** automatically be expanded by 2048, so it is ok
0: 	** to choose something that is smaller than the
0: 	** max token supported.
0: 	**
0: 	** Since, JavaCC generates parser and tokenmanagers classes
0: 	** tightly connected, to use another parser or tokenmanager
0: 	** inherit this class, override the following methods
0: 	** to use specific instances:<ul>
0: 	** <li>getTokenManager()</li>
0: 	** <li>getParser()</li>
0: 	** <li>parseGoalProduction(...)</li>
0: 	** </ul>
0: 	**
0: 	*/
0: 	static final int LARGE_TOKEN_SIZE = 128;
0: 
0:         /* Don't ever access these objects directly, call getParser(), and getTokenManager() */
0:         protected Object cachedParser; 
0: 	protected Object cachedTokenManager;
0: 
0: 	protected CharStream charStream;
0:         protected String SQLtext;
0: 
0:         protected final CompilerContext cc;
0: 
0: 	/**
0: 	 * Constructor for Parser
0: 	 */
0: 
0: 	public ParserImpl(CompilerContext cc)
0: 	{
0: 		this.cc = cc;
0: 	}
0: 
0: 	public QueryTreeNode parseStatement(String statementSQLText) 
0: 		throws StandardException
0: 	{
0: 		return parseStatement(statementSQLText, (Object[])null);
0: 	}
0: 
0:         /**
0: 	 * Returns a initialized (clean) TokenManager, paired w. the Parser in getParser,
0: 	 * Appropriate for this ParserImpl object.
0: 	 */
0:         protected Object getTokenManager()
0:         {
0: 	    /* returned a cached tokenmanager if already exists, otherwise create */
0: 	    SQLParserTokenManager tm = (SQLParserTokenManager) cachedTokenManager;
0: 	    if (tm == null) {
0: 		tm = new SQLParserTokenManager(charStream);
0: 		cachedTokenManager = tm;
0: 	    } else {
0: 		tm.ReInit(charStream);
0: 	    }
0: 	    return tm;
0: 	}
0: 
0:         /**
0: 	 * new parser, appropriate for the ParserImpl object.
0: 	 */
0:         protected Object getParser()
0:         {
0: 	    SQLParserTokenManager tm = (SQLParserTokenManager) getTokenManager();
0: 	    /* returned a cached Parser if already exists, otherwise create */
0: 	    SQLParser p = (SQLParser) cachedParser;
0: 	    if (p == null) {
0: 		p = new SQLParser(tm);
0: 		p.setCompilerContext(cc);
0: 		cachedParser = p;
0: 	    } else {
0: 		p.ReInit(tm);
0: 	    }
0: 	    return p;
0: 	}
0: 
0: 	/**
0: 	 * Parse a statement and return a query tree.  Implements the Parser
0: 	 * interface
0: 	 *
0: 	 * @param statementSQLTextThe	Statement to parse
0: 	 * @param paramDefaults	parameter defaults. Passed around as an array
0: 	 *                      of objects, but is really an array of StorableDataValues
0: 	 * @param topLevel	true if this is a top level statement, false if not (as in
0: 	 *                            create/copy publication target ddl)*
0: 	 * @return	A QueryTree representing the parsed statement
0: 	 *
0: 	 * @exception StandardException	Thrown on error
0: 	 */
0: 
0: 	public QueryTreeNode parseStatement(String statementSQLText, Object[] paramDefaults) 
0: 		throws StandardException
0: 	{
0: 
0: 		java.io.Reader sqlText = new java.io.StringReader(statementSQLText);
0: 
0: 		/* Get a char stream if we don't have one already */
0: 		if (charStream == null)
0: 		{
0: 			charStream = new UCode_CharStream(sqlText, 1, 1, LARGE_TOKEN_SIZE);
0: 		}
0: 		else
0: 		{
0: 			charStream.ReInit(sqlText, 1, 1, LARGE_TOKEN_SIZE);
0: 		}
0: 
0: 		/* remember the string that we're parsing */
0: 		SQLtext = statementSQLText;
0: 
0: 		/* Parse the statement, and return the QueryTree */
0: 		try
0: 		{
0: 		    return parseGoalProduction( statementSQLText, paramDefaults);
0: 		}
0: 		catch (ParseException e)
0: 		{
0: 		    throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, e.getMessage());
0: 		}
0: 		catch (TokenMgrError e)
0: 		{
0: 		    throw StandardException.newException(SQLState.LANG_LEXICAL_ERROR, e.getMessage());
0: 		}
0: 	}
0: 
0:         /**
0: 	 * Parse the goal production, e.g. "statement" for the normal SQL parser.
0: 	 *
0: 	 * @param statementSQLText The Statement to parse
0: 	 * @param paramDefaults	parameter defaults.  Passed around as an array
0: 	 *						of objects, but is really an array of StorableDataValues
0:          *
0: 	 * @return	A QueryTree representing the parsed statement
0: 	 *
0: 	 * @exception ParseException
0:          * @exception TokenMgrError
0:          */
0:         protected QueryTreeNode parseGoalProduction( String statementSQLText,
0:                                                    Object[] paramDefaults)
0:             throws ParseException, TokenMgrError, StandardException
0:         {
0: 	    SQLParser p = (SQLParser) getParser();
0: 	    return p.Statement( statementSQLText, paramDefaults);
0: 	} // End of parseGoalProduction
0: 
0: 	/**
0: 	 * Returns the current SQL text string that is being parsed.
0: 	 *
0: 	 * @return	Current SQL text string.
0: 	 *
0: 	 */
0: 	public	String		getSQLtext()
0: 	{	return	SQLtext; }
0: }
============================================================================