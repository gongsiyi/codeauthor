2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.TriggerEventActivator
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
7:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:503b49c: import java.util.ArrayList;
1:503b49c: import java.util.List;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:c69c8b0: import org.apache.derby.iapi.error.StandardException;
1:c69c8b0: 
1:51572c8: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:51572c8: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:c69c8b0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:c69c8b0: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1:c69c8b0: 
1:c69c8b0: import org.apache.derby.iapi.sql.Activation;
1:c69c8b0: 
1:c69c8b0: import org.apache.derby.iapi.jdbc.ConnectionContext;
1:c69c8b0: import org.apache.derby.catalog.UUID;
1:c69c8b0: 
1:c69c8b0: import java.util.Vector;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Responsible for firing a trigger or set of triggers
1:eac0369:  * based on an event.
1:eac0369:  */
1:c69c8b0: public class TriggerEventActivator
5:eac0369: {
1:eac0369: 	private LanguageConnectionContext		lcc; 
1:eac0369: 	private TriggerInfo 					triggerInfo; 
1:eac0369: 	private InternalTriggerExecutionContext	tec;
1:eac0369: 	private	GenericTriggerExecutor[][]		executors;
1:eac0369: 	private	Activation						activation;
1:eac0369: 	private	ConnectionContext				cc;
1:eac0369: 	private String							statementText;
1:eac0369: 	private int								dmlType;
1:eac0369: 	private UUID							tableId;
1:eac0369: 	private String							tableName;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Basic constructor
1:eac0369: 	 *
1:eac0369: 	 * @param lcc			the lcc
1:eac0369: 	 * @param triggerInfo	the trigger information 
1:eac0369: 	 * @param dmlType		Type of DML for which this trigger is being fired.
1:eac0369: 	 * @param activation	the activation.
1:eac0369: 	 * @param aiCounters	vector of ai counters 
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:801cf0d:     @SuppressWarnings("UseOfObsoleteCollectionType")
1:c69c8b0: 	public TriggerEventActivator
1:eac0369: 	(
1:eac0369: 		LanguageConnectionContext	lcc, 
1:eac0369: 		UUID						tableId,
1:eac0369: 		TriggerInfo 				triggerInfo,
1:eac0369: 		int							dmlType,
1:eac0369: 		Activation					activation,
1:801cf0d:         Vector<AutoincrementCounter> aiCounters
1:eac0369: 	) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (triggerInfo == null)
1:eac0369: 		{
1:eac0369: 			return;
4:eac0369: 		}
1:eac0369: 
1:eac0369: 		// extrapolate the table name from the triggerdescriptors
1:eac0369: 		tableName = triggerInfo.triggerArray[0].getTableDescriptor().getQualifiedName();
1:eac0369: 	
1:eac0369: 		this.lcc = lcc;
1:eac0369: 		this.activation = activation;
1:eac0369: 		this.tableId = tableId;
1:eac0369: 		this.dmlType = dmlType;
1:eac0369: 		this.triggerInfo = triggerInfo;
1:eac0369: 
2:eac0369: 		cc = (ConnectionContext)lcc.getContextManager().
2:eac0369: 									getContext(ConnectionContext.CONTEXT_ID);
1:624c7b7: 
1:eac0369: 		this.statementText = lcc.getStatementContext().getStatementText();
1:eac0369: 
1:eac0369: 		this.tec = ((GenericExecutionFactory)lcc.getLanguageConnectionFactory().getExecutionFactory()).
1:eac0369: 						getTriggerExecutionContext(
1:eac0369: 								lcc,
1:eac0369: 								cc,
1:eac0369: 								statementText,
1:eac0369: 								dmlType,
1:eac0369: 								tableId,	
2:eac0369: 								tableName, aiCounters
2:eac0369: 								);
1:eac0369: 
1:eac0369: 		setupExecutors(triggerInfo);
1:71c8e86: 	}
1:71c8e86: 
1:eac0369: 	/**
1:eac0369: 	 * Reopen the trigger activator.  Just creates a new trigger execution
1:eac0369: 	 * context.  Note that close() still must be called when you
1:eac0369: 	 * are done -- you cannot just do a reopen() w/o a first doing
1:eac0369: 	 * a close.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	void reopen() throws StandardException
1:71c8e86: 	{
1:eac0369: 		this.tec = ((GenericExecutionFactory)lcc.getLanguageConnectionFactory().getExecutionFactory()).
1:eac0369: 						getTriggerExecutionContext(
1:eac0369: 								lcc,
1:eac0369: 								cc,
1:eac0369: 								statementText,
1:eac0369: 								dmlType,
1:eac0369: 								tableId,	
1:801cf0d:                                 tableName,
1:801cf0d:                                 null);
1:eac0369: 		setupExecutors(triggerInfo);
1:eac0369: 	}
1:eac0369:     
1:eac0369: 	private void setupExecutors(TriggerInfo triggerInfo) throws StandardException
1:eac0369: 	{
1:eac0369: 		executors = new GenericTriggerExecutor[TriggerEvent.MAX_EVENTS][];
1:503b49c:         List<List<TriggerDescriptor>> executorLists =
1:503b49c:             new ArrayList<List<TriggerDescriptor>>(TriggerEvent.MAX_EVENTS);
1:eac0369: 		for (int i = 0; i < TriggerEvent.MAX_EVENTS; i++)
1:eac0369: 		{
1:503b49c:             executorLists.add(new ArrayList<TriggerDescriptor>());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		for (int i = 0; i < triggerInfo.triggerArray.length; i++)
1:eac0369: 		{
1:eac0369: 			TriggerDescriptor td = triggerInfo.triggerArray[i];
1:eac0369: 			switch (td.getTriggerEventMask())
1:eac0369: 			{
1:eac0369: 				case TriggerDescriptor.TRIGGER_EVENT_INSERT:
1:eac0369: 					if (td.isBeforeTrigger())
1:eac0369: 					{
1:503b49c:                         executorLists.get(TriggerEvent.BEFORE_INSERT).add(td);
1:eac0369: 					}
1:eac0369: 					else
1:eac0369: 					{
1:503b49c:                         executorLists.get(TriggerEvent.AFTER_INSERT).add(td);
1:eac0369: 					}
1:eac0369: 					break;
1:eac0369: 
1:eac0369: 
1:eac0369: 				case TriggerDescriptor.TRIGGER_EVENT_DELETE:
1:eac0369: 					if (td.isBeforeTrigger())
1:eac0369: 					{
1:503b49c:                         executorLists.get(TriggerEvent.BEFORE_DELETE).add(td);
1:eac0369: 					}
1:eac0369: 					else
1:eac0369: 					{
1:503b49c:                         executorLists.get(TriggerEvent.AFTER_DELETE).add(td);
1:eac0369: 					}
1:eac0369: 					break;
1:eac0369: 
1:eac0369: 				case TriggerDescriptor.TRIGGER_EVENT_UPDATE:
1:eac0369: 					if (td.isBeforeTrigger())
1:eac0369: 					{
1:503b49c:                         executorLists.get(TriggerEvent.BEFORE_UPDATE).add(td);
1:eac0369: 					}
1:eac0369: 					else
1:eac0369: 					{
1:503b49c:                         executorLists.get(TriggerEvent.AFTER_UPDATE).add(td);
1:eac0369: 					}
1:eac0369: 					break;
1:eac0369: 				default:
1:eac0369: 					if (SanityManager.DEBUG)
1:eac0369: 					{
1:eac0369: 						SanityManager.THROWASSERT("bad trigger event "+td.getTriggerEventMask());
1:eac0369: 					}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:503b49c:         for (int i = 0; i < executorLists.size(); i++)
1:eac0369: 		{
1:503b49c:             List<TriggerDescriptor> descriptors = executorLists.get(i);
1:503b49c:             int size = descriptors.size();
1:eac0369: 			if (size > 0)
1:eac0369: 			{
1:eac0369: 				executors[i] = new GenericTriggerExecutor[size];
1:eac0369: 				for (int j = 0; j < size; j++)
1:eac0369: 				{
1:503b49c:                     TriggerDescriptor td = descriptors.get(j);
1:eac0369: 					executors[i][j] =  (td.isRowTrigger()) ? 
1:eac0369: 								(GenericTriggerExecutor)new RowTriggerExecutor(tec, td, activation, lcc) :
1:eac0369: 								(GenericTriggerExecutor)new StatementTriggerExecutor(tec, td, activation, lcc);
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Handle the given event.
1:eac0369: 	 * 
1:eac0369: 	 * @param event	a trigger event
1:eac0369:  	 * @param brs the before result set.  Typically
1:eac0369: 	 * 		a TemporaryRowHolderResultSet but sometimes a
1:eac0369: 	 * 		BulkTableScanResultSet
1:eac0369:  	 * @param ars the after result set. Typically
1:eac0369: 	 * 		a TemporaryRowHolderResultSet but sometimes a
1:eac0369: 	 * 		BulkTableScanResultSet
1:d9d1bc8: 	 * @param colsReadFromTable   columns required from the trigger table
1:d9d1bc8: 	 *   by the triggering sql
1:eac0369: 	 *
1:eac0369:  	 * @exception StandardException on error
1:eac0369: 	 */
1:c69c8b0: 	public void notifyEvent
1:eac0369: 	(
1:eac0369: 		TriggerEvent 		event,
1:eac0369: 		CursorResultSet		brs,
1:d9d1bc8: 		CursorResultSet		ars,
1:d9d1bc8: 		int[]	colsReadFromTable
1:eac0369: 	) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (executors == null)
1:eac0369: 		{
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		int eventNumber = event.getNumber();
1:eac0369: 		if (executors[eventNumber] == null)
1:eac0369: 		{
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		tec.setCurrentTriggerEvent(event);
2:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			if (brs != null)
1:eac0369: 			{
1:eac0369: 				brs.open();
1:eac0369: 			}
1:eac0369: 			if (ars != null)
1:eac0369: 			{
1:eac0369: 				ars.open();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			lcc.pushExecutionStmtValidator(tec);
1:eac0369: 			for (int i = 0; i < executors[eventNumber].length; i++)
1:eac0369: 			{
1:eac0369: 				if (i > 0)
1:eac0369: 				{
1:eac0369: 					
1:eac0369: 					if (brs != null)
1:eac0369: 					{
1:eac0369: 						((NoPutResultSet)brs).reopenCore();
1:eac0369: 					}
1:eac0369: 					if (ars != null)
1:eac0369: 					{
1:eac0369: 						((NoPutResultSet)ars).reopenCore();
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 				// Reset the AI counters to the beginning before firing next
1:eac0369: 				// trigger. 
1:eac0369: 				tec.resetAICounters(true);				
1:d9d1bc8: 				executors[eventNumber][i].fireTrigger(event, brs, ars, colsReadFromTable);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		finally
1:eac0369: 		{
1:eac0369: 			lcc.popExecutionStmtValidator(tec);
1:eac0369: 			tec.clearCurrentTriggerEvent();
1:eac0369: 		}
1:eac0369: 	}	
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Clean up and release resources.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on unexpected error
1:eac0369: 	 */
1:c69c8b0: 	public void cleanup() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (tec != null)
1:eac0369: 		{
1:eac0369: 			tec.cleanup();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("UseOfObsoleteCollectionType")
/////////////////////////////////////////////////////////////////////////
1:         Vector<AutoincrementCounter> aiCounters
/////////////////////////////////////////////////////////////////////////
1:                                 tableName,
1:                                 null);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:503b49c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:         List<List<TriggerDescriptor>> executorLists =
1:             new ArrayList<List<TriggerDescriptor>>(TriggerEvent.MAX_EVENTS);
1:             executorLists.add(new ArrayList<TriggerDescriptor>());
/////////////////////////////////////////////////////////////////////////
1:                         executorLists.get(TriggerEvent.BEFORE_INSERT).add(td);
1:                         executorLists.get(TriggerEvent.AFTER_INSERT).add(td);
/////////////////////////////////////////////////////////////////////////
1:                         executorLists.get(TriggerEvent.BEFORE_DELETE).add(td);
1:                         executorLists.get(TriggerEvent.AFTER_DELETE).add(td);
1:                         executorLists.get(TriggerEvent.BEFORE_UPDATE).add(td);
1:                         executorLists.get(TriggerEvent.AFTER_UPDATE).add(td);
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < executorLists.size(); i++)
1:             List<TriggerDescriptor> descriptors = executorLists.get(i);
1:             int size = descriptors.size();
1:                     TriggerDescriptor td = descriptors.get(j);
commit:c67f5dd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c69c8b0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecRow; 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.impl.sql.execute.AutoincrementCounter;
0: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.jdbc.ConnectionContext;
1: import org.apache.derby.catalog.UUID;
1: 
1: import java.util.Vector;
0: import java.sql.SQLException;
1: public class TriggerEventActivator
0: 	private TransactionController 			tc; 
/////////////////////////////////////////////////////////////////////////
1: 	public TriggerEventActivator
/////////////////////////////////////////////////////////////////////////
0: 		this.tc = tc;
/////////////////////////////////////////////////////////////////////////
1: 	public void notifyEvent
/////////////////////////////////////////////////////////////////////////
1: 	public void cleanup() throws StandardException
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
0:     /** Perform the cast needed to a list of triggers from the executorLists */
0:     @SuppressWarnings("unchecked")
0:     private Vector<TriggerDescriptor>   getTriggers( int idx, Vector[] executorLists )
1:     {
0:         return (Vector<TriggerDescriptor>) executorLists[ idx ];
1:     }
1:     
0: 			executorLists[i] = new Vector<TriggerDescriptor>();
/////////////////////////////////////////////////////////////////////////
0: 						getTriggers( TriggerEvent.BEFORE_INSERT, executorLists ).addElement( td );
0: 						getTriggers( TriggerEvent.AFTER_INSERT, executorLists ).addElement( td );
/////////////////////////////////////////////////////////////////////////
0: 						getTriggers( TriggerEvent.BEFORE_DELETE, executorLists ).addElement( td );
0: 						getTriggers( TriggerEvent.AFTER_DELETE, executorLists ).addElement( td );
0: 						getTriggers( TriggerEvent.BEFORE_UPDATE, executorLists ).addElement( td );
0: 						getTriggers( TriggerEvent.AFTER_UPDATE, executorLists ).addElement( td );
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:d9d1bc8
/////////////////////////////////////////////////////////////////////////
1: 	 * @param colsReadFromTable   columns required from the trigger table
1: 	 *   by the triggering sql
/////////////////////////////////////////////////////////////////////////
1: 		CursorResultSet		ars,
1: 		int[]	colsReadFromTable
/////////////////////////////////////////////////////////////////////////
1: 				executors[eventNumber][i].fireTrigger(event, brs, ars, colsReadFromTable);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:51572c8
/////////////////////////////////////////////////////////////////////////
0: import java.util.Vector;
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.jdbc.ConnectionContext;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: class TriggerEventActivator
/////////////////////////////////////////////////////////////////////////
0: 	TriggerEventActivator
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	void notifyEvent
/////////////////////////////////////////////////////////////////////////
0: 	void cleanup() throws StandardException
commit:624c7b7
/////////////////////////////////////////////////////////////////////////
1: 
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.TriggerEventActivator
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow; 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.impl.sql.execute.AutoincrementCounter;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.jdbc.ConnectionContext;
0: import org.apache.derby.catalog.UUID;
1: 
0: import java.util.Vector;
0: import java.sql.SQLException;
1: 
1: /**
1:  * Responsible for firing a trigger or set of triggers
1:  * based on an event.
1:  */
0: public class TriggerEventActivator
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	private LanguageConnectionContext		lcc; 
0: 	private TransactionController 			tc; 
1: 	private TriggerInfo 					triggerInfo; 
1: 	private InternalTriggerExecutionContext	tec;
1: 	private	GenericTriggerExecutor[][]		executors;
1: 	private	Activation						activation;
1: 	private	ConnectionContext				cc;
1: 	private String							statementText;
1: 	private int								dmlType;
1: 	private UUID							tableId;
1: 	private String							tableName;
0: 	private Vector							aiCounters;
1: 
1: 	/**
1: 	 * Basic constructor
1: 	 *
1: 	 * @param lcc			the lcc
0: 	 * @param tc			the xact controller
1: 	 * @param triggerInfo	the trigger information 
1: 	 * @param dmlType		Type of DML for which this trigger is being fired.
1: 	 * @param activation	the activation.
1: 	 * @param aiCounters	vector of ai counters 
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
0: 	public TriggerEventActivator
1: 	(
1: 		LanguageConnectionContext	lcc, 
0: 		TransactionController 		tc, 
1: 		UUID						tableId,
1: 		TriggerInfo 				triggerInfo,
1: 		int							dmlType,
1: 		Activation					activation,
0: 		Vector						aiCounters
1: 	) throws StandardException
1: 	{
1: 		if (triggerInfo == null)
1: 		{
1: 			return;
1: 		}
1: 
1: 		// extrapolate the table name from the triggerdescriptors
1: 		tableName = triggerInfo.triggerArray[0].getTableDescriptor().getQualifiedName();
1: 	
1: 		this.lcc = lcc;
0: 		this.tc = tc;
1: 		this.activation = activation;
1: 		this.tableId = tableId;
1: 		this.dmlType = dmlType;
1: 		this.triggerInfo = triggerInfo;
1: 
1: 		cc = (ConnectionContext)lcc.getContextManager().
1: 									getContext(ConnectionContext.CONTEXT_ID);
1: 		/*
0: 		** During replication we may not have a connection context.
0: 		** in that case, we'll get a proxy connection that will
0: 		** push a connection context.  This looks really expensive
0: 		** but we'll probably need a jdbc connection anyway, so
0: 		** it is more or less unavoidable.
1: 		*/
0: 		if (cc == null)
1: 		{
0: 			java.sql.Connection conn;
1: 			try
1: 			{
0: 				conn = ((BaseActivation)activation).getCurrentConnection();
1: 				cc = (ConnectionContext)lcc.getContextManager().
1: 										getContext(ConnectionContext.CONTEXT_ID);
0: 			} catch (SQLException e)
1: 			{
0: 				throw StandardException.unexpectedUserException(e);
1: 			}
1: 		}
1: 		this.statementText = lcc.getStatementContext().getStatementText();
1: 
1: 		this.tec = ((GenericExecutionFactory)lcc.getLanguageConnectionFactory().getExecutionFactory()).
1: 						getTriggerExecutionContext(
1: 								lcc,
1: 								cc,
1: 								statementText,
1: 								dmlType,
0: 								triggerInfo.columnIds,					
0: 								triggerInfo.columnNames,
1: 								tableId,	
1: 								tableName, aiCounters
1: 								);
1: 
1: 		setupExecutors(triggerInfo);
1: 	}
1: 
1: 	/**
1: 	 * Reopen the trigger activator.  Just creates a new trigger execution
1: 	 * context.  Note that close() still must be called when you
1: 	 * are done -- you cannot just do a reopen() w/o a first doing
1: 	 * a close.
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	void reopen() throws StandardException
1: 	{
1: 		this.tec = ((GenericExecutionFactory)lcc.getLanguageConnectionFactory().getExecutionFactory()).
1: 						getTriggerExecutionContext(
1: 								lcc,
1: 								cc,
1: 								statementText,
1: 								dmlType,
0: 								triggerInfo.columnIds,					
0: 								triggerInfo.columnNames,
1: 								tableId,	
1: 								tableName, aiCounters
1: 								);
1: 		setupExecutors(triggerInfo);
1: 	}
1: 
1: 	private void setupExecutors(TriggerInfo triggerInfo) throws StandardException
1: 	{
1: 		executors = new GenericTriggerExecutor[TriggerEvent.MAX_EVENTS][];
0: 		Vector[] executorLists = new Vector[TriggerEvent.MAX_EVENTS];
1: 		for (int i = 0; i < TriggerEvent.MAX_EVENTS; i++)
1: 		{
0: 			executorLists[i] = new Vector();
1: 		}
1: 
1: 		for (int i = 0; i < triggerInfo.triggerArray.length; i++)
1: 		{
1: 			TriggerDescriptor td = triggerInfo.triggerArray[i];
1: 			switch (td.getTriggerEventMask())
1: 			{
1: 				case TriggerDescriptor.TRIGGER_EVENT_INSERT:
1: 					if (td.isBeforeTrigger())
1: 					{
0: 						executorLists[TriggerEvent.BEFORE_INSERT].addElement(td);
1: 					}
1: 					else
1: 					{
0: 						executorLists[TriggerEvent.AFTER_INSERT].addElement(td);
1: 					}
1: 					break;
1: 
1: 
1: 				case TriggerDescriptor.TRIGGER_EVENT_DELETE:
1: 					if (td.isBeforeTrigger())
1: 					{
0: 						executorLists[TriggerEvent.BEFORE_DELETE].addElement(td);
1: 					}
1: 					else
1: 					{
0: 						executorLists[TriggerEvent.AFTER_DELETE].addElement(td);
1: 					}
1: 					break;
1: 
1: 				case TriggerDescriptor.TRIGGER_EVENT_UPDATE:
1: 					if (td.isBeforeTrigger())
1: 					{
0: 						executorLists[TriggerEvent.BEFORE_UPDATE].addElement(td);
1: 					}
1: 					else
1: 					{
0: 						executorLists[TriggerEvent.AFTER_UPDATE].addElement(td);
1: 					}
1: 					break;
1: 				default:
1: 					if (SanityManager.DEBUG)
1: 					{
1: 						SanityManager.THROWASSERT("bad trigger event "+td.getTriggerEventMask());
1: 					}
1: 			}
1: 		}
1: 
0: 		for (int i = 0; i < executorLists.length; i++)
1: 		{
0: 			int size = executorLists[i].size();
1: 			if (size > 0)
1: 			{
1: 				executors[i] = new GenericTriggerExecutor[size];
1: 				for (int j = 0; j < size; j++)
1: 				{
0: 					TriggerDescriptor td = (TriggerDescriptor)executorLists[i].elementAt(j);
1: 					executors[i][j] =  (td.isRowTrigger()) ? 
1: 								(GenericTriggerExecutor)new RowTriggerExecutor(tec, td, activation, lcc) :
1: 								(GenericTriggerExecutor)new StatementTriggerExecutor(tec, td, activation, lcc);
1: 				}
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Handle the given event.
1: 	 * 
1: 	 * @param event	a trigger event
1:  	 * @param brs the before result set.  Typically
1: 	 * 		a TemporaryRowHolderResultSet but sometimes a
1: 	 * 		BulkTableScanResultSet
1:  	 * @param ars the after result set. Typically
1: 	 * 		a TemporaryRowHolderResultSet but sometimes a
1: 	 * 		BulkTableScanResultSet
1: 	 *
1:  	 * @exception StandardException on error
1: 	 */
0: 	public void notifyEvent
1: 	(
1: 		TriggerEvent 		event,
1: 		CursorResultSet		brs,
0: 		CursorResultSet		ars
1: 	) throws StandardException
1: 	{
1: 		if (executors == null)
1: 		{
1: 			return;
1: 		}
1: 
1: 		int eventNumber = event.getNumber();
1: 		if (executors[eventNumber] == null)
1: 		{
1: 			return;
1: 		}
1: 
1: 		tec.setCurrentTriggerEvent(event);
1: 		try
1: 		{
1: 			if (brs != null)
1: 			{
1: 				brs.open();
1: 			}
1: 			if (ars != null)
1: 			{
1: 				ars.open();
1: 			}
1: 
1: 			lcc.pushExecutionStmtValidator(tec);
1: 			for (int i = 0; i < executors[eventNumber].length; i++)
1: 			{
1: 				if (i > 0)
1: 				{
1: 					
1: 					if (brs != null)
1: 					{
1: 						((NoPutResultSet)brs).reopenCore();
1: 					}
1: 					if (ars != null)
1: 					{
1: 						((NoPutResultSet)ars).reopenCore();
1: 					}
1: 				}
1: 				// Reset the AI counters to the beginning before firing next
1: 				// trigger. 
1: 				tec.resetAICounters(true);				
0: 				executors[eventNumber][i].fireTrigger(event, brs, ars);
1: 			}
1: 		}
1: 		finally
1: 		{
1: 			lcc.popExecutionStmtValidator(tec);
1: 			tec.clearCurrentTriggerEvent();
1: 		}
1: 	}	
1: 	
1: 	/**
1: 	 * Clean up and release resources.
1: 	 *
1: 	 * @exception StandardException on unexpected error
1: 	 */
0: 	public void cleanup() throws StandardException
1: 	{
1: 		if (tec != null)
1: 		{
1: 			tec.cleanup();
1: 		}
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow; 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.impl.sql.execute.AutoincrementCounter;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.jdbc.ConnectionContext;
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.util.Vector;
0: import java.sql.SQLException;
0: 
0: /**
0:  * Responsible for firing a trigger or set of triggers
0:  * based on an event.
0:  */
0: public class TriggerEventActivator
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private LanguageConnectionContext		lcc; 
0: 	private TransactionController 			tc; 
0: 	private TriggerInfo 					triggerInfo; 
0: 	private InternalTriggerExecutionContext	tec;
0: 	private	GenericTriggerExecutor[][]		executors;
0: 	private	Activation						activation;
0: 	private	ConnectionContext				cc;
0: 	private String							statementText;
0: 	private int								dmlType;
0: 	private UUID							tableId;
0: 	private String							tableName;
0: 	private Vector							aiCounters;
0: 
0: 	/**
0: 	 * Basic constructor
0: 	 *
0: 	 * @param lcc			the lcc
0: 	 * @param tc			the xact controller
0: 	 * @param triggerInfo	the trigger information 
0: 	 * @param dmlType		Type of DML for which this trigger is being fired.
0: 	 * @param activation	the activation.
0: 	 * @param aiCounters	vector of ai counters 
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public TriggerEventActivator
0: 	(
0: 		LanguageConnectionContext	lcc, 
0: 		TransactionController 		tc, 
0: 		UUID						tableId,
0: 		TriggerInfo 				triggerInfo,
0: 		int							dmlType,
0: 		Activation					activation,
0: 		Vector						aiCounters
0: 	) throws StandardException
0: 	{
0: 		if (triggerInfo == null)
0: 		{
0: 			return;
0: 		}
0: 
0: 		// extrapolate the table name from the triggerdescriptors
0: 		tableName = triggerInfo.triggerArray[0].getTableDescriptor().getQualifiedName();
0: 	
0: 		this.lcc = lcc;
0: 		this.tc = tc;
0: 		this.activation = activation;
0: 		this.tableId = tableId;
0: 		this.dmlType = dmlType;
0: 		this.triggerInfo = triggerInfo;
0: 
0: 		cc = (ConnectionContext)lcc.getContextManager().
0: 									getContext(ConnectionContext.CONTEXT_ID);
0: 		/*
0: 		** During replication we may not have a connection context.
0: 		** in that case, we'll get a proxy connection that will
0: 		** push a connection context.  This looks really expensive
0: 		** but we'll probably need a jdbc connection anyway, so
0: 		** it is more or less unavoidable.
0: 		*/
0: 		if (cc == null)
0: 		{
0: 			java.sql.Connection conn;
0: 			try
0: 			{
0: 				conn = ((BaseActivation)activation).getCurrentConnection();
0: 				cc = (ConnectionContext)lcc.getContextManager().
0: 										getContext(ConnectionContext.CONTEXT_ID);
0: 			} catch (SQLException e)
0: 			{
0: 				throw StandardException.unexpectedUserException(e);
0: 			}
0: 		}
0: 		this.statementText = lcc.getStatementContext().getStatementText();
0: 
0: 		this.tec = ((GenericExecutionFactory)lcc.getLanguageConnectionFactory().getExecutionFactory()).
0: 						getTriggerExecutionContext(
0: 								lcc,
0: 								cc,
0: 								statementText,
0: 								dmlType,
0: 								triggerInfo.columnIds,					
0: 								triggerInfo.columnNames,
0: 								tableId,	
0: 								tableName, aiCounters
0: 								);
0: 
0: 		setupExecutors(triggerInfo);
0: 	}
0: 
0: 	/**
0: 	 * Reopen the trigger activator.  Just creates a new trigger execution
0: 	 * context.  Note that close() still must be called when you
0: 	 * are done -- you cannot just do a reopen() w/o a first doing
0: 	 * a close.
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	void reopen() throws StandardException
0: 	{
0: 		this.tec = ((GenericExecutionFactory)lcc.getLanguageConnectionFactory().getExecutionFactory()).
0: 						getTriggerExecutionContext(
0: 								lcc,
0: 								cc,
0: 								statementText,
0: 								dmlType,
0: 								triggerInfo.columnIds,					
0: 								triggerInfo.columnNames,
0: 								tableId,	
0: 								tableName, aiCounters
0: 								);
0: 		setupExecutors(triggerInfo);
0: 	}
0: 
0: 	private void setupExecutors(TriggerInfo triggerInfo) throws StandardException
0: 	{
0: 		executors = new GenericTriggerExecutor[TriggerEvent.MAX_EVENTS][];
0: 		Vector[] executorLists = new Vector[TriggerEvent.MAX_EVENTS];
0: 		for (int i = 0; i < TriggerEvent.MAX_EVENTS; i++)
0: 		{
0: 			executorLists[i] = new Vector();
0: 		}
0: 
0: 		for (int i = 0; i < triggerInfo.triggerArray.length; i++)
0: 		{
0: 			TriggerDescriptor td = triggerInfo.triggerArray[i];
0: 			switch (td.getTriggerEventMask())
0: 			{
0: 				case TriggerDescriptor.TRIGGER_EVENT_INSERT:
0: 					if (td.isBeforeTrigger())
0: 					{
0: 						executorLists[TriggerEvent.BEFORE_INSERT].addElement(td);
0: 					}
0: 					else
0: 					{
0: 						executorLists[TriggerEvent.AFTER_INSERT].addElement(td);
0: 					}
0: 					break;
0: 
0: 
0: 				case TriggerDescriptor.TRIGGER_EVENT_DELETE:
0: 					if (td.isBeforeTrigger())
0: 					{
0: 						executorLists[TriggerEvent.BEFORE_DELETE].addElement(td);
0: 					}
0: 					else
0: 					{
0: 						executorLists[TriggerEvent.AFTER_DELETE].addElement(td);
0: 					}
0: 					break;
0: 
0: 				case TriggerDescriptor.TRIGGER_EVENT_UPDATE:
0: 					if (td.isBeforeTrigger())
0: 					{
0: 						executorLists[TriggerEvent.BEFORE_UPDATE].addElement(td);
0: 					}
0: 					else
0: 					{
0: 						executorLists[TriggerEvent.AFTER_UPDATE].addElement(td);
0: 					}
0: 					break;
0: 				default:
0: 					if (SanityManager.DEBUG)
0: 					{
0: 						SanityManager.THROWASSERT("bad trigger event "+td.getTriggerEventMask());
0: 					}
0: 			}
0: 		}
0: 
0: 		for (int i = 0; i < executorLists.length; i++)
0: 		{
0: 			int size = executorLists[i].size();
0: 			if (size > 0)
0: 			{
0: 				executors[i] = new GenericTriggerExecutor[size];
0: 				for (int j = 0; j < size; j++)
0: 				{
0: 					TriggerDescriptor td = (TriggerDescriptor)executorLists[i].elementAt(j);
0: 					executors[i][j] =  (td.isRowTrigger()) ? 
0: 								(GenericTriggerExecutor)new RowTriggerExecutor(tec, td, activation, lcc) :
0: 								(GenericTriggerExecutor)new StatementTriggerExecutor(tec, td, activation, lcc);
0: 				}
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Handle the given event.
0: 	 * 
0: 	 * @param event	a trigger event
0:  	 * @param brs the before result set.  Typically
0: 	 * 		a TemporaryRowHolderResultSet but sometimes a
0: 	 * 		BulkTableScanResultSet
0:  	 * @param ars the after result set. Typically
0: 	 * 		a TemporaryRowHolderResultSet but sometimes a
0: 	 * 		BulkTableScanResultSet
0: 	 *
0:  	 * @exception StandardException on error
0: 	 */
0: 	public void notifyEvent
0: 	(
0: 		TriggerEvent 		event,
0: 		CursorResultSet		brs,
0: 		CursorResultSet		ars
0: 	) throws StandardException
0: 	{
0: 		if (executors == null)
0: 		{
0: 			return;
0: 		}
0: 
0: 		int eventNumber = event.getNumber();
0: 		if (executors[eventNumber] == null)
0: 		{
0: 			return;
0: 		}
0: 
0: 		tec.setCurrentTriggerEvent(event);
0: 		try
0: 		{
0: 			if (brs != null)
0: 			{
0: 				brs.open();
0: 			}
0: 			if (ars != null)
0: 			{
0: 				ars.open();
0: 			}
0: 
0: 			lcc.pushExecutionStmtValidator(tec);
0: 			for (int i = 0; i < executors[eventNumber].length; i++)
0: 			{
0: 				if (i > 0)
0: 				{
0: 					
0: 					if (brs != null)
0: 					{
0: 						((NoPutResultSet)brs).reopenCore();
0: 					}
0: 					if (ars != null)
0: 					{
0: 						((NoPutResultSet)ars).reopenCore();
0: 					}
0: 				}
0: 				// Reset the AI counters to the beginning before firing next
0: 				// trigger. 
0: 				tec.resetAICounters(true);				
0: 				executors[eventNumber][i].fireTrigger(event, brs, ars);
0: 			}
0: 		}
0: 		finally
0: 		{
0: 			lcc.popExecutionStmtValidator(tec);
0: 			tec.clearCurrentTriggerEvent();
0: 		}
0: 	}	
0: 	
0: 	/**
0: 	 * Clean up and release resources.
0: 	 *
0: 	 * @exception StandardException on unexpected error
0: 	 */
0: 	public void cleanup() throws StandardException
0: 	{
0: 		if (tec != null)
0: 		{
0: 			tec.cleanup();
0: 		}
0: 	}
0: }
============================================================================