1:8badf99: /*
34:8badf99: 
1:8badf99:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.BootLockTest
1:8badf99: 
1:8badf99:    Licensed to the Apache Software Foundation (ASF) under one or more
1:8badf99:    contributor license agreements.  See the NOTICE file distributed with
1:8badf99:    this work for additional information regarding copyright ownership.
1:8badf99:    The ASF licenses this file to You under the Apache License, Version 2.0
1:8badf99:    (the "License"); you may not use this file except in compliance with
1:8badf99:    the License.  You may obtain a copy of the License at
1:8badf99: 
1:8badf99:       http://www.apache.org/licenses/LICENSE-2.0
1:8badf99: 
1:8badf99:    Unless required by applicable law or agreed to in writing, software
1:8badf99:    distributed under the License is distributed on an "AS IS" BASIS,
1:8badf99:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8badf99:    See the License for the specific language governing permissions and
1:8badf99:    limitations under the License.
1:8badf99: 
1:8badf99:  */
1:8badf99: package org.apache.derbyTesting.functionTests.tests.store;
1:8badf99: 
1:8badf99: import java.io.BufferedReader;
1:1ae02c9: import java.io.File;
1:8badf99: import java.io.InputStreamReader;
1:8badf99: import java.sql.Connection;
1:8badf99: import java.sql.SQLException;
1:6c65c08: import java.util.Properties;
1:8badf99: import junit.framework.Test;
1:8badf99: import org.apache.derby.iapi.store.raw.data.DataFactory;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.JDBC;
1:1ae02c9: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:8badf99: 
1:8badf99: /**
1:6e93048:  * Testing file locks that prevent Derby "double boot" a.k.a "dual boot",
1:6e93048:  * i.e. two VMs booting a database concurrently, a disaster scenario.
1:8badf99:  * <p/>
1:6e93048:  * For phoneME, test that the property {@code
1:8badf99:  * derby.database.forceDatabaseLock} protects us.
1:8badf99:  * <p/>
1:8badf99:  * FIXME: If DERBY-4646 is fixed, the special handling for phoneME
1:8badf99:  * should be removed.
1:8badf99:  */
1:8badf99: 
1:8badf99: public class BootLockTest extends BaseJDBCTestCase {
1:8badf99: 
1:8badf99:     private final static String dbName = "BootLockTestDB";
1:c8bb7d7:     private final static String dbDir = DEFAULT_DB_DIR + File.separator + dbName;
1:414ba6f:     public static String minionCompleteFileName = BootLockTest.dbDir + 
1:414ba6f:         File.separator + "minionComplete";
1:c8bb7d7:     private final static String dbLockFile = dbDir + File.separator +
1:c8bb7d7:     DataFactory.DB_LOCKFILE_NAME;
1:c8bb7d7:     private final static String dbExLockFile = dbDir + File.separator +
1:c8bb7d7:     DataFactory.DB_EX_LOCKFILE_NAME;
1:b976fd8:     private final static String servicePropertiesFileName = dbDir + File.separator + "service.properties";
1:8badf99:     
1:8badf99:     private static String[] cmd = new String[]{
1:8badf99:         "org.apache.derbyTesting.functionTests.tests.store.BootLockMinion",
1:a946353:         dbName,
1:8badf99:     };
1:8badf99: 
1:8badf99:     private final static String DATA_MULTIPLE_JBMS_ON_DB = "XSDB6";
1:8badf99:     private final static String DATA_MULTIPLE_JBMS_FORCE_LOCK = "XSDB8";
1:e9f4ad9:     // Ten minutes should hopefully be enough!
1:e9f4ad9:     public static final int MINION_WAIT_MAX_MILLIS = 600000;
1:8badf99: 
1:8badf99:     /**
1:8badf99:      * Constructor
1:8badf99:      *
1:8badf99:      * @param name
1:8badf99:      */
1:8badf99:     public BootLockTest(String name) {
1:8badf99:         super(name);
6:8badf99:     }
1:8badf99: 
1:8badf99:     /**
1:6e93048:      * Creates a suite.
1:8badf99:      *
1:6e93048:      * @return The test suite
1:8badf99:      */
1:8badf99:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("BootLockTest");
1:8badf99:         suite.addTest(decorateTest());
2:8badf99:         return suite;
1:8badf99:     }
1:8badf99: 
1:8badf99: 
1:8badf99:     /**
1:8badf99:      * Decorate test with singleUseDatabaseDecorator and noSecurityManager.
1:8badf99:      *
1:8badf99:      * @return the decorated test
1:8badf99:      */
1:8badf99:     private static Test decorateTest() {
1:8badf99: 
1:1ae02c9:         Test test = new BaseTestSuite(BootLockTest.class);
1:8badf99: 
1:ce62de6:         if (JDBC.vmSupportsJSR169() && !isJ9Platform()) {
1:ce62de6:             // PhoneME requires forceDatabaseLock
1:6c65c08:             Properties props = new Properties();
1:6c65c08:             props.setProperty("derby.database.forceDatabaseLock", "true");
1:6c65c08:             test = new SystemPropertyTestSetup(test, props, true);
1:6c65c08:         }
1:6c65c08: 
1:8badf99:         test = TestConfiguration.singleUseDatabaseDecorator(test, dbName);
1:8badf99: 
1:8badf99:         test = SecurityManagerSetup.noSecurityManager(test);
1:8badf99: 
1:8badf99:         return test;
1:8badf99:     }
1:8badf99: 
1:8badf99: 
1:8badf99:     public void testBootLock() throws Exception {
1:8badf99: 
1:8badf99:         Process p = null;
1:8badf99: 
1:8badf99:         p = execJavaCmd(cmd);
1:e9f4ad9:         waitForMinionBoot(p,MINION_WAIT_MAX_MILLIS);
1:8badf99: 
1:8badf99:         // We now know minion has booted
1:8badf99: 
1:8badf99:         try {
1:8badf99:             Connection c = getConnection();
1:8badf99:             fail("Dual boot not detected: check BootLockMinion.log");
1:8badf99:         } catch (SQLException e) {
1:ce62de6:             if (JDBC.vmSupportsJSR169() && !isJ9Platform()) {
1:ce62de6:                 // For PhoneME force database lock required
1:8badf99:                 assertSQLState(
1:8badf99:                         "Dual boot not detected: check BootLockMinion.log",
1:8badf99:                         DATA_MULTIPLE_JBMS_FORCE_LOCK,
1:8badf99:                         e);
2:8badf99:             } else {
1:8badf99:                 assertSQLState(
1:8badf99:                         "Dual boot not detected: check BootLockMinion.log",
1:8badf99:                         DATA_MULTIPLE_JBMS_ON_DB,
1:8badf99:                         e);
1:8badf99:             }
1:8badf99:         }
1:c8bb7d7:         finally {
1:c8bb7d7:             if (p!= null) {
2:8badf99:                 p.destroy();
2:8badf99:                 p.waitFor();
1:8badf99:             }
1:8badf99:         }
1:8badf99:         // Since all went OK, no need to keep the minion log file.
1:a946353:         File minionLog = new File(DEFAULT_DB_DIR, "BootLockMinion.log");
1:8badf99:         assertTrue(minionLog.delete());
1:8badf99: 
1:6c65c08:         if (JDBC.vmSupportsJSR169()) {
1:8badf99:             // Delete lock files so JUnit machinery can clean up the
1:8badf99:             // one-off database without further warnings on System.err
1:8badf99:             // (phoneMe).
1:c8bb7d7:             File db_lockfile_name = new File(dbLockFile);                    
1:0c7cea7: 
1:c8bb7d7:             File db_ex_lockfile_name = new File(dbExLockFile);                    
1:8badf99: 
1:8badf99:             db_lockfile_name.delete();
1:8badf99:             db_ex_lockfile_name.delete();
1:8badf99:         }
1:8badf99:     }
1:8badf99: 
1:c8bb7d7:     private void waitForMinionBoot(Process p, int waitmillis) throws InterruptedException {
1:e9f4ad9:         boolean minionComplete;
1:e9f4ad9:         int minionExitValue;
1:8badf99:         StringBuffer failmsg = new StringBuffer();
1:c8bb7d7:         // boolean set to true once we find the  lock file
1:c8bb7d7:         File lockFile = new File(dbLockFile);
1:b976fd8:         File servicePropertiesFile = new File(servicePropertiesFileName);
1:8badf99:         // Attempt to catch any errors happening in minion for better test
1:8badf99:         // diagnosis.
1:c8bb7d7:         BufferedReader minionSysErr = new BufferedReader(
1:8badf99:             new InputStreamReader(p.getErrorStream()));
1:8badf99:         String minionErrLine= null ;
1:414ba6f:         File checkFile = new File(minionCompleteFileName);
1:e9f4ad9:         do {
1:414ba6f:             if (checkFile.exists()) { 
1:414ba6f:                 //The checkFile was created by BootLockMinion when we were
1:414ba6f:                 //sure it was finished with creating the database and making 
1:414ba6f:                 //the connection. It will get cleaned up with the database.
1:b976fd8:                 return;
1:8badf99:             }
1:c8bb7d7:             // otherwise sleep for a second and try again
1:c8bb7d7:             waitmillis -= 1000;
1:8badf99:             try {
1:c8bb7d7:                 Thread.sleep(1000);
1:c8bb7d7:             } catch (InterruptedException e) {
1:c8bb7d7:                 fail(e.getMessage());
1:8badf99:             }
1:c8bb7d7:         } while (waitmillis > 0);
1:8badf99:         
1:c8bb7d7:         // If we got here, the database did not boot. Try to print the error.
1:8badf99:         failmsg.append(
1:e9f4ad9:                 "Minion did not start or boot db in " +
1:e9f4ad9:                 (MINION_WAIT_MAX_MILLIS/1000) +
1:e9f4ad9:                 " seconds.\n");                
1:8badf99:         try {
1:e9f4ad9:             minionExitValue = p.exitValue();
1:e9f4ad9:             minionComplete =true;
1:e9f4ad9:             failmsg.append("exitValue = " + minionExitValue);
1:e9f4ad9:         }catch (IllegalThreadStateException e )
1:e9f4ad9:         {
1:e9f4ad9:             // got exception on exitValue.
1:e9f4ad9:             // still running ..
1:e9f4ad9:             minionComplete=false;
1:8badf99:         }
1:e9f4ad9:         // If the process exited try to print why.
1:e9f4ad9:         if (minionComplete) {
1:e9f4ad9:             failmsg.append("----Process exited. Minion's stderr:\n");
1:8badf99:             do {
1:8badf99:                 try {
1:8badf99:                     minionErrLine = minionSysErr.readLine();
1:8badf99:                 } catch (Exception ioe) {
1:8badf99:                     // may not always work, so just bail out.
1:8badf99:                     failmsg.append("could not read minion's stderr");
1:8badf99:                 }
1:8badf99: 
1:8badf99:                 if (minionErrLine != null) {
1:8badf99:                     failmsg.append(minionErrLine);
1:8badf99:                 }
1:8badf99:             } while (minionErrLine != null);
1:8badf99: 
1:8badf99:             failmsg.append("\n----Minion's stderr ended");
1:8badf99:         }
1:8badf99:         
1:8badf99:         p.destroy();
1:8badf99:         p.waitFor();
1:8badf99:         fail(failmsg.toString());
1:8badf99:     }
1:8badf99: 
1:8badf99: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a946353
/////////////////////////////////////////////////////////////////////////
1:         dbName,
/////////////////////////////////////////////////////////////////////////
1:         File minionLog = new File(DEFAULT_DB_DIR, "BootLockMinion.log");
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("BootLockTest");
/////////////////////////////////////////////////////////////////////////
1:         Test test = new BaseTestSuite(BootLockTest.class);
commit:6c65c08
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJSR169()) {
1:             Properties props = new Properties();
1:             props.setProperty("derby.database.forceDatabaseLock", "true");
1:             test = new SystemPropertyTestSetup(test, props, true);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
commit:0c7cea7
/////////////////////////////////////////////////////////////////////////
0:             // Can't use the DatabasePropertyTestSetup.singleProperty, since
0:             // that method sets a database property (not a system property),
0:             // and the minion is the one creating the database here. An
0:             // alternative would be to let minion set it.
1: 
commit:6e93048
/////////////////////////////////////////////////////////////////////////
1:  * Testing file locks that prevent Derby "double boot" a.k.a "dual boot",
1:  * i.e. two VMs booting a database concurrently, a disaster scenario.
1:  * For phoneME, test that the property {@code
/////////////////////////////////////////////////////////////////////////
1:      * Creates a suite.
1:      * @return The test suite
/////////////////////////////////////////////////////////////////////////
0:             // Create a socket so we know when the minion has booted the db.
0:             // Since we run this test only in embedded mode, (re)use derby
0:             // server port.
0:             parentService.setSoTimeout(60000); // maximally we wait 60s
commit:8badf99
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.BootLockTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
0: import java.io.File;
1: import java.io.BufferedReader;
1: import java.io.InputStreamReader;
0: import java.lang.Integer;
1: import java.sql.Connection;
1: import java.sql.SQLException;
0: import java.net.SocketTimeoutException;
0: import java.net.ServerSocket;
0: import java.net.Socket;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.BaseTestCase;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: 
1: import org.apache.derby.iapi.store.raw.data.DataFactory;
1: 
1: /**
0:  * Testing for FileLocks that prevent Derby Double Boot.
1:  * <p/>
0:  * For Sun phoneME, test that the property {@code
1:  * derby.database.forceDatabaseLock} protects us.
1:  * <p/>
1:  * FIXME: If DERBY-4646 is fixed, the special handling for phoneME
1:  * should be removed.
1:  */
1: 
1: public class BootLockTest extends BaseJDBCTestCase {
1: 
1:     private final static String dbName = "BootLockTestDB";
1: 
1:     private static String[] cmd = new String[]{
1:         "org.apache.derbyTesting.functionTests.tests.store.BootLockMinion",
0:         DEFAULT_DB_DIR + File.separator + dbName,
0:         ""
1:     };
1: 
1:     private final static String DATA_MULTIPLE_JBMS_ON_DB = "XSDB6";
1:     private final static String DATA_MULTIPLE_JBMS_FORCE_LOCK = "XSDB8";
1: 
1:     /**
1:      * Constructor
1:      *
1:      * @param name
1:      */
1:     public BootLockTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
0:      * Creates a suite with two testcases, with and without some extra
0:      * system properties.
1:      *
0:      * @return The test suite with both English and German locales.
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("BootLockTest");
1: 
0:         if (BaseTestCase.isJ9Platform()) {
0:             // forking currently not working, cf. DERBY-4179.
1:             return suite;
1:         }
1: 
1:         suite.addTest(decorateTest());
1:         return suite;
1:     }
1: 
1: 
1:     /**
1:      * Decorate test with singleUseDatabaseDecorator and noSecurityManager.
1:      *
1:      * @return the decorated test
1:      */
1:     private static Test decorateTest() {
1: 
0:         Test test = new TestSuite(BootLockTest.class);
1: 
1:         test = TestConfiguration.singleUseDatabaseDecorator(test, dbName);
1: 
1:         test = SecurityManagerSetup.noSecurityManager(test);
1: 
1:         return test;
1:     }
1: 
0:     String oldPropValue = null;
1: 
0:     protected void setUp() throws Exception {
1: 
0:         super.setUp();
1: 
0:         // For phoneMe, we won't see DATA_MULTIPLE_JBMS_ON_DB, but instead we
0:         // can check that we get DATA_MULTIPLE_JBMS_FORCE_LOCK if we set
0:         // derby.database.forceDatabaseLock.
1: 
0:         // FIXME: I tried to use the DatabasePropertyTestSetup.singleProperty,
0:         // but for some reason it failed to do the job, no matter where in the
0:         // decorator stack in decorateTest I placed it. Should be investigated
0:         // so this manual set/reset code of the property can be removed.
1: 
0:         if (JDBC.vmSupportsJSR169()) {
0:             oldPropValue =
0:                 System.getProperty("derby.database.forceDatabaseLock");
0:             System.setProperty("derby.database.forceDatabaseLock", "true");
1:         }
1:     }
1: 
1: 
0:     protected void tearDown() throws Exception {
1: 
0:         if (JDBC.vmSupportsJSR169()) {
1: 
0:             if (oldPropValue != null) {
0:                 System.setProperty("derby.database.forceDatabaseLock",
0:                                    oldPropValue);
1:             } else {
0:                 // FIXME: Java 1.5 only: improve code when we move to that
0:                 // source level.
0:                 // System.clearProperty("derby.database.forceDatabaseLock");
0:                 System.setProperty("derby.database.forceDatabaseLock",
0:                                    "false");
1:             }
1: 
1: 
1:         }
1: 
0:         super.tearDown();
1:     }
1: 
1: 
1:     public void testBootLock() throws Exception {
1: 
0:         ServerSocket parentService = null;
0:         Socket clientSocket = null;
0:         BufferedReader minionSysErr = null;
1:         Process p = null;
1: 
1:         try {
0:             int port = TestConfiguration.getCurrent().getPort();
0:             cmd[2] = (new Integer(port)).toString();
1: 
1:             p = execJavaCmd(cmd);
1: 
1:             // Attempt to catch any errors happening in minion for better test
1:             // diagnosis.
0:             minionSysErr = new BufferedReader(
1:                 new InputStreamReader(p.getErrorStream()));
1: 
0:             // Create a socket so we know when subprogram has booted.  Since we
0:             // run this test only in embedded mode, (re)use derby server port.
0:             parentService = new ServerSocket(port);
0:             parentService.setSoTimeout(60000); // max we wait is 60s
1: 
1:             try {
1: 
0:                 clientSocket = parentService.accept();
1: 
0:             } catch (SocketTimeoutException e) {
1:                 p.destroy();
1:                 p.waitFor();
1: 
1:                 StringBuffer failmsg = new StringBuffer();
1:                 failmsg.append(
0:                     "Minion did not start or boot db in 60 seconds.\n" +
0:                     "----Minion's stderr:\n");
1: 
1:                 String minionErrLine= null ;
1:                 do {
1:                     try {
1:                         minionErrLine = minionSysErr.readLine();
1:                     } catch (Exception ioe) {
1:                         // may not always work, so just bail out.
1:                         failmsg.append("could not read minion's stderr");
1:                     }
1: 
1:                     if (minionErrLine != null) {
1:                         failmsg.append(minionErrLine);
1:                     }
1:                 } while (minionErrLine != null);
1: 
1:                 failmsg.append("\n----Minion's stderr ended");
1: 
1:                 fail(failmsg.toString());
1:             }
1: 
1:             // We now know minion has booted
1: 
1: 
1:             try {
1:                 Connection c = getConnection();
1:                 fail("Dual boot not detected: check BootLockMinion.log");
1:             } catch (SQLException e) {
0:                 if (JDBC.vmSupportsJSR169()) {
1:                     assertSQLState(
1:                         "Dual boot not detected: check BootLockMinion.log",
1:                         DATA_MULTIPLE_JBMS_FORCE_LOCK,
1:                         e);
1:                 } else {
1:                     assertSQLState(
1:                         "Dual boot not detected: check BootLockMinion.log",
1:                         DATA_MULTIPLE_JBMS_ON_DB,
1:                         e);
1:                 }
1:             }
1: 
1:             p.destroy();
1:             p.waitFor();
1: 
1:             // Since all went OK, no need to keep the minion log file.
0:             File minionLog = new File("BootLockMinion.log");
1:             assertTrue(minionLog.delete());
1: 
0:         } finally {
0:             // Make sure we free up any socket resources
0:             if (clientSocket != null) {
0:                 clientSocket.close();
1:             }
1: 
0:             if (parentService != null) {
0:                 parentService.close();
1:             }
1: 
0:             if (minionSysErr != null) {
0:                 minionSysErr.close();
1:             }
1: 
0:             // Get rid of minion in case test fails, otherwise redundant.
0:             if (p != null) {
1:                 p.destroy();
1:                 p.waitFor();
1:             }
1: 
1: 
0:             if (JDBC.vmSupportsJSR169()) {
1:                 // Delete lock files so JUnit machinery can clean up the
1:                 // one-off database without further warnings on System.err
1:                 // (phoneMe).
0:                 File db_lockfile_name = new File(
0:                     DEFAULT_DB_DIR + File.separator +
0:                     dbName + File.separator +
0:                     DataFactory.DB_LOCKFILE_NAME);
1: 
0:                 File db_ex_lockfile_name = new File(
0:                     DEFAULT_DB_DIR + File.separator +
0:                     dbName + File.separator +
0:                     DataFactory.DB_EX_LOCKFILE_NAME);
1: 
1:                 db_lockfile_name.delete();
1:                 db_ex_lockfile_name.delete();
1:             }
1:         }
1:     }
1: 
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:ce62de6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJSR169() && !isJ9Platform()) {
1:             // PhoneME requires forceDatabaseLock
/////////////////////////////////////////////////////////////////////////
1:             if (JDBC.vmSupportsJSR169() && !isJ9Platform()) {
1:                 // For PhoneME force database lock required
commit:e9f4ad9
/////////////////////////////////////////////////////////////////////////
1:     // Ten minutes should hopefully be enough!
1:     public static final int MINION_WAIT_MAX_MILLIS = 600000;
/////////////////////////////////////////////////////////////////////////
1:         waitForMinionBoot(p,MINION_WAIT_MAX_MILLIS);
/////////////////////////////////////////////////////////////////////////
1:         boolean minionComplete;
1:         int minionExitValue;
/////////////////////////////////////////////////////////////////////////
1:                 "Minion did not start or boot db in " +
1:                 (MINION_WAIT_MAX_MILLIS/1000) +
1:                 " seconds.\n");                
0:         try {
1:             minionExitValue = p.exitValue();
1:             minionComplete =true;
1:             failmsg.append("exitValue = " + minionExitValue);
1:         }catch (IllegalThreadStateException e )
1:         {
1:             // got exception on exitValue.
1:             // still running ..
1:             minionComplete=false;
0:         }
1:         // If the process exited try to print why.
1:         if (minionComplete) {
1:             failmsg.append("----Process exited. Minion's stderr:\n");
1:             do {
0:                 try {
0:                     minionErrLine = minionSysErr.readLine();
0:                 } catch (Exception ioe) {
0:                     // may not always work, so just bail out.
0:                     failmsg.append("could not read minion's stderr");
0:                 }
0:                 if (minionErrLine != null) {
0:                     failmsg.append(minionErrLine);
0:                 }
0:             } while (minionErrLine != null);
0:             failmsg.append("\n----Minion's stderr ended");
0:         }
0:         
commit:414ba6f
/////////////////////////////////////////////////////////////////////////
1:     public static String minionCompleteFileName = BootLockTest.dbDir + 
1:         File.separator + "minionComplete";
/////////////////////////////////////////////////////////////////////////
1:         File checkFile = new File(minionCompleteFileName);
1:             if (checkFile.exists()) { 
1:                 //The checkFile was created by BootLockMinion when we were
1:                 //sure it was finished with creating the database and making 
1:                 //the connection. It will get cleaned up with the database.
commit:b976fd8
/////////////////////////////////////////////////////////////////////////
1:     private final static String servicePropertiesFileName = dbDir + File.separator + "service.properties";
/////////////////////////////////////////////////////////////////////////
1:         File servicePropertiesFile = new File(servicePropertiesFileName);
0:             if (lockFile.exists() && servicePropertiesFile.exists()) { 
0:                 // if the lock file is there and service.properties,
0:                 // the database has booted, return. If we don't check for
0:                 // service.properties, we may get just an error that the
0:                 // directory already exists. We'll give a few seconds too
0:                 // for service.properties to finish writing.
0:                 Thread.sleep(3000);
1:                 return;
commit:c6cafe4
/////////////////////////////////////////////////////////////////////////
0:                 Thread.sleep(10000); 
0:                return;
commit:c8bb7d7
/////////////////////////////////////////////////////////////////////////
1:     private final static String dbDir = DEFAULT_DB_DIR + File.separator + dbName;
1:     private final static String dbLockFile = dbDir + File.separator +
1:     DataFactory.DB_LOCKFILE_NAME;
1:     private final static String dbExLockFile = dbDir + File.separator +
1:     DataFactory.DB_EX_LOCKFILE_NAME;
0:     
0:         dbDir,
/////////////////////////////////////////////////////////////////////////
0:         p = execJavaCmd(cmd);
0:         waitForMinionBoot(p,60000);
0: 
0:         // We now know minion has booted
0: 
0:             Connection c = getConnection();
0:             fail("Dual boot not detected: check BootLockMinion.log");
0:         } catch (SQLException e) {
0:             if (JDBC.vmSupportsJSR169()) {
0:                 assertSQLState(
0:             } else {
0:                 assertSQLState(
0:         }
1:         finally {
1:             if (p!= null) {
0:         // Since all went OK, no need to keep the minion log file.
0:         File minionLog = new File("BootLockMinion.log");
0:         assertTrue(minionLog.delete());
0: 
0:         if (JDBC.vmSupportsJSR169()) {
0:             // Delete lock files so JUnit machinery can clean up the
0:             // one-off database without further warnings on System.err
0:             // (phoneMe).
1:             File db_lockfile_name = new File(dbLockFile);                    
0: 
1:             File db_ex_lockfile_name = new File(dbExLockFile);                    
0: 
0:             db_lockfile_name.delete();
0:             db_ex_lockfile_name.delete();
0:         }
0:     }
0: 
1:     private void waitForMinionBoot(Process p, int waitmillis) throws InterruptedException {
0:         StringBuffer failmsg = new StringBuffer();
1:         // boolean set to true once we find the  lock file
1:         File lockFile = new File(dbLockFile);
0:         // Attempt to catch any errors happening in minion for better test
0:         // diagnosis.
1:         BufferedReader minionSysErr = new BufferedReader(
0:             new InputStreamReader(p.getErrorStream()));
0:         String minionErrLine= null ;
0:         do {
0:             if (lockFile.exists()) {
0:                 // if the lock file is there the database has booted, return
0:                 return;
0:             }
1:             // otherwise sleep for a second and try again
1:             waitmillis -= 1000;
0:             try {
1:                 Thread.sleep(1000);
1:             } catch (InterruptedException e) {
0:                 // TODO Auto-generated catch block
1:                 fail(e.getMessage());
0:             }
1:         } while (waitmillis > 0);
0:         
1:         // If we got here, the database did not boot. Try to print the error.
0:         failmsg.append(
0:                 "Minion did not start or boot db in 60 seconds.\n" +
0:                 "----Minion's stderr:\n");
0:         do {
0:             try {
0:                 minionErrLine = minionSysErr.readLine();
0:             } catch (Exception ioe) {
0:                 // may not always work, so just bail out.
0:                 failmsg.append("could not read minion's stderr");
0:             }
0: 
0:             if (minionErrLine != null) {
0:                 failmsg.append(minionErrLine);
0:             }
0:         } while (minionErrLine != null);
0: 
0:         failmsg.append("\n----Minion's stderr ended");
0:         p.destroy();
0:         p.waitFor();
0:         fail(failmsg.toString());
============================================================================