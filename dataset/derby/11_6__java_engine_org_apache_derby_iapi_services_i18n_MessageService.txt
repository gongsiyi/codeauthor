1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.i18n.MessageService
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
15:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.i18n;
1:eac0369: 
1:4b58cc0: import org.apache.derby.shared.common.error.ShutdownException;
1:eac0369: import org.apache.derby.iapi.services.info.JVMInfo;
1:eac0369: 
1:eac0369: import java.util.Locale;
1:eac0369: import java.util.MissingResourceException;
1:eac0369: import java.util.ResourceBundle;
1:eac0369: import java.text.MessageFormat;
1:eac0369: 
4:eac0369: /**
1:eac0369:  *  Message Service implementation provides a mechanism for locating
1:eac0369:  * messages and substituting arguments for message parameters.
1:eac0369:  * It also provides a service for locating property values.
1:eac0369:  * <p>
1:eac0369:  * It uses the resource bundle mechanism for locating messages based on
1:eac0369:  * keys; the preferred form of resource bundle is a property file mapping
1:eac0369:  * keys to messages.
1:eac0369:  *
1:eac0369:  */
1:5d24b1a: public final class MessageService {
1:eac0369: 
1:eac0369: 	private static final Locale EN = new Locale("en", "US");
1:eac0369: 
1:eac0369: 	private static BundleFinder finder;
1:eac0369: 
1:eac0369: 	private MessageService() {}
1:eac0369: 
1:eac0369: 
1:eac0369: 	public static ResourceBundle getBundleForLocale(Locale locale, String msgId) {
3:eac0369: 		try {
1:eac0369: 			return MessageService.getBundleWithEnDefault("org.apache.derby.loc.m"+hashString50(msgId), locale);
3:eac0369: 		} catch (MissingResourceException mre) {
22:eac0369: 		}
1:eac0369: 		return null;
1:5a93780: 	}
1:eac0369: 
1:eac0369: 
1:a11b076: 	public static void setFinder(BundleFinder theFinder) {
1:eac0369: 		finder = theFinder;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Transform the message from messageID to the actual error, warning, or
1:eac0369: 	  info message using the correct locale.
1:eac0369: 
1:eac0369: 	  <P>
1:eac0369: 	  The arguments to the messages are passed via an object array, the objects
1:eac0369: 	  in the array WILL be changed by this class. The caller should NOT get the
1:eac0369: 	  object back from this array.
1:eac0369: 
1:eac0369: 	 */
1:1f18dc3:     public static String getTextMessage(String messageId, Object... arguments) {
1:eac0369: 		try {
1:eac0369: 			return formatMessage(getBundle(messageId), messageId, arguments, true);
1:eac0369: 		} catch (MissingResourceException mre) {
1:eac0369: 			// message does not exist in the requested locale or the default locale.
3:eac0369: 			// most likely it does exist in our fake base class _en, so try that.
3:eac0369: 		} catch (ShutdownException se) {
1:eac0369: 		}
1:eac0369: 		return formatMessage(getBundleForLocale(EN, messageId), messageId, arguments, false);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 */
1:eac0369: 	public static String getProperty(String messageId, String propertyName) {
1:eac0369: 
1:eac0369: 		ResourceBundle bundle = getBundle(messageId);
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			if (bundle != null)
1:eac0369: 				return bundle.getString(messageId.concat(".").concat(propertyName));
1:eac0369: 		} catch (MissingResourceException mre) {
1:eac0369: 		}
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// class implementation
1:eac0369: 	//
1:eac0369: 	public static String formatMessage(ResourceBundle bundle, String messageId, Object[] arguments, boolean lastChance) {
1:eac0369: 
1:eac0369: 		if (arguments == null)
1:eac0369: 			arguments = new Object[0];
1:6ae3022: 
1:eac0369: 		if (bundle != null) {
1:eac0369: 
1:eac0369: 			try {
1:eac0369: 				messageId = bundle.getString(messageId);
1:eac0369: 
1:eac0369: 				try {
1:eac0369: 					return MessageFormat.format(messageId, arguments);
1:eac0369: 				}
1:eac0369: 				catch (IllegalArgumentException iae) {
1:eac0369: 				}
1:eac0369: 				catch (NullPointerException npe) {
1:eac0369: 					//
1:eac0369: 					//null arguments cause a NullPointerException. 
1:eac0369: 					//This improves reporting.
1:eac0369: 				}
1:eac0369: 
1:eac0369: 			} catch (MissingResourceException mre) {
1:eac0369: 				// caller will try and handle the last chance
1:eac0369: 				if (lastChance)
1:eac0369: 					throw mre;
1:eac0369: 			} 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (messageId == null)
1:eac0369: 			messageId = "UNKNOWN";
1:eac0369: 
1:eac0369: 		
1:eac0369: 		StringBuffer sb = new StringBuffer(messageId);
1:eac0369: 
1:eac0369: 		int len = arguments.length;
1:b75cf01: 		if (len > 0)
1:b75cf01: 			sb.append(" : ");
1:eac0369: 
1:eac0369: 		for (int i=0; i < len; i++) {
1:eac0369: 		    // prepend a comma to all but the first
1:eac0369: 			if (i > 0)
1:eac0369: 				sb.append(", ");
1:eac0369: 
1:eac0369: 			sb.append('[');
1:eac0369: 			sb.append(i);
1:eac0369: 			sb.append("] ");
1:eac0369: 			if (arguments[i] == null)
1:eac0369: 				sb.append("null");
3:eac0369: 			else
1:eac0369: 				sb.append(arguments[i].toString());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		
1:eac0369: 		return sb.toString();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private static ResourceBundle getBundle(String messageId) {
1:eac0369: 
1:eac0369: 		ResourceBundle bundle = null;
1:eac0369: 
1:eac0369: 		if (finder != null)
1:eac0369: 			bundle = finder.getBundle(messageId);
1:eac0369: 
1:eac0369: 		if (bundle == null) {
1:eac0369: 			bundle = MessageService.getBundleForLocale(Locale.getDefault(), messageId);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return bundle;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Method to use instead of ResourceBundle.getBundle().
1:eac0369: 		This method acts like ResourceBundle.getBundle() but if
1:eac0369: 		the resource is not available in the requested locale,
1:eac0369: 		default locale or base class the one for en_US is returned.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public static ResourceBundle getBundleWithEnDefault(String resource, Locale locale) {
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			return ResourceBundle.getBundle(resource, locale);
1:eac0369: 		} catch (MissingResourceException mre) {
1:eac0369: 
1:eac0369: 			// This covers the case where neither the
1:eac0369: 			// requested locale or the default locale
1:eac0369: 			// have a resource.
1:eac0369: 
1:eac0369: 			return ResourceBundle.getBundle(resource, EN);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Hash function to split messages into 50 files based
1:eac0369: 		upon the message identifier or SQLState. We don't use
1:eac0369: 		String.hashCode() as it varies between releases and
1:eac0369: 		doesn't provide an even distribution across the 50 files.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public static int hashString50(String key) {
1:eac0369: 		int hash = 0;
1:eac0369: 		int len = key.length();
1:eac0369: 		if (len > 5)
1:eac0369: 			len = 5;
1:eac0369: 
1:eac0369: 		for (int i = 0; i < len; i++) {
1:eac0369: 			hash += key.charAt(i);
1:eac0369: 		}
1:eac0369: 		hash = hash % 50;
1:eac0369: 		return hash;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:16aa6a4
/////////////////////////////////////////////////////////////////////////
commit:4b58cc0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.error.ShutdownException;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1f18dc3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static String getTextMessage(String messageId, Object... arguments) {
commit:a11b076
/////////////////////////////////////////////////////////////////////////
1: 	public static void setFinder(BundleFinder theFinder) {
author:Lily Wei
-------------------------------------------------------------------------------
commit:39244bf
/////////////////////////////////////////////////////////////////////////
0: 		    int _pos2 = localeStr.lastIndexOf("_");
commit:5a93780
/////////////////////////////////////////////////////////////////////////
0:     public static String getTextMessage(String messageID, Object a1, Object a2, Object a3, Object a4, Object a5) {
0:         return getCompleteMessage(messageID, new Object[]{a1, a2, a3, a4, a5});
1:     }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:b75cf01
/////////////////////////////////////////////////////////////////////////
1: 		if (len > 0)
1: 			sb.append(" : ");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7132626
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.error.ShutdownException;
commit:6ae3022
/////////////////////////////////////////////////////////////////////////
1: 
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.i18n.MessageService
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public final class MessageService {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.i18n
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.i18n;
1: 
1: import org.apache.derby.iapi.services.info.JVMInfo;
0: import org.apache.derby.iapi.services.context.ShutdownException;
1: 
1: import java.util.Locale;
1: import java.util.MissingResourceException;
1: import java.util.ResourceBundle;
1: import java.text.MessageFormat;
1: 
1: /**
1:  *  Message Service implementation provides a mechanism for locating
1:  * messages and substituting arguments for message parameters.
1:  * It also provides a service for locating property values.
1:  * <p>
1:  * It uses the resource bundle mechanism for locating messages based on
1:  * keys; the preferred form of resource bundle is a property file mapping
1:  * keys to messages.
1:  *
0:  * @author ames
1:  */
0: public final class MessageService { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	private static final Locale EN = new Locale("en", "US");
1: 
1: 	private static BundleFinder finder;
1: 
1: 	private MessageService() {}
1: 
1: 
1: 	public static ResourceBundle getBundleForLocale(Locale locale, String msgId) {
1: 		try {
1: 			return MessageService.getBundleWithEnDefault("org.apache.derby.loc.m"+hashString50(msgId), locale);
1: 		} catch (MissingResourceException mre) {
1: 		}
1: 		return null;
1: 	}
1: 
1: 
0: 	public static Object setFinder(BundleFinder theFinder) {
1: 		finder = theFinder;
1: 
0: 		// Return an object for a caller to hang onto so
0: 		// Garbage collection doesn't GC this class.
0: 		return new MessageService().getClass();
1: 	}
1: 
0: 	public static String getTextMessage(String messageID) {
0: 		return getCompleteMessage(messageID, (Object[]) null);
1: 	}
0: 	public static String getTextMessage(String messageID, Object a1) {
1: 
0: 		return getCompleteMessage(messageID, new Object[]{a1});
1: 	}
0: 	public static String getTextMessage(String messageID, Object a1, Object a2) {
0: 		return getCompleteMessage(messageID, new Object[]{a1, a2});
1: 	}
0: 	public static String getTextMessage(String messageID, Object a1, Object a2, Object a3) {
0: 		return getCompleteMessage(messageID, new Object[]{a1, a2, a3});
1: 	}
0: 	public static String getTextMessage(String messageID, Object a1, Object a2, Object a3, Object a4) {
0: 		return getCompleteMessage(messageID, new Object[]{a1, a2, a3, a4});
1: 	}
1: 
1: 	/**
1: 	  Transform the message from messageID to the actual error, warning, or
1: 	  info message using the correct locale.
1: 
1: 	  <P>
1: 	  The arguments to the messages are passed via an object array, the objects
1: 	  in the array WILL be changed by this class. The caller should NOT get the
1: 	  object back from this array.
1: 
1: 	 */
0: 	public static String getCompleteMessage(String messageId, Object[] arguments) {
1: 
1: 		try {
1: 			return formatMessage(getBundle(messageId), messageId, arguments, true);
1: 		} catch (MissingResourceException mre) {
1: 			// message does not exist in the requested locale or the default locale.
1: 			// most likely it does exist in our fake base class _en, so try that.
1: 		} catch (ShutdownException se) {
1: 		}
1: 		return formatMessage(getBundleForLocale(EN, messageId), messageId, arguments, false);
1: 	}
1: 
1: 	/**
0: 	  Method used by Cloudscape Network Server to get localized message (original call
0: 	  from jcc.
1: 
0: 	  @param sqlcode	sqlcode, not used.
0: 	  @param errmcLen	sqlerrmc length
0: 	  @param sqlerrmc	sql error message tokens, variable part of error message (ie.,
0: 						arguments) plus messageId, separated by separator.
0: 	  @param sqlerrp	not used
0: 	  @param errd0-5	not used
0: 	  @param warn		not used
0: 	  @param sqlState	5-char sql state
0: 	  @param file		not used
0: 	  @param localeStr	client locale in string
0: 	  @param msg		OUTPUT parameter, localized error message
0: 	  @param rc			OUTPUT parameter, return code -- 0 for success
1: 	 */
0: 	public static void getLocalizedMessage(int sqlcode, short errmcLen, String sqlerrmc,
0: 										String sqlerrp, int errd0, int errd1, int errd2,
0: 										int errd3, int errd4, int errd5, String warn,
0: 										String sqlState, String file, String localeStr,
0: 										String[] msg, int[] rc)
0: 	{
0: 		//figure out client locale from input locale string
1: 
0: 		int _pos1 = localeStr.indexOf("_");		// "_" position
0: 		int _pos2 = localeStr.lastIndexOf("_");
1: 
0: 		Locale locale = EN;		//default locale
0: 		if (_pos1 != -1)
0: 		{
0: 			String language = localeStr.substring(0, _pos1);
0: 			if (_pos2 == _pos1)
0: 			{
0: 				String country = localeStr.substring(_pos1 + 1);
0: 				locale = new Locale(language, country);
1: 			}
1: 			else
0: 			{
0: 				String country = localeStr.substring(_pos1 + 1, _pos2);
0: 				String variant = localeStr.substring(_pos2 + 1);
0: 				locale = new Locale(language, country, variant);
1: 			}
1: 		}
1: 
0: 		// get messageId and arguments, messageId is necessary for us to look up
0: 		// localized message from property file.  messageId was sent as the last
0: 		// token in the sqlerrmc.
1: 
0: 		String messageId = sqlState; 	//use sqlState if we don't have messageId
0: 		Object[] arguments = null;
0: 		if (sqlerrmc != null && sqlerrmc.length() > 0)
0: 		{
0: 			char [] sqlerrmc_chars = sqlerrmc.toCharArray();
0: 			int numArgs = 0, lastSepIdx = -1; // last separator index
0: 			for (int i = 0; i < sqlerrmc_chars.length; i++)
0: 			{
0: 				if (sqlerrmc_chars[i] == 20)	// separator
0: 				{
0: 					numArgs++;
0: 					lastSepIdx = i;
1: 				}
1: 			}
0: 			if (numArgs == 0)
0: 				messageId = new String(sqlerrmc_chars); //no args, only messageId then
1: 			else
0: 			{
0: 				messageId = new String(sqlerrmc_chars, lastSepIdx+1, sqlerrmc_chars.length-lastSepIdx-1);
0: 				arguments = new Object[numArgs];
0: 				for (int start = 0, arg = 0, i = 0; i < lastSepIdx + 1; i++)
0: 				{
0: 					if (i == lastSepIdx || sqlerrmc_chars[i] == 20)	// delimiter 
0: 					{
0: 						arguments[arg++] = new String(sqlerrmc_chars, start, i - start);
0: 						start = i + 1;
1: 					}
1: 				}
1: 			}
1: 		}
1: 
1: 		try {
0: 			msg[0] = formatMessage(getBundleForLocale(locale, messageId), messageId, arguments, true);
0: 			rc[0] = 0;
0: 			return;
1: 		} catch (MissingResourceException mre) {
0: 			// message does not exist in the requested locale
1: 			// most likely it does exist in our fake base class _en, so try that.
1: 		} catch (ShutdownException se) {
1: 		}
0: 		msg[0] = formatMessage(getBundleForLocale(EN, messageId), messageId, arguments, false);
0: 		rc[0] = 0;
1: 	}
1: 	
1: 	/**
0: 	  Method used by Cloudscape Network Server to get localized message 
1: 
0: 	  @param locale		locale
0: 	  @param messageId	message id
0: 	  @param args		message arguments
1: 	 */
0: 	public static String getLocalizedMessage(Locale locale, String messageId, Object [] args)
0: 	{
0: 		String locMsg = null;
1: 
1: 		try {
0: 			locMsg = formatMessage(getBundleForLocale(locale, messageId), messageId, args, true);
0: 			return locMsg;
1: 		} catch (MissingResourceException mre) {
0: 			// message does not exist in the requested locale
1: 			// most likely it does exist in our fake base class _en, so try that.
1: 		} catch (ShutdownException se) {
1: 		}
0: 		locMsg = formatMessage(getBundleForLocale(EN, messageId), messageId, args, false);
0: 		return locMsg;
1: 	}
1: 
1: 	/**
1: 	 */
1: 	public static String getProperty(String messageId, String propertyName) {
1: 
1: 		ResourceBundle bundle = getBundle(messageId);
1: 
1: 		try {
1: 			if (bundle != null)
1: 				return bundle.getString(messageId.concat(".").concat(propertyName));
1: 		} catch (MissingResourceException mre) {
1: 		}
1: 		return null;
1: 	}
1: 
1: 	//
1: 	// class implementation
1: 	//
1: 	public static String formatMessage(ResourceBundle bundle, String messageId, Object[] arguments, boolean lastChance) {
1: 
1: 		if (arguments == null)
1: 			arguments = new Object[0];
0:  		else if (JVMInfo.JDK_ID == 1)
0: 		{
0: 			// make sure the Object array contains only string because in
0: 			// pre-116 JVMs, MessageFormat.format has a bug which cause it to
0: 			// output a string to System.out whenever it sees an object it
0: 			// can't recognize, instead of calling toString().
0: 			for (int i = 0; i < arguments.length; i++)
0: 			{
0: 				if (arguments[i] != null)
0: 					arguments[i] = arguments[i].toString();
1: 			}
1: 		}
1: 		if (bundle != null) {
1: 
1: 			try {
1: 				messageId = bundle.getString(messageId);
1: 
1: 				try {
1: 					return MessageFormat.format(messageId, arguments);
1: 				}
1: 				catch (IllegalArgumentException iae) {
1: 				}
1: 				catch (NullPointerException npe) {
1: 					//
1: 					//null arguments cause a NullPointerException. 
1: 					//This improves reporting.
1: 				}
1: 
1: 			} catch (MissingResourceException mre) {
1: 				// caller will try and handle the last chance
1: 				if (lastChance)
1: 					throw mre;
1: 			} 
1: 		}
1: 
1: 		if (messageId == null)
1: 			messageId = "UNKNOWN";
1: 
1: 		
1: 		StringBuffer sb = new StringBuffer(messageId);
1: 
0: 		sb.append(" : ");
1: 		int len = arguments.length;
1: 
1: 		for (int i=0; i < len; i++) {
1: 		    // prepend a comma to all but the first
1: 			if (i > 0)
1: 				sb.append(", ");
1: 
1: 			sb.append('[');
1: 			sb.append(i);
1: 			sb.append("] ");
1: 			if (arguments[i] == null)
1: 				sb.append("null");
1: 			else
1: 				sb.append(arguments[i].toString());
1: 		}
1: 
1: 		
1: 		return sb.toString();
1: 	}
1: 
1: 	private static ResourceBundle getBundle(String messageId) {
1: 
1: 		ResourceBundle bundle = null;
1: 
1: 		if (finder != null)
1: 			bundle = finder.getBundle(messageId);
1: 
1: 		if (bundle == null) {
1: 			bundle = MessageService.getBundleForLocale(Locale.getDefault(), messageId);
1: 		}
1: 
1: 		return bundle;
1: 	}
1: 
1: 	/**
1: 		Method to use instead of ResourceBundle.getBundle().
1: 		This method acts like ResourceBundle.getBundle() but if
1: 		the resource is not available in the requested locale,
1: 		default locale or base class the one for en_US is returned.
1: 	*/
1: 
1: 	public static ResourceBundle getBundleWithEnDefault(String resource, Locale locale) {
1: 
1: 		try {
1: 			return ResourceBundle.getBundle(resource, locale);
1: 		} catch (MissingResourceException mre) {
1: 
1: 			// This covers the case where neither the
1: 			// requested locale or the default locale
1: 			// have a resource.
1: 
1: 			return ResourceBundle.getBundle(resource, EN);
1: 		}
1: 	}
1: 
1: 	/**
1: 		Hash function to split messages into 50 files based
1: 		upon the message identifier or SQLState. We don't use
1: 		String.hashCode() as it varies between releases and
1: 		doesn't provide an even distribution across the 50 files.
1: 
1: 	*/
1: 	public static int hashString50(String key) {
1: 		int hash = 0;
1: 		int len = key.length();
1: 		if (len > 5)
1: 			len = 5;
1: 
1: 		for (int i = 0; i < len; i++) {
1: 			hash += key.charAt(i);
1: 		}
1: 		hash = hash % 50;
1: 		return hash;
1: 	}
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
0: 	  Method used by Derby Network Server to get localized message
/////////////////////////////////////////////////////////////////////////
0: 	  Method used by Derby Network Server to get localized message 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
0: 	  @param errd0		not used
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.i18n
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.i18n;
0: 
0: import org.apache.derby.iapi.services.info.JVMInfo;
0: import org.apache.derby.iapi.services.context.ShutdownException;
0: 
0: import java.util.Locale;
0: import java.util.MissingResourceException;
0: import java.util.ResourceBundle;
0: import java.text.MessageFormat;
0: 
0: /**
0:  *  Message Service implementation provides a mechanism for locating
0:  * messages and substituting arguments for message parameters.
0:  * It also provides a service for locating property values.
0:  * <p>
0:  * It uses the resource bundle mechanism for locating messages based on
0:  * keys; the preferred form of resource bundle is a property file mapping
0:  * keys to messages.
0:  *
0:  * @author ames
0:  */
0: public final class MessageService { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	private static final Locale EN = new Locale("en", "US");
0: 
0: 	private static BundleFinder finder;
0: 
0: 	private MessageService() {}
0: 
0: 
0: 	public static ResourceBundle getBundleForLocale(Locale locale, String msgId) {
0: 		try {
0: 			return MessageService.getBundleWithEnDefault("org.apache.derby.loc.m"+hashString50(msgId), locale);
0: 		} catch (MissingResourceException mre) {
0: 		}
0: 		return null;
0: 	}
0: 
0: 
0: 	public static Object setFinder(BundleFinder theFinder) {
0: 		finder = theFinder;
0: 
0: 		// Return an object for a caller to hang onto so
0: 		// Garbage collection doesn't GC this class.
0: 		return new MessageService().getClass();
0: 	}
0: 
0: 	public static String getTextMessage(String messageID) {
0: 		return getCompleteMessage(messageID, (Object[]) null);
0: 	}
0: 	public static String getTextMessage(String messageID, Object a1) {
0: 
0: 		return getCompleteMessage(messageID, new Object[]{a1});
0: 	}
0: 	public static String getTextMessage(String messageID, Object a1, Object a2) {
0: 		return getCompleteMessage(messageID, new Object[]{a1, a2});
0: 	}
0: 	public static String getTextMessage(String messageID, Object a1, Object a2, Object a3) {
0: 		return getCompleteMessage(messageID, new Object[]{a1, a2, a3});
0: 	}
0: 	public static String getTextMessage(String messageID, Object a1, Object a2, Object a3, Object a4) {
0: 		return getCompleteMessage(messageID, new Object[]{a1, a2, a3, a4});
0: 	}
0: 
0: 	/**
0: 	  Transform the message from messageID to the actual error, warning, or
0: 	  info message using the correct locale.
0: 
0: 	  <P>
0: 	  The arguments to the messages are passed via an object array, the objects
0: 	  in the array WILL be changed by this class. The caller should NOT get the
0: 	  object back from this array.
0: 
0: 	 */
0: 	public static String getCompleteMessage(String messageId, Object[] arguments) {
0: 
0: 		try {
0: 			return formatMessage(getBundle(messageId), messageId, arguments, true);
0: 		} catch (MissingResourceException mre) {
0: 			// message does not exist in the requested locale or the default locale.
0: 			// most likely it does exist in our fake base class _en, so try that.
0: 		} catch (ShutdownException se) {
0: 		}
0: 		return formatMessage(getBundleForLocale(EN, messageId), messageId, arguments, false);
0: 	}
0: 
0: 	/**
0: 	  Method used by Cloudscape Network Server to get localized message (original call
0: 	  from jcc.
0: 
0: 	  @param sqlcode	sqlcode, not used.
0: 	  @param errmcLen	sqlerrmc length
0: 	  @param sqlerrmc	sql error message tokens, variable part of error message (ie.,
0: 						arguments) plus messageId, separated by separator.
0: 	  @param sqlerrp	not used
0: 	  @param errd0-5	not used
0: 	  @param warn		not used
0: 	  @param sqlState	5-char sql state
0: 	  @param file		not used
0: 	  @param localeStr	client locale in string
0: 	  @param msg		OUTPUT parameter, localized error message
0: 	  @param rc			OUTPUT parameter, return code -- 0 for success
0: 	 */
0: 	public static void getLocalizedMessage(int sqlcode, short errmcLen, String sqlerrmc,
0: 										String sqlerrp, int errd0, int errd1, int errd2,
0: 										int errd3, int errd4, int errd5, String warn,
0: 										String sqlState, String file, String localeStr,
0: 										String[] msg, int[] rc)
0: 	{
0: 		//figure out client locale from input locale string
0: 
0: 		int _pos1 = localeStr.indexOf("_");		// "_" position
0: 		int _pos2 = localeStr.lastIndexOf("_");
0: 
0: 		Locale locale = EN;		//default locale
0: 		if (_pos1 != -1)
0: 		{
0: 			String language = localeStr.substring(0, _pos1);
0: 			if (_pos2 == _pos1)
0: 			{
0: 				String country = localeStr.substring(_pos1 + 1);
0: 				locale = new Locale(language, country);
0: 			}
0: 			else
0: 			{
0: 				String country = localeStr.substring(_pos1 + 1, _pos2);
0: 				String variant = localeStr.substring(_pos2 + 1);
0: 				locale = new Locale(language, country, variant);
0: 			}
0: 		}
0: 
0: 		// get messageId and arguments, messageId is necessary for us to look up
0: 		// localized message from property file.  messageId was sent as the last
0: 		// token in the sqlerrmc.
0: 
0: 		String messageId = sqlState; 	//use sqlState if we don't have messageId
0: 		Object[] arguments = null;
0: 		if (sqlerrmc != null && sqlerrmc.length() > 0)
0: 		{
0: 			char [] sqlerrmc_chars = sqlerrmc.toCharArray();
0: 			int numArgs = 0, lastSepIdx = -1; // last separator index
0: 			for (int i = 0; i < sqlerrmc_chars.length; i++)
0: 			{
0: 				if (sqlerrmc_chars[i] == 20)	// separator
0: 				{
0: 					numArgs++;
0: 					lastSepIdx = i;
0: 				}
0: 			}
0: 			if (numArgs == 0)
0: 				messageId = new String(sqlerrmc_chars); //no args, only messageId then
0: 			else
0: 			{
0: 				messageId = new String(sqlerrmc_chars, lastSepIdx+1, sqlerrmc_chars.length-lastSepIdx-1);
0: 				arguments = new Object[numArgs];
0: 				for (int start = 0, arg = 0, i = 0; i < lastSepIdx + 1; i++)
0: 				{
0: 					if (i == lastSepIdx || sqlerrmc_chars[i] == 20)	// delimiter 
0: 					{
0: 						arguments[arg++] = new String(sqlerrmc_chars, start, i - start);
0: 						start = i + 1;
0: 					}
0: 				}
0: 			}
0: 		}
0: 
0: 		try {
0: 			msg[0] = formatMessage(getBundleForLocale(locale, messageId), messageId, arguments, true);
0: 			rc[0] = 0;
0: 			return;
0: 		} catch (MissingResourceException mre) {
0: 			// message does not exist in the requested locale
0: 			// most likely it does exist in our fake base class _en, so try that.
0: 		} catch (ShutdownException se) {
0: 		}
0: 		msg[0] = formatMessage(getBundleForLocale(EN, messageId), messageId, arguments, false);
0: 		rc[0] = 0;
0: 	}
0: 	
0: 	/**
0: 	  Method used by Cloudscape Network Server to get localized message 
0: 
0: 	  @param locale		locale
0: 	  @param messageId	message id
0: 	  @param args		message arguments
0: 	 */
0: 	public static String getLocalizedMessage(Locale locale, String messageId, Object [] args)
0: 	{
0: 		String locMsg = null;
0: 
0: 		try {
0: 			locMsg = formatMessage(getBundleForLocale(locale, messageId), messageId, args, true);
0: 			return locMsg;
0: 		} catch (MissingResourceException mre) {
0: 			// message does not exist in the requested locale
0: 			// most likely it does exist in our fake base class _en, so try that.
0: 		} catch (ShutdownException se) {
0: 		}
0: 		locMsg = formatMessage(getBundleForLocale(EN, messageId), messageId, args, false);
0: 		return locMsg;
0: 	}
0: 
0: 	/**
0: 	 */
0: 	public static String getProperty(String messageId, String propertyName) {
0: 
0: 		ResourceBundle bundle = getBundle(messageId);
0: 
0: 		try {
0: 			if (bundle != null)
0: 				return bundle.getString(messageId.concat(".").concat(propertyName));
0: 		} catch (MissingResourceException mre) {
0: 		}
0: 		return null;
0: 	}
0: 
0: 	//
0: 	// class implementation
0: 	//
0: 	public static String formatMessage(ResourceBundle bundle, String messageId, Object[] arguments, boolean lastChance) {
0: 
0: 		if (arguments == null)
0: 			arguments = new Object[0];
0:  		else if (JVMInfo.JDK_ID == 1)
0: 		{
0: 			// make sure the Object array contains only string because in
0: 			// pre-116 JVMs, MessageFormat.format has a bug which cause it to
0: 			// output a string to System.out whenever it sees an object it
0: 			// can't recognize, instead of calling toString().
0: 			for (int i = 0; i < arguments.length; i++)
0: 			{
0: 				if (arguments[i] != null)
0: 					arguments[i] = arguments[i].toString();
0: 			}
0: 		}
0: 		if (bundle != null) {
0: 
0: 			try {
0: 				messageId = bundle.getString(messageId);
0: 
0: 				try {
0: 					return MessageFormat.format(messageId, arguments);
0: 				}
0: 				catch (IllegalArgumentException iae) {
0: 				}
0: 				catch (NullPointerException npe) {
0: 					//
0: 					//null arguments cause a NullPointerException. 
0: 					//This improves reporting.
0: 				}
0: 
0: 			} catch (MissingResourceException mre) {
0: 				// caller will try and handle the last chance
0: 				if (lastChance)
0: 					throw mre;
0: 			} 
0: 		}
0: 
0: 		if (messageId == null)
0: 			messageId = "UNKNOWN";
0: 
0: 		
0: 		StringBuffer sb = new StringBuffer(messageId);
0: 
0: 		sb.append(" : ");
0: 		int len = arguments.length;
0: 
0: 		for (int i=0; i < len; i++) {
0: 		    // prepend a comma to all but the first
0: 			if (i > 0)
0: 				sb.append(", ");
0: 
0: 			sb.append('[');
0: 			sb.append(i);
0: 			sb.append("] ");
0: 			if (arguments[i] == null)
0: 				sb.append("null");
0: 			else
0: 				sb.append(arguments[i].toString());
0: 		}
0: 
0: 		
0: 		return sb.toString();
0: 	}
0: 
0: 	private static ResourceBundle getBundle(String messageId) {
0: 
0: 		ResourceBundle bundle = null;
0: 
0: 		if (finder != null)
0: 			bundle = finder.getBundle(messageId);
0: 
0: 		if (bundle == null) {
0: 			bundle = MessageService.getBundleForLocale(Locale.getDefault(), messageId);
0: 		}
0: 
0: 		return bundle;
0: 	}
0: 
0: 	/**
0: 		Method to use instead of ResourceBundle.getBundle().
0: 		This method acts like ResourceBundle.getBundle() but if
0: 		the resource is not available in the requested locale,
0: 		default locale or base class the one for en_US is returned.
0: 	*/
0: 
0: 	public static ResourceBundle getBundleWithEnDefault(String resource, Locale locale) {
0: 
0: 		try {
0: 			return ResourceBundle.getBundle(resource, locale);
0: 		} catch (MissingResourceException mre) {
0: 
0: 			// This covers the case where neither the
0: 			// requested locale or the default locale
0: 			// have a resource.
0: 
0: 			return ResourceBundle.getBundle(resource, EN);
0: 		}
0: 	}
0: 
0: 	/**
0: 		Hash function to split messages into 50 files based
0: 		upon the message identifier or SQLState. We don't use
0: 		String.hashCode() as it varies between releases and
0: 		doesn't provide an even distribution across the 50 files.
0: 
0: 	*/
0: 	public static int hashString50(String key) {
0: 		int hash = 0;
0: 		int len = key.length();
0: 		if (len > 5)
0: 			len = 5;
0: 
0: 		for (int i = 0; i < len; i++) {
0: 			hash += key.charAt(i);
0: 		}
0: 		hash = hash % 50;
0: 		return hash;
0: 	}
0: }
============================================================================