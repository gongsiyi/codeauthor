1:aaea357: /*
2:aaea357: 
1:aaea357:    Derby - Class org.apache.derbyTesting.functionTests.store.LogChecksumSetup
1:aaea357: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:aaea357: 
1:aaea357:       http://www.apache.org/licenses/LICENSE-2.0
1:aaea357: 
1:aaea357:    Unless required by applicable law or agreed to in writing, software
1:aaea357:    distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357:    See the License for the specific language governing permissions and
1:aaea357:    limitations under the License.
1:aaea357: 
1:aaea357:  */
1:aaea357: 
1:aaea357: package org.apache.derbyTesting.functionTests.tests.store;
1:aaea357: import java.sql.*;
1:aaea357: import java.io.ByteArrayOutputStream;
1:aaea357: import java.io.DataOutputStream;
1:aaea357: import java.io.IOException;
1:aaea357: import java.util.zip.CRC32;
1:aaea357: import org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo;
1:aaea357: import org.apache.derby.tools.ij;
1:aaea357: 
1:aaea357: /*
1:aaea357:  * Purpose of this class is to simulate out of order incomplete 
1:aaea357:  * log write corruption (see derby-96 for details) using the proxy storage
1:aaea357:  * factory (org.apache.derbyTesting.functionTests.util.corruptio.
1:aaea357:  * CorruptDiskStorageFactory) instead of the default storage factory.
1:aaea357:  * By defailt all io is delegated to the default database storage factory,
1:aaea357:  * except when corruption is enabled through CorruptibleIo class.
1:aaea357:  * Proxy storage factory is loaded using the following properties in 
1:aaea357:  * the test properties file:
1:aaea357:  * derby.subSubProtocol.csf=org.apache.derbyTesting.functionTests.
1:aaea357:  *             util.corruptio.CorruptDiskStorageFactory
1:aaea357:  *  database=jdbc:derby:csf:wombat
1:aaea357:  *
1:aaea357:  * @version 1.0
1:aaea357:  * @see CorruptibleIo
1:aaea357:  */
1:aaea357: 
1:aaea357: public class LogChecksumSetup{
1:aaea357: 
1:aaea357: 	private CorruptibleIo cbio;
1:aaea357: 
1:aaea357: 	LogChecksumSetup()
1:aaea357: 	{
1:aaea357: 		cbio = CorruptibleIo.getInstance();
1:aaea357: 	}
1:aaea357: 	
1:aaea357: 	/**
1:aaea357: 	 * Insert some rows into the table and corrupt the log for the last row,
1:aaea357: 	 * so when we recover , there should be one row less even though we committed.
1:aaea357: 	 */
1:aaea357: 	void insertAndCorrupt(Connection conn, int rowCount) throws SQLException {
1:aaea357: 
1:aaea357: 		PreparedStatement ps = conn.prepareStatement("INSERT INTO " + 
1:aaea357: 													 "T1" + 
1:aaea357: 													 " VALUES(?,?,?)");
1:aaea357: 
1:aaea357: 		java.util.Random r = new java.util.Random();
1:aaea357: 		CRC32 checksum = new CRC32(); // holder for the checksum
1:aaea357: 		boolean corrupt = false;
1:aaea357: 		for (int i = 0; i < rowCount; i++) {
1:aaea357: 			
1:aaea357: 			//setup last row for log corruption
1:aaea357: 			if (i == (rowCount -1 ))
1:aaea357: 			{
1:aaea357: 				// Note: offset/len for corruption  here refers to 
1:aaea357: 				// the actual log write request
1:aaea357: 				// that is being done for this insert. 
1:aaea357: 				setupLogCorruption(50, 10);
1:aaea357: 				corrupt = true;
1:aaea357: 			}
1:aaea357: 			ps.setInt(1, i); // ID
1:aaea357: 			byte[] dataBytes  = generateBinaryData(r, 90000 , 1000 * i);
1:aaea357: 			ps.setBytes(2, dataBytes); 
1:aaea357: 			//calculate checksum for blob data 
1:aaea357: 			checksum.update(dataBytes, 0, dataBytes.length);
1:aaea357: 			checksum.reset();
1:aaea357: 			checksum.update(dataBytes, 0, dataBytes.length);
1:aaea357: 			ps.setLong(3, checksum.getValue());
1:aaea357: 			ps.executeUpdate();
1:aaea357: 			conn.commit();
1:aaea357: 		}
1:aaea357: 	}
1:aaea357: 
1:aaea357: 		
1:aaea357: 	/**
1:aaea357: 	 * update some rows in the table and corrupt the log for the last row,
1:aaea357: 	 * so when we recover , All checsum should be correct because corrupted 
1:aaea357: 	 * log transaction should been rolled back.
1:aaea357: 	 */
1:aaea357: 
1:aaea357: 	void updateAndCorrupt(Connection conn, int rowCount) throws SQLException{
1:aaea357: 
1:aaea357: 		PreparedStatement ps = conn.prepareStatement("update " + "T1" + 
1:aaea357: 													 " SET " +
1:aaea357: 													 "DATA=?, DATACHECKSUM=? where ID=?");
1:aaea357: 		
1:aaea357: 		java.util.Random r = new java.util.Random();
1:aaea357: 		CRC32 checksum = new CRC32(); // holder for the checksum
1:aaea357: 		int updateCount = 0;
1:aaea357: 		boolean corrupt = false;
1:aaea357: 		for (int i = 0; i < rowCount; i++) {
1:aaea357: 			
1:aaea357: 			//setup last row for log corruption
1:aaea357: 			if (i == (rowCount -1 ))
1:aaea357: 			{
1:aaea357: 				// Note: offset/len for corruption  here refers to 
1:aaea357: 				// the actual log write request
1:aaea357: 				// that is being done for this insert. 
1:aaea357: 				setupLogCorruption(50, 10);
1:aaea357: 				corrupt = true;
1:aaea357: 			}
1:aaea357: 			byte[] dataBytes  = generateBinaryData(r, 1234 , 5000 * i);
1:aaea357: 			ps.setBytes(1, dataBytes); 
1:aaea357: 
1:aaea357: 			// calculate checksum for blob data 
1:aaea357: 			checksum.update(dataBytes, 0, dataBytes.length);
1:aaea357: 			checksum.reset();
1:aaea357: 			checksum.update(dataBytes, 0, dataBytes.length);
1:aaea357: 
1:aaea357: 			ps.setLong(2, checksum.getValue());
1:aaea357: 			ps.setInt(3, i); // ID
1:aaea357: 			updateCount +=  ps.executeUpdate();
1:aaea357: 			conn.commit();
1:aaea357: 		}
1:aaea357: 	}
1:aaea357: 
1:aaea357: 
1:aaea357: 	/*
1:aaea357: 	 * read the data from the table and verify the blob data using the 
1:aaea357: 	 * checksum and make sure that expected number rows exist in the table. 
1:aaea357: 	 * 
1:aaea357: 	 */
1:aaea357: 	void verifyData(Connection conn, int expectedRowCount) throws SQLException {
1:aaea357: 		
1:aaea357: 		Statement s = conn.createStatement();
1:aaea357: 		CRC32 checksum = new CRC32(); // holder for the checksum
1:aaea357: 		
1:aaea357: 		ResultSet rs = s.executeQuery("SELECT DATA , DATACHECKSUM, ID FROM "
1:aaea357: 									  + "T1" );
1:aaea357: 		int count = 0;
1:aaea357: 		while(rs.next())
1:aaea357: 		{
1:aaea357: 			byte[] dataBytes = rs.getBytes(1);
1:aaea357: 			long ckmRead = rs.getLong(2);
1:aaea357: 			int id = rs.getInt(3);
1:aaea357: 
1:aaea357: 			checksum.reset();
1:aaea357: 			checksum.update(dataBytes, 0, dataBytes.length);
1:aaea357: 
1:aaea357: 			if(checksum.getValue() != ckmRead )
1:aaea357: 			{
1:aaea357: 				logMessage("CHECKSUMs ARE NOT MATCHING");
1:aaea357: 				logMessage("ID=" + id + " Checksum From DB:" + ckmRead);
1:aaea357: 				logMessage("Recalcaulted sum :" + checksum.getValue());
1:aaea357: 				logMessage("Length of Data:" +  dataBytes.length);
1:aaea357: 			}
1:aaea357: 			
1:aaea357: 			count++;
1:aaea357: 		}
1:aaea357: 		conn.commit();
1:aaea357: 
1:aaea357: 		if(count != expectedRowCount)
1:aaea357: 		{
1:aaea357: 			logMessage("Expected Number Of Rows (" + 
1:aaea357: 					   expectedRowCount + ")" +  "!="  + 
1:aaea357: 					   "No Of rows in the Table(" + 
1:aaea357: 					   count + ")");
1:aaea357: 		}
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	/* 
1:aaea357: 	 * create the tables that are used by this test.
1:aaea357: 	 */
1:aaea357: 	private  void createTable(Connection conn) throws SQLException {
1:aaea357: 
1:aaea357: 		Statement s = conn.createStatement();
1:aaea357: 		s.executeUpdate("CREATE TABLE " + "T1" + "(ID INT," +
1:aaea357: 						"DATA BLOB(300000),"+ 
1:aaea357: 						"DATACHECKSUM BIGINT)");
1:aaea357: 		conn.commit();
1:aaea357: 		s.close();
1:aaea357: 	}
1:aaea357: 
1:aaea357: 	/*
1:aaea357: 	 * Log is corrupted using the corrupt storage factory. 
1:aaea357: 	 * setup offset/length where we want the transaction 
1:aaea357: 	 * log to be corrupted. Transaction tat the corruption 
1:aaea357: 	 * is simulated  on should be rolled back because the log check
1:aaea357: 	 * should identify that the writes were incomplete.  
1:aaea357: 	 */
1:aaea357: 	private void setupLogCorruption(int off , int len)
1:aaea357: 	{
1:aaea357: 		cbio.setLogCorruption(true);
1:aaea357: 		cbio.setOffset(off); 
1:aaea357: 		cbio.setLength(len); 
1:aaea357: 	}
1:aaea357: 
1:aaea357: 
1:aaea357: 	/*
1:aaea357: 	 * utility routine to generate random byte array of data.
1:aaea357: 	 */
1:aaea357: 	private  byte[] generateBinaryData(java.util.Random r, 
1:aaea357: 											 int factor,
1:aaea357: 											 int size)	{
1:aaea357: 		
1:aaea357: 		ByteArrayOutputStream baos = new ByteArrayOutputStream(64);
1:aaea357: 		try{
1:aaea357: 			DataOutputStream daos = new DataOutputStream(baos);
1:aaea357: 			for(int i = 0 ; i < size ; i++)
1:aaea357: 			{
1:aaea357: 				int p = r.nextInt() % factor;
1:aaea357: 				if (p < 0)
1:aaea357: 					p = p * -1;
1:aaea357: 				daos.writeInt(p);
1:aaea357: 			}
1:aaea357: 			
1:aaea357: 		}catch(IOException ie) 
1:aaea357: 		{
1:aaea357: 			logMessage(ie.getMessage()) ;
1:aaea357: 		}
1:aaea357: 		return baos.toByteArray();
1:aaea357: 	}
1:aaea357: 
1:aaea357: 
1:aaea357: 	private void runTest(Connection conn) throws SQLException
1:aaea357: 	{
1:aaea357: 		logMessage("Begin LogCheckum Setup Test");
1:aaea357: 		createTable(conn);
1:aaea357: 		insertAndCorrupt(conn, 11);
1:aaea357: 		logMessage("End LogChecksum Setup Test");
1:aaea357: 	}
1:aaea357: 	
1:aaea357:     void logMessage(String   str)
1:aaea357:     {
1:aaea357:         System.out.println(str);
1:aaea357:     }
1:aaea357: 
1:aaea357: 	public static void main(String[] argv) throws Throwable {
1:aaea357:         LogChecksumSetup lctest = new LogChecksumSetup();
1:aaea357:    		ij.getPropertyArg(argv); 
1:aaea357:         Connection conn = ij.startJBMS();
1:aaea357:         conn.setAutoCommit(false);
1:aaea357: 
1:aaea357:         try {
1:aaea357:             lctest.runTest(conn);
1:aaea357:         }
1:aaea357:         catch (SQLException sqle) {
1:aaea357: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
1:aaea357:                 System.out, sqle);
1:aaea357: 			sqle.printStackTrace(System.out);
1:aaea357: 		}
1:aaea357:     }
1:aaea357: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.store.LogChecksumSetup
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: import java.sql.*;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.util.zip.CRC32;
1: import org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo;
1: import org.apache.derby.tools.ij;
1: 
1: /*
1:  * Purpose of this class is to simulate out of order incomplete 
1:  * log write corruption (see derby-96 for details) using the proxy storage
1:  * factory (org.apache.derbyTesting.functionTests.util.corruptio.
1:  * CorruptDiskStorageFactory) instead of the default storage factory.
1:  * By defailt all io is delegated to the default database storage factory,
1:  * except when corruption is enabled through CorruptibleIo class.
1:  * Proxy storage factory is loaded using the following properties in 
1:  * the test properties file:
1:  * derby.subSubProtocol.csf=org.apache.derbyTesting.functionTests.
1:  *             util.corruptio.CorruptDiskStorageFactory
1:  *  database=jdbc:derby:csf:wombat
1:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
1:  * @version 1.0
1:  * @see CorruptibleIo
1:  */
1: 
1: public class LogChecksumSetup{
1: 
1: 	private CorruptibleIo cbio;
1: 
1: 	LogChecksumSetup()
1: 	{
1: 		cbio = CorruptibleIo.getInstance();
1: 	}
1: 	
1: 	/**
1: 	 * Insert some rows into the table and corrupt the log for the last row,
1: 	 * so when we recover , there should be one row less even though we committed.
1: 	 */
1: 	void insertAndCorrupt(Connection conn, int rowCount) throws SQLException {
1: 
1: 		PreparedStatement ps = conn.prepareStatement("INSERT INTO " + 
1: 													 "T1" + 
1: 													 " VALUES(?,?,?)");
1: 
1: 		java.util.Random r = new java.util.Random();
1: 		CRC32 checksum = new CRC32(); // holder for the checksum
1: 		boolean corrupt = false;
1: 		for (int i = 0; i < rowCount; i++) {
1: 			
1: 			//setup last row for log corruption
1: 			if (i == (rowCount -1 ))
1: 			{
1: 				// Note: offset/len for corruption  here refers to 
1: 				// the actual log write request
1: 				// that is being done for this insert. 
1: 				setupLogCorruption(50, 10);
1: 				corrupt = true;
1: 			}
1: 			ps.setInt(1, i); // ID
1: 			byte[] dataBytes  = generateBinaryData(r, 90000 , 1000 * i);
1: 			ps.setBytes(2, dataBytes); 
1: 			//calculate checksum for blob data 
1: 			checksum.update(dataBytes, 0, dataBytes.length);
1: 			checksum.reset();
1: 			checksum.update(dataBytes, 0, dataBytes.length);
1: 			ps.setLong(3, checksum.getValue());
1: 			ps.executeUpdate();
1: 			conn.commit();
1: 		}
1: 	}
1: 
1: 		
1: 	/**
1: 	 * update some rows in the table and corrupt the log for the last row,
1: 	 * so when we recover , All checsum should be correct because corrupted 
1: 	 * log transaction should been rolled back.
1: 	 */
1: 
1: 	void updateAndCorrupt(Connection conn, int rowCount) throws SQLException{
1: 
1: 		PreparedStatement ps = conn.prepareStatement("update " + "T1" + 
1: 													 " SET " +
1: 													 "DATA=?, DATACHECKSUM=? where ID=?");
1: 		
1: 		java.util.Random r = new java.util.Random();
1: 		CRC32 checksum = new CRC32(); // holder for the checksum
1: 		int updateCount = 0;
1: 		boolean corrupt = false;
1: 		for (int i = 0; i < rowCount; i++) {
1: 			
1: 			//setup last row for log corruption
1: 			if (i == (rowCount -1 ))
1: 			{
1: 				// Note: offset/len for corruption  here refers to 
1: 				// the actual log write request
1: 				// that is being done for this insert. 
1: 				setupLogCorruption(50, 10);
1: 				corrupt = true;
1: 			}
1: 			byte[] dataBytes  = generateBinaryData(r, 1234 , 5000 * i);
1: 			ps.setBytes(1, dataBytes); 
1: 
1: 			// calculate checksum for blob data 
1: 			checksum.update(dataBytes, 0, dataBytes.length);
1: 			checksum.reset();
1: 			checksum.update(dataBytes, 0, dataBytes.length);
1: 
1: 			ps.setLong(2, checksum.getValue());
1: 			ps.setInt(3, i); // ID
1: 			updateCount +=  ps.executeUpdate();
1: 			conn.commit();
1: 		}
1: 	}
1: 
1: 
1: 	/*
1: 	 * read the data from the table and verify the blob data using the 
1: 	 * checksum and make sure that expected number rows exist in the table. 
1: 	 * 
1: 	 */
1: 	void verifyData(Connection conn, int expectedRowCount) throws SQLException {
1: 		
1: 		Statement s = conn.createStatement();
1: 		CRC32 checksum = new CRC32(); // holder for the checksum
1: 		
1: 		ResultSet rs = s.executeQuery("SELECT DATA , DATACHECKSUM, ID FROM "
1: 									  + "T1" );
1: 		int count = 0;
1: 		while(rs.next())
1: 		{
1: 			byte[] dataBytes = rs.getBytes(1);
1: 			long ckmRead = rs.getLong(2);
1: 			int id = rs.getInt(3);
1: 
1: 			checksum.reset();
1: 			checksum.update(dataBytes, 0, dataBytes.length);
1: 
1: 			if(checksum.getValue() != ckmRead )
1: 			{
1: 				logMessage("CHECKSUMs ARE NOT MATCHING");
1: 				logMessage("ID=" + id + " Checksum From DB:" + ckmRead);
1: 				logMessage("Recalcaulted sum :" + checksum.getValue());
1: 				logMessage("Length of Data:" +  dataBytes.length);
1: 			}
1: 			
1: 			count++;
1: 		}
1: 		conn.commit();
1: 
1: 		if(count != expectedRowCount)
1: 		{
1: 			logMessage("Expected Number Of Rows (" + 
1: 					   expectedRowCount + ")" +  "!="  + 
1: 					   "No Of rows in the Table(" + 
1: 					   count + ")");
1: 		}
1: 	}
1: 
1: 	/* 
1: 	 * create the tables that are used by this test.
1: 	 */
1: 	private  void createTable(Connection conn) throws SQLException {
1: 
1: 		Statement s = conn.createStatement();
1: 		s.executeUpdate("CREATE TABLE " + "T1" + "(ID INT," +
1: 						"DATA BLOB(300000),"+ 
1: 						"DATACHECKSUM BIGINT)");
1: 		conn.commit();
1: 		s.close();
1: 	}
1: 
1: 	/*
1: 	 * Log is corrupted using the corrupt storage factory. 
1: 	 * setup offset/length where we want the transaction 
1: 	 * log to be corrupted. Transaction tat the corruption 
1: 	 * is simulated  on should be rolled back because the log check
1: 	 * should identify that the writes were incomplete.  
1: 	 */
1: 	private void setupLogCorruption(int off , int len)
1: 	{
1: 		cbio.setLogCorruption(true);
1: 		cbio.setOffset(off); 
1: 		cbio.setLength(len); 
1: 	}
1: 
1: 
1: 	/*
1: 	 * utility routine to generate random byte array of data.
1: 	 */
1: 	private  byte[] generateBinaryData(java.util.Random r, 
1: 											 int factor,
1: 											 int size)	{
1: 		
1: 		ByteArrayOutputStream baos = new ByteArrayOutputStream(64);
1: 		try{
1: 			DataOutputStream daos = new DataOutputStream(baos);
1: 			for(int i = 0 ; i < size ; i++)
1: 			{
1: 				int p = r.nextInt() % factor;
1: 				if (p < 0)
1: 					p = p * -1;
1: 				daos.writeInt(p);
1: 			}
1: 			
1: 		}catch(IOException ie) 
1: 		{
1: 			logMessage(ie.getMessage()) ;
1: 		}
1: 		return baos.toByteArray();
1: 	}
1: 
1: 
1: 	private void runTest(Connection conn) throws SQLException
1: 	{
1: 		logMessage("Begin LogCheckum Setup Test");
1: 		createTable(conn);
1: 		insertAndCorrupt(conn, 11);
1: 		logMessage("End LogChecksum Setup Test");
1: 	}
1: 	
1:     void logMessage(String   str)
1:     {
1:         System.out.println(str);
1:     }
1: 
1: 	public static void main(String[] argv) throws Throwable {
1:         LogChecksumSetup lctest = new LogChecksumSetup();
1:    		ij.getPropertyArg(argv); 
1:         Connection conn = ij.startJBMS();
1:         conn.setAutoCommit(false);
1: 
1:         try {
1:             lctest.runTest(conn);
1:         }
1:         catch (SQLException sqle) {
1: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
1:                 System.out, sqle);
1: 			sqle.printStackTrace(System.out);
1: 		}
1:     }
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:3755119
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyTesting.functionTests.store.LogChecksumSetup
0: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.store;
0: import java.sql.*;
0: import java.io.ByteArrayOutputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.util.zip.CRC32;
0: import org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo;
0: import org.apache.derby.tools.ij;
0: 
0: /*
0:  * Purpose of this class is to simulate out of order incomplete 
0:  * log write corruption (see derby-96 for details) using the proxy storage
0:  * factory (org.apache.derbyTesting.functionTests.util.corruptio.
0:  * CorruptDiskStorageFactory) instead of the default storage factory.
0:  * By defailt all io is delegated to the default database storage factory,
0:  * except when corruption is enabled through CorruptibleIo class.
0:  * Proxy storage factory is loaded using the following properties in 
0:  * the test properties file:
0:  * derby.subSubProtocol.csf=org.apache.derbyTesting.functionTests.
0:  *             util.corruptio.CorruptDiskStorageFactory
0:  *  database=jdbc:derby:csf:wombat
0:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
0:  * @version 1.0
0:  * @see CorruptibleIo
0:  */
0: 
0: public class LogChecksumSetup{
0: 
0: 	private CorruptibleIo cbio;
0: 
0: 	LogChecksumSetup()
0: 	{
0: 		cbio = CorruptibleIo.getInstance();
0: 	}
0: 	
0: 	/**
0: 	 * Insert some rows into the table and corrupt the log for the last row,
0: 	 * so when we recover , there should be one row less even though we committed.
0: 	 */
0: 	void insertAndCorrupt(Connection conn, int rowCount) throws SQLException {
0: 
0: 		PreparedStatement ps = conn.prepareStatement("INSERT INTO " + 
0: 													 "T1" + 
0: 													 " VALUES(?,?,?)");
0: 
0: 		java.util.Random r = new java.util.Random();
0: 		CRC32 checksum = new CRC32(); // holder for the checksum
0: 		boolean corrupt = false;
0: 		for (int i = 0; i < rowCount; i++) {
0: 			
0: 			//setup last row for log corruption
0: 			if (i == (rowCount -1 ))
0: 			{
0: 				// Note: offset/len for corruption  here refers to 
0: 				// the actual log write request
0: 				// that is being done for this insert. 
0: 				setupLogCorruption(50, 10);
0: 				corrupt = true;
0: 			}
0: 			ps.setInt(1, i); // ID
0: 			byte[] dataBytes  = generateBinaryData(r, 90000 , 1000 * i);
0: 			ps.setBytes(2, dataBytes); 
0: 			//calculate checksum for blob data 
0: 			checksum.update(dataBytes, 0, dataBytes.length);
0: 			checksum.reset();
0: 			checksum.update(dataBytes, 0, dataBytes.length);
0: 			ps.setLong(3, checksum.getValue());
0: 			ps.executeUpdate();
0: 			conn.commit();
0: 		}
0: 	}
0: 
0: 		
0: 	/**
0: 	 * update some rows in the table and corrupt the log for the last row,
0: 	 * so when we recover , All checsum should be correct because corrupted 
0: 	 * log transaction should been rolled back.
0: 	 */
0: 
0: 	void updateAndCorrupt(Connection conn, int rowCount) throws SQLException{
0: 
0: 		PreparedStatement ps = conn.prepareStatement("update " + "T1" + 
0: 													 " SET " +
0: 													 "DATA=?, DATACHECKSUM=? where ID=?");
0: 		
0: 		java.util.Random r = new java.util.Random();
0: 		CRC32 checksum = new CRC32(); // holder for the checksum
0: 		int updateCount = 0;
0: 		boolean corrupt = false;
0: 		for (int i = 0; i < rowCount; i++) {
0: 			
0: 			//setup last row for log corruption
0: 			if (i == (rowCount -1 ))
0: 			{
0: 				// Note: offset/len for corruption  here refers to 
0: 				// the actual log write request
0: 				// that is being done for this insert. 
0: 				setupLogCorruption(50, 10);
0: 				corrupt = true;
0: 			}
0: 			byte[] dataBytes  = generateBinaryData(r, 1234 , 5000 * i);
0: 			ps.setBytes(1, dataBytes); 
0: 
0: 			// calculate checksum for blob data 
0: 			checksum.update(dataBytes, 0, dataBytes.length);
0: 			checksum.reset();
0: 			checksum.update(dataBytes, 0, dataBytes.length);
0: 
0: 			ps.setLong(2, checksum.getValue());
0: 			ps.setInt(3, i); // ID
0: 			updateCount +=  ps.executeUpdate();
0: 			conn.commit();
0: 		}
0: 	}
0: 
0: 
0: 	/*
0: 	 * read the data from the table and verify the blob data using the 
0: 	 * checksum and make sure that expected number rows exist in the table. 
0: 	 * 
0: 	 */
0: 	void verifyData(Connection conn, int expectedRowCount) throws SQLException {
0: 		
0: 		Statement s = conn.createStatement();
0: 		CRC32 checksum = new CRC32(); // holder for the checksum
0: 		
0: 		ResultSet rs = s.executeQuery("SELECT DATA , DATACHECKSUM, ID FROM "
0: 									  + "T1" );
0: 		int count = 0;
0: 		while(rs.next())
0: 		{
0: 			byte[] dataBytes = rs.getBytes(1);
0: 			long ckmRead = rs.getLong(2);
0: 			int id = rs.getInt(3);
0: 
0: 			checksum.reset();
0: 			checksum.update(dataBytes, 0, dataBytes.length);
0: 
0: 			if(checksum.getValue() != ckmRead )
0: 			{
0: 				logMessage("CHECKSUMs ARE NOT MATCHING");
0: 				logMessage("ID=" + id + " Checksum From DB:" + ckmRead);
0: 				logMessage("Recalcaulted sum :" + checksum.getValue());
0: 				logMessage("Length of Data:" +  dataBytes.length);
0: 			}
0: 			
0: 			count++;
0: 		}
0: 		conn.commit();
0: 
0: 		if(count != expectedRowCount)
0: 		{
0: 			logMessage("Expected Number Of Rows (" + 
0: 					   expectedRowCount + ")" +  "!="  + 
0: 					   "No Of rows in the Table(" + 
0: 					   count + ")");
0: 		}
0: 	}
0: 
0: 	/* 
0: 	 * create the tables that are used by this test.
0: 	 */
0: 	private  void createTable(Connection conn) throws SQLException {
0: 
0: 		Statement s = conn.createStatement();
0: 		s.executeUpdate("CREATE TABLE " + "T1" + "(ID INT," +
0: 						"DATA BLOB(300000),"+ 
0: 						"DATACHECKSUM BIGINT)");
0: 		conn.commit();
0: 		s.close();
0: 	}
0: 
0: 	/*
0: 	 * Log is corrupted using the corrupt storage factory. 
0: 	 * setup offset/length where we want the transaction 
0: 	 * log to be corrupted. Transaction tat the corruption 
0: 	 * is simulated  on should be rolled back because the log check
0: 	 * should identify that the writes were incomplete.  
0: 	 */
0: 	private void setupLogCorruption(int off , int len)
0: 	{
0: 		cbio.setLogCorruption(true);
0: 		cbio.setOffset(off); 
0: 		cbio.setLength(len); 
0: 	}
0: 
0: 
0: 	/*
0: 	 * utility routine to generate random byte array of data.
0: 	 */
0: 	private  byte[] generateBinaryData(java.util.Random r, 
0: 											 int factor,
0: 											 int size)	{
0: 		
0: 		ByteArrayOutputStream baos = new ByteArrayOutputStream(64);
0: 		try{
0: 			DataOutputStream daos = new DataOutputStream(baos);
0: 			for(int i = 0 ; i < size ; i++)
0: 			{
0: 				int p = r.nextInt() % factor;
0: 				if (p < 0)
0: 					p = p * -1;
0: 				daos.writeInt(p);
0: 			}
0: 			
0: 		}catch(IOException ie) 
0: 		{
0: 			logMessage(ie.getMessage()) ;
0: 		}
0: 		return baos.toByteArray();
0: 	}
0: 
0: 
0: 	private void runTest(Connection conn) throws SQLException
0: 	{
0: 		logMessage("Begin LogCheckum Setup Test");
0: 		createTable(conn);
0: 		insertAndCorrupt(conn, 11);
0: 		logMessage("End LogChecksum Setup Test");
0: 	}
0: 	
0:     void logMessage(String   str)
0:     {
0:         System.out.println(str);
0:     }
0: 
0: 	public static void main(String[] argv) throws Throwable {
0:         LogChecksumSetup lctest = new LogChecksumSetup();
0:    		ij.getPropertyArg(argv); 
0:         Connection conn = ij.startJBMS();
0:         conn.setAutoCommit(false);
0: 
0:         try {
0:             lctest.runTest(conn);
0:         }
0:         catch (SQLException sqle) {
0: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
0:                 System.out, sqle);
0: 			sqle.printStackTrace(System.out);
0: 		}
0:     }
0: }
============================================================================