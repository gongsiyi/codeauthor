1:28e234d: /*
1:28e234d: 
1:28e234d:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2I_10_3
1:28e234d: 
1:28e234d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:28e234d:    contributor license agreements.  See the NOTICE file distributed with
1:28e234d:    this work for additional information regarding copyright ownership.
1:28e234d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:28e234d:    (the "License"); you may not use this file except in compliance with
1:28e234d:    the License.  You may obtain a copy of the License at
1:28e234d: 
1:28e234d:       http://www.apache.org/licenses/LICENSE-2.0
1:28e234d: 
1:28e234d:    Unless required by applicable law or agreed to in writing, software
1:28e234d:    distributed under the License is distributed on an "AS IS" BASIS,
1:28e234d:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:28e234d:    See the License for the specific language governing permissions and
1:28e234d:    limitations under the License.
1:28e234d: 
1:28e234d:  */
1:28e234d: 
1:28e234d: package org.apache.derby.impl.store.access.btree.index;
1:28e234d: 
1:28e234d: import java.io.IOException;
1:28e234d: import java.io.ObjectOutput;
1:28e234d: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:28e234d: 
1:28e234d: /*
1:787ceb4:  * @derby.formatId ACCESS_B2I_V4_ID
1:28e234d:  *
1:787ceb4:  * @derby.purpose   The tag that describes the on disk representation of the B2I
1:28e234d:  *            conglomerate object.  Access contains no "directory" of 
1:28e234d:  *            conglomerate information.  In order to bootstrap opening a file
1:28e234d:  *            it encodes the factory that can open the conglomerate in the 
1:28e234d:  *            conglomerate id itself.  There exists a single B2IFactory which
1:28e234d:  *            must be able to read all btree format id's.  
1:28e234d:  *
1:28e234d:  *            This format was used for all Derby database B2I's in version 10.3.
1:28e234d:  *
1:787ceb4:  * @derby.upgrade   The format id of this object is currently always read from disk
1:28e234d:  *            as the first field of the conglomerate itself.  A bootstrap
1:28e234d:  *            problem exists as we don't know the format id of the B2I 
1:28e234d:  *            until we are in the "middle" of reading the B2I.  Thus the
1:28e234d:  *            base B2I implementation must be able to read and write 
1:28e234d:  *            all formats based on the reading the 
1:28e234d:  *            "format_of_this_conglomerate". 
1:28e234d:  *
1:28e234d:  *            soft upgrade to ACCESS_B2I_V5_ID:
1:28e234d:  *                read:
1:28e234d:  *                    old format is readable by current B2I implementation,
1:28e234d:  *                    with automatic in memory creation of default
1:28e234d:  *                    isUniqueWithDuplicateNulls value of false.
1:28e234d:  *                    No code other than readExternal and writeExternal need 
1:28e234d:  *                    know about old format.
1:28e234d:  *                write:
1:28e234d:  *                    will never write out new format id in soft upgrade mode.
1:28e234d:  *                    Code in readExternal and writeExternal handles writing
1:28e234d:  *                    correct version.  Code in the factory handles making
1:28e234d:  *                    sure new conglomerates use the B2I_v10_3 class
1:28e234d:  *                    that will write out old format info.
1:28e234d:  *
1:28e234d:  *            hard upgrade to ACCESS_B2I_V5_ID:
1:28e234d:  *                read:
1:28e234d:  *                    old format is readable by current B2I implementation,
1:28e234d:  *                    with automatic in memory creation of default
1:28e234d:  *                    isUniqueWithDuplicateNulls value of false.
1:28e234d:  *
1:28e234d:  *                write:
1:28e234d:  *                    Only "lazy" upgrade will happen.  New format will only
1:28e234d:  *                    get written for new conglomerate created after the 
1:28e234d:  *                    upgrade.  Old conglomerates continue to be handled the
1:28e234d:  *                    same as soft upgrade.
1:28e234d:  *
1:787ceb4:  * @derby.diskLayout 
1:28e234d:  *     format_of_this_conlgomerate(byte[])
1:28e234d:  *     containerid(long)
1:28e234d:  *     segmentid(int)
1:28e234d:  *     number_of_key_fields(int)
1:28e234d:  *     number_of_unique_columns(int)
1:28e234d:  *     allow_duplicates(boolean)
1:28e234d:  *     maintain_parent_links(boolean)
1:28e234d:  *     array_of_format_ids(byte[][])
1:28e234d:  *     baseConglomerateId(long)
1:28e234d:  *     rowLocationColumn(int)
1:28e234d:  *     ascend_column_info(FormatableBitSet)
1:28e234d:  *     collation_ids(compressed array of ints)
1:28e234d:  *
1:28e234d:  */
1:28e234d: 
1:28e234d: /**
1:28e234d:  * Class used to instantiate 10.3 version of the B2I object.
1:28e234d:  *
1:28e234d:  * This class implements the format of the B2I object as existed in 
1:28e234d:  * the 10.3 release of Derby.  In subsequent releases
1:28e234d:  * the format was enhanced to store the uniqueWithDuplicateNulls attribute
1:28e234d:  * of the index.
1:28e234d:  *
1:28e234d:  * For upgrade purpose all 10.3 and prior versions are assumed to have
1:28e234d:  * false for the uniqueWithDuplicateNulls attribute.
1:28e234d:  *
1:28e234d:  * This class reads and writes the V4 version to/from disk and reads/writes
1:28e234d:  * current in-memory version of the data structure.
1:28e234d:  *
1:28e234d:  */
1:28e234d: public class B2I_10_3 extends B2I {
1:28e234d: 
1:28e234d:     /**
1:28e234d:      * Return my format identifier.
1:28e234d:      * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:28e234d:      */
1:28e234d:     public int getTypeFormatId() {
1:28e234d:         return StoredFormatIds.ACCESS_B2I_V4_ID;
1:28e234d:     }
1:28e234d: 
1:28e234d:     /**
1:28e234d:      * Store the stored representation of the column value in the
1:28e234d:      * stream.
1:28e234d:      * <p>
1:28e234d:      * For more detailed description of the format see documentation
1:28e234d:      * at top of file.
1:28e234d:      *
1:28e234d:      * @see java.io.Externalizable#writeExternal
1:28e234d:      **/
1:28e234d:     
1:28e234d:     public void writeExternal(ObjectOutput out) throws IOException {
1:28e234d:         writeExternal_v10_3(out);
1:28e234d:     }
1:28e234d:     
1:28e234d: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1:  * @derby.formatId ACCESS_B2I_V4_ID
1:  * @derby.purpose   The tag that describes the on disk representation of the B2I
/////////////////////////////////////////////////////////////////////////
1:  * @derby.upgrade   The format id of this object is currently always read from disk
/////////////////////////////////////////////////////////////////////////
1:  * @derby.diskLayout 
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:28e234d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.store.access.btree.index.B2I_10_3
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree.index;
1: 
1: import java.io.IOException;
1: import java.io.ObjectOutput;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: /*
0:  * @format_id ACCESS_B2I_V4_ID
1:  *
0:  * @purpose   The tag that describes the on disk representation of the B2I
1:  *            conglomerate object.  Access contains no "directory" of 
1:  *            conglomerate information.  In order to bootstrap opening a file
1:  *            it encodes the factory that can open the conglomerate in the 
1:  *            conglomerate id itself.  There exists a single B2IFactory which
1:  *            must be able to read all btree format id's.  
1:  *
1:  *            This format was used for all Derby database B2I's in version 10.3.
1:  *
0:  * @upgrade   The format id of this object is currently always read from disk
1:  *            as the first field of the conglomerate itself.  A bootstrap
1:  *            problem exists as we don't know the format id of the B2I 
1:  *            until we are in the "middle" of reading the B2I.  Thus the
1:  *            base B2I implementation must be able to read and write 
1:  *            all formats based on the reading the 
1:  *            "format_of_this_conglomerate". 
1:  *
1:  *            soft upgrade to ACCESS_B2I_V5_ID:
1:  *                read:
1:  *                    old format is readable by current B2I implementation,
1:  *                    with automatic in memory creation of default
1:  *                    isUniqueWithDuplicateNulls value of false.
1:  *                    No code other than readExternal and writeExternal need 
1:  *                    know about old format.
1:  *                write:
1:  *                    will never write out new format id in soft upgrade mode.
1:  *                    Code in readExternal and writeExternal handles writing
1:  *                    correct version.  Code in the factory handles making
1:  *                    sure new conglomerates use the B2I_v10_3 class
1:  *                    that will write out old format info.
1:  *
1:  *            hard upgrade to ACCESS_B2I_V5_ID:
1:  *                read:
1:  *                    old format is readable by current B2I implementation,
1:  *                    with automatic in memory creation of default
1:  *                    isUniqueWithDuplicateNulls value of false.
1:  *
1:  *                write:
1:  *                    Only "lazy" upgrade will happen.  New format will only
1:  *                    get written for new conglomerate created after the 
1:  *                    upgrade.  Old conglomerates continue to be handled the
1:  *                    same as soft upgrade.
1:  *
0:  * @disk_layout 
1:  *     format_of_this_conlgomerate(byte[])
1:  *     containerid(long)
1:  *     segmentid(int)
1:  *     number_of_key_fields(int)
1:  *     number_of_unique_columns(int)
1:  *     allow_duplicates(boolean)
1:  *     maintain_parent_links(boolean)
1:  *     array_of_format_ids(byte[][])
1:  *     baseConglomerateId(long)
1:  *     rowLocationColumn(int)
1:  *     ascend_column_info(FormatableBitSet)
1:  *     collation_ids(compressed array of ints)
1:  *
1:  */
1: 
1: /**
1:  * Class used to instantiate 10.3 version of the B2I object.
1:  *
1:  * This class implements the format of the B2I object as existed in 
1:  * the 10.3 release of Derby.  In subsequent releases
1:  * the format was enhanced to store the uniqueWithDuplicateNulls attribute
1:  * of the index.
1:  *
1:  * For upgrade purpose all 10.3 and prior versions are assumed to have
1:  * false for the uniqueWithDuplicateNulls attribute.
1:  *
1:  * This class reads and writes the V4 version to/from disk and reads/writes
1:  * current in-memory version of the data structure.
1:  *
1:  */
1: public class B2I_10_3 extends B2I {
1: 
1:     /**
1:      * Return my format identifier.
1:      * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:      */
1:     public int getTypeFormatId() {
1:         return StoredFormatIds.ACCESS_B2I_V4_ID;
1:     }
1: 
1:     /**
1:      * Store the stored representation of the column value in the
1:      * stream.
1:      * <p>
1:      * For more detailed description of the format see documentation
1:      * at top of file.
1:      *
1:      * @see java.io.Externalizable#writeExternal
1:      **/
1:     
1:     public void writeExternal(ObjectOutput out) throws IOException {
1:         writeExternal_v10_3(out);
1:     }
1:     
1: }
============================================================================