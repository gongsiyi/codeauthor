1:fe77ca5: /*
5:fe77ca5: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.Statement
1:7ecc1f2: 
1:4590cd8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4590cd8:    contributor license agreements.  See the NOTICE file distributed with
1:4590cd8:    this work for additional information regarding copyright ownership.
1:4590cd8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:4590cd8:    (the "License"); you may not use this file except in compliance with
1:4590cd8:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.sql;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.error.StandardException;
1:fe77ca5: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:fe77ca5: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * The Statement interface provides a way of giving a statement to the
1:fe77ca5:  * language module, preparing the statement, and executing it. It also
1:fe77ca5:  * provides some support for stored statements. Simple, non-stored,
1:fe77ca5:  * non-parameterized statements can be executed with the execute() method.
1:fe77ca5:  * Parameterized statements must use prepare(). To get the stored query
1:fe77ca5:  * plan for a statement, use get().
1:fe77ca5:  * <p>
1:fe77ca5:  * This interface will have different implementations for the execution-only
1:fe77ca5:  * and compile-and-execute versions of the product. In the execution-only
1:fe77ca5:  * version, some of the methods will do nothing but raise exceptions to
1:fe77ca5:  * indicate that they are not implemented.
1:fe77ca5:  * <p>
1:fe77ca5:  * There is a Statement factory in the Connection interface in the Database
1:fe77ca5:  * module, which uses the one provided in LanguageFactory.
1:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: public interface Statement
1:fe77ca5: {
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Generates an execution plan without executing it.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return A PreparedStatement that allows execution of the execution
1:fe77ca5: 	 *	   plan.
1:fe77ca5: 	 * @exception StandardException	Thrown if this is an
1:fe77ca5: 	 *	   execution-only version of the module (the prepare() method
1:fe77ca5: 	 *	   relies on compilation).
1:fe77ca5: 	 */
1:fe77ca5: 	PreparedStatement	prepare(LanguageConnectionContext lcc) throws StandardException;
1:2dc0b91: 	/**
1:2dc0b91: 	 * Generates an execution plan without executing it.
1:2dc0b91: 	 *
1:2dc0b91: 	 * @param 	lcc			the language connection context
1:2dc0b91: 	 * @param 	allowInternalSyntax	If this statement is for a metadata call then 
1:2dc0b91: 	 *	   we will allow internal sql syntax on such statement. This internal
1:2dc0b91: 	 *	   sql syntax is not available to a user sql statement.
1:2dc0b91: 	 *
1:2dc0b91: 	 * @return A PreparedStatement that allows execution of the execution
1:2dc0b91: 	 *	   plan.
1:2dc0b91: 	 * @exception StandardException	Thrown if this is an
1:2dc0b91: 	 *	   execution-only version of the module (the prepare() method
1:2dc0b91: 	 *	   relies on compilation).
1:2dc0b91: 	 */
1:2dc0b91: 	PreparedStatement	prepare(LanguageConnectionContext lcc, boolean allowInternalSyntax) throws StandardException;
1:2dc0b91: 	
1:fe77ca5: 	/**
1:fe77ca5: 	 * Generates an execution plan given a set of named parameters.
1:fe77ca5: 	 * For generating a storable prepared statement (which
1:fe77ca5: 	 * has some extensions over a standard prepared statement).
1:fe77ca5: 	 *
1:6b50965: 	 * @param 	lcc					Compiler state variable.
1:6b50965: 	 * @param 	ps					Prepared statement
1:fe77ca5: 	 * @param	paramDefaults		Default parameter values to use for
1:fe77ca5: 	 *								optimization
1:fe77ca5: 	 * @param	spsSchema schema of the stored prepared statement
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return A Storable PreparedStatement that allows execution of the execution
1:fe77ca5: 	 *	   plan.
1:fe77ca5: 	 * @exception StandardException	Thrown if this is an
1:fe77ca5: 	 *	   execution-only version of the module (the prepare() method
1:fe77ca5: 	 *	   relies on compilation).
1:fe77ca5: 	 */
1:fe77ca5: 	public	PreparedStatement	prepareStorable
1:fe77ca5: 	( 
1:fe77ca5: 		LanguageConnectionContext lcc,
1:fe77ca5: 		PreparedStatement ps, 
1:fe77ca5: 		Object[]			paramDefaults,
1:fe77ca5: 		SchemaDescriptor	spsSchema,
1:fe77ca5: 		boolean	internalSQL
1:fe77ca5: 	)
1:fe77ca5: 		throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 *	Return the SQL string that this statement is for.
1:fe77ca5: 	 *
1:fe77ca5: 	 *	@return the SQL string this statement is for.
1:fe77ca5: 	 */
1:fe77ca5: 	String getSource();
1:fe77ca5: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:4590cd8
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param 	lcc					Compiler state variable.
1: 	 * @param 	ps					Prepared statement
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:2dc0b91
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Generates an execution plan without executing it.
1: 	 *
1: 	 * @param 	lcc			the language connection context
1: 	 * @param 	allowInternalSyntax	If this statement is for a metadata call then 
1: 	 *	   we will allow internal sql syntax on such statement. This internal
1: 	 *	   sql syntax is not available to a user sql statement.
1: 	 *
1: 	 * @return A PreparedStatement that allows execution of the execution
1: 	 *	   plan.
1: 	 * @exception StandardException	Thrown if this is an
1: 	 *	   execution-only version of the module (the prepare() method
1: 	 *	   relies on compilation).
1: 	 */
1: 	PreparedStatement	prepare(LanguageConnectionContext lcc, boolean allowInternalSyntax) throws StandardException;
1: 	
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ddc6f41
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.Statement
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: /**
1:  * The Statement interface provides a way of giving a statement to the
1:  * language module, preparing the statement, and executing it. It also
1:  * provides some support for stored statements. Simple, non-stored,
1:  * non-parameterized statements can be executed with the execute() method.
1:  * Parameterized statements must use prepare(). To get the stored query
1:  * plan for a statement, use get().
1:  * <p>
1:  * This interface will have different implementations for the execution-only
1:  * and compile-and-execute versions of the product. In the execution-only
1:  * version, some of the methods will do nothing but raise exceptions to
1:  * indicate that they are not implemented.
1:  * <p>
1:  * There is a Statement factory in the Connection interface in the Database
1:  * module, which uses the one provided in LanguageFactory.
1:  *
0:  *	@author Jeff Lichtman
1:  */
1: public interface Statement
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	 * Generates an execution plan without executing it.
1: 	 *
1: 	 * @return A PreparedStatement that allows execution of the execution
1: 	 *	   plan.
1: 	 * @exception StandardException	Thrown if this is an
1: 	 *	   execution-only version of the module (the prepare() method
1: 	 *	   relies on compilation).
1: 	 */
1: 	PreparedStatement	prepare(LanguageConnectionContext lcc) throws StandardException;
1: 
1: 	/**
1: 	 * Generates an execution plan given a set of named parameters.
1: 	 * For generating a storable prepared statement (which
1: 	 * has some extensions over a standard prepared statement).
1: 	 *
0: 	 * @param 	compSchema			the compilation schema to use
1: 	 * @param	paramDefaults		Default parameter values to use for
1: 	 *								optimization
1: 	 * @param	spsSchema schema of the stored prepared statement
1: 	 *
1: 	 * @return A Storable PreparedStatement that allows execution of the execution
1: 	 *	   plan.
1: 	 * @exception StandardException	Thrown if this is an
1: 	 *	   execution-only version of the module (the prepare() method
1: 	 *	   relies on compilation).
1: 	 */
1: 	public	PreparedStatement	prepareStorable
1: 	( 
1: 		LanguageConnectionContext lcc,
1: 		PreparedStatement ps, 
1: 		Object[]			paramDefaults,
1: 		SchemaDescriptor	spsSchema,
1: 		boolean	internalSQL
1: 	)
1: 		throws StandardException;
1: 
1: 	/**
1: 	 *	Return the SQL string that this statement is for.
1: 	 *
1: 	 *	@return the SQL string this statement is for.
1: 	 */
1: 	String getSource();
1: 
0: 	public boolean getUnicode();
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: /**
0:  * The Statement interface provides a way of giving a statement to the
0:  * language module, preparing the statement, and executing it. It also
0:  * provides some support for stored statements. Simple, non-stored,
0:  * non-parameterized statements can be executed with the execute() method.
0:  * Parameterized statements must use prepare(). To get the stored query
0:  * plan for a statement, use get().
0:  * <p>
0:  * This interface will have different implementations for the execution-only
0:  * and compile-and-execute versions of the product. In the execution-only
0:  * version, some of the methods will do nothing but raise exceptions to
0:  * indicate that they are not implemented.
0:  * <p>
0:  * There is a Statement factory in the Connection interface in the Database
0:  * module, which uses the one provided in LanguageFactory.
0:  *
0:  *	@author Jeff Lichtman
0:  */
0: public interface Statement
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * Generates an execution plan without executing it.
0: 	 *
0: 	 * @return A PreparedStatement that allows execution of the execution
0: 	 *	   plan.
0: 	 * @exception StandardException	Thrown if this is an
0: 	 *	   execution-only version of the module (the prepare() method
0: 	 *	   relies on compilation).
0: 	 */
0: 	PreparedStatement	prepare(LanguageConnectionContext lcc) throws StandardException;
0: 
0: 	/**
0: 	 * Generates an execution plan given a set of named parameters.
0: 	 * For generating a storable prepared statement (which
0: 	 * has some extensions over a standard prepared statement).
0: 	 *
0: 	 * @param 	compSchema			the compilation schema to use
0: 	 * @param	paramDefaults		Default parameter values to use for
0: 	 *								optimization
0: 	 * @param	spsSchema schema of the stored prepared statement
0: 	 *
0: 	 * @return A Storable PreparedStatement that allows execution of the execution
0: 	 *	   plan.
0: 	 * @exception StandardException	Thrown if this is an
0: 	 *	   execution-only version of the module (the prepare() method
0: 	 *	   relies on compilation).
0: 	 */
0: 	public	PreparedStatement	prepareStorable
0: 	( 
0: 		LanguageConnectionContext lcc,
0: 		PreparedStatement ps, 
0: 		Object[]			paramDefaults,
0: 		SchemaDescriptor	spsSchema,
0: 		boolean	internalSQL
0: 	)
0: 		throws StandardException;
0: 
0: 	/**
0: 	 *	Return the SQL string that this statement is for.
0: 	 *
0: 	 *	@return the SQL string this statement is for.
0: 	 */
0: 	String getSource();
0: 
0: 	public boolean getUnicode();
0: 
0: }
============================================================================