1:fe77ca5: /*
1:985fc85: 
1:985fc85:    Derby - Class org.apache.derby.impl.tools.ij.ConnectionEnv
1:985fc85: 
1:11bc2d0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11bc2d0:    contributor license agreements.  See the NOTICE file distributed with
1:11bc2d0:    this work for additional information regarding copyright ownership.
1:11bc2d0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:11bc2d0:    (the "License"); you may not use this file except in compliance with
1:11bc2d0:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
2:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.impl.tools.ij;
1:fe77ca5: 
1:fe77ca5: import java.io.File;
1:fe77ca5: import java.io.FileNotFoundException;
1:4469400: import java.lang.reflect.InvocationTargetException;
1:fe77ca5: 
1:fe77ca5: import java.util.Hashtable;
1:fe77ca5: import java.util.Enumeration;
1:fe77ca5: import java.util.Properties;
1:fe77ca5: 
1:38520af: import java.security.AccessController;
1:38520af: import java.security.PrivilegedAction;
1:fe77ca5: import java.sql.Connection;
1:fe77ca5: import java.sql.DriverManager;
1:fe77ca5: import java.sql.SQLException;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.tools.JDBCDisplayUtil;
1:fe77ca5: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5: 	To enable multi-user use of ij.Main2
1:fe77ca5: 
1:fe77ca5:  */
1:fe77ca5: class ConnectionEnv {
1:16d3334: 	Hashtable<String,Session> sessions = new Hashtable<String,Session>();
1:fe77ca5: 	private Session currSession;
1:fe77ca5: 	private String tag;
1:fe77ca5: 	private boolean only;
1:fe77ca5: 	private static final String CONNECTION_PROPERTY = "ij.connection";
1:fe77ca5:     private String protocol;
1:fe77ca5: 
1:fe77ca5: 	ConnectionEnv(int userNumber, boolean printUserNumber, boolean theOnly) {
1:fe77ca5: 		if (printUserNumber)
1:fe77ca5: 			tag = "("+(userNumber+1)+")";
1:fe77ca5: 		only = theOnly;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		separate from the constructor so that connection
1:fe77ca5: 		failure does not prevent object creation.
1:fe77ca5: 	 */
1:4469400:     void init(LocalizedOutput out) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
1:fe77ca5: 
1:fe77ca5: 		Connection c = util.startJBMS(null,null);
1:fe77ca5: 
1:fe77ca5: 		// only load up ij.connection.* properties if there is
1:fe77ca5: 		// only one ConnectionEnv in the system.
1:fe77ca5: 		if (only) {
1:16d3334:             Properties p = AccessController.doPrivileged(new PrivilegedAction<Properties>() {
1:16d3334:             	public Properties run() {
1:38520af:                 	return System.getProperties();
1:38520af:             	}
1:38520af:             });
1:38520af:             protocol = p.getProperty(ij.PROTOCOL_PROPERTY);
1:fe77ca5: 
1:fe77ca5: 	        String prefix = CONNECTION_PROPERTY + ".";
1:fe77ca5: 		    for (Enumeration e = p.propertyNames(); e.hasMoreElements(); )
1:fe77ca5: 		    {
1:fe77ca5: 		    	String key = (String)e.nextElement();
1:fe77ca5: 		    	if (key.startsWith(prefix)) {
1:fe77ca5: 		    		String name = key.substring(prefix.length());
1:fe77ca5: 		    		installConnection(name.toUpperCase(java.util.Locale.ENGLISH), 
1:fe77ca5: 						p.getProperty(key), out);
1:fe77ca5: 		    	}
1:fe77ca5: 		    }
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		if (c!=null) // have a database from the startup?
1:fe77ca5: 		{
1:fe77ca5: 			String sname=Session.DEFAULT_NAME+sessions.size();
1:fe77ca5: 			Session s = new Session(c,tag,sname);
1:fe77ca5: 			sessions.put(sname,s);
1:fe77ca5: 			currSession = s;
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	void doPrompt(boolean newStatement, LocalizedOutput out) {
1:fe77ca5: 		if (currSession != null) currSession.doPrompt(newStatement, out, sessions.size()>1);
1:fe77ca5: 		else utilMain.doPrompt(newStatement, out, tag);
1:fe77ca5: 	}
1:fe77ca5: 	
1:fe77ca5: 	Connection getConnection() {
1:fe77ca5: 		if (currSession == null) return null;
1:fe77ca5: 		return currSession.getConnection();
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		Making a new connection, add it to the pool, and make it current.
1:fe77ca5: 	 */
1:fe77ca5: 	void addSession(Connection conn,String name) {
1:fe77ca5: 		String aName;
1:fe77ca5: 		if (name == null) aName = getUniqueConnectionName();
1:fe77ca5: 		else aName = name;
1:fe77ca5: 		Session s = new Session(conn, tag, aName);
1:fe77ca5: 		sessions.put(aName, s);
1:fe77ca5: 		currSession = s;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5:   //returns a unique Connection# name by going through existing sessions
1:fe77ca5:   public String getUniqueConnectionName() {
1:fe77ca5:     int newNum = 0;
1:fe77ca5:     boolean newConnectionNameOk = false;
1:fe77ca5:     String newConnectionName = "";
1:16d3334:     Enumeration<String> e;
1:fe77ca5:     while (!newConnectionNameOk){
1:fe77ca5:       newConnectionName = Session.DEFAULT_NAME + newNum;
1:fe77ca5:       newConnectionNameOk = true;
1:df9af89:       e = sessions.keys();
1:df9af89:       while (e.hasMoreElements() && newConnectionNameOk){
1:16d3334:         if ((e.nextElement()).equals(newConnectionName))
1:fe77ca5:            newConnectionNameOk = false;
1:fe77ca5:       }
1:fe77ca5:       newNum = newNum + 1;
1:fe77ca5:     }
1:fe77ca5:     return newConnectionName;
1:fe77ca5:   }
1:fe77ca5: 
1:fe77ca5: 	Session getSession() {
1:fe77ca5: 		return currSession;
1:fe77ca5: 	}
1:fe77ca5: 
1:16d3334: 	Hashtable<String,Session> getSessions() {
1:fe77ca5: 		return sessions;
1:fe77ca5: 	}
1:fe77ca5: 
1:e7a1236: 	Session getSession(String name) {
1:16d3334: 		return sessions.get(name);
1:e7a1236: 	}
1:e7a1236: 
1:fe77ca5: 	Session setCurrentSession(String name) {
1:16d3334: 		currSession = sessions.get(name);
1:fe77ca5: 		return currSession;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	boolean haveSession(String name) {
1:fe77ca5: 		return (name != null) && (sessions.size()>0) && (null != sessions.get(name));
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	void removeCurrentSession() throws SQLException {
1:fe77ca5: 		if (currSession ==null) return;
1:fe77ca5: 		sessions.remove(currSession.getName());
1:fe77ca5: 		currSession.close();
1:fe77ca5: 		currSession = null;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	void removeSession(String name) throws SQLException {
1:16d3334: 		Session s = sessions.remove(name);
1:fe77ca5: 		s.close();
1:fe77ca5: 		if (currSession == s)
1:fe77ca5: 			currSession = null;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	void removeAllSessions() throws SQLException {
1:fe77ca5: 		if (sessions == null || sessions.size() == 0)
1:fe77ca5: 			return;
1:fe77ca5: 		else
1:16d3334: 			for (Enumeration<String> e = sessions.keys(); e.hasMoreElements(); ) {
1:16d3334: 				String n = e.nextElement();
1:fe77ca5: 				removeSession(n);
1:fe77ca5: 			}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	private void installConnection(String name, String value, LocalizedOutput out) throws SQLException {
1:fe77ca5: 		// add protocol if no driver matches url
1:fe77ca5: 		boolean noDriver = false;
1:fe77ca5: 		try {
1:fe77ca5: 			// if we have a full URL, make sure it's loaded first
1:fe77ca5: 			try {
1:fe77ca5: 				if (value.startsWith("jdbc:"))
1:fe77ca5: 					util.loadDriverIfKnown(value);
1:fe77ca5: 			} catch (Exception e) {
1:fe77ca5: 				// want to continue with the attempt
1:fe77ca5: 			}
1:fe77ca5: 			DriverManager.getDriver(value);
1:fe77ca5: 		} catch (SQLException se) {
1:fe77ca5: 			noDriver = true;
1:fe77ca5: 		}
1:fe77ca5: 		if (noDriver && (protocol != null)) {
1:fe77ca5: 			value = protocol + value;
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		if (sessions.get(name) != null) {
1:fe77ca5: 			throw ijException.alreadyHaveConnectionNamed(name);
1:fe77ca5: 		}
1:fe77ca5: 		try {
1:fe77ca5: 			
1:fe77ca5: 			String user = util.getSystemProperty("ij.user");
1:fe77ca5: 			String password = util.getSystemProperty("ij.password");
1:fe77ca5: 			Properties connInfo =  util.updateConnInfo(user, password,null);
1:fe77ca5: 														   
1:fe77ca5: 			Connection theConnection = 
1:fe77ca5: 				DriverManager.getConnection(value, connInfo);
1:fe77ca5: 																			   
1:fe77ca5: 		    addSession(theConnection,name);
1:fe77ca5: 		} catch (Throwable t) {
1:fe77ca5: 			JDBCDisplayUtil.ShowException(out,t);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
/////////////////////////////////////////////////////////////////////////
1:     void init(LocalizedOutput out) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
commit:16d3334
/////////////////////////////////////////////////////////////////////////
1: 	Hashtable<String,Session> sessions = new Hashtable<String,Session>();
/////////////////////////////////////////////////////////////////////////
1:             Properties p = AccessController.doPrivileged(new PrivilegedAction<Properties>() {
1:             	public Properties run() {
/////////////////////////////////////////////////////////////////////////
1:     Enumeration<String> e;
1:         if ((e.nextElement()).equals(newConnectionName))
/////////////////////////////////////////////////////////////////////////
1: 	Hashtable<String,Session> getSessions() {
1: 		return sessions.get(name);
1: 		currSession = sessions.get(name);
/////////////////////////////////////////////////////////////////////////
1: 		Session s = sessions.remove(name);
/////////////////////////////////////////////////////////////////////////
1: 			for (Enumeration<String> e = sessions.keys(); e.hasMoreElements(); ) {
1: 				String n = e.nextElement();
commit:e7a1236
/////////////////////////////////////////////////////////////////////////
1: 	Session getSession(String name) {
0: 		return (Session) sessions.get(name);
1: 	}
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:38520af
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
0:             Properties p = (Properties) AccessController.doPrivileged(new PrivilegedAction() {
0:             	public Object run() {
1:                 	return System.getProperties();
1:             	}
1:             });
1:             protocol = p.getProperty(ij.PROTOCOL_PROPERTY);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11bc2d0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:df9af89
/////////////////////////////////////////////////////////////////////////
0:     Enumeration e;
1:       e = sessions.keys();
1:       while (e.hasMoreElements() && newConnectionNameOk){
0:         if (((String)e.nextElement()).equals(newConnectionName))
commit:985fc85
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.ij.ConnectionEnv
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.tools.ij;
1: 
1: import java.io.File;
1: import java.io.FileNotFoundException;
1: 
1: import java.util.Hashtable;
1: import java.util.Enumeration;
1: import java.util.Properties;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1: 
1: /**
1: 	To enable multi-user use of ij.Main2
1: 
0: 	@author jerry
1:  */
1: class ConnectionEnv {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	Hashtable sessions = new Hashtable();
1: 	private Session currSession;
1: 	private String tag;
1: 	private boolean only;
1: 	private static final String CONNECTION_PROPERTY = "ij.connection";
1:     private String protocol;
1: 
1: 	ConnectionEnv(int userNumber, boolean printUserNumber, boolean theOnly) {
1: 		if (printUserNumber)
1: 			tag = "("+(userNumber+1)+")";
1: 		only = theOnly;
1: 	}
1: 
1: 	/**
1: 		separate from the constructor so that connection
1: 		failure does not prevent object creation.
1: 	 */
0: 	void init(LocalizedOutput out) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException {
1: 
1: 		Connection c = util.startJBMS(null,null);
1: 
1: 		// only load up ij.connection.* properties if there is
1: 		// only one ConnectionEnv in the system.
1: 		if (only) {
0: 		    Properties p = System.getProperties();
0: 		    protocol = p.getProperty(ij.PROTOCOL_PROPERTY);
1: 
1: 	        String prefix = CONNECTION_PROPERTY + ".";
1: 		    for (Enumeration e = p.propertyNames(); e.hasMoreElements(); )
1: 		    {
1: 		    	String key = (String)e.nextElement();
1: 		    	if (key.startsWith(prefix)) {
1: 		    		String name = key.substring(prefix.length());
1: 		    		installConnection(name.toUpperCase(java.util.Locale.ENGLISH), 
1: 						p.getProperty(key), out);
1: 		    	}
1: 		    }
1: 		}
1: 
1: 		if (c!=null) // have a database from the startup?
1: 		{
1: 			String sname=Session.DEFAULT_NAME+sessions.size();
1: 			Session s = new Session(c,tag,sname);
1: 			sessions.put(sname,s);
1: 			currSession = s;
1: 		}
1: 
1: 	}
1: 
1: 	void doPrompt(boolean newStatement, LocalizedOutput out) {
1: 		if (currSession != null) currSession.doPrompt(newStatement, out, sessions.size()>1);
1: 		else utilMain.doPrompt(newStatement, out, tag);
1: 	}
1: 	
1: 	Connection getConnection() {
1: 		if (currSession == null) return null;
1: 		return currSession.getConnection();
1: 	}
1: 
1: 	/**
1: 		Making a new connection, add it to the pool, and make it current.
1: 	 */
1: 	void addSession(Connection conn,String name) {
1: 		String aName;
1: 		if (name == null) aName = getUniqueConnectionName();
1: 		else aName = name;
1: 		Session s = new Session(conn, tag, aName);
1: 		sessions.put(aName, s);
1: 		currSession = s;
1: 	}
1: 
1:   //returns a unique Connection# name by going through existing sessions
1:   public String getUniqueConnectionName() {
1:     int newNum = 0;
1:     boolean newConnectionNameOk = false;
1:     String newConnectionName = "";
0:     Enumeration enum;
1:     while (!newConnectionNameOk){
1:       newConnectionName = Session.DEFAULT_NAME + newNum;
1:       newConnectionNameOk = true;
0:       enum = sessions.keys();
0:       while (enum.hasMoreElements() && newConnectionNameOk){
0:         if (((String)enum.nextElement()).equals(newConnectionName))
1:            newConnectionNameOk = false;
1:       }
1:       newNum = newNum + 1;
1:     }
1:     return newConnectionName;
1:   }
1: 
1: 	Session getSession() {
1: 		return currSession;
1: 	}
1: 
0: 	Hashtable getSessions() {
1: 		return sessions;
1: 	}
1: 
1: 	Session setCurrentSession(String name) {
0: 		currSession = (Session) sessions.get(name);
1: 		return currSession;
1: 	}
1: 
1: 	boolean haveSession(String name) {
1: 		return (name != null) && (sessions.size()>0) && (null != sessions.get(name));
1: 	}
1: 
1: 	void removeCurrentSession() throws SQLException {
1: 		if (currSession ==null) return;
1: 		sessions.remove(currSession.getName());
1: 		currSession.close();
1: 		currSession = null;
1: 	}
1: 
1: 	void removeSession(String name) throws SQLException {
0: 		Session s = (Session) sessions.remove(name);
1: 		s.close();
1: 		if (currSession == s)
1: 			currSession = null;
1: 	}
1: 
1: 	void removeAllSessions() throws SQLException {
1: 		if (sessions == null || sessions.size() == 0)
1: 			return;
1: 		else
0: 			for (Enumeration e = sessions.keys(); e.hasMoreElements(); ) {
0: 				String n = (String)e.nextElement();
1: 				removeSession(n);
1: 			}
1: 	}
1: 
1: 	private void installConnection(String name, String value, LocalizedOutput out) throws SQLException {
1: 		// add protocol if no driver matches url
1: 		boolean noDriver = false;
1: 		try {
1: 			// if we have a full URL, make sure it's loaded first
1: 			try {
1: 				if (value.startsWith("jdbc:"))
1: 					util.loadDriverIfKnown(value);
1: 			} catch (Exception e) {
1: 				// want to continue with the attempt
1: 			}
1: 			DriverManager.getDriver(value);
1: 		} catch (SQLException se) {
1: 			noDriver = true;
1: 		}
1: 		if (noDriver && (protocol != null)) {
1: 			value = protocol + value;
1: 		}
1: 
1: 		if (sessions.get(name) != null) {
1: 			throw ijException.alreadyHaveConnectionNamed(name);
1: 		}
1: 		try {
1: 			
1: 			String user = util.getSystemProperty("ij.user");
1: 			String password = util.getSystemProperty("ij.password");
1: 			Properties connInfo =  util.updateConnInfo(user, password,null);
1: 														   
1: 			Connection theConnection = 
1: 				DriverManager.getConnection(value, connInfo);
1: 																			   
1: 		    addSession(theConnection,name);
1: 		} catch (Throwable t) {
1: 			JDBCDisplayUtil.ShowException(out,t);
1: 		}
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.ij;
0: 
0: import java.io.File;
0: import java.io.FileNotFoundException;
0: 
0: import java.util.Hashtable;
0: import java.util.Enumeration;
0: import java.util.Properties;
0: 
0: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.SQLException;
0: 
0: import org.apache.derby.tools.JDBCDisplayUtil;
0: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
0: 
0: /**
0: 	To enable multi-user use of ij.Main2
0: 
0: 	@author jerry
0:  */
0: class ConnectionEnv {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	Hashtable sessions = new Hashtable();
0: 	private Session currSession;
0: 	private String tag;
0: 	private boolean only;
0: 	private static final String CONNECTION_PROPERTY = "ij.connection";
0:     private String protocol;
0: 
0: 	ConnectionEnv(int userNumber, boolean printUserNumber, boolean theOnly) {
0: 		if (printUserNumber)
0: 			tag = "("+(userNumber+1)+")";
0: 		only = theOnly;
0: 	}
0: 
0: 	/**
0: 		separate from the constructor so that connection
0: 		failure does not prevent object creation.
0: 	 */
0: 	void init(LocalizedOutput out) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException {
0: 
0: 		Connection c = util.startJBMS(null,null);
0: 
0: 		// only load up ij.connection.* properties if there is
0: 		// only one ConnectionEnv in the system.
0: 		if (only) {
0: 		    Properties p = System.getProperties();
0: 		    protocol = p.getProperty(ij.PROTOCOL_PROPERTY);
0: 
0: 	        String prefix = CONNECTION_PROPERTY + ".";
0: 		    for (Enumeration e = p.propertyNames(); e.hasMoreElements(); )
0: 		    {
0: 		    	String key = (String)e.nextElement();
0: 		    	if (key.startsWith(prefix)) {
0: 		    		String name = key.substring(prefix.length());
0: 		    		installConnection(name.toUpperCase(java.util.Locale.ENGLISH), 
0: 						p.getProperty(key), out);
0: 		    	}
0: 		    }
0: 		}
0: 
0: 		if (c!=null) // have a database from the startup?
0: 		{
0: 			String sname=Session.DEFAULT_NAME+sessions.size();
0: 			Session s = new Session(c,tag,sname);
0: 			sessions.put(sname,s);
0: 			currSession = s;
0: 		}
0: 
0: 	}
0: 
0: 	void doPrompt(boolean newStatement, LocalizedOutput out) {
0: 		if (currSession != null) currSession.doPrompt(newStatement, out, sessions.size()>1);
0: 		else utilMain.doPrompt(newStatement, out, tag);
0: 	}
0: 	
0: 	Connection getConnection() {
0: 		if (currSession == null) return null;
0: 		return currSession.getConnection();
0: 	}
0: 
0: 	/**
0: 		Making a new connection, add it to the pool, and make it current.
0: 	 */
0: 	void addSession(Connection conn,String name) {
0: 		String aName;
0: 		if (name == null) aName = getUniqueConnectionName();
0: 		else aName = name;
0: 		Session s = new Session(conn, tag, aName);
0: 		sessions.put(aName, s);
0: 		currSession = s;
0: 	}
0: 
0:   //returns a unique Connection# name by going through existing sessions
0:   public String getUniqueConnectionName() {
0:     int newNum = 0;
0:     boolean newConnectionNameOk = false;
0:     String newConnectionName = "";
0:     Enumeration enum;
0:     while (!newConnectionNameOk){
0:       newConnectionName = Session.DEFAULT_NAME + newNum;
0:       newConnectionNameOk = true;
0:       enum = sessions.keys();
0:       while (enum.hasMoreElements() && newConnectionNameOk){
0:         if (((String)enum.nextElement()).equals(newConnectionName))
0:            newConnectionNameOk = false;
0:       }
0:       newNum = newNum + 1;
0:     }
0:     return newConnectionName;
0:   }
0: 
0: 	Session getSession() {
0: 		return currSession;
0: 	}
0: 
0: 	Hashtable getSessions() {
0: 		return sessions;
0: 	}
0: 
0: 	Session setCurrentSession(String name) {
0: 		currSession = (Session) sessions.get(name);
0: 		return currSession;
0: 	}
0: 
0: 	boolean haveSession(String name) {
0: 		return (name != null) && (sessions.size()>0) && (null != sessions.get(name));
0: 	}
0: 
0: 	void removeCurrentSession() throws SQLException {
0: 		if (currSession ==null) return;
0: 		sessions.remove(currSession.getName());
0: 		currSession.close();
0: 		currSession = null;
0: 	}
0: 
0: 	void removeSession(String name) throws SQLException {
0: 		Session s = (Session) sessions.remove(name);
0: 		s.close();
0: 		if (currSession == s)
0: 			currSession = null;
0: 	}
0: 
0: 	void removeAllSessions() throws SQLException {
0: 		if (sessions == null || sessions.size() == 0)
0: 			return;
0: 		else
0: 			for (Enumeration e = sessions.keys(); e.hasMoreElements(); ) {
0: 				String n = (String)e.nextElement();
0: 				removeSession(n);
0: 			}
0: 	}
0: 
0: 	private void installConnection(String name, String value, LocalizedOutput out) throws SQLException {
0: 		// add protocol if no driver matches url
0: 		boolean noDriver = false;
0: 		try {
0: 			// if we have a full URL, make sure it's loaded first
0: 			try {
0: 				if (value.startsWith("jdbc:"))
0: 					util.loadDriverIfKnown(value);
0: 			} catch (Exception e) {
0: 				// want to continue with the attempt
0: 			}
0: 			DriverManager.getDriver(value);
0: 		} catch (SQLException se) {
0: 			noDriver = true;
0: 		}
0: 		if (noDriver && (protocol != null)) {
0: 			value = protocol + value;
0: 		}
0: 
0: 		if (sessions.get(name) != null) {
0: 			throw ijException.alreadyHaveConnectionNamed(name);
0: 		}
0: 		try {
0: 			
0: 			String user = util.getSystemProperty("ij.user");
0: 			String password = util.getSystemProperty("ij.password");
0: 			Properties connInfo =  util.updateConnInfo(user, password,null);
0: 														   
0: 			Connection theConnection = 
0: 				DriverManager.getConnection(value, connInfo);
0: 																			   
0: 		    addSession(theConnection,name);
0: 		} catch (Throwable t) {
0: 			JDBCDisplayUtil.ShowException(out,t);
0: 		}
0: 	}
0: 
0: }
============================================================================