1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationService
1:345de35: 
1:88a3cb9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88a3cb9:    contributor license agreements.  See the NOTICE file distributed with
1:88a3cb9:    this work for additional information regarding copyright ownership.
1:88a3cb9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88a3cb9:    (the "License"); you may not use this file except in compliance with
1:88a3cb9:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.jdbc.authentication;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.property.PropertyUtil;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.jdbc.AuthenticationService;
1:eac0369: import org.apache.derby.authentication.UserAuthenticator;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.util.StringUtil;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This is the JNDI Authentication Service base class.
1:eac0369:  * <p>
1:eac0369:  * It instantiates the JNDI authentication scheme defined by the user/
1:94f158a:  * administrator. Derby supports LDAP JNDI providers.
1:eac0369:  * <p>
1:eac0369:  * The user can configure its own JNDI provider by setting the
1:eac0369:  * system or database property derby.authentication.provider .
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public class JNDIAuthenticationService
1:eac0369: 	extends AuthenticationServiceBase {
1:eac0369: 
1:eac0369: 	private String authenticationProvider;
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// constructor
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	// call the super
1:eac0369: 	public JNDIAuthenticationService() {
1:eac0369: 		super();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// ModuleControl implementation (overriden)
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *  Check if we should activate the JNDI authentication service.
1:eac0369: 	 */
1:eac0369: 	public boolean canSupport(Properties properties) {
1:eac0369: 
1:eac0369: 		if (!requireAuthentication(properties))
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		//
1:eac0369: 		// we check 2 things:
1:eac0369: 		//
1:eac0369: 		// - if derby.connection.requireAuthentication system
1:eac0369: 		//   property is set to true.
1:eac0369: 		// - if derby.authentication.provider is set to one
1:eac0369: 		// of the JNDI scheme we support (i.e. LDAP).
1:eac0369: 		//
1:eac0369: 
1:eac0369: 		authenticationProvider = PropertyUtil.getPropertyFromSet(
1:eac0369: 					properties,
1:eac0369: 						org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_PARAMETER);
1:eac0369: 
1:eac0369: 		 if ( (authenticationProvider != null) &&
1:eac0369: 			   (StringUtil.SQLEqualsIgnoreCase(authenticationProvider,
1:eac0369: 				  	org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_LDAP)))
1:eac0369: 			return true;
1:eac0369: 
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
1:eac0369: 	 * @exception StandardException upon failure to load/boot the expected
1:eac0369: 	 * authentication service.
1:eac0369: 	 */
1:eac0369: 	public void boot(boolean create, Properties properties)
1:eac0369: 	  throws StandardException {
1:eac0369: 
1:eac0369: 		// We need authentication
1:eac0369: 		// setAuthentication(true);
1:eac0369: 
1:eac0369: 		// we call the super in case there is anything to get initialized.
1:eac0369: 		super.boot(create, properties);
1:eac0369: 
1:eac0369: 		// We must retrieve and load the authentication scheme that we were
1:eac0369: 		// told to.
1:eac0369: 
1:eac0369: 		// Set ourselves as being ready and loading the proper
1:eac0369: 		// authentication scheme for this service
1:eac0369: 		UserAuthenticator aJNDIAuthscheme;
1:eac0369: 
1:eac0369: 		// we're dealing with LDAP
1:eac0369: 		aJNDIAuthscheme = new LDAPAuthenticationSchemeImpl(this, properties);	
1:eac0369: 		this.setAuthenticationService(aJNDIAuthscheme);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1:  * administrator. Derby supports LDAP JNDI providers.
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:88a3cb9
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationService
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc.authentication
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc.authentication;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: 
1: import org.apache.derby.iapi.jdbc.AuthenticationService;
1: import org.apache.derby.authentication.UserAuthenticator;
1: 
1: import org.apache.derby.iapi.util.StringUtil;
1: 
1: import java.util.Properties;
1: 
1: /**
1:  * This is the JNDI Authentication Service base class.
1:  * <p>
1:  * It instantiates the JNDI authentication scheme defined by the user/
0:  * administrator. Cloudscape supports LDAP JNDI providers.
1:  * <p>
1:  * The user can configure its own JNDI provider by setting the
1:  * system or database property derby.authentication.provider .
1:  *
0:  * @author Francois
1:  */
1: 
1: public class JNDIAuthenticationService
1: 	extends AuthenticationServiceBase {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	private String authenticationProvider;
1: 
1: 	//
1: 	// constructor
1: 	//
1: 
1: 	// call the super
1: 	public JNDIAuthenticationService() {
1: 		super();
1: 	}
1: 
1: 	//
1: 	// ModuleControl implementation (overriden)
1: 	//
1: 
1: 	/**
1: 	 *  Check if we should activate the JNDI authentication service.
1: 	 */
1: 	public boolean canSupport(Properties properties) {
1: 
1: 		if (!requireAuthentication(properties))
1: 			return false;
1: 
1: 		//
1: 		// we check 2 things:
1: 		//
1: 		// - if derby.connection.requireAuthentication system
1: 		//   property is set to true.
1: 		// - if derby.authentication.provider is set to one
1: 		// of the JNDI scheme we support (i.e. LDAP).
1: 		//
1: 
1: 		authenticationProvider = PropertyUtil.getPropertyFromSet(
1: 					properties,
1: 						org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_PARAMETER);
1: 
1: 		 if ( (authenticationProvider != null) &&
1: 			   (StringUtil.SQLEqualsIgnoreCase(authenticationProvider,
1: 				  	org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_LDAP)))
1: 			return true;
1: 
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
1: 	 * @exception StandardException upon failure to load/boot the expected
1: 	 * authentication service.
1: 	 */
1: 	public void boot(boolean create, Properties properties)
1: 	  throws StandardException {
1: 
1: 		// We need authentication
1: 		// setAuthentication(true);
1: 
1: 		// we call the super in case there is anything to get initialized.
1: 		super.boot(create, properties);
1: 
1: 		// We must retrieve and load the authentication scheme that we were
1: 		// told to.
1: 
1: 		// Set ourselves as being ready and loading the proper
1: 		// authentication scheme for this service
1: 		UserAuthenticator aJNDIAuthscheme;
1: 
1: 		// we're dealing with LDAP
1: 		aJNDIAuthscheme = new LDAPAuthenticationSchemeImpl(this, properties);	
1: 		this.setAuthenticationService(aJNDIAuthscheme);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc.authentication
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.jdbc.authentication;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: 
0: import org.apache.derby.iapi.jdbc.AuthenticationService;
0: import org.apache.derby.authentication.UserAuthenticator;
0: 
0: import org.apache.derby.iapi.util.StringUtil;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * This is the JNDI Authentication Service base class.
0:  * <p>
0:  * It instantiates the JNDI authentication scheme defined by the user/
0:  * administrator. Cloudscape supports LDAP JNDI providers.
0:  * <p>
0:  * The user can configure its own JNDI provider by setting the
0:  * system or database property derby.authentication.provider .
0:  *
0:  * @author Francois
0:  */
0: 
0: public class JNDIAuthenticationService
0: 	extends AuthenticationServiceBase {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	private String authenticationProvider;
0: 
0: 	//
0: 	// constructor
0: 	//
0: 
0: 	// call the super
0: 	public JNDIAuthenticationService() {
0: 		super();
0: 	}
0: 
0: 	//
0: 	// ModuleControl implementation (overriden)
0: 	//
0: 
0: 	/**
0: 	 *  Check if we should activate the JNDI authentication service.
0: 	 */
0: 	public boolean canSupport(Properties properties) {
0: 
0: 		if (!requireAuthentication(properties))
0: 			return false;
0: 
0: 		//
0: 		// we check 2 things:
0: 		//
0: 		// - if derby.connection.requireAuthentication system
0: 		//   property is set to true.
0: 		// - if derby.authentication.provider is set to one
0: 		// of the JNDI scheme we support (i.e. LDAP).
0: 		//
0: 
0: 		authenticationProvider = PropertyUtil.getPropertyFromSet(
0: 					properties,
0: 						org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_PARAMETER);
0: 
0: 		 if ( (authenticationProvider != null) &&
0: 			   (StringUtil.SQLEqualsIgnoreCase(authenticationProvider,
0: 				  	org.apache.derby.iapi.reference.Property.AUTHENTICATION_PROVIDER_LDAP)))
0: 			return true;
0: 
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
0: 	 * @exception StandardException upon failure to load/boot the expected
0: 	 * authentication service.
0: 	 */
0: 	public void boot(boolean create, Properties properties)
0: 	  throws StandardException {
0: 
0: 		// We need authentication
0: 		// setAuthentication(true);
0: 
0: 		// we call the super in case there is anything to get initialized.
0: 		super.boot(create, properties);
0: 
0: 		// We must retrieve and load the authentication scheme that we were
0: 		// told to.
0: 
0: 		// Set ourselves as being ready and loading the proper
0: 		// authentication scheme for this service
0: 		UserAuthenticator aJNDIAuthscheme;
0: 
0: 		// we're dealing with LDAP
0: 		aJNDIAuthscheme = new LDAPAuthenticationSchemeImpl(this, properties);	
0: 		this.setAuthenticationService(aJNDIAuthscheme);
0: 	}
0: }
============================================================================