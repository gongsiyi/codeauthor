1:97105d6: /*
1:97105d6:  * Derby - Class org.apache.derby.impl.sql.execute.ScanResultSet
1:97105d6:  *
1:97105d6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:97105d6:  * contributor license agreements.  See the NOTICE file distributed with
1:97105d6:  * this work for additional information regarding copyright ownership.
1:97105d6:  * The ASF licenses this file to you under the Apache License, Version 2.0
1:97105d6:  * (the "License"); you may not use this file except in compliance with
1:97105d6:  * the License.  You may obtain a copy of the License at
1:97105d6:  *
1:97105d6:  *    http://www.apache.org/licenses/LICENSE-2.0
1:97105d6:  *
1:97105d6:  * Unless required by applicable law or agreed to in writing, software
1:97105d6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:97105d6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:97105d6:  * See the License for the specific language governing permissions and
1:97105d6:  * limitations under the License.
1:97105d6:  */
1:97105d6: 
1:97105d6: package org.apache.derby.impl.sql.execute;
1:97105d6: 
1:b197ffa: import org.w3c.dom.Element;
1:b197ffa: 
1:97105d6: import org.apache.derby.iapi.error.StandardException;
1:2ec36d1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:97105d6: import org.apache.derby.iapi.sql.Activation;
1:959fef2: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1:109cb26: import org.apache.derby.iapi.sql.execute.ExecRow;
1:959fef2: import org.apache.derby.iapi.sql.execute.ExecRowBuilder;
1:97105d6: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1:97105d6: import org.apache.derby.iapi.store.access.TransactionController;
1:38f02ec: import org.apache.derby.iapi.transaction.TransactionControl;
1:508a010: import org.apache.derby.iapi.types.RowLocation;
1:97105d6: 
1:97105d6: /**
1:97105d6:  * Abstract <code>ResultSet</code> class for <code>NoPutResultSet</code>s which
1:7abac02:  * contain a scan. Returns rows that may be a column sub-set of the
1:7abac02:  * rows in the underlying object to be scanned. If accessedCols is
1:7abac02:  * not null then a sub-set of columns will be fetched from the underlying
1:7abac02:  * object (usually into the candidate row object), then the returned
1:7abac02:  * rows will be a compacted form of that row, with the not-fetched columns
1:7abac02:  * moved out. If accessedCols is null then the full row will be returned.
1:7abac02:  * <BR>
1:7abac02:  * Example: if accessedCols indicates that we want to retrieve columns
1:7abac02:  * 1 and 4, then candidate row will have space for 5
1:7abac02:  * columns (because that's the size of the rows in the underlying object),
1:7abac02:  * but only cols "1" and "4" will have values:
1:7abac02:  * <BR>
1:7abac02:  * <pre>
1:7abac02:  *     0    1    2    3    4
1:7abac02:  *  [  - , COL1,  - ,  - , COL4 ]
1:7abac02:  *  </pre>
1:7abac02:  *  <BR>
1:7abac02:  * Rows returned by this ScanResultSet will have the values:
1:7abac02:  * <BR>
1:7abac02:  * <pre>
1:7abac02:  *     0     1
1:7abac02:  *  [ COL1, COL4 ]
1:7abac02:  * </pre>
1:97105d6:  */
1:97105d6: abstract class ScanResultSet extends NoPutResultSetImpl {
1:97105d6: 
1:97105d6:     /** If true, the table is marked as table locked in SYS.SYSTABLES. */
1:97105d6:     private final boolean tableLocked;
1:97105d6:     /** If true, the isolation level is unspecified and must be refreshed on
1:97105d6:      * each open. */
1:97105d6:     private final boolean unspecifiedIsolationLevel;
1:97105d6:     /** The lock mode supplied through the constructor. */
1:97105d6:     private final int suppliedLockMode;
1:97105d6:     /** Tells whether the isolation level needs to be updated. */
1:97105d6:     private boolean isolationLevelNeedsUpdate;
1:97105d6: 
1:97105d6:     /** The actual lock mode used. */
1:97105d6:     int lockMode;
1:97105d6:     /** The scan isolation level. */
1:97105d6:     int isolationLevel;
1:97105d6: 
1:959fef2:     /** Object used to create and reset the candidate row. */
1:959fef2:     final ExecRowBuilder resultRowBuilder;
1:959fef2: 
1:7abac02:     /** The candidate row, matches the shape of the rows in
1:7abac02:      * the underlying object to be scanned.
1:7abac02:      */
1:109cb26:     final ExecRow candidate;
1:109cb26:     
1:97105d6:     /**
1:2ec36d1:      * If not null indicates the subset of columns that
1:2ec36d1:      * need to be pulled from the underlying object to be scanned.
1:2ec36d1:      * Set from the PreparedStatement's saved objects, if it exists.
1:2ec36d1:      */
1:508a010:     protected FormatableBitSet accessedCols;
1:508a010: 
1:508a010:     /** true if the scan should pick up row locations */
1:508a010:     protected boolean fetchRowLocations = false;
1:2ec36d1: 
1:b197ffa: 	public String tableName;
1:b197ffa: 	public String indexName;
1:b197ffa: 
1:2ec36d1:     /**
1:97105d6:      * Construct a <code>ScanResultSet</code>.
1:97105d6:      *
1:97105d6:      * @param activation the activation
1:97105d6:      * @param resultSetNumber number of the result set (unique within statement)
1:959fef2:      * @param resultRowTemplate identifier of saved object for row template
1:97105d6:      * @param lockMode lock mode (record or table)
1:97105d6:      * @param tableLocked true if marked as table locked in SYS.SYSTABLES
1:97105d6:      * @param isolationLevel language isolation level for the result set
1:7abac02:      * @param colRefItem Identifier of saved object for accessedCols,
1:7abac02:      * -1 if need to fetch all columns.
1:97105d6:      * @param optimizerEstimatedRowCount estimated row count
1:97105d6:      * @param optimizerEstimatedCost estimated cost
1:97105d6:      */
1:97105d6:     ScanResultSet(Activation activation, int resultSetNumber,
1:959fef2:                   int resultRowTemplate,
1:97105d6:                   int lockMode, boolean tableLocked, int isolationLevel,
1:2ec36d1:                   int colRefItem,
1:97105d6:                   double optimizerEstimatedRowCount,
1:109cb26:                   double optimizerEstimatedCost) throws StandardException {
1:97105d6:         super(activation, resultSetNumber,
1:97105d6:               optimizerEstimatedRowCount,
1:97105d6:               optimizerEstimatedCost);
1:97105d6: 
1:97105d6:         this.tableLocked = tableLocked;
1:97105d6:         suppliedLockMode = lockMode;
1:97105d6: 
1:38f02ec:         if (isolationLevel == TransactionControl.UNSPECIFIED_ISOLATION_LEVEL) {
1:97105d6:             unspecifiedIsolationLevel = true;
1:3237ef5:             isolationLevel = getLanguageConnectionContext().getCurrentIsolationLevel();
1:97105d6:         } else {
1:97105d6:             unspecifiedIsolationLevel = false;
1:97105d6:         }
1:97105d6: 
1:97105d6:         this.lockMode = getLockMode(isolationLevel);
1:97105d6:         this.isolationLevel =
1:97105d6:             translateLanguageIsolationLevel(isolationLevel);
1:109cb26: 
1:959fef2:         ExecPreparedStatement ps = activation.getPreparedStatement();
1:959fef2: 
1:959fef2:         // Create a candidate row.
1:959fef2:         resultRowBuilder =
1:959fef2:                 (ExecRowBuilder) ps.getSavedObject(resultRowTemplate);
1:959fef2:         candidate = resultRowBuilder.build(activation.getExecutionFactory());
1:959fef2: 
1:2ec36d1:         this.accessedCols = colRefItem != -1 ?
1:959fef2:             (FormatableBitSet) ps.getSavedObject(colRefItem) : null;
1:97105d6:     }
1:97105d6: 
1:97105d6:     /**
1:97105d6:      * Initialize the isolation level and the lock mode. If the result set was
1:97105d6:      * constructed with an explicit isolation level, or if the isolation level
1:97105d6:      * has already been initialized, this is a no-op. All sub-classes should
1:97105d6:      * invoke this method from their <code>openCore()</code> methods.
1:97105d6:      */
1:97105d6:     void initIsolationLevel() {
1:97105d6:         if (isolationLevelNeedsUpdate) {
1:3237ef5:             int languageLevel = getLanguageConnectionContext().getCurrentIsolationLevel();
1:97105d6:             lockMode = getLockMode(languageLevel);
1:97105d6:             isolationLevel = translateLanguageIsolationLevel(languageLevel);
1:97105d6:             isolationLevelNeedsUpdate = false;
1:97105d6:         }
1:97105d6:     }
1:97105d6: 
1:97105d6:     /**
1:97105d6:      * Get the lock mode based on the language isolation level. Always do row
1:97105d6:      * locking unless the isolation level is serializable or the table is
1:97105d6:      * marked as table locked.
1:97105d6:      *
1:97105d6:      * @param languageLevel the (language) isolation level
1:97105d6:      * @return lock mode
1:97105d6:      */
1:97105d6:     private int getLockMode(int languageLevel) {
1:97105d6:         /* NOTE: always do row locking on READ COMMITTED/UNCOMITTED scans,
1:97105d6:          * unless the table is marked as table locked (in sys.systables)
1:97105d6:          * This is to improve concurrency.  Also see FromBaseTable's
1:97105d6:          * updateTargetLockMode (KEEP THESE TWO PLACES CONSISTENT!
1:97105d6:          * bug 4318).
1:97105d6:          */
1:97105d6:         /* NOTE: always do row locking on READ COMMITTED/UNCOMMITTED
1:97105d6:          *       and repeatable read scans unless the table is marked as
1:97105d6:          *       table locked (in sys.systables).
1:97105d6:          *
1:97105d6:          *       We always get instantaneous locks as we will complete
1:97105d6:          *       the scan before returning any rows and we will fully
1:97105d6:          *       requalify the row if we need to go to the heap on a next().
1:97105d6:          */
1:97105d6:         if (tableLocked ||
1:97105d6:                 (languageLevel ==
1:38f02ec:                      TransactionControl.SERIALIZABLE_ISOLATION_LEVEL)) {
1:97105d6:             return suppliedLockMode;
1:97105d6:         } else {
1:97105d6:             return TransactionController.MODE_RECORD;
1:97105d6:         }
1:97105d6:     }
1:97105d6: 
1:508a010:     /** Determine whether this scan should return row locations */
1:508a010:     protected   void    setRowLocationsState()
1:508a010:         throws StandardException
1:508a010:     {
1:508a010:         fetchRowLocations =
1:508a010:             (
1:508a010:              (indexName == null) &&
1:508a010:              (candidate.nColumns() > 0) &&
1:508a010:              ( candidate.getColumn( candidate.nColumns() ) instanceof RowLocation )
1:508a010:              );
1:508a010:     }
1:508a010: 
1:97105d6:     /**
1:97105d6:      * Translate isolation level from language to store.
1:97105d6:      *
1:97105d6:      * @param languageLevel language isolation level
1:97105d6:      * @return store isolation level
1:97105d6:      */
1:97105d6:     private int translateLanguageIsolationLevel(int languageLevel) {
1:97105d6: 
1:97105d6:         switch (languageLevel) {
1:38f02ec:         case TransactionControl.READ_UNCOMMITTED_ISOLATION_LEVEL:
1:97105d6:             return TransactionController.ISOLATION_READ_UNCOMMITTED;
1:38f02ec:         case TransactionControl.READ_COMMITTED_ISOLATION_LEVEL:
1:97105d6:             /*
1:97105d6:              * Now we see if we can get instantaneous locks
1:97105d6:              * if we are getting share locks.
1:97105d6:              * (For example, we can get instantaneous locks
1:97105d6:              * when doing a bulk fetch.)
1:97105d6:              */
1:97105d6:             if (!canGetInstantaneousLocks()) {
1:97105d6:                 return TransactionController.ISOLATION_READ_COMMITTED;
1:97105d6:             }
1:97105d6:             return TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK;
1:38f02ec:         case TransactionControl.REPEATABLE_READ_ISOLATION_LEVEL:
1:97105d6:             return TransactionController.ISOLATION_REPEATABLE_READ;
1:38f02ec:         case TransactionControl.SERIALIZABLE_ISOLATION_LEVEL:
1:97105d6:             return TransactionController.ISOLATION_SERIALIZABLE;
1:97105d6:         }
1:97105d6: 
1:97105d6:         if (SanityManager.DEBUG) {
1:97105d6:             SanityManager.THROWASSERT("Unknown isolation level - " +
1:97105d6:                                       languageLevel);
1:97105d6:         }
1:97105d6: 
1:97105d6:         return 0;
1:97105d6:     }
1:97105d6: 
1:97105d6:     /**
1:97105d6:      * Can we get instantaneous locks when getting share row
1:97105d6:      * locks at READ COMMITTED.
1:97105d6:      */
1:97105d6:     abstract boolean canGetInstantaneousLocks();
1:97105d6: 
1:97105d6:     /**
1:97105d6:      * Return the isolation level of the scan in the result set.
1:97105d6:      */
1:97105d6:     public int getScanIsolationLevel() {
1:97105d6:         return isolationLevel;
1:97105d6:     }
1:97105d6: 
1:97105d6:     /**
1:97105d6:      * Close the result set.
1:97105d6:      *
1:97105d6:      * @exception StandardException if an error occurs
1:97105d6:      */
1:97105d6:     public void close() throws StandardException {
1:97105d6:         // need to update isolation level on next open if it was unspecified
1:97105d6:         isolationLevelNeedsUpdate = unspecifiedIsolationLevel;
1:109cb26:         // Prepare row array for reuse (DERBY-827).
1:109cb26:         candidate.resetRowArray();
1:97105d6:         super.close();
1:97105d6:     }
1:b197ffa:     
1:b197ffa:     public Element toXML( Element parentNode, String tag ) throws Exception
1:b197ffa:     {
1:b197ffa:         Element myNode = super.toXML( parentNode, tag );
1:b197ffa:         if ( tableName != null ) { myNode.setAttribute( "tableName", tableName ); }
1:b197ffa:         if ( indexName != null ) { myNode.setAttribute( "indexName", indexName ); }
1:b197ffa:         
1:b197ffa:         return myNode;
1:b197ffa:     }
1:97105d6: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:508a010
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.RowLocation;
/////////////////////////////////////////////////////////////////////////
1:     protected FormatableBitSet accessedCols;
1: 
1:     /** true if the scan should pick up row locations */
1:     protected boolean fetchRowLocations = false;
/////////////////////////////////////////////////////////////////////////
1:     /** Determine whether this scan should return row locations */
1:     protected   void    setRowLocationsState()
1:         throws StandardException
1:     {
1:         fetchRowLocations =
1:             (
1:              (indexName == null) &&
1:              (candidate.nColumns() > 0) &&
1:              ( candidate.getColumn( candidate.nColumns() ) instanceof RowLocation )
1:              );
1:     }
1: 
commit:b197ffa
/////////////////////////////////////////////////////////////////////////
1: import org.w3c.dom.Element;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	public String tableName;
1: 	public String indexName;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     public Element toXML( Element parentNode, String tag ) throws Exception
1:     {
1:         Element myNode = super.toXML( parentNode, tag );
1:         if ( tableName != null ) { myNode.setAttribute( "tableName", tableName ); }
1:         if ( indexName != null ) { myNode.setAttribute( "indexName", indexName ); }
1:         
1:         return myNode;
1:     }
commit:38f02ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.transaction.TransactionControl;
/////////////////////////////////////////////////////////////////////////
1:         if (isolationLevel == TransactionControl.UNSPECIFIED_ISOLATION_LEVEL) {
/////////////////////////////////////////////////////////////////////////
1:                      TransactionControl.SERIALIZABLE_ISOLATION_LEVEL)) {
/////////////////////////////////////////////////////////////////////////
1:         case TransactionControl.READ_UNCOMMITTED_ISOLATION_LEVEL:
1:         case TransactionControl.READ_COMMITTED_ISOLATION_LEVEL:
/////////////////////////////////////////////////////////////////////////
1:         case TransactionControl.REPEATABLE_READ_ISOLATION_LEVEL:
1:         case TransactionControl.SERIALIZABLE_ISOLATION_LEVEL:
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:959fef2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1: import org.apache.derby.iapi.sql.execute.ExecRowBuilder;
/////////////////////////////////////////////////////////////////////////
1:     /** Object used to create and reset the candidate row. */
1:     final ExecRowBuilder resultRowBuilder;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @param resultRowTemplate identifier of saved object for row template
/////////////////////////////////////////////////////////////////////////
1:                   int resultRowTemplate,
/////////////////////////////////////////////////////////////////////////
1:         ExecPreparedStatement ps = activation.getPreparedStatement();
1: 
1:         // Create a candidate row.
1:         resultRowBuilder =
1:                 (ExecRowBuilder) ps.getSavedObject(resultRowTemplate);
1:         candidate = resultRowBuilder.build(activation.getExecutionFactory());
1: 
1:             (FormatableBitSet) ps.getSavedObject(colRefItem) : null;
commit:109cb26
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
/////////////////////////////////////////////////////////////////////////
0:     /** The candidate row. */
1:     final ExecRow candidate;
1: 
0:      * @param resultRowAllocator method which generates rows
/////////////////////////////////////////////////////////////////////////
0:                   GeneratedMethod resultRowAllocator,
1:                   double optimizerEstimatedCost) throws StandardException {
/////////////////////////////////////////////////////////////////////////
1: 
0:         /* Only call row allocators once */
0:         candidate = (ExecRow) resultRowAllocator.invoke(activation);
/////////////////////////////////////////////////////////////////////////
1:         // Prepare row array for reuse (DERBY-827).
1:         candidate.resetRowArray();
commit:97105d6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derby.impl.sql.execute.ScanResultSet
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to you under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
1: /**
1:  * Abstract <code>ResultSet</code> class for <code>NoPutResultSet</code>s which
0:  * contain a scan.
1:  */
1: abstract class ScanResultSet extends NoPutResultSetImpl {
1: 
1:     /** If true, the table is marked as table locked in SYS.SYSTABLES. */
1:     private final boolean tableLocked;
1:     /** If true, the isolation level is unspecified and must be refreshed on
1:      * each open. */
1:     private final boolean unspecifiedIsolationLevel;
1:     /** The lock mode supplied through the constructor. */
1:     private final int suppliedLockMode;
1:     /** Tells whether the isolation level needs to be updated. */
1:     private boolean isolationLevelNeedsUpdate;
1: 
1:     /** The actual lock mode used. */
1:     int lockMode;
1:     /** The scan isolation level. */
1:     int isolationLevel;
1: 
1:     /**
1:      * Construct a <code>ScanResultSet</code>.
1:      *
1:      * @param activation the activation
1:      * @param resultSetNumber number of the result set (unique within statement)
1:      * @param lockMode lock mode (record or table)
1:      * @param tableLocked true if marked as table locked in SYS.SYSTABLES
1:      * @param isolationLevel language isolation level for the result set
1:      * @param optimizerEstimatedRowCount estimated row count
1:      * @param optimizerEstimatedCost estimated cost
1:      */
1:     ScanResultSet(Activation activation, int resultSetNumber,
1:                   int lockMode, boolean tableLocked, int isolationLevel,
1:                   double optimizerEstimatedRowCount,
0:                   double optimizerEstimatedCost) {
1:         super(activation, resultSetNumber,
1:               optimizerEstimatedRowCount,
1:               optimizerEstimatedCost);
1: 
1:         this.tableLocked = tableLocked;
1:         suppliedLockMode = lockMode;
1: 
0:         if (isolationLevel == ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL) {
1:             unspecifiedIsolationLevel = true;
0:             isolationLevel = lcc.getCurrentIsolationLevel();
1:         } else {
1:             unspecifiedIsolationLevel = false;
1:         }
1: 
1:         this.lockMode = getLockMode(isolationLevel);
1:         this.isolationLevel =
1:             translateLanguageIsolationLevel(isolationLevel);
1:     }
1: 
1:     /**
1:      * Initialize the isolation level and the lock mode. If the result set was
1:      * constructed with an explicit isolation level, or if the isolation level
1:      * has already been initialized, this is a no-op. All sub-classes should
1:      * invoke this method from their <code>openCore()</code> methods.
1:      */
1:     void initIsolationLevel() {
1:         if (isolationLevelNeedsUpdate) {
0:             int languageLevel = lcc.getCurrentIsolationLevel();
1:             lockMode = getLockMode(languageLevel);
1:             isolationLevel = translateLanguageIsolationLevel(languageLevel);
1:             isolationLevelNeedsUpdate = false;
1:         }
1:     }
1: 
1:     /**
1:      * Get the lock mode based on the language isolation level. Always do row
1:      * locking unless the isolation level is serializable or the table is
1:      * marked as table locked.
1:      *
1:      * @param languageLevel the (language) isolation level
1:      * @return lock mode
1:      */
1:     private int getLockMode(int languageLevel) {
1:         /* NOTE: always do row locking on READ COMMITTED/UNCOMITTED scans,
1:          * unless the table is marked as table locked (in sys.systables)
1:          * This is to improve concurrency.  Also see FromBaseTable's
1:          * updateTargetLockMode (KEEP THESE TWO PLACES CONSISTENT!
1:          * bug 4318).
1:          */
1:         /* NOTE: always do row locking on READ COMMITTED/UNCOMMITTED
1:          *       and repeatable read scans unless the table is marked as
1:          *       table locked (in sys.systables).
1:          *
1:          *       We always get instantaneous locks as we will complete
1:          *       the scan before returning any rows and we will fully
1:          *       requalify the row if we need to go to the heap on a next().
1:          */
1:         if (tableLocked ||
1:                 (languageLevel ==
0:                      ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL)) {
1:             return suppliedLockMode;
1:         } else {
1:             return TransactionController.MODE_RECORD;
1:         }
1:     }
1: 
1:     /**
1:      * Translate isolation level from language to store.
1:      *
1:      * @param languageLevel language isolation level
1:      * @return store isolation level
1:      */
1:     private int translateLanguageIsolationLevel(int languageLevel) {
1: 
1:         switch (languageLevel) {
0:         case ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL:
1:             return TransactionController.ISOLATION_READ_UNCOMMITTED;
0:         case ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL:
1:             /*
1:              * Now we see if we can get instantaneous locks
1:              * if we are getting share locks.
1:              * (For example, we can get instantaneous locks
1:              * when doing a bulk fetch.)
1:              */
1:             if (!canGetInstantaneousLocks()) {
1:                 return TransactionController.ISOLATION_READ_COMMITTED;
1:             }
1:             return TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK;
0:         case ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL:
1:             return TransactionController.ISOLATION_REPEATABLE_READ;
0:         case ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL:
1:             return TransactionController.ISOLATION_SERIALIZABLE;
1:         }
1: 
1:         if (SanityManager.DEBUG) {
1:             SanityManager.THROWASSERT("Unknown isolation level - " +
1:                                       languageLevel);
1:         }
1: 
1:         return 0;
1:     }
1: 
1:     /**
1:      * Can we get instantaneous locks when getting share row
1:      * locks at READ COMMITTED.
1:      */
1:     abstract boolean canGetInstantaneousLocks();
1: 
1:     /**
1:      * Return the isolation level of the scan in the result set.
1:      */
1:     public int getScanIsolationLevel() {
1:         return isolationLevel;
1:     }
1: 
1:     /**
1:      * Close the result set.
1:      *
1:      * @exception StandardException if an error occurs
1:      */
1:     public void close() throws StandardException {
1:         // need to update isolation level on next open if it was unspecified
1:         isolationLevelNeedsUpdate = unspecifiedIsolationLevel;
1:         super.close();
1:     }
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:8b6fe4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7abac02
/////////////////////////////////////////////////////////////////////////
1:  * contain a scan. Returns rows that may be a column sub-set of the
1:  * rows in the underlying object to be scanned. If accessedCols is
1:  * not null then a sub-set of columns will be fetched from the underlying
1:  * object (usually into the candidate row object), then the returned
1:  * rows will be a compacted form of that row, with the not-fetched columns
1:  * moved out. If accessedCols is null then the full row will be returned.
1:  * <BR>
1:  * Example: if accessedCols indicates that we want to retrieve columns
1:  * 1 and 4, then candidate row will have space for 5
1:  * columns (because that's the size of the rows in the underlying object),
1:  * but only cols "1" and "4" will have values:
1:  * <BR>
1:  * <pre>
1:  *     0    1    2    3    4
1:  *  [  - , COL1,  - ,  - , COL4 ]
1:  *  </pre>
1:  *  <BR>
1:  * Rows returned by this ScanResultSet will have the values:
1:  * <BR>
1:  * <pre>
1:  *     0     1
1:  *  [ COL1, COL4 ]
1:  * </pre>
/////////////////////////////////////////////////////////////////////////
1:     /** The candidate row, matches the shape of the rows in
1:      * the underlying object to be scanned.
1:      */
/////////////////////////////////////////////////////////////////////////
1:      * @param colRefItem Identifier of saved object for accessedCols,
1:      * -1 if need to fetch all columns.
commit:2ec36d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * If not null indicates the subset of columns that
1:      * need to be pulled from the underlying object to be scanned.
1:      * Set from the PreparedStatement's saved objects, if it exists.
1:      */
0:     protected final FormatableBitSet accessedCols;
/////////////////////////////////////////////////////////////////////////
1:                   int colRefItem,
/////////////////////////////////////////////////////////////////////////
0:         
1:         this.accessedCols = colRefItem != -1 ?
0:             (FormatableBitSet)(activation.getPreparedStatement().
0:                 getSavedObject(colRefItem)) : null;      
commit:3237ef5
/////////////////////////////////////////////////////////////////////////
1:             isolationLevel = getLanguageConnectionContext().getCurrentIsolationLevel();
/////////////////////////////////////////////////////////////////////////
1:             int languageLevel = getLanguageConnectionContext().getCurrentIsolationLevel();
============================================================================