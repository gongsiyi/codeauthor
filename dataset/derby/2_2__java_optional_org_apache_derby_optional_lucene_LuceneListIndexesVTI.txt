1:2277df2: /*
8:d847ced: 
1:fbf176c:    Class org.apache.derby.optional.lucene.LuceneListIndexesVTI
1:d847ced: 
1:d847ced:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d847ced:    contributor license agreements.  See the NOTICE file distributed with
1:d847ced:    this work for additional information regarding copyright ownership.
1:d847ced:    The ASF licenses this file to You under the Apache License, Version 2.0
1:d847ced:    (the "License"); you may not use this file except in compliance with
1:d847ced:    the License.  You may obtain a copy of the License at
1:d847ced: 
1:d847ced:       http://www.apache.org/licenses/LICENSE-2.0
1:d847ced: 
1:d847ced:    Unless required by applicable law or agreed to in writing, software
1:d847ced:    distributed under the License is distributed on an "AS IS" BASIS,
1:d847ced:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d847ced:    See the License for the specific language governing permissions and
1:d847ced:    limitations under the License.
1:d847ced: 
2:d847ced: */
1:d847ced: 
1:fbf176c: package org.apache.derby.optional.lucene;
1:d847ced: 
1:d847ced: import java.io.IOException;
1:9344889: import java.security.AccessController;
1:7234498: import java.security.PrivilegedAction;
1:d847ced: import java.security.PrivilegedActionException;
1:9344889: import java.security.PrivilegedExceptionAction;
1:2277df2: import java.sql.Connection;
1:d847ced: import java.sql.SQLException;
1:2277df2: import java.sql.Timestamp;
1:d847ced: import java.util.ArrayList;
1:2277df2: import java.util.Properties;
1:d847ced: 
1:502ed2e: import org.apache.derby.database.Database;
1:5cf7a46: import org.apache.derby.io.StorageFactory;
1:5cf7a46: import org.apache.derby.io.StorageFile;
1:5cf7a46: 
1:d847ced: import org.apache.derby.shared.common.reference.SQLState;
1:d847ced: import org.apache.derby.vti.StringColumnVTI;
1:d847ced: 
1:6b8ad38: import org.apache.derby.optional.utils.ToolUtilities;
1:6b8ad38: 
1:d847ced: /**
1:d847ced:  * Provides a table interface to the Lucene indexes in this database.
1:fbf176c:  * See org.apache.derby.optional.lucene.LuceneSupport.listIndexes.
2:d847ced:  * 
1:d847ced:  */
1:eb79cc0: class LuceneListIndexesVTI extends StringColumnVTI
1:2277df2: {
1:2277df2:     private Connection  connection;
1:5cf7a46: 	private StorageFile[] indexes;
1:2277df2: 	private int row = -1;
1:2277df2: 
1:2277df2:     private String      schema;
1:2277df2:     private String      table;
1:2277df2:     private String      column;
1:2277df2:     private Properties  rowProperties;
1:2277df2: 
1:d847ced: 	/**
1:d847ced: 	 * Return a new LuceneListIndexesVTI.
1:d847ced: 	 */
1:d847ced: 	public LuceneListIndexesVTI()
1:7234498:         throws SQLException
2:d847ced:     {
1:2277df2: 		super
1:2277df2:             ( new String[]
1:2277df2:                 {
1:2277df2:                     "SCHEMANAME",
1:2277df2:                     "TABLENAME",
1:2277df2:                     "COLUMNNAME",
1:2277df2:                     "LASTUPDATED",
1:2277df2:                     "LUCENEVERSION",
1:2277df2:                     "ANALYZER",
1:a4e6298:                     "INDEXDESCRIPTORMAKER",
1:2277df2:                 }
1:2277df2:               );
1:2277df2: 		
1:2277df2:         connection = LuceneSupport.getDefaultConnection();
1:5cf7a46:         StorageFactory  dir = LuceneSupport.getStorageFactory( connection );
1:d847ced: 		
1:502ed2e: 		StorageFile luceneDir = dir.newStorageFile( Database.LUCENE_DIR );
1:5cf7a46:         ArrayList<StorageFile> allIndexes = new ArrayList<StorageFile>();
1:d847ced: 
1:5cf7a46:         StorageFile[]  schemas = listDirectories( dir, luceneDir );
1:d847ced:         if ( schemas != null )
1:d847ced:         {
1:5cf7a46:             for ( StorageFile schema : schemas )
1:d847ced:             {
1:5cf7a46:                 StorageFile[]  tables = listDirectories( dir, schema );
1:5cf7a46:                 for ( StorageFile table : tables )
1:d847ced:                 {
1:5cf7a46:                     StorageFile[]  indexes = listDirectories( dir, table );
1:5cf7a46:                     for ( StorageFile index : indexes )
1:d847ced:                     {
1:d847ced:                         allIndexes.add( index );
1:2277df2:                     }
5:d847ced:                 }
1:d847ced:             }
1:d847ced:         }
1:d847ced: 
1:5cf7a46:         indexes = new StorageFile[ allIndexes.size() ];
1:d847ced:         allIndexes.toArray( indexes );
1:d847ced: 	}
1:d847ced: 
1:2277df2: 	public void close() throws SQLException
1:2277df2:     {
1:2277df2: 		connection = null;
1:2277df2:         indexes = null;
1:2277df2:         schema = null;
1:2277df2:         table = null;
1:2277df2:         column = null;
1:2277df2:         rowProperties = null;
1:d847ced: 	}
1:d847ced: 
1:2277df2: 	public boolean next() throws SQLException
1:2277df2:     {
1:2277df2:         schema = null;
1:2277df2:         table = null;
1:2277df2:         column = null;
1:2277df2:         rowProperties = null;
1:2277df2:         
1:d847ced: 		row++;
1:d847ced: 		if (row < indexes.length) {
1:d847ced: 			return true;
1:d847ced: 		}
1:d847ced: 		return false;
1:d847ced: 	}
1:d847ced: 
1:d847ced: 	/**
1:d847ced: 	 * columns:
1:d847ced: 	 * 1 == id
1:d847ced: 	 * 2 == schema
1:d847ced: 	 * 3 == table
1:d847ced: 	 * 4 == column name
1:d847ced: 	 * 5 == last modified
1:2277df2: 	 */
1:2277df2: 	protected String getRawColumn( int col ) throws SQLException
1:2277df2:     {
1:2277df2:         readSchemaTableColumn();
1:2277df2:         
1:2277df2:         switch( col )
1:2277df2:         {
1:2277df2:         case 1: return schema;
1:2277df2:         case 2: return table;
1:2277df2:         case 3: return column;
1:2277df2:         case 5: return getProperty( LuceneSupport.LUCENE_VERSION );
1:2277df2:         case 6: return getProperty( LuceneSupport.ANALYZER );
1:a4e6298:         case 7: return getProperty( LuceneSupport.INDEX_DESCRIPTOR_MAKER );
1:2277df2:         default:
1:6b8ad38:             throw ToolUtilities.newSQLException
1:2277df2:                 (
1:2277df2:                  SQLState.LANG_INVALID_COLUMN_POSITION,
1:ce40a31:                  col,
1:ce40a31:                  getColumnCount()
1:2277df2:                  );
1:2277df2:         }
1:2277df2: 	}
1:2277df2: 
1:2277df2:     /** Get the timestamp value of the 1-based column id */
1:2277df2:     public  Timestamp   getTimestamp( int col ) throws SQLException
1:2277df2:     {
1:2277df2:         if ( col != 4 )
1:d847ced:         {
1:6b8ad38:             throw ToolUtilities.newSQLException
1:d847ced:                 (
1:d847ced:                  SQLState.LANG_INVALID_COLUMN_POSITION,
1:ce40a31:                  col,
1:ce40a31:                  getColumnCount()
1:d847ced:                  );
1:d847ced:         }
1:d847ced: 
1:2277df2:         try {
1:2277df2:             long    timestampMillis = Long.parseLong( getProperty( LuceneSupport.UPDATE_TIMESTAMP ) );
1:2277df2: 
1:2277df2:             return new Timestamp( timestampMillis );
1:2277df2:         }
1:6b8ad38:         catch (NumberFormatException nfe) { throw ToolUtilities.wrap( nfe ); }
1:2277df2:     }
1:2277df2:     
1:2277df2:     /** Fill in the schema, table, and column names */
1:2277df2:     private void    readSchemaTableColumn()
1:2277df2:         throws SQLException
1:2277df2:     {
1:2277df2:         if ( column != null ) { return; }
1:2277df2:         
1:5cf7a46:         StorageFile    columnDir = indexes[ row ];
1:2277df2:         column = columnDir.getName();
1:5cf7a46:         StorageFile    tableDir = columnDir.getParentDir();
1:2277df2:         table = tableDir.getName();
1:5cf7a46:         StorageFile    schemaDir = tableDir.getParentDir();
1:2277df2:         schema = schemaDir.getName();
1:2277df2:     }
1:2277df2: 
1:2277df2:     /** get the string value of a property from the row properties */
1:2277df2:     private String  getProperty( String key )
1:2277df2:         throws SQLException
1:2277df2:     {
1:2277df2:         return getRowProperties().getProperty( key );
1:2277df2:     }
1:2277df2:     
1:2277df2:     /** get the properties of the current row */
1:2277df2:     private Properties  getRowProperties()
1:2277df2:         throws SQLException
1:2277df2:     {
1:2277df2:         if ( rowProperties == null )
1:2277df2:         {
1:2277df2:             try {
1:2277df2:                 readSchemaTableColumn();
1:3240e21:                 String      delimitedColumnName = LuceneSupport.delimitID( column );
1:3240e21:                 StorageFile    indexPropertiesFile = LuceneSupport.getIndexPropertiesFile( connection, schema, table, delimitedColumnName );
1:9344889:                 rowProperties = readIndexProperties( indexPropertiesFile );
1:2277df2:             }
1:6b8ad38:             catch (IOException ioe) { throw ToolUtilities.wrap( ioe ); }
1:6b8ad38:             catch (PrivilegedActionException pae) { throw ToolUtilities.wrap( pae ); }
1:2277df2:         }
1:2277df2: 
1:2277df2:         return rowProperties;
1:2277df2:     }
1:2277df2: 
1:9344889:     /** List files */
1:5cf7a46:     private static  StorageFile[]  listDirectories( final StorageFactory storageFactory, final StorageFile dir )
1:9344889:     {
1:9344889:         return AccessController.doPrivileged
1:9344889:             (
1:7234498:              new PrivilegedAction<StorageFile[]>()
1:9344889:              {
1:7234498:                 public StorageFile[] run()
1:9344889:                 {
1:5cf7a46:                     ArrayList<StorageFile>  subdirectories = new ArrayList<StorageFile>();
1:5cf7a46:                     String[]    fileNames = dir.list();
1:5cf7a46: 
1:5cf7a46:                     for ( String fileName : fileNames )
1:5cf7a46:                     {
1:5cf7a46:                         StorageFile candidate = storageFactory.newStorageFile( dir, fileName );
1:5cf7a46:                         if ( candidate.isDirectory() ) { subdirectories.add( candidate ); }
1:5cf7a46:                     }
1:5cf7a46: 
1:5cf7a46:                     StorageFile[]   result = new StorageFile[ subdirectories.size() ];
1:5cf7a46:                     subdirectories.toArray( result );
1:5cf7a46:                     
1:5cf7a46:                     return result;
1:9344889:                 }
1:9344889:              }
1:9344889:              );
1:9344889:     }
1:9344889: 
1:9344889:     /** Read the index properties file */
1:5cf7a46:     private static  Properties readIndexProperties( final StorageFile file )
1:7234498:         throws IOException
1:9344889:     {
1:d847ced:         try {
1:9344889:             return AccessController.doPrivileged
1:9344889:             (
1:9344889:              new PrivilegedExceptionAction<Properties>()
1:9344889:              {
1:9344889:                 public Properties run() throws IOException
1:9344889:                 {
1:9344889:                     return LuceneSupport.readIndexPropertiesNoPrivs( file );
1:9344889:                 }
1:9344889:              }
1:9344889:              );
1:7234498:         } catch (PrivilegedActionException pae) {
1:7234498:             throw (IOException) pae.getCause();
1:9344889:         }
1:d847ced:     }
1:9344889: 
1:d847ced: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:                  col,
1:                  getColumnCount()
/////////////////////////////////////////////////////////////////////////
1:                  col,
1:                  getColumnCount()
commit:6b8ad38
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.optional.utils.ToolUtilities;
1: 
/////////////////////////////////////////////////////////////////////////
1:             throw ToolUtilities.newSQLException
/////////////////////////////////////////////////////////////////////////
1:             throw ToolUtilities.newSQLException
/////////////////////////////////////////////////////////////////////////
1:         catch (NumberFormatException nfe) { throw ToolUtilities.wrap( nfe ); }
/////////////////////////////////////////////////////////////////////////
1:             catch (IOException ioe) { throw ToolUtilities.wrap( ioe ); }
1:             catch (PrivilegedActionException pae) { throw ToolUtilities.wrap( pae ); }
commit:3240e21
/////////////////////////////////////////////////////////////////////////
1:                 String      delimitedColumnName = LuceneSupport.delimitID( column );
1:                 StorageFile    indexPropertiesFile = LuceneSupport.getIndexPropertiesFile( connection, schema, table, delimitedColumnName );
commit:a4e6298
/////////////////////////////////////////////////////////////////////////
1:                     "INDEXDESCRIPTORMAKER",
/////////////////////////////////////////////////////////////////////////
1:         case 7: return getProperty( LuceneSupport.INDEX_DESCRIPTOR_MAKER );
commit:eb79cc0
/////////////////////////////////////////////////////////////////////////
1: class LuceneListIndexesVTI extends StringColumnVTI
commit:502ed2e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.database.Database;
/////////////////////////////////////////////////////////////////////////
1: 		StorageFile luceneDir = dir.newStorageFile( Database.LUCENE_DIR );
commit:5cf7a46
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.io.StorageFactory;
1: import org.apache.derby.io.StorageFile;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	private StorageFile[] indexes;
/////////////////////////////////////////////////////////////////////////
1:         StorageFactory  dir = LuceneSupport.getStorageFactory( connection );
0: 		StorageFile luceneDir = dir.newStorageFile( LuceneSupport.LUCENE_DIR );
1:         ArrayList<StorageFile> allIndexes = new ArrayList<StorageFile>();
1:         StorageFile[]  schemas = listDirectories( dir, luceneDir );
1:             for ( StorageFile schema : schemas )
1:                 StorageFile[]  tables = listDirectories( dir, schema );
1:                 for ( StorageFile table : tables )
1:                     StorageFile[]  indexes = listDirectories( dir, table );
1:                     for ( StorageFile index : indexes )
/////////////////////////////////////////////////////////////////////////
1:         indexes = new StorageFile[ allIndexes.size() ];
/////////////////////////////////////////////////////////////////////////
1:         StorageFile    columnDir = indexes[ row ];
1:         StorageFile    tableDir = columnDir.getParentDir();
1:         StorageFile    schemaDir = tableDir.getParentDir();
/////////////////////////////////////////////////////////////////////////
0:                 StorageFile    indexPropertiesFile = LuceneSupport.getIndexPropertiesFile( connection, schema, table, column );
/////////////////////////////////////////////////////////////////////////
1:     private static  StorageFile[]  listDirectories( final StorageFactory storageFactory, final StorageFile dir )
0:              new PrivilegedExceptionAction<StorageFile[]>()
0:                 public StorageFile[] run() throws IOException
1:                     ArrayList<StorageFile>  subdirectories = new ArrayList<StorageFile>();
1:                     String[]    fileNames = dir.list();
1: 
1:                     for ( String fileName : fileNames )
1:                     {
1:                         StorageFile candidate = storageFactory.newStorageFile( dir, fileName );
1:                         if ( candidate.isDirectory() ) { subdirectories.add( candidate ); }
1:                     }
1: 
1:                     StorageFile[]   result = new StorageFile[ subdirectories.size() ];
1:                     subdirectories.toArray( result );
1:                     
1:                     return result;
1:     private static  Properties readIndexProperties( final StorageFile file )
commit:9344889
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
0:         File[]  schemas = listFiles( luceneDir, dirFilter );
0:                 File[]  tables = listFiles( schema, dirFilter );
0:                     File[]  indexes = listFiles( table, dirFilter );
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 rowProperties = readIndexProperties( indexPropertiesFile );
/////////////////////////////////////////////////////////////////////////
1:     /** List files */
0:     private static  File[]  listFiles( final File file, final FileFilter fileFilter )
0:         throws IOException, PrivilegedActionException
1:     {
1:         return AccessController.doPrivileged
1:             (
0:              new PrivilegedExceptionAction<File[]>()
1:              {
0:                 public File[] run() throws IOException
1:                 {
0:                     if ( fileFilter == null )   { return file.listFiles(); }
0:                     else { return file.listFiles( fileFilter ); }
1:                 }
1:              }
1:              );
1:     }
1: 
1:     /** Read the index properties file */
0:     private static  Properties readIndexProperties( final File file )
0:         throws IOException, PrivilegedActionException
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedExceptionAction<Properties>()
1:              {
1:                 public Properties run() throws IOException
1:                 {
1:                     return LuceneSupport.readIndexPropertiesNoPrivs( file );
1:                 }
1:              }
1:              );
1:     }
1: 
commit:fbf176c
/////////////////////////////////////////////////////////////////////////
1:    Class org.apache.derby.optional.lucene.LuceneListIndexesVTI
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.optional.lucene;
/////////////////////////////////////////////////////////////////////////
1:  * See org.apache.derby.optional.lucene.LuceneSupport.listIndexes.
commit:2277df2
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.Timestamp;
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
0: public class LuceneListIndexesVTI extends StringColumnVTI
1: {
1:     private Connection  connection;
0: 	private File[] indexes;
1: 	private int row = -1;
1: 
1:     private String      schema;
1:     private String      table;
1:     private String      column;
1:     private Properties  rowProperties;
1: 
/////////////////////////////////////////////////////////////////////////
1: 		super
1:             ( new String[]
1:                 {
1:                     "SCHEMANAME",
1:                     "TABLENAME",
1:                     "COLUMNNAME",
1:                     "LASTUPDATED",
1:                     "LUCENEVERSION",
1:                     "ANALYZER",
0:                     "ANALYZERMAKER",
1:                 }
1:               );
1:         connection = LuceneSupport.getDefaultConnection();
0: 		String dir = LuceneSupport.getIndexLocation( connection, null, null, null );
/////////////////////////////////////////////////////////////////////////
1: 	public void close() throws SQLException
1:     {
1: 		connection = null;
1:         indexes = null;
1:         schema = null;
1:         table = null;
1:         column = null;
1:         rowProperties = null;
1: 	public boolean next() throws SQLException
1:     {
1:         schema = null;
1:         table = null;
1:         column = null;
1:         rowProperties = null;
1:         
/////////////////////////////////////////////////////////////////////////
1: 	protected String getRawColumn( int col ) throws SQLException
1:     {
1:         readSchemaTableColumn();
1:         
1:         switch( col )
1:         {
1:         case 1: return schema;
1:         case 2: return table;
1:         case 3: return column;
1:         case 5: return getProperty( LuceneSupport.LUCENE_VERSION );
1:         case 6: return getProperty( LuceneSupport.ANALYZER );
0:         case 7: return getProperty( LuceneSupport.ANALYZER_MAKER );
1:         default:
0:             throw LuceneSupport.newSQLException
1:                 (
1:                  SQLState.LANG_INVALID_COLUMN_POSITION,
0:                  new Integer( col ),
0:                  new Integer( getColumnCount() )
1:                  );
1:         }
1:             /*
1:             */
1: 	}
1: 
1:     /** Get the timestamp value of the 1-based column id */
1:     public  Timestamp   getTimestamp( int col ) throws SQLException
1:     {
1:         if ( col != 4 )
/////////////////////////////////////////////////////////////////////////
1:         }
1: 
1:         try {
1:             long    timestampMillis = Long.parseLong( getProperty( LuceneSupport.UPDATE_TIMESTAMP ) );
1: 
1:             return new Timestamp( timestampMillis );
1:         }
0:         catch (NumberFormatException nfe) { throw LuceneSupport.wrap( nfe ); }
1:     }
1:     
1:     /** Fill in the schema, table, and column names */
1:     private void    readSchemaTableColumn()
1:         throws SQLException
1:     {
1:         if ( column != null ) { return; }
1:         
0:         File    columnDir = indexes[ row ];
1:         column = columnDir.getName();
0:         File    tableDir = columnDir.getParentFile();
1:         table = tableDir.getName();
0:         File    schemaDir = tableDir.getParentFile();
1:         schema = schemaDir.getName();
1:     }
1: 
1:     /** get the string value of a property from the row properties */
1:     private String  getProperty( String key )
1:         throws SQLException
1:     {
1:         return getRowProperties().getProperty( key );
1:     }
1:     
1:     /** get the properties of the current row */
1:     private Properties  getRowProperties()
1:         throws SQLException
1:     {
1:         if ( rowProperties == null )
1:         {
1:             try {
1:                 readSchemaTableColumn();
0:                 File    indexPropertiesFile = LuceneSupport.getIndexPropertiesFile( connection, schema, table, column );
0:                 rowProperties = LuceneSupport.readIndexProperties( indexPropertiesFile );
1:             }
0:             catch (IOException ioe) { throw LuceneSupport.wrap( ioe ); }
0:             catch (PrivilegedActionException pae) { throw LuceneSupport.wrap( pae ); }
1:         }
1: 
1:         return rowProperties;
1:     }
1: 
commit:cb62199
/////////////////////////////////////////////////////////////////////////
0: 		super( new String[] { "SCHEMANAME","TABLENAME","COLUMNNAME","LASTUPDATED" } );
/////////////////////////////////////////////////////////////////////////
0: 		} else if (col == 2) {
0: 		} else if (col == 3) {
0: 		} else if (col == 4) {
commit:d847ced
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
0:    Class org.apache.derby.impl.optional.lucene.LuceneListIndexesVTI
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
0: package org.apache.derby.impl.optional.lucene;
1: 
0: import java.io.File;
0: import java.io.FileFilter;
1: import java.io.IOException;
1: import java.security.PrivilegedActionException;
1: import java.sql.SQLException;
0: import java.text.DateFormat;
1: import java.util.ArrayList;
1: 
1: import org.apache.derby.shared.common.reference.SQLState;
1: import org.apache.derby.vti.StringColumnVTI;
1: 
1: /**
1:  * Provides a table interface to the Lucene indexes in this database.
0:  * See org.apache.derby.impl.optional.lucene.LuceneSupport.listIndexes.
1:  * 
1:  */
0: public class LuceneListIndexesVTI extends StringColumnVTI {
1: 	
0: 	File[] indexes;
0: 	int row = -1;
0: 	String schema, table;
1: 	
1: 	/**
1: 	 * Return a new LuceneListIndexesVTI.
1: 	 * 
0: 	 * @throws IOException
1: 	 */
1: 	public LuceneListIndexesVTI()
0:         throws IOException, PrivilegedActionException, SQLException
1:     {
0: 		super(new String[]{"ID","SCHEMANAME","TABLENAME","COLUMNNAME","LASTUPDATED"});
1: 		
0: 		String dir = LuceneSupport.getIndexLocation( LuceneSupport.getDefaultConnection(), null, null, null );
1: 		
0: 		File luceneDir = new File(dir);
0:         DirFilter   dirFilter = new DirFilter();
0:         ArrayList<File> allIndexes = new ArrayList<File>();
1: 
0:         File[]  schemas = LuceneSupport.listFiles( luceneDir, dirFilter );
1:         if ( schemas != null )
1:         {
0:             for ( File schema : schemas )
1:             {
0:                 File[]  tables = LuceneSupport.listFiles( schema, dirFilter );
0:                 for ( File table : tables )
1:                 {
0:                     File[]  indexes = LuceneSupport.listFiles( table, dirFilter );
0:                     for ( File index : indexes )
1:                     {
1:                         allIndexes.add( index );
1:                     }
1:                 }
1:             }
1:         }
1: 
0:         indexes = new File[ allIndexes.size() ];
1:         allIndexes.toArray( indexes );
1: 	}
1: 
0: 	public void close() throws SQLException {
1: 		
1: 	}
1: 
0: 	public boolean next() throws SQLException {
1: 		row++;
1: 		if (row < indexes.length) {
1: 			return true;
1: 		}
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * columns:
1: 	 * 1 == id
1: 	 * 2 == schema
1: 	 * 3 == table
1: 	 * 4 == column name
1: 	 * 5 == last modified
1: 	 */
0: 	protected String getRawColumn(int col) throws SQLException {
1: 
0:         File    columnDir = indexes[ row ];
0:         String columnPart = columnDir.getName();
0:         File    tableDir = columnDir.getParentFile();
0:         String  tablePart = tableDir.getName();
0:         File    schemaDir = tableDir.getParentFile();
0:         String  schemaPart = schemaDir.getName();
1: 
0: 		if (col == 1) {
0: 			return Integer.toString(row+1);
0: 		} else if (col == 2) {
0: 			return schemaPart;
0: 		} else if (col == 3) {
0: 			return tablePart;
0: 		} else if (col == 4) {
0: 			return columnPart;
0: 		} else if (col == 5) {
1:             try {
0:                 DateFormat df = DateFormat.getDateTimeInstance();
0:                 return df.format( LuceneSupport.getLastModified( columnDir ) );
1:             }
0:             catch (Exception e) { throw LuceneSupport.wrap( e ); }
1: 		}
0:         else
1:         {
0:             throw LuceneSupport.newSQLException
1:                 (
1:                  SQLState.LANG_INVALID_COLUMN_POSITION,
0:                  new Integer( col ),
0:                  new Integer( getColumnCount() )
1:                  );
1:             }
1: 	}
1: 	
0:     public  static  class   DirFilter   implements  FileFilter
1:     {
0:         public  boolean accept( File file ) { return file.isDirectory(); }
1:     }
1: 
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:7234498
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1:         throws SQLException
/////////////////////////////////////////////////////////////////////////
1:              new PrivilegedAction<StorageFile[]>()
1:                 public StorageFile[] run()
/////////////////////////////////////////////////////////////////////////
1:         throws IOException
0:         try {
0:             return AccessController.doPrivileged
/////////////////////////////////////////////////////////////////////////
1:         } catch (PrivilegedActionException pae) {
1:             throw (IOException) pae.getCause();
0:         }
============================================================================