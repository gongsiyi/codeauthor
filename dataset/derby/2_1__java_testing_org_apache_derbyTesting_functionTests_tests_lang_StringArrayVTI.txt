1:4aef9b0: /*
4:4aef9b0: 
1:4aef9b0: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI
1:4aef9b0: 
1:4aef9b0: Licensed to the Apache Software Foundation (ASF) under one or more
1:4aef9b0: contributor license agreements.  See the NOTICE file distributed with
1:4aef9b0: this work for additional information regarding copyright ownership.
1:4aef9b0: The ASF licenses this file to You under the Apache License, Version 2.0
1:4aef9b0: (the "License"); you may not use this file except in compliance with
1:4aef9b0: the License.  You may obtain a copy of the License at
1:4aef9b0: 
1:4aef9b0: http://www.apache.org/licenses/LICENSE-2.0
1:4aef9b0: 
1:4aef9b0: Unless required by applicable law or agreed to in writing, software
1:4aef9b0: distributed under the License is distributed on an "AS IS" BASIS,
1:4aef9b0: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4aef9b0: See the License for the specific language governing permissions and
1:4aef9b0: limitations under the License.
1:4aef9b0: 
1:4aef9b0: */
1:4aef9b0: 
1:4aef9b0: package org.apache.derbyTesting.functionTests.tests.lang;
1:4aef9b0: 
1:4aef9b0: import  java.sql.*;
1:51345f1: import java.util.Arrays;
1:4aef9b0: 
1:96e3f0c: import org.apache.derby.vti.StringColumnVTI;
1:524a8b4: import org.apache.derby.vti.VTICosting;
1:524a8b4: import org.apache.derby.vti.VTIEnvironment;
1:524a8b4: 
1:2d3677b: /**
1:2d3677b:  * <p>
1:4aef9b0:  * This is a concrete VTI which is prepopulated with rows which are just
1:4aef9b0:  * arrays of string columns.
1:4aef9b0:  * </p>
1:4aef9b0:  */
1:4aef9b0: public    class   StringArrayVTI  extends StringColumnVTI
2:4aef9b0: {
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // CONSTANTS
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:524a8b4:     public  static  final   double  FAKE_ROW_COUNT = 13.0;
1:524a8b4:     public  static  final   double  FAKE_INSTANTIATION_COST = 3149.0;
1:51345f1: 
1:51345f1:     private static  final   String[]    EXPECTED_STACK =
1:51345f1:     {
1:51345f1:         "deduceGetXXXCaller",
1:51345f1:         "getRawColumn",
1:51345f1:         "getString",
1:51345f1:     };
1:524a8b4:     
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // INNER CLASSES
1:524a8b4:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0:     //
1:524a8b4:     // Inner classes for testing VTICosting api.
1:524a8b4:     //
1:524a8b4:     public  static  class   MissingConstructor  extends StringArrayVTI  implements VTICosting
1:524a8b4:     {
1:524a8b4:         private  MissingConstructor( String[] columnNames, String[][] rows ) { super( columnNames, rows ); }
1:524a8b4: 
1:524a8b4:         public  static  ResultSet   dummyVTI()
1:524a8b4:         {
1:524a8b4:             return new StringArrayVTI( new String[] { "foo" }, new String[][] { { "bar" } } );
1:524a8b4:         }
1:524a8b4:         
1:524a8b4:         public  double  getEstimatedRowCount( VTIEnvironment env ) throws SQLException
1:524a8b4:         {
1:524a8b4:             return FAKE_ROW_COUNT;
1:524a8b4:         }
1:524a8b4:         
1:524a8b4:         public  double  getEstimatedCostPerInstantiation( VTIEnvironment env ) throws SQLException
1:524a8b4:         {
1:524a8b4:             return FAKE_INSTANTIATION_COST;
1:524a8b4:         }
1:524a8b4:         
1:524a8b4:         public  boolean supportsMultipleInstantiations( VTIEnvironment env ) throws SQLException
1:524a8b4:         {
1:524a8b4:             return false;
1:524a8b4:         }        
1:524a8b4:     }
1:524a8b4:     
1:524a8b4:     public  static  class   ZeroArgConstructorNotPublic    extends MissingConstructor
1:524a8b4:     {
1:524a8b4:         ZeroArgConstructorNotPublic()
1:524a8b4:         { super( new String[] { "foo" }, new String[][] { { "bar" } } ); }
1:524a8b4:     }
1:524a8b4:     
1:524a8b4:     public  static  class   ConstructorException    extends ZeroArgConstructorNotPublic
1:524a8b4:     {
1:524a8b4:         public  ConstructorException()
1:524a8b4:         {
1:524a8b4:             super();
1:524a8b4: 
1:524a8b4:             Object      shameOnYou = null;
1:524a8b4: 
1:524a8b4:             // trip over a null pointer exception
1:524a8b4:             shameOnYou.hashCode();
1:524a8b4:         }
1:524a8b4:     }
1:524a8b4:     
1:524a8b4:     public  static  class   GoodVTICosting    extends ZeroArgConstructorNotPublic
1:524a8b4:     {
1:524a8b4:         public  GoodVTICosting()
1:524a8b4:         {
1:524a8b4:             super();
1:524a8b4:         }
1:524a8b4:     }
1:524a8b4:     
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // STATE
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0:     private int             _rowIdx = -1;
1:2d3677b:     private String[][]      _rows;
1:2d3677b: 
1:2d3677b:     private static  StringBuffer    _callers;
1:4aef9b0:     
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // CONSTRUCTORS
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0:     public  StringArrayVTI( String[] columnNames, String[][] rows )
1:4aef9b0:     {
1:4aef9b0:         super( columnNames );
1:4aef9b0: 
1:4aef9b0:         _rows = rows;
3:4aef9b0:     }
1:4aef9b0:     
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:2d3677b:     // FUNCTIONS
1:2d3677b:     //
1:2d3677b:     ///////////////////////////////////////////////////////////////////////////////////
1:2d3677b: 
1:51345f1:     /**
1:51345f1:      * <p>
1:2d3677b:      * This SQL function returns the list of getXXX() calls made to the last
1:2d3677b:      * StringArrayVTI.
1:2d3677b:      * </p>
1:2d3677b:      */
1:2d3677b:     public  static  String  getXXXrecord()
1:2d3677b:     {
1:2d3677b:         if ( _callers == null ) { return null; }
1:2d3677b:         else { return _callers.toString(); }
1:2d3677b:     }
1:2d3677b:     
1:2d3677b:     ///////////////////////////////////////////////////////////////////////////////////
1:2d3677b:     //
1:4aef9b0:     // ABSTRACT StringColumn BEHAVIOR
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0:     protected String  getRawColumn( int columnNumber ) throws SQLException
1:4aef9b0:     {
1:2d3677b:         String                  callersCallerMethod = deduceGetXXXCaller();
1:2d3677b: 
1:2d3677b:         _callers.append( callersCallerMethod );
1:2d3677b:         _callers.append( ' ' );
1:2d3677b: 
1:2d3677b:         return  _rows[ _rowIdx ][ columnNumber - 1 ];
1:2d3677b:     }
1:2d3677b: 
1:2d3677b:     // The stack looks like this:
1:2d3677b:     //
1:2d3677b:     // getXXX()
1:2d3677b:     // getString()
1:2d3677b:     // getRawColumn()
1:2d3677b:     // deduceGetXXXCaller()
1:2d3677b:     //
1:2d3677b:     // Except if the actual getXXX() method is getString()
1:2d3677b:     //
1:2d3677b:     private String  deduceGetXXXCaller() throws SQLException
1:2d3677b:     {
1:51345f1:         StackTraceElement[]     stack = null;
1:4aef9b0:         try {
1:51345f1:             stack = (new Throwable()).getStackTrace();
1:51345f1:          } catch (Throwable t) { throw new SQLException( t.getMessage() ); }
1:51345f1:         
1:51345f1:         return locateGetXXXCaller( stack );
1:51345f1:    }
1:2d3677b: 
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // ResultSet BEHAVIOR
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:2d3677b: 
1:4aef9b0:     public  boolean next() throws SQLException
1:4aef9b0:     {
1:4aef9b0:         if ( (++_rowIdx) >= _rows.length ) { return false; }
1:2d3677b:         else
1:2d3677b:         {
1:2d3677b:             _callers = new StringBuffer();
1:2d3677b:             return true;
1:2d3677b:         }
1:4aef9b0:     }
1:4aef9b0: 
1:4aef9b0:     public  void close() throws SQLException
1:4aef9b0:     {}
1:4aef9b0: 
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0:     //
1:4aef9b0:     // MINIONS
1:4aef9b0:     //
1:4aef9b0:     ///////////////////////////////////////////////////////////////////////////////////
1:4aef9b0: 
1:4aef9b0:     /**
1:4aef9b0:      * <p>
1:51345f1:      * Find the getXXX() method above us on the stack. The stack looks
1:51345f1:      * like this:
1:51345f1:      * </p>
1:51345f1:      *
1:51345f1:      * <ul>
1:51345f1:      * <li>getXXX()</li>
1:51345f1:      * <li>getString()</li>
1:51345f1:      * <li>getRawColumn()</li>
1:51345f1:      * <li>deduceGetXXXCaller()</li>
1:51345f1:      * </ul>
1:51345f1:      *
1:51345f1:      * </p>    
1:51345f1:      * Except if the actual getXXX() method is getString()
1:51345f1:      * </p>
1:51345f1:      */
1:51345f1:     private String  locateGetXXXCaller( StackTraceElement[] stack ) throws SQLException
1:51345f1:     {
1:51345f1:         String[]        actualMethodNames = squeezeMethodNames( stack );
1:51345f1:         String[]        expectedMethodNames = EXPECTED_STACK;
1:51345f1:         int             actualIdx = findIndex( "getString", actualMethodNames );
1:51345f1: 
1:51345f1:         if ( actualIdx < 0 ) { throw badStack( EXPECTED_STACK, actualMethodNames ); }
1:51345f1:        
1:51345f1:         String      result = actualMethodNames[ ++actualIdx ];
1:51345f1: 
1:51345f1:         if ( !result.startsWith( "get" ) ) { result = "getString"; }
1:51345f1: 
1:51345f1:         return result;
1:51345f1:     }
1:51345f1: 
1:51345f1:     /**
1:51345f1:      * <p>
1:51345f1:      * Complain that we don't like the stack.
1:51345f1:      * </p>
1:51345f1:      */
1:51345f1:     private SQLException   badStack( String[] expected, String[] actual )
1:51345f1:     {
1:51345f1:         return new SQLException
1:51345f1:             ( "Expected stack to include " + stringify( expected ) + ", but the stack was actually this: " + stringify( actual ) );
1:51345f1:     }
1:51345f1:     
1:51345f1:     /**
1:51345f1:      * <p>
1:51345f1:      * Look for a  method name on a stack and return its location as an
1:51345f1:      * index into the stack. Returns -1 if the expected name is not found.
1:51345f1:      * </p>
1:51345f1:      */
1:51345f1:     private int findIndex( String expectedMethod, String[] actualMethodNames )
1:51345f1:     {
1:51345f1:         int         count = actualMethodNames.length;
1:51345f1:         for ( int i = 0; i < count; i++ )
1:51345f1:         {
1:51345f1:             if ( expectedMethod.equals( actualMethodNames[ i ] ) ) { return i; }
1:51345f1:         }
1:51345f1: 
1:51345f1:         return -1;
1:51345f1:     }
1:51345f1: 
1:51345f1:     /**
1:51345f1:      * <p>
1:51345f1:      * Extract the names of methods on a stack.
1:51345f1:      * </p>
1:51345f1:      */
1:51345f1:     private String[]    squeezeMethodNames( StackTraceElement[] stack )
1:51345f1:     {
1:51345f1:         if ( stack == null ) { stack = new StackTraceElement[] {}; }
1:51345f1:         int         count = stack.length;
1:51345f1:         String[]    result = new String[ count ];
1:51345f1: 
1:51345f1:         for ( int i = 0; i < count; i++ )
1:51345f1:         {
1:51345f1:             result[ i ] = stack[ i ].getMethodName();
1:51345f1:         }
1:51345f1: 
1:51345f1:         return result;
1:51345f1:     }
1:51345f1: 
1:51345f1: 
1:51345f1:     /**
1:51345f1:      * <p>
1:51345f1:      * Turn an array into a printable String.
1:51345f1:      * </p>
1:51345f1:      */
1:51345f1:     private String  stringify( Object[] raw )
1:51345f1:     {
1:51345f1:         if ( raw == null ) { raw = new Object[] {}; }
1:51345f1: 
1:51345f1:         return Arrays.asList( raw ).toString();
1:51345f1:     }
1:4aef9b0: 
1:4aef9b0: 
1:4aef9b0: }
1:4aef9b0: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ca998af
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:96e3f0c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.vti.StringColumnVTI;
commit:51345f1
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String[]    EXPECTED_STACK =
1:     {
1:         "deduceGetXXXCaller",
1:         "getRawColumn",
1:         "getString",
1:     };
/////////////////////////////////////////////////////////////////////////
1:         StackTraceElement[]     stack = null;
1:             stack = (new Throwable()).getStackTrace();
1:          } catch (Throwable t) { throw new SQLException( t.getMessage() ); }
1:         
1:         return locateGetXXXCaller( stack );
1:    }
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Find the getXXX() method above us on the stack. The stack looks
1:      * like this:
1:      * </p>
1:      *
1:      * <ul>
1:      * <li>getXXX()</li>
1:      * <li>getString()</li>
1:      * <li>getRawColumn()</li>
1:      * <li>deduceGetXXXCaller()</li>
1:      * </ul>
1:      *
1:      * </p>    
1:      * Except if the actual getXXX() method is getString()
1:      * </p>
1:      */
1:     private String  locateGetXXXCaller( StackTraceElement[] stack ) throws SQLException
1:     {
1:         String[]        actualMethodNames = squeezeMethodNames( stack );
1:         String[]        expectedMethodNames = EXPECTED_STACK;
1:         int             actualIdx = findIndex( "getString", actualMethodNames );
1: 
1:         if ( actualIdx < 0 ) { throw badStack( EXPECTED_STACK, actualMethodNames ); }
1:        
1:         String      result = actualMethodNames[ ++actualIdx ];
1: 
1:         if ( !result.startsWith( "get" ) ) { result = "getString"; }
1: 
1:         return result;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Complain that we don't like the stack.
1:      * </p>
1:      */
1:     private SQLException   badStack( String[] expected, String[] actual )
1:     {
1:         return new SQLException
1:             ( "Expected stack to include " + stringify( expected ) + ", but the stack was actually this: " + stringify( actual ) );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Look for a  method name on a stack and return its location as an
1:      * index into the stack. Returns -1 if the expected name is not found.
1:      * </p>
1:      */
1:     private int findIndex( String expectedMethod, String[] actualMethodNames )
1:     {
1:         int         count = actualMethodNames.length;
1:         for ( int i = 0; i < count; i++ )
1:         {
1:             if ( expectedMethod.equals( actualMethodNames[ i ] ) ) { return i; }
1:         }
1: 
1:         return -1;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Extract the names of methods on a stack.
1:      * </p>
1:      */
1:     private String[]    squeezeMethodNames( StackTraceElement[] stack )
1:     {
1:         if ( stack == null ) { stack = new StackTraceElement[] {}; }
1:         int         count = stack.length;
1:         String[]    result = new String[ count ];
1: 
1:         for ( int i = 0; i < count; i++ )
1:         {
1:             result[ i ] = stack[ i ].getMethodName();
1:         }
1: 
1:         return result;
1:     }
1: 
1: 
1:     /**
1:      * <p>
1:      * Turn an array into a printable String.
1:      * </p>
1:      */
1:     private String  stringify( Object[] raw )
1:     {
1:         if ( raw == null ) { raw = new Object[] {}; }
1: 
1:         return Arrays.asList( raw ).toString();
1:     }
commit:2d3677b
/////////////////////////////////////////////////////////////////////////
1:     private String[][]      _rows;
1: 
1:     private static  StringBuffer    _callers;
/////////////////////////////////////////////////////////////////////////
1:     // FUNCTIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * This SQL function returns the list of getXXX() calls made to the last
1:      * StringArrayVTI.
1:      * </p>
1:      */
1:     public  static  String  getXXXrecord()
1:     {
1:         if ( _callers == null ) { return null; }
1:         else { return _callers.toString(); }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:         String                  callersCallerMethod = deduceGetXXXCaller();
1: 
1:         _callers.append( callersCallerMethod );
1:         _callers.append( ' ' );
1: 
1:         return  _rows[ _rowIdx ][ columnNumber - 1 ];
1:     }
1: 
1:     // The stack looks like this:
1:     //
1:     // getXXX()
1:     // getString()
1:     // getRawColumn()
1:     // deduceGetXXXCaller()
1:     //
1:     // Except if the actual getXXX() method is getString()
1:     //
1:     private String  deduceGetXXXCaller() throws SQLException
1:     {
0:             StackTraceElement[]     stack = (new Throwable()).getStackTrace();
0:             StackTraceElement       callersCaller = stack[ 3 ];
0:             String                  callersCallerMethod = callersCaller.getMethodName();
1: 
0:             if ( !callersCallerMethod.startsWith( "get" ) ) { callersCallerMethod = "getString"; }
1: 
0:             return  callersCallerMethod;
/////////////////////////////////////////////////////////////////////////
1:         else
1:         {
1:             _callers = new StringBuffer();
1:             return true;
1:         }
commit:524a8b4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.vti.VTICosting;
1: import org.apache.derby.vti.VTIEnvironment;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public  static  final   double  FAKE_ROW_COUNT = 13.0;
1:     public  static  final   double  FAKE_INSTANTIATION_COST = 3149.0;
1:     
1:     //
1:     // Inner classes for testing VTICosting api.
1:     //
1:     public  static  class   MissingConstructor  extends StringArrayVTI  implements VTICosting
1:     {
1:         private  MissingConstructor( String[] columnNames, String[][] rows ) { super( columnNames, rows ); }
1: 
1:         public  static  ResultSet   dummyVTI()
1:         {
1:             return new StringArrayVTI( new String[] { "foo" }, new String[][] { { "bar" } } );
1:         }
1:         
1:         public  double  getEstimatedRowCount( VTIEnvironment env ) throws SQLException
1:         {
1:             return FAKE_ROW_COUNT;
1:         }
1:         
1:         public  double  getEstimatedCostPerInstantiation( VTIEnvironment env ) throws SQLException
1:         {
1:             return FAKE_INSTANTIATION_COST;
1:         }
1:         
1:         public  boolean supportsMultipleInstantiations( VTIEnvironment env ) throws SQLException
1:         {
1:             return false;
1:         }        
1:     }
1:     
1:     public  static  class   ZeroArgConstructorNotPublic    extends MissingConstructor
1:     {
1:         ZeroArgConstructorNotPublic()
1:         { super( new String[] { "foo" }, new String[][] { { "bar" } } ); }
1:     }
1:     
1:     public  static  class   ConstructorException    extends ZeroArgConstructorNotPublic
1:     {
1:         public  ConstructorException()
1:         {
1:             super();
1: 
1:             Object      shameOnYou = null;
1: 
1:             // trip over a null pointer exception
1:             shameOnYou.hashCode();
1:         }
1:     }
1:     
1:     public  static  class   GoodVTICosting    extends ZeroArgConstructorNotPublic
1:     {
1:         public  GoodVTICosting()
1:         {
1:             super();
1:         }
1:     }
1:     
commit:4aef9b0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import  java.sql.*;
1: 
1: /**
1:  * <p>
1:  * This is a concrete VTI which is prepopulated with rows which are just
1:  * arrays of string columns.
1:  * </p>
1:  */
1: public    class   StringArrayVTI  extends StringColumnVTI
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // INNER CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private int             _rowIdx = -1;
0:     private String[][]  _rows;
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  StringArrayVTI( String[] columnNames, String[][] rows )
1:     {
1:         super( columnNames );
1: 
1:         _rows = rows;
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ABSTRACT StringColumn BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     protected String  getRawColumn( int columnNumber ) throws SQLException
1:     {
1:         try {
0:             return  _rows[ _rowIdx ][ columnNumber - 1 ];
0:         } catch (Throwable t) { throw new SQLException( t.getMessage() ); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ResultSet BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  boolean next() throws SQLException
1:     {
1:         if ( (++_rowIdx) >= _rows.length ) { return false; }
0:         else { return true; }
1:     }
1: 
1:     public  void close() throws SQLException
1:     {}
1: 
0:     public  ResultSetMetaData   getMetaData() throws SQLException
1:     {
0:         throw new SQLException( "Not implemented." );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: }
1: 
============================================================================