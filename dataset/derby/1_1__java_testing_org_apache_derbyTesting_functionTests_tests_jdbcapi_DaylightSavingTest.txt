1:9c285a7: /*
1:9c285a7:  * Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.DaylightSavingTest
1:9c285a7:  *
1:9c285a7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9c285a7:  * contributor license agreements.  See the NOTICE file distributed with
1:9c285a7:  * this work for additional information regarding copyright ownership.
1:9c285a7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9c285a7:  * (the "License"); you may not use this file except in compliance with
1:9c285a7:  * the License.  You may obtain a copy of the License at
1:9c285a7:  *
1:9c285a7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9c285a7:  *
1:9c285a7:  * Unless required by applicable law or agreed to in writing,
1:9c285a7:  * software distributed under the License is distributed on an
1:9c285a7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:9c285a7:  * either express or implied. See the License for the specific
1:9c285a7:  * language governing permissions and limitations under the License.
1:9c285a7:  */
1:9c285a7: 
1:9c285a7: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:9c285a7: 
1:9c285a7: import java.sql.Date;
1:9c285a7: import java.sql.PreparedStatement;
1:9c285a7: import java.sql.ResultSet;
1:9c285a7: import java.sql.SQLException;
1:9c285a7: import java.sql.Statement;
1:9c285a7: import java.sql.Time;
1:9c285a7: import java.sql.Timestamp;
1:9c285a7: import java.util.Calendar;
1:9c285a7: import java.util.TimeZone;
1:9c285a7: import junit.framework.Test;
1:9c285a7: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:9c285a7: import org.apache.derbyTesting.junit.JDBC;
1:9c285a7: import org.apache.derbyTesting.junit.TestConfiguration;
1:9c285a7: import org.apache.derbyTesting.junit.TimeZoneTestSetup;
1:9c285a7: 
1:9c285a7: /**
1:9c285a7:  * This class contains tests that verify the correct handling of
1:9c285a7:  * {@code java.sql.Date}, {@code java.sql.Time} and {@code java.sql.Timestamp}
1:9c285a7:  * across DST changes.
1:9c285a7:  */
1:9c285a7: public class DaylightSavingTest extends BaseJDBCTestCase {
1:9c285a7:     public DaylightSavingTest(String name) {
1:9c285a7:         super(name);
1:9c285a7:     }
1:9c285a7: 
1:9c285a7:     public static Test suite() {
1:9c285a7:         // Run the test in a fixed timezone so that we know exactly what time
1:9c285a7:         // DST is observed.
1:9c285a7:         return new TimeZoneTestSetup(
1:9c285a7:                 TestConfiguration.defaultSuite(DaylightSavingTest.class),
1:9c285a7:                 "America/Chicago");
1:9c285a7:     }
1:9c285a7: 
1:9c285a7:     /**
1:9c285a7:      * Regression test case for DERBY-4582. Timestamps that were converted
1:9c285a7:      * to GMT before they were stored in the database used to come out wrong
1:9c285a7:      * on the network client if the timestamp represented a time near the
1:9c285a7:      * switch to DST in the local timezone.
1:9c285a7:      */
1:9c285a7:     public void testConversionToGMTAroundDSTChange() throws SQLException {
1:9c285a7:         Statement s = createStatement();
1:9c285a7:         s.execute("CREATE TABLE DERBY4582(" +
1:9c285a7:                 "ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, " +
1:5e93fad:                 "TS TIMESTAMP, T TIME, D DATE, T2 TIME, D2 DATE, " +
1:5e93fad:                 "TS_STR VARCHAR(100), T_STR VARCHAR(100), D_STR VARCHAR(100))");
1:9c285a7: 
1:6f36c34:         Calendar localCal = Calendar.getInstance();
1:6f36c34: 
1:9c285a7:         // Switch from CST to CDT in 2010 happened at 2010-03-14 02:00:00 CST,
1:9c285a7:         // or 2010-03-14 08:00:00 GMT, so create some times/dates around that
1:9c285a7:         // time.
1:9c285a7:         Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
1:9c285a7:         cal.set(Calendar.YEAR, 2010);
1:9c285a7:         cal.set(Calendar.MONTH, Calendar.MARCH);
1:9c285a7:         cal.set(Calendar.DAY_OF_MONTH, 12);
1:9c285a7:         cal.set(Calendar.HOUR_OF_DAY, 0);
1:9c285a7:         cal.set(Calendar.MINUTE, 1);
1:9c285a7:         cal.set(Calendar.SECOND, 0);
1:9c285a7:         cal.set(Calendar.MILLISECOND, 0);
1:9c285a7: 
1:9c285a7:         // Create times for each hour in 2010-03-12 -- 2010-03-15 (GMT).
1:9c285a7:         Timestamp[] timestamps = new Timestamp[24 * 4];
1:9c285a7:         Time[] times = new Time[timestamps.length];
1:9c285a7:         Date[] dates = new Date[timestamps.length];
1:9c285a7:         for (int i = 0; i < timestamps.length; i++) {
1:9c285a7:             long time = cal.getTimeInMillis();
1:9c285a7:             timestamps[i] = new Timestamp(time);
1:9c285a7:             times[i] = new Time(time);
1:9c285a7:             dates[i] = new Date(time);
1:9c285a7:             cal.setTimeInMillis(time + 3600000); // move one hour forward
1:9c285a7:         }
1:9c285a7: 
1:9c285a7:         // Store the GMT representations of the times.
1:9c285a7:         PreparedStatement insert = prepareStatement(
1:5e93fad:                 "INSERT INTO DERBY4582 " +
1:5e93fad:                 "(TS, T, D, T2, D2, TS_STR, T_STR, D_STR) " +
1:5e93fad:                 "VALUES (?,?,?,?,?,?,?,?)");
1:9c285a7:         for (int i = 0; i < timestamps.length; i++) {
1:9c285a7:             Timestamp ts = timestamps[i];
1:9c285a7:             Time t = times[i];
1:9c285a7:             Date d = dates[i];
1:5e93fad: 
1:9c285a7:             // Set the TIMESTAMP/TIME/DATE values TS/T/D with their respective
1:9c285a7:             // setter methods.
1:9c285a7:             insert.setTimestamp(1, ts, cal);
1:9c285a7:             insert.setTime(2, t, cal);
1:9c285a7:             insert.setDate(3, d, cal);
1:5e93fad: 
1:9c285a7:             // Set the TIME/DATE values T2/D2 with setTimestamp() to verify
1:9c285a7:             // that this alternative code path also works.
1:9c285a7:             insert.setTimestamp(4, ts, cal);
1:9c285a7:             insert.setTimestamp(5, ts, cal);
1:5e93fad: 
1:5e93fad:             // Also insert the values into VARCHAR columns so that we can
1:5e93fad:             // check that they are converted correctly.
1:5e93fad:             insert.setTimestamp(6, ts, cal);
1:5e93fad:             insert.setTime(7, t, cal);
1:5e93fad:             insert.setDate(8, d, cal);
1:5e93fad: 
1:9c285a7:             insert.execute();
1:9c285a7:         }
1:9c285a7: 
1:9c285a7:         // Now see that we get the same values back.
1:9c285a7:         ResultSet rs = s.executeQuery("SELECT * FROM DERBY4582 ORDER BY ID");
1:9c285a7:         for (int i = 0; i < timestamps.length; i++) {
1:9c285a7:             assertTrue("found only " + i + " rows", rs.next());
1:9c285a7:             assertEquals("ID", i + 1, rs.getInt(1));
1:9c285a7:             assertEquals("TS", timestamps[i], rs.getTimestamp(2, cal));
1:9c285a7:             assertEquals("T", stripDate(times[i], cal), rs.getTime(3, cal));
1:9c285a7:             assertEquals("D", stripTime(dates[i], cal), rs.getDate(4, cal));
1:9c285a7:             // T2 and D2 should have the same values as T and D.
1:9c285a7:             assertEquals("T2", stripDate(times[i], cal), rs.getTime(5, cal));
1:9c285a7:             assertEquals("D2", stripTime(dates[i], cal), rs.getDate(6, cal));
1:5e93fad:             // The VARCHAR columns should have the same values as TS, T and D.
1:5e93fad:             assertEquals("TS_STR", timestamps[i], rs.getTimestamp(7, cal));
1:5e93fad:             assertEquals("T_STR", stripDate(times[i], cal), rs.getTime(8, cal));
1:5e93fad:             assertEquals("D_STR", stripTime(dates[i], cal), rs.getDate(9, cal));
1:9c285a7:         }
1:9c285a7:         JDBC.assertEmpty(rs);
1:9c285a7: 
1:9c285a7:         // Also check that we get the expected values when we get TIME or DATE
1:9c285a7:         // with getTimestamp(), or TIMESTAMP with getTime() or getDate()
1:9c285a7:         rs = s.executeQuery("SELECT ID,T,D,TS,TS FROM DERBY4582 ORDER BY ID");
1:9c285a7:         for (int i = 0; i < timestamps.length; i++) {
1:9c285a7:             assertTrue("found only " + i + " rows", rs.next());
1:9c285a7:             assertEquals("ID", i + 1, rs.getInt(1));
1:9c285a7:             assertEquals("TIME AS TIMESTAMP",
1:9c285a7:                     timeToTimestamp(stripDate(times[i], cal), cal),
1:9c285a7:                     rs.getTimestamp(2, cal));
1:9c285a7:             assertEquals("DATE AS TIMESTAMP",
1:9c285a7:                     dateToTimestamp(stripTime(dates[i], cal), cal),
1:9c285a7:                     rs.getTimestamp(3, cal));
1:9c285a7:             assertEquals("TIMESTAMP AS TIME",
1:9c285a7:                     stripDate(timestamps[i], cal),
1:9c285a7:                     rs.getTime(4, cal));
1:9c285a7:             assertEquals("TIMESTAMP AS DATE",
1:9c285a7:                     stripTime(timestamps[i], cal),
1:9c285a7:                     rs.getDate(5, cal));
1:9c285a7:         }
1:9c285a7:         JDBC.assertEmpty(rs);
1:6f36c34: 
1:6f36c34:         // Now verify that we can successfully get values set in with an
1:6f36c34:         // updatable result set. Note that updateTimestamp(), updateTime() and
1:6f36c34:         // updateDate() don't take a Calendar argument, so the updated values
1:6f36c34:         // will be stored in the local timezone. What we test here, is that
1:6f36c34:         // updateX(col, val) followed by getX(col, val, cal) performs the
1:6f36c34:         // correct translation from local calendar to GMT calendar.
1:6f36c34:         Statement updStmt = createStatement(
1:6f36c34:                 ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
1:6f36c34:         rs = updStmt.executeQuery("SELECT TS, T, D FROM DERBY4582");
1:6f36c34:         for (int i = 0; i < timestamps.length; i++) {
1:6f36c34:             assertTrue("found only " + i + " rows", rs.next());
1:6f36c34:             Timestamp ts1 = timestamps[i];
1:6f36c34:             rs.updateTimestamp(1, ts1);
1:6f36c34:             assertEquals("TS (default calendar)", ts1, rs.getTimestamp(1));
1:6f36c34:             Timestamp ts2 = rs.getTimestamp(1, cal);
1:6f36c34:             cal.clear();
1:6f36c34:             cal.setTime(ts2);
1:e068569:             localCal.clear();
1:e068569:             localCal.setTime(ts1);
1:6f36c34:             assertEquals("TS.YEAR",
1:e068569:                     localCal.get(Calendar.YEAR), cal.get(Calendar.YEAR));
1:6f36c34:             assertEquals("TS.MONTH",
1:e068569:                     localCal.get(Calendar.MONTH), cal.get(Calendar.MONTH));
1:6f36c34:             assertEquals("TS.DATE",
1:e068569:                     localCal.get(Calendar.DAY_OF_MONTH),
1:e068569:                     cal.get(Calendar.DAY_OF_MONTH));
1:6f36c34:             assertEquals("TS.HOURS",
1:e068569:                     localCal.get(Calendar.HOUR_OF_DAY),
1:e068569:                     cal.get(Calendar.HOUR_OF_DAY));
1:6f36c34:             assertEquals("TS.MINUTES",
1:e068569:                     localCal.get(Calendar.MINUTE), cal.get(Calendar.MINUTE));
1:6f36c34:             assertEquals("TS.SECONDS",
1:e068569:                     localCal.get(Calendar.SECOND), cal.get(Calendar.SECOND));
1:6f36c34:             assertEquals("TS.NANOS",
1:6f36c34:                     ts1.getNanos(), ts2.getNanos());
1:6f36c34: 
1:6f36c34:             Time t1 = times[i];
1:6f36c34:             rs.updateTime(2, t1);
1:6f36c34:             assertEquals("T (default calendar)",
1:6f36c34:                     stripDate(t1, localCal), rs.getTime(2));
1:6f36c34:             Time t2 = rs.getTime(2, cal);
1:6f36c34:             cal.clear();
1:6f36c34:             cal.setTime(t2);
1:e068569:             localCal.clear();
1:e068569:             localCal.setTime(t1);
1:6f36c34:             assertEquals("T.HOURS",
1:e068569:                     localCal.get(Calendar.HOUR_OF_DAY),
1:e068569:                     cal.get(Calendar.HOUR_OF_DAY));
1:6f36c34:             assertEquals("T.MINUTES",
1:e068569:                     localCal.get(Calendar.MINUTE), cal.get(Calendar.MINUTE));
1:6f36c34:             assertEquals("T.SECONDS",
1:e068569:                     localCal.get(Calendar.SECOND), cal.get(Calendar.SECOND));
1:6f36c34: 
1:6f36c34:             Date d1 = dates[i];
1:6f36c34:             rs.updateDate(3, d1);
1:6f36c34:             assertEquals("D (default calendar)",
1:6f36c34:                     stripTime(d1, localCal), rs.getDate(3));
1:6f36c34:             Date d2 = rs.getDate(3, cal);
1:6f36c34:             cal.clear();
1:6f36c34:             cal.setTime(d2);
1:e068569:             localCal.clear();
1:e068569:             localCal.setTime(d1);
1:6f36c34:             assertEquals("D.YEAR",
1:e068569:                     localCal.get(Calendar.YEAR), cal.get(Calendar.YEAR));
1:6f36c34:             assertEquals("D.MONTH",
1:e068569:                     localCal.get(Calendar.MONTH), cal.get(Calendar.MONTH));
1:6f36c34:             assertEquals("D.DATE",
1:e068569:                     localCal.get(Calendar.DAY_OF_MONTH),
1:e068569:                     cal.get(Calendar.DAY_OF_MONTH));
1:6f36c34: 
1:6f36c34:             rs.updateRow();
1:6f36c34:         }
1:6f36c34:         JDBC.assertEmpty(rs);
1:6f36c34: 
1:6f36c34:         // Verify that the values touched by the updatable result set made it
1:6f36c34:         // into the database.
1:6f36c34:         rs = s.executeQuery("SELECT TS, T, D FROM DERBY4582 ORDER BY TS");
1:6f36c34:         for (int i = 0; i < timestamps.length; i++) {
1:6f36c34:             assertTrue("found only " + i + " rows", rs.next());
1:6f36c34:             assertEquals("TS", timestamps[i], rs.getTimestamp(1));
1:6f36c34:             assertEquals("T", stripDate(times[i], localCal), rs.getTime(2));
1:6f36c34:             assertEquals("D", stripTime(dates[i], localCal), rs.getDate(3));
1:6f36c34:         }
1:6f36c34:         JDBC.assertEmpty(rs);
1:6f36c34: 
1:9c285a7:     }
1:9c285a7: 
1:9c285a7:     /**
1:9c285a7:      * Strip away the date component from a {@code java.util.Date} and return
1:9c285a7:      * it as a {@code java.sql.Time}, so that it can be compared with a time
1:9c285a7:      * value returned by Derby. Derby will set the date component of the time
1:9c285a7:      * value to 1970-01-01, so let's do the same here.
1:9c285a7:      *
1:9c285a7:      * @param time the time value whose date component to strip away
1:9c285a7:      * @param cal the calendar used to store the time in the database originally
1:9c285a7:      * @return a time value that represents the same time of the day as
1:9c285a7:      * {@code time} in the calendar {@code cal}, but with the date component
1:9c285a7:      * normalized to 1970-01-01
1:9c285a7:      */
1:9c285a7:     private static Time stripDate(java.util.Date time, Calendar cal) {
2:9c285a7:         cal.clear();
1:9c285a7:         cal.setTime(time);
1:9c285a7:         cal.set(1970, Calendar.JANUARY, 1);
1:9c285a7:         return new Time(cal.getTimeInMillis());
1:9c285a7:     }
1:9c285a7: 
1:9c285a7:     /**
1:9c285a7:      * Strip away the time component from a {@code java.util.Date} and return
1:9c285a7:      * it as a {@code java.sql.Date}, so that it can be compared with a date
1:9c285a7:      * value returned by Derby. Derby will set the time component of the date
1:9c285a7:      * value to 00:00:00.0, so let's do the same here.
1:9c285a7:      *
1:9c285a7:      * @param date the date whose time component to strip away
1:9c285a7:      * @param cal the calendar used to store the date in the database originally
1:9c285a7:      * @return a date value that represents the same day as {@code date} in the
1:9c285a7:      * calendar {@code cal}, but with the time component normalized to
1:9c285a7:      * 00:00:00.0
1:9c285a7:      */
1:9c285a7:     private static Date stripTime(java.util.Date date, Calendar cal) {
1:9c285a7:         cal.clear();
1:9c285a7:         cal.setTime(date);
1:9c285a7:         cal.set(Calendar.HOUR_OF_DAY, 0);
1:9c285a7:         cal.set(Calendar.MINUTE, 0);
1:9c285a7:         cal.set(Calendar.SECOND, 0);
1:9c285a7:         cal.set(Calendar.MILLISECOND, 0);
1:9c285a7:         return new Date(cal.getTimeInMillis());
1:9c285a7:     }
1:9c285a7: 
1:9c285a7:     /**
1:9c285a7:      * Convert a time value to a timestamp. The date component of the timestamp
1:9c285a7:      * should be set to the current date in the specified calendar, see
1:9c285a7:      * DERBY-889 and DERBY-1811.
1:9c285a7:      *
1:9c285a7:      * @param time the time value to convert
1:9c285a7:      * @param cal the calendar in which the conversion should be performed
1:9c285a7:      * @return a timestamp
1:9c285a7:      */
1:9c285a7:     private static Timestamp timeToTimestamp(Time time, Calendar cal) {
1:9c285a7:         // Get the current date in the specified calendar.
1:9c285a7:         cal.clear();
1:9c285a7:         cal.setTimeInMillis(System.currentTimeMillis());
1:9c285a7:         int year = cal.get(Calendar.YEAR);
1:9c285a7:         int month = cal.get(Calendar.MONTH);
1:9c285a7:         int day = cal.get(Calendar.DAY_OF_MONTH);
1:9c285a7: 
1:9c285a7:         // Construct a timestamp based on the current date and the specified
1:9c285a7:         // time value.
1:9c285a7:         cal.clear();
1:9c285a7:         cal.setTime(time);
1:9c285a7:         cal.set(year, month, day);
1:9c285a7: 
1:9c285a7:         return new Timestamp(cal.getTimeInMillis());
1:9c285a7:     }
1:9c285a7: 
1:9c285a7:     /**
1:9c285a7:      * Convert a date value to a timestamp. The time component of the timestamp
1:9c285a7:      * will be set to 00:00:00.0.
1:9c285a7:      *
1:9c285a7:      * @param date the date value to convert
1:9c285a7:      * @param cal the calendar in which the conversion should be performed
1:9c285a7:      * @return a timestamp
1:9c285a7:      */
1:9c285a7:     private static Timestamp dateToTimestamp(Date date, Calendar cal) {
1:9c285a7:         cal.clear();
1:9c285a7:         cal.setTime(date);
1:9c285a7:         cal.set(Calendar.HOUR_OF_DAY, 0);
1:9c285a7:         cal.set(Calendar.MINUTE, 0);
1:9c285a7:         cal.set(Calendar.SECOND, 0);
1:9c285a7:         cal.set(Calendar.MILLISECOND, 0);
1:9c285a7:         return new Timestamp(cal.getTimeInMillis());
1:9c285a7:     }
1:9c285a7: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e068569
/////////////////////////////////////////////////////////////////////////
1:             localCal.clear();
1:             localCal.setTime(ts1);
1:                     localCal.get(Calendar.YEAR), cal.get(Calendar.YEAR));
1:                     localCal.get(Calendar.MONTH), cal.get(Calendar.MONTH));
1:                     localCal.get(Calendar.DAY_OF_MONTH),
1:                     cal.get(Calendar.DAY_OF_MONTH));
1:                     localCal.get(Calendar.HOUR_OF_DAY),
1:                     cal.get(Calendar.HOUR_OF_DAY));
1:                     localCal.get(Calendar.MINUTE), cal.get(Calendar.MINUTE));
1:                     localCal.get(Calendar.SECOND), cal.get(Calendar.SECOND));
/////////////////////////////////////////////////////////////////////////
1:             localCal.clear();
1:             localCal.setTime(t1);
1:                     localCal.get(Calendar.HOUR_OF_DAY),
1:                     cal.get(Calendar.HOUR_OF_DAY));
1:                     localCal.get(Calendar.MINUTE), cal.get(Calendar.MINUTE));
1:                     localCal.get(Calendar.SECOND), cal.get(Calendar.SECOND));
/////////////////////////////////////////////////////////////////////////
1:             localCal.clear();
1:             localCal.setTime(d1);
1:                     localCal.get(Calendar.YEAR), cal.get(Calendar.YEAR));
1:                     localCal.get(Calendar.MONTH), cal.get(Calendar.MONTH));
1:                     localCal.get(Calendar.DAY_OF_MONTH),
1:                     cal.get(Calendar.DAY_OF_MONTH));
commit:5e93fad
/////////////////////////////////////////////////////////////////////////
1:                 "TS TIMESTAMP, T TIME, D DATE, T2 TIME, D2 DATE, " +
1:                 "TS_STR VARCHAR(100), T_STR VARCHAR(100), D_STR VARCHAR(100))");
/////////////////////////////////////////////////////////////////////////
1:                 "INSERT INTO DERBY4582 " +
1:                 "(TS, T, D, T2, D2, TS_STR, T_STR, D_STR) " +
1:                 "VALUES (?,?,?,?,?,?,?,?)");
1: 
1: 
1: 
1:             // Also insert the values into VARCHAR columns so that we can
1:             // check that they are converted correctly.
1:             insert.setTimestamp(6, ts, cal);
1:             insert.setTime(7, t, cal);
1:             insert.setDate(8, d, cal);
1: 
/////////////////////////////////////////////////////////////////////////
1:             // The VARCHAR columns should have the same values as TS, T and D.
1:             assertEquals("TS_STR", timestamps[i], rs.getTimestamp(7, cal));
1:             assertEquals("T_STR", stripDate(times[i], cal), rs.getTime(8, cal));
1:             assertEquals("D_STR", stripTime(dates[i], cal), rs.getDate(9, cal));
commit:6f36c34
/////////////////////////////////////////////////////////////////////////
1:         Calendar localCal = Calendar.getInstance();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Now verify that we can successfully get values set in with an
1:         // updatable result set. Note that updateTimestamp(), updateTime() and
1:         // updateDate() don't take a Calendar argument, so the updated values
1:         // will be stored in the local timezone. What we test here, is that
1:         // updateX(col, val) followed by getX(col, val, cal) performs the
1:         // correct translation from local calendar to GMT calendar.
1:         Statement updStmt = createStatement(
1:                 ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
1:         rs = updStmt.executeQuery("SELECT TS, T, D FROM DERBY4582");
1:         for (int i = 0; i < timestamps.length; i++) {
1:             assertTrue("found only " + i + " rows", rs.next());
1:             Timestamp ts1 = timestamps[i];
1:             rs.updateTimestamp(1, ts1);
1:             assertEquals("TS (default calendar)", ts1, rs.getTimestamp(1));
1:             Timestamp ts2 = rs.getTimestamp(1, cal);
1:             cal.clear();
1:             cal.setTime(ts2);
1:             assertEquals("TS.YEAR",
0:                     ts1.getYear() + 1900, cal.get(Calendar.YEAR));
1:             assertEquals("TS.MONTH",
0:                     ts1.getMonth(), cal.get(Calendar.MONTH));
1:             assertEquals("TS.DATE",
0:                     ts1.getDate(), cal.get(Calendar.DAY_OF_MONTH));
1:             assertEquals("TS.HOURS",
0:                     ts1.getHours(), cal.get(Calendar.HOUR_OF_DAY));
1:             assertEquals("TS.MINUTES",
0:                     ts1.getMinutes(), cal.get(Calendar.MINUTE));
1:             assertEquals("TS.SECONDS",
0:                     ts1.getSeconds(), cal.get(Calendar.SECOND));
1:             assertEquals("TS.NANOS",
1:                     ts1.getNanos(), ts2.getNanos());
1: 
1:             Time t1 = times[i];
1:             rs.updateTime(2, t1);
1:             assertEquals("T (default calendar)",
1:                     stripDate(t1, localCal), rs.getTime(2));
1:             Time t2 = rs.getTime(2, cal);
1:             cal.clear();
1:             cal.setTime(t2);
1:             assertEquals("T.HOURS",
0:                     t1.getHours(), cal.get(Calendar.HOUR_OF_DAY));
1:             assertEquals("T.MINUTES",
0:                     t1.getMinutes(), cal.get(Calendar.MINUTE));
1:             assertEquals("T.SECONDS",
0:                     t1.getSeconds(), cal.get(Calendar.SECOND));
1: 
1:             Date d1 = dates[i];
1:             rs.updateDate(3, d1);
1:             assertEquals("D (default calendar)",
1:                     stripTime(d1, localCal), rs.getDate(3));
1:             Date d2 = rs.getDate(3, cal);
1:             cal.clear();
1:             cal.setTime(d2);
1:             assertEquals("D.YEAR",
0:                     d1.getYear() + 1900, cal.get(Calendar.YEAR));
1:             assertEquals("D.MONTH",
0:                     d1.getMonth(), cal.get(Calendar.MONTH));
1:             assertEquals("D.DATE",
0:                     d1.getDate(), cal.get(Calendar.DAY_OF_MONTH));
1: 
1:             rs.updateRow();
1:         }
1:         JDBC.assertEmpty(rs);
1: 
1:         // Verify that the values touched by the updatable result set made it
1:         // into the database.
1:         rs = s.executeQuery("SELECT TS, T, D FROM DERBY4582 ORDER BY TS");
1:         for (int i = 0; i < timestamps.length; i++) {
1:             assertTrue("found only " + i + " rows", rs.next());
1:             assertEquals("TS", timestamps[i], rs.getTimestamp(1));
1:             assertEquals("T", stripDate(times[i], localCal), rs.getTime(2));
1:             assertEquals("D", stripTime(dates[i], localCal), rs.getDate(3));
1:         }
1:         JDBC.assertEmpty(rs);
1: 
commit:9c285a7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.DaylightSavingTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.Date;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: import java.util.Calendar;
1: import java.util.TimeZone;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.TimeZoneTestSetup;
1: 
1: /**
1:  * This class contains tests that verify the correct handling of
1:  * {@code java.sql.Date}, {@code java.sql.Time} and {@code java.sql.Timestamp}
1:  * across DST changes.
1:  */
1: public class DaylightSavingTest extends BaseJDBCTestCase {
1:     public DaylightSavingTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // Run the test in a fixed timezone so that we know exactly what time
1:         // DST is observed.
1:         return new TimeZoneTestSetup(
1:                 TestConfiguration.defaultSuite(DaylightSavingTest.class),
1:                 "America/Chicago");
1:     }
1: 
1:     /**
1:      * Regression test case for DERBY-4582. Timestamps that were converted
1:      * to GMT before they were stored in the database used to come out wrong
1:      * on the network client if the timestamp represented a time near the
1:      * switch to DST in the local timezone.
1:      */
1:     public void testConversionToGMTAroundDSTChange() throws SQLException {
1:         Statement s = createStatement();
1:         s.execute("CREATE TABLE DERBY4582(" +
1:                 "ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, " +
0:                 "TS TIMESTAMP, T TIME, D DATE, T2 TIME, D2 DATE)");
1: 
1:         // Switch from CST to CDT in 2010 happened at 2010-03-14 02:00:00 CST,
1:         // or 2010-03-14 08:00:00 GMT, so create some times/dates around that
1:         // time.
1:         Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
1:         cal.clear();
1:         cal.set(Calendar.YEAR, 2010);
1:         cal.set(Calendar.MONTH, Calendar.MARCH);
1:         cal.set(Calendar.DAY_OF_MONTH, 12);
1:         cal.set(Calendar.HOUR_OF_DAY, 0);
1:         cal.set(Calendar.MINUTE, 1);
1:         cal.set(Calendar.SECOND, 0);
1:         cal.set(Calendar.MILLISECOND, 0);
1: 
1:         // Create times for each hour in 2010-03-12 -- 2010-03-15 (GMT).
1:         Timestamp[] timestamps = new Timestamp[24 * 4];
1:         Time[] times = new Time[timestamps.length];
1:         Date[] dates = new Date[timestamps.length];
1:         for (int i = 0; i < timestamps.length; i++) {
1:             long time = cal.getTimeInMillis();
1:             timestamps[i] = new Timestamp(time);
1:             times[i] = new Time(time);
1:             dates[i] = new Date(time);
1:             cal.setTimeInMillis(time + 3600000); // move one hour forward
1:         }
1: 
1:         // Store the GMT representations of the times.
1:         PreparedStatement insert = prepareStatement(
0:                 "INSERT INTO DERBY4582(TS, T, D, T2, D2) VALUES (?,?,?,?,?)");
1:         for (int i = 0; i < timestamps.length; i++) {
1:             Timestamp ts = timestamps[i];
1:             Time t = times[i];
1:             Date d = dates[i];
1:             // Set the TIMESTAMP/TIME/DATE values TS/T/D with their respective
1:             // setter methods.
1:             insert.setTimestamp(1, ts, cal);
1:             insert.setTime(2, t, cal);
1:             insert.setDate(3, d, cal);
1:             // Set the TIME/DATE values T2/D2 with setTimestamp() to verify
1:             // that this alternative code path also works.
1:             insert.setTimestamp(4, ts, cal);
1:             insert.setTimestamp(5, ts, cal);
1:             insert.execute();
1:         }
1: 
1:         // Now see that we get the same values back.
1:         ResultSet rs = s.executeQuery("SELECT * FROM DERBY4582 ORDER BY ID");
1:         for (int i = 0; i < timestamps.length; i++) {
1:             assertTrue("found only " + i + " rows", rs.next());
1:             assertEquals("ID", i + 1, rs.getInt(1));
1:             assertEquals("TS", timestamps[i], rs.getTimestamp(2, cal));
1:             assertEquals("T", stripDate(times[i], cal), rs.getTime(3, cal));
1:             assertEquals("D", stripTime(dates[i], cal), rs.getDate(4, cal));
1:             // T2 and D2 should have the same values as T and D.
1:             assertEquals("T2", stripDate(times[i], cal), rs.getTime(5, cal));
1:             assertEquals("D2", stripTime(dates[i], cal), rs.getDate(6, cal));
1:         }
1:         JDBC.assertEmpty(rs);
1: 
1:         // Also check that we get the expected values when we get TIME or DATE
1:         // with getTimestamp(), or TIMESTAMP with getTime() or getDate()
1:         rs = s.executeQuery("SELECT ID,T,D,TS,TS FROM DERBY4582 ORDER BY ID");
1:         for (int i = 0; i < timestamps.length; i++) {
1:             assertTrue("found only " + i + " rows", rs.next());
1:             assertEquals("ID", i + 1, rs.getInt(1));
1:             assertEquals("TIME AS TIMESTAMP",
1:                     timeToTimestamp(stripDate(times[i], cal), cal),
1:                     rs.getTimestamp(2, cal));
1:             assertEquals("DATE AS TIMESTAMP",
1:                     dateToTimestamp(stripTime(dates[i], cal), cal),
1:                     rs.getTimestamp(3, cal));
1:             assertEquals("TIMESTAMP AS TIME",
1:                     stripDate(timestamps[i], cal),
1:                     rs.getTime(4, cal));
1:             assertEquals("TIMESTAMP AS DATE",
1:                     stripTime(timestamps[i], cal),
1:                     rs.getDate(5, cal));
1:         }
1:         JDBC.assertEmpty(rs);
1:     }
1: 
1:     /**
1:      * Strip away the date component from a {@code java.util.Date} and return
1:      * it as a {@code java.sql.Time}, so that it can be compared with a time
1:      * value returned by Derby. Derby will set the date component of the time
1:      * value to 1970-01-01, so let's do the same here.
1:      *
1:      * @param time the time value whose date component to strip away
1:      * @param cal the calendar used to store the time in the database originally
1:      * @return a time value that represents the same time of the day as
1:      * {@code time} in the calendar {@code cal}, but with the date component
1:      * normalized to 1970-01-01
1:      */
1:     private static Time stripDate(java.util.Date time, Calendar cal) {
1:         cal.clear();
1:         cal.setTime(time);
1:         cal.set(1970, Calendar.JANUARY, 1);
1:         return new Time(cal.getTimeInMillis());
1:     }
1: 
1:     /**
1:      * Strip away the time component from a {@code java.util.Date} and return
1:      * it as a {@code java.sql.Date}, so that it can be compared with a date
1:      * value returned by Derby. Derby will set the time component of the date
1:      * value to 00:00:00.0, so let's do the same here.
1:      *
1:      * @param date the date whose time component to strip away
1:      * @param cal the calendar used to store the date in the database originally
1:      * @return a date value that represents the same day as {@code date} in the
1:      * calendar {@code cal}, but with the time component normalized to
1:      * 00:00:00.0
1:      */
1:     private static Date stripTime(java.util.Date date, Calendar cal) {
1:         cal.clear();
1:         cal.setTime(date);
1:         cal.set(Calendar.HOUR_OF_DAY, 0);
1:         cal.set(Calendar.MINUTE, 0);
1:         cal.set(Calendar.SECOND, 0);
1:         cal.set(Calendar.MILLISECOND, 0);
1:         return new Date(cal.getTimeInMillis());
1:     }
1: 
1:     /**
1:      * Convert a time value to a timestamp. The date component of the timestamp
1:      * should be set to the current date in the specified calendar, see
1:      * DERBY-889 and DERBY-1811.
1:      *
1:      * @param time the time value to convert
1:      * @param cal the calendar in which the conversion should be performed
1:      * @return a timestamp
1:      */
1:     private static Timestamp timeToTimestamp(Time time, Calendar cal) {
1:         // Get the current date in the specified calendar.
1:         cal.clear();
1:         cal.setTimeInMillis(System.currentTimeMillis());
1:         int year = cal.get(Calendar.YEAR);
1:         int month = cal.get(Calendar.MONTH);
1:         int day = cal.get(Calendar.DAY_OF_MONTH);
1: 
1:         // Construct a timestamp based on the current date and the specified
1:         // time value.
1:         cal.clear();
1:         cal.setTime(time);
1:         cal.set(year, month, day);
1: 
1:         return new Timestamp(cal.getTimeInMillis());
1:     }
1: 
1:     /**
1:      * Convert a date value to a timestamp. The time component of the timestamp
1:      * will be set to 00:00:00.0.
1:      *
1:      * @param date the date value to convert
1:      * @param cal the calendar in which the conversion should be performed
1:      * @return a timestamp
1:      */
1:     private static Timestamp dateToTimestamp(Date date, Calendar cal) {
1:         cal.clear();
1:         cal.setTime(date);
1:         cal.set(Calendar.HOUR_OF_DAY, 0);
1:         cal.set(Calendar.MINUTE, 0);
1:         cal.set(Calendar.SECOND, 0);
1:         cal.set(Calendar.MILLISECOND, 0);
1:         return new Timestamp(cal.getTimeInMillis());
1:     }
1: }
============================================================================