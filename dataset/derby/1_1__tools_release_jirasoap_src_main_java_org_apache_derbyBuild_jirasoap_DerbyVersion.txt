1:281df80: /*
1:281df80: 
1:281df80:    Derby - Class org.apache.derbyBuild.jirasoap.DerbyVersion
1:281df80: 
1:281df80:    Licensed to the Apache Software Foundation (ASF) under one or more
1:281df80:    contributor license agreements.  See the NOTICE file distributed with
1:281df80:    this work for additional information regarding copyright ownership.
1:281df80:    The ASF licenses this file to you under the Apache License, Version 2.0
1:281df80:    (the "License"); you may not use this file except in compliance with
1:281df80:    the License.  You may obtain a copy of the License at
1:281df80: 
1:281df80:       http://www.apache.org/licenses/LICENSE-2.0
1:281df80: 
1:281df80:    Unless required by applicable law or agreed to in writing, software
1:281df80:    distributed under the License is distributed on an "AS IS" BASIS,
1:281df80:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:281df80:    See the License for the specific language governing permissions and
1:281df80:    limitations under the License.
1:281df80: 
1:281df80:  */
1:281df80: 
1:281df80: package org.apache.derbyBuild.jirasoap;
1:281df80: 
1:0a218e3: import java.util.Calendar;
1:0a218e3: import java.util.GregorianCalendar;
1:0a218e3: 
1:281df80: /**
1:281df80:  * Class representing a Derby version.
1:281df80:  * <p>
1:281df80:  * The format is major.minor.fixpack.point, for instance 10.6.2.1.
1:281df80:  */
1:0a218e3: //@Immutable
1:281df80: class DerbyVersion
1:281df80:         implements Comparable {
1:281df80: 
1:0a218e3:     /**
1:0a218e3:      * Shard static calendar used to format release date (this is not a
1:0a218e3:      * erformance critical class).
1:0a218e3:      */
1:0a218e3:     // GuardedBy("CAL")
1:0a218e3:     private static final Calendar CAL = GregorianCalendar.getInstance();
1:0a218e3: 
1:0a218e3:     /** Constant telling that a version hasn't been released. */
1:0a218e3:     public static final long NOT_RELEASED = -1;
1:281df80: 
1:281df80:     /** Derby version string, for instance "10.6.2.1". */
1:281df80:     private final String version;
1:281df80:     private final int major;
1:281df80:     private final int minor;
1:281df80:     private final int fixpack;
1:281df80:     private final int point;
1:281df80:     private final long releaseDate;
1:0a218e3:     private final String releaseDateStr;
1:281df80: 
1:281df80:     /**
1:281df80:      * Creates a new Derby version object.
1:281df80:      *
1:281df80:      * @param rv remote version object fetched from JIRA
1:281df80:      */
1:281df80:     public DerbyVersion(RemoteVersion rv) {
1:281df80:         this(rv.getName(), rv.isReleased()
1:281df80:                                 ? rv.getReleaseDate().getTimeInMillis()
1:281df80:                                 : NOT_RELEASED);
1:281df80:     }
1:281df80: 
1:281df80:     DerbyVersion(String version, long relDate) {
1:281df80:         this.version = version;
1:281df80:         String[] comp = version.split("\\.");
1:281df80:         if (comp.length != 4) {
1:281df80:             throw new IllegalArgumentException("invalid version: " + version);
1:281df80:         }
1:281df80:         major = Integer.parseInt(comp[0]);
1:281df80:         minor = Integer.parseInt(comp[1]);
1:281df80:         fixpack = Integer.parseInt(comp[2]);
1:281df80:         point = Integer.parseInt(comp[3]);
1:281df80:         this.releaseDate = relDate;
1:0a218e3:         if (relDate == NOT_RELEASED) {
1:0a218e3:             releaseDateStr = "n/a";
1:0a218e3:         } else {
1:0a218e3:             synchronized (CAL) {
1:0a218e3:                 CAL.setTimeInMillis(relDate);
1:0a218e3:                 releaseDateStr = CAL.get(Calendar.YEAR) + "-" +
1:0a218e3:                         padZero(CAL.get(Calendar.MONTH) +1) + "-" +
1:0a218e3:                         padZero(CAL.get(Calendar.DAY_OF_MONTH));
1:0a218e3:             }
1:0a218e3:         }
1:281df80:     }
1:281df80: 
1:281df80:     /**
1:281df80:      * Returns the Derby version string.
1:281df80:      *
1:281df80:      * @return Version string, for instance "10.6.2.1".
1:281df80:      */
1:281df80:     public String getVersion() {
1:281df80:         return version;
1:281df80:     }
1:281df80: 
1:281df80:     /**
1:695493d:      * Returns the Derby version string quoted for use in JQL.
1:695493d:      *
1:695493d:      * @return Quoted version string, for instance '"10.6.2.1"'.
1:695493d:      */
1:695493d:     public String getQuotedVersion() {
1:695493d:         return "\"" + getVersion() + "\"";
1:695493d:     }
1:695493d: 
1:695493d:     /**
1:281df80:      * Returns the release date in milliseconds since the Epoch.
1:281df80:      *
1:0a218e3:      * @return Release date as milliseconds since the Epoch.
1:281df80:      * @throws IllegalStateException if the version hasn't been released
1:281df80:      */
1:281df80:     public long getReleaseDateMillis() {
1:281df80:         if (!isReleased()) {
1:281df80:             throw new IllegalStateException("not released");
1:281df80:         }
1:281df80:         return releaseDate;
1:281df80:     }
1:281df80: 
1:281df80:     /**
1:0a218e3:      * Returns the release date formatted as a string (YYYY-MM-DD).
1:0a218e3:      *
1:0a218e3:      * @return The release date, or "n/a" if not released.
1:0a218e3:      */
1:0a218e3:     public String getFormattedReleaseDate() {
1:0a218e3:         return releaseDateStr;
1:0a218e3:     }
1:0a218e3: 
1:0a218e3:     /**
1:281df80:      * Tells if this version has been released.
1:281df80:      *
1:281df80:      * @return {@code true} if released, {@code false} if not.
1:281df80:      */
1:281df80:     public boolean isReleased() {
1:281df80:         return releaseDate != NOT_RELEASED;
1:281df80:     }
1:281df80: 
1:281df80:     /**
1:281df80:      * Tells if this version has the same fixpack as the other version.
1:281df80:      * <p>
1:281df80:      * This generally means that the two versions are release candidates for an
1:281df80:      * upcoming release.
1:281df80:      *
1:281df80:      * @param other other version
1:281df80:      * @return {@code true} if the fixpack component of the two versions are
1:281df80:      *      equal (in addition to the major and minor version), for instance
1:281df80:      *      the case for 10.6.2.1 and 10.6.2.2, {@code false} otherwise.
1:281df80:      *
1:281df80:      */
1:281df80:     public boolean isSameFixPack(DerbyVersion other) {
1:281df80:         return (major == other.major && minor == other.minor &&
1:281df80:                 fixpack == other.fixpack);
1:281df80:     }
1:281df80: 
1:281df80:     /**
1:281df80:      * Compares this version to another version based on the Derby version
1:281df80:      * strings.
1:281df80:      * <p>
1:281df80:      * Note that this comparision doesn't take the release date into
1:281df80:      * consideration, but only the release string. This means that even though
1:281df80:      * 10.3.3.0 was released after 10.4.1.3, 10.4.1.3 will be considered
1:281df80:      * greater than 10.3.3.0.
1:281df80:      *
1:281df80:      * @param o other version
1:281df80:      * @return {@code 1} if this version is greater than the other version,
1:281df80:      *      {@code -1} if this version is smaller than the other version, and
1:281df80:      *      {@code 0} if the two versions are identical.
1:281df80:      */
1:281df80:     public int compareTo(Object o) {
1:281df80:         DerbyVersion other = (DerbyVersion) o;
1:281df80:         if (major > other.major) {
1:281df80:             return 1;
1:281df80:         }
1:281df80:         if (major < other.major) {
1:281df80:             return -1;
1:281df80:         }
1:281df80:         if (minor > other.minor) {
1:281df80:             return 1;
1:281df80:         }
1:281df80:         if (minor < other.minor) {
1:281df80:             return -1;
1:281df80:         }
1:281df80:         if (fixpack > other.fixpack) {
1:281df80:             return 1;
1:281df80:         }
1:281df80:         if (fixpack < other.fixpack) {
1:281df80:             return -1;
1:281df80:         }
1:281df80:         if (point > other.point) {
1:281df80:             return 1;
1:281df80:         }
1:281df80:         if (point < other.point) {
1:281df80:             return -1;
1:281df80:         }
1:281df80:         return 0;
1:281df80:     }
1:281df80: 
1:281df80:     public boolean equals(Object obj) {
1:281df80:         if (obj == null) {
1:281df80:             return false;
1:281df80:         }
1:281df80:         if (getClass() != obj.getClass()) {
1:281df80:             return false;
1:281df80:         }
1:281df80:         final DerbyVersion other = (DerbyVersion) obj;
1:281df80:         if (this.major != other.major) {
1:281df80:             return false;
1:281df80:         }
1:281df80:         if (this.minor != other.minor) {
1:281df80:             return false;
1:281df80:         }
1:281df80:         if (this.fixpack != other.fixpack) {
1:281df80:             return false;
1:281df80:         }
1:281df80:         if (this.point != other.point) {
1:281df80:             return false;
1:281df80:         }
1:281df80:         return true;
1:281df80:     }
1:281df80: 
1:281df80:     public int hashCode() {
1:281df80:         int hash = 7;
1:281df80:         hash = 83 * hash + this.major;
1:281df80:         hash = 83 * hash + this.minor;
1:281df80:         hash = 83 * hash + this.fixpack;
1:281df80:         hash = 83 * hash + this.point;
1:281df80:         return hash;
1:281df80:     }
1:281df80: 
1:281df80:     public String toString() {
1:0a218e3:         return version + " (" + releaseDateStr + ")";
1:0a218e3:     }
1:0a218e3: 
1:0a218e3:     /** Adds a leading zero if the value is less than ten. */
1:0a218e3:     private static String padZero(int val) {
1:0a218e3:         if (val < 10) {
1:0a218e3:             return "0" + Integer.toString(val);
1:0a218e3:         } else {
1:0a218e3:             return Integer.toString(val);
1:0a218e3:         }
1:281df80:     }
1:281df80: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:695493d
/////////////////////////////////////////////////////////////////////////
1:      * Returns the Derby version string quoted for use in JQL.
1:      *
1:      * @return Quoted version string, for instance '"10.6.2.1"'.
1:      */
1:     public String getQuotedVersion() {
1:         return "\"" + getVersion() + "\"";
1:     }
1: 
1:     /**
commit:0a218e3
/////////////////////////////////////////////////////////////////////////
1: import java.util.Calendar;
1: import java.util.GregorianCalendar;
1: 
1: //@Immutable
1:     /**
1:      * Shard static calendar used to format release date (this is not a
1:      * erformance critical class).
1:      */
1:     // GuardedBy("CAL")
1:     private static final Calendar CAL = GregorianCalendar.getInstance();
1: 
1:     /** Constant telling that a version hasn't been released. */
1:     public static final long NOT_RELEASED = -1;
/////////////////////////////////////////////////////////////////////////
1:     private final String releaseDateStr;
/////////////////////////////////////////////////////////////////////////
1:         if (relDate == NOT_RELEASED) {
1:             releaseDateStr = "n/a";
1:         } else {
1:             synchronized (CAL) {
1:                 CAL.setTimeInMillis(relDate);
1:                 releaseDateStr = CAL.get(Calendar.YEAR) + "-" +
1:                         padZero(CAL.get(Calendar.MONTH) +1) + "-" +
1:                         padZero(CAL.get(Calendar.DAY_OF_MONTH));
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:      * @return Release date as milliseconds since the Epoch.
/////////////////////////////////////////////////////////////////////////
1:      * Returns the release date formatted as a string (YYYY-MM-DD).
1:      *
1:      * @return The release date, or "n/a" if not released.
1:      */
1:     public String getFormattedReleaseDate() {
1:         return releaseDateStr;
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:         return version + " (" + releaseDateStr + ")";
1:     }
1: 
1:     /** Adds a leading zero if the value is less than ten. */
1:     private static String padZero(int val) {
1:         if (val < 10) {
1:             return "0" + Integer.toString(val);
1:         } else {
1:             return Integer.toString(val);
1:         }
commit:281df80
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyBuild.jirasoap.DerbyVersion
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyBuild.jirasoap;
1: 
1: /**
1:  * Class representing a Derby version.
1:  * <p>
1:  * The format is major.minor.fixpack.point, for instance 10.6.2.1.
1:  */
1: class DerbyVersion
1:         implements Comparable {
1: 
0:     /** Constant for version which haven't been released. */
0:     private static final long NOT_RELEASED = -1;
1: 
1:     /** Derby version string, for instance "10.6.2.1". */
1:     private final String version;
1:     private final int major;
1:     private final int minor;
1:     private final int fixpack;
1:     private final int point;
1:     private final long releaseDate;
1: 
1:     /**
1:      * Creates a new Derby version object.
1:      *
1:      * @param rv remote version object fetched from JIRA
1:      */
1:     public DerbyVersion(RemoteVersion rv) {
1:         this(rv.getName(), rv.isReleased()
1:                                 ? rv.getReleaseDate().getTimeInMillis()
1:                                 : NOT_RELEASED);
1:     }
1: 
1:     DerbyVersion(String version, long relDate) {
1:         this.version = version;
1:         String[] comp = version.split("\\.");
1:         if (comp.length != 4) {
1:             throw new IllegalArgumentException("invalid version: " + version);
1:         }
1:         major = Integer.parseInt(comp[0]);
1:         minor = Integer.parseInt(comp[1]);
1:         fixpack = Integer.parseInt(comp[2]);
1:         point = Integer.parseInt(comp[3]);
1:         this.releaseDate = relDate;
1:     }
1: 
1:     /**
1:      * Returns the Derby version string.
1:      *
1:      * @return Version string, for instance "10.6.2.1".
1:      */
1:     public String getVersion() {
1:         return version;
1:     }
1: 
1:     /**
1:      * Returns the release date in milliseconds since the Epoch.
1:      *
0:      * @return Milliseconds since the Epoch.
1:      * @throws IllegalStateException if the version hasn't been released
1:      */
1:     public long getReleaseDateMillis() {
1:         if (!isReleased()) {
1:             throw new IllegalStateException("not released");
1:         }
1:         return releaseDate;
1:     }
1: 
1:     /**
1:      * Tells if this version has been released.
1:      *
1:      * @return {@code true} if released, {@code false} if not.
1:      */
1:     public boolean isReleased() {
1:         return releaseDate != NOT_RELEASED;
1:     }
1: 
1:     /**
1:      * Tells if this version has the same fixpack as the other version.
1:      * <p>
1:      * This generally means that the two versions are release candidates for an
1:      * upcoming release.
1:      *
1:      * @param other other version
1:      * @return {@code true} if the fixpack component of the two versions are
1:      *      equal (in addition to the major and minor version), for instance
1:      *      the case for 10.6.2.1 and 10.6.2.2, {@code false} otherwise.
1:      *
1:      */
1:     public boolean isSameFixPack(DerbyVersion other) {
1:         return (major == other.major && minor == other.minor &&
1:                 fixpack == other.fixpack);
1:     }
1: 
1:     /**
1:      * Compares this version to another version based on the Derby version
1:      * strings.
1:      * <p>
1:      * Note that this comparision doesn't take the release date into
1:      * consideration, but only the release string. This means that even though
1:      * 10.3.3.0 was released after 10.4.1.3, 10.4.1.3 will be considered
1:      * greater than 10.3.3.0.
1:      *
1:      * @param o other version
1:      * @return {@code 1} if this version is greater than the other version,
1:      *      {@code -1} if this version is smaller than the other version, and
1:      *      {@code 0} if the two versions are identical.
1:      */
1:     public int compareTo(Object o) {
1:         DerbyVersion other = (DerbyVersion) o;
1:         if (major > other.major) {
1:             return 1;
1:         }
1:         if (major < other.major) {
1:             return -1;
1:         }
1:         if (minor > other.minor) {
1:             return 1;
1:         }
1:         if (minor < other.minor) {
1:             return -1;
1:         }
1:         if (fixpack > other.fixpack) {
1:             return 1;
1:         }
1:         if (fixpack < other.fixpack) {
1:             return -1;
1:         }
1:         if (point > other.point) {
1:             return 1;
1:         }
1:         if (point < other.point) {
1:             return -1;
1:         }
1:         return 0;
1:     }
1: 
1:     public boolean equals(Object obj) {
1:         if (obj == null) {
1:             return false;
1:         }
1:         if (getClass() != obj.getClass()) {
1:             return false;
1:         }
1:         final DerbyVersion other = (DerbyVersion) obj;
1:         if (this.major != other.major) {
1:             return false;
1:         }
1:         if (this.minor != other.minor) {
1:             return false;
1:         }
1:         if (this.fixpack != other.fixpack) {
1:             return false;
1:         }
1:         if (this.point != other.point) {
1:             return false;
1:         }
1:         return true;
1:     }
1: 
1:     public int hashCode() {
1:         int hash = 7;
1:         hash = 83 * hash + this.major;
1:         hash = 83 * hash + this.minor;
1:         hash = 83 * hash + this.fixpack;
1:         hash = 83 * hash + this.point;
1:         return hash;
1:     }
1: 
1:     public String toString() {
0:         return version + " (" + (releaseDate == NOT_RELEASED ? "n/a" : Long.toString(releaseDate)) + ")";
1:     }
1: }
============================================================================