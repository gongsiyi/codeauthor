1:cf5735d: /*
4:cf5735d: 
1:cf5735d:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.GetCurrentPropertiesTest
1:cf5735d: 
1:cf5735d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:cf5735d:    contributor license agreements.  See the NOTICE file distributed with
1:cf5735d:    this work for additional information regarding copyright ownership.
1:cf5735d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:cf5735d:    (the "License"); you may not use this file except in compliance with
1:cf5735d:    the License.  You may obtain a copy of the License at
1:cf5735d: 
1:cf5735d:       http://www.apache.org/licenses/LICENSE-2.0
1:cf5735d: 
1:cf5735d:    Unless required by applicable law or agreed to in writing, software
1:cf5735d:    distributed under the License is distributed on an "AS IS" BASIS,
1:cf5735d:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cf5735d:    See the License for the specific language governing permissions and
1:cf5735d:    limitations under the License.
1:cf5735d: 
2:cf5735d:  */
1:cf5735d: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:cf5735d: 
1:cf5735d: import java.io.File;
1:cf5735d: import java.util.Enumeration;
1:1ae02c9: import java.util.Properties;
1:cf5735d: import junit.framework.Test;
1:cf5735d: import org.apache.derby.drda.NetworkServerControl;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:cf5735d: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1:cf5735d: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:cf5735d: 
2:cf5735d: /**
1:cf5735d:  * This tests getCurrentProperties
1:cf5735d:  * 
1:cf5735d:  */
1:cf5735d: public class GetCurrentPropertiesTest extends BaseJDBCTestCase {
1:cf5735d:     // create own policy file
1:b32256d:     private static final String POLICY_FILE_NAME =
1:b32256d:         "org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.policy";
1:cf5735d: 
1:cf5735d:     public GetCurrentPropertiesTest(String name) {
1:cf5735d:         super(name);
6:cf5735d:     }
1:cf5735d: 
1:cf5735d:     public static Test suite()
3:cf5735d:     {
1:1ae02c9:         Test test = new BaseTestSuite(GetCurrentPropertiesTest.class);
1:a5209eb:         test = TestConfiguration.clientServerDecorator(test);
1:b32256d: 
1:cf5735d:         // Install a security manager using the special policy file.
1:b32256d:         // Grant ALL FILES execute, and getPolicy permissions,
1:b32256d:         // as well as write for the trace files.
1:b32256d:         test = new SecurityManagerSetup(test, POLICY_FILE_NAME);
1:b32256d: 
1:cf5735d:         // return suite; to ensure that nothing interferes with setting of
1:cf5735d:         // properties, wrap in singleUseDatabaseDecorator 
1:a5209eb:         return TestConfiguration.singleUseDatabaseDecorator(test);
1:cf5735d:     }
1:cf5735d: 
1:cf5735d:     /**
1:cf5735d:      * Testing the properties before connecting to a database
1:cf5735d:      * 
1:cf5735d:      * @throws Exception
1:cf5735d:      */
1:a5209eb:     public void test_01_propertiesBeforeConnection() throws Exception {
1:cf5735d:         Properties p = null;
2:cf5735d:         String  userDir = getSystemProperty( "user.dir" );
1:cf5735d:         String traceDir = userDir + File.separator + "system";
1:cf5735d:         Properties expectedValues = new Properties();
1:cf5735d:         expectedValues.setProperty("derby.drda.traceDirectory",traceDir);
1:cf5735d:         expectedValues.setProperty("derby.drda.maxThreads","0");
1:cf5735d:         expectedValues.setProperty("derby.drda.sslMode","off");
1:cf5735d:         expectedValues.setProperty("derby.drda.keepAlive","true");
1:cf5735d:         expectedValues.setProperty("derby.drda.minThreads","0");
1:ad60cd5:         expectedValues.setProperty("derby.drda.portNumber",TestConfiguration.getCurrent().getPort()+"");
1:cf5735d:         expectedValues.setProperty("derby.drda.logConnections","false");
1:cf5735d:         expectedValues.setProperty("derby.drda.timeSlice","0");
1:cf5735d:         expectedValues.setProperty("derby.drda.startNetworkServer","false");
1:cf5735d:         expectedValues.setProperty("derby.drda.host","127.0.0.1");
1:cf5735d:         expectedValues.setProperty("derby.drda.traceAll","false");
1:cf5735d:         p = NetworkServerTestSetup.getNetworkServerControl().getCurrentProperties();
1:cf5735d: 
1:cf5735d:         Enumeration expectedProps = expectedValues.propertyNames();
1:b32256d:         while (expectedProps.hasMoreElements()) {
1:cf5735d:             String propName = (String)expectedProps.nextElement();
1:cf5735d:             String propVal = (String)p.get(propName);
1:cf5735d:             //for debug
1:cf5735d:             println(expectedValues.getProperty(propName));
1:cf5735d:             println(propVal);
1:cf5735d:             assertEquals(expectedValues.getProperty(propName), propVal);
1:cf5735d: 
1:cf5735d:         }
1:cf5735d:     }
1:cf5735d:     /**
1:cf5735d:      * Testing the properties after connecting to a database
1:cf5735d:      * 
1:cf5735d:      * @throws Exception
1:cf5735d:      */
1:a5209eb:     public void test_02_propertiesAfterConnection() throws Exception {
1:cf5735d:         Properties p = null;
1:cf5735d:         String  userDir = getSystemProperty( "user.dir" );
1:cf5735d:         String traceDir = userDir + File.separator + "system";
1:cf5735d:         Properties expectedValues = new Properties();
1:cf5735d:         expectedValues.setProperty("derby.drda.traceDirectory",traceDir);
1:cf5735d:         expectedValues.setProperty("derby.drda.maxThreads","0");
1:cf5735d:         expectedValues.setProperty("derby.drda.sslMode","off");
1:cf5735d:         expectedValues.setProperty("derby.drda.trace.4","true");
1:cf5735d:         expectedValues.setProperty("derby.drda.keepAlive","true");
1:cf5735d:         expectedValues.setProperty("derby.drda.minThreads","0");
1:ad60cd5:         expectedValues.setProperty("derby.drda.portNumber",TestConfiguration.getCurrent().getPort()+"");
1:cf5735d:         expectedValues.setProperty("derby.drda.logConnections","true");
1:cf5735d:         expectedValues.setProperty("derby.drda.timeSlice","0");
1:cf5735d:         expectedValues.setProperty("derby.drda.startNetworkServer","false");
1:cf5735d:         expectedValues.setProperty("derby.drda.host","127.0.0.1");
1:cf5735d:         expectedValues.setProperty("derby.drda.traceAll","false");  
1:cf5735d:         getConnection().setAutoCommit(false);
1:cf5735d:         NetworkServerControl nsctrl = NetworkServerTestSetup.getNetworkServerControl();
1:cf5735d:         nsctrl.trace(4,true);
1:cf5735d:         nsctrl.logConnections(true);
1:cf5735d:         p = NetworkServerTestSetup.getNetworkServerControl().getCurrentProperties();
1:cf5735d:         Enumeration expectedProps = expectedValues.propertyNames();
1:b32256d:         while (expectedProps.hasMoreElements()) {
1:cf5735d:             String propName = (String) expectedProps.nextElement();
1:cf5735d:             String propVal = (String)p.get(propName);
1:cf5735d:             //for debug
1:cf5735d:             println(expectedValues.getProperty(propName));
1:cf5735d:             println(propVal);
1:cf5735d:             assertEquals(expectedValues.getProperty(propName), propVal);
1:cf5735d: 
1:cf5735d:         }
1:cf5735d:     } 
1:cf5735d:     /**
1:cf5735d:      * Testing the properties after setting the trace dir and tracing on
1:cf5735d:      * 
1:cf5735d:      * @throws Exception
1:cf5735d:      */
1:a5209eb:     public void test_03_propertiesTraceOn() throws Exception {
1:cf5735d:         Properties p = null;
1:cf5735d: 
1:cf5735d:         NetworkServerControl nsctrl = NetworkServerTestSetup.getNetworkServerControl();
1:cf5735d:         nsctrl.trace(true);
1:cf5735d:         String derbySystemHome = getSystemProperty("derby.system.home");
1:cf5735d:         nsctrl.setTraceDirectory(derbySystemHome);
1:cf5735d:         Properties expectedValues = new Properties();
1:cf5735d:         expectedValues.setProperty("derby.drda.traceDirectory",derbySystemHome);
1:cf5735d:         expectedValues.setProperty("derby.drda.maxThreads","0");
1:cf5735d:         expectedValues.setProperty("derby.drda.sslMode","off");
1:cf5735d:         expectedValues.setProperty("derby.drda.keepAlive","true");
1:cf5735d:         expectedValues.setProperty("derby.drda.minThreads","0");
1:ad60cd5:         expectedValues.setProperty("derby.drda.portNumber",TestConfiguration.getCurrent().getPort()+"");
1:cf5735d:         expectedValues.setProperty("derby.drda.logConnections","true");
1:cf5735d:         expectedValues.setProperty("derby.drda.timeSlice","0");
1:cf5735d:         expectedValues.setProperty("derby.drda.startNetworkServer","false");
1:cf5735d:         expectedValues.setProperty("derby.drda.host","127.0.0.1");
1:cf5735d:         expectedValues.setProperty("derby.drda.traceAll","true");
1:cf5735d:         p = NetworkServerTestSetup.getNetworkServerControl().getCurrentProperties();
1:cf5735d:         Enumeration expectedProps = expectedValues.propertyNames();
1:b32256d:         while (expectedProps.hasMoreElements()) {
1:cf5735d:             String propName = (String) expectedProps.nextElement();
1:cf5735d:             String propVal = (String)p.get(propName);
1:cf5735d:             //for debug
1:cf5735d:             println(expectedValues.getProperty(propName));
1:cf5735d:             println(propVal);
1:cf5735d:             assertEquals(expectedValues.getProperty(propName), propVal);
1:cf5735d: 
1:cf5735d: 
1:cf5735d:         }
1:cf5735d:     }
1:cf5735d: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         Test test = new BaseTestSuite(GetCurrentPropertiesTest.class);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b32256d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String POLICY_FILE_NAME =
1:         "org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.policy";
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Grant ALL FILES execute, and getPolicy permissions,
1:         // as well as write for the trace files.
1:         test = new SecurityManagerSetup(test, POLICY_FILE_NAME);
1: 
/////////////////////////////////////////////////////////////////////////
1:         while (expectedProps.hasMoreElements()) {
/////////////////////////////////////////////////////////////////////////
1:         while (expectedProps.hasMoreElements()) {
/////////////////////////////////////////////////////////////////////////
1:         while (expectedProps.hasMoreElements()) {
commit:a5209eb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         // Use a fixed order for the test cases so that we know the exact
0:         // order in which they run. Some of them depend on the connection
0:         // number having a specific value, which can only be guaranteed if
0:         // we know exactly how many connections have been opened, hence the
0:         // need for a fixed order. Some also depend on seeing property values
0:         // set by the previous test case.
0:         Test test =
0:                 TestConfiguration.orderedSuite(GetCurrentPropertiesTest.class);
1:         test = TestConfiguration.clientServerDecorator(test);
1:         return TestConfiguration.singleUseDatabaseDecorator(test);
/////////////////////////////////////////////////////////////////////////
1:     public void test_01_propertiesBeforeConnection() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_02_propertiesAfterConnection() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void test_03_propertiesTraceOn() throws Exception {
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:ad60cd5
/////////////////////////////////////////////////////////////////////////
1:         expectedValues.setProperty("derby.drda.portNumber",TestConfiguration.getCurrent().getPort()+"");
/////////////////////////////////////////////////////////////////////////
1:         expectedValues.setProperty("derby.drda.portNumber",TestConfiguration.getCurrent().getPort()+"");
/////////////////////////////////////////////////////////////////////////
1:         expectedValues.setProperty("derby.drda.portNumber",TestConfiguration.getCurrent().getPort()+"");
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:cf5735d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.GetCurrentPropertiesTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.io.File;
0: import java.util.Properties;
1: import java.util.Enumeration;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derby.drda.NetworkServerControl;
1: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
1: /**
1:  * This tests getCurrentProperties
1:  * 
1:  */
1: public class GetCurrentPropertiesTest extends BaseJDBCTestCase {
1:     // create own policy file
0:     private static String POLICY_FILE_NAME = 
0:         "functionTests/tests/derbynet/GetCurrentPropertiesTest.policy";
0:     private static String TARGET_POLICY_FILE_NAME = "server.policy";
1: 
1:     public GetCurrentPropertiesTest(String name) {
1:         super(name);
1:     }
1: 
0:     protected void tearDown() throws Exception {
0:         super.tearDown();
1:     }
1: 
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("GetCurrentPropertiesTest");
0:         Test test = TestConfiguration
0:             .clientServerSuite(GetCurrentPropertiesTest.class);
1:         // Install a security manager using the special policy file.
0:         test = decorateWithPolicy(test);
0:         suite.addTest(test);
1:         // return suite; to ensure that nothing interferes with setting of
1:         // properties, wrap in singleUseDatabaseDecorator 
0:         return TestConfiguration.singleUseDatabaseDecorator(suite);
1:     }
1:     /**
0:      * Construct the name of the server policy file.
1:      */
0:     private static String makeServerPolicyName()
1:     {
0:         try {
1:             
1:             String  userDir = getSystemProperty( "user.dir" );
0:             String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
0:             File      file = new File( fileName );
0:             String  urlString = file.toURL().toExternalForm();
1: 
0:             return urlString;
1:         }
0:         catch (Exception e)
1:         {
0:             fail("Exception in REading Server policy file",e);
0:             return null;
1:         }
1:     }
0:     // grant ALL FILES execute, and getPolicy permissions,
0:     // as well as write for the trace files.
0:     private static Test decorateWithPolicy(Test test) {
0:         String serverPolicyName = makeServerPolicyName(); 
0:         //
0:         // Install a security manager using the initial policy file.
0:         //
0:         test = new SecurityManagerSetup(test,serverPolicyName );
0:         // Copy over the policy file we want to use.
0:         //
0:         test = new SupportFilesSetup(
0:                 test, null, new String[] {POLICY_FILE_NAME},
0:                 null, new String[] {TARGET_POLICY_FILE_NAME}
0:         );
0:         return test;
1:         
1:     }
1:     /**
1:      * Testing the properties before connecting to a database
1:      * 
1:      * @throws Exception
1:      */
0:     public void testPropertiesBeforeConnection() throws Exception {
1:         Properties p = null;
1:         String  userDir = getSystemProperty( "user.dir" );
1:         String traceDir = userDir + File.separator + "system";
1:         Properties expectedValues = new Properties();
1:         expectedValues.setProperty("derby.drda.traceDirectory",traceDir);
1:         expectedValues.setProperty("derby.drda.maxThreads","0");
1:         expectedValues.setProperty("derby.drda.sslMode","off");
1:         expectedValues.setProperty("derby.drda.keepAlive","true");
1:         expectedValues.setProperty("derby.drda.minThreads","0");
0:         expectedValues.setProperty("derby.drda.portNumber","1527");
1:         expectedValues.setProperty("derby.drda.logConnections","false");
1:         expectedValues.setProperty("derby.drda.timeSlice","0");
1:         expectedValues.setProperty("derby.drda.startNetworkServer","false");
1:         expectedValues.setProperty("derby.drda.host","127.0.0.1");
1:         expectedValues.setProperty("derby.drda.traceAll","false");
1:         p = NetworkServerTestSetup.getNetworkServerControl().getCurrentProperties();
1: 
1:         Enumeration expectedProps = expectedValues.propertyNames();
0:         for ( expectedProps = expectedValues.propertyNames(); expectedProps.hasMoreElements();) {
1:             String propName = (String)expectedProps.nextElement();
1:             String propVal = (String)p.get(propName);
1:             //for debug
1:             println(expectedValues.getProperty(propName));
1:             println(propVal);
1:             assertEquals(expectedValues.getProperty(propName), propVal);
1: 
1:         }
1:     }
1:     /**
1:      * Testing the properties after connecting to a database
1:      * 
1:      * @throws Exception
1:      */
0:     public void testPropertiesAfterConnection() throws Exception { 
1:         Properties p = null;
1:         String  userDir = getSystemProperty( "user.dir" );
1:         String traceDir = userDir + File.separator + "system";
1:         Properties expectedValues = new Properties();
1:         expectedValues.setProperty("derby.drda.traceDirectory",traceDir);
1:         expectedValues.setProperty("derby.drda.maxThreads","0");
1:         expectedValues.setProperty("derby.drda.sslMode","off");
1:         expectedValues.setProperty("derby.drda.trace.4","true");
1:         expectedValues.setProperty("derby.drda.keepAlive","true");
1:         expectedValues.setProperty("derby.drda.minThreads","0");
0:         expectedValues.setProperty("derby.drda.portNumber","1527");
1:         expectedValues.setProperty("derby.drda.logConnections","true");
1:         expectedValues.setProperty("derby.drda.timeSlice","0");
1:         expectedValues.setProperty("derby.drda.startNetworkServer","false");
1:         expectedValues.setProperty("derby.drda.host","127.0.0.1");
1:         expectedValues.setProperty("derby.drda.traceAll","false");  
1:         getConnection().setAutoCommit(false);
1:         NetworkServerControl nsctrl = NetworkServerTestSetup.getNetworkServerControl();
1:         nsctrl.trace(4,true);
1:         nsctrl.logConnections(true);
1:         p = NetworkServerTestSetup.getNetworkServerControl().getCurrentProperties();
1:         Enumeration expectedProps = expectedValues.propertyNames();
0:         for ( expectedProps = expectedValues.propertyNames(); expectedProps.hasMoreElements();) {
1:             String propName = (String) expectedProps.nextElement();
1:             String propVal = (String)p.get(propName);
1:             //for debug
1:             println(expectedValues.getProperty(propName));
1:             println(propVal);
1:             assertEquals(expectedValues.getProperty(propName), propVal);
1: 
1:         }
1:     } 
1:     /**
1:      * Testing the properties after setting the trace dir and tracing on
1:      * 
1:      * @throws Exception
1:      */
0:     public void testPropertiesTraceOn() throws Exception { 
1:         Properties p = null;
1: 
1:         NetworkServerControl nsctrl = NetworkServerTestSetup.getNetworkServerControl();
1:         nsctrl.trace(true);
1:         String derbySystemHome = getSystemProperty("derby.system.home");
1:         nsctrl.setTraceDirectory(derbySystemHome);
1:         Properties expectedValues = new Properties();
1:         expectedValues.setProperty("derby.drda.traceDirectory",derbySystemHome);
1:         expectedValues.setProperty("derby.drda.maxThreads","0");
1:         expectedValues.setProperty("derby.drda.sslMode","off");
1:         expectedValues.setProperty("derby.drda.keepAlive","true");
1:         expectedValues.setProperty("derby.drda.minThreads","0");
0:         expectedValues.setProperty("derby.drda.portNumber","1527");
1:         expectedValues.setProperty("derby.drda.logConnections","true");
1:         expectedValues.setProperty("derby.drda.timeSlice","0");
1:         expectedValues.setProperty("derby.drda.startNetworkServer","false");
1:         expectedValues.setProperty("derby.drda.host","127.0.0.1");
1:         expectedValues.setProperty("derby.drda.traceAll","true");
1:         p = NetworkServerTestSetup.getNetworkServerControl().getCurrentProperties();
1:         Enumeration expectedProps = expectedValues.propertyNames();
0:         for ( expectedProps = expectedValues.propertyNames(); expectedProps.hasMoreElements();) {
1:             String propName = (String) expectedProps.nextElement();
1:             String propVal = (String)p.get(propName);
1:             //for debug
1:             println(expectedValues.getProperty(propName));
1:             println(propVal);
1:             assertEquals(expectedValues.getProperty(propName), propVal);
1: 
1: 
1:         }
1:     }
1: }
============================================================================