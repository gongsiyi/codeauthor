1:faaf464: /*
3:faaf464: 
1:faaf464:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.checkPoint
1:faaf464: 
1:faaf464:    Licensed to the Apache Software Foundation (ASF) under one or more
1:faaf464:    contributor license agreements.  See the NOTICE file distributed with
1:faaf464:    this work for additional information regarding copyright ownership.
1:faaf464:    The ASF licenses this file to You under the Apache License, Version 2.0
1:faaf464:    (the "License"); you may not use this file except in compliance with
1:faaf464:    the License.  You may obtain a copy of the License at
1:faaf464: 
1:faaf464:       http://www.apache.org/licenses/LICENSE-2.0
1:faaf464: 
1:faaf464:    Unless required by applicable law or agreed to in writing, software
1:faaf464:    distributed under the License is distributed on an "AS IS" BASIS,
1:faaf464:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:faaf464:    See the License for the specific language governing permissions and
1:faaf464:    limitations under the License.
1:faaf464: 
1:faaf464:  */
1:faaf464: package org.apache.derbyTesting.functionTests.tests.store;
1:faaf464: 
1:faaf464: import java.sql.ResultSet;
1:faaf464: import java.sql.SQLException;
1:faaf464: import java.sql.Statement;
1:faaf464: import junit.framework.Test;
1:faaf464: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:faaf464: import org.apache.derbyTesting.junit.JDBC;
1:faaf464: import org.apache.derbyTesting.junit.TestConfiguration;
1:faaf464: 
1:faaf464: public class LongColumnTest extends BaseJDBCTestCase {
1:faaf464: 
1:faaf464:     public LongColumnTest(String name) {
1:faaf464:         super(name);
2:faaf464:     }
1:faaf464:     
1:faaf464:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("LongColumnTest");
1:faaf464:         suite.addTest(TestConfiguration.defaultSuite(LongColumnTest.class));
1:faaf464: 
1:faaf464:         return suite;
1:faaf464:     }
1:faaf464: 
1:faaf464:     protected void setUp() {
1:faaf464:         try {
1:faaf464:             Statement s = createStatement();
1:faaf464:             s.execute("CREATE FUNCTION  PADSTRING (DATA VARCHAR(32000), "
1:faaf464:                     + "LENGTH INTEGER) RETURNS VARCHAR(32000) EXTERNAL NAME "
1:faaf464:                     + "'org.apache.derbyTesting.functionTests.util.Formatters"
1:faaf464:                     + ".padString' LANGUAGE JAVA PARAMETER STYLE JAVA");
1:faaf464:             s.execute("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY"
1:faaf464:                     + "('derby.storage.pageSize', '4096')");
1:faaf464:             s.execute("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY"
1:faaf464:                     + "('derby.storage.pageCacheSize', '40')");
1:faaf464:             s.close();
1:faaf464:         } catch (SQLException se) {
1:faaf464:             se.printStackTrace();
1:faaf464:         }
1:faaf464:         
1:faaf464:         try {
1:faaf464:             dropTable("testing");
1:faaf464:         } catch (SQLException e) {
1:faaf464:             //ignore
1:faaf464:         }
1:faaf464:     }
1:faaf464: 
1:4862eff:     public void tearDown() throws Exception {
1:faaf464:         Statement st = createStatement();
1:faaf464:         st.executeUpdate("DROP FUNCTION PADSTRING");
1:faaf464:         st.close();
1:faaf464:         dropTable("testing");
1:4862eff:         super.tearDown();
1:1ae02c9:     }
1:faaf464: 
1:faaf464:     /**
1:faaf464:      * test 1: one long column
1:faaf464:      */
1:faaf464:     public void testOneLongColumn() throws SQLException {
1:faaf464:         Statement st = createStatement();
1:faaf464:         
1:faaf464:         st.execute("create table testing (a varchar(8096))");
1:faaf464:         st.execute("insert into testing values (PADSTRING('1 2 3 4 5 6 7 8 9 0', 8096))");
1:faaf464:         st.execute("insert into testing values (PADSTRING('a b c d e f g h i j', 8096))");
1:faaf464:         st.execute("insert into testing values (PADSTRING('11 22 33 44 55 66 77', 8096))");
1:faaf464:         st.execute("insert into testing values (PADSTRING('aa bb cc dd ee ff gg', 8096))");
1:faaf464:         
1:faaf464:         ResultSet rs = st.executeQuery("select a from testing");  
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0"},
1:faaf464:                 {"a b c d e f g h i j"},
1:faaf464:                 {"11 22 33 44 55 66 77"},
1:faaf464:                 {"aa bb cc dd ee ff gg"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         st.close();
1:faaf464:     }
1:faaf464: 
1:faaf464:     /**
1:faaf464:      * test 2: testing two column (1 short, 1 long) table
1:faaf464:      */
1:faaf464:     public void testTwoColumnsShortAndLong() throws SQLException {
1:faaf464:         Statement st = createStatement();
1:faaf464:         
1:faaf464:         st.execute("create table testing (a int, b varchar(32384))");
1:faaf464:         st.execute("insert into testing values (1, PADSTRING('1 2 3 4 5 6 7 8 9 0', 32384))");
1:faaf464:         st.execute("insert into testing values (2, PADSTRING('a b c d e f g h i j', 32384))");
1:faaf464:         st.execute("insert into testing values (3, PADSTRING('11 22 33 44 55 66 77', 32384))");
1:faaf464:         st.execute("insert into testing values (4, PADSTRING('aa bb cc dd ee ff gg', 32384))");
1:faaf464:         
1:faaf464:         ResultSet rs = st.executeQuery("select * from testing");
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1", "1 2 3 4 5 6 7 8 9 0"},
1:faaf464:                 {"2", "a b c d e f g h i j"},
1:faaf464:                 {"3", "11 22 33 44 55 66 77"},
1:faaf464:                 {"4", "aa bb cc dd ee ff gg"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1"},
1:faaf464:                 {"2"},
1:faaf464:                 {"3"},
1:faaf464:                 {"4"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select b from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0"},
1:faaf464:                 {"a b c d e f g h i j"},
1:faaf464:                 {"11 22 33 44 55 66 77"},
1:faaf464:                 {"aa bb cc dd ee ff gg"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select b from testing where a = 1");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0"},
1:faaf464:         });
1:faaf464:         
1:faaf464:         st.close();        
1:faaf464:     }
1:faaf464:     
1:faaf464:     /**
1:faaf464:      * test 3: testing two column (1 long, 1 shor) table
1:faaf464:      */
1:faaf464:     public void testTwoColumnsLongAndShort() throws SQLException {
1:faaf464:         Statement st = createStatement();
1:faaf464:         
1:faaf464:         st.execute("create table testing (a varchar(32384), b int)");
1:faaf464:         st.execute("insert into testing values (PADSTRING('1 2 3 4 5 6 7 8 9 0', 32384), 1)");
1:faaf464:         st.execute("insert into testing values (PADSTRING('a b c d e f g h i j', 32384), 2)");
1:faaf464:         st.execute("insert into testing values (PADSTRING('11 22 33 44 55 66 77', 32384), 3)");
1:faaf464:         st.execute("insert into testing values (PADSTRING('aa bb cc dd ee ff gg', 32384), 4)");
1:faaf464:         
1:faaf464:         ResultSet rs = st.executeQuery("select * from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0", "1"},
1:faaf464:                 {"a b c d e f g h i j", "2"},
1:faaf464:                 {"11 22 33 44 55 66 77", "3"},
1:faaf464:                 {"aa bb cc dd ee ff gg", "4"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0"},
1:faaf464:                 {"a b c d e f g h i j"},
1:faaf464:                 {"11 22 33 44 55 66 77"},
1:faaf464:                 {"aa bb cc dd ee ff gg"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select b from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1"},
1:faaf464:                 {"2"},
1:faaf464:                 {"3"},
1:faaf464:                 {"4"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a from testing where b = 4");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"aa bb cc dd ee ff gg"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         st.close();        
1:faaf464:     }
1:faaf464: 
1:faaf464:     /**
1:faaf464:      * test 4: testing three column (1 short, 1 long, 1 short) table
1:faaf464:      */
1:faaf464:     public void testThreeColumnsShortAndLongAndShort() throws SQLException {
1:faaf464:         Statement st = createStatement();
1:faaf464:         
1:faaf464:         st.execute("create table testing (z int, a varchar(32384), b int)");
1:faaf464:         st.execute("insert into testing values (0, PADSTRING('1 2 3 4 5 6 7 8 9 0',32384), 1)");
1:faaf464:         st.execute("insert into testing values (1, PADSTRING('a b c d e f g h i j',32384), 2)");
1:faaf464:         st.execute("insert into testing values (2, PADSTRING('11 22 33 44 55 66 77',32384), 3)");
1:faaf464:         st.execute("insert into testing values (4, PADSTRING('aa bb cc dd ee ff gg',32384), 4)");
1:faaf464:         
1:faaf464:         ResultSet rs = st.executeQuery("select * from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"0", "1 2 3 4 5 6 7 8 9 0", "1"},
1:faaf464:                 {"1", "a b c d e f g h i j", "2"},
1:faaf464:                 {"2", "11 22 33 44 55 66 77", "3"},
1:faaf464:                 {"4", "aa bb cc dd ee ff gg", "4"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0"},
1:faaf464:                 {"a b c d e f g h i j"},
1:faaf464:                 {"11 22 33 44 55 66 77"},
1:faaf464:                 {"aa bb cc dd ee ff gg"}      
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select b from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1"},
1:faaf464:                 {"2"},
1:faaf464:                 {"3"},
1:faaf464:                 {"4"},
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select z from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"0"},
1:faaf464:                 {"1"},
1:faaf464:                 {"2"},
1:faaf464:                 {"4"},
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select b from testing where z = b");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"4"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         
1:faaf464:         try {
1:faaf464:             st.executeUpdate("create index zz on testing (a)");
1:faaf464:             fail("try creating btree index on long column, should fail");
1:faaf464:         } catch (SQLException e) {
1:faaf464:             assertSQLState("XSCB6", e);
1:faaf464:         }
1:faaf464:         
1:faaf464:         st.execute("update testing set a = PADSTRING('update once', 32384)");
1:faaf464:         st.execute("update testing set a = PADSTRING('update twice', 32384)");
1:faaf464:         st.execute("update testing set a = PADSTRING('update three times', 32384)");
1:faaf464:         st.execute("update testing set a = PADSTRING('update four times', 32384)");
1:faaf464:         st.execute("update testing set a = PADSTRING('update five times', 32384)");
1:faaf464:                 
1:faaf464:         rs = st.executeQuery("select a from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"update five times"},
1:faaf464:                 {"update five times"},
1:faaf464:                 {"update five times"},
1:faaf464:                 {"update five times"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         st.close();        
1:faaf464:     }
1:faaf464:  
1:faaf464:     /**
1:faaf464:      * test 5: testing three columns (1 long, 1 short, 1 long) table
1:faaf464:      */
1:faaf464:     public void testThreeColumnsLongAndShortAndLong() throws SQLException {
1:faaf464:         Statement st = createStatement();
1:faaf464:         
1:faaf464:         st.execute("create table testing (a varchar(32384), b int, c varchar(32084))");
1:faaf464:         st.execute("insert into testing values (PADSTRING('1 2 3 4 5 6 7 8 9 0',32384),"
1:faaf464:                 + " 1, PADSTRING('1 2 3 4 5 6 7 8 9 0',32084))");
1:faaf464:         st.execute("insert into testing values (PADSTRING('a b c d e f g h i j',32384),"
1:faaf464:                 + " 2, PADSTRING('a b c d e f g h i j',32084))");
1:faaf464:         st.execute("insert into testing values (PADSTRING('11 22 33 44 55 66 77',32384),"
1:faaf464:                 + " 3, PADSTRING('11 22 33 44 55 66 77',32084))");
1:faaf464:         st.execute("insert into testing values (PADSTRING('aa bb cc dd ee ff gg',32384),"
1:faaf464:                 + " 4, PADSTRING('aa bb cc dd ee ff gg',32084))");
1:faaf464:         
1:faaf464:         ResultSet rs = st.executeQuery("select * from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0", "1", "1 2 3 4 5 6 7 8 9 0"},
1:faaf464:                 {"a b c d e f g h i j", "2", "a b c d e f g h i j"},
1:faaf464:                 {"11 22 33 44 55 66 77", "3", "11 22 33 44 55 66 77"},
1:faaf464:                 {"aa bb cc dd ee ff gg", "4", "aa bb cc dd ee ff gg"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0",},
1:faaf464:                 {"a b c d e f g h i j",},
1:faaf464:                 {"11 22 33 44 55 66 77",},
1:faaf464:                 {"aa bb cc dd ee ff gg",}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select b from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1"},
1:faaf464:                 {"2"},
1:faaf464:                 {"3"},
1:faaf464:                 {"4"},
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select c from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0"},
1:faaf464:                 {"a b c d e f g h i j"},
1:faaf464:                 {"11 22 33 44 55 66 77"},
1:faaf464:                 {"aa bb cc dd ee ff gg"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select * from testing where b = 4");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"aa bb cc dd ee ff gg", "4", "aa bb cc dd ee ff gg"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         try {
1:faaf464:             st.executeUpdate("create index zz on testing (a)");
1:faaf464:             fail("try creating btree index, should fail on long columns");
1:faaf464:         } catch (SQLException e) {
1:faaf464:             assertSQLState("XSCB6", e);
1:faaf464:         }
1:faaf464:         
1:faaf464:         try {
1:faaf464:             st.executeUpdate("create index zz on testing (c)");
1:faaf464:             fail("try creating btree index, should fail on long columns");
1:faaf464:         } catch (SQLException e) {
1:faaf464:             assertSQLState("XSCB6", e);
1:faaf464:         }
1:faaf464:         
1:faaf464:         st.executeUpdate("create index zz on testing (b)");
1:faaf464:         
1:faaf464:         
1:faaf464:         st.execute("update testing set c = PADSTRING('update 0', 32084)");
1:faaf464:         st.execute("update testing set c = PADSTRING('update 1', 32084)");
1:faaf464:         st.execute("update testing set c = PADSTRING('update 2', 32084)");
1:faaf464:         st.execute("update testing set c = PADSTRING('update 3', 32084)");
1:faaf464:         st.execute("update testing set c = PADSTRING('update 4', 32084)");
1:faaf464:         st.execute("update testing set c = PADSTRING('update 5', 32084)");
1:faaf464:         st.execute("update testing set c = PADSTRING('update 6', 32084)");
1:faaf464:         st.execute("update testing set c = PADSTRING('update 7', 32084)");
1:faaf464:         st.execute("update testing set c = PADSTRING('update 8', 32084)");
1:faaf464:         st.execute("update testing set c = PADSTRING('update 9', 32084)");
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select * from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0", "1", "update 9"},
1:faaf464:                 {"a b c d e f g h i j", "2", "update 9"},
1:faaf464:                 {"11 22 33 44 55 66 77", "3", "update 9"},
1:faaf464:                 {"aa bb cc dd ee ff gg", "4", "update 9"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         st.close();        
1:faaf464:     }
1:faaf464:     
1:faaf464:     /**
1:faaf464:      * test 6: table with 5 columns (1 short, 1 long, 1 short, 1 long, 1 short) table
1:faaf464:      */
1:faaf464:     public void testFiveColumnsSLSLS() throws SQLException {
1:faaf464:         Statement st = createStatement();
1:faaf464:         
1:faaf464:         st.execute("create table testing (a int, b clob(64768), c int, d varchar(32384), e int)");
1:faaf464:         st.execute("insert into testing values (0, PADSTRING('1 2 3 4 5 6 7 8 9 0', 64768),"
1:faaf464:                 + "  1, PADSTRING('1 2 3 4 5 6 7 8 9 0', 32384),  2)");
1:faaf464:         st.execute("insert into testing values (1, PADSTRING('a b c d e f g h i j', 64768),"
1:faaf464:                 + "  2, PADSTRING('a b c d e f g h i j', 32384),  3)");
1:faaf464:         st.execute("insert into testing values (2, PADSTRING('11 22 33 44 55 66 77', 64768),"
1:faaf464:                 + " 3, PADSTRING('11 22 33 44 55 66 77', 32384), 4)");
1:faaf464:         st.execute("insert into testing values (3, PADSTRING('aa bb cc dd ee ff gg', 64768),"
1:faaf464:                 + " 4, PADSTRING('aa bb cc dd ee ff gg',32384), 5)");
1:faaf464:         st.execute("insert into testing values (4, PADSTRING('1 2 3 4 5 6 7 8 9 0', 64768),"
1:faaf464:                 + "  5, PADSTRING('aa bb cc dd ee ff gg',32384), 6)");
1:faaf464:         st.execute("insert into testing values (5, PADSTRING('a b c d e f g h i j', 64768),"
1:faaf464:                 + "  6, PADSTRING('aa bb cc dd ee ff gg',32384), 7)");
1:faaf464:         st.execute("insert into testing values (6, PADSTRING('11 22 33 44 55 66 77', 64768),"
1:faaf464:                 + " 7, PADSTRING('aa bb cc dd ee ff gg',32384), 8)");
1:faaf464:         st.execute("insert into testing values (7, PADSTRING('aa bb cc dd ee ff gg', 64768),"
1:faaf464:                 + " 8, PADSTRING('aa bb cc dd ee ff gg',32384), 9)");
1:faaf464:         
1:faaf464:         ResultSet rs = st.executeQuery("select * from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"0", "1 2 3 4 5 6 7 8 9 0", "1", "1 2 3 4 5 6 7 8 9 0", "2"},
1:faaf464:                 {"1", "a b c d e f g h i j", "2", "a b c d e f g h i j", "3"},
1:faaf464:                 {"2", "11 22 33 44 55 66 77", "3", "11 22 33 44 55 66 77", "4"},
1:faaf464:                 {"3", "aa bb cc dd ee ff gg", "4", "aa bb cc dd ee ff gg", "5"},
1:faaf464:                 {"4", "1 2 3 4 5 6 7 8 9 0", "5", "aa bb cc dd ee ff gg", "6"},
1:faaf464:                 {"5", "a b c d e f g h i j", "6", "aa bb cc dd ee ff gg", "7"},
1:faaf464:                 {"6", "11 22 33 44 55 66 77", "7", "aa bb cc dd ee ff gg", "8"},
1:faaf464:                 {"7", "aa bb cc dd ee ff gg", "8", "aa bb cc dd ee ff gg", "9"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"0"},
1:faaf464:                 {"1"},
1:faaf464:                 {"2"},
1:faaf464:                 {"3"},
1:faaf464:                 {"4"},
1:faaf464:                 {"5"},
1:faaf464:                 {"6"},
1:faaf464:                 {"7"},
1:faaf464:         });
1:faaf464:         
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select b from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0"},
1:faaf464:                 {"a b c d e f g h i j"},
1:faaf464:                 {"11 22 33 44 55 66 77"},
1:faaf464:                 {"aa bb cc dd ee ff gg"},
1:faaf464:                 {"1 2 3 4 5 6 7 8 9 0"},
1:faaf464:                 {"a b c d e f g h i j"},
1:faaf464:                 {"11 22 33 44 55 66 77"},
1:faaf464:                 {"aa bb cc dd ee ff gg"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a, c, d from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"0", "1", "1 2 3 4 5 6 7 8 9 0"},
1:faaf464:                 {"1", "2", "a b c d e f g h i j"},
1:faaf464:                 {"2", "3", "11 22 33 44 55 66 77"},
1:faaf464:                 {"3", "4", "aa bb cc dd ee ff gg"},
1:faaf464:                 {"4", "5", "aa bb cc dd ee ff gg"},
1:faaf464:                 {"5", "6", "aa bb cc dd ee ff gg"},
1:faaf464:                 {"6", "7", "aa bb cc dd ee ff gg"},
1:faaf464:                 {"7", "8", "aa bb cc dd ee ff gg"}
1:faaf464:         });
1:faaf464: 
1:faaf464:         
1:faaf464:         st.execute("update testing set b = PADSTRING('update 0', 64768)");
1:faaf464:         st.execute("update testing set b = PADSTRING('update 1', 64768)");
1:faaf464:         st.execute("update testing set b = PADSTRING('update 2', 64768)");
1:faaf464:         st.execute("update testing set b = PADSTRING('update 3', 64768)");
1:faaf464:         st.execute("update testing set b = PADSTRING('update 4', 64768)");
1:faaf464:         st.execute("update testing set b = PADSTRING('update 5', 64768)");
1:faaf464:         st.execute("update testing set b = PADSTRING('update 6', 64768)");
1:faaf464:         st.execute("update testing set b = PADSTRING('update 7', 64768)");
1:faaf464:         st.execute("update testing set b = PADSTRING('update 8', 64768)");
1:faaf464:         st.execute("update testing set b = PADSTRING('update 9', 64768)");
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select b from testing");
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"update 9"},
1:faaf464:                 {"update 9"},
1:faaf464:                 {"update 9"},
1:faaf464:                 {"update 9"},
1:faaf464:                 {"update 9"},
1:faaf464:                 {"update 9"},
1:faaf464:                 {"update 9"},
1:faaf464:                 {"update 9"},
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a, b, e from testing");
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"0", "update 9", "2"},
1:faaf464:                 {"1", "update 9", "3"},
1:faaf464:                 {"2", "update 9", "4"},
1:faaf464:                 {"3", "update 9", "5"},
1:faaf464:                 {"4", "update 9", "6"},
1:faaf464:                 {"5", "update 9", "7"},
1:faaf464:                 {"6", "update 9", "8"},
1:faaf464:                 {"7", "update 9", "9"}
1:faaf464:         });
1:faaf464:         
1:faaf464:         st.close();
1:faaf464:     }
1:faaf464: 
1:faaf464:     /**
1:faaf464:      * test 7: table with 5 columns, all long columns
1:faaf464:      */
1:faaf464:     public void testFiveColumnsAllLong() throws SQLException {
1:faaf464:         Statement st = createStatement();
1:faaf464:         
1:faaf464:         st.execute("create table testing"
1:faaf464:                 + " (a clob(64768), b varchar(32384), c clob(64768), d varchar(32384), e clob(64768))");
1:faaf464:         
1:faaf464:         for (int i = 0; i < 10; i++) {
1:faaf464:             st.execute("insert into testing values (PADSTRING('a a a a a a a a a a',64768),"
1:faaf464:                     + " PADSTRING('b b b b b b b b b b',32384), PADSTRING('c c c c c c c c c c',64768),"
1:faaf464:                     + " PADSTRING('d d d d d d d d d d', 32384), PADSTRING('e e e e e e e e',64768))");
1:faaf464:         }
1:faaf464:         
1:faaf464:         ResultSet rs = st.executeQuery("select * from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:faaf464:                     "d d d d d d d d d d", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:faaf464:                     "d d d d d d d d d d", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:faaf464:                     "d d d d d d d d d d", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:faaf464:                     "d d d d d d d d d d", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:faaf464:                     "d d d d d d d d d d", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:faaf464:                     "d d d d d d d d d d", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:faaf464:                     "d d d d d d d d d d", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:faaf464:                     "d d d d d d d d d d", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:faaf464:                     "d d d d d d d d d d", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:faaf464:                     "d d d d d d d d d d", "e e e e e e e e"},                        
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"a a a a a a a a a a",},
1:faaf464:                 {"a a a a a a a a a a",},
1:faaf464:                 {"a a a a a a a a a a",},
1:faaf464:                 {"a a a a a a a a a a",},
1:faaf464:                 {"a a a a a a a a a a",},
1:faaf464:                 {"a a a a a a a a a a",},
1:faaf464:                 {"a a a a a a a a a a",},
1:faaf464:                 {"a a a a a a a a a a",},
1:faaf464:                 {"a a a a a a a a a a",},
1:faaf464:                 {"a a a a a a a a a a",},                        
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select b from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"b b b b b b b b b b",},
1:faaf464:                 {"b b b b b b b b b b",},
1:faaf464:                 {"b b b b b b b b b b",},
1:faaf464:                 {"b b b b b b b b b b",},
1:faaf464:                 {"b b b b b b b b b b",},
1:faaf464:                 {"b b b b b b b b b b",},
1:faaf464:                 {"b b b b b b b b b b",},
1:faaf464:                 {"b b b b b b b b b b",},
1:faaf464:                 {"b b b b b b b b b b",},
1:faaf464:                 {"b b b b b b b b b b",},                        
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select c from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"c c c c c c c c c c",},
1:faaf464:                 {"c c c c c c c c c c",},
1:faaf464:                 {"c c c c c c c c c c",},
1:faaf464:                 {"c c c c c c c c c c",},
1:faaf464:                 {"c c c c c c c c c c",},
1:faaf464:                 {"c c c c c c c c c c",},
1:faaf464:                 {"c c c c c c c c c c",},
1:faaf464:                 {"c c c c c c c c c c",},
1:faaf464:                 {"c c c c c c c c c c",},
1:faaf464:                 {"c c c c c c c c c c",},                        
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select d from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"d d d d d d d d d d",},
1:faaf464:                 {"d d d d d d d d d d",},
1:faaf464:                 {"d d d d d d d d d d",},
1:faaf464:                 {"d d d d d d d d d d",},
1:faaf464:                 {"d d d d d d d d d d",},
1:faaf464:                 {"d d d d d d d d d d",},
1:faaf464:                 {"d d d d d d d d d d",},
1:faaf464:                 {"d d d d d d d d d d",},
1:faaf464:                 {"d d d d d d d d d d",},
1:faaf464:                 {"d d d d d d d d d d",},                        
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select e from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"e e e e e e e e",},
1:faaf464:                 {"e e e e e e e e",},
1:faaf464:                 {"e e e e e e e e",},
1:faaf464:                 {"e e e e e e e e",},
1:faaf464:                 {"e e e e e e e e",},
1:faaf464:                 {"e e e e e e e e",},
1:faaf464:                 {"e e e e e e e e",},
1:faaf464:                 {"e e e e e e e e",},
1:faaf464:                 {"e e e e e e e e",},
1:faaf464:                 {"e e e e e e e e",},                        
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a, c, e from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:faaf464:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},                        
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select b, e from testing");        
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:faaf464:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:faaf464:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:faaf464:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:faaf464:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:faaf464:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:faaf464:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:faaf464:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:faaf464:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:faaf464:                 {"b b b b b b b b b b", "e e e e e e e e"},                        
1:faaf464:         });
1:faaf464:         
1:faaf464:         
1:faaf464:         st.execute("update testing set a = PADSTRING('1 1 1 1 1 1 1 1 1 1', 64768)");
1:faaf464:         st.execute("update testing set e = PADSTRING('9 9 9 9 9 9 9 9 9 9',64768)");
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a, e from testing");
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},                        
1:faaf464:         });
1:faaf464:         
1:faaf464:         rs = st.executeQuery("select a, c, b, e from testing");
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:faaf464:                     "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:faaf464:                     "9 9 9 9 9 9 9 9 9 9"},                    
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:faaf464:                     "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:faaf464:                     "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:faaf464:                     "9 9 9 9 9 9 9 9 9 9"},                    
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:faaf464:                     "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:faaf464:                     "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:faaf464:                     "9 9 9 9 9 9 9 9 9 9"},                    
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:faaf464:                     "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:faaf464:                     "9 9 9 9 9 9 9 9 9 9"},
1:faaf464:         });
1:faaf464: 
1:faaf464:         rs = st.executeQuery("select e from testing");
1:faaf464:         JDBC.assertFullResultSet(rs, new String[][]{
1:faaf464:                 {"9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"9 9 9 9 9 9 9 9 9 9"},
1:faaf464:                 {"9 9 9 9 9 9 9 9 9 9"},                        
1:faaf464:         });
1:faaf464:         
1:faaf464:         st.close();
1:faaf464:     }
1:faaf464: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("LongColumnTest");
/////////////////////////////////////////////////////////////////////////
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4862eff
/////////////////////////////////////////////////////////////////////////
1:     public void tearDown() throws Exception {
1:         super.tearDown();
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:faaf464
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.checkPoint
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class LongColumnTest extends BaseJDBCTestCase {
1: 
1:     public LongColumnTest(String name) {
1:         super(name);
1:     }
1:     
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("LongColumnTest");
1:         suite.addTest(TestConfiguration.defaultSuite(LongColumnTest.class));
1: 
1:         return suite;
1:     }
1: 
1:     protected void setUp() {
1:         try {
1:             Statement s = createStatement();
1:             s.execute("CREATE FUNCTION  PADSTRING (DATA VARCHAR(32000), "
1:                     + "LENGTH INTEGER) RETURNS VARCHAR(32000) EXTERNAL NAME "
1:                     + "'org.apache.derbyTesting.functionTests.util.Formatters"
1:                     + ".padString' LANGUAGE JAVA PARAMETER STYLE JAVA");
1:             s.execute("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY"
1:                     + "('derby.storage.pageSize', '4096')");
1:             s.execute("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY"
1:                     + "('derby.storage.pageCacheSize', '40')");
1:             s.close();
1:         } catch (SQLException se) {
1:             se.printStackTrace();
1:         }
1:         
1:         try {
1:             dropTable("testing");
1:         } catch (SQLException e) {
1:             //ignore
1:         }
1:     }
1: 
0:     public void tearDown() throws SQLException {
1:         Statement st = createStatement();
1:         st.executeUpdate("DROP FUNCTION PADSTRING");
1:         st.close();
1:         dropTable("testing");
1:     }
1: 
1:     /**
1:      * test 1: one long column
1:      */
1:     public void testOneLongColumn() throws SQLException {
1:         Statement st = createStatement();
1:         
1:         st.execute("create table testing (a varchar(8096))");
1:         st.execute("insert into testing values (PADSTRING('1 2 3 4 5 6 7 8 9 0', 8096))");
1:         st.execute("insert into testing values (PADSTRING('a b c d e f g h i j', 8096))");
1:         st.execute("insert into testing values (PADSTRING('11 22 33 44 55 66 77', 8096))");
1:         st.execute("insert into testing values (PADSTRING('aa bb cc dd ee ff gg', 8096))");
1:         
1:         ResultSet rs = st.executeQuery("select a from testing");  
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 2 3 4 5 6 7 8 9 0"},
1:                 {"a b c d e f g h i j"},
1:                 {"11 22 33 44 55 66 77"},
1:                 {"aa bb cc dd ee ff gg"}
1:         });
1:         
1:         st.close();
1:     }
1: 
1:     /**
1:      * test 2: testing two column (1 short, 1 long) table
1:      */
1:     public void testTwoColumnsShortAndLong() throws SQLException {
1:         Statement st = createStatement();
1:         
1:         st.execute("create table testing (a int, b varchar(32384))");
1:         st.execute("insert into testing values (1, PADSTRING('1 2 3 4 5 6 7 8 9 0', 32384))");
1:         st.execute("insert into testing values (2, PADSTRING('a b c d e f g h i j', 32384))");
1:         st.execute("insert into testing values (3, PADSTRING('11 22 33 44 55 66 77', 32384))");
1:         st.execute("insert into testing values (4, PADSTRING('aa bb cc dd ee ff gg', 32384))");
1:         
1:         ResultSet rs = st.executeQuery("select * from testing");
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1", "1 2 3 4 5 6 7 8 9 0"},
1:                 {"2", "a b c d e f g h i j"},
1:                 {"3", "11 22 33 44 55 66 77"},
1:                 {"4", "aa bb cc dd ee ff gg"}
1:         });
1:         
1:         rs = st.executeQuery("select a from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1"},
1:                 {"2"},
1:                 {"3"},
1:                 {"4"}
1:         });
1:         
1:         rs = st.executeQuery("select b from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 2 3 4 5 6 7 8 9 0"},
1:                 {"a b c d e f g h i j"},
1:                 {"11 22 33 44 55 66 77"},
1:                 {"aa bb cc dd ee ff gg"}
1:         });
1:         
1:         rs = st.executeQuery("select b from testing where a = 1");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 2 3 4 5 6 7 8 9 0"},
1:         });
1:         
1:         st.close();        
1:     }
1:     
1:     /**
1:      * test 3: testing two column (1 long, 1 shor) table
1:      */
1:     public void testTwoColumnsLongAndShort() throws SQLException {
1:         Statement st = createStatement();
1:         
1:         st.execute("create table testing (a varchar(32384), b int)");
1:         st.execute("insert into testing values (PADSTRING('1 2 3 4 5 6 7 8 9 0', 32384), 1)");
1:         st.execute("insert into testing values (PADSTRING('a b c d e f g h i j', 32384), 2)");
1:         st.execute("insert into testing values (PADSTRING('11 22 33 44 55 66 77', 32384), 3)");
1:         st.execute("insert into testing values (PADSTRING('aa bb cc dd ee ff gg', 32384), 4)");
1:         
1:         ResultSet rs = st.executeQuery("select * from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 2 3 4 5 6 7 8 9 0", "1"},
1:                 {"a b c d e f g h i j", "2"},
1:                 {"11 22 33 44 55 66 77", "3"},
1:                 {"aa bb cc dd ee ff gg", "4"}
1:         });
1:         
1:         rs = st.executeQuery("select a from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 2 3 4 5 6 7 8 9 0"},
1:                 {"a b c d e f g h i j"},
1:                 {"11 22 33 44 55 66 77"},
1:                 {"aa bb cc dd ee ff gg"}
1:         });
1:         
1:         rs = st.executeQuery("select b from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1"},
1:                 {"2"},
1:                 {"3"},
1:                 {"4"}
1:         });
1:         
1:         rs = st.executeQuery("select a from testing where b = 4");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"aa bb cc dd ee ff gg"}
1:         });
1:         
1:         st.close();        
1:     }
1: 
1:     /**
1:      * test 4: testing three column (1 short, 1 long, 1 short) table
1:      */
1:     public void testThreeColumnsShortAndLongAndShort() throws SQLException {
1:         Statement st = createStatement();
1:         
1:         st.execute("create table testing (z int, a varchar(32384), b int)");
1:         st.execute("insert into testing values (0, PADSTRING('1 2 3 4 5 6 7 8 9 0',32384), 1)");
1:         st.execute("insert into testing values (1, PADSTRING('a b c d e f g h i j',32384), 2)");
1:         st.execute("insert into testing values (2, PADSTRING('11 22 33 44 55 66 77',32384), 3)");
1:         st.execute("insert into testing values (4, PADSTRING('aa bb cc dd ee ff gg',32384), 4)");
1:         
1:         ResultSet rs = st.executeQuery("select * from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"0", "1 2 3 4 5 6 7 8 9 0", "1"},
1:                 {"1", "a b c d e f g h i j", "2"},
1:                 {"2", "11 22 33 44 55 66 77", "3"},
1:                 {"4", "aa bb cc dd ee ff gg", "4"}
1:         });
1:         
1:         rs = st.executeQuery("select a from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 2 3 4 5 6 7 8 9 0"},
1:                 {"a b c d e f g h i j"},
1:                 {"11 22 33 44 55 66 77"},
1:                 {"aa bb cc dd ee ff gg"}      
1:         });
1:         
1:         rs = st.executeQuery("select b from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1"},
1:                 {"2"},
1:                 {"3"},
1:                 {"4"},
1:         });
1:         
1:         rs = st.executeQuery("select z from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"0"},
1:                 {"1"},
1:                 {"2"},
1:                 {"4"},
1:         });
1:         
1:         rs = st.executeQuery("select b from testing where z = b");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"4"}
1:         });
1:         
1:         
1:         try {
1:             st.executeUpdate("create index zz on testing (a)");
1:             fail("try creating btree index on long column, should fail");
1:         } catch (SQLException e) {
1:             assertSQLState("XSCB6", e);
1:         }
1:         
1:         st.execute("update testing set a = PADSTRING('update once', 32384)");
1:         st.execute("update testing set a = PADSTRING('update twice', 32384)");
1:         st.execute("update testing set a = PADSTRING('update three times', 32384)");
1:         st.execute("update testing set a = PADSTRING('update four times', 32384)");
1:         st.execute("update testing set a = PADSTRING('update five times', 32384)");
1:                 
1:         rs = st.executeQuery("select a from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"update five times"},
1:                 {"update five times"},
1:                 {"update five times"},
1:                 {"update five times"}
1:         });
1:         
1:         st.close();        
1:     }
1:  
1:     /**
1:      * test 5: testing three columns (1 long, 1 short, 1 long) table
1:      */
1:     public void testThreeColumnsLongAndShortAndLong() throws SQLException {
1:         Statement st = createStatement();
1:         
1:         st.execute("create table testing (a varchar(32384), b int, c varchar(32084))");
1:         st.execute("insert into testing values (PADSTRING('1 2 3 4 5 6 7 8 9 0',32384),"
1:                 + " 1, PADSTRING('1 2 3 4 5 6 7 8 9 0',32084))");
1:         st.execute("insert into testing values (PADSTRING('a b c d e f g h i j',32384),"
1:                 + " 2, PADSTRING('a b c d e f g h i j',32084))");
1:         st.execute("insert into testing values (PADSTRING('11 22 33 44 55 66 77',32384),"
1:                 + " 3, PADSTRING('11 22 33 44 55 66 77',32084))");
1:         st.execute("insert into testing values (PADSTRING('aa bb cc dd ee ff gg',32384),"
1:                 + " 4, PADSTRING('aa bb cc dd ee ff gg',32084))");
1:         
1:         ResultSet rs = st.executeQuery("select * from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 2 3 4 5 6 7 8 9 0", "1", "1 2 3 4 5 6 7 8 9 0"},
1:                 {"a b c d e f g h i j", "2", "a b c d e f g h i j"},
1:                 {"11 22 33 44 55 66 77", "3", "11 22 33 44 55 66 77"},
1:                 {"aa bb cc dd ee ff gg", "4", "aa bb cc dd ee ff gg"}
1:         });
1:         
1:         rs = st.executeQuery("select a from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 2 3 4 5 6 7 8 9 0",},
1:                 {"a b c d e f g h i j",},
1:                 {"11 22 33 44 55 66 77",},
1:                 {"aa bb cc dd ee ff gg",}
1:         });
1:         
1:         rs = st.executeQuery("select b from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1"},
1:                 {"2"},
1:                 {"3"},
1:                 {"4"},
1:         });
1:         
1:         rs = st.executeQuery("select c from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 2 3 4 5 6 7 8 9 0"},
1:                 {"a b c d e f g h i j"},
1:                 {"11 22 33 44 55 66 77"},
1:                 {"aa bb cc dd ee ff gg"}
1:         });
1:         
1:         rs = st.executeQuery("select * from testing where b = 4");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"aa bb cc dd ee ff gg", "4", "aa bb cc dd ee ff gg"}
1:         });
1:         
1:         try {
1:             st.executeUpdate("create index zz on testing (a)");
1:             fail("try creating btree index, should fail on long columns");
1:         } catch (SQLException e) {
1:             assertSQLState("XSCB6", e);
1:         }
1:         
1:         try {
1:             st.executeUpdate("create index zz on testing (c)");
1:             fail("try creating btree index, should fail on long columns");
1:         } catch (SQLException e) {
1:             assertSQLState("XSCB6", e);
1:         }
1:         
1:         st.executeUpdate("create index zz on testing (b)");
1:         
1:         
1:         st.execute("update testing set c = PADSTRING('update 0', 32084)");
1:         st.execute("update testing set c = PADSTRING('update 1', 32084)");
1:         st.execute("update testing set c = PADSTRING('update 2', 32084)");
1:         st.execute("update testing set c = PADSTRING('update 3', 32084)");
1:         st.execute("update testing set c = PADSTRING('update 4', 32084)");
1:         st.execute("update testing set c = PADSTRING('update 5', 32084)");
1:         st.execute("update testing set c = PADSTRING('update 6', 32084)");
1:         st.execute("update testing set c = PADSTRING('update 7', 32084)");
1:         st.execute("update testing set c = PADSTRING('update 8', 32084)");
1:         st.execute("update testing set c = PADSTRING('update 9', 32084)");
1:         
1:         rs = st.executeQuery("select * from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 2 3 4 5 6 7 8 9 0", "1", "update 9"},
1:                 {"a b c d e f g h i j", "2", "update 9"},
1:                 {"11 22 33 44 55 66 77", "3", "update 9"},
1:                 {"aa bb cc dd ee ff gg", "4", "update 9"}
1:         });
1:         
1:         st.close();        
1:     }
1:     
1:     /**
1:      * test 6: table with 5 columns (1 short, 1 long, 1 short, 1 long, 1 short) table
1:      */
1:     public void testFiveColumnsSLSLS() throws SQLException {
1:         Statement st = createStatement();
1:         
1:         st.execute("create table testing (a int, b clob(64768), c int, d varchar(32384), e int)");
1:         st.execute("insert into testing values (0, PADSTRING('1 2 3 4 5 6 7 8 9 0', 64768),"
1:                 + "  1, PADSTRING('1 2 3 4 5 6 7 8 9 0', 32384),  2)");
1:         st.execute("insert into testing values (1, PADSTRING('a b c d e f g h i j', 64768),"
1:                 + "  2, PADSTRING('a b c d e f g h i j', 32384),  3)");
1:         st.execute("insert into testing values (2, PADSTRING('11 22 33 44 55 66 77', 64768),"
1:                 + " 3, PADSTRING('11 22 33 44 55 66 77', 32384), 4)");
1:         st.execute("insert into testing values (3, PADSTRING('aa bb cc dd ee ff gg', 64768),"
1:                 + " 4, PADSTRING('aa bb cc dd ee ff gg',32384), 5)");
1:         st.execute("insert into testing values (4, PADSTRING('1 2 3 4 5 6 7 8 9 0', 64768),"
1:                 + "  5, PADSTRING('aa bb cc dd ee ff gg',32384), 6)");
1:         st.execute("insert into testing values (5, PADSTRING('a b c d e f g h i j', 64768),"
1:                 + "  6, PADSTRING('aa bb cc dd ee ff gg',32384), 7)");
1:         st.execute("insert into testing values (6, PADSTRING('11 22 33 44 55 66 77', 64768),"
1:                 + " 7, PADSTRING('aa bb cc dd ee ff gg',32384), 8)");
1:         st.execute("insert into testing values (7, PADSTRING('aa bb cc dd ee ff gg', 64768),"
1:                 + " 8, PADSTRING('aa bb cc dd ee ff gg',32384), 9)");
1:         
1:         ResultSet rs = st.executeQuery("select * from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"0", "1 2 3 4 5 6 7 8 9 0", "1", "1 2 3 4 5 6 7 8 9 0", "2"},
1:                 {"1", "a b c d e f g h i j", "2", "a b c d e f g h i j", "3"},
1:                 {"2", "11 22 33 44 55 66 77", "3", "11 22 33 44 55 66 77", "4"},
1:                 {"3", "aa bb cc dd ee ff gg", "4", "aa bb cc dd ee ff gg", "5"},
1:                 {"4", "1 2 3 4 5 6 7 8 9 0", "5", "aa bb cc dd ee ff gg", "6"},
1:                 {"5", "a b c d e f g h i j", "6", "aa bb cc dd ee ff gg", "7"},
1:                 {"6", "11 22 33 44 55 66 77", "7", "aa bb cc dd ee ff gg", "8"},
1:                 {"7", "aa bb cc dd ee ff gg", "8", "aa bb cc dd ee ff gg", "9"}
1:         });
1:         
1:         rs = st.executeQuery("select a from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"0"},
1:                 {"1"},
1:                 {"2"},
1:                 {"3"},
1:                 {"4"},
1:                 {"5"},
1:                 {"6"},
1:                 {"7"},
1:         });
1:         
1:         
1:         rs = st.executeQuery("select b from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 2 3 4 5 6 7 8 9 0"},
1:                 {"a b c d e f g h i j"},
1:                 {"11 22 33 44 55 66 77"},
1:                 {"aa bb cc dd ee ff gg"},
1:                 {"1 2 3 4 5 6 7 8 9 0"},
1:                 {"a b c d e f g h i j"},
1:                 {"11 22 33 44 55 66 77"},
1:                 {"aa bb cc dd ee ff gg"}
1:         });
1:         
1:         rs = st.executeQuery("select a, c, d from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"0", "1", "1 2 3 4 5 6 7 8 9 0"},
1:                 {"1", "2", "a b c d e f g h i j"},
1:                 {"2", "3", "11 22 33 44 55 66 77"},
1:                 {"3", "4", "aa bb cc dd ee ff gg"},
1:                 {"4", "5", "aa bb cc dd ee ff gg"},
1:                 {"5", "6", "aa bb cc dd ee ff gg"},
1:                 {"6", "7", "aa bb cc dd ee ff gg"},
1:                 {"7", "8", "aa bb cc dd ee ff gg"}
1:         });
1: 
1:         
1:         st.execute("update testing set b = PADSTRING('update 0', 64768)");
1:         st.execute("update testing set b = PADSTRING('update 1', 64768)");
1:         st.execute("update testing set b = PADSTRING('update 2', 64768)");
1:         st.execute("update testing set b = PADSTRING('update 3', 64768)");
1:         st.execute("update testing set b = PADSTRING('update 4', 64768)");
1:         st.execute("update testing set b = PADSTRING('update 5', 64768)");
1:         st.execute("update testing set b = PADSTRING('update 6', 64768)");
1:         st.execute("update testing set b = PADSTRING('update 7', 64768)");
1:         st.execute("update testing set b = PADSTRING('update 8', 64768)");
1:         st.execute("update testing set b = PADSTRING('update 9', 64768)");
1:         
1:         rs = st.executeQuery("select b from testing");
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"update 9"},
1:                 {"update 9"},
1:                 {"update 9"},
1:                 {"update 9"},
1:                 {"update 9"},
1:                 {"update 9"},
1:                 {"update 9"},
1:                 {"update 9"},
1:         });
1:         
1:         rs = st.executeQuery("select a, b, e from testing");
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"0", "update 9", "2"},
1:                 {"1", "update 9", "3"},
1:                 {"2", "update 9", "4"},
1:                 {"3", "update 9", "5"},
1:                 {"4", "update 9", "6"},
1:                 {"5", "update 9", "7"},
1:                 {"6", "update 9", "8"},
1:                 {"7", "update 9", "9"}
1:         });
1:         
1:         st.close();
1:     }
1: 
1:     /**
1:      * test 7: table with 5 columns, all long columns
1:      */
1:     public void testFiveColumnsAllLong() throws SQLException {
1:         Statement st = createStatement();
1:         
1:         st.execute("create table testing"
1:                 + " (a clob(64768), b varchar(32384), c clob(64768), d varchar(32384), e clob(64768))");
1:         
1:         for (int i = 0; i < 10; i++) {
1:             st.execute("insert into testing values (PADSTRING('a a a a a a a a a a',64768),"
1:                     + " PADSTRING('b b b b b b b b b b',32384), PADSTRING('c c c c c c c c c c',64768),"
1:                     + " PADSTRING('d d d d d d d d d d', 32384), PADSTRING('e e e e e e e e',64768))");
1:         }
1:         
1:         ResultSet rs = st.executeQuery("select * from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:                     "d d d d d d d d d d", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:                     "d d d d d d d d d d", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:                     "d d d d d d d d d d", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:                     "d d d d d d d d d d", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:                     "d d d d d d d d d d", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:                     "d d d d d d d d d d", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:                     "d d d d d d d d d d", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:                     "d d d d d d d d d d", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:                     "d d d d d d d d d d", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "b b b b b b b b b b", "c c c c c c c c c c", 
1:                     "d d d d d d d d d d", "e e e e e e e e"},                        
1:         });
1:         
1:         rs = st.executeQuery("select a from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"a a a a a a a a a a",},
1:                 {"a a a a a a a a a a",},
1:                 {"a a a a a a a a a a",},
1:                 {"a a a a a a a a a a",},
1:                 {"a a a a a a a a a a",},
1:                 {"a a a a a a a a a a",},
1:                 {"a a a a a a a a a a",},
1:                 {"a a a a a a a a a a",},
1:                 {"a a a a a a a a a a",},
1:                 {"a a a a a a a a a a",},                        
1:         });
1:         
1:         rs = st.executeQuery("select b from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"b b b b b b b b b b",},
1:                 {"b b b b b b b b b b",},
1:                 {"b b b b b b b b b b",},
1:                 {"b b b b b b b b b b",},
1:                 {"b b b b b b b b b b",},
1:                 {"b b b b b b b b b b",},
1:                 {"b b b b b b b b b b",},
1:                 {"b b b b b b b b b b",},
1:                 {"b b b b b b b b b b",},
1:                 {"b b b b b b b b b b",},                        
1:         });
1:         
1:         rs = st.executeQuery("select c from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"c c c c c c c c c c",},
1:                 {"c c c c c c c c c c",},
1:                 {"c c c c c c c c c c",},
1:                 {"c c c c c c c c c c",},
1:                 {"c c c c c c c c c c",},
1:                 {"c c c c c c c c c c",},
1:                 {"c c c c c c c c c c",},
1:                 {"c c c c c c c c c c",},
1:                 {"c c c c c c c c c c",},
1:                 {"c c c c c c c c c c",},                        
1:         });
1:         
1:         rs = st.executeQuery("select d from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"d d d d d d d d d d",},
1:                 {"d d d d d d d d d d",},
1:                 {"d d d d d d d d d d",},
1:                 {"d d d d d d d d d d",},
1:                 {"d d d d d d d d d d",},
1:                 {"d d d d d d d d d d",},
1:                 {"d d d d d d d d d d",},
1:                 {"d d d d d d d d d d",},
1:                 {"d d d d d d d d d d",},
1:                 {"d d d d d d d d d d",},                        
1:         });
1:         
1:         rs = st.executeQuery("select e from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"e e e e e e e e",},
1:                 {"e e e e e e e e",},
1:                 {"e e e e e e e e",},
1:                 {"e e e e e e e e",},
1:                 {"e e e e e e e e",},
1:                 {"e e e e e e e e",},
1:                 {"e e e e e e e e",},
1:                 {"e e e e e e e e",},
1:                 {"e e e e e e e e",},
1:                 {"e e e e e e e e",},                        
1:         });
1:         
1:         rs = st.executeQuery("select a, c, e from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},
1:                 {"a a a a a a a a a a", "c c c c c c c c c c", "e e e e e e e e"},                        
1:         });
1:         
1:         rs = st.executeQuery("select b, e from testing");        
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:                 {"b b b b b b b b b b", "e e e e e e e e"},
1:                 {"b b b b b b b b b b", "e e e e e e e e"},                        
1:         });
1:         
1:         
1:         st.execute("update testing set a = PADSTRING('1 1 1 1 1 1 1 1 1 1', 64768)");
1:         st.execute("update testing set e = PADSTRING('9 9 9 9 9 9 9 9 9 9',64768)");
1:         
1:         rs = st.executeQuery("select a, e from testing");
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9 9"},                        
1:         });
1:         
1:         rs = st.executeQuery("select a, c, b, e from testing");
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:                     "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:                     "9 9 9 9 9 9 9 9 9 9"},                    
1:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:                     "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:                     "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:                     "9 9 9 9 9 9 9 9 9 9"},                    
1:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:                     "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:                     "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:                     "9 9 9 9 9 9 9 9 9 9"},                    
1:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:                     "9 9 9 9 9 9 9 9 9 9"},
1:                 {"1 1 1 1 1 1 1 1 1 1", "c c c c c c c c c c", "b b b b b b b b b b",
1:                     "9 9 9 9 9 9 9 9 9 9"},
1:         });
1: 
1:         rs = st.executeQuery("select e from testing");
1:         JDBC.assertFullResultSet(rs, new String[][]{
1:                 {"9 9 9 9 9 9 9 9 9 9"},
1:                 {"9 9 9 9 9 9 9 9 9 9"},
1:                 {"9 9 9 9 9 9 9 9 9 9"},
1:                 {"9 9 9 9 9 9 9 9 9 9"},
1:                 {"9 9 9 9 9 9 9 9 9 9"},
1:                 {"9 9 9 9 9 9 9 9 9 9"},
1:                 {"9 9 9 9 9 9 9 9 9 9"},
1:                 {"9 9 9 9 9 9 9 9 9 9"},
1:                 {"9 9 9 9 9 9 9 9 9 9"},
1:                 {"9 9 9 9 9 9 9 9 9 9"},                        
1:         });
1:         
1:         st.close();
1:     }
1: }
============================================================================