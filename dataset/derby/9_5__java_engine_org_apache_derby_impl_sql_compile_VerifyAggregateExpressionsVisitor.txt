1:eac0369: /*
4:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.sql.compile.Visitable; 
1:eac0369: import org.apache.derby.iapi.sql.compile.Visitor;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * If a RCL (SELECT list) contains an aggregate, then we must verify
1:eac0369:  * that the RCL (SELECT list) is valid.  
1:eac0369:  * For ungrouped queries,
1:eac0369:  * the RCL must be composed entirely of valid aggregate expressions -
1:eac0369:  * in this case, no column references outside of an aggregate.
1:eac0369:  * For grouped aggregates,
1:eac0369:  * the RCL must be composed of grouping columns or valid aggregate
1:eac0369:  * expressions - in this case, the only column references allowed outside of
1:eac0369:  * an aggregate are grouping columns.
1:eac0369:  *
1:eac0369:  */
1:3bb140c: class VerifyAggregateExpressionsVisitor implements Visitor
2:eac0369: {
1:eac0369: 	private GroupByList groupByList;
1:eac0369: 
1:3bb140c:     VerifyAggregateExpressionsVisitor(GroupByList groupByList)
1:eac0369: 	{
1:eac0369: 		this.groupByList = groupByList;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// VISITOR INTERFACE
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Verify that this expression is ok
1:eac0369: 	 * for an aggregate query.  
1:eac0369: 	 *
1:eac0369: 	 * @param node 	the node to process
1:eac0369: 	 *
1:eac0369: 	 * @return me
1:eac0369: 	 *
1:01217c2: 	 * @exception StandardException on ColumnReference not
1:01217c2: 	 * 	in group by list, ValueNode or	
1:eac0369: 	 * 	JavaValueNode that isn't under an
1:eac0369: 	 * 	aggregate
1:eac0369: 	 */
1:eac0369: 	public Visitable visit(Visitable node)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (node instanceof ColumnReference)
1:eac0369: 		{
1:eac0369: 			ColumnReference cr = (ColumnReference)node;
1:eac0369: 		
1:eac0369: 			if (groupByList == null)
1:eac0369: 			{
1:f1d4e9d: 				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_NON_GROUPED_SELECT_LIST, cr.getSQLColumnName());
1:eac0369: 			}
1:eac0369: 
1:01217c2: 			if (groupByList.findGroupingColumn(cr) == null)
1:eac0369: 			{
1:f2220fd: 				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_GROUPED_SELECT_LIST, cr.getSQLColumnName());
1:eac0369: 			}
1:eac0369: 		} 
1:01217c2: 		
1:eac0369: 		/*
1:eac0369: 		** Subqueries are only valid if they do not have
1:eac0369: 		** correlations and are expression subqueries.  RESOLVE:
1:eac0369: 		** this permits VARIANT expressions in the subquery --
1:eac0369: 		** should this be allowed?  may be confusing to
1:eac0369: 		** users to complain about:
1:eac0369: 		**
1:eac0369: 		**	select max(x), (select sum(y).toString() from y) from x
1:eac0369: 		*/
1:eac0369: 		else if (node instanceof SubqueryNode)
1:eac0369: 		{
1:eac0369: 			SubqueryNode subq = (SubqueryNode)node;
1:eac0369: 		
1:eac0369: 			if ((subq.getSubqueryType() != SubqueryNode.EXPRESSION_SUBQUERY) ||
1:eac0369: 				 subq.hasCorrelatedCRs())
1:eac0369: 			{
2:eac0369: 				throw StandardException.newException( (groupByList == null) ?
2:eac0369: 							SQLState.LANG_INVALID_NON_GROUPED_SELECT_LIST :
2:eac0369: 							SQLState.LANG_INVALID_GROUPED_SELECT_LIST);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** TEMPORARY RESTRICTION: we cannot handle an aggregate
1:eac0369: 			** in the subquery 
1:eac0369: 			*/
1:eac0369: 			HasNodeVisitor visitor = new HasNodeVisitor(AggregateNode.class);
1:eac0369: 			subq.accept(visitor);
1:eac0369: 			if (visitor.hasNode())
1:01217c2: 			{	
1:01217c2: 				throw StandardException.newException( (groupByList == null) ?
1:01217c2: 							SQLState.LANG_INVALID_NON_GROUPED_SELECT_LIST :
1:01217c2: 							SQLState.LANG_INVALID_GROUPED_SELECT_LIST);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return node;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:01217c2: 	 * Don't visit children under an aggregate, subquery or any node which
1:01217c2: 	 * is equivalent to any of the group by expressions.
1:eac0369: 	 *
1:eac0369: 	 * @param node 	the node to process
1:eac0369: 	 *
1:eac0369: 	 * @return true/false
1:01217c2: 	 * @throws StandardException 
1:eac0369: 	 */
1:01217c2: 	public boolean skipChildren(Visitable node) throws StandardException 
1:eac0369: 	{
1:01217c2: 		return ((node instanceof AggregateNode) ||
1:01217c2: 				(node instanceof SubqueryNode) ||
1:01217c2: 				(node instanceof ValueNode &&
1:01217c2: 						groupByList != null 
1:01217c2: 						&& groupByList.findGroupingColumn((ValueNode)node) != null));
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	public boolean stopTraversal()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:dd2f5a8: 
1:dd2f5a8: 	public boolean visitChildrenFirst(Visitable node)
1:dd2f5a8: 	{
1:dd2f5a8: 		return false;
1:dd2f5a8: 	}
1:eac0369: }	
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1: class VerifyAggregateExpressionsVisitor implements Visitor
1:     VerifyAggregateExpressionsVisitor(GroupByList groupByList)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 
1: 	public boolean visitChildrenFirst(Visitable node)
1: 	{
1: 		return false;
1: 	}
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:f2220fd
/////////////////////////////////////////////////////////////////////////
1: 				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_GROUPED_SELECT_LIST, cr.getSQLColumnName());
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:96e7da9
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException on ColumnReference not
1: 	 * 	in group by list, ValueNode or	
/////////////////////////////////////////////////////////////////////////
1: 			if (groupByList.findGroupingColumn(cr) == null)
0: 				throw StandardException.newException(SQLState.LANG_INVALID_GROUPED_SELECT_LIST);
1: 		
/////////////////////////////////////////////////////////////////////////
0: 		} else if (node instanceof JavaToSQLValueNode) 
1: 		{
0: 			// disallow any expression which involves native java computation. 
0: 		    	// Not possible to consider java expressions for equivalence.
1: 			throw StandardException.newException( (groupByList == null) ?
1: 					SQLState.LANG_INVALID_NON_GROUPED_SELECT_LIST :
1: 						SQLState.LANG_INVALID_GROUPED_SELECT_LIST);
1: 	 * Don't visit children under an aggregate, subquery or any node which
1: 	 * is equivalent to any of the group by expressions.
1: 	 * @throws StandardException 
1: 	public boolean skipChildren(Visitable node) throws StandardException 
1: 		return ((node instanceof AggregateNode) ||
1: 				(node instanceof SubqueryNode) ||
1: 				(node instanceof ValueNode &&
1: 						groupByList != null 
1: 						&& groupByList.findGroupingColumn((ValueNode)node) != null));
commit:f1d4e9d
/////////////////////////////////////////////////////////////////////////
1: 				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_NON_GROUPED_SELECT_LIST, cr.getSQLColumnName());
0: 				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_GROUPED_SELECT_LIST, cr.getSQLColumnName());
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.compile.Visitable; 
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * If a RCL (SELECT list) contains an aggregate, then we must verify
1:  * that the RCL (SELECT list) is valid.  
1:  * For ungrouped queries,
1:  * the RCL must be composed entirely of valid aggregate expressions -
1:  * in this case, no column references outside of an aggregate.
1:  * For grouped aggregates,
1:  * the RCL must be composed of grouping columns or valid aggregate
1:  * expressions - in this case, the only column references allowed outside of
1:  * an aggregate are grouping columns.
1:  *
0:  * @author jamie, from code written by jerry
1:  */
0: public class VerifyAggregateExpressionsVisitor implements Visitor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private GroupByList groupByList;
1: 
0: 	public VerifyAggregateExpressionsVisitor(GroupByList groupByList)
1: 	{
1: 		this.groupByList = groupByList;
1: 	}
1: 
1: 
1: 	////////////////////////////////////////////////
1: 	//
1: 	// VISITOR INTERFACE
1: 	//
1: 	////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Verify that this expression is ok
1: 	 * for an aggregate query.  
1: 	 *
1: 	 * @param node 	the node to process
1: 	 *
1: 	 * @return me
1: 	 *
0: 	 * @exception StandardException on ColumnReferernce not
0: 	 *	in group by list, ValueNode or 
1: 	 * 	JavaValueNode that isn't under an
1: 	 * 	aggregate
1: 	 */
1: 	public Visitable visit(Visitable node)
1: 		throws StandardException
1: 	{
1: 		if (node instanceof ColumnReference)
1: 		{
1: 			ColumnReference cr = (ColumnReference)node;
1: 		
1: 			if (groupByList == null)
1: 			{
0: 				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_NON_GROUPED_SELECT_LIST, cr.getFullColumnName());
1: 			}
1: 
0: 			if (groupByList.containsColumnReference(cr) == null)
1: 			{
0: 				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_GROUPED_SELECT_LIST, cr.getFullColumnName());
1: 			}
1: 		} 
1: 		/*
1: 		** Subqueries are only valid if they do not have
1: 		** correlations and are expression subqueries.  RESOLVE:
1: 		** this permits VARIANT expressions in the subquery --
1: 		** should this be allowed?  may be confusing to
1: 		** users to complain about:
1: 		**
1: 		**	select max(x), (select sum(y).toString() from y) from x
1: 		*/
1: 		else if (node instanceof SubqueryNode)
1: 		{
1: 			SubqueryNode subq = (SubqueryNode)node;
1: 		
1: 			if ((subq.getSubqueryType() != SubqueryNode.EXPRESSION_SUBQUERY) ||
1: 				 subq.hasCorrelatedCRs())
1: 			{
1: 				throw StandardException.newException( (groupByList == null) ?
1: 							SQLState.LANG_INVALID_NON_GROUPED_SELECT_LIST :
1: 							SQLState.LANG_INVALID_GROUPED_SELECT_LIST);
1: 			}
1: 
1: 			/*
1: 			** TEMPORARY RESTRICTION: we cannot handle an aggregate
1: 			** in the subquery 
1: 			*/
1: 			HasNodeVisitor visitor = new HasNodeVisitor(AggregateNode.class);
1: 			subq.accept(visitor);
1: 			if (visitor.hasNode())
1: 			{	
1: 				throw StandardException.newException( (groupByList == null) ?
1: 							SQLState.LANG_INVALID_NON_GROUPED_SELECT_LIST :
1: 							SQLState.LANG_INVALID_GROUPED_SELECT_LIST);
1: 			}
1: 		}
1: 
1: 		return node;
1: 	}
1: 
1: 	/**
0: 	 * Don't visit children under an aggregate
1: 	 *
1: 	 * @param node 	the node to process
1: 	 *
1: 	 * @return true/false
1: 	 */
0: 	public boolean skipChildren(Visitable node)
1: 	{
0: 		return (node instanceof AggregateNode) ||
0: 				(node instanceof SubqueryNode);
1: 	}
1: 	
1: 	public boolean stopTraversal()
1: 	{
1: 		return false;
1: 	}
1: }	
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.Visitable; 
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * If a RCL (SELECT list) contains an aggregate, then we must verify
0:  * that the RCL (SELECT list) is valid.  
0:  * For ungrouped queries,
0:  * the RCL must be composed entirely of valid aggregate expressions -
0:  * in this case, no column references outside of an aggregate.
0:  * For grouped aggregates,
0:  * the RCL must be composed of grouping columns or valid aggregate
0:  * expressions - in this case, the only column references allowed outside of
0:  * an aggregate are grouping columns.
0:  *
0:  * @author jamie, from code written by jerry
0:  */
0: public class VerifyAggregateExpressionsVisitor implements Visitor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private GroupByList groupByList;
0: 
0: 	public VerifyAggregateExpressionsVisitor(GroupByList groupByList)
0: 	{
0: 		this.groupByList = groupByList;
0: 	}
0: 
0: 
0: 	////////////////////////////////////////////////
0: 	//
0: 	// VISITOR INTERFACE
0: 	//
0: 	////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Verify that this expression is ok
0: 	 * for an aggregate query.  
0: 	 *
0: 	 * @param node 	the node to process
0: 	 *
0: 	 * @return me
0: 	 *
0: 	 * @exception StandardException on ColumnReferernce not
0: 	 *	in group by list, ValueNode or 
0: 	 * 	JavaValueNode that isn't under an
0: 	 * 	aggregate
0: 	 */
0: 	public Visitable visit(Visitable node)
0: 		throws StandardException
0: 	{
0: 		if (node instanceof ColumnReference)
0: 		{
0: 			ColumnReference cr = (ColumnReference)node;
0: 		
0: 			if (groupByList == null)
0: 			{
0: 				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_NON_GROUPED_SELECT_LIST, cr.getFullColumnName());
0: 			}
0: 
0: 			if (groupByList.containsColumnReference(cr) == null)
0: 			{
0: 				throw StandardException.newException(SQLState.LANG_INVALID_COL_REF_GROUPED_SELECT_LIST, cr.getFullColumnName());
0: 			}
0: 		} 
0: 		/*
0: 		** Subqueries are only valid if they do not have
0: 		** correlations and are expression subqueries.  RESOLVE:
0: 		** this permits VARIANT expressions in the subquery --
0: 		** should this be allowed?  may be confusing to
0: 		** users to complain about:
0: 		**
0: 		**	select max(x), (select sum(y).toString() from y) from x
0: 		*/
0: 		else if (node instanceof SubqueryNode)
0: 		{
0: 			SubqueryNode subq = (SubqueryNode)node;
0: 		
0: 			if ((subq.getSubqueryType() != SubqueryNode.EXPRESSION_SUBQUERY) ||
0: 				 subq.hasCorrelatedCRs())
0: 			{
0: 				throw StandardException.newException( (groupByList == null) ?
0: 							SQLState.LANG_INVALID_NON_GROUPED_SELECT_LIST :
0: 							SQLState.LANG_INVALID_GROUPED_SELECT_LIST);
0: 			}
0: 
0: 			/*
0: 			** TEMPORARY RESTRICTION: we cannot handle an aggregate
0: 			** in the subquery 
0: 			*/
0: 			HasNodeVisitor visitor = new HasNodeVisitor(AggregateNode.class);
0: 			subq.accept(visitor);
0: 			if (visitor.hasNode())
0: 			{	
0: 				throw StandardException.newException( (groupByList == null) ?
0: 							SQLState.LANG_INVALID_NON_GROUPED_SELECT_LIST :
0: 							SQLState.LANG_INVALID_GROUPED_SELECT_LIST);
0: 			}
0: 		}
0: 
0: 		return node;
0: 	}
0: 
0: 	/**
0: 	 * Don't visit children under an aggregate
0: 	 *
0: 	 * @param node 	the node to process
0: 	 *
0: 	 * @return true/false
0: 	 */
0: 	public boolean skipChildren(Visitable node)
0: 	{
0: 		return (node instanceof AggregateNode) ||
0: 				(node instanceof SubqueryNode);
0: 	}
0: 	
0: 	public boolean stopTraversal()
0: 	{
0: 		return false;
0: 	}
0: }	
============================================================================