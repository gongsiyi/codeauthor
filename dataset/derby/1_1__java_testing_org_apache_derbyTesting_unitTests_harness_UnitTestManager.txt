1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.harness.UnitTestManager
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.harness;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f:  *
1:2bc809f:  * The UnitTestManager provides a mechanism for
1:2bc809f:  * registering subsystem tests and then invoking
1:2bc809f:  * them. It can produce an output report specifying
1:2bc809f:  * the results, the timing, and any output produced
1:2bc809f:  * by the tests. If the run fails, the invoker of
1:2bc809f:  * the tests should shut down the system.
1:2bc809f:  */
1:2bc809f: public interface UnitTestManager 
1:2bc809f: {
1:2bc809f: 	public static final String MODULE = "org.apache.derbyTesting.unitTests.harness.UnitTestManager";
1:2bc809f: 	
1:2bc809f: 	/**
1:2bc809f: 	 * Debug flag to allow the cloudscape system running the tests
1:2bc809f: 	 * to run forever. By default test systems are killed 
1:2bc809f: 	 * after an interval of T_Bomb.DEFAULT_BOMB_DELAY to avoid tests
1:2bc809f: 	 * hanging.
1:2bc809f: 	 */
1:2bc809f: 	public static final String RUN_FOREVER = "RunForever";
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	 * Debug flag to skip unit tests.
1:2bc809f: 	 */
1:2bc809f: 	public static final String SKIP_UNIT_TESTS = "SkipUnitTests";
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	 * register an object that has the UnitTest interface,
1:2bc809f: 	 * marking what type it has and its duration.
1:2bc809f: 	 * Tests are run in the order they were registered.
1:2bc809f: 	 * <p>
1:2bc809f: 	 *
1:2bc809f: 	 */
1:2bc809f: 	public void registerTest(UnitTest objectToTest, String testName);
1:2bc809f: 	
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f:      * run the tests. Tests are run
1:2bc809f:      * in the order they were registered, filtered by type
1:2bc809f:      * and duration set for the unit test manager.
1:2bc809f:      */
1:2bc809f: 	public boolean runTests();
1:2bc809f: 	
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	 * Convenience function to set the test type and duration
1:2bc809f: 	 * for the UnitTestManager and then run the tests.
1:2bc809f: 	 * <p>
1:2bc809f: 	 * @see UnitTestConstants
1:2bc809f: 	 */
1:2bc809f: 	public boolean runTests(int testType, int testDuration);
1:2bc809f: 	
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f:      * the test duration is set.  This will be used when the
1:2bc809f:      * tests are run; no tests with duration more than
1:2bc809f: 	  * specified will be run.
1:2bc809f:      */
1:2bc809f: 	public void setTestDuration(int testDuration);
1:2bc809f: 	
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f:      * the test duration is set.  This will be used when the
1:2bc809f:      * tests are run; no tests with duration more than
1:2bc809f: 	  * specified will be run.
1:2bc809f:      */
1:2bc809f: 	public void setTestType(int testType);
1:2bc809f: 	
1:2bc809f: 	/**
1:2bc809f:      * specify whether performance statistics should be
1:2bc809f: 	 * gathered when tests are run. The manager will collect
1:2bc809f: 	 * the duration of each test, and will compare it to
1:2bc809f: 	 * any previous runs it may have done of that test.
1:2bc809f:      */
1:2bc809f: 	public void setPerformanceReportOn(boolean performanceReportOn);
1:2bc809f: 	
1:2bc809f: }
1:2bc809f: 
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.harness.UnitTestManager
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.harness;
1: 
1: /**
1:  *
1:  * The UnitTestManager provides a mechanism for
1:  * registering subsystem tests and then invoking
1:  * them. It can produce an output report specifying
1:  * the results, the timing, and any output produced
1:  * by the tests. If the run fails, the invoker of
1:  * the tests should shut down the system.
1:  */
1: public interface UnitTestManager 
1: {
1: 	public static final String MODULE = "org.apache.derbyTesting.unitTests.harness.UnitTestManager";
1: 	
1: 	/**
1: 	 * Debug flag to allow the cloudscape system running the tests
1: 	 * to run forever. By default test systems are killed 
1: 	 * after an interval of T_Bomb.DEFAULT_BOMB_DELAY to avoid tests
1: 	 * hanging.
1: 	 */
1: 	public static final String RUN_FOREVER = "RunForever";
1: 
1: 	/**
1: 	 * Debug flag to skip unit tests.
1: 	 */
1: 	public static final String SKIP_UNIT_TESTS = "SkipUnitTests";
1: 
1: 	/**
1: 	 * register an object that has the UnitTest interface,
1: 	 * marking what type it has and its duration.
1: 	 * Tests are run in the order they were registered.
1: 	 * <p>
1: 	 *
1: 	 */
1: 	public void registerTest(UnitTest objectToTest, String testName);
1: 	
1: 
1: 	/**
1:      * run the tests. Tests are run
1:      * in the order they were registered, filtered by type
1:      * and duration set for the unit test manager.
1:      */
1: 	public boolean runTests();
1: 	
1: 
1: 	/**
1: 	 * Convenience function to set the test type and duration
1: 	 * for the UnitTestManager and then run the tests.
1: 	 * <p>
1: 	 * @see UnitTestConstants
1: 	 */
1: 	public boolean runTests(int testType, int testDuration);
1: 	
1: 
1: 	/**
1:      * the test duration is set.  This will be used when the
1:      * tests are run; no tests with duration more than
1: 	  * specified will be run.
1:      */
1: 	public void setTestDuration(int testDuration);
1: 	
1: 
1: 	/**
1:      * the test duration is set.  This will be used when the
1:      * tests are run; no tests with duration more than
1: 	  * specified will be run.
1:      */
1: 	public void setTestType(int testType);
1: 	
1: 	/**
1:      * specify whether performance statistics should be
1: 	 * gathered when tests are run. The manager will collect
1: 	 * the duration of each test, and will compare it to
1: 	 * any previous runs it may have done of that test.
1:      */
1: 	public void setPerformanceReportOn(boolean performanceReportOn);
1: 	
1: }
1: 
============================================================================