1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.vti.VTIMetaDataTemplate
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.vti;
1:eac0369: 
1:eac0369: import java.sql.SQLException;
1:dfc9ab0: import java.sql.SQLFeatureNotSupportedException;
1:eac0369: import java.sql.ResultSetMetaData;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	An abstract implementation of ResultSetMetaData (JDBC 1.2) that is useful
1:eac0369: 	when writing a VTI (virtual table interface).
1:eac0369: 	
1:eac0369: 	This class implements
1:eac0369: 	most of the methods of ResultSetMetaData, each one throwing a SQLException
1:eac0369: 	with the name of the method. A concrete subclass can then just implement
1:eac0369: 	the methods not implemented here and override any methods it needs
1:eac0369: 	to implement for correct functionality.
1:eac0369: 	<P>
1:eac0369: 	The methods not implemented here are
1:eac0369: 	<UL>
1:eac0369: 	<LI>getColumnCount()
1:eac0369: 	<LI>getColumnType()
1:eac0369: 	</UL>
1:eac0369: 	<BR>
1:eac0369: 	For virtual tables the database engine only calls methods defined
1:eac0369: 	in the JDBC 1.2 definition of java.sql.ResultSetMetaData.
1:eac0369: 	<BR>
1:eac0369: 	Classes that implement a JDBC 2.0 conformant java.sql.ResultSetMetaData can be used
1:eac0369: 	as the meta data for virtual tables.
1:eac0369: 	<BR>
1:eac0369: 	Developers can use the VTIMetaDataTemplate20 instead of this class when
1:eac0369: 	developing in a Java 2 environment.
1:eac0369:  */
1:eac0369: 
1:4dede3b: public abstract class VTIMetaDataTemplate implements ResultSetMetaData {
1:eac0369: 
1:dfc9ab0:     public  boolean 	isWrapperFor(Class<?> iface) throws SQLException { throw notImplemented( "isWrapperFor" ); }
1:dfc9ab0:     public  <T> T unwrap(Class<T> iface) throws SQLException { throw notImplemented( "unwrap" ); }
1:dfc9ab0: 
1:eac0369:     /**
1:eac0369:      * Is the column automatically numbered, and thus read-only?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return true if the column is automatically numbered
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public boolean isAutoIncrement(int column) throws SQLException {
1:eac0369: 		throw new SQLException("isAutoIncrement");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Does a column's case matter?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return true if the column is case-sensitive
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public boolean isCaseSensitive(int column) throws SQLException {
1:eac0369: 		throw new SQLException("isCaseSensitive");
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Can the column be used in a WHERE clause?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return true if the column is searchable
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public boolean isSearchable(int column) throws SQLException{
1:eac0369: 		throw new SQLException("isSearchable");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Is the column a cash value?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return true if the column is a cash value
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public boolean isCurrency(int column) throws SQLException{
1:eac0369: 		throw new SQLException("isCurrency");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Can you put a NULL in this column?		
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return columnNoNulls, columnNullable or columnNullableUnknown
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public int isNullable(int column) throws SQLException{
1:eac0369: 		throw new SQLException("isNullable");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Is the column a signed number?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return true if the column is a signed number
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public boolean isSigned(int column) throws SQLException {
1:eac0369: 		throw new SQLException("isSigned");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * What's the column's normal maximum width in chars?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return the column's maximum width
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public  int getColumnDisplaySize(int column) throws SQLException {
1:eac0369: 		throw new SQLException("getColumnDisplaySize");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * What's the suggested column title for use in printouts and
1:eac0369:      * displays?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return the column's title
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public String getColumnLabel(int column) throws SQLException {
1:eac0369: 		throw new SQLException("getColumnLabel");
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * What's a column's name?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return column name
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public String getColumnName(int column) throws SQLException {
1:eac0369: 		throw new SQLException("getColumnName");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * What's a column's table's schema?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return schema name or "" if not applicable
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public  String getSchemaName(int column) throws SQLException {
1:eac0369: 		throw new SQLException("getSchemaName");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * How many decimal digits are in the column?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return the column's precision
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public int getPrecision(int column) throws SQLException {
1:eac0369: 		throw new SQLException("getPrecision");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * What's a column's number of digits to the right of the decimal point?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return the column's scale
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public  int getScale(int column) throws SQLException {
1:eac0369: 		throw new SQLException("getScale");
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * What's a column's table name? 
1:eac0369:      *
1:eac0369: 	 * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return the column's table name or "" if not applicable
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public  String getTableName(int column) throws SQLException {
1:eac0369: 		throw new SQLException("getTableName");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * What's a column's table's catalog name?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return the column's table's catalog name or "" if not applicable.
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public String getCatalogName(int column) throws SQLException {
1:eac0369: 		throw new SQLException("getCatalogName");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * What's a column's data source specific type name?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return the column's type name
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public  String getColumnTypeName(int column) throws SQLException {
1:eac0369: 		throw new SQLException("getColumnTypeName");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Is a column definitely not writable?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return true - vti's are read only
1:eac0369: 	 *         false - column is not read-only
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public  boolean isReadOnly(int column) throws SQLException {
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Is it possible for a write on the column to succeed?
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return true if column is possibly writable
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public  boolean isWritable(int column) throws SQLException {
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Will a write on the column definitely succeed?	
1:eac0369:      *
1:eac0369:      * @param column the first column is 1, the second is 2, ...
1:eac0369:      * @return true if column is definitely writable
1:eac0369:      * @exception SQLException if a database-access error occurs.
1:eac0369:      */
1:eac0369: 	public boolean isDefinitelyWritable(int column) throws SQLException {
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** JDBC 2.0
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns the fully-qualified name of the Java class whose instances
1:eac0369: 	 * are manufactured if the method <code>ResultSet.<!-- -->getObject</code>
1:eac0369: 	 * is called to retrieve a value from the column. JDBC 2.0.
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException if a database-access error occurs
1:eac0369: 	 */
1:eac0369: 	public String getColumnClassName(int column) throws SQLException {
1:eac0369: 		throw new SQLException("getColumnClassName");
1:eac0369: 	}
1:dfc9ab0:     
1:dfc9ab0:     /////////////////////////////////////////////////////////////////////////
1:dfc9ab0:     //
1:dfc9ab0:     //  MINIONS
1:dfc9ab0:     //
1:dfc9ab0:     /////////////////////////////////////////////////////////////////////////
1:dfc9ab0: 
1:dfc9ab0:     /**
1:dfc9ab0:      * <p>
1:dfc9ab0:      * Create a SQLException saying that the calling method is not implemented.
1:dfc9ab0:      * </p>
1:dfc9ab0:      */
1:dfc9ab0:     protected SQLException    notImplemented( String methodName )
1:dfc9ab0:     {
1:dfc9ab0:         return new SQLFeatureNotSupportedException( "Unimplemented method: " + methodName );
1:dfc9ab0:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dfc9ab0
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLFeatureNotSupportedException;
/////////////////////////////////////////////////////////////////////////
1:     public  boolean 	isWrapperFor(Class<?> iface) throws SQLException { throw notImplemented( "isWrapperFor" ); }
1:     public  <T> T unwrap(Class<T> iface) throws SQLException { throw notImplemented( "unwrap" ); }
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  MINIONS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Create a SQLException saying that the calling method is not implemented.
1:      * </p>
1:      */
1:     protected SQLException    notImplemented( String methodName )
1:     {
1:         return new SQLFeatureNotSupportedException( "Unimplemented method: " + methodName );
1:     }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.vti.VTIMetaDataTemplate
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
1: public abstract class VTIMetaDataTemplate implements ResultSetMetaData {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.vti;
1: 
1: import java.sql.SQLException;
1: import java.sql.ResultSetMetaData;
1: 
1: /**
1: 	An abstract implementation of ResultSetMetaData (JDBC 1.2) that is useful
1: 	when writing a VTI (virtual table interface).
1: 	
1: 	This class implements
1: 	most of the methods of ResultSetMetaData, each one throwing a SQLException
1: 	with the name of the method. A concrete subclass can then just implement
1: 	the methods not implemented here and override any methods it needs
1: 	to implement for correct functionality.
1: 	<P>
1: 	The methods not implemented here are
1: 	<UL>
1: 	<LI>getColumnCount()
1: 	<LI>getColumnType()
1: 	</UL>
1: 	<BR>
1: 	For virtual tables the database engine only calls methods defined
1: 	in the JDBC 1.2 definition of java.sql.ResultSetMetaData.
1: 	<BR>
1: 	Classes that implement a JDBC 2.0 conformant java.sql.ResultSetMetaData can be used
1: 	as the meta data for virtual tables.
1: 	<BR>
1: 	Developers can use the VTIMetaDataTemplate20 instead of this class when
1: 	developing in a Java 2 environment.
1:  */
1: 
0: public abstract class VTIMetaDataTemplate implements ResultSetMetaData { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:     /**
1:      * Is the column automatically numbered, and thus read-only?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return true if the column is automatically numbered
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public boolean isAutoIncrement(int column) throws SQLException {
1: 		throw new SQLException("isAutoIncrement");
1: 	}
1: 
1: 
1:     /**
1:      * Does a column's case matter?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return true if the column is case-sensitive
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public boolean isCaseSensitive(int column) throws SQLException {
1: 		throw new SQLException("isCaseSensitive");
1: 	}
1: 	
1: 
1:     /**
1:      * Can the column be used in a WHERE clause?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return true if the column is searchable
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public boolean isSearchable(int column) throws SQLException{
1: 		throw new SQLException("isSearchable");
1: 	}
1: 
1: 
1:     /**
1:      * Is the column a cash value?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return true if the column is a cash value
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public boolean isCurrency(int column) throws SQLException{
1: 		throw new SQLException("isCurrency");
1: 	}
1: 
1: 
1:     /**
1:      * Can you put a NULL in this column?		
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return columnNoNulls, columnNullable or columnNullableUnknown
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public int isNullable(int column) throws SQLException{
1: 		throw new SQLException("isNullable");
1: 	}
1: 
1: 
1:     /**
1:      * Is the column a signed number?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return true if the column is a signed number
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public boolean isSigned(int column) throws SQLException {
1: 		throw new SQLException("isSigned");
1: 	}
1: 
1: 
1:     /**
1:      * What's the column's normal maximum width in chars?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return the column's maximum width
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public  int getColumnDisplaySize(int column) throws SQLException {
1: 		throw new SQLException("getColumnDisplaySize");
1: 	}
1: 
1: 
1:     /**
1:      * What's the suggested column title for use in printouts and
1:      * displays?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return the column's title
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public String getColumnLabel(int column) throws SQLException {
1: 		throw new SQLException("getColumnLabel");
1: 	}
1: 	
1: 
1:     /**
1:      * What's a column's name?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return column name
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public String getColumnName(int column) throws SQLException {
1: 		throw new SQLException("getColumnName");
1: 	}
1: 
1: 
1:     /**
1:      * What's a column's table's schema?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return schema name or "" if not applicable
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public  String getSchemaName(int column) throws SQLException {
1: 		throw new SQLException("getSchemaName");
1: 	}
1: 
1: 
1:     /**
1:      * How many decimal digits are in the column?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return the column's precision
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public int getPrecision(int column) throws SQLException {
1: 		throw new SQLException("getPrecision");
1: 	}
1: 
1: 
1:     /**
1:      * What's a column's number of digits to the right of the decimal point?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return the column's scale
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public  int getScale(int column) throws SQLException {
1: 		throw new SQLException("getScale");
1: 	}
1: 	
1: 
1:     /**
1:      * What's a column's table name? 
1:      *
1: 	 * @param column the first column is 1, the second is 2, ...
1:      * @return the column's table name or "" if not applicable
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public  String getTableName(int column) throws SQLException {
1: 		throw new SQLException("getTableName");
1: 	}
1: 
1: 
1:     /**
1:      * What's a column's table's catalog name?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return the column's table's catalog name or "" if not applicable.
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public String getCatalogName(int column) throws SQLException {
1: 		throw new SQLException("getCatalogName");
1: 	}
1: 
1: 
1:     /**
1:      * What's a column's data source specific type name?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return the column's type name
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public  String getColumnTypeName(int column) throws SQLException {
1: 		throw new SQLException("getColumnTypeName");
1: 	}
1: 
1: 
1:     /**
1:      * Is a column definitely not writable?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return true - vti's are read only
1: 	 *         false - column is not read-only
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public  boolean isReadOnly(int column) throws SQLException {
1: 		return true;
1: 	}
1: 
1: 
1:     /**
1:      * Is it possible for a write on the column to succeed?
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return true if column is possibly writable
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public  boolean isWritable(int column) throws SQLException {
1: 		return false;
1: 	}
1: 
1:     /**
1:      * Will a write on the column definitely succeed?	
1:      *
1:      * @param column the first column is 1, the second is 2, ...
1:      * @return true if column is definitely writable
1:      * @exception SQLException if a database-access error occurs.
1:      */
1: 	public boolean isDefinitelyWritable(int column) throws SQLException {
1: 		return false;
1: 	}
1: 
1: 	/*
1: 	** JDBC 2.0
1: 	*/
1: 
1: 	/**
1: 	 * Returns the fully-qualified name of the Java class whose instances
1: 	 * are manufactured if the method <code>ResultSet.<!-- -->getObject</code>
1: 	 * is called to retrieve a value from the column. JDBC 2.0.
1: 	 *
1: 	 * @exception SQLException if a database-access error occurs
1: 	 */
1: 	public String getColumnClassName(int column) throws SQLException {
1: 		throw new SQLException("getColumnClassName");
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.vti;
0: 
0: import java.sql.SQLException;
0: import java.sql.ResultSetMetaData;
0: 
0: /**
0: 	An abstract implementation of ResultSetMetaData (JDBC 1.2) that is useful
0: 	when writing a VTI (virtual table interface).
0: 	
0: 	This class implements
0: 	most of the methods of ResultSetMetaData, each one throwing a SQLException
0: 	with the name of the method. A concrete subclass can then just implement
0: 	the methods not implemented here and override any methods it needs
0: 	to implement for correct functionality.
0: 	<P>
0: 	The methods not implemented here are
0: 	<UL>
0: 	<LI>getColumnCount()
0: 	<LI>getColumnType()
0: 	</UL>
0: 	<BR>
0: 	For virtual tables the database engine only calls methods defined
0: 	in the JDBC 1.2 definition of java.sql.ResultSetMetaData.
0: 	<BR>
0: 	Classes that implement a JDBC 2.0 conformant java.sql.ResultSetMetaData can be used
0: 	as the meta data for virtual tables.
0: 	<BR>
0: 	Developers can use the VTIMetaDataTemplate20 instead of this class when
0: 	developing in a Java 2 environment.
0:  */
0: 
0: public abstract class VTIMetaDataTemplate implements ResultSetMetaData { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:     /**
0:      * Is the column automatically numbered, and thus read-only?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return true if the column is automatically numbered
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public boolean isAutoIncrement(int column) throws SQLException {
0: 		throw new SQLException("isAutoIncrement");
0: 	}
0: 
0: 
0:     /**
0:      * Does a column's case matter?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return true if the column is case-sensitive
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public boolean isCaseSensitive(int column) throws SQLException {
0: 		throw new SQLException("isCaseSensitive");
0: 	}
0: 	
0: 
0:     /**
0:      * Can the column be used in a WHERE clause?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return true if the column is searchable
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public boolean isSearchable(int column) throws SQLException{
0: 		throw new SQLException("isSearchable");
0: 	}
0: 
0: 
0:     /**
0:      * Is the column a cash value?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return true if the column is a cash value
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public boolean isCurrency(int column) throws SQLException{
0: 		throw new SQLException("isCurrency");
0: 	}
0: 
0: 
0:     /**
0:      * Can you put a NULL in this column?		
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return columnNoNulls, columnNullable or columnNullableUnknown
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public int isNullable(int column) throws SQLException{
0: 		throw new SQLException("isNullable");
0: 	}
0: 
0: 
0:     /**
0:      * Is the column a signed number?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return true if the column is a signed number
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public boolean isSigned(int column) throws SQLException {
0: 		throw new SQLException("isSigned");
0: 	}
0: 
0: 
0:     /**
0:      * What's the column's normal maximum width in chars?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return the column's maximum width
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public  int getColumnDisplaySize(int column) throws SQLException {
0: 		throw new SQLException("getColumnDisplaySize");
0: 	}
0: 
0: 
0:     /**
0:      * What's the suggested column title for use in printouts and
0:      * displays?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return the column's title
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public String getColumnLabel(int column) throws SQLException {
0: 		throw new SQLException("getColumnLabel");
0: 	}
0: 	
0: 
0:     /**
0:      * What's a column's name?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return column name
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public String getColumnName(int column) throws SQLException {
0: 		throw new SQLException("getColumnName");
0: 	}
0: 
0: 
0:     /**
0:      * What's a column's table's schema?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return schema name or "" if not applicable
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public  String getSchemaName(int column) throws SQLException {
0: 		throw new SQLException("getSchemaName");
0: 	}
0: 
0: 
0:     /**
0:      * How many decimal digits are in the column?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return the column's precision
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public int getPrecision(int column) throws SQLException {
0: 		throw new SQLException("getPrecision");
0: 	}
0: 
0: 
0:     /**
0:      * What's a column's number of digits to the right of the decimal point?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return the column's scale
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public  int getScale(int column) throws SQLException {
0: 		throw new SQLException("getScale");
0: 	}
0: 	
0: 
0:     /**
0:      * What's a column's table name? 
0:      *
0: 	 * @param column the first column is 1, the second is 2, ...
0:      * @return the column's table name or "" if not applicable
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public  String getTableName(int column) throws SQLException {
0: 		throw new SQLException("getTableName");
0: 	}
0: 
0: 
0:     /**
0:      * What's a column's table's catalog name?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return the column's table's catalog name or "" if not applicable.
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public String getCatalogName(int column) throws SQLException {
0: 		throw new SQLException("getCatalogName");
0: 	}
0: 
0: 
0:     /**
0:      * What's a column's data source specific type name?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return the column's type name
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public  String getColumnTypeName(int column) throws SQLException {
0: 		throw new SQLException("getColumnTypeName");
0: 	}
0: 
0: 
0:     /**
0:      * Is a column definitely not writable?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return true - vti's are read only
0: 	 *         false - column is not read-only
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public  boolean isReadOnly(int column) throws SQLException {
0: 		return true;
0: 	}
0: 
0: 
0:     /**
0:      * Is it possible for a write on the column to succeed?
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return true if column is possibly writable
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public  boolean isWritable(int column) throws SQLException {
0: 		return false;
0: 	}
0: 
0:     /**
0:      * Will a write on the column definitely succeed?	
0:      *
0:      * @param column the first column is 1, the second is 2, ...
0:      * @return true if column is definitely writable
0:      * @exception SQLException if a database-access error occurs.
0:      */
0: 	public boolean isDefinitelyWritable(int column) throws SQLException {
0: 		return false;
0: 	}
0: 
0: 	/*
0: 	** JDBC 2.0
0: 	*/
0: 
0: 	/**
0: 	 * Returns the fully-qualified name of the Java class whose instances
0: 	 * are manufactured if the method <code>ResultSet.<!-- -->getObject</code>
0: 	 * is called to retrieve a value from the column. JDBC 2.0.
0: 	 *
0: 	 * @exception SQLException if a database-access error occurs
0: 	 */
0: 	public String getColumnClassName(int column) throws SQLException {
0: 		throw new SQLException("getColumnClassName");
0: 	}
0: }
============================================================================