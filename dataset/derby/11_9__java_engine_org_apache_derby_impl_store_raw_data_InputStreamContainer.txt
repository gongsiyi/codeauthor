1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.InputStreamContainer
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.raw.data.FileContainer;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.impl.store.raw.data.BaseDataFileFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.InputStreamUtil;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.io.StorageFile;
1:eac0369: 
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.DataInputStream;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A class that uses a ZipEntry to be a single container file,
1:eac0369: 	but read-only.
1:eac0369: 
1:eac0369: */
1:eac0369: 
1:7a92d1f: final class InputStreamContainer extends FileContainer  {
1:eac0369: 
1:eac0369:     private StorageFile containerPath;
1:eac0369:     
1:eac0369: 	/*
1:eac0369: 	 * Constructors
1:eac0369: 	 */
1:eac0369: 
1:7a92d1f: 	InputStreamContainer(BaseDataFileFactory factory) {
1:eac0369: 		super(factory);
1:eac0369: 		canUpdate = false;
1:eac0369: 	}
1:ae71c74: 
1:7a92d1f: 	final boolean openContainer(ContainerKey newIdentity) throws StandardException {
1:eac0369: 		DataInputStream dis = null;
1:eac0369: 		try
1:eac0369:         {
1:eac0369: 			InputStream is = null;
1:eac0369:             containerPath = dataFactory.getContainerPath(newIdentity, false);
1:eac0369:             try
1:eac0369:             {
1:eac0369:                 is = containerPath.getInputStream();
1:eac0369:             }
1:eac0369:             catch (IOException ioe)
1:eac0369:             {
1:eac0369:                 // Maybe it's been stubbified.
1:eac0369:                 containerPath = dataFactory.getContainerPath(newIdentity, true);
1:eac0369:                 try
1:eac0369:                 {
1:eac0369:                     is = getInputStream();
1:eac0369:                 }
1:eac0369:                 catch (IOException ioe2)
1:eac0369:                 {
1:eac0369:                     containerPath = null;
1:eac0369:                     return false;
1:eac0369:                 }
1:eac0369:             }
1:eac0369: 
1:eac0369: 			dis = new DataInputStream(is);
1:eac0369: 			
1:eac0369: 			// FileData has to be positioned just at the beginning 
1:eac0369: 			// of the first allocation page. And it is because we
1:eac0369: 			// just opened the stream and the first allocation page
1:eac0369: 			// is located at the beginning of the file.
1:b44572f: 			readHeader(getEmbryonicPage(dis));
1:eac0369: 
1:eac0369: 			return true;
1:eac0369: 
1:75fb1cf:         } catch (IOException ioe) {
1:75fb1cf:             throw StandardException.
1:26c2de4:                 newException(SQLState.FILE_CONTAINER_EXCEPTION, 
1:26c2de4:                              ioe,
1:26c2de4:                              new Object[] {getIdentity().toString(),
1:26c2de4:                                            "open", newIdentity.toString()});
1:75fb1cf:         } finally {
1:eac0369: 			if (dis != null) {
1:eac0369: 				try {
1:eac0369: 					dis.close();
1:eac0369: 				} catch (IOException ioe) {}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	} // end of openContainer
1:eac0369: 
1:7a92d1f: 	void closeContainer()
1:eac0369:     {
1:eac0369: 		containerPath = null;
1:eac0369: 	}
1:eac0369: 
1:ae71c74: 	/**
1:eac0369: 		Write out the header information for this container. If an i/o exception
1:eac0369: 		occurs then ...
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.cache.Cacheable#clean
1:94f158a: 		@exception StandardException Standard Derby error policy
1:25f99f5: 	*/
1:eac0369: 	public final void clean(boolean forRemove) throws StandardException {
1:eac0369: 
1:eac0369: 		// Nothing to do since we are inherently read-only.
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Preallocate page.  
1:eac0369: 	*/
1:eac0369: 	protected final int preAllocate(long lastPreallocPagenum, int preAllocSize) {
1:eac0369: 
1:eac0369: 		// Nothing to do since we are inherently read-only.
1:eac0369: 		return 0;
1:eac0369: 	}
1:eac0369: 
1:bbc927c: 	protected void truncatePages(long lastValidPagenum)
1:bbc927c:     {
1:bbc927c: 		// Nothing to do since we are inherently read-only.
1:bbc927c: 		return;
1:bbc927c:     }
1:bbc927c:     
1:bbc927c: 
1:eac0369: 	/*
1:eac0369: 	** Container creation, opening, and closing
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Create a new container, all references to identity must be through the
1:eac0369: 		passed in identity, this object will no identity until after this method returns.
1:eac0369: 	*/
1:7a92d1f: 	void createContainer(ContainerKey newIdentity) throws StandardException {
1:eac0369: 		// RESOLVE - probably should throw an error ...
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Remove the container.
1:eac0369: 	*/
1:eac0369: 	protected final void removeContainer(LogInstant instant, boolean leaveStub) throws StandardException 
1:eac0369: 	{
1:eac0369: 	// RESOVE
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods used solely by StoredPage
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read a page into the supplied array.
1:eac0369: 
1:eac0369: 		<BR> MT - thread safe
1:eac0369: 	*/
1:eac0369: 	protected final void readPage(long pageNumber, byte[] pageData) 
1:eac0369: 		 throws IOException, StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(!getCommittedDropState());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		long pageOffset = pageNumber * pageSize;
1:eac0369: 
1:eac0369: 		readPositionedPage(pageOffset, pageData);
1:eac0369: 
1:eac0369: 		if (dataFactory.databaseEncrypted() && 
1:eac0369: 			pageNumber != FIRST_ALLOC_PAGE_NUMBER)
1:eac0369: 		{
1:eac0369: 			decryptPage(pageData, pageSize);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read the page at the positioned offset.
1:eac0369: 		This default implementation, opens the stream and skips to the offset
1:eac0369: 		and then reads the data into pageData.
1:eac0369: 	*/
1:eac0369: 	protected void readPositionedPage(long pageOffset, byte[] pageData) throws IOException {
1:eac0369: 
1:eac0369: 
1:eac0369: 		InputStream is = null;
1:eac0369: 		try {
1:eac0369: 			// no need to synchronize as each caller gets a new stream
1:eac0369: 			is = getInputStream();
1:eac0369: 
1:27628a0: 			InputStreamUtil.skipFully(is, pageOffset);
1:eac0369: 
1:eac0369: 			InputStreamUtil.readFully(is, pageData, 0, pageSize);
1:eac0369: 
1:eac0369: 			is.close();
1:eac0369: 			is = null;
2:eac0369: 		} finally {
1:eac0369: 			if (is != null) {
1:eac0369: 				try {is.close();} catch (IOException ioe) {}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Write a page from the supplied array.
1:eac0369: 
1:eac0369: 		<BR> MT - thread safe
1:eac0369: 	*/
1:eac0369: 	protected final void writePage(long pageNumber, byte[] pageData, boolean syncPage)
1:eac0369: 		throws IOException, StandardException {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected final void flushAll() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get an input stream positioned at the beginning of the file
1:eac0369: 	*/
1:eac0369: 	protected InputStream getInputStream() throws IOException
1:eac0369:     {
1:eac0369:         return containerPath.getInputStream();
1:eac0369:     }
1:25f99f5: 
1:25f99f5: 		
1:25f99f5: 	/**
1:bf643fd:      * Backup the container.
1:bf643fd:      * There is no support to backup this type of containers. It may not be any
1:bf643fd:      * real use for users because users can simply  make copies of the read only 
1:bf643fd:      * database in Zip files easily using OS utilities.
1:ae71c74:      * 
1:ae71c74:      * @exception StandardException Standard Derby error policy 
1:bf643fd:      */
1:25f99f5: 	protected void backupContainer(BaseContainerHandle handle,	String backupLocation)
1:25f99f5: 	    throws StandardException
1:25f99f5: 	{
1:bf643fd:         throw StandardException.newException(
1:bf643fd:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:ae71c74: 	}
1:ae71c74: 
1:25f99f5: 
1:eac0369:     /**
1:89a6625:      * Encrypts or decrypts the container.
1:89a6625:      * <p>
1:89a6625:      * These operations are unsupported for this type of container.
1:89a6625:      *
1:89a6625:      * @throws StandardException STORE_FEATURE_NOT_IMPLEMENTED
1:ae71c74:      */
1:89a6625: 	protected void encryptOrDecryptContainer(BaseContainerHandle handle,
1:89a6625:                                              String newFilePath,
1:89a6625:                                              boolean doEncrypt)
1:ae71c74: 	    throws StandardException
1:ae71c74: 	{
1:ae71c74:         throw StandardException.newException(
1:ae71c74:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1:25f99f5: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:26c2de4
/////////////////////////////////////////////////////////////////////////
1:                 newException(SQLState.FILE_CONTAINER_EXCEPTION, 
1:                              ioe,
1:                              new Object[] {getIdentity().toString(),
1:                                            "open", newIdentity.toString()});
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:89a6625
/////////////////////////////////////////////////////////////////////////
1:      * Encrypts or decrypts the container.
1:      * <p>
1:      * These operations are unsupported for this type of container.
1:      *
1:      * @throws StandardException STORE_FEATURE_NOT_IMPLEMENTED
1: 	protected void encryptOrDecryptContainer(BaseContainerHandle handle,
1:                                              String newFilePath,
1:                                              boolean doEncrypt)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:27628a0
/////////////////////////////////////////////////////////////////////////
1: 			InputStreamUtil.skipFully(is, pageOffset);
commit:b44572f
/////////////////////////////////////////////////////////////////////////
1: 			readHeader(getEmbryonicPage(dis));
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:ae71c74
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Encrypt the container.  There is no support to encrypt 
0:      * this type of containers. 
1:      * 
1:      * @exception StandardException Standard Derby error policy 
1:      */
0: 	protected void encryptContainer(BaseContainerHandle handle, 
0:                                     String newFilePath)
1: 	    throws StandardException
1: 	{
1:         throw StandardException.newException(
1:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
1: 	}
1: 
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:bf643fd
/////////////////////////////////////////////////////////////////////////
1:      * Backup the container.
1:      * There is no support to backup this type of containers. It may not be any
1:      * real use for users because users can simply  make copies of the read only 
1:      * database in Zip files easily using OS utilities.
0:      * 
0:      * @exception StandardException Standard Derby error policy 
1:      */
1:         throw StandardException.newException(
1:                 SQLState.STORE_FEATURE_NOT_IMPLEMENTED);
commit:25f99f5
/////////////////////////////////////////////////////////////////////////
1: 
1: 		
1: 	/**
0: 	   backup the container.
0: 	   @exception StandardException Standard Cloudscape error policy 
1: 	*/
1: 	protected void backupContainer(BaseContainerHandle handle,	String backupLocation)
1: 	    throws StandardException
1: 	{
0: 		// Nothing to do; No one would want to do a  backup of a readonly datbase. 
0: 		// RESOLVE: make sure some where this case is handled and 
0: 		// users sees a right error message.
1: 	}
1: 
commit:bbc927c
/////////////////////////////////////////////////////////////////////////
1: 	protected void truncatePages(long lastValidPagenum)
1:     {
1: 		// Nothing to do since we are inherently read-only.
1: 		return;
1:     }
1:     
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:David Van Couvering
-------------------------------------------------------------------------------
commit:75fb1cf
/////////////////////////////////////////////////////////////////////////
1:         } catch (IOException ioe) {
1:             throw StandardException.
0:                 newException(SQLState.FILE_CONTAINER_EXCEPTION, ioe, this);
1:         } finally {
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7a92d1f
/////////////////////////////////////////////////////////////////////////
1: final class InputStreamContainer extends FileContainer  {
/////////////////////////////////////////////////////////////////////////
1: 	InputStreamContainer(BaseDataFileFactory factory) {
1: 	final boolean openContainer(ContainerKey newIdentity) throws StandardException {
/////////////////////////////////////////////////////////////////////////
1: 	void closeContainer()
/////////////////////////////////////////////////////////////////////////
1: 	void createContainer(ContainerKey newIdentity) throws StandardException {
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.InputStreamContainer
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.impl.store.raw.data.FileContainer;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.impl.store.raw.data.BaseDataFileFactory;
1: 
1: import org.apache.derby.iapi.services.io.InputStreamUtil;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.io.StorageFile;
1: 
1: import java.io.InputStream;
1: import java.io.IOException;
1: import java.io.DataInputStream;
1: 
1: /**
1: 	A class that uses a ZipEntry to be a single container file,
1: 	but read-only.
1: 
1: */
1: 
0: public class InputStreamContainer extends FileContainer  {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1:     private StorageFile containerPath;
1:     
1: 	/*
1: 	 * Constructors
1: 	 */
1: 
0: 	public InputStreamContainer(BaseDataFileFactory factory) {
1: 		super(factory);
1: 		canUpdate = false;
1: 	}
1: 
0: 	protected final boolean openContainer(ContainerKey newIdentity) throws StandardException {
1: 		DataInputStream dis = null;
1: 		try
1:         {
1: 			InputStream is = null;
1:             containerPath = dataFactory.getContainerPath(newIdentity, false);
1:             try
1:             {
1:                 is = containerPath.getInputStream();
1:             }
1:             catch (IOException ioe)
1:             {
1:                 // Maybe it's been stubbified.
1:                 containerPath = dataFactory.getContainerPath(newIdentity, true);
1:                 try
1:                 {
1:                     is = getInputStream();
1:                 }
1:                 catch (IOException ioe2)
1:                 {
1:                     containerPath = null;
1:                     return false;
1:                 }
1:             }
1: 
1: 			dis = new DataInputStream(is);
1: 			
1: 			// FileData has to be positioned just at the beginning 
1: 			// of the first allocation page. And it is because we
1: 			// just opened the stream and the first allocation page
1: 			// is located at the beginning of the file.
0: 			readHeader(dis);
1: 
1: 			return true;
1: 
0: 		} catch (IOException ioe) {
1: 
0: 			throw StandardException.newException(
0:                     SQLState.FILE_CONTAINER_EXCEPTION, ioe, this, ioe);
1: 		} finally {
1: 			if (dis != null) {
1: 				try {
1: 					dis.close();
1: 				} catch (IOException ioe) {}
1: 			}
1: 		}
1: 	} // end of openContainer
1: 
0: 	protected void closeContainer()
1:     {
1: 		containerPath = null;
1: 	}
1: 
1: 	/**
1: 		Write out the header information for this container. If an i/o exception
1: 		occurs then ...
1: 
1: 		@see org.apache.derby.iapi.services.cache.Cacheable#clean
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public final void clean(boolean forRemove) throws StandardException {
1: 
1: 		// Nothing to do since we are inherently read-only.
1: 
1: 	}
1: 
1: 	/**
1: 		Preallocate page.  
1: 	*/
1: 	protected final int preAllocate(long lastPreallocPagenum, int preAllocSize) {
1: 
1: 		// Nothing to do since we are inherently read-only.
1: 		return 0;
1: 	}
1: 
1: 	/*
1: 	** Container creation, opening, and closing
1: 	*/
1: 
1: 	/**
1: 		Create a new container, all references to identity must be through the
1: 		passed in identity, this object will no identity until after this method returns.
1: 	*/
0: 	protected void createContainer(ContainerKey newIdentity) throws StandardException {
1: 		// RESOLVE - probably should throw an error ...
1: 	}
1: 
1: 
1: 
1: 	/**
1: 		Remove the container.
1: 	*/
1: 	protected final void removeContainer(LogInstant instant, boolean leaveStub) throws StandardException 
1: 	{
1: 	// RESOVE
1: 	}
1: 
1: 	/*
1: 	** Methods used solely by StoredPage
1: 	*/
1: 
1: 	/**
1: 		Read a page into the supplied array.
1: 
1: 		<BR> MT - thread safe
1: 	*/
1: 	protected final void readPage(long pageNumber, byte[] pageData) 
1: 		 throws IOException, StandardException
1: 	{
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(!getCommittedDropState());
1: 		}
1: 
1: 		long pageOffset = pageNumber * pageSize;
1: 
1: 		readPositionedPage(pageOffset, pageData);
1: 
1: 		if (dataFactory.databaseEncrypted() && 
1: 			pageNumber != FIRST_ALLOC_PAGE_NUMBER)
1: 		{
1: 			decryptPage(pageData, pageSize);
1: 		}
1: 	}
1: 
1: 	/**
1: 		Read the page at the positioned offset.
1: 		This default implementation, opens the stream and skips to the offset
1: 		and then reads the data into pageData.
1: 	*/
1: 	protected void readPositionedPage(long pageOffset, byte[] pageData) throws IOException {
1: 
1: 
1: 		InputStream is = null;
1: 		try {
1: 			// no need to synchronize as each caller gets a new stream
1: 			is = getInputStream();
1: 
0: 			InputStreamUtil.skipBytes(is, pageOffset);
1: 
1: 			InputStreamUtil.readFully(is, pageData, 0, pageSize);
1: 
1: 			is.close();
1: 			is = null;
1: 		} finally {
1: 			if (is != null) {
1: 				try {is.close();} catch (IOException ioe) {}
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 		Write a page from the supplied array.
1: 
1: 		<BR> MT - thread safe
1: 	*/
1: 	protected final void writePage(long pageNumber, byte[] pageData, boolean syncPage)
1: 		throws IOException, StandardException {
1: 	}
1: 
1: 	protected final void flushAll() {
1: 	}
1: 
1: 	/**
1: 		Get an input stream positioned at the beginning of the file
1: 	*/
1: 	protected InputStream getInputStream() throws IOException
1:     {
1:         return containerPath.getInputStream();
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.impl.store.raw.data.FileContainer;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.impl.store.raw.data.BaseDataFileFactory;
0: 
0: import org.apache.derby.iapi.services.io.InputStreamUtil;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.io.StorageFile;
0: 
0: import java.io.InputStream;
0: import java.io.IOException;
0: import java.io.DataInputStream;
0: 
0: /**
0: 	A class that uses a ZipEntry to be a single container file,
0: 	but read-only.
0: 
0: */
0: 
0: public class InputStreamContainer extends FileContainer  {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0:     private StorageFile containerPath;
0:     
0: 	/*
0: 	 * Constructors
0: 	 */
0: 
0: 	public InputStreamContainer(BaseDataFileFactory factory) {
0: 		super(factory);
0: 		canUpdate = false;
0: 	}
0: 
0: 	protected final boolean openContainer(ContainerKey newIdentity) throws StandardException {
0: 		DataInputStream dis = null;
0: 		try
0:         {
0: 			InputStream is = null;
0:             containerPath = dataFactory.getContainerPath(newIdentity, false);
0:             try
0:             {
0:                 is = containerPath.getInputStream();
0:             }
0:             catch (IOException ioe)
0:             {
0:                 // Maybe it's been stubbified.
0:                 containerPath = dataFactory.getContainerPath(newIdentity, true);
0:                 try
0:                 {
0:                     is = getInputStream();
0:                 }
0:                 catch (IOException ioe2)
0:                 {
0:                     containerPath = null;
0:                     return false;
0:                 }
0:             }
0: 
0: 			dis = new DataInputStream(is);
0: 			
0: 			// FileData has to be positioned just at the beginning 
0: 			// of the first allocation page. And it is because we
0: 			// just opened the stream and the first allocation page
0: 			// is located at the beginning of the file.
0: 			readHeader(dis);
0: 
0: 			return true;
0: 
0: 		} catch (IOException ioe) {
0: 
0: 			throw StandardException.newException(
0:                     SQLState.FILE_CONTAINER_EXCEPTION, ioe, this, ioe);
0: 		} finally {
0: 			if (dis != null) {
0: 				try {
0: 					dis.close();
0: 				} catch (IOException ioe) {}
0: 			}
0: 		}
0: 	} // end of openContainer
0: 
0: 	protected void closeContainer()
0:     {
0: 		containerPath = null;
0: 	}
0: 
0: 	/**
0: 		Write out the header information for this container. If an i/o exception
0: 		occurs then ...
0: 
0: 		@see org.apache.derby.iapi.services.cache.Cacheable#clean
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public final void clean(boolean forRemove) throws StandardException {
0: 
0: 		// Nothing to do since we are inherently read-only.
0: 
0: 	}
0: 
0: 	/**
0: 		Preallocate page.  
0: 	*/
0: 	protected final int preAllocate(long lastPreallocPagenum, int preAllocSize) {
0: 
0: 		// Nothing to do since we are inherently read-only.
0: 		return 0;
0: 	}
0: 
0: 	/*
0: 	** Container creation, opening, and closing
0: 	*/
0: 
0: 	/**
0: 		Create a new container, all references to identity must be through the
0: 		passed in identity, this object will no identity until after this method returns.
0: 	*/
0: 	protected void createContainer(ContainerKey newIdentity) throws StandardException {
0: 		// RESOLVE - probably should throw an error ...
0: 	}
0: 
0: 
0: 
0: 	/**
0: 		Remove the container.
0: 	*/
0: 	protected final void removeContainer(LogInstant instant, boolean leaveStub) throws StandardException 
0: 	{
0: 	// RESOVE
0: 	}
0: 
0: 	/*
0: 	** Methods used solely by StoredPage
0: 	*/
0: 
0: 	/**
0: 		Read a page into the supplied array.
0: 
0: 		<BR> MT - thread safe
0: 	*/
0: 	protected final void readPage(long pageNumber, byte[] pageData) 
0: 		 throws IOException, StandardException
0: 	{
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(!getCommittedDropState());
0: 		}
0: 
0: 		long pageOffset = pageNumber * pageSize;
0: 
0: 		readPositionedPage(pageOffset, pageData);
0: 
0: 		if (dataFactory.databaseEncrypted() && 
0: 			pageNumber != FIRST_ALLOC_PAGE_NUMBER)
0: 		{
0: 			decryptPage(pageData, pageSize);
0: 		}
0: 	}
0: 
0: 	/**
0: 		Read the page at the positioned offset.
0: 		This default implementation, opens the stream and skips to the offset
0: 		and then reads the data into pageData.
0: 	*/
0: 	protected void readPositionedPage(long pageOffset, byte[] pageData) throws IOException {
0: 
0: 
0: 		InputStream is = null;
0: 		try {
0: 			// no need to synchronize as each caller gets a new stream
0: 			is = getInputStream();
0: 
0: 			InputStreamUtil.skipBytes(is, pageOffset);
0: 
0: 			InputStreamUtil.readFully(is, pageData, 0, pageSize);
0: 
0: 			is.close();
0: 			is = null;
0: 		} finally {
0: 			if (is != null) {
0: 				try {is.close();} catch (IOException ioe) {}
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 		Write a page from the supplied array.
0: 
0: 		<BR> MT - thread safe
0: 	*/
0: 	protected final void writePage(long pageNumber, byte[] pageData, boolean syncPage)
0: 		throws IOException, StandardException {
0: 	}
0: 
0: 	protected final void flushAll() {
0: 	}
0: 
0: 	/**
0: 		Get an input stream positioned at the beginning of the file
0: 	*/
0: 	protected InputStream getInputStream() throws IOException
0:     {
0:         return containerPath.getInputStream();
0:     }
0: }
============================================================================