1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.vti.Pushable
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.vti;
1:eac0369: 
1:eac0369: import java.sql.SQLException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Support for pushing SQL statement information
1:eac0369: 	down into a virtual table.
1:eac0369: 
1:eac0369:   A read-write virtual tables (one that implements java.sql.PreparedStatement)
1:eac0369:   implements this interface to support pushing information into the VTI.
1:eac0369: 
1:eac0369:   <BR>
1:eac0369:   Read-only VTIs (those that implement java.sql.ResultSet) do not support the Pushable interface.
1:eac0369: */
1:eac0369: public interface Pushable {
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Indicates the columns that must be returned by a read-write VTI's ResultSet.
1:eac0369: 		This method is called only during the runtime execution of the VTI, after it has been
1:eac0369: 		constructed and before the executeQuery() method is called.
1:eac0369: 		At compile time the VTI needs to describe the complete set of columns it can return.
1:eac0369: 		<BR>
1:eac0369: 		The column identifiers contained in projectedColumns
1:eac0369: 		map to the columns described by the VTI's PreparedStatement's
1:eac0369: 		ResultSetMetaData. The ResultSet returned by
1:eac0369: 		PreparedStatement.executeQuery() must contain
1:eac0369: 		these columns in the order given. Column 1 in this
1:eac0369: 		ResultSet maps the the column of the VTI identified
1:eac0369: 		by projectedColumns[0], column 2 maps to projectedColumns[1] etc.
1:eac0369: 		<BR>
1:eac0369: 		Any additional columns contained in the ResultSet are ignored
1:eac0369: 		by the database engine. The ResultSetMetaData returned by
1:eac0369: 		ResultSet.getMetaData() must match the ResultSet.
1:eac0369: 		<P>
1:eac0369: 		PreparedStatement's ResultSetMetaData column list {"id", "desc", "price", "tax", "brand"}
1:eac0369: 		<BR>
1:eac0369: 		projectedColumns = { 2, 3, 5}
1:eac0369: 		<BR>
1:eac0369: 		results in a ResultSet containing at least these 3 columns
1:eac0369: 		{"desc", "price", "brand"}
1:eac0369: 
1:eac0369: 
1:eac0369: 		The  JDBC column numbering scheme (1 based) ise used for projectedColumns.
1:eac0369: 
1:eac0369: 
1:eac0369: 		@exception SQLException Error processing the request.
1:eac0369: 	*/
1:eac0369: 	public boolean pushProjection(VTIEnvironment vtiEnvironment, int[] projectedColumns)
1:eac0369: 		throws SQLException;
1:eac0369: 
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.vti.Pushable
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.vti;
1: 
1: import java.sql.SQLException;
1: 
1: /**
1: 	Support for pushing SQL statement information
1: 	down into a virtual table.
1: 
1:   A read-write virtual tables (one that implements java.sql.PreparedStatement)
1:   implements this interface to support pushing information into the VTI.
1: 
1:   <BR>
1:   Read-only VTIs (those that implement java.sql.ResultSet) do not support the Pushable interface.
1: */
1: public interface Pushable {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
1: 
1: 	/**
1: 		Indicates the columns that must be returned by a read-write VTI's ResultSet.
1: 		This method is called only during the runtime execution of the VTI, after it has been
1: 		constructed and before the executeQuery() method is called.
1: 		At compile time the VTI needs to describe the complete set of columns it can return.
1: 		<BR>
1: 		The column identifiers contained in projectedColumns
1: 		map to the columns described by the VTI's PreparedStatement's
1: 		ResultSetMetaData. The ResultSet returned by
1: 		PreparedStatement.executeQuery() must contain
1: 		these columns in the order given. Column 1 in this
1: 		ResultSet maps the the column of the VTI identified
1: 		by projectedColumns[0], column 2 maps to projectedColumns[1] etc.
1: 		<BR>
1: 		Any additional columns contained in the ResultSet are ignored
1: 		by the database engine. The ResultSetMetaData returned by
1: 		ResultSet.getMetaData() must match the ResultSet.
1: 		<P>
1: 		PreparedStatement's ResultSetMetaData column list {"id", "desc", "price", "tax", "brand"}
1: 		<BR>
1: 		projectedColumns = { 2, 3, 5}
1: 		<BR>
1: 		results in a ResultSet containing at least these 3 columns
1: 		{"desc", "price", "brand"}
1: 
1: 
1: 		The  JDBC column numbering scheme (1 based) ise used for projectedColumns.
1: 
1: 
1: 		@exception SQLException Error processing the request.
1: 	*/
1: 	public boolean pushProjection(VTIEnvironment vtiEnvironment, int[] projectedColumns)
1: 		throws SQLException;
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.vti;
0: 
0: import java.sql.SQLException;
0: 
0: /**
0: 	Support for pushing SQL statement information
0: 	down into a virtual table.
0: 
0:   A read-write virtual tables (one that implements java.sql.PreparedStatement)
0:   implements this interface to support pushing information into the VTI.
0: 
0:   <BR>
0:   Read-only VTIs (those that implement java.sql.ResultSet) do not support the Pushable interface.
0: */
0: public interface Pushable {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0: 
0: 	/**
0: 		Indicates the columns that must be returned by a read-write VTI's ResultSet.
0: 		This method is called only during the runtime execution of the VTI, after it has been
0: 		constructed and before the executeQuery() method is called.
0: 		At compile time the VTI needs to describe the complete set of columns it can return.
0: 		<BR>
0: 		The column identifiers contained in projectedColumns
0: 		map to the columns described by the VTI's PreparedStatement's
0: 		ResultSetMetaData. The ResultSet returned by
0: 		PreparedStatement.executeQuery() must contain
0: 		these columns in the order given. Column 1 in this
0: 		ResultSet maps the the column of the VTI identified
0: 		by projectedColumns[0], column 2 maps to projectedColumns[1] etc.
0: 		<BR>
0: 		Any additional columns contained in the ResultSet are ignored
0: 		by the database engine. The ResultSetMetaData returned by
0: 		ResultSet.getMetaData() must match the ResultSet.
0: 		<P>
0: 		PreparedStatement's ResultSetMetaData column list {"id", "desc", "price", "tax", "brand"}
0: 		<BR>
0: 		projectedColumns = { 2, 3, 5}
0: 		<BR>
0: 		results in a ResultSet containing at least these 3 columns
0: 		{"desc", "price", "brand"}
0: 
0: 
0: 		The  JDBC column numbering scheme (1 based) ise used for projectedColumns.
0: 
0: 
0: 		@exception SQLException Error processing the request.
0: 	*/
0: 	public boolean pushProjection(VTIEnvironment vtiEnvironment, int[] projectedColumns)
0: 		throws SQLException;
0: 
0: }
============================================================================