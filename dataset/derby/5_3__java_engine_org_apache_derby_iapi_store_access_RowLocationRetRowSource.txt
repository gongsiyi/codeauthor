1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.RowLocationRetRowSource
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   A RowLocationRetRowSource is the mechanism for iterating over a set of rows,
1:eac0369:   loading those rows into a conglomerate, and returning the RowLocation of the
1:eac0369:   inserted rows. 
1:eac0369: 
1:eac0369:   @see RowSource
1:eac0369: 
1:eac0369: */ 
1:eac0369: public interface RowLocationRetRowSource extends RowSource 
1:eac0369: {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		needsRowLocation returns true iff this the row source expects the
1:eac0369: 		drainer of the row source to call rowLocation after getting a row from
1:eac0369: 		getNextRowFromRowSource.
1:eac0369: 
1:eac0369: 		@return true iff this row source expects some row location to be
1:eac0369: 		returned 
1:eac0369: 		@see #rowLocation
1:eac0369: 	 */
1:eac0369: 	boolean needsRowLocation();
1:eac0369: 
1:af1c18c:     boolean needsRowLocationForDeferredCheckConstraints();
1:af1c18c: 
1:eac0369: 	/**
1:eac0369: 		rowLocation is a callback for the drainer of the row source to return
1:eac0369: 		the rowLocation of the current row, i.e, the row that is being returned
1:eac0369: 		by getNextRowFromRowSource.  This interface is for the purpose of
1:eac0369: 		loading a base table with index.  In that case, the indices can be
1:eac0369: 		built at the same time the base table is laid down once the row
1:eac0369: 		location of the base row is known.  This is an example pseudo code on
1:eac0369: 		how this call is expected to be used:
1:eac0369: 		
1:eac0369: 		<BR><pre>
1:eac0369: 		boolean needsRL = rowSource.needsRowLocation();
1:eac0369: 		DataValueDescriptor[] row;
1:eac0369: 		while((row = rowSource.getNextRowFromRowSource()) != null)
1:eac0369: 		{
1:eac0369: 			RowLocation rl = heapConglomerate.insertRow(row);
1:eac0369: 			if (needsRL)
1:eac0369: 				rowSource.rowLocation(rl);
1:eac0369: 		}
1:eac0369: 		</pre><BR>
1:eac0369: 
1:eac0369: 		NeedsRowLocation and rowLocation will ONLY be called by a drainer of
1:eac0369: 		the row source which CAN return a row location.  Drainer of row source
1:af1c18c:         which cannot return rowLocation will guarantee to not call either
1:eac0369: 		callbacks. Conversely, if NeedsRowLocation is called and it returns
1:eac0369: 		true, then for every row return by getNextRowFromRowSource, a
1:eac0369: 		rowLocation callback must also be issued with the row location of the
1:eac0369: 		row.  Implementor of both the source and the drain of the row source
1:eac0369: 		must be aware of this protocol.
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		The RowLocation object is own by the caller of rowLocation, in other
1:eac0369: 		words, the drainer of the RowSource.  This is so that we don't need to
1:eac0369: 		new a row location for every row.  If the Row Source wants to keep the
1:eac0369: 		row location, it needs to clone it (RowLocation is a ClonableObject).
1:eac0369: 		@exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	void rowLocation(RowLocation rl) throws StandardException;
1:af1c18c: 
1:af1c18c:     void offendingRowLocation(
1:af1c18c:             RowLocation rl, long containdId) throws StandardException;
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1:     boolean needsRowLocationForDeferredCheckConstraints();
1: 
/////////////////////////////////////////////////////////////////////////
1:         which cannot return rowLocation will guarantee to not call either
/////////////////////////////////////////////////////////////////////////
1: 
1:     void offendingRowLocation(
1:             RowLocation rl, long containdId) throws StandardException;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.RowLocationRetRowSource
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: /**
1: 
1:   A RowLocationRetRowSource is the mechanism for iterating over a set of rows,
1:   loading those rows into a conglomerate, and returning the RowLocation of the
1:   inserted rows. 
1: 
1:   @see RowSource
1: 
1: */ 
1: public interface RowLocationRetRowSource extends RowSource 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	/**
1: 		needsRowLocation returns true iff this the row source expects the
1: 		drainer of the row source to call rowLocation after getting a row from
1: 		getNextRowFromRowSource.
1: 
1: 		@return true iff this row source expects some row location to be
1: 		returned 
1: 		@see #rowLocation
1: 	 */
1: 	boolean needsRowLocation();
1: 
1: 	/**
1: 		rowLocation is a callback for the drainer of the row source to return
1: 		the rowLocation of the current row, i.e, the row that is being returned
1: 		by getNextRowFromRowSource.  This interface is for the purpose of
1: 		loading a base table with index.  In that case, the indices can be
1: 		built at the same time the base table is laid down once the row
1: 		location of the base row is known.  This is an example pseudo code on
1: 		how this call is expected to be used:
1: 		
1: 		<BR><pre>
1: 		boolean needsRL = rowSource.needsRowLocation();
1: 		DataValueDescriptor[] row;
1: 		while((row = rowSource.getNextRowFromRowSource()) != null)
1: 		{
1: 			RowLocation rl = heapConglomerate.insertRow(row);
1: 			if (needsRL)
1: 				rowSource.rowLocation(rl);
1: 		}
1: 		</pre><BR>
1: 
1: 		NeedsRowLocation and rowLocation will ONLY be called by a drainer of
1: 		the row source which CAN return a row location.  Drainer of row source
0: 		which cannot return rowLocation will guarentee to not call either
1: 		callbacks. Conversely, if NeedsRowLocation is called and it returns
1: 		true, then for every row return by getNextRowFromRowSource, a
1: 		rowLocation callback must also be issued with the row location of the
1: 		row.  Implementor of both the source and the drain of the row source
1: 		must be aware of this protocol.
1: 
1: 		<BR>
1: 		The RowLocation object is own by the caller of rowLocation, in other
1: 		words, the drainer of the RowSource.  This is so that we don't need to
1: 		new a row location for every row.  If the Row Source wants to keep the
1: 		row location, it needs to clone it (RowLocation is a ClonableObject).
1: 		@exception StandardException on error
1: 	 */
1: 	void rowLocation(RowLocation rl) throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: /**
0: 
0:   A RowLocationRetRowSource is the mechanism for iterating over a set of rows,
0:   loading those rows into a conglomerate, and returning the RowLocation of the
0:   inserted rows. 
0: 
0:   @see RowSource
0: 
0: */ 
0: public interface RowLocationRetRowSource extends RowSource 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/**
0: 		needsRowLocation returns true iff this the row source expects the
0: 		drainer of the row source to call rowLocation after getting a row from
0: 		getNextRowFromRowSource.
0: 
0: 		@return true iff this row source expects some row location to be
0: 		returned 
0: 		@see #rowLocation
0: 	 */
0: 	boolean needsRowLocation();
0: 
0: 	/**
0: 		rowLocation is a callback for the drainer of the row source to return
0: 		the rowLocation of the current row, i.e, the row that is being returned
0: 		by getNextRowFromRowSource.  This interface is for the purpose of
0: 		loading a base table with index.  In that case, the indices can be
0: 		built at the same time the base table is laid down once the row
0: 		location of the base row is known.  This is an example pseudo code on
0: 		how this call is expected to be used:
0: 		
0: 		<BR><pre>
0: 		boolean needsRL = rowSource.needsRowLocation();
0: 		DataValueDescriptor[] row;
0: 		while((row = rowSource.getNextRowFromRowSource()) != null)
0: 		{
0: 			RowLocation rl = heapConglomerate.insertRow(row);
0: 			if (needsRL)
0: 				rowSource.rowLocation(rl);
0: 		}
0: 		</pre><BR>
0: 
0: 		NeedsRowLocation and rowLocation will ONLY be called by a drainer of
0: 		the row source which CAN return a row location.  Drainer of row source
0: 		which cannot return rowLocation will guarentee to not call either
0: 		callbacks. Conversely, if NeedsRowLocation is called and it returns
0: 		true, then for every row return by getNextRowFromRowSource, a
0: 		rowLocation callback must also be issued with the row location of the
0: 		row.  Implementor of both the source and the drain of the row source
0: 		must be aware of this protocol.
0: 
0: 		<BR>
0: 		The RowLocation object is own by the caller of rowLocation, in other
0: 		words, the drainer of the RowSource.  This is so that we don't need to
0: 		new a row location for every row.  If the Row Source wants to keep the
0: 		row location, it needs to clone it (RowLocation is a ClonableObject).
0: 		@exception StandardException on error
0: 	 */
0: 	void rowLocation(RowLocation rl) throws StandardException;
0: }
============================================================================