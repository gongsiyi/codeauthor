1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl
1:345de35: 
1:0cc1b09:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0cc1b09:    contributor license agreements.  See the NOTICE file distributed with
1:0cc1b09:    this work for additional information regarding copyright ownership.
1:0cc1b09:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0cc1b09:    (the "License"); you may not use this file except in compliance with
1:0cc1b09:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute.rts;
1:eac0369: 
1:5825332: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
1:36b4892: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableHashtable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.RunTimeStatistics;
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1:bc2c59e: import org.apache.derby.iapi.types.DataTypeUtilities;
1:48a9884: 
1:eac0369: import java.util.Vector;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.sql.Timestamp;
1:eac0369: 
2:eac0369: /**
1:eac0369:   RunTimeStatistics implemenation.
1:eac0369: 
1:eac0369: 
1:eac0369: */
1:eac0369: public final class RunTimeStatisticsImpl implements RunTimeStatistics
1:eac0369: {
1:eac0369: 
1:eac0369: 
1:eac0369: 	/* Leave these fields public for object inspectors */
1:eac0369: 	public String	statementText;
1:eac0369: 	public String  statementName;
1:eac0369: 	public String  spsName;
1:eac0369: 	public long   	parseTime;
1:eac0369: 	public long   	bindTime;
1:eac0369: 	public long   	optimizeTime;
1:eac0369: 	public long   	generateTime;
1:eac0369: 	public long	compileTime;
1:eac0369: 	public long	executeTime;
1:eac0369: 	public Timestamp beginCompilationTimestamp;
1:eac0369: 	public Timestamp endCompilationTimestamp;
1:eac0369: 	public Timestamp beginExecutionTimestamp;
1:eac0369: 	public Timestamp endExecutionTimestamp;
1:eac0369: 	public ResultSetStatistics topResultSetStatistics;
1:eac0369: 	public ResultSetStatistics[] subqueryTrackingArray;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 	/**
1:eac0369: 	 * 
1:eac0369: 	 */
1:eac0369:     public	RunTimeStatisticsImpl(
1:eac0369: 									String spsName,
1:eac0369: 									String statementName,
1:eac0369: 									String statementText,
1:eac0369: 									long compileTime,
1:eac0369: 									long parseTime,
1:eac0369: 									long bindTime,
1:eac0369: 									long optimizeTime,
1:eac0369: 									long generateTime,
1:eac0369: 									long executeTime,
1:eac0369: 									Timestamp beginCompilationTimestamp,
1:eac0369: 									Timestamp endCompilationTimestamp,
1:eac0369: 									Timestamp beginExecutionTimestamp,
1:eac0369: 									Timestamp endExecutionTimestamp,
1:eac0369: 									ResultSetStatistics[] subqueryTrackingArray,
1:eac0369: 									ResultSetStatistics topResultSetStatistics)
1:eac0369: 	{
1:eac0369: 		this.spsName = spsName;
1:eac0369: 		this.statementName = statementName;
1:eac0369: 		this.statementText = statementText;
1:eac0369: 		this.compileTime = compileTime;
1:eac0369: 		this.parseTime = parseTime;
1:eac0369: 		this.bindTime = bindTime;
1:eac0369: 		this.optimizeTime = optimizeTime;
1:eac0369: 		this.generateTime = generateTime;
1:eac0369: 		this.executeTime = executeTime;
1:bc2c59e: 		this.beginCompilationTimestamp = DataTypeUtilities.clone( beginCompilationTimestamp );
1:bc2c59e: 		this.endCompilationTimestamp = DataTypeUtilities.clone( endCompilationTimestamp );
1:bc2c59e: 		this.beginExecutionTimestamp = DataTypeUtilities.clone( beginExecutionTimestamp );
1:bc2c59e: 		this.endExecutionTimestamp = DataTypeUtilities.clone( endExecutionTimestamp );
1:3f7581c:         this.subqueryTrackingArray = ArrayUtil.copy(subqueryTrackingArray);
1:eac0369: 		this.topResultSetStatistics = topResultSetStatistics;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// RunTimeStatistics methods
1:eac0369: 	/**
1:eac0369: 	 * Get the total compile time for the associated query in milliseconds.
1:eac0369: 	 * Compile time can be divided into parse, bind, optimize and generate times.
1:eac0369: 	 * 
1:eac0369: 	 * @return long		The total compile time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getCompileTimeInMillis()
1:eac0369: 	{
1:eac0369: 		return compileTime;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the parse time for the associated query in milliseconds.
1:eac0369: 	 * 
1:eac0369: 	 * @return long		The parse time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getParseTimeInMillis()
1:eac0369: 	{
1:eac0369: 		return parseTime;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the bind time for the associated query in milliseconds.
1:eac0369: 	 * 
1:eac0369: 	 * @return long		The bind time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getBindTimeInMillis()
1:eac0369: 	{
1:eac0369: 		return bindTime;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the optimize time for the associated query in milliseconds.
1:eac0369: 	 * 
1:eac0369: 	 * @return long		The optimize time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getOptimizeTimeInMillis()
1:eac0369: 	{
1:eac0369: 		return optimizeTime;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the generate time for the associated query in milliseconds.
1:eac0369: 	 * 
1:eac0369: 	 * @return long		The generate time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getGenerateTimeInMillis()
1:eac0369: 	{
1:eac0369: 		return generateTime;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the execute time for the associated query in milliseconds.
1:eac0369: 	 * 
1:eac0369: 	 * @return long		The execute time for the associated query in milliseconds.
1:eac0369: 	 */
1:eac0369: 	public long getExecuteTimeInMillis()
1:eac0369: 	{
1:eac0369: 		return executeTime;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the timestamp for the beginning of query compilation. 
1:eac0369: 	 *
1:eac0369: 	 * @return java.sql.Timestamp	The timestamp for the beginning of query compilation.
1:eac0369: 	 */
1:eac0369: 	public Timestamp getBeginCompilationTimestamp()
1:eac0369: 	{
1:bc2c59e: 		return DataTypeUtilities.clone( beginCompilationTimestamp );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the timestamp for the end of query compilation. 
1:eac0369: 	 *
1:eac0369: 	 * @return java.sql.Timestamp	The timestamp for the end of query compilation.
1:eac0369: 	 */
1:eac0369: 	public Timestamp getEndCompilationTimestamp()
1:eac0369: 	{
1:bc2c59e: 		return DataTypeUtilities.clone( endCompilationTimestamp );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the timestamp for the beginning of query execution. 
1:eac0369: 	 *
1:eac0369: 	 * @return java.sql.Timestamp	The timestamp for the beginning of query execution.
1:eac0369: 	 */
1:eac0369: 	public Timestamp getBeginExecutionTimestamp()
1:eac0369: 	{
1:bc2c59e: 		return DataTypeUtilities.clone( beginExecutionTimestamp );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the timestamp for the end of query execution. 
1:eac0369: 	 *
1:eac0369: 	 * @return java.sql.Timestamp	The timestamp for the end of query execution.
1:eac0369: 	 */
1:eac0369: 	public Timestamp getEndExecutionTimestamp()
1:eac0369: 	{
1:bc2c59e: 		return DataTypeUtilities.clone( endExecutionTimestamp );
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the name of the associated query or statement.
1:eac0369: 	 * (This will be an internally generated name if the
1:eac0369: 	 * user did not assign a name.)
1:eac0369: 	 *
1:eac0369: 	 * @return java.lang.String	The name of the associated query or statement.
1:eac0369: 	 */
1:eac0369: 	public String getStatementName()	
1:eac0369: 	{
1:eac0369: 		return statementName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the name of the Stored Prepared Statement 
1:eac0369: 	 * for the statement.
1:eac0369: 	 *
1:eac0369: 	 * @return java.lang.String	The SPS name of the associated query or statement.
1:eac0369: 	 */
1:eac0369: 	public String getSPSName()	
1:eac0369: 	{
1:eac0369: 		return spsName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the text for the associated query or statement.
1:eac0369: 	 *
1:eac0369: 	 * @return java.lang.String	The text for the associated query or statement.
1:eac0369: 	 */
1:eac0369: 	public String getStatementText()
1:eac0369: 	{
1:eac0369: 		return statementText;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the estimated row count for the number of rows returned
1:eac0369: 	 * by the associated query or statement.
1:eac0369: 	 *
1:eac0369: 	 * @return	The estimated number of rows returned by the associated
1:eac0369: 	 * query or statement.
1:eac0369: 	 */
1:eac0369: 	public double getEstimatedRowCount()
1:eac0369: 	{
1:eac0369: 		if (topResultSetStatistics == null)
1:eac0369: 		{
1:eac0369: 			return 0.0;
1:eac0369: 		}
1:eac0369: 		return topResultSetStatistics.getEstimatedRowCount();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the execution plan for the associated query or statement as a String.
1:eac0369: 	 *
1:eac0369: 	 * @return java.lang.String	The execution plan for the associated query or statement.
1:eac0369: 	 */
1:eac0369: 	public String getStatementExecutionPlanText()	
1:eac0369: 	{
1:eac0369: 		if (topResultSetStatistics == null)
1:eac0369: 		{
1:eac0369: 			return (String) null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		String subqueryInfo = "";
1:eac0369: 
1:eac0369: 		/* Dump out the statistics for any subqueries */
1:eac0369: 
1:eac0369: 		if (subqueryTrackingArray != null)
1:eac0369: 		{
1:eac0369: 			boolean	foundAttached = false;
1:eac0369: 
1:eac0369: 			for (int index = 0; index < subqueryTrackingArray.length; index++)
1:eac0369: 			{
1:eac0369: 				if (subqueryTrackingArray[index] != null)
1:eac0369: 				{
1:eac0369: 					/* Only print attached subqueries message once */
1:eac0369: 					if (! foundAttached)
1:eac0369: 					{
1:eac0369: 						subqueryInfo = MessageService.getTextMessage(
1:eac0369: 											SQLState.RTS_MATERIALIZED_SUBQS) +
1:eac0369: 										":\n";
1:eac0369: 						foundAttached = true;
1:eac0369: 					}
1:eac0369: 					subqueryInfo = subqueryInfo +
1:eac0369: 						subqueryTrackingArray[index].getStatementExecutionPlanText(1);
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return subqueryInfo +
1:eac0369: 			topResultSetStatistics.getStatementExecutionPlanText(0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the information on the nodes relating to table and index scans
1:eac0369: 	 * from the execution plan for the associated query or statement as a String.
1:eac0369: 	 *
1:eac0369: 	 * @return java.lang.String	The nodes relating to table and index scans
1:eac0369: 	 * from the execution plan for the associated query or statement.
1:eac0369: 	 */
1:eac0369: 	public String getScanStatisticsText()
1:eac0369: 	{
1:eac0369: 		return (topResultSetStatistics == null) ? 
1:eac0369: 			(String)null :
1:eac0369: 			topResultSetStatistics.getScanStatisticsText(null, 0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the information on the nodes relating to table and index scans
1:eac0369: 	 * for table tableName from the execution plan for the associated query 
1:eac0369: 	 * or statement as a String.
1:eac0369: 	 *
1:eac0369: 	 * @param tableName table for which user seeks statistics.
1:eac0369: 	 *
1:eac0369: 	 * @return java.lang.String	The nodes relating to table and index scans
1:eac0369: 	 * from the execution plan for the associated query or statement for 
1:eac0369: 	 * tableName.
1:eac0369: 	 */
1:eac0369: 	public String getScanStatisticsText(String tableName)
1:eac0369: 	{
1:eac0369: 		if (topResultSetStatistics == null) 
1:eac0369: 			return (String)null;
1:eac0369: 		String s = topResultSetStatistics.getScanStatisticsText(tableName, 0);
1:eac0369: 		return (s.equals("")) ? null : s;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	// Class implementation
1:eac0369: 	
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		String spstext = 
1:eac0369: 			(spsName != null) ? 
1:eac0369: 					("Stored Prepared Statement Name: \n\t" + spsName + "\n") : 
1:eac0369: 					"";
1:eac0369: 		return 
1:eac0369: 			spstext +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_STATEMENT_NAME) +
1:eac0369: 				": \n\t" + statementName + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_STATEMENT_TEXT) +
1:eac0369: 				": \n\t" + statementText + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_PARSE_TIME) +
1:eac0369: 				": " + parseTime + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_BIND_TIME) +
1:eac0369: 				": " + bindTime + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_OPTIMIZE_TIME) +
1:eac0369: 				": " + optimizeTime + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_GENERATE_TIME) +
1:eac0369: 				": " + generateTime + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_COMPILE_TIME) +
1:eac0369: 				": " + compileTime + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_EXECUTE_TIME) +
1:eac0369: 				": " + executeTime + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_BEGIN_COMP_TS) +
1:eac0369: 				" : " + beginCompilationTimestamp + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_END_COMP_TS) +
1:eac0369: 				" : " + endCompilationTimestamp + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_BEGIN_EXE_TS) +
1:eac0369: 				" : " + beginExecutionTimestamp + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_END_EXE_TS) +
1:eac0369: 				" : " + endExecutionTimestamp + "\n" +
1:eac0369: 			MessageService.getTextMessage(SQLState.RTS_STMT_EXE_PLAN_TXT) +
1:eac0369: 				": \n" + getStatementExecutionPlanText();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the objects to be displayed when this tree object is expanded.
1:eac0369: 	 * <P>
1:eac0369: 	 * The objects returned can be of any type, including addtional Inspectables.
1:eac0369:    *
1:eac0369: 	 * @return java.util.Vector	A vector of objects.
1:eac0369: 	 */
1:9d5bd0e:   public Vector<ResultSetStatistics> getChildren(){
1:9d5bd0e:     Vector<ResultSetStatistics> children = new Vector<ResultSetStatistics>();
1:eac0369:     children.addElement(topResultSetStatistics);
1:eac0369:     return children;
1:eac0369:   }
1:48a9884:   
1:48a9884:   /**
1:48a9884:    * initiate a visit of an XPLAINVisitor from the top of the RS tree
1:48a9884:    */
1:48a9884:   public void acceptFromTopResultSet(XPLAINVisitor v)
1:48a9884:   {
1:48a9884:       if (topResultSetStatistics != null)
1:48a9884:           topResultSetStatistics.accept(v);
1:48a9884:   }
1:48a9884:   
1:eac0369: 
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f7581c
/////////////////////////////////////////////////////////////////////////
1:         this.subqueryTrackingArray = ArrayUtil.copy(subqueryTrackingArray);
commit:5825332
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9d5bd0e
/////////////////////////////////////////////////////////////////////////
1:   public Vector<ResultSetStatistics> getChildren(){
1:     Vector<ResultSetStatistics> children = new Vector<ResultSetStatistics>();
commit:bc2c59e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeUtilities;
/////////////////////////////////////////////////////////////////////////
1: 		this.beginCompilationTimestamp = DataTypeUtilities.clone( beginCompilationTimestamp );
1: 		this.endCompilationTimestamp = DataTypeUtilities.clone( endCompilationTimestamp );
1: 		this.beginExecutionTimestamp = DataTypeUtilities.clone( beginExecutionTimestamp );
1: 		this.endExecutionTimestamp = DataTypeUtilities.clone( endExecutionTimestamp );
/////////////////////////////////////////////////////////////////////////
1: 		return DataTypeUtilities.clone( beginCompilationTimestamp );
/////////////////////////////////////////////////////////////////////////
1: 		return DataTypeUtilities.clone( endCompilationTimestamp );
/////////////////////////////////////////////////////////////////////////
1: 		return DataTypeUtilities.clone( beginExecutionTimestamp );
/////////////////////////////////////////////////////////////////////////
1: 		return DataTypeUtilities.clone( endExecutionTimestamp );
commit:36b4892
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
0: 		this.beginCompilationTimestamp =beginCompilationTimestamp == null ?
0:             null : (Timestamp) beginCompilationTimestamp.clone();
0: 		this.endCompilationTimestamp = endCompilationTimestamp == null ?
0:             null : (Timestamp) endCompilationTimestamp.clone();
0: 		this.beginExecutionTimestamp = beginExecutionTimestamp == null ?
0:             null : (Timestamp) beginExecutionTimestamp.clone();
0: 		this.endExecutionTimestamp = endExecutionTimestamp == null ?
0:             null : (Timestamp) endExecutionTimestamp.clone();
0: 		this.subqueryTrackingArray = (ResultSetStatistics[]) ArrayUtil.copy( subqueryTrackingArray );
/////////////////////////////////////////////////////////////////////////
0: 		return beginCompilationTimestamp == null ?  null : (Timestamp) beginCompilationTimestamp.clone();
/////////////////////////////////////////////////////////////////////////
0: 		return endCompilationTimestamp == null ? null : (Timestamp) endCompilationTimestamp.clone();
/////////////////////////////////////////////////////////////////////////
0: 		return beginExecutionTimestamp == null ? null : (Timestamp) beginExecutionTimestamp.clone();
/////////////////////////////////////////////////////////////////////////
0: 		return endExecutionTimestamp == null ? null : (Timestamp) endExecutionTimestamp.clone();
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1: 
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * initiate a visit of an XPLAINVisitor from the top of the RS tree
1:    */
1:   public void acceptFromTopResultSet(XPLAINVisitor v)
1:   {
1:       if (topResultSetStatistics != null)
1:           topResultSetStatistics.accept(v);
1:   }
1:   
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:0cc1b09
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.io.FormatableHashtable;
1: 
1: import org.apache.derby.iapi.sql.execute.RunTimeStatistics;
1: import java.util.Vector;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: import java.sql.Timestamp;
1: 
1: /**
1:   RunTimeStatistics implemenation.
1: 
0:   @author jerry
1: 
1: */
1: public final class RunTimeStatisticsImpl implements RunTimeStatistics
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 
1: 	/* Leave these fields public for object inspectors */
1: 	public String	statementText;
1: 	public String  statementName;
1: 	public String  spsName;
1: 	public long   	parseTime;
1: 	public long   	bindTime;
1: 	public long   	optimizeTime;
1: 	public long   	generateTime;
1: 	public long	compileTime;
1: 	public long	executeTime;
1: 	public Timestamp beginCompilationTimestamp;
1: 	public Timestamp endCompilationTimestamp;
1: 	public Timestamp beginExecutionTimestamp;
1: 	public Timestamp endExecutionTimestamp;
1: 	public ResultSetStatistics topResultSetStatistics;
1: 	public ResultSetStatistics[] subqueryTrackingArray;
1: 
1: 	// CONSTRUCTORS
1: 	/**
1: 	 * 
1: 	 */
1:     public	RunTimeStatisticsImpl(
1: 									String spsName,
1: 									String statementName,
1: 									String statementText,
1: 									long compileTime,
1: 									long parseTime,
1: 									long bindTime,
1: 									long optimizeTime,
1: 									long generateTime,
1: 									long executeTime,
1: 									Timestamp beginCompilationTimestamp,
1: 									Timestamp endCompilationTimestamp,
1: 									Timestamp beginExecutionTimestamp,
1: 									Timestamp endExecutionTimestamp,
1: 									ResultSetStatistics[] subqueryTrackingArray,
1: 									ResultSetStatistics topResultSetStatistics)
1: 	{
1: 		this.spsName = spsName;
1: 		this.statementName = statementName;
1: 		this.statementText = statementText;
1: 		this.compileTime = compileTime;
1: 		this.parseTime = parseTime;
1: 		this.bindTime = bindTime;
1: 		this.optimizeTime = optimizeTime;
1: 		this.generateTime = generateTime;
1: 		this.executeTime = executeTime;
0: 		this.beginCompilationTimestamp = beginCompilationTimestamp;
0: 		this.endCompilationTimestamp = endCompilationTimestamp;
0: 		this.beginExecutionTimestamp = beginExecutionTimestamp;
0: 		this.endExecutionTimestamp = endExecutionTimestamp;
0: 		this.subqueryTrackingArray = subqueryTrackingArray;
1: 		this.topResultSetStatistics = topResultSetStatistics;
1: 	}
1: 
1: 	// RunTimeStatistics methods
1: 	/**
1: 	 * Get the total compile time for the associated query in milliseconds.
1: 	 * Compile time can be divided into parse, bind, optimize and generate times.
1: 	 * 
1: 	 * @return long		The total compile time for the associated query in milliseconds.
1: 	 */
1: 	public long getCompileTimeInMillis()
1: 	{
1: 		return compileTime;
1: 	}
1: 
1: 	/**
1: 	 * Get the parse time for the associated query in milliseconds.
1: 	 * 
1: 	 * @return long		The parse time for the associated query in milliseconds.
1: 	 */
1: 	public long getParseTimeInMillis()
1: 	{
1: 		return parseTime;
1: 	}
1: 
1: 	/**
1: 	 * Get the bind time for the associated query in milliseconds.
1: 	 * 
1: 	 * @return long		The bind time for the associated query in milliseconds.
1: 	 */
1: 	public long getBindTimeInMillis()
1: 	{
1: 		return bindTime;
1: 	}
1: 
1: 	/**
1: 	 * Get the optimize time for the associated query in milliseconds.
1: 	 * 
1: 	 * @return long		The optimize time for the associated query in milliseconds.
1: 	 */
1: 	public long getOptimizeTimeInMillis()
1: 	{
1: 		return optimizeTime;
1: 	}
1: 
1: 	/**
1: 	 * Get the generate time for the associated query in milliseconds.
1: 	 * 
1: 	 * @return long		The generate time for the associated query in milliseconds.
1: 	 */
1: 	public long getGenerateTimeInMillis()
1: 	{
1: 		return generateTime;
1: 	}
1: 
1: 	/**
1: 	 * Get the execute time for the associated query in milliseconds.
1: 	 * 
1: 	 * @return long		The execute time for the associated query in milliseconds.
1: 	 */
1: 	public long getExecuteTimeInMillis()
1: 	{
1: 		return executeTime;
1: 	}
1: 
1: 	/**
1: 	 * Get the timestamp for the beginning of query compilation. 
1: 	 *
1: 	 * @return java.sql.Timestamp	The timestamp for the beginning of query compilation.
1: 	 */
1: 	public Timestamp getBeginCompilationTimestamp()
1: 	{
0: 		return beginCompilationTimestamp;
1: 	}
1: 
1: 	/**
1: 	 * Get the timestamp for the end of query compilation. 
1: 	 *
1: 	 * @return java.sql.Timestamp	The timestamp for the end of query compilation.
1: 	 */
1: 	public Timestamp getEndCompilationTimestamp()
1: 	{
0: 		return endCompilationTimestamp;
1: 	}
1: 
1: 	/**
1: 	 * Get the timestamp for the beginning of query execution. 
1: 	 *
1: 	 * @return java.sql.Timestamp	The timestamp for the beginning of query execution.
1: 	 */
1: 	public Timestamp getBeginExecutionTimestamp()
1: 	{
0: 		return beginExecutionTimestamp;
1: 	}
1: 
1: 	/**
1: 	 * Get the timestamp for the end of query execution. 
1: 	 *
1: 	 * @return java.sql.Timestamp	The timestamp for the end of query execution.
1: 	 */
1: 	public Timestamp getEndExecutionTimestamp()
1: 	{
0: 		return endExecutionTimestamp;
1: 	}
1: 
1: 	/**
1: 	 * Get the name of the associated query or statement.
1: 	 * (This will be an internally generated name if the
1: 	 * user did not assign a name.)
1: 	 *
1: 	 * @return java.lang.String	The name of the associated query or statement.
1: 	 */
1: 	public String getStatementName()	
1: 	{
1: 		return statementName;
1: 	}
1: 
1: 	/**
1: 	 * Get the name of the Stored Prepared Statement 
1: 	 * for the statement.
1: 	 *
1: 	 * @return java.lang.String	The SPS name of the associated query or statement.
1: 	 */
1: 	public String getSPSName()	
1: 	{
1: 		return spsName;
1: 	}
1: 
1: 	/**
1: 	 * Get the text for the associated query or statement.
1: 	 *
1: 	 * @return java.lang.String	The text for the associated query or statement.
1: 	 */
1: 	public String getStatementText()
1: 	{
1: 		return statementText;
1: 	}
1: 
1: 	/**
1: 	 * Get the estimated row count for the number of rows returned
1: 	 * by the associated query or statement.
1: 	 *
1: 	 * @return	The estimated number of rows returned by the associated
1: 	 * query or statement.
1: 	 */
1: 	public double getEstimatedRowCount()
1: 	{
1: 		if (topResultSetStatistics == null)
1: 		{
1: 			return 0.0;
1: 		}
1: 		return topResultSetStatistics.getEstimatedRowCount();
1: 	}
1: 
1: 	/**
1: 	 * Get the execution plan for the associated query or statement as a String.
1: 	 *
1: 	 * @return java.lang.String	The execution plan for the associated query or statement.
1: 	 */
1: 	public String getStatementExecutionPlanText()	
1: 	{
1: 		if (topResultSetStatistics == null)
1: 		{
1: 			return (String) null;
1: 		}
1: 
1: 		String subqueryInfo = "";
1: 
1: 		/* Dump out the statistics for any subqueries */
1: 
1: 		if (subqueryTrackingArray != null)
1: 		{
1: 			boolean	foundAttached = false;
1: 
1: 			for (int index = 0; index < subqueryTrackingArray.length; index++)
1: 			{
1: 				if (subqueryTrackingArray[index] != null)
1: 				{
1: 					/* Only print attached subqueries message once */
1: 					if (! foundAttached)
1: 					{
1: 						subqueryInfo = MessageService.getTextMessage(
1: 											SQLState.RTS_MATERIALIZED_SUBQS) +
1: 										":\n";
1: 						foundAttached = true;
1: 					}
1: 					subqueryInfo = subqueryInfo +
1: 						subqueryTrackingArray[index].getStatementExecutionPlanText(1);
1: 				}
1: 			}
1: 		}
1: 		return subqueryInfo +
1: 			topResultSetStatistics.getStatementExecutionPlanText(0);
1: 	}
1: 
1: 	/**
1: 	 * Get the information on the nodes relating to table and index scans
1: 	 * from the execution plan for the associated query or statement as a String.
1: 	 *
1: 	 * @return java.lang.String	The nodes relating to table and index scans
1: 	 * from the execution plan for the associated query or statement.
1: 	 */
1: 	public String getScanStatisticsText()
1: 	{
1: 		return (topResultSetStatistics == null) ? 
1: 			(String)null :
1: 			topResultSetStatistics.getScanStatisticsText(null, 0);
1: 	}
1: 
1: 	/**
1: 	 * Get the information on the nodes relating to table and index scans
1: 	 * for table tableName from the execution plan for the associated query 
1: 	 * or statement as a String.
1: 	 *
1: 	 * @param tableName table for which user seeks statistics.
1: 	 *
1: 	 * @return java.lang.String	The nodes relating to table and index scans
1: 	 * from the execution plan for the associated query or statement for 
1: 	 * tableName.
1: 	 */
1: 	public String getScanStatisticsText(String tableName)
1: 	{
1: 		if (topResultSetStatistics == null) 
1: 			return (String)null;
1: 		String s = topResultSetStatistics.getScanStatisticsText(tableName, 0);
1: 		return (s.equals("")) ? null : s;
1: 	}
1: 
1: 
1: 
1: 	// Class implementation
1: 	
1: 	public String toString()
1: 	{
1: 		String spstext = 
1: 			(spsName != null) ? 
1: 					("Stored Prepared Statement Name: \n\t" + spsName + "\n") : 
1: 					"";
1: 		return 
1: 			spstext +
1: 			MessageService.getTextMessage(SQLState.RTS_STATEMENT_NAME) +
1: 				": \n\t" + statementName + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_STATEMENT_TEXT) +
1: 				": \n\t" + statementText + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_PARSE_TIME) +
1: 				": " + parseTime + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_BIND_TIME) +
1: 				": " + bindTime + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_OPTIMIZE_TIME) +
1: 				": " + optimizeTime + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_GENERATE_TIME) +
1: 				": " + generateTime + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_COMPILE_TIME) +
1: 				": " + compileTime + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_EXECUTE_TIME) +
1: 				": " + executeTime + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_BEGIN_COMP_TS) +
1: 				" : " + beginCompilationTimestamp + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_END_COMP_TS) +
1: 				" : " + endCompilationTimestamp + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_BEGIN_EXE_TS) +
1: 				" : " + beginExecutionTimestamp + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_END_EXE_TS) +
1: 				" : " + endExecutionTimestamp + "\n" +
1: 			MessageService.getTextMessage(SQLState.RTS_STMT_EXE_PLAN_TXT) +
1: 				": \n" + getStatementExecutionPlanText();
1: 	}
1: 
1: 	/**
1: 	 * Get the objects to be displayed when this tree object is expanded.
1: 	 * <P>
1: 	 * The objects returned can be of any type, including addtional Inspectables.
1:    *
1: 	 * @return java.util.Vector	A vector of objects.
1: 	 */
0:   public Vector getChildren(){
0:     Vector children = new Vector();
1:     children.addElement(topResultSetStatistics);
1:     return children;
1:   }
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute.rts;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: 
0: import org.apache.derby.iapi.sql.execute.RunTimeStatistics;
0: import java.util.Vector;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.sql.Timestamp;
0: 
0: /**
0:   RunTimeStatistics implemenation.
0: 
0:   @author jerry
0: 
0: */
0: public final class RunTimeStatisticsImpl implements RunTimeStatistics
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 
0: 	/* Leave these fields public for object inspectors */
0: 	public String	statementText;
0: 	public String  statementName;
0: 	public String  spsName;
0: 	public long   	parseTime;
0: 	public long   	bindTime;
0: 	public long   	optimizeTime;
0: 	public long   	generateTime;
0: 	public long	compileTime;
0: 	public long	executeTime;
0: 	public Timestamp beginCompilationTimestamp;
0: 	public Timestamp endCompilationTimestamp;
0: 	public Timestamp beginExecutionTimestamp;
0: 	public Timestamp endExecutionTimestamp;
0: 	public ResultSetStatistics topResultSetStatistics;
0: 	public ResultSetStatistics[] subqueryTrackingArray;
0: 
0: 	// CONSTRUCTORS
0: 	/**
0: 	 * 
0: 	 */
0:     public	RunTimeStatisticsImpl(
0: 									String spsName,
0: 									String statementName,
0: 									String statementText,
0: 									long compileTime,
0: 									long parseTime,
0: 									long bindTime,
0: 									long optimizeTime,
0: 									long generateTime,
0: 									long executeTime,
0: 									Timestamp beginCompilationTimestamp,
0: 									Timestamp endCompilationTimestamp,
0: 									Timestamp beginExecutionTimestamp,
0: 									Timestamp endExecutionTimestamp,
0: 									ResultSetStatistics[] subqueryTrackingArray,
0: 									ResultSetStatistics topResultSetStatistics)
0: 	{
0: 		this.spsName = spsName;
0: 		this.statementName = statementName;
0: 		this.statementText = statementText;
0: 		this.compileTime = compileTime;
0: 		this.parseTime = parseTime;
0: 		this.bindTime = bindTime;
0: 		this.optimizeTime = optimizeTime;
0: 		this.generateTime = generateTime;
0: 		this.executeTime = executeTime;
0: 		this.beginCompilationTimestamp = beginCompilationTimestamp;
0: 		this.endCompilationTimestamp = endCompilationTimestamp;
0: 		this.beginExecutionTimestamp = beginExecutionTimestamp;
0: 		this.endExecutionTimestamp = endExecutionTimestamp;
0: 		this.subqueryTrackingArray = subqueryTrackingArray;
0: 		this.topResultSetStatistics = topResultSetStatistics;
0: 	}
0: 
0: 	// RunTimeStatistics methods
0: 	/**
0: 	 * Get the total compile time for the associated query in milliseconds.
0: 	 * Compile time can be divided into parse, bind, optimize and generate times.
0: 	 * 
0: 	 * @return long		The total compile time for the associated query in milliseconds.
0: 	 */
0: 	public long getCompileTimeInMillis()
0: 	{
0: 		return compileTime;
0: 	}
0: 
0: 	/**
0: 	 * Get the parse time for the associated query in milliseconds.
0: 	 * 
0: 	 * @return long		The parse time for the associated query in milliseconds.
0: 	 */
0: 	public long getParseTimeInMillis()
0: 	{
0: 		return parseTime;
0: 	}
0: 
0: 	/**
0: 	 * Get the bind time for the associated query in milliseconds.
0: 	 * 
0: 	 * @return long		The bind time for the associated query in milliseconds.
0: 	 */
0: 	public long getBindTimeInMillis()
0: 	{
0: 		return bindTime;
0: 	}
0: 
0: 	/**
0: 	 * Get the optimize time for the associated query in milliseconds.
0: 	 * 
0: 	 * @return long		The optimize time for the associated query in milliseconds.
0: 	 */
0: 	public long getOptimizeTimeInMillis()
0: 	{
0: 		return optimizeTime;
0: 	}
0: 
0: 	/**
0: 	 * Get the generate time for the associated query in milliseconds.
0: 	 * 
0: 	 * @return long		The generate time for the associated query in milliseconds.
0: 	 */
0: 	public long getGenerateTimeInMillis()
0: 	{
0: 		return generateTime;
0: 	}
0: 
0: 	/**
0: 	 * Get the execute time for the associated query in milliseconds.
0: 	 * 
0: 	 * @return long		The execute time for the associated query in milliseconds.
0: 	 */
0: 	public long getExecuteTimeInMillis()
0: 	{
0: 		return executeTime;
0: 	}
0: 
0: 	/**
0: 	 * Get the timestamp for the beginning of query compilation. 
0: 	 *
0: 	 * @return java.sql.Timestamp	The timestamp for the beginning of query compilation.
0: 	 */
0: 	public Timestamp getBeginCompilationTimestamp()
0: 	{
0: 		return beginCompilationTimestamp;
0: 	}
0: 
0: 	/**
0: 	 * Get the timestamp for the end of query compilation. 
0: 	 *
0: 	 * @return java.sql.Timestamp	The timestamp for the end of query compilation.
0: 	 */
0: 	public Timestamp getEndCompilationTimestamp()
0: 	{
0: 		return endCompilationTimestamp;
0: 	}
0: 
0: 	/**
0: 	 * Get the timestamp for the beginning of query execution. 
0: 	 *
0: 	 * @return java.sql.Timestamp	The timestamp for the beginning of query execution.
0: 	 */
0: 	public Timestamp getBeginExecutionTimestamp()
0: 	{
0: 		return beginExecutionTimestamp;
0: 	}
0: 
0: 	/**
0: 	 * Get the timestamp for the end of query execution. 
0: 	 *
0: 	 * @return java.sql.Timestamp	The timestamp for the end of query execution.
0: 	 */
0: 	public Timestamp getEndExecutionTimestamp()
0: 	{
0: 		return endExecutionTimestamp;
0: 	}
0: 
0: 	/**
0: 	 * Get the name of the associated query or statement.
0: 	 * (This will be an internally generated name if the
0: 	 * user did not assign a name.)
0: 	 *
0: 	 * @return java.lang.String	The name of the associated query or statement.
0: 	 */
0: 	public String getStatementName()	
0: 	{
0: 		return statementName;
0: 	}
0: 
0: 	/**
0: 	 * Get the name of the Stored Prepared Statement 
0: 	 * for the statement.
0: 	 *
0: 	 * @return java.lang.String	The SPS name of the associated query or statement.
0: 	 */
0: 	public String getSPSName()	
0: 	{
0: 		return spsName;
0: 	}
0: 
0: 	/**
0: 	 * Get the text for the associated query or statement.
0: 	 *
0: 	 * @return java.lang.String	The text for the associated query or statement.
0: 	 */
0: 	public String getStatementText()
0: 	{
0: 		return statementText;
0: 	}
0: 
0: 	/**
0: 	 * Get the estimated row count for the number of rows returned
0: 	 * by the associated query or statement.
0: 	 *
0: 	 * @return	The estimated number of rows returned by the associated
0: 	 * query or statement.
0: 	 */
0: 	public double getEstimatedRowCount()
0: 	{
0: 		if (topResultSetStatistics == null)
0: 		{
0: 			return 0.0;
0: 		}
0: 		return topResultSetStatistics.getEstimatedRowCount();
0: 	}
0: 
0: 	/**
0: 	 * Get the execution plan for the associated query or statement as a String.
0: 	 *
0: 	 * @return java.lang.String	The execution plan for the associated query or statement.
0: 	 */
0: 	public String getStatementExecutionPlanText()	
0: 	{
0: 		if (topResultSetStatistics == null)
0: 		{
0: 			return (String) null;
0: 		}
0: 
0: 		String subqueryInfo = "";
0: 
0: 		/* Dump out the statistics for any subqueries */
0: 
0: 		if (subqueryTrackingArray != null)
0: 		{
0: 			boolean	foundAttached = false;
0: 
0: 			for (int index = 0; index < subqueryTrackingArray.length; index++)
0: 			{
0: 				if (subqueryTrackingArray[index] != null)
0: 				{
0: 					/* Only print attached subqueries message once */
0: 					if (! foundAttached)
0: 					{
0: 						subqueryInfo = MessageService.getTextMessage(
0: 											SQLState.RTS_MATERIALIZED_SUBQS) +
0: 										":\n";
0: 						foundAttached = true;
0: 					}
0: 					subqueryInfo = subqueryInfo +
0: 						subqueryTrackingArray[index].getStatementExecutionPlanText(1);
0: 				}
0: 			}
0: 		}
0: 		return subqueryInfo +
0: 			topResultSetStatistics.getStatementExecutionPlanText(0);
0: 	}
0: 
0: 	/**
0: 	 * Get the information on the nodes relating to table and index scans
0: 	 * from the execution plan for the associated query or statement as a String.
0: 	 *
0: 	 * @return java.lang.String	The nodes relating to table and index scans
0: 	 * from the execution plan for the associated query or statement.
0: 	 */
0: 	public String getScanStatisticsText()
0: 	{
0: 		return (topResultSetStatistics == null) ? 
0: 			(String)null :
0: 			topResultSetStatistics.getScanStatisticsText(null, 0);
0: 	}
0: 
0: 	/**
0: 	 * Get the information on the nodes relating to table and index scans
0: 	 * for table tableName from the execution plan for the associated query 
0: 	 * or statement as a String.
0: 	 *
0: 	 * @param tableName table for which user seeks statistics.
0: 	 *
0: 	 * @return java.lang.String	The nodes relating to table and index scans
0: 	 * from the execution plan for the associated query or statement for 
0: 	 * tableName.
0: 	 */
0: 	public String getScanStatisticsText(String tableName)
0: 	{
0: 		if (topResultSetStatistics == null) 
0: 			return (String)null;
0: 		String s = topResultSetStatistics.getScanStatisticsText(tableName, 0);
0: 		return (s.equals("")) ? null : s;
0: 	}
0: 
0: 
0: 
0: 	// Class implementation
0: 	
0: 	public String toString()
0: 	{
0: 		String spstext = 
0: 			(spsName != null) ? 
0: 					("Stored Prepared Statement Name: \n\t" + spsName + "\n") : 
0: 					"";
0: 		return 
0: 			spstext +
0: 			MessageService.getTextMessage(SQLState.RTS_STATEMENT_NAME) +
0: 				": \n\t" + statementName + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_STATEMENT_TEXT) +
0: 				": \n\t" + statementText + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_PARSE_TIME) +
0: 				": " + parseTime + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_BIND_TIME) +
0: 				": " + bindTime + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_OPTIMIZE_TIME) +
0: 				": " + optimizeTime + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_GENERATE_TIME) +
0: 				": " + generateTime + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_COMPILE_TIME) +
0: 				": " + compileTime + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_EXECUTE_TIME) +
0: 				": " + executeTime + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_BEGIN_COMP_TS) +
0: 				" : " + beginCompilationTimestamp + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_END_COMP_TS) +
0: 				" : " + endCompilationTimestamp + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_BEGIN_EXE_TS) +
0: 				" : " + beginExecutionTimestamp + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_END_EXE_TS) +
0: 				" : " + endExecutionTimestamp + "\n" +
0: 			MessageService.getTextMessage(SQLState.RTS_STMT_EXE_PLAN_TXT) +
0: 				": \n" + getStatementExecutionPlanText();
0: 	}
0: 
0: 	/**
0: 	 * Get the objects to be displayed when this tree object is expanded.
0: 	 * <P>
0: 	 * The objects returned can be of any type, including addtional Inspectables.
0:    *
0: 	 * @return java.util.Vector	A vector of objects.
0: 	 */
0:   public Vector getChildren(){
0:     Vector children = new Vector();
0:     children.addElement(topResultSetStatistics);
0:     return children;
0:   }
0: 
0: }
============================================================================