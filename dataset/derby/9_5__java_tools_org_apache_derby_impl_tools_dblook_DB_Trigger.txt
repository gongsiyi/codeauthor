2:eac0369: /*
1:985fc85: 
1:3abc7d4:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Trigger
1:985fc85: 
1:20cdca3:    Licensed to the Apache Software Foundation (ASF) under one or more
1:20cdca3:    contributor license agreements.  See the NOTICE file distributed with
1:20cdca3:    this work for additional information regarding copyright ownership.
1:20cdca3:    The ASF licenses this file to you under the Apache License, Version 2.0
1:20cdca3:    (the "License"); you may not use this file except in compliance with
1:20cdca3:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
6:eac0369: 
3:eac0369:  */
1:eac0369: 
1:3abc7d4: package org.apache.derby.impl.tools.dblook;
1:eac0369: 
1:eac0369: import java.sql.Connection;
1:eac0369: import java.sql.Statement;
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.SQLException;
1:eac0369: 
1:eac0369: import org.apache.derby.tools.dblook;
1:eac0369: 
1:eac0369: public class DB_Trigger {
1:eac0369: 
1:ea25568:     // Column name constants for SYS.SYSTRIGGERS
1:ea25568:     private static final String TRIGGERNAME = "TRIGGERNAME";
1:ea25568:     private static final String SCHEMAID = "SCHEMAID";
1:ea25568:     private static final String EVENT = "EVENT";
1:ea25568:     private static final String FIRINGTIME = "FIRINGTIME";
1:ea25568:     private static final String TYPE = "TYPE";
1:ea25568:     private static final String TABLEID = "TABLEID";
1:ea25568:     private static final String REFERENCEDCOLUMNS = "REFERENCEDCOLUMNS";
1:ea25568:     private static final String TRIGGERDEFINITION = "TRIGGERDEFINITION";
1:ea25568:     private static final String REFERENCINGOLD = "REFERENCINGOLD";
1:ea25568:     private static final String REFERENCINGNEW = "REFERENCINGNEW";
1:ea25568:     private static final String OLDREFERENCINGNAME = "OLDREFERENCINGNAME";
1:ea25568:     private static final String NEWREFERENCINGNAME = "NEWREFERENCINGNAME";
1:ea25568:     private static final String WHENCLAUSETEXT = "WHENCLAUSETEXT";
1:ea25568: 
1:ea25568:     /** ************************************************
1:eac0369: 	 * Generate the DDL for all triggers in a given
1:eac0369: 	 * database.
1:eac0369: 	 * @param conn Connection to the source database.
1:ea25568:      * @param supportsWhenClause Tells whether the database supports the
1:ea25568:      *   trigger WHEN clause.
1:eac0369: 	 ****/
1:eac0369: 
1:ea25568:     public static void doTriggers(Connection conn, boolean supportsWhenClause)
1:eac0369: 		throws SQLException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		Statement stmt = conn.createStatement();
1:ea25568:         ResultSet rs = stmt.executeQuery(
1:0d4cef5:                 "SELECT * FROM SYS.SYSTRIGGERS WHERE STATE != 'D' " +
1:0d4cef5:                 "ORDER BY CREATIONTIMESTAMP");
1:eac0369: 
1:eac0369: 		boolean firstTime = true;
1:eac0369: 		while (rs.next()) {
1:eac0369: 
1:eac0369: 			String trigName = dblook.addQuotes(
1:ea25568:                 dblook.expandDoubleQuotes(rs.getString(TRIGGERNAME)));
1:ea25568:             String trigSchema = dblook.lookupSchemaId(rs.getString(SCHEMAID));
1:eac0369: 
1:eac0369: 			if (dblook.isIgnorableSchema(trigSchema))
1:eac0369: 				continue;
1:eac0369: 
1:eac0369: 			trigName = trigSchema + "." + trigName;
1:ea25568:             String tableName = dblook.lookupTableId(rs.getString(TABLEID));
1:ea25568: 
1:ea25568:             // Get the WHEN clause text, if there is a WHEN clause. The
1:ea25568:             // WHENCLAUSETEXT column is only present if the data dictionary
1:ea25568:             // version is 10.11 or higher (DERBY-534).
1:ea25568:             String whenClause =
1:ea25568:                     supportsWhenClause ? rs.getString(WHENCLAUSETEXT) : null;
1:eac0369: 
1:eac0369: 			// We'll write the DDL for this trigger if either 1) it is on
1:eac0369: 			// a table in the user-specified list, OR 2) the trigger text
1:eac0369: 			// contains a reference to a table in the user-specified list.
1:eac0369: 
1:ea25568:             if (!dblook.stringContainsTargetTable(
1:ea25568:                     rs.getString(TRIGGERDEFINITION)) &&
1:ea25568:                 !dblook.stringContainsTargetTable(whenClause) &&
1:eac0369: 				(dblook.isExcludedTable(tableName)))
1:eac0369: 				continue;
1:eac0369: 
1:eac0369: 			if (firstTime) {
1:eac0369: 				Logs.reportString("----------------------------------------------");
1:19c10b5: 				Logs.reportMessage("DBLOOK_TriggersHeader");
1:eac0369: 				Logs.reportString("----------------------------------------------\n");
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			String createTrigString = createTrigger(trigName,
1:ea25568:                 tableName, whenClause, rs);
1:eac0369: 
1:eac0369: 			Logs.writeToNewDDL(createTrigString);
1:eac0369: 			Logs.writeStmtEndToNewDDL();
1:eac0369: 			Logs.writeNewlineToNewDDL();
1:eac0369: 			firstTime = false;
1:eac0369: 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		rs.close();
1:eac0369: 		stmt.close();
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:ea25568:     /** ************************************************
1:eac0369: 	 * Generate DDL for a specific trigger.
1:eac0369: 	 * @param trigName Name of the trigger.
1:eac0369: 	 * @param tableName Name of the table on which the trigger
1:eac0369: 	 *  fires.
1:ea25568:      * @param whenClause The WHEN clause text (possibly {@code null}).
1:eac0369: 	 * @param aTrig Information about the trigger.
1:eac0369: 	 * @return The DDL for the current trigger is returned
1:eac0369: 	 *  as a String.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	private static String createTrigger(String trigName, String tableName,
1:ea25568:         String whenClause, ResultSet aTrig) throws SQLException
1:eac0369: 	{
1:eac0369: 
1:ea25568:         StringBuilder sb = new StringBuilder("CREATE TRIGGER ");
1:eac0369: 		sb.append(trigName);
1:eac0369: 
1:eac0369: 		// Firing time.
1:ea25568:         if (aTrig.getString(FIRINGTIME).charAt(0) == 'A') {
1:eac0369: 			sb.append(" AFTER ");
1:ea25568:         } else {
1:eac0369: 			sb.append(" NO CASCADE BEFORE ");
1:ea25568:         }
1:eac0369: 
1:eac0369: 		// Event.
1:ea25568:         String event = aTrig.getString(EVENT);
1:ea25568:         switch (event.charAt(0)) {
1:eac0369: 			case 'I':	sb.append("INSERT");
1:eac0369: 						break;
1:eac0369: 			case 'D':	sb.append("DELETE");
1:eac0369: 						break;
1:eac0369: 			case 'U':	sb.append("UPDATE");
1:ea25568:                         String updateCols = aTrig.getString(REFERENCEDCOLUMNS);
1:f3ade65: 						//DERBY-5839 dblook run on toursdb fails on triggers
1:f3ade65: 						//	with java.lang.StringIndexOutOfBoundsException in
1:f3ade65: 						//	dblook.log
1:f3ade65: 						//We document that SYSTRIGGERS.REFERENCEDCOLUMNS is not
1:f3ade65: 						// part of the public API and hence that allows Derby 
1:f3ade65: 						// to change underneath the behavior of the column.
1:f3ade65: 						// Prior to 10.9, this column only had information
1:f3ade65: 						// about columns referenced by UPDATE trigger. But,
1:f3ade65: 						// with 10.9, we use this column to also hold 
1:f3ade65: 						// information about the trigger columns being used 
1:f3ade65: 						// inside trigger action plan. This enables Derby to 
1:f3ade65: 						// read only necessary columns from trigger table. But
1:f3ade65: 						// because of this change, it is not enough in dblook
1:f3ade65: 						// to check if SYSTRIGGERS.REFERENCEDCOLUMNS.wasNull. 
1:f3ade65: 						// We need to also check if the string representation 
1:f3ade65: 						// of that column is "NULL". Making this change fixes
1:f3ade65: 						// DERBY-5839
1:f3ade65: 						if (!aTrig.wasNull() && !updateCols.equals("NULL")) {
1:eac0369: 							sb.append(" OF ");
1:eac0369: 							sb.append(dblook.getColumnListFromDescription(
1:ea25568:                                 aTrig.getString(TABLEID), updateCols));
1:eac0369: 						}
1:eac0369: 						break;
1:eac0369: 			default:	// shouldn't happen.
1:eac0369: 						Logs.debug("INTERNAL ERROR: unexpected trigger event: " + 
1:ea25568:                                    event, (String)null);
1:eac0369: 						break;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// On table...
1:eac0369: 		sb.append(" ON ");
1:eac0369: 		sb.append(tableName);
1:eac0369: 
1:eac0369: 		// Referencing...
1:ea25568:         char trigType = aTrig.getString(TYPE).charAt(0);
1:ea25568:         String oldReferencing = aTrig.getString(OLDREFERENCINGNAME);
1:ea25568:         String newReferencing = aTrig.getString(NEWREFERENCINGNAME);
1:eac0369: 		if ((oldReferencing != null) || (newReferencing != null)) {
1:eac0369: 			sb.append(" REFERENCING");
1:ea25568:             if (aTrig.getBoolean(REFERENCINGOLD)) {
1:eac0369: 				sb.append(" OLD");
1:eac0369: 				if (trigType == 'S')
1:eac0369: 				// Statement triggers work on tables.
1:eac0369: 					sb.append("_TABLE AS ");
2:eac0369: 				else
1:eac0369: 				// don't include "ROW" keyword (DB2 doesn't).
1:eac0369: 					sb.append(" AS ");
1:eac0369: 				sb.append(oldReferencing);
1:eac0369: 			}
1:ea25568:             if (aTrig.getBoolean(REFERENCINGNEW)) {
1:eac0369: 				sb.append(" NEW");
1:eac0369: 				if (trigType == 'S')
1:eac0369: 				// Statement triggers work on tables.
1:eac0369: 					sb.append("_TABLE AS ");
1:eac0369: 				else
1:eac0369: 				// don't include "ROW" keyword (DB2 doesn't).
1:eac0369: 					sb.append(" AS ");
1:eac0369: 				sb.append(newReferencing);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Trigger type (row/statement).
1:eac0369: 		sb.append(" FOR EACH ");
1:eac0369: 		if (trigType == 'S')
1:eac0369: 			sb.append("STATEMENT ");
1:eac0369: 		else
1:eac0369: 			sb.append("ROW ");
1:eac0369: 
1:ea25568:         // Finally, the trigger action, which consists of an optional WHEN
1:ea25568:         // clause and the triggered SQL statement.
1:ea25568:         if (whenClause != null) {
1:ea25568:             sb.append("WHEN (");
1:ea25568:             sb.append(dblook.removeNewlines(whenClause));
1:ea25568:             sb.append(") ");
1:ea25568:         }
1:ea25568:         sb.append(dblook.removeNewlines(aTrig.getString(TRIGGERDEFINITION)));
1:ea25568: 
1:eac0369: 		return sb.toString();
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0d4cef5
/////////////////////////////////////////////////////////////////////////
1:                 "SELECT * FROM SYS.SYSTRIGGERS WHERE STATE != 'D' " +
1:                 "ORDER BY CREATIONTIMESTAMP");
commit:ea25568
/////////////////////////////////////////////////////////////////////////
1:     // Column name constants for SYS.SYSTRIGGERS
1:     private static final String TRIGGERNAME = "TRIGGERNAME";
1:     private static final String SCHEMAID = "SCHEMAID";
1:     private static final String EVENT = "EVENT";
1:     private static final String FIRINGTIME = "FIRINGTIME";
1:     private static final String TYPE = "TYPE";
1:     private static final String TABLEID = "TABLEID";
1:     private static final String REFERENCEDCOLUMNS = "REFERENCEDCOLUMNS";
1:     private static final String TRIGGERDEFINITION = "TRIGGERDEFINITION";
1:     private static final String REFERENCINGOLD = "REFERENCINGOLD";
1:     private static final String REFERENCINGNEW = "REFERENCINGNEW";
1:     private static final String OLDREFERENCINGNAME = "OLDREFERENCINGNAME";
1:     private static final String NEWREFERENCINGNAME = "NEWREFERENCINGNAME";
1:     private static final String WHENCLAUSETEXT = "WHENCLAUSETEXT";
1: 
1:     /** ************************************************
1:      * @param supportsWhenClause Tells whether the database supports the
1:      *   trigger WHEN clause.
1:     public static void doTriggers(Connection conn, boolean supportsWhenClause)
1:         ResultSet rs = stmt.executeQuery(
0:                 "SELECT * FROM SYS.SYSTRIGGERS WHERE STATE != 'D'");
1:                 dblook.expandDoubleQuotes(rs.getString(TRIGGERNAME)));
1:             String trigSchema = dblook.lookupSchemaId(rs.getString(SCHEMAID));
1:             String tableName = dblook.lookupTableId(rs.getString(TABLEID));
1: 
1:             // Get the WHEN clause text, if there is a WHEN clause. The
1:             // WHENCLAUSETEXT column is only present if the data dictionary
1:             // version is 10.11 or higher (DERBY-534).
1:             String whenClause =
1:                     supportsWhenClause ? rs.getString(WHENCLAUSETEXT) : null;
1:             if (!dblook.stringContainsTargetTable(
1:                     rs.getString(TRIGGERDEFINITION)) &&
1:                 !dblook.stringContainsTargetTable(whenClause) &&
/////////////////////////////////////////////////////////////////////////
1:                 tableName, whenClause, rs);
/////////////////////////////////////////////////////////////////////////
1:     /** ************************************************
1:      * @param whenClause The WHEN clause text (possibly {@code null}).
1:         String whenClause, ResultSet aTrig) throws SQLException
1:         StringBuilder sb = new StringBuilder("CREATE TRIGGER ");
1:         if (aTrig.getString(FIRINGTIME).charAt(0) == 'A') {
1:         } else {
1:         }
1:         String event = aTrig.getString(EVENT);
1:         switch (event.charAt(0)) {
1:                         String updateCols = aTrig.getString(REFERENCEDCOLUMNS);
/////////////////////////////////////////////////////////////////////////
1:                                 aTrig.getString(TABLEID), updateCols));
1:                                    event, (String)null);
/////////////////////////////////////////////////////////////////////////
1:         char trigType = aTrig.getString(TYPE).charAt(0);
1:         String oldReferencing = aTrig.getString(OLDREFERENCINGNAME);
1:         String newReferencing = aTrig.getString(NEWREFERENCINGNAME);
1:             if (aTrig.getBoolean(REFERENCINGOLD)) {
/////////////////////////////////////////////////////////////////////////
1:             if (aTrig.getBoolean(REFERENCINGNEW)) {
/////////////////////////////////////////////////////////////////////////
1:         // Finally, the trigger action, which consists of an optional WHEN
1:         // clause and the triggered SQL statement.
1:         if (whenClause != null) {
1:             sb.append("WHEN (");
1:             sb.append(dblook.removeNewlines(whenClause));
1:             sb.append(") ");
1:         }
1:         sb.append(dblook.removeNewlines(aTrig.getString(TRIGGERDEFINITION)));
1: 
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:f3ade65
/////////////////////////////////////////////////////////////////////////
1: 						//DERBY-5839 dblook run on toursdb fails on triggers
1: 						//	with java.lang.StringIndexOutOfBoundsException in
1: 						//	dblook.log
1: 						//We document that SYSTRIGGERS.REFERENCEDCOLUMNS is not
1: 						// part of the public API and hence that allows Derby 
1: 						// to change underneath the behavior of the column.
1: 						// Prior to 10.9, this column only had information
1: 						// about columns referenced by UPDATE trigger. But,
1: 						// with 10.9, we use this column to also hold 
1: 						// information about the trigger columns being used 
1: 						// inside trigger action plan. This enables Derby to 
1: 						// read only necessary columns from trigger table. But
1: 						// because of this change, it is not enough in dblook
1: 						// to check if SYSTRIGGERS.REFERENCEDCOLUMNS.wasNull. 
1: 						// We need to also check if the string representation 
1: 						// of that column is "NULL". Making this change fixes
1: 						// DERBY-5839
1: 						if (!aTrig.wasNull() && !updateCols.equals("NULL")) {
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:5e4e33b
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:20cdca3
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:19c10b5
/////////////////////////////////////////////////////////////////////////
1: 				Logs.reportMessage("DBLOOK_TriggersHeader");
commit:3abc7d4
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Trigger
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.tools.dblook;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:985fc85
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derby.impl.tools.cslook.DB_Trigger
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.cslook
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
0: package org.apache.derby.impl.tools.cslook;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
0: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
0: import java.util.HashMap;
0: import java.util.StringTokenizer;
1: 
1: import org.apache.derby.tools.dblook;
1: 
1: public class DB_Trigger {
1: 
1: 	/* 
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
0: 	/* ************************************************
1: 	 * Generate the DDL for all triggers in a given
1: 	 * database.
1: 	 * @param conn Connection to the source database.
0: 	 * @return The DDL for the triggers has been written
0: 	 *  to output via Logs.java.
1: 	 ****/
1: 
0: 	public static void doTriggers (Connection conn)
1: 		throws SQLException
1: 	{
1: 
1: 		Statement stmt = conn.createStatement();
0: 		ResultSet rs = stmt.executeQuery("SELECT TRIGGERNAME, SCHEMAID, " +
0: 			"EVENT, FIRINGTIME, TYPE, TABLEID, REFERENCEDCOLUMNS, " + 
0: 			"TRIGGERDEFINITION, REFERENCINGOLD, REFERENCINGNEW, OLDREFERENCINGNAME, " +
0: 			"NEWREFERENCINGNAME FROM SYS.SYSTRIGGERS WHERE STATE != 'D'");
1: 
1: 		boolean firstTime = true;
1: 		while (rs.next()) {
1: 
1: 			String trigName = dblook.addQuotes(
0: 				dblook.expandDoubleQuotes(rs.getString(1)));
0: 			String trigSchema = dblook.lookupSchemaId(rs.getString(2));
1: 
1: 			if (dblook.isIgnorableSchema(trigSchema))
1: 				continue;
1: 
1: 			trigName = trigSchema + "." + trigName;
0: 			String tableName = dblook.lookupTableId(rs.getString(6));
1: 
1: 			// We'll write the DDL for this trigger if either 1) it is on
1: 			// a table in the user-specified list, OR 2) the trigger text
1: 			// contains a reference to a table in the user-specified list.
1: 
0: 			if (!dblook.stringContainsTargetTable(rs.getString(8)) &&
1: 				(dblook.isExcludedTable(tableName)))
1: 				continue;
1: 
1: 			if (firstTime) {
1: 				Logs.reportString("----------------------------------------------");
0: 				Logs.reportMessage("CSLOOK_Header", "triggers");
1: 				Logs.reportString("----------------------------------------------\n");
1: 			}
1: 
1: 			String createTrigString = createTrigger(trigName,
0: 				tableName, rs);
1: 
1: 			Logs.writeToNewDDL(createTrigString);
1: 			Logs.writeStmtEndToNewDDL();
1: 			Logs.writeNewlineToNewDDL();
1: 			firstTime = false;
1: 
1: 		}
1: 
1: 		rs.close();
1: 		stmt.close();
1: 
1: 	}
1: 
0: 	/* ************************************************
1: 	 * Generate DDL for a specific trigger.
1: 	 * @param trigName Name of the trigger.
1: 	 * @param tableName Name of the table on which the trigger
1: 	 *  fires.
1: 	 * @param aTrig Information about the trigger.
1: 	 * @return The DDL for the current trigger is returned
1: 	 *  as a String.
1: 	 ****/
1: 
1: 	private static String createTrigger(String trigName, String tableName,
0: 		ResultSet aTrig) throws SQLException
1: 	{
1: 
0: 		StringBuffer sb = new StringBuffer ("CREATE TRIGGER ");
1: 		sb.append(trigName);
1: 
1: 		// Firing time.
0: 		if (aTrig.getString(4).charAt(0) == 'A')
1: 			sb.append(" AFTER ");
1: 		else
1: 			sb.append(" NO CASCADE BEFORE ");
1: 
1: 		// Event.
0: 		switch (aTrig.getString(3).charAt(0)) {
1: 			case 'I':	sb.append("INSERT");
1: 						break;
1: 			case 'D':	sb.append("DELETE");
1: 						break;
1: 			case 'U':	sb.append("UPDATE");
0: 						String updateCols = aTrig.getString(7);
0: 						if (!aTrig.wasNull()) {
1: 							sb.append(" OF ");
1: 							sb.append(dblook.getColumnListFromDescription(
0: 								aTrig.getString(6), updateCols));
1: 						}
1: 						break;
1: 			default:	// shouldn't happen.
1: 						Logs.debug("INTERNAL ERROR: unexpected trigger event: " + 
0: 							aTrig.getString(3), (String)null);
1: 						break;
1: 		}
1: 
1: 		// On table...
1: 		sb.append(" ON ");
1: 		sb.append(tableName);
1: 
1: 		// Referencing...
0: 		char trigType = aTrig.getString(5).charAt(0);
0: 		String oldReferencing = aTrig.getString(11);
0: 		String newReferencing = aTrig.getString(12);
1: 		if ((oldReferencing != null) || (newReferencing != null)) {
1: 			sb.append(" REFERENCING");
0: 			if (aTrig.getBoolean(9)) {
1: 				sb.append(" OLD");
1: 				if (trigType == 'S')
1: 				// Statement triggers work on tables.
1: 					sb.append("_TABLE AS ");
1: 				else
1: 				// don't include "ROW" keyword (DB2 doesn't).
1: 					sb.append(" AS ");
1: 				sb.append(oldReferencing);
1: 			}
0: 			if (aTrig.getBoolean(10)) {
1: 				sb.append(" NEW");
1: 				if (trigType == 'S')
1: 				// Statement triggers work on tables.
1: 					sb.append("_TABLE AS ");
1: 				else
1: 				// don't include "ROW" keyword (DB2 doesn't).
1: 					sb.append(" AS ");
1: 				sb.append(newReferencing);
1: 			}
1: 		}
1: 
1: 		// Trigger type (row/statement).
1: 		sb.append(" FOR EACH ");
1: 		if (trigType == 'S')
1: 			sb.append("STATEMENT ");
1: 		else
1: 			sb.append("ROW ");
1: 
0: 		// DB2 requires the following keywords in order to work.
0: 		sb.append("MODE DB2SQL ");
1: 
0: 		// Finally, the trigger action.
0: 		sb.append(dblook.removeNewlines(aTrig.getString(8)));
1: 		return sb.toString();
1: 
1: 	}
1: 
1: }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:89cd70b
/////////////////////////////////////////////////////////////////////////
0: 				Logs.reportMessage("CSLOOK_TriggersHeader");
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.cslook
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.cslook;
0: 
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: 
0: import java.util.HashMap;
0: import java.util.StringTokenizer;
0: 
0: import org.apache.derby.tools.dblook;
0: 
0: public class DB_Trigger {
0: 
0: 	/* 
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0: 	/* ************************************************
0: 	 * Generate the DDL for all triggers in a given
0: 	 * database.
0: 	 * @param conn Connection to the source database.
0: 	 * @return The DDL for the triggers has been written
0: 	 *  to output via Logs.java.
0: 	 ****/
0: 
0: 	public static void doTriggers (Connection conn)
0: 		throws SQLException
0: 	{
0: 
0: 		Statement stmt = conn.createStatement();
0: 		ResultSet rs = stmt.executeQuery("SELECT TRIGGERNAME, SCHEMAID, " +
0: 			"EVENT, FIRINGTIME, TYPE, TABLEID, REFERENCEDCOLUMNS, " + 
0: 			"TRIGGERDEFINITION, REFERENCINGOLD, REFERENCINGNEW, OLDREFERENCINGNAME, " +
0: 			"NEWREFERENCINGNAME FROM SYS.SYSTRIGGERS WHERE STATE != 'D'");
0: 
0: 		boolean firstTime = true;
0: 		while (rs.next()) {
0: 
0: 			String trigName = dblook.addQuotes(
0: 				dblook.expandDoubleQuotes(rs.getString(1)));
0: 			String trigSchema = dblook.lookupSchemaId(rs.getString(2));
0: 
0: 			if (dblook.isIgnorableSchema(trigSchema))
0: 				continue;
0: 
0: 			trigName = trigSchema + "." + trigName;
0: 			String tableName = dblook.lookupTableId(rs.getString(6));
0: 
0: 			// We'll write the DDL for this trigger if either 1) it is on
0: 			// a table in the user-specified list, OR 2) the trigger text
0: 			// contains a reference to a table in the user-specified list.
0: 
0: 			if (!dblook.stringContainsTargetTable(rs.getString(8)) &&
0: 				(dblook.isExcludedTable(tableName)))
0: 				continue;
0: 
0: 			if (firstTime) {
0: 				Logs.reportString("----------------------------------------------");
0: 				Logs.reportMessage("CSLOOK_Header", "triggers");
0: 				Logs.reportString("----------------------------------------------\n");
0: 			}
0: 
0: 			String createTrigString = createTrigger(trigName,
0: 				tableName, rs);
0: 
0: 			Logs.writeToNewDDL(createTrigString);
0: 			Logs.writeStmtEndToNewDDL();
0: 			Logs.writeNewlineToNewDDL();
0: 			firstTime = false;
0: 
0: 		}
0: 
0: 		rs.close();
0: 		stmt.close();
0: 
0: 	}
0: 
0: 	/* ************************************************
0: 	 * Generate DDL for a specific trigger.
0: 	 * @param trigName Name of the trigger.
0: 	 * @param tableName Name of the table on which the trigger
0: 	 *  fires.
0: 	 * @param aTrig Information about the trigger.
0: 	 * @return The DDL for the current trigger is returned
0: 	 *  as a String.
0: 	 ****/
0: 
0: 	private static String createTrigger(String trigName, String tableName,
0: 		ResultSet aTrig) throws SQLException
0: 	{
0: 
0: 		StringBuffer sb = new StringBuffer ("CREATE TRIGGER ");
0: 		sb.append(trigName);
0: 
0: 		// Firing time.
0: 		if (aTrig.getString(4).charAt(0) == 'A')
0: 			sb.append(" AFTER ");
0: 		else
0: 			sb.append(" NO CASCADE BEFORE ");
0: 
0: 		// Event.
0: 		switch (aTrig.getString(3).charAt(0)) {
0: 			case 'I':	sb.append("INSERT");
0: 						break;
0: 			case 'D':	sb.append("DELETE");
0: 						break;
0: 			case 'U':	sb.append("UPDATE");
0: 						String updateCols = aTrig.getString(7);
0: 						if (!aTrig.wasNull()) {
0: 							sb.append(" OF ");
0: 							sb.append(dblook.getColumnListFromDescription(
0: 								aTrig.getString(6), updateCols));
0: 						}
0: 						break;
0: 			default:	// shouldn't happen.
0: 						Logs.debug("INTERNAL ERROR: unexpected trigger event: " + 
0: 							aTrig.getString(3), (String)null);
0: 						break;
0: 		}
0: 
0: 		// On table...
0: 		sb.append(" ON ");
0: 		sb.append(tableName);
0: 
0: 		// Referencing...
0: 		char trigType = aTrig.getString(5).charAt(0);
0: 		String oldReferencing = aTrig.getString(11);
0: 		String newReferencing = aTrig.getString(12);
0: 		if ((oldReferencing != null) || (newReferencing != null)) {
0: 			sb.append(" REFERENCING");
0: 			if (aTrig.getBoolean(9)) {
0: 				sb.append(" OLD");
0: 				if (trigType == 'S')
0: 				// Statement triggers work on tables.
0: 					sb.append("_TABLE AS ");
0: 				else
0: 				// don't include "ROW" keyword (DB2 doesn't).
0: 					sb.append(" AS ");
0: 				sb.append(oldReferencing);
0: 			}
0: 			if (aTrig.getBoolean(10)) {
0: 				sb.append(" NEW");
0: 				if (trigType == 'S')
0: 				// Statement triggers work on tables.
0: 					sb.append("_TABLE AS ");
0: 				else
0: 				// don't include "ROW" keyword (DB2 doesn't).
0: 					sb.append(" AS ");
0: 				sb.append(newReferencing);
0: 			}
0: 		}
0: 
0: 		// Trigger type (row/statement).
0: 		sb.append(" FOR EACH ");
0: 		if (trigType == 'S')
0: 			sb.append("STATEMENT ");
0: 		else
0: 			sb.append("ROW ");
0: 
0: 		// DB2 requires the following keywords in order to work.
0: 		sb.append("MODE DB2SQL ");
0: 
0: 		// Finally, the trigger action.
0: 		sb.append(dblook.removeNewlines(aTrig.getString(8)));
0: 		return sb.toString();
0: 
0: 	}
0: 
0: }
============================================================================