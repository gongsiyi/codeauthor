1:2483560: /*
1:2483560:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DeadlockDetectionTest
1:2483560:  *
1:2483560:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2483560:  * contributor license agreements.  See the NOTICE file distributed with
1:2483560:  * this work for additional information regarding copyright ownership.
1:2483560:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2483560:  * (the "License"); you may not use this file except in compliance with
1:2483560:  * the License.  You may obtain a copy of the License at
1:2483560:  *
1:2483560:  *    http://www.apache.org/licenses/LICENSE-2.0
1:2483560:  *
1:2483560:  * Unless required by applicable law or agreed to in writing,
1:2483560:  * software distributed under the License is distributed on an
1:2483560:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:2483560:  * either express or implied. See the License for the specific
1:2483560:  * language governing permissions and limitations under the License.
3:2483560:  */
6:2483560: 
1:2483560: package org.apache.derbyTesting.functionTests.tests.lang;
1:2483560: 
1:2483560: import java.sql.Connection;
1:2483560: import java.sql.PreparedStatement;
1:2483560: import java.sql.SQLException;
1:2483560: import java.sql.Statement;
1:2483560: import java.util.ArrayList;
1:2483560: import java.util.Collections;
1:2483560: import java.util.List;
1:2483560: import junit.framework.Test;
1:d34116d: import org.apache.derbyTesting.functionTests.util.Barrier;
1:2483560: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:2483560: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:2483560: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:2483560: import org.apache.derbyTesting.junit.JDBC;
1:2483560: import org.apache.derbyTesting.junit.TestConfiguration;
1:2483560: 
3:2483560: /**
1:2483560:  * This test verifies that the deadlock detection algorithm is able to
1:2483560:  * recognize certain cycles in the wait graph as deadlocks.
1:2483560:  */
1:2483560: public class DeadlockDetectionTest extends BaseJDBCTestCase {
1:2483560: 
1:2483560:     /** SQLState for deadlock exceptions. */
1:2483560:     private final static String DEADLOCK = "40001";
1:2483560: 
1:2483560:     public static Test suite() {
1:2483560:         // Deadlock detection is engine functionality, so only test embedded.
1:2483560:         Test test =
1:2483560:                 TestConfiguration.embeddedSuite(DeadlockDetectionTest.class);
1:2483560: 
1:2483560:         // Reduce the deadlock timeout since this test expects deadlocks, and
1:2483560:         // we want to detect them quickly in order to reduce the test time.
1:2483560:         // We don't expect any wait timeouts, so set the wait timeout
1:2483560:         // sufficiently high to prevent that queries time out before we have
1:2483560:         // set up the deadlock on slow machines.
1:2483560:         test = DatabasePropertyTestSetup.setLockTimeouts(test, 1, 30);
1:2483560: 
1:2483560:         return new CleanDatabaseTestSetup(test);
6:2483560:     }
1:2483560: 
1:2483560:     public DeadlockDetectionTest(String name) {
1:2483560:         super(name);
1:2483560:     }
1:2483560: 
1:2483560:     /**
1:2483560:      * Test case to verify the fix for DERBY-3980. A simple deadlock was not
1:2483560:      * detected, and was reported as a lock timeout.
1:2483560:      */
1:2483560:     public void testDerby3980_repeatable_read() throws Exception {
1:2483560:         Statement s = createStatement();
1:2483560:         s.executeUpdate("create table derby3980 (i int)");
1:2483560:         s.executeUpdate("insert into derby3980 values 1956, 180, 456, 3");
1:2483560: 
1:2483560:         // Set up two threads.
1:2483560:         Thread[] threads = new Thread[2];
1:2483560:         Connection[] conns = new Connection[threads.length];
1:2483560: 
1:2483560:         // This barrier lets the two threads wait for each other so that both
1:2483560:         // can obtain a read lock before going on trying to obtain the write
1:2483560:         // lock. If one thread goes ahead and obtains the write lock before the
1:2483560:         // other thread has obtained the read lock, we won't see a deadlock.
1:2483560:         final Barrier readLockBarrier = new Barrier(threads.length);
1:2483560: 
1:2483560:         // Exceptions seen by the threads.
1:3f5c48a:         final List<Exception> exceptions =
1:3f5c48a:                 Collections.synchronizedList(new ArrayList<Exception>());
1:2483560: 
1:2483560:         // Start the two threads. Both should first obtain a read lock, and
1:2483560:         // when both have the read lock, they should try to lock the same row
1:2483560:         // exclusively. They'll be blocking each other, and we have a deadlock.
1:2483560:         for (int i = 0; i < threads.length; i++) {
1:2483560:             final Connection c = openDefaultConnection();
1:2483560:             c.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
1:2483560:             c.setAutoCommit(false);
1:2483560: 
1:2483560:             final PreparedStatement select = c.prepareStatement(
1:2483560:                     "select * from derby3980 where i = 456");
1:2483560:             final PreparedStatement update = c.prepareStatement(
1:2483560:                     "update derby3980 set i = 456 where i = 456");
1:2483560: 
1:2483560:             threads[i] = new Thread() {
1:2483560:                 public void run() {
1:2483560:                     try {
1:2483560:                         JDBC.assertSingleValueResultSet(
1:2483560:                                 select.executeQuery(), "456");
1:2483560: 
1:2483560:                         // Now we've got the read lock. Wait until all threads
1:2483560:                         // have it before attempting to get the write lock.
1:2483560:                         readLockBarrier.await();
1:2483560: 
1:2483560:                         // All threads have the read lock. Now all should try
1:2483560:                         // to update the row and thereby create a deadlock.
1:2483560:                         assertUpdateCount(update, 1);
1:2483560: 
1:2483560:                         // We got the write lock too. End the transaction.
1:2483560:                         c.rollback();
1:2483560:                     } catch (Exception e) {
1:2483560:                         exceptions.add(e);
1:2483560:                     }
1:2483560:                 }
1:2483560:             };
1:2483560: 
1:2483560:             conns[i] = c;
1:2483560:             threads[i].start();
1:2483560:         }
1:2483560: 
1:2483560:         // Threads have started, wait for them to complete.
1:2483560:         for (int i = 0; i < threads.length; i++) {
1:2483560:             threads[i].join();
1:2483560:             conns[i].rollback();
1:2483560:             conns[i].close();
1:2483560:         }
1:2483560: 
2:2483560:         // Verify that we only got deadlock exceptions.
1:3f5c48a:         for (Exception e : exceptions) {
1:2483560:             if (e instanceof SQLException) {
1:2483560:                 assertSQLState(DEADLOCK, (SQLException) e);
1:2483560:             } else {
1:2483560:                 // What's this? Report it.
1:2483560:                 throw e;
1:2483560:             }
1:2483560:         }
1:2483560: 
1:2483560:         // And we should only get one exception. (One transaction should be
1:2483560:         // picked as victim, the other one should be able to complete.)
1:2483560:         assertEquals("Number of victims", 1, exceptions.size());
1:2483560:     }
1:2483560: 
1:2483560:     /**
1:2483560:      * Test case for DERBY-5073. A deadlock involving three transactions was
1:2483560:      * not reported when there were other transactions waiting for the same
1:2483560:      * locks. The deadlock was detected, and a victim chosen. But the victim
1:2483560:      * would recheck the deadlock and conclude that it wasn't part of it, and
1:2483560:      * it would pick a new victim that would also recheck and come to the same
1:2483560:      * conclusion. This would go on until the wait timeout had expired, and
1:2483560:      * an exception would be throws, although not a deadlock.
1:2483560:      */
1:2483560:     public void testDerby5073_dodgy_victims() throws Exception {
1:2483560:         Statement s = createStatement();
1:2483560:         s.executeUpdate("create table derby5073(x int primary key, y int)");
1:2483560:         s.executeUpdate("insert into derby5073(x) values 0, 1, 2");
1:2483560: 
1:2483560:         // We want six connections. Three that are involved in the deadlock,
1:2483560:         // and three that try to obtain locks on the same rows without
1:2483560:         // actually being part of the deadlock.
1:2483560:         Connection[] conns = new Connection[6];
1:2483560:         Thread[] threads = new Thread[conns.length];
1:2483560:         for (int i = 0; i < conns.length; i++) {
1:2483560:             conns[i] = openDefaultConnection();
1:2483560:             conns[i].setAutoCommit(false);
1:2483560:         }
1:2483560: 
1:2483560:         // Three transactions take an exclusive lock on one row each.
1:2483560:         for (int i = 3; i < 6; i++) {
1:2483560:             PreparedStatement ps = conns[i].prepareStatement(
1:2483560:                     "update derby5073 set y = x where x = ?");
1:2483560:             ps.setInt(1, i % 3);
1:2483560:             assertUpdateCount(ps, 1);
1:2483560:         }
1:2483560: 
1:2483560:         // Then try to lock the rows in three other transactions and in the
1:2483560:         // three transactions that already have locked the rows exclusively.
1:2483560:         // The transactions that have exclusive locks should attempt to lock
1:2483560:         // another row than the one they already have locked, otherwise there
1:2483560:         // will be no deadlock.
1:3f5c48a:         final List<Exception> exceptions =
1:3f5c48a:                 Collections.synchronizedList(new ArrayList<Exception>());
1:2483560:         for (int i = 0; i < threads.length; i++) {
1:2483560:             final PreparedStatement ps = conns[i].prepareStatement(
1:2483560:                     "select x from derby5073 where x = ?");
1:2483560: 
1:2483560:             // Which row to lock. Add one to the thread number to make sure
1:2483560:             // that the threads don't attempt to lock the same row that they
1:2483560:             // already have locked above.
1:2483560:             final int row = (i + 1) % 3;
1:2483560:             ps.setInt(1, row);
1:2483560: 
1:2483560:             // The query will have to wait, so execute it in a separate thread.
1:2483560:             threads[i] = new Thread() {
1:2483560:                 public void run() {
1:2483560:                     try {
1:2483560:                         JDBC.assertSingleValueResultSet(
1:2483560:                                 ps.executeQuery(), Integer.toString(row));
1:2483560:                         ps.getConnection().commit();
1:2483560:                     } catch (Exception e) {
1:2483560:                         exceptions.add(e);
1:2483560:                     }
1:2483560:                 }
1:2483560:             };
1:2483560: 
1:2483560:             threads[i].start();
1:2483560: 
1:2483560:             // The bug is only seen if the first three threads are already
1:2483560:             // waiting for the locks when the last three threads (those
1:2483560:             // involved in the deadlock) start waiting. So take a little nap
1:2483560:             // here after we've started the third thread (index 2) to allow
1:2483560:             // the first three threads to enter the waiting state.
1:2483560:             if (i == 2) Thread.sleep(100L);
1:2483560:         }
1:2483560: 
1:2483560:         // Wait for all threads to finish.
1:2483560:         for (int i = 0; i < threads.length; i++) {
1:2483560:             threads[i].join();
1:2483560:             conns[i].rollback();
1:2483560:             conns[i].close();
1:2483560:         }
1:2483560: 
1:3f5c48a:         for (Exception e : exceptions) {
1:2483560:             if (e instanceof SQLException) {
1:2483560:                 assertSQLState(DEADLOCK, (SQLException) e);
1:2483560:             } else {
1:2483560:                 // What's this? Report it.
1:2483560:                 throw e;
1:2483560:             }
1:2483560:         }
1:2483560: 
1:2483560:         // And we should only get one exception. (One transaction should be
1:2483560:         // picked as victim, the other ones should be able to complete.)
1:2483560:         assertEquals("Number of victims", 1, exceptions.size());
1:2483560:     }
1:2483560: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final List<Exception> exceptions =
1:                 Collections.synchronizedList(new ArrayList<Exception>());
/////////////////////////////////////////////////////////////////////////
1:         for (Exception e : exceptions) {
/////////////////////////////////////////////////////////////////////////
1:         final List<Exception> exceptions =
1:                 Collections.synchronizedList(new ArrayList<Exception>());
/////////////////////////////////////////////////////////////////////////
1:         for (Exception e : exceptions) {
commit:d34116d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.Barrier;
/////////////////////////////////////////////////////////////////////////
commit:2483560
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DeadlockDetectionTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.ArrayList;
1: import java.util.Collections;
0: import java.util.Iterator;
1: import java.util.List;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * This test verifies that the deadlock detection algorithm is able to
1:  * recognize certain cycles in the wait graph as deadlocks.
1:  */
1: public class DeadlockDetectionTest extends BaseJDBCTestCase {
1: 
1:     /** SQLState for deadlock exceptions. */
1:     private final static String DEADLOCK = "40001";
1: 
1:     public static Test suite() {
1:         // Deadlock detection is engine functionality, so only test embedded.
1:         Test test =
1:                 TestConfiguration.embeddedSuite(DeadlockDetectionTest.class);
1: 
1:         // Reduce the deadlock timeout since this test expects deadlocks, and
1:         // we want to detect them quickly in order to reduce the test time.
1:         // We don't expect any wait timeouts, so set the wait timeout
1:         // sufficiently high to prevent that queries time out before we have
1:         // set up the deadlock on slow machines.
1:         test = DatabasePropertyTestSetup.setLockTimeouts(test, 1, 30);
1: 
1:         return new CleanDatabaseTestSetup(test);
1:     }
1: 
1:     public DeadlockDetectionTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Test case to verify the fix for DERBY-3980. A simple deadlock was not
1:      * detected, and was reported as a lock timeout.
1:      */
1:     public void testDerby3980_repeatable_read() throws Exception {
1:         Statement s = createStatement();
1:         s.executeUpdate("create table derby3980 (i int)");
1:         s.executeUpdate("insert into derby3980 values 1956, 180, 456, 3");
1: 
1:         // Set up two threads.
1:         Thread[] threads = new Thread[2];
1:         Connection[] conns = new Connection[threads.length];
1: 
1:         // This barrier lets the two threads wait for each other so that both
1:         // can obtain a read lock before going on trying to obtain the write
1:         // lock. If one thread goes ahead and obtains the write lock before the
1:         // other thread has obtained the read lock, we won't see a deadlock.
1:         final Barrier readLockBarrier = new Barrier(threads.length);
1: 
1:         // Exceptions seen by the threads.
0:         final List exceptions = Collections.synchronizedList(new ArrayList());
1: 
1:         // Start the two threads. Both should first obtain a read lock, and
1:         // when both have the read lock, they should try to lock the same row
1:         // exclusively. They'll be blocking each other, and we have a deadlock.
1:         for (int i = 0; i < threads.length; i++) {
1:             final Connection c = openDefaultConnection();
1:             c.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
1:             c.setAutoCommit(false);
1: 
1:             final PreparedStatement select = c.prepareStatement(
1:                     "select * from derby3980 where i = 456");
1:             final PreparedStatement update = c.prepareStatement(
1:                     "update derby3980 set i = 456 where i = 456");
1: 
1:             threads[i] = new Thread() {
1:                 public void run() {
1:                     try {
1:                         JDBC.assertSingleValueResultSet(
1:                                 select.executeQuery(), "456");
1: 
1:                         // Now we've got the read lock. Wait until all threads
1:                         // have it before attempting to get the write lock.
1:                         readLockBarrier.await();
1: 
1:                         // All threads have the read lock. Now all should try
1:                         // to update the row and thereby create a deadlock.
1:                         assertUpdateCount(update, 1);
1: 
1:                         // We got the write lock too. End the transaction.
1:                         c.rollback();
1:                     } catch (Exception e) {
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             };
1: 
1:             conns[i] = c;
1:             threads[i].start();
1:         }
1: 
1:         // Threads have started, wait for them to complete.
1:         for (int i = 0; i < threads.length; i++) {
1:             threads[i].join();
1:             conns[i].rollback();
1:             conns[i].close();
1:         }
1: 
1:         // Verify that we only got deadlock exceptions.
0:         for (Iterator it = exceptions.iterator(); it.hasNext(); ) {
0:             Exception e = (Exception) it.next();
1:             if (e instanceof SQLException) {
1:                 assertSQLState(DEADLOCK, (SQLException) e);
1:             } else {
1:                 // What's this? Report it.
1:                 throw e;
1:             }
1:         }
1: 
1:         // And we should only get one exception. (One transaction should be
1:         // picked as victim, the other one should be able to complete.)
1:         assertEquals("Number of victims", 1, exceptions.size());
1:     }
1: 
1:     /**
1:      * Test case for DERBY-5073. A deadlock involving three transactions was
1:      * not reported when there were other transactions waiting for the same
1:      * locks. The deadlock was detected, and a victim chosen. But the victim
1:      * would recheck the deadlock and conclude that it wasn't part of it, and
1:      * it would pick a new victim that would also recheck and come to the same
1:      * conclusion. This would go on until the wait timeout had expired, and
1:      * an exception would be throws, although not a deadlock.
1:      */
1:     public void testDerby5073_dodgy_victims() throws Exception {
1:         Statement s = createStatement();
1:         s.executeUpdate("create table derby5073(x int primary key, y int)");
1:         s.executeUpdate("insert into derby5073(x) values 0, 1, 2");
1: 
1:         // We want six connections. Three that are involved in the deadlock,
1:         // and three that try to obtain locks on the same rows without
1:         // actually being part of the deadlock.
1:         Connection[] conns = new Connection[6];
1:         Thread[] threads = new Thread[conns.length];
1:         for (int i = 0; i < conns.length; i++) {
1:             conns[i] = openDefaultConnection();
1:             conns[i].setAutoCommit(false);
1:         }
1: 
1:         // Three transactions take an exclusive lock on one row each.
1:         for (int i = 3; i < 6; i++) {
1:             PreparedStatement ps = conns[i].prepareStatement(
1:                     "update derby5073 set y = x where x = ?");
1:             ps.setInt(1, i % 3);
1:             assertUpdateCount(ps, 1);
1:         }
1: 
1:         // Then try to lock the rows in three other transactions and in the
1:         // three transactions that already have locked the rows exclusively.
1:         // The transactions that have exclusive locks should attempt to lock
1:         // another row than the one they already have locked, otherwise there
1:         // will be no deadlock.
0:         final List exceptions = Collections.synchronizedList(new ArrayList());
1:         for (int i = 0; i < threads.length; i++) {
1:             final PreparedStatement ps = conns[i].prepareStatement(
1:                     "select x from derby5073 where x = ?");
1: 
1:             // Which row to lock. Add one to the thread number to make sure
1:             // that the threads don't attempt to lock the same row that they
1:             // already have locked above.
1:             final int row = (i + 1) % 3;
1:             ps.setInt(1, row);
1: 
1:             // The query will have to wait, so execute it in a separate thread.
1:             threads[i] = new Thread() {
1:                 public void run() {
1:                     try {
1:                         JDBC.assertSingleValueResultSet(
1:                                 ps.executeQuery(), Integer.toString(row));
1:                         ps.getConnection().commit();
1:                     } catch (Exception e) {
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             };
1: 
1:             threads[i].start();
1: 
1:             // The bug is only seen if the first three threads are already
1:             // waiting for the locks when the last three threads (those
1:             // involved in the deadlock) start waiting. So take a little nap
1:             // here after we've started the third thread (index 2) to allow
1:             // the first three threads to enter the waiting state.
1:             if (i == 2) Thread.sleep(100L);
1:         }
1: 
1:         // Wait for all threads to finish.
1:         for (int i = 0; i < threads.length; i++) {
1:             threads[i].join();
1:             conns[i].rollback();
1:             conns[i].close();
1:         }
1: 
1:         // Verify that we only got deadlock exceptions.
0:         for (Iterator it = exceptions.iterator(); it.hasNext(); ) {
0:             Exception e = (Exception) it.next();
1:             if (e instanceof SQLException) {
1:                 assertSQLState(DEADLOCK, (SQLException) e);
1:             } else {
1:                 // What's this? Report it.
1:                 throw e;
1:             }
1:         }
1: 
1:         // And we should only get one exception. (One transaction should be
1:         // picked as victim, the other ones should be able to complete.)
1:         assertEquals("Number of victims", 1, exceptions.size());
1:     }
1: 
1:     /**
0:      * In the absence of java.util.concurrent.CyclicBarrier on many of the
0:      * platforms we test, create our own barrier class. This class allows
0:      * threads to wait for one another on specific locations, so that they
0:      * know they're all in the expected state.
1:      */
0:     private static class Barrier {
0:         /** Number of threads to wait for at the barrier. */
0:         int numThreads;
1: 
0:         /** Create a barrier for the specified number of threads. */
0:         Barrier(int numThreads) {
0:             this.numThreads = numThreads;
1:         }
1: 
1:         /**
0:          * Wait until {@code numThreads} have called {@code await()} on this
0:          * barrier, then proceed.
1:          */
0:         synchronized void await() throws InterruptedException {
0:             assertTrue("Too many threads reached the barrier", numThreads > 0);
1: 
0:             if (--numThreads <= 0) {
0:                 // All threads have reached the barrier. Go ahead!
0:                 notifyAll();
1:             }
1: 
0:             // Some threads haven't reached the barrier yet. Let's wait.
0:             while (numThreads > 0) {
0:                 wait();
1:             }
1:         }
1:     }
1: }
============================================================================