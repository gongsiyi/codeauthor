1:eac0369: /*
1:9ed7c4d: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.SimpleStringOperatorNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
11:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import java.sql.Types;
1:f33fbaf: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * This node represents a unary upper or lower operator
3:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class SimpleStringOperatorNode extends UnaryOperatorNode
2:eac0369: {
1:3bb140c:     SimpleStringOperatorNode(
1:3bb140c:             ValueNode operand,
1:3bb140c:             String methodName,
1:3bb140c:             ContextManager cm) throws StandardException {
1:3bb140c:         super(operand, methodName, methodName, cm);
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /**
1:eac0369: 	 * Bind this operator
1:eac0369: 	 *
1:eac0369: 	 * @param fromList			The query's FROM list
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		TypeId	operandType;
1:eac0369: 
1:09c2697:         bindOperand(fromList, subqueryList, aggregates);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Check the type of the operand - this function is allowed only on
1:eac0369: 		** string value (char and bit) types.
1:eac0369: 		*/
1:eac0369: 		operandType = operand.getTypeId();
1:eac0369: 
1:eac0369: 		switch (operandType.getJDBCTypeId())
1:eac0369: 		{
1:eac0369: 				case Types.CHAR:
1:eac0369: 				case Types.VARCHAR:
1:eac0369: 				case Types.LONGVARCHAR:
1:eac0369: 				case Types.CLOB:
1:eac0369: 					break;
1:1a4ea31: 				case Types.JAVA_OBJECT:
1:eac0369: 				case Types.OTHER:	
1:eac0369: 				{
1:eac0369: 					throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
1:eac0369: 										methodName,
1:eac0369: 										operandType.getSQLTypeName());
2:eac0369: 				}
1:eac0369: 
1:eac0369: 				default:
1:d9b6192: 					DataTypeDescriptor dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true, 
1:eac0369: 							  operand.getTypeCompiler().
1:eac0369: 								getCastToCharWidth(
1:d9b6192: 									operand.getTypeServices()));
1:eac0369: 			
1:3bb140c:                     operand = new CastNode(operand, dtd, getContextManager());
1:eac0369: 					
1:9ed7c4d: 				// DERBY-2910 - Match current schema collation for implicit cast as we do for
1:9ed7c4d: 				// explicit casts per SQL Spec 6.12 (10)					
1:9ed7c4d: 			    operand.setCollationUsingCompilationSchema();
1:9ed7c4d: 			    
1:eac0369: 				((CastNode) operand).bindCastNodeOnly();
1:eac0369: 					operandType = operand.getTypeId();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** The result type of upper()/lower() is the type of the operand.
1:eac0369: 		*/
1:eac0369: 
1:eac0369: 		setType(new DataTypeDescriptor(operandType,
1:eac0369: 				operand.getTypeServices().isNullable(),
1:eac0369: 				operand.getTypeCompiler().
1:eac0369: 					getCastToCharWidth(operand.getTypeServices())
1:eac0369: 						)
1:eac0369: 				);
1:7c5fbc4: 		//Result of upper()/lower() will have the same collation as the   
1:7c5fbc4: 		//argument to upper()/lower(). 
1:b25481f:         setCollationInfo(operand.getTypeServices());
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind a ? parameter operand of the upper/lower function.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	void bindParameter()
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** According to the SQL standard, if bit_length has a ? operand,
1:eac0369: 		** its type is bit varying with the implementation-defined maximum length
1:eac0369: 		** for a bit.
1:eac0369: 		*/
1:eac0369: 
1:d5bc20f: 		operand.setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR));
1:f63b7da: 		//collation of ? operand should be same as the compilation schema
1:9ed7c4d: 		operand.setCollationUsingCompilationSchema();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This is a length operator node.  Overrides this method
1:eac0369: 	 * in UnaryOperatorNode for code generation purposes.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     String getReceiverInterfaceName() {
1:eac0369: 	    return ClassName.StringDataValue;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1: class SimpleStringOperatorNode extends UnaryOperatorNode
1:     SimpleStringOperatorNode(
1:             ValueNode operand,
1:             String methodName,
1:             ContextManager cm) throws StandardException {
1:         super(operand, methodName, methodName, cm);
0:         setNodeType(C_NodeTypes.SIMPLE_STRING_OPERATOR_NODE);
1:     }
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                     operand = new CastNode(operand, dtd, getContextManager());
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     String getReceiverInterfaceName() {
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         bindOperand(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1a4ea31
/////////////////////////////////////////////////////////////////////////
1: 				case Types.JAVA_OBJECT:
commit:9ed7c4d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 					
1: 				// DERBY-2910 - Match current schema collation for implicit cast as we do for
1: 				// explicit casts per SQL Spec 6.12 (10)					
1: 			    operand.setCollationUsingCompilationSchema();
1: 			    
/////////////////////////////////////////////////////////////////////////
1: 		operand.setCollationUsingCompilationSchema();
commit:b25481f
/////////////////////////////////////////////////////////////////////////
1:         setCollationInfo(operand.getTypeServices());
commit:e2f08d2
/////////////////////////////////////////////////////////////////////////
commit:3233189
/////////////////////////////////////////////////////////////////////////
0: 		bindOperand(fromList, subqueryList, 
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.SimpleStringOperatorNode
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.types.StringDataValue;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.reference.ClassName;
1: 
1: import java.sql.Types;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * This node represents a unary upper or lower operator
1:  *
0:  * @author Jerry
1:  */
1: 
0: public class SimpleStringOperatorNode extends UnaryOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
0: 	 * Initializer for a SimpleOperatorNode
1: 	 *
0: 	 * @param operand		The operand
0: 	 * @param methodName	The method name
1: 	 */
1: 
0: 	public void init(Object operand, Object methodName)
1: 	{
0: 		super.init(operand, methodName, methodName);
1: 	}
1: 
1: 	/**
1: 	 * Bind this operator
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList	fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
1: 			throws StandardException
1: 	{
1: 		TypeId	operandType;
1: 
0: 		super.bindExpression(fromList, subqueryList, 
0: 				aggregateVector);
1: 
1: 		/*
1: 		** Check the type of the operand - this function is allowed only on
1: 		** string value (char and bit) types.
1: 		*/
1: 		operandType = operand.getTypeId();
1: 
1: 		switch (operandType.getJDBCTypeId())
1: 		{
1: 				case Types.CHAR:
1: 				case Types.VARCHAR:
1: 				case Types.LONGVARCHAR:
1: 				case Types.CLOB:
1: 					break;
0: 				case org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT:
1: 				case Types.OTHER:	
1: 				{
1: 					throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
1: 										methodName,
1: 										operandType.getSQLTypeName());
1: 				}
1: 
1: 				default:
0: 					operand =  (ValueNode)
0: 						getNodeFactory().getNode(
0: 							C_NodeTypes.CAST_NODE,
0: 							operand,
0: 							DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true, 
1: 										  operand.getTypeCompiler().
1: 											getCastToCharWidth(
0: 												operand.getTypeServices())),
0: 							getContextManager());
1: 					((CastNode) operand).bindCastNodeOnly();
1: 					operandType = operand.getTypeId();
1: 		}
1: 
1: 		/*
1: 		** The result type of upper()/lower() is the type of the operand.
1: 		*/
1: 
1: 		setType(new DataTypeDescriptor(operandType,
1: 				operand.getTypeServices().isNullable(),
1: 				operand.getTypeCompiler().
1: 					getCastToCharWidth(operand.getTypeServices())
1: 						)
1: 				);
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Bind a ? parameter operand of the upper/lower function.
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	void bindParameter()
1: 			throws StandardException
1: 	{
1: 		/*
1: 		** According to the SQL standard, if bit_length has a ? operand,
1: 		** its type is bit varying with the implementation-defined maximum length
1: 		** for a bit.
1: 		*/
1: 
0: 		((ParameterNode) operand).setDescriptor(
0: 							DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR));
1: 	}
1: 
1: 	/**
1: 	 * This is a length operator node.  Overrides this method
1: 	 * in UnaryOperatorNode for code generation purposes.
1: 	 */
0: 	public String getReceiverInterfaceName() {
1: 	    return ClassName.StringDataValue;
1: 	}
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:d9b6192
/////////////////////////////////////////////////////////////////////////
1: 					DataTypeDescriptor dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true, 
0: 							  operand.getTypeCompiler().
0: 								getCastToCharWidth(
1: 									operand.getTypeServices()));
0: 				// DERBY-2910 - Match current schema collation for implicit cast as we do for
0: 				// explicit casts per SQL Spec 6.12 (10)					
0: 				dtd.setCollationType(getSchemaDescriptor(null).getCollationType());
0: 				dtd.setCollationDerivation(StringDataValue.COLLATION_DERIVATION_IMPLICIT);
0: 			
0: 							dtd,
0: 				((CastNode) operand).bindCastNodeOnly();
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:f63b7da
/////////////////////////////////////////////////////////////////////////
1: 		//collation of ? operand should be same as the compilation schema
0: 		operand.setCollationUsingCompilationSchema(
commit:7c5fbc4
/////////////////////////////////////////////////////////////////////////
1: 		//Result of upper()/lower() will have the same collation as the   
1: 		//argument to upper()/lower(). 
0: 		getTypeServices().setCollationDerivation(
0: 				operand.getTypeServices().getCollationDerivation());
0: 		getTypeServices().setCollationType(
0: 				operand.getTypeServices().getCollationType());
/////////////////////////////////////////////////////////////////////////
0: 		//collation of ? operand should be same as the current schema
0: 		operand.getTypeServices().setCollationDerivation(
0: 				StringDataValue.COLLATION_DERIVATION_IMPLICIT);
0: 		operand.getTypeServices().setCollationType(
0: 				getLanguageConnectionContext().getDefaultSchema()
0: 						.getCollationType());
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d5bc20f
/////////////////////////////////////////////////////////////////////////
1: 		operand.setType(DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR));
/////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * @see ValueNode#requiresTypeFromContext
0: 	 */
0: 	public boolean requiresTypeFromContext()
0: 	{
0: 	    //should return false because lower(?)/upper(?) are bound to varchar and hence don't
0: 	    //require their type to be set from the context. 
0: 	    return false;
0: 	}
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.iapi.types.StringDataValue;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import java.sql.Types;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * This node represents a unary upper or lower operator
0:  *
0:  * @author Jerry
0:  */
0: 
0: public class SimpleStringOperatorNode extends UnaryOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	 * Initializer for a SimpleOperatorNode
0: 	 *
0: 	 * @param operand		The operand
0: 	 * @param methodName	The method name
0: 	 */
0: 
0: 	public void init(Object operand, Object methodName)
0: 	{
0: 		super.init(operand, methodName, methodName);
0: 	}
0: 
0: 	/**
0: 	 * Bind this operator
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList	fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
0: 			throws StandardException
0: 	{
0: 		TypeId	operandType;
0: 
0: 		super.bindExpression(fromList, subqueryList, 
0: 				aggregateVector);
0: 
0: 		/*
0: 		** Check the type of the operand - this function is allowed only on
0: 		** string value (char and bit) types.
0: 		*/
0: 		operandType = operand.getTypeId();
0: 
0: 		switch (operandType.getJDBCTypeId())
0: 		{
0: 				case Types.CHAR:
0: 				case Types.VARCHAR:
0: 				case Types.LONGVARCHAR:
0: 				case Types.CLOB:
0: 					break;
0: 				case org.apache.derby.iapi.reference.JDBC20Translation.SQL_TYPES_JAVA_OBJECT:
0: 				case Types.OTHER:	
0: 				{
0: 					throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
0: 										methodName,
0: 										operandType.getSQLTypeName());
0: 				}
0: 
0: 				default:
0: 					operand =  (ValueNode)
0: 						getNodeFactory().getNode(
0: 							C_NodeTypes.CAST_NODE,
0: 							operand,
0: 							DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true, 
0: 										  operand.getTypeCompiler().
0: 											getCastToCharWidth(
0: 												operand.getTypeServices())),
0: 							getContextManager());
0: 					((CastNode) operand).bindCastNodeOnly();
0: 					operandType = operand.getTypeId();
0: 		}
0: 
0: 		/*
0: 		** The result type of upper()/lower() is the type of the operand.
0: 		*/
0: 
0: 		setType(new DataTypeDescriptor(operandType,
0: 				operand.getTypeServices().isNullable(),
0: 				operand.getTypeCompiler().
0: 					getCastToCharWidth(operand.getTypeServices())
0: 						)
0: 				);
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Bind a ? parameter operand of the upper/lower function.
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	void bindParameter()
0: 			throws StandardException
0: 	{
0: 		/*
0: 		** According to the SQL standard, if bit_length has a ? operand,
0: 		** its type is bit varying with the implementation-defined maximum length
0: 		** for a bit.
0: 		*/
0: 
0: 		((ParameterNode) operand).setDescriptor(
0: 							DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR));
0: 	}
0: 
0: 	/**
0: 	 * This is a length operator node.  Overrides this method
0: 	 * in UnaryOperatorNode for code generation purposes.
0: 	 */
0: 	public String getReceiverInterfaceName() {
0: 	    return ClassName.StringDataValue;
0: 	}
0: }
============================================================================