1:ee59de8: /*
2:ee59de8: 
1:ee59de8:    Derby - Class org.apache.derby.impl.sql.execute.CreateRoleConstantAction
1:ee59de8: 
1:ee59de8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ee59de8:    contributor license agreements.  See the NOTICE file distributed with
1:ee59de8:    this work for additional information regarding copyright ownership.
1:ee59de8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ee59de8:    (the "License"); you may not use this file except in compliance with
1:ee59de8:    the License.  You may obtain a copy of the License at
1:ee59de8: 
1:ee59de8:       http://www.apache.org/licenses/LICENSE-2.0
1:ee59de8: 
1:ee59de8:    Unless required by applicable law or agreed to in writing, software
1:ee59de8:    distributed under the License is distributed on an "AS IS" BASIS,
1:ee59de8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee59de8:    See the License for the specific language governing permissions and
1:ee59de8:    limitations under the License.
1:ee59de8: 
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: package org.apache.derby.impl.sql.execute;
1:ee59de8: 
1:ee59de8: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:ee59de8: 
1:c8e864b: import org.apache.derby.iapi.services.property.PropertyUtil;
1:ee59de8: import org.apache.derby.iapi.error.StandardException;
1:c8e864b: import org.apache.derby.iapi.util.IdUtil;
1:c8e864b: import org.apache.derby.iapi.jdbc.AuthenticationService;
1:ee59de8: import org.apache.derby.iapi.sql.Activation;
1:ee59de8: import org.apache.derby.iapi.sql.conn.Authorizer;
1:ee59de8: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:4e3ddd7: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:ee59de8: import org.apache.derby.iapi.store.access.TransactionController;
1:c8e864b: import org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl;
1:ee59de8: import org.apache.derby.shared.common.reference.SQLState;
1:c8e864b: import org.apache.derby.iapi.reference.Property;
1:ee59de8: 
1:ee59de8: /**
1:ee59de8:  *  This class performs actions that are ALWAYS performed for a
1:ee59de8:  *  CREATE ROLE statement at execution time.
1:ee59de8:  *  These SQL objects are stored in the SYS.SYSROLES table.
1:ee59de8:  *
1:ee59de8:  */
1:ee59de8: class CreateRoleConstantAction extends DDLConstantAction {
1:ee59de8: 
1:ee59de8:     private String roleName;
1:ee59de8: 
1:ee59de8:     // CONSTRUCTORS
1:ee59de8:     /**
1:ee59de8:      *  Make the ConstantAction for a CREATE ROLE statement.
1:ee59de8:      *  When executed, will create a role by the given name.
1:ee59de8:      *
1:ee59de8:      *  @param roleName     The name of the role being created
1:ee59de8:      */
1:ee59de8:     public CreateRoleConstantAction(String roleName)
1:ee59de8:     {
1:ee59de8:         this.roleName = roleName;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     // INTERFACE METHODS
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      *  This is the guts of the Execution-time logic for CREATE ROLE.
1:ee59de8:      *
1:ee59de8:      *  @see ConstantAction#executeConstantAction
1:ee59de8:      *
1:ee59de8:      * @exception StandardException     Thrown on failure
1:ee59de8:      */
1:ee59de8:     public void executeConstantAction(Activation activation)
1:ee59de8:         throws StandardException
1:ee59de8:     {
1:ee59de8: 
1:ee59de8:         LanguageConnectionContext lcc =
1:ee59de8:             activation.getLanguageConnectionContext();
1:ee59de8:         DataDictionary dd = lcc.getDataDictionary();
1:ee59de8:         TransactionController tc = lcc.getTransactionExecute();
1:ee59de8:         DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:ee59de8: 
1:9c3b91c:         if (roleName.equals(Authorizer.PUBLIC_AUTHORIZATION_ID)) {
1:9c3b91c:             throw StandardException.
1:9c3b91c:                 newException(SQLState.AUTH_PUBLIC_ILLEGAL_AUTHORIZATION_ID);
1:9c3b91c:         }
1:9c3b91c: 
1:ee59de8:         // currentAuthId is currently always the database owner since
1:ee59de8:         // role definition is a database owner power. This may change
1:ee59de8:         // in the future since this SQL is more liberal.
1:ee59de8:         //
1:9f60172:         final String currentAuthId = lcc.getCurrentUserId(activation);
1:ee59de8: 
1:ce887a5:         dd.startWriting(lcc);
1:ce887a5: 
1:ee59de8:         //
1:ee59de8:         // Check if this role already exists. If it does, throw.
1:ee59de8:         //
1:fe8c4c2:         RoleGrantDescriptor rdDef = dd.getRoleDefinitionDescriptor(roleName);
1:ee59de8: 
1:fe8c4c2:         if (rdDef != null) {
1:ee59de8:             throw StandardException.
1:ee59de8:                 newException(SQLState.LANG_OBJECT_ALREADY_EXISTS,
1:fe8c4c2:                              rdDef.getDescriptorType(), roleName);
1:ee59de8:         }
1:ee59de8: 
1:c8e864b:         // Check if the proposed role id exists as a user id in
1:ee59de8:         // a privilege grant or as a built-in user ("best effort"; we
1:ee59de8:         // can't guarantee against collision if users are externally
1:ee59de8:         // defined or added later).
1:c8e864b:         if (knownUser(roleName, currentAuthId, lcc, dd, tc)) {
1:c8e864b:             throw StandardException.
1:c8e864b:                 newException(SQLState.LANG_OBJECT_ALREADY_EXISTS,
1:c8e864b:                              "User", roleName);
1:c8e864b:         }
1:ee59de8: 
1:fe8c4c2:         rdDef = ddg.newRoleGrantDescriptor(
1:f717f79:             dd.getUUIDFactory().createUUID(),
1:f717f79:             roleName,
1:f717f79:             currentAuthId,// grantee
1:f717f79:             Authorizer.SYSTEM_AUTHORIZATION_ID,// grantor
1:f717f79:             true,         // with admin option
1:f717f79:             true);        // is definition
1:ee59de8: 
1:fe8c4c2:         dd.addDescriptor(rdDef,
1:ee59de8:                          null,  // parent
1:ee59de8:                          DataDictionary.SYSROLES_CATALOG_NUM,
1:ee59de8:                          false, // duplicatesAllowed
1:ee59de8:                          tc);
1:ee59de8:     }
1:ee59de8: 
1:ee59de8: 
1:ee59de8:     // OBJECT SHADOWS
1:ee59de8: 
1:ee59de8:     public String toString()
1:ee59de8:     {
1:ee59de8:         // Do not put this under SanityManager.DEBUG - it is needed for
1:ee59de8:         // error reporting.
1:ee59de8:         return "CREATE ROLE " + roleName;
1:ee59de8:     }
1:c8e864b: 
1:c8e864b:     // PRIVATE METHODS
1:c8e864b: 
1:c8e864b:     /**
1:c8e864b:      * Heuristically, try to determine is a proposed role identifier
1:c8e864b:      * is already known to Derby as a user name. Method: If BUILTIN
1:c8e864b:      * authentication is used, check if there is such a user. If
1:c8e864b:      * external authentication is used, we lose.  If there turns out
1:c8e864b:      * to be collision, and we can't detect it here, we should block
1:c8e864b:      * such a user from connecting (FIXME), since there is now a role
1:c8e864b:      * with that name.
1:c8e864b:      */
1:c8e864b:     private boolean knownUser(String roleName,
1:c8e864b:                               String currentUser,
1:c8e864b:                               LanguageConnectionContext lcc,
1:c8e864b:                               DataDictionary dd,
1:c8e864b:                               TransactionController tc)
1:c8e864b:             throws StandardException {
1:c8e864b:         //
1:c8e864b:         AuthenticationService s = lcc.getDatabase().getAuthenticationService();
1:c8e864b: 
1:c8e864b:         if (currentUser.equals(roleName)) {
1:c8e864b:             return true;
1:c8e864b:         }
1:c8e864b: 
1:c8e864b:         if (s instanceof BasicAuthenticationServiceImpl) {
1:c8e864b:             // Derby builtin authentication
1:c8e864b: 
1:c8e864b:             if (PropertyUtil.existsBuiltinUser(tc,roleName)) {
1:c8e864b:                 return true;
1:c8e864b:             }
1:c8e864b:         } else {
1:c8e864b:             // Does LDAP  offer a way to ask if a user exists?
1:c8e864b:             // User supplied authentication?
1:c8e864b:             // See DERBY-866. Would be nice to have a dictionary table of users
1:c8e864b:             // synchronized against external authentication providers.
1:c8e864b:         }
1:c8e864b: 
1:c8e864b:         // Goto through all grants to see if there is a grant to an
1:c8e864b:         // authorization identifier which is not a role (hence, it
1:c8e864b:         // must be a user).
1:c8e864b:         if (dd.existsGrantToAuthid(roleName, tc)) {
1:c8e864b:             return true;
1:c8e864b:         }
1:c8e864b: 
1:c8e864b:         // Go through all schemas to see if any one of them is owned by a authid
1:c8e864b:         // the same as the proposed roleName.
1:c8e864b:         if (dd.existsSchemaOwnedBy(roleName, tc)) {
1:c8e864b:             return true;
1:c8e864b:         }
1:c8e864b: 
1:c8e864b:         return false;
1:c8e864b:     }
1:ee59de8: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:         final String currentAuthId = lcc.getCurrentUserId(activation);
commit:fe8c4c2
/////////////////////////////////////////////////////////////////////////
1:         RoleGrantDescriptor rdDef = dd.getRoleDefinitionDescriptor(roleName);
1:         if (rdDef != null) {
1:                              rdDef.getDescriptorType(), roleName);
/////////////////////////////////////////////////////////////////////////
1:         rdDef = ddg.newRoleGrantDescriptor(
/////////////////////////////////////////////////////////////////////////
1:         dd.addDescriptor(rdDef,
commit:4e3ddd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
/////////////////////////////////////////////////////////////////////////
0:         RoleGrantDescriptor rd = dd.getRoleDefinitionDescriptor(roleName);
/////////////////////////////////////////////////////////////////////////
0:         rd = ddg.newRoleGrantDescriptor(
commit:c8e864b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: import org.apache.derby.iapi.util.IdUtil;
1: import org.apache.derby.iapi.jdbc.AuthenticationService;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl;
1: import org.apache.derby.iapi.reference.Property;
/////////////////////////////////////////////////////////////////////////
0:                              rd.getDescriptorType(), roleName);
1:         // Check if the proposed role id exists as a user id in
1:         if (knownUser(roleName, currentAuthId, lcc, dd, tc)) {
1:             throw StandardException.
1:                 newException(SQLState.LANG_OBJECT_ALREADY_EXISTS,
1:                              "User", roleName);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     // PRIVATE METHODS
1: 
1:     /**
1:      * Heuristically, try to determine is a proposed role identifier
1:      * is already known to Derby as a user name. Method: If BUILTIN
1:      * authentication is used, check if there is such a user. If
1:      * external authentication is used, we lose.  If there turns out
1:      * to be collision, and we can't detect it here, we should block
1:      * such a user from connecting (FIXME), since there is now a role
1:      * with that name.
1:      */
1:     private boolean knownUser(String roleName,
1:                               String currentUser,
1:                               LanguageConnectionContext lcc,
1:                               DataDictionary dd,
1:                               TransactionController tc)
1:             throws StandardException {
1:         //
1:         AuthenticationService s = lcc.getDatabase().getAuthenticationService();
1: 
1:         if (currentUser.equals(roleName)) {
1:             return true;
1:         }
1: 
1:         if (s instanceof BasicAuthenticationServiceImpl) {
1:             // Derby builtin authentication
1: 
1:             if (PropertyUtil.existsBuiltinUser(tc,roleName)) {
1:                 return true;
1:             }
1:         } else {
1:             // Does LDAP  offer a way to ask if a user exists?
1:             // User supplied authentication?
1:             // See DERBY-866. Would be nice to have a dictionary table of users
1:             // synchronized against external authentication providers.
1:         }
1: 
1:         // Goto through all grants to see if there is a grant to an
1:         // authorization identifier which is not a role (hence, it
1:         // must be a user).
1:         if (dd.existsGrantToAuthid(roleName, tc)) {
1:             return true;
1:         }
1: 
1:         // Go through all schemas to see if any one of them is owned by a authid
1:         // the same as the proposed roleName.
1:         if (dd.existsSchemaOwnedBy(roleName, tc)) {
1:             return true;
1:         }
1: 
1:         return false;
1:     }
commit:9c3b91c
/////////////////////////////////////////////////////////////////////////
1:         if (roleName.equals(Authorizer.PUBLIC_AUTHORIZATION_ID)) {
1:             throw StandardException.
1:                 newException(SQLState.AUTH_PUBLIC_ILLEGAL_AUTHORIZATION_ID);
1:         }
1: 
commit:ce887a5
/////////////////////////////////////////////////////////////////////////
1:         dd.startWriting(lcc);
1: 
/////////////////////////////////////////////////////////////////////////
commit:f717f79
/////////////////////////////////////////////////////////////////////////
0:         rd = ddg.newRoleDescriptor(
1:             dd.getUUIDFactory().createUUID(),
1:             roleName,
1:             currentAuthId,// grantee
1:             Authorizer.SYSTEM_AUTHORIZATION_ID,// grantor
1:             true,         // with admin option
1:             true);        // is definition
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.CreateRoleConstantAction
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.RoleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.shared.common.reference.SQLState;
1: 
1: 
1: /**
1:  *  This class performs actions that are ALWAYS performed for a
1:  *  CREATE ROLE statement at execution time.
1:  *  These SQL objects are stored in the SYS.SYSROLES table.
1:  *
1:  */
1: class CreateRoleConstantAction extends DDLConstantAction {
1: 
1:     private String roleName;
1: 
1:     // CONSTRUCTORS
1:     /**
1:      *  Make the ConstantAction for a CREATE ROLE statement.
1:      *  When executed, will create a role by the given name.
1:      *
1:      *  @param roleName     The name of the role being created
1:      */
1:     public CreateRoleConstantAction(String roleName)
1:     {
1:         this.roleName = roleName;
1:     }
1: 
1:     // INTERFACE METHODS
1: 
1:     /**
1:      *  This is the guts of the Execution-time logic for CREATE ROLE.
1:      *
1:      *  @see ConstantAction#executeConstantAction
1:      *
1:      * @exception StandardException     Thrown on failure
1:      */
1:     public void executeConstantAction(Activation activation)
1:         throws StandardException
1:     {
1: 
1:         LanguageConnectionContext lcc =
1:             activation.getLanguageConnectionContext();
1:         DataDictionary dd = lcc.getDataDictionary();
1:         TransactionController tc = lcc.getTransactionExecute();
1:         DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
1:         // currentAuthId is currently always the database owner since
1:         // role definition is a database owner power. This may change
1:         // in the future since this SQL is more liberal.
1:         //
0:         final String currentAuthId = lcc.getAuthorizationId();
1: 
1:         //
1:         // Check if this role already exists. If it does, throw.
1:         //
0:         RoleDescriptor rd = dd.getRoleDefinitionDescriptor(roleName);
1: 
0:         if (rd != null) {
1:             throw StandardException.
1:                 newException(SQLState.LANG_OBJECT_ALREADY_EXISTS,
0:                              "Role" , roleName);
1:         }
1: 
0:         // FIXME: Check if the proposed role id exists as a user id in
1:         // a privilege grant or as a built-in user ("best effort"; we
1:         // can't guarantee against collision if users are externally
1:         // defined or added later).
1: 
0:         rd = ddg.newRoleDescriptor(roleName,
0:                                    currentAuthId,// grantee
0:                                    Authorizer.SYSTEM_AUTHORIZATION_ID,// grantor
0:                                    true,         // with admin option
0:                                    true);        // is definition
1: 
0:         dd.startWriting(lcc);
0:         dd.addDescriptor(rd,
1:                          null,  // parent
1:                          DataDictionary.SYSROLES_CATALOG_NUM,
1:                          false, // duplicatesAllowed
1:                          tc);
1:     }
1: 
1: 
1:     // OBJECT SHADOWS
1: 
1:     public String toString()
1:     {
1:         // Do not put this under SanityManager.DEBUG - it is needed for
1:         // error reporting.
1:         return "CREATE ROLE " + roleName;
1:     }
1: }
============================================================================