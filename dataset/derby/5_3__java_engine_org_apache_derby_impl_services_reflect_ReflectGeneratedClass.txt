1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.reflect.ReflectGeneratedClass
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
11:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.reflect;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedByteCode;
1:eac0369: import org.apache.derby.iapi.services.loader.ClassFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import java.lang.reflect.Method;
1:eac0369: import java.util.Hashtable;
1:eac0369: 
1:eac0369: public final class ReflectGeneratedClass extends LoadedGeneratedClass {
1:eac0369: 
1:a15a470: 	private final Hashtable<String,GeneratedMethod> methodCache;
1:eac0369: 	private static final GeneratedMethod[] directs;
1:eac0369: 
1:eac0369: 	static {
1:eac0369: 		directs = new GeneratedMethod[10];
1:eac0369: 		for (int i = 0; i < directs.length; i++) {
1:eac0369: 			directs[i] = new DirectCall(i);
5:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:6790718: 	public ReflectGeneratedClass(ClassFactory cf, Class jvmClass) {
1:eac0369: 		super(cf, jvmClass);
1:a15a470: 		methodCache = new Hashtable<String,GeneratedMethod>();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public GeneratedMethod getMethod(String simpleName)
1:eac0369: 		throws StandardException {
1:eac0369: 
1:a15a470: 		GeneratedMethod rm = methodCache.get(simpleName);
1:eac0369: 		if (rm != null)
1:eac0369: 			return rm;
1:eac0369: 
1:eac0369: 		// Only look for methods that take no arguments
2:eac0369: 		try {
1:eac0369: 			if ((simpleName.length() == 2) && simpleName.startsWith("e")) {
1:eac0369: 
1:eac0369: 				int id = ((int) simpleName.charAt(1)) - '0';
1:eac0369: 
1:eac0369: 				rm = directs[id];
1:eac0369: 
1:eac0369: 
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				Method m = getJVMClass().getMethod(simpleName, (Class []) null);
1:eac0369: 				
1:eac0369: 				rm = new ReflectMethod(m);
1:eac0369: 			}
1:eac0369: 			methodCache.put(simpleName, rm);
1:eac0369: 			return rm;
1:eac0369: 
1:eac0369: 		} catch (NoSuchMethodException nsme) {
1:eac0369: 			throw StandardException.newException(SQLState.GENERATED_CLASS_NO_SUCH_METHOD,
1:eac0369: 				nsme, getName(), simpleName);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
1:eac0369: class DirectCall implements GeneratedMethod {
1:eac0369: 
1:eac0369: 	private final int which;
1:eac0369: 
1:eac0369: 	DirectCall(int which) {
1:eac0369: 
1:eac0369: 		this.which = which;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Object invoke(Object ref)
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			GeneratedByteCode gref = (GeneratedByteCode) ref;
1:eac0369: 			switch (which) {
1:eac0369: 			case 0:
1:eac0369: 				return gref.e0();
1:eac0369: 			case 1:
1:eac0369: 				return gref.e1();
1:eac0369: 			case 2:
1:eac0369: 				return gref.e2();
1:eac0369: 			case 3:
1:eac0369: 				return gref.e3();
1:eac0369: 			case 4:
1:eac0369: 				return gref.e4();
1:eac0369: 			case 5:
1:eac0369: 				return gref.e5();
1:eac0369: 			case 6:
1:eac0369: 				return gref.e6();
1:eac0369: 			case 7:
1:eac0369: 				return gref.e7();
1:eac0369: 			case 8:
1:eac0369: 				return gref.e8();
1:eac0369: 			case 9:
1:eac0369: 				return gref.e9();
1:eac0369: 			}
1:eac0369: 			return null;
1:eac0369: 		} catch (StandardException se) {
1:eac0369: 			throw se;
1:eac0369: 		}		
1:eac0369: 		catch (Throwable t) {
1:eac0369: 			throw StandardException.unexpectedUserException(t);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a15a470
/////////////////////////////////////////////////////////////////////////
1: 	private final Hashtable<String,GeneratedMethod> methodCache;
/////////////////////////////////////////////////////////////////////////
1: 		methodCache = new Hashtable<String,GeneratedMethod>();
1: 		GeneratedMethod rm = methodCache.get(simpleName);
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6790718
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public ReflectGeneratedClass(ClassFactory cf, Class jvmClass) {
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.reflect.ReflectGeneratedClass
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.reflect
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.reflect;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: import org.apache.derby.iapi.services.loader.GeneratedByteCode;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.context.Context;
1: 
1: import java.lang.reflect.Method;
1: import java.util.Hashtable;
1: 
1: public final class ReflectGeneratedClass extends LoadedGeneratedClass {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
0: 	private final Hashtable methodCache;
1: 	private static final GeneratedMethod[] directs;
1: 
1: 
0: 	private final Class	factoryClass;
0: 	private GCInstanceFactory factory;
1: 
1: 	static {
1: 		directs = new GeneratedMethod[10];
1: 		for (int i = 0; i < directs.length; i++) {
1: 			directs[i] = new DirectCall(i);
1: 		}
1: 	}
1: 
0: 	public ReflectGeneratedClass(ClassFactory cf, Class jvmClass, Class factoryClass) {
1: 		super(cf, jvmClass);
0: 		methodCache = new Hashtable();
0: 		this.factoryClass = factoryClass;
1: 	}
1: 
0: 	public Object newInstance(Context context) throws StandardException	{
0: 		if (factoryClass == null) {
0: 			return super.newInstance(context);
1: 		}
1: 
0: 		if (factory == null) {
1: 
0: 			Throwable t;
1: 			try {
0: 				factory =  (GCInstanceFactory) factoryClass.newInstance();
0: 				t = null;
0: 			} catch (InstantiationException ie) {
0: 				t = ie;
0: 			} catch (IllegalAccessException iae) {
0: 				t = iae;
0: 			} catch (LinkageError le) {
0: 				t = le;
1: 			}
1: 
0: 			if (t != null)
0: 				throw StandardException.newException(SQLState.GENERATED_CLASS_INSTANCE_ERROR, t, getName());
1: 		}
1: 
0: 		GeneratedByteCode ni = factory.getNewInstance();
0: 		ni.initFromContext(context);
0: 		ni.setGC(this);
0: 		ni.postConstructor();
0: 		return ni;
1: 
1: 	}
1: 
1: 	public GeneratedMethod getMethod(String simpleName)
1: 		throws StandardException {
1: 
0: 		GeneratedMethod rm = (GeneratedMethod) methodCache.get(simpleName);
1: 		if (rm != null)
1: 			return rm;
1: 
1: 		// Only look for methods that take no arguments
1: 		try {
1: 			if ((simpleName.length() == 2) && simpleName.startsWith("e")) {
1: 
1: 				int id = ((int) simpleName.charAt(1)) - '0';
1: 
1: 				rm = directs[id];
1: 
1: 
1: 			}
1: 			else
1: 			{
1: 				Method m = getJVMClass().getMethod(simpleName, (Class []) null);
1: 				
1: 				rm = new ReflectMethod(m);
1: 			}
1: 			methodCache.put(simpleName, rm);
1: 			return rm;
1: 
1: 		} catch (NoSuchMethodException nsme) {
1: 			throw StandardException.newException(SQLState.GENERATED_CLASS_NO_SUCH_METHOD,
1: 				nsme, getName(), simpleName);
1: 		}
1: 	}
1: }
1: 
1: class DirectCall implements GeneratedMethod {
1: 
1: 	private final int which;
1: 
1: 	DirectCall(int which) {
1: 
1: 		this.which = which;
1: 	}
1: 
1: 	public Object invoke(Object ref)
1: 		throws StandardException {
1: 
1: 		try {
1: 
1: 			GeneratedByteCode gref = (GeneratedByteCode) ref;
1: 			switch (which) {
1: 			case 0:
1: 				return gref.e0();
1: 			case 1:
1: 				return gref.e1();
1: 			case 2:
1: 				return gref.e2();
1: 			case 3:
1: 				return gref.e3();
1: 			case 4:
1: 				return gref.e4();
1: 			case 5:
1: 				return gref.e5();
1: 			case 6:
1: 				return gref.e6();
1: 			case 7:
1: 				return gref.e7();
1: 			case 8:
1: 				return gref.e8();
1: 			case 9:
1: 				return gref.e9();
1: 			}
1: 			return null;
1: 		} catch (StandardException se) {
1: 			throw se;
1: 		}		
1: 		catch (Throwable t) {
1: 			throw StandardException.unexpectedUserException(t);
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.reflect
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.reflect;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: import org.apache.derby.iapi.services.loader.GeneratedByteCode;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.context.Context;
0: 
0: import java.lang.reflect.Method;
0: import java.util.Hashtable;
0: 
0: public final class ReflectGeneratedClass extends LoadedGeneratedClass {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private final Hashtable methodCache;
0: 	private static final GeneratedMethod[] directs;
0: 
0: 
0: 	private final Class	factoryClass;
0: 	private GCInstanceFactory factory;
0: 
0: 	static {
0: 		directs = new GeneratedMethod[10];
0: 		for (int i = 0; i < directs.length; i++) {
0: 			directs[i] = new DirectCall(i);
0: 		}
0: 	}
0: 
0: 	public ReflectGeneratedClass(ClassFactory cf, Class jvmClass, Class factoryClass) {
0: 		super(cf, jvmClass);
0: 		methodCache = new Hashtable();
0: 		this.factoryClass = factoryClass;
0: 	}
0: 
0: 	public Object newInstance(Context context) throws StandardException	{
0: 		if (factoryClass == null) {
0: 			return super.newInstance(context);
0: 		}
0: 
0: 		if (factory == null) {
0: 
0: 			Throwable t;
0: 			try {
0: 				factory =  (GCInstanceFactory) factoryClass.newInstance();
0: 				t = null;
0: 			} catch (InstantiationException ie) {
0: 				t = ie;
0: 			} catch (IllegalAccessException iae) {
0: 				t = iae;
0: 			} catch (LinkageError le) {
0: 				t = le;
0: 			}
0: 
0: 			if (t != null)
0: 				throw StandardException.newException(SQLState.GENERATED_CLASS_INSTANCE_ERROR, t, getName());
0: 		}
0: 
0: 		GeneratedByteCode ni = factory.getNewInstance();
0: 		ni.initFromContext(context);
0: 		ni.setGC(this);
0: 		ni.postConstructor();
0: 		return ni;
0: 
0: 	}
0: 
0: 	public GeneratedMethod getMethod(String simpleName)
0: 		throws StandardException {
0: 
0: 		GeneratedMethod rm = (GeneratedMethod) methodCache.get(simpleName);
0: 		if (rm != null)
0: 			return rm;
0: 
0: 		// Only look for methods that take no arguments
0: 		try {
0: 			if ((simpleName.length() == 2) && simpleName.startsWith("e")) {
0: 
0: 				int id = ((int) simpleName.charAt(1)) - '0';
0: 
0: 				rm = directs[id];
0: 
0: 
0: 			}
0: 			else
0: 			{
0: 				Method m = getJVMClass().getMethod(simpleName, (Class []) null);
0: 				
0: 				rm = new ReflectMethod(m);
0: 			}
0: 			methodCache.put(simpleName, rm);
0: 			return rm;
0: 
0: 		} catch (NoSuchMethodException nsme) {
0: 			throw StandardException.newException(SQLState.GENERATED_CLASS_NO_SUCH_METHOD,
0: 				nsme, getName(), simpleName);
0: 		}
0: 	}
0: }
0: 
0: class DirectCall implements GeneratedMethod {
0: 
0: 	private final int which;
0: 
0: 	DirectCall(int which) {
0: 
0: 		this.which = which;
0: 	}
0: 
0: 	public Object invoke(Object ref)
0: 		throws StandardException {
0: 
0: 		try {
0: 
0: 			GeneratedByteCode gref = (GeneratedByteCode) ref;
0: 			switch (which) {
0: 			case 0:
0: 				return gref.e0();
0: 			case 1:
0: 				return gref.e1();
0: 			case 2:
0: 				return gref.e2();
0: 			case 3:
0: 				return gref.e3();
0: 			case 4:
0: 				return gref.e4();
0: 			case 5:
0: 				return gref.e5();
0: 			case 6:
0: 				return gref.e6();
0: 			case 7:
0: 				return gref.e7();
0: 			case 8:
0: 				return gref.e8();
0: 			case 9:
0: 				return gref.e9();
0: 			}
0: 			return null;
0: 		} catch (StandardException se) {
0: 			throw se;
0: 		}		
0: 		catch (Throwable t) {
0: 			throw StandardException.unexpectedUserException(t);
0: 		}
0: 	}
0: }
============================================================================