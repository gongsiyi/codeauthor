1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.DatabaseInstant
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import java.io.Serializable;
2:eac0369: /**
1:eac0369:  *
1:eac0369:  *	
1:eac0369:  * A DatabaseInstant is a quantity which the database associates
1:eac0369:  *  with events to collate them.
1:eac0369:  * 
1:eac0369:  * This interface is used in the column SYS.SYSSYNCINSTANTS.INSTANT.
1:eac0369:  * <P>
1:eac0369:  * Assume a database associates a DatabaseInstant to an event E1. We call this
1:eac0369:  * I(E1). Also assume the same Database associates a DatabaseInstant to a second
1:eac0369:  * event E2. We call this I(E2). By definition
1:eac0369:  *
1:eac0369:  * <OL>
1:dbed020:  * <LI> If I(E1) &lt; I(E2) event E1 occurred before event E2
1:eac0369:  * <LI> If I(E2) = I(E2) event E1 is the same event as E2
1:dbed020:  * <LI> If I(E1) &gt; I(E2) event E1 occurred after event E2
1:eac0369:  * </OL>
1:eac0369:  *
1:eac0369:  * <P>It is not meaningful to compare a DatabaseInstant from one database with a
1:eac0369:  * DatabaseInstant from another. The result of such a comparison is
1:eac0369:  * undefined. Because a database may construct, store and compare huge numbers
1:eac0369:  * of DatabaseInstants, this interface does not require an implementation to
1:eac0369:  * notice when a caller compares a DatabaseInstants from different databases.
1:eac0369:  * <P>
1:eac0369:  * Any implementation of this interface must implement value equality, thus
1:eac0369:  * implementing equals() and hashCode() methods.
1:eac0369:  */
1:eac0369: public interface DatabaseInstant
1:eac0369: extends Serializable
1:eac0369: {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Return true if this DatabaseInstant is before another
1:eac0369: 	  DatabaseInstant from the same database.
1:eac0369: 
1:eac0369: 	  @param other a DatabaseInstant from the same database as
1:eac0369: 	  this. 
1:eac0369: 	  
1:eac0369: 	  @return the comparison result. If 'other' is from another database
1:eac0369: 	  the result is undefined.  
1:eac0369: 	*/
1:eac0369: 	public boolean lessThan(DatabaseInstant other);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Return true if this DatabaseInstant equals
1:eac0369: 	  DatabaseInstant from the same database.
1:eac0369: 
1:eac0369: 	  @param other a DatabaseInstant from the same database as
1:eac0369: 	  this. 
1:eac0369: 	  
1:eac0369: 	  @return the comparison result. If 'other' is from another database
1:eac0369: 	  the result is undefined.  
1:eac0369: 	*/
1:eac0369: 	public boolean equals(Object other);
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return the next higher DatabaseInstant. There is no requirement that
1:eac0369:      * a transaction with the next instant exist in the database. It is required that
1:eac0369:      * this.lessThan( this.next()), and that no instant can be between this and this.next().
1:eac0369:      *
1:eac0369:      * If the DatabaseInstant is implemented using a integer then next() should return
1:eac0369:      * a new DatabaseInstant formed by adding one to the integer.
1:eac0369:      *
1:eac0369:      * @return the next possible DatabaseInstant
1:eac0369:      */
1:eac0369:     public DatabaseInstant next();
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return the next lower DatabaseInstant. There is no requirement that
1:eac0369:      * a transaction with the next instant exist in the database. It is required that
1:eac0369:      * this.prior().lessThan( this), and that no instant can be between this and this.prior().
1:eac0369:      *
1:eac0369:      * If the DatabaseInstant is implemented using a integer then prior() should return
1:eac0369:      * a new DatabaseInstant formed by subtracting one from the integer.
1:eac0369:      *
1:eac0369:      * @return the prior possible DatabaseInstant
1:eac0369:      */
1:eac0369:     public DatabaseInstant prior();
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Convert the database instant to a string. This is mainly used for debugging.
1:eac0369:      *
1:eac0369:      * @return a string representation of the instant.
1:eac0369:      */
1:eac0369:     public String toString();
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:  * <LI> If I(E1) &lt; I(E2) event E1 occurred before event E2
1:  * <LI> If I(E1) &gt; I(E2) event E1 occurred after event E2
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.DatabaseInstant
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import java.io.Serializable;
1: /**
1:  *
1:  *	
1:  * A DatabaseInstant is a quantity which the database associates
1:  *  with events to collate them.
1:  * 
1:  * This interface is used in the column SYS.SYSSYNCINSTANTS.INSTANT.
1:  * <P>
1:  * Assume a database associates a DatabaseInstant to an event E1. We call this
1:  * I(E1). Also assume the same Database associates a DatabaseInstant to a second
1:  * event E2. We call this I(E2). By definition
1:  *
1:  * <OL>
0:  * <LI> If I(E1) < I(E2) event E1 occurred before event E2
1:  * <LI> If I(E2) = I(E2) event E1 is the same event as E2
0:  * <LI> If I(E1) > I(E2) event E1 occurred after event E2
1:  * </OL>
1:  *
1:  * <P>It is not meaningful to compare a DatabaseInstant from one database with a
1:  * DatabaseInstant from another. The result of such a comparison is
1:  * undefined. Because a database may construct, store and compare huge numbers
1:  * of DatabaseInstants, this interface does not require an implementation to
1:  * notice when a caller compares a DatabaseInstants from different databases.
1:  * <P>
1:  * Any implementation of this interface must implement value equality, thus
1:  * implementing equals() and hashCode() methods.
1:  */
1: public interface DatabaseInstant
1: extends Serializable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	  Return true if this DatabaseInstant is before another
1: 	  DatabaseInstant from the same database.
1: 
1: 	  @param other a DatabaseInstant from the same database as
1: 	  this. 
1: 	  
1: 	  @return the comparison result. If 'other' is from another database
1: 	  the result is undefined.  
1: 	*/
1: 	public boolean lessThan(DatabaseInstant other);
1: 
1: 	/**
1: 	  Return true if this DatabaseInstant equals
1: 	  DatabaseInstant from the same database.
1: 
1: 	  @param other a DatabaseInstant from the same database as
1: 	  this. 
1: 	  
1: 	  @return the comparison result. If 'other' is from another database
1: 	  the result is undefined.  
1: 	*/
1: 	public boolean equals(Object other);
1: 
1:     /**
1:      * Return the next higher DatabaseInstant. There is no requirement that
1:      * a transaction with the next instant exist in the database. It is required that
1:      * this.lessThan( this.next()), and that no instant can be between this and this.next().
1:      *
1:      * If the DatabaseInstant is implemented using a integer then next() should return
1:      * a new DatabaseInstant formed by adding one to the integer.
1:      *
1:      * @return the next possible DatabaseInstant
1:      */
1:     public DatabaseInstant next();
1: 
1:     /**
1:      * Return the next lower DatabaseInstant. There is no requirement that
1:      * a transaction with the next instant exist in the database. It is required that
1:      * this.prior().lessThan( this), and that no instant can be between this and this.prior().
1:      *
1:      * If the DatabaseInstant is implemented using a integer then prior() should return
1:      * a new DatabaseInstant formed by subtracting one from the integer.
1:      *
1:      * @return the prior possible DatabaseInstant
1:      */
1:     public DatabaseInstant prior();
1: 
1:     /**
1:      * Convert the database instant to a string. This is mainly used for debugging.
1:      *
1:      * @return a string representation of the instant.
1:      */
1:     public String toString();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import java.io.Serializable;
0: /**
0:  *
0:  *	
0:  * A DatabaseInstant is a quantity which the database associates
0:  *  with events to collate them.
0:  * 
0:  * This interface is used in the column SYS.SYSSYNCINSTANTS.INSTANT.
0:  * <P>
0:  * Assume a database associates a DatabaseInstant to an event E1. We call this
0:  * I(E1). Also assume the same Database associates a DatabaseInstant to a second
0:  * event E2. We call this I(E2). By definition
0:  *
0:  * <OL>
0:  * <LI> If I(E1) < I(E2) event E1 occurred before event E2
0:  * <LI> If I(E2) = I(E2) event E1 is the same event as E2
0:  * <LI> If I(E1) > I(E2) event E1 occurred after event E2
0:  * </OL>
0:  *
0:  * <P>It is not meaningful to compare a DatabaseInstant from one database with a
0:  * DatabaseInstant from another. The result of such a comparison is
0:  * undefined. Because a database may construct, store and compare huge numbers
0:  * of DatabaseInstants, this interface does not require an implementation to
0:  * notice when a caller compares a DatabaseInstants from different databases.
0:  * <P>
0:  * Any implementation of this interface must implement value equality, thus
0:  * implementing equals() and hashCode() methods.
0:  */
0: public interface DatabaseInstant
0: extends Serializable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	  Return true if this DatabaseInstant is before another
0: 	  DatabaseInstant from the same database.
0: 
0: 	  @param other a DatabaseInstant from the same database as
0: 	  this. 
0: 	  
0: 	  @return the comparison result. If 'other' is from another database
0: 	  the result is undefined.  
0: 	*/
0: 	public boolean lessThan(DatabaseInstant other);
0: 
0: 	/**
0: 	  Return true if this DatabaseInstant equals
0: 	  DatabaseInstant from the same database.
0: 
0: 	  @param other a DatabaseInstant from the same database as
0: 	  this. 
0: 	  
0: 	  @return the comparison result. If 'other' is from another database
0: 	  the result is undefined.  
0: 	*/
0: 	public boolean equals(Object other);
0: 
0:     /**
0:      * Return the next higher DatabaseInstant. There is no requirement that
0:      * a transaction with the next instant exist in the database. It is required that
0:      * this.lessThan( this.next()), and that no instant can be between this and this.next().
0:      *
0:      * If the DatabaseInstant is implemented using a integer then next() should return
0:      * a new DatabaseInstant formed by adding one to the integer.
0:      *
0:      * @return the next possible DatabaseInstant
0:      */
0:     public DatabaseInstant next();
0: 
0:     /**
0:      * Return the next lower DatabaseInstant. There is no requirement that
0:      * a transaction with the next instant exist in the database. It is required that
0:      * this.prior().lessThan( this), and that no instant can be between this and this.prior().
0:      *
0:      * If the DatabaseInstant is implemented using a integer then prior() should return
0:      * a new DatabaseInstant formed by subtracting one from the integer.
0:      *
0:      * @return the prior possible DatabaseInstant
0:      */
0:     public DatabaseInstant prior();
0: 
0:     /**
0:      * Convert the database instant to a string. This is mainly used for debugging.
0:      *
0:      * @return a string representation of the instant.
0:      */
0:     public String toString();
0: }
============================================================================