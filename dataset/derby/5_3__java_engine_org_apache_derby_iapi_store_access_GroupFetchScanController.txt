1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.GroupFetchScanController
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.Storable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
1:eac0369: import java.util.Hashtable;
1:eac0369: 
2:eac0369: /**
1:eac0369:   This scan controller can only be used for group fetch, no update
1:eac0369:   operations are supported, use ScanController if you need scan interfaces
1:eac0369:   other than group fetch.
1:eac0369:   <p>
1:eac0369:   In general group fetch will be more efficient than using the 
1:eac0369:   ScanController fetchNext() interface to get rows one at a time.  The
1:eac0369:   performance comes from reducing the per call overhead of getting
1:eac0369:   a row.  Also this interface can, depending on the requested isolation
1:eac0369:   level, possibly do more efficient locking.
1:eac0369:   <p>
1:eac0369:   Group fetch scans are opened from a TransactionController.
1:eac0369: 
1:eac0369:   @see TransactionController#openScan
1:eac0369:   @see RowCountable
1:eac0369:   @see GenericScanController
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface GroupFetchScanController extends GenericScanController
1:eac0369: {
1:eac0369:     /**
1:eac0369:      * Fetch the next N rows from the table.
1:eac0369:      * <p>
1:eac0369:      * The client allocates an array of N rows and passes it into the
1:eac0369:      * fetchNextSet() call.  The client must at least allocate a row and
1:eac0369:      * set row_array[0] to this row.  The client can optionally either leave
1:eac0369:      * the rest of array entries null, or allocate rows to the slots.
1:eac0369:      * If access finds an entry to be null, and wants to read a row into
1:eac0369:      * it, it will allocate a row to the slot.  Once fetchNextGroup() returns
1:eac0369:      * "ownership" of the row passes back to the client, access will not 
1:eac0369:      * keep references to the allocated row.  Expected usage is that 
1:eac0369:      * the client will specify an array of some number (say 10), and then 
1:eac0369:      * only allocate a single row.  This way if only 1 row qualifies only
1:eac0369:      * one row will have been allocated.
1:eac0369:      * <p>
1:eac0369:      * This routine does the equivalent of N 
1:eac0369:      * fetchNext() calls, filling in each of the rows in the array.
1:eac0369:      * Locking is performed exactly as if the N fetchNext() calls had
1:eac0369:      * been made.
1:eac0369:      * <p>
1:eac0369:      * It is up to Access how many rows to return.  fetchNextGroup() will
1:eac0369:      * return how many rows were filled in.  If fetchNextGroup() returns 0
1:eac0369:      * then the scan is complete, (ie. the scan is in the same state as if
1:eac0369:      * fetchNext() had returned false).  If the scan is not complete then
1:dbed020:      * fetchNext() will return (1 &lt;= row_count &lt;= N).
1:eac0369:      * <p>
1:eac0369:      * The current position of the scan is undefined if fetchNextSet()
1:eac0369:      * is used (ie. mixing fetch()/fetchNext() and fetchNextSet() calls
1:eac0369:      * in a single scan does not work).  This is because a fetchNextSet()
1:eac0369:      * request for 5 rows from a heap where the first 2 rows qualify, but
1:eac0369:      * no other rows qualify will result in the scan being positioned at
1:eac0369:      * the end of the table, while if 5 rows did qualify the scan will be
1:eac0369:      * positioned on the 5th row.
1:eac0369:      * <p>
1:eac0369:      * If the row loc array is non-null then for each row fetched into
1:eac0369:      * the row array, a corresponding fetchLocation() call will be made to
1:eac0369:      * fill in the rowloc_array.  This array, like the row array can be 
1:eac0369:      * initialized with only one non-null RowLocation and access will 
1:eac0369:      * allocate the rest on demand.
1:eac0369:      * <p>
1:eac0369:      * Qualifiers, start and stop positioning of the openscan are applied
1:eac0369:      * just as in a normal scan. 
1:eac0369:      * <p>
1:eac0369:      * The columns of the row will be the standard columns returned as
1:eac0369:      * part of a scan, as described by the validColumns - see openScan for
1:eac0369:      * description.
1:eac0369:      * <p>
1:eac0369:      * Expected usage:
1:eac0369:      *
1:eac0369:      * // allocate an array of 5 empty rows
1:eac0369:      * DataValueDescriptor[][] row_array = allocate_row_array(5);
1:eac0369:      * int row_cnt = 0;
1:eac0369:      *
1:eac0369:      * scan = openScan();
1:eac0369:      *
1:eac0369:      * while ((row_cnt = scan.fetchNextSet(row_array, null) != 0)
1:eac0369:      * {
1:eac0369:      *     // I got "row_cnt" rows from the scan.  These rows will be
1:eac0369:      *     // found in row_array[0] through row_array[row_cnt - 1]
1:eac0369:      * }
1:eac0369:      *
1:eac0369:      * <p>
1:eac0369: 	 * @return The number of qualifying rows found and copied into the 
1:eac0369:      *         provided array of rows.  If 0 then the scan is complete, 
1:eac0369:      *         otherwise the return value will be: 
1:dbed020:      *         1 &lt;= row_count &lt;= row_array.length
1:eac0369:      *
1:eac0369:      * @param row_array         The array of rows to copy rows into.  
1:dbed020:      *                          row_array[].length must &gt;= 1.   The first entry
1:eac0369:      *                          must be non-null destination rows, other entries
1:eac0369:      *                          may be null and will be allocated by access
1:eac0369:      *                          if needed.
1:eac0369:      *
1:eac0369:      * @param rowloc_array      If non-null, the array of row locations to 
1:eac0369:      *                          copy into.  If null, no row locations are
1:eac0369:      *                          retrieved.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public int fetchNextGroup(
1:eac0369:     DataValueDescriptor[][] row_array,
1:eac0369:     RowLocation[]           rowloc_array)
1:eac0369:         throws StandardException;
1:eac0369: 
1:bbc927c:     public int fetchNextGroup(
1:bbc927c:     DataValueDescriptor[][] row_array,
1:bbc927c:     RowLocation[]           oldrowloc_array,
1:bbc927c:     RowLocation[]           newrowloc_array)
1:bbc927c:         throws StandardException;
1:bbc927c: 
1:eac0369:     /**
1:eac0369:     Move to the next position in the scan.  If this is the first
1:eac0369:     call to next(), the position is set to the first row.
1:eac0369:     Returns false if there is not a next row to move to.
1:eac0369:     It is possible, but not guaranteed, that this method could return 
1:eac0369:     true again, after returning false, if some other operation in the same 
1:eac0369:     transaction appended a row to the underlying conglomerate.
1:eac0369: 
1:eac0369:     @return True if there is a next position in the scan,
1:eac0369: 	false if there isn't.
1:eac0369: 
1:eac0369: 	@exception StandardException Standard exception policy.
1:eac0369:     **/
1:eac0369:     boolean next()
1:eac0369: 		throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * fetchNext() will return (1 &lt;= row_count &lt;= N).
/////////////////////////////////////////////////////////////////////////
1:      *         1 &lt;= row_count &lt;= row_array.length
1:      *                          row_array[].length must &gt;= 1.   The first entry
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:bbc927c
/////////////////////////////////////////////////////////////////////////
1:     public int fetchNextGroup(
1:     DataValueDescriptor[][] row_array,
1:     RowLocation[]           oldrowloc_array,
1:     RowLocation[]           newrowloc_array)
1:         throws StandardException;
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.GroupFetchScanController
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: import java.util.Hashtable;
1: 
1: /**
1:   This scan controller can only be used for group fetch, no update
1:   operations are supported, use ScanController if you need scan interfaces
1:   other than group fetch.
1:   <p>
1:   In general group fetch will be more efficient than using the 
1:   ScanController fetchNext() interface to get rows one at a time.  The
1:   performance comes from reducing the per call overhead of getting
1:   a row.  Also this interface can, depending on the requested isolation
1:   level, possibly do more efficient locking.
1:   <p>
1:   Group fetch scans are opened from a TransactionController.
1: 
1:   @see TransactionController#openScan
1:   @see RowCountable
1:   @see GenericScanController
1: 
1: **/
1: 
1: public interface GroupFetchScanController extends GenericScanController
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:     /**
1:      * Fetch the next N rows from the table.
1:      * <p>
1:      * The client allocates an array of N rows and passes it into the
1:      * fetchNextSet() call.  The client must at least allocate a row and
1:      * set row_array[0] to this row.  The client can optionally either leave
1:      * the rest of array entries null, or allocate rows to the slots.
1:      * If access finds an entry to be null, and wants to read a row into
1:      * it, it will allocate a row to the slot.  Once fetchNextGroup() returns
1:      * "ownership" of the row passes back to the client, access will not 
1:      * keep references to the allocated row.  Expected usage is that 
1:      * the client will specify an array of some number (say 10), and then 
1:      * only allocate a single row.  This way if only 1 row qualifies only
1:      * one row will have been allocated.
1:      * <p>
1:      * This routine does the equivalent of N 
1:      * fetchNext() calls, filling in each of the rows in the array.
1:      * Locking is performed exactly as if the N fetchNext() calls had
1:      * been made.
1:      * <p>
1:      * It is up to Access how many rows to return.  fetchNextGroup() will
1:      * return how many rows were filled in.  If fetchNextGroup() returns 0
1:      * then the scan is complete, (ie. the scan is in the same state as if
1:      * fetchNext() had returned false).  If the scan is not complete then
0:      * fetchNext() will return (1 <= row_count <= N).
1:      * <p>
1:      * The current position of the scan is undefined if fetchNextSet()
1:      * is used (ie. mixing fetch()/fetchNext() and fetchNextSet() calls
1:      * in a single scan does not work).  This is because a fetchNextSet()
1:      * request for 5 rows from a heap where the first 2 rows qualify, but
1:      * no other rows qualify will result in the scan being positioned at
1:      * the end of the table, while if 5 rows did qualify the scan will be
1:      * positioned on the 5th row.
1:      * <p>
1:      * If the row loc array is non-null then for each row fetched into
1:      * the row array, a corresponding fetchLocation() call will be made to
1:      * fill in the rowloc_array.  This array, like the row array can be 
1:      * initialized with only one non-null RowLocation and access will 
1:      * allocate the rest on demand.
1:      * <p>
1:      * Qualifiers, start and stop positioning of the openscan are applied
1:      * just as in a normal scan. 
1:      * <p>
1:      * The columns of the row will be the standard columns returned as
1:      * part of a scan, as described by the validColumns - see openScan for
1:      * description.
1:      * <p>
1:      * Expected usage:
1:      *
1:      * // allocate an array of 5 empty rows
1:      * DataValueDescriptor[][] row_array = allocate_row_array(5);
1:      * int row_cnt = 0;
1:      *
1:      * scan = openScan();
1:      *
1:      * while ((row_cnt = scan.fetchNextSet(row_array, null) != 0)
1:      * {
1:      *     // I got "row_cnt" rows from the scan.  These rows will be
1:      *     // found in row_array[0] through row_array[row_cnt - 1]
1:      * }
1:      *
1:      * <p>
1: 	 * @return The number of qualifying rows found and copied into the 
1:      *         provided array of rows.  If 0 then the scan is complete, 
1:      *         otherwise the return value will be: 
0:      *         1 <= row_count <= row_array.length
1:      *
1:      * @param row_array         The array of rows to copy rows into.  
0:      *                          row_array[].length must >= 1.   The first entry
1:      *                          must be non-null destination rows, other entries
1:      *                          may be null and will be allocated by access
1:      *                          if needed.
1:      *
1:      * @param rowloc_array      If non-null, the array of row locations to 
1:      *                          copy into.  If null, no row locations are
1:      *                          retrieved.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public int fetchNextGroup(
1:     DataValueDescriptor[][] row_array,
1:     RowLocation[]           rowloc_array)
1:         throws StandardException;
1: 
1:     /**
1:     Move to the next position in the scan.  If this is the first
1:     call to next(), the position is set to the first row.
1:     Returns false if there is not a next row to move to.
1:     It is possible, but not guaranteed, that this method could return 
1:     true again, after returning false, if some other operation in the same 
1:     transaction appended a row to the underlying conglomerate.
1: 
1:     @return True if there is a next position in the scan,
1: 	false if there isn't.
1: 
1: 	@exception StandardException Standard exception policy.
1:     **/
1:     boolean next()
1: 		throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import java.util.Hashtable;
0: 
0: /**
0:   This scan controller can only be used for group fetch, no update
0:   operations are supported, use ScanController if you need scan interfaces
0:   other than group fetch.
0:   <p>
0:   In general group fetch will be more efficient than using the 
0:   ScanController fetchNext() interface to get rows one at a time.  The
0:   performance comes from reducing the per call overhead of getting
0:   a row.  Also this interface can, depending on the requested isolation
0:   level, possibly do more efficient locking.
0:   <p>
0:   Group fetch scans are opened from a TransactionController.
0: 
0:   @see TransactionController#openScan
0:   @see RowCountable
0:   @see GenericScanController
0: 
0: **/
0: 
0: public interface GroupFetchScanController extends GenericScanController
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0:     /**
0:      * Fetch the next N rows from the table.
0:      * <p>
0:      * The client allocates an array of N rows and passes it into the
0:      * fetchNextSet() call.  The client must at least allocate a row and
0:      * set row_array[0] to this row.  The client can optionally either leave
0:      * the rest of array entries null, or allocate rows to the slots.
0:      * If access finds an entry to be null, and wants to read a row into
0:      * it, it will allocate a row to the slot.  Once fetchNextGroup() returns
0:      * "ownership" of the row passes back to the client, access will not 
0:      * keep references to the allocated row.  Expected usage is that 
0:      * the client will specify an array of some number (say 10), and then 
0:      * only allocate a single row.  This way if only 1 row qualifies only
0:      * one row will have been allocated.
0:      * <p>
0:      * This routine does the equivalent of N 
0:      * fetchNext() calls, filling in each of the rows in the array.
0:      * Locking is performed exactly as if the N fetchNext() calls had
0:      * been made.
0:      * <p>
0:      * It is up to Access how many rows to return.  fetchNextGroup() will
0:      * return how many rows were filled in.  If fetchNextGroup() returns 0
0:      * then the scan is complete, (ie. the scan is in the same state as if
0:      * fetchNext() had returned false).  If the scan is not complete then
0:      * fetchNext() will return (1 <= row_count <= N).
0:      * <p>
0:      * The current position of the scan is undefined if fetchNextSet()
0:      * is used (ie. mixing fetch()/fetchNext() and fetchNextSet() calls
0:      * in a single scan does not work).  This is because a fetchNextSet()
0:      * request for 5 rows from a heap where the first 2 rows qualify, but
0:      * no other rows qualify will result in the scan being positioned at
0:      * the end of the table, while if 5 rows did qualify the scan will be
0:      * positioned on the 5th row.
0:      * <p>
0:      * If the row loc array is non-null then for each row fetched into
0:      * the row array, a corresponding fetchLocation() call will be made to
0:      * fill in the rowloc_array.  This array, like the row array can be 
0:      * initialized with only one non-null RowLocation and access will 
0:      * allocate the rest on demand.
0:      * <p>
0:      * Qualifiers, start and stop positioning of the openscan are applied
0:      * just as in a normal scan. 
0:      * <p>
0:      * The columns of the row will be the standard columns returned as
0:      * part of a scan, as described by the validColumns - see openScan for
0:      * description.
0:      * <p>
0:      * Expected usage:
0:      *
0:      * // allocate an array of 5 empty rows
0:      * DataValueDescriptor[][] row_array = allocate_row_array(5);
0:      * int row_cnt = 0;
0:      *
0:      * scan = openScan();
0:      *
0:      * while ((row_cnt = scan.fetchNextSet(row_array, null) != 0)
0:      * {
0:      *     // I got "row_cnt" rows from the scan.  These rows will be
0:      *     // found in row_array[0] through row_array[row_cnt - 1]
0:      * }
0:      *
0:      * <p>
0: 	 * @return The number of qualifying rows found and copied into the 
0:      *         provided array of rows.  If 0 then the scan is complete, 
0:      *         otherwise the return value will be: 
0:      *         1 <= row_count <= row_array.length
0:      *
0:      * @param row_array         The array of rows to copy rows into.  
0:      *                          row_array[].length must >= 1.   The first entry
0:      *                          must be non-null destination rows, other entries
0:      *                          may be null and will be allocated by access
0:      *                          if needed.
0:      *
0:      * @param rowloc_array      If non-null, the array of row locations to 
0:      *                          copy into.  If null, no row locations are
0:      *                          retrieved.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public int fetchNextGroup(
0:     DataValueDescriptor[][] row_array,
0:     RowLocation[]           rowloc_array)
0:         throws StandardException;
0: 
0:     /**
0:     Move to the next position in the scan.  If this is the first
0:     call to next(), the position is set to the first row.
0:     Returns false if there is not a next row to move to.
0:     It is possible, but not guaranteed, that this method could return 
0:     true again, after returning false, if some other operation in the same 
0:     transaction appended a row to the underlying conglomerate.
0: 
0:     @return True if there is a next position in the scan,
0: 	false if there isn't.
0: 
0: 	@exception StandardException Standard exception policy.
0:     **/
0:     boolean next()
0: 		throws StandardException;
0: }
============================================================================