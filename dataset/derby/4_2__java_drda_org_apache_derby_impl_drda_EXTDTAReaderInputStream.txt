1:a376274: /*
1:a376274:    Derby - Class org.apache.derby.impl.drda.EXTDTAReaderInputStream
1:cf5cebf: 
1:a376274:    Licensed to the Apache Software Foundation (ASF) under one
1:a376274:    or more contributor license agreements.  See the NOTICE file
1:a376274:    distributed with this work for additional information
1:a376274:    regarding copyright ownership.  The ASF licenses this file
1:a376274:    to you under the Apache License, Version 2.0 (the
1:a376274:    "License"); you may not use this file except in compliance
1:a376274:    with the License.  You may obtain a copy of the License at
12:a376274:    
1:a376274:    http://www.apache.org/licenses/LICENSE-2.0
1:a376274:    
1:a376274:    Unless required by applicable law or agreed to in writing,
1:a376274:    software distributed under the License is distributed on an
1:a376274:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a376274:    KIND, either express or implied.  See the License for the
1:a376274:    specific language governing permissions and limitations
1:a376274:    under the License.
7:a376274: */
1:a376274: package org.apache.derby.impl.drda;
1:cf5cebf: 
1:a376274: import java.io.IOException;
1:cf5cebf: import java.io.InputStream;
1:cf5cebf: import org.apache.derby.iapi.reference.DRDAConstants;
1:cf5cebf: import org.apache.derby.iapi.reference.SQLState;
1:cf5cebf: import org.apache.derby.iapi.services.i18n.MessageService;
1:cf5cebf: import org.apache.derby.iapi.services.io.DerbyIOException;
1:cf5cebf: import org.apache.derby.shared.common.reference.MessageId;
1:a376274: 
7:a376274: /**
1:a376274:  * Implementation of InputStream which get EXTDTA from the DDMReader.
1:cf5cebf:  * <p>
1:a376274:  * This class can be used to stream LOBs from Network client to the
1:a376274:  * Network server.
1:cf5cebf:  * <p>
1:cf5cebf:  * To be able to correctly stream data from the client without reading the
1:cf5cebf:  * while value up front, a trailing Derby-specific status byte was introduced
1:cf5cebf:  * (version 10.6). It is used by the client to tell the server if the data it
1:cf5cebf:  * received was valid, or if it detected an error while streaming the data.
1:cf5cebf:  * The DRDA protocol, or at least Derby's implementation of it, doesn't enable
1:cf5cebf:  * the client to inform the server about the error whilst streaming (there is a
1:cf5cebf:  * mechanism in DRDA to interrupt a running request, but it didn't seem like a
1:cf5cebf:  * feasible approach in this case).
1:a376274:  */
1:cf5cebf: abstract class EXTDTAReaderInputStream
1:cf5cebf:         extends InputStream {
1:cf5cebf: 
1:cf5cebf:     /** Whether or not the subclass is a layer B stream. */
1:cf5cebf:     protected final boolean isLayerBStream;
1:cf5cebf:     /** Whether or not to read the trailing Derby-specific status byte. */
1:cf5cebf:     protected final boolean readStatusByte;
1:cf5cebf:     /**
1:cf5cebf:      * Tells if the status byte has been set.
1:cf5cebf:      *
1:cf5cebf:      * @see #checkStatus(int)
1:cf5cebf:      */
1:cf5cebf:     private boolean statusSet;
1:cf5cebf:     /**
1:cf5cebf:      * The status Derby-specific status byte, if any.
1:cf5cebf:      * @see #isStatusSet()
1:cf5cebf:      */
1:cf5cebf:     private byte status;
1:cf5cebf:     /**
1:cf5cebf:      * Whether or not to suppress the exception when an error is indicated by
1:cf5cebf:      * the status byte.
1:cf5cebf:      */
1:cf5cebf:     private boolean suppressException;
1:cf5cebf: 
1:cf5cebf:     /**
1:cf5cebf:      * Initializes the class.
1:cf5cebf:      *
1:cf5cebf:      * @param layerB whether or not DDM layer B streaming is being used
1:cf5cebf:      * @param readStatusByte whether or not to read the trailing Derby-specific
1:cf5cebf:      *      status byte
1:cf5cebf:      */
1:cf5cebf:     protected EXTDTAReaderInputStream(boolean layerB, boolean readStatusByte) {
1:cf5cebf:         this.isLayerBStream = layerB;
1:cf5cebf:         this.readStatusByte = readStatusByte;
1:cf5cebf:     }
1:cf5cebf: 
1:cf5cebf:     /**
1:cf5cebf:      * Saves the status byte read off the wire.
1:cf5cebf:      *
1:cf5cebf:      * @param status the status
1:cf5cebf:      * @see DRDAConstants
1:cf5cebf:      */
1:cf5cebf:     // Private for now, as the method is currently used only by checkStatus.
1:cf5cebf:     private void setStatus(int status) {
1:cf5cebf:         this.status = (byte)(status & 0xFF);
1:cf5cebf:         this.statusSet = true;
1:cf5cebf:     }
1:cf5cebf: 
1:cf5cebf:     /**
1:cf5cebf:      * Returns whether the status has been set or not.
1:cf5cebf:      *
1:cf5cebf:      * @return {@code true} if set, {@code false} if not.
1:cf5cebf:      */
1:cf5cebf:     public boolean isStatusSet() {
1:cf5cebf:         return statusSet;
1:cf5cebf:     }
1:cf5cebf: 
1:cf5cebf:     /**
1:cf5cebf:      * Returns the status byte.
1:cf5cebf:      * <p>
1:cf5cebf:      * <em>NOTE:</em> Check if the status byte has been set by calling
1:cf5cebf:      * {@linkplain #isStatusSet()}.
1:cf5cebf:      *
1:cf5cebf:      * @return The status byte.
1:cf5cebf:      */
1:cf5cebf:     public byte getStatus() {
1:cf5cebf:         if (!statusSet) {
1:cf5cebf:             throw new IllegalStateException("status hasn't been set");
1:cf5cebf:         }
1:cf5cebf:         return status;
1:cf5cebf:     }
1:cf5cebf: 
1:cf5cebf:     /**
1:cf5cebf:      * Sets whether or not to suppress the exception when setting the status.
1:cf5cebf:      *
1:cf5cebf:      * @param flag {@code true} to suppress, {@code false} to throw exception
1:cf5cebf:      *      if an error condition is indicated by the status flag
1:cf5cebf:      */
1:cf5cebf:     void setSuppressException(boolean flag) {
1:cf5cebf:         this.suppressException = flag;
1:cf5cebf:     }
1:cf5cebf: 
1:cf5cebf:     public boolean isLayerBStream() {
1:cf5cebf:         return isLayerBStream;
1:cf5cebf:     }
1:cf5cebf: 
1:cf5cebf:     /**
1:cf5cebf:      * Interprets the Derby-specific status byte, and throws an exception if an
1:cf5cebf:      * error condition has been detected on the client.
1:cf5cebf:      *
1:cf5cebf:      * @param clientStatus the status flag sent by the client
1:cf5cebf:      * @throws IOException if the status byte indicates an error condition
1:cf5cebf:      */
1:cf5cebf:     protected void checkStatus(int clientStatus)
1:cf5cebf:             throws IOException {
1:cf5cebf:         // Note that in some cases we don't want to throw an exception here
1:cf5cebf:         // even if the status byte tells us an exception happened on the client
1:cf5cebf:         // side when reading the data stream. This is because sometimes EXTDTAs
1:cf5cebf:         // are // fully read before they are passed to the statement. If we
1:cf5cebf:         // throw the exception here, we cause DRDA protocol errors (it would
1:cf5cebf:         // probably be possible to code around this, but it is far easier to
1:cf5cebf:         // just have the embedded statement execution fail).
1:cf5cebf: 
1:cf5cebf:         setStatus(clientStatus);
1:cf5cebf:         if (!suppressException && status != DRDAConstants.STREAM_OK) {
1:cf5cebf:             // Ask the sub-class to clean up.
1:cf5cebf:             onClientSideStreamingError();
1:cf5cebf:             throwEXTDTATransferException(clientStatus);
1:cf5cebf:         }
1:cf5cebf:     }
1:cf5cebf: 
1:cf5cebf:     /**
1:cf5cebf:      * Performs necessary clean up when an error is signalled by the client.
1:cf5cebf:      */
1:cf5cebf:     protected abstract void onClientSideStreamingError();
1:cf5cebf: 
1:cf5cebf:     /**
1:cf5cebf:      * Throws an exception as mandated by the EXTDTA status byte.
1:cf5cebf:      *
1:cf5cebf:      * @param status the EXTDTA status byte received from the client, should
1:cf5cebf:      *      not be {@linkplain DRDAConstants#STREAM_OK}
1:cf5cebf:      * @throws IOException the exception generated based on the status byte
1:cf5cebf:      */
1:cf5cebf:     static void throwEXTDTATransferException(int status)
1:cf5cebf:             throws IOException {
1:cf5cebf:         switch (status) {
1:cf5cebf:             case DRDAConstants.STREAM_READ_ERROR:
1:cf5cebf:                 throw new IOException(
1:cf5cebf:                         MessageService.getTextMessage(
1:cf5cebf:                             MessageId.STREAM_DRDA_CLIENTSIDE_EXTDTA_READ_ERROR)
1:cf5cebf:                          );
1:cf5cebf:             case DRDAConstants.STREAM_TOO_SHORT:
1:cf5cebf:             case DRDAConstants.STREAM_TOO_LONG:
1:cf5cebf:                 throw new DerbyIOException(
1:cf5cebf:                         MessageService.getTextMessage(
1:cf5cebf:                             SQLState.SET_STREAM_INEXACT_LENGTH_DATA),
1:cf5cebf:                         SQLState.SET_STREAM_INEXACT_LENGTH_DATA);
1:cf5cebf:             case DRDAConstants.STREAM_OK:
1:cf5cebf:                 // Safe-guard, this method should not be invoked when the
1:cf5cebf:                 // transfer was successful.
1:cf5cebf:                 throw new IllegalStateException(
1:cf5cebf:                         "throwEXTDTATransferException invoked with EXTDTA " +
1:cf5cebf:                         "status byte STREAM_OK");
1:cf5cebf:             default:
1:cf5cebf:                 throw new IOException(
1:cf5cebf:                         "Invalid stream EXTDTA status code: " + status);
1:cf5cebf:         }
1:cf5cebf:     }
13:a376274: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:db4c995
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:cf5cebf
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.io.InputStream;
1: import org.apache.derby.iapi.reference.DRDAConstants;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.services.io.DerbyIOException;
1: import org.apache.derby.shared.common.reference.MessageId;
1:  * <p>
1:  * <p>
1:  * To be able to correctly stream data from the client without reading the
1:  * while value up front, a trailing Derby-specific status byte was introduced
1:  * (version 10.6). It is used by the client to tell the server if the data it
1:  * received was valid, or if it detected an error while streaming the data.
1:  * The DRDA protocol, or at least Derby's implementation of it, doesn't enable
1:  * the client to inform the server about the error whilst streaming (there is a
1:  * mechanism in DRDA to interrupt a running request, but it didn't seem like a
1:  * feasible approach in this case).
1: abstract class EXTDTAReaderInputStream
1:         extends InputStream {
1: 
1:     /** Whether or not the subclass is a layer B stream. */
1:     protected final boolean isLayerBStream;
1:     /** Whether or not to read the trailing Derby-specific status byte. */
1:     protected final boolean readStatusByte;
1:     /**
1:      * Tells if the status byte has been set.
1:      *
1:      * @see #checkStatus(int)
1:      */
1:     private boolean statusSet;
1:     /**
1:      * The status Derby-specific status byte, if any.
1:      * @see #isStatusSet()
1:      */
1:     private byte status;
1:     /**
1:      * Whether or not to suppress the exception when an error is indicated by
1:      * the status byte.
1:      */
1:     private boolean suppressException;
1: 
1:     /**
1:      * Initializes the class.
1:      *
1:      * @param layerB whether or not DDM layer B streaming is being used
1:      * @param readStatusByte whether or not to read the trailing Derby-specific
1:      *      status byte
1:      */
1:     protected EXTDTAReaderInputStream(boolean layerB, boolean readStatusByte) {
1:         this.isLayerBStream = layerB;
1:         this.readStatusByte = readStatusByte;
1:     }
1: 
1:     /**
1:      * Saves the status byte read off the wire.
1:      *
1:      * @param status the status
1:      * @see DRDAConstants
1:      */
1:     // Private for now, as the method is currently used only by checkStatus.
1:     private void setStatus(int status) {
1:         this.status = (byte)(status & 0xFF);
1:         this.statusSet = true;
1:     }
1: 
1:     /**
1:      * Returns whether the status has been set or not.
1:      *
1:      * @return {@code true} if set, {@code false} if not.
1:      */
1:     public boolean isStatusSet() {
1:         return statusSet;
1:     }
1: 
1:     /**
1:      * Returns the status byte.
1:      * <p>
1:      * <em>NOTE:</em> Check if the status byte has been set by calling
1:      * {@linkplain #isStatusSet()}.
1:      *
1:      * @return The status byte.
1:      */
1:     public byte getStatus() {
1:         if (!statusSet) {
1:             throw new IllegalStateException("status hasn't been set");
1:         }
1:         return status;
1:     }
1: 
1:     /**
1:      * Sets whether or not to suppress the exception when setting the status.
1:      *
1:      * @param flag {@code true} to suppress, {@code false} to throw exception
1:      *      if an error condition is indicated by the status flag
1:      */
1:     void setSuppressException(boolean flag) {
1:         this.suppressException = flag;
1:     }
1: 
1:     public boolean isLayerBStream() {
1:         return isLayerBStream;
1:     }
1: 
1:     /**
1:      * Interprets the Derby-specific status byte, and throws an exception if an
1:      * error condition has been detected on the client.
1:      *
1:      * @param clientStatus the status flag sent by the client
1:      * @throws IOException if the status byte indicates an error condition
1:      */
1:     protected void checkStatus(int clientStatus)
1:             throws IOException {
1:         // Note that in some cases we don't want to throw an exception here
1:         // even if the status byte tells us an exception happened on the client
1:         // side when reading the data stream. This is because sometimes EXTDTAs
1:         // are // fully read before they are passed to the statement. If we
1:         // throw the exception here, we cause DRDA protocol errors (it would
1:         // probably be possible to code around this, but it is far easier to
1:         // just have the embedded statement execution fail).
1: 
1:         setStatus(clientStatus);
1:         if (!suppressException && status != DRDAConstants.STREAM_OK) {
1:             // Ask the sub-class to clean up.
1:             onClientSideStreamingError();
1:             throwEXTDTATransferException(clientStatus);
1:         }
1:     }
1: 
1:     /**
1:      * Performs necessary clean up when an error is signalled by the client.
1:      */
1:     protected abstract void onClientSideStreamingError();
1: 
1:     /**
1:      * Throws an exception as mandated by the EXTDTA status byte.
1:      *
1:      * @param status the EXTDTA status byte received from the client, should
1:      *      not be {@linkplain DRDAConstants#STREAM_OK}
1:      * @throws IOException the exception generated based on the status byte
1:      */
1:     static void throwEXTDTATransferException(int status)
1:             throws IOException {
1:         switch (status) {
1:             case DRDAConstants.STREAM_READ_ERROR:
1:                 throw new IOException(
1:                         MessageService.getTextMessage(
1:                             MessageId.STREAM_DRDA_CLIENTSIDE_EXTDTA_READ_ERROR)
1:                          );
1:             case DRDAConstants.STREAM_TOO_SHORT:
1:             case DRDAConstants.STREAM_TOO_LONG:
1:                 throw new DerbyIOException(
1:                         MessageService.getTextMessage(
1:                             SQLState.SET_STREAM_INEXACT_LENGTH_DATA),
1:                         SQLState.SET_STREAM_INEXACT_LENGTH_DATA);
1:             case DRDAConstants.STREAM_OK:
1:                 // Safe-guard, this method should not be invoked when the
1:                 // transfer was successful.
1:                 throw new IllegalStateException(
1:                         "throwEXTDTATransferException invoked with EXTDTA " +
1:                         "status byte STREAM_OK");
1:             default:
1:                 throw new IOException(
1:                         "Invalid stream EXTDTA status code: " + status);
1:         }
1:     }
author:Tomohito Nakayama
-------------------------------------------------------------------------------
commit:fefd864
/////////////////////////////////////////////////////////////////////////
0: abstract class EXTDTAReaderInputStream extends InputStream 
author:Andreas Korneliussen
-------------------------------------------------------------------------------
commit:a376274
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.drda.EXTDTAReaderInputStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1:    
1:    http://www.apache.org/licenses/LICENSE-2.0
1:    
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: */
1: package org.apache.derby.impl.drda;
0: import java.io.InputStream;
0: import java.io.ByteArrayInputStream;
1: import java.io.IOException;
1: 
1: /**
1:  * Implementation of InputStream which get EXTDTA from the DDMReader.
1:  * This class can be used to stream LOBs from Network client to the
1:  * Network server.
1:  */
0: final class EXTDTAReaderInputStream extends InputStream 
0: {
1:     /**
0:      * Constructor
0:      * @param reader The reader to get data from
0:      * @exception DRDAProtocolException if thrown while initializing current 
0:      *                                  buffer.
1:      */
0:     EXTDTAReaderInputStream(final DDMReader reader) 
0:         throws DRDAProtocolException
0:     {
0:         super();
0:         this.reader = reader;
0:         this.length = reader.getDdmLength();        
0:         this.remainingBytes = length;
0:         this.currentBuffer = 
0:             reader.readLOBInitStream(remainingBytes);
1:     }
1: 
1:     /**
0:      * Reads the next byte of data from the input stream.
0:      * 
0:      * <p> This subclass of InputStream implements this method by reading
0:      * the next byte from the current buffer. If there is more data,
0:      * it will be requested a new buffer from the DDMReader.
0:      *
0:      * @return     the next byte of data, or <code>-1</code> if the end of the
0:      *             stream is reached.
0:      * @exception  IOException  if an I/O error occurs.
0:      * @see        java.io.InputStream#read()
1:      */
0:     public final int read() 
0:         throws IOException
0:     {
0:         if (remainingBytes <= 0) {
0:             return -1;
1:         }
0:         int val = (currentBuffer == null) ? -1 : currentBuffer.read();
0:         if (val < 0) {
0:             val = refreshCurrentBuffer();
1:         }
0:         remainingBytes--;
0:         return val;
1:     }
1:     
1:     /**
0:      * Reads up to <code>len</code> bytes of data from the input stream into
0:      * an array of bytes.  An attempt is made to read as many as
0:      * <code>len</code> bytes, but a smaller number may be read, possibly
0:      * zero. The number of bytes actually read is returned as an integer.
0:      *
0:      * This subclass implements this method by calling this method on the 
0:      * current buffer, which is an instance of ByteArrayInputStream. If the
0:      * current buffer does not have any data, it will be requested a new
0:      * buffer from the DDMReader.
0:      *
0:      * @param      b     the buffer into which the data is read.
0:      * @param      off   the start offset in array <code>b</code>
0:      *                   at which the data is written.
0:      * @param      len   the maximum number of bytes to read.
0:      * @return     the total number of bytes read into the buffer, or
0:      *             <code>-1</code> if there is no more data because the end of
0:      *             the stream has been reached.
0:      * @exception  IOException  if an I/O error occurs.
0:      * @exception  NullPointerException  if <code>b</code> is <code>null</code>.
0:      * @see        java.io.InputStream#read(byte[], int, int)
1:      */
0:     public final int read(final byte[] b,
0:                           final int off,
0:                           final int len) 
0:         throws IOException
0:     {
0:         if (remainingBytes <= 0) {
0:             return -1;
1:         }
0:         int val = currentBuffer.read(b, off, len);
0:         if (val < 0) {
0:             currentBuffer = 
0:                 reader.readLOBContinuationStream(remainingBytes);
0:             val = currentBuffer.read(b, off, len);
1:         }
0:         remainingBytes -= val;
0:         return val;
1:     }
1: 
1:     /**
0:      * Returns the number of bytes that can be read (or skipped over) from
0:      * this input stream without blocking by the next caller of a method for
0:      * this input stream.  
0:      *
0:      * <p> This subclass implements this method by calling available on 
0:      *     the current buffer, which is a ByteInputStreamReader.
0:      *
0:      * @return     the number of bytes that can be read from this input stream
0:      *             without blocking.     
1:      */
0:     public final int available() 
0:     {
0:         if (remainingBytes <= 0) {
0:             return 0;
1:         }
0:         return currentBuffer.available();
1:     }
1: 
1:     /**
0:      * Return the length if this stream. The length includes data which has 
0:      * been read.
0:      * @return length of this stream.
1:      */
0:     final long getLength() 
0:     {
0:         return length;
1:     }
1:     
1:     /**
0:      * Refresh the current buffer from the DDMReader
0:      * @exception IOException if there is a IOException when
0:      *                        refreshing the buffer from DDMReader
0:      * @return the next byte of data, or <code>-1</code> if the end of the
0:      *         stream is reached.
1:      */
0:     private int refreshCurrentBuffer() 
0:         throws IOException
0:     {
0:         if (remainingBytes > 0) {
0:             currentBuffer = 
0:                 reader.readLOBContinuationStream(remainingBytes);
0:             return currentBuffer.read();
0:         } else {
0:             return -1;
1:         }
1:     }
1:     
0:     /** Length of stream */
0:     private final long length;
1:     
0:     /** DDMReader. Used to get more data. */
0:     private final DDMReader reader;
1:     
0:     /** Remaining bytes in stream */
0:     private long remainingBytes;
1:     
0:     /** Current data buffer */
0:     private ByteArrayInputStream currentBuffer;
1: 
1: }
============================================================================