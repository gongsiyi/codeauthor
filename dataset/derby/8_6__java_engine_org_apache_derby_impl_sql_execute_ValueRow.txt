2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.ValueRow
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
22:eac0369: 
7:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:b31849d: import org.apache.derby.iapi.sql.execute.ExecRow;
1:b31849d: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
6:eac0369: /**
1:eac0369: 	Basic implementation of ExecRow.
1:eac0369: 
1:eac0369:  */
1:ca6ed17: class ValueRow implements ExecRow
5:eac0369: {
3:eac0369: 	///////////////////////////////////////////////////////////////////////
3:eac0369: 	//
1:eac0369: 	//	STATE
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	private DataValueDescriptor[] column;
1:eac0369: 	private int ncols;
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Make a value row with a designated number of column slots.
7:eac0369: 	  *
1:eac0369: 	  *	@param	ncols	number of columns to allocate
1:eac0369: 	  */
1:eac0369: 	public ValueRow(int ncols)
1:eac0369: 	{
1:eac0369: 		 column = new DataValueDescriptor[ncols];
1:eac0369: 		 this.ncols = ncols;
7:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	EXECROW INTERFACE
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	// this is the actual current # of columns
1:eac0369: 	public int nColumns() {
1:eac0369: 		return ncols;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// get a new Object[] for the row
1:eac0369: 	public void getNewObjectArray()
1:eac0369: 	{
1:eac0369: 		column = new DataValueDescriptor[ncols];
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Row interface
1:eac0369: 	 */
1:eac0369: 	// position is 1-based
1:eac0369: 	public DataValueDescriptor	getColumn (int position) {
1:eac0369: 		if (position <= column.length)
1:33cf670: 			return column[position-1];
2:eac0369: 		else
1:eac0369: 			return (DataValueDescriptor)null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// position is 1-based.
1:eac0369: 	public void setColumn(int position, DataValueDescriptor col) {
1:eac0369:  
1:eac0369: 		if (position > column.length)
1:eac0369: 			realloc(position); // enough for this column
1:eac0369: 		column[position-1] = col;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** ExecRow interface
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	// position is 1-based
1:9495437: 	public ExecRow getClone() 
1:eac0369: 	{
1:eac0369: 		return getClone((FormatableBitSet) null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public ExecRow getClone(FormatableBitSet clonedCols)
1:eac0369: 	{
1:eac0369: 		int numColumns = column.length;
1:eac0369: 
1:eac0369: 		/* Get the right type of row */
1:eac0369: 		ExecRow rowClone = cloneMe();
1:eac0369: 
1:eac0369: 		for (int colCtr = 0; colCtr < numColumns; colCtr++) 
1:eac0369: 		{
1:eac0369: 			// Copy those columns whose bit isn't set (and there is a FormatableBitSet)
1:eac0369: 			if (clonedCols != null && !(clonedCols.get(colCtr + 1)))
1:eac0369: 			{
1:eac0369: 				/* Rows are 1-based, column[] is 0-based */
1:801cf0d:                 rowClone.setColumn(colCtr + 1, column[colCtr]);
1:eac0369: 				continue;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (column[colCtr] != null)
1:eac0369: 			{
1:eac0369: 				/* Rows are 1-based, column[] is 0-based */
1:854dd10:                 rowClone.setColumn(colCtr +1, column[colCtr].cloneValue(false));
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return rowClone;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// position is 1-based
1:eac0369: 	public ExecRow getNewNullRow()
1:eac0369: 	{
1:eac0369: 		int numColumns = column.length;
1:eac0369: 		ExecRow rowClone = cloneMe();
1:eac0369: 
1:eac0369: 
1:eac0369: 		for (int colCtr = 0; colCtr < numColumns; colCtr++) 
1:eac0369: 		{
1:eac0369: 			if (column[colCtr] != null)
1:eac0369: 			{
1:eac0369: 				/* Rows are 1-based, column[] is 0-based */
1:854dd10:                 rowClone.setColumn(colCtr + 1, column[colCtr].getNewNull());
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return rowClone;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	ExecRow cloneMe() {
1:eac0369: 		return new ValueRow(ncols);
1:eac0369: 	}
1:eac0369: 
1:109cb26:     /**
1:109cb26:      * Reset all columns in the row array to null values.
1:109cb26:      */
1:109cb26:     public void resetRowArray() {
1:109cb26:         for (int i = 0; i < column.length; i++) {
1:109cb26:             if (column[i] != null) {
1:109cb26:                 column[i] = column[i].recycle();
1:109cb26:             }
1:109cb26:         }
1:109cb26:     }
1:109cb26: 
1:eac0369: 	// position is 1-based
1:eac0369: 	public final DataValueDescriptor cloneColumn(int columnPosition)
1:eac0369: 	{
1:854dd10:         return column[columnPosition -1].cloneValue(false);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * class interface
1:eac0369: 	 */
1:eac0369: 	public String toString() {
1:eac0369: 		// NOTE: This method is required for external functionality (the
1:eac0369: 		// consistency checker), so do not put it under SanityManager.DEBUG.
1:eac0369: 		String s = "{ ";
1:eac0369: 		for (int i = 0; i < column.length; i++)
1:eac0369: 		{
1:eac0369: 			if (column[i] == null)
1:eac0369: 				s += "null";
1:eac0369: 			else
1:eac0369: 				s += column[i].toString();
1:eac0369: 			if (i < (column.length - 1))
1:eac0369: 				s += ", ";
1:eac0369: 		}
1:eac0369: 		s += " }";
1:eac0369: 		return s;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the array form of the row that Access expects.
1:eac0369: 
1:eac0369: 		@see ExecRow#getRowArray
1:eac0369: 	*/
1:eac0369: 	public DataValueDescriptor[] getRowArray() {
1:eac0369: 		return column;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a clone of the array form of the row that Access expects.
1:eac0369: 
1:eac0369: 		@see ExecRow#getRowArray
1:eac0369: 	*/
1:9495437: 	public DataValueDescriptor[] getRowArrayClone() 
1:eac0369: 	{
1:eac0369: 		int numColumns = column.length;
1:eac0369: 		DataValueDescriptor[] columnClones = new DataValueDescriptor[numColumns];
1:eac0369: 
1:eac0369: 		for (int colCtr = 0; colCtr < numColumns; colCtr++) 
1:eac0369: 		{
1:eac0369: 			if (column[colCtr] != null)
1:eac0369: 			{
1:854dd10:                 columnClones[colCtr] = column[colCtr].cloneValue(false);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return columnClones;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the row array
1:eac0369: 	 *
1:eac0369: 	 * @see ExecRow#setRowArray
1:eac0369: 	 */
1:eac0369: 	public void setRowArray(DataValueDescriptor[] value)
1:eac0369: 	{
1:eac0369: 		column = value;
1:eac0369: 	}
1:eac0369: 		
1:eac0369: 	// Set the number of columns in the row to ncols, preserving
1:eac0369: 	// the existing contents.
1:eac0369: 	protected void realloc(int ncols) {
1:eac0369: 		DataValueDescriptor[] newcol = new DataValueDescriptor[ncols];
1:eac0369: 
1:eac0369: 		System.arraycopy(column, 0, newcol, 0, column.length);
1:eac0369: 		column = newcol;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
1:                 rowClone.setColumn(colCtr + 1, column[colCtr]);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ca6ed17
/////////////////////////////////////////////////////////////////////////
1: class ValueRow implements ExecRow
commit:109cb26
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Reset all columns in the row array to null values.
1:      */
1:     public void resetRowArray() {
1:         for (int i = 0; i < column.length; i++) {
1:             if (column[i] != null) {
1:                 column[i] = column[i].recycle();
1:             }
1:         }
1:     }
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9495437
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public ExecRow getClone() 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public DataValueDescriptor[] getRowArrayClone() 
commit:92268ac
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
0: 	public ExecRow getClone() throws StandardException
0:         throws StandardException
/////////////////////////////////////////////////////////////////////////
0:         throws StandardException
/////////////////////////////////////////////////////////////////////////
0: 	public DataValueDescriptor[] getRowArrayClone()
0:         throws StandardException
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1:                 rowClone.setColumn(colCtr +1, column[colCtr].cloneValue(false));
/////////////////////////////////////////////////////////////////////////
1:                 rowClone.setColumn(colCtr + 1, column[colCtr].getNewNull());
/////////////////////////////////////////////////////////////////////////
1:         return column[columnPosition -1].cloneValue(false);
/////////////////////////////////////////////////////////////////////////
1:                 columnClones[colCtr] = column[colCtr].cloneValue(false);
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:33cf670
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class ValueRow implements ExecRow
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			return column[position-1];
/////////////////////////////////////////////////////////////////////////
commit:e8e04bf
/////////////////////////////////////////////////////////////////////////
commit:b31849d
/////////////////////////////////////////////////////////////////////////
0: import java.io.ObjectInput;
0: import java.io.ObjectOutput;
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.Storable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.RowLocation;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.ValueRow
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.io.Storable;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.types.RowLocation;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: /**
1: 	Basic implementation of ExecRow.
1: 
0: 	@author ames
1:  */
0: public class ValueRow implements ExecRow, Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	STATE
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	private DataValueDescriptor[] column;
1: 	private int ncols;
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
1: 	 *
1: 	 */
0:     public	ValueRow() {}
1: 
1: 	/**
1: 	  *	Make a value row with a designated number of column slots.
1: 	  *
1: 	  *	@param	ncols	number of columns to allocate
1: 	  */
1: 	public ValueRow(int ncols)
1: 	{
1: 		 column = new DataValueDescriptor[ncols];
1: 		 this.ncols = ncols;
1: 	}
1: 
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	EXECROW INTERFACE
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	// this is the actual current # of columns
1: 	public int nColumns() {
1: 		return ncols;
1: 	}
1: 
1: 	// get a new Object[] for the row
1: 	public void getNewObjectArray()
1: 	{
1: 		column = new DataValueDescriptor[ncols];
1: 	}
1: 
1: 	/*
1: 	 * Row interface
1: 	 */
1: 	// position is 1-based
1: 	public DataValueDescriptor	getColumn (int position) {
1: 		if (position <= column.length)
0: 			return (DataValueDescriptor) (column[position-1]);
1: 		else
1: 			return (DataValueDescriptor)null;
1: 	}
1: 
1: 	// position is 1-based.
1: 	public void setColumn(int position, DataValueDescriptor col) {
1:  
1: 		if (position > column.length)
1: 			realloc(position); // enough for this column
1: 		column[position-1] = col;
1: 	}
1: 
1: 
1: 	/*
1: 	** ExecRow interface
1: 	*/
1: 
1: 	// position is 1-based
0: 	public ExecRow getClone() 
1: 	{
1: 		return getClone((FormatableBitSet) null);
1: 	}
1: 
1: 	public ExecRow getClone(FormatableBitSet clonedCols)
1: 	{
1: 		int numColumns = column.length;
1: 
1: 		/* Get the right type of row */
1: 		ExecRow rowClone = cloneMe();
1: 
1: 		for (int colCtr = 0; colCtr < numColumns; colCtr++) 
1: 		{
1: 			// Copy those columns whose bit isn't set (and there is a FormatableBitSet)
1: 			if (clonedCols != null && !(clonedCols.get(colCtr + 1)))
1: 			{
1: 				/* Rows are 1-based, column[] is 0-based */
0: 				rowClone.setColumn(colCtr + 1, (DataValueDescriptor) column[colCtr]);
1: 				continue;
1: 			}
1: 
1: 			if (column[colCtr] != null)
1: 			{
1: 				/* Rows are 1-based, column[] is 0-based */
0: 				rowClone.setColumn(colCtr + 1, column[colCtr].getClone());
1: 			}
1: 		}
1: 		return rowClone;
1: 	}
1: 
1: 	// position is 1-based
1: 	public ExecRow getNewNullRow()
1: 	{
1: 		int numColumns = column.length;
1: 		ExecRow rowClone = cloneMe();
1: 
1: 
1: 		for (int colCtr = 0; colCtr < numColumns; colCtr++) 
1: 		{
1: 			if (column[colCtr] != null)
1: 			{
1: 				/* Rows are 1-based, column[] is 0-based */
0: 				if (column[colCtr] instanceof RowLocation)
1: 				{
1: 					/*
0: 					** The getClone() method for a RowLocation has the same
0: 					** name as for DataValueDescriptor, but it's on a different
0: 					** interface, so the cast must be different.
0: 					**
1: 					*/
0: 					rowClone.setColumn(colCtr + 1, column[colCtr].getClone());
1: 				}
1: 				else
1: 				{
0: 					// otherwise, get a new null
0: 					rowClone.setColumn(colCtr + 1,
0: 						((DataValueDescriptor) (column[colCtr])).getNewNull());
1: 				}
1: 			}
1: 		}
1: 		return rowClone;
1: 	}
1: 
1: 	ExecRow cloneMe() {
1: 		return new ValueRow(ncols);
1: 	}
1: 
1: 	// position is 1-based
1: 	public final DataValueDescriptor cloneColumn(int columnPosition)
1: 	{
0: 		return column[columnPosition -1].getClone();
1: 	}
1: 
1: 	/*
1: 	 * class interface
1: 	 */
1: 	public String toString() {
1: 		// NOTE: This method is required for external functionality (the
1: 		// consistency checker), so do not put it under SanityManager.DEBUG.
1: 		String s = "{ ";
1: 		for (int i = 0; i < column.length; i++)
1: 		{
1: 			if (column[i] == null)
1: 				s += "null";
1: 			else
1: 				s += column[i].toString();
1: 			if (i < (column.length - 1))
1: 				s += ", ";
1: 		}
1: 		s += " }";
1: 		return s;
1: 	}
1: 
1: 
1: 	/**
1: 		Get the array form of the row that Access expects.
1: 
1: 		@see ExecRow#getRowArray
1: 	*/
1: 	public DataValueDescriptor[] getRowArray() {
1: 		return column;
1: 	}
1: 
1: 	/**
1: 		Get a clone of the array form of the row that Access expects.
1: 
1: 		@see ExecRow#getRowArray
1: 	*/
0: 	public DataValueDescriptor[] getRowArrayClone() 
1: 	{
1: 		int numColumns = column.length;
1: 		DataValueDescriptor[] columnClones = new DataValueDescriptor[numColumns];
1: 
1: 		for (int colCtr = 0; colCtr < numColumns; colCtr++) 
1: 		{
1: 			if (column[colCtr] != null)
1: 			{
0: 				columnClones[colCtr] = column[colCtr].getClone();
1: 			}
1: 		}
1: 
1: 		return columnClones;
1: 	}
1: 
1: 	/**
1: 	 * Set the row array
1: 	 *
1: 	 * @see ExecRow#setRowArray
1: 	 */
1: 	public void setRowArray(DataValueDescriptor[] value)
1: 	{
1: 		column = value;
1: 	}
1: 
0: 	public void setRowArray(Storable[] value) {
0: 		if (value instanceof DataValueDescriptor[]) {
0: 			column = (DataValueDescriptor[]) value;
0: 			return;
1: 		}
1: 
0: 		if ((column == null) || (column.length != value.length))
0: 			column = new DataValueDescriptor[value.length];
1: 
1: 
0: 		System.arraycopy(value, 0, column, 0, column.length);
1: 	}
1: 		
1: 	// Set the number of columns in the row to ncols, preserving
1: 	// the existing contents.
1: 	protected void realloc(int ncols) {
1: 		DataValueDescriptor[] newcol = new DataValueDescriptor[ncols];
1: 
1: 		System.arraycopy(column, 0, newcol, 0, column.length);
1: 		column = newcol;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
0: 	//	FORMATABLE INTERFACE
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0: 	 * Read this object from a stream of stored objects.
1: 	 *
0: 	 * @param in read this.
1: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
1: 	{
0: 		column = new DataValueDescriptor[ArrayUtil.readArrayLength(in)];
0: 		ArrayUtil.readArrayItems(in, column);
0: 		ncols = column.length;
1: 	}
1: 
1: 	/**
0: 	 * Write this object to a stream of stored objects.
1: 	 *
0: 	 * @param out write bytes here.
1: 	 *
0: 	 * @exception IOException		thrown on error
1: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
1: 	{
0: 		ArrayUtil.writeArrayLength(out, column);
0: 		ArrayUtil.writeArrayItems(out, column);
1: 	}
1: 
1: 	/**
0: 	 * Get the formatID which corresponds to this class.
1: 	 *
0: 	 *	@return	the formatID of this class
1: 	 */
0: 	public	int getTypeFormatId()	{ return StoredFormatIds.VALUE_ROW_V01_ID; }
1: 
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: /**
0: 	Basic implementation of ExecRow.
0: 
0: 	@author ames
0:  */
0: public class ValueRow implements ExecRow, Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	STATE
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	private DataValueDescriptor[] column;
0: 	private int ncols;
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
0: 	 *
0: 	 */
0:     public	ValueRow() {}
0: 
0: 	/**
0: 	  *	Make a value row with a designated number of column slots.
0: 	  *
0: 	  *	@param	ncols	number of columns to allocate
0: 	  */
0: 	public ValueRow(int ncols)
0: 	{
0: 		 column = new DataValueDescriptor[ncols];
0: 		 this.ncols = ncols;
0: 	}
0: 
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	EXECROW INTERFACE
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	// this is the actual current # of columns
0: 	public int nColumns() {
0: 		return ncols;
0: 	}
0: 
0: 	// get a new Object[] for the row
0: 	public void getNewObjectArray()
0: 	{
0: 		column = new DataValueDescriptor[ncols];
0: 	}
0: 
0: 	/*
0: 	 * Row interface
0: 	 */
0: 	// position is 1-based
0: 	public DataValueDescriptor	getColumn (int position) {
0: 		if (position <= column.length)
0: 			return (DataValueDescriptor) (column[position-1]);
0: 		else
0: 			return (DataValueDescriptor)null;
0: 	}
0: 
0: 	// position is 1-based.
0: 	public void setColumn(int position, DataValueDescriptor col) {
0:  
0: 		if (position > column.length)
0: 			realloc(position); // enough for this column
0: 		column[position-1] = col;
0: 	}
0: 
0: 
0: 	/*
0: 	** ExecRow interface
0: 	*/
0: 
0: 	// position is 1-based
0: 	public ExecRow getClone() 
0: 	{
0: 		return getClone((FormatableBitSet) null);
0: 	}
0: 
0: 	public ExecRow getClone(FormatableBitSet clonedCols)
0: 	{
0: 		int numColumns = column.length;
0: 
0: 		/* Get the right type of row */
0: 		ExecRow rowClone = cloneMe();
0: 
0: 		for (int colCtr = 0; colCtr < numColumns; colCtr++) 
0: 		{
0: 			// Copy those columns whose bit isn't set (and there is a FormatableBitSet)
0: 			if (clonedCols != null && !(clonedCols.get(colCtr + 1)))
0: 			{
0: 				/* Rows are 1-based, column[] is 0-based */
0: 				rowClone.setColumn(colCtr + 1, (DataValueDescriptor) column[colCtr]);
0: 				continue;
0: 			}
0: 
0: 			if (column[colCtr] != null)
0: 			{
0: 				/* Rows are 1-based, column[] is 0-based */
0: 				rowClone.setColumn(colCtr + 1, column[colCtr].getClone());
0: 			}
0: 		}
0: 		return rowClone;
0: 	}
0: 
0: 	// position is 1-based
0: 	public ExecRow getNewNullRow()
0: 	{
0: 		int numColumns = column.length;
0: 		ExecRow rowClone = cloneMe();
0: 
0: 
0: 		for (int colCtr = 0; colCtr < numColumns; colCtr++) 
0: 		{
0: 			if (column[colCtr] != null)
0: 			{
0: 				/* Rows are 1-based, column[] is 0-based */
0: 				if (column[colCtr] instanceof RowLocation)
0: 				{
0: 					/*
0: 					** The getClone() method for a RowLocation has the same
0: 					** name as for DataValueDescriptor, but it's on a different
0: 					** interface, so the cast must be different.
0: 					**
0: 					*/
0: 					rowClone.setColumn(colCtr + 1, column[colCtr].getClone());
0: 				}
0: 				else
0: 				{
0: 					// otherwise, get a new null
0: 					rowClone.setColumn(colCtr + 1,
0: 						((DataValueDescriptor) (column[colCtr])).getNewNull());
0: 				}
0: 			}
0: 		}
0: 		return rowClone;
0: 	}
0: 
0: 	ExecRow cloneMe() {
0: 		return new ValueRow(ncols);
0: 	}
0: 
0: 	// position is 1-based
0: 	public final DataValueDescriptor cloneColumn(int columnPosition)
0: 	{
0: 		return column[columnPosition -1].getClone();
0: 	}
0: 
0: 	/*
0: 	 * class interface
0: 	 */
0: 	public String toString() {
0: 		// NOTE: This method is required for external functionality (the
0: 		// consistency checker), so do not put it under SanityManager.DEBUG.
0: 		String s = "{ ";
0: 		for (int i = 0; i < column.length; i++)
0: 		{
0: 			if (column[i] == null)
0: 				s += "null";
0: 			else
0: 				s += column[i].toString();
0: 			if (i < (column.length - 1))
0: 				s += ", ";
0: 		}
0: 		s += " }";
0: 		return s;
0: 	}
0: 
0: 
0: 	/**
0: 		Get the array form of the row that Access expects.
0: 
0: 		@see ExecRow#getRowArray
0: 	*/
0: 	public DataValueDescriptor[] getRowArray() {
0: 		return column;
0: 	}
0: 
0: 	/**
0: 		Get a clone of the array form of the row that Access expects.
0: 
0: 		@see ExecRow#getRowArray
0: 	*/
0: 	public DataValueDescriptor[] getRowArrayClone() 
0: 	{
0: 		int numColumns = column.length;
0: 		DataValueDescriptor[] columnClones = new DataValueDescriptor[numColumns];
0: 
0: 		for (int colCtr = 0; colCtr < numColumns; colCtr++) 
0: 		{
0: 			if (column[colCtr] != null)
0: 			{
0: 				columnClones[colCtr] = column[colCtr].getClone();
0: 			}
0: 		}
0: 
0: 		return columnClones;
0: 	}
0: 
0: 	/**
0: 	 * Set the row array
0: 	 *
0: 	 * @see ExecRow#setRowArray
0: 	 */
0: 	public void setRowArray(DataValueDescriptor[] value)
0: 	{
0: 		column = value;
0: 	}
0: 
0: 	public void setRowArray(Storable[] value) {
0: 		if (value instanceof DataValueDescriptor[]) {
0: 			column = (DataValueDescriptor[]) value;
0: 			return;
0: 		}
0: 
0: 		if ((column == null) || (column.length != value.length))
0: 			column = new DataValueDescriptor[value.length];
0: 
0: 
0: 		System.arraycopy(value, 0, column, 0, column.length);
0: 	}
0: 		
0: 	// Set the number of columns in the row to ncols, preserving
0: 	// the existing contents.
0: 	protected void realloc(int ncols) {
0: 		DataValueDescriptor[] newcol = new DataValueDescriptor[ncols];
0: 
0: 		System.arraycopy(column, 0, newcol, 0, column.length);
0: 		column = newcol;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	FORMATABLE INTERFACE
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		column = new DataValueDescriptor[ArrayUtil.readArrayLength(in)];
0: 		ArrayUtil.readArrayItems(in, column);
0: 		ncols = column.length;
0: 	}
0: 
0: 	/**
0: 	 * Write this object to a stream of stored objects.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
0: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
0: 	{
0: 		ArrayUtil.writeArrayLength(out, column);
0: 		ArrayUtil.writeArrayItems(out, column);
0: 	}
0: 
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int getTypeFormatId()	{ return StoredFormatIds.VALUE_ROW_V01_ID; }
0: 
0: }
============================================================================