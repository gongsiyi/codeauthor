1:aaea357: /*
3:aaea357:  
1:aaea357:  Derby - Class org.apache.derbyTesting.functionTests.tests.store.TestNoSyncs
1:aaea357:  
1:dff95a1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:  contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:  this work for additional information regarding copyright ownership.
1:dff95a1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:  (the "License"); you may not use this file except in compliance with
1:dff95a1:  the License.  You may obtain a copy of the License at
1:aaea357:  
1:aaea357:  http://www.apache.org/licenses/LICENSE-2.0
1:aaea357:  
1:aaea357:  Unless required by applicable law or agreed to in writing, software
1:aaea357:  distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357:  See the License for the specific language governing permissions and
1:aaea357:  limitations under the License.
1:aaea357:  
1:aaea357:  */
1:aaea357: 
1:aaea357: package org.apache.derbyTesting.functionTests.tests.store;
1:aaea357: 
1:aaea357: import java.sql.Connection;
1:aaea357: import java.sql.Statement;
1:aaea357: import java.sql.PreparedStatement;
1:b9dfea4: import java.sql.DriverManager;
1:aaea357: import java.sql.SQLException;
1:aaea357: import java.io.*;
1:39aa8c4: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:39aa8c4: import java.util.Properties;
1:39aa8c4: 
1:aaea357: /**
1:aaea357:  * This program tests the system when the derby.system.durability property is
1:aaea357:  * set to 'test'. 
1:aaea357:  * <BR>
1:aaea357:  * When the derby.system.durability is set to 'test', the system will not do 
1:aaea357:  * any sync to the
1:aaea357:  * disk and the recovery system will not work property. It is provided for
1:aaea357:  * performance reasons and should ideally only be used when there is no
1:aaea357:  * requirement for the database to recover.
1:aaea357:  * <p>
1:aaea357:  * When set, the system will not do any syncs, the cases namely - no sync of the
1:aaea357:  * log file at each commit - no sync of the log file before data page is forced
1:aaea357:  * to disk - no sync of page allocation when file is grown - no sync of data
1:aaea357:  * writes during checkpoint
1:aaea357:  * <p>
1:aaea357:  * That means, when this property is set to 'test',
1:aaea357:  *  - a commit no longer guarantees that the transaction's modification will 
1:aaea357:  *    survive a system crash or
1:aaea357:  * JVM termination 
1:aaea357:  * - the database may not recover successfully upon restart 
1:aaea357:  * - a near full disk at runtime may cause unexpected errors
1:aaea357:  * - database may be in an inconsistent state
1:aaea357:  * 
1:aaea357:  * This program tests for 
1:aaea357:  * 1. setting the derby.system.durability=test is actually not
1:aaea357:  *    doing the syncs by timing inserts
1:aaea357:  * 2. check if a warning message exists in derby.log 
1:aaea357:  * 3. read log.ctrl file and check if the flag is set or not
1:aaea357:  * 4. check if the log.ctrl file flag is not overwritten for the case when 
1:aaea357:  * database booted with derby.system.durability=test set, then shutdown
1:aaea357:  * and database booted without derby.system.durability=test
1:aaea357:  * 
1:aaea357:  * @version 1.0
1:aaea357:  */
1:aaea357: public class TestDurabilityProperty {
1:aaea357:     public static void main(String[] args) {
1:aaea357:         try {
1:aaea357:             // Test 1: check if derby.system.durability=test
1:aaea357:             // mode is not doing syncs 
1:aaea357:             testNoSyncs(args);
1:aaea357:             
1:aaea357:             String derbyHome = System.getProperty("derby.system.home");
1:aaea357:             // Test 2
1:aaea357:             // Check if derby.log has the warning message
1:aaea357:             report("Is warning message about derby.system.durability=test present in derby.log ="
1:aaea357:                     + isMessageInDerbyLog(derbyHome));
1:aaea357:             // Test 3
1:aaea357:             // Check if marker is correctly written out to database
1:aaea357:             markerInControlFile(derbyHome);
1:aaea357:             
1:aaea357:             // Test 4
1:aaea357:             // shutdown database and boot database afresh without 
1:aaea357:             // derby.system.durability set to test. In this case the derby.log 
1:aaea357:             // and the log control file should still have the marker that this 
1:aaea357:             // mode was once used to boot database.
1:aaea357:             report(
1:aaea357:                 "2. shutdown database and reboot database without " +
1:aaea357:                 "derby.system.durability=test and test for marker in log.ctrl file");
1:aaea357:             markerNotOverwritten(derbyHome);
1:aaea357: 
1:aaea357:         } catch (Throwable e) {
1:aaea357:             report("FAIL -- unexpected exception: " + e);
1:aaea357:             e.printStackTrace();
1:b9dfea4:         }
1:aaea357: 
3:aaea357:     }
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * time inserts 
1:aaea357:      * 
1:aaea357:      * @param mode
1:aaea357:      *            value for derby.system.durability property
1:aaea357:      * @param create
1:aaea357:      *            should table be created or not
1:aaea357:      * @param autoCommit
1:aaea357:      *            whether inserts should happen in autocommit mode or not
1:aaea357:      * @return time taken to do inserts
1:aaea357:      * @throws Exception
1:aaea357:      */
1:aaea357:     public static long timeTakenToInsert(String mode, boolean create,
1:aaea357:             boolean autoCommit) throws Exception {
1:aaea357:         System.setProperty("derby.system.durability", mode);
1:aaea357:         Connection conn = org.apache.derby.tools.ij.startJBMS();
1:aaea357: 
1:aaea357:         if (create) {
1:aaea357:             Statement s = conn.createStatement();
1:aaea357:             s.execute("create table t1 (c1 int, c2 int)");
1:aaea357:             s.close();
1:aaea357:         }
1:aaea357: 
1:aaea357:         long timeTaken = doInserts(conn, autoCommit);
1:aaea357: 
1:aaea357:         try {
1:aaea357:             conn.close();
1:e72bcdd:             TestUtil.getConnection("","shutdown=true");
1:aaea357:         } catch (SQLException sqle) {
1:aaea357:             if ("XJ015".equals(sqle.getSQLState())) {
1:aaea357:             }// ok database shutdown
1:aaea357:             else {
1:aaea357:                 report(sqle.getSQLState());
1:aaea357:                 report("ERROR! during shutdown");
1:aaea357:                 sqle.printStackTrace();
1:aaea357:             }
1:aaea357:         }
1:aaea357: 
1:aaea357:         return timeTaken;
1:aaea357:     }
1:aaea357: 
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Note doing inserts in autocommit mode is probably the worst case scenario
1:aaea357:      * in terms of performance as each commit will involve a flush/sync to disk
1:aaea357:      * but in case of the derby.system.durability=test mode, the syncs dont 
1:aaea357:      * happen.
1:aaea357:      */
1:aaea357:     public static long doInserts(Connection conn,boolean autoCommit) throws Exception {
1:aaea357:         PreparedStatement ps = conn
1:aaea357:                 .prepareStatement("insert into t1 values(?,?)");
1:aaea357:         conn.setAutoCommit(autoCommit);
1:aaea357:         long count = 0;
1:aaea357: 
1:aaea357:         long start = System.currentTimeMillis();
1:aaea357: 
1:aaea357:         for (int i = 0; i < 500; i++) {
1:aaea357:             ps.setInt(1, i);
1:aaea357:             ps.setInt(2, i);
1:aaea357:             count += ps.executeUpdate();
1:aaea357:         }
1:aaea357: 
1:aaea357:         if (!autoCommit)
1:aaea357:             conn.commit();
1:aaea357:         long end = System.currentTimeMillis();
1:aaea357:         if (count < 500)
1:aaea357:             report(" FAIL!! all rows didnt get inserted ?");
1:aaea357:         
1:aaea357:         return (end - start);
1:aaea357:     }
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * When derby.system.durability is set, a warning message is written out to
1:aaea357:      * derby.log indicating that the property is set and that it does not
1:aaea357:      * guarantee recoverability This test tests if a message is written out to
1:aaea357:      * derby.log or not
1:aaea357:      */
1:aaea357:     public static boolean isMessageInDerbyLog(String derbyHome) throws Exception {
1:aaea357:         BufferedReader reader = null;
1:aaea357:         File derbylog = null;
1:aaea357:         try {
1:aaea357:             derbylog = new File(derbyHome, "derby.log");
1:aaea357:             reader = new BufferedReader(new FileReader(derbylog));
1:aaea357: 
1:aaea357:             String line = null;
1:aaea357:             while ((line = reader.readLine()) != null) {
1:aaea357:                 if (line.indexOf("derby.system.durability=test") != -1)
1:aaea357:                     return true;
1:aaea357: 
1:aaea357:             }
1:aaea357:             return false;
1:aaea357:         } finally {
1:aaea357:             if (reader != null) {
1:aaea357:                 reader.close();
1:aaea357:             }
1:aaea357:             derbylog = null;
1:aaea357:         }
1:aaea357:     }
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * if database is booted with derby.system.durability=test, 
1:aaea357:      * a marker is written out into log control
1:aaea357:      * file to recognize that the database was previously booted in this mode
1:aaea357:      * Test if the marker byte is set correctly or not. See comments in
1:aaea357:      * org.apache.derby.impl.store.log.LogToFile for IS_DURABILITY_TESTMODE_NO_SYNC_FLAG
1:aaea357:      */
1:aaea357:     public static void markerInControlFile(String derbyHome) throws Exception {
1:aaea357:         RandomAccessFile controlFile = null;
1:aaea357:         try {
1:aaea357:             int testModeNoSyncMarkerPosition = 28;
1:aaea357:             byte testModeNoSyncMarker = 0x2;
1:aaea357:             controlFile = new RandomAccessFile(derbyHome
1:aaea357:                     + "/wombat/log/log.ctrl", "r");
1:aaea357:             controlFile.seek(testModeNoSyncMarkerPosition);
1:aaea357:             report("log.ctrl file has durability testMode no sync marker value = "
1:aaea357:                     + ((controlFile.readByte() & testModeNoSyncMarker) != 0) );
1:aaea357:         } finally {
1:aaea357:             if (controlFile != null)
1:aaea357:                 controlFile.close();
1:aaea357: 
1:aaea357:         }
1:aaea357:     }
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Test for case when database is booted without derby.system.durability=test
1:aaea357:      * but previously has been booted with the derby.system.durability=test. In 
1:aaea357:      * this scenario,the log control file should still have the marker to say
1:aaea357:      * that this mode was set previously, and derby.log must also have a warning
1:aaea357:      * message
1:aaea357:      * @param derbyHome value of derby.system.home where the database is
1:aaea357:      * @throws Exception
1:aaea357:      */
1:aaea357:     public static void markerNotOverwritten(String derbyHome) throws Exception
1:aaea357:     {
1:aaea357:         // shutdown database
1:aaea357:         Connection conn = null;
1:aaea357:         // unset property
1:aaea357:         System.setProperty("derby.system.durability","");
1:aaea357:         conn = org.apache.derby.tools.ij.startJBMS();
1:aaea357:         conn.close();
1:aaea357:         markerInControlFile(derbyHome);
1:aaea357:         report("Is warning message about derby.system.durability=test present in derby.log ="
1:aaea357:                 + isMessageInDerbyLog(derbyHome));
1:aaea357:     }
1:aaea357:     
1:aaea357:     /**
1:aaea357:      * print message
1:aaea357:      * @param msg to print out 
1:aaea357:      */
1:aaea357:     public static void report(String msg) {
1:aaea357:         System.out.println(msg);
1:aaea357:     }
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Test if derby.system.durability=test property is broken or not. We time
1:aaea357:      * inserts for 500 repeated inserts and make some approximate estimations on
1:aaea357:      * how fast it should be. Since it is a timing based test, there might be
1:aaea357:      * cases of a really really slow machine in some weird cases where this test
1:aaea357:      * may have diffs in this part of the test.
1:aaea357:      * 
1:aaea357:      * So basically to determine if something is wrong, the following is done
1:aaea357:      * to try best to eliminate issues with slow machines
1:aaea357:      * 1)if inserts with autocommit on is fast enough (an estimated
1:aaea357:      * bound)
1:aaea357:      * 2)if not, then since no syncs happen , check if time taken to do
1:aaea357:      * inserts for autocommit on and off are in proximity range 
1:aaea357:      * 3)if 1 and 2 is not satisfied, then check time taken without this mode set
1:aaea357:      * and with this mode set.
1:aaea357:      * If they are in proximity range something could be wrong. It
1:aaea357:      * might be good to check the machine configuration and environment when
1:aaea357:      * test was running <BR>
1:aaea357:      * Also note, although it would seem like a solution would be to bump the
1:aaea357:      * estimated bound to a high limit, this might not help since on a really
1:aaea357:      * good disk the inserts doing syncs might well be done within the bound and
1:aaea357:      * thus would not be possible to know if this mode was possibly broken.
1:aaea357:      *  
1:aaea357:      */
1:aaea357:     public static void testNoSyncs(String[] args) throws Exception {
1:aaea357:         boolean debug = false;  // if set, prints out useful info when debugging test
1:aaea357:         
1:aaea357:         report("1. With derby.system.durability=test,"
1:aaea357:                 + "Test to see if syncs are not happening ");
1:aaea357:         // use the ij utility to read the property file and
1:aaea357:         // make the initial connection.
1:aaea357:         org.apache.derby.tools.ij.getPropertyArg(args);
1:aaea357: 
1:aaea357:         boolean create = true;
1:aaea357: 
1:aaea357:         // Note we time inserts in normal all syncs case first even
1:aaea357:         // though we may not require it if the inserts finish fast enough
1:aaea357:         // But timing them here because once database is booted with
1:aaea357:         // derby.system.durability=test there are no guarantees on consistency
1:aaea357:         // of database so dont want to mess up numbers for the all syncs case
1:aaea357: 
1:aaea357:         // derby.system.durability is not test so it will default to
1:aaea357:         // normal mode and autocommit=true
1:aaea357:         long timeCommitOn = timeTakenToInsert("", create, true);
1:aaea357:         String derbyHome = System.getProperty("derby.system.home");
1:aaea357:         if (isMessageInDerbyLog(derbyHome))
1:aaea357:             report("ERROR! System should not have been booted with"
1:aaea357:                     + "derby.system.durability=test mode here");
1:aaea357:         create = false;
1:aaea357:         // derby.system.durability=test and autocommit=true
1:aaea357:         long timeWithTestModeCommitOn = timeTakenToInsert("test", create, true);
1:aaea357:         // derby.system.durability=test and autocommit=false
1:aaea357:         long timeWithTestModeCommitOff = timeTakenToInsert("test", create, false);
1:aaea357:       
1:aaea357:         if (debug) {
1:aaea357:             report("timeCommitOn = " + timeCommitOn);
1:aaea357:             report("timeWithTestModeCommitOn = " + timeWithTestModeCommitOn);
1:aaea357:             report("timeWithTestModeCommitOff = " + timeWithTestModeCommitOff);
1:aaea357:         }
1:aaea357: 
1:a9d2040:         // To run this, uncomment and build.
1:a9d2040:         // This check is disabled for normal test runs because we cannot
1:a9d2040:         // guarantee that some event on the machine might skew the inserts 
1:a9d2040:         // with one or another of the three settings, causing a false failure.
1:a9d2040:         // See DERBY-5865.
1:a9d2040:         /*
1:aaea357:         // an approximation on the upper bound for time taken to do
1:aaea357:         // inserts in autocommit mode with derby.system.durability=test mode
1:aaea357:         long upperBound = 3000;
1:aaea357: 
1:aaea357:         // if it takes a lot of time to do the inserts then do extra checks
1:aaea357:         // to determine if derby.system.durability=test mode is broken or not
1:aaea357:         // because we cant be sure if inserts just took a long time
1:aaea357:         // because of a really slow machine
1:aaea357:         if (timeWithTestModeCommitOn > upperBound) {
1:aaea357: 
1:aaea357:             long proximityRange = 1000;
1:aaea357: 
1:aaea357:             // in derby.system.durability=test autocommit on or off should
1:aaea357:             // be in same range since syncs are not happening
1:aaea357:             if (Math.abs(timeWithTestModeCommitOn - timeWithTestModeCommitOff) > proximityRange) {
1:aaea357:                 // another approximation here (1.5 times of with testmode set)
1:aaea357:                 if (timeWithTestModeCommitOn > timeCommitOn
1:aaea357:                         || (timeCommitOn < (1.5 * timeWithTestModeCommitOn))) {
1:aaea357:                     report("FAIL -- derby.system.durability=test mode seems to be broken.");
1:aaea357:                     report("-- In this mode one would expect that inserts with autocommit off and on "
1:aaea357:                             + "would be in the same range as syncs are not happening but the difference "
1:aaea357:                             + "here seems to be more than the approximate estimated range.");
1:aaea357:                     report("-- Also comparing the time taken to do the inserts without this" +
1:aaea357:                             " property set seems to be in the same"
1:aaea357:                             + " range as with this property set.");
1:aaea357:                     report("-- Please note this test times inserts and approximate estimates were " +
1:aaea357:                             "considered to report this observation.");
1:744dc8b:                     report("timeCommitOn = " + timeCommitOn);
1:744dc8b:                     report("timeWithTestModeCommitOn = " + timeWithTestModeCommitOn);
1:744dc8b:                     report("timeWithTestModeCommitOff = " + timeWithTestModeCommitOff);
1:aaea357:                 }
1:aaea357:             }
1:a9d2040:         }*/
1:aaea357: 
1:aaea357:     }
1:aaea357: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:a9d2040
/////////////////////////////////////////////////////////////////////////
1:         // To run this, uncomment and build.
1:         // This check is disabled for normal test runs because we cannot
1:         // guarantee that some event on the machine might skew the inserts 
1:         // with one or another of the three settings, causing a false failure.
1:         // See DERBY-5865.
1:         /*
/////////////////////////////////////////////////////////////////////////
1:         }*/
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:744dc8b
/////////////////////////////////////////////////////////////////////////
1:                     report("timeCommitOn = " + timeCommitOn);
1:                     report("timeWithTestModeCommitOn = " + timeWithTestModeCommitOn);
1:                     report("timeWithTestModeCommitOff = " + timeWithTestModeCommitOff);
commit:b9dfea4
/////////////////////////////////////////////////////////////////////////
1: import java.sql.DriverManager;
/////////////////////////////////////////////////////////////////////////
0:             if(TestUtil.HAVE_DRIVER_CLASS) {
0:                 DriverManager.getConnection("jdbc:derby:;shutdown=true");
0:             } else {
0:             	TestUtil.shutdownUsingDataSource("");
1:             }
commit:39aa8c4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: import java.util.Properties;
1: 
/////////////////////////////////////////////////////////////////////////
0: 			TestUtil.shutdownUsingDataSource("");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
commit:e72bcdd
/////////////////////////////////////////////////////////////////////////
1:             TestUtil.getConnection("","shutdown=true");
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:  Derby - Class org.apache.derbyTesting.functionTests.tests.store.TestNoSyncs
1:  
0:  Copyright 2002, 2005 The Apache Software Foundation or its licensors, as applicable.
1:  
0:  Licensed under the Apache License, Version 2.0 (the "License");
0:  you may not use this file except in compliance with the License.
0:  You may obtain a copy of the License at
1:  
1:  http://www.apache.org/licenses/LICENSE-2.0
1:  
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
0: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import java.io.*;
1: 
1: /**
1:  * This program tests the system when the derby.system.durability property is
1:  * set to 'test'. 
1:  * <BR>
1:  * When the derby.system.durability is set to 'test', the system will not do 
1:  * any sync to the
1:  * disk and the recovery system will not work property. It is provided for
1:  * performance reasons and should ideally only be used when there is no
1:  * requirement for the database to recover.
1:  * <p>
1:  * When set, the system will not do any syncs, the cases namely - no sync of the
1:  * log file at each commit - no sync of the log file before data page is forced
1:  * to disk - no sync of page allocation when file is grown - no sync of data
1:  * writes during checkpoint
1:  * <p>
1:  * That means, when this property is set to 'test',
1:  *  - a commit no longer guarantees that the transaction's modification will 
1:  *    survive a system crash or
1:  * JVM termination 
1:  * - the database may not recover successfully upon restart 
1:  * - a near full disk at runtime may cause unexpected errors
1:  * - database may be in an inconsistent state
1:  * 
1:  * This program tests for 
1:  * 1. setting the derby.system.durability=test is actually not
1:  *    doing the syncs by timing inserts
1:  * 2. check if a warning message exists in derby.log 
1:  * 3. read log.ctrl file and check if the flag is set or not
1:  * 4. check if the log.ctrl file flag is not overwritten for the case when 
1:  * database booted with derby.system.durability=test set, then shutdown
1:  * and database booted without derby.system.durability=test
1:  * 
0:  * @author Sunitha Kambhampati 
1:  * @version 1.0
1:  */
1: public class TestDurabilityProperty {
1:     public static void main(String[] args) {
1:         try {
1:             // Test 1: check if derby.system.durability=test
1:             // mode is not doing syncs 
1:             testNoSyncs(args);
1:             
1:             String derbyHome = System.getProperty("derby.system.home");
1:             // Test 2
1:             // Check if derby.log has the warning message
1:             report("Is warning message about derby.system.durability=test present in derby.log ="
1:                     + isMessageInDerbyLog(derbyHome));
1:             // Test 3
1:             // Check if marker is correctly written out to database
1:             markerInControlFile(derbyHome);
1:             
1:             // Test 4
1:             // shutdown database and boot database afresh without 
1:             // derby.system.durability set to test. In this case the derby.log 
1:             // and the log control file should still have the marker that this 
1:             // mode was once used to boot database.
1:             report(
1:                 "2. shutdown database and reboot database without " +
1:                 "derby.system.durability=test and test for marker in log.ctrl file");
1:             markerNotOverwritten(derbyHome);
1: 
1:         } catch (Throwable e) {
1:             report("FAIL -- unexpected exception: " + e);
1:             e.printStackTrace();
1:         }
1: 
1:     }
1: 
1:     /**
1:      * time inserts 
1:      * 
1:      * @param mode
1:      *            value for derby.system.durability property
1:      * @param create
1:      *            should table be created or not
1:      * @param autoCommit
1:      *            whether inserts should happen in autocommit mode or not
1:      * @return time taken to do inserts
1:      * @throws Exception
1:      */
1:     public static long timeTakenToInsert(String mode, boolean create,
1:             boolean autoCommit) throws Exception {
1:         System.setProperty("derby.system.durability", mode);
1:         Connection conn = org.apache.derby.tools.ij.startJBMS();
1: 
1:         if (create) {
1:             Statement s = conn.createStatement();
1:             s.execute("create table t1 (c1 int, c2 int)");
1:             s.close();
1:         }
1: 
1:         long timeTaken = doInserts(conn, autoCommit);
1: 
1:         try {
1:             conn.close();
0:             DriverManager.getConnection("jdbc:derby:;shutdown=true");
1:         } catch (SQLException sqle) {
1:             if ("XJ015".equals(sqle.getSQLState())) {
1:             }// ok database shutdown
1:             else {
1:                 report(sqle.getSQLState());
1:                 report("ERROR! during shutdown");
1:                 sqle.printStackTrace();
1:             }
1:         }
1: 
1:         return timeTaken;
1:     }
1: 
1: 
1:     /**
1:      * Note doing inserts in autocommit mode is probably the worst case scenario
1:      * in terms of performance as each commit will involve a flush/sync to disk
1:      * but in case of the derby.system.durability=test mode, the syncs dont 
1:      * happen.
1:      */
1:     public static long doInserts(Connection conn,boolean autoCommit) throws Exception {
1:         PreparedStatement ps = conn
1:                 .prepareStatement("insert into t1 values(?,?)");
1:         conn.setAutoCommit(autoCommit);
1:         long count = 0;
1: 
1:         long start = System.currentTimeMillis();
1: 
1:         for (int i = 0; i < 500; i++) {
1:             ps.setInt(1, i);
1:             ps.setInt(2, i);
1:             count += ps.executeUpdate();
1:         }
1: 
1:         if (!autoCommit)
1:             conn.commit();
1:         long end = System.currentTimeMillis();
1:         if (count < 500)
1:             report(" FAIL!! all rows didnt get inserted ?");
1:         
1:         return (end - start);
1:     }
1: 
1:     /**
1:      * When derby.system.durability is set, a warning message is written out to
1:      * derby.log indicating that the property is set and that it does not
1:      * guarantee recoverability This test tests if a message is written out to
1:      * derby.log or not
1:      */
1:     public static boolean isMessageInDerbyLog(String derbyHome) throws Exception {
1:         BufferedReader reader = null;
1:         File derbylog = null;
1:         try {
1:             derbylog = new File(derbyHome, "derby.log");
1:             reader = new BufferedReader(new FileReader(derbylog));
1: 
1:             String line = null;
1:             while ((line = reader.readLine()) != null) {
1:                 if (line.indexOf("derby.system.durability=test") != -1)
1:                     return true;
1: 
1:             }
1:             return false;
1:         } finally {
1:             if (reader != null) {
1:                 reader.close();
1:             }
1:             derbylog = null;
1:         }
1:     }
1: 
1:     /**
1:      * if database is booted with derby.system.durability=test, 
1:      * a marker is written out into log control
1:      * file to recognize that the database was previously booted in this mode
1:      * Test if the marker byte is set correctly or not. See comments in
1:      * org.apache.derby.impl.store.log.LogToFile for IS_DURABILITY_TESTMODE_NO_SYNC_FLAG
1:      */
1:     public static void markerInControlFile(String derbyHome) throws Exception {
1:         RandomAccessFile controlFile = null;
1:         try {
1:             int testModeNoSyncMarkerPosition = 28;
1:             byte testModeNoSyncMarker = 0x2;
1:             controlFile = new RandomAccessFile(derbyHome
1:                     + "/wombat/log/log.ctrl", "r");
1:             controlFile.seek(testModeNoSyncMarkerPosition);
1:             report("log.ctrl file has durability testMode no sync marker value = "
1:                     + ((controlFile.readByte() & testModeNoSyncMarker) != 0) );
1:         } finally {
1:             if (controlFile != null)
1:                 controlFile.close();
1: 
1:         }
1:     }
1: 
1:     /**
1:      * Test for case when database is booted without derby.system.durability=test
1:      * but previously has been booted with the derby.system.durability=test. In 
1:      * this scenario,the log control file should still have the marker to say
1:      * that this mode was set previously, and derby.log must also have a warning
1:      * message
1:      * @param derbyHome value of derby.system.home where the database is
1:      * @throws Exception
1:      */
1:     public static void markerNotOverwritten(String derbyHome) throws Exception
1:     {
1:         // shutdown database
1:         Connection conn = null;
1:         // unset property
1:         System.setProperty("derby.system.durability","");
1:         conn = org.apache.derby.tools.ij.startJBMS();
1:         conn.close();
1:         markerInControlFile(derbyHome);
1:         report("Is warning message about derby.system.durability=test present in derby.log ="
1:                 + isMessageInDerbyLog(derbyHome));
1:     }
1:     
1:     /**
1:      * print message
1:      * @param msg to print out 
1:      */
1:     public static void report(String msg) {
1:         System.out.println(msg);
1:     }
1: 
1:     /**
1:      * Test if derby.system.durability=test property is broken or not. We time
1:      * inserts for 500 repeated inserts and make some approximate estimations on
1:      * how fast it should be. Since it is a timing based test, there might be
1:      * cases of a really really slow machine in some weird cases where this test
1:      * may have diffs in this part of the test.
1:      * 
1:      * So basically to determine if something is wrong, the following is done
1:      * to try best to eliminate issues with slow machines
1:      * 1)if inserts with autocommit on is fast enough (an estimated
1:      * bound)
1:      * 2)if not, then since no syncs happen , check if time taken to do
1:      * inserts for autocommit on and off are in proximity range 
1:      * 3)if 1 and 2 is not satisfied, then check time taken without this mode set
1:      * and with this mode set.
1:      * If they are in proximity range something could be wrong. It
1:      * might be good to check the machine configuration and environment when
1:      * test was running <BR>
1:      * Also note, although it would seem like a solution would be to bump the
1:      * estimated bound to a high limit, this might not help since on a really
1:      * good disk the inserts doing syncs might well be done within the bound and
1:      * thus would not be possible to know if this mode was possibly broken.
1:      *  
1:      */
1:     public static void testNoSyncs(String[] args) throws Exception {
1:         boolean debug = false;  // if set, prints out useful info when debugging test
1:         
1:         report("1. With derby.system.durability=test,"
1:                 + "Test to see if syncs are not happening ");
1:         // use the ij utility to read the property file and
1:         // make the initial connection.
1:         org.apache.derby.tools.ij.getPropertyArg(args);
1: 
1:         boolean create = true;
1: 
1:         // Note we time inserts in normal all syncs case first even
1:         // though we may not require it if the inserts finish fast enough
1:         // But timing them here because once database is booted with
1:         // derby.system.durability=test there are no guarantees on consistency
1:         // of database so dont want to mess up numbers for the all syncs case
1: 
1:         // derby.system.durability is not test so it will default to
1:         // normal mode and autocommit=true
1:         long timeCommitOn = timeTakenToInsert("", create, true);
1:         String derbyHome = System.getProperty("derby.system.home");
1:         if (isMessageInDerbyLog(derbyHome))
1:             report("ERROR! System should not have been booted with"
1:                     + "derby.system.durability=test mode here");
1:         create = false;
1:         // derby.system.durability=test and autocommit=true
1:         long timeWithTestModeCommitOn = timeTakenToInsert("test", create, true);
1:         // derby.system.durability=test and autocommit=false
1:         long timeWithTestModeCommitOff = timeTakenToInsert("test", create, false);
1:       
1:         if (debug) {
1:             report("timeCommitOn = " + timeCommitOn);
1:             report("timeWithTestModeCommitOn = " + timeWithTestModeCommitOn);
1:             report("timeWithTestModeCommitOff = " + timeWithTestModeCommitOff);
1:         }
1: 
1:         // an approximation on the upper bound for time taken to do
1:         // inserts in autocommit mode with derby.system.durability=test mode
1:         long upperBound = 3000;
1: 
1:         // if it takes a lot of time to do the inserts then do extra checks
1:         // to determine if derby.system.durability=test mode is broken or not
1:         // because we cant be sure if inserts just took a long time
1:         // because of a really slow machine
1:         if (timeWithTestModeCommitOn > upperBound) {
1: 
1:             long proximityRange = 1000;
1: 
1:             // in derby.system.durability=test autocommit on or off should
1:             // be in same range since syncs are not happening
1:             if (Math.abs(timeWithTestModeCommitOn - timeWithTestModeCommitOff) > proximityRange) {
1:                 // another approximation here (1.5 times of with testmode set)
1:                 if (timeWithTestModeCommitOn > timeCommitOn
1:                         || (timeCommitOn < (1.5 * timeWithTestModeCommitOn))) {
1:                     report("FAIL -- derby.system.durability=test mode seems to be broken.");
1:                     report("-- In this mode one would expect that inserts with autocommit off and on "
1:                             + "would be in the same range as syncs are not happening but the difference "
1:                             + "here seems to be more than the approximate estimated range.");
1:                     report("-- Also comparing the time taken to do the inserts without this" +
1:                             " property set seems to be in the same"
1:                             + " range as with this property set.");
1:                     report("-- Please note this test times inserts and approximate estimates were " +
1:                             "considered to report this observation.");
1:                 }
1:             }
1:         }
1: 
1:     }
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:ec2df17
/////////////////////////////////////////////////////////////////////////
0: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
0:             // Test 1: check if derby.system.durability=test
0:             // mode is not doing syncs 
0:             testNoSyncs(args);
0:             
/////////////////////////////////////////////////////////////////////////
0:      * time inserts 
0:      * 
0:      * @param mode
0:      *            value for derby.system.durability property
0:      * @param create
0:      *            should table be created or not
0:      * @param autoCommit
0:      *            whether inserts should happen in autocommit mode or not
0:      * @return time taken to do inserts
0:      * @throws Exception
0:      */
0:     public static long timeTakenToInsert(String mode, boolean create,
0:             boolean autoCommit) throws Exception {
0:         System.setProperty("derby.system.durability", mode);
0:         Connection conn = org.apache.derby.tools.ij.startJBMS();
0: 
0:         if (create) {
0:             Statement s = conn.createStatement();
0:             s.execute("create table t1 (c1 int, c2 int)");
0:             s.close();
0:         }
0: 
0:         long timeTaken = doInserts(conn, autoCommit);
0: 
0:         try {
0:             conn.close();
0:             DriverManager.getConnection("jdbc:derby:;shutdown=true");
0:         } catch (SQLException sqle) {
0:             if ("XJ015".equals(sqle.getSQLState())) {
0:             }// ok database shutdown
0:             else {
0:                 report(sqle.getSQLState());
0:                 report("ERROR! during shutdown");
0:                 sqle.printStackTrace();
0:             }
0:         }
0: 
0:         return timeTaken;
0:     }
0: 
0: 
0:     /**
0:     public static long doInserts(Connection conn,boolean autoCommit) throws Exception {
0:         conn.setAutoCommit(autoCommit);
/////////////////////////////////////////////////////////////////////////
0:         if (!autoCommit)
0:             conn.commit();
0:         if (count < 500)
0:             report(" FAIL!! all rows didnt get inserted ?");
0:         
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * Test if derby.system.durability=test property is broken or not. We time
0:      * inserts for 500 repeated inserts and make some approximate estimations on
0:      * how fast it should be. Since it is a timing based test, there might be
0:      * cases of a really really slow machine in some weird cases where this test
0:      * may have diffs in this part of the test.
0:      * 
0:      * So basically to determine if something is wrong, the following is done
0:      * to try best to eliminate issues with slow machines
0:      * 1)if inserts with autocommit on is fast enough (an estimated
0:      * bound)
0:      * 2)if not, then since no syncs happen , check if time taken to do
0:      * inserts for autocommit on and off are in proximity range 
0:      * 3)if 1 and 2 is not satisfied, then check time taken without this mode set
0:      * and with this mode set.
0:      * If they are in proximity range something could be wrong. It
0:      * might be good to check the machine configuration and environment when
0:      * test was running <BR>
0:      * Also note, although it would seem like a solution would be to bump the
0:      * estimated bound to a high limit, this might not help since on a really
0:      * good disk the inserts doing syncs might well be done within the bound and
0:      * thus would not be possible to know if this mode was possibly broken.
0:      *  
0:      */
0:     public static void testNoSyncs(String[] args) throws Exception {
0:         boolean debug = false;  // if set, prints out useful info when debugging test
0:         
0:         report("1. With derby.system.durability=test,"
0:                 + "Test to see if syncs are not happening ");
0:         // use the ij utility to read the property file and
0:         // make the initial connection.
0:         org.apache.derby.tools.ij.getPropertyArg(args);
0: 
0:         boolean create = true;
0: 
0:         // Note we time inserts in normal all syncs case first even
0:         // though we may not require it if the inserts finish fast enough
0:         // But timing them here because once database is booted with
0:         // derby.system.durability=test there are no guarantees on consistency
0:         // of database so dont want to mess up numbers for the all syncs case
0: 
0:         // derby.system.durability is not test so it will default to
0:         // normal mode and autocommit=true
0:         long timeCommitOn = timeTakenToInsert("", create, true);
0:         String derbyHome = System.getProperty("derby.system.home");
0:         if (isMessageInDerbyLog(derbyHome))
0:             report("ERROR! System should not have been booted with"
0:                     + "derby.system.durability=test mode here");
0:         create = false;
0:         // derby.system.durability=test and autocommit=true
0:         long timeWithTestModeCommitOn = timeTakenToInsert("test", create, true);
0:         // derby.system.durability=test and autocommit=false
0:         long timeWithTestModeCommitOff = timeTakenToInsert("test", create, false);
0:       
0:         if (debug) {
0:             report("timeCommitOn = " + timeCommitOn);
0:             report("timeWithTestModeCommitOn = " + timeWithTestModeCommitOn);
0:             report("timeWithTestModeCommitOff = " + timeWithTestModeCommitOff);
0:         }
0: 
0:         // an approximation on the upper bound for time taken to do
0:         // inserts in autocommit mode with derby.system.durability=test mode
0:         long upperBound = 3000;
0: 
0:         // if it takes a lot of time to do the inserts then do extra checks
0:         // to determine if derby.system.durability=test mode is broken or not
0:         // because we cant be sure if inserts just took a long time
0:         // because of a really slow machine
0:         if (timeWithTestModeCommitOn > upperBound) {
0: 
0:             long proximityRange = 1000;
0: 
0:             // in derby.system.durability=test autocommit on or off should
0:             // be in same range since syncs are not happening
0:             if (Math.abs(timeWithTestModeCommitOn - timeWithTestModeCommitOff) > proximityRange) {
0:                 // another approximation here (1.5 times of with testmode set)
0:                 if (timeWithTestModeCommitOn > timeCommitOn
0:                         || (timeCommitOn < (1.5 * timeWithTestModeCommitOn))) {
0:                     report("FAIL -- derby.system.durability=test mode seems to be broken.");
0:                     report("-- In this mode one would expect that inserts with autocommit off and on "
0:                             + "would be in the same range as syncs are not happening but the difference "
0:                             + "here seems to be more than the approximate estimated range.");
0:                     report("-- Also comparing the time taken to do the inserts without this" +
0:                             " property set seems to be in the same"
0:                             + " range as with this property set.");
0:                     report("-- Please note this test times inserts and approximate estimates were " +
0:                             "considered to report this observation.");
0:                 }
0:             }
0:         }
0: 
0:     }
commit:3108420
/////////////////////////////////////////////////////////////////////////
0: /*
0:  
0:  Derby - Class org.apache.derbyTesting.functionTests.tests.store.TestNoSyncs
0:  
0:  Copyright 2002, 2005 The Apache Software Foundation or its licensors, as applicable.
0:  
0:  Licensed under the Apache License, Version 2.0 (the "License");
0:  you may not use this file except in compliance with the License.
0:  You may obtain a copy of the License at
0:  
0:  http://www.apache.org/licenses/LICENSE-2.0
0:  
0:  Unless required by applicable law or agreed to in writing, software
0:  distributed under the License is distributed on an "AS IS" BASIS,
0:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  See the License for the specific language governing permissions and
0:  limitations under the License.
0:  
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.store;
0: 
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.DriverManager;
0: import java.io.*;
0: 
0: /**
0:  * This program tests the system when the derby.system.durability property is
0:  * set to 'test'. 
0:  * <BR>
0:  * When the derby.system.durability is set to 'test', the system will not do 
0:  * any sync to the
0:  * disk and the recovery system will not work property. It is provided for
0:  * performance reasons and should ideally only be used when there is no
0:  * requirement for the database to recover.
0:  * <p>
0:  * When set, the system will not do any syncs, the cases namely - no sync of the
0:  * log file at each commit - no sync of the log file before data page is forced
0:  * to disk - no sync of page allocation when file is grown - no sync of data
0:  * writes during checkpoint
0:  * <p>
0:  * That means, when this property is set to 'test',
0:  *  - a commit no longer guarantees that the transaction's modification will 
0:  *    survive a system crash or
0:  * JVM termination 
0:  * - the database may not recover successfully upon restart 
0:  * - a near full disk at runtime may cause unexpected errors
0:  * - database may be in an inconsistent state
0:  * 
0:  * This program tests for 
0:  * 1. setting the derby.system.durability=test is actually not
0:  *    doing the syncs by timing inserts
0:  * 2. check if a warning message exists in derby.log 
0:  * 3. read log.ctrl file and check if the flag is set or not
0:  * 4. check if the log.ctrl file flag is not overwritten for the case when 
0:  * database booted with derby.system.durability=test set, then shutdown
0:  * and database booted without derby.system.durability=test
0:  * 
0:  * @author Sunitha Kambhampati 
0:  * @version 1.0
0:  */
0: public class TestDurabilityProperty {
0:     public static void main(String[] args) {
0:         Connection conn = null;
0:         Statement s = null;
0:         PreparedStatement ps = null;
0:         try {
0:             report("1. create database with derby.system.durability=test mode");
0:             // use the ij utility to read the property file and
0:             // make the initial connection.
0:             org.apache.derby.tools.ij.getPropertyArg(args);
0:             System.setProperty("derby.system.durability","test");
0:             conn = org.apache.derby.tools.ij.startJBMS();
0: 
0:             s = conn.createStatement();
0:             s.execute("create table t1 (c1 int, c2 int)");
0:             s.close();
0: 
0:             // Test 1
0:             // this is a quick check incase someone breaks the
0:             // derby.system.durability=test
0:             long timeTaken = doInsertsInAutoCommit(conn);
0:             conn.close();
0: 
0:             int approxUpperBound = 3000; // approximate upper bound in
0:                                          // millisecond
0:             if (timeTaken > approxUpperBound) {
0:                 report("FAIL -- derby.system.durability=test mode seems to be broken.");
0:                 report(" Time to insert rows in test exceeded the usual limit.");
0:             }
0: 
0:             String derbyHome = System.getProperty("derby.system.home");
0:             // Test 2
0:             // Check if derby.log has the warning message
0:             report("Is warning message about derby.system.durability=test present in derby.log ="
0:                     + isMessageInDerbyLog(derbyHome));
0:             // Test 3
0:             // Check if marker is correctly written out to database
0:             markerInControlFile(derbyHome);
0:             
0:             // Test 4
0:             // shutdown database and boot database afresh without 
0:             // derby.system.durability set to test. In this case the derby.log 
0:             // and the log control file should still have the marker that this 
0:             // mode was once used to boot database.
0:             report(
0:                 "2. shutdown database and reboot database without " +
0:                 "derby.system.durability=test and test for marker in log.ctrl file");
0:             markerNotOverwritten(derbyHome);
0: 
0:         } catch (Throwable e) {
0:             report("FAIL -- unexpected exception: " + e);
0:             e.printStackTrace();
0:         }
0: 
0:     }
0: 
0:     /**
0:      * Note doing inserts in autocommit mode is probably the worst case scenario
0:      * in terms of performance as each commit will involve a flush/sync to disk
0:      * but in case of the derby.system.durability=test mode, the syncs dont 
0:      * happen.
0:      * This test case times the inserts and assumes that the inserts on any
0:      * system will be less than three second for 500 inserts. Note this upper
0:      * bound on time is just an approximate estimation
0:      */
0:     public static long doInsertsInAutoCommit(Connection conn) throws Exception {
0:         PreparedStatement ps = conn
0:                 .prepareStatement("insert into t1 values(?,?)");
0:         long count = 0;
0: 
0:         long start = System.currentTimeMillis();
0: 
0:         for (int i = 0; i < 500; i++) {
0:             ps.setInt(1, i);
0:             ps.setInt(2, i);
0:             count += ps.executeUpdate();
0:         }
0: 
0:         long end = System.currentTimeMillis();
0:         report("num successful inserts = " + count);
0: 
0:         return (end - start);
0:     }
0: 
0:     /**
0:      * When derby.system.durability is set, a warning message is written out to
0:      * derby.log indicating that the property is set and that it does not
0:      * guarantee recoverability This test tests if a message is written out to
0:      * derby.log or not
0:      */
0:     public static boolean isMessageInDerbyLog(String derbyHome) throws Exception {
0:         BufferedReader reader = null;
0:         File derbylog = null;
0:         try {
0:             derbylog = new File(derbyHome, "derby.log");
0:             reader = new BufferedReader(new FileReader(derbylog));
0: 
0:             String line = null;
0:             while ((line = reader.readLine()) != null) {
0:                 if (line.indexOf("derby.system.durability=test") != -1)
0:                     return true;
0: 
0:             }
0:             return false;
0:         } finally {
0:             if (reader != null) {
0:                 reader.close();
0:             }
0:             derbylog = null;
0:         }
0:     }
0: 
0:     /**
0:      * if database is booted with derby.system.durability=test, 
0:      * a marker is written out into log control
0:      * file to recognize that the database was previously booted in this mode
0:      * Test if the marker byte is set correctly or not. See comments in
0:      * org.apache.derby.impl.store.log.LogToFile for IS_DURABILITY_TESTMODE_NO_SYNC_FLAG
0:      */
0:     public static void markerInControlFile(String derbyHome) throws Exception {
0:         RandomAccessFile controlFile = null;
0:         try {
0:             int testModeNoSyncMarkerPosition = 28;
0:             byte testModeNoSyncMarker = 0x2;
0:             controlFile = new RandomAccessFile(derbyHome
0:                     + "/wombat/log/log.ctrl", "r");
0:             controlFile.seek(testModeNoSyncMarkerPosition);
0:             report("log.ctrl file has durability testMode no sync marker value = "
0:                     + ((controlFile.readByte() & testModeNoSyncMarker) != 0) );
0:         } finally {
0:             if (controlFile != null)
0:                 controlFile.close();
0: 
0:         }
0:     }
0: 
0:     /**
0:      * Test for case when database is booted without derby.system.durability=test
0:      * but previously has been booted with the derby.system.durability=test. In 
0:      * this scenario,the log control file should still have the marker to say
0:      * that this mode was set previously, and derby.log must also have a warning
0:      * message
0:      * @param derbyHome value of derby.system.home where the database is
0:      * @throws Exception
0:      */
0:     public static void markerNotOverwritten(String derbyHome) throws Exception
0:     {
0:         // shutdown database
0:         Connection conn = null;
0:         try
0:         {
0:             conn = DriverManager.getConnection("jdbc:derby:;shutdown=true");
0:         }
0:         catch(Exception e)
0:         {
0:             report("expected exception for shutdown." + e.getMessage());
0:         }
0:         // unset property
0:         System.setProperty("derby.system.durability","");
0:         conn = org.apache.derby.tools.ij.startJBMS();
0:         conn.close();
0:         markerInControlFile(derbyHome);
0:         report("Is warning message about derby.system.durability=test present in derby.log ="
0:                 + isMessageInDerbyLog(derbyHome));
0:     }
0:     
0:     /**
0:      * print message
0:      * @param msg to print out 
0:      */
0:     public static void report(String msg) {
0:         System.out.println(msg);
0:     }
0: 
0: }
============================================================================