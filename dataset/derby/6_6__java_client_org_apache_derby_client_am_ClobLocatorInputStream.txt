1:61aec23: /*
1:a8908bd:  
1:61aec23:    Derby - Class org.apache.derby.client.am.ClobLocatorInputStream
8:61aec23:  
1:61aec23:    Licensed to the Apache Software Foundation (ASF) under one or more
1:61aec23:    contributor license agreements.  See the NOTICE file distributed with
1:61aec23:    this work for additional information regarding copyright ownership.
1:61aec23:    The ASF licenses this file to You under the Apache License, Version 2.0
1:61aec23:    (the "License"); you may not use this file except in compliance with
1:61aec23:    the License.  You may obtain a copy of the License at
1:61aec23:  
1:61aec23:       http://www.apache.org/licenses/LICENSE-2.0
1:61aec23:  
1:61aec23:    Unless required by applicable law or agreed to in writing, software
1:61aec23:    distributed under the License is distributed on an "AS IS" BASIS,
1:61aec23:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:61aec23:    See the License for the specific language governing permissions and
1:61aec23:    limitations under the License.
1:61aec23:  
5:61aec23:  */
1:61aec23: 
1:61aec23: package org.apache.derby.client.am;
1:61aec23: 
1:61aec23: import java.io.IOException;
1:69e3d06: import java.io.InputStream;
1:61aec23: 
1:4458855: import org.apache.derby.shared.common.sanity.SanityManager;
1:61aec23: 
1:a8908bd: /**
1:61aec23:  * An <code>InputStream</code> that will use an locator to fetch the
1:61aec23:  * Clob value from the server.
1:61aec23:  * <p>
1:61aec23:  * Closing a <code>ByteArrayInputStream</code> has no effect. The methods in
1:61aec23:  * this class can be called after the stream has been closed without
1:61aec23:  * generating an <code>IOException</code>.
1:61aec23:  * <p>
1:61aec23:  * This <code>InputStream</code> implementation is pretty basic.  No
1:69e3d06:  * buffering of data is done.  Hence, for efficiency #read(byte[])
1:61aec23:  * should be used instead of #read().  Marks are not supported, but it
1:61aec23:  * should be pretty simple to extend the implementation to support
1:61aec23:  * this.  A more efficient skip implementation should also be
1:61aec23:  * straight-forward.
1:c6ed70e:  */
1:61aec23: 
1:0326967: class ClobLocatorInputStream extends InputStream {
1:61aec23:     
1:c6ed70e:     /**
1:61aec23:      * Connection used to read Clob from server.
1:61aec23:      */
1:69e3d06:     private final ClientConnection connection;
1:61aec23:     
5:61aec23:     /**
1:61aec23:      * The Clob to be accessed.
1:61aec23:      */
1:69e3d06:     private final ClientClob clob;
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * Current position in the underlying Clob.
1:61aec23:      * Clobs are indexed from 1
1:61aec23:      */
1:a6f48dd:     private long currentPos;
1:a6f48dd:     
1:a6f48dd:     /**
1:61aec23:      * Create an <code>InputStream</code> for reading the
1:61aec23:      * <code>Clob</code> value represented by the given locator based
1:61aec23:      * <code>Clob</code> object.
1:61aec23:      * @param connection connection to be used to read the
1:61aec23:      *        <code>Clob</code> value from the server
1:61aec23:      * @param clob <code>Clob</code> object that contains locator for
1:61aec23:      *        the <code>Clob</code> value on the server.
1:a6f48dd:      */
1:0326967:     ClobLocatorInputStream(ClientConnection connection, ClientClob clob)
1:0326967:             throws SqlException {
1:219a290:         if (SanityManager.DEBUG) {
1:219a290:             SanityManager.ASSERT(clob.isLocator());
1:219a290:         }
1:50227f1:         
1:61aec23:         this.connection = connection;
1:61aec23:         this.clob = clob;
1:a6f48dd:         this.currentPos = 1;
1:a8908bd:     }
1:c6ed70e:     
1:50227f1:     /**
1:a8908bd:      * Create an <code>InputStream</code> for reading the
1:a8908bd:      * <code>Clob</code> value represented by the given locator based
1:a8908bd:      * <code>Clob</code> object.
1:a8908bd:      * @param connection connection to be used to read the
1:a8908bd:      *        <code>Clob</code> value from the server
1:a8908bd:      * @param clob <code>Clob</code> object that contains locator for
1:a8908bd:      *        the <code>Clob</code> value on the server.
1:a8908bd:      * @param pos the position inside the <code>Clob<code> from which
1:a8908bd:      *            the reading must begin.
1:a8908bd:      */
1:0326967:     ClobLocatorInputStream(
1:69e3d06:             ClientConnection connection,
1:69e3d06:             ClientClob clob,
1:69e3d06:             long pos) throws SqlException{
1:a8908bd:         this(connection, clob);
1:a8908bd:         this.currentPos = pos;
6:61aec23:     }
1:61aec23:     
1:61aec23:     /**
1:61aec23:      * @see java.io.InputStream#read()
1:c6ed70e:      *
1:61aec23:      * This method fetches one byte at a time from the server. For more
1:61aec23:      * efficient retrieval, use #read(byte[]).
1:c6ed70e:      */
1:61aec23:     public int read() throws IOException {
1:61aec23:         byte[] bytes = readBytes(1);
1:61aec23:         if (bytes.length == 0) { // EOF
1:61aec23:             return -1;
1:61aec23:         } else {
1:1952e60:             // convert byte in range [-128,127] to int in range [0,255]
1:1952e60:             return bytes[0] & 0xff;
1:c6ed70e:         }
1:c6ed70e:     }
1:c6ed70e:     
1:c6ed70e:     /**
1:61aec23:      * @see java.io.InputStream#read(byte[], int, int)
1:c6ed70e:      */
1:61aec23:     public int read(byte[] b, int off, int len) throws IOException {
1:61aec23:         if (len == 0) return 0;
1:50227f1:         if ((off < 0) || (len < 0) || (len > b.length - off)) {
1:61aec23:             throw new IndexOutOfBoundsException();
1:c6ed70e:         }
1:c6ed70e:         
1:61aec23:         byte[] bytes = readBytes(len);
1:61aec23:         if (bytes.length == 0) { // EOF
1:61aec23:             return -1;
1:61aec23:         } else {
1:61aec23:             System.arraycopy(bytes, 0, b, off, bytes.length);
1:61aec23:             return bytes.length;
1:61aec23:         }
1:61aec23:     }
1:c6ed70e:     
1:61aec23:     /**
1:61aec23:      * Read the next <code>len</code> bytes of the <code>Clob</code>
1:61aec23:      * value from the server.
2:61aec23:      *
1:61aec23:      * @param len number of bytes to read
1:61aec23:      * @throws java.io.IOException Wrapped SqlException if reading
1:61aec23:      *         from server fails.
1:61aec23:      * @return <code>byte[]</code> containing the read bytes
1:61aec23:      */
1:61aec23:     private byte[] readBytes(int len) throws IOException {
1:c6ed70e:         try {
1:61aec23:             int actualLength
1:a8908bd:                     = (int )Math.min(len, clob.sqlLength() - currentPos + 1);
1:61aec23:             String resultStr = connection.locatorProcedureCall().
1:61aec23:                     clobGetSubString(clob.getLocator(),
1:61aec23:                     currentPos, actualLength);
1:50227f1:             byte[] result = getBytesFromString(resultStr);
1:61aec23:             currentPos += result.length;
1:61aec23:             return result;
1:61aec23:         } catch (SqlException ex) {
1:b862050:             // Passing cause as ctor argument ensures that the IOException 
1:b862050:             // inherits the cause's message, (unlike invoking initCause() on a 
1:b862050:             // default-constructed IOException).
1:b862050:             throw new IOException(ex);
1:c6ed70e:         }
1:c6ed70e:     }
1:c6ed70e: 
1:c6ed70e:     /**
1:50227f1:      * Returns a <code>Byte</code> array from the
1:50227f1:      * <code>String</code> passed as Input.
1:50227f1:      *
1:50227f1:      * @param str the input <code>String</code>.
1:50227f1:      * @return The <code>Byte</code> corresponding
1:50227f1:      *         to the <code>String</code> that was
1:50227f1:      *         input.
1:50227f1:      */
1:50227f1:     private byte[] getBytesFromString(String str) {
1:50227f1:         //The Byte array that will hold the final
1:50227f1:         //converted Byte array that will be returned
1:50227f1:         //to the user
1:50227f1:         byte[] result = new byte[str.length()];
1:50227f1: 
1:50227f1:         //Iterate through the String to
1:50227f1:         //Convert each character in the
1:50227f1:         //String
1:50227f1:         for (int i = 1; i <= str.length(); i++) {
1:50227f1:             //charAt function accpets a index that
1:50227f1:             //starts from 0 and ranges to length()-1
1:50227f1:             char oneChar = str.charAt(i-1);
1:50227f1: 
1:50227f1:             if (oneChar <= 0xff) {
1:50227f1:                 //Check if the value is lesser
1:50227f1:                 //than maximum value that can
1:50227f1:                 //be stored in a byte. If it is
1:50227f1:                 //lesser store it directly in the
1:50227f1:                 //byte array
1:50227f1:                 result[i-1] = (byte)oneChar;
1:50227f1:             }
1:50227f1:             else {
1:50227f1:                 //The value is greater than the
1:50227f1:                 //maximum value that can be
1:50227f1:                 //stored. Use the value 0x003f
1:50227f1:                 //which corresponds to '?'
1:50227f1:                 //signifying an unknown character
1:50227f1:                 result[i-1] = 0x3f;
1:50227f1:             }
1:50227f1:         }
1:50227f1:         return result;
1:50227f1:     }
1:61aec23: }
============================================================================
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:b862050
/////////////////////////////////////////////////////////////////////////
1:             // Passing cause as ctor argument ensures that the IOException 
1:             // inherits the cause's message, (unlike invoking initCause() on a 
1:             // default-constructed IOException).
1:             throw new IOException(ex);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class ClobLocatorInputStream extends InputStream {
/////////////////////////////////////////////////////////////////////////
1:     ClobLocatorInputStream(ClientConnection connection, ClientClob clob)
1:             throws SqlException {
/////////////////////////////////////////////////////////////////////////
1:     ClobLocatorInputStream(
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
/////////////////////////////////////////////////////////////////////////
1:  * buffering of data is done.  Hence, for efficiency #read(byte[])
0: public class ClobLocatorInputStream extends InputStream {
1:     private final ClientConnection connection;
1:     private final ClientClob clob;
/////////////////////////////////////////////////////////////////////////
0:     public ClobLocatorInputStream(ClientConnection connection, ClientClob clob)
/////////////////////////////////////////////////////////////////////////
0:     public ClobLocatorInputStream(
1:             ClientConnection connection,
1:             ClientClob clob,
1:             long pos) throws SqlException{
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4458855
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:1952e60
/////////////////////////////////////////////////////////////////////////
1:             // convert byte in range [-128,127] to int in range [0,255]
1:             return bytes[0] & 0xff;
commit:d6844ab
/////////////////////////////////////////////////////////////////////////
0:      * maxPos starts counting from 1.
0:     private final long maxPos;
commit:a6f48dd
/////////////////////////////////////////////////////////////////////////
1:     private long currentPos;
0:      * Position in Clob where to stop reading.
1:      */
0:     private long maxPos;
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:     public ClobLocatorInputStream(Connection connection, Clob clob)
0:     throws SqlException{
1:         this.currentPos = 1;
0:         this.maxPos = clob.sqlLength();
/////////////////////////////////////////////////////////////////////////
0:                     = (int )Math.min(len, maxPos - currentPos + 1);
commit:50227f1
/////////////////////////////////////////////////////////////////////////
0:     private final Connection connection;
0:     private final Clob clob;
/////////////////////////////////////////////////////////////////////////
1:         if ((off < 0) || (len < 0) || (len > b.length - off)) {
/////////////////////////////////////////////////////////////////////////
1:             byte[] result = getBytesFromString(resultStr);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns a <code>Byte</code> array from the
1:      * <code>String</code> passed as Input.
1:      *
1:      * @param str the input <code>String</code>.
1:      * @return The <code>Byte</code> corresponding
1:      *         to the <code>String</code> that was
1:      *         input.
1:      */
1:     private byte[] getBytesFromString(String str) {
1:         //The Byte array that will hold the final
1:         //converted Byte array that will be returned
1:         //to the user
1:         byte[] result = new byte[str.length()];
1: 
1:         //Iterate through the String to
1:         //Convert each character in the
1:         //String
1:         for (int i = 1; i <= str.length(); i++) {
1:             //charAt function accpets a index that
1:             //starts from 0 and ranges to length()-1
1:             char oneChar = str.charAt(i-1);
1: 
1:             if (oneChar <= 0xff) {
1:                 //Check if the value is lesser
1:                 //than maximum value that can
1:                 //be stored in a byte. If it is
1:                 //lesser store it directly in the
1:                 //byte array
1:                 result[i-1] = (byte)oneChar;
1:             }
1:             else {
1:                 //The value is greater than the
1:                 //maximum value that can be
1:                 //stored. Use the value 0x003f
1:                 //which corresponds to '?'
1:                 //signifying an unknown character
1:                 result[i-1] = 0x3f;
1:             }
1:         }
1:         return result;
1:     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:50f5a01
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:219a290
/////////////////////////////////////////////////////////////////////////
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(clob.isLocator());
1:         }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c6ed70e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.error.ExceptionUtil;
0: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
0:      * If true, the underlying Blob will be freed when the underlying stream is
0:      * closed.  Used to implement correct behavior for streams obtained from
0:      * result sets.
1:      */
0:     private boolean freeClobOnClose = false;
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:      * Closes this input stream and releases any system resources associated
0:      * with the stream.  This will release the underlying Clob value. 
1:      *  
0:      * @throws java.io.IOException
1:      */
0:     public void close() throws IOException {
1:         try {
0:             if (clob != null  && freeClobOnClose) {
0:                 clob.free();
1:             }
0:         } catch (SQLException ex) {
0:             if (ex.getSQLState().compareTo
0:                     (ExceptionUtil.getSQLStateFromIdentifier
0:                             (SQLState.LOB_OBJECT_INVALID)) == 0) {
0:                 // Clob has already been freed, probably because of autocommit
0:                 return;  // Ignore error
1:             }
1: 
0:             IOException ioEx = new IOException();
0:             ioEx.initCause(ex);
0:             throw ioEx;
1:         }
1:     }
1:       
1:     /**
0:      * Tell stream to free the underlying Clob when it is closed.
1:      */
0:     public void setFreeClobOnClose() {
0:         freeClobOnClose = true;
1:     }
1:     
1: 
1:     /**
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8908bd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     }
1:     
1:     /**
1:      * Create an <code>InputStream</code> for reading the
1:      * <code>Clob</code> value represented by the given locator based
1:      * <code>Clob</code> object.
1:      * @param connection connection to be used to read the
1:      *        <code>Clob</code> value from the server
1:      * @param clob <code>Clob</code> object that contains locator for
1:      *        the <code>Clob</code> value on the server.
1:      * @param pos the position inside the <code>Clob<code> from which
1:      *            the reading must begin.
1:      */
0:     public ClobLocatorInputStream(Connection connection, Clob clob, long pos)
0:     throws SqlException{
1:         this(connection, clob);
1:         this.currentPos = pos;
/////////////////////////////////////////////////////////////////////////
1:                     = (int )Math.min(len, clob.sqlLength() - currentPos + 1);
commit:61aec23
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.ClobLocatorInputStream
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am;
1: 
0: import java.sql.CallableStatement;
0: import java.sql.SQLException;
1: 
1: import java.io.IOException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * An <code>InputStream</code> that will use an locator to fetch the
1:  * Clob value from the server.
1:  * <p>
1:  * Closing a <code>ByteArrayInputStream</code> has no effect. The methods in
1:  * this class can be called after the stream has been closed without
1:  * generating an <code>IOException</code>.
1:  * <p>
1:  * This <code>InputStream</code> implementation is pretty basic.  No
0:  * buffering of data is done.  Hence, for efficieny #read(byte[])
1:  * should be used instead of #read().  Marks are not supported, but it
1:  * should be pretty simple to extend the implementation to support
1:  * this.  A more efficient skip implementation should also be
1:  * straight-forward.
1:  */
1: 
0: public class ClobLocatorInputStream extends java.io.InputStream {
1:     
1:     /**
1:      * Connection used to read Clob from server.
1:      */
0:     private Connection connection;
1:     
1:     /**
1:      * The Clob to be accessed.
1:      */
0:     private Clob clob;
1:     
1:     /**
1:      * Current position in the underlying Clob.
1:      * Clobs are indexed from 1
1:      */
0:     private long currentPos = 1;
1:     
1:     /**
1:      * Create an <code>InputStream</code> for reading the
1:      * <code>Clob</code> value represented by the given locator based
1:      * <code>Clob</code> object.
1:      * @param connection connection to be used to read the
1:      *        <code>Clob</code> value from the server
1:      * @param clob <code>Clob</code> object that contains locator for
1:      *        the <code>Clob</code> value on the server.
1:      */
0:     public ClobLocatorInputStream(Connection connection, Clob clob) {
0:         SanityManager.ASSERT(clob.isLocator());
1:         
1:         this.connection = connection;
1:         this.clob = clob;
1:     }
1:     
1:     /**
1:      * @see java.io.InputStream#read()
1:      *
1:      * This method fetches one byte at a time from the server. For more
1:      * efficient retrieval, use #read(byte[]).
1:      */
1:     public int read() throws IOException {
1:         byte[] bytes = readBytes(1);
1:         if (bytes.length == 0) { // EOF
1:             return -1;
1:         } else {
0:             return bytes[0];
1:         }
1:     }
1:     
1:     /**
1:      * @see java.io.InputStream#read(byte[], int, int)
1:      */
1:     public int read(byte[] b, int off, int len) throws IOException {
1:         if (len == 0) return 0;
0:         if ((off < 0) || (len < 0) || (off+len > b.length)) {
1:             throw new IndexOutOfBoundsException();
1:         }
1:         
1:         byte[] bytes = readBytes(len);
1:         if (bytes.length == 0) { // EOF
1:             return -1;
1:         } else {
1:             System.arraycopy(bytes, 0, b, off, bytes.length);
1:             return bytes.length;
1:         }
1:     }
1:     
1:     /**
1:      * Read the next <code>len</code> bytes of the <code>Clob</code>
1:      * value from the server.
1:      *
1:      * @param len number of bytes to read
1:      * @throws java.io.IOException Wrapped SqlException if reading
1:      *         from server fails.
1:      * @return <code>byte[]</code> containing the read bytes
1:      */
1:     private byte[] readBytes(int len) throws IOException {
0:         try {
1:             int actualLength
0:                     = (int )Math.min(len, clob.sqlLength() - currentPos + 1);
1:             String resultStr = connection.locatorProcedureCall().
1:                     clobGetSubString(clob.getLocator(),
1:                     currentPos, actualLength);
0:             byte[] result = resultStr.getBytes();
1:             currentPos += result.length;
1:             return result;
1:         } catch (SqlException ex) {
0:             IOException ioEx = new IOException();
0:             ioEx.initCause(ex);
0:             throw ioEx;
1:         }
1:     }
1: }
============================================================================