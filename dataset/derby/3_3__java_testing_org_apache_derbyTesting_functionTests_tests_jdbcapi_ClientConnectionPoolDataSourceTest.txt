1:d91d11e: /*
1:d91d11e: 
1:d91d11e:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.ClientConnectionPoolDataSourceTest
1:d91d11e: 
1:d91d11e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d91d11e:    contributor license agreements.  See the NOTICE file distributed with
1:d91d11e:    this work for additional information regarding copyright ownership.
1:d91d11e:    The ASF licenses this file to You under the Apache License, Version 2.0
1:d91d11e:    (the "License"); you may not use this file except in compliance with
1:d91d11e:    the License.  You may obtain a copy of the License at
1:d91d11e: 
1:d91d11e:       http://www.apache.org/licenses/LICENSE-2.0
1:d91d11e: 
1:d91d11e:    Unless required by applicable law or agreed to in writing, software
1:d91d11e:    distributed under the License is distributed on an "AS IS" BASIS,
1:d91d11e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d91d11e:    See the License for the specific language governing permissions and
1:d91d11e:    limitations under the License.
1:d91d11e: 
1:d91d11e:  */
1:d91d11e: 
1:d91d11e: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:d91d11e: 
1:d91d11e: import java.sql.Connection;
1:d91d11e: import java.sql.PreparedStatement;
1:d91d11e: import java.sql.ResultSet;
1:d91d11e: import java.sql.SQLException;
1:d91d11e: import java.sql.Statement;
1:d91d11e: 
1:d91d11e: import javax.sql.PooledConnection;
1:d91d11e: 
1:d91d11e: import junit.framework.Test;
1:c35e4f0: import org.apache.derby.jdbc.ClientConnectionPoolDataSourceInterface;
1:d91d11e: 
1:d91d11e: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:d91d11e: import org.apache.derbyTesting.junit.J2EEDataSource;
1:d91d11e: import org.apache.derbyTesting.junit.JDBC;
1:d91d11e: import org.apache.derbyTesting.junit.TestConfiguration;
1:d91d11e: 
1:d91d11e: /**
1:181c56a:  * Basic tests of the {@code ConnectionPoolDataSource} in the client driver.
1:d91d11e:  */
1:d91d11e: public class ClientConnectionPoolDataSourceTest
1:d91d11e:     extends BaseJDBCTestCase {
1:d91d11e: 
1:d91d11e:     public ClientConnectionPoolDataSourceTest(String name) {
1:d91d11e:         super(name);
2:d91d11e:     }
1:d91d11e: 
1:d91d11e:     /**
1:181c56a:      * Verify that handling of the {@code maxStatements} property is working.
1:d91d11e:      */
1:c35e4f0:     public void testMaxStatementsProperty() throws Exception {
1:c35e4f0:         ClientConnectionPoolDataSourceInterface cDs;
1:c35e4f0: 
1:4469400:         Class<?> clazz;
1:c35e4f0:         if (JDBC.vmSupportsJNDI()) {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.ClientConnectionPoolDataSource");
1:4469400:             cDs = (ClientConnectionPoolDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         } else {
1:4469400:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40");
1:4469400:             cDs = (ClientConnectionPoolDataSourceInterface) clazz.getConstructor().newInstance();
1:c35e4f0:         }
1:d91d11e:         // Check the default value.
1:d91d11e:         assertEquals("Unexpected default value", 0, cDs.getMaxStatements());
1:d91d11e:         cDs.setMaxStatements(25);
1:d91d11e:         // Verify that the new value has been set.
1:d91d11e:         assertEquals("New value not set", 25, cDs.getMaxStatements());
1:d91d11e:         // Try a negative value
2:d91d11e:         try {
1:d91d11e:             cDs.setMaxStatements(-99);
1:d91d11e:             fail("Negative values should not be allowed: " +
1:d91d11e:                     cDs.getMaxStatements());
1:d91d11e:         } catch (IllegalArgumentException iae) {
1:d91d11e:             // As expected, continue the test.
1:d91d11e:         }
1:d91d11e:         // Try setting it to zero to disable statement pooling.
1:d91d11e:         cDs.setMaxStatements(0);
1:d91d11e:         assertEquals("New value not set", 0, cDs.getMaxStatements());
1:d91d11e:     }
1:d91d11e: 
1:d91d11e:     /**
1:d91d11e:      * Tests basic connectivity when connection is obtained from a connection
1:d91d11e:      * pool data source without statement pooling.
1:d91d11e:      *
1:d91d11e:      * @throws SQLException if database operations fail
1:d91d11e:      */
1:d91d11e:     public void testGetConnectionNoStatementPooling()
1:d91d11e:             throws SQLException {
1:c35e4f0:         ClientConnectionPoolDataSourceInterface cDs =
1:c35e4f0:             (ClientConnectionPoolDataSourceInterface)J2EEDataSource.
1:c35e4f0:                 getConnectionPoolDataSource();
1:d91d11e:         // Make sure statement pooling is disabled.
1:d91d11e:         cDs.setMaxStatements(0);
1:d91d11e:         assertEquals(0, cDs.getMaxStatements());
1:d91d11e:         verifyConnection(cDs);
1:d91d11e:     }
1:d91d11e: 
1:d91d11e:     /**
1:d91d11e:      * Tests basic connectivity when connection is obtained from a connection
1:d91d11e:      * pool data source with statement pooling enabled.
1:d91d11e:      *
1:d91d11e:      * @throws SQLException if database operations fail
1:d91d11e:      */
1:d91d11e:     public void testGetConnectionWithStatementPooling()
1:d91d11e:             throws SQLException {
1:c35e4f0:         ClientConnectionPoolDataSourceInterface cDs =
1:c35e4f0:             (ClientConnectionPoolDataSourceInterface)J2EEDataSource.
1:c35e4f0:                 getConnectionPoolDataSource();
1:d91d11e:         // Enable statement pooling.
1:d91d11e:         cDs.setMaxStatements(27);
1:d91d11e:         assertTrue(cDs.getMaxStatements() > 0);
1:d91d11e:         verifyConnection(cDs);
1:d91d11e:     }
1:d91d11e: 
1:d91d11e:     /**
1:d91d11e:      * Do some basic verification on a connection obtained from the data source.
1:d91d11e:      *
1:d91d11e:      * @param cDs data source to get connection from
1:d91d11e:      * @throws SQLException if a JDBC operation fails
1:d91d11e:      */
1:c35e4f0:     private void verifyConnection(ClientConnectionPoolDataSourceInterface cDs)
1:d91d11e:             throws SQLException {
1:18ef52e:         J2EEDataSource.setBeanProperty(cDs, "createDatabase", "create");
1:181c56a:         PooledConnection pc = cDs.getPooledConnection();
1:d91d11e:         // Get a connection and make sure we can access the database.
1:d91d11e:         Connection con = pc.getConnection();
1:d91d11e:         Statement stmt = con.createStatement();
1:d91d11e:         ResultSet rs = stmt.executeQuery("select * from sys.systables");
1:d91d11e:         JDBC.assertDrainResultsHasData(rs);
1:d91d11e:         PreparedStatement ps1 = con.prepareStatement("values 31");
1:d91d11e:         JDBC.assertSingleValueResultSet(ps1.executeQuery(), "31");
1:d91d11e:         ps1.close();
1:d91d11e:         PreparedStatement ps2 = con.prepareStatement("values 31");
1:d91d11e:         // The physical statement is supposed to be the same, but not the
1:d91d11e:         // logical prepared statements (if pooling is used).
1:d91d11e:         assertNotSame(ps1, ps2);
1:d91d11e:         JDBC.assertSingleValueResultSet(ps2.executeQuery(), "31");
1:d91d11e:         // Close everything
1:d91d11e:         stmt.close();
1:d91d11e:         ps2.close();
1:d91d11e:         con.close();
1:d91d11e:         pc.close();
1:d91d11e:     }
1:d91d11e: 
1:d91d11e:     /**
1:d91d11e:      * Returns a suite that will run only in the client-server configuration.
1:d91d11e:      *
1:d91d11e:      * @return A client-server suite with all the tests.
1:d91d11e:      */
1:d91d11e:     public static Test suite() {
1:d91d11e:         // The tests are run in the client-server configuration only, because
1:d91d11e:         // the code being tests does not exist in the embedded driver.
1:d91d11e:         return TestConfiguration.clientServerSuite(
1:d91d11e:                 ClientConnectionPoolDataSourceTest.class);
1:d91d11e:     }
1:d91d11e: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazz;
1:             clazz = Class.forName("org.apache.derby.jdbc.ClientConnectionPoolDataSource");
1:             cDs = (ClientConnectionPoolDataSourceInterface) clazz.getConstructor().newInstance();
1:             clazz = Class.forName("org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40");
1:             cDs = (ClientConnectionPoolDataSourceInterface) clazz.getConstructor().newInstance();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:38667d9
/////////////////////////////////////////////////////////////////////////
0:                 "org.apache.derby.jdbc.BasicClientConnectionPoolDataSource40")
commit:c35e4f0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.ClientConnectionPoolDataSourceInterface;
/////////////////////////////////////////////////////////////////////////
1:     public void testMaxStatementsProperty() throws Exception {
1:         ClientConnectionPoolDataSourceInterface cDs;
1: 
1:         if (JDBC.vmSupportsJNDI()) {
0:             cDs = (ClientConnectionPoolDataSourceInterface)Class.forName(
0:                 "org.apache.derby.jdbc.ClientConnectionPoolDataSource")
0:                     .newInstance();
1:         } else {
0:             cDs = (ClientConnectionPoolDataSourceInterface)Class.forName(
0:                 "org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40")
0:                     .newInstance();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         ClientConnectionPoolDataSourceInterface cDs =
1:             (ClientConnectionPoolDataSourceInterface)J2EEDataSource.
1:                 getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         ClientConnectionPoolDataSourceInterface cDs =
1:             (ClientConnectionPoolDataSourceInterface)J2EEDataSource.
1:                 getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:     private void verifyConnection(ClientConnectionPoolDataSourceInterface cDs)
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:18ef52e
/////////////////////////////////////////////////////////////////////////
1:         J2EEDataSource.setBeanProperty(cDs, "createDatabase", "create");
commit:181c56a
/////////////////////////////////////////////////////////////////////////
1:  * Basic tests of the {@code ConnectionPoolDataSource} in the client driver.
/////////////////////////////////////////////////////////////////////////
1:      * Verify that handling of the {@code maxStatements} property is working.
/////////////////////////////////////////////////////////////////////////
1:         PooledConnection pc = cDs.getPooledConnection();
commit:d91d11e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.ClientConnectionPoolDataSourceTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import javax.sql.PooledConnection;
1: 
1: import junit.framework.Test;
1: 
0: import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.J2EEDataSource;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
0:  * Basic tests of the <code>ConnectionPoolDataSource</code> in the client
0:  * driver.
1:  */
1: public class ClientConnectionPoolDataSourceTest
1:     extends BaseJDBCTestCase {
1: 
1:     public ClientConnectionPoolDataSourceTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
0:      * Verify that handling of the <code>maxStatements</code> property is
0:      * working.
1:      */
0:     public void testMaxStatementsProperty() {
0:         ClientConnectionPoolDataSource cDs =
0:                 new ClientConnectionPoolDataSource();
1:         // Check the default value.
1:         assertEquals("Unexpected default value", 0, cDs.getMaxStatements());
1:         cDs.setMaxStatements(25);
1:         // Verify that the new value has been set.
1:         assertEquals("New value not set", 25, cDs.getMaxStatements());
1:         // Try a negative value
1:         try {
1:             cDs.setMaxStatements(-99);
1:             fail("Negative values should not be allowed: " +
1:                     cDs.getMaxStatements());
1:         } catch (IllegalArgumentException iae) {
1:             // As expected, continue the test.
1:         }
1:         // Try setting it to zero to disable statement pooling.
1:         cDs.setMaxStatements(0);
1:         assertEquals("New value not set", 0, cDs.getMaxStatements());
1:     }
1: 
1:     /**
1:      * Tests basic connectivity when connection is obtained from a connection
1:      * pool data source without statement pooling.
1:      *
1:      * @throws SQLException if database operations fail
1:      */
1:     public void testGetConnectionNoStatementPooling()
1:             throws SQLException {
0:         ClientConnectionPoolDataSource cDs = (ClientConnectionPoolDataSource)
0:                 J2EEDataSource.getConnectionPoolDataSource();
1:         // Make sure statement pooling is disabled.
1:         cDs.setMaxStatements(0);
1:         assertEquals(0, cDs.getMaxStatements());
1:         verifyConnection(cDs);
1:     }
1: 
1:     /**
1:      * Tests basic connectivity when connection is obtained from a connection
1:      * pool data source with statement pooling enabled.
1:      *
1:      * @throws SQLException if database operations fail
1:      */
1:     public void testGetConnectionWithStatementPooling()
1:             throws SQLException {
0:         ClientConnectionPoolDataSource cDs = (ClientConnectionPoolDataSource)
0:                 J2EEDataSource.getConnectionPoolDataSource();
1:         // Enable statement pooling.
1:         cDs.setMaxStatements(27);
1:         assertTrue(cDs.getMaxStatements() > 0);
1:         verifyConnection(cDs);
1:     }
1: 
1:     /**
1:      * Do some basic verification on a connection obtained from the data source.
1:      *
1:      * @param cDs data source to get connection from
1:      * @throws SQLException if a JDBC operation fails
1:      */
0:     private void verifyConnection(ClientConnectionPoolDataSource cDs)
1:             throws SQLException {
0:         PooledConnection pc = null;
0:         // Workaround for "bug" in the JUnit framework, where data source
0:         // connections do not create the database if it does not exist.
0:         // See DERBY-3306 for more information.
1:         try {
0:             pc = cDs.getPooledConnection();
0:         } catch (SQLException sqle) {
0:             assertSQLState("08004", sqle);
0:             getConnection();
0:             pc = cDs.getPooledConnection();
1:         }
1:         // Get a connection and make sure we can access the database.
1:         Connection con = pc.getConnection();
1:         Statement stmt = con.createStatement();
1:         ResultSet rs = stmt.executeQuery("select * from sys.systables");
1:         JDBC.assertDrainResultsHasData(rs);
1:         PreparedStatement ps1 = con.prepareStatement("values 31");
1:         JDBC.assertSingleValueResultSet(ps1.executeQuery(), "31");
1:         ps1.close();
1:         PreparedStatement ps2 = con.prepareStatement("values 31");
1:         // The physical statement is supposed to be the same, but not the
1:         // logical prepared statements (if pooling is used).
1:         assertNotSame(ps1, ps2);
1:         JDBC.assertSingleValueResultSet(ps2.executeQuery(), "31");
1:         // Close everything
1:         stmt.close();
1:         ps2.close();
1:         con.close();
1:         pc.close();
1:     }
1: 
1:     /**
1:      * Returns a suite that will run only in the client-server configuration.
1:      *
1:      * @return A client-server suite with all the tests.
1:      */
1:     public static Test suite() {
1:         // The tests are run in the client-server configuration only, because
1:         // the code being tests does not exist in the embedded driver.
1:         return TestConfiguration.clientServerSuite(
1:                 ClientConnectionPoolDataSourceTest.class);
1:     }
1: }
============================================================================