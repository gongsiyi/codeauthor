1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.locks.VirtualLockTable
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.locks;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	This class acts as a conduit of information between the lock manager and
1:eac0369: 	the outside world.  Once a virtual lock table is initialized, it contains
1:eac0369: 	a snap shot of all the locks currently held in the lock manager.  A VTI can
1:eac0369: 	then be written to query the content of the lock table.
1:eac0369: 	<P>
1:eac0369: 	Each lock held by the lock manager is represented by a Hashtable.  The key
1:eac0369: 	to each Hashtable entry is a lock attribute that is of interest to the
1:eac0369: 	outside world, such as transaction id, type, mode, etc.  
1:eac0369:  */
1:eac0369: 
1:eac0369: public interface VirtualLockTable {
1:eac0369: 
1:eac0369: 	// flags for Lockable.lockAttributes
1:eac0369: 	public static final int LATCH = 1;
1:eac0369: 	public static final int TABLE_AND_ROWLOCK = 2;
1:eac0369:     public static final int SHEXLOCK = 4;
1:eac0369: 	public static final int ALL = ~0;	// turn on all bits
1:eac0369: 
1:eac0369: 	// This is a list of attributes that is known to the Virtual Lock Table.
1:eac0369: 
1:eac0369: 	// list of attributes to be supplied by a participating Lockable
1:eac0369: 	public static final String LOCKTYPE		= "TYPE";	// mandatory
1:eac0369: 	public static final String LOCKNAME		= "LOCKNAME"; // mandatory
1:eac0369: 		 // either one of conglomId or containerId mandatory
1:eac0369: 	public static final String CONGLOMID	= "CONGLOMID"; 
1:eac0369: 	public static final String CONTAINERID	= "CONTAINERID";
1:eac0369: 	public static final String SEGMENTID	= "SEGMENTID";	 // optional
1:eac0369:     public static final String PAGENUM		= "PAGENUM"; // optional
1:eac0369:     public static final String RECID		= "RECID"; // optional
1:eac0369: 
1:eac0369: 	// list of attributes added by the virtual lock table by asking
1:eac0369: 	// the lock for its compatibility space and count
1:eac0369: 	public static final String XACTID		= "XID";
1:eac0369:     public static final String LOCKCOUNT	= "LOCKCOUNT";
1:eac0369: 
1:eac0369: 	// list of attributes added by the virtual lock table by asking
1:eac0369: 	// the lock qualifier
1:eac0369: 	public static final String LOCKMODE		= "MODE";
1:eac0369: 
1:eac0369: 	// list of attributes to be supplied the virtual lock table by looking at 
1:eac0369: 	// the lock table
1:eac0369:     public static final String STATE		= "STATE";
1:eac0369: 	public static final String LOCKOBJ		= "LOCKOBJ";
1:eac0369: 
1:eac0369: 	// list of attributes filled in by virtual lock table with help from data
1:eac0369: 	// dictionary 
1:eac0369: 	public static final String TABLENAME	= "TABLENAME";
1:eac0369: 	public static final String INDEXNAME	= "INDEXNAME";
1:eac0369: 	public static final String TABLETYPE	= "TABLETYPE";
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.locks.VirtualLockTable
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.locks
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.locks;
1: 
1: /**
1: 	This class acts as a conduit of information between the lock manager and
1: 	the outside world.  Once a virtual lock table is initialized, it contains
1: 	a snap shot of all the locks currently held in the lock manager.  A VTI can
1: 	then be written to query the content of the lock table.
1: 	<P>
1: 	Each lock held by the lock manager is represented by a Hashtable.  The key
1: 	to each Hashtable entry is a lock attribute that is of interest to the
1: 	outside world, such as transaction id, type, mode, etc.  
1:  */
1: 
1: public interface VirtualLockTable {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	// flags for Lockable.lockAttributes
1: 	public static final int LATCH = 1;
1: 	public static final int TABLE_AND_ROWLOCK = 2;
1:     public static final int SHEXLOCK = 4;
1: 	public static final int ALL = ~0;	// turn on all bits
1: 
1: 	// This is a list of attributes that is known to the Virtual Lock Table.
1: 
1: 	// list of attributes to be supplied by a participating Lockable
1: 	public static final String LOCKTYPE		= "TYPE";	// mandatory
1: 	public static final String LOCKNAME		= "LOCKNAME"; // mandatory
1: 		 // either one of conglomId or containerId mandatory
1: 	public static final String CONGLOMID	= "CONGLOMID"; 
1: 	public static final String CONTAINERID	= "CONTAINERID";
1: 	public static final String SEGMENTID	= "SEGMENTID";	 // optional
1:     public static final String PAGENUM		= "PAGENUM"; // optional
1:     public static final String RECID		= "RECID"; // optional
1: 
1: 	// list of attributes added by the virtual lock table by asking
1: 	// the lock for its compatibility space and count
1: 	public static final String XACTID		= "XID";
1:     public static final String LOCKCOUNT	= "LOCKCOUNT";
1: 
1: 	// list of attributes added by the virtual lock table by asking
1: 	// the lock qualifier
1: 	public static final String LOCKMODE		= "MODE";
1: 
1: 	// list of attributes to be supplied the virtual lock table by looking at 
1: 	// the lock table
1:     public static final String STATE		= "STATE";
1: 	public static final String LOCKOBJ		= "LOCKOBJ";
1: 
1: 	// list of attributes filled in by virtual lock table with help from data
1: 	// dictionary 
1: 	public static final String TABLENAME	= "TABLENAME";
1: 	public static final String INDEXNAME	= "INDEXNAME";
1: 	public static final String TABLETYPE	= "TABLETYPE";
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.locks
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.locks;
0: 
0: /**
0: 	This class acts as a conduit of information between the lock manager and
0: 	the outside world.  Once a virtual lock table is initialized, it contains
0: 	a snap shot of all the locks currently held in the lock manager.  A VTI can
0: 	then be written to query the content of the lock table.
0: 	<P>
0: 	Each lock held by the lock manager is represented by a Hashtable.  The key
0: 	to each Hashtable entry is a lock attribute that is of interest to the
0: 	outside world, such as transaction id, type, mode, etc.  
0:  */
0: 
0: public interface VirtualLockTable {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	// flags for Lockable.lockAttributes
0: 	public static final int LATCH = 1;
0: 	public static final int TABLE_AND_ROWLOCK = 2;
0:     public static final int SHEXLOCK = 4;
0: 	public static final int ALL = ~0;	// turn on all bits
0: 
0: 	// This is a list of attributes that is known to the Virtual Lock Table.
0: 
0: 	// list of attributes to be supplied by a participating Lockable
0: 	public static final String LOCKTYPE		= "TYPE";	// mandatory
0: 	public static final String LOCKNAME		= "LOCKNAME"; // mandatory
0: 		 // either one of conglomId or containerId mandatory
0: 	public static final String CONGLOMID	= "CONGLOMID"; 
0: 	public static final String CONTAINERID	= "CONTAINERID";
0: 	public static final String SEGMENTID	= "SEGMENTID";	 // optional
0:     public static final String PAGENUM		= "PAGENUM"; // optional
0:     public static final String RECID		= "RECID"; // optional
0: 
0: 	// list of attributes added by the virtual lock table by asking
0: 	// the lock for its compatibility space and count
0: 	public static final String XACTID		= "XID";
0:     public static final String LOCKCOUNT	= "LOCKCOUNT";
0: 
0: 	// list of attributes added by the virtual lock table by asking
0: 	// the lock qualifier
0: 	public static final String LOCKMODE		= "MODE";
0: 
0: 	// list of attributes to be supplied the virtual lock table by looking at 
0: 	// the lock table
0:     public static final String STATE		= "STATE";
0: 	public static final String LOCKOBJ		= "LOCKOBJ";
0: 
0: 	// list of attributes filled in by virtual lock table with help from data
0: 	// dictionary 
0: 	public static final String TABLENAME	= "TABLENAME";
0: 	public static final String INDEXNAME	= "INDEXNAME";
0: 	public static final String TABLETYPE	= "TABLETYPE";
0: 
0: }
============================================================================