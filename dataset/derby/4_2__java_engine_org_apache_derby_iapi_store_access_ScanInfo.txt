1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.ScanInfo
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   This object provides performance information related to an open scan.
1:eac0369:   The information is accumulated during operations on a ScanController() and
1:eac0369:   then copied into this object and returned by a call to 
1:eac0369:   ScanController.getStatistic().
1:eac0369: 
1:eac0369:   @see GenericScanController#getScanInfo()
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface ScanInfo
1:eac0369: {
1:eac0369:     /**
1:eac0369:      * Return all information gathered about the scan.
1:eac0369:      * <p>
1:eac0369:      * This routine returns a list of properties which contains all information
1:eac0369:      * gathered about the scan.  If a Property is passed in, then that property
1:eac0369:      * list is appeneded to, otherwise a new property object is created and
1:eac0369:      * returned.
1:eac0369:      * <p>
1:eac0369:      * Not all scans may support all properties, if the property is not 
1:eac0369:      * supported then it will not be returned.  The following is a list of
1:eac0369:      * properties that may be returned. These names have been internationalized,
1:eac0369: 	 * the names shown here are the old, non-internationalized names:
1:eac0369:      *
1:eac0369:      *     scanType
1:eac0369:      *         - type of the scan being performed:
1:eac0369:      *           btree
1:eac0369:      *           heap
1:eac0369:      *           sort
1:eac0369:      *     numPagesVisited
1:eac0369:      *         - the number of pages visited during the scan.  For btree scans
1:eac0369:      *           this number only includes the leaf pages visited.  
1:eac0369:      *     numDeletedRowsVisited
1:eac0369:      *         - the number of deleted rows visited during the scan.  This
1:eac0369:      *           number includes only those rows marked deleted.
1:eac0369:      *     numRowsVisited
1:eac0369:      *         - the number of rows visited during the scan.  This number 
1:eac0369:      *           includes all rows, including: those marked deleted, those
1:eac0369:      *           that don't meet qualification, ...
1:eac0369:      *     numRowsQualified
1:eac0369:      *         - the number of rows which met the qualification.
1:eac0369:      *     treeHeight (btree's only)
1:eac0369:      *         - for btree's the height of the tree.  A tree with one page
1:eac0369:      *           has a height of 1.  Total number of pages visited in a btree
1:eac0369:      *           scan is (treeHeight - 1 + numPagesVisited).
1:eac0369:      *     numColumnsFetched
1:eac0369:      *         - the number of columns Fetched - partial scans will result
1:eac0369:      *           in fetching less columns than the total number in the scan.
1:eac0369:      *     columnsFetchedBitSet
1:eac0369:      *         - The BitSet.toString() method called on the validColumns arg.
1:eac0369:      *           to the scan, unless validColumns was set to null, and in that
1:eac0369:      *           case we will return "all".
1:eac0369:      *     NOTE - this list will be expanded as more information about the scan
1:eac0369:      *            is gathered and returned.
1:eac0369:      *
1:eac0369:      * @param prop   Property list to fill in.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     Properties getAllScanInfo(Properties prop)
1:eac0369: 		throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.ScanInfo
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 
1:   This object provides performance information related to an open scan.
1:   The information is accumulated during operations on a ScanController() and
1:   then copied into this object and returned by a call to 
1:   ScanController.getStatistic().
1: 
1:   @see GenericScanController#getScanInfo()
1: 
1: **/
1: 
1: public interface ScanInfo
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     /**
1:      * Return all information gathered about the scan.
1:      * <p>
1:      * This routine returns a list of properties which contains all information
1:      * gathered about the scan.  If a Property is passed in, then that property
1:      * list is appeneded to, otherwise a new property object is created and
1:      * returned.
1:      * <p>
1:      * Not all scans may support all properties, if the property is not 
1:      * supported then it will not be returned.  The following is a list of
1:      * properties that may be returned. These names have been internationalized,
1: 	 * the names shown here are the old, non-internationalized names:
1:      *
1:      *     scanType
1:      *         - type of the scan being performed:
1:      *           btree
1:      *           heap
1:      *           sort
1:      *     numPagesVisited
1:      *         - the number of pages visited during the scan.  For btree scans
1:      *           this number only includes the leaf pages visited.  
1:      *     numDeletedRowsVisited
1:      *         - the number of deleted rows visited during the scan.  This
1:      *           number includes only those rows marked deleted.
1:      *     numRowsVisited
1:      *         - the number of rows visited during the scan.  This number 
1:      *           includes all rows, including: those marked deleted, those
1:      *           that don't meet qualification, ...
1:      *     numRowsQualified
1:      *         - the number of rows which met the qualification.
1:      *     treeHeight (btree's only)
1:      *         - for btree's the height of the tree.  A tree with one page
1:      *           has a height of 1.  Total number of pages visited in a btree
1:      *           scan is (treeHeight - 1 + numPagesVisited).
1:      *     numColumnsFetched
1:      *         - the number of columns Fetched - partial scans will result
1:      *           in fetching less columns than the total number in the scan.
1:      *     columnsFetchedBitSet
1:      *         - The BitSet.toString() method called on the validColumns arg.
1:      *           to the scan, unless validColumns was set to null, and in that
1:      *           case we will return "all".
1:      *     NOTE - this list will be expanded as more information about the scan
1:      *            is gathered and returned.
1:      *
1:      * @param prop   Property list to fill in.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     Properties getAllScanInfo(Properties prop)
1: 		throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.util.Properties;
0: 
0: /**
0: 
0:   This object provides performance information related to an open scan.
0:   The information is accumulated during operations on a ScanController() and
0:   then copied into this object and returned by a call to 
0:   ScanController.getStatistic().
0: 
0:   @see GenericScanController#getScanInfo()
0: 
0: **/
0: 
0: public interface ScanInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     /**
0:      * Return all information gathered about the scan.
0:      * <p>
0:      * This routine returns a list of properties which contains all information
0:      * gathered about the scan.  If a Property is passed in, then that property
0:      * list is appeneded to, otherwise a new property object is created and
0:      * returned.
0:      * <p>
0:      * Not all scans may support all properties, if the property is not 
0:      * supported then it will not be returned.  The following is a list of
0:      * properties that may be returned. These names have been internationalized,
0: 	 * the names shown here are the old, non-internationalized names:
0:      *
0:      *     scanType
0:      *         - type of the scan being performed:
0:      *           btree
0:      *           heap
0:      *           sort
0:      *     numPagesVisited
0:      *         - the number of pages visited during the scan.  For btree scans
0:      *           this number only includes the leaf pages visited.  
0:      *     numDeletedRowsVisited
0:      *         - the number of deleted rows visited during the scan.  This
0:      *           number includes only those rows marked deleted.
0:      *     numRowsVisited
0:      *         - the number of rows visited during the scan.  This number 
0:      *           includes all rows, including: those marked deleted, those
0:      *           that don't meet qualification, ...
0:      *     numRowsQualified
0:      *         - the number of rows which met the qualification.
0:      *     treeHeight (btree's only)
0:      *         - for btree's the height of the tree.  A tree with one page
0:      *           has a height of 1.  Total number of pages visited in a btree
0:      *           scan is (treeHeight - 1 + numPagesVisited).
0:      *     numColumnsFetched
0:      *         - the number of columns Fetched - partial scans will result
0:      *           in fetching less columns than the total number in the scan.
0:      *     columnsFetchedBitSet
0:      *         - The BitSet.toString() method called on the validColumns arg.
0:      *           to the scan, unless validColumns was set to null, and in that
0:      *           case we will return "all".
0:      *     NOTE - this list will be expanded as more information about the scan
0:      *            is gathered and returned.
0:      *
0:      * @param prop   Property list to fill in.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     Properties getAllScanInfo(Properties prop)
0: 		throws StandardException;
0: }
============================================================================