1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:801cf0d: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.StatementType;
2:eac0369: /**
1:eac0369:  * A ReferencedConstraintDeescriptor is a primary key or a unique
1:eac0369:  * key that is referenced by a foreign key.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public class ReferencedKeyConstraintDescriptor extends KeyConstraintDescriptor
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	   public interface to this descriptor:
1:eac0369: 	   <ol>
1:eac0369: 	   <li>public boolean hasSelfReferencingFK(ConstraintDescriptorList cdl, int type) 
1:eac0369: 		throws StandardException;</li>
1:eac0369: 		<li>public ConstraintDescriptorList getForeignKeyConstraints(int type) throws StandardException;</li>
1:eac0369: 		<li>public boolean isReferenced();</li>
1:eac0369: 		<li>public int getReferenceCount();</li>
1:eac0369: 		<li>public int incrementReferenceCount();</li>
1:eac0369: 		<li>public int decrementReferenceCount();</li>
1:eac0369: 		</ol>
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	//Implementation
1:eac0369: 	private final int constraintType;
1:eac0369: 
1:eac0369: 	int			referenceCount;
1:eac0369: 
1:09bee7d:     // enforced foreign keys
1:eac0369: 	private	ConstraintDescriptorList fkEnabledConstraintList;
1:eac0369: 	// all foreign keys
1:eac0369: 	private	ConstraintDescriptorList fkConstraintList;
1:eac0369: 
1:eac0369: 	private boolean checkedSelfReferencing;
1:eac0369: 	private boolean hasSelfReferencing;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a KeyConstraintDescriptorImpl
1:eac0369: 	 *
1:eac0369: 	 * @param constraintType	The type of the constraint
1:eac0369: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
1:eac0369: 	 * @param table		The descriptor of the table the constraint is on
1:eac0369: 	 * @param constraintName	The name of the constraint.
1:eac0369: 	 * @param deferrable		If the constraint can be deferred.
1:eac0369: 	 * @param initiallyDeferred If the constraint starts life deferred.
1:eac0369: 	 * @param columns			columns involved in the constraint
1:eac0369: 	 * @param constraintId		UUID of constraint
1:eac0369: 	 * @param indexId			The UUID for the backing index
1:eac0369: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
1:09bee7d:      * @param enforced          is the constraint enforced?
1:09bee7d:      * @param referenceCount    number of FKs (enforced only)
1:eac0369: 	 */
1:eac0369: 	protected ReferencedKeyConstraintDescriptor(int constraintType,
1:eac0369: 		    DataDictionary dataDictionary,
1:eac0369: 			TableDescriptor table,
1:eac0369: 			String constraintName,
1:eac0369: 			boolean deferrable,
1:eac0369: 			boolean initiallyDeferred,
1:eac0369: 			int[] columns,
1:eac0369: 			UUID constraintId,
1:eac0369: 			UUID indexId,
1:eac0369: 			SchemaDescriptor schemaDesc,
1:09bee7d:             boolean enforced,
1:eac0369: 			int referenceCount
1:eac0369: 			)							
1:eac0369: 	{
1:eac0369: 		super(dataDictionary, table, constraintName, deferrable,
1:eac0369: 			  initiallyDeferred, columns, 
1:09bee7d:               constraintId, indexId, schemaDesc, enforced);
1:eac0369: 		this.referenceCount = referenceCount;
1:eac0369: 		this.constraintType = constraintType;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final int getConstraintType() {
1:eac0369: 		return constraintType;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Am I referenced by a FK on the same table?
1:eac0369: 	 *
1:eac0369: 	 * @param cdl	ConstraintDescriptorList for the table
1:eac0369: 	 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
1:eac0369: 	 *
2:eac0369: 	 * @return	true/false
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public boolean hasSelfReferencingFK(ConstraintDescriptorList cdl, int type) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			checkType(type);
1:eac0369: 		}
1:eac0369: 	
1:eac0369: 		if (checkedSelfReferencing)
1:eac0369: 		{
1:eac0369: 			return hasSelfReferencing;
1:eac0369: 		}
1:eac0369: 	
1:eac0369: 		ForeignKeyConstraintDescriptor fkcd;
1:eac0369: 		/* Get a full list of referencing keys, if caller
1:eac0369: 		 * passed in null CDL.
1:eac0369: 		 */
1:eac0369: 		if (cdl == null)
1:eac0369: 		{
1:eac0369: 			cdl = getForeignKeyConstraints(type);
1:eac0369: 		}
1:eac0369: 
1:801cf0d:         for (ConstraintDescriptor cd : cdl)
1:eac0369: 		{
1:eac0369: 			if (! (cd instanceof ForeignKeyConstraintDescriptor))
1:eac0369: 			{
1:eac0369: 				continue;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			fkcd = (ForeignKeyConstraintDescriptor) cd;
1:eac0369: 			if (fkcd.getReferencedConstraintId().equals(getUUID()))
1:eac0369: 			{
1:eac0369: 				hasSelfReferencing = true;
2:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return hasSelfReferencing;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:4cc0287:      * Am I referenced by a FK on another table? Return the list of those
1:4cc0287:      * foreign constraints.
1:eac0369: 	 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
1:4cc0287:      * @return  list of constraints
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:4cc0287:     public ConstraintDescriptorList getNonSelfReferencingFK(int type)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:4cc0287:         ConstraintDescriptorList result = new ConstraintDescriptorList();
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			checkType(type);
1:eac0369: 		}
1:eac0369: 	
1:eac0369: 		ForeignKeyConstraintDescriptor fkcd;
1:eac0369: 
1:4cc0287:         for (ConstraintDescriptor cd : getForeignKeyConstraints(type))
1:eac0369: 		{
1:eac0369: 			if (! (cd instanceof ForeignKeyConstraintDescriptor))
1:eac0369: 			{
1:eac0369: 				continue;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			fkcd = (ForeignKeyConstraintDescriptor) cd;
1:eac0369: 			if(!(fkcd.getTableId().equals(getTableId())))
1:eac0369: 			{
1:4cc0287:                 result.add(fkcd);
1:eac0369: 			}
1:eac0369: 		}
1:4cc0287:         return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the referencing foreign key constraints
1:eac0369: 	 *
1:eac0369: 	 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
1:eac0369: 	 *
1:eac0369: 	 * @return	the list of constraints (ConstraintDescriptorListImpl)
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public ConstraintDescriptorList getForeignKeyConstraints(int type)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			checkType(type);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// optimized for this case
1:eac0369: 		if (type == ENABLED)
1:eac0369: 		{
1:eac0369: 			// optimization to avoid any lookups if we know we
1:eac0369: 			// aren't referenced.
1:eac0369: 			if (!isReferenced())
1:eac0369: 			{
1:eac0369: 				return new ConstraintDescriptorList();
1:eac0369: 			}
1:eac0369: 			else if (fkEnabledConstraintList != null)
1:eac0369: 			{
1:eac0369: 				return fkEnabledConstraintList;
1:eac0369: 			}
1:eac0369: 			else if (fkConstraintList == null)
1:eac0369: 			{
1:eac0369: 				fkConstraintList = getDataDictionary().getForeignKeys(constraintId);
1:eac0369: 			}
1:eac0369: 			fkEnabledConstraintList = fkConstraintList.getConstraintDescriptorList(true);
1:eac0369: 			return fkEnabledConstraintList;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// not optimized for this case
1:eac0369: 		else if (type == DISABLED)
1:eac0369: 		{
1:eac0369: 			if (fkConstraintList == null)
1:eac0369: 			{
1:eac0369: 				fkConstraintList = getDataDictionary().getForeignKeys(constraintId);
1:eac0369: 			}
1:eac0369: 			return fkConstraintList.getConstraintDescriptorList(false);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			if (fkConstraintList == null)
1:eac0369: 			{
1:eac0369: 				fkConstraintList = getDataDictionary().getForeignKeys(constraintId);
1:eac0369: 			}
1:eac0369: 			return fkConstraintList;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 		
1:eac0369: 	/**
1:eac0369: 	 * Is this constraint referenced? Returns
1:09bee7d:      * true if there are enforced fks that
1:eac0369: 	 * reference this constraint.
1:eac0369: 	 *
1:eac0369: 	 * @return false
1:eac0369: 	 */
1:801cf0d:     @Override
1:eac0369: 	public boolean isReferenced()
1:eac0369: 	{
1:eac0369: 		return referenceCount != 0;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:09bee7d:      * Get the number of enforced fks that
1:eac0369: 	 * reference this key.
1:eac0369: 	 *
1:eac0369: 	 * @return the number of fks
1:eac0369: 	 */
1:801cf0d:     @Override
1:eac0369: 	public int getReferenceCount()
1:eac0369: 	{
1:eac0369: 		return referenceCount;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bump the reference count by one.
1:eac0369: 	 *
1:eac0369: 	 * @return the number of fks
1:eac0369: 	 */
1:eac0369: 	public int incrementReferenceCount()
1:eac0369: 	{
1:eac0369: 		return referenceCount++;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Decrement the reference count by one.
1:eac0369: 	 *
1:eac0369: 	 * @return the number of fks
1:eac0369: 	 */
1:eac0369: 	public int decrementReferenceCount()
1:eac0369: 	{
1:eac0369: 		return referenceCount--;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Does this constraint need to fire on this type of
1:eac0369: 	 * DML?  For referenced keys, fire if referenced by
1:eac0369: 	 * a fk, and stmt is delete or bulk insert replace, 
1:eac0369: 	 * or stmt is update and columns intersect.
1:eac0369: 	 *
1:6b50965: 	 * @param stmtType	the type of DML 
1:eac0369: 	 * (StatementType.INSERT|StatementType.UPDATE|StatementType.DELETE)
1:eac0369: 	 * @param modifiedCols	the columns modified, or null for all
1:eac0369: 	 *
1:eac0369: 	 * @return true/false
1:eac0369: 	 */
1:eac0369: 	public boolean needsToFire(int stmtType, int[] modifiedCols)
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** If we are disabled, we never fire
1:eac0369: 		*/
1:09bee7d:         if (!enforced())
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (!isReferenced() ||
1:eac0369: 			(stmtType == StatementType.INSERT))
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (stmtType == StatementType.DELETE ||
1:eac0369: 			stmtType == StatementType.BULK_INSERT_REPLACE)
1:eac0369: 		{
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// if update, only relevant if columns intersect
1:eac0369: 		return doColumnsIntersect(modifiedCols, getReferencedColumns());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private void checkType(int type) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			switch (type)
1:eac0369: 			{
1:eac0369: 			  case ENABLED:
1:eac0369: 			  case DISABLED:
1:eac0369: 			  case ALL:
1:eac0369: 				break;
1:eac0369: 			  default:
1:eac0369: 				SanityManager.THROWASSERT("constraint type "+type+" is invalid");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 		
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:4cc0287
/////////////////////////////////////////////////////////////////////////
1:      * Am I referenced by a FK on another table? Return the list of those
1:      * foreign constraints.
1:      * @return  list of constraints
1:     public ConstraintDescriptorList getNonSelfReferencingFK(int type)
1:         ConstraintDescriptorList result = new ConstraintDescriptorList();
/////////////////////////////////////////////////////////////////////////
1:         for (ConstraintDescriptor cd : getForeignKeyConstraints(type))
/////////////////////////////////////////////////////////////////////////
1:                 result.add(fkcd);
1:         return result;
commit:09bee7d
/////////////////////////////////////////////////////////////////////////
1:     // enforced foreign keys
/////////////////////////////////////////////////////////////////////////
1:      * @param enforced          is the constraint enforced?
1:      * @param referenceCount    number of FKs (enforced only)
/////////////////////////////////////////////////////////////////////////
1:             boolean enforced,
1:               constraintId, indexId, schemaDesc, enforced);
/////////////////////////////////////////////////////////////////////////
1:      * true if there are enforced fks that
/////////////////////////////////////////////////////////////////////////
1:      * Get the number of enforced fks that
/////////////////////////////////////////////////////////////////////////
1:         if (!enforced())
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         for (ConstraintDescriptor cd : cdl)
/////////////////////////////////////////////////////////////////////////
0:         for (ConstraintDescriptor cd : cdl)
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param stmtType	the type of DML 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.StatementType;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.catalog.UUID;
1: /**
1:  * A ReferencedConstraintDeescriptor is a primary key or a unique
1:  * key that is referenced by a foreign key.
1:  *
0:  * @author Jamie
1:  */
1: public class ReferencedKeyConstraintDescriptor extends KeyConstraintDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	   public interface to this descriptor:
1: 	   <ol>
1: 	   <li>public boolean hasSelfReferencingFK(ConstraintDescriptorList cdl, int type) 
1: 		throws StandardException;</li>
1: 		<li>public ConstraintDescriptorList getForeignKeyConstraints(int type) throws StandardException;</li>
1: 		<li>public boolean isReferenced();</li>
1: 		<li>public int getReferenceCount();</li>
1: 		<li>public int incrementReferenceCount();</li>
1: 		<li>public int decrementReferenceCount();</li>
1: 		</ol>
1: 	*/
1: 
1: 	//Implementation
1: 	private final int constraintType;
1: 
1: 	int			referenceCount;
1: 
0: 	// enabled foreign keys
1: 	private	ConstraintDescriptorList fkEnabledConstraintList;
1: 	// all foreign keys
1: 	private	ConstraintDescriptorList fkConstraintList;
1: 
1: 	private boolean checkedSelfReferencing;
1: 	private boolean hasSelfReferencing;
1: 
1: 	/**
1: 	 * Constructor for a KeyConstraintDescriptorImpl
1: 	 *
1: 	 * @param constraintType	The type of the constraint
1: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
1: 	 * @param table		The descriptor of the table the constraint is on
1: 	 * @param constraintName	The name of the constraint.
1: 	 * @param deferrable		If the constraint can be deferred.
1: 	 * @param initiallyDeferred If the constraint starts life deferred.
1: 	 * @param columns			columns involved in the constraint
1: 	 * @param constraintId		UUID of constraint
1: 	 * @param indexId			The UUID for the backing index
1: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
0: 	 * @param isEnabled			is the constraint enabled?
0: 	 * @param referenceCount	number of FKs (enabled only)
1: 	 */
1: 	protected ReferencedKeyConstraintDescriptor(int constraintType,
1: 		    DataDictionary dataDictionary,
1: 			TableDescriptor table,
1: 			String constraintName,
1: 			boolean deferrable,
1: 			boolean initiallyDeferred,
1: 			int[] columns,
1: 			UUID constraintId,
1: 			UUID indexId,
1: 			SchemaDescriptor schemaDesc,
0: 			boolean	isEnabled,
1: 			int referenceCount
1: 			)							
1: 	{
1: 		super(dataDictionary, table, constraintName, deferrable,
1: 			  initiallyDeferred, columns, 
0: 			  constraintId, indexId, schemaDesc, isEnabled);
1: 		this.referenceCount = referenceCount;
1: 		this.constraintType = constraintType;
1: 	}
1: 
1: 	public final int getConstraintType() {
1: 		return constraintType;
1: 	}
1: 
1: 	/**
1: 	 * Am I referenced by a FK on the same table?
1: 	 *
1: 	 * @param cdl	ConstraintDescriptorList for the table
1: 	 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
1: 	 *
1: 	 * @return	true/false
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public boolean hasSelfReferencingFK(ConstraintDescriptorList cdl, int type) 
1: 		throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			checkType(type);
1: 		}
1: 	
1: 		if (checkedSelfReferencing)
1: 		{
1: 			return hasSelfReferencing;
1: 		}
1: 	
0: 		ConstraintDescriptor cd;
1: 		ForeignKeyConstraintDescriptor fkcd;
1: 		/* Get a full list of referencing keys, if caller
1: 		 * passed in null CDL.
1: 		 */
1: 		if (cdl == null)
1: 		{
1: 			cdl = getForeignKeyConstraints(type);
1: 		}
0: 		int cdlSize = cdl.size();
1: 
0: 		for (int index = 0; index < cdlSize; index++)
1: 		{
0: 			cd = (ConstraintDescriptor) cdl.elementAt(index);
1: 			if (! (cd instanceof ForeignKeyConstraintDescriptor))
1: 			{
1: 				continue;
1: 			}
1: 
1: 			fkcd = (ForeignKeyConstraintDescriptor) cd;
1: 			if (fkcd.getReferencedConstraintId().equals(getUUID()))
1: 			{
1: 				hasSelfReferencing = true;
1: 				break;
1: 			}
1: 		}
1: 		return hasSelfReferencing;
1: 	}
1: 
1: 
1: 	/**
0: 	 * Am I referenced by a FK on another table?
1: 	 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
1: 	 * @return	true/false
1: 	 * @exception StandardException on error
1: 	 */
0: 	public boolean hasNonSelfReferencingFK(int type) 
1: 		throws StandardException
1: 	{
1: 
0: 		boolean hasNonSelfReferenceFk = false;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			checkType(type);
1: 		}
1: 	
0: 		ConstraintDescriptor cd;
1: 		ForeignKeyConstraintDescriptor fkcd;
0: 		// Get a full list of referencing keys,
0: 		ConstraintDescriptorList cdl = getForeignKeyConstraints(type);
0:  		int cdlSize = cdl.size();
1: 
0: 		for (int index = 0; index < cdlSize; index++)
1: 		{
0: 			cd = (ConstraintDescriptor) cdl.elementAt(index);
1: 			if (! (cd instanceof ForeignKeyConstraintDescriptor))
1: 			{
1: 				continue;
1: 			}
1: 
1: 			fkcd = (ForeignKeyConstraintDescriptor) cd;
1: 			if(!(fkcd.getTableId().equals(getTableId())))
1: 			{
0: 				hasNonSelfReferenceFk = true;
1: 				break;
1: 			}
1: 		}
0: 		return hasNonSelfReferenceFk;
1: 	}
1: 
1: 
1: 
1: 	/**
1: 	 * Get the referencing foreign key constraints
1: 	 *
1: 	 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
1: 	 *
1: 	 * @return	the list of constraints (ConstraintDescriptorListImpl)
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public ConstraintDescriptorList getForeignKeyConstraints(int type)
1: 		throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			checkType(type);
1: 		}
1: 
1: 		// optimized for this case
1: 		if (type == ENABLED)
1: 		{
1: 			// optimization to avoid any lookups if we know we
1: 			// aren't referenced.
1: 			if (!isReferenced())
1: 			{
1: 				return new ConstraintDescriptorList();
1: 			}
1: 			else if (fkEnabledConstraintList != null)
1: 			{
1: 				return fkEnabledConstraintList;
1: 			}
1: 			else if (fkConstraintList == null)
1: 			{
1: 				fkConstraintList = getDataDictionary().getForeignKeys(constraintId);
1: 			}
1: 			fkEnabledConstraintList = fkConstraintList.getConstraintDescriptorList(true);
1: 			return fkEnabledConstraintList;
1: 		}
1: 
1: 		// not optimized for this case
1: 		else if (type == DISABLED)
1: 		{
1: 			if (fkConstraintList == null)
1: 			{
1: 				fkConstraintList = getDataDictionary().getForeignKeys(constraintId);
1: 			}
1: 			return fkConstraintList.getConstraintDescriptorList(false);
1: 		}
1: 		else
1: 		{
1: 			if (fkConstraintList == null)
1: 			{
1: 				fkConstraintList = getDataDictionary().getForeignKeys(constraintId);
1: 			}
1: 			return fkConstraintList;
1: 		}
1: 	}
1: 		
1: 	/**
1: 	 * Is this constraint referenced? Returns
0: 	 * true if there are enabled fks that 
1: 	 * reference this constraint.
1: 	 *
1: 	 * @return false
1: 	 */
1: 	public boolean isReferenced()
1: 	{
1: 		return referenceCount != 0;
1: 	}
1: 
1: 	/**
0: 	 * Get the number of enabled fks that
1: 	 * reference this key.
1: 	 *
1: 	 * @return the number of fks
1: 	 */
1: 	public int getReferenceCount()
1: 	{
1: 		return referenceCount;
1: 	}
1: 
1: 	/**
1: 	 * Bump the reference count by one.
1: 	 *
1: 	 * @return the number of fks
1: 	 */
1: 	public int incrementReferenceCount()
1: 	{
1: 		return referenceCount++;
1: 	}
1: 
1: 	/**
1: 	 * Decrement the reference count by one.
1: 	 *
1: 	 * @return the number of fks
1: 	 */
1: 	public int decrementReferenceCount()
1: 	{
1: 		return referenceCount--;
1: 	}
1: 
1: 	/**
1: 	 * Does this constraint need to fire on this type of
1: 	 * DML?  For referenced keys, fire if referenced by
1: 	 * a fk, and stmt is delete or bulk insert replace, 
1: 	 * or stmt is update and columns intersect.
1: 	 *
0: 	 * @param dmlType	the type of DML 
1: 	 * (StatementType.INSERT|StatementType.UPDATE|StatementType.DELETE)
1: 	 * @param modifiedCols	the columns modified, or null for all
1: 	 *
1: 	 * @return true/false
1: 	 */
1: 	public boolean needsToFire(int stmtType, int[] modifiedCols)
1: 	{
1: 		/*
1: 		** If we are disabled, we never fire
1: 		*/
0: 		if (!isEnabled)
1: 		{
1: 			return false;
1: 		}
1: 
1: 		if (!isReferenced() ||
1: 			(stmtType == StatementType.INSERT))
1: 		{
1: 			return false;
1: 		}
1: 
1: 		if (stmtType == StatementType.DELETE ||
1: 			stmtType == StatementType.BULK_INSERT_REPLACE)
1: 		{
1: 			return true;
1: 		}
1: 
1: 		// if update, only relevant if columns intersect
1: 		return doColumnsIntersect(modifiedCols, getReferencedColumns());
1: 	}
1: 
1: 	private void checkType(int type) throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			switch (type)
1: 			{
1: 			  case ENABLED:
1: 			  case DISABLED:
1: 			  case ALL:
1: 				break;
1: 			  default:
1: 				SanityManager.THROWASSERT("constraint type "+type+" is invalid");
1: 			}
1: 		}
1: 	}
1: 		
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.StatementType;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.catalog.UUID;
0: /**
0:  * A ReferencedConstraintDeescriptor is a primary key or a unique
0:  * key that is referenced by a foreign key.
0:  *
0:  * @author Jamie
0:  */
0: public class ReferencedKeyConstraintDescriptor extends KeyConstraintDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	   public interface to this descriptor:
0: 	   <ol>
0: 	   <li>public boolean hasSelfReferencingFK(ConstraintDescriptorList cdl, int type) 
0: 		throws StandardException;</li>
0: 		<li>public ConstraintDescriptorList getForeignKeyConstraints(int type) throws StandardException;</li>
0: 		<li>public boolean isReferenced();</li>
0: 		<li>public int getReferenceCount();</li>
0: 		<li>public int incrementReferenceCount();</li>
0: 		<li>public int decrementReferenceCount();</li>
0: 		</ol>
0: 	*/
0: 
0: 	//Implementation
0: 	private final int constraintType;
0: 
0: 	int			referenceCount;
0: 
0: 	// enabled foreign keys
0: 	private	ConstraintDescriptorList fkEnabledConstraintList;
0: 	// all foreign keys
0: 	private	ConstraintDescriptorList fkConstraintList;
0: 
0: 	private boolean checkedSelfReferencing;
0: 	private boolean hasSelfReferencing;
0: 
0: 	/**
0: 	 * Constructor for a KeyConstraintDescriptorImpl
0: 	 *
0: 	 * @param constraintType	The type of the constraint
0: 	 * @param dataDictionary		The data dictionary that this descriptor lives in
0: 	 * @param table		The descriptor of the table the constraint is on
0: 	 * @param constraintName	The name of the constraint.
0: 	 * @param deferrable		If the constraint can be deferred.
0: 	 * @param initiallyDeferred If the constraint starts life deferred.
0: 	 * @param columns			columns involved in the constraint
0: 	 * @param constraintId		UUID of constraint
0: 	 * @param indexId			The UUID for the backing index
0: 	 * @param schemaDesc		The SchemaDescriptor for the constraint
0: 	 * @param isEnabled			is the constraint enabled?
0: 	 * @param referenceCount	number of FKs (enabled only)
0: 	 */
0: 	protected ReferencedKeyConstraintDescriptor(int constraintType,
0: 		    DataDictionary dataDictionary,
0: 			TableDescriptor table,
0: 			String constraintName,
0: 			boolean deferrable,
0: 			boolean initiallyDeferred,
0: 			int[] columns,
0: 			UUID constraintId,
0: 			UUID indexId,
0: 			SchemaDescriptor schemaDesc,
0: 			boolean	isEnabled,
0: 			int referenceCount
0: 			)							
0: 	{
0: 		super(dataDictionary, table, constraintName, deferrable,
0: 			  initiallyDeferred, columns, 
0: 			  constraintId, indexId, schemaDesc, isEnabled);
0: 		this.referenceCount = referenceCount;
0: 		this.constraintType = constraintType;
0: 	}
0: 
0: 	public final int getConstraintType() {
0: 		return constraintType;
0: 	}
0: 
0: 	/**
0: 	 * Am I referenced by a FK on the same table?
0: 	 *
0: 	 * @param cdl	ConstraintDescriptorList for the table
0: 	 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
0: 	 *
0: 	 * @return	true/false
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public boolean hasSelfReferencingFK(ConstraintDescriptorList cdl, int type) 
0: 		throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			checkType(type);
0: 		}
0: 	
0: 		if (checkedSelfReferencing)
0: 		{
0: 			return hasSelfReferencing;
0: 		}
0: 	
0: 		ConstraintDescriptor cd;
0: 		ForeignKeyConstraintDescriptor fkcd;
0: 		/* Get a full list of referencing keys, if caller
0: 		 * passed in null CDL.
0: 		 */
0: 		if (cdl == null)
0: 		{
0: 			cdl = getForeignKeyConstraints(type);
0: 		}
0: 		int cdlSize = cdl.size();
0: 
0: 		for (int index = 0; index < cdlSize; index++)
0: 		{
0: 			cd = (ConstraintDescriptor) cdl.elementAt(index);
0: 			if (! (cd instanceof ForeignKeyConstraintDescriptor))
0: 			{
0: 				continue;
0: 			}
0: 
0: 			fkcd = (ForeignKeyConstraintDescriptor) cd;
0: 			if (fkcd.getReferencedConstraintId().equals(getUUID()))
0: 			{
0: 				hasSelfReferencing = true;
0: 				break;
0: 			}
0: 		}
0: 		return hasSelfReferencing;
0: 	}
0: 
0: 
0: 	/**
0: 	 * Am I referenced by a FK on another table?
0: 	 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
0: 	 * @return	true/false
0: 	 * @exception StandardException on error
0: 	 */
0: 	public boolean hasNonSelfReferencingFK(int type) 
0: 		throws StandardException
0: 	{
0: 
0: 		boolean hasNonSelfReferenceFk = false;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			checkType(type);
0: 		}
0: 	
0: 		ConstraintDescriptor cd;
0: 		ForeignKeyConstraintDescriptor fkcd;
0: 		// Get a full list of referencing keys,
0: 		ConstraintDescriptorList cdl = getForeignKeyConstraints(type);
0:  		int cdlSize = cdl.size();
0: 
0: 		for (int index = 0; index < cdlSize; index++)
0: 		{
0: 			cd = (ConstraintDescriptor) cdl.elementAt(index);
0: 			if (! (cd instanceof ForeignKeyConstraintDescriptor))
0: 			{
0: 				continue;
0: 			}
0: 
0: 			fkcd = (ForeignKeyConstraintDescriptor) cd;
0: 			if(!(fkcd.getTableId().equals(getTableId())))
0: 			{
0: 				hasNonSelfReferenceFk = true;
0: 				break;
0: 			}
0: 		}
0: 		return hasNonSelfReferenceFk;
0: 	}
0: 
0: 
0: 
0: 	/**
0: 	 * Get the referencing foreign key constraints
0: 	 *
0: 	 * @param type ConstraintDescriptor.(ENABLED|DISABLED|ALL)
0: 	 *
0: 	 * @return	the list of constraints (ConstraintDescriptorListImpl)
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public ConstraintDescriptorList getForeignKeyConstraints(int type)
0: 		throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			checkType(type);
0: 		}
0: 
0: 		// optimized for this case
0: 		if (type == ENABLED)
0: 		{
0: 			// optimization to avoid any lookups if we know we
0: 			// aren't referenced.
0: 			if (!isReferenced())
0: 			{
0: 				return new ConstraintDescriptorList();
0: 			}
0: 			else if (fkEnabledConstraintList != null)
0: 			{
0: 				return fkEnabledConstraintList;
0: 			}
0: 			else if (fkConstraintList == null)
0: 			{
0: 				fkConstraintList = getDataDictionary().getForeignKeys(constraintId);
0: 			}
0: 			fkEnabledConstraintList = fkConstraintList.getConstraintDescriptorList(true);
0: 			return fkEnabledConstraintList;
0: 		}
0: 
0: 		// not optimized for this case
0: 		else if (type == DISABLED)
0: 		{
0: 			if (fkConstraintList == null)
0: 			{
0: 				fkConstraintList = getDataDictionary().getForeignKeys(constraintId);
0: 			}
0: 			return fkConstraintList.getConstraintDescriptorList(false);
0: 		}
0: 		else
0: 		{
0: 			if (fkConstraintList == null)
0: 			{
0: 				fkConstraintList = getDataDictionary().getForeignKeys(constraintId);
0: 			}
0: 			return fkConstraintList;
0: 		}
0: 	}
0: 		
0: 	/**
0: 	 * Is this constraint referenced? Returns
0: 	 * true if there are enabled fks that 
0: 	 * reference this constraint.
0: 	 *
0: 	 * @return false
0: 	 */
0: 	public boolean isReferenced()
0: 	{
0: 		return referenceCount != 0;
0: 	}
0: 
0: 	/**
0: 	 * Get the number of enabled fks that
0: 	 * reference this key.
0: 	 *
0: 	 * @return the number of fks
0: 	 */
0: 	public int getReferenceCount()
0: 	{
0: 		return referenceCount;
0: 	}
0: 
0: 	/**
0: 	 * Bump the reference count by one.
0: 	 *
0: 	 * @return the number of fks
0: 	 */
0: 	public int incrementReferenceCount()
0: 	{
0: 		return referenceCount++;
0: 	}
0: 
0: 	/**
0: 	 * Decrement the reference count by one.
0: 	 *
0: 	 * @return the number of fks
0: 	 */
0: 	public int decrementReferenceCount()
0: 	{
0: 		return referenceCount--;
0: 	}
0: 
0: 	/**
0: 	 * Does this constraint need to fire on this type of
0: 	 * DML?  For referenced keys, fire if referenced by
0: 	 * a fk, and stmt is delete or bulk insert replace, 
0: 	 * or stmt is update and columns intersect.
0: 	 *
0: 	 * @param dmlType	the type of DML 
0: 	 * (StatementType.INSERT|StatementType.UPDATE|StatementType.DELETE)
0: 	 * @param modifiedCols	the columns modified, or null for all
0: 	 *
0: 	 * @return true/false
0: 	 */
0: 	public boolean needsToFire(int stmtType, int[] modifiedCols)
0: 	{
0: 		/*
0: 		** If we are disabled, we never fire
0: 		*/
0: 		if (!isEnabled)
0: 		{
0: 			return false;
0: 		}
0: 
0: 		if (!isReferenced() ||
0: 			(stmtType == StatementType.INSERT))
0: 		{
0: 			return false;
0: 		}
0: 
0: 		if (stmtType == StatementType.DELETE ||
0: 			stmtType == StatementType.BULK_INSERT_REPLACE)
0: 		{
0: 			return true;
0: 		}
0: 
0: 		// if update, only relevant if columns intersect
0: 		return doColumnsIntersect(modifiedCols, getReferencedColumns());
0: 	}
0: 
0: 	private void checkType(int type) throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			switch (type)
0: 			{
0: 			  case ENABLED:
0: 			  case DISABLED:
0: 			  case ALL:
0: 				break;
0: 			  default:
0: 				SanityManager.THROWASSERT("constraint type "+type+" is invalid");
0: 			}
0: 		}
0: 	}
0: 		
0: }
============================================================================