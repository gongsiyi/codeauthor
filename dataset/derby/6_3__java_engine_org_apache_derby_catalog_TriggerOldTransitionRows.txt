1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.catalog.TriggerOldTransitionRows
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
46:eac0369: 
45:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.catalog;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.db.Factory;
1:eac0369: import org.apache.derby.iapi.db.TriggerExecutionContext;
1:2c65d7c: 
1:eac0369: import java.sql.Connection;
1:eac0369: import java.sql.Statement;
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.ResultSetMetaData;
1:eac0369: import java.sql.SQLException;
1:eac0369: import java.sql.SQLWarning;
1:eac0369: import java.math.BigDecimal;
1:eac0369: 
45:eac0369: /**
1:eac0369:  * Provides information about a set of rows before a trigger action
1:eac0369:  * changed them.
44:eac0369:  * 
1:eac0369:  *
1:eac0369:  * <p>
1:eac0369:  * This class implements only JDBC 1.2, not JDBC 2.0.  You cannot
1:eac0369:  * compile this class with JDK1.2, since it implements only the
1:eac0369:  * JDBC 1.2 ResultSet interface and not the JDBC 2.0 ResultSet
1:eac0369:  * interface.  You can only use this class in a JDK 1.2 runtime 
1:eac0369:  * environment if no JDBC 2.0 calls are made against it.
1:eac0369:  *
1:eac0369:  */
1:2c65d7c: public class TriggerOldTransitionRows extends org.apache.derby.vti.UpdatableVTITemplate
2:eac0369: {
1:eac0369: 
1:eac0369: 	private ResultSet resultSet;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Construct a VTI on the trigger's old row set.
1:eac0369: 	 * The old row set is the before image of the rows
1:eac0369: 	 * that are changed by the trigger.  For a trigger
1:eac0369: 	 * on a delete, this is all the rows that are deleted.	
1:eac0369: 	 * For a trigger on an update, this is the rows before
1:eac0369: 	 * they are updated.  For an insert, this throws an 
1:eac0369: 	 * exception.
1:eac0369: 	 *
1:eac0369: 	 * @exception SQLException thrown if no trigger active
1:eac0369: 	 */
1:eac0369: 	public TriggerOldTransitionRows() throws SQLException
1:eac0369: 	{
1:c7e05da: 		initializeResultSet();
1:c7e05da: 	}
1:c7e05da: 
1:c7e05da: 	private ResultSet initializeResultSet() throws SQLException {
1:c7e05da: 		if (resultSet != null)
1:c7e05da: 			resultSet.close();
1:c7e05da: 		
1:eac0369: 		TriggerExecutionContext tec = Factory.getTriggerExecutionContext();
1:eac0369: 		if (tec == null)
1:eac0369: 		{
1:eac0369: 			throw new SQLException("There are no active triggers", "38000");
45:eac0369: 		}
1:eac0369: 		resultSet = tec.getOldRowSet();
1:eac0369: 
1:eac0369: 		if (resultSet == null)
1:eac0369: 		{
1:eac0369: 			throw new SQLException("There is no old transition rows result set for this trigger", "38000");
1:eac0369: 		}
1:c7e05da: 		return resultSet;
1:c7e05da: 	}  
1:2c65d7c: 
1:c7e05da:        public ResultSet executeQuery() throws SQLException {
1:c7e05da:     	   //DERBY-4095. Need to reinititialize ResultSet on 
1:c7e05da:            //executeQuery, in case it was closed in a NESTEDLOOP join.
1:c7e05da:            return initializeResultSet();
1:2c65d7c:        }
1:eac0369:         
1:2c65d7c:        public int getResultSetConcurrency() {
1:1e8a20f:             return ResultSet.CONCUR_READ_ONLY;
1:2c65d7c:        }
1:2c65d7c:        public void close() throws SQLException {
1:2c65d7c:            resultSet.close();
1:2c65d7c:        }
1:eac0369: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c7e05da
/////////////////////////////////////////////////////////////////////////
1: 		initializeResultSet();
1: 	}
1: 
1: 	private ResultSet initializeResultSet() throws SQLException {
1: 		if (resultSet != null)
1: 			resultSet.close();
1: 		
/////////////////////////////////////////////////////////////////////////
1: 		return resultSet;
1: 	}  
1:        public ResultSet executeQuery() throws SQLException {
1:     	   //DERBY-4095. Need to reinititialize ResultSet on 
1:            //executeQuery, in case it was closed in a NESTEDLOOP join.
1:            return initializeResultSet();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1e8a20f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return ResultSet.CONCUR_READ_ONLY;
commit:2c65d7c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.JDBC20Translation;
1: 
/////////////////////////////////////////////////////////////////////////
1: public class TriggerOldTransitionRows extends org.apache.derby.vti.UpdatableVTITemplate
/////////////////////////////////////////////////////////////////////////
0:        public ResultSet executeQuery() {
0:            return resultSet;
1:        }
1:         
1:        public int getResultSetConcurrency() {
0:             return JDBC20Translation.CONCUR_READ_ONLY;
1:        }
1:        public void close() throws SQLException {
1:            resultSet.close();
1:        }
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.catalog.TriggerOldTransitionRows
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:bff3c2e
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.catalog;
1: 
1: import org.apache.derby.iapi.db.Factory;
1: import org.apache.derby.iapi.db.TriggerExecutionContext;
0: import java.sql.DriverManager;
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.SQLWarning;
1: import java.math.BigDecimal;
1: 
1: /**
1:  * Provides information about a set of rows before a trigger action
1:  * changed them.
1:  * 
1:  *
1:  * <p>
1:  * This class implements only JDBC 1.2, not JDBC 2.0.  You cannot
1:  * compile this class with JDK1.2, since it implements only the
1:  * JDBC 1.2 ResultSet interface and not the JDBC 2.0 ResultSet
1:  * interface.  You can only use this class in a JDK 1.2 runtime 
1:  * environment if no JDBC 2.0 calls are made against it.
1:  *
0:  * @author jamie
1:  */
0: public class TriggerOldTransitionRows extends org.apache.derby.vti.VTITemplate
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	private ResultSet resultSet;
1: 
1: 	/**
1: 	 * Construct a VTI on the trigger's old row set.
1: 	 * The old row set is the before image of the rows
1: 	 * that are changed by the trigger.  For a trigger
1: 	 * on a delete, this is all the rows that are deleted.	
1: 	 * For a trigger on an update, this is the rows before
1: 	 * they are updated.  For an insert, this throws an 
1: 	 * exception.
1: 	 *
1: 	 * @exception SQLException thrown if no trigger active
1: 	 */
1: 	public TriggerOldTransitionRows() throws SQLException
1: 	{
1: 		TriggerExecutionContext tec = Factory.getTriggerExecutionContext();
1: 		if (tec == null)
1: 		{
1: 			throw new SQLException("There are no active triggers", "38000");
1: 		}
1: 		resultSet = tec.getOldRowSet();
1: 
1: 		if (resultSet == null)
1: 		{
1: 			throw new SQLException("There is no old transition rows result set for this trigger", "38000");
1: 		}
1:     }  
1: 
1: 	/**
0: 	 * Provide the metadata for VTI interface.
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	static public ResultSetMetaData getResultSetMetaData() throws SQLException
1: 	{
0: 		throw new SQLException("getResultSetMetaData() should not be called", "38000");
1:     }
1: 
0:     //
0:     // java.sql.ResultSet calls, passed through to our result set.
0:     //
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public boolean next() throws SQLException {
0:         return resultSet.next();
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public void close() throws SQLException {
0:         resultSet.close();
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public boolean wasNull() throws SQLException {
0:         return resultSet.wasNull();
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public String getString(int columnIndex) throws SQLException {
0:         return resultSet.getString(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public boolean getBoolean(int columnIndex) throws SQLException {
0:         return resultSet.getBoolean(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public byte getByte(int columnIndex) throws SQLException {
0:         return resultSet.getByte(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public short getShort(int columnIndex) throws SQLException {
0:         return resultSet.getShort(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public int getInt(int columnIndex) throws SQLException {
0:         return resultSet.getInt(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public long getLong(int columnIndex) throws SQLException {
0:         return resultSet.getLong(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public float getFloat(int columnIndex) throws SQLException {
0:         return resultSet.getFloat(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public double getDouble(int columnIndex) throws SQLException {
0:         return resultSet.getDouble(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
0:         return resultSet.getBigDecimal(columnIndex,scale);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public byte[] getBytes(int columnIndex) throws SQLException {
0:         return resultSet.getBytes(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Date getDate(int columnIndex) throws SQLException {
0:         return resultSet.getDate(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Time getTime(int columnIndex) throws SQLException {
0:         return resultSet.getTime(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException {
0:         return resultSet.getTimestamp(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getAsciiStream(int columnIndex) throws SQLException {
0:         return resultSet.getAsciiStream(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException {
0:         return resultSet.getUnicodeStream(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getBinaryStream(int columnIndex)
0:         throws SQLException {
0:             return resultSet.getBinaryStream(columnIndex);
1:             }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public String getString(String columnName) throws SQLException {
0:         return resultSet.getString(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public boolean getBoolean(String columnName) throws SQLException {
0:         return resultSet.getBoolean(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public byte getByte(String columnName) throws SQLException {
0:         return resultSet.getByte(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public short getShort(String columnName) throws SQLException {
0:         return resultSet.getShort(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public int getInt(String columnName) throws SQLException {
0:         return resultSet.getInt(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public long getLong(String columnName) throws SQLException {
0:         return resultSet.getLong(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public float getFloat(String columnName) throws SQLException {
0:         return resultSet.getFloat(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public double getDouble(String columnName) throws SQLException {
0:         return resultSet.getDouble(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {
0:         return resultSet.getBigDecimal(columnName,scale);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public byte[] getBytes(String columnName) throws SQLException {
0:         return resultSet.getBytes(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Date getDate(String columnName) throws SQLException {
0:         return resultSet.getDate(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Time getTime(String columnName) throws SQLException {
0:         return resultSet.getTime(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Timestamp getTimestamp(String columnName) throws SQLException {
0:         return resultSet.getTimestamp(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getAsciiStream(String columnName) throws SQLException {
0:         return resultSet.getAsciiStream(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getUnicodeStream(String columnName) throws SQLException {
0:         return resultSet.getUnicodeStream(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getBinaryStream(String columnName)
0:         throws SQLException {
0:         return resultSet.getBinaryStream(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public SQLWarning getWarnings() throws SQLException {
0:         return resultSet.getWarnings();
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public void clearWarnings() throws SQLException {
0:         resultSet.clearWarnings();
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public String getCursorName() throws SQLException {
0:         return resultSet.getCursorName();
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public ResultSetMetaData getMetaData() throws SQLException {
0:         return resultSet.getMetaData();
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public Object getObject(int columnIndex) throws SQLException {
0:         return resultSet.getObject(columnIndex);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public Object getObject(String columnName) throws SQLException {
0:         return resultSet.getObject(columnName);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
1: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:    public int findColumn(String columnName) throws SQLException {
0:         return resultSet.findColumn(columnName);
1:     }
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.catalog;
0: 
0: import org.apache.derby.iapi.db.Factory;
0: import org.apache.derby.iapi.db.TriggerExecutionContext;
0: import java.sql.DriverManager;
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
0: import java.math.BigDecimal;
0: 
0: /**
0:  * Provides information about a set of rows before a trigger action
0:  * changed them.
0:  * 
0:  *
0:  * <p>
0:  * This class implements only JDBC 1.2, not JDBC 2.0.  You cannot
0:  * compile this class with JDK1.2, since it implements only the
0:  * JDBC 1.2 ResultSet interface and not the JDBC 2.0 ResultSet
0:  * interface.  You can only use this class in a JDK 1.2 runtime 
0:  * environment if no JDBC 2.0 calls are made against it.
0:  *
0:  * @author jamie
0:  */
0: public class TriggerOldTransitionRows extends org.apache.derby.vti.VTITemplate
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	private ResultSet resultSet;
0: 
0: 	/**
0: 	 * Construct a VTI on the trigger's old row set.
0: 	 * The old row set is the before image of the rows
0: 	 * that are changed by the trigger.  For a trigger
0: 	 * on a delete, this is all the rows that are deleted.	
0: 	 * For a trigger on an update, this is the rows before
0: 	 * they are updated.  For an insert, this throws an 
0: 	 * exception.
0: 	 *
0: 	 * @exception SQLException thrown if no trigger active
0: 	 */
0: 	public TriggerOldTransitionRows() throws SQLException
0: 	{
0: 		TriggerExecutionContext tec = Factory.getTriggerExecutionContext();
0: 		if (tec == null)
0: 		{
0: 			throw new SQLException("There are no active triggers", "38000");
0: 		}
0: 		resultSet = tec.getOldRowSet();
0: 
0: 		if (resultSet == null)
0: 		{
0: 			throw new SQLException("There is no old transition rows result set for this trigger", "38000");
0: 		}
0:     }  
0: 
0: 	/**
0: 	 * Provide the metadata for VTI interface.
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	static public ResultSetMetaData getResultSetMetaData() throws SQLException
0: 	{
0: 		throw new SQLException("getResultSetMetaData() should not be called", "38000");
0:     }
0: 
0:     //
0:     // java.sql.ResultSet calls, passed through to our result set.
0:     //
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public boolean next() throws SQLException {
0:         return resultSet.next();
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public void close() throws SQLException {
0:         resultSet.close();
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public boolean wasNull() throws SQLException {
0:         return resultSet.wasNull();
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public String getString(int columnIndex) throws SQLException {
0:         return resultSet.getString(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public boolean getBoolean(int columnIndex) throws SQLException {
0:         return resultSet.getBoolean(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public byte getByte(int columnIndex) throws SQLException {
0:         return resultSet.getByte(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public short getShort(int columnIndex) throws SQLException {
0:         return resultSet.getShort(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public int getInt(int columnIndex) throws SQLException {
0:         return resultSet.getInt(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public long getLong(int columnIndex) throws SQLException {
0:         return resultSet.getLong(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public float getFloat(int columnIndex) throws SQLException {
0:         return resultSet.getFloat(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public double getDouble(int columnIndex) throws SQLException {
0:         return resultSet.getDouble(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
0:         return resultSet.getBigDecimal(columnIndex,scale);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public byte[] getBytes(int columnIndex) throws SQLException {
0:         return resultSet.getBytes(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Date getDate(int columnIndex) throws SQLException {
0:         return resultSet.getDate(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Time getTime(int columnIndex) throws SQLException {
0:         return resultSet.getTime(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException {
0:         return resultSet.getTimestamp(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getAsciiStream(int columnIndex) throws SQLException {
0:         return resultSet.getAsciiStream(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException {
0:         return resultSet.getUnicodeStream(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getBinaryStream(int columnIndex)
0:         throws SQLException {
0:             return resultSet.getBinaryStream(columnIndex);
0:             }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public String getString(String columnName) throws SQLException {
0:         return resultSet.getString(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public boolean getBoolean(String columnName) throws SQLException {
0:         return resultSet.getBoolean(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public byte getByte(String columnName) throws SQLException {
0:         return resultSet.getByte(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public short getShort(String columnName) throws SQLException {
0:         return resultSet.getShort(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public int getInt(String columnName) throws SQLException {
0:         return resultSet.getInt(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public long getLong(String columnName) throws SQLException {
0:         return resultSet.getLong(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public float getFloat(String columnName) throws SQLException {
0:         return resultSet.getFloat(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public double getDouble(String columnName) throws SQLException {
0:         return resultSet.getDouble(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {
0:         return resultSet.getBigDecimal(columnName,scale);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public byte[] getBytes(String columnName) throws SQLException {
0:         return resultSet.getBytes(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Date getDate(String columnName) throws SQLException {
0:         return resultSet.getDate(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Time getTime(String columnName) throws SQLException {
0:         return resultSet.getTime(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Timestamp getTimestamp(String columnName) throws SQLException {
0:         return resultSet.getTimestamp(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getAsciiStream(String columnName) throws SQLException {
0:         return resultSet.getAsciiStream(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getUnicodeStream(String columnName) throws SQLException {
0:         return resultSet.getUnicodeStream(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getBinaryStream(String columnName)
0:         throws SQLException {
0:         return resultSet.getBinaryStream(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public SQLWarning getWarnings() throws SQLException {
0:         return resultSet.getWarnings();
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public void clearWarnings() throws SQLException {
0:         resultSet.clearWarnings();
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public String getCursorName() throws SQLException {
0:         return resultSet.getCursorName();
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public ResultSetMetaData getMetaData() throws SQLException {
0:         return resultSet.getMetaData();
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public Object getObject(int columnIndex) throws SQLException {
0:         return resultSet.getObject(columnIndex);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public Object getObject(String columnName) throws SQLException {
0:         return resultSet.getObject(columnName);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:    public int findColumn(String columnName) throws SQLException {
0:         return resultSet.findColumn(columnName);
0:     }
0: 
0: }
============================================================================