1:bb40bcb: /*
1:bb40bcb: 
1:98c7520:    Derby - Class org.apache.derby.iapi.sql.dictionary.PermDescriptor
1:bb40bcb: 
1:bb40bcb:    Licensed to the Apache Software Foundation (ASF) under one or more
1:bb40bcb:    contributor license agreements.  See the NOTICE file distributed with
1:bb40bcb:    this work for additional information regarding copyright ownership.
1:bb40bcb:    The ASF licenses this file to you under the Apache License, Version 2.0
1:bb40bcb:    (the "License"); you may not use this file except in compliance with
1:bb40bcb:    the License.  You may obtain a copy of the License at
1:bb40bcb: 
1:bb40bcb:       http://www.apache.org/licenses/LICENSE-2.0
1:bb40bcb: 
1:bb40bcb:    Unless required by applicable law or agreed to in writing, software
1:bb40bcb:    distributed under the License is distributed on an "AS IS" BASIS,
1:bb40bcb:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bb40bcb:    See the License for the specific language governing permissions and
1:bb40bcb:    limitations under the License.
1:bb40bcb: 
1:bb40bcb:  */
1:bb40bcb: 
1:bb40bcb: package org.apache.derby.iapi.sql.dictionary;
1:bb40bcb: 
1:bb40bcb: import org.apache.derby.catalog.UUID;
1:bb40bcb: import org.apache.derby.catalog.DependableFinder;
1:bb40bcb: import org.apache.derby.catalog.Dependable;
1:bb40bcb: import org.apache.derby.iapi.error.StandardException;
1:98c7520: import org.apache.derby.iapi.reference.SQLState;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:bb40bcb: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:bb40bcb: import org.apache.derby.iapi.sql.depend.Provider;
1:bb40bcb: 
1:bb40bcb: /**
1:bb40bcb:  * This class describes rows in the SYS.SYSPERMS system table, which keeps track of the
1:bb40bcb:  * permissions that have been granted but not revoked.
1:bb40bcb:  */
1:bb40bcb: public class PermDescriptor extends PermissionsDescriptor
1:98c7520:         implements Provider
1:98c7520: {
1:98c7520:     // object types
1:98c7520:     public static final String SEQUENCE_TYPE = "SEQUENCE";
1:98c7520:     public static final String UDT_TYPE = "TYPE";
1:22d64f5:     public static final String AGGREGATE_TYPE = "DERBY AGGREGATE";
1:98c7520: 
1:98c7520:     // permissions
1:98c7520:     public static final String USAGE_PRIV = "USAGE";
1:98c7520: 
1:98c7520:     // state
1:98c7520:     
1:bb40bcb:     private String objectType;
1:bb40bcb:     private UUID permObjectId;
1:bb40bcb:     private String permission;
1:bb40bcb:     private boolean grantable;
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Constructor
1:bb40bcb:      *
1:bb40bcb:      * @param dataDictionary data dictionary
1:98c7520:      * @param permUUID       unique identification in time and space of this perm descriptor
1:98c7520:      * @param objectType     E.g., SEQUENCE_TYPE
1:98c7520:      * @param permObjectId   Unique id of the object being protected
1:98c7520:      * @param permission     E.g., USAGE_PRIV
1:98c7520:      * @param grantor        Authorization id which confers the privilege
1:98c7520:      * @param grantee        Authorization id which receives the privilege
1:98c7520:      * @param isGrantable    True if the privilege can be granted onwards
1:bb40bcb:      */
1:bb40bcb: 
1:bb40bcb:     public PermDescriptor(DataDictionary dataDictionary, UUID permUUID, String objectType,
1:bb40bcb:                           UUID permObjectId, String permission, String grantor,
1:bb40bcb:                           String grantee, boolean isGrantable) {
1:bb40bcb:         super(dataDictionary, grantee, grantor);
1:bb40bcb:         setUUID(permUUID);
1:bb40bcb:         this.objectType = objectType;
1:bb40bcb:         this.permObjectId = permObjectId;
1:bb40bcb:         this.permission = permission;
1:bb40bcb:         this.grantable = isGrantable;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public PermDescriptor(DataDictionary dd, UUID permUUID)
1:bb40bcb:             throws StandardException {
1:bb40bcb:         /*
1:bb40bcb:     TODO When merging all permisions catalogs to this master catalog at a future date,
1:bb40bcb:     this pattern which uses a partially initialised key descriptor should be cleaned up.
1:bb40bcb:      */
1:bb40bcb:         this(dd, permUUID, null, null, null, null, null, false);
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public String getObjectType() {
1:bb40bcb:         return objectType;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public UUID getPermObjectId() {
1:bb40bcb:         return permObjectId;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public String getPermission() {
1:bb40bcb:         return permission;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public boolean isGrantable() {
1:bb40bcb:         return grantable;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public int getCatalogNumber() {
1:bb40bcb:         return DataDictionary.SYSPERMS_CATALOG_NUM;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public String toString() {
1:bb40bcb:         if (SanityManager.DEBUG) {
1:bb40bcb:             return "permUUID: " + oid + "\n" +
1:bb40bcb:                     "objectType: " + objectType + "\n" +
1:bb40bcb:                     "permObjectId: " + permObjectId + "\n" +
1:bb40bcb:                     "permission: " + permission + "\n" +
1:bb40bcb:                     "grantable: " + grantable + "\n";
2:bb40bcb:         } else {
1:bb40bcb:             return "";
1:bb40bcb:         }
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * @return true iff the key part of this perm descriptor equals the key part of another perm
1:bb40bcb:      *         descriptor.
1:bb40bcb:      */
1:bb40bcb:     public boolean equals(Object other) {
1:bb40bcb:         if (!(other instanceof PermDescriptor))
2:bb40bcb:             return false;
1:bb40bcb:         PermDescriptor otherPerm = (PermDescriptor) other;
1:bb40bcb:         return super.keyEquals(otherPerm) &&
1:98c7520:                 permObjectId.equals(otherPerm.permObjectId);
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * @return the hashCode for the key part of this permissions descriptor
1:bb40bcb:      */
1:bb40bcb:     public int hashCode() {
1:98c7520:         return super.keyHashCode() + permObjectId.hashCode();
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * @see PermissionsDescriptor#checkOwner
1:bb40bcb:      */
1:98c7520:     public boolean checkOwner( String authorizationId ) throws StandardException
1:98c7520:     {
1:98c7520:         DataDictionary dd = getDataDictionary();
1:98c7520:         PrivilegedSQLObject pso = getProtectedObject( dd, permObjectId, objectType );
1:98c7520:         
1:98c7520:         return pso.getSchemaDescriptor().getAuthorizationId().equals(authorizationId);
1:98c7520:     }
1:98c7520: 
1:98c7520:     /**
1:98c7520:      * Get the protected object.
1:98c7520:      *
1:98c7520:      * @param dd Metadata
1:98c7520:      * @param objectID Unique handle on the protected object
1:98c7520:      * @param objectType Type of the object
1:98c7520:      */
1:98c7520:     public static PrivilegedSQLObject getProtectedObject
1:98c7520:         ( DataDictionary dd, UUID objectID, String objectType ) throws StandardException
1:98c7520:     {
1:98c7520:         if ( PermDescriptor.SEQUENCE_TYPE.equals( objectType ) )
1:98c7520:         {
1:98c7520:             return dd.getSequenceDescriptor( objectID );
1:98c7520:         }
1:f3c6217:         else if ( PermDescriptor.AGGREGATE_TYPE.equals( objectType ) )
1:f3c6217:         {
1:f3c6217:             return dd.getAliasDescriptor( objectID );
1:f3c6217:         }
1:98c7520:         else if ( PermDescriptor.UDT_TYPE.equals( objectType ) )
1:98c7520:         {
1:98c7520:             return dd.getAliasDescriptor( objectID );
1:98c7520:         }
1:98c7520:         else
1:98c7520:         {
1:98c7520:             // oops, still need to implement support for this kind
1:98c7520:             // of privileged object
1:98c7520:             throw StandardException.newException( SQLState.BTREE_UNIMPLEMENTED_FEATURE );
1:bb40bcb:         }
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     //////////////////////////////////////////////
1:bb40bcb:     //
1:bb40bcb:     // PROVIDER INTERFACE
1:bb40bcb:     //
1:bb40bcb:     //////////////////////////////////////////////
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Return the name of this Provider.  (Useful for errors.)
1:bb40bcb:      *
1:bb40bcb:      * @return String   The name of this provider.
1:bb40bcb:      */
1:98c7520:     public String getObjectName()
1:98c7520:     {
1:98c7520:         try {
1:98c7520:             DataDictionary dd = getDataDictionary();
1:98c7520:             PrivilegedSQLObject pso = getProtectedObject( dd, permObjectId, objectType );
1:98c7520:         
1:98c7520:             return pso.getName();
1:98c7520:         } catch (StandardException se) { return objectType; }
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Get the provider's type.
1:bb40bcb:      *
1:bb40bcb:      * @return char         The provider's type.
1:bb40bcb:      */
1:bb40bcb:     public String getClassType() {
1:bb40bcb:         return Dependable.PERM;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * @return the stored form of this provider
1:bb40bcb:      * @see Dependable#getDependableFinder
1:bb40bcb:      */
1:bb40bcb:     public DependableFinder getDependableFinder() {
1:999e32a:         return getDependableFinder(
1:999e32a:                 StoredFormatIds.PERM_DESCRIPTOR_FINDER_V01_ID);
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f3c6217
/////////////////////////////////////////////////////////////////////////
1:         else if ( PermDescriptor.AGGREGATE_TYPE.equals( objectType ) )
1:         {
1:             return dd.getAliasDescriptor( objectID );
1:         }
commit:22d64f5
/////////////////////////////////////////////////////////////////////////
1:     public static final String AGGREGATE_TYPE = "DERBY AGGREGATE";
commit:98c7520
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.PermDescriptor
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.sql.dictionary.PrivilegedSQLObject;
1:         implements Provider
1: {
1:     // object types
1:     public static final String SEQUENCE_TYPE = "SEQUENCE";
1:     public static final String UDT_TYPE = "TYPE";
1: 
1:     // permissions
1:     public static final String USAGE_PRIV = "USAGE";
1: 
1:     // state
1:     
/////////////////////////////////////////////////////////////////////////
1:      * @param permUUID       unique identification in time and space of this perm descriptor
1:      * @param objectType     E.g., SEQUENCE_TYPE
1:      * @param permObjectId   Unique id of the object being protected
1:      * @param permission     E.g., USAGE_PRIV
1:      * @param grantor        Authorization id which confers the privilege
1:      * @param grantee        Authorization id which receives the privilege
1:      * @param isGrantable    True if the privilege can be granted onwards
/////////////////////////////////////////////////////////////////////////
1:                 permObjectId.equals(otherPerm.permObjectId);
1:         return super.keyHashCode() + permObjectId.hashCode();
1:     public boolean checkOwner( String authorizationId ) throws StandardException
1:     {
1:         DataDictionary dd = getDataDictionary();
1:         PrivilegedSQLObject pso = getProtectedObject( dd, permObjectId, objectType );
1:         
1:         return pso.getSchemaDescriptor().getAuthorizationId().equals(authorizationId);
1:     }
1: 
1:     /**
1:      * Get the protected object.
1:      *
1:      * @param dd Metadata
1:      * @param objectID Unique handle on the protected object
1:      * @param objectType Type of the object
1:      */
1:     public static PrivilegedSQLObject getProtectedObject
1:         ( DataDictionary dd, UUID objectID, String objectType ) throws StandardException
1:     {
1:         if ( PermDescriptor.SEQUENCE_TYPE.equals( objectType ) )
1:         {
1:             return dd.getSequenceDescriptor( objectID );
1:         }
1:         else if ( PermDescriptor.UDT_TYPE.equals( objectType ) )
1:         {
1:             return dd.getAliasDescriptor( objectID );
1:         }
1:         else
1:         {
1:             // oops, still need to implement support for this kind
1:             // of privileged object
1:             throw StandardException.newException( SQLState.BTREE_UNIMPLEMENTED_FEATURE );
/////////////////////////////////////////////////////////////////////////
1:     public String getObjectName()
1:     {
1:         try {
1:             DataDictionary dd = getDataDictionary();
1:             PrivilegedSQLObject pso = getProtectedObject( dd, permObjectId, objectType );
1:         
1:             return pso.getName();
1:         } catch (StandardException se) { return objectType; }
commit:bb40bcb
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.iapi.sql.dictionary.SequenceDescriptor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.catalog.DependableFinder;
1: import org.apache.derby.catalog.Dependable;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.sql.depend.Provider;
0: import org.apache.derby.impl.sql.catalog.DDdependableFinder;
1: 
1: /**
1:  * This class describes rows in the SYS.SYSPERMS system table, which keeps track of the
1:  * permissions that have been granted but not revoked.
1:  */
1: public class PermDescriptor extends PermissionsDescriptor
0:         implements Provider {
1:     private String objectType;
1:     private UUID permObjectId;
1:     private String permission;
1:     private boolean grantable;
1: 
1:     /**
1:      * Constructor
1:      *
1:      * @param dataDictionary data dictionary
0:      * @param permUUID       unique identification in time and space of this perm
0:      *                       descriptor
1:      */
1: 
1:     public PermDescriptor(DataDictionary dataDictionary, UUID permUUID, String objectType,
1:                           UUID permObjectId, String permission, String grantor,
1:                           String grantee, boolean isGrantable) {
1:         super(dataDictionary, grantee, grantor);
1:         setUUID(permUUID);
1:         this.objectType = objectType;
1:         this.permObjectId = permObjectId;
1:         this.permission = permission;
1:         this.grantable = isGrantable;
1:     }
1: 
1:     public PermDescriptor(DataDictionary dd, UUID permUUID)
1:             throws StandardException {
1:         /*
1:     TODO When merging all permisions catalogs to this master catalog at a future date,
1:     this pattern which uses a partially initialised key descriptor should be cleaned up.
1:      */
1:         this(dd, permUUID, null, null, null, null, null, false);
1:     }
1: 
1:     public String getObjectType() {
1:         return objectType;
1:     }
1: 
1:     public UUID getPermObjectId() {
1:         return permObjectId;
1:     }
1: 
1:     public String getPermission() {
1:         return permission;
1:     }
1: 
1:     public boolean isGrantable() {
1:         return grantable;
1:     }
1: 
1:     public int getCatalogNumber() {
1:         return DataDictionary.SYSPERMS_CATALOG_NUM;
1:     }
1: 
1:     public String toString() {
1:         if (SanityManager.DEBUG) {
1:             return "permUUID: " + oid + "\n" +
1:                     "objectType: " + objectType + "\n" +
1:                     "permObjectId: " + permObjectId + "\n" +
1:                     "permission: " + permission + "\n" +
1:                     "grantable: " + grantable + "\n";
1:         } else {
1:             return "";
1:         }
1:     }
1: 
1:     /**
1:      * @return true iff the key part of this perm descriptor equals the key part of another perm
1:      *         descriptor.
1:      */
1:     public boolean equals(Object other) {
1:         if (!(other instanceof PermDescriptor))
1:             return false;
1:         PermDescriptor otherPerm = (PermDescriptor) other;
1:         return super.keyEquals(otherPerm) &&
0:                 oid.equals(otherPerm.oid);
1:     }
1: 
1:     /**
1:      * @return the hashCode for the key part of this permissions descriptor
1:      */
1:     public int hashCode() {
0:         return super.keyHashCode() + oid.hashCode();
1:     }
1: 
1:     /**
1:      * @see PermissionsDescriptor#checkOwner
1:      */
0:     public boolean checkOwner(String authorizationId) throws StandardException {
0:         UUID sd = getDataDictionary().getAliasDescriptor(oid).getSchemaUUID();
0:         if (getDataDictionary().getSchemaDescriptor(sd, null).getAuthorizationId()
0:                 .equals(authorizationId)) {
0:             return true;
1:         } else {
1:             return false;
1:         }
1:     }
1: 
1:     //////////////////////////////////////////////
1:     //
1:     // PROVIDER INTERFACE
1:     //
1:     //////////////////////////////////////////////
1: 
1:     /**
1:      * Return the name of this Provider.  (Useful for errors.)
1:      *
1:      * @return String   The name of this provider.
1:      */
0:     public String getObjectName() {
0:         return permission + "privilege on " + objectType;
1:     }
1: 
1:     /**
1:      * Get the provider's type.
1:      *
1:      * @return char         The provider's type.
1:      */
1:     public String getClassType() {
1:         return Dependable.PERM;
1:     }
1: 
1:     /**
1:      * @return the stored form of this provider
1:      * @see Dependable#getDependableFinder
1:      */
1:     public DependableFinder getDependableFinder() {
0:         return new DDdependableFinder(StoredFormatIds.PERM_DESCRIPTOR_FINDER_V01_ID);
1:     }
1: 
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:999e32a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return getDependableFinder(
1:                 StoredFormatIds.PERM_DESCRIPTOR_FINDER_V01_ID);
============================================================================