1:ad0c80a: /**
1:ad0c80a:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.FloatTypesTest
1:ad0c80a:  *
1:ad0c80a:  * Licensed to the Apache Software Foundation (ASF) under one
1:ad0c80a:  * or more contributor license agreements.  See the NOTICE file
1:ad0c80a:  * distributed with this work for additional information
1:ad0c80a:  * regarding copyright ownership.  The ASF licenses this file
1:ad0c80a:  * to you under the Apache License, Version 2.0 (the
1:ad0c80a:  * "License"); you may not use this file except in compliance
1:ad0c80a:  * with the License.  You may obtain a copy of the License at
1:ad0c80a:  *
1:ad0c80a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ad0c80a:  *
1:ad0c80a:  * Unless required by applicable law or agreed to in writing,
1:ad0c80a:  * software distributed under the License is distributed on an
1:ad0c80a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ad0c80a:  * KIND, either express or implied.  See the License for the
1:ad0c80a:  * specific language governing permissions and limitations
1:ad0c80a:  * under the License.
1:ad0c80a:  */
1:ad0c80a: 
1:ad0c80a: package org.apache.derbyTesting.functionTests.tests.lang;
1:ad0c80a: 
1:ad0c80a: import java.sql.PreparedStatement;
1:ad0c80a: import java.sql.SQLException;
1:ad0c80a: import junit.framework.Test;
1:ad0c80a: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:ad0c80a: import org.apache.derbyTesting.junit.JDBC;
1:ad0c80a: import org.apache.derbyTesting.junit.TestConfiguration;
1:ad0c80a: 
1:ad0c80a: /**
1:ad0c80a:  * Test floating point data types.
1:ad0c80a:  */
1:ad0c80a: public class FloatTypesTest extends BaseJDBCTestCase {
1:ad0c80a: 
1:ad0c80a:     public FloatTypesTest(String name) {
1:ad0c80a:         super(name);
1:ad0c80a:     }
1:ad0c80a: 
1:ad0c80a:     public static Test suite() {
1:ad0c80a:         return TestConfiguration.defaultSuite(FloatTypesTest.class);
1:ad0c80a:     }
1:ad0c80a: 
1:ad0c80a:     /**
1:ad0c80a:      * Test that normalization of negative zero to positive zero works for
1:ad0c80a:      * floats. In some JVMs this used to give wrong results after runtime
1:ad0c80a:      * optimization. See DERBY-2447 and
1:ad0c80a:      * <a href="http://bugs.sun.com/view_bug.do?bug_id=6833879">CR6833879</a>
1:ad0c80a:      * in Sun's bug database.
1:ad0c80a:      */
1:ad0c80a:     public void testNegativeZeroFloatJvmBug() throws SQLException {
1:ad0c80a:         PreparedStatement ps = prepareStatement("values -cast(? as real)");
1:ad0c80a:         ps.setFloat(1, 0.0f);
1:ad0c80a:         // Execute the statement many times so that the JVM is likely to
1:ad0c80a:         // produce native, optimized code.
1:ad0c80a:         for (int i = 0; i < 7000; i++) {
1:ad0c80a:             JDBC.assertSingleValueResultSet(ps.executeQuery(), "0.0");
1:ad0c80a:         }
1:ad0c80a:     }
1:ad0c80a: 
1:ad0c80a:     /**
1:ad0c80a:      * Test that normalization of negative zero to positive zero works for
1:ad0c80a:      * doubles. In some JVMs this used to give wrong results after runtime
1:ad0c80a:      * optimization. See DERBY-2447 and
1:ad0c80a:      * <a href="http://bugs.sun.com/view_bug.do?bug_id=6833879">CR6833879</a>
1:ad0c80a:      * in Sun's bug database.
1:ad0c80a:      */
1:ad0c80a:     public void testNegativeZeroDoubleJvmBug() throws SQLException {
1:ad0c80a:         PreparedStatement ps = prepareStatement("values -cast(? as double)");
1:ad0c80a:         ps.setDouble(1, 0.0d);
1:ad0c80a:         // Execute the statement many times so that the JVM is likely to
1:ad0c80a:         // produce native, optimized code.
1:ad0c80a:         for (int i = 0; i < 7000; i++) {
1:ad0c80a:             JDBC.assertSingleValueResultSet(ps.executeQuery(), "0.0");
1:ad0c80a:         }
1:ad0c80a:     }
1:ad0c80a: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ad0c80a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.FloatTypesTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test floating point data types.
1:  */
1: public class FloatTypesTest extends BaseJDBCTestCase {
1: 
1:     public FloatTypesTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         return TestConfiguration.defaultSuite(FloatTypesTest.class);
1:     }
1: 
1:     /**
1:      * Test that normalization of negative zero to positive zero works for
1:      * floats. In some JVMs this used to give wrong results after runtime
1:      * optimization. See DERBY-2447 and
1:      * <a href="http://bugs.sun.com/view_bug.do?bug_id=6833879">CR6833879</a>
1:      * in Sun's bug database.
1:      */
1:     public void testNegativeZeroFloatJvmBug() throws SQLException {
1:         PreparedStatement ps = prepareStatement("values -cast(? as real)");
1:         ps.setFloat(1, 0.0f);
1:         // Execute the statement many times so that the JVM is likely to
1:         // produce native, optimized code.
1:         for (int i = 0; i < 7000; i++) {
1:             JDBC.assertSingleValueResultSet(ps.executeQuery(), "0.0");
1:         }
1:     }
1: 
1:     /**
1:      * Test that normalization of negative zero to positive zero works for
1:      * doubles. In some JVMs this used to give wrong results after runtime
1:      * optimization. See DERBY-2447 and
1:      * <a href="http://bugs.sun.com/view_bug.do?bug_id=6833879">CR6833879</a>
1:      * in Sun's bug database.
1:      */
1:     public void testNegativeZeroDoubleJvmBug() throws SQLException {
1:         PreparedStatement ps = prepareStatement("values -cast(? as double)");
1:         ps.setDouble(1, 0.0d);
1:         // Execute the statement many times so that the JVM is likely to
1:         // produce native, optimized code.
1:         for (int i = 0; i < 7000; i++) {
1:             JDBC.assertSingleValueResultSet(ps.executeQuery(), "0.0");
1:         }
1:     }
1: }
============================================================================