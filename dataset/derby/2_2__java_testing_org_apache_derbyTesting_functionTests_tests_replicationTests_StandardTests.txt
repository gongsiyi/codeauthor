1:db8dae7: /*
1:db8dae7: 
1:db8dae7: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests
1:db8dae7: 
1:db8dae7: Licensed to the Apache Software Foundation (ASF) under one or more
1:db8dae7: contributor license agreements.  See the NOTICE file distributed with
1:db8dae7: this work for additional information regarding copyright ownership.
1:db8dae7: The ASF licenses this file to You under the Apache License, Version 2.0
1:db8dae7: (the "License"); you may not use this file except in compliance with
1:db8dae7: the License.  You may obtain a copy of the License at
1:db8dae7: 
1:db8dae7:    http://www.apache.org/licenses/LICENSE-2.0
1:db8dae7: 
1:db8dae7: Unless required by applicable law or agreed to in writing, software
1:db8dae7: distributed under the License is distributed on an "AS IS" BASIS,
1:db8dae7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db8dae7: See the License for the specific language governing permissions and
1:db8dae7: limitations under the License.
1:db8dae7: 
1:db8dae7: */
1:db8dae7: 
1:db8dae7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:db8dae7: 
1:db8dae7: import java.sql.SQLException;
1:db8dae7: import java.sql.Statement;
1:db8dae7: import junit.framework.Test;
1:db8dae7: import org.apache.derbyTesting.functionTests.suites.AllPackages;
1:db8dae7: import org.apache.derbyTesting.functionTests.suites.EncryptionSuite;
1:db8dae7: import org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest;
1:db8dae7: import org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest;
1:db8dae7: import org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest;
1:5d24c78: import org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest;
1:5d24c78: import org.apache.derbyTesting.functionTests.tests.lang.LangScripts;
1:db8dae7: import org.apache.derbyTesting.functionTests.tests.lang.SimpleTest;
1:db8dae7: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:db8dae7: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:db8dae7: import org.apache.derbyTesting.junit.TestConfiguration;
1:db8dae7: 
1:db8dae7: /**
1:db8dae7:  * Wrap some JUnit tests in TestConfiguration.existingServerSuite() to
1:db8dae7:  * run these tests against an already started server on a given host
1:db8dae7:  * using a given port.
1:db8dae7:  *
1:db8dae7:  * Initially used in testing replication functionality - DERBY-2872.
1:db8dae7:  */
1:db8dae7: 
1:db8dae7: public class StandardTests extends BaseJDBCTestCase
1:db8dae7: {
1:db8dae7:     
1:db8dae7:     /* Creates a new instance of StandardTests */
1:db8dae7:     public StandardTests(String testcaseName)
1:db8dae7:     {
1:db8dae7:         super(testcaseName);
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     /*
1:db8dae7:      * Template  which adds this class to the *existing server* suite.
1:db8dae7:      */
1:db8dae7:     /* BEGIN Template
1:db8dae7:     public static Test simpleTest(String serverHost, int serverPort)
1:db8dae7:     {
1:db8dae7:         Test t = TestConfiguration.existingServerSuite(SimpleTest.class,false,serverHost,serverPort);
1:db8dae7:         System.out.println("*** Done TestConfiguration.defaultExistingServerSuite(SimpleTest.class,false)");
1:db8dae7:         return t;
1:db8dae7:         
1:db8dae7:         // /* Common pattern as below, but since we do not need to decorate her, just skip. 
1:db8dae7:         CleanDatabaseTestSetup cdts = 
1:db8dae7:                 new CleanDatabaseTestSetup(t, 
1:db8dae7:                         true,// Use networkclient when running setUp/decorateSQL
1:db8dae7:                         serverHost,
1:db8dae7:                         serverPort
1:db8dae7:                     ) {
1:db8dae7:             public void decorateSQL(Statement s)
1:db8dae7:                     throws SQLException {
1:db8dae7:                 s.executeUpdate(".....");
1:db8dae7:                 .  
1:db8dae7:                 .  
1:db8dae7:                 }            
1:db8dae7:         };
1:db8dae7:         return cdts;
1:db8dae7:          //
1:db8dae7:     }
1:db8dae7:     END Template*/
1:db8dae7: 
1:db8dae7: 
1:db8dae7:      /*
1:db8dae7:       * Adds this class to the *existing server* suite.
1:db8dae7:       */
1:db8dae7:     public static Test simpleTest(String serverHost, int serverPort)
1:db8dae7:     {
1:db8dae7:         return TestConfiguration.existingServerSuite(SimpleTest.class,
1:db8dae7:                 false,serverHost,serverPort);
1:db8dae7:         // return DatabasePropertyTestSetup.setLockTimeouts(suite,3,3); ??
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     public static Test prepareStatementTest(String hostName, int portNo)
1:db8dae7:     {
1:db8dae7:         return TestConfiguration.existingServerSuite(PrepareStatementTest.class,
1:db8dae7:                 false,hostName, portNo);
1:db8dae7:     }
1:db8dae7: 
1:db8dae7:     public static Test ansiTrimTest(String serverHost, int serverPort)
1:db8dae7:     {
1:db8dae7:         Test t = TestConfiguration.existingServerSuite(AnsiTrimTest.class, false, // false: because adds clean/decorate below
1:db8dae7:                 serverHost,serverPort); 
1:db8dae7:         CleanDatabaseTestSetup cdts = 
1:db8dae7:                 new CleanDatabaseTestSetup(t, 
1:db8dae7:                         true,// Use networkclient when running setUp/decorateSQL
1:db8dae7:                         serverHost,
1:db8dae7:                         serverPort
1:db8dae7:                     ) 
1:db8dae7:         {
1:db8dae7:             public void decorateSQL(Statement s)
1:db8dae7:                     throws SQLException 
1:db8dae7:             {
1:db8dae7:                 AnsiTrimTest.decorate(s);
1:db8dae7:             }            
1:db8dae7:         };
1:db8dae7:         return cdts;
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     public static Test createTableFromQueryTest(String serverHost, int serverPort)
1:db8dae7:     {
1:db8dae7:         Test t = TestConfiguration.existingServerSuite(CreateTableFromQueryTest.class, false, // false: because adds clean/decorate below
1:db8dae7:                 serverHost,serverPort);
1:db8dae7:         CleanDatabaseTestSetup cdts = 
1:db8dae7:                 new CleanDatabaseTestSetup(t, 
1:db8dae7:                         true,// Use networkclient when running setUp/decorateSQL
1:db8dae7:                         serverHost,
1:db8dae7:                         serverPort
1:db8dae7:                     ) 
1:db8dae7:         {
1:db8dae7:             protected void decorateSQL(Statement stmt) 
1:db8dae7:                 throws SQLException
1:db8dae7:             {
1:db8dae7:                 CreateTableFromQueryTest.decorate(stmt);
1:db8dae7:             }
1:db8dae7:         };
1:db8dae7:         return cdts;
1:db8dae7:     }
1:db8dae7:     
1:5d24c78:     public static Test databaseClassLoadingTest(String hostName, int portNo)
1:5d24c78:     {
1:5d24c78:         return TestConfiguration.existingServerSuite(DatabaseClassLoadingTest.class,
1:5d24c78:                 false,hostName, portNo);
1:5d24c78:     }
1:5d24c78:     
1:5d24c78:     public static Test dynamicLikeOptimizationTest(String hostName, int portNo)
1:5d24c78:     {
1:5d24c78:         System.out.println("********* FIXME!");return null;
1:5d24c78:         /* factor out DynamicLikeOptimizationTest.decorate()
1:5d24c78:         return TestConfiguration.existingServerSuite(DynamicLikeOptimizationTest.class,
1:5d24c78:                 false,hostName, portNo);
1:5d24c78:          */
1:5d24c78:     }
1:5d24c78:     public static Test grantRevokeTest(String hostName, int portNo)
1:5d24c78:     {
1:5d24c78:         System.out.println("********* FIXME!");return null;
1:5d24c78:         /* factor out GrantRevokeTest.decorate()
1:5d24c78:         return TestConfiguration.existingServerSuite(GrantRevokeTest.class,
1:5d24c78:                 false,hostName, portNo);
1:5d24c78:         */
1:5d24c78:     }
1:5d24c78:     
1:5d24c78:     public static Test groupByExpressionTest(String hostName, int portNo)
1:5d24c78:     {
1:5d24c78:         System.out.println("********* FIXME!");return null;
1:5d24c78:         /* factor out GrantRevokeTest.decorate() 
1:5d24c78:         return TestConfiguration.existingServerSuite(GroupByExpressionTest.class,
1:5d24c78:                 false,hostName, portNo);
1:5d24c78:         */
1:5d24c78:     }
1:5d24c78: 
1:5d24c78:     public static Test langScripts(String hostName, int portNo)
1:5d24c78:     {
1:5d24c78:         // System.out.println("********* FIXME!");return null;
1:5d24c78:         /* factor out GrantRevokeTest.decorate() */
1:5d24c78:         return TestConfiguration.existingServerSuite(LangScripts.class,
1:5d24c78:                 false,hostName, portNo);
1:5d24c78:     }
1:5d24c78: 
1:5d24c78:     
1:db8dae7:     /* All the above are pure Tests. To handle suites
1:db8dae7:      * we will have to duplicate the .suite() structure starting at .suites.all!
1:db8dae7:      *
1:db8dae7:      * The following is WORK IN PROGRESS: NOT READY FOR USE! FIXME!
1:db8dae7:      */
1:db8dae7:     public static Test all(String serverHost, int serverPort) 
1:db8dae7:         throws Exception 
1:db8dae7:     {
1:db8dae7: 
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("All_"+serverHost+":"+serverPort);
1:db8dae7: 
1:db8dae7:         // All package tests 
1:db8dae7:         // This won't work as there are no 'testXXXX' methods 
1:db8dae7:         // in AllPackages. Must create a suite() following the pattern of suites.All suite().
1:db8dae7:         // This is probably correct anyway as we presumably won't use all
1:db8dae7:         // tests in the replication testing?
1:db8dae7:         // Problem is we get a parallell structure which needs maintenance!
1:db8dae7:         
1:db8dae7:         suite.addTest(TestConfiguration.existingServerSuite(AllPackages.class, false, // false: because adds clean/decorate below
1:db8dae7:                 serverHost,serverPort));
1:db8dae7:         // Instead:
1:db8dae7:         suite.addTest(TestConfiguration.existingServerSuite(allPackagesSuite(), false, // false: because adds clean/decorate below
1:db8dae7:                 serverHost,serverPort));
1:db8dae7:         
1:db8dae7:         // Encrypted tests
1:db8dae7:         suite.addTest(TestConfiguration.existingServerSuite(EncryptionSuite.class, false, // false: because adds clean/decorate below
1:db8dae7:                 serverHost,serverPort));
1:db8dae7:         CleanDatabaseTestSetup cdts = 
1:db8dae7:                 new CleanDatabaseTestSetup(suite, 
1:db8dae7:                         true,// Use networkclient when running setUp/decorateSQL
1:db8dae7:                         serverHost,
1:db8dae7:                         serverPort
1:db8dae7:                     ) 
1:db8dae7:         {
1:db8dae7:             public void decorateSQL(Statement s)
1:db8dae7:                     throws SQLException {
1:db8dae7:                 // decorate(s);
1:db8dae7:             }            
1:db8dae7:         };
1:db8dae7:         return cdts;
1:db8dae7:     }
1:db8dae7: 
1:db8dae7:     private static Class allPackagesSuite()
1:db8dae7:     {
1:db8dae7:         return null;
1:db8dae7:     }
1:db8dae7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("All_"+serverHost+":"+serverPort);
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:5d24c78
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest;
1: import org.apache.derbyTesting.functionTests.tests.lang.LangScripts;
/////////////////////////////////////////////////////////////////////////
1:     public static Test databaseClassLoadingTest(String hostName, int portNo)
1:     {
1:         return TestConfiguration.existingServerSuite(DatabaseClassLoadingTest.class,
1:                 false,hostName, portNo);
1:     }
1:     
1:     public static Test dynamicLikeOptimizationTest(String hostName, int portNo)
1:     {
1:         System.out.println("********* FIXME!");return null;
1:         /* factor out DynamicLikeOptimizationTest.decorate()
1:         return TestConfiguration.existingServerSuite(DynamicLikeOptimizationTest.class,
1:                 false,hostName, portNo);
1:          */
1:     }
1:     public static Test grantRevokeTest(String hostName, int portNo)
1:     {
1:         System.out.println("********* FIXME!");return null;
1:         /* factor out GrantRevokeTest.decorate()
1:         return TestConfiguration.existingServerSuite(GrantRevokeTest.class,
1:                 false,hostName, portNo);
1:         */
1:     }
1:     
1:     public static Test groupByExpressionTest(String hostName, int portNo)
1:     {
1:         System.out.println("********* FIXME!");return null;
1:         /* factor out GrantRevokeTest.decorate() 
1:         return TestConfiguration.existingServerSuite(GroupByExpressionTest.class,
1:                 false,hostName, portNo);
1:         */
1:     }
1: 
1:     public static Test langScripts(String hostName, int portNo)
1:     {
1:         // System.out.println("********* FIXME!");return null;
1:         /* factor out GrantRevokeTest.decorate() */
1:         return TestConfiguration.existingServerSuite(LangScripts.class,
1:                 false,hostName, portNo);
1:     }
1: 
1:     
commit:db8dae7
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.functionTests.suites.AllPackages;
1: import org.apache.derbyTesting.functionTests.suites.EncryptionSuite;
1: import org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest;
1: import org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest;
1: import org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest;
1: import org.apache.derbyTesting.functionTests.tests.lang.SimpleTest;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.JDBCClient;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Wrap some JUnit tests in TestConfiguration.existingServerSuite() to
1:  * run these tests against an already started server on a given host
1:  * using a given port.
1:  *
1:  * Initially used in testing replication functionality - DERBY-2872.
1:  */
1: 
1: public class StandardTests extends BaseJDBCTestCase
1: {
1:     
1:     /* Creates a new instance of StandardTests */
1:     public StandardTests(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
1:     /*
1:      * Template  which adds this class to the *existing server* suite.
1:      */
1:     /* BEGIN Template
1:     public static Test simpleTest(String serverHost, int serverPort)
1:     {
1:         Test t = TestConfiguration.existingServerSuite(SimpleTest.class,false,serverHost,serverPort);
1:         System.out.println("*** Done TestConfiguration.defaultExistingServerSuite(SimpleTest.class,false)");
1:         return t;
1:         
1:         // /* Common pattern as below, but since we do not need to decorate her, just skip. 
1:         CleanDatabaseTestSetup cdts = 
1:                 new CleanDatabaseTestSetup(t, 
1:                         true,// Use networkclient when running setUp/decorateSQL
1:                         serverHost,
1:                         serverPort
1:                     ) {
1:             public void decorateSQL(Statement s)
1:                     throws SQLException {
1:                 s.executeUpdate(".....");
1:                 .  
1:                 .  
1:                 }            
1:         };
1:         return cdts;
1:          //
1:     }
1:     END Template*/
1: 
1: 
1:      /*
1:       * Adds this class to the *existing server* suite.
1:       */
1:     public static Test simpleTest(String serverHost, int serverPort)
1:     {
1:         return TestConfiguration.existingServerSuite(SimpleTest.class,
1:                 false,serverHost,serverPort);
1:         // return DatabasePropertyTestSetup.setLockTimeouts(suite,3,3); ??
1:     }
1:     
1:     public static Test prepareStatementTest(String hostName, int portNo)
1:     {
1:         return TestConfiguration.existingServerSuite(PrepareStatementTest.class,
1:                 false,hostName, portNo);
1:     }
1: 
1:     public static Test ansiTrimTest(String serverHost, int serverPort)
1:     {
1:         Test t = TestConfiguration.existingServerSuite(AnsiTrimTest.class, false, // false: because adds clean/decorate below
1:                 serverHost,serverPort); 
1:         CleanDatabaseTestSetup cdts = 
1:                 new CleanDatabaseTestSetup(t, 
1:                         true,// Use networkclient when running setUp/decorateSQL
1:                         serverHost,
1:                         serverPort
1:                     ) 
1:         {
1:             public void decorateSQL(Statement s)
1:                     throws SQLException 
1:             {
1:                 AnsiTrimTest.decorate(s);
1:             }            
1:         };
1:         return cdts;
1:     }
1:     
1:     public static Test createTableFromQueryTest(String serverHost, int serverPort)
1:     {
1:         Test t = TestConfiguration.existingServerSuite(CreateTableFromQueryTest.class, false, // false: because adds clean/decorate below
1:                 serverHost,serverPort);
1:         CleanDatabaseTestSetup cdts = 
1:                 new CleanDatabaseTestSetup(t, 
1:                         true,// Use networkclient when running setUp/decorateSQL
1:                         serverHost,
1:                         serverPort
1:                     ) 
1:         {
1:             protected void decorateSQL(Statement stmt) 
1:                 throws SQLException
1:             {
1:                 CreateTableFromQueryTest.decorate(stmt);
1:             }
1:         };
1:         return cdts;
1:     }
1:     
1:     /* All the above are pure Tests. To handle suites
1:      * we will have to duplicate the .suite() structure starting at .suites.all!
1:      *
1:      * The following is WORK IN PROGRESS: NOT READY FOR USE! FIXME!
1:      */
1:     public static Test all(String serverHost, int serverPort) 
1:         throws Exception 
1:     {
1: 
0:         TestSuite suite = new TestSuite("All_"+serverHost+":"+serverPort);
1: 
1:         // All package tests 
1:         // This won't work as there are no 'testXXXX' methods 
1:         // in AllPackages. Must create a suite() following the pattern of suites.All suite().
1:         // This is probably correct anyway as we presumably won't use all
1:         // tests in the replication testing?
1:         // Problem is we get a parallell structure which needs maintenance!
1:         
1:         suite.addTest(TestConfiguration.existingServerSuite(AllPackages.class, false, // false: because adds clean/decorate below
1:                 serverHost,serverPort));
1:         // Instead:
1:         suite.addTest(TestConfiguration.existingServerSuite(allPackagesSuite(), false, // false: because adds clean/decorate below
1:                 serverHost,serverPort));
1:         
1:         // Encrypted tests
1:         suite.addTest(TestConfiguration.existingServerSuite(EncryptionSuite.class, false, // false: because adds clean/decorate below
1:                 serverHost,serverPort));
1:         CleanDatabaseTestSetup cdts = 
1:                 new CleanDatabaseTestSetup(suite, 
1:                         true,// Use networkclient when running setUp/decorateSQL
1:                         serverHost,
1:                         serverPort
1:                     ) 
1:         {
1:             public void decorateSQL(Statement s)
1:                     throws SQLException {
1:                 // decorate(s);
1:             }            
1:         };
1:         return cdts;
1:     }
1: 
1:     private static Class allPackagesSuite()
1:     {
1:         return null;
1:     }
1: }
============================================================================