1:af3ca91: /*
2:af3ca91: 
1:af3ca91:    Derby - Class org.apache.derby.iapi.services.memory.LowMemory
1:af3ca91: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:af3ca91: 
1:af3ca91:       http://www.apache.org/licenses/LICENSE-2.0
1:af3ca91: 
1:af3ca91:    Unless required by applicable law or agreed to in writing, software
1:af3ca91:    distributed under the License is distributed on an "AS IS" BASIS,
1:af3ca91:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:af3ca91:    See the License for the specific language governing permissions and
1:af3ca91:    limitations under the License.
1:af3ca91: 
1:af3ca91:  */
1:af3ca91: 
1:af3ca91: package org.apache.derby.iapi.services.memory;
1:af3ca91: 
1:af3ca91: /**
1:af3ca91:  * Methods to aid classes recover from OutOfMemoryErrors by denying
1:af3ca91:  * or reducing service rather than a complete shutdown of the JVM.
1:af3ca91:  * It's intended that classes use to functionality to allow then to
1:af3ca91:  * deny service when memory is low to allow the JVM to recover,
1:af3ca91:  * rather than start new operations that are probably doomed to
1:af3ca91:  * failure due to the low memory.
1:af3ca91:  * <P>
1:af3ca91:  * Expected usage is one instance of this class per major logical
1:af3ca91:  * operation, e.g. creating a connection, preparing a statement,
1:af3ca91:  * adding an entry to a specific cache etc.
1:af3ca91:  * <BR>
1:af3ca91:  * The logical operation would call isLowMemory() before starting
1:af3ca91:  * the operation, and thrown a static exception if it returns true.
1:af3ca91:  * <BR>
1:af3ca91:  * If during the operation an OutOfMemoryException is thrown the
1:af3ca91:  * operation would call setLowMemory() and throw its static exception
1:af3ca91:  * representing low memory.
1:af3ca91:  * <P>
1:af3ca91:  * Future enhancments could be a callback mechanism for modules
1:af3ca91:  * where they register they can reduce memory usage on a low
1:af3ca91:  * memory situation. These callbacks would be triggered by
1:af3ca91:  * a call to setLowMemory. For example the page cache could
1:af3ca91:  * reduce its current size by 10% in a low memory situation.
1:af3ca91:  * 
1:af3ca91:  */
1:af3ca91: public class LowMemory {
1:af3ca91: 
1:af3ca91:     /**
1:af3ca91:      * Free memory seen when caller indicated an out of
1:af3ca91:      * memory situation. Becomes a low memory watermark
1:af3ca91:      * for five seconds that causes isLowMemory to return
1:af3ca91:      * true if free memory is lower than this value.
1:af3ca91:      * This allows the JVM a chance to recover memory
1:af3ca91:      * rather than start new operations that are probably
1:af3ca91:      * doomed to failure due to the low memory.
1:af3ca91:      * 
1:af3ca91:      */
1:af3ca91:     private long lowMemory;
1:af3ca91:     
1:af3ca91:     /**
1:af3ca91:      * Time in ms corresponding to System.currentTimeMillis() when
1:af3ca91:      * lowMemory was set.
1:af3ca91:      */
1:af3ca91:     private long whenLowMemorySet;
1:af3ca91:     
1:af3ca91:     /**
1:af3ca91:      * Set a low memory watermark where the owner of this object just hit an
1:af3ca91:      * OutOfMemoryError. The caller is assumed it has just freed up any
1:af3ca91:      * references it obtained during the operation, so that the freeMemory call
1:af3ca91:      * as best as it can reflects the memory before the action that caused the
1:af3ca91:      * OutOfMemoryError, not part way through the action.
1:af3ca91:      * 
1:af3ca91:      */
1:af3ca91:     public void setLowMemory() {
1:af3ca91:         
1:af3ca91:         // Can read lowMemory unsynchronized, worst
1:af3ca91:         // case is that we force extra garbage collection.
1:af3ca91:         if (lowMemory == 0L) {
1:af3ca91:             
1:af3ca91:             // The caller tried to dereference any objects it
1:af3ca91:             // created during its instantation. Try to garbage
1:af3ca91:             // collect these so that we can a best-guess effort
1:af3ca91:             // at the free memory before the overall operation we are
1:af3ca91:             // failing on occurred. Of course in active multi-threading
1:af3ca91:             // systems we run the risk that some other thread just freed
1:af3ca91:             // up some memory that throws off our calcuation. This is
1:af3ca91:             // avoided by clearing lowMemory some time later on an
1:af3ca91:             // isLowMemory() call.
1:ec9d167:             boolean interrupted = false;
1:ec9d167: 
1:af3ca91:             for (int i = 0; i < 5; i++) {
1:af3ca91:                 System.gc();
1:af3ca91:                 System.runFinalization();
1:af3ca91:                 try {
1:af3ca91:                     Thread.sleep(50L);
1:af3ca91:                 } catch (InterruptedException e) {
1:ec9d167:                     interrupted = true;
1:af3ca91:                 }
1:af3ca91:             }
1:ec9d167:             if (interrupted) {
1:ec9d167:                 // reinstate flag
1:ec9d167:                 Thread.currentThread().interrupt();
1:ec9d167:             }
1:af3ca91:         }
1:af3ca91:         synchronized (this) {
1:af3ca91:             if (lowMemory == 0L) {
1:af3ca91:                 lowMemory = Runtime.getRuntime().freeMemory();
1:af3ca91:                 whenLowMemorySet = System.currentTimeMillis();
1:af3ca91:             }
1:af3ca91:         }
1:af3ca91:     }
1:af3ca91: 
1:af3ca91:     /**
1:af3ca91:      * Return true if a low memory water mark has been set and the current free
1:af3ca91:      * memory is lower than it. Otherwise return false.
1:af3ca91:      */
1:af3ca91:     public boolean isLowMemory() {
1:af3ca91:         synchronized (this) {
1:af3ca91:             long lm = lowMemory;
1:af3ca91:             if (lm == 0)
1:af3ca91:                 return false;
1:af3ca91:             
1:af3ca91:             if (Runtime.getRuntime().freeMemory() > lm)
1:af3ca91:                 return false;
1:af3ca91:             
1:af3ca91:             // Only allow an low memory watermark to be valid
1:af3ca91:             // for five seconds after it was set. This stops
1:af3ca91:             // an incorrect limit being set for ever. This could
1:af3ca91:             // occur if other threads were freeing memory when
1:af3ca91:             // we called Runtime.getRuntime().freeMemory()
1:af3ca91:            
1:af3ca91:             long now = System.currentTimeMillis();
1:af3ca91:             if ((now - this.whenLowMemorySet) > 5000L) {
1:af3ca91:                 lowMemory = 0L;
1:af3ca91:                 whenLowMemorySet = 0L;
1:af3ca91:                 return false;
1:af3ca91:             }
1:af3ca91:             return true;
1:af3ca91:         }
1:af3ca91:     }
1:af3ca91: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:ec9d167
/////////////////////////////////////////////////////////////////////////
1:             boolean interrupted = false;
1: 
1:                     interrupted = true;
1:             if (interrupted) {
1:                 // reinstate flag
1:                 Thread.currentThread().interrupt();
1:             }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:af3ca91
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.services.memory.LowMemory
1: 
0:    Copyright 2005, 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.memory;
1: 
1: /**
1:  * Methods to aid classes recover from OutOfMemoryErrors by denying
1:  * or reducing service rather than a complete shutdown of the JVM.
1:  * It's intended that classes use to functionality to allow then to
1:  * deny service when memory is low to allow the JVM to recover,
1:  * rather than start new operations that are probably doomed to
1:  * failure due to the low memory.
1:  * <P>
1:  * Expected usage is one instance of this class per major logical
1:  * operation, e.g. creating a connection, preparing a statement,
1:  * adding an entry to a specific cache etc.
1:  * <BR>
1:  * The logical operation would call isLowMemory() before starting
1:  * the operation, and thrown a static exception if it returns true.
1:  * <BR>
1:  * If during the operation an OutOfMemoryException is thrown the
1:  * operation would call setLowMemory() and throw its static exception
1:  * representing low memory.
1:  * <P>
1:  * Future enhancments could be a callback mechanism for modules
1:  * where they register they can reduce memory usage on a low
1:  * memory situation. These callbacks would be triggered by
1:  * a call to setLowMemory. For example the page cache could
1:  * reduce its current size by 10% in a low memory situation.
1:  * 
1:  */
1: public class LowMemory {
1: 
1:     /**
1:      * Free memory seen when caller indicated an out of
1:      * memory situation. Becomes a low memory watermark
1:      * for five seconds that causes isLowMemory to return
1:      * true if free memory is lower than this value.
1:      * This allows the JVM a chance to recover memory
1:      * rather than start new operations that are probably
1:      * doomed to failure due to the low memory.
1:      * 
1:      */
1:     private long lowMemory;
1:     
1:     /**
1:      * Time in ms corresponding to System.currentTimeMillis() when
1:      * lowMemory was set.
1:      */
1:     private long whenLowMemorySet;
1:     
1:     /**
1:      * Set a low memory watermark where the owner of this object just hit an
1:      * OutOfMemoryError. The caller is assumed it has just freed up any
1:      * references it obtained during the operation, so that the freeMemory call
1:      * as best as it can reflects the memory before the action that caused the
1:      * OutOfMemoryError, not part way through the action.
1:      * 
1:      */
1:     public void setLowMemory() {
1:         
1:         // Can read lowMemory unsynchronized, worst
1:         // case is that we force extra garbage collection.
1:         if (lowMemory == 0L) {
1:             
1:             // The caller tried to dereference any objects it
1:             // created during its instantation. Try to garbage
1:             // collect these so that we can a best-guess effort
1:             // at the free memory before the overall operation we are
1:             // failing on occurred. Of course in active multi-threading
1:             // systems we run the risk that some other thread just freed
1:             // up some memory that throws off our calcuation. This is
1:             // avoided by clearing lowMemory some time later on an
1:             // isLowMemory() call.
1:             for (int i = 0; i < 5; i++) {
1:                 System.gc();
1:                 System.runFinalization();
1:                 try {
1:                     Thread.sleep(50L);
1:                 } catch (InterruptedException e) {
1:                 }
1:             }
1:         }
1:         synchronized (this) {
1:             if (lowMemory == 0L) {
1:                 lowMemory = Runtime.getRuntime().freeMemory();
1:                 whenLowMemorySet = System.currentTimeMillis();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Return true if a low memory water mark has been set and the current free
1:      * memory is lower than it. Otherwise return false.
1:      */
1:     public boolean isLowMemory() {
1:         synchronized (this) {
1:             long lm = lowMemory;
1:             if (lm == 0)
1:                 return false;
1:             
1:             if (Runtime.getRuntime().freeMemory() > lm)
1:                 return false;
1:             
1:             // Only allow an low memory watermark to be valid
1:             // for five seconds after it was set. This stops
1:             // an incorrect limit being set for ever. This could
1:             // occur if other threads were freeing memory when
1:             // we called Runtime.getRuntime().freeMemory()
1:            
1:             long now = System.currentTimeMillis();
1:             if ((now - this.whenLowMemorySet) > 5000L) {
1:                 lowMemory = 0L;
1:                 whenLowMemorySet = 0L;
1:                 return false;
1:             }
1:             return true;
1:         }
1:     }
1: }
============================================================================