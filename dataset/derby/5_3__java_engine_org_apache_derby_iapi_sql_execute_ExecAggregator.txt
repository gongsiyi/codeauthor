1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.execute.ExecAggregator
1:7ecc1f2: 
1:2dd2d11:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd2d11:    contributor license agreements.  See the NOTICE file distributed with
1:2dd2d11:    this work for additional information regarding copyright ownership.
1:2dd2d11:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2dd2d11:    (the "License"); you may not use this file except in compliance with
1:2dd2d11:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.execute;
1:eac0369: 
1:c8603c4: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:c8603c4: import org.apache.derby.iapi.services.loader.ClassFactory;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * An ExecAggregator is the interface that execution uses
1:eac0369:  * to an aggregate.  System defined aggregates will implement
1:eac0369:  * this directly. 
1:eac0369:  
1:eac0369:    <P>
1:eac0369:    The life time of an ExecAggregator is as follows.
1:eac0369: 
1:eac0369: 	<OL>
1:eac0369: 	<LI> An ExecAggregator instance is created using the defined class name.
1:eac0369: 	<LI> Its setup() method is called to define its role (COUNT(*), SUM, etc.).
1:eac0369: 	<LI> Its newAggregator() method may be called any number of times to create
1:eac0369: 	new working aggregators as required. These aggregators have the same role
1:eac0369: 	and must be created in an initialized state.
1:eac0369: 	<LI> accumlate and merge will be called across these set of aggregators
1:eac0369: 	<LI> One of these aggregators will be used as the final one for obtaining the result
1:eac0369: 	</OL>
1:eac0369: 
1:eac0369: 
1:eac0369:  * <P>
1:eac0369:  */
1:eac0369: public interface ExecAggregator extends Formatable
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	    Set's up the aggregate for processing.
1:c8603c4: 
1:c8603c4:         @param  classFactory Database-specific class factory.
1:c8603c4:         @param  aggregateName   For builtin aggregates, this is a SQL aggregate name like MAX. For user-defined aggregates, this is the name of the user-written class which implements org.apache.derby.agg.Aggregator.
1:c8603c4:         @param  returnDataType  The type returned by the getResult() method.
1:eac0369: 	 */
1:c8603c4: 	public void setup(ClassFactory classFactory, String aggregateName, DataTypeDescriptor returnDataType );
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Iteratively accumulates the addend into the aggregator.
1:eac0369: 	 * Called on each member of the set of values that is being
1:eac0369: 	 * aggregated.
1:eac0369: 	 *
1:eac0369: 	 * @param addend	the DataValueDescriptor addend (current input to 
1:eac0369: 	 * 					the aggregation)
1:eac0369: 	 * @param ga		a result set getter
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public void accumulate
1:eac0369: 	(
1:eac0369: 		DataValueDescriptor addend, 
1:eac0369: 		Object				ga 	
1:eac0369: 	) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Merges one aggregator into a another aggregator.
1:eac0369: 	 * Merges two partial aggregates results into a single result.
1:eac0369: 	 * Needed for: <UL>
1:eac0369: 	 *	<LI> parallel aggregation </LI>
1:eac0369: 	 *	<LI> vector aggregation (GROUP BY) </LI>
1:eac0369: 	 *  <LI> distinct aggregates (e.g. MAX(DISTINCT Col)) </LI></UL><p>
1:eac0369: 	 *
1:eac0369: 	 * An example of a merge would be: given two COUNT() 
1:eac0369: 	 * aggregators, C1 and C2, a merge of C1 into C2 would
1:eac0369: 	 * set C1.count += C2.count.  So, given a <i>CountAggregator</i>
1:eac0369: 	 * with a <i>getCount()</i> method that returns its counts, its 
1:eac0369: 	 * merge method might look like this: <pre>
1:eac0369: 
1:eac0369: 		public void merge(ExecAggregator inputAggregator) throws StandardException
1:eac0369: 		{
1:eac0369: 		&nbsp;&nbsp;&nbsp;count += ((CountAccgregator)inputAggregator).getCount();
1:eac0369: 		} </pre>
1:eac0369: 	 * 
1:eac0369: 	 *
1:eac0369: 	 * @param inputAggregator	the other Aggregator 
1:eac0369: 	 *							(input partial aggregate)
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public void merge(ExecAggregator inputAggregator) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Produces the result to be returned by the query.
1:eac0369: 	 * The last processing of the aggregate.
1:eac0369: 	 *
1:2c6f0a2: 	 * @exception StandardException on error
1:2c6f0a2:  	 */
1:2c6f0a2: 	public DataValueDescriptor getResult() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369:  	   Return a new initialized copy of this aggregator, any state
1:eac0369: 	   set by the setup() method of the original Aggregator must be
1:eac0369: 	   copied into the new aggregator.
1:eac0369: 	 *
1:eac0369: 	 * @return ExecAggregator the new aggregator
1:eac0369: 	 */
1:eac0369: 	public ExecAggregator newAggregator();
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 		Return true if the aggregation eliminated at least one
1:eac0369: 		null from the input data set.
1:eac0369: 	*/
1:eac0369: 	public boolean didEliminateNulls();
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
/////////////////////////////////////////////////////////////////////////
1: 
1:         @param  classFactory Database-specific class factory.
1:         @param  aggregateName   For builtin aggregates, this is a SQL aggregate name like MAX. For user-defined aggregates, this is the name of the user-written class which implements org.apache.derby.agg.Aggregator.
1:         @param  returnDataType  The type returned by the getResult() method.
1: 	public void setup(ClassFactory classFactory, String aggregateName, DataTypeDescriptor returnDataType );
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2dd2d11
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2c6f0a2
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException on error
1:  	 */
1: 	public DataValueDescriptor getResult() throws StandardException;
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.execute.ExecAggregator
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: /**
1:  * An ExecAggregator is the interface that execution uses
1:  * to an aggregate.  System defined aggregates will implement
1:  * this directly. 
1:  
1:    <P>
1:    The life time of an ExecAggregator is as follows.
1: 
1: 	<OL>
1: 	<LI> An ExecAggregator instance is created using the defined class name.
1: 	<LI> Its setup() method is called to define its role (COUNT(*), SUM, etc.).
1: 	<LI> Its newAggregator() method may be called any number of times to create
1: 	new working aggregators as required. These aggregators have the same role
1: 	and must be created in an initialized state.
1: 	<LI> accumlate and merge will be called across these set of aggregators
1: 	<LI> One of these aggregators will be used as the final one for obtaining the result
1: 	</OL>
1: 
1: 
1:  * <P>
1:  */
1: public interface ExecAggregator extends Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/**
1: 	    Set's up the aggregate for processing.
1: 	 */
0: 	public void setup(String aggregateName);
1: 
1: 	/**
1: 	 * Iteratively accumulates the addend into the aggregator.
1: 	 * Called on each member of the set of values that is being
1: 	 * aggregated.
1: 	 *
1: 	 * @param addend	the DataValueDescriptor addend (current input to 
1: 	 * 					the aggregation)
1: 	 * @param ga		a result set getter
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public void accumulate
1: 	(
1: 		DataValueDescriptor addend, 
1: 		Object				ga 	
1: 	) throws StandardException;
1: 
1: 	/**
1: 	 * Merges one aggregator into a another aggregator.
1: 	 * Merges two partial aggregates results into a single result.
1: 	 * Needed for: <UL>
1: 	 *	<LI> parallel aggregation </LI>
1: 	 *	<LI> vector aggregation (GROUP BY) </LI>
1: 	 *  <LI> distinct aggregates (e.g. MAX(DISTINCT Col)) </LI></UL><p>
1: 	 *
1: 	 * An example of a merge would be: given two COUNT() 
1: 	 * aggregators, C1 and C2, a merge of C1 into C2 would
1: 	 * set C1.count += C2.count.  So, given a <i>CountAggregator</i>
1: 	 * with a <i>getCount()</i> method that returns its counts, its 
1: 	 * merge method might look like this: <pre>
1: 
1: 		public void merge(ExecAggregator inputAggregator) throws StandardException
1: 		{
1: 		&nbsp;&nbsp;&nbsp;count += ((CountAccgregator)inputAggregator).getCount();
1: 		} </pre>
1: 	 * 
1: 	 *
1: 	 * @param inputAggregator	the other Aggregator 
1: 	 *							(input partial aggregate)
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public void merge(ExecAggregator inputAggregator) throws StandardException;
1: 
1: 	/**
1: 	 * Produces the result to be returned by the query.
1: 	 * The last processing of the aggregate.
1: 	 *
1: 	 */
0: 	public Object getResult();
1: 
1: 	/**
1:  	   Return a new initialized copy of this aggregator, any state
1: 	   set by the setup() method of the original Aggregator must be
1: 	   copied into the new aggregator.
1: 	 *
1: 	 * @return ExecAggregator the new aggregator
1: 	 */
1: 	public ExecAggregator newAggregator();
1: 	
1: 	/**
1: 		Return true if the aggregation eliminated at least one
1: 		null from the input data set.
1: 	*/
1: 	public boolean didEliminateNulls();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.execute;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: /**
0:  * An ExecAggregator is the interface that execution uses
0:  * to an aggregate.  System defined aggregates will implement
0:  * this directly. 
0:  
0:    <P>
0:    The life time of an ExecAggregator is as follows.
0: 
0: 	<OL>
0: 	<LI> An ExecAggregator instance is created using the defined class name.
0: 	<LI> Its setup() method is called to define its role (COUNT(*), SUM, etc.).
0: 	<LI> Its newAggregator() method may be called any number of times to create
0: 	new working aggregators as required. These aggregators have the same role
0: 	and must be created in an initialized state.
0: 	<LI> accumlate and merge will be called across these set of aggregators
0: 	<LI> One of these aggregators will be used as the final one for obtaining the result
0: 	</OL>
0: 
0: 
0:  * <P>
0:  */
0: public interface ExecAggregator extends Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/**
0: 	    Set's up the aggregate for processing.
0: 	 */
0: 	public void setup(String aggregateName);
0: 
0: 	/**
0: 	 * Iteratively accumulates the addend into the aggregator.
0: 	 * Called on each member of the set of values that is being
0: 	 * aggregated.
0: 	 *
0: 	 * @param addend	the DataValueDescriptor addend (current input to 
0: 	 * 					the aggregation)
0: 	 * @param ga		a result set getter
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public void accumulate
0: 	(
0: 		DataValueDescriptor addend, 
0: 		Object				ga 	
0: 	) throws StandardException;
0: 
0: 	/**
0: 	 * Merges one aggregator into a another aggregator.
0: 	 * Merges two partial aggregates results into a single result.
0: 	 * Needed for: <UL>
0: 	 *	<LI> parallel aggregation </LI>
0: 	 *	<LI> vector aggregation (GROUP BY) </LI>
0: 	 *  <LI> distinct aggregates (e.g. MAX(DISTINCT Col)) </LI></UL><p>
0: 	 *
0: 	 * An example of a merge would be: given two COUNT() 
0: 	 * aggregators, C1 and C2, a merge of C1 into C2 would
0: 	 * set C1.count += C2.count.  So, given a <i>CountAggregator</i>
0: 	 * with a <i>getCount()</i> method that returns its counts, its 
0: 	 * merge method might look like this: <pre>
0: 
0: 		public void merge(ExecAggregator inputAggregator) throws StandardException
0: 		{
0: 		&nbsp;&nbsp;&nbsp;count += ((CountAccgregator)inputAggregator).getCount();
0: 		} </pre>
0: 	 * 
0: 	 *
0: 	 * @param inputAggregator	the other Aggregator 
0: 	 *							(input partial aggregate)
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public void merge(ExecAggregator inputAggregator) throws StandardException;
0: 
0: 	/**
0: 	 * Produces the result to be returned by the query.
0: 	 * The last processing of the aggregate.
0: 	 *
0: 	 */
0: 	public Object getResult();
0: 
0: 	/**
0:  	   Return a new initialized copy of this aggregator, any state
0: 	   set by the setup() method of the original Aggregator must be
0: 	   copied into the new aggregator.
0: 	 *
0: 	 * @return ExecAggregator the new aggregator
0: 	 */
0: 	public ExecAggregator newAggregator();
0: 	
0: 	/**
0: 		Return true if the aggregation eliminated at least one
0: 		null from the input data set.
0: 	*/
0: 	public boolean didEliminateNulls();
0: }
============================================================================