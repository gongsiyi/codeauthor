1:106ea47: /*
1:106ea47: 
1:106ea47: Derby - Class org.apache.derbyTesting.perf.clients.PoissonLoadGenerator
1:106ea47: 
1:106ea47: Licensed to the Apache Software Foundation (ASF) under one or more
1:106ea47: contributor license agreements.  See the NOTICE file distributed with
1:106ea47: this work for additional information regarding copyright ownership.
1:106ea47: The ASF licenses this file to You under the Apache License, Version 2.0
1:106ea47: (the "License"); you may not use this file except in compliance with
1:106ea47: the License.  You may obtain a copy of the License at
1:106ea47: 
1:106ea47:    http://www.apache.org/licenses/LICENSE-2.0
1:106ea47: 
1:106ea47: Unless required by applicable law or agreed to in writing, software
1:106ea47: distributed under the License is distributed on an "AS IS" BASIS,
1:106ea47: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:106ea47: See the License for the specific language governing permissions and
1:106ea47: limitations under the License.
1:106ea47: 
1:106ea47: */
1:106ea47: 
1:106ea47: package org.apache.derbyTesting.perf.clients;
1:106ea47: 
1:106ea47: import java.io.PrintStream;
1:106ea47: import java.sql.SQLException;
1:106ea47: import java.util.Random;
1:106ea47: 
1:106ea47: /**
1:106ea47:  * Load generator which generates Poisson distributed requests.
1:106ea47:  */
1:106ea47: public class PoissonLoadGenerator implements LoadGenerator {
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * The average time (in milliseconds) between each request from a client.
1:106ea47:      */
1:106ea47:     private final double avgWaitTime;
1:106ea47: 
1:106ea47:     /** The client threads used to generate load. */
1:106ea47:     private ClientThread[] threads;
1:106ea47:     /** Flag which tells the generator to stop. */
1:106ea47:     private volatile boolean stop;
1:106ea47:     /** Flag which tells the generator to collect results. */
1:106ea47:     private volatile boolean collect;
1:106ea47:     /** Start time for steady-state phase. */
1:106ea47:     private long startTime;
1:106ea47:     /** Stop time for steady-state phase. */
1:106ea47:     private long stopTime;
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Construct a {@code PoissonLoadGenerator} instance.
1:106ea47:      *
1:106ea47:      * @param avgWaitTime the time (in millisecond) between each request from
1:106ea47:      * a client
1:106ea47:      */
1:106ea47:     public PoissonLoadGenerator(double avgWaitTime) {
1:106ea47:         this.avgWaitTime = avgWaitTime;
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Thread class which runs a single client and collects results.
1:106ea47:      */
1:106ea47:     private class ClientThread extends Thread {
1:106ea47:         private final Client client;
1:106ea47:         private long count;
1:106ea47:         private long totalTime;
1:106ea47:         private long min = Long.MAX_VALUE;
1:106ea47:         private long max = 0;
1:106ea47: 
1:106ea47:         ClientThread(Client c) {
1:106ea47:             client = c;
1:106ea47:         }
1:106ea47: 
1:9a05e65:         public Client getClient() { return client; }
1:9a05e65: 
1:106ea47:         /**
1:106ea47:          * Tell the client to stop waiting.
1:106ea47:          */
1:106ea47:         synchronized void wakeup() {
1:106ea47:             ClientThread.this.notifyAll();
1:106ea47:         }
1:106ea47: 
1:106ea47:         public void run() {
1:106ea47:             try {
1:106ea47:                 runClient();
1:106ea47:             } catch (Exception e) {
1:106ea47:                 e.printStackTrace();
1:106ea47:             }
1:106ea47:         }
1:106ea47: 
1:106ea47:         private void runClient() throws SQLException, InterruptedException {
1:106ea47:             final Random r = new Random();
1:106ea47:             final long start = System.currentTimeMillis();
1:106ea47:             // use a double to prevent too short average wait time because
1:106ea47:             // of truncation
1:106ea47:             double timeOffset = 0d;
1:106ea47:             long now = start;
1:106ea47:             while (!stop) {
1:106ea47:                 // Increase the timeOffset by a random value picked from an
1:106ea47:                 // exponential distribution (exponentially distributed wait
1:106ea47:                 // times give Poisson distributed requests, see
1:106ea47:                 // http://en.wikipedia.org/wiki/Exponential_distribution)
1:106ea47:                 timeOffset += -Math.log(r.nextDouble()) * avgWaitTime;
1:106ea47:                 final long nextWakeup = start + (long) timeOffset;
1:106ea47:                 while (now < nextWakeup) {
1:106ea47:                     synchronized (ClientThread.this) {
1:106ea47:                         if (stop) {
1:106ea47:                             return;
1:106ea47:                         }
1:106ea47:                         ClientThread.this.wait(nextWakeup - now);
1:106ea47:                     }
1:106ea47:                     now = System.currentTimeMillis();
1:106ea47:                 }
1:106ea47: 
1:106ea47:                 final long t0 = now;
1:106ea47:                 client.doWork();
1:106ea47:                 final long t1 = System.currentTimeMillis();
1:106ea47:                 if (collect) {
1:106ea47:                     final long time = t1 - t0;
1:106ea47:                     count++;
1:106ea47:                     totalTime += time;
1:106ea47:                     if (time > max) max = time;
1:106ea47:                     if (time < min) min = time;
1:106ea47:                 }
1:106ea47:                 now = t1;
1:106ea47:             }
1:106ea47:         }
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Initialize the load generator.
1:106ea47:      *
1:106ea47:      * @param clients the test clients to use
1:106ea47:      */
1:106ea47:     public void init(Client[] clients) {
1:106ea47:         threads = new ClientThread[clients.length];
1:106ea47:         for (int i = 0; i < clients.length; i++) {
1:106ea47:             threads[i] = new ClientThread(clients[i]);
1:106ea47:         }
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Start warmup phase.
1:106ea47:      */
1:106ea47:     public void startWarmup() {
1:106ea47:         for (int i = 0; i < threads.length; i++) {
1:106ea47:             threads[i].start();
1:106ea47:         }
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Start steady-state phase.
1:106ea47:      */
1:106ea47:     public void startSteadyState() {
1:106ea47:         startTime = System.currentTimeMillis();
1:106ea47:         collect = true;
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Stop the load generator.
1:106ea47:      */
1:106ea47:     public void stop() {
1:106ea47:         stopTime = System.currentTimeMillis();
1:106ea47:         collect = false;
1:106ea47:         stop = true;
1:106ea47:         for (int i = 0; i < threads.length; i++) {
1:106ea47:             try {
1:106ea47:                 threads[i].wakeup();
1:106ea47:                 threads[i].join();
1:106ea47:             } catch (InterruptedException ie) {
1:106ea47:                 ie.printStackTrace();
1:106ea47:             }
1:106ea47:         }
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Print average transaction injection rate and response times.
1:106ea47:      */
1:106ea47:     public void printReport(PrintStream out) {
1:106ea47:         long time = stopTime - startTime;
1:106ea47: 
1:106ea47:         long count = 0;
1:106ea47:         long totalTime = 0;
1:106ea47:         long min = Long.MAX_VALUE;
1:106ea47:         long max = 0;
1:106ea47:         for (int i = 0; i < threads.length; i++) {
1:106ea47:             count += threads[i].count;
1:106ea47:             totalTime += threads[i].totalTime;
1:106ea47:             min = Math.min(min, threads[i].min);
1:106ea47:             max = Math.max(max, threads[i].max);
1:106ea47:         }
1:106ea47: 
1:106ea47:         double tps = (double) count * 1000 / time;
1:106ea47:         double avgResp = (double) totalTime / count;
1:106ea47: 
1:106ea47:         out.println("Number of threads:\t" + threads.length);
1:106ea47:         out.println("Average injection rate (tx/s):\t" + tps);
1:106ea47:         out.println("Average response time (ms):\t" + avgResp);
1:106ea47:         out.println("Minimum response time (ms):\t" + min);
1:106ea47:         out.println("Maximum response time (ms):\t" + max);
1:9a05e65:         
1:9a05e65:         for (int i = 0; i < threads.length; i++)
1:9a05e65:         {
1:9a05e65:             threads[i].getClient().printReport( out );
1:9a05e65:         }
1:106ea47:     }
1:106ea47: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9a05e65
/////////////////////////////////////////////////////////////////////////
1:         public Client getClient() { return client; }
1: 
/////////////////////////////////////////////////////////////////////////
1:         
1:         for (int i = 0; i < threads.length; i++)
1:         {
1:             threads[i].getClient().printReport( out );
1:         }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:106ea47
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.clients.PoissonLoadGenerator
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.perf.clients;
1: 
1: import java.io.PrintStream;
1: import java.sql.SQLException;
1: import java.util.Random;
1: 
1: /**
1:  * Load generator which generates Poisson distributed requests.
1:  */
1: public class PoissonLoadGenerator implements LoadGenerator {
1: 
1:     /**
1:      * The average time (in milliseconds) between each request from a client.
1:      */
1:     private final double avgWaitTime;
1: 
1:     /** The client threads used to generate load. */
1:     private ClientThread[] threads;
1:     /** Flag which tells the generator to stop. */
1:     private volatile boolean stop;
1:     /** Flag which tells the generator to collect results. */
1:     private volatile boolean collect;
1:     /** Start time for steady-state phase. */
1:     private long startTime;
1:     /** Stop time for steady-state phase. */
1:     private long stopTime;
1: 
1:     /**
1:      * Construct a {@code PoissonLoadGenerator} instance.
1:      *
1:      * @param avgWaitTime the time (in millisecond) between each request from
1:      * a client
1:      */
1:     public PoissonLoadGenerator(double avgWaitTime) {
1:         this.avgWaitTime = avgWaitTime;
1:     }
1: 
1:     /**
1:      * Thread class which runs a single client and collects results.
1:      */
1:     private class ClientThread extends Thread {
1:         private final Client client;
1:         private long count;
1:         private long totalTime;
1:         private long min = Long.MAX_VALUE;
1:         private long max = 0;
1: 
1:         ClientThread(Client c) {
1:             client = c;
1:         }
1: 
1:         /**
1:          * Tell the client to stop waiting.
1:          */
1:         synchronized void wakeup() {
1:             ClientThread.this.notifyAll();
1:         }
1: 
1:         public void run() {
1:             try {
1:                 runClient();
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:             }
1:         }
1: 
1:         private void runClient() throws SQLException, InterruptedException {
1:             final Random r = new Random();
1:             final long start = System.currentTimeMillis();
1:             // use a double to prevent too short average wait time because
1:             // of truncation
1:             double timeOffset = 0d;
1:             long now = start;
1:             while (!stop) {
1:                 // Increase the timeOffset by a random value picked from an
1:                 // exponential distribution (exponentially distributed wait
1:                 // times give Poisson distributed requests, see
1:                 // http://en.wikipedia.org/wiki/Exponential_distribution)
1:                 timeOffset += -Math.log(r.nextDouble()) * avgWaitTime;
1:                 final long nextWakeup = start + (long) timeOffset;
1:                 while (now < nextWakeup) {
1:                     synchronized (ClientThread.this) {
1:                         if (stop) {
1:                             return;
1:                         }
1:                         ClientThread.this.wait(nextWakeup - now);
1:                     }
1:                     now = System.currentTimeMillis();
1:                 }
1: 
1:                 final long t0 = now;
1:                 client.doWork();
1:                 final long t1 = System.currentTimeMillis();
1:                 if (collect) {
1:                     final long time = t1 - t0;
1:                     count++;
1:                     totalTime += time;
1:                     if (time > max) max = time;
1:                     if (time < min) min = time;
1:                 }
1:                 now = t1;
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Initialize the load generator.
1:      *
1:      * @param clients the test clients to use
1:      */
1:     public void init(Client[] clients) {
1:         threads = new ClientThread[clients.length];
1:         for (int i = 0; i < clients.length; i++) {
1:             threads[i] = new ClientThread(clients[i]);
1:         }
1:     }
1: 
1:     /**
1:      * Start warmup phase.
1:      */
1:     public void startWarmup() {
1:         for (int i = 0; i < threads.length; i++) {
1:             threads[i].start();
1:         }
1:     }
1: 
1:     /**
1:      * Start steady-state phase.
1:      */
1:     public void startSteadyState() {
1:         startTime = System.currentTimeMillis();
1:         collect = true;
1:     }
1: 
1:     /**
1:      * Stop the load generator.
1:      */
1:     public void stop() {
1:         stopTime = System.currentTimeMillis();
1:         collect = false;
1:         stop = true;
1:         for (int i = 0; i < threads.length; i++) {
1:             try {
1:                 threads[i].wakeup();
1:                 threads[i].join();
1:             } catch (InterruptedException ie) {
1:                 ie.printStackTrace();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Print average transaction injection rate and response times.
1:      */
1:     public void printReport(PrintStream out) {
1:         long time = stopTime - startTime;
1: 
1:         long count = 0;
1:         long totalTime = 0;
1:         long min = Long.MAX_VALUE;
1:         long max = 0;
1:         for (int i = 0; i < threads.length; i++) {
1:             count += threads[i].count;
1:             totalTime += threads[i].totalTime;
1:             min = Math.min(min, threads[i].min);
1:             max = Math.max(max, threads[i].max);
1:         }
1: 
1:         double tps = (double) count * 1000 / time;
1:         double avgResp = (double) totalTime / count;
1: 
1:         out.println("Number of threads:\t" + threads.length);
1:         out.println("Average injection rate (tx/s):\t" + tps);
1:         out.println("Average response time (ms):\t" + avgResp);
1:         out.println("Minimum response time (ms):\t" + min);
1:         out.println("Maximum response time (ms):\t" + max);
1:     }
1: }
============================================================================