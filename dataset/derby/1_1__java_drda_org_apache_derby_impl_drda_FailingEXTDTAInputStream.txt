1:cf5cebf: /*
1:cf5cebf:    Derby - Class org.apache.derby.impl.drda.FailingEXTDTAReaderInputStream
1:cf5cebf: 
1:cf5cebf:    Licensed to the Apache Software Foundation (ASF) under one
1:cf5cebf:    or more contributor license agreements.  See the NOTICE file
1:cf5cebf:    distributed with this work for additional information
1:cf5cebf:    regarding copyright ownership.  The ASF licenses this file
1:cf5cebf:    to you under the Apache License, Version 2.0 (the
1:cf5cebf:    "License"); you may not use this file except in compliance
1:cf5cebf:    with the License.  You may obtain a copy of the License at
1:cf5cebf: 
1:cf5cebf:    http://www.apache.org/licenses/LICENSE-2.0
1:cf5cebf: 
1:cf5cebf:    Unless required by applicable law or agreed to in writing,
1:cf5cebf:    software distributed under the License is distributed on an
1:cf5cebf:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cf5cebf:    KIND, either express or implied.  See the License for the
1:cf5cebf:    specific language governing permissions and limitations
1:cf5cebf:    under the License.
1:cf5cebf: */
1:cf5cebf: package org.apache.derby.impl.drda;
1:cf5cebf: 
1:cf5cebf: import java.io.IOException;
1:cf5cebf: import java.io.InputStream;
1:cf5cebf: 
1:cf5cebf: /**
1:cf5cebf:  * A stream class that throws an exception on the first read request.
1:cf5cebf:  */
1:cf5cebf: public final class FailingEXTDTAInputStream
1:cf5cebf:         extends InputStream {
1:cf5cebf: 
1:cf5cebf:     /** The status byte used to determine which exception to throw. */
1:cf5cebf:     private final byte extdtaStatus;
1:cf5cebf: 
1:cf5cebf:     public FailingEXTDTAInputStream(byte extdtaStatus) {
1:cf5cebf:         this.extdtaStatus = extdtaStatus;
1:cf5cebf:     }
1:cf5cebf: 
1:cf5cebf:     /**
1:cf5cebf:      * Throws an exception.
1:cf5cebf:      *
1:cf5cebf:      * @return n/a
1:cf5cebf:      * @throws IOException The exception to throw as dictated by the status
1:cf5cebf:      *      byte sent by the client driver when reading user data and sending
1:cf5cebf:      *      it as EXTDTA.
1:cf5cebf:      */
1:cf5cebf:     public int read()
1:cf5cebf:             throws IOException {
1:cf5cebf:         EXTDTAReaderInputStream.throwEXTDTATransferException(extdtaStatus);
1:cf5cebf:         // Should never get this far, but just in case...
1:cf5cebf:         throw new IllegalStateException("programming error - EXTDTA status");
1:cf5cebf:     }
1:cf5cebf: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:cf5cebf
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.drda.FailingEXTDTAReaderInputStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: */
1: package org.apache.derby.impl.drda;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: /**
1:  * A stream class that throws an exception on the first read request.
1:  */
1: public final class FailingEXTDTAInputStream
1:         extends InputStream {
1: 
1:     /** The status byte used to determine which exception to throw. */
1:     private final byte extdtaStatus;
1: 
1:     public FailingEXTDTAInputStream(byte extdtaStatus) {
1:         this.extdtaStatus = extdtaStatus;
1:     }
1: 
1:     /**
1:      * Throws an exception.
1:      *
1:      * @return n/a
1:      * @throws IOException The exception to throw as dictated by the status
1:      *      byte sent by the client driver when reading user data and sending
1:      *      it as EXTDTA.
1:      */
1:     public int read()
1:             throws IOException {
1:         EXTDTAReaderInputStream.throwEXTDTATransferException(extdtaStatus);
1:         // Should never get this far, but just in case...
1:         throw new IllegalStateException("programming error - EXTDTA status");
1:     }
1: }
============================================================================