2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.sort.Scan
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.sort;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.ScanManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: import org.apache.derby.iapi.store.access.ScanInfo;
1:eac0369: 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
1:fa09146: // For JavaDoc references (i.e. @see)
1:fa09146: import org.apache.derby.iapi.store.access.ScanController;
1:fa09146: 
3:eac0369: /**
1:eac0369: 
1:eac0369: 	Abstract base class for all sort classes which return rows from the
1:eac0369: 	sort.  Subclasses must implement fetch, next, and close.
1:eac0369: 
2:eac0369: **/
1:eac0369: 
1:eac0369: public abstract class Scan implements ScanManager, ScanInfo
2:eac0369: {
1:eac0369: 	/*
1:eac0369: 	 * Methods of ScanController
1:eac0369: 	 */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * A call to allow client to indicate that current row does not qualify.
3:eac0369:      * <p>
1:eac0369:      * Indicates to the ScanController that the current row does not
1:eac0369:      * qualify for the scan.  If the isolation level of the scan allows, 
1:eac0369:      * this may result in the scan releasing the lock on this row.
1:eac0369:      * <p>
1:eac0369:      * Note that some scan implimentations may not support releasing locks on 
1:eac0369:      * non-qualifying rows, or may delay releasing the lock until sometime
1:eac0369:      * later in the scan (ie. it may be necessary to keep the lock until 
1:eac0369:      * either the scan is repositioned on the next row or page).
1:eac0369:      * <p>
1:eac0369:      * This call should only be made while the scan is positioned on a current
1:eac0369:      * valid row.
1:eac0369:      * <p>
1:eac0369:      * This call does not make sense for sort scans.
4:eac0369:      *
2:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void didNotQualify()
2:eac0369:         throws StandardException
1:eac0369:     {
2:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Fetch the next N rows from the table.
1:eac0369:      * <p>
1:eac0369:      * Currently unimplemented for sorts.
1:eac0369:      * <p>
1:eac0369:      **/
1:eac0369:     public int fetchNextGroup(
1:eac0369:     DataValueDescriptor[][]     row_array,
1:eac0369:     RowLocation[]               rowloc_array)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369:     }
1:eac0369: 
1:bbc927c:     public int fetchNextGroup(
1:bbc927c:     DataValueDescriptor[][]     row_array,
1:bbc927c:     RowLocation[]               old_rowloc_array,
1:bbc927c:     RowLocation[]               new_rowloc_array)
1:bbc927c:         throws StandardException
1:bbc927c:     {
1:bbc927c:         throw StandardException.newException(
1:bbc927c:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:bbc927c:     }
1:bbc927c: 
1:bbc927c: 
1:d376440:     /**
1:eac0369:      * Insert all rows that qualify for the current scan into the input
1:eac0369:      * Hash table.  
1:eac0369:      * <p>
1:eac0369:      * Currently unimplemented for sorts.
1:eac0369:      * <p>
1:eac0369:      **/
1:eac0369:     public void fetchSet(
1:eac0369:     long                    max_rowcnt,
1:eac0369:     int[]                   key_column_numbers,
1:eac0369:     BackingStoreHashtable   hash_table)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Returns true if the current position of the scan still qualifies
1:eac0369:     under the set of qualifiers passed to the openScan().
1:eac0369: 	@see ScanController#doesCurrentPositionQualify
1:eac0369:     **/
1:eac0369:     public boolean doesCurrentPositionQualify()
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369: 		return true;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Fetch the location of the current position in the scan.
1:eac0369: 	@see ScanController#fetchLocation
1:eac0369: 	**/
1:eac0369: 	public void fetchLocation(RowLocation templateLocation)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return ScanInfo object which describes performance of scan.
1:eac0369:      * <p>
1:eac0369:      * Return ScanInfo object which contains information about the current
1:eac0369:      * scan.
1:eac0369:      * <p>
1:eac0369:      * Currently the ScanInfo does not have any performance data.
1:eac0369:      *
1:eac0369:      * @see ScanInfo
1:eac0369:      *
1:eac0369: 	 * @return The ScanInfo object which contains info about current scan.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public ScanInfo getScanInfo()
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         return(this);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Get the total estimated number of rows in the container.
1:eac0369:      * <p>
1:eac0369:      * The number is a rough estimate and may be grossly off.  In general
1:eac0369:      * the server will cache the row count and then occasionally write
1:eac0369:      * the count unlogged to a backing store.  If the system happens to 
1:eac0369:      * shutdown before the store gets a chance to update the row count it
1:eac0369:      * may wander from reality.
1:eac0369:      * <p>
1:eac0369:      * This call is currently only supported on Heap conglomerates, it
1:eac0369:      * will throw an exception if called on btree conglomerates.
1:eac0369:      *
2:eac0369: 	 * @return The total estimated number of rows in the conglomerate.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public long getEstimatedRowCount()
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Set the total estimated number of rows in the container.
1:eac0369:      * <p>
1:eac0369:      * Often, after a scan, the client of RawStore has a much better estimate
1:eac0369:      * of the number of rows in the container than what store has.  For 
1:eac0369:      * instance if we implement some sort of update statistics command, or
1:eac0369:      * just after a create index a complete scan will have been done of the
1:eac0369:      * table.  In this case this interface allows the client to set the
1:eac0369:      * estimated row count for the container, and store will use that number
1:eac0369:      * for all future references.
1:eac0369:      * <p>
1:eac0369:      * This call is currently only supported on Heap conglomerates, it
1:eac0369:      * will throw an exception if called on btree conglomerates.
1:eac0369:      *
1:eac0369:      * @param count the estimated number of rows in the container.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void setEstimatedRowCount(long count)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Returns true if the current position of the scan is at a 
1:eac0369:     deleted row.
1:eac0369: 	@see ScanController#isCurrentPositionDeleted
1:eac0369:     **/
1:eac0369:     public boolean isCurrentPositionDeleted()
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return whether this is a keyed conglomerate.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return whether this is a keyed conglomerate.
1:eac0369:      **/
1:eac0369: 	public boolean isKeyed()
1:eac0369:     {
1:eac0369:         return(false);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return whether this scan is table locked.
1:eac0369:      *
1:eac0369: 	 * @return whether this is table locked.
1:eac0369:      **/
1:eac0369:     public boolean isTableLocked()
1:eac0369:     {
1:eac0369:         return(true);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Delete the row at the current position of the scan.
1:eac0369: 	@see ScanController#delete
1:eac0369:     **/
1:eac0369:     public boolean delete()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Reposition the current scan.
1:eac0369: 	@see ScanController#reopenScan
1:eac0369:     **/
1:eac0369: 	public void reopenScan(
1:eac0369:     DataValueDescriptor[]   startKeyValue,
1:eac0369:     int                     startSearchOperator,
1:eac0369:     Qualifier               qualifier[][],
1:eac0369:     DataValueDescriptor[]   stopKeyValue,
1:eac0369:     int                     stopSearchOperator)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Reposition the current scan.  This call is semantically the same as if
1:eac0369:     the current scan had been closed and a openScan() had been called instead.
1:eac0369:     The scan is reopened against the same conglomerate, and the scan
1:eac0369:     is reopened with the same "scan column list", "hold" and "forUpdate"
1:eac0369:     parameters passed in the original openScan.  
1:eac0369: 
1:eac0369: 	@exception StandardException Standard exception policy.
1:eac0369:     **/
1:eac0369: 	public void reopenScanByRowLocation(
1:eac0369:     RowLocation startRowLocation,
1:eac0369:     Qualifier qualifier[][])
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:     Replace the entire row at the current position of the scan.
1:eac0369: 	@see ScanController#replace
1:eac0369:     **/
1:eac0369:     public boolean replace(
1:eac0369:     DataValueDescriptor[]   val, 
1:eac0369:     FormatableBitSet                 validColumns)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Return a row location object of the correct type to be
1:eac0369: 	used in calls to fetchLocation.
1:eac0369: 	@see ScanController#newRowLocationTemplate
1:eac0369: 	**/
1:eac0369: 	public RowLocation newRowLocationTemplate()
1:eac0369: 		throws StandardException
1:eac0369:  	{
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:d376440:      *@see ScanController#positionAtRowLocation
1:d376440:      */
1:d376440:     public boolean positionAtRowLocation(RowLocation rl) 
1:d376440:         throws StandardException 
1:d376440:     {
1:d376440:         throw StandardException.newException(
1:d376440:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:d376440:     }
1:d376440: 
1:eac0369: 	/*
1:eac0369: 	 * Methods of ScanInfo
1:eac0369: 	 */
1:eac0369:    
1:eac0369:     /**
1:eac0369:      * Return all information gathered about the scan.
1:eac0369:      * <p>
1:eac0369:      * This routine returns a list of properties which contains all information
1:eac0369:      * gathered about the scan.  If a Property is passed in, then that property
1:eac0369:      * list is appeneded to, otherwise a new property object is created and
1:eac0369:      * returned.
1:eac0369:      * <p>
1:eac0369:      * Currently sort scans doesn't track any information.
1:eac0369:      *
1:eac0369:      * @param prop   Property list to fill in.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public Properties getAllScanInfo(Properties prop)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         if (prop == null)
1:eac0369:             prop = new Properties();
1:eac0369: 
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(SQLState.STORE_RTS_SCAN_TYPE),
1:eac0369: 			MessageService.getTextMessage(SQLState.STORE_RTS_SORT));
1:eac0369: 
1:eac0369:         return(prop);
1:eac0369:     }
1:1e762f5: 
1:1e762f5:     /**
1:1e762f5:      * @see org.apache.derby.iapi.store.access.ScanController#isHeldAfterCommit
1:1e762f5:      */
1:1e762f5:     public boolean isHeldAfterCommit() throws StandardException
1:1e762f5:     {
1:1e762f5:         throw StandardException.newException(
1:1e762f5:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:1e762f5:     }
1:1e762f5: 
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:86e051f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1e762f5
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @see org.apache.derby.iapi.store.access.ScanController#isHeldAfterCommit
1:      */
1:     public boolean isHeldAfterCommit() throws StandardException
1:     {
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:     }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: // For JavaDoc references (i.e. @see)
1: import org.apache.derby.iapi.store.access.ScanController;
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d376440
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *@see ScanController#positionAtRowLocation
1:      */
1:     public boolean positionAtRowLocation(RowLocation rl) 
1:         throws StandardException 
1:     {
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:     }
1: 
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:7a4afea
/////////////////////////////////////////////////////////////////////////
0:      * @param conglom   Conglomerate object of the conglomerate being changed.
commit:bbc927c
/////////////////////////////////////////////////////////////////////////
1:     public int fetchNextGroup(
1:     DataValueDescriptor[][]     row_array,
1:     RowLocation[]               old_rowloc_array,
1:     RowLocation[]               new_rowloc_array)
1:         throws StandardException
1:     {
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:     }
1: 
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.sort.Scan
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.sort;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: 
0: import org.apache.derby.iapi.services.io.Storable;
1: 
0: import org.apache.derby.iapi.types.Orderable;
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
1: import org.apache.derby.iapi.store.access.conglomerate.ScanManager;
1: 
1: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.ScanInfo;
1: 
0: import org.apache.derby.iapi.store.raw.Page;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 
1: 	Abstract base class for all sort classes which return rows from the
1: 	sort.  Subclasses must implement fetch, next, and close.
1: 
1: **/
1: 
1: public abstract class Scan implements ScanManager, ScanInfo
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/*
1: 	 * Methods of ScanController
1: 	 */
1: 
1:     /**
1:      * A call to allow client to indicate that current row does not qualify.
1:      * <p>
1:      * Indicates to the ScanController that the current row does not
1:      * qualify for the scan.  If the isolation level of the scan allows, 
1:      * this may result in the scan releasing the lock on this row.
1:      * <p>
1:      * Note that some scan implimentations may not support releasing locks on 
1:      * non-qualifying rows, or may delay releasing the lock until sometime
1:      * later in the scan (ie. it may be necessary to keep the lock until 
1:      * either the scan is repositioned on the next row or page).
1:      * <p>
1:      * This call should only be made while the scan is positioned on a current
1:      * valid row.
1:      * <p>
1:      * This call does not make sense for sort scans.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void didNotQualify()
1:         throws StandardException
1:     {
1:     }
1: 
1:     /**
1:      * Fetch the next N rows from the table.
1:      * <p>
1:      * Currently unimplemented for sorts.
1:      * <p>
1:      **/
1:     public int fetchNextGroup(
1:     DataValueDescriptor[][]     row_array,
1:     RowLocation[]               rowloc_array)
1:         throws StandardException
1:     {
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:     }
1: 
1:     /**
1:      * Insert all rows that qualify for the current scan into the input
1:      * Hash table.  
1:      * <p>
1:      * Currently unimplemented for sorts.
1:      * <p>
1:      **/
1:     public void fetchSet(
1:     long                    max_rowcnt,
1:     int[]                   key_column_numbers,
1:     BackingStoreHashtable   hash_table)
1:         throws StandardException
1:     {
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:     }
1: 
1:     /**
1:     Returns true if the current position of the scan still qualifies
1:     under the set of qualifiers passed to the openScan().
1: 	@see ScanController#doesCurrentPositionQualify
1:     **/
1:     public boolean doesCurrentPositionQualify()
1: 		throws StandardException
1:     {
1: 		return true;
1:     }
1: 
1: 	/**
1: 	Fetch the location of the current position in the scan.
1: 	@see ScanController#fetchLocation
1: 	**/
1: 	public void fetchLocation(RowLocation templateLocation)
1: 		throws StandardException
1: 	{
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1: 	}
1: 
1:     /**
1:      * Return ScanInfo object which describes performance of scan.
1:      * <p>
1:      * Return ScanInfo object which contains information about the current
1:      * scan.
1:      * <p>
1:      * Currently the ScanInfo does not have any performance data.
1:      *
1:      * @see ScanInfo
1:      *
1: 	 * @return The ScanInfo object which contains info about current scan.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public ScanInfo getScanInfo()
1: 		throws StandardException
1:     {
1:         return(this);
1:     }
1: 
1:     /**
1:      * Get the total estimated number of rows in the container.
1:      * <p>
1:      * The number is a rough estimate and may be grossly off.  In general
1:      * the server will cache the row count and then occasionally write
1:      * the count unlogged to a backing store.  If the system happens to 
1:      * shutdown before the store gets a chance to update the row count it
1:      * may wander from reality.
1:      * <p>
1:      * This call is currently only supported on Heap conglomerates, it
1:      * will throw an exception if called on btree conglomerates.
1:      *
1: 	 * @return The total estimated number of rows in the conglomerate.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public long getEstimatedRowCount()
1: 		throws StandardException
1:     {
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:     }
1: 
1:     /**
1:      * Set the total estimated number of rows in the container.
1:      * <p>
1:      * Often, after a scan, the client of RawStore has a much better estimate
1:      * of the number of rows in the container than what store has.  For 
1:      * instance if we implement some sort of update statistics command, or
1:      * just after a create index a complete scan will have been done of the
1:      * table.  In this case this interface allows the client to set the
1:      * estimated row count for the container, and store will use that number
1:      * for all future references.
1:      * <p>
1:      * This call is currently only supported on Heap conglomerates, it
1:      * will throw an exception if called on btree conglomerates.
1:      *
1:      * @param count the estimated number of rows in the container.
1:      *
1: 	 * @return The total estimated number of rows in the conglomerate.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void setEstimatedRowCount(long count)
1: 		throws StandardException
1:     {
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:     }
1: 
1:     /**
1:     Returns true if the current position of the scan is at a 
1:     deleted row.
1: 	@see ScanController#isCurrentPositionDeleted
1:     **/
1:     public boolean isCurrentPositionDeleted()
1: 		throws StandardException
1:     {
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:     }
1: 
1:     /**
1:      * Return whether this is a keyed conglomerate.
1:      * <p>
1:      *
1: 	 * @return whether this is a keyed conglomerate.
1:      **/
1: 	public boolean isKeyed()
1:     {
1:         return(false);
1:     }
1: 
1:     /**
1:      * Return whether this scan is table locked.
1:      *
1: 	 * @return whether this is table locked.
1:      **/
1:     public boolean isTableLocked()
1:     {
1:         return(true);
1:     }
1: 
1:     /**
1:     Delete the row at the current position of the scan.
1: 	@see ScanController#delete
1:     **/
1:     public boolean delete()
1: 		throws StandardException
1: 	{
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1: 	}
1: 
1:     /**
1:     Reposition the current scan.
1: 	@see ScanController#reopenScan
1:     **/
1: 	public void reopenScan(
1:     DataValueDescriptor[]   startKeyValue,
1:     int                     startSearchOperator,
1:     Qualifier               qualifier[][],
1:     DataValueDescriptor[]   stopKeyValue,
1:     int                     stopSearchOperator)
1:         throws StandardException
1:     {
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:     }
1: 
1:     /**
1:     Reposition the current scan.  This call is semantically the same as if
1:     the current scan had been closed and a openScan() had been called instead.
1:     The scan is reopened against the same conglomerate, and the scan
1:     is reopened with the same "scan column list", "hold" and "forUpdate"
1:     parameters passed in the original openScan.  
1: 
1: 	@exception StandardException Standard exception policy.
1:     **/
1: 	public void reopenScanByRowLocation(
1:     RowLocation startRowLocation,
1:     Qualifier qualifier[][])
1:         throws StandardException
1:     {
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:     }
1: 
1:     /**
1:     Replace the entire row at the current position of the scan.
1: 	@see ScanController#replace
1:     **/
1:     public boolean replace(
1:     DataValueDescriptor[]   val, 
1:     FormatableBitSet                 validColumns)
1: 		throws StandardException
1: 	{
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1: 	}
1: 
1: 	/**
1: 	Return a row location object of the correct type to be
1: 	used in calls to fetchLocation.
1: 	@see ScanController#newRowLocationTemplate
1: 	**/
1: 	public RowLocation newRowLocationTemplate()
1: 		throws StandardException
1:  	{
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1: 	}
1: 
1: 	/*
0: 	** Methods of ScanManager
1: 	*/
1: 
1:     /**
0:      * Do work necessary to maintain the current position in the scan.
1:      * <p>
0:      * The latched page in the conglomerate "congomid" is changing, do
0:      * whatever is necessary to maintain the current position of the scan.
0:      * For some conglomerates this may be a no-op.
1:      * <p>
1:      *
0:      * @param conlgom   Conglomerate object of the conglomerate being changed.
0:      * @param page      Page in the conglomerate being changed.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     public void savePosition(Conglomerate conglom, Page page)
1:         throws StandardException
1: 	{
0:         // RESOLVE (mikem), under the current implementation all scans within
0:         // a transaction are called rather than just the ones with the right
0:         // conglomid.  For now just have sort scans ignore the call. 
1:         
0:         return;
1: 	}
1: 
1: 	/*
1: 	 * Methods of ScanInfo
1: 	 */
1:    
1:     /**
1:      * Return all information gathered about the scan.
1:      * <p>
1:      * This routine returns a list of properties which contains all information
1:      * gathered about the scan.  If a Property is passed in, then that property
1:      * list is appeneded to, otherwise a new property object is created and
1:      * returned.
1:      * <p>
1:      * Currently sort scans doesn't track any information.
1:      *
1:      * @param prop   Property list to fill in.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public Properties getAllScanInfo(Properties prop)
1: 		throws StandardException
1:     {
1:         if (prop == null)
1:             prop = new Properties();
1: 
1:         prop.put(
1: 			MessageService.getTextMessage(SQLState.STORE_RTS_SCAN_TYPE),
1: 			MessageService.getTextMessage(SQLState.STORE_RTS_SORT));
1: 
1:         return(prop);
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.sort;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: 
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.types.Orderable;
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
0: import org.apache.derby.iapi.store.access.conglomerate.ScanManager;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.ScanInfo;
0: 
0: import org.apache.derby.iapi.store.raw.Page;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import java.util.Properties;
0: 
0: /**
0: 
0: 	Abstract base class for all sort classes which return rows from the
0: 	sort.  Subclasses must implement fetch, next, and close.
0: 
0: **/
0: 
0: public abstract class Scan implements ScanManager, ScanInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/*
0: 	 * Methods of ScanController
0: 	 */
0: 
0:     /**
0:      * A call to allow client to indicate that current row does not qualify.
0:      * <p>
0:      * Indicates to the ScanController that the current row does not
0:      * qualify for the scan.  If the isolation level of the scan allows, 
0:      * this may result in the scan releasing the lock on this row.
0:      * <p>
0:      * Note that some scan implimentations may not support releasing locks on 
0:      * non-qualifying rows, or may delay releasing the lock until sometime
0:      * later in the scan (ie. it may be necessary to keep the lock until 
0:      * either the scan is repositioned on the next row or page).
0:      * <p>
0:      * This call should only be made while the scan is positioned on a current
0:      * valid row.
0:      * <p>
0:      * This call does not make sense for sort scans.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void didNotQualify()
0:         throws StandardException
0:     {
0:     }
0: 
0:     /**
0:      * Fetch the next N rows from the table.
0:      * <p>
0:      * Currently unimplemented for sorts.
0:      * <p>
0:      **/
0:     public int fetchNextGroup(
0:     DataValueDescriptor[][]     row_array,
0:     RowLocation[]               rowloc_array)
0:         throws StandardException
0:     {
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0:     }
0: 
0:     /**
0:      * Insert all rows that qualify for the current scan into the input
0:      * Hash table.  
0:      * <p>
0:      * Currently unimplemented for sorts.
0:      * <p>
0:      **/
0:     public void fetchSet(
0:     long                    max_rowcnt,
0:     int[]                   key_column_numbers,
0:     BackingStoreHashtable   hash_table)
0:         throws StandardException
0:     {
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0:     }
0: 
0:     /**
0:     Returns true if the current position of the scan still qualifies
0:     under the set of qualifiers passed to the openScan().
0: 	@see ScanController#doesCurrentPositionQualify
0:     **/
0:     public boolean doesCurrentPositionQualify()
0: 		throws StandardException
0:     {
0: 		return true;
0:     }
0: 
0: 	/**
0: 	Fetch the location of the current position in the scan.
0: 	@see ScanController#fetchLocation
0: 	**/
0: 	public void fetchLocation(RowLocation templateLocation)
0: 		throws StandardException
0: 	{
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0: 	}
0: 
0:     /**
0:      * Return ScanInfo object which describes performance of scan.
0:      * <p>
0:      * Return ScanInfo object which contains information about the current
0:      * scan.
0:      * <p>
0:      * Currently the ScanInfo does not have any performance data.
0:      *
0:      * @see ScanInfo
0:      *
0: 	 * @return The ScanInfo object which contains info about current scan.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public ScanInfo getScanInfo()
0: 		throws StandardException
0:     {
0:         return(this);
0:     }
0: 
0:     /**
0:      * Get the total estimated number of rows in the container.
0:      * <p>
0:      * The number is a rough estimate and may be grossly off.  In general
0:      * the server will cache the row count and then occasionally write
0:      * the count unlogged to a backing store.  If the system happens to 
0:      * shutdown before the store gets a chance to update the row count it
0:      * may wander from reality.
0:      * <p>
0:      * This call is currently only supported on Heap conglomerates, it
0:      * will throw an exception if called on btree conglomerates.
0:      *
0: 	 * @return The total estimated number of rows in the conglomerate.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public long getEstimatedRowCount()
0: 		throws StandardException
0:     {
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0:     }
0: 
0:     /**
0:      * Set the total estimated number of rows in the container.
0:      * <p>
0:      * Often, after a scan, the client of RawStore has a much better estimate
0:      * of the number of rows in the container than what store has.  For 
0:      * instance if we implement some sort of update statistics command, or
0:      * just after a create index a complete scan will have been done of the
0:      * table.  In this case this interface allows the client to set the
0:      * estimated row count for the container, and store will use that number
0:      * for all future references.
0:      * <p>
0:      * This call is currently only supported on Heap conglomerates, it
0:      * will throw an exception if called on btree conglomerates.
0:      *
0:      * @param count the estimated number of rows in the container.
0:      *
0: 	 * @return The total estimated number of rows in the conglomerate.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void setEstimatedRowCount(long count)
0: 		throws StandardException
0:     {
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0:     }
0: 
0:     /**
0:     Returns true if the current position of the scan is at a 
0:     deleted row.
0: 	@see ScanController#isCurrentPositionDeleted
0:     **/
0:     public boolean isCurrentPositionDeleted()
0: 		throws StandardException
0:     {
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0:     }
0: 
0:     /**
0:      * Return whether this is a keyed conglomerate.
0:      * <p>
0:      *
0: 	 * @return whether this is a keyed conglomerate.
0:      **/
0: 	public boolean isKeyed()
0:     {
0:         return(false);
0:     }
0: 
0:     /**
0:      * Return whether this scan is table locked.
0:      *
0: 	 * @return whether this is table locked.
0:      **/
0:     public boolean isTableLocked()
0:     {
0:         return(true);
0:     }
0: 
0:     /**
0:     Delete the row at the current position of the scan.
0: 	@see ScanController#delete
0:     **/
0:     public boolean delete()
0: 		throws StandardException
0: 	{
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0: 	}
0: 
0:     /**
0:     Reposition the current scan.
0: 	@see ScanController#reopenScan
0:     **/
0: 	public void reopenScan(
0:     DataValueDescriptor[]   startKeyValue,
0:     int                     startSearchOperator,
0:     Qualifier               qualifier[][],
0:     DataValueDescriptor[]   stopKeyValue,
0:     int                     stopSearchOperator)
0:         throws StandardException
0:     {
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0:     }
0: 
0:     /**
0:     Reposition the current scan.  This call is semantically the same as if
0:     the current scan had been closed and a openScan() had been called instead.
0:     The scan is reopened against the same conglomerate, and the scan
0:     is reopened with the same "scan column list", "hold" and "forUpdate"
0:     parameters passed in the original openScan.  
0: 
0: 	@exception StandardException Standard exception policy.
0:     **/
0: 	public void reopenScanByRowLocation(
0:     RowLocation startRowLocation,
0:     Qualifier qualifier[][])
0:         throws StandardException
0:     {
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0:     }
0: 
0:     /**
0:     Replace the entire row at the current position of the scan.
0: 	@see ScanController#replace
0:     **/
0:     public boolean replace(
0:     DataValueDescriptor[]   val, 
0:     FormatableBitSet                 validColumns)
0: 		throws StandardException
0: 	{
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0: 	}
0: 
0: 	/**
0: 	Return a row location object of the correct type to be
0: 	used in calls to fetchLocation.
0: 	@see ScanController#newRowLocationTemplate
0: 	**/
0: 	public RowLocation newRowLocationTemplate()
0: 		throws StandardException
0:  	{
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0: 	}
0: 
0: 	/*
0: 	** Methods of ScanManager
0: 	*/
0: 
0:     /**
0:      * Do work necessary to maintain the current position in the scan.
0:      * <p>
0:      * The latched page in the conglomerate "congomid" is changing, do
0:      * whatever is necessary to maintain the current position of the scan.
0:      * For some conglomerates this may be a no-op.
0:      * <p>
0:      *
0:      * @param conlgom   Conglomerate object of the conglomerate being changed.
0:      * @param page      Page in the conglomerate being changed.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void savePosition(Conglomerate conglom, Page page)
0:         throws StandardException
0: 	{
0:         // RESOLVE (mikem), under the current implementation all scans within
0:         // a transaction are called rather than just the ones with the right
0:         // conglomid.  For now just have sort scans ignore the call. 
0:         
0:         return;
0: 	}
0: 
0: 	/*
0: 	 * Methods of ScanInfo
0: 	 */
0:    
0:     /**
0:      * Return all information gathered about the scan.
0:      * <p>
0:      * This routine returns a list of properties which contains all information
0:      * gathered about the scan.  If a Property is passed in, then that property
0:      * list is appeneded to, otherwise a new property object is created and
0:      * returned.
0:      * <p>
0:      * Currently sort scans doesn't track any information.
0:      *
0:      * @param prop   Property list to fill in.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public Properties getAllScanInfo(Properties prop)
0: 		throws StandardException
0:     {
0:         if (prop == null)
0:             prop = new Properties();
0: 
0:         prop.put(
0: 			MessageService.getTextMessage(SQLState.STORE_RTS_SCAN_TYPE),
0: 			MessageService.getTextMessage(SQLState.STORE_RTS_SORT));
0: 
0:         return(prop);
0:     }
0: }
============================================================================