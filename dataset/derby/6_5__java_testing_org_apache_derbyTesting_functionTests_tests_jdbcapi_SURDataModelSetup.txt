1:bc50840: /*
1:37952cf:  *
1:bc50840:  * Derby - Class SURDataModelSetup
3:bc50840:  *
1:dff95a1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:  * contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:  * this work for additional information regarding copyright ownership.
1:dff95a1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:  * (the "License"); you may not use this file except in compliance with
1:dff95a1:  * the License.  You may obtain a copy of the License at
1:bc50840:  *
1:bc50840:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bc50840:  *
1:bc50840:  * Unless required by applicable law or agreed to in writing, 
1:bc50840:  * software distributed under the License is distributed on an 
1:bc50840:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:bc50840:  * either express or implied. See the License for the specific 
1:bc50840:  * language governing permissions and limitations under the License.
5:bc50840:  */
1:bc50840: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:bc50840: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseTestCase;
1:0cd162b: import org.apache.derbyTesting.junit.TestConfiguration;
1:3bd1dd8: 
1:bc50840: import java.sql.Connection;
1:bc50840: import java.sql.PreparedStatement;
1:bc50840: import java.sql.SQLException;
1:bc50840: import java.sql.Statement;
1:bc50840: import junit.framework.Test;
1:bc50840: import java.util.Set;
1:bc50840: import java.util.HashSet;
1:bc50840: import java.util.Arrays;
1:bc50840: import java.util.Collections;
1:27fff3c: 
6:bc50840: /**
1:bc50840:  * This class is a decorator for the Scrollable Updatable Resultset
1:bc50840:  * tests.  It sets up a datamodel and populates it with data.
1:37952cf:  */
1:27fff3c: public class SURDataModelSetup extends BaseJDBCTestSetup
1:576a49f: {  
1:37952cf:     /**
1:bc50840:      * Constructor.
1:bc50840:      * @param test test to decorate with this setup
1:bc50840:      * @param model enumerator for which model to use.
1:bc50840:      * (Alternatively we could use a subclass for each model)
1:bc50840:      */
1:bc50840:     public SURDataModelSetup(Test test, SURDataModel model) {
1:bc50840:         super(test);
1:bc50840:         this.model = model;       
4:bc50840:     }
1:c049abf: 
1:c049abf:      /**
1:bc50840:      * Creates a datamodel for testing Scrollable Updatable ResultSets
1:bc50840:      * and populates the database model with data.
1:bc50840:      * @param model enumerator for which model to use
1:bc50840:      * @param con connection to database
1:c049abf:      * @param records number of records in the data model
1:bc50840:      */
1:c049abf:     public static void createDataModel(SURDataModel model, Connection con,
1:c049abf:                                        int records) 
2:bc50840:         throws SQLException
4:bc50840:     {
1:37952cf:         
1:ddeb000:         BaseJDBCTestCase.dropTable(con, "T1");
1:37952cf:         
1:ddeb000:         Statement statement = con.createStatement();     
1:27fff3c:         
1:bc50840:         /** Create the table */
1:bc50840:         statement.execute(model.getCreateTableStatement());
1:27fff3c:         BaseTestCase.println(model.getCreateTableStatement());
11:bc50840:         
1:bc50840:         /** Create secondary index */
1:bc50840:         if (model.hasSecondaryKey()) {
1:bc50840:             statement.execute("create index a_on_t on t1(a)");
1:27fff3c:             BaseTestCase.println("create index a_on_t on t1(a)");
1:bc50840:         }
1:bc50840:         
1:bc50840:         /** Populate with data */
1:bc50840:         PreparedStatement ps = con.
1:4c9b831:             prepareStatement("insert into t1 values (?,?,?,?,?)");
1:bc50840:         
1:c049abf:         for (int i=0; i<records; i++) {
1:bc50840:             ps.setInt(1, i);
1:bc50840:             ps.setInt(2, i);
1:bc50840:             ps.setInt(3, i*2 + 17);
1:bc50840:             ps.setString(4, "Tuple " +i);
1:4c9b831:             ps.setString(5, "C-tuple "+i);
1:bc50840:             ps.addBatch();
1:bc50840:         }
1:bc50840:         ps.executeBatch();
1:a6464f2:         ps.close();
1:a6464f2:         statement.close();
1:bc50840:         con.commit();
1:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:bc50840:      * Creates a datamodel for testing Scrollable Updatable ResultSets
1:bc50840:      * and populates the database model with data.
1:c049abf:      * The model will be set up with the number of records as defined by
1:c049abf:      * the recordCount attribute.
1:c049abf:      * @param model enumerator for which model to use
1:c049abf:      * @param con connection to database
1:c049abf:      */
1:c049abf:     public static void createDataModel(SURDataModel model, Connection con) 
1:c049abf:         throws SQLException
1:c049abf:     {
1:c049abf:         createDataModel(model, con, recordCount);
1:c049abf:     }
1:c049abf:     
1:c049abf:     /**
1:c049abf:      * Creates a datamodel for testing Scrollable Updatable ResultSets
1:c049abf:      * and populates the database model with data.
1:bc50840:      */
1:576a49f:     protected void setUp() throws  Exception {       
1:bc50840:         println("Setting up datamodel: " + model);
1:27fff3c: 
2:bc50840:         try {
1:27fff3c:             Connection con = getConnection();
1:27fff3c:             con.setAutoCommit(false);
1:bc50840:             createDataModel(model, con);
2:bc50840:         } catch (SQLException e) {
1:bc50840:             printStackTrace(e); // Print the entire stack
1:bc50840:             throw e;
1:bc50840:         }
1:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:bc50840:      * Delete the datamodel
1:bc50840:      */
1:576a49f:     protected void tearDown() 
1:bc50840:         throws Exception
1:bc50840:     {
1:bc50840:         try {
1:27fff3c:             Connection con = getConnection();
1:bc50840:             con.rollback();
2:bc50840:             con.createStatement().execute("drop table t1");
1:bc50840:             con.commit();
1:bc50840:         } catch (SQLException e) {
1:bc50840:             printStackTrace(e);
1:bc50840:         }
1:27fff3c:         super.tearDown();
1:bc50840:     }
1:bc50840:     
1:bc50840:     public String toString() {
1:bc50840:         return "SURDataModel tests with model: " + model;
1:bc50840:     }
1:bc50840: 
1:bc50840:     private final SURDataModel model;
1:bc50840:     final static int recordCount = 10;  // Number of records in data model.  
1:bc50840:         
1:bc50840:     /**
1:bc50840:      * Enum for the layout of the data model
1:bc50840:      */
1:bc50840:     public final static class SURDataModel {
1:bc50840: 
1:bc50840:         /** Model with no keys */
1:bc50840:         public final static SURDataModel MODEL_WITH_NO_KEYS = 
1:bc50840:             new SURDataModel("NO_KEYS");
1:bc50840:         
1:bc50840:         /** Model with primary key */
1:bc50840:         public final static SURDataModel MODEL_WITH_PK = 
1:bc50840:             new SURDataModel("PK");
1:bc50840:         
1:bc50840:         /** Model with secondary index */
1:bc50840:         public final static SURDataModel MODEL_WITH_SECONDARY_KEY = 
1:bc50840:             new SURDataModel("SECONDARY_KEY");
1:bc50840:         
1:bc50840:         /** Model with primary key and secondary index */
1:bc50840:         public final static SURDataModel MODEL_WITH_PK_AND_SECONDARY_KEY = 
1:bc50840:             new SURDataModel("PK_AND_SECONDARY_KEY");
1:bc50840: 
1:bc50840:         /** Array with all values */
1:bc50840:         private final static Set values = Collections.unmodifiableSet
1:e18f54b:             (new HashSet<SURDataModel>(Arrays.asList(
1:bc50840:                 MODEL_WITH_NO_KEYS, 
1:bc50840:                 MODEL_WITH_PK, 
1:bc50840:                 MODEL_WITH_SECONDARY_KEY,
1:bc50840:                 MODEL_WITH_PK_AND_SECONDARY_KEY
1:e18f54b:             )));
1:bc50840:         
1:bc50840:         /**
1:bc50840:          * Returns an unmodifyable set of all valid data models
1:bc50840:          */ 
1:bc50840:         public final static Set values() {
1:bc50840:             return values;
1:bc50840:         }
1:bc50840:        
1:bc50840: 
1:bc50840:         /** Returns true if this model has primary key */
1:bc50840:         public boolean hasPrimaryKey() {
1:bc50840:             return (this==MODEL_WITH_PK || 
1:bc50840:                     this==MODEL_WITH_PK_AND_SECONDARY_KEY);
1:bc50840:         }
1:bc50840:         
1:bc50840:         /** Returns true if this model has a secondary key */
1:bc50840:         public boolean hasSecondaryKey() {
1:bc50840:             return (this==MODEL_WITH_SECONDARY_KEY || 
1:bc50840:                     this==MODEL_WITH_PK_AND_SECONDARY_KEY);
1:bc50840:         }
1:bc50840: 
1:bc50840:         /**
1:bc50840:          * Returns the string for creating the table
1:bc50840:          */
1:bc50840:         public String getCreateTableStatement() {
1:bc50840:             return hasPrimaryKey() 
1:4c9b831:                 ? "create table t1 (id int primary key, a int, b int, c varchar(5000), d clob)"
1:4c9b831:                 : "create table t1 (id int, a int, b int, c varchar(5000), d clob)";
1:bc50840:         }
1:bc50840: 
1:bc50840:         /**
1:bc50840:          * Returns a string representation of the model 
1:bc50840:          * @return string representation of this object
1:bc50840:          */
1:bc50840:         public String toString() {
1:bc50840:             return name;
1:bc50840:         }
1:bc50840:         
1:bc50840:         /**
1:bc50840:          * Constructor
1:bc50840:          */
1:bc50840:         private SURDataModel(String name) {
1:bc50840:             this.name = name;
1:bc50840:         }
1:bc50840:         
1:bc50840:         
1:bc50840:         
1:bc50840:         private final String name;
1:bc50840:     }
1:bc50840: 
1:bc50840:     /**
1:bc50840:      * Prints the stack trace. If run in the harness, the
1:bc50840:      * harness will mark the test as failed if this method
1:bc50840:      * has been called.
1:bc50840:      */
1:bc50840:     static void printStackTrace(Throwable t) {
1:37952cf:         BaseJDBCTestCase.printStackTrace(t);
1:bc50840:     }
1:bc50840: }
============================================================================
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:4c9b831
/////////////////////////////////////////////////////////////////////////
1:             prepareStatement("insert into t1 values (?,?,?,?,?)");
1:             ps.setString(5, "C-tuple "+i);
/////////////////////////////////////////////////////////////////////////
1:                 ? "create table t1 (id int primary key, a int, b int, c varchar(5000), d clob)"
1:                 : "create table t1 (id int, a int, b int, c varchar(5000), d clob)";
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
1:             (new HashSet<SURDataModel>(Arrays.asList(
1:             )));
commit:c049abf
/////////////////////////////////////////////////////////////////////////
1: 
1:      /**
1:      * @param records number of records in the data model
1:     public static void createDataModel(SURDataModel model, Connection con,
1:                                        int records) 
/////////////////////////////////////////////////////////////////////////
1:         for (int i=0; i<records; i++) {
/////////////////////////////////////////////////////////////////////////
1:      * The model will be set up with the number of records as defined by
1:      * the recordCount attribute.
1:      * @param model enumerator for which model to use
1:      * @param con connection to database
1:      */
1:     public static void createDataModel(SURDataModel model, Connection con) 
1:         throws SQLException
1:     {
1:         createDataModel(model, con, recordCount);
1:     }
1:     
1:     /**
1:      * Creates a datamodel for testing Scrollable Updatable ResultSets
1:      * and populates the database model with data.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ddeb000
/////////////////////////////////////////////////////////////////////////
1:         BaseJDBCTestCase.dropTable(con, "T1");
1:         Statement statement = con.createStatement();     
/////////////////////////////////////////////////////////////////////////
commit:0cd162b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
0:             if (!TestConfiguration.getCurrent().getJDBCClient().isEmbedded()) {
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
commit:27fff3c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestSetup;
0: import org.apache.derbyTesting.functionTests.util.BaseTestCase;
/////////////////////////////////////////////////////////////////////////
1: public class SURDataModelSetup extends BaseJDBCTestSetup
/////////////////////////////////////////////////////////////////////////
0:         Statement statement = con.createStatement();
1:         
0:             statement.execute("drop table t1"); 
/////////////////////////////////////////////////////////////////////////
1:         
1:         BaseTestCase.println(model.getCreateTableStatement());
1:             BaseTestCase.println("create index a_on_t on t1(a)");
/////////////////////////////////////////////////////////////////////////
1: 
1:             Connection con = getConnection();
1:             con.setAutoCommit(false);
/////////////////////////////////////////////////////////////////////////
1:             Connection con = getConnection();
1:         super.tearDown();
/////////////////////////////////////////////////////////////////////////
commit:09ffc9b
/////////////////////////////////////////////////////////////////////////
0:         final Connection rcon = SURBaseTest.openDefaultConnection();
commit:a6464f2
/////////////////////////////////////////////////////////////////////////
1:         ps.close();
1:         statement.close();
commit:576a49f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: {  
/////////////////////////////////////////////////////////////////////////
1:     protected void setUp() throws  Exception {       
/////////////////////////////////////////////////////////////////////////
1:     protected void tearDown() 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:37952cf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.TestConfiguration;
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	 /**
0:      * Configuration for the test case.
0:      * The configuration is created based on system properties.
1:      *
0:      * @see TestConfiguration
1:      */
0:     public static final TestConfiguration CONFIG = 
0:         TestConfiguration.DERBY_TEST_CONFIG;
1:     
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:      * Println code to print chatty informational messages.
0:         BaseJDBCTestCase.println(text);
/////////////////////////////////////////////////////////////////////////
1:         BaseJDBCTestCase.printStackTrace(t);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:bc50840
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class SURDataModelSetup
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
0: import org.apache.derbyTesting.functionTests.util.DerbyJUnitTest;
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: import java.sql.Connection;
0: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import junit.extensions.TestSetup;
1: import junit.framework.Test;
1: import java.util.Set;
0: import java.util.Iterator;
1: import java.util.HashSet;
1: import java.util.Arrays;
1: import java.util.Collections;
1: 
1: /**
1:  * This class is a decorator for the Scrollable Updatable Resultset
1:  * tests.  It sets up a datamodel and populates it with data.
0:  * @author Andreas Korneliussen
1:  */
0: public class SURDataModelSetup extends TestSetup
1: {
1:     /**
1:      * Constructor.
1:      * @param test test to decorate with this setup
1:      * @param model enumerator for which model to use.
1:      * (Alternatively we could use a subclass for each model)
1:      */
1:     public SURDataModelSetup(Test test, SURDataModel model) {
1:         super(test);
1:         this.model = model;       
1:     }
1:     
1:     /**
1:      * Creates a datamodel for testing Scrollable Updatable ResultSets
1:      * and populates the database model with data.
1:      * @param model enumerator for which model to use
1:      * @param con connection to database
1:      */
0:     public static void createDataModel(SURDataModel model, Connection con) 
1:         throws SQLException
1:     {
1:         try { 
1:             con.createStatement().execute("drop table t1"); 
1:         } catch (SQLException e) {
0:             assertEquals("'drop table t1' failed with unexpected SQL State",
0:                          TABLE_EXISTS_SQL_STATE, e.getSQLState());
1:             
0:             // The net framework does not give any valuable error code
0:             if (TestUtil.isNetFramework()) {
1:                 
0:                 assertEquals("'drop table t1' failed with unexpected error code",
0:                              NET_ERROR, e.getErrorCode());
0:             } else {
0:                 assertEquals("'drop table t1' failed with unexpected error code",
0:                              TABLE_EXISTS_ERRORCODE, e.getErrorCode());
1:             }
1:             
0:         };
1:         
0:         Statement statement = con.createStatement();
1:         
1:         /** Create the table */
1:         statement.execute(model.getCreateTableStatement());
0:         println(model.getCreateTableStatement());
1:         
1:         /** Create secondary index */
1:         if (model.hasSecondaryKey()) {
1:             statement.execute("create index a_on_t on t1(a)");
0:             println("create index a_on_t on t1(a)");
1:         }
1:         
1:         /** Populate with data */
1:         PreparedStatement ps = con.
0:             prepareStatement("insert into t1 values (?,?,?,?)");
1:         
0:         for (int i=0; i<recordCount; i++) {
1:             ps.setInt(1, i);
1:             ps.setInt(2, i);
1:             ps.setInt(3, i*2 + 17);
1:             ps.setString(4, "Tuple " +i);
1:             ps.addBatch();
1:         }
1:         ps.executeBatch();
1:         con.commit();
1:     }
1:     
1:     /**
1:      * Creates a datamodel for testing Scrollable Updatable ResultSets
1:      * and populates the database model with data.
1:      */
0:     public void setUp() throws  Exception {       
0:         TestUtil.loadDriver();
1:         println("Setting up datamodel: " + model);
1:         try {
0:             con = getNewConnection();
1:             createDataModel(model, con);
1:         } catch (SQLException e) {
1:             printStackTrace(e); // Print the entire stack
1:             throw e;
1:         }
1:     }
1:     
1:     /**
1:      * Delete the datamodel
1:      */
0:     public void tearDown() 
1:         throws Exception
1:     {
1:         try {
1:             con.rollback();
1:             con.createStatement().execute("drop table t1");
1:             con.commit();
0:             con.close();
1:         } catch (SQLException e) {
1:             printStackTrace(e);
1:         }
1:     }
1:     
1:     public String toString() {
1:         return "SURDataModel tests with model: " + model;
1:     }
1: 
1:     /**
0:      * Get a JDBC Connection to the Derby database
1:      */
0:     private Connection getNewConnection() 
1:         throws SQLException
1:     {
0:         final Connection rcon = SURBaseTest.getConnection();
0:         rcon.setAutoCommit(false);
0:         return rcon;
1:     }
1: 
0:     private Connection con = null;
1:     private final SURDataModel model;
1:     final static int recordCount = 10;  // Number of records in data model.  
1:         
1:     /**
1:      * Enum for the layout of the data model
1:      */
1:     public final static class SURDataModel {
1: 
1:         /** Model with no keys */
1:         public final static SURDataModel MODEL_WITH_NO_KEYS = 
1:             new SURDataModel("NO_KEYS");
1:         
1:         /** Model with primary key */
1:         public final static SURDataModel MODEL_WITH_PK = 
1:             new SURDataModel("PK");
1:         
1:         /** Model with secondary index */
1:         public final static SURDataModel MODEL_WITH_SECONDARY_KEY = 
1:             new SURDataModel("SECONDARY_KEY");
1:         
1:         /** Model with primary key and secondary index */
1:         public final static SURDataModel MODEL_WITH_PK_AND_SECONDARY_KEY = 
1:             new SURDataModel("PK_AND_SECONDARY_KEY");
1: 
1:         /** Array with all values */
1:         private final static Set values = Collections.unmodifiableSet
0:             (new HashSet((Arrays.asList(new SURDataModel[] {
1:                 MODEL_WITH_NO_KEYS, 
1:                 MODEL_WITH_PK, 
1:                 MODEL_WITH_SECONDARY_KEY,
1:                 MODEL_WITH_PK_AND_SECONDARY_KEY
0:             }))));
1:         
1:         /**
1:          * Returns an unmodifyable set of all valid data models
1:          */ 
1:         public final static Set values() {
1:             return values;
1:         }
1:        
1: 
1:         /** Returns true if this model has primary key */
1:         public boolean hasPrimaryKey() {
1:             return (this==MODEL_WITH_PK || 
1:                     this==MODEL_WITH_PK_AND_SECONDARY_KEY);
1:         }
1:         
1:         /** Returns true if this model has a secondary key */
1:         public boolean hasSecondaryKey() {
1:             return (this==MODEL_WITH_SECONDARY_KEY || 
1:                     this==MODEL_WITH_PK_AND_SECONDARY_KEY);
1:         }
1: 
1:         /**
1:          * Returns the string for creating the table
1:          */
1:         public String getCreateTableStatement() {
1:             return hasPrimaryKey() 
0:                 ? "create table t1 (id int primary key, a int, b int, c varchar(5000))"
0:                 : "create table t1 (id int, a int, b int, c varchar(5000))";
1:         }
1: 
1:         /**
1:          * Returns a string representation of the model 
1:          * @return string representation of this object
1:          */
1:         public String toString() {
1:             return name;
1:         }
1:         
1:         /**
1:          * Constructor
1:          */
1:         private SURDataModel(String name) {
1:             this.name = name;
1:         }
1:         
1:         
1:         
1:         private final String name;
1:     }
1: 
1:     /**
0:      * <p>
0:      * Debug code to print chatty informational messages.
0:      * </p>
1:      */
0:     public static void println(String text)
1:     {
0:         DerbyJUnitTest.println(text);
1:     }
1:     
1:     /**
1:      * Prints the stack trace. If run in the harness, the
1:      * harness will mark the test as failed if this method
1:      * has been called.
1:      */
1:     static void printStackTrace(Throwable t) {
0:         DerbyJUnitTest.printStackTrace(t);
1:     }
1:     
1:     /**
0:      * Error codes and SQL state
1:      */
0:     private final static String TABLE_EXISTS_SQL_STATE = "42Y55";
0:     private final static int TABLE_EXISTS_ERRORCODE = 20000;
0:     private final static int NET_ERROR = -1; 
1: }
============================================================================