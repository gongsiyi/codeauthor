1:7a9ce7e: /*
1:7a9ce7e:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics
1:7a9ce7e: 
1:7a9ce7e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9ce7e:    contributor license agreements.  See the NOTICE file distributed with
1:7a9ce7e:    this work for additional information regarding copyright ownership.
1:7a9ce7e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7a9ce7e:    (the "License"); you may not use this file except in compliance with
1:7a9ce7e:    the License.  You may obtain a copy of the License at
1:7a9ce7e: 
1:7a9ce7e:       http://www.apache.org/licenses/LICENSE-2.0
1:7a9ce7e: 
1:7a9ce7e:    Unless required by applicable law or agreed to in writing, software
1:7a9ce7e:    distributed under the License is distributed on an "AS IS" BASIS,
1:7a9ce7e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9ce7e:    See the License for the specific language governing permissions and
1:7a9ce7e:    limitations under the License.
1:7a9ce7e: 
1:7a9ce7e:  */
1:7a9ce7e: 
1:7a9ce7e: package org.apache.derby.impl.sql.execute.rts;
1:7a9ce7e: 
1:5825332: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
1:7a9ce7e: import org.apache.derby.iapi.services.i18n.MessageService;
1:7a9ce7e: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1:7a9ce7e: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1:7a9ce7e: import org.apache.derby.iapi.reference.SQLState;
1:7a9ce7e: 
1:7a9ce7e: /**
1:7a9ce7e:  * ResultSetStatistics implementation for WindowResultSet.
1:7a9ce7e:  */
1:7a9ce7e: public class RealWindowResultSetStatistics
1:7a9ce7e:     extends RealNoPutResultSetStatistics
1:7a9ce7e: {
1:7a9ce7e: 
1:7a9ce7e:     private ResultSetStatistics childResultSetStatistics;
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Constructor.
1:7a9ce7e:      *
1:7a9ce7e:      */
1:7a9ce7e:     public  RealWindowResultSetStatistics(
1:7a9ce7e:                                 int numOpens,
1:7a9ce7e:                                 int rowsSeen,
1:7a9ce7e:                                 int rowsFiltered,
1:7a9ce7e:                                 long constructorTime,
1:7a9ce7e:                                 long openTime,
1:7a9ce7e:                                 long nextTime,
1:7a9ce7e:                                 long closeTime,
1:7a9ce7e:                                 int resultSetNumber,
1:7a9ce7e:                                 double optimizerEstimatedRowCount,
1:7a9ce7e:                                 double optimizerEstimatedCost,
1:7a9ce7e:                                 ResultSetStatistics childResultSetStatistics
1:7a9ce7e:                                 )
1:7a9ce7e:     {
1:7a9ce7e:         super(
1:7a9ce7e:             numOpens,
1:7a9ce7e:             rowsSeen,
1:7a9ce7e:             rowsFiltered,
1:7a9ce7e:             constructorTime,
1:7a9ce7e:             openTime,
1:7a9ce7e:             nextTime,
1:7a9ce7e:             closeTime,
1:7a9ce7e:             resultSetNumber,
1:7a9ce7e:             optimizerEstimatedRowCount,
1:7a9ce7e:             optimizerEstimatedCost
1:7a9ce7e:             );
1:7a9ce7e:         this.childResultSetStatistics = childResultSetStatistics;
1:7a9ce7e: 
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     // ResultSetStatistics interface
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Return the statement execution plan as a String.
1:7a9ce7e:      *
1:7a9ce7e:      * @param depth Indentation level.
1:7a9ce7e:      *
1:7a9ce7e:      * @return String   The statement execution plan as a String.
1:7a9ce7e:      */
1:7a9ce7e:     public String getStatementExecutionPlanText(int depth)
1:7a9ce7e:     {
1:7a9ce7e:         initFormatInfo(depth);
1:7a9ce7e:         String WINDOWSPECIFICATION = "()";
1:7a9ce7e: 
1:7a9ce7e:         return
1:7a9ce7e:             indent + MessageService.getTextMessage(
1:7a9ce7e:                             SQLState.RTS_WINDOW_RS) +
1:7a9ce7e:             WINDOWSPECIFICATION + "\n" +
1:7a9ce7e:             indent + MessageService.getTextMessage(
1:7a9ce7e:                             SQLState.RTS_NUM_OPENS) +
1:7a9ce7e:                             " = " + numOpens + "\n" +
1:7a9ce7e:             indent + MessageService.getTextMessage(
1:7a9ce7e:                             SQLState.RTS_ROWS_SEEN) +
1:7a9ce7e:                             " = " + rowsSeen + "\n" +
1:7a9ce7e:             dumpTimeStats(indent, subIndent) + "\n" +
1:7a9ce7e:             dumpEstimatedCosts(subIndent) + "\n" +
1:7a9ce7e:             indent + MessageService.getTextMessage(
1:7a9ce7e:                 SQLState.RTS_SOURCE_RS) + ":\n" +
1:7a9ce7e:             childResultSetStatistics.
1:7a9ce7e:                 getStatementExecutionPlanText(sourceDepth) + "\n";
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Return information on the scan nodes from the statement execution
1:7a9ce7e:      * plan as a String.
1:7a9ce7e:      *
1:7a9ce7e:      * @param depth Indentation level.
1:7a9ce7e:      * @param tableName if not NULL then print information for this table only
1:7a9ce7e:      *
1:7a9ce7e:      * @return String   The information on the scan nodes from the
1:7a9ce7e:      *                  statement execution plan as a String.
1:7a9ce7e:      */
1:7a9ce7e:     public String getScanStatisticsText(String tableName, int depth)
1:7a9ce7e:     {
1:7a9ce7e:         return getStatementExecutionPlanText(depth);
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     // java.lang.Object override
1:7a9ce7e:     //
1:7a9ce7e:     public String toString()
1:7a9ce7e:     {
1:7a9ce7e:         return getStatementExecutionPlanText(0);
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * RealBasicNoPutResultSetStatistics override.
1:7a9ce7e:      * @see RealBasicNoPutResultSetStatistics#getChildren
1:7a9ce7e:      */
1:9d5bd0e:     public java.util.Vector<ResultSetStatistics> getChildren()
1:7a9ce7e:     {
1:9d5bd0e:         java.util.Vector<ResultSetStatistics> children = new java.util.Vector<ResultSetStatistics>();
1:7a9ce7e:         children.addElement(childResultSetStatistics);
1:7a9ce7e:         return children;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * RealBasicNoPutResultSetStatistics override.
1:7a9ce7e:      * @see RealBasicNoPutResultSetStatistics#getNodeOn
1:7a9ce7e:      */
1:7a9ce7e:     public String getNodeOn(){
1:7a9ce7e:         return MessageService.getTextMessage(
1:7a9ce7e:                                     SQLState.RTS_FOR_TAB_NAME,
1:7a9ce7e:                                     "<WINDOW FUNCTION>");
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * RealBasicNoPutResultSetStatistics override.
1:7a9ce7e:      * @see RealBasicNoPutResultSetStatistics#getNodeName
1:7a9ce7e:      */
1:7a9ce7e:     public String getNodeName(){
1:7a9ce7e:         return MessageService.getTextMessage(SQLState.RTS_IRTBR);
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     // -----------------------------------------------------
1:7a9ce7e:     // XPLAINable Implementation
1:7a9ce7e:     // -----------------------------------------------------
1:7a9ce7e: 
1:7a9ce7e:     public void accept(XPLAINVisitor visitor) {
1:7a9ce7e: 
1:7a9ce7e:         // I have only one child
1:7a9ce7e:         visitor.setNumberOfChildren(1);
1:7a9ce7e: 
1:7a9ce7e:         // pre-order, depth-first traversal me first
1:7a9ce7e:         visitor.visit(this);
1:7a9ce7e: 
1:7a9ce7e:         // then my child
1:7a9ce7e:         childResultSetStatistics.accept(visitor);
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     public String getRSXplainType() {
1:7a9ce7e:         return XPLAINUtil.OP_WINDOW;
1:7a9ce7e:     }
1:7a9ce7e: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9d5bd0e
/////////////////////////////////////////////////////////////////////////
1:     public java.util.Vector<ResultSetStatistics> getChildren()
1:         java.util.Vector<ResultSetStatistics> children = new java.util.Vector<ResultSetStatistics>();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5825332
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7a9ce7e
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: /**
1:  * ResultSetStatistics implementation for WindowResultSet.
1:  */
1: public class RealWindowResultSetStatistics
1:     extends RealNoPutResultSetStatistics
1: {
1: 
1:     private ResultSetStatistics childResultSetStatistics;
1: 
1:     /**
1:      * Constructor.
1:      *
1:      */
1:     public  RealWindowResultSetStatistics(
1:                                 int numOpens,
1:                                 int rowsSeen,
1:                                 int rowsFiltered,
1:                                 long constructorTime,
1:                                 long openTime,
1:                                 long nextTime,
1:                                 long closeTime,
1:                                 int resultSetNumber,
1:                                 double optimizerEstimatedRowCount,
1:                                 double optimizerEstimatedCost,
1:                                 ResultSetStatistics childResultSetStatistics
1:                                 )
1:     {
1:         super(
1:             numOpens,
1:             rowsSeen,
1:             rowsFiltered,
1:             constructorTime,
1:             openTime,
1:             nextTime,
1:             closeTime,
1:             resultSetNumber,
1:             optimizerEstimatedRowCount,
1:             optimizerEstimatedCost
1:             );
1:         this.childResultSetStatistics = childResultSetStatistics;
1: 
1:     }
1: 
1:     // ResultSetStatistics interface
1: 
1:     /**
1:      * Return the statement execution plan as a String.
1:      *
1:      * @param depth Indentation level.
1:      *
1:      * @return String   The statement execution plan as a String.
1:      */
1:     public String getStatementExecutionPlanText(int depth)
1:     {
1:         initFormatInfo(depth);
1:         String WINDOWSPECIFICATION = "()";
1: 
1:         return
1:             indent + MessageService.getTextMessage(
1:                             SQLState.RTS_WINDOW_RS) +
1:             WINDOWSPECIFICATION + "\n" +
1:             indent + MessageService.getTextMessage(
1:                             SQLState.RTS_NUM_OPENS) +
1:                             " = " + numOpens + "\n" +
1:             indent + MessageService.getTextMessage(
1:                             SQLState.RTS_ROWS_SEEN) +
1:                             " = " + rowsSeen + "\n" +
1:             dumpTimeStats(indent, subIndent) + "\n" +
1:             dumpEstimatedCosts(subIndent) + "\n" +
1:             indent + MessageService.getTextMessage(
1:                 SQLState.RTS_SOURCE_RS) + ":\n" +
1:             childResultSetStatistics.
1:                 getStatementExecutionPlanText(sourceDepth) + "\n";
1:     }
1: 
1:     /**
1:      * Return information on the scan nodes from the statement execution
1:      * plan as a String.
1:      *
1:      * @param depth Indentation level.
1:      * @param tableName if not NULL then print information for this table only
1:      *
1:      * @return String   The information on the scan nodes from the
1:      *                  statement execution plan as a String.
1:      */
1:     public String getScanStatisticsText(String tableName, int depth)
1:     {
1:         return getStatementExecutionPlanText(depth);
1:     }
1: 
1: 
1:     // java.lang.Object override
1:     //
1:     public String toString()
1:     {
1:         return getStatementExecutionPlanText(0);
1:     }
1: 
1: 
1:     /**
1:      * RealBasicNoPutResultSetStatistics override.
1:      * @see RealBasicNoPutResultSetStatistics#getChildren
1:      */
0:     public java.util.Vector getChildren()
1:     {
0:         java.util.Vector children = new java.util.Vector();
1:         children.addElement(childResultSetStatistics);
1:         return children;
1:     }
1: 
1: 
1:     /**
1:      * RealBasicNoPutResultSetStatistics override.
1:      * @see RealBasicNoPutResultSetStatistics#getNodeOn
1:      */
1:     public String getNodeOn(){
1:         return MessageService.getTextMessage(
1:                                     SQLState.RTS_FOR_TAB_NAME,
1:                                     "<WINDOW FUNCTION>");
1:     }
1: 
1: 
1:     /**
1:      * RealBasicNoPutResultSetStatistics override.
1:      * @see RealBasicNoPutResultSetStatistics#getNodeName
1:      */
1:     public String getNodeName(){
1:         return MessageService.getTextMessage(SQLState.RTS_IRTBR);
1:     }
1: 
1: 
1: 
1:     // -----------------------------------------------------
1:     // XPLAINable Implementation
1:     // -----------------------------------------------------
1: 
1:     public void accept(XPLAINVisitor visitor) {
1: 
1:         // I have only one child
1:         visitor.setNumberOfChildren(1);
1: 
1:         // pre-order, depth-first traversal me first
1:         visitor.visit(this);
1: 
1:         // then my child
1:         childResultSetStatistics.accept(visitor);
1:     }
1: 
1: 
1:     public String getRSXplainType() {
1:         return XPLAINUtil.OP_WINDOW;
1:     }
1: }
commit:9faef25
commit:3527fd5
/////////////////////////////////////////////////////////////////////////
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
0: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
/////////////////////////////////////////////////////////////////////////
0: 
0:   // -----------------------------------------------------
0:   // XPLAINable Implementation
0:   // -----------------------------------------------------
0:   
0:     public void accept(XPLAINVisitor visitor) {
0:         // I have only one child
0:         visitor.setNumberOfChildren(1);
0:         
0:         // pre-order, depth-first traversal
0:         // me first
0:         visitor.visit(this);
0:         // then my child
0:         childResultSetStatistics.accept(visitor);
0: 	}
0: 
0:     public String getRSXplainType() { return XPLAINUtil.OP_WINDOW; }
author:Army
-------------------------------------------------------------------------------
commit:c723732
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics
0: 
0:    Licensed to the Apache Software Foundation (ASF) under one or more
0:    contributor license agreements.  See the NOTICE file distributed with
0:    this work for additional information regarding copyright ownership.
0:    The ASF licenses this file to you under the Apache License, Version 2.0
0:    (the "License"); you may not use this file except in compliance with
0:    the License.  You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute.rts;
0: 
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: /**
0:  * ResultSetStatistics implemenation for WindowResultSet.
0:  */
0: public class RealWindowResultSetStatistics 
0: 	extends RealNoPutResultSetStatistics
0: {	
0: 	
0: 	/* Leave these fields public for object inspectors */	
0: 	public ResultSetStatistics childResultSetStatistics;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * 
0: 	 *
0: 	 */
0:     public	RealWindowResultSetStatistics(								
0: 								int numOpens,
0: 								int rowsSeen,
0: 								int rowsFiltered,
0: 								long constructorTime,
0: 								long openTime,
0: 								long nextTime,
0: 								long closeTime,
0: 								int resultSetNumber,								
0: 								double optimizerEstimatedRowCount,
0: 								double optimizerEstimatedCost,
0: 								ResultSetStatistics childResultSetStatistics
0: 								)
0: 	{
0: 		super(
0: 			numOpens,
0: 			rowsSeen,
0: 			rowsFiltered,
0: 			constructorTime,
0: 			openTime,
0: 			nextTime,
0: 			closeTime,
0: 			resultSetNumber,
0: 			optimizerEstimatedRowCount,
0: 			optimizerEstimatedCost
0: 			);				
0: 		this.childResultSetStatistics = childResultSetStatistics;
0: 		
0: 	}
0: 
0: 	// ResultSetStatistics interface
0: 
0: 	/**
0: 	 * Return the statement execution plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 *
0: 	 * @return String	The statement execution plan as a String.
0: 	 */
0: 	public String getStatementExecutionPlanText(int depth)
0: 	{
0: 		initFormatInfo(depth);
0: 
0: 		return
0: 			indent + MessageService.getTextMessage(
0: 							SQLState.RTS_NUM_OPENS) +
0: 							" = " + numOpens + "\n" +
0: 			indent + MessageService.getTextMessage(
0: 							SQLState.RTS_ROWS_SEEN) +
0: 							" = " + rowsSeen + "\n" +
0: 			dumpTimeStats(indent, subIndent) + "\n" +
0: 			dumpEstimatedCosts(subIndent) + "\n" +
0: 			childResultSetStatistics.getStatementExecutionPlanText(sourceDepth) + "\n";
0: 	}
0: 
0: 	/**
0: 	 * Return information on the scan nodes from the statement execution 
0: 	 * plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 * @param tableName if not NULL then print information for this table only
0: 	 *
0: 	 * @return String	The information on the scan nodes from the 
0: 	 *					statement execution plan as a String.
0: 	 */
0: 	public String getScanStatisticsText(String tableName, int depth)
0: 	{
0: 		return getStatementExecutionPlanText(depth);		
0: 	}
0: 
0: 
0: 	// Class implementation
0: 	
0: 	public String toString()
0: 	{
0: 		return getStatementExecutionPlanText(0);
0: 	}
0: 
0: 	public java.util.Vector getChildren()
0: 	{
0: 		java.util.Vector children = new java.util.Vector();
0: 		children.addElement(childResultSetStatistics);
0: 		return children;
0: 	}
0: 
0: 	/**
0: 	 * If this node is on a database item (like a table or an index), then provide a
0: 	 * string that describes the on item.
0: 	 *
0: 	 */
0: 	public String getNodeOn(){
0: 		return MessageService.getTextMessage(
0: 									SQLState.RTS_FOR_TAB_NAME,
0: 									"<WINDOW FUNCTION>");
0: 	}
0: 	
0: 	/**
0: 	 * Format for display, a name for this node.
0: 	 *
0: 	 */
0: 	public String getNodeName(){
0: 		return MessageService.getTextMessage(SQLState.RTS_IRTBR);
0: 	}
0: 
0: 	/**
0: 	 * Return the ResultSetStatistics for the child of this node.
0: 	 *
0: 	 * @return The ResultSetStatistics for the child of this node.
0: 	 */
0: 	ResultSetStatistics getChildResultSetStatistics()
0: 	{
0: 		return childResultSetStatistics;
0: 	}
0: }
============================================================================