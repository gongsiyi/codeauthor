1:6f255ff: /*
6:6f255ff: 
1:6f255ff:    Derby - Class 
1:6f255ff:        org.apache.derbyTesting.functionTests.tests.lang.DBInJarTest
1:6f255ff: 
1:6f255ff:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6f255ff:    contributor license agreements.  See the NOTICE file distributed with
1:6f255ff:    this work for additional information regarding copyright ownership.
1:6f255ff:    The ASF licenses this file to You under the Apache License, Version 2.0
1:6f255ff:    (the "License"); you may not use this file except in compliance with
1:6f255ff:    the License.  You may obtain a copy of the License at
1:6f255ff: 
1:6f255ff:       http://www.apache.org/licenses/LICENSE-2.0
1:6f255ff: 
1:6f255ff:    Unless required by applicable law or agreed to in writing, software
1:6f255ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:6f255ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6f255ff:    See the License for the specific language governing permissions and
1:6f255ff:    limitations under the License.
1:6f255ff: 
1:6f255ff:  */
1:6f255ff: 
1:6f255ff: package org.apache.derbyTesting.functionTests.tests.lang;
1:6f255ff: 
1:6f255ff: import java.io.File;
1:6f255ff: import java.sql.Connection;
1:1ae02c9: import java.sql.DriverManager;
1:1ae02c9: import java.sql.PreparedStatement;
1:6f255ff: import java.sql.ResultSet;
1:6f255ff: import java.sql.SQLException;
1:6f255ff: import java.sql.Statement;
1:6f255ff: import junit.framework.Test;
1:6f255ff: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:6f255ff: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:6f255ff: import org.apache.derbyTesting.junit.JDBC;
1:6f255ff: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:6f255ff: 
1:6f255ff: 
1:6f255ff: public class DBInJarTest extends BaseJDBCTestCase {
1:6f255ff: 
1:6f255ff:     public DBInJarTest(String name) {
1:6f255ff:         super(name);
1:6f255ff: 
1:6f255ff:     }
1:894a72f: 
1:6f255ff: 
1:c6ca304:     /**
1:6f255ff:      * Create and connect to a database in a jar.
1:6f255ff:      * @throws SQLException
1:6f255ff:      */
1:6f255ff:     public void testConnectDBInJar() throws SQLException
1:6f255ff:     {
1:6f255ff:         //      Create database to be jarred up.
1:6f255ff:         
1:6f255ff:         Connection beforejarconn = DriverManager.getConnection("jdbc:derby:testjardb;create=true");
1:6f255ff:         Statement bjstmt = beforejarconn.createStatement();  
1:6f255ff:         bjstmt.executeUpdate("CREATE TABLE TAB (I INT)");
1:6f255ff:         bjstmt.executeUpdate("INSERT INTO TAB VALUES(1)");
1:6f255ff:         shutdownDB("jdbc:derby:testjardb;shutdown=true");
1:6f255ff:         Statement stmt = createStatement();
1:894a72f:         
1:6f255ff:         stmt.executeUpdate("CALL CREATEARCHIVE('testjardb.jar', 'testjardb','testjardb')");
1:6f255ff:         Connection jarconn = DriverManager.getConnection("jdbc:derby:jar:(testjardb.jar)testjardb");
1:6f255ff:         Statement s = jarconn.createStatement();
1:6f255ff:         
1:6f255ff:         // try to read from a table.
1:6f255ff:         ResultSet rs = s.executeQuery("SELECT * from TAB");
1:6f255ff:         JDBC.assertSingleValueResultSet(rs, "1");
1:6f255ff:         
1:6f255ff:         // Try dbmetadata call. DERBY-3546
1:6f255ff:        rs = jarconn.getMetaData().getSchemas();
1:6f255ff:        String[][] expectedRows = {{"APP",null},
1:6f255ff:                {"NULLID",null},
1:6f255ff:                {"SQLJ",null},
1:6f255ff:                {"SYS",null},
1:6f255ff:                {"SYSCAT",null},
1:6f255ff:                {"SYSCS_DIAG",null},
1:6f255ff:                {"SYSCS_UTIL",null},
1:6f255ff:                {"SYSFUN",null},
1:6f255ff:                {"SYSIBM",null},
1:6f255ff:                {"SYSPROC",null},
1:6f255ff:                {"SYSSTAT",null}};
1:6f255ff:        JDBC.assertFullResultSet(rs, expectedRows);
1:6f255ff:        shutdownDB("jdbc:derby:jar:(testjardb.jar)testjardb;shutdown=true");
1:6f255ff:               
1:894a72f:        // cleanup databases
1:6f255ff:       File jarreddb = new File(System.getProperty("derby.system.home") + "/testjardb.jar");
1:6f255ff:       assertTrue("failed deleting " + jarreddb.getPath(),jarreddb.delete());
1:6f255ff:       removeDirectory(new File(System.getProperty("derby.system.home") + "/testjardb" ));
1:6f255ff:     }
1:6f255ff: 
1:6f255ff: 
1:6f255ff:     private void shutdownDB(String url) {
1:6f255ff:         try {
1:6f255ff:             DriverManager.getConnection(url);
1:6f255ff:             fail("Expected exception on shutdown");
1:6f255ff:         } catch (SQLException se) {
1:6f255ff:             assertSQLState("08006", se);
1:6f255ff:         }
1:6f255ff:     }
1:894a72f: 
1:894a72f:     /**
1:894a72f:      * Test for fix of DERBY-4381, by testing the connection to a jar 
1:d54c775:      * with a closing parenthesis / round bracket in the name. 
1:d54c775:      * DERBY-4381 describes the problem when this round bracket
1:d54c775:      * is in the path, but the cause is the same.
1:894a72f:      */
1:d54c775:     public void testConnectParenDBInJar() throws SQLException
1:894a72f:     {
1:894a72f:         //      Create database to be jarred up.
1:d54c775:         Connection beforejarconn = DriverManager.getConnection(
1:d54c775:                 "jdbc:derby:testparjardb;create=true");
1:894a72f:         Statement bjstmt = beforejarconn.createStatement();  
1:894a72f:         bjstmt.executeUpdate("CREATE TABLE PARTAB (I INT)");
1:894a72f:         bjstmt.executeUpdate("INSERT INTO PARTAB VALUES(1)");
1:894a72f:         shutdownDB("jdbc:derby:testparjardb;shutdown=true");
1:894a72f:         Statement stmt = createStatement();
1:894a72f:         
1:894a72f:         stmt.executeUpdate(
1:894a72f:                 "CALL CREATEARCHIVE('test)jardb.jar', " +
1:894a72f:                 "'testparjardb','testparjardb')");
1:894a72f:         Connection jarconn = DriverManager.getConnection(
1:894a72f:                 "jdbc:derby:jar:(test)jardb.jar)testparjardb");
1:894a72f:         Statement s = jarconn.createStatement();
1:894a72f:         
1:894a72f:         // try to read from a table.
1:894a72f:         ResultSet rs = s.executeQuery("SELECT * from PARTAB");
1:894a72f:         JDBC.assertSingleValueResultSet(rs, "1");
1:894a72f:         
1:d54c775:         shutdownDB("jdbc:derby:jar:(test)jardb.jar)testparjardb;shutdown=true");
1:d54c775:         
1:d54c775:         // cleanup databases
1:d54c775:         File jarredpardb = new File(System.getProperty("derby.system.home") 
1:d54c775:                 + "/test)jardb.jar");
1:d54c775:         assertTrue("failed deleting " +
1:d54c775:                 jarredpardb.getPath(),jarredpardb.delete());
1:d54c775:         removeDirectory(new File(System.getProperty("derby.system.home") 
1:d54c775:                 + "/testparjardb" ));
1:894a72f:     }
1:894a72f:     
1:894a72f:     
1:6f255ff:     
1:6f255ff:     /**
1:c6ca304:      * Test various queries that use a hash table that may be spilled to disk
1:c6ca304:      * if it grows too big. Regression test case for DERBY-2354.
1:c6ca304:      */
1:c6ca304:     public void testSpillHashToDisk() throws SQLException {
1:c6ca304:         createDerby2354Database();
1:c6ca304: 
1:c6ca304:         Connection jarConn =
1:c6ca304:             DriverManager.getConnection("jdbc:derby:jar:(d2354db.jar)d2354db");
1:c6ca304: 
1:c6ca304:         Statement stmt = jarConn.createStatement();
1:c6ca304: 
1:c6ca304:         // The following statement used to fail with "Feature not implemented"
1:c6ca304:         // or "Container was opened in read-only mode" before DERBY-2354. It
1:c6ca304:         // only fails if the hash table used for duplicate elimination spills
1:c6ca304:         // to disk, which happens if the hash table gets bigger than 1% of the
1:c6ca304:         // total amount of memory allocated to the JVM. This means it won't
1:c6ca304:         // expose the bug if the JVM runs with very high memory settings (but
1:c6ca304:         // it has been tested with 1 GB heap size and then it did spill to
1:c6ca304:         // disk).
1:c6ca304:         JDBC.assertDrainResults(
1:c6ca304:                 stmt.executeQuery("select distinct x from d2354"),
1:c6ca304:                 40000);
1:c6ca304: 
1:c6ca304:         // Hash joins have the same problem. Force the big table to be used as
1:c6ca304:         // the inner table in the hash join.
1:c6ca304:         JDBC.assertEmpty(stmt.executeQuery(
1:c6ca304:                 "select * from --DERBY-PROPERTIES joinOrder = FIXED\n" +
1:c6ca304:                 "sysibm.sysdummy1 t1(x),\n" +
1:c6ca304:                 "d2354 t2 --DERBY-PROPERTIES joinStrategy = HASH\n" +
1:c6ca304:                 "where t1.x = t2.x"));
1:c6ca304: 
1:c6ca304:         // Scrollable result sets keep the rows they've visited in a hash
1:c6ca304:         // table, so they may also need to store data on disk temporarily.
1:c6ca304:         Statement scrollStmt = jarConn.createStatement(
1:c6ca304:             ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
1:c6ca304:         JDBC.assertDrainResults(
1:c6ca304:                 scrollStmt.executeQuery("select * from d2354"),
1:c6ca304:                 40000);
1:c6ca304: 
1:c6ca304:         stmt.close();
1:c6ca304:         scrollStmt.close();
1:c6ca304:         jarConn.close();
1:c6ca304: 
1:c6ca304:         // Cleanup. Shut down the database and delete it.
1:c6ca304:         shutdownDB("jdbc:derby:jar:(d2354db.jar)d2354db;shutdown=true");
1:c6ca304:         removeFiles(new String[] {
1:c6ca304:             System.getProperty("derby.system.home") + "/d2354db.jar"
1:c6ca304:         });
1:c6ca304:     }
1:c6ca304: 
1:c6ca304:     /**
1:c6ca304:      * Create a database in a jar for use in {@code testSpillHashToDisk}.
1:c6ca304:      */
1:c6ca304:     private void createDerby2354Database() throws SQLException {
1:c6ca304:         // First create an ordinary database with a table.
1:c6ca304:         Connection conn =
1:c6ca304:             DriverManager.getConnection("jdbc:derby:d2354db;create=true");
1:c6ca304:         conn.setAutoCommit(false);
1:c6ca304:         Statement s = conn.createStatement();
1:c6ca304:         s.execute("create table d2354 (x varchar(100))");
1:c6ca304:         s.close();
1:c6ca304: 
1:c6ca304:         // Insert 40000 unique values into the table. The values should be
1:c6ca304:         // unique so that they all occupy an entry in the hash table used by
1:c6ca304:         // the DISTINCT query in the test, and thereby increase the likelihood
1:c6ca304:         // of spilling to disk.
1:c6ca304:         PreparedStatement insert =
1:c6ca304:             conn.prepareStatement(
1:c6ca304:                 "insert into d2354 values ? || " +
1:c6ca304:                 "'some extra data to increase the size of the table'");
1:c6ca304:         for (int i = 0; i < 40000; i++) {
1:c6ca304:             insert.setInt(1, i);
1:c6ca304:             insert.executeUpdate();
1:c6ca304:         }
1:c6ca304:         insert.close();
1:c6ca304: 
1:c6ca304:         conn.commit();
1:c6ca304:         conn.close();
1:c6ca304: 
1:c6ca304:         // Shut down the database and archive it in a jar file.
1:c6ca304:         shutdownDB("jdbc:derby:d2354db;shutdown=true");
1:c6ca304: 
1:c6ca304:         createStatement().execute(
1:c6ca304:             "CALL CREATEARCHIVE('d2354db.jar', 'd2354db', 'd2354db')");
1:c6ca304: 
1:c6ca304:         // Clean up the original database directory. We don't need it anymore
1:c6ca304:         // now that we have archived it in a jar file.
1:c6ca304:         removeDirectory(
1:c6ca304:             new File(System.getProperty("derby.system.home") + "/d2354db"));
1:c6ca304:     }
1:6f255ff:     
1:6f255ff:     protected static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:6f255ff:         suite.addTestSuite(DBInJarTest.class);
1:6f255ff:         // Don't run with security manager, we need access to user.dir to archive
1:6f255ff:         // the database.
1:6f255ff:         return new CleanDatabaseTestSetup(SecurityManagerSetup.noSecurityManager(suite)) 
1:6f255ff:         {
1:6f255ff:             /**
1:6f255ff:              * Creates the procedure used in the test cases.
1:6f255ff:              * @exception SQLException if a database error occurs
1:6f255ff:              */
1:6f255ff:             protected void decorateSQL(Statement stmt) throws SQLException
1:6f255ff:             {
1:6f255ff:                 stmt.execute("create procedure CREATEARCHIVE(jarName VARCHAR(20)" +
1:6f255ff:                         " , path VARCHAR(20), dbName VARCHAR(20))" +
1:6f255ff:                         " LANGUAGE JAVA PARAMETER STYLE JAVA" +
1:6f255ff:                         " NO SQL" +
1:6f255ff:                         " EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.lang.dbjarUtil.createArchive'");
1:6f255ff:                 
1:6f255ff:                 
1:6f255ff:             }
1:6f255ff:         };
1:6f255ff:     }
1:6f255ff:     
1:6f255ff:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("DBInJarTest");
1:6f255ff:         suite.addTest(baseSuite("DBInJarTest:embedded"));
1:6f255ff:         return suite;
1:6f255ff:     
1:6f255ff:     }
1:6f255ff: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("DBInJarTest");
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:d54c775
/////////////////////////////////////////////////////////////////////////
1:      * with a closing parenthesis / round bracket in the name. 
1:      * DERBY-4381 describes the problem when this round bracket
1:      * is in the path, but the cause is the same.
1:     public void testConnectParenDBInJar() throws SQLException
1:         Connection beforejarconn = DriverManager.getConnection(
1:                 "jdbc:derby:testparjardb;create=true");
/////////////////////////////////////////////////////////////////////////
1:         shutdownDB("jdbc:derby:jar:(test)jardb.jar)testparjardb;shutdown=true");
1:         
1:         // cleanup databases
1:         File jarredpardb = new File(System.getProperty("derby.system.home") 
1:                 + "/test)jardb.jar");
1:         assertTrue("failed deleting " +
1:                 jarredpardb.getPath(),jarredpardb.delete());
1:         removeDirectory(new File(System.getProperty("derby.system.home") 
1:                 + "/testparjardb" ));
commit:894a72f
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Test for fix of DERBY-4381, by testing the connection to a jar 
0:      * with a param in the name. DERBY-4381 describes the problem when
0:      * the param is in the path, but the cause is the same
1:      */
0:     public void testConnectParamDBInJar() throws SQLException
1:     {
1:         //      Create database to be jarred up.
1:         
0:         Connection beforejarconn = DriverManager.getConnection("jdbc:derby:testparjardb;create=true");
1:         Statement bjstmt = beforejarconn.createStatement();  
1:         bjstmt.executeUpdate("CREATE TABLE PARTAB (I INT)");
1:         bjstmt.executeUpdate("INSERT INTO PARTAB VALUES(1)");
1:         shutdownDB("jdbc:derby:testparjardb;shutdown=true");
1:         Statement stmt = createStatement();
1:         
1:         stmt.executeUpdate(
1:                 "CALL CREATEARCHIVE('test)jardb.jar', " +
1:                 "'testparjardb','testparjardb')");
1:         Connection jarconn = DriverManager.getConnection(
1:                 "jdbc:derby:jar:(test)jardb.jar)testparjardb");
1:         Statement s = jarconn.createStatement();
1:         
1:         // try to read from a table.
1:         ResultSet rs = s.executeQuery("SELECT * from PARTAB");
1:         JDBC.assertSingleValueResultSet(rs, "1");
1:         
0:        shutdownDB("jdbc:derby:jar:(test)jardb.jar)testparjardb;shutdown=true");
1:               
1:        // cleanup databases
0:       File jarredpardb = new File(System.getProperty("derby.system.home") 
0:               + "/test)jardb.jar");
0:       assertTrue("failed deleting " +
0:               jarredpardb.getPath(),jarredpardb.delete());
0:       removeDirectory(new File(System.getProperty("derby.system.home") 
0:               + "/testparjardb" ));
1:     }
1:     
1:     
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c6ca304
/////////////////////////////////////////////////////////////////////////
0: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test various queries that use a hash table that may be spilled to disk
1:      * if it grows too big. Regression test case for DERBY-2354.
1:      */
1:     public void testSpillHashToDisk() throws SQLException {
1:         createDerby2354Database();
1: 
1:         Connection jarConn =
1:             DriverManager.getConnection("jdbc:derby:jar:(d2354db.jar)d2354db");
1: 
1:         Statement stmt = jarConn.createStatement();
1: 
1:         // The following statement used to fail with "Feature not implemented"
1:         // or "Container was opened in read-only mode" before DERBY-2354. It
1:         // only fails if the hash table used for duplicate elimination spills
1:         // to disk, which happens if the hash table gets bigger than 1% of the
1:         // total amount of memory allocated to the JVM. This means it won't
1:         // expose the bug if the JVM runs with very high memory settings (but
1:         // it has been tested with 1 GB heap size and then it did spill to
1:         // disk).
1:         JDBC.assertDrainResults(
1:                 stmt.executeQuery("select distinct x from d2354"),
1:                 40000);
1: 
1:         // Hash joins have the same problem. Force the big table to be used as
1:         // the inner table in the hash join.
1:         JDBC.assertEmpty(stmt.executeQuery(
1:                 "select * from --DERBY-PROPERTIES joinOrder = FIXED\n" +
1:                 "sysibm.sysdummy1 t1(x),\n" +
1:                 "d2354 t2 --DERBY-PROPERTIES joinStrategy = HASH\n" +
1:                 "where t1.x = t2.x"));
1: 
1:         // Scrollable result sets keep the rows they've visited in a hash
1:         // table, so they may also need to store data on disk temporarily.
1:         Statement scrollStmt = jarConn.createStatement(
1:             ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
1:         JDBC.assertDrainResults(
1:                 scrollStmt.executeQuery("select * from d2354"),
1:                 40000);
1: 
1:         stmt.close();
1:         scrollStmt.close();
1:         jarConn.close();
1: 
1:         // Cleanup. Shut down the database and delete it.
1:         shutdownDB("jdbc:derby:jar:(d2354db.jar)d2354db;shutdown=true");
1:         removeFiles(new String[] {
1:             System.getProperty("derby.system.home") + "/d2354db.jar"
1:         });
1:     }
1: 
1:     /**
1:      * Create a database in a jar for use in {@code testSpillHashToDisk}.
1:      */
1:     private void createDerby2354Database() throws SQLException {
1:         // First create an ordinary database with a table.
1:         Connection conn =
1:             DriverManager.getConnection("jdbc:derby:d2354db;create=true");
1:         conn.setAutoCommit(false);
1:         Statement s = conn.createStatement();
1:         s.execute("create table d2354 (x varchar(100))");
1:         s.close();
1: 
1:         // Insert 40000 unique values into the table. The values should be
1:         // unique so that they all occupy an entry in the hash table used by
1:         // the DISTINCT query in the test, and thereby increase the likelihood
1:         // of spilling to disk.
1:         PreparedStatement insert =
1:             conn.prepareStatement(
1:                 "insert into d2354 values ? || " +
1:                 "'some extra data to increase the size of the table'");
1:         for (int i = 0; i < 40000; i++) {
1:             insert.setInt(1, i);
1:             insert.executeUpdate();
1:         }
1:         insert.close();
1: 
1:         conn.commit();
1:         conn.close();
1: 
1:         // Shut down the database and archive it in a jar file.
1:         shutdownDB("jdbc:derby:d2354db;shutdown=true");
1: 
1:         createStatement().execute(
1:             "CALL CREATEARCHIVE('d2354db.jar', 'd2354db', 'd2354db')");
1: 
1:         // Clean up the original database directory. We don't need it anymore
1:         // now that we have archived it in a jar file.
1:         removeDirectory(
1:             new File(System.getProperty("derby.system.home") + "/d2354db"));
1:     }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6f255ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class 
1:        org.apache.derbyTesting.functionTests.tests.lang.DBInJarTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.File;
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.sql.DriverManager;
1: 
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.Utilities;
1: 
1: 
1: public class DBInJarTest extends BaseJDBCTestCase {
1: 
1:     public DBInJarTest(String name) {
1:         super(name);
1: 
1:     }
1: 
1: 
1:     /**
1:      * Create and connect to a database in a jar.
1:      * @throws SQLException
1:      */
1:     public void testConnectDBInJar() throws SQLException
1:     {
1:         //      Create database to be jarred up.
1:         
1:         Connection beforejarconn = DriverManager.getConnection("jdbc:derby:testjardb;create=true");
1:         Statement bjstmt = beforejarconn.createStatement();  
1:         bjstmt.executeUpdate("CREATE TABLE TAB (I INT)");
1:         bjstmt.executeUpdate("INSERT INTO TAB VALUES(1)");
1:         shutdownDB("jdbc:derby:testjardb;shutdown=true");
1:         Statement stmt = createStatement();
1:         
1:         stmt.executeUpdate("CALL CREATEARCHIVE('testjardb.jar', 'testjardb','testjardb')");
1:         Connection jarconn = DriverManager.getConnection("jdbc:derby:jar:(testjardb.jar)testjardb");
1:         Statement s = jarconn.createStatement();
1:         
1:         // try to read from a table.
1:         ResultSet rs = s.executeQuery("SELECT * from TAB");
1:         JDBC.assertSingleValueResultSet(rs, "1");
1:         
1:         // Try dbmetadata call. DERBY-3546
1:        rs = jarconn.getMetaData().getSchemas();
1:        String[][] expectedRows = {{"APP",null},
1:                {"NULLID",null},
1:                {"SQLJ",null},
1:                {"SYS",null},
1:                {"SYSCAT",null},
1:                {"SYSCS_DIAG",null},
1:                {"SYSCS_UTIL",null},
1:                {"SYSFUN",null},
1:                {"SYSIBM",null},
1:                {"SYSPROC",null},
1:                {"SYSSTAT",null}};
1:        JDBC.assertFullResultSet(rs, expectedRows);
1:        shutdownDB("jdbc:derby:jar:(testjardb.jar)testjardb;shutdown=true");
1:               
0:        // cleanup databases
1:       File jarreddb = new File(System.getProperty("derby.system.home") + "/testjardb.jar");
1:       assertTrue("failed deleting " + jarreddb.getPath(),jarreddb.delete());
1:       removeDirectory(new File(System.getProperty("derby.system.home") + "/testjardb" ));
1:     }
1: 
1: 
1:     private void shutdownDB(String url) {
1:         try {
1:             DriverManager.getConnection(url);
1:             fail("Expected exception on shutdown");
1:         } catch (SQLException se) {
1:             assertSQLState("08006", se);
1:         }
1:     }
1:     
1:     
1:     protected static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite(name);
1:         suite.addTestSuite(DBInJarTest.class);
1:         // Don't run with security manager, we need access to user.dir to archive
1:         // the database.
1:         return new CleanDatabaseTestSetup(SecurityManagerSetup.noSecurityManager(suite)) 
1:         {
1:             /**
1:              * Creates the procedure used in the test cases.
1:              * @exception SQLException if a database error occurs
1:              */
1:             protected void decorateSQL(Statement stmt) throws SQLException
1:             {
1:                 stmt.execute("create procedure CREATEARCHIVE(jarName VARCHAR(20)" +
1:                         " , path VARCHAR(20), dbName VARCHAR(20))" +
1:                         " LANGUAGE JAVA PARAMETER STYLE JAVA" +
1:                         " NO SQL" +
1:                         " EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.lang.dbjarUtil.createArchive'");
1:                 
1:                 
1:             }
1:         };
1:     }
1:     
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("DBInJarTest");      
1:         suite.addTest(baseSuite("DBInJarTest:embedded"));
1:         return suite;
1:     
1:     }
1: }
============================================================================