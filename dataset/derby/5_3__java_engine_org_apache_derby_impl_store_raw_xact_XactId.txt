1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.xact.XactId
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.xact;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: 
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Use this class for a short hand representation of the transaction.  This
1:eac0369: 	value is only guarentee to be unique within one continuous operation of the
1:eac0369: 	raw store, in other words, every reboot may reuse the same value.
1:eac0369: 
1:eac0369: 	Whereas GlobalXactId is unique for all times across all raw store, a XactId
1:eac0369: 	is only unique within a particular rawstore and may be reused.
1:eac0369: 
1:eac0369: 	XactId keeps track of the outstanding transactionId and is responsible
1:eac0369: 	for dispensing new transactionIds
1:eac0369: */
1:eac0369: public class XactId implements TransactionId
1:eac0369: {
1:eac0369: 	/*
1:eac0369: 	** Fields
1:eac0369: 	*/
1:eac0369: 	private long id;			// immutable 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Constructor
1:eac0369: 	*/
1:eac0369: 	public XactId(long id) {
1:eac0369: 		this.id = id;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public XactId() { super(); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Write this out.
1:eac0369: 		@exception IOException error writing to log stream
1:eac0369: 	*/
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		CompressedNumber.writeLong(out, id);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read this in
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in) throws IOException
1:eac0369: 	{
1:eac0369: 		id = CompressedNumber.readLong(in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.RAW_STORE_XACT_ID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		TransactionId method
1:eac0369: 	*/
1:eac0369: 	  
1:eac0369: 	public int getMaxStoredSize()
1:eac0369: 	{
1:eac0369: 		return FormatIdUtil.getFormatIdByteLength(StoredFormatIds.RAW_STORE_XACT_ID) +
1:eac0369: 			CompressedNumber.MAX_LONG_STORED_SIZE; 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean equals(Object other) {
1:eac0369: 		if (other == this)
1:eac0369: 			return true;
1:eac0369: 
1:eac0369: 		// assume cast will be successful rather than waste time doing an
1:eac0369: 		// instanceof first.  Catch the exception if it failed.
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			XactId oxid = (XactId)other;
1:eac0369: 			return (id == oxid.id);
1:eac0369: 		}
1:eac0369: 		catch (ClassCastException cce)
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int hashCode()
1:eac0369: 	{
1:eac0369: 		return (int)id;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Methods specific to this class
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 		Return	0 if a == b, 
1:dbed020: 				+ve number if a &gt; b
1:dbed020: 				-ve number if a &lt; b
1:eac0369: 	*/
1:eac0369: 	public static long compare(TransactionId a, TransactionId b)
1:eac0369: 	{
1:eac0369: 		if (a == null || b == null)
1:eac0369: 		{
1:eac0369: 			if (a == null)
1:eac0369: 				return -1;
1:eac0369: 			else if (b == null)
1:eac0369: 				return 1;
1:eac0369: 			else
1:eac0369: 				return 0;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(a instanceof XactId);
1:eac0369: 			SanityManager.ASSERT(b instanceof XactId);
1:eac0369: 		}
1:eac0369: 		XactId A = (XactId)a;
1:eac0369: 		XactId B = (XactId)b;
1:eac0369: 
1:eac0369: 		return A.id - B.id;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected long getId() 
1:eac0369: 	{
1:eac0369: 		return id;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		// needed for virtual lock table
1:eac0369: 		return Long.toString(id);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: }
1:eac0369: 
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 				+ve number if a &gt; b
1: 				-ve number if a &lt; b
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.xact.XactId
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.xact;
1: 
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1: 	Use this class for a short hand representation of the transaction.  This
1: 	value is only guarentee to be unique within one continuous operation of the
1: 	raw store, in other words, every reboot may reuse the same value.
1: 
1: 	Whereas GlobalXactId is unique for all times across all raw store, a XactId
1: 	is only unique within a particular rawstore and may be reused.
1: 
1: 	XactId keeps track of the outstanding transactionId and is responsible
1: 	for dispensing new transactionIds
1: */
1: public class XactId implements TransactionId
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/*
1: 	** Fields
1: 	*/
1: 	private long id;			// immutable 
1: 
1: 	/*
1: 	** Constructor
1: 	*/
1: 	public XactId(long id) {
1: 		this.id = id;
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public XactId() { super(); }
1: 
1: 	/**
1: 		Write this out.
1: 		@exception IOException error writing to log stream
1: 	*/
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		CompressedNumber.writeLong(out, id);
1: 	}
1: 
1: 	/**
1: 		Read this in
1: 		@exception IOException error reading from log stream
1: 	*/
1: 	public void readExternal(ObjectInput in) throws IOException
1: 	{
1: 		id = CompressedNumber.readLong(in);
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.RAW_STORE_XACT_ID;
1: 	}
1: 
1: 	/**
1: 		TransactionId method
1: 	*/
1: 	  
1: 	public int getMaxStoredSize()
1: 	{
1: 		return FormatIdUtil.getFormatIdByteLength(StoredFormatIds.RAW_STORE_XACT_ID) +
1: 			CompressedNumber.MAX_LONG_STORED_SIZE; 
1: 	}
1: 
1: 	public boolean equals(Object other) {
1: 		if (other == this)
1: 			return true;
1: 
1: 		// assume cast will be successful rather than waste time doing an
1: 		// instanceof first.  Catch the exception if it failed.
1: 		try
1: 		{
1: 			XactId oxid = (XactId)other;
1: 			return (id == oxid.id);
1: 		}
1: 		catch (ClassCastException cce)
1: 		{
1: 			return false;
1: 		}
1: 	}
1: 
1: 	public int hashCode()
1: 	{
1: 		return (int)id;
1: 	}
1: 
1: 	/**
1: 		Methods specific to this class
1: 	*/
1: 
1: 	
1: 	/**
1: 		Return	0 if a == b, 
0: 				+ve number if a > b
0: 				-ve number if a < b
1: 	*/
1: 	public static long compare(TransactionId a, TransactionId b)
1: 	{
1: 		if (a == null || b == null)
1: 		{
1: 			if (a == null)
1: 				return -1;
1: 			else if (b == null)
1: 				return 1;
1: 			else
1: 				return 0;
1: 		}
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(a instanceof XactId);
1: 			SanityManager.ASSERT(b instanceof XactId);
1: 		}
1: 		XactId A = (XactId)a;
1: 		XactId B = (XactId)b;
1: 
1: 		return A.id - B.id;
1: 	}
1: 
1: 	protected long getId() 
1: 	{
1: 		return id;
1: 	}
1: 
1: 
1: 	public String toString()
1: 	{
1: 		// needed for virtual lock table
1: 		return Long.toString(id);
1: 	}
1: 
1: 
1: }
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.xact;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.raw.xact.TransactionId;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: 
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0: 	Use this class for a short hand representation of the transaction.  This
0: 	value is only guarentee to be unique within one continuous operation of the
0: 	raw store, in other words, every reboot may reuse the same value.
0: 
0: 	Whereas GlobalXactId is unique for all times across all raw store, a XactId
0: 	is only unique within a particular rawstore and may be reused.
0: 
0: 	XactId keeps track of the outstanding transactionId and is responsible
0: 	for dispensing new transactionIds
0: */
0: public class XactId implements TransactionId
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/*
0: 	** Fields
0: 	*/
0: 	private long id;			// immutable 
0: 
0: 	/*
0: 	** Constructor
0: 	*/
0: 	public XactId(long id) {
0: 		this.id = id;
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public XactId() { super(); }
0: 
0: 	/**
0: 		Write this out.
0: 		@exception IOException error writing to log stream
0: 	*/
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		CompressedNumber.writeLong(out, id);
0: 	}
0: 
0: 	/**
0: 		Read this in
0: 		@exception IOException error reading from log stream
0: 	*/
0: 	public void readExternal(ObjectInput in) throws IOException
0: 	{
0: 		id = CompressedNumber.readLong(in);
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.RAW_STORE_XACT_ID;
0: 	}
0: 
0: 	/**
0: 		TransactionId method
0: 	*/
0: 	  
0: 	public int getMaxStoredSize()
0: 	{
0: 		return FormatIdUtil.getFormatIdByteLength(StoredFormatIds.RAW_STORE_XACT_ID) +
0: 			CompressedNumber.MAX_LONG_STORED_SIZE; 
0: 	}
0: 
0: 	public boolean equals(Object other) {
0: 		if (other == this)
0: 			return true;
0: 
0: 		// assume cast will be successful rather than waste time doing an
0: 		// instanceof first.  Catch the exception if it failed.
0: 		try
0: 		{
0: 			XactId oxid = (XactId)other;
0: 			return (id == oxid.id);
0: 		}
0: 		catch (ClassCastException cce)
0: 		{
0: 			return false;
0: 		}
0: 	}
0: 
0: 	public int hashCode()
0: 	{
0: 		return (int)id;
0: 	}
0: 
0: 	/**
0: 		Methods specific to this class
0: 	*/
0: 
0: 	
0: 	/**
0: 		Return	0 if a == b, 
0: 				+ve number if a > b
0: 				-ve number if a < b
0: 	*/
0: 	public static long compare(TransactionId a, TransactionId b)
0: 	{
0: 		if (a == null || b == null)
0: 		{
0: 			if (a == null)
0: 				return -1;
0: 			else if (b == null)
0: 				return 1;
0: 			else
0: 				return 0;
0: 		}
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(a instanceof XactId);
0: 			SanityManager.ASSERT(b instanceof XactId);
0: 		}
0: 		XactId A = (XactId)a;
0: 		XactId B = (XactId)b;
0: 
0: 		return A.id - B.id;
0: 	}
0: 
0: 	protected long getId() 
0: 	{
0: 		return id;
0: 	}
0: 
0: 
0: 	public String toString()
0: 	{
0: 		// needed for virtual lock table
0: 		return Long.toString(id);
0: 	}
0: 
0: 
0: }
0: 
0: 
============================================================================