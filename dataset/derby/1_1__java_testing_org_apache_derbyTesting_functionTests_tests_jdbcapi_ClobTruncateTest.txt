1:ba50299: /*
8:ba50299: 
1:ba50299:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTruncateTest
1:ba50299: 
1:ba50299:    Licensed to the Apache Software Foundation (ASF) under one
1:ba50299:    or more contributor license agreements.  See the NOTICE file
1:ba50299:    distributed with this work for additional information
1:ba50299:    regarding copyright ownership.  The ASF licenses this file
1:ba50299:    to you under the Apache License, Version 2.0 (the
1:ba50299:    "License"); you may not use this file except in compliance
1:ba50299:    with the License.  You may obtain a copy of the License at
1:ba50299: 
1:ba50299:      http://www.apache.org/licenses/LICENSE-2.0
1:ba50299: 
1:ba50299:    Unless required by applicable law or agreed to in writing,
1:ba50299:    software distributed under the License is distributed on an
1:ba50299:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ba50299:    KIND, either express or implied.  See the License for the
1:ba50299:    specific language governing permissions and limitations
1:ba50299:    under the License.
1:ba50299: 
1:ba50299:  */
1:ba50299: 
1:ba50299: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:ba50299: 
1:ba50299: import java.io.IOException;
1:ba50299: import java.io.StringReader;
1:ba50299: import java.sql.Clob;
1:ba50299: import java.sql.PreparedStatement;
1:ba50299: import java.sql.ResultSet;
1:ba50299: import java.sql.SQLException;
1:ba50299: import java.sql.Statement;
1:ba50299: import junit.framework.Test;
1:ba50299: import org.apache.derbyTesting.functionTests.util.streams.CharAlphabet;
1:ba50299: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1:ba50299: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:ba50299: import org.apache.derbyTesting.junit.TestConfiguration;
1:ba50299: 
1:ba50299: /**
1:ba50299:  * Test case for Clob.truncate
1:ba50299:  */
1:ba50299: public class ClobTruncateTest extends BaseJDBCTestCase {
1:0ed8291: 
1:ba50299:     public ClobTruncateTest (String name) {
1:ba50299:         super (name);
2:ba50299:     }
1:0ed8291: 
1:ba50299:     private void insertClobs () throws SQLException, IOException {
1:ba50299:         PreparedStatement ps = prepareStatement (
1:ba50299:                 "insert into truncateclob" +
1:ba50299:                 " values (?,?,?)");
1:ba50299:         //insert a small clob
1:ba50299:         StringBuffer sb = new StringBuffer ();
1:ba50299:         for (int i = 0; i < 100; i++)
1:ba50299:             sb.append ("small clob");
1:ba50299:         int length = sb.length();
1:ba50299:         ps.setInt (1, length);
1:ba50299:         ps.setCharacterStream (2, new StringReader (sb.toString()), length);
1:ba50299:         ps.setInt (3, length/2);
2:ba50299:         ps.execute();
1:0ed8291: 
1:ba50299:         //insert a large clob
1:ba50299:         LoopingAlphabetReader reader = new LoopingAlphabetReader (1024 * 1024);
1:ba50299:         ps.setInt (1, 1024 * 1024);
1:ba50299:         ps.setCharacterStream (2, reader, 1024 * 1024);
1:ba50299:         ps.setInt (3, 1024 * 1024 / 2);
1:ba50299:         ps.execute();
1:0ed8291: 
1:ba50299:         //insert a non ascii clob
1:0ed8291:         LoopingAlphabetReader uReader =
1:0ed8291:                 new LoopingAlphabetReader (300000, CharAlphabet.tamil());
1:ba50299:         ps.setInt (1, 300000);
1:ba50299:         ps.setCharacterStream (2, uReader, 300000);
1:ba50299:         ps.setInt (3, 150000);
1:0ed8291:         ps.execute();
1:ba50299:     }
1:0ed8291: 
1:0ed8291:     private void checkTruncate (int size, Clob clob, int newSize)
1:0ed8291:             throws SQLException {
1:ba50299:         assertEquals ("unexpected clob size", size, clob.length());
1:ba50299:         clob.truncate (newSize);
1:ba50299:         assertEquals ("truncate failed ", newSize, clob.length());
1:ba50299:         //try once more
1:ba50299:         clob.truncate (newSize/2);
1:ba50299:         assertEquals ("truncate failed ", newSize/2, clob.length());
1:ba50299:     }
1:0ed8291: 
1:ba50299:     public void testTruncateOnClob () throws SQLException, IOException {
1:ba50299:         insertClobs();
1:ba50299:         getConnection().setAutoCommit (false);
1:ba50299:         ResultSet rs = createStatement().executeQuery("select size, data," +
1:ba50299:                 " newsize from truncateclob");
1:ba50299:         try {
1:ba50299:             while (rs.next()) {
1:ba50299:                 checkTruncate (rs.getInt (1), rs.getClob(2), rs.getInt(3));
1:ba50299:             }
1:ba50299:         }
1:ba50299:         finally {
1:ba50299:             rs.close();
1:ba50299:             getConnection().commit();
1:ba50299:         }
1:ba50299:     }
1:ba50299: 
1:ba50299:     protected void tearDown() throws Exception {
1:ba50299:         Statement stmt = createStatement();
1:ba50299:         stmt.executeUpdate ("drop table truncateclob");
1:ba50299:         super.tearDown();
1:ba50299:     }
1:ba50299: 
1:ba50299:     protected void setUp() throws Exception {
1:ba50299:         super.setUp();
1:ba50299:         Statement stmt = createStatement();
1:ba50299:         stmt.executeUpdate ("create table truncateclob " +
1:ba50299:                 "(size integer, data clob, newSize integer)");
1:ba50299:     }
1:0ed8291: 
1:ba50299:     public static Test suite() {
1:ba50299:         //client code is caching clob length so this test will fail
1:ba50299:         return TestConfiguration.embeddedSuite(ClobTruncateTest.class);
1:0ed8291:     }
1:ba50299: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:0ed8291
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         LoopingAlphabetReader uReader =
1:                 new LoopingAlphabetReader (300000, CharAlphabet.tamil());
1:         ps.execute();
1: 
1:     private void checkTruncate (int size, Clob clob, int newSize)
1:             throws SQLException {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     }
commit:ba50299
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTruncateTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.io.IOException;
1: import java.io.StringReader;
1: import java.sql.Clob;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.functionTests.util.streams.CharAlphabet;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test case for Clob.truncate
1:  */
1: public class ClobTruncateTest extends BaseJDBCTestCase {
1:     
1:     public ClobTruncateTest (String name) {
1:         super (name);
1:     }
1:     
1:     private void insertClobs () throws SQLException, IOException {
1:         PreparedStatement ps = prepareStatement (
1:                 "insert into truncateclob" +
1:                 " values (?,?,?)");
1:         //insert a small clob
1:         StringBuffer sb = new StringBuffer ();
1:         for (int i = 0; i < 100; i++)
1:             sb.append ("small clob");
1:         int length = sb.length();
1:         ps.setInt (1, length);
1:         ps.setCharacterStream (2, new StringReader (sb.toString()), length);
1:         ps.setInt (3, length/2);
1:         ps.execute();
1:         
1:         //insert a large clob
1:         LoopingAlphabetReader reader = new LoopingAlphabetReader (1024 * 1024);
1:         ps.setInt (1, 1024 * 1024);
1:         ps.setCharacterStream (2, reader, 1024 * 1024);
1:         ps.setInt (3, 1024 * 1024 / 2);
1:         ps.execute();
1:         
1:         //insert a non ascii clob
0:         LoopingAlphabetReader uReader = 
0:                 new LoopingAlphabetReader (300000, CharAlphabet.tamil());        
1:         ps.setInt (1, 300000);
1:         ps.setCharacterStream (2, uReader, 300000);
1:         ps.setInt (3, 150000);
1:         ps.execute();        
1:     }
1:     
0:     private void checkTruncate (int size, Clob clob, int newSize) throws SQLException {
1:         assertEquals ("unexpected clob size", size, clob.length());
1:         clob.truncate (newSize);
1:         assertEquals ("truncate failed ", newSize, clob.length());
1:         //try once more
1:         clob.truncate (newSize/2);
1:         assertEquals ("truncate failed ", newSize/2, clob.length());
1:     }
1:     
1:     public void testTruncateOnClob () throws SQLException, IOException {
1:         insertClobs();
1:         getConnection().setAutoCommit (false);
1:         ResultSet rs = createStatement().executeQuery("select size, data," +
1:                 " newsize from truncateclob");
1:         try {
1:             while (rs.next()) {
1:                 checkTruncate (rs.getInt (1), rs.getClob(2), rs.getInt(3));
1:             }
1:         }
1:         finally {
1:             rs.close();
1:             getConnection().commit();
1:         }
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         Statement stmt = createStatement();
1:         stmt.executeUpdate ("drop table truncateclob");
1:         super.tearDown();
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         Statement stmt = createStatement();
1:         stmt.executeUpdate ("create table truncateclob " +
1:                 "(size integer, data clob, newSize integer)");
1:     }
1:     
1:     public static Test suite() {
1:         //client code is caching clob length so this test will fail
1:         return TestConfiguration.embeddedSuite(ClobTruncateTest.class);
1:     }       
1: }
============================================================================