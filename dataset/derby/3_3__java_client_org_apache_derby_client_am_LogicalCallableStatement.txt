1:1beab6c: /*
1:1beab6c: 
1:1beab6c:    Derby - Class org.apache.derby.client.am.LogicalCallableStatement
1:1beab6c: 
1:1beab6c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1beab6c:    contributor license agreements.  See the NOTICE file distributed with
1:1beab6c:    this work for additional information regarding copyright ownership.
1:1beab6c:    The ASF licenses this file to You under the Apache License, Version 2.0
1:1beab6c:    (the "License"); you may not use this file except in compliance with
1:1beab6c:    the License.  You may obtain a copy of the License at
1:1beab6c: 
1:1beab6c:       http://www.apache.org/licenses/LICENSE-2.0
1:1beab6c: 
1:1beab6c:    Unless required by applicable law or agreed to in writing, software
1:1beab6c:    distributed under the License is distributed on an "AS IS" BASIS,
1:1beab6c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1beab6c:    See the License for the specific language governing permissions and
1:1beab6c:    limitations under the License.
1:1beab6c: 
1:1beab6c:  */
1:1beab6c: package org.apache.derby.client.am;
1:1beab6c: 
1:1beab6c: import java.io.InputStream;
1:1beab6c: import java.io.Reader;
1:1beab6c: import java.math.BigDecimal;
1:1beab6c: import java.net.URL;
1:1beab6c: import java.sql.Array;
1:69e3d06: import java.sql.Blob;
1:69e3d06: import java.sql.CallableStatement;
1:69e3d06: import java.sql.Clob;
1:1beab6c: import java.sql.Date;
1:9a0cdf1: import java.sql.NClob;
1:1beab6c: import java.sql.Ref;
1:9a0cdf1: import java.sql.RowId;
1:1beab6c: import java.sql.SQLException;
1:9a0cdf1: import java.sql.SQLXML;
1:1beab6c: import java.sql.Time;
1:1beab6c: import java.sql.Timestamp;
1:1beab6c: import java.util.Calendar;
1:1beab6c: import java.util.Map;
1:1beab6c: 
1:1beab6c: import org.apache.derby.client.am.stmtcache.StatementKey;
1:1beab6c: 
1:1beab6c: /**
1:1beab6c:  * A wrapper class for a physical Derby callable statement.
1:1beab6c:  * <p>
1:1beab6c:  * The idea behind the logical prepared statement is to allow reuse of the
1:1beab6c:  * physical callable statement. In general the logical entity will forward all
1:1beab6c:  * calls to the physical entity. A few methods have special implementations, the
1:1beab6c:  * most important one being {@link #close}. Each method will check that the
1:1beab6c:  * logical statement is still open before the call is forwarded to the
1:1beab6c:  * underlying physical statement.
1:1beab6c:  *
1:1beab6c:  * @see LogicalStatementEntity
1:1beab6c:  */
1:1beab6c: public class LogicalCallableStatement
1:1beab6c:     extends LogicalPreparedStatement
1:69e3d06:     implements CallableStatement {
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Creates a new logical callable statement.
1:1beab6c:      *
1:1beab6c:      * @param physicalCs underlying physical statement
1:1beab6c:      * @param stmtKey key for the physical statement
1:d6cf884:      * @param cacheInteractor creating statement cache interactor
1:1beab6c:      * @throws IllegalArgumentException if {@code cache} is {@code null}
1:1beab6c:      */
1:69e3d06:     public LogicalCallableStatement(CallableStatement physicalCs,
1:1beab6c:                                     StatementKey stmtKey,
1:d6cf884:                                     StatementCacheInteractor cacheInteractor) {
1:d6cf884:         super(physicalCs, stmtKey, cacheInteractor);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public boolean wasNull() throws SQLException {
1:1beab6c:         return getPhysCs().wasNull();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public byte getByte(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getByte(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public double getDouble(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getDouble(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public float getFloat(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getFloat(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int getInt(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getInt(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public long getLong(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getLong(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public short getShort(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getShort(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public boolean getBoolean(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getBoolean(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public byte[] getBytes(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getBytes(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {
1:1beab6c:          getPhysCs().registerOutParameter(parameterIndex, sqlType);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {
1:1beab6c:          getPhysCs().registerOutParameter(parameterIndex, sqlType, scale);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Object getObject(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getObject(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public String getString(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getString(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void registerOutParameter(int paramIndex, int sqlType, String typeName) throws SQLException {
1:1beab6c:          getPhysCs().registerOutParameter(paramIndex, sqlType, typeName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public byte getByte(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getByte(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public double getDouble(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getDouble(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public float getFloat(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getFloat(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int getInt(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getInt(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public long getLong(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getLong(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public short getShort(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getShort(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public boolean getBoolean(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getBoolean(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public byte[] getBytes(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getBytes(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setByte(String parameterName, byte x) throws SQLException {
1:1beab6c:          getPhysCs().setByte(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setDouble(String parameterName, double x) throws SQLException {
1:1beab6c:          getPhysCs().setDouble(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setFloat(String parameterName, float x) throws SQLException {
1:1beab6c:          getPhysCs().setFloat(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void registerOutParameter(String parameterName, int sqlType) throws SQLException {
1:1beab6c:          getPhysCs().registerOutParameter(parameterName, sqlType);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setInt(String parameterName, int x) throws SQLException {
1:1beab6c:          getPhysCs().setInt(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setNull(String parameterName, int sqlType) throws SQLException {
1:1beab6c:          getPhysCs().setNull(parameterName, sqlType);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {
1:1beab6c:          getPhysCs().registerOutParameter(parameterName, sqlType, scale);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setLong(String parameterName, long x) throws SQLException {
1:1beab6c:          getPhysCs().setLong(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setShort(String parameterName, short x) throws SQLException {
1:1beab6c:          getPhysCs().setShort(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setBoolean(String parameterName, boolean x) throws SQLException {
1:1beab6c:          getPhysCs().setBoolean(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setBytes(String parameterName, byte[] x) throws SQLException {
1:1beab6c:          getPhysCs().setBytes(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getBigDecimal(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:c784df5:     @Deprecated
1:1beab6c:     public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException {
1:1beab6c:         return getPhysCs().getBigDecimal(parameterIndex, scale);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public URL getURL(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getURL(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Array getArray(int i) throws SQLException {
1:1beab6c:         return getPhysCs().getArray(i);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public Blob getBlob(int i) throws SQLException {
1:1beab6c:         return getPhysCs().getBlob(i);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public Clob getClob(int i) throws SQLException {
1:1beab6c:         return getPhysCs().getClob(i);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Date getDate(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getDate(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Ref getRef(int i) throws SQLException {
1:1beab6c:         return getPhysCs().getRef(i);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Time getTime(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getTime(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Timestamp getTimestamp(int parameterIndex) throws SQLException {
1:1beab6c:         return getPhysCs().getTimestamp(parameterIndex);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {
1:1beab6c:          getPhysCs().setAsciiStream(parameterName, x, length);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {
1:1beab6c:          getPhysCs().setBinaryStream(parameterName, x, length);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setCharacterStream(String parameterName, Reader reader, int length) throws SQLException {
1:1beab6c:          getPhysCs().setCharacterStream(parameterName, reader, length);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Object getObject(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getObject(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setObject(String parameterName, Object x) throws SQLException {
1:1beab6c:          getPhysCs().setObject(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {
1:1beab6c:          getPhysCs().setObject(parameterName, x, targetSqlType);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {
1:1beab6c:          getPhysCs().setObject(parameterName, x, targetSqlType, scale);
1:1beab6c:     }
1:1beab6c: 
1:4772c7e:     public Object getObject(int i, Map<String, Class<?>> map) throws SQLException {
1:1beab6c:         return getPhysCs().getObject(i, map);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public String getString(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getString(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {
1:1beab6c:          getPhysCs().registerOutParameter(parameterName, sqlType, typeName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {
1:1beab6c:          getPhysCs().setNull(parameterName, sqlType, typeName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setString(String parameterName, String x) throws SQLException {
1:1beab6c:          getPhysCs().setString(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public BigDecimal getBigDecimal(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getBigDecimal(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {
1:1beab6c:          getPhysCs().setBigDecimal(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public URL getURL(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getURL(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setURL(String parameterName, URL val) throws SQLException {
1:1beab6c:          getPhysCs().setURL(parameterName, val);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Array getArray(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getArray(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public Blob getBlob(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getBlob(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public Clob getClob(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getClob(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Date getDate(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getDate(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setDate(String parameterName, Date x) throws SQLException {
1:1beab6c:          getPhysCs().setDate(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Date getDate(int parameterIndex, Calendar cal) throws SQLException {
1:1beab6c:         return getPhysCs().getDate(parameterIndex, cal);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Ref getRef(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getRef(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Time getTime(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getTime(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setTime(String parameterName, Time x) throws SQLException {
1:1beab6c:          getPhysCs().setTime(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Time getTime(int parameterIndex, Calendar cal) throws SQLException {
1:1beab6c:         return getPhysCs().getTime(parameterIndex, cal);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Timestamp getTimestamp(String parameterName) throws SQLException {
1:1beab6c:         return getPhysCs().getTimestamp(parameterName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setTimestamp(String parameterName, Timestamp x) throws SQLException {
1:1beab6c:          getPhysCs().setTimestamp(parameterName, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException {
1:1beab6c:         return getPhysCs().getTimestamp(parameterIndex, cal);
1:1beab6c:     }
1:1beab6c: 
1:4772c7e:     public Object getObject(String parameterName, Map<String, Class<?>> map) throws SQLException {
1:1beab6c:         return getPhysCs().getObject(parameterName, map);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Date getDate(String parameterName, Calendar cal) throws SQLException {
1:1beab6c:         return getPhysCs().getDate(parameterName, cal);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Time getTime(String parameterName, Calendar cal) throws SQLException {
1:1beab6c:         return getPhysCs().getTime(parameterName, cal);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {
1:1beab6c:         return getPhysCs().getTimestamp(parameterName, cal);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setDate(String parameterName, Date x, Calendar cal) throws SQLException {
1:1beab6c:          getPhysCs().setDate(parameterName, x, cal);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {
1:1beab6c:          getPhysCs().setTime(parameterName, x, cal);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {
1:1beab6c:          getPhysCs().setTimestamp(parameterName, x, cal);
1:1beab6c:     }
1:9a0cdf1: 
1:9a0cdf1:     ////////////////////////////////////////////////////////////////////
1:9a0cdf1:     //
1:9a0cdf1:     // INTRODUCED BY JDBC 4.0 IN JAVA 6
1:9a0cdf1:     //
1:9a0cdf1:     ////////////////////////////////////////////////////////////////////
1:9a0cdf1: 
1:9a0cdf1:     public RowId getRowId(int arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getRowId(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public RowId getRowId(String arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getRowId(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setRowId(String arg0, RowId arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setRowId(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNString(String arg0, String arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setNString(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNCharacterStream(String arg0, Reader arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setNCharacterStream(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNClob(String arg0, NClob arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setNClob(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setClob(String arg0, Reader arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setClob(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setBlob(String arg0, InputStream arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setBlob(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNClob(String arg0, Reader arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setNClob(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public NClob getNClob(int arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getNClob(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public NClob getNClob(String arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getNClob(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setSQLXML(String arg0, SQLXML arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setSQLXML(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public SQLXML getSQLXML(int arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getSQLXML(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public SQLXML getSQLXML(String arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getSQLXML(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public String getNString(int arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getNString(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public String getNString(String arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getNString(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public Reader getNCharacterStream(int arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getNCharacterStream(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public Reader getNCharacterStream(String arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getNCharacterStream(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public Reader getCharacterStream(int arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getCharacterStream(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public Reader getCharacterStream(String arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysCs().getCharacterStream(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setBlob(String arg0, Blob arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setBlob(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setClob(String arg0, Clob arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setClob(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setAsciiStream(String arg0, InputStream arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setAsciiStream(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setBinaryStream(String arg0, InputStream arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setBinaryStream(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setCharacterStream(String arg0, Reader arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setCharacterStream(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setAsciiStream(String arg0, InputStream arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setAsciiStream(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setBinaryStream(String arg0, InputStream arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setBinaryStream(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setCharacterStream(String arg0, Reader arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setCharacterStream(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNCharacterStream(String arg0, Reader arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setNCharacterStream(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setClob(String arg0, Reader arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setClob(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setBlob(String arg0, InputStream arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setBlob(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNClob(String arg0, Reader arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysCs().setNClob(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     ////////////////////////////////////////////////////////////////////
1:9a0cdf1:     //
1:9a0cdf1:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:9a0cdf1:     //
1:9a0cdf1:     ////////////////////////////////////////////////////////////////////
1:9a0cdf1: 
1:9a0cdf1:     public <T> T getObject( int parameterIndex, Class<T> type )
1:9a0cdf1:         throws SQLException
1:9a0cdf1:     {
1:9a0cdf1:         return ((ClientCallableStatement) getPhysCs()).
1:9a0cdf1:             getObject(parameterIndex, type);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public <T> T getObject(String parameterName, Class<T> type)
1:9a0cdf1:         throws SQLException
1:9a0cdf1:     {
1:9a0cdf1:         return ((ClientCallableStatement) getPhysCs()).
1:9a0cdf1:             getObject( parameterName, type );
1:9a0cdf1:     }
1:9a0cdf1: 
1:1beab6c: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
1: import java.sql.NClob;
1: import java.sql.RowId;
1: import java.sql.SQLXML;
/////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////
1:     //
1:     // INTRODUCED BY JDBC 4.0 IN JAVA 6
1:     //
1:     ////////////////////////////////////////////////////////////////////
1: 
1:     public RowId getRowId(int arg0)
1:             throws SQLException {
1:         return getPhysCs().getRowId(arg0);
1:     }
1: 
1:     public RowId getRowId(String arg0)
1:             throws SQLException {
1:         return getPhysCs().getRowId(arg0);
1:     }
1: 
1:     public void setRowId(String arg0, RowId arg1)
1:             throws SQLException {
1:          getPhysCs().setRowId(arg0, arg1);
1:     }
1: 
1:     public void setNString(String arg0, String arg1)
1:             throws SQLException {
1:          getPhysCs().setNString(arg0, arg1);
1:     }
1: 
1:     public void setNCharacterStream(String arg0, Reader arg1, long arg2)
1:             throws SQLException {
1:          getPhysCs().setNCharacterStream(arg0, arg1, arg2);
1:     }
1: 
1:     public void setNClob(String arg0, NClob arg1)
1:             throws SQLException {
1:          getPhysCs().setNClob(arg0, arg1);
1:     }
1: 
1:     public void setClob(String arg0, Reader arg1, long arg2)
1:             throws SQLException {
1:          getPhysCs().setClob(arg0, arg1, arg2);
1:     }
1: 
1:     public void setBlob(String arg0, InputStream arg1, long arg2)
1:             throws SQLException {
1:          getPhysCs().setBlob(arg0, arg1, arg2);
1:     }
1: 
1:     public void setNClob(String arg0, Reader arg1, long arg2)
1:             throws SQLException {
1:          getPhysCs().setNClob(arg0, arg1, arg2);
1:     }
1: 
1:     public NClob getNClob(int arg0)
1:             throws SQLException {
1:         return getPhysCs().getNClob(arg0);
1:     }
1: 
1:     public NClob getNClob(String arg0)
1:             throws SQLException {
1:         return getPhysCs().getNClob(arg0);
1:     }
1: 
1:     public void setSQLXML(String arg0, SQLXML arg1)
1:             throws SQLException {
1:          getPhysCs().setSQLXML(arg0, arg1);
1:     }
1: 
1:     public SQLXML getSQLXML(int arg0)
1:             throws SQLException {
1:         return getPhysCs().getSQLXML(arg0);
1:     }
1: 
1:     public SQLXML getSQLXML(String arg0)
1:             throws SQLException {
1:         return getPhysCs().getSQLXML(arg0);
1:     }
1: 
1:     public String getNString(int arg0)
1:             throws SQLException {
1:         return getPhysCs().getNString(arg0);
1:     }
1: 
1:     public String getNString(String arg0)
1:             throws SQLException {
1:         return getPhysCs().getNString(arg0);
1:     }
1: 
1:     public Reader getNCharacterStream(int arg0)
1:             throws SQLException {
1:         return getPhysCs().getNCharacterStream(arg0);
1:     }
1: 
1:     public Reader getNCharacterStream(String arg0)
1:             throws SQLException {
1:         return getPhysCs().getNCharacterStream(arg0);
1:     }
1: 
1:     public Reader getCharacterStream(int arg0)
1:             throws SQLException {
1:         return getPhysCs().getCharacterStream(arg0);
1:     }
1: 
1:     public Reader getCharacterStream(String arg0)
1:             throws SQLException {
1:         return getPhysCs().getCharacterStream(arg0);
1:     }
1: 
1:     public void setBlob(String arg0, Blob arg1)
1:             throws SQLException {
1:          getPhysCs().setBlob(arg0, arg1);
1:     }
1: 
1:     public void setClob(String arg0, Clob arg1)
1:             throws SQLException {
1:          getPhysCs().setClob(arg0, arg1);
1:     }
1: 
1:     public void setAsciiStream(String arg0, InputStream arg1, long arg2)
1:             throws SQLException {
1:          getPhysCs().setAsciiStream(arg0, arg1, arg2);
1:     }
1: 
1:     public void setBinaryStream(String arg0, InputStream arg1, long arg2)
1:             throws SQLException {
1:          getPhysCs().setBinaryStream(arg0, arg1, arg2);
1:     }
1: 
1:     public void setCharacterStream(String arg0, Reader arg1, long arg2)
1:             throws SQLException {
1:          getPhysCs().setCharacterStream(arg0, arg1, arg2);
1:     }
1: 
1:     public void setAsciiStream(String arg0, InputStream arg1)
1:             throws SQLException {
1:          getPhysCs().setAsciiStream(arg0, arg1);
1:     }
1: 
1:     public void setBinaryStream(String arg0, InputStream arg1)
1:             throws SQLException {
1:          getPhysCs().setBinaryStream(arg0, arg1);
1:     }
1: 
1:     public void setCharacterStream(String arg0, Reader arg1)
1:             throws SQLException {
1:          getPhysCs().setCharacterStream(arg0, arg1);
1:     }
1: 
1:     public void setNCharacterStream(String arg0, Reader arg1)
1:             throws SQLException {
1:          getPhysCs().setNCharacterStream(arg0, arg1);
1:     }
1: 
1:     public void setClob(String arg0, Reader arg1)
1:             throws SQLException {
1:          getPhysCs().setClob(arg0, arg1);
1:     }
1: 
1:     public void setBlob(String arg0, InputStream arg1)
1:             throws SQLException {
1:          getPhysCs().setBlob(arg0, arg1);
1:     }
1: 
1:     public void setNClob(String arg0, Reader arg1)
1:             throws SQLException {
1:          getPhysCs().setNClob(arg0, arg1);
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////
1:     //
1:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:     //
1:     ////////////////////////////////////////////////////////////////////
1: 
1:     public <T> T getObject( int parameterIndex, Class<T> type )
1:         throws SQLException
1:     {
1:         return ((ClientCallableStatement) getPhysCs()).
1:             getObject(parameterIndex, type);
1:     }
1: 
1:     public <T> T getObject(String parameterName, Class<T> type)
1:         throws SQLException
1:     {
1:         return ((ClientCallableStatement) getPhysCs()).
1:             getObject( parameterName, type );
1:     }
1: 
commit:c784df5
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
commit:4772c7e
/////////////////////////////////////////////////////////////////////////
1:     public Object getObject(int i, Map<String, Class<?>> map) throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public Object getObject(String parameterName, Map<String, Class<?>> map) throws SQLException {
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Blob;
1: import java.sql.CallableStatement;
1: import java.sql.Clob;
/////////////////////////////////////////////////////////////////////////
1:     implements CallableStatement {
/////////////////////////////////////////////////////////////////////////
1:     public LogicalCallableStatement(CallableStatement physicalCs,
/////////////////////////////////////////////////////////////////////////
1:     public Blob getBlob(int i) throws SQLException {
1:     public Clob getClob(int i) throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public Blob getBlob(String parameterName) throws SQLException {
1:     public Clob getClob(String parameterName) throws SQLException {
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public java.sql.Blob getBlob(int i) throws SQLException {
0:     public java.sql.Clob getClob(int i) throws SQLException {
/////////////////////////////////////////////////////////////////////////
0:     public java.sql.Blob getBlob(String parameterName) throws SQLException {
0:     public java.sql.Clob getClob(String parameterName) throws SQLException {
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:d6cf884
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param cacheInteractor creating statement cache interactor
1:                                     StatementCacheInteractor cacheInteractor) {
1:         super(physicalCs, stmtKey, cacheInteractor);
commit:1beab6c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.LogicalCallableStatement
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.client.am;
1: 
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.math.BigDecimal;
1: import java.net.URL;
1: import java.sql.Array;
0: import java.sql.Blob;
0: import java.sql.Clob;
1: import java.sql.Date;
1: import java.sql.Ref;
1: import java.sql.SQLException;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: import java.util.Calendar;
1: import java.util.Map;
1: 
0: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1: import org.apache.derby.client.am.stmtcache.StatementKey;
1: 
1: /**
1:  * A wrapper class for a physical Derby callable statement.
1:  * <p>
1:  * The idea behind the logical prepared statement is to allow reuse of the
1:  * physical callable statement. In general the logical entity will forward all
1:  * calls to the physical entity. A few methods have special implementations, the
1:  * most important one being {@link #close}. Each method will check that the
1:  * logical statement is still open before the call is forwarded to the
1:  * underlying physical statement.
1:  *
1:  * @see LogicalStatementEntity
1:  */
1: public class LogicalCallableStatement
1:     extends LogicalPreparedStatement
0:     implements java.sql.CallableStatement {
1: 
1:     /**
1:      * Creates a new logical callable statement.
1:      *
1:      * @param physicalCs underlying physical statement
1:      * @param stmtKey key for the physical statement
0:      * @param cache associated statement cache
1:      * @throws IllegalArgumentException if {@code cache} is {@code null}
1:      */
0:     public LogicalCallableStatement(java.sql.CallableStatement physicalCs,
1:                                     StatementKey stmtKey,
0:                                     JDBCStatementCache cache) {
0:         super(physicalCs, stmtKey, cache);
1:     }
1: 
1:     public boolean wasNull() throws SQLException {
1:         return getPhysCs().wasNull();
1:     }
1: 
1:     public byte getByte(int parameterIndex) throws SQLException {
1:         return getPhysCs().getByte(parameterIndex);
1:     }
1: 
1:     public double getDouble(int parameterIndex) throws SQLException {
1:         return getPhysCs().getDouble(parameterIndex);
1:     }
1: 
1:     public float getFloat(int parameterIndex) throws SQLException {
1:         return getPhysCs().getFloat(parameterIndex);
1:     }
1: 
1:     public int getInt(int parameterIndex) throws SQLException {
1:         return getPhysCs().getInt(parameterIndex);
1:     }
1: 
1:     public long getLong(int parameterIndex) throws SQLException {
1:         return getPhysCs().getLong(parameterIndex);
1:     }
1: 
1:     public short getShort(int parameterIndex) throws SQLException {
1:         return getPhysCs().getShort(parameterIndex);
1:     }
1: 
1:     public boolean getBoolean(int parameterIndex) throws SQLException {
1:         return getPhysCs().getBoolean(parameterIndex);
1:     }
1: 
1:     public byte[] getBytes(int parameterIndex) throws SQLException {
1:         return getPhysCs().getBytes(parameterIndex);
1:     }
1: 
1:     public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {
1:          getPhysCs().registerOutParameter(parameterIndex, sqlType);
1:     }
1: 
1:     public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {
1:          getPhysCs().registerOutParameter(parameterIndex, sqlType, scale);
1:     }
1: 
1:     public Object getObject(int parameterIndex) throws SQLException {
1:         return getPhysCs().getObject(parameterIndex);
1:     }
1: 
1:     public String getString(int parameterIndex) throws SQLException {
1:         return getPhysCs().getString(parameterIndex);
1:     }
1: 
1:     public void registerOutParameter(int paramIndex, int sqlType, String typeName) throws SQLException {
1:          getPhysCs().registerOutParameter(paramIndex, sqlType, typeName);
1:     }
1: 
1:     public byte getByte(String parameterName) throws SQLException {
1:         return getPhysCs().getByte(parameterName);
1:     }
1: 
1:     public double getDouble(String parameterName) throws SQLException {
1:         return getPhysCs().getDouble(parameterName);
1:     }
1: 
1:     public float getFloat(String parameterName) throws SQLException {
1:         return getPhysCs().getFloat(parameterName);
1:     }
1: 
1:     public int getInt(String parameterName) throws SQLException {
1:         return getPhysCs().getInt(parameterName);
1:     }
1: 
1:     public long getLong(String parameterName) throws SQLException {
1:         return getPhysCs().getLong(parameterName);
1:     }
1: 
1:     public short getShort(String parameterName) throws SQLException {
1:         return getPhysCs().getShort(parameterName);
1:     }
1: 
1:     public boolean getBoolean(String parameterName) throws SQLException {
1:         return getPhysCs().getBoolean(parameterName);
1:     }
1: 
1:     public byte[] getBytes(String parameterName) throws SQLException {
1:         return getPhysCs().getBytes(parameterName);
1:     }
1: 
1:     public void setByte(String parameterName, byte x) throws SQLException {
1:          getPhysCs().setByte(parameterName, x);
1:     }
1: 
1:     public void setDouble(String parameterName, double x) throws SQLException {
1:          getPhysCs().setDouble(parameterName, x);
1:     }
1: 
1:     public void setFloat(String parameterName, float x) throws SQLException {
1:          getPhysCs().setFloat(parameterName, x);
1:     }
1: 
1:     public void registerOutParameter(String parameterName, int sqlType) throws SQLException {
1:          getPhysCs().registerOutParameter(parameterName, sqlType);
1:     }
1: 
1:     public void setInt(String parameterName, int x) throws SQLException {
1:          getPhysCs().setInt(parameterName, x);
1:     }
1: 
1:     public void setNull(String parameterName, int sqlType) throws SQLException {
1:          getPhysCs().setNull(parameterName, sqlType);
1:     }
1: 
1:     public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {
1:          getPhysCs().registerOutParameter(parameterName, sqlType, scale);
1:     }
1: 
1:     public void setLong(String parameterName, long x) throws SQLException {
1:          getPhysCs().setLong(parameterName, x);
1:     }
1: 
1:     public void setShort(String parameterName, short x) throws SQLException {
1:          getPhysCs().setShort(parameterName, x);
1:     }
1: 
1:     public void setBoolean(String parameterName, boolean x) throws SQLException {
1:          getPhysCs().setBoolean(parameterName, x);
1:     }
1: 
1:     public void setBytes(String parameterName, byte[] x) throws SQLException {
1:          getPhysCs().setBytes(parameterName, x);
1:     }
1: 
1:     public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {
1:         return getPhysCs().getBigDecimal(parameterIndex);
1:     }
1: 
1:     public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException {
1:         return getPhysCs().getBigDecimal(parameterIndex, scale);
1:     }
1: 
1:     public URL getURL(int parameterIndex) throws SQLException {
1:         return getPhysCs().getURL(parameterIndex);
1:     }
1: 
1:     public Array getArray(int i) throws SQLException {
1:         return getPhysCs().getArray(i);
1:     }
1: 
0:     public Blob getBlob(int i) throws SQLException {
1:         return getPhysCs().getBlob(i);
1:     }
1: 
0:     public Clob getClob(int i) throws SQLException {
1:         return getPhysCs().getClob(i);
1:     }
1: 
1:     public Date getDate(int parameterIndex) throws SQLException {
1:         return getPhysCs().getDate(parameterIndex);
1:     }
1: 
1:     public Ref getRef(int i) throws SQLException {
1:         return getPhysCs().getRef(i);
1:     }
1: 
1:     public Time getTime(int parameterIndex) throws SQLException {
1:         return getPhysCs().getTime(parameterIndex);
1:     }
1: 
1:     public Timestamp getTimestamp(int parameterIndex) throws SQLException {
1:         return getPhysCs().getTimestamp(parameterIndex);
1:     }
1: 
1:     public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {
1:          getPhysCs().setAsciiStream(parameterName, x, length);
1:     }
1: 
1:     public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {
1:          getPhysCs().setBinaryStream(parameterName, x, length);
1:     }
1: 
1:     public void setCharacterStream(String parameterName, Reader reader, int length) throws SQLException {
1:          getPhysCs().setCharacterStream(parameterName, reader, length);
1:     }
1: 
1:     public Object getObject(String parameterName) throws SQLException {
1:         return getPhysCs().getObject(parameterName);
1:     }
1: 
1:     public void setObject(String parameterName, Object x) throws SQLException {
1:          getPhysCs().setObject(parameterName, x);
1:     }
1: 
1:     public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {
1:          getPhysCs().setObject(parameterName, x, targetSqlType);
1:     }
1: 
1:     public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {
1:          getPhysCs().setObject(parameterName, x, targetSqlType, scale);
1:     }
1: 
0:     public Object getObject(int i, Map map) throws SQLException {
1:         return getPhysCs().getObject(i, map);
1:     }
1: 
1:     public String getString(String parameterName) throws SQLException {
1:         return getPhysCs().getString(parameterName);
1:     }
1: 
1:     public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {
1:          getPhysCs().registerOutParameter(parameterName, sqlType, typeName);
1:     }
1: 
1:     public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {
1:          getPhysCs().setNull(parameterName, sqlType, typeName);
1:     }
1: 
1:     public void setString(String parameterName, String x) throws SQLException {
1:          getPhysCs().setString(parameterName, x);
1:     }
1: 
1:     public BigDecimal getBigDecimal(String parameterName) throws SQLException {
1:         return getPhysCs().getBigDecimal(parameterName);
1:     }
1: 
1:     public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {
1:          getPhysCs().setBigDecimal(parameterName, x);
1:     }
1: 
1:     public URL getURL(String parameterName) throws SQLException {
1:         return getPhysCs().getURL(parameterName);
1:     }
1: 
1:     public void setURL(String parameterName, URL val) throws SQLException {
1:          getPhysCs().setURL(parameterName, val);
1:     }
1: 
1:     public Array getArray(String parameterName) throws SQLException {
1:         return getPhysCs().getArray(parameterName);
1:     }
1: 
0:     public Blob getBlob(String parameterName) throws SQLException {
1:         return getPhysCs().getBlob(parameterName);
1:     }
1: 
0:     public Clob getClob(String parameterName) throws SQLException {
1:         return getPhysCs().getClob(parameterName);
1:     }
1: 
1:     public Date getDate(String parameterName) throws SQLException {
1:         return getPhysCs().getDate(parameterName);
1:     }
1: 
1:     public void setDate(String parameterName, Date x) throws SQLException {
1:          getPhysCs().setDate(parameterName, x);
1:     }
1: 
1:     public Date getDate(int parameterIndex, Calendar cal) throws SQLException {
1:         return getPhysCs().getDate(parameterIndex, cal);
1:     }
1: 
1:     public Ref getRef(String parameterName) throws SQLException {
1:         return getPhysCs().getRef(parameterName);
1:     }
1: 
1:     public Time getTime(String parameterName) throws SQLException {
1:         return getPhysCs().getTime(parameterName);
1:     }
1: 
1:     public void setTime(String parameterName, Time x) throws SQLException {
1:          getPhysCs().setTime(parameterName, x);
1:     }
1: 
1:     public Time getTime(int parameterIndex, Calendar cal) throws SQLException {
1:         return getPhysCs().getTime(parameterIndex, cal);
1:     }
1: 
1:     public Timestamp getTimestamp(String parameterName) throws SQLException {
1:         return getPhysCs().getTimestamp(parameterName);
1:     }
1: 
1:     public void setTimestamp(String parameterName, Timestamp x) throws SQLException {
1:          getPhysCs().setTimestamp(parameterName, x);
1:     }
1: 
1:     public Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException {
1:         return getPhysCs().getTimestamp(parameterIndex, cal);
1:     }
1: 
0:     public Object getObject(String parameterName, Map map) throws SQLException {
1:         return getPhysCs().getObject(parameterName, map);
1:     }
1: 
1:     public Date getDate(String parameterName, Calendar cal) throws SQLException {
1:         return getPhysCs().getDate(parameterName, cal);
1:     }
1: 
1:     public Time getTime(String parameterName, Calendar cal) throws SQLException {
1:         return getPhysCs().getTime(parameterName, cal);
1:     }
1: 
1:     public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {
1:         return getPhysCs().getTimestamp(parameterName, cal);
1:     }
1: 
1:     public void setDate(String parameterName, Date x, Calendar cal) throws SQLException {
1:          getPhysCs().setDate(parameterName, x, cal);
1:     }
1: 
1:     public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {
1:          getPhysCs().setTime(parameterName, x, cal);
1:     }
1: 
1:     public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {
1:          getPhysCs().setTimestamp(parameterName, x, cal);
1:     }
1: }
============================================================================