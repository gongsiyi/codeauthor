1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.conn.TempTableInfo
1:345de35: 
1:575d6a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:575d6a1:    contributor license agreements.  See the NOTICE file distributed with
1:575d6a1:    this work for additional information regarding copyright ownership.
1:575d6a1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:575d6a1:    (the "License"); you may not use this file except in compliance with
1:575d6a1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.conn;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: 
1:eac0369: //this class is for temporary tables. The information kept here is necessary to implement the rollback
1:eac0369: //and commit behavior for temporary tables.
1:eac0369: 
2:eac0369: /**
1:eac0369: The temp tables will have following data structure
1:eac0369: TableDescriptor
1:eac0369: Declared in savepoint level
1:eac0369: Dropped in savepoint level
1:eac0369: Modified in savepoint level
1:eac0369: 
1:eac0369: The actual logic
1:eac0369: 
1:eac0369: LanguageConnectionContext will keep the "current savepoint level". At any point in
1:eac0369: time, this is the total number of savepoints defined for a transaction.
1:eac0369: At the start of any new transaction, the "current savepoint level" will be set to 0.
1:eac0369: 
1:eac0369: Everytime a new user defined savepoint is set, store returns the total number of savepoints
1:eac0369: for the connection at that point.
1:eac0369: For eg, in a new transaction,
1:eac0369: "current savepoint level' will be 0. When the first savepoint is set, store will return
1:eac0369: 1 and "current savepoint level" will be set to 1. For next savepoint, store will return 2 and so on
1:eac0369: and so forth.
1:eac0369: 
1:eac0369: When language calls rollback or release of a savepoint, store will again return the total number of savepoints
1:eac0369: for the connection after rollback or release and we will set "current savepoint level" to that number. For eg,
1:eac0369: start tran ("current savepoint level"=0)
1:eac0369: set savepoint 1 ("current savepoint level"=1)
1:eac0369: set savepoint 2 ("current savepoint level"=2)
1:eac0369: set savepoint 3 ("current savepoint level"=3)
1:eac0369: set savepoint 4 ("current savepoint level"=4)
1:eac0369: release savepoint 3 ("current savepoint level"=2)
1:eac0369: rollback savepoint 1 ("current savepoint level"=0)
1:eac0369: 
1:eac0369: If the temporary table was declared with ON ROLLBACK DELETE ROWS and contents of that temporary table
1:eac0369: were modified in a transaction or within a savepoint unit, then we keep track of that by saving the
1:eac0369: savepoint level in dataModifiedInSavepointLevel. This information will be used at rollback of savepoint or transaction.
1:eac0369: Also, when a savepoint is released, we check if the table was modified in any of the savepoints that
1:eac0369: are getting released. If yes, then we put the current savepoint level as dataModifiedInSavepointLevel.
1:eac0369: eg
1:eac0369: start tran ("current savepoint level"=0)
1:eac0369: declare temp table 0 ON ROLLBACK DELETE ROWS("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:eac0369: commit (temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1))
1:eac0369: start tran ("current savepoint level = 0)
1:eac0369:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:eac0369: set savepoint 1("current savepoint level = 1")
1:eac0369:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:eac0369: set savepoint 2("current savepoint level = 2")
1:eac0369:   delete 1 row from temp table 0
1:eac0369:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=2)
1:eac0369: release savepoint 2 ("current savepoint level"=1) and reset the modified in savepoint level as follows
1:eac0369:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=1)
1:eac0369: rollback ("current savepoint level"=0) All the rows from the temp table 0 will be removed
1:eac0369: At the time of commit, we set dataModifiedInSavepointLevel to -1.
1:eac0369: At the time of rollback (transaction / savepoint), first we check if the table was modified in the unit of work
1:eac0369: getting rolled back. If yes, then we delete all the data from the temp table and we set dataModifiedInSavepointLevel to -1.
1:eac0369: 
1:eac0369: When language calls release of a savepoint, store will again return the total number of savepoints
1:eac0369: in the system after release. We will go through all the temp tables and reset their declared or
1:eac0369: dropped or modified in savepoint level to the value returned by the release savepoint if those tables had their
1:eac0369: declared or dropped or modified in savepoint levels higher than what was returned by the release savepoint.
1:eac0369: eg
1:eac0369: start tran ("current savepoint level"=0)
1:eac0369: declare temp table 0 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:eac0369: set savepoint 1("current savepoint level = 1")
1:eac0369: declare temp table 1 ("declared in savepoint level"=1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:eac0369: set savepoint 2("current savepoint level = 2")
1:eac0369: declare temp table 2 ("declared in savepoint level"=2, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:eac0369: release savepoint 1 ("current savepoint level"=0) and reset the savepoint levels as follows
1:eac0369:   temp table 1 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:eac0369:   temp table 2 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:eac0369: set savepoint 3("current savepoint level = 1")
1:eac0369: rollback savepoint 3 ("current savepoint level"=0) and temp table info will look as follows
1:eac0369:   temp table 0 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:eac0369:   temp table 1 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:eac0369:   temp table 2 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:eac0369: 
1:eac0369: When you declare a temp table, it will have "declared in savepoint level" as the current savepoint
1:eac0369: level of the LanguageConnectionContext (which will be 0 in a transaction with no user-defined savepoints).
1:eac0369: The "dropped in savepoint level" for new temp tables will be set to -1.
1:eac0369: The "dataModifiedInSavepointLevel" for new temp tables will be set to -1 as well.
1:eac0369: 
1:eac0369: When a temp table is dropped, we will first check if the table was declared in a savepoint level
1:eac0369: equal to the current savepoint level.
1:eac0369: 	If yes, then we will remove it from the temp tables list for the LanguageConnectionContext .
1:eac0369:     eg
1:eac0369:     start tran ("current savepoint level = 0")
1:eac0369:     set savepoint 1("current savepoint level = 1")
1:eac0369:     declare temp table 1 ("declared in savepoint level"=1, "dropped in savepoint level"=-1)
1:eac0369:     drop temp table 1 (declared in savepoint level same as current savepoint level and hence will remove it from list of temp tables)
1:eac0369: 	If no, then we will set the dropped in savepoint level as the current savepoint level of the
1:eac0369: 		LanguageConnectionContext (which will be 0 in a transaction without savepoints and it also means
1:eac0369: 		that the table was declared in a previous transaction).
1:eac0369: 
1:eac0369: At the time of commit, go through all the temp tables with "dropped in savepoint level" != -1 (meaning dropped in this transaction)
1:eac0369: and remove them from the temp tables list for the LanguageConnectionContext. All the rest of the temp tables with
1:eac0369: "dropped in savepoint level" = -1, we will set their "declared in savepoint level" to -1 and , "dataModifiedInSavepointLevel" to -1.
1:eac0369: eg
1:eac0369:   start tran ("current savepoint level = 0)
1:eac0369: 	  declare temp table t1("declared in savepoint level" = 0, "dropped in savepoint level"=-1)
1:eac0369:   commit (temp table 1 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1))
1:eac0369:   start tran ("current savepoint level = 0)
1:eac0369: 	  drop temp table t1 ("declared in savepoint level" = -1, "dropped in savepoint level"=0)
1:eac0369:   commit (temp table t1 will be removed from list of temp tables)
1:eac0369: 
1:eac0369: At the time of rollback
1:eac0369:   if rolling back transaction, first set the "current savepoint level" to 0
1:eac0369:   if rolling back to a savepoint, first set the "current savepoint level" to savepoint level returned by Store
1:eac0369:     for the rollback to savepoint command
1:eac0369:   Now go through all the temp tables.
1:eac0369: 	If "declared in savepoint level" of temp table is greater than or equal to "current savepoint level"
1:eac0369:   (ie table was declared in this unit of work)
1:eac0369:     And if table was not dropped in this unit of work ie "dropped in savepoint level" = -1
1:eac0369:       Then we should remove the table from the list of temp tables and drop the conglomerate created for it
1:eac0369: 		  eg
1:eac0369: 		  start tran ("current savepoint level = 0)
1:eac0369: 	  	declare temp table t2("declared in savepoint level" = 0, "dropped in savepoint level"=-1)
1:eac0369: 		  rollback tran
1:eac0369:         (temp table t2 will be removed from list of tables and conglomerate associated with it will be dropped)
1:dbed020:     And if table was dropped in this unit of work ie "dropped in savepoint level" &gt;= "current savepoint level"
1:eac0369:       Then we should remove the table from the list of temp tables
1:eac0369: 		  eg
1:eac0369: 		  start tran ("current savepoint level = 0)
1:eac0369:       set savepoint 1("current savepoint level = 1")
1:eac0369: 	  	declare temp table t2("declared in savepoint level" = 1, "dropped in savepoint level"=-1)
1:eac0369:       set savepoint 2("current savepoint level = 2")
1:eac0369: 		  drop temp table t1 ("declared in savepoint level" = 1, "dropped in savepoint level"=2)
1:eac0369: 		  rollback savepoint 1 ("current savepoint level = 0) temp table t1 will be removed from the list of temp tables
1:eac0369: 	Else if the "dropped in savepoint level" of temp table is greate than or equal to "current savepoint level"
1:eac0369: 	 	it mean that table was dropped in this unit of work (and was declared in an earlier savepoint unit / transaction) and we will
1:eac0369:     restore it as part of rollback ie replace the existing entry for this table in valid temp tables list with restored temp table.
1:eac0369:     At the end of restoring, "declared in savepoint level" will remain unchanged and "dropped in savepoint level" will be -1.
1:eac0369: 		eg
1:eac0369: 		  start tran ("current savepoint level = 0)
1:eac0369: 		  declare temp table t1 with definition 1("declared in savepoint level" = 0, "dropped in savepoint level"=-1, definition 1(stored in table descriptor))
1:eac0369: 		  commit (temp table t1 "declared in savepoint level" = -1, "dropped in savepoint level"=-1)
1:eac0369: 		  start tran ("current savepoint level = 0)
1:eac0369:       set savepoint 1("current savepoint level = 1")
1:eac0369: 		  drop temp table t1 ("declared in savepoint level" = -1, "dropped in savepoint level"=1, definition 1(stored in table descriptor))
1:eac0369: 		  declare temp table t1 with definition 2(say different than definition 1)
1:eac0369:         ("declared in savepoint level" = -1, "dropped in savepoint level"=1, definition 1(stored in table descriptor)) ,
1:eac0369: 			  ("declared in savepoint level" = 1, "dropped in savepoint level"=-1, definition 2(stored in table descriptor))
1:eac0369:       set savepoint 2("current savepoint level = 2")
1:eac0369:       drop temp table t1("declared in savepoint level" = -1, "dropped in savepoint level"=1, definition 1(stored in table descriptor)) ,
1:eac0369: 			  ("declared in savepoint level" = 1, "dropped in savepoint level"=2, definition 2(stored in table descriptor))
1:eac0369: 		  rollback tran
1:eac0369:         (Remove : temp table t1("declared in savepoint level" = 1, "dropped in savepoint level"=2, definition 2(stored in table descriptor)
1:eac0369:         (Restore : temp table t1"declared in savepoint level" = -1, "dropped in savepoint level"=-1, definition 1(stored in table descriptor))
1:eac0369: 	Else if the "dataModifiedInSavepointLevel" of temp table is greate than or equal to "current savepoint level"
1:eac0369: 	 	it means that table was declared in an earlier savepoint unit / transaction and was modified in the current UOW. And hence we will delete all the
1:eac0369:     data from it.
1:eac0369: */
1:eac0369: class TempTableInfo
1:eac0369: {
1:eac0369: 
1:eac0369: 	private TableDescriptor td;
1:eac0369: 	private int declaredInSavepointLevel;
1:eac0369: 	private int droppededInSavepointLevel;
1:eac0369: 	private int dataModifiedInSavepointLevel;
1:eac0369: 
1:eac0369: 	TempTableInfo(TableDescriptor td, int declaredInSavepointLevel)
1:eac0369: 	{
1:eac0369: 		this.td = td;
1:eac0369: 		this.declaredInSavepointLevel = declaredInSavepointLevel;
1:eac0369: 		this.droppededInSavepointLevel = -1;
1:eac0369: 		this.dataModifiedInSavepointLevel = -1;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the table descriptor
1:eac0369: 	 */
1:eac0369: 	TableDescriptor getTableDescriptor() {
1:eac0369:     return td;
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the table descriptor. Will be called while temporary is being restored
1:eac0369: 	 */
1:eac0369: 	void setTableDescriptor(TableDescriptor td) {
1:eac0369:     this.td = td;
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Matches by name and only temp tables that have not been dropped (that's when droppededInSavepointLevel will be -1)
1:eac0369: 	 */
1:eac0369: 	boolean matches(String tableName) {
1:eac0369:     return (td.getName().equals(tableName) && droppededInSavepointLevel == -1);
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the savepoint level when the table was last modified
1:eac0369: 	 */
1:eac0369: 	int getModifiedInSavepointLevel() {
1:eac0369:     return dataModifiedInSavepointLevel;
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the savepoint level when the table was last modified
1:eac0369: 	 */
1:eac0369: 	void setModifiedInSavepointLevel(int dataModifiedInSavepointLevel) {
1:eac0369:     this.dataModifiedInSavepointLevel = dataModifiedInSavepointLevel;
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the savepoint level when the table was declared
1:eac0369: 	 */
1:eac0369: 	int getDeclaredInSavepointLevel() {
1:eac0369:     return declaredInSavepointLevel;
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the savepoint level when the table was declared
1:eac0369: 	 */
1:eac0369: 	void setDeclaredInSavepointLevel(int declaredInSavepointLevel) {
1:eac0369:     this.declaredInSavepointLevel = declaredInSavepointLevel;
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the savepoint level when the table was dropped
1:eac0369: 	 */
1:eac0369: 	int getDroppedInSavepointLevel() {
1:eac0369:     return droppededInSavepointLevel;
1:eac0369:   }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the savepoint level when the table was dropped
1:eac0369: 	 */
1:eac0369: 	public void setDroppedInSavepointLevel(int droppededInSavepointLevel) {
1:eac0369:     this.droppededInSavepointLevel = droppededInSavepointLevel;
1:eac0369:   }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:     And if table was dropped in this unit of work ie "dropped in savepoint level" &gt;= "current savepoint level"
author:David Van Couvering
-------------------------------------------------------------------------------
commit:575d6a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.conn.TempTableInfo
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.conn
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.conn;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
1: //this class is for temporary tables. The information kept here is necessary to implement the rollback
1: //and commit behavior for temporary tables.
1: 
1: /**
1: The temp tables will have following data structure
1: TableDescriptor
1: Declared in savepoint level
1: Dropped in savepoint level
1: Modified in savepoint level
1: 
1: The actual logic
1: 
1: LanguageConnectionContext will keep the "current savepoint level". At any point in
1: time, this is the total number of savepoints defined for a transaction.
1: At the start of any new transaction, the "current savepoint level" will be set to 0.
1: 
1: Everytime a new user defined savepoint is set, store returns the total number of savepoints
1: for the connection at that point.
1: For eg, in a new transaction,
1: "current savepoint level' will be 0. When the first savepoint is set, store will return
1: 1 and "current savepoint level" will be set to 1. For next savepoint, store will return 2 and so on
1: and so forth.
1: 
1: When language calls rollback or release of a savepoint, store will again return the total number of savepoints
1: for the connection after rollback or release and we will set "current savepoint level" to that number. For eg,
1: start tran ("current savepoint level"=0)
1: set savepoint 1 ("current savepoint level"=1)
1: set savepoint 2 ("current savepoint level"=2)
1: set savepoint 3 ("current savepoint level"=3)
1: set savepoint 4 ("current savepoint level"=4)
1: release savepoint 3 ("current savepoint level"=2)
1: rollback savepoint 1 ("current savepoint level"=0)
1: 
1: If the temporary table was declared with ON ROLLBACK DELETE ROWS and contents of that temporary table
1: were modified in a transaction or within a savepoint unit, then we keep track of that by saving the
1: savepoint level in dataModifiedInSavepointLevel. This information will be used at rollback of savepoint or transaction.
1: Also, when a savepoint is released, we check if the table was modified in any of the savepoints that
1: are getting released. If yes, then we put the current savepoint level as dataModifiedInSavepointLevel.
1: eg
1: start tran ("current savepoint level"=0)
1: declare temp table 0 ON ROLLBACK DELETE ROWS("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1: commit (temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1))
1: start tran ("current savepoint level = 0)
1:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1: set savepoint 1("current savepoint level = 1")
1:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1: set savepoint 2("current savepoint level = 2")
1:   delete 1 row from temp table 0
1:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=2)
1: release savepoint 2 ("current savepoint level"=1) and reset the modified in savepoint level as follows
1:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=1)
1: rollback ("current savepoint level"=0) All the rows from the temp table 0 will be removed
1: At the time of commit, we set dataModifiedInSavepointLevel to -1.
1: At the time of rollback (transaction / savepoint), first we check if the table was modified in the unit of work
1: getting rolled back. If yes, then we delete all the data from the temp table and we set dataModifiedInSavepointLevel to -1.
1: 
1: When language calls release of a savepoint, store will again return the total number of savepoints
1: in the system after release. We will go through all the temp tables and reset their declared or
1: dropped or modified in savepoint level to the value returned by the release savepoint if those tables had their
1: declared or dropped or modified in savepoint levels higher than what was returned by the release savepoint.
1: eg
1: start tran ("current savepoint level"=0)
1: declare temp table 0 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1: set savepoint 1("current savepoint level = 1")
1: declare temp table 1 ("declared in savepoint level"=1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1: set savepoint 2("current savepoint level = 2")
1: declare temp table 2 ("declared in savepoint level"=2, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1: release savepoint 1 ("current savepoint level"=0) and reset the savepoint levels as follows
1:   temp table 1 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:   temp table 2 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1: set savepoint 3("current savepoint level = 1")
1: rollback savepoint 3 ("current savepoint level"=0) and temp table info will look as follows
1:   temp table 0 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:   temp table 1 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1:   temp table 2 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
1: 
1: When you declare a temp table, it will have "declared in savepoint level" as the current savepoint
1: level of the LanguageConnectionContext (which will be 0 in a transaction with no user-defined savepoints).
1: The "dropped in savepoint level" for new temp tables will be set to -1.
1: The "dataModifiedInSavepointLevel" for new temp tables will be set to -1 as well.
1: 
1: When a temp table is dropped, we will first check if the table was declared in a savepoint level
1: equal to the current savepoint level.
1: 	If yes, then we will remove it from the temp tables list for the LanguageConnectionContext .
1:     eg
1:     start tran ("current savepoint level = 0")
1:     set savepoint 1("current savepoint level = 1")
1:     declare temp table 1 ("declared in savepoint level"=1, "dropped in savepoint level"=-1)
1:     drop temp table 1 (declared in savepoint level same as current savepoint level and hence will remove it from list of temp tables)
1: 	If no, then we will set the dropped in savepoint level as the current savepoint level of the
1: 		LanguageConnectionContext (which will be 0 in a transaction without savepoints and it also means
1: 		that the table was declared in a previous transaction).
1: 
1: At the time of commit, go through all the temp tables with "dropped in savepoint level" != -1 (meaning dropped in this transaction)
1: and remove them from the temp tables list for the LanguageConnectionContext. All the rest of the temp tables with
1: "dropped in savepoint level" = -1, we will set their "declared in savepoint level" to -1 and , "dataModifiedInSavepointLevel" to -1.
1: eg
1:   start tran ("current savepoint level = 0)
1: 	  declare temp table t1("declared in savepoint level" = 0, "dropped in savepoint level"=-1)
1:   commit (temp table 1 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1))
1:   start tran ("current savepoint level = 0)
1: 	  drop temp table t1 ("declared in savepoint level" = -1, "dropped in savepoint level"=0)
1:   commit (temp table t1 will be removed from list of temp tables)
1: 
1: At the time of rollback
1:   if rolling back transaction, first set the "current savepoint level" to 0
1:   if rolling back to a savepoint, first set the "current savepoint level" to savepoint level returned by Store
1:     for the rollback to savepoint command
1:   Now go through all the temp tables.
1: 	If "declared in savepoint level" of temp table is greater than or equal to "current savepoint level"
1:   (ie table was declared in this unit of work)
1:     And if table was not dropped in this unit of work ie "dropped in savepoint level" = -1
1:       Then we should remove the table from the list of temp tables and drop the conglomerate created for it
1: 		  eg
1: 		  start tran ("current savepoint level = 0)
1: 	  	declare temp table t2("declared in savepoint level" = 0, "dropped in savepoint level"=-1)
1: 		  rollback tran
1:         (temp table t2 will be removed from list of tables and conglomerate associated with it will be dropped)
0:     And if table was dropped in this unit of work ie "dropped in savepoint level" >= "current savepoint level"
1:       Then we should remove the table from the list of temp tables
1: 		  eg
1: 		  start tran ("current savepoint level = 0)
1:       set savepoint 1("current savepoint level = 1")
1: 	  	declare temp table t2("declared in savepoint level" = 1, "dropped in savepoint level"=-1)
1:       set savepoint 2("current savepoint level = 2")
1: 		  drop temp table t1 ("declared in savepoint level" = 1, "dropped in savepoint level"=2)
1: 		  rollback savepoint 1 ("current savepoint level = 0) temp table t1 will be removed from the list of temp tables
1: 	Else if the "dropped in savepoint level" of temp table is greate than or equal to "current savepoint level"
1: 	 	it mean that table was dropped in this unit of work (and was declared in an earlier savepoint unit / transaction) and we will
1:     restore it as part of rollback ie replace the existing entry for this table in valid temp tables list with restored temp table.
1:     At the end of restoring, "declared in savepoint level" will remain unchanged and "dropped in savepoint level" will be -1.
1: 		eg
1: 		  start tran ("current savepoint level = 0)
1: 		  declare temp table t1 with definition 1("declared in savepoint level" = 0, "dropped in savepoint level"=-1, definition 1(stored in table descriptor))
1: 		  commit (temp table t1 "declared in savepoint level" = -1, "dropped in savepoint level"=-1)
1: 		  start tran ("current savepoint level = 0)
1:       set savepoint 1("current savepoint level = 1")
1: 		  drop temp table t1 ("declared in savepoint level" = -1, "dropped in savepoint level"=1, definition 1(stored in table descriptor))
1: 		  declare temp table t1 with definition 2(say different than definition 1)
1:         ("declared in savepoint level" = -1, "dropped in savepoint level"=1, definition 1(stored in table descriptor)) ,
1: 			  ("declared in savepoint level" = 1, "dropped in savepoint level"=-1, definition 2(stored in table descriptor))
1:       set savepoint 2("current savepoint level = 2")
1:       drop temp table t1("declared in savepoint level" = -1, "dropped in savepoint level"=1, definition 1(stored in table descriptor)) ,
1: 			  ("declared in savepoint level" = 1, "dropped in savepoint level"=2, definition 2(stored in table descriptor))
1: 		  rollback tran
1:         (Remove : temp table t1("declared in savepoint level" = 1, "dropped in savepoint level"=2, definition 2(stored in table descriptor)
1:         (Restore : temp table t1"declared in savepoint level" = -1, "dropped in savepoint level"=-1, definition 1(stored in table descriptor))
1: 	Else if the "dataModifiedInSavepointLevel" of temp table is greate than or equal to "current savepoint level"
1: 	 	it means that table was declared in an earlier savepoint unit / transaction and was modified in the current UOW. And hence we will delete all the
1:     data from it.
1: */
1: class TempTableInfo
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1: 
1: 	private TableDescriptor td;
1: 	private int declaredInSavepointLevel;
1: 	private int droppededInSavepointLevel;
1: 	private int dataModifiedInSavepointLevel;
1: 
1: 	TempTableInfo(TableDescriptor td, int declaredInSavepointLevel)
1: 	{
1: 		this.td = td;
1: 		this.declaredInSavepointLevel = declaredInSavepointLevel;
1: 		this.droppededInSavepointLevel = -1;
1: 		this.dataModifiedInSavepointLevel = -1;
1: 	}
1: 
1: 	/**
1: 	 * Return the table descriptor
1: 	 */
1: 	TableDescriptor getTableDescriptor() {
1:     return td;
1:   }
1: 
1: 	/**
1: 	 * Set the table descriptor. Will be called while temporary is being restored
1: 	 */
1: 	void setTableDescriptor(TableDescriptor td) {
1:     this.td = td;
1:   }
1: 
1: 	/**
1: 	 * Matches by name and only temp tables that have not been dropped (that's when droppededInSavepointLevel will be -1)
1: 	 */
1: 	boolean matches(String tableName) {
1:     return (td.getName().equals(tableName) && droppededInSavepointLevel == -1);
1:   }
1: 
1: 	/**
1: 	 * Return the savepoint level when the table was last modified
1: 	 */
1: 	int getModifiedInSavepointLevel() {
1:     return dataModifiedInSavepointLevel;
1:   }
1: 
1: 	/**
1: 	 * Set the savepoint level when the table was last modified
1: 	 */
1: 	void setModifiedInSavepointLevel(int dataModifiedInSavepointLevel) {
1:     this.dataModifiedInSavepointLevel = dataModifiedInSavepointLevel;
1:   }
1: 
1: 	/**
1: 	 * Return the savepoint level when the table was declared
1: 	 */
1: 	int getDeclaredInSavepointLevel() {
1:     return declaredInSavepointLevel;
1:   }
1: 
1: 	/**
1: 	 * Set the savepoint level when the table was declared
1: 	 */
1: 	void setDeclaredInSavepointLevel(int declaredInSavepointLevel) {
1:     this.declaredInSavepointLevel = declaredInSavepointLevel;
1:   }
1: 
1: 	/**
1: 	 * Return the savepoint level when the table was dropped
1: 	 */
1: 	int getDroppedInSavepointLevel() {
1:     return droppededInSavepointLevel;
1:   }
1: 
1: 	/**
1: 	 * Return the savepoint level when the table was dropped
1: 	 */
1: 	public void setDroppedInSavepointLevel(int droppededInSavepointLevel) {
1:     this.droppededInSavepointLevel = droppededInSavepointLevel;
1:   }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.conn
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.conn;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: //this class is for temporary tables. The information kept here is necessary to implement the rollback
0: //and commit behavior for temporary tables.
0: 
0: /**
0: The temp tables will have following data structure
0: TableDescriptor
0: Declared in savepoint level
0: Dropped in savepoint level
0: Modified in savepoint level
0: 
0: The actual logic
0: 
0: LanguageConnectionContext will keep the "current savepoint level". At any point in
0: time, this is the total number of savepoints defined for a transaction.
0: At the start of any new transaction, the "current savepoint level" will be set to 0.
0: 
0: Everytime a new user defined savepoint is set, store returns the total number of savepoints
0: for the connection at that point.
0: For eg, in a new transaction,
0: "current savepoint level' will be 0. When the first savepoint is set, store will return
0: 1 and "current savepoint level" will be set to 1. For next savepoint, store will return 2 and so on
0: and so forth.
0: 
0: When language calls rollback or release of a savepoint, store will again return the total number of savepoints
0: for the connection after rollback or release and we will set "current savepoint level" to that number. For eg,
0: start tran ("current savepoint level"=0)
0: set savepoint 1 ("current savepoint level"=1)
0: set savepoint 2 ("current savepoint level"=2)
0: set savepoint 3 ("current savepoint level"=3)
0: set savepoint 4 ("current savepoint level"=4)
0: release savepoint 3 ("current savepoint level"=2)
0: rollback savepoint 1 ("current savepoint level"=0)
0: 
0: If the temporary table was declared with ON ROLLBACK DELETE ROWS and contents of that temporary table
0: were modified in a transaction or within a savepoint unit, then we keep track of that by saving the
0: savepoint level in dataModifiedInSavepointLevel. This information will be used at rollback of savepoint or transaction.
0: Also, when a savepoint is released, we check if the table was modified in any of the savepoints that
0: are getting released. If yes, then we put the current savepoint level as dataModifiedInSavepointLevel.
0: eg
0: start tran ("current savepoint level"=0)
0: declare temp table 0 ON ROLLBACK DELETE ROWS("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
0: commit (temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1))
0: start tran ("current savepoint level = 0)
0:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
0: set savepoint 1("current savepoint level = 1")
0:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
0: set savepoint 2("current savepoint level = 2")
0:   delete 1 row from temp table 0
0:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=2)
0: release savepoint 2 ("current savepoint level"=1) and reset the modified in savepoint level as follows
0:   temp table 0 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=1)
0: rollback ("current savepoint level"=0) All the rows from the temp table 0 will be removed
0: At the time of commit, we set dataModifiedInSavepointLevel to -1.
0: At the time of rollback (transaction / savepoint), first we check if the table was modified in the unit of work
0: getting rolled back. If yes, then we delete all the data from the temp table and we set dataModifiedInSavepointLevel to -1.
0: 
0: When language calls release of a savepoint, store will again return the total number of savepoints
0: in the system after release. We will go through all the temp tables and reset their declared or
0: dropped or modified in savepoint level to the value returned by the release savepoint if those tables had their
0: declared or dropped or modified in savepoint levels higher than what was returned by the release savepoint.
0: eg
0: start tran ("current savepoint level"=0)
0: declare temp table 0 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
0: set savepoint 1("current savepoint level = 1")
0: declare temp table 1 ("declared in savepoint level"=1, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
0: set savepoint 2("current savepoint level = 2")
0: declare temp table 2 ("declared in savepoint level"=2, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
0: release savepoint 1 ("current savepoint level"=0) and reset the savepoint levels as follows
0:   temp table 1 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
0:   temp table 2 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
0: set savepoint 3("current savepoint level = 1")
0: rollback savepoint 3 ("current savepoint level"=0) and temp table info will look as follows
0:   temp table 0 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
0:   temp table 1 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
0:   temp table 2 ("declared in savepoint level"=0, "dropped in savepoint level"=-1, "dataModifiedInSavepointLevel"=-1)
0: 
0: When you declare a temp table, it will have "declared in savepoint level" as the current savepoint
0: level of the LanguageConnectionContext (which will be 0 in a transaction with no user-defined savepoints).
0: The "dropped in savepoint level" for new temp tables will be set to -1.
0: The "dataModifiedInSavepointLevel" for new temp tables will be set to -1 as well.
0: 
0: When a temp table is dropped, we will first check if the table was declared in a savepoint level
0: equal to the current savepoint level.
0: 	If yes, then we will remove it from the temp tables list for the LanguageConnectionContext .
0:     eg
0:     start tran ("current savepoint level = 0")
0:     set savepoint 1("current savepoint level = 1")
0:     declare temp table 1 ("declared in savepoint level"=1, "dropped in savepoint level"=-1)
0:     drop temp table 1 (declared in savepoint level same as current savepoint level and hence will remove it from list of temp tables)
0: 	If no, then we will set the dropped in savepoint level as the current savepoint level of the
0: 		LanguageConnectionContext (which will be 0 in a transaction without savepoints and it also means
0: 		that the table was declared in a previous transaction).
0: 
0: At the time of commit, go through all the temp tables with "dropped in savepoint level" != -1 (meaning dropped in this transaction)
0: and remove them from the temp tables list for the LanguageConnectionContext. All the rest of the temp tables with
0: "dropped in savepoint level" = -1, we will set their "declared in savepoint level" to -1 and , "dataModifiedInSavepointLevel" to -1.
0: eg
0:   start tran ("current savepoint level = 0)
0: 	  declare temp table t1("declared in savepoint level" = 0, "dropped in savepoint level"=-1)
0:   commit (temp table 1 ("declared in savepoint level"=-1, "dropped in savepoint level"=-1))
0:   start tran ("current savepoint level = 0)
0: 	  drop temp table t1 ("declared in savepoint level" = -1, "dropped in savepoint level"=0)
0:   commit (temp table t1 will be removed from list of temp tables)
0: 
0: At the time of rollback
0:   if rolling back transaction, first set the "current savepoint level" to 0
0:   if rolling back to a savepoint, first set the "current savepoint level" to savepoint level returned by Store
0:     for the rollback to savepoint command
0:   Now go through all the temp tables.
0: 	If "declared in savepoint level" of temp table is greater than or equal to "current savepoint level"
0:   (ie table was declared in this unit of work)
0:     And if table was not dropped in this unit of work ie "dropped in savepoint level" = -1
0:       Then we should remove the table from the list of temp tables and drop the conglomerate created for it
0: 		  eg
0: 		  start tran ("current savepoint level = 0)
0: 	  	declare temp table t2("declared in savepoint level" = 0, "dropped in savepoint level"=-1)
0: 		  rollback tran
0:         (temp table t2 will be removed from list of tables and conglomerate associated with it will be dropped)
0:     And if table was dropped in this unit of work ie "dropped in savepoint level" >= "current savepoint level"
0:       Then we should remove the table from the list of temp tables
0: 		  eg
0: 		  start tran ("current savepoint level = 0)
0:       set savepoint 1("current savepoint level = 1")
0: 	  	declare temp table t2("declared in savepoint level" = 1, "dropped in savepoint level"=-1)
0:       set savepoint 2("current savepoint level = 2")
0: 		  drop temp table t1 ("declared in savepoint level" = 1, "dropped in savepoint level"=2)
0: 		  rollback savepoint 1 ("current savepoint level = 0) temp table t1 will be removed from the list of temp tables
0: 	Else if the "dropped in savepoint level" of temp table is greate than or equal to "current savepoint level"
0: 	 	it mean that table was dropped in this unit of work (and was declared in an earlier savepoint unit / transaction) and we will
0:     restore it as part of rollback ie replace the existing entry for this table in valid temp tables list with restored temp table.
0:     At the end of restoring, "declared in savepoint level" will remain unchanged and "dropped in savepoint level" will be -1.
0: 		eg
0: 		  start tran ("current savepoint level = 0)
0: 		  declare temp table t1 with definition 1("declared in savepoint level" = 0, "dropped in savepoint level"=-1, definition 1(stored in table descriptor))
0: 		  commit (temp table t1 "declared in savepoint level" = -1, "dropped in savepoint level"=-1)
0: 		  start tran ("current savepoint level = 0)
0:       set savepoint 1("current savepoint level = 1")
0: 		  drop temp table t1 ("declared in savepoint level" = -1, "dropped in savepoint level"=1, definition 1(stored in table descriptor))
0: 		  declare temp table t1 with definition 2(say different than definition 1)
0:         ("declared in savepoint level" = -1, "dropped in savepoint level"=1, definition 1(stored in table descriptor)) ,
0: 			  ("declared in savepoint level" = 1, "dropped in savepoint level"=-1, definition 2(stored in table descriptor))
0:       set savepoint 2("current savepoint level = 2")
0:       drop temp table t1("declared in savepoint level" = -1, "dropped in savepoint level"=1, definition 1(stored in table descriptor)) ,
0: 			  ("declared in savepoint level" = 1, "dropped in savepoint level"=2, definition 2(stored in table descriptor))
0: 		  rollback tran
0:         (Remove : temp table t1("declared in savepoint level" = 1, "dropped in savepoint level"=2, definition 2(stored in table descriptor)
0:         (Restore : temp table t1"declared in savepoint level" = -1, "dropped in savepoint level"=-1, definition 1(stored in table descriptor))
0: 	Else if the "dataModifiedInSavepointLevel" of temp table is greate than or equal to "current savepoint level"
0: 	 	it means that table was declared in an earlier savepoint unit / transaction and was modified in the current UOW. And hence we will delete all the
0:     data from it.
0: */
0: class TempTableInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 
0: 	private TableDescriptor td;
0: 	private int declaredInSavepointLevel;
0: 	private int droppededInSavepointLevel;
0: 	private int dataModifiedInSavepointLevel;
0: 
0: 	TempTableInfo(TableDescriptor td, int declaredInSavepointLevel)
0: 	{
0: 		this.td = td;
0: 		this.declaredInSavepointLevel = declaredInSavepointLevel;
0: 		this.droppededInSavepointLevel = -1;
0: 		this.dataModifiedInSavepointLevel = -1;
0: 	}
0: 
0: 	/**
0: 	 * Return the table descriptor
0: 	 */
0: 	TableDescriptor getTableDescriptor() {
0:     return td;
0:   }
0: 
0: 	/**
0: 	 * Set the table descriptor. Will be called while temporary is being restored
0: 	 */
0: 	void setTableDescriptor(TableDescriptor td) {
0:     this.td = td;
0:   }
0: 
0: 	/**
0: 	 * Matches by name and only temp tables that have not been dropped (that's when droppededInSavepointLevel will be -1)
0: 	 */
0: 	boolean matches(String tableName) {
0:     return (td.getName().equals(tableName) && droppededInSavepointLevel == -1);
0:   }
0: 
0: 	/**
0: 	 * Return the savepoint level when the table was last modified
0: 	 */
0: 	int getModifiedInSavepointLevel() {
0:     return dataModifiedInSavepointLevel;
0:   }
0: 
0: 	/**
0: 	 * Set the savepoint level when the table was last modified
0: 	 */
0: 	void setModifiedInSavepointLevel(int dataModifiedInSavepointLevel) {
0:     this.dataModifiedInSavepointLevel = dataModifiedInSavepointLevel;
0:   }
0: 
0: 	/**
0: 	 * Return the savepoint level when the table was declared
0: 	 */
0: 	int getDeclaredInSavepointLevel() {
0:     return declaredInSavepointLevel;
0:   }
0: 
0: 	/**
0: 	 * Set the savepoint level when the table was declared
0: 	 */
0: 	void setDeclaredInSavepointLevel(int declaredInSavepointLevel) {
0:     this.declaredInSavepointLevel = declaredInSavepointLevel;
0:   }
0: 
0: 	/**
0: 	 * Return the savepoint level when the table was dropped
0: 	 */
0: 	int getDroppedInSavepointLevel() {
0:     return droppededInSavepointLevel;
0:   }
0: 
0: 	/**
0: 	 * Return the savepoint level when the table was dropped
0: 	 */
0: 	public void setDroppedInSavepointLevel(int droppededInSavepointLevel) {
0:     this.droppededInSavepointLevel = droppededInSavepointLevel;
0:   }
0: }
============================================================================