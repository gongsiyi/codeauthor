8:63fbf42: /*
3:63fbf42: 
1:952a1a0:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.SysinfoAPITest
1:63fbf42: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:63fbf42: 
1:63fbf42:       http://www.apache.org/licenses/LICENSE-2.0
1:63fbf42: 
1:63fbf42:    Unless required by applicable law or agreed to in writing, software
1:63fbf42:    distributed under the License is distributed on an "AS IS" BASIS,
1:63fbf42:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:63fbf42:    See the License for the specific language governing permissions and
1:63fbf42:    limitations under the License.
1:63fbf42: 
1:63fbf42:  */
1:63fbf42: 
1:63fbf42: package org.apache.derbyTesting.functionTests.tests.tools;
1:63fbf42: 
1:63fbf42: import java.io.BufferedReader;
1:1ae02c9: import java.io.IOException;
1:63fbf42: import java.io.PipedReader;
1:63fbf42: import java.io.PipedWriter;
1:63fbf42: import java.io.PrintWriter;
1:63fbf42: import java.sql.DatabaseMetaData;
1:63fbf42: import java.sql.SQLException;
1:1ae02c9: import junit.framework.Test;
1:63fbf42: import org.apache.derby.tools.sysinfo;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:63fbf42: 
1:63fbf42: /**
1:63fbf42:  *  Test all the static public methods of the sysinfo class.
1:f2fe81a:  *  
1:f2fe81a:  *  Formerly named sysinfo_api. Currently disabled from running in
1:f2fe81a:  *  nightly regression tests when run from jar files, only the first
1:f2fe81a:  *  jar in the classpath properly reports its information through the 
1:f2fe81a:  *  sysinfo API.
1:63fbf42:  */
1:63fbf42: 
1:f2fe81a: public class SysinfoAPITest extends BaseJDBCTestCase {
1:63fbf42: 
1:63fbf42:     DatabaseMetaData dm;
1:f2fe81a:     
1:f2fe81a:     public SysinfoAPITest(String name) { 
1:63fbf42:         super(name); 
2:63fbf42:     }
1:f2fe81a:     
1:f2fe81a:     public static Test suite() {
1:1ae02c9:         Test suite = new BaseTestSuite(SysinfoAPITest.class, "Sysinfo API");
1:f2fe81a:     	
1:f2fe81a:     	return suite;
1:f2fe81a:     }
1:63fbf42: 
1:f2fe81a:     /**
1:f2fe81a:      *  Test various invocations of sysinfo.getMajorVersion()
1:63fbf42:      */
1:eec86ed:     public void testMajorVersion() throws Exception {
1:63fbf42:         int dmMajor = dm.getDriverMajorVersion();
1:63fbf42:         assertEquals(dmMajor, sysinfo.getMajorVersion());
1:63fbf42:         assertEquals(dmMajor, sysinfo.getMajorVersion(sysinfo.DBMS));
1:63fbf42:         assertEquals(dmMajor, sysinfo.getMajorVersion(sysinfo.TOOLS));
1:63fbf42:         assertEquals(dmMajor, sysinfo.getMajorVersion(sysinfo.NET));
1:63fbf42:         assertEquals(dmMajor, sysinfo.getMajorVersion(sysinfo.CLIENT));
1:63fbf42:         // bad usage
1:63fbf42:         assertEquals(-1, sysinfo.getMajorVersion("foo"));
1:63fbf42:         assertEquals(-1, sysinfo.getMajorVersion(null));
1:63fbf42:     }
1:63fbf42: 
1:f2fe81a:     /**
1:f2fe81a:      *  Test various invocations of sysinfo.getMinorVersion()
1:63fbf42:      */
1:eec86ed:     public void testMinorVersion() throws Exception {
1:63fbf42:         int dmMinor = dm.getDriverMinorVersion();
1:63fbf42:         assertEquals(dmMinor, sysinfo.getMinorVersion());
1:63fbf42:         assertEquals(dmMinor, sysinfo.getMinorVersion(sysinfo.DBMS));
1:63fbf42:         assertEquals(dmMinor, sysinfo.getMinorVersion(sysinfo.TOOLS));
1:63fbf42:         assertEquals(dmMinor, sysinfo.getMinorVersion(sysinfo.NET));
1:63fbf42:         assertEquals(dmMinor, sysinfo.getMinorVersion(sysinfo.CLIENT));
1:63fbf42:         // bad usage
1:63fbf42:         assertEquals(-1, sysinfo.getMinorVersion("foo"));
1:63fbf42:         assertEquals(-1, sysinfo.getMinorVersion(null));
1:63fbf42:     }
1:63fbf42: 
1:f2fe81a:     /**
1:f2fe81a:      *  Test various invocations of sysinfo.getProductName()
1:63fbf42:      */
1:63fbf42:     public void testProductName() {
1:63fbf42:         assertEquals("Apache Derby", sysinfo.getProductName());
1:63fbf42:         assertEquals("Apache Derby", sysinfo.getProductName(sysinfo.DBMS));
1:63fbf42:         assertEquals("Apache Derby", sysinfo.getProductName(sysinfo.TOOLS));
1:63fbf42:         assertEquals("Apache Derby", sysinfo.getProductName(sysinfo.NET));
1:63fbf42:         assertEquals("Apache Derby", sysinfo.getProductName(sysinfo.CLIENT));
1:63fbf42:         // bad usage
1:63fbf42:         assertEquals("<no name found>", sysinfo.getProductName("foo"));
1:63fbf42:         assertEquals("<no name found>", sysinfo.getProductName(null));
1:63fbf42:     }
1:63fbf42: 
1:f2fe81a:     /**
1:f2fe81a:      *  Test various invocations of sysinfo.getVersionString()
1:f2fe81a:      * 
1:f2fe81a:      *  NOTE: sysinfo.getVersionString() returns the short version string.
1:f2fe81a:      *        We also chomp the version we get back from sysinfo to account
1:f2fe81a:      *        for alpha/beta differences.
1:63fbf42:      */
1:63fbf42:     public void testVersionString() throws SQLException {
1:f2fe81a:         String dmPv = dm.getDatabaseProductVersion().substring(0,sysinfo.getVersionString().indexOf(' '));
1:f2fe81a:         assertEquals(dmPv, sysinfo.getVersionString().substring(0,sysinfo.getVersionString().indexOf(' ')));
1:f2fe81a:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.DBMS).substring(0,sysinfo.getVersionString().indexOf(' ')));
1:f2fe81a:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.TOOLS).substring(0,sysinfo.getVersionString().indexOf(' ')));
1:f2fe81a:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.NET).substring(0,sysinfo.getVersionString().indexOf(' ')));
1:f2fe81a:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.CLIENT).substring(0,sysinfo.getVersionString().indexOf(' ')));
1:63fbf42:         // bad usage
1:63fbf42:         assertEquals("<no name found>", sysinfo.getVersionString("foo"));
1:63fbf42:         assertEquals("<no name found>", sysinfo.getVersionString(null));
1:63fbf42:     }
1:63fbf42: 
1:f2fe81a:     /**
1:f2fe81a:      * Test various invocations of sysinfo.getBuildNumber()
1:63fbf42:      *
1:f2fe81a:      * Extract the build number from the Database Product Version.
1:f2fe81a:      * Compare with the result from sysinfo.getBuildNumber.
1:63fbf42:      */
1:f2fe81a:     public void testBuildNumber() throws SQLException {
1:f2fe81a:         String dmBn = dm.getDatabaseProductVersion();
1:f2fe81a:         dmBn = dmBn.substring(dmBn.indexOf('(') + 1,dmBn.indexOf(')'));
1:f2fe81a:         System.out.println(dmBn);
1:f2fe81a:         assertEquals(dmBn, sysinfo.getBuildNumber());
1:f2fe81a:         assertEquals(dmBn, sysinfo.getBuildNumber(sysinfo.DBMS));
1:f2fe81a:         assertEquals(dmBn, sysinfo.getBuildNumber(sysinfo.TOOLS));
1:f2fe81a:         assertEquals(dmBn, sysinfo.getBuildNumber(sysinfo.NET));
1:f2fe81a:         assertEquals(dmBn, sysinfo.getBuildNumber(sysinfo.CLIENT));
1:f2fe81a:         // bad usage
1:f2fe81a:         assertEquals("????", sysinfo.getBuildNumber("foo"));
1:f2fe81a:         assertEquals("????", sysinfo.getBuildNumber(null));
1:f2fe81a:     }
1:63fbf42: 
1:f2fe81a:     /**
1:f2fe81a:      * Test sysinfo.getInfo()
1:63fbf42:      *
1:63fbf42:      * Currently only tests getInfo() by comparing the first line with the
1:63fbf42:      * expected first line in English. Because so much of sysinfo changes from
1:63fbf42:      * machine-to-machine, writing a better test may be difficult.
1:63fbf42:      *
1:63fbf42:      * Test spawns a separate thread in which to call sysinfo and feed the
1:63fbf42:      * PipedWriter. Using PipedWriter and PipedReader from the same thread
1:63fbf42:      * can cause a deadlock.
1:63fbf42:      */
1:63fbf42:     public void testGetInfo() throws IOException {
1:63fbf42:         sysinfo_api_helper sah = new sysinfo_api_helper();
1:63fbf42:         sah.start();
1:63fbf42:         PipedReader pipeR = new PipedReader(sah.getPipedWriter());
1:63fbf42:         BufferedReader br = new BufferedReader(pipeR);
1:63fbf42:         assertEquals("------------------ Java Information ------------------",
1:63fbf42:                      br.readLine());
1:63fbf42:         br.close();
1:63fbf42:         pipeR.close();
1:63fbf42:     }
1:63fbf42: 
1:f2fe81a:     /**
1:f2fe81a:      *  setUp - get a DatabaseMetadata object with which to compare
1:f2fe81a:      *          database information with what is reported by sysinfo
1:63fbf42:      */
1:63fbf42:     public void setUp() throws SQLException {
1:03a99e2:         dm = getConnection().getMetaData();
1:63fbf42:     }
1:63fbf42: 
1:63fbf42: 
1:63fbf42: }
1:63fbf42: 
1:f2fe81a: /**
1:f2fe81a:  * sysinfo_api_helper - a helper class which calls sysinfo.getInfo() and
1:f2fe81a:  *                      pushes the output into a PipedWriter so that we
1:f2fe81a:  *                      can read it with a PipedReader in testGetInfo().
1:f2fe81a:  *
1:f2fe81a:  */
1:63fbf42: class sysinfo_api_helper extends Thread { 
1:63fbf42:     
1:63fbf42:     private static PipedWriter pipeW = new PipedWriter();
1:63fbf42: 
1:63fbf42:     public void run() {
1:63fbf42:         PrintWriter pw = new PrintWriter(pipeW, true);
1:63fbf42:         sysinfo.getInfo(pw);
1:63fbf42:         try {
1:63fbf42:             pw.close();
1:63fbf42:             pipeW.close();
1:63fbf42:         } catch (IOException e) {
1:63fbf42:             e.printStackTrace();
1:63fbf42:         }
1:63fbf42:     }
1:63fbf42: 
1:63fbf42:    public PipedWriter getPipedWriter() {
1:63fbf42:        return pipeW;
1:63fbf42:    }
1:63fbf42: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         Test suite = new BaseTestSuite(SysinfoAPITest.class, "Sysinfo API");
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
1:     public void testMajorVersion() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testMinorVersion() throws Exception {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:952a1a0
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.SysinfoAPITest
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:f2fe81a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1:  *  
1:  *  Formerly named sysinfo_api. Currently disabled from running in
1:  *  nightly regression tests when run from jar files, only the first
1:  *  jar in the classpath properly reports its information through the 
1:  *  sysinfo API.
1: public class SysinfoAPITest extends BaseJDBCTestCase {
1:     
1:     public SysinfoAPITest(String name) { 
1:     
1:     public static Test suite() {
0:     	Test suite = new TestSuite(SysinfoAPITest.class, "Sysinfo API");
1:     	
1:     	return suite;
1:     }
1:     /**
1:      *  Test various invocations of sysinfo.getMajorVersion()
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *  Test various invocations of sysinfo.getMinorVersion()
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *  Test various invocations of sysinfo.getProductName()
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *  Test various invocations of sysinfo.getVersionString()
1:      * 
1:      *  NOTE: sysinfo.getVersionString() returns the short version string.
1:      *        We also chomp the version we get back from sysinfo to account
1:      *        for alpha/beta differences.
1:         String dmPv = dm.getDatabaseProductVersion().substring(0,sysinfo.getVersionString().indexOf(' '));
1:         assertEquals(dmPv, sysinfo.getVersionString().substring(0,sysinfo.getVersionString().indexOf(' ')));
1:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.DBMS).substring(0,sysinfo.getVersionString().indexOf(' ')));
1:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.TOOLS).substring(0,sysinfo.getVersionString().indexOf(' ')));
1:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.NET).substring(0,sysinfo.getVersionString().indexOf(' ')));
1:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.CLIENT).substring(0,sysinfo.getVersionString().indexOf(' ')));
1:     /**
1:      * Test various invocations of sysinfo.getBuildNumber()
1:      * Extract the build number from the Database Product Version.
1:      * Compare with the result from sysinfo.getBuildNumber.
1:     public void testBuildNumber() throws SQLException {
1:         String dmBn = dm.getDatabaseProductVersion();
1:         dmBn = dmBn.substring(dmBn.indexOf('(') + 1,dmBn.indexOf(')'));
1:         System.out.println(dmBn);
1:         assertEquals(dmBn, sysinfo.getBuildNumber());
1:         assertEquals(dmBn, sysinfo.getBuildNumber(sysinfo.DBMS));
1:         assertEquals(dmBn, sysinfo.getBuildNumber(sysinfo.TOOLS));
1:         assertEquals(dmBn, sysinfo.getBuildNumber(sysinfo.NET));
1:         assertEquals(dmBn, sysinfo.getBuildNumber(sysinfo.CLIENT));
1:         // bad usage
1:         assertEquals("????", sysinfo.getBuildNumber("foo"));
1:         assertEquals("????", sysinfo.getBuildNumber(null));
1:     }
1:     /**
1:      * Test sysinfo.getInfo()
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *  setUp - get a DatabaseMetadata object with which to compare
1:      *          database information with what is reported by sysinfo
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * sysinfo_api_helper - a helper class which calls sysinfo.getInfo() and
1:  *                      pushes the output into a PipedWriter so that we
1:  *                      can read it with a PipedReader in testGetInfo().
1:  *
1:  */
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:63fbf42
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.sysinfo_api
1: 
0:    Copyright 1999, 2005 The Apache Software Foundation or its licensors, as appl
0: icable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.tools;
1: 
0: import java.io.IOException;
1: import java.io.BufferedReader;
1: import java.io.PipedReader;
1: import java.io.PipedWriter;
1: import java.io.PrintWriter;
0: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.SQLException;
1: import org.apache.derby.tools.sysinfo;
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: 
1: /**
1:  *  Test all the static public methods of the sysinfo class.
1:  */
1: 
0: public class sysinfo_api extends BaseJDBCTestCase {
1: 
0:     Connection c;
1:     DatabaseMetaData dm;
1: 
0:     public sysinfo_api(String name) { 
1:         super(name); 
1:     }
1: 
1:     /*
0:      *  getMajorVersion()
1:      */
0:     public void testMajorVersion() {
1:         int dmMajor = dm.getDriverMajorVersion();
1:         assertEquals(dmMajor, sysinfo.getMajorVersion());
1:         assertEquals(dmMajor, sysinfo.getMajorVersion(sysinfo.DBMS));
1:         assertEquals(dmMajor, sysinfo.getMajorVersion(sysinfo.TOOLS));
1:         assertEquals(dmMajor, sysinfo.getMajorVersion(sysinfo.NET));
1:         assertEquals(dmMajor, sysinfo.getMajorVersion(sysinfo.CLIENT));
1:         // bad usage
1:         assertEquals(-1, sysinfo.getMajorVersion("foo"));
1:         assertEquals(-1, sysinfo.getMajorVersion(null));
1:     }
1: 
1:     /*
0:      *  getMinorVersion()
1:      */
0:     public void testMinorVersion() {
1:         int dmMinor = dm.getDriverMinorVersion();
1:         assertEquals(dmMinor, sysinfo.getMinorVersion());
1:         assertEquals(dmMinor, sysinfo.getMinorVersion(sysinfo.DBMS));
1:         assertEquals(dmMinor, sysinfo.getMinorVersion(sysinfo.TOOLS));
1:         assertEquals(dmMinor, sysinfo.getMinorVersion(sysinfo.NET));
1:         assertEquals(dmMinor, sysinfo.getMinorVersion(sysinfo.CLIENT));
1:         // bad usage
1:         assertEquals(-1, sysinfo.getMinorVersion("foo"));
1:         assertEquals(-1, sysinfo.getMinorVersion(null));
1:     }
1: 
1:     /*
0:      *  getProductName()
1:      */
1:     public void testProductName() {
1:         assertEquals("Apache Derby", sysinfo.getProductName());
1:         assertEquals("Apache Derby", sysinfo.getProductName(sysinfo.DBMS));
1:         assertEquals("Apache Derby", sysinfo.getProductName(sysinfo.TOOLS));
1:         assertEquals("Apache Derby", sysinfo.getProductName(sysinfo.NET));
1:         assertEquals("Apache Derby", sysinfo.getProductName(sysinfo.CLIENT));
1:         // bad usage
1:         assertEquals("<no name found>", sysinfo.getProductName("foo"));
1:         assertEquals("<no name found>", sysinfo.getProductName(null));
1:     }
1: 
1:     /*
0:      *  getVersionString()
1:      */
1:     public void testVersionString() throws SQLException {
0:         String dmPv = dm.getDatabaseProductVersion();
0:         assertEquals(dmPv, sysinfo.getVersionString());
0:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.DBMS));
0:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.TOOLS));
0:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.NET));
0:         assertEquals(dmPv, sysinfo.getVersionString(sysinfo.CLIENT));
1:         // bad usage
1:         assertEquals("<no name found>", sysinfo.getVersionString("foo"));
1:         assertEquals("<no name found>", sysinfo.getVersionString(null));
1:     }
1: 
1:     /*
0:      * getBuildNumber()
1:      *
0:      * Currently no test for sysinfo.getBuildNumber().
0:      * There is not currently a way to get this information from another
0:      * different public interface.
1:      */
1: 
1:     /*
0:      * getInfo()
1:      *
1:      * Currently only tests getInfo() by comparing the first line with the
1:      * expected first line in English. Because so much of sysinfo changes from
1:      * machine-to-machine, writing a better test may be difficult.
1:      *
1:      * Test spawns a separate thread in which to call sysinfo and feed the
1:      * PipedWriter. Using PipedWriter and PipedReader from the same thread
1:      * can cause a deadlock.
1:      */
1:     public void testGetInfo() throws IOException {
1:         sysinfo_api_helper sah = new sysinfo_api_helper();
1:         sah.start();
1:         PipedReader pipeR = new PipedReader(sah.getPipedWriter());
1:         BufferedReader br = new BufferedReader(pipeR);
1:         assertEquals("------------------ Java Information ------------------",
1:                      br.readLine());
1:         br.close();
1:         pipeR.close();
1:     }
1: 
1:     /*
0:      *  testSetup - get a DatabaseMetadata object with which to compare info
0:      *              with sysinfo
1:      */
1:     public void setUp() throws SQLException {
0:         c = getConnection();
0:         dm = c.getMetaData();
1:     }
1: 
0:     public void tearDown() throws SQLException {
0:         c.close();
1:     }
1: 
1: }
1: 
1: class sysinfo_api_helper extends Thread { 
1:     
1:     private static PipedWriter pipeW = new PipedWriter();
1: 
1:     public void run() {
1:         PrintWriter pw = new PrintWriter(pipeW, true);
1:         sysinfo.getInfo(pw);
1:         try {
1:             pw.close();
1:             pipeW.close();
1:         } catch (IOException e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:    public PipedWriter getPipedWriter() {
1:        return pipeW;
1:    }
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:03a99e2
/////////////////////////////////////////////////////////////////////////
1:         dm = getConnection().getMetaData();
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
commit:09ffc9b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         dm = getXConnection().getMetaData();
============================================================================