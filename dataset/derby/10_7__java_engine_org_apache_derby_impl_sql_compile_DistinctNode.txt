1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.DistinctNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
18:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:47d4a4c: 
1:47d4a4c: import java.util.List;
1:3bb140c: import java.util.Properties;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.CostEstimate;
1:eac0369: import org.apache.derby.iapi.sql.compile.Optimizable;
1:eac0369: import org.apache.derby.iapi.sql.compile.OptimizablePredicate;
1:eac0369: import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
1:eac0369: import org.apache.derby.iapi.sql.compile.Optimizer;
1:eac0369: import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;
1:eac0369: import org.apache.derby.iapi.sql.compile.RowOrdering;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:3bb140c: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: 
3:eac0369: /**
1:3bb140c:  * A DistinctNode represents a result set for a distinct operation
1:eac0369:  * on a select.  It has the same description as its input result set.
2:eac0369:  *
1:eac0369:  * For the most part, it simply delegates operations to its childResultSet,
1:eac0369:  * which is currently expected to be a ProjectRestrictResultSet generated
1:eac0369:  * for a SelectNode.
1:eac0369:  *
1:eac0369:  * NOTE: A DistinctNode extends FromTable since it can exist in a FromList.
1:eac0369:  *
1:eac0369:  */
1:3bb140c: class DistinctNode extends SingleChildResultSetNode
5:eac0369: {
1:eac0369: 	boolean inSortedOrder;
1:eac0369: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a DistinctNode.
1:eac0369: 	 *
1:eac0369: 	 * @param childResult	The child ResultSetNode
1:eac0369: 	 * @param inSortedOrder	Whether or not the child ResultSetNode returns its
1:eac0369: 	 *						output in sorted order.
1:eac0369: 	 * @param tableProperties	Properties list associated with the table
1:3bb140c:      * @param cm            The context manager
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     DistinctNode(ResultSetNode childResult,
1:3bb140c:                  boolean inSortedOrder,
1:3bb140c:                  Properties tableProperties,
1:3bb140c:                  ContextManager cm) throws StandardException
1:eac0369: 	{
1:3bb140c:         super(childResult, tableProperties, cm);
1:eac0369: 
2:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (!(childResult instanceof Optimizable))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("childResult, " + childResult.getClass().getName() +
1:eac0369: 					", expected to be instanceof Optimizable");
5:eac0369: 			}
1:eac0369: 			if (!(childResult instanceof FromTable))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("childResult, " + childResult.getClass().getName() +
1:eac0369: 					", expected to be instanceof FromTable");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 			We want our own resultColumns, which are virtual columns
1:eac0369: 			pointing to the child result's columns.
1:eac0369: 
1:eac0369: 			We have to have the original object in the distinct node,
1:eac0369: 			and give the underlying project the copy.
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		/* We get a shallow copy of the ResultColumnList and its 
1:eac0369: 		 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
1:eac0369: 		 */
1:3bb140c:         final ResultColumnList prRCList =
1:3bb140c:                 this.childResult.getResultColumns().copyListAndObjects();
1:11f7ee3:         setResultColumns( this.childResult.getResultColumns() );
1:eac0369: 		this.childResult.setResultColumns(prRCList);
1:eac0369: 
1:eac0369: 		/* Replace ResultColumn.expression with new VirtualColumnNodes
1:eac0369: 		 * in the DistinctNode's RCL.  (VirtualColumnNodes include
1:eac0369: 		 * pointers to source ResultSetNode, this, and source ResultColumn.)
1:eac0369: 		 */
1:11f7ee3:         getResultColumns().genVirtualColumnNodes(this, prRCList);
1:eac0369: 
1:eac0369: 		/* Verify that we can perform a DISTINCT on the
1:eac0369: 		 * underlying tree.
1:eac0369: 		 */
1:11f7ee3:         getResultColumns().verifyAllOrderable();
1:3bb140c:         this.inSortedOrder = inSortedOrder;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 *  Optimizable interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see Optimizable#optimizeIt
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public CostEstimate optimizeIt(Optimizer optimizer,
1:eac0369: 									OptimizablePredicateList predList,
1:eac0369: 									CostEstimate outerCost,
1:eac0369: 									RowOrdering rowOrdering)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:3bb140c:         ((Optimizable) childResult).optimizeIt(optimizer,
1:3bb140c:                 predList,
1:3bb140c:                 outerCost,
1:3bb140c:                 rowOrdering);
1:eac0369: 
1:eac0369: 		return super.optimizeIt(optimizer, predList, outerCost, rowOrdering);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see Optimizable#estimateCost
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public CostEstimate estimateCost(OptimizablePredicateList predList,
1:eac0369: 									ConglomerateDescriptor cd,
1:eac0369: 									CostEstimate outerCost,
1:eac0369: 									Optimizer optimizer,
1:eac0369: 									RowOrdering rowOrdering)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		// RESOLVE: WE NEED TO ADD IN THE COST OF SORTING HERE, AND FIGURE
1:eac0369: 		// OUT HOW MANY ROWS WILL BE ELIMINATED.
2:eac0369: 		CostEstimate childCost =
1:eac0369: 			((Optimizable) childResult).estimateCost(predList,
1:eac0369: 									cd,
2:eac0369: 									outerCost,
1:eac0369: 									optimizer,
2:eac0369: 									rowOrdering);
1:eac0369: 
1:11f7ee3: 		setCostEstimate( getCostEstimate(optimizer) );
1:11f7ee3: 		getCostEstimate().setCost(childCost.getEstimatedCost(),
1:eac0369: 							 childCost.rowCount(),
1:eac0369: 							 childCost.singleScanRowCount());
1:eac0369: 
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** No need to use estimateCost on join strategy - that has already
1:eac0369: 		** been done on the child.
1:eac0369: 		*/
1:11f7ee3: 		return getCostEstimate();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.sql.compile.Optimizable#pushOptPredicate
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public boolean pushOptPredicate(OptimizablePredicate optimizablePredicate)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 		// return ((Optimizable) childResult).pushOptPredicate(optimizablePredicate);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Optimize this DistinctNode.  
1:eac0369: 	 *
1:eac0369: 	 * @param dataDictionary	The DataDictionary to use for optimization
1:6b50965: 	 * @param predicates		The PredicateList to optimize.  This should
1:eac0369: 	 *							be a join predicate.
1:eac0369: 	 * @param outerRows			The number of outer joining rows
1:eac0369: 	 *
1:eac0369: 	 * @return	ResultSetNode	The top of the optimized subtree
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ResultSetNode optimize(DataDictionary dataDictionary,
1:eac0369: 								  PredicateList predicates,
1:eac0369: 								  double outerRows) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		/* We need to implement this method since a PRN can appear above a
1:eac0369: 		 * SelectNode in a query tree.
1:eac0369: 		 */
1:3bb140c:         childResult = childResult.optimize(dataDictionary,
1:3bb140c:                                            predicates,
1:3bb140c:                                            outerRows);
1:eac0369: 
1:eac0369: 		// RESOLVE: NEED TO FACTOR IN COST OF SORTING AND FIGURE OUT HOW
1:eac0369: 		// MANY ROWS HAVE BEEN ELIMINATED.
1:11f7ee3:         setCostEstimate( getOptimizerFactory().getCostEstimate() );
1:eac0369: 
1:11f7ee3: 		getCostEstimate().setCost(childResult.getCostEstimate().getEstimatedCost(),
1:eac0369: 							 childResult.getCostEstimate().rowCount(),
1:eac0369: 							 childResult.getCostEstimate().singleScanRowCount());
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not the underlying ResultSet tree
1:eac0369: 	 * is ordered on the specified columns.
1:eac0369: 	 * RESOLVE - This method currently only considers the outermost table 
1:eac0369: 	 * of the query block.
1:eac0369: 	 *
1:eac0369: 	 * @param	crs					The specified ColumnReference[]
1:eac0369: 	 * @param	permuteOrdering		Whether or not the order of the CRs in the array can be permuted
1:b153b24:      * @param   fbtHolder           List that is to be filled with the FromBaseTable
1:eac0369: 	 *
1:eac0369: 	 * @return	Whether the underlying ResultSet tree
1:eac0369: 	 * is ordered on the specified column.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     boolean isOrderedOn(ColumnReference[] crs,
1:3bb140c:                         boolean permuteOrdering,
1:3bb140c:                         List<FromBaseTable> fbtHolder)
1:eac0369: 	{
1:eac0369: 		/* RESOLVE - DistinctNodes are ordered on their RCLs.
1:eac0369: 		 * Walk RCL to see if cr is 1st non-constant column in the
1:eac0369: 		 * ordered result.
1:eac0369: 		 */
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * generate the distinct result set operating over the source
1:3bb140c:      * result set.
1:eac0369:      *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369:      */
1:3bb140c:     @Override
1:8fe3166:     void generate(ActivationClassBuilder acb, MethodBuilder mb)
1:eac0369: 							throws StandardException
1:eac0369: 	{
1:eac0369: 		/* Get the next ResultSet#, so we can number this ResultSetNode, its
1:eac0369: 		 * ResultColumnList and ResultSet.
1:eac0369: 		 */
1:eac0369: 		assignResultSetNumber();
1:eac0369: 
1:ab10884: 		// Get the final cost estimate based on the child's cost.
1:11f7ee3: 		setCostEstimate( childResult.getFinalCostEstimate() );
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 			create the orderItem and stuff it in.
1:eac0369: 		 */
1:11f7ee3: 		int orderItem = acb.addItem(acb.getColumnOrdering(getResultColumns()));
1:eac0369: 
1:eac0369: 		/* Generate the SortResultSet:
1:eac0369: 		 *	arg1: childExpress - Expression for childResultSet
1:eac0369: 		 *  arg2: distinct - true, of course
1:eac0369: 		 *  arg3: isInSortedOrder - is the source result set in sorted order
1:eac0369: 		 *  arg4: orderItem - entry in saved objects for the ordering
1:93ff8cc: 		 *  arg5: rowAllocator - method to construct rows for fetching
1:eac0369: 		 *			from the sort
1:93ff8cc: 		 *  arg6: row size
1:93ff8cc: 		 *  arg7: resultSetNumber
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		acb.pushGetResultSetFactoryExpression(mb);
1:eac0369: 
1:eac0369: 		childResult.generate(acb, mb);
1:eac0369: 		mb.push(true);
1:eac0369: 		mb.push(inSortedOrder);
1:eac0369: 		mb.push(orderItem);
1:11f7ee3:         mb.push(acb.addItem(getResultColumns().buildRowTemplate()));
1:11f7ee3: 		mb.push(getResultColumns().getTotalColumnSize());
1:11f7ee3: 		mb.push(getResultSetNumber());
1:11f7ee3: 		mb.push(getCostEstimate().rowCount());
1:11f7ee3: 		mb.push(getCostEstimate().getEstimatedCost());
1:eac0369: 
1:9e6e461: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getSortResultSet",
1:9e6e461:                 ClassName.NoPutResultSet, 9);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:11f7ee3
/////////////////////////////////////////////////////////////////////////
1:         setResultColumns( this.childResult.getResultColumns() );
1:         getResultColumns().genVirtualColumnNodes(this, prRCList);
1:         getResultColumns().verifyAllOrderable();
/////////////////////////////////////////////////////////////////////////
1: 		setCostEstimate( getCostEstimate(optimizer) );
1: 		getCostEstimate().setCost(childCost.getEstimatedCost(),
/////////////////////////////////////////////////////////////////////////
1: 		return getCostEstimate();
/////////////////////////////////////////////////////////////////////////
1:         setCostEstimate( getOptimizerFactory().getCostEstimate() );
1: 		getCostEstimate().setCost(childResult.getCostEstimate().getEstimatedCost(),
/////////////////////////////////////////////////////////////////////////
1: 		setCostEstimate( childResult.getFinalCostEstimate() );
1: 		int orderItem = acb.addItem(acb.getColumnOrdering(getResultColumns()));
/////////////////////////////////////////////////////////////////////////
1:         mb.push(acb.addItem(getResultColumns().buildRowTemplate()));
1: 		mb.push(getResultColumns().getTotalColumnSize());
1: 		mb.push(getResultSetNumber());
1: 		mb.push(getCostEstimate().rowCount());
1: 		mb.push(getCostEstimate().getEstimatedCost());
commit:6a270cb
/////////////////////////////////////////////////////////////////////////
0:         costEstimate = getOptimizerFactory().getCostEstimate();
commit:a56ecfa
/////////////////////////////////////////////////////////////////////////
0: 						(RequiredRowOrdering) null,
0:                         null );
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.compile.CostEstimate;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:  * A DistinctNode represents a result set for a distinct operation
/////////////////////////////////////////////////////////////////////////
1: class DistinctNode extends SingleChildResultSetNode
1:      * Constructor for a DistinctNode.
1:      * @param cm            The context manager
1:     DistinctNode(ResultSetNode childResult,
1:                  boolean inSortedOrder,
1:                  Properties tableProperties,
1:                  ContextManager cm) throws StandardException
1:         super(childResult, tableProperties, cm);
0:         setNodeType(C_NodeTypes.DISTINCT_NODE);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final ResultColumnList prRCList =
1:                 this.childResult.getResultColumns().copyListAndObjects();
0:         this.resultColumns = this.childResult.getResultColumns();
0:         this.resultColumns.genVirtualColumnNodes(this, prRCList);
0:         this.resultColumns.verifyAllOrderable();
1:         this.inSortedOrder = inSortedOrder;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         ((Optimizable) childResult).optimizeIt(optimizer,
1:                 predList,
1:                 outerCost,
1:                 rowOrdering);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ResultSetNode optimize(DataDictionary dataDictionary,
/////////////////////////////////////////////////////////////////////////
1:         childResult = childResult.optimize(dataDictionary,
1:                                            predicates,
1:                                            outerRows);
0:         Optimizer opt = getOptimizer(
0:                         new FromList(
0:                             getOptimizerFactory().doJoinOrderOptimization(),
/////////////////////////////////////////////////////////////////////////
0:         costEstimate = opt.newCostEstimate();
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     boolean isOrderedOn(ColumnReference[] crs,
1:                         boolean permuteOrdering,
1:                         List<FromBaseTable> fbtHolder)
/////////////////////////////////////////////////////////////////////////
1:      * result set.
1:     @Override
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generate(ActivationClassBuilder acb, MethodBuilder mb)
commit:b153b24
/////////////////////////////////////////////////////////////////////////
1:      * @param   fbtHolder           List that is to be filled with the FromBaseTable
0:     boolean isOrderedOn(ColumnReference[] crs, boolean permuteOrdering, List fbtHolder)
commit:47d4a4c
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	boolean isOrderedOn(ColumnReference[] crs, boolean permuteOrdering, List fbtVector)
commit:bda7291
/////////////////////////////////////////////////////////////////////////
0:         mb.push(acb.addItem(resultColumns.buildRowTemplate()));
commit:d868eed
/////////////////////////////////////////////////////////////////////////
0:         mb.push(acb.addItem(resultColumns.buildRowTemplate(null)));
commit:7af858d
/////////////////////////////////////////////////////////////////////////
0: 		childResult = (ResultSetNode) childResult.optimize(
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3dd03e5
/////////////////////////////////////////////////////////////////////////
commit:9e6e461
/////////////////////////////////////////////////////////////////////////
1: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getSortResultSet",
1:                 ClassName.NoPutResultSet, 9);
commit:93ff8cc
/////////////////////////////////////////////////////////////////////////
1: 		 *  arg5: rowAllocator - method to construct rows for fetching
1: 		 *  arg6: row size
1: 		 *  arg7: resultSetNumber
0: 		 *  arg8: closeCleanup
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getSortResultSet", ClassName.NoPutResultSet, 10);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.DistinctNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.compile.Optimizable;
0: import org.apache.derby.iapi.sql.compile.OptimizableList;
1: import org.apache.derby.iapi.sql.compile.OptimizablePredicate;
1: import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
1: import org.apache.derby.iapi.sql.compile.Optimizer;
0: import org.apache.derby.iapi.sql.compile.CostEstimate;
0: import org.apache.derby.iapi.sql.compile.Visitable;
0: import org.apache.derby.iapi.sql.compile.Visitor;
1: import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;
1: import org.apache.derby.iapi.sql.compile.RowOrdering;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.reference.ClassName;
1: 
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.util.JBitSet;
1: 
1: 
0: import java.util.Properties;
0: import java.util.Vector;
1: 
1: /**
0:  * A DistinctNode represents a result set for a disinct operation
1:  * on a select.  It has the same description as its input result set.
1:  *
1:  * For the most part, it simply delegates operations to its childResultSet,
1:  * which is currently expected to be a ProjectRestrictResultSet generated
1:  * for a SelectNode.
1:  *
1:  * NOTE: A DistinctNode extends FromTable since it can exist in a FromList.
1:  *
0:  * @author ames
1:  */
0: public class DistinctNode extends SingleChildResultSetNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	boolean inSortedOrder;
1: 
1: 	/**
0: 	 * Initializer for a DistinctNode.
1: 	 *
1: 	 * @param childResult	The child ResultSetNode
1: 	 * @param inSortedOrder	Whether or not the child ResultSetNode returns its
1: 	 *						output in sorted order.
1: 	 * @param tableProperties	Properties list associated with the table
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void init(
0: 						Object childResult,
0: 						Object inSortedOrder,
0: 						Object tableProperties) throws StandardException
1: 	{
0: 		super.init(childResult, tableProperties);
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (!(childResult instanceof Optimizable))
1: 			{
1: 				SanityManager.THROWASSERT("childResult, " + childResult.getClass().getName() +
1: 					", expected to be instanceof Optimizable");
1: 			}
1: 			if (!(childResult instanceof FromTable))
1: 			{
1: 				SanityManager.THROWASSERT("childResult, " + childResult.getClass().getName() +
1: 					", expected to be instanceof FromTable");
1: 			}
1: 		}
1: 
0: 		ResultColumnList prRCList;
1: 
1: 		/*
1: 			We want our own resultColumns, which are virtual columns
1: 			pointing to the child result's columns.
1: 
1: 			We have to have the original object in the distinct node,
1: 			and give the underlying project the copy.
1: 		 */
1: 
1: 		/* We get a shallow copy of the ResultColumnList and its 
1: 		 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
1: 		 */
0: 		prRCList = this.childResult.getResultColumns().copyListAndObjects();
0: 		resultColumns = this.childResult.getResultColumns();
1: 		this.childResult.setResultColumns(prRCList);
1: 
1: 		/* Replace ResultColumn.expression with new VirtualColumnNodes
1: 		 * in the DistinctNode's RCL.  (VirtualColumnNodes include
1: 		 * pointers to source ResultSetNode, this, and source ResultColumn.)
1: 		 */
0: 		resultColumns.genVirtualColumnNodes(this, prRCList);
1: 
1: 		/* Verify that we can perform a DISTINCT on the
1: 		 * underlying tree.
1: 		 */
0: 		resultColumns.verifyAllOrderable();
1: 
0: 		this.inSortedOrder = ((Boolean) inSortedOrder).booleanValue();
1: 	}
1: 
1: 	/*
1: 	 *  Optimizable interface
1: 	 */
1: 
1: 	/**
1: 	 * @see Optimizable#optimizeIt
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public CostEstimate optimizeIt(Optimizer optimizer,
1: 									OptimizablePredicateList predList,
1: 									CostEstimate outerCost,
1: 									RowOrdering rowOrdering)
1: 			throws StandardException
1: 	{
1: 		CostEstimate childCost =
0: 			((Optimizable) childResult).optimizeIt(optimizer,
0: 									predList,
1: 									outerCost,
1: 									rowOrdering);
1: 
1: 		return super.optimizeIt(optimizer, predList, outerCost, rowOrdering);
1: 	}
1: 
1: 	/**
1: 	 * @see Optimizable#estimateCost
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public CostEstimate estimateCost(OptimizablePredicateList predList,
1: 									ConglomerateDescriptor cd,
1: 									CostEstimate outerCost,
1: 									Optimizer optimizer,
1: 									RowOrdering rowOrdering)
1: 			throws StandardException
1: 	{
1: 		// RESOLVE: WE NEED TO ADD IN THE COST OF SORTING HERE, AND FIGURE
1: 		// OUT HOW MANY ROWS WILL BE ELIMINATED.
1: 		CostEstimate childCost =
1: 			((Optimizable) childResult).estimateCost(predList,
1: 									cd,
1: 									outerCost,
1: 									optimizer,
1: 									rowOrdering);
1: 
0: 		costEstimate = getCostEstimate(optimizer);
0: 		costEstimate.setCost(childCost.getEstimatedCost(),
1: 							 childCost.rowCount(),
1: 							 childCost.singleScanRowCount());
1: 
1: 
1: 		/*
1: 		** No need to use estimateCost on join strategy - that has already
1: 		** been done on the child.
1: 		*/
0: 		return costEstimate;
1: 	}
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.sql.compile.Optimizable#pushOptPredicate
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public boolean pushOptPredicate(OptimizablePredicate optimizablePredicate)
1: 			throws StandardException
1: 	{
1: 		return false;
1: 		// return ((Optimizable) childResult).pushOptPredicate(optimizablePredicate);
1: 	}
1: 
1: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
1: 	 *
0: 	 * @return	This object as a String
1: 	 */
1: 
0: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			return childResult.toString() + "\n" + super.toString();
1: 		}
0: 		else
1: 		{
0: 			return "";
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Optimize this DistinctNode.  
1: 	 *
1: 	 * @param dataDictionary	The DataDictionary to use for optimization
0: 	 * @param predicateList		The PredicateList to optimize.  This should
1: 	 *							be a join predicate.
1: 	 * @param outerRows			The number of outer joining rows
1: 	 *
1: 	 * @return	ResultSetNode	The top of the optimized subtree
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ResultSetNode optimize(DataDictionary dataDictionary,
1: 								  PredicateList predicates,
1: 								  double outerRows) 
1: 					throws StandardException
1: 	{
1: 		/* We need to implement this method since a PRN can appear above a
1: 		 * SelectNode in a query tree.
1: 		 */
0: 		childResult = (ProjectRestrictNode) childResult.optimize(
0: 															dataDictionary,
0: 															predicates,
0: 															outerRows);
0: 		Optimizer optimizer = getOptimizer(
0: 						(FromList) getNodeFactory().getNode(
0: 							C_NodeTypes.FROM_LIST,
0: 							getNodeFactory().doJoinOrderOptimization(),
0: 							this,
0: 							getContextManager()),
0: 						predicates,
0: 						dataDictionary,
0: 						(RequiredRowOrdering) null);
1: 
1: 		// RESOLVE: NEED TO FACTOR IN COST OF SORTING AND FIGURE OUT HOW
1: 		// MANY ROWS HAVE BEEN ELIMINATED.
0: 		costEstimate = optimizer.newCostEstimate();
1: 
0: 		costEstimate.setCost(childResult.getCostEstimate().getEstimatedCost(),
1: 							 childResult.getCostEstimate().rowCount(),
1: 							 childResult.getCostEstimate().singleScanRowCount());
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Return whether or not the underlying ResultSet tree
1: 	 * is ordered on the specified columns.
1: 	 * RESOLVE - This method currently only considers the outermost table 
1: 	 * of the query block.
1: 	 *
1: 	 * @param	crs					The specified ColumnReference[]
1: 	 * @param	permuteOrdering		Whether or not the order of the CRs in the array can be permuted
0: 	 * @param	fbtVector			Vector that is to be filled with the FromBaseTable	
1: 	 *
1: 	 * @return	Whether the underlying ResultSet tree
1: 	 * is ordered on the specified column.
1: 	 */
0: 	boolean isOrderedOn(ColumnReference[] crs, boolean permuteOrdering, Vector fbtVector)
1: 	{
1: 		/* RESOLVE - DistinctNodes are ordered on their RCLs.
1: 		 * Walk RCL to see if cr is 1st non-constant column in the
1: 		 * ordered result.
1: 		 */
1: 		return false;
1: 	}
1: 
1:     /**
1:      * generate the distinct result set operating over the source
0: 	 * resultset.
1:      *
1: 	 * @exception StandardException		Thrown on error
1:      */
0: 	public void generate(ActivationClassBuilder acb,
0: 								MethodBuilder mb)
1: 							throws StandardException
1: 	{
1: 		/* Get the next ResultSet#, so we can number this ResultSetNode, its
1: 		 * ResultColumnList and ResultSet.
1: 		 */
1: 		assignResultSetNumber();
1: 
0: 		// Get the cost estimate from the child if we don't have one yet
0: 		if (costEstimate == null)
1: 		{
0: 			costEstimate = childResult.getFinalCostEstimate();
1: 		}
1: 
1: 		/*
1: 			create the orderItem and stuff it in.
1: 		 */
0: 		int orderItem = acb.addItem(acb.getColumnOrdering(resultColumns));
1: 
1: 		/* Generate the SortResultSet:
1: 		 *	arg1: childExpress - Expression for childResultSet
1: 		 *  arg2: distinct - true, of course
1: 		 *  arg3: isInSortedOrder - is the source result set in sorted order
1: 		 *  arg4: orderItem - entry in saved objects for the ordering
0: 		 *  arg5: Activation
0: 		 *  arg6: rowAllocator - method to construct rows for fetching
1: 		 *			from the sort
0: 		 *  arg7: row size
0: 		 *  arg8: resultSetNumber
0: 		 *  arg9: closeCleanup
1: 		 */
1: 
1: 		acb.pushGetResultSetFactoryExpression(mb);
1: 
1: 		childResult.generate(acb, mb);
1: 		mb.push(true);
1: 		mb.push(inSortedOrder);
1: 		mb.push(orderItem);
0: 		acb.pushThisAsActivation(mb);
0: 		resultColumns.generateHolder(acb, mb);
0: 		mb.push(resultColumns.getTotalColumnSize());
0: 		mb.push(resultSetNumber);
0: 		mb.push(costEstimate.rowCount());
0: 		mb.push(costEstimate.getEstimatedCost());
0: 		closeMethodArgument(acb, mb);
1: 
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getSortResultSet", ClassName.NoPutResultSet, 11);
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param predicates		The PredicateList to optimize.  This should
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:ab10884
/////////////////////////////////////////////////////////////////////////
1: 		// Get the final cost estimate based on the child's cost.
0: 		costEstimate = childResult.getFinalCostEstimate();
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.Optimizable;
0: import org.apache.derby.iapi.sql.compile.OptimizableList;
0: import org.apache.derby.iapi.sql.compile.OptimizablePredicate;
0: import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
0: import org.apache.derby.iapi.sql.compile.Optimizer;
0: import org.apache.derby.iapi.sql.compile.CostEstimate;
0: import org.apache.derby.iapi.sql.compile.Visitable;
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;
0: import org.apache.derby.iapi.sql.compile.RowOrdering;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.util.JBitSet;
0: 
0: 
0: import java.util.Properties;
0: import java.util.Vector;
0: 
0: /**
0:  * A DistinctNode represents a result set for a disinct operation
0:  * on a select.  It has the same description as its input result set.
0:  *
0:  * For the most part, it simply delegates operations to its childResultSet,
0:  * which is currently expected to be a ProjectRestrictResultSet generated
0:  * for a SelectNode.
0:  *
0:  * NOTE: A DistinctNode extends FromTable since it can exist in a FromList.
0:  *
0:  * @author ames
0:  */
0: public class DistinctNode extends SingleChildResultSetNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	boolean inSortedOrder;
0: 
0: 	/**
0: 	 * Initializer for a DistinctNode.
0: 	 *
0: 	 * @param childResult	The child ResultSetNode
0: 	 * @param inSortedOrder	Whether or not the child ResultSetNode returns its
0: 	 *						output in sorted order.
0: 	 * @param tableProperties	Properties list associated with the table
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void init(
0: 						Object childResult,
0: 						Object inSortedOrder,
0: 						Object tableProperties) throws StandardException
0: 	{
0: 		super.init(childResult, tableProperties);
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (!(childResult instanceof Optimizable))
0: 			{
0: 				SanityManager.THROWASSERT("childResult, " + childResult.getClass().getName() +
0: 					", expected to be instanceof Optimizable");
0: 			}
0: 			if (!(childResult instanceof FromTable))
0: 			{
0: 				SanityManager.THROWASSERT("childResult, " + childResult.getClass().getName() +
0: 					", expected to be instanceof FromTable");
0: 			}
0: 		}
0: 
0: 		ResultColumnList prRCList;
0: 
0: 		/*
0: 			We want our own resultColumns, which are virtual columns
0: 			pointing to the child result's columns.
0: 
0: 			We have to have the original object in the distinct node,
0: 			and give the underlying project the copy.
0: 		 */
0: 
0: 		/* We get a shallow copy of the ResultColumnList and its 
0: 		 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
0: 		 */
0: 		prRCList = this.childResult.getResultColumns().copyListAndObjects();
0: 		resultColumns = this.childResult.getResultColumns();
0: 		this.childResult.setResultColumns(prRCList);
0: 
0: 		/* Replace ResultColumn.expression with new VirtualColumnNodes
0: 		 * in the DistinctNode's RCL.  (VirtualColumnNodes include
0: 		 * pointers to source ResultSetNode, this, and source ResultColumn.)
0: 		 */
0: 		resultColumns.genVirtualColumnNodes(this, prRCList);
0: 
0: 		/* Verify that we can perform a DISTINCT on the
0: 		 * underlying tree.
0: 		 */
0: 		resultColumns.verifyAllOrderable();
0: 
0: 		this.inSortedOrder = ((Boolean) inSortedOrder).booleanValue();
0: 	}
0: 
0: 	/*
0: 	 *  Optimizable interface
0: 	 */
0: 
0: 	/**
0: 	 * @see Optimizable#optimizeIt
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public CostEstimate optimizeIt(Optimizer optimizer,
0: 									OptimizablePredicateList predList,
0: 									CostEstimate outerCost,
0: 									RowOrdering rowOrdering)
0: 			throws StandardException
0: 	{
0: 		CostEstimate childCost =
0: 			((Optimizable) childResult).optimizeIt(optimizer,
0: 									predList,
0: 									outerCost,
0: 									rowOrdering);
0: 
0: 		return super.optimizeIt(optimizer, predList, outerCost, rowOrdering);
0: 	}
0: 
0: 	/**
0: 	 * @see Optimizable#estimateCost
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public CostEstimate estimateCost(OptimizablePredicateList predList,
0: 									ConglomerateDescriptor cd,
0: 									CostEstimate outerCost,
0: 									Optimizer optimizer,
0: 									RowOrdering rowOrdering)
0: 			throws StandardException
0: 	{
0: 		// RESOLVE: WE NEED TO ADD IN THE COST OF SORTING HERE, AND FIGURE
0: 		// OUT HOW MANY ROWS WILL BE ELIMINATED.
0: 		CostEstimate childCost =
0: 			((Optimizable) childResult).estimateCost(predList,
0: 									cd,
0: 									outerCost,
0: 									optimizer,
0: 									rowOrdering);
0: 
0: 		costEstimate = getCostEstimate(optimizer);
0: 		costEstimate.setCost(childCost.getEstimatedCost(),
0: 							 childCost.rowCount(),
0: 							 childCost.singleScanRowCount());
0: 
0: 
0: 		/*
0: 		** No need to use estimateCost on join strategy - that has already
0: 		** been done on the child.
0: 		*/
0: 		return costEstimate;
0: 	}
0: 
0: 	/**
0: 	 * @see org.apache.derby.iapi.sql.compile.Optimizable#pushOptPredicate
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public boolean pushOptPredicate(OptimizablePredicate optimizablePredicate)
0: 			throws StandardException
0: 	{
0: 		return false;
0: 		// return ((Optimizable) childResult).pushOptPredicate(optimizablePredicate);
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return childResult.toString() + "\n" + super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Optimize this DistinctNode.  
0: 	 *
0: 	 * @param dataDictionary	The DataDictionary to use for optimization
0: 	 * @param predicateList		The PredicateList to optimize.  This should
0: 	 *							be a join predicate.
0: 	 * @param outerRows			The number of outer joining rows
0: 	 *
0: 	 * @return	ResultSetNode	The top of the optimized subtree
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ResultSetNode optimize(DataDictionary dataDictionary,
0: 								  PredicateList predicates,
0: 								  double outerRows) 
0: 					throws StandardException
0: 	{
0: 		/* We need to implement this method since a PRN can appear above a
0: 		 * SelectNode in a query tree.
0: 		 */
0: 		childResult = (ProjectRestrictNode) childResult.optimize(
0: 															dataDictionary,
0: 															predicates,
0: 															outerRows);
0: 		Optimizer optimizer = getOptimizer(
0: 						(FromList) getNodeFactory().getNode(
0: 							C_NodeTypes.FROM_LIST,
0: 							getNodeFactory().doJoinOrderOptimization(),
0: 							this,
0: 							getContextManager()),
0: 						predicates,
0: 						dataDictionary,
0: 						(RequiredRowOrdering) null);
0: 
0: 		// RESOLVE: NEED TO FACTOR IN COST OF SORTING AND FIGURE OUT HOW
0: 		// MANY ROWS HAVE BEEN ELIMINATED.
0: 		costEstimate = optimizer.newCostEstimate();
0: 
0: 		costEstimate.setCost(childResult.getCostEstimate().getEstimatedCost(),
0: 							 childResult.getCostEstimate().rowCount(),
0: 							 childResult.getCostEstimate().singleScanRowCount());
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Return whether or not the underlying ResultSet tree
0: 	 * is ordered on the specified columns.
0: 	 * RESOLVE - This method currently only considers the outermost table 
0: 	 * of the query block.
0: 	 *
0: 	 * @param	crs					The specified ColumnReference[]
0: 	 * @param	permuteOrdering		Whether or not the order of the CRs in the array can be permuted
0: 	 * @param	fbtVector			Vector that is to be filled with the FromBaseTable	
0: 	 *
0: 	 * @return	Whether the underlying ResultSet tree
0: 	 * is ordered on the specified column.
0: 	 */
0: 	boolean isOrderedOn(ColumnReference[] crs, boolean permuteOrdering, Vector fbtVector)
0: 	{
0: 		/* RESOLVE - DistinctNodes are ordered on their RCLs.
0: 		 * Walk RCL to see if cr is 1st non-constant column in the
0: 		 * ordered result.
0: 		 */
0: 		return false;
0: 	}
0: 
0:     /**
0:      * generate the distinct result set operating over the source
0: 	 * resultset.
0:      *
0: 	 * @exception StandardException		Thrown on error
0:      */
0: 	public void generate(ActivationClassBuilder acb,
0: 								MethodBuilder mb)
0: 							throws StandardException
0: 	{
0: 		/* Get the next ResultSet#, so we can number this ResultSetNode, its
0: 		 * ResultColumnList and ResultSet.
0: 		 */
0: 		assignResultSetNumber();
0: 
0: 		// Get the cost estimate from the child if we don't have one yet
0: 		if (costEstimate == null)
0: 		{
0: 			costEstimate = childResult.getFinalCostEstimate();
0: 		}
0: 
0: 		/*
0: 			create the orderItem and stuff it in.
0: 		 */
0: 		int orderItem = acb.addItem(acb.getColumnOrdering(resultColumns));
0: 
0: 		/* Generate the SortResultSet:
0: 		 *	arg1: childExpress - Expression for childResultSet
0: 		 *  arg2: distinct - true, of course
0: 		 *  arg3: isInSortedOrder - is the source result set in sorted order
0: 		 *  arg4: orderItem - entry in saved objects for the ordering
0: 		 *  arg5: Activation
0: 		 *  arg6: rowAllocator - method to construct rows for fetching
0: 		 *			from the sort
0: 		 *  arg7: row size
0: 		 *  arg8: resultSetNumber
0: 		 *  arg9: closeCleanup
0: 		 */
0: 
0: 		acb.pushGetResultSetFactoryExpression(mb);
0: 
0: 		childResult.generate(acb, mb);
0: 		mb.push(true);
0: 		mb.push(inSortedOrder);
0: 		mb.push(orderItem);
0: 		acb.pushThisAsActivation(mb);
0: 		resultColumns.generateHolder(acb, mb);
0: 		mb.push(resultColumns.getTotalColumnSize());
0: 		mb.push(resultSetNumber);
0: 		mb.push(costEstimate.rowCount());
0: 		mb.push(costEstimate.getEstimatedCost());
0: 		closeMethodArgument(acb, mb);
0: 
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getSortResultSet", ClassName.NoPutResultSet, 11);
0: 	}
0: }
============================================================================