1:c729074: /*
3:c729074: 
1:c729074:    Derby - 
1:c729074:    Class org.apache.derbyTesting.functionTests.tests.jdbcapi.metadataMultiConnTest
1:c729074: 
1:c729074:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c729074:    contributor license agreements.  See the NOTICE file distributed with
1:c729074:    this work for additional information regarding copyright ownership.
1:c729074:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c729074:    (the "License"); you may not use this file except in compliance with
1:c729074:    the License.  You may obtain a copy of the License at
1:c729074: 
1:c729074:       http://www.apache.org/licenses/LICENSE-2.0
1:c729074: 
1:c729074:    Unless required by applicable law or agreed to in writing, software
1:c729074:    distributed under the License is distributed on an "AS IS" BASIS,
1:c729074:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c729074:    See the License for the specific language governing permissions and
1:c729074:    limitations under the License.
1:c729074: 
1:c729074:  */
1:c729074: 
1:c729074: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:c729074: 
1:c729074: import java.sql.Connection;
1:c729074: import java.sql.DatabaseMetaData;
1:c729074: import java.sql.ResultSet;
1:c729074: import java.sql.SQLException;
1:c729074: import java.sql.Statement;
1:c729074: import junit.framework.Test;
1:c729074: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c729074: import org.apache.derbyTesting.junit.JDBC;
1:c729074: 
1:c729074: public class metadataMultiConnTest extends BaseJDBCTestCase {
1:c729074: 
1:c729074: 	
1:c729074: 	public metadataMultiConnTest(String name) {
1:c729074: 		super(name);
1:c729074: 	}
1:c729074: 
1:c729074: 	public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(metadataMultiConnTest.class);
1:c729074: 	}
1:c729074: 
1:c729074: 
1:c729074: 	public void testMetadataMultiConn() throws SQLException {
1:c729074: 
1:c729074: 		Connection conn1 = openDefaultConnection();
1:c729074: 		metadataCalls(conn1);
1:c729074: 
1:c729074: 		Connection conn2 = openDefaultConnection();
1:c729074: 		metadataCalls(conn2);
1:c729074: 
1:c729074: 		Connection conn3 = openDefaultConnection();
1:c729074: 		metadataCalls(conn3);
1:c729074: 
1:c729074: 		conn1.commit();
1:c729074: 		conn2.commit();
1:c729074: 
1:c729074: 		checkConsistencyOfAllTables(conn3);
1:c729074: 	}
1:c729074: 
1:c729074: 	public void metadataCalls(Connection conn) throws SQLException {
1:c729074: 		DatabaseMetaData dmd = conn.getMetaData();
1:c729074: 		getTypeInfo(dmd);
1:c729074: 		getTables(dmd);
1:c729074: 		getColumnInfo(dmd);
1:c729074: 		getPrimaryKeys(dmd);
1:c729074: 		getExportedKeys(dmd);
1:c729074: 	}
1:c729074: 
1:c729074: 	public void getTypeInfo(DatabaseMetaData dmd) throws SQLException {
1:c729074: 		ResultSet rs = dmd.getTypeInfo();
1:c729074: 		JDBC.assertDrainResults(rs);
1:c729074: 	}
1:c729074: 
1:c729074: 	public void getTables(DatabaseMetaData dmd) throws SQLException {
1:c729074: 		String types[] = new String[1];
1:c729074: 		types[0] = "TABLE";
1:c729074: 		ResultSet rs = dmd.getTables(null, null, null, types);
1:c729074: 		JDBC.assertDrainResults(rs);
1:c729074: 	}
1:c729074: 
1:c729074: 	public void getColumnInfo(DatabaseMetaData dmd) throws SQLException {
1:c729074: 		ResultSet rs = dmd.getColumns(null, null, "%", "%");
1:c729074: 		JDBC.assertDrainResults(rs);
1:c729074: 	}
1:c729074: 
1:c729074: 	public void getPrimaryKeys(DatabaseMetaData dmd) throws SQLException {
1:c729074: 		ResultSet rs = dmd.getPrimaryKeys(null, null, "%");
1:c729074: 		JDBC.assertDrainResults(rs);
1:c729074: 	}
1:c729074: 
1:c729074: 	public void getExportedKeys(DatabaseMetaData dmd) throws SQLException {
1:c729074: 		ResultSet rs = dmd.getExportedKeys(null, null, "%");
1:c729074: 		JDBC.assertDrainResults(rs);
1:c729074: 	}
1:c729074: 
1:c729074: 
1:c729074: 	public void checkConsistencyOfAllTables(Connection conn)
1:c729074: 			throws SQLException {
1:c729074: 
1:c729074: 		Statement s = conn.createStatement();
1:c729074: 		ResultSet rs = s.executeQuery("SELECT schemaname, tablename, "
1:c729074: 				+ "SYSCS_UTIL.SYSCS_CHECK_TABLE(schemaname, tablename) "
1:c729074: 				+ "FROM sys.sysschemas s, sys.systables t "
1:c729074: 				+ "WHERE s.schemaid = t.schemaid");
1:c729074: 		while (rs.next()) {
1:c729074: 			assertTrue(rs.getBoolean(3));
1:c729074: 		}
1:c729074: 		rs.close();
1:c729074: 		s.close();
1:c729074: 	}
1:c729074: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(metadataMultiConnTest.class);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:c729074
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - 
1:    Class org.apache.derbyTesting.functionTests.tests.jdbcapi.metadataMultiConnTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: 
1: public class metadataMultiConnTest extends BaseJDBCTestCase {
1: 
1: 	
1: 	public metadataMultiConnTest(String name) {
1: 		super(name);
1: 	}
1: 
1: 	public static Test suite() {
0: 		return new TestSuite(metadataMultiConnTest.class);
1: 	}
1: 
1: 
1: 	public void testMetadataMultiConn() throws SQLException {
1: 
1: 		Connection conn1 = openDefaultConnection();
1: 		metadataCalls(conn1);
1: 
1: 		Connection conn2 = openDefaultConnection();
1: 		metadataCalls(conn2);
1: 
1: 		Connection conn3 = openDefaultConnection();
1: 		metadataCalls(conn3);
1: 
1: 		conn1.commit();
1: 		conn2.commit();
1: 
1: 		checkConsistencyOfAllTables(conn3);
1: 	}
1: 
1: 	public void metadataCalls(Connection conn) throws SQLException {
1: 		DatabaseMetaData dmd = conn.getMetaData();
1: 		getTypeInfo(dmd);
1: 		getTables(dmd);
1: 		getColumnInfo(dmd);
1: 		getPrimaryKeys(dmd);
1: 		getExportedKeys(dmd);
1: 	}
1: 
1: 	public void getTypeInfo(DatabaseMetaData dmd) throws SQLException {
1: 		ResultSet rs = dmd.getTypeInfo();
1: 		JDBC.assertDrainResults(rs);
1: 	}
1: 
1: 	public void getTables(DatabaseMetaData dmd) throws SQLException {
1: 		String types[] = new String[1];
1: 		types[0] = "TABLE";
1: 		ResultSet rs = dmd.getTables(null, null, null, types);
1: 		JDBC.assertDrainResults(rs);
1: 	}
1: 
1: 	public void getColumnInfo(DatabaseMetaData dmd) throws SQLException {
1: 		ResultSet rs = dmd.getColumns(null, null, "%", "%");
1: 		JDBC.assertDrainResults(rs);
1: 	}
1: 
1: 	public void getPrimaryKeys(DatabaseMetaData dmd) throws SQLException {
1: 		ResultSet rs = dmd.getPrimaryKeys(null, null, "%");
1: 		JDBC.assertDrainResults(rs);
1: 	}
1: 
1: 	public void getExportedKeys(DatabaseMetaData dmd) throws SQLException {
1: 		ResultSet rs = dmd.getExportedKeys(null, null, "%");
1: 		JDBC.assertDrainResults(rs);
1: 	}
1: 
1: 
1: 	public void checkConsistencyOfAllTables(Connection conn)
1: 			throws SQLException {
1: 
1: 		Statement s = conn.createStatement();
1: 		ResultSet rs = s.executeQuery("SELECT schemaname, tablename, "
1: 				+ "SYSCS_UTIL.SYSCS_CHECK_TABLE(schemaname, tablename) "
1: 				+ "FROM sys.sysschemas s, sys.systables t "
1: 				+ "WHERE s.schemaid = t.schemaid");
1: 		while (rs.next()) {
1: 			assertTrue(rs.getBoolean(3));
1: 		}
1: 		rs.close();
1: 		s.close();
1: 	}
1: }
============================================================================