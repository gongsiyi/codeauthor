1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.SumAggregator
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.types.NumberDataValue;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Aggregator for SUM().  Defers most of its work
1:eac0369:  * to OrderableAggregator.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public  class SumAggregator 
1:eac0369: 	extends OrderableAggregator
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Accumulate
1:eac0369:  	 *
1:eac0369: 	 * @param addend	value to be added in
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 *
1:eac0369: 	 * @see ExecAggregator#accumulate
1:eac0369: 	 */
1:eac0369: 	protected void accumulate(DataValueDescriptor addend) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If we don't have any value yet, just clone
1:eac0369: 		** the addend.
1:eac0369: 		*/
1:eac0369: 		if (value == null)
1:eac0369: 		{ 
1:854dd10: 			/* NOTE: We need to call cloneValue since value gets
1:eac0369: 			 * reused underneath us
1:eac0369: 			 */
1:854dd10: 			value = addend.cloneValue(false);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			NumberDataValue	input = (NumberDataValue)addend;
1:eac0369: 			NumberDataValue nv = (NumberDataValue) value;
1:eac0369: 
1:eac0369: 			value = nv.plus(
1:eac0369: 						input,						// addend 1
1:eac0369: 						nv,		// addend 2
1:eac0369: 						nv);	// result
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369:  	 * @return ExecAggregator the new aggregator
1:eac0369: 	 */
1:eac0369: 	public ExecAggregator newAggregator()
1:eac0369: 	{
1:eac0369: 		return new SumAggregator();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// FORMATABLE INTERFACE
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_SUM_V01_ID; }
1:b5105f3:         public String toString()
1:b5105f3:         {
1:b5105f3:             try {
1:b5105f3:             return "SumAggregator: " + value.getString();
1:b5105f3:             }
1:b5105f3:             catch (StandardException e)
1:b5105f3:             {
1:b5105f3:                 return super.toString() + ":" + e.getMessage();
1:b5105f3:             }
1:b5105f3:         }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:b5105f3
/////////////////////////////////////////////////////////////////////////
1:         public String toString()
1:         {
1:             try {
1:             return "SumAggregator: " + value.getString();
1:             }
1:             catch (StandardException e)
1:             {
1:                 return super.toString() + ":" + e.getMessage();
1:             }
1:         }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1: 			/* NOTE: We need to call cloneValue since value gets
1: 			value = addend.cloneValue(false);
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.SumAggregator
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.NumberDataValue;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: /**
1:  * Aggregator for SUM().  Defers most of its work
1:  * to OrderableAggregator.
1:  *
0:  * @author jamie
1:  */
1: public  class SumAggregator 
1: 	extends OrderableAggregator
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	 * Accumulate
1:  	 *
1: 	 * @param addend	value to be added in
0: 	 * @param ga		the generic aggregator that is calling me
1: 	 *
1: 	 * @exception StandardException on error
1: 	 *
1: 	 * @see ExecAggregator#accumulate
1: 	 */
1: 	protected void accumulate(DataValueDescriptor addend) 
1: 		throws StandardException
1: 	{
1: 
1: 		/*
1: 		** If we don't have any value yet, just clone
1: 		** the addend.
1: 		*/
1: 		if (value == null)
1: 		{ 
0: 			/* NOTE: We need to call getClone() since value gets 
1: 			 * reused underneath us
1: 			 */
0: 			value = addend.getClone();
1: 		}
1: 		else
1: 		{
1: 			NumberDataValue	input = (NumberDataValue)addend;
1: 			NumberDataValue nv = (NumberDataValue) value;
1: 
1: 			value = nv.plus(
1: 						input,						// addend 1
1: 						nv,		// addend 2
1: 						nv);	// result
1: 		}
1: 	}
1: 
1: 	/**
1:  	 * @return ExecAggregator the new aggregator
1: 	 */
1: 	public ExecAggregator newAggregator()
1: 	{
1: 		return new SumAggregator();
1: 	}
1: 
1: 	////////////////////////////////////////////////////////////
1: 	// 
1: 	// FORMATABLE INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_SUM_V01_ID; }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.execute.ExecAggregator;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: /**
0:  * Aggregator for SUM().  Defers most of its work
0:  * to OrderableAggregator.
0:  *
0:  * @author jamie
0:  */
0: public  class SumAggregator 
0: 	extends OrderableAggregator
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	 * Accumulate
0:  	 *
0: 	 * @param addend	value to be added in
0: 	 * @param ga		the generic aggregator that is calling me
0: 	 *
0: 	 * @exception StandardException on error
0: 	 *
0: 	 * @see ExecAggregator#accumulate
0: 	 */
0: 	protected void accumulate(DataValueDescriptor addend) 
0: 		throws StandardException
0: 	{
0: 
0: 		/*
0: 		** If we don't have any value yet, just clone
0: 		** the addend.
0: 		*/
0: 		if (value == null)
0: 		{ 
0: 			/* NOTE: We need to call getClone() since value gets 
0: 			 * reused underneath us
0: 			 */
0: 			value = addend.getClone();
0: 		}
0: 		else
0: 		{
0: 			NumberDataValue	input = (NumberDataValue)addend;
0: 			NumberDataValue nv = (NumberDataValue) value;
0: 
0: 			value = nv.plus(
0: 						input,						// addend 1
0: 						nv,		// addend 2
0: 						nv);	// result
0: 		}
0: 	}
0: 
0: 	/**
0:  	 * @return ExecAggregator the new aggregator
0: 	 */
0: 	public ExecAggregator newAggregator()
0: 	{
0: 		return new SumAggregator();
0: 	}
0: 
0: 	////////////////////////////////////////////////////////////
0: 	// 
0: 	// FORMATABLE INTERFACE
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_SUM_V01_ID; }
0: }
============================================================================