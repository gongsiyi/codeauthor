1:eac0369: /*
3:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.context.ErrorStringBuilder
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:7132626: package org.apache.derby.iapi.error;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
1:eac0369: 
1:eac0369: import java.io.StringWriter;
1:eac0369: import java.io.PrintWriter;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Class used to form error messages.  Primary
1:eac0369:  * reason for existence is to allow a way to call
1:eac0369:  * printStackTrace() w/o automatically writting
1:eac0369:  * to a stream.
1:eac0369:  */
1:eac0369: public class ErrorStringBuilder 
1:eac0369: {
1:eac0369: 	private StringWriter	stringWriter;
1:eac0369: 	private PrintWriter		printWriter;
1:eac0369: 	private PrintWriterGetHeader	headerGetter;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	** Construct an error string builder
1:eac0369: 	*/
1:eac0369: 	public ErrorStringBuilder(PrintWriterGetHeader headerGetter)
1:eac0369: 	{
1:eac0369: 		this.headerGetter = headerGetter;
1:eac0369: 		this.stringWriter = new StringWriter();
1:eac0369: 		this.printWriter = new PrintWriter(stringWriter);
4:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	** Append an error string 
2:eac0369: 	**
1:6b50965: 	** @param s 	the string to append
1:eac0369: 	*/
1:eac0369: 	public void append(String s)
1:eac0369: 	{
1:eac0369: 		if (headerGetter != null)
1:eac0369: 			printWriter.print(headerGetter.getHeader());
1:eac0369: 		printWriter.print(s);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	** Append an error string with a newline
1:eac0369: 	**
1:6b50965: 	** @param s 	the string to append
1:eac0369: 	*/
1:eac0369: 	public void appendln(String s)
1:eac0369: 	{
1:eac0369: 		if (headerGetter != null)
1:eac0369: 			printWriter.print(headerGetter.getHeader());
1:eac0369: 		printWriter.println(s);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	** Print a stacktrace from the throwable in the error
1:eac0369: 	** buffer.
1:eac0369: 	**
1:6b50965: 	** @param t	the error
1:eac0369: 	*/
1:eac0369: 	public void stackTrace(Throwable t)
1:eac0369: 	{
1:eac0369: 		int level = 0;
1:eac0369: 		while(t != null)
1:eac0369: 		{
1:eac0369: 			if (level > 0)	
1:eac0369: 				printWriter.println("============= begin nested exception, level (" +
1:eac0369: 									level + ") ===========");
1:eac0369: 
1:eac0369: 			t.printStackTrace(printWriter);
1:eac0369: 
1:e70c716: 			if (t instanceof java.sql.SQLException) {
1:e70c716: 				Throwable next = ((java.sql.SQLException)t).getNextException();
1:e70c716: 				t = (next == null) ? t.getCause() : next;
1:eac0369: 			} else {
1:e70c716: 				t = t.getCause();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (level > 0)	
1:eac0369: 				printWriter.println("============= end nested exception, level (" + 
1:eac0369: 									level + ") ===========");
1:eac0369: 
1:eac0369: 			level++;
1:eac0369: 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	** Reset the buffer -- truncate it down to nothing.
1:eac0369: 	**
1:eac0369: 	*/
1:eac0369: 	public void reset()
1:eac0369: 	{
1:eac0369: 		// Is this the most effecient way to do this?
1:eac0369: 		stringWriter.getBuffer().setLength(0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	** Get the buffer
1:eac0369: 	*/
1:eac0369: 	public StringBuffer get()
1:eac0369: 	{
1:eac0369: 		return stringWriter.getBuffer();
1:eac0369: 	}	
1:eac0369: }	
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7132626
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.iapi.error;
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.context.ErrorStringBuilder
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.context
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
0: package org.apache.derby.iapi.services.context;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
1: 
1: import java.io.StringWriter;
1: import java.io.PrintWriter;
1: 
1: /**
1:  * Class used to form error messages.  Primary
1:  * reason for existence is to allow a way to call
1:  * printStackTrace() w/o automatically writting
1:  * to a stream.
1:  */
1: public class ErrorStringBuilder 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 	private StringWriter	stringWriter;
1: 	private PrintWriter		printWriter;
1: 	private PrintWriterGetHeader	headerGetter;
1: 
1: 	/**
1: 	** Construct an error string builder
1: 	**
0: 	** @param boolean  whether a header string
0: 	**					is included in each message
1: 	*/
1: 	public ErrorStringBuilder(PrintWriterGetHeader headerGetter)
1: 	{
1: 		this.headerGetter = headerGetter;
1: 		this.stringWriter = new StringWriter();
1: 		this.printWriter = new PrintWriter(stringWriter);
1: 	}
1: 
1: 	/**
1: 	** Append an error string 
1: 	**
0: 	** @param String 	the string to append
1: 	*/
1: 	public void append(String s)
1: 	{
1: 		if (headerGetter != null)
1: 			printWriter.print(headerGetter.getHeader());
1: 		printWriter.print(s);
1: 	}
1: 
1: 
1: 	/**
1: 	** Append an error string with a newline
1: 	**
0: 	** @param String 	the string to append
1: 	*/
1: 	public void appendln(String s)
1: 	{
1: 		if (headerGetter != null)
1: 			printWriter.print(headerGetter.getHeader());
1: 		printWriter.println(s);
1: 	}
1: 
1: 	/**
1: 	** Print a stacktrace from the throwable in the error
1: 	** buffer.
1: 	**
0: 	** @param Throwable	the error
1: 	*/
1: 	public void stackTrace(Throwable t)
1: 	{
1: 		int level = 0;
1: 		while(t != null)
1: 		{
1: 			if (level > 0)	
1: 				printWriter.println("============= begin nested exception, level (" +
1: 									level + ") ===========");
1: 
1: 			t.printStackTrace(printWriter);
1: 
1: 
0: 			if (t instanceof StandardException) {
0: 				t = ((StandardException)t).getNestedException();
1: 			}
0: 			else if (t instanceof ExceptionInInitializerError) {
0: 				t = ((ExceptionInInitializerError) t).getException();
1: 			}
0: 			else if (t instanceof java.lang.reflect.InvocationTargetException) {
0: 				t = ((java.lang.reflect.InvocationTargetException) t).getTargetException();
1: 			}
0: 			else if (t instanceof java.sql.SQLException) {
0: 				t = ((java.sql.SQLException)t).getNextException();
1: 			} else {
0: 				t = null;
1: 			}
1: 
1: 			if (level > 0)	
1: 				printWriter.println("============= end nested exception, level (" + 
1: 									level + ") ===========");
1: 
1: 			level++;
1: 
1: 		}
1: 
1: 	}
1: 
1: 	/**
1: 	** Reset the buffer -- truncate it down to nothing.
1: 	**
1: 	*/
1: 	public void reset()
1: 	{
1: 		// Is this the most effecient way to do this?
1: 		stringWriter.getBuffer().setLength(0);
1: 	}
1: 
1: 	/**
1: 	** Get the buffer
1: 	*/
1: 	public StringBuffer get()
1: 	{
1: 		return stringWriter.getBuffer();
1: 	}	
1: }	
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e70c716
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			if (t instanceof java.sql.SQLException) {
1: 				Throwable next = ((java.sql.SQLException)t).getNextException();
1: 				t = (next == null) ? t.getCause() : next;
1: 				t = t.getCause();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	** @param s 	the string to append
/////////////////////////////////////////////////////////////////////////
1: 	** @param s 	the string to append
/////////////////////////////////////////////////////////////////////////
1: 	** @param t	the error
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.context
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.context;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.stream.PrintWriterGetHeader;
0: 
0: import java.io.StringWriter;
0: import java.io.PrintWriter;
0: 
0: /**
0:  * Class used to form error messages.  Primary
0:  * reason for existence is to allow a way to call
0:  * printStackTrace() w/o automatically writting
0:  * to a stream.
0:  */
0: public class ErrorStringBuilder 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	private StringWriter	stringWriter;
0: 	private PrintWriter		printWriter;
0: 	private PrintWriterGetHeader	headerGetter;
0: 
0: 	/**
0: 	** Construct an error string builder
0: 	**
0: 	** @param boolean  whether a header string
0: 	**					is included in each message
0: 	*/
0: 	public ErrorStringBuilder(PrintWriterGetHeader headerGetter)
0: 	{
0: 		this.headerGetter = headerGetter;
0: 		this.stringWriter = new StringWriter();
0: 		this.printWriter = new PrintWriter(stringWriter);
0: 	}
0: 
0: 	/**
0: 	** Append an error string 
0: 	**
0: 	** @param String 	the string to append
0: 	*/
0: 	public void append(String s)
0: 	{
0: 		if (headerGetter != null)
0: 			printWriter.print(headerGetter.getHeader());
0: 		printWriter.print(s);
0: 	}
0: 
0: 
0: 	/**
0: 	** Append an error string with a newline
0: 	**
0: 	** @param String 	the string to append
0: 	*/
0: 	public void appendln(String s)
0: 	{
0: 		if (headerGetter != null)
0: 			printWriter.print(headerGetter.getHeader());
0: 		printWriter.println(s);
0: 	}
0: 
0: 	/**
0: 	** Print a stacktrace from the throwable in the error
0: 	** buffer.
0: 	**
0: 	** @param Throwable	the error
0: 	*/
0: 	public void stackTrace(Throwable t)
0: 	{
0: 		int level = 0;
0: 		while(t != null)
0: 		{
0: 			if (level > 0)	
0: 				printWriter.println("============= begin nested exception, level (" +
0: 									level + ") ===========");
0: 
0: 			t.printStackTrace(printWriter);
0: 
0: 
0: 			if (t instanceof StandardException) {
0: 				t = ((StandardException)t).getNestedException();
0: 			}
0: 			else if (t instanceof ExceptionInInitializerError) {
0: 				t = ((ExceptionInInitializerError) t).getException();
0: 			}
0: 			else if (t instanceof java.lang.reflect.InvocationTargetException) {
0: 				t = ((java.lang.reflect.InvocationTargetException) t).getTargetException();
0: 			}
0: 			else if (t instanceof java.sql.SQLException) {
0: 				t = ((java.sql.SQLException)t).getNextException();
0: 			} else {
0: 				t = null;
0: 			}
0: 
0: 			if (level > 0)	
0: 				printWriter.println("============= end nested exception, level (" + 
0: 									level + ") ===========");
0: 
0: 			level++;
0: 
0: 		}
0: 
0: 	}
0: 
0: 	/**
0: 	** Reset the buffer -- truncate it down to nothing.
0: 	**
0: 	*/
0: 	public void reset()
0: 	{
0: 		// Is this the most effecient way to do this?
0: 		stringWriter.getBuffer().setLength(0);
0: 	}
0: 
0: 	/**
0: 	** Get the buffer
0: 	*/
0: 	public StringBuffer get()
0: 	{
0: 		return stringWriter.getBuffer();
0: 	}	
0: }	
============================================================================