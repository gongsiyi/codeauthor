1:7a9ce7e: /*
1:7a9ce7e:    Derby - Class org.apache.derby.impl.sql.compile.RowNumberFunctionNode
3:7a9ce7e: 
1:7a9ce7e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9ce7e:    contributor license agreements.  See the NOTICE file distributed with
1:7a9ce7e:    this work for additional information regarding copyright ownership.
1:7a9ce7e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7a9ce7e:    (the "License"); you may not use this file except in compliance with
1:7a9ce7e:    the License.  You may obtain a copy of the License at
1:7a9ce7e: 
1:7a9ce7e:       http://www.apache.org/licenses/LICENSE-2.0
1:7a9ce7e: 
1:7a9ce7e:    Unless required by applicable law or agreed to in writing, software
1:7a9ce7e:    distributed under the License is distributed on an "AS IS" BASIS,
1:7a9ce7e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9ce7e:    See the License for the specific language governing permissions and
1:7a9ce7e:    limitations under the License.
1:7a9ce7e: 
1:7a9ce7e:  */
1:7a9ce7e: 
1:7a9ce7e: package org.apache.derby.impl.sql.compile;
1:7a9ce7e: 
1:7a9ce7e: import java.sql.Types;
1:f33fbaf: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:7a9ce7e: 
1:7a9ce7e: /**
1:7a9ce7e:  * Class that represents a call to the ROW_NUMBER() window function.
1:7a9ce7e:  */
1:7a9ce7e: public final class RowNumberFunctionNode extends WindowFunctionNode
2:7a9ce7e: {
1:7a9ce7e:     /**
2:7a9ce7e:      *
1:3bb140c:      * @param op operand (null for now)
1:3bb140c:      * @param w The window definition or reference
1:7a9ce7e:      */
1:3bb140c:     RowNumberFunctionNode(ValueNode op, WindowNode w, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(op, "ROW_NUMBER", w, cm);
1:7a9ce7e:         setType( TypeId.getBuiltInTypeId( Types.BIGINT ),
1:7a9ce7e:                  TypeId.LONGINT_PRECISION,
1:7a9ce7e:                  TypeId.LONGINT_SCALE,
1:7a9ce7e:                  false,
1:7a9ce7e:                  TypeId.LONGINT_MAXWIDTH);
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * ValueNode override.
1:7a9ce7e:      * @see ValueNode#bindExpression
1:7a9ce7e:      */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:                     FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
2:7a9ce7e:             throws StandardException
1:7a9ce7e:     {
1:09c2697:         super.bindExpression(fromList, subqueryList, aggregates);
1:7a9ce7e:         return this;
1:7a9ce7e:     }
1:7a9ce7e: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.types.TypeId;
1:      * @param op operand (null for now)
1:      * @param w The window definition or reference
1:     RowNumberFunctionNode(ValueNode op, WindowNode w, ContextManager cm)
1:             throws StandardException {
1:         super(op, "ROW_NUMBER", w, cm);
0:         setNodeType(C_NodeTypes.ROW_NUMBER_FUNCTION_NODE);
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:7a9ce7e
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.sql.compile.RowNumberFunctionNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.sql.Types;
0: import java.util.Vector;
1: 
1: /**
1:  * Class that represents a call to the ROW_NUMBER() window function.
1:  */
1: public final class RowNumberFunctionNode extends WindowFunctionNode
1: {
1: 
1:     /**
0:      * Initializer. QueryTreeNode override.
1:      *
0:      * @param arg1 null (Operand)
0:      * @param arg2 The window definition or reference
1:      *
0:      * @exception StandardException
1:      */
0:     public void init(Object arg1, Object arg2)
1:         throws StandardException
1:     {
0:         super.init(arg1, "ROW_NUMBER", arg2);
1:         setType( TypeId.getBuiltInTypeId( Types.BIGINT ),
1:                  TypeId.LONGINT_PRECISION,
1:                  TypeId.LONGINT_SCALE,
1:                  false,
1:                  TypeId.LONGINT_MAXWIDTH);
1:     }
1: 
1:     /**
1:      * ValueNode override.
1:      * @see ValueNode#bindExpression
1:      */
0:     public ValueNode bindExpression(
0:                     FromList            fromList,
0:                     SubqueryList        subqueryList,
0:                     Vector              aggregateVector)
1:             throws StandardException
1:     {
0:         super.bindExpression(fromList, subqueryList, aggregateVector);
1:         return this;
1:     }
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:                     FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:     ValueNode bindExpression(
0:                     FromList fromList, SubqueryList subqueryList, List aggregates)
1:         super.bindExpression(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:                     List                aggregateVector)
============================================================================