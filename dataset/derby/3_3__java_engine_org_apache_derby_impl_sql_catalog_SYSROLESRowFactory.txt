1:ee59de8: /*
5:ee59de8: 
1:ee59de8:    Derby - Class org.apache.derby.impl.sql.catalog.SYSROLESRowFactory
1:ee59de8: 
1:ee59de8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ee59de8:    contributor license agreements.  See the NOTICE file distributed with
1:ee59de8:    this work for additional information regarding copyright ownership.
1:ee59de8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ee59de8:    (the "License"); you may not use this file except in compliance with
1:ee59de8:    the License.  You may obtain a copy of the License at
1:ee59de8: 
1:ee59de8:       http://www.apache.org/licenses/LICENSE-2.0
1:ee59de8: 
1:ee59de8:    Unless required by applicable law or agreed to in writing, software
1:ee59de8:    distributed under the License is distributed on an "AS IS" BASIS,
1:ee59de8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee59de8:    See the License for the specific language governing permissions and
1:ee59de8:    limitations under the License.
1:ee59de8: 
1:ee59de8: */
1:ee59de8: 
1:ee59de8: package org.apache.derby.impl.sql.catalog;
1:ee59de8: 
1:f717f79: import org.apache.derby.catalog.UUID;
1:ee59de8: import org.apache.derby.iapi.types.SQLChar;
1:ee59de8: import org.apache.derby.iapi.types.SQLVarchar;
1:ee59de8: import org.apache.derby.iapi.types.DataValueDescriptor;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:ee59de8: import org.apache.derby.iapi.types.DataValueFactory;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:4e3ddd7: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:ee59de8: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:ee59de8: import org.apache.derby.iapi.sql.execute.ExecRow;
1:ee59de8: import org.apache.derby.iapi.error.StandardException;
1:ee59de8: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:ee59de8: 
1:ee59de8: /**
1:ee59de8:  * Factory for creating a SYSROLES row.
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: public class SYSROLESRowFactory extends CatalogRowFactory
1:ee59de8: {
1:ee59de8:     private static final String TABLENAME_STRING = "SYSROLES";
1:ee59de8: 
1:f717f79:     private static final int SYSROLES_COLUMN_COUNT = 6;
1:ee59de8:     /* Column #s for sysinfo (1 based) */
1:f717f79:     private static final int SYSROLES_ROLE_UUID = 1;
1:f717f79:     private static final int SYSROLES_ROLEID = 2;
1:f717f79:     private static final int SYSROLES_GRANTEE = 3;
1:f717f79:     private static final int SYSROLES_GRANTOR = 4;
1:f717f79:     private static final int SYSROLES_WITHADMINOPTION = 5;
1:fe8c4c2:     static final int SYSROLES_ISDEF = 6;
1:ee59de8: 
1:ee59de8:     private static final int[][] indexColumnPositions =
1:ee59de8:     {
1:ee59de8:         {SYSROLES_ROLEID, SYSROLES_GRANTEE, SYSROLES_GRANTOR},
1:f717f79:         {SYSROLES_ROLEID, SYSROLES_ISDEF},
1:f717f79:         {SYSROLES_ROLE_UUID}
1:ee59de8:     };
1:f717f79: 
1:fe8c4c2:     static final int SYSROLES_ROLEID_COLPOS_IN_INDEX_ID_EE_OR = 1;
1:fe8c4c2:     static final int SYSROLES_GRANTEE_COLPOS_IN_INDEX_ID_EE_OR = 2;
1:fe8c4c2: 
1:f717f79:     // (role)ID_(grant)EE_(grant)OR
1:f717f79:     static final int SYSROLES_INDEX_ID_EE_OR_IDX = 0;
1:f717f79:     // (role)ID_(is)DEF
1:f717f79:     static final int SYSROLES_INDEX_ID_DEF_IDX = 1;
1:f717f79:     // UUID
1:f717f79:     static final int SYSROLES_INDEX_UUID_IDX = 2;
1:f717f79: 
1:f717f79:     private static  final   boolean[]   uniqueness = {
1:f717f79:         true,
1:f717f79:         false, // many rows have same roleid and is not a definition
1:f717f79:         true};
1:ee59de8: 
1:ee59de8:     private static final String[] uuids = {
1:ee59de8:         "e03f4017-0115-382c-08df-ffffe275b270", // catalog UUID
1:ee59de8:         "c851401a-0115-382c-08df-ffffe275b270", // heap UUID
1:f717f79:         "c065801d-0115-382c-08df-ffffe275b270", // SYSROLES_INDEX_ID_EE_OR
1:f717f79:         "787c0020-0115-382c-08df-ffffe275b270", // SYSROLES_INDEX_ID_DEF
1:f717f79:         "629f8094-0116-d8f9-5f97-ffffe275b270"  // SYSROLES_INDEX_UUID
1:ee59de8:     };
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Constructor
1:ee59de8:      *
1:ee59de8:      * @param uuidf UUIDFactory
1:ee59de8:      * @param ef    ExecutionFactory
1:ee59de8:      * @param dvf   DataValueFactory
1:ee59de8:      */
1:ee59de8:     SYSROLESRowFactory(UUIDFactory uuidf,
1:ee59de8:                        ExecutionFactory ef,
1:ee59de8:                        DataValueFactory dvf)
1:ee59de8:     {
1:ee59de8:         super(uuidf,ef,dvf);
1:ee59de8:         initInfo(SYSROLES_COLUMN_COUNT, TABLENAME_STRING,
1:ee59de8:                  indexColumnPositions, uniqueness, uuids );
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Make a SYSROLES row
1:ee59de8:      *
1:4e3ddd7:      * @param td a role grant descriptor
1:ee59de8:      * @param parent unused
1:ee59de8:      *
1:ee59de8:      * @return  Row suitable for inserting into SYSROLES.
1:ee59de8:      *
1:ee59de8:      * @exception   StandardException thrown on failure
1:ee59de8:      */
1:ee59de8: 
1:ee59de8:     public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1:ee59de8:         throws StandardException
1:ee59de8:     {
1:ee59de8:         ExecRow                 row;
1:f717f79:         String                  oid_string = null;
1:ee59de8:         String                  roleid = null;
1:ee59de8:         String                  grantee = null;
1:ee59de8:         String                  grantor = null;
1:ee59de8:         boolean                 wao = false;
1:ee59de8:         boolean                 isdef = false;
1:ee59de8: 
1:ee59de8:         if (td != null)
1:ee59de8:         {
1:4e3ddd7:             RoleGrantDescriptor rgd = (RoleGrantDescriptor)td;
1:ee59de8: 
1:4e3ddd7:             roleid = rgd.getRoleName();
1:4e3ddd7:             grantee = rgd.getGrantee();
1:4e3ddd7:             grantor = rgd.getGrantor();
1:4e3ddd7:             wao = rgd.isWithAdminOption();
1:4e3ddd7:             isdef = rgd.isDef();
1:4e3ddd7:             UUID oid = rgd.getUUID();
1:f717f79:             oid_string = oid.toString();
1:ee59de8:         }
1:ee59de8: 
1:ee59de8:         /* Build the row to insert */
1:ee59de8:         row = getExecutionFactory().getValueRow(SYSROLES_COLUMN_COUNT);
1:ee59de8: 
1:f717f79:         /* 1st column is UUID */
1:f717f79:         row.setColumn(1, new SQLChar(oid_string));
1:ee59de8: 
1:f717f79:         /* 2nd column is ROLEID */
1:f717f79:         row.setColumn(2, new SQLVarchar(roleid));
1:ee59de8: 
1:f717f79:         /* 3rd column is GRANTEE */
1:f717f79:         row.setColumn(3, new SQLVarchar(grantee));
1:ee59de8: 
1:f717f79:         /* 4th column is GRANTOR */
1:f717f79:         row.setColumn(4, new SQLVarchar(grantor));
1:ee59de8: 
1:f717f79:         /* 5th column is WITHADMINOPTION */
1:f717f79:         row.setColumn(5, new SQLChar(wao ? "Y" : "N"));
1:f717f79: 
1:f717f79:         /* 6th column is ISDEF */
1:f717f79:         row.setColumn(6, new SQLChar(isdef ? "Y" : "N"));
1:ee59de8: 
1:ee59de8:         return row;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8: 
1:ee59de8:     ///////////////////////////////////////////////////////////////////////////
1:ee59de8:     //
1:ee59de8:     //  ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:ee59de8:     //
1:ee59de8:     ///////////////////////////////////////////////////////////////////////////
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Make an  Tuple Descriptor out of a SYSROLES row
1:ee59de8:      *
1:ee59de8:      * @param row                   a SYSROLES row
1:ee59de8:      * @param parentTupleDescriptor unused
1:ee59de8:      * @param dd                    dataDictionary
1:ee59de8:      *
1:ee59de8:      * @return  a  descriptor equivalent to a SYSROLES row
1:ee59de8:      *
1:ee59de8:      * @exception   StandardException thrown on failure
1:ee59de8:      */
1:ee59de8:     public TupleDescriptor buildDescriptor
1:ee59de8:         (ExecRow                 row,
1:ee59de8:          TupleDescriptor         parentTupleDescriptor,
1:ee59de8:          DataDictionary          dd )
1:ee59de8:         throws StandardException {
1:ee59de8: 
1:ee59de8:         DataValueDescriptor         col;
1:4e3ddd7:         RoleGrantDescriptor              descriptor;
1:f717f79:         String                      oid_string;
1:ee59de8:         String                      roleid;
1:ee59de8:         String                      grantee;
1:ee59de8:         String                      grantor;
1:ee59de8:         String                      wao;
1:ee59de8:         String                      isdef;
1:ee59de8:         DataDescriptorGenerator     ddg = dd.getDataDescriptorGenerator();
1:ee59de8: 
1:ee59de8:         if (SanityManager.DEBUG)
1:ee59de8:         {
1:ee59de8:             SanityManager.ASSERT(row.nColumns() == SYSROLES_COLUMN_COUNT,
1:ee59de8:                                  "Wrong number of columns for a SYSROLES row");
1:ee59de8:         }
1:ee59de8: 
1:4e3ddd7:         // first column is uuid of this role grant descriptor (char(36))
1:ee59de8:         col = row.getColumn(1);
1:f717f79:         oid_string = col.getString();
1:f717f79: 
1:f717f79:         // second column is roleid (varchar(128))
1:f717f79:         col = row.getColumn(2);
1:ee59de8:         roleid = col.getString();
1:ee59de8: 
1:f717f79:         // third column is grantee (varchar(128))
1:f717f79:         col = row.getColumn(3);
1:ee59de8:         grantee = col.getString();
1:ee59de8: 
1:f717f79:         // fourth column is grantor (varchar(128))
1:f717f79:         col = row.getColumn(4);
1:ee59de8:         grantor = col.getString();
1:ee59de8: 
1:f717f79:         // fifth column is withadminoption (char(1))
1:f717f79:         col = row.getColumn(5);
1:ee59de8:         wao = col.getString();
1:ee59de8: 
1:f717f79:         // sixth column is isdef (char(1))
1:f717f79:         col = row.getColumn(6);
1:ee59de8:         isdef = col.getString();
1:ee59de8: 
1:4e3ddd7:         descriptor = ddg.newRoleGrantDescriptor
1:f717f79:             (getUUIDFactory().recreateUUID(oid_string),
1:f717f79:              roleid,
1:f717f79:              grantee,
1:f717f79:              grantor,
1:f717f79:              wao.equals("Y") ? true: false,
1:f717f79:              isdef.equals("Y") ? true: false);
1:ee59de8: 
1:ee59de8:         return descriptor;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Builds a list of columns suitable for creating this Catalog.
1:ee59de8:      *
1:ee59de8:      *
1:ee59de8:      * @return array of SystemColumn suitable for making this catalog.
1:ee59de8:      */
1:ee59de8:     public SystemColumn[]   buildColumnList()
1:2a5922a:         throws StandardException
1:ee59de8:     {
1:ee59de8:         return new SystemColumn[] {
1:f717f79:             SystemColumnImpl.getUUIDColumn("UUID", false),
1:ee59de8:             SystemColumnImpl.getIdentifierColumn("ROLEID", false),
1:ee59de8:             SystemColumnImpl.getIdentifierColumn("GRANTEE", false),
1:ee59de8:             SystemColumnImpl.getIdentifierColumn("GRANTOR", false),
1:ee59de8:             SystemColumnImpl.getIndicatorColumn("WITHADMINOPTION"),
1:ee59de8:             SystemColumnImpl.getIndicatorColumn("ISDEF"),
1:ee59de8:         };
1:ee59de8:     }
1:ee59de8: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:fe8c4c2
/////////////////////////////////////////////////////////////////////////
1:     static final int SYSROLES_ISDEF = 6;
/////////////////////////////////////////////////////////////////////////
1:     static final int SYSROLES_ROLEID_COLPOS_IN_INDEX_ID_EE_OR = 1;
1:     static final int SYSROLES_GRANTEE_COLPOS_IN_INDEX_ID_EE_OR = 2;
1: 
/////////////////////////////////////////////////////////////////////////
commit:4e3ddd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
/////////////////////////////////////////////////////////////////////////
1:      * @param td a role grant descriptor
/////////////////////////////////////////////////////////////////////////
1:             RoleGrantDescriptor rgd = (RoleGrantDescriptor)td;
1:             roleid = rgd.getRoleName();
1:             grantee = rgd.getGrantee();
1:             grantor = rgd.getGrantor();
1:             wao = rgd.isWithAdminOption();
1:             isdef = rgd.isDef();
1:             UUID oid = rgd.getUUID();
/////////////////////////////////////////////////////////////////////////
1:         RoleGrantDescriptor              descriptor;
/////////////////////////////////////////////////////////////////////////
1:         // first column is uuid of this role grant descriptor (char(36))
/////////////////////////////////////////////////////////////////////////
1:         descriptor = ddg.newRoleGrantDescriptor
commit:f717f79
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
/////////////////////////////////////////////////////////////////////////
1:     private static final int SYSROLES_COLUMN_COUNT = 6;
1:     private static final int SYSROLES_ROLE_UUID = 1;
1:     private static final int SYSROLES_ROLEID = 2;
1:     private static final int SYSROLES_GRANTEE = 3;
1:     private static final int SYSROLES_GRANTOR = 4;
1:     private static final int SYSROLES_WITHADMINOPTION = 5;
0:     private static final int SYSROLES_ISDEF = 6;
1:         {SYSROLES_ROLEID, SYSROLES_ISDEF},
1:         {SYSROLES_ROLE_UUID}
1:     // (role)ID_(grant)EE_(grant)OR
1:     static final int SYSROLES_INDEX_ID_EE_OR_IDX = 0;
1:     // (role)ID_(is)DEF
1:     static final int SYSROLES_INDEX_ID_DEF_IDX = 1;
1:     // UUID
1:     static final int SYSROLES_INDEX_UUID_IDX = 2;
1: 
0:     static final int SYSROLES_ROLEID_COLPOS_IN_INDEX_ID_EE_OR = 1;
0:     static final int SYSROLES_GRANTEE_COLPOS_IN_INDEX_ID_EE_OR = 2;
1: 
1:     private static  final   boolean[]   uniqueness = {
1:         true,
1:         false, // many rows have same roleid and is not a definition
1:         true};
1:         "c065801d-0115-382c-08df-ffffe275b270", // SYSROLES_INDEX_ID_EE_OR
1:         "787c0020-0115-382c-08df-ffffe275b270", // SYSROLES_INDEX_ID_DEF
1:         "629f8094-0116-d8f9-5f97-ffffe275b270"  // SYSROLES_INDEX_UUID
/////////////////////////////////////////////////////////////////////////
1:         String                  oid_string = null;
/////////////////////////////////////////////////////////////////////////
0:             UUID oid = roleDescriptor.getUUID();
1:             oid_string = oid.toString();
1:         /* 1st column is UUID */
1:         row.setColumn(1, new SQLChar(oid_string));
1:         /* 2nd column is ROLEID */
1:         row.setColumn(2, new SQLVarchar(roleid));
1:         /* 3rd column is GRANTEE */
1:         row.setColumn(3, new SQLVarchar(grantee));
1:         /* 4th column is GRANTOR */
1:         row.setColumn(4, new SQLVarchar(grantor));
1:         /* 5th column is WITHADMINOPTION */
1:         row.setColumn(5, new SQLChar(wao ? "Y" : "N"));
1: 
1:         /* 6th column is ISDEF */
1:         row.setColumn(6, new SQLChar(isdef ? "Y" : "N"));
/////////////////////////////////////////////////////////////////////////
1:         String                      oid_string;
/////////////////////////////////////////////////////////////////////////
0:         // first column is uuid of this role descriptor (char(36))
1:         oid_string = col.getString();
1: 
1:         // second column is roleid (varchar(128))
1:         col = row.getColumn(2);
1:         // third column is grantee (varchar(128))
1:         col = row.getColumn(3);
1:         // fourth column is grantor (varchar(128))
1:         col = row.getColumn(4);
1:         // fifth column is withadminoption (char(1))
1:         col = row.getColumn(5);
1:         // sixth column is isdef (char(1))
1:         col = row.getColumn(6);
0:         descriptor = ddg.newRoleDescriptor
1:             (getUUIDFactory().recreateUUID(oid_string),
1:              roleid,
1:              grantee,
1:              grantor,
1:              wao.equals("Y") ? true: false,
1:              isdef.equals("Y") ? true: false);
/////////////////////////////////////////////////////////////////////////
1:             SystemColumnImpl.getUUIDColumn("UUID", false),
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSROLESRowFactory
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.iapi.types.SQLChar;
1: import org.apache.derby.iapi.types.SQLVarchar;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.RoleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * Factory for creating a SYSROLES row.
1:  */
1: 
1: public class SYSROLESRowFactory extends CatalogRowFactory
1: {
1:     private static final String TABLENAME_STRING = "SYSROLES";
1: 
0:     private static final int SYSROLES_COLUMN_COUNT = 5;
1:     /* Column #s for sysinfo (1 based) */
0:     private static final int SYSROLES_ROLEID = 1;
0:     private static final int SYSROLES_GRANTEE = 2;
0:     private static final int SYSROLES_GRANTOR = 3;
0:     private static final int SYSROLES_WITHADMINOPTION = 4;
0:     private static final int SYSROLES_ISDEF = 5;
1: 
0:     static final int SYSROLES_INDEX1_ID = 0;
0:     static final int SYSROLES_INDEX2_ID = 1;
1: 
1: 
1:     private static final int[][] indexColumnPositions =
1:     {
1:         {SYSROLES_ROLEID, SYSROLES_GRANTEE, SYSROLES_GRANTOR},
0:         {SYSROLES_ROLEID, SYSROLES_ISDEF}
1:     };
1: 
0:     static final int SYSROLES_ROLEID_IN_INDEX1 = 1;
0:     static final int SYSROLES_GRANTEE_IN_INDEX1 = 2;
1: 
0:     private static  final   boolean[]   uniqueness = {true,false};
1: 
1:     private static final String[] uuids = {
1:         "e03f4017-0115-382c-08df-ffffe275b270", // catalog UUID
1:         "c851401a-0115-382c-08df-ffffe275b270", // heap UUID
0:         "c065801d-0115-382c-08df-ffffe275b270", // SYSROLES_INDEX1
0:         "787c0020-0115-382c-08df-ffffe275b270"  // SYSROLES_INDEX2
1:     };
1: 
1:     /**
1:      * Constructor
1:      *
1:      * @param uuidf UUIDFactory
1:      * @param ef    ExecutionFactory
1:      * @param dvf   DataValueFactory
1:      */
1:     SYSROLESRowFactory(UUIDFactory uuidf,
1:                        ExecutionFactory ef,
1:                        DataValueFactory dvf)
1:     {
1:         super(uuidf,ef,dvf);
1:         initInfo(SYSROLES_COLUMN_COUNT, TABLENAME_STRING,
1:                  indexColumnPositions, uniqueness, uuids );
1:     }
1: 
1:     /**
1:      * Make a SYSROLES row
1:      *
0:      * @param td a role descriptor
1:      * @param parent unused
1:      *
1:      * @return  Row suitable for inserting into SYSROLES.
1:      *
1:      * @exception   StandardException thrown on failure
1:      */
1: 
1:     public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1:         throws StandardException
1:     {
1:         ExecRow                 row;
1:         String                  roleid = null;
1:         String                  grantee = null;
1:         String                  grantor = null;
1:         boolean                 wao = false;
1:         boolean                 isdef = false;
1: 
1:         if (td != null)
1:         {
0:             RoleDescriptor roleDescriptor = (RoleDescriptor)td;
1: 
0:             roleid = roleDescriptor.getRoleName();
0:             grantee = roleDescriptor.getGrantee();
0:             grantor = roleDescriptor.getGrantor();
0:             wao = roleDescriptor.isWithAdminOption();
0:             isdef = roleDescriptor.isDef();
1:         }
1: 
1:         /* Build the row to insert */
1:         row = getExecutionFactory().getValueRow(SYSROLES_COLUMN_COUNT);
1: 
0:         /* 1st column is ROLEID */
0:         row.setColumn(1, new SQLVarchar(roleid));
1: 
0:         /* 2nd column is GRANTEE */
0:         row.setColumn(2, new SQLVarchar(grantee));
1: 
0:         /* 3rd column is GRANTOR */
0:         row.setColumn(3, new SQLVarchar(grantor));
1: 
0:         /* 4th column is WITHADMINOPTION */
0:         row.setColumn(4, new SQLChar(wao ? "Y" : "N"));
1: 
0:         /* 4th column is ISDEF */
0:         row.setColumn(5, new SQLChar(isdef ? "Y" : "N"));
1: 
1:         return row;
1:     }
1: 
1: 
1:     ///////////////////////////////////////////////////////////////////////////
1:     //
1:     //  ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:     //
1:     ///////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Make an  Tuple Descriptor out of a SYSROLES row
1:      *
1:      * @param row                   a SYSROLES row
1:      * @param parentTupleDescriptor unused
1:      * @param dd                    dataDictionary
1:      *
1:      * @return  a  descriptor equivalent to a SYSROLES row
1:      *
1:      * @exception   StandardException thrown on failure
1:      */
1:     public TupleDescriptor buildDescriptor
1:         (ExecRow                 row,
1:          TupleDescriptor         parentTupleDescriptor,
1:          DataDictionary          dd )
1:         throws StandardException {
1: 
1:         DataValueDescriptor         col;
0:         RoleDescriptor              descriptor;
1:         String                      roleid;
1:         String                      grantee;
1:         String                      grantor;
1:         String                      wao;
1:         String                      isdef;
1:         DataDescriptorGenerator     ddg = dd.getDataDescriptorGenerator();
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(row.nColumns() == SYSROLES_COLUMN_COUNT,
1:                                  "Wrong number of columns for a SYSROLES row");
1:         }
1: 
0:         // first column is roleid (varchar(128))
1:         col = row.getColumn(1);
1:         roleid = col.getString();
1: 
0:         // second column is grantee (varchar(128))
0:         col = row.getColumn(2);
1:         grantee = col.getString();
1: 
0:         // third column is grantor (varchar(128))
0:         col = row.getColumn(3);
1:         grantor = col.getString();
1: 
0:         // fourth column is withadminoption (char(1))
0:         col = row.getColumn(4);
1:         wao = col.getString();
1: 
0:         // fifth column is isdef (char(1))
0:         col = row.getColumn(5);
1:         isdef = col.getString();
1: 
0:         descriptor = ddg.newRoleDescriptor(roleid,
0:                                            grantee,
0:                                            grantor,
0:                                            wao.equals("Y") ? true: false,
0:                                            isdef.equals("Y") ? true: false);
1: 
1:         return descriptor;
1:     }
1: 
1:     /**
1:      * Builds a list of columns suitable for creating this Catalog.
1:      *
1:      *
1:      * @return array of SystemColumn suitable for making this catalog.
1:      */
1:     public SystemColumn[]   buildColumnList()
1:     {
1:         return new SystemColumn[] {
1:             SystemColumnImpl.getIdentifierColumn("ROLEID", false),
1:             SystemColumnImpl.getIdentifierColumn("GRANTEE", false),
1:             SystemColumnImpl.getIdentifierColumn("GRANTOR", false),
1:             SystemColumnImpl.getIndicatorColumn("WITHADMINOPTION"),
1:             SystemColumnImpl.getIndicatorColumn("ISDEF"),
1:         };
1:     }
1: }
============================================================================