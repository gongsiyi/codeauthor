1:358b3c8: package org.apache.derbyTesting.functionTests.tests.lang;
1:358b3c8: 
1:358b3c8: import java.sql.Connection;
1:358b3c8: import java.sql.PreparedStatement;
1:358b3c8: import java.sql.ResultSet;
1:358b3c8: import java.sql.ResultSetMetaData;
1:358b3c8: import java.sql.SQLException;
1:358b3c8: import java.sql.Statement;
1:358b3c8: import junit.framework.Test;
1:358b3c8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:358b3c8: import org.apache.derbyTesting.junit.JDBC;
1:358b3c8: import org.apache.derbyTesting.junit.TestConfiguration;
1:358b3c8: 
1:358b3c8: /**
1:358b3c8:  * Test for CURRENT SCHEMA and optional DB2 compatible SET SCHEMA statement
1:358b3c8:  * test SET SCHEMA syntax variations syntax is:
1:358b3c8:  * <p>
1:358b3c8:  * <pre>
1:358b3c8:  *    SET [CURRENT] SCHEMA [=] (<identifier> | USER | ? | '<string>')
1:358b3c8:  *    SET CURRENT SQLID [=] (<identifier> | USER | ? | '<string>')
1:358b3c8:  * </pre>
1:358b3c8:  */
1:358b3c8: public final class CurrentSchemaTest extends BaseJDBCTestCase {
1:358b3c8: 
1:358b3c8:     /**
1:358b3c8:      * Public constructor required for running test as standalone JUnit.
1:358b3c8:      * @param name test name
1:358b3c8:      */
1:358b3c8:     public CurrentSchemaTest(String name)
1:358b3c8:     {
1:358b3c8:         super(name);
1:358b3c8:     }
1:358b3c8: 
1:358b3c8:     public static Test suite()
1:358b3c8:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("CurrentSchemaTest");
1:358b3c8:         suite.addTest(TestConfiguration.defaultSuite(CurrentSchemaTest.class));
1:358b3c8:         return suite;
1:358b3c8:     }
1:358b3c8: 
1:358b3c8:     public void testCurrentSchema() throws Exception
1:358b3c8:     {
1:358b3c8:         ResultSet rs;
1:358b3c8:         ResultSetMetaData rsmd;
1:358b3c8: 
1:358b3c8:         PreparedStatement pSt;
1:358b3c8:         final Statement st = createStatement();
1:358b3c8: 
1:358b3c8:         String [][] expRS;
1:358b3c8:         String [] expColNames;
1:358b3c8: 
1:358b3c8:         assertCurrentSchema(st, "APP");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema sys");
1:358b3c8:         assertCurrentSchema(st, "SYS");
1:358b3c8: 
1:358b3c8:         assertStatementError("X0Y68", st, "create schema app");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set current schema app");
1:358b3c8:         assertCurrentSchema(st, "APP");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema = sys");
1:358b3c8:         assertCurrentSchema(st, "SYS");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set current schema = app");
1:358b3c8:         assertCurrentSchema(st, "APP");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema sys");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // user should use default schema if no user set
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("set schema user");
1:358b3c8:         assertCurrentSchema(st, "APP");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // see what user does when there is a user
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("create schema judy");
1:358b3c8:         Connection judy = openUserConnection("judy");
1:358b3c8:         Statement jst = judy.createStatement();
1:358b3c8: 
1:358b3c8:         jst.executeUpdate("set schema app");
1:358b3c8:         assertCurrentSchema(jst, "APP");
1:358b3c8: 
1:358b3c8:         jst.executeUpdate("set schema user");
1:358b3c8:         assertCurrentSchema(jst, "JUDY");
1:358b3c8: 
1:358b3c8:         judy.close();
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // check for default
1:358b3c8:         //
1:358b3c8:         assertCurrentSchema(st, "APP");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Check that current sqlid works as a synonym
1:358b3c8:         //
1:358b3c8:         rs = st.executeQuery("values current sqlid");
1:358b3c8:         expRS = new String [][]{{"APP"}};
1:358b3c8:         JDBC.assertFullResultSet(rs, expRS, true);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Check that sqlid still works as an identifer
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("create table sqlid(sqlid int)");
1:358b3c8:         st.executeUpdate("drop table sqlid");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Check that set current sqlid works
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("set current sqlid judy");
1:358b3c8:         assertCurrentSchema(st, "JUDY");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Check that set sqlid doesn't work (not DB2 compatible) - should get
1:358b3c8:         // error
1:358b3c8:         assertStatementError("42X01", st, "set sqlid judy");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Change schema and make sure that the current schema is correct
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("set schema sys");
1:358b3c8:         assertCurrentSchema(st, "SYS");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema app");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Try using ? outside of a prepared statement
1:358b3c8:         //
1:358b3c8:         assertStatementError("07000", st, "set schema ?");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Use set schema in a prepared statement
1:358b3c8:         //
1:358b3c8:         setAutoCommit(false);
1:358b3c8: 
1:358b3c8:         pSt = prepareStatement("set schema ?");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Should get error with no parameters
1:358b3c8:         //
1:358b3c8:         assertStatementError("07000", pSt);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Should get error if null is used
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("create table t1(name varchar(128))");
1:358b3c8:         st.executeUpdate("insert into t1 values(null)");
1:358b3c8:         rs = st.executeQuery("select name from t1");
1:358b3c8:         rs.next();
1:358b3c8:         pSt.setObject(1, rs.getObject(1));
1:358b3c8:         assertStatementError("42815", pSt);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Should get error if schema doesn't exist
1:358b3c8:         //
1:358b3c8:         rs = st.executeQuery("values('notthere')");
1:358b3c8:         rs.next();
1:358b3c8:         pSt.setObject(1, rs.getObject(1));
1:358b3c8:         assertStatementError("42Y07", pSt);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Should error with empty string
1:358b3c8:         //
1:358b3c8:         rs = st.executeQuery("values('')");
1:358b3c8:         rs.next();
1:358b3c8:         pSt.setObject(1, rs.getObject(1));
1:358b3c8:         assertStatementError("42Y07", pSt);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Should get error if wrong case used
1:358b3c8:         //
1:358b3c8:         rs = st.executeQuery("values('sys')");
1:358b3c8:         rs.next();
1:358b3c8:         pSt.setObject(1, rs.getObject(1));
1:358b3c8:         assertStatementError("42Y07", pSt);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Should get error if too many parameters
1:358b3c8:         //
1:358b3c8:         rs = st.executeQuery("values('sys','app')");
1:358b3c8:         rs.next();
1:358b3c8:         rsmd = rs.getMetaData();
1:358b3c8: 
1:358b3c8:         try {
1:358b3c8:             for (int i = 1; i <= rsmd.getColumnCount(); i++) {
1:358b3c8:                 pSt.setObject(i, rs.getObject(i));
1:358b3c8:             }
1:358b3c8:         } catch (SQLException e) {
1:358b3c8:             if (usingDerbyNetClient()) {
1:358b3c8:                 assertSQLState("XCL14", e);
1:358b3c8:             } else {
1:358b3c8:                 assertSQLState("XCL13", e);
1:358b3c8:             }
1:358b3c8:         }
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // USER should return an error as it is interpreted as a
1:358b3c8:         // string constant not an identifier
1:358b3c8:         //
1:358b3c8:         rs = st.executeQuery("values('USER')");
1:358b3c8:         rs.next();
1:358b3c8:         pSt.setObject(1, rs.getObject(1));
1:358b3c8:         assertStatementError("42Y07", pSt);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Try positive test
1:358b3c8:         //
1:358b3c8:         rs = st.executeQuery("values('SYS')");
1:358b3c8:         rs.next();
1:358b3c8:         pSt.setObject(1, rs.getObject(1));
1:358b3c8:         assertUpdateCount(pSt, 0);
1:358b3c8:         assertCurrentSchema(st, "SYS");
1:358b3c8: 
1:358b3c8:         rollback();
1:358b3c8:         setAutoCommit(true);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Try current schema in a number of statements types
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("set schema app");
1:358b3c8:         st.executeUpdate("create table t1 ( a varchar(128))");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // insert
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("insert into t1 values (current schema)");
1:358b3c8:         rs = st.executeQuery("select * from t1");
1:358b3c8:         expColNames = new String [] {"A"};
1:358b3c8:         JDBC.assertColumnNames(rs, expColNames);
1:358b3c8:         expRS = new String [][]{{"APP"}};
1:358b3c8:         JDBC.assertFullResultSet(rs, expRS, true);
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema judy");
1:358b3c8:         st.executeUpdate("insert into app.t1 values (current schema)");
1:358b3c8:         rs = st.executeQuery("select * from app.t1");
1:358b3c8:         expColNames = new String [] {"A"};
1:358b3c8:         JDBC.assertColumnNames(rs, expColNames);
1:358b3c8:         expRS = new String [][]
1:358b3c8:         {
1:358b3c8:             {"APP"},
1:358b3c8:             {"JUDY"}
1:358b3c8:         };
1:358b3c8: 
1:358b3c8:         JDBC.assertFullResultSet(rs, expRS, true);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // delete where clause
1:358b3c8:         //
1:358b3c8:         assertUpdateCount(st, 1,"delete from app.t1 where a = current schema");
1:358b3c8:         rs = st.executeQuery("select * from app.t1");
1:358b3c8:         expColNames = new String [] {"A"};
1:358b3c8:         JDBC.assertColumnNames(rs, expColNames);
1:358b3c8: 
1:358b3c8:         expRS = new String [][]
1:358b3c8:         {
1:358b3c8:             {"APP"}
1:358b3c8:         };
1:358b3c8: 
1:358b3c8:         JDBC.assertFullResultSet(rs, expRS, true);
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set current schema app");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Target list
1:358b3c8:         //
1:358b3c8:         rs = st.executeQuery("select current schema from t1");
1:358b3c8: 
1:358b3c8:         expColNames = new String [] {"1"};
1:358b3c8:         JDBC.assertColumnNames(rs, expColNames);
1:358b3c8: 
1:358b3c8:         expRS = new String [][]
1:358b3c8:         {
1:358b3c8:             {"APP"}
1:358b3c8:         };
1:358b3c8: 
1:358b3c8:         JDBC.assertFullResultSet(rs, expRS, true);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // where clause
1:358b3c8:         //
1:358b3c8:         rs = st.executeQuery("select * from t1 where a = current schema");
1:358b3c8: 
1:358b3c8:         expColNames = new String [] {"A"};
1:358b3c8:         JDBC.assertColumnNames(rs, expColNames);
1:358b3c8: 
1:358b3c8:         expRS = new String [][]{{"APP"}};
1:358b3c8:         JDBC.assertFullResultSet(rs, expRS, true);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // update statement
1:358b3c8:         //
1:358b3c8:         assertUpdateCount(st, 1, "delete from t1");
1:358b3c8:         st.executeUpdate("insert into t1 values ('test')");
1:358b3c8:         rs = st.executeQuery("select * from t1");
1:358b3c8: 
1:358b3c8:         expColNames = new String [] {"A"};
1:358b3c8:         JDBC.assertColumnNames(rs, expColNames);
1:358b3c8: 
1:358b3c8:         expRS = new String [][]{{"test"}};
1:358b3c8:         JDBC.assertFullResultSet(rs, expRS, true);
1:358b3c8: 
1:358b3c8:         assertUpdateCount(st, 1, "update t1 set a = current schema");
1:358b3c8: 
1:358b3c8:         rs = st.executeQuery("select * from t1");
1:358b3c8:         expColNames = new String [] {"A"};
1:358b3c8:         JDBC.assertColumnNames(rs, expColNames);
1:358b3c8: 
1:358b3c8:         expRS = new String [][]{{"APP"}};
1:358b3c8:         JDBC.assertFullResultSet(rs, expRS, true);
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema judy");
1:358b3c8:         assertUpdateCount(st, 1, "update app.t1 set a = current schema");
1:358b3c8: 
1:358b3c8:         rs = st.executeQuery("select * from app.t1");
1:358b3c8: 
1:358b3c8:         expColNames = new String [] {"A"};
1:358b3c8:         JDBC.assertColumnNames(rs, expColNames);
1:358b3c8: 
1:358b3c8:         expRS = new String [][]{{"JUDY"}};
1:358b3c8:         JDBC.assertFullResultSet(rs, expRS, true);
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema app");
1:358b3c8:         st.executeUpdate("drop table t1");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Column default
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("set schema APP");
1:358b3c8: 
1:358b3c8:         st.executeUpdate(
1:358b3c8:             " create table t1 ( a int, b varchar(128) default "
1:358b3c8:             + "current schema)");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("insert into t1 (a) values (1)");
1:358b3c8:         st.executeUpdate("set schema SYS");
1:358b3c8:         st.executeUpdate("insert into app.t1 (a) values (1)");
1:358b3c8:         st.executeUpdate("set schema judy");
1:358b3c8:         st.executeUpdate("insert into app.t1 (a) values (1)");
1:358b3c8:         st.executeUpdate("set schema APP");
1:358b3c8: 
1:358b3c8:         rs = st.executeQuery("select * from t1");
1:358b3c8: 
1:358b3c8:         expColNames = new String [] {"A", "B"};
1:358b3c8:         JDBC.assertColumnNames(rs, expColNames);
1:358b3c8: 
1:358b3c8:         expRS = new String [][]
1:358b3c8:         {
1:358b3c8:             {"1", "APP"},
1:358b3c8:             {"1", "SYS"},
1:358b3c8:             {"1", "JUDY"}
1:358b3c8:         };
1:358b3c8: 
1:358b3c8:         JDBC.assertFullResultSet(rs, expRS, true);
1:358b3c8: 
1:358b3c8:         st.executeUpdate("drop table t1");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Check constraint - this should fail
1:358b3c8:         //
1:358b3c8:         assertStatementError("42Y39", st,
1:358b3c8:             "create table t1 ( a varchar(128), check (a = "
1:358b3c8:             + "current schema))");
1:358b3c8: 
1:358b3c8:         assertStatementError("42Y39", st,
1:358b3c8:             " create table t1 ( a varchar(128), check (a = "
1:358b3c8:             + "current sqlid))");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Try mix case
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("create schema \"MiXCase\"");
1:358b3c8:         st.executeUpdate("set schema \"MiXCase\"");
1:358b3c8:         assertCurrentSchema(st, "MiXCase");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema app");
1:358b3c8:         assertCurrentSchema(st, "APP");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema 'MiXCase'");
1:358b3c8:         assertCurrentSchema(st, "MiXCase");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Following should get error - schema not found
1:358b3c8:         //
1:358b3c8:         assertStatementError("42Y07", st, "set schema 'MIXCASE'");
1:358b3c8:         assertStatementError("42Y07", st, "set schema mixcase");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Try long schema names (maximum schema identifier length
1:358b3c8:         // has been changed to 30 as part of DB2 compatibility work)
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("create schema t23456789012345678901234567890");
1:358b3c8:         assertCurrentSchema(st, "MiXCase");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema app");
1:358b3c8:         assertCurrentSchema(st, "APP");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema t23456789012345678901234567890");
1:358b3c8:         assertCurrentSchema(st, "T23456789012345678901234567890");
1:358b3c8: 
1:358b3c8:         st.executeUpdate(" set schema app");
1:358b3c8:         assertCurrentSchema(st, "APP");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema 'T23456789012345678901234567890'");
1:358b3c8:         assertCurrentSchema(st, "T23456789012345678901234567890");
1:358b3c8: 
1:358b3c8:         st.executeUpdate("set schema app");
1:358b3c8:         assertCurrentSchema(st, "APP");
1:358b3c8: 
1:358b3c8:         setAutoCommit(false);
1:358b3c8: 
1:358b3c8:         pSt = prepareStatement("set schema ?");
1:358b3c8:         rs = st.executeQuery("values('T23456789012345678901234567890')");
1:358b3c8:         rs.next();
1:358b3c8:         pSt.setObject(1, rs.getObject(1));
1:358b3c8:         assertUpdateCount(pSt, 0);
1:358b3c8: 
1:358b3c8:         assertCurrentSchema(st, "T23456789012345678901234567890");
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // The following should fail - 129 length
1:358b3c8:         //
1:358b3c8:         assertStatementError("42622", st,
1:358b3c8:             "create schema "
1:358b3c8:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:358b3c8:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:358b3c8:             + "TTTTTTTTTTTTTTTTTTTTTTTTT");
1:358b3c8: 
1:358b3c8:         assertStatementError("42622", st,
1:358b3c8:             " set schema "
1:358b3c8:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:358b3c8:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:358b3c8:             + "TTTTTTTTTTTTTTTTTTTTTTTTT");
1:358b3c8: 
1:358b3c8:         assertStatementError("42622", st,
1:358b3c8:             " set schema "
1:358b3c8:             + "'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:358b3c8:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:358b3c8:             + "TTTTTTTTTTTTTTTTTTTTTTTTTT'");
1:358b3c8: 
1:358b3c8:         rs = st.executeQuery(
1:358b3c8:                 "values('TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:358b3c8:                 + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:358b3c8:                 + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT')");
1:358b3c8:         rs.next();
1:358b3c8:         pSt.setObject(1, rs.getObject(1));
1:358b3c8:         assertStatementError("42815", pSt);
1:358b3c8: 
1:358b3c8:         rollback();
1:358b3c8:         setAutoCommit(true);
1:358b3c8: 
1:358b3c8:         //
1:358b3c8:         // Clean up
1:358b3c8:         //
1:358b3c8:         st.executeUpdate("drop schema judy restrict");
1:358b3c8: 
1:358b3c8:         assertStatementError("42622", st,
1:358b3c8:             " drop schema "
1:358b3c8:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:358b3c8:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:358b3c8:             + "TTTTTTTTTTTTTTTTTTTTTTTTT restrict");
1:358b3c8: 
1:358b3c8:         rollback();
1:358b3c8:         st.close();
1:358b3c8:     }
1:358b3c8: 
1:358b3c8:     private void assertCurrentSchema(Statement st, String schema)
1:358b3c8:         throws SQLException {
1:358b3c8: 
1:358b3c8:         JDBC.assertFullResultSet(
1:358b3c8:             st.executeQuery("values current schema"),
1:358b3c8:             new String [][]{{schema}},
1:358b3c8:             true);
1:358b3c8:     }
1:358b3c8: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("CurrentSchemaTest");
commit:358b3c8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test for CURRENT SCHEMA and optional DB2 compatible SET SCHEMA statement
1:  * test SET SCHEMA syntax variations syntax is:
1:  * <p>
1:  * <pre>
1:  *    SET [CURRENT] SCHEMA [=] (<identifier> | USER | ? | '<string>')
1:  *    SET CURRENT SQLID [=] (<identifier> | USER | ? | '<string>')
1:  * </pre>
1:  */
1: public final class CurrentSchemaTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      * @param name test name
1:      */
1:     public CurrentSchemaTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("CurrentSchemaTest");
1:         suite.addTest(TestConfiguration.defaultSuite(CurrentSchemaTest.class));
1:         return suite;
1:     }
1: 
1:     public void testCurrentSchema() throws Exception
1:     {
1:         ResultSet rs;
1:         ResultSetMetaData rsmd;
1: 
1:         PreparedStatement pSt;
1:         final Statement st = createStatement();
1: 
1:         String [][] expRS;
1:         String [] expColNames;
1: 
1:         assertCurrentSchema(st, "APP");
1: 
1:         st.executeUpdate("set schema sys");
1:         assertCurrentSchema(st, "SYS");
1: 
1:         assertStatementError("X0Y68", st, "create schema app");
1: 
1:         st.executeUpdate("set current schema app");
1:         assertCurrentSchema(st, "APP");
1: 
1:         st.executeUpdate("set schema = sys");
1:         assertCurrentSchema(st, "SYS");
1: 
1:         st.executeUpdate("set current schema = app");
1:         assertCurrentSchema(st, "APP");
1: 
1:         st.executeUpdate("set schema sys");
1: 
1:         //
1:         // user should use default schema if no user set
1:         //
1:         st.executeUpdate("set schema user");
1:         assertCurrentSchema(st, "APP");
1: 
1:         //
1:         // see what user does when there is a user
1:         //
1:         st.executeUpdate("create schema judy");
1:         Connection judy = openUserConnection("judy");
1:         Statement jst = judy.createStatement();
1: 
1:         jst.executeUpdate("set schema app");
1:         assertCurrentSchema(jst, "APP");
1: 
1:         jst.executeUpdate("set schema user");
1:         assertCurrentSchema(jst, "JUDY");
1: 
1:         judy.close();
1: 
1:         //
1:         // check for default
1:         //
1:         assertCurrentSchema(st, "APP");
1: 
1:         //
1:         // Check that current sqlid works as a synonym
1:         //
1:         rs = st.executeQuery("values current sqlid");
1:         expRS = new String [][]{{"APP"}};
1:         JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:         //
1:         // Check that sqlid still works as an identifer
1:         //
1:         st.executeUpdate("create table sqlid(sqlid int)");
1:         st.executeUpdate("drop table sqlid");
1: 
1:         //
1:         // Check that set current sqlid works
1:         //
1:         st.executeUpdate("set current sqlid judy");
1:         assertCurrentSchema(st, "JUDY");
1: 
1:         //
1:         // Check that set sqlid doesn't work (not DB2 compatible) - should get
1:         // error
1:         assertStatementError("42X01", st, "set sqlid judy");
1: 
1:         //
1:         // Change schema and make sure that the current schema is correct
1:         //
1:         st.executeUpdate("set schema sys");
1:         assertCurrentSchema(st, "SYS");
1: 
1:         st.executeUpdate("set schema app");
1: 
1:         //
1:         // Try using ? outside of a prepared statement
1:         //
1:         assertStatementError("07000", st, "set schema ?");
1: 
1:         //
1:         // Use set schema in a prepared statement
1:         //
1:         setAutoCommit(false);
1: 
1:         pSt = prepareStatement("set schema ?");
1: 
1:         //
1:         // Should get error with no parameters
1:         //
1:         assertStatementError("07000", pSt);
1: 
1:         //
1:         // Should get error if null is used
1:         //
1:         st.executeUpdate("create table t1(name varchar(128))");
1:         st.executeUpdate("insert into t1 values(null)");
1:         rs = st.executeQuery("select name from t1");
1:         rs.next();
1:         pSt.setObject(1, rs.getObject(1));
1:         assertStatementError("42815", pSt);
1: 
1:         //
1:         // Should get error if schema doesn't exist
1:         //
1:         rs = st.executeQuery("values('notthere')");
1:         rs.next();
1:         pSt.setObject(1, rs.getObject(1));
1:         assertStatementError("42Y07", pSt);
1: 
1:         //
1:         // Should error with empty string
1:         //
1:         rs = st.executeQuery("values('')");
1:         rs.next();
1:         pSt.setObject(1, rs.getObject(1));
1:         assertStatementError("42Y07", pSt);
1: 
1:         //
1:         // Should get error if wrong case used
1:         //
1:         rs = st.executeQuery("values('sys')");
1:         rs.next();
1:         pSt.setObject(1, rs.getObject(1));
1:         assertStatementError("42Y07", pSt);
1: 
1:         //
1:         // Should get error if too many parameters
1:         //
1:         rs = st.executeQuery("values('sys','app')");
1:         rs.next();
1:         rsmd = rs.getMetaData();
1: 
1:         try {
1:             for (int i = 1; i <= rsmd.getColumnCount(); i++) {
1:                 pSt.setObject(i, rs.getObject(i));
1:             }
1:         } catch (SQLException e) {
1:             if (usingDerbyNetClient()) {
1:                 assertSQLState("XCL14", e);
1:             } else {
1:                 assertSQLState("XCL13", e);
1:             }
1:         }
1: 
1:         //
1:         // USER should return an error as it is interpreted as a
1:         // string constant not an identifier
1:         //
1:         rs = st.executeQuery("values('USER')");
1:         rs.next();
1:         pSt.setObject(1, rs.getObject(1));
1:         assertStatementError("42Y07", pSt);
1: 
1:         //
1:         // Try positive test
1:         //
1:         rs = st.executeQuery("values('SYS')");
1:         rs.next();
1:         pSt.setObject(1, rs.getObject(1));
1:         assertUpdateCount(pSt, 0);
1:         assertCurrentSchema(st, "SYS");
1: 
1:         rollback();
1:         setAutoCommit(true);
1: 
1:         //
1:         // Try current schema in a number of statements types
1:         //
1:         st.executeUpdate("set schema app");
1:         st.executeUpdate("create table t1 ( a varchar(128))");
1: 
1:         //
1:         // insert
1:         //
1:         st.executeUpdate("insert into t1 values (current schema)");
1:         rs = st.executeQuery("select * from t1");
1:         expColNames = new String [] {"A"};
1:         JDBC.assertColumnNames(rs, expColNames);
1:         expRS = new String [][]{{"APP"}};
1:         JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:         st.executeUpdate("set schema judy");
1:         st.executeUpdate("insert into app.t1 values (current schema)");
1:         rs = st.executeQuery("select * from app.t1");
1:         expColNames = new String [] {"A"};
1:         JDBC.assertColumnNames(rs, expColNames);
1:         expRS = new String [][]
1:         {
1:             {"APP"},
1:             {"JUDY"}
1:         };
1: 
1:         JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:         //
1:         // delete where clause
1:         //
1:         assertUpdateCount(st, 1,"delete from app.t1 where a = current schema");
1:         rs = st.executeQuery("select * from app.t1");
1:         expColNames = new String [] {"A"};
1:         JDBC.assertColumnNames(rs, expColNames);
1: 
1:         expRS = new String [][]
1:         {
1:             {"APP"}
1:         };
1: 
1:         JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:         st.executeUpdate("set current schema app");
1: 
1:         //
1:         // Target list
1:         //
1:         rs = st.executeQuery("select current schema from t1");
1: 
1:         expColNames = new String [] {"1"};
1:         JDBC.assertColumnNames(rs, expColNames);
1: 
1:         expRS = new String [][]
1:         {
1:             {"APP"}
1:         };
1: 
1:         JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:         //
1:         // where clause
1:         //
1:         rs = st.executeQuery("select * from t1 where a = current schema");
1: 
1:         expColNames = new String [] {"A"};
1:         JDBC.assertColumnNames(rs, expColNames);
1: 
1:         expRS = new String [][]{{"APP"}};
1:         JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:         //
1:         // update statement
1:         //
1:         assertUpdateCount(st, 1, "delete from t1");
1:         st.executeUpdate("insert into t1 values ('test')");
1:         rs = st.executeQuery("select * from t1");
1: 
1:         expColNames = new String [] {"A"};
1:         JDBC.assertColumnNames(rs, expColNames);
1: 
1:         expRS = new String [][]{{"test"}};
1:         JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:         assertUpdateCount(st, 1, "update t1 set a = current schema");
1: 
1:         rs = st.executeQuery("select * from t1");
1:         expColNames = new String [] {"A"};
1:         JDBC.assertColumnNames(rs, expColNames);
1: 
1:         expRS = new String [][]{{"APP"}};
1:         JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:         st.executeUpdate("set schema judy");
1:         assertUpdateCount(st, 1, "update app.t1 set a = current schema");
1: 
1:         rs = st.executeQuery("select * from app.t1");
1: 
1:         expColNames = new String [] {"A"};
1:         JDBC.assertColumnNames(rs, expColNames);
1: 
1:         expRS = new String [][]{{"JUDY"}};
1:         JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:         st.executeUpdate("set schema app");
1:         st.executeUpdate("drop table t1");
1: 
1:         //
1:         // Column default
1:         //
1:         st.executeUpdate("set schema APP");
1: 
1:         st.executeUpdate(
1:             " create table t1 ( a int, b varchar(128) default "
1:             + "current schema)");
1: 
1:         st.executeUpdate("insert into t1 (a) values (1)");
1:         st.executeUpdate("set schema SYS");
1:         st.executeUpdate("insert into app.t1 (a) values (1)");
1:         st.executeUpdate("set schema judy");
1:         st.executeUpdate("insert into app.t1 (a) values (1)");
1:         st.executeUpdate("set schema APP");
1: 
1:         rs = st.executeQuery("select * from t1");
1: 
1:         expColNames = new String [] {"A", "B"};
1:         JDBC.assertColumnNames(rs, expColNames);
1: 
1:         expRS = new String [][]
1:         {
1:             {"1", "APP"},
1:             {"1", "SYS"},
1:             {"1", "JUDY"}
1:         };
1: 
1:         JDBC.assertFullResultSet(rs, expRS, true);
1: 
1:         st.executeUpdate("drop table t1");
1: 
1:         //
1:         // Check constraint - this should fail
1:         //
1:         assertStatementError("42Y39", st,
1:             "create table t1 ( a varchar(128), check (a = "
1:             + "current schema))");
1: 
1:         assertStatementError("42Y39", st,
1:             " create table t1 ( a varchar(128), check (a = "
1:             + "current sqlid))");
1: 
1:         //
1:         // Try mix case
1:         //
1:         st.executeUpdate("create schema \"MiXCase\"");
1:         st.executeUpdate("set schema \"MiXCase\"");
1:         assertCurrentSchema(st, "MiXCase");
1: 
1:         st.executeUpdate("set schema app");
1:         assertCurrentSchema(st, "APP");
1: 
1:         st.executeUpdate("set schema 'MiXCase'");
1:         assertCurrentSchema(st, "MiXCase");
1: 
1:         //
1:         // Following should get error - schema not found
1:         //
1:         assertStatementError("42Y07", st, "set schema 'MIXCASE'");
1:         assertStatementError("42Y07", st, "set schema mixcase");
1: 
1:         //
1:         // Try long schema names (maximum schema identifier length
1:         // has been changed to 30 as part of DB2 compatibility work)
1:         //
1:         st.executeUpdate("create schema t23456789012345678901234567890");
1:         assertCurrentSchema(st, "MiXCase");
1: 
1:         st.executeUpdate("set schema app");
1:         assertCurrentSchema(st, "APP");
1: 
1:         st.executeUpdate("set schema t23456789012345678901234567890");
1:         assertCurrentSchema(st, "T23456789012345678901234567890");
1: 
1:         st.executeUpdate(" set schema app");
1:         assertCurrentSchema(st, "APP");
1: 
1:         st.executeUpdate("set schema 'T23456789012345678901234567890'");
1:         assertCurrentSchema(st, "T23456789012345678901234567890");
1: 
1:         st.executeUpdate("set schema app");
1:         assertCurrentSchema(st, "APP");
1: 
1:         setAutoCommit(false);
1: 
1:         pSt = prepareStatement("set schema ?");
1:         rs = st.executeQuery("values('T23456789012345678901234567890')");
1:         rs.next();
1:         pSt.setObject(1, rs.getObject(1));
1:         assertUpdateCount(pSt, 0);
1: 
1:         assertCurrentSchema(st, "T23456789012345678901234567890");
1: 
1:         //
1:         // The following should fail - 129 length
1:         //
1:         assertStatementError("42622", st,
1:             "create schema "
1:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:             + "TTTTTTTTTTTTTTTTTTTTTTTTT");
1: 
1:         assertStatementError("42622", st,
1:             " set schema "
1:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:             + "TTTTTTTTTTTTTTTTTTTTTTTTT");
1: 
1:         assertStatementError("42622", st,
1:             " set schema "
1:             + "'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:             + "TTTTTTTTTTTTTTTTTTTTTTTTTT'");
1: 
1:         rs = st.executeQuery(
1:                 "values('TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:                 + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:                 + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT')");
1:         rs.next();
1:         pSt.setObject(1, rs.getObject(1));
1:         assertStatementError("42815", pSt);
1: 
1:         rollback();
1:         setAutoCommit(true);
1: 
1:         //
1:         // Clean up
1:         //
1:         st.executeUpdate("drop schema judy restrict");
1: 
1:         assertStatementError("42622", st,
1:             " drop schema "
1:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:             + "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
1:             + "TTTTTTTTTTTTTTTTTTTTTTTTT restrict");
1: 
1:         rollback();
1:         st.close();
1:     }
1: 
1:     private void assertCurrentSchema(Statement st, String schema)
1:         throws SQLException {
1: 
1:         JDBC.assertFullResultSet(
1:             st.executeQuery("values current schema"),
1:             new String [][]{{schema}},
1:             true);
1:     }
1: }
============================================================================