1:b647b38: /*
2:b647b38: 
1:b647b38:    Derby - Class org.apache.derbyTesting.functionTests.store.LogChecksumSetup
1:b647b38: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:b647b38: 
1:b647b38:       http://www.apache.org/licenses/LICENSE-2.0
1:b647b38: 
1:b647b38:    Unless required by applicable law or agreed to in writing, software
1:b647b38:    distributed under the License is distributed on an "AS IS" BASIS,
1:b647b38:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b647b38:    See the License for the specific language governing permissions and
1:b647b38:    limitations under the License.
1:b647b38: 
1:b647b38:  */
1:b647b38: 
1:b647b38: package org.apache.derbyTesting.functionTests.tests.store;
1:b647b38: 
1:b647b38: import java.io.File;
1:b647b38: import java.sql.Connection;
1:b647b38: import java.sql.SQLException;
1:b647b38: import java.sql.Statement;
1:b647b38: import java.util.Properties;
1:b647b38: 
1:b647b38: import javax.sql.DataSource;
1:b647b38: 
1:b647b38: import org.apache.derby.tools.ij;
1:b647b38: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:b647b38: 
1:b647b38: /*
1:b647b38:  * This class is a test where you are not able to create the lock file
1:b647b38:  * when booting an existing database.  The database will then become
1:b647b38:  * read-only.  The tests first creates a database and then shutdowns,
1:b647b38:  * turns off write access to the database directory and then boots the
1:b647b38:  * database again.  A non-default log directory is used since that
1:b647b38:  * uncovered a bug (DERBY-555).  (logDevice is set in the
1:b647b38:  * _app.properties file)
1:b647b38:  *
1:b647b38:  * NB! This test is not included in derbyall since it creates a
1:b647b38:  * read-only directory which will be annoying when trying to clean
1:b647b38:  * test directories.  When Java 6 can be used, it will be possible to
1:b647b38:  * turn on write access at the end of the test.
1:b647b38:  *
1:b647b38:  */
1:b647b38: 
1:b647b38: public class TurnsReadOnly
1:b647b38: {
1:b647b38:     
1:b647b38:     public static void main(String[] argv) throws Throwable 
1:b647b38:     {
1:b647b38:         try {
1:b647b38:             ij.getPropertyArg(argv); 
1:b647b38:             Connection conn = ij.startJBMS();
1:b647b38:             conn.setAutoCommit(true);
1:b647b38:             System.out.println("Database has been booted.");
1:b647b38: 
1:b647b38:             Statement s = conn.createStatement();
1:b647b38:             s.execute("CREATE TABLE t1(a INT)");
1:b647b38:             System.out.println("Table t1 created.");
1:b647b38: 
1:b647b38:             // Shut down database
1:b647b38:             Properties shutdownAttrs = new Properties();
1:b647b38:             shutdownAttrs.setProperty("shutdownDatabase", "shutdown");
1:b647b38:             System.out.println("Shutting down database ...");
1:b647b38:             try {
1:b647b38:                 DataSource ds = TestUtil.getDataSource(shutdownAttrs);
1:b647b38:                 ds.getConnection();
1:b647b38:             } catch(SQLException se) {
1:b647b38: 				if (se.getSQLState() != null 
1:b647b38:                     && se.getSQLState().equals("XJ015")) {
1:b647b38: 					System.out.println("Database shutdown completed");
1:b647b38:                 } else {
1:b647b38:                     throw se;
1:b647b38:                 }
1:b647b38:             }
1:b647b38: 
1:b647b38:             // Make database directory read-only.
1:b647b38:             String derbyHome = System.getProperty("derby.system.home");
1:b647b38:             File dbDir = new File(derbyHome, "wombat");
1:b647b38:             dbDir.setReadOnly();
1:b647b38:             
1:b647b38:             // Boot database, check that it is read-only
1:b647b38:             conn = ij.startJBMS();
1:b647b38:             conn.setAutoCommit(true);
1:b647b38:             System.out.println("Database has been booted.");
1:b647b38:             s = conn.createStatement();
1:b647b38:             try {
1:b647b38:                 s.execute("INSERT INTO t1 VALUES(1)");
1:b647b38:             } catch(SQLException se) {
1:b647b38: 				if (se.getSQLState() != null 
1:b647b38:                     && se.getSQLState().equals("25502")) {
1:b647b38: 					System.out.println("Database is read-only");
1:b647b38:                 } else {
1:b647b38:                     throw se;
1:b647b38:                 }
1:b647b38:             }
1:b647b38: 
1:b647b38:         } catch (SQLException sqle) {
1:b647b38:             org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, 
1:b647b38:                                                                     sqle);
1:b647b38:             sqle.printStackTrace(System.out);
1:b647b38:         }
1:b647b38:     }
1:b647b38: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:b647b38
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.store.LogChecksumSetup
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.io.File;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Properties;
1: 
1: import javax.sql.DataSource;
1: 
1: import org.apache.derby.tools.ij;
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: 
1: /*
1:  * This class is a test where you are not able to create the lock file
1:  * when booting an existing database.  The database will then become
1:  * read-only.  The tests first creates a database and then shutdowns,
1:  * turns off write access to the database directory and then boots the
1:  * database again.  A non-default log directory is used since that
1:  * uncovered a bug (DERBY-555).  (logDevice is set in the
1:  * _app.properties file)
1:  *
1:  * NB! This test is not included in derbyall since it creates a
1:  * read-only directory which will be annoying when trying to clean
1:  * test directories.  When Java 6 can be used, it will be possible to
1:  * turn on write access at the end of the test.
1:  *
0:  * @author oystein.grovlen@sun.com
1:  */
1: 
1: public class TurnsReadOnly
1: {
1:     
1:     public static void main(String[] argv) throws Throwable 
1:     {
1:         try {
1:             ij.getPropertyArg(argv); 
1:             Connection conn = ij.startJBMS();
1:             conn.setAutoCommit(true);
1:             System.out.println("Database has been booted.");
1: 
1:             Statement s = conn.createStatement();
1:             s.execute("CREATE TABLE t1(a INT)");
1:             System.out.println("Table t1 created.");
1: 
1:             // Shut down database
1:             Properties shutdownAttrs = new Properties();
1:             shutdownAttrs.setProperty("shutdownDatabase", "shutdown");
1:             System.out.println("Shutting down database ...");
1:             try {
1:                 DataSource ds = TestUtil.getDataSource(shutdownAttrs);
1:                 ds.getConnection();
1:             } catch(SQLException se) {
1: 				if (se.getSQLState() != null 
1:                     && se.getSQLState().equals("XJ015")) {
1: 					System.out.println("Database shutdown completed");
1:                 } else {
1:                     throw se;
1:                 }
1:             }
1: 
1:             // Make database directory read-only.
1:             String derbyHome = System.getProperty("derby.system.home");
1:             File dbDir = new File(derbyHome, "wombat");
1:             dbDir.setReadOnly();
1:             
1:             // Boot database, check that it is read-only
1:             conn = ij.startJBMS();
1:             conn.setAutoCommit(true);
1:             System.out.println("Database has been booted.");
1:             s = conn.createStatement();
1:             try {
1:                 s.execute("INSERT INTO t1 VALUES(1)");
1:             } catch(SQLException se) {
1: 				if (se.getSQLState() != null 
1:                     && se.getSQLState().equals("25502")) {
1: 					System.out.println("Database is read-only");
1:                 } else {
1:                     throw se;
1:                 }
1:             }
1: 
1:         } catch (SQLException sqle) {
1:             org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, 
1:                                                                     sqle);
1:             sqle.printStackTrace(System.out);
1:         }
1:     }
1: }
============================================================================