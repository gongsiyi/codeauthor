1:782dbe1: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINStatementDescriptor
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:782dbe1:  */
1:782dbe1: 
1:48a9884: package org.apache.derby.impl.sql.catalog;
1:48a9884: 
1:48a9884: import java.sql.PreparedStatement;
1:48a9884: import java.sql.SQLException;
1:48a9884: import java.sql.Timestamp;
1:48a9884: 
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:b096444: import org.apache.derby.iapi.types.DataTypeUtilities;
1:48a9884: import org.apache.derby.iapi.types.TypeId;
1:48a9884: import java.sql.Types;
1:48a9884: 
1:48a9884: public class XPLAINStatementDescriptor extends XPLAINTableDescriptor 
1:48a9884: {
1:48a9884:     
1:48a9884:     // implementation
1:48a9884:     private UUID stmt_id;           // the statement UUID
1:48a9884:     private String stmt_name;       // the statement name, if available
1:48a9884:     private String stmt_type;       // the statement type, e.g. select,insert, update, etc. 
1:48a9884:     private String stmt_text;       // the statement text 
1:48a9884:     private String jvm_id;          // the virtual machine identifier, only the code
1:48a9884:     private String os_id;           // the operating system identifier, from the os.home vm system variable
1:48a9884:     private String xplain_mode;     // the explain mode, either (F)ull explain or explain (O)nly
1:48a9884:     private Timestamp xplain_time;  // the explain timestamp, useful if statistics timing was off
1:48a9884:     private String thread_id;       // the explaining thread identifier      
1:48a9884:     private String xa_id;           // the transaction identifier
1:48a9884:     private String session_id;      // the session identifier (instance)
1:48a9884:     private String db_name;         // the database name
1:48a9884:     private String drda_id;         // the drda identifier
1:48a9884:     private UUID timing_id;         // the UUID of the associated timing tuple
1:48a9884:     
1:48a9884:     public XPLAINStatementDescriptor() {}
1:48a9884:     public XPLAINStatementDescriptor (
1:48a9884:             UUID stmt_id,
1:48a9884:             String stmt_name,
1:48a9884:             String stmt_type,
1:48a9884:             String stmt_text,
1:48a9884:             String jvm_id,
1:48a9884:             String os_id,
1:48a9884:             String xplain_mode,
1:48a9884:             Timestamp xplain_time,
1:48a9884:             String thread_id,
1:48a9884:             String xa_id,
1:48a9884:             String session_id,
1:48a9884:             String db_name,
1:48a9884:             String drda_id,
1:48a9884:             UUID timing_id
1:48a9884:     ){
1:48a9884:         
1:48a9884:         this.stmt_id     =  stmt_id;
1:48a9884:         this.stmt_name   =  stmt_name;
1:48a9884:         this.stmt_type   =  stmt_type;
1:48a9884:         this.stmt_text   = stmt_text;
1:48a9884:         this.jvm_id      = jvm_id;
1:48a9884:         this.os_id       = os_id;
1:48a9884:         this.xplain_mode = xplain_mode;
1:b096444:         this.xplain_time = DataTypeUtilities.clone( xplain_time );
1:48a9884:         this.thread_id   = thread_id;
1:48a9884:         this.xa_id       = xa_id;
1:48a9884:         this.session_id  = session_id;
1:48a9884:         this.db_name     = db_name;
1:48a9884:         this.drda_id     = drda_id;
1:48a9884:         this.timing_id   = timing_id;
1:48a9884:        
1:48a9884:     }
1:48a9884:     public void setStatementParameters(PreparedStatement ps)
1:48a9884:         throws SQLException
1:48a9884:     {
1:48a9884:         ps.setString(1, stmt_id.toString());
1:48a9884:         ps.setString(2, stmt_name);
1:48a9884:         ps.setString(3, stmt_type);
1:48a9884:         ps.setString(4, stmt_text);
1:48a9884:         ps.setString(5, jvm_id);
1:48a9884:         ps.setString(6, os_id);
1:48a9884:         ps.setString(7, xplain_mode);
1:48a9884:         ps.setTimestamp(8, xplain_time);
1:48a9884:         ps.setString(9, thread_id);
1:48a9884:         ps.setString(10, xa_id);
1:48a9884:         ps.setString(11, session_id);
1:48a9884:         ps.setString(12, db_name);
1:48a9884:         ps.setString(13, drda_id);
1:48a9884:         ps.setString(14, (timing_id != null ? timing_id.toString():null));
1:48a9884:     }
1:48a9884:     
1:48a9884:     public String getCatalogName() { return TABLENAME_STRING; }
1:48a9884:     static final String             TABLENAME_STRING = "SYSXPLAIN_STATEMENTS";
1:48a9884: 
1:48a9884:     private static final String[][] indexColumnNames =
1:48a9884:     {
1:48a9884:         {"STMT_ID"}
1:48a9884:     };
1:48a9884: 
1:48a9884:     /**
1:48a9884:      * Builds a list of columns suitable for creating this Catalog.
1:48a9884:      *
1:48a9884:      * @return array of SystemColumn suitable for making this catalog.
1:48a9884:      */
1:48a9884:     public SystemColumn[] buildColumnList() {
1:48a9884:         return new SystemColumn[] {
1:48a9884:             SystemColumnImpl.getUUIDColumn("STMT_ID", false),
1:48a9884:             SystemColumnImpl.getIdentifierColumn("STMT_NAME", true),
1:48a9884:             SystemColumnImpl.getColumn("STMT_TYPE", Types.CHAR, false, 3),
1:48a9884:             SystemColumnImpl.getColumn("STMT_TEXT", Types.VARCHAR, false, TypeId.VARCHAR_MAXWIDTH),
1:4771f1f:             SystemColumnImpl.getColumn("JVM_ID", Types.VARCHAR, false,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:4771f1f:             SystemColumnImpl.getColumn("OS_IDENTIFIER", Types.VARCHAR, false,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:48a9884:             SystemColumnImpl.getColumn("XPLAIN_MODE", Types.CHAR, true, 1),
1:48a9884:             SystemColumnImpl.getColumn("XPLAIN_TIME", Types.TIMESTAMP, true),
1:4771f1f:             SystemColumnImpl.getColumn("XPLAIN_THREAD_ID", Types.VARCHAR, false,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:4771f1f:             SystemColumnImpl.getColumn("TRANSACTION_ID", Types.VARCHAR, false,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:4771f1f:             SystemColumnImpl.getColumn("SESSION_ID", Types.VARCHAR, false,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:48a9884:             SystemColumnImpl.getIdentifierColumn("DATABASE_NAME", false),
1:4771f1f:             SystemColumnImpl.getColumn("DRDA_ID", Types.VARCHAR, true,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:48a9884:             SystemColumnImpl.getUUIDColumn("TIMING_ID", true),
1:48a9884:         };
1:48a9884:     }
1:48a9884: 
1:48a9884: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b096444
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeUtilities;
/////////////////////////////////////////////////////////////////////////
1:         this.xplain_time = DataTypeUtilities.clone( xplain_time );
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:4771f1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             SystemColumnImpl.getColumn("JVM_ID", Types.VARCHAR, false,
1:                     TypeId.VARCHAR_MAXWIDTH),
1:             SystemColumnImpl.getColumn("OS_IDENTIFIER", Types.VARCHAR, false,
1:                     TypeId.VARCHAR_MAXWIDTH),
1:             SystemColumnImpl.getColumn("XPLAIN_THREAD_ID", Types.VARCHAR, false,
1:                     TypeId.VARCHAR_MAXWIDTH),
1:             SystemColumnImpl.getColumn("TRANSACTION_ID", Types.VARCHAR, false,
1:                     TypeId.VARCHAR_MAXWIDTH),
1:             SystemColumnImpl.getColumn("SESSION_ID", Types.VARCHAR, false,
1:                     TypeId.VARCHAR_MAXWIDTH),
1:             SystemColumnImpl.getColumn("DRDA_ID", Types.VARCHAR, true,
1:                     TypeId.VARCHAR_MAXWIDTH),
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINStatementDescriptor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Timestamp;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.impl.sql.catalog.SystemColumnImpl;
1: import org.apache.derby.iapi.types.TypeId;
1: import java.sql.Types;
1: 
1: public class XPLAINStatementDescriptor extends XPLAINTableDescriptor 
1: {
1:     
1:     // implementation
1:     private UUID stmt_id;           // the statement UUID
1:     private String stmt_name;       // the statement name, if available
1:     private String stmt_type;       // the statement type, e.g. select,insert, update, etc. 
1:     private String stmt_text;       // the statement text 
1:     private String jvm_id;          // the virtual machine identifier, only the code
1:     private String os_id;           // the operating system identifier, from the os.home vm system variable
1:     private String xplain_mode;     // the explain mode, either (F)ull explain or explain (O)nly
1:     private Timestamp xplain_time;  // the explain timestamp, useful if statistics timing was off
1:     private String thread_id;       // the explaining thread identifier      
1:     private String xa_id;           // the transaction identifier
1:     private String session_id;      // the session identifier (instance)
1:     private String db_name;         // the database name
1:     private String drda_id;         // the drda identifier
1:     private UUID timing_id;         // the UUID of the associated timing tuple
1:     
1:     public XPLAINStatementDescriptor() {}
1:     public XPLAINStatementDescriptor (
1:             UUID stmt_id,
1:             String stmt_name,
1:             String stmt_type,
1:             String stmt_text,
1:             String jvm_id,
1:             String os_id,
1:             String xplain_mode,
1:             Timestamp xplain_time,
1:             String thread_id,
1:             String xa_id,
1:             String session_id,
1:             String db_name,
1:             String drda_id,
1:             UUID timing_id
1:     ){
1:         
1:         this.stmt_id     =  stmt_id;
1:         this.stmt_name   =  stmt_name;
1:         this.stmt_type   =  stmt_type;
1:         this.stmt_text   = stmt_text;
1:         this.jvm_id      = jvm_id;
1:         this.os_id       = os_id;
1:         this.xplain_mode = xplain_mode;
0:         this.xplain_time = xplain_time;
1:         this.thread_id   = thread_id;
1:         this.xa_id       = xa_id;
1:         this.session_id  = session_id;
1:         this.db_name     = db_name;
1:         this.drda_id     = drda_id;
1:         this.timing_id   = timing_id;
1:        
1:     }
1:     public void setStatementParameters(PreparedStatement ps)
1:         throws SQLException
1:     {
1:         ps.setString(1, stmt_id.toString());
1:         ps.setString(2, stmt_name);
1:         ps.setString(3, stmt_type);
1:         ps.setString(4, stmt_text);
1:         ps.setString(5, jvm_id);
1:         ps.setString(6, os_id);
1:         ps.setString(7, xplain_mode);
1:         ps.setTimestamp(8, xplain_time);
1:         ps.setString(9, thread_id);
1:         ps.setString(10, xa_id);
1:         ps.setString(11, session_id);
1:         ps.setString(12, db_name);
1:         ps.setString(13, drda_id);
1:         ps.setString(14, (timing_id != null ? timing_id.toString():null));
1:     }
1:     
1:     public String getCatalogName() { return TABLENAME_STRING; }
1:     static final String             TABLENAME_STRING = "SYSXPLAIN_STATEMENTS";
1: 
1:     private static final String[][] indexColumnNames =
1:     {
1:         {"STMT_ID"}
1:     };
1: 
1:     /**
1:      * Builds a list of columns suitable for creating this Catalog.
1:      *
1:      * @return array of SystemColumn suitable for making this catalog.
1:      */
1:     public SystemColumn[] buildColumnList() {
1:         return new SystemColumn[] {
1:             SystemColumnImpl.getUUIDColumn("STMT_ID", false),
1:             SystemColumnImpl.getIdentifierColumn("STMT_NAME", true),
1:             SystemColumnImpl.getColumn("STMT_TYPE", Types.CHAR, false, 3),
1:             SystemColumnImpl.getColumn("STMT_TEXT", Types.VARCHAR, false, TypeId.VARCHAR_MAXWIDTH),
0:             SystemColumnImpl.getColumn("JVM_ID", Types.CHAR, false, 30),
0:             SystemColumnImpl.getColumn("OS_IDENTIFIER", Types.CHAR, false, 30),
1:             SystemColumnImpl.getColumn("XPLAIN_MODE", Types.CHAR, true, 1),
1:             SystemColumnImpl.getColumn("XPLAIN_TIME", Types.TIMESTAMP, true),
0:             SystemColumnImpl.getColumn("XPLAIN_THREAD_ID", Types.CHAR, false, 32),
0:             SystemColumnImpl.getColumn("TRANSACTION_ID", Types.CHAR, false, 32),
0:             SystemColumnImpl.getColumn("SESSION_ID", Types.CHAR, false, 32),
1:             SystemColumnImpl.getIdentifierColumn("DATABASE_NAME", false),
0:             SystemColumnImpl.getColumn("DRDA_ID", Types.CHAR, true, 32),
1:             SystemColumnImpl.getUUIDColumn("TIMING_ID", true),
1:         };
1:     }
1: 
1: }
============================================================================