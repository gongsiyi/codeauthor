1:eac0369: /*
1:d7258ed: 
1:d7258ed:    Derby - Class org.apache.derby.drda.NetServlet
1:4551a6e: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:d7258ed: 
1:d7258ed:       http://www.apache.org/licenses/LICENSE-2.0
1:d7258ed: 
1:d7258ed:    Unless required by applicable law or agreed to in writing, software
1:d7258ed:    distributed under the License is distributed on an "AS IS" BASIS,
1:d7258ed:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7258ed:    See the License for the specific language governing permissions and
1:d7258ed:    limitations under the License.
1:d7258ed: 
27:eac0369:  */
36:eac0369: 
1:eac0369: package org.apache.derby.drda;
1:eac0369: 
1:db4c995: import java.io.IOException;
1:db4c995: import java.io.OutputStreamWriter;
1:db4c995: import java.io.PrintWriter;
1:db4c995: import java.net.InetAddress;
1:eac0369: import java.security.AccessController;
1:eac0369: import java.security.PrivilegedExceptionAction;
1:db4c995: import java.util.Locale;
1:db4c995: import java.util.Properties;
1:db4c995: import java.util.StringTokenizer;
1:db4c995: import javax.servlet.ServletConfig;
1:db4c995: import javax.servlet.ServletException;
1:db4c995: import javax.servlet.http.HttpServlet;
1:db4c995: import javax.servlet.http.HttpServletRequest;
1:db4c995: import javax.servlet.http.HttpServletResponse;
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:db4c995: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1:eac0369: 
1:4551a6e: /**
1:4f996a4:     This servlet can be used to start Derby Network Server from a remote location.
1:4f996a4:     <P>
1:4f996a4:     These servlet configuration parameters are understood by this servlet.
1:4f996a4:     <UL>
1:4f996a4:     <LI><PRE>portNumber</PRE> - Port number to use. The default is 1527.</LI>
1:4f996a4:     <LI><PRE>startNetworkServerOnInit</PRE> - Starts the Derby Network Server at servlet 
1:4f996a4:             initialization if 'true'.</LI>
1:4f996a4:     <LI><PRE>tracingDirectory</PRE> - Directory for trace files</LI>
1:4f996a4:     </UL>
1:eac0369: 
1:8dc2ebc: */
1:eac0369: public class NetServlet extends HttpServlet {
1:4f996a4:     private final static int MAX_CONNECT_TRYS = 20;
1:4f996a4:     private final static String SERVLET_PROP_MESSAGES =  "org.apache.derby.loc.drda.servlet";
1:4f996a4:     private final static String SERVLET_ADDRESS = "derbynet";
1:cee7de4:     private final static String[] knownLang =
1:cee7de4:     { "cs","en","es","de_DE","fr","hu","it", "ja_JP","ko_KR","pl","pt_BR","ru","zh_CN","zh_TW" };
1:eac0369: 
1:cee7de4:     // set at initialization
1:4f996a4:     private String host = "localhost";
1:cee7de4:     private int portNumber = 1527;
1:cee7de4: 
1:cee7de4:     // can be overridden by trips through doGet()
1:cee7de4:     private volatile String tracingDirectory;
1:db9a013:     private volatile boolean logStatus= false;  /* Logging off */
1:db9a013:     private volatile boolean traceStatus = false;   /* Tracing off */
1:eac0369: 
1:4f996a4:     private final static int NOT_GIVEN = -2;
1:4f996a4:     private final static int INVALID = -3;
1:eac0369: 
1:4f996a4:     private NetworkServerControl server;
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:         Initialize the servlet.
1:4f996a4:         Configuration parameters:
1:4f996a4:         <UL>
1:4f996a4:         <LI><PRE>portNumber</PRE> - Port number</LI>
1:4f996a4:         <LI><PRE>host</PRE> - Host name</LI>
1:4f996a4:         <LI><PRE>traceDirectory</PRE> - location of trace directory</LI>
1:4f996a4:         <LI><PRE>startNetworkServerOnInit</PRE> - start the server on initialization</LI>
1:4f996a4:         </UL>
1:4f996a4:     */
1:4f996a4:     public void init(ServletConfig config)
1:4f996a4:         throws ServletException
1:4f996a4:     {
1:4f996a4:         
1:4f996a4:         String port = config.getInitParameter("portNumber");
1:4f996a4:         if (port != null) {
1:4f996a4:             int p = Integer.parseInt(port);
1:4f996a4:             if (p > 0)
1:4f996a4:                 portNumber = p;
1:4f996a4:         }
1:4f996a4:         String hostName = config.getInitParameter("host");
1:4f996a4:         if (hostName != null)
1:4f996a4:             host = hostName;
1:4551a6e: 
1:4f996a4:         this.tracingDirectory = config.getInitParameter("tracingDirectory");
1:4f996a4:         
1:4f996a4:         if ( this.tracingDirectory == null ) {
1:4f996a4:             this.tracingDirectory = "";
1:4f996a4:         }
1:4551a6e: 
1:4f996a4:         String startup = config.getInitParameter("startNetworkServerOnInit");
1:4551a6e: 
1:4f996a4:         // test if the server is already running
1:4f996a4:         try {
1:4f996a4:             //don't send output to console
1:4f996a4:             if (server == null) {
1:4f996a4:                 server = new NetworkServerControl(InetAddress.getByName(host), portNumber);
1:4f996a4:                 // assert this.tracingDirectory != null
1:4f996a4:                 if  ( ! this.tracingDirectory.trim().equals("")) {
1:4f996a4:                     server.setTraceDirectory(this.tracingDirectory);
1:4f996a4:                 }
1:4f996a4:             }
1:4f996a4:             
1:4f996a4:             if (isServerStarted(server,1))
1:4f996a4:                 return;
1:4f996a4:         } catch (Exception e) {}
1:4551a6e: 
1:4f996a4:         if (startup != null) {
1:4f996a4:             boolean start = Boolean.valueOf(startup).booleanValue();
1:4f996a4:             if (start)
1:4f996a4:             {
1:953afd7:                 LocalizedResource langUtil = new LocalizedResource(SERVLET_PROP_MESSAGES);
1:4f996a4:                 runServer(langUtil, null, null);
1:4f996a4:                 return;
1:4f996a4:             }
1:4f996a4:         }
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:         Get the form of NetServlet. Provides buttons and forms to control the
1:4f996a4:         Network server.
1:4f996a4:     */
1:ca3a677:     public synchronized void doGet (HttpServletRequest request,
1:ca3a677:                                     HttpServletResponse response)
1:4f996a4:             throws ServletException, IOException
1:4f996a4:     {
1:4f996a4:         String logOnMessage;
1:4f996a4:         String logOffMessage;
1:4f996a4:         String traceOnMessage;
1:4f996a4:         String traceOffMessage;
1:4f996a4:         String traceOnOffMessage;
1:4f996a4:         String startMessage;
1:4f996a4:         String stopMessage;
1:4f996a4:         String returnMessage;
1:4f996a4:         String traceSessionMessage;
1:4f996a4:         String traceDirMessage;
1:4f996a4:         String netParamMessage;
1:cee7de4: 
1:4f996a4:         LocalizedResource langUtil;
1:cee7de4:         String locale[] = new String[ 1 ];
1:4f996a4:         
1:cee7de4:         langUtil = getCurrentAppUI(request, locale);
1:4f996a4:         response.setContentType("text/html; charset=UTF-8");
1:4f996a4:         
1:4f996a4:         //prevent caching of the servlet since contents can change - beetle 4649
1:4f996a4:         response.setHeader("Cache-Control", "no-cache,no-store");
1:eac0369: 
1:8dc2ebc:         String formTarget = request.getContextPath() + request.getServletPath();
1:8dc2ebc:         String formHeader = "<form enctype='multipart/form-data; charset=UTF-8'"
1:8dc2ebc:                 + " action='" + formTarget + "'>";
1:eac0369: 
1:cee7de4:         PrintWriter out = new PrintWriter
1:cee7de4:             ( new OutputStreamWriter(response.getOutputStream(), "UTF8"),true );
1:4f996a4:         
1:4f996a4:         //inialize messages
1:4f996a4:         logOnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_LogOn"));
1:4f996a4:         logOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_LogOff"));
1:4f996a4:         traceOnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOn"));
1:4f996a4:         traceOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOff"));
1:4f996a4:         startMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Start"));
1:4f996a4:         stopMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Stop"));
1:4f996a4:         traceSessionMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceSessButton"));
1:4f996a4:         traceOnOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOnOff"));
1:4f996a4:         returnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Return"));
1:4f996a4:         traceDirMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceDir"));
1:4f996a4:         netParamMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_NetParam"));
1:eac0369: 
1:cee7de4:         printBanner(langUtil, out);
1:4f996a4:         // set up a server we can use
1:4f996a4:         if (server == null) {
1:4f996a4:             try {
1:4f996a4:                 server = new NetworkServerControl();
1:4f996a4:             }catch (Exception e) {
1:4f996a4:                 printErrorForm(langUtil, e, returnMessage, out);
1:4f996a4:                 return;
1:4f996a4:             }
1:4f996a4:         }
1:cee7de4:         server.setClientLocale( locale[ 0 ] );
1:4f996a4:         String form = getForm(request);
1:4f996a4:         String doAction = getDoAction(request);
1:4f996a4:         // if doAction is set, use it to determine form
1:4f996a4:         if (doAction != null )
1:4f996a4:         {
1:4f996a4:             if (doAction.equals(traceOnOffMessage))
1:4f996a4:                 form = traceSessionMessage;
1:4f996a4:             else
1:4f996a4:                 form = doAction;
1:4f996a4:         }
1:4f996a4:         // if no form, determine form based on server status
1:4f996a4:         boolean serverStatus = getServerStatus();
1:4f996a4:         if (form == null)
1:4f996a4:         {
1:4f996a4:             if (serverStatus)
1:4f996a4:                 form = startMessage;
1:4f996a4:             else
1:4f996a4:                 form = stopMessage;
1:4f996a4:         }
1:4f996a4:         else if (form.equals(startMessage))
1:4f996a4:         {
1:4f996a4:             if (!serverStatus)  {
1:4f996a4:                 runServer(langUtil, returnMessage, out);
1:4f996a4:             }
1:4f996a4:         }
1:4f996a4:         else if (form.equals(stopMessage))
1:4f996a4:         {
1:4f996a4:             if (serverStatus)   {
1:4f996a4:                 shutdownServer(langUtil, returnMessage, out);
1:4f996a4:             }
1:4f996a4:             setDefaults();
1:4f996a4:                     
1:4f996a4:         }
1:8dc2ebc:         else if (form.equals(returnMessage))
1:4f996a4:         {
1:4f996a4:             // check if server is still running and use that to determine which form
1:4f996a4:             if (serverStatus)
1:4f996a4:             {
1:4f996a4:                 form = startMessage;
1:4f996a4:             }
1:4f996a4:             else
1:4f996a4:             {
1:4f996a4:                 form = stopMessage;
1:4f996a4:             }
1:4f996a4:         }
1:eac0369: 
1:4f996a4:         out.println( formHeader);
1:4f996a4:         // display forms
1:eac0369: 
1:4f996a4:         form = escapeSingleQuotes(form);
1:4f996a4:         doAction = escapeSingleQuotes(doAction);
1:db9a013:         if (form.equals(startMessage))
1:4f996a4:         {
1:4f996a4:             String logButton = getLogging(request);
1:4f996a4:             String traceButton = getTrace(request);
1:4f996a4:             if (logButton !=  null && logButton.equals(logOnMessage))
1:4f996a4:             {
1:4f996a4:                 if (logging(langUtil, true, returnMessage, out))
1:4f996a4:                     logStatus = true;
1:4f996a4:             }
1:4f996a4:             if (logButton !=  null && logButton.equals(logOffMessage))
1:4f996a4:             {
1:4f996a4:                 if (logging(langUtil, false, returnMessage, out))
1:4f996a4:                     logStatus = false;
1:4f996a4:             }
1:4f996a4:             if (traceButton !=  null && traceButton.equals(traceOnMessage))
1:4f996a4:             {
1:4f996a4:                 if (traceAll(langUtil, true, returnMessage, out))
1:4f996a4:                     traceStatus = true;
1:4f996a4:             }
1:4f996a4:             if (traceButton !=  null && traceButton.equals(traceOffMessage))
1:4f996a4:             {
1:4f996a4:                 if (traceAll(langUtil, false, returnMessage, out))
1:4f996a4:                     traceStatus = false;
1:4f996a4:             }
1:4f996a4:             displayCurrentStatus(langUtil, returnMessage, out);
1:4f996a4:             out.println( "<h4>"+langUtil.getTextMessage("SRV_StopButton")+"</h4>" );
1:4f996a4:             out.println( "<INPUT type=submit name=form value='"+ stopMessage + "'>" );
1:eac0369: 
1:4f996a4:             out.println( "<h4>"+langUtil.getTextMessage("SRV_LogButton2")+"</h4>" );
1:eac0369: 
1:4f996a4:             if (logStatus)
1:4f996a4:             {
1:4f996a4:                 out.println( "<INPUT type=submit name=logform value='"+logOffMessage + "'>" );
1:4f996a4:             }
1:4f996a4:             else
1:4f996a4:             {
1:4f996a4:                 out.println( "<INPUT type=submit name=logform value='"+logOnMessage + "'>" );
1:4f996a4:             }
1:4f996a4:             out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceButton2")+"</h4>" );
1:4f996a4:             if (traceStatus)
1:4f996a4:             {
1:4f996a4:                 out.println( "<INPUT type=submit name=traceform value='"+traceOffMessage+ "'>" );
1:4f996a4:             }
1:4f996a4:             else
1:4f996a4:             {
1:4f996a4:                 out.println( "<INPUT type=submit name=traceform value='"+traceOnMessage + "'>" );
1:4f996a4:             }
1:eac0369: 
1:4f996a4:             out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceSession")+"</h4>" );
1:4f996a4:             out.println( "<INPUT type=submit name=form value='"+ traceSessionMessage + "'>" );
1:4f996a4:             out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceDirButton")+"</h4>" );
1:4f996a4:             out.println( "<INPUT type=submit name=form value='"+ traceDirMessage + "'>" );
1:4f996a4:             out.println( "<h4>"+langUtil.getTextMessage("SRV_ThreadButton")+"</h4>" );
1:4f996a4:             out.println( "<INPUT type=submit name=form value='"+ netParamMessage+ "'>" );
1:4f996a4:         }
1:4f996a4:         else if (form.equals(stopMessage))
1:4f996a4:         {
1:eac0369: 
1:cee7de4:             printAsContentHeader(langUtil.getTextMessage("SRV_NotStarted"), out);
1:4f996a4:             String logButton = getLogging(request);
1:4f996a4:             String traceButton =  getTrace(request);
1:4f996a4:             if (logButton !=  null && logButton.equals(logOnMessage))
1:4f996a4:                 logStatus = true;
1:4f996a4:             if (logButton !=  null && logButton.equals(logOffMessage))
1:4f996a4:                 logStatus = false;
1:4f996a4:             if (traceButton !=  null && traceButton.equals(traceOnMessage))
1:4f996a4:                 traceStatus = true;
1:4f996a4:             if (traceButton !=  null && traceButton.equals(traceOffMessage))
1:4f996a4:                 traceStatus = false;
1:4f996a4:             if (logStatus)
1:4f996a4:             {
1:4f996a4:                 out.println( "<h4>"+langUtil.getTextMessage("SRV_LogOffButton")+"</h4>" );
1:4f996a4:                 out.println( "<INPUT type=submit name=logform value='"+logOffMessage + "'>" );
1:4f996a4:             }
1:4f996a4:             else
1:4f996a4:             {
1:4f996a4:                 out.println( "<h4>"+langUtil.getTextMessage("SRV_LogOnButton")+"</h4>" );
1:4f996a4:                 out.println( "<INPUT type=submit name=logform value='"+logOnMessage + "'>" );
1:4f996a4:             }
1:4f996a4:             if (traceStatus)
1:4f996a4:             {
1:4f996a4:                 out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceOffButton")+"</h4>" );
1:4f996a4:                 out.println( "<INPUT type=submit name=traceform value='"+traceOffMessage + "'>" );
1:4f996a4:             }
1:4f996a4:             else
1:4f996a4:             {
1:4f996a4:                 out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceOnButton")+"</h4>" );
1:4f996a4:                 out.println( "<INPUT type=submit name=traceform value='"+traceOnMessage + "'>" );
1:4f996a4:             }
1:4f996a4:             out.println( "<h4>"+langUtil.getTextMessage("SRV_StartButton")+"</h4>" );
1:4f996a4:             out.println( "<INPUT type=submit name=form value='"+startMessage+ "'>" );
1:4f996a4:         }
1:4f996a4:         else if (form.equals(traceSessionMessage))
1:4f996a4:         {
1:4f996a4:             if (doAction != null)
1:4f996a4:             {
1:4f996a4:                 if (doAction.equals(traceOnOffMessage))
1:4f996a4:                 {
1:4f996a4:                     String sessionid = request.getParameter("sessionid");
1:8dc2ebc:                     Integer session;
1:4f996a4:                     try {
1:8dc2ebc:                         session = Integer.valueOf(sessionid);
1:8dc2ebc:                     } catch (NumberFormatException nfe) {
1:4f996a4:                         printErrorForm(langUtil,
1:4f996a4:                             langUtil.getTextMessage("SRV_InvalidVal",
1:4f996a4:                             sessionid, langUtil.getTextMessage("SRV_SessionID")),
1:cee7de4:                                        returnMessage, out);
1:4f996a4:                         return;
1:4f996a4:                     }
1:4f996a4:                     Properties p;
1:4f996a4:                     try {
1:4f996a4:                         p = server.getCurrentProperties();
1:4f996a4:                     } catch (Exception e) {
1:4f996a4:                         printErrorForm(langUtil, e, returnMessage, out);
1:4f996a4:                         return;
1:4f996a4:                     }
1:4f996a4:                     // if it's on, turn it off, if its off, turn it on
1:4f996a4:                     boolean val;
1:4f996a4:                     if (p.getProperty(Property.DRDA_PROP_TRACE+sessionid) != null)
1:4f996a4:                         val = false;
1:4f996a4:                     else
1:4f996a4:                         val = true;
1:8dc2ebc:                     if (traceSession(langUtil, val, session.intValue(),
1:4f996a4:                             returnMessage, out))
1:4f996a4:                     {
1:8dc2ebc:                         out.println( "<h4>" + langUtil.getTextMessage(
1:8dc2ebc:                                 val ? "SRV_StatusTraceNoOn"
1:8dc2ebc:                                     : "SRV_StatusTraceNoOff",
1:8dc2ebc:                                 session.toString()) + "</h4>");
1:4f996a4:                     }
1:4f996a4:                     else
1:4f996a4:                         return;
1:4f996a4:                         
1:4f996a4:                 }
1:4f996a4:             }
1:cee7de4:             printAsContentHeader(langUtil.getTextMessage("SRV_TraceSessButton"), out);
1:4f996a4:             out.println( "<h4>" + getHtmlLabelledMessageInstance(langUtil,
1:4f996a4:                 "SRV_SessionID", "sessionId") + "</h4>");
1:4f996a4:             out.println( "<INPUT type=text name=sessionid size=10 maxlength=10 " +
1:4f996a4:                 "id='sessionId' value=''>");
1:4f996a4:             out.println( "<h4> </h4>");
1:4f996a4:             out.println( "<INPUT type=submit name=doaction value='"+traceOnOffMessage+ "'>" );
1:4f996a4:             out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
1:4f996a4:         }
1:4f996a4:         else if (form.equals(traceDirMessage))
1:4f996a4:         {
1:4f996a4:             boolean set = false;
1:4f996a4:             String traceDirectory = null;
1:cee7de4:             printAsContentHeader(traceDirMessage, out);
1:4f996a4:             if (doAction != null)
1:4f996a4:             {
1:4f996a4:                 if (doAction.equals(traceDirMessage))
1:4f996a4:                 {
1:4f996a4:                     traceDirectory = getParam(request, "tracedirectory");
1:4f996a4:                     if (traceDirectory(langUtil, traceDirectory,
1:cee7de4:                                        returnMessage, out) )
1:4f996a4:                         set = true;
1:4f996a4:                     else
1:4f996a4:                         return;
1:4f996a4:                     
1:4f996a4:                 }
1:4f996a4:             }
1:4f996a4:             if (set)
1:4f996a4:             {
1:8dc2ebc:                 out.println("<h2>" + langUtil.getTextMessage("SRV_TraceDirDone",
1:8dc2ebc:                         escapeHTML(traceDirectory)) + "</h2>");
1:4f996a4:                 out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
1:4f996a4:             }
1:4f996a4:             else
1:4f996a4:             {
1:4f996a4:                 out.println( "<h4>" + getHtmlLabelledMessageInstance(langUtil,
1:4f996a4:                     "SRV_TraceDir", "tracedir") + "</h4>");
1:4f996a4:                 out.println( "<INPUT type=text name=tracedirectory size=60 maxlength=256 " +
1:8dc2ebc:                     "id='tracedir' value='"+escapeHTML(tracingDirectory)+"'>");
1:4f996a4:                 out.println( "<h4> </h4>");
1:4f996a4:                 out.println( "<INPUT type=submit name=doaction value='"+traceDirMessage+ "'>" );
1:4f996a4:                 out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
1:4f996a4:             }
1:4f996a4:         }
1:4f996a4:         else if (form.equals(netParamMessage))
1:4f996a4:         {
1:4f996a4:             int maxThreads;
1:4f996a4:             int timeSlice;
1:4f996a4:             String maxName = langUtil.getTextMessage("SRV_NewMaxThreads");
1:4f996a4:             String sliceName = langUtil.getTextMessage("SRV_NewTimeSlice");
1:4f996a4:             try {
1:4f996a4:                 Properties p = server.getCurrentProperties();
1:4f996a4:                 String val = p.getProperty(Property.DRDA_PROP_MAXTHREADS);
1:ce40a31:                 maxThreads= Integer.parseInt(val);
1:4f996a4:                 val = p.getProperty(Property.DRDA_PROP_TIMESLICE);
1:ce40a31:                 timeSlice= Integer.parseInt(val);
1:4f996a4:             } catch (Exception e) {
1:4f996a4:                 printErrorForm(langUtil, e, returnMessage, out);
1:4f996a4:                 return;
1:4f996a4:             }
1:4f996a4:             if (doAction != null && doAction.equals(netParamMessage))
1:4f996a4:             {
1:4f996a4:                 int newMaxThreads = getIntParameter(request, "newmaxthreads", 
1:cee7de4:                     "SRV_NewMaxThreads", langUtil, returnMessage, out);
1:4f996a4:                 int newTimeSlice = (newMaxThreads == INVALID) ? NOT_GIVEN :
1:4f996a4:                     getIntParameter(request, "newtimeslice", "SRV_NewTimeSlice", langUtil, 
1:cee7de4:                         returnMessage, out);
1:4f996a4:                 if ((newMaxThreads == INVALID) || (newTimeSlice == INVALID))
1:4f996a4:                     return;
1:4f996a4:                 else if (!(newMaxThreads == NOT_GIVEN && newTimeSlice == NOT_GIVEN))
1:4f996a4:                 {
1:4f996a4:                     if (newMaxThreads != NOT_GIVEN)
1:4f996a4:                         maxThreads = newMaxThreads;
1:4f996a4:                     if (newTimeSlice != NOT_GIVEN)
1:4f996a4:                         timeSlice = newTimeSlice;
1:4f996a4:                     if (!setNetParam(langUtil, maxThreads, timeSlice,
1:cee7de4:                             returnMessage, out))
1:4f996a4:                         return;
1:4f996a4:                 }
1:4f996a4:             }
1:4f996a4:             
1:4f996a4:             out.println(formHeader);
1:cee7de4:             printAsContentHeader(netParamMessage, out);
1:ce40a31:             out.println( "<h4>"+langUtil.getTextMessage("SRV_MaxThreads", Integer.toString(maxThreads) +"</h4>"));
1:ce40a31:             out.println( "<h4>"+langUtil.getTextMessage("SRV_TimeSlice", Integer.toString(timeSlice) +"</h4>"));
1:4f996a4:             out.println( "<h4> </h4>");
1:4f996a4:             out.println( "<h4> <label for='newmaxthreads'>"+maxName+"</label> </h4>");
1:4f996a4:             out.println( "<INPUT type=text name=newmaxthreads size=10 maxlength=10 " +
1:4f996a4:                 "id='newmaxthreads' value=''>" );
1:4f996a4:             out.println( "<h4> <label for='newslice'>"+sliceName+"</label> </h4>");
1:4f996a4:             out.println( "<INPUT type=text name=newtimeslice size=10 maxlength=10 " +
1:4f996a4:                 "id='newslice' value=''>" );
1:4f996a4:             out.println( "<h4> </h4>");
1:4f996a4:             out.println( "<INPUT type=submit name=doaction value='"+netParamMessage+ "'>" );
1:4f996a4:             out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
1:4f996a4:         }
1:4f996a4:         else
1:4f996a4:         {
1:4f996a4:             System.out.println("Internal Error: Unknown form, "+ form);
1:8dc2ebc:             out.println("Internal Error: Unknown form");
1:4f996a4:         }
1:eac0369: 
1:db9a013:         out.println( "</body>" );
1:6cc865c:         out.println( "</html>" ); 
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:         Get the form of NetServlet. Provides a buttons and form to control the
1:4f996a4:         Network server
1:eac0369: 
1:4f996a4:     */
1:4f996a4:     public void doPost (HttpServletRequest request, HttpServletResponse response)
1:4f996a4:             throws ServletException, IOException
1:4f996a4:     {
1:4f996a4:         // simply call the doGet()
1:4f996a4:         doGet(request, response);
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     private String getForm(HttpServletRequest request)  throws java.io.IOException{
1:4f996a4:         return getParam(request, "form");
1:4f996a4:     }
1:4f996a4:     private String getDoAction(HttpServletRequest request) throws java.io.IOException {
1:4f996a4:         return getParam(request, "doaction");
1:4f996a4:     }
1:4f996a4:     private String getLogging(HttpServletRequest request) throws java.io.IOException {
1:4f996a4:         return getParam(request, "logform");
1:4f996a4:     }
1:4f996a4:     private String getTrace(HttpServletRequest request) throws java.io.IOException {
1:4f996a4:         return getParam(request, "traceform");
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      *  get UTF8 parameter value and decode international characters
1:4f996a4:      *  @param request   HttpServletRequest
1:4f996a4:      *  @param paramName  Parameter name
1:4f996a4:      *  @return decoded String
1:4f996a4:      */
1:4f996a4:     private String getParam(HttpServletRequest request, String paramName) throws
1:4f996a4:     java.io.IOException { 
1:4f996a4:                 
1:4f996a4:         String value = request.getParameter(paramName);
1:5ea999a:         if (value != null) {
1:5ea999a:             return new String(value.getBytes("ISO-8859-1"),"UTF8");
1:5ea999a:         } else {
1:5ea999a:             return null;
1:4f996a4:         }
1:4551a6e:     }
1:eac0369: 
1:4f996a4:     /**
1:db9a013:      *  Start the network server and attempt to connect to it before
1:db9a013:      *  returning
1:4f996a4:      *
1:4f996a4:      * @param localUtil LocalizedResource to use to translate messages
1:db9a013:      * @param returnMessage localized continue message for continue button on error form
1:cee7de4:      * @param out Form PrintWriter
1:4f996a4:      * @exception ServletException throws an exception if error in starting the 
1:db9a013:      *      Network Server during initialization
1:4f996a4:      */
1:cee7de4:     private void runServer
1:3bbf7e2:         ( LocalizedResource localUtil, String returnMessage, PrintWriter out )
1:4f996a4:         throws ServletException
1:4f996a4:     {
1:4f996a4:         final Runnable service = new Runnable() {
1:4f996a4:             public void run() {
1:4f996a4:                 try {
1:4f996a4:                     //Echo server output to console
1:4f996a4:                     NetworkServerControl runserver = new
1:4f996a4:                         NetworkServerControl(InetAddress.getByName(host),
1:4f996a4:                                              portNumber);
1:4f996a4:                     runserver.start(null);
1:4f996a4:                 }
1:4f996a4:                 catch (Exception e) {
1:4f996a4:                     throw new RuntimeException(e.getMessage());
1:4f996a4:                 }
1:4f996a4:             }
1:4f996a4:         };
1:4f996a4:         Thread servThread = null;
1:4f996a4:         try {
1:0758fb6:             servThread = AccessController.doPrivileged(
1:0758fb6:                                 new PrivilegedExceptionAction<Thread>() {
1:0758fb6:                                     public Thread run() throws Exception
1:4f996a4:                                     {
1:4f996a4:                                         return new Thread(service);
1:4f996a4:                                     }
1:4f996a4:                                 }
1:4f996a4:                             );
1:4f996a4:         }
1:4f996a4:         catch (Exception e) {
1:4f996a4:             throw new RuntimeException(e.getMessage());
1:4f996a4:         }
1:4f996a4:         servThread.start();
1:eac0369: 
1:4f996a4:         // try to connect to server
1:4f996a4:         try {
1:4f996a4:             boolean connectWorked = false;
1:4f996a4:             int t = 0;
1:4f996a4:             do
1:4f996a4:             {
1:4f996a4:                 t++;
1:4f996a4:                 try {
1:4f996a4:                         Thread.sleep(100);
1:4f996a4:                 } catch (InterruptedException ie) {
1:4f996a4:                     throw new ServletException(localUtil.getTextMessage("SRV_Interupt"));
1:4f996a4:                 }
1:4f996a4:                 try {
1:4f996a4:                     if (isServerStarted(server,1))
1:4f996a4:                         connectWorked = true;
1:4f996a4:                 } catch (Exception e) {} //ignore error we'll just try again
1:4f996a4:                 
1:4f996a4:             }while (!connectWorked && t < MAX_CONNECT_TRYS);
1:4f996a4:             if (t >= MAX_CONNECT_TRYS)
1:4f996a4:                 throw new Exception(localUtil.getTextMessage("SRV_MaxTrys",
1:ce40a31:                      Integer.toString(MAX_CONNECT_TRYS)));
1:4f996a4:             // turn logging on if required
1:4f996a4:             if (logStatus)
1:4f996a4:                 server.logConnections(true);
1:4f996a4:             // turn tracing on
1:4f996a4:             if (traceStatus)
1:4f996a4:                 server.trace(true);
1:4f996a4:         }catch (Exception e) {
1:4f996a4:             if (out != null)
1:4f996a4:                 printErrorForm(localUtil, e, returnMessage, out);
1:4f996a4:             else
1:4f996a4:                 throw new ServletException(e.getMessage());
1:4f996a4:         }
1:4f996a4:     }
1:4f996a4:     /**
1:db9a013:      *  Display an error form
1:4f996a4:      *
1:db9a013:      * @param localUtil LocalizedResource to use to translate messages
1:db9a013:      * @param e     Exception to be displayed
1:db9a013:      * @param returnMessage localized continue message for continue button on error form
1:cee7de4:      * @param out Form PrintWriter
1:4f996a4:      */
1:cee7de4:     private void printErrorForm
1:cee7de4:         (
1:cee7de4:          LocalizedResource localUtil,
1:cee7de4:          Exception e,
1:cee7de4:          String returnMessage,
1:cee7de4:          PrintWriter out
1:cee7de4:          )
1:4f996a4:     {
1:cee7de4:         printAsContentHeader(localUtil.getTextMessage("SRV_NetworkServerError"), out);
1:8dc2ebc:         out.println( "<h4>" +
1:8dc2ebc:                 localUtil.getTextMessage(
1:8dc2ebc:                     "SRV_Message", escapeHTML(e.getMessage())) + "</h4>" );
1:4f996a4:         out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
3:4f996a4:         out.println( "</body>" );
1:4f996a4:         out.println( "</html>" );
1:4f996a4:     }
1:4f996a4:     /**
1:db9a013:      *  Display an error form
1:4f996a4:      *
1:db9a013:      * @param localUtil LocalizedResource to use to translate messages
1:db9a013:      * @param msg   String to be displayed
1:cee7de4:      * @param out Form PrintWriter
1:db9a013:      * @param returnMessage localized continue message for continue button on error form
1:4f996a4:      */
1:cee7de4:     private void printErrorForm
1:cee7de4:         (
1:cee7de4:          LocalizedResource localUtil,
1:cee7de4:          String msg,
1:cee7de4:          String returnMessage,
1:cee7de4:          PrintWriter out
1:cee7de4:          )
1:4f996a4:     {
1:cee7de4:         printAsContentHeader(localUtil.getTextMessage("SRV_NetworkServerError"), out);
1:8dc2ebc:         out.println(
1:8dc2ebc:                 "<h4>" +
1:8dc2ebc:                 localUtil.getTextMessage("SRV_Message", escapeHTML(msg)) +
1:8dc2ebc:                 "</h4>" );
1:4f996a4:         out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
1:db9a013:         out.println( "</body>" );
1:4f996a4:         out.println( "</html>" ); 
1:4f996a4:     }
1:4f996a4:     /**
1:db9a013:      *  Display the current Network server status
1:4f996a4:      *
1:db9a013:      * @param localUtil     LocalizedResource to use for localizing messages
1:db9a013:      * @param returnMessage localized continue message for continue button on error form
1:cee7de4:      * @param out Form PrintWriter
1:4f996a4:      */
1:cee7de4:     private void displayCurrentStatus
1:cee7de4:         (
1:cee7de4:          LocalizedResource localUtil,
1:cee7de4:          String returnMessage,
1:cee7de4:          PrintWriter out
1:cee7de4:          )
1:4f996a4:     {
1:4f996a4:         try {
1:eac0369: 
1:cee7de4:             printAsContentHeader(localUtil.getTextMessage("SRV_Started"), out);
1:4f996a4:             Properties p = server.getCurrentProperties();
1:4f996a4:             String val = p.getProperty(Property.DRDA_PROP_LOGCONNECTIONS);
1:4f996a4:             if (val.equals("true"))
1:4f996a4:                 logStatus = true;
1:4f996a4:             else
1:4f996a4:                 logStatus = false;
1:4f996a4:             if (logStatus)
1:4f996a4:                 out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusLogOn")+"</h4>");
1:4f996a4:             else
1:4f996a4:                 out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusLogOff")+"</h4>");
1:4f996a4:             val = p.getProperty(Property.DRDA_PROP_TRACEALL);
1:4f996a4:             if (val.equals("true"))
1:4f996a4:                 traceStatus = true;
1:4f996a4:             else
1:4f996a4:                 traceStatus = false;
1:4f996a4:             if (traceStatus)
1:4f996a4:                 out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusTraceOn")+"</h4>");
1:4f996a4:             else
1:4f996a4:                 out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusTraceOff")+"</h4>");
1:4f996a4:             val = p.getProperty(Property.DRDA_PROP_PORTNUMBER);
1:4f996a4:             out.println( "<h4>"+localUtil.getTextMessage("SRV_PortNumber", val)+"</h4>");
1:4f996a4:             
1:4f996a4:         }
1:4f996a4:         catch (Exception e) {
1:4f996a4:             printErrorForm(localUtil, e, returnMessage, out);
1:4f996a4:         }
1:4f996a4:     }
1:4f996a4:     /**
1:db9a013:      *  Get the currrent server status by using test connection
1:4f996a4:      *
1:4f996a4:      * @return true if server is up and reachable; false; otherwise
1:4f996a4:      */
1:4f996a4:     private boolean getServerStatus()
1:4f996a4:     {
1:4f996a4:         try {
1:4f996a4:             
1:4f996a4:             if (isServerStarted(server,1))
1:4f996a4:                 return true;
1:4f996a4:         } catch (Exception e) {}
1:4f996a4:         return false;
1:4f996a4:     }
1:4f996a4:     /**
1:db9a013:      *  Shutdown the network server
1:4f996a4:      *
1:db9a013:      * @param localUtil LocalizedResource to use to translate messages
1:db9a013:      * @param returnMessage localized continue message for continue button on error form
1:cee7de4:      * @param out Form PrintWriter
1:4f996a4:      * @return true if succeeded; false; otherwise
1:4f996a4:      */
1:cee7de4:     private boolean shutdownServer
1:cee7de4:         (
1:cee7de4:          LocalizedResource localUtil,
1:cee7de4:          String returnMessage,
1:cee7de4:          PrintWriter out
1:cee7de4:          )
1:4f996a4:     {
1:4f996a4:         boolean retval = false;
1:4f996a4:         try {
1:4f996a4:             server.shutdown();
1:4f996a4:             retval = true;
1:4f996a4:         } catch (Exception e) 
1:4f996a4:         {
1:4f996a4:             printErrorForm(localUtil, e, returnMessage, out);
1:4f996a4:         }
1:4f996a4:         return retval;
1:4f996a4:     }
1:4f996a4:     /**
1:db9a013:      *  Turn logging of connections on
1:4f996a4:      *
1:db9a013:      * @param localUtil LocalizedResource to use to translate messages
1:db9a013:      * @param returnMessage localized continue message for continue button on error form
1:cee7de4:      * @param out Form PrintWriter
1:4f996a4:      * @return true if succeeded; false; otherwise
1:4f996a4:      */
1:cee7de4:     private boolean logging
1:cee7de4:         (
1:cee7de4:          LocalizedResource localUtil,
1:cee7de4:          boolean val,
1:cee7de4:          String returnMessage,
1:cee7de4:          PrintWriter out
1:cee7de4:          )
1:4f996a4:     {
1:4f996a4:         boolean retval = false;
1:4f996a4:         try {
1:4f996a4:             server.logConnections(val);
1:4f996a4:             retval = true;
1:4f996a4:         } catch (Exception e) 
1:4f996a4:         {
1:4f996a4:             printErrorForm(localUtil, e, returnMessage, out);
1:4f996a4:         }
1:4f996a4:         return retval;
1:4f996a4:     }
1:4f996a4:     /**
1:db9a013:      *  Change tracing for all sessions
1:4f996a4:      *
1:db9a013:      * @param localUtil LocalizedResource to use to translate messages
1:db9a013:      * @param val   if true, turn tracing on, if false turn it off
1:db9a013:      * @param returnMessage localized continue message for continue button on error form
1:cee7de4:      * @param out Form PrintWriter
1:4f996a4:      * @return true if succeeded; false; otherwise
1:4f996a4:      */
1:cee7de4:     private boolean traceAll
1:cee7de4:         (
1:cee7de4:          LocalizedResource localUtil,
1:cee7de4:          boolean val,
1:cee7de4:          String returnMessage,
1:cee7de4:          PrintWriter out
1:cee7de4:          )
1:4f996a4:     {
1:4f996a4:         boolean retval = false;
1:4f996a4:         try {
1:4f996a4:             server.trace(val);
1:4f996a4:             retval = true;
1:4f996a4:         } catch (Exception e) 
1:4f996a4:         {
1:4f996a4:             printErrorForm(localUtil, e, returnMessage, out);
1:4f996a4:         }
1:4f996a4:         return retval;
1:4f996a4:     }
1:4f996a4:     /**
1:db9a013:      *  Change tracing for a given session
1:4f996a4:      *
1:db9a013:      * @param localUtil LocalizedResource to use to translate messages
1:db9a013:      * @param val   if true, turn tracing on, if false turn it off
1:db9a013:      * @param session   session to trace
1:db9a013:      * @param returnMessage localized continue message for continue button on error form
1:cee7de4:      * @param out Form PrintWriter
1:4f996a4:      * @return true if succeeded; false; otherwise
1:4f996a4:      */
1:cee7de4:     private boolean traceSession
1:cee7de4:         (
1:cee7de4:          LocalizedResource localUtil,
1:cee7de4:          boolean val,
1:cee7de4:          int session,
1:cee7de4:          String returnMessage,
1:cee7de4:          PrintWriter out
1:cee7de4:          )
1:4f996a4:     {
1:4f996a4:         boolean retval = false;
1:4f996a4:         try {
1:4f996a4:             server.trace(session, val);
1:4f996a4:             retval = true;
1:4f996a4:         } catch (Exception e) 
1:4f996a4:         {
1:4f996a4:             printErrorForm(localUtil, e, returnMessage, out);
1:4f996a4:         }
1:4f996a4:         return retval;
1:4f996a4:     }
1:4551a6e: 
1:4f996a4:     /**
1:4f996a4:      * Set trace directory
1:4f996a4:      *
1:db9a013:      * @param localUtil LocalizedResource to use to translate messages
1:4f996a4:      * @param traceDirectory    directory for trace files
1:db9a013:      * @param returnMessage     localized continue message for continue button on error form
1:cee7de4:      * @param out Form PrintWriter
1:4f996a4:      * @return true if succeeded; false; otherwise
1:4f996a4:      */
1:cee7de4:     private boolean traceDirectory
1:cee7de4:         (
1:cee7de4:          LocalizedResource localUtil,
1:cee7de4:          String traceDirectory,
1:cee7de4:          String returnMessage,
1:cee7de4:          PrintWriter out
1:cee7de4:          )
1:4f996a4:     {
1:4f996a4:         boolean retval = false;
1:eac0369: 
1:4f996a4:         if ((traceDirectory == null) || traceDirectory.equals("")) {
1:4f996a4:             printErrorForm(localUtil,
1:4f996a4:                 localUtil.getTextMessage("SRV_MissingParam",
1:cee7de4:                                          localUtil.getTextMessage("SRV_TraceDir")), returnMessage, out);
1:eac0369: 
1:4f996a4:             return retval;
1:4f996a4:         }
1:eac0369: 
1:4f996a4:         try {
1:4f996a4:             this.tracingDirectory = traceDirectory;
1:4f996a4:             server.setTraceDirectory(traceDirectory);
1:4f996a4:             retval = true;
1:4f996a4:         } catch (Exception e) 
1:4f996a4:         {
1:4f996a4:             printErrorForm(localUtil, e, returnMessage, out);
1:4f996a4:         }
1:4f996a4:         return retval;
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Set Network server parameters
1:4f996a4:      *
1:db9a013:      * @param localUtil LocalizedResource to use to translate messages
1:db9a013:      * @param max               maximum number of threads
1:db9a013:      * @param slice             time slice for each connection
1:db9a013:      * @param returnMessage     localized continue message for continue button on error form
1:cee7de4:      * @param out Form PrintWriter
1:4f996a4:      * @return true if succeeded; false; otherwise
1:4f996a4:      */
1:cee7de4:     private boolean setNetParam
1:cee7de4:         (
1:cee7de4:          LocalizedResource localUtil,
1:cee7de4:          int max,
1:cee7de4:          int slice,
1:cee7de4:          String returnMessage,
1:cee7de4:          PrintWriter out
1:cee7de4:          )
1:4f996a4:     {
1:4f996a4:         boolean retval = false;
1:eac0369: 
1:4f996a4:         try {
1:4f996a4:             server.setMaxThreads(max);
1:4f996a4:             server.setTimeSlice(slice);
1:4f996a4:             retval = true;
1:4f996a4:         } catch (Exception e) 
1:4f996a4:         {
1:4f996a4:             printErrorForm(localUtil, e, returnMessage, out);
1:4f996a4:         }
1:4f996a4:         return retval;
1:4f996a4:     }
1:eac0369: 
1:eac0369: 
1:4f996a4:     /** 
1:4f996a4:      * Set defaults for logging and tracing (both off)
1:4f996a4:      */
1:4f996a4:     private void setDefaults()
1:4f996a4:     {
1:4f996a4:         logStatus = false;
1:4f996a4:         traceStatus = false;
1:4f996a4:     }
1:4f996a4:     /**
1:4f996a4:      * Get an integer parameter
1:4f996a4:      *
1:db9a013:      * @param request           HttpServetRequest for  forms
1:db9a013:      * @param name              parameter name
1:db9a013:      * @param fieldKey          Key for the name of the field we're reading.
1:db9a013:      * @param localUtil             LocalizedResource to use in localizing messages
1:db9a013:      * @param returnMessage     localized continue message for continue button on error form
1:cee7de4:      * @param out Form PrintWriter
1:4f996a4:      */
1:cee7de4:     private int getIntParameter
1:cee7de4:         (
1:cee7de4:          HttpServletRequest request,
1:cee7de4:          String name,
1:cee7de4:          String fieldKey,
1:cee7de4:          LocalizedResource localUtil,
1:cee7de4:          String returnMessage,
1:cee7de4:          PrintWriter out
1:cee7de4:          )
1:4f996a4:     {
1:4f996a4:         String val = request.getParameter(name);
1:4f996a4:         int retval;
1:4f996a4:         if (val == null || val.equals(""))
1:4f996a4:             return NOT_GIVEN;
1:4f996a4:         try {
1:ce40a31:             retval = Integer.parseInt(val);
1:4f996a4:         } catch (Exception e) {
1:4f996a4:             printErrorForm(localUtil,localUtil.getTextMessage("SRV_InvalidVal",
1:cee7de4:                 val, localUtil.getTextMessage(fieldKey)), returnMessage, out);
1:4f996a4:             return INVALID;
1:4f996a4:         }
1:4f996a4:         if (retval < 0) {
1:4f996a4:         // negative integers not allowed for the parameters we're getting.
1:4f996a4:             printErrorForm(localUtil, localUtil.getTextMessage("SRV_InvalidVal",
1:cee7de4:                  val, localUtil.getTextMessage(fieldKey)), returnMessage, out);
1:4f996a4:             return INVALID;
1:4f996a4:         }
1:4f996a4:         return retval;
1:4f996a4:     }
1:4f996a4:     /**
1:4f996a4:      * Print Derby Network Server banner
1:4f996a4:      */
1:cee7de4:     private void printBanner(LocalizedResource localUtil, PrintWriter out)
1:4f996a4:     {
1:6cc865c:         out.println("<!DOCTYPE html>");
1:6cc865c:         out.println("<html>");        
1:6cc865c:         out.println("<head>");
1:6cc865c:         out.println("<title>"+localUtil.getTextMessage("SRV_Banner")+"</title>");
1:6cc865c:         out.println("</head>");
1:6cc865c:         out.println("<body>");     
1:4f996a4:         out.println("<a href=\"#navskip\">[ " +
1:4f996a4:         localUtil.getTextMessage("SRV_SkipToContent") + " ]</a>");
1:4f996a4:         out.println("  -  <a href=\"" + SERVLET_ADDRESS + "\">[ " +
1:4f996a4:         localUtil.getTextMessage("SRV_BackToMain") + " ]</a>");
1:6cc865c:         out.println("<hr>");
1:6cc865c:         out.println("<h1>"+localUtil.getTextMessage("SRV_Banner")+"</h1>");
1:6cc865c:         out.println("<hr>");
1:4f996a4:     }
1:6cc865c: 
1:4f996a4:     /**
1:4f996a4:      * Determine the locale file needed for this browsers preferences
1:4f996a4:      * Defaults to the settings for derby.locale and derby.codeset if set
1:db9a013:      *      English otherwise if browsers preferences can't be found
1:4f996a4:      *
1:db9a013:      * @param request           HttpServetRequest for forms
1:cee7de4:      * @param locale                Name of locale (return arg)
1:4f996a4:      * @return the appUI which fits the browsers preferences
1:4f996a4:      */
1:cee7de4:     private LocalizedResource getCurrentAppUI(HttpServletRequest request, String[] locale )
1:4f996a4:     {
1:4f996a4:         LocalizedResource localUtil;
1:4f996a4:         String acceptLanguage = request.getHeader("Accept-Language");
1:953afd7:         localUtil = new LocalizedResource(SERVLET_PROP_MESSAGES);
1:4f996a4:         // if no language specified use one set by derby.locale, derby.codeset
1:cee7de4:         locale[ 0 ] = null;
1:4f996a4:         if (acceptLanguage == null)
1:4f996a4:         {
1:4f996a4:             return localUtil;
1:4f996a4:         }
1:4f996a4:         // Use a tokenizer ot separate acceptable languages
1:4f996a4:         StringTokenizer tokenizer = new StringTokenizer(acceptLanguage, ",");
1:4f996a4:         while (tokenizer.hasMoreTokens())
1:4f996a4:         {
1:4f996a4:             //Get the next acceptable language
1:4f996a4:             String lang = tokenizer.nextToken();
1:4f996a4:             lang = getLocStringFromLanguage(lang);
1:4f996a4:             int langindex = translationAvailable(lang);
1:4f996a4:             // have we found one
1:4f996a4:             if (langindex != -1)
1:4f996a4:             {
1:4f996a4:                 localUtil.init(null, lang, SERVLET_PROP_MESSAGES);
1:4f996a4:                 // locale will be passed to server, server routines will get set appropriately
1:cee7de4:                 locale[ 0 ] = lang;
1:4f996a4:                 return localUtil;
1:4f996a4:             }
1:4f996a4:         }
1:4f996a4:         // nothing worked use defaults
1:4f996a4:         return localUtil;
1:4f996a4:         
1:4f996a4:     }
1:4f996a4:     /**
1:4f996a4:      * Get locale string from language which may have qvalue set
1:4f996a4:      * 
1:db9a013:      * @param lang  language string to parse
1:4f996a4:      *
1:4f996a4:      * @return stripped language string to use in matching
1:4f996a4:      */
1:4f996a4:     private String getLocStringFromLanguage(String lang)
1:4f996a4:     {
1:4f996a4:         int semi;
1:4f996a4:         // Cut off any q-value that might come after a semi-colon
1:4f996a4:         if ((semi = lang.indexOf(';')) != -1)
1:4f996a4:         {
1:4f996a4:             lang = lang.substring(0, semi);
1:4f996a4:         }
1:4f996a4:         // trim any whitespace and fix the code, as some browsers might send a bad format
1:4f996a4:         lang = fixLanguageCode(lang.trim());
1:4f996a4:         return lang;
1:4f996a4:     }
1:4f996a4:     /**
1:4f996a4:      * Check if the required translation is available
1:4f996a4:      *
1:db9a013:      * @param lang  language we are looking for
1:4f996a4:      * 
1:4f996a4:      * @return index into language array if found, -1 otherwise;
1:4f996a4:      */
1:4f996a4:     private int translationAvailable(String lang)
1:4f996a4:     {
1:4f996a4:         // assert lang == fixLanguageCode(lang)
1:4f996a4:         // we don't need to use toUpperCase() anymore, as the lang is already fixed
1:4f996a4:         for (int i = 0; i < knownLang.length; i++)
1:4f996a4:             if (knownLang[i].equals(lang))
1:4f996a4:                 return i;
1:4f996a4:         return -1;
1:4f996a4:     }
1:4f996a4:     
1:4f996a4:     /**
1:4f996a4:      * Fix the language code, as some browsers send then in a bad format (for instance, 
1:4f996a4:      * Firefox sends en-us instead of en_US).
1:4f996a4:      *
1:db9a013:      * @param lang  language to be fixed
1:4f996a4:      * 
1:4f996a4:      * @return fixed version of the language, with _ separating parts and country in upper case
1:4f996a4:      */
1:4f996a4:     private String fixLanguageCode( String lang ) {
1:4f996a4:         int index = lang.indexOf('-');
1:4f996a4:         if ( index != -1 ) {        
1:4f996a4:             return fixLanguageCode( lang, index );
1:4f996a4:         }
1:4f996a4:         index = lang.indexOf('_');
1:4f996a4:         if ( index != -1 ) {        
1:4f996a4:             return fixLanguageCode( lang, index );
1:4f996a4:         }
1:4f996a4:         return lang;
1:4f996a4:     }
1:4551a6e: 
1:4f996a4:     private String fixLanguageCode(String lang, int index) {
1:4f996a4:         return lang.substring(0,index) + "_" + lang.substring(index+1).toUpperCase(Locale.ENGLISH);
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * get an HTML labelled message from the resource bundle file, according to
1:4f996a4:      * the given key.
1:4f996a4:      */
1:4f996a4:     private String getHtmlLabelledMessageInstance(LocalizedResource localUtil,
1:5ea999a:                                                   String key, String id) {
1:eac0369: 
1:4f996a4:         if (id == null)
1:4f996a4:             id = "";
1:eac0369: 
1:4f996a4:         return ("<label for='" + id + "'>" + localUtil.getTextMessage(key) +
1:4f996a4:             "</label>");
1:eac0369: 
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Print the received string as a header.
1:4f996a4:      * @param str The string to be printed as a header.
1:cee7de4:      * @param out Form PrintWriter
1:4f996a4:      */
1:cee7de4:     private void printAsContentHeader(String str, PrintWriter out) {
1:4f996a4:         out.println("<a name=\"navskip\"></a><h2>" + str + "</h2>");
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * If the received string has one or more single quotes
1:4f996a4:      * in it, replace each one with the HTML escape-code
1:4f996a4:      * for a single quote (apostrophe) so that the string 
1:4f996a4:      * can be properly displayed on a submit button.
1:4f996a4:      * @param str The string in which we want to escape
1:4f996a4:      *  single quotes.
1:4f996a4:      */
1:4f996a4:     private String escapeSingleQuotes(String str) {
1:eac0369: 
1:4f996a4:         if ((str == null) || (str.indexOf("'") < 0))
1:4f996a4:             return str;
1:eac0369: 
1:4f996a4:         char [] cA = str.toCharArray();
1:eac0369: 
1:4f996a4:         // Worst (and extremely unlikely) case is every 
1:4f996a4:         // character is a single quote, which means the
1:8dc2ebc:         // escaped string would need to be 5 times as long.
1:8dc2ebc:         char [] result = new char[5*cA.length];
1:eac0369: 
1:4f996a4:         int j = 0;
1:4f996a4:         for (int i = 0; i < cA.length; i++) {
1:eac0369: 
1:4f996a4:             if (cA[i] == '\'') {
1:4f996a4:                 result[j++] = '&';
1:4f996a4:                 result[j++] = '#';
1:4f996a4:                 result[j++] = '3';
1:4f996a4:                 result[j++] = '9';
1:4f996a4:                 result[j++] = ';';
1:4f996a4:             }
1:4f996a4:             else
1:4f996a4:                 result[j++] = cA[i];
1:eac0369: 
1:4f996a4:         }
1:eac0369: 
1:4f996a4:         return new String(result, 0, j);
1:eac0369: 
1:4f996a4:     }
1:eac0369: 
1:8dc2ebc:     /**
1:8dc2ebc:      * Escapes potentially dangerous characters in data written to the browser.
1:8dc2ebc:      * <p>
1:8dc2ebc:      * <em>NOTE</em>: This is a poor mans implementation - it doesn't protect
1:8dc2ebc:      * against all kinds of attacks, and it cannot be used in all contexts.
2:4551a6e:      *
1:8dc2ebc:      * @param str the string to escape
1:8dc2ebc:      * @return A sanitized string.
1:4551a6e:      */
1:8dc2ebc:     private String escapeHTML(String str) {
1:8dc2ebc:         if (str == null || str.length() == 0) {
1:8dc2ebc:             return str;
1:4551a6e:         }
1:8dc2ebc:         // Replaced characters: ; \ / < > " ' = &
1:8dc2ebc:         char[] cA = str.toCharArray();
1:8dc2ebc:         char[] result = new char[5 * cA.length];
1:8dc2ebc:         int j = 0;
1:8dc2ebc:         for (int i=0; i < cA.length; i++) {
1:8dc2ebc:             boolean escaped = true; // controls addition of ;
1:8dc2ebc:             char c = cA[i];
1:8dc2ebc:             switch (c) {
1:8dc2ebc:                 case ';':
1:8dc2ebc:                     result[j++] = '&';
1:8dc2ebc:                     result[j++] = '#';
1:8dc2ebc:                     result[j++] = '5';
1:8dc2ebc:                     result[j++] = '9';
1:8dc2ebc:                     break;
1:8dc2ebc:                 case '\\':
1:8dc2ebc:                     result[j++] = '&';
1:8dc2ebc:                     result[j++] = '#';
1:8dc2ebc:                     result[j++] = '9';
1:8dc2ebc:                     result[j++] = '2';
1:8dc2ebc:                     break;
1:8dc2ebc:                 case '/':
1:8dc2ebc:                     result[j++] = '&';
1:8dc2ebc:                     result[j++] = '#';
1:8dc2ebc:                     result[j++] = '4';
1:8dc2ebc:                     result[j++] = '7';
1:8dc2ebc:                     break;
1:8dc2ebc:                 case '<':
1:8dc2ebc:                     result[j++] = '&';
1:8dc2ebc:                     result[j++] = 'l';
1:8dc2ebc:                     result[j++] = 't';
1:8dc2ebc:                     break;
1:8dc2ebc:                 case '>':
1:8dc2ebc:                     result[j++] = '&';
1:8dc2ebc:                     result[j++] = 'g';
1:8dc2ebc:                     result[j++] = 't';
1:8dc2ebc:                     break;
1:8dc2ebc:                 case '"':
1:8dc2ebc:                     result[j++] = '&';
1:8dc2ebc:                     result[j++] = '#';
1:8dc2ebc:                     result[j++] = '3';
1:8dc2ebc:                     result[j++] = '4';
1:8dc2ebc:                     break;
1:8dc2ebc:                 case '\'':
1:8dc2ebc:                     result[j++] = '&';
1:8dc2ebc:                     result[j++] = '#';
1:8dc2ebc:                     result[j++] = '3';
1:8dc2ebc:                     result[j++] = '9';
1:8dc2ebc:                     break;
1:8dc2ebc:                 case '=':
1:8dc2ebc:                     result[j++] = '&';
1:8dc2ebc:                     result[j++] = '#';
1:8dc2ebc:                     result[j++] = '6';
1:8dc2ebc:                     result[j++] = '1';
1:8dc2ebc:                     break;
1:8dc2ebc:                 case '&':
1:8dc2ebc:                     result[j++] = '&';
1:8dc2ebc:                     result[j++] = 'a';
1:8dc2ebc:                     result[j++] = 'm';
1:8dc2ebc:                     result[j++] = 'p';
1:8dc2ebc:                     break;
1:8dc2ebc:                 default:
1:8dc2ebc:                     result[j++] = c;
1:8dc2ebc:                     escaped = false;
1:4551a6e:             }
1:8dc2ebc:             if (escaped) {
1:8dc2ebc:                 result[j++] = ';';
1:4551a6e:             }
1:4551a6e:         }
1:8dc2ebc:         return String.copyValueOf(result, 0, j);
1:4551a6e:     }
1:8dc2ebc: 
1:4f996a4:     private static boolean isServerStarted(NetworkServerControl server, int ntries)
1:4f996a4:     {
1:4f996a4:         for (int i = 1; i <= ntries; i ++)
1:4f996a4:         {
1:4f996a4:             try {
1:4f996a4:                 Thread.sleep(500);
1:4f996a4:                 server.ping();
1:4f996a4:                 return true;
1:4f996a4:             }
1:4f996a4:             catch (Exception e) {
1:4f996a4:                 if (i == ntries)
1:4f996a4:                     return false;
1:4f996a4:             }
1:4f996a4:         }
1:4f996a4:         return false;
1:4f996a4:     }
1:4f996a4:     
1:4551a6e: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:                 maxThreads= Integer.parseInt(val);
1:                 timeSlice= Integer.parseInt(val);
/////////////////////////////////////////////////////////////////////////
1:             out.println( "<h4>"+langUtil.getTextMessage("SRV_MaxThreads", Integer.toString(maxThreads) +"</h4>"));
1:             out.println( "<h4>"+langUtil.getTextMessage("SRV_TimeSlice", Integer.toString(timeSlice) +"</h4>"));
/////////////////////////////////////////////////////////////////////////
1:                      Integer.toString(MAX_CONNECT_TRYS)));
/////////////////////////////////////////////////////////////////////////
1:             retval = Integer.parseInt(val);
commit:0758fb6
/////////////////////////////////////////////////////////////////////////
1:             servThread = AccessController.doPrivileged(
1:                                 new PrivilegedExceptionAction<Thread>() {
1:                                     public Thread run() throws Exception
commit:cee7de4
/////////////////////////////////////////////////////////////////////////
1: 	private final static String[] knownLang =
1:     { "cs","en","es","de_DE","fr","hu","it", "ja_JP","ko_KR","pl","pt_BR","ru","zh_CN","zh_TW" };
1:     // set at initialization
1: 	private int portNumber = 1527;
1: 
1:     // can be overridden by trips through doGet()
1: 	private volatile String tracingDirectory;
0: 	private volatile boolean logStatus= false;	/* Logging off */
0: 	private volatile boolean traceStatus = false;	/* Tracing off */
/////////////////////////////////////////////////////////////////////////
0: 				runServer(langUtil, null, null, null);
/////////////////////////////////////////////////////////////////////////
0:         String formHeader = null;
1: 
1:         String locale[] = new String[ 1 ];
1: 		langUtil = getCurrentAppUI(request, locale);
/////////////////////////////////////////////////////////////////////////
1:         PrintWriter out = new PrintWriter
1:             ( new OutputStreamWriter(response.getOutputStream(), "UTF8"),true );
/////////////////////////////////////////////////////////////////////////
1: 		printBanner(langUtil, out);
0: 				printErrorForm(langUtil, request, e, returnMessage, out);
1: 		server.setClientLocale( locale[ 0 ] );
/////////////////////////////////////////////////////////////////////////
0: 				runServer(langUtil, request, returnMessage, out);
0: 				shutdownServer(langUtil, request, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 				if (logging(langUtil, true, request, returnMessage, out))
0: 				if (logging(langUtil, false, request, returnMessage, out))
0: 				if (traceAll(langUtil, true, request, returnMessage, out))
0: 				if (traceAll(langUtil, false, request, returnMessage, out))
0: 			displayCurrentStatus(request, langUtil, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
1: 			printAsContentHeader(langUtil.getTextMessage("SRV_NotStarted"), out);
/////////////////////////////////////////////////////////////////////////
1:                                        returnMessage, out);
0: 						printErrorForm(langUtil, request, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 					if (traceSession(langUtil, val, session, request, returnMessage, out))
/////////////////////////////////////////////////////////////////////////
1: 			printAsContentHeader(langUtil.getTextMessage("SRV_TraceSessButton"), out);
/////////////////////////////////////////////////////////////////////////
1: 			printAsContentHeader(traceDirMessage, out);
1:                                        returnMessage, out) )
/////////////////////////////////////////////////////////////////////////
0: 				printErrorForm(langUtil, request, e, returnMessage, out);
1: 					"SRV_NewMaxThreads", langUtil, returnMessage, out);
1: 						returnMessage, out);
/////////////////////////////////////////////////////////////////////////
1: 							returnMessage, out))
1: 			printAsContentHeader(netParamMessage, out);
/////////////////////////////////////////////////////////////////////////
1: 	 * @param out Form PrintWriter
1: 	private void runServer
0:         ( LocalizedResource localUtil, HttpServletRequest request, String returnMessage, PrintWriter out )
/////////////////////////////////////////////////////////////////////////
0: 				printErrorForm(localUtil, request, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
1: 	 * @param out Form PrintWriter
1: 	private void printErrorForm
1:         (
1:          LocalizedResource localUtil,
1:          HttpServletRequest request,
1:          Exception e,
1:          String returnMessage,
1:          PrintWriter out
1:          )
1: 		printAsContentHeader(localUtil.getTextMessage("SRV_NetworkServerError"), out);
/////////////////////////////////////////////////////////////////////////
1: 	 * @param out Form PrintWriter
1: 	private void printErrorForm
1:         (
1:          LocalizedResource localUtil,
0:          HttpServletRequest request,
1:          String msg,
1:          String returnMessage,
1:          PrintWriter out
1:          )
1: 		printAsContentHeader(localUtil.getTextMessage("SRV_NetworkServerError"), out);
/////////////////////////////////////////////////////////////////////////
1: 	 * @param out Form PrintWriter
1: 	private void displayCurrentStatus
1:         (
0:          HttpServletRequest request,
1:          LocalizedResource localUtil,
1:          String returnMessage,
1:          PrintWriter out
1:          )
1: 			printAsContentHeader(localUtil.getTextMessage("SRV_Started"), out);
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, request, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
1: 	 * @param out Form PrintWriter
1: 	private boolean shutdownServer
1:         (
1:          LocalizedResource localUtil,
0:          HttpServletRequest request,
1:          String returnMessage,
1:          PrintWriter out
1:          )
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, request, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
1: 	 * @param out Form PrintWriter
1: 	private boolean logging
1:         (
1:          LocalizedResource localUtil,
1:          boolean val,
0:          HttpServletRequest request,
1:          String returnMessage,
1:          PrintWriter out
1:          )
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, request, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
1: 	 * @param out Form PrintWriter
1: 	private boolean traceAll
1:         (
1:          LocalizedResource localUtil,
1:          boolean val,
0:          HttpServletRequest request,
1:          String returnMessage,
1:          PrintWriter out
1:          )
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, request, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
1: 	 * @param out Form PrintWriter
1: 	private boolean traceSession
1:         (
1:          LocalizedResource localUtil,
1:          boolean val,
1:          int session,
0:          HttpServletRequest request,
1:          String returnMessage,
1:          PrintWriter out
1:          )
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, request, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 	 * @param returnMessage		localized continue message for continue button on error form	
1: 	 * @param out Form PrintWriter
1: 	private boolean traceDirectory
1:         (
1:          LocalizedResource localUtil,
1:          String traceDirectory,
0:          HttpServletRequest request,
1:          String returnMessage,
1:          PrintWriter out
1:          )
1:                                          localUtil.getTextMessage("SRV_TraceDir")), returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, request, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 	 * @param returnMessage		localized continue message for continue button on error form	
1: 	 * @param out Form PrintWriter
1: 	private boolean setNetParam
1:         (
1:          LocalizedResource localUtil,
1:          int max,
1:          int slice,
0:          HttpServletRequest request,
1:          String returnMessage,
1:          PrintWriter out
1:          )
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, request, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 	 * @param returnMessage		localized continue message for continue button on error form	
1: 	 * @param out Form PrintWriter
1: 	private int getIntParameter
1:         (
0:          HttpServletRequest request,
1:          String name,
1:          String fieldKey,
1:          LocalizedResource localUtil,
1:          String returnMessage,
1:          PrintWriter out
1:          )
/////////////////////////////////////////////////////////////////////////
1:                 val, localUtil.getTextMessage(fieldKey)), returnMessage, out);
1:                  val, localUtil.getTextMessage(fieldKey)), returnMessage, out);
/////////////////////////////////////////////////////////////////////////
1: 	private void printBanner(LocalizedResource localUtil, PrintWriter out)
/////////////////////////////////////////////////////////////////////////
1: 	 * @param locale                Name of locale (return arg)
1: 	private LocalizedResource getCurrentAppUI(HttpServletRequest request, String[] locale )
1: 		locale[ 0 ] = null;
/////////////////////////////////////////////////////////////////////////
1: 				locale[ 0 ] = lang;
/////////////////////////////////////////////////////////////////////////
1: 	 * @param out Form PrintWriter
1: 	private void printAsContentHeader(String str, PrintWriter out) {
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:953afd7
/////////////////////////////////////////////////////////////////////////
1:                 LocalizedResource langUtil = new LocalizedResource(SERVLET_PROP_MESSAGES);
/////////////////////////////////////////////////////////////////////////
1:         localUtil = new LocalizedResource(SERVLET_PROP_MESSAGES);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:db9a013
/////////////////////////////////////////////////////////////////////////
1:     private volatile boolean logStatus= false;  /* Logging off */
1:     private volatile boolean traceStatus = false;   /* Tracing off */
/////////////////////////////////////////////////////////////////////////
1:         if (form.equals(startMessage))
/////////////////////////////////////////////////////////////////////////
1:         out.println( "</body>" );
/////////////////////////////////////////////////////////////////////////
1:      *  Start the network server and attempt to connect to it before
1:      *  returning
1:      * @param returnMessage localized continue message for continue button on error form
1:      *      Network Server during initialization
/////////////////////////////////////////////////////////////////////////
1:      *  Display an error form
1:      * @param localUtil LocalizedResource to use to translate messages
1:      * @param e     Exception to be displayed
1:      * @param returnMessage localized continue message for continue button on error form
/////////////////////////////////////////////////////////////////////////
1:      *  Display an error form
1:      * @param localUtil LocalizedResource to use to translate messages
1:      * @param msg   String to be displayed
1:      * @param returnMessage localized continue message for continue button on error form
/////////////////////////////////////////////////////////////////////////
1:         out.println( "</body>" );
1:      *  Display the current Network server status
1:      * @param localUtil     LocalizedResource to use for localizing messages
1:      * @param returnMessage localized continue message for continue button on error form
/////////////////////////////////////////////////////////////////////////
1:      *  Get the currrent server status by using test connection
/////////////////////////////////////////////////////////////////////////
1:      *  Shutdown the network server
1:      * @param localUtil LocalizedResource to use to translate messages
1:      * @param returnMessage localized continue message for continue button on error form
/////////////////////////////////////////////////////////////////////////
1:      *  Turn logging of connections on
1:      * @param localUtil LocalizedResource to use to translate messages
1:      * @param returnMessage localized continue message for continue button on error form
/////////////////////////////////////////////////////////////////////////
1:      *  Change tracing for all sessions
1:      * @param localUtil LocalizedResource to use to translate messages
1:      * @param val   if true, turn tracing on, if false turn it off
1:      * @param returnMessage localized continue message for continue button on error form
/////////////////////////////////////////////////////////////////////////
1:      *  Change tracing for a given session
1:      * @param localUtil LocalizedResource to use to translate messages
1:      * @param val   if true, turn tracing on, if false turn it off
1:      * @param session   session to trace
1:      * @param returnMessage localized continue message for continue button on error form
/////////////////////////////////////////////////////////////////////////
1:      * @param localUtil LocalizedResource to use to translate messages
1:      * @param returnMessage     localized continue message for continue button on error form
/////////////////////////////////////////////////////////////////////////
1:      * @param localUtil LocalizedResource to use to translate messages
1:      * @param max               maximum number of threads
1:      * @param slice             time slice for each connection
1:      * @param returnMessage     localized continue message for continue button on error form
/////////////////////////////////////////////////////////////////////////
1:      * @param request           HttpServetRequest for  forms
1:      * @param name              parameter name
1:      * @param fieldKey          Key for the name of the field we're reading.
1:      * @param localUtil             LocalizedResource to use in localizing messages
1:      * @param returnMessage     localized continue message for continue button on error form
/////////////////////////////////////////////////////////////////////////
0:             retval = (new Integer(val)).intValue();
/////////////////////////////////////////////////////////////////////////
1:      *      English otherwise if browsers preferences can't be found
1:      * @param request           HttpServetRequest for forms
/////////////////////////////////////////////////////////////////////////
1:      * @param lang  language string to parse
/////////////////////////////////////////////////////////////////////////
1:      * @param lang  language we are looking for
/////////////////////////////////////////////////////////////////////////
1:      * @param lang  language to be fixed
commit:db4c995
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.OutputStreamWriter;
1: import java.io.PrintWriter;
1: import java.net.InetAddress;
1: import java.util.Locale;
1: import java.util.Properties;
1: import java.util.StringTokenizer;
1: import javax.servlet.ServletConfig;
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4f996a4
/////////////////////////////////////////////////////////////////////////
1:     This servlet can be used to start Derby Network Server from a remote location.
1:     <P>
1:     These servlet configuration parameters are understood by this servlet.
1:     <UL>
1:     <LI><PRE>portNumber</PRE> - Port number to use. The default is 1527.</LI>
1:     <LI><PRE>startNetworkServerOnInit</PRE> - Starts the Derby Network Server at servlet 
1:             initialization if 'true'.</LI>
1:     <LI><PRE>tracingDirectory</PRE> - Directory for trace files</LI>
1:     </UL>
1:     private final static int MAX_CONNECT_TRYS = 20;
1:     private final static String SERVLET_PROP_MESSAGES =  "org.apache.derby.loc.drda.servlet";
1:     private final static String SERVLET_ADDRESS = "derbynet";
0:     private final static String[] knownLang =
1:     private String host = "localhost";
0:     private int portNumber = 1527;
0:     private volatile String tracingDirectory;
0:     private volatile boolean logStatus= false;    /* Logging off */
0:     private volatile boolean traceStatus = false;    /* Tracing off */
1:     private final static int NOT_GIVEN = -2;
1:     private final static int INVALID = -3;
1:     private NetworkServerControl server;
1:     /**
1:         Initialize the servlet.
1:         Configuration parameters:
1:         <UL>
1:         <LI><PRE>portNumber</PRE> - Port number</LI>
1:         <LI><PRE>host</PRE> - Host name</LI>
1:         <LI><PRE>traceDirectory</PRE> - location of trace directory</LI>
1:         <LI><PRE>startNetworkServerOnInit</PRE> - start the server on initialization</LI>
1:         </UL>
1:     */
1:     public void init(ServletConfig config)
1:         throws ServletException
1:     {
1:         
1:         String port = config.getInitParameter("portNumber");
1:         if (port != null) {
1:             int p = Integer.parseInt(port);
1:             if (p > 0)
1:                 portNumber = p;
1:         }
1:         String hostName = config.getInitParameter("host");
1:         if (hostName != null)
1:             host = hostName;
1:         this.tracingDirectory = config.getInitParameter("tracingDirectory");
1:         
1:         if ( this.tracingDirectory == null ) {
1:             this.tracingDirectory = "";
1:         }
1:         String startup = config.getInitParameter("startNetworkServerOnInit");
1:         // test if the server is already running
1:         try {
1:             //don't send output to console
1:             if (server == null) {
1:                 server = new NetworkServerControl(InetAddress.getByName(host), portNumber);
1:                 // assert this.tracingDirectory != null
1:                 if  ( ! this.tracingDirectory.trim().equals("")) {
1:                     server.setTraceDirectory(this.tracingDirectory);
1:                 }
1:             }
1:             
1:             if (isServerStarted(server,1))
1:                 return;
1:         } catch (Exception e) {}
1:         if (startup != null) {
1:             boolean start = Boolean.valueOf(startup).booleanValue();
1:             if (start)
1:             {
1:                 runServer(langUtil, null, null);
1:                 return;
1:             }
1:         }
1:     }
1:     /**
1:         Get the form of NetServlet. Provides buttons and forms to control the
1:         Network server.
1:     */
1:             throws ServletException, IOException
1:     {
1:         String logOnMessage;
1:         String logOffMessage;
1:         String traceOnMessage;
1:         String traceOffMessage;
1:         String traceOnOffMessage;
1:         String startMessage;
1:         String stopMessage;
1:         String returnMessage;
1:         String traceSessionMessage;
1:         String traceDirMessage;
1:         String netParamMessage;
1:         LocalizedResource langUtil;
1:         
0:         langUtil = getCurrentAppUI(request, locale);
1:         response.setContentType("text/html; charset=UTF-8");
1:         
1:         //prevent caching of the servlet since contents can change - beetle 4649
1:         response.setHeader("Cache-Control", "no-cache,no-store");
/////////////////////////////////////////////////////////////////////////
1:         
1:         //inialize messages
1:         logOnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_LogOn"));
1:         logOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_LogOff"));
1:         traceOnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOn"));
1:         traceOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOff"));
1:         startMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Start"));
1:         stopMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Stop"));
1:         traceSessionMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceSessButton"));
1:         traceOnOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOnOff"));
1:         returnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Return"));
1:         traceDirMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceDir"));
1:         netParamMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_NetParam"));
0:         printBanner(langUtil, out);
1:         // set up a server we can use
1:         if (server == null) {
1:             try {
1:                 server = new NetworkServerControl();
1:             }catch (Exception e) {
1:                 printErrorForm(langUtil, e, returnMessage, out);
1:                 return;
1:             }
1:         }
0:         server.setClientLocale( locale[ 0 ] );
1:         String form = getForm(request);
1:         String doAction = getDoAction(request);
1:         // if doAction is set, use it to determine form
1:         if (doAction != null )
1:         {
1:             if (doAction.equals(traceOnOffMessage))
1:                 form = traceSessionMessage;
1:             else
1:                 form = doAction;
1:         }
1:         // if no form, determine form based on server status
1:         boolean serverStatus = getServerStatus();
1:         if (form == null)
1:         {
1:             if (serverStatus)
1:                 form = startMessage;
1:             else
1:                 form = stopMessage;
1:         }
1:         else if (form.equals(startMessage))
1:         {
1:             if (!serverStatus)  {
1:                 runServer(langUtil, returnMessage, out);
1:             }
1:         }
1:         else if (form.equals(stopMessage))
1:         {
1:             if (serverStatus)   {
1:                 shutdownServer(langUtil, returnMessage, out);
1:             }
1:             setDefaults();
1:                     
1:         }
1:         {
1:             // check if server is still running and use that to determine which form
1:             if (serverStatus)
1:             {
1:                 form = startMessage;
1:             }
1:             else
1:             {
1:                 form = stopMessage;
1:             }
1:         }
1:         out.println( formHeader);
1:         // display forms
1:         form = escapeSingleQuotes(form);
1:         doAction = escapeSingleQuotes(doAction);
0:           if (form.equals(startMessage))
1:         {
1:             String logButton = getLogging(request);
1:             String traceButton = getTrace(request);
1:             if (logButton !=  null && logButton.equals(logOnMessage))
1:             {
1:                 if (logging(langUtil, true, returnMessage, out))
1:                     logStatus = true;
1:             }
1:             if (logButton !=  null && logButton.equals(logOffMessage))
1:             {
1:                 if (logging(langUtil, false, returnMessage, out))
1:                     logStatus = false;
1:             }
1:             if (traceButton !=  null && traceButton.equals(traceOnMessage))
1:             {
1:                 if (traceAll(langUtil, true, returnMessage, out))
1:                     traceStatus = true;
1:             }
1:             if (traceButton !=  null && traceButton.equals(traceOffMessage))
1:             {
1:                 if (traceAll(langUtil, false, returnMessage, out))
1:                     traceStatus = false;
1:             }
1:             displayCurrentStatus(langUtil, returnMessage, out);
1:             out.println( "<h4>"+langUtil.getTextMessage("SRV_StopButton")+"</h4>" );
1:             out.println( "<INPUT type=submit name=form value='"+ stopMessage + "'>" );
1:             out.println( "<h4>"+langUtil.getTextMessage("SRV_LogButton2")+"</h4>" );
1:             if (logStatus)
1:             {
1:                 out.println( "<INPUT type=submit name=logform value='"+logOffMessage + "'>" );
1:             }
1:             else
1:             {
1:                 out.println( "<INPUT type=submit name=logform value='"+logOnMessage + "'>" );
1:             }
1:             out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceButton2")+"</h4>" );
1:             if (traceStatus)
1:             {
1:                 out.println( "<INPUT type=submit name=traceform value='"+traceOffMessage+ "'>" );
1:             }
1:             else
1:             {
1:                 out.println( "<INPUT type=submit name=traceform value='"+traceOnMessage + "'>" );
1:             }
1:             out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceSession")+"</h4>" );
1:             out.println( "<INPUT type=submit name=form value='"+ traceSessionMessage + "'>" );
1:             out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceDirButton")+"</h4>" );
1:             out.println( "<INPUT type=submit name=form value='"+ traceDirMessage + "'>" );
1:             out.println( "<h4>"+langUtil.getTextMessage("SRV_ThreadButton")+"</h4>" );
1:             out.println( "<INPUT type=submit name=form value='"+ netParamMessage+ "'>" );
1:         }
1:         else if (form.equals(stopMessage))
1:         {
0:             printAsContentHeader(langUtil.getTextMessage("SRV_NotStarted"), out);
1:             String logButton = getLogging(request);
1:             String traceButton =  getTrace(request);
1:             if (logButton !=  null && logButton.equals(logOnMessage))
1:                 logStatus = true;
1:             if (logButton !=  null && logButton.equals(logOffMessage))
1:                 logStatus = false;
1:             if (traceButton !=  null && traceButton.equals(traceOnMessage))
1:                 traceStatus = true;
1:             if (traceButton !=  null && traceButton.equals(traceOffMessage))
1:                 traceStatus = false;
1:             if (logStatus)
1:             {
1:                 out.println( "<h4>"+langUtil.getTextMessage("SRV_LogOffButton")+"</h4>" );
1:                 out.println( "<INPUT type=submit name=logform value='"+logOffMessage + "'>" );
1:             }
1:             else
1:             {
1:                 out.println( "<h4>"+langUtil.getTextMessage("SRV_LogOnButton")+"</h4>" );
1:                 out.println( "<INPUT type=submit name=logform value='"+logOnMessage + "'>" );
1:             }
1:             if (traceStatus)
1:             {
1:                 out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceOffButton")+"</h4>" );
1:                 out.println( "<INPUT type=submit name=traceform value='"+traceOffMessage + "'>" );
1:             }
1:             else
1:             {
1:                 out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceOnButton")+"</h4>" );
1:                 out.println( "<INPUT type=submit name=traceform value='"+traceOnMessage + "'>" );
1:             }
1:             out.println( "<h4>"+langUtil.getTextMessage("SRV_StartButton")+"</h4>" );
1:             out.println( "<INPUT type=submit name=form value='"+startMessage+ "'>" );
1:         }
1:         else if (form.equals(traceSessionMessage))
1:         {
1:             if (doAction != null)
1:             {
1:                 if (doAction.equals(traceOnOffMessage))
1:                 {
1:                     String sessionid = request.getParameter("sessionid");
1:                     try {
1:                         printErrorForm(langUtil,
1:                             langUtil.getTextMessage("SRV_InvalidVal",
1:                             sessionid, langUtil.getTextMessage("SRV_SessionID")),
1:                         return;
1:                     }
1:                     Properties p;
1:                     try {
1:                         p = server.getCurrentProperties();
1:                     } catch (Exception e) {
1:                         printErrorForm(langUtil, e, returnMessage, out);
1:                         return;
1:                     }
1:                     // if it's on, turn it off, if its off, turn it on
1:                     boolean val;
1:                     if (p.getProperty(Property.DRDA_PROP_TRACE+sessionid) != null)
1:                         val = false;
1:                     else
1:                         val = true;
1:                     {
1:                     }
1:                     else
1:                         return;
1:                         
1:                 }
1:             }
0:             printAsContentHeader(langUtil.getTextMessage("SRV_TraceSessButton"), out);
1:             out.println( "<h4>" + getHtmlLabelledMessageInstance(langUtil,
1:                 "SRV_SessionID", "sessionId") + "</h4>");
1:             out.println( "<INPUT type=text name=sessionid size=10 maxlength=10 " +
1:                 "id='sessionId' value=''>");
1:             out.println( "<h4> </h4>");
1:             out.println( "<INPUT type=submit name=doaction value='"+traceOnOffMessage+ "'>" );
1:             out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
1:         }
1:         else if (form.equals(traceDirMessage))
1:         {
1:             boolean set = false;
1:             String traceDirectory = null;
0:             printAsContentHeader(traceDirMessage, out);
1:             if (doAction != null)
1:             {
1:                 if (doAction.equals(traceDirMessage))
1:                 {
1:                     traceDirectory = getParam(request, "tracedirectory");
1:                     if (traceDirectory(langUtil, traceDirectory,
1:                         set = true;
1:                     else
1:                         return;
1:                     
1:                 }
1:             }
1:             if (set)
1:             {
1:                 out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
1:             }
1:             else
1:             {
1:                 out.println( "<h4>" + getHtmlLabelledMessageInstance(langUtil,
1:                     "SRV_TraceDir", "tracedir") + "</h4>");
1:                 out.println( "<INPUT type=text name=tracedirectory size=60 maxlength=256 " +
1:                 out.println( "<h4> </h4>");
1:                 out.println( "<INPUT type=submit name=doaction value='"+traceDirMessage+ "'>" );
1:                 out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
1:             }
1:         }
1:         else if (form.equals(netParamMessage))
1:         {
1:             int maxThreads;
1:             int timeSlice;
1:             String maxName = langUtil.getTextMessage("SRV_NewMaxThreads");
1:             String sliceName = langUtil.getTextMessage("SRV_NewTimeSlice");
1:             try {
1:                 Properties p = server.getCurrentProperties();
1:                 String val = p.getProperty(Property.DRDA_PROP_MAXTHREADS);
0:                 maxThreads= (new Integer(val)).intValue();
1:                 val = p.getProperty(Property.DRDA_PROP_TIMESLICE);
0:                 timeSlice= (new Integer(val)).intValue();
1:             } catch (Exception e) {
1:                 printErrorForm(langUtil, e, returnMessage, out);
1:                 return;
1:             }
1:             if (doAction != null && doAction.equals(netParamMessage))
1:             {
1:                 int newMaxThreads = getIntParameter(request, "newmaxthreads", 
0:                     "SRV_NewMaxThreads", langUtil, returnMessage, out);
1:                 int newTimeSlice = (newMaxThreads == INVALID) ? NOT_GIVEN :
1:                     getIntParameter(request, "newtimeslice", "SRV_NewTimeSlice", langUtil, 
0:                         returnMessage, out);
1:                 if ((newMaxThreads == INVALID) || (newTimeSlice == INVALID))
1:                     return;
1:                 else if (!(newMaxThreads == NOT_GIVEN && newTimeSlice == NOT_GIVEN))
1:                 {
1:                     if (newMaxThreads != NOT_GIVEN)
1:                         maxThreads = newMaxThreads;
1:                     if (newTimeSlice != NOT_GIVEN)
1:                         timeSlice = newTimeSlice;
1:                     if (!setNetParam(langUtil, maxThreads, timeSlice,
1:                             returnMessage, out))
1:                         return;
1:                 }
1:             }
1:             
1:             out.println(formHeader);
0:             printAsContentHeader(netParamMessage, out);
0:             out.println( "<h4>"+langUtil.getTextMessage("SRV_MaxThreads", new Integer(maxThreads).toString()) +"</h4>");
0:             out.println( "<h4>"+langUtil.getTextMessage("SRV_TimeSlice", new Integer(timeSlice).toString()) +"</h4>");
1:             out.println( "<h4> </h4>");
1:             out.println( "<h4> <label for='newmaxthreads'>"+maxName+"</label> </h4>");
1:             out.println( "<INPUT type=text name=newmaxthreads size=10 maxlength=10 " +
1:                 "id='newmaxthreads' value=''>" );
1:             out.println( "<h4> <label for='newslice'>"+sliceName+"</label> </h4>");
1:             out.println( "<INPUT type=text name=newtimeslice size=10 maxlength=10 " +
1:                 "id='newslice' value=''>" );
1:             out.println( "<h4> </h4>");
1:             out.println( "<INPUT type=submit name=doaction value='"+netParamMessage+ "'>" );
1:             out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
1:         }
1:         else
1:         {
1:             System.out.println("Internal Error: Unknown form, "+ form);
1:         }
1:         out.println( "</body>" );     
1:     }
1:     /**
1:         Get the form of NetServlet. Provides a buttons and form to control the
1:         Network server
1:     */
1:     public void doPost (HttpServletRequest request, HttpServletResponse response)
1:             throws ServletException, IOException
1:     {
1:         // simply call the doGet()
1:         doGet(request, response);
1:     }
1:     private String getForm(HttpServletRequest request)  throws java.io.IOException{
1:         return getParam(request, "form");
1:     }
1:     private String getDoAction(HttpServletRequest request) throws java.io.IOException {
1:         return getParam(request, "doaction");
1:     }
1:     private String getLogging(HttpServletRequest request) throws java.io.IOException {
1:         return getParam(request, "logform");
1:     }
1:     private String getTrace(HttpServletRequest request) throws java.io.IOException {
1:         return getParam(request, "traceform");
1:     }
1:     /**
1:      *  get UTF8 parameter value and decode international characters
1:      *  @param request   HttpServletRequest
1:      *  @param paramName  Parameter name
1:      *  @return decoded String
1:      */
1:     private String getParam(HttpServletRequest request, String paramName) throws
1:     java.io.IOException { 
1:                 
1:         String value = request.getParameter(paramName);
1:     }
1:     /**
0:      *    Start the network server and attempt to connect to it before
0:      *    returning
1:      *
1:      * @param localUtil LocalizedResource to use to translate messages
0:      * @param returnMessage    localized continue message for continue button on error form    
0:      * @param out Form PrintWriter
1:      * @exception ServletException throws an exception if error in starting the 
0:      *         Network Server during initialization
1:      */
0:     private void runServer
1:         throws ServletException
1:     {
1:         final Runnable service = new Runnable() {
1:             public void run() {
1:                 try {
1:                     //Echo server output to console
1:                     NetworkServerControl runserver = new
1:                         NetworkServerControl(InetAddress.getByName(host),
1:                                              portNumber);
1:                     runserver.start(null);
1:                 }
1:                 catch (Exception e) {
1:                     throw new RuntimeException(e.getMessage());
1:                 }
1:             }
1:         };
1:         Thread servThread = null;
1:         try {
0:             servThread = (Thread) AccessController.doPrivileged(
0:                                 new PrivilegedExceptionAction() {
0:                                     public Object run() throws Exception
1:                                     {
1:                                         return new Thread(service);
1:                                     }
1:                                 }
1:                             );
1:         }
1:         catch (Exception e) {
1:             throw new RuntimeException(e.getMessage());
1:         }
1:         servThread.start();
1:         // try to connect to server
1:         try {
1:             boolean connectWorked = false;
1:             int t = 0;
1:             do
1:             {
1:                 t++;
1:                 try {
1:                         Thread.sleep(100);
1:                 } catch (InterruptedException ie) {
1:                     throw new ServletException(localUtil.getTextMessage("SRV_Interupt"));
1:                 }
1:                 try {
1:                     if (isServerStarted(server,1))
1:                         connectWorked = true;
1:                 } catch (Exception e) {} //ignore error we'll just try again
1:                 
1:             }while (!connectWorked && t < MAX_CONNECT_TRYS);
1:             if (t >= MAX_CONNECT_TRYS)
1:                 throw new Exception(localUtil.getTextMessage("SRV_MaxTrys",
0:                     new Integer(MAX_CONNECT_TRYS).toString()));
1:             // turn logging on if required
1:             if (logStatus)
1:                 server.logConnections(true);
1:             // turn tracing on
1:             if (traceStatus)
1:                 server.trace(true);
1:         }catch (Exception e) {
1:             if (out != null)
1:                 printErrorForm(localUtil, e, returnMessage, out);
1:             else
1:                 throw new ServletException(e.getMessage());
1:         }
1:     }
1:     /**
0:      *    Display an error form
1:      *
0:      * @param localUtil    LocalizedResource to use to translate messages
0:      * @param e        Exception to be displayed
0:      * @param returnMessage    localized continue message for continue button on error form
0:      * @param out Form PrintWriter
1:      */
0:     private void printErrorForm
1:     {
0:         printAsContentHeader(localUtil.getTextMessage("SRV_NetworkServerError"), out);
1:         out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
1:         out.println( "</body>" );
1:         out.println( "</html>" );
1:     }
1:     /**
0:      *    Display an error form
1:      *
0:      * @param localUtil    LocalizedResource to use to translate messages
0:      * @param msg    String to be displayed
0:      * @param out Form PrintWriter
0:      * @param returnMessage    localized continue message for continue button on error form
1:      */
0:     private void printErrorForm
1:     {
0:         printAsContentHeader(localUtil.getTextMessage("SRV_NetworkServerError"), out);
1:         out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
1:         out.println( "</body>" );     
1:         out.println( "</html>" ); 
1:     }
1:     /**
0:      *    Display the current Network server status
1:      *
0:      * @param localUtil        LocalizedResource to use for localizing messages
0:      * @param returnMessage    localized continue message for continue button on error form    
0:      * @param out Form PrintWriter
1:      */
0:     private void displayCurrentStatus
1:     {
1:         try {
0:             printAsContentHeader(localUtil.getTextMessage("SRV_Started"), out);
1:             Properties p = server.getCurrentProperties();
1:             String val = p.getProperty(Property.DRDA_PROP_LOGCONNECTIONS);
1:             if (val.equals("true"))
1:                 logStatus = true;
1:             else
1:                 logStatus = false;
1:             if (logStatus)
1:                 out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusLogOn")+"</h4>");
1:             else
1:                 out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusLogOff")+"</h4>");
1:             val = p.getProperty(Property.DRDA_PROP_TRACEALL);
1:             if (val.equals("true"))
1:                 traceStatus = true;
1:             else
1:                 traceStatus = false;
1:             if (traceStatus)
1:                 out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusTraceOn")+"</h4>");
1:             else
1:                 out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusTraceOff")+"</h4>");
1:             val = p.getProperty(Property.DRDA_PROP_PORTNUMBER);
1:             out.println( "<h4>"+localUtil.getTextMessage("SRV_PortNumber", val)+"</h4>");
1:             
1:         }
1:         catch (Exception e) {
1:             printErrorForm(localUtil, e, returnMessage, out);
1:         }
1:     }
1:     /**
0:      *    Get the currrent server status by using test connection
1:      *
1:      * @return true if server is up and reachable; false; otherwise
1:      */
1:     private boolean getServerStatus()
1:     {
1:         try {
1:             
1:             if (isServerStarted(server,1))
1:                 return true;
1:         } catch (Exception e) {}
1:         return false;
1:     }
1:     /**
0:      *    Shutdown the network server
1:      *
0:      * @param localUtil    LocalizedResource to use to translate messages
0:      * @param returnMessage    localized continue message for continue button on error form    
0:      * @param out Form PrintWriter
1:      * @return true if succeeded; false; otherwise
1:      */
0:     private boolean shutdownServer
1:     {
1:         boolean retval = false;
1:         try {
1:             server.shutdown();
1:             retval = true;
1:         } catch (Exception e) 
1:         {
1:             printErrorForm(localUtil, e, returnMessage, out);
1:         }
1:         return retval;
1:     }
1:     /**
0:      *    Turn logging of connections on
1:      *
0:      * @param localUtil    LocalizedResource to use to translate messages
0:      * @param returnMessage    localized continue message for continue button on error form    
0:      * @param out Form PrintWriter
1:      * @return true if succeeded; false; otherwise
1:      */
0:     private boolean logging
1:     {
1:         boolean retval = false;
1:         try {
1:             server.logConnections(val);
1:             retval = true;
1:         } catch (Exception e) 
1:         {
1:             printErrorForm(localUtil, e, returnMessage, out);
1:         }
1:         return retval;
1:     }
1:     /**
0:      *    Change tracing for all sessions 
1:      *
0:      * @param localUtil    LocalizedResource to use to translate messages
0:      * @param val    if true, turn tracing on, if false turn it off
0:      * @param returnMessage    localized continue message for continue button on error form    
0:      * @param out Form PrintWriter
1:      * @return true if succeeded; false; otherwise
1:      */
0:     private boolean traceAll
1:     {
1:         boolean retval = false;
1:         try {
1:             server.trace(val);
1:             retval = true;
1:         } catch (Exception e) 
1:         {
1:             printErrorForm(localUtil, e, returnMessage, out);
1:         }
1:         return retval;
1:     }
1:     /**
0:      *    Change tracing for a given session
1:      *
0:      * @param localUtil    LocalizedResource to use to translate messages
0:      * @param val    if true, turn tracing on, if false turn it off
0:      * @param session    session to trace
0:      * @param returnMessage    localized continue message for continue button on error form    
0:      * @param out Form PrintWriter
1:      * @return true if succeeded; false; otherwise
1:      */
0:     private boolean traceSession
/////////////////////////////////////////////////////////////////////////
1:     {
1:         boolean retval = false;
1:         try {
1:             server.trace(session, val);
1:             retval = true;
1:         } catch (Exception e) 
1:         {
1:             printErrorForm(localUtil, e, returnMessage, out);
1:         }
1:         return retval;
1:     }
1:     /**
1:      * Set trace directory
1:      *
0:      * @param localUtil    LocalizedResource to use to translate messages
1:      * @param traceDirectory    directory for trace files
0:      * @param returnMessage        localized continue message for continue button on error form    
0:      * @param out Form PrintWriter
1:      * @return true if succeeded; false; otherwise
1:      */
0:     private boolean traceDirectory
1:     {
1:         boolean retval = false;
1:         if ((traceDirectory == null) || traceDirectory.equals("")) {
1:             printErrorForm(localUtil,
1:                 localUtil.getTextMessage("SRV_MissingParam",
1:             return retval;
1:         }
1:         try {
1:             this.tracingDirectory = traceDirectory;
1:             server.setTraceDirectory(traceDirectory);
1:             retval = true;
1:         } catch (Exception e) 
1:         {
1:             printErrorForm(localUtil, e, returnMessage, out);
1:         }
1:         return retval;
1:     }
1:     /**
1:      * Set Network server parameters
1:      *
0:      * @param localUtil    LocalizedResource to use to translate messages
0:      * @param max                maximum number of threads
0:      * @param slice                time slice for each connection
0:      * @param returnMessage        localized continue message for continue button on error form    
0:      * @param out Form PrintWriter
1:      * @return true if succeeded; false; otherwise
1:      */
0:     private boolean setNetParam
/////////////////////////////////////////////////////////////////////////
1:     {
1:         boolean retval = false;
1:         try {
1:             server.setMaxThreads(max);
1:             server.setTimeSlice(slice);
1:             retval = true;
1:         } catch (Exception e) 
1:         {
1:             printErrorForm(localUtil, e, returnMessage, out);
1:         }
1:         return retval;
1:     }
1:     /** 
1:      * Set defaults for logging and tracing (both off)
1:      */
1:     private void setDefaults()
1:     {
1:         logStatus = false;
1:         traceStatus = false;
1:     }
1:     /**
1:      * Get an integer parameter
1:      *
0:      * @param request             HttpServetRequest for  forms
0:      * @param name                parameter name
0:      * @param fieldKey            Key for the name of the field we're reading.
0:      * @param localUtil                LocalizedResource to use in localizing messages
0:      * @param returnMessage        localized continue message for continue button on error form    
0:      * @param out Form PrintWriter
1:      */
0:     private int getIntParameter
/////////////////////////////////////////////////////////////////////////
1:     {
1:         String val = request.getParameter(name);
1:         int retval;
1:         if (val == null || val.equals(""))
1:             return NOT_GIVEN;
1:         try {
0:              retval = (new Integer(val)).intValue();
1:         } catch (Exception e) {
1:             printErrorForm(localUtil,localUtil.getTextMessage("SRV_InvalidVal",
1:             return INVALID;
1:         }
1:         if (retval < 0) {
1:         // negative integers not allowed for the parameters we're getting.
1:             printErrorForm(localUtil, localUtil.getTextMessage("SRV_InvalidVal",
1:             return INVALID;
1:         }
1:         return retval;
1:     }
1:     /**
1:      * Print Derby Network Server banner
1:      */
0:     private void printBanner(LocalizedResource localUtil, PrintWriter out)
1:     {
1:         out.println("<a href=\"#navskip\">[ " +
1:         localUtil.getTextMessage("SRV_SkipToContent") + " ]</a>");
1:         out.println("  -  <a href=\"" + SERVLET_ADDRESS + "\">[ " +
1:         localUtil.getTextMessage("SRV_BackToMain") + " ]</a>");
1:     }
1:     /**
1:      * Determine the locale file needed for this browsers preferences
1:      * Defaults to the settings for derby.locale and derby.codeset if set
0:      *        English otherwise if browsers preferences can't be found
1:      *
0:      * @param request             HttpServetRequest for forms
0:      * @param locale                Name of locale (return arg)
1:      * @return the appUI which fits the browsers preferences
1:      */
0:     private LocalizedResource getCurrentAppUI(HttpServletRequest request, String[] locale )
1:     {
1:         LocalizedResource localUtil;
1:         String acceptLanguage = request.getHeader("Accept-Language");
0:         localUtil = new LocalizedResource(null,null,SERVLET_PROP_MESSAGES);
1:         // if no language specified use one set by derby.locale, derby.codeset
0:         locale[ 0 ] = null;
1:         if (acceptLanguage == null)
1:         {
1:             return localUtil;
1:         }
1:         // Use a tokenizer ot separate acceptable languages
1:         StringTokenizer tokenizer = new StringTokenizer(acceptLanguage, ",");
1:         while (tokenizer.hasMoreTokens())
1:         {
1:             //Get the next acceptable language
1:             String lang = tokenizer.nextToken();
1:             lang = getLocStringFromLanguage(lang);
1:             int langindex = translationAvailable(lang);
1:             // have we found one
1:             if (langindex != -1)
1:             {
1:                 localUtil.init(null, lang, SERVLET_PROP_MESSAGES);
1:                 // locale will be passed to server, server routines will get set appropriately
0:                 locale[ 0 ] = lang;
1:                 return localUtil;
1:             }
1:         }
1:         // nothing worked use defaults
1:         return localUtil;
1:         
1:     }
1:     /**
1:      * Get locale string from language which may have qvalue set
1:      * 
0:      * @param lang    language string to parse
1:      *
1:      * @return stripped language string to use in matching
1:      */
1:     private String getLocStringFromLanguage(String lang)
1:     {
1:         int semi;
1:         // Cut off any q-value that might come after a semi-colon
1:         if ((semi = lang.indexOf(';')) != -1)
1:         {
1:             lang = lang.substring(0, semi);
1:         }
1:         // trim any whitespace and fix the code, as some browsers might send a bad format
1:         lang = fixLanguageCode(lang.trim());
1:         return lang;
1:     }
1:     /**
1:      * Check if the required translation is available
1:      *
0:      * @param lang    language we are looking for
1:      * 
1:      * @return index into language array if found, -1 otherwise;
1:      */
1:     private int translationAvailable(String lang)
1:     {
1:         // assert lang == fixLanguageCode(lang)
1:         // we don't need to use toUpperCase() anymore, as the lang is already fixed
1:         for (int i = 0; i < knownLang.length; i++)
1:             if (knownLang[i].equals(lang))
1:                 return i;
1:         return -1;
1:     }
1:     
1:     /**
1:      * Fix the language code, as some browsers send then in a bad format (for instance, 
1:      * Firefox sends en-us instead of en_US).
1:      *
0:      * @param lang    language to be fixed
1:      * 
1:      * @return fixed version of the language, with _ separating parts and country in upper case
1:      */
1:     private String fixLanguageCode( String lang ) {
1:         int index = lang.indexOf('-');
1:         if ( index != -1 ) {        
1:             return fixLanguageCode( lang, index );
1:         }
1:         index = lang.indexOf('_');
1:         if ( index != -1 ) {        
1:             return fixLanguageCode( lang, index );
1:         }
1:         return lang;
1:     }
1:     private String fixLanguageCode(String lang, int index) {
1:         return lang.substring(0,index) + "_" + lang.substring(index+1).toUpperCase(Locale.ENGLISH);
1:     }
1:     /**
1:      * get an HTML labelled message from the resource bundle file, according to
1:      * the given key.
1:      */
1:     private String getHtmlLabelledMessageInstance(LocalizedResource localUtil,
1:         if (id == null)
1:             id = "";
1:         return ("<label for='" + id + "'>" + localUtil.getTextMessage(key) +
1:             "</label>");
1:     }
1:     /**
1:      * Print the received string as a header.
1:      * @param str The string to be printed as a header.
0:      * @param out Form PrintWriter
1:      */
0:     private void printAsContentHeader(String str, PrintWriter out) {
1:         out.println("<a name=\"navskip\"></a><h2>" + str + "</h2>");
1:     }
1:     /**
1:      * If the received string has one or more single quotes
1:      * in it, replace each one with the HTML escape-code
1:      * for a single quote (apostrophe) so that the string 
1:      * can be properly displayed on a submit button.
1:      * @param str The string in which we want to escape
1:      *  single quotes.
1:      */
1:     private String escapeSingleQuotes(String str) {
1:         if ((str == null) || (str.indexOf("'") < 0))
1:             return str;
1:         char [] cA = str.toCharArray();
1:         // Worst (and extremely unlikely) case is every 
1:         // character is a single quote, which means the
1:         int j = 0;
1:         for (int i = 0; i < cA.length; i++) {
1:             if (cA[i] == '\'') {
1:                 result[j++] = '&';
1:                 result[j++] = '#';
1:                 result[j++] = '3';
1:                 result[j++] = '9';
1:                 result[j++] = ';';
1:             }
1:             else
1:                 result[j++] = cA[i];
1:         }
1:         return new String(result, 0, j);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     private static boolean isServerStarted(NetworkServerControl server, int ntries)
1:     {
1:         for (int i = 1; i <= ntries; i ++)
1:         {
1:             try {
1:                 Thread.sleep(500);
1:                 server.ping();
1:                 return true;
1:             }
1:             catch (Exception e) {
1:                 if (i == ntries)
1:                     return false;
1:             }
1:         }
1:         return false;
1:     }
1:     
commit:4551a6e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			"ko_KR", "pt_BR", "zh_CN", "zh_TW"};
/////////////////////////////////////////////////////////////////////////
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		
/////////////////////////////////////////////////////////////////////////
0: 		this.tracingDirectory = config.getInitParameter("tracingDirectory");
1: 		
0: 		if ( this.tracingDirectory == null ) {
0: 			this.tracingDirectory = "";
1: 		}
0: 			if (server == null) {
0: 				// assert this.tracingDirectory != null
0: 				if  ( ! this.tracingDirectory.trim().equals("")) {
0: 					server.setTraceDirectory(this.tracingDirectory);
1: 				}
1: 			}
1: 			
/////////////////////////////////////////////////////////////////////////
0: 					"id='tracedir' value='"+tracingDirectory+"'>");
/////////////////////////////////////////////////////////////////////////
0: 			val = p.getProperty(Property.DRDA_PROP_PORTNUMBER);
0: 			out.println( "<h4>"+localUtil.getTextMessage("SRV_PortNumber", val)+"</h4>");
1: 			
/////////////////////////////////////////////////////////////////////////
0: 			this.tracingDirectory = traceDirectory;
/////////////////////////////////////////////////////////////////////////
0: 		// trim any whitespace and fix the code, as some browsers might send a bad format
0: 		lang = fixLanguageCode(lang.trim());
/////////////////////////////////////////////////////////////////////////
0: 		// assert lang == fixLanguageCode(lang)
0: 		// we don't need to use toUpperCase() anymore, as the lang is already fixed
0: 			if (knownLang[i].equals(lang))
1: 	
1: 	/**
0: 	 * Fix the language code, as some browsers send then in a bad format (for instance, 
0: 	 * Firefox sends en-us instead of en_US).
1: 	 *
0: 	 * @param lang	language to be fixed
1: 	 * 
0: 	 * @return fixed version of the language, with _ separating parts and country in upper case
1: 	 */
0: 	private String fixLanguageCode( String lang ) {
0: 		int index = lang.indexOf('-');
0: 		if ( index != -1 ) {		
0: 			return fixLanguageCode( lang, index );
1: 		}
0: 		index = lang.indexOf('_');
0: 		if ( index != -1 ) {		
0: 			return fixLanguageCode( lang, index );
1: 		}
0: 		return lang;
1: 	}
1: 
0: 	private String fixLanguageCode(String lang, int index) {
0: 		return lang.substring(0,index) + "_" + lang.substring(index+1).toUpperCase(Locale.ENGLISH);
1: 	}
commit:fd79e0f
/////////////////////////////////////////////////////////////////////////
0: 	private final static String SERVLET_ADDRESS = "derbynet";
/////////////////////////////////////////////////////////////////////////
0: 	 * Defaults to the settings for derby.locale and derby.codeset if set
/////////////////////////////////////////////////////////////////////////
0: 		// if no language specified use one set by derby.locale, derby.codeset
commit:70c561e
/////////////////////////////////////////////////////////////////////////
0: 		LocalizedResource langUtil = new LocalizedResource(null,null,SERVLET_PROP_MESSAGES);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:ca3a677
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void doGet (HttpServletRequest request,
1:                                     HttpServletResponse response)
commit:8dc2ebc
/////////////////////////////////////////////////////////////////////////
1:         String formTarget = request.getContextPath() + request.getServletPath();
1:         String formHeader = "<form enctype='multipart/form-data; charset=UTF-8'"
1:                 + " action='" + formTarget + "'>";
/////////////////////////////////////////////////////////////////////////
1:         else if (form.equals(returnMessage))
/////////////////////////////////////////////////////////////////////////
1:                     Integer session;
1:                         session = Integer.valueOf(sessionid);
1:                     } catch (NumberFormatException nfe) {
/////////////////////////////////////////////////////////////////////////
1:                     if (traceSession(langUtil, val, session.intValue(),
0:                             returnMessage, out))
1:                         out.println( "<h4>" + langUtil.getTextMessage(
1:                                 val ? "SRV_StatusTraceNoOn"
1:                                     : "SRV_StatusTraceNoOff",
1:                                 session.toString()) + "</h4>");
/////////////////////////////////////////////////////////////////////////
1:                 out.println("<h2>" + langUtil.getTextMessage("SRV_TraceDirDone",
1:                         escapeHTML(traceDirectory)) + "</h2>");
/////////////////////////////////////////////////////////////////////////
1:                     "id='tracedir' value='"+escapeHTML(tracingDirectory)+"'>");
/////////////////////////////////////////////////////////////////////////
1:             out.println("Internal Error: Unknown form");
/////////////////////////////////////////////////////////////////////////
1:         out.println( "<h4>" +
1:                 localUtil.getTextMessage(
1:                     "SRV_Message", escapeHTML(e.getMessage())) + "</h4>" );
/////////////////////////////////////////////////////////////////////////
1:         out.println(
1:                 "<h4>" +
1:                 localUtil.getTextMessage("SRV_Message", escapeHTML(msg)) +
1:                 "</h4>" );
/////////////////////////////////////////////////////////////////////////
1:         // escaped string would need to be 5 times as long.
1:         char [] result = new char[5*cA.length];
/////////////////////////////////////////////////////////////////////////
1: 				result[j++] = ';';
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Escapes potentially dangerous characters in data written to the browser.
1:      * <p>
1:      * <em>NOTE</em>: This is a poor mans implementation - it doesn't protect
1:      * against all kinds of attacks, and it cannot be used in all contexts.
0:      *
1:      * @param str the string to escape
1:      * @return A sanitized string.
1:      */
1:     private String escapeHTML(String str) {
1:         if (str == null || str.length() == 0) {
1:             return str;
0:         }
1:         // Replaced characters: ; \ / < > " ' = &
1:         char[] cA = str.toCharArray();
1:         char[] result = new char[5 * cA.length];
1:         int j = 0;
1:         for (int i=0; i < cA.length; i++) {
1:             boolean escaped = true; // controls addition of ;
1:             char c = cA[i];
1:             switch (c) {
1:                 case ';':
1:                     result[j++] = '&';
1:                     result[j++] = '#';
1:                     result[j++] = '5';
1:                     result[j++] = '9';
1:                     break;
1:                 case '\\':
1:                     result[j++] = '&';
1:                     result[j++] = '#';
1:                     result[j++] = '9';
1:                     result[j++] = '2';
1:                     break;
1:                 case '/':
1:                     result[j++] = '&';
1:                     result[j++] = '#';
1:                     result[j++] = '4';
1:                     result[j++] = '7';
1:                     break;
1:                 case '<':
1:                     result[j++] = '&';
1:                     result[j++] = 'l';
1:                     result[j++] = 't';
1:                     break;
1:                 case '>':
1:                     result[j++] = '&';
1:                     result[j++] = 'g';
1:                     result[j++] = 't';
1:                     break;
1:                 case '"':
1:                     result[j++] = '&';
1:                     result[j++] = '#';
1:                     result[j++] = '3';
1:                     result[j++] = '4';
1:                     break;
1:                 case '\'':
1:                     result[j++] = '&';
1:                     result[j++] = '#';
1:                     result[j++] = '3';
1:                     result[j++] = '9';
1:                     break;
1:                 case '=':
1:                     result[j++] = '&';
1:                     result[j++] = '#';
1:                     result[j++] = '6';
1:                     result[j++] = '1';
1:                     break;
1:                 case '&':
1:                     result[j++] = '&';
1:                     result[j++] = 'a';
1:                     result[j++] = 'm';
1:                     result[j++] = 'p';
1:                     break;
1:                 default:
1:                     result[j++] = c;
1:                     escaped = false;
0:             }
1:             if (escaped) {
0:                 result[j++] = ';';
0:             }
0:         }
1:         return String.copyValueOf(result, 0, j);
0:     }
1: 
commit:6cc865c
/////////////////////////////////////////////////////////////////////////
0:         out.println( "</body>" ); 	
1:         out.println( "</html>" ); 
/////////////////////////////////////////////////////////////////////////
0: 		out.println( "</html>" );
/////////////////////////////////////////////////////////////////////////
0: 		out.println( "</html>" ); 
/////////////////////////////////////////////////////////////////////////
1:         out.println("<!DOCTYPE html>");
1:         out.println("<html>");        
1:         out.println("<head>");
1:         out.println("<title>"+localUtil.getTextMessage("SRV_Banner")+"</title>");
1:         out.println("</head>");
1:         out.println("<body>");     
1:         out.println("<hr>");
1:         out.println("<h1>"+localUtil.getTextMessage("SRV_Banner")+"</h1>");
1:         out.println("<hr>");
1: 
commit:5ea999a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		String formHeader = "<form enctype='multipart/form-data; charset=UTF-8' action='" +
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 					int session;
/////////////////////////////////////////////////////////////////////////
0: 					Properties p;
/////////////////////////////////////////////////////////////////////////
0: 			int maxThreads;
0: 			int timeSlice;
/////////////////////////////////////////////////////////////////////////
1:         if (value != null) {
1:             return new String(value.getBytes("ISO-8859-1"),"UTF8");
1:         } else {
1:             return null;
0:         }
/////////////////////////////////////////////////////////////////////////
0: 	    final Runnable service = new Runnable() {
/////////////////////////////////////////////////////////////////////////
0: 	private String getHtmlLabelledMessageInstance(LocalizedResource localUtil,
1:                                                   String key, String id) {
/////////////////////////////////////////////////////////////////////////
commit:3bbf7e2
/////////////////////////////////////////////////////////////////////////
0: 				runServer(langUtil, null, null);
/////////////////////////////////////////////////////////////////////////
0: 				printErrorForm(langUtil, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 				runServer(langUtil, returnMessage, out);
0: 				shutdownServer(langUtil, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 				if (logging(langUtil, true, returnMessage, out))
0: 				if (logging(langUtil, false, returnMessage, out))
0: 				if (traceAll(langUtil, true, returnMessage, out))
0: 				if (traceAll(langUtil, false, returnMessage, out))
0: 			displayCurrentStatus(langUtil, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 						printErrorForm(langUtil,
/////////////////////////////////////////////////////////////////////////
0: 						printErrorForm(langUtil, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 					if (traceSession(langUtil, val, session, returnMessage, out))
/////////////////////////////////////////////////////////////////////////
0: 					if (traceDirectory(langUtil, traceDirectory,
/////////////////////////////////////////////////////////////////////////
0: 				printErrorForm(langUtil, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 					if (!setNetParam(langUtil, maxThreads, timeSlice,
/////////////////////////////////////////////////////////////////////////
1:         ( LocalizedResource localUtil, String returnMessage, PrintWriter out )
/////////////////////////////////////////////////////////////////////////
0: 				printErrorForm(localUtil, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil,
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil, e, returnMessage, out);
/////////////////////////////////////////////////////////////////////////
0: 			printErrorForm(localUtil,localUtil.getTextMessage("SRV_InvalidVal",
0: 			printErrorForm(localUtil, localUtil.getTextMessage("SRV_InvalidVal",
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:3f9d812
/////////////////////////////////////////////////////////////////////////
0: 	<LI><PRE>portNumber</PRE> - Port number to use. The default is 1527.</LI>
0: 			initialization if 'true'.</LI>
0: 	<LI><PRE>tracingDirectory</PRE> - Directory for trace files</LI>
/////////////////////////////////////////////////////////////////////////
0: 		<LI><PRE>portNumber</PRE> - Port number</LI>
0: 		<LI><PRE>host</PRE> - Host name</LI>
0: 		<LI><PRE>traceDirectory</PRE> - location of trace directory</LI>
0: 		<LI><PRE>startNetworkServerOnInit</PRE> - start the server on initialization</LI>
commit:377a3f9
/////////////////////////////////////////////////////////////////////////
0: 			"ja_JP","ko_KR","pl","pt_BR","ru","zh_CN","zh_TW"};
commit:4d0b400
/////////////////////////////////////////////////////////////////////////
0: 	private String[] knownLang = {"cs","en","es","de_DE","fr","hu","it",
0: 			"ja_JP",ko_KR","pl","pt_BR","ru","zh_CN","zh_TW"};
author:Lily Wei
-------------------------------------------------------------------------------
commit:39244bf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 LocalizedResource langUtil = new LocalizedResource(null,null,SERVLET_PROP_MESSAGES);
commit:eb7e251
/////////////////////////////////////////////////////////////////////////
0: 			int p = Integer.parseInt(port);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:e47c216
/////////////////////////////////////////////////////////////////////////
0: 		<LI><PRE>host</PRE> - Host name
/////////////////////////////////////////////////////////////////////////
0: 		String hostName = config.getInitParameter("host");
0: 		if (hostName != null)
0: 			host = hostName;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:cd065ba
/////////////////////////////////////////////////////////////////////////
0: 	This servlet can be used to start Derby Network Server from a remote location.
0: 	<LI><PRE>startNetworkServerOnInit</PRE> - Starts the Derby Network Server at servlet 
/////////////////////////////////////////////////////////////////////////
0: 	 * Print Derby Network Server banner
commit:f0b0870
/////////////////////////////////////////////////////////////////////////
0: 	 * @param localUtil LocalizedResource to use to translate messages
/////////////////////////////////////////////////////////////////////////
0: 	 * @param localUtil	LocalizedResource to use to translate messages
/////////////////////////////////////////////////////////////////////////
0: 	 * @param localUtil	LocalizedResource to use to translate messages
/////////////////////////////////////////////////////////////////////////
0: 	 * @param localUtil		LocalizedResource to use for localizing messages
/////////////////////////////////////////////////////////////////////////
0: 	 * @param localUtil	LocalizedResource to use to translate messages
/////////////////////////////////////////////////////////////////////////
0: 	 * @param localUtil	LocalizedResource to use to translate messages
/////////////////////////////////////////////////////////////////////////
0: 	 * @param localUtil	LocalizedResource to use to translate messages
/////////////////////////////////////////////////////////////////////////
0: 	 * @param localUtil	LocalizedResource to use to translate messages
/////////////////////////////////////////////////////////////////////////
0: 	 * @param localUtil	LocalizedResource to use to translate messages
/////////////////////////////////////////////////////////////////////////
0: 	 * @param localUtil	LocalizedResource to use to translate messages
/////////////////////////////////////////////////////////////////////////
0: 	 * @param localUtil				LocalizedResource to use in localizing messages
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d7258ed
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.drda.NetServlet
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:141cd31
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.drda
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.drda;
1: 
0: import java.io.*;
0: import java.util.*;
1: 
0: import java.sql.*;
0: import java.net.*;
1: 
1: import java.security.AccessController;
1: import java.security.PrivilegedExceptionAction;
0: import java.security.PrivilegedActionException;
1: 
0: import javax.servlet.*;
0: import javax.servlet.http.*;
1: 
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1: import org.apache.derby.iapi.reference.Property;
1: 
0: /**
0: 	This servlet can be used to start Cloudscape Network Server from a remote location.
0: 	<P>
0: 	These servlet configuration parameters are understood by this servlet.
0: 	<UL>
0: 	<LI><PRE>portNumber</PRE> - Port number to use. The default is 1527.
0: 	<LI><PRE>startNetworkServerOnInit</PRE> - Starts the Cloudscape Network Server at servlet 
0: 			initialization if 'true'.
0: 	<LI><PRE>tracingDirectory</PRE> - Directory for trace files
0: 	</UL>
1: 
1: */
1: public class NetServlet extends HttpServlet {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
1: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 	private final static int MAX_CONNECT_TRYS = 20;
0: 	private final static String SERVLET_PROP_MESSAGES =  "org.apache.derby.loc.drda.servlet";
0: 	private final static String SERVLET_ADDRESS = "csnet";
1: 
0: 	private String formHeader = null;
0: 	private String host = "localhost";
0: 	private int portNumber=1527;
0: 	private String tracingDirectory;
0: 	private boolean logStatus= false;	/* Logging off */
0: 	private boolean traceStatus = false;	/* Tracing off */
0: 	private String[] knownLang = {"en","es","de_DE", "fr", "it", "ja_JP",
0: 			"ko_KR", "zh_CN", "zh_TW"};
0: 	private String locale;
1: 
0: 	private final static int NOT_GIVEN = -2;
0: 	private final static int INVALID = -3;
1: 
0: 	private NetworkServerControl server;
0: 	private PrintWriter out;
1: 
0: 	// for doPri block
0: 	private Runnable service;
1: 
0: 	/**
0: 		Initialize the servlet.
0: 		Configuration parameters:
0: 		<UL>
0: 		<LI><PRE>portNumber</PRE> - Port number
0: 		<LI><PRE>traceDirectory</PRE> - location of trace directory
0: 		<LI><PRE>startNetworkServerOnInit</PRE> - start the server on initialization
0: 		</UL>
1: 	*/
0: 	public void init(ServletConfig config)
0: 		throws ServletException
0: 	{
1: 
0: 		LocalizedResource langUtil = new LocalizedResource();
1: 				
0: 		String port = config.getInitParameter("portNumber");
0: 		if (port != null) {
0: 			int p = Integer.valueOf(port).intValue();
0: 			if (p > 0)
0: 				portNumber = p;
0: 		}
1: 
0: 		String tracingDirectory = config.getInitParameter("tracingDirectory");
1: 
0: 		String startup = config.getInitParameter("startNetworkServerOnInit");
1: 
0: 		// test if the server is already running
0: 		try {
0: 			//don't send output to console
0: 			if (server == null)
0: 				server = new NetworkServerControl(InetAddress.getByName(host), portNumber);
0: 			if (isServerStarted(server,1))
0: 				return;
0: 		} catch (Exception e) {}
1: 
0: 		if (startup != null) {
0: 			boolean start = Boolean.valueOf(startup).booleanValue();
0: 			if (start)
0: 			{
0: 				runServer(langUtil, null, null);
0: 				return;
0: 			}
0: 		}
0: 	}
1: 
0: 	/**
0: 		Get the form of NetServlet. Provides buttons and forms to control the
0: 		Network server.
1: 	*/
0: 	public void doGet (HttpServletRequest request, HttpServletResponse response)
0: 	        throws ServletException, IOException
0: 	{
0: 		String logOnMessage;
0: 		String logOffMessage;
0: 		String traceOnMessage;
0: 		String traceOffMessage;
0: 		String traceOnOffMessage;
0: 		String startMessage;
0: 		String stopMessage;
0: 		String returnMessage;
0: 		String traceSessionMessage;
0: 		String traceDirMessage;
0: 		String contMessage;
0: 		String setParamMessage;
0: 		String setParamMessage2;
0: 		String netParamMessage;
0: 		LocalizedResource langUtil;
1: 		
0: 		langUtil = getCurrentAppUI(request);
0: 		response.setContentType("text/html; charset=UTF-8");
1: 		
0: 		//prevent caching of the servlet since contents can change - beetle 4649
0: 		response.setHeader("Cache-Control", "no-cache,no-store");
1: 
0: 		formHeader = "<form enctype='multipart/form-data; charset=UTF-8' action='" +
0: 			request.getRequestURI() +" '>";
1: 
0: 		out = new PrintWriter(new
0:  			OutputStreamWriter(response.getOutputStream(), "UTF8"),true);
1: 		
0: 		//inialize messages
0: 		logOnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_LogOn"));
0: 		logOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_LogOff"));
0: 		traceOnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOn"));
0: 		traceOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOff"));
0: 		startMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Start"));
0: 		stopMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Stop"));
0: 		traceSessionMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceSessButton"));
0: 		traceOnOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOnOff"));
0: 		returnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Return"));
0: 		traceDirMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceDir"));
0: 		contMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Continue"));
0: 		setParamMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_SetParam"));
0: 		setParamMessage2 = escapeSingleQuotes(langUtil.getTextMessage("SRV_SetParam2"));
0: 		netParamMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_NetParam"));
1: 
0: 		printBanner(langUtil);
0: 		// set up a server we can use
0: 		if (server == null) {
0: 			try {
0: 				server = new NetworkServerControl();
0: 			}catch (Exception e) {
0: 				printErrorForm(langUtil, request, e, returnMessage);
0: 				return;
0: 			}
0: 		}
0: 		server.setClientLocale(locale);
0: 		String form = getForm(request);
0: 		String doAction = getDoAction(request);
0: 		// if doAction is set, use it to determine form
0: 		if (doAction != null )
0: 		{
0: 			if (doAction.equals(traceOnOffMessage))
0: 				form = traceSessionMessage;
0: 			else
0: 				form = doAction;
0: 		}
0: 		// if no form, determine form based on server status
0: 		boolean serverStatus = getServerStatus();
0: 		if (form == null)
0: 		{
0: 			if (serverStatus)
0: 				form = startMessage;
0: 			else
0: 				form = stopMessage;
0: 		}
0: 		else if (form.equals(startMessage))
0: 		{
0: 			if (!serverStatus)  {
0: 				runServer(langUtil, request, returnMessage);
0: 			}
0: 		}
0: 		else if (form.equals(stopMessage))
0: 		{
0: 			if (serverStatus)   {
0: 				shutdownServer(langUtil, request, returnMessage);
0: 			}
0: 			setDefaults();
1: 					
0: 		}
0: 		else if (form.equals(returnMessage) || form.equals(returnMessage))
0: 		{
0: 			// check if server is still running and use that to determine which form
0: 			if (serverStatus)
0: 			{
0: 				form = startMessage;
0: 			}
0: 			else
0: 			{
0: 				form = stopMessage;
0: 			}
0: 		}
1: 
0: 		out.println( formHeader);
0: 		// display forms
1: 
0: 		form = escapeSingleQuotes(form);
0: 		doAction = escapeSingleQuotes(doAction);
0: 	  	if (form.equals(startMessage))
0: 		{
0: 			String logButton = getLogging(request);
0: 			String traceButton = getTrace(request);
0: 			if (logButton !=  null && logButton.equals(logOnMessage))
0: 			{
0: 				if (logging(langUtil, true, request, returnMessage))
0: 					logStatus = true;
0: 			}
0: 			if (logButton !=  null && logButton.equals(logOffMessage))
0: 			{
0: 				if (logging(langUtil, false, request, returnMessage))
0: 					logStatus = false;
0: 			}
0: 			if (traceButton !=  null && traceButton.equals(traceOnMessage))
0: 			{
0: 				if (traceAll(langUtil, true, request, returnMessage))
0: 					traceStatus = true;
0: 			}
0: 			if (traceButton !=  null && traceButton.equals(traceOffMessage))
0: 			{
0: 				if (traceAll(langUtil, false, request, returnMessage))
0: 					traceStatus = false;
0: 			}
0: 			displayCurrentStatus(request, langUtil, returnMessage);
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_StopButton")+"</h4>" );
0: 			out.println( "<INPUT type=submit name=form value='"+ stopMessage + "'>" );
1: 
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_LogButton2")+"</h4>" );
1: 
0: 			if (logStatus)
0: 			{
0: 				out.println( "<INPUT type=submit name=logform value='"+logOffMessage + "'>" );
0: 			}
0: 			else
0: 			{
0: 				out.println( "<INPUT type=submit name=logform value='"+logOnMessage + "'>" );
0: 			}
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceButton2")+"</h4>" );
0: 			if (traceStatus)
0: 			{
0: 				out.println( "<INPUT type=submit name=traceform value='"+traceOffMessage+ "'>" );
0: 			}
0: 			else
0: 			{
0: 				out.println( "<INPUT type=submit name=traceform value='"+traceOnMessage + "'>" );
0: 			}
1: 
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceSession")+"</h4>" );
0: 			out.println( "<INPUT type=submit name=form value='"+ traceSessionMessage + "'>" );
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceDirButton")+"</h4>" );
0: 			out.println( "<INPUT type=submit name=form value='"+ traceDirMessage + "'>" );
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_ThreadButton")+"</h4>" );
0: 			out.println( "<INPUT type=submit name=form value='"+ netParamMessage+ "'>" );
0: 		}
0: 		else if (form.equals(stopMessage))
0: 		{
1: 
0: 			printAsContentHeader(langUtil.getTextMessage("SRV_NotStarted"));
0: 			String logButton = getLogging(request);
0: 			String traceButton =  getTrace(request);
0: 			if (logButton !=  null && logButton.equals(logOnMessage))
0: 				logStatus = true;
0: 			if (logButton !=  null && logButton.equals(logOffMessage))
0: 				logStatus = false;
0: 			if (traceButton !=  null && traceButton.equals(traceOnMessage))
0: 				traceStatus = true;
0: 			if (traceButton !=  null && traceButton.equals(traceOffMessage))
0: 				traceStatus = false;
0: 			if (logStatus)
0: 			{
0: 				out.println( "<h4>"+langUtil.getTextMessage("SRV_LogOffButton")+"</h4>" );
0: 				out.println( "<INPUT type=submit name=logform value='"+logOffMessage + "'>" );
0: 			}
0: 			else
0: 			{
0: 				out.println( "<h4>"+langUtil.getTextMessage("SRV_LogOnButton")+"</h4>" );
0: 				out.println( "<INPUT type=submit name=logform value='"+logOnMessage + "'>" );
0: 			}
0: 			if (traceStatus)
0: 			{
0: 				out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceOffButton")+"</h4>" );
0: 				out.println( "<INPUT type=submit name=traceform value='"+traceOffMessage + "'>" );
0: 			}
0: 			else
0: 			{
0: 				out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceOnButton")+"</h4>" );
0: 				out.println( "<INPUT type=submit name=traceform value='"+traceOnMessage + "'>" );
0: 			}
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_StartButton")+"</h4>" );
0: 			out.println( "<INPUT type=submit name=form value='"+startMessage+ "'>" );
0: 		}
0: 		else if (form.equals(traceSessionMessage))
0: 		{
0: 			if (doAction != null)
0: 			{
0: 				if (doAction.equals(traceOnOffMessage))
0: 				{
0: 					String sessionid = request.getParameter("sessionid");
0: 					int session = 0;
0: 					try {
0: 					 	session = (new Integer(sessionid)).intValue();
0: 					} catch (Exception e) {
0: 						printErrorForm(langUtil, request,
0: 							langUtil.getTextMessage("SRV_InvalidVal",
0: 							sessionid, langUtil.getTextMessage("SRV_SessionID")),
0: 							returnMessage);
0: 						return;
0: 					}
0: 					Properties p = null;
0: 					try {
0: 						p = server.getCurrentProperties();
0: 					} catch (Exception e) {
0: 						printErrorForm(langUtil, request, e, returnMessage);
0: 						return;
0: 					}
0: 					// if it's on, turn it off, if its off, turn it on
0: 					boolean val;
0: 					if (p.getProperty(Property.DRDA_PROP_TRACE+sessionid) != null)
0: 						val = false;
0: 					else
0: 						val = true;
0: 					if (traceSession(langUtil, val, session, request, returnMessage))
0: 					{
0: 						if (val)
0: 							out.println( "<h4>"+langUtil.getTextMessage("SRV_StatusTraceNoOn", sessionid)+"</h4>");
0: 						else
0: 							out.println( "<h4>"+langUtil.getTextMessage("SRV_StatusTraceNoOff", sessionid)+"</h4>");
0: 					}
0: 					else
0: 						return;
1: 						
0: 				}
0: 			}
0: 			printAsContentHeader(langUtil.getTextMessage("SRV_TraceSessButton"));
0: 			out.println( "<h4>" + getHtmlLabelledMessageInstance(langUtil,
0: 				"SRV_SessionID", "sessionId") + "</h4>");
0: 			out.println( "<INPUT type=text name=sessionid size=10 maxlength=10 " +
0: 				"id='sessionId' value=''>");
0: 			out.println( "<h4> </h4>");
0: 			out.println( "<INPUT type=submit name=doaction value='"+traceOnOffMessage+ "'>" );
0: 			out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
0: 		}
0: 		else if (form.equals(traceDirMessage))
0: 		{
0: 			boolean set = false;
0: 			String traceDirectory = null;
0: 			printAsContentHeader(traceDirMessage);
0: 			if (doAction != null)
0: 			{
0: 				if (doAction.equals(traceDirMessage))
0: 				{
0: 					traceDirectory = getParam(request, "tracedirectory");
0: 					if (traceDirectory(langUtil, traceDirectory, request,
0: 							returnMessage) )
0: 						set = true;
0: 					else
0: 						return;
1: 					
0: 				}
0: 			}
0: 			if (set)
0: 			{
0: 				out.println( "<h2>"+langUtil.getTextMessage("SRV_TraceDirDone", traceDirectory)+"</h2>");
0: 				out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
0: 			}
0: 			else
0: 			{
0: 				out.println( "<h4>" + getHtmlLabelledMessageInstance(langUtil,
0: 					"SRV_TraceDir", "tracedir") + "</h4>");
0: 				out.println( "<INPUT type=text name=tracedirectory size=60 maxlength=256 " +
0: 					"id='tracedir' value=''>");
0: 				out.println( "<h4> </h4>");
0: 				out.println( "<INPUT type=submit name=doaction value='"+traceDirMessage+ "'>" );
0: 				out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
0: 			}
0: 		}
0: 		else if (form.equals(netParamMessage))
0: 		{
0: 			int maxThreads = 0;
0: 			int timeSlice = 0;
0: 			String maxName = langUtil.getTextMessage("SRV_NewMaxThreads");
0: 			String sliceName = langUtil.getTextMessage("SRV_NewTimeSlice");
0: 			try {
0: 				Properties p = server.getCurrentProperties();
0: 				String val = p.getProperty(Property.DRDA_PROP_MAXTHREADS);
0: 				maxThreads= (new Integer(val)).intValue();
0: 				val = p.getProperty(Property.DRDA_PROP_TIMESLICE);
0: 				timeSlice= (new Integer(val)).intValue();
0: 			} catch (Exception e) {
0: 				printErrorForm(langUtil, request, e, returnMessage);
0: 				return;
0: 			}
0: 			if (doAction != null && doAction.equals(netParamMessage))
0: 			{
0: 				int newMaxThreads = getIntParameter(request, "newmaxthreads", 
0: 					"SRV_NewMaxThreads", langUtil, returnMessage);
0: 				int newTimeSlice = (newMaxThreads == INVALID) ? NOT_GIVEN :
0: 					getIntParameter(request, "newtimeslice", "SRV_NewTimeSlice", langUtil, 
0: 						returnMessage);
0: 				if ((newMaxThreads == INVALID) || (newTimeSlice == INVALID))
0: 					return;
0: 				else if (!(newMaxThreads == NOT_GIVEN && newTimeSlice == NOT_GIVEN))
0: 				{
0: 					if (newMaxThreads != NOT_GIVEN)
0: 						maxThreads = newMaxThreads;
0: 					if (newTimeSlice != NOT_GIVEN)
0: 						timeSlice = newTimeSlice;
0: 					if (!setNetParam(langUtil, maxThreads, timeSlice, request,
0: 							returnMessage))
0: 						return;
0: 				}
0: 			}
1: 			
0: 			out.println(formHeader);
0: 			printAsContentHeader(netParamMessage);
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_MaxThreads", new Integer(maxThreads).toString()) +"</h4>");
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_TimeSlice", new Integer(timeSlice).toString()) +"</h4>");
0: 			out.println( "<h4> </h4>");
0: 			out.println( "<h4> <label for='newmaxthreads'>"+maxName+"</label> </h4>");
0: 			out.println( "<INPUT type=text name=newmaxthreads size=10 maxlength=10 " +
0: 				"id='newmaxthreads' value=''>" );
0: 			out.println( "<h4> <label for='newslice'>"+sliceName+"</label> </h4>");
0: 			out.println( "<INPUT type=text name=newtimeslice size=10 maxlength=10 " +
0: 				"id='newslice' value=''>" );
0: 			out.println( "<h4> </h4>");
0: 			out.println( "<INPUT type=submit name=doaction value='"+netParamMessage+ "'>" );
0: 			out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
0: 		}
0: 		else
0: 		{
0: 			System.out.println("Internal Error: Unknown form, "+ form);
0: 			out.println("Internal Error: Unknown form, "+ form);
1: 
1: 
0: 		}
1: 
0: 		out.println( "</html>" ); 
0: 		out.println( "</body>" ); 	
1: 
0: 	}
1: 
0: 	/**
0: 		Get the form of NetServlet. Provides a buttons and form to control the
0: 		Network server
1: 
1: 	*/
0: 	public void doPost (HttpServletRequest request, HttpServletResponse response)
0: 	        throws ServletException, IOException
0: 	{
0: 		// simply call the doGet()
0: 		doGet(request, response);
0: 	}
1: 
0: 	private String getForm(HttpServletRequest request)  throws java.io.IOException{
0: 		return getParam(request, "form");
0: 	}
0: 	private String getDoAction(HttpServletRequest request) throws java.io.IOException {
0: 		return getParam(request, "doaction");
0: 	}
0: 	private String getLogging(HttpServletRequest request) throws java.io.IOException {
0: 		return getParam(request, "logform");
0: 	}
0: 	private String getTrace(HttpServletRequest request) throws java.io.IOException {
0: 		return getParam(request, "traceform");
0: 	}
1: 
0: 	/**
0: 	 *  get UTF8 parameter value and decode international characters
0: 	 *  @param request   HttpServletRequest
0: 	 *  @param paramName  Parameter name
0: 	 *  @return decoded String
1: 	 */
0: 	private String getParam(HttpServletRequest request, String paramName) throws
0: 	java.io.IOException { 
1: 				
0: 		String newValue= null;
0: 		String value = request.getParameter(paramName);
0: 		if (value == null)
0: 			return value;
0: 		newValue = new String(value.getBytes("ISO-8859-1"),"UTF8");
0: 		return newValue;
0: 	}
1: 
0: 	/**
0: 	 *	Start the network server and attempt to connect to it before
0: 	 *	returning
0: 	 *
0: 	 * @param localAppUI	AppUI to use to translate messages
0: 	 * @param request HttpServetRequest for error forms
0: 	 * @param returnMessage	localized continue message for continue button on error form	
0: 	 * @exception ServletException throws an exception if error in starting the 
0: 	 * 		Network Server during initialization
1: 	 */
0: 	private void runServer(LocalizedResource localUtil, HttpServletRequest request,
0: 		String returnMessage)
0: 		throws ServletException
0: 	{
0: 		service = new Runnable() {
0: 			public void run() {
0: 				try {
0: 					//Echo server output to console
0: 					NetworkServerControl runserver = new
0: 						NetworkServerControl(InetAddress.getByName(host),
0: 											 portNumber);
0: 					runserver.start(null);
0: 				}
0: 				catch (Exception e) {
0: 					throw new RuntimeException(e.getMessage());
0: 				}
0: 			}
0: 		};
0: 		Thread servThread = null;
0: 		try {
0: 			servThread = (Thread) AccessController.doPrivileged(
0: 								new PrivilegedExceptionAction() {
0: 									public Object run() throws Exception
0: 									{
0: 										return new Thread(service);
0: 									}
0: 								}
0: 							);
0: 		}
0: 		catch (Exception e) {
0: 			throw new RuntimeException(e.getMessage());
0: 		}
0: 		servThread.start();
1: 
0: 		// try to connect to server
0: 		try {
0: 			boolean connectWorked = false;
0: 			int t = 0;
0: 			do
0: 			{
0: 				t++;
0: 				try {
0: 						Thread.sleep(100);
0: 				} catch (InterruptedException ie) {
0: 					throw new ServletException(localUtil.getTextMessage("SRV_Interupt"));
0: 				}
0: 				try {
0: 					if (isServerStarted(server,1))
0: 						connectWorked = true;
0: 				} catch (Exception e) {} //ignore error we'll just try again
1: 				
0: 			}while (!connectWorked && t < MAX_CONNECT_TRYS);
0: 			if (t >= MAX_CONNECT_TRYS)
0: 				throw new Exception(localUtil.getTextMessage("SRV_MaxTrys",
0: 					new Integer(MAX_CONNECT_TRYS).toString()));
0: 			// turn logging on if required
0: 			if (logStatus)
0: 				server.logConnections(true);
0: 			// turn tracing on
0: 			if (traceStatus)
0: 				server.trace(true);
0: 		}catch (Exception e) {
0: 			if (out != null)
0: 				printErrorForm(localUtil, request, e, returnMessage);
0: 			else
0: 				throw new ServletException(e.getMessage());
0: 		}
0: 	}
0: 	/**
0: 	 *	Display an error form
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param request HttpServetRequest for error forms
0: 	 * @param e		Exception to be displayed
0: 	 * @param returnMessage	localized continue message for continue button on error form
1: 	 */
0: 	private void printErrorForm(LocalizedResource localUtil, HttpServletRequest request,
0: 		Exception e, String returnMessage)
0: 	{
0: 		printAsContentHeader(localUtil.getTextMessage("SRV_NetworkServerError"));
0: 		out.println( "<h4>"+localUtil.getTextMessage("SRV_Message", e.getMessage()) + "</h4>" );
0: 		out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
0: 		out.println( "</html>" );
0: 		out.println( "</body>" );
0: 	}
0: 	/**
0: 	 *	Display an error form
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param request HttpServetRequest for error forms
0: 	 * @param msg	String to be displayed
0: 	 * @param returnMessage	localized continue message for continue button on error form
1: 	 */
0: 	private void printErrorForm(LocalizedResource localUtil, HttpServletRequest request,
0: 		String msg, String returnMessage)
0: 	{
0: 		printAsContentHeader(localUtil.getTextMessage("SRV_NetworkServerError"));
0: 		out.println( "<h4>"+localUtil.getTextMessage("SRV_Message", msg) + "</h4>" );
0: 		out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
0: 		out.println( "</html>" ); 
0: 		out.println( "</body>" ); 	
0: 	}
0: 	/**
0: 	 *	Display the current Network server status
0: 	 *
0: 	 * @param request	HttpServetRequest for  forms
0: 	 * @param appUI		appUI to use for localizing messages
0: 	 * @param returnMessage	localized continue message for continue button on error form	
1: 	 */
0: 	private void displayCurrentStatus(HttpServletRequest request,
0: 		LocalizedResource localUtil, String returnMessage)
0: 	{
0: 		try {
1: 
0: 			printAsContentHeader(localUtil.getTextMessage("SRV_Started"));
0: 			Properties p = server.getCurrentProperties();
0: 			String val = p.getProperty(Property.DRDA_PROP_LOGCONNECTIONS);
0: 			if (val.equals("true"))
0: 				logStatus = true;
0: 			else
0: 				logStatus = false;
0: 			if (logStatus)
0: 				out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusLogOn")+"</h4>");
0: 			else
0: 				out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusLogOff")+"</h4>");
0: 			val = p.getProperty(Property.DRDA_PROP_TRACEALL);
0: 			if (val.equals("true"))
0: 				traceStatus = true;
0: 			else
0: 				traceStatus = false;
0: 			if (traceStatus)
0: 				out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusTraceOn")+"</h4>");
0: 			else
0: 				out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusTraceOff")+"</h4>");
0: 		}
0: 		catch (Exception e) {
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 	}
0: 	/**
0: 	 *	Get the currrent server status by using test connection
0: 	 *
0: 	 * @return true if server is up and reachable; false; otherwise
1: 	 */
0: 	private boolean getServerStatus()
0: 	{
0: 		try {
1: 			
0: 			if (isServerStarted(server,1))
0: 				return true;
0: 		} catch (Exception e) {}
0: 		return false;
0: 	}
0: 	/**
0: 	 *	Shutdown the network server
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param request HttpServetRequest for  forms
0: 	 * @param returnMessage	localized continue message for continue button on error form	
0: 	 * @return true if succeeded; false; otherwise
1: 	 */
0: 	private boolean shutdownServer(LocalizedResource localUtil,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
0: 		try {
0: 			server.shutdown();
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
0: 	/**
0: 	 *	Turn logging of connections on
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param request HttpServetRequest for  forms
0: 	 * @param returnMessage	localized continue message for continue button on error form	
0: 	 * @return true if succeeded; false; otherwise
1: 	 */
0: 	private boolean logging(LocalizedResource localUtil, boolean val,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
0: 		try {
0: 			server.logConnections(val);
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
0: 	/**
0: 	 *	Change tracing for all sessions 
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param val	if true, turn tracing on, if false turn it off
0: 	 * @param request HttpServetRequest for  forms
0: 	 * @param returnMessage	localized continue message for continue button on error form	
0: 	 * @return true if succeeded; false; otherwise
1: 	 */
0: 	private boolean traceAll(LocalizedResource localUtil, boolean val,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
0: 		try {
0: 			server.trace(val);
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
0: 	/**
0: 	 *	Change tracing for a given session
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param val	if true, turn tracing on, if false turn it off
0: 	 * @param session	session to trace
0: 	 * @param request HttpServetRequest for  forms
0: 	 * @param returnMessage	localized continue message for continue button on error form	
0: 	 * @return true if succeeded; false; otherwise
1: 	 */
0: 	private boolean traceSession(LocalizedResource localUtil, boolean val, int session,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
0: 		try {
0: 			server.trace(session, val);
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
1: 
0: 	/**
0: 	 * Set trace directory
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param traceDirectory	directory for trace files
0: 	 * @param request 			HttpServetRequest for  forms
0: 	 * @param returnMessage		localized continue message for continue 
0: 	 *							button on error form	
0: 	 * @return true if succeeded; false; otherwise
1: 	 */
0: 	private boolean traceDirectory(LocalizedResource localUtil, String traceDirectory,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
1: 
0: 		if ((traceDirectory == null) || traceDirectory.equals("")) {
0: 			printErrorForm(localUtil, request,
0: 				localUtil.getTextMessage("SRV_MissingParam",
0: 				localUtil.getTextMessage("SRV_TraceDir")), returnMessage);
1: 
0: 			return retval;
0: 		}
1: 
0: 		try {
0: 			server.setTraceDirectory(traceDirectory);
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
1: 
0: 	/**
0: 	 * Set Network server parameters
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param max				maximum number of threads
0: 	 * @param slice				time slice for each connection
0: 	 * @param request 			HttpServetRequest for  forms
0: 	 * @param returnMessage		localized continue message for continue 
0: 	 *							button on error form	
0: 	 * @return true if succeeded; false; otherwise
1: 	 */
0: 	private boolean setNetParam(LocalizedResource localUtil, int max, int slice,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
1: 
0: 		try {
0: 			server.setMaxThreads(max);
0: 			server.setTimeSlice(slice);
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
1: 
1: 
0: 	/** 
0: 	 * Set defaults for logging and tracing (both off)
1: 	 */
0: 	private void setDefaults()
0: 	{
0: 		logStatus = false;
0: 		traceStatus = false;
0: 	}
0: 	/**
0: 	 * Get an integer parameter
0: 	 *
0: 	 * @param request 			HttpServetRequest for  forms
0: 	 * @param name				parameter name
0: 	 * @param fieldKey			Key for the name of the field we're reading.
0: 	 * @param appUI				appUI to use in localizing messages
0: 	 * @param returnMessage		localized continue message for continue 
0: 	 *							button on error form	
1: 	 */
0: 	private int getIntParameter(HttpServletRequest request,
0: 			String name, String fieldKey, LocalizedResource localUtil, String returnMessage)
0: 	{
0: 		String val = request.getParameter(name);
0: 		int retval;
0: 		if (val == null || val.equals(""))
0: 			return NOT_GIVEN;
0: 		try {
0: 		 	retval = (new Integer(val)).intValue();
0: 		} catch (Exception e) {
0: 			printErrorForm(localUtil, request,localUtil.getTextMessage("SRV_InvalidVal",
0: 				val, localUtil.getTextMessage(fieldKey)), returnMessage);
0: 			return INVALID;
0: 		}
0: 		if (retval < 0) {
0: 		// negative integers not allowed for the parameters we're getting.
0: 			printErrorForm(localUtil, request, localUtil.getTextMessage("SRV_InvalidVal",
0: 				val, localUtil.getTextMessage(fieldKey)), returnMessage);
0: 			return INVALID;
0: 		}
0: 		return retval;
0: 	}
0: 	/**
0: 	 * Print Cloudscape Network Server banner
1: 	 */
0: 	private void printBanner(LocalizedResource localUtil)
0: 	{
0: 		out.println("<a href=\"#navskip\">[ " +
0: 		localUtil.getTextMessage("SRV_SkipToContent") + " ]</a>");
0: 		out.println("  -  <a href=\"" + SERVLET_ADDRESS + "\">[ " +
0: 		localUtil.getTextMessage("SRV_BackToMain") + " ]</a>");
0: 		out.println( "<html>" );		
0: 		out.println( "<title>"+localUtil.getTextMessage("SRV_Banner")+"</title>" );
0: 		out.println( "<body>" ); 	
0: 		out.println( "<hr>" );
0: 		out.println( "<h1>"+localUtil.getTextMessage("SRV_Banner")+"</h1>" );
0: 		out.println( "<hr>" );
1: 
0: 	}
0: 	/**
0: 	 * Determine the locale file needed for this browsers preferences
0: 	 * Defaults to the settings for db2j.locale and db2j.codeset if set
0: 	 *		English otherwise if browsers preferences can't be found
0: 	 *
0: 	 * @param request 			HttpServetRequest for forms
0: 	 * @return the appUI which fits the browsers preferences
1: 	 */
0: 	private LocalizedResource getCurrentAppUI(HttpServletRequest request)
0: 	{
0: 		LocalizedResource localUtil;
0: 		String acceptLanguage = request.getHeader("Accept-Language");
0: 		localUtil = new LocalizedResource(null,null,SERVLET_PROP_MESSAGES);
0: 		// if no language specified use one set by db2j.locale, db2j.codeset
0: 		locale = null;
0: 		if (acceptLanguage == null)
0: 		{
0:         	localUtil.init();
0: 			return localUtil;
0: 		}
0: 		// Use a tokenizer ot separate acceptable languages
0: 		StringTokenizer tokenizer = new StringTokenizer(acceptLanguage, ",");
0: 		while (tokenizer.hasMoreTokens())
0: 		{
0: 			//Get the next acceptable language
0: 			String lang = tokenizer.nextToken();
0: 			lang = getLocStringFromLanguage(lang);
0: 			int langindex = translationAvailable(lang);
0: 			// have we found one
0: 			if (langindex != -1)
0: 			{
0: 				localUtil.init(null, lang, SERVLET_PROP_MESSAGES);
0: 				// locale will be passed to server, server routines will get set appropriately
0: 				locale = lang;
0: 				return localUtil;
0: 			}
0: 		}
0: 		// nothing worked use defaults
0:         localUtil.init();
0: 		return localUtil;
1: 		
0: 	}
0: 	/**
0: 	 * Get locale string from language which may have qvalue set
0: 	 * 
0: 	 * @param lang	language string to parse
0: 	 *
0: 	 * @return stripped language string to use in matching
1: 	 */
0: 	private String getLocStringFromLanguage(String lang)
0: 	{
0: 		int semi;
0: 		// Cut off any q-value that might come after a semi-colon
0: 		if ((semi = lang.indexOf(';')) != -1)
0: 		{
0: 			lang = lang.substring(0, semi);
0: 		}
0: 		// trim any whitespace
0: 		lang = lang.trim();
1: 		
0: 		return lang;
0: 	}
0: 	/**
0: 	 * Check if the required translation is available
0: 	 *
0: 	 * @param lang	language we are looking for
0: 	 * 
0: 	 * @return index into language array if found, -1 otherwise;
1: 	 */
0: 	private int translationAvailable(String lang)
0: 	{
0: 		for (int i = 0; i < knownLang.length; i++)
0: 			if (knownLang[i].toUpperCase(Locale.ENGLISH).equals(lang.toUpperCase(Locale.ENGLISH)))
0: 				return i;
0: 		return -1;
0: 	}
1: 
0: 	/**
0: 	 * get an HTML labelled message from the resource bundle file, according to
0: 	 * the given key.
1: 	 */
0: 	public String getHtmlLabelledMessageInstance(LocalizedResource localUtil, String key, String id) {
1: 
0: 		if (id == null)
0: 			id = "";
1: 
0: 		return ("<label for='" + id + "'>" + localUtil.getTextMessage(key) +
0: 			"</label>");
1: 
0: 	}
1: 
0: 	/**
0: 	 * Print the received string as a header.
0: 	 * @param str The string to be printed as a header.
1: 	 */
0: 	private void printAsContentHeader(String str) {
1: 
0: 		out.println("<a name=\"navskip\"></a><h2>" + str + "</h2>");
0: 		return;
1: 
0: 	}
1: 
0: 	/**
0: 	 * If the received string has one or more single quotes
0: 	 * in it, replace each one with the HTML escape-code
0: 	 * for a single quote (apostrophe) so that the string 
0: 	 * can be properly displayed on a submit button.
0: 	 * @param str The string in which we want to escape
0: 	 *  single quotes.
1: 	 */
0: 	private String escapeSingleQuotes(String str) {
1: 
0: 		if ((str == null) || (str.indexOf("'") < 0))
0: 			return str;
1: 
0: 		char [] cA = str.toCharArray();
1: 
0: 		// Worst (and extremely unlikely) case is every 
0: 		// character is a single quote, which means the
0: 		// escaped string would need to be 4 times as long.
0: 		char [] result = new char[4*cA.length];
1: 
0: 		int j = 0;
0: 		for (int i = 0; i < cA.length; i++) {
1: 
0: 			if (cA[i] == '\'') {
0: 				result[j++] = '&';
0: 				result[j++] = '#';
0: 				result[j++] = '3';
0: 				result[j++] = '9';
0: 			}
0: 			else
0: 				result[j++] = cA[i];
1: 
0: 		}
1: 
0: 		return new String(result, 0, j);
1: 
0: 	}
1: 
0: 	private static boolean isServerStarted(NetworkServerControl server, int ntries)
0: 	{
0: 		for (int i = 1; i <= ntries; i ++)
0: 		{
0: 			try {
0: 				Thread.sleep(500);
0: 				server.ping();
0: 				return true;
0: 			}
0: 			catch (Exception e) {
0: 				if (i == ntries)
0: 					return false;
0: 			}
0: 		}
0: 		return false;
0: 	}
1: 	
0: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.drda
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.drda;
0: 
0: import java.io.*;
0: import java.util.*;
0: 
0: import java.sql.*;
0: import java.net.*;
0: 
0: import java.security.AccessController;
0: import java.security.PrivilegedExceptionAction;
0: import java.security.PrivilegedActionException;
0: 
0: import javax.servlet.*;
0: import javax.servlet.http.*;
0: 
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
0: import org.apache.derby.iapi.reference.Property;
0: 
0: /**
0: 	This servlet can be used to start Cloudscape Network Server from a remote location.
0: 	<P>
0: 	These servlet configuration parameters are understood by this servlet.
0: 	<UL>
0: 	<LI><PRE>portNumber</PRE> - Port number to use. The default is 1527.
0: 	<LI><PRE>startNetworkServerOnInit</PRE> - Starts the Cloudscape Network Server at servlet 
0: 			initialization if 'true'.
0: 	<LI><PRE>tracingDirectory</PRE> - Directory for trace files
0: 	</UL>
0: 
0: */
0: public class NetServlet extends HttpServlet {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 	private final static int MAX_CONNECT_TRYS = 20;
0: 	private final static String SERVLET_PROP_MESSAGES =  "org.apache.derby.loc.drda.servlet";
0: 	private final static String SERVLET_ADDRESS = "csnet";
0: 
0: 	private String formHeader = null;
0: 	private String host = "localhost";
0: 	private int portNumber=1527;
0: 	private String tracingDirectory;
0: 	private boolean logStatus= false;	/* Logging off */
0: 	private boolean traceStatus = false;	/* Tracing off */
0: 	private String[] knownLang = {"en","es","de_DE", "fr", "it", "ja_JP",
0: 			"ko_KR", "zh_CN", "zh_TW"};
0: 	private String locale;
0: 
0: 	private final static int NOT_GIVEN = -2;
0: 	private final static int INVALID = -3;
0: 
0: 	private NetworkServerControl server;
0: 	private PrintWriter out;
0: 
0: 	// for doPri block
0: 	private Runnable service;
0: 
0: 	/**
0: 		Initialize the servlet.
0: 		Configuration parameters:
0: 		<UL>
0: 		<LI><PRE>portNumber</PRE> - Port number
0: 		<LI><PRE>traceDirectory</PRE> - location of trace directory
0: 		<LI><PRE>startNetworkServerOnInit</PRE> - start the server on initialization
0: 		</UL>
0: 	*/
0: 	public void init(ServletConfig config)
0: 		throws ServletException
0: 	{
0: 
0: 		LocalizedResource langUtil = new LocalizedResource();
0: 				
0: 		String port = config.getInitParameter("portNumber");
0: 		if (port != null) {
0: 			int p = Integer.valueOf(port).intValue();
0: 			if (p > 0)
0: 				portNumber = p;
0: 		}
0: 
0: 		String tracingDirectory = config.getInitParameter("tracingDirectory");
0: 
0: 		String startup = config.getInitParameter("startNetworkServerOnInit");
0: 
0: 		// test if the server is already running
0: 		try {
0: 			//don't send output to console
0: 			if (server == null)
0: 				server = new NetworkServerControl(InetAddress.getByName(host), portNumber);
0: 			if (isServerStarted(server,1))
0: 				return;
0: 		} catch (Exception e) {}
0: 
0: 		if (startup != null) {
0: 			boolean start = Boolean.valueOf(startup).booleanValue();
0: 			if (start)
0: 			{
0: 				runServer(langUtil, null, null);
0: 				return;
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 		Get the form of NetServlet. Provides buttons and forms to control the
0: 		Network server.
0: 	*/
0: 	public void doGet (HttpServletRequest request, HttpServletResponse response)
0: 	        throws ServletException, IOException
0: 	{
0: 		String logOnMessage;
0: 		String logOffMessage;
0: 		String traceOnMessage;
0: 		String traceOffMessage;
0: 		String traceOnOffMessage;
0: 		String startMessage;
0: 		String stopMessage;
0: 		String returnMessage;
0: 		String traceSessionMessage;
0: 		String traceDirMessage;
0: 		String contMessage;
0: 		String setParamMessage;
0: 		String setParamMessage2;
0: 		String netParamMessage;
0: 		LocalizedResource langUtil;
0: 		
0: 		langUtil = getCurrentAppUI(request);
0: 		response.setContentType("text/html; charset=UTF-8");
0: 		
0: 		//prevent caching of the servlet since contents can change - beetle 4649
0: 		response.setHeader("Cache-Control", "no-cache,no-store");
0: 
0: 		formHeader = "<form enctype='multipart/form-data; charset=UTF-8' action='" +
0: 			request.getRequestURI() +" '>";
0: 
0: 		out = new PrintWriter(new
0:  			OutputStreamWriter(response.getOutputStream(), "UTF8"),true);
0: 		
0: 		//inialize messages
0: 		logOnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_LogOn"));
0: 		logOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_LogOff"));
0: 		traceOnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOn"));
0: 		traceOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOff"));
0: 		startMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Start"));
0: 		stopMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Stop"));
0: 		traceSessionMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceSessButton"));
0: 		traceOnOffMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceOnOff"));
0: 		returnMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Return"));
0: 		traceDirMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_TraceDir"));
0: 		contMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_Continue"));
0: 		setParamMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_SetParam"));
0: 		setParamMessage2 = escapeSingleQuotes(langUtil.getTextMessage("SRV_SetParam2"));
0: 		netParamMessage = escapeSingleQuotes(langUtil.getTextMessage("SRV_NetParam"));
0: 
0: 		printBanner(langUtil);
0: 		// set up a server we can use
0: 		if (server == null) {
0: 			try {
0: 				server = new NetworkServerControl();
0: 			}catch (Exception e) {
0: 				printErrorForm(langUtil, request, e, returnMessage);
0: 				return;
0: 			}
0: 		}
0: 		server.setClientLocale(locale);
0: 		String form = getForm(request);
0: 		String doAction = getDoAction(request);
0: 		// if doAction is set, use it to determine form
0: 		if (doAction != null )
0: 		{
0: 			if (doAction.equals(traceOnOffMessage))
0: 				form = traceSessionMessage;
0: 			else
0: 				form = doAction;
0: 		}
0: 		// if no form, determine form based on server status
0: 		boolean serverStatus = getServerStatus();
0: 		if (form == null)
0: 		{
0: 			if (serverStatus)
0: 				form = startMessage;
0: 			else
0: 				form = stopMessage;
0: 		}
0: 		else if (form.equals(startMessage))
0: 		{
0: 			if (!serverStatus)  {
0: 				runServer(langUtil, request, returnMessage);
0: 			}
0: 		}
0: 		else if (form.equals(stopMessage))
0: 		{
0: 			if (serverStatus)   {
0: 				shutdownServer(langUtil, request, returnMessage);
0: 			}
0: 			setDefaults();
0: 					
0: 		}
0: 		else if (form.equals(returnMessage) || form.equals(returnMessage))
0: 		{
0: 			// check if server is still running and use that to determine which form
0: 			if (serverStatus)
0: 			{
0: 				form = startMessage;
0: 			}
0: 			else
0: 			{
0: 				form = stopMessage;
0: 			}
0: 		}
0: 
0: 		out.println( formHeader);
0: 		// display forms
0: 
0: 		form = escapeSingleQuotes(form);
0: 		doAction = escapeSingleQuotes(doAction);
0: 	  	if (form.equals(startMessage))
0: 		{
0: 			String logButton = getLogging(request);
0: 			String traceButton = getTrace(request);
0: 			if (logButton !=  null && logButton.equals(logOnMessage))
0: 			{
0: 				if (logging(langUtil, true, request, returnMessage))
0: 					logStatus = true;
0: 			}
0: 			if (logButton !=  null && logButton.equals(logOffMessage))
0: 			{
0: 				if (logging(langUtil, false, request, returnMessage))
0: 					logStatus = false;
0: 			}
0: 			if (traceButton !=  null && traceButton.equals(traceOnMessage))
0: 			{
0: 				if (traceAll(langUtil, true, request, returnMessage))
0: 					traceStatus = true;
0: 			}
0: 			if (traceButton !=  null && traceButton.equals(traceOffMessage))
0: 			{
0: 				if (traceAll(langUtil, false, request, returnMessage))
0: 					traceStatus = false;
0: 			}
0: 			displayCurrentStatus(request, langUtil, returnMessage);
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_StopButton")+"</h4>" );
0: 			out.println( "<INPUT type=submit name=form value='"+ stopMessage + "'>" );
0: 
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_LogButton2")+"</h4>" );
0: 
0: 			if (logStatus)
0: 			{
0: 				out.println( "<INPUT type=submit name=logform value='"+logOffMessage + "'>" );
0: 			}
0: 			else
0: 			{
0: 				out.println( "<INPUT type=submit name=logform value='"+logOnMessage + "'>" );
0: 			}
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceButton2")+"</h4>" );
0: 			if (traceStatus)
0: 			{
0: 				out.println( "<INPUT type=submit name=traceform value='"+traceOffMessage+ "'>" );
0: 			}
0: 			else
0: 			{
0: 				out.println( "<INPUT type=submit name=traceform value='"+traceOnMessage + "'>" );
0: 			}
0: 
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceSession")+"</h4>" );
0: 			out.println( "<INPUT type=submit name=form value='"+ traceSessionMessage + "'>" );
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceDirButton")+"</h4>" );
0: 			out.println( "<INPUT type=submit name=form value='"+ traceDirMessage + "'>" );
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_ThreadButton")+"</h4>" );
0: 			out.println( "<INPUT type=submit name=form value='"+ netParamMessage+ "'>" );
0: 		}
0: 		else if (form.equals(stopMessage))
0: 		{
0: 
0: 			printAsContentHeader(langUtil.getTextMessage("SRV_NotStarted"));
0: 			String logButton = getLogging(request);
0: 			String traceButton =  getTrace(request);
0: 			if (logButton !=  null && logButton.equals(logOnMessage))
0: 				logStatus = true;
0: 			if (logButton !=  null && logButton.equals(logOffMessage))
0: 				logStatus = false;
0: 			if (traceButton !=  null && traceButton.equals(traceOnMessage))
0: 				traceStatus = true;
0: 			if (traceButton !=  null && traceButton.equals(traceOffMessage))
0: 				traceStatus = false;
0: 			if (logStatus)
0: 			{
0: 				out.println( "<h4>"+langUtil.getTextMessage("SRV_LogOffButton")+"</h4>" );
0: 				out.println( "<INPUT type=submit name=logform value='"+logOffMessage + "'>" );
0: 			}
0: 			else
0: 			{
0: 				out.println( "<h4>"+langUtil.getTextMessage("SRV_LogOnButton")+"</h4>" );
0: 				out.println( "<INPUT type=submit name=logform value='"+logOnMessage + "'>" );
0: 			}
0: 			if (traceStatus)
0: 			{
0: 				out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceOffButton")+"</h4>" );
0: 				out.println( "<INPUT type=submit name=traceform value='"+traceOffMessage + "'>" );
0: 			}
0: 			else
0: 			{
0: 				out.println( "<h4>"+langUtil.getTextMessage("SRV_TraceOnButton")+"</h4>" );
0: 				out.println( "<INPUT type=submit name=traceform value='"+traceOnMessage + "'>" );
0: 			}
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_StartButton")+"</h4>" );
0: 			out.println( "<INPUT type=submit name=form value='"+startMessage+ "'>" );
0: 		}
0: 		else if (form.equals(traceSessionMessage))
0: 		{
0: 			if (doAction != null)
0: 			{
0: 				if (doAction.equals(traceOnOffMessage))
0: 				{
0: 					String sessionid = request.getParameter("sessionid");
0: 					int session = 0;
0: 					try {
0: 					 	session = (new Integer(sessionid)).intValue();
0: 					} catch (Exception e) {
0: 						printErrorForm(langUtil, request,
0: 							langUtil.getTextMessage("SRV_InvalidVal",
0: 							sessionid, langUtil.getTextMessage("SRV_SessionID")),
0: 							returnMessage);
0: 						return;
0: 					}
0: 					Properties p = null;
0: 					try {
0: 						p = server.getCurrentProperties();
0: 					} catch (Exception e) {
0: 						printErrorForm(langUtil, request, e, returnMessage);
0: 						return;
0: 					}
0: 					// if it's on, turn it off, if its off, turn it on
0: 					boolean val;
0: 					if (p.getProperty(Property.DRDA_PROP_TRACE+sessionid) != null)
0: 						val = false;
0: 					else
0: 						val = true;
0: 					if (traceSession(langUtil, val, session, request, returnMessage))
0: 					{
0: 						if (val)
0: 							out.println( "<h4>"+langUtil.getTextMessage("SRV_StatusTraceNoOn", sessionid)+"</h4>");
0: 						else
0: 							out.println( "<h4>"+langUtil.getTextMessage("SRV_StatusTraceNoOff", sessionid)+"</h4>");
0: 					}
0: 					else
0: 						return;
0: 						
0: 				}
0: 			}
0: 			printAsContentHeader(langUtil.getTextMessage("SRV_TraceSessButton"));
0: 			out.println( "<h4>" + getHtmlLabelledMessageInstance(langUtil,
0: 				"SRV_SessionID", "sessionId") + "</h4>");
0: 			out.println( "<INPUT type=text name=sessionid size=10 maxlength=10 " +
0: 				"id='sessionId' value=''>");
0: 			out.println( "<h4> </h4>");
0: 			out.println( "<INPUT type=submit name=doaction value='"+traceOnOffMessage+ "'>" );
0: 			out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
0: 		}
0: 		else if (form.equals(traceDirMessage))
0: 		{
0: 			boolean set = false;
0: 			String traceDirectory = null;
0: 			printAsContentHeader(traceDirMessage);
0: 			if (doAction != null)
0: 			{
0: 				if (doAction.equals(traceDirMessage))
0: 				{
0: 					traceDirectory = getParam(request, "tracedirectory");
0: 					if (traceDirectory(langUtil, traceDirectory, request,
0: 							returnMessage) )
0: 						set = true;
0: 					else
0: 						return;
0: 					
0: 				}
0: 			}
0: 			if (set)
0: 			{
0: 				out.println( "<h2>"+langUtil.getTextMessage("SRV_TraceDirDone", traceDirectory)+"</h2>");
0: 				out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
0: 			}
0: 			else
0: 			{
0: 				out.println( "<h4>" + getHtmlLabelledMessageInstance(langUtil,
0: 					"SRV_TraceDir", "tracedir") + "</h4>");
0: 				out.println( "<INPUT type=text name=tracedirectory size=60 maxlength=256 " +
0: 					"id='tracedir' value=''>");
0: 				out.println( "<h4> </h4>");
0: 				out.println( "<INPUT type=submit name=doaction value='"+traceDirMessage+ "'>" );
0: 				out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
0: 			}
0: 		}
0: 		else if (form.equals(netParamMessage))
0: 		{
0: 			int maxThreads = 0;
0: 			int timeSlice = 0;
0: 			String maxName = langUtil.getTextMessage("SRV_NewMaxThreads");
0: 			String sliceName = langUtil.getTextMessage("SRV_NewTimeSlice");
0: 			try {
0: 				Properties p = server.getCurrentProperties();
0: 				String val = p.getProperty(Property.DRDA_PROP_MAXTHREADS);
0: 				maxThreads= (new Integer(val)).intValue();
0: 				val = p.getProperty(Property.DRDA_PROP_TIMESLICE);
0: 				timeSlice= (new Integer(val)).intValue();
0: 			} catch (Exception e) {
0: 				printErrorForm(langUtil, request, e, returnMessage);
0: 				return;
0: 			}
0: 			if (doAction != null && doAction.equals(netParamMessage))
0: 			{
0: 				int newMaxThreads = getIntParameter(request, "newmaxthreads", 
0: 					"SRV_NewMaxThreads", langUtil, returnMessage);
0: 				int newTimeSlice = (newMaxThreads == INVALID) ? NOT_GIVEN :
0: 					getIntParameter(request, "newtimeslice", "SRV_NewTimeSlice", langUtil, 
0: 						returnMessage);
0: 				if ((newMaxThreads == INVALID) || (newTimeSlice == INVALID))
0: 					return;
0: 				else if (!(newMaxThreads == NOT_GIVEN && newTimeSlice == NOT_GIVEN))
0: 				{
0: 					if (newMaxThreads != NOT_GIVEN)
0: 						maxThreads = newMaxThreads;
0: 					if (newTimeSlice != NOT_GIVEN)
0: 						timeSlice = newTimeSlice;
0: 					if (!setNetParam(langUtil, maxThreads, timeSlice, request,
0: 							returnMessage))
0: 						return;
0: 				}
0: 			}
0: 			
0: 			out.println(formHeader);
0: 			printAsContentHeader(netParamMessage);
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_MaxThreads", new Integer(maxThreads).toString()) +"</h4>");
0: 			out.println( "<h4>"+langUtil.getTextMessage("SRV_TimeSlice", new Integer(timeSlice).toString()) +"</h4>");
0: 			out.println( "<h4> </h4>");
0: 			out.println( "<h4> <label for='newmaxthreads'>"+maxName+"</label> </h4>");
0: 			out.println( "<INPUT type=text name=newmaxthreads size=10 maxlength=10 " +
0: 				"id='newmaxthreads' value=''>" );
0: 			out.println( "<h4> <label for='newslice'>"+sliceName+"</label> </h4>");
0: 			out.println( "<INPUT type=text name=newtimeslice size=10 maxlength=10 " +
0: 				"id='newslice' value=''>" );
0: 			out.println( "<h4> </h4>");
0: 			out.println( "<INPUT type=submit name=doaction value='"+netParamMessage+ "'>" );
0: 			out.println( "<INPUT type=submit name=form value='"+returnMessage+ "'>" );
0: 		}
0: 		else
0: 		{
0: 			System.out.println("Internal Error: Unknown form, "+ form);
0: 			out.println("Internal Error: Unknown form, "+ form);
0: 
0: 
0: 		}
0: 
0: 		out.println( "</html>" ); 
0: 		out.println( "</body>" ); 	
0: 
0: 	}
0: 
0: 	/**
0: 		Get the form of NetServlet. Provides a buttons and form to control the
0: 		Network server
0: 
0: 	*/
0: 	public void doPost (HttpServletRequest request, HttpServletResponse response)
0: 	        throws ServletException, IOException
0: 	{
0: 		// simply call the doGet()
0: 		doGet(request, response);
0: 	}
0: 
0: 	private String getForm(HttpServletRequest request)  throws java.io.IOException{
0: 		return getParam(request, "form");
0: 	}
0: 	private String getDoAction(HttpServletRequest request) throws java.io.IOException {
0: 		return getParam(request, "doaction");
0: 	}
0: 	private String getLogging(HttpServletRequest request) throws java.io.IOException {
0: 		return getParam(request, "logform");
0: 	}
0: 	private String getTrace(HttpServletRequest request) throws java.io.IOException {
0: 		return getParam(request, "traceform");
0: 	}
0: 
0: 	/**
0: 	 *  get UTF8 parameter value and decode international characters
0: 	 *  @param request   HttpServletRequest
0: 	 *  @param paramName  Parameter name
0: 	 *  @return decoded String
0: 	 */
0: 	private String getParam(HttpServletRequest request, String paramName) throws
0: 	java.io.IOException { 
0: 				
0: 		String newValue= null;
0: 		String value = request.getParameter(paramName);
0: 		if (value == null)
0: 			return value;
0: 		newValue = new String(value.getBytes("ISO-8859-1"),"UTF8");
0: 		return newValue;
0: 	}
0: 
0: 	/**
0: 	 *	Start the network server and attempt to connect to it before
0: 	 *	returning
0: 	 *
0: 	 * @param localAppUI	AppUI to use to translate messages
0: 	 * @param request HttpServetRequest for error forms
0: 	 * @param returnMessage	localized continue message for continue button on error form	
0: 	 * @exception ServletException throws an exception if error in starting the 
0: 	 * 		Network Server during initialization
0: 	 */
0: 	private void runServer(LocalizedResource localUtil, HttpServletRequest request,
0: 		String returnMessage)
0: 		throws ServletException
0: 	{
0: 		service = new Runnable() {
0: 			public void run() {
0: 				try {
0: 					//Echo server output to console
0: 					NetworkServerControl runserver = new
0: 						NetworkServerControl(InetAddress.getByName(host),
0: 											 portNumber);
0: 					runserver.start(null);
0: 				}
0: 				catch (Exception e) {
0: 					throw new RuntimeException(e.getMessage());
0: 				}
0: 			}
0: 		};
0: 		Thread servThread = null;
0: 		try {
0: 			servThread = (Thread) AccessController.doPrivileged(
0: 								new PrivilegedExceptionAction() {
0: 									public Object run() throws Exception
0: 									{
0: 										return new Thread(service);
0: 									}
0: 								}
0: 							);
0: 		}
0: 		catch (Exception e) {
0: 			throw new RuntimeException(e.getMessage());
0: 		}
0: 		servThread.start();
0: 
0: 		// try to connect to server
0: 		try {
0: 			boolean connectWorked = false;
0: 			int t = 0;
0: 			do
0: 			{
0: 				t++;
0: 				try {
0: 						Thread.sleep(100);
0: 				} catch (InterruptedException ie) {
0: 					throw new ServletException(localUtil.getTextMessage("SRV_Interupt"));
0: 				}
0: 				try {
0: 					if (isServerStarted(server,1))
0: 						connectWorked = true;
0: 				} catch (Exception e) {} //ignore error we'll just try again
0: 				
0: 			}while (!connectWorked && t < MAX_CONNECT_TRYS);
0: 			if (t >= MAX_CONNECT_TRYS)
0: 				throw new Exception(localUtil.getTextMessage("SRV_MaxTrys",
0: 					new Integer(MAX_CONNECT_TRYS).toString()));
0: 			// turn logging on if required
0: 			if (logStatus)
0: 				server.logConnections(true);
0: 			// turn tracing on
0: 			if (traceStatus)
0: 				server.trace(true);
0: 		}catch (Exception e) {
0: 			if (out != null)
0: 				printErrorForm(localUtil, request, e, returnMessage);
0: 			else
0: 				throw new ServletException(e.getMessage());
0: 		}
0: 	}
0: 	/**
0: 	 *	Display an error form
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param request HttpServetRequest for error forms
0: 	 * @param e		Exception to be displayed
0: 	 * @param returnMessage	localized continue message for continue button on error form
0: 	 */
0: 	private void printErrorForm(LocalizedResource localUtil, HttpServletRequest request,
0: 		Exception e, String returnMessage)
0: 	{
0: 		printAsContentHeader(localUtil.getTextMessage("SRV_NetworkServerError"));
0: 		out.println( "<h4>"+localUtil.getTextMessage("SRV_Message", e.getMessage()) + "</h4>" );
0: 		out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
0: 		out.println( "</html>" );
0: 		out.println( "</body>" );
0: 	}
0: 	/**
0: 	 *	Display an error form
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param request HttpServetRequest for error forms
0: 	 * @param msg	String to be displayed
0: 	 * @param returnMessage	localized continue message for continue button on error form
0: 	 */
0: 	private void printErrorForm(LocalizedResource localUtil, HttpServletRequest request,
0: 		String msg, String returnMessage)
0: 	{
0: 		printAsContentHeader(localUtil.getTextMessage("SRV_NetworkServerError"));
0: 		out.println( "<h4>"+localUtil.getTextMessage("SRV_Message", msg) + "</h4>" );
0: 		out.println( "<INPUT type=submit name=form value='"+returnMessage+"'>" );
0: 		out.println( "</html>" ); 
0: 		out.println( "</body>" ); 	
0: 	}
0: 	/**
0: 	 *	Display the current Network server status
0: 	 *
0: 	 * @param request	HttpServetRequest for  forms
0: 	 * @param appUI		appUI to use for localizing messages
0: 	 * @param returnMessage	localized continue message for continue button on error form	
0: 	 */
0: 	private void displayCurrentStatus(HttpServletRequest request,
0: 		LocalizedResource localUtil, String returnMessage)
0: 	{
0: 		try {
0: 
0: 			printAsContentHeader(localUtil.getTextMessage("SRV_Started"));
0: 			Properties p = server.getCurrentProperties();
0: 			String val = p.getProperty(Property.DRDA_PROP_LOGCONNECTIONS);
0: 			if (val.equals("true"))
0: 				logStatus = true;
0: 			else
0: 				logStatus = false;
0: 			if (logStatus)
0: 				out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusLogOn")+"</h4>");
0: 			else
0: 				out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusLogOff")+"</h4>");
0: 			val = p.getProperty(Property.DRDA_PROP_TRACEALL);
0: 			if (val.equals("true"))
0: 				traceStatus = true;
0: 			else
0: 				traceStatus = false;
0: 			if (traceStatus)
0: 				out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusTraceOn")+"</h4>");
0: 			else
0: 				out.println( "<h4>"+localUtil.getTextMessage("SRV_StatusTraceOff")+"</h4>");
0: 		}
0: 		catch (Exception e) {
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 	}
0: 	/**
0: 	 *	Get the currrent server status by using test connection
0: 	 *
0: 	 * @return true if server is up and reachable; false; otherwise
0: 	 */
0: 	private boolean getServerStatus()
0: 	{
0: 		try {
0: 			
0: 			if (isServerStarted(server,1))
0: 				return true;
0: 		} catch (Exception e) {}
0: 		return false;
0: 	}
0: 	/**
0: 	 *	Shutdown the network server
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param request HttpServetRequest for  forms
0: 	 * @param returnMessage	localized continue message for continue button on error form	
0: 	 * @return true if succeeded; false; otherwise
0: 	 */
0: 	private boolean shutdownServer(LocalizedResource localUtil,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
0: 		try {
0: 			server.shutdown();
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
0: 	/**
0: 	 *	Turn logging of connections on
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param request HttpServetRequest for  forms
0: 	 * @param returnMessage	localized continue message for continue button on error form	
0: 	 * @return true if succeeded; false; otherwise
0: 	 */
0: 	private boolean logging(LocalizedResource localUtil, boolean val,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
0: 		try {
0: 			server.logConnections(val);
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
0: 	/**
0: 	 *	Change tracing for all sessions 
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param val	if true, turn tracing on, if false turn it off
0: 	 * @param request HttpServetRequest for  forms
0: 	 * @param returnMessage	localized continue message for continue button on error form	
0: 	 * @return true if succeeded; false; otherwise
0: 	 */
0: 	private boolean traceAll(LocalizedResource localUtil, boolean val,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
0: 		try {
0: 			server.trace(val);
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
0: 	/**
0: 	 *	Change tracing for a given session
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param val	if true, turn tracing on, if false turn it off
0: 	 * @param session	session to trace
0: 	 * @param request HttpServetRequest for  forms
0: 	 * @param returnMessage	localized continue message for continue button on error form	
0: 	 * @return true if succeeded; false; otherwise
0: 	 */
0: 	private boolean traceSession(LocalizedResource localUtil, boolean val, int session,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
0: 		try {
0: 			server.trace(session, val);
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
0: 
0: 	/**
0: 	 * Set trace directory
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param traceDirectory	directory for trace files
0: 	 * @param request 			HttpServetRequest for  forms
0: 	 * @param returnMessage		localized continue message for continue 
0: 	 *							button on error form	
0: 	 * @return true if succeeded; false; otherwise
0: 	 */
0: 	private boolean traceDirectory(LocalizedResource localUtil, String traceDirectory,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
0: 
0: 		if ((traceDirectory == null) || traceDirectory.equals("")) {
0: 			printErrorForm(localUtil, request,
0: 				localUtil.getTextMessage("SRV_MissingParam",
0: 				localUtil.getTextMessage("SRV_TraceDir")), returnMessage);
0: 
0: 			return retval;
0: 		}
0: 
0: 		try {
0: 			server.setTraceDirectory(traceDirectory);
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
0: 
0: 	/**
0: 	 * Set Network server parameters
0: 	 *
0: 	 * @param appUI	AppUI to use to translate messages
0: 	 * @param max				maximum number of threads
0: 	 * @param slice				time slice for each connection
0: 	 * @param request 			HttpServetRequest for  forms
0: 	 * @param returnMessage		localized continue message for continue 
0: 	 *							button on error form	
0: 	 * @return true if succeeded; false; otherwise
0: 	 */
0: 	private boolean setNetParam(LocalizedResource localUtil, int max, int slice,
0: 		HttpServletRequest request, String returnMessage)
0: 	{
0: 		boolean retval = false;
0: 
0: 		try {
0: 			server.setMaxThreads(max);
0: 			server.setTimeSlice(slice);
0: 			retval = true;
0: 		} catch (Exception e) 
0: 		{
0: 			printErrorForm(localUtil, request, e, returnMessage);
0: 		}
0: 		return retval;
0: 	}
0: 
0: 
0: 	/** 
0: 	 * Set defaults for logging and tracing (both off)
0: 	 */
0: 	private void setDefaults()
0: 	{
0: 		logStatus = false;
0: 		traceStatus = false;
0: 	}
0: 	/**
0: 	 * Get an integer parameter
0: 	 *
0: 	 * @param request 			HttpServetRequest for  forms
0: 	 * @param name				parameter name
0: 	 * @param fieldKey			Key for the name of the field we're reading.
0: 	 * @param appUI				appUI to use in localizing messages
0: 	 * @param returnMessage		localized continue message for continue 
0: 	 *							button on error form	
0: 	 */
0: 	private int getIntParameter(HttpServletRequest request,
0: 			String name, String fieldKey, LocalizedResource localUtil, String returnMessage)
0: 	{
0: 		String val = request.getParameter(name);
0: 		int retval;
0: 		if (val == null || val.equals(""))
0: 			return NOT_GIVEN;
0: 		try {
0: 		 	retval = (new Integer(val)).intValue();
0: 		} catch (Exception e) {
0: 			printErrorForm(localUtil, request,localUtil.getTextMessage("SRV_InvalidVal",
0: 				val, localUtil.getTextMessage(fieldKey)), returnMessage);
0: 			return INVALID;
0: 		}
0: 		if (retval < 0) {
0: 		// negative integers not allowed for the parameters we're getting.
0: 			printErrorForm(localUtil, request, localUtil.getTextMessage("SRV_InvalidVal",
0: 				val, localUtil.getTextMessage(fieldKey)), returnMessage);
0: 			return INVALID;
0: 		}
0: 		return retval;
0: 	}
0: 	/**
0: 	 * Print Cloudscape Network Server banner
0: 	 */
0: 	private void printBanner(LocalizedResource localUtil)
0: 	{
0: 		out.println("<a href=\"#navskip\">[ " +
0: 		localUtil.getTextMessage("SRV_SkipToContent") + " ]</a>");
0: 		out.println("  -  <a href=\"" + SERVLET_ADDRESS + "\">[ " +
0: 		localUtil.getTextMessage("SRV_BackToMain") + " ]</a>");
0: 		out.println( "<html>" );		
0: 		out.println( "<title>"+localUtil.getTextMessage("SRV_Banner")+"</title>" );
0: 		out.println( "<body>" ); 	
0: 		out.println( "<hr>" );
0: 		out.println( "<h1>"+localUtil.getTextMessage("SRV_Banner")+"</h1>" );
0: 		out.println( "<hr>" );
0: 
0: 	}
0: 	/**
0: 	 * Determine the locale file needed for this browsers preferences
0: 	 * Defaults to the settings for db2j.locale and db2j.codeset if set
0: 	 *		English otherwise if browsers preferences can't be found
0: 	 *
0: 	 * @param request 			HttpServetRequest for forms
0: 	 * @return the appUI which fits the browsers preferences
0: 	 */
0: 	private LocalizedResource getCurrentAppUI(HttpServletRequest request)
0: 	{
0: 		LocalizedResource localUtil;
0: 		String acceptLanguage = request.getHeader("Accept-Language");
0: 		localUtil = new LocalizedResource(null,null,SERVLET_PROP_MESSAGES);
0: 		// if no language specified use one set by db2j.locale, db2j.codeset
0: 		locale = null;
0: 		if (acceptLanguage == null)
0: 		{
0:         	localUtil.init();
0: 			return localUtil;
0: 		}
0: 		// Use a tokenizer ot separate acceptable languages
0: 		StringTokenizer tokenizer = new StringTokenizer(acceptLanguage, ",");
0: 		while (tokenizer.hasMoreTokens())
0: 		{
0: 			//Get the next acceptable language
0: 			String lang = tokenizer.nextToken();
0: 			lang = getLocStringFromLanguage(lang);
0: 			int langindex = translationAvailable(lang);
0: 			// have we found one
0: 			if (langindex != -1)
0: 			{
0: 				localUtil.init(null, lang, SERVLET_PROP_MESSAGES);
0: 				// locale will be passed to server, server routines will get set appropriately
0: 				locale = lang;
0: 				return localUtil;
0: 			}
0: 		}
0: 		// nothing worked use defaults
0:         localUtil.init();
0: 		return localUtil;
0: 		
0: 	}
0: 	/**
0: 	 * Get locale string from language which may have qvalue set
0: 	 * 
0: 	 * @param lang	language string to parse
0: 	 *
0: 	 * @return stripped language string to use in matching
0: 	 */
0: 	private String getLocStringFromLanguage(String lang)
0: 	{
0: 		int semi;
0: 		// Cut off any q-value that might come after a semi-colon
0: 		if ((semi = lang.indexOf(';')) != -1)
0: 		{
0: 			lang = lang.substring(0, semi);
0: 		}
0: 		// trim any whitespace
0: 		lang = lang.trim();
0: 		
0: 		return lang;
0: 	}
0: 	/**
0: 	 * Check if the required translation is available
0: 	 *
0: 	 * @param lang	language we are looking for
0: 	 * 
0: 	 * @return index into language array if found, -1 otherwise;
0: 	 */
0: 	private int translationAvailable(String lang)
0: 	{
0: 		for (int i = 0; i < knownLang.length; i++)
0: 			if (knownLang[i].toUpperCase(Locale.ENGLISH).equals(lang.toUpperCase(Locale.ENGLISH)))
0: 				return i;
0: 		return -1;
0: 	}
0: 
0: 	/**
0: 	 * get an HTML labelled message from the resource bundle file, according to
0: 	 * the given key.
0: 	 */
0: 	public String getHtmlLabelledMessageInstance(LocalizedResource localUtil, String key, String id) {
0: 
0: 		if (id == null)
0: 			id = "";
0: 
0: 		return ("<label for='" + id + "'>" + localUtil.getTextMessage(key) +
0: 			"</label>");
0: 
0: 	}
0: 
0: 	/**
0: 	 * Print the received string as a header.
0: 	 * @param str The string to be printed as a header.
0: 	 */
0: 	private void printAsContentHeader(String str) {
0: 
0: 		out.println("<a name=\"navskip\"></a><h2>" + str + "</h2>");
0: 		return;
0: 
0: 	}
0: 
0: 	/**
0: 	 * If the received string has one or more single quotes
0: 	 * in it, replace each one with the HTML escape-code
0: 	 * for a single quote (apostrophe) so that the string 
0: 	 * can be properly displayed on a submit button.
0: 	 * @param str The string in which we want to escape
0: 	 *  single quotes.
0: 	 */
0: 	private String escapeSingleQuotes(String str) {
0: 
0: 		if ((str == null) || (str.indexOf("'") < 0))
0: 			return str;
0: 
0: 		char [] cA = str.toCharArray();
0: 
0: 		// Worst (and extremely unlikely) case is every 
0: 		// character is a single quote, which means the
0: 		// escaped string would need to be 4 times as long.
0: 		char [] result = new char[4*cA.length];
0: 
0: 		int j = 0;
0: 		for (int i = 0; i < cA.length; i++) {
0: 
0: 			if (cA[i] == '\'') {
0: 				result[j++] = '&';
0: 				result[j++] = '#';
0: 				result[j++] = '3';
0: 				result[j++] = '9';
0: 			}
0: 			else
0: 				result[j++] = cA[i];
0: 
0: 		}
0: 
0: 		return new String(result, 0, j);
0: 
0: 	}
0: 
0: 	private static boolean isServerStarted(NetworkServerControl server, int ntries)
0: 	{
0: 		for (int i = 1; i <= ntries; i ++)
0: 		{
0: 			try {
0: 				Thread.sleep(500);
0: 				server.ping();
0: 				return true;
0: 			}
0: 			catch (Exception e) {
0: 				if (i == ntries)
0: 					return false;
0: 			}
0: 		}
0: 		return false;
0: 	}
0: 	
0: }
============================================================================