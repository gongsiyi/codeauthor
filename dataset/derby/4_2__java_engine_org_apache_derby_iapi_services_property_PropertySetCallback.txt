1:eac0369: /*
3:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.property.PropertySetCallback
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.property;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.daemon.Serviceable;
1:eac0369: import java.io.Serializable;
1:eac0369: import java.util.Dictionary;
1:eac0369: 
1:5d24b1a: public interface PropertySetCallback {
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 		Initialize the properties for this callback.
1:eac0369: 		Called when addPropertySetNotification() is called
1:eac0369: 		with a non-null transaction controller.
1:eac0369: 		This allows code to set read its initial property
1:eac0369: 		values at boot time.
1:eac0369: 
1:eac0369: 		<P>
1:eac0369: 		Code within an init() method should use the 3 argument
1:eac0369: 		PropertyUtil method getPropertyFromSet() to obtain a property's value.
1:eac0369: 
1:eac0369: 		@param dbOnly true if only per-database properties are to be looked at
1:eac0369: 		@param p the complete set of per-database properties.
1:eac0369: 	*/ 
1:eac0369: 	void init(boolean dbOnly, Dictionary p);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Validate a property change.
1:eac0369: 	  @param key Property key for the property being set
1:eac0369: 	  @param value proposed new value for the property being set or null if
1:eac0369: 	         the property is being dropped.
1:eac0369: 	  @param p Property set before the change. SettingProperty may read but
1:eac0369: 	         must never change p.
1:eac0369: 
1:eac0369: 	  @return true if this object was interested in this property, false otherwise.
1:eac0369: 	  @exception StandardException Oh well.
1:eac0369: 	*/
1:eac0369:     boolean validate(String key, Serializable value, Dictionary p)
1:eac0369: 		 throws StandardException;
1:eac0369: 	/**
1:eac0369: 	  Apply a property change. Will only be called after validate has been called
1:eac0369: 	  and only if validate returned true. If this method is called then the
1:eac0369: 	  new value is the value to be used, ie. the property is not set in the
1:eac0369: 	  overriding JVM system set.
1:eac0369: 
1:eac0369: 	  @param key Property key for the property being set
1:eac0369: 	  @param value proposed new value for the property being set or null if
1:eac0369: 	         the property is being dropped.
1:eac0369: 	  @param p Property set before the change. SettingProperty may read but
1:eac0369: 	         must never change p.
1:eac0369: 	  @return post commit work for the property change.
1:eac0369: 	  @exception StandardException Oh well.
1:eac0369: 	*/
1:eac0369:     Serviceable apply(String key, Serializable value, Dictionary p)
1:eac0369: 		 throws StandardException;
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 
1:eac0369: 	  Map a proposed new value for a property to an official value.
1:eac0369: 
1:eac0369: 	  Will only be called after apply() has been called.
1:eac0369: 	  @param key Property key for the property being set
1:eac0369: 	  @param value proposed new value for the property being set or null if
1:eac0369: 	         the property is being dropped.
1:eac0369: 	  @param p Property set before the change. SettingProperty may read but
1:eac0369: 	         must never change p.
1:eac0369: 	  @return new value for the change
1:eac0369: 	  @exception StandardException Oh well.
1:eac0369: 	*/
1:eac0369:     Serializable map(String key, Serializable value, Dictionary p)
1:eac0369: 		 throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.property.PropertySetCallback
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public interface PropertySetCallback {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.property
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.property;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.daemon.Serviceable;
1: import java.io.Serializable;
1: import java.util.Dictionary;
1: 
0: public interface PropertySetCallback { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	/**
1: 		Initialize the properties for this callback.
1: 		Called when addPropertySetNotification() is called
1: 		with a non-null transaction controller.
1: 		This allows code to set read its initial property
1: 		values at boot time.
1: 
1: 		<P>
1: 		Code within an init() method should use the 3 argument
1: 		PropertyUtil method getPropertyFromSet() to obtain a property's value.
1: 
1: 		@param dbOnly true if only per-database properties are to be looked at
1: 		@param p the complete set of per-database properties.
1: 	*/ 
1: 	void init(boolean dbOnly, Dictionary p);
1: 
1: 	/**
1: 	  Validate a property change.
1: 	  @param key Property key for the property being set
1: 	  @param value proposed new value for the property being set or null if
1: 	         the property is being dropped.
1: 	  @param p Property set before the change. SettingProperty may read but
1: 	         must never change p.
1: 
1: 	  @return true if this object was interested in this property, false otherwise.
1: 	  @exception StandardException Oh well.
1: 	*/
1:     boolean validate(String key, Serializable value, Dictionary p)
1: 		 throws StandardException;
1: 	/**
1: 	  Apply a property change. Will only be called after validate has been called
1: 	  and only if validate returned true. If this method is called then the
1: 	  new value is the value to be used, ie. the property is not set in the
1: 	  overriding JVM system set.
1: 
1: 	  @param key Property key for the property being set
1: 	  @param value proposed new value for the property being set or null if
1: 	         the property is being dropped.
1: 	  @param p Property set before the change. SettingProperty may read but
1: 	         must never change p.
1: 	  @return post commit work for the property change.
1: 	  @exception StandardException Oh well.
1: 	*/
1:     Serviceable apply(String key, Serializable value, Dictionary p)
1: 		 throws StandardException;
1: 	
1: 	/**
1: 
1: 	  Map a proposed new value for a property to an official value.
1: 
1: 	  Will only be called after apply() has been called.
1: 	  @param key Property key for the property being set
1: 	  @param value proposed new value for the property being set or null if
1: 	         the property is being dropped.
1: 	  @param p Property set before the change. SettingProperty may read but
1: 	         must never change p.
1: 	  @return new value for the change
1: 	  @exception StandardException Oh well.
1: 	*/
1:     Serializable map(String key, Serializable value, Dictionary p)
1: 		 throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.property
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.property;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.daemon.Serviceable;
0: import java.io.Serializable;
0: import java.util.Dictionary;
0: 
0: public interface PropertySetCallback { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/**
0: 		Initialize the properties for this callback.
0: 		Called when addPropertySetNotification() is called
0: 		with a non-null transaction controller.
0: 		This allows code to set read its initial property
0: 		values at boot time.
0: 
0: 		<P>
0: 		Code within an init() method should use the 3 argument
0: 		PropertyUtil method getPropertyFromSet() to obtain a property's value.
0: 
0: 		@param dbOnly true if only per-database properties are to be looked at
0: 		@param p the complete set of per-database properties.
0: 	*/ 
0: 	void init(boolean dbOnly, Dictionary p);
0: 
0: 	/**
0: 	  Validate a property change.
0: 	  @param key Property key for the property being set
0: 	  @param value proposed new value for the property being set or null if
0: 	         the property is being dropped.
0: 	  @param p Property set before the change. SettingProperty may read but
0: 	         must never change p.
0: 
0: 	  @return true if this object was interested in this property, false otherwise.
0: 	  @exception StandardException Oh well.
0: 	*/
0:     boolean validate(String key, Serializable value, Dictionary p)
0: 		 throws StandardException;
0: 	/**
0: 	  Apply a property change. Will only be called after validate has been called
0: 	  and only if validate returned true. If this method is called then the
0: 	  new value is the value to be used, ie. the property is not set in the
0: 	  overriding JVM system set.
0: 
0: 	  @param key Property key for the property being set
0: 	  @param value proposed new value for the property being set or null if
0: 	         the property is being dropped.
0: 	  @param p Property set before the change. SettingProperty may read but
0: 	         must never change p.
0: 	  @return post commit work for the property change.
0: 	  @exception StandardException Oh well.
0: 	*/
0:     Serviceable apply(String key, Serializable value, Dictionary p)
0: 		 throws StandardException;
0: 	
0: 	/**
0: 
0: 	  Map a proposed new value for a property to an official value.
0: 
0: 	  Will only be called after apply() has been called.
0: 	  @param key Property key for the property being set
0: 	  @param value proposed new value for the property being set or null if
0: 	         the property is being dropped.
0: 	  @param p Property set before the change. SettingProperty may read but
0: 	         must never change p.
0: 	  @return new value for the change
0: 	  @exception StandardException Oh well.
0: 	*/
0:     Serializable map(String key, Serializable value, Dictionary p)
0: 		 throws StandardException;
0: }
============================================================================