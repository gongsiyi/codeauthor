1:660d738: /*
2:660d738:  
1:660d738:    Derby - Class org.apache.derbyTesting.functionTests.harness.jdk16
1:660d738:  
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:660d738:  
1:660d738:       http://www.apache.org/licenses/LICENSE-2.0
1:660d738:  
1:660d738:    Unless required by applicable law or agreed to in writing, software
1:660d738:    distributed under the License is distributed on an "AS IS" BASIS,
1:660d738:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:660d738:    See the License for the specific language governing permissions and
1:660d738:    limitations under the License.
1:660d738:  
1:660d738:  */
1:660d738: 
1:660d738: package org.apache.derbyTesting.functionTests.harness;
1:660d738: 
1:660d738: import java.util.Vector;
1:660d738: import java.util.StringTokenizer;
1:660d738: 
1:660d738: 
1:660d738: public class jdk16 extends jvm {
1:660d738:     
1:660d738:     public String getName(){return "jdk16";}
1:660d738:     public jdk16(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
1:660d738:         long ss, long oss, long ms, long mx, String classpath, String prof,
1:3f5c48a:         boolean verify, boolean noverify, boolean nojit, Vector<String> D) {
1:660d738:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
1:660d738:             verify,noverify,nojit,D);
1:660d738:     }
1:660d738:     
1:3f5c48a:     public jdk16(String classpath, Vector<String> D) {
1:660d738:         super(classpath,D);
1:660d738:     }
1:660d738:     
1:3f5c48a:     public jdk16(long ms, long mx, String classpath, Vector<String> D) {
1:660d738:         super(ms,mx,classpath,D);
1:660d738:     }
1:660d738:     
1:660d738:     public jdk16() { }
1:660d738:     
1:660d738:     
1:3f5c48a:     public Vector<String> getCommandLine() {
1:660d738:         StringBuffer sb = new StringBuffer();
1:3f5c48a:         Vector<String> v = super.getCommandLine();
1:660d738:         appendOtherFlags(sb);
1:660d738:         String s = sb.toString();
1:660d738:         StringTokenizer st = new StringTokenizer(s);
1:660d738:         while (st.hasMoreTokens()) {
1:660d738:             v.addElement(st.nextToken());
1:660d738:         }
1:660d738:         return v;
1:660d738:     }
1:660d738:     
1:660d738:     public void appendOtherFlags(StringBuffer sb) {
1:660d738:         if (noasyncgc) warn("jdk16 does not support noasyncgc");
1:660d738:         if (verbosegc) sb.append(" -verbose:gc");
1:660d738:         if (noclassgc) sb.append(" -Xnoclassgc");
1:660d738:         if (ss>=0) warn("jdk16 does not support ss");
1:660d738:         if (oss>=0) warn("jdk16 does not support oss");
1:660d738:         if (ms>=0) {
1:660d738:             sb.append(" -ms");
1:660d738:             sb.append(ms);
1:660d738:         }
1:660d738:         if (mx>=0) {
1:660d738:             sb.append(" -mx");
1:660d738:             sb.append(mx);
1:660d738:         }
1:660d738:         if (classpath!=null) {
1:660d738:             sb.append(" -classpath ");
1:660d738:             sb.append(classpath);
1:660d738:         }
1:660d738:         if (prof!=null) warn("jdk16 does not support prof");
1:660d738:         if (verify) warn("jdk16 does not support verify");
1:660d738:         if (noverify) warn("jdk16 does not support noverify");
1:660d738:         if (nojit) sb.append(" -Djava.compiler=NONE");
1:660d738:         if (D != null)
1:660d738:             for (int i=0; i<D.size();i++) {
1:660d738:             sb.append(" -D");
1:660d738:             sb.append((String)(D.elementAt(i)));
1:660d738:             }
1:660d738:     }
1:660d738:     public String getDintro() { return "-D"; }
1:660d738: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:         boolean verify, boolean noverify, boolean nojit, Vector<String> D) {
1:     public jdk16(String classpath, Vector<String> D) {
1:     public jdk16(long ms, long mx, String classpath, Vector<String> D) {
1:     public Vector<String> getCommandLine() {
1:         Vector<String> v = super.getCommandLine();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:660d738
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.jdk16
1:  
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.util.Vector;
1: import java.util.StringTokenizer;
1: 
1: 
1: public class jdk16 extends jvm {
1:     
1:     public String getName(){return "jdk16";}
1:     public jdk16(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
1:         long ss, long oss, long ms, long mx, String classpath, String prof,
0:         boolean verify, boolean noverify, boolean nojit, Vector D) {
1:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
1:             verify,noverify,nojit,D);
1:     }
1:     
0:     public jdk16(String classpath, Vector D) {
1:         super(classpath,D);
1:     }
1:     
0:     public jdk16(long ms, long mx, String classpath, Vector D) {
1:         super(ms,mx,classpath,D);
1:     }
1:     
1:     public jdk16() { }
1:     
1:     
0:     public Vector getCommandLine() {
1:         StringBuffer sb = new StringBuffer();
0:         Vector v = super.getCommandLine();
1:         appendOtherFlags(sb);
1:         String s = sb.toString();
1:         StringTokenizer st = new StringTokenizer(s);
1:         while (st.hasMoreTokens()) {
1:             v.addElement(st.nextToken());
1:         }
1:         return v;
1:     }
1:     
1:     public void appendOtherFlags(StringBuffer sb) {
1:         if (noasyncgc) warn("jdk16 does not support noasyncgc");
1:         if (verbosegc) sb.append(" -verbose:gc");
1:         if (noclassgc) sb.append(" -Xnoclassgc");
1:         if (ss>=0) warn("jdk16 does not support ss");
1:         if (oss>=0) warn("jdk16 does not support oss");
1:         if (ms>=0) {
1:             sb.append(" -ms");
1:             sb.append(ms);
1:         }
1:         if (mx>=0) {
1:             sb.append(" -mx");
1:             sb.append(mx);
1:         }
1:         if (classpath!=null) {
1:             sb.append(" -classpath ");
1:             sb.append(classpath);
1:         }
1:         if (prof!=null) warn("jdk16 does not support prof");
1:         if (verify) warn("jdk16 does not support verify");
1:         if (noverify) warn("jdk16 does not support noverify");
1:         if (nojit) sb.append(" -Djava.compiler=NONE");
1:         if (D != null)
1:             for (int i=0; i<D.size();i++) {
1:             sb.append(" -D");
1:             sb.append((String)(D.elementAt(i)));
1:             }
1:     }
1:     public String getDintro() { return "-D"; }
1: }
============================================================================