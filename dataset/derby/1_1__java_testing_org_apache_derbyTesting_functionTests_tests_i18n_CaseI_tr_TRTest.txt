1:951fa45: /**
1:951fa45:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.i8n.caseI_tr_TR
1:951fa45:  *  
1:951fa45:  * Licensed to the Apache Software Foundation (ASF) under one
1:951fa45:  * or more contributor license agreements.  See the NOTICE file
1:951fa45:  * distributed with this work for additional information
1:951fa45:  * regarding copyright ownership.  The ASF licenses this file
1:951fa45:  * to you under the Apache License, Version 2.0 (the
1:951fa45:  * "License"); you may not use this file except in compliance
1:951fa45:  * with the License.  You may obtain a copy of the License at
1:951fa45:  *
1:951fa45:  *   http://www.apache.org/licenses/LICENSE-2.0
1:951fa45:  *
1:951fa45:  * Unless required by applicable law or agreed to in writing,
1:951fa45:  * software distributed under the License is distributed on an
1:951fa45:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:951fa45:  * KIND, either express or implied.  See the License for the
1:951fa45:  * specific language governing permissions and limitations
1:951fa45:  * under the License.
1:951fa45:  */
1:951fa45: 
1:951fa45: package org.apache.derbyTesting.functionTests.tests.i18n;
1:951fa45: 
1:951fa45: import java.sql.Connection;
1:951fa45: import java.sql.PreparedStatement;
1:951fa45: import java.sql.SQLException;
1:951fa45: import java.sql.Statement;
1:951fa45: import java.util.Properties;
1:951fa45: 
1:951fa45: import junit.framework.Test;
1:951fa45: 
1:951fa45: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:951fa45: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:951fa45: import org.apache.derbyTesting.junit.Decorator;
1:951fa45: import org.apache.derbyTesting.junit.JDBC;
1:951fa45: import org.apache.derbyTesting.junit.TestConfiguration;
1:951fa45: 
1:951fa45: public class CaseI_tr_TRTest extends BaseJDBCTestCase {
1:951fa45: 
1:951fa45:     public CaseI_tr_TRTest(String name) {
1:951fa45:         super(name);
1:951fa45:     }
1:951fa45:  
1:951fa45:     /**
1:951fa45:      * Test Turkish I casing.  Turkish has two i's. lower case i upper cases 
1:951fa45:      * to a upper case i with a dot. Lowercase i with no dot uppercases to I with
1:951fa45:      * no dot.
1:951fa45:      * @throws SQLException
1:951fa45:      */
1:951fa45:     public void testTurkishIcase() throws SQLException {
1:951fa45:         PreparedStatement ps = prepareStatement("values UCASE(?)");
1:951fa45:         ps.setString(1, "i");
1:951fa45:         //\u0130 is upper case i with a dot
1:951fa45:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:951fa45:                 "\u0130");
1:951fa45:  
1:951fa45:         // \u0131 is lower case i no dot
1:951fa45:         ps.setString(1, "\u0131");       
1:951fa45:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:951fa45:                 "I");
1:951fa45: 
1:951fa45:         PreparedStatement ps2 = prepareStatement("values LCASE(?)");
1:951fa45:         ps2.setString(1, "I");
1:951fa45:         JDBC.assertSingleValueResultSet(ps2.executeQuery(),
1:951fa45:                 "\u0131");
1:951fa45:         
1:951fa45:         ps2.setString(1, "\u0130");
1:951fa45:         JDBC.assertSingleValueResultSet(ps2.executeQuery(),
1:951fa45:                 "i");
1:951fa45:         
1:951fa45: 
1:951fa45:  
1:951fa45:         
1:951fa45:     }
1:951fa45:     
1:951fa45:     public static Test suite() {
1:951fa45:         Test test = TestConfiguration.defaultSuite(CaseI_tr_TRTest.class);
1:951fa45:         Properties attributes = new Properties();
1:951fa45:         attributes.put("territory","tr_TR");
1:951fa45:         return Decorator.attributesDatabase(attributes, test);
1:951fa45:     }
1:951fa45: }
1:951fa45: 
1:951fa45:     
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:951fa45
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.i8n.caseI_tr_TR
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.i18n;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.Decorator;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class CaseI_tr_TRTest extends BaseJDBCTestCase {
1: 
1:     public CaseI_tr_TRTest(String name) {
1:         super(name);
1:     }
1:  
1:     /**
1:      * Test Turkish I casing.  Turkish has two i's. lower case i upper cases 
1:      * to a upper case i with a dot. Lowercase i with no dot uppercases to I with
1:      * no dot.
1:      * @throws SQLException
1:      */
1:     public void testTurkishIcase() throws SQLException {
1:         PreparedStatement ps = prepareStatement("values UCASE(?)");
1:         ps.setString(1, "i");
1:         //\u0130 is upper case i with a dot
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:                 "\u0130");
1:  
1:         // \u0131 is lower case i no dot
1:         ps.setString(1, "\u0131");       
1:         JDBC.assertSingleValueResultSet(ps.executeQuery(),
1:                 "I");
1: 
1:         PreparedStatement ps2 = prepareStatement("values LCASE(?)");
1:         ps2.setString(1, "I");
1:         JDBC.assertSingleValueResultSet(ps2.executeQuery(),
1:                 "\u0131");
1:         
1:         ps2.setString(1, "\u0130");
1:         JDBC.assertSingleValueResultSet(ps2.executeQuery(),
1:                 "i");
1:         
1: 
1:  
1:         
1:     }
1:     
1:     public static Test suite() {
1:         Test test = TestConfiguration.defaultSuite(CaseI_tr_TRTest.class);
1:         Properties attributes = new Properties();
1:         attributes.put("territory","tr_TR");
1:         return Decorator.attributesDatabase(attributes, test);
1:     }
1: }
1: 
1:     
============================================================================