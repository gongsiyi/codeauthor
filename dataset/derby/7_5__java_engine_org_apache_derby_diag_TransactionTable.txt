1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.diag.TransactionTable
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.diag;
1:eac0369: 
1:431cefd: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionInfo;
1:eac0369: 
1:eac0369: import org.apache.derby.vti.VTITemplate;
1:eac0369: import org.apache.derby.vti.VTICosting;
1:eac0369: import org.apache.derby.vti.VTIEnvironment;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1:eac0369: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
1:eac0369: 
1:b1f84c1: import org.apache.derby.iapi.reference.Limits;
1:eac0369: import org.apache.derby.iapi.util.StringUtil;
1:eac0369: 
1:eac0369: import java.sql.ResultSetMetaData;
1:eac0369: import java.sql.SQLException;
1:eac0369: import java.sql.Types;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	
1:eac0369: 
1:eac0369: 	TransactionTable is a virtual table that shows all transactions
1:eac0369: 	currently in the database.
1:eac0369: 	
1:eac0369: 	This virtual table can be invoked by calling it
1:eac0369: 	directly
1:5a95e6b: 	<PRE> select * from SYSCS_DIAG.TRANSACTION_TABLE </PRE>
1:eac0369: 
1:eac0369: 	<P>The TransactionTable virtual table takes a snap shot of the 
1:eac0369: 	transaction table while the system is in flux, so it is possible that some
1:eac0369: 	transactions may be in transition state while the snap shot is taken.
1:eac0369: 	We choose to do this rather then impose extraneous timing restrictions so
1:eac0369: 	that the use of this tool will not alter the normal timing and flow of
1:eac0369: 	execution in the application. 
1:eac0369: 
1:eac0369: 	<P>The TransactionTable virtual table has the following columns:
1:eac0369: 	<UL>
1:eac0369: 	<LI>XID varchar(15) - not nullable.  The transaction id, this can be joined
1:eac0369: 	with the LockTable virtual table's XID.</LI>
1:eac0369: 	<LI>GLOBAL_XID varchar(140) - nullable.  The global transaction id, only
1:eac0369: 	set if this transaction is a participant in a distributed transaction.</LI>
1:eac0369: 	<LI>USERNAME varchar(128) - nullable.  The user name, or APP by default.
1:2c21843: 	May appear null if the transaction is started by Derby.</LI>
1:eac0369: 	<LI>TYPE varchar(30) - not nullable. UserTransaction or an internal
1:2c21843: 	transaction spawned by Derby.</LI>
1:eac0369: 	<LI>STATUS varchar(8) - not nullable.  IDLE or ACTIVE.  A transaction is
1:eac0369: 	IDLE only when it is first created or right after it commits.  Any
1:eac0369: 	transaction that holds or has held any resource in the database is ACTIVE.
1:eac0369: 	Accessing the TransactionTable virtual table without using the class alias
1:eac0369: 	will not activate the transaction.</LI>
1:eac0369: 	<LI>FIRST_INSTANT varchar(20) - nullable.  If null, this is a read only
1:eac0369: 	transaction.  If not null, this is the first log record instant written by
1:eac0369: 	the transaction.</LI> 
1:eac0369: 	<LI>SQL_TEXT VARCHAR(32672) - nullable.  if null, this transaction is
1:eac0369: 	currently not being executed in the database.  If not null, this is the SQL
1:eac0369: 	statement currently being executed in the database.</LI>
1:eac0369: 	</UL>
1:eac0369: */
1:4dede3b: public class TransactionTable extends VTITemplate implements VTICosting {
1:eac0369: 
1:eac0369: 	private TransactionInfo[] transactionTable;
1:eac0369: 	boolean initialized;
1:eac0369: 	int currentRow;
1:eac0369: 	private boolean wasNull;
1:eac0369: 
1:431cefd:     public  TransactionTable()    throws StandardException
1:431cefd:     {
1:431cefd:         DiagUtil.checkAccess();
1:431cefd:     }
1:431cefd:     
1:eac0369: 	/**
1:eac0369: 		@see java.sql.ResultSet#getMetaData
1:eac0369: 	 */
1:eac0369: 	public ResultSetMetaData getMetaData()
1:eac0369: 	{
1:eac0369: 		return metadata;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@see java.sql.ResultSet#next
1:eac0369: 		@exception SQLException if no transaction context can be found
1:eac0369: 	 */
1:eac0369: 	public boolean next() throws SQLException
1:eac0369: 	{
1:eac0369: 		if (!initialized)
1:eac0369: 		{
1:eac0369: 			LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
1:eac0369: 
1:1985a18: 			transactionTable = lcc.getTransactionExecute().
1:1985a18: 			   getAccessManager().getTransactionInfo();
1:eac0369: 
1:eac0369: 			initialized = true;
1:eac0369: 			currentRow = -1;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (transactionTable == null)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		for (currentRow++;
1:eac0369: 			 currentRow < transactionTable.length;
1:eac0369: 			 currentRow++)
1:eac0369: 		{
1:eac0369: 			TransactionInfo info = transactionTable[currentRow];
1:eac0369: 			if (info == null)
1:eac0369: 				continue;		// transaction object in flux while the
1:eac0369: 								// snap shot was taken, get another row
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// currentRow >= transactionTable.length
1:eac0369: 		transactionTable = null;
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@see java.sql.ResultSet#close
1:eac0369: 	 */
1:eac0369: 	public void close()
1:eac0369: 	{
1:eac0369: 		transactionTable = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		All columns in TransactionTable VTI is of String type.
1:eac0369: 		@see java.sql.ResultSet#getString
1:eac0369: 	 */
1:eac0369: 	public String getString(int columnNumber)
1:eac0369: 	{
1:eac0369: 		TransactionInfo info = transactionTable[currentRow];
1:eac0369: 		String str = null;
1:eac0369: 
1:eac0369: 		switch(columnNumber)
1:eac0369: 		{
1:eac0369: 		case 1:
1:eac0369: 			str = info.getTransactionIdString(); break;
1:eac0369: 
1:eac0369: 		case 2:
1:eac0369: 			str = info.getGlobalTransactionIdString(); break;
1:eac0369: 
1:eac0369: 		case 3:
1:eac0369: 			str = info.getUsernameString(); break;
1:eac0369: 
1:eac0369: 		case 4:
1:eac0369: 			str = info.getTransactionTypeString(); break;
1:eac0369: 
1:eac0369: 		case 5:
1:eac0369: 			str = info.getTransactionStatusString(); break;
1:eac0369: 
1:eac0369: 		case 6:
1:eac0369: 			str = info.getFirstLogInstantString(); break;
1:eac0369: 
1:eac0369: 		case 7:
1:eac0369: 
1:eac0369: 			str = info.getStatementTextString();
1:b1f84c1: 			str = StringUtil.truncate(str, Limits.DB2_VARCHAR_MAXWIDTH);
1:eac0369: 			break;
1:eac0369: 
1:eac0369: 		default:
1:eac0369: 			str = null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		wasNull = (str == null);
1:eac0369: 		return str;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@see java.sql.ResultSet#wasNull
1:eac0369: 	 */
1:eac0369: 	public boolean wasNull()
1:eac0369: 	{
1:eac0369: 		return wasNull;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**  VTI costing interface */
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 		@see VTICosting#getEstimatedRowCount
1:eac0369: 	 */
1:eac0369: 	public double getEstimatedRowCount(VTIEnvironment vtiEnvironment)
1:eac0369: 	{
1:eac0369: 		return VTICosting.defaultEstimatedRowCount;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 		@see VTICosting#getEstimatedCostPerInstantiation
1:eac0369: 	 */
1:eac0369: 	public double getEstimatedCostPerInstantiation(VTIEnvironment vtiEnvironment)
1:eac0369: 	{
1:eac0369: 		return VTICosting.defaultEstimatedCost;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@return false
1:eac0369: 		@see VTICosting#supportsMultipleInstantiations
1:eac0369: 	 */
1:eac0369: 	public boolean supportsMultipleInstantiations(VTIEnvironment vtiEnvironment)
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Metadata
1:eac0369: 	*/
1:eac0369: 	private static final ResultColumnDescriptor[] columnInfo = {
1:eac0369: 
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("XID",           Types.VARCHAR, false, 15),
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("GLOBAL_XID",    Types.VARCHAR, true,  140),
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("USERNAME",      Types.VARCHAR, true,  128),
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("TYPE",          Types.VARCHAR, false, 30),
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("STATUS",        Types.VARCHAR, false, 8),
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("FIRST_INSTANT", Types.VARCHAR, true,  20),
1:b1f84c1: 		EmbedResultSetMetaData.getResultColumnDescriptor("SQL_TEXT",      Types.VARCHAR, true,  Limits.DB2_VARCHAR_MAXWIDTH),
1:eac0369: 	};
1:eac0369: 	
1:8514aa2:     private static final ResultSetMetaData metadata =
1:8514aa2:         new EmbedResultSetMetaData(columnInfo);
1:eac0369: }
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8514aa2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final ResultSetMetaData metadata =
1:         new EmbedResultSetMetaData(columnInfo);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5570eb0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData40;
/////////////////////////////////////////////////////////////////////////
0: 	private static final ResultSetMetaData metadata = new EmbedResultSetMetaData40(columnInfo);
commit:431cefd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
1:     public  TransactionTable()    throws StandardException
1:     {
1:         DiagUtil.checkAccess();
1:     }
1:     
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2c21843
/////////////////////////////////////////////////////////////////////////
1: 	May appear null if the transaction is started by Derby.</LI>
1: 	transaction spawned by Derby.</LI>
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1985a18
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			transactionTable = lcc.getTransactionExecute().
1: 			   getAccessManager().getTransactionInfo();
commit:5a95e6b
/////////////////////////////////////////////////////////////////////////
1: 	<PRE> select * from SYSCS_DIAG.TRANSACTION_TABLE </PRE>
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.diag.TransactionTable
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
1: public class TransactionTable extends VTITemplate implements VTICosting {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.diag
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.diag;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
0: import org.apache.derby.iapi.store.access.AccessFactory;
1: import org.apache.derby.iapi.store.access.TransactionInfo;
1: 
1: import org.apache.derby.vti.VTITemplate;
1: import org.apache.derby.vti.VTICosting;
1: import org.apache.derby.vti.VTIEnvironment;
1: 
1: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
1: 
0: import org.apache.derby.iapi.reference.DB2Limit;
1: import org.apache.derby.iapi.util.StringUtil;
1: 
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Types;
1: 
1: /**
1: 	
1: 
1: 	TransactionTable is a virtual table that shows all transactions
1: 	currently in the database.
1: 	
1: 	This virtual table can be invoked by calling it
1: 	directly
0: 	<PRE> select * from new org.apache.derby.diag.TransactionTable() t; </PRE>
0: 	or through the system alias TransactionTable
0: 	<PRE> select * from new TRANSACTIONTABLE() t; </PRE> 
1: 
1: 	<P>The TransactionTable virtual table takes a snap shot of the 
1: 	transaction table while the system is in flux, so it is possible that some
1: 	transactions may be in transition state while the snap shot is taken.
1: 	We choose to do this rather then impose extraneous timing restrictions so
1: 	that the use of this tool will not alter the normal timing and flow of
1: 	execution in the application. 
1: 
1: 	<P>The TransactionTable virtual table has the following columns:
1: 	<UL>
1: 	<LI>XID varchar(15) - not nullable.  The transaction id, this can be joined
1: 	with the LockTable virtual table's XID.</LI>
1: 	<LI>GLOBAL_XID varchar(140) - nullable.  The global transaction id, only
1: 	set if this transaction is a participant in a distributed transaction.</LI>
1: 	<LI>USERNAME varchar(128) - nullable.  The user name, or APP by default.
0: 	May appear null if the transaction is started by Cloudscape.</LI>
1: 	<LI>TYPE varchar(30) - not nullable. UserTransaction or an internal
0: 	transaction spawned by Cloudscape.</LI>
1: 	<LI>STATUS varchar(8) - not nullable.  IDLE or ACTIVE.  A transaction is
1: 	IDLE only when it is first created or right after it commits.  Any
1: 	transaction that holds or has held any resource in the database is ACTIVE.
1: 	Accessing the TransactionTable virtual table without using the class alias
1: 	will not activate the transaction.</LI>
1: 	<LI>FIRST_INSTANT varchar(20) - nullable.  If null, this is a read only
1: 	transaction.  If not null, this is the first log record instant written by
1: 	the transaction.</LI> 
1: 	<LI>SQL_TEXT VARCHAR(32672) - nullable.  if null, this transaction is
1: 	currently not being executed in the database.  If not null, this is the SQL
1: 	statement currently being executed in the database.</LI>
1: 	</UL>
1: */
0: public class TransactionTable extends VTITemplate implements VTICosting { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	private TransactionInfo[] transactionTable;
1: 	boolean initialized;
1: 	int currentRow;
1: 	private boolean wasNull;
1: 
1: 	/**
1: 		@see java.sql.ResultSet#getMetaData
1: 	 */
1: 	public ResultSetMetaData getMetaData()
1: 	{
1: 		return metadata;
1: 	}
1: 
1: 	/**
1: 		@see java.sql.ResultSet#next
1: 		@exception SQLException if no transaction context can be found
1: 	 */
1: 	public boolean next() throws SQLException
1: 	{
1: 		if (!initialized)
1: 		{
1: 			LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
1: 
0: 			AccessFactory af = lcc.getLanguageConnectionFactory().getAccessFactory();
0: 			transactionTable = af.getTransactionInfo();
1: 
1: 			initialized = true;
1: 			currentRow = -1;
1: 		}
1: 
1: 		if (transactionTable == null)
1: 			return false;
1: 
1: 		for (currentRow++;
1: 			 currentRow < transactionTable.length;
1: 			 currentRow++)
1: 		{
1: 			TransactionInfo info = transactionTable[currentRow];
1: 			if (info == null)
1: 				continue;		// transaction object in flux while the
1: 								// snap shot was taken, get another row
1: 			return true;
1: 		}
1: 
1: 		// currentRow >= transactionTable.length
1: 		transactionTable = null;
1: 		return false;
1: 	}
1: 
1: 	/**
1: 		@see java.sql.ResultSet#close
1: 	 */
1: 	public void close()
1: 	{
1: 		transactionTable = null;
1: 	}
1: 
1: 	/**
1: 		All columns in TransactionTable VTI is of String type.
1: 		@see java.sql.ResultSet#getString
1: 	 */
1: 	public String getString(int columnNumber)
1: 	{
1: 		TransactionInfo info = transactionTable[currentRow];
1: 		String str = null;
1: 
1: 		switch(columnNumber)
1: 		{
1: 		case 1:
1: 			str = info.getTransactionIdString(); break;
1: 
1: 		case 2:
1: 			str = info.getGlobalTransactionIdString(); break;
1: 
1: 		case 3:
1: 			str = info.getUsernameString(); break;
1: 
1: 		case 4:
1: 			str = info.getTransactionTypeString(); break;
1: 
1: 		case 5:
1: 			str = info.getTransactionStatusString(); break;
1: 
1: 		case 6:
1: 			str = info.getFirstLogInstantString(); break;
1: 
1: 		case 7:
1: 
1: 			str = info.getStatementTextString();
0: 			str = StringUtil.truncate(str, DB2Limit.DB2_VARCHAR_MAXWIDTH);
1: 			break;
1: 
1: 		default:
1: 			str = null;
1: 		}
1: 
1: 		wasNull = (str == null);
1: 		return str;
1: 
1: 	}
1: 
1: 	/**
1: 		@see java.sql.ResultSet#wasNull
1: 	 */
1: 	public boolean wasNull()
1: 	{
1: 		return wasNull;
1: 	}
1: 
1: 
1: 	/**  VTI costing interface */
1: 	
1: 	/**
1: 		@see VTICosting#getEstimatedRowCount
1: 	 */
1: 	public double getEstimatedRowCount(VTIEnvironment vtiEnvironment)
1: 	{
1: 		return VTICosting.defaultEstimatedRowCount;
1: 	}
1: 	
1: 	/**
1: 		@see VTICosting#getEstimatedCostPerInstantiation
1: 	 */
1: 	public double getEstimatedCostPerInstantiation(VTIEnvironment vtiEnvironment)
1: 	{
1: 		return VTICosting.defaultEstimatedCost;
1: 	}
1: 
1: 	/**
1: 		@return false
1: 		@see VTICosting#supportsMultipleInstantiations
1: 	 */
1: 	public boolean supportsMultipleInstantiations(VTIEnvironment vtiEnvironment)
1: 	{
1: 		return false;
1: 	}
1: 
1: 
1: 	/*
1: 	** Metadata
1: 	*/
1: 	private static final ResultColumnDescriptor[] columnInfo = {
1: 
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("XID",           Types.VARCHAR, false, 15),
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("GLOBAL_XID",    Types.VARCHAR, true,  140),
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("USERNAME",      Types.VARCHAR, true,  128),
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("TYPE",          Types.VARCHAR, false, 30),
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("STATUS",        Types.VARCHAR, false, 8),
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("FIRST_INSTANT", Types.VARCHAR, true,  20),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("SQL_TEXT",      Types.VARCHAR, true,  DB2Limit.DB2_VARCHAR_MAXWIDTH),
1: 	};
1: 	
0: 	private static final ResultSetMetaData metadata = new EmbedResultSetMetaData(columnInfo);
1: }
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b1f84c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.Limits;
/////////////////////////////////////////////////////////////////////////
1: 			str = StringUtil.truncate(str, Limits.DB2_VARCHAR_MAXWIDTH);
/////////////////////////////////////////////////////////////////////////
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("SQL_TEXT",      Types.VARCHAR, true,  Limits.DB2_VARCHAR_MAXWIDTH),
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.diag
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.diag;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
0: import org.apache.derby.iapi.store.access.AccessFactory;
0: import org.apache.derby.iapi.store.access.TransactionInfo;
0: 
0: import org.apache.derby.vti.VTITemplate;
0: import org.apache.derby.vti.VTICosting;
0: import org.apache.derby.vti.VTIEnvironment;
0: 
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
0: 
0: import org.apache.derby.iapi.reference.DB2Limit;
0: import org.apache.derby.iapi.util.StringUtil;
0: 
0: import java.sql.ResultSetMetaData;
0: import java.sql.SQLException;
0: import java.sql.Types;
0: 
0: /**
0: 	
0: 
0: 	TransactionTable is a virtual table that shows all transactions
0: 	currently in the database.
0: 	
0: 	This virtual table can be invoked by calling it
0: 	directly
0: 	<PRE> select * from new org.apache.derby.diag.TransactionTable() t; </PRE>
0: 	or through the system alias TransactionTable
0: 	<PRE> select * from new TRANSACTIONTABLE() t; </PRE> 
0: 
0: 	<P>The TransactionTable virtual table takes a snap shot of the 
0: 	transaction table while the system is in flux, so it is possible that some
0: 	transactions may be in transition state while the snap shot is taken.
0: 	We choose to do this rather then impose extraneous timing restrictions so
0: 	that the use of this tool will not alter the normal timing and flow of
0: 	execution in the application. 
0: 
0: 	<P>The TransactionTable virtual table has the following columns:
0: 	<UL>
0: 	<LI>XID varchar(15) - not nullable.  The transaction id, this can be joined
0: 	with the LockTable virtual table's XID.</LI>
0: 	<LI>GLOBAL_XID varchar(140) - nullable.  The global transaction id, only
0: 	set if this transaction is a participant in a distributed transaction.</LI>
0: 	<LI>USERNAME varchar(128) - nullable.  The user name, or APP by default.
0: 	May appear null if the transaction is started by Cloudscape.</LI>
0: 	<LI>TYPE varchar(30) - not nullable. UserTransaction or an internal
0: 	transaction spawned by Cloudscape.</LI>
0: 	<LI>STATUS varchar(8) - not nullable.  IDLE or ACTIVE.  A transaction is
0: 	IDLE only when it is first created or right after it commits.  Any
0: 	transaction that holds or has held any resource in the database is ACTIVE.
0: 	Accessing the TransactionTable virtual table without using the class alias
0: 	will not activate the transaction.</LI>
0: 	<LI>FIRST_INSTANT varchar(20) - nullable.  If null, this is a read only
0: 	transaction.  If not null, this is the first log record instant written by
0: 	the transaction.</LI> 
0: 	<LI>SQL_TEXT VARCHAR(32672) - nullable.  if null, this transaction is
0: 	currently not being executed in the database.  If not null, this is the SQL
0: 	statement currently being executed in the database.</LI>
0: 	</UL>
0: */
0: public class TransactionTable extends VTITemplate implements VTICosting { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	private TransactionInfo[] transactionTable;
0: 	boolean initialized;
0: 	int currentRow;
0: 	private boolean wasNull;
0: 
0: 	/**
0: 		@see java.sql.ResultSet#getMetaData
0: 	 */
0: 	public ResultSetMetaData getMetaData()
0: 	{
0: 		return metadata;
0: 	}
0: 
0: 	/**
0: 		@see java.sql.ResultSet#next
0: 		@exception SQLException if no transaction context can be found
0: 	 */
0: 	public boolean next() throws SQLException
0: 	{
0: 		if (!initialized)
0: 		{
0: 			LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
0: 
0: 			AccessFactory af = lcc.getLanguageConnectionFactory().getAccessFactory();
0: 			transactionTable = af.getTransactionInfo();
0: 
0: 			initialized = true;
0: 			currentRow = -1;
0: 		}
0: 
0: 		if (transactionTable == null)
0: 			return false;
0: 
0: 		for (currentRow++;
0: 			 currentRow < transactionTable.length;
0: 			 currentRow++)
0: 		{
0: 			TransactionInfo info = transactionTable[currentRow];
0: 			if (info == null)
0: 				continue;		// transaction object in flux while the
0: 								// snap shot was taken, get another row
0: 			return true;
0: 		}
0: 
0: 		// currentRow >= transactionTable.length
0: 		transactionTable = null;
0: 		return false;
0: 	}
0: 
0: 	/**
0: 		@see java.sql.ResultSet#close
0: 	 */
0: 	public void close()
0: 	{
0: 		transactionTable = null;
0: 	}
0: 
0: 	/**
0: 		All columns in TransactionTable VTI is of String type.
0: 		@see java.sql.ResultSet#getString
0: 	 */
0: 	public String getString(int columnNumber)
0: 	{
0: 		TransactionInfo info = transactionTable[currentRow];
0: 		String str = null;
0: 
0: 		switch(columnNumber)
0: 		{
0: 		case 1:
0: 			str = info.getTransactionIdString(); break;
0: 
0: 		case 2:
0: 			str = info.getGlobalTransactionIdString(); break;
0: 
0: 		case 3:
0: 			str = info.getUsernameString(); break;
0: 
0: 		case 4:
0: 			str = info.getTransactionTypeString(); break;
0: 
0: 		case 5:
0: 			str = info.getTransactionStatusString(); break;
0: 
0: 		case 6:
0: 			str = info.getFirstLogInstantString(); break;
0: 
0: 		case 7:
0: 
0: 			str = info.getStatementTextString();
0: 			str = StringUtil.truncate(str, DB2Limit.DB2_VARCHAR_MAXWIDTH);
0: 			break;
0: 
0: 		default:
0: 			str = null;
0: 		}
0: 
0: 		wasNull = (str == null);
0: 		return str;
0: 
0: 	}
0: 
0: 	/**
0: 		@see java.sql.ResultSet#wasNull
0: 	 */
0: 	public boolean wasNull()
0: 	{
0: 		return wasNull;
0: 	}
0: 
0: 
0: 	/**  VTI costing interface */
0: 	
0: 	/**
0: 		@see VTICosting#getEstimatedRowCount
0: 	 */
0: 	public double getEstimatedRowCount(VTIEnvironment vtiEnvironment)
0: 	{
0: 		return VTICosting.defaultEstimatedRowCount;
0: 	}
0: 	
0: 	/**
0: 		@see VTICosting#getEstimatedCostPerInstantiation
0: 	 */
0: 	public double getEstimatedCostPerInstantiation(VTIEnvironment vtiEnvironment)
0: 	{
0: 		return VTICosting.defaultEstimatedCost;
0: 	}
0: 
0: 	/**
0: 		@return false
0: 		@see VTICosting#supportsMultipleInstantiations
0: 	 */
0: 	public boolean supportsMultipleInstantiations(VTIEnvironment vtiEnvironment)
0: 	{
0: 		return false;
0: 	}
0: 
0: 
0: 	/*
0: 	** Metadata
0: 	*/
0: 	private static final ResultColumnDescriptor[] columnInfo = {
0: 
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("XID",           Types.VARCHAR, false, 15),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("GLOBAL_XID",    Types.VARCHAR, true,  140),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("USERNAME",      Types.VARCHAR, true,  128),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("TYPE",          Types.VARCHAR, false, 30),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("STATUS",        Types.VARCHAR, false, 8),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("FIRST_INSTANT", Types.VARCHAR, true,  20),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("SQL_TEXT",      Types.VARCHAR, true,  DB2Limit.DB2_VARCHAR_MAXWIDTH),
0: 	};
0: 	
0: 	private static final ResultSetMetaData metadata = new EmbedResultSetMetaData(columnInfo);
0: }
0: 
============================================================================