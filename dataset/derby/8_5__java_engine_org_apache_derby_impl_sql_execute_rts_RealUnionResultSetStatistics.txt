1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics
1:345de35: 
1:0cc1b09:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0cc1b09:    contributor license agreements.  See the NOTICE file distributed with
1:0cc1b09:    this work for additional information regarding copyright ownership.
1:0cc1b09:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0cc1b09:    (the "License"); you may not use this file except in compliance with
1:0cc1b09:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute.rts;
1:eac0369: 
1:5825332: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableHashtable;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1:48a9884: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1:eac0369: 
2:eac0369: /**
1:eac0369:   ResultSetStatistics implemenation for UnionResultSet.
1:eac0369: 
1:eac0369: 
1:eac0369: */
1:eac0369: public class RealUnionResultSetStatistics 
1:eac0369: 	extends RealNoPutResultSetStatistics
1:eac0369: {
1:eac0369: 
1:eac0369: 	/* Leave these fields public for object inspectors */
1:eac0369: 	public int rowsSeenLeft;
1:eac0369: 	public int rowsSeenRight;
1:eac0369: 	public int rowsReturned;
1:eac0369: 	public ResultSetStatistics leftResultSetStatistics;
1:eac0369: 	public ResultSetStatistics rightResultSetStatistics;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * 
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:     public	RealUnionResultSetStatistics(
1:eac0369: 								int numOpens,
1:eac0369: 								int rowsSeen,
1:eac0369: 								int rowsFiltered,
1:eac0369: 								long constructorTime,
1:eac0369: 								long openTime,
1:eac0369: 								long nextTime,
1:eac0369: 								long closeTime,
1:eac0369: 								int resultSetNumber,
1:eac0369: 								int rowsSeenLeft,
1:eac0369: 								int rowsSeenRight,
1:eac0369: 								int rowsReturned,
1:eac0369: 								double optimizerEstimatedRowCount,
1:eac0369: 								double optimizerEstimatedCost,
1:eac0369: 								ResultSetStatistics leftResultSetStatistics,
1:eac0369: 								ResultSetStatistics rightResultSetStatistics
1:eac0369: 								)
1:eac0369: 	{
1:eac0369: 		super(
1:eac0369: 			numOpens,
1:eac0369: 			rowsSeen,
1:eac0369: 			rowsFiltered,
1:eac0369: 			constructorTime,
1:eac0369: 			openTime,
1:eac0369: 			nextTime,
1:eac0369: 			closeTime,
1:eac0369: 			resultSetNumber,
1:eac0369: 			optimizerEstimatedRowCount,
1:eac0369: 			optimizerEstimatedCost
1:eac0369: 			);
1:eac0369: 		this.rowsSeenLeft = rowsSeenLeft;
1:eac0369: 		this.rowsSeenRight = rowsSeenRight;
1:eac0369: 		this.rowsReturned = rowsReturned;
1:eac0369: 		this.leftResultSetStatistics = leftResultSetStatistics;
1:eac0369: 		this.rightResultSetStatistics = rightResultSetStatistics;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// ResultSetStatistics methods
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the statement execution plan as a String.
1:eac0369: 	 *
1:eac0369: 	 * @param depth	Indentation level.
1:eac0369: 	 *
1:eac0369: 	 * @return String	The statement execution plan as a String.
1:eac0369: 	 */
1:eac0369: 	public String getStatementExecutionPlanText(int depth)
1:eac0369: 	{
1:eac0369: 		initFormatInfo(depth);
1:eac0369: 
1:eac0369: 		return
1:eac0369: 			indent + MessageService.getTextMessage(SQLState.RTS_UNION_RS) +
1:eac0369: 				":\n" +
1:eac0369: 			indent + MessageService.getTextMessage(SQLState.RTS_NUM_OPENS) +
1:eac0369: 				" = " + numOpens + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_ROWS_SEEN_LEFT) +
1:eac0369: 				" = " + rowsSeenLeft + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_ROWS_SEEN_RIGHT) +
1:eac0369: 				" = " + rowsSeenRight + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_ROWS_RETURNED) +
1:eac0369: 				" = " + rowsReturned + "\n" +
1:eac0369: 			dumpTimeStats(indent, subIndent) + "\n" +
1:eac0369: 			dumpEstimatedCosts(subIndent) + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(SQLState.RTS_LEFT_RS) +
1:eac0369: 				":\n" +
1:eac0369: 			leftResultSetStatistics.getStatementExecutionPlanText(sourceDepth) +
1:eac0369: 				"\n" +
1:eac0369: 			indent + MessageService.getTextMessage(SQLState.RTS_RIGHT_RS) +
1:eac0369: 				":\n" +
1:eac0369: 			rightResultSetStatistics.getStatementExecutionPlanText(
1:eac0369: 																sourceDepth) +
1:eac0369: 				"\n";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return information on the scan nodes from the statement execution 
1:eac0369: 	 * plan as a String.
1:eac0369: 	 *
1:eac0369: 	 * @param depth	Indentation level.
1:eac0369: 	 * @param tableName if not NULL then print information for this table only
1:eac0369: 	 *
1:eac0369: 	 * @return String	The information on the scan nodes from the 
1:eac0369: 	 *					statement execution plan as a String.
1:eac0369: 	 */
1:eac0369: 	public String getScanStatisticsText(String tableName, int depth)
1:eac0369: 	{
1:eac0369: 		return leftResultSetStatistics.getScanStatisticsText(tableName, depth)
1:eac0369: 			+ rightResultSetStatistics.getScanStatisticsText(tableName, depth);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	// Class implementation
1:eac0369: 	
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return getStatementExecutionPlanText(0);
1:eac0369: 	}
1:9d5bd0e:   public java.util.Vector<ResultSetStatistics> getChildren(){
1:9d5bd0e:     java.util.Vector<ResultSetStatistics> children = new java.util.Vector<ResultSetStatistics>();
1:eac0369:     children.addElement(leftResultSetStatistics);
1:eac0369:     children.addElement(rightResultSetStatistics);
1:eac0369:     return children;
1:eac0369:   }
1:eac0369: 	/**
1:7baf562:    * Format for display, a name for this node. Since this is a SQL operator name,
1:7baf562:    * it does not need to be internationalized.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:   public String getNodeName(){
1:7baf562:       return "Union";
1:eac0369:   }
1:48a9884:   
1:48a9884:   // -----------------------------------------------------
1:48a9884:   // XPLAINable Implementation
1:48a9884:   // -----------------------------------------------------
1:48a9884:   
1:48a9884:     public void accept(XPLAINVisitor visitor) {
1:48a9884:         int noChildren = 0;
1:48a9884:         if(this.leftResultSetStatistics!=null) noChildren++;
1:48a9884:         if(this.rightResultSetStatistics!=null) noChildren++;
1:48a9884:         
1:48a9884:         //inform the visitor
1:48a9884:         visitor.setNumberOfChildren(noChildren);
1:48a9884:         
1:48a9884:         // pre-order, depth-first traversal
1:48a9884:         // me first
1:48a9884:         visitor.visit(this);
1:48a9884:         // then visit first my left child
1:48a9884:         if(leftResultSetStatistics!=null){
1:48a9884:             leftResultSetStatistics.accept(visitor);
1:48a9884:         }
1:48a9884:         // and then my right child
1:48a9884:         if(rightResultSetStatistics!=null){
1:48a9884:             rightResultSetStatistics.accept(visitor);
1:48a9884:         }
1:48a9884:     }  
1:48a9884:     public String getRSXplainType() { return XPLAINUtil.OP_UNION; }
1:48a9884:     public String getRSXplainDetails()
1:48a9884:     {
1:48a9884:         return "("+this.resultSetNumber + ")";
1:48a9884:     }
1:48a9884:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:48a9884:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:48a9884:     {
1:48a9884:         return new XPLAINResultSetDescriptor(
1:48a9884:            (UUID)rsID,
1:48a9884:            getRSXplainType(),
1:48a9884:            getRSXplainDetails(),
1:ce40a31:            this.numOpens,
1:48a9884:            null,                           // index updates
1:48a9884:            null,                           // lock mode
1:48a9884:            null,                           // lock granularity
1:48a9884:            (UUID)parentID,
1:ce40a31:            this.optimizerEstimatedRowCount,
1:ce40a31:            this.optimizerEstimatedCost,
1:48a9884:            null,                              // affected rows
1:48a9884:            null,                              // deferred rows
1:48a9884:            null,                              // the input rows
1:ce40a31:            this.rowsSeenLeft,
1:ce40a31:            this.rowsSeenRight,
1:ce40a31:            this.rowsFiltered,
1:ce40a31:            this.rowsReturned,
1:48a9884:            null,                           // the empty right rows
1:48a9884:            null,                           // index key optimization
1:48a9884:            (UUID)scanID,
1:48a9884:            (UUID)sortID,
1:48a9884:            (UUID)stmtID,
1:48a9884:            (UUID)timingID);
1:48a9884:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:            this.numOpens,
1:            this.optimizerEstimatedRowCount,
1:            this.optimizerEstimatedCost,
1:            this.rowsSeenLeft,
1:            this.rowsSeenRight,
1:            this.rowsFiltered,
1:            this.rowsReturned,
commit:9d5bd0e
/////////////////////////////////////////////////////////////////////////
1:   public java.util.Vector<ResultSetStatistics> getChildren(){
1:     java.util.Vector<ResultSetStatistics> children = new java.util.Vector<ResultSetStatistics>();
commit:7baf562
/////////////////////////////////////////////////////////////////////////
1:    * Format for display, a name for this node. Since this is a SQL operator name,
1:    * it does not need to be internationalized.
1:       return "Union";
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5825332
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
/////////////////////////////////////////////////////////////////////////
1:   
1:   // -----------------------------------------------------
1:   // XPLAINable Implementation
1:   // -----------------------------------------------------
1:   
1:     public void accept(XPLAINVisitor visitor) {
1:         int noChildren = 0;
1:         if(this.leftResultSetStatistics!=null) noChildren++;
1:         if(this.rightResultSetStatistics!=null) noChildren++;
1:         
1:         //inform the visitor
1:         visitor.setNumberOfChildren(noChildren);
1:         
1:         // pre-order, depth-first traversal
1:         // me first
1:         visitor.visit(this);
1:         // then visit first my left child
1:         if(leftResultSetStatistics!=null){
1:             leftResultSetStatistics.accept(visitor);
1:         }
1:         // and then my right child
1:         if(rightResultSetStatistics!=null){
1:             rightResultSetStatistics.accept(visitor);
1:         }
1:     }  
1:     public String getRSXplainType() { return XPLAINUtil.OP_UNION; }
1:     public String getRSXplainDetails()
1:     {
1:         return "("+this.resultSetNumber + ")";
1:     }
1:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:     {
1:         return new XPLAINResultSetDescriptor(
1:            (UUID)rsID,
1:            getRSXplainType(),
1:            getRSXplainDetails(),
0:            new Integer(this.numOpens),
1:            null,                           // index updates
1:            null,                           // lock mode
1:            null,                           // lock granularity
1:            (UUID)parentID,
0:            new Double(this.optimizerEstimatedRowCount),
0:            new Double(this.optimizerEstimatedCost),
1:            null,                              // affected rows
1:            null,                              // deferred rows
1:            null,                              // the input rows
0:            new Integer(this.rowsSeenLeft),
0:            new Integer(this.rowsSeenRight),
0:            new Integer(this.rowsFiltered),
0:            new Integer(this.rowsReturned),
1:            null,                           // the empty right rows
1:            null,                           // index key optimization
1:            (UUID)scanID,
1:            (UUID)sortID,
1:            (UUID)stmtID,
1:            (UUID)timingID);
1:     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:0cc1b09
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.io.FormatableHashtable;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1:   ResultSetStatistics implemenation for UnionResultSet.
1: 
0:   @author jerry
1: 
1: */
1: public class RealUnionResultSetStatistics 
1: 	extends RealNoPutResultSetStatistics
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/* Leave these fields public for object inspectors */
1: 	public int rowsSeenLeft;
1: 	public int rowsSeenRight;
1: 	public int rowsReturned;
1: 	public ResultSetStatistics leftResultSetStatistics;
1: 	public ResultSetStatistics rightResultSetStatistics;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * 
1: 	 *
1: 	 */
1:     public	RealUnionResultSetStatistics(
1: 								int numOpens,
1: 								int rowsSeen,
1: 								int rowsFiltered,
1: 								long constructorTime,
1: 								long openTime,
1: 								long nextTime,
1: 								long closeTime,
1: 								int resultSetNumber,
1: 								int rowsSeenLeft,
1: 								int rowsSeenRight,
1: 								int rowsReturned,
1: 								double optimizerEstimatedRowCount,
1: 								double optimizerEstimatedCost,
1: 								ResultSetStatistics leftResultSetStatistics,
1: 								ResultSetStatistics rightResultSetStatistics
1: 								)
1: 	{
1: 		super(
1: 			numOpens,
1: 			rowsSeen,
1: 			rowsFiltered,
1: 			constructorTime,
1: 			openTime,
1: 			nextTime,
1: 			closeTime,
1: 			resultSetNumber,
1: 			optimizerEstimatedRowCount,
1: 			optimizerEstimatedCost
1: 			);
1: 		this.rowsSeenLeft = rowsSeenLeft;
1: 		this.rowsSeenRight = rowsSeenRight;
1: 		this.rowsReturned = rowsReturned;
1: 		this.leftResultSetStatistics = leftResultSetStatistics;
1: 		this.rightResultSetStatistics = rightResultSetStatistics;
1: 	}
1: 
1: 	// ResultSetStatistics methods
1: 
1: 	/**
1: 	 * Return the statement execution plan as a String.
1: 	 *
1: 	 * @param depth	Indentation level.
1: 	 *
1: 	 * @return String	The statement execution plan as a String.
1: 	 */
1: 	public String getStatementExecutionPlanText(int depth)
1: 	{
1: 		initFormatInfo(depth);
1: 
1: 		return
1: 			indent + MessageService.getTextMessage(SQLState.RTS_UNION_RS) +
1: 				":\n" +
1: 			indent + MessageService.getTextMessage(SQLState.RTS_NUM_OPENS) +
1: 				" = " + numOpens + "\n" +
1: 			indent + MessageService.getTextMessage(
1: 												SQLState.RTS_ROWS_SEEN_LEFT) +
1: 				" = " + rowsSeenLeft + "\n" +
1: 			indent + MessageService.getTextMessage(
1: 												SQLState.RTS_ROWS_SEEN_RIGHT) +
1: 				" = " + rowsSeenRight + "\n" +
1: 			indent + MessageService.getTextMessage(
1: 												SQLState.RTS_ROWS_RETURNED) +
1: 				" = " + rowsReturned + "\n" +
1: 			dumpTimeStats(indent, subIndent) + "\n" +
1: 			dumpEstimatedCosts(subIndent) + "\n" +
1: 			indent + MessageService.getTextMessage(SQLState.RTS_LEFT_RS) +
1: 				":\n" +
1: 			leftResultSetStatistics.getStatementExecutionPlanText(sourceDepth) +
1: 				"\n" +
1: 			indent + MessageService.getTextMessage(SQLState.RTS_RIGHT_RS) +
1: 				":\n" +
1: 			rightResultSetStatistics.getStatementExecutionPlanText(
1: 																sourceDepth) +
1: 				"\n";
1: 	}
1: 
1: 	/**
1: 	 * Return information on the scan nodes from the statement execution 
1: 	 * plan as a String.
1: 	 *
1: 	 * @param depth	Indentation level.
1: 	 * @param tableName if not NULL then print information for this table only
1: 	 *
1: 	 * @return String	The information on the scan nodes from the 
1: 	 *					statement execution plan as a String.
1: 	 */
1: 	public String getScanStatisticsText(String tableName, int depth)
1: 	{
1: 		return leftResultSetStatistics.getScanStatisticsText(tableName, depth)
1: 			+ rightResultSetStatistics.getScanStatisticsText(tableName, depth);
1: 	}
1: 
1: 
1: 	// Class implementation
1: 	
1: 	public String toString()
1: 	{
1: 		return getStatementExecutionPlanText(0);
1: 	}
0:   public java.util.Vector getChildren(){
0:     java.util.Vector children = new java.util.Vector();
1:     children.addElement(leftResultSetStatistics);
1:     children.addElement(rightResultSetStatistics);
1:     return children;
1:   }
1: 	/**
0:    * Format for display, a name for this node.
1: 	 *
1: 	 */
1:   public String getNodeName(){
0:     return MessageService.getTextMessage(SQLState.RTS_UNION);
1:   }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute.rts;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0:   ResultSetStatistics implemenation for UnionResultSet.
0: 
0:   @author jerry
0: 
0: */
0: public class RealUnionResultSetStatistics 
0: 	extends RealNoPutResultSetStatistics
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/* Leave these fields public for object inspectors */
0: 	public int rowsSeenLeft;
0: 	public int rowsSeenRight;
0: 	public int rowsReturned;
0: 	public ResultSetStatistics leftResultSetStatistics;
0: 	public ResultSetStatistics rightResultSetStatistics;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * 
0: 	 *
0: 	 */
0:     public	RealUnionResultSetStatistics(
0: 								int numOpens,
0: 								int rowsSeen,
0: 								int rowsFiltered,
0: 								long constructorTime,
0: 								long openTime,
0: 								long nextTime,
0: 								long closeTime,
0: 								int resultSetNumber,
0: 								int rowsSeenLeft,
0: 								int rowsSeenRight,
0: 								int rowsReturned,
0: 								double optimizerEstimatedRowCount,
0: 								double optimizerEstimatedCost,
0: 								ResultSetStatistics leftResultSetStatistics,
0: 								ResultSetStatistics rightResultSetStatistics
0: 								)
0: 	{
0: 		super(
0: 			numOpens,
0: 			rowsSeen,
0: 			rowsFiltered,
0: 			constructorTime,
0: 			openTime,
0: 			nextTime,
0: 			closeTime,
0: 			resultSetNumber,
0: 			optimizerEstimatedRowCount,
0: 			optimizerEstimatedCost
0: 			);
0: 		this.rowsSeenLeft = rowsSeenLeft;
0: 		this.rowsSeenRight = rowsSeenRight;
0: 		this.rowsReturned = rowsReturned;
0: 		this.leftResultSetStatistics = leftResultSetStatistics;
0: 		this.rightResultSetStatistics = rightResultSetStatistics;
0: 	}
0: 
0: 	// ResultSetStatistics methods
0: 
0: 	/**
0: 	 * Return the statement execution plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 *
0: 	 * @return String	The statement execution plan as a String.
0: 	 */
0: 	public String getStatementExecutionPlanText(int depth)
0: 	{
0: 		initFormatInfo(depth);
0: 
0: 		return
0: 			indent + MessageService.getTextMessage(SQLState.RTS_UNION_RS) +
0: 				":\n" +
0: 			indent + MessageService.getTextMessage(SQLState.RTS_NUM_OPENS) +
0: 				" = " + numOpens + "\n" +
0: 			indent + MessageService.getTextMessage(
0: 												SQLState.RTS_ROWS_SEEN_LEFT) +
0: 				" = " + rowsSeenLeft + "\n" +
0: 			indent + MessageService.getTextMessage(
0: 												SQLState.RTS_ROWS_SEEN_RIGHT) +
0: 				" = " + rowsSeenRight + "\n" +
0: 			indent + MessageService.getTextMessage(
0: 												SQLState.RTS_ROWS_RETURNED) +
0: 				" = " + rowsReturned + "\n" +
0: 			dumpTimeStats(indent, subIndent) + "\n" +
0: 			dumpEstimatedCosts(subIndent) + "\n" +
0: 			indent + MessageService.getTextMessage(SQLState.RTS_LEFT_RS) +
0: 				":\n" +
0: 			leftResultSetStatistics.getStatementExecutionPlanText(sourceDepth) +
0: 				"\n" +
0: 			indent + MessageService.getTextMessage(SQLState.RTS_RIGHT_RS) +
0: 				":\n" +
0: 			rightResultSetStatistics.getStatementExecutionPlanText(
0: 																sourceDepth) +
0: 				"\n";
0: 	}
0: 
0: 	/**
0: 	 * Return information on the scan nodes from the statement execution 
0: 	 * plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 * @param tableName if not NULL then print information for this table only
0: 	 *
0: 	 * @return String	The information on the scan nodes from the 
0: 	 *					statement execution plan as a String.
0: 	 */
0: 	public String getScanStatisticsText(String tableName, int depth)
0: 	{
0: 		return leftResultSetStatistics.getScanStatisticsText(tableName, depth)
0: 			+ rightResultSetStatistics.getScanStatisticsText(tableName, depth);
0: 	}
0: 
0: 
0: 	// Class implementation
0: 	
0: 	public String toString()
0: 	{
0: 		return getStatementExecutionPlanText(0);
0: 	}
0:   public java.util.Vector getChildren(){
0:     java.util.Vector children = new java.util.Vector();
0:     children.addElement(leftResultSetStatistics);
0:     children.addElement(rightResultSetStatistics);
0:     return children;
0:   }
0: 	/**
0:    * Format for display, a name for this node.
0: 	 *
0: 	 */
0:   public String getNodeName(){
0:     return MessageService.getTextMessage(SQLState.RTS_UNION);
0:   }
0: }
============================================================================