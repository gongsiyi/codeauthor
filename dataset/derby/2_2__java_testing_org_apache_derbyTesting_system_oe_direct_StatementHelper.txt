1:a6358d6: /*
1:a6358d6:  *
1:a6358d6:  * Derby - Class org.apache.derbyTesting.system.oe.direct.StatementHelper
1:a6358d6:  *
1:a6358d6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a6358d6:  * contributor license agreements.  See the NOTICE file distributed with
1:a6358d6:  * this work for additional information regarding copyright ownership.
1:a6358d6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a6358d6:  * (the "License"); you may not use this file except in compliance with
1:a6358d6:  * the License.  You may obtain a copy of the License at
1:a6358d6:  *
1:a6358d6:  *    http://www.apache.org/licenses/LICENSE-2.0
1:a6358d6:  *
1:a6358d6:  * Unless required by applicable law or agreed to in writing, 
1:a6358d6:  * software distributed under the License is distributed on an 
1:a6358d6:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:a6358d6:  * either express or implied. See the License for the specific 
1:a6358d6:  * language governing permissions and limitations under the License.
1:a6358d6:  */
1:a6358d6: package org.apache.derbyTesting.system.oe.direct;
4:a6358d6: 
1:a6358d6: import java.sql.Connection;
1:a6358d6: import java.sql.PreparedStatement;
1:a6358d6: import java.sql.ResultSet;
1:a6358d6: import java.sql.SQLException;
1:a6358d6: import java.util.IdentityHashMap;
1:a6358d6: import java.util.Map;
1:a6358d6: 
1:a6358d6: import org.apache.derbyTesting.system.oe.model.Address;
1:a6358d6: 
1:a6358d6: /**
1:a6358d6:  * Utility class for direct operations. Maintains the connection
1:a6358d6:  * and a hash table of PreparedStatements to simplify management
1:a6358d6:  * of PreparedStatement objects by the business transactions.
1:a6358d6:  *
1:a6358d6:  */
1:a6358d6: class StatementHelper {
1:a6358d6: 
1:a6358d6:     protected final Connection conn;
1:a6358d6:     
1:a6358d6:     StatementHelper(Connection conn, boolean autoCommit, int isolation) throws SQLException
2:a6358d6:     {
1:a6358d6:         this.conn = conn;
1:a6358d6:         conn.setAutoCommit(autoCommit);
1:a6358d6:         conn.setTransactionIsolation(isolation);
1:a6358d6:     }
1:a6358d6:     
1:a6358d6:     /**
1:a6358d6:      * Map of SQL text to its PreparedStatement.
1:a6358d6:      * This allows the SQL text to be in-line with
1:a6358d6:      * code that sets the parameters and looks at 
1:a6358d6:      * the results. Map is on the identity of the SQL
1:a6358d6:      * string which assumes they are all constants
1:a6358d6:      * (and hence interned). Assumption is that this
1:a6358d6:      * will provide for a quicker lookup than by text
1:a6358d6:      * since the statements can be many characters.
1:a6358d6:      * 
1:a6358d6:      * May also allow easier sharing with other implementations
1:a6358d6:      * such as a Java procedure which could have a different
1:a6358d6:      * prepareStatement method.
1:a6358d6:      */
1:9d44c9e:     private Map<String, PreparedStatement> statements =
1:9d44c9e:             new IdentityHashMap<String, PreparedStatement>();
1:a6358d6: 
1:a6358d6:     /**
1:a6358d6:      * Prepare a statement, looking in the map first.
1:a6358d6:      * If the statement does not exist in the map then
1:a6358d6:      * it is prepared and put into the map for future use.
1:a6358d6:      */
1:a6358d6:     protected PreparedStatement prepareStatement(String sql) throws SQLException {
1:9d44c9e:         PreparedStatement ps = statements.get(sql);
1:a6358d6:         if (ps != null)
1:a6358d6:             return ps;
1:a6358d6:         
1:a6358d6:         // Prepare all statements as forward-only, read-only, close at commit.
1:a6358d6:         ps = conn.prepareStatement(sql,
1:a6358d6:                 ResultSet.TYPE_FORWARD_ONLY,
1:a6358d6:                 ResultSet.CONCUR_READ_ONLY,
1:a6358d6:                 ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:a6358d6:         statements.put(sql, ps);
1:a6358d6:         return ps;
1:a6358d6:     }
1:a6358d6: 
1:a6358d6:     public void close() throws SQLException {
1:9d44c9e:         for (PreparedStatement ps : statements.values()) {
1:a6358d6:             ps.close();
1:a6358d6:         }
1:a6358d6:     }
1:a6358d6: 
1:a6358d6:     /**
1:a6358d6:      * Reset a PreparedStatement. Closes its open ResultSet
1:a6358d6:      * and clears the parameters. While clearing the parameters
1:a6358d6:      * is not required since any future execution will override
1:a6358d6:      * them, it is done here to reduce the chance of errors.
1:a6358d6:      * E.g. using the wrong prepared statement for a operation
1:a6358d6:      * or not setting all the parameters.
1:a6358d6:      * It is assumed the prepared statement was just executed.
1:a6358d6:      * @throws SQLException 
1:a6358d6:      */
1:a6358d6:     protected void reset(PreparedStatement ps) throws SQLException {
1:a6358d6:         ResultSet rs = ps.getResultSet();
1:a6358d6:         if (rs != null)
1:a6358d6:             rs.close();
1:a6358d6:         ps.clearParameters();
1:a6358d6:     }
1:a6358d6: 
1:a6358d6:     protected Address getAddress(ResultSet rs, String firstColumnName) throws SQLException {
1:eb03212:         return getAddress(new Address(), rs, firstColumnName);
1:eb03212:     }
1:eb03212:     
1:eb03212:     /**
1:eb03212:      * Get the address from a query against an order entry WAREHOUSE, DISTRICT
1:eb03212:      * or CUSTOMER table.
1:eb03212:      * 
1:eb03212:      * @param address Object to fill in
1:eb03212:      * @param rs ResultSet already positioned on the current row.
1:eb03212:      * @param firstColumnName First column that makes up the address.
1:eb03212:      * @throws SQLException
1:eb03212:      */
1:eb03212:     protected Address getAddress(Address address,
1:eb03212:             ResultSet rs, String firstColumnName) throws SQLException {
1:a6358d6:         
1:eb03212:         address.clear();
1:eb03212:     
1:a6358d6:         int col = rs.findColumn(firstColumnName);
1:a6358d6:         address.setStreet1(rs.getString(col++));
1:a6358d6:         address.setStreet2(rs.getString(col++));
1:a6358d6:         address.setCity(rs.getString(col++));
1:a6358d6:         address.setState(rs.getString(col++));
1:a6358d6:         address.setZip(rs.getString(col));
1:eb03212: 
1:a6358d6:         return address;
1:a6358d6:     }
1:a6358d6: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, PreparedStatement> statements =
1:             new IdentityHashMap<String, PreparedStatement>();
/////////////////////////////////////////////////////////////////////////
1:         PreparedStatement ps = statements.get(sql);
/////////////////////////////////////////////////////////////////////////
1:         for (PreparedStatement ps : statements.values()) {
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:eb03212
/////////////////////////////////////////////////////////////////////////
1:         return getAddress(new Address(), rs, firstColumnName);
1:     }
1:     
1:     /**
1:      * Get the address from a query against an order entry WAREHOUSE, DISTRICT
1:      * or CUSTOMER table.
1:      * 
1:      * @param address Object to fill in
1:      * @param rs ResultSet already positioned on the current row.
1:      * @param firstColumnName First column that makes up the address.
1:      * @throws SQLException
1:      */
1:     protected Address getAddress(Address address,
1:             ResultSet rs, String firstColumnName) throws SQLException {
1:         address.clear();
1:     
1: 
commit:a6358d6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.system.oe.direct.StatementHelper
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.system.oe.direct;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.util.IdentityHashMap;
0: import java.util.Iterator;
1: import java.util.Map;
1: 
1: import org.apache.derbyTesting.system.oe.model.Address;
1: 
1: /**
1:  * Utility class for direct operations. Maintains the connection
1:  * and a hash table of PreparedStatements to simplify management
1:  * of PreparedStatement objects by the business transactions.
1:  *
1:  */
1: class StatementHelper {
1: 
1:     protected final Connection conn;
1:     
1:     StatementHelper(Connection conn, boolean autoCommit, int isolation) throws SQLException
1:     {
1:         this.conn = conn;
1:         conn.setAutoCommit(autoCommit);
1:         conn.setTransactionIsolation(isolation);
1:     }
1:     
1:     /**
1:      * Map of SQL text to its PreparedStatement.
1:      * This allows the SQL text to be in-line with
1:      * code that sets the parameters and looks at 
1:      * the results. Map is on the identity of the SQL
1:      * string which assumes they are all constants
1:      * (and hence interned). Assumption is that this
1:      * will provide for a quicker lookup than by text
1:      * since the statements can be many characters.
1:      * 
1:      * May also allow easier sharing with other implementations
1:      * such as a Java procedure which could have a different
1:      * prepareStatement method.
1:      */
0:     private Map statements = new IdentityHashMap();
1: 
1:     /**
1:      * Prepare a statement, looking in the map first.
1:      * If the statement does not exist in the map then
1:      * it is prepared and put into the map for future use.
1:      */
1:     protected PreparedStatement prepareStatement(String sql) throws SQLException {
0:         PreparedStatement ps = (PreparedStatement) statements.get(sql);
1:         if (ps != null)
1:             return ps;
1:         
1:         // Prepare all statements as forward-only, read-only, close at commit.
1:         ps = conn.prepareStatement(sql,
1:                 ResultSet.TYPE_FORWARD_ONLY,
1:                 ResultSet.CONCUR_READ_ONLY,
1:                 ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:         statements.put(sql, ps);
1:         return ps;
1:     }
1: 
1:     public void close() throws SQLException {
1:               
0:         for (Iterator i = statements.keySet().iterator(); i.hasNext(); )
1:         {
0:             String sql = (String) i.next();
0:             PreparedStatement ps = (PreparedStatement) statements.get(sql);
1:             ps.close();
1:         }
1:     }
1: 
1:     /**
1:      * Reset a PreparedStatement. Closes its open ResultSet
1:      * and clears the parameters. While clearing the parameters
1:      * is not required since any future execution will override
1:      * them, it is done here to reduce the chance of errors.
1:      * E.g. using the wrong prepared statement for a operation
1:      * or not setting all the parameters.
1:      * It is assumed the prepared statement was just executed.
1:      * @throws SQLException 
1:      */
1:     protected void reset(PreparedStatement ps) throws SQLException {
1:         ResultSet rs = ps.getResultSet();
1:         if (rs != null)
1:             rs.close();
1:         ps.clearParameters();
1:     }
1: 
1:     protected Address getAddress(ResultSet rs, String firstColumnName) throws SQLException {
0:         Address address = new Address();
1:         
1:         int col = rs.findColumn(firstColumnName);
1:         address.setStreet1(rs.getString(col++));
1:         address.setStreet2(rs.getString(col++));
1:         address.setCity(rs.getString(col++));
1:         address.setState(rs.getString(col++));
1:         address.setZip(rs.getString(col));
1:         
1:         return address;
1:     }
1: 
1: }
============================================================================