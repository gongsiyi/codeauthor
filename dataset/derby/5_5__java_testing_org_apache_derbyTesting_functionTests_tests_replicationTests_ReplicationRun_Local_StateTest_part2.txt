1:40a554b: /*
6:40a554b:  
1:9c2b1f3: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2
1:40a554b:  
1:40a554b: Licensed to the Apache Software Foundation (ASF) under one or more
1:40a554b: contributor license agreements.  See the NOTICE file distributed with
1:40a554b: this work for additional information regarding copyright ownership.
1:40a554b: The ASF licenses this file to You under the Apache License, Version 2.0
1:40a554b: (the "License"); you may not use this file except in compliance with
1:40a554b: the License.  You may obtain a copy of the License at
1:40a554b:  
1:40a554b:    http://www.apache.org/licenses/LICENSE-2.0
1:40a554b:  
1:40a554b: Unless required by applicable law or agreed to in writing, software
1:40a554b: distributed under the License is distributed on an "AS IS" BASIS,
1:40a554b: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a554b: See the License for the specific language governing permissions and
1:40a554b: limitations under the License.
1:40a554b:  
1:40a554b:  */
1:40a554b: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:40a554b: 
1:40a554b: import java.sql.Connection;
1:40a554b: import java.sql.DriverManager;
1:40a554b: import java.sql.ResultSet;
1:40a554b: import java.sql.SQLException;
1:40a554b: import java.sql.Statement;
1:40a554b: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:40a554b: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:40a554b: 
1:40a554b: 
1:40a554b: /**
1:40a554b:  * Run a replication test on localhost
1:40a554b:  * by using default values for master and slave hosts,
1:40a554b:  * and master and slave ports.
1:40a554b:  * 
1:40a554b:  */
1:40a554b: 
1:40a554b: public class ReplicationRun_Local_StateTest_part2 extends ReplicationRun
11:40a554b: {
1:40a554b:     
1:40a554b:     /**
1:40a554b:      * Creates a new instance of ReplicationRun_Local
1:40a554b:      * @param testcaseName Identifying the test.
1:40a554b:      */
1:40a554b:     public ReplicationRun_Local_StateTest_part2(String testcaseName)
1:40a554b:     {
1:40a554b:         super(testcaseName);
11:40a554b:     }
1:40a554b:     
1:40a554b:     public static Test suite()
1:40a554b:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ReplicationRun_Local_StateTest_part2 Suite");
1:40a554b:         
1:40a554b:         suite.addTestSuite( ReplicationRun_Local_StateTest_part2.class );
1:40a554b:         
1:40a554b:         return SecurityManagerSetup.noSecurityManager(suite);
1:40a554b:     }
1:40a554b:         
1:c5935ad:     /**
1:c5935ad:      * Verify that correct response to replication "commands":
1:c5935ad:      * startSlave, startMaster, stopSlave, stopMaster and failOver,
1:c5935ad:      * are given when the replicating database is in the following states:
1:c5935ad:      * Failover has been performed and 
1:c5935ad:      * - slave db has not been shut down,
1:c5935ad:      * - slave db has been shut down,
1:c5935ad:      * - slave server has been stopped,
1:c5935ad:      * - master db has been shut down,
1:c5935ad:      * - master server has been stopped.
1:c5935ad:      * @throws java.lang.Exception
1:c5935ad:      */
1:40a554b:     public void testReplication_Local_StateTest_part2()
1:40a554b:     throws Exception
1:40a554b:     {
1:40a554b:         cleanAllTestHosts();
1:40a554b:         
1:40a554b:         initEnvironment();
1:40a554b:         
1:40a554b:         initMaster(masterServerHost,
1:40a554b:                 replicatedDb);
1:40a554b:         
1:136610d:         startServer(masterJvmVersion, derbyMasterVersion,
1:40a554b:                 masterServerHost,
1:40a554b:                 ALL_INTERFACES,
1:40a554b:                 masterServerPort,
1:dbe5dc3:                 masterDbSubPath);
1:40a554b:         
1:136610d:         startServer(slaveJvmVersion, derbySlaveVersion,
1:40a554b:                 slaveServerHost,
1:40a554b:                 ALL_INTERFACES,
1:40a554b:                 slaveServerPort,
1:dbe5dc3:                 slaveDbSubPath);
1:40a554b:         
1:40a554b:         startServerMonitor(slaveServerHost);
1:40a554b:         
1:40a554b:         bootMasterDatabase(jvmVersion,
1:40a554b:                 masterDatabasePath +FS+ masterDbSubPath,
1:40a554b:                 replicatedDb,
1:40a554b:                 masterServerHost,
1:40a554b:                 masterServerPort,
1:40a554b:                 null // bootLoad, // The "test" to start when booting db.
1:40a554b:                 );
1:40a554b:         
1:40a554b:         initSlave(slaveServerHost,
1:40a554b:                 jvmVersion,
1:40a554b:                 replicatedDb);
1:40a554b:         
1:40a554b:         startSlave(jvmVersion, replicatedDb,
1:40a554b:                 slaveServerHost,
1:40a554b:                 slaveServerPort,
1:40a554b:                 slaveServerHost,
1:40a554b:                 slaveReplPort,
1:40a554b:                 testClientHost);
1:40a554b:         
1:40a554b:         startMaster(jvmVersion, replicatedDb,
1:40a554b:                 masterServerHost,
1:40a554b:                 masterServerPort,
1:40a554b:                 masterServerHost,
1:40a554b:                 slaveServerPort,
1:40a554b:                 slaveServerHost,
1:40a554b:                 slaveReplPort);
1:40a554b:         
1:40a554b:         
1:40a554b:         // Run a "load" on the master to make sure there
1:40a554b:         // has been replication to slave.
1:40a554b:         replicationTest = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun";
1:40a554b:         util.DEBUG("replicationTest: " + replicationTest);
1:40a554b:         replicationVerify = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify";
1:40a554b:         util.DEBUG("replicationVerify: " + replicationVerify);
1:40a554b:         
1:40a554b:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
1:40a554b:                 jvmVersion,
1:40a554b:                 testClientHost,
1:40a554b:                 masterServerHost, masterServerPort,
1:40a554b:                 replicatedDb);
1:40a554b:         
1:40a554b:         // Check that this is gone after failover!
1:40a554b:         Connection mConn = getConnection(masterServerHost, masterServerPort, 
1:40a554b:                     masterDatabasePath, masterDbSubPath, replicatedDb);
1:40a554b:         
1:40a554b:         failOver(jvmVersion,
1:40a554b:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:40a554b:                 masterServerHost,  // Where the master db is run.
1:40a554b:                 masterServerPort,
1:40a554b:                 testClientHost);
1:40a554b:         
1:40a554b:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:40a554b:                 slaveServerHost,slaveServerPort,
1:40a554b:                 testClientHost);
1:40a554b:         
1:40a554b:         verifySlave();
1:40a554b:         
1:40a554b:         // We should verify the master as well, at least to see that we still can connect.
1:40a554b:         verifyMaster();
1:40a554b:         
1:40a554b:         _testPreStoppedSlave(mConn);
1:40a554b:         
1:40a554b:         shutdownDb(jvmVersion,
1:40a554b:             slaveServerHost, slaveServerPort,
1:40a554b:             slaveDatabasePath+FS+slaveDbSubPath, replicatedDb,
1:40a554b:             testClientHost);
1:40a554b:         
1:40a554b:         _testPostStoppedSlave();
1:40a554b:         // _testPreStoppedSlaveServer();
1:40a554b:         
1:40a554b:         stopServer(jvmVersion, derbyVersion,
1:40a554b:                 slaveServerHost, slaveServerPort);
1:40a554b:         
1:40a554b:         _testPostStoppedSlaveServer();
1:40a554b:         // _testPreStoppedMaster();
1:40a554b:         
1:40a554b:         // NOTE:
1:40a554b:         // If stopMaster is "connect 'jdbc:...:dbname;shutdown=true';", 
1:40a554b:         // this method call will fail because failover has already shutdown 
1:40a554b:         // the master database
1:40a554b:         
1:40a554b:         shutdownDb(jvmVersion,
1:40a554b:             masterServerHost, masterServerPort,
1:40a554b:             masterDatabasePath+FS+masterDbSubPath, replicatedDb,
1:40a554b:             testClientHost);
1:40a554b:         
1:40a554b:         _testPostStoppedMaster();
1:40a554b:         // _testPreStoppedMasterServer();
1:40a554b:         
1:40a554b:         stopServer(jvmVersion, derbyVersion,
1:40a554b:                 masterServerHost, masterServerPort);
1:40a554b:         
1:40a554b:         _testPostStoppedServer();
1:40a554b:         
1:40a554b:     }
1:40a554b: 
1:40a554b:     private void _testPreStoppedSlave(Connection mConn)
1:dfbf41e:         throws Exception
1:40a554b:     {
1:40a554b:         util.DEBUG("_testPreStoppedSlave");
1:40a554b:         /*  
1:40a554b:          * Future test case; should probably be done in a separate test 
1:40a554b:          * - let Derby instances change roles:
1:40a554b:          *   - (M) copy db from slave location to master location
1:40a554b:          *   - (M) start old master in slave mode
1:40a554b:          *   - (S) start old slave in master mode
1:40a554b:          *
1:40a554b:          */
1:40a554b:         
1:40a554b:         // Tests against slave:
1:40a554b:         assertException(
1:c5935ad:                 _startSlave(slaveServerHost,slaveServerPort,
2:40a554b:                     slaveDatabasePath, replicatedDb,
2:40a554b:                     slaveReplPort),
1:40a554b:                 "XRE09");
1:40a554b: 
1:40a554b:         assertException(
1:dfbf41e:                 stopSlave(slaveServerHost,slaveServerPort,
1:dfbf41e:                           slaveDatabasePath, replicatedDb,
1:dfbf41e:                           true),
1:40a554b:                 "XRE40");
1:40a554b:         
1:40a554b:         assertException(
1:c5935ad:                 _failOver(slaveServerHost,slaveServerPort,
1:40a554b:                     slaveDatabasePath, slaveDbSubPath, replicatedDb),
1:40a554b:                 "XRE07");
1:40a554b:         
1:40a554b:         // Tests against master:
1:40a554b:         assertException(
1:c5935ad:                 _startMaster(masterServerHost,masterServerPort,
1:40a554b:                     masterDatabasePath, replicatedDb,
1:40a554b:                     slaveServerHost,slaveReplPort),
1:40a554b:                 "XRE04");
1:40a554b:         
1:40a554b:         assertException(
1:c5935ad:                 _failOver(masterServerHost,masterServerPort,
1:40a554b:                     masterDatabasePath, masterDbSubPath, replicatedDb),
1:40a554b:                 "XRE07");
1:40a554b:         
1:40a554b:         // connect / show tables
1:40a554b:         assertException(
1:c5935ad:                 _executeQuery(mConn, "select count(*) from SYS.SYSTABLES"), 
1:40a554b:                 "08006"); // Thats's just how it is...
1:40a554b:          assertException(
1:c5935ad:                 _executeQuery(mConn, "select count(*) from SYS.SYSTABLES"), 
1:40a554b:                 "08003"); // Thats's just how it is...
1:40a554b:         
1:40a554b:         // Tests against slave:
1:40a554b:         Connection sConn = getConnection(slaveServerHost, slaveServerPort, 
1:40a554b:                     slaveDatabasePath, slaveDbSubPath, replicatedDb); // OK
1:40a554b:          assertException(
1:c5935ad:                 _executeQuery(sConn, "select count(*) from SYS.SYSTABLES"), 
1:40a554b:                 null); // null: Should be OK
1:40a554b:          sConn.close();
1:40a554b:     }
1:40a554b: 
1:40a554b:     private void _testPostStoppedSlave()
1:40a554b:     {
1:40a554b:         util.DEBUG("_testPostStoppedSlave");
1:40a554b:         /* No value-adding suggestions here exept that calling startSlave 
1:40a554b:          * should hang now. 
1:40a554b:          */
1:f41a8a7:         util.DEBUG("_testPostStoppedSlave Not yet implemented."
1:f41a8a7:                 + " No value-adding suggestions here"
1:f41a8a7:                 + " exept that calling startSlave should hang now.");
1:40a554b:     }
1:40a554b: 
1:40a554b:     private void _testPostStoppedSlaveServer()
1:40a554b:     {
1:40a554b:         /* No value-adding suggestions here */
1:f41a8a7:         util.DEBUG("_testPostStoppedSlaveServer Not yet implemented."
1:f41a8a7:                 + " No value-adding suggestions here.");
1:40a554b:     }
1:40a554b: 
1:40a554b:     private void _testPostStoppedMaster()
1:40a554b:     {
1:40a554b:         /* No value-adding suggestions here since the stopMaster method will 
1:40a554b:          * not do anything when called after failover
1:40a554b:          */
1:f41a8a7:         util.DEBUG("_testPostStoppedMaster Not yet implemented."
1:f41a8a7:                 + "No value-adding suggestions here since the stopMaster method"
1:f41a8a7:                 + " will not do anything when called after failover");
1:40a554b:     }
1:40a554b: 
1:40a554b:     private void _testPostStoppedServer()
1:40a554b:     {
1:40a554b:         /* No value-adding suggestions here */
1:f41a8a7:         util.DEBUG("_testPostStoppedServer Not yet implemented."
1:f41a8a7:                 + " No value-adding suggestions here.");
1:40a554b:     }
1:40a554b:     
1:c5935ad:     SQLException _startSlave(String slaveServerHost, int slaveServerPort,
2:40a554b:             String slaveDatabasePath, String replicatedDb,
2:40a554b:             int slaveReplPort)
1:40a554b:     {
1:dbe5dc3:         String db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
3:40a554b:         String connectionURL = "jdbc:derby:"  
2:40a554b:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
2:40a554b:                 + db
1:40a554b:                 + ";startSlave=true"
2:40a554b:                 + ";slaveHost=" + slaveServerHost 
2:40a554b:                 + ";slavePort=" + slaveReplPort;
3:40a554b:         util.DEBUG(connectionURL);
2:40a554b:         try
1:40a554b:         {
2:40a554b:             Connection conn = DriverManager.getConnection(connectionURL);
1:40a554b:             util.DEBUG("startSlave Unexpectedly connected as: " + connectionURL);
1:40a554b:             return new SQLException("startSlave Unexpectedly connected");
1:40a554b:         }
2:40a554b:         catch (SQLException se)
1:40a554b:         {
2:40a554b:             return se;
1:40a554b:         }
1:40a554b:     }
1:40a554b: 
1:40a554b: 
1:c5935ad:     SQLException _failOver(String serverHost, int serverPort, 
2:40a554b:             String databasePath, String dbSubPath, String replicatedDb)
1:40a554b:     {
1:dbe5dc3:         String db = databasePath +FS+dbSubPath +FS+ replicatedDb;
1:40a554b:         String connectionURL = "jdbc:derby:"  
2:40a554b:                 + "//" + serverHost + ":" + serverPort + "/"
1:40a554b:                 + db
1:40a554b:                 + ";failover=true";
1:40a554b:         util.DEBUG(connectionURL);
1:40a554b:         try
1:40a554b:         {
1:40a554b:             Connection conn = DriverManager.getConnection(connectionURL);
1:40a554b:             util.DEBUG("failOver Unexpectedly connected as: " + connectionURL);
1:40a554b:             return new SQLException("failOver Unexpectedly connected");
1:40a554b:         }
1:40a554b:         catch (SQLException se)
1:40a554b:         {
1:40a554b:             return se;
1:40a554b:         }
1:40a554b:     }
1:40a554b:     
1:c5935ad:     SQLException _startMaster(String masterServerHost, int masterServerPort,
1:40a554b:             String databasePath, String replicatedDb,
1:40a554b:             String slaveServerHost,
1:40a554b:             int slaveReplPort)
1:40a554b:     {
1:dbe5dc3:         String db = databasePath +FS+ReplicationRun.masterDbSubPath +FS+ replicatedDb;
1:40a554b:         String connectionURL = "jdbc:derby:"  
1:40a554b:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:40a554b:                 + db
1:40a554b:                 + ";startMaster=true"
1:40a554b:                 + ";slaveHost=" + slaveServerHost 
1:40a554b:                 + ";slavePort=" + slaveReplPort;
1:40a554b:         util.DEBUG(connectionURL);
1:40a554b:         try
1:40a554b:         {
1:40a554b:             Connection conn = DriverManager.getConnection(connectionURL);
1:40a554b:             util.DEBUG("startMaster Unexpectedly connected as: " + connectionURL);
1:40a554b:             return new SQLException("startMaster Unexpectedly connected");
1:40a554b:         }
1:40a554b:         catch (SQLException se)
1:40a554b:         {
1:40a554b:             return se;
1:40a554b:         }
1:40a554b:     }
1:40a554b: 
1:40a554b:     SQLException connectTo(String serverHost, int serverPort,
1:40a554b:             String databasePath, String dbSubPath, String replicatedDb)
1:40a554b:     {
1:dbe5dc3:         String db = databasePath +FS+dbSubPath +FS+ replicatedDb;
1:40a554b:         String connectionURL = "jdbc:derby:"  
1:40a554b:                 + "//" + serverHost + ":" + serverPort + "/"
2:40a554b:                 + db;
1:40a554b:         util.DEBUG(connectionURL);
1:40a554b:         try
1:40a554b:         {
1:40a554b:             Connection conn = DriverManager.getConnection(connectionURL);
1:40a554b:             util.DEBUG("connectTo Unexpectedly connected as: " + connectionURL);
1:40a554b:             return new SQLException("connectTo Unexpectedly connected");
1:40a554b:         }
1:40a554b:         catch (SQLException se)
1:40a554b:         {
1:40a554b:             return se;
1:40a554b:         }
1:40a554b:     }
1:40a554b: 
1:c5935ad:     SQLException _executeQuery(Connection conn, String query)
1:40a554b:     {
1:40a554b:         util.DEBUG("executeQuery: " + query);
1:40a554b:         try
1:40a554b:         {
1:40a554b:             Statement s = conn.createStatement();
1:40a554b:             ResultSet rs = s.executeQuery(query);
1:40a554b:             return null;        
1:40a554b:         }
1:40a554b:         catch (SQLException se)
1:40a554b:         {
1:40a554b:             return se;
1:40a554b:         }
1:40a554b:     }
1:40a554b: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ReplicationRun_Local_StateTest_part2 Suite");
commit:dfbf41e
/////////////////////////////////////////////////////////////////////////
1:         throws Exception
/////////////////////////////////////////////////////////////////////////
1:                 stopSlave(slaveServerHost,slaveServerPort,
1:                           slaveDatabasePath, replicatedDb,
1:                           true),
/////////////////////////////////////////////////////////////////////////
commit:9c2b1f3
/////////////////////////////////////////////////////////////////////////
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:136610d
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion, derbyMasterVersion,
1:         startServer(slaveJvmVersion, derbySlaveVersion,
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c5935ad
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Verify that correct response to replication "commands":
1:      * startSlave, startMaster, stopSlave, stopMaster and failOver,
1:      * are given when the replicating database is in the following states:
1:      * Failover has been performed and 
1:      * - slave db has not been shut down,
1:      * - slave db has been shut down,
1:      * - slave server has been stopped,
1:      * - master db has been shut down,
1:      * - master server has been stopped.
1:      * @throws java.lang.Exception
1:      */
/////////////////////////////////////////////////////////////////////////
1:                 _startSlave(slaveServerHost,slaveServerPort,
0:                 _stopSlave(slaveServerHost,slaveServerPort,
1:                 _failOver(slaveServerHost,slaveServerPort,
1:                 _startMaster(masterServerHost,masterServerPort,
1:                 _failOver(masterServerHost,masterServerPort,
1:                 _executeQuery(mConn, "select count(*) from SYS.SYSTABLES"), 
1:                 _executeQuery(mConn, "select count(*) from SYS.SYSTABLES"), 
1:                 _executeQuery(sConn, "select count(*) from SYS.SYSTABLES"), 
/////////////////////////////////////////////////////////////////////////
1:     SQLException _startSlave(String slaveServerHost, int slaveServerPort,
/////////////////////////////////////////////////////////////////////////
0:     SQLException _stopSlave(String slaveServerHost, int slaveServerPort, 
/////////////////////////////////////////////////////////////////////////
1:     SQLException _failOver(String serverHost, int serverPort, 
/////////////////////////////////////////////////////////////////////////
1:     SQLException _startMaster(String masterServerHost, int masterServerPort,
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     SQLException _executeQuery(Connection conn, String query)
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f41a8a7
/////////////////////////////////////////////////////////////////////////
1:         util.DEBUG("_testPostStoppedSlave Not yet implemented."
1:                 + " No value-adding suggestions here"
1:                 + " exept that calling startSlave should hang now.");
1:         util.DEBUG("_testPostStoppedSlaveServer Not yet implemented."
1:                 + " No value-adding suggestions here.");
/////////////////////////////////////////////////////////////////////////
1:         util.DEBUG("_testPostStoppedMaster Not yet implemented."
1:                 + "No value-adding suggestions here since the stopMaster method"
1:                 + " will not do anything when called after failover");
1:         util.DEBUG("_testPostStoppedServer Not yet implemented."
1:                 + " No value-adding suggestions here.");
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:dbe5dc3
/////////////////////////////////////////////////////////////////////////
1:                 masterDbSubPath);
1:                 slaveDbSubPath);
/////////////////////////////////////////////////////////////////////////
1:         String db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
0:         String db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
1:         String db = databasePath +FS+dbSubPath +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
1:         String db = databasePath +FS+ReplicationRun.masterDbSubPath +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
1:         String db = databasePath +FS+dbSubPath +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
0:         String db = databasePath +FS+dbSubPath +FS+ replicatedDb;
commit:40a554b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
0: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Run a replication test on localhost
1:  * by using default values for master and slave hosts,
1:  * and master and slave ports.
1:  * 
1:  */
1: 
1: public class ReplicationRun_Local_StateTest_part2 extends ReplicationRun
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Local
1:      * @param testcaseName Identifying the test.
1:      */
1:     public ReplicationRun_Local_StateTest_part2(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
0:     protected void setUp() throws Exception
1:     {
0:         super.setUp();
1:     }
1:     
0:     protected void tearDown() throws Exception
1:     {
0:         super.tearDown();
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Local_StateTest_part2 Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Local_StateTest_part2.class );
1:         
1:         return SecurityManagerSetup.noSecurityManager(suite);
1:     }
1:         
1:     public void testReplication_Local_StateTest_part2()
1:     throws Exception
1:     {
1:         cleanAllTestHosts();
1:         
1:         initEnvironment();
1:         
1:         initMaster(masterServerHost,
1:                 replicatedDb);
1:         
0:         masterServer = startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost,
1:                 ALL_INTERFACES,
1:                 masterServerPort,
0:                 masterDatabasePath +FS+ masterDbSubPath);
1:         
0:         slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
1:                 slaveServerHost,
1:                 ALL_INTERFACES,
1:                 slaveServerPort,
0:                 slaveDatabasePath +FS+ slaveDbSubPath);
1:         
1:         startServerMonitor(slaveServerHost);
1:         
1:         bootMasterDatabase(jvmVersion,
1:                 masterDatabasePath +FS+ masterDbSubPath,
1:                 replicatedDb,
1:                 masterServerHost,
1:                 masterServerPort,
1:                 null // bootLoad, // The "test" to start when booting db.
1:                 );
1:         
1:         initSlave(slaveServerHost,
1:                 jvmVersion,
1:                 replicatedDb);
1:         
1:         startSlave(jvmVersion, replicatedDb,
1:                 slaveServerHost,
1:                 slaveServerPort,
1:                 slaveServerHost,
1:                 slaveReplPort,
1:                 testClientHost);
1:         
1:         startMaster(jvmVersion, replicatedDb,
1:                 masterServerHost,
1:                 masterServerPort,
1:                 masterServerHost,
1:                 slaveServerPort,
1:                 slaveServerHost,
1:                 slaveReplPort);
1:         
1:         
1:         // Run a "load" on the master to make sure there
1:         // has been replication to slave.
1:         replicationTest = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun";
1:         util.DEBUG("replicationTest: " + replicationTest);
1:         replicationVerify = "org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify";
1:         util.DEBUG("replicationVerify: " + replicationVerify);
1:         
1:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
1:                 jvmVersion,
1:                 testClientHost,
1:                 masterServerHost, masterServerPort,
1:                 replicatedDb);
1:         
1:         // Check that this is gone after failover!
1:         Connection mConn = getConnection(masterServerHost, masterServerPort, 
1:                     masterDatabasePath, masterDbSubPath, replicatedDb);
1:         
1:         failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost,  // Where the master db is run.
1:                 masterServerPort,
1:                 testClientHost);
1:         
1:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         verifySlave();
1:         
1:         // We should verify the master as well, at least to see that we still can connect.
1:         verifyMaster();
1:         
1:         _testPreStoppedSlave(mConn);
1:         
1:         shutdownDb(jvmVersion,
1:             slaveServerHost, slaveServerPort,
1:             slaveDatabasePath+FS+slaveDbSubPath, replicatedDb,
1:             testClientHost);
1:         
1:         _testPostStoppedSlave();
1:         // _testPreStoppedSlaveServer();
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 slaveServerHost, slaveServerPort);
1:         
1:         _testPostStoppedSlaveServer();
1:         // _testPreStoppedMaster();
1:         
1:         // NOTE:
1:         // If stopMaster is "connect 'jdbc:...:dbname;shutdown=true';", 
1:         // this method call will fail because failover has already shutdown 
1:         // the master database
1:         
1:         shutdownDb(jvmVersion,
1:             masterServerHost, masterServerPort,
1:             masterDatabasePath+FS+masterDbSubPath, replicatedDb,
1:             testClientHost);
1:         
1:         _testPostStoppedMaster();
1:         // _testPreStoppedMasterServer();
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 masterServerHost, masterServerPort);
1:         
1:         _testPostStoppedServer();
1:         
1:     }
1: 
1:     private void _testPreStoppedSlave(Connection mConn)
0:         throws SQLException
1:     {
1:         util.DEBUG("_testPreStoppedSlave");
1:         /*  
1:          * Future test case; should probably be done in a separate test 
1:          * - let Derby instances change roles:
1:          *   - (M) copy db from slave location to master location
1:          *   - (M) start old master in slave mode
1:          *   - (S) start old slave in master mode
1:          *
1:          */
1:         
1:         // Tests against slave:
1:         assertException(
0:                 startSlave(slaveServerHost,slaveServerPort,
1:                     slaveDatabasePath, replicatedDb,
1:                     slaveReplPort),
1:                 "XRE09");
1: 
1:         assertException(
0:                 stopSlave(slaveServerHost,slaveServerPort,
1:                     slaveDatabasePath, replicatedDb,
1:                     slaveReplPort),
1:                 "XRE40");
1:         
1:         assertException(
0:                 failOver(slaveServerHost,slaveServerPort,
1:                     slaveDatabasePath, slaveDbSubPath, replicatedDb),
1:                 "XRE07");
1:         
1:         // Tests against master:
1:         assertException(
0:                 startMaster(masterServerHost,masterServerPort,
1:                     masterDatabasePath, replicatedDb,
1:                     slaveServerHost,slaveReplPort),
1:                 "XRE04");
1:         
1:         assertException(
0:                 failOver(masterServerHost,masterServerPort,
1:                     masterDatabasePath, masterDbSubPath, replicatedDb),
1:                 "XRE07");
1:         
1:         // connect / show tables
1:         assertException(
0:                 executeQuery(mConn, "select count(*) from SYS.SYSTABLES"), 
1:                 "08006"); // Thats's just how it is...
1:          assertException(
0:                 executeQuery(mConn, "select count(*) from SYS.SYSTABLES"), 
1:                 "08003"); // Thats's just how it is...
1:         
1:         // Tests against slave:
1:         Connection sConn = getConnection(slaveServerHost, slaveServerPort, 
1:                     slaveDatabasePath, slaveDbSubPath, replicatedDb); // OK
1:          assertException(
0:                 executeQuery(sConn, "select count(*) from SYS.SYSTABLES"), 
1:                 null); // null: Should be OK
1:          sConn.close();
1:     }
1: 
1:     private void _testPostStoppedSlave()
1:     {
1:         util.DEBUG("_testPostStoppedSlave");
1:         /* No value-adding suggestions here exept that calling startSlave 
1:          * should hang now. 
1:          */
0:         util.DEBUG("_testPostStoppedSlaveServer Not yet implemented");
1:     }
1: 
1:     private void _testPostStoppedSlaveServer()
1:     {
1:         /* No value-adding suggestions here */
0:         util.DEBUG("_testPostStoppedSlave Not yet implemented");
1:     }
1: 
1:     private void _testPostStoppedMaster()
1:     {
1:         /* No value-adding suggestions here since the stopMaster method will 
1:          * not do anything when called after failover
1:          */
0:         util.DEBUG("_testPostStoppedMaster Not yet implemented");
1:     }
1: 
1:     private void _testPostStoppedServer()
1:     {
1:         /* No value-adding suggestions here */
0:         util.DEBUG("_testPostStoppedServer Not yet implemented");
1:     }
1:     
0:     //////////////////////////////////////////////////////////////////
0:     // FIXME! The following should be moved to ReplicationRun!
0:     //        Use the pattern 'assertException(replCmd()),expectedException);'
0:     //        also in the other replication tests!
0:     void assertException(SQLException se, String expectedSqlState)
1:     {
0:         if (se == null ) // Did not get an exception
1:         {
0:             util.DEBUG("Got 'null' exception, expected '" + expectedSqlState + "'");
0:             assertTrue("Expected exception " + expectedSqlState, 
0:                     expectedSqlState == null);
0:             return;
1:         }
0:         int ec = se.getErrorCode();
0:         String ss = se.getSQLState();
0:         String msg = "Got " + ec + " " + ss + " " + se.getMessage()
0:         + ". Expected " + expectedSqlState;
0:         util.DEBUG(msg);
1:         
0:         if ( expectedSqlState != null ) // We expect an exception
1:         {
0:             assertTrue(msg, ss.equals(expectedSqlState));
1:         }
0:         else // We do not expect an exception, but got one.
1:         {
0:             assertTrue(msg, false);
1:         }
1:     }
1:     
0:     SQLException startSlave(String slaveServerHost, int slaveServerPort,
1:             String slaveDatabasePath, String replicatedDb,
1:             int slaveReplPort)
1:     {
0:         String db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
1:         String connectionURL = "jdbc:derby:"  
1:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:                 + db
1:                 + ";startSlave=true"
1:                 + ";slaveHost=" + slaveServerHost 
1:                 + ";slavePort=" + slaveReplPort;
1:         util.DEBUG(connectionURL);
1:         try
1:         {
1:             Connection conn = DriverManager.getConnection(connectionURL);
1:             util.DEBUG("startSlave Unexpectedly connected as: " + connectionURL);
1:             return new SQLException("startSlave Unexpectedly connected");
1:         }
1:         catch (SQLException se)
1:         {
1:             return se;
1:         }
1:     }
1: 
0:     SQLException stopSlave(String slaveServerHost, int slaveServerPort, 
1:             String slaveDatabasePath, String replicatedDb, 
1:             int slaveReplPort)
1:     {
0:         String db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
1:         String connectionURL = "jdbc:derby:"  
1:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:                 + db
0:                 + ";stopSlave=true"
1:                 + ";slaveHost=" + slaveServerHost 
1:                 + ";slavePort=" + slaveReplPort;
1:         util.DEBUG(connectionURL);
1:         try
1:         {
1:             Connection conn = DriverManager.getConnection(connectionURL);
0:             util.DEBUG("stopSlave Unexpectedly connected as: " + connectionURL);
0:             return new SQLException("stopSlave Unexpectedly connected");
1:         }
1:         catch (SQLException se)
1:         {
1:             return se;
1:         }
1:     }
1: 
0:     SQLException failOver(String serverHost, int serverPort, 
1:             String databasePath, String dbSubPath, String replicatedDb)
1:     {
0:         String db = databasePath +"/"+dbSubPath +"/"+ replicatedDb;
1:         String connectionURL = "jdbc:derby:"  
1:                 + "//" + serverHost + ":" + serverPort + "/"
1:                 + db
1:                 + ";failover=true";
1:         util.DEBUG(connectionURL);
1:         try
1:         {
1:             Connection conn = DriverManager.getConnection(connectionURL);
1:             util.DEBUG("failOver Unexpectedly connected as: " + connectionURL);
1:             return new SQLException("failOver Unexpectedly connected");
1:         }
1:         catch (SQLException se)
1:         {
1:             return se;
1:         }
1:     }
1:     
0:     SQLException startMaster(String masterServerHost, int masterServerPort,
1:             String databasePath, String replicatedDb,
1:             String slaveServerHost,
1:             int slaveReplPort)
1:     {
0:         String db = databasePath +"/"+ReplicationRun.masterDbSubPath +"/"+ replicatedDb;
1:         String connectionURL = "jdbc:derby:"  
1:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:                 + db
1:                 + ";startMaster=true"
1:                 + ";slaveHost=" + slaveServerHost 
1:                 + ";slavePort=" + slaveReplPort;
1:         util.DEBUG(connectionURL);
1:         try
1:         {
1:             Connection conn = DriverManager.getConnection(connectionURL);
1:             util.DEBUG("startMaster Unexpectedly connected as: " + connectionURL);
1:             return new SQLException("startMaster Unexpectedly connected");
1:         }
1:         catch (SQLException se)
1:         {
1:             return se;
1:         }
1:     }
1: 
0:     Connection getConnection(String serverHost, int serverPort,
1:             String databasePath, String dbSubPath, String replicatedDb)
0:         throws SQLException
1:     {
0:         String db = databasePath +"/"+dbSubPath +"/"+ replicatedDb;
1:         String connectionURL = "jdbc:derby:"  
1:                 + "//" + serverHost + ":" + serverPort + "/"
1:                 + db;
1:         util.DEBUG(connectionURL);
0:         return DriverManager.getConnection(connectionURL);
1:     }
1:     
1:     SQLException connectTo(String serverHost, int serverPort,
1:             String databasePath, String dbSubPath, String replicatedDb)
1:     {
0:         String db = databasePath +"/"+dbSubPath +"/"+ replicatedDb;
1:         String connectionURL = "jdbc:derby:"  
1:                 + "//" + serverHost + ":" + serverPort + "/"
1:                 + db;
1:         util.DEBUG(connectionURL);
1:         try
1:         {
1:             Connection conn = DriverManager.getConnection(connectionURL);
1:             util.DEBUG("connectTo Unexpectedly connected as: " + connectionURL);
1:             return new SQLException("connectTo Unexpectedly connected");
1:         }
1:         catch (SQLException se)
1:         {
1:             return se;
1:         }
1:     }
1: 
0:     SQLException executeQuery(Connection conn, String query)
1:     {
1:         util.DEBUG("executeQuery: " + query);
1:         try
1:         {
1:             Statement s = conn.createStatement();
1:             ResultSet rs = s.executeQuery(query);
1:             return null;        
1:         }
1:         catch (SQLException se)
1:         {
1:             return se;
1:         }
1:     }
1: }
============================================================================