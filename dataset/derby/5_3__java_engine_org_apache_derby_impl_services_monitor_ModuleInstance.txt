1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.monitor.ModuleInstance
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.monitor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.PersistentService;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A description of an instance of a module.
1:eac0369: */
1:eac0369: 
1:eac0369: 
1:eac0369: class ModuleInstance {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Fields.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The module instance
1:eac0369: 	*/
1:eac0369: 	protected Object instance;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		name of module, can be null
1:eac0369: 	*/
1:eac0369: 	protected String		identifier;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		the top-level service this module lives in, can be null or the service itself
1:eac0369: 	*/
1:eac0369: 	protected Object	topLevelService;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		the actual service to which I belong, could be null.
1:eac0369: 	*/
1:eac0369: 	protected Object	service;
1:eac0369: 
1:877a43d:     /** Flag that tells whether booting of the module has completed. */
1:877a43d:     private boolean booted;
1:877a43d: 
1:eac0369: 	/*
1:eac0369: 	** Constructor
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	protected ModuleInstance(Object instance, String identifier,
1:eac0369: 			Object service, Object topLevelService)
1:eac0369: 	{
1:eac0369: 		super();
1:eac0369: 		this.instance = instance;
1:eac0369: 		this.identifier = identifier;
1:eac0369: 		this.topLevelService = topLevelService;
1:eac0369: 		this.service = service;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected ModuleInstance(Object instance) {
1:eac0369: 
1:eac0369: 		this(instance, null, null, null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected boolean isTypeAndName(PersistentService serviceType, 
1:eac0369: 		Class factoryInterface, String otherCanonicalName)
1:eac0369: 	{
1:eac0369: 		// see if the correct interface is implemented
1:eac0369: 		if (!factoryInterface.isInstance(instance))
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		if ((serviceType != null) && (otherCanonicalName != null))
1:eac0369: 			return serviceType.isSameService(identifier, otherCanonicalName);
1:eac0369: 
1:eac0369: 
1:eac0369: 		// see if the identifiers match
1:eac0369: 		if (otherCanonicalName != null) {
1:eac0369: 			if (identifier == null)
1:eac0369: 				return false;
1:eac0369: 			if (!otherCanonicalName.equals(identifier))
1:eac0369: 				return false;
1:eac0369: 		} else if (identifier != null) {
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected String getIdentifier() {
1:eac0369: 		return identifier;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected Object getTopLevelService() {
1:eac0369: 		return topLevelService;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected Object getInstance() {
1:eac0369: 		return instance;
1:eac0369: 	}
1:877a43d: 
1:877a43d:     /**
1:877a43d:      * Set a flag that indicates that booting of the module has completed.
1:877a43d:      */
1:877a43d:     synchronized void setBooted() {
1:877a43d:         booted = true;
1:877a43d:     }
1:877a43d: 
1:877a43d:     /**
1:877a43d:      * Check whether booting of the module has completed.
1:877a43d:      * @return {@code true} if the module has been booted, or {@code false}
1:877a43d:      * otherwise
1:877a43d:      */
1:877a43d:     synchronized boolean isBooted() {
1:877a43d:         return booted;
1:877a43d:     }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:877a43d
/////////////////////////////////////////////////////////////////////////
1:     /** Flag that tells whether booting of the module has completed. */
1:     private boolean booted;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Set a flag that indicates that booting of the module has completed.
1:      */
1:     synchronized void setBooted() {
1:         booted = true;
1:     }
1: 
1:     /**
1:      * Check whether booting of the module has completed.
1:      * @return {@code true} if the module has been booted, or {@code false}
1:      * otherwise
1:      */
1:     synchronized boolean isBooted() {
1:         return booted;
1:     }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.monitor.ModuleInstance
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.monitor
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.monitor;
1: 
1: import org.apache.derby.iapi.services.monitor.PersistentService;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 	A description of an instance of a module.
1: */
1: 
1: 
1: class ModuleInstance {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/*
1: 	** Fields.
1: 	*/
1: 
1: 	/**
1: 		The module instance
1: 	*/
1: 	protected Object instance;
1: 
1: 	/**
1: 		name of module, can be null
1: 	*/
1: 	protected String		identifier;
1: 
1: 	/**
1: 		the top-level service this module lives in, can be null or the service itself
1: 	*/
1: 	protected Object	topLevelService;
1: 
1: 	/**
1: 		the actual service to which I belong, could be null.
1: 	*/
1: 	protected Object	service;
1: 
1: 	/*
1: 	** Constructor
1: 	*/
1: 
1: 	protected ModuleInstance(Object instance, String identifier,
1: 			Object service, Object topLevelService)
1: 	{
1: 		super();
1: 		this.instance = instance;
1: 		this.identifier = identifier;
1: 		this.topLevelService = topLevelService;
1: 		this.service = service;
1: 
1: 	}
1: 
1: 	protected ModuleInstance(Object instance) {
1: 
1: 		this(instance, null, null, null);
1: 	}
1: 
1: 	protected boolean isTypeAndName(PersistentService serviceType, 
1: 		Class factoryInterface, String otherCanonicalName)
1: 	{
1: 		// see if the correct interface is implemented
1: 		if (!factoryInterface.isInstance(instance))
1: 			return false;
1: 
1: 		if ((serviceType != null) && (otherCanonicalName != null))
1: 			return serviceType.isSameService(identifier, otherCanonicalName);
1: 
1: 
1: 		// see if the identifiers match
1: 		if (otherCanonicalName != null) {
1: 			if (identifier == null)
1: 				return false;
1: 			if (!otherCanonicalName.equals(identifier))
1: 				return false;
1: 		} else if (identifier != null) {
1: 			return false;
1: 		}
1: 
1: 		return true;
1: 	}
1: 
1: 	protected String getIdentifier() {
1: 		return identifier;
1: 	}
1: 
1: 	protected Object getTopLevelService() {
1: 		return topLevelService;
1: 	}
1: 
1: 	protected Object getInstance() {
1: 		return instance;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.monitor
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.monitor;
0: 
0: import org.apache.derby.iapi.services.monitor.PersistentService;
0: 
0: import java.util.Properties;
0: 
0: /**
0: 	A description of an instance of a module.
0: */
0: 
0: 
0: class ModuleInstance {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/*
0: 	** Fields.
0: 	*/
0: 
0: 	/**
0: 		The module instance
0: 	*/
0: 	protected Object instance;
0: 
0: 	/**
0: 		name of module, can be null
0: 	*/
0: 	protected String		identifier;
0: 
0: 	/**
0: 		the top-level service this module lives in, can be null or the service itself
0: 	*/
0: 	protected Object	topLevelService;
0: 
0: 	/**
0: 		the actual service to which I belong, could be null.
0: 	*/
0: 	protected Object	service;
0: 
0: 	/*
0: 	** Constructor
0: 	*/
0: 
0: 	protected ModuleInstance(Object instance, String identifier,
0: 			Object service, Object topLevelService)
0: 	{
0: 		super();
0: 		this.instance = instance;
0: 		this.identifier = identifier;
0: 		this.topLevelService = topLevelService;
0: 		this.service = service;
0: 
0: 	}
0: 
0: 	protected ModuleInstance(Object instance) {
0: 
0: 		this(instance, null, null, null);
0: 	}
0: 
0: 	protected boolean isTypeAndName(PersistentService serviceType, 
0: 		Class factoryInterface, String otherCanonicalName)
0: 	{
0: 		// see if the correct interface is implemented
0: 		if (!factoryInterface.isInstance(instance))
0: 			return false;
0: 
0: 		if ((serviceType != null) && (otherCanonicalName != null))
0: 			return serviceType.isSameService(identifier, otherCanonicalName);
0: 
0: 
0: 		// see if the identifiers match
0: 		if (otherCanonicalName != null) {
0: 			if (identifier == null)
0: 				return false;
0: 			if (!otherCanonicalName.equals(identifier))
0: 				return false;
0: 		} else if (identifier != null) {
0: 			return false;
0: 		}
0: 
0: 		return true;
0: 	}
0: 
0: 	protected String getIdentifier() {
0: 		return identifier;
0: 	}
0: 
0: 	protected Object getTopLevelService() {
0: 		return topLevelService;
0: 	}
0: 
0: 	protected Object getInstance() {
0: 		return instance;
0: 	}
0: }
============================================================================