1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.log.FlushedScanHandle
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.log;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.raw.log.LogCounter;
1:eac0369: import org.apache.derby.impl.store.raw.log.LogRecord;
1:eac0369: import org.apache.derby.impl.store.raw.log.StreamLogScan;
1:eac0369: import org.apache.derby.iapi.services.io.ArrayInputStream;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.ScanHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ScannedTransactionHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1:eac0369: import org.apache.derby.iapi.store.access.DatabaseInstant;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.util.Enumeration;
1:eac0369: 
1:eac0369: public class FlushedScanHandle implements ScanHandle
1:eac0369: {
1:eac0369: 	LogFactory lf;
1:eac0369: 	StreamLogScan fs;
1:eac0369: 	
1:eac0369: 	LogRecord lr = null;
1:eac0369: 	boolean readOptionalData = false;
1:eac0369: 	int groupsIWant;
1:eac0369: 	
1:eac0369: 	ArrayInputStream rawInput = new ArrayInputStream(new byte[4096]);
1:eac0369: 	
1:eac0369: 	FlushedScanHandle(LogToFile lf, DatabaseInstant start, int groupsIWant)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		this.lf = lf;
1:eac0369: 		fs = new FlushedScan(lf,((LogCounter)start).getValueAsLong());
1:eac0369: 		this.groupsIWant = groupsIWant;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	public boolean next() throws StandardException
1:eac0369: 	{
1:eac0369: 		readOptionalData = false;
1:eac0369: 		lr = null; 
1:eac0369: 
1:eac0369: 		// filter the log stream so that only log records that belong to these
1:eac0369: 		// interesting groups will be returned
1:eac0369: 
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			lr = fs.getNextRecord(rawInput,null, groupsIWant);
1:eac0369: 			if (lr==null) return false; //End of flushed log
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369:             {
1:eac0369:                 if ((groupsIWant & lr.group()) == 0)
1:eac0369:                     SanityManager.THROWASSERT(groupsIWant + "/" + lr.group());
1:eac0369:             }
1:eac0369: 
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 		catch (IOException ioe)
1:eac0369: 		{
1:eac0369: 			ioe.printStackTrace();
1:eac0369: 			fs.close();
1:eac0369: 			fs = null;
1:eac0369: 			throw lf.markCorrupt(
1:eac0369:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 	  Get the group for the current log record.
1:eac0369: 	  @exception StandardException Oops
1:eac0369: 	  */
1:eac0369: 	public int getGroup() throws StandardException
1:eac0369: 	{
1:eac0369: 		return lr.group();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Get the Loggable associated with the currentLogRecord
1:eac0369: 	  @exception StandardException Oops
1:eac0369: 	  */
1:eac0369: 	public Loggable getLoggable() throws StandardException
1:eac0369: 	{
1:eac0369: 		try {
1:eac0369: 			return lr.getLoggable();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		catch (IOException ioe)
1:eac0369: 		{
1:eac0369: 			ioe.printStackTrace();
1:eac0369: 			fs.close();
1:eac0369: 			fs = null;
1:eac0369: 			throw lf.markCorrupt(
1:eac0369:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		catch (ClassNotFoundException cnfe)
1:eac0369: 		{
1:eac0369: 			fs.close();
1:eac0369: 			fs = null;
1:eac0369: 			throw lf.markCorrupt(
1:eac0369:                 StandardException.newException(SQLState.LOG_CORRUPTED, cnfe));
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//This may be called only once per log record.
1:eac0369:     public InputStream getOptionalData()
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG) SanityManager.ASSERT(!readOptionalData);
1:eac0369: 		if (lr == null) return null;
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			int dataLength = rawInput.readInt();
1:eac0369: 			readOptionalData = true;
1:8360656: 			rawInput.setLimit(dataLength);
1:eac0369: 			return rawInput;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		catch (IOException ioe)
1:eac0369: 		{
1:eac0369: 			fs.close();
1:eac0369: 			fs = null;
1:eac0369: 			throw lf.markCorrupt(
1:eac0369:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public DatabaseInstant getInstant()
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		return fs.getLogInstant();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Object getTransactionId()
1:eac0369: 		 throws StandardException
1:eac0369: 	{  
1:eac0369: 		try
1:eac0369:         {
1:eac0369: 			return lr.getTransactionId();
1:eac0369: 		}
1:eac0369: 		catch (IOException ioe)
1:eac0369: 		{
1:eac0369: 			ioe.printStackTrace();
1:eac0369: 			fs.close();
1:eac0369: 			fs = null;
1:eac0369: 			throw lf.markCorrupt(
1:eac0369:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
1:eac0369: 		}
1:eac0369: 		catch (ClassNotFoundException cnfe)
1:eac0369: 		{
1:eac0369: 			fs.close();
1:eac0369: 			fs = null;
1:eac0369: 			throw lf.markCorrupt(
1:eac0369:                 StandardException.newException(SQLState.LOG_CORRUPTED, cnfe));
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public void close()
1:eac0369: 	{
1:eac0369: 		if (fs != null) fs.close();
1:eac0369: 		fs = null;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8360656
/////////////////////////////////////////////////////////////////////////
1: 			rawInput.setLimit(dataLength);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.log.FlushedScanHandle
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.log;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.impl.store.raw.log.LogCounter;
1: import org.apache.derby.impl.store.raw.log.LogRecord;
1: import org.apache.derby.impl.store.raw.log.StreamLogScan;
1: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.ScanHandle;
1: import org.apache.derby.iapi.store.raw.ScannedTransactionHandle;
1: import org.apache.derby.iapi.store.raw.log.LogFactory;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.xact.TransactionId;
1: import org.apache.derby.iapi.store.access.DatabaseInstant;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Enumeration;
1: 
1: public class FlushedScanHandle implements ScanHandle
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	LogFactory lf;
1: 	StreamLogScan fs;
1: 	
1: 	LogRecord lr = null;
1: 	boolean readOptionalData = false;
1: 	int groupsIWant;
1: 	
1: 	ArrayInputStream rawInput = new ArrayInputStream(new byte[4096]);
1: 	
1: 	FlushedScanHandle(LogToFile lf, DatabaseInstant start, int groupsIWant)
1: 		 throws StandardException
1: 	{
1: 		this.lf = lf;
1: 		fs = new FlushedScan(lf,((LogCounter)start).getValueAsLong());
1: 		this.groupsIWant = groupsIWant;
1: 	}
1: 	
1: 	public boolean next() throws StandardException
1: 	{
1: 		readOptionalData = false;
1: 		lr = null; 
1: 
1: 		// filter the log stream so that only log records that belong to these
1: 		// interesting groups will be returned
1: 
1: 		try
1: 		{
1: 			lr = fs.getNextRecord(rawInput,null, groupsIWant);
1: 			if (lr==null) return false; //End of flushed log
1: 			if (SanityManager.DEBUG)
1:             {
1:                 if ((groupsIWant & lr.group()) == 0)
1:                     SanityManager.THROWASSERT(groupsIWant + "/" + lr.group());
1:             }
1: 
1: 			return true;
1: 		}
1: 		catch (IOException ioe)
1: 		{
1: 			ioe.printStackTrace();
1: 			fs.close();
1: 			fs = null;
1: 			throw lf.markCorrupt(
1:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
1: 		}
1: 	}
1: 
1: 	/**
1: 	  Get the group for the current log record.
1: 	  @exception StandardException Oops
1: 	  */
1: 	public int getGroup() throws StandardException
1: 	{
1: 		return lr.group();
1: 	}
1: 
1: 	/**
1: 	  Get the Loggable associated with the currentLogRecord
1: 	  @exception StandardException Oops
1: 	  */
1: 	public Loggable getLoggable() throws StandardException
1: 	{
1: 		try {
1: 			return lr.getLoggable();
1: 		}
1: 
1: 		catch (IOException ioe)
1: 		{
1: 			ioe.printStackTrace();
1: 			fs.close();
1: 			fs = null;
1: 			throw lf.markCorrupt(
1:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
1: 		}
1: 
1: 		catch (ClassNotFoundException cnfe)
1: 		{
1: 			fs.close();
1: 			fs = null;
1: 			throw lf.markCorrupt(
1:                 StandardException.newException(SQLState.LOG_CORRUPTED, cnfe));
1: 		}
1: 	}
1: 
1: 	//This may be called only once per log record.
1:     public InputStream getOptionalData()
1: 		 throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG) SanityManager.ASSERT(!readOptionalData);
1: 		if (lr == null) return null;
1: 		try
1: 		{
1: 			int dataLength = rawInput.readInt();
1: 			readOptionalData = true;
0: 			rawInput.setLimit(rawInput.getPosition(), dataLength);
1: 			return rawInput;
1: 		}
1: 
1: 		catch (IOException ioe)
1: 		{
1: 			fs.close();
1: 			fs = null;
1: 			throw lf.markCorrupt(
1:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
1: 		}
1: 	}
1: 
1:     public DatabaseInstant getInstant()
1: 		 throws StandardException
1: 	{
1: 		return fs.getLogInstant();
1: 	}
1: 
1: 	public Object getTransactionId()
1: 		 throws StandardException
1: 	{  
1: 		try
1:         {
1: 			return lr.getTransactionId();
1: 		}
1: 		catch (IOException ioe)
1: 		{
1: 			ioe.printStackTrace();
1: 			fs.close();
1: 			fs = null;
1: 			throw lf.markCorrupt(
1:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
1: 		}
1: 		catch (ClassNotFoundException cnfe)
1: 		{
1: 			fs.close();
1: 			fs = null;
1: 			throw lf.markCorrupt(
1:                 StandardException.newException(SQLState.LOG_CORRUPTED, cnfe));
1: 		}
1: 	}
1: 
1:     public void close()
1: 	{
1: 		if (fs != null) fs.close();
1: 		fs = null;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.log;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.impl.store.raw.log.LogCounter;
0: import org.apache.derby.impl.store.raw.log.LogRecord;
0: import org.apache.derby.impl.store.raw.log.StreamLogScan;
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.ScanHandle;
0: import org.apache.derby.iapi.store.raw.ScannedTransactionHandle;
0: import org.apache.derby.iapi.store.raw.log.LogFactory;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.xact.TransactionId;
0: import org.apache.derby.iapi.store.access.DatabaseInstant;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.util.Enumeration;
0: 
0: public class FlushedScanHandle implements ScanHandle
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	LogFactory lf;
0: 	StreamLogScan fs;
0: 	
0: 	LogRecord lr = null;
0: 	boolean readOptionalData = false;
0: 	int groupsIWant;
0: 	
0: 	ArrayInputStream rawInput = new ArrayInputStream(new byte[4096]);
0: 	
0: 	FlushedScanHandle(LogToFile lf, DatabaseInstant start, int groupsIWant)
0: 		 throws StandardException
0: 	{
0: 		this.lf = lf;
0: 		fs = new FlushedScan(lf,((LogCounter)start).getValueAsLong());
0: 		this.groupsIWant = groupsIWant;
0: 	}
0: 	
0: 	public boolean next() throws StandardException
0: 	{
0: 		readOptionalData = false;
0: 		lr = null; 
0: 
0: 		// filter the log stream so that only log records that belong to these
0: 		// interesting groups will be returned
0: 
0: 		try
0: 		{
0: 			lr = fs.getNextRecord(rawInput,null, groupsIWant);
0: 			if (lr==null) return false; //End of flushed log
0: 			if (SanityManager.DEBUG)
0:             {
0:                 if ((groupsIWant & lr.group()) == 0)
0:                     SanityManager.THROWASSERT(groupsIWant + "/" + lr.group());
0:             }
0: 
0: 			return true;
0: 		}
0: 		catch (IOException ioe)
0: 		{
0: 			ioe.printStackTrace();
0: 			fs.close();
0: 			fs = null;
0: 			throw lf.markCorrupt(
0:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
0: 		}
0: 	}
0: 
0: 	/**
0: 	  Get the group for the current log record.
0: 	  @exception StandardException Oops
0: 	  */
0: 	public int getGroup() throws StandardException
0: 	{
0: 		return lr.group();
0: 	}
0: 
0: 	/**
0: 	  Get the Loggable associated with the currentLogRecord
0: 	  @exception StandardException Oops
0: 	  */
0: 	public Loggable getLoggable() throws StandardException
0: 	{
0: 		try {
0: 			return lr.getLoggable();
0: 		}
0: 
0: 		catch (IOException ioe)
0: 		{
0: 			ioe.printStackTrace();
0: 			fs.close();
0: 			fs = null;
0: 			throw lf.markCorrupt(
0:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
0: 		}
0: 
0: 		catch (ClassNotFoundException cnfe)
0: 		{
0: 			fs.close();
0: 			fs = null;
0: 			throw lf.markCorrupt(
0:                 StandardException.newException(SQLState.LOG_CORRUPTED, cnfe));
0: 		}
0: 	}
0: 
0: 	//This may be called only once per log record.
0:     public InputStream getOptionalData()
0: 		 throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG) SanityManager.ASSERT(!readOptionalData);
0: 		if (lr == null) return null;
0: 		try
0: 		{
0: 			int dataLength = rawInput.readInt();
0: 			readOptionalData = true;
0: 			rawInput.setLimit(rawInput.getPosition(), dataLength);
0: 			return rawInput;
0: 		}
0: 
0: 		catch (IOException ioe)
0: 		{
0: 			fs.close();
0: 			fs = null;
0: 			throw lf.markCorrupt(
0:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
0: 		}
0: 	}
0: 
0:     public DatabaseInstant getInstant()
0: 		 throws StandardException
0: 	{
0: 		return fs.getLogInstant();
0: 	}
0: 
0: 	public Object getTransactionId()
0: 		 throws StandardException
0: 	{  
0: 		try
0:         {
0: 			return lr.getTransactionId();
0: 		}
0: 		catch (IOException ioe)
0: 		{
0: 			ioe.printStackTrace();
0: 			fs.close();
0: 			fs = null;
0: 			throw lf.markCorrupt(
0:                     StandardException.newException(SQLState.LOG_IO_ERROR, ioe));
0: 		}
0: 		catch (ClassNotFoundException cnfe)
0: 		{
0: 			fs.close();
0: 			fs = null;
0: 			throw lf.markCorrupt(
0:                 StandardException.newException(SQLState.LOG_CORRUPTED, cnfe));
0: 		}
0: 	}
0: 
0:     public void close()
0: 	{
0: 		if (fs != null) fs.close();
0: 		fs = null;
0: 	}
0: }
============================================================================