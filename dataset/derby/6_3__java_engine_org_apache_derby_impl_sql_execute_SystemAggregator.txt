1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.SystemAggregator
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Abstract aggregator that is extended by all internal
1:eac0369:  * (system) aggregators.
1:eac0369:  *
1:eac0369:  */
1:eac0369: abstract class SystemAggregator implements ExecAggregator
1:eac0369: {
1:eac0369: 
1:eac0369:     private boolean eliminatedNulls;
1:eac0369: 
1:eac0369: 
1:eac0369: 	public boolean didEliminateNulls() {
1:eac0369: 		return eliminatedNulls;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void accumulate(DataValueDescriptor addend, Object ga) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if ((addend == null) || addend.isNull()) {
1:eac0369: 			eliminatedNulls = true;
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		this.accumulate(addend);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected abstract void accumulate(DataValueDescriptor addend)
1:eac0369: 		throws StandardException;
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// EXTERNALIZABLE INTERFACE
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeBoolean(eliminatedNulls);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		eliminatedNulls = in.readBoolean();
1:eac0369: 	}
1:b5105f3:         public String toString()
1:b5105f3:         {
1:b5105f3:             try
1:b5105f3:             {
1:b5105f3:             return super.toString() + "[" + getResult().getString() + "]";
1:b5105f3:             }
1:b5105f3:             catch (Exception e)
1:b5105f3:             {
1:b5105f3:                 return e.getMessage();
1:b5105f3:             }
1:b5105f3:         }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:b5105f3
/////////////////////////////////////////////////////////////////////////
1:         public String toString()
1:         {
1:             try
1:             {
1:             return super.toString() + "[" + getResult().getString() + "]";
1:             }
1:             catch (Exception e)
1:             {
1:                 return e.getMessage();
1:             }
1:         }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.SystemAggregator
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1:  * Abstract aggregator that is extended by all internal
1:  * (system) aggregators.
1:  *
0:  * @author jamie
1:  */
1: abstract class SystemAggregator implements ExecAggregator
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1:     private boolean eliminatedNulls;
1: 
1: 
1: 	public boolean didEliminateNulls() {
1: 		return eliminatedNulls;
1: 	}
1: 
1: 	public void accumulate(DataValueDescriptor addend, Object ga) 
1: 		throws StandardException
1: 	{
1: 		if ((addend == null) || addend.isNull()) {
1: 			eliminatedNulls = true;
1: 			return;
1: 		}
1: 
1: 		this.accumulate(addend);
1: 	}
1: 
1: 	protected abstract void accumulate(DataValueDescriptor addend)
1: 		throws StandardException;
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// EXTERNALIZABLE INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeBoolean(eliminatedNulls);
1: 	}
1: 
1: 	public void readExternal(ObjectInput in) 
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		eliminatedNulls = in.readBoolean();
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.execute.ExecAggregator;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0:  * Abstract aggregator that is extended by all internal
0:  * (system) aggregators.
0:  *
0:  * @author jamie
0:  */
0: abstract class SystemAggregator implements ExecAggregator
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0:     private boolean eliminatedNulls;
0: 
0: 
0: 	public boolean didEliminateNulls() {
0: 		return eliminatedNulls;
0: 	}
0: 
0: 	public void accumulate(DataValueDescriptor addend, Object ga) 
0: 		throws StandardException
0: 	{
0: 		if ((addend == null) || addend.isNull()) {
0: 			eliminatedNulls = true;
0: 			return;
0: 		}
0: 
0: 		this.accumulate(addend);
0: 	}
0: 
0: 	protected abstract void accumulate(DataValueDescriptor addend)
0: 		throws StandardException;
0: 	/////////////////////////////////////////////////////////////
0: 	// 
0: 	// EXTERNALIZABLE INTERFACE
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeBoolean(eliminatedNulls);
0: 	}
0: 
0: 	public void readExternal(ObjectInput in) 
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		eliminatedNulls = in.readBoolean();
0: 	}
0: }
============================================================================