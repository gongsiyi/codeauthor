1:5314923: /*
1:5314923: Class org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test
7:5314923: 
1:5314923: Licensed to the Apache Software Foundation (ASF) under one or more
1:5314923: contributor license agreements.  See the NOTICE file distributed with
1:5314923: this work for additional information regarding copyright ownership.
1:5314923: The ASF licenses this file to you under the Apache License, Version 2.0
1:5314923: (the "License"); you may not use this file except in compliance with
1:5314923: the License.  You may obtain a copy of the License at
1:5314923: 
1:5314923:    http://www.apache.org/licenses/LICENSE-2.0
1:5314923: 
1:5314923: Unless required by applicable law or agreed to in writing, software
1:5314923: distributed under the License is distributed on an "AS IS" BASIS,
1:5314923: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5314923: See the License for the specific language governing permissions and
1:5314923: limitations under the License.
1:5314923: 
1:5314923: */
1:5314923: 
1:1ae02c9: package org.apache.derbyTesting.functionTests.tests.store;
1:1ae02c9: 
1:1ae02c9: import java.sql.PreparedStatement;
1:1ae02c9: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:1ae02c9: import junit.framework.Assert;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: 
1:1ae02c9: 
1:5314923: 
1:5314923: /**
1:5314923: 
1:5314923: Utility functions useful when testing store.
1:5314923: 
1:5314923: Maybe move this stuff to BaseJDBCTestCase if they seem useful to others.
1:5314923: 
1:5314923: **/
1:5314923: 
1:5314923: public class StoreBaseTest extends BaseJDBCTestCase 
1:5314923: {
1:5314923:     /**************************************************************************
1:5314923:      * Fields of the class
1:5314923:      **************************************************************************
1:5314923:      */
1:5314923: 
1:5314923:     /**************************************************************************
1:5314923:      * Constructors for This class:
1:5314923:      **************************************************************************
1:5314923:      */
1:5314923:     public StoreBaseTest(String name) 
1:5314923:     {
1:5314923:         super(name);
1:5314923:     }
1:5314923: 
1:5314923:     /**************************************************************************
1:5314923:      * Private/Protected methods of This class:
1:5314923:      **************************************************************************
1:5314923:      */
1:5314923: 
1:5314923:     /**************************************************************************
1:5314923:      * Public Methods of This class:
1:5314923:      **************************************************************************
1:5314923:      */
1:5314923: 
1:5314923:     /**************************************************************************
1:5314923:      * Public Methods of XXXX class:
1:5314923:      **************************************************************************
1:5314923:      */
1:5314923: 
1:5314923:     /**
1:5314923:      * call the space table vti.
1:5314923:      * <p>
1:5314923:      * Utility test function to call the space table vti to get information
1:5314923:      * about allocated and free pages.  Information is passed back in an
1:5314923:      * int array as follows:
1:5314923:      *   is_index                 = ret_info[0];
1:5314923:      *   num_alloc                = ret_info[1];
1:5314923:      *   num_free                 = ret_info[2];
1:5314923:      *   page_size                = ret_info[3];
1:5314923:      *   estimate_space_savings   = ret_info[4];
1:5314923:      * <p>
1:5314923:      *
1:5314923:      *
1:5314923:      **/
1:5314923:     protected static final int SPACE_INFO_IS_INDEX          = 0;
1:5314923:     protected static final int SPACE_INFO_NUM_ALLOC         = 1;
1:5314923:     protected static final int SPACE_INFO_NUM_FREE          = 2;
1:5314923:     protected static final int SPACE_INFO_NUM_UNFILLED      = 3;
1:5314923:     protected static final int SPACE_INFO_PAGE_SIZE         = 4;
1:5314923:     protected static final int SPACE_INFO_ESTIMSPACESAVING  = 5;
1:5314923: 
1:5314923:     protected static final int SPACE_INFO_NUMCOLS           = 6;
1:5314923: 
1:5314923:     protected int[] getSpaceInfo(
1:5314923:     String      schemaName,
1:5314923:     String      tableName,
1:5314923:     boolean     commit_xact)
1:5314923: 		throws SQLException
1:5314923:     {
1:5314923:         String stmt_str = 
1:5314923:             "select " + 
1:5314923:                 "conglomeratename, " +
1:5314923:                 "isindex, "           + 
1:5314923:                 "numallocatedpages, " + 
1:5314923:                 "numfreepages, "      + 
1:5314923:                 "numunfilledpages, "  + 
1:5314923:                 "pagesize, "          + 
1:5314923:                 "estimspacesaving "   + 
1:5314923:             "from new org.apache.derby.diag.SpaceTable('" +
1:5314923:                 tableName + "') t where isindex = 0";
1:5314923: 
1:5314923:         PreparedStatement space_stmt = prepareStatement(stmt_str);
1:5314923:         ResultSet         rs         = space_stmt.executeQuery();
1:5314923: 
1:5314923:         boolean rows_found = rs.next();
1:5314923: 
1:5314923:         Assert.assertTrue(
1:5314923:             "No rows returned from space table query on table: " +
1:5314923:             schemaName + "." + tableName, rows_found);
1:5314923: 
1:5314923:         int[] ret_info = new int[SPACE_INFO_NUMCOLS];
1:5314923:         String conglomerate_name        = rs.getString(1);
1:5314923:         for (int i = 0; i < SPACE_INFO_NUMCOLS; i++)
1:5314923:         {
1:5314923:             ret_info[i] = rs.getInt(i + 2);
1:5314923:         }
1:5314923: 
1:5314923:         rows_found = rs.next();
1:5314923: 
1:5314923:         Assert.assertFalse(
1:5314923:             "More than one row returned from space query on table: " +
1:5314923:             schemaName + "." + tableName, rows_found);
1:5314923: 
1:5314923:         // debug info
1:5314923:         println(
1:5314923:             "Space information for " + schemaName + "." + tableName + ":");
1:5314923:         println(
1:5314923:             "isindex = " + ret_info[SPACE_INFO_IS_INDEX]);
1:5314923:         println(
1:5314923:             "num_alloc = " + ret_info[SPACE_INFO_NUM_ALLOC]);
1:5314923:         println(
1:5314923:             "num_free = " + ret_info[SPACE_INFO_NUM_FREE]);
1:5314923:         println(
1:5314923:             "num_unfilled = " + ret_info[SPACE_INFO_NUM_UNFILLED]);
1:5314923:         println(
1:5314923:             "page_size = " + ret_info[SPACE_INFO_PAGE_SIZE]);
1:5314923:         println(
1:5314923:             "estimspacesaving = " + ret_info[SPACE_INFO_ESTIMSPACESAVING]);
1:5314923: 
1:5314923:         rs.close();
1:5314923: 
1:5314923:         if (commit_xact)
1:5314923:             commit();
1:5314923: 
1:5314923:         return(ret_info);
1:5314923:     }
1:5314923: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import junit.framework.Assert;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: 
1: 
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:5314923
/////////////////////////////////////////////////////////////////////////
0: package org.apache.derbyTesting.functionTests.tests.store;
1: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
0: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
0: import junit.framework.Assert;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import java.sql.CallableStatement;
0: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.Statement;
0: import java.sql.SQLException;
1: 
1: 
1: /*
1: Class org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to you under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: 
1: /**
1: 
1: Utility functions useful when testing store.
1: 
1: Maybe move this stuff to BaseJDBCTestCase if they seem useful to others.
1: 
1: **/
1: 
1: public class StoreBaseTest extends BaseJDBCTestCase 
1: {
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1:     public StoreBaseTest(String name) 
1:     {
1:         super(name);
1:     }
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of XXXX class:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * call the space table vti.
1:      * <p>
1:      * Utility test function to call the space table vti to get information
1:      * about allocated and free pages.  Information is passed back in an
1:      * int array as follows:
1:      *   is_index                 = ret_info[0];
1:      *   num_alloc                = ret_info[1];
1:      *   num_free                 = ret_info[2];
1:      *   page_size                = ret_info[3];
1:      *   estimate_space_savings   = ret_info[4];
1:      * <p>
1:      *
1:      *
1:      **/
1:     protected static final int SPACE_INFO_IS_INDEX          = 0;
1:     protected static final int SPACE_INFO_NUM_ALLOC         = 1;
1:     protected static final int SPACE_INFO_NUM_FREE          = 2;
1:     protected static final int SPACE_INFO_NUM_UNFILLED      = 3;
1:     protected static final int SPACE_INFO_PAGE_SIZE         = 4;
1:     protected static final int SPACE_INFO_ESTIMSPACESAVING  = 5;
1: 
1:     protected static final int SPACE_INFO_NUMCOLS           = 6;
1: 
1:     protected int[] getSpaceInfo(
1:     String      schemaName,
1:     String      tableName,
1:     boolean     commit_xact)
1: 		throws SQLException
1:     {
1:         String stmt_str = 
1:             "select " + 
1:                 "conglomeratename, " +
1:                 "isindex, "           + 
1:                 "numallocatedpages, " + 
1:                 "numfreepages, "      + 
1:                 "numunfilledpages, "  + 
1:                 "pagesize, "          + 
1:                 "estimspacesaving "   + 
1:             "from new org.apache.derby.diag.SpaceTable('" +
1:                 tableName + "') t where isindex = 0";
1: 
1:         PreparedStatement space_stmt = prepareStatement(stmt_str);
1:         ResultSet         rs         = space_stmt.executeQuery();
1: 
1:         boolean rows_found = rs.next();
1: 
1:         Assert.assertTrue(
1:             "No rows returned from space table query on table: " +
1:             schemaName + "." + tableName, rows_found);
1: 
1:         int[] ret_info = new int[SPACE_INFO_NUMCOLS];
1:         String conglomerate_name        = rs.getString(1);
1:         for (int i = 0; i < SPACE_INFO_NUMCOLS; i++)
1:         {
1:             ret_info[i] = rs.getInt(i + 2);
1:         }
1: 
1:         rows_found = rs.next();
1: 
1:         Assert.assertFalse(
1:             "More than one row returned from space query on table: " +
1:             schemaName + "." + tableName, rows_found);
1: 
1:         // debug info
1:         println(
1:             "Space information for " + schemaName + "." + tableName + ":");
1:         println(
1:             "isindex = " + ret_info[SPACE_INFO_IS_INDEX]);
1:         println(
1:             "num_alloc = " + ret_info[SPACE_INFO_NUM_ALLOC]);
1:         println(
1:             "num_free = " + ret_info[SPACE_INFO_NUM_FREE]);
1:         println(
1:             "num_unfilled = " + ret_info[SPACE_INFO_NUM_UNFILLED]);
1:         println(
1:             "page_size = " + ret_info[SPACE_INFO_PAGE_SIZE]);
1:         println(
1:             "estimspacesaving = " + ret_info[SPACE_INFO_ESTIMSPACESAVING]);
1: 
1:         rs.close();
1: 
1:         if (commit_xact)
1:             commit();
1: 
1:         return(ret_info);
1:     }
1: }
============================================================================