1:f06ca0f: /*
1:f06ca0f: 
1:f06ca0f:    Derby - Class org.apache.derby.iapi.transaction.TransactionControl
1:f06ca0f: 
1:f06ca0f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f06ca0f:    contributor license agreements.  See the NOTICE file distributed with
1:f06ca0f:    this work for additional information regarding copyright ownership.
1:f06ca0f:    The ASF licenses this file to You under the Apache License, Version 2.0
1:f06ca0f:    (the "License"); you may not use this file except in compliance with
1:f06ca0f:    the License.  You may obtain a copy of the License at
1:f06ca0f: 
1:f06ca0f:       http://www.apache.org/licenses/LICENSE-2.0
1:f06ca0f: 
1:f06ca0f:    Unless required by applicable law or agreed to in writing, software
1:f06ca0f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f06ca0f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f06ca0f:    See the License for the specific language governing permissions and
1:f06ca0f:    limitations under the License.
1:f06ca0f: 
1:f06ca0f:  */
1:f06ca0f: package org.apache.derby.iapi.transaction;
1:f06ca0f: 
1:f06ca0f: import java.util.ArrayList;
1:f06ca0f: import java.util.Iterator;
1:f06ca0f: 
1:f06ca0f: import org.apache.derby.iapi.error.ExceptionSeverity;
1:f06ca0f: import org.apache.derby.iapi.error.StandardException;
1:38f02ec: import org.apache.derby.iapi.services.io.ArrayUtil;
1:f06ca0f: import org.apache.derby.iapi.reference.SQLState;
1:f06ca0f: 
1:f06ca0f: /**
1:f06ca0f:  * Provide support to transactions to manage sets of
1:f06ca0f:  * actions to perform at transaction boundaries.
1:f06ca0f:  *
1:f06ca0f:  * <P> Add rollback of savepoints?
1:f06ca0f:  * TODO: A
1:f06ca0f:  */
1:f06ca0f: public final class TransactionControl {
1:f06ca0f:     
1:38f02ec: 	/* Constants for scan isolation levels. */
1:38f02ec: 	public static final int UNSPECIFIED_ISOLATION_LEVEL = 0;
1:38f02ec: 	public static final int READ_UNCOMMITTED_ISOLATION_LEVEL = 1;
1:38f02ec: 	public static final int READ_COMMITTED_ISOLATION_LEVEL = 2;
1:38f02ec: 	public static final int REPEATABLE_READ_ISOLATION_LEVEL = 3;
1:38f02ec: 	public static final int SERIALIZABLE_ISOLATION_LEVEL = 4;
1:38f02ec: 
1:38f02ec:     /**
1:38f02ec:      * Map from Derby transaction isolation constants to
1:38f02ec:      * JDBC constants.
1:38f02ec:      */
1:38f02ec: 	private static final int[] CS_TO_JDBC_ISOLATION_LEVEL_MAP = {
1:38f02ec: 		java.sql.Connection.TRANSACTION_NONE,				// UNSPECIFIED_ISOLATION_LEVEL
1:38f02ec: 		java.sql.Connection.TRANSACTION_READ_UNCOMMITTED,	// READ_UNCOMMITTED_ISOLATION_LEVEL
1:38f02ec: 		java.sql.Connection.TRANSACTION_READ_COMMITTED,		// READ_COMMITTED_ISOLATION_LEVEL
1:38f02ec: 		java.sql.Connection.TRANSACTION_REPEATABLE_READ,	// REPEATABLE_READ_ISOLATION_LEVEL		
1:38f02ec: 		java.sql.Connection.TRANSACTION_SERIALIZABLE		// SERIALIZABLE_ISOLATION_LEVEL
1:38f02ec: 	};
1:38f02ec: 
1:38f02ec:     /**
1:38f02ec:      * Map from Derby transaction isolation constants to
1:38f02ec:      * text values used in SQL. Note that the text
1:38f02ec:      * "REPEATABLE READ" or "RR" maps to SERIALIZABLE_ISOLATION_LEVEL
1:38f02ec:      * as a hang over from DB2 compatibility and now to preserve
1:38f02ec:      * backwards compatability.
1:38f02ec:      */
1:38f02ec: 	private static final String[][] CS_TO_SQL_ISOLATION_MAP = {
1:38f02ec: 		{ "  "},					// UNSPECIFIED_ISOLATION_LEVEL
1:38f02ec: 		{ "UR", "DIRTY READ", "READ UNCOMMITTED"},
1:38f02ec: 		{ "CS", "CURSOR STABILITY", "READ COMMITTED"},
1:38f02ec: 		{ "RS"},		// read stability	
1:38f02ec: 		{ "RR", "REPEATABLE READ", "SERIALIZABLE"}
1:38f02ec: 	};
1:38f02ec: 
1:71c8e86:     private final ArrayList<TransactionListener> listeners;
1:38f02ec: 
1:38f02ec:     /** Map a Derby isolation level to the corresponding JDBC level */
1:38f02ec:     public  static  int jdbcIsolationLevel( int derbyIsolationLevel )
1:38f02ec:     {
1:38f02ec:         return CS_TO_JDBC_ISOLATION_LEVEL_MAP[ derbyIsolationLevel ];
1:38f02ec:     }
1:38f02ec: 
1:38f02ec:     /** Map Derby isolation level to SQL text values */
1:38f02ec:     public  static  String[]    isolationTextNames( int derbyIsolationLevel )
1:38f02ec:     {
1:38f02ec:         return ArrayUtil.copy( CS_TO_SQL_ISOLATION_MAP[ derbyIsolationLevel ] );
1:38f02ec:     }
1:38f02ec: 
1:38f02ec:     /** Get number of isolation string mappings */
1:38f02ec:     public  static  int     isolationMapCount() { return CS_TO_SQL_ISOLATION_MAP.length; }
1:f06ca0f:     
1:f06ca0f:     public TransactionControl()
1:f06ca0f:     {
1:71c8e86:         listeners = new ArrayList<TransactionListener>();
1:f06ca0f:     }
1:f06ca0f:     
1:f06ca0f:     /**
1:f06ca0f:      * Add a listener to the curent transaction.
1:f06ca0f:      * 
1:f06ca0f:      * A listener may be added multiple times and it will
1:f06ca0f:      * receive multiple callbacks.
1:f06ca0f:      * 
1:f06ca0f:      */
1:f06ca0f:     public void addListener(TransactionListener listener)
1:f06ca0f:     {
1:f06ca0f:         listeners.add(listener);
1:f06ca0f:     }
1:f06ca0f:     
1:f06ca0f:     /**
1:f06ca0f:      * Remove a listener from the current transaction.
1:f06ca0f:      * 
1:f06ca0f:      */
1:f06ca0f:     public void removeListener(TransactionListener listener)
1:f06ca0f:     {
1:f06ca0f:         listeners.remove(listener);
1:f06ca0f:     }
1:f06ca0f:     
1:f06ca0f:     /**
1:f06ca0f:      * Notify all listeners that a commit is about to occur.
1:f06ca0f:      * If a listener throws an exception then no
1:f06ca0f:      * further listeners will be notified and a
1:f06ca0f:      * StandardException with rollback severity will be thrown.
1:f06ca0f:      * @throws StandardException
1:f06ca0f:      */
1:f06ca0f:     public void preCommitNotify() throws StandardException
1:f06ca0f:     {
1:f06ca0f:         if (listeners.isEmpty())
1:f06ca0f:             return;
1:f06ca0f:         
1:71c8e86:         for (Iterator<TransactionListener> i = listeners.iterator(); i.hasNext(); )
1:f06ca0f:         {
1:f06ca0f:             TransactionListener listener =
1:71c8e86:                 i.next();
1:f06ca0f:             
1:f06ca0f:             try {
1:f06ca0f:                 if(listener.preCommit())
1:f06ca0f:                    i.remove();
1:f06ca0f:             }
1:f06ca0f:             catch (StandardException se) 
1:f06ca0f:             {               
1:f06ca0f:                 // This catches any exceptions that have Transaction severity
1:f06ca0f:                 // or less (e.g. Statement exception).
1:f06ca0f:                 // If we received any lesser
1:f06ca0f:                 // error then we abort the transaction anyway.
1:f06ca0f:                 
1:f06ca0f:                 if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
1:f06ca0f:                 {
1:f06ca0f:                     throw StandardException.newException(
1:f06ca0f:                             SQLState.XACT_COMMIT_EXCEPTION, se);
1:f06ca0f:                 }
1:f06ca0f:                 
1:f06ca0f:                 throw se;
1:f06ca0f:                 
1:f06ca0f:             }
1:f06ca0f:             
1:f06ca0f:         }
1:f06ca0f:     }
1:f06ca0f:     
1:f06ca0f:     /**
1:f06ca0f:      * Notify all listeners that a rollback is about to occur.
1:f06ca0f:      * If a listener throws an exception then no
1:f06ca0f:      * further listeners will be notified and a
1:f06ca0f:      * StandardException with shutdown database(?) severity will be thrown.
1:f06ca0f:      * @throws StandardException
1:f06ca0f:      */
1:f06ca0f:     public void preRollbackNotify() throws StandardException
1:f06ca0f:     { 
1:f06ca0f:         if (listeners.isEmpty())
1:f06ca0f:             return;
1:f06ca0f:         
1:71c8e86:         for (Iterator<TransactionListener> i = listeners.iterator(); i.hasNext(); )
1:f06ca0f:         {
1:f06ca0f:             TransactionListener listener =
1:71c8e86:                 i.next();
1:f06ca0f:             
1:f06ca0f:             try {
1:f06ca0f:                 listener.preRollback();
1:f06ca0f:                 i.remove();
1:f06ca0f:             } catch (StandardException se) {
1:f06ca0f:                 // TODO: Define behaviour on exception during rollback.
1:f06ca0f: 
1:f06ca0f:                 if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
1:f06ca0f:                 {
1:f06ca0f:                     
1:f06ca0f:                 }
1:f06ca0f:                 throw se;
1:f06ca0f:             }
1:f06ca0f:         }
1:f06ca0f:     }
1:f06ca0f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:     private final ArrayList<TransactionListener> listeners;
/////////////////////////////////////////////////////////////////////////
1:         listeners = new ArrayList<TransactionListener>();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<TransactionListener> i = listeners.iterator(); i.hasNext(); )
1:                 i.next();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<TransactionListener> i = listeners.iterator(); i.hasNext(); )
1:                 i.next();
commit:38f02ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
1: 	/* Constants for scan isolation levels. */
1: 	public static final int UNSPECIFIED_ISOLATION_LEVEL = 0;
1: 	public static final int READ_UNCOMMITTED_ISOLATION_LEVEL = 1;
1: 	public static final int READ_COMMITTED_ISOLATION_LEVEL = 2;
1: 	public static final int REPEATABLE_READ_ISOLATION_LEVEL = 3;
1: 	public static final int SERIALIZABLE_ISOLATION_LEVEL = 4;
1: 
1:     /**
1:      * Map from Derby transaction isolation constants to
1:      * JDBC constants.
1:      */
1: 	private static final int[] CS_TO_JDBC_ISOLATION_LEVEL_MAP = {
1: 		java.sql.Connection.TRANSACTION_NONE,				// UNSPECIFIED_ISOLATION_LEVEL
1: 		java.sql.Connection.TRANSACTION_READ_UNCOMMITTED,	// READ_UNCOMMITTED_ISOLATION_LEVEL
1: 		java.sql.Connection.TRANSACTION_READ_COMMITTED,		// READ_COMMITTED_ISOLATION_LEVEL
1: 		java.sql.Connection.TRANSACTION_REPEATABLE_READ,	// REPEATABLE_READ_ISOLATION_LEVEL		
1: 		java.sql.Connection.TRANSACTION_SERIALIZABLE		// SERIALIZABLE_ISOLATION_LEVEL
1: 	};
1: 
1:     /**
1:      * Map from Derby transaction isolation constants to
1:      * text values used in SQL. Note that the text
1:      * "REPEATABLE READ" or "RR" maps to SERIALIZABLE_ISOLATION_LEVEL
1:      * as a hang over from DB2 compatibility and now to preserve
1:      * backwards compatability.
1:      */
1: 	private static final String[][] CS_TO_SQL_ISOLATION_MAP = {
1: 		{ "  "},					// UNSPECIFIED_ISOLATION_LEVEL
1: 		{ "UR", "DIRTY READ", "READ UNCOMMITTED"},
1: 		{ "CS", "CURSOR STABILITY", "READ COMMITTED"},
1: 		{ "RS"},		// read stability	
1: 		{ "RR", "REPEATABLE READ", "SERIALIZABLE"}
1: 	};
1: 
1: 
1:     /** Map a Derby isolation level to the corresponding JDBC level */
1:     public  static  int jdbcIsolationLevel( int derbyIsolationLevel )
1:     {
1:         return CS_TO_JDBC_ISOLATION_LEVEL_MAP[ derbyIsolationLevel ];
1:     }
1: 
1:     /** Map Derby isolation level to SQL text values */
1:     public  static  String[]    isolationTextNames( int derbyIsolationLevel )
1:     {
1:         return ArrayUtil.copy( CS_TO_SQL_ISOLATION_MAP[ derbyIsolationLevel ] );
1:     }
1: 
1:     /** Get number of isolation string mappings */
1:     public  static  int     isolationMapCount() { return CS_TO_SQL_ISOLATION_MAP.length; }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f06ca0f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.transaction.TransactionControl
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.iapi.transaction;
1: 
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: 
1: import org.apache.derby.iapi.error.ExceptionSeverity;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: /**
1:  * Provide support to transactions to manage sets of
1:  * actions to perform at transaction boundaries.
1:  *
1:  * <P> Add rollback of savepoints?
1:  * TODO: A
1:  */
1: public final class TransactionControl {
1:     
0:     private final ArrayList listeners;
1:     
1:     public TransactionControl()
1:     {
0:         listeners = new ArrayList();
1:     }
1:     
1:     /**
1:      * Add a listener to the curent transaction.
1:      * 
1:      * A listener may be added multiple times and it will
1:      * receive multiple callbacks.
1:      * 
1:      */
1:     public void addListener(TransactionListener listener)
1:     {
1:         listeners.add(listener);
1:     }
1:     
1:     /**
1:      * Remove a listener from the current transaction.
1:      * 
1:      */
1:     public void removeListener(TransactionListener listener)
1:     {
1:         listeners.remove(listener);
1:     }
1:     
1:     /**
1:      * Notify all listeners that a commit is about to occur.
1:      * If a listener throws an exception then no
1:      * further listeners will be notified and a
1:      * StandardException with rollback severity will be thrown.
1:      * @throws StandardException
1:      */
1:     public void preCommitNotify() throws StandardException
1:     {
1:         if (listeners.isEmpty())
1:             return;
1:         
0:         for (Iterator i = listeners.iterator(); i.hasNext(); )
1:         {
1:             TransactionListener listener =
0:                 (TransactionListener) i.next();
1:             
1:             try {
1:                 if(listener.preCommit())
1:                    i.remove();
1:             }
1:             catch (StandardException se) 
1:             {               
1:                 // This catches any exceptions that have Transaction severity
1:                 // or less (e.g. Statement exception).
1:                 // If we received any lesser
1:                 // error then we abort the transaction anyway.
1:                 
1:                 if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
1:                 {
1:                     throw StandardException.newException(
1:                             SQLState.XACT_COMMIT_EXCEPTION, se);
1:                 }
1:                 
1:                 throw se;
1:                 
1:             }
1:             
1:         }
1:     }
1:     
1:     /**
1:      * Notify all listeners that a rollback is about to occur.
1:      * If a listener throws an exception then no
1:      * further listeners will be notified and a
1:      * StandardException with shutdown database(?) severity will be thrown.
1:      * @throws StandardException
1:      */
1:     public void preRollbackNotify() throws StandardException
1:     { 
1:         if (listeners.isEmpty())
1:             return;
1:         
0:         for (Iterator i = listeners.iterator(); i.hasNext(); )
1:         {
1:             TransactionListener listener =
0:                 (TransactionListener) i.next();
1:             
1:             try {
1:                 listener.preRollback();
1:                 i.remove();
1:             } catch (StandardException se) {
1:                 // TODO: Define behaviour on exception during rollback.
1: 
1:                 if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY)
1:                 {
1:                     
1:                 }
1:                 throw se;
1:             }
1:         }
1:     }
1: }
============================================================================