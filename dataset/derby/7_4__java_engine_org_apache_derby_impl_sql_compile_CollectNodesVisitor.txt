1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.CollectNodesVisitor
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:c0a807c: import java.util.ArrayList;
1:c0a807c: import java.util.List;
1:eac0369: import org.apache.derby.iapi.sql.compile.Visitable; 
1:eac0369: import org.apache.derby.iapi.sql.compile.Visitor;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Collect all nodes of the designated type to be returned
1:c0a807c:  * in a list.
1:eac0369:  * <p>
1:eac0369:  * Can find any type of node -- the class or class name
1:eac0369:  * of the target node is passed in as a constructor
1:eac0369:  * parameter.
1:eac0369:  *
1:eac0369:  */
1:f2fad75: public class CollectNodesVisitor<T extends Visitable> implements Visitor
1:eac0369: {
1:f2fad75:     private final List<T> nodeList;
1:a6d25cd:     private final Class<T> nodeClass;
1:a6d25cd:     private final Class<? extends Visitable> skipOverClass;
1:c0a807c: 
1:eac0369: 	/**
1:eac0369: 	 * Construct a visitor
1:eac0369: 	 *
1:eac0369: 	 * @param nodeClass the class of the node that 
1:eac0369: 	 * 	we are looking for.
1:eac0369: 	 */
1:a6d25cd:     public CollectNodesVisitor(Class<T> nodeClass)
1:eac0369: 	{
1:c0a807c:         this(nodeClass, null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Construct a visitor
1:eac0369: 	 *
1:eac0369: 	 * @param nodeClass the class of the node that 
1:eac0369: 	 * 	we are looking for.
1:eac0369: 	 * @param skipOverClass do not go below this
1:eac0369: 	 * node when searching for nodeClass.
1:eac0369: 	 */
1:a6d25cd:     public CollectNodesVisitor(Class<T> nodeClass,
1:a6d25cd:                                Class<? extends Visitable> skipOverClass)
1:eac0369: 	{
1:f2fad75:         this.nodeList = new ArrayList<T>();
1:c0a807c:         this.nodeClass = nodeClass;
1:eac0369: 		this.skipOverClass = skipOverClass;
1:eac0369: 	}
1:eac0369: 
1:dd2f5a8: 	public boolean visitChildrenFirst(Visitable node)
1:dd2f5a8: 	{
1:dd2f5a8: 		return false;
1:dd2f5a8: 	}
1:dd2f5a8: 
1:eac0369: 	public boolean stopTraversal()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// VISITOR INTERFACE
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * If we have found the target node, we are done.
1:eac0369: 	 *
1:eac0369: 	 * @param node 	the node to process
1:eac0369: 	 *
1:eac0369: 	 * @return me
1:eac0369: 	 */
1:eac0369: 	public Visitable visit(Visitable node)
1:eac0369: 	{
1:eac0369: 		if (nodeClass.isInstance(node))
1:eac0369: 		{
1:a6d25cd:             nodeList.add(nodeClass.cast(node));
1:eac0369: 		}
1:eac0369: 		return node;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:c0a807c: 	 * Don't visit children under the skipOverClass
1:eac0369: 	 * node, if it isn't null.
1:eac0369: 	 *
1:eac0369: 	 * @return true/false
1:eac0369: 	 */
1:eac0369: 	public boolean skipChildren(Visitable node)
1:eac0369: 	{
1:eac0369: 		return (skipOverClass == null) ?
1:eac0369: 				false:
1:eac0369: 				skipOverClass.isInstance(node);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// CLASS INTERFACE
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////
1:eac0369: 	/**
1:63e0910: 	 * Return the list of matching nodes.
1:c0a807c:      * The returned list may be empty, if there are no matching nodes. It
1:c0a807c:      * is never {@code null}.
1:eac0369: 	 *
1:eac0369: 	 */
1:f2fad75: 	public List<T> getList()
1:eac0369: 	{
1:eac0369: 		return nodeList;
1:eac0369: 	}
1:eac0369: }	
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a6d25cd
/////////////////////////////////////////////////////////////////////////
1:     private final Class<T> nodeClass;
1:     private final Class<? extends Visitable> skipOverClass;
/////////////////////////////////////////////////////////////////////////
1:     public CollectNodesVisitor(Class<T> nodeClass)
/////////////////////////////////////////////////////////////////////////
1:     public CollectNodesVisitor(Class<T> nodeClass,
1:                                Class<? extends Visitable> skipOverClass)
/////////////////////////////////////////////////////////////////////////
1:             nodeList.add(nodeClass.cast(node));
commit:c0a807c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1:  * in a list.
/////////////////////////////////////////////////////////////////////////
0:     private final List nodeList;
0:     private final Class nodeClass;
0:     private final Class skipOverClass;
1: 
/////////////////////////////////////////////////////////////////////////
1:         this(nodeClass, null);
/////////////////////////////////////////////////////////////////////////
0:         this.nodeList = new ArrayList();
1:         this.nodeClass = nodeClass;
/////////////////////////////////////////////////////////////////////////
1: 	 * Don't visit children under the skipOverClass
/////////////////////////////////////////////////////////////////////////
1:      * The returned list may be empty, if there are no matching nodes. It
1:      * is never {@code null}.
0: 	public List getList()
commit:a32eb9f
/////////////////////////////////////////////////////////////////////////
0: 			nodeList.add(node);
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 	public boolean visitChildrenFirst(Visitable node)
1: 	{
1: 		return false;
1: 	}
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
commit:f2fad75
/////////////////////////////////////////////////////////////////////////
1: public class CollectNodesVisitor<T extends Visitable> implements Visitor
1:     private final List<T> nodeList;
/////////////////////////////////////////////////////////////////////////
1:         this.nodeList = new ArrayList<T>();
/////////////////////////////////////////////////////////////////////////
0: 			nodeList.add( (T) node);
/////////////////////////////////////////////////////////////////////////
1: 	public List<T> getList()
commit:63e0910
/////////////////////////////////////////////////////////////////////////
1: 	 * Return the list of matching nodes.
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.CollectNodesVisitor
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.compile.Visitable; 
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * Collect all nodes of the designated type to be returned
0:  * in a vector.
1:  * <p>
1:  * Can find any type of node -- the class or class name
1:  * of the target node is passed in as a constructor
1:  * parameter.
1:  *
0:  * @author jamie
1:  */
0: public class CollectNodesVisitor implements Visitor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private Vector	nodeList;
0: 	private Class 	nodeClass;
0: 	private Class	skipOverClass;
1: 	/**
1: 	 * Construct a visitor
1: 	 *
1: 	 * @param nodeClass the class of the node that 
1: 	 * 	we are looking for.
1: 	 */
0: 	public CollectNodesVisitor(Class nodeClass)
1: 	{
0: 		this.nodeClass = nodeClass;
0: 		nodeList = new Vector();
1: 	}
1: 
1: 	/**
1: 	 * Construct a visitor
1: 	 *
1: 	 * @param nodeClass the class of the node that 
1: 	 * 	we are looking for.
1: 	 * @param skipOverClass do not go below this
1: 	 * node when searching for nodeClass.
1: 	 */
0: 	public CollectNodesVisitor(Class nodeClass, Class skipOverClass)
1: 	{
0: 		this(nodeClass);
1: 		this.skipOverClass = skipOverClass;
1: 	}
1: 
1: 	public boolean stopTraversal()
1: 	{
1: 		return false;
1: 	}
1: 	////////////////////////////////////////////////
1: 	//
1: 	// VISITOR INTERFACE
1: 	//
1: 	////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * If we have found the target node, we are done.
1: 	 *
1: 	 * @param node 	the node to process
1: 	 *
1: 	 * @return me
1: 	 */
1: 	public Visitable visit(Visitable node)
1: 	{
1: 		if (nodeClass.isInstance(node))
1: 		{
0: 			nodeList.addElement(node);	
1: 		}
1: 		return node;
1: 	}
1: 
1: 	/**
0: 	 * Don't visit childen under the skipOverClass
1: 	 * node, if it isn't null.
1: 	 *
1: 	 * @return true/false
1: 	 */
1: 	public boolean skipChildren(Visitable node)
1: 	{
1: 		return (skipOverClass == null) ?
1: 				false:
1: 				skipOverClass.isInstance(node);
1: 	}
1: 
1: 	////////////////////////////////////////////////
1: 	//
1: 	// CLASS INTERFACE
1: 	//
1: 	////////////////////////////////////////////////
1: 	/**
0: 	 * Reset the status so it can be run again.
1: 	 *
1: 	 */
0: 	public Vector getList()
1: 	{
1: 		return nodeList;
1: 	}
1: }	
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.Visitable; 
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * Collect all nodes of the designated type to be returned
0:  * in a vector.
0:  * <p>
0:  * Can find any type of node -- the class or class name
0:  * of the target node is passed in as a constructor
0:  * parameter.
0:  *
0:  * @author jamie
0:  */
0: public class CollectNodesVisitor implements Visitor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private Vector	nodeList;
0: 	private Class 	nodeClass;
0: 	private Class	skipOverClass;
0: 	/**
0: 	 * Construct a visitor
0: 	 *
0: 	 * @param nodeClass the class of the node that 
0: 	 * 	we are looking for.
0: 	 */
0: 	public CollectNodesVisitor(Class nodeClass)
0: 	{
0: 		this.nodeClass = nodeClass;
0: 		nodeList = new Vector();
0: 	}
0: 
0: 	/**
0: 	 * Construct a visitor
0: 	 *
0: 	 * @param nodeClass the class of the node that 
0: 	 * 	we are looking for.
0: 	 * @param skipOverClass do not go below this
0: 	 * node when searching for nodeClass.
0: 	 */
0: 	public CollectNodesVisitor(Class nodeClass, Class skipOverClass)
0: 	{
0: 		this(nodeClass);
0: 		this.skipOverClass = skipOverClass;
0: 	}
0: 
0: 	public boolean stopTraversal()
0: 	{
0: 		return false;
0: 	}
0: 	////////////////////////////////////////////////
0: 	//
0: 	// VISITOR INTERFACE
0: 	//
0: 	////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * If we have found the target node, we are done.
0: 	 *
0: 	 * @param node 	the node to process
0: 	 *
0: 	 * @return me
0: 	 */
0: 	public Visitable visit(Visitable node)
0: 	{
0: 		if (nodeClass.isInstance(node))
0: 		{
0: 			nodeList.addElement(node);	
0: 		}
0: 		return node;
0: 	}
0: 
0: 	/**
0: 	 * Don't visit childen under the skipOverClass
0: 	 * node, if it isn't null.
0: 	 *
0: 	 * @return true/false
0: 	 */
0: 	public boolean skipChildren(Visitable node)
0: 	{
0: 		return (skipOverClass == null) ?
0: 				false:
0: 				skipOverClass.isInstance(node);
0: 	}
0: 
0: 	////////////////////////////////////////////////
0: 	//
0: 	// CLASS INTERFACE
0: 	//
0: 	////////////////////////////////////////////////
0: 	/**
0: 	 * Reset the status so it can be run again.
0: 	 *
0: 	 */
0: 	public Vector getList()
0: 	{
0: 		return nodeList;
0: 	}
0: }	
============================================================================