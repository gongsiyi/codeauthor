1:aa609d5: /*
4:aa609d5: 
1:aa609d5:    Derby - Class org.apache.derby.impl.sql.catalog.SYSUSERSRowFactory
1:aa609d5: 
1:aa609d5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:aa609d5:    contributor license agreements.  See the NOTICE file distributed with
1:aa609d5:    this work for additional information regarding copyright ownership.
1:aa609d5:    The ASF licenses this file to you under the Apache License, Version 2.0
1:aa609d5:    (the "License"); you may not use this file except in compliance with
1:aa609d5:    the License.  You may obtain a copy of the License at
1:aa609d5: 
1:aa609d5:       http://www.apache.org/licenses/LICENSE-2.0
1:aa609d5: 
1:aa609d5:    Unless required by applicable law or agreed to in writing, software
1:aa609d5:    distributed under the License is distributed on an "AS IS" BASIS,
1:aa609d5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aa609d5:    See the License for the specific language governing permissions and
1:aa609d5:    limitations under the License.
1:aa609d5: 
1:aa609d5:  */
1:aa609d5: 
1:aa609d5: package org.apache.derby.impl.sql.catalog;
1:aa609d5: 
1:aa609d5: import java.sql.Timestamp;
1:aa609d5: import java.sql.Types;
1:aa609d5: import java.util.Arrays;
1:aa609d5: 
1:aa609d5: import org.apache.derby.catalog.TypeDescriptor;
1:aa609d5: import org.apache.derby.iapi.db.Database;
1:aa609d5: import org.apache.derby.iapi.error.StandardException;
1:aa609d5: import org.apache.derby.iapi.services.monitor.Monitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:aa609d5: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:aa609d5: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:aa609d5: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:aa609d5: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:aa609d5: import org.apache.derby.iapi.sql.dictionary.UserDescriptor;
1:aa609d5: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:aa609d5: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:aa609d5: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:aa609d5: import org.apache.derby.iapi.sql.execute.ExecRow;
1:aa609d5: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1:aa609d5: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:aa609d5: import org.apache.derby.iapi.types.SQLTimestamp;
1:aa609d5: import org.apache.derby.iapi.types.SQLVarchar;
1:aa609d5: import org.apache.derby.iapi.types.TypeId;
1:aa609d5: import org.apache.derby.iapi.types.DataValueFactory;
1:aa609d5: import org.apache.derby.iapi.types.RowLocation;
1:aa609d5: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:aa609d5: import org.apache.derby.iapi.types.DataValueDescriptor;
1:aa609d5: import org.apache.derby.iapi.types.TypeId;
1:aa609d5: 
1:aa609d5: /**
1:aa609d5:  * Factory for creating a SYSUSERS row.
1:aa609d5:  */
1:aa609d5: 
1:aa609d5: public class SYSUSERSRowFactory extends CatalogRowFactory
1:aa609d5: {
1:aa609d5: 	public static final String	TABLE_NAME = "SYSUSERS";
1:aa609d5:     public  static  final   String  SYSUSERS_UUID = "9810800c-0134-14a5-40c1-000004f61f90";
1:aa609d5:     public  static  final   String  PASSWORD_COL_NAME = "PASSWORD";
1:aa609d5:     
1:aa609d5:     private static final int		SYSUSERS_COLUMN_COUNT = 4;
1:aa609d5: 
1:aa609d5: 	/* Column #s (1 based) */
1:04cfd28:     public static final int		USERNAME_COL_NUM = 1;
1:04cfd28:     public static final int		HASHINGSCHEME_COL_NUM = 2;
1:aa609d5:     public static final int		PASSWORD_COL_NUM = 3;
1:04cfd28:     public static final int		LASTMODIFIED_COL_NUM = 4;
1:aa609d5: 
1:aa609d5:     static final int		SYSUSERS_INDEX1_ID = 0;
1:aa609d5: 
1:aa609d5: 	private static final int[][] indexColumnPositions =
1:aa609d5: 	{
1:aa609d5: 		{USERNAME_COL_NUM},
1:aa609d5: 	};
1:aa609d5: 
1:aa609d5:     private	static	final	boolean[]	uniqueness = null;
1:aa609d5: 
1:aa609d5: 	private	static	final	String[]	uuids =
1:aa609d5: 	{
1:aa609d5: 		SYSUSERS_UUID,	// catalog UUID
1:aa609d5: 		"9810800c-0134-14a5-a609-000004f61f90",	// heap UUID
1:aa609d5: 		"9810800c-0134-14a5-f1cd-000004f61f90",	// SYSUSERS_INDEX1
1:aa609d5: 	};
1:aa609d5: 
1:aa609d5: 	/////////////////////////////////////////////////////////////////////////////
1:aa609d5: 	//
1:aa609d5: 	//	CONSTRUCTORS
1:aa609d5: 	//
1:aa609d5: 	/////////////////////////////////////////////////////////////////////////////
1:aa609d5: 
1:aa609d5:     SYSUSERSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf) 
1:aa609d5: 	{
1:aa609d5: 		super( uuidf, ef, dvf );
1:aa609d5: 		initInfo( SYSUSERS_COLUMN_COUNT, TABLE_NAME, indexColumnPositions, uniqueness, uuids );
1:aa609d5: 	}
1:aa609d5: 
1:aa609d5: 	/////////////////////////////////////////////////////////////////////////////
1:aa609d5: 	//
1:aa609d5: 	//	METHODS
1:aa609d5: 	//
1:aa609d5: 	/////////////////////////////////////////////////////////////////////////////
1:aa609d5: 
1:aa609d5: 	/**
1:aa609d5: 	 * Make a SYSUSERS row. The password in the UserDescriptor will be zeroed by
1:aa609d5:      * this method.
1:aa609d5: 	 *
1:aa609d5: 	 * @return	Row suitable for inserting into SYSUSERS
1:aa609d5: 	 *
1:aa609d5: 	 * @exception   StandardException thrown on failure
1:aa609d5: 	 */
1:aa609d5: 
1:aa609d5: 	public ExecRow makeRow( TupleDescriptor td, TupleDescriptor parent )
1:aa609d5:         throws StandardException
1:aa609d5: 	{
1:aa609d5: 		String  userName = null;
1:aa609d5: 		String  hashingScheme = null;
1:aa609d5: 		char[]  password = null;
1:aa609d5: 		Timestamp   lastModified = null;
1:aa609d5: 		
1:aa609d5: 		ExecRow        			row;
1:aa609d5: 
1:aa609d5:         try {
1:aa609d5:             if ( td != null )	
1:aa609d5:             {
1:aa609d5:                 UserDescriptor descriptor = (UserDescriptor) td;
1:aa609d5:                 userName = descriptor.getUserName();
1:aa609d5:                 hashingScheme = descriptor.getHashingScheme();
1:aa609d5:                 password = descriptor.getAndZeroPassword();
1:aa609d5:                 lastModified = descriptor.getLastModified();
1:aa609d5:             }
1:aa609d5: 	
1:aa609d5:             /* Build the row to insert  */
1:aa609d5:             row = getExecutionFactory().getValueRow( SYSUSERS_COLUMN_COUNT );
1:aa609d5: 
1:aa609d5:             /* 1st column is USERNAME (varchar(128)) */
1:aa609d5:             row.setColumn( USERNAME_COL_NUM, new SQLVarchar( userName ) );
1:aa609d5: 
1:aa609d5:             /* 2nd column is HASHINGSCHEME (varchar(32672)) */
1:aa609d5:             row.setColumn( HASHINGSCHEME_COL_NUM, new SQLVarchar( hashingScheme ) );
1:aa609d5: 
1:aa609d5:             /* 3rd column is PASSWORD (varchar(32672)) */
1:aa609d5:             row.setColumn( PASSWORD_COL_NUM, new SQLVarchar( password ) );
1:aa609d5: 
1:aa609d5:             /* 4th column is LASTMODIFIED (timestamp) */
1:aa609d5:             row.setColumn( LASTMODIFIED_COL_NUM, new SQLTimestamp( lastModified ) );
1:aa609d5:         }
1:aa609d5:         finally
1:aa609d5:         {
1:aa609d5:             // zero out the password to prevent it from being memory-sniffed
1:aa609d5:             if ( password != null ) { Arrays.fill( password, (char) 0 ); }
1:aa609d5:         }
1:aa609d5: 
1:aa609d5: 		return row;
1:aa609d5: 	}
1:aa609d5: 
1:aa609d5: 	///////////////////////////////////////////////////////////////////////////
1:aa609d5: 	//
1:aa609d5: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:aa609d5: 	//
1:aa609d5: 	///////////////////////////////////////////////////////////////////////////
1:aa609d5: 
1:aa609d5: 	/**
1:aa609d5: 	 * Make a descriptor out of a SYSUSERS row. The password column in the
1:aa609d5:      * row will be zeroed out.
1:aa609d5: 	 *
1:aa609d5: 	 * @param row a row
1:aa609d5: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1:aa609d5: 	 * @param dd dataDictionary
1:aa609d5: 	 *
1:aa609d5: 	 * @return	a descriptor equivalent to a row
1:aa609d5: 	 *
1:aa609d5: 	 * @exception   StandardException thrown on failure
1:aa609d5: 	 */
1:aa609d5: 	public TupleDescriptor buildDescriptor(
1:aa609d5: 		ExecRow					row,
1:aa609d5: 		TupleDescriptor			parentTupleDescriptor,
1:aa609d5: 		DataDictionary 			dd )
1:aa609d5: 					throws StandardException
1:aa609d5: 	{
1:aa609d5: 		if (SanityManager.DEBUG)
1:aa609d5: 		{
1:aa609d5: 			if (row.nColumns() != SYSUSERS_COLUMN_COUNT)
1:aa609d5: 			{
1:aa609d5: 				SanityManager.THROWASSERT("Wrong number of columns for a SYSUSERS row: "+
1:aa609d5: 							 row.nColumns());
1:aa609d5: 			}
1:aa609d5: 		}
1:aa609d5: 
1:aa609d5: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:aa609d5: 
1:aa609d5: 		String	userName;
1:aa609d5: 		String	hashingScheme;
1:aa609d5: 		char[]  password = null;
1:aa609d5: 		Timestamp   lastModified;
1:aa609d5: 		DataValueDescriptor	col;
1:aa609d5: 		SQLVarchar	passwordCol = null;
1:aa609d5: 
1:aa609d5: 		UserDescriptor	result;
1:aa609d5: 
1:aa609d5:         try {
1:aa609d5:             /* 1st column is USERNAME */
1:aa609d5:             col = row.getColumn( USERNAME_COL_NUM );
1:aa609d5:             userName = col.getString();
1:aa609d5: 
1:aa609d5:             /* 2nd column is HASHINGSCHEME */
1:aa609d5:             col = row.getColumn( HASHINGSCHEME_COL_NUM );
1:aa609d5:             hashingScheme = col.getString();
1:aa609d5: 		
1:aa609d5:             /* 3nd column is PASSWORD */
1:aa609d5:             passwordCol = (SQLVarchar) row.getColumn( PASSWORD_COL_NUM );
1:aa609d5:             password = passwordCol.getRawDataAndZeroIt();
1:aa609d5: 
1:aa609d5:             /* 4th column is LASTMODIFIED */
1:aa609d5:             col = row.getColumn( LASTMODIFIED_COL_NUM );
1:aa609d5:             lastModified = col.getTimestamp( new java.util.GregorianCalendar() );
1:aa609d5: 
1:aa609d5:             result = ddg.newUserDescriptor( userName, hashingScheme, password, lastModified );
1:aa609d5:         }
1:aa609d5:         finally
1:aa609d5:         {
1:aa609d5:             // zero out the password so that it can't be memory-sniffed
1:aa609d5:             if ( password != null ) { Arrays.fill( password, (char) 0 ); }
1:aa609d5:             if ( passwordCol != null ) { passwordCol.zeroRawData(); }
1:aa609d5:         }
1:aa609d5:         
1:aa609d5: 		return result;
1:aa609d5: 	}
1:aa609d5: 
1:aa609d5: 	/**
1:aa609d5: 	 * Builds a list of columns suitable for creating this Catalog.
1:aa609d5: 	 *
1:aa609d5: 	 *
1:aa609d5: 	 * @return array of SystemColumn suitable for making this catalog.
1:aa609d5: 	 */
1:aa609d5:     public SystemColumn[]   buildColumnList()
1:aa609d5:         throws StandardException
1:aa609d5:     {
1:aa609d5:         return new SystemColumn[]
1:aa609d5:         {
1:aa609d5:             SystemColumnImpl.getIdentifierColumn( "USERNAME", false ),
1:aa609d5:             SystemColumnImpl.getColumn( "HASHINGSCHEME", Types.VARCHAR, false, TypeId.VARCHAR_MAXWIDTH ),
1:aa609d5:             SystemColumnImpl.getColumn( PASSWORD_COL_NAME, Types.VARCHAR, false, TypeId.VARCHAR_MAXWIDTH ),
1:aa609d5:             SystemColumnImpl.getColumn( "LASTMODIFIED", Types.TIMESTAMP, false ),
1:aa609d5:         };
1:aa609d5:     }
1:aa609d5: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:04cfd28
/////////////////////////////////////////////////////////////////////////
1:     public static final int		USERNAME_COL_NUM = 1;
1:     public static final int		HASHINGSCHEME_COL_NUM = 2;
1:     public static final int		LASTMODIFIED_COL_NUM = 4;
commit:aa609d5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSUSERSRowFactory
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import java.sql.Timestamp;
1: import java.sql.Types;
1: import java.util.Arrays;
1: 
1: import org.apache.derby.catalog.TypeDescriptor;
1: import org.apache.derby.iapi.db.Database;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.UserDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionContext;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.types.SQLTimestamp;
1: import org.apache.derby.iapi.types.SQLVarchar;
1: import org.apache.derby.iapi.types.TypeId;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1: 
1: /**
1:  * Factory for creating a SYSUSERS row.
1:  */
1: 
1: public class SYSUSERSRowFactory extends CatalogRowFactory
1: {
1: 	public static final String	TABLE_NAME = "SYSUSERS";
1:     public  static  final   String  SYSUSERS_UUID = "9810800c-0134-14a5-40c1-000004f61f90";
1:     public  static  final   String  PASSWORD_COL_NAME = "PASSWORD";
1:     
1:     private static final int		SYSUSERS_COLUMN_COUNT = 4;
1: 
1: 	/* Column #s (1 based) */
0:     private static final int		USERNAME_COL_NUM = 1;
1: 
0:     private static final int		HASHINGSCHEME_COL_NUM = 2;
1: 
1:     public static final int		PASSWORD_COL_NUM = 3;
1: 
0:     private static final int		LASTMODIFIED_COL_NUM = 4;
1: 
1:     static final int		SYSUSERS_INDEX1_ID = 0;
1: 
1: 	private static final int[][] indexColumnPositions =
1: 	{
1: 		{USERNAME_COL_NUM},
1: 	};
1: 
1:     private	static	final	boolean[]	uniqueness = null;
1: 
1: 	private	static	final	String[]	uuids =
1: 	{
1: 		SYSUSERS_UUID,	// catalog UUID
1: 		"9810800c-0134-14a5-a609-000004f61f90",	// heap UUID
1: 		"9810800c-0134-14a5-f1cd-000004f61f90",	// SYSUSERS_INDEX1
1: 	};
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
1:     SYSUSERSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf) 
1: 	{
1: 		super( uuidf, ef, dvf );
1: 		initInfo( SYSUSERS_COLUMN_COUNT, TABLE_NAME, indexColumnPositions, uniqueness, uuids );
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	METHODS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make a SYSUSERS row. The password in the UserDescriptor will be zeroed by
1:      * this method.
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSUSERS
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 
1: 	public ExecRow makeRow( TupleDescriptor td, TupleDescriptor parent )
1:         throws StandardException
1: 	{
1: 		String  userName = null;
1: 		String  hashingScheme = null;
1: 		char[]  password = null;
1: 		Timestamp   lastModified = null;
1: 		
1: 		ExecRow        			row;
1: 
1:         try {
1:             if ( td != null )	
1:             {
1:                 UserDescriptor descriptor = (UserDescriptor) td;
1:                 userName = descriptor.getUserName();
1:                 hashingScheme = descriptor.getHashingScheme();
1:                 password = descriptor.getAndZeroPassword();
1:                 lastModified = descriptor.getLastModified();
1:             }
1: 	
1:             /* Build the row to insert  */
1:             row = getExecutionFactory().getValueRow( SYSUSERS_COLUMN_COUNT );
1: 
1:             /* 1st column is USERNAME (varchar(128)) */
1:             row.setColumn( USERNAME_COL_NUM, new SQLVarchar( userName ) );
1: 
1:             /* 2nd column is HASHINGSCHEME (varchar(32672)) */
1:             row.setColumn( HASHINGSCHEME_COL_NUM, new SQLVarchar( hashingScheme ) );
1: 
1:             /* 3rd column is PASSWORD (varchar(32672)) */
1:             row.setColumn( PASSWORD_COL_NUM, new SQLVarchar( password ) );
1: 
1:             /* 4th column is LASTMODIFIED (timestamp) */
1:             row.setColumn( LASTMODIFIED_COL_NUM, new SQLTimestamp( lastModified ) );
1:         }
1:         finally
1:         {
1:             // zero out the password to prevent it from being memory-sniffed
1:             if ( password != null ) { Arrays.fill( password, (char) 0 ); }
1:         }
1: 
1: 		return row;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make a descriptor out of a SYSUSERS row. The password column in the
1:      * row will be zeroed out.
1: 	 *
1: 	 * @param row a row
1: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1: 	 * @param dd dataDictionary
1: 	 *
1: 	 * @return	a descriptor equivalent to a row
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public TupleDescriptor buildDescriptor(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd )
1: 					throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (row.nColumns() != SYSUSERS_COLUMN_COUNT)
1: 			{
1: 				SanityManager.THROWASSERT("Wrong number of columns for a SYSUSERS row: "+
1: 							 row.nColumns());
1: 			}
1: 		}
1: 
1: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
1: 		String	userName;
1: 		String	hashingScheme;
1: 		char[]  password = null;
1: 		Timestamp   lastModified;
1: 		DataValueDescriptor	col;
1: 		SQLVarchar	passwordCol = null;
1: 
1: 		UserDescriptor	result;
1: 
1:         try {
1:             /* 1st column is USERNAME */
1:             col = row.getColumn( USERNAME_COL_NUM );
1:             userName = col.getString();
1: 
1:             /* 2nd column is HASHINGSCHEME */
1:             col = row.getColumn( HASHINGSCHEME_COL_NUM );
1:             hashingScheme = col.getString();
1: 		
1:             /* 3nd column is PASSWORD */
1:             passwordCol = (SQLVarchar) row.getColumn( PASSWORD_COL_NUM );
1:             password = passwordCol.getRawDataAndZeroIt();
1: 
1:             /* 4th column is LASTMODIFIED */
1:             col = row.getColumn( LASTMODIFIED_COL_NUM );
1:             lastModified = col.getTimestamp( new java.util.GregorianCalendar() );
1: 
1:             result = ddg.newUserDescriptor( userName, hashingScheme, password, lastModified );
1:         }
1:         finally
1:         {
1:             // zero out the password so that it can't be memory-sniffed
1:             if ( password != null ) { Arrays.fill( password, (char) 0 ); }
1:             if ( passwordCol != null ) { passwordCol.zeroRawData(); }
1:         }
1:         
1: 		return result;
1: 	}
1: 
1: 	/**
1: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 *
1: 	 *
1: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
1:     public SystemColumn[]   buildColumnList()
1:         throws StandardException
1:     {
1:         return new SystemColumn[]
1:         {
1:             SystemColumnImpl.getIdentifierColumn( "USERNAME", false ),
1:             SystemColumnImpl.getColumn( "HASHINGSCHEME", Types.VARCHAR, false, TypeId.VARCHAR_MAXWIDTH ),
1:             SystemColumnImpl.getColumn( PASSWORD_COL_NAME, Types.VARCHAR, false, TypeId.VARCHAR_MAXWIDTH ),
1:             SystemColumnImpl.getColumn( "LASTMODIFIED", Types.TIMESTAMP, false ),
1:         };
1:     }
1: }
============================================================================