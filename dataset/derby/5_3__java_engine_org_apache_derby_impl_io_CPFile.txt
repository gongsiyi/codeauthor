1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.io.CPFile
1:345de35: 
1:2724c48:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2724c48:    contributor license agreements.  See the NOTICE file distributed with
1:2724c48:    this work for additional information regarding copyright ownership.
1:2724c48:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2724c48:    (the "License"); you may not use this file except in compliance with
1:2724c48:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.io;
1:eac0369: 
1:eac0369: import org.apache.derby.io.StorageFile;
1:eac0369: 
1:eac0369: import java.io.InputStream;
1:bf4839e: 
1:eac0369: import java.io.FileNotFoundException;
1:747f261: import java.net.URL;
1:9f1b314: import java.security.AccessController;
1:9f1b314: import java.security.PrivilegedAction;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This class provides a class path based implementation of the StorageFile interface. It is used by the
1:eac0369:  * database engine to access persistent data and transaction logs under the classpath subsubprotocol.
1:eac0369:  */
1:ccbbcd4: class CPFile extends InputStreamFile<CPStorageFactory>
7:eac0369: {
1:bf4839e: 
1:eac0369:     CPFile( CPStorageFactory storageFactory, String path)
1:eac0369:     {
1:eac0369:         super( storageFactory, path);
1:bf4839e:     }
1:bf4839e: 
1:eac0369:     CPFile( CPStorageFactory storageFactory, String parent, String name)
1:bf4839e:     {
1:eac0369:         super( storageFactory, parent, name);
1:747f261:     }
1:bf4839e: 
1:eac0369:     CPFile( CPFile dir, String name)
1:eac0369:     {
1:eac0369:         super( dir,name);
1:bf4839e:     }
1:bf4839e: 
1:eac0369:     private CPFile( CPStorageFactory storageFactory, String child, int pathLen)
1:eac0369:     {
1:eac0369:         super( storageFactory, child, pathLen);
1:bf4839e:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Tests whether the named file exists.
1:747f261:      *
1:eac0369:      * @return <b>true</b> if the named file exists, <b>false</b> if not.
1:eac0369:      */
1:eac0369:     public boolean exists()
1:bf4839e:     {
1:747f261:     	return getURL() != null;
1:eac0369:     } // end of exists
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Get the parent of this file.
2:eac0369:      *
1:eac0369:      * @param pathLen the length of the parent's path name.
1:eac0369:      */
1:eac0369:     StorageFile getParentDir( int pathLen)
1:eac0369:     {
1:eac0369:         return new CPFile( storageFactory, path, pathLen);
1:747f261:     }
1:eac0369:     
1:eac0369:     /**
1:eac0369:      * Creates an input stream from a file name.
1:eac0369:      *
1:eac0369:      * @return an input stream suitable for reading from the file.
1:eac0369:      *
1:eac0369:      * @exception FileNotFoundException if the file is not found.
1:eac0369:      */
1:eac0369:     public InputStream getInputStream( ) throws FileNotFoundException
1:bf4839e:     {
1:0f43aec:         InputStream is = null;
1:0f43aec:         ClassLoader cl = getContextClassLoader(Thread.currentThread());
1:0f43aec:         if (cl != null) {
1:0f43aec:             is = getResourceAsStream(cl, path);
1:0f43aec:         }
1:9f1b314: 
1:0f43aec:         // don't assume the context class loader is tied
1:0f43aec:         // into the class loader that loaded this class.
1:0f43aec:         if (is == null) {
1:0f43aec:             cl = getClass().getClassLoader();
1:0f43aec:             // Javadoc indicates implementations can use
1:0f43aec:             // null as a return from Class.getClassLoader()
1:0f43aec:             // to indicate the system/bootstrap classloader.
1:0f43aec:             if (cl != null) {
1:0f43aec:                 is = getResourceAsStream(cl, path);
1:0f43aec:             } else {
1:0f43aec:                 is = getSystemResourceAsStream(path);
1:0f43aec:             }
1:0f43aec:         }
1:0f43aec: 
1:0f43aec:         if (is == null) {
1:9f1b314:             throw new FileNotFoundException(toString());
1:9f1b314:         }
1:9f1b314: 
1:0f43aec:         return is;
1:9f1b314: 
1:eac0369:     } // end of getInputStream
1:747f261:     
1:747f261: 	/**
1:747f261:      * Return a URL for this file (resource).
1:747f261:      */
1:8ae4e15:     private URL getURL() {
1:747f261: 
1:9f1b314:         ClassLoader cl = getContextClassLoader(Thread.currentThread());
1:747f261:         if (cl != null) {
1:8ae4e15:             URL myURL = getResource(cl, path);
1:747f261:             if (myURL != null)
1:747f261:                 return myURL;
1:9f1b314:         }
1:747f261: 
1:747f261:         // don't assume the context class loader is tied
1:747f261:         // into the class loader that loaded this class.
1:747f261:         cl = getClass().getClassLoader();
1:747f261:         // Javadoc indicates implementations can use
1:747f261:         // null as a return from Class.getClassLoader()
1:747f261:         // to indicate the system/bootstrap classloader.
1:747f261:         if (cl != null) {
1:9f1b314:             return getResource(cl, path);
1:747f261:         } else {
1:9f1b314:             return getSystemResource(path);
1:9f1b314:         }
1:9f1b314:     }
1:9f1b314: 
1:9f1b314:     /** Privileged wrapper for {@code Thread.getContextClassLoader()}. */
1:9f1b314:     private static ClassLoader getContextClassLoader(final Thread thread) {
1:9f1b314:         return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
1:9f1b314:             public ClassLoader run() {
1:9f1b314:                 return thread.getContextClassLoader();
1:9f1b314:             }
2:9f1b314:         });
1:9f1b314:     }
1:9f1b314: 
1:9f1b314:     /** Privileged wrapper for {@code ClassLoader.getResource(String)}. */
1:9f1b314:     private static URL getResource(
1:9f1b314:             final ClassLoader cl, final String name) {
1:9f1b314:         return AccessController.doPrivileged(new PrivilegedAction<URL>() {
1:9f1b314:             public URL run() {
1:9f1b314:                 return cl.getResource(name);
1:9f1b314:             }
1:9f1b314:         });
1:9f1b314:     }
1:9f1b314: 
1:9f1b314:     /** Privileged wrapper for {@code ClassLoader.getSystemResource(String)}. */
1:9f1b314:     private static URL getSystemResource(final String name) {
1:9f1b314:         return AccessController.doPrivileged(new PrivilegedAction<URL>() {
1:9f1b314:             public URL run() {
1:9f1b314:                 return ClassLoader.getSystemResource(name);
1:9f1b314:             }
1:9f1b314:         });
1:9f1b314:     }
1:9f1b314: 
1:0f43aec:     /**
1:0f43aec:      * Privileged wrapper for {@code ClassLoader.getResourceAsStream(String)}.
1:0f43aec:      */
1:0f43aec:     private static InputStream getResourceAsStream(
1:0f43aec:             final ClassLoader cl, final String name) {
1:0f43aec:         return AccessController.doPrivileged(
1:0f43aec:                 new PrivilegedAction<InputStream>() {
1:0f43aec:             public InputStream run() {
1:0f43aec:                 return cl.getResourceAsStream(name);
1:0f43aec:             }
1:0f43aec:         });
1:0f43aec:     }
1:0f43aec: 
1:0f43aec:     /**
1:0f43aec:      * Privileged wrapper for
1:0f43aec:      * {@code ClassLoader.getSystemResourceAsStream(String)}.
1:0f43aec:      */
1:0f43aec:     private static InputStream getSystemResourceAsStream(final String name) {
1:0f43aec:         return AccessController.doPrivileged(
1:0f43aec:                 new PrivilegedAction<InputStream>() {
1:0f43aec:             public InputStream run() {
1:0f43aec:                 return ClassLoader.getSystemResourceAsStream(name);
1:0f43aec:             }
1:0f43aec:         });
1:9f1b314:     }
1:747f261: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ccbbcd4
/////////////////////////////////////////////////////////////////////////
1: class CPFile extends InputStreamFile<CPStorageFactory>
commit:8ae4e15
/////////////////////////////////////////////////////////////////////////
1:     private URL getURL() {
1:             URL myURL = getResource(cl, path);
commit:0f43aec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         InputStream is = null;
1:         ClassLoader cl = getContextClassLoader(Thread.currentThread());
1:         if (cl != null) {
1:             is = getResourceAsStream(cl, path);
1:         }
1:         // don't assume the context class loader is tied
1:         // into the class loader that loaded this class.
1:         if (is == null) {
1:             cl = getClass().getClassLoader();
1:             // Javadoc indicates implementations can use
1:             // null as a return from Class.getClassLoader()
1:             // to indicate the system/bootstrap classloader.
1:             if (cl != null) {
1:                 is = getResourceAsStream(cl, path);
1:             } else {
1:                 is = getSystemResourceAsStream(path);
1:             }
1:         }
1: 
1:         if (is == null) {
1:         return is;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Privileged wrapper for {@code ClassLoader.getResourceAsStream(String)}.
1:      */
1:     private static InputStream getResourceAsStream(
1:             final ClassLoader cl, final String name) {
1:         return AccessController.doPrivileged(
1:                 new PrivilegedAction<InputStream>() {
1:             public InputStream run() {
1:                 return cl.getResourceAsStream(name);
1:             }
1:         });
1:     }
1: 
1:     /**
1:      * Privileged wrapper for
1:      * {@code ClassLoader.getSystemResourceAsStream(String)}.
1:      */
1:     private static InputStream getSystemResourceAsStream(final String name) {
1:         return AccessController.doPrivileged(
1:                 new PrivilegedAction<InputStream>() {
1:             public InputStream run() {
1:                 return ClassLoader.getSystemResourceAsStream(name);
1:             }
1:         });
commit:9f1b314
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
0: import java.security.PrivilegedActionException;
0: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
0:         URL url = getURL();
1: 
0:         if (url == null) {
1:             throw new FileNotFoundException(toString());
1:         }
1: 
0:         try {
0:             return openStream(url);
0:         } catch (FileNotFoundException fnf) {
0:             throw fnf;
0:         } catch (IOException ioe) {
0:             FileNotFoundException fnf = new FileNotFoundException(toString());
0:             fnf.initCause(ioe);
0:             throw fnf;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         ClassLoader cl = getContextClassLoader(Thread.currentThread());
0:             myURL = getResource(cl, path);
/////////////////////////////////////////////////////////////////////////
1:             return getResource(cl, path);
1:             return getSystemResource(path);
1:         }
1:     }
1: 
1:     /** Privileged wrapper for {@code Thread.getContextClassLoader()}. */
1:     private static ClassLoader getContextClassLoader(final Thread thread) {
1:         return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
1:             public ClassLoader run() {
1:                 return thread.getContextClassLoader();
1:             }
1:         });
1:     }
1: 
1:     /** Privileged wrapper for {@code ClassLoader.getResource(String)}. */
1:     private static URL getResource(
1:             final ClassLoader cl, final String name) {
1:         return AccessController.doPrivileged(new PrivilegedAction<URL>() {
1:             public URL run() {
1:                 return cl.getResource(name);
1:             }
1:         });
1:     }
1: 
1:     /** Privileged wrapper for {@code ClassLoader.getSystemResource(String)}. */
1:     private static URL getSystemResource(final String name) {
1:         return AccessController.doPrivileged(new PrivilegedAction<URL>() {
1:             public URL run() {
1:                 return ClassLoader.getSystemResource(name);
1:             }
1:         });
1:     }
1: 
0:     /** Privileged wrapper for {@code URL.openStream()}. */
0:     private static InputStream openStream(final URL url) throws IOException {
0:         try {
0:             return AccessController.doPrivileged(
0:                     new PrivilegedExceptionAction<InputStream>() {
0:                 public InputStream run() throws IOException {
0:                     return url.openStream();
1:                 }
1:             });
0:         } catch (PrivilegedActionException pae) {
0:             throw (IOException) pae.getCause();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e23ae38
/////////////////////////////////////////////////////////////////////////
commit:2724c48
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:747f261
/////////////////////////////////////////////////////////////////////////
0: import java.net.MalformedURLException;
1: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
1:     	return getURL() != null;
/////////////////////////////////////////////////////////////////////////
1:     
1: 	/**
1:      * Return a URL for this file (resource).
1:      * 
0:      * @see org.apache.derby.io.StorageFile#getURL()
1:      */
0:     public URL getURL() {
1: 
0:         ClassLoader cl = Thread.currentThread().getContextClassLoader();
0:         URL myURL;
1:         if (cl != null) {
0:             myURL = cl.getResource(path);
1:             if (myURL != null)
1:                 return myURL;
1:         }
1: 
1:         // don't assume the context class loader is tied
1:         // into the class loader that loaded this class.
1:         cl = getClass().getClassLoader();
1:         // Javadoc indicates implementations can use
1:         // null as a return from Class.getClassLoader()
1:         // to indicate the system/bootstrap classloader.
1:         if (cl != null) {
0:             return cl.getResource(path);
1:         } else {
0:             return ClassLoader.getSystemResource(path);
1:         }
1:     }
commit:bf4839e
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  
/////////////////////////////////////////////////////////////////////////
0:     	ClassLoader cl = Thread.currentThread().getContextClassLoader();
0:     	if (cl != null)
0:     		if (cl.getResource(path) != null)
0:     			return true;
0:     	// don't assume the context class loader is tied
0:     	// into the class loader that loaded this class.
0:     	cl = getClass().getClassLoader();
0: 		// Javadoc indicates implementations can use
0: 		// null as a return from Class.getClassLoader()
0: 		// to indicate the system/bootstrap classloader.
0:     	if (cl != null)
1:     	{
0:     		return (cl.getResource(path) != null);
1:     	}
0:     	else
1:     	{
0:     		return ClassLoader.getSystemResource(path) != null;
1:     	}
/////////////////////////////////////////////////////////////////////////
0:     	//System.out.println("HERE FOR " + toString());
0:     	InputStream is = null;
0:     	ClassLoader cl = Thread.currentThread().getContextClassLoader();
0:     	if (cl != null)
0:     		is = cl.getResourceAsStream(path);
1:     	
0:        	// don't assume the context class loader is tied
0:     	// into the class loader that loaded this class.
0:     	if (is == null)
1:     	{
0:     		cl = getClass().getClassLoader();
0:     		// Javadoc indicates implementations can use
0:     		// null as a return from Class.getClassLoader()
0:     		// to indicate the system/bootstrap classloader.
0:     		if (cl != null)
0:     			is = cl.getResourceAsStream(path);
0:     		else
0:     			is = ClassLoader.getSystemResourceAsStream(path);
1:     	}
1:     	
0:     	if (is == null)
0:     		throw new FileNotFoundException(toString());
0:     	return is;
1:     	
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.io.CPFile
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.io;
1: 
1: import org.apache.derby.io.StorageFile;
0: import org.apache.derby.io.StorageRandomAccessFile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.io.IOException;
1: import java.io.FileNotFoundException;
1: 
1: /**
1:  * This class provides a class path based implementation of the StorageFile interface. It is used by the
1:  * database engine to access persistent data and transaction logs under the classpath subsubprotocol.
1:  */
0: class CPFile extends InputStreamFile
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
0:     private final CPStorageFactory storageFactory;
0:     private int actionCode;
0:     private static final int EXISTS_ACTION = 1;
1: 
1:     CPFile( CPStorageFactory storageFactory, String path)
1:     {
1:         super( storageFactory, path);
0:         this.storageFactory = storageFactory;
0:     }
1: 
1:     CPFile( CPStorageFactory storageFactory, String parent, String name)
1:     {
1:         super( storageFactory, parent, name);
0:         this.storageFactory = storageFactory;
0:     }
1: 
1:     CPFile( CPFile dir, String name)
1:     {
1:         super( dir,name);
0:         this.storageFactory = dir.storageFactory;
0:     }
1: 
1:     private CPFile( CPStorageFactory storageFactory, String child, int pathLen)
1:     {
1:         super( storageFactory, child, pathLen);
0:         this.storageFactory = storageFactory;
0:     }
1: 
1:     /**
1:      * Tests whether the named file exists.
1:      *
1:      * @return <b>true</b> if the named file exists, <b>false</b> if not.
1:      */
1:     public boolean exists()
1:     {
0:         if( storageFactory.useContextLoader)
1:         {
0:             ClassLoader cl = Thread.currentThread().getContextClassLoader();
0:             if( cl != null && cl.getResource( path) != null)
0:                 return true;
0:         }
0:         if( getClass().getResource( path) != null)
1:         {
0:             if( storageFactory.useContextLoader)
0:                 storageFactory.useContextLoader = false;
0:             return true;
0:         }
0:         return false;
1:     } // end of exists
1: 
1:     /**
1:      * Get the parent of this file.
1:      *
1:      * @param pathLen the length of the parent's path name.
1:      */
1:     StorageFile getParentDir( int pathLen)
1:     {
1:         return new CPFile( storageFactory, path, pathLen);
0:     }
1:     
1:     /**
1:      * Creates an input stream from a file name.
1:      *
1:      * @return an input stream suitable for reading from the file.
1:      *
1:      * @exception FileNotFoundException if the file is not found.
1:      */
1:     public InputStream getInputStream( ) throws FileNotFoundException
1:     {
0:         InputStream is = null;
0:         if( storageFactory.useContextLoader)
1:         {
0:             ClassLoader cl = Thread.currentThread().getContextClassLoader();
0:             is = cl.getResourceAsStream( path);
0:             if( is != null)
0:                 return is;
0:         }
0:         is = getClass().getResourceAsStream( path);
0:         if( is != null && storageFactory.useContextLoader)
0:             storageFactory.useContextLoader = false;
0:         if( is == null)
0:             throw new FileNotFoundException( "Not in class path: " + path);
0:         return is;
1:     } // end of getInputStream
0: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.io;
0: 
0: import org.apache.derby.io.StorageFile;
0: import org.apache.derby.io.StorageRandomAccessFile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.io.IOException;
0: import java.io.FileNotFoundException;
0: 
0: /**
0:  * This class provides a class path based implementation of the StorageFile interface. It is used by the
0:  * database engine to access persistent data and transaction logs under the classpath subsubprotocol.
0:  */
0: class CPFile extends InputStreamFile
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0:     private final CPStorageFactory storageFactory;
0:     private int actionCode;
0:     private static final int EXISTS_ACTION = 1;
0: 
0:     CPFile( CPStorageFactory storageFactory, String path)
0:     {
0:         super( storageFactory, path);
0:         this.storageFactory = storageFactory;
0:     }
0: 
0:     CPFile( CPStorageFactory storageFactory, String parent, String name)
0:     {
0:         super( storageFactory, parent, name);
0:         this.storageFactory = storageFactory;
0:     }
0: 
0:     CPFile( CPFile dir, String name)
0:     {
0:         super( dir,name);
0:         this.storageFactory = dir.storageFactory;
0:     }
0: 
0:     private CPFile( CPStorageFactory storageFactory, String child, int pathLen)
0:     {
0:         super( storageFactory, child, pathLen);
0:         this.storageFactory = storageFactory;
0:     }
0: 
0:     /**
0:      * Tests whether the named file exists.
0:      *
0:      * @return <b>true</b> if the named file exists, <b>false</b> if not.
0:      */
0:     public boolean exists()
0:     {
0:         if( storageFactory.useContextLoader)
0:         {
0:             ClassLoader cl = Thread.currentThread().getContextClassLoader();
0:             if( cl != null && cl.getResource( path) != null)
0:                 return true;
0:         }
0:         if( getClass().getResource( path) != null)
0:         {
0:             if( storageFactory.useContextLoader)
0:                 storageFactory.useContextLoader = false;
0:             return true;
0:         }
0:         return false;
0:     } // end of exists
0: 
0:     /**
0:      * Get the parent of this file.
0:      *
0:      * @param pathLen the length of the parent's path name.
0:      */
0:     StorageFile getParentDir( int pathLen)
0:     {
0:         return new CPFile( storageFactory, path, pathLen);
0:     }
0:     
0:     /**
0:      * Creates an input stream from a file name.
0:      *
0:      * @return an input stream suitable for reading from the file.
0:      *
0:      * @exception FileNotFoundException if the file is not found.
0:      */
0:     public InputStream getInputStream( ) throws FileNotFoundException
0:     {
0:         InputStream is = null;
0:         if( storageFactory.useContextLoader)
0:         {
0:             ClassLoader cl = Thread.currentThread().getContextClassLoader();
0:             is = cl.getResourceAsStream( path);
0:             if( is != null)
0:                 return is;
0:         }
0:         is = getClass().getResourceAsStream( path);
0:         if( is != null && storageFactory.useContextLoader)
0:             storageFactory.useContextLoader = false;
0:         if( is == null)
0:             throw new FileNotFoundException( "Not in class path: " + path);
0:         return is;
0:     } // end of getInputStream
0: }
============================================================================