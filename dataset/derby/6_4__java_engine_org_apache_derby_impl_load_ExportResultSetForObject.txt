1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.load.ExportResultSetForObject
1:345de35: 
1:6d913c6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6d913c6:    contributor license agreements.  See the NOTICE file distributed with
1:6d913c6:    this work for additional information regarding copyright ownership.
1:6d913c6:    The ASF licenses this file to You under the Apache License, Version 2.0
1:6d913c6:    (the "License"); you may not use this file except in compliance with
1:6d913c6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
14:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.load;
1:eac0369: 
1:eac0369: import java.sql.Connection;
1:eac0369: import java.sql.Statement;
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.ResultSetMetaData;
1:c47d471: import java.sql.DatabaseMetaData;
1:c47d471: import java.sql.SQLException;
1:ccc1b8d: import org.apache.derby.iapi.util.IdUtil;
1:eac0369: 
2:eac0369: //uses the passed connection and table/view name to make the resultset on
1:eac0369: //that entity. If the entity to be exported has non-sql types in it, an
1:eac0369: //exception will be thrown
1:eac0369: class ExportResultSetForObject {
1:eac0369: 
1:c47d471:     private Connection con;
1:c47d471:     private String selectQuery;
1:c47d471:     private ResultSet rs;
1:c47d471:     private int columnCount;
1:c47d471:     private String columnNames[];
1:c47d471:     private String columnTypes[];
1:c47d471:     private int columnLengths[];
1:eac0369: 
1:c47d471:     private Statement expStmt = null; 
1:c47d471:     private String schemaName;
1:c47d471:     private String tableName;
1:eac0369: 
1:c47d471: 	/* set up the connection and table/view name or the select query
1:c47d471: 	 * to make the result set, whose data is exported. 
1:c47d471: 	 **/
1:eac0369: 	public ExportResultSetForObject(Connection con, String schemaName, 
1:c47d471: 									String tableName, String selectQuery 
1:eac0369: 									) 
3:eac0369: 	{
1:eac0369: 		this.con = con;
1:c47d471: 		if( selectQuery == null)
1:c47d471: 		{
1:c47d471: 			this.schemaName = schemaName;
1:c47d471: 			this.tableName = tableName;
1:c47d471: 			
1:c47d471: 			// delimit schema Name and table Name using quotes because
1:c47d471: 			// they can be case-sensitive names or SQL reserved words. Export
1:c47d471: 			// procedures are expected to be called with case-senisitive names. 
1:c47d471: 			// undelimited names are passed in upper case, because that is
1:c47d471: 			// the form database stores them. 
1:c47d471: 			
1:ccc1b8d: 			this.selectQuery = "select * from " +
1:ccc1b8d:                     IdUtil.mkQualifiedName(schemaName, tableName);
1:c47d471: 		}
1:c47d471:         else
1:c47d471: 		{
1:c47d471: 			this.selectQuery = selectQuery;
1:c47d471: 		}
9:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:c47d471:     public ResultSet getResultSet() throws SQLException {
1:c47d471:         rs = null;
1:c47d471:         //execute the select query and keep it's meta data info ready
1:c47d471:         expStmt = con.createStatement();
1:c47d471:         rs = expStmt.executeQuery(selectQuery);
1:c47d471:         getMetaDataInfo();
1:c47d471:         return rs;
1:eac0369:       }
1:c47d471: 
1:c47d471: 
1:c47d471:     public int getColumnCount() {
1:c47d471:         return columnCount;
1:eac0369:     }
1:c47d471: 
1:c47d471:     public String[] getColumnDefinition() {
1:c47d471:         return columnNames;
1:c47d471:     }
1:c47d471: 
1:c47d471:     public String[] getColumnTypes() {
1:c47d471:         return columnTypes;
1:c47d471:     }
1:c47d471: 
1:c47d471:     public int[] getColumnLengths() {
1:c47d471:         return columnLengths;
1:c47d471:     }
1:c47d471: 
1:c47d471:     //if the entity to be exported has non-sql types in it, an exception will be thrown
1:c47d471:     private void getMetaDataInfo() throws SQLException {
1:c47d471:         ResultSetMetaData metaData = rs.getMetaData();
1:c47d471:         columnCount                = metaData.getColumnCount();
1:c47d471:         int numColumns             = columnCount;
1:c47d471:         columnNames                = new String[numColumns];
1:c47d471:         columnTypes                = new String[numColumns];
1:c47d471:         columnLengths              = new int[numColumns];
1:c47d471: 
1:c47d471:         for (int i=0; i<numColumns; i++) {
1:c47d471:             int jdbcTypeId = metaData.getColumnType(i+1);
1:c47d471:             columnNames[i] = metaData.getColumnName(i+1);
1:c47d471:             columnTypes[i] = metaData.getColumnTypeName(i+1);
1:c47d471:             if(!ColumnInfo.importExportSupportedType(jdbcTypeId))
1:c47d471:             {
1:c47d471:                 throw LoadError.nonSupportedTypeColumn(
1:c47d471:                             columnNames[i], columnTypes[i]); 
1:c47d471:             }
1:c47d471:          
1:c47d471:             columnLengths[i] = metaData.getColumnDisplaySize(i+1);
1:c47d471:         }
1:c47d471:     }
1:eac0369: 
1:eac0369: 	public void  close() throws Exception
1:eac0369: 	{
1:eac0369: 		if(expStmt !=null)
1:eac0369: 			expStmt.close();
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ccc1b8d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.IdUtil;
/////////////////////////////////////////////////////////////////////////
1: 			this.selectQuery = "select * from " +
1:                     IdUtil.mkQualifiedName(schemaName, tableName);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:6d913c6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:c47d471
/////////////////////////////////////////////////////////////////////////
1: import java.sql.DatabaseMetaData;
1: import java.sql.SQLException;
1:     private Connection con;
1:     private String selectQuery;
1:     private ResultSet rs;
1:     private int columnCount;
1:     private String columnNames[];
1:     private String columnTypes[];
1:     private int columnLengths[];
1:     private Statement expStmt = null; 
1:     private String schemaName;
1:     private String tableName;
1: 	/* set up the connection and table/view name or the select query
1: 	 * to make the result set, whose data is exported. 
1: 	 **/
1: 									String tableName, String selectQuery 
1: 		if( selectQuery == null)
1: 		{
1: 			this.schemaName = schemaName;
1: 			this.tableName = tableName;
1: 			
1: 			// delimit schema Name and table Name using quotes because
1: 			// they can be case-sensitive names or SQL reserved words. Export
1: 			// procedures are expected to be called with case-senisitive names. 
1: 			// undelimited names are passed in upper case, because that is
1: 			// the form database stores them. 
1: 			
0: 			this.selectQuery = "select * from " + 
0: 				(schemaName == null ? "\"" + tableName + "\"" : 
0: 				 "\"" + schemaName + "\"" + "." + "\"" + tableName + "\""); 
1: 		}
1:         else
1: 		{
1: 			this.selectQuery = selectQuery;
1: 		}
1:     public ResultSet getResultSet() throws SQLException {
1:         rs = null;
1:         //execute the select query and keep it's meta data info ready
1:         expStmt = con.createStatement();
1:         rs = expStmt.executeQuery(selectQuery);
1:         getMetaDataInfo();
1:         return rs;
1: 
1: 
1:     public int getColumnCount() {
1:         return columnCount;
1: 
1:     public String[] getColumnDefinition() {
1:         return columnNames;
1:     }
1: 
1:     public String[] getColumnTypes() {
1:         return columnTypes;
1:     }
1: 
1:     public int[] getColumnLengths() {
1:         return columnLengths;
1:     }
1: 
1:     //if the entity to be exported has non-sql types in it, an exception will be thrown
1:     private void getMetaDataInfo() throws SQLException {
1:         ResultSetMetaData metaData = rs.getMetaData();
1:         columnCount                = metaData.getColumnCount();
1:         int numColumns             = columnCount;
1:         columnNames                = new String[numColumns];
1:         columnTypes                = new String[numColumns];
1:         columnLengths              = new int[numColumns];
1: 
1:         for (int i=0; i<numColumns; i++) {
1:             int jdbcTypeId = metaData.getColumnType(i+1);
1:             columnNames[i] = metaData.getColumnName(i+1);
1:             columnTypes[i] = metaData.getColumnTypeName(i+1);
1:             if(!ColumnInfo.importExportSupportedType(jdbcTypeId))
1:             {
1:                 throw LoadError.nonSupportedTypeColumn(
1:                             columnNames[i], columnTypes[i]); 
1:             }
1:          
1:             columnLengths[i] = metaData.getColumnDisplaySize(i+1);
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.load.ExportResultSetForObject
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.load;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: 
1: //uses the passed connection and table/view name to make the resultset on
1: //that entity. If the entity to be exported has non-sql types in it, an
1: //exception will be thrown
1: class ExportResultSetForObject {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
0:   private Connection con;
0:   private String entityName;
0:   private String selectStatement;
0:   private ResultSet rs;
0:   private int columnCount;
0:   private String columnNames[];
0:   private String columnTypes[];
0:   private int columnLengths[];
1: 
0: 	private Statement expStmt = null; 
1: 
1: 	//uses the passed connection and table/view name to make the resultset on
0: 	//that entity.
1: 	public ExportResultSetForObject(Connection con, String schemaName, 
0: 									String tableName, String selectStatement 
1: 									) 
1: 	{
1: 		this.con = con;
0: 		if( selectStatement == null)
0: 			this.entityName = (schemaName == null ? tableName : schemaName + "." + tableName); 
0: 		this.selectStatement = selectStatement;
1: 	}
1: 
1: 
0:   public ResultSet getResultSet() throws Exception {
0:     rs = null;
0:     String queryString = getQuery();
0:     //execute select on passed enitity and keep it's meta data info ready
0:     Statement expStmt = con.createStatement();
0:     rs = expStmt.executeQuery(queryString);
0:     getMetaDataInfo();
0:     return rs;
1:   }
1: 
0:   public String getQuery(){
0: 	  if(selectStatement != null)
0: 		  return selectStatement;
0: 	  else
1: 	  {
0: 		  selectStatement = "select * from " + entityName;
0: 		  return selectStatement;
1: 	  }
1:   }
1: 
0:   public int getColumnCount() {
0:     return columnCount;
1:   }
1: 
0:   public String[] getColumnDefinition() {
0:     return columnNames;
1:   }
1: 
0:   public String[] getColumnTypes() {
0:     return columnTypes;
1:   }
1: 
0:   public int[] getColumnLengths() {
0:     return columnLengths;
1:   }
1: 
0:   //if the entity to be exported has non-sql types in it, an exception will be thrown
0:   private void getMetaDataInfo() throws Exception {
0:     ResultSetMetaData metaData = rs.getMetaData();
0:     columnCount = metaData.getColumnCount();
0: 	  int numColumns = columnCount;
0:     columnNames = new String[numColumns];
0: 	columnTypes = new String[numColumns];
0:     columnLengths = new int[numColumns];
0:     for (int i=0; i<numColumns; i++) {
0: 	  int jdbcTypeId = metaData.getColumnType(i+1);
0: 	  columnNames[i] = metaData.getColumnName(i+1);
0: 	  columnTypes[i] = metaData.getColumnTypeName(i+1);
0: 	  if(!ColumnInfo.importExportSupportedType(jdbcTypeId))
1: 	  {
0: 		  throw LoadError.nonSupportedTypeColumn(columnNames[i],
0: 												 columnTypes[i]); 
1:       }
1:       	 
0:       columnLengths[i] = metaData.getColumnDisplaySize(i+1);
1:     }
1:   }
1: 
1: 	public void  close() throws Exception
1: 	{
1: 		if(expStmt !=null)
1: 			expStmt.close();
1: 	}
1: }
1: 
1: 
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.load;
0: 
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: 
0: //uses the passed connection and table/view name to make the resultset on
0: //that entity. If the entity to be exported has non-sql types in it, an
0: //exception will be thrown
0: class ExportResultSetForObject {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:   private Connection con;
0:   private String entityName;
0:   private String selectStatement;
0:   private ResultSet rs;
0:   private int columnCount;
0:   private String columnNames[];
0:   private String columnTypes[];
0:   private int columnLengths[];
0: 
0: 	private Statement expStmt = null; 
0: 
0: 	//uses the passed connection and table/view name to make the resultset on
0: 	//that entity.
0: 	public ExportResultSetForObject(Connection con, String schemaName, 
0: 									String tableName, String selectStatement 
0: 									) 
0: 	{
0: 		this.con = con;
0: 		if( selectStatement == null)
0: 			this.entityName = (schemaName == null ? tableName : schemaName + "." + tableName); 
0: 		this.selectStatement = selectStatement;
0: 	}
0: 
0: 
0:   public ResultSet getResultSet() throws Exception {
0:     rs = null;
0:     String queryString = getQuery();
0:     //execute select on passed enitity and keep it's meta data info ready
0:     Statement expStmt = con.createStatement();
0:     rs = expStmt.executeQuery(queryString);
0:     getMetaDataInfo();
0:     return rs;
0:   }
0: 
0:   public String getQuery(){
0: 	  if(selectStatement != null)
0: 		  return selectStatement;
0: 	  else
0: 	  {
0: 		  selectStatement = "select * from " + entityName;
0: 		  return selectStatement;
0: 	  }
0:   }
0: 
0:   public int getColumnCount() {
0:     return columnCount;
0:   }
0: 
0:   public String[] getColumnDefinition() {
0:     return columnNames;
0:   }
0: 
0:   public String[] getColumnTypes() {
0:     return columnTypes;
0:   }
0: 
0:   public int[] getColumnLengths() {
0:     return columnLengths;
0:   }
0: 
0:   //if the entity to be exported has non-sql types in it, an exception will be thrown
0:   private void getMetaDataInfo() throws Exception {
0:     ResultSetMetaData metaData = rs.getMetaData();
0:     columnCount = metaData.getColumnCount();
0: 	  int numColumns = columnCount;
0:     columnNames = new String[numColumns];
0: 	columnTypes = new String[numColumns];
0:     columnLengths = new int[numColumns];
0:     for (int i=0; i<numColumns; i++) {
0: 	  int jdbcTypeId = metaData.getColumnType(i+1);
0: 	  columnNames[i] = metaData.getColumnName(i+1);
0: 	  columnTypes[i] = metaData.getColumnTypeName(i+1);
0: 	  if(!ColumnInfo.importExportSupportedType(jdbcTypeId))
0: 	  {
0: 		  throw LoadError.nonSupportedTypeColumn(columnNames[i],
0: 												 columnTypes[i]); 
0:       }
0:       	 
0:       columnLengths[i] = metaData.getColumnDisplaySize(i+1);
0:     }
0:   }
0: 
0: 	public void  close() throws Exception
0: 	{
0: 		if(expStmt !=null)
0: 			expStmt.close();
0: 	}
0: }
0: 
0: 
0: 
0: 
0: 
============================================================================