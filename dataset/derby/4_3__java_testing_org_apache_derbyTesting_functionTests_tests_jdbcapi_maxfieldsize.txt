1:6de7104: /*
6:6de7104: 
1:6de7104:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.maxfieldsize
1:6de7104: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:6de7104: 
1:6de7104:       http://www.apache.org/licenses/LICENSE-2.0
1:6de7104: 
1:6de7104:    Unless required by applicable law or agreed to in writing, software
1:6de7104:    distributed under the License is distributed on an "AS IS" BASIS,
1:6de7104:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6de7104:    See the License for the specific language governing permissions and
1:6de7104:    limitations under the License.
1:6de7104: 
1:6de7104:  */
1:6de7104: 
1:6de7104: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:6de7104: import java.sql.Connection;
1:6de7104: import java.sql.DriverManager;
1:6de7104: import java.sql.PreparedStatement;
1:6de7104: import java.sql.ResultSetMetaData;
1:6de7104: import java.sql.ResultSet;
1:6de7104: import java.sql.Statement;
1:6de7104: import java.sql.SQLException;
1:6de7104: import java.sql.Types;
1:6de7104: import java.sql.PreparedStatement;
1:6de7104: import java.io.*;
1:6de7104: 
1:6de7104: import org.apache.derby.tools.ij;
1:6de7104: import org.apache.derby.tools.JDBCDisplayUtil;
1:0bbfdac: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:6de7104: 
1:6de7104: /**
1:6de7104:  *This Program Test SetMaxFieldsize()/getMaxFieldsize().
1:6de7104:  *and the getXXX calls that are affected.
1:6de7104:  */
1:6de7104: 
1:6de7104: public class maxfieldsize { 
1:6de7104: 
1:6de7104: 	static final int START_SECOND_HALF = 5;
1:6de7104: 	static final int NUM_EXECUTIONS = 2 * START_SECOND_HALF;
1:6de7104: 
1:6de7104:     static final String c1_value="C1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104:     static final String c2_value="C2XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104:     static final String c3_value="C3XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104:     static final String c4_value="C4XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104:     static final String c5_value="C5XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104:     static final String c6_value="C6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:6de7104: 	
1:6de7104: 	static private boolean isDerbyNet = false;
1:6de7104:    
1:6de7104: 	public static void main(String[] args) {
1:6de7104: 		Connection conn;
1:6de7104: 		Statement stmt;
1:6de7104: 
1:5ff5941: 		// start by cleaning up, just in case
1:5ff5941: 		String[] testObjects = {"table tab1", "table tab2"};
1:5ff5941: 		
1:5ff5941: 
1:6de7104: 		System.out.println("Test MaxFieldSize  starting");
1:6de7104: 
1:0bbfdac: 		isDerbyNet = TestUtil.isNetFramework();
1:6de7104: 		try
1:6de7104: 		{
1:6de7104: 			// use the ij utility to read the property file and
1:6de7104: 			// make the initial connection.
1:6de7104: 			 ij.getPropertyArg(args);
1:6de7104: 			 conn = ij.startJBMS();
1:6de7104: 			 stmt = conn.createStatement();
1:d029255: 
1:6de7104:             //create a table, insert a row, do a select from the table,
1:6de7104: 			 stmt.execute("create table tab1("+
1:6de7104:                                            "c1 char(100) for bit data,"+
1:6de7104:                                            "c2 varchar(100) for bit data," +
1:6de7104:                                            "c3 long varchar for bit data,"+
1:6de7104:                                            "c4 char(100),"+ 
1:6de7104:                                            "c5 varchar(100),"+
1:6de7104:                                            "c6 long varchar)");
1:6de7104:             // load some data into this table ..
1:6de7104:             load_data(conn);
1:6de7104: 
1:6de7104:             // read the data   of each type with all the possible functions
1:6de7104:             int loop = 0;
1:6de7104:             while (loop < NUM_EXECUTIONS )
1:6de7104:             {
1:6de7104: 				if (loop == START_SECOND_HALF)
1:6de7104: 				{
1:6de7104: 					stmt.setMaxFieldSize(24);
1:6de7104: 				}
1:5ff5941: 
1:6de7104: 				System.out.println("Iteration #: " + loop);
1:6de7104: 	            System.out.println("Max Field Size = "  + stmt.getMaxFieldSize());
1:d029255: 				ResultSet rs = stmt.executeQuery("select * from tab1");
1:6de7104:                 while (rs.next())
1:6de7104:                 {
1:6de7104:                     for(int i=1 ; i < 7 ; i++)
1:6de7104:                     {
1:6de7104: 						System.out.println("Column #: " + i);
1:6de7104: 						switch (loop % START_SECOND_HALF)
1:6de7104: 						{
1:6de7104: 							case 0:
1:6de7104: 		                        connectionJdbc20.get_using_object(rs, i);
1:6de7104: 								break;
1:6de7104: 
1:6de7104: 							case 1:
1:6de7104: 								if (isDerbyNet)
1:6de7104: 									System.out.println("beetle 5350 - JCC returns incorrect result for maxfieldsize()");
1:6de7104: 								connectionJdbc20.get_using_string(rs, i);
1:6de7104: 								break;
1:6de7104: 
1:6de7104: 							case 2:
1:6de7104: 								connectionJdbc20.get_using_ascii_stream(rs, i);
1:6de7104: 								break;
1:6de7104: 
1:6de7104: 							case 3:
1:6de7104: 		                        if(i < 4 ) // only c1 , c2, c3
1:6de7104: 				                {
1:6de7104: 						            connectionJdbc20.get_using_binary_stream(rs, i);
1:6de7104: 								}
1:6de7104: 								else
1:6de7104: 								{
1:6de7104: 									System.out.println("SKIPPING");
1:6de7104: 								}
1:6de7104: 								break;
1:6de7104: 
1:6de7104: 							case 4:
1:6de7104: 		                        if(i < 4 ) // only c1 , c2, c3
1:6de7104: 				                {
1:6de7104: 								    connectionJdbc20.get_using_bytes(rs, i);
1:6de7104: 								}
1:6de7104: 								else
1:6de7104: 								{
1:6de7104: 									System.out.println("SKIPPING");
1:6de7104: 								}
1:6de7104: 								break;
1:6de7104: 						}
1:6de7104:                     } 
1:6de7104:                 }
1:6de7104:                 rs.close();
1:6de7104:                 loop++;
1:6de7104:             }
1:6de7104:             // make sure that we throw exception for invalid values
1:6de7104:             try{
1:6de7104:                 // negative value should throw an exception
1:6de7104:                 stmt.setMaxFieldSize(-200);
1:6de7104:             } catch (SQLException e) {
1:6de7104: 				if ((e.getMessage() != null &&
1:6de7104: 					 e.getMessage().indexOf("Invalid maxFieldSize value") >= 0)
1:6de7104: 					|| (e.getSQLState() != null &&
1:6de7104: 						(e.getSQLState().equals("XJ066"))))
1:6de7104: 					System.out.println("Expected Exception - Invalid maxFieldsize");
1:6de7104: 				else System.out.println("Unexpected FAILURE at " +e);
1:6de7104:             }
1:6de7104:             // zero is valid value -- which means unlimited
1:6de7104:             stmt.setMaxFieldSize(0);
1:6de7104: 
1:6de7104: 			// Do an external sort (forced via properties file),
1:6de7104: 			// verifying that streams work correctly
1:6de7104: 			System.out.println("Doing external sort");
1:6de7104: 
1:6de7104: 			testSort(conn, stmt);
1:5ff5941: 
1:6de7104: 			stmt.close();
1:6de7104: 			conn.close();
1:6de7104: 
1:6de7104: 		}
1:6de7104: 		catch (SQLException e) {
1:6de7104: 			dumpSQLExceptions(e);
1:6de7104: 			e.printStackTrace();
1:6de7104: 		}
1:6de7104: 		catch (Throwable e) {
1:6de7104: 			System.out.println("FAIL -- unexpected exception: "+e);
1:6de7104: 			e.printStackTrace();
1:6de7104: 		}
1:6de7104: 
1:6de7104: 		System.out.println("Test maxfieldsize  finished");
1:6de7104:     }
1:6de7104: 
1:6de7104: 
1:6de7104:     static private void load_data(Connection conn) throws Exception{
1:6de7104:         PreparedStatement pstmt = null;
1:6de7104: 
1:6de7104:         try{
1:6de7104:             pstmt = conn.prepareStatement(
1:6de7104:                      "insert into tab1 values(?,?,?,?,?,?)");
1:6de7104: 
1:6de7104:             pstmt.setBytes(1, c1_value.getBytes("US-ASCII"));
1:6de7104:             pstmt.setBytes(2, c2_value.getBytes("US-ASCII"));
1:6de7104:             pstmt.setBytes(3, c3_value.getBytes("US-ASCII"));
1:6de7104:             pstmt.setString(4, c4_value);
1:6de7104:             pstmt.setString(5, c5_value);
1:6de7104:             pstmt.setString(6, c6_value);
1:6de7104:             pstmt.execute();
1:6de7104:         }
1:6de7104: 		catch(SQLException e)
1:6de7104: 		{
1:6de7104: 			dumpSQLExceptions(e);
1:6de7104: 			e.printStackTrace();
1:6de7104:         }
1:6de7104: 		catch(Throwable e )
1:6de7104: 		{
1:6de7104: 			System.out.println("Fail -- unexpected exception ");
1:6de7104: 			e.printStackTrace();
1:6de7104:         }
1:6de7104: 		finally
1:6de7104: 		{
1:6de7104:              pstmt.close();
1:6de7104:         }
1:6de7104:     }
1:6de7104: 
1:6de7104: 	private static void testSort(Connection conn, Statement stmt)
1:6de7104: 		throws SQLException, java.io.UnsupportedEncodingException
1:6de7104: 	{
1:6de7104: 		PreparedStatement insertPStmt;
1:6de7104: 
1:6de7104: 		// Load up a 2nd table using streams where appropriate
1:6de7104: 		stmt.execute("create table tab2("+
1:6de7104: 									   "c0 int, " +
1:6de7104:                                           "c1 char(100) for bit data,"+
1:6de7104:                                           "c2 varchar(100) for bit data," +
1:6de7104:                                           "c3 long varchar for bit data,"+
1:6de7104:                                           "c4 char(100),"+ 
1:6de7104:                                           "c5 varchar(100),"+
1:6de7104:                                           "c6 long varchar)");
1:6de7104: 
1:6de7104: 		// Populate the table
1:6de7104: 		insertPStmt = conn.prepareStatement(
1:6de7104: 						"insert into tab2 values (?, ?, ?, ?, ?, ?, ?)");
1:6de7104: 		for (int index = 0; index < 5000; index++)
1:6de7104: 		{
1:6de7104: 			insertPStmt.setInt(1, index);
1:6de7104:             insertPStmt.setBytes(2, c1_value.getBytes("US-ASCII"));
1:6de7104:             insertPStmt.setBytes(3, c2_value.getBytes("US-ASCII"));
1:6de7104:             insertPStmt.setBytes(4, c3_value.getBytes("US-ASCII"));
1:6de7104:             insertPStmt.setString(5, c4_value);
1:6de7104:             insertPStmt.setString(6, c5_value);
1:6de7104:             insertPStmt.setString(7, c6_value);
1:6de7104: 			insertPStmt.executeUpdate();
1:6de7104: 		}
1:6de7104: 
1:6de7104: 		insertPStmt.close();
1:6de7104: 
1:6de7104: 		// Do sort with maxFieldSize = 0
1:6de7104: 		doSort(stmt);
1:6de7104: 
1:6de7104: 		// Set maxFieldSize to 24 and do another sort
1:6de7104: 		stmt.setMaxFieldSize(24);
1:6de7104: 		doSort(stmt);
1:6de7104: 	}
1:6de7104: 
1:6de7104: 	private static void doSort(Statement stmt)
1:6de7104: 		throws SQLException
1:6de7104: 	{
1:6de7104: 		System.out.println("Max Field Size = "  + stmt.getMaxFieldSize());
1:6de7104: 
1:6de7104: 		try
1:6de7104: 		{
1:6de7104: 			/* Do a descending sort on 1st column, but only select
1:6de7104: 			 * out 1st and last 5 rows.  This should test streaming to/from
1:6de7104: 			 * a work table.
1:6de7104: 			 */
1:d029255: 			ResultSet rs = stmt.executeQuery("select * from tab2 order by c0 desc");
1:6de7104: 			for (int index = 0; index < 5000; index++)
1:6de7104: 			{
1:6de7104: 				rs.next();
1:6de7104: 				if (index < 5 || index >= 4995)
1:6de7104: 				{
1:6de7104: 					System.out.println("Iteration #: " + index);
1:6de7104: 					System.out.println("Column #1: " + rs.getInt(1));
1:6de7104: 					System.out.println("Column #2:");
1:6de7104: 					connectionJdbc20.get_using_binary_stream(rs, 2);
1:6de7104: 					System.out.println("Column #3:");
1:6de7104: 					connectionJdbc20.get_using_binary_stream(rs, 3);
1:6de7104: 					System.out.println("Column #4:");
1:6de7104: 					connectionJdbc20.get_using_binary_stream(rs, 4);
1:6de7104: 					System.out.println("Column #5:");
1:6de7104: 					connectionJdbc20.get_using_ascii_stream(rs, 5);
1:6de7104: 					System.out.println("Column #6:");
1:6de7104: 					connectionJdbc20.get_using_ascii_stream(rs, 6);
1:6de7104: 					System.out.println("Column #7:");
1:6de7104: 					connectionJdbc20.get_using_ascii_stream(rs, 7);
1:6de7104: 				}
1:6de7104: 			}
1:6de7104: 		}
1:6de7104: 		catch (SQLException e) 
1:6de7104: 		{
1:6de7104: 			throw e;
1:6de7104: 		}
1:6de7104: 		catch (Throwable e) {
1:6de7104: 			System.out.println("FAIL -- unexpected exception: "+e);
1:6de7104: 			e.printStackTrace();
1:6de7104: 		}
1:6de7104: 	}
1:6de7104: 
1:6de7104: 	static private void dumpSQLExceptions (SQLException se) {
1:6de7104: 		System.out.println("FAIL -- unexpected exception");
1:6de7104: 		while (se != null)
1:6de7104: 		{
1:6de7104: 			System.out.println("SQLSTATE("+se.getSQLState()+"): "+se);
1:6de7104: 			se = se.getNextException();
1:6de7104: 		}
1:6de7104: 	}
1:6de7104: 
1:6de7104: 	static private void dumpExpectedSQLExceptions (SQLException se) {
1:6de7104: 		System.out.println("PASS -- expected exception");
1:6de7104: 		while (se != null)
1:6de7104: 		{
1:6de7104: 			System.out.println("SQLSTATE("+se.getSQLState()+"): "+se);
1:6de7104: 			se = se.getNextException();
1:6de7104:         }
1:6de7104:     }
1:6de7104: 
1:5ff5941: 	static private void cleanUp(Connection conn) throws SQLException
1:5ff5941: 	{
1:5ff5941: 		
1:5ff5941: 	}
1:5ff5941: 
1:6de7104: 
1:6de7104: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d029255
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 				ResultSet rs = stmt.executeQuery("select * from tab1");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			ResultSet rs = stmt.executeQuery("select * from tab2 order by c0 desc");
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:5ff5941
/////////////////////////////////////////////////////////////////////////
1: 		// start by cleaning up, just in case
1: 		String[] testObjects = {"table tab1", "table tab2"};
1: 		
1: 
/////////////////////////////////////////////////////////////////////////
0: 			 TestUtil.cleanUpTest(stmt, testObjects);
/////////////////////////////////////////////////////////////////////////
0: 			TestUtil.cleanUpTest(stmt, testObjects);
1: 
/////////////////////////////////////////////////////////////////////////
1: 	static private void cleanUp(Connection conn) throws SQLException
1: 	{
1: 		
1: 	}
1: 
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:0bbfdac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
/////////////////////////////////////////////////////////////////////////
1: 		isDerbyNet = TestUtil.isNetFramework();
commit:6de7104
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.maxfieldsize
1: 
0:    Copyright 2000, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSetMetaData;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import java.sql.SQLException;
1: import java.sql.Types;
1: import java.sql.PreparedStatement;
1: import java.io.*;
1: 
1: import org.apache.derby.tools.ij;
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
1: /**
1:  *This Program Test SetMaxFieldsize()/getMaxFieldsize().
1:  *and the getXXX calls that are affected.
0:  * @author - suresht
1:  */
1: 
1: public class maxfieldsize { 
1:     
1:    
0:     public static ResultSet rs;
1: 
1: 	static final int START_SECOND_HALF = 5;
1: 	static final int NUM_EXECUTIONS = 2 * START_SECOND_HALF;
1: 
1:     static final String c1_value="C1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:     static final String c2_value="C2XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:     static final String c3_value="C3XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:     static final String c4_value="C4XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:     static final String c5_value="C5XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1:     static final String c6_value="C6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
1: 	
1: 	static private boolean isDerbyNet = false;
1:    
1: 	public static void main(String[] args) {
1: 		Connection conn;
1: 		Statement stmt;
1: 
1: 		System.out.println("Test MaxFieldSize  starting");
1: 
0: 		String framework = System.getProperty("framework");
0: 		if (framework != null && framework.toUpperCase().equals("DERBYNET"))
0: 			isDerbyNet = true;
1: 		
1: 		try
1: 		{
1: 			// use the ij utility to read the property file and
1: 			// make the initial connection.
1: 			 ij.getPropertyArg(args);
1: 			 conn = ij.startJBMS();
1: 			 stmt = conn.createStatement();
1:             //create a table, insert a row, do a select from the table,
1: 			 stmt.execute("create table tab1("+
1:                                            "c1 char(100) for bit data,"+
1:                                            "c2 varchar(100) for bit data," +
1:                                            "c3 long varchar for bit data,"+
1:                                            "c4 char(100),"+ 
1:                                            "c5 varchar(100),"+
1:                                            "c6 long varchar)");
1:             // load some data into this table ..
1:             load_data(conn);
1: 
1:             // read the data   of each type with all the possible functions
1:             int loop = 0;
1:             while (loop < NUM_EXECUTIONS )
1:             {
1: 				if (loop == START_SECOND_HALF)
1: 				{
1: 					stmt.setMaxFieldSize(24);
1: 				}
1: 
1: 				System.out.println("Iteration #: " + loop);
1: 	            System.out.println("Max Field Size = "  + stmt.getMaxFieldSize());
0: 				rs = stmt.executeQuery("select * from tab1");
1:                 while (rs.next())
1:                 {
1:                     for(int i=1 ; i < 7 ; i++)
1:                     {
1: 						System.out.println("Column #: " + i);
1: 						switch (loop % START_SECOND_HALF)
1: 						{
1: 							case 0:
1: 		                        connectionJdbc20.get_using_object(rs, i);
1: 								break;
1: 
1: 							case 1:
1: 								if (isDerbyNet)
1: 									System.out.println("beetle 5350 - JCC returns incorrect result for maxfieldsize()");
1: 								connectionJdbc20.get_using_string(rs, i);
1: 								break;
1: 
1: 							case 2:
1: 								connectionJdbc20.get_using_ascii_stream(rs, i);
1: 								break;
1: 
1: 							case 3:
1: 		                        if(i < 4 ) // only c1 , c2, c3
1: 				                {
1: 						            connectionJdbc20.get_using_binary_stream(rs, i);
1: 								}
1: 								else
1: 								{
1: 									System.out.println("SKIPPING");
1: 								}
1: 								break;
1: 
1: 							case 4:
1: 		                        if(i < 4 ) // only c1 , c2, c3
1: 				                {
1: 								    connectionJdbc20.get_using_bytes(rs, i);
1: 								}
1: 								else
1: 								{
1: 									System.out.println("SKIPPING");
1: 								}
1: 								break;
1: 						}
1:                     } 
1:                 }
1:                 rs.close();
1:                 loop++;
1:             }
1:             // make sure that we throw exception for invalid values
1:             try{
1:                 // negative value should throw an exception
1:                 stmt.setMaxFieldSize(-200);
1:             } catch (SQLException e) {
1: 				if ((e.getMessage() != null &&
1: 					 e.getMessage().indexOf("Invalid maxFieldSize value") >= 0)
1: 					|| (e.getSQLState() != null &&
1: 						(e.getSQLState().equals("XJ066"))))
1: 					System.out.println("Expected Exception - Invalid maxFieldsize");
1: 				else System.out.println("Unexpected FAILURE at " +e);
1:             }
1:             // zero is valid value -- which means unlimited
1:             stmt.setMaxFieldSize(0);
1: 
1: 			// Do an external sort (forced via properties file),
1: 			// verifying that streams work correctly
1: 			System.out.println("Doing external sort");
1: 
1: 			testSort(conn, stmt);
1: 
1: 			stmt.close();
1: 			conn.close();
1: 
1: 		}
1: 		catch (SQLException e) {
1: 			dumpSQLExceptions(e);
1: 			e.printStackTrace();
1: 		}
1: 		catch (Throwable e) {
1: 			System.out.println("FAIL -- unexpected exception: "+e);
1: 			e.printStackTrace();
1: 		}
1: 
1: 		System.out.println("Test maxfieldsize  finished");
1:     }
1: 
1: 
1:     static private void load_data(Connection conn) throws Exception{
1:         PreparedStatement pstmt = null;
1: 
1:         try{
1:             pstmt = conn.prepareStatement(
1:                      "insert into tab1 values(?,?,?,?,?,?)");
1: 
1:             pstmt.setBytes(1, c1_value.getBytes("US-ASCII"));
1:             pstmt.setBytes(2, c2_value.getBytes("US-ASCII"));
1:             pstmt.setBytes(3, c3_value.getBytes("US-ASCII"));
1:             pstmt.setString(4, c4_value);
1:             pstmt.setString(5, c5_value);
1:             pstmt.setString(6, c6_value);
1:             pstmt.execute();
1:         }
1: 		catch(SQLException e)
1: 		{
1: 			dumpSQLExceptions(e);
1: 			e.printStackTrace();
1:         }
1: 		catch(Throwable e )
1: 		{
1: 			System.out.println("Fail -- unexpected exception ");
1: 			e.printStackTrace();
1:         }
1: 		finally
1: 		{
1:              pstmt.close();
1:         }
1:     }
1: 
1: 	private static void testSort(Connection conn, Statement stmt)
1: 		throws SQLException, java.io.UnsupportedEncodingException
1: 	{
1: 		PreparedStatement insertPStmt;
1: 
1: 		// Load up a 2nd table using streams where appropriate
1: 		stmt.execute("create table tab2("+
1: 									   "c0 int, " +
1:                                           "c1 char(100) for bit data,"+
1:                                           "c2 varchar(100) for bit data," +
1:                                           "c3 long varchar for bit data,"+
1:                                           "c4 char(100),"+ 
1:                                           "c5 varchar(100),"+
1:                                           "c6 long varchar)");
1: 
1: 		// Populate the table
1: 		insertPStmt = conn.prepareStatement(
1: 						"insert into tab2 values (?, ?, ?, ?, ?, ?, ?)");
1: 		for (int index = 0; index < 5000; index++)
1: 		{
1: 			insertPStmt.setInt(1, index);
1:             insertPStmt.setBytes(2, c1_value.getBytes("US-ASCII"));
1:             insertPStmt.setBytes(3, c2_value.getBytes("US-ASCII"));
1:             insertPStmt.setBytes(4, c3_value.getBytes("US-ASCII"));
1:             insertPStmt.setString(5, c4_value);
1:             insertPStmt.setString(6, c5_value);
1:             insertPStmt.setString(7, c6_value);
1: 			insertPStmt.executeUpdate();
1: 		}
1: 
1: 		insertPStmt.close();
1: 
1: 		// Do sort with maxFieldSize = 0
1: 		doSort(stmt);
1: 
1: 		// Set maxFieldSize to 24 and do another sort
1: 		stmt.setMaxFieldSize(24);
1: 		doSort(stmt);
1: 	}
1: 
1: 	private static void doSort(Statement stmt)
1: 		throws SQLException
1: 	{
1: 		System.out.println("Max Field Size = "  + stmt.getMaxFieldSize());
1: 
1: 		try
1: 		{
1: 			/* Do a descending sort on 1st column, but only select
1: 			 * out 1st and last 5 rows.  This should test streaming to/from
1: 			 * a work table.
1: 			 */
0: 			rs = stmt.executeQuery("select * from tab2 order by c0 desc");
1: 			for (int index = 0; index < 5000; index++)
1: 			{
1: 				rs.next();
1: 				if (index < 5 || index >= 4995)
1: 				{
1: 					System.out.println("Iteration #: " + index);
1: 					System.out.println("Column #1: " + rs.getInt(1));
1: 					System.out.println("Column #2:");
1: 					connectionJdbc20.get_using_binary_stream(rs, 2);
1: 					System.out.println("Column #3:");
1: 					connectionJdbc20.get_using_binary_stream(rs, 3);
1: 					System.out.println("Column #4:");
1: 					connectionJdbc20.get_using_binary_stream(rs, 4);
1: 					System.out.println("Column #5:");
1: 					connectionJdbc20.get_using_ascii_stream(rs, 5);
1: 					System.out.println("Column #6:");
1: 					connectionJdbc20.get_using_ascii_stream(rs, 6);
1: 					System.out.println("Column #7:");
1: 					connectionJdbc20.get_using_ascii_stream(rs, 7);
1: 				}
1: 			}
1: 		}
1: 		catch (SQLException e) 
1: 		{
1: 			throw e;
1: 		}
1: 		catch (Throwable e) {
1: 			System.out.println("FAIL -- unexpected exception: "+e);
1: 			e.printStackTrace();
1: 		}
1: 	}
1: 
1: 	static private void dumpSQLExceptions (SQLException se) {
1: 		System.out.println("FAIL -- unexpected exception");
1: 		while (se != null)
1: 		{
1: 			System.out.println("SQLSTATE("+se.getSQLState()+"): "+se);
1: 			se = se.getNextException();
1: 		}
1: 	}
1: 
1: 	static private void dumpExpectedSQLExceptions (SQLException se) {
1: 		System.out.println("PASS -- expected exception");
1: 		while (se != null)
1: 		{
1: 			System.out.println("SQLSTATE("+se.getSQLState()+"): "+se);
1: 			se = se.getNextException();
1:         }
1:     }
1: 
1: }
============================================================================