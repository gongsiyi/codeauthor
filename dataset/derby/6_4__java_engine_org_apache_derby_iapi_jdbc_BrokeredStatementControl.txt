1:eac0369: /*
5:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.jdbc.BrokeredStatementControl
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
3:eac0369:  */
1:ec60014: 
1:eac0369: package org.apache.derby.iapi.jdbc;
1:eac0369: 
1:eac0369: import java.sql.*;
1:eac0369: 
1:ec60014: /**
1:eac0369: 	Provides control over a BrokeredStatement, BrokeredPreparedStatement or BrokeredCallableStatement
1:eac0369: */
1:eac0369: public interface BrokeredStatementControl
1:eac0369: {
3:eac0369: 	/**
1:eac0369: 		Can cursors be held across commits.
1:ce9d214:         Returns the holdability that should be
1:ce9d214:         used which may be different from the passed
1:ce9d214:         in holdabilty.
1:eac0369: 	*/
1:ce9d214: 	public int checkHoldCursors(int holdability) throws SQLException;
1:eac0369: 
1:eac0369: 	/**
1:5b78c4e: 	 * Close the real JDBC Statement when this is controlling a Statement.
1:5b78c4e: 	 * @throws SQLException
1:5b78c4e: 	 */
1:5b78c4e: 	public void closeRealStatement() throws SQLException;
1:5b78c4e: 	
1:5b78c4e: 	/**
1:5b78c4e: 	 * Close the real JDBC CallableStatement when this is controlling a
1:5b78c4e: 	 * CallableStatement. 
1:5b78c4e: 	 * @throws SQLException
1:5b78c4e: 	 */
1:5b78c4e: 	public void closeRealCallableStatement() throws SQLException;
1:5b78c4e: 	
1:5b78c4e: 	/**
1:5b78c4e: 	 * Close the real JDBC CallableStatement when this is controlling a
1:5b78c4e: 	 * PreparedStatement. 
1:5b78c4e: 	 * @throws SQLException
1:5b78c4e: 	 */
1:5b78c4e: 	public void closeRealPreparedStatement() throws SQLException;
1:5b78c4e: 	
1:5b78c4e: 	/**
1:eac0369: 		Return the real JDBC statement for the brokered statement
1:eac0369: 		when this is controlling a Statement.
1:eac0369: 	*/
1:eac0369: 	public Statement	getRealStatement() throws SQLException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the real JDBC PreparedStatement for the brokered statement
1:eac0369: 		when this is controlling a PreparedStatement.
1:eac0369: 	*/
1:eac0369: 	public PreparedStatement	getRealPreparedStatement() throws SQLException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the real JDBC CallableStatement for the brokered statement
1:eac0369: 		when this is controlling a CallableStatement.
1:eac0369: 	*/
1:eac0369: 	public CallableStatement	getRealCallableStatement() throws SQLException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Optionally wrap a returned ResultSet in another ResultSet.
1:e65be5b:         @param s Statement that created the ResultSet.
1:ec60014: 	*/
1:e65be5b: 	public ResultSet	wrapResultSet(Statement s, ResultSet rs);
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:aa5c5de
/////////////////////////////////////////////////////////////////////////
commit:ec60014
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Return the exception factory for the underlying connection.
0:      * @return an exception factory instance
1:      */
0:     public ExceptionFactory getExceptionFactory();
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:5b78c4e
/////////////////////////////////////////////////////////////////////////
1: 	 * Close the real JDBC Statement when this is controlling a Statement.
1: 	 * @throws SQLException
1: 	 */
1: 	public void closeRealStatement() throws SQLException;
1: 	
1: 	/**
1: 	 * Close the real JDBC CallableStatement when this is controlling a
1: 	 * CallableStatement. 
1: 	 * @throws SQLException
1: 	 */
1: 	public void closeRealCallableStatement() throws SQLException;
1: 	
1: 	/**
1: 	 * Close the real JDBC CallableStatement when this is controlling a
1: 	 * PreparedStatement. 
1: 	 * @throws SQLException
1: 	 */
1: 	public void closeRealPreparedStatement() throws SQLException;
1: 	
1: 	/**
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ce9d214
/////////////////////////////////////////////////////////////////////////
1:         Returns the holdability that should be
1:         used which may be different from the passed
1:         in holdabilty.
1: 	public int checkHoldCursors(int holdability) throws SQLException;
commit:e65be5b
/////////////////////////////////////////////////////////////////////////
1:         @param s Statement that created the ResultSet.
1: 	public ResultSet	wrapResultSet(Statement s, ResultSet rs);
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.jdbc.BrokeredStatementControl
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.jdbc
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.jdbc;
1: 
1: import java.sql.*;
1: 
1: /**
1: 	Provides control over a BrokeredStatement, BrokeredPreparedStatement or BrokeredCallableStatement
1: */
1: public interface BrokeredStatementControl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1: 
1: 	/**
1: 		Can cursors be held across commits.
1: 	*/
0: 	public void checkHoldCursors(int holdability) throws SQLException;
1: 
1: 	/**
1: 		Return the real JDBC statement for the brokered statement
1: 		when this is controlling a Statement.
1: 	*/
1: 	public Statement	getRealStatement() throws SQLException;
1: 
1: 	/**
1: 		Return the real JDBC PreparedStatement for the brokered statement
1: 		when this is controlling a PreparedStatement.
1: 	*/
1: 	public PreparedStatement	getRealPreparedStatement() throws SQLException;
1: 
1: 
1: 	/**
1: 		Return the real JDBC CallableStatement for the brokered statement
1: 		when this is controlling a CallableStatement.
1: 	*/
1: 	public CallableStatement	getRealCallableStatement() throws SQLException;
1: 
1: 	/**
1: 		Optionally wrap a returned ResultSet in another ResultSet.
1: 	*/
0: 	public ResultSet	wrapResultSet(ResultSet rs);
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.jdbc
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.jdbc;
0: 
0: import java.sql.*;
0: 
0: /**
0: 	Provides control over a BrokeredStatement, BrokeredPreparedStatement or BrokeredCallableStatement
0: */
0: public interface BrokeredStatementControl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 
0: 	/**
0: 		Can cursors be held across commits.
0: 	*/
0: 	public void checkHoldCursors(int holdability) throws SQLException;
0: 
0: 	/**
0: 		Return the real JDBC statement for the brokered statement
0: 		when this is controlling a Statement.
0: 	*/
0: 	public Statement	getRealStatement() throws SQLException;
0: 
0: 	/**
0: 		Return the real JDBC PreparedStatement for the brokered statement
0: 		when this is controlling a PreparedStatement.
0: 	*/
0: 	public PreparedStatement	getRealPreparedStatement() throws SQLException;
0: 
0: 
0: 	/**
0: 		Return the real JDBC CallableStatement for the brokered statement
0: 		when this is controlling a CallableStatement.
0: 	*/
0: 	public CallableStatement	getRealCallableStatement() throws SQLException;
0: 
0: 	/**
0: 		Optionally wrap a returned ResultSet in another ResultSet.
0: 	*/
0: 	public ResultSet	wrapResultSet(ResultSet rs);
0: }
============================================================================