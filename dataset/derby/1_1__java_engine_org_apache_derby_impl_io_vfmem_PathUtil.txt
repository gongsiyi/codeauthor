1:33467a5: /*
1:33467a5: 
1:33467a5:    Derby - Class org.apache.derby.impl.io.vfmem.PathUtil
1:33467a5: 
1:33467a5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:33467a5:    contributor license agreements.  See the NOTICE file distributed with
1:33467a5:    this work for additional information regarding copyright ownership.
1:33467a5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:33467a5:    (the "License"); you may not use this file except in compliance with
1:33467a5:    the License.  You may obtain a copy of the License at
1:33467a5: 
1:33467a5:       http://www.apache.org/licenses/LICENSE-2.0
1:33467a5: 
1:33467a5:    Unless required by applicable law or agreed to in writing, software
1:33467a5:    distributed under the License is distributed on an "AS IS" BASIS,
1:33467a5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33467a5:    See the License for the specific language governing permissions and
1:33467a5:    limitations under the License.
1:33467a5: 
1:33467a5: */
1:33467a5: 
1:33467a5: package org.apache.derby.impl.io.vfmem;
1:33467a5: 
1:33467a5: import java.io.File;
1:33467a5: 
1:33467a5: /**
1:33467a5:  * Helper methods to deal with paths in the in-memory "file system".
1:33467a5:  * <p>
1:33467a5:  * These methods are similar to those in {@code java.io.File}.
1:33467a5:  * <p>
1:33467a5:  * <em>Note</em>: The system has been hardcoded to use the separator specified
1:33467a5:  * by {@code java.io.File}.
1:33467a5:  */
1:33467a5: public class PathUtil {
1:33467a5: 
1:33467a5:     public static final char SEP = File.separatorChar;
1:33467a5:     public static final String SEP_STR = String.valueOf(SEP);
1:33467a5: 
1:33467a5:     /** This class cannot be instantiated. */
1:33467a5:     private PathUtil() {}
1:33467a5: 
1:33467a5:     private static void basicPathChecks(String path) {
1:33467a5:         if (path == null) {
1:33467a5:             throw new IllegalArgumentException("Path is null");
1:33467a5:         }
1:33467a5:         if (!path.equals(path.trim())) {
1:33467a5:             throw new IllegalArgumentException("Path has not been trimmed: '" +
1:33467a5:                     path + "'");
1:33467a5:         }
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns the base name of the path.
1:33467a5:      *
1:33467a5:      * @param path the path to process
1:33467a5:      * @return The base name of the path.
1:33467a5:      */
1:33467a5:     public static String getBaseName(String path) {
1:33467a5:         basicPathChecks(path);
1:33467a5:         int sepIndex = path.lastIndexOf(SEP);
1:33467a5:         if (sepIndex != -1 && sepIndex != path.length() -1) {
1:33467a5:             return path.substring(sepIndex +1);
1:33467a5:         }
1:33467a5:         return path;
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Returns the parent of the path.
1:33467a5:      *
1:33467a5:      * @param path the path to process
1:33467a5:      * @return The parent path, which may be the empty string ({@code ""}) if
1:33467a5:      *      the path is a relative path, or {@code null} if XXXX TODO
1:33467a5:      */
1:33467a5:     public static String getParent(String path) {
1:33467a5:         basicPathChecks(path);
1:33467a5:         if (path.equals(SEP_STR)) {
1:33467a5:             return null;
1:33467a5:         }
1:33467a5:         // Remove the last separator, if it is the last char of the path.
1:33467a5:         if (path.length() > 0 && path.charAt(path.length() -1) == SEP) {
1:33467a5:             path = path.substring(0, path.length() -1);
1:33467a5:         }
1:33467a5:         // Look for the last separator.
1:33467a5:         int sepIndex = path.lastIndexOf(SEP);
1:33467a5:         if (sepIndex == 0) {
1:33467a5:             return SEP_STR;
1:33467a5:         } else if (sepIndex > 0) {
1:33467a5:             return path.substring(0, sepIndex);
1:33467a5:         } else {
1:33467a5:             return null;
1:33467a5:         }
1:33467a5:     }
1:33467a5: 
1:33467a5:     /**
1:33467a5:      * Joins the two paths by inserting the separator chararcter between them.
1:33467a5:      *
1:33467a5:      * @param parent parent directory
1:33467a5:      * @param base file/directory name
1:33467a5:      * @return A merged path.
1:33467a5:      */
1:33467a5:     public static String join(String parent, String base) {
1:33467a5:         // It is not defined what happens if the base name starts with the
1:33467a5:         // separator character. For now, just let it be, which will result in a
1:33467a5:         // path with multiple separator chars next to eachother.
1:33467a5:         if (parent.charAt(parent.length() -1) == SEP) {
1:33467a5:             return parent + base;
1:33467a5:         }
1:33467a5:         return (parent + SEP + base);
1:33467a5:     }
1:33467a5: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:33467a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.io.vfmem.PathUtil
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.io.vfmem;
1: 
1: import java.io.File;
1: 
1: /**
1:  * Helper methods to deal with paths in the in-memory "file system".
1:  * <p>
1:  * These methods are similar to those in {@code java.io.File}.
1:  * <p>
1:  * <em>Note</em>: The system has been hardcoded to use the separator specified
1:  * by {@code java.io.File}.
1:  */
1: public class PathUtil {
1: 
1:     public static final char SEP = File.separatorChar;
1:     public static final String SEP_STR = String.valueOf(SEP);
1: 
1:     /** This class cannot be instantiated. */
1:     private PathUtil() {}
1: 
1:     private static void basicPathChecks(String path) {
1:         if (path == null) {
1:             throw new IllegalArgumentException("Path is null");
1:         }
1:         if (!path.equals(path.trim())) {
1:             throw new IllegalArgumentException("Path has not been trimmed: '" +
1:                     path + "'");
1:         }
1:     }
1: 
1:     /**
1:      * Returns the base name of the path.
1:      *
1:      * @param path the path to process
1:      * @return The base name of the path.
1:      */
1:     public static String getBaseName(String path) {
1:         basicPathChecks(path);
1:         int sepIndex = path.lastIndexOf(SEP);
1:         if (sepIndex != -1 && sepIndex != path.length() -1) {
1:             return path.substring(sepIndex +1);
1:         }
1:         return path;
1:     }
1: 
1:     /**
1:      * Returns the parent of the path.
1:      *
1:      * @param path the path to process
1:      * @return The parent path, which may be the empty string ({@code ""}) if
1:      *      the path is a relative path, or {@code null} if XXXX TODO
1:      */
1:     public static String getParent(String path) {
1:         basicPathChecks(path);
1:         if (path.equals(SEP_STR)) {
1:             return null;
1:         }
1:         // Remove the last separator, if it is the last char of the path.
1:         if (path.length() > 0 && path.charAt(path.length() -1) == SEP) {
1:             path = path.substring(0, path.length() -1);
1:         }
1:         // Look for the last separator.
1:         int sepIndex = path.lastIndexOf(SEP);
1:         if (sepIndex == 0) {
1:             return SEP_STR;
1:         } else if (sepIndex > 0) {
1:             return path.substring(0, sepIndex);
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1:     /**
1:      * Joins the two paths by inserting the separator chararcter between them.
1:      *
1:      * @param parent parent directory
1:      * @param base file/directory name
1:      * @return A merged path.
1:      */
1:     public static String join(String parent, String base) {
1:         // It is not defined what happens if the base name starts with the
1:         // separator character. For now, just let it be, which will result in a
1:         // path with multiple separator chars next to eachother.
1:         if (parent.charAt(parent.length() -1) == SEP) {
1:             return parent + base;
1:         }
1:         return (parent + SEP + base);
1:     }
1: }
============================================================================