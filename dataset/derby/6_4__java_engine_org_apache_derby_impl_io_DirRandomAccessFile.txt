1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.io.DirRandomAccessFile
1:345de35: 
1:2724c48:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2724c48:    contributor license agreements.  See the NOTICE file distributed with
1:2724c48:    this work for additional information regarding copyright ownership.
1:2724c48:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2724c48:    (the "License"); you may not use this file except in compliance with
1:2724c48:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.io;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.io.StorageFile;
1:eac0369: import org.apache.derby.io.StorageRandomAccessFile;
1:eac0369: 
1:eac0369: import java.io.File;
1:eac0369: import java.io.RandomAccessFile;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.FileNotFoundException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This class provides a disk based implementation of the StIRandomAccess File interface. It is used by the
1:eac0369:  * database engine to access persistent data and transaction logs under the directory (default) subsubprotocol.
1:eac0369:  */
1:eac0369: class DirRandomAccessFile extends RandomAccessFile implements StorageRandomAccessFile
1:eac0369: {
1:5cf7a46:     // for cloning
1:5cf7a46:     private final   File    _name;
1:5cf7a46:     private final   String  _mode;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Construct a StorageRandomAccessFileImpl.
2:eac0369:      *
1:eac0369:      * @param name The file name.
1:eac0369:      * @param mode The file open mode: "r", "rw", "rws", or "rwd". The  "rws" and "rwd" modes specify that the file is to
1:eac0369:      *             be synchronized, consistent with the java.io.RandomAccessFile class. However the
1:eac0369:      *             StorageRandomAccessFile.sync() method will be called even if the file was opened
1:eac0369:      *             in "rws" or "rwd" mode.  If the "rws" or "rwd" modes are supported then the implementation
1:eac0369:      *             of StorageRandomAccessFile.sync need not do anything.
1:eac0369:      *
1:eac0369:      * @exception IllegalArgumentException if the mode argument is not equal to one of "r", "rw".
1:eac0369:      * @exception FileNotFoundException if the file exists but is a directory rather than a regular
1:eac0369:      *              file, or cannot be opened or created for any other reason .
1:eac0369:      */
1:eac0369:     DirRandomAccessFile( File name, String mode) throws FileNotFoundException
1:eac0369:     {
1:eac0369:         super( name, mode);
1:5cf7a46:         _name = name;
1:5cf7a46:         _mode = mode;
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /** Clone this file abstaction */
1:5cf7a46:     public  DirRandomAccessFile clone()
1:5cf7a46:     {
1:5cf7a46:         try {
1:5cf7a46:             return new DirRandomAccessFile( _name, _mode );
1:5cf7a46:         }
1:5cf7a46:         catch (IOException ioe)
1:5cf7a46:         {
1:5cf7a46:             throw new RuntimeException( ioe.getMessage(), ioe );
1:5cf7a46:         }
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Force any changes out to the persistent store.
1:eac0369:      *
1:eac0369:      * @exception IOException If an IO error occurs.
1:eac0369:      */
1:a552fe6:     public void sync( ) throws IOException
1:eac0369:     {
1:eac0369:         getFD().sync();
1:eac0369:     }
1:eac0369: }
1:eac0369:     
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5cf7a46
/////////////////////////////////////////////////////////////////////////
1:     // for cloning
1:     private final   File    _name;
1:     private final   String  _mode;
/////////////////////////////////////////////////////////////////////////
1:         _name = name;
1:         _mode = mode;
1:     }
1: 
1:     /** Clone this file abstaction */
1:     public  DirRandomAccessFile clone()
1:     {
1:         try {
1:             return new DirRandomAccessFile( _name, _mode );
1:         }
1:         catch (IOException ioe)
1:         {
1:             throw new RuntimeException( ioe.getMessage(), ioe );
1:         }
commit:2724c48
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:a552fe6
/////////////////////////////////////////////////////////////////////////
1:     public void sync( ) throws IOException
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.io.DirRandomAccessFile
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.io;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.io.StorageFile;
1: import org.apache.derby.io.StorageRandomAccessFile;
1: 
1: import java.io.File;
1: import java.io.RandomAccessFile;
1: import java.io.IOException;
1: import java.io.FileNotFoundException;
1: 
1: /**
1:  * This class provides a disk based implementation of the StIRandomAccess File interface. It is used by the
1:  * database engine to access persistent data and transaction logs under the directory (default) subsubprotocol.
1:  */
1: class DirRandomAccessFile extends RandomAccessFile implements StorageRandomAccessFile
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1:     /**
1:      * Construct a StorageRandomAccessFileImpl.
1:      *
1:      * @param name The file name.
1:      * @param mode The file open mode: "r", "rw", "rws", or "rwd". The  "rws" and "rwd" modes specify that the file is to
1:      *             be synchronized, consistent with the java.io.RandomAccessFile class. However the
1:      *             StorageRandomAccessFile.sync() method will be called even if the file was opened
1:      *             in "rws" or "rwd" mode.  If the "rws" or "rwd" modes are supported then the implementation
1:      *             of StorageRandomAccessFile.sync need not do anything.
1:      *
1:      * @exception IllegalArgumentException if the mode argument is not equal to one of "r", "rw".
1:      * @exception FileNotFoundException if the file exists but is a directory rather than a regular
1:      *              file, or cannot be opened or created for any other reason .
1:      */
1:     DirRandomAccessFile( File name, String mode) throws FileNotFoundException
1:     {
1:         super( name, mode);
1:     }
1: 
1:     /**
1:      * Force any changes out to the persistent store.
1:      *
0:      * @param metaData If true then this method is required to force changes to both the file's
0:      *          content and metadata to be written to storage; otherwise, it need only force content changes
0:      *          to be written.
1:      *
1:      * @exception IOException If an IO error occurs.
1:      */
0:     public void sync( boolean metaData) throws IOException
1:     {
1:         getFD().sync();
1:     }
1: }
1:     
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.io;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.io.StorageFile;
0: import org.apache.derby.io.StorageRandomAccessFile;
0: 
0: import java.io.File;
0: import java.io.RandomAccessFile;
0: import java.io.IOException;
0: import java.io.FileNotFoundException;
0: 
0: /**
0:  * This class provides a disk based implementation of the StIRandomAccess File interface. It is used by the
0:  * database engine to access persistent data and transaction logs under the directory (default) subsubprotocol.
0:  */
0: class DirRandomAccessFile extends RandomAccessFile implements StorageRandomAccessFile
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0:     /**
0:      * Construct a StorageRandomAccessFileImpl.
0:      *
0:      * @param name The file name.
0:      * @param mode The file open mode: "r", "rw", "rws", or "rwd". The  "rws" and "rwd" modes specify that the file is to
0:      *             be synchronized, consistent with the java.io.RandomAccessFile class. However the
0:      *             StorageRandomAccessFile.sync() method will be called even if the file was opened
0:      *             in "rws" or "rwd" mode.  If the "rws" or "rwd" modes are supported then the implementation
0:      *             of StorageRandomAccessFile.sync need not do anything.
0:      *
0:      * @exception IllegalArgumentException if the mode argument is not equal to one of "r", "rw".
0:      * @exception FileNotFoundException if the file exists but is a directory rather than a regular
0:      *              file, or cannot be opened or created for any other reason .
0:      */
0:     DirRandomAccessFile( File name, String mode) throws FileNotFoundException
0:     {
0:         super( name, mode);
0:     }
0: 
0:     /**
0:      * Force any changes out to the persistent store.
0:      *
0:      * @param metaData If true then this method is required to force changes to both the file's
0:      *          content and metadata to be written to storage; otherwise, it need only force content changes
0:      *          to be written.
0:      *
0:      * @exception IOException If an IO error occurs.
0:      */
0:     public void sync( boolean metaData) throws IOException
0:     {
0:         getFD().sync();
0:     }
0: }
0:     
============================================================================