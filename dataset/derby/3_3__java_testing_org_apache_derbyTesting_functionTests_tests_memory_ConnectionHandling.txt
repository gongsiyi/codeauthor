1:7badb64: /*
5:7badb64: 
1:7badb64: Derby - Class org.apache.derbyTesting.functionTests.tests.memory.ConnectionHandling
1:7badb64: 
1:dff95a1: Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1: contributor license agreements.  See the NOTICE file distributed with
1:dff95a1: this work for additional information regarding copyright ownership.
1:dff95a1: The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1: (the "License"); you may not use this file except in compliance with
1:dff95a1: the License.  You may obtain a copy of the License at
1:7badb64: 
1:7badb64:    http://www.apache.org/licenses/LICENSE-2.0
1:7badb64: 
1:7badb64: Unless required by applicable law or agreed to in writing, software
1:7badb64: distributed under the License is distributed on an "AS IS" BASIS,
1:7badb64: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7badb64: See the License for the specific language governing permissions and
1:7badb64: limitations under the License.
1:7badb64: 
1:7badb64: */
1:7badb64: 
1:7badb64: package org.apache.derbyTesting.functionTests.tests.memory;
1:7badb64: import java.sql.Connection;
1:7badb64: import java.sql.DriverManager;
1:7badb64: import java.sql.SQLException;
1:7badb64: import java.util.ArrayList;
1:8038b0a: import java.util.Properties;
1:7badb64: 
1:7badb64: /**
1:7badb64:  * Test opening connections until a failure due to out of memory
1:7badb64:  * and then continue with 500 connection requests to see if the
1:7badb64:  * system reacts well of falls over.
1:7badb64:  *
1:7badb64:  */
1:7badb64: public class ConnectionHandling {
1:7badb64: 
1:7badb64:  public static void main(String[] args) throws Exception {
1:7badb64: 
1:7badb64:         System.out.println("Test ConnectionHandling starting");
1:7badb64: 
1:7badb64: 
1:7badb64:         new org.apache.derby.jdbc.EmbeddedDriver();
1:7badb64:         
1:7badb64:         Connection conn = DriverManager.getConnection("jdbc:derby:wombat;create=true");
1:d5cbbde:         conn.close();
1:d5cbbde:         conn = null;
1:7badb64:         
1:3f5c48a:         ArrayList<Connection> list = new ArrayList<Connection>();
1:8038b0a:         list.ensureCapacity(30000);
1:8038b0a:         
1:8038b0a:         Properties p = new Properties();
1:7badb64:         
1:499e276:         while (true) {
1:499e276:             Connection c;
1:499e276:             try {
1:499e276: 
1:8038b0a:                 c = DriverManager.getConnection("jdbc:derby:wombat", p);
1:499e276:             } catch (SQLException e) {
1:499e276:                 if ("08004".equals(e.getSQLState()))
1:499e276:                     System.out.println("FIRST OOME: " + e.getSQLState() + " "
1:499e276:                             + e.getMessage());
1:499e276:                 else {
1:499e276:                     System.out.println("UNKNOWN ERROR " + e.getSQLState() + " "
1:499e276:                             + e.getMessage());
1:499e276:                     e.printStackTrace(System.out);
3:7badb64:                 }
1:499e276:                 break;
1:499e276:             } catch (Throwable t) {
1:499e276:                 System.out.println("UNKNOWN ERROR " + t);
1:499e276:                 t.printStackTrace(System.out);
1:499e276:                 break;
1:7badb64:             }
1:499e276:             list.add(c);
1:499e276:             if ((list.size() % 1000) == 0) {
1:8038b0a:                 System.out.print(".");
1:7badb64:             }
1:7badb64:         }
1:8038b0a:         
1:8038b0a:         System.out.println("");
1:499e276:         
1:7badb64:         System.out.println(list.size() + " successful connections");
1:7badb64:         
1:499e276:         list.ensureCapacity(list.size() + 500);
1:499e276:         
1:7badb64:         // try to make 500 more connection requests.
1:7badb64:         int fail_sqloome = 0;
1:7badb64:         int fail_sql = 0;
1:7badb64:         int fail_bad = 0;
1:7badb64:         int ok = 0;
1:7badb64:         for (int i = 0; i < 500; i++)
3:7badb64:         {
1:af3ca91:             // Sleep for 10 secs as we know the implementation
1:af3ca91:             // of the low meory watermark resets after 5 seconds.
1:af3ca91:             if (i == 300)
1:af3ca91:                 Thread.sleep(10000L);
2:7badb64:             try {
1:8038b0a:                   Connection c = DriverManager.getConnection("jdbc:derby:wombat", p);
1:499e276:                   list.add(c);
1:499e276:                   ok++;
2:7badb64:             } catch (SQLException e) {
2:7badb64:                 if ("08004".equals(e.getSQLState()))
1:7badb64:                     fail_sqloome++;
2:7badb64:                 else {
1:7badb64:                     fail_sql++;
2:7badb64:                     System.out.println("UNKNOWN ERROR " + e.getSQLState() + " " + e.getMessage());
2:7badb64:                     e.printStackTrace(System.out);
1:7badb64:                 }
2:7badb64:             } catch (Throwable t) {
1:7badb64:                 fail_bad++;
2:7badb64:                 System.out.println("UNKNOWN ERROR " + t);
2:7badb64:                 t.printStackTrace(System.out);
1:7badb64:             }
1:7badb64:         }
1:7badb64:         
1:7badb64:         System.out.println("OK                  : " + ok);
1:7badb64:         System.out.println("Failed 08004        : " + fail_sqloome);
1:7badb64:         System.out.println("Failed SQLException : " + fail_sql);
1:7badb64:         System.out.println("Failed Throwable    : " + fail_bad);
1:d5cbbde:         
1:7badb64:         System.out.println("closing connections : " + list.size());
1:d5cbbde:         int alreadyClosed = 0;
1:7badb64:         for (int i = 0; i < list.size(); i++)
1:7badb64:         {
1:3f5c48a:             Connection c = list.set(i, null);
1:d5cbbde:             if (c.isClosed())
1:d5cbbde:                 alreadyClosed++;
1:8038b0a:             else 
1:8038b0a:                 c.close();
1:7badb64:         }
1:d5cbbde:         System.out.println("already closed      : " + alreadyClosed);        
1:d5cbbde:   }
1:7badb64: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<Connection> list = new ArrayList<Connection>();
/////////////////////////////////////////////////////////////////////////
1:             Connection c = list.set(i, null);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:af3ca91
/////////////////////////////////////////////////////////////////////////
1:             // Sleep for 10 secs as we know the implementation
1:             // of the low meory watermark resets after 5 seconds.
1:             if (i == 300)
1:                 Thread.sleep(10000L);
commit:8038b0a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:         list.ensureCapacity(30000);
1:         
1:         Properties p = new Properties();
1:                 c = DriverManager.getConnection("jdbc:derby:wombat", p);
/////////////////////////////////////////////////////////////////////////
1:                 System.out.print(".");
1:         
1:         System.out.println("");
/////////////////////////////////////////////////////////////////////////
1:                   Connection c = DriverManager.getConnection("jdbc:derby:wombat", p);
/////////////////////////////////////////////////////////////////////////
1:             else 
1:                 c.close();
commit:d5cbbde
/////////////////////////////////////////////////////////////////////////
1:         conn.close();
1:         conn = null;
/////////////////////////////////////////////////////////////////////////
1:         int alreadyClosed = 0;
0:             Connection c = (Connection) list.get(i);
0:             list.set(i, null);
1:             if (c.isClosed())
1:                 alreadyClosed++;
1:             
0:             c.close();
1:         System.out.println("already closed      : " + alreadyClosed);        
1:   }
commit:499e276
/////////////////////////////////////////////////////////////////////////
1:         while (true) {
1:             Connection c;
1:             try {
1: 
0:                 c = DriverManager.getConnection("jdbc:derby:wombat");
1:             } catch (SQLException e) {
1:                 if ("08004".equals(e.getSQLState()))
1:                     System.out.println("FIRST OOME: " + e.getSQLState() + " "
1:                             + e.getMessage());
1:                 else {
1:                     System.out.println("UNKNOWN ERROR " + e.getSQLState() + " "
1:                             + e.getMessage());
1:                     e.printStackTrace(System.out);
1:                 break;
1:             } catch (Throwable t) {
1:                 System.out.println("UNKNOWN ERROR " + t);
1:                 t.printStackTrace(System.out);
1:                 break;
1:             list.add(c);
1:             if ((list.size() % 1000) == 0) {
0:                 System.out.println(list.size() + " connections ...");
0:                 System.out.println("FREE " + Runtime.getRuntime().freeMemory());
1: 
1:         list.ensureCapacity(list.size() + 500);
1:         
/////////////////////////////////////////////////////////////////////////
0:                   Connection c = DriverManager.getConnection("jdbc:derby:wombat");
1:                   list.add(c);
1:                   ok++;
commit:7badb64
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.memory.ConnectionHandling
1: 
0: Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0: Licensed under the Apache License, Version 2.0 (the "License");
0: you may not use this file except in compliance with the License.
0: You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.memory;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import java.util.ArrayList;
1: 
1: /**
1:  * Test opening connections until a failure due to out of memory
1:  * and then continue with 500 connection requests to see if the
1:  * system reacts well of falls over.
1:  *
1:  */
1: public class ConnectionHandling {
1: 
1:  public static void main(String[] args) throws Exception {
1: 
1:         System.out.println("Test ConnectionHandling starting");
1: 
1: 
1:         new org.apache.derby.jdbc.EmbeddedDriver();
1:         
1:         Connection conn = DriverManager.getConnection("jdbc:derby:wombat;create=true");
1:         
0:         ArrayList list = new ArrayList();
1:         
1:         try {
0:             while (true)
1:             {
0:                 Connection c = DriverManager.getConnection("jdbc:derby:wombat");
0:                 list.add(c);
0:                 if ((list.size() % 1000) == 0) {
0:                     System.out.println(list.size() + " connections ...");
0:                     System.out.println("FREE " + Runtime.getRuntime().freeMemory());
1:                 }
1:             }
1:         } catch (SQLException e) {
1:             if ("08004".equals(e.getSQLState()))
0:                 System.out.println("FIRST OOME: " + e.getSQLState() + " " + e.getMessage());
1:             else {
1:                 System.out.println("UNKNOWN ERROR " + e.getSQLState() + " " + e.getMessage());
1:                 e.printStackTrace(System.out);
1:             }
1:         } catch (Throwable t) {
1:             System.out.println("UNKNOWN ERROR " + t);
1:             t.printStackTrace(System.out);
1:         }
1:         
1:         System.out.println(list.size() + " successful connections");
1:         
1:         // try to make 500 more connection requests.
1:         int fail_sqloome = 0;
1:         int fail_sql = 0;
1:         int fail_bad = 0;
1:         int ok = 0;
1:         for (int i = 0; i < 500; i++)
1:         {
1:             try {
0:                 while (true)
1:                 {
0:                     Connection c = DriverManager.getConnection("jdbc:derby:wombat");
0:                     list.add(c);
0:                     ok++;
1:                 }
1:             } catch (SQLException e) {
1:                 if ("08004".equals(e.getSQLState()))
1:                     fail_sqloome++;
1:                 else {
1:                     fail_sql++;
1:                     System.out.println("UNKNOWN ERROR " + e.getSQLState() + " " + e.getMessage());
1:                     e.printStackTrace(System.out);
1:                 }
1:             } catch (Throwable t) {
1:                 fail_bad++;
1:                 System.out.println("UNKNOWN ERROR " + t);
1:                 t.printStackTrace(System.out);
1:             }
1:         }
1:         
1:         System.out.println("OK                  : " + ok);
1:         System.out.println("Failed 08004        : " + fail_sqloome);
1:         System.out.println("Failed SQLException : " + fail_sql);
1:         System.out.println("Failed Throwable    : " + fail_bad);
1:         
1:         System.out.println("closing connections : " + list.size());
1:         for (int i = 0; i < list.size(); i++)
1:         {
0:             ((Connection) list.get(i)).close();
1:         }
1:         
0:         conn.close();
1:  }
1: }
============================================================================