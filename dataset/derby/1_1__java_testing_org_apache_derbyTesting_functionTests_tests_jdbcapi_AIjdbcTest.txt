1:32d1091: /**
1:32d1091:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AIjdbcTest
1:32d1091:  *  
1:32d1091:  * Licensed to the Apache Software Foundation (ASF) under one
1:32d1091:  * or more contributor license agreements.  See the NOTICE file
1:32d1091:  * distributed with this work for additional information
1:32d1091:  * regarding copyright ownership.  The ASF licenses this file
1:32d1091:  * to you under the Apache License, Version 2.0 (the
1:32d1091:  * "License"); you may not use this file except in compliance
1:32d1091:  * with the License.  You may obtain a copy of the License at
1:32d1091:  *
1:32d1091:  *   http://www.apache.org/licenses/LICENSE-2.0
1:32d1091:  *
1:32d1091:  * Unless required by applicable law or agreed to in writing,
1:32d1091:  * software distributed under the License is distributed on an
1:32d1091:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:32d1091:  * KIND, either express or implied.  See the License for the
1:32d1091:  * specific language governing permissions and limitations
1:32d1091:  * under the License.
1:32d1091:  */
1:32d1091: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:32d1091: 
1:32d1091: import java.sql.Connection;
1:32d1091: import java.sql.ResultSet;
1:32d1091: import java.sql.ResultSetMetaData;
1:32d1091: import java.sql.SQLException;
1:32d1091: import java.sql.Statement;
1:32d1091: 
1:32d1091: import junit.framework.Test;
1:32d1091: 
1:32d1091: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:32d1091: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:32d1091: import org.apache.derbyTesting.junit.TestConfiguration;
1:32d1091: 
1:32d1091: /**
1:32d1091:  * Test execution of JDBC method, isAutoincrement.
1:32d1091:  */
1:32d1091: public class AIjdbcTest extends BaseJDBCTestCase {
1:32d1091: 
1:32d1091: 	/**
1:32d1091: 	 * Basic constructor.
1:32d1091: 	 */
1:32d1091: 	public AIjdbcTest(String name) {
1:32d1091: 		super(name);
1:32d1091: 	}
1:32d1091: 	
1:32d1091: 	/**
1:32d1091: 	 * Returns the implemented tests.
1:32d1091: 	 * 
1:32d1091: 	 * @return An instance of <code>Test</code> with the implemented tests to
1:32d1091: 	 *         run.
1:32d1091: 	 */
1:32d1091: 	public static Test suite() {
1:32d1091: 		return new CleanDatabaseTestSetup(TestConfiguration.defaultSuite(AIjdbcTest.class, false)) {
1:32d1091: 			protected void decorateSQL(Statement stmt) throws SQLException {
1:32d1091: 				stmt.execute("create table tab1 (x int, y int generated always as identity,z char(2))");
1:32d1091: 				stmt.execute("create view tab1_view (a,b) as select y,y+1 from tab1");
1:32d1091: 			}
1:32d1091: 		};
1:32d1091: 	}
1:32d1091: 	
1:32d1091: 	/**
1:32d1091: 	 * Sets the auto commit to false.
1:32d1091: 	 */
1:32d1091: 	protected void initializeConnection(Connection conn) throws SQLException {
1:32d1091: 		conn.setAutoCommit(false);
1:32d1091: 	}
1:32d1091: 	
1:32d1091: 	/**
1:32d1091: 	 * Select from base table.
1:32d1091: 	 * 
1:32d1091: 	 * @throws SQLException
1:32d1091: 	 */
1:32d1091: 	public void testSelect() throws SQLException {
1:32d1091: 		Statement s = createStatement();
1:32d1091: 		ResultSet rs;
1:32d1091: 		ResultSetMetaData rsmd;
1:32d1091: 		
1:32d1091: 		rs = s.executeQuery("select x,z from tab1");
1:32d1091: 		rsmd = rs.getMetaData();
1:32d1091: 		
1:32d1091: 		assertFalse("Column count doesn't match.", rsmd.getColumnCount() != 2);
1:32d1091: 		assertFalse("Column 1 is NOT ai.", rsmd.isAutoIncrement(1));
1:32d1091: 		assertFalse("Column 2 is NOT ai.", rsmd.isAutoIncrement(2));
1:32d1091: 		
1:32d1091: 		rs.close();
1:32d1091: 		
1:32d1091: 		rs = s.executeQuery("select y, x,z from tab1");
1:32d1091: 		rsmd = rs.getMetaData();
1:32d1091: 		
1:32d1091: 		assertFalse("Column count doesn't match.", rsmd.getColumnCount() != 3);
1:32d1091: 		assertFalse("Column 1 IS ai.", !rsmd.isAutoIncrement(1));
1:32d1091: 		assertFalse("Column 2 is NOT ai.", rsmd.isAutoIncrement(2));
1:32d1091: 		assertFalse("Column 3 is NOT ai.", rsmd.isAutoIncrement(3));
1:32d1091: 		
1:32d1091: 		rs.close();
1:32d1091: 		s.close();
1:32d1091: 	}
1:32d1091: 
1:32d1091: 	/**
1:32d1091: 	 * Select from view.
1:32d1091: 	 * 
1:32d1091: 	 * @throws SQLException
1:32d1091: 	 */
1:32d1091: 	public void testSelectView() throws SQLException {
1:32d1091: 		Statement s = createStatement();
1:32d1091: 		ResultSet rs;
1:32d1091: 		ResultSetMetaData rsmd;
1:32d1091: 		
1:32d1091: 		rs = s.executeQuery("select * from tab1_view");
1:32d1091: 		rsmd = rs.getMetaData();
1:32d1091: 		
1:32d1091: 		assertFalse("Column count doesn't match.", rsmd.getColumnCount() != 2);
1:32d1091: 		assertFalse("Column 1 IS ai.", !rsmd.isAutoIncrement(1));
1:32d1091: 		assertFalse("Column 1 is NOT ai.", rsmd.isAutoIncrement(2));
1:32d1091: 		
1:32d1091: 		rs.close();
1:32d1091: 		s.close();
1:32d1091: 	}
1:32d1091: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:32d1091
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AIjdbcTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test execution of JDBC method, isAutoincrement.
1:  */
1: public class AIjdbcTest extends BaseJDBCTestCase {
1: 
1: 	/**
1: 	 * Basic constructor.
1: 	 */
1: 	public AIjdbcTest(String name) {
1: 		super(name);
1: 	}
1: 	
1: 	/**
1: 	 * Returns the implemented tests.
1: 	 * 
1: 	 * @return An instance of <code>Test</code> with the implemented tests to
1: 	 *         run.
1: 	 */
1: 	public static Test suite() {
1: 		return new CleanDatabaseTestSetup(TestConfiguration.defaultSuite(AIjdbcTest.class, false)) {
1: 			protected void decorateSQL(Statement stmt) throws SQLException {
1: 				stmt.execute("create table tab1 (x int, y int generated always as identity,z char(2))");
1: 				stmt.execute("create view tab1_view (a,b) as select y,y+1 from tab1");
1: 			}
1: 		};
1: 	}
1: 	
1: 	/**
1: 	 * Sets the auto commit to false.
1: 	 */
1: 	protected void initializeConnection(Connection conn) throws SQLException {
1: 		conn.setAutoCommit(false);
1: 	}
1: 	
1: 	/**
1: 	 * Select from base table.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testSelect() throws SQLException {
1: 		Statement s = createStatement();
1: 		ResultSet rs;
1: 		ResultSetMetaData rsmd;
1: 		
1: 		rs = s.executeQuery("select x,z from tab1");
1: 		rsmd = rs.getMetaData();
1: 		
1: 		assertFalse("Column count doesn't match.", rsmd.getColumnCount() != 2);
1: 		assertFalse("Column 1 is NOT ai.", rsmd.isAutoIncrement(1));
1: 		assertFalse("Column 2 is NOT ai.", rsmd.isAutoIncrement(2));
1: 		
1: 		rs.close();
1: 		
1: 		rs = s.executeQuery("select y, x,z from tab1");
1: 		rsmd = rs.getMetaData();
1: 		
1: 		assertFalse("Column count doesn't match.", rsmd.getColumnCount() != 3);
1: 		assertFalse("Column 1 IS ai.", !rsmd.isAutoIncrement(1));
1: 		assertFalse("Column 2 is NOT ai.", rsmd.isAutoIncrement(2));
1: 		assertFalse("Column 3 is NOT ai.", rsmd.isAutoIncrement(3));
1: 		
1: 		rs.close();
1: 		s.close();
1: 	}
1: 
1: 	/**
1: 	 * Select from view.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testSelectView() throws SQLException {
1: 		Statement s = createStatement();
1: 		ResultSet rs;
1: 		ResultSetMetaData rsmd;
1: 		
1: 		rs = s.executeQuery("select * from tab1_view");
1: 		rsmd = rs.getMetaData();
1: 		
1: 		assertFalse("Column count doesn't match.", rsmd.getColumnCount() != 2);
1: 		assertFalse("Column 1 IS ai.", !rsmd.isAutoIncrement(1));
1: 		assertFalse("Column 1 is NOT ai.", rsmd.isAutoIncrement(2));
1: 		
1: 		rs.close();
1: 		s.close();
1: 	}
1: }
============================================================================