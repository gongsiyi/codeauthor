1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.RowLock
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
7:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A RowLock represents a qualifier that is to be used when
1:eac0369: 	locking a Row through a RecordHandle.
1:eac0369: 
1:eac0369: 	<BR>
1:eac0369: 	MT - Immutable
1:eac0369: 
1:eac0369: 	@see RecordHandle
1:eac0369: 	@see LockingPolicy
1:eac0369: */
1:eac0369: 
1:eac0369: public final class RowLock {
1:eac0369: 
1:0fe7da6: 	/** Integer representation of the type of the lock. */
1:eac0369: 	private final int   type;
1:0fe7da6: 	/** Bit mask with one bit set. The position of the bit tells the type of
1:0fe7da6: 	 * the lock. */
1:0fe7da6: 	private final int typeBit;
1:0fe7da6: 	/** Bit mask which represents the lock types that are compatible with this
1:0fe7da6: 	 * lock type. */
1:0fe7da6: 	private final int compat;
1:eac0369: 
1:eac0369:     // Names of locks for virtual lock table print out
1:5847a28: 	private static final String[] shortnames =  { "S", "S", "U", "U", "X", "X", "X", "X" };
1:eac0369: 
1:0fe7da6: 	/** Number of row locks. */
1:0fe7da6: 	public static final int R_NUMBER = 8;
1:0fe7da6: 
1:0fe7da6: 	/** Row lock compatibility table. */
1:5847a28: 	private static final boolean[][] R_COMPAT = {
1:0fe7da6:         //          Granted
1:0fe7da6:         // Request   RS2     RS3    RU2    RU3    RIP    RI     RX2    RX3
1:0fe7da6:         //
1:0fe7da6:         /* RS2 */    {true,  true,  true,  true,  true,  false, false, false },
1:0fe7da6:         /* RS3 */    {true,  true,  true,  true,  false, false, false, false },
1:0fe7da6:         /* RU2 */    {true,  true,  false, false, true,  false, false, false },
1:0fe7da6:         /* RU3 */    {true,  true,  false, false, false, false, false, false },
1:0fe7da6:         /* RIP */    {true,  false, true,  false, true,  true , true,  false },
1:0fe7da6:         /* RI  */    {false, false, false, false, true,  false, false, false },
1:0fe7da6:         /* RX2 */    {false, false, false, false, true,  false, false, false },
1:0fe7da6:         /* RX3 */    {false, false, false, false, false, false, false, false }
1:0fe7da6: 	};
1:0fe7da6: 
1:eac0369: 	/* Row Shared lock for repeatable read and below isolation level */
1:eac0369: 	public static final RowLock RS2  = new RowLock(0);
1:eac0369: 	/* Row Shared lock for serialized read isolation level */
1:eac0369: 	public static final RowLock RS3  = new RowLock(1);
1:eac0369: 	/* Row Update lock for reapeatable read and below isolation level*/
1:eac0369: 	public static final RowLock RU2  = new RowLock(2);
1:eac0369: 	/* Row Update lock for serializable isolation level*/
1:eac0369: 	public static final RowLock RU3  = new RowLock(3);
1:eac0369: 	/* Row Insert previous key lock */
1:eac0369: 	public static final RowLock RIP  = new RowLock(4);
1:eac0369: 	/* Row Insert lock */
1:eac0369: 	public static final RowLock RI   = new RowLock(5);
1:eac0369: 	/* Row exclusive write lock for repeatable read and below isolation level */
1:eac0369: 	public static final RowLock RX2  = new RowLock(6);
1:eac0369: 	/* Row exclusive write lock for serializable isolation level */
1:eac0369: 	public static final RowLock RX3  = new RowLock(7);
1:eac0369: 
1:eac0369:     /* lock debugging stuff */
1:eac0369:     public static final String DIAG_INDEX       = "index";
1:eac0369:     public static final String DIAG_XACTID      = "xactid";
1:eac0369:     public static final String DIAG_LOCKTYPE    = "locktype";
1:eac0369:     public static final String DIAG_LOCKMODE    = "lockmode";
1:eac0369:     public static final String DIAG_CONGLOMID   = "conglomId";
1:eac0369:     public static final String DIAG_CONTAINERID = "containerId";
1:eac0369:     public static final String DIAG_SEGMENTID   = "segmentId";
1:eac0369:     public static final String DIAG_PAGENUM     = "pageNum";
1:eac0369:     public static final String DIAG_RECID       = "RecId";
1:eac0369:     public static final String DIAG_COUNT       = "count";
1:eac0369:     public static final String DIAG_GROUP       = "group";
1:eac0369:     public static final String DIAG_STATE       = "state";
1:eac0369: 
1:eac0369: 	private RowLock(int type) {
1:eac0369: 		this.type = type;
1:0fe7da6: 		typeBit = (1 << type);
1:0fe7da6: 		int bitmask = 0;
1:0fe7da6: 		for (int i = 0; i < R_NUMBER; i++) {
1:0fe7da6: 			// set a bit in bitmask for each compatible lock type
1:0fe7da6: 			if (R_COMPAT[type][i]) {
1:0fe7da6: 				bitmask |= (1 << i);
1:0fe7da6: 			}
1:0fe7da6: 		}
1:0fe7da6: 		compat = bitmask;
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get an integer representation of the type of the lock. This method is 
1:dbed020:         guaranteed to return an integer &gt;= 0 and &lt; R_NUMBER. No correlation 
1:eac0369:         between the value and one of the static variables (CIS etc.) is 
1:eac0369:         guaranteed, except that the values returned do not change.
1:eac0369: 	*/
1:eac0369: 	public int getType() {
1:eac0369: 		return type;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean isCompatible(RowLock granted) {
1:0fe7da6: 		return (granted.typeBit & compat) != 0;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return shortnames[getType()];
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:         guaranteed to return an integer &gt;= 0 and &lt; R_NUMBER. No correlation 
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5847a28
/////////////////////////////////////////////////////////////////////////
1: 	private static final String[] shortnames =  { "S", "S", "U", "U", "X", "X", "X", "X" };
1: 	private static final boolean[][] R_COMPAT = {
commit:0fe7da6
/////////////////////////////////////////////////////////////////////////
1: 	/** Integer representation of the type of the lock. */
1: 	/** Bit mask with one bit set. The position of the bit tells the type of
1: 	 * the lock. */
1: 	private final int typeBit;
1: 	/** Bit mask which represents the lock types that are compatible with this
1: 	 * lock type. */
1: 	private final int compat;
1: 	/** Number of row locks. */
1: 	public static final int R_NUMBER = 8;
1: 
1: 	/** Row lock compatibility table. */
0: 	public static final boolean[][] R_COMPAT = {
1:         //          Granted
1:         // Request   RS2     RS3    RU2    RU3    RIP    RI     RX2    RX3
1:         //
1:         /* RS2 */    {true,  true,  true,  true,  true,  false, false, false },
1:         /* RS3 */    {true,  true,  true,  true,  false, false, false, false },
1:         /* RU2 */    {true,  true,  false, false, true,  false, false, false },
1:         /* RU3 */    {true,  true,  false, false, false, false, false, false },
1:         /* RIP */    {true,  false, true,  false, true,  true , true,  false },
1:         /* RI  */    {false, false, false, false, true,  false, false, false },
1:         /* RX2 */    {false, false, false, false, true,  false, false, false },
1:         /* RX3 */    {false, false, false, false, false, false, false, false }
1: 	};
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		typeBit = (1 << type);
1: 		int bitmask = 0;
1: 		for (int i = 0; i < R_NUMBER; i++) {
1: 			// set a bit in bitmask for each compatible lock type
1: 			if (R_COMPAT[type][i]) {
1: 				bitmask |= (1 << i);
1: 			}
1: 		}
1: 		compat = bitmask;
/////////////////////////////////////////////////////////////////////////
1: 		return (granted.typeBit & compat) != 0;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.RowLock
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw;
1: 
1: /**
1: 	A RowLock represents a qualifier that is to be used when
1: 	locking a Row through a RecordHandle.
1: 
1: 	<BR>
1: 	MT - Immutable
1: 
1: 	@see RecordHandle
1: 	@see LockingPolicy
1: */
1: 
1: public final class RowLock {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private final int   type;
1: 
1:     // Names of locks for virtual lock table print out
0: 	private static String[] shortnames =  { "S", "S", "U", "U", "X", "X", "X", "X" };
1: 
1: 	/* Row Shared lock for repeatable read and below isolation level */
1: 	public static final RowLock RS2  = new RowLock(0);
1: 	/* Row Shared lock for serialized read isolation level */
1: 	public static final RowLock RS3  = new RowLock(1);
1: 	/* Row Update lock for reapeatable read and below isolation level*/
1: 	public static final RowLock RU2  = new RowLock(2);
1: 	/* Row Update lock for serializable isolation level*/
1: 	public static final RowLock RU3  = new RowLock(3);
1: 	/* Row Insert previous key lock */
1: 	public static final RowLock RIP  = new RowLock(4);
1: 	/* Row Insert lock */
1: 	public static final RowLock RI   = new RowLock(5);
1: 	/* Row exclusive write lock for repeatable read and below isolation level */
1: 	public static final RowLock RX2  = new RowLock(6);
1: 	/* Row exclusive write lock for serializable isolation level */
1: 	public static final RowLock RX3  = new RowLock(7);
1: 
0: 	/** Number of row locks */
0: 	public static final int R_NUMBER = 8;
1: 
0: 	/** Row lock compatability table */
0: 	public static final boolean[][] R_COMPAT = {
0:         //          Granted
0:         // Request   RS2     RS3    RU2    RU3    RIP    RI     RX2    RX3
0:         //
0:         /* RS2 */    {true,  true,  true,  true,  true,  false, false, false },
0:         /* RS3 */    {true,  true,  true,  true,  false, false, false, false },
0:         /* RU2 */    {true,  true,  false, false, true,  false, false, false },
0:         /* RU3 */    {true,  true,  false, false, false, false, false, false },
0:         /* RIP */    {true,  false, true,  false, true,  true , true,  false },
0:         /* RI  */    {false, false, false, false, true,  false, false, false },
0:         /* RX2 */    {false, false, false, false, true,  false, false, false },
0:         /* RX3 */    {false, false, false, false, false, false, false, false }
0: 	};
1: 
1:     /* lock debugging stuff */
1:     public static final String DIAG_INDEX       = "index";
1:     public static final String DIAG_XACTID      = "xactid";
1:     public static final String DIAG_LOCKTYPE    = "locktype";
1:     public static final String DIAG_LOCKMODE    = "lockmode";
1:     public static final String DIAG_CONGLOMID   = "conglomId";
1:     public static final String DIAG_CONTAINERID = "containerId";
1:     public static final String DIAG_SEGMENTID   = "segmentId";
1:     public static final String DIAG_PAGENUM     = "pageNum";
1:     public static final String DIAG_RECID       = "RecId";
1:     public static final String DIAG_COUNT       = "count";
1:     public static final String DIAG_GROUP       = "group";
1:     public static final String DIAG_STATE       = "state";
1: 
1: 	private RowLock(int type) {
1: 		this.type = type;
1: 	}
1: 
1: 	/**
1: 		Get an integer representation of the type of the lock. This method is 
0:         guaranteed to return an integer >= 0 and < R_NUMBER. No correlation 
1:         between the value and one of the static variables (CIS etc.) is 
1:         guaranteed, except that the values returned do not change.
1: 	*/
1: 	public int getType() {
1: 		return type;
1: 	}
1: 
1: 	public boolean isCompatible(RowLock granted) {
1: 
0: 		return isCompatible(granted.getType());
1: 	}
1: 
0: 	public boolean isCompatible(int granted) {
1: 
0: 		return R_COMPAT[getType()][granted];
1: 	}
1: 
1: 	public String toString()
1: 	{
1: 		return shortnames[getType()];
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw;
0: 
0: /**
0: 	A RowLock represents a qualifier that is to be used when
0: 	locking a Row through a RecordHandle.
0: 
0: 	<BR>
0: 	MT - Immutable
0: 
0: 	@see RecordHandle
0: 	@see LockingPolicy
0: */
0: 
0: public final class RowLock {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private final int   type;
0: 
0:     // Names of locks for virtual lock table print out
0: 	private static String[] shortnames =  { "S", "S", "U", "U", "X", "X", "X", "X" };
0: 
0: 	/* Row Shared lock for repeatable read and below isolation level */
0: 	public static final RowLock RS2  = new RowLock(0);
0: 	/* Row Shared lock for serialized read isolation level */
0: 	public static final RowLock RS3  = new RowLock(1);
0: 	/* Row Update lock for reapeatable read and below isolation level*/
0: 	public static final RowLock RU2  = new RowLock(2);
0: 	/* Row Update lock for serializable isolation level*/
0: 	public static final RowLock RU3  = new RowLock(3);
0: 	/* Row Insert previous key lock */
0: 	public static final RowLock RIP  = new RowLock(4);
0: 	/* Row Insert lock */
0: 	public static final RowLock RI   = new RowLock(5);
0: 	/* Row exclusive write lock for repeatable read and below isolation level */
0: 	public static final RowLock RX2  = new RowLock(6);
0: 	/* Row exclusive write lock for serializable isolation level */
0: 	public static final RowLock RX3  = new RowLock(7);
0: 
0: 	/** Number of row locks */
0: 	public static final int R_NUMBER = 8;
0: 
0: 	/** Row lock compatability table */
0: 	public static final boolean[][] R_COMPAT = {
0:         //          Granted
0:         // Request   RS2     RS3    RU2    RU3    RIP    RI     RX2    RX3
0:         //
0:         /* RS2 */    {true,  true,  true,  true,  true,  false, false, false },
0:         /* RS3 */    {true,  true,  true,  true,  false, false, false, false },
0:         /* RU2 */    {true,  true,  false, false, true,  false, false, false },
0:         /* RU3 */    {true,  true,  false, false, false, false, false, false },
0:         /* RIP */    {true,  false, true,  false, true,  true , true,  false },
0:         /* RI  */    {false, false, false, false, true,  false, false, false },
0:         /* RX2 */    {false, false, false, false, true,  false, false, false },
0:         /* RX3 */    {false, false, false, false, false, false, false, false }
0: 	};
0: 
0:     /* lock debugging stuff */
0:     public static final String DIAG_INDEX       = "index";
0:     public static final String DIAG_XACTID      = "xactid";
0:     public static final String DIAG_LOCKTYPE    = "locktype";
0:     public static final String DIAG_LOCKMODE    = "lockmode";
0:     public static final String DIAG_CONGLOMID   = "conglomId";
0:     public static final String DIAG_CONTAINERID = "containerId";
0:     public static final String DIAG_SEGMENTID   = "segmentId";
0:     public static final String DIAG_PAGENUM     = "pageNum";
0:     public static final String DIAG_RECID       = "RecId";
0:     public static final String DIAG_COUNT       = "count";
0:     public static final String DIAG_GROUP       = "group";
0:     public static final String DIAG_STATE       = "state";
0: 
0: 	private RowLock(int type) {
0: 		this.type = type;
0: 	}
0: 
0: 	/**
0: 		Get an integer representation of the type of the lock. This method is 
0:         guaranteed to return an integer >= 0 and < R_NUMBER. No correlation 
0:         between the value and one of the static variables (CIS etc.) is 
0:         guaranteed, except that the values returned do not change.
0: 	*/
0: 	public int getType() {
0: 		return type;
0: 	}
0: 
0: 	public boolean isCompatible(RowLock granted) {
0: 
0: 		return isCompatible(granted.getType());
0: 	}
0: 
0: 	public boolean isCompatible(int granted) {
0: 
0: 		return R_COMPAT[getType()][granted];
0: 	}
0: 
0: 	public String toString()
0: 	{
0: 		return shortnames[getType()];
0: 	}
0: }
============================================================================