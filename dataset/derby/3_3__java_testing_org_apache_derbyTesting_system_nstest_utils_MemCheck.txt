1:b8d1d8a: /*
1:b8d1d8a:  
1:b8d1d8a:  Derby - Class org.apache.derbyTesting.system.nstest.utils.MemCheck
1:b8d1d8a:  
1:b8d1d8a:  Licensed to the Apache Software Foundation (ASF) under one or more
1:b8d1d8a:  contributor license agreements.  See the NOTICE file distributed with
1:b8d1d8a:  this work for additional information regarding copyright ownership.
1:b8d1d8a:  The ASF licenses this file to You under the Apache License, Version 2.0
1:b8d1d8a:  (the "License"); you may not use this file except in compliance with
1:b8d1d8a:  the License.  You may obtain a copy of the License at
1:b8d1d8a:  
1:b8d1d8a:  http://www.apache.org/licenses/LICENSE-2.0
1:b8d1d8a:  
1:b8d1d8a:  Unless required by applicable law or agreed to in writing, software
1:b8d1d8a:  distributed under the License is distributed on an "AS IS" BASIS,
1:b8d1d8a:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b8d1d8a:  See the License for the specific language governing permissions and
1:b8d1d8a:  limitations under the License.
1:b8d1d8a:  
1:b8d1d8a:  */
1:b8d1d8a: 
1:b8d1d8a: package org.apache.derbyTesting.system.nstest.utils;
1:b8d1d8a: 
1:b8d1d8a: import java.util.Date;
1:b8d1d8a: 
1:2f32608: import org.apache.derbyTesting.system.nstest.NsTest;
1:2f32608: 
1:b8d1d8a: /**
1:b8d1d8a:  * MemCheck - a background thread that prints current memory usage
1:b8d1d8a:  */
1:b8d1d8a: public class MemCheck extends Thread {
1:b8d1d8a: 
1:b8d1d8a: 	int delay = 200000;
1:b8d1d8a: 
1:b8d1d8a: 	public boolean stopNow = false;
1:b8d1d8a: 
1:b8d1d8a: 	public MemCheck() {
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	public MemCheck(int num) {
1:b8d1d8a: 		delay = num;
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	/*
1:b8d1d8a: 	 * Implementation of run() method to check memory
1:b8d1d8a: 	 * 
1:b8d1d8a: 	 */
1:b8d1d8a: 	public void run() {
1:b8d1d8a: 		while (stopNow == false) {
1:b8d1d8a: 			try {
1:b8d1d8a: 				showmem();
1:b8d1d8a: 				sleep(delay);
1:2f32608:                 
1:2f32608: 				// first check if there are still active tester threads, so 
1:2f32608: 				// we do not make backups on an unchanged db every 10 mins for
1:2f32608: 				// the remainder of MAX_ITERATIONS.
1:2f32608: 				if (NsTest.numActiveTestThreads() != 0 && NsTest.numActiveTestThreads() > 1)
1:2f32608: 				{
1:2f32608: 					continue;
1:2f32608: 				}
1:2f32608: 				else
1:2f32608: 				{
1:c043274: 					NsTest.logger.println("no more test threads, finishing memcheck thread also");
1:2f32608: 					showmem();
1:2f32608: 					stopNow=true;
1:2f32608: 				}
1:b8d1d8a: 			} catch (java.lang.InterruptedException ie) {
1:c043274: 				NsTest.logger.println("memcheck: unexpected error in sleep");
1:b8d1d8a: 			}
1:b8d1d8a: 		}
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	/*
1:b8d1d8a: 	 * Print the current memory status
1:b8d1d8a: 	 */
1:b8d1d8a: 	public static void showmem() {
1:b8d1d8a: 		Runtime rt = null;
1:b8d1d8a: 		Date d = null;
1:b8d1d8a: 		rt = Runtime.getRuntime();
1:e225bfb:         long    totalMemory = rt.totalMemory();
1:e225bfb:         long    freeMemory = rt.freeMemory();
1:b8d1d8a: 		d = new Date();
1:e225bfb:         NsTest.updateMemoryTracker( totalMemory, freeMemory, d );
1:e225bfb: 		NsTest.logger.println("total memory: " + totalMemory + " free: "
1:e225bfb: 				+ freeMemory + " " + d.toString());
1:b8d1d8a: 
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	public static void main(String argv[]) {
1:c043274: 		NsTest.logger.println("memCheck starting");
1:b8d1d8a: 		MemCheck mc = new MemCheck();
1:b8d1d8a: 		mc.run();
1:b8d1d8a: 	}
1:b8d1d8a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e225bfb
/////////////////////////////////////////////////////////////////////////
1:         long    totalMemory = rt.totalMemory();
1:         long    freeMemory = rt.freeMemory();
1:         NsTest.updateMemoryTracker( totalMemory, freeMemory, d );
1: 		NsTest.logger.println("total memory: " + totalMemory + " free: "
1: 				+ freeMemory + " " + d.toString());
commit:c043274
/////////////////////////////////////////////////////////////////////////
1: 					NsTest.logger.println("no more test threads, finishing memcheck thread also");
1: 				NsTest.logger.println("memcheck: unexpected error in sleep");
/////////////////////////////////////////////////////////////////////////
0: 		NsTest.logger.println("total memory: " + rt.totalMemory() + " free: "
1: 		NsTest.logger.println("memCheck starting");
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:2f32608
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.system.nstest.NsTest;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 
1: 				// first check if there are still active tester threads, so 
1: 				// we do not make backups on an unchanged db every 10 mins for
1: 				// the remainder of MAX_ITERATIONS.
1: 				if (NsTest.numActiveTestThreads() != 0 && NsTest.numActiveTestThreads() > 1)
1: 				{
1: 					continue;
1: 				}
1: 				else
1: 				{
0: 					System.out.println("no more test threads, finishing memcheck thread also");
1: 					showmem();
1: 					stopNow=true;
1: 				}
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:b8d1d8a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:  Derby - Class org.apache.derbyTesting.system.nstest.utils.MemCheck
1:  
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1:  
1:  http://www.apache.org/licenses/LICENSE-2.0
1:  
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.system.nstest.utils;
1: 
1: import java.util.Date;
1: 
1: /**
1:  * MemCheck - a background thread that prints current memory usage
1:  */
1: public class MemCheck extends Thread {
1: 
1: 	int delay = 200000;
1: 
1: 	public boolean stopNow = false;
1: 
1: 	public MemCheck() {
1: 	}
1: 
1: 	public MemCheck(int num) {
1: 		delay = num;
1: 	}
1: 
1: 	/*
1: 	 * Implementation of run() method to check memory
1: 	 * 
1: 	 */
1: 	public void run() {
1: 		while (stopNow == false) {
1: 			try {
1: 				showmem();
1: 				sleep(delay);
1: 			} catch (java.lang.InterruptedException ie) {
0: 				System.out.println("memcheck: unexpected error in sleep");
1: 			}
1: 		}
1: 	}
1: 
1: 	/*
1: 	 * Print the current memory status
1: 	 */
1: 	public static void showmem() {
1: 		Runtime rt = null;
1: 		Date d = null;
1: 		rt = Runtime.getRuntime();
1: 		d = new Date();
0: 		System.out.println("total memory: " + rt.totalMemory() + " free: "
0: 				+ rt.freeMemory() + " " + d.toString());
1: 
1: 	}
1: 
1: 	public static void main(String argv[]) {
0: 		System.out.println("memCheck starting");
1: 		MemCheck mc = new MemCheck();
1: 		mc.run();
1: 	}
1: }
============================================================================