1:782dbe1: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:782dbe1:  */
1:782dbe1: 
1:48a9884: package org.apache.derby.impl.sql.catalog;
1:48a9884: 
1:48a9884: import java.sql.PreparedStatement;
1:48a9884: import java.sql.SQLException;
1:48a9884: 
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:4771f1f: import org.apache.derby.iapi.types.TypeId;
1:48a9884: import java.sql.Types;
1:48a9884: 
1:48a9884: public class XPLAINResultSetDescriptor extends XPLAINTableDescriptor 
1:48a9884: {
1:48a9884: 
1:48a9884:     private UUID rs_id           ; // the result set UUID identifier
1:48a9884:     private String op_identifier ; // the operator code identifier
1:48a9884:     private String op_details     ;     // the operator details, operator-specific information
1:48a9884:     private Integer no_opens      ; // the number of open calls of this resultset 
1:48a9884:     private Integer no_index_updates; // the number of index updates, executed by this dml write operation
1:48a9884:     private String lock_granularity; // the lock granularity, either (T)able or (R)ow locking
1:48a9884:     private String lock_mode;  // the lock mode, either instant share, share or instant exclusive, exclusive 
1:48a9884:     private UUID parent_rs_id; // the parent UUID of this resultset, null if root (top) resultset
1:48a9884:     private Double est_row_count; // the estimated row count, forwarded by the optimizer
1:48a9884:     private Double est_cost; // the estimated costs, forwarded by the optimizer
1:48a9884:     private Integer affected_rows; // the affected rows, specific for insert/update/delete stmts
1:48a9884:     private String  deferred_rows; // the deferred rows, specific for insert/update/delete stmts
1:48a9884:     private Integer input_rows; // the number of input rows
1:48a9884:     private Integer seen_rows; // the seen rows from this operator 
1:48a9884:     private Integer seen_rows_right; // the seen right rows from this operator, only filled by a join operator, seen_rows has then the rows from the outer(left) partner of the join 
1:48a9884:     private Integer filtered_rows; // the filtered rows
1:48a9884:     private Integer returned_rows; // the returned rows
1:48a9884:     private Integer empty_right_rows; // the number of empty right rows 
1:48a9884:     private String index_key_optimization; // does this node use index key optimization
1:48a9884:     private UUID scan_rs_id; // the UUID of the scan info properties of this node, if this node is a scan node, otherwise null
1:48a9884:     private UUID sort_rs_id; // the UUID of the sort info properties of this node. if this node is a groupby or sort node, otherwise null
1:48a9884:     private UUID stmt_id; // the UUID of the statement, which this resultset belongs to
1:48a9884:     private UUID timing_id; // the UUID of the resultset timing information, if statistics timing was on, otherwise null
1:48a9884:     
1:48a9884:     public XPLAINResultSetDescriptor() {}
1:48a9884:     public XPLAINResultSetDescriptor
1:48a9884:     (
1:48a9884:              UUID rs_id,
1:48a9884:              String op_identifier,
1:48a9884:              String op_details,
1:48a9884:              Integer no_opens,
1:48a9884:              Integer no_index_updates,
1:48a9884:              String lock_mode,
1:48a9884:              String lock_granularity,
1:48a9884:              UUID parent_rs_id,
1:48a9884:              Double est_row_count,
1:48a9884:              Double est_cost,
1:48a9884:              Integer affected_rows,
1:48a9884:              String deferred_rows,
1:48a9884:              Integer input_rows,
1:48a9884:              Integer seen_rows,
1:48a9884:              Integer seen_rows_right,
1:48a9884:              Integer filtered_rows,
1:48a9884:              Integer returned_rows,
1:48a9884:              Integer empty_right_rows,
1:48a9884:              String index_key_optimization,
1:48a9884:              UUID scan_rs_id,
1:48a9884:              UUID sort_rs_id,
1:48a9884:              UUID stmt_id,
1:48a9884:              UUID timing_id
1:48a9884:     )
1:48a9884:     {
1:48a9884: 
1:48a9884:         this.rs_id=  rs_id;
1:48a9884:         this.op_identifier = op_identifier;
1:48a9884:         this.op_details = op_details;
1:48a9884:         this.no_opens = no_opens;
1:48a9884:         this.no_index_updates = no_index_updates;
1:48a9884:         this.lock_granularity = lock_granularity;
1:48a9884:         this.lock_mode = lock_mode;
1:48a9884:         this.parent_rs_id = parent_rs_id;
1:48a9884:         this.est_row_count = est_row_count;
1:48a9884:         this.est_cost = est_cost;
1:48a9884:         this.affected_rows = affected_rows;
1:48a9884:         this.deferred_rows = deferred_rows;
1:48a9884:         this.input_rows = input_rows;
1:48a9884:         this.seen_rows = seen_rows;
1:48a9884:         this.seen_rows_right = seen_rows_right;
1:48a9884:         this.filtered_rows = filtered_rows;
1:48a9884:         this.returned_rows = returned_rows;
1:48a9884:         this.empty_right_rows = empty_right_rows;
1:48a9884:         this.index_key_optimization = index_key_optimization;
1:48a9884:         this.scan_rs_id = scan_rs_id;
1:48a9884:         this.sort_rs_id = sort_rs_id;
1:48a9884:         this.stmt_id = stmt_id;
1:48a9884:         this.timing_id = timing_id;
1:48a9884:         
1:48a9884:     }
1:48a9884:     public void setStatementParameters(PreparedStatement ps)
1:48a9884:         throws SQLException
1:48a9884:     {
1:48a9884:         ps.setString(1, rs_id.toString());
1:48a9884:         ps.setString(2, op_identifier);
1:48a9884:         ps.setString(3, op_details);
1:638cea5:         ps.setObject(4, no_opens, Types.INTEGER);
1:638cea5:         ps.setObject(5, no_index_updates, Types.INTEGER);
1:48a9884:         ps.setString(6, lock_mode);
1:48a9884:         ps.setString(7, lock_granularity);
1:48a9884:         ps.setString(8, (parent_rs_id != null ? parent_rs_id.toString():null));
1:638cea5:         ps.setObject(9, est_row_count, Types.DOUBLE);
1:638cea5:         ps.setObject(10, est_cost, Types.DOUBLE);
1:638cea5:         ps.setObject(11, affected_rows, Types.INTEGER);
1:48a9884:         ps.setString(12, deferred_rows);
1:638cea5:         ps.setObject(13, input_rows, Types.INTEGER);
1:638cea5:         ps.setObject(14, seen_rows, Types.INTEGER);
1:638cea5:         ps.setObject(15, seen_rows_right, Types.INTEGER);
1:638cea5:         ps.setObject(16, filtered_rows, Types.INTEGER);
1:638cea5:         ps.setObject(17, returned_rows, Types.INTEGER);
1:638cea5:         ps.setObject(18, empty_right_rows, Types.INTEGER);
1:48a9884:         ps.setString(19, index_key_optimization);
1:48a9884:         ps.setString(20, (scan_rs_id != null ? scan_rs_id.toString():null));
1:48a9884:         ps.setString(21, (sort_rs_id != null ? sort_rs_id.toString():null));
1:48a9884:         ps.setString(22, (stmt_id != null ? stmt_id.toString():null));
1:48a9884:         ps.setString(23, (timing_id != null ? timing_id.toString():null));
1:48a9884:     }
1:48a9884:     
1:48a9884:     public String getCatalogName() { return TABLENAME_STRING; }
1:48a9884:     static final String             TABLENAME_STRING = "SYSXPLAIN_RESULTSETS";
1:48a9884: 
1:48a9884:     private static final String[][] indexColumnNames =
1:48a9884:     {
1:48a9884:         {"RS_ID"}
1:48a9884:     };
1:48a9884: 
1:48a9884:     /**
1:48a9884:      * Builds a list of columns suitable for creating this Catalog.
1:48a9884:      *
1:48a9884:      * @return array of SystemColumn suitable for making this catalog.
1:48a9884:      */
1:48a9884:     public SystemColumn[] buildColumnList() {
1:48a9884:         
1:48a9884:         return new SystemColumn[] {
1:48a9884:             SystemColumnImpl.getUUIDColumn("RS_ID", false),
1:4771f1f:             SystemColumnImpl.getColumn("OP_IDENTIFIER", Types.VARCHAR, false,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:4771f1f:             SystemColumnImpl.getColumn("OP_DETAILS", Types.VARCHAR, true,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:48a9884:             SystemColumnImpl.getColumn("NO_OPENS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("NO_INDEX_UPDATES", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("LOCK_MODE", Types.CHAR, true, 2),
1:48a9884:             SystemColumnImpl.getColumn("LOCK_GRANULARITY", Types.CHAR, true, 1),
1:48a9884:             SystemColumnImpl.getUUIDColumn("PARENT_RS_ID", true),
1:48a9884:             SystemColumnImpl.getColumn("EST_ROW_COUNT", Types.DOUBLE, true),
1:48a9884:             SystemColumnImpl.getColumn("EST_COST", Types.DOUBLE, true),
1:48a9884:             SystemColumnImpl.getColumn("AFFECTED_ROWS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("DEFERRED_ROWS", Types.CHAR, true, 1),
1:48a9884:             SystemColumnImpl.getColumn("INPUT_ROWS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("SEEN_ROWS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("SEEN_ROWS_RIGHT", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("FILTERED_ROWS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("RETURNED_ROWS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("EMPTY_RIGHT_ROWS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("INDEX_KEY_OPT", Types.CHAR, true, 1),
1:48a9884:             SystemColumnImpl.getUUIDColumn("SCAN_RS_ID", true),
1:48a9884:             SystemColumnImpl.getUUIDColumn("SORT_RS_ID", true),
1:48a9884:             SystemColumnImpl.getUUIDColumn("STMT_ID", false),
1:48a9884:             SystemColumnImpl.getUUIDColumn("TIMING_ID", true),
1:48a9884:         };
1:48a9884:     }
1:48a9884: 
1:48a9884: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:638cea5
/////////////////////////////////////////////////////////////////////////
1:         ps.setObject(4, no_opens, Types.INTEGER);
1:         ps.setObject(5, no_index_updates, Types.INTEGER);
1:         ps.setObject(9, est_row_count, Types.DOUBLE);
1:         ps.setObject(10, est_cost, Types.DOUBLE);
1:         ps.setObject(11, affected_rows, Types.INTEGER);
1:         ps.setObject(13, input_rows, Types.INTEGER);
1:         ps.setObject(14, seen_rows, Types.INTEGER);
1:         ps.setObject(15, seen_rows_right, Types.INTEGER);
1:         ps.setObject(16, filtered_rows, Types.INTEGER);
1:         ps.setObject(17, returned_rows, Types.INTEGER);
1:         ps.setObject(18, empty_right_rows, Types.INTEGER);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:4771f1f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
1:             SystemColumnImpl.getColumn("OP_IDENTIFIER", Types.VARCHAR, false,
1:                     TypeId.VARCHAR_MAXWIDTH),
1:             SystemColumnImpl.getColumn("OP_DETAILS", Types.VARCHAR, true,
1:                     TypeId.VARCHAR_MAXWIDTH),
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.impl.sql.catalog.SystemColumnImpl;
1: import java.sql.Types;
1: 
1: public class XPLAINResultSetDescriptor extends XPLAINTableDescriptor 
1: {
1: 
1:     private UUID rs_id           ; // the result set UUID identifier
1:     private String op_identifier ; // the operator code identifier
1:     private String op_details     ;     // the operator details, operator-specific information
1:     private Integer no_opens      ; // the number of open calls of this resultset 
1:     private Integer no_index_updates; // the number of index updates, executed by this dml write operation
1:     private String lock_granularity; // the lock granularity, either (T)able or (R)ow locking
1:     private String lock_mode;  // the lock mode, either instant share, share or instant exclusive, exclusive 
1:     private UUID parent_rs_id; // the parent UUID of this resultset, null if root (top) resultset
1:     private Double est_row_count; // the estimated row count, forwarded by the optimizer
1:     private Double est_cost; // the estimated costs, forwarded by the optimizer
1:     private Integer affected_rows; // the affected rows, specific for insert/update/delete stmts
1:     private String  deferred_rows; // the deferred rows, specific for insert/update/delete stmts
1:     private Integer input_rows; // the number of input rows
1:     private Integer seen_rows; // the seen rows from this operator 
1:     private Integer seen_rows_right; // the seen right rows from this operator, only filled by a join operator, seen_rows has then the rows from the outer(left) partner of the join 
1:     private Integer filtered_rows; // the filtered rows
1:     private Integer returned_rows; // the returned rows
1:     private Integer empty_right_rows; // the number of empty right rows 
1:     private String index_key_optimization; // does this node use index key optimization
1:     private UUID scan_rs_id; // the UUID of the scan info properties of this node, if this node is a scan node, otherwise null
1:     private UUID sort_rs_id; // the UUID of the sort info properties of this node. if this node is a groupby or sort node, otherwise null
1:     private UUID stmt_id; // the UUID of the statement, which this resultset belongs to
1:     private UUID timing_id; // the UUID of the resultset timing information, if statistics timing was on, otherwise null
1:     
1:     public XPLAINResultSetDescriptor() {}
1:     public XPLAINResultSetDescriptor
1:     (
1:              UUID rs_id,
1:              String op_identifier,
1:              String op_details,
1:              Integer no_opens,
1:              Integer no_index_updates,
1:              String lock_mode,
1:              String lock_granularity,
1:              UUID parent_rs_id,
1:              Double est_row_count,
1:              Double est_cost,
1:              Integer affected_rows,
1:              String deferred_rows,
1:              Integer input_rows,
1:              Integer seen_rows,
1:              Integer seen_rows_right,
1:              Integer filtered_rows,
1:              Integer returned_rows,
1:              Integer empty_right_rows,
1:              String index_key_optimization,
1:              UUID scan_rs_id,
1:              UUID sort_rs_id,
1:              UUID stmt_id,
1:              UUID timing_id
1:     )
1:     {
1: 
1:         this.rs_id=  rs_id;
1:         this.op_identifier = op_identifier;
1:         this.op_details = op_details;
1:         this.no_opens = no_opens;
1:         this.no_index_updates = no_index_updates;
1:         this.lock_granularity = lock_granularity;
1:         this.lock_mode = lock_mode;
1:         this.parent_rs_id = parent_rs_id;
1:         this.est_row_count = est_row_count;
1:         this.est_cost = est_cost;
1:         this.affected_rows = affected_rows;
1:         this.deferred_rows = deferred_rows;
1:         this.input_rows = input_rows;
1:         this.seen_rows = seen_rows;
1:         this.seen_rows_right = seen_rows_right;
1:         this.filtered_rows = filtered_rows;
1:         this.returned_rows = returned_rows;
1:         this.empty_right_rows = empty_right_rows;
1:         this.index_key_optimization = index_key_optimization;
1:         this.scan_rs_id = scan_rs_id;
1:         this.sort_rs_id = sort_rs_id;
1:         this.stmt_id = stmt_id;
1:         this.timing_id = timing_id;
1:         
1:     }
1:     public void setStatementParameters(PreparedStatement ps)
1:         throws SQLException
1:     {
1:         ps.setString(1, rs_id.toString());
1:         ps.setString(2, op_identifier);
1:         ps.setString(3, op_details);
0:         if (no_opens != null)
0:             ps.setInt(4, no_opens.intValue());
0:         else
0:             ps.setNull(4, Types.INTEGER);
0:         if (no_index_updates != null)
0:             ps.setInt(5, no_index_updates.intValue());
0:         else
0:             ps.setNull(5, Types.INTEGER);
1:         ps.setString(6, lock_mode);
1:         ps.setString(7, lock_granularity);
1:         ps.setString(8, (parent_rs_id != null ? parent_rs_id.toString():null));
0:         if (est_row_count != null)
0:             ps.setDouble(9, est_row_count.doubleValue());
0:         else
0:             ps.setNull(9, Types.DOUBLE);
0:         if (est_cost != null)
0:             ps.setDouble(10, est_cost.doubleValue());
0:         else
0:             ps.setNull(10, Types.DOUBLE);
0:         if (affected_rows != null)
0:             ps.setInt(11, affected_rows.intValue());
0:         else
0:             ps.setNull(11, Types.INTEGER);
1:         ps.setString(12, deferred_rows);
0:         if (input_rows != null)
0:             ps.setInt(13, input_rows.intValue());
0:         else
0:             ps.setNull(13, Types.INTEGER);
0:         if (seen_rows != null)
0:             ps.setInt(14, seen_rows.intValue());
0:         else
0:             ps.setNull(14, Types.INTEGER);
0:         if (seen_rows_right != null)
0:             ps.setInt(15, seen_rows_right.intValue());
0:         else
0:             ps.setNull(15, Types.INTEGER);
0:         if (filtered_rows != null)
0:             ps.setInt(16, filtered_rows.intValue());
0:         else
0:             ps.setNull(16, Types.INTEGER);
0:         if (returned_rows != null)
0:             ps.setInt(17, returned_rows.intValue());
0:         else
0:             ps.setNull(17, Types.INTEGER);
0:         if (empty_right_rows != null)
0:             ps.setInt(18, empty_right_rows.intValue());
0:         else
0:             ps.setNull(18, Types.INTEGER);
1:         ps.setString(19, index_key_optimization);
1:         ps.setString(20, (scan_rs_id != null ? scan_rs_id.toString():null));
1:         ps.setString(21, (sort_rs_id != null ? sort_rs_id.toString():null));
1:         ps.setString(22, (stmt_id != null ? stmt_id.toString():null));
1:         ps.setString(23, (timing_id != null ? timing_id.toString():null));
1:     }
1:     
1:     public String getCatalogName() { return TABLENAME_STRING; }
1:     static final String             TABLENAME_STRING = "SYSXPLAIN_RESULTSETS";
1: 
1:     private static final String[][] indexColumnNames =
1:     {
1:         {"RS_ID"}
1:     };
1: 
1:     /**
1:      * Builds a list of columns suitable for creating this Catalog.
1:      *
1:      * @return array of SystemColumn suitable for making this catalog.
1:      */
1:     public SystemColumn[] buildColumnList() {
1:         
1:         return new SystemColumn[] {
1:             SystemColumnImpl.getUUIDColumn("RS_ID", false),
0:             SystemColumnImpl.getColumn("OP_IDENTIFIER",Types.VARCHAR,false,30),
0:             SystemColumnImpl.getColumn("OP_DETAILS", Types.VARCHAR, true, 256),
1:             SystemColumnImpl.getColumn("NO_OPENS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("NO_INDEX_UPDATES", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("LOCK_MODE", Types.CHAR, true, 2),
1:             SystemColumnImpl.getColumn("LOCK_GRANULARITY", Types.CHAR, true, 1),
1:             SystemColumnImpl.getUUIDColumn("PARENT_RS_ID", true),
1:             SystemColumnImpl.getColumn("EST_ROW_COUNT", Types.DOUBLE, true),
1:             SystemColumnImpl.getColumn("EST_COST", Types.DOUBLE, true),
1:             SystemColumnImpl.getColumn("AFFECTED_ROWS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("DEFERRED_ROWS", Types.CHAR, true, 1),
1:             SystemColumnImpl.getColumn("INPUT_ROWS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("SEEN_ROWS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("SEEN_ROWS_RIGHT", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("FILTERED_ROWS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("RETURNED_ROWS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("EMPTY_RIGHT_ROWS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("INDEX_KEY_OPT", Types.CHAR, true, 1),
1:             SystemColumnImpl.getUUIDColumn("SCAN_RS_ID", true),
1:             SystemColumnImpl.getUUIDColumn("SORT_RS_ID", true),
1:             SystemColumnImpl.getUUIDColumn("STMT_ID", false),
1:             SystemColumnImpl.getUUIDColumn("TIMING_ID", true),
1:         };
1:     }
1: 
1: }
============================================================================