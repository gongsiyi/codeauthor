1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.monitor.FileMonitor
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:a52b264: 
2:eac0369:  */
21:eac0369: 
1:eac0369: package org.apache.derby.impl.services.monitor;
1:eac0369: 
1:eac0369: import java.io.File;
1:850aba4: import java.io.FileInputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.InputStream;
1:850aba4: import java.io.PrintWriter;
1:7adbb9a: import java.security.AccessController;
1:7adbb9a: import java.security.PrivilegedAction;
1:7adbb9a: import java.security.PrivilegedExceptionAction;
1:55720b3: import java.util.HashMap;
1:55720b3: import java.util.Map;
1:3d61c1c: import java.util.Properties;
1:850aba4: import org.apache.derby.iapi.reference.Property;
1:55720b3: import org.apache.derby.iapi.services.i18n.MessageService;
1:850aba4: import org.apache.derby.iapi.services.info.ProductGenusNames;
1:850aba4: import org.apache.derby.iapi.services.info.ProductVersionHolder;
1:850aba4: import org.apache.derby.iapi.services.io.FileUtil;
1:55720b3: import org.apache.derby.shared.common.reference.MessageId;
1:7adbb9a: 
2:eac0369: /**
1:eac0369: 	Implementation of the monitor that uses the class loader
1:eac0369: 	that the its was loaded in for all class loading.
1:eac0369: 
1:eac0369: */
1:eac0369: 
1:7adbb9a: public final class FileMonitor extends BaseMonitor
1:a11b076: {
1:eac0369: 
1:eac0369: 	/* Fields */
1:eac0369: 	private File home;
1:eac0369: 
1:eac0369: 	private ProductVersionHolder engineVersion;
1:eac0369: 
1:eac0369: 	public FileMonitor() {
1:eac0369: 		initialize(true);
1:eac0369: 		applicationProperties = readApplicationProperties();
18:eac0369: 	}
1:eac0369: 
1:850aba4: 	public FileMonitor(Properties properties, PrintWriter log) {
1:eac0369: 		runWithState(properties, log);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	private InputStream PBapplicationPropertiesStream()
1:eac0369: 	  throws IOException {
1:eac0369: 
1:8d4d087:         File sr = new File(home, Property.PROPERTIES_FILE);
1:eac0369: 
1:eac0369: 		if (!sr.exists())
4:eac0369: 			return null;
1:eac0369: 
1:eac0369: 		return new FileInputStream(sr);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Object getEnvironment() {
1:eac0369: 		return home;
1:eac0369: 	}
1:eac0369: 
1:a11b076:     /**
1:a11b076:      * Create a ThreadGroup and set the daemon property to make sure
1:a11b076:      * the group is destroyed and garbage collected when all its
1:a11b076:      * members have finished (i.e., either when the driver is
1:a11b076:      * unloaded, or when the last database is shut down).
1:a2ecbd3:      *
1:a2ecbd3:      * @return the thread group "derby.daemons" or null if we saw
1:a2ecbd3:      * a SecurityException
1:a11b076:      */
1:a2ecbd3:     private ThreadGroup createDaemonGroup() {
1:a11b076:         try {
1:a11b076:             ThreadGroup group = new ThreadGroup("derby.daemons");
1:a11b076:             group.setDaemon(true);
1:a11b076:             return group;
1:a11b076:         } catch (SecurityException se) {
1:a2ecbd3:             // In case of a lacking privilege, issue a warning, return null and
1:a2ecbd3:             // let the daemon threads be created in the default thread group.
1:a2ecbd3:             // This can only happen if the current Derby thread is a part of
1:a2ecbd3:             // the root thread group "system".
1:a2ecbd3:             reportThread(se);
1:a11b076:             return null;
1:a11b076:         }
1:a11b076:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		SECURITY WARNING.
1:eac0369: 
1:ec8172b: 		This method is run in a privileged block in a Java 2 environment.
1:eac0369: 
1:eac0369: 		Set the system home directory.  Returns false if it couldn't for
1:eac0369: 		some reason.
1:eac0369: 
1:eac0369: 	**/
1:eac0369: 	private boolean PBinitialize(boolean lite)
2:eac0369: 	{
1:eac0369: 		if (!lite) {
1:a11b076:             daemonGroup = createDaemonGroup();
1:a52b264: 		}
1:eac0369: 
1:eac0369: 		InputStream versionStream = getClass().getResourceAsStream(ProductGenusNames.DBMS_INFO);
1:eac0369: 
1:eac0369: 		engineVersion = ProductVersionHolder.getProductVersionHolderFromMyEnv(versionStream);
1:eac0369: 
1:eac0369: 		String systemHome;
1:eac0369: 		// create the system home directory if it doesn't exist
1:a11b076: 		try {
1:eac0369: 			// SECURITY PERMISSION - OP2
1:eac0369: 			systemHome = System.getProperty(Property.SYSTEM_HOME_PROPERTY);
2:eac0369: 		} catch (SecurityException se) {
1:eac0369: 			// system home will be the current directory
1:55720b3:             report(se, Property.SYSTEM_HOME_PROPERTY);
1:eac0369: 			systemHome = null;
1:a52b264: 		}
1:eac0369: 
1:eac0369: 		if (systemHome != null) {
1:eac0369: 			home = new File(systemHome);
1:eac0369: 
1:eac0369: 			// SECURITY PERMISSION - OP2a
1:eac0369: 			if (home.exists()) {
1:eac0369: 				if (!home.isDirectory()) {
1:eac0369: 					report(Property.SYSTEM_HOME_PROPERTY + "=" + systemHome
1:eac0369: 						+ " does not represent a directory");
1:eac0369: 					return false;
1:eac0369: 				}
1:eac0369: 			} else if (!lite) {
1:eac0369: 
1:dc43cf8:                 boolean created = false;
1:3d61c1c: 				try {
1:eac0369: 					// SECURITY PERMISSION - OP2b
1:023768a:                     // Attempt to create just the folder initially
1:023768a:                     // which does not require read permission on
1:023768a:                     // the parent folder. This is to allow a policy
1:023768a:                     // file to limit file permissions for derby.jar
1:023768a:                     // to be contained under derby.system.home.
1:023768a:                     // If the folder cannot be created that way
1:023768a:                     // due to missing parent folder(s) 
1:023768a:                     // then mkdir() will return false and thus
1:023768a:                     // mkdirs will be called to create the
1:023768a:                     // intermediate folders. This use of mkdir()
1:023768a:                     // and mkdirs() retains existing (pre10.3) behaviour
1:023768a:                     // but avoids requiring read permission on the parent
1:023768a:                     // directory if it exists.
1:dc43cf8:                     created = home.mkdir() || home.mkdirs();
1:4f7eee8:                     if (created) {
1:4f7eee8:                         FileUtil.limitAccessToOwner(home);
1:4f7eee8:                     }
1:eac0369: 				} catch (SecurityException se) {
1:55720b3:                     report(se, home);
1:eac0369: 					return false;
1:4f7eee8:                 } catch (IOException ioe) {
1:4f7eee8:                     return false;
1:dc43cf8:                 }
1:eac0369: 			}
1:eac0369: 		}
1:dc43cf8: 
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		SECURITY WARNING.
1:eac0369: 
1:ec8172b: 		This method is run in a privileged block in a Java 2 environment.
1:eac0369: 
1:eac0369: 		Return a property from the JVM's system set.
1:ec8172b: 		In a Java2 environment this will be executed as a privileged block
1:ec8172b: 		if and only if the property starts with 'derby.'.
1:eac0369: 		If a SecurityException occurs, null is returned.
1:eac0369: 	*/
1:eac0369: 	private String PBgetJVMProperty(String key) {
1:eac0369: 
9:eac0369: 		try {
2:eac0369: 			// SECURITY PERMISSION - OP1
1:eac0369: 			return System.getProperty(key);
1:eac0369: 		} catch (SecurityException se) {
1:55720b3:             report(se, key);
1:7adbb9a: 			return null;
1:eac0369: 		}
1:eac0369: 	}
1:55720b3: 
1:eac0369: 
1:55720b3:     private final static Map<String, Void> securityProperties =
1:55720b3:             new HashMap<String, Void>();
1:55720b3:     static {
1:55720b3:         securityProperties.put("derby.authentication.builtin.algorithm", null);
1:55720b3:         securityProperties.put("derby.authentication.provider", null);
1:55720b3:         securityProperties.put("derby.database.fullAccessUsers", null);
1:55720b3:         securityProperties.put("derby.database.readOnlyAccessUsers", null);
1:55720b3:         securityProperties.put("derby.database.sqlAuthorization", null);
1:55720b3:         securityProperties.put("derby.connection.requireAuthentication", null);
1:55720b3:         securityProperties.put("derby.database.defaultConnectionMode", null);
1:55720b3:         securityProperties.put("derby.storage.useDefaultFilePermissions", null);
1:55720b3:         securityProperties.put(Property.SYSTEM_HOME_PROPERTY, null);
1:55720b3:     };
1:55720b3: 
1:55720b3:     private void report(SecurityException e, String key) {
1:55720b3:          if (securityProperties.containsKey(key)) {
1:55720b3:             report(MessageService.getTextMessage(
1:55720b3:                 MessageId.CANNOT_READ_SECURITY_PROPERTY, key, e.toString()));
1:55720b3:          }
1:55720b3:     }
1:55720b3: 
1:55720b3:     private void report(SecurityException e, File file) {
1:55720b3:         report(MessageService.getTextMessage(
1:55720b3:                 MessageId.CANNOT_CREATE_FILE_OR_DIRECTORY,
1:55720b3:                 file.toString(),
1:55720b3:                 e.toString()));
1:55720b3:     }
1:55720b3: 
1:a2ecbd3:     private void reportThread(SecurityException e) {
1:a2ecbd3:         report(MessageService.getTextMessage(
1:a2ecbd3:                 MessageId.CANNOT_SET_DAEMON, e.toString()));
1:a2ecbd3:     }
1:55720b3: 
1:eac0369: 	/*
1:eac0369: 	** Priv block code, moved out of the old Java2 version.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Initialize the system in a privileged block.
1:eac0369: 	**/
1:7adbb9a: 	final boolean initialize(final boolean lite)
1:eac0369: 	{
1:7adbb9a:         // SECURITY PERMISSION - OP2, OP2a, OP2b
1:073b862:         return (AccessController.doPrivileged(new PrivilegedAction<Boolean>() {
1:073b862:             public Boolean run() {
1:7adbb9a:                 return Boolean.valueOf(PBinitialize(lite));
1:7adbb9a:             }
1:7adbb9a:         })).booleanValue();
1:eac0369: 	}
1:eac0369: 
1:7adbb9a: 	final Properties getDefaultModuleProperties() {
1:7adbb9a:         // SECURITY PERMISSION - IP1
1:073b862:         return AccessController.doPrivileged(
1:073b862:                 new PrivilegedAction<Properties>() {
1:073b862:             public Properties run() {
1:7adbb9a:                 return FileMonitor.super.getDefaultModuleProperties();
1:7adbb9a:             }
2:7adbb9a:         });
1:eac0369:     }
1:eac0369: 
1:7adbb9a: 	public final String getJVMProperty(final String key) {
1:eac0369: 		if (!key.startsWith("derby."))
1:eac0369: 			return PBgetJVMProperty(key);
1:eac0369: 
1:7adbb9a:         // SECURITY PERMISSION - OP1
1:073b862:         return AccessController.doPrivileged(new PrivilegedAction<String>() {
1:073b862:             public String run() {
1:7adbb9a:                 return PBgetJVMProperty(key);
1:7adbb9a:             }
1:7adbb9a:         });
1:eac0369: 	}
1:eac0369: 
1:7adbb9a: 	public synchronized final Thread getDaemonThread(
1:7adbb9a:             final Runnable task,
1:7adbb9a:             final String name,
1:7adbb9a:             final boolean setMinPriority) {
1:073b862:         return AccessController.doPrivileged(new PrivilegedAction<Thread>() {
1:073b862:             public Thread run() {
1:7adbb9a:                 try {
1:7adbb9a:                     return FileMonitor.super.getDaemonThread(
1:7adbb9a:                             task, name, setMinPriority);
1:7adbb9a:                 } catch (IllegalThreadStateException e) {
1:7adbb9a:                     // We may get an IllegalThreadStateException if all the
1:7adbb9a:                     // previously running daemon threads have completed and the
1:7adbb9a:                     // daemon group has been automatically destroyed. If that's
1:7adbb9a:                     // what happened, create a new daemon group and try again.
1:7adbb9a:                     if (daemonGroup != null && daemonGroup.isDestroyed()) {
1:7adbb9a:                         daemonGroup = createDaemonGroup();
1:7adbb9a:                         return FileMonitor.super.getDaemonThread(
1:7adbb9a:                                 task, name, setMinPriority);
1:7adbb9a:                     } else {
1:7adbb9a:                         throw e;
1:7adbb9a:                     }
1:7adbb9a:                 }
1:7adbb9a:             }
1:7adbb9a:         });
1:7adbb9a:     }
1:eac0369: 
1:7adbb9a: 	final InputStream applicationPropertiesStream()
1:eac0369: 	  throws IOException {
1:eac0369: 		try {
2:eac0369: 			// SECURITY PERMISSION - OP3
1:073b862: 			return AccessController.doPrivileged(
1:073b862:                     new PrivilegedExceptionAction<InputStream>() {
1:073b862:                 public InputStream run() throws IOException {
1:7adbb9a:                     return PBapplicationPropertiesStream();
1:7adbb9a:                 }
1:7adbb9a:             });
1:7adbb9a: 		}
1:eac0369:         catch (java.security.PrivilegedActionException pae)
1:eac0369:         {
1:eac0369: 			throw (IOException) pae.getException();
1:a11b076: 		}
1:a11b076: 	}
1:eac0369: 
1:eac0369: 	public final ProductVersionHolder getEngineVersion() {
1:eac0369: 		return engineVersion;
1:a11b076: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e7deac4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4f7eee8
/////////////////////////////////////////////////////////////////////////
1:                     if (created) {
1:                         FileUtil.limitAccessToOwner(home);
1:                     }
1:                 } catch (IOException ioe) {
1:                     return false;
commit:8d4d087
/////////////////////////////////////////////////////////////////////////
1:         File sr = new File(home, Property.PROPERTIES_FILE);
commit:850aba4
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileInputStream;
1: import java.io.PrintWriter;
1: import org.apache.derby.iapi.reference.Property;
1: import org.apache.derby.iapi.services.info.ProductGenusNames;
1: import org.apache.derby.iapi.services.info.ProductVersionHolder;
1: import org.apache.derby.iapi.services.io.FileUtil;
/////////////////////////////////////////////////////////////////////////
1: 	public FileMonitor(Properties properties, PrintWriter log) {
commit:7adbb9a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.security.PrivilegedExceptionAction;
1: 
/////////////////////////////////////////////////////////////////////////
1: public final class FileMonitor extends BaseMonitor
/////////////////////////////////////////////////////////////////////////
1: 	final boolean initialize(final boolean lite)
1:         // SECURITY PERMISSION - OP2, OP2a, OP2b
0:         return ((Boolean) AccessController.doPrivileged(new PrivilegedAction() {
0:             public Object run() {
1:                 return Boolean.valueOf(PBinitialize(lite));
1:             }
1:         })).booleanValue();
1: 	final Properties getDefaultModuleProperties() {
1:         // SECURITY PERMISSION - IP1
0:         return (Properties) AccessController.doPrivileged(
0:                 new PrivilegedAction() {
0:             public Object run() {
1:                 return FileMonitor.super.getDefaultModuleProperties();
1:             }
1:         });
1: 	public final String getJVMProperty(final String key) {
1:         // SECURITY PERMISSION - OP1
0:         return (String) AccessController.doPrivileged(new PrivilegedAction() {
0:             public Object run() {
1:                 return PBgetJVMProperty(key);
1:             }
1:         });
1: 	public synchronized final Thread getDaemonThread(
1:             final Runnable task,
1:             final String name,
1:             final boolean setMinPriority) {
0:         return (Thread) AccessController.doPrivileged(new PrivilegedAction() {
0:             public Object run() {
1:                 try {
1:                     return FileMonitor.super.getDaemonThread(
1:                             task, name, setMinPriority);
1:                 } catch (IllegalThreadStateException e) {
1:                     // We may get an IllegalThreadStateException if all the
1:                     // previously running daemon threads have completed and the
1:                     // daemon group has been automatically destroyed. If that's
1:                     // what happened, create a new daemon group and try again.
1:                     if (daemonGroup != null && daemonGroup.isDestroyed()) {
1:                         daemonGroup = createDaemonGroup();
1:                         return FileMonitor.super.getDaemonThread(
1:                                 task, name, setMinPriority);
1:                     } else {
1:                         throw e;
1:                     }
1:                 }
1:             }
1:         });
1:     }
0: 	public final void setThreadPriority(final int priority) {
0:         AccessController.doPrivileged(new PrivilegedAction() {
0:             public Object run() {
0:                 FileMonitor.super.setThreadPriority(priority);
1:                 return null;
1:             }
1:         });
1: 	final InputStream applicationPropertiesStream()
0: 			return (InputStream) AccessController.doPrivileged(
0:                     new PrivilegedExceptionAction() {
0:                 public Object run() throws IOException {
1:                     return PBapplicationPropertiesStream();
1:                 }
1:             });
/////////////////////////////////////////////////////////////////////////
commit:a11b076
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Create a ThreadGroup and set the daemon property to make sure
1:      * the group is destroyed and garbage collected when all its
1:      * members have finished (i.e., either when the driver is
1:      * unloaded, or when the last database is shut down).
1:      */
0:     private static ThreadGroup createDaemonGroup() {
1:         try {
1:             ThreadGroup group = new ThreadGroup("derby.daemons");
1:             group.setDaemon(true);
1:             return group;
1:         } catch (SecurityException se) {
0:             // In case of a lacking privilege, silently return null and let
0:             // the daemon threads be created in the default thread group.
1:             return null;
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:             daemonGroup = createDaemonGroup();
/////////////////////////////////////////////////////////////////////////
1:         {
0:             boolean setMinPriority = (intValue != 0);
1:             try {
0:                 return super.getDaemonThread(task, key3, setMinPriority);
0:             } catch (IllegalThreadStateException e) {
0:                 // We may get an IllegalThreadStateException if all the
0:                 // previously running daemon threads have completed and the
0:                 // daemon group has been automatically destroyed. If that's
0:                 // what has happened, create a new daemon group and try again.
0:                 if (daemonGroup != null && daemonGroup.isDestroyed()) {
0:                     daemonGroup = createDaemonGroup();
0:                     return super.getDaemonThread(task, key3, setMinPriority);
0:                 } else {
0:                     throw e;
1:                 }
1:             }
1:         }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:a2ecbd3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return the thread group "derby.daemons" or null if we saw
1:      * a SecurityException
1:     private ThreadGroup createDaemonGroup() {
1:             // In case of a lacking privilege, issue a warning, return null and
1:             // let the daemon threads be created in the default thread group.
1:             // This can only happen if the current Derby thread is a part of
1:             // the root thread group "system".
1:             reportThread(se);
/////////////////////////////////////////////////////////////////////////
1:     private void reportThread(SecurityException e) {
1:         report(MessageService.getTextMessage(
1:                 MessageId.CANNOT_SET_DAEMON, e.toString()));
1:     }
commit:55720b3
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.shared.common.reference.MessageId;
/////////////////////////////////////////////////////////////////////////
1:             report(se, Property.SYSTEM_HOME_PROPERTY);
/////////////////////////////////////////////////////////////////////////
1:                     report(se, home);
/////////////////////////////////////////////////////////////////////////
1:             report(se, key);
1: 
1:     private final static Map<String, Void> securityProperties =
1:             new HashMap<String, Void>();
1:     static {
1:         securityProperties.put("derby.authentication.builtin.algorithm", null);
1:         securityProperties.put("derby.authentication.provider", null);
1:         securityProperties.put("derby.database.fullAccessUsers", null);
1:         securityProperties.put("derby.database.readOnlyAccessUsers", null);
1:         securityProperties.put("derby.database.sqlAuthorization", null);
1:         securityProperties.put("derby.connection.requireAuthentication", null);
1:         securityProperties.put("derby.database.defaultConnectionMode", null);
1:         securityProperties.put("derby.storage.useDefaultFilePermissions", null);
1:         securityProperties.put(Property.SYSTEM_HOME_PROPERTY, null);
1:     };
1: 
1:     private void report(SecurityException e, String key) {
1:          if (securityProperties.containsKey(key)) {
1:             report(MessageService.getTextMessage(
1:                 MessageId.CANNOT_READ_SECURITY_PROPERTY, key, e.toString()));
1:          }
1:     }
1: 
1:     private void report(SecurityException e, File file) {
1:         report(MessageService.getTextMessage(
1:                 MessageId.CANNOT_CREATE_FILE_OR_DIRECTORY,
1:                 file.toString(),
1:                 e.toString()));
1:     }
1: 
1: 
commit:dc43cf8
/////////////////////////////////////////////////////////////////////////
1:                 boolean created = false;
/////////////////////////////////////////////////////////////////////////
1:                     created = home.mkdir() || home.mkdirs();
1: 
0:                 if (created) {
0:                     FileUtil.limitAccessToOwner(home);
1:                 }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:073b862
/////////////////////////////////////////////////////////////////////////
1:         return (AccessController.doPrivileged(new PrivilegedAction<Boolean>() {
1:             public Boolean run() {
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged(
1:                 new PrivilegedAction<Properties>() {
1:             public Properties run() {
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged(new PrivilegedAction<String>() {
1:             public String run() {
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged(new PrivilegedAction<Thread>() {
1:             public Thread run() {
/////////////////////////////////////////////////////////////////////////
0:         AccessController.doPrivileged(new PrivilegedAction<Object>() {
/////////////////////////////////////////////////////////////////////////
1: 			return AccessController.doPrivileged(
1:                     new PrivilegedExceptionAction<InputStream>() {
1:                 public InputStream run() throws IOException {
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:023768a
/////////////////////////////////////////////////////////////////////////
1:                     // Attempt to create just the folder initially
1:                     // which does not require read permission on
1:                     // the parent folder. This is to allow a policy
1:                     // file to limit file permissions for derby.jar
1:                     // to be contained under derby.system.home.
1:                     // If the folder cannot be created that way
1:                     // due to missing parent folder(s) 
1:                     // then mkdir() will return false and thus
1:                     // mkdirs will be called to create the
1:                     // intermediate folders. This use of mkdir()
1:                     // and mkdirs() retains existing (pre10.3) behaviour
1:                     // but avoids requiring read permission on the parent
1:                     // directory if it exists.
0: 					boolean created = home.mkdir() || home.mkdirs();
commit:ec8172b
/////////////////////////////////////////////////////////////////////////
1: 		This method is run in a privileged block in a Java 2 environment.
/////////////////////////////////////////////////////////////////////////
1: 		This method is run in a privileged block in a Java 2 environment.
1: 		In a Java2 environment this will be executed as a privileged block
1: 		if and only if the property starts with 'derby.'.
commit:3d61c1c
/////////////////////////////////////////////////////////////////////////
0: import java.util.Enumeration;
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	synchronized final Properties getDefaultModuleProperties() {
1:  		try {
0: 			return (Properties) java.security.AccessController.doPrivileged(this);
0:            throw (RuntimeException) pae.getException();
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized final Object run() throws IOException {
/////////////////////////////////////////////////////////////////////////
0: 			return super.getDefaultModuleProperties();
commit:7a92d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	synchronized final boolean initialize(boolean lite)
/////////////////////////////////////////////////////////////////////////
0: 	synchronized final InputStream loadModuleDefinitions(URL propertyFileURL) throws IOException {
/////////////////////////////////////////////////////////////////////////
0: 	synchronized final InputStream applicationPropertiesStream()
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.monitor.FileMonitor
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:a52b264
/////////////////////////////////////////////////////////////////////////
0: import java.net.URL;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private URL propertyFileURL;
/////////////////////////////////////////////////////////////////////////
0: 	protected synchronized final InputStream loadModuleDefinitions(URL propertyFileURL) throws IOException {
0:         this.propertyFileURL = propertyFileURL;
0:             Exception e = pae.getException();
0:             if( e instanceof IOException)
0:                 throw (IOException) e;
0:             throw (RuntimeException) e;
0:         } finally {
0:             this.propertyFileURL = null;
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
0: 			return super.loadModuleDefinitions( propertyFileURL);
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.monitor
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.monitor;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.reference.Property;
1: 
0: import org.apache.derby.impl.services.monitor.BaseMonitor;
0: import org.apache.derby.iapi.services.io.FileUtil;
0: import org.apache.derby.iapi.services.info.ProductVersionHolder;
0: import org.apache.derby.iapi.services.info.ProductGenusNames;
1: 
0: import java.io.FileInputStream;
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: /**
1: 	Implementation of the monitor that uses the class loader
1: 	that the its was loaded in for all class loading.
1: 
1: */
1: 
0: public final class FileMonitor extends BaseMonitor implements java.security.PrivilegedExceptionAction
1: {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/* Fields */
1: 	private File home;
1: 
1: 	private ProductVersionHolder engineVersion;
1: 
1: 	public FileMonitor() {
1: 		initialize(true);
1: 		applicationProperties = readApplicationProperties();
1: 	}
1: 
0: 	public FileMonitor(java.util.Properties properties, java.io.PrintStream log) {
1: 		runWithState(properties, log);
1: 	}
1: 
1: 
1: 
1: 	private InputStream PBapplicationPropertiesStream()
1: 	  throws IOException {
1: 
0: 		File sr = FileUtil.newFile(home, Property.PROPERTIES_FILE);
1: 
1: 		if (!sr.exists())
1: 			return null;
1: 
1: 		return new FileInputStream(sr);
1: 	}
1: 
1: 	public Object getEnvironment() {
1: 		return home;
1: 	}
1: 
1: 
1: 
1: 	/**
1: 		SECURITY WARNING.
1: 
0: 		This method is run in a privledged block in a Java 2 environment.
1: 
1: 		Set the system home directory.  Returns false if it couldn't for
1: 		some reason.
1: 
1: 	**/
1: 	private boolean PBinitialize(boolean lite)
1: 	{
1: 		if (!lite) {
1: 			try {
0: 				daemonGroup = new ThreadGroup("derby.daemons");
1: 			} catch (SecurityException se) {
1: 			}
1: 		}
1: 
1: 		InputStream versionStream = getClass().getResourceAsStream(ProductGenusNames.DBMS_INFO);
1: 
1: 		engineVersion = ProductVersionHolder.getProductVersionHolderFromMyEnv(versionStream);
1: 
1: 		String systemHome;
1: 		// create the system home directory if it doesn't exist
1: 		try {
1: 			// SECURITY PERMISSION - OP2
1: 			systemHome = System.getProperty(Property.SYSTEM_HOME_PROPERTY);
1: 		} catch (SecurityException se) {
1: 			// system home will be the current directory
1: 			systemHome = null;
1: 		}
1: 
1: 		if (systemHome != null) {
1: 			home = new File(systemHome);
1: 
1: 			// SECURITY PERMISSION - OP2a
1: 			if (home.exists()) {
1: 				if (!home.isDirectory()) {
1: 					report(Property.SYSTEM_HOME_PROPERTY + "=" + systemHome
1: 						+ " does not represent a directory");
1: 					return false;
1: 				}
1: 			} else if (!lite) {
1: 
1: 				try {
1: 					// SECURITY PERMISSION - OP2b
0: 					home.mkdirs();
1: 				} catch (SecurityException se) {
1: 					return false;
1: 				}
1: 			}
1: 		}
1: 
1: 		return true;
1: 	}
1: 
1: 	/**
1: 		SECURITY WARNING.
1: 
0: 		This method is run in a privledged block in a Java 2 environment.
1: 
1: 		Return a property from the JVM's system set.
0: 		In a Java2 environment this will be executed as a privliged block
0: 		if and only if the property starts with db2j.
1: 		If a SecurityException occurs, null is returned.
1: 	*/
1: 	private String PBgetJVMProperty(String key) {
1: 
1: 		try {
1: 			// SECURITY PERMISSION - OP1
1: 			return System.getProperty(key);
1: 		} catch (SecurityException se) {
1: 			return null;
1: 		}
1: 	}
1: 
1: 	/*
1: 	** Priv block code, moved out of the old Java2 version.
1: 	*/
1: 
0: 	private int action;
0: 	private String key3;
0: 	private Runnable task;
0: 	private int intValue;
1: 
1: 	/**
1: 		Initialize the system in a privileged block.
1: 	**/
0: 	public synchronized final boolean initialize(boolean lite)
1: 	{
0: 		action = lite ? 0 : 1;
1: 		try {
0: 			Object ret = java.security.AccessController.doPrivileged(this);
1: 
0: 			return ((Boolean) ret).booleanValue();
0:         } catch (java.security.PrivilegedActionException pae) {
0: 			throw (RuntimeException) pae.getException();
1: 		}
1: 	}
1: 
0: 	protected synchronized final InputStream loadModuleDefinitions() {
0: 		action = 2;
1: 		try {
0: 			return (InputStream) java.security.AccessController.doPrivileged(this);
0:         } catch (java.security.PrivilegedActionException pae) {
0: 			throw (RuntimeException) pae.getException();
1: 		}
1: 	}
1: 
0: 	public synchronized final String getJVMProperty(String key) {
1: 		if (!key.startsWith("derby."))
1: 			return PBgetJVMProperty(key);
1: 
1: 		try {
1: 
0: 			action = 3;
0: 			key3 = key;
0: 			String value  = (String) java.security.AccessController.doPrivileged(this);
0: 			key3 = null;
0: 			return value;
0:         } catch (java.security.PrivilegedActionException pae) {
0: 			throw (RuntimeException) pae.getException();
1: 		}
1: 	}
1: 
0: 	public synchronized final Thread getDaemonThread(Runnable task, String name, boolean setMinPriority) {
1: 
0: 		action = 4;
0: 		key3 = name;
0: 		this.task = task;
0: 		this.intValue = setMinPriority ? 1 : 0;
1: 
1: 		try {
1: 
0: 			Thread t = (Thread) java.security.AccessController.doPrivileged(this);
1: 
0: 			key3 = null;
0: 			task = null;
1: 
0: 			return t;
0:         } catch (java.security.PrivilegedActionException pae) {
0: 			throw (RuntimeException) pae.getException();
1: 		}
1: 	}
1: 
0: 	public synchronized final void setThreadPriority(int priority) {
0: 		action = 5;
0: 		intValue = priority;
1: 		try {
0: 			java.security.AccessController.doPrivileged(this);
0:         } catch (java.security.PrivilegedActionException pae) {
0: 			throw (RuntimeException) pae.getException();
1: 		}
1: 	}
1: 
0: 	protected synchronized final InputStream applicationPropertiesStream()
1: 	  throws IOException {
0: 		action = 6;
1: 		try {
1: 			// SECURITY PERMISSION - OP3
0: 			return (InputStream) java.security.AccessController.doPrivileged(this);
1: 		}
1:         catch (java.security.PrivilegedActionException pae)
1:         {
1: 			throw (IOException) pae.getException();
1: 		}
1: 	}
1: 
1: 
0: 	public final Object run() throws IOException {
0: 		switch (action) {
0: 		case 0:
0: 		case 1:
0: 			// SECURITY PERMISSION - OP2, OP2a, OP2b
0: 			return new Boolean(PBinitialize(action == 0));
0: 		case 2: 
0: 			// SECURITY PERMISSION - IP1
0: 			return super.loadModuleDefinitions();
0: 		case 3:
1: 			// SECURITY PERMISSION - OP1
0: 			return PBgetJVMProperty(key3);
0: 		case 4:
0: 			return super.getDaemonThread(task, key3, intValue != 0);
0: 		case 5:
0: 			super.setThreadPriority(intValue);
1: 			return null;
0: 		case 6:
1: 			// SECURITY PERMISSION - OP3
0: 			return PBapplicationPropertiesStream();
1: 
0: 		default:
1: 			return null;
1: 		}
1: 	}
1: 
1: 	public final ProductVersionHolder getEngineVersion() {
1: 		return engineVersion;
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:896f574
/////////////////////////////////////////////////////////////////////////
0: 				// Create a ThreadGroup and set the daemon property to
0: 				// make sure the group is destroyed and garbage
0: 				// collected when all its members have finished (i.e.,
0: 				// when the driver is unloaded).
0: 				daemonGroup.setDaemon(true);
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.monitor
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.monitor;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.reference.Property;
0: 
0: import org.apache.derby.impl.services.monitor.BaseMonitor;
0: import org.apache.derby.iapi.services.io.FileUtil;
0: import org.apache.derby.iapi.services.info.ProductVersionHolder;
0: import org.apache.derby.iapi.services.info.ProductGenusNames;
0: 
0: import java.io.FileInputStream;
0: import java.io.File;
0: import java.io.IOException;
0: import java.io.InputStream;
0: 
0: /**
0: 	Implementation of the monitor that uses the class loader
0: 	that the its was loaded in for all class loading.
0: 
0: */
0: 
0: public final class FileMonitor extends BaseMonitor implements java.security.PrivilegedExceptionAction
0: {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/* Fields */
0: 	private File home;
0: 
0: 	private ProductVersionHolder engineVersion;
0: 
0: 	public FileMonitor() {
0: 		initialize(true);
0: 		applicationProperties = readApplicationProperties();
0: 	}
0: 
0: 	public FileMonitor(java.util.Properties properties, java.io.PrintStream log) {
0: 		runWithState(properties, log);
0: 	}
0: 
0: 
0: 
0: 	private InputStream PBapplicationPropertiesStream()
0: 	  throws IOException {
0: 
0: 		File sr = FileUtil.newFile(home, Property.PROPERTIES_FILE);
0: 
0: 		if (!sr.exists())
0: 			return null;
0: 
0: 		return new FileInputStream(sr);
0: 	}
0: 
0: 	public Object getEnvironment() {
0: 		return home;
0: 	}
0: 
0: 
0: 
0: 	/**
0: 		SECURITY WARNING.
0: 
0: 		This method is run in a privledged block in a Java 2 environment.
0: 
0: 		Set the system home directory.  Returns false if it couldn't for
0: 		some reason.
0: 
0: 	**/
0: 	private boolean PBinitialize(boolean lite)
0: 	{
0: 		if (!lite) {
0: 			try {
0: 				daemonGroup = new ThreadGroup("derby.daemons");
0: 			} catch (SecurityException se) {
0: 			}
0: 		}
0: 
0: 		InputStream versionStream = getClass().getResourceAsStream(ProductGenusNames.DBMS_INFO);
0: 
0: 		engineVersion = ProductVersionHolder.getProductVersionHolderFromMyEnv(versionStream);
0: 
0: 		String systemHome;
0: 		// create the system home directory if it doesn't exist
0: 		try {
0: 			// SECURITY PERMISSION - OP2
0: 			systemHome = System.getProperty(Property.SYSTEM_HOME_PROPERTY);
0: 		} catch (SecurityException se) {
0: 			// system home will be the current directory
0: 			systemHome = null;
0: 		}
0: 
0: 		if (systemHome != null) {
0: 			home = new File(systemHome);
0: 
0: 			// SECURITY PERMISSION - OP2a
0: 			if (home.exists()) {
0: 				if (!home.isDirectory()) {
0: 					report(Property.SYSTEM_HOME_PROPERTY + "=" + systemHome
0: 						+ " does not represent a directory");
0: 					return false;
0: 				}
0: 			} else if (!lite) {
0: 
0: 				try {
0: 					// SECURITY PERMISSION - OP2b
0: 					home.mkdirs();
0: 				} catch (SecurityException se) {
0: 					return false;
0: 				}
0: 			}
0: 		}
0: 
0: 		return true;
0: 	}
0: 
0: 	/**
0: 		SECURITY WARNING.
0: 
0: 		This method is run in a privledged block in a Java 2 environment.
0: 
0: 		Return a property from the JVM's system set.
0: 		In a Java2 environment this will be executed as a privliged block
0: 		if and only if the property starts with db2j.
0: 		If a SecurityException occurs, null is returned.
0: 	*/
0: 	private String PBgetJVMProperty(String key) {
0: 
0: 		try {
0: 			// SECURITY PERMISSION - OP1
0: 			return System.getProperty(key);
0: 		} catch (SecurityException se) {
0: 			return null;
0: 		}
0: 	}
0: 
0: 	/*
0: 	** Priv block code, moved out of the old Java2 version.
0: 	*/
0: 
0: 	private int action;
0: 	private String key3;
0: 	private Runnable task;
0: 	private int intValue;
0: 
0: 	/**
0: 		Initialize the system in a privileged block.
0: 	**/
0: 	public synchronized final boolean initialize(boolean lite)
0: 	{
0: 		action = lite ? 0 : 1;
0: 		try {
0: 			Object ret = java.security.AccessController.doPrivileged(this);
0: 
0: 			return ((Boolean) ret).booleanValue();
0:         } catch (java.security.PrivilegedActionException pae) {
0: 			throw (RuntimeException) pae.getException();
0: 		}
0: 	}
0: 
0: 	protected synchronized final InputStream loadModuleDefinitions() {
0: 		action = 2;
0: 		try {
0: 			return (InputStream) java.security.AccessController.doPrivileged(this);
0:         } catch (java.security.PrivilegedActionException pae) {
0: 			throw (RuntimeException) pae.getException();
0: 		}
0: 	}
0: 
0: 	public synchronized final String getJVMProperty(String key) {
0: 		if (!key.startsWith("derby."))
0: 			return PBgetJVMProperty(key);
0: 
0: 		try {
0: 
0: 			action = 3;
0: 			key3 = key;
0: 			String value  = (String) java.security.AccessController.doPrivileged(this);
0: 			key3 = null;
0: 			return value;
0:         } catch (java.security.PrivilegedActionException pae) {
0: 			throw (RuntimeException) pae.getException();
0: 		}
0: 	}
0: 
0: 	public synchronized final Thread getDaemonThread(Runnable task, String name, boolean setMinPriority) {
0: 
0: 		action = 4;
0: 		key3 = name;
0: 		this.task = task;
0: 		this.intValue = setMinPriority ? 1 : 0;
0: 
0: 		try {
0: 
0: 			Thread t = (Thread) java.security.AccessController.doPrivileged(this);
0: 
0: 			key3 = null;
0: 			task = null;
0: 
0: 			return t;
0:         } catch (java.security.PrivilegedActionException pae) {
0: 			throw (RuntimeException) pae.getException();
0: 		}
0: 	}
0: 
0: 	public synchronized final void setThreadPriority(int priority) {
0: 		action = 5;
0: 		intValue = priority;
0: 		try {
0: 			java.security.AccessController.doPrivileged(this);
0:         } catch (java.security.PrivilegedActionException pae) {
0: 			throw (RuntimeException) pae.getException();
0: 		}
0: 	}
0: 
0: 	protected synchronized final InputStream applicationPropertiesStream()
0: 	  throws IOException {
0: 		action = 6;
0: 		try {
0: 			// SECURITY PERMISSION - OP3
0: 			return (InputStream) java.security.AccessController.doPrivileged(this);
0: 		}
0:         catch (java.security.PrivilegedActionException pae)
0:         {
0: 			throw (IOException) pae.getException();
0: 		}
0: 	}
0: 
0: 
0: 	public final Object run() throws IOException {
0: 		switch (action) {
0: 		case 0:
0: 		case 1:
0: 			// SECURITY PERMISSION - OP2, OP2a, OP2b
0: 			return new Boolean(PBinitialize(action == 0));
0: 		case 2: 
0: 			// SECURITY PERMISSION - IP1
0: 			return super.loadModuleDefinitions();
0: 		case 3:
0: 			// SECURITY PERMISSION - OP1
0: 			return PBgetJVMProperty(key3);
0: 		case 4:
0: 			return super.getDaemonThread(task, key3, intValue != 0);
0: 		case 5:
0: 			super.setThreadPriority(intValue);
0: 			return null;
0: 		case 6:
0: 			// SECURITY PERMISSION - OP3
0: 			return PBapplicationPropertiesStream();
0: 
0: 		default:
0: 			return null;
0: 		}
0: 	}
0: 
0: 	public final ProductVersionHolder getEngineVersion() {
0: 		return engineVersion;
0: 	}
0: }
============================================================================