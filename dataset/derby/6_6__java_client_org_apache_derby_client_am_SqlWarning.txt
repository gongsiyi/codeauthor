1:33776ff: /*
26:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.SqlWarning
1:70f7692: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:7680ab7: 
1:33776ff: package org.apache.derby.client.am;
1:7680ab7: 
1:7680ab7: import java.sql.SQLWarning;
1:7680ab7: 
1:7680ab7: /**
1:7680ab7:  * This represents a warning versus a full exception.  As with
1:7680ab7:  * SqlException, this is an internal representation of java.sql.SQLWarning.
1:7680ab7:  *
1:7680ab7:  * Public JDBC methods need to convert an internal SqlWarning to a SQLWarning
1:7680ab7:  * using <code>getSQLWarning()</code>
1:7680ab7:  */
1:7680ab7: public class SqlWarning extends SqlException implements Diagnosable {
1:7680ab7: 
1:b565f41:     private SqlWarning nextWarning_;
1:7680ab7:     
1:1f18dc3:     SqlWarning(LogWriter logwriter, ClientMessageId msgid, Object... args)
8:7680ab7:     {
1:1f18dc3:         super(logwriter, msgid, args);
2:7680ab7:     }
1:7680ab7:     
1:7680ab7:     public SqlWarning(LogWriter logWriter, Sqlca sqlca)
1:7680ab7:     {
1:7680ab7:         super(logWriter, sqlca);
1:7680ab7:     }
1:7680ab7:     
1:0326967:     void setNextWarning(SqlWarning warning)
1:7680ab7:     {
1:7680ab7:         // Add this warning to the end of the chain
1:7680ab7:         SqlWarning theEnd = this;
1:7680ab7:         while (theEnd.nextWarning_ != null) {
1:7680ab7:             theEnd = theEnd.nextWarning_;
1:7680ab7:         }
1:7680ab7:         theEnd.nextWarning_ = warning;
1:7680ab7:     }
1:7680ab7:     
1:7680ab7:     /**
1:7680ab7:      * Get the java.sql.SQLWarning for this SqlWarning
1:7680ab7:      */
1:7680ab7:     public SQLWarning getSQLWarning()
1:7680ab7:     {
1:b850119:         if (wrappedException_ != null) {
1:b850119:             return (SQLWarning) wrappedException_;
1:b850119:         }
1:b850119: 
1:7680ab7:         SQLWarning sqlw = new SQLWarning(getMessage(), getSQLState(), 
1:7680ab7:             getErrorCode());
1:7680ab7: 
1:55d4cdf:         sqlw.initCause(this);
1:7680ab7: 
1:7680ab7:         // Set up the nextException chain
1:7680ab7:         if ( nextWarning_ != null )
1:7680ab7:         {
1:d3fbd72:             // The warning chain gets constructed automatically through
1:7680ab7:             // the beautiful power of recursion
1:d3fbd72:             sqlw.setNextWarning(nextWarning_.getSQLWarning());
1:7680ab7:         }
1:7680ab7:         
1:7680ab7:         return sqlw;
1:7680ab7:         
1:7680ab7:     }
1:7680ab7: }
1:70f7692: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d3fbd72
/////////////////////////////////////////////////////////////////////////
1:             // The warning chain gets constructed automatically through
1:             sqlw.setNextWarning(nextWarning_.getSQLWarning());
commit:1f18dc3
/////////////////////////////////////////////////////////////////////////
1:     SqlWarning(LogWriter logwriter, ClientMessageId msgid, Object... args)
1:         super(logwriter, msgid, args);
commit:b850119
/////////////////////////////////////////////////////////////////////////
1:         if (wrappedException_ != null) {
1:             return (SQLWarning) wrappedException_;
1:         }
1: 
commit:55d4cdf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         sqlw.initCause(this);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b565f41
/////////////////////////////////////////////////////////////////////////
1:     private SqlWarning nextWarning_;
commit:0326967
/////////////////////////////////////////////////////////////////////////
0:     SqlWarning (LogWriter logwriter, ClientMessageId msgid)
0:     SqlWarning(LogWriter logwriter, ClientMessageId msgid, Object arg1)
0:     SqlWarning(LogWriter logwriter,
1:     void setNextWarning(SqlWarning warning)
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:e65b4db
/////////////////////////////////////////////////////////////////////////
0:         ClientMessageId msgid, Object[] args, Throwable cause)
0:     public SqlWarning(LogWriter logwriter, ClientMessageId msgid, Object[] args)
0:     public SqlWarning (LogWriter logwriter, ClientMessageId msgid)
0:     public SqlWarning(LogWriter logwriter, ClientMessageId msgid, Object arg1)
0:         ClientMessageId msgid, Object arg1, Object arg2)
0:         ClientMessageId msgid, Object arg1, Object arg2, Object arg3)
commit:fc25cc0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.info.JVMInfo;
commit:8f8cbff
/////////////////////////////////////////////////////////////////////////
0:         // of the SQLWarning to be this SqlWarning.
0:             sqlw.initCause(this);
commit:7680ab7
/////////////////////////////////////////////////////////////////////////
0:    Copyright (c) 2006 The Apache Software Foundation or its licensors, 
0:    where applicable.
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLWarning;
0: import org.apache.derby.shared.common.info.JVMInfo;
1: /**
1:  * This represents a warning versus a full exception.  As with
1:  * SqlException, this is an internal representation of java.sql.SQLWarning.
1:  *
1:  * Public JDBC methods need to convert an internal SqlWarning to a SQLWarning
1:  * using <code>getSQLWarning()</code>
1:  */
1: public class SqlWarning extends SqlException implements Diagnosable {
0:     protected SqlWarning nextWarning_;
1:     
0:     public SqlWarning(LogWriter logwriter, 
0:         MessageId msgid, Object[] args, Throwable cause)
1:     {
0:         super(logwriter, msgid, args, cause);
1:     }
1:     
0:     public SqlWarning(LogWriter logwriter, MessageId msgid, Object[] args)
1:     {
0:         this(logwriter, msgid, args, null);
1:     }
1:     
0:     public SqlWarning (LogWriter logwriter, MessageId msgid)
1:     {
0:         super(logwriter, msgid);
1:     }
1:     
0:     public SqlWarning(LogWriter logwriter, MessageId msgid, Object arg1)
1:     {
0:         super(logwriter, msgid, arg1);
1:     }
1:     
0:     public SqlWarning(LogWriter logwriter,
0:         MessageId msgid, Object arg1, Object arg2)
1:     {
0:         super(logwriter, msgid, arg1, arg2);
1:     }
1:     
0:     public SqlWarning(LogWriter logwriter,
0:         MessageId msgid, Object arg1, Object arg2, Object arg3)
1:     {
0:         super(logwriter, msgid, arg1, arg2, arg3);
1:     }
1:     
1:     public SqlWarning(LogWriter logWriter, Sqlca sqlca)
1:     {
1:         super(logWriter, sqlca);
1:     }
1:     
0:     public void setNextWarning(SqlWarning warning)
1:     {
1:         // Add this warning to the end of the chain
1:         SqlWarning theEnd = this;
1:         while (theEnd.nextWarning_ != null) {
1:             theEnd = theEnd.nextWarning_;
1:         theEnd.nextWarning_ = warning;
1:     
0:     public SqlWarning getNextWarning()
1:     {
0:         return nextWarning_;
1:     }
1:     
1:     /**
1:      * Get the java.sql.SQLWarning for this SqlWarning
1:      */
1:     public SQLWarning getSQLWarning()
1:     {
1:         SQLWarning sqlw = new SQLWarning(getMessage(), getSQLState(), 
1:             getErrorCode());
0:         // If we're in a runtime that supports chained exceptions, set the cause 
0:         // of the SQLException.
0:          if (JVMInfo.JDK_ID >= JVMInfo.J2SE_14 )
1:         {
0:             sqlw.initCause(getCause());
1:         // Set up the nextException chain
1:         if ( nextWarning_ != null )
1:         {
0:             // The exception chain gets constructed automatically through 
1:             // the beautiful power of recursion
0:             //
0:             // We have to use the right method to convert the next exception
0:             // depending upon its type.  Luckily with all the other subclasses
0:             // of SQLException we don't have to make our own matching 
0:             // subclasses because 
0:             sqlw.setNextException(
0:                 nextException_ instanceof SqlWarning ?
0:                     ((SqlWarning)nextException_).getSQLWarning() :
0:                     nextException_.getSQLException());
1:         
1:         return sqlw;
1:         
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class SqlWarning extends java.sql.SQLWarning implements Diagnosable {
0:     private java.lang.Throwable throwable_ = null;
0:     protected Sqlca sqlca_ = null; // for engine generated errors only
0:     //-----------------constructors-----------------------------------------------
0:     public SqlWarning(LogWriter logWriter, ErrorKey errorKey) {
0:         super(ResourceUtilities.getResource(ResourceKeys.driverOriginationIndicator) +
0:                 ResourceUtilities.getResource(errorKey.getResourceKey()),
0:                 errorKey.getSQLState(),
0:                 errorKey.getErrorCode());
0:         if (logWriter != null) {
0:             logWriter.traceDiagnosable(this);
0:         }
0:     }
0:     public SqlWarning(LogWriter logWriter, ErrorKey errorKey, Object[] args) {
0:         super(ResourceUtilities.getResource(ResourceKeys.driverOriginationIndicator) +
0:                 ResourceUtilities.getResource(errorKey.getResourceKey(), args),
0:                 errorKey.getSQLState(),
0:                 errorKey.getErrorCode());
0:         if (logWriter != null) {
0:             logWriter.traceDiagnosable(this);
0:         }
0:     }
0:     public SqlWarning(LogWriter logWriter, ErrorKey errorKey, Object arg) {
0:         this(logWriter, errorKey, new Object[]{arg});
0:     }
0:     public SqlWarning(LogWriter logWriter, Sqlca sqlca) {
0:         super();
0:         sqlca_ = sqlca;
0:         if (logWriter != null) {
0:             logWriter.traceDiagnosable(this);
0:         }
0:     }
0:     public SqlWarning(LogWriter logWriter) {
0:         super();
0:         if (logWriter != null) {
0:             logWriter.traceDiagnosable(this);
0:         }
0:     }
0:     // Temporary constructor until all error keys are defined.
0:     public SqlWarning(LogWriter logWriter, String text) {
0:         super(text);
0:         if (logWriter != null) {
0:             logWriter.traceDiagnosable(this);
0:         }
0:     }
0:     // Temporary constructor until all error keys are defined.
0:     public SqlWarning(LogWriter logWriter, java.lang.Throwable throwable, String text) {
0:         super(text);
0:         throwable_ = throwable;
0:         if (logWriter != null) {
0:             logWriter.traceDiagnosable(this);
0:         }
0:     }
0:     // Temporary constructor until all error keys are defined.
0:     public SqlWarning(LogWriter logWriter, String text, SqlState sqlState) {
0:         super(text, sqlState.getState());
0:         if (logWriter != null) {
0:             logWriter.traceDiagnosable(this);
0:         }
0:     }
0:     // Temporary constructor until all error keys are defined, for subsystem use only
0:     public SqlWarning(LogWriter logWriter, String text, String sqlState) {
0:         super(text, sqlState);
0:         if (logWriter != null) {
0:             logWriter.traceDiagnosable(this);
0:         }
0:     }
0:     // Temporary constructor until all error keys are defined.
0:     public SqlWarning(LogWriter logWriter, String text, SqlState sqlState, SqlCode errorCode) {
0:         super(text, sqlState.getState(), errorCode.getCode());
0:         if (logWriter != null) {
0:             logWriter.traceDiagnosable(this);
0:         }
0:     }
0:     // Temporary constructor until all error keys are defined, for subsystem use only.
0:     public SqlWarning(LogWriter logWriter, String text, String sqlState, int errorCode) {
0:         super(text, sqlState, errorCode);
0:         if (logWriter != null) {
0:             logWriter.traceDiagnosable(this);
0:         }
0:     }
0:     public java.lang.Throwable getThrowable() {
0:         return throwable_;
0:     }
0:     public Sqlca getSqlca() {
0:         return sqlca_;
0:     }
0:     public String getMessage() {
0:         if (sqlca_ == null) {
0:             return super.getMessage();
0:         } else {
0:             return ((Sqlca) sqlca_).getJDBCMessage();
0:         }
0:     }
0:     public String getSQLState() {
0:         if (sqlca_ == null) {
0:             return super.getSQLState();
0:         } else {
0:             return sqlca_.getSqlState();
0:         }
0:     }
1: 
0:     public int getErrorCode() {
0:         if (sqlca_ == null) {
0:             return super.getErrorCode();
0:         } else {
0:             return sqlca_.getSqlCode();
0:         }
0:     }
1: 
0:     public void printTrace(java.io.PrintWriter printWriter, String header) {
0:         ExceptionFormatter.printTrace(this, printWriter, header);
0:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.SqlWarning
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.am;
1: 
0: import org.apache.derby.client.resources.ResourceKeys;
1: 
0: // Not yet done:
0: //   Assign an ErrorKey, ResourceKey, and Resource for each throw statement.
0: //   Save for future pass to avoid maintenance during development.
1: 
0: // Until the "Error Cycle" pass is complete.
0: // Use the temporary constructors at the bottom.
0: public class SqlWarning extends java.sql.SQLWarning implements Diagnosable
0: {
0:   private java.lang.Throwable throwable_ = null;
0:   protected Sqlca sqlca_ = null; // for engine generated errors only
1: 
0:   //-----------------constructors-----------------------------------------------
1: 
0:   public SqlWarning (LogWriter logWriter, ErrorKey errorKey)
0:   {
0:     super (ResourceUtilities.getResource (ResourceKeys.driverOriginationIndicator) +
0:            ResourceUtilities.getResource (errorKey.getResourceKey()),
0:            errorKey.getSQLState(),
0:            errorKey.getErrorCode());
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   public SqlWarning (LogWriter logWriter, ErrorKey errorKey, Object[] args)
0:   {
0:     super (ResourceUtilities.getResource (ResourceKeys.driverOriginationIndicator) +
0:            ResourceUtilities.getResource (errorKey.getResourceKey(), args),
0:            errorKey.getSQLState(),
0:            errorKey.getErrorCode());
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   public SqlWarning (LogWriter logWriter, ErrorKey errorKey, Object arg)
0:   {
0:     this (logWriter, errorKey, new Object[] {arg});
0:   }
1: 
0:   public SqlWarning (LogWriter logWriter, Sqlca sqlca)
0:   {
0:     super ();
0:     sqlca_ = sqlca;
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   // Temporary constructor until all error keys are defined.
0:   public SqlWarning (LogWriter logWriter)
0:   {
0:     super ();
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   // Temporary constructor until all error keys are defined.
0:   public SqlWarning (LogWriter logWriter, String text)
0:   {
0:     super (text);
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:     // Temporary constructor until all error keys are defined.
0:   public SqlWarning (LogWriter logWriter, java.lang.Throwable throwable, String text)
0:   {
0:     super (text);
0:     throwable_ = throwable;
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   // Temporary constructor until all error keys are defined.
0:   public SqlWarning (LogWriter logWriter, String text, SqlState sqlState)
0:   {
0:     super (text, sqlState.getState());
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   // Temporary constructor until all error keys are defined, for subsystem use only
0:   public SqlWarning (LogWriter logWriter, String text, String sqlState)
0:   {
0:     super (text, sqlState);
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   // Temporary constructor until all error keys are defined.
0:   public SqlWarning (LogWriter logWriter, String text, SqlState sqlState, SqlCode errorCode)
0:   {
0:     super (text, sqlState.getState(), errorCode.getCode());
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   // Temporary constructor until all error keys are defined, for subsystem use only.
0:   public SqlWarning (LogWriter logWriter, String text, String sqlState, int errorCode)
0:   {
0:     super (text, sqlState, errorCode);
0:     if (logWriter != null) logWriter.traceDiagnosable (this);
0:   }
1: 
0:   public java.lang.Throwable getThrowable ()
0:   {
0:     return throwable_;
0:   }
1: 
0:   public Sqlca getSqlca ()
0:   {
0:     return sqlca_;
0:   }
1: 
0:   public String getMessage ()
0:   {
0:     if (sqlca_ == null)
0:       return super.getMessage();
0:     else
0:       return ((Sqlca) sqlca_).getJDBCMessage();
0:   }
1: 
0:   public String getSQLState ()
0:   {
0:     if (sqlca_ == null)
0:       return super.getSQLState();
0:     else
0:       return sqlca_.getSqlState();
0:   }
1: 
0:   public int getErrorCode ()
0:   {
0:     if (sqlca_ == null)
0:       return super.getErrorCode();
0:     else
0:       return sqlca_.getSqlCode();
0:   }
1: 
0:   public void printTrace (java.io.PrintWriter printWriter, String header)
0:   {
0:     ExceptionFormatter.printTrace (this, printWriter, header);
0:   }
0: }
1: 
============================================================================