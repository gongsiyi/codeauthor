1:9765d83: /*
1:9765d83:  * Derby - Class org.apache.derbyTesting.functionTests.tests.memory.Derby5730Test
1:9765d83:  *
1:9765d83:  * Licensed to the Apache Software Foundation (ASF) under one
1:9765d83:  * or more contributor license agreements.  See the NOTICE file
1:9765d83:  * distributed with this work for additional information
1:9765d83:  * regarding copyright ownership.  The ASF licenses this file
1:9765d83:  * to you under the Apache License, Version 2.0 (the
1:9765d83:  * "License"); you may not use this file except in compliance
1:9765d83:  * with the License.  You may obtain a copy of the License at
1:9765d83:  *
1:9765d83:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9765d83:  *
1:9765d83:  * Unless required by applicable law or agreed to in writing,
1:9765d83:  * software distributed under the License is distributed on an
1:9765d83:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9765d83:  * KIND, either express or implied.  See the License for the
1:9765d83:  * specific language governing permissions and limitations
1:9765d83:  * under the License.
1:9765d83:  */
1:9765d83: package org.apache.derbyTesting.functionTests.tests.memory;
1:9765d83: 
1:9765d83: import java.io.IOException;
1:9765d83: import java.sql.Connection;
1:9765d83: import java.sql.DatabaseMetaData;
1:9765d83: import java.sql.DriverManager;
1:9765d83: import java.sql.PreparedStatement;
1:9765d83: import java.sql.SQLException;
1:9765d83: import junit.framework.Test;
1:9765d83: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:9765d83: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:9765d83: import org.apache.derbyTesting.junit.JDBC;
1:9765d83: import org.apache.derbyTesting.junit.SpawnedProcess;
1:9765d83: 
1:9765d83: /**
1:9765d83:  * Regression test for DERBY-5730. Repeatedly boot and shut down a database.
1:9765d83:  * In between call a function in the SYSFUN schema, a different one each time.
1:9765d83:  * Without the fix, a reference to the currently running database instance will
1:9765d83:  * be leaked for each iteration, and eventually an OutOfMemoryError is raised.
1:9765d83:  */
1:9765d83: public class Derby5730Test extends BaseTestCase {
1:9765d83: 
1:9765d83:     public Derby5730Test(String name) {
1:9765d83:         super(name);
1:9765d83:     }
1:9765d83: 
1:9765d83:     public static Test suite() {
1:9765d83:         // The test case uses DriverManager, so require JDBC 3.0 or higher.
1:9765d83:         if (JDBC.vmSupportsJDBC3()) {
1:1ae02c9:             return new BaseTestSuite(Derby5730Test.class);
1:9765d83:         }
1:1ae02c9:         return new BaseTestSuite("Derby5730Test - skipped");
1:9765d83:     }
1:9765d83: 
1:9765d83:     /**
1:9765d83:      * Test case for DERBY-5730. The memory leak is only reproduced if the
1:9765d83:      * test case runs with capped heap size and the SYSFUN functions have not
1:9765d83:      * been called previously in the same JVM process. Spawn a new process to
1:9765d83:      * satisfy those requirements.
1:9765d83:      */
1:9765d83:     public void testLeak() throws IOException {
1:9765d83:         String[] cmd = {"-Xmx16M", getClass().getName()};
1:9765d83:         SpawnedProcess sp = new SpawnedProcess(execJavaCmd(cmd), "DERBY-5730");
1:9765d83:         if (sp.complete() != 0) {
1:9765d83:             fail(sp.getFailMessage("Process failed"));
1:9765d83:         }
1:9765d83:     }
1:9765d83: 
1:9765d83:     private final static Integer ZERO = Integer.valueOf("0");
1:9765d83:     private final static Integer ONE = Integer.valueOf("1");
1:9765d83:     private final static Integer TWO = Integer.valueOf("2");
1:9765d83: 
1:9765d83:     /**
1:9765d83:      * These are the functions in the SYSFUN schema. The second value in each
1:9765d83:      * row tells how many arguments the function takes.
1:9765d83:      */
1:9765d83:     private final static Object[][] FUNCTIONS = {
1:9765d83:         {"ACOS", ONE},
1:9765d83:         {"ASIN", ONE},
1:9765d83:         {"ATAN", ONE},
1:9765d83:         {"ATAN2", TWO},
1:9765d83:         {"COS", ONE},
1:9765d83:         {"SIN", ONE},
1:9765d83:         {"TAN", ONE},
1:9765d83:         {"PI", ZERO},
1:9765d83:         {"DEGREES", ONE},
1:9765d83:         {"RADIANS", ONE},
1:9765d83:         {"LN", ONE},
1:9765d83:         {"LOG", ONE},
1:9765d83:         {"LOG10", ONE},
1:9765d83:         {"EXP", ONE},
1:9765d83:         {"CEIL", ONE},
1:9765d83:         {"CEILING", ONE},
1:9765d83:         {"FLOOR", ONE},
1:9765d83:         {"SIGN", ONE},
1:9765d83:         {"RANDOM", ZERO},
1:9765d83:         {"RAND", ONE},
1:9765d83:         {"COT", ONE},
1:9765d83:         {"COSH", ONE},
1:9765d83:         {"SINH", ONE},
1:9765d83:         {"TANH", ONE},
1:9765d83:     };
1:9765d83: 
1:9765d83:     /**
1:9765d83:      * Boot and repeatedly reboot a database, calling SYSFUN functions in
1:9765d83:      * between. Eventually runs out of memory if DERBY-5730 is not fixed.
1:9765d83:      * Must run with capped memory size (-Xmx16M) to expose the memory leak.
1:9765d83:      */
1:74086fa:     public static void main(String[] args) throws Exception {
1:74086fa:         Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
1:9765d83:         for (int i = 0; i < FUNCTIONS.length; i++) {
1:9765d83:             Connection c = DriverManager.getConnection(
1:9765d83:                     "jdbc:derby:memory:derby5730;create=true");
1:9765d83:             prepareFunction(c,
1:9765d83:                             (String) FUNCTIONS[i][0],
1:9765d83:                             ((Integer) FUNCTIONS[i][1]).intValue());
1:9765d83:             growDatabaseFootprint(c);
1:9765d83:             c.close();
1:9765d83:             try {
1:9765d83:                 DriverManager.getConnection(
1:9765d83:                     "jdbc:derby:memory:derby5730;shutdown=true");
1:9765d83:                 fail("Shutdown should throw exception");
1:9765d83:             } catch (SQLException sqle) {
1:9765d83:                 BaseJDBCTestCase.assertSQLState("08006", sqle);
1:9765d83:             }
1:9765d83:         }
1:9765d83:     }
1:9765d83: 
1:9765d83:     /**
1:9765d83:      * Prepare a call to a function. Close the statement once it is prepared.
1:9765d83:      * Before the bug was fixed, preparing a call to a function in SYSFUN that
1:9765d83:      * hadn't been prepared in the same JVM process, would leak a reference to
1:9765d83:      * the current database instance.
1:9765d83:      */
1:9765d83:     private static void prepareFunction(Connection c, String name, int args)
1:9765d83:             throws SQLException {
1:9765d83:         StringBuffer sql = new StringBuffer("VALUES ");
1:9765d83:         sql.append(name);
1:9765d83:         sql.append('(');
1:9765d83:         for (int i = 0; i < args; i++) {
1:9765d83:             if (i > 0) sql.append(',');
1:9765d83:             sql.append('?');
1:9765d83:         }
1:9765d83:         sql.append(')');
1:9765d83: 
1:9765d83:         String sqlText = sql.toString();
1:9765d83: 
1:9765d83:         System.out.println(sqlText);
1:9765d83:         PreparedStatement ps = c.prepareStatement(sqlText);
1:9765d83:         ps.close();
1:9765d83:     }
1:9765d83: 
1:9765d83:     /**
1:9765d83:      * Perform some database operations so that the internal structures of
1:9765d83:      * the database instance (caches, for example) are filled, and the memory
1:9765d83:      * footprint of the database instance grows. This is done to make the
1:9765d83:      * test case run out of memory faster.
1:9765d83:      */
1:9765d83:     private static void growDatabaseFootprint(Connection c)
1:9765d83:             throws SQLException {
1:9765d83:         DatabaseMetaData dmd = c.getMetaData();
1:9765d83:         JDBC.assertDrainResults(dmd.getColumns(null, "%", "%", "%"));
1:9765d83:         JDBC.assertDrainResults(dmd.getTables(null, "%", "%", null));
1:9765d83:     }
1:9765d83: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite(Derby5730Test.class);
1:         return new BaseTestSuite("Derby5730Test - skipped");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:74086fa
/////////////////////////////////////////////////////////////////////////
1:     public static void main(String[] args) throws Exception {
1:         Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
commit:9765d83
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.memory.Derby5730Test
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.memory;
1: 
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SpawnedProcess;
1: 
1: /**
1:  * Regression test for DERBY-5730. Repeatedly boot and shut down a database.
1:  * In between call a function in the SYSFUN schema, a different one each time.
1:  * Without the fix, a reference to the currently running database instance will
1:  * be leaked for each iteration, and eventually an OutOfMemoryError is raised.
1:  */
1: public class Derby5730Test extends BaseTestCase {
1: 
1:     public Derby5730Test(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // The test case uses DriverManager, so require JDBC 3.0 or higher.
1:         if (JDBC.vmSupportsJDBC3()) {
0:             return new TestSuite(Derby5730Test.class);
1:         }
0:         return new TestSuite("Derby5730Test - skipped");
1:     }
1: 
1:     /**
1:      * Test case for DERBY-5730. The memory leak is only reproduced if the
1:      * test case runs with capped heap size and the SYSFUN functions have not
1:      * been called previously in the same JVM process. Spawn a new process to
1:      * satisfy those requirements.
1:      */
1:     public void testLeak() throws IOException {
1:         String[] cmd = {"-Xmx16M", getClass().getName()};
1:         SpawnedProcess sp = new SpawnedProcess(execJavaCmd(cmd), "DERBY-5730");
1:         if (sp.complete() != 0) {
1:             fail(sp.getFailMessage("Process failed"));
1:         }
1:     }
1: 
1:     private final static Integer ZERO = Integer.valueOf("0");
1:     private final static Integer ONE = Integer.valueOf("1");
1:     private final static Integer TWO = Integer.valueOf("2");
1: 
1:     /**
1:      * These are the functions in the SYSFUN schema. The second value in each
1:      * row tells how many arguments the function takes.
1:      */
1:     private final static Object[][] FUNCTIONS = {
1:         {"ACOS", ONE},
1:         {"ASIN", ONE},
1:         {"ATAN", ONE},
1:         {"ATAN2", TWO},
1:         {"COS", ONE},
1:         {"SIN", ONE},
1:         {"TAN", ONE},
1:         {"PI", ZERO},
1:         {"DEGREES", ONE},
1:         {"RADIANS", ONE},
1:         {"LN", ONE},
1:         {"LOG", ONE},
1:         {"LOG10", ONE},
1:         {"EXP", ONE},
1:         {"CEIL", ONE},
1:         {"CEILING", ONE},
1:         {"FLOOR", ONE},
1:         {"SIGN", ONE},
1:         {"RANDOM", ZERO},
1:         {"RAND", ONE},
1:         {"COT", ONE},
1:         {"COSH", ONE},
1:         {"SINH", ONE},
1:         {"TANH", ONE},
1:     };
1: 
1:     /**
1:      * Boot and repeatedly reboot a database, calling SYSFUN functions in
1:      * between. Eventually runs out of memory if DERBY-5730 is not fixed.
1:      * Must run with capped memory size (-Xmx16M) to expose the memory leak.
1:      */
0:     public static void main(String[] args) throws SQLException {
1:         for (int i = 0; i < FUNCTIONS.length; i++) {
1:             Connection c = DriverManager.getConnection(
1:                     "jdbc:derby:memory:derby5730;create=true");
1:             prepareFunction(c,
1:                             (String) FUNCTIONS[i][0],
1:                             ((Integer) FUNCTIONS[i][1]).intValue());
1:             growDatabaseFootprint(c);
1:             c.close();
1:             try {
1:                 DriverManager.getConnection(
1:                     "jdbc:derby:memory:derby5730;shutdown=true");
1:                 fail("Shutdown should throw exception");
1:             } catch (SQLException sqle) {
1:                 BaseJDBCTestCase.assertSQLState("08006", sqle);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Prepare a call to a function. Close the statement once it is prepared.
1:      * Before the bug was fixed, preparing a call to a function in SYSFUN that
1:      * hadn't been prepared in the same JVM process, would leak a reference to
1:      * the current database instance.
1:      */
1:     private static void prepareFunction(Connection c, String name, int args)
1:             throws SQLException {
1:         StringBuffer sql = new StringBuffer("VALUES ");
1:         sql.append(name);
1:         sql.append('(');
1:         for (int i = 0; i < args; i++) {
1:             if (i > 0) sql.append(',');
1:             sql.append('?');
1:         }
1:         sql.append(')');
1: 
1:         String sqlText = sql.toString();
1: 
1:         System.out.println(sqlText);
1:         PreparedStatement ps = c.prepareStatement(sqlText);
1:         ps.close();
1:     }
1: 
1:     /**
1:      * Perform some database operations so that the internal structures of
1:      * the database instance (caches, for example) are filled, and the memory
1:      * footprint of the database instance grows. This is done to make the
1:      * test case run out of memory faster.
1:      */
1:     private static void growDatabaseFootprint(Connection c)
1:             throws SQLException {
1:         DatabaseMetaData dmd = c.getMetaData();
1:         JDBC.assertDrainResults(dmd.getColumns(null, "%", "%", "%"));
1:         JDBC.assertDrainResults(dmd.getTables(null, "%", "%", null));
1:     }
1: }
============================================================================