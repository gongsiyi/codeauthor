1:eac0369: /*
4:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.DateTimeParser
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * This class provides a simple regular expression parser for standard format dates, times, and timestamps
1:eac0369:  */
1:eac0369: class DateTimeParser
2:eac0369: {
1:eac0369: 
1:eac0369:     private String str;
1:eac0369:     private int len;
1:eac0369:     private int fieldStart;
1:eac0369:     private char currentSeparator;
1:eac0369: 
1:eac0369:     DateTimeParser( String str)
1:eac0369:     {
1:eac0369:         this.str = str;
1:eac0369:         len = str.length();
2:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Parse the next integer.
2:eac0369:      *
1:eac0369:      * @param maxDigits the maximum number of digits
1:eac0369:      * @param truncationAllowed If true then leading zeroes may be ommitted. If false then the integer must be
1:eac0369:      *                          exactly ndigits long.
1:eac0369:      * @param separator The separator at the end of the integer. If zero then the integer must be at the end of the string
1:eac0369:      *                  but may be followed by spaces.
1:eac0369:      * @param isFraction If true then the returned integer will be multiplied by 10**(maxDigits - actualDigitCount)
1:eac0369:      *
1:eac0369:      * @return the integer.
1:eac0369:      *
1:eac0369:      * @exception StandardException invalid syntax.
1:eac0369:      */
1:eac0369:     int parseInt( int maxDigits, boolean truncationAllowed, char[] separator, boolean isFraction)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         int number = 0;
1:eac0369:         char c;
1:eac0369:         int digitCount = 0;
1:eac0369: 
1:eac0369:         for( ; fieldStart < len; fieldStart++)
1:eac0369:         {
1:eac0369:             c = str.charAt( fieldStart);
1:eac0369:             if( Character.isDigit( c))
1:eac0369:             {
1:eac0369:                 if( digitCount >= maxDigits)
1:eac0369:                     throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1:eac0369:                 digitCount++;
1:eac0369:                 number = number*10 + Character.digit( c, 10);
1:eac0369:             }
1:eac0369:             else
1:eac0369:                 break;
1:eac0369:         }
1:eac0369:         if( truncationAllowed ? (digitCount == 0 && !isFraction) : (digitCount != maxDigits))
1:eac0369:             throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1:eac0369: 
1:eac0369:         updateCurrentSeparator();
1:eac0369:         
1:eac0369:         if( separator == null)
1:eac0369:         {
1:eac0369:             // separator not required
1:eac0369:             if( fieldStart < len)
1:eac0369:                 fieldStart++;
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             int sepIdx;
1:eac0369:             for( sepIdx = 0; sepIdx < separator.length; sepIdx++)
1:eac0369:             {
1:eac0369:                 if( separator[sepIdx] != 0)
1:eac0369:                 {
1:eac0369:                     if( currentSeparator == separator[sepIdx])
1:eac0369:                     {
1:eac0369:                         fieldStart++;
1:eac0369:                         break;
1:eac0369:                     }
1:eac0369:                 }
1:eac0369:                 else
1:eac0369:                 {
1:eac0369:                     // separator[sepIdx] matches the end of the string
1:eac0369:                     int j;
1:eac0369:                     for( j = fieldStart; j < len; j++)
1:eac0369:                     {
1:eac0369:                         if( str.charAt( j) != ' ')
1:eac0369:                             break;
1:eac0369:                     }
1:eac0369:                     if( j == len)
1:eac0369:                     {
1:eac0369:                         fieldStart = j;
1:eac0369:                         break;
1:eac0369:                     }
1:eac0369:                 }
1:eac0369:             }
1:eac0369:             if( sepIdx >= separator.length)
1:eac0369:                 throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1:eac0369:         }
1:eac0369: 
1:eac0369:         if( isFraction)
1:eac0369:         {
1:eac0369:             for(int i = digitCount; i < maxDigits; i++)
1:eac0369:                 number *= 10;
1:eac0369:         }
1:eac0369:         return number;
1:eac0369:     } // end of parseInt
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Determine if the next characters are one of a choice of strings.
1:eac0369:      *
1:eac0369:      * @param choices An array of strings.
1:eac0369:      *
1:eac0369:      * @return An index in choices.
1:eac0369:      *
1:eac0369:      * @exception StandardException if the next characters are not in choices.
1:eac0369:      */
1:eac0369:     int parseChoice( String[] choices) throws StandardException
1:eac0369:     {
1:eac0369:         for( int choiceIdx = 0; choiceIdx < choices.length; choiceIdx++)
1:eac0369:         {
1:eac0369:             String choice = choices[ choiceIdx];
1:eac0369:             int choiceLen = choice.length();
1:eac0369:             if( fieldStart + choiceLen <= len)
1:eac0369:             {
1:eac0369:                 int i;
1:eac0369:                 for( i = 0; i < choiceLen; i++)
1:eac0369:                 {
1:eac0369:                     if( choice.charAt( i) != str.charAt( fieldStart + i))
1:eac0369:                         break;
1:eac0369:                 }
1:eac0369:                 if( i == choiceLen)
1:eac0369:                 {
1:eac0369:                     fieldStart += choiceLen;
1:eac0369:                     updateCurrentSeparator();
1:eac0369:                     return choiceIdx;
1:eac0369:                 }
1:eac0369:             }
1:eac0369:         }
1:eac0369:         throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1:eac0369:     } // end of parseChoice
1:eac0369: 
1:eac0369:     private void updateCurrentSeparator()
1:eac0369:     {
1:eac0369:         if( fieldStart >= len)
1:eac0369:             currentSeparator = 0;
1:eac0369:         else
1:eac0369:         {
1:eac0369:             currentSeparator = str.charAt( fieldStart);
1:eac0369:             if( currentSeparator == ' ')
1:eac0369:             {
1:eac0369:                 // Trailing spaces are always OK. See if we are really at the end
1:eac0369:                 for( int i = fieldStart + 1; i < len; i++)
1:eac0369:                 {
1:eac0369:                     if( str.charAt( i) != ' ')
1:eac0369:                         return;
1:eac0369:                 }
1:eac0369:                 currentSeparator = 0;
1:eac0369:                 fieldStart = len;
1:eac0369:             }
1:eac0369:         }
1:eac0369:     } // end of updateCurrentSeparator
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Check that we are at the end of the string: that the rest of the characters, if any, are blanks.
1:eac0369:      *
1:eac0369:      * @exception StandardException if there are more non-blank characters.
1:eac0369:      */
1:320f6af:     void checkEnd() throws StandardException
1:eac0369:     {
1:eac0369:         for( ; fieldStart < len; fieldStart++)
1:eac0369:         {
1:eac0369:             if( str.charAt( fieldStart) != ' ')
1:eac0369:                 throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1:eac0369:         }
1:eac0369:         currentSeparator = 0;
1:eac0369:     } // end of checkEnd
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * @return the next separator, 0 if there are none
1:eac0369:      */
1:eac0369:     char nextSeparator()
1:eac0369:     {
1:eac0369:         for( int i = fieldStart + 1; i < len; i++)
1:eac0369:         {
1:eac0369:             char c = str.charAt( i);
1:eac0369:             if( ! Character.isLetterOrDigit( c))
1:eac0369:                 return c;
1:eac0369:         }
1:eac0369:         return 0;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * @return the separator between the last parsed integer and the next integer, 0 if the parser is at
1:eac0369:      *         the end of the string.
1:eac0369:      */
1:eac0369:     char getCurrentSeparator()
1:eac0369:     {
1:eac0369:         return currentSeparator;
1:eac0369:     }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5f00ce0
/////////////////////////////////////////////////////////////////////////
commit:320f6af
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     void checkEnd() throws StandardException
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.DateTimeParser
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * This class provides a simple regular expression parser for standard format dates, times, and timestamps
1:  */
1: class DateTimeParser
1: {
1: 
1:     /**
0:        IBM Copyright &copy notice.
1:     */
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1:     private String str;
0:     private String trimmedString;
1:     private int len;
1:     private int fieldStart;
1:     private char currentSeparator;
1: 
1:     DateTimeParser( String str)
1:     {
1:         this.str = str;
1:         len = str.length();
1:     }
1: 
1:     /**
1:      * Parse the next integer.
1:      *
1:      * @param maxDigits the maximum number of digits
1:      * @param truncationAllowed If true then leading zeroes may be ommitted. If false then the integer must be
1:      *                          exactly ndigits long.
1:      * @param separator The separator at the end of the integer. If zero then the integer must be at the end of the string
1:      *                  but may be followed by spaces.
0:      * @param separatorRequired If true then the integer must be followed by the separator. If false then the integer
0:      *                          may terminate the string or be followed by the separator
1:      * @param isFraction If true then the returned integer will be multiplied by 10**(maxDigits - actualDigitCount)
1:      *
1:      * @return the integer.
1:      *
1:      * @exception StandardException invalid syntax.
1:      */
1:     int parseInt( int maxDigits, boolean truncationAllowed, char[] separator, boolean isFraction)
1:         throws StandardException
1:     {
1:         int number = 0;
1:         char c;
1:         int digitCount = 0;
1: 
1:         for( ; fieldStart < len; fieldStart++)
1:         {
1:             c = str.charAt( fieldStart);
1:             if( Character.isDigit( c))
1:             {
1:                 if( digitCount >= maxDigits)
1:                     throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1:                 digitCount++;
1:                 number = number*10 + Character.digit( c, 10);
1:             }
1:             else
1:                 break;
1:         }
1:         if( truncationAllowed ? (digitCount == 0 && !isFraction) : (digitCount != maxDigits))
1:             throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1: 
1:         updateCurrentSeparator();
1:         
1:         if( separator == null)
1:         {
1:             // separator not required
1:             if( fieldStart < len)
1:                 fieldStart++;
1:         }
1:         else
1:         {
1:             int sepIdx;
1:             for( sepIdx = 0; sepIdx < separator.length; sepIdx++)
1:             {
1:                 if( separator[sepIdx] != 0)
1:                 {
1:                     if( currentSeparator == separator[sepIdx])
1:                     {
1:                         fieldStart++;
1:                         break;
1:                     }
1:                 }
1:                 else
1:                 {
1:                     // separator[sepIdx] matches the end of the string
1:                     int j;
1:                     for( j = fieldStart; j < len; j++)
1:                     {
1:                         if( str.charAt( j) != ' ')
1:                             break;
1:                     }
1:                     if( j == len)
1:                     {
1:                         fieldStart = j;
1:                         break;
1:                     }
1:                 }
1:             }
1:             if( sepIdx >= separator.length)
1:                 throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1:         }
1: 
1:         if( isFraction)
1:         {
1:             for(int i = digitCount; i < maxDigits; i++)
1:                 number *= 10;
1:         }
1:         return number;
1:     } // end of parseInt
1: 
1:     /**
1:      * Determine if the next characters are one of a choice of strings.
1:      *
1:      * @param choices An array of strings.
1:      *
1:      * @return An index in choices.
1:      *
1:      * @exception StandardException if the next characters are not in choices.
1:      */
1:     int parseChoice( String[] choices) throws StandardException
1:     {
1:         for( int choiceIdx = 0; choiceIdx < choices.length; choiceIdx++)
1:         {
1:             String choice = choices[ choiceIdx];
1:             int choiceLen = choice.length();
1:             if( fieldStart + choiceLen <= len)
1:             {
1:                 int i;
1:                 for( i = 0; i < choiceLen; i++)
1:                 {
1:                     if( choice.charAt( i) != str.charAt( fieldStart + i))
1:                         break;
1:                 }
1:                 if( i == choiceLen)
1:                 {
1:                     fieldStart += choiceLen;
1:                     updateCurrentSeparator();
1:                     return choiceIdx;
1:                 }
1:             }
1:         }
1:         throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1:     } // end of parseChoice
1: 
1:     private void updateCurrentSeparator()
1:     {
1:         if( fieldStart >= len)
1:             currentSeparator = 0;
1:         else
1:         {
1:             currentSeparator = str.charAt( fieldStart);
1:             if( currentSeparator == ' ')
1:             {
1:                 // Trailing spaces are always OK. See if we are really at the end
1:                 for( int i = fieldStart + 1; i < len; i++)
1:                 {
1:                     if( str.charAt( i) != ' ')
1:                         return;
1:                 }
1:                 currentSeparator = 0;
1:                 fieldStart = len;
1:             }
1:         }
1:     } // end of updateCurrentSeparator
1: 
1:     /**
1:      * Check that we are at the end of the string: that the rest of the characters, if any, are blanks.
1:      *
0:      * @return the original string with trailing blanks trimmed off.
1:      * @exception StandardException if there are more non-blank characters.
1:      */
0:     String checkEnd() throws StandardException
1:     {
0:         int end = fieldStart;
1:         for( ; fieldStart < len; fieldStart++)
1:         {
1:             if( str.charAt( fieldStart) != ' ')
1:                 throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
1:         }
1:         currentSeparator = 0;
0:         while( end > 0 && str.charAt( end - 1) == ' ')
0:             end--;
0:         trimmedString = (end == len) ? str : str.substring( 0, end);
0:         return trimmedString;
1:     } // end of checkEnd
1: 
1:     /**
0:      * Get the parsed string with trailing blanks removed. <b>This method is only valid after checkEnd
0:      * has been called.</b>
1:      *
0:      * @return The string with trailing blanks removed.
1:      */
0:     String getTrimmedString()
1:     {
0:         return trimmedString;
1:     }
1: 
1:     /**
1:      * @return the next separator, 0 if there are none
1:      */
1:     char nextSeparator()
1:     {
1:         for( int i = fieldStart + 1; i < len; i++)
1:         {
1:             char c = str.charAt( i);
1:             if( ! Character.isLetterOrDigit( c))
1:                 return c;
1:         }
1:         return 0;
1:     }
1: 
1:     /**
1:      * @return the separator between the last parsed integer and the next integer, 0 if the parser is at
1:      *         the end of the string.
1:      */
1:     char getCurrentSeparator()
1:     {
1:         return currentSeparator;
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * This class provides a simple regular expression parser for standard format dates, times, and timestamps
0:  */
0: class DateTimeParser
0: {
0: 
0:     /**
0:        IBM Copyright &copy notice.
0:     */
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0:     private String str;
0:     private String trimmedString;
0:     private int len;
0:     private int fieldStart;
0:     private char currentSeparator;
0: 
0:     DateTimeParser( String str)
0:     {
0:         this.str = str;
0:         len = str.length();
0:     }
0: 
0:     /**
0:      * Parse the next integer.
0:      *
0:      * @param maxDigits the maximum number of digits
0:      * @param truncationAllowed If true then leading zeroes may be ommitted. If false then the integer must be
0:      *                          exactly ndigits long.
0:      * @param separator The separator at the end of the integer. If zero then the integer must be at the end of the string
0:      *                  but may be followed by spaces.
0:      * @param separatorRequired If true then the integer must be followed by the separator. If false then the integer
0:      *                          may terminate the string or be followed by the separator
0:      * @param isFraction If true then the returned integer will be multiplied by 10**(maxDigits - actualDigitCount)
0:      *
0:      * @return the integer.
0:      *
0:      * @exception StandardException invalid syntax.
0:      */
0:     int parseInt( int maxDigits, boolean truncationAllowed, char[] separator, boolean isFraction)
0:         throws StandardException
0:     {
0:         int number = 0;
0:         char c;
0:         int digitCount = 0;
0: 
0:         for( ; fieldStart < len; fieldStart++)
0:         {
0:             c = str.charAt( fieldStart);
0:             if( Character.isDigit( c))
0:             {
0:                 if( digitCount >= maxDigits)
0:                     throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
0:                 digitCount++;
0:                 number = number*10 + Character.digit( c, 10);
0:             }
0:             else
0:                 break;
0:         }
0:         if( truncationAllowed ? (digitCount == 0 && !isFraction) : (digitCount != maxDigits))
0:             throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
0: 
0:         updateCurrentSeparator();
0:         
0:         if( separator == null)
0:         {
0:             // separator not required
0:             if( fieldStart < len)
0:                 fieldStart++;
0:         }
0:         else
0:         {
0:             int sepIdx;
0:             for( sepIdx = 0; sepIdx < separator.length; sepIdx++)
0:             {
0:                 if( separator[sepIdx] != 0)
0:                 {
0:                     if( currentSeparator == separator[sepIdx])
0:                     {
0:                         fieldStart++;
0:                         break;
0:                     }
0:                 }
0:                 else
0:                 {
0:                     // separator[sepIdx] matches the end of the string
0:                     int j;
0:                     for( j = fieldStart; j < len; j++)
0:                     {
0:                         if( str.charAt( j) != ' ')
0:                             break;
0:                     }
0:                     if( j == len)
0:                     {
0:                         fieldStart = j;
0:                         break;
0:                     }
0:                 }
0:             }
0:             if( sepIdx >= separator.length)
0:                 throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
0:         }
0: 
0:         if( isFraction)
0:         {
0:             for(int i = digitCount; i < maxDigits; i++)
0:                 number *= 10;
0:         }
0:         return number;
0:     } // end of parseInt
0: 
0:     /**
0:      * Determine if the next characters are one of a choice of strings.
0:      *
0:      * @param choices An array of strings.
0:      *
0:      * @return An index in choices.
0:      *
0:      * @exception StandardException if the next characters are not in choices.
0:      */
0:     int parseChoice( String[] choices) throws StandardException
0:     {
0:         for( int choiceIdx = 0; choiceIdx < choices.length; choiceIdx++)
0:         {
0:             String choice = choices[ choiceIdx];
0:             int choiceLen = choice.length();
0:             if( fieldStart + choiceLen <= len)
0:             {
0:                 int i;
0:                 for( i = 0; i < choiceLen; i++)
0:                 {
0:                     if( choice.charAt( i) != str.charAt( fieldStart + i))
0:                         break;
0:                 }
0:                 if( i == choiceLen)
0:                 {
0:                     fieldStart += choiceLen;
0:                     updateCurrentSeparator();
0:                     return choiceIdx;
0:                 }
0:             }
0:         }
0:         throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
0:     } // end of parseChoice
0: 
0:     private void updateCurrentSeparator()
0:     {
0:         if( fieldStart >= len)
0:             currentSeparator = 0;
0:         else
0:         {
0:             currentSeparator = str.charAt( fieldStart);
0:             if( currentSeparator == ' ')
0:             {
0:                 // Trailing spaces are always OK. See if we are really at the end
0:                 for( int i = fieldStart + 1; i < len; i++)
0:                 {
0:                     if( str.charAt( i) != ' ')
0:                         return;
0:                 }
0:                 currentSeparator = 0;
0:                 fieldStart = len;
0:             }
0:         }
0:     } // end of updateCurrentSeparator
0: 
0:     /**
0:      * Check that we are at the end of the string: that the rest of the characters, if any, are blanks.
0:      *
0:      * @return the original string with trailing blanks trimmed off.
0:      * @exception StandardException if there are more non-blank characters.
0:      */
0:     String checkEnd() throws StandardException
0:     {
0:         int end = fieldStart;
0:         for( ; fieldStart < len; fieldStart++)
0:         {
0:             if( str.charAt( fieldStart) != ' ')
0:                 throw StandardException.newException( SQLState.LANG_DATE_SYNTAX_EXCEPTION);
0:         }
0:         currentSeparator = 0;
0:         while( end > 0 && str.charAt( end - 1) == ' ')
0:             end--;
0:         trimmedString = (end == len) ? str : str.substring( 0, end);
0:         return trimmedString;
0:     } // end of checkEnd
0: 
0:     /**
0:      * Get the parsed string with trailing blanks removed. <b>This method is only valid after checkEnd
0:      * has been called.</b>
0:      *
0:      * @return The string with trailing blanks removed.
0:      */
0:     String getTrimmedString()
0:     {
0:         return trimmedString;
0:     }
0: 
0:     /**
0:      * @return the next separator, 0 if there are none
0:      */
0:     char nextSeparator()
0:     {
0:         for( int i = fieldStart + 1; i < len; i++)
0:         {
0:             char c = str.charAt( i);
0:             if( ! Character.isLetterOrDigit( c))
0:                 return c;
0:         }
0:         return 0;
0:     }
0: 
0:     /**
0:      * @return the separator between the last parsed integer and the next integer, 0 if the parser is at
0:      *         the end of the string.
0:      */
0:     char getCurrentSeparator()
0:     {
0:         return currentSeparator;
0:     }
0: }
============================================================================