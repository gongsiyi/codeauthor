1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.DirectActions
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.ArrayInputStream;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1:eac0369: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: 
1:eac0369: import java.io.ByteArrayOutputStream;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: 
1:eac0369: public class DirectActions implements PageActions  {
1:eac0369: 
1:eac0369: 	protected DynamicByteArrayOutputStream outBytes;	
1:eac0369: 	protected ArrayInputStream	limitIn;
1:eac0369: 	
1:eac0369: 	public DirectActions() {
1:eac0369: 		outBytes = new DynamicByteArrayOutputStream();
1:eac0369: 		limitIn = new ArrayInputStream();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionDelete(
1:eac0369:     RawTransaction  t, 
1:eac0369:     BasePage        page, 
1:eac0369:     int             slot, 
1:eac0369:     int             recordId, 
1:eac0369:     boolean         delete, 
1:eac0369:     LogicalUndo     undo)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			page.setDeleteStatus((LogInstant)null, slot, delete);
1:eac0369: 
1:eac0369: 		} catch (IOException ioe) {
1:eac0369: 
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int actionUpdate(
1:eac0369:     RawTransaction          t, 
1:eac0369:     BasePage                page, 
1:eac0369:     int                     slot, 
1:eac0369:     int                     recordId,
1:eac0369:     Object[]   row, 
1:eac0369:     FormatableBitSet                 validColumns,
1:eac0369:     int                     realStartColumn, 
1:eac0369:     DynamicByteArrayOutputStream  logBuffer, 
1:eac0369:     int                     realSpaceOnPage, 
1:eac0369:     RecordHandle            headRowHandle)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (logBuffer == null)
1:eac0369: 			outBytes.reset();
1:eac0369: 		else
1:eac0369: 			outBytes = (DynamicByteArrayOutputStream) logBuffer;
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			// manufactures the new row  into outBytes
1:eac0369: 			int nextColumn = 
1:eac0369:                 page.logRow(
1:eac0369:                     slot, false, recordId, row, validColumns, outBytes, 0,
1:eac0369:                     Page.INSERT_OVERFLOW, realStartColumn, 
1:eac0369:                     realSpaceOnPage, 100);
1:eac0369: 
1:eac0369: 			limitIn.setData(outBytes.getByteArray());
1:eac0369: 			limitIn.setPosition(outBytes.getBeginPosition());
1:eac0369: 			limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
1:eac0369: 
1:eac0369: 			// copy the new row from outBytes into the page
1:eac0369: 			page.storeRecord((LogInstant) null, slot, false, limitIn);
1:eac0369: 
1:eac0369: 			return nextColumn;
1:eac0369: 
1:eac0369: 		} catch (IOException ioe) {
1:eac0369: 
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionPurge(RawTransaction t, BasePage page, int slot, int
1:eac0369: 							num_rows, int[] recordIds, boolean needDataLogged)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		// purge the records in the stored version
1:eac0369: 		// we need to remove from high to low because the slots will be moved down
1:eac0369: 		// as soon as one is removed.
1:eac0369: 
1:eac0369: 		// we could get the slot with the recordId but that will be a waste
1:eac0369: 		// since the page was never unlatch and the slot number is good
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			for (int i = num_rows-1; i >= 0; i--)
1:eac0369: 			{
1:eac0369: 				page.purgeRecord((LogInstant) null, slot+i, recordIds[i]);
1:eac0369: 			}
1:eac0369: 		} catch (IOException ioe) {
1:eac0369: 
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionUpdateField(
1:eac0369:     RawTransaction          t, 
1:eac0369:     BasePage                page, 
1:eac0369:     int                     slot, 
1:eac0369:     int                     recordId, 
1:eac0369:     int                     fieldId, 
1:eac0369:     Object     newValue, 
1:eac0369:     LogicalUndo             undo)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		outBytes.reset();
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			page.logColumn(slot, fieldId, newValue, (DynamicByteArrayOutputStream) outBytes, 100);
1:eac0369: 
1:eac0369: 			limitIn.setData(outBytes.getByteArray());
1:eac0369: 			limitIn.setPosition(outBytes.getBeginPosition());
1:eac0369: 			limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
1:eac0369: 
1:eac0369: 			page.storeField((LogInstant) null, slot, fieldId, limitIn);
1:eac0369: 
1:eac0369: 		} catch (IOException ioe) {
1:eac0369: 
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int actionInsert(
1:eac0369:     RawTransaction          t, 
1:eac0369:     BasePage                page, 
1:eac0369:     int                     slot, 
1:eac0369:     int                     recordId,
1:eac0369:     Object[]                row, 
1:eac0369:     FormatableBitSet                 validColumns, 
1:eac0369:     LogicalUndo             undo, 
1:eac0369:     byte                    insertFlag, 
1:eac0369:     int                     startColumn,
1:eac0369:     boolean                 isLongColumn, 
1:eac0369:     int                     realStartColumn, 
1:eac0369:     DynamicByteArrayOutputStream  logBuffer, 
1:eac0369:     int                     realSpaceOnPage,
1:eac0369:     int                     overflowThreshold)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (logBuffer == null)
1:eac0369: 			outBytes.reset();
1:eac0369: 		else
1:eac0369: 			outBytes = (DynamicByteArrayOutputStream) logBuffer;
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			if (isLongColumn) {
1:eac0369: 				startColumn = page.logLongColumn(slot, recordId,
1:eac0369: 					row[0], (DynamicByteArrayOutputStream) outBytes);
1:eac0369: 			} else {
1:eac0369: 				startColumn = page.logRow(slot, true, recordId, row, validColumns,
1:eac0369: 					(DynamicByteArrayOutputStream) outBytes, startColumn, insertFlag, realStartColumn, realSpaceOnPage,
1:eac0369: 					overflowThreshold);
1:eac0369: 			}
1:eac0369: 	
1:eac0369: 			limitIn.setData(outBytes.getByteArray());
1:eac0369: 			limitIn.setPosition(outBytes.getBeginPosition());
1:eac0369: 			limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
1:eac0369: 
1:eac0369: 			page.storeRecord((LogInstant) null, slot, true, limitIn);
1:eac0369: 			return (startColumn);
1:eac0369: 
1:eac0369: 		} catch (IOException ioe) {
1:eac0369: 
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionCopyRows(RawTransaction t, BasePage destPage, BasePage srcPage, int destSlot, int numRows, int srcSlot, int[] recordIds)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			// check to make sure the destination page have the necessary space to
1:eac0369: 			// take the rows - count the bytes once for checking, then once for
1:eac0369: 			// real
1:eac0369: 
1:eac0369: 			// this one is for checking
1:eac0369: 			int[] spaceNeeded = new int[numRows];
1:eac0369: 			for (int i = 0; i < numRows; i++)
1:eac0369: 			{
1:eac0369: 				outBytes.reset();
1:eac0369: 				srcPage.logRecord(srcSlot + i, BasePage.LOG_RECORD_DEFAULT, 
1:eac0369: 								  recordIds[i],  (FormatableBitSet) null,
1:eac0369: 								  outBytes, (RecordHandle)null);
1:eac0369: 				spaceNeeded[i] = outBytes.getUsed();
1:eac0369: 
1:eac0369: 				// do not worry about reserve space since we cannot rollback
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (!destPage.spaceForCopy(numRows, spaceNeeded))
1:eac0369:             {
1:eac0369: 				throw StandardException.newException(
1:eac0369:                         SQLState.DATA_NO_SPACE_FOR_RECORD);
1:eac0369:             }
1:eac0369: 
1:eac0369: 			// this one is for real
1:eac0369: 			for (int i = 0; i < numRows; i++)
1:eac0369: 			{
1:eac0369: 				// the recordId passed in is the record Id this row will have at
1:eac0369: 				// the destination page, not the record Id this row has on the
1:eac0369: 				// srcPage.
1:eac0369: 				outBytes.reset();
1:eac0369: 				srcPage.logRecord(srcSlot + i, BasePage.LOG_RECORD_DEFAULT, 
1:eac0369: 								  recordIds[i],  (FormatableBitSet) null,
1:eac0369: 								  outBytes, (RecordHandle)null);
1:eac0369: 
1:eac0369: 				limitIn.setData(outBytes.getByteArray());
1:eac0369: 				limitIn.setPosition(outBytes.getBeginPosition());
1:eac0369: 				limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
1:eac0369: 
1:eac0369: 				destPage.storeRecord((LogInstant) null, destSlot+i, true, limitIn);
1:eac0369: 			}
1:eac0369: 		} catch (IOException ioe) {
1:eac0369: 
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionInvalidatePage(RawTransaction t, BasePage page)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		page.setPageStatus((LogInstant)null, BasePage.INVALID_PAGE);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionInitPage(RawTransaction t, BasePage page, int initFlag,
1:eac0369: 							   int pageFormatId, long pageOffset)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		boolean overflowPage = ((initFlag & BasePage.INIT_PAGE_OVERFLOW) != 0);
1:eac0369: 		boolean reuse = ((initFlag & BasePage.INIT_PAGE_REUSE) != 0);
1:eac0369: 
1:eac0369: 		int nextRecordId = ((initFlag & BasePage.INIT_PAGE_REUSE_RECORDID) == 0) ?
1:eac0369: 			page.newRecordId() : RecordHandle.FIRST_RECORD_ID;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(page.getTypeFormatId() == pageFormatId, 
1:eac0369: 				"Direct initPage somehow got the wrong page formatId"); 
1:eac0369: 
1:eac0369: 		page.initPage((LogInstant)null, BasePage.VALID_PAGE,
1:eac0369: 					  nextRecordId, overflowPage, reuse);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void actionShrinkReservedSpace(RawTransaction t, BasePage page, 
1:eac0369: 				int slot, int recordId, int newValue, int oldValue)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			page.setReservedSpace((LogInstant)null, slot, newValue);
1:eac0369: 		}
1:eac0369: 		catch (IOException ioe) 
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.DirectActions
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1: 
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: 
1: 
1: public class DirectActions implements PageActions  {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
1: 
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	protected DynamicByteArrayOutputStream outBytes;	
1: 	protected ArrayInputStream	limitIn;
1: 	
1: 	public DirectActions() {
1: 		outBytes = new DynamicByteArrayOutputStream();
1: 		limitIn = new ArrayInputStream();
1: 	}
1: 
1: 	public void actionDelete(
1:     RawTransaction  t, 
1:     BasePage        page, 
1:     int             slot, 
1:     int             recordId, 
1:     boolean         delete, 
1:     LogicalUndo     undo)
1: 		throws StandardException
1: 	{
1: 		try {
1: 
1: 			page.setDeleteStatus((LogInstant)null, slot, delete);
1: 
1: 		} catch (IOException ioe) {
1: 
1: 			throw StandardException.newException(
1:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1: 		}
1: 		
1: 	}
1: 
1: 	public int actionUpdate(
1:     RawTransaction          t, 
1:     BasePage                page, 
1:     int                     slot, 
1:     int                     recordId,
1:     Object[]   row, 
1:     FormatableBitSet                 validColumns,
1:     int                     realStartColumn, 
1:     DynamicByteArrayOutputStream  logBuffer, 
1:     int                     realSpaceOnPage, 
1:     RecordHandle            headRowHandle)
1: 		throws StandardException
1: 	{
1: 		if (logBuffer == null)
1: 			outBytes.reset();
1: 		else
1: 			outBytes = (DynamicByteArrayOutputStream) logBuffer;
1: 
1: 		try {
1: 
1: 			// manufactures the new row  into outBytes
1: 			int nextColumn = 
1:                 page.logRow(
1:                     slot, false, recordId, row, validColumns, outBytes, 0,
1:                     Page.INSERT_OVERFLOW, realStartColumn, 
1:                     realSpaceOnPage, 100);
1: 
1: 			limitIn.setData(outBytes.getByteArray());
1: 			limitIn.setPosition(outBytes.getBeginPosition());
1: 			limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
1: 
1: 			// copy the new row from outBytes into the page
1: 			page.storeRecord((LogInstant) null, slot, false, limitIn);
1: 
1: 			return nextColumn;
1: 
1: 		} catch (IOException ioe) {
1: 
1: 			throw StandardException.newException(
1:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1: 		}
1: 
1: 	}
1: 
1: 	public void actionPurge(RawTransaction t, BasePage page, int slot, int
1: 							num_rows, int[] recordIds, boolean needDataLogged)
1: 		throws StandardException
1: 	{
1: 		// purge the records in the stored version
1: 		// we need to remove from high to low because the slots will be moved down
1: 		// as soon as one is removed.
1: 
1: 		// we could get the slot with the recordId but that will be a waste
1: 		// since the page was never unlatch and the slot number is good
1: 
1: 		try {
1: 			for (int i = num_rows-1; i >= 0; i--)
1: 			{
1: 				page.purgeRecord((LogInstant) null, slot+i, recordIds[i]);
1: 			}
1: 		} catch (IOException ioe) {
1: 
1: 			throw StandardException.newException(
1:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1: 		}
1: 
1: 	}
1: 
1: 	public void actionUpdateField(
1:     RawTransaction          t, 
1:     BasePage                page, 
1:     int                     slot, 
1:     int                     recordId, 
1:     int                     fieldId, 
1:     Object     newValue, 
1:     LogicalUndo             undo)
1: 		throws StandardException
1: 	{
1: 		outBytes.reset();
1: 
1: 		try {
1: 
1: 			page.logColumn(slot, fieldId, newValue, (DynamicByteArrayOutputStream) outBytes, 100);
1: 
1: 			limitIn.setData(outBytes.getByteArray());
1: 			limitIn.setPosition(outBytes.getBeginPosition());
1: 			limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
1: 
1: 			page.storeField((LogInstant) null, slot, fieldId, limitIn);
1: 
1: 		} catch (IOException ioe) {
1: 
1: 			throw StandardException.newException(
1:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1: 		}
1: 
1: 	}
1: 
1: 	public int actionInsert(
1:     RawTransaction          t, 
1:     BasePage                page, 
1:     int                     slot, 
1:     int                     recordId,
1:     Object[]                row, 
1:     FormatableBitSet                 validColumns, 
1:     LogicalUndo             undo, 
1:     byte                    insertFlag, 
1:     int                     startColumn,
1:     boolean                 isLongColumn, 
1:     int                     realStartColumn, 
1:     DynamicByteArrayOutputStream  logBuffer, 
1:     int                     realSpaceOnPage,
1:     int                     overflowThreshold)
1: 		throws StandardException
1: 	{
1: 		if (logBuffer == null)
1: 			outBytes.reset();
1: 		else
1: 			outBytes = (DynamicByteArrayOutputStream) logBuffer;
1: 
1: 		try {
1: 			if (isLongColumn) {
1: 				startColumn = page.logLongColumn(slot, recordId,
1: 					row[0], (DynamicByteArrayOutputStream) outBytes);
1: 			} else {
1: 				startColumn = page.logRow(slot, true, recordId, row, validColumns,
1: 					(DynamicByteArrayOutputStream) outBytes, startColumn, insertFlag, realStartColumn, realSpaceOnPage,
1: 					overflowThreshold);
1: 			}
1: 	
1: 			limitIn.setData(outBytes.getByteArray());
1: 			limitIn.setPosition(outBytes.getBeginPosition());
1: 			limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
1: 
1: 			page.storeRecord((LogInstant) null, slot, true, limitIn);
1: 			return (startColumn);
1: 
1: 		} catch (IOException ioe) {
1: 
1: 			throw StandardException.newException(
1:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1: 		}
1: 
1: 	}
1: 
1: 	public void actionCopyRows(RawTransaction t, BasePage destPage, BasePage srcPage, int destSlot, int numRows, int srcSlot, int[] recordIds)
1: 		throws StandardException
1: 	{
1: 		try {
1: 
1: 			// check to make sure the destination page have the necessary space to
1: 			// take the rows - count the bytes once for checking, then once for
1: 			// real
1: 
1: 			// this one is for checking
1: 			int[] spaceNeeded = new int[numRows];
1: 			for (int i = 0; i < numRows; i++)
1: 			{
1: 				outBytes.reset();
1: 				srcPage.logRecord(srcSlot + i, BasePage.LOG_RECORD_DEFAULT, 
1: 								  recordIds[i],  (FormatableBitSet) null,
1: 								  outBytes, (RecordHandle)null);
1: 				spaceNeeded[i] = outBytes.getUsed();
1: 
1: 				// do not worry about reserve space since we cannot rollback
1: 			}
1: 
1: 			if (!destPage.spaceForCopy(numRows, spaceNeeded))
1:             {
1: 				throw StandardException.newException(
1:                         SQLState.DATA_NO_SPACE_FOR_RECORD);
1:             }
1: 
1: 			// this one is for real
1: 			for (int i = 0; i < numRows; i++)
1: 			{
1: 				// the recordId passed in is the record Id this row will have at
1: 				// the destination page, not the record Id this row has on the
1: 				// srcPage.
1: 				outBytes.reset();
1: 				srcPage.logRecord(srcSlot + i, BasePage.LOG_RECORD_DEFAULT, 
1: 								  recordIds[i],  (FormatableBitSet) null,
1: 								  outBytes, (RecordHandle)null);
1: 
1: 				limitIn.setData(outBytes.getByteArray());
1: 				limitIn.setPosition(outBytes.getBeginPosition());
1: 				limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
1: 
1: 				destPage.storeRecord((LogInstant) null, destSlot+i, true, limitIn);
1: 			}
1: 		} catch (IOException ioe) {
1: 
1: 			throw StandardException.newException(
1:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1: 		}
1: 
1: 	}
1: 
1: 	public void actionInvalidatePage(RawTransaction t, BasePage page)
1: 		 throws StandardException
1: 	{
1: 		page.setPageStatus((LogInstant)null, BasePage.INVALID_PAGE);
1: 	}
1: 
1: 	public void actionInitPage(RawTransaction t, BasePage page, int initFlag,
1: 							   int pageFormatId, long pageOffset)
1: 		 throws StandardException
1: 	{
1: 		boolean overflowPage = ((initFlag & BasePage.INIT_PAGE_OVERFLOW) != 0);
1: 		boolean reuse = ((initFlag & BasePage.INIT_PAGE_REUSE) != 0);
1: 
1: 		int nextRecordId = ((initFlag & BasePage.INIT_PAGE_REUSE_RECORDID) == 0) ?
1: 			page.newRecordId() : RecordHandle.FIRST_RECORD_ID;
1: 
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(page.getTypeFormatId() == pageFormatId, 
1: 				"Direct initPage somehow got the wrong page formatId"); 
1: 
1: 		page.initPage((LogInstant)null, BasePage.VALID_PAGE,
1: 					  nextRecordId, overflowPage, reuse);
1: 	}
1: 
1: 	public void actionShrinkReservedSpace(RawTransaction t, BasePage page, 
1: 				int slot, int recordId, int newValue, int oldValue)
1: 		 throws StandardException
1: 	{
1: 		try
1: 		{
1: 			page.setReservedSpace((LogInstant)null, slot, newValue);
1: 		}
1: 		catch (IOException ioe) 
1: 		{
1: 			throw StandardException.newException(
1:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1: 		}
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
0: 
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: 
0: import java.io.ByteArrayOutputStream;
0: import java.io.IOException;
0: 
0: 
0: public class DirectActions implements PageActions  {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0: 
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	protected DynamicByteArrayOutputStream outBytes;	
0: 	protected ArrayInputStream	limitIn;
0: 	
0: 	public DirectActions() {
0: 		outBytes = new DynamicByteArrayOutputStream();
0: 		limitIn = new ArrayInputStream();
0: 	}
0: 
0: 	public void actionDelete(
0:     RawTransaction  t, 
0:     BasePage        page, 
0:     int             slot, 
0:     int             recordId, 
0:     boolean         delete, 
0:     LogicalUndo     undo)
0: 		throws StandardException
0: 	{
0: 		try {
0: 
0: 			page.setDeleteStatus((LogInstant)null, slot, delete);
0: 
0: 		} catch (IOException ioe) {
0: 
0: 			throw StandardException.newException(
0:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
0: 		}
0: 		
0: 	}
0: 
0: 	public int actionUpdate(
0:     RawTransaction          t, 
0:     BasePage                page, 
0:     int                     slot, 
0:     int                     recordId,
0:     Object[]   row, 
0:     FormatableBitSet                 validColumns,
0:     int                     realStartColumn, 
0:     DynamicByteArrayOutputStream  logBuffer, 
0:     int                     realSpaceOnPage, 
0:     RecordHandle            headRowHandle)
0: 		throws StandardException
0: 	{
0: 		if (logBuffer == null)
0: 			outBytes.reset();
0: 		else
0: 			outBytes = (DynamicByteArrayOutputStream) logBuffer;
0: 
0: 		try {
0: 
0: 			// manufactures the new row  into outBytes
0: 			int nextColumn = 
0:                 page.logRow(
0:                     slot, false, recordId, row, validColumns, outBytes, 0,
0:                     Page.INSERT_OVERFLOW, realStartColumn, 
0:                     realSpaceOnPage, 100);
0: 
0: 			limitIn.setData(outBytes.getByteArray());
0: 			limitIn.setPosition(outBytes.getBeginPosition());
0: 			limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
0: 
0: 			// copy the new row from outBytes into the page
0: 			page.storeRecord((LogInstant) null, slot, false, limitIn);
0: 
0: 			return nextColumn;
0: 
0: 		} catch (IOException ioe) {
0: 
0: 			throw StandardException.newException(
0:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
0: 		}
0: 
0: 	}
0: 
0: 	public void actionPurge(RawTransaction t, BasePage page, int slot, int
0: 							num_rows, int[] recordIds, boolean needDataLogged)
0: 		throws StandardException
0: 	{
0: 		// purge the records in the stored version
0: 		// we need to remove from high to low because the slots will be moved down
0: 		// as soon as one is removed.
0: 
0: 		// we could get the slot with the recordId but that will be a waste
0: 		// since the page was never unlatch and the slot number is good
0: 
0: 		try {
0: 			for (int i = num_rows-1; i >= 0; i--)
0: 			{
0: 				page.purgeRecord((LogInstant) null, slot+i, recordIds[i]);
0: 			}
0: 		} catch (IOException ioe) {
0: 
0: 			throw StandardException.newException(
0:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
0: 		}
0: 
0: 	}
0: 
0: 	public void actionUpdateField(
0:     RawTransaction          t, 
0:     BasePage                page, 
0:     int                     slot, 
0:     int                     recordId, 
0:     int                     fieldId, 
0:     Object     newValue, 
0:     LogicalUndo             undo)
0: 		throws StandardException
0: 	{
0: 		outBytes.reset();
0: 
0: 		try {
0: 
0: 			page.logColumn(slot, fieldId, newValue, (DynamicByteArrayOutputStream) outBytes, 100);
0: 
0: 			limitIn.setData(outBytes.getByteArray());
0: 			limitIn.setPosition(outBytes.getBeginPosition());
0: 			limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
0: 
0: 			page.storeField((LogInstant) null, slot, fieldId, limitIn);
0: 
0: 		} catch (IOException ioe) {
0: 
0: 			throw StandardException.newException(
0:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
0: 		}
0: 
0: 	}
0: 
0: 	public int actionInsert(
0:     RawTransaction          t, 
0:     BasePage                page, 
0:     int                     slot, 
0:     int                     recordId,
0:     Object[]                row, 
0:     FormatableBitSet                 validColumns, 
0:     LogicalUndo             undo, 
0:     byte                    insertFlag, 
0:     int                     startColumn,
0:     boolean                 isLongColumn, 
0:     int                     realStartColumn, 
0:     DynamicByteArrayOutputStream  logBuffer, 
0:     int                     realSpaceOnPage,
0:     int                     overflowThreshold)
0: 		throws StandardException
0: 	{
0: 		if (logBuffer == null)
0: 			outBytes.reset();
0: 		else
0: 			outBytes = (DynamicByteArrayOutputStream) logBuffer;
0: 
0: 		try {
0: 			if (isLongColumn) {
0: 				startColumn = page.logLongColumn(slot, recordId,
0: 					row[0], (DynamicByteArrayOutputStream) outBytes);
0: 			} else {
0: 				startColumn = page.logRow(slot, true, recordId, row, validColumns,
0: 					(DynamicByteArrayOutputStream) outBytes, startColumn, insertFlag, realStartColumn, realSpaceOnPage,
0: 					overflowThreshold);
0: 			}
0: 	
0: 			limitIn.setData(outBytes.getByteArray());
0: 			limitIn.setPosition(outBytes.getBeginPosition());
0: 			limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
0: 
0: 			page.storeRecord((LogInstant) null, slot, true, limitIn);
0: 			return (startColumn);
0: 
0: 		} catch (IOException ioe) {
0: 
0: 			throw StandardException.newException(
0:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
0: 		}
0: 
0: 	}
0: 
0: 	public void actionCopyRows(RawTransaction t, BasePage destPage, BasePage srcPage, int destSlot, int numRows, int srcSlot, int[] recordIds)
0: 		throws StandardException
0: 	{
0: 		try {
0: 
0: 			// check to make sure the destination page have the necessary space to
0: 			// take the rows - count the bytes once for checking, then once for
0: 			// real
0: 
0: 			// this one is for checking
0: 			int[] spaceNeeded = new int[numRows];
0: 			for (int i = 0; i < numRows; i++)
0: 			{
0: 				outBytes.reset();
0: 				srcPage.logRecord(srcSlot + i, BasePage.LOG_RECORD_DEFAULT, 
0: 								  recordIds[i],  (FormatableBitSet) null,
0: 								  outBytes, (RecordHandle)null);
0: 				spaceNeeded[i] = outBytes.getUsed();
0: 
0: 				// do not worry about reserve space since we cannot rollback
0: 			}
0: 
0: 			if (!destPage.spaceForCopy(numRows, spaceNeeded))
0:             {
0: 				throw StandardException.newException(
0:                         SQLState.DATA_NO_SPACE_FOR_RECORD);
0:             }
0: 
0: 			// this one is for real
0: 			for (int i = 0; i < numRows; i++)
0: 			{
0: 				// the recordId passed in is the record Id this row will have at
0: 				// the destination page, not the record Id this row has on the
0: 				// srcPage.
0: 				outBytes.reset();
0: 				srcPage.logRecord(srcSlot + i, BasePage.LOG_RECORD_DEFAULT, 
0: 								  recordIds[i],  (FormatableBitSet) null,
0: 								  outBytes, (RecordHandle)null);
0: 
0: 				limitIn.setData(outBytes.getByteArray());
0: 				limitIn.setPosition(outBytes.getBeginPosition());
0: 				limitIn.setLimit(outBytes.getPosition() - outBytes.getBeginPosition());
0: 
0: 				destPage.storeRecord((LogInstant) null, destSlot+i, true, limitIn);
0: 			}
0: 		} catch (IOException ioe) {
0: 
0: 			throw StandardException.newException(
0:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
0: 		}
0: 
0: 	}
0: 
0: 	public void actionInvalidatePage(RawTransaction t, BasePage page)
0: 		 throws StandardException
0: 	{
0: 		page.setPageStatus((LogInstant)null, BasePage.INVALID_PAGE);
0: 	}
0: 
0: 	public void actionInitPage(RawTransaction t, BasePage page, int initFlag,
0: 							   int pageFormatId, long pageOffset)
0: 		 throws StandardException
0: 	{
0: 		boolean overflowPage = ((initFlag & BasePage.INIT_PAGE_OVERFLOW) != 0);
0: 		boolean reuse = ((initFlag & BasePage.INIT_PAGE_REUSE) != 0);
0: 
0: 		int nextRecordId = ((initFlag & BasePage.INIT_PAGE_REUSE_RECORDID) == 0) ?
0: 			page.newRecordId() : RecordHandle.FIRST_RECORD_ID;
0: 
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(page.getTypeFormatId() == pageFormatId, 
0: 				"Direct initPage somehow got the wrong page formatId"); 
0: 
0: 		page.initPage((LogInstant)null, BasePage.VALID_PAGE,
0: 					  nextRecordId, overflowPage, reuse);
0: 	}
0: 
0: 	public void actionShrinkReservedSpace(RawTransaction t, BasePage page, 
0: 				int slot, int recordId, int newValue, int oldValue)
0: 		 throws StandardException
0: 	{
0: 		try
0: 		{
0: 			page.setReservedSpace((LogInstant)null, slot, newValue);
0: 		}
0: 		catch (IOException ioe) 
0: 		{
0: 			throw StandardException.newException(
0:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
0: 		}
0: 	}
0: 
0: }
============================================================================