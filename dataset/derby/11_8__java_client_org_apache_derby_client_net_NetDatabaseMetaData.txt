1:33776ff: /*
1:bead0ab: 
1:33776ff:    Derby - Class org.apache.derby.client.net.NetDatabaseMetaData
1:bead0ab: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:bead0ab: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:506f4c8: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:506f4c8: 
1:bead0ab: */
1:33776ff: package org.apache.derby.client.net;
1:506f4c8: 
1:33776ff: import org.apache.derby.client.am.Configuration;
1:69e3d06: import org.apache.derby.client.am.ClientDatabaseMetaData;
1:33776ff: import org.apache.derby.client.am.ProductLevel;
1:33776ff: import org.apache.derby.client.am.SqlException;
1:cf5cebf: 
1:0326967: class NetDatabaseMetaData extends ClientDatabaseMetaData {
1:cf5cebf: 
1:0326967:     NetDatabaseMetaData(NetAgent netAgent, NetConnection netConnection) {
1:70f7692:         // Consider setting product level during parse
1:70f7692:         super(netAgent, netConnection, new ProductLevel(netConnection.productID_,
1:70f7692:                 netConnection.targetSrvclsnm_,
1:70f7692:                 netConnection.targetSrvrlslv_));
1:506f4c8:     }
1:cf5cebf: 
1:70f7692:     //---------------------------call-down methods--------------------------------
1:c6c4d4d: 
1:70f7692:     public String getURL_() throws SqlException {
1:70f7692:         String urlProtocol;
1:c6c4d4d: 
1:70f7692:         urlProtocol = Configuration.jdbcDerbyNETProtocol;
1:fefd864: 
1:70f7692:         return
1:70f7692:                 urlProtocol +
1:70f7692:                 connection_.serverNameIP_ +
1:70f7692:                 ":" +
1:70f7692:                 connection_.portNumber_ +
1:70f7692:                 "/" +
1:70f7692:                 connection_.databaseName_;
1:bead0ab:     }
1:fefd864: 
1:cf5cebf: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class NetDatabaseMetaData extends ClientDatabaseMetaData {
1:     NetDatabaseMetaData(NetAgent netAgent, NetConnection netConnection) {
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.ClientDatabaseMetaData;
0: public class NetDatabaseMetaData extends ClientDatabaseMetaData {
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.DatabaseMetaData;
0: public class NetDatabaseMetaData extends DatabaseMetaData {
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eff3919
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:bead0ab
/////////////////////////////////////////////////////////////////////////
0:     /** True if the server supports nanoseconds in timestamps */
0:     private boolean supportsTimestampNanoseconds_;
1:     
/////////////////////////////////////////////////////////////////////////
1: 
0:         supportsTimestampNanoseconds_ =
0:                 productLevel_.greaterThanOrEqualTo(10, 6, 0);
/////////////////////////////////////////////////////////////////////////
1: 
0:     /**
0:      * Check if server supports nanoseconds in timestamps
0:      * @return true if the server supports this
1:      */
0:     final boolean serverSupportsTimestampNanoseconds() {
0:         return supportsTimestampNanoseconds_;
1:     }
commit:506f4c8
/////////////////////////////////////////////////////////////////////////
0:     /** True if the server supports UDTs */
0:     private boolean supportsUDTs_;
1:     
/////////////////////////////////////////////////////////////////////////
1: 
0:         supportsUDTs_ =
0:                 productLevel_.greaterThanOrEqualTo(10, 6, 0);
/////////////////////////////////////////////////////////////////////////
1: 
0:     /**
0:      * Check if server supports UDTs
0:      * @return true if the server supports this
0:      */
0:     final boolean serverSupportsUDTs() {
0:         return supportsSessionDataCaching_;
1:     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:cf5cebf
/////////////////////////////////////////////////////////////////////////
1: 
0:     /**
0:      * True if the server supports aborting a statement whilst transferring
0:      * EXTDTA objects. Note that there are two types of aborts, depending on
0:      * whether an object is being transferred to the server using DDM layer B
0:      * streaming or not.
0:      */
0:     private boolean supportsEXTDTAAbort_;
/////////////////////////////////////////////////////////////////////////
1: 
0:         supportsEXTDTAAbort_ =
0:                 productLevel_.greaterThanOrEqualTo(10, 6, 0);
/////////////////////////////////////////////////////////////////////////
1: 
0:     /**
0:      * Check if server supports product specific EXTDTA abort protocol.
0:      * @return {@code true} if the server supports this.
0:      */
0:     final boolean serverSupportsEXTDTAAbort() {
0:         return supportsEXTDTAAbort_;
1:     }
commit:8d55491
/////////////////////////////////////////////////////////////////////////
0:         return supportsUDTs_;
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:c6c4d4d
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * True if the server supports session data caching
0:      */
0:     private boolean supportsSessionDataCaching_;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         supportsSessionDataCaching_ =
0:                 productLevel_.greaterThanOrEqualTo(10, 4, 0);
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * Check if server supports session data caching
0:      * @return true if the server supports this
0:      */
0:     final boolean serverSupportsSessionDataCaching() {
0:         return supportsSessionDataCaching_;
0:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:7e4dcd9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Tomohito Nakayama
-------------------------------------------------------------------------------
commit:fefd864
/////////////////////////////////////////////////////////////////////////
1:     
0:     private boolean supportsLayerBStreaming_;
/////////////////////////////////////////////////////////////////////////
1:         
0:         supportsLayerBStreaming_ = 
0:             productLevel_.greaterThanOrEqualTo(10, 3, 0);
/////////////////////////////////////////////////////////////////////////
0:     final boolean serverSupportsLayerBStreaming() {
0:         return supportsLayerBStreaming_;
0:     }
0: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:fdfc981
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f86608b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.reference.JDBC30Translation;
/////////////////////////////////////////////////////////////////////////
0:         connection_.resultSetHoldability_ = JDBC30Translation.HOLD_CURSORS_OVER_COMMIT;
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:5e88312
/////////////////////////////////////////////////////////////////////////
0:     /** True if the server supports QRYCLSIMP. */
0:     private boolean supportsQryclsimp_;
/////////////////////////////////////////////////////////////////////////
0:     //
0:     // WARNING WARNING WARNING !!!!
0:     //
0:     // If you define an instance variable of NetDatabaseMetaData that
0:     // you want computeFeatureSet_() to compute, DO NOT assign an
0:     // initial value to the variable in the
0:     // declaration. NetDatabaseMetaData's constructor will invoke
0:     // DatabaseMetaData's constructor, which then invokes
0:     // computeFeatureSet_(). Initialization of instance variables in
0:     // NetDatabaseMetaData will happen *after* the invocation of
0:     // computeFeatureSet_() and will therefore overwrite the computed
0:     // values. So, LEAVE INSTANCE VARIABLES UNINITIALIZED!
0:     //
0:     // END OF WARNING
0:         // Support for QRYCLSIMP was added in 10.2.0
0:         if (productLevel_.greaterThanOrEqualTo(10, 2, 0)) {
0:             supportsQryclsimp_ = true;
0:         } else {
0:             supportsQryclsimp_ = false;
0:         }
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * Check whether the server has full support for the QRYCLSIMP
0:      * parameter in OPNQRY.
0:      *
0:      * @return true if QRYCLSIMP is fully supported
0:      */
0:     final boolean serverSupportsQryclsimp() {
0:         return supportsQryclsimp_;
0:     }
0: 
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class NetDatabaseMetaData extends org.apache.derby.client.am.DatabaseMetaData {
0:     private final NetAgent netAgent_;
0:     public NetDatabaseMetaData(NetAgent netAgent, NetConnection netConnection) {
1:         // Consider setting product level during parse
1:         super(netAgent, netConnection, new ProductLevel(netConnection.productID_,
1:                 netConnection.targetSrvclsnm_,
1:                 netConnection.targetSrvrlslv_));
0:         // Set up cheat-links
0:         netAgent_ = netAgent;
0:     }
1:     //---------------------------call-down methods--------------------------------
1:     public String getURL_() throws SqlException {
1:         String urlProtocol;
1:         urlProtocol = Configuration.jdbcDerbyNETProtocol;
1:         return
1:                 urlProtocol +
1:                 connection_.serverNameIP_ +
1:                 ":" +
1:                 connection_.portNumber_ +
1:                 "/" +
1:                 connection_.databaseName_;
0:     }
0:     //-----------------------------helper methods---------------------------------
0:     // Set flags describing the level of support for this connection.
0:     // Flags will be set based on manager level and/or specific product identifiers.
0:     // Support for a specific server version can be set as follows. For example
0:     // if (productLevel_.greaterThanOrEqualTo(11,1,0))
0:     //  supportsTheBestThingEver = true
0:     protected void computeFeatureSet_() {
0:         if (connection_.resultSetHoldability_ == 0)  // property not set
0:         {
0:             setDefaultResultSetHoldability();
0:         }
0:     }
0:     public void setDefaultResultSetHoldability() {
0:         connection_.resultSetHoldability_ = org.apache.derby.jdbc.ClientDataSource.HOLD_CURSORS_OVER_COMMIT;
0:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
1:    Derby - Class org.apache.derby.client.net.NetDatabaseMetaData
0: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
1:       http://www.apache.org/licenses/LICENSE-2.0
0: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
0: 
0: */
1: package org.apache.derby.client.net;
0: 
1: import org.apache.derby.client.am.Configuration;
1: import org.apache.derby.client.am.ProductLevel;
1: import org.apache.derby.client.am.SqlException;
0: 
0: 
0: public class NetDatabaseMetaData extends org.apache.derby.client.am.DatabaseMetaData
0: {
0: 
0:   private final NetAgent netAgent_;
0: 
0: 
0:   public NetDatabaseMetaData (NetAgent netAgent, NetConnection netConnection)
0:   {
0:     // Consider setting product level during parse
0:     super (netAgent, netConnection, new ProductLevel (netConnection.productID_,
0:                           netConnection.targetSrvclsnm_,
0:                           netConnection.targetSrvrlslv_));
0:     // Set up cheat-links
0:     netAgent_ = netAgent;
0:   }
0: 
0:   //---------------------------call-down methods--------------------------------
0: 
0:   public String getURL_ () throws SqlException
0:   {
0:     String urlProtocol;
0: 
0:       urlProtocol = Configuration.jdbcDerbyNETProtocol;
0: 
0:     return
0:       urlProtocol +
0:       connection_.serverNameIP_+
0:       ":" +
0:       connection_.portNumber_ +
0:       "/" +
0:       connection_.databaseName_;
0:   }
0: 
0:   //-----------------------------helper methods---------------------------------
0: 
0:   // Set flags describing the level of support for this connection.
0:   // Flags will be set based on manager level and/or specific product identifiers.
0:   // Support for a specific server version can be set as follows. For example
0:   // if (productLevel_.greaterThanOrEqualTo(11,1,0))
0:   //  supportsTheBestThingEver = true
0:   protected void computeFeatureSet_ ()
0:   {
0:     if (connection_.resultSetHoldability_ == 0)  // property not set
0:       setDefaultResultSetHoldability ();
0: 
0:   }
0: 
0: 
0:   public void setDefaultResultSetHoldability ()
0:   {
0: 	  connection_.resultSetHoldability_ = org.apache.derby.jdbc.ClientDataSource.HOLD_CURSORS_OVER_COMMIT;
0:   }
0: 
0: }
============================================================================