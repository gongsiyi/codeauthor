2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
19:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:4309044: import org.apache.derby.iapi.types.SQLBoolean;
1:eb47bdb: import org.apache.derby.iapi.types.SQLVarchar;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:4309044: import org.apache.derby.iapi.types.UserType;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:eac0369: import org.apache.derby.catalog.TypeDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueFactory;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: import org.apache.derby.iapi.types.*;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import java.sql.Timestamp;
1:7dd08d1: import java.sql.Types;
1:eac0369: import java.util.Properties;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * Factory for creating a SYSSTATEMENTS row.
3:eac0369:  *
1:eac0369:  *
1:eac0369:  * @version 0.1
1:eac0369:  */
1:eac0369: 
1:eac0369: public class SYSSTATEMENTSRowFactory extends CatalogRowFactory
5:eac0369: {
1:eac0369: 	static	final	String	TABLENAME_STRING = "SYSSTATEMENTS";
1:eac0369: 
1:eac0369: 	/* Column #s for sysinfo (1 based) */
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_STMTID = 1;
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_STMTNAME = 2;
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_SCHEMAID = 3;
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_TYPE = 4;
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_VALID = 5;
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_TEXT = 6;
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_LASTCOMPILED = 7;
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_COMPILATION_SCHEMAID = 8;
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_USINGTEXT = 9;
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_CONSTANTSTATE = 10;
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_INITIALLY_COMPILABLE = 11;
1:eac0369: 
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_COLUMN_COUNT = SYSSTATEMENTS_INITIALLY_COMPILABLE;
1:eac0369: 
1:eac0369: 	public	static	final	int		SYSSTATEMENTS_HIDDEN_COLUMN_COUNT = 2;
1:eac0369: 
1:eac0369: 	protected static final int		SYSSTATEMENTS_INDEX1_ID = 0;
1:eac0369: 	protected static final int		SYSSTATEMENTS_INDEX2_ID = 1;
1:eac0369: 
1:eac0369: 
1:eac0369: 	private static final int[][] indexColumnPositions = 
1:eac0369: 	{
1:eac0369: 		{SYSSTATEMENTS_STMTID},
1:eac0369: 		{SYSSTATEMENTS_STMTNAME, SYSSTATEMENTS_SCHEMAID}
2:eac0369: 	};
1:eac0369: 
1:eac0369: 	private	static	final	boolean[]	uniqueness = null;
1:eac0369: 
1:eac0369: 	private	static	final	String[]	uuids =
1:eac0369: 	{
1:eac0369: 		 "80000000-00d1-15f7-ab70-000a0a0b1500"	// catalog UUID
1:eac0369: 		,"80000000-00d1-15fc-60b9-000a0a0b1500"	// heap UUID
1:eac0369: 		,"80000000-00d1-15fc-eda1-000a0a0b1500"	// SYSSTATEMENTS_INDEX1
1:eac0369: 		,"80000000-00d1-15fe-bdf8-000a0a0b1500"	// SYSSTATEMENTS_INDEX2
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:6870e87:     SYSSTATEMENTSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1:eac0369: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:eac0369: 		initInfo(SYSSTATEMENTS_COLUMN_COUNT, TABLENAME_STRING, 
1:c2ff613: 				 indexColumnPositions, uniqueness, uuids);
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	METHODS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make a SYSSTATEMENTS row. 
1:eac0369: 	 * <p>
1:eac0369: 	 * <B>WARNING</B>: When empty row is true, this method takes
1:eac0369: 	 * a snapshot of the SPSD and creates a row.  It is imperative
1:eac0369: 	 * that that row remain consistent with the descriptor (the
1:eac0369: 	 * valid and StorablePreparedStatement fields must be in sync).
1:eac0369: 	 * If this row is to be written out and valid is true, then
1:eac0369: 	 * this call and the insert should be synchronized on the
1:eac0369: 	 * SPSD. This method has <B>NO</B> synchronization.
1:eac0369: 	 * 
1:eac0369: 	 * @param compileMe			passed into SPSDescriptorImpl.getPreparedStatement().
1:eac0369: 	 *							if true, we (re)compile the stmt
1:eac0369: 	 * @param spsDescriptor		In-memory tuple to be converted to a disk row.
1:eac0369: 	 *
1:eac0369: 	 * @return	Row suitable for inserting into SYSSTATEMENTS.
1:eac0369: 	 *
2:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public ExecRow makeSYSSTATEMENTSrow(
1:eac0369: 		boolean				compileMe,
1:eac0369: 		SPSDescriptor		spsDescriptor
1:eac0369: 	) throws StandardException
1:eac0369: 	{
1:eac0369: 		DataTypeDescriptor		dtd;
1:eac0369: 		ExecRow    				row;
1:eac0369: 		DataValueDescriptor		col;
1:eac0369: 		String					name = null;
1:eac0369: 		UUID					uuid = null;
1:eac0369: 		String					uuidStr = null;	
1:eac0369: 		String					suuidStr = null;	// schema	
1:eac0369: 		String					compUuidStr = null;	// compilation schema	
1:eac0369: 		String					text = null;
1:eac0369: 		String					usingText = null;
1:eac0369: 		ExecPreparedStatement	preparedStatement = null;
1:eac0369: 		String					typeStr = null;
1:eac0369: 		boolean					valid = true;
1:eac0369: 		Timestamp				time = null;
1:eac0369: 		boolean					initiallyCompilable = true;
1:eac0369: 
1:eac0369: 		if (spsDescriptor != null)
1:eac0369: 		{
1:eac0369: 			name = spsDescriptor.getName();
1:eac0369: 			uuid = spsDescriptor.getUUID();
1:eac0369: 			suuidStr = spsDescriptor.getSchemaDescriptor().getUUID().toString();
1:eac0369: 			uuidStr = uuid.toString();
1:eac0369: 			text = spsDescriptor.getText();			
1:eac0369: 			valid = spsDescriptor.isValid();
1:eac0369: 			time = spsDescriptor.getCompileTime();
1:eac0369: 			typeStr = spsDescriptor.getTypeAsString();
1:eac0369: 			initiallyCompilable = spsDescriptor.initiallyCompilable();
1:eac0369: 			preparedStatement = spsDescriptor.getPreparedStatement(compileMe);
1:16c8b88: 			compUuidStr = (spsDescriptor.getCompSchemaId() != null)?
1:16c8b88: 					spsDescriptor.getCompSchemaId().toString():null;
1:eac0369: 			usingText = spsDescriptor.getUsingText();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Build the row to insert */
1:eac0369: 		row = getExecutionFactory().getValueRow(SYSSTATEMENTS_COLUMN_COUNT);
1:eac0369: 
1:eac0369: 		/* 1st column is STMTID */
1:eb47bdb: 		row.setColumn(1, new SQLChar(uuidStr));
1:eac0369: 
1:eac0369: 		/* 2nd column is STMTNAME */
1:eb47bdb: 		row.setColumn(2, new SQLVarchar(name));
1:eac0369: 
1:eac0369: 		/* 3rd column is SCHEMAID */
1:eb47bdb: 		row.setColumn(3, new SQLChar(suuidStr));
1:eac0369: 
1:eac0369: 		/* 4th column is TYPE */
1:eb47bdb: 		row.setColumn(4, new SQLChar(typeStr));
1:eac0369: 
1:eac0369: 		/* 5th column is VALID */
1:4309044: 		row.setColumn(5, new SQLBoolean(valid));
1:eac0369: 
1:eac0369: 		/* 6th column is TEXT */
1:eac0369: 		row.setColumn(6, dvf.getLongvarcharDataValue(text));
1:eac0369: 
1:eac0369: 		/* 7th column is LASTCOMPILED */
1:eac0369: 		row.setColumn(7, new SQLTimestamp(time));
1:eac0369: 
1:eac0369: 		/* 8th column is COMPILATIONSCHEMAID */
1:eb47bdb: 		row.setColumn(8, new SQLChar(compUuidStr));
1:eac0369: 
1:eac0369: 		/* 9th column is USINGTEXT */
1:eac0369: 		row.setColumn(9, dvf.getLongvarcharDataValue(usingText));
1:eac0369: 
1:eac0369: 		/* 
1:eac0369: 		** 10th column is CONSTANTSTATE
1:eac0369: 		**
1:eac0369: 		** CONSTANTSTATE is really a formatable StorablePreparedStatement.
1:eac0369: 		*/
1:4309044: 		row.setColumn(10, new UserType(preparedStatement));
1:eac0369: 
1:eac0369: 		/* 11th column is INITIALLY_COMPILABLE */
1:4309044: 		row.setColumn(11, new SQLBoolean(initiallyCompilable));
1:eac0369: 
1:eac0369: 		return row;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make an  Tuple Descriptor out of a SYSSTATEMENTS row
1:eac0369: 	 *
1:eac0369: 	 * @param row 					a SYSSTATEMENTS row
1:eac0369: 	 * @param parentTupleDescriptor	unused
1:eac0369: 	 * @param dd 					dataDictionary
1:eac0369: 	 *
1:eac0369: 	 * @return	a  descriptor equivalent to a SYSSTATEMENTS row
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public TupleDescriptor buildDescriptor(
1:eac0369: 		ExecRow					row,
1:eac0369: 		TupleDescriptor			parentTupleDescriptor,
1:eac0369: 		DataDictionary 			dd )
2:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor			col;
1:eac0369: 		SPSDescriptor				descriptor;
1:eac0369: 		String						name;
1:eac0369: 		String						text;
1:eac0369: 		String						usingText;
1:eac0369: 		UUID						uuid;
1:16c8b88: 		UUID						compUuid = null;
1:eac0369: 		String						uuidStr;
1:eac0369: 		UUID						suuid;		// schema
1:eac0369: 		String						suuidStr;	// schema
1:eac0369: 		String						typeStr;
1:eac0369: 		char						type;
1:eac0369: 		boolean						valid;
1:eac0369: 		Timestamp					time = null;
1:eac0369: 		ExecPreparedStatement		preparedStatement = null;
1:eac0369: 		boolean						initiallyCompilable;
1:eac0369: 		DataDescriptorGenerator		ddg = dd.getDataDescriptorGenerator();
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(row.nColumns() == SYSSTATEMENTS_COLUMN_COUNT, 
1:eac0369: 								 "Wrong number of columns for a SYSSTATEMENTS row");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// 1st column is STMTID (UUID - char(36))
1:eac0369: 		col = row.getColumn(1);
1:eac0369: 		uuidStr = col.getString();
1:eac0369: 		uuid = getUUIDFactory().recreateUUID(uuidStr);
1:eac0369: 
1:eac0369: 		// 2nd column is STMTNAME (varchar(128))
1:eac0369: 		col = row.getColumn(2);
1:eac0369: 		name = col.getString();
1:eac0369: 
1:eac0369: 		// 3rd column is SCHEMAID (UUID - char(36))
1:eac0369: 		col = row.getColumn(3);
1:eac0369: 		suuidStr = col.getString();
1:eac0369: 		suuid = getUUIDFactory().recreateUUID(suuidStr);
1:eac0369: 
1:eac0369: 		// 4th column is TYPE (char(1))
1:eac0369: 		col = row.getColumn(4);
1:eac0369: 		type = col.getString().charAt(0);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (!SPSDescriptor.validType(type))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("Bad type value ("+type+") for  statement "+name);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// In soft upgrade mode the plan may not be understand by this engine
1:eac0369: 		// so force a recompile.
1:1ea68f8: 		if (dd.isReadOnlyUpgrade()) {
1:eac0369: 			valid = false;
1:eac0369: 		} else {
1:eac0369: 			// 5th column is VALID (boolean)
1:eac0369: 			col = row.getColumn(5);
1:eac0369: 			valid = col.getBoolean();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// 6th column is TEXT (LONG VARCHAR)
1:eac0369: 		col = row.getColumn(6);
1:eac0369: 		text = col.getString();
1:eac0369: 
1:eac0369: 		/* 7th column is LASTCOMPILED (TIMESTAMP) */
1:eac0369: 		col = row.getColumn(7);
1:eac0369: 		time = col.getTimestamp(new java.util.GregorianCalendar());
1:eac0369: 
1:eac0369: 		// 8th column is COMPILATIONSCHEMAID (UUID - char(36))
1:eac0369: 		col = row.getColumn(8);
1:eac0369: 		uuidStr = col.getString();
1:16c8b88: 		if (uuidStr != null)
1:16c8b88: 			compUuid = getUUIDFactory().recreateUUID(uuidStr);
1:eac0369: 
1:eac0369: 		// 9th column is TEXT (LONG VARCHAR)
1:eac0369: 		col = row.getColumn(9);
1:eac0369: 		usingText = col.getString();
1:eac0369: 
1:eac0369: 		// 10th column is CONSTANTSTATE (COM...ExecPreparedStatement)
1:eac0369: 
1:eac0369: 		// Only load the compiled plan if the statement is valid
1:eac0369: 		if (valid) {
1:eac0369: 			col = row.getColumn(10);
1:eac0369: 			preparedStatement = (ExecPreparedStatement) col.getObject();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// 11th column is INITIALLY_COMPILABLE (boolean)
1:eac0369: 		col = row.getColumn(11);
1:eac0369: 		if ( col.isNull() ) { initiallyCompilable = true; }
1:eac0369: 		else { initiallyCompilable = col.getBoolean(); }
1:eac0369: 
1:eac0369: 		descriptor = new SPSDescriptor(dd, name, 
1:eac0369: 									uuid, 
1:eac0369: 									suuid,
1:eac0369: 									compUuid,
1:eac0369: 									type, 
1:eac0369: 									valid,
1:eac0369: 									text,
1:eac0369: 									usingText,
1:eac0369: 									time,
1:eac0369: 									preparedStatement,
1:eac0369: 									initiallyCompilable
10:eac0369: 									);
1:eac0369: 
1:eac0369: 		return descriptor;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public ExecRow makeEmptyRow()
1:eac0369: 		throws StandardException
1:eac0369:  	{
1:eac0369:  		return makeSYSSTATEMENTSrow(false,
1:eac0369:  							   		(SPSDescriptor) null);
1:eac0369:  	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Builds a list of columns suitable for creating this Catalog.
1:eac0369: 	 * The last column, the serialized statement, is not added
1:eac0369: 	 * to the column list.  This is done deliberately to make it
1:eac0369: 	 * a 'hidden' column -- one that is not visible to customers,
1:eac0369: 	 * but is visible to the system.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return array of SystemColumn suitable for making this catalog.
1:eac0369: 	 */
1:eac0369: 	public SystemColumn[] buildColumnList()
1:2a5922a:         throws StandardException
1:eac0369: 	{
1:7dd08d1:             return new SystemColumn[] {
1:7dd08d1:                 SystemColumnImpl.getUUIDColumn("STMTID", false),
1:7dd08d1:                 SystemColumnImpl.getIdentifierColumn("STMTNAME", false),
1:7dd08d1:                 SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:7dd08d1:                 SystemColumnImpl.getIndicatorColumn("TYPE"),
1:7dd08d1:                 SystemColumnImpl.getColumn("VALID", Types.BOOLEAN, false),
1:7dd08d1:                 SystemColumnImpl.getColumn("TEXT", Types.LONGVARCHAR, false,
1:7dd08d1:                         TypeId.LONGVARCHAR_MAXWIDTH),
1:7dd08d1:                 SystemColumnImpl.getColumn("LASTCOMPILED", Types.TIMESTAMP, true),
1:dc38336:                 SystemColumnImpl.getUUIDColumn("COMPILATIONSCHEMAID", true),
1:dc38336:                 SystemColumnImpl.getColumn("USINGTEXT", Types.LONGVARCHAR, true,
1:7dd08d1:                         TypeId.LONGVARCHAR_MAXWIDTH),         
1:7dd08d1:             };
1:eac0369: 		/*
1:eac0369: 		** This column is deliberately left out.  It
1:eac0369: 	 	** is effectively 'hidden' from users.  The code
1:eac0369: 	 	** to create it is left here to demonstrate what
1:eac0369: 		** it really looks like.
1:eac0369: 		*/
1:eac0369: 		//columnList[9] = 
1:eac0369: 		//			new SystemColumnImpl(		
1:eac0369: 		//					convertIdCase( "CONSTANTSTATE"),			// name 
1:eac0369: 		//					SYSSTATEMENTS_CONSTANTSTATE,// column number
1:eac0369: 		//					0,							// precision
1:eac0369: 		//					0,							// scale
1:eac0369: 		//					false,						// nullability
1:eac0369: 		//					ExecPreparedStatement.CLASS_NAME,	//datatype
1:eac0369: 		//					false,						// built-in type
1:eac0369: 		//					DataTypeDescriptor.MAXIMUM_WIDTH_UNKNOWN	// maxLength
1:eac0369: 		//	                );
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** This column is also deliberately left out.  It
1:eac0369: 	 	** is effectively 'hidden' from users.  The code
1:eac0369: 	 	** to create it is left here to demonstrate what
1:eac0369: 		** it really looks like.
1:eac0369: 		*/
1:eac0369: 		//columnList[10] = 
1:eac0369: 		//			new SystemColumnImpl(		
1:eac0369: 		//					convertIdCase( "INITIALLY_COMPILABLE"),			// name 
1:eac0369: 		//					SYSSTATEMENTS_INITIALLY_COMPILABLE,// column number
1:eac0369: 		//					0,					// precision
1:eac0369: 		//					0,					// scale
1:eac0369: 		//					true,				// nullability
1:eac0369: 		//					"BOOLEAN",			// dataType
1:eac0369: 		//					true,				// built-in type
1:eac0369: 		//					1					// maxLength
1:eac0369: 		//	                );
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the Properties associated with creating the heap.
1:eac0369: 	 *
1:eac0369: 	 * @return The Properties associated with creating the heap.
1:eac0369: 	 */
1:eac0369: 	public Properties getCreateHeapProperties()
1:eac0369: 	{
1:eac0369: 		Properties properties = new Properties();
1:eac0369: 
1:eac0369: 		// keep page size at 2K since most stmts are that size
1:eac0369: 		// anyway
1:eac0369: 		properties.put(Property.PAGE_SIZE_PARAMETER,"2048");
1:eac0369: 
1:eac0369: 		// default properties for system tables:
1:eac0369: 		properties.put(RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER,"0");
1:eac0369: 		properties.put(RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER,"1");
1:eac0369: 		return properties;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:4309044
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLBoolean;
1: import org.apache.derby.iapi.types.UserType;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(5, new SQLBoolean(valid));
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(10, new UserType(preparedStatement));
1: 		row.setColumn(11, new SQLBoolean(initiallyCompilable));
commit:16c8b88
/////////////////////////////////////////////////////////////////////////
1: 			compUuidStr = (spsDescriptor.getCompSchemaId() != null)?
1: 					spsDescriptor.getCompSchemaId().toString():null;
/////////////////////////////////////////////////////////////////////////
1: 		UUID						compUuid = null;
/////////////////////////////////////////////////////////////////////////
1: 		if (uuidStr != null)
1: 			compUuid = getUUIDFactory().recreateUUID(uuidStr);
/////////////////////////////////////////////////////////////////////////
0: 							true,				// nullability
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1ea68f8
/////////////////////////////////////////////////////////////////////////
1: 		if (dd.isReadOnlyUpgrade()) {
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6efed4e
/////////////////////////////////////////////////////////////////////////
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1:     SYSSTATEMENTSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:dc38336
/////////////////////////////////////////////////////////////////////////
1:                 SystemColumnImpl.getUUIDColumn("COMPILATIONSCHEMAID", true),
1:                 SystemColumnImpl.getColumn("USINGTEXT", Types.LONGVARCHAR, true,
commit:7dd08d1
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
1:             return new SystemColumn[] {
1:                 SystemColumnImpl.getUUIDColumn("STMTID", false),
1:                 SystemColumnImpl.getIdentifierColumn("STMTNAME", false),
1:                 SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:                 SystemColumnImpl.getIndicatorColumn("TYPE"),
1:                 SystemColumnImpl.getColumn("VALID", Types.BOOLEAN, false),
1:                 SystemColumnImpl.getColumn("TEXT", Types.LONGVARCHAR, false,
1:                         TypeId.LONGVARCHAR_MAXWIDTH),
1:                 SystemColumnImpl.getColumn("LASTCOMPILED", Types.TIMESTAMP, true),
0:                 SystemColumnImpl.getUUIDColumn("COMPILATIONSCHEMAID", false),
0:                 SystemColumnImpl.getColumn("USINGTEXT", Types.LONGVARCHAR, false,
1:                         TypeId.LONGVARCHAR_MAXWIDTH),         
1:             };
/////////////////////////////////////////////////////////////////////////
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLVarchar;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(1, new SQLChar(uuidStr));
1: 		row.setColumn(2, new SQLVarchar(name));
1: 		row.setColumn(3, new SQLChar(suuidStr));
1: 		row.setColumn(4, new SQLChar(typeStr));
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(8, new SQLChar(compUuidStr));
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				 indexColumnPositions, uniqueness, uuids);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.iapi.reference.Property;
1: 
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1: 
1: import org.apache.derby.iapi.types.TypeId;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.catalog.TypeDescriptor;
1: 
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.iapi.types.*;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.sql.Timestamp;
1: import java.util.Properties;
1: 
1: /**
1:  * Factory for creating a SYSSTATEMENTS row.
1:  *
1:  *
1:  * @version 0.1
0:  * @author Jamie
1:  */
1: 
1: public class SYSSTATEMENTSRowFactory extends CatalogRowFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	static	final	String	TABLENAME_STRING = "SYSSTATEMENTS";
1: 
1: 	/* Column #s for sysinfo (1 based) */
1: 	public	static	final	int		SYSSTATEMENTS_STMTID = 1;
1: 	public	static	final	int		SYSSTATEMENTS_STMTNAME = 2;
1: 	public	static	final	int		SYSSTATEMENTS_SCHEMAID = 3;
1: 	public	static	final	int		SYSSTATEMENTS_TYPE = 4;
1: 	public	static	final	int		SYSSTATEMENTS_VALID = 5;
1: 	public	static	final	int		SYSSTATEMENTS_TEXT = 6;
1: 	public	static	final	int		SYSSTATEMENTS_LASTCOMPILED = 7;
1: 	public	static	final	int		SYSSTATEMENTS_COMPILATION_SCHEMAID = 8;
1: 	public	static	final	int		SYSSTATEMENTS_USINGTEXT = 9;
1: 	public	static	final	int		SYSSTATEMENTS_CONSTANTSTATE = 10;
1: 	public	static	final	int		SYSSTATEMENTS_INITIALLY_COMPILABLE = 11;
1: 
1: 	public	static	final	int		SYSSTATEMENTS_COLUMN_COUNT = SYSSTATEMENTS_INITIALLY_COMPILABLE;
1: 
1: 	public	static	final	int		SYSSTATEMENTS_HIDDEN_COLUMN_COUNT = 2;
1: 
1: 	protected static final int		SYSSTATEMENTS_INDEX1_ID = 0;
1: 	protected static final int		SYSSTATEMENTS_INDEX2_ID = 1;
1: 
1: 
1: 	private static final int[][] indexColumnPositions = 
1: 	{
1: 		{SYSSTATEMENTS_STMTID},
1: 		{SYSSTATEMENTS_STMTNAME, SYSSTATEMENTS_SCHEMAID}
1: 	};
1: 
0: 	private static final String[][] indexColumnNames =
1: 	{
0: 		{"STATEMENTID"},
0: 		{"STMTNAME", "SCHEMAID"}
1: 	};
1: 
1: 	private	static	final	boolean[]	uniqueness = null;
1: 
1: 	private	static	final	String[]	uuids =
1: 	{
1: 		 "80000000-00d1-15f7-ab70-000a0a0b1500"	// catalog UUID
1: 		,"80000000-00d1-15fc-60b9-000a0a0b1500"	// heap UUID
1: 		,"80000000-00d1-15fc-eda1-000a0a0b1500"	// SYSSTATEMENTS_INDEX1
1: 		,"80000000-00d1-15fe-bdf8-000a0a0b1500"	// SYSSTATEMENTS_INDEX2
1: 	};
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
0:     public	SYSSTATEMENTSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
1: 		initInfo(SYSSTATEMENTS_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames, uniqueness, uuids);
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	METHODS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make a SYSSTATEMENTS row. 
1: 	 * <p>
1: 	 * <B>WARNING</B>: When empty row is true, this method takes
1: 	 * a snapshot of the SPSD and creates a row.  It is imperative
1: 	 * that that row remain consistent with the descriptor (the
1: 	 * valid and StorablePreparedStatement fields must be in sync).
1: 	 * If this row is to be written out and valid is true, then
1: 	 * this call and the insert should be synchronized on the
1: 	 * SPSD. This method has <B>NO</B> synchronization.
1: 	 * 
1: 	 * @param compileMe			passed into SPSDescriptorImpl.getPreparedStatement().
1: 	 *							if true, we (re)compile the stmt
0: 	 * @param emptyRow			Make an empty row if this parameter is true
1: 	 * @param spsDescriptor		In-memory tuple to be converted to a disk row.
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSSTATEMENTS.
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 
1: 	public ExecRow makeSYSSTATEMENTSrow(
1: 		boolean				compileMe,
1: 		SPSDescriptor		spsDescriptor
1: 	) throws StandardException
1: 	{
1: 		DataTypeDescriptor		dtd;
1: 		ExecRow    				row;
1: 		DataValueDescriptor		col;
1: 		String					name = null;
1: 		UUID					uuid = null;
1: 		String					uuidStr = null;	
1: 		String					suuidStr = null;	// schema	
1: 		String					compUuidStr = null;	// compilation schema	
1: 		String					text = null;
1: 		String					usingText = null;
1: 		ExecPreparedStatement	preparedStatement = null;
1: 		String					typeStr = null;
1: 		boolean					valid = true;
1: 		Timestamp				time = null;
1: 		boolean					initiallyCompilable = true;
1: 
1: 		if (spsDescriptor != null)
1: 		{
1: 			name = spsDescriptor.getName();
1: 			uuid = spsDescriptor.getUUID();
0: 			if ( uuid == null )
1: 		    {
0: 				uuid = getUUIDFactory().createUUID();
0: 				spsDescriptor.setUUID(uuid);
1: 			}
1: 			suuidStr = spsDescriptor.getSchemaDescriptor().getUUID().toString();
1: 			uuidStr = uuid.toString();
1: 			text = spsDescriptor.getText();			
1: 			valid = spsDescriptor.isValid();
1: 			time = spsDescriptor.getCompileTime();
1: 			typeStr = spsDescriptor.getTypeAsString();
1: 			initiallyCompilable = spsDescriptor.initiallyCompilable();
1: 			preparedStatement = spsDescriptor.getPreparedStatement(compileMe);
0: 			compUuidStr = spsDescriptor.getCompSchemaId().toString();
1: 			usingText = spsDescriptor.getUsingText();
1: 		}
1: 
1: 		/* Build the row to insert */
1: 		row = getExecutionFactory().getValueRow(SYSSTATEMENTS_COLUMN_COUNT);
1: 
1: 		/* 1st column is STMTID */
0: 		row.setColumn(1, dvf.getCharDataValue(uuidStr));
1: 
1: 		/* 2nd column is STMTNAME */
0: 		row.setColumn(2, dvf.getVarcharDataValue(name));
1: 
1: 		/* 3rd column is SCHEMAID */
0: 		row.setColumn(3, dvf.getCharDataValue(suuidStr));
1: 
1: 		/* 4th column is TYPE */
0: 		row.setColumn(4, dvf.getCharDataValue(typeStr));
1: 
1: 		/* 5th column is VALID */
0: 		row.setColumn(5, dvf.getDataValue(valid));
1: 
1: 		/* 6th column is TEXT */
1: 		row.setColumn(6, dvf.getLongvarcharDataValue(text));
1: 
1: 		/* 7th column is LASTCOMPILED */
1: 		row.setColumn(7, new SQLTimestamp(time));
1: 
1: 		/* 8th column is COMPILATIONSCHEMAID */
0: 		row.setColumn(8, dvf.getCharDataValue(compUuidStr));
1: 
1: 		/* 9th column is USINGTEXT */
1: 		row.setColumn(9, dvf.getLongvarcharDataValue(usingText));
1: 
1: 		/* 
1: 		** 10th column is CONSTANTSTATE
1: 		**
1: 		** CONSTANTSTATE is really a formatable StorablePreparedStatement.
1: 		*/
0: 		row.setColumn(10, dvf.getDataValue(preparedStatement));
1: 
1: 		/* 11th column is INITIALLY_COMPILABLE */
0: 		row.setColumn(11, dvf.getDataValue(initiallyCompilable));
1: 
1: 		return row;
1: 	}
1: 
1: 	/**
0: 	 * Builds an empty index row.
1: 	 *
0: 	 * @param	indexNumber	Index to build empty row for.
0: 	 * @param  rowLocation	Row location for last column of index row
1: 	 *
0: 	 * @return corresponding empty index row
1: 	 * @exception   StandardException thrown on failure
1: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
1: 			throws StandardException
1: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
1: 
0: 		row.setColumn(ncols + 1, rowLocation);
1: 
0: 		switch( indexNumber )
1: 		{
0: 		    case SYSSTATEMENTS_INDEX1_ID:
0: 				/* 1st column is STMTID (UUID - char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 				break;
1: 
0: 		    case SYSSTATEMENTS_INDEX2_ID:
0: 				/* 1st column is STMTNAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
0: 				break;
0: 		}	// end switch
1: 
0: 		return	row;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make an  Tuple Descriptor out of a SYSSTATEMENTS row
1: 	 *
1: 	 * @param row 					a SYSSTATEMENTS row
1: 	 * @param parentTupleDescriptor	unused
1: 	 * @param dd 					dataDictionary
1: 	 *
1: 	 * @return	a  descriptor equivalent to a SYSSTATEMENTS row
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public TupleDescriptor buildDescriptor(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd )
1: 					throws StandardException
1: 	{
1: 		DataValueDescriptor			col;
1: 		SPSDescriptor				descriptor;
1: 		String						name;
1: 		String						text;
1: 		String						usingText;
1: 		UUID						uuid;
0: 		UUID						compUuid;
1: 		String						uuidStr;
1: 		UUID						suuid;		// schema
1: 		String						suuidStr;	// schema
1: 		String						typeStr;
1: 		char						type;
1: 		boolean						valid;
1: 		Timestamp					time = null;
1: 		ExecPreparedStatement		preparedStatement = null;
1: 		boolean						initiallyCompilable;
1: 		DataDescriptorGenerator		ddg = dd.getDataDescriptorGenerator();
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(row.nColumns() == SYSSTATEMENTS_COLUMN_COUNT, 
1: 								 "Wrong number of columns for a SYSSTATEMENTS row");
1: 		}
1: 
1: 		// 1st column is STMTID (UUID - char(36))
1: 		col = row.getColumn(1);
1: 		uuidStr = col.getString();
1: 		uuid = getUUIDFactory().recreateUUID(uuidStr);
1: 
1: 		// 2nd column is STMTNAME (varchar(128))
1: 		col = row.getColumn(2);
1: 		name = col.getString();
1: 
1: 		// 3rd column is SCHEMAID (UUID - char(36))
1: 		col = row.getColumn(3);
1: 		suuidStr = col.getString();
1: 		suuid = getUUIDFactory().recreateUUID(suuidStr);
1: 
1: 		// 4th column is TYPE (char(1))
1: 		col = row.getColumn(4);
1: 		type = col.getString().charAt(0);
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (!SPSDescriptor.validType(type))
1: 			{
1: 				SanityManager.THROWASSERT("Bad type value ("+type+") for  statement "+name);
1: 			}
1: 		}
1: 
1: 		// In soft upgrade mode the plan may not be understand by this engine
1: 		// so force a recompile.
0: 		if (((DataDictionaryImpl) dd).readOnlyUpgrade) {
1: 			valid = false;
1: 		} else {
1: 			// 5th column is VALID (boolean)
1: 			col = row.getColumn(5);
1: 			valid = col.getBoolean();
1: 		}
1: 
1: 		// 6th column is TEXT (LONG VARCHAR)
1: 		col = row.getColumn(6);
1: 		text = col.getString();
1: 
1: 		/* 7th column is LASTCOMPILED (TIMESTAMP) */
1: 		col = row.getColumn(7);
1: 		time = col.getTimestamp(new java.util.GregorianCalendar());
1: 
1: 		// 8th column is COMPILATIONSCHEMAID (UUID - char(36))
1: 		col = row.getColumn(8);
1: 		uuidStr = col.getString();
0: 		compUuid = getUUIDFactory().recreateUUID(uuidStr);
1: 
1: 		// 9th column is TEXT (LONG VARCHAR)
1: 		col = row.getColumn(9);
1: 		usingText = col.getString();
1: 
1: 		// 10th column is CONSTANTSTATE (COM...ExecPreparedStatement)
1: 
1: 		// Only load the compiled plan if the statement is valid
1: 		if (valid) {
1: 			col = row.getColumn(10);
1: 			preparedStatement = (ExecPreparedStatement) col.getObject();
1: 		}
1: 
1: 		// 11th column is INITIALLY_COMPILABLE (boolean)
1: 		col = row.getColumn(11);
1: 		if ( col.isNull() ) { initiallyCompilable = true; }
1: 		else { initiallyCompilable = col.getBoolean(); }
1: 
1: 		descriptor = new SPSDescriptor(dd, name, 
1: 									uuid, 
1: 									suuid,
1: 									compUuid,
1: 									type, 
1: 									valid,
1: 									text,
1: 									usingText,
1: 									time,
1: 									preparedStatement,
1: 									initiallyCompilable
1: 									);
1: 
1: 		return descriptor;
1: 	}
1: 
1: 	public ExecRow makeEmptyRow()
1: 		throws StandardException
1:  	{
1:  		return makeSYSSTATEMENTSrow(false,
1:  							   		(SPSDescriptor) null);
1:  	}
1: 
1: 	/**
1: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 * The last column, the serialized statement, is not added
1: 	 * to the column list.  This is done deliberately to make it
1: 	 * a 'hidden' column -- one that is not visible to customers,
1: 	 * but is visible to the system.
1: 	 *
1: 	 *
1: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
1: 	public SystemColumn[] buildColumnList()
1: 	{
1: 		/*
0: 		** Create one less than the number of columns, we
0: 		** skip the last one deliberately.
1: 		*/	
0: 		SystemColumn[]	columnList = new SystemColumn[SYSSTATEMENTS_COLUMN_COUNT - SYSSTATEMENTS_HIDDEN_COLUMN_COUNT];
1: 
1: 
0: 		// describe columns
0: 		columnList[0] = new SystemColumnImpl(	
0: 							convertIdCase( "STMTID"),			// name 
0: 							SYSSTATEMENTS_STMTID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
1: 			                );
1: 
0: 		columnList[1] = 
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "STMTNAME"),			// column name
0: 							SYSSTATEMENTS_STMTNAME,	// column number
0: 							false				// nullability
1: 							);
1: 
0: 		columnList[2] = new SystemColumnImpl(	
0: 							convertIdCase( "SCHEMAID"),				// name 
0: 							SYSSTATEMENTS_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
1: 			                );
1: 
0: 		columnList[3] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "TYPE"),				// name 
0: 							SYSSTATEMENTS_TYPE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			                );
1: 
0: 		columnList[4] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "VALID"),			// name 
0: 							SYSSTATEMENTS_VALID,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"BOOLEAN",			// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			                );
1: 
0: 		columnList[5] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "TEXT"),				// name 
0: 							SYSSTATEMENTS_TEXT,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"LONG VARCHAR",	// dataType
0: 							true,				// built-in type
0: 							TypeId.LONGVARCHAR_MAXWIDTH	// maxLength
1: 			                );
1: 
0: 		columnList[6] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "LASTCOMPILED"),				// name 
0: 							SYSSTATEMENTS_LASTCOMPILED,	// column number
0: 							0,							// precision
0: 							0,							// scale
0: 							true,						// nullability
0: 							"TIMESTAMP",				// dataType
0: 							true,						// built-in type
0: 							TypeId.TIMESTAMP_MAXWIDTH	// maxLength
1: 			                );
1: 
0: 		columnList[7] = new SystemColumnImpl(	
0: 							convertIdCase( "COMPILATIONSCHEMAID"),				// name 
0: 							SYSSTATEMENTS_COMPILATION_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
1: 			                );
1: 
0: 		columnList[8] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "USINGTEXT"),		// name 
0: 							SYSSTATEMENTS_USINGTEXT,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"LONG VARCHAR",	// dataType
0: 							true,				// built-in type
0: 							TypeId.LONGVARCHAR_MAXWIDTH	// maxLength
1: 			                );
1: 		/*
1: 		** This column is deliberately left out.  It
1: 	 	** is effectively 'hidden' from users.  The code
1: 	 	** to create it is left here to demonstrate what
1: 		** it really looks like.
1: 		*/
1: 		//columnList[9] = 
1: 		//			new SystemColumnImpl(		
1: 		//					convertIdCase( "CONSTANTSTATE"),			// name 
1: 		//					SYSSTATEMENTS_CONSTANTSTATE,// column number
1: 		//					0,							// precision
1: 		//					0,							// scale
1: 		//					false,						// nullability
1: 		//					ExecPreparedStatement.CLASS_NAME,	//datatype
1: 		//					false,						// built-in type
1: 		//					DataTypeDescriptor.MAXIMUM_WIDTH_UNKNOWN	// maxLength
1: 		//	                );
1: 
1: 		/*
1: 		** This column is also deliberately left out.  It
1: 	 	** is effectively 'hidden' from users.  The code
1: 	 	** to create it is left here to demonstrate what
1: 		** it really looks like.
1: 		*/
1: 		//columnList[10] = 
1: 		//			new SystemColumnImpl(		
1: 		//					convertIdCase( "INITIALLY_COMPILABLE"),			// name 
1: 		//					SYSSTATEMENTS_INITIALLY_COMPILABLE,// column number
1: 		//					0,					// precision
1: 		//					0,					// scale
1: 		//					true,				// nullability
1: 		//					"BOOLEAN",			// dataType
1: 		//					true,				// built-in type
1: 		//					1					// maxLength
1: 		//	                );
1: 
1: 
0: 		return	columnList;
1: 	}
1: 
1: 	/**
1: 	 * Get the Properties associated with creating the heap.
1: 	 *
1: 	 * @return The Properties associated with creating the heap.
1: 	 */
1: 	public Properties getCreateHeapProperties()
1: 	{
1: 		Properties properties = new Properties();
1: 
1: 		// keep page size at 2K since most stmts are that size
1: 		// anyway
1: 		properties.put(Property.PAGE_SIZE_PARAMETER,"2048");
1: 
1: 		// default properties for system tables:
1: 		properties.put(RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER,"0");
1: 		properties.put(RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER,"1");
1: 		return properties;
1: 	}
1: 
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.reference.Property;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.store.raw.RawStoreFactory;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.catalog.TypeDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.iapi.types.*;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.sql.Timestamp;
0: import java.util.Properties;
0: 
0: /**
0:  * Factory for creating a SYSSTATEMENTS row.
0:  *
0:  *
0:  * @version 0.1
0:  * @author Jamie
0:  */
0: 
0: public class SYSSTATEMENTSRowFactory extends CatalogRowFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	static	final	String	TABLENAME_STRING = "SYSSTATEMENTS";
0: 
0: 	/* Column #s for sysinfo (1 based) */
0: 	public	static	final	int		SYSSTATEMENTS_STMTID = 1;
0: 	public	static	final	int		SYSSTATEMENTS_STMTNAME = 2;
0: 	public	static	final	int		SYSSTATEMENTS_SCHEMAID = 3;
0: 	public	static	final	int		SYSSTATEMENTS_TYPE = 4;
0: 	public	static	final	int		SYSSTATEMENTS_VALID = 5;
0: 	public	static	final	int		SYSSTATEMENTS_TEXT = 6;
0: 	public	static	final	int		SYSSTATEMENTS_LASTCOMPILED = 7;
0: 	public	static	final	int		SYSSTATEMENTS_COMPILATION_SCHEMAID = 8;
0: 	public	static	final	int		SYSSTATEMENTS_USINGTEXT = 9;
0: 	public	static	final	int		SYSSTATEMENTS_CONSTANTSTATE = 10;
0: 	public	static	final	int		SYSSTATEMENTS_INITIALLY_COMPILABLE = 11;
0: 
0: 	public	static	final	int		SYSSTATEMENTS_COLUMN_COUNT = SYSSTATEMENTS_INITIALLY_COMPILABLE;
0: 
0: 	public	static	final	int		SYSSTATEMENTS_HIDDEN_COLUMN_COUNT = 2;
0: 
0: 	protected static final int		SYSSTATEMENTS_INDEX1_ID = 0;
0: 	protected static final int		SYSSTATEMENTS_INDEX2_ID = 1;
0: 
0: 
0: 	private static final int[][] indexColumnPositions = 
0: 	{
0: 		{SYSSTATEMENTS_STMTID},
0: 		{SYSSTATEMENTS_STMTNAME, SYSSTATEMENTS_SCHEMAID}
0: 	};
0: 
0: 	private static final String[][] indexColumnNames =
0: 	{
0: 		{"STATEMENTID"},
0: 		{"STMTNAME", "SCHEMAID"}
0: 	};
0: 
0: 	private	static	final	boolean[]	uniqueness = null;
0: 
0: 	private	static	final	String[]	uuids =
0: 	{
0: 		 "80000000-00d1-15f7-ab70-000a0a0b1500"	// catalog UUID
0: 		,"80000000-00d1-15fc-60b9-000a0a0b1500"	// heap UUID
0: 		,"80000000-00d1-15fc-eda1-000a0a0b1500"	// SYSSTATEMENTS_INDEX1
0: 		,"80000000-00d1-15fe-bdf8-000a0a0b1500"	// SYSSTATEMENTS_INDEX2
0: 	};
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0:     public	SYSSTATEMENTSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower)
0: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(SYSSTATEMENTS_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames, uniqueness, uuids);
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	METHODS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Make a SYSSTATEMENTS row. 
0: 	 * <p>
0: 	 * <B>WARNING</B>: When empty row is true, this method takes
0: 	 * a snapshot of the SPSD and creates a row.  It is imperative
0: 	 * that that row remain consistent with the descriptor (the
0: 	 * valid and StorablePreparedStatement fields must be in sync).
0: 	 * If this row is to be written out and valid is true, then
0: 	 * this call and the insert should be synchronized on the
0: 	 * SPSD. This method has <B>NO</B> synchronization.
0: 	 * 
0: 	 * @param compileMe			passed into SPSDescriptorImpl.getPreparedStatement().
0: 	 *							if true, we (re)compile the stmt
0: 	 * @param emptyRow			Make an empty row if this parameter is true
0: 	 * @param spsDescriptor		In-memory tuple to be converted to a disk row.
0: 	 *
0: 	 * @return	Row suitable for inserting into SYSSTATEMENTS.
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 
0: 	public ExecRow makeSYSSTATEMENTSrow(
0: 		boolean				compileMe,
0: 		SPSDescriptor		spsDescriptor
0: 	) throws StandardException
0: 	{
0: 		DataTypeDescriptor		dtd;
0: 		ExecRow    				row;
0: 		DataValueDescriptor		col;
0: 		String					name = null;
0: 		UUID					uuid = null;
0: 		String					uuidStr = null;	
0: 		String					suuidStr = null;	// schema	
0: 		String					compUuidStr = null;	// compilation schema	
0: 		String					text = null;
0: 		String					usingText = null;
0: 		ExecPreparedStatement	preparedStatement = null;
0: 		String					typeStr = null;
0: 		boolean					valid = true;
0: 		Timestamp				time = null;
0: 		boolean					initiallyCompilable = true;
0: 
0: 		if (spsDescriptor != null)
0: 		{
0: 			name = spsDescriptor.getName();
0: 			uuid = spsDescriptor.getUUID();
0: 			if ( uuid == null )
0: 		    {
0: 				uuid = getUUIDFactory().createUUID();
0: 				spsDescriptor.setUUID(uuid);
0: 			}
0: 			suuidStr = spsDescriptor.getSchemaDescriptor().getUUID().toString();
0: 			uuidStr = uuid.toString();
0: 			text = spsDescriptor.getText();			
0: 			valid = spsDescriptor.isValid();
0: 			time = spsDescriptor.getCompileTime();
0: 			typeStr = spsDescriptor.getTypeAsString();
0: 			initiallyCompilable = spsDescriptor.initiallyCompilable();
0: 			preparedStatement = spsDescriptor.getPreparedStatement(compileMe);
0: 			compUuidStr = spsDescriptor.getCompSchemaId().toString();
0: 			usingText = spsDescriptor.getUsingText();
0: 		}
0: 
0: 		/* Build the row to insert */
0: 		row = getExecutionFactory().getValueRow(SYSSTATEMENTS_COLUMN_COUNT);
0: 
0: 		/* 1st column is STMTID */
0: 		row.setColumn(1, dvf.getCharDataValue(uuidStr));
0: 
0: 		/* 2nd column is STMTNAME */
0: 		row.setColumn(2, dvf.getVarcharDataValue(name));
0: 
0: 		/* 3rd column is SCHEMAID */
0: 		row.setColumn(3, dvf.getCharDataValue(suuidStr));
0: 
0: 		/* 4th column is TYPE */
0: 		row.setColumn(4, dvf.getCharDataValue(typeStr));
0: 
0: 		/* 5th column is VALID */
0: 		row.setColumn(5, dvf.getDataValue(valid));
0: 
0: 		/* 6th column is TEXT */
0: 		row.setColumn(6, dvf.getLongvarcharDataValue(text));
0: 
0: 		/* 7th column is LASTCOMPILED */
0: 		row.setColumn(7, new SQLTimestamp(time));
0: 
0: 		/* 8th column is COMPILATIONSCHEMAID */
0: 		row.setColumn(8, dvf.getCharDataValue(compUuidStr));
0: 
0: 		/* 9th column is USINGTEXT */
0: 		row.setColumn(9, dvf.getLongvarcharDataValue(usingText));
0: 
0: 		/* 
0: 		** 10th column is CONSTANTSTATE
0: 		**
0: 		** CONSTANTSTATE is really a formatable StorablePreparedStatement.
0: 		*/
0: 		row.setColumn(10, dvf.getDataValue(preparedStatement));
0: 
0: 		/* 11th column is INITIALLY_COMPILABLE */
0: 		row.setColumn(11, dvf.getDataValue(initiallyCompilable));
0: 
0: 		return row;
0: 	}
0: 
0: 	/**
0: 	 * Builds an empty index row.
0: 	 *
0: 	 * @param	indexNumber	Index to build empty row for.
0: 	 * @param  rowLocation	Row location for last column of index row
0: 	 *
0: 	 * @return corresponding empty index row
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
0: 			throws StandardException
0: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
0: 
0: 		row.setColumn(ncols + 1, rowLocation);
0: 
0: 		switch( indexNumber )
0: 		{
0: 		    case SYSSTATEMENTS_INDEX1_ID:
0: 				/* 1st column is STMTID (UUID - char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 				break;
0: 
0: 		    case SYSSTATEMENTS_INDEX2_ID:
0: 				/* 1st column is STMTNAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
0: 				break;
0: 		}	// end switch
0: 
0: 		return	row;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Make an  Tuple Descriptor out of a SYSSTATEMENTS row
0: 	 *
0: 	 * @param row 					a SYSSTATEMENTS row
0: 	 * @param parentTupleDescriptor	unused
0: 	 * @param dd 					dataDictionary
0: 	 *
0: 	 * @return	a  descriptor equivalent to a SYSSTATEMENTS row
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public TupleDescriptor buildDescriptor(
0: 		ExecRow					row,
0: 		TupleDescriptor			parentTupleDescriptor,
0: 		DataDictionary 			dd )
0: 					throws StandardException
0: 	{
0: 		DataValueDescriptor			col;
0: 		SPSDescriptor				descriptor;
0: 		String						name;
0: 		String						text;
0: 		String						usingText;
0: 		UUID						uuid;
0: 		UUID						compUuid;
0: 		String						uuidStr;
0: 		UUID						suuid;		// schema
0: 		String						suuidStr;	// schema
0: 		String						typeStr;
0: 		char						type;
0: 		boolean						valid;
0: 		Timestamp					time = null;
0: 		ExecPreparedStatement		preparedStatement = null;
0: 		boolean						initiallyCompilable;
0: 		DataDescriptorGenerator		ddg = dd.getDataDescriptorGenerator();
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(row.nColumns() == SYSSTATEMENTS_COLUMN_COUNT, 
0: 								 "Wrong number of columns for a SYSSTATEMENTS row");
0: 		}
0: 
0: 		// 1st column is STMTID (UUID - char(36))
0: 		col = row.getColumn(1);
0: 		uuidStr = col.getString();
0: 		uuid = getUUIDFactory().recreateUUID(uuidStr);
0: 
0: 		// 2nd column is STMTNAME (varchar(128))
0: 		col = row.getColumn(2);
0: 		name = col.getString();
0: 
0: 		// 3rd column is SCHEMAID (UUID - char(36))
0: 		col = row.getColumn(3);
0: 		suuidStr = col.getString();
0: 		suuid = getUUIDFactory().recreateUUID(suuidStr);
0: 
0: 		// 4th column is TYPE (char(1))
0: 		col = row.getColumn(4);
0: 		type = col.getString().charAt(0);
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (!SPSDescriptor.validType(type))
0: 			{
0: 				SanityManager.THROWASSERT("Bad type value ("+type+") for  statement "+name);
0: 			}
0: 		}
0: 
0: 		// In soft upgrade mode the plan may not be understand by this engine
0: 		// so force a recompile.
0: 		if (((DataDictionaryImpl) dd).readOnlyUpgrade) {
0: 			valid = false;
0: 		} else {
0: 			// 5th column is VALID (boolean)
0: 			col = row.getColumn(5);
0: 			valid = col.getBoolean();
0: 		}
0: 
0: 		// 6th column is TEXT (LONG VARCHAR)
0: 		col = row.getColumn(6);
0: 		text = col.getString();
0: 
0: 		/* 7th column is LASTCOMPILED (TIMESTAMP) */
0: 		col = row.getColumn(7);
0: 		time = col.getTimestamp(new java.util.GregorianCalendar());
0: 
0: 		// 8th column is COMPILATIONSCHEMAID (UUID - char(36))
0: 		col = row.getColumn(8);
0: 		uuidStr = col.getString();
0: 		compUuid = getUUIDFactory().recreateUUID(uuidStr);
0: 
0: 		// 9th column is TEXT (LONG VARCHAR)
0: 		col = row.getColumn(9);
0: 		usingText = col.getString();
0: 
0: 		// 10th column is CONSTANTSTATE (COM...ExecPreparedStatement)
0: 
0: 		// Only load the compiled plan if the statement is valid
0: 		if (valid) {
0: 			col = row.getColumn(10);
0: 			preparedStatement = (ExecPreparedStatement) col.getObject();
0: 		}
0: 
0: 		// 11th column is INITIALLY_COMPILABLE (boolean)
0: 		col = row.getColumn(11);
0: 		if ( col.isNull() ) { initiallyCompilable = true; }
0: 		else { initiallyCompilable = col.getBoolean(); }
0: 
0: 		descriptor = new SPSDescriptor(dd, name, 
0: 									uuid, 
0: 									suuid,
0: 									compUuid,
0: 									type, 
0: 									valid,
0: 									text,
0: 									usingText,
0: 									time,
0: 									preparedStatement,
0: 									initiallyCompilable
0: 									);
0: 
0: 		return descriptor;
0: 	}
0: 
0: 	public ExecRow makeEmptyRow()
0: 		throws StandardException
0:  	{
0:  		return makeSYSSTATEMENTSrow(false,
0:  							   		(SPSDescriptor) null);
0:  	}
0: 
0: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
0: 	 * The last column, the serialized statement, is not added
0: 	 * to the column list.  This is done deliberately to make it
0: 	 * a 'hidden' column -- one that is not visible to customers,
0: 	 * but is visible to the system.
0: 	 *
0: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
0: 	 */
0: 	public SystemColumn[] buildColumnList()
0: 	{
0: 		/*
0: 		** Create one less than the number of columns, we
0: 		** skip the last one deliberately.
0: 		*/	
0: 		SystemColumn[]	columnList = new SystemColumn[SYSSTATEMENTS_COLUMN_COUNT - SYSSTATEMENTS_HIDDEN_COLUMN_COUNT];
0: 
0: 
0: 		// describe columns
0: 		columnList[0] = new SystemColumnImpl(	
0: 							convertIdCase( "STMTID"),			// name 
0: 							SYSSTATEMENTS_STMTID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			                );
0: 
0: 		columnList[1] = 
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "STMTNAME"),			// column name
0: 							SYSSTATEMENTS_STMTNAME,	// column number
0: 							false				// nullability
0: 							);
0: 
0: 		columnList[2] = new SystemColumnImpl(	
0: 							convertIdCase( "SCHEMAID"),				// name 
0: 							SYSSTATEMENTS_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			                );
0: 
0: 		columnList[3] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "TYPE"),				// name 
0: 							SYSSTATEMENTS_TYPE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			                );
0: 
0: 		columnList[4] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "VALID"),			// name 
0: 							SYSSTATEMENTS_VALID,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"BOOLEAN",			// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			                );
0: 
0: 		columnList[5] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "TEXT"),				// name 
0: 							SYSSTATEMENTS_TEXT,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"LONG VARCHAR",	// dataType
0: 							true,				// built-in type
0: 							TypeId.LONGVARCHAR_MAXWIDTH	// maxLength
0: 			                );
0: 
0: 		columnList[6] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "LASTCOMPILED"),				// name 
0: 							SYSSTATEMENTS_LASTCOMPILED,	// column number
0: 							0,							// precision
0: 							0,							// scale
0: 							true,						// nullability
0: 							"TIMESTAMP",				// dataType
0: 							true,						// built-in type
0: 							TypeId.TIMESTAMP_MAXWIDTH	// maxLength
0: 			                );
0: 
0: 		columnList[7] = new SystemColumnImpl(	
0: 							convertIdCase( "COMPILATIONSCHEMAID"),				// name 
0: 							SYSSTATEMENTS_COMPILATION_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			                );
0: 
0: 		columnList[8] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "USINGTEXT"),		// name 
0: 							SYSSTATEMENTS_USINGTEXT,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"LONG VARCHAR",	// dataType
0: 							true,				// built-in type
0: 							TypeId.LONGVARCHAR_MAXWIDTH	// maxLength
0: 			                );
0: 		/*
0: 		** This column is deliberately left out.  It
0: 	 	** is effectively 'hidden' from users.  The code
0: 	 	** to create it is left here to demonstrate what
0: 		** it really looks like.
0: 		*/
0: 		//columnList[9] = 
0: 		//			new SystemColumnImpl(		
0: 		//					convertIdCase( "CONSTANTSTATE"),			// name 
0: 		//					SYSSTATEMENTS_CONSTANTSTATE,// column number
0: 		//					0,							// precision
0: 		//					0,							// scale
0: 		//					false,						// nullability
0: 		//					ExecPreparedStatement.CLASS_NAME,	//datatype
0: 		//					false,						// built-in type
0: 		//					DataTypeDescriptor.MAXIMUM_WIDTH_UNKNOWN	// maxLength
0: 		//	                );
0: 
0: 		/*
0: 		** This column is also deliberately left out.  It
0: 	 	** is effectively 'hidden' from users.  The code
0: 	 	** to create it is left here to demonstrate what
0: 		** it really looks like.
0: 		*/
0: 		//columnList[10] = 
0: 		//			new SystemColumnImpl(		
0: 		//					convertIdCase( "INITIALLY_COMPILABLE"),			// name 
0: 		//					SYSSTATEMENTS_INITIALLY_COMPILABLE,// column number
0: 		//					0,					// precision
0: 		//					0,					// scale
0: 		//					true,				// nullability
0: 		//					"BOOLEAN",			// dataType
0: 		//					true,				// built-in type
0: 		//					1					// maxLength
0: 		//	                );
0: 
0: 
0: 		return	columnList;
0: 	}
0: 
0: 	/**
0: 	 * Get the Properties associated with creating the heap.
0: 	 *
0: 	 * @return The Properties associated with creating the heap.
0: 	 */
0: 	public Properties getCreateHeapProperties()
0: 	{
0: 		Properties properties = new Properties();
0: 
0: 		// keep page size at 2K since most stmts are that size
0: 		// anyway
0: 		properties.put(Property.PAGE_SIZE_PARAMETER,"2048");
0: 
0: 		// default properties for system tables:
0: 		properties.put(RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER,"0");
0: 		properties.put(RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER,"1");
0: 		return properties;
0: 	}
0: 
0: }
============================================================================