1:c3bf4ea: /*
1:c3bf4ea: 
1:c3bf4ea: Derby - Class org.apache.derbyTesting.perf.basic.jdbc.SortTest
1:c3bf4ea: 
1:c3bf4ea: Licensed to the Apache Software Foundation (ASF) under one or more
1:c3bf4ea: contributor license agreements.  See the NOTICE file distributed with
1:c3bf4ea: this work for additional information regarding copyright ownership.
1:c3bf4ea: The ASF licenses this file to You under the Apache License, Version 2.0
1:c3bf4ea: (the "License"); you may not use this file except in compliance with
1:c3bf4ea: the License.  You may obtain a copy of the License at
1:c3bf4ea: 
1:c3bf4ea: http://www.apache.org/licenses/LICENSE-2.0
1:c3bf4ea: 
1:c3bf4ea: Unless required by applicable law or agreed to in writing, software
1:c3bf4ea: distributed under the License is distributed on an "AS IS" BASIS,
1:c3bf4ea: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c3bf4ea: See the License for the specific language governing permissions and
1:c3bf4ea: limitations under the License.
1:c3bf4ea: 
1:c3bf4ea: */
1:c3bf4ea: package org.apache.derbyTesting.perf.basic.jdbc;
1:c3bf4ea: 
1:c3bf4ea: 
1:1ae02c9: import java.sql.Connection;
1:1ae02c9: import java.sql.PreparedStatement;
1:1ae02c9: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:c3bf4ea: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c3bf4ea: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1:c3bf4ea: 
1:c3bf4ea: /**
1:c3bf4ea:  * Sort test
1:c3bf4ea:  *
1:c3bf4ea:  */
1:c3bf4ea: public class SortTest extends JDBCPerfTestCase {
1:c3bf4ea: 
1:c3bf4ea:     PreparedStatement select = null;
1:c3bf4ea:     protected static String tableName = "SORTTEST";
1:c3bf4ea:     protected static int rowcount = 10000;
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * @return suite of tests
1:c3bf4ea:      */
1:c3bf4ea:     public static Test suite()
1:c3bf4ea:     {
1:c3bf4ea:         int iterations = 350, repeats = 4;
1:c3bf4ea: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("SortTests");
1:c3bf4ea:         suite.addTest(new SortTest("SortDesc100",iterations,repeats));
1:c3bf4ea:         suite.addTest(new SortTest("SortDesc100GetData",iterations,repeats));
1:c3bf4ea:         return new BaseLoad100TestSetup(suite,rowcount,tableName);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Sort tests.
1:c3bf4ea:      * @param name test name
1:c3bf4ea:      * @param iterations iterations of the test to measure
1:c3bf4ea:      * @param repeats number of times to repeat the test
1:c3bf4ea:      */
1:c3bf4ea:     public SortTest(String name,int iterations, int repeats)
1:c3bf4ea:     {
1:c3bf4ea:         super(name,iterations,repeats);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Do the necessary setup for the test ,prepare the statement
1:c3bf4ea:      */
1:c3bf4ea:     public void setUp() throws Exception {
1:c3bf4ea: 
1:c3bf4ea:         select = openDefaultConnection().prepareStatement("SELECT * FROM "+tableName +" order by i1 desc");
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Override initializeConnection to set the autocommit to false
1:c3bf4ea:      */
1:c3bf4ea:     public void initializeConnection(Connection conn)
1:c3bf4ea:     throws SQLException
1:c3bf4ea:     {
1:c3bf4ea:         conn.setAutoCommit(false);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Sort test with the schema loaded as part of BaseLoad100TestSetup
1:c3bf4ea:      * The rows are presented to the sorter in reverse order of the
1:c3bf4ea:      * sort.  The test loads a table with rowcount keys in order, and
1:c3bf4ea:      * then sorts them in descending order.
1:c3bf4ea:      * The column data are not retrieved using the appropriate getXXX() methods
1:c3bf4ea:      * @throws Exception
1:c3bf4ea:      */
1:c3bf4ea:     public void SortDesc100() throws Exception
1:c3bf4ea:     {
1:c3bf4ea: 
1:c3bf4ea:         ResultSet rs = select.executeQuery();
1:c3bf4ea:         int actualCount = 0;
1:c3bf4ea:         while (rs.next()) {
1:c3bf4ea:             actualCount++;
1:c3bf4ea:         }
1:c3bf4ea: 
1:c3bf4ea:         assertEquals(actualCount,rowcount);
1:c3bf4ea:         rs.close();
1:c3bf4ea:         getConnection().commit();
1:c3bf4ea: 
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Sort test with the schema loaded as part of BaseLoad100TestSetup
1:c3bf4ea:      * The rows are presented to the sorter in reverse order of the
1:c3bf4ea:      * sort.  The test loads a table with rowcount keys in order, and
1:c3bf4ea:      * then sorts them in descending order.
1:c3bf4ea:      * The column data are retrieved using the appropriate getXXX() methods
1:c3bf4ea:      * @throws Exception
1:c3bf4ea:      */
1:c3bf4ea:     public void SortDesc100GetData() throws Exception
1:c3bf4ea:     {
1:c3bf4ea:         ResultSet rs = select.executeQuery();
1:c3bf4ea: 
1:c3bf4ea:         int actualCount = 0;
1:c3bf4ea:         while (rs.next()) {
1:c3bf4ea: 
1:c3bf4ea:             int i1 = rs.getInt(1);
1:c3bf4ea:             int i2 = rs.getInt(2);
1:c3bf4ea:             int i3 = rs.getInt(3);
1:c3bf4ea:             int i4 = rs.getInt(4);
1:c3bf4ea:             int i5 = rs.getInt(5);
1:c3bf4ea: 
1:c3bf4ea:             String c6 = rs.getString(6);
1:c3bf4ea:             String c7 = rs.getString(7);
1:c3bf4ea:             String c8 = rs.getString(8);
1:c3bf4ea:             String c9 = rs.getString(9);
1:c3bf4ea: 
1:c3bf4ea:             actualCount++;
1:c3bf4ea:         }
1:c3bf4ea:         assertEquals(actualCount,rowcount);
1:c3bf4ea:         getConnection().commit();
1:c3bf4ea:         rs.close();
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Cleanup - close resources opened in this test.
1:c3bf4ea:      **/
1:c3bf4ea:     public void tearDown() throws Exception {
1:c3bf4ea: 
1:c3bf4ea:         select.close();
1:c3bf4ea:         select = null;
1:c3bf4ea:         super.tearDown();
1:c3bf4ea:     }
1:c3bf4ea: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("SortTests");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c3bf4ea
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.basic.jdbc.SortTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.perf.basic.jdbc;
1: 
1: 
0: import java.sql.*;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1: 
1: /**
1:  * Sort test
1:  *
1:  */
1: public class SortTest extends JDBCPerfTestCase {
1: 
1:     PreparedStatement select = null;
1:     protected static String tableName = "SORTTEST";
1:     protected static int rowcount = 10000;
1: 
1:     /**
1:      * @return suite of tests
1:      */
1:     public static Test suite()
1:     {
1:         int iterations = 350, repeats = 4;
1: 
0:         TestSuite suite = new TestSuite("SortTests");
1:         suite.addTest(new SortTest("SortDesc100",iterations,repeats));
1:         suite.addTest(new SortTest("SortDesc100GetData",iterations,repeats));
1:         return new BaseLoad100TestSetup(suite,rowcount,tableName);
1:     }
1: 
1:     /**
1:      * Sort tests.
1:      * @param name test name
1:      * @param iterations iterations of the test to measure
1:      * @param repeats number of times to repeat the test
1:      */
1:     public SortTest(String name,int iterations, int repeats)
1:     {
1:         super(name,iterations,repeats);
1:     }
1: 
1:     /**
1:      * Do the necessary setup for the test ,prepare the statement
1:      */
1:     public void setUp() throws Exception {
1: 
1:         select = openDefaultConnection().prepareStatement("SELECT * FROM "+tableName +" order by i1 desc");
1:     }
1: 
1: 
1:     /**
1:      * Override initializeConnection to set the autocommit to false
1:      */
1:     public void initializeConnection(Connection conn)
1:     throws SQLException
1:     {
1:         conn.setAutoCommit(false);
1:     }
1: 
1: 
1:     /**
1:      * Sort test with the schema loaded as part of BaseLoad100TestSetup
1:      * The rows are presented to the sorter in reverse order of the
1:      * sort.  The test loads a table with rowcount keys in order, and
1:      * then sorts them in descending order.
1:      * The column data are not retrieved using the appropriate getXXX() methods
1:      * @throws Exception
1:      */
1:     public void SortDesc100() throws Exception
1:     {
1: 
1:         ResultSet rs = select.executeQuery();
1:         int actualCount = 0;
1:         while (rs.next()) {
1:             actualCount++;
1:         }
1: 
1:         assertEquals(actualCount,rowcount);
1:         rs.close();
1:         getConnection().commit();
1: 
1:     }
1: 
1:     /**
1:      * Sort test with the schema loaded as part of BaseLoad100TestSetup
1:      * The rows are presented to the sorter in reverse order of the
1:      * sort.  The test loads a table with rowcount keys in order, and
1:      * then sorts them in descending order.
1:      * The column data are retrieved using the appropriate getXXX() methods
1:      * @throws Exception
1:      */
1:     public void SortDesc100GetData() throws Exception
1:     {
1:         ResultSet rs = select.executeQuery();
1: 
1:         int actualCount = 0;
1:         while (rs.next()) {
1: 
1:             int i1 = rs.getInt(1);
1:             int i2 = rs.getInt(2);
1:             int i3 = rs.getInt(3);
1:             int i4 = rs.getInt(4);
1:             int i5 = rs.getInt(5);
1: 
1:             String c6 = rs.getString(6);
1:             String c7 = rs.getString(7);
1:             String c8 = rs.getString(8);
1:             String c9 = rs.getString(9);
1: 
1:             actualCount++;
1:         }
1:         assertEquals(actualCount,rowcount);
1:         getConnection().commit();
1:         rs.close();
1:     }
1: 
1:     /**
1:      * Cleanup - close resources opened in this test.
1:      **/
1:     public void tearDown() throws Exception {
1: 
1:         select.close();
1:         select = null;
1:         super.tearDown();
1:     }
1: }
============================================================================