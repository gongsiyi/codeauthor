1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.SearchParameters
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.RowUtil;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   Parameters that are passed down during a recursive b-tree search.
1:eac0369:   This class is intended to be used as a struct, primarily to make
1:eac0369:   it easier to pass a number of search parameters around, and also
1:eac0369:   to make it easy to re-use objects and not re-allocate.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public class SearchParameters
1:eac0369: {
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Position on key just left of a sequence of partial key matches.
1:eac0369:      * Used by scan which will then start scan on next key.
1:eac0369:      **/
1:eac0369:     public static final int POSITION_LEFT_OF_PARTIAL_KEY_MATCH  = 1;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Position on last key in a sequence of partial key matches.
1:eac0369:      * Used by scan which will then start scan on next key.
1:eac0369:      **/
1:eac0369:     public static final int POSITION_RIGHT_OF_PARTIAL_KEY_MATCH = -1;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	The key being searched for.  Never intended to be modified
1:eac0369: 	for the lifetime of the object.
1:eac0369: 	**/
1:eac0369: 	public DataValueDescriptor[] searchKey;
1:eac0369: 
1:eac0369: 	/**
1:eac0369:     Value to return in comparisons where partial key matches exactly 
1:eac0369:     the partial key of a row.  Use this parameter to control where 
1:eac0369:     in a duplicate partial key list to position the search.  
1:eac0369: 
1:eac0369:     Here are some examples:
1:eac0369: 
1:eac0369:     Assume: dataset of {1,0}, {5,1}, {5,2}, {6,4}; and partial key of {5}.
1:eac0369: 
1:eac0369: 
1:eac0369:     If the scan is GE , then the scan intially wants to position
1:eac0369:     on {1,0} (one before first qualifying row) - In this case when a partial
1:eac0369:     match is found we want to return 1 when we hit {5,1}; but if the
1:eac0369:     searchOperator is GT, then we want to return -1 on {5,1}, {5,2}, and then
1:eac0369:     return 1 on {6,4}.
1:eac0369: 
1:eac0369: 
1:eac0369:     partial_key_match_op =  POSITION_LEFT_OF_PARTIAL_KEY_MATCH: 
1:eac0369:     Scan is looking for GE the partial key, so position the scan to the
1:eac0369:     left of any partial key that exactly matches the partial key.
1:eac0369:     If the scan is GE , then the scan intially wants to position
1:eac0369:     on {1,0} (one before first qualifying row) - In this case when a partial
1:eac0369:     match is found we want to return 1 when we hit {5,1}.
1:eac0369: 
1:eac0369:     partial_key_match_op = POSITION_RIGHT_OF_PARTIAL_KEY_MATCH: 
1:eac0369:     Scan is looking for GT the partial key, so position the scan to the
1:eac0369:     right of any partial key that exactly matches the partial key.
1:eac0369:     If the scan is GT, then the scan intially wants to position
1:eac0369:     on {5,2} (one before first qualifying row) - In this case when a partial
1:eac0369:     match is found we want to return -1 when we hit on {5,1}, {5,2}, and then
1:eac0369:     return 1 on {6,4}.
1:eac0369: 
1:eac0369:     partial_key_match_op =  0: 
1:eac0369:     Scan does not care where in a set of duplicate partial keys to position 
1:eac0369:     to (not used currently).
1:eac0369: 	**/
1:eac0369:     int partial_key_match_op;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	An index row with the correct types for the index,
1:eac0369: 	into which rows are read during the search.
1:eac0369: 	Rows are read into the template during a page search, but
1:eac0369: 	they will be overwritten; there is only one template per
1:eac0369: 	search.
1:eac0369: 	**/
1:eac0369: 	public DataValueDescriptor[] template;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	The b-tree this search is for.  Effectively read-only for the
1:eac0369: 	lifetime of this object.
1:eac0369: 	**/
1:eac0369: 	public OpenBTree btree;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	The resulting slot from the search.  Updated when the search completes.
1:eac0369: 	**/
1:eac0369: 	public int resultSlot;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Whether the row found exactly matched the searchKey.  Updated 
1:eac0369: 	when the search completes.
1:eac0369: 	**/
1:eac0369: 	public boolean resultExact;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Whether the search is for the optimizer, to determine range of scan.
1:eac0369: 	**/
1:eac0369: 	public boolean searchForOptimizer;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	If this is an optimizer search, the fraction of rows that are left of 
1:eac0369:     the current search.  When the search completes this number multiplied by
1:eac0369:     the number of leaf rows in the table is the number of rows left of
1:eac0369:     the result slot in the search.
1:eac0369: 	**/
1:eac0369: 	public float left_fraction;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	If this is an optimizer search, the fraction of rows that are "in" the 
1:eac0369:     the current search.  This number is used as we descend down the tree to 
1:eac0369:     track the percentage of rows that we think are in the current subtree
1:eac0369:     defined by all leaf's that can be reached from the current branch.
1:eac0369: 	**/
1:eac0369: 	public float current_fraction;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Construct search parameters.
1:eac0369: 
1:eac0369:     @exception StandardException Standard exception policy.
1:eac0369: 	**/
1:eac0369: 	public SearchParameters(
1:eac0369:     DataValueDescriptor[]   searchKey, 
1:eac0369:     int                     partial_key_match_op,
1:eac0369:     DataValueDescriptor[]   template, 
1:eac0369:     OpenBTree               btree,
1:eac0369:     boolean                 searchForOptimizer)
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369: 		this.searchKey              = searchKey;
1:eac0369: 		this.partial_key_match_op   = partial_key_match_op;
1:eac0369: 		this.template               = template;
1:eac0369: 		this.btree                  = btree;
1:eac0369: 		this.resultSlot             = 0;
1:eac0369: 		this.resultExact            = false;
1:eac0369: 		this.searchForOptimizer     = searchForOptimizer;
1:eac0369: 
1:eac0369:         if (this.searchForOptimizer)
1:eac0369:         {
1:eac0369:             this.left_fraction = 0;
1:eac0369:             this.current_fraction = 1;
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             // RESOLVE - this is ugly but has caught some problems.
1:eac0369:             SanityManager.ASSERT(partial_key_match_op == -1||
1:eac0369:                                  partial_key_match_op == 1);
1:eac0369:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public String toString()
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             String string = 
1:eac0369:                 "key = "      +   RowUtil.toString(searchKey)      + ";" +
1:eac0369:                 "op = "       +   (partial_key_match_op ==  1 ? "GE" :
1:eac0369:                                   (partial_key_match_op == -1 ? "GT" :
1:eac0369:                                    "BAD OP:" + partial_key_match_op)) + ";" +
1:eac0369:                 "template = " +   RowUtil.toString(template)        + ";" +
1:eac0369:                 // RESOLVE (mikem) - do we want to print out btree?
1:eac0369:                 // "btree = " +   btree           + ";" +
1:eac0369:                 "Slot = "     +   resultSlot      + ";" +
1:eac0369:                 "Exact = "    +   resultExact     + ";";
1:eac0369: 
1:eac0369:             return(string);
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             return(null);
1:eac0369:         }
1:eac0369:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.SearchParameters
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree;
1: 
0: import java.io.PrintStream;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.RowUtil;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: 
1: /**
1: 
1:   Parameters that are passed down during a recursive b-tree search.
1:   This class is intended to be used as a struct, primarily to make
1:   it easier to pass a number of search parameters around, and also
1:   to make it easy to re-use objects and not re-allocate.
1: 
1: **/
1: 
1: public class SearchParameters
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1:     /**
1:      * Position on key just left of a sequence of partial key matches.
1:      * Used by scan which will then start scan on next key.
1:      **/
1:     public static final int POSITION_LEFT_OF_PARTIAL_KEY_MATCH  = 1;
1: 
1:     /**
1:      * Position on last key in a sequence of partial key matches.
1:      * Used by scan which will then start scan on next key.
1:      **/
1:     public static final int POSITION_RIGHT_OF_PARTIAL_KEY_MATCH = -1;
1: 
1: 	/**
1: 	The key being searched for.  Never intended to be modified
1: 	for the lifetime of the object.
1: 	**/
1: 	public DataValueDescriptor[] searchKey;
1: 
1: 	/**
1:     Value to return in comparisons where partial key matches exactly 
1:     the partial key of a row.  Use this parameter to control where 
1:     in a duplicate partial key list to position the search.  
1: 
1:     Here are some examples:
1: 
1:     Assume: dataset of {1,0}, {5,1}, {5,2}, {6,4}; and partial key of {5}.
1: 
1: 
1:     If the scan is GE , then the scan intially wants to position
1:     on {1,0} (one before first qualifying row) - In this case when a partial
1:     match is found we want to return 1 when we hit {5,1}; but if the
1:     searchOperator is GT, then we want to return -1 on {5,1}, {5,2}, and then
1:     return 1 on {6,4}.
1: 
1: 
1:     partial_key_match_op =  POSITION_LEFT_OF_PARTIAL_KEY_MATCH: 
1:     Scan is looking for GE the partial key, so position the scan to the
1:     left of any partial key that exactly matches the partial key.
1:     If the scan is GE , then the scan intially wants to position
1:     on {1,0} (one before first qualifying row) - In this case when a partial
1:     match is found we want to return 1 when we hit {5,1}.
1: 
1:     partial_key_match_op = POSITION_RIGHT_OF_PARTIAL_KEY_MATCH: 
1:     Scan is looking for GT the partial key, so position the scan to the
1:     right of any partial key that exactly matches the partial key.
1:     If the scan is GT, then the scan intially wants to position
1:     on {5,2} (one before first qualifying row) - In this case when a partial
1:     match is found we want to return -1 when we hit on {5,1}, {5,2}, and then
1:     return 1 on {6,4}.
1: 
1:     partial_key_match_op =  0: 
1:     Scan does not care where in a set of duplicate partial keys to position 
1:     to (not used currently).
1: 	**/
1:     int partial_key_match_op;
1: 
1: 	/**
1: 	An index row with the correct types for the index,
1: 	into which rows are read during the search.
1: 	Rows are read into the template during a page search, but
1: 	they will be overwritten; there is only one template per
1: 	search.
1: 	**/
1: 	public DataValueDescriptor[] template;
1: 
1: 	/**
1: 	The b-tree this search is for.  Effectively read-only for the
1: 	lifetime of this object.
1: 	**/
1: 	public OpenBTree btree;
1: 
1: 	/**
1: 	The resulting slot from the search.  Updated when the search completes.
1: 	**/
1: 	public int resultSlot;
1: 
1: 	/**
1: 	Whether the row found exactly matched the searchKey.  Updated 
1: 	when the search completes.
1: 	**/
1: 	public boolean resultExact;
1: 
1: 	/**
1: 	Whether the search is for the optimizer, to determine range of scan.
1: 	**/
1: 	public boolean searchForOptimizer;
1: 
1: 	/**
1: 	If this is an optimizer search, the fraction of rows that are left of 
1:     the current search.  When the search completes this number multiplied by
1:     the number of leaf rows in the table is the number of rows left of
1:     the result slot in the search.
1: 	**/
1: 	public float left_fraction;
1: 
1: 	/**
1: 	If this is an optimizer search, the fraction of rows that are "in" the 
1:     the current search.  This number is used as we descend down the tree to 
1:     track the percentage of rows that we think are in the current subtree
1:     defined by all leaf's that can be reached from the current branch.
1: 	**/
1: 	public float current_fraction;
1: 
1: 	/**
1: 	Construct search parameters.
1: 
1:     @exception StandardException Standard exception policy.
1: 	**/
1: 	public SearchParameters(
1:     DataValueDescriptor[]   searchKey, 
1:     int                     partial_key_match_op,
1:     DataValueDescriptor[]   template, 
1:     OpenBTree               btree,
1:     boolean                 searchForOptimizer)
1:         throws StandardException
1: 	{
1: 		this.searchKey              = searchKey;
1: 		this.partial_key_match_op   = partial_key_match_op;
1: 		this.template               = template;
1: 		this.btree                  = btree;
1: 		this.resultSlot             = 0;
1: 		this.resultExact            = false;
1: 		this.searchForOptimizer     = searchForOptimizer;
1: 
1:         if (this.searchForOptimizer)
1:         {
1:             this.left_fraction = 0;
1:             this.current_fraction = 1;
1:         }
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             // RESOLVE - this is ugly but has caught some problems.
1:             SanityManager.ASSERT(partial_key_match_op == -1||
1:                                  partial_key_match_op == 1);
1:         }
1: 	}
1: 
1:     public String toString()
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             String string = 
1:                 "key = "      +   RowUtil.toString(searchKey)      + ";" +
1:                 "op = "       +   (partial_key_match_op ==  1 ? "GE" :
1:                                   (partial_key_match_op == -1 ? "GT" :
1:                                    "BAD OP:" + partial_key_match_op)) + ";" +
1:                 "template = " +   RowUtil.toString(template)        + ";" +
1:                 // RESOLVE (mikem) - do we want to print out btree?
1:                 // "btree = " +   btree           + ";" +
1:                 "Slot = "     +   resultSlot      + ";" +
1:                 "Exact = "    +   resultExact     + ";";
1: 
1:             return(string);
1:         }
1:         else
1:         {
1:             return(null);
1:         }
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree;
0: 
0: import java.io.PrintStream;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.RowUtil;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: 
0: /**
0: 
0:   Parameters that are passed down during a recursive b-tree search.
0:   This class is intended to be used as a struct, primarily to make
0:   it easier to pass a number of search parameters around, and also
0:   to make it easy to re-use objects and not re-allocate.
0: 
0: **/
0: 
0: public class SearchParameters
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0:     /**
0:      * Position on key just left of a sequence of partial key matches.
0:      * Used by scan which will then start scan on next key.
0:      **/
0:     public static final int POSITION_LEFT_OF_PARTIAL_KEY_MATCH  = 1;
0: 
0:     /**
0:      * Position on last key in a sequence of partial key matches.
0:      * Used by scan which will then start scan on next key.
0:      **/
0:     public static final int POSITION_RIGHT_OF_PARTIAL_KEY_MATCH = -1;
0: 
0: 	/**
0: 	The key being searched for.  Never intended to be modified
0: 	for the lifetime of the object.
0: 	**/
0: 	public DataValueDescriptor[] searchKey;
0: 
0: 	/**
0:     Value to return in comparisons where partial key matches exactly 
0:     the partial key of a row.  Use this parameter to control where 
0:     in a duplicate partial key list to position the search.  
0: 
0:     Here are some examples:
0: 
0:     Assume: dataset of {1,0}, {5,1}, {5,2}, {6,4}; and partial key of {5}.
0: 
0: 
0:     If the scan is GE , then the scan intially wants to position
0:     on {1,0} (one before first qualifying row) - In this case when a partial
0:     match is found we want to return 1 when we hit {5,1}; but if the
0:     searchOperator is GT, then we want to return -1 on {5,1}, {5,2}, and then
0:     return 1 on {6,4}.
0: 
0: 
0:     partial_key_match_op =  POSITION_LEFT_OF_PARTIAL_KEY_MATCH: 
0:     Scan is looking for GE the partial key, so position the scan to the
0:     left of any partial key that exactly matches the partial key.
0:     If the scan is GE , then the scan intially wants to position
0:     on {1,0} (one before first qualifying row) - In this case when a partial
0:     match is found we want to return 1 when we hit {5,1}.
0: 
0:     partial_key_match_op = POSITION_RIGHT_OF_PARTIAL_KEY_MATCH: 
0:     Scan is looking for GT the partial key, so position the scan to the
0:     right of any partial key that exactly matches the partial key.
0:     If the scan is GT, then the scan intially wants to position
0:     on {5,2} (one before first qualifying row) - In this case when a partial
0:     match is found we want to return -1 when we hit on {5,1}, {5,2}, and then
0:     return 1 on {6,4}.
0: 
0:     partial_key_match_op =  0: 
0:     Scan does not care where in a set of duplicate partial keys to position 
0:     to (not used currently).
0: 	**/
0:     int partial_key_match_op;
0: 
0: 	/**
0: 	An index row with the correct types for the index,
0: 	into which rows are read during the search.
0: 	Rows are read into the template during a page search, but
0: 	they will be overwritten; there is only one template per
0: 	search.
0: 	**/
0: 	public DataValueDescriptor[] template;
0: 
0: 	/**
0: 	The b-tree this search is for.  Effectively read-only for the
0: 	lifetime of this object.
0: 	**/
0: 	public OpenBTree btree;
0: 
0: 	/**
0: 	The resulting slot from the search.  Updated when the search completes.
0: 	**/
0: 	public int resultSlot;
0: 
0: 	/**
0: 	Whether the row found exactly matched the searchKey.  Updated 
0: 	when the search completes.
0: 	**/
0: 	public boolean resultExact;
0: 
0: 	/**
0: 	Whether the search is for the optimizer, to determine range of scan.
0: 	**/
0: 	public boolean searchForOptimizer;
0: 
0: 	/**
0: 	If this is an optimizer search, the fraction of rows that are left of 
0:     the current search.  When the search completes this number multiplied by
0:     the number of leaf rows in the table is the number of rows left of
0:     the result slot in the search.
0: 	**/
0: 	public float left_fraction;
0: 
0: 	/**
0: 	If this is an optimizer search, the fraction of rows that are "in" the 
0:     the current search.  This number is used as we descend down the tree to 
0:     track the percentage of rows that we think are in the current subtree
0:     defined by all leaf's that can be reached from the current branch.
0: 	**/
0: 	public float current_fraction;
0: 
0: 	/**
0: 	Construct search parameters.
0: 
0:     @exception StandardException Standard exception policy.
0: 	**/
0: 	public SearchParameters(
0:     DataValueDescriptor[]   searchKey, 
0:     int                     partial_key_match_op,
0:     DataValueDescriptor[]   template, 
0:     OpenBTree               btree,
0:     boolean                 searchForOptimizer)
0:         throws StandardException
0: 	{
0: 		this.searchKey              = searchKey;
0: 		this.partial_key_match_op   = partial_key_match_op;
0: 		this.template               = template;
0: 		this.btree                  = btree;
0: 		this.resultSlot             = 0;
0: 		this.resultExact            = false;
0: 		this.searchForOptimizer     = searchForOptimizer;
0: 
0:         if (this.searchForOptimizer)
0:         {
0:             this.left_fraction = 0;
0:             this.current_fraction = 1;
0:         }
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             // RESOLVE - this is ugly but has caught some problems.
0:             SanityManager.ASSERT(partial_key_match_op == -1||
0:                                  partial_key_match_op == 1);
0:         }
0: 	}
0: 
0:     public String toString()
0:     {
0:         if (SanityManager.DEBUG)
0:         {
0:             String string = 
0:                 "key = "      +   RowUtil.toString(searchKey)      + ";" +
0:                 "op = "       +   (partial_key_match_op ==  1 ? "GE" :
0:                                   (partial_key_match_op == -1 ? "GT" :
0:                                    "BAD OP:" + partial_key_match_op)) + ";" +
0:                 "template = " +   RowUtil.toString(template)        + ";" +
0:                 // RESOLVE (mikem) - do we want to print out btree?
0:                 // "btree = " +   btree           + ";" +
0:                 "Slot = "     +   resultSlot      + ";" +
0:                 "Exact = "    +   resultExact     + ";";
0: 
0:             return(string);
0:         }
0:         else
0:         {
0:             return(null);
0:         }
0:     }
0: }
============================================================================