1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.conglomerate;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.ArrayInputStream;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.Storable;
1:eac0369: import org.apache.derby.iapi.services.io.TypedFormat;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.BinaryOrderable;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: The BinaryOrderableWrapper is a wrapper class which intercepts the 
1:eac0369: readExternal() callback made by raw store during a fetch, and does a comparison
1:eac0369: instead.
1:eac0369: **/
1:eac0369: 
1:eac0369: class BinaryOrderableWrapper implements Storable
1:eac0369: {
1:eac0369: 
1:eac0369:     BinaryOrderable    ref_object; 
1:eac0369:     BinaryOrderable    other_object;
1:eac0369:     int                cmp_result;
1:eac0369: 
1:eac0369:     /* Constructors for This class: */
1:eac0369:     BinaryOrderableWrapper()
1:eac0369:     {
1:eac0369:     }
1:eac0369: 
1:eac0369:     /* Private/Protected methods of This class: */
1:eac0369:     /**
1:eac0369:      * Short one line description of routine.
1:eac0369:      * <p>
1:eac0369:      * Longer descrption of routine.
1:eac0369:      * <p>
3:eac0369:      *
1:eac0369:      * @param ref_object    The object that this object is wrapping (ie. being
1:eac0369:      *                      read from disk)
1:eac0369:      * @param other_object  The object to compare ref_object to.
1:eac0369:      **/
1:eac0369:     protected void init (
1:eac0369:     BinaryOrderable ref_object,
1:eac0369:     BinaryOrderable other_object)
1:eac0369:     {
1:eac0369:         this.ref_object     = ref_object;
1:eac0369:         this.other_object   = other_object;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /* Public Methods of This class: */
1:eac0369:     /**
1:eac0369:      * Short one line description of routine.
1:eac0369:      * <p>
1:eac0369:      * Longer descrption of routine.
1:eac0369:      * <p>
1:eac0369:      *
2:eac0369: 	 * @return The identifier to be used to open the conglomerate later.
1:eac0369:      **/
1:eac0369:     public int getCmpResult()
1:eac0369:     {
1:eac0369:         return(this.cmp_result);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /* Public Methods of Storable interface - Externalizable, TypedFormat: 
1:eac0369:     */
1:eac0369: 
1:eac0369: 	public int getTypeFormatId() {
1:eac0369:         // RESOLVE - what should this return?
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.THROWASSERT("If someone calls this it is a problem.");
1:eac0369:         return(((TypedFormat)this.ref_object).getTypeFormatId());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Return whether the value is null or not.
1:eac0369: 	The containerid being zero is what determines nullness;  subclasses
1:eac0369: 	are not expected to override this method.
1:eac0369: 	@see org.apache.derby.iapi.services.io.Storable#isNull
1:eac0369: 	**/
1:eac0369: 	public boolean isNull()
1:eac0369: 	{
1:eac0369:         // RESOLVE - what does it mean for this wrapper to be called isNull()?
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.THROWASSERT("If someone calls this it is a problem.");
1:eac0369:         return(false);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Restore the in-memory representation to the null value.
1:eac0369: 	The containerid being zero is what determines nullness;  subclasses
1:eac0369: 	are not expected to override this method.
1:eac0369: 
1:eac0369: 	@see org.apache.derby.iapi.services.io.Storable#restoreToNull
1:eac0369: 	**/
1:eac0369: 	public void restoreToNull()
1:eac0369: 	{
1:eac0369:         // RESOLVE - base object is null.
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.THROWASSERT("WORK TODO - code up null compare.");
1:eac0369: 
1:eac0369:         return;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Restore the in-memory representation from the stream.
1:eac0369: 
1:eac0369: 	@exception ClassNotFoundException Thrown if the stored representation is
1:eac0369: 	serialized and a class named in the stream could not be found.
1:eac0369: 
1:eac0369:     @exception IOException thrown by readObject()
1:eac0369: 
1:eac0369: 	
1:eac0369: 	@see java.io.Externalizable#readExternal
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369:         throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 
1:eac0369:         // do the read byte by byte and return the comparison 
1:eac0369:         this.cmp_result = this.ref_object.binarycompare(in, this.other_object);
1:eac0369:         
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.THROWASSERT("WORK TODO - code up readExternal.");
1:eac0369: 	}
1:eac0369: 	public void readExternalFromArray(ArrayInputStream in) 
1:eac0369:         throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 
1:eac0369:         // do the read byte by byte and return the comparison 
1:eac0369:         this.cmp_result = this.ref_object.binarycompare(in, this.other_object);
1:eac0369:         
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.THROWASSERT("WORK TODO - code up readExternal.");
1:eac0369: 	}
1:eac0369: 	
1:eac0369:     /**
1:eac0369:      * Store the stored representation of the column value in the stream.
1:eac0369:      * <p>
1:eac0369:      * A BinaryOrderableWrapper is never used to store data out, only to read
1:eac0369:      * data from disk and compare it to another byte stream.
1:eac0369:      *
1:eac0369:      * @param out    Stream to write the object to.
1:eac0369:      *
1:eac0369:      * @exception IOException thrown by writeObject()
1:eac0369:      *
1:eac0369:      **/
1:eac0369: 	public void writeExternal(ObjectOutput out) 
1:eac0369:         throws IOException
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.THROWASSERT("Write should never be called.");
1:eac0369:         return;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:8758a25
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.conglomerate;
1: 
1: 
1: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.io.Storable;
1: import org.apache.derby.iapi.services.io.TypedFormat;
1: 
0: import org.apache.derby.iapi.error.StandardException; 
1: 
1: import org.apache.derby.iapi.store.access.BinaryOrderable;
1: 
0: import java.io.Externalizable;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1: 
1: The BinaryOrderableWrapper is a wrapper class which intercepts the 
1: readExternal() callback made by raw store during a fetch, and does a comparison
1: instead.
1: **/
1: 
1: class BinaryOrderableWrapper implements Storable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:     BinaryOrderable    ref_object; 
1:     BinaryOrderable    other_object;
1:     int                cmp_result;
1: 
1:     /* Constructors for This class: */
1:     BinaryOrderableWrapper()
1:     {
1:     }
1: 
1:     /* Private/Protected methods of This class: */
1:     /**
1:      * Short one line description of routine.
1:      * <p>
1:      * Longer descrption of routine.
1:      * <p>
1:      *
1: 	 * @return The identifier to be used to open the conglomerate later.
1:      *
1:      * @param ref_object    The object that this object is wrapping (ie. being
1:      *                      read from disk)
1:      * @param other_object  The object to compare ref_object to.
1:      **/
1:     protected void init (
1:     BinaryOrderable ref_object,
1:     BinaryOrderable other_object)
1:     {
1:         this.ref_object     = ref_object;
1:         this.other_object   = other_object;
1:     }
1: 
1:     /* Public Methods of This class: */
1:     /**
1:      * Short one line description of routine.
1:      * <p>
1:      * Longer descrption of routine.
1:      * <p>
1:      *
1: 	 * @return The identifier to be used to open the conglomerate later.
1:      *
0:      * @param param1 param1 does this.
0:      * @param param2 param2 does this.
1:      **/
1:     public int getCmpResult()
1:     {
1:         return(this.cmp_result);
1:     }
1: 
1: 
1:     /* Public Methods of Storable interface - Externalizable, TypedFormat: 
1:     */
1: 
1: 	public int getTypeFormatId() {
1:         // RESOLVE - what should this return?
1:         if (SanityManager.DEBUG)
1:             SanityManager.THROWASSERT("If someone calls this it is a problem.");
1:         return(((TypedFormat)this.ref_object).getTypeFormatId());
1: 	}
1: 
1: 	/**
1: 	Return whether the value is null or not.
1: 	The containerid being zero is what determines nullness;  subclasses
1: 	are not expected to override this method.
1: 	@see org.apache.derby.iapi.services.io.Storable#isNull
1: 	**/
1: 	public boolean isNull()
1: 	{
1:         // RESOLVE - what does it mean for this wrapper to be called isNull()?
1:         if (SanityManager.DEBUG)
1:             SanityManager.THROWASSERT("If someone calls this it is a problem.");
1:         return(false);
1: 	}
1: 
1: 	/**
1: 	Restore the in-memory representation to the null value.
1: 	The containerid being zero is what determines nullness;  subclasses
1: 	are not expected to override this method.
1: 
1: 	@see org.apache.derby.iapi.services.io.Storable#restoreToNull
1: 	**/
1: 	public void restoreToNull()
1: 	{
1:         // RESOLVE - base object is null.
1:         if (SanityManager.DEBUG)
1:             SanityManager.THROWASSERT("WORK TODO - code up null compare.");
1: 
1:         return;
1: 	}
1: 
1: 	/**
1: 	Restore the in-memory representation from the stream.
1: 
1: 	@exception ClassNotFoundException Thrown if the stored representation is
1: 	serialized and a class named in the stream could not be found.
1: 
1:     @exception IOException thrown by readObject()
1: 
1: 	
1: 	@see java.io.Externalizable#readExternal
1: 	*/
1: 	public void readExternal(ObjectInput in) 
1:         throws IOException, ClassNotFoundException
1: 	{
1: 
1:         // do the read byte by byte and return the comparison 
1:         this.cmp_result = this.ref_object.binarycompare(in, this.other_object);
1:         
1:         if (SanityManager.DEBUG)
1:             SanityManager.THROWASSERT("WORK TODO - code up readExternal.");
1: 	}
1: 	public void readExternalFromArray(ArrayInputStream in) 
1:         throws IOException, ClassNotFoundException
1: 	{
1: 
1:         // do the read byte by byte and return the comparison 
1:         this.cmp_result = this.ref_object.binarycompare(in, this.other_object);
1:         
1:         if (SanityManager.DEBUG)
1:             SanityManager.THROWASSERT("WORK TODO - code up readExternal.");
1: 	}
1: 	
1:     /**
1:      * Store the stored representation of the column value in the stream.
1:      * <p>
1:      * A BinaryOrderableWrapper is never used to store data out, only to read
1:      * data from disk and compare it to another byte stream.
1:      *
1:      * @param out    Stream to write the object to.
1:      *
1:      * @exception IOException thrown by writeObject()
1:      *
1:      **/
1: 	public void writeExternal(ObjectOutput out) 
1:         throws IOException
1:     {
1:         if (SanityManager.DEBUG)
1:             SanityManager.THROWASSERT("Write should never be called.");
1:         return;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.conglomerate
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.conglomerate;
0: 
0: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.Storable;
0: import org.apache.derby.iapi.services.io.TypedFormat;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.BinaryOrderable;
0: 
0: import java.io.Externalizable;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0: 
0: The BinaryOrderableWrapper is a wrapper class which intercepts the 
0: readExternal() callback made by raw store during a fetch, and does a comparison
0: instead.
0: **/
0: 
0: class BinaryOrderableWrapper implements Storable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:     BinaryOrderable    ref_object; 
0:     BinaryOrderable    other_object;
0:     int                cmp_result;
0: 
0:     /* Constructors for This class: */
0:     BinaryOrderableWrapper()
0:     {
0:     }
0: 
0:     /* Private/Protected methods of This class: */
0:     /**
0:      * Short one line description of routine.
0:      * <p>
0:      * Longer descrption of routine.
0:      * <p>
0:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
0:      *
0:      * @param ref_object    The object that this object is wrapping (ie. being
0:      *                      read from disk)
0:      * @param other_object  The object to compare ref_object to.
0:      **/
0:     protected void init (
0:     BinaryOrderable ref_object,
0:     BinaryOrderable other_object)
0:     {
0:         this.ref_object     = ref_object;
0:         this.other_object   = other_object;
0:     }
0: 
0:     /* Public Methods of This class: */
0:     /**
0:      * Short one line description of routine.
0:      * <p>
0:      * Longer descrption of routine.
0:      * <p>
0:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
0:      *
0:      * @param param1 param1 does this.
0:      * @param param2 param2 does this.
0:      **/
0:     public int getCmpResult()
0:     {
0:         return(this.cmp_result);
0:     }
0: 
0: 
0:     /* Public Methods of Storable interface - Externalizable, TypedFormat: 
0:     */
0: 
0: 	public int getTypeFormatId() {
0:         // RESOLVE - what should this return?
0:         if (SanityManager.DEBUG)
0:             SanityManager.THROWASSERT("If someone calls this it is a problem.");
0:         return(((TypedFormat)this.ref_object).getTypeFormatId());
0: 	}
0: 
0: 	/**
0: 	Return whether the value is null or not.
0: 	The containerid being zero is what determines nullness;  subclasses
0: 	are not expected to override this method.
0: 	@see org.apache.derby.iapi.services.io.Storable#isNull
0: 	**/
0: 	public boolean isNull()
0: 	{
0:         // RESOLVE - what does it mean for this wrapper to be called isNull()?
0:         if (SanityManager.DEBUG)
0:             SanityManager.THROWASSERT("If someone calls this it is a problem.");
0:         return(false);
0: 	}
0: 
0: 	/**
0: 	Restore the in-memory representation to the null value.
0: 	The containerid being zero is what determines nullness;  subclasses
0: 	are not expected to override this method.
0: 
0: 	@see org.apache.derby.iapi.services.io.Storable#restoreToNull
0: 	**/
0: 	public void restoreToNull()
0: 	{
0:         // RESOLVE - base object is null.
0:         if (SanityManager.DEBUG)
0:             SanityManager.THROWASSERT("WORK TODO - code up null compare.");
0: 
0:         return;
0: 	}
0: 
0: 	/**
0: 	Restore the in-memory representation from the stream.
0: 
0: 	@exception ClassNotFoundException Thrown if the stored representation is
0: 	serialized and a class named in the stream could not be found.
0: 
0:     @exception IOException thrown by readObject()
0: 
0: 	
0: 	@see java.io.Externalizable#readExternal
0: 	*/
0: 	public void readExternal(ObjectInput in) 
0:         throws IOException, ClassNotFoundException
0: 	{
0: 
0:         // do the read byte by byte and return the comparison 
0:         this.cmp_result = this.ref_object.binarycompare(in, this.other_object);
0:         
0:         if (SanityManager.DEBUG)
0:             SanityManager.THROWASSERT("WORK TODO - code up readExternal.");
0: 	}
0: 	public void readExternalFromArray(ArrayInputStream in) 
0:         throws IOException, ClassNotFoundException
0: 	{
0: 
0:         // do the read byte by byte and return the comparison 
0:         this.cmp_result = this.ref_object.binarycompare(in, this.other_object);
0:         
0:         if (SanityManager.DEBUG)
0:             SanityManager.THROWASSERT("WORK TODO - code up readExternal.");
0: 	}
0: 	
0:     /**
0:      * Store the stored representation of the column value in the stream.
0:      * <p>
0:      * A BinaryOrderableWrapper is never used to store data out, only to read
0:      * data from disk and compare it to another byte stream.
0:      *
0:      * @param out    Stream to write the object to.
0:      *
0:      * @exception IOException thrown by writeObject()
0:      *
0:      **/
0: 	public void writeExternal(ObjectOutput out) 
0:         throws IOException
0:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.THROWASSERT("Write should never be called.");
0:         return;
0: 	}
0: }
============================================================================