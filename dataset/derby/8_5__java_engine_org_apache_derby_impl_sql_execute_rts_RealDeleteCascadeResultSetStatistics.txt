1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics
1:345de35: 
1:0cc1b09:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0cc1b09:    contributor license agreements.  See the NOTICE file distributed with
1:0cc1b09:    this work for additional information regarding copyright ownership.
1:0cc1b09:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0cc1b09:    (the "License"); you may not use this file except in compliance with
1:0cc1b09:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute.rts;
1:eac0369: 
1:5825332: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
1:36b4892: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1:48a9884: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1:eac0369: 
2:eac0369: /**
1:eac0369:   ResultSetStatistics implemenation for DeleteCascadeResultSet.
1:eac0369: 
1:eac0369: 
1:eac0369: */
1:eac0369: public class RealDeleteCascadeResultSetStatistics 
1:eac0369: 	extends RealDeleteResultSetStatistics
1:eac0369: {
1:eac0369: 
1:36b4892: 	private 	ResultSetStatistics[] 	dependentTrackingArray;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * 
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public	RealDeleteCascadeResultSetStatistics(
1:eac0369: 								int rowCount,
1:eac0369: 								boolean deferred,
1:eac0369: 								int indexesUpdated,
1:eac0369: 								boolean tableLock,
1:eac0369: 								long executeTime,
1:eac0369: 								ResultSetStatistics sourceResultSetStatistics,
1:eac0369: 								ResultSetStatistics[] dependentTrackingArray
1:eac0369: 								)
1:eac0369: 	{
1:eac0369: 		super(rowCount, deferred, indexesUpdated, tableLock, executeTime, sourceResultSetStatistics);
1:3f7581c:         this.dependentTrackingArray = ArrayUtil.copy(dependentTrackingArray);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 	// ResultSetStatistics interface
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the statement execution plan as a String.
1:eac0369: 	 *
1:eac0369: 	 * @param depth	Indentation level.
1:eac0369: 	 *
1:eac0369: 	 * @return String	The statement execution plan as a String.
1:eac0369: 	 */
1:eac0369: 	public String getStatementExecutionPlanText(int depth)
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		String dependentInfo = "";
1:eac0369: 
1:eac0369: 		initFormatInfo(depth);
1:eac0369: 
1:eac0369: 		/* Dump out the statistics for any depedent table for referential actions */
1:eac0369: 		if (dependentTrackingArray != null)
1:eac0369: 		{
1:eac0369: 			boolean	foundAttached = false;
1:eac0369: 
1:eac0369: 			for (int index = 0; index < dependentTrackingArray.length; index++)
1:eac0369: 			{
1:eac0369: 				if (dependentTrackingArray[index] != null)
1:eac0369: 				{
1:eac0369: 					/* Only print referential actions on  dependents message once */
1:eac0369: 					if (! foundAttached)
1:eac0369: 					{
1:eac0369: 						dependentInfo = indent  + "\n" +
1:eac0369: 							MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_REFACTION_DEPENDENT) +
1:eac0369: 								":\n";
1:eac0369: 						foundAttached = true;
1:eac0369: 					}
1:eac0369: 					dependentInfo = dependentInfo +
1:eac0369: 						dependentTrackingArray[index].getStatementExecutionPlanText(sourceDepth);
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return
1:eac0369: 			indent +
1:eac0369: 			  MessageService.getTextMessage(SQLState.RTS_DELETE_CASCADE_RS_USING) +
1:eac0369: 				" " +
1:eac0369: 				MessageService.getTextMessage(
1:eac0369: 					((tableLock) ?
1:eac0369: 						SQLState.RTS_TABLE_LOCKING : SQLState.RTS_ROW_LOCKING))
1:eac0369: 				+ ":\n" +
1:eac0369: 			indent + MessageService.getTextMessage(SQLState.RTS_DEFERRED) +
1:eac0369: 				": " + deferred + "\n" + 
1:eac0369: 			indent +
1:eac0369: 				MessageService.getTextMessage(SQLState.RTS_ROWS_DELETED) +
1:eac0369: 				" = " + rowCount + "\n" +
1:eac0369: 			indent +
1:eac0369: 				MessageService.getTextMessage(SQLState.RTS_INDEXES_UPDATED) +
1:eac0369: 				" = " + indexesUpdated + "\n" + 
1:eac0369: 			dumpTimeStats(indent) + ((sourceResultSetStatistics == null) ? "" :
1:eac0369: 			sourceResultSetStatistics.getStatementExecutionPlanText(1)) +
1:eac0369: 			dependentInfo;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return information on the scan nodes from the statement execution 
1:eac0369: 	 * plan as a String.
1:eac0369: 	 *
1:eac0369: 	 * @param depth	Indentation level.
1:eac0369: 	 * @param tableName if not NULL then print information for this table only
1:eac0369: 	 * @return String	The information on the scan nodes from the 
1:eac0369: 	 *					statement execution plan as a String.
1:eac0369: 	 */
1:eac0369: 	public String getScanStatisticsText(String tableName, int depth)
1:eac0369: 	{
1:eac0369: 		String dependentInfo = "";
1:eac0369: 
1:eac0369: 
1:eac0369: 		/* Dump out the statistics for any depedent table scans for referential actions */
1:eac0369: 		if (dependentTrackingArray != null)
1:eac0369: 		{
1:eac0369: 			for (int index = 0; index < dependentTrackingArray.length; index++)
1:eac0369: 			{
1:eac0369: 				if (dependentTrackingArray[index] != null)
1:eac0369: 				{
1:eac0369: 					dependentInfo = dependentInfo +
1:eac0369: 								   "\n" +
1:eac0369: 									MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_BEGIN_DEPENDENT_NUMBER) +
1:eac0369: 									" " + index + "\n" +
1:eac0369: 						dependentTrackingArray[index].getScanStatisticsText(tableName, depth) +
1:eac0369: 						MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_END_DEPENDENT_NUMBER) +
1:eac0369: 						" " + index + "\n\n";
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return dependentInfo 
1:eac0369: 			+ ((sourceResultSetStatistics == null) ? "" :
1:eac0369: 			   sourceResultSetStatistics.getScanStatisticsText(tableName, depth));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:  
1:eac0369: 	/**
1:eac0369:    * Format for display, a name for this node.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:   public String getNodeName(){
1:eac0369:     return MessageService.getTextMessage(SQLState.RTS_DELETE_CASCADE);
1:eac0369:   }
1:48a9884:   
1:48a9884:   // -----------------------------------------------------
1:48a9884:   // XPLAINable Implementation
1:48a9884:   // -----------------------------------------------------
1:48a9884:   
1:48a9884:     public void accept(XPLAINVisitor visitor) {
1:48a9884:         // compute number of children of this node, which get visited
1:48a9884:         int noChildren = 0;
1:48a9884:         if(this.sourceResultSetStatistics!=null) noChildren++;
1:48a9884:         if(this.dependentTrackingArray!=null){
1:48a9884:             noChildren += dependentTrackingArray.length;
1:48a9884:         }
1:48a9884:         // inform the visitor
1:48a9884:         visitor.setNumberOfChildren(noChildren);
1:48a9884:         
1:48a9884:         // pre-order, depth-first traversal
1:48a9884:         // me first
1:48a9884:         visitor.visit(this);
1:48a9884:         // then my direct child
1:48a9884:         if(sourceResultSetStatistics!=null){
1:48a9884:             sourceResultSetStatistics.accept(visitor);
1:48a9884:         }
1:48a9884:         // and now the dependant resultsets, if there are any
1:48a9884:         if (dependentTrackingArray != null)
1:48a9884:         {
1:48a9884:             boolean foundAttached = false;
1:48a9884: 
1:48a9884:             for (int index = 0; index < dependentTrackingArray.length; index++)
1:48a9884:             {
1:48a9884:                 if (dependentTrackingArray[index] != null)
1:48a9884:                 {
1:48a9884:                     // TODO add additional dependant referential action ?
1:48a9884:                     /*
1:48a9884:                     if (! foundAttached)
1:48a9884:                     {
1:48a9884:                         dependentInfo = indent  + "\n" +
1:48a9884:                             MessageService.getTextMessage(
1:48a9884:                                                 SQLState.RTS_REFACTION_DEPENDENT) +
1:48a9884:                                 ":\n";
1:48a9884:                         foundAttached = true;
1:48a9884:                     }*/
1:48a9884:                     
1:48a9884:                     dependentTrackingArray[index].accept(visitor);
1:48a9884:                 }
1:48a9884:             }
1:48a9884:         }
1:48a9884:         
1:48a9884:         
1:48a9884:     }
1:48a9884: 
1:48a9884:     public String getRSXplainDetails() { return XPLAINUtil.OP_CASCADE; }
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f7581c
/////////////////////////////////////////////////////////////////////////
1:         this.dependentTrackingArray = ArrayUtil.copy(dependentTrackingArray);
commit:5825332
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:36b4892
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
1: 	private 	ResultSetStatistics[] 	dependentTrackingArray;
/////////////////////////////////////////////////////////////////////////
0: 		this.dependentTrackingArray = (ResultSetStatistics[]) ArrayUtil.copy( dependentTrackingArray );
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
/////////////////////////////////////////////////////////////////////////
1:   
1:   // -----------------------------------------------------
1:   // XPLAINable Implementation
1:   // -----------------------------------------------------
1:   
1:     public void accept(XPLAINVisitor visitor) {
1:         // compute number of children of this node, which get visited
1:         int noChildren = 0;
1:         if(this.sourceResultSetStatistics!=null) noChildren++;
1:         if(this.dependentTrackingArray!=null){
1:             noChildren += dependentTrackingArray.length;
1:         }
1:         // inform the visitor
1:         visitor.setNumberOfChildren(noChildren);
1:         
1:         // pre-order, depth-first traversal
1:         // me first
1:         visitor.visit(this);
1:         // then my direct child
1:         if(sourceResultSetStatistics!=null){
1:             sourceResultSetStatistics.accept(visitor);
1:         }
1:         // and now the dependant resultsets, if there are any
1:         if (dependentTrackingArray != null)
1:         {
1:             boolean foundAttached = false;
1: 
1:             for (int index = 0; index < dependentTrackingArray.length; index++)
1:             {
1:                 if (dependentTrackingArray[index] != null)
1:                 {
1:                     // TODO add additional dependant referential action ?
1:                     /*
1:                     if (! foundAttached)
1:                     {
1:                         dependentInfo = indent  + "\n" +
1:                             MessageService.getTextMessage(
1:                                                 SQLState.RTS_REFACTION_DEPENDENT) +
1:                                 ":\n";
1:                         foundAttached = true;
1:                     }*/
1:                     
1:                     dependentTrackingArray[index].accept(visitor);
1:                 }
1:             }
1:         }
1:         
1:         
1:     }
1: 
1:     public String getRSXplainDetails() { return XPLAINUtil.OP_CASCADE; }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:0cc1b09
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: /**
1:   ResultSetStatistics implemenation for DeleteCascadeResultSet.
1: 
0:   @author suresht
1: 
1: */
1: public class RealDeleteCascadeResultSetStatistics 
1: 	extends RealDeleteResultSetStatistics
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
0: 	/* Leave these fields public for object inspectors */
0: 	public 	ResultSetStatistics[] 	dependentTrackingArray;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * 
1: 	 *
1: 	 */
1: 	public	RealDeleteCascadeResultSetStatistics(
1: 								int rowCount,
1: 								boolean deferred,
1: 								int indexesUpdated,
1: 								boolean tableLock,
1: 								long executeTime,
1: 								ResultSetStatistics sourceResultSetStatistics,
1: 								ResultSetStatistics[] dependentTrackingArray
1: 								)
1: 	{
1: 		super(rowCount, deferred, indexesUpdated, tableLock, executeTime, sourceResultSetStatistics);
0: 		this.dependentTrackingArray = dependentTrackingArray;
1: 	}
1: 
1: 
1: 
1: 	// ResultSetStatistics interface
1: 
1: 	/**
1: 	 * Return the statement execution plan as a String.
1: 	 *
1: 	 * @param depth	Indentation level.
1: 	 *
1: 	 * @return String	The statement execution plan as a String.
1: 	 */
1: 	public String getStatementExecutionPlanText(int depth)
1: 	{
1: 
1: 		String dependentInfo = "";
1: 
1: 		initFormatInfo(depth);
1: 
1: 		/* Dump out the statistics for any depedent table for referential actions */
1: 		if (dependentTrackingArray != null)
1: 		{
1: 			boolean	foundAttached = false;
1: 
1: 			for (int index = 0; index < dependentTrackingArray.length; index++)
1: 			{
1: 				if (dependentTrackingArray[index] != null)
1: 				{
1: 					/* Only print referential actions on  dependents message once */
1: 					if (! foundAttached)
1: 					{
1: 						dependentInfo = indent  + "\n" +
1: 							MessageService.getTextMessage(
1: 												SQLState.RTS_REFACTION_DEPENDENT) +
1: 								":\n";
1: 						foundAttached = true;
1: 					}
1: 					dependentInfo = dependentInfo +
1: 						dependentTrackingArray[index].getStatementExecutionPlanText(sourceDepth);
1: 				}
1: 			}
1: 		}
1: 
1: 		return
1: 			indent +
1: 			  MessageService.getTextMessage(SQLState.RTS_DELETE_CASCADE_RS_USING) +
1: 				" " +
1: 				MessageService.getTextMessage(
1: 					((tableLock) ?
1: 						SQLState.RTS_TABLE_LOCKING : SQLState.RTS_ROW_LOCKING))
1: 				+ ":\n" +
1: 			indent + MessageService.getTextMessage(SQLState.RTS_DEFERRED) +
1: 				": " + deferred + "\n" + 
1: 			indent +
1: 				MessageService.getTextMessage(SQLState.RTS_ROWS_DELETED) +
1: 				" = " + rowCount + "\n" +
1: 			indent +
1: 				MessageService.getTextMessage(SQLState.RTS_INDEXES_UPDATED) +
1: 				" = " + indexesUpdated + "\n" + 
1: 			dumpTimeStats(indent) + ((sourceResultSetStatistics == null) ? "" :
1: 			sourceResultSetStatistics.getStatementExecutionPlanText(1)) +
1: 			dependentInfo;
1: 	}
1: 
1: 	/**
1: 	 * Return information on the scan nodes from the statement execution 
1: 	 * plan as a String.
1: 	 *
1: 	 * @param depth	Indentation level.
1: 	 * @param tableName if not NULL then print information for this table only
1: 	 * @return String	The information on the scan nodes from the 
1: 	 *					statement execution plan as a String.
1: 	 */
1: 	public String getScanStatisticsText(String tableName, int depth)
1: 	{
1: 		String dependentInfo = "";
1: 
1: 
1: 		/* Dump out the statistics for any depedent table scans for referential actions */
1: 		if (dependentTrackingArray != null)
1: 		{
1: 			for (int index = 0; index < dependentTrackingArray.length; index++)
1: 			{
1: 				if (dependentTrackingArray[index] != null)
1: 				{
1: 					dependentInfo = dependentInfo +
1: 								   "\n" +
1: 									MessageService.getTextMessage(
1: 												SQLState.RTS_BEGIN_DEPENDENT_NUMBER) +
1: 									" " + index + "\n" +
1: 						dependentTrackingArray[index].getScanStatisticsText(tableName, depth) +
1: 						MessageService.getTextMessage(
1: 												SQLState.RTS_END_DEPENDENT_NUMBER) +
1: 						" " + index + "\n\n";
1: 				}
1: 			}
1: 		}
1: 
1: 		return dependentInfo 
1: 			+ ((sourceResultSetStatistics == null) ? "" :
1: 			   sourceResultSetStatistics.getScanStatisticsText(tableName, depth));
1: 	}
1: 
1: 
1:  
1: 	/**
1:    * Format for display, a name for this node.
1: 	 *
1: 	 */
1:   public String getNodeName(){
1:     return MessageService.getTextMessage(SQLState.RTS_DELETE_CASCADE);
1:   }
1: }
1: 
1: 
1: 
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute.rts;
0: 
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: /**
0:   ResultSetStatistics implemenation for DeleteCascadeResultSet.
0: 
0:   @author suresht
0: 
0: */
0: public class RealDeleteCascadeResultSetStatistics 
0: 	extends RealDeleteResultSetStatistics
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0: 	/* Leave these fields public for object inspectors */
0: 	public 	ResultSetStatistics[] 	dependentTrackingArray;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * 
0: 	 *
0: 	 */
0: 	public	RealDeleteCascadeResultSetStatistics(
0: 								int rowCount,
0: 								boolean deferred,
0: 								int indexesUpdated,
0: 								boolean tableLock,
0: 								long executeTime,
0: 								ResultSetStatistics sourceResultSetStatistics,
0: 								ResultSetStatistics[] dependentTrackingArray
0: 								)
0: 	{
0: 		super(rowCount, deferred, indexesUpdated, tableLock, executeTime, sourceResultSetStatistics);
0: 		this.dependentTrackingArray = dependentTrackingArray;
0: 	}
0: 
0: 
0: 
0: 	// ResultSetStatistics interface
0: 
0: 	/**
0: 	 * Return the statement execution plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 *
0: 	 * @return String	The statement execution plan as a String.
0: 	 */
0: 	public String getStatementExecutionPlanText(int depth)
0: 	{
0: 
0: 		String dependentInfo = "";
0: 
0: 		initFormatInfo(depth);
0: 
0: 		/* Dump out the statistics for any depedent table for referential actions */
0: 		if (dependentTrackingArray != null)
0: 		{
0: 			boolean	foundAttached = false;
0: 
0: 			for (int index = 0; index < dependentTrackingArray.length; index++)
0: 			{
0: 				if (dependentTrackingArray[index] != null)
0: 				{
0: 					/* Only print referential actions on  dependents message once */
0: 					if (! foundAttached)
0: 					{
0: 						dependentInfo = indent  + "\n" +
0: 							MessageService.getTextMessage(
0: 												SQLState.RTS_REFACTION_DEPENDENT) +
0: 								":\n";
0: 						foundAttached = true;
0: 					}
0: 					dependentInfo = dependentInfo +
0: 						dependentTrackingArray[index].getStatementExecutionPlanText(sourceDepth);
0: 				}
0: 			}
0: 		}
0: 
0: 		return
0: 			indent +
0: 			  MessageService.getTextMessage(SQLState.RTS_DELETE_CASCADE_RS_USING) +
0: 				" " +
0: 				MessageService.getTextMessage(
0: 					((tableLock) ?
0: 						SQLState.RTS_TABLE_LOCKING : SQLState.RTS_ROW_LOCKING))
0: 				+ ":\n" +
0: 			indent + MessageService.getTextMessage(SQLState.RTS_DEFERRED) +
0: 				": " + deferred + "\n" + 
0: 			indent +
0: 				MessageService.getTextMessage(SQLState.RTS_ROWS_DELETED) +
0: 				" = " + rowCount + "\n" +
0: 			indent +
0: 				MessageService.getTextMessage(SQLState.RTS_INDEXES_UPDATED) +
0: 				" = " + indexesUpdated + "\n" + 
0: 			dumpTimeStats(indent) + ((sourceResultSetStatistics == null) ? "" :
0: 			sourceResultSetStatistics.getStatementExecutionPlanText(1)) +
0: 			dependentInfo;
0: 	}
0: 
0: 	/**
0: 	 * Return information on the scan nodes from the statement execution 
0: 	 * plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 * @param tableName if not NULL then print information for this table only
0: 	 * @return String	The information on the scan nodes from the 
0: 	 *					statement execution plan as a String.
0: 	 */
0: 	public String getScanStatisticsText(String tableName, int depth)
0: 	{
0: 		String dependentInfo = "";
0: 
0: 
0: 		/* Dump out the statistics for any depedent table scans for referential actions */
0: 		if (dependentTrackingArray != null)
0: 		{
0: 			for (int index = 0; index < dependentTrackingArray.length; index++)
0: 			{
0: 				if (dependentTrackingArray[index] != null)
0: 				{
0: 					dependentInfo = dependentInfo +
0: 								   "\n" +
0: 									MessageService.getTextMessage(
0: 												SQLState.RTS_BEGIN_DEPENDENT_NUMBER) +
0: 									" " + index + "\n" +
0: 						dependentTrackingArray[index].getScanStatisticsText(tableName, depth) +
0: 						MessageService.getTextMessage(
0: 												SQLState.RTS_END_DEPENDENT_NUMBER) +
0: 						" " + index + "\n\n";
0: 				}
0: 			}
0: 		}
0: 
0: 		return dependentInfo 
0: 			+ ((sourceResultSetStatistics == null) ? "" :
0: 			   sourceResultSetStatistics.getScanStatisticsText(tableName, depth));
0: 	}
0: 
0: 
0:  
0: 	/**
0:    * Format for display, a name for this node.
0: 	 *
0: 	 */
0:   public String getNodeName(){
0:     return MessageService.getTextMessage(SQLState.RTS_DELETE_CASCADE);
0:   }
0: }
0: 
0: 
0: 
0: 
0: 
0: 
============================================================================