1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.UnionResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.ResultDescription;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: 
3:eac0369: /**
1:eac0369:  * Takes two result sets and returns their union (all).
1:eac0369:  * (Any duplicate elimination is performed above this ResultSet.)
1:eac0369:  *
1:eac0369:  */
1:f77f36d: class UnionResultSet extends NoPutResultSetImpl
1:eac0369: 	implements CursorResultSet {
1:eac0369: 
1:eac0369: 	/* Run time statistics variables */
1:eac0369: 	public int rowsSeenLeft;
1:eac0369: 	public int rowsSeenRight;
1:eac0369: 	public int rowsReturned;
1:eac0369: 
1:eac0369:     private int whichSource = 1; // 1 or 2, == the source we are currently on.
1:eac0369:     private int source1FinalRowCount = -1;
1:eac0369: 
1:eac0369: 	// these are set in the constructor and never altered
1:eac0369:     public NoPutResultSet source1;
1:eac0369:     public NoPutResultSet source2;
1:f77f36d: 
1:eac0369: 
1:eac0369:     //
1:eac0369:     // class interface
1:eac0369:     //
1:eac0369: 	/*
1:eac0369:      * implementation alternative: an array of sources,
1:eac0369:      * using whichSource to index into the current source.
1:eac0369:      */
1:eac0369:     public UnionResultSet(NoPutResultSet source1, NoPutResultSet source2, 
1:eac0369: 						  Activation activation, 
1:eac0369: 						  int resultSetNumber, 
1:eac0369: 					      double optimizerEstimatedRowCount,
1:f77f36d: 						  double optimizerEstimatedCost) 
1:eac0369: 	{
1:eac0369: 		
1:eac0369: 		super(activation, resultSetNumber, 
1:eac0369: 			  optimizerEstimatedRowCount, optimizerEstimatedCost);
1:eac0369:         this.source1 = source1;
1:eac0369:         this.source2 = source2;
1:7008b63:         recordConstructorTime();
3:eac0369:     }
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// ResultSet interface (leftover from NoPutResultSet)
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:c69c8b0:      * Returns the description of the first source.
1:c69c8b0:      * Assumes the compiler ensured both sources
1:c69c8b0:      * had the same description.
1:c69c8b0: 	 */
1:c69c8b0: 	public ResultDescription getResultDescription() {
1:c69c8b0: 	    return source1.getResultDescription();
1:c69c8b0: 	}
1:c69c8b0: 
1:c69c8b0: 	/**
1:eac0369:      * open the first source.
1:eac0369:  	 *	@exception StandardException thrown on failure
1:eac0369:      */
1:eac0369: 	public void	openCore() throws StandardException 
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 	    	SanityManager.ASSERT( ! isOpen, "UnionResultSet already open");
1:eac0369: 
1:eac0369:         source1.openCore();
1:0a6a846:         isOpen = true;
1:eac0369: 		numOpens++;
1:eac0369: 
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * If there are rows still on the first source, return the
1:eac0369:      * next one; otherwise, switch to the second source and
1:eac0369:      * return a row from there.
1:eac0369:  	 *	@exception StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public ExecRow	getNextRowCore() throws StandardException {
1:2a4654b: 		if( isXplainOnlyMode() )
1:2a4654b: 			return null;
1:2a4654b: 
1:eac0369: 	    ExecRow result = null;
1:eac0369: 
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 	    if ( isOpen ) {
1:eac0369: 	        switch (whichSource) {
1:eac0369: 	            case 1 : result = source1.getNextRowCore();
1:eac0369: 	                     if ( result == (ExecRow) null ) {
1:eac0369: 	                        //source1FinalRowCount = source1.rowCount();
1:eac0369: 	                        source1.close();
1:eac0369: 	                        whichSource = 2;
1:eac0369: 	                        source2.openCore();
1:eac0369: 	                        result = source2.getNextRowCore();
1:eac0369: 							if (result != null)
1:eac0369: 							{
1:eac0369: 								rowsSeenRight++;
1:eac0369: 							}
1:eac0369: 	                     }
1:eac0369: 						 else
1:eac0369: 						 {
1:eac0369: 							 rowsSeenLeft++;
1:eac0369: 						 }
1:eac0369: 	                     break;
1:eac0369: 	            case 2 : result = source2.getNextRowCore();
1:eac0369: 						 if (result != null)
1:eac0369: 						 {
1:eac0369: 							rowsSeenRight++;
1:eac0369: 						 }
1:eac0369: 	                     break;
1:eac0369: 	            default: 
1:eac0369: 					if (SanityManager.DEBUG)
1:eac0369: 						SanityManager.THROWASSERT( "Bad source number in union" );
1:eac0369: 	                break;
1:eac0369: 	        }
1:eac0369: 	    }
1:eac0369: 
1:eac0369: 		setCurrentRow(result);
1:eac0369: 		if (result != null)
1:eac0369: 		{
1:eac0369: 			rowsReturned++;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		nextTime += getElapsedMillis(beginTime);
1:eac0369: 	    return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * If the result set has been opened,
1:eac0369: 	 * close the currently open source.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void	close() throws StandardException
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if ( isOpen ) {
1:eac0369: 
1:eac0369: 			// we don't want to keep around a pointer to the
1:eac0369: 			// row ... so it can be thrown away.
1:eac0369: 			// REVISIT: does this need to be in a finally
1:eac0369: 			// block, to ensure that it is executed?
1:eac0369: 	    	clearCurrentRow();
1:f77f36d: 
1:eac0369: 	        switch (whichSource) {
1:eac0369: 	            case 1 : source1.close();
1:eac0369: 	                     break;
1:eac0369: 	            case 2 : source2.close();
1:eac0369: 	                     source1FinalRowCount = -1;
1:eac0369: 	                     whichSource = 1;
1:eac0369: 	                     break;
1:eac0369: 	            default: 
1:eac0369: 					if (SanityManager.DEBUG)
1:eac0369: 						SanityManager.THROWASSERT( "Bad source number in union" );
1:eac0369: 	                break;
1:eac0369: 	        }
1:eac0369: 
1:eac0369: 			super.close();
1:eac0369: 	    }
1:eac0369: 		else
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 				SanityManager.DEBUG("CloseRepeatInfo","Close of UnionResultSet repeated");
1:eac0369: 
1:eac0369: 		closeTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void	finish() throws StandardException
1:eac0369: 	{
1:eac0369: 		source1.finish();
1:eac0369: 		source2.finish();
1:eac0369: 		finishAndRTS();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the total amount of time spent in this ResultSet
1:eac0369: 	 *
1:eac0369: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:eac0369: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:eac0369: 	 *
1:eac0369: 	 * @return long		The total amount of time spent (in milliseconds).
1:eac0369: 	 */
1:eac0369: 	public long getTimeSpent(int type)
1:eac0369: 	{
1:eac0369: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1:eac0369: 
1:eac0369: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1:eac0369: 		{
1:eac0369: 			return	totTime - source1.getTimeSpent(ENTIRE_RESULTSET_TREE) -
1:eac0369: 							  source2.getTimeSpent(ENTIRE_RESULTSET_TREE);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return totTime;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// CursorResultSet interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		A union has a single underlying row at a time, although
1:eac0369: 		from one of several sources.
1:eac0369: 	
1:eac0369: 		@see CursorResultSet
1:eac0369: 	 
1:eac0369: 		@return the row location of the current cursor row.
1:eac0369: 		@exception StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public RowLocation getRowLocation() throws StandardException {
1:eac0369: 	    switch (whichSource) {
1:eac0369: 	        case 1 : 
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 					SanityManager.ASSERT(source1 instanceof CursorResultSet, "source not CursorResultSet");
1:eac0369: 				return ((CursorResultSet)source1).getRowLocation();
1:eac0369: 	        case 2 : 
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 					SanityManager.ASSERT(source2 instanceof CursorResultSet, "source2 not CursorResultSet");
1:eac0369: 				return ((CursorResultSet)source2).getRowLocation();
1:eac0369: 	        default: 
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 					SanityManager.THROWASSERT( "Bad source number in union" );
1:eac0369: 	            return null;
1:eac0369: 	    }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		A union has a single underlying row at a time, although
1:eac0369: 		from one of several sources.
1:eac0369: 	
1:eac0369: 		@see CursorResultSet
1:eac0369: 	 
1:eac0369: 		@return the current row.
1:eac0369: 	 * @exception StandardException thrown on failure.
1:eac0369: 	 */
1:eac0369: 	/* RESOLVE - this should return activation.getCurrentRow(resultSetNumber),
1:eac0369: 	 * once there is such a method.  (currentRow is redundant)
1:eac0369: 	 */
1:eac0369: 	public ExecRow getCurrentRow() throws StandardException{
1:eac0369: 	    ExecRow result = null;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(isOpen, "TSRS expected to be open");
1:eac0369: 			if (!(whichSource == 1 || whichSource == 2))
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("whichSource expected to be 1 or 2, not " 
1:eac0369: 					+ whichSource);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	    switch (whichSource) 
1:eac0369: 		{
1:eac0369: 	        case 1: 
1:eac0369: 				result = ((CursorResultSet) source1).getCurrentRow();
1:eac0369: 	            break;
1:eac0369: 
1:eac0369: 	        case 2: 
1:eac0369: 				result = ((CursorResultSet) source2).getCurrentRow();
1:eac0369: 	            break;
1:eac0369:         }
1:eac0369: 
1:eac0369: 		setCurrentRow(result);
1:eac0369: 	    return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 		if( isXplainOnlyMode() )
1: 			return null;
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a280beb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c69c8b0
/////////////////////////////////////////////////////////////////////////
1:      * Returns the description of the first source.
1:      * Assumes the compiler ensured both sources
1:      * had the same description.
1: 	 */
1: 	public ResultDescription getResultDescription() {
1: 	    return source1.getResultDescription();
1: 	}
1: 
1: 	/**
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0a6a846
/////////////////////////////////////////////////////////////////////////
1:         isOpen = true;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4e784bb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4ef8621
/////////////////////////////////////////////////////////////////////////
commit:7008b63
/////////////////////////////////////////////////////////////////////////
1:         recordConstructorTime();
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
1: class UnionResultSet extends NoPutResultSetImpl
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 						  double optimizerEstimatedCost) 
/////////////////////////////////////////////////////////////////////////
1: 
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.UnionResultSet
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
1: 
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
1: import org.apache.derby.iapi.sql.ResultDescription;
1: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: 
1: /**
1:  * Takes two result sets and returns their union (all).
1:  * (Any duplicate elimination is performed above this ResultSet.)
1:  *
0:  * @author ames
1:  */
0: public class UnionResultSet extends NoPutResultSetImpl
1: 	implements CursorResultSet {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/* Run time statistics variables */
1: 	public int rowsSeenLeft;
1: 	public int rowsSeenRight;
1: 	public int rowsReturned;
1: 
1:     private int whichSource = 1; // 1 or 2, == the source we are currently on.
1:     private int source1FinalRowCount = -1;
1: 
1: 	// these are set in the constructor and never altered
1:     public NoPutResultSet source1;
1:     public NoPutResultSet source2;
0:     protected GeneratedMethod closeCleanup;
1: 
1:     //
1:     // class interface
1:     //
1: 	/*
1:      * implementation alternative: an array of sources,
1:      * using whichSource to index into the current source.
1:      */
1:     public UnionResultSet(NoPutResultSet source1, NoPutResultSet source2, 
1: 						  Activation activation, 
1: 						  int resultSetNumber, 
1: 					      double optimizerEstimatedRowCount,
0: 						  double optimizerEstimatedCost,
0: 						  GeneratedMethod closeCleanup) 
1: 	{
1: 		
1: 		super(activation, resultSetNumber, 
1: 			  optimizerEstimatedRowCount, optimizerEstimatedCost);
1:         this.source1 = source1;
1:         this.source2 = source2;
0: 		this.closeCleanup = closeCleanup;
0: 		constructorTime += getElapsedMillis(beginTime);
1:     }
1: 
1: 	//
1: 	// ResultSet interface (leftover from NoPutResultSet)
1: 	//
1: 
1: 	/**
0:      * Returns the description of the first source.
0:      * Assumes the compiler ensured both sources
0:      * had the same description.
1: 	 */
0: 	public ResultDescription getResultDescription() {
0: 	    return source1.getResultDescription();
1: 	}
1: 
1: 	/**
1:      * open the first source.
1:  	 *	@exception StandardException thrown on failure
1:      */
1: 	public void	openCore() throws StandardException 
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 		if (SanityManager.DEBUG)
1: 	    	SanityManager.ASSERT( ! isOpen, "UnionResultSet already open");
1: 
0:         isOpen = true;
1:         source1.openCore();
1: 		numOpens++;
1: 
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/**
1:      * If there are rows still on the first source, return the
1:      * next one; otherwise, switch to the second source and
1:      * return a row from there.
1:  	 *	@exception StandardException thrown on failure
1: 	 */
1: 	public ExecRow	getNextRowCore() throws StandardException {
1: 	    ExecRow result = null;
1: 
1: 		beginTime = getCurrentTimeMillis();
1: 	    if ( isOpen ) {
1: 	        switch (whichSource) {
1: 	            case 1 : result = source1.getNextRowCore();
1: 	                     if ( result == (ExecRow) null ) {
1: 	                        //source1FinalRowCount = source1.rowCount();
1: 	                        source1.close();
1: 	                        whichSource = 2;
1: 	                        source2.openCore();
1: 	                        result = source2.getNextRowCore();
1: 							if (result != null)
1: 							{
1: 								rowsSeenRight++;
1: 							}
1: 	                     }
1: 						 else
1: 						 {
1: 							 rowsSeenLeft++;
1: 						 }
1: 	                     break;
1: 	            case 2 : result = source2.getNextRowCore();
1: 						 if (result != null)
1: 						 {
1: 							rowsSeenRight++;
1: 						 }
1: 	                     break;
1: 	            default: 
1: 					if (SanityManager.DEBUG)
1: 						SanityManager.THROWASSERT( "Bad source number in union" );
1: 	                break;
1: 	        }
1: 	    }
1: 
0: 		currentRow = result;
1: 		setCurrentRow(result);
1: 		if (result != null)
1: 		{
1: 			rowsReturned++;
1: 		}
1: 
1: 		nextTime += getElapsedMillis(beginTime);
1: 	    return result;
1: 	}
1: 
1: 	/**
1: 	 * If the result set has been opened,
1: 	 * close the currently open source.
1: 	 *
1: 	 * @exception StandardException thrown on error
1: 	 */
1: 	public void	close() throws StandardException
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 		if ( isOpen ) {
0: 			if (closeCleanup != null) {
0: 				closeCleanup.invoke(activation); // let activation tidy up
1: 			}
1: 
1: 			// we don't want to keep around a pointer to the
1: 			// row ... so it can be thrown away.
1: 			// REVISIT: does this need to be in a finally
1: 			// block, to ensure that it is executed?
1: 	    	clearCurrentRow();
0: 			currentRow = null;
1: 	        switch (whichSource) {
1: 	            case 1 : source1.close();
1: 	                     break;
1: 	            case 2 : source2.close();
1: 	                     source1FinalRowCount = -1;
1: 	                     whichSource = 1;
1: 	                     break;
1: 	            default: 
1: 					if (SanityManager.DEBUG)
1: 						SanityManager.THROWASSERT( "Bad source number in union" );
1: 	                break;
1: 	        }
1: 
1: 			super.close();
1: 	    }
1: 		else
1: 			if (SanityManager.DEBUG)
1: 				SanityManager.DEBUG("CloseRepeatInfo","Close of UnionResultSet repeated");
1: 
1: 		closeTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	public void	finish() throws StandardException
1: 	{
1: 		source1.finish();
1: 		source2.finish();
1: 		finishAndRTS();
1: 	}
1: 
1: 
1: 	/**
1: 	 * Return the total amount of time spent in this ResultSet
1: 	 *
1: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1: 	 *
1: 	 * @return long		The total amount of time spent (in milliseconds).
1: 	 */
1: 	public long getTimeSpent(int type)
1: 	{
1: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1: 
1: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1: 		{
1: 			return	totTime - source1.getTimeSpent(ENTIRE_RESULTSET_TREE) -
1: 							  source2.getTimeSpent(ENTIRE_RESULTSET_TREE);
1: 		}
1: 		else
1: 		{
1: 			return totTime;
1: 		}
1: 	}
1: 
1: 	//
1: 	// CursorResultSet interface
1: 	//
1: 
1: 	/**
1: 		A union has a single underlying row at a time, although
1: 		from one of several sources.
1: 	
1: 		@see CursorResultSet
1: 	 
1: 		@return the row location of the current cursor row.
1: 		@exception StandardException thrown on failure
1: 	 */
1: 	public RowLocation getRowLocation() throws StandardException {
1: 	    switch (whichSource) {
1: 	        case 1 : 
1: 				if (SanityManager.DEBUG)
1: 					SanityManager.ASSERT(source1 instanceof CursorResultSet, "source not CursorResultSet");
1: 				return ((CursorResultSet)source1).getRowLocation();
1: 	        case 2 : 
1: 				if (SanityManager.DEBUG)
1: 					SanityManager.ASSERT(source2 instanceof CursorResultSet, "source2 not CursorResultSet");
1: 				return ((CursorResultSet)source2).getRowLocation();
1: 	        default: 
1: 				if (SanityManager.DEBUG)
1: 					SanityManager.THROWASSERT( "Bad source number in union" );
1: 	            return null;
1: 	    }
1: 	}
1: 
1: 	/**
1: 		A union has a single underlying row at a time, although
1: 		from one of several sources.
1: 	
1: 		@see CursorResultSet
1: 	 
1: 		@return the current row.
1: 	 * @exception StandardException thrown on failure.
1: 	 */
1: 	/* RESOLVE - this should return activation.getCurrentRow(resultSetNumber),
1: 	 * once there is such a method.  (currentRow is redundant)
1: 	 */
1: 	public ExecRow getCurrentRow() throws StandardException{
1: 	    ExecRow result = null;
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(isOpen, "TSRS expected to be open");
1: 			if (!(whichSource == 1 || whichSource == 2))
1: 			{
1: 				SanityManager.THROWASSERT("whichSource expected to be 1 or 2, not " 
1: 					+ whichSource);
1: 			}
1: 		}
1: 
1: 	    switch (whichSource) 
1: 		{
1: 	        case 1: 
1: 				result = ((CursorResultSet) source1).getCurrentRow();
1: 	            break;
1: 
1: 	        case 2: 
1: 				result = ((CursorResultSet) source2).getCurrentRow();
1: 	            break;
1:         }
1: 
1: 
0: 		currentRow = result;
1: 		setCurrentRow(result);
1: 	    return result;
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: 
0: /**
0:  * Takes two result sets and returns their union (all).
0:  * (Any duplicate elimination is performed above this ResultSet.)
0:  *
0:  * @author ames
0:  */
0: public class UnionResultSet extends NoPutResultSetImpl
0: 	implements CursorResultSet {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/* Run time statistics variables */
0: 	public int rowsSeenLeft;
0: 	public int rowsSeenRight;
0: 	public int rowsReturned;
0: 
0:     private int whichSource = 1; // 1 or 2, == the source we are currently on.
0:     private int source1FinalRowCount = -1;
0: 
0: 	// these are set in the constructor and never altered
0:     public NoPutResultSet source1;
0:     public NoPutResultSet source2;
0:     protected GeneratedMethod closeCleanup;
0: 
0:     //
0:     // class interface
0:     //
0: 	/*
0:      * implementation alternative: an array of sources,
0:      * using whichSource to index into the current source.
0:      */
0:     public UnionResultSet(NoPutResultSet source1, NoPutResultSet source2, 
0: 						  Activation activation, 
0: 						  int resultSetNumber, 
0: 					      double optimizerEstimatedRowCount,
0: 						  double optimizerEstimatedCost,
0: 						  GeneratedMethod closeCleanup) 
0: 	{
0: 		
0: 		super(activation, resultSetNumber, 
0: 			  optimizerEstimatedRowCount, optimizerEstimatedCost);
0:         this.source1 = source1;
0:         this.source2 = source2;
0: 		this.closeCleanup = closeCleanup;
0: 		constructorTime += getElapsedMillis(beginTime);
0:     }
0: 
0: 	//
0: 	// ResultSet interface (leftover from NoPutResultSet)
0: 	//
0: 
0: 	/**
0:      * Returns the description of the first source.
0:      * Assumes the compiler ensured both sources
0:      * had the same description.
0: 	 */
0: 	public ResultDescription getResultDescription() {
0: 	    return source1.getResultDescription();
0: 	}
0: 
0: 	/**
0:      * open the first source.
0:  	 *	@exception StandardException thrown on failure
0:      */
0: 	public void	openCore() throws StandardException 
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 		if (SanityManager.DEBUG)
0: 	    	SanityManager.ASSERT( ! isOpen, "UnionResultSet already open");
0: 
0:         isOpen = true;
0:         source1.openCore();
0: 		numOpens++;
0: 
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0:      * If there are rows still on the first source, return the
0:      * next one; otherwise, switch to the second source and
0:      * return a row from there.
0:  	 *	@exception StandardException thrown on failure
0: 	 */
0: 	public ExecRow	getNextRowCore() throws StandardException {
0: 	    ExecRow result = null;
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 	    if ( isOpen ) {
0: 	        switch (whichSource) {
0: 	            case 1 : result = source1.getNextRowCore();
0: 	                     if ( result == (ExecRow) null ) {
0: 	                        //source1FinalRowCount = source1.rowCount();
0: 	                        source1.close();
0: 	                        whichSource = 2;
0: 	                        source2.openCore();
0: 	                        result = source2.getNextRowCore();
0: 							if (result != null)
0: 							{
0: 								rowsSeenRight++;
0: 							}
0: 	                     }
0: 						 else
0: 						 {
0: 							 rowsSeenLeft++;
0: 						 }
0: 	                     break;
0: 	            case 2 : result = source2.getNextRowCore();
0: 						 if (result != null)
0: 						 {
0: 							rowsSeenRight++;
0: 						 }
0: 	                     break;
0: 	            default: 
0: 					if (SanityManager.DEBUG)
0: 						SanityManager.THROWASSERT( "Bad source number in union" );
0: 	                break;
0: 	        }
0: 	    }
0: 
0: 		currentRow = result;
0: 		setCurrentRow(result);
0: 		if (result != null)
0: 		{
0: 			rowsReturned++;
0: 		}
0: 
0: 		nextTime += getElapsedMillis(beginTime);
0: 	    return result;
0: 	}
0: 
0: 	/**
0: 	 * If the result set has been opened,
0: 	 * close the currently open source.
0: 	 *
0: 	 * @exception StandardException thrown on error
0: 	 */
0: 	public void	close() throws StandardException
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 		if ( isOpen ) {
0: 			if (closeCleanup != null) {
0: 				closeCleanup.invoke(activation); // let activation tidy up
0: 			}
0: 
0: 			// we don't want to keep around a pointer to the
0: 			// row ... so it can be thrown away.
0: 			// REVISIT: does this need to be in a finally
0: 			// block, to ensure that it is executed?
0: 	    	clearCurrentRow();
0: 			currentRow = null;
0: 	        switch (whichSource) {
0: 	            case 1 : source1.close();
0: 	                     break;
0: 	            case 2 : source2.close();
0: 	                     source1FinalRowCount = -1;
0: 	                     whichSource = 1;
0: 	                     break;
0: 	            default: 
0: 					if (SanityManager.DEBUG)
0: 						SanityManager.THROWASSERT( "Bad source number in union" );
0: 	                break;
0: 	        }
0: 
0: 			super.close();
0: 	    }
0: 		else
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.DEBUG("CloseRepeatInfo","Close of UnionResultSet repeated");
0: 
0: 		closeTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	public void	finish() throws StandardException
0: 	{
0: 		source1.finish();
0: 		source2.finish();
0: 		finishAndRTS();
0: 	}
0: 
0: 
0: 	/**
0: 	 * Return the total amount of time spent in this ResultSet
0: 	 *
0: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
0: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
0: 	 *
0: 	 * @return long		The total amount of time spent (in milliseconds).
0: 	 */
0: 	public long getTimeSpent(int type)
0: 	{
0: 		long totTime = constructorTime + openTime + nextTime + closeTime;
0: 
0: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
0: 		{
0: 			return	totTime - source1.getTimeSpent(ENTIRE_RESULTSET_TREE) -
0: 							  source2.getTimeSpent(ENTIRE_RESULTSET_TREE);
0: 		}
0: 		else
0: 		{
0: 			return totTime;
0: 		}
0: 	}
0: 
0: 	//
0: 	// CursorResultSet interface
0: 	//
0: 
0: 	/**
0: 		A union has a single underlying row at a time, although
0: 		from one of several sources.
0: 	
0: 		@see CursorResultSet
0: 	 
0: 		@return the row location of the current cursor row.
0: 		@exception StandardException thrown on failure
0: 	 */
0: 	public RowLocation getRowLocation() throws StandardException {
0: 	    switch (whichSource) {
0: 	        case 1 : 
0: 				if (SanityManager.DEBUG)
0: 					SanityManager.ASSERT(source1 instanceof CursorResultSet, "source not CursorResultSet");
0: 				return ((CursorResultSet)source1).getRowLocation();
0: 	        case 2 : 
0: 				if (SanityManager.DEBUG)
0: 					SanityManager.ASSERT(source2 instanceof CursorResultSet, "source2 not CursorResultSet");
0: 				return ((CursorResultSet)source2).getRowLocation();
0: 	        default: 
0: 				if (SanityManager.DEBUG)
0: 					SanityManager.THROWASSERT( "Bad source number in union" );
0: 	            return null;
0: 	    }
0: 	}
0: 
0: 	/**
0: 		A union has a single underlying row at a time, although
0: 		from one of several sources.
0: 	
0: 		@see CursorResultSet
0: 	 
0: 		@return the current row.
0: 	 * @exception StandardException thrown on failure.
0: 	 */
0: 	/* RESOLVE - this should return activation.getCurrentRow(resultSetNumber),
0: 	 * once there is such a method.  (currentRow is redundant)
0: 	 */
0: 	public ExecRow getCurrentRow() throws StandardException{
0: 	    ExecRow result = null;
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(isOpen, "TSRS expected to be open");
0: 			if (!(whichSource == 1 || whichSource == 2))
0: 			{
0: 				SanityManager.THROWASSERT("whichSource expected to be 1 or 2, not " 
0: 					+ whichSource);
0: 			}
0: 		}
0: 
0: 	    switch (whichSource) 
0: 		{
0: 	        case 1: 
0: 				result = ((CursorResultSet) source1).getCurrentRow();
0: 	            break;
0: 
0: 	        case 2: 
0: 				result = ((CursorResultSet) source2).getCurrentRow();
0: 	            break;
0:         }
0: 
0: 
0: 		currentRow = result;
0: 		setCurrentRow(result);
0: 	    return result;
0: 	}
0: 
0: }
============================================================================