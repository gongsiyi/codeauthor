1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.Loggable
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.OutputStream;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A Loggable is a record of a change of state or an event that happened 
1:eac0369: 	in the RawStore in the context of a transaction.
1:eac0369: 	All changes in the RawStore must be logged.
1:eac0369: 
1:eac0369: 	This is the root class for all log operations.
1:eac0369: 
1:eac0369: 	@see Transaction#logAndDo
1:eac0369: */
1:eac0369: 
1:76addbc: public interface Loggable extends Formatable {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Apply the change indicated by this operation and optional data.
1:eac0369: 
1:eac0369: 		<B>If this method fail, the system will be shut down because the log
1:eac0369: 		record has already been written to disk.  Moreover, the log record will
1:eac0369: 		be replayed during recovery and this doMe method will be called on the
1:eac0369: 		same page again, so if it fails again, recovery will fail and the
1:eac0369: 		database cannot be started.  So it is very important to make sure that
1:eac0369: 		every resource you need, such as disk space, has been acquired before
1:eac0369: 		the logAndDo method is called! </B>
1:eac0369: 
1:eac0369: 		<BR>This method cannot acquire any resource (like latching of a page)
1:eac0369: 		since it is called underneath the logging system, ie., the log record has
1:eac0369: 		already been written to the log stream.
1:eac0369: 
1:eac0369: 		<P> The available() method of in indicates how much data can be read, i.e.
1:eac0369: 		how much was originally written.
1:eac0369: 
1:eac0369: 		@param xact			the Transaction
1:eac0369: 		@param instant		the log instant of this operation
1:eac0369: 		@param in			optional data
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of in.
1:3fd26f3: 		@exception StandardException Standard Derby policy.
1:eac0369: 	*/
1:eac0369: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The log operations are responsible to create the ByteArray, and the log
1:12c6ed9: 		operations should write out any optional data for the change to the 
1:12c6ed9:         ByteArray.
1:eac0369: 		The ByteArray can be prepared when the log operation is constructed,
1:eac0369: 		or it can be prepared when getPreparedLog() is called.
1:eac0369: 
1:eac0369: 		Called by the log manager to allow the log operation to pass the buffer
1:12c6ed9: 		which contains optional data that will be available in to doMe() 
1:12c6ed9:         methods.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby policy.
1:eac0369: 	
1:eac0369: 	*/
1:eac0369: 	public ByteArray getPreparedLog() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	    Determine if the operation should be reapplied in recovery redo.
1:eac0369: 		If redo is needed, acquire any resource that is necessary for the
1:eac0369: 		loggable's doMe method.  These need to be released in the
1:eac0369: 		releaseResource method.
1:eac0369: 
1:eac0369: 		<P> The sequence of events in recovery redo of a Loggable operation is:
1:eac0369: 		<NL>
1:eac0369: 		<LI> Get the loggable operation.  If loggable.needsRedo is false, then
1:eac0369: 		no need to redo this operation.
1:eac0369: 		<LI> If loggable.needsRedo is true, all the resources necessary for
1:eac0369: 		applying the doMe is acquired in needsRedo.
1:eac0369: 		<LI> If the loggable is actually a compensation operation, then the
1:eac0369: 		logging system will find the undoable operation that needs to be
1:eac0369: 		undone, call compensation.setUndoOp with the undoable operation.
1:eac0369: 		<LI> The recovery system then calls loggable.doMe, which re-applies the
1:eac0369: 		loggable operation, or re-applies the compensation operation
1:eac0369: 		<LI> The recovery system then calls loggable.releaseResource.
1:eac0369: 		</NL>
1:eac0369: 
1:eac0369: 		@param xact		The transaction trying to redo this operation
1:eac0369: 		@return true if operation needs redoing, false if not.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby policy.
1:eac0369: 
1:eac0369: 		@see Loggable#releaseResource
1:eac0369: 	*/
1:eac0369: 	public boolean needsRedo(Transaction xact) throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Release any resource that was acquired for doMe for rollback or
1:eac0369: 		recovery redo.
1:eac0369: 
1:eac0369: 		This resource is acquired in either generateUndo (if this is a
1:eac0369: 		compensation operation during run time rollback or recovery rollback)
1:eac0369: 		or in needsRedo (if this is during recovery redo).  The run time
1:eac0369: 		transaction context should have all the resource already acquird for
1:eac0369: 		run time roll forward, so there is no need to releaseResource during
1:eac0369: 		run time roll forward.
1:eac0369: 
1:eac0369: 		This method must be safe to be called multiple times.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public void releaseResource(Transaction xact);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Each loggable belongs to one or more groups of similar functionality.
1:eac0369: 
1:eac0369: 		Grouping is a way to quickly sort out log records that are interesting
1:eac0369: 		to different modules or different implementations.
1:eac0369: 
1:eac0369: 		When a module makes loggable and sent it to the log file, it must mark
1:eac0369: 		this loggable with one or more of the following group. 
1:eac0369: 		If none fit, or if the loggable encompasses functionality that is not
1:eac0369: 		described in existing groups, then a new group should be introduced.  
1:eac0369: 
1:eac0369: 		Grouping has no effect on how the record is logged or how it is treated
1:eac0369: 		in rollback or recovery.
1:eac0369: 
1:eac0369: 		The following groups are defined. This list serves as the registry of
1:eac0369: 		all loggable groups.
1:eac0369: 	*/
1:eac0369: 	public static final int FIRST = 			0x1;	// the first operation of a transaction
1:eac0369: 	public static final int LAST = 				0x2;	// the last operation of a transaction
1:eac0369: 	public static final int COMPENSATION = 		0x4;	// a compensation log record
1:eac0369: 	public static final int BI_LOG = 			0x8;	// a BeforeImage log record
1:eac0369: 	public static final int COMMIT =		   0x10; 	// the transaction committed
1:eac0369: 	public static final int ABORT =			   0x20; 	// the transaction aborted
1:eac0369: 	public static final int PREPARE =		   0x40; 	// the transaction prepared
1:eac0369: 	public static final int XA_NEEDLOCK =	   0x80; 	// need to reclaim locks associated with theis log record during XA prepared xact recovery
1:eac0369: 
1:eac0369: 
1:eac0369: 	public static final int RAWSTORE =		  0x100;	// a log record generated by the raw store
1:eac0369: 	public static final int FILE_RESOURCE =   0x400;    // related to "non-transactional" files.
1:d609ee3: 	public static final int CHECKSUM =        0x800;    // a checksum log record 
1:d609ee3: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the loggable's group value
1:eac0369: 	*/
1:eac0369: 	public int group();
1:eac0369: 
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:12c6ed9
/////////////////////////////////////////////////////////////////////////
1: 		operations should write out any optional data for the change to the 
1:         ByteArray.
1: 		which contains optional data that will be available in to doMe() 
1:         methods.
commit:d609ee3
/////////////////////////////////////////////////////////////////////////
1: 	public static final int CHECKSUM =        0x800;    // a checksum log record 
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.Loggable
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
1: public interface Loggable extends Formatable {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw;
1: 
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.util.ByteArray;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: 
1: /**
1: 	A Loggable is a record of a change of state or an event that happened 
1: 	in the RawStore in the context of a transaction.
1: 	All changes in the RawStore must be logged.
1: 
1: 	This is the root class for all log operations.
1: 
1: 	@see Transaction#logAndDo
1: */
1: 
0: public interface Loggable extends Formatable { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 		Apply the change indicated by this operation and optional data.
1: 
1: 		<B>If this method fail, the system will be shut down because the log
1: 		record has already been written to disk.  Moreover, the log record will
1: 		be replayed during recovery and this doMe method will be called on the
1: 		same page again, so if it fails again, recovery will fail and the
1: 		database cannot be started.  So it is very important to make sure that
1: 		every resource you need, such as disk space, has been acquired before
1: 		the logAndDo method is called! </B>
1: 
1: 		<BR>This method cannot acquire any resource (like latching of a page)
1: 		since it is called underneath the logging system, ie., the log record has
1: 		already been written to the log stream.
1: 
1: 		<P> The available() method of in indicates how much data can be read, i.e.
1: 		how much was originally written.
1: 
1: 		@param xact			the Transaction
1: 		@param instant		the log instant of this operation
1: 		@param in			optional data
1: 
1: 		@exception IOException Can be thrown by any of the methods of in.
0: 		@exception StandardException Standard Cloudscape policy.
1: 	*/
1: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1: 		 throws StandardException, IOException;
1: 
1: 	/**
1: 		The log operations are responsible to create the ByteArray, and the log
0: 		operations should write out any optional data for the change to the ByteArray.
1: 		The ByteArray can be prepared when the log operation is constructed,
1: 		or it can be prepared when getPreparedLog() is called.
1: 
1: 		Called by the log manager to allow the log operation to pass the buffer
0: 		which contains optional data that will be available in to doMe() methods.
1: 
0: 		@param out Where and how to write to optional data.
1: 
0: 		@exception StandardException Standard Cloudscape policy.
1: 	
1: 	*/
1: 	public ByteArray getPreparedLog() throws StandardException;
1: 
1: 	/**
1: 	    Determine if the operation should be reapplied in recovery redo.
1: 		If redo is needed, acquire any resource that is necessary for the
1: 		loggable's doMe method.  These need to be released in the
1: 		releaseResource method.
1: 
1: 		<P> The sequence of events in recovery redo of a Loggable operation is:
1: 		<NL>
1: 		<LI> Get the loggable operation.  If loggable.needsRedo is false, then
1: 		no need to redo this operation.
1: 		<LI> If loggable.needsRedo is true, all the resources necessary for
1: 		applying the doMe is acquired in needsRedo.
1: 		<LI> If the loggable is actually a compensation operation, then the
1: 		logging system will find the undoable operation that needs to be
1: 		undone, call compensation.setUndoOp with the undoable operation.
1: 		<LI> The recovery system then calls loggable.doMe, which re-applies the
1: 		loggable operation, or re-applies the compensation operation
1: 		<LI> The recovery system then calls loggable.releaseResource.
1: 		</NL>
1: 
1: 		@param xact		The transaction trying to redo this operation
1: 		@return true if operation needs redoing, false if not.
1: 
0: 		@exception StandardException Standard Cloudscape policy.
1: 
1: 		@see Loggable#releaseResource
1: 	*/
1: 	public boolean needsRedo(Transaction xact) throws StandardException;
1: 
1: 
1: 	/**
1: 		Release any resource that was acquired for doMe for rollback or
1: 		recovery redo.
1: 
1: 		This resource is acquired in either generateUndo (if this is a
1: 		compensation operation during run time rollback or recovery rollback)
1: 		or in needsRedo (if this is during recovery redo).  The run time
1: 		transaction context should have all the resource already acquird for
1: 		run time roll forward, so there is no need to releaseResource during
1: 		run time roll forward.
1: 
1: 		This method must be safe to be called multiple times.
1: 
1: 	*/
1: 	public void releaseResource(Transaction xact);
1: 
1: 	/**
1: 		Each loggable belongs to one or more groups of similar functionality.
1: 
1: 		Grouping is a way to quickly sort out log records that are interesting
1: 		to different modules or different implementations.
1: 
1: 		When a module makes loggable and sent it to the log file, it must mark
1: 		this loggable with one or more of the following group. 
1: 		If none fit, or if the loggable encompasses functionality that is not
1: 		described in existing groups, then a new group should be introduced.  
1: 
1: 		Grouping has no effect on how the record is logged or how it is treated
1: 		in rollback or recovery.
1: 
1: 		The following groups are defined. This list serves as the registry of
1: 		all loggable groups.
1: 	*/
1: 	public static final int FIRST = 			0x1;	// the first operation of a transaction
1: 	public static final int LAST = 				0x2;	// the last operation of a transaction
1: 	public static final int COMPENSATION = 		0x4;	// a compensation log record
1: 	public static final int BI_LOG = 			0x8;	// a BeforeImage log record
1: 	public static final int COMMIT =		   0x10; 	// the transaction committed
1: 	public static final int ABORT =			   0x20; 	// the transaction aborted
1: 	public static final int PREPARE =		   0x40; 	// the transaction prepared
1: 	public static final int XA_NEEDLOCK =	   0x80; 	// need to reclaim locks associated with theis log record during XA prepared xact recovery
1: 
1: 
1: 	public static final int RAWSTORE =		  0x100;	// a log record generated by the raw store
1: 	public static final int FILE_RESOURCE =   0x400;    // related to "non-transactional" files.
1: 
1: 	/**
1: 		Get the loggable's group value
1: 	*/
1: 	public int group();
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.util.ByteArray;
0: import java.io.IOException;
0: import java.io.OutputStream;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: 
0: /**
0: 	A Loggable is a record of a change of state or an event that happened 
0: 	in the RawStore in the context of a transaction.
0: 	All changes in the RawStore must be logged.
0: 
0: 	This is the root class for all log operations.
0: 
0: 	@see Transaction#logAndDo
0: */
0: 
0: public interface Loggable extends Formatable { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		Apply the change indicated by this operation and optional data.
0: 
0: 		<B>If this method fail, the system will be shut down because the log
0: 		record has already been written to disk.  Moreover, the log record will
0: 		be replayed during recovery and this doMe method will be called on the
0: 		same page again, so if it fails again, recovery will fail and the
0: 		database cannot be started.  So it is very important to make sure that
0: 		every resource you need, such as disk space, has been acquired before
0: 		the logAndDo method is called! </B>
0: 
0: 		<BR>This method cannot acquire any resource (like latching of a page)
0: 		since it is called underneath the logging system, ie., the log record has
0: 		already been written to the log stream.
0: 
0: 		<P> The available() method of in indicates how much data can be read, i.e.
0: 		how much was originally written.
0: 
0: 		@param xact			the Transaction
0: 		@param instant		the log instant of this operation
0: 		@param in			optional data
0: 
0: 		@exception IOException Can be thrown by any of the methods of in.
0: 		@exception StandardException Standard Cloudscape policy.
0: 	*/
0: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
0: 		 throws StandardException, IOException;
0: 
0: 	/**
0: 		The log operations are responsible to create the ByteArray, and the log
0: 		operations should write out any optional data for the change to the ByteArray.
0: 		The ByteArray can be prepared when the log operation is constructed,
0: 		or it can be prepared when getPreparedLog() is called.
0: 
0: 		Called by the log manager to allow the log operation to pass the buffer
0: 		which contains optional data that will be available in to doMe() methods.
0: 
0: 		@param out Where and how to write to optional data.
0: 
0: 		@exception StandardException Standard Cloudscape policy.
0: 	
0: 	*/
0: 	public ByteArray getPreparedLog() throws StandardException;
0: 
0: 	/**
0: 	    Determine if the operation should be reapplied in recovery redo.
0: 		If redo is needed, acquire any resource that is necessary for the
0: 		loggable's doMe method.  These need to be released in the
0: 		releaseResource method.
0: 
0: 		<P> The sequence of events in recovery redo of a Loggable operation is:
0: 		<NL>
0: 		<LI> Get the loggable operation.  If loggable.needsRedo is false, then
0: 		no need to redo this operation.
0: 		<LI> If loggable.needsRedo is true, all the resources necessary for
0: 		applying the doMe is acquired in needsRedo.
0: 		<LI> If the loggable is actually a compensation operation, then the
0: 		logging system will find the undoable operation that needs to be
0: 		undone, call compensation.setUndoOp with the undoable operation.
0: 		<LI> The recovery system then calls loggable.doMe, which re-applies the
0: 		loggable operation, or re-applies the compensation operation
0: 		<LI> The recovery system then calls loggable.releaseResource.
0: 		</NL>
0: 
0: 		@param xact		The transaction trying to redo this operation
0: 		@return true if operation needs redoing, false if not.
0: 
0: 		@exception StandardException Standard Cloudscape policy.
0: 
0: 		@see Loggable#releaseResource
0: 	*/
0: 	public boolean needsRedo(Transaction xact) throws StandardException;
0: 
0: 
0: 	/**
0: 		Release any resource that was acquired for doMe for rollback or
0: 		recovery redo.
0: 
0: 		This resource is acquired in either generateUndo (if this is a
0: 		compensation operation during run time rollback or recovery rollback)
0: 		or in needsRedo (if this is during recovery redo).  The run time
0: 		transaction context should have all the resource already acquird for
0: 		run time roll forward, so there is no need to releaseResource during
0: 		run time roll forward.
0: 
0: 		This method must be safe to be called multiple times.
0: 
0: 	*/
0: 	public void releaseResource(Transaction xact);
0: 
0: 	/**
0: 		Each loggable belongs to one or more groups of similar functionality.
0: 
0: 		Grouping is a way to quickly sort out log records that are interesting
0: 		to different modules or different implementations.
0: 
0: 		When a module makes loggable and sent it to the log file, it must mark
0: 		this loggable with one or more of the following group. 
0: 		If none fit, or if the loggable encompasses functionality that is not
0: 		described in existing groups, then a new group should be introduced.  
0: 
0: 		Grouping has no effect on how the record is logged or how it is treated
0: 		in rollback or recovery.
0: 
0: 		The following groups are defined. This list serves as the registry of
0: 		all loggable groups.
0: 	*/
0: 	public static final int FIRST = 			0x1;	// the first operation of a transaction
0: 	public static final int LAST = 				0x2;	// the last operation of a transaction
0: 	public static final int COMPENSATION = 		0x4;	// a compensation log record
0: 	public static final int BI_LOG = 			0x8;	// a BeforeImage log record
0: 	public static final int COMMIT =		   0x10; 	// the transaction committed
0: 	public static final int ABORT =			   0x20; 	// the transaction aborted
0: 	public static final int PREPARE =		   0x40; 	// the transaction prepared
0: 	public static final int XA_NEEDLOCK =	   0x80; 	// need to reclaim locks associated with theis log record during XA prepared xact recovery
0: 
0: 
0: 	public static final int RAWSTORE =		  0x100;	// a log record generated by the raw store
0: 	public static final int FILE_RESOURCE =   0x400;    // related to "non-transactional" files.
0: 
0: 	/**
0: 		Get the loggable's group value
0: 	*/
0: 	public int group();
0: 
0: }
============================================================================