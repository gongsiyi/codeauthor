1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.LockTableNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
12:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:4fb136d: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:69f8afa: import org.apache.derby.iapi.sql.compile.Visitor;
1:008a561: import org.apache.derby.iapi.sql.conn.Authorizer;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * A LockTableNode is the root of a QueryTree that represents a LOCK TABLE command:
1:eac0369:  *	LOCK TABLE <TableName> IN SHARE/EXCLUSIVE MODE
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class LockTableNode extends MiscellaneousStatementNode
1:eac0369: {
1:eac0369: 	private TableName	tableName;
1:eac0369: 	private boolean		exclusiveMode;
1:eac0369: 	private long		conglomerateNumber;
1:eac0369: 	private TableDescriptor			lockTableDescriptor;
1:eac0369: 
1:3bb140c:     /**
1:3bb140c:      * @param tableName The table to lock
1:3bb140c:      * @param exclusiveMode Whether or not to get an exclusive lock.
1:3bb140c:      * @param cm Context manager
1:3bb140c:      */
1:3bb140c:     LockTableNode(
1:3bb140c:             TableName tableName,
1:3bb140c:             boolean exclusiveMode,
1:3bb140c:             ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:         this.tableName = tableName;
1:3bb140c:         this.exclusiveMode = exclusiveMode;
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
1:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "tableName: " + tableName + "\n" +
1:eac0369: 				"exclusiveMode: " + exclusiveMode + "\n" +
1:eac0369: 				"conglomerateNumber: " + conglomerateNumber + "\n" +
1:eac0369: 				super.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     String statementToString()
1:eac0369: 	{
1:eac0369: 		return "LOCK TABLE";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this LockTableNode.  This means looking up the table,
1:eac0369: 	 * verifying it exists and getting the heap conglomerate number.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:cc770d8: 	public void bindStatement() throws StandardException
1:eac0369: 	{
1:eac0369: 		CompilerContext			cc = getCompilerContext();
1:eac0369: 		ConglomerateDescriptor	cd;
1:eac0369: 		SchemaDescriptor		sd;
1:eac0369: 
1:eac0369: 		String schemaName = tableName.getSchemaName();
1:eac0369: 		sd = getSchemaDescriptor(schemaName);
1:eac0369: 
1:eac0369: 		// Users are not allowed to lock system tables
1:eac0369: 		if (sd.isSystemSchema())
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_NO_USER_DDL_IN_SYSTEM_SCHEMA, 
1:eac0369: 							statementToString(), schemaName);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		lockTableDescriptor = getTableDescriptor(tableName.getTableName(), sd);
1:eac0369: 
1:eac0369: 		if (lockTableDescriptor == null)
1:eac0369: 		{
1:582425f: 			// Check if the reference is for a synonym.
1:582425f: 			TableName synonymTab = resolveTableToSynonym(tableName);
1:582425f: 			if (synonymTab == null)
1:eac0369: 				throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND, tableName);
1:582425f: 			tableName = synonymTab;
1:582425f: 			sd = getSchemaDescriptor(tableName.getSchemaName());
1:eac0369: 
1:582425f: 			lockTableDescriptor = getTableDescriptor(synonymTab.getTableName(), sd);
1:582425f: 			if (lockTableDescriptor == null)
2:582425f: 				throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND, tableName);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		//throw an exception if user is attempting to lock a temporary table
1:eac0369: 		if (lockTableDescriptor.getTableType() == TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE)
1:eac0369: 		{
1:eac0369: 				throw StandardException.newException(SQLState.LANG_NOT_ALLOWED_FOR_DECLARED_GLOBAL_TEMP_TABLE);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		conglomerateNumber = lockTableDescriptor.getHeapConglomerateId();
1:eac0369: 
1:eac0369: 		/* Get the base conglomerate descriptor */
1:eac0369: 		cd = lockTableDescriptor.getConglomerateDescriptor(conglomerateNumber);
1:eac0369: 
1:eac0369: 		/* Statement is dependent on the TableDescriptor and ConglomerateDescriptor */
1:eac0369: 		cc.createDependency(lockTableDescriptor);
1:eac0369: 		cc.createDependency(cd);
1:eac0369: 
1:008a561: 		if (isPrivilegeCollectionRequired())
1:eac0369: 		{
1:008a561: 			// need SELECT privilege to perform lock table statement.
1:008a561: 			cc.pushCurrentPrivType(Authorizer.SELECT_PRIV);
1:008a561: 			cc.addRequiredTablePriv(lockTableDescriptor);
1:008a561: 			cc.popCurrentPrivType();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
1:eac0369: 	 *
1:eac0369: 	 * @return	true if references SESSION schema tables, else false
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public boolean referencesSessionSchema()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		//If lock table is on a SESSION schema table, then return true. 
1:eac0369: 		return isSessionSchema(lockTableDescriptor.getSchemaName());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create the Constant information that will drive the guts of Execution.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     public ConstantAction makeConstantAction() throws StandardException
1:eac0369: 	{
1:eac0369: 		return getGenericConstantActionFactory().getLockTableConstantAction(
1:eac0369: 						tableName.getFullTableName(),
1:eac0369: 						conglomerateNumber,
1:eac0369: 						exclusiveMode);
1:eac0369: 	}
1:69f8afa: 
1:69f8afa:     @Override
1:69f8afa:     void acceptChildren(Visitor v) throws StandardException {
1:69f8afa:         super.acceptChildren(v);
1:69f8afa: 
1:69f8afa:         if (tableName != null) {
1:69f8afa:             tableName = (TableName) tableName.accept(v);
1:69f8afa:         }
1:69f8afa:     }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:69f8afa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitor;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     void acceptChildren(Visitor v) throws StandardException {
1:         super.acceptChildren(v);
1: 
1:         if (tableName != null) {
1:             tableName = (TableName) tableName.accept(v);
1:         }
1:     }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1: class LockTableNode extends MiscellaneousStatementNode
1:     /**
1:      * @param tableName The table to lock
1:      * @param exclusiveMode Whether or not to get an exclusive lock.
1:      * @param cm Context manager
1:      */
1:     LockTableNode(
1:             TableName tableName,
1:             boolean exclusiveMode,
1:             ContextManager cm) {
1:         super(cm);
1:         this.tableName = tableName;
1:         this.exclusiveMode = exclusiveMode;
0:         setNodeType(C_NodeTypes.LOCK_TABLE_NODE);
1:     }
1:     /**
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     String statementToString()
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ConstantAction makeConstantAction() throws StandardException
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4fb136d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
commit:cc770d8
/////////////////////////////////////////////////////////////////////////
1: 	public void bindStatement() throws StandardException
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.LockTableNode
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: 
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.reference.ClassName;
1: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
1: /**
1:  * A LockTableNode is the root of a QueryTree that represents a LOCK TABLE command:
1:  *	LOCK TABLE <TableName> IN SHARE/EXCLUSIVE MODE
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
0: public class LockTableNode extends MiscellaneousStatementNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private TableName	tableName;
1: 	private boolean		exclusiveMode;
1: 	private long		conglomerateNumber;
1: 	private TableDescriptor			lockTableDescriptor;
1: 
1: 	/**
0: 	 * Initializer for LockTableNode
1: 	 *
0: 	 * @param tableName		The table to lock
0: 	 * @param exclusiveMode	boolean, whether or not to get an exclusive lock.
1: 	 */
0: 	public void init(Object tableName, Object exclusiveMode)
1: 	{
0: 		this.tableName = (TableName) tableName;
0: 		this.exclusiveMode = ((Boolean) exclusiveMode).booleanValue();
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "tableName: " + tableName + "\n" +
1: 				"exclusiveMode: " + exclusiveMode + "\n" +
1: 				"conglomerateNumber: " + conglomerateNumber + "\n" +
1: 				super.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
0: 	public String statementToString()
1: 	{
1: 		return "LOCK TABLE";
1: 	}
1: 
1: 	/**
1: 	 * Bind this LockTableNode.  This means looking up the table,
1: 	 * verifying it exists and getting the heap conglomerate number.
1: 	 *
0: 	 * @return	The bound query tree
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public QueryTreeNode bind() throws StandardException
1: 	{
1: 		CompilerContext			cc = getCompilerContext();
1: 		ConglomerateDescriptor	cd;
0: 		DataDictionary			dd = getDataDictionary();
1: 		SchemaDescriptor		sd;
1: 
1: 		String schemaName = tableName.getSchemaName();
1: 		sd = getSchemaDescriptor(schemaName);
1: 
1: 		// Users are not allowed to lock system tables
1: 		if (sd.isSystemSchema())
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_NO_USER_DDL_IN_SYSTEM_SCHEMA, 
1: 							statementToString(), schemaName);
1: 		}
1: 
1: 		lockTableDescriptor = getTableDescriptor(tableName.getTableName(), sd);
1: 
1: 		if (lockTableDescriptor == null)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND, tableName);
1: 		}
1: 
1: 		//throw an exception if user is attempting to lock a temporary table
1: 		if (lockTableDescriptor.getTableType() == TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE)
1: 		{
1: 				throw StandardException.newException(SQLState.LANG_NOT_ALLOWED_FOR_DECLARED_GLOBAL_TEMP_TABLE);
1: 		}
1: 
1: 		conglomerateNumber = lockTableDescriptor.getHeapConglomerateId();
1: 
1: 		/* Get the base conglomerate descriptor */
1: 		cd = lockTableDescriptor.getConglomerateDescriptor(conglomerateNumber);
1: 
1: 		/* Statement is dependent on the TableDescriptor and ConglomerateDescriptor */
1: 		cc.createDependency(lockTableDescriptor);
1: 		cc.createDependency(cd);
1: 
0: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
1: 	 *
1: 	 * @return	true if references SESSION schema tables, else false
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public boolean referencesSessionSchema()
1: 		throws StandardException
1: 	{
1: 		//If lock table is on a SESSION schema table, then return true. 
1: 		return isSessionSchema(lockTableDescriptor.getSchemaName());
1: 	}
1: 
1: 	/**
1: 	 * Create the Constant information that will drive the guts of Execution.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
1: 	{
1: 		return getGenericConstantActionFactory().getLockTableConstantAction(
1: 						tableName.getFullTableName(),
1: 						conglomerateNumber,
1: 						exclusiveMode);
1: 	}
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:008a561
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.Authorizer;
0: 
/////////////////////////////////////////////////////////////////////////
1: 		if (isPrivilegeCollectionRequired())
0: 		{
1: 			// need SELECT privilege to perform lock table statement.
1: 			cc.pushCurrentPrivType(Authorizer.SELECT_PRIV);
1: 			cc.addRequiredTablePriv(lockTableDescriptor);
1: 			cc.popCurrentPrivType();
0: 		}
0: 
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:582425f
/////////////////////////////////////////////////////////////////////////
1: 			// Check if the reference is for a synonym.
1: 			TableName synonymTab = resolveTableToSynonym(tableName);
1: 			if (synonymTab == null)
1: 				throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND, tableName);
1: 			tableName = synonymTab;
1: 			sd = getSchemaDescriptor(tableName.getSchemaName());
0: 
1: 			lockTableDescriptor = getTableDescriptor(synonymTab.getTableName(), sd);
1: 			if (lockTableDescriptor == null)
1: 				throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND, tableName);
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: /**
0:  * A LockTableNode is the root of a QueryTree that represents a LOCK TABLE command:
0:  *	LOCK TABLE <TableName> IN SHARE/EXCLUSIVE MODE
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public class LockTableNode extends MiscellaneousStatementNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private TableName	tableName;
0: 	private boolean		exclusiveMode;
0: 	private long		conglomerateNumber;
0: 	private TableDescriptor			lockTableDescriptor;
0: 
0: 	/**
0: 	 * Initializer for LockTableNode
0: 	 *
0: 	 * @param tableName		The table to lock
0: 	 * @param exclusiveMode	boolean, whether or not to get an exclusive lock.
0: 	 */
0: 	public void init(Object tableName, Object exclusiveMode)
0: 	{
0: 		this.tableName = (TableName) tableName;
0: 		this.exclusiveMode = ((Boolean) exclusiveMode).booleanValue();
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "tableName: " + tableName + "\n" +
0: 				"exclusiveMode: " + exclusiveMode + "\n" +
0: 				"conglomerateNumber: " + conglomerateNumber + "\n" +
0: 				super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	public String statementToString()
0: 	{
0: 		return "LOCK TABLE";
0: 	}
0: 
0: 	/**
0: 	 * Bind this LockTableNode.  This means looking up the table,
0: 	 * verifying it exists and getting the heap conglomerate number.
0: 	 *
0: 	 * @return	The bound query tree
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public QueryTreeNode bind() throws StandardException
0: 	{
0: 		CompilerContext			cc = getCompilerContext();
0: 		ConglomerateDescriptor	cd;
0: 		DataDictionary			dd = getDataDictionary();
0: 		SchemaDescriptor		sd;
0: 
0: 		String schemaName = tableName.getSchemaName();
0: 		sd = getSchemaDescriptor(schemaName);
0: 
0: 		// Users are not allowed to lock system tables
0: 		if (sd.isSystemSchema())
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_NO_USER_DDL_IN_SYSTEM_SCHEMA, 
0: 							statementToString(), schemaName);
0: 		}
0: 
0: 		lockTableDescriptor = getTableDescriptor(tableName.getTableName(), sd);
0: 
0: 		if (lockTableDescriptor == null)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_TABLE_NOT_FOUND, tableName);
0: 		}
0: 
0: 		//throw an exception if user is attempting to lock a temporary table
0: 		if (lockTableDescriptor.getTableType() == TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE)
0: 		{
0: 				throw StandardException.newException(SQLState.LANG_NOT_ALLOWED_FOR_DECLARED_GLOBAL_TEMP_TABLE);
0: 		}
0: 
0: 		conglomerateNumber = lockTableDescriptor.getHeapConglomerateId();
0: 
0: 		/* Get the base conglomerate descriptor */
0: 		cd = lockTableDescriptor.getConglomerateDescriptor(conglomerateNumber);
0: 
0: 		/* Statement is dependent on the TableDescriptor and ConglomerateDescriptor */
0: 		cc.createDependency(lockTableDescriptor);
0: 		cc.createDependency(cd);
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
0: 	 *
0: 	 * @return	true if references SESSION schema tables, else false
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public boolean referencesSessionSchema()
0: 		throws StandardException
0: 	{
0: 		//If lock table is on a SESSION schema table, then return true. 
0: 		return isSessionSchema(lockTableDescriptor.getSchemaName());
0: 	}
0: 
0: 	/**
0: 	 * Create the Constant information that will drive the guts of Execution.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
0: 	{
0: 		return getGenericConstantActionFactory().getLockTableConstantAction(
0: 						tableName.getFullTableName(),
0: 						conglomerateNumber,
0: 						exclusiveMode);
0: 	}
0: }
============================================================================