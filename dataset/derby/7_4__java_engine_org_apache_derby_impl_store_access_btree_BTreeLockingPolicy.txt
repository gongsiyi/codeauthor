1:eac0369: /*
9:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.BTreeLockingPolicy
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
5:eac0369: /**
1:eac0369: 
1:eac0369: The generic.BTree directory wants to know as little about locking as possible,
1:eac0369: in order to make the code usuable by multiple implementations.  But the 
1:eac0369: generic code will make calls to abstract lock calls implemented by concrete
1:eac0369: btree implementations.  Concrete implementations like B2I understand locking,
1:eac0369: and needs informatation specific to the implementation to make the lock calls.
1:eac0369: <p>
1:eac0369: This class is created and owned by the concrete application, but is passed
1:eac0369: into and returned from the generic code when lock calls are made.
1:eac0369: Concrete implementations which do not need lock calls can just pass a null
1:eac0369: pointer where a BTreeLockingPolicy is requested.
1:eac0369: <p>
1:eac0369: There are 2 types of lock interfaces, lockScan*() and lockNonScan*().
1:eac0369: <p>
1:8654374: The lockScan*() interfaces save the key for the current scan position before
1:8654374: giving up the latch on the page if they have to wait for a row lock. The
1:8654374: callers can reposition the scan using the saved key by calling
1:8654374: {@code BTreeScan.reposition()} if such a situation occurs. Then the latches
1:8654374: are reobtained, possibly on a different page if the current key has been moved
1:8654374: to another page in the meantime. Upon return from these interfaces
1:eac0369: the row lock requested is guaranteed to have been obtained on the correct
1:eac0369: key for the row requested.  These interfaces handle the special case of 
1:eac0369: unique indexes where the RowLocation can change while waiting on the lock 
1:eac0369: (see implementation for details), basically the lock is retryed after waiting
1:eac0369: if the RowLocation has changed.
1:eac0369: <p>
1:8654374: The lockNonScan*() interfaces do not save the current scan position. If these
1:eac0369: routines return that the latch was released while waiting to obtain the
1:eac0369: lock, then the caller must requeue the lock request after taking appropriate
1:eac0369: action.  This action usually involves researching the tree to make sure 
1:8654374: that the correct key is locked with latches held. These interfaces
1:eac0369: do not handle the special case of unique indexes where the RowLocation can 
1:eac0369: change while waiting on the lock, as the row may disappear when the latch
1:eac0369: is released to wait on the lock - thus it is necessary that the caller retry
1:eac0369: the lock if the interface returns that the latch was released.
1:eac0369: 
1:eac0369: 
4:eac0369: **/
1:eac0369: 
1:eac0369: public interface BTreeLockingPolicy
1:eac0369: {
1:eac0369:     /**************************************************************************
1:eac0369:      * Abstract Protected lockScan*() locking methods of BTree:
1:86e051f:      *     lockScanRow              - lock row
1:eac0369:      *     unlockScanRecordAfterRead- unlock the scan record
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock a btree row to determine if it is a committed deleted row.
8:eac0369:      * <p>
1:eac0369:      * Request an exclusive lock on the row located at the given slot, NOWAIT.
1:eac0369:      * Return true if the lock is granted, otherwise false.
1:eac0369:      * <p>
7:eac0369:      *
1:eac0369:      * @param open_btree        The conglomerate we are locking.
1:eac0369:      * @param leaf              The leaf page with the row to lock.
2:eac0369:      * @param template          Empty full template row, to read row into.
1:eac0369:      * @param slot_no           The slot of row on "current_leaf" 
1:eac0369:      *
3:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     abstract public boolean lockScanCommittedDeletedRow(
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     LeafControlRow          leaf,
1:eac0369:     DataValueDescriptor[]   template,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     int                     slot_no)
3:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock a row as part of doing the scan.
1:eac0369:      * <p>
1:eac0369:      * Lock the row at the given slot (or the previous row if slot is 0).
1:eac0369:      * <p>
1:eac0369:      * If this routine returns true all locks were acquired while maintaining
1:eac0369:      * the latch on leaf.  If this routine returns false, locks may or may
1:eac0369:      * not have been acquired, and the routine should be called again after
1:eac0369:      * the client has researched the tree to reget the latch on the 
1:eac0369:      * appropriate page.
1:eac0369:      *
1:eac0369: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:eac0369:      *
2:eac0369:      * @param open_btree        The open_btree to associate latches with - 
2:eac0369:      *                          used if routine has to scan backward.
1:06dbbcf:      * @param pos               Description of position of row to lock.
1:06dbbcf:      * @param lock_template     A scratch area to use to read in rows.
1:eac0369:      * @param previous_key_lock Is this a previous key lock call?
1:eac0369:      * @param forUpdate         Is the scan for update or for read only.
1:06dbbcf:      * @param lock_operation    For what operation are we requesting the lock, 
2:eac0369:      *                          this should be one of the following 4 options:
2:eac0369:      *                          LOCK_READ [read lock], 
2:eac0369:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
2:eac0369:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
2:eac0369:      *                          previous key to insert],
2:eac0369:      *                          (LOCK_UPD) [lock for delete or replace]
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     abstract public boolean lockScanRow(
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     BTreeRowPosition        pos,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     boolean                 previous_key_lock,
2:eac0369:     boolean                 forUpdate,
2:eac0369:     int                     lock_operation)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Release read lock on a row.
1:eac0369:      *
1:eac0369:      * @param pos               Data structure that defines the current position
1:eac0369:      *                          in the scan to be unlocked.
1:eac0369:      *
1:eac0369:      * @param forUpdate         Is the scan for update or for read only.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     abstract public void unlockScanRecordAfterRead(
1:eac0369:     BTreeRowPosition        pos,
1:eac0369:     boolean                 forUpdate)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Abstract Protected lockNonScan*() locking methods of BTree:
1:eac0369:      *
1:eac0369:      *     lockNonScanPreviousRow   - lock the row previous to the current
1:eac0369:      *     lockNonScanRow           - lock the input row
1:eac0369:      *     lockNonScanRowOnPage     - lock the given row on the page.
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock the previous key.
1:eac0369:      * <p>
1:eac0369:      * Given the current latched page and slot number, lock the logically
1:eac0369:      * previous key in the table.  There are 3 cases:
1:eac0369:      * <p>
1:dbed020:      * slotnumber &gt; 1                       - just lock (slotnumber - 1)
1:dbed020:      * (slotnumber == 1) &amp;&amp; (leftmost leaf) - this is the first key in the
1:eac0369:      *                                        table, so lock a "magic" FIRSTKEY.
1:dbed020:      * (slotnumber == 1) &amp;&amp; !(leftmost leaf)- traverse left in the tree looking
1:eac0369:      *                                        for a previous key.
1:eac0369:      * <p>
1:eac0369:      * On successful return from this routine appropriate locking will have
1:eac0369:      * been done.  All locks and latches are requested nowait, if any 
1:eac0369:      * lock/latch cannot be granted this routine releases the current_leaf
1:eac0369:      * latch and any latches it may have acquired and returns "false."
1:eac0369:      * <p>
1:eac0369:      * All extra latches that may have been gotten will have been released.
1:eac0369:      * <p>
1:eac0369:      * This routine will find the "previous row" to the (current_leaf,
1:eac0369:      * current_slot), walking left in the tree as necessary, and first request
1:eac0369:      * the lock on that row NOWAIT.  If that lock can not be granted,
1:eac0369:      * then it will release all latches that it has acquired up to that point
1:eac0369:      * including the latched current_leaf passed into the routine, and request 
1:eac0369:      * the lock WAIT.  Once the lock has been granted the routine will return
1:5faf131:      * and it is up to the caller to research the tree to find where the
1:5faf131:      * current position may have ended up.  For instance in the case of insert
1:5faf131:      * once the current latch is released, the correct page to do the insert
1:5faf131:      * may no longer be where the original scan found it.
1:eac0369:      * <p>
1:eac0369:      * If routine returns true, lock was granted NOWAIT, current leaf
1:eac0369:      * remains latched, and was never unlatched.  If routine returns false,
1:eac0369:      * lock was granted WAIT, current leaf is not latched, row may have 
1:eac0369:      * moved in the btree so caller must research to find the row.
1:eac0369:      *
1:eac0369:      *
1:eac0369:      * @param current_leaf      Latched current leaf where "current" key is.
1:eac0369:      * @param current_slot      The slot of row on "current_leaf" 
1:06dbbcf:      * @param lock_template     Empty full template row, to read row into.
1:eac0369:      * @param open_btree        The open_btree to associate latches with - 
1:eac0369:      *                          used if routine has to scan backward.
1:06dbbcf:      * @param lock_operation    For what operation are we requesting the lock, 
1:eac0369:      *                          this should be one of the following 4 options:
1:eac0369:      *                          LOCK_READ [read lock], 
1:eac0369:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
1:eac0369:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
1:eac0369:      *                          previous key to insert],
1:eac0369:      *                          (LOCK_UPD) [lock for delete or replace]
1:eac0369:      * @param lock_duration     For what duration should the lock be held,
1:eac0369:      *                          if INSTANT_DURATION, then the routine will
1:eac0369:      *                          guarantee that lock was acquired while holding
1:eac0369:      *                          the latch, but then immediately release the
1:eac0369:      *                          lock.  If COMMIT_DURATION or MANUAL_DURATION
1:eac0369:      *                          then the lock be held when routine returns
1:eac0369:      *                          successfully.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     abstract public boolean lockNonScanPreviousRow(
2:eac0369:     LeafControlRow          current_leaf,
1:eac0369:     int                     current_slot,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     OpenBTree               open_btree,
1:eac0369:     int                     lock_operation,
1:eac0369:     int                     lock_duration)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock a btree row (row in memory).  Meant to be used if caller 
1:eac0369:      * has the entire row objectified.
1:eac0369:      * <p>
1:eac0369:      * Lock a btree row, enforcing the standard lock/latch protocol.  
1:eac0369:      * On return the row is locked.  Return status indicates if the lock
1:eac0369:      * was waited for, which will mean a latch was dropped while waiting.
2:eac0369:      * In general a false status means that the caller will either have 
2:eac0369:      * to research the tree unless some protocol has been implemented that
2:eac0369:      * insures that the row will not have moved while the latch was dropped.
1:eac0369:      * <p>
1:eac0369:      * This routine request a row lock NOWAIT on the in-memory row 
1:eac0369:      * "current_row.".  If the lock is granted the routine will return true.
2:eac0369:      * If the lock cannot be granted NOWAIT, then the routine will release
1:eac0369:      * the latch on "current_leaf" (if current_leaf is non-null) and 
1:eac0369:      * "aux_leaf" (if aux_leaf is non-null), and then it will request a WAIT 
1:eac0369:      * lock on the row.  
1:eac0369:      *
1:eac0369:      *
2:eac0369:      * @param btree             The conglomerate we are locking.
1:eac0369:      * @param current_leaf      If non-null, this leaf is unlatched if the 
2:eac0369:      *                          routine has to wait on the lock.
1:eac0369:      * @param aux_leaf          If non-null, this leaf is unlatched if the 
1:eac0369:      *                          routine has to wait on the lock.
1:eac0369:      * @param current_row       In memory, objectified "current" row.
1:06dbbcf:      * @param lock_operation    For what operation are we requesting the lock, 
1:eac0369:      *                          this should be one of the following 4 options:
1:eac0369:      *                          LOCK_READ [read lock], 
1:eac0369:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
1:eac0369:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
1:eac0369:      *                          previous key to insert],
1:eac0369:      *                          (LOCK_UPD) [lock for delete or replace]
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     abstract public boolean lockNonScanRow(
4:eac0369:     BTree                   btree,
1:eac0369:     LeafControlRow          current_leaf,
1:eac0369:     LeafControlRow          aux_leaf,
1:eac0369:     DataValueDescriptor[]   current_row,
1:eac0369:     int                     lock_operation)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Lock the row at the given slot.
1:eac0369:      * <p>
1:eac0369:      * If this routine returns true all locks were acquired while maintaining
1:eac0369:      * the latch on leaf.  If this routine returns false, locks may or may
1:eac0369:      * not have been acquired, and the routine should be called again after
1:eac0369:      * the client has researched the tree to reget the latch on the 
1:eac0369:      * appropriate page.
1:eac0369:      *
1:eac0369: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:eac0369:      *
2:eac0369:      * @param leaf              The control row of the current leaf to lock.
2:eac0369:      * @param slot              The slot position of the row to lock.
1:06dbbcf:      * @param lock_template     A scratch area to use to read in rows.
1:06dbbcf:      * @param lock_operation    For what operation are we requesting the lock, 
1:eac0369:      *                          this should be one of the following 4 options:
1:eac0369:      *                          LOCK_READ [read lock], 
1:eac0369:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
1:eac0369:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
1:eac0369:      *                          previous key to insert],
1:eac0369:      *                          (LOCK_UPD) [lock for delete or replace]
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     abstract public boolean lockNonScanRowOnPage(
1:eac0369:     LeafControlRow          leaf,
1:eac0369:     int                     slot,
1:eac0369:     FetchDescriptor         lock_fetch_desc,
1:eac0369:     DataValueDescriptor[]   lock_template,
1:eac0369:     RowLocation             lock_row_loc,
1:eac0369:     int                     lock_operation)
1:eac0369: 		throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * slotnumber &gt; 1                       - just lock (slotnumber - 1)
1:      * (slotnumber == 1) &amp;&amp; (leftmost leaf) - this is the first key in the
1:      * (slotnumber == 1) &amp;&amp; !(leftmost leaf)- traverse left in the tree looking
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f6fea40
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8654374
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: The lockScan*() interfaces save the key for the current scan position before
1: giving up the latch on the page if they have to wait for a row lock. The
1: callers can reposition the scan using the saved key by calling
1: {@code BTreeScan.reposition()} if such a situation occurs. Then the latches
1: are reobtained, possibly on a different page if the current key has been moved
1: to another page in the meantime. Upon return from these interfaces
1: The lockNonScan*() interfaces do not save the current scan position. If these
1: that the correct key is locked with latches held. These interfaces
commit:86e051f
/////////////////////////////////////////////////////////////////////////
1:      *     lockScanRow              - lock row
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:bbcc923
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.store.raw.RecordHandle;
/////////////////////////////////////////////////////////////////////////
0:      * @param protectionHandle a <code>RecordHandle</code> that, when locked,
0:      * protects all the record ids on a page
0:      * @see RecordHandle#RECORD_ID_PROTECTION_HANDLE
0:     abstract public void unlockScan(RecordHandle protectionHandle);
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:5faf131
/////////////////////////////////////////////////////////////////////////
1:      * and it is up to the caller to research the tree to find where the
1:      * current position may have ended up.  For instance in the case of insert
1:      * once the current latch is released, the correct page to do the insert
1:      * may no longer be where the original scan found it.
commit:06dbbcf
/////////////////////////////////////////////////////////////////////////
0:      * Lock the current leaf page.
/////////////////////////////////////////////////////////////////////////
1:      * @param lock_operation    For what operation are we requesting the lock, 
/////////////////////////////////////////////////////////////////////////
1:      * @param pos               Description of position of row to lock.
1:      * @param lock_template     A scratch area to use to read in rows.
1:      * @param lock_operation    For what operation are we requesting the lock, 
/////////////////////////////////////////////////////////////////////////
1:      * @param lock_template     Empty full template row, to read row into.
1:      * @param lock_operation    For what operation are we requesting the lock, 
/////////////////////////////////////////////////////////////////////////
1:      * @param lock_operation    For what operation are we requesting the lock, 
/////////////////////////////////////////////////////////////////////////
1:      * @param lock_template     A scratch area to use to read in rows.
0:      * @param lock_operation    For what operation are we requesting the lock, 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.BTreeLockingPolicy
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
1: 
1: import org.apache.derby.iapi.store.raw.FetchDescriptor;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: /**
1: 
1: The generic.BTree directory wants to know as little about locking as possible,
1: in order to make the code usuable by multiple implementations.  But the 
1: generic code will make calls to abstract lock calls implemented by concrete
1: btree implementations.  Concrete implementations like B2I understand locking,
1: and needs informatation specific to the implementation to make the lock calls.
1: <p>
1: This class is created and owned by the concrete application, but is passed
1: into and returned from the generic code when lock calls are made.
1: Concrete implementations which do not need lock calls can just pass a null
1: pointer where a BTreeLockingPolicy is requested.
1: <p>
1: There are 2 types of lock interfaces, lockScan*() and lockNonScan*().
1: <p>
0: The lockScan*() interfaces assume that the caller gets a "scan lock" on the
0: page before requesting any row locks on the page.  This is either done by
0: makeing a lockScan() call followed by row lock requests, or it can be done
0: in one operation by calling lockScanRow() and requesting the scan lock be
0: obtained before getting the row lock.  Upon return from these interfaces 
1: the row lock requested is guaranteed to have been obtained on the correct
1: key for the row requested.  These interfaces handle the special case of 
1: unique indexes where the RowLocation can change while waiting on the lock 
1: (see implementation for details), basically the lock is retryed after waiting
1: if the RowLocation has changed.
1: <p>
0: The lockNonScan*() interfaces assume that no "scan lock" exists.  If these
1: routines return that the latch was released while waiting to obtain the
1: lock, then the caller must requeue the lock request after taking appropriate
1: action.  This action usually involves researching the tree to make sure 
0: that the correct key is locked with latches held.  Because no scan lock is
0: held the original row could have disappeared from the table.  These interfaces
1: do not handle the special case of unique indexes where the RowLocation can 
1: change while waiting on the lock, as the row may disappear when the latch
1: is released to wait on the lock - thus it is necessary that the caller retry
1: the lock if the interface returns that the latch was released.
1: 
1: 
1: **/
1: 
1: public interface BTreeLockingPolicy
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     /**************************************************************************
1:      * Abstract Protected lockScan*() locking methods of BTree:
0:      *     lockScan                 - lock the scan page
0:      *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
0:      *     lockScanRow              - lock row and possibly the scan page
0:      *     unlockScan               - unlock the scan page
1:      *     unlockScanRecordAfterRead- unlock the scan record
1:      **************************************************************************
1:      */
1: 
1:     /**
0:      * Lock the current leaf page (vs. a row on the page).
1:      * <p>
0:      * Logically lock the record id's on a leaf page.  This protocol is used
0:      * by splits/row purgers and scans to coordinate between themselves.
1:      * <p>
0:      * Anyone who wants to either move rows off of a btree page or, purge
0:      * them from existence must first call this routine with "forUpdate" 
0:      * true.  This will result in a lock request which will block on other
0:      * processes which cannot work if rows move off the page or disappear.
0:      * It is expected that the this routine will only be called for update
0:      * by very short term internal transactions which will commit immediately
0:      * after doing their work and give up the exclusive lock quickly.
1:      * <p>
0:      * Currently scans can position themselves in one of 2 ways, either by
0:      * saving the record handle of a record when they give up the latch on 
0:      * the page, or by saving the entire row.  If they save the record handle
0:      * then they must call this routine with "forUpdate" false, to get a 
0:      * lock which will protect the record handle they are using from moving
0:      * off the page or disapearing.  This is also why aborts of inserts must
0:      * be done by marking the rows deleted, rather than purging them.
0:      * It is expected that scanner's will release this lock once they move
0:      * off the page they are looking at.  They do this by calling 
0:      * unlockScan().
1:      * <p>
0:      * This lock enforces the same lock/latch protocol as btree row locks.
0:      * On return the lock has been obtained.  Return status indicates if the
0:      * lock was waited for, which will mean a latch(s) were dropped while 
0:      * waiting.
1:      * In general a false status means that the caller will either have 
1:      * to research the tree unless some protocol has been implemented that
1:      * insures that the row will not have moved while the latch was dropped.
1:      * <p>
0:      * This routine requests a special row on the RECORD_ID_PROTECTION_HANDLE 
0:      * row id.  If the lock is granted the routine will return true.
1:      * If the lock cannot be granted NOWAIT, then the routine will release
0:      * the latch on "current_leaf" and "aux_control_row" (if 
0:      * aux_control_row is non-null), and then it will request a WAIT lock on 
0:      * the row.  
1:      *
0:      * @param current_leaf      The lock is associated with this page in the
0:      *                          btree.  This control row is unlatched if the
1:      *                          routine has to wait on the lock.
0:      * @param aux_control_row   If non-null, this control row is unlatched 
0:      *                          if the routine has to wait on the lock.
0:      * @param forUpdate         Whether to wait for lock.
0:      * @param lock_oper         For what operation are we requesting the lock, 
1:      *                          this should be one of the following 4 options:
1:      *                          LOCK_READ [read lock], 
1:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
1:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
1:      *                          previous key to insert],
1:      *                          (LOCK_UPD) [lock for delete or replace]
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     abstract public boolean lockScan(
1:     LeafControlRow          current_leaf,
0:     ControlRow              aux_control_row,
1:     boolean                 forUpdate,
1:     int                     lock_operation)
1: 		throws StandardException;
1: 
1: 
1:     /**
0:      * Lock a control row page for reclaiming deleted rows.
1:      * <p>
0:      * When reclaiming deleted rows during split need to get an exclusive
0:      * scan lock on the page, which will mean there are no other scans 
0:      * positioned on the page.  If there are other scans positioned, just
0:      * give up on reclaiming space now.
1:      *
0: 	 * @return true if lock was granted nowait, else false and not lock was
0:      *         granted.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
0:     abstract public boolean lockScanForReclaimSpace(
0:     LeafControlRow          current_leaf)
1: 		throws StandardException;
1: 
1:     /**
1:      * Lock a btree row to determine if it is a committed deleted row.
1:      * <p>
1:      * Request an exclusive lock on the row located at the given slot, NOWAIT.
1:      * Return true if the lock is granted, otherwise false.
1:      * <p>
1:      *
1:      * @param open_btree        The conglomerate we are locking.
1:      * @param leaf              The leaf page with the row to lock.
1:      * @param template          Empty full template row, to read row into.
1:      * @param slot_no           The slot of row on "current_leaf" 
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     abstract public boolean lockScanCommittedDeletedRow(
1:     OpenBTree               open_btree,
1:     LeafControlRow          leaf,
1:     DataValueDescriptor[]   template,
1:     FetchDescriptor         lock_fetch_desc,
1:     int                     slot_no)
1: 		throws StandardException;
1: 
1:     /**
1:      * Lock a row as part of doing the scan.
1:      * <p>
1:      * Lock the row at the given slot (or the previous row if slot is 0).
0:      * Get the scan lock on the page if "request_scan_lock" is true.
1:      * <p>
1:      * If this routine returns true all locks were acquired while maintaining
1:      * the latch on leaf.  If this routine returns false, locks may or may
1:      * not have been acquired, and the routine should be called again after
1:      * the client has researched the tree to reget the latch on the 
1:      * appropriate page.
0:      * (p>
0:      * As a side effect stores the value of the record handle of the current
0:      * scan lock.
1:      *
1: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:      *
1:      * @param open_btree        The open_btree to associate latches with - 
1:      *                          used if routine has to scan backward.
0:      * @param btree             the conglomerate info.
1:      * @param leaf              The control row of the current leaf to lock.
1:      * @param slot              The slot position of the row to lock.
0:      * @param request_scan_lock Whether to request the page scan lock, should
0:      *                          only be requested once per page in the scan.
0:      * @param scratch_template  A scratch area to use to read in rows.
1:      * @param previous_key_lock Is this a previous key lock call?
1:      * @param forUpdate         Is the scan for update or for read only.
0:      * @param lock_oper         For what operation are we requesting the lock, 
1:      *                          this should be one of the following 4 options:
1:      *                          LOCK_READ [read lock], 
1:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
1:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
1:      *                          previous key to insert],
1:      *                          (LOCK_UPD) [lock for delete or replace]
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     abstract public boolean lockScanRow(
1:     OpenBTree               open_btree,
1:     BTree                   btree,
1:     BTreeRowPosition        pos,
0:     boolean                 request_scan_lock,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     boolean                 previous_key_lock,
1:     boolean                 forUpdate,
1:     int                     lock_operation)
1: 		throws StandardException;
1: 
1:     /**
1:      * Release read lock on a row.
1:      *
1:      * @param pos               Data structure that defines the current position
1:      *                          in the scan to be unlocked.
1:      *
1:      * @param forUpdate         Is the scan for update or for read only.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     abstract public void unlockScanRecordAfterRead(
1:     BTreeRowPosition        pos,
1:     boolean                 forUpdate)
1: 		throws StandardException;
1: 
1:     /**
0:      * Release the lock gotten by calling lockScan.  This call can only be
0:      * made to release read scan locks, write scan locks must be held until
0:      * end of transaction.
1:      * <p>
1:      *
0:      * @param page_number   page number of page that lockScan was called on.
1:      *
1:      **/
0:     abstract public void unlockScan(long page_number);
1: 
1: 
1:     /**************************************************************************
1:      * Abstract Protected lockNonScan*() locking methods of BTree:
1:      *
1:      *     lockNonScanPreviousRow   - lock the row previous to the current
1:      *     lockNonScanRow           - lock the input row
1:      *     lockNonScanRowOnPage     - lock the given row on the page.
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Lock the previous key.
1:      * <p>
1:      * Given the current latched page and slot number, lock the logically
1:      * previous key in the table.  There are 3 cases:
1:      * <p>
0:      * slotnumber > 1                       - just lock (slotnumber - 1)
0:      * (slotnumber == 1) && (leftmost leaf) - this is the first key in the
1:      *                                        table, so lock a "magic" FIRSTKEY.
0:      * (slotnumber == 1) && !(leftmost leaf)- traverse left in the tree looking
1:      *                                        for a previous key.
1:      * <p>
1:      * On successful return from this routine appropriate locking will have
1:      * been done.  All locks and latches are requested nowait, if any 
1:      * lock/latch cannot be granted this routine releases the current_leaf
1:      * latch and any latches it may have acquired and returns "false."
1:      * <p>
1:      * All extra latches that may have been gotten will have been released.
1:      * <p>
1:      * This routine will find the "previous row" to the (current_leaf,
1:      * current_slot), walking left in the tree as necessary, and first request
1:      * the lock on that row NOWAIT.  If that lock can not be granted,
1:      * then it will release all latches that it has acquired up to that point
1:      * including the latched current_leaf passed into the routine, and request 
1:      * the lock WAIT.  Once the lock has been granted the routine will return
0:      * and it is up to the caller to research the tree to find where the 
0:      * row may have ended up.
1:      * <p>
1:      * If routine returns true, lock was granted NOWAIT, current leaf
1:      * remains latched, and was never unlatched.  If routine returns false,
1:      * lock was granted WAIT, current leaf is not latched, row may have 
1:      * moved in the btree so caller must research to find the row.
1:      *
1:      *
1:      * @param btree             The conglomerate we are locking.
1:      * @param current_leaf      Latched current leaf where "current" key is.
1:      * @param current_slot      The slot of row on "current_leaf" 
1:      * @param template          Empty full template row, to read row into.
1:      * @param open_btree        The open_btree to associate latches with - 
1:      *                          used if routine has to scan backward.
0:      * @param lock_oper         For what operation are we requesting the lock, 
1:      *                          this should be one of the following 4 options:
1:      *                          LOCK_READ [read lock], 
1:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
1:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
1:      *                          previous key to insert],
1:      *                          (LOCK_UPD) [lock for delete or replace]
1:      * @param lock_duration     For what duration should the lock be held,
1:      *                          if INSTANT_DURATION, then the routine will
1:      *                          guarantee that lock was acquired while holding
1:      *                          the latch, but then immediately release the
1:      *                          lock.  If COMMIT_DURATION or MANUAL_DURATION
1:      *                          then the lock be held when routine returns
1:      *                          successfully.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     abstract public boolean lockNonScanPreviousRow(
1:     BTree                   btree,
1:     LeafControlRow          current_leaf,
1:     int                     current_slot,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     OpenBTree               open_btree,
1:     int                     lock_operation,
1:     int                     lock_duration)
1: 		throws StandardException;
1: 
1:     /**
1:      * Lock a btree row (row in memory).  Meant to be used if caller 
1:      * has the entire row objectified.
1:      * <p>
1:      * Lock a btree row, enforcing the standard lock/latch protocol.  
1:      * On return the row is locked.  Return status indicates if the lock
1:      * was waited for, which will mean a latch was dropped while waiting.
1:      * In general a false status means that the caller will either have 
1:      * to research the tree unless some protocol has been implemented that
1:      * insures that the row will not have moved while the latch was dropped.
1:      * <p>
1:      * This routine request a row lock NOWAIT on the in-memory row 
1:      * "current_row.".  If the lock is granted the routine will return true.
1:      * If the lock cannot be granted NOWAIT, then the routine will release
1:      * the latch on "current_leaf" (if current_leaf is non-null) and 
1:      * "aux_leaf" (if aux_leaf is non-null), and then it will request a WAIT 
1:      * lock on the row.  
1:      *
1:      *
1:      * @param btree             The conglomerate we are locking.
1:      * @param current_leaf      If non-null, this leaf is unlatched if the 
1:      *                          routine has to wait on the lock.
1:      * @param aux_leaf          If non-null, this leaf is unlatched if the 
1:      *                          routine has to wait on the lock.
1:      * @param current_row       In memory, objectified "current" row.
0:      * @param lock_oper         For what operation are we requesting the lock, 
1:      *                          this should be one of the following 4 options:
1:      *                          LOCK_READ [read lock], 
1:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
1:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
1:      *                          previous key to insert],
1:      *                          (LOCK_UPD) [lock for delete or replace]
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     abstract public boolean lockNonScanRow(
1:     BTree                   btree,
1:     LeafControlRow          current_leaf,
1:     LeafControlRow          aux_leaf,
1:     DataValueDescriptor[]   current_row,
1:     int                     lock_operation)
1: 		throws StandardException;
1: 
1:     /**
1:      * Lock the row at the given slot.
1:      * <p>
1:      * If this routine returns true all locks were acquired while maintaining
1:      * the latch on leaf.  If this routine returns false, locks may or may
1:      * not have been acquired, and the routine should be called again after
1:      * the client has researched the tree to reget the latch on the 
1:      * appropriate page.
1:      *
1: 	 * @return Whether locks were acquired without releasing latch on leaf.
1:      *
1:      * @param open_btree        The open_btree to associate latches with - 
1:      *                          used if routine has to scan backward.
0:      * @param btree             the conglomerate info.
1:      * @param leaf              The control row of the current leaf to lock.
1:      * @param slot              The slot position of the row to lock.
0:      * @param scratch_template  A scratch area to use to read in rows.
0:      * @param lock_oper         For what operation are we requesting the lock, 
1:      *                          this should be one of the following 4 options:
1:      *                          LOCK_READ [read lock], 
1:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
1:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
1:      *                          previous key to insert],
1:      *                          (LOCK_UPD) [lock for delete or replace]
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     abstract public boolean lockNonScanRowOnPage(
1:     BTree                   btree,
1:     LeafControlRow          leaf,
1:     int                     slot,
1:     FetchDescriptor         lock_fetch_desc,
1:     DataValueDescriptor[]   lock_template,
1:     RowLocation             lock_row_loc,
1:     int                     lock_operation)
1: 		throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: 
0: import org.apache.derby.iapi.store.raw.FetchDescriptor;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: /**
0: 
0: The generic.BTree directory wants to know as little about locking as possible,
0: in order to make the code usuable by multiple implementations.  But the 
0: generic code will make calls to abstract lock calls implemented by concrete
0: btree implementations.  Concrete implementations like B2I understand locking,
0: and needs informatation specific to the implementation to make the lock calls.
0: <p>
0: This class is created and owned by the concrete application, but is passed
0: into and returned from the generic code when lock calls are made.
0: Concrete implementations which do not need lock calls can just pass a null
0: pointer where a BTreeLockingPolicy is requested.
0: <p>
0: There are 2 types of lock interfaces, lockScan*() and lockNonScan*().
0: <p>
0: The lockScan*() interfaces assume that the caller gets a "scan lock" on the
0: page before requesting any row locks on the page.  This is either done by
0: makeing a lockScan() call followed by row lock requests, or it can be done
0: in one operation by calling lockScanRow() and requesting the scan lock be
0: obtained before getting the row lock.  Upon return from these interfaces 
0: the row lock requested is guaranteed to have been obtained on the correct
0: key for the row requested.  These interfaces handle the special case of 
0: unique indexes where the RowLocation can change while waiting on the lock 
0: (see implementation for details), basically the lock is retryed after waiting
0: if the RowLocation has changed.
0: <p>
0: The lockNonScan*() interfaces assume that no "scan lock" exists.  If these
0: routines return that the latch was released while waiting to obtain the
0: lock, then the caller must requeue the lock request after taking appropriate
0: action.  This action usually involves researching the tree to make sure 
0: that the correct key is locked with latches held.  Because no scan lock is
0: held the original row could have disappeared from the table.  These interfaces
0: do not handle the special case of unique indexes where the RowLocation can 
0: change while waiting on the lock, as the row may disappear when the latch
0: is released to wait on the lock - thus it is necessary that the caller retry
0: the lock if the interface returns that the latch was released.
0: 
0: 
0: **/
0: 
0: public interface BTreeLockingPolicy
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     /**************************************************************************
0:      * Abstract Protected lockScan*() locking methods of BTree:
0:      *     lockScan                 - lock the scan page
0:      *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
0:      *     lockScanRow              - lock row and possibly the scan page
0:      *     unlockScan               - unlock the scan page
0:      *     unlockScanRecordAfterRead- unlock the scan record
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Lock the current leaf page (vs. a row on the page).
0:      * <p>
0:      * Logically lock the record id's on a leaf page.  This protocol is used
0:      * by splits/row purgers and scans to coordinate between themselves.
0:      * <p>
0:      * Anyone who wants to either move rows off of a btree page or, purge
0:      * them from existence must first call this routine with "forUpdate" 
0:      * true.  This will result in a lock request which will block on other
0:      * processes which cannot work if rows move off the page or disappear.
0:      * It is expected that the this routine will only be called for update
0:      * by very short term internal transactions which will commit immediately
0:      * after doing their work and give up the exclusive lock quickly.
0:      * <p>
0:      * Currently scans can position themselves in one of 2 ways, either by
0:      * saving the record handle of a record when they give up the latch on 
0:      * the page, or by saving the entire row.  If they save the record handle
0:      * then they must call this routine with "forUpdate" false, to get a 
0:      * lock which will protect the record handle they are using from moving
0:      * off the page or disapearing.  This is also why aborts of inserts must
0:      * be done by marking the rows deleted, rather than purging them.
0:      * It is expected that scanner's will release this lock once they move
0:      * off the page they are looking at.  They do this by calling 
0:      * unlockScan().
0:      * <p>
0:      * This lock enforces the same lock/latch protocol as btree row locks.
0:      * On return the lock has been obtained.  Return status indicates if the
0:      * lock was waited for, which will mean a latch(s) were dropped while 
0:      * waiting.
0:      * In general a false status means that the caller will either have 
0:      * to research the tree unless some protocol has been implemented that
0:      * insures that the row will not have moved while the latch was dropped.
0:      * <p>
0:      * This routine requests a special row on the RECORD_ID_PROTECTION_HANDLE 
0:      * row id.  If the lock is granted the routine will return true.
0:      * If the lock cannot be granted NOWAIT, then the routine will release
0:      * the latch on "current_leaf" and "aux_control_row" (if 
0:      * aux_control_row is non-null), and then it will request a WAIT lock on 
0:      * the row.  
0:      *
0:      * @param current_leaf      The lock is associated with this page in the
0:      *                          btree.  This control row is unlatched if the
0:      *                          routine has to wait on the lock.
0:      * @param aux_control_row   If non-null, this control row is unlatched 
0:      *                          if the routine has to wait on the lock.
0:      * @param forUpdate         Whether to wait for lock.
0:      * @param lock_oper         For what operation are we requesting the lock, 
0:      *                          this should be one of the following 4 options:
0:      *                          LOCK_READ [read lock], 
0:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
0:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
0:      *                          previous key to insert],
0:      *                          (LOCK_UPD) [lock for delete or replace]
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     abstract public boolean lockScan(
0:     LeafControlRow          current_leaf,
0:     ControlRow              aux_control_row,
0:     boolean                 forUpdate,
0:     int                     lock_operation)
0: 		throws StandardException;
0: 
0: 
0:     /**
0:      * Lock a control row page for reclaiming deleted rows.
0:      * <p>
0:      * When reclaiming deleted rows during split need to get an exclusive
0:      * scan lock on the page, which will mean there are no other scans 
0:      * positioned on the page.  If there are other scans positioned, just
0:      * give up on reclaiming space now.
0:      *
0: 	 * @return true if lock was granted nowait, else false and not lock was
0:      *         granted.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     abstract public boolean lockScanForReclaimSpace(
0:     LeafControlRow          current_leaf)
0: 		throws StandardException;
0: 
0:     /**
0:      * Lock a btree row to determine if it is a committed deleted row.
0:      * <p>
0:      * Request an exclusive lock on the row located at the given slot, NOWAIT.
0:      * Return true if the lock is granted, otherwise false.
0:      * <p>
0:      *
0:      * @param open_btree        The conglomerate we are locking.
0:      * @param leaf              The leaf page with the row to lock.
0:      * @param template          Empty full template row, to read row into.
0:      * @param slot_no           The slot of row on "current_leaf" 
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     abstract public boolean lockScanCommittedDeletedRow(
0:     OpenBTree               open_btree,
0:     LeafControlRow          leaf,
0:     DataValueDescriptor[]   template,
0:     FetchDescriptor         lock_fetch_desc,
0:     int                     slot_no)
0: 		throws StandardException;
0: 
0:     /**
0:      * Lock a row as part of doing the scan.
0:      * <p>
0:      * Lock the row at the given slot (or the previous row if slot is 0).
0:      * Get the scan lock on the page if "request_scan_lock" is true.
0:      * <p>
0:      * If this routine returns true all locks were acquired while maintaining
0:      * the latch on leaf.  If this routine returns false, locks may or may
0:      * not have been acquired, and the routine should be called again after
0:      * the client has researched the tree to reget the latch on the 
0:      * appropriate page.
0:      * (p>
0:      * As a side effect stores the value of the record handle of the current
0:      * scan lock.
0:      *
0: 	 * @return Whether locks were acquired without releasing latch on leaf.
0:      *
0:      * @param open_btree        The open_btree to associate latches with - 
0:      *                          used if routine has to scan backward.
0:      * @param btree             the conglomerate info.
0:      * @param leaf              The control row of the current leaf to lock.
0:      * @param slot              The slot position of the row to lock.
0:      * @param request_scan_lock Whether to request the page scan lock, should
0:      *                          only be requested once per page in the scan.
0:      * @param scratch_template  A scratch area to use to read in rows.
0:      * @param previous_key_lock Is this a previous key lock call?
0:      * @param forUpdate         Is the scan for update or for read only.
0:      * @param lock_oper         For what operation are we requesting the lock, 
0:      *                          this should be one of the following 4 options:
0:      *                          LOCK_READ [read lock], 
0:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
0:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
0:      *                          previous key to insert],
0:      *                          (LOCK_UPD) [lock for delete or replace]
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     abstract public boolean lockScanRow(
0:     OpenBTree               open_btree,
0:     BTree                   btree,
0:     BTreeRowPosition        pos,
0:     boolean                 request_scan_lock,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     boolean                 previous_key_lock,
0:     boolean                 forUpdate,
0:     int                     lock_operation)
0: 		throws StandardException;
0: 
0:     /**
0:      * Release read lock on a row.
0:      *
0:      * @param pos               Data structure that defines the current position
0:      *                          in the scan to be unlocked.
0:      *
0:      * @param forUpdate         Is the scan for update or for read only.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     abstract public void unlockScanRecordAfterRead(
0:     BTreeRowPosition        pos,
0:     boolean                 forUpdate)
0: 		throws StandardException;
0: 
0:     /**
0:      * Release the lock gotten by calling lockScan.  This call can only be
0:      * made to release read scan locks, write scan locks must be held until
0:      * end of transaction.
0:      * <p>
0:      *
0:      * @param page_number   page number of page that lockScan was called on.
0:      *
0:      **/
0:     abstract public void unlockScan(long page_number);
0: 
0: 
0:     /**************************************************************************
0:      * Abstract Protected lockNonScan*() locking methods of BTree:
0:      *
0:      *     lockNonScanPreviousRow   - lock the row previous to the current
0:      *     lockNonScanRow           - lock the input row
0:      *     lockNonScanRowOnPage     - lock the given row on the page.
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Lock the previous key.
0:      * <p>
0:      * Given the current latched page and slot number, lock the logically
0:      * previous key in the table.  There are 3 cases:
0:      * <p>
0:      * slotnumber > 1                       - just lock (slotnumber - 1)
0:      * (slotnumber == 1) && (leftmost leaf) - this is the first key in the
0:      *                                        table, so lock a "magic" FIRSTKEY.
0:      * (slotnumber == 1) && !(leftmost leaf)- traverse left in the tree looking
0:      *                                        for a previous key.
0:      * <p>
0:      * On successful return from this routine appropriate locking will have
0:      * been done.  All locks and latches are requested nowait, if any 
0:      * lock/latch cannot be granted this routine releases the current_leaf
0:      * latch and any latches it may have acquired and returns "false."
0:      * <p>
0:      * All extra latches that may have been gotten will have been released.
0:      * <p>
0:      * This routine will find the "previous row" to the (current_leaf,
0:      * current_slot), walking left in the tree as necessary, and first request
0:      * the lock on that row NOWAIT.  If that lock can not be granted,
0:      * then it will release all latches that it has acquired up to that point
0:      * including the latched current_leaf passed into the routine, and request 
0:      * the lock WAIT.  Once the lock has been granted the routine will return
0:      * and it is up to the caller to research the tree to find where the 
0:      * row may have ended up.
0:      * <p>
0:      * If routine returns true, lock was granted NOWAIT, current leaf
0:      * remains latched, and was never unlatched.  If routine returns false,
0:      * lock was granted WAIT, current leaf is not latched, row may have 
0:      * moved in the btree so caller must research to find the row.
0:      *
0:      *
0:      * @param btree             The conglomerate we are locking.
0:      * @param current_leaf      Latched current leaf where "current" key is.
0:      * @param current_slot      The slot of row on "current_leaf" 
0:      * @param template          Empty full template row, to read row into.
0:      * @param open_btree        The open_btree to associate latches with - 
0:      *                          used if routine has to scan backward.
0:      * @param lock_oper         For what operation are we requesting the lock, 
0:      *                          this should be one of the following 4 options:
0:      *                          LOCK_READ [read lock], 
0:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
0:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
0:      *                          previous key to insert],
0:      *                          (LOCK_UPD) [lock for delete or replace]
0:      * @param lock_duration     For what duration should the lock be held,
0:      *                          if INSTANT_DURATION, then the routine will
0:      *                          guarantee that lock was acquired while holding
0:      *                          the latch, but then immediately release the
0:      *                          lock.  If COMMIT_DURATION or MANUAL_DURATION
0:      *                          then the lock be held when routine returns
0:      *                          successfully.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     abstract public boolean lockNonScanPreviousRow(
0:     BTree                   btree,
0:     LeafControlRow          current_leaf,
0:     int                     current_slot,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     OpenBTree               open_btree,
0:     int                     lock_operation,
0:     int                     lock_duration)
0: 		throws StandardException;
0: 
0:     /**
0:      * Lock a btree row (row in memory).  Meant to be used if caller 
0:      * has the entire row objectified.
0:      * <p>
0:      * Lock a btree row, enforcing the standard lock/latch protocol.  
0:      * On return the row is locked.  Return status indicates if the lock
0:      * was waited for, which will mean a latch was dropped while waiting.
0:      * In general a false status means that the caller will either have 
0:      * to research the tree unless some protocol has been implemented that
0:      * insures that the row will not have moved while the latch was dropped.
0:      * <p>
0:      * This routine request a row lock NOWAIT on the in-memory row 
0:      * "current_row.".  If the lock is granted the routine will return true.
0:      * If the lock cannot be granted NOWAIT, then the routine will release
0:      * the latch on "current_leaf" (if current_leaf is non-null) and 
0:      * "aux_leaf" (if aux_leaf is non-null), and then it will request a WAIT 
0:      * lock on the row.  
0:      *
0:      *
0:      * @param btree             The conglomerate we are locking.
0:      * @param current_leaf      If non-null, this leaf is unlatched if the 
0:      *                          routine has to wait on the lock.
0:      * @param aux_leaf          If non-null, this leaf is unlatched if the 
0:      *                          routine has to wait on the lock.
0:      * @param current_row       In memory, objectified "current" row.
0:      * @param lock_oper         For what operation are we requesting the lock, 
0:      *                          this should be one of the following 4 options:
0:      *                          LOCK_READ [read lock], 
0:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
0:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
0:      *                          previous key to insert],
0:      *                          (LOCK_UPD) [lock for delete or replace]
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     abstract public boolean lockNonScanRow(
0:     BTree                   btree,
0:     LeafControlRow          current_leaf,
0:     LeafControlRow          aux_leaf,
0:     DataValueDescriptor[]   current_row,
0:     int                     lock_operation)
0: 		throws StandardException;
0: 
0:     /**
0:      * Lock the row at the given slot.
0:      * <p>
0:      * If this routine returns true all locks were acquired while maintaining
0:      * the latch on leaf.  If this routine returns false, locks may or may
0:      * not have been acquired, and the routine should be called again after
0:      * the client has researched the tree to reget the latch on the 
0:      * appropriate page.
0:      *
0: 	 * @return Whether locks were acquired without releasing latch on leaf.
0:      *
0:      * @param open_btree        The open_btree to associate latches with - 
0:      *                          used if routine has to scan backward.
0:      * @param btree             the conglomerate info.
0:      * @param leaf              The control row of the current leaf to lock.
0:      * @param slot              The slot position of the row to lock.
0:      * @param scratch_template  A scratch area to use to read in rows.
0:      * @param lock_oper         For what operation are we requesting the lock, 
0:      *                          this should be one of the following 4 options:
0:      *                          LOCK_READ [read lock], 
0:      *                          (LOCK_INS | LOCK_UPD) [ lock for insert], 
0:      *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for 
0:      *                          previous key to insert],
0:      *                          (LOCK_UPD) [lock for delete or replace]
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     abstract public boolean lockNonScanRowOnPage(
0:     BTree                   btree,
0:     LeafControlRow          leaf,
0:     int                     slot,
0:     FetchDescriptor         lock_fetch_desc,
0:     DataValueDescriptor[]   lock_template,
0:     RowLocation             lock_row_loc,
0:     int                     lock_operation)
0: 		throws StandardException;
0: }
============================================================================