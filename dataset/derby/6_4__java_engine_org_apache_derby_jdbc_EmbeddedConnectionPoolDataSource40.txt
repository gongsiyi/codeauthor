1:e175303: /*
1:09869c6:  
1:e175303:    Derby - Class org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40
1:09869c6:  
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:6da3fc6:  
1:e175303:       http://www.apache.org/licenses/LICENSE-2.0
1:6da3fc6:  
1:e175303:    Unless required by applicable law or agreed to in writing, software
1:e175303:    distributed under the License is distributed on an "AS IS" BASIS,
1:e175303:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e175303:    See the License for the specific language governing permissions and
1:e175303:    limitations under the License.
1:6da3fc6:  
1:8a44c0f:  */
1:e175303: package org.apache.derby.jdbc;
1:8a44c0f: 
1:8a44c0f: /** 
1:78bdf36:    <P>
1:78bdf36:    This is a vacuous, deprecated class. At one time, it had real behavior and helped us support
1:a086620:    separate data sources for Java 5 and Java 6.
1:78bdf36:    Now that we no longer support Java 5, all functionality has migrated into the superclass, EmbeddedConnectionPoolDataSource.
1:fd584b0:    This class is preserved for backward compatibility reasons.
1:78bdf36:    </P>
1:c712a5b:    @deprecated Use {@link EmbeddedConnectionPoolDataSource} instead.
2:6da3fc6:  */
1:e175303: public class EmbeddedConnectionPoolDataSource40 
1:58bf06e:     extends EmbeddedConnectionPoolDataSource
1:58bf06e:     implements javax.sql.ConnectionPoolDataSource // compile-time check for
1:58bf06e:                                                   // 4.1 extension
1:58bf06e: {
1:217bf8a:     // This explicit UID was missing for releases 10.10.1.1 and lower.
1:217bf8a:     // The default changed between 10.7 and 10.8,
1:217bf8a:     // so even with this explicit UID in place, serialized data sources
1:217bf8a:     // created with 10.7 or older would not be readable.
1:217bf8a:     // The default UID in 10.7 was -2155993232624542236.
1:217bf8a:     // This was not caught by the serialization tests at the time since
1:217bf8a:     // the "40"-suffixed data sources were not tested back then, cf DERBY-5955
1:217bf8a:     // http://svn.apache.org/viewvc?view=revision&revision=1438035 .
1:217bf8a:     private static final long serialVersionUID = -4368824293743156916L;
1:09869c6:     
1:09869c6: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:a086620
/////////////////////////////////////////////////////////////////////////
1:    separate data sources for Java 5 and Java 6.
commit:217bf8a
/////////////////////////////////////////////////////////////////////////
1:     // This explicit UID was missing for releases 10.10.1.1 and lower.
1:     // The default changed between 10.7 and 10.8,
1:     // so even with this explicit UID in place, serialized data sources
1:     // created with 10.7 or older would not be readable.
1:     // The default UID in 10.7 was -2155993232624542236.
1:     // This was not caught by the serialization tests at the time since
1:     // the "40"-suffixed data sources were not tested back then, cf DERBY-5955
1:     // http://svn.apache.org/viewvc?view=revision&revision=1438035 .
1:     private static final long serialVersionUID = -4368824293743156916L;
commit:a24588c
/////////////////////////////////////////////////////////////////////////
0:       <li>Java SE 7 (JDBC 4.1) and
0:       <li>full Java SE 8 (JDBC 4.2).
commit:cb88209
/////////////////////////////////////////////////////////////////////////
0:     running on the following platforms:
0:     <ul>
0:       <li>JDBC 4.1 - Java SE 7
0:       <li>JDBC 4.2 - full Java SE 8
0:     </ul>
0:     <p>
0:     Use BasicEmbeddedConnectionPoolDataSource40 if your application
0:     runs on Java 8 Compact Profile 2.
0:     <p>
0:     Use EmbeddedConnectionPoolDataSource if your application
0:     runs on the following platforms:
0:     <p>
commit:2913612
/////////////////////////////////////////////////////////////////////////
0:     This datasource is suitable for an application using embedded Derby,
0:     running on full Java SE 7, corresponding to JDBC 4.1.
0:     <p>
0:     Use EmbeddedConnectionPoolDataSource if your application runs in
0:     the following environments:
0:     <ul>
0:       <li> JDBC 3.0 - J2SE 5.0 </li>
0:       <li> JDBC 4.0 - Java SE 6 </li>
0:     </ul>
0:     <p>EmbeddedConnectionPoolDataSource40 is a ConnectionPoolDataSource
0:     implementation.
commit:58bf06e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     extends EmbeddedConnectionPoolDataSource
1:     implements javax.sql.ConnectionPoolDataSource // compile-time check for
1:                                                   // 4.1 extension
1: {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c712a5b
/////////////////////////////////////////////////////////////////////////
1:    @deprecated Use {@link EmbeddedConnectionPoolDataSource} instead.
commit:46e89a9
/////////////////////////////////////////////////////////////////////////
0:     implementation for JDBC 4.1 (and higher) environments.
0:     Use EmbeddedConnectionPoolDataSource40 if your application runs at JDBC
0:     level 4.1 (or higher).
0:     <LI> JDBC 3.0 - J2SE 5.0 </LI>
0:     <LI> JDBC 4.0 - Java SE 6 </LI>
/////////////////////////////////////////////////////////////////////////
commit:189ad05
/////////////////////////////////////////////////////////////////////////
0:             String password, boolean requestPassword)  throws SQLException {
0:         return new EmbedPooledConnection40(this, user, password,
0:                                            requestPassword);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:fd584b0
/////////////////////////////////////////////////////////////////////////
1:    This class is preserved for backward compatibility reasons.
commit:78bdf36
/////////////////////////////////////////////////////////////////////////
1:    <P>
1:    This is a vacuous, deprecated class. At one time, it had real behavior and helped us support
0:    separate datasources for Java 5 and Java 6.
1:    Now that we no longer support Java 5, all functionality has migrated into the superclass, EmbeddedConnectionPoolDataSource.
1:    </P>
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
commit:0ede6f3
/////////////////////////////////////////////////////////////////////////
0: 	implementation for JDBC 4.0 (and higher) environments.
0: 	Use EmbeddedConnectionPoolDataSource40 if your application runs at JDBC level 4.0 (or higher).
0: 	Use
commit:09869c6
/////////////////////////////////////////////////////////////////////////
0: import java.sql.SQLFeatureNotSupportedException;
0: import java.util.logging.Logger;
/////////////////////////////////////////////////////////////////////////
1:    
0:     ////////////////////////////////////////////////////////////////////
0:     //
0:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
0:     //
0:     ////////////////////////////////////////////////////////////////////
1: 
0:     public  Logger getParentLogger()
0:         throws SQLFeatureNotSupportedException
0:     {
0:         throw (SQLFeatureNotSupportedException) Util.notImplemented( "getParentLogger()" );
1:     }
1: 
commit:d6e7d39
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8a44c0f
/////////////////////////////////////////////////////////////////////////
0: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
0:      * @return concrete class generated by default qury object generator
/////////////////////////////////////////////////////////////////////////
0:      * This method forwards all the calls to default query object provided by 
0:      * the jdk.
0:      * @param ifc interface to generated concreate class
0:      * @param dataSource DataSource to use when invoking methods that access the Data Source
0:      * @return concrete class generated by default qury object generator
1:      */
0:     public <T extends BaseQuery> T createQueryObject(Class<T> ifc, DataSource dataSource ) 
0:                                                     throws SQLException {
0:         return QueryObjectFactory.createDefaultQueryObject (ifc, dataSource);
0:     }   
1: 
1:     /**
commit:6da3fc6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.impl.jdbc.Util;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
/////////////////////////////////////////////////////////////////////////
0:      * Returns false unless <code>interfaces</code> is implemented 
0:      * 
0:      * @param  interfaces             a Class defining an interface.
0:      * @return true                   if this implements the interface or 
0:      *                                directly or indirectly wraps an object 
0:      *                                that does.
0:      * @throws java.sql.SQLException  if an error occurs while determining 
0:      *                                whether this is a wrapper for an object 
0:      *                                with the given interface.
1:      */
0:     public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
0:         return interfaces.isInstance(this);
0:     }
1:     
0:     /**
0:      * Returns <code>this</code> if this class implements the interface
0:      *
0:      * @param  interfaces a Class defining an interface
0:      * @return an object that implements the interface
0:      * @throws java.sql.SQLExption if no object if found that implements the 
0:      * interface
1:      */
0:     public <T> T unwrap(java.lang.Class<T> interfaces) 
0:                             throws SQLException{
0:         //Derby does not implement non-standard methods on 
0:         //JDBC objects
0:         //hence return this if this class implements the interface 
0:         //or throw an SQLException
0:         try {
0:             return interfaces.cast(this);
0:         } catch (ClassCastException cce) {
0:             throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,
0:                     interfaces);
0:         }
0:     }
1: 
0:     /**
commit:b33b410
/////////////////////////////////////////////////////////////////////////
0: /** 
0: 	EmbeddedConnectionPoolDataSource40 is Derby's ConnectionPoolDataSource
0: 	implementation for the JDBC4.0 environment.
0: 	
0: 	<P>A ConnectionPoolDataSource is a factory for PooledConnection
0: 	objects. An object that implements this interface will typically be
0: 	registered with a JNDI service.
0: 	<P>
0: 	EmbeddedConnectionPoolDataSource40 supports the JDBC 4.0 specification
0: 	for the J2SE 6.0 Java Virtual Machine environment. Use
0: 	EmbeddedConnectionPoolDataSource if your application runs in the
0: 	following environments:
0: 	<UL>
0: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4, J2SE 5.0
0: 	<LI> JDBC 2.0 - Java 2 - JDK 1.2,1.3
0: 	</UL>	
0: 
0: 	<P>EmbeddedConnectionPoolDataSource40 is serializable and referenceable.
0: 
0: 	<P>See EmbeddedDataSource40 for DataSource properties.
0: 
0:  */
commit:90709fc
/////////////////////////////////////////////////////////////////////////
commit:e175303
/////////////////////////////////////////////////////////////////////////
1: /*
0:  
1:    Derby - Class org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40
0:  
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
0:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0:  
1:       http://www.apache.org/licenses/LICENSE-2.0
0:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
0:  
0:  */
1: package org.apache.derby.jdbc;
0: 
0: import java.sql.BaseQuery;
0: import java.sql.QueryObjectFactory;
0: import java.sql.QueryObjectGenerator;
0: import java.sql.SQLException;
0: import javax.sql.ConnectionPoolDataSource;
0: import javax.sql.PooledConnection;
0: 
0: /**
0:  * This class is meant to be used while running the applications with jdbc4.0
0:  * support. It extends EmbeddedDataSource40 which implements jdbc 4.0 
0:  * specific methods.
0:  */
0: 
1: public class EmbeddedConnectionPoolDataSource40 
0:                                 extends EmbeddedConnectionPoolDataSource 
0:                                 implements ConnectionPoolDataSource {    
0:     
0:     /**
0:      * returns null indicating that no driver specific implementation for 
0:      * QueryObjectGenerator available
0:      * @return null
0:      */
0:     public QueryObjectGenerator getQueryObjectGenerator() throws SQLException {
0:         return null;
0:     }
0:     
0:     /**
0:      * This method forwards all the calls to default query object provided by 
0:      * the jdk.
0:      * @param ifc interface to generated concreate class
0:      * @return concreat class generated by default qury object generator
0:      */
0:     public <T extends BaseQuery> T createQueryObject(Class<T> ifc) 
0:                                                     throws SQLException {
0:         return QueryObjectFactory.createDefaultQueryObject (ifc, this);
0:     }
0:     
0:     /**
0:      * create and returns EmbedPooledConnection.
0:      * @param user 
0:      * @param password 
0:      * @param requestPAssword 
0:      * @return 
0:      */
0:     protected PooledConnection createPooledConnection (String user, 
0:             String password, boolean requestPAssword)  throws SQLException {
0:         return new EmbedPooledConnection40 (this, user, password, true);
0:     }    
0:         
0: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:fb8cf6e
/////////////////////////////////////////////////////////////////////////
author:Army
-------------------------------------------------------------------------------
commit:8fcae92
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
============================================================================