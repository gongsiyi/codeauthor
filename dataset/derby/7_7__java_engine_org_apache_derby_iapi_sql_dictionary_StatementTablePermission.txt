1:c45f5b1: /*
3:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementTablePermission
1:b7730e4: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4: 	  http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: package org.apache.derby.iapi.sql.dictionary;
1:b7730e4: 
1:b7730e4: import org.apache.derby.iapi.error.StandardException;
1:b7730e4: import org.apache.derby.catalog.UUID;
1:b7730e4: import org.apache.derby.iapi.sql.conn.Authorizer;
1:eb8b3a2: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:b7730e4: import org.apache.derby.iapi.reference.SQLState;
1:12988c7: import org.apache.derby.iapi.sql.Activation;
1:eb38311: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
1:e4caed2: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:e4caed2: import org.apache.derby.iapi.services.context.ContextManager;
1:b7730e4: 
1:c45f5b1: /**
1:428ad73:  * This class describes a table permission required by a statement.
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: public class StatementTablePermission extends StatementPermission
2:b7730e4: {
1:428ad73: 	UUID tableUUID;
1:428ad73: 	int privType; // One of Authorizer.SELECT_PRIV, UPDATE_PRIV, etc.
1:b7730e4: 
1:b7730e4: 	/**
1:eb8b3a2: 	 * Constructor for StatementTablePermission. Creates an instance of
1:eb8b3a2: 	 * table permission requested for the given access.
1:c45f5b1: 	 * 
1:c45f5b1: 	 * @param tableUUID	UUID of the table
1:c45f5b1: 	 * @param privType	Access privilege requested
1:c45f5b1: 	 *
1:c45f5b1: 	 */
1:c45f5b1: 	public StatementTablePermission(UUID tableUUID, int privType)
1:b7730e4: 	{
1:b7730e4: 		this.tableUUID = tableUUID;
1:b7730e4: 		this.privType = privType;
1:b7730e4: 	}
1:b7730e4: 
1:c45f5b1: 	/**
1:c45f5b1: 	 * Return privilege access requested for this access descriptor
1:c45f5b1: 	 *
1:c45f5b1: 	 * @return	Privilege access
1:c45f5b1: 	 */
1:b7730e4: 	public int getPrivType()
1:b7730e4: 	{
1:b7730e4: 		return privType;
1:b7730e4: 	}
1:b7730e4: 
1:c45f5b1: 	/**
1:c45f5b1: 	 * Return table UUID for this access descriptor
1:c45f5b1: 	 *
1:c45f5b1: 	 * @return	Table UUID
1:c45f5b1: 	 */
1:b7730e4: 	public UUID getTableUUID()
1:b7730e4: 	{
1:b7730e4: 		return tableUUID;
1:b7730e4: 	}
1:b7730e4: 
1:c45f5b1: 	/**
1:c45f5b1: 	 * Routine to check if another instance of access descriptor matches this.
1:c45f5b1: 	 * Used to ensure only one access descriptor for a table of given privilege is created.
1:c45f5b1: 	 * Otherwise, every column reference from a table may create a descriptor for that table.
1:c45f5b1: 	 *
1:c45f5b1: 	 * @param obj	Another instance of StatementPermission
1:c45f5b1: 	 *
1:c45f5b1: 	 * @return	true if match
1:c45f5b1: 	 */
1:b7730e4: 	public boolean equals( Object obj)
1:b7730e4: 	{
1:b7730e4: 		if( obj == null)
1:b7730e4: 			return false;
1:b7730e4: 		if( getClass().equals( obj.getClass()))
1:b7730e4: 		{
1:b7730e4: 			StatementTablePermission other = (StatementTablePermission) obj;
1:b7730e4: 			return privType == other.privType && tableUUID.equals( other.tableUUID);
1:b7730e4: 		}
1:b7730e4: 		return false;
1:b7730e4: 	} // end of equals
1:b7730e4: 
1:c45f5b1: 	/**
1:c45f5b1: 	 * Return hash code for this instance
1:c45f5b1: 	 *
1:c45f5b1: 	 * @return	Hashcode
1:c45f5b1: 	 *
1:c45f5b1: 	 */
1:b7730e4: 	public int hashCode()
1:b7730e4: 	{
1:b7730e4: 		return privType + tableUUID.hashCode();
1:b7730e4: 	}
1:b7730e4: 	
1:b7730e4: 	/**
1:eb8b3a2: 	 * @see StatementPermission#check
1:b7730e4: 	 */
1:eb8b3a2: 	public void check( LanguageConnectionContext lcc,
1:12988c7: 					   boolean forGrant,
1:12988c7: 					   Activation activation)
1:b7730e4: 		throws StandardException
1:b7730e4: 	{
1:eb38311: 		ExecPreparedStatement ps = activation.getPreparedStatement();
1:12988c7: 
1:9f60172:         if (!hasPermissionOnTable(lcc, activation, forGrant, ps)) {
1:c7a1d17: 		    DataDictionary dd = lcc.getDataDictionary();
1:b7730e4: 			TableDescriptor td = getTableDescriptor( dd);
1:9f60172:             throw StandardException.newException(
1:9f60172:                 (forGrant ? SQLState.AUTH_NO_TABLE_PERMISSION_FOR_GRANT
1:9f60172:                  : SQLState.AUTH_NO_TABLE_PERMISSION),
1:9f60172:                 lcc.getCurrentUserId(activation),
1:9f60172:                 getPrivName(),
1:9f60172:                 td.getSchemaName(),
1:9f60172:                 td.getName());
1:b7730e4: 		}
1:b7730e4: 	} // end of check
1:eb8b3a2: 
1:c45f5b1: 	protected TableDescriptor getTableDescriptor(DataDictionary dd)  throws StandardException
1:b7730e4: 	{
1:b7730e4: 		TableDescriptor td = dd.getTableDescriptor( tableUUID);
1:b7730e4: 		if( td == null)
1:c45f5b1: 			throw StandardException.newException(SQLState.AUTH_INTERNAL_BAD_UUID, "table");
1:b7730e4: 		return td;
1:b7730e4: 	} // end of getTableDescriptor
1:b7730e4: 
1:eb38311: 	/**
1:12988c7: 	 * Check if current session has permission on the table (current user,
1:eb38311: 	 * PUBLIC or role) and, if applicable, register a dependency of ps on the
1:eb38311: 	 * current role.
1:eb38311: 	 *
1:eb38311: 	 * @param lcc the current language connection context
1:eb38311: 	 * @param activation the activation of ps
1:eb38311: 	 * @param forGrant true if FOR GRANT is required
1:eb38311: 	 * @param ps the prepared statement for which we are checking necessary
1:eb38311: 	 *        privileges
1:c45f5b1: 	 */
1:12988c7: 	protected boolean hasPermissionOnTable(LanguageConnectionContext lcc,
1:12988c7: 										   Activation activation,
1:eb38311: 										   boolean forGrant,
1:eb38311: 										   ExecPreparedStatement ps)
1:b7730e4: 		throws StandardException
1:b7730e4: 	{
1:12988c7: 		DataDictionary dd = lcc.getDataDictionary();
1:9f60172:         String currentUserId = lcc.getCurrentUserId(activation);
1:12988c7: 
1:12988c7: 		boolean result =
1:12988c7: 			oneAuthHasPermissionOnTable(dd,
1:12988c7: 										Authorizer.PUBLIC_AUTHORIZATION_ID,
1:12988c7: 										forGrant) ||
1:12988c7: 			oneAuthHasPermissionOnTable(dd,
1:9f60172:                                         currentUserId,
1:12988c7: 										forGrant);
1:12988c7: 		if (!result) {
1:12988c7: 			// Since no permission exists for the current user or PUBLIC,
1:12988c7: 			// check if a permission exists for the current role (if set).
1:12988c7: 			String role = lcc.getCurrentRoleId(activation);
1:12988c7: 
1:12988c7: 			if (role != null) {
1:12988c7: 
1:12988c7: 				// Check that role is still granted to current user or
1:12988c7: 				// to PUBLIC: A revoked role which is current for this
1:12988c7: 				// session, is lazily set to none when it is attempted
1:12988c7: 				// used.
1:12988c7: 				String dbo = dd.getAuthorizationDatabaseOwner();
1:12988c7: 				RoleGrantDescriptor rd = dd.getRoleGrantDescriptor
1:9f60172:                     (role, currentUserId, dbo);
1:12988c7: 
1:12988c7: 				if (rd == null) {
1:12988c7: 					rd = dd.getRoleGrantDescriptor(
1:12988c7: 						role,
1:12988c7: 						Authorizer.PUBLIC_AUTHORIZATION_ID,
1:12988c7: 						dbo);
1:12988c7: 				}
1:12988c7: 
1:12988c7: 				if (rd == null) {
1:12988c7: 					// We have lost the right to set this role, so we can't
1:12988c7: 					// make use of any permission granted to it or its
1:12988c7: 					// ancestors.
1:12988c7: 					lcc.setCurrentRole(activation, null);
1:12988c7: 				} else {
1:12988c7: 					// The current role is OK, so we can make use of
1:12988c7: 					// any permission granted to it.
1:eb38311: 					//
1:12988c7: 					// Look at the current role and, if necessary, the
1:12988c7: 					// transitive closure of roles granted to current role to
1:12988c7: 					// see if permission has been granted to any of the
1:12988c7: 					// applicable roles.
1:12988c7: 
1:12988c7: 					RoleClosureIterator rci =
1:12988c7: 						dd.createRoleClosureIterator
1:12988c7: 						(activation.getTransactionController(),
1:12988c7: 						 role, true /* inverse relation*/);
1:12988c7: 
1:12988c7: 					String r;
1:12988c7: 
1:12988c7: 					while (!result && (r = rci.next()) != null) {
1:12988c7: 						result = oneAuthHasPermissionOnTable
1:12988c7: 							(dd, r, forGrant);
1:12988c7: 					}
1:eb38311: 
1:eb38311: 					if (result) {
1:e4caed2: 						// Also add a dependency on the role (qua provider), so
1:e4caed2: 						// that if role is no longer available to the current
1:e4caed2: 						// user (e.g. grant is revoked, role is dropped,
1:e4caed2: 						// another role has been set), we are able to
1:e4caed2: 						// invalidate the ps or activation (the latter is used
1:e4caed2: 						// if the current role changes).
1:e4caed2: 						DependencyManager dm = dd.getDependencyManager();
1:e4caed2: 						RoleGrantDescriptor rgd =
1:e4caed2: 							dd.getRoleDefinitionDescriptor(role);
1:e4caed2: 						ContextManager cm = lcc.getContextManager();
1:e4caed2: 
1:e4caed2: 						dm.addDependency(ps, rgd, cm);
1:e4caed2: 						dm.addDependency(activation, rgd, cm);
1:eb38311: 					}
1:12988c7: 				}
1:12988c7: 			}
1:12988c7: 		}
1:12988c7: 		return result;
1:b7730e4: 	}
1:b7730e4: 
1:2d2e717: 	protected boolean oneAuthHasPermissionOnTable(DataDictionary dd, String authorizationId, boolean forGrant)
1:b7730e4: 		throws StandardException
1:b7730e4: 	{
1:b7730e4: 		TablePermsDescriptor perms = dd.getTablePermissions( tableUUID, authorizationId);
1:b7730e4: 		if( perms == null)
1:b7730e4: 			return false;
1:b7730e4: 		
1:b7730e4: 		String priv = null;
1:b7730e4: 			
1:b7730e4: 		switch( privType)
1:b7730e4: 		{
1:b7730e4: 		case Authorizer.SELECT_PRIV:
1:46df255: 		case Authorizer.MIN_SELECT_PRIV:
1:b7730e4: 			priv = perms.getSelectPriv();
1:b7730e4: 			break;
1:b7730e4: 		case Authorizer.UPDATE_PRIV:
1:b7730e4: 			priv = perms.getUpdatePriv();
1:b7730e4: 			break;
1:b7730e4: 		case Authorizer.REFERENCES_PRIV:
1:b7730e4: 			priv = perms.getReferencesPriv();
1:b7730e4: 			break;
1:b7730e4: 		case Authorizer.INSERT_PRIV:
1:b7730e4: 			priv = perms.getInsertPriv();
1:b7730e4: 			break;
1:b7730e4: 		case Authorizer.DELETE_PRIV:
1:b7730e4: 			priv = perms.getDeletePriv();
1:b7730e4: 			break;
1:b7730e4: 		case Authorizer.TRIGGER_PRIV:
1:b7730e4: 			priv = perms.getTriggerPriv();
1:b7730e4: 			break;
1:b7730e4: 		}
1:b7730e4: 
1:b7730e4: 		return "Y".equals(priv) || (!forGrant) && "y".equals( priv);
1:b7730e4: 	} // end of hasPermissionOnTable
1:b7730e4: 
1:c45f5b1: 	/**
1:2d2e717: 	 * @see StatementPermission#getPermissionDescriptor
1:2d2e717: 	 */
1:2d2e717: 	public PermissionsDescriptor getPermissionDescriptor(String authid, DataDictionary dd)
1:2d2e717: 	throws StandardException
1:2d2e717: 	{
1:2d2e717: 		//if the required type of privilege exists for the given authorizer,
1:2d2e717: 		//then pass the permission descriptor for it.
1:2d2e717: 		if (oneAuthHasPermissionOnTable( dd, authid, false))
1:2d2e717: 			return dd.getTablePermissions(tableUUID, authid);
1:2d2e717: 		else return null;
1:2d2e717: 	}
1:2d2e717: 
1:2d2e717: 	/**
1:c45f5b1: 	 * Return privilege needed for this access as string
1:c45f5b1: 	 *
1:c45f5b1: 	 * @return	privilege string
1:c45f5b1: 	 */
1:b7730e4: 	public String getPrivName( )
1:b7730e4: 	{
1:b7730e4: 		switch( privType)
1:b7730e4: 		{
1:b7730e4: 		case Authorizer.SELECT_PRIV:
1:46df255: 		case Authorizer.MIN_SELECT_PRIV:
1:2204336: 			return "SELECT";
1:b7730e4: 		case Authorizer.UPDATE_PRIV:
1:2204336: 			return "UPDATE";
1:b7730e4: 		case Authorizer.REFERENCES_PRIV:
1:2204336: 			return "REFERENCES";
1:b7730e4: 		case Authorizer.INSERT_PRIV:
1:2204336: 			return "INSERT";
1:b7730e4: 		case Authorizer.DELETE_PRIV:
1:2204336: 			return "DELETE";
1:b7730e4: 		case Authorizer.TRIGGER_PRIV:
1:2204336: 			return "TRIGGER";
1:b7730e4: 		}
1:b7730e4: 		return "?";
1:b7730e4: 	} // end of getPrivName
1:12988c7: 
1:12988c7: 	public String toString()
1:12988c7: 	{
1:12988c7: 		return "StatementTablePermission: " + getPrivName() + " " + tableUUID;
1:12988c7: 	}
1:b7730e4: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c7a1d17
/////////////////////////////////////////////////////////////////////////
1: 		    DataDictionary dd = lcc.getDataDictionary();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (!hasPermissionOnTable(lcc, activation, forGrant, ps)) {
1:             throw StandardException.newException(
1:                 (forGrant ? SQLState.AUTH_NO_TABLE_PERMISSION_FOR_GRANT
1:                  : SQLState.AUTH_NO_TABLE_PERMISSION),
1:                 lcc.getCurrentUserId(activation),
1:                 getPrivName(),
1:                 td.getSchemaName(),
1:                 td.getName());
/////////////////////////////////////////////////////////////////////////
1:         String currentUserId = lcc.getCurrentUserId(activation);
1:                                         currentUserId,
/////////////////////////////////////////////////////////////////////////
1:                     (role, currentUserId, dbo);
commit:e4caed2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.services.context.ContextManager;
/////////////////////////////////////////////////////////////////////////
1: 						// Also add a dependency on the role (qua provider), so
1: 						// that if role is no longer available to the current
1: 						// user (e.g. grant is revoked, role is dropped,
1: 						// another role has been set), we are able to
1: 						// invalidate the ps or activation (the latter is used
1: 						// if the current role changes).
1: 						DependencyManager dm = dd.getDependencyManager();
1: 						RoleGrantDescriptor rgd =
1: 							dd.getRoleDefinitionDescriptor(role);
1: 						ContextManager cm = lcc.getContextManager();
1: 
1: 						dm.addDependency(ps, rgd, cm);
1: 						dm.addDependency(activation, rgd, cm);
commit:eb38311
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
/////////////////////////////////////////////////////////////////////////
1: 		ExecPreparedStatement ps = activation.getPreparedStatement();
0: 									  authorizationId, forGrant, ps)) {
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * PUBLIC or role) and, if applicable, register a dependency of ps on the
1: 	 * current role.
1: 	 *
1: 	 * @param lcc the current language connection context
1: 	 * @param activation the activation of ps
0: 	 * @param authorizationId the id of the current user
1: 	 * @param forGrant true if FOR GRANT is required
1: 	 * @param ps the prepared statement for which we are checking necessary
1: 	 *        privileges
1: 										   boolean forGrant,
1: 										   ExecPreparedStatement ps)
/////////////////////////////////////////////////////////////////////////
1: 
1: 					if (result) {
0: 						// Also add a dependency on the role (qua provider),
0: 						// so that if role is no longer available to the
0: 						// current user (e.g. grant is revoked, role is
0: 						// dropped, another role has been set), we are able to
0: 						// invalidate the the ps.
1: 						//
0: 						// FIXME: Rather invalidate Activation so other
0: 						// sessions sharing the same ps are not impacted!!
0: 						dd.getDependencyManager().
0: 							addDependency(ps,
0: 										  dd.getRoleDefinitionDescriptor(role),
0: 										  lcc.getContextManager());
1: 					}
commit:12988c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Activation;
/////////////////////////////////////////////////////////////////////////
1: 					   boolean forGrant,
1: 					   Activation activation)
1: 
0: 		if (!hasPermissionOnTable(lcc, activation,
0: 									  authorizationId, forGrant)) {
/////////////////////////////////////////////////////////////////////////
1: 	 * Check if current session has permission on the table (current user,
0: 	 * PUBLIC or role).
1: 	protected boolean hasPermissionOnTable(LanguageConnectionContext lcc,
1: 										   Activation activation,
0: 										   String authorizationId,
0: 										   boolean forGrant)
1: 		DataDictionary dd = lcc.getDataDictionary();
1: 
1: 		boolean result =
1: 			oneAuthHasPermissionOnTable(dd,
1: 										Authorizer.PUBLIC_AUTHORIZATION_ID,
1: 										forGrant) ||
1: 			oneAuthHasPermissionOnTable(dd,
0: 										authorizationId,
1: 										forGrant);
1: 		if (!result) {
1: 			// Since no permission exists for the current user or PUBLIC,
1: 			// check if a permission exists for the current role (if set).
1: 			String role = lcc.getCurrentRoleId(activation);
1: 
1: 			if (role != null) {
1: 
1: 				// Check that role is still granted to current user or
1: 				// to PUBLIC: A revoked role which is current for this
1: 				// session, is lazily set to none when it is attempted
1: 				// used.
1: 				String dbo = dd.getAuthorizationDatabaseOwner();
1: 				RoleGrantDescriptor rd = dd.getRoleGrantDescriptor
0: 					(role, authorizationId, dbo);
1: 
1: 				if (rd == null) {
1: 					rd = dd.getRoleGrantDescriptor(
1: 						role,
1: 						Authorizer.PUBLIC_AUTHORIZATION_ID,
1: 						dbo);
1: 				}
1: 
1: 				if (rd == null) {
1: 					// We have lost the right to set this role, so we can't
1: 					// make use of any permission granted to it or its
1: 					// ancestors.
1: 					lcc.setCurrentRole(activation, null);
1: 				} else {
1: 					// The current role is OK, so we can make use of
1: 					// any permission granted to it.
0: 					//
1: 					// Look at the current role and, if necessary, the
1: 					// transitive closure of roles granted to current role to
1: 					// see if permission has been granted to any of the
1: 					// applicable roles.
1: 
1: 					RoleClosureIterator rci =
1: 						dd.createRoleClosureIterator
1: 						(activation.getTransactionController(),
1: 						 role, true /* inverse relation*/);
1: 
1: 					String r;
1: 
1: 					while (!result && (r = rci.next()) != null) {
1: 						result = oneAuthHasPermissionOnTable
1: 							(dd, r, forGrant);
1: 					}
1: 				}
1: 			}
1: 		}
1: 		return result;
/////////////////////////////////////////////////////////////////////////
1: 
1: 	public String toString()
1: 	{
1: 		return "StatementTablePermission: " + getPrivName() + " " + tableUUID;
1: 	}
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:46df255
/////////////////////////////////////////////////////////////////////////
1: 		case Authorizer.MIN_SELECT_PRIV:
/////////////////////////////////////////////////////////////////////////
1: 		case Authorizer.MIN_SELECT_PRIV:
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:2204336
/////////////////////////////////////////////////////////////////////////
1: 			return "SELECT";
1: 			return "UPDATE";
1: 			return "REFERENCES";
1: 			return "INSERT";
1: 			return "DELETE";
1: 			return "TRIGGER";
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:428ad73
/////////////////////////////////////////////////////////////////////////
1:  * This class describes a table permission required by a statement.
1: 	UUID tableUUID;
1: 	int privType; // One of Authorizer.SELECT_PRIV, UPDATE_PRIV, etc.
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
1: 	protected boolean oneAuthHasPermissionOnTable(DataDictionary dd, String authorizationId, boolean forGrant)
/////////////////////////////////////////////////////////////////////////
1: 	 * @see StatementPermission#getPermissionDescriptor
1: 	 */
1: 	public PermissionsDescriptor getPermissionDescriptor(String authid, DataDictionary dd)
1: 	throws StandardException
1: 	{
1: 		//if the required type of privilege exists for the given authorizer,
1: 		//then pass the permission descriptor for it.
1: 		if (oneAuthHasPermissionOnTable( dd, authid, false))
1: 			return dd.getTablePermissions(tableUUID, authid);
1: 		else return null;
1: 	}
1: 
1: 	/**
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:eb8b3a2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
/////////////////////////////////////////////////////////////////////////
1: 	 * Constructor for StatementTablePermission. Creates an instance of
1: 	 * table permission requested for the given access.
/////////////////////////////////////////////////////////////////////////
1: 	 * @see StatementPermission#check
1: 	public void check( LanguageConnectionContext lcc,
0: 		DataDictionary dd = lcc.getDataDictionary();
1: 	
commit:c45f5b1
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 	 * Constructor for StatementTablePermission. Creates an instance of table permission requested
0: 	 * for the given access.
1: 	 * 
1: 	 * @param tableUUID	UUID of the table
1: 	 * @param privType	Access privilege requested
1: 	 *
1: 	 */
1: 	public StatementTablePermission(UUID tableUUID, int privType)
1: 	/**
1: 	 * Return privilege access requested for this access descriptor
1: 	 *
1: 	 * @return	Privilege access
1: 	 */
1: 	/**
1: 	 * Return table UUID for this access descriptor
1: 	 *
1: 	 * @return	Table UUID
1: 	 */
1: 	/**
1: 	 * Routine to check if another instance of access descriptor matches this.
1: 	 * Used to ensure only one access descriptor for a table of given privilege is created.
1: 	 * Otherwise, every column reference from a table may create a descriptor for that table.
1: 	 *
1: 	 * @param obj	Another instance of StatementPermission
1: 	 *
1: 	 * @return	true if match
1: 	 */
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Return hash code for this instance
1: 	 *
1: 	 * @return	Hashcode
1: 	 *
1: 	 */
/////////////////////////////////////////////////////////////////////////
1: 	protected TableDescriptor getTableDescriptor(DataDictionary dd)  throws StandardException
1: 			throw StandardException.newException(SQLState.AUTH_INTERNAL_BAD_UUID, "table");
1: 	/*
0: 	 * Check if authorizationId has permission on the table
1: 	 */
0: 	protected boolean hasPermissionOnTable(DataDictionary dd, String authorizationId, boolean forGrant)
0: 	private boolean oneAuthHasPermissionOnTable(DataDictionary dd, String authorizationId, boolean forGrant)
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Return privilege needed for this access as string
1: 	 *
1: 	 * @return	privilege string
1: 	 */
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementTablePermission
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: /**
0:  * This class describes a table permission used (required) by a statement.
1:  */
1: 
1: public class StatementTablePermission extends StatementPermission
1: {
0: 	protected UUID tableUUID;
0: 	protected int privType; // One of Authorizer.SELECT_PRIV, UPDATE_PRIV, etc.
1: 
0: 	public StatementTablePermission( UUID tableUUID, int privType)
1: 	{
1: 		this.tableUUID = tableUUID;
1: 		this.privType = privType;
1: 	}
1: 
1: 	public int getPrivType()
1: 	{
1: 		return privType;
1: 	}
1: 
1: 	public UUID getTableUUID()
1: 	{
1: 		return tableUUID;
1: 	}
1: 
1: 	public boolean equals( Object obj)
1: 	{
1: 		if( obj == null)
1: 			return false;
1: 		if( getClass().equals( obj.getClass()))
1: 		{
1: 			StatementTablePermission other = (StatementTablePermission) obj;
1: 			return privType == other.privType && tableUUID.equals( other.tableUUID);
1: 		}
1: 		return false;
1: 	} // end of equals
1: 
1: 	public int hashCode()
1: 	{
1: 		return privType + tableUUID.hashCode();
1: 	}
1: 	
1: 	/**
0: 	 * @param tc the TransactionController
0: 	 * @param dd A DataDictionary
0: 	 * @param authorizationId A user
0: 	 * @param forGrant
0: 	 *
0: 	 * @exception StandardException if the permission has not been granted
1: 	 */
0: 	public void check( TransactionController tc,
0: 					   DataDictionary dd,
0: 					   String authorizationId,
0: 					   boolean forGrant)
1: 		throws StandardException
1: 	{
0: 		if( ! hasPermissionOnTable( dd, authorizationId, forGrant))
1: 		{
1: 			TableDescriptor td = getTableDescriptor( dd);
0: 			throw StandardException.newException( forGrant ? SQLState.AUTH_NO_TABLE_PERMISSION_FOR_GRANT
0: 												  : SQLState.AUTH_NO_TABLE_PERMISSION,
0: 												  authorizationId,
0: 												  getPrivName(),
0: 												  td.getSchemaName(),
0: 												  td.getName());
1: 		}
1: 	} // end of check
1: 
0: 	protected TableDescriptor getTableDescriptor( DataDictionary dd)  throws StandardException
1: 	{
1: 		TableDescriptor td = dd.getTableDescriptor( tableUUID);
1: 		if( td == null)
0: 			throw StandardException.newException( SQLState.AUTH_INTERNAL_BAD_UUID, "table");
1: 		return td;
1: 	} // end of getTableDescriptor
1: 
0: 	protected boolean hasPermissionOnTable( DataDictionary dd, String authorizationId, boolean forGrant)
1: 		throws StandardException
1: 	{
0: 		return oneAuthHasPermissionOnTable( dd, Authorizer.PUBLIC_AUTHORIZATION_ID, forGrant)
0: 		  || oneAuthHasPermissionOnTable( dd, authorizationId, forGrant);
1: 	}
1: 
0: 	private boolean oneAuthHasPermissionOnTable( DataDictionary dd, String authorizationId, boolean forGrant)
1: 		throws StandardException
1: 	{
1: 		TablePermsDescriptor perms = dd.getTablePermissions( tableUUID, authorizationId);
1: 		if( perms == null)
1: 			return false;
1: 		
1: 		String priv = null;
1: 			
1: 		switch( privType)
1: 		{
1: 		case Authorizer.SELECT_PRIV:
1: 			priv = perms.getSelectPriv();
1: 			break;
1: 		case Authorizer.UPDATE_PRIV:
1: 			priv = perms.getUpdatePriv();
1: 			break;
1: 		case Authorizer.REFERENCES_PRIV:
1: 			priv = perms.getReferencesPriv();
1: 			break;
1: 		case Authorizer.INSERT_PRIV:
1: 			priv = perms.getInsertPriv();
1: 			break;
1: 		case Authorizer.DELETE_PRIV:
1: 			priv = perms.getDeletePriv();
1: 			break;
1: 		case Authorizer.TRIGGER_PRIV:
1: 			priv = perms.getTriggerPriv();
1: 			break;
1: 		}
1: 
1: 		return "Y".equals(priv) || (!forGrant) && "y".equals( priv);
1: 	} // end of hasPermissionOnTable
1: 
1: 	public String getPrivName( )
1: 	{
1: 		switch( privType)
1: 		{
1: 		case Authorizer.SELECT_PRIV:
0: 			return "select";
1: 		case Authorizer.UPDATE_PRIV:
0: 			return "update";
1: 		case Authorizer.REFERENCES_PRIV:
0: 			return "references";
1: 		case Authorizer.INSERT_PRIV:
0: 			return "insert";
1: 		case Authorizer.DELETE_PRIV:
0: 			return "delete";
1: 		case Authorizer.TRIGGER_PRIV:
0: 			return "trigger";
1: 		}
1: 		return "?";
1: 	} // end of getPrivName
1: }
============================================================================