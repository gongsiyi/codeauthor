1:6950a39: /*
5:6950a39: 
1:6950a39:    Derby - Class org.apache.derby.iapi.sql.conn.SQLSessionContext
1:6950a39: 
1:6950a39:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6950a39:    contributor license agreements.  See the NOTICE file distributed with
1:6950a39:    this work for additional information regarding copyright ownership.
1:6950a39:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6950a39:    (the "License"); you may not use this file except in compliance with
1:6950a39:    the License.  You may obtain a copy of the License at
1:6950a39: 
1:6950a39:       http://www.apache.org/licenses/LICENSE-2.0
1:6950a39: 
1:6950a39:    Unless required by applicable law or agreed to in writing, software
1:6950a39:    distributed under the License is distributed on an "AS IS" BASIS,
1:6950a39:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6950a39:    See the License for the specific language governing permissions and
1:6950a39:    limitations under the License.
1:6950a39: 
5:6950a39:  */
1:af1c18c: 
1:6950a39: package org.apache.derby.iapi.sql.conn;
1:6950a39: 
1:6950a39: import java.lang.String;
1:0c5bc3a: import java.util.HashMap;
1:af1c18c: import org.apache.derby.catalog.UUID;
1:6950a39: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:6950a39: 
1:af1c18c: /**
1:6950a39:  * An implementation of this interface encapsulates some of the SQL
1:6950a39:  * session context's state variables, cf. SQL 2003, section 4.37.3,
1:6950a39:  * notably those which we need to save and restore when entering a
1:6950a39:  * stored procedure or function (which can contain SQL and thus a
1:6950a39:  * nested connection), cf. 4.37.3, 4.27.3 and 4.34.1.1.  <p> Presently
1:6950a39:  * this set contains the following properties: <ul> <li>current
1:6950a39:  * role</li> <li>current schema</li> </ul>
1:0c5bc3a:  *
1:6950a39:  * The standard specifies that the authorization stack be copied onto
1:6950a39:  * the new SQL session context before it is pushed (and possibly
1:6950a39:  * modifed) with a new cell for the authorization ids (user, role). In
1:6950a39:  * our implementation we merge these two stacks for now. Also, the
1:6950a39:  * authorization id of current user is not represented yet, since it
1:6950a39:  * can not be modified in a session; Derby can not run routines with
1:6950a39:  * definer's rights yet.
1:6950a39:  * <p>
1:6950a39:  * SQL session context is implemented as follows: Statements at root
1:6950a39:  * connection level use the instance held by the the lcc, nested
1:6950a39:  * connections maintain instances of SQLSessionContext, held by the
1:6950a39:  * activation of the calling statement. This forms a logical stack as
1:6950a39:  * required by the standard. The statement context also holds a
1:6950a39:  * reference to the current SQLSessionContext.
1:6950a39:  * <p>
1:6950a39:  * When a dynamic result set references e.g. current role, the value
1:6950a39:  * retrieved will always be that of the current role when the
1:6950a39:  * statement is logically executed (inside procedure/function), not
1:6950a39:  * the current value when the result set is accessed outside the
1:6950a39:  * stored procedure/function.  This works since the nested SQL session
1:6950a39:  * context is kept by the caller activation, so even though the
1:6950a39:  * statement context of the call has been popped, we can get at the
1:6950a39:  * final state of the nested SQL session context since the caller's
1:6950a39:  * activation is alive as long as dynamic result sets need it).
1:6950a39:  * <p>
1:6950a39:  * If more than one nested connection is used inside a shared
1:6950a39:  * procedure, they will share the same nested SQL session
1:6950a39:  * context. Since the same dynamic call context is involved, this
1:6950a39:  * seems correct.
2:6950a39:  *
1:0c5bc3a:  * @see LanguageConnectionContext#pushNestedSessionContext
1:0c5bc3a:  */
1:0c5bc3a: 
1:6950a39: public interface SQLSessionContext {
1:0c5bc3a: 
1:0c5bc3a:     /**
1:6950a39:      * Set the SQL role of this SQL connection context
1:0c5bc3a:      */
1:6950a39:     public void setRole(String role);
1:0c5bc3a: 
1:0c5bc3a:     /**
1:6950a39:      * Get the SQL role of this SQL connection context
1:0c5bc3a:      */
1:6950a39:     public String getRole();
1:6950a39: 
1:0c5bc3a:     /**
1:9f60172:      * Set the SQL current user of this SQL connection context
1:9f60172:      */
1:9f60172:     public void setUser(String user);
1:9f60172: 
1:9f60172:     /**
1:9f60172:      * Get the SQL current user of this SQL connection context
1:9f60172:      */
1:9f60172:     public String getCurrentUser();
1:9f60172: 
1:9f60172:     /**
1:6950a39:      * Set the schema of this SQL connection context
1:6950a39:      */
1:6950a39:     public void setDefaultSchema(SchemaDescriptor sd);
1:6950a39: 
5:6950a39:     /**
1:6950a39:      * Get the schema of this SQL connection context
1:0c5bc3a:      */
1:6950a39:     public SchemaDescriptor getDefaultSchema();
1:0c5bc3a: 
1:0c5bc3a:     /**
1:0c5bc3a:      * Get a handle to the session's constraint modes.
1:af1c18c:      * The caller is responsible for any cloning needed.
1:af1c18c:      * @return constraint modes map
1:af1c18c:      */
1:f6d02c9:     public HashMap<UUID, Boolean> getConstraintModes();
1:0c5bc3a: 
1:0c5bc3a:     /**
1:0c5bc3a:      * Initialize a inferior session context with the constraint mode map
1:af1c18c:      * of the parent session context.
1:af1c18c:      * @param hm constraint mode map
1:af1c18c:      */
1:f6d02c9:     public void setConstraintModes(HashMap<UUID, Boolean> hm);
1:af1c18c: 
1:af1c18c:     /**
1:af1c18c:      * Set the constraint mode for this constraint to {@code deferred}.
1:af1c18c:      * If {@code deferred} is {@code false}, to immediate checking,
1:af1c18c:      * if {@code true} to deferred checking.
1:af1c18c:      *
1:af1c18c:      * @param constraintId The constraint id
1:af1c18c:      * @param deferred  The new constraint mode
1:af1c18c:      */
1:af1c18c:     public void setDeferred(UUID constraintId, boolean deferred);
1:af1c18c: 
1:af1c18c:     /**
1:af1c18c:      * Return {@code Boolean.TRUE} if the constraint mode for this
1:af1c18c:      * constraint/index has been set to deferred, {@code Boolean.FALSE} if
1:af1c18c:      * it has been set to immediate.  Any ALL setting is considered also.
1:af1c18c:      * If the constraint mode hasn't been set for this constraint,
1:af1c18c:      * return {@code null}. The constraint mode is the effectively the initial
1:af1c18c:      * constraint mode in this case.
1:af1c18c:      *
1:af1c18c:      * @param constraintId the constraint id
1:af1c18c:      * @return {@code Boolean.TRUE} if the constraint mode for this
1:af1c18c:      * constraint/index has been set to deferred, {@code Boolean.FALSE} if
1:af1c18c:      * it has been set to immediate.
1:af1c18c:      */
1:af1c18c:     public Boolean isDeferred(UUID constraintId);
1:af1c18c: 
1:af1c18c:     /**
1:0c5bc3a:      * Clear deferred information for this transaction.
1:0c5bc3a:      */
1:0c5bc3a:     public void resetConstraintModes();
1:0c5bc3a: 
1:0c5bc3a:     /**
1:0c5bc3a:      * Set the constraint mode for all deferrable constraints to
1:0c5bc3a:      * {@code deferred}.
1:0c5bc3a:      * If {@code deferred} is {@code false}, set to immediate checking,
2:0c5bc3a:      * if {@code true} to deferred checking.
1:0c5bc3a:      * {@code null} is allowed: it means no ALL setting exists.
1:0c5bc3a:      *
1:0c5bc3a:      * @param deferred the mode to set
1:0c5bc3a:      */
1:0c5bc3a:     public void setDeferredAll(Boolean deferred);
1:0c5bc3a: 
1:0c5bc3a:     /**
1:0c5bc3a:      * Get state of DEFERRED ALL setting.
1:0c5bc3a:      *
1:0c5bc3a:      * @return {@code True} is deferred all constraint mode has been
1:0c5bc3a:      *         set for this session context.
1:0c5bc3a:      *         {@code False} is deferred immediate has been set for this
1:0c5bc3a:      *         session context.
1:0c5bc3a:      *         {@code null} means no ALL setting has been made for this context
1:0c5bc3a:      */
1:0c5bc3a:     public Boolean getDeferredAll();
1:0c5bc3a: 
1:6950a39: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:f6d02c9
/////////////////////////////////////////////////////////////////////////
1:     public HashMap<UUID, Boolean> getConstraintModes();
1:     public void setConstraintModes(HashMap<UUID, Boolean> hm);
/////////////////////////////////////////////////////////////////////////
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
/////////////////////////////////////////////////////////////////////////
0:     public HashMap<Long, Boolean> getUniquePKConstraintModes();
1: 
1:     /**
0:      * Get a handle to the session's check constraint modes.
1:      * The caller is responsible for any cloning needed.
1:      * @return constraint modes map
1:      */
0:     public HashMap<UUID, Boolean> getCheckConstraintModes();
/////////////////////////////////////////////////////////////////////////
0:      * Initialize a inferior session context with the check constraint mode map
1:      * of the parent session context.
1:      * @param hm constraint mode map
1:      */
0:     public void setCheckConstraintModes(HashMap<UUID, Boolean> hm);
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * Set the constraint mode for this constraint to {@code deferred}.
1:      * If {@code deferred} is {@code false}, to immediate checking,
1:      * if {@code true} to deferred checking.
1:      *
1:      * @param constraintId The constraint id
1:      * @param deferred  The new constraint mode
1:      */
1:     public void setDeferred(UUID constraintId, boolean deferred);
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * Return {@code Boolean.TRUE} if the constraint mode for this
1:      * constraint/index has been set to deferred, {@code Boolean.FALSE} if
1:      * it has been set to immediate.  Any ALL setting is considered also.
1:      * If the constraint mode hasn't been set for this constraint,
1:      * return {@code null}. The constraint mode is the effectively the initial
1:      * constraint mode in this case.
1:      *
1:      * @param constraintId the constraint id
1:      * @return {@code Boolean.TRUE} if the constraint mode for this
1:      * constraint/index has been set to deferred, {@code Boolean.FALSE} if
1:      * it has been set to immediate.
1:      */
1:     public Boolean isDeferred(UUID constraintId);
1: 
1:     /**
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1:  * @see LanguageConnectionContext#pushNestedSessionContext
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Get a handle to the session's constraint modes.
0:      * The caller is responsible for any cloning needed.
0:      * @return constraint modes map
1:      */
0:     public HashMap<Long, Boolean> getConstraintModes();
1: 
1:     /**
1:      * Initialize a inferior session context with the constraint mode map
0:      * of the parent session context.
0:      * @param hm constraint mode map
1:      */
0:     public void setConstraintModes(HashMap<Long, Boolean> hm);
1: 
1:     /**
0:      * Set the constraint mode for this constraint/index to {@code deferred}.
0:      * If {@code deferred} is {@code false}, to immediate checking,
1:      * if {@code true} to deferred checking.
1:      *
0:      * @param conglomId The conglomerate id of the backing index for the
0:      *                  constraint .
0:      * @param deferred  The new constraint mode
1:      */
0:     public void setDeferred(long conglomId, boolean deferred);
1: 
1:     /**
0:      * Return {@code Boolean.TRUE} if the constraint mode for this
0:      * constraint/index has been set to deferred, {@code Boolean.FALSE} if
0:      * it has been set to immediate.  Any ALL setting is considered also.
0:      * If the constraint mode hasn't been set for this constraint,
0:      * return {@code null}. The constraint mode is the effectively the initial
0:      * constraint mode in this case.
1:      */
0:     public Boolean isDeferred(long conglomId);
1: 
1:     /**
1:      * Clear deferred information for this transaction.
1:      */
1:     public void resetConstraintModes();
1: 
1:     /**
1:      * Set the constraint mode for all deferrable constraints to
1:      * {@code deferred}.
1:      * If {@code deferred} is {@code false}, set to immediate checking,
1:      * if {@code true} to deferred checking.
1:      * {@code null} is allowed: it means no ALL setting exists.
1:      *
1:      * @param deferred the mode to set
1:      */
1:     public void setDeferredAll(Boolean deferred);
1: 
1:     /**
1:      * Get state of DEFERRED ALL setting.
1:      *
1:      * @return {@code True} is deferred all constraint mode has been
1:      *         set for this session context.
1:      *         {@code False} is deferred immediate has been set for this
1:      *         session context.
1:      *         {@code null} means no ALL setting has been made for this context
1:      */
1:     public Boolean getDeferredAll();
1: 
commit:9f60172
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * Set the SQL current user of this SQL connection context
1:      */
1:     public void setUser(String user);
1: 
1:     /**
1:      * Get the SQL current user of this SQL connection context
1:      */
1:     public String getCurrentUser();
1: 
1:     /**
commit:6950a39
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.conn.SQLSessionContext
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.conn;
1: 
1: import java.lang.String;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
1: /**
1:  * An implementation of this interface encapsulates some of the SQL
1:  * session context's state variables, cf. SQL 2003, section 4.37.3,
1:  * notably those which we need to save and restore when entering a
1:  * stored procedure or function (which can contain SQL and thus a
1:  * nested connection), cf. 4.37.3, 4.27.3 and 4.34.1.1.  <p> Presently
1:  * this set contains the following properties: <ul> <li>current
1:  * role</li> <li>current schema</li> </ul>
1:  *
1:  * The standard specifies that the authorization stack be copied onto
1:  * the new SQL session context before it is pushed (and possibly
1:  * modifed) with a new cell for the authorization ids (user, role). In
1:  * our implementation we merge these two stacks for now. Also, the
1:  * authorization id of current user is not represented yet, since it
1:  * can not be modified in a session; Derby can not run routines with
1:  * definer's rights yet.
1:  * <p>
1:  * SQL session context is implemented as follows: Statements at root
1:  * connection level use the instance held by the the lcc, nested
1:  * connections maintain instances of SQLSessionContext, held by the
1:  * activation of the calling statement. This forms a logical stack as
1:  * required by the standard. The statement context also holds a
1:  * reference to the current SQLSessionContext.
1:  * <p>
1:  * When a dynamic result set references e.g. current role, the value
1:  * retrieved will always be that of the current role when the
1:  * statement is logically executed (inside procedure/function), not
1:  * the current value when the result set is accessed outside the
1:  * stored procedure/function.  This works since the nested SQL session
1:  * context is kept by the caller activation, so even though the
1:  * statement context of the call has been popped, we can get at the
1:  * final state of the nested SQL session context since the caller's
1:  * activation is alive as long as dynamic result sets need it).
1:  * <p>
1:  * If more than one nested connection is used inside a shared
1:  * procedure, they will share the same nested SQL session
1:  * context. Since the same dynamic call context is involved, this
1:  * seems correct.
1:  *
0:  * @see org.apache.derby.iapi.sql.conn.LanguageConnectionContext#setupNestedSessionContext
1:  */
1: 
1: public interface SQLSessionContext {
1: 
1:     /**
1:      * Set the SQL role of this SQL connection context
0:      * The empty string is returned if role is NONE.
1:      */
1:     public void setRole(String role);
1: 
1:     /**
1:      * Get the SQL role of this SQL connection context
1:      */
1:     public String getRole();
1: 
1:     /**
1:      * Set the schema of this SQL connection context
1:      */
1:     public void setDefaultSchema(SchemaDescriptor sd);
1: 
1:     /**
1:      * Get the schema of this SQL connection context
1:      */
1:     public SchemaDescriptor getDefaultSchema();
1: }
============================================================================