1:cbd0ff1: /*
3:cbd0ff1:  
1:cbd0ff1:    Derby - Class org.apache.derby.client.am.ClientJDBCObjectFactory
1:cbd0ff1:  
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:cbd0ff1:  
1:cbd0ff1:       http://www.apache.org/licenses/LICENSE-2.0
1:cbd0ff1:  
1:cbd0ff1:    Unless required by applicable law or agreed to in writing, software
1:cbd0ff1:    distributed under the License is distributed on an "AS IS" BASIS,
1:cbd0ff1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cbd0ff1:    See the License for the specific language governing permissions and
1:cbd0ff1:    limitations under the License.
1:cbd0ff1:  
2:cbd0ff1:  */
1:2e7a2af: 
1:cbd0ff1: package org.apache.derby.client.am;
1:cbd0ff1: 
1:69e3d06: import java.sql.BatchUpdateException;
1:69e3d06: import java.sql.CallableStatement;
1:69e3d06: import java.sql.PreparedStatement;
1:b13b17c: import java.sql.SQLException;
1:cbd0ff1: import org.apache.derby.client.ClientPooledConnection;
1:8fcae92: import org.apache.derby.client.ClientXAConnection;
1:69e3d06: import java.util.Properties;
1:1beab6c: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1:1beab6c: import org.apache.derby.client.am.stmtcache.StatementKey;
1:7863d83: import org.apache.derby.jdbc.BasicClientDataSource40;
1:cbd0ff1: 
1:2e7a2af: /**
1:cbd0ff1:  *
1:cbd0ff1:  * The methods of this interface are used to return JDBC interface
1:cbd0ff1:  * implementations to the user depending on the JDBC version supported
1:ee33904:  * by the JDK.
1:cbd0ff1:  *
1:cbd0ff1:  */
1:b54918e: 
1:cbd0ff1: public interface ClientJDBCObjectFactory {
1:cbd0ff1:     
1:b54918e:     /**
1:6469ca6:      * This method is used to return an instance of the {@link
1:6469ca6:      * org.apache.derby.client.ClientPooledConnection} class which
1:b13b17c:      * implements {@code javax.sql.PooledConnection}.
1:cbd0ff1:      */
2:8269b78:     ClientPooledConnection newClientPooledConnection(
1:7863d83:             BasicClientDataSource40 ds,
1:8269b78:             LogWriter logWriter,
1:8269b78:             String user,
1:8269b78:             String password) throws SQLException;
1:cbd0ff1:     
1:b565f41:         /**
2:cbd0ff1:      * This method is used to return an instance of
1:8fcae92:      * ClientXAConnection (or ClientXAConnection40) class which
1:b13b17c:      * implements {@code javax.sql.XAConnection}.
1:cbd0ff1:      */
1:7863d83:     ClientXAConnection newClientXAConnection(BasicClientDataSource40 ds,
1:cbd0ff1:             LogWriter logWriter,String user,String password)
2:cbd0ff1:             throws SQLException;
1:cbd0ff1:     
3:cbd0ff1:     /**
1:69e3d06:      * Returns an instance of ClientCallableStatement,
1:69e3d06:      * ClientCallableStatement40 or ClientCallableStatement42 which
1:69e3d06:      * all implement java.sql.CallableStatement.
1:407e52d:      *
1:407e52d:      * @param agent       The instance of NetAgent associated with this
1:407e52d:      *                    CallableStatement object.
1:407e52d:      * @param connection  The connection object associated with this
1:407e52d:      *                    PreparedStatement Object.
1:407e52d:      * @param sql         A String object that is the SQL statement to be sent 
1:407e52d:      *                    to the database.
1:407e52d:      * @param type        One of the ResultSet type constants
1:407e52d:      * @param concurrency One of the ResultSet concurrency constants
1:407e52d:      * @param holdability One of the ResultSet holdability constants
1:407e52d:      * @param cpc         The PooledConnection object that will be used to 
1:407e52d:      *                    notify the PooledConnection reference of the Error 
1:407e52d:      *                    Occurred and the Close events.
1:407e52d:      * @return a CallableStatement object
1:407e52d:      * @throws SqlException
1:2e7a2af:      */
1:69e3d06:     ClientCallableStatement newCallableStatement(Agent agent,
1:69e3d06:             ClientConnection connection, String sql,
1:407e52d:             int type,int concurrency,int holdability,
1:407e52d:             ClientPooledConnection cpc) throws SqlException;
1:cbd0ff1:     
1:cbd0ff1:     /**
1:9ec13b2:      * Returns an instance of LogicalConnection.
1:b64ccfc:      * This method returns an instance of LogicalConnection
1:b13b17c:      * (or LogicalConnection40) which implements {@code java.sql.Connection}.
1:b64ccfc:      */
1:b64ccfc:     LogicalConnection newLogicalConnection(
1:69e3d06:                     ClientConnection physicalConnection,
1:b64ccfc:                     ClientPooledConnection pooledConnection)
1:b64ccfc:         throws SqlException;
1:b64ccfc:     
1:b64ccfc:    /**
1:1beab6c:     * Returns an instance of a {@code CachingLogicalConnection}, which
1:1beab6c:     * provides caching of prepared statements.
1:2e7a2af:     *
1:1beab6c:     * @param physicalConnection the underlying physical connection
1:1beab6c:     * @param pooledConnection the pooled connection
1:1beab6c:     * @param stmtCache statement cache
1:1beab6c:     * @return A logical connection with statement caching capabilities.
1:1beab6c:     *
1:1beab6c:     * @throws SqlException if creation of the logical connection fails
1:cbd0ff1:     */
1:1beab6c:     public LogicalConnection newCachingLogicalConnection(
1:69e3d06:             ClientConnection physicalConnection,
1:1beab6c:             ClientPooledConnection pooledConnection,
1:1beab6c:             JDBCStatementCache stmtCache) throws SqlException;
1:2e7a2af: 
1:2e7a2af:     /**
2:cbd0ff1:      * This method returns an instance of PreparedStatement
1:b13b17c:      * (or PreparedStatement40) which implements
1:b13b17c:      * {@code java.sql.PreparedStatement}.
1:b13b17c:      * It has the {@link ClientPooledConnection} as one of its parameters
1:407e52d:      * this is used to raise the Statement Events when the prepared
1:407e52d:      * statement is closed
1:407e52d:      *
1:407e52d:      * @param agent The instance of NetAgent associated with this
1:407e52d:      *              CallableStatement object.
1:407e52d:      * @param connection The connection object associated with this
1:407e52d:      *                   PreparedStatement Object.
1:407e52d:      * @param sql        A String object that is the SQL statement to be sent
1:407e52d:      *                   to the database.
1:407e52d:      * @param section    Section
1:407e52d:      * @param cpc The ClientPooledConnection wraps the underlying physical
1:407e52d:      *            connection associated with this prepared statement.
1:407e52d:      *            It is used to pass the Statement closed and the Statement
1:407e52d:      *            error occurred events that occur back to the
1:407e52d:      *            ClientPooledConnection.
1:407e52d:      * @return a PreparedStatement object
1:407e52d:      * @throws SqlException
1:cbd0ff1:      */
1:69e3d06:     ClientPreparedStatement newPreparedStatement(Agent agent,
1:69e3d06:             ClientConnection connection,
1:407e52d:             String sql,Section section,ClientPooledConnection cpc) 
1:407e52d:             throws SqlException;
1:cbd0ff1:     
1:cbd0ff1:     /**
1:b13b17c:      * Returns an instance of PreparedStatement (or
1:b13b17c:      * PreparedStatement40) which implements {@code
1:b13b17c:      * java.sql.PreparedStatement}.
1:b13b17c: 
2:407e52d:      * It has the ClientPooledConnection as one of its parameters 
1:407e52d:      * this is used to raise the Statement Events when the prepared
1:407e52d:      * statement is closed
1:407e52d:      *
1:407e52d:      * @param agent The instance of NetAgent associated with this
1:407e52d:      *              CallableStatement object.
1:407e52d:      * @param connection  The connection object associated with this
1:407e52d:      *                    PreparedStatement Object.
1:407e52d:      * @param sql         A String object that is the SQL statement
1:407e52d:      *                    to be sent to the database.
1:407e52d:      * @param type        One of the ResultSet type constants.
1:407e52d:      * @param concurrency One of the ResultSet concurrency constants.
1:407e52d:      * @param holdability One of the ResultSet holdability constants.
1:407e52d:      * @param autoGeneratedKeys a flag indicating whether auto-generated
1:407e52d:      *                          keys should be returned.
1:407e52d:      * @param columnNames an array of column names indicating the columns that
1:407e52d:      *                    should be returned from the inserted row or rows.
1:b52081a:      * @param columnIndexes an array of column indexes indicating the columns
1:b52081a:      *                    that should be returned form the inserted row.                   
1:407e52d:      * @param cpc The ClientPooledConnection wraps the underlying physical
1:407e52d:      *            connection associated with this prepared statement
1:407e52d:      *            it is used to pass the Statement closed and the Statement
1:407e52d:      *            error occurred events that occur back to the
1:407e52d:      *            ClientPooledConnection.
1:407e52d:      * @return a PreparedSatement object
1:407e52d:      * @throws SqlException
1:cbd0ff1:      */
1:69e3d06:     ClientPreparedStatement newPreparedStatement(Agent agent,
1:69e3d06:             ClientConnection connection,String sql,
1:cbd0ff1:             int type,int concurrency,int holdability,int autoGeneratedKeys,
1:b52081a:             String [] columnNames, int[] columnIndexes, ClientPooledConnection cpc) 
1:407e52d:             throws SqlException;
1:407e52d:     
1:cbd0ff1:     
1:cbd0ff1:     /**
1:ee33904:      * Returns a new logical prepared statement object.
1:1beab6c:      *
1:1beab6c:      * @param ps underlying physical prepared statement
1:1beab6c:      * @param stmtKey key for the underlying physical prepared statement
1:d6cf884:      * @param cacheInteractor the statement cache interactor
1:1beab6c:      * @return A logical prepared statement.
1:cbd0ff1:      */
1:d6cf884:     LogicalPreparedStatement newLogicalPreparedStatement(
1:69e3d06:             PreparedStatement ps,
1:1beab6c:             StatementKey stmtKey,
1:d6cf884:             StatementCacheInteractor cacheInteractor);
1:cbd0ff1: 
1:cbd0ff1:     /**
1:1beab6c:      * Returns a new logical callable statement object.
2:1beab6c:      *
1:1beab6c:      * @param cs underlying physical callable statement
1:1beab6c:      * @param stmtKey key for the underlying physical callable statement
1:d6cf884:      * @param cacheInteractor the statement cache interactor
1:1beab6c:      * @return A logical callable statement.
1:cbd0ff1:      */
1:d6cf884:     LogicalCallableStatement newLogicalCallableStatement(
1:69e3d06:             CallableStatement cs,
1:1beab6c:             StatementKey stmtKey,
1:d6cf884:             StatementCacheInteractor cacheInteractor);
1:cbd0ff1: 
1:cbd0ff1:     /**
1:407e52d:      * This method returns an instance of NetConnection (or NetConnection40)
1:475fc20:      * class which extends from ClientConnection
1:407e52d:      * this implements the java.sql.Connection interface
1:cbd0ff1:      */
1:69e3d06:     ClientConnection newNetConnection(
1:8269b78:             LogWriter logWriter,
1:cbd0ff1:             int driverManagerLoginTimeout,String serverName,
1:69e3d06:             int portNumber,String databaseName, Properties properties)
1:2e7a2af:             throws SqlException;
1:cbd0ff1:     
1:cbd0ff1:     /**
1:b13b17c:      * This method returns an instance of NetConnection (or
1:475fc20:      * NetConnection40) class which extends from ClientConnection.  This
1:b13b17c:      * implements the {@code java.sql.Connection} interface.
1:cbd0ff1:      */
1:69e3d06:     ClientConnection newNetConnection(
1:6372907:             LogWriter logWriter,
1:8269b78:             String user,
1:8269b78:             String password,
1:7863d83:             BasicClientDataSource40 dataSource,
1:8269b78:             int rmId,
2:cbd0ff1:             boolean isXAConn) throws SqlException;
1:cbd0ff1:     
1:cbd0ff1:     /**
2:cbd0ff1:      * This method returns an instance of NetConnection (or NetConnection40)
1:b13b17c:      * class which extends Connection.
1:b13b17c:      * This implements the {@code java.sql.Connection} interface.
1:407e52d:      * This method is used to pass the ClientPooledConnection
1:407e52d:      * object to the NetConnection object which can then be used to pass the 
1:407e52d:      * statement events back to the user
1:407e52d:      *
1:6372907:      * @param logWriter    LogWriter object associated with this connection
1:407e52d:      * @param user         user id for this connection
1:407e52d:      * @param password     password for this connection
1:407e52d:      * @param dataSource   The DataSource object passed from the PooledConnection 
1:407e52d:      *                     object from which this constructor was called
1:407e52d:      * @param rmId         The Resource Manager ID for XA Connections
1:407e52d:      * @param isXAConn     true if this is a XA connection
1:407e52d:      * @param cpc          The ClientPooledConnection object from which this 
1:407e52d:      *                     NetConnection constructor was called. This is used
1:407e52d:      *                     to pass StatementEvents back to the pooledConnection
1:407e52d:      *                     object
1:407e52d:      * @throws             SqlException
1:407e52d:      */
1:69e3d06:     ClientConnection newNetConnection(
1:6372907:             LogWriter logWriter,
1:407e52d:             String user,String password,
1:7863d83:             BasicClientDataSource40 dataSource,int rmId,
1:407e52d:             boolean isXAConn,ClientPooledConnection cpc) throws SqlException;
1:407e52d:     
1:407e52d:     /**
1:b13b17c:      * This method returns an instance of NetResultSet(or
1:475fc20:      * NetResultSet40) which extends from ClientResultSet which implements
1:b13b17c:      * {@code java.sql.ResultSet}.
1:cbd0ff1:      */
1:69e3d06:     ClientResultSet newNetResultSet(
1:69e3d06:             Agent netAgent,
1:69e3d06:             MaterialStatement netStatement,
1:c247315:             Cursor cursor,
1:69e3d06:             int qryprctyp,
1:69e3d06:             int sqlcsrhld,
1:69e3d06:             int qryattscr,
1:69e3d06:             int qryattsns,
1:69e3d06:             int qryattset,
1:69e3d06:             long qryinsid,
1:69e3d06:             int actualResultSetType,
1:69e3d06:             int actualResultSetConcurrency,
1:69e3d06:             int actualResultSetHoldability) throws SqlException;
1:cbd0ff1:     
1:cbd0ff1:     /**
1:b13b17c:      * This method provides an instance of NetDatabaseMetaData (or
1:475fc20:      * NetDatabaseMetaData40) which extends from ClientDatabaseMetaData
1:b13b17c:      * which implements {@code java.sql.DatabaseMetaData}.
1:cbd0ff1:      */
1:69e3d06:     ClientDatabaseMetaData newNetDatabaseMetaData(Agent netAgent,
1:69e3d06:             ClientConnection netConnection);
1:cbd0ff1:     
1:cbd0ff1:      /**
2:2e7a2af:      * This method provides an instance of Statement or Statement40 
2:2e7a2af:      * depending on the jdk version under use
1:2e7a2af:      * @param  agent            Agent
1:2e7a2af:      * @param  connection       Connection
1:2e7a2af:      * @param  type             int
1:2e7a2af:      * @param  concurrency      int
1:2e7a2af:      * @param  holdability      int
1:2e7a2af:      * @param autoGeneratedKeys int
1:2e7a2af:      * @param columnNames       String[]
1:b52081a:      * @param columnIndexes     int[]
1:b13b17c:      * @return a {@code java.sql.Statement} implementation
2:2e7a2af:      * @throws SqlException
1:2e7a2af:      *
1:2e7a2af:      */
1:69e3d06:      ClientStatement newStatement(Agent agent,
1:69e3d06:                      ClientConnection connection, int type,
1:2e7a2af:                      int concurrency, int holdability,
1:b52081a:                      int autoGeneratedKeys, String[] columnNames,
1:b52081a:                      int[] columnIndexes) 
1:2e7a2af:                      throws SqlException;
1:2e7a2af:      
1:2e7a2af:     /**
1:2e7a2af:      * Returns an instanceof ColumnMetaData or ColumnMetaData40 depending 
1:2e7a2af:      * on the jdk version under use
1:2e7a2af:      *
1:2e7a2af:      * @param logWriter LogWriter
1:2e7a2af:      * @return a ColumnMetaData implementation
1:2e7a2af:      *
1:2e7a2af:      */
1:2e7a2af:     ColumnMetaData newColumnMetaData(LogWriter logWriter); 
1:2e7a2af: 
1:2e7a2af:     /**
1:2e7a2af:      * Returns an instanceof ColumnMetaData or ColumnMetaData40 depending 
1:2e7a2af:      * on the jdk version under use
1:2e7a2af:      *
1:2e7a2af:      * @param logWriter  LogWriter
1:2e7a2af:      * @param upperBound int
1:2e7a2af:      * @return a ColumnMetaData implementation
1:2e7a2af:      *
1:2e7a2af:      */
1:2e7a2af:     ColumnMetaData newColumnMetaData(LogWriter logWriter, int upperBound);
1:2e7a2af:     
1:2e7a2af:     /**
1:2e7a2af:      * 
1:2e7a2af:      * returns an instance of ParameterMetaData or ParameterMetaData40 depending 
1:2e7a2af:      * on the jdk version under use
1:2e7a2af:      *
1:2e7a2af:      * @param columnMetaData ColumnMetaData
1:2e7a2af:      * @return a ParameterMetaData implementation
1:2e7a2af:      *
1:2e7a2af:      */
1:69e3d06:     ClientParameterMetaData newParameterMetaData(ColumnMetaData columnMetaData);
1:cbd0ff1:     
1:cbd0ff1:     /**
1:b54918e:      * Creates a BatchUpdateException depending on the JVM level.
1:b54918e:      */
1:69e3d06:     public BatchUpdateException newBatchUpdateException
1:b54918e:         ( LogWriter logWriter, ClientMessageId msgid, Object[] args, long[] updateCounts, SqlException cause );
1:cbd0ff1: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7863d83
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.BasicClientDataSource40;
/////////////////////////////////////////////////////////////////////////
1:             BasicClientDataSource40 ds,
/////////////////////////////////////////////////////////////////////////
1:     ClientXAConnection newClientXAConnection(BasicClientDataSource40 ds,
/////////////////////////////////////////////////////////////////////////
1:             BasicClientDataSource40 dataSource,
/////////////////////////////////////////////////////////////////////////
1:             BasicClientDataSource40 dataSource,int rmId,
commit:b565f41
/////////////////////////////////////////////////////////////////////////
1:         /**
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:475fc20
/////////////////////////////////////////////////////////////////////////
1:      * NetConnection40) class which extends from ClientConnection.  This
/////////////////////////////////////////////////////////////////////////
0:      * which extends from ClientConnection
/////////////////////////////////////////////////////////////////////////
1:      * class which extends from ClientConnection
/////////////////////////////////////////////////////////////////////////
0:      * NetConnection40) class which extends from ClientConnection.  This
/////////////////////////////////////////////////////////////////////////
0:      * ClientConnection this implements the
/////////////////////////////////////////////////////////////////////////
1:      * NetResultSet40) which extends from ClientResultSet which implements
/////////////////////////////////////////////////////////////////////////
1:      * NetDatabaseMetaData40) which extends from ClientDatabaseMetaData
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.BatchUpdateException;
1: import java.sql.CallableStatement;
1: import java.sql.PreparedStatement;
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:      * Returns an instance of ClientCallableStatement,
1:      * ClientCallableStatement40 or ClientCallableStatement42 which
1:      * all implement java.sql.CallableStatement.
/////////////////////////////////////////////////////////////////////////
1:     ClientCallableStatement newCallableStatement(Agent agent,
1:             ClientConnection connection, String sql,
/////////////////////////////////////////////////////////////////////////
1:                     ClientConnection physicalConnection,
/////////////////////////////////////////////////////////////////////////
1:             ClientConnection physicalConnection,
/////////////////////////////////////////////////////////////////////////
1:     ClientPreparedStatement newPreparedStatement(Agent agent,
1:             ClientConnection connection,
/////////////////////////////////////////////////////////////////////////
1:     ClientPreparedStatement newPreparedStatement(Agent agent,
1:             ClientConnection connection,String sql,
/////////////////////////////////////////////////////////////////////////
1:             PreparedStatement ps,
/////////////////////////////////////////////////////////////////////////
1:             CallableStatement cs,
/////////////////////////////////////////////////////////////////////////
1:     ClientConnection newNetConnection(
0:             String databaseName,Properties properties)
/////////////////////////////////////////////////////////////////////////
1:     ClientConnection newNetConnection(
/////////////////////////////////////////////////////////////////////////
1:     ClientConnection newNetConnection(
1:             int portNumber,String databaseName, Properties properties)
/////////////////////////////////////////////////////////////////////////
0:     ClientConnection newNetConnection(
/////////////////////////////////////////////////////////////////////////
0:     ClientConnection newNetConnection(
/////////////////////////////////////////////////////////////////////////
0:     ClientConnection newNetConnection(
/////////////////////////////////////////////////////////////////////////
1:     ClientResultSet newNetResultSet(
1:             Agent netAgent,
1:             MaterialStatement netStatement,
1:             int qryprctyp,
1:             int sqlcsrhld,
1:             int qryattscr,
1:             int qryattsns,
1:             int qryattset,
1:             long qryinsid,
1:             int actualResultSetType,
1:             int actualResultSetConcurrency,
1:             int actualResultSetHoldability) throws SqlException;
1:     ClientDatabaseMetaData newNetDatabaseMetaData(Agent netAgent,
1:             ClientConnection netConnection);
/////////////////////////////////////////////////////////////////////////
1:      ClientStatement newStatement(Agent agent,
0:              ClientConnection connection)
/////////////////////////////////////////////////////////////////////////
0:      ClientStatement newStatement(Agent agent,
1:                      ClientConnection connection, int type,
/////////////////////////////////////////////////////////////////////////
1:     ClientParameterMetaData newParameterMetaData(ColumnMetaData columnMetaData);
1:     public BatchUpdateException newBatchUpdateException
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
0:      * This method is used to return an instance of {@link
0:      * org.apache.derby.client.ClientPooledConnection} (or {@link
0:      * org.apache.derby.client.ClientPooledConnection40}) class which
1:      * implements {@code javax.sql.PooledConnection}.
/////////////////////////////////////////////////////////////////////////
0:      * implements {@code javax.sql.PooledConnection}.
/////////////////////////////////////////////////////////////////////////
1:      * implements {@code javax.sql.XAConnection}.
0:      * Returns an instance of CallableStatement or
0:      * CallableStatement40 which implements {@code java.sql.CallableStatement}
/////////////////////////////////////////////////////////////////////////
0:             Connection connection, String sql,
1:      * (or LogicalConnection40) which implements {@code java.sql.Connection}.
0:                     Connection physicalConnection,
/////////////////////////////////////////////////////////////////////////
0:             Connection physicalConnection,
1:      * (or PreparedStatement40) which implements
1:      * {@code java.sql.PreparedStatement}.
1:      * It has the {@link ClientPooledConnection} as one of its parameters
/////////////////////////////////////////////////////////////////////////
0:             Connection connection,
1:      * Returns an instance of PreparedStatement (or
1:      * PreparedStatement40) which implements {@code
1:      * java.sql.PreparedStatement}.
1: 
/////////////////////////////////////////////////////////////////////////
0:             Connection connection,String sql,
/////////////////////////////////////////////////////////////////////////
1:      * This method returns an instance of NetConnection (or
0:      * NetConnection40) class which extends from Connection.  This
1:      * implements the {@code java.sql.Connection} interface.
0:     Connection newNetConnection(
0:      * which extends from Connection
0:      * this implements the {@code java.sql.Connection} interface
0:     Connection newNetConnection(
0:             ClientBaseDataSourceRoot clientDataSource,
/////////////////////////////////////////////////////////////////////////
0:     Connection newNetConnection(
0:      * This method returns an instance of NetConnection (or
0:      * NetConnection40) class which extends from Connection.  This
0:      * implements the {@code java.sql.Connection} interface.
0:     Connection newNetConnection(
0:             ClientBaseDataSourceRoot dataSource,
0:      * This method returns an instance of NetConnection
0:      * Connection this implements the
0:      * {@code java.sql.Connection interface}.
0:     Connection newNetConnection(
0:             ClientBaseDataSourceRoot dataSource,
1:      * class which extends Connection.
1:      * This implements the {@code java.sql.Connection} interface.
/////////////////////////////////////////////////////////////////////////
0:     Connection newNetConnection(
0:             ClientBaseDataSourceRoot dataSource,int rmId,
1:      * This method returns an instance of NetResultSet(or
0:      * NetResultSet40) which extends from ResultSet which implements
1:      * {@code java.sql.ResultSet}.
/////////////////////////////////////////////////////////////////////////
1:      * This method provides an instance of NetDatabaseMetaData (or
0:      * NetDatabaseMetaData40) which extends from DatabaseMetaData
1:      * which implements {@code java.sql.DatabaseMetaData}.
0:             Connection netConnection);
1:      * @return a {@code java.sql.Statement} implementation
0:              Connection connection)
/////////////////////////////////////////////////////////////////////////
0:      * @return a {@code java.sql.Statement} implementation
0:                      Connection connection, int type,
commit:ee33904
/////////////////////////////////////////////////////////////////////////
1:  * by the JDK.
/////////////////////////////////////////////////////////////////////////
1:      * Returns a new logical prepared statement object.
commit:8269b78
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
/////////////////////////////////////////////////////////////////////////
1:     ClientPooledConnection newClientPooledConnection(
0:             ClientBaseDataSourceRoot ds,
1:             LogWriter logWriter,
1:             String user,
1:             String password) throws SQLException;
1:     ClientPooledConnection newClientPooledConnection(
0:             ClientBaseDataSourceRoot ds,
1:             LogWriter logWriter,
1:             String user,
1:             String password,
0:             int rmId) throws SQLException;
0:     ClientXAConnection newClientXAConnection(ClientBaseDataSourceRoot ds,
/////////////////////////////////////////////////////////////////////////
0:             org.apache.derby.jdbc.ClientBaseDataSourceRoot clientDataSource,
0:             String user,
/////////////////////////////////////////////////////////////////////////
0:             String user,
0:             String password,
0:             org.apache.derby.jdbc.ClientBaseDataSourceRoot dataSource,
1:             int rmId,
/////////////////////////////////////////////////////////////////////////
0:             LogWriter netLogWriter,
0:             String ipaddr,
0:             int portNumber,
0:             org.apache.derby.jdbc.ClientBaseDataSourceRoot dataSource,
/////////////////////////////////////////////////////////////////////////
0:             org.apache.derby.jdbc.ClientBaseDataSourceRoot dataSource,int rmId,
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6372907
/////////////////////////////////////////////////////////////////////////
1:             LogWriter logWriter,
/////////////////////////////////////////////////////////////////////////
1:             LogWriter logWriter,
/////////////////////////////////////////////////////////////////////////
1:      * @param logWriter    LogWriter object associated with this connection
/////////////////////////////////////////////////////////////////////////
0:             LogWriter logWriter,
commit:6469ca6
/////////////////////////////////////////////////////////////////////////
1:      * This method is used to return an instance of the {@link
1:      * org.apache.derby.client.ClientPooledConnection} class which
commit:407e52d
/////////////////////////////////////////////////////////////////////////
0:      * Returns an instance of org.apache.derby.client.am.CallableStatement.
0:      * or CallableStatement40 which implements java.sql.CallableStatement
1:      *
1:      * @param agent       The instance of NetAgent associated with this
1:      *                    CallableStatement object.
1:      * @param connection  The connection object associated with this
1:      *                    PreparedStatement Object.
1:      * @param sql         A String object that is the SQL statement to be sent 
1:      *                    to the database.
1:      * @param type        One of the ResultSet type constants
1:      * @param concurrency One of the ResultSet concurrency constants
1:      * @param holdability One of the ResultSet holdability constants
1:      * @param cpc         The PooledConnection object that will be used to 
1:      *                    notify the PooledConnection reference of the Error 
1:      *                    Occurred and the Close events.
1:      * @return a CallableStatement object
1:      * @throws SqlException
1:             int type,int concurrency,int holdability,
1:             ClientPooledConnection cpc) throws SqlException;
0:      * Returns an instance of PreparedStatement
/////////////////////////////////////////////////////////////////////////
1:      * It has the ClientPooledConnection as one of its parameters 
1:      * this is used to raise the Statement Events when the prepared
1:      * statement is closed
1:      *
1:      * @param agent The instance of NetAgent associated with this
1:      *              CallableStatement object.
1:      * @param connection The connection object associated with this
1:      *                   PreparedStatement Object.
1:      * @param sql        A String object that is the SQL statement to be sent
1:      *                   to the database.
1:      * @param section    Section
1:      * @param cpc The ClientPooledConnection wraps the underlying physical
1:      *            connection associated with this prepared statement.
1:      *            It is used to pass the Statement closed and the Statement
1:      *            error occurred events that occur back to the
1:      *            ClientPooledConnection.
1:      * @return a PreparedStatement object
1:      * @throws SqlException
1:             String sql,Section section,ClientPooledConnection cpc) 
1:             throws SqlException;
0:      * Returns an instance of PreparedStatement
1:      * It has the ClientPooledConnection as one of its parameters 
1:      * this is used to raise the Statement Events when the prepared
1:      * statement is closed
1:      *
1:      * @param agent The instance of NetAgent associated with this
1:      *              CallableStatement object.
1:      * @param connection  The connection object associated with this
1:      *                    PreparedStatement Object.
1:      * @param sql         A String object that is the SQL statement
1:      *                    to be sent to the database.
1:      * @param type        One of the ResultSet type constants.
1:      * @param concurrency One of the ResultSet concurrency constants.
1:      * @param holdability One of the ResultSet holdability constants.
1:      * @param autoGeneratedKeys a flag indicating whether auto-generated
1:      *                          keys should be returned.
1:      * @param columnNames an array of column names indicating the columns that
1:      *                    should be returned from the inserted row or rows.
1:      * @param cpc The ClientPooledConnection wraps the underlying physical
1:      *            connection associated with this prepared statement
1:      *            it is used to pass the Statement closed and the Statement
1:      *            error occurred events that occur back to the
1:      *            ClientPooledConnection.
1:      * @return a PreparedSatement object
1:      * @throws SqlException
0:             String [] columnNames,ClientPooledConnection cpc) 
1:             throws SqlException;
1:     
/////////////////////////////////////////////////////////////////////////
1:      * This method returns an instance of NetConnection (or NetConnection40)
0:      * class which extends from org.apache.derby.client.am.Connection
1:      * this implements the java.sql.Connection interface
1:      * This method is used to pass the ClientPooledConnection
1:      * object to the NetConnection object which can then be used to pass the 
1:      * statement events back to the user
1:      *
0:      * @param netLogWriter placeholder for NetLogWriter object associated with this connection
1:      * @param user         user id for this connection
1:      * @param password     password for this connection
1:      * @param dataSource   The DataSource object passed from the PooledConnection 
1:      *                     object from which this constructor was called
1:      * @param rmId         The Resource Manager ID for XA Connections
1:      * @param isXAConn     true if this is a XA connection
1:      * @param cpc          The ClientPooledConnection object from which this 
1:      *                     NetConnection constructor was called. This is used
1:      *                     to pass StatementEvents back to the pooledConnection
1:      *                     object
0:      * @return                        
1:      * @throws             SqlException
1:      */
0:     org.apache.derby.client.am.Connection newNetConnection(
0:             LogWriter netLogWriter,
1:             String user,String password,
0:             org.apache.derby.jdbc.ClientBaseDataSource dataSource,int rmId,
1:             boolean isXAConn,ClientPooledConnection cpc) throws SqlException;
1:     
1:     /**
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b54918e
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Creates a BatchUpdateException depending on the JVM level.
1:      */
0:     public  java.sql.BatchUpdateException    newBatchUpdateException
1:         ( LogWriter logWriter, ClientMessageId msgid, Object[] args, long[] updateCounts, SqlException cause );
commit:9ec13b2
/////////////////////////////////////////////////////////////////////////
1:      * Returns an instance of LogicalConnection.
/////////////////////////////////////////////////////////////////////////
commit:b64ccfc
/////////////////////////////////////////////////////////////////////////
1:      * This method returns an instance of LogicalConnection
0:      * (or LogicalConnection40) which implements java.sql.Connection.
1:      */
1:     LogicalConnection newLogicalConnection(
0:                     org.apache.derby.client.am.Connection physicalConnection,
1:                     ClientPooledConnection pooledConnection)
1:         throws SqlException;
1:     
1:     /**
commit:17d490d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientBaseDataSource;
/////////////////////////////////////////////////////////////////////////
0:     ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,
/////////////////////////////////////////////////////////////////////////
0:     ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,
/////////////////////////////////////////////////////////////////////////
0:             org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,String user,
/////////////////////////////////////////////////////////////////////////
0:             org.apache.derby.jdbc.ClientBaseDataSource dataSource,int rmId,
/////////////////////////////////////////////////////////////////////////
0:             int portNumber,org.apache.derby.jdbc.ClientBaseDataSource dataSource,
commit:2e7a2af
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * This method provides an instance of Statement or Statement40 
1:      * depending on the jdk version under use
0:      * @param  agent      Agent
0:      * @param  connection Connection
0:      * @return a java.sql.Statement implementation 
1:      * @throws SqlException
1:      *
1:      */
0:      Statement newStatement(Agent agent, 
0:              org.apache.derby.client.am.Connection connection) 
1:              throws SqlException;
1:      
1:      /**
1:      * This method provides an instance of Statement or Statement40 
1:      * depending on the jdk version under use
1:      * @param  agent            Agent
1:      * @param  connection       Connection
1:      * @param  type             int
1:      * @param  concurrency      int
1:      * @param  holdability      int
1:      * @param autoGeneratedKeys int
1:      * @param columnNames       String[]
0:      * @return a java.sql.Statement implementation 
1:      * @throws SqlException
1:      *
1:      */
0:      Statement newStatement(Agent agent, 
0:                      org.apache.derby.client.am.Connection connection, int type, 
1:                      int concurrency, int holdability,
0:                      int autoGeneratedKeys, String[] columnNames) 
1:                      throws SqlException;
1:      
1:     /**
1:      * Returns an instanceof ColumnMetaData or ColumnMetaData40 depending 
1:      * on the jdk version under use
1:      *
1:      * @param logWriter LogWriter
1:      * @return a ColumnMetaData implementation
1:      *
1:      */
1:     ColumnMetaData newColumnMetaData(LogWriter logWriter); 
1: 
1:     /**
1:      * Returns an instanceof ColumnMetaData or ColumnMetaData40 depending 
1:      * on the jdk version under use
1:      *
1:      * @param logWriter  LogWriter
1:      * @param upperBound int
1:      * @return a ColumnMetaData implementation
1:      *
1:      */
1:     ColumnMetaData newColumnMetaData(LogWriter logWriter, int upperBound);
1:     
1:     /**
1:      * 
1:      * returns an instance of ParameterMetaData or ParameterMetaData40 depending 
1:      * on the jdk version under use
1:      *
1:      * @param columnMetaData ColumnMetaData
1:      * @return a ParameterMetaData implementation
1:      *
1:      */
0:     ParameterMetaData newParameterMetaData(ColumnMetaData columnMetaData);
commit:cbd0ff1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.ClientJDBCObjectFactory
1:  
0:    Copyright (c) 2005,2006 The Apache Software Foundation or its licensors, where applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am;
1: 
0: import java.rmi.UnexpectedException;
1: import org.apache.derby.client.ClientPooledConnection;
0: import org.apache.derby.jdbc.ClientDataSource;
0: import java.sql.Connection;
0: import java.sql.SQLException;
1: 
1: /**
1:  *
1:  * The methods of this interface are used to return JDBC interface
1:  * implementations to the user depending on the JDBC version supported
0:  * by the jdk
1:  *
1:  */
1: 
1: public interface ClientJDBCObjectFactory {
1:     
1:     /**
1:      * This method is used to return an instance of
0:      * ClientPooledConnection (or ClientPooledConnection40) class which
0:      * implements javax.sql.PooledConnection
1:      */
0:     ClientPooledConnection newClientPooledConnection(ClientDataSource ds,
1:             LogWriter logWriter,String user,String password)
1:             throws SQLException;
1:     
1:     /**
1:      * This method is used to return an instance of
0:      * ClientPooledConnection(or ClientPooledConnection40) class which
0:      * implements javax.sql.PooledConnection
1:      */
0:     ClientPooledConnection newClientPooledConnection(ClientDataSource ds,
0:             LogWriter logWriter,String user,String password,int rmId)
1:             throws SQLException;
1:     
1:     /**
0:      * This method returns an instance of CallableStatement
0:      * (or CallableStatement40) class which implements
0:      * java.sql.CallableStatement
1:      */
0:     CallableStatement newCallableStatement(Agent agent,
0:             org.apache.derby.client.am.Connection connection, String sql,
0:             int type,int concurrency,int holdability) throws SqlException;
1:     
1:     /**
1:      * This method returns an instance of PreparedStatement
0:      * (or PreparedStatement40) which implements java.sql.PreparedStatement
1:      */
0:     PreparedStatement newPreparedStatement(Agent agent,
0:             org.apache.derby.client.am.Connection connection,
0:             String sql,Section section) throws SqlException;
1:     
1:     /**
1:      * This method returns an instance of PreparedStatement
0:      * (or PreparedStatement40) which implements java.sql.PreparedStatement
1:      */
0:     PreparedStatement newPreparedStatement(Agent agent,
0:             org.apache.derby.client.am.Connection connection,String sql,
1:             int type,int concurrency,int holdability,int autoGeneratedKeys,
0:             String [] columnNames) throws SqlException;
1:     
1:     /**
0:      * This method returns an instance of NetConnection (or NetConnection40) class
0:      * which extends from org.apache.derby.client.am.Connection
0:      * this implements the java.sql.Connection interface
1:      */
0:     org.apache.derby.client.am.Connection newNetConnection(
0:             LogWriter netLogWriter,
0:             String databaseName,java.util.Properties properties)
0:             throws SqlException;
1:     
1:     /**
0:      * This method returns an instance of NetConnection (or NetConnection40) class
0:      * which extends from org.apache.derby.client.am.Connection
0:      * this implements the java.sql.Connection interface
1:      */
0:     org.apache.derby.client.am.Connection newNetConnection(
0:             LogWriter netLogWriter,
0:             org.apache.derby.jdbc.ClientDataSource clientDataSource,String user,
0:             String password) throws SqlException;
1:     
1:     /**
1:      * This method returns an instance of NetConnection (or NetConnection40)
0:      * class which extends from org.apache.derby.client.am.Connection
0:      * this implements the java.sql.Connection interface
1:      */
0:     org.apache.derby.client.am.Connection newNetConnection(
0:             LogWriter netLogWriter,
1:             int driverManagerLoginTimeout,String serverName,
0:             int portNumber,String databaseName,java.util.Properties properties)
0:             throws SqlException;
1:     
1:     /**
1:      * This method returns an instance of NetConnection (or NetConnection40)
0:      * class which extends from org.apache.derby.client.am.Connection
0:      * this implements the java.sql.Connection interface
1:      */
0:     org.apache.derby.client.am.Connection newNetConnection(
0:             LogWriter netLogWriter,
0:             String user,String password,
0:             org.apache.derby.jdbc.ClientDataSource dataSource,int rmId,
1:             boolean isXAConn) throws SqlException;
1:     
1:     /**
0:      * This methos returns an instance of NetConnection
0:      * (or NetConnection40) class which extends from
0:      * org.apache.derby.client.am.Connection this implements the
0:      * java.sql.Connection interface
1:      */
0:     org.apache.derby.client.am.Connection newNetConnection(
0:             LogWriter netLogWriter,String ipaddr,
0:             int portNumber,org.apache.derby.jdbc.ClientDataSource dataSource,
1:             boolean isXAConn) throws SqlException;
1:     
1:     /**
0:      * This method returns an instance of NetResultSet(or NetResultSet40)
0:      * which extends from org.apache.derby.client.am.ResultSet
0:      * which implements java.sql.ResultSet
1:      */
0:     ResultSet newNetResultSet(Agent netAgent,MaterialStatement netStatement,
0:             Cursor cursor,int sqlcsrhld,int qryattscr,int qryattsns,
0:             int qryattset,long qryinsid,int actualResultSetType,
0:             int actualResultSetConcurrency,int actualResultSetHoldability)
0:             throws SqlException;
1:     
1:     /**
0:      * This method provides an instance of NetDatabaseMetaData
0:      * (or NetDatabaseMetaData40) which extends from
0:      * org.apache.derby.client.am.DatabaseMetaData which implements
0:      * java.sql.DatabaseMetaData
1:      */
0:     DatabaseMetaData newNetDatabaseMetaData(Agent netAgent,
0:             org.apache.derby.client.am.Connection netConnection);
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:d6cf884
/////////////////////////////////////////////////////////////////////////
1:      * @param cacheInteractor the statement cache interactor
1:     LogicalPreparedStatement newLogicalPreparedStatement(
1:             StatementCacheInteractor cacheInteractor);
1:      * @param cacheInteractor the statement cache interactor
1:     LogicalCallableStatement newLogicalCallableStatement(
1:             StatementCacheInteractor cacheInteractor);
commit:1beab6c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1: import org.apache.derby.client.am.stmtcache.StatementKey;
/////////////////////////////////////////////////////////////////////////
0:    /**
1:     * Returns an instance of a {@code CachingLogicalConnection}, which
1:     * provides caching of prepared statements.
1:     *
1:     * @param physicalConnection the underlying physical connection
1:     * @param pooledConnection the pooled connection
1:     * @param stmtCache statement cache
1:     * @return A logical connection with statement caching capabilities.
1:     *
1:     * @throws SqlException if creation of the logical connection fails
0:     */
1:     public LogicalConnection newCachingLogicalConnection(
0:             org.apache.derby.client.am.Connection physicalConnection,
1:             ClientPooledConnection pooledConnection,
1:             JDBCStatementCache stmtCache) throws SqlException;
0: 
/////////////////////////////////////////////////////////////////////////
0:      * Returns a new logcial prepared statement object.
1:      *
1:      * @param ps underlying physical prepared statement
1:      * @param stmtKey key for the underlying physical prepared statement
0:      * @param stmtCache the statement cache
1:      * @return A logical prepared statement.
0:      */
0:     java.sql.PreparedStatement newLogicalPreparedStatement(
0:             java.sql.PreparedStatement ps,
1:             StatementKey stmtKey,
0:             JDBCStatementCache stmtCache);
0: 
0:     /**
1:      * Returns a new logical callable statement object.
1:      *
1:      * @param cs underlying physical callable statement
1:      * @param stmtKey key for the underlying physical callable statement
0:      * @param stmtCache the statement cache
1:      * @return A logical callable statement.
0:      */
0:     public java.sql.CallableStatement newLogicalCallableStatement(
0:             java.sql.CallableStatement cs,
1:             StatementKey stmtKey,
0:             JDBCStatementCache stmtCache);
0: 
0:     /**
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:b52081a
/////////////////////////////////////////////////////////////////////////
1:      * @param columnIndexes an array of column indexes indicating the columns
1:      *                    that should be returned form the inserted row.                   
/////////////////////////////////////////////////////////////////////////
1:             String [] columnNames, int[] columnIndexes, ClientPooledConnection cpc) 
/////////////////////////////////////////////////////////////////////////
1:      * @param columnIndexes     int[]
/////////////////////////////////////////////////////////////////////////
1:                      int autoGeneratedKeys, String[] columnNames,
1:                      int[] columnIndexes) 
author:Army
-------------------------------------------------------------------------------
commit:8fcae92
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.ClientXAConnection;
/////////////////////////////////////////////////////////////////////////
0:      * This method is used to return an instance of
1:      * ClientXAConnection (or ClientXAConnection40) class which
0:      * implements javax.sql.XAConnection
0:      */
0:     ClientXAConnection newClientXAConnection(ClientBaseDataSource ds,
0:             LogWriter logWriter,String user,String password)
0:             throws SQLException;
0:     
0:     /**
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:c247315
/////////////////////////////////////////////////////////////////////////
1:             Cursor cursor,
0:             int qryprctyp, int sqlcsrhld, int qryattscr, int qryattsns,
============================================================================