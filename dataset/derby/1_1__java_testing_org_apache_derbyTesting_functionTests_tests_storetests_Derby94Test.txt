1:43bb9d4: /*
1:43bb9d4: 
1:43bb9d4:    Derby - Class org.apache.derbyTesting.functionTests.tests.storetests.Derby94Test
1:43bb9d4: 
1:43bb9d4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:43bb9d4:    contributor license agreements.  See the NOTICE file distributed with
1:43bb9d4:    this work for additional information regarding copyright ownership.
1:43bb9d4:    The ASF licenses this file to You under the Apache License, Version 2.0
1:43bb9d4:    (the "License"); you may not use this file except in compliance with
1:43bb9d4:    the License.  You may obtain a copy of the License at
1:43bb9d4: 
1:43bb9d4:       http://www.apache.org/licenses/LICENSE-2.0
1:43bb9d4: 
1:43bb9d4:    Unless required by applicable law or agreed to in writing, software
1:43bb9d4:    distributed under the License is distributed on an "AS IS" BASIS,
1:43bb9d4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43bb9d4:    See the License for the specific language governing permissions and
1:43bb9d4:    limitations under the License.
1:43bb9d4: 
1:43bb9d4:  */
1:43bb9d4: 
1:43bb9d4: package org.apache.derbyTesting.functionTests.tests.storetests;
1:43bb9d4: 
1:43bb9d4: import java.sql.PreparedStatement;
1:43bb9d4: import java.sql.ResultSet;
1:43bb9d4: import java.sql.SQLException;
1:43bb9d4: import java.sql.Statement;
1:43bb9d4: import junit.framework.Test;
1:43bb9d4: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:43bb9d4: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:43bb9d4: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:43bb9d4: import org.apache.derbyTesting.junit.JDBC;
1:43bb9d4: import org.apache.derbyTesting.junit.TestConfiguration;
1:43bb9d4: 
1:43bb9d4: /**
1:43bb9d4:  * Regression test case for DERBY-94, which prevented some locks from
1:43bb9d4:  * being released at the end of the transaction if lock escalation had
1:43bb9d4:  * happened.
1:43bb9d4:  */
1:43bb9d4: public class Derby94Test extends BaseJDBCTestCase {
1:43bb9d4:     public Derby94Test(String name) {
1:43bb9d4:         super(name);
1:43bb9d4:     }
1:43bb9d4: 
1:43bb9d4:     public static Test suite() {
1:43bb9d4:         Test test = TestConfiguration.embeddedSuite(Derby94Test.class);
1:43bb9d4:         // Reduce lock escalation threshold to make it possible to test
1:43bb9d4:         // with fewer rows.
1:43bb9d4:         test = DatabasePropertyTestSetup.singleProperty(
1:43bb9d4:                 test, "derby.locks.escalationThreshold", "102");
1:43bb9d4:         test = new CleanDatabaseTestSetup(test);
1:43bb9d4:         return test;
1:43bb9d4:     }
1:43bb9d4: 
1:43bb9d4:     public void testDerby94() throws SQLException {
1:43bb9d4:         setAutoCommit(false);
1:43bb9d4: 
1:43bb9d4:         PreparedStatement locktable = prepareStatement(
1:43bb9d4:                 "select type, lockcount, mode, tablename, lockname, state "
1:43bb9d4:                         + "from syscs_diag.lock_table "
1:43bb9d4:                         + "order by tablename, type desc, mode, "
1:43bb9d4:                         + "lockcount, lockname");
1:43bb9d4: 
1:43bb9d4:         Statement s = createStatement();
1:43bb9d4: 
1:43bb9d4:         s.execute("create table t1(c1 int, c2 int not null primary key)");
1:43bb9d4:         s.execute("create table t2(c1 int)");
1:43bb9d4: 
1:43bb9d4:         PreparedStatement ins1 = prepareStatement(
1:43bb9d4:                                         "insert into t1 values (?, ?)");
1:43bb9d4:         for (int i = 0; i < 160; i++) {
1:43bb9d4:             ins1.setInt(1, i);
1:43bb9d4:             ins1.setInt(2, 200 + i);
1:43bb9d4:             ins1.execute();
1:43bb9d4:         }
1:43bb9d4: 
1:43bb9d4:         s.execute("insert into t2 values 0, 1, 2, 3, 4, 5, 6, 7, 8, 9");
1:43bb9d4: 
1:43bb9d4:         commit();
1:43bb9d4: 
1:43bb9d4:         Statement s1 = createStatement(ResultSet.TYPE_FORWARD_ONLY,
1:43bb9d4:                                        ResultSet.CONCUR_UPDATABLE);
1:43bb9d4:         ResultSet rs1 = s1.executeQuery("select * from t1 for update of c1");
1:43bb9d4: 
1:43bb9d4:         assertTrue(rs1.next());
1:43bb9d4:         assertEquals(0, rs1.getInt("c1"));
1:43bb9d4:         assertEquals(200, rs1.getInt("c2"));
1:43bb9d4:         rs1.updateInt("c1", 999);
1:43bb9d4:         rs1.updateRow();
1:43bb9d4: 
1:43bb9d4:         assertTrue(rs1.next());
1:43bb9d4:         assertEquals(1, rs1.getInt("c1"));
1:43bb9d4:         assertEquals(201, rs1.getInt("c2"));
1:43bb9d4: 
1:43bb9d4:         Statement s2 = createStatement(ResultSet.TYPE_FORWARD_ONLY,
1:43bb9d4:                                        ResultSet.CONCUR_UPDATABLE);
1:43bb9d4:         ResultSet rs2 = s2.executeQuery("select * from t2 for update of c1");
1:43bb9d4:         assertTrue(rs2.next());
1:43bb9d4:         assertEquals(0, rs2.getInt("c1"));
1:43bb9d4: 
1:43bb9d4:         JDBC.assertFullResultSet(
1:43bb9d4:                 locktable.executeQuery(),
1:43bb9d4:                 new String[][] {
1:43bb9d4:                     { "TABLE", "2", "IX", "T1", "Tablelock", "GRANT" },
1:43bb9d4:                     { "ROW",   "1", "U",  "T1", "(1,8)",     "GRANT" },
1:43bb9d4:                     { "ROW",   "1", "X",  "T1", "(1,7)",     "GRANT" },
1:43bb9d4:                     { "TABLE", "1", "IX", "T2", "Tablelock", "GRANT" },
1:43bb9d4:                     { "ROW",   "1", "U",  "T2", "(1,7)",     "GRANT" },
1:43bb9d4:                 });
1:43bb9d4: 
1:43bb9d4:         // The following insert should get X lock on t2 because of escalation,
1:43bb9d4:         // but should leave U lock on t1 as it is.
1:43bb9d4:         assertUpdateCount(s, 160, "insert into t2 select c1 from t1");
1:43bb9d4: 
1:43bb9d4:         JDBC.assertFullResultSet(
1:43bb9d4:                 locktable.executeQuery(),
1:43bb9d4:                 new String[][] {
1:43bb9d4:                     { "TABLE", "3", "IX", "T1", "Tablelock", "GRANT" },
1:43bb9d4:                     { "ROW",   "1", "U",  "T1", "(1,8)",     "GRANT" },
1:43bb9d4:                     { "ROW",   "1", "X",  "T1", "(1,7)",     "GRANT" },
1:43bb9d4:                     { "TABLE", "4", "IX", "T2", "Tablelock", "GRANT" },
1:43bb9d4:                     { "TABLE", "1", "X",  "T2", "Tablelock", "GRANT" },
1:43bb9d4:                 });
1:43bb9d4: 
1:43bb9d4:         // The following update statement should escalate the locks on t1
1:43bb9d4:         // to table level X lock.
1:43bb9d4:         assertUpdateCount(s, 160, "update t1 set c1 = c1 + 999");
1:43bb9d4: 
1:43bb9d4:         JDBC.assertFullResultSet(
1:43bb9d4:                 locktable.executeQuery(),
1:43bb9d4:                 new String[][] {
1:43bb9d4:                     { "TABLE", "8", "IX", "T1", "Tablelock", "GRANT" },
1:43bb9d4:                     { "TABLE", "1", "X",  "T1", "Tablelock", "GRANT" },
1:43bb9d4:                     { "TABLE", "4", "IX", "T2", "Tablelock", "GRANT" },
1:43bb9d4:                     { "TABLE", "1", "X",  "T2", "Tablelock", "GRANT" },
1:43bb9d4:                 });
1:43bb9d4: 
1:43bb9d4:         rs1.close();
1:43bb9d4:         rs2.close();
1:43bb9d4:         commit();
1:43bb9d4: 
1:43bb9d4:         // The following lock table dump should not show any locks.
1:43bb9d4:         // The above commit should have release them.
1:43bb9d4:         JDBC.assertEmpty(locktable.executeQuery());
1:43bb9d4:     }
1:43bb9d4: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:43bb9d4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.storetests.Derby94Test
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.storetests;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Regression test case for DERBY-94, which prevented some locks from
1:  * being released at the end of the transaction if lock escalation had
1:  * happened.
1:  */
1: public class Derby94Test extends BaseJDBCTestCase {
1:     public Derby94Test(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         Test test = TestConfiguration.embeddedSuite(Derby94Test.class);
1:         // Reduce lock escalation threshold to make it possible to test
1:         // with fewer rows.
1:         test = DatabasePropertyTestSetup.singleProperty(
1:                 test, "derby.locks.escalationThreshold", "102");
1:         test = new CleanDatabaseTestSetup(test);
1:         return test;
1:     }
1: 
1:     public void testDerby94() throws SQLException {
1:         setAutoCommit(false);
1: 
1:         PreparedStatement locktable = prepareStatement(
1:                 "select type, lockcount, mode, tablename, lockname, state "
1:                         + "from syscs_diag.lock_table "
1:                         + "order by tablename, type desc, mode, "
1:                         + "lockcount, lockname");
1: 
1:         Statement s = createStatement();
1: 
1:         s.execute("create table t1(c1 int, c2 int not null primary key)");
1:         s.execute("create table t2(c1 int)");
1: 
1:         PreparedStatement ins1 = prepareStatement(
1:                                         "insert into t1 values (?, ?)");
1:         for (int i = 0; i < 160; i++) {
1:             ins1.setInt(1, i);
1:             ins1.setInt(2, 200 + i);
1:             ins1.execute();
1:         }
1: 
1:         s.execute("insert into t2 values 0, 1, 2, 3, 4, 5, 6, 7, 8, 9");
1: 
1:         commit();
1: 
1:         Statement s1 = createStatement(ResultSet.TYPE_FORWARD_ONLY,
1:                                        ResultSet.CONCUR_UPDATABLE);
1:         ResultSet rs1 = s1.executeQuery("select * from t1 for update of c1");
1: 
1:         assertTrue(rs1.next());
1:         assertEquals(0, rs1.getInt("c1"));
1:         assertEquals(200, rs1.getInt("c2"));
1:         rs1.updateInt("c1", 999);
1:         rs1.updateRow();
1: 
1:         assertTrue(rs1.next());
1:         assertEquals(1, rs1.getInt("c1"));
1:         assertEquals(201, rs1.getInt("c2"));
1: 
1:         Statement s2 = createStatement(ResultSet.TYPE_FORWARD_ONLY,
1:                                        ResultSet.CONCUR_UPDATABLE);
1:         ResultSet rs2 = s2.executeQuery("select * from t2 for update of c1");
1:         assertTrue(rs2.next());
1:         assertEquals(0, rs2.getInt("c1"));
1: 
1:         JDBC.assertFullResultSet(
1:                 locktable.executeQuery(),
1:                 new String[][] {
1:                     { "TABLE", "2", "IX", "T1", "Tablelock", "GRANT" },
1:                     { "ROW",   "1", "U",  "T1", "(1,8)",     "GRANT" },
1:                     { "ROW",   "1", "X",  "T1", "(1,7)",     "GRANT" },
1:                     { "TABLE", "1", "IX", "T2", "Tablelock", "GRANT" },
1:                     { "ROW",   "1", "U",  "T2", "(1,7)",     "GRANT" },
1:                 });
1: 
1:         // The following insert should get X lock on t2 because of escalation,
1:         // but should leave U lock on t1 as it is.
1:         assertUpdateCount(s, 160, "insert into t2 select c1 from t1");
1: 
1:         JDBC.assertFullResultSet(
1:                 locktable.executeQuery(),
1:                 new String[][] {
1:                     { "TABLE", "3", "IX", "T1", "Tablelock", "GRANT" },
1:                     { "ROW",   "1", "U",  "T1", "(1,8)",     "GRANT" },
1:                     { "ROW",   "1", "X",  "T1", "(1,7)",     "GRANT" },
1:                     { "TABLE", "4", "IX", "T2", "Tablelock", "GRANT" },
1:                     { "TABLE", "1", "X",  "T2", "Tablelock", "GRANT" },
1:                 });
1: 
1:         // The following update statement should escalate the locks on t1
1:         // to table level X lock.
1:         assertUpdateCount(s, 160, "update t1 set c1 = c1 + 999");
1: 
1:         JDBC.assertFullResultSet(
1:                 locktable.executeQuery(),
1:                 new String[][] {
1:                     { "TABLE", "8", "IX", "T1", "Tablelock", "GRANT" },
1:                     { "TABLE", "1", "X",  "T1", "Tablelock", "GRANT" },
1:                     { "TABLE", "4", "IX", "T2", "Tablelock", "GRANT" },
1:                     { "TABLE", "1", "X",  "T2", "Tablelock", "GRANT" },
1:                 });
1: 
1:         rs1.close();
1:         rs2.close();
1:         commit();
1: 
1:         // The following lock table dump should not show any locks.
1:         // The above commit should have release them.
1:         JDBC.assertEmpty(locktable.executeQuery());
1:     }
1: }
============================================================================