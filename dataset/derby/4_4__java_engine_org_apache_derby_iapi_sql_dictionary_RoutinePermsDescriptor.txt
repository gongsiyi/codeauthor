1:b7730e4: /*
2:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor
1:b7730e4: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4:       http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: package org.apache.derby.iapi.sql.dictionary;
1:b7730e4: 
1:2d2e717: import org.apache.derby.catalog.Dependable;
1:2d2e717: import org.apache.derby.catalog.DependableFinder;
1:b7730e4: import org.apache.derby.catalog.UUID;
1:b7730e4: 
1:2d2e717: import org.apache.derby.iapi.error.StandardException;
1:2d2e717: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:b7730e4: 
1:b7730e4: /**
1:b7730e4:  * This class describes rows in the SYS.SYSROUTINEPERMS system table, which keeps track of the routine
1:b7730e4:  * (procedure and function) permissions that have been granted but not revoked.
1:b7730e4:  */
1:b7730e4: public class RoutinePermsDescriptor extends PermissionsDescriptor
1:b7730e4: {
1:ac100d6:     private UUID routineUUID;
1:ac100d6:     private String routineName;
1:ac100d6:     private boolean hasExecutePermission;
1:b7730e4: 	
1:b7730e4: 	public RoutinePermsDescriptor( DataDictionary dd,
1:b7730e4:                                    String grantee,
1:b7730e4:                                    String grantor,
1:b7730e4:                                    UUID routineUUID,
1:2d2e717:                                    boolean hasExecutePermission) throws StandardException
1:b7730e4: 	{
1:c45f5b1:         super (dd, grantee, grantor);
1:b7730e4:         this.routineUUID = routineUUID;
1:b7730e4:         this.hasExecutePermission = hasExecutePermission;
1:ac100d6:         //routineUUID can be null only if the constructor with routineePermsUUID
1:ac100d6:         //has been invoked.
1:ac100d6:         if (routineUUID != null)
1:ac100d6:         	routineName = dd.getAliasDescriptor(routineUUID).getObjectName();
1:b7730e4: 	}
1:b7730e4: 	
1:b7730e4: 	public RoutinePermsDescriptor( DataDictionary dd,
1:b7730e4:                                    String grantee,
1:b7730e4:                                    String grantor,
1:2d2e717:                                    UUID routineUUID) throws StandardException
1:b7730e4: 	{
1:c45f5b1:         this( dd, grantee, grantor, routineUUID, true);
1:b7730e4: 	}
1:b7730e4: 
1:b7730e4:     /**
1:b7730e4:      * This constructor just sets up the key fields of a RoutinePermsDescriptor.
1:b7730e4:      */
1:b7730e4: 	public RoutinePermsDescriptor( DataDictionary dd,
1:b7730e4:                                    String grantee,
1:2d2e717:                                    String grantor) throws StandardException
1:b7730e4:     {
1:b7730e4:         this( dd, grantee, grantor, (UUID) null);
1:b7730e4:     }
1:ac100d6: 	   
1:ac100d6:     public RoutinePermsDescriptor( DataDictionary dd, UUID routineePermsUUID) 
1:ac100d6:     throws StandardException
1:ac100d6: 	{
1:ac100d6:         this( dd, null, null, null, true);
1:ac100d6:         this.oid = routineePermsUUID;
1:ac100d6: 	}
1:b7730e4:     
1:b7730e4:     public int getCatalogNumber()
1:b7730e4:     {
1:b7730e4:         return DataDictionary.SYSROUTINEPERMS_CATALOG_NUM;
1:b7730e4:     }
1:b7730e4: 	
1:b7730e4: 	/*----- getter functions for rowfactory ------*/
1:b7730e4:     public UUID getRoutineUUID() { return routineUUID;}
1:b7730e4:     public boolean getHasExecutePermission() { return hasExecutePermission;}
1:b7730e4: 
1:b7730e4: 	public String toString()
1:b7730e4: 	{
1:2d2e717: 		return "routinePerms: grantee=" + getGrantee() + 
1:2d2e717:         ",routinePermsUUID=" + getUUID() +
1:b7730e4:           ",grantor=" + getGrantor() +
1:b7730e4:           ",routineUUID=" + getRoutineUUID();
1:b7730e4: 	}		
1:b7730e4: 
1:b7730e4:     /**
1:b7730e4:      * @return true iff the key part of this permissions descriptor equals the key part of another permissions
1:b7730e4:      *         descriptor.
1:b7730e4:      */
1:b7730e4:     public boolean equals( Object other)
1:b7730e4:     {
1:b7730e4:         if( !( other instanceof RoutinePermsDescriptor))
1:b7730e4:             return false;
1:b7730e4:         RoutinePermsDescriptor otherRoutinePerms = (RoutinePermsDescriptor) other;
1:b7730e4:         return super.keyEquals( otherRoutinePerms) &&
1:b7730e4:           routineUUID.equals( otherRoutinePerms.routineUUID);
1:b7730e4:     }
1:b7730e4:     
1:b7730e4:     /**
1:b7730e4:      * @return the hashCode for the key part of this permissions descriptor
1:b7730e4:      */
1:b7730e4:     public int hashCode()
1:b7730e4:     {
1:b7730e4:         return super.keyHashCode() + routineUUID.hashCode();
1:b7730e4:     }
1:2d2e717: 	
1:2d2e717: 	/**
1:2d2e717: 	 * @see PermissionsDescriptor#checkOwner
1:2d2e717: 	 */
1:2d2e717: 	public boolean checkOwner(String authorizationId) throws StandardException
1:2d2e717: 	{
1:2d2e717: 		UUID sd = getDataDictionary().getAliasDescriptor(routineUUID).getSchemaUUID();
1:2d2e717: 		if (getDataDictionary().getSchemaDescriptor(sd, null).getAuthorizationId().equals(authorizationId))
1:2d2e717: 			return true;
1:2d2e717: 		else
1:2d2e717: 			return false;
1:2d2e717: 	}
1:2d2e717: 
1:2d2e717: 	//////////////////////////////////////////////
1:2d2e717: 	//
1:2d2e717: 	// PROVIDER INTERFACE
1:2d2e717: 	//
1:2d2e717: 	//////////////////////////////////////////////
1:2d2e717: 
1:2d2e717: 	/**
1:2d2e717: 	 * Return the name of this Provider.  (Useful for errors.)
1:2d2e717: 	 *
1:2d2e717: 	 * @return String	The name of this provider.
1:2d2e717: 	 */
1:2d2e717: 	public String getObjectName()
1:2d2e717: 	{
1:2d2e717: 		return "Routine Privilege on " + routineName; 
1:2d2e717: 	}
1:2d2e717: 
1:2d2e717: 	/**
1:2d2e717: 	 * Get the provider's type.
1:2d2e717: 	 *
1:2d2e717: 	 * @return char		The provider's type.
1:2d2e717: 	 */
1:2d2e717: 	public String getClassType()
1:2d2e717: 	{
1:2d2e717: 		return Dependable.ROUTINE_PERMISSION;
1:2d2e717: 	}
1:2d2e717: 
1:2d2e717: 	/**		
1:2d2e717: 		@return the stored form of this provider
1:2d2e717: 
1:2d2e717: 			@see Dependable#getDependableFinder
1:2d2e717: 	 */
1:2d2e717: 	public DependableFinder getDependableFinder() 
1:2d2e717: 	{
1:999e32a:         return getDependableFinder(
1:999e32a:                 StoredFormatIds.ROUTINE_PERMISSION_FINDER_V01_ID);
1:2d2e717: 	}
1:b7730e4: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:999e32a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return getDependableFinder(
1:                 StoredFormatIds.ROUTINE_PERMISSION_FINDER_V01_ID);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ac100d6
/////////////////////////////////////////////////////////////////////////
1:     private UUID routineUUID;
1:     private String routineName;
1:     private boolean hasExecutePermission;
/////////////////////////////////////////////////////////////////////////
1:         //routineUUID can be null only if the constructor with routineePermsUUID
1:         //has been invoked.
1:         if (routineUUID != null)
1:         	routineName = dd.getAliasDescriptor(routineUUID).getObjectName();
/////////////////////////////////////////////////////////////////////////
1: 	   
1:     public RoutinePermsDescriptor( DataDictionary dd, UUID routineePermsUUID) 
1:     throws StandardException
1: 	{
1:         this( dd, null, null, null, true);
1:         this.oid = routineePermsUUID;
1: 	}
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.Dependable;
1: import org.apache.derby.catalog.DependableFinder;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.impl.sql.catalog.DDdependableFinder;
/////////////////////////////////////////////////////////////////////////
0:     private final String routineName;
1:                                    boolean hasExecutePermission) throws StandardException
0:         routineName = dd.getAliasDescriptor(routineUUID).getObjectName();
1:                                    UUID routineUUID) throws StandardException
/////////////////////////////////////////////////////////////////////////
1:                                    String grantor) throws StandardException
/////////////////////////////////////////////////////////////////////////
1: 		return "routinePerms: grantee=" + getGrantee() + 
1:         ",routinePermsUUID=" + getUUID() +
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * @see PermissionsDescriptor#checkOwner
1: 	 */
1: 	public boolean checkOwner(String authorizationId) throws StandardException
1: 	{
1: 		UUID sd = getDataDictionary().getAliasDescriptor(routineUUID).getSchemaUUID();
1: 		if (getDataDictionary().getSchemaDescriptor(sd, null).getAuthorizationId().equals(authorizationId))
1: 			return true;
1: 		else
1: 			return false;
1: 	}
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// PROVIDER INTERFACE
1: 	//
1: 	//////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Return the name of this Provider.  (Useful for errors.)
1: 	 *
1: 	 * @return String	The name of this provider.
1: 	 */
1: 	public String getObjectName()
1: 	{
1: 		return "Routine Privilege on " + routineName; 
1: 	}
1: 
1: 	/**
1: 	 * Get the provider's type.
1: 	 *
1: 	 * @return char		The provider's type.
1: 	 */
1: 	public String getClassType()
1: 	{
1: 		return Dependable.ROUTINE_PERMISSION;
1: 	}
1: 
1: 	/**		
1: 		@return the stored form of this provider
1: 
1: 			@see Dependable#getDependableFinder
1: 	 */
1: 	public DependableFinder getDependableFinder() 
1: 	{
0: 	    return	new DDdependableFinder(StoredFormatIds.ROUTINE_PERMISSION_FINDER_V01_ID);
1: 	}
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:c45f5b1
/////////////////////////////////////////////////////////////////////////
1:         super (dd, grantee, grantor);
/////////////////////////////////////////////////////////////////////////
1:         this( dd, grantee, grantor, routineUUID, true);
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
1: /**
1:  * This class describes rows in the SYS.SYSROUTINEPERMS system table, which keeps track of the routine
1:  * (procedure and function) permissions that have been granted but not revoked.
1:  */
1: public class RoutinePermsDescriptor extends PermissionsDescriptor
1: {
0:     private final UUID routineUUID;
0:     private final boolean hasExecutePermission;
1: 	
1: 	public RoutinePermsDescriptor( DataDictionary dd,
1:                                    String grantee,
1:                                    String grantor,
1:                                    UUID routineUUID,
0:                                    boolean hasExecutePermission)
1: 	{
0: 		super (dd, grantor, grantee);
1:         this.routineUUID = routineUUID;
1:         this.hasExecutePermission = hasExecutePermission;
1: 	}
1: 	
1: 	public RoutinePermsDescriptor( DataDictionary dd,
1:                                    String grantee,
1:                                    String grantor,
0:                                    UUID routineUUID)
1: 	{
0:         this( dd, grantor, grantee, routineUUID, true);
1: 	}
1: 
1:     /**
1:      * This constructor just sets up the key fields of a RoutinePermsDescriptor.
1:      */
1: 	public RoutinePermsDescriptor( DataDictionary dd,
1:                                    String grantee,
0:                                    String grantor)
1:     {
1:         this( dd, grantee, grantor, (UUID) null);
1:     }
1:     
1:     public int getCatalogNumber()
1:     {
1:         return DataDictionary.SYSROUTINEPERMS_CATALOG_NUM;
1:     }
1: 	
1: 	/*----- getter functions for rowfactory ------*/
1:     public UUID getRoutineUUID() { return routineUUID;}
1:     public boolean getHasExecutePermission() { return hasExecutePermission;}
1: 
1: 	public String toString()
1: 	{
0: 		return "routinePerms: grantor=" + getGrantee() + 
1:           ",grantor=" + getGrantor() +
1:           ",routineUUID=" + getRoutineUUID();
1: 	}		
1: 
1:     /**
1:      * @return true iff the key part of this permissions descriptor equals the key part of another permissions
1:      *         descriptor.
1:      */
1:     public boolean equals( Object other)
1:     {
1:         if( !( other instanceof RoutinePermsDescriptor))
1:             return false;
1:         RoutinePermsDescriptor otherRoutinePerms = (RoutinePermsDescriptor) other;
1:         return super.keyEquals( otherRoutinePerms) &&
1:           routineUUID.equals( otherRoutinePerms.routineUUID);
1:     }
1:     
1:     /**
1:      * @return the hashCode for the key part of this permissions descriptor
1:      */
1:     public int hashCode()
1:     {
1:         return super.keyHashCode() + routineUUID.hashCode();
1:     }
1: }
============================================================================