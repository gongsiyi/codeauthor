1:bb40bcb: /*
2:bb40bcb: 
1:bb40bcb:    Derby - Class org.apache.derby.impl.sql.catalog.SYSPERMSRowFactory
1:bb40bcb: 
1:bb40bcb:    Licensed to the Apache Software Foundation (ASF) under one or more
1:bb40bcb:    contributor license agreements.  See the NOTICE file distributed with
1:bb40bcb:    this work for additional information regarding copyright ownership.
1:bb40bcb:    The ASF licenses this file to you under the Apache License, Version 2.0
1:bb40bcb:    (the "License"); you may not use this file except in compliance with
1:bb40bcb:    the License.  You may obtain a copy of the License at
1:bb40bcb: 
1:bb40bcb:       http://www.apache.org/licenses/LICENSE-2.0
1:bb40bcb: 
1:bb40bcb:    Unless required by applicable law or agreed to in writing, software
1:bb40bcb:    distributed under the License is distributed on an "AS IS" BASIS,
1:bb40bcb:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bb40bcb:    See the License for the specific language governing permissions and
1:bb40bcb:    limitations under the License.
1:bb40bcb: 
1:bb40bcb: */
1:bb40bcb: 
1:bb40bcb: package org.apache.derby.impl.sql.catalog;
1:bb40bcb: 
1:bb40bcb: import org.apache.derby.catalog.UUID;
1:bb40bcb: import org.apache.derby.iapi.types.SQLChar;
1:bb40bcb: import org.apache.derby.iapi.types.SQLVarchar;
1:bb40bcb: import org.apache.derby.iapi.types.DataValueDescriptor;
1:bb40bcb: import org.apache.derby.iapi.types.DataValueFactory;
1:bb40bcb: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:bb40bcb: import org.apache.derby.iapi.sql.execute.ExecRow;
1:bb40bcb: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:bb40bcb: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:bb40bcb: import org.apache.derby.iapi.error.StandardException;
1:bb40bcb: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:bb40bcb: 
1:bb40bcb: import java.sql.Types;
1:bb40bcb: 
1:bb40bcb: /**
1:bb40bcb:  * Factory for creating a SYSPERMS row.
1:bb40bcb:  */
1:bb40bcb: 
1:bb40bcb: public class SYSPERMSRowFactory extends PermissionsCatalogRowFactory {
1:bb40bcb:     private static final String TABLENAME_STRING = "SYSPERMS";
1:bb40bcb: 
1:bb40bcb:     private static final int SYSPERMS_COLUMN_COUNT = 7;
1:bb40bcb:     /* Column #s for sysinfo (1 based) */
1:bb40bcb:     private static final int SYSPERMS_PERMISSIONID = 1;
1:bb40bcb:     private static final int SYSPERMS_OBJECTTYPE = 2;
1:bb40bcb:     private static final int SYSPERMS_OBJECTID = 3;
1:bb40bcb:     private static final int SYSPERMS_PERMISSION = 4;
1:bb40bcb:     private static final int SYSPERMS_GRANTOR = 5;
1:bb40bcb:     private static final int SYSPERMS_GRANTEE = 6;
1:bb40bcb:     private static final int SYSPERMS_IS_GRANTABLE = 7;
1:bb40bcb: 
1:bb40bcb:     private static final int[][] indexColumnPositions =
1:bb40bcb:             {
1:bb40bcb:                     {SYSPERMS_PERMISSIONID},
1:98c7520:                     {SYSPERMS_OBJECTID},
1:98c7520:                     {SYSPERMS_GRANTEE, SYSPERMS_OBJECTID, SYSPERMS_GRANTOR},
1:bb40bcb:             };
1:bb40bcb: 
1:98c7520:     // index numbers
1:98c7520:     public static final int PERMS_UUID_IDX_NUM = 0;
1:bb40bcb:     public static final int PERMS_OBJECTID_IDX_NUM = 1;
1:98c7520:     public static final int GRANTEE_OBJECTID_GRANTOR_INDEX_NUM = 2;
1:bb40bcb: 
1:98c7520:     private static final boolean[] uniqueness = { true, false, true };
1:bb40bcb: 
1:bb40bcb:     private static final String[] uuids = {
1:bb40bcb:             "9810800c-0121-c5e1-a2f5-00000043e718", // catalog UUID
1:bb40bcb:             "6ea6ffac-0121-c5e3-f286-00000043e718", // heap UUID
1:98c7520:             "5cc556fc-0121-c5e6-4e43-00000043e718",  // PERMS_UUID_IDX_NUM
1:98c7520:             "7a92cf84-0122-51e6-2c5e-00000047b548",   // PERMS_OBJECTID_IDX_NUM
1:98c7520:             "9810800c-0125-8de5-3aa0-0000001999e8",   // GRANTEE_OBJECTID_GRANTOR_INDEX_NUM
1:bb40bcb:     };
1:bb40bcb: 
1:bb40bcb: 
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Constructor
1:bb40bcb:      *
1:bb40bcb:      * @param uuidf UUIDFactory
1:bb40bcb:      * @param ef    ExecutionFactory
1:bb40bcb:      * @param dvf   DataValueFactory
1:bb40bcb:      */
1:bb40bcb:     SYSPERMSRowFactory(UUIDFactory uuidf,
1:bb40bcb:                        ExecutionFactory ef,
1:bb40bcb:                        DataValueFactory dvf) {
1:bb40bcb:         super(uuidf, ef, dvf);
1:bb40bcb:         initInfo(SYSPERMS_COLUMN_COUNT, TABLENAME_STRING,
1:bb40bcb:                 indexColumnPositions, uniqueness, uuids);
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * builds an index key row given for a given index number.
1:bb40bcb:      */
1:bb40bcb:     public ExecIndexRow buildIndexKeyRow(int indexNumber,
1:bb40bcb:                                          PermissionsDescriptor perm)
1:bb40bcb:             throws StandardException {
1:bb40bcb:         ExecIndexRow row = null;
1:bb40bcb: 
1:bb40bcb:         switch (indexNumber) {
1:98c7520:         case GRANTEE_OBJECTID_GRANTOR_INDEX_NUM:
1:98c7520:             // RESOLVE We do not support the FOR GRANT OPTION, so generic permission rows are unique on the
1:98c7520:             // grantee and object UUID columns. The grantor column will always have the name of the owner of the
1:98c7520:             // object. So the index key, used for searching the index, only has grantee and object UUID columns.
1:98c7520:             // It does not have a grantor column.
1:98c7520:             row = getExecutionFactory().getIndexableRow( 2 );
1:98c7520:             row.setColumn(1, getAuthorizationID( perm.getGrantee()));
1:98c7520:             String protectedObjectsIDStr = ((PermDescriptor) perm).getPermObjectId().toString();
1:98c7520:             row.setColumn(2, new SQLChar(protectedObjectsIDStr));
1:98c7520:             break;
1:98c7520: 
1:98c7520:         case PERMS_UUID_IDX_NUM:
1:bb40bcb:                 row = getExecutionFactory().getIndexableRow(1);
1:bb40bcb:                 String permUUIDStr = ((PermDescriptor) perm).getUUID().toString();
1:bb40bcb:                 row.setColumn(1, new SQLChar(permUUIDStr));
1:bb40bcb:                 break;
1:bb40bcb:         }
1:bb40bcb:         return row;
1:bb40bcb:     } // end of buildIndexKeyRow
1:bb40bcb: 
1:98c7520:     public int getPrimaryKeyIndexNumber()
1:98c7520:     {
1:98c7520:         return GRANTEE_OBJECTID_GRANTOR_INDEX_NUM;
1:98c7520:     }
1:98c7520: 
1:bb40bcb:     /**
1:bb40bcb:      * Or a set of permissions in with a row from this catalog table
1:bb40bcb:      *
1:bb40bcb:      * @param row         an existing row
1:bb40bcb:      * @param perm        a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:bb40bcb:      * @param colsChanged An array with one element for each column in row. It is updated to
1:bb40bcb:      *                    indicate which columns in row were changed
1:bb40bcb:      * @return The number of columns that were changed.
1:bb40bcb:      * @throws StandardException standard error policy
1:bb40bcb:      */
1:bb40bcb:     public int orPermissions(ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:bb40bcb:             throws StandardException {
1:bb40bcb:         return 0;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Remove a set of permissions from a row from this catalog table
1:bb40bcb:      *
1:bb40bcb:      * @param row         an existing row
1:bb40bcb:      * @param perm        a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:bb40bcb:      * @param colsChanged An array with one element for each column in row. It is updated to
1:bb40bcb:      *                    indicate which columns in row were changed
1:bb40bcb:      * @return -1 if there are no permissions left in the row, otherwise the number of columns that were changed.
1:bb40bcb:      * @throws StandardException standard error policy
1:bb40bcb:      */
1:bb40bcb:     public int removePermissions(ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:bb40bcb:             throws StandardException {
1:98c7520:         return -1; // There is only one kind of privilege per row so delete the whole row.
1:bb40bcb:     } // end of removePermissions
1:bb40bcb: 
1:98c7520: 	/** 
1:98c7520: 	 * @see PermissionsCatalogRowFactory#setUUIDOfThePassedDescriptor
1:98c7520: 	 */
1:98c7520:     void setUUIDOfThePassedDescriptor(ExecRow row, PermissionsDescriptor perm) throws StandardException
1:98c7520:     {
1:98c7520:         DataValueDescriptor existingPermDVD = row.getColumn(SYSPERMS_PERMISSIONID);
1:98c7520:         perm.setUUID(getUUIDFactory().recreateUUID(existingPermDVD.getString()));
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Make a SYSPERMS row
1:bb40bcb:      *
1:bb40bcb:      * @param td     a permission descriptor
1:bb40bcb:      * @param parent unused
1:bb40bcb:      * @return Row suitable for inserting into SYSPERMS.
1:bb40bcb:      * @throws org.apache.derby.iapi.error.StandardException
1:bb40bcb:      *          thrown on failure
1:bb40bcb:      */
1:bb40bcb:     public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1:bb40bcb:             throws StandardException {
1:bb40bcb:         ExecRow row;
1:bb40bcb:         String permIdString = null;
1:bb40bcb:         String objectType = "SEQUENCE";
1:bb40bcb:         String objectIdString = null;
1:bb40bcb:         String permission = "USAGE";
1:bb40bcb:         String grantor = null;
1:bb40bcb:         String grantee = null;
1:bb40bcb:         boolean grantable = false;
1:bb40bcb: 
1:bb40bcb: 
1:bb40bcb:         if (td != null) {
1:bb40bcb:             PermDescriptor sd = (PermDescriptor) td;
1:bb40bcb:             UUID pid = sd.getUUID();
1:98c7520:             if ( pid == null )
1:98c7520:             {
1:98c7520: 				pid = getUUIDFactory().createUUID();
1:98c7520: 				sd.setUUID(pid);
1:98c7520:             }
1:bb40bcb:             permIdString = pid.toString();
1:bb40bcb: 
1:bb40bcb:             objectType = sd.getObjectType();
1:bb40bcb: 
1:bb40bcb:             UUID oid = sd.getPermObjectId();
1:bb40bcb:             objectIdString = oid.toString();
1:bb40bcb: 
1:bb40bcb:             permission = sd.getPermission();
1:bb40bcb:             grantor = sd.getGrantor();
1:bb40bcb:             grantee = sd.getGrantee();
1:bb40bcb:             grantable = sd.isGrantable();
1:bb40bcb:         }
1:bb40bcb: 
1:bb40bcb:         /* Build the row to insert */
1:bb40bcb:         row = getExecutionFactory().getValueRow(SYSPERMS_COLUMN_COUNT);
1:bb40bcb: 
1:bb40bcb:         /* 1st column is UUID */
1:bb40bcb:         row.setColumn(1, new SQLChar(permIdString));
1:bb40bcb: 
1:bb40bcb:         /* 2nd column is OBJECTTYPE */
1:bb40bcb:         row.setColumn(2, new SQLVarchar(objectType));
1:bb40bcb: 
1:bb40bcb:         /* 3rd column is OBJECTID */
1:bb40bcb:         row.setColumn(3, new SQLChar(objectIdString));
1:bb40bcb: 
1:bb40bcb:         /* 4nd column is OBJECTTYPE */
1:bb40bcb:         row.setColumn(4, new SQLChar(permission));
1:bb40bcb: 
1:bb40bcb:         /* 5nd column is GRANTOR */
1:bb40bcb:         row.setColumn(5, new SQLVarchar(grantor));
1:bb40bcb: 
1:bb40bcb:         /* 6nd column is GRANTEE */
1:bb40bcb:         row.setColumn(6, new SQLVarchar(grantee));
1:bb40bcb: 
1:bb40bcb:         /* 7nd column is IS_GRANTABLE */
1:bb40bcb:         row.setColumn(7, new SQLChar(grantable ? "Y" : "N"));
1:bb40bcb: 
1:bb40bcb:         return row;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     ///////////////////////////////////////////////////////////////////////////
1:bb40bcb:     //
1:bb40bcb:     //  ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:bb40bcb:     //
1:bb40bcb:     ///////////////////////////////////////////////////////////////////////////
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Make an  Tuple Descriptor out of a SYSPERMS row
1:bb40bcb:      *
1:bb40bcb:      * @param row                   a SYSPERMS row
1:bb40bcb:      * @param parentTupleDescriptor unused
1:bb40bcb:      * @param dd                    dataDictionary
1:bb40bcb:      * @return a  descriptor equivalent to a SYSPERMS row
1:bb40bcb:      * @throws org.apache.derby.iapi.error.StandardException
1:bb40bcb:      *          thrown on failure
1:bb40bcb:      */
1:bb40bcb:     public TupleDescriptor buildDescriptor
1:bb40bcb:             (ExecRow row,
1:bb40bcb:              TupleDescriptor parentTupleDescriptor,
1:bb40bcb:              DataDictionary dd)
1:bb40bcb:             throws StandardException {
1:bb40bcb: 
1:bb40bcb:         DataValueDescriptor col;
1:bb40bcb:         PermDescriptor descriptor;
1:bb40bcb:         String permIdString;
1:bb40bcb:         String objectType;
1:bb40bcb:         String objectIdString;
1:bb40bcb:         String permission;
1:bb40bcb:         String grantor;
1:bb40bcb:         String grantee;
1:bb40bcb:         String isGrantable;
1:bb40bcb: 
1:bb40bcb:         DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:bb40bcb: 
1:bb40bcb:         if (SanityManager.DEBUG) {
1:bb40bcb:             SanityManager.ASSERT(row.nColumns() == SYSPERMS_COLUMN_COUNT,
1:bb40bcb:                     "Wrong number of columns for a SYSPERMS row");
1:bb40bcb:         }
1:bb40bcb: 
1:bb40bcb:         // first column is uuid of this permission descriptor (char(36))
1:bb40bcb:         col = row.getColumn(SYSPERMS_PERMISSIONID);
1:bb40bcb:         permIdString = col.getString();
1:bb40bcb: 
1:bb40bcb:         // second column is objectType (varchar(36))
1:bb40bcb:         col = row.getColumn(SYSPERMS_OBJECTTYPE);
1:bb40bcb:         objectType = col.getString();
1:bb40bcb: 
1:bb40bcb:         // third column is objectid (varchar(36))
1:bb40bcb:         col = row.getColumn(SYSPERMS_OBJECTID);
1:bb40bcb:         objectIdString = col.getString();
1:bb40bcb: 
1:bb40bcb:         // fourth column is permission (varchar(128))
1:bb40bcb:         col = row.getColumn(SYSPERMS_PERMISSION);
1:bb40bcb:         permission = col.getString();
1:bb40bcb: 
1:bb40bcb:         // fifth column is grantor auth Id (varchar(128))
1:bb40bcb:         col = row.getColumn(SYSPERMS_GRANTOR);
1:bb40bcb:         grantor = col.getString();
1:bb40bcb: 
1:bb40bcb:         // sixth column is grantee auth Id (varchar(128))
1:bb40bcb:         col = row.getColumn(SYSPERMS_GRANTEE);
1:bb40bcb:         grantee = col.getString();
1:bb40bcb: 
1:bb40bcb:         // seventh column is isGrantable (char(1))
1:bb40bcb:         col = row.getColumn(SYSPERMS_IS_GRANTABLE);
1:bb40bcb:         isGrantable = col.getString();
1:bb40bcb: 
1:bb40bcb:         descriptor = ddg.newPermDescriptor
1:bb40bcb:                 (getUUIDFactory().recreateUUID(permIdString),
1:bb40bcb:                         objectType,
1:bb40bcb:                         getUUIDFactory().recreateUUID(objectIdString),
1:bb40bcb:                         permission,
1:bb40bcb:                         grantor,
1:bb40bcb:                         grantee,
1:bb40bcb:                         isGrantable.equals("Y") ? true : false);
1:bb40bcb: 
1:bb40bcb:         return descriptor;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Builds a list of columns suitable for creating this Catalog.
1:bb40bcb:      *
1:bb40bcb:      * @return array of SystemColumn suitable for making this catalog.
1:bb40bcb:      */
1:2a5922a:     public SystemColumn[] buildColumnList()
1:2a5922a:         throws StandardException
1:2a5922a:     {
1:bb40bcb:         return new SystemColumn[]{
1:bb40bcb:                 SystemColumnImpl.getUUIDColumn("UUID", false),
1:bb40bcb:                 SystemColumnImpl.getColumn("OBJECTTYPE", Types.VARCHAR, false, 36),
1:bb40bcb:                 SystemColumnImpl.getUUIDColumn("OBJECTID", false),
1:bb40bcb:                 SystemColumnImpl.getColumn("PERMISSION", Types.CHAR, false, 36),
1:bb40bcb:                 SystemColumnImpl.getIdentifierColumn("GRANTOR", false),
1:bb40bcb:                 SystemColumnImpl.getIdentifierColumn("GRANTEE", false),
1:bb40bcb:                 SystemColumnImpl.getIndicatorColumn("ISGRANTABLE")
1:bb40bcb:         };
1:bb40bcb:     }
1:bb40bcb: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:     public SystemColumn[] buildColumnList()
1:         throws StandardException
1:     {
commit:98c7520
/////////////////////////////////////////////////////////////////////////
1:                     {SYSPERMS_OBJECTID},
1:                     {SYSPERMS_GRANTEE, SYSPERMS_OBJECTID, SYSPERMS_GRANTOR},
1:     // index numbers
1:     public static final int PERMS_UUID_IDX_NUM = 0;
1:     public static final int GRANTEE_OBJECTID_GRANTOR_INDEX_NUM = 2;
1:     private static final boolean[] uniqueness = { true, false, true };
1:             "5cc556fc-0121-c5e6-4e43-00000043e718",  // PERMS_UUID_IDX_NUM
1:             "7a92cf84-0122-51e6-2c5e-00000047b548",   // PERMS_OBJECTID_IDX_NUM
1:             "9810800c-0125-8de5-3aa0-0000001999e8",   // GRANTEE_OBJECTID_GRANTOR_INDEX_NUM
/////////////////////////////////////////////////////////////////////////
1:         case GRANTEE_OBJECTID_GRANTOR_INDEX_NUM:
1:             // RESOLVE We do not support the FOR GRANT OPTION, so generic permission rows are unique on the
1:             // grantee and object UUID columns. The grantor column will always have the name of the owner of the
1:             // object. So the index key, used for searching the index, only has grantee and object UUID columns.
1:             // It does not have a grantor column.
1:             row = getExecutionFactory().getIndexableRow( 2 );
1:             row.setColumn(1, getAuthorizationID( perm.getGrantee()));
1:             String protectedObjectsIDStr = ((PermDescriptor) perm).getPermObjectId().toString();
1:             row.setColumn(2, new SQLChar(protectedObjectsIDStr));
1:             break;
1: 
1:         case PERMS_UUID_IDX_NUM:
/////////////////////////////////////////////////////////////////////////
1:     public int getPrimaryKeyIndexNumber()
1:     {
1:         return GRANTEE_OBJECTID_GRANTOR_INDEX_NUM;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return -1; // There is only one kind of privilege per row so delete the whole row.
1: 	/** 
1: 	 * @see PermissionsCatalogRowFactory#setUUIDOfThePassedDescriptor
1: 	 */
1:     void setUUIDOfThePassedDescriptor(ExecRow row, PermissionsDescriptor perm) throws StandardException
1:     {
1:         DataValueDescriptor existingPermDVD = row.getColumn(SYSPERMS_PERMISSIONID);
1:         perm.setUUID(getUUIDFactory().recreateUUID(existingPermDVD.getString()));
/////////////////////////////////////////////////////////////////////////
1:             if ( pid == null )
1:             {
1: 				pid = getUUIDFactory().createUUID();
1: 				sd.setUUID(pid);
1:             }
commit:bb40bcb
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSPERMSRowFactory
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.types.SQLChar;
1: import org.apache.derby.iapi.types.SQLVarchar;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.sql.Types;
1: 
1: /**
1:  * Factory for creating a SYSPERMS row.
1:  */
1: 
1: public class SYSPERMSRowFactory extends PermissionsCatalogRowFactory {
1:     private static final String TABLENAME_STRING = "SYSPERMS";
1: 
1:     private static final int SYSPERMS_COLUMN_COUNT = 7;
1:     /* Column #s for sysinfo (1 based) */
1:     private static final int SYSPERMS_PERMISSIONID = 1;
1:     private static final int SYSPERMS_OBJECTTYPE = 2;
1:     private static final int SYSPERMS_OBJECTID = 3;
1:     private static final int SYSPERMS_PERMISSION = 4;
1:     private static final int SYSPERMS_GRANTOR = 5;
1:     private static final int SYSPERMS_GRANTEE = 6;
1:     private static final int SYSPERMS_IS_GRANTABLE = 7;
1: 
1:     private static final int[][] indexColumnPositions =
1:             {
1:                     {SYSPERMS_PERMISSIONID},
0:                     {SYSPERMS_OBJECTID}
1:             };
1: 
0:     // UUID
0:     static final int PERMS_UUID_IDX_NUM = 0;
1: 
0:     // object Id
1:     public static final int PERMS_OBJECTID_IDX_NUM = 1;
1: 
0:     private static final boolean[] uniqueness = { true, false };
1: 
1:     private static final String[] uuids = {
1:             "9810800c-0121-c5e1-a2f5-00000043e718", // catalog UUID
1:             "6ea6ffac-0121-c5e3-f286-00000043e718", // heap UUID
0:             "5cc556fc-0121-c5e6-4e43-00000043e718",  // uuid index
0:             "7a92cf84-0122-51e6-2c5e-00000047b548"   // object id index
1:     };
1: 
1: 
1: 
1:     /**
1:      * Constructor
1:      *
1:      * @param uuidf UUIDFactory
1:      * @param ef    ExecutionFactory
1:      * @param dvf   DataValueFactory
1:      */
1:     SYSPERMSRowFactory(UUIDFactory uuidf,
1:                        ExecutionFactory ef,
1:                        DataValueFactory dvf) {
1:         super(uuidf, ef, dvf);
1:         initInfo(SYSPERMS_COLUMN_COUNT, TABLENAME_STRING,
1:                 indexColumnPositions, uniqueness, uuids);
1:     }
1: 
1:     /**
1:      * builds an index key row given for a given index number.
1:      */
1:     public ExecIndexRow buildIndexKeyRow(int indexNumber,
1:                                          PermissionsDescriptor perm)
1:             throws StandardException {
1:         ExecIndexRow row = null;
1: 
1:         switch (indexNumber) {
0:             case PERMS_UUID_IDX_NUM:
1:                 row = getExecutionFactory().getIndexableRow(1);
1:                 String permUUIDStr = ((PermDescriptor) perm).getUUID().toString();
1:                 row.setColumn(1, new SQLChar(permUUIDStr));
1:                 break;
1:         }
1:         return row;
1:     } // end of buildIndexKeyRow
1: 
1:     /**
1:      * Or a set of permissions in with a row from this catalog table
1:      *
1:      * @param row         an existing row
1:      * @param perm        a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:      * @param colsChanged An array with one element for each column in row. It is updated to
1:      *                    indicate which columns in row were changed
1:      * @return The number of columns that were changed.
1:      * @throws StandardException standard error policy
1:      */
1:     public int orPermissions(ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:             throws StandardException {
1:         return 0;
1:     }
1: 
1:     /**
1:      * Remove a set of permissions from a row from this catalog table
1:      *
1:      * @param row         an existing row
1:      * @param perm        a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:      * @param colsChanged An array with one element for each column in row. It is updated to
1:      *                    indicate which columns in row were changed
1:      * @return -1 if there are no permissions left in the row, otherwise the number of columns that were changed.
1:      * @throws StandardException standard error policy
1:      */
1:     public int removePermissions(ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:             throws StandardException {
0:         return -1; // There is only one kind of routine privilege so delete the whole row.
1:     } // end of removePermissions
1: 
0:     void setUUIDOfThePassedDescriptor(ExecRow row, PermissionsDescriptor perm) throws StandardException {
0:         //To change body of implemented methods use File | Settings | File Templates.
1:     }
1: 
1:     /**
1:      * Make a SYSPERMS row
1:      *
1:      * @param td     a permission descriptor
1:      * @param parent unused
1:      * @return Row suitable for inserting into SYSPERMS.
1:      * @throws org.apache.derby.iapi.error.StandardException
1:      *          thrown on failure
1:      */
1:     public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1:             throws StandardException {
1:         ExecRow row;
1:         String permIdString = null;
1:         String objectType = "SEQUENCE";
1:         String objectIdString = null;
1:         String permission = "USAGE";
1:         String grantor = null;
1:         String grantee = null;
1:         boolean grantable = false;
1: 
1: 
1:         if (td != null) {
1:             PermDescriptor sd = (PermDescriptor) td;
1:             UUID pid = sd.getUUID();
1:             permIdString = pid.toString();
1: 
1:             objectType = sd.getObjectType();
1: 
1:             UUID oid = sd.getPermObjectId();
1:             objectIdString = oid.toString();
1: 
1:             permission = sd.getPermission();
1:             grantor = sd.getGrantor();
1:             grantee = sd.getGrantee();
1:             grantable = sd.isGrantable();
1:         }
1: 
1:         /* Build the row to insert */
1:         row = getExecutionFactory().getValueRow(SYSPERMS_COLUMN_COUNT);
1: 
1:         /* 1st column is UUID */
1:         row.setColumn(1, new SQLChar(permIdString));
1: 
1:         /* 2nd column is OBJECTTYPE */
1:         row.setColumn(2, new SQLVarchar(objectType));
1: 
1:         /* 3rd column is OBJECTID */
1:         row.setColumn(3, new SQLChar(objectIdString));
1: 
1:         /* 4nd column is OBJECTTYPE */
1:         row.setColumn(4, new SQLChar(permission));
1: 
1:         /* 5nd column is GRANTOR */
1:         row.setColumn(5, new SQLVarchar(grantor));
1: 
1:         /* 6nd column is GRANTEE */
1:         row.setColumn(6, new SQLVarchar(grantee));
1: 
1:         /* 7nd column is IS_GRANTABLE */
1:         row.setColumn(7, new SQLChar(grantable ? "Y" : "N"));
1: 
1:         return row;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////
1:     //
1:     //  ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:     //
1:     ///////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Make an  Tuple Descriptor out of a SYSPERMS row
1:      *
1:      * @param row                   a SYSPERMS row
1:      * @param parentTupleDescriptor unused
1:      * @param dd                    dataDictionary
1:      * @return a  descriptor equivalent to a SYSPERMS row
1:      * @throws org.apache.derby.iapi.error.StandardException
1:      *          thrown on failure
1:      */
1:     public TupleDescriptor buildDescriptor
1:             (ExecRow row,
1:              TupleDescriptor parentTupleDescriptor,
1:              DataDictionary dd)
1:             throws StandardException {
1: 
1:         DataValueDescriptor col;
1:         PermDescriptor descriptor;
1:         String permIdString;
1:         String objectType;
1:         String objectIdString;
1:         String permission;
1:         String grantor;
1:         String grantee;
1:         String isGrantable;
1: 
1:         DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(row.nColumns() == SYSPERMS_COLUMN_COUNT,
1:                     "Wrong number of columns for a SYSPERMS row");
1:         }
1: 
1:         // first column is uuid of this permission descriptor (char(36))
1:         col = row.getColumn(SYSPERMS_PERMISSIONID);
1:         permIdString = col.getString();
1: 
1:         // second column is objectType (varchar(36))
1:         col = row.getColumn(SYSPERMS_OBJECTTYPE);
1:         objectType = col.getString();
1: 
1:         // third column is objectid (varchar(36))
1:         col = row.getColumn(SYSPERMS_OBJECTID);
1:         objectIdString = col.getString();
1: 
1:         // fourth column is permission (varchar(128))
1:         col = row.getColumn(SYSPERMS_PERMISSION);
1:         permission = col.getString();
1: 
1:         // fifth column is grantor auth Id (varchar(128))
1:         col = row.getColumn(SYSPERMS_GRANTOR);
1:         grantor = col.getString();
1: 
1:         // sixth column is grantee auth Id (varchar(128))
1:         col = row.getColumn(SYSPERMS_GRANTEE);
1:         grantee = col.getString();
1: 
1:         // seventh column is isGrantable (char(1))
1:         col = row.getColumn(SYSPERMS_IS_GRANTABLE);
1:         isGrantable = col.getString();
1: 
1:         descriptor = ddg.newPermDescriptor
1:                 (getUUIDFactory().recreateUUID(permIdString),
1:                         objectType,
1:                         getUUIDFactory().recreateUUID(objectIdString),
1:                         permission,
1:                         grantor,
1:                         grantee,
1:                         isGrantable.equals("Y") ? true : false);
1: 
1:         return descriptor;
1:     }
1: 
1:     /**
1:      * Builds a list of columns suitable for creating this Catalog.
1:      *
1:      * @return array of SystemColumn suitable for making this catalog.
1:      */
0:     public SystemColumn[] buildColumnList() {
1:         return new SystemColumn[]{
1:                 SystemColumnImpl.getUUIDColumn("UUID", false),
1:                 SystemColumnImpl.getColumn("OBJECTTYPE", Types.VARCHAR, false, 36),
1:                 SystemColumnImpl.getUUIDColumn("OBJECTID", false),
1:                 SystemColumnImpl.getColumn("PERMISSION", Types.CHAR, false, 36),
1:                 SystemColumnImpl.getIdentifierColumn("GRANTOR", false),
1:                 SystemColumnImpl.getIdentifierColumn("GRANTEE", false),
1:                 SystemColumnImpl.getIndicatorColumn("ISGRANTABLE")
1:         };
1:     }
1: }
============================================================================