1:2710472: /*
1:2710472: 
1:2710472:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest
1:2710472: 
1:2710472:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2710472:    contributor license agreements.  See the NOTICE file distributed with
1:2710472:    this work for additional information regarding copyright ownership.
1:2710472:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2710472:    (the "License"); you may not use this file except in compliance with
1:2710472:    the License.  You may obtain a copy of the License at
1:2710472: 
1:2710472:       http://www.apache.org/licenses/LICENSE-2.0
1:2710472: 
1:2710472:    Unless required by applicable law or agreed to in writing, software
1:2710472:    distributed under the License is distributed on an "AS IS" BASIS,
1:2710472:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2710472:    See the License for the specific language governing permissions and
1:2710472:    limitations under the License.
1:2710472: 
1:2710472:  */
1:2710472: 
1:fb3b060: package org.apache.derbyTesting.functionTests.tests.lang;
2:fb3b060: 
1:1ae02c9: import java.io.IOException;
1:1ae02c9: import java.sql.Clob;
1:1ae02c9: import java.sql.PreparedStatement;
1:1ae02c9: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:1ae02c9: import junit.framework.Test;
1:fb3b060: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:fb3b060: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:fb3b060: import org.apache.derbyTesting.junit.JDBC;
1:fb3b060: 
1:fb3b060: /**
1:fb3b060:  * Functional test for ansi trim functionality added for DERBY-1623.
1:fb3b060:  * 
1:fb3b060:  * @since May 6, 2007
1:fb3b060:  */
1:fb3b060: public class AnsiTrimTest extends BaseJDBCTestCase {
1:fb3b060: 
1:fb3b060:     /**
1:fb3b060:      * Create a test case with the given name.
1:fb3b060:      *
1:fb3b060:      * @param name of the test case.
1:fb3b060:      */
1:fb3b060:     public AnsiTrimTest(String name) {
1:fb3b060:         super(name);
1:fb3b060:     }
1:fb3b060: 
1:b843fce:     /*
1:b843fce:      * Factored out for reuse in other TestCases which add
1:b843fce:      * the same test method in their suite() method.
1:b843fce:      *
1:b843fce:      * Currently done for a few testcases reused in replication testing:
1:b843fce:      * o.a.dT.ft.tests.replicationTests.StandardTests.
1:b843fce:      */
1:b843fce:     public static void decorate(Statement s)
1:b843fce:     throws SQLException
1:b843fce:     {
1:b843fce:         s.executeUpdate("create table tt (id int, v varchar(16), c char(16), cl clob(10240))");
1:b843fce:         s.executeUpdate("insert into tt values (1, 'abcaca', 'abcaca', 'abcaca')");
1:b843fce:         s.executeUpdate("create table nt (v varchar(2))");
1:b843fce:         s.executeUpdate("insert into nt values (null)");
1:b843fce:     }
1:b843fce:    public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("AnsiTrimTest");
1:fb3b060:         suite.addTestSuite(AnsiTrimTest.class);
1:fb3b060:         return new CleanDatabaseTestSetup(suite) {
1:fb3b060:             public void decorateSQL(Statement s)
1:fb3b060:                     throws SQLException {
1:b843fce:                 decorate(s);
1:fb3b060:             }
1:fb3b060: 
1:fb3b060:         };
1:fb3b060:     }
1:fb3b060: 
1:fb3b060:     /**
1:fb3b060:      * trim a column with a constant trim char.
1:fb3b060:      */
1:fb3b060:     public void testColumnsWithConstant()
1:fb3b060:             throws SQLException {
1:fb3b060:         positiveTest("select trim(' ' from v) from tt where id = 1", "abcaca");
1:fb3b060:         positiveTest("select trim('a' from v) from tt where id = 1", "bcac");
1:fb3b060:         positiveTest("select trim(both 'a' from v) from tt where id = 1", "bcac");
1:fb3b060:         positiveTest("select trim(leading 'a' from v) from tt where id = 1", "bcaca");
1:fb3b060:         positiveTest("select trim(trailing 'a' from v) from tt where id = 1", "abcac");
1:fb3b060: 
1:fb3b060:         // chars are padded with spaces at the end.
1:fb3b060:         positiveTest("select trim(' ' from c) from tt where id = 1", "abcaca");
1:fb3b060:         positiveTest("select trim('a' from c) from tt where id = 1", "bcaca          ");
1:fb3b060:         positiveTest("select trim(both 'a' from c) from tt where id = 1", "bcaca          ");
1:fb3b060:         positiveTest("select trim(leading 'a' from c) from tt where id = 1", "bcaca          ");
1:fb3b060:         positiveTest("select trim(trailing 'a' from c) from tt where id = 1", "abcaca          ");
1:fb3b060: 
1:fb3b060:         //positiveTest("select trim(' ' from cl) from tt", "abcaca");
1:fb3b060:     }
1:fb3b060: 
1:fb3b060:     /**
1:fb3b060:      * Use a few expressions as the trim character.
1:fb3b060:      */
1:fb3b060:     public void testTrimCharIsExpr()
1:fb3b060:             throws SQLException {
1:fb3b060:         String expr;
1:fb3b060:         positiveTest(
1:fb3b060:                 "SELECT count(*) FROM tt  " +
1:39b3237:                 "WHERE id = 1 AND (trim (leading substr(v,1,1) from v)) = 'bcaca'", 1);
1:fb3b060: 
1:fb3b060:         positiveTest(
1:fb3b060:                 "select trim (both (case when length(v) = 6 then 'a' else 'b' end) from v) from tt",
1:fb3b060:                 "bcac");
1:fb3b060: 
1:fb3b060:         positiveTest(
1:fb3b060:                 "SELECT trim(TRAILING lcase(ucase('a')) from v) from tt", "abcac");
1:fb3b060:         
1:fb3b060:     }
1:fb3b060: 
1:fb3b060:     /**
1:fb3b060:      * A clob column is the input source.
1:fb3b060:      */
1:fb3b060:     public void testTrimFromClobColumn()
1:fb3b060:             throws SQLException, IOException {
1:fb3b060:         String sql = "SELECT trim('a' from cl) from tt";
1:fb3b060:         ResultSet rs = null;
1:fb3b060: 
1:fb3b060:         PreparedStatement ps = null;
1:fb3b060:         try {
1:fb3b060:             ps = prepareStatement(sql);
1:fb3b060:             rs = ps.executeQuery();
1:fb3b060:             // positiveTest does not deal with clobs.
1:fb3b060:             assertTrue(rs.next());
1:fb3b060:             Clob clob = rs.getClob(1);
1:fb3b060:             char[] cbuf = new char[128];
1:fb3b060:             assertEquals(4, clob.length());
1:fb3b060:             clob.getCharacterStream().read(cbuf);
1:fb3b060:             assertEquals("bcac", new String(cbuf, 0, 4));
1:fb3b060:             assertFalse(rs.next());
1:fb3b060:         } finally {
1:fb3b060:             if (rs != null) { try { rs.close(); } catch (SQLException e) {/* ignore */} }
1:fb3b060:             if (ps != null) { try { ps.close(); } catch (SQLException e) {/* ignore */} }
1:fb3b060:         }
1:fb3b060:     }
1:fb3b060:     
1:fb3b060:         
1:fb3b060:     /**
1:fb3b060:      * Use a few different expressions as the trim source.
1:fb3b060:      */
1:fb3b060:     public void testTrimSourceIsExpr()
1:fb3b060:             throws SQLException {
1:fb3b060:         positiveTest("SELECT trim(' ' from cast(v as char(7))) from tt", "abcaca");
1:fb3b060:         positiveTest("SELECT trim('a' from v||v) from tt", "bcacaabcac");
1:fb3b060:         positiveTest("SELECT trim('a' from ltrim(rtrim(c))) from tt", "bcac");        
1:fb3b060:     }
1:fb3b060: 
1:fb3b060:     /**
1:fb3b060:      * All the characters are trimmed.
1:fb3b060:      */
1:fb3b060:     public void testTrimResultIsEmpty()
1:fb3b060:             throws SQLException {
1:fb3b060:         positiveTest("select trim(' ' from '     ' ) from tt", "");
1:fb3b060:         positiveTest("select trim(LEADING ' ' from '     ' ) from tt", "");
1:fb3b060:         positiveTest("select trim(TRAILING ' ' from '     ' ) from tt", "");
1:fb3b060:         positiveTest("select trim(BOTH ' ' from '     ' ) from tt", "");
1:fb3b060:     }
1:fb3b060: 
1:fb3b060:     public void testSourceIsEmpty()
1:fb3b060:             throws SQLException {
1:fb3b060:         positiveTest("select trim(' ' from '') from tt", "");
1:fb3b060:         positiveTest("select trim(leading ' ' from '') from tt", "");
1:fb3b060:         positiveTest("select trim(trailing ' ' from '') from tt", "");
1:fb3b060:         positiveTest("select trim(both ' ' from '') from tt", "");
1:fb3b060:     }
1:fb3b060: 
1:fb3b060:     public void testSourceIsNull()
1:fb3b060:             throws SQLException {
1:fb3b060:         positiveTest("select trim(' ' from v) from nt", null);
1:fb3b060:         positiveTest("select trim(leading ' ' from v) from nt", null);
1:fb3b060:         positiveTest("select trim(trailing ' ' from v) from nt", null);
1:fb3b060:         positiveTest("select trim(both ' ' from v) from nt", null);                
1:fb3b060:     }
1:fb3b060: 
1:fb3b060:     public void testSourceIsSingleChar()
1:fb3b060:             throws SQLException {
1:fb3b060:         positiveTest("select trim(' ' from 'a') from nt", "a");
1:fb3b060:         positiveTest("select trim(leading ' ' from 'a') from nt", "a");
1:fb3b060:         positiveTest("select trim(trailing ' ' from 'a') from nt", "a");
1:fb3b060:         positiveTest("select trim(both ' ' from 'a') from nt", "a");        
1:fb3b060: 
1:fb3b060:         positiveTest("select trim('a' from 'a') from nt", "");
1:fb3b060:         positiveTest("select trim(leading 'a' from 'a') from nt", "");
1:fb3b060:         positiveTest("select trim(trailing 'a' from 'a') from nt", "");
1:fb3b060:         positiveTest("select trim(both 'a' from 'a') from nt", "");                
1:fb3b060:     }
1:fb3b060: 
1:fb3b060:     public void testCharIsNull() throws SQLException {
1:fb3b060:         positiveTest("select trim ((values cast (null as char(1))) from v) from tt", null);
1:fb3b060:     }
1:fb3b060: 
1:fb3b060:     private void positiveTest(String sql, Object expected)
1:fb3b060:             throws SQLException {
1:fb3b060:         ResultSet rs = null;
1:fb3b060:         PreparedStatement ps = null;
1:fb3b060:         try {
1:fb3b060:             ps = prepareStatement(sql);
1:fb3b060:             rs = ps.executeQuery();
1:fb3b060:             JDBC.assertFullResultSet(rs, new Object[][] {{expected}}, false, /*closeResultSet=*/true);
1:fb3b060:         } finally {
1:fb3b060:             // assertFullResultSet closes rs.
1:fb3b060:             if (ps != null) { ps.close(); }
1:fb3b060:         }
1:fb3b060:     }
1:fb3b060: }
1:fb3b060: 
1:fb3b060: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:                 "WHERE id = 1 AND (trim (leading substr(v,1,1) from v)) = 'bcaca'", 1);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.sql.Clob;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("AnsiTrimTest");
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:b843fce
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * Factored out for reuse in other TestCases which add
1:      * the same test method in their suite() method.
1:      *
1:      * Currently done for a few testcases reused in replication testing:
1:      * o.a.dT.ft.tests.replicationTests.StandardTests.
1:      */
1:     public static void decorate(Statement s)
1:     throws SQLException
1:     {
1:         s.executeUpdate("create table tt (id int, v varchar(16), c char(16), cl clob(10240))");
1:         s.executeUpdate("insert into tt values (1, 'abcaca', 'abcaca', 'abcaca')");
1:         s.executeUpdate("create table nt (v varchar(2))");
1:         s.executeUpdate("insert into nt values (null)");
1:     }
1:    public static Test suite() {
1:                 decorate(s);
author:Army
-------------------------------------------------------------------------------
commit:2710472
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
commit:fb3b060
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import java.sql.*;
0: import java.io.IOException;
1: 
1: /**
1:  * Functional test for ansi trim functionality added for DERBY-1623.
1:  * 
1:  * @since May 6, 2007
1:  */
1: public class AnsiTrimTest extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Create a test case with the given name.
1:      *
1:      * @param name of the test case.
1:      */
1:     public AnsiTrimTest(String name) {
1:         super(name);
1:     }
1: 
0:     public static Test suite() {
0:         TestSuite suite = new TestSuite("AnsiTrimTest");
1:         suite.addTestSuite(AnsiTrimTest.class);
1:         return new CleanDatabaseTestSetup(suite) {
1:             public void decorateSQL(Statement s)
1:                     throws SQLException {
0:                 s.executeUpdate("create table tt (id int, v varchar(16), c char(16), cl clob(10240))");
0:                 s.executeUpdate("insert into tt values (1, 'abcaca', 'abcaca', 'abcaca')");
0:                 s.executeUpdate("create table nt (v varchar(2))");
0:                 s.executeUpdate("insert into nt values (null)");
1:             }
1: 
1:         };
1:     }
1: 
1:     /**
1:      * trim a column with a constant trim char.
1:      */
1:     public void testColumnsWithConstant()
1:             throws SQLException {
1:         positiveTest("select trim(' ' from v) from tt where id = 1", "abcaca");
1:         positiveTest("select trim('a' from v) from tt where id = 1", "bcac");
1:         positiveTest("select trim(both 'a' from v) from tt where id = 1", "bcac");
1:         positiveTest("select trim(leading 'a' from v) from tt where id = 1", "bcaca");
1:         positiveTest("select trim(trailing 'a' from v) from tt where id = 1", "abcac");
1: 
1:         // chars are padded with spaces at the end.
1:         positiveTest("select trim(' ' from c) from tt where id = 1", "abcaca");
1:         positiveTest("select trim('a' from c) from tt where id = 1", "bcaca          ");
1:         positiveTest("select trim(both 'a' from c) from tt where id = 1", "bcaca          ");
1:         positiveTest("select trim(leading 'a' from c) from tt where id = 1", "bcaca          ");
1:         positiveTest("select trim(trailing 'a' from c) from tt where id = 1", "abcaca          ");
1: 
1:         //positiveTest("select trim(' ' from cl) from tt", "abcaca");
1:     }
1: 
1:     /**
1:      * Use a few expressions as the trim character.
1:      */
1:     public void testTrimCharIsExpr()
1:             throws SQLException {
1:         String expr;
1:         positiveTest(
1:                 "SELECT count(*) FROM tt  " +
0:                 "WHERE id = 1 AND (trim (leading substr(v,1,1) from v)) = 'bcaca'", new Integer(1));
1: 
1:         positiveTest(
1:                 "select trim (both (case when length(v) = 6 then 'a' else 'b' end) from v) from tt",
1:                 "bcac");
1: 
1:         positiveTest(
1:                 "SELECT trim(TRAILING lcase(ucase('a')) from v) from tt", "abcac");
1:         
1:     }
1: 
1:     /**
1:      * A clob column is the input source.
1:      */
1:     public void testTrimFromClobColumn()
1:             throws SQLException, IOException {
1:         String sql = "SELECT trim('a' from cl) from tt";
1:         ResultSet rs = null;
1: 
1:         PreparedStatement ps = null;
1:         try {
1:             ps = prepareStatement(sql);
1:             rs = ps.executeQuery();
1:             // positiveTest does not deal with clobs.
1:             assertTrue(rs.next());
1:             Clob clob = rs.getClob(1);
1:             char[] cbuf = new char[128];
1:             assertEquals(4, clob.length());
1:             clob.getCharacterStream().read(cbuf);
1:             assertEquals("bcac", new String(cbuf, 0, 4));
1:             assertFalse(rs.next());
1:         } finally {
1:             if (rs != null) { try { rs.close(); } catch (SQLException e) {/* ignore */} }
1:             if (ps != null) { try { ps.close(); } catch (SQLException e) {/* ignore */} }
1:         }
1:     }
1:     
1:         
1:     /**
1:      * Use a few different expressions as the trim source.
1:      */
1:     public void testTrimSourceIsExpr()
1:             throws SQLException {
1:         positiveTest("SELECT trim(' ' from cast(v as char(7))) from tt", "abcaca");
1:         positiveTest("SELECT trim('a' from v||v) from tt", "bcacaabcac");
1:         positiveTest("SELECT trim('a' from ltrim(rtrim(c))) from tt", "bcac");        
1:     }
1: 
1:     /**
1:      * All the characters are trimmed.
1:      */
1:     public void testTrimResultIsEmpty()
1:             throws SQLException {
1:         positiveTest("select trim(' ' from '     ' ) from tt", "");
1:         positiveTest("select trim(LEADING ' ' from '     ' ) from tt", "");
1:         positiveTest("select trim(TRAILING ' ' from '     ' ) from tt", "");
1:         positiveTest("select trim(BOTH ' ' from '     ' ) from tt", "");
1:     }
1: 
1:     public void testSourceIsEmpty()
1:             throws SQLException {
1:         positiveTest("select trim(' ' from '') from tt", "");
1:         positiveTest("select trim(leading ' ' from '') from tt", "");
1:         positiveTest("select trim(trailing ' ' from '') from tt", "");
1:         positiveTest("select trim(both ' ' from '') from tt", "");
1:     }
1: 
1:     public void testSourceIsNull()
1:             throws SQLException {
1:         positiveTest("select trim(' ' from v) from nt", null);
1:         positiveTest("select trim(leading ' ' from v) from nt", null);
1:         positiveTest("select trim(trailing ' ' from v) from nt", null);
1:         positiveTest("select trim(both ' ' from v) from nt", null);                
1:     }
1: 
1:     public void testSourceIsSingleChar()
1:             throws SQLException {
1:         positiveTest("select trim(' ' from 'a') from nt", "a");
1:         positiveTest("select trim(leading ' ' from 'a') from nt", "a");
1:         positiveTest("select trim(trailing ' ' from 'a') from nt", "a");
1:         positiveTest("select trim(both ' ' from 'a') from nt", "a");        
1: 
1:         positiveTest("select trim('a' from 'a') from nt", "");
1:         positiveTest("select trim(leading 'a' from 'a') from nt", "");
1:         positiveTest("select trim(trailing 'a' from 'a') from nt", "");
1:         positiveTest("select trim(both 'a' from 'a') from nt", "");                
1:     }
1: 
1:     public void testCharIsNull() throws SQLException {
1:         positiveTest("select trim ((values cast (null as char(1))) from v) from tt", null);
1:     }
1: 
1:     private void positiveTest(String sql, Object expected)
1:             throws SQLException {
1:         ResultSet rs = null;
1:         PreparedStatement ps = null;
1:         try {
1:             ps = prepareStatement(sql);
1:             rs = ps.executeQuery();
1:             JDBC.assertFullResultSet(rs, new Object[][] {{expected}}, false, /*closeResultSet=*/true);
1:         } finally {
1:             // assertFullResultSet closes rs.
1:             if (ps != null) { ps.close(); }
1:         }
1:     }
1: }
1: 
1: 
============================================================================