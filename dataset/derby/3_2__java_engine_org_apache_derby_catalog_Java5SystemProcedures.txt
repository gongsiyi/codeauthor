1:092cf8b: /*
1:092cf8b: 
1:092cf8b:    Derby - Class org.apache.derby.catalog.Java5SystemProcedures
1:092cf8b: 
1:092cf8b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:092cf8b:    contributor license agreements.  See the NOTICE file distributed with
1:092cf8b:    this work for additional information regarding copyright ownership.
1:092cf8b:    The ASF licenses this file to You under the Apache License, Version 2.0
1:092cf8b:    (the "License"); you may not use this file except in compliance with
1:092cf8b:    the License.  You may obtain a copy of the License at
1:092cf8b: 
1:092cf8b:       http://www.apache.org/licenses/LICENSE-2.0
1:092cf8b: 
1:092cf8b:    Unless required by applicable law or agreed to in writing, software
1:092cf8b:    distributed under the License is distributed on an "AS IS" BASIS,
1:092cf8b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:092cf8b:    See the License for the specific language governing permissions and
1:092cf8b:    limitations under the License.
1:092cf8b: 
1:092cf8b:  */
1:092cf8b: 
1:092cf8b: package org.apache.derby.catalog;
1:092cf8b: 
1:a0dbbd7: import java.security.AccessController;
1:a0dbbd7: import java.security.PrivilegedAction;
1:092cf8b: import java.sql.SQLException;
1:092cf8b: 
1:092cf8b: import org.apache.derby.iapi.sql.dictionary.OptionalTool;
1:092cf8b: import org.apache.derby.iapi.error.PublicAPI;
1:092cf8b: import org.apache.derby.iapi.error.StandardException;
1:092cf8b: import org.apache.derby.iapi.reference.SQLState;
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:092cf8b: import org.apache.derby.iapi.services.context.ContextService;
1:092cf8b: import org.apache.derby.iapi.services.loader.ClassFactory;
1:02fcca3: import org.apache.derby.iapi.services.loader.ClassFactoryContext;
1:092cf8b: 
1:092cf8b: /**
1:092cf8b:  * <p>
1:092cf8b:  * System procedures which run only on Java 5 or higher.
1:092cf8b:  * </p>
1:092cf8b:  */
1:092cf8b: public  class   Java5SystemProcedures
1:092cf8b: {
1:092cf8b:     ///////////////////////////////////////////////////////////////////////////////////
1:092cf8b:     //
1:092cf8b:     // CONSTANTS
1:092cf8b:     //
1:092cf8b:     ///////////////////////////////////////////////////////////////////////////////////
1:092cf8b: 
1:092cf8b:     /** Offsets into arrays in OPTIONAL_TOOLS */
1:092cf8b:     private static  final   int TOOL_NAME = 0;
1:092cf8b:     private static  final   int TOOL_CLASS_NAME = TOOL_NAME + 1;
1:092cf8b: 
1:25959e3:     /** Generic name for all user-supplied tools: the first optional arg is the tool class name */
1:25959e3:     private static  final   String  CUSTOM_TOOL_CLASS_NAME = "customTool";
1:25959e3: 
1:092cf8b:     ///////////////////////////////////////////////////////////////////////////////////
1:092cf8b:     //
1:092cf8b:     // STATE
1:092cf8b:     //
1:092cf8b:     ///////////////////////////////////////////////////////////////////////////////////
1:092cf8b: 
1:092cf8b:     /** Mapping of tool names to their implementing classes for use by SYSCS_REGISTER_TOOL */
1:092cf8b:     private static  final   String[][]  OPTIONAL_TOOLS = new String[][]
1:092cf8b:     {
1:25959e3:         { "databaseMetaData", "org.apache.derby.impl.tools.optional.DBMDWrapper" },
1:25959e3:         { "foreignViews", "org.apache.derby.impl.tools.optional.ForeignDBViews" },
1:fbf176c:         { "luceneSupport", "org.apache.derby.optional.lucene.LuceneSupport" },
1:2c50eb3:         { "optimizerTracing", "org.apache.derby.impl.sql.compile.OptimizerTracer" },
1:b6cc9d7:         { "optimizerTracingViews", "org.apache.derby.impl.sql.compile.OptTraceViewer" },
1:28c4dc4:         { "rawDBReader", "org.apache.derby.optional.dump.RawDBReader" },
1:2c38f3c:         { "simpleJson", "org.apache.derby.optional.json.SimpleJsonTool" },
1:092cf8b:     };
1:092cf8b: 
1:092cf8b:     ///////////////////////////////////////////////////////////////////////////////////
1:092cf8b:     //
1:092cf8b:     // PUBLIC BEHAVIOR
1:092cf8b:     //
1:092cf8b:     ///////////////////////////////////////////////////////////////////////////////////
1:092cf8b: 
1:092cf8b:     /**
1:092cf8b:      * <p>
1:25959e3:      * Load or unload an optional tool package. If the tool name is the special
1:25959e3:      * CUSTOM_TOOL_CLASS_NAME tool, then the first optionalArg is the name
1:25959e3:      * of a user-supplied class which implements OptionalTool.
1:092cf8b:      * </p>
1:092cf8b:      *
1:092cf8b:      * @param toolName  Name of the tool package.
1:092cf8b:      * @param register  True if the package should be loaded, false otherwise.
1:092cf8b:      * @param optionalArgs  Tool-specific configuration parameters.
1:092cf8b:      */
1:092cf8b:     public  static  void    SYSCS_REGISTER_TOOL
1:092cf8b:         (
1:092cf8b:          String toolName,
1:092cf8b:          boolean    register,
1:092cf8b:          String...  optionalArgs
1:092cf8b:          )
1:092cf8b:         throws SQLException
1:092cf8b:     {
1:092cf8b:         try {
1:a0dbbd7: 			ClassFactoryContext cfc = (ClassFactoryContext) getContext( ClassFactoryContext.CONTEXT_ID );
1:02fcca3:             ClassFactory    classFactory = cfc.getClassFactory();
1:092cf8b: 
1:25959e3:             String              toolClassName = findToolClassName( toolName, optionalArgs );            
1:092cf8b:             OptionalTool    tool = null;
1:092cf8b: 
1:0196a8f:             Class<?> toolClass;
1:092cf8b:             try {
1:0196a8f:                 toolClass = classFactory.loadApplicationClass( toolClassName );
1:092cf8b:             }
1:092cf8b:             catch (ClassNotFoundException cnfe) { throw wrap( cnfe ); }
1:0196a8f: 
1:0196a8f:             if (!OptionalTool.class.isAssignableFrom(toolClass)) {
1:0196a8f:                 throw badCustomTool(toolClassName);
1:0196a8f:             }
1:0196a8f: 
1:0196a8f:             try {
1:4469400:                 tool = (OptionalTool) toolClass.getConstructor().newInstance();
1:0196a8f:             }
1:092cf8b:             catch (InstantiationException ie) { throw wrap( ie ); }
1:092cf8b:             catch (IllegalAccessException iae) { throw wrap( iae ); }
1:4469400:             catch (NoSuchMethodException ie) { throw wrap( ie ); }
1:4469400:             catch (java.lang.reflect.InvocationTargetException iae) { throw wrap( iae ); }
1:092cf8b: 
1:25959e3:             // Strip the custom tool class name from the optional args as necessary
1:25959e3:             if ( CUSTOM_TOOL_CLASS_NAME.equals( toolName ) )
1:25959e3:             {
1:25959e3:                 optionalArgs = stripCustomClassName( optionalArgs );
1:25959e3:             }
1:25959e3: 
1:092cf8b:             if ( register ) { tool.loadTool( optionalArgs ); }
1:092cf8b:             else { tool.unloadTool( optionalArgs ); }
1:092cf8b:         }
1:092cf8b:         catch (StandardException se) { throw PublicAPI.wrapStandardException( se ); }
1:092cf8b:     }
1:092cf8b:     /** Lookup the class name corresponding to the name of an optional tool */
1:25959e3:     private static  String  findToolClassName( String toolName, String... optionalArgs ) throws StandardException
1:092cf8b:     {
1:25959e3:         //
1:25959e3:         // For a user-supplied tool, the first optional arg is the name of a user-supplied class
1:25959e3:         // which implements OptionalTool
1:25959e3:         //
1:25959e3:         if ( CUSTOM_TOOL_CLASS_NAME.equals( toolName ) )
1:25959e3:         {
1:25959e3:             if ( (optionalArgs == null) || (optionalArgs.length == 0) )
1:25959e3:             {
1:25959e3:                 throw badTool( "null" );
1:25959e3:             }
1:25959e3:             else { return optionalArgs[ 0 ]; }
1:25959e3:         }
1:25959e3:         
1:092cf8b:         for ( String[] descriptor : OPTIONAL_TOOLS )
1:092cf8b:         {
1:092cf8b:             if ( descriptor[ TOOL_NAME ].equals( toolName ) ) { return descriptor[ TOOL_CLASS_NAME ]; }
1:092cf8b:         }
1:092cf8b: 
1:25959e3:         throw badTool( toolName );
1:25959e3:     }
1:25959e3:     private static  StandardException   badTool( String toolName )
1:25959e3:     {
1:25959e3:         return StandardException.newException( SQLState.LANG_UNKNOWN_TOOL_NAME,  toolName );
1:25959e3:     }
1:25959e3: 
1:0196a8f:     private static StandardException badCustomTool(String className) {
1:0196a8f:         return StandardException.newException(
1:0196a8f:                 SQLState.LANG_UNKNOWN_CUSTOM_TOOL_NAME, className);
1:092cf8b:     }
1:092cf8b: 
1:25959e3:     /**
1:25959e3:      * <p>
1:25959e3:      * For a custom tool, we strip the first arg from the list of optional args. By
1:25959e3:      * the time we get to this method, it has already been determined that there is
1:25959e3:      * at least one arg and it is the name of a class which implements OptionalTool.
1:25959e3:      * </p>
1:25959e3:      */
1:25959e3:     private static  String[]    stripCustomClassName( String... optionalArgs )
1:25959e3:     {
1:25959e3:         int     count = optionalArgs.length - 1;
1:25959e3:         String[]    retval = new String[ count ];
1:25959e3: 
1:25959e3:         for ( int i = 0; i < count; i++ ) { retval[ i ] = optionalArgs[ i + 1 ]; }
1:25959e3: 
1:25959e3:         return retval;
1:0196a8f:     }
1:0196a8f: 
1:092cf8b:     ///////////////////////////////////////////////////////////////////////////////////
1:092cf8b:     //
1:092cf8b:     // MINIONS
1:092cf8b:     //
1:092cf8b:     ///////////////////////////////////////////////////////////////////////////////////
1:092cf8b: 
1:092cf8b:     private static  StandardException wrap( Throwable t )   { return StandardException.plainWrapException( t ); }
1:a0dbbd7:     
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of a Context. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  Context    getContext( final String contextID )
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getContext( contextID );
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<Context>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public Context run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getContext( contextID );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:092cf8b: }
1:092cf8b: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:                 tool = (OptionalTool) toolClass.getConstructor().newInstance();
1:             catch (NoSuchMethodException ie) { throw wrap( ie ); }
1:             catch (java.lang.reflect.InvocationTargetException iae) { throw wrap( iae ); }
commit:28c4dc4
/////////////////////////////////////////////////////////////////////////
1:         { "rawDBReader", "org.apache.derby.optional.dump.RawDBReader" },
commit:2c38f3c
/////////////////////////////////////////////////////////////////////////
1:         { "simpleJson", "org.apache.derby.optional.json.SimpleJsonTool" },
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import org.apache.derby.iapi.services.context.Context;
/////////////////////////////////////////////////////////////////////////
1: 			ClassFactoryContext cfc = (ClassFactoryContext) getContext( ClassFactoryContext.CONTEXT_ID );
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of a Context. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Context    getContext( final String contextID )
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getContext( contextID );
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<Context>()
1:                  {
1:                      public Context run()
1:                      {
1:                          return ContextService.getContext( contextID );
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
commit:fbf176c
/////////////////////////////////////////////////////////////////////////
1:         { "luceneSupport", "org.apache.derby.optional.lucene.LuceneSupport" },
commit:d847ced
/////////////////////////////////////////////////////////////////////////
0:         { "luceneSupport", "org.apache.derby.impl.optional.lucene.LuceneSupport" },
commit:02fcca3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.loader.ClassFactoryContext;
/////////////////////////////////////////////////////////////////////////
0: 			ClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContext( ClassFactoryContext.CONTEXT_ID );
1:             ClassFactory    classFactory = cfc.getClassFactory();
commit:b6cc9d7
/////////////////////////////////////////////////////////////////////////
1:         { "optimizerTracingViews", "org.apache.derby.impl.sql.compile.OptTraceViewer" },
commit:2c50eb3
/////////////////////////////////////////////////////////////////////////
1:         { "optimizerTracing", "org.apache.derby.impl.sql.compile.OptimizerTracer" },
commit:c57876e
/////////////////////////////////////////////////////////////////////////
0:         { "optimizerTracing", "org.apache.derby.impl.tools.optional.OptimizerTracer" },
commit:25959e3
/////////////////////////////////////////////////////////////////////////
1:     /** Generic name for all user-supplied tools: the first optional arg is the tool class name */
1:     private static  final   String  CUSTOM_TOOL_CLASS_NAME = "customTool";
1: 
/////////////////////////////////////////////////////////////////////////
1:         { "databaseMetaData", "org.apache.derby.impl.tools.optional.DBMDWrapper" },
1:         { "foreignViews", "org.apache.derby.impl.tools.optional.ForeignDBViews" },
/////////////////////////////////////////////////////////////////////////
1:      * Load or unload an optional tool package. If the tool name is the special
1:      * CUSTOM_TOOL_CLASS_NAME tool, then the first optionalArg is the name
1:      * of a user-supplied class which implements OptionalTool.
/////////////////////////////////////////////////////////////////////////
1:             String              toolClassName = findToolClassName( toolName, optionalArgs );            
/////////////////////////////////////////////////////////////////////////
1:             // Strip the custom tool class name from the optional args as necessary
1:             if ( CUSTOM_TOOL_CLASS_NAME.equals( toolName ) )
1:             {
1:                 optionalArgs = stripCustomClassName( optionalArgs );
1:             }
1: 
1:     private static  String  findToolClassName( String toolName, String... optionalArgs ) throws StandardException
1:         //
1:         // For a user-supplied tool, the first optional arg is the name of a user-supplied class
1:         // which implements OptionalTool
1:         //
1:         if ( CUSTOM_TOOL_CLASS_NAME.equals( toolName ) )
1:         {
1:             if ( (optionalArgs == null) || (optionalArgs.length == 0) )
1:             {
1:                 throw badTool( "null" );
1:             }
1:             else { return optionalArgs[ 0 ]; }
1:         }
1:         
1:         throw badTool( toolName );
1:     }
1:     private static  StandardException   badTool( String toolName )
1:     {
1:         return StandardException.newException( SQLState.LANG_UNKNOWN_TOOL_NAME,  toolName );
1:     }
1: 
1:     /**
1:      * <p>
1:      * For a custom tool, we strip the first arg from the list of optional args. By
1:      * the time we get to this method, it has already been determined that there is
1:      * at least one arg and it is the name of a class which implements OptionalTool.
1:      * </p>
1:      */
1:     private static  String[]    stripCustomClassName( String... optionalArgs )
1:     {
1:         int     count = optionalArgs.length - 1;
1:         String[]    retval = new String[ count ];
1: 
1:         for ( int i = 0; i < count; i++ ) { retval[ i ] = optionalArgs[ i + 1 ]; }
1: 
1:         return retval;
commit:e081c85
/////////////////////////////////////////////////////////////////////////
0:         { "fdbv", "org.apache.derby.impl.tools.optional.ForeignDBViews" },
commit:ea335da
/////////////////////////////////////////////////////////////////////////
0:         { "dbmd", "org.apache.derby.impl.tools.optional.DBMDWrapper" },
commit:092cf8b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.catalog.Java5SystemProcedures
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.catalog;
1: 
1: import java.sql.SQLException;
1: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1: import org.apache.derby.iapi.sql.dictionary.OptionalTool;
1: import org.apache.derby.iapi.error.PublicAPI;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * <p>
1:  * System procedures which run only on Java 5 or higher.
1:  * </p>
1:  */
1: public  class   Java5SystemProcedures
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Offsets into arrays in OPTIONAL_TOOLS */
1:     private static  final   int TOOL_NAME = 0;
1:     private static  final   int TOOL_CLASS_NAME = TOOL_NAME + 1;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Mapping of tool names to their implementing classes for use by SYSCS_REGISTER_TOOL */
1:     private static  final   String[][]  OPTIONAL_TOOLS = new String[][]
1:     {
1:     };
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // PUBLIC BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
0:      * Load or unload an optional tool package.
1:      * </p>
1:      *
1:      * @param toolName  Name of the tool package.
1:      * @param register  True if the package should be loaded, false otherwise.
1:      * @param optionalArgs  Tool-specific configuration parameters.
1:      */
1:     public  static  void    SYSCS_REGISTER_TOOL
1:         (
1:          String toolName,
1:          boolean    register,
1:          String...  optionalArgs
1:          )
1:         throws SQLException
1:     {
1:         try {
0: 			CompilerContext cc = (CompilerContext) ContextService.getContext( CompilerContext.CONTEXT_ID );
0:             ClassFactory    classFactory = cc.getClassFactory();
1: 
0:             String              toolClassName = findToolClassName( toolName );            
1:             OptionalTool    tool = null;
1: 
1:             try {
0:                 tool = (OptionalTool) classFactory.loadApplicationClass( toolClassName ).newInstance();
1:             }
1:             catch (ClassNotFoundException cnfe) { throw wrap( cnfe ); }
1:             catch (InstantiationException ie) { throw wrap( ie ); }
1:             catch (IllegalAccessException iae) { throw wrap( iae ); }
1: 
1:             if ( register ) { tool.loadTool( optionalArgs ); }
1:             else { tool.unloadTool( optionalArgs ); }
1:         }
1:         catch (StandardException se) { throw PublicAPI.wrapStandardException( se ); }
1:     }
1:     /** Lookup the class name corresponding to the name of an optional tool */
0:     private static  String  findToolClassName( String toolName ) throws StandardException
1:     {
1:         for ( String[] descriptor : OPTIONAL_TOOLS )
1:         {
1:             if ( descriptor[ TOOL_NAME ].equals( toolName ) ) { return descriptor[ TOOL_CLASS_NAME ]; }
1:         }
1: 
0:         throw StandardException.newException( SQLState.LANG_UNKNOWN_TOOL_NAME,  toolName );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  StandardException wrap( Throwable t )   { return StandardException.plainWrapException( t ); }
1: }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0196a8f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             Class<?> toolClass;
1:                 toolClass = classFactory.loadApplicationClass( toolClassName );
1: 
1:             if (!OptionalTool.class.isAssignableFrom(toolClass)) {
1:                 throw badCustomTool(toolClassName);
1:             }
1: 
1:             try {
0:                 tool = (OptionalTool) toolClass.newInstance();
1:             }
/////////////////////////////////////////////////////////////////////////
1:     private static StandardException badCustomTool(String className) {
1:         return StandardException.newException(
1:                 SQLState.LANG_UNKNOWN_CUSTOM_TOOL_NAME, className);
1:     }
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
============================================================================