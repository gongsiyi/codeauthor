1:782dbe1: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINSortPropsDescriptor
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:782dbe1:  */
1:782dbe1: 
1:48a9884: package org.apache.derby.impl.sql.catalog;
2:48a9884: 
1:48a9884: import java.sql.PreparedStatement;
1:48a9884: import java.sql.SQLException;
1:48a9884: 
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:4771f1f: import org.apache.derby.iapi.types.TypeId;
1:48a9884: import java.sql.Types;
1:4771f1f: 
1:48a9884: /**
1:48a9884:  * This class describes a Tuple for the XPLAIN_SORT_PROPS System Table.
1:48a9884:  */
1:48a9884: public class XPLAINSortPropsDescriptor extends XPLAINTableDescriptor 
1:48a9884: {
1:48a9884: 
1:48a9884:     private UUID sort_rs_id;  // the sort props UUID
1:48a9884:     private String sort_type; // the sort type: internal or external
1:48a9884:     private Integer no_input_rows; // the number of input rows of this sort
1:48a9884:     private Integer no_output_rows; // the number of output rows of this sort
1:48a9884:     private Integer no_merge_runs; // the number of merge sort runs
1:48a9884:     private String merge_run_details; // merge run details, internal encoding
1:48a9884:     private String eliminate_dups; // eliminate duplicates during sort
1:48a9884:     private String in_sort_order; // is already in sorted order
1:48a9884:     private String distinct_aggregate; // has distinct aggregates
1:48a9884:     
1:48a9884:     public XPLAINSortPropsDescriptor() {}
1:48a9884:     public XPLAINSortPropsDescriptor
1:48a9884:     (
1:48a9884:              UUID sort_rs_id,
1:48a9884:              String sort_type,
1:48a9884:              Integer no_input_rows,
1:48a9884:              Integer no_output_rows,
1:48a9884:              Integer no_merge_runs,
1:48a9884:              String merge_run_details,
1:48a9884:              String eliminate_dups,
1:48a9884:              String in_sort_order,
1:48a9884:              String distinct_aggregate
1:48a9884:     )
1:48a9884:     {
1:48a9884: 
1:48a9884:         this.sort_rs_id = sort_rs_id;
1:48a9884:         this.sort_type = sort_type;
1:48a9884:         this.no_input_rows = no_input_rows;
1:48a9884:         this.no_output_rows = no_output_rows;
1:48a9884:         this.no_merge_runs = no_merge_runs;
1:48a9884:         this.merge_run_details = merge_run_details;
1:48a9884:         this.eliminate_dups = eliminate_dups;
1:48a9884:         this.in_sort_order = in_sort_order;
1:48a9884:         this.distinct_aggregate = distinct_aggregate;
1:48a9884:         
1:48a9884:     }
1:48a9884:     public void setStatementParameters(PreparedStatement ps)
1:48a9884:         throws SQLException
1:48a9884:     {
1:48a9884:         ps.setString(1, sort_rs_id.toString());
1:48a9884:         ps.setString(2, sort_type);
1:638cea5:         ps.setObject(3, no_input_rows, Types.INTEGER);
1:638cea5:         ps.setObject(4, no_output_rows, Types.INTEGER);
1:638cea5:         ps.setObject(5, no_merge_runs, Types.INTEGER);
1:48a9884:         ps.setString(6, merge_run_details);
1:48a9884:         ps.setString(7, eliminate_dups);
1:48a9884:         ps.setString(8, in_sort_order);
1:48a9884:         ps.setString(9, distinct_aggregate);
1:48a9884:     }
1:48a9884:     
1:48a9884:     public void setSort_type(String sort_type) {
1:48a9884:         this.sort_type = sort_type;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setNo_input_rows(Integer no_input_rows) {
1:48a9884:         this.no_input_rows = no_input_rows;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setNo_output_rows(Integer no_output_rows) {
1:48a9884:         this.no_output_rows = no_output_rows;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setNo_merge_runs(Integer no_merge_runs) {
1:48a9884:         this.no_merge_runs = no_merge_runs;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setMerge_run_details(String merge_run_details) {
1:48a9884:         this.merge_run_details = merge_run_details;
1:48a9884:     }
1:48a9884: 
1:48a9884: 
1:48a9884:     public String getCatalogName() { return TABLENAME_STRING; }
1:48a9884:     static  final   String  TABLENAME_STRING = "SYSXPLAIN_SORT_PROPS";
1:48a9884: 
1:48a9884:     private static final String[][] indexColumnNames =
1:48a9884:     {
1:48a9884:         {"SORT_RS_ID"}
1:48a9884:     };
1:48a9884: 
1:48a9884:     /**
1:48a9884:      * Builds a list of columns suitable for creating this Catalog.
2:48a9884:      *
1:48a9884:      * @return array of SystemColumn suitable for making this catalog.
1:48a9884:      */
1:48a9884:     public SystemColumn[] buildColumnList() {
1:48a9884:         return new SystemColumn[] {
1:48a9884:             SystemColumnImpl.getUUIDColumn("SORT_RS_ID", false),
1:48a9884:             SystemColumnImpl.getColumn("SORT_TYPE", Types.CHAR, true, 2),
1:48a9884:             SystemColumnImpl.getColumn("NO_INPUT_ROWS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("NO_OUTPUT_ROWS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("NO_MERGE_RUNS", Types.INTEGER, true),
1:4771f1f:             SystemColumnImpl.getColumn("MERGE_RUN_DETAILS", Types.VARCHAR, true,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:48a9884:             SystemColumnImpl.getColumn("ELIMINATE_DUPLICATES", Types.CHAR, true, 1),
1:48a9884:             SystemColumnImpl.getColumn("IN_SORT_ORDER", Types.CHAR, true, 1),
1:48a9884:             SystemColumnImpl.getColumn("DISTINCT_AGGREGATE", Types.CHAR, true, 1),
1:48a9884:         };
1:48a9884:     }
1:48a9884: 
1:48a9884: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:638cea5
/////////////////////////////////////////////////////////////////////////
1:         ps.setObject(3, no_input_rows, Types.INTEGER);
1:         ps.setObject(4, no_output_rows, Types.INTEGER);
1:         ps.setObject(5, no_merge_runs, Types.INTEGER);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:4771f1f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.TypeId;
1: 
/////////////////////////////////////////////////////////////////////////
1:             SystemColumnImpl.getColumn("MERGE_RUN_DETAILS", Types.VARCHAR, true,
1:                     TypeId.VARCHAR_MAXWIDTH),
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINSortPropsDescriptor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.impl.sql.catalog.SystemColumnImpl;
1: import java.sql.Types;
1: /**
1:  * This class describes a Tuple for the XPLAIN_SORT_PROPS System Table.
1:  *
1:  */
1: public class XPLAINSortPropsDescriptor extends XPLAINTableDescriptor 
1: {
1: 
1:     private UUID sort_rs_id;  // the sort props UUID
1:     private String sort_type; // the sort type: internal or external
1:     private Integer no_input_rows; // the number of input rows of this sort
1:     private Integer no_output_rows; // the number of output rows of this sort
1:     private Integer no_merge_runs; // the number of merge sort runs
1:     private String merge_run_details; // merge run details, internal encoding
1:     private String eliminate_dups; // eliminate duplicates during sort
1:     private String in_sort_order; // is already in sorted order
1:     private String distinct_aggregate; // has distinct aggregates
1:     
1:     public XPLAINSortPropsDescriptor() {}
1:     public XPLAINSortPropsDescriptor
1:     (
1:              UUID sort_rs_id,
1:              String sort_type,
1:              Integer no_input_rows,
1:              Integer no_output_rows,
1:              Integer no_merge_runs,
1:              String merge_run_details,
1:              String eliminate_dups,
1:              String in_sort_order,
1:              String distinct_aggregate
1:     )
1:     {
1: 
1:         this.sort_rs_id = sort_rs_id;
1:         this.sort_type = sort_type;
1:         this.no_input_rows = no_input_rows;
1:         this.no_output_rows = no_output_rows;
1:         this.no_merge_runs = no_merge_runs;
1:         this.merge_run_details = merge_run_details;
1:         this.eliminate_dups = eliminate_dups;
1:         this.in_sort_order = in_sort_order;
1:         this.distinct_aggregate = distinct_aggregate;
1:         
1:     }
1:     public void setStatementParameters(PreparedStatement ps)
1:         throws SQLException
1:     {
1:         ps.setString(1, sort_rs_id.toString());
1:         ps.setString(2, sort_type);
0:         if (no_input_rows != null)
0:             ps.setInt(3, no_input_rows.intValue());
0:         else
0:             ps.setNull(3, Types.INTEGER);
0:         if (no_output_rows != null)
0:             ps.setInt(4, no_output_rows.intValue());
0:         else
0:             ps.setNull(4, Types.INTEGER);
0:         if (no_merge_runs != null)
0:             ps.setInt(5, no_merge_runs.intValue());
0:         else
0:             ps.setNull(5, Types.INTEGER);
1:         ps.setString(6, merge_run_details);
1:         ps.setString(7, eliminate_dups);
1:         ps.setString(8, in_sort_order);
1:         ps.setString(9, distinct_aggregate);
1:     }
1:     
1:     public void setSort_type(String sort_type) {
1:         this.sort_type = sort_type;
1:     }
1: 
1:     public void setNo_input_rows(Integer no_input_rows) {
1:         this.no_input_rows = no_input_rows;
1:     }
1: 
1:     public void setNo_output_rows(Integer no_output_rows) {
1:         this.no_output_rows = no_output_rows;
1:     }
1: 
1:     public void setNo_merge_runs(Integer no_merge_runs) {
1:         this.no_merge_runs = no_merge_runs;
1:     }
1: 
1:     public void setMerge_run_details(String merge_run_details) {
1:         this.merge_run_details = merge_run_details;
1:     }
1: 
1: 
1:     public String getCatalogName() { return TABLENAME_STRING; }
1:     static  final   String  TABLENAME_STRING = "SYSXPLAIN_SORT_PROPS";
1: 
1:     private static final String[][] indexColumnNames =
1:     {
1:         {"SORT_RS_ID"}
1:     };
1: 
1:     /**
1:      * Builds a list of columns suitable for creating this Catalog.
1:      *
1:      * @return array of SystemColumn suitable for making this catalog.
1:      */
1:     public SystemColumn[] buildColumnList() {
1:         return new SystemColumn[] {
1:             SystemColumnImpl.getUUIDColumn("SORT_RS_ID", false),
1:             SystemColumnImpl.getColumn("SORT_TYPE", Types.CHAR, true, 2),
1:             SystemColumnImpl.getColumn("NO_INPUT_ROWS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("NO_OUTPUT_ROWS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("NO_MERGE_RUNS", Types.INTEGER, true),
0:             SystemColumnImpl.getColumn("MERGE_RUN_DETAILS", Types.VARCHAR, true, 256),
1:             SystemColumnImpl.getColumn("ELIMINATE_DUPLICATES", Types.CHAR, true, 1),
1:             SystemColumnImpl.getColumn("IN_SORT_ORDER", Types.CHAR, true, 1),
1:             SystemColumnImpl.getColumn("DISTINCT_AGGREGATE", Types.CHAR, true, 1),
1: 
1:         };
1:     }
1: 
1: }
============================================================================