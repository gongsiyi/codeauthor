1:59d98b8: /*
11:44900c5: 
1:47ae0cd:    Derby - Class org.apache.derby.shared.common.sanity.AssertFailure
1:44900c5: 
1:1e21fc4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1e21fc4:    contributor license agreements.  See the NOTICE file distributed with
1:1e21fc4:    this work for additional information regarding copyright ownership.
1:1e21fc4:    The ASF licenses this file to you under the Apache License, Version 2.0
1:1e21fc4:    (the "License"); you may not use this file except in compliance with
1:1e21fc4:    the License.  You may obtain a copy of the License at
1:44900c5: 
1:59d98b8:       http://www.apache.org/licenses/LICENSE-2.0
1:44900c5: 
1:59d98b8:    Unless required by applicable law or agreed to in writing, software
1:59d98b8:    distributed under the License is distributed on an "AS IS" BASIS,
1:59d98b8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:59d98b8:    See the License for the specific language governing permissions and
1:59d98b8:    limitations under the License.
1:44900c5: 
5:44900c5:  */
1:47ae0cd: 
1:59d98b8: package org.apache.derby.shared.common.sanity;
1:47ae0cd: 
1:44900c5: import java.io.PrintStream;
1:44900c5: import java.io.PrintWriter;
1:47ae0cd: import java.io.StringWriter;
1:44900c5: import java.lang.reflect.InvocationTargetException;
1:44900c5: import java.lang.reflect.Method;
1:44900c5: import java.security.AccessControlException;
1:44900c5: import java.security.AccessController;
1:44900c5: import java.security.PrivilegedActionException;
1:44900c5: import java.security.PrivilegedExceptionAction;
1:47ae0cd: 
6:44900c5: /**
1:44900c5:  * AssertFailure is raised when an ASSERT check fails. Because assertions are
1:44900c5:  * not used in production code, are never expected to fail, and recovering from
1:44900c5:  * their failure is expected to be hard, they are under RuntimeException so that
1:44900c5:  * no one needs to list them in their throws clauses. An AssertFailure at the
1:59d98b8:  * outermost system level will result in system shutdown.
1:47ae0cd:  *
1:47ae0cd:  * An AssertFailure also contains a string representation of a full thread dump
1:47ae0cd:  * for all the live threads at the moment it was thrown if the JVM supports it
1:47ae0cd:  * and we have the right permissions.
1:47ae0cd:  *
1:44900c5:  * If the JVM doesn't have the method Thread.getAllStackTraces i.e, we are on a
1:dbed020:  * JVM &lt; 1.5, or if we don't have the permissions java.lang.RuntimePermission
1:44900c5:  * "getStackTrace" and "modifyThreadGroup", a message saying so is stored
1:44900c5:  * instead.
1:47ae0cd:  *
1:47ae0cd:  * The thread dump string is printed to System.err after the normal stack trace
1:44900c5:  * when the error is thrown, and it is also directly available by getThreadDump().
1:44900c5:  */
1:44900c5: public class AssertFailure extends RuntimeException {
1:47ae0cd: 
1:44900c5:     private String threadDump;
1:47ae0cd: 
1:47ae0cd:     /**
1:47ae0cd:      * This constructor takes the pieces of information
1:47ae0cd:      * expected for each error.
1:47ae0cd:      *
1:47ae0cd:      * @param message the message associated with
1:47ae0cd:      * the error.
1:47ae0cd:      *
1:47ae0cd:      * @param nestedError errors can be nested together;
1:47ae0cd:      * if this error has another error associated with it,
1:47ae0cd:      * it is specified here. The 'outermost' error should be
1:47ae0cd:      * the most severe error; inner errors should be providing
1:47ae0cd:      * additional information about what went wrong.
1:47ae0cd:      **/
1:47ae0cd:     public AssertFailure(String message, Throwable nestedError) {
1:47ae0cd:         super(message, nestedError);
1:47ae0cd:         threadDump = dumpThreads();
1:47ae0cd:     }
1:47ae0cd: 
1:47ae0cd:     /**
1:44900c5:      * This constructor takes the just the message for this error.
3:44900c5:      *
1:44900c5:      * @param message the message associated with the error.
1:44900c5:      **/
1:47ae0cd:     public AssertFailure(String message) {
1:44900c5:         super(message);
3:44900c5:         threadDump = dumpThreads();
8:44900c5:     }
1:47ae0cd: 
1:47ae0cd:     /**
1:47ae0cd:      * This constructor expects no arguments or nested error.
1:47ae0cd:      **/
1:47ae0cd:     public AssertFailure() {
1:47ae0cd:         super();
1:47ae0cd:         threadDump = dumpThreads();
1:47ae0cd:     }
1:47ae0cd: 
1:47ae0cd:     /**
1:47ae0cd:      * Returns the thread dump stored in this AssertFailure as a string.
1:47ae0cd:      *
1:47ae0cd:      * @return - thread dump string.
1:47ae0cd:      */
1:47ae0cd:     public String getThreadDump() {
1:47ae0cd:         return threadDump;
1:47ae0cd:     }
1:47ae0cd: 
1:47ae0cd:     /**
1:47ae0cd:      * Overrides printStackTrace() in java.lang.Throwable to include
1:47ae0cd:      * the thread dump after the normal stack trace.
1:47ae0cd:      */
1:47ae0cd: 
1:47ae0cd:     public void printStackTrace() {
1:47ae0cd:         printStackTrace(System.err);
1:47ae0cd:     }
1:47ae0cd: 
1:47ae0cd:     /**
1:47ae0cd:      * Overrides printStackTrace(PrintStream s) in java.lang.Throwable
1:47ae0cd:      * to include the thread dump after the normal stack trace.
1:47ae0cd:      */
1:47ae0cd:     public void printStackTrace(PrintStream s) {
1:47ae0cd:         super.printStackTrace(s);
1:47ae0cd:         s.println(threadDump);
1:47ae0cd:     }
1:47ae0cd: 
1:67790a0:     /**
1:47ae0cd:      * Overrides printStackTrace(PrintWriter s) in java.lang.Throwable
1:47ae0cd:      * to include the thread dump after the normal stack trace.
1:47ae0cd:      */
1:47ae0cd:     public void printStackTrace(PrintWriter s) {
1:47ae0cd:         super.printStackTrace(s);
1:47ae0cd:         s.println(threadDump);
1:47ae0cd:     }
1:47ae0cd: 
1:47ae0cd:     /**
1:67790a0:      * Tells if generating a thread dump is supported in the running JVM.
1:67790a0:      */
1:67790a0:     private boolean supportsThreadDump() {
1:67790a0:         try {
1:67790a0:             // This checks that we are on a jvm >= 1.5 where we
1:67790a0:             // can actually do threaddumps.
1:67790a0:             Thread.class.getMethod("getAllStackTraces", new Class[] {});
1:67790a0:             return true;
1:67790a0:         } catch (NoSuchMethodException nsme) {
1:67790a0:             // Ignore exception
1:67790a0:         }
1:67790a0:         return false;
1:67790a0:     }
1:47ae0cd: 
1:47ae0cd:     /**
1:47ae0cd:      * Dumps stack traces for all the threads if the JVM supports it.
1:47ae0cd:      * The result is returned as a string, ready to print.
1:47ae0cd:      *
1:47ae0cd:      * If the JVM doesn't have the method Thread.getAllStackTraces
1:dbed020:      * i.e, we are on a JVM &lt; 1.5, or  if we don't have the permissions:
1:47ae0cd:      * java.lang.RuntimePermission "getStackTrace" and "modifyThreadGroup",
1:47ae0cd:      * a message saying so is returned instead.
1:47ae0cd:      *
1:47ae0cd:      * @return stack traces for all live threads as a string or an error message.
1:47ae0cd:      */
1:47ae0cd:     private String dumpThreads() {
1:47ae0cd: 
1:67790a0:         if (!supportsThreadDump()) {
1:67790a0:             return "(Skipping thread dump because it is not " +
1:67790a0:                     "supported on JVM 1.4)";
1:67790a0:         }
1:67790a0:             
1:67790a0:         // NOTE: No need to flush with the StringWriter/PrintWriter combination.
1:47ae0cd:         StringWriter out = new StringWriter();
1:47ae0cd:         PrintWriter p = new PrintWriter(out, true);
1:47ae0cd: 
1:67790a0:         // Load the class and method we need with reflection.
1:67790a0:         final Method m;
1:67790a0:         try {
1:16d3334:             Class<?> c = Class.forName(
1:67790a0:                     "org.apache.derby.shared.common.sanity.ThreadDump");
1:67790a0:             m = c.getMethod("getStackDumpString", new Class[] {});
1:67790a0:         } catch (Exception e) {
1:67790a0:             p.println("Failed to load class/method required to generate " +
1:67790a0:                     "a thread dump:");
1:67790a0:             e.printStackTrace(p);
1:67790a0:             return out.toString();
1:67790a0:         }
1:67790a0: 
1:47ae0cd:         //Try to get a thread dump and deal with various situations.
1:47ae0cd:         try {
1:67790a0:             String dump = (String) AccessController.doPrivileged
1:16d3334:             (new PrivilegedExceptionAction<Object>(){
1:47ae0cd:                 public Object run() throws
1:67790a0:                         IllegalArgumentException,
1:67790a0:                         IllegalAccessException,
1:67790a0:                         InvocationTargetException {
1:67790a0:                     return m.invoke(null, (Object[])null);
1:47ae0cd:                 }
1:44900c5:             }
1:47ae0cd:             );
1:47ae0cd: 
1:47ae0cd:             //Print the dump to the message string. That went OK.
1:67790a0:             p.print("---------------\nStack traces for all live threads:");
1:47ae0cd:             p.println("\n" + dump);
1:47ae0cd:             p.println("---------------");
1:67790a0:         } catch (PrivilegedActionException pae) {
1:67790a0:             Throwable cause = pae.getCause();
1:67790a0:             if (cause instanceof InvocationTargetException &&
1:67790a0:                 cause.getCause() instanceof AccessControlException) {
1:47ae0cd: 
1:47ae0cd:                 p.println("(Skipping thread dump "
1:67790a0:                     + "because of insufficient permissions:\n"
1:67790a0:                     + cause.getCause() + ")\n");
1:44900c5:             } else {
1:67790a0:                 p.println("\nAssertFailure tried to do a thread dump, "
1:67790a0:                     + "but there was an error:");
1:67790a0:                 cause.printStackTrace(p);
1:47ae0cd:             }
1:44900c5:         }
1:47ae0cd:         return out.toString();
1:44900c5:     }
1:44900c5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:  * JVM &lt; 1.5, or if we don't have the permissions java.lang.RuntimePermission
/////////////////////////////////////////////////////////////////////////
1:      * i.e, we are on a JVM &lt; 1.5, or  if we don't have the permissions:
commit:16d3334
/////////////////////////////////////////////////////////////////////////
1:             Class<?> c = Class.forName(
/////////////////////////////////////////////////////////////////////////
1:             (new PrivilegedExceptionAction<Object>(){
commit:1e21fc4
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:67790a0
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Tells if generating a thread dump is supported in the running JVM.
1:      */
1:     private boolean supportsThreadDump() {
1:         try {
1:             // This checks that we are on a jvm >= 1.5 where we
1:             // can actually do threaddumps.
1:             Thread.class.getMethod("getAllStackTraces", new Class[] {});
1:             return true;
1:         } catch (NoSuchMethodException nsme) {
1:             // Ignore exception
1:         }
1:         return false;
1:     }
/////////////////////////////////////////////////////////////////////////
1:         if (!supportsThreadDump()) {
1:             return "(Skipping thread dump because it is not " +
1:                     "supported on JVM 1.4)";
1:         }
1:             
1:         // NOTE: No need to flush with the StringWriter/PrintWriter combination.
1:         // Load the class and method we need with reflection.
1:         final Method m;
1:         try {
0:             Class c = Class.forName(
1:                     "org.apache.derby.shared.common.sanity.ThreadDump");
1:             m = c.getMethod("getStackDumpString", new Class[] {});
1:         } catch (Exception e) {
1:             p.println("Failed to load class/method required to generate " +
1:                     "a thread dump:");
1:             e.printStackTrace(p);
1:             return out.toString();
1:         }
1: 
1:             String dump = (String) AccessController.doPrivileged
1:                         IllegalArgumentException,
1:                         IllegalAccessException,
1:                         InvocationTargetException {
1:                     return m.invoke(null, (Object[])null);
1:             p.print("---------------\nStack traces for all live threads:");
1:         } catch (PrivilegedActionException pae) {
1:             Throwable cause = pae.getCause();
1:             if (cause instanceof InvocationTargetException &&
1:                 cause.getCause() instanceof AccessControlException) {
1:                     + "because of insufficient permissions:\n"
1:                     + cause.getCause() + ")\n");
1:                 p.println("\nAssertFailure tried to do a thread dump, "
1:                     + "but there was an error:");
1:                 cause.printStackTrace(p);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:47ae0cd
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.shared.common.sanity.AssertFailure
/////////////////////////////////////////////////////////////////////////
1: import java.io.StringWriter;
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * An AssertFailure also contains a string representation of a full thread dump
1:  * for all the live threads at the moment it was thrown if the JVM supports it
1:  * and we have the right permissions.
1:  *
1:  *
1:  * The thread dump string is printed to System.err after the normal stack trace
1: 
1: 
1:     /**
1:      * This constructor takes the pieces of information
1:      * expected for each error.
1:      *
1:      * @param message the message associated with
1:      * the error.
1:      *
1:      * @param nestedError errors can be nested together;
1:      * if this error has another error associated with it,
1:      * it is specified here. The 'outermost' error should be
1:      * the most severe error; inner errors should be providing
1:      * additional information about what went wrong.
1:      **/
1:     public AssertFailure(String message, Throwable nestedError) {
1:         super(message, nestedError);
1:         threadDump = dumpThreads();
1:     }
1: 
1:     /**
1:     public AssertFailure(String message) {
1:     /**
1:      * This constructor expects no arguments or nested error.
1:      **/
1:     public AssertFailure() {
1:         super();
1:         threadDump = dumpThreads();
1:     }
1: 
1:     /**
1:      * Returns the thread dump stored in this AssertFailure as a string.
1:      *
1:      * @return - thread dump string.
1:      */
1:     public String getThreadDump() {
1:         return threadDump;
1:     }
1: 
1:     /**
1:      * Overrides printStackTrace() in java.lang.Throwable to include
1:      * the thread dump after the normal stack trace.
1:      */
1: 
1:     public void printStackTrace() {
1:         printStackTrace(System.err);
1:     }
1: 
1:     /**
1:      * Overrides printStackTrace(PrintStream s) in java.lang.Throwable
1:      * to include the thread dump after the normal stack trace.
1:      */
1:     public void printStackTrace(PrintStream s) {
1:         super.printStackTrace(s);
1:         s.println(threadDump);
1:     }
1: 
1:     /**
1:      * Overrides printStackTrace(PrintWriter s) in java.lang.Throwable
1:      * to include the thread dump after the normal stack trace.
1:      */
1:     public void printStackTrace(PrintWriter s) {
1:         super.printStackTrace(s);
1:         s.println(threadDump);
1:     }
1: 
1: 
1:     /**
1:      * Dumps stack traces for all the threads if the JVM supports it.
1:      * The result is returned as a string, ready to print.
1:      *
1:      * If the JVM doesn't have the method Thread.getAllStackTraces
0:      * i.e, we are on a JVM < 1.5, or  if we don't have the permissions:
1:      * java.lang.RuntimePermission "getStackTrace" and "modifyThreadGroup",
1:      * a message saying so is returned instead.
1:      *
1:      * @return stack traces for all live threads as a string or an error message.
1:      */
1:     private String dumpThreads() {
1: 
1:         StringWriter out = new StringWriter();
1:         PrintWriter p = new PrintWriter(out, true);
1: 
1:         //Try to get a thread dump and deal with various situations.
1:         try {
0:             //This checks that we are on a jvm >= 1.5 where we
0:             //can actually do threaddumps.
0:             Thread.class.getMethod("getAllStackTraces", new Class[] {});
1: 
0:             //Then get the thread dump.
0:             Class c = Class.
0:             forName("org.apache.derby.shared.common.sanity.ThreadDump");
0:             final Method m = c.getMethod("getStackDumpString",new Class[] {});
1: 
0:             String dump;
1: 
0:             dump = (String) AccessController.doPrivileged
0:             (new PrivilegedExceptionAction(){
1:                 public Object run() throws
0:                 IllegalArgumentException,
0:                 IllegalAccessException,
0:                 InvocationTargetException{
0:                     return m.invoke(null, null);
1:             }
1:             );
1: 
1:             //Print the dump to the message string. That went OK.
0:             p.print("---------------\nStack traces for all " +
0:             "live threads:");
1:             p.println("\n" + dump);
1:             p.println("---------------");
0:         } catch (NoSuchMethodException e) {
0:             p.println("(Skipping thread dump because it is not " +
0:             "supported on JVM 1.4)");
1: 
0:         } catch (Exception e) {
0:             if (e instanceof PrivilegedActionException &&
0:                 e.getCause() instanceof InvocationTargetException &&
0:                 e.getCause().getCause() instanceof AccessControlException){
1: 
1:                 p.println("(Skipping thread dump "
0:                         + "because of insufficient permissions:\n"
0:                         + e.getCause().getCause() + ")\n");
0:                 p.println("\nAssertFailure tried to do a thread dump, but "
0:                         + "there was an error:");
0:                 e.getCause().printStackTrace(p);
1:         return out.toString();
1:     }
commit:1b482f4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		super(message, nestedError);
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:44900c5
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayOutputStream;
1: import java.io.PrintStream;
1: import java.io.PrintWriter;
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.security.AccessControlException;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1:  * AssertFailure is raised when an ASSERT check fails. Because assertions are
1:  * not used in production code, are never expected to fail, and recovering from
1:  * their failure is expected to be hard, they are under RuntimeException so that
1:  * no one needs to list them in their throws clauses. An AssertFailure at the
1:  * 
0:  * An AssertFailure also contains a string representation of a full thread dump 
0:  * for all the live threads at the moment it was thrown if the JVM supports it 
0:  * and we have the right permissions. 
1:  * 
1:  * If the JVM doesn't have the method Thread.getAllStackTraces i.e, we are on a
0:  * JVM < 1.5, or if we don't have the permissions java.lang.RuntimePermission
1:  * "getStackTrace" and "modifyThreadGroup", a message saying so is stored
1:  * instead.
1:  * 
0:  * The thread dump string is printed to System.err after the normal stack trace 
1:  * when the error is thrown, and it is also directly available by getThreadDump().
1:  */
1: public class AssertFailure extends RuntimeException {
1:     
1:     private String threadDump;
1:     
/////////////////////////////////////////////////////////////////////////
0: 	public AssertFailure(String message, Throwable nestedError) {   
1: 		threadDump = dumpThreads();
1: 	
1: 	/**
1:      * This constructor takes the just the message for this error.
0:      *
1:      * @param message the message associated with the error.
1:      **/
0: 	public AssertFailure(String message) {
1:         super(message);
1:         threadDump = dumpThreads();
1:     }
1: 	
0: 	public AssertFailure() {
0: 		super();
1: 		threadDump = dumpThreads();
1: 	}
1: 	
1: 	/**
0: 	 * Returns the thread dump stored in this AssertFailure as a string.
0: 	 * 
0: 	 * @return - thread dump string.
1: 	 */
0: 	public String getThreadDump() {
0: 	    return threadDump;
1: 	}
1: 	
1: 	/**
0: 	 * Overrides printStackTrace() in java.lang.Throwable to include
0: 	 * the thread dump after the normal stack trace. 
1: 	 */
1: 	
0: 	public void printStackTrace() {
0: 	    printStackTrace(System.err);
1: 	}
1: 	
1: 	/**
0:      * Overrides printStackTrace(PrintStream s) in java.lang.Throwable 
0:      * to include the thread dump after the normal stack trace. 
1:      */
0: 	public void printStackTrace(PrintStream s) {
0: 	    super.printStackTrace(s);
0: 	    s.println(threadDump);
1:     }
1: 	
1: 	/**
0:      * Overrides printStackTrace(PrintWriter s) in java.lang.Throwable 
0:      * to include the thread dump after the normal stack trace. 
1:      */
0: 	public void printStackTrace(PrintWriter s) { 
0: 	    super.printStackTrace(s);
0:         s.println(threadDump);
1: 	}
1: 	
1: 	/**
0: 	 * Dumps stack traces for all the threads if the JVM supports it.
0: 	 * The result is returned as a string, ready to print.
0: 	 * 
0: 	 * If the JVM doesn't have the method Thread.getAllStackTraces 
0: 	 * i.e, we are on a JVM < 1.5, or  if we don't have the permissions: 
0: 	 * java.lang.RuntimePermission "getStackTrace" and "modifyThreadGroup",
0: 	 * a message saying so is returned instead. 
0: 	 * 
0: 	 * @return stack traces for all live threads as a string or an error message.
1: 	 */
0: 	private String dumpThreads() {
0: 	    PrintWriter p;
0: 	    ByteArrayOutputStream out = new ByteArrayOutputStream();
1: 
0: 	    p = new PrintWriter(out, true);
1: 	    
0: 	    //Try to get a thread dump and deal with various situations.
0: 	    try {
0: 	        try {
0: 	            //This checks that we are on a jvm >= 1.5 where we 
0: 	            //can actually do threaddumps.
0: 	            Class c = Class.forName("java.lang.Thread");
0: 	            c.getMethod("getAllStackTraces", new Class[] {});
1: 	            
0: 	            //Then get the thread dump.
0: 	            c = Class.forName("org.apache.derby.shared.common.sanity.ThreadDump");
0:                 final Method m = c.getMethod("getStackDumpString",new Class[] {});
1:                 
0:                 String dump;
0:                 try {
0:                     dump = (String) AccessController.doPrivileged
0:                         (new PrivilegedExceptionAction(){
0:                                 public Object run() throws 
0:                                     IllegalArgumentException, 
0:                                     IllegalAccessException, 
0:                                     InvocationTargetException{
0:                                     return m.invoke(null, null);
1:                                 }
1:                             }
0:                          );
0:                 } catch (PrivilegedActionException e) {
0:                     throw  e.getException();
1:                 }
0:                 //Print the dump to the message string. That went OK.
0:                 p.print("---------------\nStack traces for all " +
0:                 "live threads:");
0:                 p.println("\n" + dump);
0:                 p.println("---------------");
1: 	        
0: 	        } catch (NoSuchMethodException e) {
0: 	            p.println("(Skipping thread dump because it is not " +
0: 	            		"supported on JVM 1.4)");
1: 	        }
0: 	    } catch (Exception e){ 
0:             if (e instanceof InvocationTargetException) {
0:             	if (((InvocationTargetException) e).getTargetException() 
0:             			instanceof AccessControlException) {
0:             		p.println("(Skipping thread dump " +
0:             				"because of insufficient permissions:\n" 
0:             		        + e.getCause() + ")\n" );
0:             	} else 
0:             		((InvocationTargetException) e).getTargetException().
0:             		printStackTrace(p);
1:             } else {
0:             	p.println("Error trying to dump thread stack traces:");
0:                 e.printStackTrace(p);
1:             }
1:         }
0: 	    return out.toString();
author:David Van Couvering
-------------------------------------------------------------------------------
commit:59d98b8
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
0:    Derby - Class org.apache.derby.iapi.services.sanity.AssertFailure
0: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
1:       http://www.apache.org/licenses/LICENSE-2.0
0: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
0: 
0:  */
0: 
1: package org.apache.derby.shared.common.sanity;
0: 
0: import java.io.*;
0: 
0: /**
0:  * AssertFailure is raised when an ASSERT check fails.
0:  * Because assertions are not used in production code,
0:  * are never expected to fail, and recovering from their
0:  * failure is expected to be hard, they are under
0:  * RuntimeException so that no one needs to list them
0:  * in their throws clauses.  An AssertFailure at the
1:  * outermost system level will result in system shutdown.
0:  **/
0: public class AssertFailure extends RuntimeException
0: {
0: 	private Throwable nestedException;
0: 
0: 	/**
0: 	 * This constructor takes the pieces of information
0: 	 * expected for each error.
0: 	 *
0: 	 * @param message the message associated with
0: 	 * the error.
0: 	 *
0: 	 * @param nestedError errors can be nested together;
0: 	 * if this error has another error associated with it,
0: 	 * it is specified here. The 'outermost' error should be
0: 	 * the most sever error; inner errors should be providing
0: 	 * additional information about what went wrong.
0: 	 **/
0: 	public AssertFailure(String message, Throwable nestedError)
0: 	{
0: 		super(message);
0: 		nestedException = nestedError;
0: 	}
0: 
0: 	/**
0: 	 * This constructor expects no arguments or nested error.
0: 	 **/
0: 	public AssertFailure(String message)
0: 	{
0: 		super(message);
0: 	}
0: 
0: 	public void printStackTrace() {
0: 		super.printStackTrace();
0: 		if (nestedException != null)
0: 			nestedException.printStackTrace();
0: 	}
0: 	public void printStackTrace(PrintStream s) {
0: 		super.printStackTrace(s);
0: 		if (nestedException != null)
0: 			nestedException.printStackTrace(s);
0: 	}
0: 	public void printStackTrace(PrintWriter s) {
0: 		super.printStackTrace(s);
0: 		if (nestedException != null)
0: 			nestedException.printStackTrace(s);
0: 	}
0: }
============================================================================