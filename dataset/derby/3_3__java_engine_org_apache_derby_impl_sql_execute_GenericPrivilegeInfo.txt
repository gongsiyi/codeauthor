1:98c7520: /*
1:98c7520: 
1:98c7520:    Derby - Class org.apache.derby.impl.sql.execute.GenericPrivilegeInfo
1:98c7520: 
1:98c7520:    Licensed to the Apache Software Foundation (ASF) under one or more
1:98c7520:    contributor license agreements.  See the NOTICE file distributed with
1:98c7520:    this work for additional information regarding copyright ownership.
1:98c7520:    The ASF licenses this file to you under the Apache License, Version 2.0
1:98c7520:    (the "License"); you may not use this file except in compliance with
1:98c7520:    the License.  You may obtain a copy of the License at
1:98c7520: 
1:98c7520: 	  http://www.apache.org/licenses/LICENSE-2.0
1:98c7520: 
1:98c7520:    Unless required by applicable law or agreed to in writing, software
1:98c7520:    distributed under the License is distributed on an "AS IS" BASIS,
1:98c7520:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:98c7520:    See the License for the specific language governing permissions and
1:98c7520:    limitations under the License.
1:98c7520: 
1:98c7520:  */
1:98c7520: 
1:98c7520: package org.apache.derby.impl.sql.execute;
1:98c7520: 
1:98c7520: import org.apache.derby.iapi.sql.Activation;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:98c7520: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:98c7520: import org.apache.derby.iapi.store.access.TransactionController;
1:98c7520: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:98c7520: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:98c7520: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:98c7520: import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
1:98c7520: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:98c7520: import org.apache.derby.iapi.sql.dictionary.PrivilegedSQLObject;
1:98c7520: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:98c7520: import org.apache.derby.iapi.error.StandardException;
1:98c7520: import org.apache.derby.catalog.UUID;
1:98c7520: 
1:98c7520: import java.util.Iterator;
1:98c7520: import java.util.List;
1:98c7520: 
1:98c7520: public class GenericPrivilegeInfo extends PrivilegeInfo
1:98c7520: {
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520:     //
1:98c7520:     // CONSTANTS
1:98c7520:     //
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520: 
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520:     //
1:98c7520:     // STATE
1:98c7520:     //
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520: 
1:98c7520:     private PrivilegedSQLObject _tupleDescriptor;
1:98c7520:     private String              _privilege;
1:98c7520:     private boolean             _restrict;
1:98c7520: 
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520:     //
1:98c7520:     // CONSTRUCTOR
1:98c7520:     //
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520: 
1:98c7520:     /**
1:98c7520:      * Construct from the object which is protected by privileges.
1:98c7520:      *
1:98c7520:      * @param tupleDescriptor The object which is being protected
1:98c7520:      * @param privilege Kind of privilege (e.g., PermDescriptor.USAGE_PRIV)
1:98c7520:      * @param restrict True if this is a REVOKE RESTRICT action
1:98c7520:      */
1:98c7520: 	public GenericPrivilegeInfo( PrivilegedSQLObject tupleDescriptor, String privilege, boolean restrict )
1:98c7520: 	{
1:98c7520: 		_tupleDescriptor = tupleDescriptor;
1:98c7520:         _privilege = privilege;
1:98c7520:         _restrict = restrict;
1:98c7520: 	}
1:98c7520: 	
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520:     //
1:98c7520:     // PrivilegeInfo BEHAVIOR
1:98c7520:     //
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520: 
1:98c7520: 	/**
1:98c7520: 	 *	This is the guts of the Execution-time logic for GRANT/REVOKE generic privileges.
1:98c7520: 	 *
1:98c7520: 	 * @param activation
1:98c7520: 	 * @param grant true if grant, false if revoke
1:98c7520: 	 * @param grantees a list of authorization ids (strings)
1:98c7520: 	 *
1:98c7520: 	 * @exception StandardException		Thrown on failure
1:98c7520: 	 */
1:98c7520: 	public void executeGrantRevoke( Activation activation,
1:98c7520: 									boolean grant,
1:98c7520: 									List grantees)
1:98c7520: 		throws StandardException
1:98c7520: 	{
1:98c7520: 		// Check that the current user has permission to grant the privileges.
1:98c7520: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:98c7520: 		DataDictionary dd = lcc.getDataDictionary();
1:9f60172:         String currentUser = lcc.getCurrentUserId(activation);
1:98c7520: 		TransactionController tc = lcc.getTransactionExecute();
1:98c7520:         SchemaDescriptor sd = _tupleDescriptor.getSchemaDescriptor();
1:98c7520:         UUID objectID = _tupleDescriptor.getUUID();
1:98c7520:         String objectTypeName = _tupleDescriptor.getObjectTypeName();
1:98c7520: 
1:98c7520: 		// Check that the current user has permission to grant the privileges.
1:98c7520: 		checkOwnership( currentUser, (TupleDescriptor) _tupleDescriptor, sd, dd );
1:98c7520: 		
1:98c7520: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:98c7520: 
1:98c7520: 		PermDescriptor permDesc = ddg.newPermDescriptor
1:98c7520:             ( null, objectTypeName, objectID, _privilege, currentUser, null, false );
1:98c7520: 
1:98c7520: 		dd.startWriting(lcc);
1:98c7520: 		for( Iterator itr = grantees.iterator(); itr.hasNext();)
1:98c7520: 		{
1:98c7520: 			// Keep track to see if any privileges are revoked by a revoke 
1:98c7520: 			// statement. If a privilege is not revoked, we need to raise a
1:98c7520: 			// warning.
1:98c7520: 			boolean privileges_revoked = false;
1:98c7520: 			String grantee = (String) itr.next();
1:98c7520: 			if (dd.addRemovePermissionsDescriptor( grant, permDesc, grantee, tc)) 
1:98c7520: 			{
1:98c7520:                 //
1:98c7520:                 // We fall in here if we are performing REVOKE.
1:98c7520:                 //
1:98c7520: 				privileges_revoked = true;	
1:98c7520:                 int invalidationType = _restrict ? DependencyManager.REVOKE_PRIVILEGE_RESTRICT : DependencyManager.REVOKE_PRIVILEGE;
1:98c7520: 
1:98c7520: 				dd.getDependencyManager().invalidateFor( permDesc, invalidationType, lcc );
1:98c7520: 
1:98c7520: 				// Now invalidate all GPSs refering to the object.
1:98c7520: 				dd.getDependencyManager().invalidateFor(_tupleDescriptor, invalidationType, lcc );
1:98c7520: 			}
1:98c7520: 			
1:98c7520: 			addWarningIfPrivilegeNotRevoked(activation, grant, privileges_revoked, grantee);
1:98c7520: 		}
1:98c7520: 	} // end of executeGrantRevoke
1:98c7520: 
1:98c7520: 
1:98c7520: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:         String currentUser = lcc.getCurrentUserId(activation);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:98c7520
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.GenericPrivilegeInfo
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.PrivilegedSQLObject;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.catalog.UUID;
1: 
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: public class GenericPrivilegeInfo extends PrivilegeInfo
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private PrivilegedSQLObject _tupleDescriptor;
1:     private String              _privilege;
1:     private boolean             _restrict;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Construct from the object which is protected by privileges.
1:      *
1:      * @param tupleDescriptor The object which is being protected
1:      * @param privilege Kind of privilege (e.g., PermDescriptor.USAGE_PRIV)
1:      * @param restrict True if this is a REVOKE RESTRICT action
1:      */
1: 	public GenericPrivilegeInfo( PrivilegedSQLObject tupleDescriptor, String privilege, boolean restrict )
1: 	{
1: 		_tupleDescriptor = tupleDescriptor;
1:         _privilege = privilege;
1:         _restrict = restrict;
1: 	}
1: 	
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // PrivilegeInfo BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for GRANT/REVOKE generic privileges.
1: 	 *
1: 	 * @param activation
1: 	 * @param grant true if grant, false if revoke
1: 	 * @param grantees a list of authorization ids (strings)
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void executeGrantRevoke( Activation activation,
1: 									boolean grant,
1: 									List grantees)
1: 		throws StandardException
1: 	{
1: 		// Check that the current user has permission to grant the privileges.
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
0: 		String currentUser = lcc.getAuthorizationId();
1: 		TransactionController tc = lcc.getTransactionExecute();
1:         SchemaDescriptor sd = _tupleDescriptor.getSchemaDescriptor();
1:         UUID objectID = _tupleDescriptor.getUUID();
1:         String objectTypeName = _tupleDescriptor.getObjectTypeName();
1: 
1: 		// Check that the current user has permission to grant the privileges.
1: 		checkOwnership( currentUser, (TupleDescriptor) _tupleDescriptor, sd, dd );
1: 		
1: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
1: 		PermDescriptor permDesc = ddg.newPermDescriptor
1:             ( null, objectTypeName, objectID, _privilege, currentUser, null, false );
1: 
1: 		dd.startWriting(lcc);
1: 		for( Iterator itr = grantees.iterator(); itr.hasNext();)
1: 		{
1: 			// Keep track to see if any privileges are revoked by a revoke 
1: 			// statement. If a privilege is not revoked, we need to raise a
1: 			// warning.
1: 			boolean privileges_revoked = false;
1: 			String grantee = (String) itr.next();
1: 			if (dd.addRemovePermissionsDescriptor( grant, permDesc, grantee, tc)) 
1: 			{
1:                 //
1:                 // We fall in here if we are performing REVOKE.
1:                 //
1: 				privileges_revoked = true;	
1:                 int invalidationType = _restrict ? DependencyManager.REVOKE_PRIVILEGE_RESTRICT : DependencyManager.REVOKE_PRIVILEGE;
1: 
1: 				dd.getDependencyManager().invalidateFor( permDesc, invalidationType, lcc );
1: 
1: 				// Now invalidate all GPSs refering to the object.
1: 				dd.getDependencyManager().invalidateFor(_tupleDescriptor, invalidationType, lcc );
1: 			}
1: 			
1: 			addWarningIfPrivilegeNotRevoked(activation, grant, privileges_revoked, grantee);
1: 		}
1: 	} // end of executeGrantRevoke
1: 
1: 
1: }
============================================================================