1:a69fa12: /*
3:a69fa12: 
1:a69fa12:    Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility._Suite
1:a69fa12: 
1:a69fa12:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a69fa12:    contributor license agreements.  See the NOTICE file distributed with
1:a69fa12:    this work for additional information regarding copyright ownership.
1:a69fa12:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a69fa12:    (the "License"); you may not use this file except in compliance with
1:a69fa12:    the License.  You may obtain a copy of the License at
1:a69fa12: 
1:a69fa12:       http://www.apache.org/licenses/LICENSE-2.0
1:a69fa12: 
1:a69fa12:    Unless required by applicable law or agreed to in writing, software
1:a69fa12:    distributed under the License is distributed on an "AS IS" BASIS,
1:a69fa12:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a69fa12:    See the License for the specific language governing permissions and
1:a69fa12:    limitations under the License.
1:a69fa12: 
1:a69fa12:  */
1:a69fa12: package org.apache.derbyTesting.functionTests.tests.compatibility;
1:a69fa12: 
1:a69fa12: import java.util.ArrayList;
1:a69fa12: import java.util.Collections;
1:a69fa12: import java.util.List;
1:a69fa12: import junit.framework.Test;
1:a69fa12: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:8f0d45d: import org.apache.derbyTesting.junit.Derby;
1:761ebfb: import org.apache.derbyTesting.junit.DerbyDistribution;
1:a69fa12: import org.apache.derbyTesting.junit.DerbyVersion;
1:a69fa12: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:a69fa12: import org.apache.derbyTesting.junit.ServerSetup;
1:a69fa12: import org.apache.derbyTesting.junit.TestConfiguration;
1:a69fa12: 
1:a69fa12: /**
1:a69fa12:  * Runs a minimal set of compatibility tests aimed at discovering
1:a69fa12:  * incompatibilities introduced in the latest development version (trunk).
1:a69fa12:  * <p>
1:a69fa12:  * Only combinations where trunk is the client or the server qualify for the
1:a69fa12:  * MATS (Minimal Acceptance Test Suite), and only the latest releases from
1:a69fa12:  * older branches are tested. For more coverage see
1:a69fa12:  * {@link VersionCombinationConfigurator#getInstanceDevFull()}.
1:a69fa12:  */
1:a69fa12: public class _Suite
1:a69fa12:         extends BaseJDBCTestCase {
1:a69fa12: 
1:a69fa12:     /** Property for specifying versions to include. */
1:a69fa12:     static final String INCLUDE_RELEASES =
1:a69fa12:             "derby.tests.compat.includeReleases";
1:a69fa12: 
1:a69fa12:     /** Property for specifying versions to exclude. */
1:a69fa12:     static final String EXCLUDE_RELEASES =
1:a69fa12:             "derby.tests.compat.excludeReleases";
1:a69fa12: 
1:a69fa12:     /** Lazily set in {@linkplain #addVersionCombinations}, or by a subclass. */
1:a69fa12:     protected static VersionCombinationConfigurator configurator;
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * Adds compatibility tests to the specified suite according to the
1:a69fa12:      * current version combination configuration.
1:a69fa12:      *
1:a69fa12:      * @param suite the suite to add the tests to
1:a69fa12:      * @return The number of tests added.
1:a69fa12:      */
1:1ae02c9:     private static int addVersionCombinations(BaseTestSuite suite) {
1:a69fa12:         String include = getSystemProperty(INCLUDE_RELEASES);
1:a69fa12:         String exclude = getSystemProperty(EXCLUDE_RELEASES);
1:a69fa12:         List<DerbyVersion> toInclude = parseVersionList(include);
1:a69fa12:         List<DerbyVersion> toExclude = parseVersionList(exclude);
1:a69fa12: 
1:a69fa12:         if (configurator == null) {
1:a69fa12:             // MATS = minimal acceptance test suite
1:a69fa12:             configurator = VersionCombinationConfigurator.getInstanceDevMATS();
1:a69fa12:         }
1:a69fa12:         suite.setName("Compatibility suite, " + configurator.getName());
1:a69fa12:         configurator.setIncludes(toInclude);
1:a69fa12:         configurator.setExcludes(toExclude);
1:a69fa12:         return configurator.addTests(suite);
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * Parses the list of version strings and returns a list of version objects.
1:a69fa12:      * <p>
1:a69fa12:      * <strong>NOTE</strong>: If invalid versions are found a warning is simply
1:a69fa12:      * printed to the console.
1:a69fa12:      *
1:a69fa12:      * @param versions list of Derby versions, i.e '10.8.1.2,10.7.1.1'
1:a69fa12:      * @return A list of parsed Derby versions.
1:a69fa12:      */
1:a69fa12:     private static List<DerbyVersion> parseVersionList(String versions) {
1:a69fa12:         if (versions == null || versions.length() == 0) {
1:654f47f:             return Collections.emptyList();
1:a69fa12:         }
1:a69fa12:         String[] vlist = versions.split(",");
1:a69fa12:         List<DerbyVersion> ret = new ArrayList<DerbyVersion>(vlist.length);
1:a69fa12:         for (String v : vlist) {
1:a69fa12:             try {
1:a69fa12:                 ret.add(DerbyVersion.parseVersionString(v));
1:a69fa12:             } catch (IllegalArgumentException iae) {
1:a69fa12:                 alarm("badly formatted version string: " + v);
1:a69fa12:             }
1:a69fa12:         }
1:a69fa12:         return ret;
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /** Don't use this.  @see #suite() */
1:a69fa12:     public _Suite(String name) {
1:a69fa12:         super(name);
1:a69fa12:         throw new IllegalStateException("invoke suite() instead");
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * Returns the default set of compatibility tests, intended to be run
1:a69fa12:      * as part of suites.All.
1:a69fa12:      *
1:a69fa12:      * @return A default suite of compatibility tests.
1:a69fa12:      */
1:a69fa12:     public static Test suite() {
1:761ebfb:         // DERBY-5889: Disabling tests on Windows where the old releases are
1:761ebfb:         // run off of UNC paths (network drives).
1:761ebfb:         if (suffersFromDerby5889()) {
1:761ebfb:             String msg = ("tests.compatibility disabled on Windows " +
1:761ebfb:                     "with UNC paths, see DERBY-5889");
1:761ebfb:             println(msg);
1:1ae02c9:             return new BaseTestSuite(msg);
1:5aa7a29:         }
1:977383f:         // DERBY-6610: the compatibility tests don't run with classes;
1:977383f:         // return an empty suite rather than hit the IllegalStateException
1:977383f:         // from VersionCombinationConfigurator.getJarDirectoryOf
1:977383f:         if (!TestConfiguration.loadingFromJars())
1:977383f:             return new BaseTestSuite("Compatibility tests skipped becasue " +
1:977383f:                                  "they need to run from jars");
1:8f0d45d:         if (!Derby.hasClient() || !Derby.hasServer()) {
1:1ae02c9:             return new BaseTestSuite("Compatibility tests skipped because " +
1:8f0d45d:                                  "client or server is missing");
1:8f0d45d:         }
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite();
1:a69fa12:         addVersionCombinations(suite);
1:a69fa12:         TestConfiguration config = TestConfiguration.getCurrent();
1:a69fa12:         return new SecurityManagerSetup(
1:a69fa12:                 new ServerSetup(suite, "localhost", config.getPort()),
1:a69fa12:                 // Need permission for getProtectionDomain to determine what
1:a69fa12:                 // to put on the classpath for the spawned process(es).
1:a69fa12:                 VersionCombinationConfigurator.class.getName().
1:a69fa12:                     replaceAll("\\.", "/") + ".policy",
1:a69fa12:                 true);
1:a69fa12:     }
1:761ebfb: 
1:761ebfb:     /**
1:761ebfb:      * Tells if we are running in an environment that suffers from DERBY-5889.
1:761ebfb:      * <p>
1:761ebfb:      * Description: operating system is Windows and the old Derby releases are
1:761ebfb:      * residing on an UNC path (network drive).
1:761ebfb:      */
1:761ebfb:     public static boolean suffersFromDerby5889() {
1:761ebfb:         if (!isWindowsPlatform()) {
1:761ebfb:             return false;
1:761ebfb:         }
1:761ebfb:         DerbyDistribution[] dists =
1:761ebfb:                 TestConfiguration.getReleaseRepository().getDistributions();
1:761ebfb:         for (int i=0; i < dists.length; i++) {
1:761ebfb:             if (dists[i].getDerbyEngineJarPath().startsWith("\\\\")) {
1:761ebfb:                 return true;
1:761ebfb:             }
1:761ebfb:         }
1:761ebfb:         return false;
1:761ebfb:     }
1:a69fa12: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:977383f
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-6610: the compatibility tests don't run with classes;
1:         // return an empty suite rather than hit the IllegalStateException
1:         // from VersionCombinationConfigurator.getJarDirectoryOf
1:         if (!TestConfiguration.loadingFromJars())
1:             return new BaseTestSuite("Compatibility tests skipped becasue " +
1:                                  "they need to run from jars");
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:     private static int addVersionCombinations(BaseTestSuite suite) {
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite(msg);
1:             return new BaseTestSuite("Compatibility tests skipped because " +
1:         BaseTestSuite suite = new BaseTestSuite();
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:761ebfb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.DerbyDistribution;
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-5889: Disabling tests on Windows where the old releases are
1:         // run off of UNC paths (network drives).
1:         if (suffersFromDerby5889()) {
1:             String msg = ("tests.compatibility disabled on Windows " +
1:                     "with UNC paths, see DERBY-5889");
1:             println(msg);
0:             return new TestSuite(msg);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Tells if we are running in an environment that suffers from DERBY-5889.
1:      * <p>
1:      * Description: operating system is Windows and the old Derby releases are
1:      * residing on an UNC path (network drive).
1:      */
1:     public static boolean suffersFromDerby5889() {
1:         if (!isWindowsPlatform()) {
1:             return false;
1:         }
1:         DerbyDistribution[] dists =
1:                 TestConfiguration.getReleaseRepository().getDistributions();
1:         for (int i=0; i < dists.length; i++) {
1:             if (dists[i].getDerbyEngineJarPath().startsWith("\\\\")) {
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
commit:5aa7a29
/////////////////////////////////////////////////////////////////////////
0:         // DERBY-5889: Disabling tests on Windonws while investigating.
0:         if (isWindowsPlatform()) {
0:             return new TestSuite(
0:                     "tests.compatibilty disabled on Windows, see DERBY-5889");
1:         }
commit:a69fa12
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility._Suite
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.compatibility;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.DerbyVersion;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.ServerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Runs a minimal set of compatibility tests aimed at discovering
1:  * incompatibilities introduced in the latest development version (trunk).
1:  * <p>
1:  * Only combinations where trunk is the client or the server qualify for the
1:  * MATS (Minimal Acceptance Test Suite), and only the latest releases from
1:  * older branches are tested. For more coverage see
1:  * {@link VersionCombinationConfigurator#getInstanceDevFull()}.
1:  */
1: public class _Suite
1:         extends BaseJDBCTestCase {
1: 
1:     /** Property for specifying versions to include. */
1:     static final String INCLUDE_RELEASES =
1:             "derby.tests.compat.includeReleases";
1: 
1:     /** Property for specifying versions to exclude. */
1:     static final String EXCLUDE_RELEASES =
1:             "derby.tests.compat.excludeReleases";
1: 
1:     /** Lazily set in {@linkplain #addVersionCombinations}, or by a subclass. */
1:     protected static VersionCombinationConfigurator configurator;
1: 
1:     /**
1:      * Adds compatibility tests to the specified suite according to the
1:      * current version combination configuration.
1:      *
1:      * @param suite the suite to add the tests to
1:      * @return The number of tests added.
1:      */
0:     private static int addVersionCombinations(TestSuite suite) {
1:         String include = getSystemProperty(INCLUDE_RELEASES);
1:         String exclude = getSystemProperty(EXCLUDE_RELEASES);
1:         List<DerbyVersion> toInclude = parseVersionList(include);
1:         List<DerbyVersion> toExclude = parseVersionList(exclude);
1: 
1:         if (configurator == null) {
1:             // MATS = minimal acceptance test suite
1:             configurator = VersionCombinationConfigurator.getInstanceDevMATS();
1:         }
1:         suite.setName("Compatibility suite, " + configurator.getName());
1:         configurator.setIncludes(toInclude);
1:         configurator.setExcludes(toExclude);
1:         return configurator.addTests(suite);
1:     }
1: 
1:     /**
1:      * Parses the list of version strings and returns a list of version objects.
1:      * <p>
1:      * <strong>NOTE</strong>: If invalid versions are found a warning is simply
1:      * printed to the console.
1:      *
1:      * @param versions list of Derby versions, i.e '10.8.1.2,10.7.1.1'
1:      * @return A list of parsed Derby versions.
1:      */
1:     private static List<DerbyVersion> parseVersionList(String versions) {
1:         if (versions == null || versions.length() == 0) {
0:             return Collections.EMPTY_LIST;
1:         }
1:         String[] vlist = versions.split(",");
1:         List<DerbyVersion> ret = new ArrayList<DerbyVersion>(vlist.length);
1:         for (String v : vlist) {
1:             try {
1:                 ret.add(DerbyVersion.parseVersionString(v));
1:             } catch (IllegalArgumentException iae) {
1:                 alarm("badly formatted version string: " + v);
1:             }
1:         }
1:         return ret;
1:     }
1: 
1:     /** Don't use this.  @see #suite() */
1:     public _Suite(String name) {
1:         super(name);
1:         throw new IllegalStateException("invoke suite() instead");
1:     }
1: 
1:     /**
1:      * Returns the default set of compatibility tests, intended to be run
1:      * as part of suites.All.
1:      *
1:      * @return A default suite of compatibility tests.
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite();
1:         addVersionCombinations(suite);
1:         TestConfiguration config = TestConfiguration.getCurrent();
1:         return new SecurityManagerSetup(
1:                 new ServerSetup(suite, "localhost", config.getPort()),
1:                 // Need permission for getProtectionDomain to determine what
1:                 // to put on the classpath for the spawned process(es).
1:                 VersionCombinationConfigurator.class.getName().
1:                     replaceAll("\\.", "/") + ".policy",
1:                 true);
1:     }
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8f0d45d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.Derby;
/////////////////////////////////////////////////////////////////////////
0:                     "tests.compatibility disabled on Windows, see DERBY-5889");
1:         }
1:         if (!Derby.hasClient() || !Derby.hasServer()) {
0:             return new TestSuite("Compatibility tests skipped because " +
1:                                  "client or server is missing");
commit:654f47f
/////////////////////////////////////////////////////////////////////////
1:             return Collections.emptyList();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ffa2d1b
/////////////////////////////////////////////////////////////////////////
0:      * We have to suppress warnings here until DerbyVersion can be compiled
0:      * at Java 5 level.
0:      *
0:     @SuppressWarnings("unchecked")
============================================================================