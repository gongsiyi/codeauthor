2:eac0369: /*
7:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.ColumnOrdering;
1:eac0369: import org.apache.derby.iapi.store.access.SortObserver;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: import org.apache.derby.iapi.store.access.SortController;
1:eac0369: import org.apache.derby.iapi.store.access.ScanController;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableArrayHolder;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
1:eac0369: 
1:eac0369: /**
1:eac0369:  * This ResultSet evaluates scalar aggregates where
1:eac0369:  * 1 (or more, in the future) of the aggregates are distinct.
1:eac0369:  * It will scan the entire source result set and calculate
1:eac0369:  * the scalar aggregates when scanning the source during the 
1:eac0369:  * first call to next().
1:eac0369:  *
1:eac0369:  */
1:f77f36d: class DistinctScalarAggregateResultSet extends ScalarAggregateResultSet
1:eac0369: {
1:eac0369: 	private ColumnOrdering[] order;
1:eac0369: 	private int maxRowSize;
1:eac0369: 	private boolean dropDistinctAggSort;
1:eac0369: 	private	long sortId;
1:eac0369: 
1:eac0369: 	// set in open and not modified thereafter
1:eac0369:     private ScanController scanController;
1:eac0369: 
1:eac0369: 	private ExecIndexRow sortResultRow;
1:eac0369: 
1:eac0369: 	// remember whether or not any sort was performed
1:eac0369: 	private boolean sorted;
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	 * Constructor
1:eac0369: 	 *
1:eac0369: 	 * @param	s			input result set
1:eac0369: 	 * @param	isInSortedOrder	true if the source results are in sorted order
1:eac0369: 	 * @param	aggregateItem	indicates the number of the
1:eac0369: 	 *		SavedObject off of the PreparedStatement that holds the
1:eac0369: 	 *		AggregatorInfoList used by this routine. 
1:eac0369: 	 * @param	a				activation
1:d868eed: 	 * @param	ra				saved object that builds an empty output row
1:eac0369: 	 * @param	resultSetNumber	The resultSetNumber for this result set
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:f77f36d:     DistinctScalarAggregateResultSet(NoPutResultSet s,
1:eac0369: 					boolean isInSortedOrder,
1:eac0369: 					int	aggregateItem,
1:eac0369: 					int	orderingItem,
1:eac0369: 					Activation a,
1:d868eed: 					int ra,
1:eac0369: 					int maxRowSize,
1:eac0369: 					int resultSetNumber,
1:eac0369: 					boolean singleInputRow,
1:eac0369: 				    double optimizerEstimatedRowCount,
1:f77f36d: 				    double optimizerEstimatedCost) throws StandardException 
1:eac0369: 	{
1:eac0369: 		super(s, isInSortedOrder, aggregateItem, a, ra,
1:eac0369: 			  resultSetNumber, 
1:eac0369: 			  singleInputRow,
1:eac0369: 			  optimizerEstimatedRowCount,
1:f77f36d: 			  optimizerEstimatedCost);
1:eac0369: 
1:473d692:         order = ((FormatableArrayHolder)
1:473d692:                     (a.getPreparedStatement().getSavedObject(orderingItem)))
1:473d692:                         .getArray(ColumnOrdering[].class);
1:eac0369: 
1:eac0369: 		this.maxRowSize = maxRowSize;
1:eac0369: 
1:7008b63: 		recordConstructorTime();
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// ResultSet interface (leftover from NoPutResultSet)
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Open the scan.  Load the sorter and prepare to get
1:eac0369: 	 * rows from it.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cursor finished.
1:eac0369:      */
1:eac0369: 	public void	openCore() throws StandardException 
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		// REVISIT: through the direct DB API, this needs to be an
1:eac0369: 		// error, not an ASSERT; users can open twice. Only through JDBC
1:eac0369: 		// is access to open controlled and ensured valid.
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 	    	SanityManager.ASSERT( ! isOpen, "DistinctScalarResultSet already open");
1:eac0369: 
1:d868eed:         sortResultRow = (ExecIndexRow) getRowTemplate().getClone();
1:d868eed:         sourceExecIndexRow = (ExecIndexRow) getRowTemplate().getClone();
1:eac0369: 
1:eac0369:         source.openCore();
1:eac0369: 
1:0a6a846: 		try {
1:0a6a846: 			/*
1:0a6a846: 			** Load up the sorter because we have something to sort.
1:0a6a846: 			*/
1:0a6a846: 			scanController = loadSorter();
1:0a6a846: 		} catch (StandardException e) {
1:0a6a846: 			// DERBY-4330 Result set tree must be atomically open or
1:0a6a846: 			// closed for reuse to work (after DERBY-827).
1:0a6a846: 
1:0a6a846: 			isOpen = true; // to make close do its thing:
1:0a6a846: 			try { close(); } catch (StandardException ee) {}
1:0a6a846: 			throw e;
1:0a6a846: 		}
1:0a6a846: 
1:eac0369: 		sorted = true;
1:eac0369: 
1:eac0369: 	    isOpen = true;
1:eac0369: 		numOpens++;
1:eac0369: 
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* RESOLVE - THIS NEXT METHOD IS ONLY INCLUDED BECAUSE OF A JIT ERROR. THERE IS NO OTHER
1:eac0369: 	 * REASON TO OVERRIDE IT IN DistinctScalarAggregateResultSet.  THE BUG WAS FOUND IN
1:eac0369: 	 * 1.1.6 WITH THE JIT.
1:eac0369: 	 */
1:eac0369: 	/**
1:eac0369: 	 * Return the next row.  If it is a scalar aggregate scan
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure.
1:eac0369: 	 * @exception StandardException ResultSetNotOpen thrown if not yet open.
1:eac0369: 	 *
1:eac0369: 	 * @return the next row in the result
1:eac0369: 	 */
1:eac0369: 	public ExecRow	getNextRowCore() throws StandardException 
1:eac0369: 	{
1:2a4654b: 		if( isXplainOnlyMode() )
1:2a4654b: 			return null;
1:2a4654b: 
1:eac0369: 	    ExecIndexRow execIndexRow = null;
1:eac0369: 	    ExecIndexRow aggResult = null;
1:eac0369: 		boolean	cloneArg = true;
1:eac0369: 
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 	    if (isOpen)
1:eac0369: 	    {
1:eac0369: 			/*
1:eac0369: 			** We are dealing with a scalar aggregate.
1:eac0369: 			** Zip through each row and accumulate.
1:eac0369: 			** Accumulate into the first row.  Only
1:eac0369: 			** the first row is cloned.
1:eac0369: 			*/
1:eac0369: 	        while ((execIndexRow = getRowFromResultSet(cloneArg)) != null)
1:eac0369: 	        {
1:eac0369: 				/*
1:eac0369: 				** Use a clone of the first row as our result.  
1:eac0369: 				** We need to get a clone since we will be reusing
1:eac0369: 				** the original as the wrapper of the source row.
1:eac0369: 				** Turn cloning off since we wont be keeping any
1:eac0369: 				** other rows.
1:eac0369: 				*/
1:eac0369: 				if (aggResult == null)
1:eac0369: 				{
1:eac0369: 					cloneArg = false;
1:eac0369: 					aggResult = (ExecIndexRow) execIndexRow.getClone();
1:eac0369: 				}
1:eac0369: 				else
1:eac0369: 				{
1:eac0369: 					/*
1:eac0369: 					** Accumulate all aggregates.  For the distinct
1:eac0369: 					** aggregates, we'll be accumulating, for the nondistinct
1:eac0369: 					** we'll be merging.
1:eac0369: 					*/
1:eac0369: 					accumulateScalarAggregation(execIndexRow, aggResult, true);
1:eac0369: 				}
1:eac0369: 	        }
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** If we have aggregates, we need to generate a
1:eac0369: 			** value for them now.  Only finish the aggregation
1:eac0369: 			** if we haven't yet (i.e. if countOfRows == 0).
1:eac0369: 			** If there weren't any input rows, we'll allocate
1:eac0369: 			** one here.
1:eac0369: 			*/
1:eac0369: 			if (countOfRows == 0)
1:eac0369: 			{
1:eac0369: 				aggResult = finishAggregation(aggResult);
1:eac0369: 				setCurrentRow(aggResult);
1:eac0369: 				countOfRows++;
1:eac0369: 			}
1:eac0369: 	    }
1:eac0369: 
1:eac0369: 		nextTime += getElapsedMillis(beginTime);
1:eac0369: 		return aggResult;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * reopen a scan on the table. scan parameters are evaluated
1:eac0369: 	 * at each open, so there is probably some way of altering
1:eac0369: 	 * their values...
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cursor finished.
1:eac0369: 	 */
1:eac0369: 	public void	reopenCore() throws StandardException 
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 	    	SanityManager.ASSERT(isOpen, "NormalizeResultSet already open");
1:eac0369: 
1:eac0369: 		if (scanController != null)
1:eac0369: 		{
1:eac0369: 			scanController.close();
1:eac0369: 			scanController = null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		source.reopenCore();
1:eac0369: 
1:eac0369: 		/*
2:eac0369: 		** Load up the sorter because we have something to sort.
1:eac0369: 		*/
2:eac0369: 		scanController = loadSorter();
1:eac0369: 		sorted = true;
1:eac0369: 		numOpens++;
1:eac0369:         countOfRows = 0;
1:eac0369: 
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369:         /**
1:6b50965:          * If the result set has been opened,
1:6b50965: 		 * close the open scan.
1:eac0369:          */
1:59b3eae:         public void close() throws StandardException
1:59b3eae:         {
1:59b3eae:             super.close();
1:59b3eae:             closeSource();
1:59b3eae:         }
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// SCAN ABSTRACTION UTILITIES
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a row from the sorter.  Side effects:
1:eac0369: 	 * sets currentRow.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	public ExecIndexRow getRowFromResultSet(boolean doClone)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		ExecIndexRow			inputRow = null;	
1:eac0369: 		
1:eac0369: 		if (scanController.next())
1:eac0369: 		{
1:eac0369: 			// REMIND: HACKALERT we are assuming that result will
1:eac0369: 			// point to what sortResult is manipulating when
1:eac0369: 			// we complete the fetch.
1:eac0369: 			currentRow = doClone ? 
1:eac0369: 				sortResultRow.getClone() : sortResultRow;
1:eac0369: 
1:eac0369: 			inputRow = getExecutionFactory().getIndexableRow(currentRow);
1:eac0369: 
1:eac0369: 			scanController.fetch(inputRow.getRowArray());
1:eac0369: 		}
1:eac0369: 		return inputRow;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Close the source of whatever we have been scanning.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on error
1:eac0369: 	 */
1:eac0369: 	protected void	closeSource() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (scanController != null)
1:eac0369: 		{
1:eac0369: 			if (dropDistinctAggSort)
1:eac0369: 			{
1:eac0369: 				try
1:eac0369: 				{
1:eac0369: 					getTransactionController().dropSort(sortId);
1:eac0369: 				}
1:eac0369: 				catch (StandardException se)
1:eac0369: 				{
1:eac0369: 					// Eat all errors at close() time
1:eac0369: 				}
1:eac0369: 				dropDistinctAggSort = false;
1:eac0369: 			}
1:eac0369: 			scanController.close();
1:eac0369: 			scanController = null;
1:eac0369: 		}
1:eac0369: 		source.close();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// MISC UTILITIES
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Load up the sorter.  Feed it every row from the
1:eac0369: 	 * source scan.  If we have a vector aggregate, initialize
1:eac0369: 	 * the aggregator for each source row.  When done, close
1:eac0369: 	 * the source scan and open the sort.  Return the sort
1:eac0369: 	 * scan controller.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure.
1:eac0369: 	 *
1:eac0369: 	 * @return	the sort controller
1:eac0369:  	 */
1:eac0369: 	private ScanController loadSorter()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		SortController 			sorter;
1:eac0369: 		ExecRow 				sourceRow;
1:d868eed:         ExecIndexRow            sortTemplateRow = getRowTemplate();
1:eac0369: 		int						inputRowCountEstimate = (int) optimizerEstimatedRowCount;
1:eac0369: 
1:eac0369: 		TransactionController tc = getTransactionController();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** We have a distinct aggregate so, we'll need
1:eac0369: 		** to do a sort.  We use all of the sorting columns and
1:eac0369: 		** drop the aggregation on the distinct column.  Then
1:eac0369: 		** we'll feed this into the sorter again w/o the distinct
1:eac0369: 		** column in the ordering list.
1:eac0369: 		*/
1:eac0369: 		GenericAggregator[] aggsNoDistinct = getSortAggregators(aggInfoList, true,
1:eac0369: 				activation.getLanguageConnectionContext(), source);
1:eac0369: 		SortObserver sortObserver = new AggregateSortObserver(true, aggsNoDistinct, aggregates,
1:eac0369: 															  sortTemplateRow);
1:eac0369: 
1:eac0369: 		sortId = tc.createSort((Properties)null, 
1:eac0369: 					sortTemplateRow.getRowArray(),
1:eac0369: 					order,
1:eac0369: 					sortObserver,
1:eac0369: 					false,			// not in order
1:eac0369: 					inputRowCountEstimate,				// est rows, -1 means no idea	
1:eac0369: 					maxRowSize		// est rowsize
1:eac0369: 					);
1:eac0369: 		sorter = tc.openSort(sortId);
1:eac0369: 		dropDistinctAggSort = true;
1:eac0369: 				
1:eac0369: 		while ((sourceRow = source.getNextRowCore())!=null) 
1:eac0369: 		{
1:eac0369: 			sorter.insert(sourceRow.getRowArray());
1:eac0369: 			rowsInput++;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** End the sort and open up the result set
1:eac0369: 		*/
1:8417890: 		sorter.completedInserts();
1:eac0369: 
1:eac0369: 		scanController = 
1:eac0369:             tc.openSortScan(sortId, activation.getResultSetHoldability());
1:eac0369: 			
1:eac0369: 		/*
1:eac0369: 		** Aggs are initialized and input rows
1:eac0369: 		** are in order.
1:eac0369: 		*/	
1:eac0369: 		inputRowCountEstimate = rowsInput;
1:eac0369: 	
1:eac0369: 		return scanController;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 		if( isXplainOnlyMode() )
1: 			return null;
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:473d692
/////////////////////////////////////////////////////////////////////////
1:         order = ((FormatableArrayHolder)
1:                     (a.getPreparedStatement().getSavedObject(orderingItem)))
1:                         .getArray(ColumnOrdering[].class);
commit:d868eed
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	 * @param	ra				saved object that builds an empty output row
/////////////////////////////////////////////////////////////////////////
1: 					int ra,
/////////////////////////////////////////////////////////////////////////
1:         sortResultRow = (ExecIndexRow) getRowTemplate().getClone();
1:         sourceExecIndexRow = (ExecIndexRow) getRowTemplate().getClone();
/////////////////////////////////////////////////////////////////////////
1:         ExecIndexRow            sortTemplateRow = getRowTemplate();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0a6a846
/////////////////////////////////////////////////////////////////////////
1: 		try {
1: 			/*
1: 			** Load up the sorter because we have something to sort.
1: 			*/
1: 			scanController = loadSorter();
1: 		} catch (StandardException e) {
1: 			// DERBY-4330 Result set tree must be atomically open or
1: 			// closed for reuse to work (after DERBY-827).
1: 
1: 			isOpen = true; // to make close do its thing:
1: 			try { close(); } catch (StandardException ee) {}
1: 			throw e;
1: 		}
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4e784bb
/////////////////////////////////////////////////////////////////////////
commit:354870e
/////////////////////////////////////////////////////////////////////////
commit:7008b63
/////////////////////////////////////////////////////////////////////////
1: 		recordConstructorTime();
commit:8417890
/////////////////////////////////////////////////////////////////////////
1: 		sorter.completedInserts();
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
1: class DistinctScalarAggregateResultSet extends ScalarAggregateResultSet
/////////////////////////////////////////////////////////////////////////
1:     DistinctScalarAggregateResultSet(NoPutResultSet s,
/////////////////////////////////////////////////////////////////////////
1: 				    double optimizerEstimatedCost) throws StandardException 
1: 			  optimizerEstimatedCost);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
1: 
0: import org.apache.derby.iapi.services.io.Formatable;
1: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.ResultSet;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.store.access.ColumnOrdering;
1: import org.apache.derby.iapi.store.access.SortObserver;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.store.access.SortController;
1: import org.apache.derby.iapi.store.access.ScanController;
1: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.io.FormatableArrayHolder;
1: 
1: import java.util.Properties;
0: import java.util.Vector;
0: import java.util.Enumeration;
1: 
1: /**
1:  * This ResultSet evaluates scalar aggregates where
1:  * 1 (or more, in the future) of the aggregates are distinct.
1:  * It will scan the entire source result set and calculate
1:  * the scalar aggregates when scanning the source during the 
1:  * first call to next().
1:  *
0:  * @author jerry (broken out from SortResultSet)
1:  */
0: public class DistinctScalarAggregateResultSet extends ScalarAggregateResultSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private ColumnOrdering[] order;
1: 	private int maxRowSize;
1: 	private boolean dropDistinctAggSort;
1: 	private	long sortId;
1: 
1: 	// set in open and not modified thereafter
1:     private ScanController scanController;
1: 
1: 	private ExecIndexRow sortResultRow;
1: 
1: 	// remember whether or not any sort was performed
1: 	private boolean sorted;
1: 
1:     /**
1: 	 * Constructor
1: 	 *
1: 	 * @param	s			input result set
1: 	 * @param	isInSortedOrder	true if the source results are in sorted order
1: 	 * @param	aggregateItem	indicates the number of the
1: 	 *		SavedObject off of the PreparedStatement that holds the
1: 	 *		AggregatorInfoList used by this routine. 
1: 	 * @param	a				activation
0: 	 * @param	ra				generated method to build an empty
0: 	 *	 	output row 
1: 	 * @param	resultSetNumber	The resultSetNumber for this result set
1: 	 *
1: 	 * @exception StandardException Thrown on error
1: 	 */
0:     public DistinctScalarAggregateResultSet(NoPutResultSet s,
1: 					boolean isInSortedOrder,
1: 					int	aggregateItem,
1: 					int	orderingItem,
1: 					Activation a,
0: 					GeneratedMethod ra,
1: 					int maxRowSize,
1: 					int resultSetNumber,
1: 					boolean singleInputRow,
1: 				    double optimizerEstimatedRowCount,
0: 				    double optimizerEstimatedCost,
0: 					GeneratedMethod c) throws StandardException 
1: 	{
1: 		super(s, isInSortedOrder, aggregateItem, a, ra,
1: 			  resultSetNumber, 
1: 			  singleInputRow,
1: 			  optimizerEstimatedRowCount,
0: 			  optimizerEstimatedCost, c);
1: 
0: 		order = (ColumnOrdering[])
0: 					((FormatableArrayHolder)
0: 						(a.getPreparedStatement().getSavedObject(orderingItem)))
0: 					.getArray(ColumnOrdering.class);
1: 
1: 		this.maxRowSize = maxRowSize;
1: 
0: 		constructorTime += getElapsedMillis(beginTime);
1:     }
1: 
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// ResultSet interface (leftover from NoPutResultSet)
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Open the scan.  Load the sorter and prepare to get
1: 	 * rows from it.
1: 	 *
1: 	 * @exception StandardException thrown if cursor finished.
1:      */
1: 	public void	openCore() throws StandardException 
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 		// REVISIT: through the direct DB API, this needs to be an
1: 		// error, not an ASSERT; users can open twice. Only through JDBC
1: 		// is access to open controlled and ensured valid.
1: 		if (SanityManager.DEBUG)
1: 	    	SanityManager.ASSERT( ! isOpen, "DistinctScalarResultSet already open");
1: 
0: 		sortResultRow = getExecutionFactory().getIndexableRow(sortTemplateRow.getClone());
0: 		sourceExecIndexRow = getExecutionFactory().getIndexableRow(sortTemplateRow.getClone());
1: 
1:         source.openCore();
1: 
1: 		/*
1: 		** Load up the sorter because we have something to sort.
1: 		*/
1: 		scanController = loadSorter();
1: 		sorted = true;
1: 
1: 	    isOpen = true;
1: 		numOpens++;
1: 
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/* RESOLVE - THIS NEXT METHOD IS ONLY INCLUDED BECAUSE OF A JIT ERROR. THERE IS NO OTHER
1: 	 * REASON TO OVERRIDE IT IN DistinctScalarAggregateResultSet.  THE BUG WAS FOUND IN
1: 	 * 1.1.6 WITH THE JIT.
1: 	 */
1: 	/**
1: 	 * Return the next row.  If it is a scalar aggregate scan
1: 	 *
1: 	 * @exception StandardException thrown on failure.
1: 	 * @exception StandardException ResultSetNotOpen thrown if not yet open.
1: 	 *
1: 	 * @return the next row in the result
1: 	 */
1: 	public ExecRow	getNextRowCore() throws StandardException 
1: 	{
0: 	    ExecIndexRow sortResult = null;
0: 	    ExecRow result = null;
1: 	    ExecIndexRow execIndexRow = null;
1: 	    ExecIndexRow aggResult = null;
1: 		boolean	cloneArg = true;
1: 
1: 		beginTime = getCurrentTimeMillis();
1: 	    if (isOpen)
1: 	    {
1: 			/*
1: 			** We are dealing with a scalar aggregate.
1: 			** Zip through each row and accumulate.
1: 			** Accumulate into the first row.  Only
1: 			** the first row is cloned.
1: 			*/
1: 	        while ((execIndexRow = getRowFromResultSet(cloneArg)) != null)
1: 	        {
1: 				/*
1: 				** Use a clone of the first row as our result.  
1: 				** We need to get a clone since we will be reusing
1: 				** the original as the wrapper of the source row.
1: 				** Turn cloning off since we wont be keeping any
1: 				** other rows.
1: 				*/
1: 				if (aggResult == null)
1: 				{
1: 					cloneArg = false;
1: 					aggResult = (ExecIndexRow) execIndexRow.getClone();
1: 				}
1: 				else
1: 				{
1: 					/*
1: 					** Accumulate all aggregates.  For the distinct
1: 					** aggregates, we'll be accumulating, for the nondistinct
1: 					** we'll be merging.
1: 					*/
1: 					accumulateScalarAggregation(execIndexRow, aggResult, true);
1: 				}
1: 	        }
1: 
1: 			/*
1: 			** If we have aggregates, we need to generate a
1: 			** value for them now.  Only finish the aggregation
1: 			** if we haven't yet (i.e. if countOfRows == 0).
1: 			** If there weren't any input rows, we'll allocate
1: 			** one here.
1: 			*/
1: 			if (countOfRows == 0)
1: 			{
1: 				aggResult = finishAggregation(aggResult);
0: 				currentRow = aggResult;
1: 				setCurrentRow(aggResult);
1: 				countOfRows++;
1: 			}
1: 	    }
1: 
1: 		nextTime += getElapsedMillis(beginTime);
1: 		return aggResult;
1: 	}
1: 
1: 	/**
1: 	 * reopen a scan on the table. scan parameters are evaluated
1: 	 * at each open, so there is probably some way of altering
1: 	 * their values...
1: 	 *
1: 	 * @exception StandardException thrown if cursor finished.
1: 	 */
1: 	public void	reopenCore() throws StandardException 
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 		if (SanityManager.DEBUG)
1: 	    	SanityManager.ASSERT(isOpen, "NormalizeResultSet already open");
1: 
1: 		if (scanController != null)
1: 		{
1: 			scanController.close();
1: 			scanController = null;
1: 		}
1: 
1: 		source.reopenCore();
1: 
1: 		/*
1: 		** Load up the sorter because we have something to sort.
1: 		*/
1: 		scanController = loadSorter();
1: 		sorted = true;
1: 		numOpens++;
1:         countOfRows = 0;
1: 
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// SCAN ABSTRACTION UTILITIES
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Get a row from the sorter.  Side effects:
1: 	 * sets currentRow.
1: 	 *
1: 	 * @exception StandardException Thrown on error
1: 	 */
1: 	public ExecIndexRow getRowFromResultSet(boolean doClone)
1: 		throws StandardException
1: 	{
1: 		ExecIndexRow			inputRow = null;	
1: 		
1: 		if (scanController.next())
1: 		{
1: 			// REMIND: HACKALERT we are assuming that result will
1: 			// point to what sortResult is manipulating when
1: 			// we complete the fetch.
1: 			currentRow = doClone ? 
1: 				sortResultRow.getClone() : sortResultRow;
1: 
1: 			inputRow = getExecutionFactory().getIndexableRow(currentRow);
1: 
1: 			scanController.fetch(inputRow.getRowArray());
1: 		}
1: 		return inputRow;
1: 	}
1: 
1: 	/**
1: 	 * Close the source of whatever we have been scanning.
1: 	 *
1: 	 * @exception StandardException thrown on error
1: 	 */
1: 	protected void	closeSource() throws StandardException
1: 	{
1: 		if (scanController != null)
1: 		{
1: 			if (dropDistinctAggSort)
1: 			{
1: 				try
1: 				{
1: 					getTransactionController().dropSort(sortId);
1: 				}
1: 				catch (StandardException se)
1: 				{
1: 					// Eat all errors at close() time
1: 				}
1: 				dropDistinctAggSort = false;
1: 			}
1: 			scanController.close();
1: 			scanController = null;
1: 		}
1: 		source.close();
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	// MISC UTILITIES
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Load up the sorter.  Feed it every row from the
1: 	 * source scan.  If we have a vector aggregate, initialize
1: 	 * the aggregator for each source row.  When done, close
1: 	 * the source scan and open the sort.  Return the sort
1: 	 * scan controller.
1: 	 *
1: 	 * @exception StandardException thrown on failure.
1: 	 *
1: 	 * @return	the sort controller
1:  	 */
1: 	private ScanController loadSorter()
1: 		throws StandardException
1: 	{
1: 		SortController 			sorter;
1: 		ExecRow 				sourceRow;
1: 		int						inputRowCountEstimate = (int) optimizerEstimatedRowCount;
1: 
1: 		TransactionController tc = getTransactionController();
1: 
1: 		/*
1: 		** We have a distinct aggregate so, we'll need
1: 		** to do a sort.  We use all of the sorting columns and
1: 		** drop the aggregation on the distinct column.  Then
1: 		** we'll feed this into the sorter again w/o the distinct
1: 		** column in the ordering list.
1: 		*/
1: 		GenericAggregator[] aggsNoDistinct = getSortAggregators(aggInfoList, true,
1: 				activation.getLanguageConnectionContext(), source);
1: 		SortObserver sortObserver = new AggregateSortObserver(true, aggsNoDistinct, aggregates,
1: 															  sortTemplateRow);
1: 
1: 		sortId = tc.createSort((Properties)null, 
1: 					sortTemplateRow.getRowArray(),
1: 					order,
1: 					sortObserver,
1: 					false,			// not in order
1: 					inputRowCountEstimate,				// est rows, -1 means no idea	
1: 					maxRowSize		// est rowsize
1: 					);
1: 		sorter = tc.openSort(sortId);
1: 		dropDistinctAggSort = true;
1: 				
1: 		while ((sourceRow = source.getNextRowCore())!=null) 
1: 		{
1: 			sorter.insert(sourceRow.getRowArray());
1: 			rowsInput++;
1: 		}
1: 
1: 		/*
1: 		** End the sort and open up the result set
1: 		*/
0: 		sorter.close();
1: 
1: 		scanController = 
1:             tc.openSortScan(sortId, activation.getResultSetHoldability());
1: 			
1: 		/*
1: 		** Aggs are initialized and input rows
1: 		** are in order.
1: 		*/	
1: 		inputRowCountEstimate = rowsInput;
1: 	
1: 		return scanController;
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1:          * If the result set has been opened,
1: 		 * close the open scan.
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:59b3eae
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:         /**
0:          * @inheritDoc
0:          */
1:         public void close() throws StandardException
1:         {
1:             super.close();
1:             closeSource();
1:         }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: import org.apache.derby.iapi.store.access.SortObserver;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.access.SortController;
0: import org.apache.derby.iapi.store.access.ScanController;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.io.FormatableArrayHolder;
0: 
0: import java.util.Properties;
0: import java.util.Vector;
0: import java.util.Enumeration;
0: 
0: /**
0:  * This ResultSet evaluates scalar aggregates where
0:  * 1 (or more, in the future) of the aggregates are distinct.
0:  * It will scan the entire source result set and calculate
0:  * the scalar aggregates when scanning the source during the 
0:  * first call to next().
0:  *
0:  * @author jerry (broken out from SortResultSet)
0:  */
0: public class DistinctScalarAggregateResultSet extends ScalarAggregateResultSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private ColumnOrdering[] order;
0: 	private int maxRowSize;
0: 	private boolean dropDistinctAggSort;
0: 	private	long sortId;
0: 
0: 	// set in open and not modified thereafter
0:     private ScanController scanController;
0: 
0: 	private ExecIndexRow sortResultRow;
0: 
0: 	// remember whether or not any sort was performed
0: 	private boolean sorted;
0: 
0:     /**
0: 	 * Constructor
0: 	 *
0: 	 * @param	s			input result set
0: 	 * @param	isInSortedOrder	true if the source results are in sorted order
0: 	 * @param	aggregateItem	indicates the number of the
0: 	 *		SavedObject off of the PreparedStatement that holds the
0: 	 *		AggregatorInfoList used by this routine. 
0: 	 * @param	a				activation
0: 	 * @param	ra				generated method to build an empty
0: 	 *	 	output row 
0: 	 * @param	resultSetNumber	The resultSetNumber for this result set
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */
0:     public DistinctScalarAggregateResultSet(NoPutResultSet s,
0: 					boolean isInSortedOrder,
0: 					int	aggregateItem,
0: 					int	orderingItem,
0: 					Activation a,
0: 					GeneratedMethod ra,
0: 					int maxRowSize,
0: 					int resultSetNumber,
0: 					boolean singleInputRow,
0: 				    double optimizerEstimatedRowCount,
0: 				    double optimizerEstimatedCost,
0: 					GeneratedMethod c) throws StandardException 
0: 	{
0: 		super(s, isInSortedOrder, aggregateItem, a, ra,
0: 			  resultSetNumber, 
0: 			  singleInputRow,
0: 			  optimizerEstimatedRowCount,
0: 			  optimizerEstimatedCost, c);
0: 
0: 		order = (ColumnOrdering[])
0: 					((FormatableArrayHolder)
0: 						(a.getPreparedStatement().getSavedObject(orderingItem)))
0: 					.getArray(ColumnOrdering.class);
0: 
0: 		this.maxRowSize = maxRowSize;
0: 
0: 		constructorTime += getElapsedMillis(beginTime);
0:     }
0: 
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// ResultSet interface (leftover from NoPutResultSet)
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Open the scan.  Load the sorter and prepare to get
0: 	 * rows from it.
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0:      */
0: 	public void	openCore() throws StandardException 
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 		// REVISIT: through the direct DB API, this needs to be an
0: 		// error, not an ASSERT; users can open twice. Only through JDBC
0: 		// is access to open controlled and ensured valid.
0: 		if (SanityManager.DEBUG)
0: 	    	SanityManager.ASSERT( ! isOpen, "DistinctScalarResultSet already open");
0: 
0: 		sortResultRow = getExecutionFactory().getIndexableRow(sortTemplateRow.getClone());
0: 		sourceExecIndexRow = getExecutionFactory().getIndexableRow(sortTemplateRow.getClone());
0: 
0:         source.openCore();
0: 
0: 		/*
0: 		** Load up the sorter because we have something to sort.
0: 		*/
0: 		scanController = loadSorter();
0: 		sorted = true;
0: 
0: 	    isOpen = true;
0: 		numOpens++;
0: 
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/* RESOLVE - THIS NEXT METHOD IS ONLY INCLUDED BECAUSE OF A JIT ERROR. THERE IS NO OTHER
0: 	 * REASON TO OVERRIDE IT IN DistinctScalarAggregateResultSet.  THE BUG WAS FOUND IN
0: 	 * 1.1.6 WITH THE JIT.
0: 	 */
0: 	/**
0: 	 * Return the next row.  If it is a scalar aggregate scan
0: 	 *
0: 	 * @exception StandardException thrown on failure.
0: 	 * @exception StandardException ResultSetNotOpen thrown if not yet open.
0: 	 *
0: 	 * @return the next row in the result
0: 	 */
0: 	public ExecRow	getNextRowCore() throws StandardException 
0: 	{
0: 	    ExecIndexRow sortResult = null;
0: 	    ExecRow result = null;
0: 	    ExecIndexRow execIndexRow = null;
0: 	    ExecIndexRow aggResult = null;
0: 		boolean	cloneArg = true;
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 	    if (isOpen)
0: 	    {
0: 			/*
0: 			** We are dealing with a scalar aggregate.
0: 			** Zip through each row and accumulate.
0: 			** Accumulate into the first row.  Only
0: 			** the first row is cloned.
0: 			*/
0: 	        while ((execIndexRow = getRowFromResultSet(cloneArg)) != null)
0: 	        {
0: 				/*
0: 				** Use a clone of the first row as our result.  
0: 				** We need to get a clone since we will be reusing
0: 				** the original as the wrapper of the source row.
0: 				** Turn cloning off since we wont be keeping any
0: 				** other rows.
0: 				*/
0: 				if (aggResult == null)
0: 				{
0: 					cloneArg = false;
0: 					aggResult = (ExecIndexRow) execIndexRow.getClone();
0: 				}
0: 				else
0: 				{
0: 					/*
0: 					** Accumulate all aggregates.  For the distinct
0: 					** aggregates, we'll be accumulating, for the nondistinct
0: 					** we'll be merging.
0: 					*/
0: 					accumulateScalarAggregation(execIndexRow, aggResult, true);
0: 				}
0: 	        }
0: 
0: 			/*
0: 			** If we have aggregates, we need to generate a
0: 			** value for them now.  Only finish the aggregation
0: 			** if we haven't yet (i.e. if countOfRows == 0).
0: 			** If there weren't any input rows, we'll allocate
0: 			** one here.
0: 			*/
0: 			if (countOfRows == 0)
0: 			{
0: 				aggResult = finishAggregation(aggResult);
0: 				currentRow = aggResult;
0: 				setCurrentRow(aggResult);
0: 				countOfRows++;
0: 			}
0: 	    }
0: 
0: 		nextTime += getElapsedMillis(beginTime);
0: 		return aggResult;
0: 	}
0: 
0: 	/**
0: 	 * reopen a scan on the table. scan parameters are evaluated
0: 	 * at each open, so there is probably some way of altering
0: 	 * their values...
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0: 	 */
0: 	public void	reopenCore() throws StandardException 
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 		if (SanityManager.DEBUG)
0: 	    	SanityManager.ASSERT(isOpen, "NormalizeResultSet already open");
0: 
0: 		if (scanController != null)
0: 		{
0: 			scanController.close();
0: 			scanController = null;
0: 		}
0: 
0: 		source.reopenCore();
0: 
0: 		/*
0: 		** Load up the sorter because we have something to sort.
0: 		*/
0: 		scanController = loadSorter();
0: 		sorted = true;
0: 		numOpens++;
0:         countOfRows = 0;
0: 
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// SCAN ABSTRACTION UTILITIES
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Get a row from the sorter.  Side effects:
0: 	 * sets currentRow.
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public ExecIndexRow getRowFromResultSet(boolean doClone)
0: 		throws StandardException
0: 	{
0: 		ExecIndexRow			inputRow = null;	
0: 		
0: 		if (scanController.next())
0: 		{
0: 			// REMIND: HACKALERT we are assuming that result will
0: 			// point to what sortResult is manipulating when
0: 			// we complete the fetch.
0: 			currentRow = doClone ? 
0: 				sortResultRow.getClone() : sortResultRow;
0: 
0: 			inputRow = getExecutionFactory().getIndexableRow(currentRow);
0: 
0: 			scanController.fetch(inputRow.getRowArray());
0: 		}
0: 		return inputRow;
0: 	}
0: 
0: 	/**
0: 	 * Close the source of whatever we have been scanning.
0: 	 *
0: 	 * @exception StandardException thrown on error
0: 	 */
0: 	protected void	closeSource() throws StandardException
0: 	{
0: 		if (scanController != null)
0: 		{
0: 			if (dropDistinctAggSort)
0: 			{
0: 				try
0: 				{
0: 					getTransactionController().dropSort(sortId);
0: 				}
0: 				catch (StandardException se)
0: 				{
0: 					// Eat all errors at close() time
0: 				}
0: 				dropDistinctAggSort = false;
0: 			}
0: 			scanController.close();
0: 			scanController = null;
0: 		}
0: 		source.close();
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	// MISC UTILITIES
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Load up the sorter.  Feed it every row from the
0: 	 * source scan.  If we have a vector aggregate, initialize
0: 	 * the aggregator for each source row.  When done, close
0: 	 * the source scan and open the sort.  Return the sort
0: 	 * scan controller.
0: 	 *
0: 	 * @exception StandardException thrown on failure.
0: 	 *
0: 	 * @return	the sort controller
0:  	 */
0: 	private ScanController loadSorter()
0: 		throws StandardException
0: 	{
0: 		SortController 			sorter;
0: 		ExecRow 				sourceRow;
0: 		int						inputRowCountEstimate = (int) optimizerEstimatedRowCount;
0: 
0: 		TransactionController tc = getTransactionController();
0: 
0: 		/*
0: 		** We have a distinct aggregate so, we'll need
0: 		** to do a sort.  We use all of the sorting columns and
0: 		** drop the aggregation on the distinct column.  Then
0: 		** we'll feed this into the sorter again w/o the distinct
0: 		** column in the ordering list.
0: 		*/
0: 		GenericAggregator[] aggsNoDistinct = getSortAggregators(aggInfoList, true,
0: 				activation.getLanguageConnectionContext(), source);
0: 		SortObserver sortObserver = new AggregateSortObserver(true, aggsNoDistinct, aggregates,
0: 															  sortTemplateRow);
0: 
0: 		sortId = tc.createSort((Properties)null, 
0: 					sortTemplateRow.getRowArray(),
0: 					order,
0: 					sortObserver,
0: 					false,			// not in order
0: 					inputRowCountEstimate,				// est rows, -1 means no idea	
0: 					maxRowSize		// est rowsize
0: 					);
0: 		sorter = tc.openSort(sortId);
0: 		dropDistinctAggSort = true;
0: 				
0: 		while ((sourceRow = source.getNextRowCore())!=null) 
0: 		{
0: 			sorter.insert(sourceRow.getRowArray());
0: 			rowsInput++;
0: 		}
0: 
0: 		/*
0: 		** End the sort and open up the result set
0: 		*/
0: 		sorter.close();
0: 
0: 		scanController = 
0:             tc.openSortScan(sortId, activation.getResultSetHoldability());
0: 			
0: 		/*
0: 		** Aggs are initialized and input rows
0: 		** are in order.
0: 		*/	
0: 		inputRowCountEstimate = rowsInput;
0: 	
0: 		return scanController;
0: 	}
0: 
0: }
============================================================================