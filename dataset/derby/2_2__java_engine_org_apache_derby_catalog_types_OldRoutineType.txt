1:2e83f13: /*
1:2e83f13: 
1:2e83f13:    Derby - Class org.apache.derby.catalog.types.OldRoutineType
1:2e83f13: 
1:2e83f13:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e83f13:    contributor license agreements.  See the NOTICE file distributed with
1:2e83f13:    this work for additional information regarding copyright ownership.
1:2e83f13:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2e83f13:    (the "License"); you may not use this file except in compliance with
1:2e83f13:    the License.  You may obtain a copy of the License at
1:2e83f13: 
1:2e83f13:       http://www.apache.org/licenses/LICENSE-2.0
1:2e83f13: 
1:2e83f13:    Unless required by applicable law or agreed to in writing, software
1:2e83f13:    distributed under the License is distributed on an "AS IS" BASIS,
1:2e83f13:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e83f13:    See the License for the specific language governing permissions and
1:2e83f13:    limitations under the License.
1:2e83f13: 
1:2e83f13:  */
1:2e83f13: package org.apache.derby.catalog.types;
1:2e83f13: 
1:2e83f13: import java.io.IOException;
1:2e83f13: import java.io.ObjectInput;
1:2e83f13: import java.io.ObjectOutput;
1:2e83f13: 
1:2e83f13: import org.apache.derby.catalog.TypeDescriptor;
1:b260d95: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:2e83f13: import org.apache.derby.iapi.services.io.Formatable;
1:2e83f13: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2e83f13: import org.apache.derby.iapi.types.TypeId;
1:2e83f13: 
1:2e83f13: /**
1:2e83f13:  * Class to simply read the old format written by
1:2e83f13:  * DataTypeDescriptor prior to DERBY-2775 being addressed.
1:2e83f13:  * The format was incorrect used
1:2e83f13:  * in system catalogs for routine parameter and return
1:2e83f13:  * types. The format contained repeated information.
1:2e83f13:  * DERBY-2775 changed the code so that these catalog
1:2e83f13:  * types were written as TypeDescriptor (which is what
1:2e83f13:  * always had occurred for the types in SYSCOLUMNS).
1:2e83f13:  */
1:2e83f13: final class OldRoutineType implements Formatable {
1:2e83f13:     
1:2e83f13:     private TypeDescriptor catalogType;
1:2e83f13: 
1:2e83f13:     public void readExternal(ObjectInput in) throws IOException,
1:2e83f13:             ClassNotFoundException {
1:2e83f13:         
1:b260d95:         // Redundant old TypeId object, just ignore,
1:b260d95:         // comprised of two parts the old wrapper format number
1:b260d95:         // and then a BaseTypeId. Information was duplicated
1:b260d95:         // in the catalog type.
1:b260d95:         FormatIdUtil.readFormatIdInteger(in);
1:b260d95:         in.readObject(); 
1:2e83f13:         catalogType = (TypeDescriptor) in.readObject();
1:2e83f13:     }
1:2e83f13: 
1:2e83f13:     public void writeExternal(ObjectOutput out) throws IOException {
1:2e83f13:         if (SanityManager.DEBUG)
1:2e83f13:         {
1:2e83f13:             SanityManager.THROWASSERT("OldRoutineType must be read only!");
1:2e83f13:         }
1:2e83f13:     }
1:2e83f13: 
1:2e83f13:     public int getTypeFormatId() {
1:2e83f13:         return StoredFormatIds.DATA_TYPE_IMPL_DESCRIPTOR_V01_ID;
1:2e83f13:     }
1:2e83f13: 
1:2e83f13:     TypeDescriptor getCatalogType() {
1:2e83f13:         return catalogType;
1:2e83f13:     }
1:2e83f13: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b260d95
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
/////////////////////////////////////////////////////////////////////////
1:         // Redundant old TypeId object, just ignore,
1:         // comprised of two parts the old wrapper format number
1:         // and then a BaseTypeId. Information was duplicated
1:         // in the catalog type.
1:         FormatIdUtil.readFormatIdInteger(in);
1:         in.readObject(); 
commit:2e83f13
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.catalog.types.OldRoutineType
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.catalog.types;
1: 
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: import org.apache.derby.catalog.TypeDescriptor;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.TypeId;
1: 
1: /**
1:  * Class to simply read the old format written by
1:  * DataTypeDescriptor prior to DERBY-2775 being addressed.
1:  * The format was incorrect used
1:  * in system catalogs for routine parameter and return
1:  * types. The format contained repeated information.
1:  * DERBY-2775 changed the code so that these catalog
1:  * types were written as TypeDescriptor (which is what
1:  * always had occurred for the types in SYSCOLUMNS).
1:  */
1: final class OldRoutineType implements Formatable {
1:     
1:     private TypeDescriptor catalogType;
1: 
1:     public void readExternal(ObjectInput in) throws IOException,
1:             ClassNotFoundException {
1:         
0:         in.readObject(); // Redundant TypeId object
1:         catalogType = (TypeDescriptor) in.readObject();
1:     }
1: 
1:     public void writeExternal(ObjectOutput out) throws IOException {
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.THROWASSERT("OldRoutineType must be read only!");
1:         }
1:     }
1: 
1:     public int getTypeFormatId() {
1:         return StoredFormatIds.DATA_TYPE_IMPL_DESCRIPTOR_V01_ID;
1:     }
1: 
1:     TypeDescriptor getCatalogType() {
1:         return catalogType;
1:     }
1: }
============================================================================