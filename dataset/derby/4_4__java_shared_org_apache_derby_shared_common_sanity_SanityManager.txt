1:59d98b8: /*
5:59d98b8: 
1:b37283b:    Derby - Class org.apache.derby.shared.common.sanity.SanityManager
1:59d98b8: 
1:1e21fc4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1e21fc4:    contributor license agreements.  See the NOTICE file distributed with
1:1e21fc4:    this work for additional information regarding copyright ownership.
1:1e21fc4:    The ASF licenses this file to you under the Apache License, Version 2.0
1:1e21fc4:    (the "License"); you may not use this file except in compliance with
1:1e21fc4:    the License.  You may obtain a copy of the License at
1:59d98b8: 
1:59d98b8:       http://www.apache.org/licenses/LICENSE-2.0
1:59d98b8: 
1:59d98b8:    Unless required by applicable law or agreed to in writing, software
1:59d98b8:    distributed under the License is distributed on an "AS IS" BASIS,
1:59d98b8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:59d98b8:    See the License for the specific language governing permissions and
1:59d98b8:    limitations under the License.
1:59d98b8: 
1:59d98b8:  */
1:59d98b8: 
1:59d98b8: package org.apache.derby.shared.common.sanity;
1:59d98b8: 
1:59d98b8: 
1:59d98b8: import java.util.Hashtable;
1:59d98b8: import java.util.Enumeration;
1:59d98b8: 
1:59d98b8: /**
1:59d98b8:  * The SanityService provides assertion checking and debug
1:59d98b8:  * control.
1:59d98b8:  * <p>
1:59d98b8:  * Assertions and debug checks
1:59d98b8:  * can only be used for testing conditions that might occur
1:59d98b8:  * in development code but not in production code.	
1:59d98b8:  * <b>They are compiled out of production code.</b>
1:59d98b8:  * <p>
1:59d98b8:  * Uses of assertions should not add AssertFailure catches or
1:59d98b8:  * throws clauses; AssertFailure is under RuntimeException
1:59d98b8:  * in the java exception hierarchy. Our outermost system block
1:59d98b8:  * will bring the system down when it detects an assertion
1:59d98b8:  * failure.
1:59d98b8:  * <p>
1:59d98b8:  * In addition to ASSERTs in code, classes can choose to implement
1:59d98b8:  * an isConsistent method that would be used by ASSERTs, UnitTests,
1:59d98b8:  * and any other code wanting to check the consistency of an object.
1:59d98b8:  * <p>
1:59d98b8:  * Assertions are meant to be used to verify the state of the system
1:59d98b8:  * and bring the system down if the state is not correct. Debug checks
1:59d98b8:  * are meant to display internal information about a running system.
1:59d98b8:  * <p>
1:b37283b:  * @see org.apache.derby.shared.common.sanity.AssertFailure
1:59d98b8:  */
1:59d98b8: public class SanityManager {
1:59d98b8: 	/**
1:59d98b8: 	 * The build tool may be configured to alter
1:59d98b8: 	 * this source file to reset the static final variables
1:59d98b8: 	 * so that assertion and debug checks can be compiled out
1:59d98b8: 	 * of the code.
1:59d98b8: 	 */
1:59d98b8: 
1:59d98b8: 	public static final boolean ASSERT = SanityState.ASSERT; // code should use DEBUG
1:59d98b8: 	public static final boolean DEBUG = SanityState.DEBUG;
1:59d98b8: 	
1:59d98b8: 	public static final String DEBUGDEBUG = "DumpSanityDebug";
1:59d98b8: 	
1:59d98b8: 	/**
1:59d98b8: 	 * debugStream holds a pointer to the debug stream for writing out
1:59d98b8: 	 * debug messages.  It is cached at the first debug write request.
1:59d98b8: 	 */
1:59d98b8: 	static private java.io.PrintWriter debugStream = new java.io.PrintWriter(System.err);
1:59d98b8: 	/**
1:59d98b8: 	 * DebugFlags holds the values of all debug flags in
1:59d98b8: 	 * the configuration file.
1:59d98b8: 	 */
1:16d3334: 	static private Hashtable<String,Boolean> DebugFlags = new Hashtable<String,Boolean>();
1:59d98b8: 	/**
1:59d98b8: 	 * AllDebugOn and AllDebugOff override individual flags
1:59d98b8: 	 */
1:59d98b8: 	static private boolean AllDebugOn = false;
1:59d98b8: 	static private boolean AllDebugOff = false;
1:59d98b8: 
1:59d98b8: 	//
1:59d98b8: 	// class interface
1:59d98b8: 	//
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8: 	 * ASSERT checks the condition, and if it is
1:59d98b8: 	 * false, throws AssertFailure.
1:59d98b8: 	 * A message about the assertion failing is
1:59d98b8: 	 * printed.
1:59d98b8: 	 * <p>
1:b37283b: 	 * @see org.apache.derby.shared.common.sanity.AssertFailure
1:59d98b8: 	 */
1:59d98b8: 	public static final void ASSERT(boolean mustBeTrue) {
1:59d98b8: 		if (DEBUG)
1:59d98b8: 			if (! mustBeTrue) {
3:59d98b8: 				if (DEBUG) {
1:59d98b8: 					AssertFailure af = new AssertFailure("ASSERT FAILED");
3:59d98b8: 					if (DEBUG_ON("AssertFailureTrace")) {
3:59d98b8: 						showTrace(af);
6:59d98b8: 					}
4:59d98b8: 					throw af;
1:59d98b8: 				}
2:59d98b8: 				else
1:59d98b8: 					throw new AssertFailure("ASSERT FAILED");
1:59d98b8: 			}
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8: 	 * ASSERT checks the condition, and if it is
1:59d98b8: 	 * false, throws AssertFailure. The message will
1:59d98b8: 	 * be printed and included in the assertion.
1:59d98b8: 	 * <p>
1:b37283b: 	 * @see org.apache.derby.shared.common.sanity.AssertFailure
1:59d98b8: 	 */
1:59d98b8: 	public static final void ASSERT(boolean mustBeTrue, String msgIfFail) {
1:59d98b8: 		if (DEBUG)
1:59d98b8: 			if (! mustBeTrue) {
1:59d98b8: 				if (DEBUG) {
2:59d98b8: 					AssertFailure af = new AssertFailure("ASSERT FAILED " + msgIfFail);
1:59d98b8: 					if (DEBUG_ON("AssertFailureTrace")) {
1:59d98b8: 						showTrace(af);
1:59d98b8: 					}
1:59d98b8: 					throw af;
1:59d98b8: 				}
1:59d98b8: 				else
2:59d98b8: 					throw new AssertFailure("ASSERT FAILED " + msgIfFail);
1:59d98b8: 			}
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8: 	 * THROWASSERT throws AssertFailure. This is used in cases where
1:59d98b8: 	 * the caller has already detected the assertion failure (such as
1:59d98b8: 	 * in the default case of a switch). This method should be used,
1:59d98b8: 	 * rather than throwing AssertFailure directly, to allow us to 
1:59d98b8: 	 * centralize all sanity checking.  The message argument will
1:59d98b8: 	 * be printed and included in the assertion.
1:59d98b8:      * <p>
1:59d98b8: 	 * @param msgIfFail message to print with the assertion
1:59d98b8: 	 *
1:b37283b: 	 * @see org.apache.derby.shared.common.sanity.AssertFailure
1:59d98b8: 	 */
1:59d98b8: 	public static final void THROWASSERT(String msgIfFail) {
1:59d98b8: 		// XXX (nat) Hmm, should we check ASSERT here?  The caller is
1:59d98b8: 		// not expecting this function to return, whether assertions
1:59d98b8: 		// are compiled in or not.
1:a41c1fa: 		THROWASSERT(msgIfFail, null);
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8: 	 * THROWASSERT throws AssertFailure.
1:59d98b8: 	 * This flavor will print the stack associated with the exception.
1:59d98b8: 	 * The message argument will
1:59d98b8: 	 * be printed and included in the assertion.
1:59d98b8:      * <p>
1:59d98b8: 	 * @param msg message to print with the assertion
1:59d98b8: 	 * @param t exception to print with the assertion
1:59d98b8: 	 *
1:b37283b: 	 * @see org.apache.derby.shared.common.sanity.AssertFailure
1:59d98b8: 	 */
1:59d98b8: 	public static final void THROWASSERT(String msg, Throwable t) {
1:a41c1fa: 		AssertFailure af = new AssertFailure("ASSERT FAILED " + msg, t);
1:59d98b8: 		if (DEBUG) {
1:59d98b8: 			if (DEBUG_ON("AssertFailureTrace")) {
1:59d98b8: 				showTrace(af);
1:59d98b8: 			}
1:59d98b8: 		}
1:a41c1fa: 		if (t != null) {
4:59d98b8: 			showTrace(t);
1:59d98b8: 		}
1:a41c1fa: 		throw af;
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8: 	 * THROWASSERT throws AssertFailure.
1:59d98b8: 	 * This flavor will print the stack associated with the exception.
1:59d98b8:      * <p>
1:59d98b8: 	 * @param t exception to print with the assertion
1:59d98b8: 	 *
1:b37283b: 	 * @see org.apache.derby.shared.common.sanity.AssertFailure
1:59d98b8: 	 */
1:59d98b8: 	public static final void THROWASSERT(Throwable t) {
1:a41c1fa: 		THROWASSERT(t.toString(), t);
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8:      * The DEBUG calls provide the ability to print information or
1:59d98b8:      * perform actions based on whether a debug flag is set or not.
1:59d98b8:      * debug flags are set in configurations and picked up by the
1:59d98b8:      * sanity manager when the monitor finds them (see CONFIG below).
1:59d98b8: 	 * <p>
1:59d98b8: 	 * The message is output to the trace stream, so it ends up in
1:59d98b8: 	 * db2j.LOG. It will include a header line of
1:59d98b8: 	 *   DEBUG <flagname> OUTPUT:
1:59d98b8: 	 * before the message.
1:59d98b8: 	 * <p>
1:59d98b8: 	 * If the debugStream stream cannot be found, the message is printed to
1:59d98b8: 	 * System.out.
1:59d98b8:      */
1:59d98b8: 	public static final void DEBUG(String flag, String message) {
1:59d98b8: 		if (DEBUG) {
1:59d98b8: 			if (DEBUG_ON(flag)) {
1:59d98b8: 				DEBUG_PRINT(flag, message);
1:59d98b8: 			}
1:59d98b8: 		}
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8: 	 * This can be called directly if you want to control
1:59d98b8:      * what is done once the debug flag has been verified --
1:59d98b8: 	 * for example, if you are calling a routine that prints to
1:59d98b8: 	 * the trace stream directly rather than returning a string to
1:59d98b8: 	 * be printed, or if you want to perform more (or fewer!)
1:59d98b8: 	 *
1:59d98b8: 	 * <p>
1:59d98b8:      * Calls to this method should be surrounded with
1:59d98b8: 	 *     if (SanityManager.DEBUG) {
1:59d98b8: 	 *     }
1:59d98b8: 	 * so that they can be compiled out completely.
1:59d98b8: 	 *
1:59d98b8: 	 * @return true if the flag has been set to "true"; false
1:59d98b8: 	 * if the flag is not set, or is set to something other than "true".
1:59d98b8: 	 */
1:59d98b8: 	public static final boolean DEBUG_ON(String flag) {
1:59d98b8: 		if (DEBUG) {
1:59d98b8: 			if (AllDebugOn) return true;
1:59d98b8: 			else if (AllDebugOff) return false;
3:59d98b8: 			else {
1:16d3334: 					Boolean flagValue = DebugFlags.get(flag);
1:59d98b8: 					if (! DEBUGDEBUG.equals(flag)) {
1:59d98b8: 						if (DEBUG_ON(DEBUGDEBUG)) {
1:59d98b8: 							DEBUG_PRINT(DEBUGDEBUG, "DEBUG_ON: Debug flag "+flag+" = "+flagValue);
1:59d98b8: 						}
1:59d98b8: 					}
1:59d98b8: 					if (flagValue == null) return false;
1:59d98b8: 					else return flagValue.booleanValue();
1:59d98b8: 			}
1:59d98b8: 		}
1:59d98b8: 		else return false;
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8: 	 * Set the named debug flag to true.
1:59d98b8: 	 *
1:59d98b8: 	 * <p>
1:59d98b8:      * Calls to this method should be surrounded with
1:59d98b8: 	 *     if (SanityManager.DEBUG) {
1:59d98b8: 	 *     }
1:59d98b8: 	 * so that they can be compiled out completely.
1:59d98b8: 	 *
1:59d98b8: 	 * @param flag	The name of the debug flag to set to true
1:59d98b8: 	 */
1:59d98b8: 	public static final void DEBUG_SET(String flag) {
1:59d98b8: 		if (DEBUG) {
1:59d98b8: 			if (! DEBUGDEBUG.equals(flag)) {
1:59d98b8: 				if (DEBUG_ON(DEBUGDEBUG))
1:59d98b8: 					DEBUG_PRINT(DEBUGDEBUG, "DEBUG_SET: Debug flag " + flag);
1:59d98b8: 			}
1:59d98b8: 
1:59d98b8: 			DebugFlags.put(flag, Boolean.TRUE);
1:59d98b8: 		}
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8: 	 * Set the named debug flag to false.
1:59d98b8: 	 *
1:59d98b8: 	 * <p>
1:59d98b8:      * Calls to this method should be surrounded with
1:59d98b8: 	 *     if (SanityManager.DEBUG) {
1:59d98b8: 	 *     }
1:59d98b8: 	 * so that they can be compiled out completely.
1:59d98b8: 	 *
1:59d98b8: 	 * @param flag	The name of the debug flag to set to false
1:59d98b8: 	 */
1:59d98b8: 	public static final void DEBUG_CLEAR(String flag) {
1:59d98b8: 		if (DEBUG) {
1:59d98b8: 			if (! DEBUGDEBUG.equals(flag)) {
1:59d98b8: 				if (DEBUG_ON(DEBUGDEBUG))
1:59d98b8: 					DEBUG_PRINT(DEBUGDEBUG, "DEBUG_CLEAR: Debug flag " + flag);
1:59d98b8: 			}
1:59d98b8: 
1:59d98b8: 			DebugFlags.put(flag, Boolean.FALSE);
1:59d98b8: 		}
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8: 	 * This can be used to have the SanityManager return TRUE
1:59d98b8: 	 * for any DEBUG_ON check. DEBUG_CLEAR of an individual
1:59d98b8: 	 * flag will appear to have no effect.
1:59d98b8: 	 */
1:59d98b8: 	public static final void DEBUG_ALL_ON() {
1:59d98b8: 		if (DEBUG) {
1:59d98b8: 			AllDebugOn = true;
1:59d98b8: 			AllDebugOff = false;
1:59d98b8: 		}
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8: 	 * This can be used to have the SanityManager return FALSE
1:59d98b8: 	 * for any DEBUG_ON check. DEBUG_SET of an individual
1:59d98b8: 	 * flag will appear to have no effect.
1:59d98b8: 	 */
1:59d98b8: 	public static final void DEBUG_ALL_OFF() {
1:59d98b8: 		if (DEBUG) {
1:59d98b8: 			AllDebugOff = true;
1:59d98b8: 			AllDebugOn = false;
1:59d98b8: 		}
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	//
1:59d98b8: 	// class implementation
1:59d98b8: 	//
1:59d98b8: 
1:59d98b8: 	static public void SET_DEBUG_STREAM(java.io.PrintWriter pw) {
1:59d98b8: 		debugStream = pw;
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	static public java.io.PrintWriter GET_DEBUG_STREAM() {
1:59d98b8: 		return debugStream;
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	static private void showTrace(AssertFailure af) {
1:59d98b8: 		af.printStackTrace();
1:59d98b8: 		java.io.PrintWriter assertStream = GET_DEBUG_STREAM();
1:59d98b8: 
1:59d98b8: 		assertStream.println("Assertion trace:");
1:59d98b8: 		af.printStackTrace(assertStream);
1:59d98b8: 		assertStream.flush();
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	static public void showTrace(Throwable t) {
1:59d98b8: 		java.io.PrintWriter assertStream = GET_DEBUG_STREAM();
1:59d98b8: 
1:59d98b8: 		assertStream.println("Exception trace: ");
1:59d98b8: 		t.printStackTrace(assertStream);
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	/**
1:59d98b8: 	 * The DEBUG_PRINT calls provides a convenient way to print debug
1:59d98b8: 	 * information to the db2j.LOG file,  The message includes a header
1:59d98b8: 	 *<p>
1:59d98b8: 	 *	DEBUG <flag> OUTPUT: 
1:59d98b8: 	 * before the message
1:59d98b8: 	 *<p>
1:59d98b8: 	 * If the debugStream stream cannot be found, the message is printed to
1:59d98b8: 	 * System.out.
1:59d98b8: 	 *
1:59d98b8: 	 */
1:59d98b8: 	static public void DEBUG_PRINT(String flag, String message) {
1:59d98b8: 		java.io.PrintWriter debugStream = GET_DEBUG_STREAM();
1:59d98b8: 
1:59d98b8: 		debugStream.println("DEBUG "+flag+" OUTPUT: " + message);
1:59d98b8: 		debugStream.flush();
1:59d98b8: 	}
1:59d98b8: 
1:59d98b8: 	public static void NOTREACHED() {
1:59d98b8: 		THROWASSERT("code should not be reached");
1:59d98b8: 	}
1:59d98b8: }
1:59d98b8: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:b37283b
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.shared.common.sanity.SanityManager
/////////////////////////////////////////////////////////////////////////
1:  * @see org.apache.derby.shared.common.sanity.AssertFailure
/////////////////////////////////////////////////////////////////////////
1: 	 * @see org.apache.derby.shared.common.sanity.AssertFailure
/////////////////////////////////////////////////////////////////////////
1: 	 * @see org.apache.derby.shared.common.sanity.AssertFailure
/////////////////////////////////////////////////////////////////////////
1: 	 * @see org.apache.derby.shared.common.sanity.AssertFailure
/////////////////////////////////////////////////////////////////////////
1: 	 * @see org.apache.derby.shared.common.sanity.AssertFailure
/////////////////////////////////////////////////////////////////////////
1: 	 * @see org.apache.derby.shared.common.sanity.AssertFailure
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:16d3334
/////////////////////////////////////////////////////////////////////////
1: 	static private Hashtable<String,Boolean> DebugFlags = new Hashtable<String,Boolean>();
/////////////////////////////////////////////////////////////////////////
1: 					Boolean flagValue = DebugFlags.get(flag);
commit:1e21fc4
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a41c1fa
/////////////////////////////////////////////////////////////////////////
1: 		THROWASSERT(msgIfFail, null);
/////////////////////////////////////////////////////////////////////////
1: 		AssertFailure af = new AssertFailure("ASSERT FAILED " + msg, t);
1: 		if (t != null) {
1: 		throw af;
/////////////////////////////////////////////////////////////////////////
1: 		THROWASSERT(t.toString(), t);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:59d98b8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.iapi.services.sanity.SanityManager
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.shared.common.sanity;
1: 
1: 
1: import java.util.Hashtable;
1: import java.util.Enumeration;
1: 
1: /**
1:  * The SanityService provides assertion checking and debug
1:  * control.
1:  * <p>
1:  * Assertions and debug checks
1:  * can only be used for testing conditions that might occur
1:  * in development code but not in production code.	
1:  * <b>They are compiled out of production code.</b>
1:  * <p>
1:  * Uses of assertions should not add AssertFailure catches or
1:  * throws clauses; AssertFailure is under RuntimeException
1:  * in the java exception hierarchy. Our outermost system block
1:  * will bring the system down when it detects an assertion
1:  * failure.
1:  * <p>
1:  * In addition to ASSERTs in code, classes can choose to implement
1:  * an isConsistent method that would be used by ASSERTs, UnitTests,
1:  * and any other code wanting to check the consistency of an object.
1:  * <p>
1:  * Assertions are meant to be used to verify the state of the system
1:  * and bring the system down if the state is not correct. Debug checks
1:  * are meant to display internal information about a running system.
1:  * <p>
0:  * @see org.apache.derby.iapi.services.sanity.AssertFailure
1:  */
1: public class SanityManager {
1: 	/**
1: 	 * The build tool may be configured to alter
1: 	 * this source file to reset the static final variables
1: 	 * so that assertion and debug checks can be compiled out
1: 	 * of the code.
1: 	 */
1: 
1: 	public static final boolean ASSERT = SanityState.ASSERT; // code should use DEBUG
1: 	public static final boolean DEBUG = SanityState.DEBUG;
1: 	
1: 	public static final String DEBUGDEBUG = "DumpSanityDebug";
1: 	
1: 	/**
1: 	 * debugStream holds a pointer to the debug stream for writing out
1: 	 * debug messages.  It is cached at the first debug write request.
1: 	 */
1: 	static private java.io.PrintWriter debugStream = new java.io.PrintWriter(System.err);
1: 	/**
1: 	 * DebugFlags holds the values of all debug flags in
1: 	 * the configuration file.
1: 	 */
0: 	static private Hashtable DebugFlags = new Hashtable();
1: 	/**
1: 	 * AllDebugOn and AllDebugOff override individual flags
1: 	 */
1: 	static private boolean AllDebugOn = false;
1: 	static private boolean AllDebugOff = false;
1: 
1: 	//
1: 	// class interface
1: 	//
1: 
1: 	/**
1: 	 * ASSERT checks the condition, and if it is
1: 	 * false, throws AssertFailure.
1: 	 * A message about the assertion failing is
1: 	 * printed.
1: 	 * <p>
0: 	 * @see org.apache.derby.iapi.services.sanity.AssertFailure
1: 	 */
1: 	public static final void ASSERT(boolean mustBeTrue) {
1: 		if (DEBUG)
1: 			if (! mustBeTrue) {
1: 				if (DEBUG) {
1: 					AssertFailure af = new AssertFailure("ASSERT FAILED");
1: 					if (DEBUG_ON("AssertFailureTrace")) {
1: 						showTrace(af);
1: 					}
1: 					throw af;
1: 				}
1: 				else
1: 					throw new AssertFailure("ASSERT FAILED");
1: 			}
1: 	}
1: 
1: 	/**
1: 	 * ASSERT checks the condition, and if it is
1: 	 * false, throws AssertFailure. The message will
1: 	 * be printed and included in the assertion.
1: 	 * <p>
0: 	 * @see org.apache.derby.iapi.services.sanity.AssertFailure
1: 	 */
1: 	public static final void ASSERT(boolean mustBeTrue, String msgIfFail) {
1: 		if (DEBUG)
1: 			if (! mustBeTrue) {
1: 				if (DEBUG) {
1: 					AssertFailure af = new AssertFailure("ASSERT FAILED " + msgIfFail);
1: 					if (DEBUG_ON("AssertFailureTrace")) {
1: 						showTrace(af);
1: 					}
1: 					throw af;
1: 				}
1: 				else
1: 					throw new AssertFailure("ASSERT FAILED " + msgIfFail);
1: 			}
1: 	}
1: 
1: 	/**
1: 	 * THROWASSERT throws AssertFailure. This is used in cases where
1: 	 * the caller has already detected the assertion failure (such as
1: 	 * in the default case of a switch). This method should be used,
1: 	 * rather than throwing AssertFailure directly, to allow us to 
1: 	 * centralize all sanity checking.  The message argument will
1: 	 * be printed and included in the assertion.
1:      * <p>
1: 	 * @param msgIfFail message to print with the assertion
1: 	 *
0: 	 * @see org.apache.derby.iapi.services.sanity.AssertFailure
1: 	 */
1: 	public static final void THROWASSERT(String msgIfFail) {
1: 		// XXX (nat) Hmm, should we check ASSERT here?  The caller is
1: 		// not expecting this function to return, whether assertions
1: 		// are compiled in or not.
1: 
1: 		if (DEBUG) {
1: 			AssertFailure af = new AssertFailure("ASSERT FAILED " + msgIfFail);
1: 			if (DEBUG_ON("AssertFailureTrace")) {
1: 				showTrace(af);
1: 			}
1: 			throw af;
1: 		}
1: 		else
1: 			throw new AssertFailure("ASSERT FAILED " + msgIfFail);
1: 	}
1: 
1: 	/**
1: 	 * THROWASSERT throws AssertFailure.
1: 	 * This flavor will print the stack associated with the exception.
1: 	 * The message argument will
1: 	 * be printed and included in the assertion.
1:      * <p>
1: 	 * @param msg message to print with the assertion
1: 	 * @param t exception to print with the assertion
1: 	 *
0: 	 * @see org.apache.derby.iapi.services.sanity.AssertFailure
1: 	 */
1: 	public static final void THROWASSERT(String msg, Throwable t) {
1: 
1: 		if (DEBUG) {
0: 			AssertFailure af = new AssertFailure("ASSERT FAILED " + t.toString(), t);
1: 			if (DEBUG_ON("AssertFailureTrace")) {
1: 				showTrace(af);
1: 			}
1: 			showTrace(t);
1: 			throw af;
1: 		}
1: 		else {
1: 			showTrace(t);
0: 			throw new AssertFailure("ASSERT FAILED " + t.toString(), t);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * THROWASSERT throws AssertFailure.
1: 	 * This flavor will print the stack associated with the exception.
1:      * <p>
1: 	 * @param t exception to print with the assertion
1: 	 *
0: 	 * @see org.apache.derby.iapi.services.sanity.AssertFailure
1: 	 */
1: 	public static final void THROWASSERT(Throwable t) {
1: 
1: 		if (DEBUG) {
0: 			AssertFailure af = new AssertFailure("ASSERT FAILED " + t.toString(), t);
1: 			if (DEBUG_ON("AssertFailureTrace")) {
1: 				showTrace(af);
1: 			}
1: 			showTrace(t);
1: 			throw af;
1: 		}
1: 		else {
1: 			showTrace(t);
0: 			throw new AssertFailure("ASSERT FAILED " + t.toString(), t);
1: 		}
1: 	}
1: 
1: 	/**
1:      * The DEBUG calls provide the ability to print information or
1:      * perform actions based on whether a debug flag is set or not.
1:      * debug flags are set in configurations and picked up by the
1:      * sanity manager when the monitor finds them (see CONFIG below).
1: 	 * <p>
1: 	 * The message is output to the trace stream, so it ends up in
1: 	 * db2j.LOG. It will include a header line of
1: 	 *   DEBUG <flagname> OUTPUT:
1: 	 * before the message.
1: 	 * <p>
1: 	 * If the debugStream stream cannot be found, the message is printed to
1: 	 * System.out.
1:      */
1: 	public static final void DEBUG(String flag, String message) {
1: 		if (DEBUG) {
1: 			if (DEBUG_ON(flag)) {
1: 				DEBUG_PRINT(flag, message);
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * This can be called directly if you want to control
1:      * what is done once the debug flag has been verified --
1: 	 * for example, if you are calling a routine that prints to
1: 	 * the trace stream directly rather than returning a string to
1: 	 * be printed, or if you want to perform more (or fewer!)
1: 	 *
1: 	 * <p>
1:      * Calls to this method should be surrounded with
1: 	 *     if (SanityManager.DEBUG) {
1: 	 *     }
1: 	 * so that they can be compiled out completely.
1: 	 *
1: 	 * @return true if the flag has been set to "true"; false
1: 	 * if the flag is not set, or is set to something other than "true".
1: 	 */
1: 	public static final boolean DEBUG_ON(String flag) {
1: 		if (DEBUG) {
1: 			if (AllDebugOn) return true;
1: 			else if (AllDebugOff) return false;
1: 			else {
0: 					Boolean flagValue = (Boolean) DebugFlags.get(flag);
1: 					if (! DEBUGDEBUG.equals(flag)) {
1: 						if (DEBUG_ON(DEBUGDEBUG)) {
1: 							DEBUG_PRINT(DEBUGDEBUG, "DEBUG_ON: Debug flag "+flag+" = "+flagValue);
1: 						}
1: 					}
1: 					if (flagValue == null) return false;
1: 					else return flagValue.booleanValue();
1: 			}
1: 		}
1: 		else return false;
1: 	}
1: 
1: 	/**
1: 	 * Set the named debug flag to true.
1: 	 *
1: 	 * <p>
1:      * Calls to this method should be surrounded with
1: 	 *     if (SanityManager.DEBUG) {
1: 	 *     }
1: 	 * so that they can be compiled out completely.
1: 	 *
1: 	 * @param flag	The name of the debug flag to set to true
1: 	 */
1: 	public static final void DEBUG_SET(String flag) {
1: 		if (DEBUG) {
1: 			if (! DEBUGDEBUG.equals(flag)) {
1: 				if (DEBUG_ON(DEBUGDEBUG))
1: 					DEBUG_PRINT(DEBUGDEBUG, "DEBUG_SET: Debug flag " + flag);
1: 			}
1: 
1: 			DebugFlags.put(flag, Boolean.TRUE);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Set the named debug flag to false.
1: 	 *
1: 	 * <p>
1:      * Calls to this method should be surrounded with
1: 	 *     if (SanityManager.DEBUG) {
1: 	 *     }
1: 	 * so that they can be compiled out completely.
1: 	 *
1: 	 * @param flag	The name of the debug flag to set to false
1: 	 */
1: 	public static final void DEBUG_CLEAR(String flag) {
1: 		if (DEBUG) {
1: 			if (! DEBUGDEBUG.equals(flag)) {
1: 				if (DEBUG_ON(DEBUGDEBUG))
1: 					DEBUG_PRINT(DEBUGDEBUG, "DEBUG_CLEAR: Debug flag " + flag);
1: 			}
1: 
1: 			DebugFlags.put(flag, Boolean.FALSE);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * This can be used to have the SanityManager return TRUE
1: 	 * for any DEBUG_ON check. DEBUG_CLEAR of an individual
1: 	 * flag will appear to have no effect.
1: 	 */
1: 	public static final void DEBUG_ALL_ON() {
1: 		if (DEBUG) {
1: 			AllDebugOn = true;
1: 			AllDebugOff = false;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * This can be used to have the SanityManager return FALSE
1: 	 * for any DEBUG_ON check. DEBUG_SET of an individual
1: 	 * flag will appear to have no effect.
1: 	 */
1: 	public static final void DEBUG_ALL_OFF() {
1: 		if (DEBUG) {
1: 			AllDebugOff = true;
1: 			AllDebugOn = false;
1: 		}
1: 	}
1: 
1: 	//
1: 	// class implementation
1: 	//
1: 
1: 	static public void SET_DEBUG_STREAM(java.io.PrintWriter pw) {
1: 		debugStream = pw;
1: 	}
1: 
1: 	static public java.io.PrintWriter GET_DEBUG_STREAM() {
1: 		return debugStream;
1: 	}
1: 
1: 	static private void showTrace(AssertFailure af) {
1: 		af.printStackTrace();
1: 		java.io.PrintWriter assertStream = GET_DEBUG_STREAM();
1: 
1: 		assertStream.println("Assertion trace:");
1: 		af.printStackTrace(assertStream);
1: 		assertStream.flush();
1: 	}
1: 
1: 	static public void showTrace(Throwable t) {
1: 		java.io.PrintWriter assertStream = GET_DEBUG_STREAM();
1: 
1: 		assertStream.println("Exception trace: ");
1: 		t.printStackTrace(assertStream);
1: 	}
1: 
1: 	/**
1: 	 * The DEBUG_PRINT calls provides a convenient way to print debug
1: 	 * information to the db2j.LOG file,  The message includes a header
1: 	 *<p>
1: 	 *	DEBUG <flag> OUTPUT: 
1: 	 * before the message
1: 	 *<p>
1: 	 * If the debugStream stream cannot be found, the message is printed to
1: 	 * System.out.
1: 	 *
1: 	 */
1: 	static public void DEBUG_PRINT(String flag, String message) {
1: 		java.io.PrintWriter debugStream = GET_DEBUG_STREAM();
1: 
1: 		debugStream.println("DEBUG "+flag+" OUTPUT: " + message);
1: 		debugStream.flush();
1: 	}
1: 
1: 	public static void NOTREACHED() {
1: 		THROWASSERT("code should not be reached");
1: 	}
1: }
1: 
============================================================================