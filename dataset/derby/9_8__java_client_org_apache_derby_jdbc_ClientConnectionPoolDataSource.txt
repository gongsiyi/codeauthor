1:33776ff: /*
9:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.jdbc.ClientConnectionPoolDataSource
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.jdbc;
1:70f7692: 
1:d91d11e: import java.io.IOException;
1:d91d11e: import java.io.ObjectInputStream;
1:02d3427: import java.sql.SQLException;
1:02d3427: import javax.sql.PooledConnection;
1:d91d11e: import org.apache.derby.shared.common.i18n.MessageUtil;
1:d91d11e: import org.apache.derby.shared.common.reference.MessageId;
1:02d3427: 
1:33776ff: /**
1:2913612:  * This datasource is suitable for a client/server use of Derby,
1:fd584b0:  * running on full Java SE 6 and higher, corresponding to JDBC 4.0 and higher.
1:2913612:  * <p/>
1:54792be:  * ClientConnectionPoolDataSource is a factory for PooledConnection objects.
1:54792be:  * An object that implements this interface
1:54792be:  * will typically be registered with a naming service that is based on the
1:2913612:  * Java Naming and Directory Interface (JNDI).
1:33776ff:  */
1:ceb7210: public class ClientConnectionPoolDataSource extends ClientDataSource 
1:8269b78:     implements ClientConnectionPoolDataSourceInterface
1:8269b78: {
1:02d3427:     private static final long serialVersionUID = -539234282156481377L;
1:d91d11e:     /** Message utility used to obtain localized messages. */
1:d91d11e:     private static final MessageUtil msgUtil =
1:d91d11e:             new MessageUtil("org.apache.derby.loc.clientmessages");
1:70f7692:     public static final String className__ = "org.apache.derby.jdbc.ClientConnectionPoolDataSource";
1:33776ff: 
1:d91d11e:     /**
1:d91d11e:      * Specifies the maximum number of statements that can be cached per
1:d91d11e:      * connection by the JDBC driver.
1:d91d11e:      * <p>
1:d91d11e:      * A value of <code>0</code> disables statement caching, negative values
1:d91d11e:      * are not allowed. The default is that caching is disabled.
1:d91d11e:      *
1:d91d11e:      * @serial
1:d91d11e:      */
1:d91d11e:     private int maxStatements = 0;
1:d91d11e: 
1:70f7692:     public ClientConnectionPoolDataSource() {
1:70f7692:         super();
1:17d490d:     }
1:d91d11e: 
1:70f7692:     // ---------------------------interface methods-------------------------------
1:33776ff: 
1:70f7692:     // Attempt to establish a physical database connection that can be used as a pooled connection.
1:02d3427:     public PooledConnection getPooledConnection() throws SQLException {
1:8269b78:         return getPooledConnectionMinion();
2:d506170:     }
1:70f7692: 
1:70f7692:     // Standard method that establishes the initial physical connection using CPDS properties.
1:02d3427:     public PooledConnection getPooledConnection(String user, String password) throws SQLException {
1:8269b78:         return getPooledConnectionMinion(user, password);
1:d506170:     }
1:70f7692: 
1:d91d11e:     /**
1:d91d11e:      * Specifies the maximum size of the statement cache.
1:d91d11e:      *
1:d91d11e:      * @param maxStatements maximum number of cached statements
1:d91d11e:      *
1:d91d11e:      * @throws IllegalArgumentException if <code>maxStatements</code> is
1:d91d11e:      *      negative
1:d91d11e:      */
1:d91d11e:     public void setMaxStatements(int maxStatements) {
1:d91d11e:         // Disallow negative values.
1:d91d11e:         if (maxStatements < 0) {
1:d91d11e:             throw new IllegalArgumentException(msgUtil.getTextMessage(
1:66527ec:                     MessageId.CONN_NEGATIVE_MAXSTATEMENTS, maxStatements));
1:d91d11e:         }
1:d91d11e:         this.maxStatements = maxStatements;
1:d91d11e:     }
1:d91d11e: 
1:d91d11e:     /**
1:d91d11e:      * Returns the maximum number of JDBC prepared statements a connection is
1:d91d11e:      * allowed to cache.
1:d91d11e:      *
1:d91d11e:      * @return Maximum number of statements to cache, or <code>0</code> if
1:d91d11e:      *      caching is disabled (default).
1:d91d11e:      */
1:d91d11e:     public int getMaxStatements() {
1:d91d11e:         return this.maxStatements;
1:d91d11e:     }
1:d91d11e: 
1:d91d11e:     /**
1:d91d11e:      * Internally used method.
1:d91d11e:      *
1:7863d83:      * @see BasicClientDataSource40#maxStatementsToPool
1:d91d11e:      */
1:d91d11e:     public int maxStatementsToPool() {
1:d91d11e:         return this.maxStatements;
1:d91d11e:     }
1:d91d11e: 
1:d91d11e:     /**
1:d91d11e:      * Make sure the state of the de-serialized object is valid.
1:d91d11e:      */
1:d91d11e:     private final void validateState() {
1:d91d11e:         // Make sure maxStatements is zero or higher.
1:d91d11e:         if (maxStatements < 0) {
1:d91d11e:             throw new IllegalArgumentException(msgUtil.getTextMessage(
1:66527ec:                     MessageId.CONN_NEGATIVE_MAXSTATEMENTS, maxStatements));
1:d91d11e:         }
1:d91d11e:     }
1:d91d11e: 
1:d91d11e:     /**
1:d91d11e:      * Read an object from the ObjectInputStream.
1:d91d11e:      * <p>
1:d91d11e:      * This implementation differs from the default one by initiating state
1:d91d11e:      * validation of the object created.
1:d91d11e:      *
1:d91d11e:      * @param inputStream data stream to read objects from
1:d91d11e:      * @throws ClassNotFoundException if instantiating a class fails
1:d91d11e:      * @throws IOException if reading from the stream fails
1:d91d11e:      */
1:d91d11e:     private void readObject(ObjectInputStream inputStream)
1:d91d11e:             throws ClassNotFoundException, IOException {
1:d91d11e:      // Always perform the default de-serialization first
1:d91d11e:      inputStream.defaultReadObject();
1:d91d11e: 
1:d91d11e:      // Ensure that object state has not been corrupted or tampered with.
1:d91d11e:      validateState();
1:d91d11e:   }
1:d506170: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7863d83
/////////////////////////////////////////////////////////////////////////
1:      * @see BasicClientDataSource40#maxStatementsToPool
commit:b565f41
/////////////////////////////////////////////////////////////////////////
commit:cb88209
/////////////////////////////////////////////////////////////////////////
0:  * If running on Java SE 7 or higher, consider a more capable data source.
commit:2913612
/////////////////////////////////////////////////////////////////////////
1:  * This datasource is suitable for a client/server use of Derby,
0:  * running on full Java SE 5 or 6, corresponding to JDBC 3.0 and 4.0.
0:  * If running on Java SE 7 og higher, consider a more capable data source.
1:  * <p/>
1:  * Java Naming and Directory Interface (JNDI).
commit:8269b78
/////////////////////////////////////////////////////////////////////////
1:     implements ClientConnectionPoolDataSourceInterface
1: {
/////////////////////////////////////////////////////////////////////////
1:         return getPooledConnectionMinion();
1:         return getPooledConnectionMinion(user, password);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:fd584b0
/////////////////////////////////////////////////////////////////////////
1:  * running on full Java SE 6 and higher, corresponding to JDBC 4.0 and higher.
commit:ceb7210
/////////////////////////////////////////////////////////////////////////
1: public class ClientConnectionPoolDataSource extends ClientDataSource 
commit:54792be
/////////////////////////////////////////////////////////////////////////
1:  * ClientConnectionPoolDataSource is a factory for PooledConnection objects.
1:  * An object that implements this interface
1:  * will typically be registered with a naming service that is based on the
0:  * Java Naming and Directory Interface (JNDI). Use
0:  * ClientConnectionPoolDataSource if your application runs under
0:  * JDBC3.0 or JDBC2.0, that is, on the following Java Virtual Machines:
0:  * <p/>
0:  * <UL>
0:  * <LI> JDBC 3.0 - Java 2 - JDK 1.4, J2SE 5.0
0:  * <LI> JDBC 2.0 - Java 2 - JDK 1.2,1.3
0:  * </UL>
commit:17d490d
/////////////////////////////////////////////////////////////////////////
0: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
0: public class ClientConnectionPoolDataSource extends ClientBaseDataSource 
0:                                            implements ConnectionPoolDataSource {
/////////////////////////////////////////////////////////////////////////
0:     private PooledConnection getPooledConnectionX(LogWriter dncLogWriter, 
0:                         ClientBaseDataSource ds, String user, 
0:                         String password) throws SQLException {
1:     }   
commit:cbd0ff1
/////////////////////////////////////////////////////////////////////////
0:             return ClientDriver.getFactory().newClientPooledConnection(ds,
0:                     dncLogWriter, user, password);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:04fc939
/////////////////////////////////////////////////////////////////////////
0:  * running on full Java SE 6, 7 or 8, corresponding to JDBC 4.0, 4.1 and 4.2.
commit:66527ec
/////////////////////////////////////////////////////////////////////////
1:                     MessageId.CONN_NEGATIVE_MAXSTATEMENTS, maxStatements));
/////////////////////////////////////////////////////////////////////////
1:                     MessageId.CONN_NEGATIVE_MAXSTATEMENTS, maxStatements));
commit:5ef7a0d
/////////////////////////////////////////////////////////////////////////
0:  * JDBC 3.0 or JDBC 4.0, that is, on the following Java Virtual Machines:
0:  * <LI> JDBC 4.0 - Java SE 6
0:  * <LI> JDBC 3.0 - J2SE 5.0
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b3bfe12
/////////////////////////////////////////////////////////////////////////
0:             updateDataSourceValues(
0:                     tokenizeAttributes(getConnectionAttributes(), null));
/////////////////////////////////////////////////////////////////////////
0:             updateDataSourceValues(
0:                     tokenizeAttributes(getConnectionAttributes(), null));
commit:9a82758
/////////////////////////////////////////////////////////////////////////
0:         LogWriter dncLogWriter = null;
0:             dncLogWriter = super.computeDncLogWriterForNewConnection("_cpds");
/////////////////////////////////////////////////////////////////////////
0:             // The method below may throw an exception.
0:             handleConnectionException(dncLogWriter, se);
0:             // If the exception wasn't handled so far, re-throw it.
0:         LogWriter dncLogWriter = null;
0:             dncLogWriter = super.computeDncLogWriterForNewConnection("_cpds");
/////////////////////////////////////////////////////////////////////////
0:             // The method below may throw an exception.
0:             handleConnectionException(dncLogWriter, se);
0:             // If the exception wasn't handled so far, re-throw it.
commit:d91d11e
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
1: import org.apache.derby.shared.common.i18n.MessageUtil;
1: import org.apache.derby.shared.common.reference.MessageId;
/////////////////////////////////////////////////////////////////////////
1:     /** Message utility used to obtain localized messages. */
1:     private static final MessageUtil msgUtil =
1:             new MessageUtil("org.apache.derby.loc.clientmessages");
1:     /**
1:      * Specifies the maximum number of statements that can be cached per
1:      * connection by the JDBC driver.
1:      * <p>
1:      * A value of <code>0</code> disables statement caching, negative values
1:      * are not allowed. The default is that caching is disabled.
1:      *
1:      * @serial
1:      */
1:     private int maxStatements = 0;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Specifies the maximum size of the statement cache.
1:      *
1:      * @param maxStatements maximum number of cached statements
1:      *
1:      * @throws IllegalArgumentException if <code>maxStatements</code> is
1:      *      negative
1:      */
1:     public void setMaxStatements(int maxStatements) {
1:         // Disallow negative values.
1:         if (maxStatements < 0) {
1:             throw new IllegalArgumentException(msgUtil.getTextMessage(
0:                     MessageId.CONN_NEGATIVE_MAXSTATEMENTS,
0:                     new Integer(maxStatements)));
1:         }
1:         this.maxStatements = maxStatements;
1:     }
1: 
1:     /**
1:      * Returns the maximum number of JDBC prepared statements a connection is
1:      * allowed to cache.
1:      *
1:      * @return Maximum number of statements to cache, or <code>0</code> if
1:      *      caching is disabled (default).
1:      */
1:     public int getMaxStatements() {
1:         return this.maxStatements;
1:     }
1: 
1:     /**
1:      * Internally used method.
1:      *
0:      * @see ClientBaseDataSource#maxStatementsToPool
1:      */
1:     public int maxStatementsToPool() {
1:         return this.maxStatements;
1:     }
1: 
1:     /**
1:      * Make sure the state of the de-serialized object is valid.
1:      */
1:     private final void validateState() {
1:         // Make sure maxStatements is zero or higher.
1:         if (maxStatements < 0) {
1:             throw new IllegalArgumentException(msgUtil.getTextMessage(
0:                     MessageId.CONN_NEGATIVE_MAXSTATEMENTS,
0:                     new Integer(maxStatements)));
1:         }
1:     }
1: 
1:     /**
1:      * Read an object from the ObjectInputStream.
1:      * <p>
1:      * This implementation differs from the default one by initiating state
1:      * validation of the object created.
1:      *
1:      * @param inputStream data stream to read objects from
1:      * @throws ClassNotFoundException if instantiating a class fails
1:      * @throws IOException if reading from the stream fails
1:      */
1:     private void readObject(ObjectInputStream inputStream)
1:             throws ClassNotFoundException, IOException {
1:      // Always perform the default de-serialization first
1:      inputStream.defaultReadObject();
1: 
1:      // Ensure that object state has not been corrupted or tampered with.
1:      validateState();
1:   }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d506170
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.SqlException;
/////////////////////////////////////////////////////////////////////////
0:         try
0:         {
0:             LogWriter dncLogWriter = super.computeDncLogWriterForNewConnection("_cpds");
0:             if (dncLogWriter != null) {
0:                 dncLogWriter.traceEntry(this, "getPooledConnection");
1:             }
0:             PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, this, getUser(), getPassword());
0:             if (dncLogWriter != null) {
0:                 dncLogWriter.traceExit(this, "getPooledConnection", pooledConnection);
1:             }
0:             return pooledConnection;
0:         catch ( SqlException se )
0:         {
0:             throw se.getSQLException();
0:         try
0:         {
0:             LogWriter dncLogWriter = super.computeDncLogWriterForNewConnection("_cpds");
0:             if (dncLogWriter != null) {
0:                 dncLogWriter.traceEntry(this, "getPooledConnection", user, "<escaped>");
1:             }
0:             PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, this, user, password);
0:             if (dncLogWriter != null) {
0:                 dncLogWriter.traceExit(this, "getPooledConnection", pooledConnection);
1:             }
0:             return pooledConnection;
0:         catch ( SqlException se )
0:         {
0:             throw se.getSQLException();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:93ab830
/////////////////////////////////////////////////////////////////////////
0:         PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, this, getUser(), getPassword());
/////////////////////////////////////////////////////////////////////////
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:001d07a
/////////////////////////////////////////////////////////////////////////
commit:02d3427
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
0: import javax.sql.ConnectionPoolDataSource;
1: import javax.sql.PooledConnection;
1: 
0: import org.apache.derby.client.am.LogWriter;
0: public class ClientConnectionPoolDataSource extends ClientDataSource implements ConnectionPoolDataSource {
1:     private static final long serialVersionUID = -539234282156481377L;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public PooledConnection getPooledConnection() throws SQLException {
0:         LogWriter dncLogWriter = super.computeDncLogWriterForNewConnection("_cpds");
0:         PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, this, user, password);
/////////////////////////////////////////////////////////////////////////
1:     public PooledConnection getPooledConnection(String user, String password) throws SQLException {
0:         LogWriter dncLogWriter = super.computeDncLogWriterForNewConnection("_cpds");
0:         PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, this, user, password);
/////////////////////////////////////////////////////////////////////////
0:     public PooledConnection getPooledConnection(ClientDataSource ds, String user, String password) throws SQLException {
0:         LogWriter dncLogWriter = ds.computeDncLogWriterForNewConnection("_cpds");
0:         PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, ds, user, password);
/////////////////////////////////////////////////////////////////////////
0:     private PooledConnection getPooledConnectionX(LogWriter dncLogWriter, ClientDataSource ds, String user, String password) throws SQLException {
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: 
0:  * ClientConnectionPoolDataSource is a factory for PooledConnection objects. An object that implements this interface
0:  * will typically be registered with a naming service that is based on the Java Naming and Directory Interface (JNDI).
0:         java.io.Serializable,
0:         javax.naming.Referenceable {
0:     static final long serialVersionUID = -539234282156481377L;
1:     public static final String className__ = "org.apache.derby.jdbc.ClientConnectionPoolDataSource";
0:     private String password = null;
0:     synchronized public void setPassword(String password) {
0:         this.password = password;
0:     }
0:     public final static String propertyKey_password = "password";
0:     // deprecated.  do not use.  this member remains only for serial compatibility.
0:     // this member should never be used.  pre-empted by super.traceFileSuffixIndex_.
0:     // private int traceFileSuffixIndex = 0;
1:     public ClientConnectionPoolDataSource() {
1:         super();
0:     }
1:     // ---------------------------interface methods-------------------------------
1:     // Attempt to establish a physical database connection that can be used as a pooled connection.
0:     public javax.sql.PooledConnection getPooledConnection() throws java.sql.SQLException {
0:         org.apache.derby.client.am.LogWriter dncLogWriter = super.computeDncLogWriterForNewConnection("_cpds");
0:         if (dncLogWriter != null) {
0:             dncLogWriter.traceEntry(this, "getPooledConnection");
0:         }
0:         javax.sql.PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, this, this.user, this.password);
0:         if (dncLogWriter != null) {
0:             dncLogWriter.traceExit(this, "getPooledConnection", pooledConnection);
0:         }
0:         return pooledConnection;
0:     }
1:     // Standard method that establishes the initial physical connection using CPDS properties.
0:     public javax.sql.PooledConnection getPooledConnection(String user,
0:                                                           String password) throws java.sql.SQLException {
0:         org.apache.derby.client.am.LogWriter dncLogWriter = super.computeDncLogWriterForNewConnection("_cpds");
0:         if (dncLogWriter != null) {
0:             dncLogWriter.traceEntry(this, "getPooledConnection", user, "<escaped>");
0:         }
0:         javax.sql.PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, this, user, password);
0:         if (dncLogWriter != null) {
0:             dncLogWriter.traceExit(this, "getPooledConnection", pooledConnection);
0:         }
0:         return pooledConnection;
0:     }
1: 
0:     //  method that establishes the initial physical connection using DS properties instead of CPDS properties.
0:     public javax.sql.PooledConnection getPooledConnection(ClientDataSource ds,
0:                                                           String user,
0:                                                           String password) throws java.sql.SQLException {
0:         org.apache.derby.client.am.LogWriter dncLogWriter = ds.computeDncLogWriterForNewConnection("_cpds");
0:         if (dncLogWriter != null) {
0:             dncLogWriter.traceEntry(this, "getPooledConnection", ds, user, "<escaped>");
0:         }
0:         javax.sql.PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, ds, user, password);
0:         if (dncLogWriter != null) {
0:             dncLogWriter.traceExit(this, "getPooledConnection", pooledConnection);
0:         }
0:         return pooledConnection;
0:     }
1: 
0:     //  method that establishes the initial physical connection
0:     // using DS properties instead of CPDS properties.
0:     private javax.sql.PooledConnection getPooledConnectionX(org.apache.derby.client.am.LogWriter dncLogWriter,
0:                                                             ClientDataSource ds,
0:                                                             String user,
0:                                                             String password) throws java.sql.SQLException {
0:         return new ClientPooledConnection(ds, dncLogWriter, user, password);
0:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.jdbc.ClientConnectionPoolDataSource
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.jdbc;
1: 
0: import org.apache.derby.client.ClientPooledConnection;
1: /**
0:  * ClientConnectionPoolDataSource is a factory for PooledConnection objects.
0:  * An object that implements this interface will typically be registered with
0:  * a naming service that is based on the Java Naming and Directory Interface (JNDI).
1:  */
0: public class ClientConnectionPoolDataSource extends ClientDataSource implements javax.sql.ConnectionPoolDataSource,
0:                                                                       java.io.Serializable,
0:                                                                       javax.naming.Referenceable
0: {
0:   static final long serialVersionUID = -539234282156481377L;
0:   public static final String className__ = "org.apache.derby.jdbc.ClientConnectionPoolDataSource";
1: 
0:   private String password = null;
0:   synchronized public void setPassword (String password) { this.password = password; }
0:   public final static String propertyKey_password = "password";
1: 
0:   // deprecated.  do not use.  this member remains only for serial compatibility.
0:   // this member should never be used.  pre-empted by super.traceFileSuffixIndex_.
0:   // private int traceFileSuffixIndex = 0;
1: 
0:   public ClientConnectionPoolDataSource ()
0:   { super(); }
1: 
0:   // ---------------------------interface methods-------------------------------
1: 
0:   // Attempt to establish a physical database connection that can be used as a pooled connection.
0:   public javax.sql.PooledConnection getPooledConnection () throws java.sql.SQLException
0:   {
0:     org.apache.derby.client.am.LogWriter dncLogWriter = super.computeDncLogWriterForNewConnection ("_cpds");
0:     if (dncLogWriter != null) dncLogWriter.traceEntry (this, "getPooledConnection");
0:     javax.sql.PooledConnection pooledConnection = getPooledConnectionX (dncLogWriter, this, this.user, this.password);
0:     if (dncLogWriter != null) dncLogWriter.traceExit (this, "getPooledConnection", pooledConnection);
0:     return pooledConnection;
0:   }
1: 
0:   // Standard method that establishes the initial physical connection using CPDS properties.
0:   public javax.sql.PooledConnection getPooledConnection (String user,
0:                                                          String password) throws java.sql.SQLException
0:   {
0:     org.apache.derby.client.am.LogWriter dncLogWriter = super.computeDncLogWriterForNewConnection ("_cpds");
0:     if (dncLogWriter != null) dncLogWriter.traceEntry (this, "getPooledConnection", user, "<escaped>");
0:     javax.sql.PooledConnection pooledConnection = getPooledConnectionX (dncLogWriter, this, user, password);
0:     if (dncLogWriter != null) dncLogWriter.traceExit (this, "getPooledConnection", pooledConnection);
0:     return pooledConnection;
0:   }
1: 
0:   //  method that establishes the initial physical connection using DS properties instead of CPDS properties.
0:   public javax.sql.PooledConnection getPooledConnection (ClientDataSource ds,
0:                                                          String user,
0:                                                          String password) throws java.sql.SQLException
0:   {
0:     org.apache.derby.client.am.LogWriter dncLogWriter = ds.computeDncLogWriterForNewConnection ("_cpds");
0:     if (dncLogWriter != null) dncLogWriter.traceEntry (this, "getPooledConnection", ds, user, "<escaped>");
0:     javax.sql.PooledConnection pooledConnection = getPooledConnectionX (dncLogWriter, ds, user, password);
0:     if (dncLogWriter != null) dncLogWriter.traceExit (this, "getPooledConnection", pooledConnection);
0:     return pooledConnection;
0:   }
1: 
0:   //  method that establishes the initial physical connection
0:   // using DS properties instead of CPDS properties.
0:   private javax.sql.PooledConnection getPooledConnectionX (org.apache.derby.client.am.LogWriter dncLogWriter,
0:                                                            ClientDataSource ds,
0:                                                            String user,
0:                                                            String password) throws java.sql.SQLException
0:   {
0:     return new ClientPooledConnection (ds, dncLogWriter, user, password);
0:   }
0: }
============================================================================