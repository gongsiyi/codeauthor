1:5cf7a46: /*
4:5cf7a46: 
1:5cf7a46:    Class org.apache.derby.optional.lucene.LuceneSupport
1:5cf7a46: 
1:5cf7a46:    Licensed to the Apache Software Foundation (ASF) under one or more
1:5cf7a46:    contributor license agreements.  See the NOTICE file distributed with
1:5cf7a46:    this work for additional information regarding copyright ownership.
1:5cf7a46:    The ASF licenses this file to You under the Apache License, Version 2.0
1:5cf7a46:    (the "License"); you may not use this file except in compliance with
1:5cf7a46:    the License.  You may obtain a copy of the License at
1:5cf7a46: 
1:5cf7a46:       http://www.apache.org/licenses/LICENSE-2.0
1:5cf7a46: 
1:5cf7a46:    Unless required by applicable law or agreed to in writing, software
1:5cf7a46:    distributed under the License is distributed on an "AS IS" BASIS,
1:5cf7a46:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5cf7a46:    See the License for the specific language governing permissions and
1:5cf7a46:    limitations under the License.
1:5cf7a46: 
1:5cf7a46: */
1:5cf7a46: 
1:5cf7a46: package org.apache.derby.optional.lucene;
1:5cf7a46: 
1:a69ff90: import java.io.EOFException;
1:5cf7a46: import java.io.IOException;
1:5cf7a46: import java.security.AccessController;
1:5cf7a46: import java.security.PrivilegedActionException;
1:5cf7a46: import java.security.PrivilegedExceptionAction;
1:5cf7a46: import java.util.ArrayList;
1:5cf7a46: 
1:5cf7a46: import org.apache.lucene.store.AlreadyClosedException;
1:5cf7a46: import org.apache.lucene.store.IndexInput;
1:5cf7a46: 
1:5cf7a46: import org.apache.derby.io.StorageFile;
1:5cf7a46: import org.apache.derby.io.StorageRandomAccessFile;
1:5cf7a46: 
1:5cf7a46: /**
1:5cf7a46:  * <p>
1:5cf7a46:  * Wrapper for a StorageRandomAccessFile which can serve as a
1:5cf7a46:  * Lucene IndexInput.
1:5cf7a46:  * </p>
1:5cf7a46:  */
1:eb79cc0: class DerbyIndexInput   extends IndexInput
2:5cf7a46: {
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  CONSTANTS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  STATE
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     // constructor state
1:5cf7a46:     private StorageFile                     _file;
1:5cf7a46:     private StorageRandomAccessFile _sraf;
1:a69ff90:     private final ArrayList<IndexInput> _slices = new ArrayList<IndexInput>();
1:a69ff90:     private final long _offset;
1:a69ff90:     private final long _length;
1:5cf7a46: 
1:5cf7a46:     // mutable state
1:5cf7a46:     private boolean _closed = false;
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  CONSTRUCTOR
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /** Construct from a StorageRandomAccessFile */
1:5cf7a46:     DerbyIndexInput( StorageFile file )
1:5cf7a46:         throws IOException
1:5cf7a46:     {
1:a69ff90:         this(file, file.getPath(), 0L, null);
1:a69ff90:     }
1:a69ff90: 
1:a69ff90:     /**
1:a69ff90:      * Create a DerbyIndexInput that reads data from a StorageFile.
1:a69ff90:      *
1:a69ff90:      * @param file the file to read from
1:a69ff90:      * @param description a description of the file (will be returned
1:a69ff90:      *                    from {@code toString()})
1:a69ff90:      * @param offset where to start reading in the file
1:a69ff90:      * @param length how much of the file to read, {@code null} means
1:a69ff90:      *               read till end of file
1:a69ff90:      * @throws IOException if an I/O error occurs
1:a69ff90:      */
1:a69ff90:     private DerbyIndexInput(StorageFile file, String description,
1:a69ff90:                             long offset, Long length)
1:a69ff90:         throws IOException
1:a69ff90:     {
1:a69ff90:         super(description);
1:5cf7a46: 
1:7234498:         setConstructorFields( file );
1:a69ff90: 
1:a69ff90:         _offset = offset;
1:a69ff90:         if (length == null) {
1:a69ff90:             _length = _sraf.length() - offset;
1:a69ff90:         } else {
1:a69ff90:             _length = length;
1:a69ff90:         }
1:a69ff90: 
4:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /** Set the constructor fields */
1:5cf7a46:     private void    setConstructorFields( final StorageFile file )
1:7234498:         throws IOException
1:5cf7a46:     {
1:7234498:         try {
1:7234498:             AccessController.doPrivileged
1:5cf7a46:             (
1:7234498:              new PrivilegedExceptionAction<Void>()
1:5cf7a46:              {
1:7234498:                 public Void run() throws IOException
1:5cf7a46:                 {
1:5cf7a46:                     _file = file;
1:5cf7a46:                     _sraf = _file.getRandomAccessFile( "r" );
1:5cf7a46: 
1:5cf7a46:                     return null;
1:5cf7a46:                 }
1:5cf7a46:              }
1:5cf7a46:              );
1:7234498:         } catch (PrivilegedActionException pae) {
1:7234498:             throw (IOException) pae.getCause();
1:7234498:         }
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  IndexInput METHODS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     public  IndexInput  clone()
1:5cf7a46:     {
3:5cf7a46:         try {
1:a69ff90:             // A clone is a slice that covers the entire range of this
1:a69ff90:             // index input instance.
1:a69ff90:             IndexInput clone = slice(_file.getPath(), 0L, _length);
1:5cf7a46: 
1:5cf7a46:             clone.seek( getFilePointer() );
1:5cf7a46: 
1:5cf7a46:             return clone;
1:5cf7a46:         }
2:5cf7a46:         catch (IOException ioe) { throw wrap( ioe ); }
1:5cf7a46:     }
1:5cf7a46: 
1:a69ff90:     public IndexInput slice(String sliceDescription, long offset, long length)
1:a69ff90:         throws IOException
1:a69ff90:     {
1:a69ff90:         checkIfClosed();
1:a69ff90: 
1:a69ff90:         if (offset < 0 || length < 0 || offset > _length - length) {
1:a69ff90:             throw new IllegalArgumentException();
1:a69ff90:         }
1:a69ff90: 
1:a69ff90:         DerbyIndexInput slice = new DerbyIndexInput(
1:a69ff90:                 _file, sliceDescription, _offset + offset, length);
1:a69ff90:         _slices.add(slice);
1:a69ff90:         slice.seek(0L);
1:a69ff90:         return slice;
1:a69ff90:     }
1:a69ff90: 
1:5cf7a46:     public void close() throws IOException
1:5cf7a46:     {
1:5cf7a46:         if ( !_closed )
1:5cf7a46:         {
1:5cf7a46:             _closed = true;
1:5cf7a46:             _sraf.close();
1:5cf7a46: 
1:a69ff90:             for ( IndexInput slice : _slices ) { slice.close(); }
1:a69ff90:             _slices.clear();
1:5cf7a46: 
1:5cf7a46:             _file = null;
1:5cf7a46:             _sraf = null;
1:5cf7a46:         }
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public long getFilePointer()
1:5cf7a46:     {
4:5cf7a46:         checkIfClosed();
1:5cf7a46: 
1:5cf7a46:         try {
1:a69ff90:             return _sraf.getFilePointer() - _offset;
1:5cf7a46:         }
1:5cf7a46:         catch (IOException ioe) { throw wrap( ioe ); }
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public long length()
1:5cf7a46:     {
1:5cf7a46:         checkIfClosed();
1:a69ff90:         return _length;
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public void seek( long pos )    throws IOException
1:5cf7a46:     {
1:5cf7a46:         checkIfClosed();
1:a69ff90:         _sraf.seek( _offset + pos );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  DataInput METHODS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     public byte readByte()  throws IOException
1:5cf7a46:     {
1:a69ff90:         checkEndOfFile(1);
1:5cf7a46:         return _sraf.readByte();
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public void readBytes( byte[] b, int offset, int len )
1:5cf7a46:         throws IOException
1:5cf7a46:     {
1:a69ff90:         checkEndOfFile(len);
1:5cf7a46: 
1:5cf7a46:         int     bytesRead = 0;
1:5cf7a46:         while ( bytesRead < len )
1:5cf7a46:         {
1:5cf7a46:             int increment = _sraf.read( b, offset + bytesRead , len - bytesRead );
1:5cf7a46:             if ( increment < 0 ) { break; }
1:5cf7a46: 
1:5cf7a46:             bytesRead += increment;
1:5cf7a46:         }
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  MINIONS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:a69ff90:     /**
1:a69ff90:      * Verify that we can read {@code length} bytes without hitting end
1:a69ff90:      * of file (or end of the slice represented by this instance).
1:a69ff90:      *
1:a69ff90:      * @param length the number of bytes we need
1:a69ff90:      * @throws EOFException if the requested number of bytes is not available
1:a69ff90:      * @throws AlreadyClosedException if this object has been closed
1:a69ff90:      */
1:a69ff90:     private void checkEndOfFile(int length) throws EOFException {
1:a69ff90:         // getFilePointer() calls checkIfClosed(), so no need to call it
1:a69ff90:         // explicitly here.
1:a69ff90:         long available = _length - getFilePointer();
1:a69ff90:         if (length > available) {
1:a69ff90:             throw new EOFException();
1:a69ff90:         }
1:a69ff90:     }
1:a69ff90: 
1:5cf7a46:     /** Raise a Lucene error if this object has been closed */
1:5cf7a46:     private void    checkIfClosed()
1:5cf7a46:     {
1:5cf7a46:         if ( _closed )
1:5cf7a46:         {
1:5cf7a46:             throw new AlreadyClosedException( toString() );
1:5cf7a46:         }
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /** Wrap an exception in a Runtime exception */
1:5cf7a46:     private RuntimeException    wrap( Throwable t )
1:5cf7a46:     {
1:5cf7a46:         return new RuntimeException( t.getMessage(), t );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a69ff90
/////////////////////////////////////////////////////////////////////////
1: import java.io.EOFException;
/////////////////////////////////////////////////////////////////////////
1:     private final ArrayList<IndexInput> _slices = new ArrayList<IndexInput>();
1:     private final long _offset;
1:     private final long _length;
/////////////////////////////////////////////////////////////////////////
1:         this(file, file.getPath(), 0L, null);
1:     }
1: 
1:     /**
1:      * Create a DerbyIndexInput that reads data from a StorageFile.
1:      *
1:      * @param file the file to read from
1:      * @param description a description of the file (will be returned
1:      *                    from {@code toString()})
1:      * @param offset where to start reading in the file
1:      * @param length how much of the file to read, {@code null} means
1:      *               read till end of file
1:      * @throws IOException if an I/O error occurs
1:      */
1:     private DerbyIndexInput(StorageFile file, String description,
1:                             long offset, Long length)
1:         throws IOException
1:     {
1:         super(description);
1: 
1:         _offset = offset;
1:         if (length == null) {
1:             _length = _sraf.length() - offset;
1:         } else {
1:             _length = length;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:             // A clone is a slice that covers the entire range of this
1:             // index input instance.
1:             IndexInput clone = slice(_file.getPath(), 0L, _length);
/////////////////////////////////////////////////////////////////////////
1:     public IndexInput slice(String sliceDescription, long offset, long length)
1:         throws IOException
1:     {
1:         checkIfClosed();
1: 
1:         if (offset < 0 || length < 0 || offset > _length - length) {
1:             throw new IllegalArgumentException();
1:         }
1: 
1:         DerbyIndexInput slice = new DerbyIndexInput(
1:                 _file, sliceDescription, _offset + offset, length);
1:         _slices.add(slice);
1:         slice.seek(0L);
1:         return slice;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             for ( IndexInput slice : _slices ) { slice.close(); }
1:             _slices.clear();
/////////////////////////////////////////////////////////////////////////
1:             return _sraf.getFilePointer() - _offset;
/////////////////////////////////////////////////////////////////////////
1:         return _length;
1:         _sraf.seek( _offset + pos );
/////////////////////////////////////////////////////////////////////////
1:         checkEndOfFile(1);
1:         checkEndOfFile(len);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Verify that we can read {@code length} bytes without hitting end
1:      * of file (or end of the slice represented by this instance).
1:      *
1:      * @param length the number of bytes we need
1:      * @throws EOFException if the requested number of bytes is not available
1:      * @throws AlreadyClosedException if this object has been closed
1:      */
1:     private void checkEndOfFile(int length) throws EOFException {
1:         // getFilePointer() calls checkIfClosed(), so no need to call it
1:         // explicitly here.
1:         long available = _length - getFilePointer();
1:         if (length > available) {
1:             throw new EOFException();
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:7234498
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         setConstructorFields( file );
1:         throws IOException
1:         try {
1:             AccessController.doPrivileged
1:              new PrivilegedExceptionAction<Void>()
1:                 public Void run() throws IOException
/////////////////////////////////////////////////////////////////////////
1:         } catch (PrivilegedActionException pae) {
1:             throw (IOException) pae.getCause();
1:         }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eb79cc0
/////////////////////////////////////////////////////////////////////////
1: class DerbyIndexInput   extends IndexInput
commit:5cf7a46
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Class org.apache.derby.optional.lucene.LuceneSupport
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.optional.lucene;
1: 
1: import java.io.IOException;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
0: import java.sql.SQLException;
1: import java.util.ArrayList;
1: 
1: import org.apache.lucene.store.AlreadyClosedException;
1: import org.apache.lucene.store.IndexInput;
1: 
1: import org.apache.derby.io.StorageFile;
1: import org.apache.derby.io.StorageRandomAccessFile;
1: 
1: /**
1:  * <p>
1:  * Wrapper for a StorageRandomAccessFile which can serve as a
1:  * Lucene IndexInput.
1:  * </p>
1:  */
0: public  class DerbyIndexInput   extends IndexInput
1: {
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTANTS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  STATE
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     // constructor state
1:     private StorageFile                     _file;
1:     private StorageRandomAccessFile _sraf;
0:     private final   ArrayList<DerbyIndexInput>  _clones = new ArrayList<DerbyIndexInput>();
1: 
1:     // mutable state
1:     private boolean _closed = false;
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTRUCTOR
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /** Construct from a StorageRandomAccessFile */
1:     DerbyIndexInput( StorageFile file )
1:         throws IOException
1:     {
0:         super( file.getPath() );
1: 
1:         try {
0:             setConstructorFields( file );
1:         }
0:         catch (PrivilegedActionException pae) { wrapWithIOException( pae ); }
1:     }
1: 
1:     /** Set the constructor fields */
1:     private void    setConstructorFields( final StorageFile file )
0:         throws IOException, PrivilegedActionException
1:     {
0:         AccessController.doPrivileged
1:             (
0:              new PrivilegedExceptionAction<Object>()
1:              {
0:                 public Object run() throws IOException
1:                 {
1:                     _file = file;
1:                     _sraf = _file.getRandomAccessFile( "r" );
1: 
1:                     return null;
1:                 }
1:              }
1:              );
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  IndexInput METHODS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     public  IndexInput  clone()
1:     {
1:         checkIfClosed();
1:         
1:         try {
0:             DerbyIndexInput clone = new DerbyIndexInput( _file );
0:             _clones.add( clone );
1: 
1:             clone.seek( getFilePointer() );
1: 
1:             return clone;
1:         }
1:         catch (IOException ioe) { throw wrap( ioe ); }
1:     }
1: 
1:     public void close() throws IOException
1:     {
1:         if ( !_closed )
1:         {
1:             _closed = true;
1:             _sraf.close();
1: 
0:             for ( DerbyIndexInput clone : _clones ) { clone.close(); }
0:             _clones.clear();
1: 
1:             _file = null;
1:             _sraf = null;
1:         }
1:     }
1: 
1:     public long getFilePointer()
1:     {
1:         checkIfClosed();
1: 
1:         try {
0:             return _sraf.getFilePointer();
1:         }
1:         catch (IOException ioe) { throw wrap( ioe ); }
1:     }
1: 
1:     public long length()
1:     {
1:         checkIfClosed();
1: 
1:         try {
0:             return _sraf.length();
1:         }
1:         catch (IOException ioe) { throw wrap( ioe ); }
1:     }
1: 
1:     public void seek( long pos )    throws IOException
1:     {
1:         checkIfClosed();
0:         _sraf.seek( pos );
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  DataInput METHODS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     public byte readByte()  throws IOException
1:     {
1:         checkIfClosed();
1:         return _sraf.readByte();
1:     }
1: 
1:     public void readBytes( byte[] b, int offset, int len )
1:         throws IOException
1:     {
1:         checkIfClosed();
1: 
1:         int     bytesRead = 0;
1:         while ( bytesRead < len )
1:         {
1:             int increment = _sraf.read( b, offset + bytesRead , len - bytesRead );
1:             if ( increment < 0 ) { break; }
1: 
1:             bytesRead += increment;
1:         }
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  MINIONS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /** Raise a Lucene error if this object has been closed */
1:     private void    checkIfClosed()
1:     {
1:         if ( _closed )
1:         {
1:             throw new AlreadyClosedException( toString() );
1:         }
1:     }
1: 
1:     /** Wrap an exception in a Runtime exception */
1:     private RuntimeException    wrap( Throwable t )
1:     {
1:         return new RuntimeException( t.getMessage(), t );
1:     }
1: 
0:     /** Wrap an exception in an IOException */
0:     private IOException wrapWithIOException( Throwable t )
1:     {
0:         return new IOException( t.getMessage(), t );
1:     }
1:     
1: }
============================================================================