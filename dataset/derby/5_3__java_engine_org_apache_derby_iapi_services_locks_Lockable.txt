1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.locks.Lockable
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.locks;
1:eac0369: 
1:eac0369: import java.util.Hashtable;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Any object that needs to be locked must implement Lockable.
1:eac0369: 	This allows a generic lock manager that can have locking policies
1:eac0369: 	defined on a per-object basis.
1:eac0369: 
1:eac0369:     A request to lock the object takes a qualifier, this qualifier may be
1:eac0369: 	used the object to implement a complex locking policy, e.g. traditional
1:eac0369: 	database shared, update and exclusive locks. 
1:eac0369: 	<P>
1:eac0369: 	The lock manager uses this ordered protocol to determine if a lock request on a
1:c6892a1: 	Lockable <TT> L </TT> with qualifier <TT> Q1 </TT> in compatibility space
1:eac0369: 	<TT> CS1 </TT> can be granted:
1:eac0369: 	<OL>
1:eac0369: 	<LI>If no locks are held on <TT> L </TT> in any compatability space then the
1:eac0369: 	request is granted.
1:eac0369: 	<LI>If <TT>L.requestCompatible(Q1)</TT> returns true then the lock is granted.
1:eac0369: 	<LI>Otherwise the request is granted if the following expression evaluates
1:eac0369: 	to true for every other lock <TT>{ CSn, Qn}</TT> held on <TT> L </TT>
1:eac0369: 	<UL>
1:dbed020: 	<LI> <PRE>    ( ( CSn == CS1 ) &amp;&amp; L.lockerAlwaysCompatible() ) </PRE>
1:eac0369: 	<LI> <PRE> || (L.reqestCompatible(Q1, Qn)) </PRE>
1:eac0369: 	</UL>
1:eac0369: 	</OL>
1:eac0369: 	<BR>
1:eac0369: 	If the request is granted then a call is made to <TT> L.lockEvent(CS1, Q1) </TT>.
1:eac0369: 	<BR>
1:eac0369: 	When the lock is released a call is made to <TT> L.unlockEvent(CS1, Q1) </TT>.
1:eac0369:     <P>
1:eac0369: 	The lock manager uses equals() and hashCode() to identify unique Lockables.
1:eac0369: 	<BR>
1:eac0369: 	If the class implementing Lockable requires that each instance of class
1:eac0369: 	correspond to a different locked object then the equals() method must test
1:eac0369: 	equality via the reference equality test (==), this is the default behaviour
1:eac0369: 	for equality.
1:eac0369: 	<BR>
1:eac0369: 	If the class implementing Lockable require that each instance of the class
1:eac0369: 	that has the same value (as defined by the class) corresponds to a locked
1:eac0369: 	object then its equals() method must reflect that, e.g. by testing equality
1:eac0369: 	of its fields. In this case the first Lockable to be locked will be kept
1:eac0369: 	by lock manager as the key for the lock. Thus even after the first caller
1:c6892a1: 	unlocks the object, its reference will still be kept by the lock manager.
1:eac0369: 	Thus Lockable's that per value equality must be designed so that they
1:eac0369: 	are never re-used for different lockable concepts.
1:eac0369: 	<BR>
1:eac0369: 	In either case the equals() method must accept a reference to an object of
1:eac0369: 	a different type.
1:eac0369: 	<BR>
1:eac0369: 	As per standard hashtable rules the value returned by hashCode() must be in sync
1:eac0369: 	with the equals() method.
1:eac0369: 
1:eac0369: 	<BR>
1:eac0369: 	MT - Mutable - : single thread required, synchronization is provided by the lock manager.
1:eac0369: 	If the class implementing Lockable uses value equality then it must have an immutable identity.
1:eac0369: */
1:eac0369: 
1:eac0369: public interface Lockable {
1:eac0369:     
1:eac0369: 	/**
1:eac0369: 		Note the fact the object is locked. Performs required actions
1:eac0369: 		to ensure that unlockEvent() work correctly.
1:eac0369: 		This method does not actually  perform any locking of the
1:eac0369: 		object, the locking mechanism is provided by the lock manager.
1:eac0369: 		<P>
1:eac0369: 		If the class supports multiple lockers of the object then this method
1:eac0369: 		will be called once per locker, each with their own qualifier.
1:eac0369: 		<P>
1:eac0369: 		Must only be called by the lock manager. Synchronization will be handled
1:eac0369: 		by the lock manager.
1:eac0369: 	*/
1:eac0369: 	public void lockEvent(Latch lockInfo);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return true if the requested qualifier is compatible with the already granted
1:eac0369: 		qualifier.
1:eac0369: 	*/
1:eac0369: 	public boolean requestCompatible(Object requestedQualifier, Object grantedQualifier);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Returns true if any lock request on a Lockable L in a compatibility space CS1 is compatible
1:eac0369: 		with any other lock held on L in CS1.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public boolean lockerAlwaysCompatible();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Note that the object has been unlocked 
1:eac0369: 		<P>
1:eac0369: 		Must only be called by the lock manager. Synchronization will be handled
1:eac0369: 		by the lock manager.
1:eac0369: 	*/
1:eac0369: 	public void unlockEvent(Latch lockInfo);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		If this lockable object wants to participate in a diagnostic virtual
1:c6892a1: 		lock table, then put any relevant attributes of this lock into the
1:eac0369: 		attributes list (the attribute must be an immutable object).  The list
1:eac0369: 		of attributes of interest to the virtual lock table can be found in
1:eac0369: 		VirtualLockTable. The toString method will be called by the VirtualTable
1:eac0369: 		on the attribute value for display. 
1:eac0369: 		<P>
1:eac0369: 		@param flag use the bits in this int to decide if the user is
1:eac0369: 		interested in this kind of lockable object.  The bits are defined in
1:eac0369: 		VirtualLockTable.  For instance, the user may only ask
1:eac0369: 		for TABLE_AND_ROWLOCK and if this is not a table or row lock, then
1:c6892a1: 		don't participate.
1:c6892a1: 		@param attributes if this decides to participate, put all relevant
1:eac0369: 		attributes into the Hashtable.  The complete list of interesting
1:eac0369: 		attributes is listed in VirtualLockTable.
1:eac0369: 		The following attributes must be present for all participating
1:eac0369: 		lockables:
1:eac0369: 		VirtualLockTable.LOCKNAME,
1:eac0369: 		VirtualLockTable.LOCKTYPE,
1:eac0369: 		either VirtualLockTable.CONTAINERID or VirtualLockTable.CONGLOMID,
1:eac0369: 		<P>
1:eac0369: 		MT - this routine must be MP safe, caller will not be single threading
1:eac0369: 		the lock manager.
1:eac0369: 		<P>
1:eac0369: 		@return true if this object has diagnostic information to add to the
1:eac0369: 		virtual lock table.  If this object either does not want to participate
1:eac0369: 		in the diagnostic virtual lock table or none of the attributes
1:eac0369: 		requested are attributes of this lock, returns false.
1:eac0369: 
1:eac0369: 		@see VirtualLockTable
1:eac0369: 	 */
1:996ca72: 	public boolean lockAttributes(int flag, Hashtable<String,Object> attributes);
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	<LI> <PRE>    ( ( CSn == CS1 ) &amp;&amp; L.lockerAlwaysCompatible() ) </PRE>
commit:996ca72
/////////////////////////////////////////////////////////////////////////
1: 	public boolean lockAttributes(int flag, Hashtable<String,Object> attributes);
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c6892a1
/////////////////////////////////////////////////////////////////////////
1: 	Lockable <TT> L </TT> with qualifier <TT> Q1 </TT> in compatibility space
/////////////////////////////////////////////////////////////////////////
1: 	unlocks the object, its reference will still be kept by the lock manager.
/////////////////////////////////////////////////////////////////////////
1: 		lock table, then put any relevant attributes of this lock into the
/////////////////////////////////////////////////////////////////////////
1: 		don't participate.
1: 		@param attributes if this decides to participate, put all relevant
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.locks.Lockable
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.locks
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.locks;
1: 
1: import java.util.Hashtable;
1: 
1: /**
1: 	Any object that needs to be locked must implement Lockable.
1: 	This allows a generic lock manager that can have locking policies
1: 	defined on a per-object basis.
1: 
1:     A request to lock the object takes a qualifier, this qualifier may be
1: 	used the object to implement a complex locking policy, e.g. traditional
1: 	database shared, update and exclusive locks. 
1: 	<P>
1: 	The lock manager uses this ordered protocol to determine if a lock request on a
0: 	Lockable <TT> L </TT> with qualifier <TT> Q1 </TT> in compatiblity space
1: 	<TT> CS1 </TT> can be granted:
1: 	<OL>
1: 	<LI>If no locks are held on <TT> L </TT> in any compatability space then the
1: 	request is granted.
1: 	<LI>If <TT>L.requestCompatible(Q1)</TT> returns true then the lock is granted.
1: 	<LI>Otherwise the request is granted if the following expression evaluates
1: 	to true for every other lock <TT>{ CSn, Qn}</TT> held on <TT> L </TT>
1: 	<UL>
0: 	<LI> <PRE>    ( ( CSn == CS1 ) && L.lockerAlwaysCompatible() ) </PRE>
1: 	<LI> <PRE> || (L.reqestCompatible(Q1, Qn)) </PRE>
1: 	</UL>
1: 	</OL>
1: 	<BR>
1: 	If the request is granted then a call is made to <TT> L.lockEvent(CS1, Q1) </TT>.
1: 	<BR>
1: 	When the lock is released a call is made to <TT> L.unlockEvent(CS1, Q1) </TT>.
1:     <P>
1: 	The lock manager uses equals() and hashCode() to identify unique Lockables.
1: 	<BR>
1: 	If the class implementing Lockable requires that each instance of class
1: 	correspond to a different locked object then the equals() method must test
1: 	equality via the reference equality test (==), this is the default behaviour
1: 	for equality.
1: 	<BR>
1: 	If the class implementing Lockable require that each instance of the class
1: 	that has the same value (as defined by the class) corresponds to a locked
1: 	object then its equals() method must reflect that, e.g. by testing equality
1: 	of its fields. In this case the first Lockable to be locked will be kept
1: 	by lock manager as the key for the lock. Thus even after the first caller
0: 	unlocks the obejct, its reference will still be kept by the lock manager.
1: 	Thus Lockable's that per value equality must be designed so that they
1: 	are never re-used for different lockable concepts.
1: 	<BR>
1: 	In either case the equals() method must accept a reference to an object of
1: 	a different type.
1: 	<BR>
1: 	As per standard hashtable rules the value returned by hashCode() must be in sync
1: 	with the equals() method.
1: 
1: 	<BR>
1: 	MT - Mutable - : single thread required, synchronization is provided by the lock manager.
1: 	If the class implementing Lockable uses value equality then it must have an immutable identity.
1: */
1: 
1: public interface Lockable {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1:     
1: 	/**
1: 		Note the fact the object is locked. Performs required actions
1: 		to ensure that unlockEvent() work correctly.
1: 		This method does not actually  perform any locking of the
1: 		object, the locking mechanism is provided by the lock manager.
1: 		<P>
1: 		If the class supports multiple lockers of the object then this method
1: 		will be called once per locker, each with their own qualifier.
1: 		<P>
1: 		Must only be called by the lock manager. Synchronization will be handled
1: 		by the lock manager.
1: 	*/
1: 	public void lockEvent(Latch lockInfo);
1: 
1: 	/**
1: 		Return true if the requested qualifier is compatible with the already granted
1: 		qualifier.
1: 	*/
1: 	public boolean requestCompatible(Object requestedQualifier, Object grantedQualifier);
1: 
1: 	/**
1: 		Returns true if any lock request on a Lockable L in a compatibility space CS1 is compatible
1: 		with any other lock held on L in CS1.
1: 
1: 	*/
1: 	public boolean lockerAlwaysCompatible();
1: 
1: 	/**
1: 		Note that the object has been unlocked 
1: 		<P>
1: 		Must only be called by the lock manager. Synchronization will be handled
1: 		by the lock manager.
1: 	*/
1: 	public void unlockEvent(Latch lockInfo);
1: 
1: 	/**
1: 		If this lockable object wants to participate in a diagnostic virtual
0: 		lock table, then put any relavent attributes of this lock into the
1: 		attributes list (the attribute must be an immutable object).  The list
1: 		of attributes of interest to the virtual lock table can be found in
1: 		VirtualLockTable. The toString method will be called by the VirtualTable
1: 		on the attribute value for display. 
1: 		<P>
1: 		@param flag use the bits in this int to decide if the user is
1: 		interested in this kind of lockable object.  The bits are defined in
1: 		VirtualLockTable.  For instance, the user may only ask
1: 		for TABLE_AND_ROWLOCK and if this is not a table or row lock, then
0: 		don't paritipate. 
0: 		@param attributes if this decides to participate, put all relavent
1: 		attributes into the Hashtable.  The complete list of interesting
1: 		attributes is listed in VirtualLockTable.
1: 		The following attributes must be present for all participating
1: 		lockables:
1: 		VirtualLockTable.LOCKNAME,
1: 		VirtualLockTable.LOCKTYPE,
1: 		either VirtualLockTable.CONTAINERID or VirtualLockTable.CONGLOMID,
1: 		<P>
1: 		MT - this routine must be MP safe, caller will not be single threading
1: 		the lock manager.
1: 		<P>
1: 		@return true if this object has diagnostic information to add to the
1: 		virtual lock table.  If this object either does not want to participate
1: 		in the diagnostic virtual lock table or none of the attributes
1: 		requested are attributes of this lock, returns false.
1: 
1: 		@see VirtualLockTable
1: 	 */
0: 	public boolean lockAttributes(int flag, Hashtable attributes);
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.locks
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.locks;
0: 
0: import java.util.Hashtable;
0: 
0: /**
0: 	Any object that needs to be locked must implement Lockable.
0: 	This allows a generic lock manager that can have locking policies
0: 	defined on a per-object basis.
0: 
0:     A request to lock the object takes a qualifier, this qualifier may be
0: 	used the object to implement a complex locking policy, e.g. traditional
0: 	database shared, update and exclusive locks. 
0: 	<P>
0: 	The lock manager uses this ordered protocol to determine if a lock request on a
0: 	Lockable <TT> L </TT> with qualifier <TT> Q1 </TT> in compatiblity space
0: 	<TT> CS1 </TT> can be granted:
0: 	<OL>
0: 	<LI>If no locks are held on <TT> L </TT> in any compatability space then the
0: 	request is granted.
0: 	<LI>If <TT>L.requestCompatible(Q1)</TT> returns true then the lock is granted.
0: 	<LI>Otherwise the request is granted if the following expression evaluates
0: 	to true for every other lock <TT>{ CSn, Qn}</TT> held on <TT> L </TT>
0: 	<UL>
0: 	<LI> <PRE>    ( ( CSn == CS1 ) && L.lockerAlwaysCompatible() ) </PRE>
0: 	<LI> <PRE> || (L.reqestCompatible(Q1, Qn)) </PRE>
0: 	</UL>
0: 	</OL>
0: 	<BR>
0: 	If the request is granted then a call is made to <TT> L.lockEvent(CS1, Q1) </TT>.
0: 	<BR>
0: 	When the lock is released a call is made to <TT> L.unlockEvent(CS1, Q1) </TT>.
0:     <P>
0: 	The lock manager uses equals() and hashCode() to identify unique Lockables.
0: 	<BR>
0: 	If the class implementing Lockable requires that each instance of class
0: 	correspond to a different locked object then the equals() method must test
0: 	equality via the reference equality test (==), this is the default behaviour
0: 	for equality.
0: 	<BR>
0: 	If the class implementing Lockable require that each instance of the class
0: 	that has the same value (as defined by the class) corresponds to a locked
0: 	object then its equals() method must reflect that, e.g. by testing equality
0: 	of its fields. In this case the first Lockable to be locked will be kept
0: 	by lock manager as the key for the lock. Thus even after the first caller
0: 	unlocks the obejct, its reference will still be kept by the lock manager.
0: 	Thus Lockable's that per value equality must be designed so that they
0: 	are never re-used for different lockable concepts.
0: 	<BR>
0: 	In either case the equals() method must accept a reference to an object of
0: 	a different type.
0: 	<BR>
0: 	As per standard hashtable rules the value returned by hashCode() must be in sync
0: 	with the equals() method.
0: 
0: 	<BR>
0: 	MT - Mutable - : single thread required, synchronization is provided by the lock manager.
0: 	If the class implementing Lockable uses value equality then it must have an immutable identity.
0: */
0: 
0: public interface Lockable {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0:     
0: 	/**
0: 		Note the fact the object is locked. Performs required actions
0: 		to ensure that unlockEvent() work correctly.
0: 		This method does not actually  perform any locking of the
0: 		object, the locking mechanism is provided by the lock manager.
0: 		<P>
0: 		If the class supports multiple lockers of the object then this method
0: 		will be called once per locker, each with their own qualifier.
0: 		<P>
0: 		Must only be called by the lock manager. Synchronization will be handled
0: 		by the lock manager.
0: 	*/
0: 	public void lockEvent(Latch lockInfo);
0: 
0: 	/**
0: 		Return true if the requested qualifier is compatible with the already granted
0: 		qualifier.
0: 	*/
0: 	public boolean requestCompatible(Object requestedQualifier, Object grantedQualifier);
0: 
0: 	/**
0: 		Returns true if any lock request on a Lockable L in a compatibility space CS1 is compatible
0: 		with any other lock held on L in CS1.
0: 
0: 	*/
0: 	public boolean lockerAlwaysCompatible();
0: 
0: 	/**
0: 		Note that the object has been unlocked 
0: 		<P>
0: 		Must only be called by the lock manager. Synchronization will be handled
0: 		by the lock manager.
0: 	*/
0: 	public void unlockEvent(Latch lockInfo);
0: 
0: 	/**
0: 		If this lockable object wants to participate in a diagnostic virtual
0: 		lock table, then put any relavent attributes of this lock into the
0: 		attributes list (the attribute must be an immutable object).  The list
0: 		of attributes of interest to the virtual lock table can be found in
0: 		VirtualLockTable. The toString method will be called by the VirtualTable
0: 		on the attribute value for display. 
0: 		<P>
0: 		@param flag use the bits in this int to decide if the user is
0: 		interested in this kind of lockable object.  The bits are defined in
0: 		VirtualLockTable.  For instance, the user may only ask
0: 		for TABLE_AND_ROWLOCK and if this is not a table or row lock, then
0: 		don't paritipate. 
0: 		@param attributes if this decides to participate, put all relavent
0: 		attributes into the Hashtable.  The complete list of interesting
0: 		attributes is listed in VirtualLockTable.
0: 		The following attributes must be present for all participating
0: 		lockables:
0: 		VirtualLockTable.LOCKNAME,
0: 		VirtualLockTable.LOCKTYPE,
0: 		either VirtualLockTable.CONTAINERID or VirtualLockTable.CONGLOMID,
0: 		<P>
0: 		MT - this routine must be MP safe, caller will not be single threading
0: 		the lock manager.
0: 		<P>
0: 		@return true if this object has diagnostic information to add to the
0: 		virtual lock table.  If this object either does not want to participate
0: 		in the diagnostic virtual lock table or none of the attributes
0: 		requested are attributes of this lock, returns false.
0: 
0: 		@see VirtualLockTable
0: 	 */
0: 	public boolean lockAttributes(int flag, Hashtable attributes);
0: }
============================================================================