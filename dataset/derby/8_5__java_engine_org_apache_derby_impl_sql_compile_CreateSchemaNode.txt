1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.CreateSchemaNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
9:eac0369: 
1:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:4fb136d: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:50ba36b: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:50ba36b: import org.apache.derby.iapi.sql.conn.Authorizer;
1:4fb136d: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
1:eac0369: /**
1:eac0369:  * A CreateSchemaNode is the root of a QueryTree that 
1:eac0369:  * represents a CREATE SCHEMA statement.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class CreateSchemaNode extends DDLStatementNode
1:eac0369: {
1:eac0369: 	private String 	name;
1:eac0369: 	private String	aid;
1:eac0369: 	
1:eac0369: 	/**
1:3bb140c:      * Constructor for a CreateSchemaNode
1:eac0369: 	 *
1:eac0369: 	 * @param schemaName	The name of the new schema
1:eac0369: 	 * @param aid		 	The authorization id
1:3bb140c:      * @param cm            The context manager
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     CreateSchemaNode(
1:3bb140c:             String schemaName,
1:3bb140c:             String aid,
1:3bb140c:             ContextManager cm) throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** DDLStatementNode expects tables, null out
1:eac0369: 		** objectName explicitly to clarify that we
1:eac0369: 		** can't hang with schema.object specifiers.
1:eac0369: 		*/
1:3bb140c:         super(null, cm);
1:3bb140c:         this.name = schemaName;
1:3bb140c:         this.aid = aid;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
1:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return super.toString() +
1:eac0369: 				"schemaName: " + "\n" + name + "\n" +
1:eac0369: 				"authorizationId: " + "\n" + aid + "\n";
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:50ba36b: 	 * Bind this createSchemaNode. Main work is to create a StatementPermission
1:50ba36b: 	 * object to require CREATE_SCHEMA_PRIV at execution time.
1:eac0369: 	 */
1:3bb140c:     @Override
1:cc770d8: 	public void bindStatement() throws StandardException
1:eac0369: 	{
1:50ba36b: 		CompilerContext cc = getCompilerContext();
1:2d2e717: 		if (isPrivilegeCollectionRequired())
1:2d2e717: 			cc.addRequiredSchemaPriv(name, aid, Authorizer.CREATE_SCHEMA_PRIV);
1:eac0369: 
1:50ba36b: 	}
1:eac0369: 	
1:3bb140c:     String statementToString()
1:50ba36b: 	{
1:eac0369: 		return "CREATE SCHEMA";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// We inherit the generate() method from DDLStatementNode.
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create the Constant information that will drive the guts of Execution.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     public ConstantAction makeConstantAction()
1:eac0369: 	{
1:eac0369: 		return	getGenericConstantActionFactory().getCreateSchemaConstantAction(name, aid);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1: class CreateSchemaNode extends DDLStatementNode
1:      * Constructor for a CreateSchemaNode
1:      * @param cm            The context manager
1:     CreateSchemaNode(
1:             String schemaName,
1:             String aid,
1:             ContextManager cm) throws StandardException
1:         super(null, cm);
1:         this.name = schemaName;
1:         this.aid = aid;
0:         setNodeType(C_NodeTypes.CREATE_SCHEMA_NODE);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     String statementToString()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ConstantAction makeConstantAction()
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4fb136d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
commit:cc770d8
/////////////////////////////////////////////////////////////////////////
1: 	public void bindStatement() throws StandardException
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
1: 		if (isPrivilegeCollectionRequired())
1: 			cc.addRequiredSchemaPriv(name, aid, Authorizer.CREATE_SCHEMA_PRIV);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.CreateSchemaNode
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.impl.sql.execute.BaseActivation;
0: import org.apache.derby.impl.sql.execute.ColumnInfo;
1: 
0: import java.util.Properties;
1: 
1: /**
1:  * A CreateSchemaNode is the root of a QueryTree that 
1:  * represents a CREATE SCHEMA statement.
1:  *
0:  * @author jamie
1:  */
1: 
0: public class CreateSchemaNode extends DDLStatementNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private String 	name;
1: 	private String	aid;
1: 	
1: 	/**
0: 	 * Initializer for a CreateSchemaNode
1: 	 *
1: 	 * @param schemaName	The name of the new schema
1: 	 * @param aid		 	The authorization id
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void init(
0: 			Object	schemaName,
0: 			Object	aid)
0: 		throws StandardException
1: 	{
1: 		/*
1: 		** DDLStatementNode expects tables, null out
1: 		** objectName explicitly to clarify that we
1: 		** can't hang with schema.object specifiers.
1: 		*/
0: 		initAndCheck(null);	
1: 	
0: 		this.name = (String) schemaName;
0: 		this.aid = (String) aid;
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return super.toString() +
1: 				"schemaName: " + "\n" + name + "\n" +
1: 				"authorizationId: " + "\n" + aid + "\n";
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
0: 	public String statementToString()
1: 	{
1: 		return "CREATE SCHEMA";
1: 	}
1: 
1: 	// We inherit the generate() method from DDLStatementNode.
1: 
1: 	/**
1: 	 * Create the Constant information that will drive the guts of Execution.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public ConstantAction	makeConstantAction()
1: 	{
1: 		return	getGenericConstantActionFactory().getCreateSchemaConstantAction(name, aid);
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:50ba36b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
0: 
/////////////////////////////////////////////////////////////////////////
0: 	/**
1: 	 * Bind this createSchemaNode. Main work is to create a StatementPermission
1: 	 * object to require CREATE_SCHEMA_PRIV at execution time.
0: 	 */
0: 	public QueryTreeNode bind() throws StandardException
1: 	{
0: 		super.bind();
0: 
1: 		CompilerContext cc = getCompilerContext();
0: 		cc.addRequiredSchemaPriv(name, aid, Authorizer.CREATE_SCHEMA_PRIV);
0: 
0: 		return this;
1: 	}
0: 	
commit:6a5edfc
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.impl.sql.execute.BaseActivation;
0: import org.apache.derby.impl.sql.execute.ColumnInfo;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * A CreateSchemaNode is the root of a QueryTree that 
0:  * represents a CREATE SCHEMA statement.
0:  *
0:  * @author jamie
0:  */
0: 
0: public class CreateSchemaNode extends DDLStatementNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private String 	name;
0: 	private String	aid;
0: 	
0: 	/**
0: 	 * Initializer for a CreateSchemaNode
0: 	 *
0: 	 * @param schemaName	The name of the new schema
0: 	 * @param aid		 	The authorization id
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void init(
0: 			Object	schemaName,
0: 			Object	aid)
0: 		throws StandardException
0: 	{
0: 		/*
0: 		** DDLStatementNode expects tables, null out
0: 		** objectName explicitly to clarify that we
0: 		** can't hang with schema.object specifiers.
0: 		*/
0: 		initAndCheck(null);	
0: 	
0: 		this.name = (String) schemaName;
0: 		this.aid = (String) aid;
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return super.toString() +
0: 				"schemaName: " + "\n" + name + "\n" +
0: 				"authorizationId: " + "\n" + aid + "\n";
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	public String statementToString()
0: 	{
0: 		return "CREATE SCHEMA";
0: 	}
0: 
0: 	// We inherit the generate() method from DDLStatementNode.
0: 
0: 	/**
0: 	 * Create the Constant information that will drive the guts of Execution.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public ConstantAction	makeConstantAction()
0: 	{
0: 		return	getGenericConstantActionFactory().getCreateSchemaConstantAction(name, aid);
0: 	}
0: }
============================================================================