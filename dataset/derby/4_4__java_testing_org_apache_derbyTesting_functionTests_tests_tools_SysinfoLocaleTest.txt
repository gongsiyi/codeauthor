1:9a55084: /*
3:9a55084: 
1:9a55084:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest
1:9a55084: 
1:9a55084:    Licensed to the Apache Software Foundation (ASF) under one or more
1:9a55084:    contributor license agreements.  See the NOTICE file distributed with
1:9a55084:    this work for additional information regarding copyright ownership.
1:9a55084:    The ASF licenses this file to You under the Apache License, Version 2.0
1:9a55084:    (the "License"); you may not use this file except in compliance with
1:9a55084:    the License.  You may obtain a copy of the License at
1:9a55084: 
1:9a55084:       http://www.apache.org/licenses/LICENSE-2.0
1:9a55084: 
1:9a55084:    Unless required by applicable law or agreed to in writing, software
1:9a55084:    distributed under the License is distributed on an "AS IS" BASIS,
1:9a55084:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9a55084:    See the License for the specific language governing permissions and
1:9a55084:    limitations under the License.
1:9a55084: 
1:9a55084:  */
1:9a55084: 
1:9a55084: package org.apache.derbyTesting.functionTests.tests.tools;
1:9a55084: 
1:9a55084: import java.io.ByteArrayOutputStream;
1:9a55084: import java.io.PrintStream;
1:9a55084: import java.lang.reflect.Method;
1:9a55084: import java.net.URL;
1:9a55084: import java.net.URLClassLoader;
1:9a55084: import java.util.Locale;
1:9a55084: import java.util.Properties;
1:9a55084: import junit.framework.Test;
1:9a55084: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:9a55084: import org.apache.derbyTesting.junit.Derby;
1:9a55084: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:9a55084: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:9a55084: 
1:9a55084: /**
1:9a55084:  * This test verifies that <code>sysinfo</code> correctly localizes its
1:9a55084:  * messages according to the default locale and <code>derby.ui.locale</code>.
1:9a55084:  */
1:9a55084: public class SysinfoLocaleTest extends BaseTestCase {
1:9a55084: 
1:9a55084:     /** The encoding sysinfo should use for its output. */
1:9a55084:     private static final String ENCODING = "UTF-8";
1:9a55084: 
1:9a55084:     /** Default locale to run this test under. */
1:9a55084:     private final Locale defaultLocale;
1:9a55084: 
1:9a55084:     /**
1:9a55084:      * Tells whether or not this test expects sysinfo's output to be localized
1:9a55084:      * to German.
1:9a55084:      */
1:9a55084:     private final boolean localizedToGerman;
1:9a55084: 
1:4aa7869:     /** Name of the test. */
1:4aa7869:     private final String name;
1:4aa7869: 
1:9a55084:     /** The default locale before this test started. */
1:9a55084:     private Locale savedLocale;
1:9a55084: 
1:9a55084:     /**
1:9a55084:      * Create a test.
1:9a55084:      *
1:9a55084:      * @param defaultLocale the default locale for this test
1:9a55084:      * @param german true if output is expected to be localized to German
1:4aa7869:      * @param info extra information to append to the test name (for debugging)
1:9a55084:      */
1:4aa7869:     private SysinfoLocaleTest(Locale defaultLocale, boolean german,
1:4aa7869:                               String info) {
1:9a55084:         super("testSysinfoLocale");
1:9a55084:         this.defaultLocale = defaultLocale;
1:9a55084:         this.localizedToGerman = german;
1:4aa7869:         this.name = super.getName() + ":" + info;
1:4aa7869:     }
1:4aa7869: 
1:4aa7869:     /**
1:4aa7869:      * Returns the name of the test, which includes the default locale and
1:4aa7869:      * derby.ui.locale to aid debugging.
1:4aa7869:      *
1:4aa7869:      * @return name of the test
1:4aa7869:      */
1:4aa7869:     public String getName() {
1:4aa7869:         return name;
2:9a55084:     }
1:9a55084: 
1:9a55084:     /**
1:9a55084:      * Set up the test environment.
1:9a55084:      */
1:9a55084:     protected void setUp() {
1:9a55084:         savedLocale = Locale.getDefault();
1:9a55084:         Locale.setDefault(defaultLocale);
1:9a55084:     }
1:9a55084: 
1:9a55084:     /**
1:9a55084:      * Tear down the test environment.
1:9a55084:      */
1:9a55084:     protected void tearDown() throws Exception {
1:9a55084:         Locale.setDefault(savedLocale);
1:9a55084:         savedLocale = null;
1:9a55084:         super.tearDown();
1:9a55084:     }
1:9a55084: 
1:9a55084:     /**
1:9a55084:      * Create a suite of tests.
1:9a55084:      *
1:9a55084:      * @return a test suite with different combinations of
1:9a55084:      * <code>derby.ui.locale</code> and default locale
1:9a55084:      */
1:9a55084:     public static Test suite() {
1:9a55084:         if (!Derby.hasTools()) {
1:1ae02c9:             return new BaseTestSuite("empty: no tools support");
1:9a55084:         }
1:9a55084: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("SysinfoLocaleTest");
1:9a55084: 
1:9a55084:         // Create test combinations. Messages should be localized to the
1:9a55084:         // locale specified by derby.ui.locale, if it's set. Otherwise, the
1:9a55084:         // JVM's default locale should be used.
1:9a55084:         suite.addTest(createTest(Locale.ITALY, null, false));
1:9a55084:         suite.addTest(createTest(Locale.ITALY, "it_IT", false));
1:9a55084:         suite.addTest(createTest(Locale.ITALY, "de_DE", true));
1:9a55084:         suite.addTest(createTest(Locale.GERMANY, null, true));
1:9a55084:         suite.addTest(createTest(Locale.GERMANY, "it_IT", false));
1:9a55084:         suite.addTest(createTest(Locale.GERMANY, "de_DE", true));
1:9a55084: 
1:9a55084:         // This test creates a class loader. We don't want to grant that
1:9a55084:         // permission to derbyTesting.jar since that means none of the tests
1:9a55084:         // will notice if one of the product jars misses a privileged block
1:9a55084:         // around the creation of a class loader.
1:9a55084:         return SecurityManagerSetup.noSecurityManager(suite);
1:9a55084:     }
1:9a55084: 
1:9a55084:     /**
1:9a55084:      * Create a single test case.
1:9a55084:      *
1:9a55084:      * @param loc default locale for the test case
1:9a55084:      * @param ui <code>derby.ui.locale</code> for the test case
1:9a55084:      * @param german whether output is expected to be German
1:9a55084:      */
1:9a55084:     private static Test createTest(Locale loc, String ui, boolean german) {
1:9a55084:         Properties prop = new Properties();
1:9a55084:         if (ui != null) {
1:9a55084:             prop.setProperty("derby.ui.locale", ui);
1:9a55084:         }
1:9a55084:         // always set the encoding so that we can reliably read the output
1:9a55084:         prop.setProperty("derby.ui.codeset", ENCODING);
1:9a55084: 
1:4aa7869:         String info = "defaultLocale=" + loc + ",uiLocale=" + ui;
1:4aa7869:         Test test = new SysinfoLocaleTest(loc, german, info);
1:9a55084:         return new SystemPropertyTestSetup(test, prop);
1:9a55084:     }
1:9a55084: 
1:9a55084:     /**
1:9a55084:      * Run a sysinfo class that is loaded in a separate class loader. A
1:9a55084:      * separate class loader is required in order to force sysinfo to re-read
1:9a55084:      * <code>derby.ui.locale</code> (happens when the class is loaded).
1:9a55084:      */
1:9a55084:     private static void runSysinfo() throws Exception {
1:9a55084:         final String className = "org.apache.derby.tools.sysinfo";
1:676af8f:         URL sysinfoURL = SecurityManagerSetup.getURL(className);
1:9902875:         URL emmaURL = getEmmaJar();
1:676af8f:         URL[] urls = null;
1:676af8f:         if(emmaURL != null) {
1:676af8f:             urls = new URL[] { sysinfoURL, emmaURL };
1:676af8f:         } else {
1:676af8f:             urls = new URL[] { sysinfoURL };
1:9a55084:         }
1:cd36286: 
1:cd36286:         // Create a new class loader that loads the Derby classes afresh.
1:cd36286:         // Its parent (platformLoader) is a class loader that is able to
1:cd36286:         // load the JDBC classes and other core classes needed by the Derby
1:cd36286:         // classes.
1:cd36286:         ClassLoader platformLoader = java.sql.Connection.class.getClassLoader();
1:cd36286:         URLClassLoader loader = new URLClassLoader(urls, platformLoader);
1:9a55084: 
1:c393694:         Class<?> copy = Class.forName(className, true, loader);
1:9a55084:         Method main = copy.getMethod("main", new Class[] { String[].class });
1:9a55084:         main.invoke(null, new Object[] { new String[0] });
1:9a55084:     }
1:9a55084: 
1:9a55084:     /**
1:9a55084:      * Run sysinfo and return its output as a string.
1:9a55084:      *
1:9a55084:      * @return output from sysinfo
1:9a55084:      */
1:9a55084:     private static String getSysinfoOutput() throws Exception {
1:9a55084:         final PrintStream savedSystemOut = System.out;
1:9a55084:         final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
1:9a55084: 
1:9a55084:         try {
1:9a55084:             System.setOut(new PrintStream(bytes, true, ENCODING));
1:9a55084:             runSysinfo();
1:9a55084:         } finally {
1:9a55084:             System.setOut(savedSystemOut);
1:9a55084:         }
1:9a55084: 
1:9a55084:         return bytes.toString(ENCODING);
1:9a55084:     }
1:9a55084: 
1:9a55084:     /**
1:9a55084:      * Some German strings that are expected to be in sysinfo's output when
1:9a55084:      * localized to German.
1:9a55084:      */
1:9a55084:     private static final String[] GERMAN_STRINGS = {
1:be4b130:         "BS-Name",
1:be4b130:         "Java-Benutzername",
1:9a55084:         "Derby-Informationen",
1:be4b130:         "Informationen zum Gebietsschema",
2:9a55084:     };
1:9a55084: 
1:9a55084:     /**
1:9a55084:      * Some Italian strings that are expected to be in sysinfo's output when
1:9a55084:      * localized to Italian.
1:9a55084:      */
1:9a55084:     private static final String[] ITALIAN_STRINGS = {
1:9a55084:         "Nome SO",
1:9a55084:         "Home utente Java",
1:9a55084:         "Informazioni su Derby",
1:be4b130:         "Informazioni sulle impostazioni nazionali",
1:9a55084:     };
1:9a55084: 
1:9a55084:     /**
1:4aa7869:      * Checks that all the expected substrings are part of the output from
1:4aa7869:      * sysinfo. Fails if one or more of the substrings are not found.
1:4aa7869:      *
1:4aa7869:      * @param expectedSubstrings substrings in the expected locale
1:4aa7869:      * @param output the output from sysinfo
1:4aa7869:      */
1:4aa7869:     private void assertContains(String[] expectedSubstrings, String output) {
1:4aa7869:         for (int i = 0; i < expectedSubstrings.length; i++) {
1:4aa7869:             String s = expectedSubstrings[i];
1:4aa7869:             if (output.indexOf(s) == -1) {
1:4aa7869:                 fail("Substring '" + s + "' not found in output: " + output);
1:4aa7869:             }
1:4aa7869:         }
1:4aa7869:     }
1:4aa7869: 
1:4aa7869:     /**
1:9a55084:      * Test method which checks that the output from sysinfo is correctly
1:9a55084:      * localized.
1:9a55084:      */
1:9a55084:     public void testSysinfoLocale() throws Exception {
1:9a55084:         String output = getSysinfoOutput();
1:4aa7869:         String[] expectedSubstrings =
1:4aa7869:                 localizedToGerman ? GERMAN_STRINGS : ITALIAN_STRINGS;
1:4aa7869:         assertContains(expectedSubstrings, output);
1:9a55084:     }
1:9a55084: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:cd36286
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Create a new class loader that loads the Derby classes afresh.
1:         // Its parent (platformLoader) is a class loader that is able to
1:         // load the JDBC classes and other core classes needed by the Derby
1:         // classes.
1:         ClassLoader platformLoader = java.sql.Connection.class.getClassLoader();
1:         URLClassLoader loader = new URLClassLoader(urls, platformLoader);
commit:c393694
/////////////////////////////////////////////////////////////////////////
1:         Class<?> copy = Class.forName(className, true, loader);
commit:9902875
/////////////////////////////////////////////////////////////////////////
1:         URL emmaURL = getEmmaJar();
commit:4aa7869
/////////////////////////////////////////////////////////////////////////
1:     /** Name of the test. */
1:     private final String name;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @param info extra information to append to the test name (for debugging)
1:     private SysinfoLocaleTest(Locale defaultLocale, boolean german,
1:                               String info) {
1:         this.name = super.getName() + ":" + info;
1:     }
1: 
1:     /**
1:      * Returns the name of the test, which includes the default locale and
1:      * derby.ui.locale to aid debugging.
1:      *
1:      * @return name of the test
1:      */
1:     public String getName() {
1:         return name;
/////////////////////////////////////////////////////////////////////////
1:         String info = "defaultLocale=" + loc + ",uiLocale=" + ui;
1:         Test test = new SysinfoLocaleTest(loc, german, info);
/////////////////////////////////////////////////////////////////////////
1:      * Checks that all the expected substrings are part of the output from
1:      * sysinfo. Fails if one or more of the substrings are not found.
1:      *
1:      * @param expectedSubstrings substrings in the expected locale
1:      * @param output the output from sysinfo
1:      */
1:     private void assertContains(String[] expectedSubstrings, String output) {
1:         for (int i = 0; i < expectedSubstrings.length; i++) {
1:             String s = expectedSubstrings[i];
1:             if (output.indexOf(s) == -1) {
1:                 fail("Substring '" + s + "' not found in output: " + output);
1:             }
1:         }
1:     }
1: 
1:     /**
1:         String[] expectedSubstrings =
1:                 localizedToGerman ? GERMAN_STRINGS : ITALIAN_STRINGS;
1:         assertContains(expectedSubstrings, output);
commit:9a55084
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.tools;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.PrintStream;
1: import java.lang.reflect.Method;
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: import java.util.Locale;
1: import java.util.Properties;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.Derby;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: 
1: /**
1:  * This test verifies that <code>sysinfo</code> correctly localizes its
1:  * messages according to the default locale and <code>derby.ui.locale</code>.
1:  */
1: public class SysinfoLocaleTest extends BaseTestCase {
1: 
1:     /** The encoding sysinfo should use for its output. */
1:     private static final String ENCODING = "UTF-8";
1: 
1:     /** Default locale to run this test under. */
1:     private final Locale defaultLocale;
1: 
1:     /**
1:      * Tells whether or not this test expects sysinfo's output to be localized
1:      * to German.
1:      */
1:     private final boolean localizedToGerman;
1: 
1:     /** The default locale before this test started. */
1:     private Locale savedLocale;
1: 
1:     /**
1:      * Create a test.
1:      *
1:      * @param defaultLocale the default locale for this test
1:      * @param german true if output is expected to be localized to German
1:      */
0:     private SysinfoLocaleTest(Locale defaultLocale, boolean german) {
1:         super("testSysinfoLocale");
1:         this.defaultLocale = defaultLocale;
1:         this.localizedToGerman = german;
1:     }
1: 
1:     /**
1:      * Set up the test environment.
1:      */
1:     protected void setUp() {
1:         savedLocale = Locale.getDefault();
1:         Locale.setDefault(defaultLocale);
1:     }
1: 
1:     /**
1:      * Tear down the test environment.
1:      */
1:     protected void tearDown() throws Exception {
1:         Locale.setDefault(savedLocale);
1:         savedLocale = null;
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Create a suite of tests.
1:      *
1:      * @return a test suite with different combinations of
1:      * <code>derby.ui.locale</code> and default locale
1:      */
1:     public static Test suite() {
1:         if (!Derby.hasTools()) {
0:             return new TestSuite("empty: no tools support");
1:         }
1: 
0:         TestSuite suite = new TestSuite("SysinfoLocaleTest");
1: 
1:         // Create test combinations. Messages should be localized to the
1:         // locale specified by derby.ui.locale, if it's set. Otherwise, the
1:         // JVM's default locale should be used.
1:         suite.addTest(createTest(Locale.ITALY, null, false));
1:         suite.addTest(createTest(Locale.ITALY, "it_IT", false));
1:         suite.addTest(createTest(Locale.ITALY, "de_DE", true));
1:         suite.addTest(createTest(Locale.GERMANY, null, true));
1:         suite.addTest(createTest(Locale.GERMANY, "it_IT", false));
1:         suite.addTest(createTest(Locale.GERMANY, "de_DE", true));
1: 
1:         // This test creates a class loader. We don't want to grant that
1:         // permission to derbyTesting.jar since that means none of the tests
1:         // will notice if one of the product jars misses a privileged block
1:         // around the creation of a class loader.
1:         return SecurityManagerSetup.noSecurityManager(suite);
1:     }
1: 
1:     /**
1:      * Create a single test case.
1:      *
1:      * @param loc default locale for the test case
1:      * @param ui <code>derby.ui.locale</code> for the test case
1:      * @param german whether output is expected to be German
1:      */
1:     private static Test createTest(Locale loc, String ui, boolean german) {
1:         Properties prop = new Properties();
1:         if (ui != null) {
1:             prop.setProperty("derby.ui.locale", ui);
1:         }
1:         // always set the encoding so that we can reliably read the output
1:         prop.setProperty("derby.ui.codeset", ENCODING);
1: 
0:         Test test = new SysinfoLocaleTest(loc, german);
1:         return new SystemPropertyTestSetup(test, prop);
1:     }
1: 
1:     /**
1:      * Run a sysinfo class that is loaded in a separate class loader. A
1:      * separate class loader is required in order to force sysinfo to re-read
1:      * <code>derby.ui.locale</code> (happens when the class is loaded).
1:      */
1:     private static void runSysinfo() throws Exception {
1:         final String className = "org.apache.derby.tools.sysinfo";
0:         URL[] urls = {
0:             Class.forName(className).getProtectionDomain().
0:                     getCodeSource().getLocation()
1:         };
0:         URLClassLoader loader = new URLClassLoader(urls, null);
1: 
0:         Class copy = Class.forName(className, true, loader);
1:         Method main = copy.getMethod("main", new Class[] { String[].class });
1:         main.invoke(null, new Object[] { new String[0] });
1:     }
1: 
1:     /**
1:      * Run sysinfo and return its output as a string.
1:      *
1:      * @return output from sysinfo
1:      */
1:     private static String getSysinfoOutput() throws Exception {
1:         final PrintStream savedSystemOut = System.out;
1:         final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
1: 
1:         try {
1:             System.setOut(new PrintStream(bytes, true, ENCODING));
1:             runSysinfo();
1:         } finally {
1:             System.setOut(savedSystemOut);
1:         }
1: 
1:         return bytes.toString(ENCODING);
1:     }
1: 
1:     /**
1:      * Some German strings that are expected to be in sysinfo's output when
1:      * localized to German.
1:      */
1:     private static final String[] GERMAN_STRINGS = {
0:         "Name des Betriebssystems",
0:         "Java-Benutzerausgangsverzeichnis",
1:         "Derby-Informationen",
0:         "Informationen zur L\u00E4ndereinstellung",
1:     };
1: 
1:     /**
1:      * Some Italian strings that are expected to be in sysinfo's output when
1:      * localized to Italian.
1:      */
1:     private static final String[] ITALIAN_STRINGS = {
1:         "Nome SO",
1:         "Home utente Java",
1:         "Informazioni su Derby",
0:         "Informazioni sulla locale",
1:     };
1: 
1:     /**
1:      * Test method which checks that the output from sysinfo is correctly
1:      * localized.
1:      */
1:     public void testSysinfoLocale() throws Exception {
1:         String output = getSysinfoOutput();
1: 
0:         for (int i = 0; i < GERMAN_STRINGS.length; i++) {
0:             assertEquals(localizedToGerman,
0:                          output.indexOf(GERMAN_STRINGS[i]) != -1);
1:         }
1: 
0:         for (int i = 0; i < ITALIAN_STRINGS.length; i++) {
0:             assertEquals(localizedToGerman,
0:                          output.indexOf(ITALIAN_STRINGS[i]) == -1);
1:         }
1:     }
1: }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite("empty: no tools support");
1:         BaseTestSuite suite = new BaseTestSuite("SysinfoLocaleTest");
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:be4b130
/////////////////////////////////////////////////////////////////////////
1:         "BS-Name",
1:         "Java-Benutzername",
1:         "Informationen zum Gebietsschema",
/////////////////////////////////////////////////////////////////////////
1:         "Informazioni sulle impostazioni nazionali",
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:676af8f
/////////////////////////////////////////////////////////////////////////
1:         URL sysinfoURL = SecurityManagerSetup.getURL(className);
0:         URL emmaURL = SecurityManagerSetup.getURL("com.vladium.emma.EMMAException");
1:         URL[] urls = null;
1:         if(emmaURL != null) {
1:             urls = new URL[] { sysinfoURL, emmaURL };
1:         } else {
1:             urls = new URL[] { sysinfoURL };
0:         }
============================================================================