1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.services.bytecode.BCMethodDescriptor
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.bytecode;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A method descriptor. Ie. something that describes the
1:eac0369: 	type of a method, parameter types and return types.
1:eac0369: 	It is not an instance of a method.
1:eac0369: 	<BR>
1:eac0369: 	This has no generated class specific state.
1:eac0369:  */
1:eac0369: class BCMethodDescriptor {
1:eac0369: 
1:eac0369: 	static final String[] EMPTY = new String[0];
1:eac0369: 
1:eac0369: 	private final String[] vmParameterTypes;
1:eac0369: 	private final String vmReturnType;
1:eac0369: 
1:eac0369: 	private final String vmDescriptor;
1:eac0369: 
1:eac0369: 	 BCMethodDescriptor(String[] vmParameterTypes, String vmReturnType, BCJava factory) {
1:eac0369: 
1:eac0369: 		this.vmParameterTypes = vmParameterTypes;
1:eac0369: 		this.vmReturnType = vmReturnType;
1:eac0369: 
1:eac0369: 		vmDescriptor = factory.vmType(this);
1:eac0369: 	}
1:eac0369: /*
1:eac0369: 	static String get(Expression[] vmParameters, String vmReturnType, BCJava factory) {
1:eac0369: 
1:eac0369: 		int count = vmParameters.length;
1:eac0369: 		String[] vmParameterTypes;
1:eac0369: 		if (count == 0) {
1:eac0369: 			vmParameterTypes = BCMethodDescriptor.EMPTY;
1:eac0369: 		} else {
1:eac0369: 			vmParameterTypes = new String[count];
1:eac0369: 			for (int i =0; i < count; i++) {
1:eac0369: 				vmParameterTypes[i] = ((BCExpr) vmParameters[i]).vmType();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return new BCMethodDescriptor(vmParameterTypes, vmReturnType, factory).toString();
1:eac0369: 	}
1:eac0369: */
1:eac0369: 	static String get(String[] vmParameterTypes, String vmReturnType, BCJava factory) {
1:eac0369: 
1:eac0369: 		return new BCMethodDescriptor(vmParameterTypes, vmReturnType, factory).toString();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * builds the JVM method descriptor for this method as
1:eac0369: 	 * defined in JVM Spec 4.3.3, Method Descriptors.
1:eac0369: 	 */
1:eac0369: 	String buildMethodDescriptor() {
1:eac0369: 
1:eac0369: 		int paramCount = vmParameterTypes.length;
1:eac0369: 
1:eac0369: 		int approxLength = (30 * (paramCount + 1));
1:eac0369: 
1:eac0369: 		StringBuffer methDesc = new StringBuffer(approxLength);
1:eac0369: 
1:eac0369: 		methDesc.append(VMDescriptor.C_METHOD);
1:eac0369: 
1:eac0369: 		for (int i = 0; i < paramCount; i++) {
1:eac0369: 			methDesc.append(vmParameterTypes[i]);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		methDesc.append(VMDescriptor.C_ENDMETHOD);
1:eac0369: 		methDesc.append(vmReturnType);
1:eac0369: 
1:eac0369: 		return methDesc.toString();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString() {
1:eac0369: 		return vmDescriptor;
1:eac0369: 	}
1:eac0369: 		
1:eac0369: 	
1:eac0369: 	public int hashCode() {
1:eac0369: 		return vmParameterTypes.length | (vmReturnType.hashCode() & 0xFFFFFF00);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean equals(Object other) {
1:eac0369: 		if (!(other instanceof BCMethodDescriptor))
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		BCMethodDescriptor o = (BCMethodDescriptor) other;
1:eac0369: 
1:eac0369: 
1:eac0369: 		if (o.vmParameterTypes.length != vmParameterTypes.length)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		for (int i = 0; i < vmParameterTypes.length; i++) {
1:eac0369: 			if (!vmParameterTypes[i].equals(o.vmParameterTypes[i]))
1:eac0369: 				return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return vmReturnType.equals(o.vmReturnType);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.bytecode.BCMethodDescriptor
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.bytecode;
1: 
1: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1: 
1: /**
1: 	A method descriptor. Ie. something that describes the
1: 	type of a method, parameter types and return types.
1: 	It is not an instance of a method.
1: 	<BR>
1: 	This has no generated class specific state.
1:  */
1: class BCMethodDescriptor {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	static final String[] EMPTY = new String[0];
1: 
1: 	private final String[] vmParameterTypes;
1: 	private final String vmReturnType;
1: 
1: 	private final String vmDescriptor;
1: 
1: 	 BCMethodDescriptor(String[] vmParameterTypes, String vmReturnType, BCJava factory) {
1: 
1: 		this.vmParameterTypes = vmParameterTypes;
1: 		this.vmReturnType = vmReturnType;
1: 
1: 		vmDescriptor = factory.vmType(this);
1: 	}
1: /*
1: 	static String get(Expression[] vmParameters, String vmReturnType, BCJava factory) {
1: 
1: 		int count = vmParameters.length;
1: 		String[] vmParameterTypes;
1: 		if (count == 0) {
1: 			vmParameterTypes = BCMethodDescriptor.EMPTY;
1: 		} else {
1: 			vmParameterTypes = new String[count];
1: 			for (int i =0; i < count; i++) {
1: 				vmParameterTypes[i] = ((BCExpr) vmParameters[i]).vmType();
1: 			}
1: 		}
1: 
1: 		return new BCMethodDescriptor(vmParameterTypes, vmReturnType, factory).toString();
1: 	}
1: */
1: 	static String get(String[] vmParameterTypes, String vmReturnType, BCJava factory) {
1: 
1: 		return new BCMethodDescriptor(vmParameterTypes, vmReturnType, factory).toString();
1: 	}
1: 
1: 	/**
1: 	 * builds the JVM method descriptor for this method as
1: 	 * defined in JVM Spec 4.3.3, Method Descriptors.
1: 	 */
1: 	String buildMethodDescriptor() {
1: 
1: 		int paramCount = vmParameterTypes.length;
1: 
1: 		int approxLength = (30 * (paramCount + 1));
1: 
1: 		StringBuffer methDesc = new StringBuffer(approxLength);
1: 
1: 		methDesc.append(VMDescriptor.C_METHOD);
1: 
1: 		for (int i = 0; i < paramCount; i++) {
1: 			methDesc.append(vmParameterTypes[i]);
1: 		}
1: 
1: 		methDesc.append(VMDescriptor.C_ENDMETHOD);
1: 		methDesc.append(vmReturnType);
1: 
1: 		return methDesc.toString();
1: 	}
1: 
1: 	public String toString() {
1: 		return vmDescriptor;
1: 	}
1: 		
1: 	
1: 	public int hashCode() {
1: 		return vmParameterTypes.length | (vmReturnType.hashCode() & 0xFFFFFF00);
1: 	}
1: 
1: 	public boolean equals(Object other) {
1: 		if (!(other instanceof BCMethodDescriptor))
1: 			return false;
1: 
1: 		BCMethodDescriptor o = (BCMethodDescriptor) other;
1: 
1: 
1: 		if (o.vmParameterTypes.length != vmParameterTypes.length)
1: 			return false;
1: 
1: 		for (int i = 0; i < vmParameterTypes.length; i++) {
1: 			if (!vmParameterTypes[i].equals(o.vmParameterTypes[i]))
1: 				return false;
1: 		}
1: 
1: 		return vmReturnType.equals(o.vmReturnType);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.bytecode;
0: 
0: import org.apache.derby.iapi.services.classfile.VMDescriptor;
0: 
0: /**
0: 	A method descriptor. Ie. something that describes the
0: 	type of a method, parameter types and return types.
0: 	It is not an instance of a method.
0: 	<BR>
0: 	This has no generated class specific state.
0:  */
0: class BCMethodDescriptor {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	static final String[] EMPTY = new String[0];
0: 
0: 	private final String[] vmParameterTypes;
0: 	private final String vmReturnType;
0: 
0: 	private final String vmDescriptor;
0: 
0: 	 BCMethodDescriptor(String[] vmParameterTypes, String vmReturnType, BCJava factory) {
0: 
0: 		this.vmParameterTypes = vmParameterTypes;
0: 		this.vmReturnType = vmReturnType;
0: 
0: 		vmDescriptor = factory.vmType(this);
0: 	}
0: /*
0: 	static String get(Expression[] vmParameters, String vmReturnType, BCJava factory) {
0: 
0: 		int count = vmParameters.length;
0: 		String[] vmParameterTypes;
0: 		if (count == 0) {
0: 			vmParameterTypes = BCMethodDescriptor.EMPTY;
0: 		} else {
0: 			vmParameterTypes = new String[count];
0: 			for (int i =0; i < count; i++) {
0: 				vmParameterTypes[i] = ((BCExpr) vmParameters[i]).vmType();
0: 			}
0: 		}
0: 
0: 		return new BCMethodDescriptor(vmParameterTypes, vmReturnType, factory).toString();
0: 	}
0: */
0: 	static String get(String[] vmParameterTypes, String vmReturnType, BCJava factory) {
0: 
0: 		return new BCMethodDescriptor(vmParameterTypes, vmReturnType, factory).toString();
0: 	}
0: 
0: 	/**
0: 	 * builds the JVM method descriptor for this method as
0: 	 * defined in JVM Spec 4.3.3, Method Descriptors.
0: 	 */
0: 	String buildMethodDescriptor() {
0: 
0: 		int paramCount = vmParameterTypes.length;
0: 
0: 		int approxLength = (30 * (paramCount + 1));
0: 
0: 		StringBuffer methDesc = new StringBuffer(approxLength);
0: 
0: 		methDesc.append(VMDescriptor.C_METHOD);
0: 
0: 		for (int i = 0; i < paramCount; i++) {
0: 			methDesc.append(vmParameterTypes[i]);
0: 		}
0: 
0: 		methDesc.append(VMDescriptor.C_ENDMETHOD);
0: 		methDesc.append(vmReturnType);
0: 
0: 		return methDesc.toString();
0: 	}
0: 
0: 	public String toString() {
0: 		return vmDescriptor;
0: 	}
0: 		
0: 	
0: 	public int hashCode() {
0: 		return vmParameterTypes.length | (vmReturnType.hashCode() & 0xFFFFFF00);
0: 	}
0: 
0: 	public boolean equals(Object other) {
0: 		if (!(other instanceof BCMethodDescriptor))
0: 			return false;
0: 
0: 		BCMethodDescriptor o = (BCMethodDescriptor) other;
0: 
0: 
0: 		if (o.vmParameterTypes.length != vmParameterTypes.length)
0: 			return false;
0: 
0: 		for (int i = 0; i < vmParameterTypes.length; i++) {
0: 			if (!vmParameterTypes[i].equals(o.vmParameterTypes[i]))
0: 				return false;
0: 		}
0: 
0: 		return vmReturnType.equals(o.vmReturnType);
0: 	}
0: }
============================================================================