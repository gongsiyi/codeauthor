1:c57876e: /*
6:c57876e: 
1:2c50eb3:    Derby - Class org.apache.derby.impl.sql.compile.OptimizerTracer
1:c57876e: 
1:c57876e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c57876e:    contributor license agreements.  See the NOTICE file distributed with
1:c57876e:    this work for additional information regarding copyright ownership.
1:c57876e:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c57876e:    (the "License"); you may not use this file except in compliance with
1:c57876e:    the License.  You may obtain a copy of the License at
1:c57876e: 
1:c57876e:       http://www.apache.org/licenses/LICENSE-2.0
1:c57876e: 
1:c57876e:    Unless required by applicable law or agreed to in writing, software
1:c57876e:    distributed under the License is distributed on an "AS IS" BASIS,
1:c57876e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c57876e:    See the License for the specific language governing permissions and
1:c57876e:    limitations under the License.
1:c57876e: 
1:c57876e:  */
1:c57876e: 
1:2c50eb3: package org.apache.derby.impl.sql.compile;
1:c57876e: 
1:c670aa4: import java.io.File;
1:23e89eb: import java.io.IOException;
1:049f993: import java.io.PrintWriter;
1:23e89eb: import java.security.AccessController;
1:23e89eb: import java.security.PrivilegedAction;
1:c670aa4: import java.security.PrivilegedExceptionAction;
1:c57876e: import java.sql.SQLException;
1:c57876e: import org.apache.derby.iapi.db.OptimizerTrace;
1:c670aa4: import org.apache.derby.iapi.error.PublicAPI;
1:c670aa4: import org.apache.derby.iapi.error.StandardException;
1:2c50eb3: import org.apache.derby.iapi.reference.SQLState;
1:a0dbbd7: import org.apache.derby.iapi.services.context.Context;
1:85e98cb: import org.apache.derby.iapi.services.context.ContextService;
1:2c50eb3: import org.apache.derby.iapi.services.i18n.MessageService;
1:85e98cb: import org.apache.derby.iapi.services.loader.ClassFactory;
1:63ecb28: import org.apache.derby.iapi.services.loader.ClassFactoryContext;
1:049f993: import org.apache.derby.iapi.sql.compile.OptTrace;
1:c57876e: import org.apache.derby.iapi.sql.dictionary.OptionalTool;
1:85e98cb: 
1:c57876e: /**
1:c57876e:  * <p>
1:2c50eb3:  * OptionalTool for tracing the Optimizer.
1:c57876e:  * </p>
1:c57876e:  */
1:c57876e: public	class   OptimizerTracer  implements OptionalTool
1:049f993: {
1:c57876e:     ////////////////////////////////////////////////////////////////////////
1:c57876e:     //
1:c57876e:     //	CONSTANTS
1:c57876e:     //
1:c57876e:     ////////////////////////////////////////////////////////////////////////
1:f96fbeb: 
1:c57876e:     ////////////////////////////////////////////////////////////////////////
1:c57876e:     //
1:c57876e:     //	STATE
1:c57876e:     //
1:c57876e:     ////////////////////////////////////////////////////////////////////////
1:c57876e: 
1:c57876e:     ////////////////////////////////////////////////////////////////////////
1:c57876e:     //
1:c57876e:     //	CONSTRUCTOR
1:c57876e:     //
1:c57876e:     ////////////////////////////////////////////////////////////////////////
1:c57876e: 
1:c57876e:     /** 0-arg constructor required by the OptionalTool contract */
1:c57876e:     public  OptimizerTracer() {}
1:c57876e: 
1:c57876e:     ///////////////////////////////////////////////////////////////////////////////////
1:c57876e:     //
1:c57876e:     // OptionalTool BEHAVIOR
1:c57876e:     //
1:c57876e:     ///////////////////////////////////////////////////////////////////////////////////
1:c57876e: 
1:c57876e:     /**
1:c57876e:      * <p>
1:85e98cb:      * Turns on optimizer tracing. May take optional parameters:
1:c57876e:      * </p>
1:85e98cb:      *
1:85e98cb:      * <ul>
1:b6cc9d7:      * <li>xml - If the first arg is the "xml" literal, then trace output will be
1:b6cc9d7:      * formatted as xml.</li>
1:85e98cb:      * <li>custom, $class - If the first arg is the "custom" literal, then the next arg must be
1:85e98cb:      * the name of a class which implements org.apache.derby.iapi.sql.compile.OptTrace
1:85e98cb:      * and which has a 0-arg constructor. The 0-arg constructor is called and the resulting
1:85e98cb:      * OptTrace object is plugged in to trace the optimizer.</li>
1:85e98cb:      * </ul>
1:c57876e:      */
1:c57876e:     public  void    loadTool( String... configurationParameters )
1:c57876e:         throws SQLException
1:85e98cb:     {
1:85e98cb:         OptTrace    tracer;
1:85e98cb: 
1:85e98cb:         if ( (configurationParameters == null) || (configurationParameters.length == 0) )
1:85e98cb:         {
1:85e98cb:             tracer = new DefaultOptTrace();
1:85e98cb:         }
1:b6cc9d7:         else if ( "xml".equals( configurationParameters[ 0 ] ) )
1:b6cc9d7:         {
1:b6cc9d7:             try {
1:b6cc9d7:                 tracer = new XMLOptTrace();
1:b6cc9d7:             }
1:b6cc9d7:             catch (Throwable t) { throw wrap( t ); }
1:b6cc9d7:         }
1:85e98cb:         else if ( "custom".equals( configurationParameters[ 0 ] ) )
1:23e89eb:         {
1:85e98cb:             if ( configurationParameters.length != 2 )
1:2c50eb3:             { throw wrap( MessageService.getTextMessage( SQLState.LANG_BAD_OPTIONAL_TOOL_ARGS ) ); }
1:85e98cb: 
1:85e98cb:             String  customOptTraceName = configurationParameters[ 1 ];
1:85e98cb: 
1:85e98cb:             try {
1:a0dbbd7:                 ClassFactoryContext cfc = (ClassFactoryContext) getContext( ClassFactoryContext.CONTEXT_ID );
1:63ecb28:                 ClassFactory    classFactory = cfc.getClassFactory();
1:85e98cb: 
1:4469400:                 Class<?> clazz = classFactory.loadApplicationClass( customOptTraceName );
1:4469400:                 tracer = (OptTrace) clazz.getConstructor().newInstance();
1:85e98cb:             }
1:85e98cb:             catch (InstantiationException cnfe) { throw cantInstantiate( customOptTraceName ); }
1:85e98cb:             catch (ClassNotFoundException cnfe) { throw cantInstantiate( customOptTraceName ); }
1:85e98cb:             catch (IllegalAccessException cnfe) { throw cantInstantiate( customOptTraceName ); }
1:4469400:             catch (NoSuchMethodException cnfe) { throw cantInstantiate( customOptTraceName ); }
1:4469400:             catch (java.lang.reflect.InvocationTargetException cnfe) { throw cantInstantiate( customOptTraceName ); }
1:85e98cb:             catch (Throwable t) { throw wrap( t ); }
1:85e98cb:         }
1:2c50eb3:         else { throw wrap( MessageService.getTextMessage( SQLState.LANG_BAD_OPTIONAL_TOOL_ARGS ) ); }
1:85e98cb:                      
1:85e98cb:         OptimizerTrace.setOptimizerTracer( tracer );
1:85e98cb:     }
1:85e98cb:     private SQLException    cantInstantiate( String className )
1:85e98cb:     {
1:2c50eb3:         return wrap( MessageService.getTextMessage( SQLState.LANG_CANT_INSTANTIATE_CLASS, className ) );
1:049f993:     }
1:f96fbeb: 
1:c57876e:     /**
1:c57876e:      * <p>
1:049f993:      * Print the optimizer trace and turn off tracing. Takes optional parameters:
1:c57876e:      * </p>
1:f96fbeb:      *
1:f96fbeb:      * <ul>
1:f96fbeb:      * <li><b>fileName</b> - Where to write the optimizer trace. If omitted, the trace is written to System.out.</li>
1:f96fbeb:      * </ul>
1:c57876e:      */
1:23e89eb:     public  void    unloadTool( final String... configurationParameters )
1:c57876e:         throws SQLException
1:23e89eb:     {
1:23e89eb:         try {
1:23e89eb:             final   OptTrace    tracer = OptimizerTrace.getOptimizerTracer();
1:23e89eb: 
1:d08ab9b:             boolean     needsClosing = false;
1:d08ab9b:             PrintWriter pw;
1:d08ab9b:             
1:d08ab9b:             if (
1:d08ab9b:                 (configurationParameters != null) &&
1:d08ab9b:                 (configurationParameters.length > 0)
1:d08ab9b:                 )
1:d08ab9b:             {
1:d08ab9b:                 pw = AccessController.doPrivileged
1:d08ab9b:                     (
1:c670aa4:                      new PrivilegedExceptionAction<PrintWriter>()
1:d08ab9b:                      {
1:c670aa4:                          public PrintWriter run() throws SQLException
1:23e89eb:                          {
1:d08ab9b:                              try {
1:c670aa4:                                  String fileName = configurationParameters[ 0 ];
1:c670aa4:                                  File   outputFile = new File( fileName );
1:c670aa4: 
1:c670aa4:                                  if ( outputFile.exists() )
1:c670aa4:                                  {
1:c670aa4:                                      throw PublicAPI.wrapStandardException
1:c670aa4:                                          (
1:c670aa4:                                           StandardException.newException( SQLState.DATA_FILE_EXISTS, fileName )
1:c670aa4:                                           );
1:c670aa4:                                  }
1:c670aa4:                                  
1:c670aa4:                                  return new PrintWriter( outputFile );
1:d08ab9b:                              } catch (IOException ioe) { throw new IllegalArgumentException( ioe.getMessage(), ioe ); }
1:d08ab9b:                          }  
1:d08ab9b:                      }
1:d08ab9b:                      );
1:d08ab9b:                 needsClosing = true;
1:d08ab9b:             }
1:d08ab9b:             else { pw = new PrintWriter( System.out ); }
1:f96fbeb:         
1:d08ab9b:             if ( tracer != null )
1:d08ab9b:             {
1:d08ab9b:                 tracer.printToWriter( pw );
1:d08ab9b:                 pw.flush();
1:d08ab9b:             }
1:23e89eb: 
1:d08ab9b:             if ( needsClosing ) { pw.close(); }
1:d08ab9b:             
1:23e89eb:         }
1:c670aa4:         catch (Exception e)
1:c670aa4:         {
1:c670aa4:             if ( e.getMessage() == null )
1:c670aa4:             {
1:c670aa4:                 Throwable   cause = e.getCause();
1:c670aa4:                 if ( (cause != null) && (cause instanceof SQLException) )
1:c670aa4:                 { throw (SQLException) cause; }
1:c670aa4:             }
1:c670aa4:             
1:c670aa4:             throw wrap( e );
1:c670aa4:         }
1:049f993:         finally
1:23e89eb:         {
1:049f993:             OptimizerTrace.setOptimizerTracer( null );
1:23e89eb:         }
1:23e89eb:     }
1:c57876e: 
1:f96fbeb:     ////////////////////////////////////////////////////////////////////////
1:f96fbeb:     //
1:f96fbeb:     //	MINIONS
1:f96fbeb:     //
1:f96fbeb:     ////////////////////////////////////////////////////////////////////////
1:f96fbeb: 
1:f96fbeb:     /** Wrap an exception in a SQLException */
1:f96fbeb:     private SQLException    wrap( Throwable t )
1:049f993:     {
1:f96fbeb:         return new SQLException( t.getMessage(), t );
1:23e89eb:     }
1:85e98cb:     
1:85e98cb:     private SQLException    wrap( String errorMessage )
1:85e98cb:     {
1:85e98cb:         String  sqlState = org.apache.derby.shared.common.reference.SQLState.JAVA_EXCEPTION.substring( 0, 5 );
1:85e98cb: 
1:85e98cb:         return new SQLException( errorMessage, sqlState );
1:85e98cb:     }
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of a Context. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  Context    getContext( final String contextID )
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getContext( contextID );
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<Context>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public Context run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getContext( contextID );
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:049f993: }
1:c57876e: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:                 Class<?> clazz = classFactory.loadApplicationClass( customOptTraceName );
1:                 tracer = (OptTrace) clazz.getConstructor().newInstance();
1:             catch (NoSuchMethodException cnfe) { throw cantInstantiate( customOptTraceName ); }
1:             catch (java.lang.reflect.InvocationTargetException cnfe) { throw cantInstantiate( customOptTraceName ); }
commit:c670aa4
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.security.PrivilegedExceptionAction;
1: import org.apache.derby.iapi.error.PublicAPI;
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
1:                      new PrivilegedExceptionAction<PrintWriter>()
1:                          public PrintWriter run() throws SQLException
1:                                  String fileName = configurationParameters[ 0 ];
1:                                  File   outputFile = new File( fileName );
1: 
1:                                  if ( outputFile.exists() )
1:                                  {
1:                                      throw PublicAPI.wrapStandardException
1:                                          (
1:                                           StandardException.newException( SQLState.DATA_FILE_EXISTS, fileName )
1:                                           );
1:                                  }
1:                                  
1:                                  return new PrintWriter( outputFile );
/////////////////////////////////////////////////////////////////////////
1:         catch (Exception e)
1:         {
1:             if ( e.getMessage() == null )
1:             {
1:                 Throwable   cause = e.getCause();
1:                 if ( (cause != null) && (cause instanceof SQLException) )
1:                 { throw (SQLException) cause; }
1:             }
1:             
1:             throw wrap( e );
1:         }
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.Context;
/////////////////////////////////////////////////////////////////////////
1:                 ClassFactoryContext cfc = (ClassFactoryContext) getContext( ClassFactoryContext.CONTEXT_ID );
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Privileged lookup of a Context. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Context    getContext( final String contextID )
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getContext( contextID );
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<Context>()
1:                  {
1:                      public Context run()
1:                      {
1:                          return ContextService.getContext( contextID );
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
commit:63ecb28
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.loader.ClassFactoryContext;
/////////////////////////////////////////////////////////////////////////
0:                 ClassFactoryContext cfc = (ClassFactoryContext) ContextService.getContext( ClassFactoryContext.CONTEXT_ID );
1:                 ClassFactory    classFactory = cfc.getClassFactory();
commit:d08ab9b
/////////////////////////////////////////////////////////////////////////
1:             boolean     needsClosing = false;
1:             PrintWriter pw;
1:             
1:             if (
1:                 (configurationParameters != null) &&
1:                 (configurationParameters.length > 0)
1:                 )
1:             {
1:                 pw = AccessController.doPrivileged
1:                     (
0:                      new PrivilegedAction<PrintWriter>()
0:                          public PrintWriter run()
1:                          {
1:                              try {
0:                                  return new PrintWriter( configurationParameters[ 0 ] );
1:                              } catch (IOException ioe) { throw new IllegalArgumentException( ioe.getMessage(), ioe ); }
1:                          }  
1:                      }
1:                      );
1:                 needsClosing = true;
1:             }
1:             else { pw = new PrintWriter( System.out ); }
1:             if ( tracer != null )
1:             {
1:                 tracer.printToWriter( pw );
1:                 pw.flush();
1:             }
1:             if ( needsClosing ) { pw.close(); }
1:             
commit:23e89eb
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1:     public  void    unloadTool( final String... configurationParameters )
1:             final   OptTrace    tracer = OptimizerTrace.getOptimizerTracer();
0:             AccessController.doPrivileged
0:                 (
0:                  new PrivilegedAction<Object>()
1:                  {
0:                      public Object run()
1:                      {
1:                          try {
0:                              boolean     needsClosing = false;
1: 
0:                              PrintWriter pw;
0:                              if (
0:                                  (configurationParameters != null) &&
0:                                  (configurationParameters.length > 0)
0:                                  )
1:                              {
0:                                  pw = new PrintWriter( configurationParameters[ 0 ] );
0:                                  needsClosing = true;
1:                              }
0:                              else { pw = new PrintWriter( System.out ); }
0:                              if ( tracer != null )
1:                              {
0:                                  tracer.printToWriter( pw );
0:                                  pw.flush();
1:                              }
0:                              if ( needsClosing ) { pw.close(); }
1:                          
0:                              return null;
0:                          } catch (IOException ioe) { throw new IllegalArgumentException( ioe.getMessage(), ioe ); }
1:                      }  
1:                  }
0:                  );
commit:b6cc9d7
/////////////////////////////////////////////////////////////////////////
1:      * <li>xml - If the first arg is the "xml" literal, then trace output will be
1:      * formatted as xml.</li>
/////////////////////////////////////////////////////////////////////////
1:         else if ( "xml".equals( configurationParameters[ 0 ] ) )
1:         {
1:             try {
1:                 tracer = new XMLOptTrace();
1:             }
1:             catch (Throwable t) { throw wrap( t ); }
1:         }
commit:2c50eb3
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.OptimizerTracer
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.sql.compile;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1:  * OptionalTool for tracing the Optimizer.
/////////////////////////////////////////////////////////////////////////
1:             { throw wrap( MessageService.getTextMessage( SQLState.LANG_BAD_OPTIONAL_TOOL_ARGS ) ); }
/////////////////////////////////////////////////////////////////////////
1:         else { throw wrap( MessageService.getTextMessage( SQLState.LANG_BAD_OPTIONAL_TOOL_ARGS ) ); }
1:         return wrap( MessageService.getTextMessage( SQLState.LANG_CANT_INSTANTIATE_CLASS, className ) );
commit:85e98cb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: import org.apache.derby.impl.sql.compile.DefaultOptTrace;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Turns on optimizer tracing. May take optional parameters:
1:      *
1:      * <ul>
1:      * <li>custom, $class - If the first arg is the "custom" literal, then the next arg must be
1:      * the name of a class which implements org.apache.derby.iapi.sql.compile.OptTrace
1:      * and which has a 0-arg constructor. The 0-arg constructor is called and the resulting
1:      * OptTrace object is plugged in to trace the optimizer.</li>
1:      * </ul>
1:         OptTrace    tracer;
1: 
1:         if ( (configurationParameters == null) || (configurationParameters.length == 0) )
1:         {
1:             tracer = new DefaultOptTrace();
1:         }
1:         else if ( "custom".equals( configurationParameters[ 0 ] ) )
1:         {
1:             if ( configurationParameters.length != 2 )
0:             { throw wrap( LocalizedResource.getMessage( "OT_BadLoadUnloadArgs" ) ); }
1: 
1:             String  customOptTraceName = configurationParameters[ 1 ];
1: 
1:             try {
0:                 CompilerContext cc = (CompilerContext) ContextService.getContext( CompilerContext.CONTEXT_ID );
0:                 ClassFactory    classFactory = cc.getClassFactory();
1: 
0:                 tracer = (OptTrace) classFactory.loadApplicationClass( customOptTraceName ).newInstance();
1:             }
1:             catch (InstantiationException cnfe) { throw cantInstantiate( customOptTraceName ); }
1:             catch (ClassNotFoundException cnfe) { throw cantInstantiate( customOptTraceName ); }
1:             catch (IllegalAccessException cnfe) { throw cantInstantiate( customOptTraceName ); }
1:             catch (Throwable t) { throw wrap( t ); }
1:         }
0:         else { throw wrap( LocalizedResource.getMessage( "OT_BadLoadUnloadArgs" ) ); }
1:                      
1:         OptimizerTrace.setOptimizerTracer( tracer );
1:     }
1:     private SQLException    cantInstantiate( String className )
1:     {
0:         return wrap( LocalizedResource.getMessage( "OT_CantInstantiateClass", className ) );
/////////////////////////////////////////////////////////////////////////
1:     
1:     private SQLException    wrap( String errorMessage )
1:     {
1:         String  sqlState = org.apache.derby.shared.common.reference.SQLState.JAVA_EXCEPTION.substring( 0, 5 );
1: 
1:         return new SQLException( errorMessage, sqlState );
1:     }
commit:049f993
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintWriter;
1: import org.apache.derby.iapi.sql.compile.OptTrace;
/////////////////////////////////////////////////////////////////////////
1:      * Print the optimizer trace and turn off tracing. Takes optional parameters:
/////////////////////////////////////////////////////////////////////////
0:         try {
0:             OptTrace    tracer = OptimizerTrace.getOptimizerTracer();
0:             boolean     needsClosing = false;
0:             PrintWriter pw;
0:             if (
0:                 (configurationParameters != null) &&
0:                 (configurationParameters.length > 0)
0:                 )
1:             {
0:                 pw = new PrintWriter( configurationParameters[ 0 ] );
0:                 needsClosing = true;
1:             }
0:             else { pw = new PrintWriter( System.out ); }
0:             if ( tracer != null )
1:             {
0:                 tracer.printToWriter( pw );
0:                 pw.flush();
1:             }
0:             if ( needsClosing ) { pw.close(); }
0:         catch (Exception e) { throw wrap( e ); }
1:         finally
1:             OptimizerTrace.setOptimizerTracer( null );
commit:f96fbeb
/////////////////////////////////////////////////////////////////////////
0: import java.io.FileWriter;
/////////////////////////////////////////////////////////////////////////
0:      * Dump the optimizer trace and turn off tracing. Takes optional parameters:
1:      *
1:      * <ul>
1:      * <li><b>fileName</b> - Where to write the optimizer trace. If omitted, the trace is written to System.out.</li>
1:      * </ul>
0:         String  trace = OptimizerTrace.getOptimizerTraceOutput();
0:         if ( trace == null ) { trace = ""; }
1: 
0:         OptimizerTrace.nullifyTrace();
1:         
0:         if (
0:             (configurationParameters != null) &&
0:             (configurationParameters.length > 0)
0:             )
0:         {
0:             try {
0:                 FileWriter    writer = new FileWriter( configurationParameters[ 0 ] );
1: 
0:                 writer.write( trace );
0:                 writer.flush();
0:                 writer.close();
0:             } catch (Exception e) { throw wrap( e ); }
0:         }
0:         else
0:         {
0:             System.out.println( trace );
0:         }
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	MINIONS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /** Wrap an exception in a SQLException */
1:     private SQLException    wrap( Throwable t )
0:     {
1:         return new SQLException( t.getMessage(), t );
0:     }
commit:c57876e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.impl.tools.optional.OptimizerTracer
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
0: package org.apache.derby.impl.tools.optional;
1: 
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.iapi.db.OptimizerTrace;
1: import org.apache.derby.iapi.sql.dictionary.OptionalTool;
1: 
1: /**
1:  * <p>
0:  * OptionalTool to create wrapper functions and views for all of the user tables
0:  * in a foreign database.
1:  * </p>
1:  */
1: public	class   OptimizerTracer  implements OptionalTool
0: {
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	STATE
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /** 0-arg constructor required by the OptionalTool contract */
1:     public  OptimizerTracer() {}
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // OptionalTool BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
0:      * Turns on optimizer tracing.
1:      * </p>
1:      */
1:     public  void    loadTool( String... configurationParameters )
1:         throws SQLException
0:     {
0:         OptimizerTrace.setOptimizerTrace( true );
0:     }
1: 
1:     /**
1:      * <p>
0:      * Dump the optimizer trace and turn off tracing.
1:      * </p>
1:      */
0:     public  void    unloadTool( String... configurationParameters )
1:         throws SQLException
0:     {
0:         System.out.println( OptimizerTrace.getOptimizerTraceOutput() );
1: 
0:         OptimizerTrace.setOptimizerTrace( false );
0:     }
1: 
0: }
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.context.ContextService;
============================================================================