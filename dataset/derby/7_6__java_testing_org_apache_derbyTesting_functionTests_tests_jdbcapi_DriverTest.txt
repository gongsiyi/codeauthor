1:c7c71f2: /*
14:c7c71f2: 
1:c7c71f2: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest
1:c7c71f2: 
1:c7c71f2: Licensed to the Apache Software Foundation (ASF) under one or more
1:c7c71f2: contributor license agreements.  See the NOTICE file distributed with
1:c7c71f2: this work for additional information regarding copyright ownership.
1:c7c71f2: The ASF licenses this file to You under the Apache License, Version 2.0
1:c7c71f2: (the "License"); you may not use this file except in compliance with
1:c7c71f2: the License.  You may obtain a copy of the License at
1:c7c71f2: 
1:c7c71f2:    http://www.apache.org/licenses/LICENSE-2.0
1:c7c71f2: 
1:c7c71f2: Unless required by applicable law or agreed to in writing, software
1:c7c71f2: distributed under the License is distributed on an "AS IS" BASIS,
1:c7c71f2: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c7c71f2: See the License for the specific language governing permissions and
1:c7c71f2: limitations under the License.
1:c7c71f2: 
1:c7c71f2: */
1:c7c71f2: 
1:c7c71f2: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:c7c71f2: 
1:c7c71f2: import java.io.File;
1:c7c71f2: import java.sql.Connection;
1:c7c71f2: import java.sql.DatabaseMetaData;
1:c7c71f2: import java.sql.Driver;
1:c7c71f2: import java.sql.DriverManager;
1:c7c71f2: import java.sql.ResultSet;
1:c7c71f2: import java.sql.SQLException;
1:c7c71f2: import java.util.Properties;
1:1ae02c9: import junit.framework.Test;
1:e18f54b: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:c7c71f2: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c7c71f2: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:c7c71f2: import org.apache.derbyTesting.junit.JDBC;
1:c7c71f2: import org.apache.derbyTesting.junit.TestConfiguration;
1:c7c71f2: 
1:c7c71f2: /**
1:c7c71f2: *
1:c7c71f2: * This test tests java.sql.Driver methods.
1:c7c71f2: * Right now it just tests acceptsURL and some attributes  
1:c7c71f2: * Not tested in this test: 
1:c7c71f2: *   - Tests for getPropertyInfo
1:c7c71f2: *   - tests for connection attributes
1:c7c71f2: */
1:c7c71f2: 
1:c7c71f2: public class DriverTest extends BaseJDBCTestCase {
1:c7c71f2: 
1:c7c71f2:     // DERBY-618 - Database name with spaces
1:01c7f83:     private static final    String DB_NAME_WITH_SPACES = "db name with spaces";
1:01c7f83: 
1:01c7f83:     private static  final   String  MALFORMED_URL = "XJ028";
1:c7c71f2:     
1:c7c71f2:     /**
1:c7c71f2:      * Set of additional databases for tests that
1:c7c71f2:      * require a one-off database. The additional
1:c7c71f2:      * database decorator wraps all the tests and phases.
1:c7c71f2:      * They are only created if a test opens a
1:c7c71f2:      * connection against them. In hard upgrade the test
1:c7c71f2:      * must explictly upgrade the database.
1:c7c71f2:      * The databases are shutdown at the end of each phase.
1:c7c71f2:      */
1:c7c71f2:     static final String[] ADDITIONAL_DBS = {
1:c7c71f2:         DB_NAME_WITH_SPACES,
1:c7c71f2:         "testcreatedb1", 
1:c005646:         "testcreatedb2",
1:efd17a1:         "testcreatedb3",
1:0d6fda9:         "trailblank",
1:c005646:         "'wombat'"
1:c7c71f2:     };
1:c7c71f2:     
1:c7c71f2:     public DriverTest(String name) {
1:c7c71f2:         super(name);
1:9a0cdf1:     }
1:c7c71f2:     
1:c7c71f2:     public static Test suite() {
1:c7c71f2:         // java.sql.Driver is not supported with JSR169, so return empty suite
1:c7c71f2:         if (JDBC.vmSupportsJSR169())
8:c7c71f2:         {
1:1ae02c9:             return new BaseTestSuite(
1:c7c71f2:                 "DriverTest tests java.sql.Driver, not supported with JSR169");
16:c7c71f2:         }
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("DriverTest");
1:c7c71f2:         suite.addTest(baseSuite("DriverTest:embedded"));
1:c7c71f2:             suite.addTest(TestConfiguration.clientServerDecorator(
1:c7c71f2:                 baseSuite("DriverTest:client")));
1:c7c71f2:         return suite;
1:c7c71f2:     }
1:c7c71f2:     
1:3078764:     private static Test baseSuite(String name) {
1:c7c71f2:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("DriverTest");
1:c7c71f2:         setBaseProps(suite, new DriverTest("testDriverCompliantVersion"));
1:c7c71f2:         setBaseProps(suite, new DriverTest("testAcceptsURL"));
1:c7c71f2:         setBaseProps(suite, new DriverTest("testEmbeddedAttributes"));
1:c7c71f2:         setBaseProps(suite, new DriverTest("testClientAttributes"));
1:c7c71f2:         setBaseProps(suite, new DriverTest("testClientURL"));
1:c7c71f2:         setBaseProps(suite, new DriverTest("testDbNameWithSpaces"));
1:c7c71f2:         
1:c005646:         return suite;
1:c7c71f2:     }
1:c7c71f2:     
1:1ae02c9:     private static void setBaseProps(BaseTestSuite suite, Test test)
1:c7c71f2:     {
1:c7c71f2:         Properties dbprops = new Properties();
1:c7c71f2: 
1:c7c71f2:         // Use DatabasePropertyTestSetup to add some settings.
1:c7c71f2:         // DatabasePropertyTestSetup uses SYSCS_SET_DATABASE_PROPERTY
1:c7c71f2:         // so users are added at database level.
1:c7c71f2:         // Note, that authentication is not switched on.
1:c7c71f2:         dbprops.setProperty("derby.infolog.append", "true");
1:c7c71f2:         dbprops.setProperty("derby.debug.true", "AuthenticationTrace");
1:c7c71f2:         dbprops.setProperty("derby.user.APP", "xxxx");
1:c7c71f2:         dbprops.setProperty("derby.user.testuser", "testpass");
1:c7c71f2:         test = new DatabasePropertyTestSetup (test, dbprops, true);
1:c7c71f2:         suite.addTest(test);
1:c7c71f2:     }
1:c005646: 
1:c005646:     public void tearDown() throws Exception {
1:c005646:         // attempt to get rid of any left-over trace files
1:e18f54b:         for (int i = 0; i < 2; i++) {
1:e18f54b:             String traceFileName = "trace" + (i + 1) + ".out";
1:e18f54b:             File traceFile = new File(traceFileName);
1:e18f54b:             if (PrivilegedFileOpsForTests.exists(traceFile)) {
1:e18f54b:                 // if it exists, attempt to get rid of it
1:e18f54b:                 PrivilegedFileOpsForTests.delete(traceFile);
1:e18f54b:             }
1:c005646:         }
1:c005646: 
1:e18f54b:         TestConfiguration config = TestConfiguration.getCurrent();
1:e18f54b:                 for (String dbName : ADDITIONAL_DBS) {
1:e18f54b:             removeDirectory(config.getDatabasePath(dbName));
1:e18f54b:         }
1:c005646: 
1:c005646:         super.tearDown();
1:c005646:     }
1:c005646:     
1:c7c71f2:     /**
1:c7c71f2:      * Load the driver and check java.sql.Driver.jdbcCompliant() and
1:c7c71f2:      * driver.get*Version
1:c7c71f2:      * @throws Exception
1:c7c71f2:      */
1:3078764:     public void testDriverCompliantVersion() throws Exception 
1:c005646:     {   
2:c7c71f2:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:c7c71f2:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c005646: 
1:c7c71f2:         loadDriver();
1:c7c71f2:         String defaultdburl = url + ";create=true";
1:c005646:         
1:c7c71f2:         // Test that we loaded the right driver by making a connection
1:c7c71f2:         Driver driver = DriverManager.getDriver(defaultdburl);
1:c7c71f2:         Properties props = new Properties();
1:c7c71f2:         props.put("user", "testuser");
1:c7c71f2:         props.put("password", "testpass");
1:c7c71f2:         Connection conn = DriverManager.getConnection(defaultdburl, props);
1:c7c71f2:         // Driver should be jdbc compliant.
1:c7c71f2:         assertTrue(driver.jdbcCompliant());
1:c7c71f2: 
1:c7c71f2:         // compare driver.get*Version() with DatabaseMetadata.getDriver*Version.
1:c7c71f2:         DatabaseMetaData dbmd = conn.getMetaData();
1:c7c71f2: 
1:c7c71f2:         assertEquals(dbmd.getDriverMajorVersion(), driver.getMajorVersion());
1:c7c71f2:         assertEquals(dbmd.getDriverMinorVersion(), driver.getMinorVersion());
1:09869c6: 
1:595307e:         // Test that the driver class is the expected one. Currently, the same
1:595307e:         // driver class is used regardless of JDBC version.
1:09869c6:         println( "Driver is a " + driver.getClass().getName() );
1:595307e:         assertEquals(usingEmbedded() ? "AutoloadedDriver" : "ClientDriver",
1:595307e:                      driver.getClass().getSimpleName());
1:01c7f83: 
1:01c7f83:         // test that null connection URLs raise a SQLException per JDBC 4.2 spec clarification
1:01c7f83:         try {
1:01c7f83:             driver.acceptsURL( null );
1:01c7f83:             fail( "Should not have accepted a null connection url" );
1:01c7f83:         }
1:01c7f83:         catch (SQLException se) { assertSQLState( MALFORMED_URL, se ); }
1:01c7f83:         try {
1:01c7f83:             driver.connect( null, props );
1:01c7f83:             fail( "Should not have accepted a null connection url" );
1:01c7f83:         }
1:01c7f83:         catch (SQLException se) { assertSQLState( MALFORMED_URL, se ); }
1:c7c71f2:         
1:c7c71f2:         conn.close();
1:c005646:     }
1:c7c71f2:     
1:c7c71f2:     /**
1:c7c71f2:      * Check that drivers accept the correct urls and reject those for other supported drivers.
1:c7c71f2:      * 
1:c7c71f2:      * @throws SQLException, Exception
1:c7c71f2:      */
1:3078764:     public void testAcceptsURL() throws SQLException, Exception {
1:c7c71f2:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:c7c71f2:         String orgurl = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c7c71f2: 
1:c7c71f2:         loadDriver();
1:c7c71f2:         String defaultdburl = orgurl + ";create=true";
1:c7c71f2:         
1:c7c71f2:         // Test that we loaded the right driver by making a connection
1:c7c71f2:         Driver driver = DriverManager.getDriver(defaultdburl);
1:c7c71f2: 
1:c7c71f2:         int  frameworkOffset;
1:c7c71f2:         int EMBEDDED_OFFSET = 0;
1:c7c71f2:         int DERBYNETCLIENT_OFFSET = 1;
1:c7c71f2:         if (usingDerbyNetClient())
1:c7c71f2:             frameworkOffset = DERBYNETCLIENT_OFFSET;
1:c7c71f2:         else // assume (usingEmbedded())
1:c7c71f2:             frameworkOffset = EMBEDDED_OFFSET;
1:c7c71f2:         
1:c7c71f2:         // URLS to check.  New urls need to also be added to the acceptsUrl table
1:c7c71f2:         String EMBEDDED_URL = "jdbc:derby:";
1:c7c71f2:         String INVALID_URL = "jdbc:db2j:";
1:c7c71f2:         String hostName = TestConfiguration.getCurrent().getHostName();
1:c7c71f2:         int port = TestConfiguration.getCurrent().getPort();
1:c7c71f2:         String CLIENT_URL = 
1:c7c71f2:             "jdbc:derby://"+hostName+":"+port+"/"+dbName+";create=true";
1:c7c71f2:         
1:c7c71f2:         String[] urls = new String[]
1:c005646:         {
1:c7c71f2:             EMBEDDED_URL,
1:c7c71f2:             CLIENT_URL,
1:c7c71f2:             INVALID_URL,
1:c7c71f2:         };
1:c7c71f2: 
1:c7c71f2:         // Table that shows whether tested urls should return true for 
1:c7c71f2:         // acceptsURL under the given framework
1:c7c71f2:         // The acceptsURLTable uses  the frameworkOffset column int he table 
1:c7c71f2:         // to check for valid results for each framework
1:c7c71f2:         boolean[][] acceptsURLTable = new boolean[][]
1:c005646:         {
1:c005646:         // Framework/url      EMBEDDED     DERBYNETCLIENT 
1:c005646:         /* EMBEDDED_URL*/  {   true      ,  false        },
1:c005646:         /* CLIENT_URL  */  {   false     ,  true         },     
1:c005646:         /* INVALID_URL */  {   false     ,  false        } 
1:c7c71f2:         };
1:c7c71f2: 
1:c7c71f2:         for (int u = 0; u < urls.length;u++)
1:c005646:         {
1:c7c71f2:             String url = urls[u];
1:c7c71f2:             boolean expectedAcceptance = acceptsURLTable[u][frameworkOffset];
1:c7c71f2:             boolean actualAcceptance = driver.acceptsURL(url);
1:c7c71f2:             assertEquals(expectedAcceptance, actualAcceptance);
1:c005646:         }
1:c005646:     }
1:c7c71f2:     
1:c7c71f2:     /**
1:c7c71f2:      * Tests that embedded attributes can be specified in either url or info 
1:c7c71f2:      * argument to connect
1:c005646:      * DERBY-530. Only valid for embedded driver and client. 
1:c7c71f2:      */
1:3078764:     public void testEmbeddedAttributes() throws SQLException
1:c005646:     {
1:c7c71f2:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:c7c71f2:         String protocol = 
1:c7c71f2:             TestConfiguration.getCurrent().getJDBCClient().getUrlBase();
1:c7c71f2:         if (usingDerbyNetClient())
1:c7c71f2:             protocol = protocol + TestConfiguration.getCurrent().getHostName()
1:c7c71f2:             + ":" + TestConfiguration.getCurrent().getPort() + "/";
1:c7c71f2:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c7c71f2:         
1:c7c71f2:         Properties info = new Properties();
1:c7c71f2:         // create attribute as property
1:c7c71f2:         info.setProperty("create","true");
1:c7c71f2:         // networkserver / DerbyNetClient tags on create to url
1:c7c71f2:         if (usingEmbedded())
1:c7c71f2:             assertConnect(true, protocol + "testcreatedb1", info);
1:c7c71f2:         else
1:c7c71f2:             assertConnect(false, protocol + "testcreatedb1", info);
1:c7c71f2:         
1:c7c71f2:         // create attribute in url
1:c7c71f2:         if (usingEmbedded())
1:c7c71f2:             assertConnect(false, protocol + "testcreatedb2;create=true", null);
1:c7c71f2:         else 
1:c7c71f2:             assertConnect(true, protocol + "testcreatedb2;create=true", null);
1:c7c71f2:         
1:c7c71f2:         // user/password in properties
1:c7c71f2:         info.clear();
1:c7c71f2:         info.setProperty("user","APP");
1:c7c71f2:         info.setProperty("password", "xxxx");
1:c7c71f2:         if (usingEmbedded())
1:c7c71f2:             assertConnect(true, url, info);
1:c7c71f2:         else 
2:c7c71f2:             assertConnect(false, url, info);
1:c7c71f2:         
1:c7c71f2:         // user/password  in url
1:c7c71f2:         assertConnect(false, 
1:c7c71f2:             url + ";user=testuser;password=testpass", null);
1:c7c71f2:         
1:c7c71f2:         // user in url, password in property
1:c7c71f2:         info.clear();
1:c7c71f2:         info.setProperty("password","testpass");
1:c7c71f2:         assertConnect(false, url + ";user=testusr",info);
1:c7c71f2: 
1:c7c71f2:         // different users in url and in properties. URL is the winner
1:c7c71f2:         info.clear();
1:c7c71f2:         info.setProperty("user","APP");
1:c7c71f2:         info.setProperty("password","xxxx");
1:c7c71f2:         assertConnect(false, 
1:c7c71f2:             url + ";user=testuser;password=testpass", null);
1:c7c71f2:         
1:c7c71f2:         // shutdown with properties
1:c7c71f2:         info.clear();
1:c7c71f2:         info.setProperty("shutdown","true");                
1:c7c71f2:         try {
1:c7c71f2:             assertConnect(false, protocol + "testcreatedb1", info);
1:c7c71f2:         } catch (SQLException se)
1:c7c71f2:         {
1:c7c71f2:             assertSQLState("08006", se);
1:c005646:         }
1:c005646:         
1:c005646:         // shutdown using url
1:c005646:         try {
1:c005646:             assertConnect(
1:c005646:                 false, protocol + "testcreatedb2;shutdown=true", null);
1:c005646:         } catch (SQLException se)
1:c005646:         {
1:c005646:             assertSQLState("08006", se);
1:c005646:         }
1:c005646:     }
1:c7c71f2:         
1:c7c71f2:     /**
1:c7c71f2:      * Tests that client side attributes cann be specified in either url or
1:c7c71f2:      * as info argument to connect.
1:c7c71f2:      * DERBY-530. 
1:c7c71f2:      */
1:3078764:     public void testClientAttributes() throws SQLException
1:c7c71f2:     {
1:c7c71f2:         if (!usingDerbyNetClient())
1:c005646:             return;
1:c005646:         
1:c7c71f2:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:c7c71f2:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:c005646: 
1:c7c71f2:         Properties info = new Properties();
1:c7c71f2:         String traceFile = "trace1.out";
1:c7c71f2:         
1:c7c71f2:         // traceFile attribute in url
1:c7c71f2:         assertConnect(true, url + ";traceFile=" + traceFile, info);
1:c7c71f2:         
1:c7c71f2:         traceFile = "trace2.out";
1:c7c71f2:         // traceFile attribute in property
1:c7c71f2:         info.setProperty("traceFile",traceFile);
1:c7c71f2:         assertConnect(false, url, info);
1:c7c71f2:         assertTraceFilesExist();
1:c005646:         shutdownDB(url + ";shutdown=true", null);
1:c005646: 
1:efd17a1:         // Derby-974: test that connection sees default properties as well
1:efd17a1:         info.setProperty("create","true");
1:efd17a1:         Properties infoWithDefaults = new Properties(info);
1:efd17a1: 
1:efd17a1:         url = TestConfiguration.getCurrent().getJDBCUrl("testcreatedb3");
1:efd17a1:         assertConnect(false, url, infoWithDefaults);
1:efd17a1: 
1:efd17a1:         shutdownDB(url+";shutdown=true", null);
1:efd17a1: 
1:c005646:     }
1:c7c71f2: 
1:c7c71f2:     /**
1:c7c71f2:      * Check that trace files exist
1:c7c71f2:      */
1:c7c71f2:     private static void assertTraceFilesExist() 
1:c7c71f2:     {
1:e18f54b:         for (int i = 0; i < 2; i++) {
1:e18f54b:             String traceFileName = "trace" + (i + 1) + ".out";
1:e18f54b:             File traceFile = new File(traceFileName);
1:e18f54b:             assertTrue(PrivilegedFileOpsForTests.exists(traceFile));
1:e18f54b:         }
1:c005646:     }
1:c7c71f2: 
1:c7c71f2:     /**
1:c7c71f2:      * Tests client URLs to see connection is successful or the correct exception is thrown.
1:c7c71f2:      */
1:3078764:     public void testClientURL() throws SQLException {
1:c7c71f2:         if (!usingDerbyNetClient())
3:c7c71f2:             return;
1:c7c71f2:         
1:c7c71f2:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:c7c71f2:         String protocol = 
1:c7c71f2:             TestConfiguration.getCurrent().getJDBCClient().getUrlBase();
1:c7c71f2:         if (usingDerbyNetClient())
1:c7c71f2:             protocol = protocol + TestConfiguration.getCurrent().getHostName()
1:c7c71f2:             + ":" + TestConfiguration.getCurrent().getPort() + "/";
1:c7c71f2:         
1:c7c71f2:         Properties info = null;     //test with null Properties object
1:c7c71f2: 
1:c005646:         String CLIENT_CREATE_URL_WITH_COLON1 = 
1:c005646:             protocol + dbName + ":create=true";
1:c005646:         //String CLIENT_CREATE_URL_WITH_COLON2 = protocol + DERBY_SYSTEM_HOME + 
1:c7c71f2:         //   File.separator + dbName + ":create=true";
1:c005646:         // String CLIENT_CREATE_URL_WITH_DOUBLE_QUOTES1 = 
1:c7c71f2:         //     protocol + "\"" + dbName + "\";create=true";  
1:c005646:         // String CLIENT_CREATE_URL_WITH_DOUBLE_QUOTES2 = protocol + "\"" + 
1:c7c71f2:         //     DERBY_SYSTEM_HOME + File.separator + dbName + "\";create=true"; 
1:c005646:         // String CLIENT_CREATE_URL_WITH_SINGLE_QUOTES1 = protocol + "'" + 
1:c7c71f2:         //     DERBY_SYSTEM_HOME + File.separator + dbName + "';create=true"; 
1:c005646:         String CLIENT_CREATE_URL_WITH_SINGLE_QUOTES2 = 
1:c7c71f2:             protocol + "'" + dbName + "';create=true";
1:c7c71f2:         
1:c005646:         String CLIENT_SHUT_URL_WITH_SINGLE_QUOTES2 = 
1:c005646:             protocol + "'" + dbName + "';shutdown=true";
1:c005646:         
1:c7c71f2:         //Client URLS
1:c005646:         String[] clientCreateUrls = new String[]
1:c7c71f2:         {
1:c005646:             CLIENT_CREATE_URL_WITH_COLON1,
1:c7c71f2:             //CLIENT_URL_WITH_COLON2,
1:c7c71f2:             //CLIENT_URL_WITH_DOUBLE_QUOTES1,
1:c7c71f2:             //CLIENT_URL_WITH_DOUBLE_QUOTES2,
1:c7c71f2:             //CLIENT_URL_WITH_SINGLE_QUOTES1,
1:c005646:             CLIENT_CREATE_URL_WITH_SINGLE_QUOTES2
1:c7c71f2:         };
1:c7c71f2:         
1:c005646:         for (int i = 0; i < clientCreateUrls.length;i++)
1:c7c71f2:         {
1:c005646:             String url = clientCreateUrls[i];
1:c7c71f2:             try{
1:c005646:                 if (url.equals(CLIENT_CREATE_URL_WITH_COLON1))
1:c7c71f2:                 {
1:c7c71f2:                     Driver driver = DriverManager.getDriver(url);
1:c7c71f2:                     assertNull(driver.connect(url,info));
1:c005646:                 }
1:c7c71f2:                 else
1:c7c71f2:                     assertConnect(true, url, info);
1:c005646:             }
1:c7c71f2:             catch(SQLException se){
1:c7c71f2:                 fail ("did not expect an exception");
1:c005646:             }
1:c7c71f2:         }
1:c005646:         // shutdown the databases, which should get rid of all open connections
1:c005646:         // currently, there's only the one; otherwise, this could be done in
1:c005646:         // a loop.
1:c005646:         shutdownDB(
1:c005646:             CLIENT_SHUT_URL_WITH_SINGLE_QUOTES2 + ";shutdown=true", null);
1:c7c71f2:     }   
1:c7c71f2:     
1:c7c71f2:     /**
1:c7c71f2:      * Tests URL with spaces in database name to check create and connect works. 
1:c7c71f2:      * (DERBY-618). Make sure that the specified database gets created. We need 
1:c7c71f2:      * to check this because even without the patch for DERBY-618, no exception
1:c7c71f2:      * gets thrown when we try to connect to a database name with spaces. 
1:c7c71f2:      * Instead, client driver extracts the database name as the string before 
1:c7c71f2:      * the first occurence of space separator. Hence the database which gets 
1:c7c71f2:      * created is wrong. e.g, if we specified database name as 
1:c7c71f2:      * "db name with spaces", the database that got created by client driver 
1:c7c71f2:      * was "db", which was wrong. We can check this by checking the correct URL
1:c7c71f2:      * is returned by call to conn.getMetaData().getURL(). This is currently 
1:c7c71f2:      * checked inside the testConnect method. We do not explicilty check the 
1:c7c71f2:      * database directory creation since this check fails in remote server 
1:c7c71f2:      * testing.       
1:c7c71f2:      * 
1:c7c71f2:      * @throws SQLException
1:c7c71f2:      */
1:3078764:     public void testDbNameWithSpaces() throws SQLException {
1:c7c71f2:         
1:c7c71f2:         Properties info = null;
1:c7c71f2:         String url = null;
1:c7c71f2:         
1:c7c71f2:         String protocol = 
1:c7c71f2:             TestConfiguration.getCurrent().getJDBCClient().getUrlBase();
1:c7c71f2:         if (usingDerbyNetClient())
1:c7c71f2:             protocol = protocol + TestConfiguration.getCurrent().getHostName()
1:c7c71f2:             + ":" + TestConfiguration.getCurrent().getPort() + "/";
1:c005646:         url = protocol + DB_NAME_WITH_SPACES + ";create=true";
1:c005646:         String shuturl = protocol + DB_NAME_WITH_SPACES + ";shutdown=true";
1:c7c71f2:         
1:c005646:         assertConnect(false, url, null);
1:c005646:         shutdownDB(shuturl, null);
1:0d6fda9:         
1:0d6fda9:         // Test trailing spaces - Beetle 4653. Moved from urlLocale.sql
1:0d6fda9:         url = TestConfiguration.getCurrent().getJDBCUrl("trailblank");
1:0d6fda9:         url += ";create=true";
1:0d6fda9:         assertConnect(false,url,null);
1:0d6fda9:         
1:0d6fda9:         // regular connection with trailing spaces
1:0d6fda9:         url = TestConfiguration.getCurrent().
1:0d6fda9:                 getJDBCUrl("trailblank     ");
1:0d6fda9:         assertConnect(true, url, null);
1:0d6fda9:         
1:0d6fda9:         // shutdown with trailing spaces
1:0d6fda9:         url = TestConfiguration.getCurrent().
1:0d6fda9:                 getJDBCUrl("trailblank     ");
1:0d6fda9:         url += ";shutdown=true";
1:0d6fda9:         shutdownDB(url,null);
1:c7c71f2:     }
1:c7c71f2:     
1:c7c71f2:     /**
1:c7c71f2:      * Do java.sql.Driver.connect(String url, Properties info call)
1:c7c71f2:      * 
1:c7c71f2:      * @param expectUrlEqualsGetUrl boolean indicating embedded would
1:c7c71f2:      *                  expect the url passed in to equal metadata.getURL()
1:c7c71f2:      * @param url       url to pass to Driver.connect()
1:c7c71f2:      * @param info      properties to pass to Driver.Connect()
1:c7c71f2:      * 
1:c7c71f2:      * @throws SQLException on error.
1:c7c71f2:      */
1:c005646:     private static void assertConnect(
1:c7c71f2:         boolean expectUrlEqualsGetUrl, String url, Properties info) 
1:c7c71f2:     throws SQLException
1:c7c71f2:     {
1:c7c71f2:         Driver driver = DriverManager.getDriver(url);
1:c7c71f2: 
1:c005646:         Connection conn = driver.connect(url, info);
1:c7c71f2:         assertNotNull(conn);
1:c7c71f2:    
1:c7c71f2:         if (expectUrlEqualsGetUrl)
1:c7c71f2:             assertEquals(url, conn.getMetaData().getURL());
1:c7c71f2:         else
1:c7c71f2:             assertNotSame(url, conn.getMetaData().getURL());
1:c7c71f2:         ResultSet rs = 
1:c7c71f2:             conn.createStatement().executeQuery("VALUES(CURRENT SCHEMA)");
1:c7c71f2:         rs.next();
1:c7c71f2:         assertEquals(
1:c7c71f2:             rs.getString(1), conn.getMetaData().getUserName().toUpperCase());
1:c005646:         rs.close();
1:c7c71f2:         conn.close();
1:c005646:         return;
1:c005646:     }
1:c005646:     
1:c005646:     /**
1:c005646:      * use this method to shutdown databases in an effort to release
1:c005646:      * any locks they may be holding
1:c005646:      */
1:c005646:     private static void shutdownDB(String url, Properties info) throws SQLException {
1:c005646:         
1:c005646:         Driver driver = DriverManager.getDriver(url);
1:c005646:         try {
1:c005646:             driver.connect(url, info);
1:c005646:         } catch (SQLException se) {
1:c005646:             assertSQLState("08006", se);
1:c005646:         }
1:c7c71f2:     }
1:c7c71f2: 
1:c7c71f2:     /**
1:c7c71f2:        Load the appropriate driver for the current framework
1:c7c71f2:      */
1:c7c71f2:     private static void loadDriver()
1:c7c71f2:     {
1:c7c71f2:         String driverClass =
1:c7c71f2:             TestConfiguration.getCurrent().getJDBCClient().getJDBCDriverName();
1:c7c71f2:         try {
1:4469400:             Class<?> clazz = Class.forName(driverClass);
1:4469400:             clazz.getConstructor().newInstance();
1:c7c71f2:         } catch (Exception e) {
1:c7c71f2:             fail ("could not instantiate driver");
1:c7c71f2:         }
1:c7c71f2:     }
1:c7c71f2: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:             Class<?> clazz = Class.forName(driverClass);
1:             clazz.getConstructor().newInstance();
commit:01c7f83
/////////////////////////////////////////////////////////////////////////
1:     private static final    String DB_NAME_WITH_SPACES = "db name with spaces";
1: 
1:     private static  final   String  MALFORMED_URL = "XJ028";
/////////////////////////////////////////////////////////////////////////
1: 
1:         // test that null connection URLs raise a SQLException per JDBC 4.2 spec clarification
1:         try {
1:             driver.acceptsURL( null );
1:             fail( "Should not have accepted a null connection url" );
1:         }
1:         catch (SQLException se) { assertSQLState( MALFORMED_URL, se ); }
1:         try {
1:             driver.connect( null, props );
1:             fail( "Should not have accepted a null connection url" );
1:         }
1:         catch (SQLException se) { assertSQLState( MALFORMED_URL, se ); }
commit:09869c6
/////////////////////////////////////////////////////////////////////////
1: 
0:         // test that the driver is one of the special 40 versions if we are running
0:         // on Java 6 or higher
1:         println( "Driver is a " + driver.getClass().getName() );
0:         assertEquals( JDBC.vmSupportsJDBC4(), driver.getClass().getName().endsWith( "40" ) );
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite(
1:         BaseTestSuite suite = new BaseTestSuite("DriverTest");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("DriverTest");
/////////////////////////////////////////////////////////////////////////
1:     private static void setBaseProps(BaseTestSuite suite, Test test)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:595307e
/////////////////////////////////////////////////////////////////////////
1:         // Test that the driver class is the expected one. Currently, the same
1:         // driver class is used regardless of JDBC version.
1:         assertEquals(usingEmbedded() ? "AutoloadedDriver" : "ClientDriver",
1:                      driver.getClass().getSimpleName());
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 2; i++) {
1:             String traceFileName = "trace" + (i + 1) + ".out";
1:             File traceFile = new File(traceFileName);
1:             if (PrivilegedFileOpsForTests.exists(traceFile)) {
1:                 // if it exists, attempt to get rid of it
1:                 PrivilegedFileOpsForTests.delete(traceFile);
1:         }
1:         TestConfiguration config = TestConfiguration.getCurrent();
1:         for (String dbName : ADDITIONAL_DBS) {
1:             removeDirectory(config.getDatabasePath(dbName));
1:         }
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 2; i++) {
1:             String traceFileName = "trace" + (i + 1) + ".out";
1:             File traceFile = new File(traceFileName);
1:             assertTrue(PrivilegedFileOpsForTests.exists(traceFile));
1:         }
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
0:         if (usingEmbedded()) {
0:             assertEquals( JDBC.vmSupportsJDBC4(), driver.getClass().getName().endsWith( "40" ) );
0:         } else {
0:             // The same client driver class is used regardless of JDBC version.
0:             assertEquals("ClientDriver", driver.getClass().getSimpleName());
1:         }
commit:efd17a1
/////////////////////////////////////////////////////////////////////////
1:         "testcreatedb3",
/////////////////////////////////////////////////////////////////////////
1:         // Derby-974: test that connection sees default properties as well
1:         info.setProperty("create","true");
1:         Properties infoWithDefaults = new Properties(info);
1: 
1:         url = TestConfiguration.getCurrent().getJDBCUrl("testcreatedb3");
1:         assertConnect(false, url, infoWithDefaults);
1: 
1:         shutdownDB(url+";shutdown=true", null);
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:0d6fda9
/////////////////////////////////////////////////////////////////////////
1:         "trailblank",
/////////////////////////////////////////////////////////////////////////
0:                 for (String dbName : ADDITIONAL_DBS) {
/////////////////////////////////////////////////////////////////////////
1:         
1:         // Test trailing spaces - Beetle 4653. Moved from urlLocale.sql
1:         url = TestConfiguration.getCurrent().getJDBCUrl("trailblank");
1:         url += ";create=true";
1:         assertConnect(false,url,null);
1:         
1:         // regular connection with trailing spaces
1:         url = TestConfiguration.getCurrent().
1:                 getJDBCUrl("trailblank     ");
1:         assertConnect(true, url, null);
1:         
1:         // shutdown with trailing spaces
1:         url = TestConfiguration.getCurrent().
1:                 getJDBCUrl("trailblank     ");
1:         url += ";shutdown=true";
1:         shutdownDB(url,null);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:7dc89cf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c005646
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.BaseTestCase;
/////////////////////////////////////////////////////////////////////////
1:         "testcreatedb2",
1:         "'wombat'"
/////////////////////////////////////////////////////////////////////////
1:         return suite;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void tearDown() throws Exception {
1:         // attempt to get rid of any left-over trace files
0:         AccessController.doPrivileged(new java.security.PrivilegedAction() {
0:             public Object run() {
0:                 for (int i=0 ; i < 2 ; i++)
1:                 {   
0:                     String traceFileName = "trace" + (i+1) + ".out";
0:                     File traceFile = new File(traceFileName);
0:                     if (traceFile.exists())
1:                     {
0:                         // if it exists, attempt to get rid of it
0:                         traceFile.delete();
1:                     }
1:                 } 
0:                 removeDatabases();
0:                 return null;
1:             }
1:             
0:             // attempt to get rid of any databases. 
0:             void removeDatabases()
1:             {
0:                 for ( int i=0 ; i<ADDITIONAL_DBS.length ; i++)
1:                 {
0:                     String dbName = ADDITIONAL_DBS[i];
0:                     //TestConfiguration config = TestConfiguration.getCurrent();
0:                     dbName = dbName.replace('/', File.separatorChar);
0:                     String dsh = BaseTestCase.getSystemProperty("derby.system.home");
0:                     if (dsh == null) {
0:                         fail("not implemented");
0:                     } else {
0:                         dbName = dsh + File.separator + dbName;
1:                     }
0:                     removeDirectory(dbName);
1:                 }
1:             }
1: 
0:             void removeDirectory(String path)
1:             {
0:                 final File dir = new File(path);
0:                 removeDir(dir);
1:             }
1: 
0:             private void removeDir(File dir) {
1: 
0:                 // Check if anything to do!
0:                 // Database may not have been created.
0:                 if (!dir.exists())
1:                     return;
1: 
0:                 String[] list = dir.list();
1: 
0:                 // Some JVMs return null for File.list() when the
0:                 // directory is empty.
0:                 if (list != null) {
0:                     for (int i = 0; i < list.length; i++) {
0:                         File entry = new File(dir, list[i]);
1: 
0:                         if (entry.isDirectory()) {
0:                             removeDir(entry);
0:                         } else {
0:                             entry.delete();
0:                             //assertTrue(entry.getPath(), entry.delete());
1:                         }
1:                     }
1:                 }
0:                 dir.delete();
0:                 //assertTrue(dir.getPath(), dir.delete());
1:             }
0:         });
1:         super.tearDown();
1:     }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // Framework/url      EMBEDDED     DERBYNETCLIENT 
1:         /* EMBEDDED_URL*/  {   true      ,  false        },
1:         /* CLIENT_URL  */  {   false     ,  true         },     
1:         /* INVALID_URL */  {   false     ,  false        } 
/////////////////////////////////////////////////////////////////////////
1:      * DERBY-530. Only valid for embedded driver and client. 
/////////////////////////////////////////////////////////////////////////
1:         
1:         // shutdown using url
1:         try {
1:             assertConnect(
1:                 false, protocol + "testcreatedb2;shutdown=true", null);
1:         } catch (SQLException se)
1:         {
1:             assertSQLState("08006", se);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         shutdownDB(url + ";shutdown=true", null);
1: 
/////////////////////////////////////////////////////////////////////////
1:         String CLIENT_CREATE_URL_WITH_COLON1 = 
1:             protocol + dbName + ":create=true";
1:         //String CLIENT_CREATE_URL_WITH_COLON2 = protocol + DERBY_SYSTEM_HOME + 
1:         // String CLIENT_CREATE_URL_WITH_DOUBLE_QUOTES1 = 
1:         // String CLIENT_CREATE_URL_WITH_DOUBLE_QUOTES2 = protocol + "\"" + 
1:         // String CLIENT_CREATE_URL_WITH_SINGLE_QUOTES1 = protocol + "'" + 
1:         String CLIENT_CREATE_URL_WITH_SINGLE_QUOTES2 = 
1:         String CLIENT_SHUT_URL_WITH_SINGLE_QUOTES2 = 
1:             protocol + "'" + dbName + "';shutdown=true";
1:         
1:         String[] clientCreateUrls = new String[]
1:             CLIENT_CREATE_URL_WITH_COLON1,
1:             CLIENT_CREATE_URL_WITH_SINGLE_QUOTES2
1:         for (int i = 0; i < clientCreateUrls.length;i++)
1:             String url = clientCreateUrls[i];
1:                 if (url.equals(CLIENT_CREATE_URL_WITH_COLON1))
/////////////////////////////////////////////////////////////////////////
1:         // shutdown the databases, which should get rid of all open connections
1:         // currently, there's only the one; otherwise, this could be done in
1:         // a loop.
1:         shutdownDB(
1:             CLIENT_SHUT_URL_WITH_SINGLE_QUOTES2 + ";shutdown=true", null);
/////////////////////////////////////////////////////////////////////////
1:         url = protocol + DB_NAME_WITH_SPACES + ";create=true";
1:         String shuturl = protocol + DB_NAME_WITH_SPACES + ";shutdown=true";
1:         assertConnect(false, url, null);
1:         shutdownDB(shuturl, null);
/////////////////////////////////////////////////////////////////////////
1:     private static void assertConnect(
1:         Connection conn = driver.connect(url, info);
/////////////////////////////////////////////////////////////////////////
1:         rs.close();
1:         return;
1:     }
1:     
1:     /**
1:      * use this method to shutdown databases in an effort to release
1:      * any locks they may be holding
1:      */
1:     private static void shutdownDB(String url, Properties info) throws SQLException {
1:         
1:         Driver driver = DriverManager.getDriver(url);
1:         try {
1:             driver.connect(url, info);
1:         } catch (SQLException se) {
1:             assertSQLState("08006", se);
1:         }
commit:c7c71f2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.io.File;
0: import java.security.AccessController;
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.Driver;
1: import java.sql.DriverManager;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.util.Properties;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
0: import junit.extensions.TestSetup;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
1: *
1: * This test tests java.sql.Driver methods.
1: * Right now it just tests acceptsURL and some attributes  
1: * Not tested in this test: 
1: *   - Tests for getPropertyInfo
1: *   - tests for connection attributes
1: */
1: 
1: public class DriverTest extends BaseJDBCTestCase {
1: 
1:     // DERBY-618 - Database name with spaces
0:     private static String DB_NAME_WITH_SPACES = "db name with spaces";
1:     
1:     /**
1:      * Set of additional databases for tests that
1:      * require a one-off database. The additional
1:      * database decorator wraps all the tests and phases.
1:      * They are only created if a test opens a
1:      * connection against them. In hard upgrade the test
1:      * must explictly upgrade the database.
1:      * The databases are shutdown at the end of each phase.
1:      */
1:     static final String[] ADDITIONAL_DBS = {
1:         DB_NAME_WITH_SPACES,
1:         "testcreatedb1", 
0:         "testcreatedb2"
1:     };
1:     
1:     public DriverTest(String name) {
1:         super(name);
1:     }
1:     
1:     public static Test suite() {
1:         // java.sql.Driver is not supported with JSR169, so return empty suite
1:         if (JDBC.vmSupportsJSR169())
1:         {
0:             return new TestSuite(
1:                 "DriverTest tests java.sql.Driver, not supported with JSR169");
1:         }
0:         TestSuite suite = new TestSuite("DriverTest");
1:         suite.addTest(baseSuite("DriverTest:embedded"));
1:             suite.addTest(TestConfiguration.clientServerDecorator(
1:                 baseSuite("DriverTest:client")));
1:         return suite;
1:     }
1:     
0:     public static Test baseSuite(String name) {
1:         
0:         TestSuite suite = new TestSuite("DriverTest");
1:         setBaseProps(suite, new DriverTest("testDriverCompliantVersion"));
1:         setBaseProps(suite, new DriverTest("testAcceptsURL"));
1:         setBaseProps(suite, new DriverTest("testEmbeddedAttributes"));
1:         setBaseProps(suite, new DriverTest("testClientAttributes"));
1:         setBaseProps(suite, new DriverTest("testClientURL"));
1:         setBaseProps(suite, new DriverTest("testDbNameWithSpaces"));
1:         
0:         // This test needs to run in a new single use database as we're setting
0:         // a number of properties
0:         TestSetup setup = TestConfiguration.singleUseDatabaseDecorator(suite);
1:         
0:         // also, we need a couple of extra databases
0:         for (int i = 0; i < ADDITIONAL_DBS.length; i++)
1:         {
0:             setup = TestConfiguration.additionalDatabaseDecorator(setup,
0:                     ADDITIONAL_DBS[i]);
1:         }
1:         
0:         return setup;
1:     }
1:     
0:     private static void setBaseProps(TestSuite suite, Test test) 
1:     {
1:         Properties dbprops = new Properties();
1: 
1:         // Use DatabasePropertyTestSetup to add some settings.
1:         // DatabasePropertyTestSetup uses SYSCS_SET_DATABASE_PROPERTY
1:         // so users are added at database level.
1:         // Note, that authentication is not switched on.
1:         dbprops.setProperty("derby.infolog.append", "true");
1:         dbprops.setProperty("derby.debug.true", "AuthenticationTrace");
1:         dbprops.setProperty("derby.user.APP", "xxxx");
1:         dbprops.setProperty("derby.user.testuser", "testpass");
1:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
0:         dbprops.setProperty("derby.database.users." + dbName, "testuser,APP");
1:         test = new DatabasePropertyTestSetup (test, dbprops, true);
1:         suite.addTest(test);
1:     }
1:     
1:     /**
1:      * Load the driver and check java.sql.Driver.jdbcCompliant() and
1:      * driver.get*Version
1:      * @throws Exception
1:      */
0:     public static void testDriverCompliantVersion() throws Exception 
1:     {   
1:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1: 
1:         loadDriver();
1:         String defaultdburl = url + ";create=true";
1:         
1:         // Test that we loaded the right driver by making a connection
1:         Driver driver = DriverManager.getDriver(defaultdburl);
1:         Properties props = new Properties();
1:         props.put("user", "testuser");
1:         props.put("password", "testpass");
1:         Connection conn = DriverManager.getConnection(defaultdburl, props);
1:         // Driver should be jdbc compliant.
1:         assertTrue(driver.jdbcCompliant());
1: 
1:         // compare driver.get*Version() with DatabaseMetadata.getDriver*Version.
1:         DatabaseMetaData dbmd = conn.getMetaData();
1: 
1:         assertEquals(dbmd.getDriverMajorVersion(), driver.getMajorVersion());
1:         assertEquals(dbmd.getDriverMinorVersion(), driver.getMinorVersion());
1:         
1:         conn.close();
1:     }
1:     
1:     /**
1:      * Check that drivers accept the correct urls and reject those for other supported drivers.
1:      * 
1:      * @throws SQLException, Exception
1:      */
0:     public static void testAcceptsURL() throws SQLException, Exception {
1:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:         String orgurl = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1: 
1:         loadDriver();
1:         String defaultdburl = orgurl + ";create=true";
1:         
1:         // Test that we loaded the right driver by making a connection
1:         Driver driver = DriverManager.getDriver(defaultdburl);
1: 
1:         int  frameworkOffset;
1:         int EMBEDDED_OFFSET = 0;
1:         int DERBYNETCLIENT_OFFSET = 1;
0:         int DERBYNET_OFFSET = 2;   // JCC
1:         if (usingDerbyNetClient())
1:             frameworkOffset = DERBYNETCLIENT_OFFSET;
0:         else if (usingDerbyNet())
0:             frameworkOffset = DERBYNET_OFFSET; // JCC
1:         else // assume (usingEmbedded())
1:             frameworkOffset = EMBEDDED_OFFSET;
1:         
1:         // URLS to check.  New urls need to also be added to the acceptsUrl table
1:         String EMBEDDED_URL = "jdbc:derby:";
1:         String INVALID_URL = "jdbc:db2j:";
1:         String hostName = TestConfiguration.getCurrent().getHostName();
1:         int port = TestConfiguration.getCurrent().getPort();
1:         String CLIENT_URL = 
1:             "jdbc:derby://"+hostName+":"+port+"/"+dbName+";create=true";
0:         String JCC_URL = 
0:             "jdbc:derby:net://"+hostName+":"+port+"/"+dbName+";create=true";
1:         
1:         String[] urls = new String[]
1:         {
1:             EMBEDDED_URL,
1:             CLIENT_URL,
0:             JCC_URL,
1:             INVALID_URL,
1:         };
1: 
1:         // Table that shows whether tested urls should return true for 
1:         // acceptsURL under the given framework
1:         // The acceptsURLTable uses  the frameworkOffset column int he table 
1:         // to check for valid results for each framework
1:         boolean[][] acceptsURLTable = new boolean[][]
1:         {
0:         // Framework/url      EMBEDDED     DERBYNETCLIENT       DERBYNET (JCC)
0:         /* EMBEDDED_URL*/  {   true      ,  false           ,   false    },
0:         /* CLIENT_URL  */  {   false     ,  true            ,   false    },     
0:         /* JCC_URL     */  {   false     ,  false           ,   true     },
0:         /* INVALID_URL */  {   false     ,  false           ,   false    } 
1:         };
1: 
1:         for (int u = 0; u < urls.length;u++)
1:         {
1:             String url = urls[u];
1:             boolean expectedAcceptance = acceptsURLTable[u][frameworkOffset];
1:             boolean actualAcceptance = driver.acceptsURL(url);
1:             assertEquals(expectedAcceptance, actualAcceptance);
1:         }
1:     }
1:     
1:     /**
1:      * Tests that embedded attributes can be specified in either url or info 
1:      * argument to connect
0:      * DERBY-530. Only valid for embedded driver and client. JCC has a 
0:      * different url format for embedded attributes
1:      */
0:     public static void testEmbeddedAttributes() throws SQLException
1:     {
0:         // JCC can't take embedded attributes in info or as normal url 
0:         // attributes, so not tested here.
0:         if (usingDerbyNet())
1:             return;
1:         
1:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:         String protocol = 
1:             TestConfiguration.getCurrent().getJDBCClient().getUrlBase();
1:         if (usingDerbyNetClient())
1:             protocol = protocol + TestConfiguration.getCurrent().getHostName()
1:             + ":" + TestConfiguration.getCurrent().getPort() + "/";
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         
1:         Properties info = new Properties();
1:         // create attribute as property
1:         info.setProperty("create","true");
1:         // networkserver / DerbyNetClient tags on create to url
1:         if (usingEmbedded())
1:             assertConnect(true, protocol + "testcreatedb1", info);
1:         else
1:             assertConnect(false, protocol + "testcreatedb1", info);
1:         
1:         // create attribute in url
1:         if (usingEmbedded())
1:             assertConnect(false, protocol + "testcreatedb2;create=true", null);
1:         else 
1:             assertConnect(true, protocol + "testcreatedb2;create=true", null);
1:         
1:         // user/password in properties
1:         info.clear();
1:         info.setProperty("user","APP");
1:         info.setProperty("password", "xxxx");
1:         if (usingEmbedded())
1:             assertConnect(true, url, info);
1:         else 
1:             assertConnect(false, url, info);
1:         
1:         // user/password  in url
1:         assertConnect(false, 
1:             url + ";user=testuser;password=testpass", null);
1:         
1:         // user in url, password in property
1:         info.clear();
1:         info.setProperty("password","testpass");
1:         assertConnect(false, url + ";user=testusr",info);
1: 
1:         // different users in url and in properties. URL is the winner
1:         info.clear();
1:         info.setProperty("user","APP");
1:         info.setProperty("password","xxxx");
1:         assertConnect(false, 
1:             url + ";user=testuser;password=testpass", null);
1:         
1:         // shutdown with properties
1:         info.clear();
1:         info.setProperty("shutdown","true");                
1:         try {
1:             assertConnect(false, protocol + "testcreatedb1", info);
1:         } catch (SQLException se)
1:         {
1:             assertSQLState("08006", se);
1:         }
1:     }
1:         
1:     /**
1:      * Tests that client side attributes cann be specified in either url or
1:      * as info argument to connect.
1:      * DERBY-530. 
1:      */
0:     public static void testClientAttributes() throws SQLException
1:     {
1:         if (!usingDerbyNetClient())
1:             return;
1:         
1:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1: 
1:         Properties info = new Properties();
1:         String traceFile = "trace1.out";
1:         
1:         // traceFile attribute in url
1:         assertConnect(true, url + ";traceFile=" + traceFile, info);
1:         
1:         traceFile = "trace2.out";
1:         // traceFile attribute in property
1:         info.setProperty("traceFile",traceFile);
1:         assertConnect(false, url, info);
1:         assertTraceFilesExist();
1:     }
1: 
1:     /**
1:      * Check that trace files exist
1:      */
1:     private static void assertTraceFilesExist() 
1:     {
1:         
0:         AccessController.doPrivileged(new java.security.PrivilegedAction() {
0:             public Object run() {
0:                 for (int i=0 ; i < 2 ; i++)
1:                 {   
0:                     String traceFileName = "trace" + (i+1) + ".out";
0:                     File traceFile = new File(traceFileName);
0:                     //System.out.println("user.dir=" + System.getProperty("user.dir"));
0:                     //System.out.println("fullpath = " + traceFile.getAbsolutePath());
0:                         assertTrue(traceFile.exists());
1:                 } 
0:                 return null;
1:             }
0:         });
1:     }
1: 
1:     /**
1:      * Tests client URLs to see connection is successful or the correct exception is thrown.
1:      */
0:     public static void testClientURL() throws SQLException {
1:         if (!usingDerbyNetClient())
1:             return;
1:         
1:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:         String protocol = 
1:             TestConfiguration.getCurrent().getJDBCClient().getUrlBase();
1:         if (usingDerbyNetClient())
1:             protocol = protocol + TestConfiguration.getCurrent().getHostName()
1:             + ":" + TestConfiguration.getCurrent().getPort() + "/";
1:         
1:         Properties info = null;     //test with null Properties object
1: 
0:         String CLIENT_URL_WITH_COLON1 = protocol + dbName + ":create=true";
0:         //String CLIENT_URL_WITH_COLON2 = protocol + DERBY_SYSTEM_HOME + 
1:         //   File.separator + dbName + ":create=true";
0:         // String CLIENT_URL_WITH_DOUBLE_QUOTES1 = 
1:         //     protocol + "\"" + dbName + "\";create=true";  
0:         // String CLIENT_URL_WITH_DOUBLE_QUOTES2 = protocol + "\"" + 
1:         //     DERBY_SYSTEM_HOME + File.separator + dbName + "\";create=true"; 
0:         // String CLIENT_URL_WITH_SINGLE_QUOTES1 = protocol + "'" + 
1:         //     DERBY_SYSTEM_HOME + File.separator + dbName + "';create=true"; 
0:         String CLIENT_URL_WITH_SINGLE_QUOTES2 = 
1:             protocol + "'" + dbName + "';create=true";
1:         
1:         //Client URLS
0:         String[] clientUrls = new String[]
1:         {
0:             CLIENT_URL_WITH_COLON1,
1:             //CLIENT_URL_WITH_COLON2,
1:             //CLIENT_URL_WITH_DOUBLE_QUOTES1,
1:             //CLIENT_URL_WITH_DOUBLE_QUOTES2,
1:             //CLIENT_URL_WITH_SINGLE_QUOTES1,
0:             CLIENT_URL_WITH_SINGLE_QUOTES2
1:         };
1:         
0:         for (int i = 0; i < clientUrls.length;i++)
1:         {
0:             String url = clientUrls[i];
1:             try{
0:                 if (url.equals(CLIENT_URL_WITH_COLON1))
1:                 {
1:                     Driver driver = DriverManager.getDriver(url);
1:                     assertNull(driver.connect(url,info));
1:                 }
1:                 else
1:                     assertConnect(true, url, info);
1:             }
1:             catch(SQLException se){
1:                 fail ("did not expect an exception");
1:             }
1:         }
1:     }   
1:     
1:     /**
1:      * Tests URL with spaces in database name to check create and connect works. 
1:      * (DERBY-618). Make sure that the specified database gets created. We need 
1:      * to check this because even without the patch for DERBY-618, no exception
1:      * gets thrown when we try to connect to a database name with spaces. 
1:      * Instead, client driver extracts the database name as the string before 
1:      * the first occurence of space separator. Hence the database which gets 
1:      * created is wrong. e.g, if we specified database name as 
1:      * "db name with spaces", the database that got created by client driver 
1:      * was "db", which was wrong. We can check this by checking the correct URL
1:      * is returned by call to conn.getMetaData().getURL(). This is currently 
1:      * checked inside the testConnect method. We do not explicilty check the 
1:      * database directory creation since this check fails in remote server 
1:      * testing.       
1:      * 
1:      * @throws SQLException
1:      */
0:     public static void testDbNameWithSpaces() throws SQLException {
1:         
1:         Properties info = null;
1:         String url = null;
1:         
1:         String protocol = 
1:             TestConfiguration.getCurrent().getJDBCClient().getUrlBase();
1:         if (usingDerbyNetClient())
1:             protocol = protocol + TestConfiguration.getCurrent().getHostName()
1:             + ":" + TestConfiguration.getCurrent().getPort() + "/";
0:         else if (usingDerbyNet())
0:             protocol = protocol + "net:" + 
0:             TestConfiguration.getCurrent().getHostName() + ":" + 
0:             TestConfiguration.getCurrent().getPort() + "/";
1:         
0:         String EMBEDDED_URL_WITH_SPACES = 
0:             protocol + DB_NAME_WITH_SPACES + ";create=true";
0:         String CLIENT_URL_WITH_SPACES = 
0:             protocol + DB_NAME_WITH_SPACES + ";create=true";
0:         String JCC_URL_WITH_SPACES = 
0:             protocol + DB_NAME_WITH_SPACES + ";create=true";
1:         
0:         if(usingEmbedded())
0:             url = EMBEDDED_URL_WITH_SPACES;
0:         else if(usingDerbyNetClient()) 
0:             url = CLIENT_URL_WITH_SPACES;
0:         else if(usingDerbyNet()) {
0:             url = JCC_URL_WITH_SPACES;
0:             // JCC requires user and password
0:             info =  new Properties();
0:             info.put("user", "tester");
0:             info.put("password", "testpass");
1:         }
1:         
1:         assertConnect(false, url, info);
1:     }
1:     
1:     /**
1:      * Do java.sql.Driver.connect(String url, Properties info call)
1:      * 
1:      * @param expectUrlEqualsGetUrl boolean indicating embedded would
1:      *                  expect the url passed in to equal metadata.getURL()
1:      * @param url       url to pass to Driver.connect()
1:      * @param info      properties to pass to Driver.Connect()
1:      * 
1:      * @throws SQLException on error.
1:      */
0:     private static Connection assertConnect(
1:         boolean expectUrlEqualsGetUrl, String url, Properties info) 
1:     throws SQLException
1:     {
1:         Driver driver = DriverManager.getDriver(url);
1: 
0:         Connection conn = driver.connect(url,info);
1:         assertNotNull(conn);
1:    
1:         if (expectUrlEqualsGetUrl)
1:             assertEquals(url, conn.getMetaData().getURL());
1:         else
1:             assertNotSame(url, conn.getMetaData().getURL());
1:         ResultSet rs = 
1:             conn.createStatement().executeQuery("VALUES(CURRENT SCHEMA)");
1:         rs.next();
1:         assertEquals(
1:             rs.getString(1), conn.getMetaData().getUserName().toUpperCase());
1:         conn.close();
0:         return conn;
1:     }
1: 
1:     /**
1:        Load the appropriate driver for the current framework
1:      */
1:     private static void loadDriver()
1:     {
1:         String driverClass =
1:             TestConfiguration.getCurrent().getJDBCClient().getJDBCDriverName();
1:         try {
0:             Class.forName(driverClass).newInstance();
1:         } catch (Exception e) {
1:             fail ("could not instantiate driver");
1:         }
1:     }
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:cd1bd2a
/////////////////////////////////////////////////////////////////////////
0:         if (usingDB2Client())
/////////////////////////////////////////////////////////////////////////
0:         else if (usingDB2Client())
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3078764
/////////////////////////////////////////////////////////////////////////
1:     private static Test baseSuite(String name) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testDriverCompliantVersion() throws Exception 
/////////////////////////////////////////////////////////////////////////
1:     public void testAcceptsURL() throws SQLException, Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testEmbeddedAttributes() throws SQLException
/////////////////////////////////////////////////////////////////////////
1:     public void testClientAttributes() throws SQLException
/////////////////////////////////////////////////////////////////////////
1:     public void testClientURL() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public void testDbNameWithSpaces() throws SQLException {
============================================================================