2:eac0369: /*
6:eac0369: 
1:345de35:    Derby - Class org.apache.derby.jdbc.EmbeddedDriver
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.jdbc;
1:eac0369: 
1:850aba4: import java.io.PrintWriter;
1:eac0369: import java.sql.Connection;
1:850aba4: import java.sql.Driver;
1:850aba4: import java.sql.DriverManager;
1:eac0369: import java.sql.DriverPropertyInfo;
1:eac0369: import java.sql.SQLException;
1:eec86ed: import java.sql.SQLFeatureNotSupportedException;
1:eac0369: import java.util.Properties;
1:eec86ed: import java.util.logging.Logger;
1:eac0369: import org.apache.derby.iapi.jdbc.JDBCBoot;
1:850aba4: import org.apache.derby.iapi.reference.Attribute;
1:eec86ed: import org.apache.derby.impl.jdbc.Util;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:cd065ba: 	The embedded JDBC driver (Type 4) for Derby.
1:eac0369: 	<P>
1:eac0369: 	The driver automatically supports the correct JDBC specification version
1:eac0369: 	for the Java Virtual Machine's environment.
1:eac0369: 	<UL>
1:d489155: 	<LI> JDBC 4.0 - Java SE 6
1:374d2f1: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4, J2SE 5.0
1:eac0369: 	</UL>
1:eac0369: 
1:eac0369: 	<P>
1:eac0369: 	Loading this JDBC driver boots the database engine
1:eac0369: 	within the same Java virtual machine.
1:eac0369: 	<P>
1:cd065ba: 	The correct code to load the Derby engine using this driver is
1:eac0369: 	(with approriate try/catch blocks):
1:eac0369: 	 <PRE>
1:eac0369: 	 Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
1:eac0369: 
1:eac0369: 	 // or
1:eac0369: 
1:eac0369:      new org.apache.derby.jdbc.EmbeddedDriver();
1:eac0369: 
1:eac0369:     
1:eac0369: 	</PRE>
1:eac0369: 	When loaded in this way, the class boots the actual JDBC driver indirectly.
1:eac0369: 	The JDBC specification recommends the Class.ForName method without the .newInstance()
1:eac0369: 	method call, but adding the newInstance() guarantees
1:cd065ba: 	that Derby will be booted on any Java Virtual Machine.
1:eac0369: 
1:eac0369: 	<P>
1:d489155: 	Note that you do not need to manually load the driver this way if you are
1:d489155: 	running on Jave SE 6 or later. In that environment, the driver will be
1:d489155: 	automatically loaded for you when your application requests a connection to
1:d489155: 	a Derby database.
1:d489155: 	<P>
1:eac0369: 	Any initial error messages are placed in the PrintStream
1:eac0369: 	supplied by the DriverManager. If the PrintStream is null error messages are
1:cd065ba: 	sent to System.err. Once the Derby engine has set up an error
1:eac0369: 	logging facility (by default to derby.log) all subsequent messages are sent to it.
1:eac0369: 	<P>
1:eac0369: 	By convention, the class used in the Class.forName() method to
1:eac0369: 	boot a JDBC driver implements java.sql.Driver.
1:eac0369: 
1:eac0369: 	This class is not the actual JDBC driver that gets registered with
1:cd065ba: 	the Driver Manager. It proxies requests to the registered Derby JDBC driver.
1:eac0369: 
1:eac0369: 	@see java.sql.DriverManager
1:eac0369: 	@see java.sql.DriverManager#getLogStream
1:eac0369: 	@see java.sql.Driver
1:eac0369: 	@see java.sql.SQLException
1:eac0369: */
1:eac0369: 
1:e3e3ca3: public class EmbeddedDriver  implements Driver {
1:eac0369: 
1:eac0369: 	static {
1:eac0369: 		EmbeddedDriver.boot();
4:eac0369: 	}
1:e3e3ca3: 
1:eac0369: 	// Boot from the constructor as well to ensure that
1:cd065ba: 	// Class.forName(...).newInstance() reboots Derby 
1:eac0369: 	// after a shutdown inside the same JVM.
1:eac0369: 	public EmbeddedDriver() {
1:eac0369: 		EmbeddedDriver.boot();
1:eac0369: 	}
1:e3e3ca3: 
1:eac0369: 	/*
1:eac0369: 	** Methods from java.sql.Driver.
1:eac0369: 	*/
1:eac0369: 	/**
1:eac0369: 		Accept anything that starts with <CODE>jdbc:derby:</CODE>.
1:eac0369: 		@exception SQLException if a database-access error occurs.
1:eac0369:     @see java.sql.Driver
1:eac0369: 	*/
1:eac0369: 	public boolean acceptsURL(String url) throws SQLException {
1:e3e3ca3: 		return getDriverModule().acceptsURL(url);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Connect to the URL if possible
1:eac0369: 		@exception SQLException illegal url or problem with connectiong
1:eac0369:     @see java.sql.Driver
1:eac0369:   */
1:eac0369: 	public Connection connect(String url, Properties info)
1:eac0369: 		throws SQLException
1:eac0369: 	{
1:e3e3ca3: 		return getDriverModule().connect(url, info);
1:eac0369: 	}
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Returns an array of DriverPropertyInfo objects describing possible properties.
1:eac0369:     @exception SQLException if a database-access error occurs.
1:eac0369:     @see java.sql.Driver
1:eac0369:    */
1:eac0369: 	public  DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
1:eac0369: 		throws SQLException
1:eac0369: 	{
1:e3e3ca3: 		return getDriverModule().getPropertyInfo(url, info);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Returns the driver's major version number. 
1:eac0369:      @see java.sql.Driver
1:eac0369:      */
1:eac0369: 	public int getMajorVersion() {
2:eac0369: 		try {
1:e3e3ca3: 			return (getDriverModule().getMajorVersion());
1:eac0369: 		}
2:eac0369: 		catch (SQLException se) {
1:eac0369: 			return 0;
1:eac0369: 		}
1:eac0369: 	}
1:e3e3ca3: 
1:eac0369:     /**
1:eac0369:      * Returns the driver's minor version number.
1:eac0369:      @see java.sql.Driver
1:eac0369:      */
1:eac0369: 	public int getMinorVersion() {
1:eac0369: 		try {
1:e3e3ca3: 			return (getDriverModule().getMinorVersion());
1:eac0369: 		}
1:eac0369: 		catch (SQLException se) {
1:eac0369: 			return 0;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369:   /**
1:eac0369:    * Report whether the Driver is a genuine JDBC COMPLIANT (tm) driver.
1:eac0369:      @see java.sql.Driver
1:eac0369:    */
1:eac0369: 	public boolean jdbcCompliant() {
1:eac0369: 		try {
1:e3e3ca3: 			return (getDriverModule().jdbcCompliant());
1:eac0369: 		}
1:eac0369: 		catch (SQLException se) {
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:e3e3ca3:   /**
1:e3e3ca3:    * Lookup the booted driver module appropriate to our JDBC level.
1:e3e3ca3:    */
1:e3e3ca3: 	private	Driver	getDriverModule()
1:e3e3ca3: 		throws SQLException
1:e3e3ca3: 	{
1:e3e3ca3: 		return AutoloadedDriver.getDriverModule();
1:e3e3ca3: 	}
1:e3e3ca3: 
1:e3e3ca3: 
1:e3e3ca3:    /*
1:e3e3ca3: 	** Find the appropriate driver for our JDBC level and boot it.
1:e3e3ca3: 	*  This is package protected so that AutoloadedDriver can call it.
1:e3e3ca3: 	*/
1:e3e3ca3: 	static void boot() {
1:850aba4:         PrintWriter pw = DriverManager.getLogWriter();
1:eac0369: 
1:850aba4:         if (pw == null) {
1:850aba4:             pw = new PrintWriter(System.err, true);
1:850aba4:         }
1:eac0369: 
1:a0dbbd7:         try {
1:a0dbbd7:             new JDBCBoot().boot(Attribute.PROTOCOL, pw);
1:a0dbbd7:         }
1:a0dbbd7:         catch (Throwable t)
1:a0dbbd7:         {
1:a0dbbd7:             t.printStackTrace( pw );
1:a0dbbd7:             if ( t instanceof RuntimeException ) { throw (RuntimeException) t; }
1:a0dbbd7:         }
1:eac0369: 	}
1:eac0369: 
1:eec86ed:     ////////////////////////////////////////////////////////////////////
1:eec86ed:     //
1:eec86ed:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:eec86ed:     //
1:eec86ed:     ////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eec86ed:     public  Logger getParentLogger() throws SQLFeatureNotSupportedException
1:eec86ed:     {
1:eec86ed:         throw (SQLFeatureNotSupportedException) Util.notImplemented( "getParentLogger()" );
1:eec86ed:     }
1:eac0369: 	
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             new JDBCBoot().boot(Attribute.PROTOCOL, pw);
1:         }
1:         catch (Throwable t)
1:         {
1:             t.printStackTrace( pw );
1:             if ( t instanceof RuntimeException ) { throw (RuntimeException) t; }
1:         }
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLFeatureNotSupportedException;
1: import java.util.logging.Logger;
1: import org.apache.derby.impl.jdbc.Util;
/////////////////////////////////////////////////////////////////////////
1:     ////////////////////////////////////////////////////////////////////
1:     //
1:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:     //
1:     ////////////////////////////////////////////////////////////////////
1:     public  Logger getParentLogger() throws SQLFeatureNotSupportedException
1:     {
1:         throw (SQLFeatureNotSupportedException) Util.notImplemented( "getParentLogger()" );
1:     }
commit:d489155
/////////////////////////////////////////////////////////////////////////
1: 	<LI> JDBC 4.0 - Java SE 6
/////////////////////////////////////////////////////////////////////////
1: 	Note that you do not need to manually load the driver this way if you are
1: 	running on Jave SE 6 or later. In that environment, the driver will be
1: 	automatically loaded for you when your application requests a connection to
1: 	a Derby database.
1: 	<P>
commit:e3e3ca3
/////////////////////////////////////////////////////////////////////////
1: public class EmbeddedDriver  implements Driver {
0: 	private	AutoloadedDriver	_autoloadedDriver;
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		return getDriverModule().acceptsURL(url);
/////////////////////////////////////////////////////////////////////////
1: 		return getDriverModule().connect(url, info);
/////////////////////////////////////////////////////////////////////////
1: 		return getDriverModule().getPropertyInfo(url, info);
/////////////////////////////////////////////////////////////////////////
1: 			return (getDriverModule().getMajorVersion());
1: 
1: 			return (getDriverModule().getMinorVersion());
/////////////////////////////////////////////////////////////////////////
1: 			return (getDriverModule().jdbcCompliant());
1:   /**
1:    * Lookup the booted driver module appropriate to our JDBC level.
1:    */
1: 	private	Driver	getDriverModule()
1: 		throws SQLException
1: 	{
1: 		return AutoloadedDriver.getDriverModule();
1: 	}
1: 
1: 
1:    /*
1: 	** Find the appropriate driver for our JDBC level and boot it.
1: 	*  This is package protected so that AutoloadedDriver can call it.
1: 	*/
1: 	static void boot() {
/////////////////////////////////////////////////////////////////////////
1: 	
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:850aba4
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintWriter;
1: import java.sql.Driver;
1: import java.sql.DriverManager;
1: import org.apache.derby.iapi.reference.Attribute;
/////////////////////////////////////////////////////////////////////////
1:         PrintWriter pw = DriverManager.getLogWriter();
1:         if (pw == null) {
1:             pw = new PrintWriter(System.err, true);
1:         }
0:         new JDBCBoot().boot(Attribute.PROTOCOL, pw);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:51cf095
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:fb8cf6e
/////////////////////////////////////////////////////////////////////////
commit:374d2f1
/////////////////////////////////////////////////////////////////////////
1: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4, J2SE 5.0
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.jdbc.EmbeddedDriver
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.jdbc
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.jdbc;
1: 
0: import java.sql.DriverManager;
0: import java.sql.Driver;
1: import java.sql.Connection;
1: import java.sql.DriverPropertyInfo;
1: import java.sql.SQLException;
1: 
0: import java.io.PrintStream;
1: import java.util.Properties;
1: 
0: import org.apache.derby.iapi.reference.MessageId;
0: import org.apache.derby.iapi.reference.Attribute;
0: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.jdbc.JDBCBoot;
1: 
1: 
1: /**
0: 	The embedded JDBC driver (Type 4) for Cloudscape.
1: 	<P>
1: 	The driver automatically supports the correct JDBC specification version
1: 	for the Java Virtual Machine's environment.
1: 	<UL>
0: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4
0: 	<LI> JDBC 2.0 - Java 2 - JDK 1.2,1.3
1: 	</UL>
1: 
1: 	<P>
1: 	Loading this JDBC driver boots the database engine
1: 	within the same Java virtual machine.
1: 	<P>
0: 	The correct code to load a Cloudscape engine using this driver is
1: 	(with approriate try/catch blocks):
1: 	 <PRE>
1: 	 Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
1: 
1: 	 // or
1: 
1:      new org.apache.derby.jdbc.EmbeddedDriver();
1: 
1:     
1: 	</PRE>
1: 	 When loaded in this way, the class boots the actual JDBC driver indirectly.
1: 	The JDBC specification recommends the Class.ForName method without the .newInstance()
1: 	method call, but adding the newInstance() guarantees
0: 	that Cloudscape will be booted on any Java Virtual Machine.
1: 
1: 	<P>
1: 	Any initial error messages are placed in the PrintStream
1: 	supplied by the DriverManager. If the PrintStream is null error messages are
0: 	sent to System.err. Once the Cloudscape engine has set up an error
1: 	logging facility (by default to derby.log) all subsequent messages are sent to it.
1: 	<P>
1: 	By convention, the class used in the Class.forName() method to
1: 	boot a JDBC driver implements java.sql.Driver.
1: 
1: 	This class is not the actual JDBC driver that gets registered with
0: 	the Driver Manager. It proxies requests to the registered Cloudscape JDBC driver.
1: 
1: 	@see java.sql.DriverManager
1: 	@see java.sql.DriverManager#getLogStream
1: 	@see java.sql.Driver
1: 	@see java.sql.SQLException
1: */
1: 
0: public class EmbeddedDriver implements Driver {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	static {
1: 
1: 		EmbeddedDriver.boot();
1: 	}
1: 
1: 	// Boot from the constructor as well to ensure that
0: 	// Class.forName(...).newInstance() reboots Cloudscape
1: 	// after a shutdown inside the same JVM.
1: 	public EmbeddedDriver() {
1: 		EmbeddedDriver.boot();
1: 	}
1: 
1: 	/*
1: 	** Methods from java.sql.Driver.
1: 	*/
1: 	/**
1: 		Accept anything that starts with <CODE>jdbc:derby:</CODE>.
1: 		@exception SQLException if a database-access error occurs.
1:     @see java.sql.Driver
1: 	*/
1: 	public boolean acceptsURL(String url) throws SQLException {
0: 		return getRegisteredDriver().acceptsURL(url);
1: 	}
1: 
1: 	/**
1: 		Connect to the URL if possible
1: 		@exception SQLException illegal url or problem with connectiong
1:     @see java.sql.Driver
1:   */
1: 	public Connection connect(String url, Properties info)
1: 		throws SQLException
1: 	{
0: 		return getRegisteredDriver().connect(url, info);
1: 	}
1: 
1:   /**
1:    * Returns an array of DriverPropertyInfo objects describing possible properties.
1:     @exception SQLException if a database-access error occurs.
1:     @see java.sql.Driver
1:    */
1: 	public  DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
1: 		throws SQLException
1: 	{
0: 		return getRegisteredDriver().getPropertyInfo(url, info);
1: 	}
1: 
1:     /**
1:      * Returns the driver's major version number. 
1:      @see java.sql.Driver
1:      */
1: 	public int getMajorVersion() {
1: 		try {
0: 			return (getRegisteredDriver().getMajorVersion());
1: 		}
1: 		catch (SQLException se) {
1: 			return 0;
1: 		}
1: 	}
1:     /**
1:      * Returns the driver's minor version number.
1:      @see java.sql.Driver
1:      */
1: 	public int getMinorVersion() {
1: 		try {
0: 			return (getRegisteredDriver().getMinorVersion());
1: 		}
1: 		catch (SQLException se) {
1: 			return 0;
1: 		}
1: 	}
1: 
1:   /**
1:    * Report whether the Driver is a genuine JDBC COMPLIANT (tm) driver.
1:      @see java.sql.Driver
1:    */
1: 	public boolean jdbcCompliant() {
1: 		try {
0: 			return (getRegisteredDriver().jdbcCompliant());
1: 		}
1: 		catch (SQLException se) {
1: 			return false;
1: 		}
1: 	}
1: 
0: 	private static void boot() {
0: 		PrintStream ps = DriverManager.getLogStream();
1: 
0: 		if (ps == null)
0: 			ps = System.err;
1: 
0: 		new JDBCBoot().boot(Attribute.PROTOCOL, ps);
1: 	}
1: 
1: 	/*
0: 	** Retrieve the actual Registered Driver,
0: 	** probe the DriverManager in order to get it.
1: 	*/
0: 	private Driver getRegisteredDriver() throws SQLException {
1: 
1: 		try {
0: 		  return DriverManager.getDriver(Attribute.PROTOCOL);
1: 		}
1: 		catch (SQLException se) {
0: 			// Driver not registered 
0: 			throw new SQLException(MessageService.getTextMessage(MessageId.CORE_JDBC_DRIVER_UNREGISTERED));
1: 		}
1: 	}
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:cd065ba
/////////////////////////////////////////////////////////////////////////
1: 	The embedded JDBC driver (Type 4) for Derby.
/////////////////////////////////////////////////////////////////////////
1: 	The correct code to load the Derby engine using this driver is
/////////////////////////////////////////////////////////////////////////
0: 	When loaded in this way, the class boots the actual JDBC driver indirectly.
1: 	that Derby will be booted on any Java Virtual Machine.
1: 	sent to System.err. Once the Derby engine has set up an error
1: 	the Driver Manager. It proxies requests to the registered Derby JDBC driver.
/////////////////////////////////////////////////////////////////////////
1: 	// Class.forName(...).newInstance() reboots Derby 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.jdbc
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.jdbc;
0: 
0: import java.sql.DriverManager;
0: import java.sql.Driver;
0: import java.sql.Connection;
0: import java.sql.DriverPropertyInfo;
0: import java.sql.SQLException;
0: 
0: import java.io.PrintStream;
0: import java.util.Properties;
0: 
0: import org.apache.derby.iapi.reference.MessageId;
0: import org.apache.derby.iapi.reference.Attribute;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.jdbc.JDBCBoot;
0: 
0: 
0: /**
0: 	The embedded JDBC driver (Type 4) for Cloudscape.
0: 	<P>
0: 	The driver automatically supports the correct JDBC specification version
0: 	for the Java Virtual Machine's environment.
0: 	<UL>
0: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4
0: 	<LI> JDBC 2.0 - Java 2 - JDK 1.2,1.3
0: 	</UL>
0: 
0: 	<P>
0: 	Loading this JDBC driver boots the database engine
0: 	within the same Java virtual machine.
0: 	<P>
0: 	The correct code to load a Cloudscape engine using this driver is
0: 	(with approriate try/catch blocks):
0: 	 <PRE>
0: 	 Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
0: 
0: 	 // or
0: 
0:      new org.apache.derby.jdbc.EmbeddedDriver();
0: 
0:     
0: 	</PRE>
0: 	 When loaded in this way, the class boots the actual JDBC driver indirectly.
0: 	The JDBC specification recommends the Class.ForName method without the .newInstance()
0: 	method call, but adding the newInstance() guarantees
0: 	that Cloudscape will be booted on any Java Virtual Machine.
0: 
0: 	<P>
0: 	Any initial error messages are placed in the PrintStream
0: 	supplied by the DriverManager. If the PrintStream is null error messages are
0: 	sent to System.err. Once the Cloudscape engine has set up an error
0: 	logging facility (by default to derby.log) all subsequent messages are sent to it.
0: 	<P>
0: 	By convention, the class used in the Class.forName() method to
0: 	boot a JDBC driver implements java.sql.Driver.
0: 
0: 	This class is not the actual JDBC driver that gets registered with
0: 	the Driver Manager. It proxies requests to the registered Cloudscape JDBC driver.
0: 
0: 	@see java.sql.DriverManager
0: 	@see java.sql.DriverManager#getLogStream
0: 	@see java.sql.Driver
0: 	@see java.sql.SQLException
0: */
0: 
0: public class EmbeddedDriver implements Driver {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	static {
0: 
0: 		EmbeddedDriver.boot();
0: 	}
0: 
0: 	// Boot from the constructor as well to ensure that
0: 	// Class.forName(...).newInstance() reboots Cloudscape
0: 	// after a shutdown inside the same JVM.
0: 	public EmbeddedDriver() {
0: 		EmbeddedDriver.boot();
0: 	}
0: 
0: 	/*
0: 	** Methods from java.sql.Driver.
0: 	*/
0: 	/**
0: 		Accept anything that starts with <CODE>jdbc:derby:</CODE>.
0: 		@exception SQLException if a database-access error occurs.
0:     @see java.sql.Driver
0: 	*/
0: 	public boolean acceptsURL(String url) throws SQLException {
0: 		return getRegisteredDriver().acceptsURL(url);
0: 	}
0: 
0: 	/**
0: 		Connect to the URL if possible
0: 		@exception SQLException illegal url or problem with connectiong
0:     @see java.sql.Driver
0:   */
0: 	public Connection connect(String url, Properties info)
0: 		throws SQLException
0: 	{
0: 		return getRegisteredDriver().connect(url, info);
0: 	}
0: 
0:   /**
0:    * Returns an array of DriverPropertyInfo objects describing possible properties.
0:     @exception SQLException if a database-access error occurs.
0:     @see java.sql.Driver
0:    */
0: 	public  DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
0: 		throws SQLException
0: 	{
0: 		return getRegisteredDriver().getPropertyInfo(url, info);
0: 	}
0: 
0:     /**
0:      * Returns the driver's major version number. 
0:      @see java.sql.Driver
0:      */
0: 	public int getMajorVersion() {
0: 		try {
0: 			return (getRegisteredDriver().getMajorVersion());
0: 		}
0: 		catch (SQLException se) {
0: 			return 0;
0: 		}
0: 	}
0:     /**
0:      * Returns the driver's minor version number.
0:      @see java.sql.Driver
0:      */
0: 	public int getMinorVersion() {
0: 		try {
0: 			return (getRegisteredDriver().getMinorVersion());
0: 		}
0: 		catch (SQLException se) {
0: 			return 0;
0: 		}
0: 	}
0: 
0:   /**
0:    * Report whether the Driver is a genuine JDBC COMPLIANT (tm) driver.
0:      @see java.sql.Driver
0:    */
0: 	public boolean jdbcCompliant() {
0: 		try {
0: 			return (getRegisteredDriver().jdbcCompliant());
0: 		}
0: 		catch (SQLException se) {
0: 			return false;
0: 		}
0: 	}
0: 
0: 	private static void boot() {
0: 		PrintStream ps = DriverManager.getLogStream();
0: 
0: 		if (ps == null)
0: 			ps = System.err;
0: 
0: 		new JDBCBoot().boot(Attribute.PROTOCOL, ps);
0: 	}
0: 
0: 	/*
0: 	** Retrieve the actual Registered Driver,
0: 	** probe the DriverManager in order to get it.
0: 	*/
0: 	private Driver getRegisteredDriver() throws SQLException {
0: 
0: 		try {
0: 		  return DriverManager.getDriver(Attribute.PROTOCOL);
0: 		}
0: 		catch (SQLException se) {
0: 			// Driver not registered 
0: 			throw new SQLException(MessageService.getTextMessage(MessageId.CORE_JDBC_DRIVER_UNREGISTERED));
0: 		}
0: 	}
0: }
============================================================================