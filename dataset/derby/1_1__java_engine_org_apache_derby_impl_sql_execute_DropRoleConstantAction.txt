1:ee59de8: /*
3:ee59de8: 
1:ee59de8:    Derby - Class org.apache.derby.impl.sql.execute.DropRoleConstantAction
1:ee59de8: 
1:ee59de8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ee59de8:    contributor license agreements.  See the NOTICE file distributed with
1:ee59de8:    this work for additional information regarding copyright ownership.
1:ee59de8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ee59de8:    (the "License"); you may not use this file except in compliance with
1:ee59de8:    the License.  You may obtain a copy of the License at
1:ee59de8: 
1:ee59de8:       http://www.apache.org/licenses/LICENSE-2.0
1:ee59de8: 
1:ee59de8:    Unless required by applicable law or agreed to in writing, software
1:ee59de8:    distributed under the License is distributed on an "AS IS" BASIS,
1:ee59de8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee59de8:    See the License for the specific language governing permissions and
1:ee59de8:    limitations under the License.
1:ee59de8: 
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: package org.apache.derby.impl.sql.execute;
1:ee59de8: 
1:ee59de8: import org.apache.derby.iapi.error.StandardException;
1:ee59de8: import org.apache.derby.iapi.sql.Activation;
1:ee59de8: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eb38311: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:ee59de8: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:4e3ddd7: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
1:eb38311: import org.apache.derby.iapi.sql.dictionary.RoleClosureIterator;
1:ee59de8: import org.apache.derby.shared.common.reference.SQLState;
1:ee59de8: import org.apache.derby.iapi.store.access.TransactionController;
1:ee59de8: 
1:ee59de8: /**
1:ee59de8:  *  This class  describes actions that are ALWAYS performed for a
1:ee59de8:  *  DROP ROLE Statement at Execution time.
2:ee59de8:  *
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: class DropRoleConstantAction extends DDLConstantAction
1:ee59de8: {
1:ee59de8: 
1:ee59de8: 
1:ee59de8:     private final String roleName;
1:ee59de8: 
1:ee59de8: 
1:ee59de8:     // CONSTRUCTORS
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      *  Make the ConstantAction for a DROP ROLE statement.
1:ee59de8:      *
1:ee59de8:      *  @param  roleName  role name to be dropped
1:ee59de8:      *
1:ee59de8:      */
1:ee59de8:     DropRoleConstantAction(String roleName)
1:ee59de8:     {
1:ee59de8:         this.roleName = roleName;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     ///////////////////////////////////////////////
1:ee59de8:     //
1:ee59de8:     // OBJECT SHADOWS
1:ee59de8:     //
1:ee59de8:     ///////////////////////////////////////////////
1:ee59de8: 
1:ee59de8:     public String toString()
1:ee59de8:     {
1:ee59de8:         // Do not put this under SanityManager.DEBUG - it is needed for
1:ee59de8:         // error reporting.
1:ee59de8:         return "DROP ROLE " + roleName;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     // INTERFACE METHODS
1:ee59de8: 
1:ee59de8: 
1:ee59de8:     /**
1:eb38311:      * This is the guts of the Execution-time logic for DROP ROLE.
1:ee59de8:      *
1:88d10d4:      * @see org.apache.derby.iapi.sql.execute.ConstantAction#executeConstantAction
1:ee59de8:      */
1:ee59de8:     public void executeConstantAction( Activation activation )
1:ee59de8:         throws StandardException
1:ee59de8:     {
1:ee59de8:         LanguageConnectionContext lcc =
1:ee59de8:             activation.getLanguageConnectionContext();
1:ee59de8:         DataDictionary dd = lcc.getDataDictionary();
1:ee59de8:         TransactionController tc = lcc.getTransactionExecute();
1:ee59de8: 
1:ee59de8:         /*
1:ee59de8:         ** Inform the data dictionary that we are about to write to it.
1:ee59de8:         ** There are several calls to data dictionary "get" methods here
1:ee59de8:         ** that might be done in "read" mode in the data dictionary, but
1:ee59de8:         ** it seemed safer to do this whole operation in "write" mode.
1:ee59de8:         **
1:ee59de8:         ** We tell the data dictionary we're done writing at the end of
1:ee59de8:         ** the transaction.
1:ee59de8:         */
1:ee59de8:         dd.startWriting(lcc);
1:ee59de8: 
1:fe8c4c2:         RoleGrantDescriptor rdDef = dd.getRoleDefinitionDescriptor(roleName);
1:ee59de8: 
1:fe8c4c2:         if (rdDef == null) {
1:ee59de8:             throw StandardException.newException(
1:ee59de8:                 SQLState.ROLE_INVALID_SPECIFICATION, roleName);
1:ee59de8:         }
1:ee59de8: 
1:eb38311:         // When a role is dropped, for every role in its grantee closure, we
1:e4caed2:         // call the REVOKE_ROLE action. It is used to invalidate dependent
1:e4caed2:         // objects (constraints, triggers and views).  Note that until
1:e4caed2:         // DERBY-1632 is fixed, we risk dropping objects not really dependent
1:e4caed2:         // on this role, but one some other role just because it inherits from
1:e4caed2:         // this one. See also RevokeRoleConstantAction.
1:eb38311:         RoleClosureIterator rci =
1:eb38311:             dd.createRoleClosureIterator
1:eb38311:             (activation.getTransactionController(),
1:eb38311:              roleName, false);
1:eb38311: 
1:eb38311:         String role;
1:eb38311:         while ((role = rci.next()) != null) {
1:eb38311:             RoleGrantDescriptor r = dd.getRoleDefinitionDescriptor(role);
1:eb38311: 
2:eb38311:             dd.getDependencyManager().invalidateFor
1:eb38311:                 (r, DependencyManager.REVOKE_ROLE, lcc);
1:eb38311:         }
1:eb38311: 
1:fe8c4c2:         rdDef.drop(lcc);
1:eb38311: 
1:ee59de8:         /*
1:ee59de8:          * We dropped a role, now drop all dependents:
1:ee59de8:          * - role grants to this role
1:ee59de8:          * - grants of this role to other roles or users
1:ee59de8:          * - privilege grants to this role
1:ee59de8:          */
1:ee59de8: 
1:ee59de8:         dd.dropRoleGrantsByGrantee(roleName, tc);
1:ee59de8:         dd.dropRoleGrantsByName(roleName, tc);
1:ee59de8:         dd.dropAllPermsByGrantee(roleName, tc);
1:ee59de8:     }
1:ee59de8: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:88d10d4
/////////////////////////////////////////////////////////////////////////
1:      * @see org.apache.derby.iapi.sql.execute.ConstantAction#executeConstantAction
commit:e4caed2
/////////////////////////////////////////////////////////////////////////
0:      * @see org.apache.derby.iapi.sql.
0:      *      execute.ConstantAction#executeConstantAction
/////////////////////////////////////////////////////////////////////////
1:         // call the REVOKE_ROLE action. It is used to invalidate dependent
1:         // objects (constraints, triggers and views).  Note that until
1:         // DERBY-1632 is fixed, we risk dropping objects not really dependent
1:         // on this role, but one some other role just because it inherits from
1:         // this one. See also RevokeRoleConstantAction.
/////////////////////////////////////////////////////////////////////////
commit:eb38311
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.sql.dictionary.RoleClosureIterator;
/////////////////////////////////////////////////////////////////////////
1:      * This is the guts of the Execution-time logic for DROP ROLE.
0:      * @see org.apache.derby.iapi.sql.execute.ConstantAction#executeConstantAction
/////////////////////////////////////////////////////////////////////////
1:         // When a role is dropped, for every role in its grantee closure, we
0:         // call two invalidate actions.  REVOKE_ROLE and
0:         // INTERNAL_RECOMPILE_REQUEST.  The latter is used to force
0:         // recompilation of dependent prepared statements, the former to drop
0:         // dependent objects (constraints, triggers and views).  Note that
0:         // until DERBY-1632 is fixed, we risk dropping objects not really
0:         // dependent on this role, but one some other role just because it
0:         // inherits from this one. See also RevokeRoleConstantAction.
1:         RoleClosureIterator rci =
1:             dd.createRoleClosureIterator
1:             (activation.getTransactionController(),
1:              roleName, false);
1: 
1:         String role;
1:         while ((role = rci.next()) != null) {
1:             RoleGrantDescriptor r = dd.getRoleDefinitionDescriptor(role);
1: 
1:             dd.getDependencyManager().invalidateFor
1:                 (r, DependencyManager.REVOKE_ROLE, lcc);
1: 
1:             dd.getDependencyManager().invalidateFor
0:                 (r, DependencyManager.INTERNAL_RECOMPILE_REQUEST, lcc);
1:         }
1: 
commit:fe8c4c2
/////////////////////////////////////////////////////////////////////////
1:         RoleGrantDescriptor rdDef = dd.getRoleDefinitionDescriptor(roleName);
1:         if (rdDef == null) {
1:         rdDef.drop(lcc);
commit:4e3ddd7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
/////////////////////////////////////////////////////////////////////////
0:         RoleGrantDescriptor rd = dd.getRoleDefinitionDescriptor(roleName);
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.DropRoleConstantAction
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.RoleDescriptor;
1: import org.apache.derby.shared.common.reference.SQLState;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: /**
1:  *  This class  describes actions that are ALWAYS performed for a
1:  *  DROP ROLE Statement at Execution time.
1:  *
1:  */
1: 
1: class DropRoleConstantAction extends DDLConstantAction
1: {
1: 
1: 
1:     private final String roleName;
1: 
1: 
1:     // CONSTRUCTORS
1: 
1:     /**
1:      *  Make the ConstantAction for a DROP ROLE statement.
1:      *
1:      *  @param  roleName  role name to be dropped
1:      *
1:      */
1:     DropRoleConstantAction(String roleName)
1:     {
1:         this.roleName = roleName;
1:     }
1: 
1:     ///////////////////////////////////////////////
1:     //
1:     // OBJECT SHADOWS
1:     //
1:     ///////////////////////////////////////////////
1: 
1:     public String toString()
1:     {
1:         // Do not put this under SanityManager.DEBUG - it is needed for
1:         // error reporting.
1:         return "DROP ROLE " + roleName;
1:     }
1: 
1:     // INTERFACE METHODS
1: 
1: 
1:     /**
0:      *  This is the guts of the Execution-time logic for DROP ROLE.
1:      *
0:      *  @see ConstantAction#executeConstantAction
1:      *
0:      * @exception StandardException     Thrown on failure
1:      */
1:     public void executeConstantAction( Activation activation )
1:         throws StandardException
1:     {
1:         LanguageConnectionContext lcc =
1:             activation.getLanguageConnectionContext();
1:         DataDictionary dd = lcc.getDataDictionary();
1:         TransactionController tc = lcc.getTransactionExecute();
1: 
1:         /*
1:         ** Inform the data dictionary that we are about to write to it.
1:         ** There are several calls to data dictionary "get" methods here
1:         ** that might be done in "read" mode in the data dictionary, but
1:         ** it seemed safer to do this whole operation in "write" mode.
1:         **
1:         ** We tell the data dictionary we're done writing at the end of
1:         ** the transaction.
1:         */
1:         dd.startWriting(lcc);
1: 
0:         RoleDescriptor rd = dd.getRoleDefinitionDescriptor(roleName);
1: 
0:         if (rd == null) {
1:             throw StandardException.newException(
1:                 SQLState.ROLE_INVALID_SPECIFICATION, roleName);
1:         }
1: 
0:         rd.drop(lcc);
1: 
1:         /*
1:          * We dropped a role, now drop all dependents:
1:          * - role grants to this role
1:          * - grants of this role to other roles or users
1:          * - privilege grants to this role
1:          */
1: 
1:         dd.dropRoleGrantsByGrantee(roleName, tc);
1:         dd.dropRoleGrantsByName(roleName, tc);
1:         dd.dropAllPermsByGrantee(roleName, tc);
1:     }
1: }
============================================================================