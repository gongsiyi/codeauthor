1:49653be: /*
3:49653be:  
1:49653be:    Derby - Class
1:1bac3f3:    org.apache.derby.iapi.store.replication.slave.SlaveFactory
1:49653be:  
1:49653be:    Licensed to the Apache Software Foundation (ASF) under one or more
1:49653be:    contributor license agreements.  See the NOTICE file distributed with
1:49653be:    this work for additional information regarding copyright ownership.
1:49653be:    The ASF licenses this file to you under the Apache License, Version 2.0
1:49653be:    (the "License"); you may not use this file except in compliance with
1:49653be:    the License.  You may obtain a copy of the License at
1:49653be:  
1:49653be:       http://www.apache.org/licenses/LICENSE-2.0
1:49653be:  
1:49653be:    Unless required by applicable law or agreed to in writing, software
1:49653be:    distributed under the License is distributed on an "AS IS" BASIS,
1:49653be:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:49653be:    See the License for the specific language governing permissions and
1:49653be:    limitations under the License.
1:49653be:  
1:49653be: */
1:334e9a3: 
1:1bac3f3: package org.apache.derby.iapi.store.replication.slave;
1:49653be: 
1:49653be: import org.apache.derby.iapi.error.StandardException;
1:49653be: 
1:49653be: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:49653be: import org.apache.derby.iapi.store.raw.log.LogFactory;
1:49653be: 
1:334e9a3: /**
1:49653be:  * <p> 
1:49653be:  * This is the interface for the replication slave controller
1:49653be:  * service. The slave controller service is booted when this instance
1:49653be:  * of Derby will have the replication slave role for this database.
1:49653be:  * </p> 
1:49653be:  * <p> 
1:49653be:  * The replication slave service is responsible for managing all
1:49653be:  * replication related functionality on the slave side of replication.
1:49653be:  * This includes connecting to the master and apply log records
1:49653be:  * received from the master.
1:49653be:  * </p> 
1:49653be:  */
1:49653be: public interface SlaveFactory {
1:49653be: 
1:49653be:     /** The name of the Slave Factory, used to boot the service.  */
1:49653be:     public static final String MODULE =
1:1bac3f3:         "org.apache.derby.iapi.store.replication.slave.SlaveFactory";
1:49653be: 
1:49653be:     /* Strings used as keys in the Properties objects*/
1:e071963: 
1:e071963:     /** Property key to specify the name of the database */
1:e071963:     public static final String SLAVE_DB =
1:836ab97:         "replication.slave.dbname";
1:e071963: 
1:49653be:     /** Property key to specify replication mode */
1:49653be:     public static final String REPLICATION_MODE =
1:836ab97:         "replication.slave.mode";
1:49653be: 
1:49653be:     /* Strings used as values in the Properties objects */
1:49653be: 
1:49653be:     /**
1:49653be:      * Property value used to indicate that the service should be
1:49653be:      * booted in asynchronous replication mode.
1:49653be:      */
1:49653be:     public static final String SLAVE_MODE =
1:836ab97:         "slavemode";
1:49653be: 
1:836ab97:     /**
1:836ab97:      * Property value used to indicate that the service should be
1:836ab97:      * booted in slave replication pre mode. The reason for having a
1:836ab97:      * slave pre mode is that when slave replication is started, we
1:836ab97:      * need to boot the database twice: Once to check authentication
1:836ab97:      * and authorization, and a second time to put the database in
1:836ab97:      * slave mode. It is imperative that the disk image of log files
1:836ab97:      * remain unmodified by the first boot since the master and slave
1:836ab97:      * log files have to be identical when slave mode starts. Booting
1:836ab97:      * in SLAVE_PRE_MODE ensures that the log files remain unmodified.
1:836ab97:      */
1:836ab97:     public static final String SLAVE_PRE_MODE =
1:836ab97:         "slavepremode";
1:49653be: 
1:49653be:     /* Required methods */
1:49653be: 
1:49653be:     /**
1:49653be:      * Start slave replication. This method establishes a network
1:49653be:      * connection with the associated replication master and starts a
1:49653be:      * daemon that applies operations received from the master (in the
1:49653be:      * form of log records) to the local slave database.
1:49653be:      *
1:49653be:      * @param rawStore The RawStoreFactory for the database
1:49653be:      * @param logFac The LogFactory ensuring recoverability for this database
1:e071963:      *
1:e071963:      * @exception StandardException Thrown if the slave could not be
1:e071963:      * started.
1:49653be:      */
1:e071963:     public void startSlave(RawStoreFactory rawStore, LogFactory logFac)
1:e071963:         throws StandardException;
1:49653be: 
1:49653be:     /**
1:b9c57d5:      * Stop replication slave mode. Causes the database to abort the
1:b9c57d5:      * boot process, and should only be used when shutting down this
1:b9c57d5:      * database. If forcedStop is false, the method will fail with an
1:b9c57d5:      * exception if connected with the master. If forcedStop is true, the 
1:b9c57d5:      * slave will be shut down even if connected to the master. A forcedStop 
1:b9c57d5:      * value of true should only be used by system shutdown.
1:b9c57d5:      *
1:b9c57d5:      * @param forcedStop Determines whether or not an exception should
1:b9c57d5:      * be thrown when this method is called while the network
1:b9c57d5:      * connection to the master is up.
1:b9c57d5:      * @exception StandardException Thrown if slave is connected with
1:b9c57d5:      * master and forcedStop is false.
1:49653be:      */
1:b9c57d5:     public void stopSlave(boolean forcedStop) 
1:b9c57d5:             throws StandardException;
1:49653be: 
1:49653be:     /**
1:49653be:      * <p>
1:49653be:      * Used to turn this slave instance of the database into a normal
1:9e88b9d:      * instance that clients can connect to, assuming that the
1:9e88b9d:      * connection with the master is down. This is typically done in
1:49653be:      * cases where a fatal error has happened on the master instance
1:49653be:      * of the database, or when the master database is unreachable due
1:49653be:      * to network problems.
1:49653be:      * </p>
1:49653be:      * <p>
1:49653be:      * By calling failover, this slave instance of the database will
1:49653be:      * be recovered so that all committed operations that have been
1:49653be:      * received from the master are reflected here. On the other hand,
1:49653be:      * operations from transactions where the commit log record has
1:49653be:      * not been received from the master will not be reflected.
1:49653be:      * </p>
1:49653be:      * <p>
1:49653be:      * Note that even though an operation has been executed (and even
1:49653be:      * committed) on the master, it is not neccessarily reflected in
1:49653be:      * the slave instance of the database. This depends on the
1:49653be:      * replication strategy used by the MasterFactory.
1:49653be:      * </p>
1:49653be:      *
1:9e88b9d:      * @exception StandardException Thrown if slave is connected with
1:9e88b9d:      * master
1:1bac3f3:      * @see org.apache.derby.iapi.store.replication.master.MasterFactory
1:1bac3f3:      * @see org.apache.derby.impl.store.replication.master.MasterController#flushedTo
1:49653be:      */
1:9e88b9d:     public void failover() throws StandardException;
1:49653be:     
1:49653be:     /**
1:334e9a3:      * Check whether or not slave replication mode has been
1:334e9a3:      * successfully started.
1:334e9a3:      *
1:334e9a3:      * @return true if slave replication mode has started
1:334e9a3:      * successfully, false if slave mode startup is not yet confirmed
1:334e9a3:      */
1:334e9a3:     public boolean isStarted();
1:49653be: 
1:49653be: }
============================================================================
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:1bac3f3
/////////////////////////////////////////////////////////////////////////
1:    org.apache.derby.iapi.store.replication.slave.SlaveFactory
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.iapi.store.replication.slave;
/////////////////////////////////////////////////////////////////////////
1:         "org.apache.derby.iapi.store.replication.slave.SlaveFactory";
/////////////////////////////////////////////////////////////////////////
1:      * @see org.apache.derby.iapi.store.replication.master.MasterFactory
1:      * @see org.apache.derby.impl.store.replication.master.MasterController#flushedTo
commit:9e88b9d
/////////////////////////////////////////////////////////////////////////
1:      * instance that clients can connect to, assuming that the
1:      * connection with the master is down. This is typically done in
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException Thrown if slave is connected with
1:      * master
1:     public void failover() throws StandardException;
commit:334e9a3
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Check whether or not slave replication mode has been
1:      * successfully started.
1:      *
1:      * @return true if slave replication mode has started
1:      * successfully, false if slave mode startup is not yet confirmed
1:      */
1:     public boolean isStarted();
commit:b9c57d5
/////////////////////////////////////////////////////////////////////////
1:      * Stop replication slave mode. Causes the database to abort the
1:      * boot process, and should only be used when shutting down this
1:      * database. If forcedStop is false, the method will fail with an
1:      * exception if connected with the master. If forcedStop is true, the 
1:      * slave will be shut down even if connected to the master. A forcedStop 
1:      * value of true should only be used by system shutdown.
1:      *
1:      * @param forcedStop Determines whether or not an exception should
1:      * be thrown when this method is called while the network
1:      * connection to the master is up.
1:      * @exception StandardException Thrown if slave is connected with
1:      * master and forcedStop is false.
1:     public void stopSlave(boolean forcedStop) 
1:             throws StandardException;
commit:836ab97
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         "replication.slave.dbname";
1:         "replication.slave.mode";
/////////////////////////////////////////////////////////////////////////
1:         "slavemode";
1:     /**
1:      * Property value used to indicate that the service should be
1:      * booted in slave replication pre mode. The reason for having a
1:      * slave pre mode is that when slave replication is started, we
1:      * need to boot the database twice: Once to check authentication
1:      * and authorization, and a second time to put the database in
1:      * slave mode. It is imperative that the disk image of log files
1:      * remain unmodified by the first boot since the master and slave
1:      * log files have to be identical when slave mode starts. Booting
1:      * in SLAVE_PRE_MODE ensures that the log files remain unmodified.
1:      */
1:     public static final String SLAVE_PRE_MODE =
1:         "slavepremode";
commit:c458b05
/////////////////////////////////////////////////////////////////////////
commit:e071963
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     /** Property key to specify which host to listen to */
0:     public static final String SLAVE_HOST =
0:         Property.PROPERTY_RUNTIME_PREFIX + "replication.slave.slavehost";
1: 
1:     /** Property key to specify the name of the database */
1:     public static final String SLAVE_DB =
0:         Property.PROPERTY_RUNTIME_PREFIX + "replication.slave.dbname";
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @exception StandardException Thrown if the slave could not be
1:      * started.
1:     public void startSlave(RawStoreFactory rawStore, LogFactory logFac)
1:         throws StandardException;
commit:49653be
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class
0:    org.apache.derby.iapi.services.replication.slave.SlaveFactory
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1: */
1: 
0: package org.apache.derby.iapi.services.replication.slave;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.Property;
1: 
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1: import org.apache.derby.iapi.store.raw.log.LogFactory;
0: import org.apache.derby.iapi.store.raw.data.DataFactory;
1: 
1: /**
1:  * <p> 
1:  * This is the interface for the replication slave controller
1:  * service. The slave controller service is booted when this instance
1:  * of Derby will have the replication slave role for this database.
1:  * </p> 
1:  * <p> 
1:  * The replication slave service is responsible for managing all
1:  * replication related functionality on the slave side of replication.
1:  * This includes connecting to the master and apply log records
1:  * received from the master.
1:  * </p> 
1:  */
1: public interface SlaveFactory {
1: 
1:     /** The name of the Slave Factory, used to boot the service.  */
1:     public static final String MODULE =
0:         "org.apache.derby.iapi.services.replication.slave.SlaveFactory";
1: 
1:     /* Strings used as keys in the Properties objects*/
1: 
0:     /** Property key to specify which port to listen to */
0:     public static final String SLAVE_PORT =
0:         Property.PROPERTY_RUNTIME_PREFIX + "replication.slave.slaveport";
1: 
1:     /** Property key to specify replication mode */
1:     public static final String REPLICATION_MODE =
0:         Property.PROPERTY_RUNTIME_PREFIX + "replication.slave.mode";
1: 
1:     /* Strings used as values in the Properties objects */
1: 
1:     /**
1:      * Property value used to indicate that the service should be
1:      * booted in asynchronous replication mode.
1:      */
1:     public static final String SLAVE_MODE =
0:         Property.PROPERTY_RUNTIME_PREFIX + "slavemode";
1: 
1: 
1:     /* Required methods */
1: 
1:     /**
1:      * Start slave replication. This method establishes a network
1:      * connection with the associated replication master and starts a
1:      * daemon that applies operations received from the master (in the
1:      * form of log records) to the local slave database.
1:      *
1:      * @param rawStore The RawStoreFactory for the database
1:      * @param logFac The LogFactory ensuring recoverability for this database
1:      */
0:     public void startSlave(RawStoreFactory rawStore, LogFactory logFac);
1: 
1:     /**
0:      * Will perform all work that is needed to stop replication
1:      */
0:     public void stopSlave();
1: 
1:     /**
1:      * <p>
1:      * Used to turn this slave instance of the database into a normal
0:      * instance that clients can connect to. This is typically done in
1:      * cases where a fatal error has happened on the master instance
1:      * of the database, or when the master database is unreachable due
1:      * to network problems.
1:      * </p>
1:      * <p>
1:      * By calling failover, this slave instance of the database will
1:      * be recovered so that all committed operations that have been
1:      * received from the master are reflected here. On the other hand,
1:      * operations from transactions where the commit log record has
1:      * not been received from the master will not be reflected.
1:      * </p>
1:      * <p>
1:      * Note that even though an operation has been executed (and even
1:      * committed) on the master, it is not neccessarily reflected in
1:      * the slave instance of the database. This depends on the
1:      * replication strategy used by the MasterFactory.
1:      * </p>
1:      *
0:      * @see org.apache.derby.iapi.services.replication.master.MasterFactory
0:      * @see org.apache.derby.impl.services.replication.master.MasterController#flushedTo
1:      */
0:     public void failover();
1: 
1: }
============================================================================