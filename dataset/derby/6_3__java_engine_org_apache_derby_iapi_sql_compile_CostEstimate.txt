1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.compile.CostEstimate
1:7ecc1f2: 
1:d4580ab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d4580ab:    contributor license agreements.  See the NOTICE file distributed with
1:d4580ab:    this work for additional information regarding copyright ownership.
1:d4580ab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d4580ab:    (the "License"); you may not use this file except in compliance with
1:d4580ab:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.StoreCostResult;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A CostEstimate represents the cost of getting a ResultSet, along with the
1:eac0369:  * ordering of rows in the ResultSet, and the estimated number of rows in
1:eac0369:  * this ResultSet.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public interface CostEstimate extends StoreCostResult
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Set the cost for this cost estimate.
1:eac0369: 	 */
1:eac0369: 	void setCost(double cost, double rowCount, double singleScanRowCount);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Copy the values from the given cost estimate into this one.
1:eac0369: 	 */
1:eac0369: 	void setCost(CostEstimate other);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the single scan row count.
1:eac0369: 	 */
1:eac0369: 	void setSingleScanRowCount(double singleRowScanCount);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Compare this cost estimate with the given cost estimate.
1:eac0369: 	 *
1:eac0369: 	 * @param other		The cost estimate to compare this one with
1:eac0369: 	 *
1:dbed020: 	 * @return	&lt; 0 if this &lt; other, 0 if this == other, &gt; 0 if this &gt; other
1:eac0369: 	 */
1:eac0369: 	double compare(CostEstimate other);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Add this cost estimate to another one.  This presumes that any row
1:eac0369: 	 * ordering is destroyed.
1:eac0369: 	 *
1:eac0369: 	 * @param addend	This cost estimate to add this one to.
1:eac0369: 	 * @param retval	If non-null, put the result here.
1:eac0369: 	 * 
1:eac0369: 	 * @return  this + other.
1:eac0369: 	 */
1:eac0369: 	CostEstimate add(CostEstimate addend, CostEstimate retval);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Multiply this cost estimate by a scalar, non-dimensional number.  This
1:eac0369: 	 * presumes that any row ordering is destroyed.
1:eac0369: 	 *
1:eac0369: 	 * @param multiplicand	The value to multiply this CostEstimate by.
1:eac0369: 	 * @param retval	If non-null, put the result here.
1:eac0369: 	 * 
1:eac0369: 	 * @return	this * multiplicand
1:eac0369: 	 */
1:eac0369: 	CostEstimate multiply(double multiplicand, CostEstimate retval);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Divide this cost estimate by a scalar, non-dimensional number.
1:eac0369: 	 *
1:eac0369: 	 * @param divisor	The value to divide this CostEstimate by.
1:eac0369: 	 * @param retval	If non-null, put the result here.
1:eac0369: 	 *
1:eac0369: 	 * @return	this / divisor
1:eac0369: 	 */
1:eac0369: 	CostEstimate divide(double divisor, CostEstimate retval);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the estimated number of rows returned by the ResultSet that this
1:eac0369: 	 * CostEstimate models.
1:eac0369: 	 */
1:eac0369: 	double rowCount();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the estimated number of rows returned by a single scan of
1:eac0369: 	 * the ResultSet that this CostEstimate models.
1:eac0369: 	 */
1:eac0369: 	double singleScanRowCount();
1:eac0369: 
1:eac0369: 	/** Get a copy of this CostEstimate */
1:eac0369: 	CostEstimate cloneMe();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not this CostEstimate is uninitialized.
1:eac0369: 	 *
1:eac0369: 	 * @return Whether or not this CostEstimate is uninitialized.
1:eac0369: 	 */
1:eac0369: 	public boolean isUninitialized();
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	 * @return	&lt; 0 if this &lt; other, 0 if this == other, &gt; 0 if this &gt; other
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d4580ab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.compile.CostEstimate
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.compile;
1: 
1: import org.apache.derby.iapi.store.access.StoreCostResult;
1: 
1: /**
1:  * A CostEstimate represents the cost of getting a ResultSet, along with the
1:  * ordering of rows in the ResultSet, and the estimated number of rows in
1:  * this ResultSet.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
1: public interface CostEstimate extends StoreCostResult
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	 * Set the cost for this cost estimate.
1: 	 */
1: 	void setCost(double cost, double rowCount, double singleScanRowCount);
1: 
1: 	/**
1: 	 * Copy the values from the given cost estimate into this one.
1: 	 */
1: 	void setCost(CostEstimate other);
1: 
1: 	/**
1: 	 * Set the single scan row count.
1: 	 */
1: 	void setSingleScanRowCount(double singleRowScanCount);
1: 
1: 	/**
1: 	 * Compare this cost estimate with the given cost estimate.
1: 	 *
1: 	 * @param other		The cost estimate to compare this one with
1: 	 *
0: 	 * @return	< 0 if this < other, 0 if this == other, > 0 if this > other
1: 	 */
1: 	double compare(CostEstimate other);
1: 
1: 	/**
1: 	 * Add this cost estimate to another one.  This presumes that any row
1: 	 * ordering is destroyed.
1: 	 *
1: 	 * @param addend	This cost estimate to add this one to.
1: 	 * @param retval	If non-null, put the result here.
1: 	 * 
1: 	 * @return  this + other.
1: 	 */
1: 	CostEstimate add(CostEstimate addend, CostEstimate retval);
1: 
1: 	/**
1: 	 * Multiply this cost estimate by a scalar, non-dimensional number.  This
1: 	 * presumes that any row ordering is destroyed.
1: 	 *
1: 	 * @param multiplicand	The value to multiply this CostEstimate by.
1: 	 * @param retval	If non-null, put the result here.
1: 	 * 
1: 	 * @return	this * multiplicand
1: 	 */
1: 	CostEstimate multiply(double multiplicand, CostEstimate retval);
1: 
1: 	/**
1: 	 * Divide this cost estimate by a scalar, non-dimensional number.
1: 	 *
1: 	 * @param divisor	The value to divide this CostEstimate by.
1: 	 * @param retval	If non-null, put the result here.
1: 	 *
1: 	 * @return	this / divisor
1: 	 */
1: 	CostEstimate divide(double divisor, CostEstimate retval);
1: 
1: 	/**
1: 	 * Get the estimated number of rows returned by the ResultSet that this
1: 	 * CostEstimate models.
1: 	 */
1: 	double rowCount();
1: 
1: 	/**
1: 	 * Get the estimated number of rows returned by a single scan of
1: 	 * the ResultSet that this CostEstimate models.
1: 	 */
1: 	double singleScanRowCount();
1: 
1: 	/** Get a copy of this CostEstimate */
1: 	CostEstimate cloneMe();
1: 
1: 	/**
1: 	 * Return whether or not this CostEstimate is uninitialized.
1: 	 *
1: 	 * @return Whether or not this CostEstimate is uninitialized.
1: 	 */
1: 	public boolean isUninitialized();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.compile;
0: 
0: import org.apache.derby.iapi.store.access.StoreCostResult;
0: 
0: /**
0:  * A CostEstimate represents the cost of getting a ResultSet, along with the
0:  * ordering of rows in the ResultSet, and the estimated number of rows in
0:  * this ResultSet.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public interface CostEstimate extends StoreCostResult
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	 * Set the cost for this cost estimate.
0: 	 */
0: 	void setCost(double cost, double rowCount, double singleScanRowCount);
0: 
0: 	/**
0: 	 * Copy the values from the given cost estimate into this one.
0: 	 */
0: 	void setCost(CostEstimate other);
0: 
0: 	/**
0: 	 * Set the single scan row count.
0: 	 */
0: 	void setSingleScanRowCount(double singleRowScanCount);
0: 
0: 	/**
0: 	 * Compare this cost estimate with the given cost estimate.
0: 	 *
0: 	 * @param other		The cost estimate to compare this one with
0: 	 *
0: 	 * @return	< 0 if this < other, 0 if this == other, > 0 if this > other
0: 	 */
0: 	double compare(CostEstimate other);
0: 
0: 	/**
0: 	 * Add this cost estimate to another one.  This presumes that any row
0: 	 * ordering is destroyed.
0: 	 *
0: 	 * @param addend	This cost estimate to add this one to.
0: 	 * @param retval	If non-null, put the result here.
0: 	 * 
0: 	 * @return  this + other.
0: 	 */
0: 	CostEstimate add(CostEstimate addend, CostEstimate retval);
0: 
0: 	/**
0: 	 * Multiply this cost estimate by a scalar, non-dimensional number.  This
0: 	 * presumes that any row ordering is destroyed.
0: 	 *
0: 	 * @param multiplicand	The value to multiply this CostEstimate by.
0: 	 * @param retval	If non-null, put the result here.
0: 	 * 
0: 	 * @return	this * multiplicand
0: 	 */
0: 	CostEstimate multiply(double multiplicand, CostEstimate retval);
0: 
0: 	/**
0: 	 * Divide this cost estimate by a scalar, non-dimensional number.
0: 	 *
0: 	 * @param divisor	The value to divide this CostEstimate by.
0: 	 * @param retval	If non-null, put the result here.
0: 	 *
0: 	 * @return	this / divisor
0: 	 */
0: 	CostEstimate divide(double divisor, CostEstimate retval);
0: 
0: 	/**
0: 	 * Get the estimated number of rows returned by the ResultSet that this
0: 	 * CostEstimate models.
0: 	 */
0: 	double rowCount();
0: 
0: 	/**
0: 	 * Get the estimated number of rows returned by a single scan of
0: 	 * the ResultSet that this CostEstimate models.
0: 	 */
0: 	double singleScanRowCount();
0: 
0: 	/** Get a copy of this CostEstimate */
0: 	CostEstimate cloneMe();
0: 
0: 	/**
0: 	 * Return whether or not this CostEstimate is uninitialized.
0: 	 *
0: 	 * @return Whether or not this CostEstimate is uninitialized.
0: 	 */
0: 	public boolean isUninitialized();
0: }
============================================================================