1:b7730e4: /*
6:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory
1:b7730e4: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4:       http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
2:b7730e4:  */
1:b7730e4: 
1:b7730e4: package org.apache.derby.impl.sql.catalog;
1:b7730e4: 
1:b7730e4: import org.apache.derby.catalog.UUID;
1:b7730e4: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:b7730e4: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:2d2e717: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:b7730e4: import org.apache.derby.iapi.sql.execute.ExecRow;
1:b7730e4: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:b7730e4: import org.apache.derby.iapi.types.DataValueDescriptor;
1:b7730e4: import org.apache.derby.iapi.types.DataValueFactory;
1:b7730e4: import org.apache.derby.iapi.types.RowLocation;
1:eb47bdb: import org.apache.derby.iapi.types.SQLChar;
1:b7730e4: import org.apache.derby.iapi.types.StringDataValue;
1:b7730e4: 
2:b7730e4: /**
1:b7730e4:  * Factory for creating a SYSTABLEPERMS row.
1:b7730e4:  *
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: public class SYSTABLEPERMSRowFactory extends PermissionsCatalogRowFactory
5:b7730e4: {
1:b7730e4: 	static final String TABLENAME_STRING = "SYSTABLEPERMS";
1:b7730e4: 
1:b7730e4:     // Column numbers for the SYSTABLEPERMS table. 1 based
1:ac100d6: 	private static final int TABLEPERMSID_COL_NUM = 1;
1:2d2e717:     private static final int GRANTEE_COL_NUM = 2;
1:2d2e717:     private static final int GRANTOR_COL_NUM = 3;
1:2d2e717:     private static final int TABLEID_COL_NUM = 4;
1:2d2e717:     private static final int SELECTPRIV_COL_NUM = 5;
1:2d2e717:     private static final int DELETEPRIV_COL_NUM = 6;
1:2d2e717:     private static final int INSERTPRIV_COL_NUM = 7;
1:2d2e717:     private static final int UPDATEPRIV_COL_NUM = 8;
1:2d2e717:     private static final int REFERENCESPRIV_COL_NUM = 9;
1:2d2e717:     private static final int TRIGGERPRIV_COL_NUM = 10;
1:2d2e717:     private static final int COLUMN_COUNT = 10;
1:b7730e4: 
1:b7730e4:     public static final int GRANTEE_TABLE_GRANTOR_INDEX_NUM = 0;
1:ac100d6:     public static final int TABLEPERMSID_INDEX_NUM = 1;
1:b7e13a9:     public static final int TABLEID_INDEX_NUM = 2;
1:b7730e4: 	private static final int[][] indexColumnPositions = 
1:b7730e4: 	{ 
1:ac100d6: 		{ GRANTEE_COL_NUM, TABLEID_COL_NUM, GRANTOR_COL_NUM},
1:b7e13a9: 		{ TABLEPERMSID_COL_NUM },
1:b7e13a9: 		{ TABLEID_COL_NUM }
2:b7730e4: 	};
1:c2ff613: 
1:ee59de8:     public static final int GRANTEE_COL_NUM_IN_GRANTEE_TABLE_GRANTOR_INDEX = 1;
1:ee59de8: 
1:b7e13a9:     private static final boolean[] indexUniqueness = { true, true, false};
1:b7730e4:     
1:b7730e4:     private	static final String[] uuids =
1:b7730e4:     {
1:b7730e4:         "b8450018-0103-0e39-b8e7-00000010f010" // catalog UUID
1:b7730e4: 		,"004b0019-0103-0e39-b8e7-00000010f010"	// heap UUID
1:ac100d6: 		,"c851401a-0103-0e39-b8e7-00000010f010"	// index1
1:ac100d6: 		,"80220011-010c-426e-c599-0000000f1120"	// index2
1:b7e13a9: 		,"f81e0010-010c-bc85-060d-000000109ab8"	// index3
1:b7730e4:     };
1:b7730e4: 
1:6870e87:     SYSTABLEPERMSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1:b7730e4: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:c2ff613: 		initInfo(COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, indexUniqueness, uuids);
3:b7730e4: 	}
1:b7730e4: 
1:b7730e4: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent) throws StandardException
1:b7730e4: 	{
1:2d2e717: 		UUID						oid;
1:b7730e4:         DataValueDescriptor grantee = null;
1:b7730e4:         DataValueDescriptor grantor = null;
1:2d2e717:         String tablePermID = null;
1:b7730e4:         String tableID = null;
1:b7730e4:         String selectPriv = null;
1:b7730e4:         String deletePriv = null;
1:b7730e4:         String insertPriv = null;
1:b7730e4:         String updatePriv = null;
1:b7730e4:         String referencesPriv = null;
1:b7730e4:         String triggerPriv = null;
1:b7730e4: 
1:b7730e4:         if( td == null)
1:b7730e4:         {
1:b7730e4:             grantee = getNullAuthorizationID();
1:b7730e4:             grantor = getNullAuthorizationID();
1:b7730e4:         }
1:b7730e4:         else
1:b7730e4:         {
1:b7730e4:             TablePermsDescriptor tpd = (TablePermsDescriptor) td;
1:2d2e717:             oid = tpd.getUUID();
1:2d2e717:             if ( oid == null )
1:2d2e717:             {
1:2d2e717: 				oid = getUUIDFactory().createUUID();
1:2d2e717: 				tpd.setUUID(oid);
1:2d2e717:             }
1:2d2e717:             tablePermID = oid.toString();
1:2d2e717: 
1:2d2e717: 			grantee = getAuthorizationID( tpd.getGrantee());
1:b7730e4:             grantor = getAuthorizationID( tpd.getGrantor());
1:b7730e4:             tableID = tpd.getTableUUID().toString();
1:b7730e4:             selectPriv = tpd.getSelectPriv();
1:b7730e4:             deletePriv = tpd.getDeletePriv();
1:b7730e4:             insertPriv = tpd.getInsertPriv();
1:b7730e4:             updatePriv = tpd.getUpdatePriv();
1:b7730e4:             referencesPriv = tpd.getReferencesPriv();
1:b7730e4:             triggerPriv = tpd.getTriggerPriv();
1:b7730e4:         }
1:b7730e4:         ExecRow row = getExecutionFactory().getValueRow( COLUMN_COUNT);
1:eb47bdb:         row.setColumn( TABLEPERMSID_COL_NUM, new SQLChar(tablePermID));
1:b7730e4:         row.setColumn( GRANTEE_COL_NUM, grantee);
1:b7730e4:         row.setColumn( GRANTOR_COL_NUM, grantor);
1:eb47bdb:         row.setColumn( TABLEID_COL_NUM, new SQLChar(tableID));
1:eb47bdb:         row.setColumn( SELECTPRIV_COL_NUM, new SQLChar(selectPriv));
1:eb47bdb:         row.setColumn( DELETEPRIV_COL_NUM, new SQLChar(deletePriv));
1:eb47bdb:         row.setColumn( INSERTPRIV_COL_NUM, new SQLChar(insertPriv));
1:eb47bdb:         row.setColumn( UPDATEPRIV_COL_NUM, new SQLChar(updatePriv));
1:eb47bdb:         row.setColumn( REFERENCESPRIV_COL_NUM, new SQLChar( referencesPriv));
1:eb47bdb:         row.setColumn( TRIGGERPRIV_COL_NUM, new SQLChar(triggerPriv));
1:b7730e4: 
2:b7730e4:         return row;
1:b7730e4:     } // end of makeRow
1:b7730e4:             
1:b7730e4: 	/** builds a tuple descriptor from a row */
1:b7730e4: 	public TupleDescriptor buildDescriptor(ExecRow row,
1:b7730e4:                                            TupleDescriptor parentTuple,
1:b7730e4:                                            DataDictionary dataDictionary)
2:b7730e4: 		throws StandardException
1:b7730e4:     {
1:2d2e717: 		if( SanityManager.DEBUG)
1:b7730e4:             SanityManager.ASSERT( row.nColumns() == COLUMN_COUNT,
1:b7730e4:                                   "Wrong size row passed to SYSTABLEPERMSRowFactory.buildDescriptor");
1:b7730e4: 
1:ac100d6:         String tablePermsUUIDString = row.getColumn(TABLEPERMSID_COL_NUM).getString();
1:2d2e717:         UUID tablePermsUUID = getUUIDFactory().recreateUUID(tablePermsUUIDString);
1:b7730e4:         String tableUUIDString = row.getColumn( TABLEID_COL_NUM).getString();
1:b7730e4:         UUID tableUUID = getUUIDFactory().recreateUUID(tableUUIDString);
1:b7730e4:         String selectPriv  = row.getColumn( SELECTPRIV_COL_NUM).getString();
1:b7730e4:         String deletePriv  = row.getColumn( DELETEPRIV_COL_NUM).getString();
1:b7730e4:         String insertPriv  = row.getColumn( INSERTPRIV_COL_NUM).getString();
1:b7730e4:         String updatePriv  = row.getColumn( UPDATEPRIV_COL_NUM).getString();
1:b7730e4:         String referencesPriv  = row.getColumn( REFERENCESPRIV_COL_NUM).getString();
1:b7730e4:         String triggerPriv  = row.getColumn( TRIGGERPRIV_COL_NUM).getString();
2:b7730e4:         if( SanityManager.DEBUG)
1:b7730e4:         {
1:b7730e4:             SanityManager.ASSERT( "y".equals(selectPriv) || "Y".equals(selectPriv) || "N".equals(selectPriv),
1:b7730e4:                                   "Invalid SYSTABLEPERMS.selectPriv column value: " + selectPriv);
1:b7730e4:             SanityManager.ASSERT( "y".equals(deletePriv) || "Y".equals(deletePriv) || "N".equals(deletePriv),
1:b7730e4:                                   "Invalid SYSTABLEPERMS.deletePriv column value: " + deletePriv);
1:b7730e4:             SanityManager.ASSERT( "y".equals(insertPriv) || "Y".equals(insertPriv) || "N".equals(insertPriv),
1:b7730e4:                                   "Invalid SYSTABLEPERMS.insertPriv column value: " + insertPriv);
1:b7730e4:             SanityManager.ASSERT( "y".equals(updatePriv) || "Y".equals(updatePriv) || "N".equals(updatePriv),
1:b7730e4:                                   "Invalid SYSTABLEPERMS.updatePriv column value: " + updatePriv);
1:b7730e4:             SanityManager.ASSERT( "y".equals(referencesPriv) || "Y".equals(referencesPriv) || "N".equals(referencesPriv),
1:b7730e4:                                   "Invalid SYSTABLEPERMS.referencesPriv column value: " + referencesPriv);
1:b7730e4:             SanityManager.ASSERT( "y".equals(triggerPriv) || "Y".equals(triggerPriv) || "N".equals(triggerPriv),
1:b7730e4:                                   "Invalid SYSTABLEPERMS.triggerPriv column value: " + triggerPriv);
1:b7730e4:         }
1:b7730e4: 
1:2d2e717: 		TablePermsDescriptor tabPermsDesc =
1:2d2e717:         new TablePermsDescriptor( dataDictionary,
1:b7730e4:                                          getAuthorizationID( row, GRANTEE_COL_NUM),
1:b7730e4:                                          getAuthorizationID( row, GRANTOR_COL_NUM),
1:b7730e4:                                          tableUUID,
1:b7730e4:                                          selectPriv, deletePriv, insertPriv,
1:b7730e4:                                          updatePriv, referencesPriv, triggerPriv);
1:2d2e717: 		tabPermsDesc.setUUID(tablePermsUUID);
1:2d2e717: 		return tabPermsDesc;
1:b7730e4:     } // end of buildDescriptor
1:b7730e4: 
1:b7730e4: 	/** builds a column list for the catalog */
1:b7730e4: 	public SystemColumn[] buildColumnList()
1:2a5922a:         throws StandardException
1:b7730e4:     {
1:082459a:         return new SystemColumn[] {
1:082459a:             SystemColumnImpl.getUUIDColumn("TABLEPERMSID", false),
1:082459a:             SystemColumnImpl.getIdentifierColumn("GRANTEE", false),
1:082459a:             SystemColumnImpl.getIdentifierColumn("GRANTOR", false),
1:082459a:             SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:082459a:             SystemColumnImpl.getIndicatorColumn("SELECTPRIV"),
1:082459a:             SystemColumnImpl.getIndicatorColumn("DELETEPRIV"),
1:082459a:             SystemColumnImpl.getIndicatorColumn("INSERTPRIV"),
1:082459a:             SystemColumnImpl.getIndicatorColumn("UPDATEPRIV"),
1:082459a:             SystemColumnImpl.getIndicatorColumn("REFERENCESPRIV"),
1:082459a:             SystemColumnImpl.getIndicatorColumn("TRIGGERPRIV"),
1:082459a:         };
1:082459a:     }
1:b7730e4: 
1:b7730e4: 	/**
1:b7730e4: 	 * builds a key row given for a given index number.
1:b7730e4: 	 */
1:b7730e4:   	public ExecIndexRow buildIndexKeyRow( int indexNumber,
1:b7730e4:                                           PermissionsDescriptor perm) 
1:b7730e4:   		throws StandardException
1:b7730e4:     {
1:b7730e4:         ExecIndexRow row = null;
1:b7730e4:         
2:b7730e4:         switch( indexNumber)
1:b7730e4:         {
2:b7730e4:         case GRANTEE_TABLE_GRANTOR_INDEX_NUM:
1:b7730e4:             // RESOLVE We do not support the FOR GRANT OPTION, so table permission rows are unique on the
1:b7730e4:             // grantee and table UUID columns. The grantor column will always have the name of the owner of the
1:b7730e4:             // table. So the index key, used for searching the index, only has grantee and table UUID columns.
1:b7730e4:             // It does not have a grantor column.
1:b7730e4:             //
1:b7730e4:             // If we support FOR GRANT OPTION then there may be multiple table permissions rows for a
1:b7730e4:             // (grantee, tableID) combination. We must either handle the multiple rows, which is necessary for
1:b7730e4:             // checking permissions, or add a grantor column to the key, which is necessary for granting or revoking
1:b7730e4:             // permissions.
1:b7730e4:             row = getExecutionFactory().getIndexableRow( 2);
1:b7730e4:             row.setColumn(1, getAuthorizationID( perm.getGrantee()));
1:b7730e4:             String tableUUIDStr = ((TablePermsDescriptor) perm).getTableUUID().toString();
1:eb47bdb:             row.setColumn(2, new SQLChar(tableUUIDStr));
1:b7e13a9:             break;
1:ac100d6:         case TABLEPERMSID_INDEX_NUM:
1:ac100d6:             row = getExecutionFactory().getIndexableRow( 1);
1:ac100d6:             String tablePermsUUIDStr = perm.getObjectID().toString();
1:eb47bdb:             row.setColumn(1, new SQLChar(tablePermsUUIDStr));
1:ac100d6:             break;
1:b7e13a9:         case TABLEID_INDEX_NUM:
1:b7e13a9:             row = getExecutionFactory().getIndexableRow( 1);
1:b7e13a9:             tableUUIDStr = ((TablePermsDescriptor) perm).getTableUUID().toString();
1:eb47bdb:             row.setColumn(1, new SQLChar(tableUUIDStr));
1:ac100d6:             break;
1:b7730e4:         }
1:b7730e4:         return row;
1:b7730e4:     } // end of buildIndexRow
1:b7730e4:     
1:55f1cc9:     public int getPrimaryKeyIndexNumber()
1:b7730e4:     {
1:b7730e4:         return GRANTEE_TABLE_GRANTOR_INDEX_NUM;
1:b7730e4:     }
1:b7730e4: 
1:b7730e4:     /**
1:b7730e4:      * Or a set of permissions in with a row from this catalog table
1:b7730e4:      *
1:b7730e4:      * @param row an existing row
1:b7730e4:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:b7730e4:      * @param colsChanged An array with one element for each column in row. It is updated to
1:b7730e4:      *                    indicate which columns in row were changed
1:b7730e4:      *
1:b7730e4:      * @return The number of columns that were changed.
1:b7730e4:      *
1:b7730e4:      * @exception StandardException standard error policy
1:b7730e4:      */
1:b7730e4:     public int orPermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:b7730e4:         throws StandardException
1:b7730e4:     {
1:b7730e4:         TablePermsDescriptor tablePerms = (TablePermsDescriptor) perm;
1:b7730e4:         int changeCount = 0;
1:b7730e4:         changeCount += orOnePermission( row, colsChanged, SELECTPRIV_COL_NUM, tablePerms.getSelectPriv());
1:b7730e4:         changeCount += orOnePermission( row, colsChanged, DELETEPRIV_COL_NUM, tablePerms.getDeletePriv());
1:b7730e4:         changeCount += orOnePermission( row, colsChanged, INSERTPRIV_COL_NUM, tablePerms.getInsertPriv());
1:b7730e4:         changeCount += orOnePermission( row, colsChanged, UPDATEPRIV_COL_NUM, tablePerms.getUpdatePriv());
1:b7730e4:         changeCount += orOnePermission( row, colsChanged, REFERENCESPRIV_COL_NUM, tablePerms.getReferencesPriv());
1:b7730e4:         changeCount += orOnePermission( row, colsChanged, TRIGGERPRIV_COL_NUM, tablePerms.getTriggerPriv());
1:b7730e4: 
1:b7730e4:         return changeCount;
1:b7730e4:     } // end of orPermissions
1:b7730e4: 
1:b7730e4:     private int orOnePermission( ExecRow row, boolean[] colsChanged, int column, String permission)
1:b7730e4:         throws StandardException
1:b7730e4:     {
1:b7730e4:         if( permission.charAt(0) == 'N')
1:b7730e4:             return 0;
1:b7730e4: 
1:b7730e4:         if( SanityManager.DEBUG)
1:b7730e4:             SanityManager.ASSERT( permission.charAt(0) == 'Y' || permission.charAt(0) == 'y',
1:b7730e4:                                   "Invalid permission passed to SYSTABLEPERMSRowFactory.orOnePermission");
1:b7730e4:         DataValueDescriptor existingPermDVD = row.getColumn( column);
1:b7730e4:         char existingPerm = existingPermDVD.getString().charAt(0);
1:b7730e4:         if( existingPerm == 'Y' || existingPerm == permission.charAt(0))
1:b7730e4:             return 0;
1:b7730e4:         existingPermDVD.setValue( permission);
1:b7730e4:         colsChanged[ column - 1] = true;
1:b7730e4:         return 1;
1:b7730e4:     } // end of orOnePermission
1:b7730e4: 
1:b7730e4:     /**
1:b7730e4:      * Remove a set of permissions from a row from this catalog table
1:b7730e4:      *
1:b7730e4:      * @param row an existing row
1:b7730e4:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:b7730e4:      * @param colsChanged An array with one element for each column in row. It is updated to
1:b7730e4:      *                    indicate which columns in row were changed
1:b7730e4:      *
1:b7730e4:      * @return -1 if there are no permissions left in the row, otherwise the number of columns that were changed.
1:b7730e4:      *
1:b7730e4:      * @exception StandardException standard error policy
1:b7730e4:      */
1:b7730e4:     public int removePermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:b7730e4:         throws StandardException
1:b7730e4:     {
1:b7730e4:         TablePermsDescriptor tablePerms = (TablePermsDescriptor) perm;
1:b7730e4:         int changeCount = 0;
1:b7730e4:         boolean permissionsLeft =
1:b7730e4:           ( removeOnePermission( row, colsChanged, SELECTPRIV_COL_NUM, tablePerms.getSelectPriv()) |
1:b7730e4:             removeOnePermission( row, colsChanged, DELETEPRIV_COL_NUM, tablePerms.getDeletePriv()) |
1:b7730e4:             removeOnePermission( row, colsChanged, INSERTPRIV_COL_NUM, tablePerms.getInsertPriv()) |
1:b7730e4:             removeOnePermission( row, colsChanged, UPDATEPRIV_COL_NUM, tablePerms.getUpdatePriv()) |
1:b7730e4:             removeOnePermission( row, colsChanged, REFERENCESPRIV_COL_NUM, tablePerms.getReferencesPriv()) |
1:b7730e4:             removeOnePermission( row, colsChanged, TRIGGERPRIV_COL_NUM, tablePerms.getTriggerPriv()));
1:b7730e4:         if( ! permissionsLeft)
1:b7730e4:             return -1;
1:b7730e4:         for( int i = 0; i < colsChanged.length; i++)
1:b7730e4:         {
1:b7730e4:             if( colsChanged[ i])
1:b7730e4:                 changeCount++;
1:b7730e4:         }
1:b7730e4:         return changeCount;
1:b7730e4:     } // end of removePermissions
1:b7730e4: 
1:b7730e4:     private boolean removeOnePermission( ExecRow row, boolean[] colsChanged, int column, String permission)
1:b7730e4:         throws StandardException
1:b7730e4:     {
1:b7730e4:         DataValueDescriptor existingPermDVD = row.getColumn( column);
1:b7730e4:         char existingPerm = existingPermDVD.getString().charAt(0);
1:b7730e4: 
1:b7730e4:         if( permission.charAt(0) == 'N') // Don't remove this one
1:b7730e4:             return existingPerm != 'N'; // The grantee still has some permissions on this table
1:b7730e4:         if( SanityManager.DEBUG)
1:b7730e4:             SanityManager.ASSERT( permission.charAt(0) == 'Y' || permission.charAt(0) == 'y',
1:b7730e4:                                   "Invalid permission passed to SYSTABLEPERMSRowFactory.removeOnePermission");
1:b7730e4:         if( existingPerm != 'N')
1:b7730e4:         {
1:b7730e4:             existingPermDVD.setValue( "N");
1:b7730e4:             colsChanged[ column - 1] = true;
1:b7730e4:         }
1:b7730e4:         return false;
1:b7730e4:     } // end of removeOnePermission
1:7a1a699:     
1:7a1a699: 	/** 
1:7a1a699: 	 * @see PermissionsCatalogRowFactory#setUUIDOfThePassedDescriptor
1:7a1a699: 	 */
1:7a1a699:     public void setUUIDOfThePassedDescriptor(ExecRow row, PermissionsDescriptor perm)
1:7a1a699:     throws StandardException
1:7a1a699:     {
1:7a1a699:         DataValueDescriptor existingPermDVD = row.getColumn(TABLEPERMSID_COL_NUM);
1:7a1a699:         perm.setUUID(getUUIDFactory().recreateUUID(existingPermDVD.getString()));
1:7a1a699:     }
1:b7730e4: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1:     public static final int GRANTEE_COL_NUM_IN_GRANTEE_TABLE_GRANTOR_INDEX = 1;
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1:     SYSTABLEPERMSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:082459a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return new SystemColumn[] {
1:             SystemColumnImpl.getUUIDColumn("TABLEPERMSID", false),
1:             SystemColumnImpl.getIdentifierColumn("GRANTEE", false),
1:             SystemColumnImpl.getIdentifierColumn("GRANTOR", false),
1:             SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:             SystemColumnImpl.getIndicatorColumn("SELECTPRIV"),
1:             SystemColumnImpl.getIndicatorColumn("DELETEPRIV"),
1:             SystemColumnImpl.getIndicatorColumn("INSERTPRIV"),
1:             SystemColumnImpl.getIndicatorColumn("UPDATEPRIV"),
1:             SystemColumnImpl.getIndicatorColumn("REFERENCESPRIV"),
1:             SystemColumnImpl.getIndicatorColumn("TRIGGERPRIV"),
1:         };
1:     }
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLChar;
/////////////////////////////////////////////////////////////////////////
1:         row.setColumn( TABLEPERMSID_COL_NUM, new SQLChar(tablePermID));
1:         row.setColumn( TABLEID_COL_NUM, new SQLChar(tableID));
1:         row.setColumn( SELECTPRIV_COL_NUM, new SQLChar(selectPriv));
1:         row.setColumn( DELETEPRIV_COL_NUM, new SQLChar(deletePriv));
1:         row.setColumn( INSERTPRIV_COL_NUM, new SQLChar(insertPriv));
1:         row.setColumn( UPDATEPRIV_COL_NUM, new SQLChar(updatePriv));
1:         row.setColumn( REFERENCESPRIV_COL_NUM, new SQLChar( referencesPriv));
1:         row.setColumn( TRIGGERPRIV_COL_NUM, new SQLChar(triggerPriv));
/////////////////////////////////////////////////////////////////////////
1:             row.setColumn(2, new SQLChar(tableUUIDStr));
1:             row.setColumn(1, new SQLChar(tablePermsUUIDStr));
1:             row.setColumn(1, new SQLChar(tableUUIDStr));
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 		initInfo(COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, indexUniqueness, uuids);
commit:55f1cc9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public int getPrimaryKeyIndexNumber()
commit:7a1a699
/////////////////////////////////////////////////////////////////////////
1:     
1: 	/** 
1: 	 * @see PermissionsCatalogRowFactory#setUUIDOfThePassedDescriptor
1: 	 */
1:     public void setUUIDOfThePassedDescriptor(ExecRow row, PermissionsDescriptor perm)
1:     throws StandardException
1:     {
1:         DataValueDescriptor existingPermDVD = row.getColumn(TABLEPERMSID_COL_NUM);
1:         perm.setUUID(getUUIDFactory().recreateUUID(existingPermDVD.getString()));
1:     }
commit:ac100d6
/////////////////////////////////////////////////////////////////////////
1: 	private static final int TABLEPERMSID_COL_NUM = 1;
/////////////////////////////////////////////////////////////////////////
1:     public static final int TABLEPERMSID_INDEX_NUM = 1;
1: 		{ GRANTEE_COL_NUM, TABLEID_COL_NUM, GRANTOR_COL_NUM},
0: 		{ TABLEPERMSID_COL_NUM }
0: 		{"GRANTEE", "TABLEID", "GRANTOR"},
0: 		{"TABLEPERMSID"}
0:     private static final boolean[] indexUniqueness = { true, true};
1: 		,"c851401a-0103-0e39-b8e7-00000010f010"	// index1
1: 		,"80220011-010c-426e-c599-0000000f1120"	// index2
/////////////////////////////////////////////////////////////////////////
0:         row.setColumn( TABLEPERMSID_COL_NUM, dvf.getCharDataValue(tablePermID));
/////////////////////////////////////////////////////////////////////////
1:         String tablePermsUUIDString = row.getColumn(TABLEPERMSID_COL_NUM).getString();
/////////////////////////////////////////////////////////////////////////
0:             columnList[ TABLEPERMSID_COL_NUM - 1] =
0:                                       TABLEPERMSID_COL_NUM,
/////////////////////////////////////////////////////////////////////////
1:         case TABLEPERMSID_INDEX_NUM:
0:             row.setColumn(1, getDataValueFactory().getNullChar( (StringDataValue) null)); // TABLEPERMSID
1:             break;
/////////////////////////////////////////////////////////////////////////
0:         case TABLEPERMSID_INDEX_NUM:
1:             row = getExecutionFactory().getIndexableRow( 1);
1:             String tablePermsUUIDStr = perm.getObjectID().toString();
0:             row.setColumn(1, getDataValueFactory().getCharDataValue( tablePermsUUIDStr));
1:             break;
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
/////////////////////////////////////////////////////////////////////////
0: 	private static final int SYSTABLEPERMS_TABLEPERMSID = 1;
1:     private static final int GRANTEE_COL_NUM = 2;
1:     private static final int GRANTOR_COL_NUM = 3;
1:     private static final int TABLEID_COL_NUM = 4;
1:     private static final int SELECTPRIV_COL_NUM = 5;
1:     private static final int DELETEPRIV_COL_NUM = 6;
1:     private static final int INSERTPRIV_COL_NUM = 7;
1:     private static final int UPDATEPRIV_COL_NUM = 8;
1:     private static final int REFERENCESPRIV_COL_NUM = 9;
1:     private static final int TRIGGERPRIV_COL_NUM = 10;
1:     private static final int COLUMN_COUNT = 10;
/////////////////////////////////////////////////////////////////////////
1: 		UUID						oid;
1:         String tablePermID = null;
/////////////////////////////////////////////////////////////////////////
1:             oid = tpd.getUUID();
1:             if ( oid == null )
1:             {
1: 				oid = getUUIDFactory().createUUID();
1: 				tpd.setUUID(oid);
1:             }
1:             tablePermID = oid.toString();
1: 
1: 			grantee = getAuthorizationID( tpd.getGrantee());
/////////////////////////////////////////////////////////////////////////
0:         row.setColumn( SYSTABLEPERMS_TABLEPERMSID, dvf.getCharDataValue(tablePermID));
/////////////////////////////////////////////////////////////////////////
1: 		if( SanityManager.DEBUG)
0:         String tablePermsUUIDString = row.getColumn(SYSTABLEPERMS_TABLEPERMSID).getString();
1:         UUID tablePermsUUID = getUUIDFactory().recreateUUID(tablePermsUUIDString);
/////////////////////////////////////////////////////////////////////////
1: 		TablePermsDescriptor tabPermsDesc =
1:         new TablePermsDescriptor( dataDictionary,
1: 		tabPermsDesc.setUUID(tablePermsUUID);
1: 		return tabPermsDesc;
/////////////////////////////////////////////////////////////////////////
0:             columnList[ SYSTABLEPERMS_TABLEPERMSID - 1] =
0:                 new SystemColumnImpl( convertIdCase( "TABLEPERMSID"),
0:                                       SYSTABLEPERMS_TABLEPERMSID,
0:                                       0, // precision
0:                                       0, // scale
0:                                       false, // nullability
0:                                       "CHAR",
0:                                       true,
0:                                       36);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b7e13a9
/////////////////////////////////////////////////////////////////////////
1:     public static final int TABLEID_INDEX_NUM = 2;
1: 		{ TABLEPERMSID_COL_NUM },
1: 		{ TABLEID_COL_NUM }
0: 		{"TABLEPERMSID"},
0: 		{"TABLEID"}
1:     private static final boolean[] indexUniqueness = { true, true, false};
/////////////////////////////////////////////////////////////////////////
1: 		,"f81e0010-010c-bc85-060d-000000109ab8"	// index3
/////////////////////////////////////////////////////////////////////////
1:         case TABLEID_INDEX_NUM:
0:             row.setColumn(1, getDataValueFactory().getNullChar( (StringDataValue) null)); // TABLEID
1:             break;
/////////////////////////////////////////////////////////////////////////
0:         case TABLEID_INDEX_NUM:
1:             row = getExecutionFactory().getIndexableRow( 1);
1:             tableUUIDStr = ((TablePermsDescriptor) perm).getTableUUID().toString();
0:             row.setColumn(1, getDataValueFactory().getCharDataValue( tableUUIDStr));
0:             break;
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.iapi.sql.dictionary.PermissionsCatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.types.StringDataValue;
1: 
1: /**
1:  * Factory for creating a SYSTABLEPERMS row.
1:  *
1:  */
1: 
1: public class SYSTABLEPERMSRowFactory extends PermissionsCatalogRowFactory
1: {
1: 	static final String TABLENAME_STRING = "SYSTABLEPERMS";
1: 
1:     // Column numbers for the SYSTABLEPERMS table. 1 based
0:     private static final int GRANTEE_COL_NUM = 1;
0:     private static final int GRANTOR_COL_NUM = 2;
0:     private static final int TABLEID_COL_NUM = 3;
0:     private static final int SELECTPRIV_COL_NUM = 4;
0:     private static final int DELETEPRIV_COL_NUM = 5;
0:     private static final int INSERTPRIV_COL_NUM = 6;
0:     private static final int UPDATEPRIV_COL_NUM = 7;
0:     private static final int REFERENCESPRIV_COL_NUM = 8;
0:     private static final int TRIGGERPRIV_COL_NUM = 9;
0:     private static final int COLUMN_COUNT = 9;
1: 
1:     public static final int GRANTEE_TABLE_GRANTOR_INDEX_NUM = 0;
1: 	private static final int[][] indexColumnPositions = 
1: 	{ 
0: 		{ GRANTEE_COL_NUM, TABLEID_COL_NUM, GRANTOR_COL_NUM}
1: 	};
0: 	private static final String[][] indexColumnNames =
1: 	{
0: 		{"GRANTEE", "TABLEID", "GRANTOR"}
1: 	};
0:     private static final boolean[] indexUniqueness = { true};
1:     
1:     private	static final String[] uuids =
1:     {
1:         "b8450018-0103-0e39-b8e7-00000010f010" // catalog UUID
1: 		,"004b0019-0103-0e39-b8e7-00000010f010"	// heap UUID
0: 		,"c851401a-0103-0e39-b8e7-00000010f010"	// index
1:     };
1: 
0:     private SystemColumn[] columnList;
1: 
0:     public SYSTABLEPERMSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                    boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, indexColumnNames, indexUniqueness, uuids);
1: 	}
1: 
1: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent) throws StandardException
1: 	{
1:         DataValueDescriptor grantee = null;
1:         DataValueDescriptor grantor = null;
1:         String tableID = null;
1:         String selectPriv = null;
1:         String deletePriv = null;
1:         String insertPriv = null;
1:         String updatePriv = null;
1:         String referencesPriv = null;
1:         String triggerPriv = null;
1: 
1:         if( td == null)
1:         {
1:             grantee = getNullAuthorizationID();
1:             grantor = getNullAuthorizationID();
1:         }
1:         else
1:         {
1:             TablePermsDescriptor tpd = (TablePermsDescriptor) td;
0:             grantee = getAuthorizationID( tpd.getGrantee());
1:             grantor = getAuthorizationID( tpd.getGrantor());
1:             tableID = tpd.getTableUUID().toString();
1:             selectPriv = tpd.getSelectPriv();
1:             deletePriv = tpd.getDeletePriv();
1:             insertPriv = tpd.getInsertPriv();
1:             updatePriv = tpd.getUpdatePriv();
1:             referencesPriv = tpd.getReferencesPriv();
1:             triggerPriv = tpd.getTriggerPriv();
1:         }
1:         ExecRow row = getExecutionFactory().getValueRow( COLUMN_COUNT);
1:         row.setColumn( GRANTEE_COL_NUM, grantee);
1:         row.setColumn( GRANTOR_COL_NUM, grantor);
0:         row.setColumn( TABLEID_COL_NUM, dvf.getCharDataValue( tableID));
0:         row.setColumn( SELECTPRIV_COL_NUM, dvf.getCharDataValue( selectPriv));
0:         row.setColumn( DELETEPRIV_COL_NUM, dvf.getCharDataValue( deletePriv));
0:         row.setColumn( INSERTPRIV_COL_NUM, dvf.getCharDataValue( insertPriv));
0:         row.setColumn( UPDATEPRIV_COL_NUM, dvf.getCharDataValue( updatePriv));
0:         row.setColumn( REFERENCESPRIV_COL_NUM,dvf.getCharDataValue(  referencesPriv));
0:         row.setColumn( TRIGGERPRIV_COL_NUM, dvf.getCharDataValue( triggerPriv));
1: 
1:         return row;
1:     } // end of makeRow
1:             
1: 	/** builds a tuple descriptor from a row */
1: 	public TupleDescriptor buildDescriptor(ExecRow row,
1:                                            TupleDescriptor parentTuple,
1:                                            DataDictionary dataDictionary)
1: 		throws StandardException
1:     {
1:         if( SanityManager.DEBUG)
1:             SanityManager.ASSERT( row.nColumns() == COLUMN_COUNT,
1:                                   "Wrong size row passed to SYSTABLEPERMSRowFactory.buildDescriptor");
1: 
1:         String tableUUIDString = row.getColumn( TABLEID_COL_NUM).getString();
1:         UUID tableUUID = getUUIDFactory().recreateUUID(tableUUIDString);
1:         String selectPriv  = row.getColumn( SELECTPRIV_COL_NUM).getString();
1:         String deletePriv  = row.getColumn( DELETEPRIV_COL_NUM).getString();
1:         String insertPriv  = row.getColumn( INSERTPRIV_COL_NUM).getString();
1:         String updatePriv  = row.getColumn( UPDATEPRIV_COL_NUM).getString();
1:         String referencesPriv  = row.getColumn( REFERENCESPRIV_COL_NUM).getString();
1:         String triggerPriv  = row.getColumn( TRIGGERPRIV_COL_NUM).getString();
1:         if( SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT( "y".equals(selectPriv) || "Y".equals(selectPriv) || "N".equals(selectPriv),
1:                                   "Invalid SYSTABLEPERMS.selectPriv column value: " + selectPriv);
1:             SanityManager.ASSERT( "y".equals(deletePriv) || "Y".equals(deletePriv) || "N".equals(deletePriv),
1:                                   "Invalid SYSTABLEPERMS.deletePriv column value: " + deletePriv);
1:             SanityManager.ASSERT( "y".equals(insertPriv) || "Y".equals(insertPriv) || "N".equals(insertPriv),
1:                                   "Invalid SYSTABLEPERMS.insertPriv column value: " + insertPriv);
1:             SanityManager.ASSERT( "y".equals(updatePriv) || "Y".equals(updatePriv) || "N".equals(updatePriv),
1:                                   "Invalid SYSTABLEPERMS.updatePriv column value: " + updatePriv);
1:             SanityManager.ASSERT( "y".equals(referencesPriv) || "Y".equals(referencesPriv) || "N".equals(referencesPriv),
1:                                   "Invalid SYSTABLEPERMS.referencesPriv column value: " + referencesPriv);
1:             SanityManager.ASSERT( "y".equals(triggerPriv) || "Y".equals(triggerPriv) || "N".equals(triggerPriv),
1:                                   "Invalid SYSTABLEPERMS.triggerPriv column value: " + triggerPriv);
1:         }
1: 
0:         return new TablePermsDescriptor( dataDictionary,
1:                                          getAuthorizationID( row, GRANTEE_COL_NUM),
1:                                          getAuthorizationID( row, GRANTOR_COL_NUM),
1:                                          tableUUID,
1:                                          selectPriv, deletePriv, insertPriv,
1:                                          updatePriv, referencesPriv, triggerPriv);
1:     } // end of buildDescriptor
1: 
1: 	/** builds a column list for the catalog */
1: 	public SystemColumn[] buildColumnList()
1:     {
0: 		if (columnList == null)
1:         {
0:             columnList = new SystemColumn[ COLUMN_COUNT];
1: 
0:             columnList[ GRANTEE_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "GRANTEE"),
0:                                     GRANTEE_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     AUTHORIZATION_ID_TYPE,
0:                                     AUTHORIZATION_ID_IS_BUILTIN_TYPE,
0:                                     AUTHORIZATION_ID_LENGTH);
0:             columnList[ GRANTOR_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "GRANTOR"),
0:                                     GRANTOR_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     AUTHORIZATION_ID_TYPE,
0:                                     AUTHORIZATION_ID_IS_BUILTIN_TYPE,
0:                                     AUTHORIZATION_ID_LENGTH);
0:             columnList[ TABLEID_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "TABLEID"),
0:                                     TABLEID_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     "CHAR", // dataType
0:                                     true, // built-in type
0:                                     36);
0:             columnList[ SELECTPRIV_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "SELECTPRIV"),
0:                                     SELECTPRIV_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     "CHAR", // dataType
0:                                     true, // built-in type
0:                                     1);
0:             columnList[ DELETEPRIV_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "DELETEPRIV"),
0:                                     DELETEPRIV_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     "CHAR", // dataType
0:                                     true, // built-in type
0:                                     1);
0:             columnList[ INSERTPRIV_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "INSERTPRIV"),
0:                                     INSERTPRIV_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     "CHAR", // dataType
0:                                     true, // built-in type
0:                                     1);
0:             columnList[ UPDATEPRIV_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "UPDATEPRIV"),
0:                                     UPDATEPRIV_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     "CHAR", // dataType
0:                                     true, // built-in type
0:                                     1);
0:             columnList[ REFERENCESPRIV_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "REFERENCESPRIV"),
0:                                     REFERENCESPRIV_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     "CHAR", // dataType
0:                                     true, // built-in type
0:                                     1);
0:             columnList[ TRIGGERPRIV_COL_NUM - 1] =
0:               new SystemColumnImpl( convertIdCase( "TRIGGERPRIV"),
0:                                     TRIGGERPRIV_COL_NUM,
0:                                     0, // precision
0:                                     0, // scale
0:                                     false, // nullability
0:                                     "CHAR", // dataType
0:                                     true, // built-in type
0:                                     1);
1:         }
0: 		return columnList;
0:     } // end of buildColumnList
1: 
1: 	/**
0: 	 * builds an empty row given for a given index number.
1: 	 */
0:   	public ExecIndexRow buildEmptyIndexRow(int indexNumber,
0:                                            RowLocation rowLocation)
1:   		throws StandardException
1:     {
0:         ExecIndexRow row = getExecutionFactory().getIndexableRow( indexColumnPositions[indexNumber].length + 1);
0:         row.setColumn( row.nColumns(), rowLocation);
1:         
1:         switch( indexNumber)
1:         {
1:         case GRANTEE_TABLE_GRANTOR_INDEX_NUM:
0:             row.setColumn(1, getNullAuthorizationID()); // grantee
0:             row.setColumn(2, getDataValueFactory().getNullChar( (StringDataValue) null)); // table UUID
0:             row.setColumn(3, getNullAuthorizationID()); // grantor
0:             break;
1:         }
1:         return row;
0:     } // end of buildEmptyIndexRow
1: 
1: 	/**
1: 	 * builds a key row given for a given index number.
1: 	 */
1:   	public ExecIndexRow buildIndexKeyRow( int indexNumber,
1:                                           PermissionsDescriptor perm) 
1:   		throws StandardException
1:     {
1:         ExecIndexRow row = null;
1:         
1:         switch( indexNumber)
1:         {
1:         case GRANTEE_TABLE_GRANTOR_INDEX_NUM:
1:             // RESOLVE We do not support the FOR GRANT OPTION, so table permission rows are unique on the
1:             // grantee and table UUID columns. The grantor column will always have the name of the owner of the
1:             // table. So the index key, used for searching the index, only has grantee and table UUID columns.
1:             // It does not have a grantor column.
1:             //
1:             // If we support FOR GRANT OPTION then there may be multiple table permissions rows for a
1:             // (grantee, tableID) combination. We must either handle the multiple rows, which is necessary for
1:             // checking permissions, or add a grantor column to the key, which is necessary for granting or revoking
1:             // permissions.
1:             row = getExecutionFactory().getIndexableRow( 2);
1:             row.setColumn(1, getAuthorizationID( perm.getGrantee()));
1:             String tableUUIDStr = ((TablePermsDescriptor) perm).getTableUUID().toString();
0:             row.setColumn(2, getDataValueFactory().getCharDataValue( tableUUIDStr));
0:             break;
1:         }
1:         return row;
1:     } // end of buildIndexRow
1:     
0:     public int getPrimaryIndexNumber()
1:     {
1:         return GRANTEE_TABLE_GRANTOR_INDEX_NUM;
1:     }
1: 
1:     /**
1:      * Or a set of permissions in with a row from this catalog table
1:      *
1:      * @param row an existing row
1:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:      * @param colsChanged An array with one element for each column in row. It is updated to
1:      *                    indicate which columns in row were changed
1:      *
1:      * @return The number of columns that were changed.
1:      *
1:      * @exception StandardException standard error policy
1:      */
1:     public int orPermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:         throws StandardException
1:     {
1:         TablePermsDescriptor tablePerms = (TablePermsDescriptor) perm;
1:         int changeCount = 0;
1:         changeCount += orOnePermission( row, colsChanged, SELECTPRIV_COL_NUM, tablePerms.getSelectPriv());
1:         changeCount += orOnePermission( row, colsChanged, DELETEPRIV_COL_NUM, tablePerms.getDeletePriv());
1:         changeCount += orOnePermission( row, colsChanged, INSERTPRIV_COL_NUM, tablePerms.getInsertPriv());
1:         changeCount += orOnePermission( row, colsChanged, UPDATEPRIV_COL_NUM, tablePerms.getUpdatePriv());
1:         changeCount += orOnePermission( row, colsChanged, REFERENCESPRIV_COL_NUM, tablePerms.getReferencesPriv());
1:         changeCount += orOnePermission( row, colsChanged, TRIGGERPRIV_COL_NUM, tablePerms.getTriggerPriv());
1: 
1:         return changeCount;
1:     } // end of orPermissions
1: 
1:     private int orOnePermission( ExecRow row, boolean[] colsChanged, int column, String permission)
1:         throws StandardException
1:     {
1:         if( permission.charAt(0) == 'N')
1:             return 0;
1: 
1:         if( SanityManager.DEBUG)
1:             SanityManager.ASSERT( permission.charAt(0) == 'Y' || permission.charAt(0) == 'y',
1:                                   "Invalid permission passed to SYSTABLEPERMSRowFactory.orOnePermission");
1:         DataValueDescriptor existingPermDVD = row.getColumn( column);
1:         char existingPerm = existingPermDVD.getString().charAt(0);
1:         if( existingPerm == 'Y' || existingPerm == permission.charAt(0))
1:             return 0;
1:         existingPermDVD.setValue( permission);
1:         colsChanged[ column - 1] = true;
1:         return 1;
1:     } // end of orOnePermission
1: 
1:     /**
1:      * Remove a set of permissions from a row from this catalog table
1:      *
1:      * @param row an existing row
1:      * @param perm a permission descriptor of the appropriate class for this PermissionsCatalogRowFactory class.
1:      * @param colsChanged An array with one element for each column in row. It is updated to
1:      *                    indicate which columns in row were changed
1:      *
1:      * @return -1 if there are no permissions left in the row, otherwise the number of columns that were changed.
1:      *
1:      * @exception StandardException standard error policy
1:      */
1:     public int removePermissions( ExecRow row, PermissionsDescriptor perm, boolean[] colsChanged)
1:         throws StandardException
1:     {
1:         TablePermsDescriptor tablePerms = (TablePermsDescriptor) perm;
1:         int changeCount = 0;
1:         boolean permissionsLeft =
1:           ( removeOnePermission( row, colsChanged, SELECTPRIV_COL_NUM, tablePerms.getSelectPriv()) |
1:             removeOnePermission( row, colsChanged, DELETEPRIV_COL_NUM, tablePerms.getDeletePriv()) |
1:             removeOnePermission( row, colsChanged, INSERTPRIV_COL_NUM, tablePerms.getInsertPriv()) |
1:             removeOnePermission( row, colsChanged, UPDATEPRIV_COL_NUM, tablePerms.getUpdatePriv()) |
1:             removeOnePermission( row, colsChanged, REFERENCESPRIV_COL_NUM, tablePerms.getReferencesPriv()) |
1:             removeOnePermission( row, colsChanged, TRIGGERPRIV_COL_NUM, tablePerms.getTriggerPriv()));
1:         if( ! permissionsLeft)
1:             return -1;
1:         for( int i = 0; i < colsChanged.length; i++)
1:         {
1:             if( colsChanged[ i])
1:                 changeCount++;
1:         }
1:         return changeCount;
1:     } // end of removePermissions
1: 
1:     private boolean removeOnePermission( ExecRow row, boolean[] colsChanged, int column, String permission)
1:         throws StandardException
1:     {
1:         DataValueDescriptor existingPermDVD = row.getColumn( column);
1:         char existingPerm = existingPermDVD.getString().charAt(0);
1: 
1:         if( permission.charAt(0) == 'N') // Don't remove this one
1:             return existingPerm != 'N'; // The grantee still has some permissions on this table
1:         if( SanityManager.DEBUG)
1:             SanityManager.ASSERT( permission.charAt(0) == 'Y' || permission.charAt(0) == 'y',
1:                                   "Invalid permission passed to SYSTABLEPERMSRowFactory.removeOnePermission");
1:         if( existingPerm != 'N')
1:         {
1:             existingPermDVD.setValue( "N");
1:             colsChanged[ column - 1] = true;
1:         }
1:         return false;
1:     } // end of removeOnePermission
1: }
============================================================================