1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.IndexColumnOrder
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.ColumnOrdering;
1:c9a1206: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
2:eac0369: /**
1:eac0369: 	Basic implementation of ColumnOrdering.
1:eac0369: 	Not sure what to tell callers about 0-based versus 1-based numbering.
1:eac0369: 	Assume 0-based for now.
1:eac0369: 
1:eac0369:  */
1:eac0369: public class IndexColumnOrder implements ColumnOrdering, Formatable
1:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	int colNum;
1:eac0369: 	boolean ascending;
1:cc30c0c:         /**
1:cc30c0c:          * indicate whether NULL values should sort low.
1:cc30c0c:          *
1:cc30c0c:          * nullsOrderedLow is usually false, because generally Derby defaults
1:cc30c0c:          * to have NULL values compare higher than non-null values, but if
1:cc30c0c:          * the user specifies an ORDER BY clause with a <null ordering>
1:cc30c0c:          * specification that indicates that NULL values should be ordered
1:cc30c0c:          * lower than non-NULL values, thien nullsOrderedLow is set to true.
1:cc30c0c:          */
1:cc30c0c:         boolean nullsOrderedLow;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * class interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for formatable
1:eac0369: 	 */
1:eac0369: 	public IndexColumnOrder() 
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public IndexColumnOrder(int colNum) {
1:eac0369: 		 this.colNum = colNum;
1:eac0369: 		 this.ascending = true;
1:cc30c0c:                  this.nullsOrderedLow = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public IndexColumnOrder(int colNum, boolean ascending) {
1:eac0369: 		 this.colNum = colNum;
1:eac0369: 		 this.ascending = ascending;
1:cc30c0c:                  this.nullsOrderedLow = false;
1:cc30c0c: 	}
1:cc30c0c: 
1:cc30c0c:         /**
1:cc30c0c:          * constructor used by the ORDER BY clause.
1:cc30c0c:          *
1:cc30c0c:          * This version of the constructor is used by the compiler when
1:cc30c0c:          * it processes an ORDER BY clause in a SQL statement. For such
1:cc30c0c:          * statements, the user gets to control whether NULL values are
1:cc30c0c:          * ordered as lower than all non-NULL values, or higher than all
1:cc30c0c:          * non-NULL values.
1:cc30c0c:          *
1:cc30c0c:          * @param colNum number of this column
1:cc30c0c:          * @param ascending whether the ORDER BY is ascendeing or descending
1:cc30c0c:          * @param nullsLow whether nulls should be ordered low
1:cc30c0c:          */
1:cc30c0c: 	public IndexColumnOrder(int colNum, boolean ascending,
1:cc30c0c:                 boolean nullsLow)
1:cc30c0c:         {
1:cc30c0c: 		 this.colNum = colNum;
1:cc30c0c: 		 this.ascending = ascending;
1:cc30c0c:                  this.nullsOrderedLow = nullsLow;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * ColumnOrdering interface
1:eac0369:  	 */
1:eac0369: 	public int getColumnId() {
1:eac0369: 		return colNum;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean getIsAscending() {
1:eac0369: 		return ascending;
1:eac0369: 	}
1:eac0369: 
1:cc30c0c:         /**
1:cc30c0c:          * Indicate whether NULL values should be ordered below non-NULL.
1:cc30c0c:          *
1:cc30c0c:          * This function returns TRUE if the user has specified, via the
1:cc30c0c:          * <null ordering> clause in the ORDER BY clause, that NULL values
1:cc30c0c:          * of this column should sort lower than non-NULL values.
1:cc30c0c:          *
1:cc30c0c:          * @return whether nulls should sort low
1:cc30c0c:          */
1:cc30c0c: 	public boolean getIsNullsOrderedLow() {
1:cc30c0c: 		return nullsOrderedLow;
1:cc30c0c: 	}
1:cc30c0c: 
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Write this object out
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here
1:eac0369: 	 *
1:eac0369:  	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeInt(colNum);
1:eac0369: 		out.writeBoolean(ascending);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in)
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		colNum = in.readInt();
1:eac0369: 		ascending = in.readBoolean();
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.INDEX_COLUMN_ORDER_V01_ID; }
1:c9a1206: 
1:c9a1206: 	public String toString() {
1:c9a1206: 		if (SanityManager.DEBUG) {
1:c9a1206: 			return
1:c9a1206: 				"IndexColumnOrder.colNum: " + colNum + "\n" +
1:c9a1206: 				"IndexColumnOrder.ascending: " + ascending  + "\n" +
1:c9a1206: 				"IndexColumnOrder.nullsOrderedLow: " + nullsOrderedLow;
1:c9a1206: 		} else {
1:c9a1206: 			return super.toString();
1:c9a1206: 		}
1:c9a1206: 
1:c9a1206: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:cc30c0c
/////////////////////////////////////////////////////////////////////////
1:         /**
1:          * indicate whether NULL values should sort low.
1:          *
1:          * nullsOrderedLow is usually false, because generally Derby defaults
1:          * to have NULL values compare higher than non-null values, but if
1:          * the user specifies an ORDER BY clause with a <null ordering>
1:          * specification that indicates that NULL values should be ordered
1:          * lower than non-NULL values, thien nullsOrderedLow is set to true.
1:          */
1:         boolean nullsOrderedLow;
/////////////////////////////////////////////////////////////////////////
1:                  this.nullsOrderedLow = false;
1:                  this.nullsOrderedLow = false;
1: 	}
1: 
1:         /**
1:          * constructor used by the ORDER BY clause.
1:          *
1:          * This version of the constructor is used by the compiler when
1:          * it processes an ORDER BY clause in a SQL statement. For such
1:          * statements, the user gets to control whether NULL values are
1:          * ordered as lower than all non-NULL values, or higher than all
1:          * non-NULL values.
1:          *
1:          * @param colNum number of this column
1:          * @param ascending whether the ORDER BY is ascendeing or descending
1:          * @param nullsLow whether nulls should be ordered low
1:          */
1: 	public IndexColumnOrder(int colNum, boolean ascending,
1:                 boolean nullsLow)
1:         {
1: 		 this.colNum = colNum;
1: 		 this.ascending = ascending;
1:                  this.nullsOrderedLow = nullsLow;
/////////////////////////////////////////////////////////////////////////
1:         /**
1:          * Indicate whether NULL values should be ordered below non-NULL.
1:          *
1:          * This function returns TRUE if the user has specified, via the
1:          * <null ordering> clause in the ORDER BY clause, that NULL values
1:          * of this column should sort lower than non-NULL values.
1:          *
1:          * @return whether nulls should sort low
1:          */
1: 	public boolean getIsNullsOrderedLow() {
1: 		return nullsOrderedLow;
1: 	}
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 	public String toString() {
1: 		if (SanityManager.DEBUG) {
1: 			return
1: 				"IndexColumnOrder.colNum: " + colNum + "\n" +
1: 				"IndexColumnOrder.ascending: " + ascending  + "\n" +
1: 				"IndexColumnOrder.nullsOrderedLow: " + nullsOrderedLow;
1: 		} else {
1: 			return super.toString();
1: 		}
1: 
1: 	}
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.IndexColumnOrder
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.store.access.ColumnOrdering;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: /**
1: 	Basic implementation of ColumnOrdering.
1: 	Not sure what to tell callers about 0-based versus 1-based numbering.
1: 	Assume 0-based for now.
1: 
0: 	@author ames
1:  */
1: public class IndexColumnOrder implements ColumnOrdering, Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	int colNum;
1: 	boolean ascending;
1: 
1: 	/*
1: 	 * class interface
1: 	 */
1: 
1: 	/**
1: 	 * Niladic constructor for formatable
1: 	 */
1: 	public IndexColumnOrder() 
1: 	{
1: 	}
1: 
1: 	public IndexColumnOrder(int colNum) {
1: 		 this.colNum = colNum;
1: 		 this.ascending = true;
1: 	}
1: 
1: 	public IndexColumnOrder(int colNum, boolean ascending) {
1: 		 this.colNum = colNum;
1: 		 this.ascending = ascending;
1: 	}
1: 
1: 	/*
1: 	 * ColumnOrdering interface
1:  	 */
1: 	public int getColumnId() {
1: 		return colNum;
1: 	}
1: 
1: 	public boolean getIsAscending() {
1: 		return ascending;
1: 	}
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 	/**
1: 	 * Write this object out
1: 	 *
1: 	 * @param out write bytes here
1: 	 *
1:  	 * @exception IOException thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeInt(colNum);
1: 		out.writeBoolean(ascending);
1: 	}
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal(ObjectInput in)
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		colNum = in.readInt();
1: 		ascending = in.readBoolean();
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.INDEX_COLUMN_ORDER_V01_ID; }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: /**
0: 	Basic implementation of ColumnOrdering.
0: 	Not sure what to tell callers about 0-based versus 1-based numbering.
0: 	Assume 0-based for now.
0: 
0: 	@author ames
0:  */
0: public class IndexColumnOrder implements ColumnOrdering, Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	int colNum;
0: 	boolean ascending;
0: 
0: 	/*
0: 	 * class interface
0: 	 */
0: 
0: 	/**
0: 	 * Niladic constructor for formatable
0: 	 */
0: 	public IndexColumnOrder() 
0: 	{
0: 	}
0: 
0: 	public IndexColumnOrder(int colNum) {
0: 		 this.colNum = colNum;
0: 		 this.ascending = true;
0: 	}
0: 
0: 	public IndexColumnOrder(int colNum, boolean ascending) {
0: 		 this.colNum = colNum;
0: 		 this.ascending = ascending;
0: 	}
0: 
0: 	/*
0: 	 * ColumnOrdering interface
0:  	 */
0: 	public int getColumnId() {
0: 		return colNum;
0: 	}
0: 
0: 	public boolean getIsAscending() {
0: 		return ascending;
0: 	}
0: 
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 	/**
0: 	 * Write this object out
0: 	 *
0: 	 * @param out write bytes here
0: 	 *
0:  	 * @exception IOException thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeInt(colNum);
0: 		out.writeBoolean(ascending);
0: 	}
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal(ObjectInput in)
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		colNum = in.readInt();
0: 		ascending = in.readBoolean();
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.INDEX_COLUMN_ORDER_V01_ID; }
0: }
============================================================================