1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServicePermission.java,v 1.15 2007/02/20 00:06:02 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.io.IOException;
1:a8b6921: import java.security.*;
1:a8b6921: import java.util.Enumeration;
1:a8b6921: import java.util.Hashtable;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * A bundle's authority to register or get a service.
1:a8b6921:  * <ul>
1:a8b6921:  * <li>The <code>ServicePermission.REGISTER</code> action allows a bundle to
1:a8b6921:  * register a service on the specified names.
1:a8b6921:  * <li>The <code>ServicePermission.GET</code> action allows a bundle to
1:a8b6921:  * detect a service and get it.
1:a8b6921:  * </ul>
1:a8b6921:  * Permission to get a service is required in order to detect events regarding
1:a8b6921:  * the service. Untrusted bundles should not be able to detect the presence of
1:a8b6921:  * certain services unless they have the appropriate
1:a8b6921:  * <code>ServicePermission</code> to get the specific service.
1:a8b6921:  * 
1:a8b6921:  * @version $Revision: 1.15 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: final public class ServicePermission extends BasicPermission {
1:a8b6921: 	static final long			serialVersionUID	= -7662148639076511574L;
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>get</code> (Value is "get").
1:a8b6921: 	 */
1:a8b6921: 	public final static String	GET					= "get";
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>register</code> (Value is "register").
1:a8b6921: 	 */
1:a8b6921: 	public final static String	REGISTER			= "register";
1:a8b6921: 
1:a8b6921: 	private final static int	ACTION_GET			= 0x00000001;
1:a8b6921: 	private final static int	ACTION_REGISTER		= 0x00000002;
1:a8b6921: 	private final static int	ACTION_ALL			= ACTION_GET
1:a8b6921: 															| ACTION_REGISTER;
1:a8b6921: 	private final static int	ACTION_NONE			= 0;
1:a8b6921: 	/**
1:a8b6921: 	 * The actions mask.
1:a8b6921: 	 */
1:a8b6921: 	private transient int		action_mask			= ACTION_NONE;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The actions in canonical form.
1:a8b6921: 	 * 
1:a8b6921: 	 * @serial
1:a8b6921: 	 */
1:a8b6921: 	private String				actions				= null;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Create a new ServicePermission.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The name of the service is specified as a fully qualified class name.
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 * ClassName ::= &lt;class name&gt; | &lt;class name ending in &quot;.*&quot;&gt;
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * Examples:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 * org.osgi.service.http.HttpService
1:a8b6921: 	 * org.osgi.service.http.*
1:a8b6921: 	 * org.osgi.service.snmp.*
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * There are two possible actions: <code>get</code> and
1:a8b6921: 	 * <code>register</code>. The <code>get</code> permission allows the
1:a8b6921: 	 * owner of this permission to obtain a service with this name. The
1:a8b6921: 	 * <code>register</code> permission allows the bundle to register a
1:a8b6921: 	 * service under that name.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param name class name
1:a8b6921: 	 * @param actions <code>get</code>,<code>register</code> (canonical
1:a8b6921: 	 *        order)
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public ServicePermission(String name, String actions) {
1:a8b6921: 		this(name, getMask(actions));
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Package private constructor used by ServicePermissionCollection.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param name class name
1:a8b6921: 	 * @param mask action mask
1:a8b6921: 	 */
1:a8b6921: 	ServicePermission(String name, int mask) {
1:a8b6921: 		super(name);
1:a8b6921: 
1:a8b6921: 		init(mask);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Called by constructors and when deserialized.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param mask action mask
1:a8b6921: 	 */
1:a8b6921: 	private void init(int mask) {
1:a8b6921: 		if ((mask == ACTION_NONE) || ((mask & ACTION_ALL) != mask)) {
1:a8b6921: 			throw new IllegalArgumentException("invalid action string");
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		action_mask = mask;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Parse action string into action mask.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param actions Action string.
1:a8b6921: 	 * @return action mask.
1:a8b6921: 	 */
1:a8b6921: 	private static int getMask(String actions) {
1:a8b6921: 		boolean seencomma = false;
1:a8b6921: 
1:a8b6921: 		int mask = ACTION_NONE;
1:a8b6921: 
1:a8b6921: 		if (actions == null) {
1:a8b6921: 			return mask;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		char[] a = actions.toCharArray();
1:a8b6921: 
1:a8b6921: 		int i = a.length - 1;
1:a8b6921: 		if (i < 0)
1:a8b6921: 			return mask;
1:a8b6921: 
1:a8b6921: 		while (i != -1) {
1:a8b6921: 			char c;
1:a8b6921: 
1:a8b6921: 			// skip whitespace
1:a8b6921: 			while ((i != -1)
1:a8b6921: 					&& ((c = a[i]) == ' ' || c == '\r' || c == '\n'
1:a8b6921: 							|| c == '\f' || c == '\t'))
1:a8b6921: 				i--;
1:a8b6921: 
1:a8b6921: 			// check for the known strings
1:a8b6921: 			int matchlen;
1:a8b6921: 
1:a8b6921: 			if (i >= 2 && (a[i - 2] == 'g' || a[i - 2] == 'G')
1:a8b6921: 					&& (a[i - 1] == 'e' || a[i - 1] == 'E')
1:a8b6921: 					&& (a[i] == 't' || a[i] == 'T')) {
1:a8b6921: 				matchlen = 3;
1:a8b6921: 				mask |= ACTION_GET;
1:a8b6921: 
1:a8b6921: 			}
1:a8b6921: 			else
1:a8b6921: 				if (i >= 7 && (a[i - 7] == 'r' || a[i - 7] == 'R')
1:a8b6921: 						&& (a[i - 6] == 'e' || a[i - 6] == 'E')
1:a8b6921: 						&& (a[i - 5] == 'g' || a[i - 5] == 'G')
1:a8b6921: 						&& (a[i - 4] == 'i' || a[i - 4] == 'I')
1:a8b6921: 						&& (a[i - 3] == 's' || a[i - 3] == 'S')
1:a8b6921: 						&& (a[i - 2] == 't' || a[i - 2] == 'T')
1:a8b6921: 						&& (a[i - 1] == 'e' || a[i - 1] == 'E')
1:a8b6921: 						&& (a[i] == 'r' || a[i] == 'R')) {
1:a8b6921: 					matchlen = 8;
1:a8b6921: 					mask |= ACTION_REGISTER;
1:a8b6921: 
1:a8b6921: 				}
1:a8b6921: 				else {
1:a8b6921: 					// parse error
1:a8b6921: 					throw new IllegalArgumentException("invalid permission: "
1:a8b6921: 							+ actions);
1:a8b6921: 				}
1:a8b6921: 
1:a8b6921: 			// make sure we didn't just match the tail of a word
1:a8b6921: 			// like "ackbarfregister". Also, skip to the comma.
1:a8b6921: 			seencomma = false;
1:a8b6921: 			while (i >= matchlen && !seencomma) {
1:a8b6921: 				switch (a[i - matchlen]) {
1:a8b6921: 					case ',' :
1:a8b6921: 						seencomma = true;
1:a8b6921: 					/* FALLTHROUGH */
1:a8b6921: 					case ' ' :
1:a8b6921: 					case '\r' :
1:a8b6921: 					case '\n' :
1:a8b6921: 					case '\f' :
1:a8b6921: 					case '\t' :
1:a8b6921: 						break;
1:a8b6921: 					default :
1:a8b6921: 						throw new IllegalArgumentException(
1:a8b6921: 								"invalid permission: " + actions);
1:a8b6921: 				}
1:a8b6921: 				i--;
1:a8b6921: 			}
1:a8b6921: 
1:a8b6921: 			// point i at the location of the comma minus one (or -1).
1:a8b6921: 			i -= matchlen;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		if (seencomma) {
1:a8b6921: 			throw new IllegalArgumentException("invalid permission: " + actions);
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		return mask;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Determines if a <code>ServicePermission</code> object "implies" the
1:a8b6921: 	 * specified permission.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param p The target permission to check.
1:a8b6921: 	 * @return <code>true</code> if the specified permission is implied by
1:a8b6921: 	 *         this object; <code>false</code> otherwise.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public boolean implies(Permission p) {
1:a8b6921: 		if (p instanceof ServicePermission) {
1:a8b6921: 			ServicePermission target = (ServicePermission) p;
1:a8b6921: 
1:a8b6921: 			return (((action_mask & target.action_mask) == target.action_mask) && super
1:a8b6921: 					.implies(p));
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		return (false);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the canonical string representation of the actions. Always
1:a8b6921: 	 * returns present actions in the following order: <code>get</code>,
1:a8b6921: 	 * <code>register</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The canonical string representation of the actions.
1:a8b6921: 	 */
1:a8b6921: 	public String getActions() {
1:a8b6921: 		if (actions == null) {
1:a8b6921: 			StringBuffer sb = new StringBuffer();
1:a8b6921: 			boolean comma = false;
1:a8b6921: 
1:a8b6921: 			if ((action_mask & ACTION_GET) == ACTION_GET) {
1:a8b6921: 				sb.append(GET);
1:a8b6921: 				comma = true;
1:a8b6921: 			}
1:a8b6921: 
1:a8b6921: 			if ((action_mask & ACTION_REGISTER) == ACTION_REGISTER) {
1:a8b6921: 				if (comma)
1:a8b6921: 					sb.append(',');
1:a8b6921: 				sb.append(REGISTER);
1:a8b6921: 			}
1:a8b6921: 
1:a8b6921: 			actions = sb.toString();
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		return (actions);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns a new <code>PermissionCollection</code> object for storing
1:a8b6921: 	 * <code>ServicePermission<code> objects.
1:a8b6921: 	 *
1:a8b6921: 	 * @return A new <code>PermissionCollection</code> object suitable for storing
1:a8b6921: 	 * <code>ServicePermission</code> objects.
1:a8b6921: 	 */
1:a8b6921: 	public PermissionCollection newPermissionCollection() {
1:a8b6921: 		return (new ServicePermissionCollection());
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Determines the equalty of two ServicePermission objects.
1:a8b6921: 	 * 
1:a8b6921: 	 * Checks that specified object has the same class name and action as this
1:a8b6921: 	 * <code>ServicePermission</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param obj The object to test for equality.
1:a8b6921: 	 * @return true if obj is a <code>ServicePermission</code>, and has the
1:a8b6921: 	 *         same class name and actions as this
1:a8b6921: 	 *         <code>ServicePermission</code> object; <code>false</code>
1:a8b6921: 	 *         otherwise.
1:a8b6921: 	 */
1:a8b6921: 	public boolean equals(Object obj) {
1:a8b6921: 		if (obj == this) {
1:a8b6921: 			return (true);
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		if (!(obj instanceof ServicePermission)) {
1:a8b6921: 			return (false);
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		ServicePermission p = (ServicePermission) obj;
1:a8b6921: 
1:a8b6921: 		return ((action_mask == p.action_mask) && getName().equals(p.getName()));
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the hash code value for this object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return Hash code value for this object.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public int hashCode() {
1:a8b6921: 		return (getName().hashCode() ^ getActions().hashCode());
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the current action mask. Used by the ServicePermissionCollection
1:a8b6921: 	 * object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The actions mask.
1:a8b6921: 	 */
1:a8b6921: 	int getMask() {
1:a8b6921: 		return (action_mask);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * WriteObject is called to save the state of this permission to a stream.
1:a8b6921: 	 * The actions are serialized, and the superclass takes care of the name.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	private synchronized void writeObject(java.io.ObjectOutputStream s)
1:a8b6921: 			throws IOException {
1:a8b6921: 		// Write out the actions. The superclass takes care of the name
1:a8b6921: 		// call getActions to make sure actions field is initialized
1:a8b6921: 		if (actions == null)
1:a8b6921: 			getActions();
1:a8b6921: 		s.defaultWriteObject();
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * readObject is called to restore the state of this permission from a
1:a8b6921: 	 * stream.
1:a8b6921: 	 */
1:a8b6921: 	private synchronized void readObject(java.io.ObjectInputStream s)
1:a8b6921: 			throws IOException, ClassNotFoundException {
1:a8b6921: 		// Read in the action, then initialize the rest
1:a8b6921: 		s.defaultReadObject();
1:a8b6921: 		init(getMask(actions));
1:a8b6921: 	}
1:a8b6921: }
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * Stores a set of ServicePermission permissions.
1:a8b6921:  * 
1:a8b6921:  * @see java.security.Permission
1:a8b6921:  * @see java.security.Permissions
1:a8b6921:  * @see java.security.PermissionCollection
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: final class ServicePermissionCollection extends PermissionCollection {
1:a8b6921: 	static final long	serialVersionUID	= 662615640374640621L;
1:a8b6921: 	/**
1:a8b6921: 	 * Table of permissions.
1:a8b6921: 	 * 
1:a8b6921: 	 * @serial
1:a8b6921: 	 */
1:7051698: 	private Hashtable<String,Permission>	permissions;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Boolean saying if "*" is in the collection.
1:a8b6921: 	 * 
1:a8b6921: 	 * @serial
1:a8b6921: 	 */
1:a8b6921: 	private boolean		all_allowed;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Creates an empty ServicePermissions object.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public ServicePermissionCollection() {
1:7051698: 		permissions = new Hashtable<String,Permission>();
1:a8b6921: 		all_allowed = false;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Adds a permission to the <code>ServicePermission</code> objects using
1:a8b6921: 	 * the key for the hash as the name.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param permission The Permission object to add.
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws IllegalArgumentException If the permission is not a
1:a8b6921: 	 *         ServicePermission object.
1:a8b6921: 	 * @throws SecurityException If this
1:a8b6921: 	 *         <code>ServicePermissionCollection</code> object has been marked
1:a8b6921: 	 *         read-only.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public void add(Permission permission) {
1:a8b6921: 		if (!(permission instanceof ServicePermission))
1:a8b6921: 			throw new IllegalArgumentException("invalid permission: "
1:a8b6921: 					+ permission);
1:a8b6921: 		if (isReadOnly())
1:a8b6921: 			throw new SecurityException("attempt to add a Permission to a "
1:a8b6921: 					+ "readonly PermissionCollection");
1:a8b6921: 
1:a8b6921: 		ServicePermission sp = (ServicePermission) permission;
1:a8b6921: 		String name = sp.getName();
1:a8b6921: 
1:a8b6921: 		ServicePermission existing = (ServicePermission) permissions.get(name);
1:a8b6921: 
1:a8b6921: 		if (existing != null) {
1:a8b6921: 			int oldMask = existing.getMask();
1:a8b6921: 			int newMask = sp.getMask();
1:a8b6921: 			if (oldMask != newMask) {
1:a8b6921: 				permissions.put(name, new ServicePermission(name, oldMask
1:a8b6921: 						| newMask));
1:a8b6921: 			}
1:a8b6921: 		}
1:a8b6921: 		else {
1:a8b6921: 			permissions.put(name, permission);
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		if (!all_allowed) {
1:a8b6921: 			if (name.equals("*"))
1:a8b6921: 				all_allowed = true;
1:a8b6921: 		}
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Determines if a set of permissions implies the permissions expressed in
1:a8b6921: 	 * <code>permission</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param permission The Permission object to compare.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return <code>true</code> if <code>permission</code> is a proper
1:a8b6921: 	 *         subset of a permission in the set; <code>false</code>
1:a8b6921: 	 *         otherwise.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public boolean implies(Permission permission) {
1:a8b6921: 		if (!(permission instanceof ServicePermission))
1:a8b6921: 			return (false);
1:a8b6921: 
1:a8b6921: 		ServicePermission sp = (ServicePermission) permission;
1:a8b6921: 		ServicePermission x;
1:a8b6921: 
1:a8b6921: 		int desired = sp.getMask();
1:a8b6921: 		int effective = 0;
1:a8b6921: 
1:a8b6921: 		// short circuit if the "*" Permission was added
1:a8b6921: 		if (all_allowed) {
1:a8b6921: 			x = (ServicePermission) permissions.get("*");
1:a8b6921: 			if (x != null) {
1:a8b6921: 				effective |= x.getMask();
1:a8b6921: 				if ((effective & desired) == desired)
1:a8b6921: 					return (true);
1:a8b6921: 			}
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		// strategy:
1:a8b6921: 		// Check for full match first. Then work our way up the
1:a8b6921: 		// name looking for matches on a.b.*
1:a8b6921: 
1:a8b6921: 		String name = sp.getName();
1:a8b6921: 
1:a8b6921: 		x = (ServicePermission) permissions.get(name);
1:a8b6921: 
1:a8b6921: 		if (x != null) {
1:a8b6921: 			// we have a direct hit!
1:a8b6921: 			effective |= x.getMask();
1:a8b6921: 			if ((effective & desired) == desired)
1:a8b6921: 				return (true);
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		// work our way up the tree...
1:a8b6921: 		int last, offset;
1:a8b6921: 
1:a8b6921: 		offset = name.length() - 1;
1:a8b6921: 
1:a8b6921: 		while ((last = name.lastIndexOf(".", offset)) != -1) {
1:a8b6921: 
1:a8b6921: 			name = name.substring(0, last + 1) + "*";
1:a8b6921: 			x = (ServicePermission) permissions.get(name);
1:a8b6921: 
1:a8b6921: 			if (x != null) {
1:a8b6921: 				effective |= x.getMask();
1:a8b6921: 				if ((effective & desired) == desired)
1:a8b6921: 					return (true);
1:a8b6921: 			}
1:a8b6921: 			offset = last - 1;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		// we don't have to check for "*" as it was already checked
1:a8b6921: 		// at the top (all_allowed), so we just return false
1:a8b6921: 		return (false);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns an enumeration of all the <code>ServicePermission</code>
1:a8b6921: 	 * objects in the container.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return Enumeration of all the ServicePermission objects.
1:a8b6921: 	 */
1:a8b6921: 
1:7051698: 	public Enumeration<Permission> elements() {
1:a8b6921: 		return (permissions.elements());
1:a8b6921: 	}
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7051698
/////////////////////////////////////////////////////////////////////////
1: 	private Hashtable<String,Permission>	permissions;
/////////////////////////////////////////////////////////////////////////
1: 		permissions = new Hashtable<String,Permission>();
/////////////////////////////////////////////////////////////////////////
1: 	public Enumeration<Permission> elements() {
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServicePermission.java,v 1.15 2007/02/20 00:06:02 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: import java.io.IOException;
1: import java.security.*;
1: import java.util.Enumeration;
1: import java.util.Hashtable;
1: 
1: /**
1:  * A bundle's authority to register or get a service.
1:  * <ul>
1:  * <li>The <code>ServicePermission.REGISTER</code> action allows a bundle to
1:  * register a service on the specified names.
1:  * <li>The <code>ServicePermission.GET</code> action allows a bundle to
1:  * detect a service and get it.
1:  * </ul>
1:  * Permission to get a service is required in order to detect events regarding
1:  * the service. Untrusted bundles should not be able to detect the presence of
1:  * certain services unless they have the appropriate
1:  * <code>ServicePermission</code> to get the specific service.
1:  * 
1:  * @version $Revision: 1.15 $
1:  */
1: 
1: final public class ServicePermission extends BasicPermission {
1: 	static final long			serialVersionUID	= -7662148639076511574L;
1: 	/**
1: 	 * The action string <code>get</code> (Value is "get").
1: 	 */
1: 	public final static String	GET					= "get";
1: 	/**
1: 	 * The action string <code>register</code> (Value is "register").
1: 	 */
1: 	public final static String	REGISTER			= "register";
1: 
1: 	private final static int	ACTION_GET			= 0x00000001;
1: 	private final static int	ACTION_REGISTER		= 0x00000002;
1: 	private final static int	ACTION_ALL			= ACTION_GET
1: 															| ACTION_REGISTER;
1: 	private final static int	ACTION_NONE			= 0;
1: 	/**
1: 	 * The actions mask.
1: 	 */
1: 	private transient int		action_mask			= ACTION_NONE;
1: 
1: 	/**
1: 	 * The actions in canonical form.
1: 	 * 
1: 	 * @serial
1: 	 */
1: 	private String				actions				= null;
1: 
1: 	/**
1: 	 * Create a new ServicePermission.
1: 	 * 
1: 	 * <p>
1: 	 * The name of the service is specified as a fully qualified class name.
1: 	 * 
1: 	 * <pre>
1: 	 * ClassName ::= &lt;class name&gt; | &lt;class name ending in &quot;.*&quot;&gt;
1: 	 * </pre>
1: 	 * 
1: 	 * Examples:
1: 	 * 
1: 	 * <pre>
1: 	 * org.osgi.service.http.HttpService
1: 	 * org.osgi.service.http.*
1: 	 * org.osgi.service.snmp.*
1: 	 * </pre>
1: 	 * 
1: 	 * <p>
1: 	 * There are two possible actions: <code>get</code> and
1: 	 * <code>register</code>. The <code>get</code> permission allows the
1: 	 * owner of this permission to obtain a service with this name. The
1: 	 * <code>register</code> permission allows the bundle to register a
1: 	 * service under that name.
1: 	 * 
1: 	 * @param name class name
1: 	 * @param actions <code>get</code>,<code>register</code> (canonical
1: 	 *        order)
1: 	 */
1: 
1: 	public ServicePermission(String name, String actions) {
1: 		this(name, getMask(actions));
1: 	}
1: 
1: 	/**
1: 	 * Package private constructor used by ServicePermissionCollection.
1: 	 * 
1: 	 * @param name class name
1: 	 * @param mask action mask
1: 	 */
1: 	ServicePermission(String name, int mask) {
1: 		super(name);
1: 
1: 		init(mask);
1: 	}
1: 
1: 	/**
1: 	 * Called by constructors and when deserialized.
1: 	 * 
1: 	 * @param mask action mask
1: 	 */
1: 	private void init(int mask) {
1: 		if ((mask == ACTION_NONE) || ((mask & ACTION_ALL) != mask)) {
1: 			throw new IllegalArgumentException("invalid action string");
1: 		}
1: 
1: 		action_mask = mask;
1: 	}
1: 
1: 	/**
1: 	 * Parse action string into action mask.
1: 	 * 
1: 	 * @param actions Action string.
1: 	 * @return action mask.
1: 	 */
1: 	private static int getMask(String actions) {
1: 		boolean seencomma = false;
1: 
1: 		int mask = ACTION_NONE;
1: 
1: 		if (actions == null) {
1: 			return mask;
1: 		}
1: 
1: 		char[] a = actions.toCharArray();
1: 
1: 		int i = a.length - 1;
1: 		if (i < 0)
1: 			return mask;
1: 
1: 		while (i != -1) {
1: 			char c;
1: 
1: 			// skip whitespace
1: 			while ((i != -1)
1: 					&& ((c = a[i]) == ' ' || c == '\r' || c == '\n'
1: 							|| c == '\f' || c == '\t'))
1: 				i--;
1: 
1: 			// check for the known strings
1: 			int matchlen;
1: 
1: 			if (i >= 2 && (a[i - 2] == 'g' || a[i - 2] == 'G')
1: 					&& (a[i - 1] == 'e' || a[i - 1] == 'E')
1: 					&& (a[i] == 't' || a[i] == 'T')) {
1: 				matchlen = 3;
1: 				mask |= ACTION_GET;
1: 
1: 			}
1: 			else
1: 				if (i >= 7 && (a[i - 7] == 'r' || a[i - 7] == 'R')
1: 						&& (a[i - 6] == 'e' || a[i - 6] == 'E')
1: 						&& (a[i - 5] == 'g' || a[i - 5] == 'G')
1: 						&& (a[i - 4] == 'i' || a[i - 4] == 'I')
1: 						&& (a[i - 3] == 's' || a[i - 3] == 'S')
1: 						&& (a[i - 2] == 't' || a[i - 2] == 'T')
1: 						&& (a[i - 1] == 'e' || a[i - 1] == 'E')
1: 						&& (a[i] == 'r' || a[i] == 'R')) {
1: 					matchlen = 8;
1: 					mask |= ACTION_REGISTER;
1: 
1: 				}
1: 				else {
1: 					// parse error
1: 					throw new IllegalArgumentException("invalid permission: "
1: 							+ actions);
1: 				}
1: 
1: 			// make sure we didn't just match the tail of a word
1: 			// like "ackbarfregister". Also, skip to the comma.
1: 			seencomma = false;
1: 			while (i >= matchlen && !seencomma) {
1: 				switch (a[i - matchlen]) {
1: 					case ',' :
1: 						seencomma = true;
1: 					/* FALLTHROUGH */
1: 					case ' ' :
1: 					case '\r' :
1: 					case '\n' :
1: 					case '\f' :
1: 					case '\t' :
1: 						break;
1: 					default :
1: 						throw new IllegalArgumentException(
1: 								"invalid permission: " + actions);
1: 				}
1: 				i--;
1: 			}
1: 
1: 			// point i at the location of the comma minus one (or -1).
1: 			i -= matchlen;
1: 		}
1: 
1: 		if (seencomma) {
1: 			throw new IllegalArgumentException("invalid permission: " + actions);
1: 		}
1: 
1: 		return mask;
1: 	}
1: 
1: 	/**
1: 	 * Determines if a <code>ServicePermission</code> object "implies" the
1: 	 * specified permission.
1: 	 * 
1: 	 * @param p The target permission to check.
1: 	 * @return <code>true</code> if the specified permission is implied by
1: 	 *         this object; <code>false</code> otherwise.
1: 	 */
1: 
1: 	public boolean implies(Permission p) {
1: 		if (p instanceof ServicePermission) {
1: 			ServicePermission target = (ServicePermission) p;
1: 
1: 			return (((action_mask & target.action_mask) == target.action_mask) && super
1: 					.implies(p));
1: 		}
1: 
1: 		return (false);
1: 	}
1: 
1: 	/**
1: 	 * Returns the canonical string representation of the actions. Always
1: 	 * returns present actions in the following order: <code>get</code>,
1: 	 * <code>register</code>.
1: 	 * 
1: 	 * @return The canonical string representation of the actions.
1: 	 */
1: 	public String getActions() {
1: 		if (actions == null) {
1: 			StringBuffer sb = new StringBuffer();
1: 			boolean comma = false;
1: 
1: 			if ((action_mask & ACTION_GET) == ACTION_GET) {
1: 				sb.append(GET);
1: 				comma = true;
1: 			}
1: 
1: 			if ((action_mask & ACTION_REGISTER) == ACTION_REGISTER) {
1: 				if (comma)
1: 					sb.append(',');
1: 				sb.append(REGISTER);
1: 			}
1: 
1: 			actions = sb.toString();
1: 		}
1: 
1: 		return (actions);
1: 	}
1: 
1: 	/**
1: 	 * Returns a new <code>PermissionCollection</code> object for storing
1: 	 * <code>ServicePermission<code> objects.
1: 	 *
1: 	 * @return A new <code>PermissionCollection</code> object suitable for storing
1: 	 * <code>ServicePermission</code> objects.
1: 	 */
1: 	public PermissionCollection newPermissionCollection() {
1: 		return (new ServicePermissionCollection());
1: 	}
1: 
1: 	/**
1: 	 * Determines the equalty of two ServicePermission objects.
1: 	 * 
1: 	 * Checks that specified object has the same class name and action as this
1: 	 * <code>ServicePermission</code>.
1: 	 * 
1: 	 * @param obj The object to test for equality.
1: 	 * @return true if obj is a <code>ServicePermission</code>, and has the
1: 	 *         same class name and actions as this
1: 	 *         <code>ServicePermission</code> object; <code>false</code>
1: 	 *         otherwise.
1: 	 */
1: 	public boolean equals(Object obj) {
1: 		if (obj == this) {
1: 			return (true);
1: 		}
1: 
1: 		if (!(obj instanceof ServicePermission)) {
1: 			return (false);
1: 		}
1: 
1: 		ServicePermission p = (ServicePermission) obj;
1: 
1: 		return ((action_mask == p.action_mask) && getName().equals(p.getName()));
1: 	}
1: 
1: 	/**
1: 	 * Returns the hash code value for this object.
1: 	 * 
1: 	 * @return Hash code value for this object.
1: 	 */
1: 
1: 	public int hashCode() {
1: 		return (getName().hashCode() ^ getActions().hashCode());
1: 	}
1: 
1: 	/**
1: 	 * Returns the current action mask. Used by the ServicePermissionCollection
1: 	 * object.
1: 	 * 
1: 	 * @return The actions mask.
1: 	 */
1: 	int getMask() {
1: 		return (action_mask);
1: 	}
1: 
1: 	/**
1: 	 * WriteObject is called to save the state of this permission to a stream.
1: 	 * The actions are serialized, and the superclass takes care of the name.
1: 	 */
1: 
1: 	private synchronized void writeObject(java.io.ObjectOutputStream s)
1: 			throws IOException {
1: 		// Write out the actions. The superclass takes care of the name
1: 		// call getActions to make sure actions field is initialized
1: 		if (actions == null)
1: 			getActions();
1: 		s.defaultWriteObject();
1: 	}
1: 
1: 	/**
1: 	 * readObject is called to restore the state of this permission from a
1: 	 * stream.
1: 	 */
1: 	private synchronized void readObject(java.io.ObjectInputStream s)
1: 			throws IOException, ClassNotFoundException {
1: 		// Read in the action, then initialize the rest
1: 		s.defaultReadObject();
1: 		init(getMask(actions));
1: 	}
1: }
1: 
1: /**
1:  * Stores a set of ServicePermission permissions.
1:  * 
1:  * @see java.security.Permission
1:  * @see java.security.Permissions
1:  * @see java.security.PermissionCollection
1:  */
1: 
1: final class ServicePermissionCollection extends PermissionCollection {
1: 	static final long	serialVersionUID	= 662615640374640621L;
1: 	/**
1: 	 * Table of permissions.
1: 	 * 
1: 	 * @serial
1: 	 */
0: 	private Hashtable	permissions;
1: 
1: 	/**
1: 	 * Boolean saying if "*" is in the collection.
1: 	 * 
1: 	 * @serial
1: 	 */
1: 	private boolean		all_allowed;
1: 
1: 	/**
1: 	 * Creates an empty ServicePermissions object.
1: 	 */
1: 
1: 	public ServicePermissionCollection() {
0: 		permissions = new Hashtable();
1: 		all_allowed = false;
1: 	}
1: 
1: 	/**
1: 	 * Adds a permission to the <code>ServicePermission</code> objects using
1: 	 * the key for the hash as the name.
1: 	 * 
1: 	 * @param permission The Permission object to add.
1: 	 * 
1: 	 * @throws IllegalArgumentException If the permission is not a
1: 	 *         ServicePermission object.
1: 	 * @throws SecurityException If this
1: 	 *         <code>ServicePermissionCollection</code> object has been marked
1: 	 *         read-only.
1: 	 */
1: 
1: 	public void add(Permission permission) {
1: 		if (!(permission instanceof ServicePermission))
1: 			throw new IllegalArgumentException("invalid permission: "
1: 					+ permission);
1: 		if (isReadOnly())
1: 			throw new SecurityException("attempt to add a Permission to a "
1: 					+ "readonly PermissionCollection");
1: 
1: 		ServicePermission sp = (ServicePermission) permission;
1: 		String name = sp.getName();
1: 
1: 		ServicePermission existing = (ServicePermission) permissions.get(name);
1: 
1: 		if (existing != null) {
1: 			int oldMask = existing.getMask();
1: 			int newMask = sp.getMask();
1: 			if (oldMask != newMask) {
1: 				permissions.put(name, new ServicePermission(name, oldMask
1: 						| newMask));
1: 			}
1: 		}
1: 		else {
1: 			permissions.put(name, permission);
1: 		}
1: 
1: 		if (!all_allowed) {
1: 			if (name.equals("*"))
1: 				all_allowed = true;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Determines if a set of permissions implies the permissions expressed in
1: 	 * <code>permission</code>.
1: 	 * 
1: 	 * @param permission The Permission object to compare.
1: 	 * 
1: 	 * @return <code>true</code> if <code>permission</code> is a proper
1: 	 *         subset of a permission in the set; <code>false</code>
1: 	 *         otherwise.
1: 	 */
1: 
1: 	public boolean implies(Permission permission) {
1: 		if (!(permission instanceof ServicePermission))
1: 			return (false);
1: 
1: 		ServicePermission sp = (ServicePermission) permission;
1: 		ServicePermission x;
1: 
1: 		int desired = sp.getMask();
1: 		int effective = 0;
1: 
1: 		// short circuit if the "*" Permission was added
1: 		if (all_allowed) {
1: 			x = (ServicePermission) permissions.get("*");
1: 			if (x != null) {
1: 				effective |= x.getMask();
1: 				if ((effective & desired) == desired)
1: 					return (true);
1: 			}
1: 		}
1: 
1: 		// strategy:
1: 		// Check for full match first. Then work our way up the
1: 		// name looking for matches on a.b.*
1: 
1: 		String name = sp.getName();
1: 
1: 		x = (ServicePermission) permissions.get(name);
1: 
1: 		if (x != null) {
1: 			// we have a direct hit!
1: 			effective |= x.getMask();
1: 			if ((effective & desired) == desired)
1: 				return (true);
1: 		}
1: 
1: 		// work our way up the tree...
1: 		int last, offset;
1: 
1: 		offset = name.length() - 1;
1: 
1: 		while ((last = name.lastIndexOf(".", offset)) != -1) {
1: 
1: 			name = name.substring(0, last + 1) + "*";
1: 			x = (ServicePermission) permissions.get(name);
1: 
1: 			if (x != null) {
1: 				effective |= x.getMask();
1: 				if ((effective & desired) == desired)
1: 					return (true);
1: 			}
1: 			offset = last - 1;
1: 		}
1: 
1: 		// we don't have to check for "*" as it was already checked
1: 		// at the top (all_allowed), so we just return false
1: 		return (false);
1: 	}
1: 
1: 	/**
1: 	 * Returns an enumeration of all the <code>ServicePermission</code>
1: 	 * objects in the container.
1: 	 * 
1: 	 * @return Enumeration of all the ServicePermission objects.
1: 	 */
1: 
0: 	public Enumeration elements() {
1: 		return (permissions.elements());
1: 	}
1: }
============================================================================