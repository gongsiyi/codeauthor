1:cef7d1e: /*
1:cef7d1e:  *
1:cef7d1e:  * Derby - Class org.apache.derbyTesting.junit.DriverManagerConnector
1:cef7d1e:  *
1:cef7d1e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cef7d1e:  * contributor license agreements.  See the NOTICE file distributed with
1:cef7d1e:  * this work for additional information regarding copyright ownership.
1:cef7d1e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cef7d1e:  * (the "License"); you may not use this file except in compliance with
1:cef7d1e:  * the License.  You may obtain a copy of the License at
1:cef7d1e:  *
1:cef7d1e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cef7d1e:  *
1:cef7d1e:  * Unless required by applicable law or agreed to in writing, 
1:cef7d1e:  * software distributed under the License is distributed on an 
1:cef7d1e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:cef7d1e:  * either express or implied. See the License for the specific 
1:cef7d1e:  * language governing permissions and limitations under the License.
1:cef7d1e:  */
1:cef7d1e: package org.apache.derbyTesting.junit;
1:616c0d0: 
1:cef7d1e: import java.sql.Connection;
1:cef7d1e: import java.sql.DriverManager;
1:cef7d1e: import java.sql.SQLException;
1:51e6268: import java.util.Enumeration;
1:0c9f73e: import java.util.Properties;
5:cef7d1e: 
1:cef7d1e: /**
1:cef7d1e:  * Connection factory using DriverManager.
1:cef7d1e:  *
1:cef7d1e:  */
1:cef7d1e: public class DriverManagerConnector implements Connector {
1:cef7d1e: 
1:cef7d1e:     private TestConfiguration config;
1:cef7d1e: 
1:cef7d1e:     public DriverManagerConnector() {
1:cef7d1e:     }
1:cef7d1e: 
1:cef7d1e:     public void setConfiguration(TestConfiguration config) {
1:cef7d1e:         this.config = config;
1:cef7d1e:     }
1:cef7d1e: 
1:cef7d1e:     public Connection openConnection() throws SQLException {
1:3df869c:         return openConnection(config.getDefaultDatabaseName(), config.getUserName(), config.getUserPassword());
1:3df869c:     }
1:3df869c: 
1:3df869c:     public Connection openConnection(String databaseName) throws SQLException {
1:3df869c:         return openConnection(databaseName, config.getUserName(), config.getUserPassword());
1:3df869c:     }
1:3df869c: 
1:3df869c:     public Connection openConnection(String user, String password) throws SQLException {
1:3df869c:         return openConnection(config.getDefaultDatabaseName(), user, password);
1:cef7d1e:     }
1:cef7d1e: 
1:cef7d1e:     /**
1:cef7d1e:      * Open a connection using the DriverManager.
1:cef7d1e:      * <BR>
1:cef7d1e:      * The JDBC driver is only loaded if DriverManager.getDriver()
1:cef7d1e:      * for the JDBC URL throws an exception indicating no driver is loaded.
1:cef7d1e:      * <BR>
1:cef7d1e:      * If the connection request fails with SQLState XJ004
1:cef7d1e:      * (database not found) then the connection is retried
1:cef7d1e:      * with attributes create=true.
1:cef7d1e:      */
1:3df869c:     public Connection openConnection(String databaseName, String user, String password)
1:47f286f:             throws SQLException
1:47f286f:     {
1:47f286f:         return openConnection( databaseName, user, password, (Properties)  null );
1:47f286f:     }
1:47f286f:     
1:47f286f:     /**
1:47f286f:      * Open a connection using the DriverManager.
1:47f286f:      * <BR>
1:47f286f:      * The JDBC driver is only loaded if DriverManager.getDriver()
1:47f286f:      * for the JDBC URL throws an exception indicating no driver is loaded.
1:47f286f:      * <BR>
1:47f286f:      * If the connection request fails with SQLState XJ004
1:47f286f:      * (database not found) then the connection is retried
1:47f286f:      * with attributes create=true.
1:47f286f:      */
1:47f286f:     public  Connection openConnection
1:47f286f:         (String databaseName, String user, String password, Properties connectionProperties)
1:47f286f:          throws SQLException
1:47f286f:     {
1:3df869c:         String url = config.getJDBCUrl(databaseName);
1:cef7d1e: 
1:cef7d1e:         try {
1:cef7d1e:             DriverManager.getDriver(url);
1:cef7d1e:         } catch (SQLException e) {
1:cef7d1e:             loadJDBCDriver();
1:cef7d1e:         }
1:cef7d1e: 
1:5c61b1d:         Properties connectionAttributes =
1:5c61b1d:                 new Properties(config.getConnectionAttributes());
1:601e027:         if ( user != null ) { connectionAttributes.setProperty("user", user); }
1:601e027:         if ( password  != null ) { connectionAttributes.setProperty("password", password); }
1:5c61b1d: 
1:47f286f:         if ( connectionProperties != null ) { connectionAttributes.putAll( connectionProperties ); }
1:47f286f: 
1:cef7d1e:         try {
1:5c61b1d:             return DriverManager.getConnection(url, connectionAttributes);
1:cef7d1e:         } catch (SQLException e) {
1:5107349: 
1:25c1e7b:             // Uncomment this for more information
1:25c1e7b:             // printFullException( e, 0 );
1:25c1e7b: 
1:cef7d1e:             // Expected state for database not found.
1:cef7d1e:             // For the client the generic 08004 is returned,
1:cef7d1e:             // will just retry on that.
1:cef7d1e:             String expectedState = 
1:cef7d1e:                 config.getJDBCClient().isEmbedded() ? "XJ004" : "08004";
1:cef7d1e: 
1:cef7d1e:             // If there is a database not found exception
1:cef7d1e:             // then retry the connection request with
1:cef7d1e:             // a create attribute.
1:cef7d1e:             if (!expectedState.equals(e.getSQLState()))
1:cef7d1e:                 throw e;
1:cef7d1e:             
1:5c61b1d:             Properties attributes = new Properties(connectionAttributes);
1:f900ff2:             attributes.setProperty("create", "true");
1:5107349: 
1:0c9f73e:             return DriverManager.getConnection(url, attributes);
1:cef7d1e:         }
1:cef7d1e:     }
1:eb47230: 
1:25c1e7b:     private static void printFullException( Throwable t, int indentLevel )
1:25c1e7b:     {
1:25c1e7b:         if ( t == null ) { return; }
1:25c1e7b: 
1:25c1e7b:         String              tab = "    ";
1:25c1e7b:         StringBuilder   buffer = new StringBuilder();
1:25c1e7b: 
1:25c1e7b:         for ( int i = 0; i < indentLevel; i++ ) { buffer.append( tab ); }
1:25c1e7b:         buffer.append( "Message:  " + t.getMessage() );
1:25c1e7b: 
1:25c1e7b:         SQLException    nextSQLException = null;
1:25c1e7b:         
1:25c1e7b:         if ( t instanceof SQLException )
1:25c1e7b:         {
1:25c1e7b:             SQLException    se = (SQLException) t;
1:25c1e7b: 
1:25c1e7b:             buffer.append( se.getClass().getName() + " : SQLState = " + se.getSQLState() );
1:25c1e7b: 
1:25c1e7b:             nextSQLException = se.getNextException();
1:25c1e7b:         }
1:25c1e7b: 
1:25c1e7b:         System.out.println( buffer.toString() );
1:25c1e7b: 
1:25c1e7b:         printFullException( nextSQLException, indentLevel + 1 );
1:25c1e7b:         printFullException( t.getCause(), indentLevel + 1 );
1:25c1e7b:     }
1:25c1e7b: 
1:cef7d1e:     /**
1:cef7d1e:      * Shutdown the database using the attributes shutdown=true
1:cef7d1e:      * with the user and password defined by the configuration.
1:cef7d1e:      */
1:cef7d1e:     public void shutDatabase() throws SQLException {
1:51e6268:         Properties p = new Properties();
1:51e6268:         p.setProperty("shutdown", "true");
1:51e6268:         getConnectionByAttributes(config.getJDBCUrl(), p);
1:eb47230:         config.waitForShutdownComplete(getDatabaseName());
1:cef7d1e:     }
1:cef7d1e: 
1:cef7d1e:     /**
1:cef7d1e:      * Shutdown the engine using the attributes shutdown=true
1:cef7d1e:      * and no database name with the user and password defined
1:cef7d1e:      * by the configuration.
1:0c9f73e:      * Always shutsdown using the embedded URL thus this
1:0c9f73e:      * method will not work in a remote testing environment.
1:51e6268:      * @param deregisterDriver
1:51e6268:      * @throws java.sql.SQLException
1:cef7d1e:      */
1:51e6268:     public void shutEngine(boolean deregisterDriver) throws SQLException {
1:51e6268:         Properties p = new Properties();
1:51e6268:         p.setProperty("shutdown", "true");
1:0c9f73e:         
1:51e6268:         if (!deregisterDriver) {
1:51e6268:             p.setProperty("deregister", "false");
1:51e6268:         }
1:51e6268: 
1:51e6268:         getConnectionByAttributes("jdbc:derby:", p);
1:0c9f73e:     }
1:0c9f73e:     
1:25c1e7b:     public void setLoginTimeout( int seconds ) throws SQLException
1:25c1e7b:     {
1:25c1e7b:         DriverManager.setLoginTimeout( seconds );
1:25c1e7b:     }
1:25c1e7b:     
1:25c1e7b:     public int getLoginTimeout() throws SQLException
1:25c1e7b:     {
1:25c1e7b:         return DriverManager.getLoginTimeout();
1:25c1e7b:     }
1:25c1e7b:     
1:0c9f73e:     /**
1:0c9f73e:      * Open a connection using JDBC attributes with a JDBC URL.
1:0c9f73e:      * The attributes user and password are set from the configuration
1:0c9f73e:      * and then the passed in attribute is set.
1:0c9f73e:      */
1:51e6268:     private Connection getConnectionByAttributes(
1:51e6268:             String url,
1:51e6268:             Properties p)
1:0c9f73e:         throws SQLException
1:0c9f73e:     {
1:f900ff2:         Properties attributes = new Properties();
1:5107349: 
1:0c9f73e:         attributes.setProperty("user", config.getUserName());
1:0c9f73e:         attributes.setProperty("password", config.getUserPassword());
1:51e6268: 
1:51e6268:         for (Enumeration e = p.keys(); e.hasMoreElements(); ) {
1:51e6268:             String key = (String)e.nextElement();
1:51e6268:             attributes.setProperty(key, p.getProperty(key));
1:51e6268:         }
1:616c0d0: 
1:616c0d0:         try {
1:616c0d0:             DriverManager.getDriver(url);
1:616c0d0:         } catch (SQLException e) {
1:616c0d0:             loadJDBCDriver();
1:616c0d0:         }
1:0c9f73e: 
1:f900ff2:         return DriverManager.getConnection(url, attributes);
1:cef7d1e:     }
1:0c9f73e:     
1:eb47230:     public String getDatabaseName(){
1:eb47230:         // always use the default database name
1:eb47230:         // if this connector is used with other databases, we
1:eb47230:         // might need another method that takes the databasename
1:eb47230:         String databaseName = config.getDefaultDatabaseName();
1:eb47230:         return databaseName;
1:eb47230:     }
1:cef7d1e: 
1:cef7d1e:     /**
1:cef7d1e:      * Load the JDBC driver defined by the JDBCClient for
1:cef7d1e:      * the configuration.
1:cef7d1e:      *
1:cef7d1e:      * @throws SQLException if loading the driver fails.
1:cef7d1e:      */
1:cef7d1e:     private void loadJDBCDriver() throws SQLException {
1:cef7d1e:         String driverClass = config.getJDBCClient().getJDBCDriverName();
1:cef7d1e:         try {
1:4469400:             Class<?> clazz = Class.forName(driverClass);
1:4469400:             clazz.getConstructor().newInstance();
1:cef7d1e:         } catch (ClassNotFoundException cnfe) {
1:cef7d1e:             throw new SQLException("Failed to load JDBC driver '" + driverClass
1:cef7d1e:                     + "': " + cnfe.getMessage());
1:cef7d1e:         } catch (IllegalAccessException iae) {
1:cef7d1e:             throw new SQLException("Failed to load JDBC driver '" + driverClass
1:cef7d1e:                     + "': " + iae.getMessage());
1:cef7d1e:         } catch (InstantiationException ie) {
1:cef7d1e:             throw new SQLException("Failed to load JDBC driver '" + driverClass
1:cef7d1e:                     + "': " + ie.getMessage());
1:4469400:         } catch (NoSuchMethodException ie) {
1:4469400:             throw new SQLException("Failed to load JDBC driver '" + driverClass
1:4469400:                     + "': " + ie.getMessage());
1:4469400:         } catch (java.lang.reflect.InvocationTargetException ie) {
1:4469400:             throw new SQLException("Failed to load JDBC driver '" + driverClass
1:4469400:                     + "': " + ie.getMessage());
1:cef7d1e:         }
1:cef7d1e:     }
1:cef7d1e: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:             Class<?> clazz = Class.forName(driverClass);
1:             clazz.getConstructor().newInstance();
/////////////////////////////////////////////////////////////////////////
1:         } catch (NoSuchMethodException ie) {
1:             throw new SQLException("Failed to load JDBC driver '" + driverClass
1:                     + "': " + ie.getMessage());
1:         } catch (java.lang.reflect.InvocationTargetException ie) {
1:             throw new SQLException("Failed to load JDBC driver '" + driverClass
1:                     + "': " + ie.getMessage());
commit:25c1e7b
/////////////////////////////////////////////////////////////////////////
1:             // Uncomment this for more information
1:             // printFullException( e, 0 );
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static void printFullException( Throwable t, int indentLevel )
1:     {
1:         if ( t == null ) { return; }
1: 
1:         String              tab = "    ";
1:         StringBuilder   buffer = new StringBuilder();
1: 
1:         for ( int i = 0; i < indentLevel; i++ ) { buffer.append( tab ); }
1:         buffer.append( "Message:  " + t.getMessage() );
1: 
1:         SQLException    nextSQLException = null;
1:         
1:         if ( t instanceof SQLException )
1:         {
1:             SQLException    se = (SQLException) t;
1: 
1:             buffer.append( se.getClass().getName() + " : SQLState = " + se.getSQLState() );
1: 
1:             nextSQLException = se.getNextException();
1:         }
1: 
1:         System.out.println( buffer.toString() );
1: 
1:         printFullException( nextSQLException, indentLevel + 1 );
1:         printFullException( t.getCause(), indentLevel + 1 );
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void setLoginTimeout( int seconds ) throws SQLException
1:     {
1:         DriverManager.setLoginTimeout( seconds );
1:     }
1:     
1:     public int getLoginTimeout() throws SQLException
1:     {
1:         return DriverManager.getLoginTimeout();
1:     }
1:     
commit:601e027
/////////////////////////////////////////////////////////////////////////
1:         if ( user != null ) { connectionAttributes.setProperty("user", user); }
1:         if ( password  != null ) { connectionAttributes.setProperty("password", password); }
commit:47f286f
/////////////////////////////////////////////////////////////////////////
1:             throws SQLException
1:     {
1:         return openConnection( databaseName, user, password, (Properties)  null );
1:     }
1:     
1:     /**
1:      * Open a connection using the DriverManager.
1:      * <BR>
1:      * The JDBC driver is only loaded if DriverManager.getDriver()
1:      * for the JDBC URL throws an exception indicating no driver is loaded.
1:      * <BR>
1:      * If the connection request fails with SQLState XJ004
1:      * (database not found) then the connection is retried
1:      * with attributes create=true.
1:      */
1:     public  Connection openConnection
1:         (String databaseName, String user, String password, Properties connectionProperties)
1:          throws SQLException
1:     {
/////////////////////////////////////////////////////////////////////////
1:         if ( connectionProperties != null ) { connectionAttributes.putAll( connectionProperties ); }
1: 
commit:5107349
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         getConnectionByAttributes("jdbc:derby:", "shutdown", "true");
/////////////////////////////////////////////////////////////////////////
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:51e6268
/////////////////////////////////////////////////////////////////////////
1: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
1:         Properties p = new Properties();
1:         p.setProperty("shutdown", "true");
1:         getConnectionByAttributes(config.getJDBCUrl(), p);
/////////////////////////////////////////////////////////////////////////
1:      * @param deregisterDriver
1:      * @throws java.sql.SQLException
1:     public void shutEngine(boolean deregisterDriver) throws SQLException {
1:         Properties p = new Properties();
1:         p.setProperty("shutdown", "true");
1:         if (!deregisterDriver) {
1:             p.setProperty("deregister", "false");
1:         }
1: 
1:         getConnectionByAttributes("jdbc:derby:", p);
/////////////////////////////////////////////////////////////////////////
1:     private Connection getConnectionByAttributes(
1:             String url,
1:             Properties p)
1: 
1:         for (Enumeration e = p.keys(); e.hasMoreElements(); ) {
1:             String key = (String)e.nextElement();
1:             attributes.setProperty(key, p.getProperty(key));
1:         }
commit:616c0d0
/////////////////////////////////////////////////////////////////////////
1: 
1:         try {
1:             DriverManager.getDriver(url);
1:         } catch (SQLException e) {
1:             loadJDBCDriver();
1:         }
1: 
commit:f900ff2
/////////////////////////////////////////////////////////////////////////
1:             Properties attributes = new Properties();
0:             attributes.setProperty("user", user);
0:             attributes.setProperty("password", password);
1:             attributes.setProperty("create", "true");
1:             return DriverManager.getConnection(url, attributes);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:eb47230
/////////////////////////////////////////////////////////////////////////
1:         config.waitForShutdownComplete(getDatabaseName());
/////////////////////////////////////////////////////////////////////////
1:     
1:     public String getDatabaseName(){
1:         // always use the default database name
1:         // if this connector is used with other databases, we
1:         // might need another method that takes the databasename
1:         String databaseName = config.getDefaultDatabaseName();
1:         return databaseName;
1:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5c61b1d
/////////////////////////////////////////////////////////////////////////
1:         Properties connectionAttributes =
1:                 new Properties(config.getConnectionAttributes());
0:         connectionAttributes.setProperty("user", user);
0:         connectionAttributes.setProperty("password", password);
1: 
1:             return DriverManager.getConnection(url, connectionAttributes);
/////////////////////////////////////////////////////////////////////////
1:             Properties attributes = new Properties(connectionAttributes);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3df869c
/////////////////////////////////////////////////////////////////////////
1:         return openConnection(config.getDefaultDatabaseName(), config.getUserName(), config.getUserPassword());
1:     }
1: 
1:     public Connection openConnection(String databaseName) throws SQLException {
1:         return openConnection(databaseName, config.getUserName(), config.getUserPassword());
1:     }
1: 
1:     public Connection openConnection(String user, String password) throws SQLException {
1:         return openConnection(config.getDefaultDatabaseName(), user, password);
/////////////////////////////////////////////////////////////////////////
1:     public Connection openConnection(String databaseName, String user, String password)
1:         String url = config.getJDBCUrl(databaseName);
commit:0c9f73e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
0:             return getConnectionByAttributes(url,
0:                     "create", "true");          
/////////////////////////////////////////////////////////////////////////
0:         getConnectionByAttributes(config.getJDBCUrl(),
0:                 "shutdown", "true");
1:      * Always shutsdown using the embedded URL thus this
1:      * method will not work in a remote testing environment.
1:         
0:         getConnectionByAttributes("jdbc:derby:", "shutdown", "true");        
1:     }
1:     
1:     /**
1:      * Open a connection using JDBC attributes with a JDBC URL.
1:      * The attributes user and password are set from the configuration
1:      * and then the passed in attribute is set.
1:      */
0:     private Connection getConnectionByAttributes(String url, String key, String value)
1:         throws SQLException
1:     {
0:         Properties attributes = new Properties();
1:         
1:         attributes.setProperty("user", config.getUserName());
1:         attributes.setProperty("password", config.getUserPassword());
0:         attributes.setProperty(key, value);
1:         
1:         return DriverManager.getConnection(url, attributes);
commit:cef7d1e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.junit.DriverManagerConnector
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: 
1: /**
1:  * Connection factory using DriverManager.
1:  *
1:  */
1: public class DriverManagerConnector implements Connector {
1: 
1:     private TestConfiguration config;
1: 
1:     public DriverManagerConnector() {
1:     }
1: 
1:     public void setConfiguration(TestConfiguration config) {
1:         this.config = config;
1:     }
1: 
1:     public Connection openConnection() throws SQLException {
0:         return openConnection(config.getUserName(), config.getUserPassword());
1:     }
1: 
1:     /**
1:      * Open a connection using the DriverManager.
1:      * <BR>
1:      * The JDBC driver is only loaded if DriverManager.getDriver()
1:      * for the JDBC URL throws an exception indicating no driver is loaded.
1:      * <BR>
1:      * If the connection request fails with SQLState XJ004
1:      * (database not found) then the connection is retried
1:      * with attributes create=true.
1:      */
0:     public Connection openConnection(String user, String password)
0:             throws SQLException {
1: 
0:         String url = config.getJDBCUrl();
1: 
1:         try {
1:             DriverManager.getDriver(url);
1:         } catch (SQLException e) {
1:             loadJDBCDriver();
1:         }
1: 
1:         try {
0:             return DriverManager.getConnection(url, user, password);
1:         } catch (SQLException e) {
1:             
1:             // Expected state for database not found.
1:             // For the client the generic 08004 is returned,
1:             // will just retry on that.
1:             String expectedState = 
1:                 config.getJDBCClient().isEmbedded() ? "XJ004" : "08004";
1: 
1:             // If there is a database not found exception
1:             // then retry the connection request with
1:             // a create attribute.
1:             if (!expectedState.equals(e.getSQLState()))
1:                 throw e;
1:             
0:             url = url.concat(";create=true");
0:             return DriverManager.getConnection(url, user, password);
1:         }
1:     }
1: 
1:     /**
1:      * Shutdown the database using the attributes shutdown=true
1:      * with the user and password defined by the configuration.
1:      */
1:     public void shutDatabase() throws SQLException {
0:         String url = config.getJDBCUrl();
0:         url = url.concat(";shutdown=true");
0:         DriverManager.getConnection(url,
0:                 config.getUserName(),
0:                 config.getUserPassword());
1:     }
1: 
1:     /**
1:      * Shutdown the engine using the attributes shutdown=true
1:      * and no database name with the user and password defined
1:      * by the configuration.
1:      */
0:     public void shutEngine() throws SQLException {
0:         String url = config.getJDBCClient().getUrlBase();
0:         url = url.concat(";shutdown=true");
0:         DriverManager.getConnection("jdbc:derby:;shutdown",
0:                 config.getUserName(),
0:                 config.getUserPassword());        
1:     }
1: 
1:     /**
1:      * Load the JDBC driver defined by the JDBCClient for
1:      * the configuration.
1:      *
1:      * @throws SQLException if loading the driver fails.
1:      */
1:     private void loadJDBCDriver() throws SQLException {
1:         String driverClass = config.getJDBCClient().getJDBCDriverName();
1:         try {
0:             Class.forName(driverClass).newInstance();
1:         } catch (ClassNotFoundException cnfe) {
1:             throw new SQLException("Failed to load JDBC driver '" + driverClass
1:                     + "': " + cnfe.getMessage());
1:         } catch (IllegalAccessException iae) {
1:             throw new SQLException("Failed to load JDBC driver '" + driverClass
1:                     + "': " + iae.getMessage());
1:         } catch (InstantiationException ie) {
1:             throw new SQLException("Failed to load JDBC driver '" + driverClass
1:                     + "': " + ie.getMessage());
1:         }
1:     }
1: }
============================================================================