1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_Serviceable
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1:2bc809f: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.context.Context;
1:2bc809f: import org.apache.derby.iapi.services.context.ContextManager;
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: import org.apache.derby.iapi.services.daemon.*;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 	This test implements serviceable for testing.  To facility testing, when
1:2bc809f: 	this object is being serviced, it will synchronize on itself and notity all
1:2bc809f: 	waiters.  Test driver may wait on this object and check timesServiced to
1:2bc809f: 	make sure the background daemon has run.
1:2bc809f: */
1:2bc809f: public class T_Serviceable implements Serviceable
1:2bc809f: {
1:2bc809f: 	// synchronized on this to look at the number 
1:2bc809f: 	// of times this object has been serviced
1:2bc809f: 	protected int timesServiced;
1:2bc809f: 
1:2bc809f: 	// constant for checking
1:2bc809f: 	protected final int timesRequeue;
1:2bc809f: 	protected final boolean onDemandOnly;
1:2bc809f: 	protected final boolean subscribed;
1:2bc809f: 
1:2bc809f: 	// use this to unsubscribe
1:2bc809f: 	protected int clientNumber;
1:2bc809f: 
1:2bc809f: 	// test enqueueing, t = number of times to requeue
1:2bc809f: 	public T_Serviceable(int t)
1:2bc809f: 	{
1:2bc809f: 		timesServiced = 0;
1:2bc809f: 		timesRequeue = t;
1:2bc809f: 		onDemandOnly = false;	// not looked at
1:2bc809f: 		subscribed = false;
1:2bc809f: 		clientNumber = -1;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	// test subscription 
1:2bc809f: 	public T_Serviceable(boolean onDemandOnly)
1:2bc809f: 	{
1:2bc809f: 		timesServiced = 0;
1:2bc809f: 		timesRequeue = 0;		// not looked at
1:2bc809f: 		this.onDemandOnly = onDemandOnly;
1:2bc809f: 		subscribed = true;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	protected void setClientNumber(int n)
1:2bc809f: 	{
1:2bc809f: 		clientNumber = n;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	protected int getClientNumber()
1:2bc809f: 	{
1:2bc809f: 		return clientNumber;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 *  Serviceable interface
1:2bc809f: 	 */
1:2bc809f: 	public synchronized int performWork(ContextManager context) 
1:2bc809f: 	{
1:2bc809f: 		context.toString();	// make sure context manager is not null;
1:2bc809f: 
1:2bc809f: 		timesServiced++;
1:2bc809f: 		notifyAll();			// notify anyone waiting for me to be serviced
1:2bc809f: 
1:2bc809f: 		if (!subscribed && timesRequeue > timesServiced)
1:2bc809f: 			return Serviceable.REQUEUE;
1:2bc809f: 		else
1:2bc809f: 			return Serviceable.DONE;
1:2bc809f: 	}
1:2bc809f: 	
1:2bc809f: 	public boolean serviceASAP()
1:2bc809f: 	{
1:2bc809f: 		return true;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	// @return true, if this work needs to be done on a user thread immediately
1:2bc809f: 	public boolean serviceImmediately()
1:2bc809f: 	{
1:2bc809f: 		return false;
1:2bc809f: 	}	
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 * test utilities
1:2bc809f: 	 */
1:2bc809f: 
1:2bc809f: 	protected synchronized void t_wait(int n)
1:2bc809f: 	{
1:2bc809f: 		try
1:2bc809f: 		{
1:2bc809f: 			while (timesServiced < n)
1:2bc809f: 				wait();
1:2bc809f: 		}
1:2bc809f: 		catch (InterruptedException ie) {}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	protected synchronized void t_check(int n) throws T_Fail
1:2bc809f: 	{
1:2bc809f: 		if (timesServiced != n)
1:2bc809f: 			throw T_Fail.testFailMsg("Expect to be serviced " + n + " times, instead serviced " + timesServiced);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_Serviceable
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
1: import org.apache.derbyTesting.unitTests.harness.T_Generic;
1: import org.apache.derbyTesting.unitTests.harness.T_Fail;
1: 
1: import org.apache.derby.iapi.services.context.Context;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.daemon.*;
1: 
1: /**
1: 	This test implements serviceable for testing.  To facility testing, when
1: 	this object is being serviced, it will synchronize on itself and notity all
1: 	waiters.  Test driver may wait on this object and check timesServiced to
1: 	make sure the background daemon has run.
1: */
1: public class T_Serviceable implements Serviceable
1: {
1: 	// synchronized on this to look at the number 
1: 	// of times this object has been serviced
1: 	protected int timesServiced;
1: 
1: 	// constant for checking
1: 	protected final int timesRequeue;
1: 	protected final boolean onDemandOnly;
1: 	protected final boolean subscribed;
1: 
1: 	// use this to unsubscribe
1: 	protected int clientNumber;
1: 
1: 	// test enqueueing, t = number of times to requeue
1: 	public T_Serviceable(int t)
1: 	{
1: 		timesServiced = 0;
1: 		timesRequeue = t;
1: 		onDemandOnly = false;	// not looked at
1: 		subscribed = false;
1: 		clientNumber = -1;
1: 	}
1: 
1: 	// test subscription 
1: 	public T_Serviceable(boolean onDemandOnly)
1: 	{
1: 		timesServiced = 0;
1: 		timesRequeue = 0;		// not looked at
1: 		this.onDemandOnly = onDemandOnly;
1: 		subscribed = true;
1: 	}
1: 
1: 	protected void setClientNumber(int n)
1: 	{
1: 		clientNumber = n;
1: 	}
1: 
1: 	protected int getClientNumber()
1: 	{
1: 		return clientNumber;
1: 	}
1: 
1: 	/*
1: 	 *  Serviceable interface
1: 	 */
1: 	public synchronized int performWork(ContextManager context) 
1: 	{
1: 		context.toString();	// make sure context manager is not null;
1: 
1: 		timesServiced++;
1: 		notifyAll();			// notify anyone waiting for me to be serviced
1: 
1: 		if (!subscribed && timesRequeue > timesServiced)
1: 			return Serviceable.REQUEUE;
1: 		else
1: 			return Serviceable.DONE;
1: 	}
1: 	
1: 	public boolean serviceASAP()
1: 	{
1: 		return true;
1: 	}
1: 
1: 
1: 	// @return true, if this work needs to be done on a user thread immediately
1: 	public boolean serviceImmediately()
1: 	{
1: 		return false;
1: 	}	
1: 
1: 
1: 	/*
1: 	 * test utilities
1: 	 */
1: 
1: 	protected synchronized void t_wait(int n)
1: 	{
1: 		try
1: 		{
1: 			while (timesServiced < n)
1: 				wait();
1: 		}
1: 		catch (InterruptedException ie) {}
1: 	}
1: 
1: 	protected synchronized void t_check(int n) throws T_Fail
1: 	{
1: 		if (timesServiced != n)
1: 			throw T_Fail.testFailMsg("Expect to be serviced " + n + " times, instead serviced " + timesServiced);
1: 	}
1: 
1: }
============================================================================