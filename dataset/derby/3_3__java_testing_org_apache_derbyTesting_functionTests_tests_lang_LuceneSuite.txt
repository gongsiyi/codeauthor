1:d847ced: /*
5:d847ced: 
1:d847ced:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneSuite
1:d3c56ba: 
1:d847ced:        Licensed to the Apache Software Foundation (ASF) under one
1:d847ced:        or more contributor license agreements.  See the NOTICE file
1:d847ced:        distributed with this work for additional information
1:d847ced:        regarding copyright ownership.  The ASF licenses this file
1:d847ced:        to you under the Apache License, Version 2.0 (the
1:d847ced:        "License"); you may not use this file except in compliance
1:d847ced:        with the License.  You may obtain a copy of the License at
1:d847ced: 
1:d847ced:          http://www.apache.org/licenses/LICENSE-2.0
1:d847ced: 
1:d847ced:        Unless required by applicable law or agreed to in writing,
1:d847ced:        software distributed under the License is distributed on an
1:d847ced:        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d847ced:        KIND, either express or implied.  See the License for the
1:d847ced:        specific language governing permissions and limitations
1:d847ced:        under the License
1:d847ced: */
1:d847ced: package org.apache.derbyTesting.functionTests.tests.lang;
1:d847ced: 
1:d3c56ba: import java.util.Properties;
1:1ae02c9: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:d3c56ba: import org.apache.derbyTesting.junit.JDBC;
1:d3c56ba: import org.apache.derbyTesting.junit.TestConfiguration;
1:d3c56ba: 
1:d847ced: /**
1:d847ced:  * Suite holding all of the tests for the Lucene plugin.
1:d847ced:  *
1:d847ced:  */
1:d847ced: public class LuceneSuite extends BaseTestCase
1:d847ced: {
1:d847ced: 
1:d847ced: 	/**
1:d847ced: 	 * Use suite method instead.
1:d847ced: 	 */
1:d847ced: 	private LuceneSuite(String name) { super(name); }
1:d847ced: 
1:d847ced: 	public static Test suite()
1:d847ced:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("LuceneSuite");
1:d3c56ba:         Properties  properties = TestConfiguration.getSystemProperties();
1:d847ced:         
1:d3c56ba:         //
1:d3c56ba:         // If we're told to omit the Lucene plugin tests, make sure
1:d3c56ba:         // that the Lucene jar files aren't on the classpath.
1:d3c56ba:         //
1:d3c56ba:         if ( getBooleanProperty( properties, TestConfiguration.KEY_OMIT_LUCENE ) )
1:d3c56ba:         {
1:d3c56ba:             assertFalse( "Lucene core jar file should not be on the classpath!", JDBC.HAVE_LUCENE_CORE );
1:d3c56ba:             assertFalse( "Lucene analyzer jar file should not be on the classpath!", JDBC.HAVE_LUCENE_ANALYZERS );
1:d3c56ba:             assertFalse( "Lucene query parser jar file should not be on the classpath!", JDBC.HAVE_LUCENE_QUERYPARSER );
1:d3c56ba:         }
1:d1c479d:         else if (JDBC.HAVE_LUCENE_CORE && suffersFromDerby6650())
1:d1c479d:         {
1:d1c479d:             alarm("Lucene tests are skipped on this platform because of "
1:d1c479d:                     + "DERBY-6650. Please upgrade to Lucene 4.8 or higher "
1:d1c479d:                     + "if you would like to run them.");
1:d1c479d:         }
1:d3c56ba:         else
1:d3c56ba:         {
1:d3c56ba:             suite.addTest(LuceneSupportTest.suite());
1:d3c56ba:             suite.addTest(LuceneSupportPermsTest.suite());
1:d3c56ba:             suite.addTest(LuceneCollationTest.suite());
1:2a8df97:             suite.addTest(LuceneCoarseAuthorizationTest.suite());
1:5cf7a46:             suite.addTest(LuceneInMemoryTest.suite());
1:502ed2e:             suite.addTest(LuceneBackupTest.suite());
1:a409436:             suite.addTest(LuceneJarLoadingTest.suite());
1:d3c56ba:         }
1:d3c56ba: 
1:d847ced:         return suite;
1:d847ced: 	}
1:d3c56ba: 
1:d3c56ba:     /** Return the boolean value of a system property */
1:d3c56ba:     private static  boolean getBooleanProperty( Properties properties, String key )
1:d3c56ba:     {
1:d3c56ba:         return Boolean.valueOf( properties.getProperty( key ) ).booleanValue();
1:d3c56ba:     }
1:d1c479d: 
1:d1c479d:     /**
1:d1c479d:      * With Lucene versions up to 4.7, the Lucene plugin doesn't work on
1:d1c479d:      * platforms without JMX (in particular: Java SE 8 Compact Profile 2).
1:d1c479d:      * See DERBY-6650.
1:d1c479d:      */
1:d1c479d:     private static boolean suffersFromDerby6650() {
1:d1c479d:         if (JDBC.vmSupportsJMX()) {
1:d1c479d:             // Only platforms that lack JMX support have this problem.
1:d1c479d:             return false;
1:d1c479d:         }
1:d1c479d: 
1:d1c479d:         Class versionClass = null;
1:d1c479d:         try {
1:d1c479d:             versionClass = Class.forName("org.apache.lucene.util.Version");
1:d1c479d:         } catch (ClassNotFoundException cnfe) {
1:d1c479d:             fail("Could not check Lucene version", cnfe);
1:d1c479d:         }
1:d1c479d: 
1:d1c479d:         // Check if the version is at least 4.8. Do that by looking for the
1:d1c479d:         // existence of the LUCENE_48 field in the Version class. In 4.9
1:d1c479d:         // that field was deprecated and one called LUCENE_4_8 was added.
1:d1c479d:         // If we cannot find the former, look for the latter before giving up.
1:d1c479d:         try {
1:d1c479d:             versionClass.getField("LUCENE_48");
1:d1c479d:         } catch (NoSuchFieldException nsfe1) {
1:d1c479d:             try {
1:d1c479d:                 versionClass.getField("LUCENE_4_8");
1:d1c479d:             } catch (NoSuchFieldException nsfe2) {
1:d1c479d:                 // Neither the LUCENE_48 field nor the LUCENE_4_8 field is
1:d1c479d:                 // present, so version is lower than 4.8. We suffer from
1:d1c479d:                 // DERBY-6650.
1:d1c479d:                 return true;
1:d1c479d:             }
1:d1c479d:         }
1:d1c479d: 
1:d1c479d:         // One of the fields indicating version 4.8 or higher was found,
1:d1c479d:         // so we don't suffer from DERBY-6650.
1:d1c479d:         return false;
1:d1c479d:     }
1:d847ced: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d1c479d
/////////////////////////////////////////////////////////////////////////
1:         else if (JDBC.HAVE_LUCENE_CORE && suffersFromDerby6650())
1:         {
1:             alarm("Lucene tests are skipped on this platform because of "
1:                     + "DERBY-6650. Please upgrade to Lucene 4.8 or higher "
1:                     + "if you would like to run them.");
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * With Lucene versions up to 4.7, the Lucene plugin doesn't work on
1:      * platforms without JMX (in particular: Java SE 8 Compact Profile 2).
1:      * See DERBY-6650.
1:      */
1:     private static boolean suffersFromDerby6650() {
1:         if (JDBC.vmSupportsJMX()) {
1:             // Only platforms that lack JMX support have this problem.
1:             return false;
1:         }
1: 
1:         Class versionClass = null;
1:         try {
1:             versionClass = Class.forName("org.apache.lucene.util.Version");
1:         } catch (ClassNotFoundException cnfe) {
1:             fail("Could not check Lucene version", cnfe);
1:         }
1: 
1:         // Check if the version is at least 4.8. Do that by looking for the
1:         // existence of the LUCENE_48 field in the Version class. In 4.9
1:         // that field was deprecated and one called LUCENE_4_8 was added.
1:         // If we cannot find the former, look for the latter before giving up.
1:         try {
1:             versionClass.getField("LUCENE_48");
1:         } catch (NoSuchFieldException nsfe1) {
1:             try {
1:                 versionClass.getField("LUCENE_4_8");
1:             } catch (NoSuchFieldException nsfe2) {
1:                 // Neither the LUCENE_48 field nor the LUCENE_4_8 field is
1:                 // present, so version is lower than 4.8. We suffer from
1:                 // DERBY-6650.
1:                 return true;
1:             }
1:         }
1: 
1:         // One of the fields indicating version 4.8 or higher was found,
1:         // so we don't suffer from DERBY-6650.
1:         return false;
1:     }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("LuceneSuite");
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a409436
/////////////////////////////////////////////////////////////////////////
1:             suite.addTest(LuceneJarLoadingTest.suite());
commit:502ed2e
/////////////////////////////////////////////////////////////////////////
1:             suite.addTest(LuceneBackupTest.suite());
commit:5cf7a46
/////////////////////////////////////////////////////////////////////////
1:             suite.addTest(LuceneInMemoryTest.suite());
commit:2a8df97
/////////////////////////////////////////////////////////////////////////
1:             suite.addTest(LuceneCoarseAuthorizationTest.suite());
commit:d3c56ba
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
1: 
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
/////////////////////////////////////////////////////////////////////////
1:         Properties  properties = TestConfiguration.getSystemProperties();
1:         //
1:         // If we're told to omit the Lucene plugin tests, make sure
1:         // that the Lucene jar files aren't on the classpath.
1:         //
1:         if ( getBooleanProperty( properties, TestConfiguration.KEY_OMIT_LUCENE ) )
1:         {
1:             assertFalse( "Lucene core jar file should not be on the classpath!", JDBC.HAVE_LUCENE_CORE );
1:             assertFalse( "Lucene analyzer jar file should not be on the classpath!", JDBC.HAVE_LUCENE_ANALYZERS );
1:             assertFalse( "Lucene query parser jar file should not be on the classpath!", JDBC.HAVE_LUCENE_QUERYPARSER );
1:         }
1:         else
1:         {
1:             suite.addTest(LuceneSupportTest.suite());
1:             suite.addTest(LuceneSupportPermsTest.suite());
1:             suite.addTest(LuceneCollationTest.suite());
1:         }
1: 
1:     /** Return the boolean value of a system property */
1:     private static  boolean getBooleanProperty( Properties properties, String key )
1:     {
1:         return Boolean.valueOf( properties.getProperty( key ) ).booleanValue();
1:     }
1:     
commit:d847ced
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.LuceneSuite
1: 
1:        Licensed to the Apache Software Foundation (ASF) under one
1:        or more contributor license agreements.  See the NOTICE file
1:        distributed with this work for additional information
1:        regarding copyright ownership.  The ASF licenses this file
1:        to you under the Apache License, Version 2.0 (the
1:        "License"); you may not use this file except in compliance
1:        with the License.  You may obtain a copy of the License at
1: 
1:          http://www.apache.org/licenses/LICENSE-2.0
1: 
1:        Unless required by applicable law or agreed to in writing,
1:        software distributed under the License is distributed on an
1:        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:        KIND, either express or implied.  See the License for the
1:        specific language governing permissions and limitations
1:        under the License
1: */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
0: import junit.framework.Test; 
0: import junit.framework.TestSuite;
1: 
1: /**
1:  * Suite holding all of the tests for the Lucene plugin.
1:  *
1:  */
1: public class LuceneSuite extends BaseTestCase
1: {
1: 
1: 	/**
1: 	 * Use suite method instead.
1: 	 */
1: 	private LuceneSuite(String name) { super(name); }
1: 
1: 	public static Test suite()
1:     {
0: 		TestSuite suite = new TestSuite("LuceneSuite");
1:         
0:         suite.addTest(LuceneSupportTest.suite());
0:         suite.addTest(LuceneSupportPermsTest.suite());
0:         suite.addTest(LuceneCollationTest.suite());
1: 
1:         return suite;
1: 	}
1: }
============================================================================