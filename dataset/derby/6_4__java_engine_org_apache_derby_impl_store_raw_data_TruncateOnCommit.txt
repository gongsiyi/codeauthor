1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.TruncateOnCommit
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:a12152a: import org.apache.derby.iapi.services.monitor.DerbyObservable;
1:a12152a: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerLock;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.Lockable;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Truncate a temp table on a commit, abort or rollback to savepoint
1:eac0369: */
1:eac0369: 
1:eac0369: public class TruncateOnCommit extends ContainerHandleActionOnCommit {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Truncate on a commit as well.
1:eac0369: 	*/
1:eac0369: 	private boolean commitAsWell;
1:eac0369: 
1:eac0369: 	public TruncateOnCommit(ContainerKey identity, boolean commitAsWell) {
1:eac0369: 
1:eac0369: 		super(identity);
1:eac0369: 		this.commitAsWell = commitAsWell;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			if (identity.getSegmentId() != ContainerHandle.TEMPORARY_SEGMENT)
1:eac0369: 				SanityManager.THROWASSERT("segment id is not temp segment " + identity.getSegmentId());
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:a12152a: 	public void update(DerbyObservable obj, Object arg) {
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			if (arg == null)
1:eac0369: 				SanityManager.THROWASSERT("still on observer list " + this);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (arg.equals(RawTransaction.ABORT) ||
1:eac0369: 			arg.equals(RawTransaction.SAVEPOINT_ROLLBACK) ||
1:eac0369: 			(commitAsWell && arg.equals(RawTransaction.COMMIT))) {
1:eac0369: 			openContainerAndDoIt((RawTransaction) obj);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// remove this object if we are commiting, aborting or the container is being dropped
1:eac0369: 		if (arg.equals(RawTransaction.COMMIT) || arg.equals(RawTransaction.ABORT)
1:eac0369: 			|| arg.equals(identity)) {
1:eac0369: 			obj.deleteObserver(this);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	protected void doIt(BaseContainerHandle handle)
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369: 		handle.container.truncate(handle);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean equals(Object other) {
1:eac0369: 
1:eac0369: 		if (other instanceof TruncateOnCommit) {
1:eac0369: 
1:eac0369: 			if (((TruncateOnCommit) other).commitAsWell
1:eac0369: 				!= commitAsWell)
1:eac0369: 				return false;
1:eac0369: 
1:eac0369: 			return super.equals(other);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return false;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a12152a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.monitor.DerbyObservable;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public void update(DerbyObservable obj, Object arg) {
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.TruncateOnCommit
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.ContainerLock;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: 
1: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.iapi.services.locks.Lockable;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import java.util.Observable;
1: 
1: /**
1: 	Truncate a temp table on a commit, abort or rollback to savepoint
1: */
1: 
1: public class TruncateOnCommit extends ContainerHandleActionOnCommit {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/**
1: 		Truncate on a commit as well.
1: 	*/
1: 	private boolean commitAsWell;
1: 
1: 	public TruncateOnCommit(ContainerKey identity, boolean commitAsWell) {
1: 
1: 		super(identity);
1: 		this.commitAsWell = commitAsWell;
1: 
1: 		if (SanityManager.DEBUG) {
1: 			if (identity.getSegmentId() != ContainerHandle.TEMPORARY_SEGMENT)
1: 				SanityManager.THROWASSERT("segment id is not temp segment " + identity.getSegmentId());
1: 		}
1: 	}
1: 
0: 	public void update(Observable obj, Object arg) {
1: 		if (SanityManager.DEBUG) {
1: 			if (arg == null)
1: 				SanityManager.THROWASSERT("still on observer list " + this);
1: 		}
1: 
1: 		if (arg.equals(RawTransaction.ABORT) ||
1: 			arg.equals(RawTransaction.SAVEPOINT_ROLLBACK) ||
1: 			(commitAsWell && arg.equals(RawTransaction.COMMIT))) {
1: 			openContainerAndDoIt((RawTransaction) obj);
1: 		}
1: 
1: 		// remove this object if we are commiting, aborting or the container is being dropped
1: 		if (arg.equals(RawTransaction.COMMIT) || arg.equals(RawTransaction.ABORT)
1: 			|| arg.equals(identity)) {
1: 			obj.deleteObserver(this);
1: 		}
1: 	}
1: 
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	protected void doIt(BaseContainerHandle handle)
1: 		throws StandardException {
1: 
1: 		handle.container.truncate(handle);
1: 	}
1: 
1: 	public boolean equals(Object other) {
1: 
1: 		if (other instanceof TruncateOnCommit) {
1: 
1: 			if (((TruncateOnCommit) other).commitAsWell
1: 				!= commitAsWell)
1: 				return false;
1: 
1: 			return super.equals(other);
1: 		}
1: 		else
1: 			return false;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.ContainerLock;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: 
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: 
0: import org.apache.derby.iapi.services.locks.Lockable;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.util.Observable;
0: 
0: /**
0: 	Truncate a temp table on a commit, abort or rollback to savepoint
0: */
0: 
0: public class TruncateOnCommit extends ContainerHandleActionOnCommit {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/**
0: 		Truncate on a commit as well.
0: 	*/
0: 	private boolean commitAsWell;
0: 
0: 	public TruncateOnCommit(ContainerKey identity, boolean commitAsWell) {
0: 
0: 		super(identity);
0: 		this.commitAsWell = commitAsWell;
0: 
0: 		if (SanityManager.DEBUG) {
0: 			if (identity.getSegmentId() != ContainerHandle.TEMPORARY_SEGMENT)
0: 				SanityManager.THROWASSERT("segment id is not temp segment " + identity.getSegmentId());
0: 		}
0: 	}
0: 
0: 	public void update(Observable obj, Object arg) {
0: 		if (SanityManager.DEBUG) {
0: 			if (arg == null)
0: 				SanityManager.THROWASSERT("still on observer list " + this);
0: 		}
0: 
0: 		if (arg.equals(RawTransaction.ABORT) ||
0: 			arg.equals(RawTransaction.SAVEPOINT_ROLLBACK) ||
0: 			(commitAsWell && arg.equals(RawTransaction.COMMIT))) {
0: 			openContainerAndDoIt((RawTransaction) obj);
0: 		}
0: 
0: 		// remove this object if we are commiting, aborting or the container is being dropped
0: 		if (arg.equals(RawTransaction.COMMIT) || arg.equals(RawTransaction.ABORT)
0: 			|| arg.equals(identity)) {
0: 			obj.deleteObserver(this);
0: 		}
0: 	}
0: 
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	protected void doIt(BaseContainerHandle handle)
0: 		throws StandardException {
0: 
0: 		handle.container.truncate(handle);
0: 	}
0: 
0: 	public boolean equals(Object other) {
0: 
0: 		if (other instanceof TruncateOnCommit) {
0: 
0: 			if (((TruncateOnCommit) other).commitAsWell
0: 				!= commitAsWell)
0: 				return false;
0: 
0: 			return super.equals(other);
0: 		}
0: 		else
0: 			return false;
0: 	}
0: }
============================================================================