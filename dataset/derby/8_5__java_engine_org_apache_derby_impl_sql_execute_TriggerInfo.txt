4:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.TriggerInfo
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
19:eac0369: 
1:c69c8b0:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:801cf0d: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptorList;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: 
3:eac0369: /**
1:eac0369:  * This is a simple class used to store the run time information
1:eac0369:  * about a foreign key.  Used by DML to figure out what to
1:eac0369:  * check.
3:eac0369:  *
6:eac0369:  */
1:5b2f5de: public final class TriggerInfo implements Formatable 
11:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.  OR, since this is something that is used
1:eac0369: 	**	in stored prepared statements, it is ok to change it
1:eac0369: 	**	if you make sure that stored prepared statements are
1:eac0369: 	**	invalidated across releases.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:5b2f5de: 	TriggerDescriptor[] 	triggerArray; 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for Formattable
1:eac0369: 	 */
1:eac0369: 	public TriggerInfo() {}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for TriggerInfo
1:eac0369: 	 *
1:eac0369: 	 * @param triggers the list of trigger descriptors
1:eac0369: 	 * 	
1:eac0369: 	 */
1:eac0369: 	public TriggerInfo
1:c69c8b0: 	(
1:801cf0d:         TriggerDescriptorList   triggers
1:c69c8b0: 	)
1:c69c8b0: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(triggers != null, "null trigger descriptor list");
1:eac0369: 			SanityManager.ASSERT(triggers.size() > 0, "trigger descriptor list has no elements");
11:eac0369: 		}
1:c69c8b0: 
1:c69c8b0: 		/*
1:eac0369: 		** Copy the trigger descriptors into an array of the right type
1:eac0369: 		*/
1:801cf0d:         triggerArray = triggers.toArray(new TriggerDescriptor[triggers.size()]);
1:c69c8b0: 	}
1:eac0369: 
1:eac0369: 	/**
2:eac0369: 	 * Do we have a trigger or triggers that meet
2:eac0369: 	 * the criteria
1:eac0369: 	 *
2:eac0369: 	 * @param isBefore	true for a before trigger, false
2:eac0369: 	 *					for after trigger, null for either
2:eac0369: 	 * @param isRow		true for a row trigger, false
2:eac0369: 	 *					for statement trigger, null for either
1:eac0369: 	 *
2:eac0369: 	 * @return true if we have a trigger that meets the
2:eac0369: 	 * 		criteria
1:eac0369: 	 */
1:eac0369: 	boolean hasTrigger(boolean isBefore, boolean isRow)
1:eac0369: 	{
2:eac0369: 		if (triggerArray == null)
1:eac0369: 		{
2:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 		for (int i = 0; i < triggerArray.length; i++)
1:eac0369: 		{
1:c67f5dd:             if ((triggerArray[i].isBeforeTrigger() == isBefore) &&
1:c67f5dd:                 (triggerArray[i].isRowTrigger() == isRow))
1:eac0369: 			{
1:eac0369: 				return true;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	TriggerDescriptor[] getTriggerArray()
1:eac0369: 	{
1:eac0369: 		return triggerArray;
1:eac0369: 	}
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Write this object out
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here
1:eac0369: 	 *
1:eac0369:  	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		ArrayUtil.writeArray(out, triggerArray);
1:eac0369: 	}
1:c67f5dd: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in)
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		triggerArray = new TriggerDescriptor[ArrayUtil.readArrayLength(in)];
1:eac0369: 		ArrayUtil.readArrayItems(in, triggerArray);
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int getTypeFormatId()	{ return StoredFormatIds.TRIGGER_INFO_V01_ID; }
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// Misc
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////
1:801cf0d:     @Override
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:801cf0d:             StringBuilder str = new StringBuilder();
1:eac0369: 			str.append("\nTriggers:");
1:eac0369: 			for (int i = 0; i < triggerArray.length; i++)
1:eac0369: 			{
1:801cf0d:                 str.append('\n');
1:801cf0d:                 str.append(triggerArray[i]);
1:eac0369: 			}
1:eac0369: 			return str.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:211adc3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c67f5dd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         triggerArray = (TriggerDescriptor[])
0:                 triggers.toArray(new TriggerDescriptor[triggers.size()]);
/////////////////////////////////////////////////////////////////////////
1:             if ((triggerArray[i].isBeforeTrigger() == isBefore) &&
1:                 (triggerArray[i].isRowTrigger() == isRow))
/////////////////////////////////////////////////////////////////////////
1: 
0:         // Used to write an array of changed column numbers and an array
0:         // with the names of the columns, but they are not used anymore.
0:         // Write dummy values to preserve the format.
0:         ArrayUtil.writeIntArray(out, (int[]) null);
0:         ArrayUtil.writeArray(out, (String[]) null);
/////////////////////////////////////////////////////////////////////////
0:         // Discard fields that are no longer used.
0:         ArrayUtil.readIntArray(in);
0:         ArrayUtil.readStringArray(in);
/////////////////////////////////////////////////////////////////////////
commit:c69c8b0
/////////////////////////////////////////////////////////////////////////
1: 	/*
0: 	 * private constructor for TriggerInfo
1: 	 */
0: 	private TriggerInfo
1: 	(
0: 		TriggerDescriptor[]		triggers,
0: 		int[]					changedColsIds,
0: 		String[]				changedColsNames
1: 	) 
1: 	{
0: 		this.columnIds = changedColsIds;
0: 		this.columnNames = changedColsNames;
0: 		this.triggerArray = triggers;
1: 	}
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptorList;
/////////////////////////////////////////////////////////////////////////
1:         TriggerDescriptorList   triggers
/////////////////////////////////////////////////////////////////////////
1:         triggerArray = triggers.toArray(new TriggerDescriptor[triggers.size()]);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             StringBuilder str = new StringBuilder();
1:                 str.append('\n');
1:                 str.append(triggerArray[i]);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:c44e39a
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0:         Iterator descIter = triggers.iterator();
0:             triggerArray[i] = (TriggerDescriptor) descIter.next();
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:88bb146
/////////////////////////////////////////////////////////////////////////
commit:5b2f5de
/////////////////////////////////////////////////////////////////////////
1: public final class TriggerInfo implements Formatable 
/////////////////////////////////////////////////////////////////////////
1: 	TriggerDescriptor[] 	triggerArray; 
0: 	String[]				columnNames;
0: 	int[]				columnIds;
/////////////////////////////////////////////////////////////////////////
0: 	)
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.TriggerInfo
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.ArrayUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.catalog.UUID;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
0: import java.util.Enumeration;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * This is a simple class used to store the run time information
1:  * about a foreign key.  Used by DML to figure out what to
1:  * check.
1:  *
0:  * @author jamie
1:  */
0: public class TriggerInfo implements Formatable 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.  OR, since this is something that is used
1: 	**	in stored prepared statements, it is ok to change it
1: 	**	if you make sure that stored prepared statements are
1: 	**	invalidated across releases.
1: 	**
1: 	********************************************************/
1: 
0: 	public TriggerDescriptor[] 	triggerArray; 
0: 	public String[]				columnNames;
0: 	public int[]				columnIds;
1: 
1: 	/**
1: 	 * Niladic constructor for Formattable
1: 	 */
1: 	public TriggerInfo() {}
1: 
1: 	/**
1: 	 * Constructor for TriggerInfo
1: 	 *
0: 	 * @param td the table upon which the trigger is declared
0: 	 * @param changedCols the columns that are changed in the dml that is
0: 	 *		causing the trigger to fire
1: 	 * @param triggers the list of trigger descriptors
1: 	 * 	
0: 	 * @exception StandardException on error
1: 	 */
1: 	public TriggerInfo
0: 	(
0: 		TableDescriptor			td,
0: 		int[]					changedCols,
0: 		GenericDescriptorList	triggers
0: 	) throws StandardException
1: 	{
0: 		this.columnIds = changedCols;
1: 
0: 		if (columnIds != null)
1: 		{
1: 			/*
0: 			** Find the names of all the columns that are
0: 			** being changd.
1: 			*/
0: 			columnNames = new String[columnIds.length];
0: 			for (int i = 0; i < columnIds.length; i++)
1: 			{
0: 				columnNames[i] = td.getColumnDescriptor(columnIds[i]).getColumnName();
1: 			}
1: 		}
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(triggers != null, "null trigger descriptor list");
1: 			SanityManager.ASSERT(triggers.size() > 0, "trigger descriptor list has no elements");
1: 		}
1: 
1: 		/*
1: 		** Copy the trigger descriptors into an array of the right type
1: 		*/
0: 		Enumeration descs =  triggers.elements();
1: 		
0: 		int size = triggers.size();
0: 		triggerArray = new TriggerDescriptor[size];
1: 
0: 		for (int i = 0; i < size; i++)
1: 		{
0: 			triggerArray[i] = (TriggerDescriptor) descs.nextElement();
1: 		}
1: 	}
1: 
1: 	/*
0: 	 * private constructor for TriggerInfo
1: 	 */
0: 	private TriggerInfo
0: 	(
0: 		TriggerDescriptor[]		triggers,
0: 		int[]					changedColsIds,
0: 		String[]				changedColsNames
0: 	) 
1: 	{
0: 		this.columnIds = changedColsIds;
0: 		this.columnNames = changedColsNames;
0: 		this.triggerArray = triggers;
1: 	}
1: 
1: 	/**
1: 	 * Do we have a trigger or triggers that meet
1: 	 * the criteria
1: 	 *
1: 	 * @param isBefore	true for a before trigger, false
1: 	 *					for after trigger, null for either
1: 	 * @param isRow		true for a row trigger, false
1: 	 *					for statement trigger, null for either
1: 	 *
1: 	 * @return true if we have a trigger that meets the
1: 	 * 		criteria
1: 	 */
1: 	boolean hasTrigger(boolean isBefore, boolean isRow)
1: 	{
1: 		if (triggerArray == null)
1: 		{
1: 			return false;
1: 		}
1: 
0: 		return hasTrigger(new Boolean(isBefore), new Boolean(isRow));
1: 	}
1: 
1: 	/**
1: 	 * Do we have a trigger or triggers that meet
1: 	 * the criteria
1: 	 *
1: 	 * @param isBefore	true for a before trigger, false
1: 	 *					for after trigger, null for either
1: 	 * @param isRow		true for a row trigger, false
1: 	 *					for statement trigger, null for either
1: 	 *
1: 	 * @return true if we have a trigger that meets the
1: 	 * 		criteria
1: 	 */
0: 	private boolean hasTrigger(Boolean isBefore, Boolean isRow)
1: 	{
1: 		if (triggerArray == null)
1: 		{
1: 			return false;
1: 		}
1: 		for (int i = 0; i < triggerArray.length; i++)
1: 		{
0: 			if (((isBefore == null) || 
0: 					(triggerArray[i].isBeforeTrigger() == isBefore.booleanValue())) &&
0: 			    ((isRow == null) || 
0: 					(triggerArray[i].isRowTrigger() == isRow.booleanValue())))
1: 			{
1: 				return true;
1: 			}
1: 		}
1: 		return false;
1: 	}
1: 
1: 	TriggerDescriptor[] getTriggerArray()
1: 	{
1: 		return triggerArray;
1: 	}
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 	/**
1: 	 * Write this object out
1: 	 *
1: 	 * @param out write bytes here
1: 	 *
1:  	 * @exception IOException thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		ArrayUtil.writeArray(out, triggerArray);
0: 		ArrayUtil.writeIntArray(out, columnIds);
0: 		ArrayUtil.writeArray(out, columnNames);
1: 	}
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal(ObjectInput in)
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		triggerArray = new TriggerDescriptor[ArrayUtil.readArrayLength(in)];
1: 		ArrayUtil.readArrayItems(in, triggerArray);
1: 
0: 		columnIds = ArrayUtil.readIntArray(in);
1: 
0: 		int len = ArrayUtil.readArrayLength(in);
0: 		if (len > 0)
1: 		{
0: 			columnNames = new String[len];
0: 			ArrayUtil.readArrayItems(in, columnNames);
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int getTypeFormatId()	{ return StoredFormatIds.TRIGGER_INFO_V01_ID; }
1: 
1: 	//////////////////////////////////////////////////////////////
1: 	//
1: 	// Misc
1: 	//
1: 	//////////////////////////////////////////////////////////////
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			StringBuffer str = new StringBuffer();
0: 			str.append("\nColumn names modified:\t\t(");
0: 			for (int i = 0; i < columnNames.length; i++)
1: 			{
0: 				if (i > 0)
0: 					str.append(",");
1: 			
0: 				str.append(columnNames[i]);
1: 			}
0: 			str.append(")");
1: 
0: 			str.append("\nColumn ids modified:\t\t(");
0: 			for (int i = 0; i < columnIds.length; i++)
1: 			{
0: 				if (i > 0)
0: 					str.append(",");
1: 			
0: 				str.append(columnIds[i]);
1: 			}
0: 			str.append(")");
1: 
1: 			str.append("\nTriggers:");
1: 			for (int i = 0; i < triggerArray.length; i++)
1: 			{
0: 				str.append("\n"+triggerArray[i]);
1: 			}
1: 			return str.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import java.util.Enumeration;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * This is a simple class used to store the run time information
0:  * about a foreign key.  Used by DML to figure out what to
0:  * check.
0:  *
0:  * @author jamie
0:  */
0: public class TriggerInfo implements Formatable 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.  OR, since this is something that is used
0: 	**	in stored prepared statements, it is ok to change it
0: 	**	if you make sure that stored prepared statements are
0: 	**	invalidated across releases.
0: 	**
0: 	********************************************************/
0: 
0: 	public TriggerDescriptor[] 	triggerArray; 
0: 	public String[]				columnNames;
0: 	public int[]				columnIds;
0: 
0: 	/**
0: 	 * Niladic constructor for Formattable
0: 	 */
0: 	public TriggerInfo() {}
0: 
0: 	/**
0: 	 * Constructor for TriggerInfo
0: 	 *
0: 	 * @param td the table upon which the trigger is declared
0: 	 * @param changedCols the columns that are changed in the dml that is
0: 	 *		causing the trigger to fire
0: 	 * @param triggers the list of trigger descriptors
0: 	 * 	
0: 	 * @exception StandardException on error
0: 	 */
0: 	public TriggerInfo
0: 	(
0: 		TableDescriptor			td,
0: 		int[]					changedCols,
0: 		GenericDescriptorList	triggers
0: 	) throws StandardException
0: 	{
0: 		this.columnIds = changedCols;
0: 
0: 		if (columnIds != null)
0: 		{
0: 			/*
0: 			** Find the names of all the columns that are
0: 			** being changd.
0: 			*/
0: 			columnNames = new String[columnIds.length];
0: 			for (int i = 0; i < columnIds.length; i++)
0: 			{
0: 				columnNames[i] = td.getColumnDescriptor(columnIds[i]).getColumnName();
0: 			}
0: 		}
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(triggers != null, "null trigger descriptor list");
0: 			SanityManager.ASSERT(triggers.size() > 0, "trigger descriptor list has no elements");
0: 		}
0: 
0: 		/*
0: 		** Copy the trigger descriptors into an array of the right type
0: 		*/
0: 		Enumeration descs =  triggers.elements();
0: 		
0: 		int size = triggers.size();
0: 		triggerArray = new TriggerDescriptor[size];
0: 
0: 		for (int i = 0; i < size; i++)
0: 		{
0: 			triggerArray[i] = (TriggerDescriptor) descs.nextElement();
0: 		}
0: 	}
0: 
0: 	/*
0: 	 * private constructor for TriggerInfo
0: 	 */
0: 	private TriggerInfo
0: 	(
0: 		TriggerDescriptor[]		triggers,
0: 		int[]					changedColsIds,
0: 		String[]				changedColsNames
0: 	) 
0: 	{
0: 		this.columnIds = changedColsIds;
0: 		this.columnNames = changedColsNames;
0: 		this.triggerArray = triggers;
0: 	}
0: 
0: 	/**
0: 	 * Do we have a trigger or triggers that meet
0: 	 * the criteria
0: 	 *
0: 	 * @param isBefore	true for a before trigger, false
0: 	 *					for after trigger, null for either
0: 	 * @param isRow		true for a row trigger, false
0: 	 *					for statement trigger, null for either
0: 	 *
0: 	 * @return true if we have a trigger that meets the
0: 	 * 		criteria
0: 	 */
0: 	boolean hasTrigger(boolean isBefore, boolean isRow)
0: 	{
0: 		if (triggerArray == null)
0: 		{
0: 			return false;
0: 		}
0: 
0: 		return hasTrigger(new Boolean(isBefore), new Boolean(isRow));
0: 	}
0: 
0: 	/**
0: 	 * Do we have a trigger or triggers that meet
0: 	 * the criteria
0: 	 *
0: 	 * @param isBefore	true for a before trigger, false
0: 	 *					for after trigger, null for either
0: 	 * @param isRow		true for a row trigger, false
0: 	 *					for statement trigger, null for either
0: 	 *
0: 	 * @return true if we have a trigger that meets the
0: 	 * 		criteria
0: 	 */
0: 	private boolean hasTrigger(Boolean isBefore, Boolean isRow)
0: 	{
0: 		if (triggerArray == null)
0: 		{
0: 			return false;
0: 		}
0: 		for (int i = 0; i < triggerArray.length; i++)
0: 		{
0: 			if (((isBefore == null) || 
0: 					(triggerArray[i].isBeforeTrigger() == isBefore.booleanValue())) &&
0: 			    ((isRow == null) || 
0: 					(triggerArray[i].isRowTrigger() == isRow.booleanValue())))
0: 			{
0: 				return true;
0: 			}
0: 		}
0: 		return false;
0: 	}
0: 
0: 	TriggerDescriptor[] getTriggerArray()
0: 	{
0: 		return triggerArray;
0: 	}
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 	/**
0: 	 * Write this object out
0: 	 *
0: 	 * @param out write bytes here
0: 	 *
0:  	 * @exception IOException thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		ArrayUtil.writeArray(out, triggerArray);
0: 		ArrayUtil.writeIntArray(out, columnIds);
0: 		ArrayUtil.writeArray(out, columnNames);
0: 	}
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal(ObjectInput in)
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		triggerArray = new TriggerDescriptor[ArrayUtil.readArrayLength(in)];
0: 		ArrayUtil.readArrayItems(in, triggerArray);
0: 
0: 		columnIds = ArrayUtil.readIntArray(in);
0: 
0: 		int len = ArrayUtil.readArrayLength(in);
0: 		if (len > 0)
0: 		{
0: 			columnNames = new String[len];
0: 			ArrayUtil.readArrayItems(in, columnNames);
0: 		}
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int getTypeFormatId()	{ return StoredFormatIds.TRIGGER_INFO_V01_ID; }
0: 
0: 	//////////////////////////////////////////////////////////////
0: 	//
0: 	// Misc
0: 	//
0: 	//////////////////////////////////////////////////////////////
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			StringBuffer str = new StringBuffer();
0: 			str.append("\nColumn names modified:\t\t(");
0: 			for (int i = 0; i < columnNames.length; i++)
0: 			{
0: 				if (i > 0)
0: 					str.append(",");
0: 			
0: 				str.append(columnNames[i]);
0: 			}
0: 			str.append(")");
0: 
0: 			str.append("\nColumn ids modified:\t\t(");
0: 			for (int i = 0; i < columnIds.length; i++)
0: 			{
0: 				if (i > 0)
0: 					str.append(",");
0: 			
0: 				str.append(columnIds[i]);
0: 			}
0: 			str.append(")");
0: 
0: 			str.append("\nTriggers:");
0: 			for (int i = 0; i < triggerArray.length; i++)
0: 			{
0: 				str.append("\n"+triggerArray[i]);
0: 			}
0: 			return str.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: }
============================================================================