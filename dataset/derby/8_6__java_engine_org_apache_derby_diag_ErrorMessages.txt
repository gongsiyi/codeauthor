1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.diag.ErrorMessages
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.diag;
1:eac0369: 
1:eac0369: import java.sql.ResultSetMetaData;
1:eac0369: import java.sql.SQLException;
1:eac0369: import java.sql.Types;
1:eac0369: import java.util.Properties;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.InputStream;
2:eac0369: import java.util.Enumeration;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.error.ExceptionSeverity;
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:b1f84c1: import org.apache.derby.iapi.reference.Limits;
1:eac0369: import org.apache.derby.iapi.util.StringUtil;
1:eac0369: 
1:eac0369: import org.apache.derby.vti.VTITemplate;
2:eac0369: import org.apache.derby.vti.VTICosting;
2:eac0369: import org.apache.derby.vti.VTIEnvironment;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
1:eac0369: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1:eac0369: 
1:eac0369: 
2:eac0369: /** 
1:32f6abd:  * ErrorMessage shows all the SQLStates, locale-sensitive error
1:eac0369:  * messages, and exception severities for a database.
1:eac0369:  * 
1:32f6abd:  * <p>To use it, query it as follows:</p>
1:32f6abd:  * <PRE> SELECT* FROM NEW org.apache.derby.diag.ErrorMessages() AS EQ; </PRE>
1:32f6abd:  * <P>The following columns will be returned:
1:eac0369:  * <UL><LI>SQL_STATE--VARCHAR(5) - nullable.  The SQLState of the SQLException.<br>
1:eac0369:  * (The code returned by getSQLState() in SQLException.)</LI>
1:eac0369:  * <LI>MESSAGE--VARCHAR(32672) - nullable.  The error message<br>
1:eac0369:  * (The code returned by getMessage() in SQLException.)</LI>
1:2c21843:  * <LI>SEVERITY--INTEGER - nullable.  The Derby code for the severity.<br>
1:eac0369:  * (The code returned by getErrorCode() in SQLException.)</LI>
1:eac0369:  * </UL>
1:eac0369:  * 
1:eac0369:  */
1:0758fb6: public final class ErrorMessages extends VTITemplate implements VTICosting, java.security.PrivilegedAction<InputStream>  {
1:eac0369: 	
1:eac0369: 	/* The name of the file containing all the SQLSTate codes.
1:eac0369: 	 * The class gets the SQLState code from the messages
1:eac0369: 	 * file (messages_en.properties). Then it uses StandardException to get
1:eac0369: 	 * the exception severities and locale-sensitive error messages.
1:eac0369: 	 */
1:eac0369: 	
1:eac0369: 
1:eac0369:         /**          */
1:eac0369: 	private Properties p;
1:eac0369:         /**          */
1:eac0369: 	private Enumeration keys;
1:eac0369:         /**          */
1:eac0369: 	private String k;
1:eac0369:         /**          */
1:eac0369: 	private String SQLState;
1:eac0369:         /**          */
1:eac0369: 	private String message;
1:eac0369:         /**          */
1:eac0369: 	private int severity;
1:eac0369: 	
1:eac0369: 
1:eac0369:         /**          */
1:eac0369: 	public ErrorMessages() throws IOException{
1:eac0369: 		
1:eac0369: 		loadProperties();
1:eac0369: 	}
1:eac0369: 
1:eac0369:         /**          * 
1:eac0369:          * @see java.sql.ResultSet#next
1:eac0369:          */
1:eac0369: 	public boolean next() {
1:eac0369: 		boolean retCode = true;
1:eac0369: 
1:eac0369: 		if (!keys.hasMoreElements()) {
1:eac0369: 			close();
1:eac0369: 			retCode = false;
1:eac0369: 			return retCode;
1:eac0369: 			
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		k = (String)keys.nextElement();
1:eac0369: 
1:eac0369: 		if (notAnException()) {
1:eac0369: 			retCode = next();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (retCode) {
1:eac0369: 		  SQLState =StandardException.getSQLStateFromIdentifier(k);
1:eac0369: 		  message = MessageService.getTextMessage(k);
1:b1f84c1: 		  message = StringUtil.truncate(message, Limits.DB2_VARCHAR_MAXWIDTH);
1:eac0369: 		}
1:eac0369: 		return retCode;
1:eac0369: 	}
1:eac0369:         /**          * 
1:eac0369:          * @see java.sql.ResultSet#close
1:eac0369:          */
1:eac0369: 	public void close() {
1:eac0369: 		p = null;
1:eac0369: 		k = null;
1:eac0369: 		keys = null;
1:eac0369: 	}
1:eac0369:         /**          * 
1:eac0369:          * @see java.sql.ResultSet#getMetaData
1:eac0369:          */
1:eac0369: 	public ResultSetMetaData getMetaData() {
1:eac0369: 		return metadata;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**      * 
1:eac0369:      * @exception SQLException column at index is not found
1:eac0369:      * @see java.sql.ResultSet#getString
1:eac0369:      */
1:eac0369:     public String getString(int columnIndex) throws SQLException {
1:eac0369: 		switch (columnIndex) {
1:eac0369: 		case 1: return SQLState;
1:eac0369: 		case 2: return message;
1:eac0369: 		default: return super.getString(columnIndex); // throw an exception
1:eac0369: 		}
1:eac0369: 	}
1:eac0369:     /**      * 
1:eac0369:      * @exception SQLException column at index is not found
1:eac0369:      * @see java.sql.ResultSet#getInt
1:eac0369:      */
1:eac0369:     public int getInt(int columnIndex) throws SQLException {
1:eac0369: 		switch (columnIndex) {
1:eac0369: 		case 3: return severity;
1:eac0369: 		default: return super.getInt(columnIndex); // throw an exception
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	
1:eac0369:         /**          */
1:eac0369: 	private void loadProperties() throws IOException
1:eac0369: 	{
1:eac0369: 		p = new Properties();
1:eac0369: 		for (int i = 0; i < 50; i++) {
1:eac0369: 			msgFile = i;
1:0758fb6: 			InputStream is = java.security.AccessController.doPrivileged(this);
1:eac0369: 			if (is == null)
1:eac0369: 				continue;
1:eac0369: 
1:eac0369: 			try {
1:eac0369: 				p.load(is);
1:eac0369: 			} finally {
1:eac0369: 				try {
1:eac0369: 					is.close();
1:eac0369: 				} catch (IOException ioe) {
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		keys = p.keys();
1:eac0369: 	}
1:eac0369: 
1:eac0369:         /**          */
1:eac0369: 	private boolean notAnException() {
1:eac0369: 
1:eac0369: 		if (k.length() < 5)
1:eac0369: 			return true;
1:eac0369:         int tempSeverity = StandardException.getSeverityFromIdentifier(k);
1:eac0369: 		//if the severity is not one of our customer-visible severity
1:eac0369: 		//levels, it's just a message, not an SQLException
1:eac0369:         if (tempSeverity < (ExceptionSeverity.NO_APPLICABLE_SEVERITY + 1))
1:eac0369: 	  return true;
1:eac0369: 	severity = tempSeverity;	
1:eac0369: 	return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 		
1:eac0369: 	/*VTICosting methods*/
1:eac0369: 		
1:eac0369: 
1:eac0369:         /**          */
1:eac0369: 	public double getEstimatedRowCount(VTIEnvironment vtiEnvironment)
1:eac0369: 	{
1:eac0369: 		return 1000;
1:eac0369: 	}
1:eac0369: 
1:eac0369:         /**          */
1:eac0369: 	public double getEstimatedCostPerInstantiation(VTIEnvironment vtiEnvironment)
1:eac0369: 	{
1:eac0369: 		return 5000;
1:eac0369: 	}
1:eac0369: 
1:eac0369:         /**          */
1:eac0369: 	public boolean supportsMultipleInstantiations(VTIEnvironment vtiEnvironment)
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private int msgFile;
1:eac0369: 	
1:0758fb6: 	public final InputStream run() {
1:eac0369: 		InputStream msg = getClass().getResourceAsStream("/org/apache/derby/loc/m" + msgFile + "_en.properties");
1:eac0369: 		msgFile = 0;
1:eac0369: 		return msg;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Metadata
1:eac0369: 	*/
1:eac0369: 	private static final ResultColumnDescriptor[] columnInfo = {
1:eac0369: 
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("SQL_STATE",  Types.VARCHAR, true, 5),
1:b1f84c1: 		EmbedResultSetMetaData.getResultColumnDescriptor("MESSAGE",    Types.VARCHAR, true, Limits.DB2_VARCHAR_MAXWIDTH),
1:eac0369: 		EmbedResultSetMetaData.getResultColumnDescriptor("SEVERITY",   Types.INTEGER, true),
1:eac0369: 	};
1:8514aa2: 
1:8514aa2:     private static final ResultSetMetaData metadata =
1:8514aa2:         new EmbedResultSetMetaData(columnInfo);
1:eac0369: 
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8514aa2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static final ResultSetMetaData metadata =
1:         new EmbedResultSetMetaData(columnInfo);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5570eb0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData40;
/////////////////////////////////////////////////////////////////////////
0: 	private static final ResultSetMetaData metadata = new EmbedResultSetMetaData40(columnInfo);
commit:0758fb6
/////////////////////////////////////////////////////////////////////////
1: public final class ErrorMessages extends VTITemplate implements VTICosting, java.security.PrivilegedAction<InputStream>  {
/////////////////////////////////////////////////////////////////////////
1: 			InputStream is = java.security.AccessController.doPrivileged(this);
/////////////////////////////////////////////////////////////////////////
1: 	public final InputStream run() {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2c21843
/////////////////////////////////////////////////////////////////////////
1:  * <LI>SEVERITY--INTEGER - nullable.  The Derby code for the severity.<br>
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7a92d1f
/////////////////////////////////////////////////////////////////////////
0: public final class ErrorMessages extends VTITemplate implements VTICosting, java.security.PrivilegedAction  {
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.diag.ErrorMessages
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.diag
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.diag;
1: 
0: import java.util.Hashtable;
1: import java.util.Enumeration;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Types;
1: import java.util.Properties;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Enumeration;
1: import org.apache.derby.vti.VTICosting;
1: import org.apache.derby.vti.VTIEnvironment;
0: import java.lang.Math;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.error.ExceptionSeverity;
1: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.DB2Limit;
1: import org.apache.derby.iapi.util.StringUtil;
1: 
1: import org.apache.derby.vti.VTITemplate;
1: import org.apache.derby.vti.VTICosting;
1: import org.apache.derby.vti.VTIEnvironment;
1: 
1: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
1: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: 
1: 
1: /** 
0:  * ErrorMessage is a VTI that shows all the SQLStates, locale-sensitive error
1:  * messages, and exception severities for a database.
1:  * 
0:  * <p>To use it, query it as an external virtual table:</p>
0:  * <PRE> SELECT* FROM NEW ErrorMessages() AS EQ; </PRE>
0:  * <P>The ErrorMessages VTI has the following columns:
1:  * <UL><LI>SQL_STATE--VARCHAR(5) - nullable.  The SQLState of the SQLException.<br>
1:  * (The code returned by getSQLState() in SQLException.)</LI>
1:  * <LI>MESSAGE--VARCHAR(32672) - nullable.  The error message<br>
1:  * (The code returned by getMessage() in SQLException.)</LI>
0:  * <LI>SEVERITY--INTEGER - nullable.  The Cloudscape code for the severity.<br>
1:  * (The code returned by getErrorCode() in SQLException.)</LI>
1:  * </UL>
1:  * 
1:  */
0: public class ErrorMessages extends VTITemplate implements VTICosting, java.security.PrivilegedAction  {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 	
1: 	/* The name of the file containing all the SQLSTate codes.
1: 	 * The class gets the SQLState code from the messages
1: 	 * file (messages_en.properties). Then it uses StandardException to get
1: 	 * the exception severities and locale-sensitive error messages.
1: 	 */
1: 	
1: 
1:         /**          */
1: 	private Properties p;
1:         /**          */
1: 	private Enumeration keys;
1:         /**          */
1: 	private String k;
1:         /**          */
1: 	private String SQLState;
1:         /**          */
1: 	private String message;
1:         /**          */
1: 	private int severity;
1: 	
1: 
1:         /**          */
1: 	public ErrorMessages() throws IOException{
1: 		
1: 		loadProperties();
1: 	}
1: 
1:         /**          * 
1:          * @see java.sql.ResultSet#next
1:          */
1: 	public boolean next() {
1: 		boolean retCode = true;
1: 
1: 		if (!keys.hasMoreElements()) {
1: 			close();
1: 			retCode = false;
1: 			return retCode;
1: 			
1: 		}
1: 
1: 		k = (String)keys.nextElement();
1: 
1: 		if (notAnException()) {
1: 			retCode = next();
1: 		}
1: 
1: 		if (retCode) {
1: 		  SQLState =StandardException.getSQLStateFromIdentifier(k);
1: 		  message = MessageService.getTextMessage(k);
0: 		  message = StringUtil.truncate(message, DB2Limit.DB2_VARCHAR_MAXWIDTH);
1: 		}
1: 		return retCode;
1: 	}
1:         /**          * 
1:          * @see java.sql.ResultSet#close
1:          */
1: 	public void close() {
1: 		p = null;
1: 		k = null;
1: 		keys = null;
1: 	}
1:         /**          * 
1:          * @see java.sql.ResultSet#getMetaData
1:          */
1: 	public ResultSetMetaData getMetaData() {
1: 		return metadata;
1: 	}
1: 
1:     /**      * 
1:      * @exception SQLException column at index is not found
1:      * @see java.sql.ResultSet#getString
1:      */
1:     public String getString(int columnIndex) throws SQLException {
1: 		switch (columnIndex) {
1: 		case 1: return SQLState;
1: 		case 2: return message;
1: 		default: return super.getString(columnIndex); // throw an exception
1: 		}
1: 	}
1:     /**      * 
1:      * @exception SQLException column at index is not found
1:      * @see java.sql.ResultSet#getInt
1:      */
1:     public int getInt(int columnIndex) throws SQLException {
1: 		switch (columnIndex) {
1: 		case 3: return severity;
1: 		default: return super.getInt(columnIndex); // throw an exception
1: 		}
1: 	}
1: 	
1: 	
1:         /**          */
1: 	private void loadProperties() throws IOException
1: 	{
1: 		p = new Properties();
1: 		for (int i = 0; i < 50; i++) {
1: 			msgFile = i;
0: 			InputStream is = (InputStream) java.security.AccessController.doPrivileged(this);
1: 			if (is == null)
1: 				continue;
1: 
1: 			try {
1: 				p.load(is);
1: 			} finally {
1: 				try {
1: 					is.close();
1: 				} catch (IOException ioe) {
1: 				}
1: 			}
1: 		}
1: 		keys = p.keys();
1: 	}
1: 
1:         /**          */
1: 	private boolean notAnException() {
1: 
1: 		if (k.length() < 5)
1: 			return true;
1:         int tempSeverity = StandardException.getSeverityFromIdentifier(k);
1: 		//if the severity is not one of our customer-visible severity
1: 		//levels, it's just a message, not an SQLException
1:         if (tempSeverity < (ExceptionSeverity.NO_APPLICABLE_SEVERITY + 1))
1: 	  return true;
1: 	severity = tempSeverity;	
1: 	return false;
1: 	}
1: 
1: 		
1: 	/*VTICosting methods*/
1: 		
1: 
1:         /**          */
1: 	public double getEstimatedRowCount(VTIEnvironment vtiEnvironment)
1: 	{
1: 		return 1000;
1: 	}
1: 
1:         /**          */
1: 	public double getEstimatedCostPerInstantiation(VTIEnvironment vtiEnvironment)
1: 	{
1: 		return 5000;
1: 	}
1: 
1:         /**          */
1: 	public boolean supportsMultipleInstantiations(VTIEnvironment vtiEnvironment)
1: 	{
1: 		return true;
1: 	}
1: 
1: 	private int msgFile;
1: 	
0: 	public final Object run() {
1: 		InputStream msg = getClass().getResourceAsStream("/org/apache/derby/loc/m" + msgFile + "_en.properties");
1: 		msgFile = 0;
1: 		return msg;
1: 
1: 	}
1: 
1: 	/*
1: 	** Metadata
1: 	*/
1: 	private static final ResultColumnDescriptor[] columnInfo = {
1: 
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("SQL_STATE",  Types.VARCHAR, true, 5),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("MESSAGE",    Types.VARCHAR, true, DB2Limit.DB2_VARCHAR_MAXWIDTH),
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("SEVERITY",   Types.INTEGER, true),
1: 	};
1: 	
0: 	private static final ResultSetMetaData metadata = new EmbedResultSetMetaData(columnInfo);
1: 
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:32f6abd
/////////////////////////////////////////////////////////////////////////
1:  * ErrorMessage shows all the SQLStates, locale-sensitive error
1:  * <p>To use it, query it as follows:</p>
1:  * <PRE> SELECT* FROM NEW org.apache.derby.diag.ErrorMessages() AS EQ; </PRE>
1:  * <P>The following columns will be returned:
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b1f84c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.Limits;
/////////////////////////////////////////////////////////////////////////
1: 		  message = StringUtil.truncate(message, Limits.DB2_VARCHAR_MAXWIDTH);
/////////////////////////////////////////////////////////////////////////
1: 		EmbedResultSetMetaData.getResultColumnDescriptor("MESSAGE",    Types.VARCHAR, true, Limits.DB2_VARCHAR_MAXWIDTH),
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.diag
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.diag;
0: 
0: import java.util.Hashtable;
0: import java.util.Enumeration;
0: import java.sql.ResultSetMetaData;
0: import java.sql.SQLException;
0: import java.sql.Types;
0: import java.util.Properties;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.util.Enumeration;
0: import org.apache.derby.vti.VTICosting;
0: import org.apache.derby.vti.VTIEnvironment;
0: import java.lang.Math;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.error.ExceptionSeverity;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.DB2Limit;
0: import org.apache.derby.iapi.util.StringUtil;
0: 
0: import org.apache.derby.vti.VTITemplate;
0: import org.apache.derby.vti.VTICosting;
0: import org.apache.derby.vti.VTIEnvironment;
0: 
0: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: 
0: 
0: /** 
0:  * ErrorMessage is a VTI that shows all the SQLStates, locale-sensitive error
0:  * messages, and exception severities for a database.
0:  * 
0:  * <p>To use it, query it as an external virtual table:</p>
0:  * <PRE> SELECT* FROM NEW ErrorMessages() AS EQ; </PRE>
0:  * <P>The ErrorMessages VTI has the following columns:
0:  * <UL><LI>SQL_STATE--VARCHAR(5) - nullable.  The SQLState of the SQLException.<br>
0:  * (The code returned by getSQLState() in SQLException.)</LI>
0:  * <LI>MESSAGE--VARCHAR(32672) - nullable.  The error message<br>
0:  * (The code returned by getMessage() in SQLException.)</LI>
0:  * <LI>SEVERITY--INTEGER - nullable.  The Cloudscape code for the severity.<br>
0:  * (The code returned by getErrorCode() in SQLException.)</LI>
0:  * </UL>
0:  * 
0:  */
0: public class ErrorMessages extends VTITemplate implements VTICosting, java.security.PrivilegedAction  {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	
0: 	/* The name of the file containing all the SQLSTate codes.
0: 	 * The class gets the SQLState code from the messages
0: 	 * file (messages_en.properties). Then it uses StandardException to get
0: 	 * the exception severities and locale-sensitive error messages.
0: 	 */
0: 	
0: 
0:         /**          */
0: 	private Properties p;
0:         /**          */
0: 	private Enumeration keys;
0:         /**          */
0: 	private String k;
0:         /**          */
0: 	private String SQLState;
0:         /**          */
0: 	private String message;
0:         /**          */
0: 	private int severity;
0: 	
0: 
0:         /**          */
0: 	public ErrorMessages() throws IOException{
0: 		
0: 		loadProperties();
0: 	}
0: 
0:         /**          * 
0:          * @see java.sql.ResultSet#next
0:          */
0: 	public boolean next() {
0: 		boolean retCode = true;
0: 
0: 		if (!keys.hasMoreElements()) {
0: 			close();
0: 			retCode = false;
0: 			return retCode;
0: 			
0: 		}
0: 
0: 		k = (String)keys.nextElement();
0: 
0: 		if (notAnException()) {
0: 			retCode = next();
0: 		}
0: 
0: 		if (retCode) {
0: 		  SQLState =StandardException.getSQLStateFromIdentifier(k);
0: 		  message = MessageService.getTextMessage(k);
0: 		  message = StringUtil.truncate(message, DB2Limit.DB2_VARCHAR_MAXWIDTH);
0: 		}
0: 		return retCode;
0: 	}
0:         /**          * 
0:          * @see java.sql.ResultSet#close
0:          */
0: 	public void close() {
0: 		p = null;
0: 		k = null;
0: 		keys = null;
0: 	}
0:         /**          * 
0:          * @see java.sql.ResultSet#getMetaData
0:          */
0: 	public ResultSetMetaData getMetaData() {
0: 		return metadata;
0: 	}
0: 
0:     /**      * 
0:      * @exception SQLException column at index is not found
0:      * @see java.sql.ResultSet#getString
0:      */
0:     public String getString(int columnIndex) throws SQLException {
0: 		switch (columnIndex) {
0: 		case 1: return SQLState;
0: 		case 2: return message;
0: 		default: return super.getString(columnIndex); // throw an exception
0: 		}
0: 	}
0:     /**      * 
0:      * @exception SQLException column at index is not found
0:      * @see java.sql.ResultSet#getInt
0:      */
0:     public int getInt(int columnIndex) throws SQLException {
0: 		switch (columnIndex) {
0: 		case 3: return severity;
0: 		default: return super.getInt(columnIndex); // throw an exception
0: 		}
0: 	}
0: 	
0: 	
0:         /**          */
0: 	private void loadProperties() throws IOException
0: 	{
0: 		p = new Properties();
0: 		for (int i = 0; i < 50; i++) {
0: 			msgFile = i;
0: 			InputStream is = (InputStream) java.security.AccessController.doPrivileged(this);
0: 			if (is == null)
0: 				continue;
0: 
0: 			try {
0: 				p.load(is);
0: 			} finally {
0: 				try {
0: 					is.close();
0: 				} catch (IOException ioe) {
0: 				}
0: 			}
0: 		}
0: 		keys = p.keys();
0: 	}
0: 
0:         /**          */
0: 	private boolean notAnException() {
0: 
0: 		if (k.length() < 5)
0: 			return true;
0:         int tempSeverity = StandardException.getSeverityFromIdentifier(k);
0: 		//if the severity is not one of our customer-visible severity
0: 		//levels, it's just a message, not an SQLException
0:         if (tempSeverity < (ExceptionSeverity.NO_APPLICABLE_SEVERITY + 1))
0: 	  return true;
0: 	severity = tempSeverity;	
0: 	return false;
0: 	}
0: 
0: 		
0: 	/*VTICosting methods*/
0: 		
0: 
0:         /**          */
0: 	public double getEstimatedRowCount(VTIEnvironment vtiEnvironment)
0: 	{
0: 		return 1000;
0: 	}
0: 
0:         /**          */
0: 	public double getEstimatedCostPerInstantiation(VTIEnvironment vtiEnvironment)
0: 	{
0: 		return 5000;
0: 	}
0: 
0:         /**          */
0: 	public boolean supportsMultipleInstantiations(VTIEnvironment vtiEnvironment)
0: 	{
0: 		return true;
0: 	}
0: 
0: 	private int msgFile;
0: 	
0: 	public final Object run() {
0: 		InputStream msg = getClass().getResourceAsStream("/org/apache/derby/loc/m" + msgFile + "_en.properties");
0: 		msgFile = 0;
0: 		return msg;
0: 
0: 	}
0: 
0: 	/*
0: 	** Metadata
0: 	*/
0: 	private static final ResultColumnDescriptor[] columnInfo = {
0: 
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("SQL_STATE",  Types.VARCHAR, true, 5),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("MESSAGE",    Types.VARCHAR, true, DB2Limit.DB2_VARCHAR_MAXWIDTH),
0: 		EmbedResultSetMetaData.getResultColumnDescriptor("SEVERITY",   Types.INTEGER, true),
0: 	};
0: 	
0: 	private static final ResultSetMetaData metadata = new EmbedResultSetMetaData(columnInfo);
0: 
0: }
============================================================================