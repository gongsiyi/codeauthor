1:9a05e65: /*
2:9a05e65: 
1:9a05e65: Derby - Class org.apache.derbyTesting.perf.clients.SequenceGeneratorConcurrency
1:9a05e65: 
1:9a05e65: Licensed to the Apache Software Foundation (ASF) under one or more
1:9a05e65: contributor license agreements.  See the NOTICE file distributed with
1:9a05e65: this work for additional information regarding copyright ownership.
1:9a05e65: The ASF licenses this file to You under the Apache License, Version 2.0
1:9a05e65: (the "License"); you may not use this file except in compliance with
1:9a05e65: the License.  You may obtain a copy of the License at
1:9a05e65: 
1:9a05e65:    http://www.apache.org/licenses/LICENSE-2.0
1:9a05e65: 
1:9a05e65: Unless required by applicable law or agreed to in writing, software
1:9a05e65: distributed under the License is distributed on an "AS IS" BASIS,
1:9a05e65: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9a05e65: See the License for the specific language governing permissions and
1:9a05e65: limitations under the License.
1:9a05e65: 
1:9a05e65: */
1:9a05e65: 
1:9a05e65: package org.apache.derbyTesting.perf.clients;
1:9a05e65: 
1:9a05e65: import java.io.PrintStream;
1:9a05e65: import java.sql.Connection;
1:9a05e65: import java.sql.PreparedStatement;
1:f3fcafd: import java.sql.ResultSet;
1:9a05e65: import java.sql.SQLException;
1:9a05e65: import java.util.HashMap;
1:9a05e65: import java.util.Random;
1:9a05e65: 
1:9a05e65: /**
1:9a05e65:  * <p>
1:db26d0a:  * Machinery to test the concurrency of sequence/identity generators.
1:9a05e65:  * </p>
1:9a05e65:  */
1:9a05e65: public class SequenceGeneratorConcurrency
2:9a05e65: {
1:9a05e65:     ///////////////////////////////////////////////////////////////////////////////////
1:9a05e65:     //
1:9a05e65:     // LOAD OPTIONS FOR THIS TEST
1:9a05e65:     //
1:9a05e65:     ///////////////////////////////////////////////////////////////////////////////////
1:9a05e65: 
1:9a05e65:     /**
1:9a05e65:      * <p>
1:9a05e65:      * Describes the load options specific to a run of the SequenceGeneratorConcurrency test.
1:9a05e65:      * </p>
1:9a05e65:      */
1:9a05e65:     public static final class LoadOptions
1:9a05e65:     {
1:9a05e65:         private int _numberOfGenerators;
1:9a05e65:         private int _tablesPerGenerator;
1:9a05e65:         private int _insertsPerTransaction;
1:db26d0a:         private boolean _runIdentityTest;
1:9a05e65:         private boolean _debugging;
1:9a05e65: 
1:9a05e65:         public LoadOptions()
1:9a05e65:         {
1:9a05e65:             _numberOfGenerators = Runner.getLoadOpt( "numberOfGenerators", 1 );
1:9a05e65:             _tablesPerGenerator = Runner.getLoadOpt( "tablesPerGenerator", 1 );
1:9a05e65:             _insertsPerTransaction = Runner.getLoadOpt( "insertsPerTransaction", 1 );
1:db26d0a:             //If no identityTest is specified, then do sequence testing.
1:db26d0a:             _runIdentityTest = ( Runner.getLoadOpt( "identityTest", 0 ) == 1);
1:9a05e65:             _debugging = ( Runner.getLoadOpt( "debugging", 0 ) == 1 );
1:9a05e65:         }
1:9a05e65: 
1:9a05e65:         /** Get the number of generators created by this test run */
1:9a05e65:         public int getNumberOfGenerators() { return _numberOfGenerators; }
1:9a05e65: 
1:9a05e65:         /** Get the number of tables created for each generator */
1:9a05e65:         public int getTablesPerGenerator() { return _tablesPerGenerator; }
1:9a05e65: 
1:9a05e65:         /** Get the number of inserts performed per transaction */
1:9a05e65:         public int getInsertsPerTransaction() { return _insertsPerTransaction; }
1:9a05e65: 
1:9a05e65:         /** Return whether we are in debugging mode */
1:9a05e65:         public boolean debugging() { return _debugging; }
1:9a05e65: 
1:db26d0a:         /** Return whether we are doing identity column testing */
1:db26d0a:         public boolean runIdentityTest() { return _runIdentityTest; }
1:db26d0a: 
1:9a05e65:         public String toString()
1:9a05e65:         {
1:9a05e65:             StringBuffer buffer = new StringBuffer();
1:9a05e65: 
1:9a05e65:             buffer.append( "LoadOptions( " );
1:9a05e65:             buffer.append( " generators = " + _numberOfGenerators );
1:9a05e65:             buffer.append( ", tablesPerGenerator = " + _tablesPerGenerator );
1:9a05e65:             buffer.append( ", insertsPerTransaction = " + _insertsPerTransaction );
1:db26d0a:             buffer.append( ", identityTest = " + _runIdentityTest );
1:9a05e65:             buffer.append( ", debugging = " + _debugging );
1:9a05e65:             buffer.append( " )" );
1:9a05e65: 
1:9a05e65:             return buffer.toString();
1:9a05e65:         }
1:9a05e65:         
1:9a05e65:     }
1:9a05e65: 
1:9a05e65:     ///////////////////////////////////////////////////////////////////////////////////
1:9a05e65:     //
1:9a05e65:     // DBFiller IMPLEMENTATION
1:9a05e65:     //
1:9a05e65:     ///////////////////////////////////////////////////////////////////////////////////
1:9a05e65: 
1:9a05e65:     /**
1:9a05e65:      * <p>
1:9a05e65:      * Create the schema necessary to support this test run.
1:9a05e65:      * </p>
1:9a05e65:      */
1:9a05e65:     public static final class Filler implements DBFiller
1:9a05e65:     {
1:9a05e65:         private LoadOptions _loadOptions;
1:9a05e65: 
1:9a05e65:         public Filler()
1:9a05e65:         {
1:9a05e65:             _loadOptions = new LoadOptions();
1:9a05e65:         }
1:9a05e65: 
1:9a05e65:         public void fill( Connection conn ) throws SQLException
1:9a05e65:         {
1:9a05e65:             int numberOfGenerators = _loadOptions.getNumberOfGenerators();
1:9a05e65:             int tablesPerGenerator = _loadOptions.getTablesPerGenerator();
1:db26d0a:             boolean runIdentityTest = _loadOptions.runIdentityTest();
1:9a05e65: 
1:9a05e65:             for ( int sequence = 0; sequence < numberOfGenerators; sequence++ )
1:9a05e65:             {
1:db26d0a:             	if (!runIdentityTest)
1:db26d0a:                     runDDL( conn, "create sequence " + makeSequenceName( sequence ) );
1:9a05e65: 
1:f3fcafd:                 for ( int table = 1; table <= tablesPerGenerator; table++ )
1:9a05e65:                 {
1:db26d0a:                 	if (runIdentityTest)
1:db26d0a:                         runDDL( conn, "create table " + makeTableName( sequence, table ) + "( a int, b int generated always as identity)" );
1:db26d0a:                 	else
1:db26d0a:                         runDDL( conn, "create table " + makeTableName( sequence, table ) + "( a int )" );
1:9a05e65:                 }
1:9a05e65:             }
1:9a05e65:         }
1:9a05e65: 
1:9a05e65:         /** Run a DDL statement */
1:9a05e65:         private void runDDL( Connection conn, String ddl ) throws SQLException
1:9a05e65:         {
1:9a05e65:             PreparedStatement ps = prepareStatement( conn, _loadOptions.debugging(), ddl );
1:9a05e65:             ps.execute();
1:9a05e65:             ps.close();
1:9a05e65:         }
1:9a05e65:     }
1:9a05e65: 
1:9a05e65:     ///////////////////////////////////////////////////////////////////////////////////
1:9a05e65:     //
1:9a05e65:     // Client IMPLEMENTATION
1:9a05e65:     //
1:9a05e65:     ///////////////////////////////////////////////////////////////////////////////////
1:9a05e65: 
1:9a05e65:     public static final class SGClient implements Client
1:9a05e65:     {
1:9a05e65:         private LoadOptions _loadOptions;
1:9a05e65:         private Connection _conn;
1:9a05e65:         private PreparedStatement _psArray[][];
1:9a05e65:         private Random _randomNumberGenerator;
1:9a05e65:         private int _clientNumber;
1:9a05e65:         private int _transactionCount;
1:9a05e65:         private int _errorCount = 0;
1:9d44c9e:         private HashMap<String, int[]> _errorLog;
1:9a05e65: 
1:9a05e65:         private static int _clientCount = 0;
1:9a05e65: 
1:9a05e65:         // filled in at reporting time
1:9a05e65:         private static int _totalErrorCount = 0;
1:9a05e65:         private static int _totalTransactionCount = 0;
1:9a05e65: 
1:9a05e65:         public SGClient()
1:9a05e65:         {
1:9a05e65:             _clientNumber = _clientCount++;
1:9a05e65:             _transactionCount = 0;
1:9d44c9e:             _errorLog = new HashMap<String, int[]>();
1:9a05e65:             _loadOptions = new LoadOptions();
1:9a05e65: 
1:f3fcafd:             _psArray = new PreparedStatement[ _loadOptions.getNumberOfGenerators() ] [ _loadOptions.getTablesPerGenerator() + 1 ];
1:9a05e65:             _randomNumberGenerator = new Random();
1:9a05e65: 
1:9a05e65:             if ( _loadOptions.debugging() )
1:9a05e65:             {
1:9a05e65:                 debugPrint( "Creating client " + _clientNumber + " with " + _loadOptions.toString() );
1:9a05e65:             }
1:9a05e65:         }
1:9a05e65: 
1:9a05e65:         /** Create the PreparedStatements needed by the test run. */
1:9a05e65:         public void init( Connection conn ) throws SQLException
1:9a05e65:         {
1:9a05e65:             _conn = conn;
1:9a05e65: 
1:9a05e65:             int numberOfGenerators = _loadOptions.getNumberOfGenerators();
1:9a05e65:             int tablesPerGenerator = _loadOptions.getTablesPerGenerator();
1:9a05e65:             boolean debugging = _loadOptions.debugging();
1:db26d0a:             boolean runIdentityTest = _loadOptions.runIdentityTest();
1:9a05e65: 
1:9a05e65:             for ( int sequence = 0; sequence < numberOfGenerators; sequence++ )
1:9a05e65:             {
1:9a05e65:                 String sequenceName = makeSequenceName( sequence );
1:9a05e65: 
1:f3fcafd:                 for ( int table = 0; table <= tablesPerGenerator; table++ )
1:9a05e65:                 {
1:9a05e65:                     String tableName = makeTableName( sequence, table );
1:f3fcafd: 
1:f3fcafd:                     PreparedStatement ps;
1:f3fcafd:                     String valuesClause = "values ( next value for " + sequenceName + " )";
1:f3fcafd: 
1:db26d0a:                     if ( table == 0 ){
1:db26d0a:                     	if(!runIdentityTest) 
1:db26d0a:                         	ps = prepareStatement( _conn, debugging, valuesClause );
1:db26d0a:                     	else
1:db26d0a:                         	ps = prepareStatement( _conn, debugging, "values (1)" );
1:db26d0a:                     }
1:db26d0a:                     else { 
1:db26d0a:                     	if(!runIdentityTest) 
1:db26d0a:                             ps = prepareStatement( _conn, debugging, "insert into " + tableName + "( a ) " + valuesClause ); 
1:db26d0a:                     	else
1:db26d0a:                         	ps = prepareStatement( _conn, debugging, "insert into " + tableName + "( a ) values(1)"); 
1:db26d0a:                 	}
1:9a05e65:                     
1:f3fcafd:                     _psArray[ sequence ][ table ] = ps;
1:9a05e65:                 }
1:9a05e65:             }
1:9a05e65: 
1:9a05e65:             _conn.setAutoCommit( false );
1:9a05e65:         }
1:9a05e65: 
1:9a05e65:         /** A transaction performed by this thread */
1:9a05e65:         public void doWork() throws SQLException
1:9a05e65:         {
1:9a05e65:             int sequence = getPositiveRandomNumber() % _loadOptions.getNumberOfGenerators();
1:f3fcafd:             int tablesPerGenerator = _loadOptions.getTablesPerGenerator();
1:f3fcafd:             int table = tablesPerGenerator == 0 ? 0 : (getPositiveRandomNumber() % tablesPerGenerator) + 1;
1:9a05e65:             int insertsPerTransaction = _loadOptions.getInsertsPerTransaction();
1:9a05e65:             boolean debugging = _loadOptions.debugging();
1:9a05e65: 
1:9a05e65:             int rowNumber = 0;
1:9a05e65: 
1:f3fcafd:             PreparedStatement ps = null;
1:f3fcafd:             ResultSet rs = null;
1:f3fcafd:             
1:9a05e65:             try {
1:9a05e65:                 for ( ; rowNumber < insertsPerTransaction; rowNumber++ )
1:9a05e65:                 {
1:f3fcafd:                     rs = null;
1:f3fcafd:                     ps = null;
1:f3fcafd:                     
1:f3fcafd:                     ps = _psArray[ sequence ][ table ];
1:f3fcafd: 
1:f3fcafd:                     if ( table == 0 )
1:f3fcafd:                     {
1:f3fcafd:                         rs = ps.executeQuery();
1:f3fcafd:                         rs.next();
1:f3fcafd: 
1:f3fcafd:                         rs = close( rs, debugging );
1:f3fcafd:                     }
1:f3fcafd:                     else
1:f3fcafd:                     {
1:f3fcafd:                         ps.executeUpdate();
1:f3fcafd:                     }
1:f3fcafd:                     
1:9a05e65:                 }
1:9a05e65:             }
1:39c6ffc:             catch (Throwable t)
1:9a05e65:             {
1:9a05e65:                 debugPrint
1:9a05e65:                     (
1:9a05e65:                      "Error on client " + _clientNumber +
1:9a05e65:                      " on sequence " + sequence +
1:9a05e65:                      " in transaction " + _transactionCount +
1:f3fcafd:                      " on row " + rowNumber +
1:f3fcafd:                      ": " + t.getMessage()
1:9a05e65:                      );
1:f3fcafd: 
1:9a05e65:                 addError( t );
1:f3fcafd:                 
1:f3fcafd:                 rs = close( rs, debugging );
1:9a05e65:                 
1:9a05e65:                 _conn.rollback();
1:9a05e65: 
1:9a05e65:                 return;
1:9a05e65:             }
1:9a05e65: 
1:9a05e65:             _conn.commit();
1:9a05e65:             
1:9a05e65:             _transactionCount++;
1:f3fcafd:         }
1:9a05e65: 
1:f3fcafd:         private ResultSet close( ResultSet rs, boolean debugging )
1:f3fcafd:         {
1:f3fcafd:             try {
1:f3fcafd:                 if ( rs != null ) { rs.close(); }
1:f3fcafd:             }
1:f3fcafd:             catch (SQLException se)
1:f3fcafd:             {
1:f3fcafd:                 if ( debugging ) { debugPrint( "Oops! " + se.getMessage() ); }
1:f3fcafd:             }
1:f3fcafd: 
1:f3fcafd:             return null;
1:f3fcafd:         }
1:f3fcafd: 
1:f3fcafd:         private PreparedStatement close( PreparedStatement ps, boolean debugging )
1:f3fcafd:         {
1:f3fcafd:             try {
1:f3fcafd:                 if ( ps != null ) { ps.close(); }
1:f3fcafd:             }
1:f3fcafd:             catch (SQLException se)
1:f3fcafd:             {
1:f3fcafd:                 if ( debugging ) { debugPrint( "Oops! " + se.getMessage() ); }
1:f3fcafd:             }
1:f3fcafd: 
1:f3fcafd:             return null;
1:9a05e65:         }
1:f3fcafd: 
1:9a05e65:         private int getPositiveRandomNumber()
1:9a05e65:         {
1:9a05e65:             int raw = _randomNumberGenerator.nextInt();
1:9a05e65: 
1:9a05e65:             if ( raw < 0 ) { return -raw; }
1:9a05e65:             else { return raw; }
1:9a05e65:         }
1:9a05e65: 
1:9a05e65:         public void printReport(PrintStream out)
1:9a05e65:         {
1:9d44c9e:             for (String key : _errorLog.keySet()) {
2:9a05e65:                 int[] value = (int[]) _errorLog.get( key );
1:9a05e65: 
1:9a05e65:                 String message = "    Client " + _clientNumber + " saw " + value[0] + " instances of this error: " + key;
1:9a05e65: 
1:9a05e65:                 out.println( message );
1:9a05e65:             }
1:9a05e65: 
1:9a05e65:             _totalErrorCount += _errorCount;
1:9a05e65:             _totalTransactionCount += _transactionCount;
1:9a05e65: 
1:9a05e65:             // last client reports the totals
1:9a05e65:             if ( _clientNumber == ( _clientCount - 1 ) )
1:9a05e65:             {
1:9a05e65:                 out.println( "\n" );
1:9a05e65:                 out.println( _loadOptions.toString() );
1:9a05e65:                 out.println( _totalErrorCount + " errors, including warmup phase." );
1:9a05e65:                 out.println( _totalTransactionCount + " successful transactions, including warmup phase." );
1:9a05e65:             }
1:9a05e65:         }
1:9a05e65:         
1:9a05e65:         // error management
1:9a05e65: 
1:9a05e65:         /** Bump the error count for this problem */
1:9a05e65:         private void addError( Throwable t )
1:9a05e65:         {
1:9a05e65:             _errorCount++;
1:9a05e65:             
1:9a05e65:             String key = t.getClass().getName() + ": " + t.getMessage();
1:9d44c9e:             int[] value = _errorLog.get( key );
1:9a05e65: 
1:9a05e65:             if ( value != null ) { value[ 0 ] = value[ 0 ] + 1; }
1:9a05e65:             else
1:9a05e65:             {
1:9a05e65:                 _errorLog.put( key, new int[] { 1 } );
1:9a05e65:             }
1:9a05e65:         }
1:9a05e65:     }
1:9a05e65: 
1:9a05e65:     ///////////////////////////////////////////////////////////////////////////////////
1:9a05e65:     //
1:9a05e65:     // UTILITY METHODS
1:9a05e65:     //
1:9a05e65:     ///////////////////////////////////////////////////////////////////////////////////
1:9a05e65: 
1:9a05e65:     /** make the name of a sequence */
1:9a05e65:     public static String makeSequenceName( int sequence )
1:9a05e65:     { return "seq_" + sequence; }
1:9a05e65:     
1:9a05e65:     /** make the name of a table */
1:9a05e65:     public static String makeTableName( int sequence, int table )
1:9a05e65:     { return "t_" + sequence + "_" + table; }
1:9a05e65: 
1:9a05e65:     public static PreparedStatement prepareStatement
1:9a05e65:         ( Connection conn, boolean debugging, String text ) throws SQLException
1:9a05e65:     {
1:9a05e65:         if ( debugging ) { debugPrint( text ); }
1:9a05e65: 
1:9a05e65:         return conn.prepareStatement( text );
1:9a05e65:     }
1:9a05e65:     
1:9a05e65:     public static void debugPrint( String text )
1:9a05e65:     {
1:9a05e65:         print( "DEBUG: " + text );
1:9a05e65:     }
1:9a05e65: 
1:9a05e65:     public static void print( String text )
1:9a05e65:     {
1:9a05e65:         System.out.println( text );
1:9a05e65:     }
1:9a05e65: 
1:9a05e65: }
1:9a05e65: 
1:9a05e65: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         private HashMap<String, int[]> _errorLog;
/////////////////////////////////////////////////////////////////////////
1:             _errorLog = new HashMap<String, int[]>();
/////////////////////////////////////////////////////////////////////////
1:             for (String key : _errorLog.keySet()) {
/////////////////////////////////////////////////////////////////////////
1:             int[] value = _errorLog.get( key );
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:db26d0a
/////////////////////////////////////////////////////////////////////////
1:  * Machinery to test the concurrency of sequence/identity generators.
/////////////////////////////////////////////////////////////////////////
1:         private boolean _runIdentityTest;
/////////////////////////////////////////////////////////////////////////
1:             //If no identityTest is specified, then do sequence testing.
1:             _runIdentityTest = ( Runner.getLoadOpt( "identityTest", 0 ) == 1);
/////////////////////////////////////////////////////////////////////////
1:         /** Return whether we are doing identity column testing */
1:         public boolean runIdentityTest() { return _runIdentityTest; }
1: 
/////////////////////////////////////////////////////////////////////////
1:             buffer.append( ", identityTest = " + _runIdentityTest );
/////////////////////////////////////////////////////////////////////////
1:             boolean runIdentityTest = _loadOptions.runIdentityTest();
1:             	if (!runIdentityTest)
1:                     runDDL( conn, "create sequence " + makeSequenceName( sequence ) );
1:                 	if (runIdentityTest)
1:                         runDDL( conn, "create table " + makeTableName( sequence, table ) + "( a int, b int generated always as identity)" );
1:                 	else
1:                         runDDL( conn, "create table " + makeTableName( sequence, table ) + "( a int )" );
/////////////////////////////////////////////////////////////////////////
1:             boolean runIdentityTest = _loadOptions.runIdentityTest();
/////////////////////////////////////////////////////////////////////////
1:                     if ( table == 0 ){
1:                     	if(!runIdentityTest) 
1:                         	ps = prepareStatement( _conn, debugging, valuesClause );
1:                     	else
1:                         	ps = prepareStatement( _conn, debugging, "values (1)" );
1:                     }
1:                     else { 
1:                     	if(!runIdentityTest) 
1:                             ps = prepareStatement( _conn, debugging, "insert into " + tableName + "( a ) " + valuesClause ); 
1:                     	else
1:                         	ps = prepareStatement( _conn, debugging, "insert into " + tableName + "( a ) values(1)"); 
1:                 	}
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f3fcafd
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
/////////////////////////////////////////////////////////////////////////
1:                 for ( int table = 1; table <= tablesPerGenerator; table++ )
/////////////////////////////////////////////////////////////////////////
1:             _psArray = new PreparedStatement[ _loadOptions.getNumberOfGenerators() ] [ _loadOptions.getTablesPerGenerator() + 1 ];
/////////////////////////////////////////////////////////////////////////
1:                 for ( int table = 0; table <= tablesPerGenerator; table++ )
1: 
1:                     PreparedStatement ps;
1:                     String valuesClause = "values ( next value for " + sequenceName + " )";
1: 
0:                     if ( table == 0 ) { ps = prepareStatement( _conn, debugging, valuesClause ); }
0:                     else { ps = prepareStatement( _conn, debugging, "insert into " + tableName + "( a ) " + valuesClause ); }
1:                     _psArray[ sequence ][ table ] = ps;
/////////////////////////////////////////////////////////////////////////
1:             int tablesPerGenerator = _loadOptions.getTablesPerGenerator();
1:             int table = tablesPerGenerator == 0 ? 0 : (getPositiveRandomNumber() % tablesPerGenerator) + 1;
1:             PreparedStatement ps = null;
1:             ResultSet rs = null;
1:             
1:                     rs = null;
1:                     ps = null;
1:                     
1:                     ps = _psArray[ sequence ][ table ];
1: 
1:                     if ( table == 0 )
1:                     {
1:                         rs = ps.executeQuery();
1:                         rs.next();
1: 
1:                         rs = close( rs, debugging );
1:                     }
1:                     else
1:                     {
1:                         ps.executeUpdate();
1:                     }
1:                     
/////////////////////////////////////////////////////////////////////////
1:                      " on row " + rowNumber +
1:                      ": " + t.getMessage()
1:                 
1:                 rs = close( rs, debugging );
1:                 
/////////////////////////////////////////////////////////////////////////
1:         private ResultSet close( ResultSet rs, boolean debugging )
1:         {
1:             try {
1:                 if ( rs != null ) { rs.close(); }
1:             }
1:             catch (SQLException se)
1:             {
1:                 if ( debugging ) { debugPrint( "Oops! " + se.getMessage() ); }
1:             }
1: 
1:             return null;
1:         }
1: 
1:         private PreparedStatement close( PreparedStatement ps, boolean debugging )
1:         {
1:             try {
1:                 if ( ps != null ) { ps.close(); }
1:             }
1:             catch (SQLException se)
1:             {
1:                 if ( debugging ) { debugPrint( "Oops! " + se.getMessage() ); }
1:             }
1: 
1:             return null;
1:         }
1: 
commit:39c6ffc
/////////////////////////////////////////////////////////////////////////
1:             catch (Throwable t)
commit:9a05e65
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.clients.SequenceGeneratorConcurrency
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.perf.clients;
1: 
1: import java.io.PrintStream;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.util.HashMap;
0: import java.util.Iterator;
1: import java.util.Random;
1: 
1: /**
1:  * <p>
0:  * Machinery to test the concurrency of sequence generators.
1:  * </p>
1:  */
1: public class SequenceGeneratorConcurrency
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // LOAD OPTIONS FOR THIS TEST
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Describes the load options specific to a run of the SequenceGeneratorConcurrency test.
1:      * </p>
1:      */
1:     public static final class LoadOptions
1:     {
1:         private int _numberOfGenerators;
1:         private int _tablesPerGenerator;
1:         private int _insertsPerTransaction;
1:         private boolean _debugging;
1: 
1:         public LoadOptions()
1:         {
1:             _numberOfGenerators = Runner.getLoadOpt( "numberOfGenerators", 1 );
1:             _tablesPerGenerator = Runner.getLoadOpt( "tablesPerGenerator", 1 );
1:             _insertsPerTransaction = Runner.getLoadOpt( "insertsPerTransaction", 1 );
1:             _debugging = ( Runner.getLoadOpt( "debugging", 0 ) == 1 );
1:         }
1: 
1:         /** Get the number of generators created by this test run */
1:         public int getNumberOfGenerators() { return _numberOfGenerators; }
1: 
1:         /** Get the number of tables created for each generator */
1:         public int getTablesPerGenerator() { return _tablesPerGenerator; }
1: 
1:         /** Get the number of inserts performed per transaction */
1:         public int getInsertsPerTransaction() { return _insertsPerTransaction; }
1: 
1:         /** Return whether we are in debugging mode */
1:         public boolean debugging() { return _debugging; }
1: 
1:         public String toString()
1:         {
1:             StringBuffer buffer = new StringBuffer();
1: 
1:             buffer.append( "LoadOptions( " );
1:             buffer.append( " generators = " + _numberOfGenerators );
1:             buffer.append( ", tablesPerGenerator = " + _tablesPerGenerator );
1:             buffer.append( ", insertsPerTransaction = " + _insertsPerTransaction );
1:             buffer.append( ", debugging = " + _debugging );
1:             buffer.append( " )" );
1: 
1:             return buffer.toString();
1:         }
1:         
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // DBFiller IMPLEMENTATION
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Create the schema necessary to support this test run.
1:      * </p>
1:      */
1:     public static final class Filler implements DBFiller
1:     {
1:         private LoadOptions _loadOptions;
1: 
1:         public Filler()
1:         {
1:             _loadOptions = new LoadOptions();
1:         }
1: 
1:         public void fill( Connection conn ) throws SQLException
1:         {
1:             int numberOfGenerators = _loadOptions.getNumberOfGenerators();
1:             int tablesPerGenerator = _loadOptions.getTablesPerGenerator();
1: 
1:             for ( int sequence = 0; sequence < numberOfGenerators; sequence++ )
1:             {
0:                 runDDL( conn, "create sequence " + makeSequenceName( sequence ) );
1: 
0:                 for ( int table = 0; table < tablesPerGenerator; table++ )
1:                 {
0:                     runDDL( conn, "create table " + makeTableName( sequence, table ) + "( a int )" );
1:                 }
1:             }
1:         }
1: 
1:         /** Run a DDL statement */
1:         private void runDDL( Connection conn, String ddl ) throws SQLException
1:         {
1:             PreparedStatement ps = prepareStatement( conn, _loadOptions.debugging(), ddl );
1:             ps.execute();
1:             ps.close();
1:         }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Client IMPLEMENTATION
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public static final class SGClient implements Client
1:     {
1:         private LoadOptions _loadOptions;
1:         private Connection _conn;
1:         private PreparedStatement _psArray[][];
1:         private Random _randomNumberGenerator;
1:         private int _clientNumber;
1:         private int _transactionCount;
1:         private int _errorCount = 0;
0:         private HashMap _errorLog;
1: 
1:         private static int _clientCount = 0;
1: 
1:         // filled in at reporting time
1:         private static int _totalErrorCount = 0;
1:         private static int _totalTransactionCount = 0;
1: 
1:         public SGClient()
1:         {
1:             _clientNumber = _clientCount++;
1:             _transactionCount = 0;
0:             _errorLog = new HashMap();
1:             _loadOptions = new LoadOptions();
1: 
0:             _psArray = new PreparedStatement[ _loadOptions.getNumberOfGenerators() ] [ _loadOptions.getTablesPerGenerator() ];
1:             _randomNumberGenerator = new Random();
1: 
1:             if ( _loadOptions.debugging() )
1:             {
1:                 debugPrint( "Creating client " + _clientNumber + " with " + _loadOptions.toString() );
1:             }
1:         }
1: 
1:         /** Create the PreparedStatements needed by the test run. */
1:         public void init( Connection conn ) throws SQLException
1:         {
1:             _conn = conn;
1: 
1:             int numberOfGenerators = _loadOptions.getNumberOfGenerators();
1:             int tablesPerGenerator = _loadOptions.getTablesPerGenerator();
1:             boolean debugging = _loadOptions.debugging();
1: 
1:             for ( int sequence = 0; sequence < numberOfGenerators; sequence++ )
1:             {
1:                 String sequenceName = makeSequenceName( sequence );
1: 
0:                 for ( int table = 0; table < tablesPerGenerator; table++ )
1:                 {
1:                     String tableName = makeTableName( sequence, table );
1:                     
0:                     _psArray[ sequence ][ table ] = prepareStatement
0:                         ( _conn, debugging, "insert into " + tableName + "( a ) values ( next value for " + sequenceName + " )" );
1:                 }
1:             }
1: 
1:             _conn.setAutoCommit( false );
1:         }
1: 
1:         /** A transaction performed by this thread */
1:         public void doWork() throws SQLException
1:         {
1:             int sequence = getPositiveRandomNumber() % _loadOptions.getNumberOfGenerators();
0:             int table = getPositiveRandomNumber() % _loadOptions.getTablesPerGenerator();
1:             int insertsPerTransaction = _loadOptions.getInsertsPerTransaction();
1:             boolean debugging = _loadOptions.debugging();
1: 
1:             int rowNumber = 0;
1: 
1:             try {
1:                 for ( ; rowNumber < insertsPerTransaction; rowNumber++ )
1:                 {
0:                     _psArray[ sequence ][ table ].executeUpdate();
1:                 }
1:             }
0:             catch (SQLException t)
1:             {
1:                 debugPrint
1:                     (
1:                      "Error on client " + _clientNumber +
1:                      " on sequence " + sequence +
1:                      " in transaction " + _transactionCount +
0:                      " on row " + rowNumber
1:                      );
1: 
1:                 addError( t );
1:                 _conn.rollback();
1: 
1:                 return;
1:             }
1: 
1:             _conn.commit();
1:             
1:             _transactionCount++;
1:         }
1: 
1:         private int getPositiveRandomNumber()
1:         {
1:             int raw = _randomNumberGenerator.nextInt();
1: 
1:             if ( raw < 0 ) { return -raw; }
1:             else { return raw; }
1:         }
1: 
1:         public void printReport(PrintStream out)
1:         {
0:             Iterator keyIterator = _errorLog.keySet().iterator();
1: 
0:             while ( keyIterator.hasNext() )
1:             {
0:                 String key = (String) keyIterator.next();
1:                 int[] value = (int[]) _errorLog.get( key );
1: 
1:                 String message = "    Client " + _clientNumber + " saw " + value[0] + " instances of this error: " + key;
1: 
1:                 out.println( message );
1:             }
1: 
1:             _totalErrorCount += _errorCount;
1:             _totalTransactionCount += _transactionCount;
1: 
1:             // last client reports the totals
1:             if ( _clientNumber == ( _clientCount - 1 ) )
1:             {
1:                 out.println( "\n" );
1:                 out.println( _loadOptions.toString() );
1:                 out.println( _totalErrorCount + " errors, including warmup phase." );
1:                 out.println( _totalTransactionCount + " successful transactions, including warmup phase." );
1:             }
1:         }
1:         
1:         // error management
1: 
1:         /** Bump the error count for this problem */
1:         private void addError( Throwable t )
1:         {
1:             _errorCount++;
1:             
1:             String key = t.getClass().getName() + ": " + t.getMessage();
1:             int[] value = (int[]) _errorLog.get( key );
1: 
1:             if ( value != null ) { value[ 0 ] = value[ 0 ] + 1; }
1:             else
1:             {
1:                 _errorLog.put( key, new int[] { 1 } );
1:             }
1:         }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // UTILITY METHODS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** make the name of a sequence */
1:     public static String makeSequenceName( int sequence )
1:     { return "seq_" + sequence; }
1:     
1:     /** make the name of a table */
1:     public static String makeTableName( int sequence, int table )
1:     { return "t_" + sequence + "_" + table; }
1: 
1:     public static PreparedStatement prepareStatement
1:         ( Connection conn, boolean debugging, String text ) throws SQLException
1:     {
1:         if ( debugging ) { debugPrint( text ); }
1: 
1:         return conn.prepareStatement( text );
1:     }
1:     
1:     public static void debugPrint( String text )
1:     {
1:         print( "DEBUG: " + text );
1:     }
1: 
1:     public static void print( String text )
1:     {
1:         System.out.println( text );
1:     }
1: 
1: }
1: 
1: 
============================================================================