1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.simpleThread
1:67614ad: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
21:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.tests.lang;
1:67614ad: 
1:67614ad: import java.sql.Connection;
1:67614ad: import java.sql.Statement;
1:67614ad: import java.sql.ResultSet;
1:67614ad: import java.sql.ResultSetMetaData;
1:67614ad: import java.sql.DriverManager;
1:67614ad: import org.apache.derby.tools.ij;
1:67614ad: 
1:67614ad: /*
1:67614ad: 	This is from a bug found by a beta customer.
1:67614ad:  */
1:90b6f2f: public class simpleThread extends Thread {
1:67614ad: 
1:67614ad:         private static Connection _connection = null;
1:67614ad:         private static boolean _inUse = false;
1:67614ad:         private static Object _lock = new Object();
1:67614ad: 
1:67614ad:         private long _wait = 0;
1:67614ad:         private long _myCount = 0;
1:67614ad:         private static int _count = 0;
1:67614ad:         private synchronized static int getCount() { return(_count++); }
1:67614ad:         private String _query;
1:67614ad: 
1:67614ad:         public simpleThread( String query, long waitTime) {
1:67614ad:                 _wait = waitTime;
1:67614ad:                 _myCount = getCount();
1:67614ad:                 _query = query;
1:90b6f2f:                 start();
1:67614ad:         }
1:67614ad: 
1:67614ad:         public void run() {
1:67614ad: 				int rows = 0;
1:67614ad: 				boolean caught = false;
2:67614ad:                 try {
1:67614ad:                         Thread.currentThread().sleep(_wait);
1:67614ad:                         Connection conn = GetConnection();
1:67614ad:                         Statement stmt = conn.createStatement();
1:67614ad:                         String query = _query;
1:67614ad:                         ResultSet rs = stmt.executeQuery( query );
1:67614ad:                         ResultSetMetaData rsmd = rs.getMetaData();
1:67614ad:                         //int cols = rsmd.getColumnCount();
1:67614ad:                         while(rs.next()) {
1:67614ad: 							rows++;
1:67614ad:                                 //System.out.print(_myCount + ":");
1:67614ad:                                 //for( int x=0;x<cols;x++) {
1:67614ad:                                  //       String s = rs.getString(x+1);
1:67614ad:                                   //      if( x > 0) System.out.print(",");
1:67614ad:                                    //     System.out.print(s);
1:67614ad:                                 //}
1:67614ad:                                 //System.out.println();
1:67614ad:                         }
1:67614ad:                         stmt.close();
1:67614ad:                         ReturnConnection(conn);
2:67614ad:                 } catch (Exception ex) {
1:67614ad: 					// we expect some threads to get exceptions
1:67614ad: 					caught = true;
1:67614ad:                 }
1:67614ad: 				if (rows == 3 || caught)
1:67614ad: 				{
1:67614ad: 					//System.out.println("This thread's okay!");
1:67614ad: 			    }
1:67614ad: 				else
1:67614ad: 				{
1:67614ad: 					System.out.println("FAIL: thread "+_myCount+" only got "+rows+" rows and caught was "+caught);
1:67614ad: 		        }
1:67614ad:         }
1:67614ad: 
1:67614ad: 
1:67614ad:         public simpleThread(String argv[]) throws Exception {
1:67614ad:             
1:67614ad: 			ij.getPropertyArg(argv);
1:67614ad: 			_connection = ij.startJBMS();
1:67614ad: 
1:67614ad: 			Connection conn = GetConnection();
1:67614ad: 
1:67614ad:             Statement stmt = conn.createStatement();
1:67614ad: 
1:67614ad:             stmt.execute("create table people(name varchar(255), address varchar(255), phone varchar(64))");
1:67614ad:             stmt.execute("insert into people VALUES ('mike', 'mikes address', '123-456-7890')");
1:67614ad:             stmt.execute("insert into people VALUES ('adam', 'adams address', '123-456-1234')");
1:67614ad:             stmt.execute("insert into people VALUES ('steve', 'steves address', '123-456-4321')");
1:67614ad:             stmt.close();
1:67614ad: 
1:67614ad:             ReturnConnection(conn);
1:67614ad: 
1:67614ad:             String query = "SELECT * from people ORDER by name";
1:67614ad: 
1:90b6f2f:             Thread[] threads = {
1:90b6f2f:                 new simpleThread(query,0),
1:90b6f2f:                 new simpleThread(query,10000),
1:90b6f2f:                 new simpleThread(query,10100),
1:90b6f2f:                 new simpleThread(query,20000),
1:90b6f2f:             };
1:90b6f2f: 
1:90b6f2f:             for (int i = 0; i < threads.length; i++) {
1:90b6f2f:                 threads[i].join();
1:67614ad:             }
1:90b6f2f: 
1:90b6f2f:             _connection.close();
1:90b6f2f:             _connection = null;
1:67614ad:         }
1:67614ad: 
1:67614ad:         public static Connection GetConnection() {
1:67614ad:                 synchronized(_lock) {
1:67614ad:                         _inUse = true;
1:67614ad:                 }
1:67614ad:                 return _connection;
1:67614ad:         }
1:67614ad:         public static void ReturnConnection(Connection c) {
1:67614ad:                 synchronized(_lock) {
1:67614ad:                         _inUse = false;
1:67614ad:                         _lock.notifyAll();
1:67614ad:                 }
1:67614ad:         }
1:67614ad: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:90b6f2f
/////////////////////////////////////////////////////////////////////////
1: public class simpleThread extends Thread {
/////////////////////////////////////////////////////////////////////////
1:                 start();
/////////////////////////////////////////////////////////////////////////
1:             Thread[] threads = {
1:                 new simpleThread(query,0),
1:                 new simpleThread(query,10000),
1:                 new simpleThread(query,10100),
1:                 new simpleThread(query,20000),
1:             };
1: 
1:             for (int i = 0; i < threads.length; i++) {
1:                 threads[i].join();
1: 
1:             _connection.close();
1:             _connection = null;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.tests.lang
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.DriverManager;
1: import org.apache.derby.tools.ij;
1: 
1: /*
1: 	This is from a bug found by a beta customer.
1:  */
0: public class simpleThread implements Runnable { 
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1:         private static Connection _connection = null;
1:         private static boolean _inUse = false;
1:         private static Object _lock = new Object();
1: 
1:         private long _wait = 0;
1:         private long _myCount = 0;
1:         private static int _count = 0;
1:         private synchronized static int getCount() { return(_count++); }
1:         private String _query;
1: 
1:         public simpleThread( String query, long waitTime) {
1:                 _wait = waitTime;
1:                 _myCount = getCount();
1:                 _query = query;
0:                 new Thread(this).start();
1:         }
1: 
1:         public void run() {
1: 				int rows = 0;
1: 				boolean caught = false;
1:                 try {
1:                         Thread.currentThread().sleep(_wait);
1:                         Connection conn = GetConnection();
1:                         Statement stmt = conn.createStatement();
1:                         String query = _query;
1:                         ResultSet rs = stmt.executeQuery( query );
1:                         ResultSetMetaData rsmd = rs.getMetaData();
1:                         //int cols = rsmd.getColumnCount();
1:                         while(rs.next()) {
1: 							rows++;
1:                                 //System.out.print(_myCount + ":");
1:                                 //for( int x=0;x<cols;x++) {
1:                                  //       String s = rs.getString(x+1);
1:                                   //      if( x > 0) System.out.print(",");
1:                                    //     System.out.print(s);
1:                                 //}
1:                                 //System.out.println();
1:                         }
1:                         stmt.close();
1:                         ReturnConnection(conn);
1:                 } catch (Exception ex) {
1: 					// we expect some threads to get exceptions
1: 					caught = true;
1:                 }
1: 				if (rows == 3 || caught)
1: 				{
1: 					//System.out.println("This thread's okay!");
1: 			    }
1: 				else
1: 				{
1: 					System.out.println("FAIL: thread "+_myCount+" only got "+rows+" rows and caught was "+caught);
1: 		        }
1:         }
1: 
1: 
1:         public simpleThread(String argv[]) throws Exception {
1:             
1: 			ij.getPropertyArg(argv);
1: 			_connection = ij.startJBMS();
1: 
1: 			Connection conn = GetConnection();
1: 
1:             Statement stmt = conn.createStatement();
1: 
1:             stmt.execute("create table people(name varchar(255), address varchar(255), phone varchar(64))");
1:             stmt.execute("insert into people VALUES ('mike', 'mikes address', '123-456-7890')");
1:             stmt.execute("insert into people VALUES ('adam', 'adams address', '123-456-1234')");
1:             stmt.execute("insert into people VALUES ('steve', 'steves address', '123-456-4321')");
1:             stmt.close();
1: 
1:             ReturnConnection(conn);
1: 
1:             String query = "SELECT * from people ORDER by name";
1: 
1:             try {
0:                 String[] retval = new String[4];
0:                 new simpleThread(query,0);
0:                 new simpleThread(query,10000);
0:                 new simpleThread(query,10100);
0:                 new simpleThread(query,20000);
1:             } catch (Exception ex) {
0:                 System.err.println(ex.toString() );
1:             }
1:         }
1: 
1:         public static Connection GetConnection() {
1:                 synchronized(_lock) {
1:                         _inUse = true;
1:                 }
1:                 return _connection;
1:         }
1:         public static void ReturnConnection(Connection c) {
1:                 synchronized(_lock) {
1:                         _inUse = false;
1:                         _lock.notifyAll();
1:                 }
1:         }
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.simpleThread
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.DriverManager;
0: import org.apache.derby.tools.ij;
1: 
0: /*
0: 	This is from a bug found by a beta customer.
0:  */
0: public class simpleThread implements Runnable {
1: 
0:         private static Connection _connection = null;
0:         private static boolean _inUse = false;
0:         private static Object _lock = new Object();
1: 
0:         private long _wait = 0;
0:         private long _myCount = 0;
0:         private static int _count = 0;
0:         private synchronized static int getCount() { return(_count++); }
0:         private String _query;
1: 
0:         public simpleThread( String query, long waitTime) {
0:                 _wait = waitTime;
0:                 _myCount = getCount();
0:                 _query = query;
0:                 new Thread(this).start();
0:         }
1: 
0:         public void run() {
0: 				int rows = 0;
0: 				boolean caught = false;
0:                 try {
0:                         Thread.currentThread().sleep(_wait);
0:                         Connection conn = GetConnection();
0:                         Statement stmt = conn.createStatement();
0:                         String query = _query;
0:                         ResultSet rs = stmt.executeQuery( query );
0:                         ResultSetMetaData rsmd = rs.getMetaData();
0:                         //int cols = rsmd.getColumnCount();
0:                         while(rs.next()) {
0: 							rows++;
0:                                 //System.out.print(_myCount + ":");
0:                                 //for( int x=0;x<cols;x++) {
0:                                  //       String s = rs.getString(x+1);
0:                                   //      if( x > 0) System.out.print(",");
0:                                    //     System.out.print(s);
0:                                 //}
0:                                 //System.out.println();
0:                         }
0:                         stmt.close();
0:                         ReturnConnection(conn);
0:                 } catch (Exception ex) {
0: 					// we expect some threads to get exceptions
0: 					caught = true;
0:                 }
0: 				if (rows == 3 || caught)
0: 				{
0: 					//System.out.println("This thread's okay!");
0: 			    }
0: 				else
0: 				{
0: 					System.out.println("FAIL: thread "+_myCount+" only got "+rows+" rows and caught was "+caught);
0: 		        }
0:         }
1: 
1: 
0:         public simpleThread(String argv[]) throws Exception {
1:             
0: 			ij.getPropertyArg(argv);
0: 			_connection = ij.startJBMS();
1: 
0: 			Connection conn = GetConnection();
1: 
0:             Statement stmt = conn.createStatement();
1: 
0:             stmt.execute("create table people(name varchar(255), address varchar(255), phone varchar(64))");
0:             stmt.execute("insert into people VALUES ('mike', 'mikes address', '123-456-7890')");
0:             stmt.execute("insert into people VALUES ('adam', 'adams address', '123-456-1234')");
0:             stmt.execute("insert into people VALUES ('steve', 'steves address', '123-456-4321')");
0:             stmt.close();
1: 
0:             ReturnConnection(conn);
1: 
0:             String query = "SELECT * from people ORDER by name";
1: 
0:             try {
0:                 String[] retval = new String[4];
0:                 new simpleThread(query,0);
0:                 new simpleThread(query,10000);
0:                 new simpleThread(query,10100);
0:                 new simpleThread(query,20000);
0:             } catch (Exception ex) {
0:                 System.err.println(ex.toString() );
0:             }
0:         }
1: 
0:         public static Connection GetConnection() {
0:                 synchronized(_lock) {
0:                         _inUse = true;
0:                 }
0:                 return _connection;
0:         }
0:         public static void ReturnConnection(Connection c) {
0:                 synchronized(_lock) {
0:                         _inUse = false;
0:                         _lock.notifyAll();
0:                 }
0:         }
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.simpleThread
0: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: public class simpleThread implements Runnable {
============================================================================