1:33776ff: /*
4:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.FloatingPoint
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:70f7692: */
1:33776ff: package org.apache.derby.client.am;
1:33776ff: 
2:70f7692: /**
1:70f7692:  * Converters from floating point bytes to Java <code>float</code>, <code>double</code>, or
1:70f7692:  * <code>java.math.BigDecimal</code>.
1:70f7692:  */
1:70f7692: public class FloatingPoint {
1:70f7692:     // Hide the default constructor, this is a static class.
1:70f7692:     private FloatingPoint() {
2:70f7692:     }
1:33776ff: 
1:70f7692:     /**
1:70f7692:      * Supported Unix Big Endian IEEE 754 floating point representation.
1:70f7692:      */
1:70f7692:     public final static int IEEE_754_FLOATING_POINT = 0x48;
1:33776ff: 
1:70f7692:     //--------------------------private helper methods----------------------------
1:33776ff: 
1:70f7692:     /**
1:70f7692:      * Convert the byte array to an int.
1:70f7692:      */
1:70f7692:     private static final int convertFromByteToInt(byte[] buffer, int offset) {
1:70f7692:         return (buffer[offset] << 24) |
1:70f7692:                 ((buffer[offset + 1] & 0xFF) << 16) |
1:70f7692:                 ((buffer[offset + 2] & 0xFF) << 8) |
1:70f7692:                 (buffer[offset + 3] & 0xFF);
1:70f7692:     }
1:33776ff: 
1:70f7692:     /**
1:70f7692:      * Convert the byte array to a long.
1:70f7692:      */
1:70f7692:     private static final long convertFromByteToLong(byte[] buffer, int offset) {
1:70f7692:         return ((buffer[offset] & 0xFFL) << 56) |
1:70f7692:                 ((buffer[offset + 1] & 0xFFL) << 48) |
1:70f7692:                 ((buffer[offset + 2] & 0xFFL) << 40) |
1:70f7692:                 ((buffer[offset + 3] & 0xFFL) << 32) |
1:70f7692:                 ((buffer[offset + 4] & 0xFFL) << 24) |
1:70f7692:                 ((buffer[offset + 5] & 0xFFL) << 16) |
1:70f7692:                 ((buffer[offset + 6] & 0xFFL) << 8) |
1:70f7692:                 (buffer[offset + 7] & 0xFFL);
1:70f7692:     }
1:33776ff: 
1:33776ff: 
2:70f7692:     //--------------entry points for runtime representation-----------------------
1:33776ff: 
1:70f7692:     /**
1:dbed020:      * <p>
1:70f7692:      * Build a Java float from a 4-byte floating point representation.
1:dbed020:      * </p>
1:dbed020:      *
1:dbed020:      * <p>
1:dbed020:      * This includes DERBY types:
1:dbed020:      * </p>
1:dbed020:      *
1:dbed020:      * <ul> <li> REAL <li> FLOAT(1&lt;=n&lt;=24) </ul>
1:70f7692:      *
1:70f7692:      * @throws IllegalArgumentException if the specified representation is not recognized.
1:70f7692:      */
1:0326967:     static float getFloat(byte[] buffer, int offset) {
1:70f7692:         return Float.intBitsToFloat(convertFromByteToInt(buffer, offset));
1:70f7692:     }
1:33776ff: 
1:70f7692:     /**
1:70f7692:      * Build a Java double from an 8-byte floating point representation.
2:70f7692:      * <p/>
1:70f7692:      * <p/>
1:70f7692:      * This includes DERBY types: <ul> <li> FLOAT <li> DOUBLE [PRECISION] </ul>
1:70f7692:      *
1:70f7692:      * @throws IllegalArgumentException if the specified representation is not recognized.
1:70f7692:      */
1:0326967:     static double getDouble(byte[] buffer, int offset) {
1:70f7692:         return Double.longBitsToDouble(convertFromByteToLong(buffer, offset));
1:70f7692:     }
1:33776ff: 
1:70f7692: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * </p>
1:      *
1:      * <p>
1:      * This includes DERBY types:
1:      * </p>
1:      *
1:      * <ul> <li> REAL <li> FLOAT(1&lt;=n&lt;=24) </ul>
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1:     static float getFloat(byte[] buffer, int offset) {
/////////////////////////////////////////////////////////////////////////
1:     static double getDouble(byte[] buffer, int offset) {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f6e1e6f
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1:  * Converters from floating point bytes to Java <code>float</code>, <code>double</code>, or
1:  * <code>java.math.BigDecimal</code>.
1: public class FloatingPoint {
1:     // Hide the default constructor, this is a static class.
1:     private FloatingPoint() {
1:     }
1:     /**
1:      * Supported Unix Big Endian IEEE 754 floating point representation.
1:      */
1:     public final static int IEEE_754_FLOATING_POINT = 0x48;
1:     //--------------------------private helper methods----------------------------
1:     /**
1:      * Convert the byte array to an int.
1:      */
1:     private static final int convertFromByteToInt(byte[] buffer, int offset) {
1:         return (buffer[offset] << 24) |
1:                 ((buffer[offset + 1] & 0xFF) << 16) |
1:                 ((buffer[offset + 2] & 0xFF) << 8) |
1:                 (buffer[offset + 3] & 0xFF);
1:     }
1:     /**
1:      * Convert the byte array to a long.
1:      */
1:     private static final long convertFromByteToLong(byte[] buffer, int offset) {
1:         return ((buffer[offset] & 0xFFL) << 56) |
1:                 ((buffer[offset + 1] & 0xFFL) << 48) |
1:                 ((buffer[offset + 2] & 0xFFL) << 40) |
1:                 ((buffer[offset + 3] & 0xFFL) << 32) |
1:                 ((buffer[offset + 4] & 0xFFL) << 24) |
1:                 ((buffer[offset + 5] & 0xFFL) << 16) |
1:                 ((buffer[offset + 6] & 0xFFL) << 8) |
1:                 (buffer[offset + 7] & 0xFFL);
1:     }
1:     //--------------entry points for runtime representation-----------------------
1:     /**
1:      * Build a Java float from a 4-byte floating point representation.
1:      * <p/>
0:      * This includes DERBY types: <ul> <li> REAL <li> FLOAT(1<=n<=24) </ul>
1:      *
1:      * @throws IllegalArgumentException if the specified representation is not recognized.
1:      */
0:     public static final float getFloat(byte[] buffer, int offset) {
1:         return Float.intBitsToFloat(convertFromByteToInt(buffer, offset));
1:     }
1:     /**
1:      * Build a Java double from an 8-byte floating point representation.
1:      * <p/>
1:      * <p/>
1:      * This includes DERBY types: <ul> <li> FLOAT <li> DOUBLE [PRECISION] </ul>
1:      *
1:      * @throws IllegalArgumentException if the specified representation is not recognized.
1:      */
0:     public static final double getDouble(byte[] buffer, int offset) {
1:         return Double.longBitsToDouble(convertFromByteToLong(buffer, offset));
1:     }
1:     //--------------entry points for runtime representation-----------------------
1:     /**
0:      * Write a Java <code>float</code> to a 4-byte floating point representation.
1:      */
0:     public static final void floatToIeee754Bytes(byte[] buffer, int offset, float f) {
0:         int intBits = Float.floatToIntBits(f);
0:         buffer[offset] = (byte) ((intBits >>> 24) & 0xFF);
0:         buffer[offset + 1] = (byte) ((intBits >>> 16) & 0xFF);
0:         buffer[offset + 2] = (byte) ((intBits >>> 8) & 0xFF);
0:         buffer[offset + 3] = (byte) (intBits & 0xFF);
1:     }
1:     /**
0:      * Write a Java <code>double</code> to an 8-byte double precision floating point representation.
1:      */
0:     public static final void doubleToIeee754Bytes(byte[] buffer, int offset, double d) {
0:         long longBits = Double.doubleToLongBits(d);
0:         buffer[offset] = (byte) ((longBits >>> 56) & 0xFF);
0:         buffer[offset + 1] = (byte) ((longBits >>> 48) & 0xFF);
0:         buffer[offset + 2] = (byte) ((longBits >>> 40) & 0xFF);
0:         buffer[offset + 3] = (byte) ((longBits >>> 32) & 0xFF);
0:         buffer[offset + 4] = (byte) ((longBits >>> 24) & 0xFF);
0:         buffer[offset + 5] = (byte) ((longBits >>> 16) & 0xFF);
0:         buffer[offset + 6] = (byte) ((longBits >>> 8) & 0xFF);
0:         buffer[offset + 7] = (byte) (longBits & 0xFF);
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.FloatingPoint
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0: */
1: package org.apache.derby.client.am;
1: 
0: /**
0:  * Converters from floating point bytes to Java <code>float</code>, <code>double</code>,
0:  * or <code>java.math.BigDecimal</code>.
0:  */
0: public class FloatingPoint
0: {
0:   // Hide the default constructor, this is a static class.
0:   private FloatingPoint () {}
1: 
0:   /**
0:    * Supported Unix Big Endian IEEE 754 floating point representation.
0:    */
0:   public final static int IEEE_754_FLOATING_POINT = 0x48;
1: 
0:   //--------------------------private helper methods----------------------------
1: 
0:   /**
0:    * Convert the byte array to an int.
0:    */
0:   private static final int convertFromByteToInt(byte[] buffer, int offset)
0:   {
0:     return (  buffer[offset]           << 24 ) |
0:            ( (buffer[offset+1] & 0xFF) << 16 ) |
0:            ( (buffer[offset+2] & 0xFF) << 8  ) |
0:            (  buffer[offset+3] & 0xFF );
0:   }
1: 
0:   /**
0:    * Convert the byte array to a long.
0:    */
0:   private static final long convertFromByteToLong(byte[] buffer, int offset)
0:   {
0:     return ( (buffer[offset]   & 0xFFL) << 56 ) |
0:            ( (buffer[offset+1] & 0xFFL) << 48 ) |
0:            ( (buffer[offset+2] & 0xFFL) << 40 ) |
0:            ( (buffer[offset+3] & 0xFFL) << 32 ) |
0:            ( (buffer[offset+4] & 0xFFL) << 24 ) |
0:            ( (buffer[offset+5] & 0xFFL) << 16 ) |
0:            ( (buffer[offset+6] & 0xFFL) << 8  ) |
0:            (  buffer[offset+7] & 0xFFL );
0:   }
1: 
1: 
0:   //--------------entry points for runtime representation-----------------------
1: 
0:   /**
0:    * Build a Java float from a 4-byte floating point representation.
0:    * <p>
0:    * This includes DERBY types:
0:    * <ul>
0:    * <li> REAL
0:    * <li> FLOAT(1<=n<=24)
0:    * </ul>
0:    *
0:    * @exception IllegalArgumentException if the specified representation is not recognized.
0:    */
0:   public static final float getFloat (byte[] buffer, int offset)
0:   {
0:     return Float.intBitsToFloat (convertFromByteToInt (buffer, offset));
0:   }
1: 
0:   /**
0:    * Build a Java double from an 8-byte floating point representation.
0:    * <p>
0:    * <p>
0:    * This includes DERBY types:
0:    * <ul>
0:    * <li> FLOAT
0:    * <li> DOUBLE [PRECISION]
0:    * </ul>
0:    *
0:    * @exception IllegalArgumentException if the specified representation is not recognized.
0:    */
0:   public static final double getDouble (byte[] buffer, int offset)
0:   {
0:     return Double.longBitsToDouble (convertFromByteToLong (buffer, offset));
0:   }
1: 
0:   //--------------entry points for runtime representation-----------------------
1: 
0:   /**
0:    * Write a Java <code>float</code> to a 4-byte floating point representation.
0:    */
0:   public static final void floatToIeee754Bytes (byte[] buffer, int offset, float f)
0:   {
0:     int intBits = Float.floatToIntBits (f);
0:     buffer[offset]   = (byte) ((intBits >>> 24) & 0xFF);
0:     buffer[offset+1] = (byte) ((intBits >>> 16) & 0xFF);
0:     buffer[offset+2] = (byte) ((intBits >>>  8) & 0xFF);
0:     buffer[offset+3] = (byte) ( intBits        & 0xFF);
0:   }
1: 
0:   /**
0:    * Write a Java <code>double</code> to an 8-byte double precision
0:    * floating point representation.
0:   */
0:   public static final void doubleToIeee754Bytes (byte[] buffer, int offset, double d)
0:   {
0:     long longBits = Double.doubleToLongBits (d);
0:     buffer[offset]   = (byte) ((longBits >>> 56) & 0xFF);
0:     buffer[offset+1] = (byte) ((longBits >>> 48) & 0xFF);
0:     buffer[offset+2] = (byte) ((longBits >>> 40) & 0xFF);
0:     buffer[offset+3] = (byte) ((longBits >>> 32) & 0xFF);
0:     buffer[offset+4] = (byte) ((longBits >>> 24) & 0xFF);
0:     buffer[offset+5] = (byte) ((longBits >>> 16) & 0xFF);
0:     buffer[offset+6] = (byte) ((longBits >>>  8) & 0xFF);
0:     buffer[offset+7] = (byte) ( longBits        & 0xFF);
0:   }
0: }
============================================================================