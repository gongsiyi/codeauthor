1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.LastIndexKeyResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
20:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:b31849d: import org.apache.derby.iapi.sql.Activation;
1:959fef2: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:b31849d: import org.apache.derby.iapi.sql.execute.ExecRow;
1:b31849d: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:b31849d: import org.apache.derby.iapi.store.access.Qualifier;
1:b31849d: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Return the last key in an index.  Used to perform
1:eac0369:  * max().
2:eac0369:  *
1:eac0369:  */
1:97105d6: class LastIndexKeyResultSet extends ScanResultSet
11:eac0369: {
1:eac0369: 	// set in constructor and not altered during
1:eac0369: 	// life of object.
1:eac0369: 	protected long conglomId;
1:eac0369: 	protected int startSearchOperator;
1:eac0369: 	protected int stopSearchOperator;
1:eac0369: 	protected Qualifier[][] qualifiers;
1:c7248d5: 	public String userSuppliedOptimizerOverrides;
1:eac0369: 	protected boolean runTimeStatisticsOn;
1:eac0369: 
1:eac0369: 	// Run time statistics
1:eac0369: 	public String stopPositionString;
1:eac0369: 	public boolean coarserLock;
1:eac0369: 	public boolean returnedRow;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * A last index key result set returns the last row from
1:eac0369: 	 * the index in question.  It is used as an ajunct to max().
1:eac0369: 	 *
1:eac0369: 	 * @param activation 		the activation for this result set,
1:eac0369: 	 *		which provides the context for the row allocation operation.
1:eac0369: 	 * @param resultSetNumber	The resultSetNumber for the ResultSet
1:959fef2:      * @param resultRowTemplate The saved item for result row template
1:eac0369: 	 * @param conglomId 		the conglomerate of the table to be scanned.
1:eac0369: 	 * @param tableName			The full name of the table
1:c7248d5: 	 * @param userSuppliedOptimizerOverrides		Overrides specified by the user on the sql
1:eac0369: 	 * @param indexName			The name of the index, if one used to access table.
1:eac0369: 	 * @param colRefItem		An saved item for a bitSet of columns that
1:eac0369: 	 *							are referenced in the underlying table.  -1 if
1:eac0369: 	 *							no item.
1:eac0369: 	 * @param lockMode			The lock granularity to use (see
1:eac0369: 	 *							TransactionController in access)
1:eac0369: 	 * @param tableLocked		Whether or not the table is marked as using table locking
1:eac0369: 	 *							(in sys.systables)
1:eac0369: 	 * @param isolationLevel	Isolation level (specified or not) to use on scans
1:eac0369: 	 * @param optimizerEstimatedRowCount	Estimated total # of rows by
1:eac0369: 	 * 										optimizer
1:eac0369: 	 * @param optimizerEstimatedCost		Estimated total cost by optimizer
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown when unable to create the
1:eac0369: 	 * 				result set
1:eac0369: 	 */
1:eac0369: 	public LastIndexKeyResultSet
1:eac0369: 	(
1:eac0369: 		Activation activation, 
1:eac0369: 		int	resultSetNumber,
1:959fef2: 		int resultRowTemplate,
1:eac0369: 		long conglomId, 
1:eac0369: 		String tableName,
1:c7248d5: 		String userSuppliedOptimizerOverrides,
1:eac0369: 		String indexName,
1:eac0369: 		int colRefItem,
1:eac0369: 		int lockMode,
1:eac0369: 		boolean tableLocked,
1:eac0369: 		int isolationLevel,
1:eac0369: 		double optimizerEstimatedRowCount,
1:f77f36d: 		double optimizerEstimatedCost
1:eac0369: 	) throws StandardException
1:eac0369: 	{
1:eac0369: 		super(activation,
1:eac0369: 				resultSetNumber,
1:959fef2: 				resultRowTemplate,
1:97105d6: 				lockMode, tableLocked, isolationLevel,
1:2ec36d1:                 colRefItem,
1:eac0369: 				optimizerEstimatedRowCount,
1:eac0369: 				optimizerEstimatedCost);
1:eac0369: 
1:eac0369: 		this.conglomId = conglomId;
1:eac0369: 
2:eac0369: 		if (SanityManager.DEBUG) 
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT( activation!=null, "this scan must get activation context");
11:eac0369: 		}
1:eac0369: 
1:eac0369: 		this.tableName = tableName;
1:c7248d5: 		this.userSuppliedOptimizerOverrides = userSuppliedOptimizerOverrides;
1:eac0369: 		this.indexName = indexName;
1:eac0369: 
1:eac0369: 		runTimeStatisticsOn = getLanguageConnectionContext().getRunTimeStatisticsMode();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If scan tracing is turned on, print information about this
1:eac0369: 		** LastIndexKeyResultSet when it is first opened.  
1:eac0369: 		*/
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (SanityManager.DEBUG_ON("ScanTrace"))
1:eac0369: 			{
1:eac0369: 				//traceScanParameters();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		activation.informOfRowCount(this, 1);
1:7008b63: 		
1:7008b63: 		recordConstructorTime();
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// ResultSet interface (leftover from NoPutResultSet)
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:97105d6: 	 * Can we get instantaneous locks when getting share row
1:97105d6: 	 * locks at READ COMMITTED.
1:97105d6: 	 */
1:97105d6: 	boolean canGetInstantaneousLocks() {
1:97105d6: 		return true;
1:97105d6: 	}
1:97105d6: 
1:97105d6: 	/**
1:eac0369: 	* open a scan on the table. scan parameters are evaluated
1:eac0369: 	* at each open, so there is probably some way of altering
1:eac0369: 	* their values...
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure to open
1:eac0369: 	*/
1:eac0369: 	public void	openCore() throws StandardException
1:eac0369: 	{
1:eac0369: 		ExecRow candidateCopy = candidate.getClone();
1:eac0369: 
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 		    SanityManager.ASSERT(!isOpen, "LastIndexKeyResultSet already open");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		isOpen = true;
1:eac0369: 		TransactionController tc = activation.getTransactionController();
1:eac0369: 
1:97105d6: 		initIsolationLevel();
1:97105d6: 
1:eac0369: 		/*
1:eac0369: 		** Grab the last row.  Note that if there are deletes
1:eac0369: 		** left lying around and no real row to return, then
1:eac0369: 		** the row array gets set even though the scan doesn't
1:eac0369: 		** return a row, so be careful to handle this correctly.
1:eac0369: 		*/
1:eac0369: 		if (tc.fetchMaxOnBtree(
1:eac0369: 					conglomId,  // conglomerate to open
1:eac0369: 					0, 			// open mode
1:eac0369: 					lockMode,
1:eac0369: 					isolationLevel,
1:eac0369: 					accessedCols,
1:eac0369: 					candidateCopy.getRowArray()))
1:eac0369: 		{
1:4e784bb: 			setCurrentRow(getCompactRow(candidateCopy, accessedCols, true));
1:eac0369: 		}
2:eac0369: 		else
1:eac0369: 		{
1:eac0369: 		    clearCurrentRow();
1:eac0369: 		}
1:eac0369: 			
1:eac0369: 		numOpens++;
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the next row (if any) from the scan (if open).
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure to get next row
1:eac0369: 	 */
1:eac0369: 	public ExecRow getNextRowCore() throws StandardException
1:eac0369: 	{
1:2a4654b: 		if( isXplainOnlyMode() )
1:2a4654b: 			return null;
1:2a4654b: 
1:eac0369: 		if (returnedRow || !isOpen)
1:eac0369: 		{
1:eac0369: 		    clearCurrentRow();
1:eac0369: 		} 
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			returnedRow = true;
1:eac0369: 		}
1:eac0369: 		return currentRow;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * If the result set has been opened,
1:eac0369: 	 * close the open scan.
1:eac0369: 	 * @exception StandardException thrown on failure to close
1:eac0369: 	 */
1:eac0369: 	public void	close() throws StandardException
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (isOpen)
1:eac0369: 	    {
1:eac0369: 			isOpen = false;
1:9f3bf4b: 			returnedRow = false;
1:eac0369: 		    clearCurrentRow();
1:eac0369: 
1:eac0369: 			super.close();
1:eac0369: 	    }
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:eac0369: 				SanityManager.DEBUG("CloseRepeatInfo","Close of LastIndexKeyResultSet repeated");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		closeTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the total amount of time spent in this ResultSet
1:eac0369: 	 *
1:eac0369: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:eac0369: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:eac0369: 	 *
1:eac0369: 	 * @return long		The total amount of time spent (in milliseconds).
1:eac0369: 	 */
1:eac0369: 	public long getTimeSpent(int type)
1:eac0369: 	{
1:eac0369: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1:eac0369: 
1:eac0369: 		/* RESOLVE - subtract out store time later, when available */
1:eac0369: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1:eac0369: 		{
1:eac0369: 			return	totTime;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return totTime;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This result set has its row from the last fetch done. 
1:eac0369: 	 * If the cursor is closed, a null is returned.
1:eac0369: 	 *
1:12cc1f1: 	 * @see org.apache.derby.iapi.sql.execute.CursorResultSet
1:eac0369: 	 *
1:eac0369: 	 * @return the last row returned;
1:eac0369: 	 * @exception StandardException thrown on failure.
1:eac0369: 	 */
1:eac0369: 	public ExecRow getCurrentRow() throws StandardException 
1:eac0369: 	{
1:eac0369: 		return currentRow;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Print the parameters that constructed this result set to the
1:eac0369: 	 * trace stream.
1:eac0369: 	 */
1:eac0369: /*
1:eac0369: 	private final void traceScanParameters()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			HeaderPrintWriter traceStream = SanityManager.GET_DEBUG_STREAM();
1:eac0369: 
1:eac0369: 			traceStream.println("");
1:eac0369: 			traceStream.println("LastIndexKeyResultSet number " +
1:eac0369: 								resultSetNumber +
1:eac0369: 								" parameters:");
1:eac0369: 
1:eac0369: 			traceStream.println("");
1:eac0369: 			traceStream.println("\tTable name: " + tableName);
1:eac0369: 			if (indexName != null)
1:eac0369: 			{
1:eac0369: 				traceStream.println("\tIndex name: " + indexName);
1:eac0369: 			}
1:eac0369: 			traceStream.println("");
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: */
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 		if( isXplainOnlyMode() )
1: 			return null;
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b197ffa
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:959fef2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
/////////////////////////////////////////////////////////////////////////
1:      * @param resultRowTemplate The saved item for result row template
/////////////////////////////////////////////////////////////////////////
1: 		int resultRowTemplate,
/////////////////////////////////////////////////////////////////////////
1: 				resultRowTemplate,
/////////////////////////////////////////////////////////////////////////
commit:12cc1f1
/////////////////////////////////////////////////////////////////////////
1: 	 * @see org.apache.derby.iapi.sql.execute.CursorResultSet
commit:a280beb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:109cb26
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 				resultRowAllocator,
/////////////////////////////////////////////////////////////////////////
commit:97105d6
/////////////////////////////////////////////////////////////////////////
1: class LastIndexKeyResultSet extends ScanResultSet
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				lockMode, tableLocked, isolationLevel,
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	 * Can we get instantaneous locks when getting share row
1: 	 * locks at READ COMMITTED.
1: 	 */
1: 	boolean canGetInstantaneousLocks() {
1: 		return true;
1: 	}
1: 
1: 	/**
/////////////////////////////////////////////////////////////////////////
1: 		initIsolationLevel();
1: 
commit:9f3bf4b
/////////////////////////////////////////////////////////////////////////
1: 			returnedRow = false;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2ec36d1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 colRefItem,
/////////////////////////////////////////////////////////////////////////
commit:4e784bb
/////////////////////////////////////////////////////////////////////////
1: 			setCurrentRow(getCompactRow(candidateCopy, accessedCols, true));
commit:49f3f24
/////////////////////////////////////////////////////////////////////////
0: 			  getCompactRow(candidateCopy, accessedCols, true);
commit:7008b63
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		recordConstructorTime();
commit:b31849d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.store.access.TransactionController;
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
0: class LastIndexKeyResultSet extends NoPutResultSetImpl
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		double optimizerEstimatedCost
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.LastIndexKeyResultSet
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.GenericScanController;
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
0: import java.util.Properties;
1: 
1: /**
1:  * Return the last key in an index.  Used to perform
1:  * max().
1:  *
0:  * @author jamie
1:  */
0: public class LastIndexKeyResultSet extends NoPutResultSetImpl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	protected	ExecRow		candidate;
1: 
1: 	// set in constructor and not altered during
1: 	// life of object.
1: 	protected long conglomId;
0: 	protected GeneratedMethod resultRowAllocator;
0: 	protected GeneratedMethod startKeyGetter;
1: 	protected int startSearchOperator;
0: 	protected GeneratedMethod stopKeyGetter;
1: 	protected int stopSearchOperator;
1: 	protected Qualifier[][] qualifiers;
0: 	protected GeneratedMethod closeCleanup;
0: 	public String tableName;
0: 	public String indexName;
1: 	protected boolean runTimeStatisticsOn;
0: 	protected FormatableBitSet accessedCols;
1: 
0: 	public int isolationLevel;
0: 	public int lockMode;
1: 
1: 	// Run time statistics
1: 	public String stopPositionString;
1: 	public boolean coarserLock;
1: 	public boolean returnedRow;
1: 
1: 	/**
1: 	 * A last index key result set returns the last row from
1: 	 * the index in question.  It is used as an ajunct to max().
1: 	 *
1: 	 * @param activation 		the activation for this result set,
1: 	 *		which provides the context for the row allocation operation.
1: 	 * @param resultSetNumber	The resultSetNumber for the ResultSet
0: 	 * @param resultRowAllocator a reference to a method in the activation
0: 	 * 						that creates a holder for the result row of the scan.  May
0: 	 *						be a partial row.  <verbatim>
0: 	 *		ExecRow rowAllocator() throws StandardException; </verbatim>
1: 	 * @param conglomId 		the conglomerate of the table to be scanned.
1: 	 * @param tableName			The full name of the table
1: 	 * @param indexName			The name of the index, if one used to access table.
1: 	 * @param colRefItem		An saved item for a bitSet of columns that
1: 	 *							are referenced in the underlying table.  -1 if
1: 	 *							no item.
1: 	 * @param lockMode			The lock granularity to use (see
1: 	 *							TransactionController in access)
1: 	 * @param tableLocked		Whether or not the table is marked as using table locking
1: 	 *							(in sys.systables)
1: 	 * @param isolationLevel	Isolation level (specified or not) to use on scans
1: 	 * @param optimizerEstimatedRowCount	Estimated total # of rows by
1: 	 * 										optimizer
1: 	 * @param optimizerEstimatedCost		Estimated total cost by optimizer
0: 	 * @param closeCleanup		any cleanup the activation needs to do on close.
1: 	 *
1: 	 * @exception StandardException thrown when unable to create the
1: 	 * 				result set
1: 	 */
1: 	public LastIndexKeyResultSet
1: 	(
1: 		Activation activation, 
1: 		int	resultSetNumber,
0: 		GeneratedMethod resultRowAllocator, 
1: 		long conglomId, 
1: 		String tableName,
1: 		String indexName,
1: 		int colRefItem,
1: 		int lockMode,
1: 		boolean tableLocked,
1: 		int isolationLevel,
1: 		double optimizerEstimatedRowCount,
0: 		double optimizerEstimatedCost,
0: 		GeneratedMethod closeCleanup
1: 	) throws StandardException
1: 	{
1: 		super(activation,
1: 				resultSetNumber,
1: 				optimizerEstimatedRowCount,
1: 				optimizerEstimatedCost);
1: 
1: 		this.conglomId = conglomId;
1: 
1: 		if (SanityManager.DEBUG) 
1: 		{
1: 			SanityManager.ASSERT( activation!=null, "this scan must get activation context");
0: 			SanityManager.ASSERT( resultRowAllocator!= null, "this scan must get row allocator");
1: 		}
1: 
0: 		this.resultRowAllocator = resultRowAllocator;
1: 		this.tableName = tableName;
1: 		this.indexName = indexName;
0: 		this.lockMode = lockMode;
0: 		if (colRefItem != -1)
1: 		{
0: 			this.accessedCols = (FormatableBitSet)(activation.getPreparedStatement().
0: 						getSavedObject(colRefItem));
1: 		}
0: 		/* Isolation level - translate from language to store */
0: 		// If not specified, get current isolation level
0: 		if (isolationLevel == ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL)
1: 		{
0: 			isolationLevel = lcc.getCurrentIsolationLevel();
1: 		}
1: 
0:         if (isolationLevel == ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL)
1:         {
0:             this.isolationLevel = TransactionController.ISOLATION_SERIALIZABLE;
1:         }
1:         else
1:         {
0:             /* NOTE: always do row locking on READ COMMITTED/UNCOMMITTED 
0:              *       and repeatable read scans unless the table is marked as 
0:              *       table locked (in sys.systables).
1:              *
0:              *		 We always get instantaneous locks as we will complete
0:              *		 the scan before returning any rows and we will fully
0:              *		 requalify the row if we need to go to the heap on a next().
1:              */
1: 
0:             if (! tableLocked)
1:             {
0:                 this.lockMode = TransactionController.MODE_RECORD;
1:             }
1: 
0:             if (isolationLevel == 
0:                     ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL)
1:             {
0:                 this.isolationLevel = 
0:                     TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK;
1:             }
0:             else if (isolationLevel == 
0:                         ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL)
1:             {
0:                 this.isolationLevel = 
0:                     TransactionController.ISOLATION_READ_UNCOMMITTED;
1:             }
0:             else if (isolationLevel == 
0:                         ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL)
1:             {
0:                 this.isolationLevel = 
0:                     TransactionController.ISOLATION_REPEATABLE_READ;
1:             }
1:         }
1: 
1:         if (SanityManager.DEBUG)
1:         {
0:             SanityManager.ASSERT(
0:                 ((isolationLevel == 
0:                       ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL)   ||
0:                  (isolationLevel == 
0:                       ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL) ||
0:                  (isolationLevel == 
0:                       ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL)  ||
0:                  (isolationLevel == 
0:                       ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL)),
1: 
0:                 "Invalid isolation level - " + isolationLevel);
1:         }
1: 
0: 		this.closeCleanup = closeCleanup;
1: 
1: 		runTimeStatisticsOn = getLanguageConnectionContext().getRunTimeStatisticsMode();
1: 
0: 		/* Only call row allocators once */
0: 		candidate = (ExecRow) resultRowAllocator.invoke(activation);
0: 		constructorTime += getElapsedMillis(beginTime);
1: 
1: 		/*
1: 		** If scan tracing is turned on, print information about this
1: 		** LastIndexKeyResultSet when it is first opened.  
1: 		*/
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (SanityManager.DEBUG_ON("ScanTrace"))
1: 			{
1: 				//traceScanParameters();
1: 			}
1: 		}
1: 
1: 		activation.informOfRowCount(this, 1);
1:     }
1: 
1: 	/////////////////////////////////////////////////////
1: 	// 
1: 	// ResultSet interface (leftover from NoPutResultSet)
1: 	// 
1: 	/////////////////////////////////////////////////////
1: 
1: 	/**
1: 	* open a scan on the table. scan parameters are evaluated
1: 	* at each open, so there is probably some way of altering
1: 	* their values...
1: 	 *
1: 	 * @exception StandardException thrown on failure to open
1: 	*/
1: 	public void	openCore() throws StandardException
1: 	{
1: 		ExecRow candidateCopy = candidate.getClone();
1: 
1: 		beginTime = getCurrentTimeMillis();
1: 		if (SanityManager.DEBUG)
1: 		{
1: 		    SanityManager.ASSERT(!isOpen, "LastIndexKeyResultSet already open");
1: 		}
1: 
1: 		isOpen = true;
1: 		TransactionController tc = activation.getTransactionController();
1: 
1: 		/*
1: 		** Grab the last row.  Note that if there are deletes
1: 		** left lying around and no real row to return, then
1: 		** the row array gets set even though the scan doesn't
1: 		** return a row, so be careful to handle this correctly.
1: 		*/
1: 		if (tc.fetchMaxOnBtree(
1: 					conglomId,  // conglomerate to open
1: 					0, 			// open mode
1: 					lockMode,
1: 					isolationLevel,
1: 					accessedCols,
1: 					candidateCopy.getRowArray()))
1: 		{
0: 			currentRow =
0: 			  getCompactRow(candidateCopy, accessedCols, (FormatableBitSet) null, true);
0: 			setCurrentRow(currentRow);
1: 		}
1: 		else
1: 		{
0: 			currentRow = null;
1: 		    clearCurrentRow();
1: 		}
1: 			
1: 		numOpens++;
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/**
1: 	 * Return the next row (if any) from the scan (if open).
1: 	 *
1: 	 * @exception StandardException thrown on failure to get next row
1: 	 */
1: 	public ExecRow getNextRowCore() throws StandardException
1: 	{
1: 		if (returnedRow || !isOpen)
1: 		{
0: 			currentRow = null;
1: 		    clearCurrentRow();
1: 		} 
1: 		else
1: 		{
1: 			returnedRow = true;
1: 		}
1: 		return currentRow;
1: 	}
1: 
1: 	/**
1: 	 * If the result set has been opened,
1: 	 * close the open scan.
1: 	 * @exception StandardException thrown on failure to close
1: 	 */
1: 	public void	close() throws StandardException
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 		if (isOpen)
1: 	    {
1: 			isOpen = false;
0: 			currentRow = null;
1: 		    clearCurrentRow();
0: 			if (closeCleanup != null) 
1: 			{
0: 				closeCleanup.invoke(activation); // let activation tidy up
1: 			}
1: 
1: 			super.close();
1: 	    }
1: 		else
1: 		{
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				SanityManager.DEBUG("CloseRepeatInfo","Close of LastIndexKeyResultSet repeated");
1: 			}
1: 		}
1: 
1: 		closeTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/**
1: 	 * Return the total amount of time spent in this ResultSet
1: 	 *
1: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1: 	 *
1: 	 * @return long		The total amount of time spent (in milliseconds).
1: 	 */
1: 	public long getTimeSpent(int type)
1: 	{
1: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1: 
1: 		/* RESOLVE - subtract out store time later, when available */
1: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1: 		{
1: 			return	totTime;
1: 		}
1: 		else
1: 		{
1: 			return totTime;
1: 		}
1: 	}
1: 
1: 
1: 	/**
1: 	 * This result set has its row from the last fetch done. 
1: 	 * If the cursor is closed, a null is returned.
1: 	 *
0: 	 * @see CursorResultSet
1: 	 *
1: 	 * @return the last row returned;
1: 	 * @exception StandardException thrown on failure.
1: 	 */
1: 	public ExecRow getCurrentRow() throws StandardException 
1: 	{
1: 		return currentRow;
1: 	}
1: 
1: 	/**
1: 	 * Print the parameters that constructed this result set to the
1: 	 * trace stream.
1: 	 */
1: /*
1: 	private final void traceScanParameters()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			HeaderPrintWriter traceStream = SanityManager.GET_DEBUG_STREAM();
1: 
1: 			traceStream.println("");
1: 			traceStream.println("LastIndexKeyResultSet number " +
1: 								resultSetNumber +
1: 								" parameters:");
1: 
1: 			traceStream.println("");
1: 			traceStream.println("\tTable name: " + tableName);
1: 			if (indexName != null)
1: 			{
1: 				traceStream.println("\tIndex name: " + indexName);
1: 			}
1: 			traceStream.println("");
1: 		}
1: 	}
1: */
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:c7248d5
/////////////////////////////////////////////////////////////////////////
1: 	public String userSuppliedOptimizerOverrides;
/////////////////////////////////////////////////////////////////////////
1: 	 * @param userSuppliedOptimizerOverrides		Overrides specified by the user on the sql
/////////////////////////////////////////////////////////////////////////
1: 		String userSuppliedOptimizerOverrides,
/////////////////////////////////////////////////////////////////////////
1: 		this.userSuppliedOptimizerOverrides = userSuppliedOptimizerOverrides;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.GenericScanController;
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * Return the last key in an index.  Used to perform
0:  * max().
0:  *
0:  * @author jamie
0:  */
0: public class LastIndexKeyResultSet extends NoPutResultSetImpl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	protected	ExecRow		candidate;
0: 
0: 	// set in constructor and not altered during
0: 	// life of object.
0: 	protected long conglomId;
0: 	protected GeneratedMethod resultRowAllocator;
0: 	protected GeneratedMethod startKeyGetter;
0: 	protected int startSearchOperator;
0: 	protected GeneratedMethod stopKeyGetter;
0: 	protected int stopSearchOperator;
0: 	protected Qualifier[][] qualifiers;
0: 	protected GeneratedMethod closeCleanup;
0: 	public String tableName;
0: 	public String indexName;
0: 	protected boolean runTimeStatisticsOn;
0: 	protected FormatableBitSet accessedCols;
0: 
0: 	public int isolationLevel;
0: 	public int lockMode;
0: 
0: 	// Run time statistics
0: 	public String stopPositionString;
0: 	public boolean coarserLock;
0: 	public boolean returnedRow;
0: 
0: 	/**
0: 	 * A last index key result set returns the last row from
0: 	 * the index in question.  It is used as an ajunct to max().
0: 	 *
0: 	 * @param activation 		the activation for this result set,
0: 	 *		which provides the context for the row allocation operation.
0: 	 * @param resultSetNumber	The resultSetNumber for the ResultSet
0: 	 * @param resultRowAllocator a reference to a method in the activation
0: 	 * 						that creates a holder for the result row of the scan.  May
0: 	 *						be a partial row.  <verbatim>
0: 	 *		ExecRow rowAllocator() throws StandardException; </verbatim>
0: 	 * @param conglomId 		the conglomerate of the table to be scanned.
0: 	 * @param tableName			The full name of the table
0: 	 * @param indexName			The name of the index, if one used to access table.
0: 	 * @param colRefItem		An saved item for a bitSet of columns that
0: 	 *							are referenced in the underlying table.  -1 if
0: 	 *							no item.
0: 	 * @param lockMode			The lock granularity to use (see
0: 	 *							TransactionController in access)
0: 	 * @param tableLocked		Whether or not the table is marked as using table locking
0: 	 *							(in sys.systables)
0: 	 * @param isolationLevel	Isolation level (specified or not) to use on scans
0: 	 * @param optimizerEstimatedRowCount	Estimated total # of rows by
0: 	 * 										optimizer
0: 	 * @param optimizerEstimatedCost		Estimated total cost by optimizer
0: 	 * @param closeCleanup		any cleanup the activation needs to do on close.
0: 	 *
0: 	 * @exception StandardException thrown when unable to create the
0: 	 * 				result set
0: 	 */
0: 	public LastIndexKeyResultSet
0: 	(
0: 		Activation activation, 
0: 		int	resultSetNumber,
0: 		GeneratedMethod resultRowAllocator, 
0: 		long conglomId, 
0: 		String tableName,
0: 		String indexName,
0: 		int colRefItem,
0: 		int lockMode,
0: 		boolean tableLocked,
0: 		int isolationLevel,
0: 		double optimizerEstimatedRowCount,
0: 		double optimizerEstimatedCost,
0: 		GeneratedMethod closeCleanup
0: 	) throws StandardException
0: 	{
0: 		super(activation,
0: 				resultSetNumber,
0: 				optimizerEstimatedRowCount,
0: 				optimizerEstimatedCost);
0: 
0: 		this.conglomId = conglomId;
0: 
0: 		if (SanityManager.DEBUG) 
0: 		{
0: 			SanityManager.ASSERT( activation!=null, "this scan must get activation context");
0: 			SanityManager.ASSERT( resultRowAllocator!= null, "this scan must get row allocator");
0: 		}
0: 
0: 		this.resultRowAllocator = resultRowAllocator;
0: 		this.tableName = tableName;
0: 		this.indexName = indexName;
0: 		this.lockMode = lockMode;
0: 		if (colRefItem != -1)
0: 		{
0: 			this.accessedCols = (FormatableBitSet)(activation.getPreparedStatement().
0: 						getSavedObject(colRefItem));
0: 		}
0: 		/* Isolation level - translate from language to store */
0: 		// If not specified, get current isolation level
0: 		if (isolationLevel == ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL)
0: 		{
0: 			isolationLevel = lcc.getCurrentIsolationLevel();
0: 		}
0: 
0:         if (isolationLevel == ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL)
0:         {
0:             this.isolationLevel = TransactionController.ISOLATION_SERIALIZABLE;
0:         }
0:         else
0:         {
0:             /* NOTE: always do row locking on READ COMMITTED/UNCOMMITTED 
0:              *       and repeatable read scans unless the table is marked as 
0:              *       table locked (in sys.systables).
0:              *
0:              *		 We always get instantaneous locks as we will complete
0:              *		 the scan before returning any rows and we will fully
0:              *		 requalify the row if we need to go to the heap on a next().
0:              */
0: 
0:             if (! tableLocked)
0:             {
0:                 this.lockMode = TransactionController.MODE_RECORD;
0:             }
0: 
0:             if (isolationLevel == 
0:                     ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL)
0:             {
0:                 this.isolationLevel = 
0:                     TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK;
0:             }
0:             else if (isolationLevel == 
0:                         ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL)
0:             {
0:                 this.isolationLevel = 
0:                     TransactionController.ISOLATION_READ_UNCOMMITTED;
0:             }
0:             else if (isolationLevel == 
0:                         ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL)
0:             {
0:                 this.isolationLevel = 
0:                     TransactionController.ISOLATION_REPEATABLE_READ;
0:             }
0:         }
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             SanityManager.ASSERT(
0:                 ((isolationLevel == 
0:                       ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL)   ||
0:                  (isolationLevel == 
0:                       ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL) ||
0:                  (isolationLevel == 
0:                       ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL)  ||
0:                  (isolationLevel == 
0:                       ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL)),
0: 
0:                 "Invalid isolation level - " + isolationLevel);
0:         }
0: 
0: 		this.closeCleanup = closeCleanup;
0: 
0: 		runTimeStatisticsOn = getLanguageConnectionContext().getRunTimeStatisticsMode();
0: 
0: 		/* Only call row allocators once */
0: 		candidate = (ExecRow) resultRowAllocator.invoke(activation);
0: 		constructorTime += getElapsedMillis(beginTime);
0: 
0: 		/*
0: 		** If scan tracing is turned on, print information about this
0: 		** LastIndexKeyResultSet when it is first opened.  
0: 		*/
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (SanityManager.DEBUG_ON("ScanTrace"))
0: 			{
0: 				//traceScanParameters();
0: 			}
0: 		}
0: 
0: 		activation.informOfRowCount(this, 1);
0:     }
0: 
0: 	/////////////////////////////////////////////////////
0: 	// 
0: 	// ResultSet interface (leftover from NoPutResultSet)
0: 	// 
0: 	/////////////////////////////////////////////////////
0: 
0: 	/**
0: 	* open a scan on the table. scan parameters are evaluated
0: 	* at each open, so there is probably some way of altering
0: 	* their values...
0: 	 *
0: 	 * @exception StandardException thrown on failure to open
0: 	*/
0: 	public void	openCore() throws StandardException
0: 	{
0: 		ExecRow candidateCopy = candidate.getClone();
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 		if (SanityManager.DEBUG)
0: 		{
0: 		    SanityManager.ASSERT(!isOpen, "LastIndexKeyResultSet already open");
0: 		}
0: 
0: 		isOpen = true;
0: 		TransactionController tc = activation.getTransactionController();
0: 
0: 		/*
0: 		** Grab the last row.  Note that if there are deletes
0: 		** left lying around and no real row to return, then
0: 		** the row array gets set even though the scan doesn't
0: 		** return a row, so be careful to handle this correctly.
0: 		*/
0: 		if (tc.fetchMaxOnBtree(
0: 					conglomId,  // conglomerate to open
0: 					0, 			// open mode
0: 					lockMode,
0: 					isolationLevel,
0: 					accessedCols,
0: 					candidateCopy.getRowArray()))
0: 		{
0: 			currentRow =
0: 			  getCompactRow(candidateCopy, accessedCols, (FormatableBitSet) null, true);
0: 			setCurrentRow(currentRow);
0: 		}
0: 		else
0: 		{
0: 			currentRow = null;
0: 		    clearCurrentRow();
0: 		}
0: 			
0: 		numOpens++;
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0: 	 * Return the next row (if any) from the scan (if open).
0: 	 *
0: 	 * @exception StandardException thrown on failure to get next row
0: 	 */
0: 	public ExecRow getNextRowCore() throws StandardException
0: 	{
0: 		if (returnedRow || !isOpen)
0: 		{
0: 			currentRow = null;
0: 		    clearCurrentRow();
0: 		} 
0: 		else
0: 		{
0: 			returnedRow = true;
0: 		}
0: 		return currentRow;
0: 	}
0: 
0: 	/**
0: 	 * If the result set has been opened,
0: 	 * close the open scan.
0: 	 * @exception StandardException thrown on failure to close
0: 	 */
0: 	public void	close() throws StandardException
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 		if (isOpen)
0: 	    {
0: 			isOpen = false;
0: 			currentRow = null;
0: 		    clearCurrentRow();
0: 			if (closeCleanup != null) 
0: 			{
0: 				closeCleanup.invoke(activation); // let activation tidy up
0: 			}
0: 
0: 			super.close();
0: 	    }
0: 		else
0: 		{
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				SanityManager.DEBUG("CloseRepeatInfo","Close of LastIndexKeyResultSet repeated");
0: 			}
0: 		}
0: 
0: 		closeTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0: 	 * Return the total amount of time spent in this ResultSet
0: 	 *
0: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
0: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
0: 	 *
0: 	 * @return long		The total amount of time spent (in milliseconds).
0: 	 */
0: 	public long getTimeSpent(int type)
0: 	{
0: 		long totTime = constructorTime + openTime + nextTime + closeTime;
0: 
0: 		/* RESOLVE - subtract out store time later, when available */
0: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
0: 		{
0: 			return	totTime;
0: 		}
0: 		else
0: 		{
0: 			return totTime;
0: 		}
0: 	}
0: 
0: 
0: 	/**
0: 	 * This result set has its row from the last fetch done. 
0: 	 * If the cursor is closed, a null is returned.
0: 	 *
0: 	 * @see CursorResultSet
0: 	 *
0: 	 * @return the last row returned;
0: 	 * @exception StandardException thrown on failure.
0: 	 */
0: 	public ExecRow getCurrentRow() throws StandardException 
0: 	{
0: 		return currentRow;
0: 	}
0: 
0: 	/**
0: 	 * Print the parameters that constructed this result set to the
0: 	 * trace stream.
0: 	 */
0: /*
0: 	private final void traceScanParameters()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			HeaderPrintWriter traceStream = SanityManager.GET_DEBUG_STREAM();
0: 
0: 			traceStream.println("");
0: 			traceStream.println("LastIndexKeyResultSet number " +
0: 								resultSetNumber +
0: 								" parameters:");
0: 
0: 			traceStream.println("");
0: 			traceStream.println("\tTable name: " + tableName);
0: 			if (indexName != null)
0: 			{
0: 				traceStream.println("\tIndex name: " + indexName);
0: 			}
0: 			traceStream.println("");
0: 		}
0: 	}
0: */
0: 
0: }
============================================================================