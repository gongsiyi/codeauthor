1:33776ff: /*
18:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.ClientXid
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: package org.apache.derby.client;
1:33776ff: 
1:70f7692: import javax.transaction.xa.Xid;
1:95049cf: import org.apache.derby.client.net.NetXAResource;
1:95049cf: import org.apache.derby.shared.common.sanity.SanityManager;
1:33776ff: 
1:70f7692: public class ClientXid implements Xid {
3:70f7692:     //
1:70f7692:     // The format identifier for the Xid. A value of -1 indicates
1:70f7692:     // that the NULLXid
1:70f7692:     //
1:70f7692:     private int formatID_;
1:33776ff: 
1:70f7692:     //
1:70f7692:     // The number of bytes in the global transaction identfier
1:70f7692:     //
1:70f7692:     private int gtrid_length_;
1:33776ff: 
1:70f7692:     //
1:70f7692:     // The number of bytes in the branch qualifier
1:70f7692:     //
1:70f7692:     private int bqual_length_;
1:33776ff: 
1:70f7692:     //
1:70f7692:     // The data for the Xid.
1:70f7692:     // <p> The Xid is made up of two contiguous parts. The first (of size
1:70f7692:     // <b>gtrid_length</b>) is the global transaction identfier and the second
1:70f7692:     // (of size <b>bqual_length</b>) is the branch qualifier.
1:70f7692:     // <p>If the <b>formatID</b> is -1, indicating the NULLXid, the data is
1:70f7692:     //    ignored.
1:70f7692:     //
1:70f7692:     private byte data_[];
1:33776ff: 
1:70f7692:     //
1:70f7692:     // The size of <b>data</b>.
1:70f7692:     //
1:70f7692:     static private final int XidDATASIZE = 128;
1:33776ff: 
1:70f7692:     //
1:70f7692:     // The maximum size of the branch qualifier.
1:70f7692:     //
1:ee33904:     static private final int MAXBQUALSIZE = 64;
1:33776ff: 
1:70f7692:     static private final String hextab_ = "0123456789ABCDEF";
1:33776ff: 
1:33776ff: 
1:70f7692:     //
1:70f7692:     // Constructs a new null Xid.
1:70f7692:     // <p>After construction the data within the Xid should be initialized.
1:70f7692:     //
1:70f7692:     public ClientXid() {
1:70f7692:         data_ = new byte[XidDATASIZE];
1:70f7692:         gtrid_length_ = 0;
1:70f7692:         bqual_length_ = 0;
1:70f7692:         formatID_ = -1;
15:33776ff:     }
1:33776ff: 
1:70f7692:     //
1:70f7692:     // another contructor
1:70f7692:     //
1:70f7692:     public ClientXid(int formatID, byte[] gtrid, byte[] bqual) {
1:70f7692: 
1:70f7692:         formatID_ = formatID;
1:70f7692:         gtrid_length_ = gtrid.length;
1:70f7692:         bqual_length_ = bqual.length;
1:70f7692:         data_ = new byte[XidDATASIZE];
1:70f7692:         System.arraycopy(gtrid, 0, data_, 0, gtrid_length_);
1:70f7692:         System.arraycopy(bqual, 0, data_, gtrid_length_, bqual_length_);
1:70f7692:     }
1:70f7692: 
1:70f7692:     //
1:ee33904:     // Return a string representing this Xid for debugging
1:70f7692:     //
1:70f7692:     // @return the string representation of this Xid
1:70f7692:     //
1:70f7692:     public String toString() {
1:70f7692:         StringBuffer d;             // Data String, in HeXidecimal
1:70f7692:         String s;             // Resultant String
1:70f7692:         int i;
1:70f7692:         int v;
1:70f7692:         int L;
1:70f7692: 
1:70f7692:         L = gtrid_length_ + bqual_length_;
1:70f7692:         d = new StringBuffer(L + L);
1:70f7692: 
1:70f7692:         for (i = 0; i < L; i++) {
1:70f7692:             // Convert data string to hex
1:70f7692:             v = data_[i] & 0xff;
1:70f7692:             d.append(hextab_.charAt(v / 16));
1:70f7692:             d.append(hextab_.charAt(v & 15));
1:70f7692:             if ((i + 1) % 4 == 0 && (i + 1) < L) {
1:70f7692:                 d.append(" ");
1:70f7692:             }
1:70f7692:         }
1:70f7692: 
1:70f7692:         s = "{ClientXid: " +
1:70f7692:                 "formatID(" + formatID_ + "), " +
1:70f7692:                 "gtrid_length(" + gtrid_length_ + "), " +
1:70f7692:                 "bqual_length(" + bqual_length_ + "), " +
1:70f7692:                 "data(" + d.toString() + ")" +
1:70f7692:                 "}";
1:70f7692:         return s;
1:70f7692:     }
1:70f7692: 
1:70f7692:     //
1:70f7692:     // Returns the branch qualifier for this Xid.
1:70f7692:     //
1:70f7692:     // @return the branch qualifier
1:70f7692:     //
1:70f7692:     public byte[] getBranchQualifier() {
1:70f7692:         byte[] bqual = new byte[bqual_length_];
1:70f7692:         System.arraycopy(data_, gtrid_length_, bqual, 0, bqual_length_);
1:70f7692:         return bqual;
1:70f7692:     }
1:70f7692: 
1:70f7692:     //
1:70f7692:     // Set the branch qualifier for this Xid.
1:70f7692:     //
1:70f7692:     // @param qual a Byte array containing the branch qualifier to be set. If
1:70f7692:     // the size of the array exceeds MAXBQUALSIZE, only the first MAXBQUALSIZE
1:70f7692:     // elements of qual will be used.
1:70f7692:     //
1:70f7692:     public void setBranchQualifier(byte[] qual) {
1:70f7692:         bqual_length_ = qual.length > MAXBQUALSIZE ? MAXBQUALSIZE : qual.length;
1:70f7692:         System.arraycopy(qual, 0, data_, gtrid_length_, bqual_length_);
1:70f7692:     }
1:70f7692: 
1:70f7692:     //
1:70f7692:     // Obtain the format identifier part of the Xid.
1:70f7692:     //
1:70f7692:     // @return Format identifier. -1 indicates a null Xid
1:70f7692:     //
1:70f7692:     public int getFormatId() {
1:70f7692:         return formatID_;
1:70f7692:     }
1:70f7692: 
1:70f7692:     //
1:70f7692:     // Set the format identifier part of the Xid.
1:70f7692:     //
1:70f7692:     // @param Format identifier. -1 indicates a null Xid.
1:70f7692:     //
1:70f7692:     public void setFormatID(int formatID) {
1:70f7692:         formatID_ = formatID;
1:70f7692:     }
1:70f7692: 
1:70f7692:     //
1:70f7692:     // Returns the global transaction identifier for this Xid.
1:70f7692:     //
1:70f7692:     // @return the global transaction identifier
1:70f7692:     //
1:70f7692:     public byte[] getGlobalTransactionId() {
1:70f7692:         byte[] gtrid = new byte[gtrid_length_];
1:70f7692:         System.arraycopy(data_, 0, gtrid, 0, gtrid_length_);
1:70f7692:         return gtrid;
1:70f7692:     }
1:70f7692: 
1:70f7692:     //
1:70f7692:     // return fields of Xid
1:70f7692:     //
1:70f7692:     public byte[] getData() {
1:95049cf:         return data_.clone();
1:70f7692:     }
1:70f7692: 
1:70f7692:     public int getGtridLength() {
1:70f7692:         return gtrid_length_;
1:70f7692:     }
1:70f7692: 
1:70f7692:     public int getBqualLength() {
1:70f7692:         return bqual_length_;
1:70f7692:     }
1:70f7692: 
1:70f7692:     public int hashCode() {
1:70f7692:         if (formatID_ == (-1)) {
1:70f7692:             return (-1);
1:70f7692:         }
1:70f7692:         return formatID_ + gtrid_length_ - bqual_length_;
1:70f7692:     }
1:70f7692: 
1:70f7692:     public boolean equals(Object obj) {
1:95049cf:         if (obj == null) {
1:95049cf:             return false;
1:95049cf:         }
1:95049cf: 
1:95049cf:         if(obj instanceof Xid) {
1:95049cf:             return NetXAResource.xidsEqual(this, (Xid)obj);
1:95049cf:         } else {
1:95049cf:             if (SanityManager.DEBUG) {
1:95049cf:                 SanityManager.THROWASSERT(
1:95049cf:                         "ClientXid#equals: object of unexpected type: " +
1:95049cf:                         obj.getClass().getName());
1:95049cf:             }
1:95049cf:             return false;
1:95049cf:         }
1:70f7692:     }
1:33776ff: } // class Xid
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
commit:ee33904
/////////////////////////////////////////////////////////////////////////
1:     static private final int MAXBQUALSIZE = 64;
/////////////////////////////////////////////////////////////////////////
1:     // Return a string representing this Xid for debugging
/////////////////////////////////////////////////////////////////////////
commit:95049cf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.net.NetXAResource;
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1:         return data_.clone();
/////////////////////////////////////////////////////////////////////////
1:         if (obj == null) {
1:             return false;
1:         }
1: 
1:         if(obj instanceof Xid) {
1:             return NetXAResource.xidsEqual(this, (Xid)obj);
1:         } else {
1:             if (SanityManager.DEBUG) {
1:                 SanityManager.THROWASSERT(
1:                         "ClientXid#equals: object of unexpected type: " +
1:                         obj.getClass().getName());
1:             }
1:             return false;
1:         }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.xa.Xid;
1: public class ClientXid implements Xid {
1:     //
1:     // The format identifier for the Xid. A value of -1 indicates
1:     // that the NULLXid
1:     //
1:     private int formatID_;
1:     //
1:     // The number of bytes in the global transaction identfier
1:     //
1:     private int gtrid_length_;
1:     //
1:     // The number of bytes in the branch qualifier
1:     //
1:     private int bqual_length_;
1:     //
1:     // The data for the Xid.
1:     // <p> The Xid is made up of two contiguous parts. The first (of size
1:     // <b>gtrid_length</b>) is the global transaction identfier and the second
1:     // (of size <b>bqual_length</b>) is the branch qualifier.
1:     // <p>If the <b>formatID</b> is -1, indicating the NULLXid, the data is
1:     //    ignored.
1:     //
1:     private byte data_[];
1:     //
1:     // The size of <b>data</b>.
1:     //
1:     static private final int XidDATASIZE = 128;
1:     //
0:     // The maximum size of the global transaction identifier.
1:     //
0:     static public final int MAXGTRIDSIZE = 64;
1:     //
1:     // The maximum size of the branch qualifier.
1:     //
0:     static public final int MAXBQUALSIZE = 64;
1:     static private final String hextab_ = "0123456789ABCDEF";
1:     //
1:     // Constructs a new null Xid.
1:     // <p>After construction the data within the Xid should be initialized.
1:     //
1:     public ClientXid() {
1:         data_ = new byte[XidDATASIZE];
1:         gtrid_length_ = 0;
1:         bqual_length_ = 0;
1:         formatID_ = -1;
1:     //
1:     // another contructor
1:     //
1:     public ClientXid(int formatID, byte[] gtrid, byte[] bqual) {
1: 
1:         formatID_ = formatID;
1:         gtrid_length_ = gtrid.length;
1:         bqual_length_ = bqual.length;
1:         data_ = new byte[XidDATASIZE];
1:         System.arraycopy(gtrid, 0, data_, 0, gtrid_length_);
1:         System.arraycopy(bqual, 0, data_, gtrid_length_, bqual_length_);
1:     }
1: 
1:     //
0:     // Return a string representing this Xid for debuging
1:     //
1:     // @return the string representation of this Xid
1:     //
1:     public String toString() {
1:         StringBuffer d;             // Data String, in HeXidecimal
1:         String s;             // Resultant String
1:         int i;
1:         int v;
1:         int L;
1: 
1:         L = gtrid_length_ + bqual_length_;
1:         d = new StringBuffer(L + L);
1: 
1:         for (i = 0; i < L; i++) {
1:             // Convert data string to hex
1:             v = data_[i] & 0xff;
1:             d.append(hextab_.charAt(v / 16));
1:             d.append(hextab_.charAt(v & 15));
1:             if ((i + 1) % 4 == 0 && (i + 1) < L) {
1:                 d.append(" ");
1:             }
1:         }
1: 
1:         s = "{ClientXid: " +
1:                 "formatID(" + formatID_ + "), " +
1:                 "gtrid_length(" + gtrid_length_ + "), " +
1:                 "bqual_length(" + bqual_length_ + "), " +
1:                 "data(" + d.toString() + ")" +
1:                 "}";
1:         return s;
1:     }
1: 
1:     //
1:     // Returns the branch qualifier for this Xid.
1:     //
1:     // @return the branch qualifier
1:     //
1:     public byte[] getBranchQualifier() {
1:         byte[] bqual = new byte[bqual_length_];
1:         System.arraycopy(data_, gtrid_length_, bqual, 0, bqual_length_);
1:         return bqual;
1:     }
1: 
1:     //
1:     // Set the branch qualifier for this Xid.
1:     //
1:     // @param qual a Byte array containing the branch qualifier to be set. If
1:     // the size of the array exceeds MAXBQUALSIZE, only the first MAXBQUALSIZE
1:     // elements of qual will be used.
1:     //
1:     public void setBranchQualifier(byte[] qual) {
1:         bqual_length_ = qual.length > MAXBQUALSIZE ? MAXBQUALSIZE : qual.length;
1:         System.arraycopy(qual, 0, data_, gtrid_length_, bqual_length_);
1:     }
1: 
1:     //
1:     // Obtain the format identifier part of the Xid.
1:     //
1:     // @return Format identifier. -1 indicates a null Xid
1:     //
1:     public int getFormatId() {
1:         return formatID_;
1:     }
1: 
1:     //
1:     // Set the format identifier part of the Xid.
1:     //
1:     // @param Format identifier. -1 indicates a null Xid.
1:     //
1:     public void setFormatID(int formatID) {
1:         formatID_ = formatID;
0:         return;
1:     }
1: 
1:     //
1:     // Returns the global transaction identifier for this Xid.
1:     //
1:     // @return the global transaction identifier
1:     //
1:     public byte[] getGlobalTransactionId() {
1:         byte[] gtrid = new byte[gtrid_length_];
1:         System.arraycopy(data_, 0, gtrid, 0, gtrid_length_);
1:         return gtrid;
1:     }
1: 
1:     //
1:     // return fields of Xid
1:     //
1:     public byte[] getData() {
0:         return data_;
1:     }
1: 
1:     public int getGtridLength() {
1:         return gtrid_length_;
1:     }
1: 
1:     public int getBqualLength() {
1:         return bqual_length_;
1:     }
1: 
1:     public int hashCode() {
1:         if (formatID_ == (-1)) {
1:             return (-1);
1:         }
1:         return formatID_ + gtrid_length_ - bqual_length_;
1:     }
1: 
1:     public boolean equals(Object obj) {
0:         return org.apache.derby.client.net.NetXAResource.xidsEqual(this, (javax.transaction.xa.Xid) obj);
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.ClientXid
1: 
0:    Copyright (c) 2003, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.client;
1: 
0: import javax.transaction.xa.*;
1: 
0: public class ClientXid implements Xid
0: {
0:   //
0:   // The format identifier for the Xid. A value of -1 indicates
0:   // that the NULLXid
0:   //
0:   private int          formatID_;
1: 
0:   //
0:   // The number of bytes in the global transaction identfier
0:   //
0:   private int          gtrid_length_;
1: 
0:   //
0:   // The number of bytes in the branch qualifier
0:   //
0:   private int          bqual_length_;
1: 
0:   //
0:   // The data for the Xid.
0:   // <p> The Xid is made up of two contiguous parts. The first (of size
0:   // <b>gtrid_length</b>) is the global transaction identfier and the second
0:   // (of size <b>bqual_length</b>) is the branch qualifier.
0:   // <p>If the <b>formatID</b> is -1, indicating the NULLXid, the data is
0:   //    ignored.
0:   //
0:   private byte         data_[];
1: 
0:   //
0:   // The size of <b>data</b>.
0:   //
0:   static private final int XidDATASIZE = 128;
1: 
0:   //
0:   // The maximum size of the global transaction identifier.
0:   //
0:   static public final int MAXGTRIDSIZE= 64;
1: 
0:   //
0:   // The maximum size of the branch qualifier.
0:   //
0:   static public  final int MAXBQUALSIZE= 64;
1: 
0:   static private final String hextab_= "0123456789ABCDEF";
1: 
1: 
0:   //
0:   // Constructs a new null Xid.
0:   // <p>After construction the data within the Xid should be initialized.
0:   //
0:   public ClientXid()
0:   {
0:     data_ = new byte[XidDATASIZE];
0:     gtrid_length_ = 0;
0:     bqual_length_ = 0;
0:     formatID_ = -1;
1:   }
1: 
0:   //
0:   // another contructor
0:   //
0:   public ClientXid( int formatID, byte[] gtrid, byte[] bqual )
0:   {
1: 
0:     formatID_ = formatID;
0:     gtrid_length_ = gtrid.length;
0:     bqual_length_ = bqual.length;
0:     data_ = new byte[XidDATASIZE];
0:     System.arraycopy(gtrid, 0, data_, 0, gtrid_length_);
0:     System.arraycopy(bqual, 0, data_, gtrid_length_, bqual_length_);
1:   }
1: 
0:   //
0:   // Return a string representing this Xid for debuging
0:   //
0:   // @return the string representation of this Xid
0:   //
0:   public String toString()
0:   {
0:      StringBuffer      d;             // Data String, in HeXidecimal
0:      String            s;             // Resultant String
0:      int               i;
0:      int               v;
0:      int               L;
1: 
0:      L = gtrid_length_ + bqual_length_;
0:      d = new StringBuffer(L+L);
1: 
0:      for( i = 0; i < L; i++ )
0:      {
0:        // Convert data string to hex
0:        v = data_[i] & 0xff;
0:        d.append(hextab_.charAt(v/16));
0:        d.append(hextab_.charAt(v&15));
0:        if ( (i+1)%4 == 0 && (i+1) < L )
0:          d.append(" ");
1:      }
1: 
0:      s =  "{ClientXid: " +
0: 		     "formatID("     + formatID_     + "), " +
0: 		     "gtrid_length(" + gtrid_length_ + "), " +
0: 		     "bqual_length(" + bqual_length_ + "), " +
0: 	  "data("         + d.toString()            + ")" +
0: 	  "}" ;
0:      return s;
1:   }
1: 
0:   //
0:   // Returns the branch qualifier for this Xid.
0:   //
0:   // @return the branch qualifier
0:   //
0:   public byte[] getBranchQualifier()
0:   {
0:     byte[] bqual = new byte[bqual_length_];
0:     System.arraycopy(data_,gtrid_length_,bqual,0,bqual_length_);
0:     return bqual;
1:   }
1: 
0:   //
0:   // Set the branch qualifier for this Xid.
0:   //
0:   // @param qual a Byte array containing the branch qualifier to be set. If
0:   // the size of the array exceeds MAXBQUALSIZE, only the first MAXBQUALSIZE
0:   // elements of qual will be used.
0:   //
0:   public void setBranchQualifier( byte[] qual )
0:   {
0:     bqual_length_ = qual.length > MAXBQUALSIZE?MAXBQUALSIZE:qual.length;
0:     System.arraycopy(qual, 0, data_, gtrid_length_, bqual_length_);
1:   }
1: 
0:   //
0:   // Obtain the format identifier part of the Xid.
0:   //
0:   // @return Format identifier. -1 indicates a null Xid
0:   //
0:   public int getFormatId()
0:   {
0:     return formatID_;
1:   }
1: 
0:   //
0:   // Set the format identifier part of the Xid.
0:   //
0:   // @param Format identifier. -1 indicates a null Xid.
0:   //
0:   public void setFormatID(int  formatID)
0:   {
0:     formatID_ = formatID;
0:     return;
1:   }
1: 
0:   //
0:   // Returns the global transaction identifier for this Xid.
0:   //
0:   // @return the global transaction identifier
0:   //
0:   public byte[] getGlobalTransactionId()
0:   {
0:     byte[] gtrid = new byte[gtrid_length_];
0:     System.arraycopy(data_, 0, gtrid, 0, gtrid_length_);
0:     return gtrid;
1:   }
1: 
0:   //
0:   // return fields of Xid
0:   //
0:   public byte[] getData()
0:   {
0:     return data_;
1:   }
1: 
0:   public int getGtridLength()
0:   {
0:     return gtrid_length_;
1:   }
1: 
0:   public int getBqualLength()
0:   {
0:     return bqual_length_;
1:   }
1: 
0:   public int hashCode()
0:   {
0:     if ( formatID_ == (-1) )
0:     {
0:       return (-1);
1:     }
0:     return formatID_ + gtrid_length_ - bqual_length_;
1:   }
1: 
0:   public boolean equals(Object obj)
0:   {
0:     return org.apache.derby.client.net.NetXAResource.xidsEqual(this, (javax.transaction.xa.Xid)obj);
1:   }
1: } // class Xid
============================================================================