1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.xact.ContainerLocking2
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.xact;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.LockFactory;
1:eac0369: import org.apache.derby.iapi.services.locks.C_LockFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerLock;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A locking policy that implements container level locking with
1:eac0369: 	isolation degree 2.
1:eac0369: 
1:eac0369: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
1:eac0369: */
1:eac0369: public class ContainerLocking2 extends NoLocking {
1:eac0369: 
1:eac0369: 	private final LockFactory	lf;
1:eac0369: 
1:eac0369: 	protected ContainerLocking2()
1:eac0369:     {
1:eac0369: 		this.lf = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected ContainerLocking2(LockFactory lf)
1:eac0369:     {
1:eac0369: 		this.lf = lf;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Obtain a Container shared or exclusive lock	until
1:eac0369: 		the end of the nested transaction.
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public boolean lockContainer(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container, 
1:eac0369:     boolean         waitForLock,
1:eac0369:     boolean         forUpdate)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369: 		Object qualifier = forUpdate ? ContainerLock.CX : ContainerLock.CS;
1:eac0369: 
1:eac0369:         // for cursor stability put read locks on a separate lock chain, which
1:eac0369:         // will be released when the container is unlocked.
1:eac0369:         Object group = 
1:eac0369:             forUpdate ? t : container.getUniqueId();
1:eac0369: 
1:eac0369: 		return(
1:eac0369:             lf.lockObject(
1:eac0369:                 t.getCompatibilitySpace(), group, container.getId(), qualifier,
1:eac0369:                 waitForLock ? 
1:eac0369:                     C_LockFactory.TIMED_WAIT : C_LockFactory.NO_WAIT));
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Unlock read locks.
1:eac0369:      * <p>
1:eac0369:      * In Cursor stability release all read locks obtained.  unlockContainer()
1:eac0369:      * will be called when the container is closed.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * @param t             The transaction to associate the lock with.
1:eac0369:      * @param container     Container to unlock.
1:eac0369:      *
1:eac0369:      **/
1:eac0369: 	public void unlockContainer(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container)
1:eac0369:     {
1:eac0369:         // Only release read locks before end of transaction in level 2.
1:eac0369:         if (container.isReadOnly())
1:eac0369:         {
1:eac0369:             lf.unlockGroup(t.getCompatibilitySpace(), container.getUniqueId());
1:eac0369:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int getMode() {
1:eac0369: 		return MODE_CONTAINER;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** We can inherit all the others methods of NoLocking since we hold the 
1:eac0369:     ** container lock until the end of transaction, and we don't obtain row
1:eac0369:     ** locks.
1:eac0369: 	*/
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.xact.ContainerLocking2
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.xact;
1: 
1: import org.apache.derby.iapi.services.locks.LockFactory;
1: import org.apache.derby.iapi.services.locks.C_LockFactory;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.ContainerLock;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: 
1: /**
1: 	A locking policy that implements container level locking with
1: 	isolation degree 2.
1: 
1: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
1: */
1: public class ContainerLocking2 extends NoLocking {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private final LockFactory	lf;
1: 
1: 	protected ContainerLocking2()
1:     {
1: 		this.lf = null;
1: 	}
1: 
1: 	protected ContainerLocking2(LockFactory lf)
1:     {
1: 		this.lf = lf;
1: 	}
1: 
1: 	/**
1: 		Obtain a Container shared or exclusive lock	until
1: 		the end of the nested transaction.
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public boolean lockContainer(
1:     Transaction     t, 
1:     ContainerHandle container, 
1:     boolean         waitForLock,
1:     boolean         forUpdate)
1: 		throws StandardException
1:     {
1: 		Object qualifier = forUpdate ? ContainerLock.CX : ContainerLock.CS;
1: 
1:         // for cursor stability put read locks on a separate lock chain, which
1:         // will be released when the container is unlocked.
1:         Object group = 
1:             forUpdate ? t : container.getUniqueId();
1: 
1: 		return(
1:             lf.lockObject(
1:                 t.getCompatibilitySpace(), group, container.getId(), qualifier,
1:                 waitForLock ? 
1:                     C_LockFactory.TIMED_WAIT : C_LockFactory.NO_WAIT));
1: 	}
1: 
1:     /**
1:      * Unlock read locks.
1:      * <p>
1:      * In Cursor stability release all read locks obtained.  unlockContainer()
1:      * will be called when the container is closed.
1:      * <p>
1:      *
1:      * @param t             The transaction to associate the lock with.
1:      * @param container     Container to unlock.
1:      *
1:      **/
1: 	public void unlockContainer(
1:     Transaction     t, 
1:     ContainerHandle container)
1:     {
1:         // Only release read locks before end of transaction in level 2.
1:         if (container.isReadOnly())
1:         {
1:             lf.unlockGroup(t.getCompatibilitySpace(), container.getUniqueId());
1:         }
1: 	}
1: 
1: 	public int getMode() {
1: 		return MODE_CONTAINER;
1: 	}
1: 
1: 
1: 	/*
1: 	** We can inherit all the others methods of NoLocking since we hold the 
1:     ** container lock until the end of transaction, and we don't obtain row
1:     ** locks.
1: 	*/
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.xact;
0: 
0: import org.apache.derby.iapi.services.locks.LockFactory;
0: import org.apache.derby.iapi.services.locks.C_LockFactory;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.ContainerLock;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: 
0: /**
0: 	A locking policy that implements container level locking with
0: 	isolation degree 2.
0: 
0: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
0: */
0: public class ContainerLocking2 extends NoLocking {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private final LockFactory	lf;
0: 
0: 	protected ContainerLocking2()
0:     {
0: 		this.lf = null;
0: 	}
0: 
0: 	protected ContainerLocking2(LockFactory lf)
0:     {
0: 		this.lf = lf;
0: 	}
0: 
0: 	/**
0: 		Obtain a Container shared or exclusive lock	until
0: 		the end of the nested transaction.
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public boolean lockContainer(
0:     Transaction     t, 
0:     ContainerHandle container, 
0:     boolean         waitForLock,
0:     boolean         forUpdate)
0: 		throws StandardException
0:     {
0: 		Object qualifier = forUpdate ? ContainerLock.CX : ContainerLock.CS;
0: 
0:         // for cursor stability put read locks on a separate lock chain, which
0:         // will be released when the container is unlocked.
0:         Object group = 
0:             forUpdate ? t : container.getUniqueId();
0: 
0: 		return(
0:             lf.lockObject(
0:                 t.getCompatibilitySpace(), group, container.getId(), qualifier,
0:                 waitForLock ? 
0:                     C_LockFactory.TIMED_WAIT : C_LockFactory.NO_WAIT));
0: 	}
0: 
0:     /**
0:      * Unlock read locks.
0:      * <p>
0:      * In Cursor stability release all read locks obtained.  unlockContainer()
0:      * will be called when the container is closed.
0:      * <p>
0:      *
0:      * @param t             The transaction to associate the lock with.
0:      * @param container     Container to unlock.
0:      *
0:      **/
0: 	public void unlockContainer(
0:     Transaction     t, 
0:     ContainerHandle container)
0:     {
0:         // Only release read locks before end of transaction in level 2.
0:         if (container.isReadOnly())
0:         {
0:             lf.unlockGroup(t.getCompatibilitySpace(), container.getUniqueId());
0:         }
0: 	}
0: 
0: 	public int getMode() {
0: 		return MODE_CONTAINER;
0: 	}
0: 
0: 
0: 	/*
0: 	** We can inherit all the others methods of NoLocking since we hold the 
0:     ** container lock until the end of transaction, and we don't obtain row
0:     ** locks.
0: 	*/
0: }
============================================================================