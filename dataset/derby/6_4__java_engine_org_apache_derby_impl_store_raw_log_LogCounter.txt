1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.log.LogCounter
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.log;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.access.DatabaseInstant;
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A very simple log instant implementation.
1:eac0369: 
1:eac0369: 	Within the stored log record a log counter is represented as a long,
1:eac0369: 	hence the getValueAsLong() method. Outside the LogFactory the instant
1:eac0369: 	is passed around as a LogCounter (through its LogInstant interface).
1:eac0369: 
1:dbed020: 	The way the long is encoded is such that &lt; == &gt; correctly tells if
1:eac0369: 	one log instant is lessThan, equals or greater than another.
1:eac0369: 
1:eac0369: */
1:eac0369: public class LogCounter implements LogInstant {
1:eac0369: 
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, between releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 	
1:eac0369: 	/** A well defined value of an invalid log instant. */
1:eac0369: 	public static final long INVALID_LOG_INSTANT = 0;
1:ba03da2: 	
1:ba03da2: 	// max possible log file number in versions before 10.1 is 2^22 -1
1:ba03da2: 	public static final long DERBY_10_0_MAX_LOGFILE_NUMBER = (long)0x003FFFFFL; // 4194303
1:ba03da2: 	// max possible log file number is 2^31 -1
1:ba03da2: 	public static final long MAX_LOGFILE_NUMBER	= (long)0x7FFFFFFFL; // 2147483647 
1:ba03da2: 	// lower end of 32 bits in long type are used to store the log file position
1:ba03da2: 	private static final long FILE_NUMBER_SHIFT	= 32;
1:8fbfcc4: 
1:ba03da2: 	// reserve top 4 bits in log file size for future use
1:8fbfcc4: 	public static final long MAX_LOGFILE_SIZE	    = (long)0x0FFFFFFFL; // 268435455
1:ba03da2: 	// 32 bits are used to store the log file postion
1:ba03da2: 	private static final long FILE_POSITION_MASK	= (long)0x7FFFFFFFL;
1:eac0369: 
1:eac0369: 	private long fileNumber;
1:eac0369: 	private long filePosition;
1:eac0369: 
1:eac0369: 	// contructors
1:eac0369: 	public LogCounter(long value) {
1:eac0369: 		fileNumber = getLogFileNumber(value);
1:eac0369: 		filePosition = getLogFilePosition(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public LogCounter(long fileNumber, long position) {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(fileNumber > 0, "illegal fileNumber");
1:eac0369: 			SanityManager.ASSERT(position > 0, "illegal file position");
1:eac0369: 
1:eac0369: 			SanityManager.ASSERT(position < MAX_LOGFILE_SIZE,
1:5891683: 							 "log file position exceeded max log file size. log file position = " + position );
1:eac0369: 			SanityManager.ASSERT(fileNumber < MAX_LOGFILE_NUMBER,
1:5891683: 							 "log file number exceeded max log file number. log file number = " + fileNumber );
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		this.fileNumber = fileNumber;
1:eac0369: 		this.filePosition = position;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Public niladic constructor needed for Formatable interface.
1:eac0369: 	 */
1:eac0369: 	public LogCounter() {}
1:eac0369: 	
1:eac0369: 	/** 
1:eac0369: 		Static functions that can only be used inside the RawStore's log
1:eac0369: 		factory which passes the log counter around encoded as a long
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	// make a log instant from 2 longs and return a long which is the long
1:eac0369: 	// representatin of a LogCounter
1:eac0369: 	static public final long makeLogInstantAsLong(long filenum, long filepos)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(filenum > 0, "illegal fileNumber");
1:eac0369: 			SanityManager.ASSERT(filepos > 0, "illegal file position");
1:eac0369: 
1:eac0369: 			SanityManager.ASSERT(filepos < MAX_LOGFILE_SIZE,
1:5891683: 							 "log file position exceeded max log file size. log file position = " + filepos );
1:eac0369: 			SanityManager.ASSERT(filenum < MAX_LOGFILE_NUMBER,
1:5891683: 							 "log file number exceeded max log file number. log file number = " + filenum );
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return ((filenum << FILE_NUMBER_SHIFT) | filepos);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	static public final long getLogFilePosition(long valueAsLong)
1:eac0369: 	{
1:eac0369: 		return valueAsLong & FILE_POSITION_MASK;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	static public final long getLogFileNumber(long valueAsLong)
1:eac0369: 	{
1:eac0369: 		return valueAsLong >>> FILE_NUMBER_SHIFT;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** LogScan methods */
1:eac0369: 
1:eac0369: 	public boolean lessThan(DatabaseInstant other) {
1:eac0369: 		LogCounter compare = (LogCounter)other;
1:eac0369: 
1:eac0369: 		return (fileNumber == compare.fileNumber) ?
1:eac0369: 			filePosition < compare.filePosition :
1:eac0369: 			fileNumber < compare.fileNumber;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean equals(Object other) {
1:eac0369: 		if (this == other)
1:eac0369: 			return true;
1:eac0369: 
1:eac0369: 		if (!(other instanceof LogCounter))
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		LogCounter compare = (LogCounter)other;
1:eac0369: 
1:eac0369: 		return fileNumber == compare.fileNumber &&
1:eac0369: 			filePosition == compare.filePosition;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public DatabaseInstant next() {
1:eac0369:         return new LogCounter( makeLogInstantAsLong(fileNumber, filePosition) + 1);
1:eac0369:     }
1:eac0369:     
1:eac0369:     public DatabaseInstant prior() {
1:eac0369:         return new LogCounter( makeLogInstantAsLong(fileNumber, filePosition) - 1);
1:eac0369:     }
1:eac0369:     
1:eac0369: 	public int hashCode() {
1:eac0369: 		return (int) (filePosition ^ fileNumber);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString() {
1:eac0369: 		return "(" + fileNumber + "," + filePosition + ")";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public static String toDebugString(long instant)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			return "(" + getLogFileNumber(instant) + "," + getLogFilePosition(instant) + ")";
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		These following methods are only intended to be called by an
1:eac0369: 		implementation of a log factory. All other uses of this object should
1:eac0369: 		only see it as a log instant.
1:eac0369: 	*/
1:eac0369: 	public long getValueAsLong() {
1:eac0369: 		return makeLogInstantAsLong(fileNumber, filePosition);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public long getLogFilePosition()
1:eac0369: 	{
1:eac0369: 		 return filePosition;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public long getLogFileNumber()
1:eac0369: 	{
1:eac0369: 		return fileNumber;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	
1:eac0369: 	/*
1:eac0369: 	 * methods for the Formatable interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this in.
1:eac0369: 	 * @exception IOException error reading from log stream
1:eac0369: 	 * @exception ClassNotFoundException corrupted log stream
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput oi) throws IOException, ClassNotFoundException {
1:eac0369: 		fileNumber = CompressedNumber.readLong(oi);
1:eac0369: 		filePosition = CompressedNumber.readLong(oi);
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Write this out.
1:eac0369: 	 * @exception IOException error writing to log stream
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput oo) throws IOException {
1:eac0369: 		CompressedNumber.writeLong(oo,fileNumber);
1:eac0369: 		CompressedNumber.writeLong(oo,filePosition);
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.LOG_COUNTER; }
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	The way the long is encoded is such that &lt; == &gt; correctly tells if
commit:5891683
/////////////////////////////////////////////////////////////////////////
1: 							 "log file position exceeded max log file size. log file position = " + position );
1: 							 "log file number exceeded max log file number. log file number = " + fileNumber );
/////////////////////////////////////////////////////////////////////////
1: 							 "log file position exceeded max log file size. log file position = " + filepos );
1: 							 "log file number exceeded max log file number. log file number = " + filenum );
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:ba03da2
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	// max possible log file number in versions before 10.1 is 2^22 -1
1: 	public static final long DERBY_10_0_MAX_LOGFILE_NUMBER = (long)0x003FFFFFL; // 4194303
1: 	// max possible log file number is 2^31 -1
1: 	public static final long MAX_LOGFILE_NUMBER	= (long)0x7FFFFFFFL; // 2147483647 
1: 	// lower end of 32 bits in long type are used to store the log file position
1: 	private static final long FILE_NUMBER_SHIFT	= 32;
1: 	// reserve top 4 bits in log file size for future use
1: 	// 32 bits are used to store the log file postion
1: 	private static final long FILE_POSITION_MASK	= (long)0x7FFFFFFFL;
commit:8fbfcc4
/////////////////////////////////////////////////////////////////////////
0: 	// max possible log file number is 2^33 -1 (8589934591)
0: 	public static final long MAX_LOGFILE_NUMBER	= (long)0x1FFFFFFFFL; 
0: 	// lower end of 30 bits in long type are used to store the log file position
0: 	private static final long FILE_NUMBER_SHIFT	= 30;
1: 
0: 	// reserve top 2 bits in log file size for future use
1: 	public static final long MAX_LOGFILE_SIZE	    = (long)0x0FFFFFFFL; // 268435455
0: 	// 30 bits are used to store the log file postion
0: 	private static final long FILE_POSITION_MASK	= (long)0x3FFFFFFFL;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.log.LogCounter
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.log;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.access.DatabaseInstant;
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: /**
1: 	A very simple log instant implementation.
1: 
1: 	Within the stored log record a log counter is represented as a long,
1: 	hence the getValueAsLong() method. Outside the LogFactory the instant
1: 	is passed around as a LogCounter (through its LogInstant interface).
1: 
0: 	The way the long is encoded is such that < == > correctly tells if
1: 	one log instant is lessThan, equals or greater than another.
1: 
1: */
1: public class LogCounter implements LogInstant {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, between releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 	
1: 	/** A well defined value of an invalid log instant. */
1: 	public static final long INVALID_LOG_INSTANT = 0;
1: 
1: 
0: 	// reserve top 10 bits in log file number for future use
0: 	public static final long MAX_LOGFILE_NUMBER	=	(long)0x003FFFFFL;	// 4194303
0: 	private static final long FILE_NUMBER_SHIFT	= 32;
1: 
0: 	// reserve top 4 bits in log file size for future use
0: 	public static final long MAX_LOGFILE_SIZE	= 		(long)0x0FFFFFFFL; // 268435455
0: 	private static final long FILE_POSITION_MASK	= 	(long)0x7FFFFFFFL;
1: 
1: 	private long fileNumber;
1: 	private long filePosition;
1: 
1: 	// contructors
1: 	public LogCounter(long value) {
1: 		fileNumber = getLogFileNumber(value);
1: 		filePosition = getLogFilePosition(value);
1: 	}
1: 
1: 	public LogCounter(long fileNumber, long position) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(fileNumber > 0, "illegal fileNumber");
1: 			SanityManager.ASSERT(position > 0, "illegal file position");
1: 
1: 			SanityManager.ASSERT(position < MAX_LOGFILE_SIZE,
0: 							 "log file position exceeded max log file size");
1: 			SanityManager.ASSERT(fileNumber < MAX_LOGFILE_NUMBER,
0: 							 "log file number exceeded max log file number");
1: 		}
1: 
1: 		this.fileNumber = fileNumber;
1: 		this.filePosition = position;
1: 	}
1: 
1: 	/**
1: 	 * Public niladic constructor needed for Formatable interface.
1: 	 */
1: 	public LogCounter() {}
1: 	
1: 	/** 
1: 		Static functions that can only be used inside the RawStore's log
1: 		factory which passes the log counter around encoded as a long
1: 	*/
1: 
1: 	// make a log instant from 2 longs and return a long which is the long
1: 	// representatin of a LogCounter
1: 	static public final long makeLogInstantAsLong(long filenum, long filepos)
1: 	{
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(filenum > 0, "illegal fileNumber");
1: 			SanityManager.ASSERT(filepos > 0, "illegal file position");
1: 
1: 			SanityManager.ASSERT(filepos < MAX_LOGFILE_SIZE,
0: 							 "log file position exceeded max log file size");
1: 			SanityManager.ASSERT(filenum < MAX_LOGFILE_NUMBER,
0: 							 "log file number exceeded max log file number");
1: 		}
1: 
1: 		return ((filenum << FILE_NUMBER_SHIFT) | filepos);
1: 	}
1: 
1: 
1: 	static public final long getLogFilePosition(long valueAsLong)
1: 	{
1: 		return valueAsLong & FILE_POSITION_MASK;
1: 	}
1: 
1: 	static public final long getLogFileNumber(long valueAsLong)
1: 	{
1: 		return valueAsLong >>> FILE_NUMBER_SHIFT;
1: 	}
1: 
1: 	/** LogScan methods */
1: 
1: 	public boolean lessThan(DatabaseInstant other) {
1: 		LogCounter compare = (LogCounter)other;
1: 
1: 		return (fileNumber == compare.fileNumber) ?
1: 			filePosition < compare.filePosition :
1: 			fileNumber < compare.fileNumber;
1: 	}
1: 
1: 	public boolean equals(Object other) {
1: 		if (this == other)
1: 			return true;
1: 
1: 		if (!(other instanceof LogCounter))
1: 			return false;
1: 
1: 		LogCounter compare = (LogCounter)other;
1: 
1: 		return fileNumber == compare.fileNumber &&
1: 			filePosition == compare.filePosition;
1: 	}
1: 
1:     public DatabaseInstant next() {
1:         return new LogCounter( makeLogInstantAsLong(fileNumber, filePosition) + 1);
1:     }
1:     
1:     public DatabaseInstant prior() {
1:         return new LogCounter( makeLogInstantAsLong(fileNumber, filePosition) - 1);
1:     }
1:     
1: 	public int hashCode() {
1: 		return (int) (filePosition ^ fileNumber);
1: 	}
1: 
1: 	public String toString() {
1: 		return "(" + fileNumber + "," + filePosition + ")";
1: 	}
1: 
1: 	public static String toDebugString(long instant)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			return "(" + getLogFileNumber(instant) + "," + getLogFilePosition(instant) + ")";
1: 		else
1: 			return null;
1: 	}
1: 
1: 	/**
1: 		These following methods are only intended to be called by an
1: 		implementation of a log factory. All other uses of this object should
1: 		only see it as a log instant.
1: 	*/
1: 	public long getValueAsLong() {
1: 		return makeLogInstantAsLong(fileNumber, filePosition);
1: 	}
1: 
1: 	public long getLogFilePosition()
1: 	{
1: 		 return filePosition;
1: 	}
1: 
1: 	public long getLogFileNumber()
1: 	{
1: 		return fileNumber;
1: 	}
1: 
1: 	
1: 	/*
1: 	 * methods for the Formatable interface
1: 	 */
1: 
1: 	/**
1: 	 * Read this in.
1: 	 * @exception IOException error reading from log stream
1: 	 * @exception ClassNotFoundException corrupted log stream
1: 	 */
1: 	public void readExternal(ObjectInput oi) throws IOException, ClassNotFoundException {
1: 		fileNumber = CompressedNumber.readLong(oi);
1: 		filePosition = CompressedNumber.readLong(oi);
1: 	}
1: 	
1: 	/**
1: 	 * Write this out.
1: 	 * @exception IOException error writing to log stream
1: 	 */
1: 	public void writeExternal(ObjectOutput oo) throws IOException {
1: 		CompressedNumber.writeLong(oo,fileNumber);
1: 		CompressedNumber.writeLong(oo,filePosition);
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.LOG_COUNTER; }
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.log
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.log;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.access.DatabaseInstant;
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: 
0: import java.io.IOException;
0: import java.io.ObjectInput;
0: import java.io.ObjectOutput;
0: 
0: /**
0: 	A very simple log instant implementation.
0: 
0: 	Within the stored log record a log counter is represented as a long,
0: 	hence the getValueAsLong() method. Outside the LogFactory the instant
0: 	is passed around as a LogCounter (through its LogInstant interface).
0: 
0: 	The way the long is encoded is such that < == > correctly tells if
0: 	one log instant is lessThan, equals or greater than another.
0: 
0: */
0: public class LogCounter implements LogInstant {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, between releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 	
0: 	/** A well defined value of an invalid log instant. */
0: 	public static final long INVALID_LOG_INSTANT = 0;
0: 
0: 
0: 	// reserve top 10 bits in log file number for future use
0: 	public static final long MAX_LOGFILE_NUMBER	=	(long)0x003FFFFFL;	// 4194303
0: 	private static final long FILE_NUMBER_SHIFT	= 32;
0: 
0: 	// reserve top 4 bits in log file size for future use
0: 	public static final long MAX_LOGFILE_SIZE	= 		(long)0x0FFFFFFFL; // 268435455
0: 	private static final long FILE_POSITION_MASK	= 	(long)0x7FFFFFFFL;
0: 
0: 	private long fileNumber;
0: 	private long filePosition;
0: 
0: 	// contructors
0: 	public LogCounter(long value) {
0: 		fileNumber = getLogFileNumber(value);
0: 		filePosition = getLogFilePosition(value);
0: 	}
0: 
0: 	public LogCounter(long fileNumber, long position) {
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(fileNumber > 0, "illegal fileNumber");
0: 			SanityManager.ASSERT(position > 0, "illegal file position");
0: 
0: 			SanityManager.ASSERT(position < MAX_LOGFILE_SIZE,
0: 							 "log file position exceeded max log file size");
0: 			SanityManager.ASSERT(fileNumber < MAX_LOGFILE_NUMBER,
0: 							 "log file number exceeded max log file number");
0: 		}
0: 
0: 		this.fileNumber = fileNumber;
0: 		this.filePosition = position;
0: 	}
0: 
0: 	/**
0: 	 * Public niladic constructor needed for Formatable interface.
0: 	 */
0: 	public LogCounter() {}
0: 	
0: 	/** 
0: 		Static functions that can only be used inside the RawStore's log
0: 		factory which passes the log counter around encoded as a long
0: 	*/
0: 
0: 	// make a log instant from 2 longs and return a long which is the long
0: 	// representatin of a LogCounter
0: 	static public final long makeLogInstantAsLong(long filenum, long filepos)
0: 	{
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(filenum > 0, "illegal fileNumber");
0: 			SanityManager.ASSERT(filepos > 0, "illegal file position");
0: 
0: 			SanityManager.ASSERT(filepos < MAX_LOGFILE_SIZE,
0: 							 "log file position exceeded max log file size");
0: 			SanityManager.ASSERT(filenum < MAX_LOGFILE_NUMBER,
0: 							 "log file number exceeded max log file number");
0: 		}
0: 
0: 		return ((filenum << FILE_NUMBER_SHIFT) | filepos);
0: 	}
0: 
0: 
0: 	static public final long getLogFilePosition(long valueAsLong)
0: 	{
0: 		return valueAsLong & FILE_POSITION_MASK;
0: 	}
0: 
0: 	static public final long getLogFileNumber(long valueAsLong)
0: 	{
0: 		return valueAsLong >>> FILE_NUMBER_SHIFT;
0: 	}
0: 
0: 	/** LogScan methods */
0: 
0: 	public boolean lessThan(DatabaseInstant other) {
0: 		LogCounter compare = (LogCounter)other;
0: 
0: 		return (fileNumber == compare.fileNumber) ?
0: 			filePosition < compare.filePosition :
0: 			fileNumber < compare.fileNumber;
0: 	}
0: 
0: 	public boolean equals(Object other) {
0: 		if (this == other)
0: 			return true;
0: 
0: 		if (!(other instanceof LogCounter))
0: 			return false;
0: 
0: 		LogCounter compare = (LogCounter)other;
0: 
0: 		return fileNumber == compare.fileNumber &&
0: 			filePosition == compare.filePosition;
0: 	}
0: 
0:     public DatabaseInstant next() {
0:         return new LogCounter( makeLogInstantAsLong(fileNumber, filePosition) + 1);
0:     }
0:     
0:     public DatabaseInstant prior() {
0:         return new LogCounter( makeLogInstantAsLong(fileNumber, filePosition) - 1);
0:     }
0:     
0: 	public int hashCode() {
0: 		return (int) (filePosition ^ fileNumber);
0: 	}
0: 
0: 	public String toString() {
0: 		return "(" + fileNumber + "," + filePosition + ")";
0: 	}
0: 
0: 	public static String toDebugString(long instant)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			return "(" + getLogFileNumber(instant) + "," + getLogFilePosition(instant) + ")";
0: 		else
0: 			return null;
0: 	}
0: 
0: 	/**
0: 		These following methods are only intended to be called by an
0: 		implementation of a log factory. All other uses of this object should
0: 		only see it as a log instant.
0: 	*/
0: 	public long getValueAsLong() {
0: 		return makeLogInstantAsLong(fileNumber, filePosition);
0: 	}
0: 
0: 	public long getLogFilePosition()
0: 	{
0: 		 return filePosition;
0: 	}
0: 
0: 	public long getLogFileNumber()
0: 	{
0: 		return fileNumber;
0: 	}
0: 
0: 	
0: 	/*
0: 	 * methods for the Formatable interface
0: 	 */
0: 
0: 	/**
0: 	 * Read this in.
0: 	 * @exception IOException error reading from log stream
0: 	 * @exception ClassNotFoundException corrupted log stream
0: 	 */
0: 	public void readExternal(ObjectInput oi) throws IOException, ClassNotFoundException {
0: 		fileNumber = CompressedNumber.readLong(oi);
0: 		filePosition = CompressedNumber.readLong(oi);
0: 	}
0: 	
0: 	/**
0: 	 * Write this out.
0: 	 * @exception IOException error writing to log stream
0: 	 */
0: 	public void writeExternal(ObjectOutput oo) throws IOException {
0: 		CompressedNumber.writeLong(oo,fileNumber);
0: 		CompressedNumber.writeLong(oo,filePosition);
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.LOG_COUNTER; }
0: 
0: }
============================================================================