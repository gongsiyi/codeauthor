1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.SysInfoLog
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
20:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: /***
1:67614ad:  * SysInfoLog
1:67614ad:  * Purpose: For a Suite or Test run, write out the
1:67614ad:  * sysinfo to the suite or test output file
1:67614ad:  *
1:67614ad:  ***/
1:67614ad: 
1:67614ad: import java.io.*;
1:67614ad: import java.util.Vector;
1:67614ad: 
1:67614ad: public class SysInfoLog
1:67614ad: {
1:67614ad: 
1:67614ad:     public SysInfoLog()
1:67614ad:     {
1:67614ad:     }
1:67614ad: 
1:67614ad:     // Write out sysinfo for a suite or test
1:67614ad:     public void exec(String jvmName, String javaCmd, String classpath,
1:67614ad:         String framework, PrintWriter pw, boolean useprocess)
1:67614ad:         throws Exception
1:67614ad: 	{
1:67614ad:         if ( useprocess == true )
1:67614ad:         {
1:67614ad:             // Create a process to run sysinfo
1:67614ad:     		Process pr = null;
1:67614ad: 			jvm javavm = null; // to quiet the compiler
1:67614ad:     		try
1:67614ad:     		{
1:67614ad:                 // Create the command line
1:67614ad:                 //System.out.println("jvmName: " + jvmName);
1:67614ad:                 if ( (jvmName == null) || (jvmName.length()==0) )
1:67614ad:                     jvmName = "jdk13";
1:67614ad:                 else if (jvmName.startsWith("jdk13"))
1:1430e70:                     jvmName = "jdk13";
1:67614ad: 
1:67614ad: 				javavm = jvm.getJvm(jvmName);
1:67614ad:                 if (javaCmd != null)
1:67614ad:                     javavm.setJavaCmd(javaCmd);
1:67614ad: 				
1:67614ad:                 if (javavm == null) System.out.println("WHOA, javavm is NULL");
1:67614ad:                 if (javavm == null) pw.println("WHOA, javavm is NULL");
1:67614ad: 
1:67614ad:                 if ( (classpath != null) && (classpath.length()>0) )
1:67614ad:                 {
1:67614ad:                     javavm.setClasspath(classpath);
1:67614ad:                 }
1:67614ad: 
1:3f5c48a: 				Vector<String> v = javavm.getCommandLine();
1:67614ad:                 v.addElement("org.apache.derby.tools.sysinfo");
1:67614ad:                 // Now convert the vector into a string array
1:67614ad:                 String[] sCmd = new String[v.size()];
1:67614ad:                 for (int i = 0; i < v.size(); i++)
1:67614ad:                 {
1:67614ad:                     sCmd[i] = (String)v.elementAt(i);
1:67614ad:                     //System.out.println(sCmd[i]);
1:67614ad:                 }
1:67614ad:                 
1:67614ad:                 pr = Runtime.getRuntime().exec(sCmd);
1:67614ad: 
1:67614ad:                 // We need the process inputstream to capture into the output file
1:67614ad:                 BackgroundStreamDrainer stdout =
1:67614ad:                     new BackgroundStreamDrainer(pr.getInputStream(), null);
1:67614ad:                 BackgroundStreamDrainer stderr =
1:67614ad:                     new BackgroundStreamDrainer(pr.getErrorStream(), null);
1:67614ad: 
1:67614ad:                 pr.waitFor();
1:67614ad:                 String result = HandleResult.handleResult(pr.exitValue(),
1:67614ad:                     stdout.getData(), stderr.getData(), pw);
1:67614ad:                 pw.flush();
1:67614ad: 
1:67614ad:                 if ( (framework != null) && (framework.length()>0) )
1:67614ad:                 {
1:67614ad:                     pw.println("Framework: " + framework);
1:67614ad:                 }
1:67614ad: 
1:67614ad:                 pr.destroy();
1:67614ad:                 pr = null;
1:67614ad:             }
1:67614ad:             catch(Throwable t)
1:67614ad:             {
1:67614ad:                 if (javavm == null) System.out.println("WHOA, javavm is NULL");
1:67614ad:                 if (javavm == null) pw.println("WHOA, javavm is NULL");
1:67614ad:                 System.out.println("Process exception: " + t);
1:67614ad:                 pw.println("Process exception: " + t);
1:67614ad:                 t.printStackTrace(pw);
1:67614ad:                 if (pr != null)
1:67614ad:                 {
1:67614ad:                     pr.destroy();
1:67614ad:                     pr = null;
1:67614ad:                 }
1:67614ad:             }
1:67614ad:         }
1:67614ad:         else
1:67614ad:         {
1:67614ad:             // For platforms where process exec fails or hangs
1:67614ad:             // useprocess=false and attempt to get some info
1:67614ad:             /*
1:67614ad:             pw.println(org.apache.derby.impl.tools.sysinfo.Main.javaSep);
2:67614ad:             org.apache.derby.impl.tools.sysinfo.Main.reportCloudscape(pw);
1:67614ad:             pw.println(org.apache.derby.impl.tools.sysinfo.Main.jbmsSep);
1:5d3c52a:             org.apache.derby.impl.tools.sysinfo.Main.reportDerby(pw);
1:67614ad:             pw.println(org.apache.derby.impl.tools.sysinfo.Main.licSep);
1:67614ad:             org.apache.derby.impl.tools.sysinfo.Main.printLicenseFile(pw);
1:67614ad:             */
1:67614ad:         }
1:67614ad:     }
1:67614ad: }
1:67614ad: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1: 				Vector<String> v = javavm.getCommandLine();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:1430e70
/////////////////////////////////////////////////////////////////////////
1:                     jvmName = "jdk13";
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: /***
1:  * SysInfoLog
1:  * Purpose: For a Suite or Test run, write out the
1:  * sysinfo to the suite or test output file
1:  *
1:  ***/
1: 
1: import java.io.*;
1: import java.util.Vector;
1: 
1: public class SysInfoLog
1: { 
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1:     public SysInfoLog()
1:     {
1:     }
1: 
1:     // Write out sysinfo for a suite or test
1:     public void exec(String jvmName, String javaCmd, String classpath,
1:         String framework, PrintWriter pw, boolean useprocess)
1:         throws Exception
1: 	{
1:         if ( useprocess == true )
1:         {
1:             // Create a process to run sysinfo
1:     		Process pr = null;
1: 			jvm javavm = null; // to quiet the compiler
1:     		try
1:     		{
1:                 // Create the command line
1:                 //System.out.println("jvmName: " + jvmName);
1:                 if ( (jvmName == null) || (jvmName.length()==0) )
1:                     jvmName = "jdk13";
1:                 else if (jvmName.startsWith("jdk13"))
0:                     jvmName = "jdk31";
1: 
1: 				javavm = jvm.getJvm(jvmName);
1:                 if (javaCmd != null)
1:                     javavm.setJavaCmd(javaCmd);
1: 				
1:                 if (javavm == null) System.out.println("WHOA, javavm is NULL");
1:                 if (javavm == null) pw.println("WHOA, javavm is NULL");
1: 
1:                 if ( (classpath != null) && (classpath.length()>0) )
1:                 {
1:                     javavm.setClasspath(classpath);
1:                 }
1: 
0: 				Vector v = javavm.getCommandLine();
1:                 v.addElement("org.apache.derby.tools.sysinfo");
1:                 // Now convert the vector into a string array
1:                 String[] sCmd = new String[v.size()];
1:                 for (int i = 0; i < v.size(); i++)
1:                 {
1:                     sCmd[i] = (String)v.elementAt(i);
1:                     //System.out.println(sCmd[i]);
1:                 }
1:                 
1:                 pr = Runtime.getRuntime().exec(sCmd);
1: 
1:                 // We need the process inputstream to capture into the output file
1:                 BackgroundStreamDrainer stdout =
1:                     new BackgroundStreamDrainer(pr.getInputStream(), null);
1:                 BackgroundStreamDrainer stderr =
1:                     new BackgroundStreamDrainer(pr.getErrorStream(), null);
1: 
1:                 pr.waitFor();
1:                 String result = HandleResult.handleResult(pr.exitValue(),
1:                     stdout.getData(), stderr.getData(), pw);
1:                 pw.flush();
1: 
1:                 if ( (framework != null) && (framework.length()>0) )
1:                 {
1:                     pw.println("Framework: " + framework);
1:                 }
1: 
1:                 pr.destroy();
1:                 pr = null;
1:             }
1:             catch(Throwable t)
1:             {
1:                 if (javavm == null) System.out.println("WHOA, javavm is NULL");
1:                 if (javavm == null) pw.println("WHOA, javavm is NULL");
1:                 System.out.println("Process exception: " + t);
1:                 pw.println("Process exception: " + t);
1:                 t.printStackTrace(pw);
1:                 if (pr != null)
1:                 {
1:                     pr.destroy();
1:                     pr = null;
1:                 }
1:             }
1:         }
1:         else
1:         {
1:             // For platforms where process exec fails or hangs
1:             // useprocess=false and attempt to get some info
1:             /*
1:             pw.println(org.apache.derby.impl.tools.sysinfo.Main.javaSep);
1:             org.apache.derby.impl.tools.sysinfo.Main.reportCloudscape(pw);
1:             pw.println(org.apache.derby.impl.tools.sysinfo.Main.jbmsSep);
1:             org.apache.derby.impl.tools.sysinfo.Main.reportCloudscape(pw);
1:             pw.println(org.apache.derby.impl.tools.sysinfo.Main.licSep);
1:             org.apache.derby.impl.tools.sysinfo.Main.printLicenseFile(pw);
1:             */
1:         }
1:     }
1: }
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:5d3c52a
/////////////////////////////////////////////////////////////////////////
1:             org.apache.derby.impl.tools.sysinfo.Main.reportDerby(pw);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.SysInfoLog
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: /***
0:  * SysInfoLog
0:  * Purpose: For a Suite or Test run, write out the
0:  * sysinfo to the suite or test output file
0:  *
0:  ***/
1: 
0: import java.io.*;
0: import java.util.Vector;
1: 
0: public class SysInfoLog
0: {
1: 
0:     public SysInfoLog()
0:     {
0:     }
1: 
0:     // Write out sysinfo for a suite or test
0:     public void exec(String jvmName, String javaCmd, String classpath,
0:         String framework, PrintWriter pw, boolean useprocess)
0:         throws Exception
0: 	{
0:         if ( useprocess == true )
0:         {
0:             // Create a process to run sysinfo
0:     		Process pr = null;
0: 			jvm javavm = null; // to quiet the compiler
0:     		try
0:     		{
0:                 // Create the command line
0:                 //System.out.println("jvmName: " + jvmName);
0:                 if ( (jvmName == null) || (jvmName.length()==0) )
0:                     jvmName = "jdk13";
0:                 else if (jvmName.startsWith("jdk13"))
0:                     jvmName = "jdk31";
1: 
0: 				javavm = jvm.getJvm(jvmName);
0:                 if (javaCmd != null)
0:                     javavm.setJavaCmd(javaCmd);
1: 				
0:                 if (javavm == null) System.out.println("WHOA, javavm is NULL");
0:                 if (javavm == null) pw.println("WHOA, javavm is NULL");
1: 
0:                 if ( (classpath != null) && (classpath.length()>0) )
0:                 {
0:                     javavm.setClasspath(classpath);
0:                 }
1: 
0: 				Vector v = javavm.getCommandLine();
0:                 v.addElement("org.apache.derby.tools.sysinfo");
0:                 // Now convert the vector into a string array
0:                 String[] sCmd = new String[v.size()];
0:                 for (int i = 0; i < v.size(); i++)
0:                 {
0:                     sCmd[i] = (String)v.elementAt(i);
0:                     //System.out.println(sCmd[i]);
0:                 }
1:                 
0:                 pr = Runtime.getRuntime().exec(sCmd);
1: 
0:                 // We need the process inputstream to capture into the output file
0:                 BackgroundStreamDrainer stdout =
0:                     new BackgroundStreamDrainer(pr.getInputStream(), null);
0:                 BackgroundStreamDrainer stderr =
0:                     new BackgroundStreamDrainer(pr.getErrorStream(), null);
1: 
0:                 pr.waitFor();
0:                 String result = HandleResult.handleResult(pr.exitValue(),
0:                     stdout.getData(), stderr.getData(), pw);
0:                 pw.flush();
1: 
0:                 if ( (framework != null) && (framework.length()>0) )
0:                 {
0:                     pw.println("Framework: " + framework);
0:                 }
1: 
0:                 pr.destroy();
0:                 pr = null;
0:             }
0:             catch(Throwable t)
0:             {
0:                 if (javavm == null) System.out.println("WHOA, javavm is NULL");
0:                 if (javavm == null) pw.println("WHOA, javavm is NULL");
0:                 System.out.println("Process exception: " + t);
0:                 pw.println("Process exception: " + t);
0:                 t.printStackTrace(pw);
0:                 if (pr != null)
0:                 {
0:                     pr.destroy();
0:                     pr = null;
0:                 }
0:             }
0:         }
0:         else
0:         {
0:             // For platforms where process exec fails or hangs
0:             // useprocess=false and attempt to get some info
0:             /*
0:             pw.println(org.apache.derby.impl.tools.sysinfo.Main.javaSep);
0:             org.apache.derby.impl.tools.sysinfo.Main.reportCloudscape(pw);
0:             pw.println(org.apache.derby.impl.tools.sysinfo.Main.jbmsSep);
0:             org.apache.derby.impl.tools.sysinfo.Main.reportCloudscape(pw);
0:             pw.println(org.apache.derby.impl.tools.sysinfo.Main.licSep);
0:             org.apache.derby.impl.tools.sysinfo.Main.printLicenseFile(pw);
0:             */
0:         }
0:     }
0: }
1: 
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.SysInfoLog
0: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================