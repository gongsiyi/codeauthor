1:b7730e4: /*
3:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.impl.sql.execute.RoutinePrivilegeInfo
1:b7730e4: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4: 	  http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: package org.apache.derby.impl.sql.execute;
1:b7730e4: 
1:b7730e4: import org.apache.derby.iapi.sql.Activation;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:b7730e4: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:b7730e4: import org.apache.derby.iapi.store.access.TransactionController;
1:08313de: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:b7730e4: import org.apache.derby.iapi.error.StandardException;
1:b7730e4: 
1:b7730e4: import java.util.Iterator;
1:b7730e4: import java.util.List;
1:b7730e4: 
1:b7730e4: public class RoutinePrivilegeInfo extends PrivilegeInfo
1:b7730e4: {
1:b7730e4: 	private AliasDescriptor aliasDescriptor;
1:08313de: 
1:b7730e4: 	public RoutinePrivilegeInfo( AliasDescriptor aliasDescriptor)
1:b7730e4: 	{
1:b7730e4: 		this.aliasDescriptor = aliasDescriptor;
1:b7730e4: 	}
1:b7730e4: 	
1:b7730e4: 	/**
1:b7730e4: 	 *	This is the guts of the Execution-time logic for GRANT/REVOKE of a routine execute privilege
1:b7730e4: 	 *
1:b7730e4: 	 * @param activation
1:b7730e4: 	 * @param grant true if grant, false if revoke
1:b7730e4: 	 * @param grantees a list of authorization ids (strings)
1:b7730e4: 	 *
1:b7730e4: 	 * @exception StandardException		Thrown on failure
1:b7730e4: 	 */
1:b7730e4: 	public void executeGrantRevoke( Activation activation,
1:b7730e4: 									boolean grant,
1:b7730e4: 									List grantees)
1:b7730e4: 		throws StandardException
1:b7730e4: 	{
1:b7730e4: 		// Check that the current user has permission to grant the privileges.
1:b7730e4: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:b7730e4: 		DataDictionary dd = lcc.getDataDictionary();
1:9f60172:         String currentUser = lcc.getCurrentUserId(activation);
1:b7730e4: 		TransactionController tc = lcc.getTransactionExecute();
1:b7730e4: 
1:b7730e4: 		// Check that the current user has permission to grant the privileges.
1:b7730e4: 		checkOwnership( currentUser,
1:b7730e4: 						aliasDescriptor,
1:50ba36b: 						dd.getSchemaDescriptor( aliasDescriptor.getSchemaUUID(), tc),
1:50ba36b: 						dd);
1:b7730e4: 		
1:b7730e4: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:b7730e4: 
1:b7730e4: 		RoutinePermsDescriptor routinePermsDesc = ddg.newRoutinePermsDescriptor( aliasDescriptor, currentUser);
1:b7730e4: 
1:b7730e4: 		dd.startWriting(lcc);
1:b7730e4: 		for( Iterator itr = grantees.iterator(); itr.hasNext();)
1:b7730e4: 		{
1:8c26fb6: 			// Keep track to see if any privileges are revoked by a revoke 
1:8c26fb6: 			// statement. If a privilege is not revoked, we need to raise a
1:8c26fb6: 			// warning.
1:8c26fb6: 			boolean privileges_revoked = false;
1:b7730e4: 			String grantee = (String) itr.next();
1:8c26fb6: 			if (dd.addRemovePermissionsDescriptor( grant, routinePermsDesc, grantee, tc)) 
1:8c26fb6: 			{
1:8c26fb6: 				privileges_revoked = true;	
1:71408ab: 				//Derby currently supports only restrict form of revoke execute
1:71408ab: 				//privilege and that is why, we are sending invalidation action 
1:71408ab: 				//as REVOKE_PRIVILEGE_RESTRICT rather than REVOKE_PRIVILEGE
1:763e014: 				dd.getDependencyManager().invalidateFor
1:763e014: 					(routinePermsDesc,
1:763e014: 					 DependencyManager.REVOKE_PRIVILEGE_RESTRICT, lcc);
1:763e014: 
1:763e014: 				// When revoking a privilege from a Routine we need to
1:763e014: 				// invalidate all GPSs refering to it. But GPSs aren't
1:763e014: 				// Dependents of RoutinePermsDescr, but of the
1:763e014: 				// AliasDescriptor itself, so we must send
1:763e014: 				// INTERNAL_RECOMPILE_REQUEST to the AliasDescriptor's
1:763e014: 				// Dependents.
1:763e014: 				dd.getDependencyManager().invalidateFor
1:763e014: 					(aliasDescriptor,
1:763e014: 					 DependencyManager.INTERNAL_RECOMPILE_REQUEST, lcc);
1:8c26fb6: 			}
1:8c26fb6: 			
1:8c26fb6: 			addWarningIfPrivilegeNotRevoked(activation, grant, privileges_revoked, grantee);
1:b7730e4: 		}
1:b7730e4: 	} // end of executeConstantAction
1:b7730e4: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:         String currentUser = lcc.getCurrentUserId(activation);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:763e014
/////////////////////////////////////////////////////////////////////////
1: 				dd.getDependencyManager().invalidateFor
1: 					(routinePermsDesc,
1: 					 DependencyManager.REVOKE_PRIVILEGE_RESTRICT, lcc);
1: 
1: 				// When revoking a privilege from a Routine we need to
1: 				// invalidate all GPSs refering to it. But GPSs aren't
1: 				// Dependents of RoutinePermsDescr, but of the
1: 				// AliasDescriptor itself, so we must send
1: 				// INTERNAL_RECOMPILE_REQUEST to the AliasDescriptor's
1: 				// Dependents.
1: 				dd.getDependencyManager().invalidateFor
1: 					(aliasDescriptor,
1: 					 DependencyManager.INTERNAL_RECOMPILE_REQUEST, lcc);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:8c26fb6
/////////////////////////////////////////////////////////////////////////
1: 			// Keep track to see if any privileges are revoked by a revoke 
1: 			// statement. If a privilege is not revoked, we need to raise a
1: 			// warning.
1: 			boolean privileges_revoked = false;
1: 			if (dd.addRemovePermissionsDescriptor( grant, routinePermsDesc, grantee, tc)) 
1: 			{
1: 				privileges_revoked = true;	
1: 			}
1: 			
1: 			addWarningIfPrivilegeNotRevoked(activation, grant, privileges_revoked, grantee);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:71408ab
/////////////////////////////////////////////////////////////////////////
0: 			if (dd.addRemovePermissionsDescriptor( grant, routinePermsDesc, grantee, tc))
1: 				//Derby currently supports only restrict form of revoke execute
1: 				//privilege and that is why, we are sending invalidation action 
1: 				//as REVOKE_PRIVILEGE_RESTRICT rather than REVOKE_PRIVILEGE
0:         		dd.getDependencyManager().invalidateFor(routinePermsDesc, DependencyManager.REVOKE_PRIVILEGE_RESTRICT, lcc);
commit:f8fa8cf
/////////////////////////////////////////////////////////////////////////
0:         		dd.getDependencyManager().invalidateFor(routinePermsDesc, DependencyManager.REVOKE_EXECUTE_PRIVILEGE, lcc);
commit:08313de
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
/////////////////////////////////////////////////////////////////////////
0: 			if (dd.addRemovePermissionsDescriptor( grant, routinePermsDesc, grantee, tc))					
0:         		dd.getDependencyManager().invalidateFor(routinePermsDesc, DependencyManager.REVOKE_PRIVILEGE, lcc);
1: 
commit:69e77e3
/////////////////////////////////////////////////////////////////////////
commit:ac100d6
/////////////////////////////////////////////////////////////////////////
0: 			// It is possible for grant statement to look like following
0: 			//   grant execute on function f_abs to mamata2, mamata3;
0: 			// This means that dd.addRemovePermissionsDescriptor will be called
0: 			// twice for routinePermsDesc, once for each grantee.
0: 			// First it's called for mamta2. After a row is inserted for mamta2 
0: 			// into SYS.SYSROUTINEPERMS, the routinePermsDesc's uuid will get 
0: 			// populated with the uuid of the row that just got inserted into 
0: 			// SYS.SYSROUTINEPERMS for mamta2
0: 			// Next, before dd.addRemovePermissionsDescriptor gets called for 
0: 			// MAMTA3, we should set the routinePermsDesc's uuid to null or 
0: 			// otherwise, we will think that there is a duplicate row getting
0: 			// inserted for the same uuid.
0:             if(grant)
0:             	routinePermsDesc.setUUID(null);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:50ba36b
/////////////////////////////////////////////////////////////////////////
1: 						dd.getSchemaDescriptor( aliasDescriptor.getSchemaUUID(), tc),
1: 						dd);
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.RoutinePrivilegeInfo
1: 
0:    Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: public class RoutinePrivilegeInfo extends PrivilegeInfo
1: {
1: 	private AliasDescriptor aliasDescriptor;
1: 
1: 	public RoutinePrivilegeInfo( AliasDescriptor aliasDescriptor)
1: 	{
1: 		this.aliasDescriptor = aliasDescriptor;
1: 	}
1: 	
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for GRANT/REVOKE of a routine execute privilege
1: 	 *
1: 	 * @param activation
1: 	 * @param grant true if grant, false if revoke
1: 	 * @param grantees a list of authorization ids (strings)
0: 	 * @param withGrantOption true if grant with grant option, false if not. always false if !grant
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void executeGrantRevoke( Activation activation,
1: 									boolean grant,
1: 									List grantees)
1: 		throws StandardException
1: 	{
1: 		// Check that the current user has permission to grant the privileges.
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
0: 		String currentUser = lcc.getAuthorizationId();
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 
1: 		// Check that the current user has permission to grant the privileges.
1: 		checkOwnership( currentUser,
1: 						aliasDescriptor,
0: 						dd.getSchemaDescriptor( aliasDescriptor.getSchemaUUID(), tc));
1: 		
1: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
1: 		RoutinePermsDescriptor routinePermsDesc = ddg.newRoutinePermsDescriptor( aliasDescriptor, currentUser);
1: 
1: 		dd.startWriting(lcc);
1: 		for( Iterator itr = grantees.iterator(); itr.hasNext();)
1: 		{
1: 			String grantee = (String) itr.next();
0: 			dd.addRemovePermissionsDescriptor( grant, routinePermsDesc, grantee, tc);
1: 		}
1: 	} // end of executeConstantAction
1: }
============================================================================