1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.XATransactionController
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: This interface allows access to commit,prepare,abort global transactions
1:eac0369: as part of a two phase commit protocol, during runtime.  
1:eac0369: These interfaces have been chosen to be exact implementations required to 
1:eac0369: implement the XAResource interfaces as part of the JTA standard extension.
1:eac0369: <P>
1:eac0369: It is expected that the following interfaces are only used during the 
1:eac0369: runtime portion of a 2 phase commit connection.
1:eac0369: <P>
1:eac0369: If a runtime exception causes a transaction abort (of a transaction that
1:eac0369: has not been successfully prepared), then the transaction will act as if 
1:eac0369: xa_rollback() had been called.  The transaction will be aborted and any
1:eac0369: other call other than destroy will throw exceptions.
1:eac0369: <P>
1:eac0369: The XAResource interface is a Java mapping of the industry standard XA resource
1:eac0369: manager interface.  Please refer to: X/Open CAE Specification - Distributed 
1:eac0369: Transaction Processing: The XA Specification, X/Open Document No. XO/CAE/91/300
1:eac0369: or ISBN 1 872630 24 3.
1:eac0369: <P>
1:eac0369: NOTE - all calls to this interface assume that the caller has insured that
1:eac0369: there is no active work being done on the local instance of the transaction 
1:eac0369: in question.  RESOLVE - not sure whether this means that the connection 
1:eac0369: associated with the transaction must be closed, or if it just means that
1:eac0369: synchronization has been provided to provide correct MT behavior from above.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface XATransactionController extends TransactionController
1:eac0369: {
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     public static final int XA_RDONLY = 1;
1:eac0369:     public static final int XA_OK     = 2;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method is called to commit the current XA global transaction.
1:eac0369:      * <p>
1:eac0369:      * Once this call has been made all other calls on this controller other
1:eac0369:      * than destroy will throw exceptions.
1:eac0369:      * <p>
2:eac0369:      *
1:eac0369:      * @param onePhase If true, the resource manager should use a one-phase
1:eac0369:      *                 commit protocol to commit the work done on behalf of 
1:eac0369:      *                 current xid.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void xa_commit(
1:eac0369:     boolean onePhase)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method is called to ask the resource manager to prepare for
1:eac0369:      * a transaction commit of the transaction specified in xid.
1:eac0369:      * <p>
1:eac0369:      * If XA_OK is returned then any call other than xa_commit() or xa_abort()
1:eac0369:      * will throw exceptions.  If XA_RDONLY is returned then any call other
1:eac0369:      * than destroy() will throw exceptions.
1:eac0369:      *
1:eac0369:      * @return         A value indicating the resource manager's vote on the
1:eac0369:      *                 the outcome of the transaction.  The possible values
1:eac0369:      *                 are:  XA_RDONLY or XA_OK.  If the resource manager wants
1:eac0369:      *                 to roll back the transaction, it should do so by 
1:eac0369:      *                 throwing an appropriate XAException in the prepare
1:eac0369:      *                 method.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public int xa_prepare()
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * rollback the current global transaction.
1:eac0369:      * <p>
1:eac0369:      * The given transaction is roll'ed back and it's history is not
1:eac0369:      * maintained in the transaction table or long term log.
1:eac0369:      * <p>
1:eac0369:      * Once this call has been made all other calls on this controller other
1:eac0369:      * than destroy will throw exceptions.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void xa_rollback()
1:eac0369:         throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.XATransactionController
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: /**
1: 
1: This interface allows access to commit,prepare,abort global transactions
1: as part of a two phase commit protocol, during runtime.  
1: These interfaces have been chosen to be exact implementations required to 
1: implement the XAResource interfaces as part of the JTA standard extension.
1: <P>
1: It is expected that the following interfaces are only used during the 
1: runtime portion of a 2 phase commit connection.
1: <P>
1: If a runtime exception causes a transaction abort (of a transaction that
1: has not been successfully prepared), then the transaction will act as if 
1: xa_rollback() had been called.  The transaction will be aborted and any
1: other call other than destroy will throw exceptions.
1: <P>
1: The XAResource interface is a Java mapping of the industry standard XA resource
1: manager interface.  Please refer to: X/Open CAE Specification - Distributed 
1: Transaction Processing: The XA Specification, X/Open Document No. XO/CAE/91/300
1: or ISBN 1 872630 24 3.
1: <P>
1: NOTE - all calls to this interface assume that the caller has insured that
1: there is no active work being done on the local instance of the transaction 
1: in question.  RESOLVE - not sure whether this means that the connection 
1: associated with the transaction must be closed, or if it just means that
1: synchronization has been provided to provide correct MT behavior from above.
1: 
1: **/
1: 
1: public interface XATransactionController extends TransactionController
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1:     public static final int XA_RDONLY = 1;
1:     public static final int XA_OK     = 2;
1: 
1:     /**
1:      * This method is called to commit the current XA global transaction.
1:      * <p>
1:      * Once this call has been made all other calls on this controller other
1:      * than destroy will throw exceptions.
1:      * <p>
1:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
1:      *
1:      * @param onePhase If true, the resource manager should use a one-phase
1:      *                 commit protocol to commit the work done on behalf of 
1:      *                 current xid.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void xa_commit(
1:     boolean onePhase)
1: 		throws StandardException;
1: 
1:     /**
1:      * This method is called to ask the resource manager to prepare for
1:      * a transaction commit of the transaction specified in xid.
1:      * <p>
1:      * If XA_OK is returned then any call other than xa_commit() or xa_abort()
1:      * will throw exceptions.  If XA_RDONLY is returned then any call other
1:      * than destroy() will throw exceptions.
1:      *
1:      * @return         A value indicating the resource manager's vote on the
1:      *                 the outcome of the transaction.  The possible values
1:      *                 are:  XA_RDONLY or XA_OK.  If the resource manager wants
1:      *                 to roll back the transaction, it should do so by 
1:      *                 throwing an appropriate XAException in the prepare
1:      *                 method.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public int xa_prepare()
1: 		throws StandardException;
1: 
1:     /**
1:      * rollback the current global transaction.
1:      * <p>
1:      * The given transaction is roll'ed back and it's history is not
1:      * maintained in the transaction table or long term log.
1:      * <p>
1:      * Once this call has been made all other calls on this controller other
1:      * than destroy will throw exceptions.
1:      * <p>
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void xa_rollback()
1:         throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: /**
0: 
0: This interface allows access to commit,prepare,abort global transactions
0: as part of a two phase commit protocol, during runtime.  
0: These interfaces have been chosen to be exact implementations required to 
0: implement the XAResource interfaces as part of the JTA standard extension.
0: <P>
0: It is expected that the following interfaces are only used during the 
0: runtime portion of a 2 phase commit connection.
0: <P>
0: If a runtime exception causes a transaction abort (of a transaction that
0: has not been successfully prepared), then the transaction will act as if 
0: xa_rollback() had been called.  The transaction will be aborted and any
0: other call other than destroy will throw exceptions.
0: <P>
0: The XAResource interface is a Java mapping of the industry standard XA resource
0: manager interface.  Please refer to: X/Open CAE Specification - Distributed 
0: Transaction Processing: The XA Specification, X/Open Document No. XO/CAE/91/300
0: or ISBN 1 872630 24 3.
0: <P>
0: NOTE - all calls to this interface assume that the caller has insured that
0: there is no active work being done on the local instance of the transaction 
0: in question.  RESOLVE - not sure whether this means that the connection 
0: associated with the transaction must be closed, or if it just means that
0: synchronization has been provided to provide correct MT behavior from above.
0: 
0: **/
0: 
0: public interface XATransactionController extends TransactionController
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0:     public static final int XA_RDONLY = 1;
0:     public static final int XA_OK     = 2;
0: 
0:     /**
0:      * This method is called to commit the current XA global transaction.
0:      * <p>
0:      * Once this call has been made all other calls on this controller other
0:      * than destroy will throw exceptions.
0:      * <p>
0:      *
0: 	 * @return The identifier to be used to open the conglomerate later.
0:      *
0:      * @param onePhase If true, the resource manager should use a one-phase
0:      *                 commit protocol to commit the work done on behalf of 
0:      *                 current xid.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void xa_commit(
0:     boolean onePhase)
0: 		throws StandardException;
0: 
0:     /**
0:      * This method is called to ask the resource manager to prepare for
0:      * a transaction commit of the transaction specified in xid.
0:      * <p>
0:      * If XA_OK is returned then any call other than xa_commit() or xa_abort()
0:      * will throw exceptions.  If XA_RDONLY is returned then any call other
0:      * than destroy() will throw exceptions.
0:      *
0:      * @return         A value indicating the resource manager's vote on the
0:      *                 the outcome of the transaction.  The possible values
0:      *                 are:  XA_RDONLY or XA_OK.  If the resource manager wants
0:      *                 to roll back the transaction, it should do so by 
0:      *                 throwing an appropriate XAException in the prepare
0:      *                 method.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public int xa_prepare()
0: 		throws StandardException;
0: 
0:     /**
0:      * rollback the current global transaction.
0:      * <p>
0:      * The given transaction is roll'ed back and it's history is not
0:      * maintained in the transaction table or long term log.
0:      * <p>
0:      * Once this call has been made all other calls on this controller other
0:      * than destroy will throw exceptions.
0:      * <p>
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void xa_rollback()
0:         throws StandardException;
0: }
============================================================================