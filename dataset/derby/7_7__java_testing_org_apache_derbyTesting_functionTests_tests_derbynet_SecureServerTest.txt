1:e0f1ffe: /*
24:e0f1ffe: 
1:e0f1ffe:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest
1:e0f1ffe: 
1:e0f1ffe:    Licensed to the Apache Software Foundation (ASF) under one or more
1:e0f1ffe:    contributor license agreements.  See the NOTICE file distributed with
1:e0f1ffe:    this work for additional information regarding copyright ownership.
1:e0f1ffe:    The ASF licenses this file to You under the Apache License, Version 2.0
1:e0f1ffe:    (the "License"); you may not use this file except in compliance with
1:e0f1ffe:    the License.  You may obtain a copy of the License at
1:e0f1ffe: 
1:e0f1ffe:       http://www.apache.org/licenses/LICENSE-2.0
1:e0f1ffe: 
1:e0f1ffe:    Unless required by applicable law or agreed to in writing, software
1:e0f1ffe:    distributed under the License is distributed on an "AS IS" BASIS,
1:e0f1ffe:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e0f1ffe:    See the License for the specific language governing permissions and
1:e0f1ffe:    limitations under the License.
1:e0f1ffe: 
2:e0f1ffe:  */
1:e0f1ffe: 
1:e0f1ffe: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:e0f1ffe: 
1:ea9b68b: import java.io.File;
1:7f53212: import java.io.IOException;
1:f69e1a2: import java.sql.Connection;
1:f69e1a2: import java.sql.DriverManager;
1:e0f1ffe: import java.util.ArrayList;
1:bdd8f6d: import java.util.Arrays;
1:e0f1ffe: import junit.framework.Test;
1:493b80e: import org.apache.derby.drda.NetworkServerControl;
1:1ae02c9: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:f69e1a2: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:493b80e: import org.apache.derbyTesting.junit.ClassLoaderTestSetup;
1:1c44e73: import org.apache.derbyTesting.junit.Derby;
1:e0f1ffe: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1:e0f1ffe: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:a63ab5e: import org.apache.derbyTesting.junit.SpawnedProcess;
1:c9c3c8e: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:e0f1ffe: import org.apache.derbyTesting.junit.TestConfiguration;
1:e0f1ffe: 
2:e0f1ffe: /**
1:e0f1ffe:  * This Junit test class tests whether the server comes up under a security
1:e0f1ffe:  * manager as expected.
1:e0f1ffe:  */
1:e0f1ffe: 
1:f69e1a2: public class SecureServerTest extends BaseJDBCTestCase
11:e0f1ffe: {
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     //
1:e0f1ffe:     // CONSTANTS
1:e0f1ffe:     //
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:f69e1a2: 
1:f69e1a2:     // basic properties file which tests that properties are picked up from derby.properties
1:f69e1a2:     private static  final   String  BASIC = "functionTests/tests/derbynet/SecureServerTest.derby.properties";
1:f69e1a2: 
1:f69e1a2:     private static  final   String  SST_USER_NAME="MARY";
1:f69e1a2:     private static  final   String  SST_PASSWORD = "marypwd";
1:f69e1a2:     
1:8726476:     private static  final   String  HOSTW = "0.0.0.0";
1:05524f7:     private static  final   String  ALTW = "0.00.000.0";
1:8726476:     private static  final   String  IPV6W = "::";
1:e0f1ffe: 
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     //
1:e0f1ffe:     // INNER CLASSES
1:e0f1ffe:     //
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe: 
1:63adae8:     /**
1:63adae8:      * <p>
1:e0f1ffe:      * Possible outcomes for the experiment of bringing up the server.
1:63adae8:      * </p>
1:63adae8:      */
1:e0f1ffe:     public  static  final   class   Outcome
1:63adae8:     {
1:e0f1ffe:         private boolean _serverShouldComeUp;
1:e0f1ffe:         private String      _expectedServerOutput;
1:63adae8: 
1:e0f1ffe:         public Outcome
1:63adae8:             (
1:e0f1ffe:              boolean serverShouldComeUp,
1:e0f1ffe:              String expectedServerOutput
1:e0f1ffe:              )
1:e0f1ffe:         {
1:e0f1ffe:             _serverShouldComeUp =  serverShouldComeUp;
1:e0f1ffe:             _expectedServerOutput = expectedServerOutput;
1:7f53212:         }
1:63adae8: 
1:e0f1ffe:         public  boolean serverShouldComeUp() { return _serverShouldComeUp; }
1:e0f1ffe:         public  String    expectedServerOutput() { return _expectedServerOutput; }
1:63adae8:     }
1:63adae8:     
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     //
1:e0f1ffe:     // STATE
1:e0f1ffe:     //
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:30644c8: 
1:e0f1ffe:     private static final Outcome RUNNING_SECURITY_NOT_BOOTED = new Outcome( true, "" );
1:30644c8:     private static final Outcome RUNNING_SECURITY_BOOTED = new Outcome( true,  serverBootedOK() );
1:e0f1ffe: 
1:e0f042a:     /** Reference to the enclosing NetworkServerTestSetup. */
1:e0f042a:     private NetworkServerTestSetup nsTestSetup;
1:e0f1ffe:         
1:e0f1ffe:     // startup state
1:e0f1ffe:     private boolean _unsecureSet;
1:e0f1ffe:     private boolean _authenticationRequired;
1:f69e1a2:     private String   _customDerbyProperties;
1:8726476:     private String _wildCardHost;
1:e0f1ffe: 
1:e0f1ffe:     // expected outcomes
1:e0f1ffe:     private Outcome _outcome;
1:e0f1ffe: 
1:e0f1ffe:     
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     //
1:e0f1ffe:     // CONSTRUCTORS
1:e0f1ffe:     //
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe: 
1:e0f1ffe:     public SecureServerTest
3:e0f1ffe:         (
1:e0f1ffe:          boolean unsecureSet,
1:e0f1ffe:          boolean authenticationRequired,
1:f69e1a2:          String     customDerbyProperties,
1:8726476:          String     wildCardHost,
1:c9c3c8e: 
1:e0f1ffe:          Outcome    outcome
1:e0f1ffe:         )
1:30644c8:     {
1:e0f1ffe:          super( "testServerStartup" );
1:e0f1ffe: 
1:e0f1ffe:          _unsecureSet =  unsecureSet;
1:e0f1ffe:          _authenticationRequired =  authenticationRequired;
1:f69e1a2:          _customDerbyProperties = customDerbyProperties;
1:8726476:          _wildCardHost = wildCardHost;
1:e0f1ffe: 
1:e0f1ffe:          _outcome = outcome;
1:63adae8:     }
1:e0f1ffe: 
1:493b80e:     public SecureServerTest(String fixture) {
1:493b80e:         super(fixture);
1:493b80e:     }
1:493b80e: 
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     //
1:e0f1ffe:     // JUnit MACHINERY
1:e0f1ffe:     //
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     
1:e0f1ffe:     /**
1:e0f1ffe:      * Tests to run.
1:e0f1ffe:      */
1:e0f1ffe:     public static Test suite()
1:e0f1ffe:     {
1:e0f1ffe:         //NetworkServerTestSetup.setWaitTime( 10000L );
1:e0f1ffe:         
1:1ae02c9:         BaseTestSuite      suite = new BaseTestSuite("SecureServerTest");
1:e0f1ffe: 
1:e0f1ffe:         // Server booting requires that we run from the jar files
1:e0f1ffe:         if ( !TestConfiguration.loadingFromJars() ) { return suite; }
1:1c44e73:         
1:1c44e73:         // Need derbynet.jar in the classpath!
1:1c44e73:         if (!Derby.hasServer())
1:1c44e73:             return suite;
1:e0f1ffe: 
1:e0f1ffe:         // O = Overriden
1:e0f1ffe:         // A = Authenticated
1:f69e1a2:         // C = Custom properties
1:8726476:         // W = Wildcard host
1:e0f1ffe:         //
1:f69e1a2:         //      .addTest( decorateTest( O,        A,       C,    W,    Outcome ) );
1:e0f1ffe:         //
1:e0f1ffe: 
1:8726476:         suite.addTest( decorateTest( false,  false, null, null, RUNNING_SECURITY_BOOTED ) );
1:8726476:         suite.addTest( decorateTest( false,  false, BASIC, null, RUNNING_SECURITY_BOOTED ) );
1:8726476:         suite.addTest( decorateTest( false,  true, null, null, RUNNING_SECURITY_BOOTED ) );
1:8726476:         suite.addTest( decorateTest( false,  true, null, HOSTW, RUNNING_SECURITY_BOOTED ) );
1:05524f7:         suite.addTest( decorateTest( false,  true, null, ALTW, RUNNING_SECURITY_BOOTED ) );
1:8726476: 
1:8726476:         // this wildcard port is rejected by the server right now
1:8726476:         //suite.addTest( decorateTest( false,  true, null, IPV6W, RUNNING_SECURITY_BOOTED ) );
1:8726476:         
1:493b80e:         suite.addTest( makeDerby6619Test() );
1:e0f1ffe:         return suite;
1:30644c8:     }
1:e0f1ffe: 
1:e0f1ffe: 
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     //
1:e0f1ffe:     // TEST DECORATION
1:e0f1ffe:     //
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     
1:e0f1ffe:     /**
1:e0f1ffe:      * <p>
1:e0f1ffe:      * Compose the required decorators to bring up the server in the correct
1:e0f1ffe:      * configuration.
1:e0f1ffe:      * </p>
1:e0f1ffe:      */
1:e0f1ffe:     private static  Test    decorateTest
1:e0f1ffe:         (
1:e0f1ffe:          boolean unsecureSet,
1:e0f1ffe:          boolean authenticationRequired,
1:f69e1a2:          String customDerbyProperties,
1:8726476:          String wildCardHost,
1:e0f1ffe:          
1:e0f1ffe:          Outcome outcome
1:e0f1ffe:         )
1:e0f1ffe:     {
1:e0f1ffe:         SecureServerTest            secureServerTest = new SecureServerTest
1:e0f1ffe:             (
1:e0f1ffe:              unsecureSet,
1:e0f1ffe:              authenticationRequired,
1:f69e1a2:              customDerbyProperties,
1:8726476:              wildCardHost,
1:e0f1ffe: 
1:e0f1ffe:              outcome
1:e0f042a:             );
1:e0f042a: 
1:f69e1a2:         String[]        startupProperties = getStartupProperties( authenticationRequired, customDerbyProperties );
1:8726476:         String[]        startupArgs = getStartupArgs( unsecureSet, wildCardHost );
1:e0f1ffe: 
1:e0f042a:         NetworkServerTestSetup networkServerTestSetup =
1:23c0fed:                 new NetworkServerTestSetup
1:e0f1ffe:             (
1:e0f1ffe:              secureServerTest,
1:e0f1ffe:              startupProperties,
1:e0f1ffe:              startupArgs,
1:a63ab5e:              secureServerTest._outcome.serverShouldComeUp()
1:63adae8:              );
1:e0f1ffe: 
1:e0f042a:         secureServerTest.nsTestSetup = networkServerTestSetup;
1:e0f042a: 
1:e0f042a:         Test testSetup =
1:e0f042a:             SecurityManagerSetup.noSecurityManager(networkServerTestSetup);
1:e0f1ffe: 
1:c9c3c8e:         // if using the custom derby.properties, copy the custom properties to a visible place
1:f69e1a2:         if ( customDerbyProperties != null )
1:c9c3c8e:         {
1:c9c3c8e:             testSetup = new SupportFilesSetup
1:c9c3c8e:                 (
1:c9c3c8e:                  testSetup,
1:c9c3c8e:                  null,
1:c9c3c8e:                  new String[] { "functionTests/tests/derbynet/SecureServerTest.derby.properties" },
1:c9c3c8e:                  null,
1:c9c3c8e:                  new String[] { "derby.properties" }
1:c9c3c8e:                  );
1:c9c3c8e:         }
1:c9c3c8e: 
1:6264d1e:         Test        test = TestConfiguration.defaultServerDecorator( testSetup );
1:204c040:         // DERBY-2109: add support for user credentials
1:204c040:         test = TestConfiguration.changeUserDecorator( test,
1:204c040:                                                       SST_USER_NAME,
1:204c040:                                                       SST_PASSWORD );
1:e0f1ffe: 
1:e0f1ffe:         return test;
13:e0f1ffe:     }
1:e0f1ffe: 
1:e0f1ffe:     /**
1:e0f1ffe:      * <p>
1:f69e1a2:      * Return an array of startup args suitable for booting a server.
1:e0f1ffe:      * </p>
1:e0f1ffe:      */
1:8726476:     private static  String[]    getStartupArgs( boolean setUnsecureOption, String wildCardHost )
1:e0f1ffe:     {
1:9d44c9e:         ArrayList<String> list = new ArrayList<String>();
1:e0f1ffe: 
1:e0f1ffe:         if ( setUnsecureOption )
1:e0f1ffe:         {
1:30644c8:             list.add( "-noSecurityManager" );
1:e0f1ffe:         }
1:e0f1ffe:         
1:8726476:         if ( wildCardHost != null )
1:f69e1a2:         {
1:f69e1a2:             list.add( NetworkServerTestSetup.HOST_OPTION );
1:8726476:             list.add( wildCardHost );
1:f69e1a2:         }
1:f69e1a2: 
1:9d44c9e:         return list.toArray(new String[list.size()]);
1:e0f1ffe:     }
1:e0f1ffe:     
1:e0f1ffe:     /**
1:e0f1ffe:      * <p>
1:e0f1ffe:      * Return a set of startup properties suitable for SystemPropertyTestSetup.
1:e0f1ffe:      * </p>
1:e0f1ffe:      */
1:f69e1a2:     private static  String[]  getStartupProperties( boolean authenticationRequired, String customDerbyProperties )
1:e0f1ffe:     {
1:9d44c9e:         ArrayList<String> list = new ArrayList<String>();
1:e0f1ffe: 
1:e0f1ffe:         if ( authenticationRequired )
1:e0f1ffe:         {
1:e0f1ffe:             list.add( "derby.connection.requireAuthentication=true" );
1:f69e1a2:             list.add( "derby.authentication.provider=BUILTIN" );
1:f69e1a2:             list.add( "derby.user." + SST_USER_NAME + "=" + SST_PASSWORD );
1:e0f1ffe:         }
1:e0f1ffe: 
1:f69e1a2:         if ( customDerbyProperties != null )
1:c9c3c8e:         {
1:c9c3c8e:             list.add( "derby.system.home=extinout" );
1:c9c3c8e:         }
1:c9c3c8e: 
1:9d44c9e:         return list.toArray(new String[list.size()]);
1:e0f1ffe:     }
1:e0f1ffe:     
1:493b80e:     // Policy which lacks the permission to set the context class loader.
1:493b80e:     final static String POLICY6619 =
1:493b80e:             "org/apache/derbyTesting/functionTests/" +
1:493b80e:             "tests/derbynet/SecureServerTest.policy";
1:493b80e: 
1:493b80e:     private static Test makeDerby6619Test() {
1:493b80e:         Test t = new SecureServerTest("test6619");
1:493b80e:         t = TestConfiguration.clientServerDecorator(t);
1:493b80e:         t = new SecurityManagerSetup(t, POLICY6619);
1:493b80e:         t = new ClassLoaderTestSetup(t);
1:493b80e:         return t;
1:493b80e:     }
1:493b80e: 
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     //
1:e0f1ffe:     // JUnit TESTS
1:e0f1ffe:     //
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     
1:493b80e:     public void test6619() throws Exception {
1:493b80e:         NetworkServerControl nsc =
1:493b80e:                 NetworkServerTestSetup.getNetworkServerControl();
1:493b80e:         NetworkServerTestSetup.waitForServerStart(nsc);
1:493b80e:          // non standard class loader, so expect to see the warning on derby.log
1:493b80e:         assertWarningDerby6619("derby.system.home", true);
1:493b80e:     }
1:493b80e: 
1:e0f1ffe:     /**
1:e0f1ffe:      * Verify if the server came up and if so, was a security manager installed.
1:e0f1ffe:      */
1:e0f1ffe:     public void testServerStartup()
2:e0f1ffe:         throws Exception
1:e0f1ffe:     {	
1:e0f1ffe:         String      myName = toString();
1:e0f1ffe:         boolean     serverCameUp = serverCameUp();
1:6d76f32:         String      serverOutput = getServerOutput();
1:e0f1ffe:         boolean     outputOK = ( serverOutput.indexOf( _outcome.expectedServerOutput() ) >= 0 );
1:e0f1ffe: 
1:e0f1ffe:         assertEquals( myName + ": serverCameUp = " + serverCameUp, _outcome.serverShouldComeUp(), serverCameUp );
1:7f53212: 
1:493b80e:         assertWarningDerby6619("user.dir", false); // standard class loader
1:dcfc481: 
1:1e0c703:         if (!(runsWithEmma() || runsWithJaCoCo())) {
1:dcfc481:             // With Emma we run without the security manager, so we can't
1:dcfc481:             // assert on seeing it.
1:dcfc481:             assertTrue( myName + "\nExpected: " +
1:dcfc481:                         _outcome.expectedServerOutput() +
1:dcfc481:                         "\nBut saw: " + serverOutput , outputOK );
1:dcfc481:         }
1:f69e1a2: 
1:f69e1a2:         //
1:f69e1a2:         // make sure that the default policy lets us connect to the server if the hostname was
1:f69e1a2:         // wildcarded (DERBY-2811)
1:f69e1a2:         //
1:8726476:         if ( _authenticationRequired && ( _wildCardHost != null ) ) { connectToServer(); }
1:63adae8: 
1:63adae8:         //
1:63adae8:         // make sure that we can run sysinfo and turn on tracing (DERBY-3086)
1:63adae8:         //
1:63adae8:         runsysinfo();
1:63adae8:         enableTracing();
1:ea9b68b:         setTraceDirectory();
1:ea9b68b:         disableTracing();
1:ea9b68b:         
1:ea9b68b:         
1:ea9b68b:     }
1:ea9b68b: 
1:ea9b68b:     private void disableTracing() throws Exception {
1:ea9b68b: 
1:bdd8f6d:         String traceOffOutput = runServerCommand(
1:bdd8f6d:                 new String[] { "trace", "off" });
1:ea9b68b: 
1:ea9b68b:         println( "Output for trace off command:\n\n" + traceOffOutput );
1:ea9b68b: 
1:ea9b68b:         if ( traceOffOutput.indexOf( "Trace turned off for all sessions." ) < 0 )
1:ea9b68b:         { fail( "Failed to turn trace off:\n\n:" + traceOffOutput ); }
1:ea9b68b:     }
1:ea9b68b: 
1:ea9b68b:     private void setTraceDirectory() throws Exception {
1:ea9b68b: 
1:bdd8f6d:         String  traceDirectoryOutput = runServerCommand(
1:bdd8f6d:                 new String[] { "tracedirectory", "trace" });
1:ea9b68b:         println( "Output for tracedirectory trace command:\n\n" + traceDirectoryOutput );
1:ea9b68b: 
1:ea9b68b:         if ( traceDirectoryOutput.indexOf( "Trace directory changed to trace." ) < 0 )
1:ea9b68b:         { fail( "Unexpected output in setting trace directory:" + traceDirectoryOutput ); }
1:ea9b68b: 
1:bdd8f6d:         String pingOutput = runServerCommand( new String[] { "ping" } );
1:ea9b68b: 
1:ea9b68b:         if (pingOutput.indexOf("Connection obtained for host:") < 0)
1:ea9b68b:         { fail ("Failed ping after changing trace directory: " + pingOutput);}
1:ea9b68b:         assertTrue("directory trace does not exist",
1:ea9b68b:                 PrivilegedFileOpsForTests.exists(new File("trace")));
1:f69e1a2:     }
1:f69e1a2: 
1:f69e1a2:     private void    connectToServer()
1:f69e1a2:         throws Exception
1:f69e1a2:     {
1:204c040:         final TestConfiguration config = getTestConfiguration();
1:204c040:         String  url
1:204c040:             = ( "jdbc:derby://localhost:" + config.getPort()
1:204c040:                 + "/" + "wombat;create=true"
1:204c040:                 + ";user=" + config.getUserName()
1:204c040:                 + ";password=" + config.getUserPassword() );
1:f69e1a2: 
1:f69e1a2:         println( "XXX in connectToServer(). url = " + url );
1:f69e1a2: 
1:f69e1a2:         // just try to get a connection
1:f69e1a2:         Class.forName( "org.apache.derby.jdbc.ClientDriver" );
1:f69e1a2:         
1:f69e1a2:         Connection  conn = DriverManager.getConnection(  url );
1:f69e1a2: 
1:f69e1a2:         assertNotNull( "Connection should not be null...", conn );
1:f69e1a2: 
1:f69e1a2:         conn.close();
1:e0f1ffe:     }
1:e0f1ffe: 
1:63adae8:     private void    runsysinfo()
1:63adae8:         throws Exception
1:63adae8:     {
1:bdd8f6d:         String          sysinfoOutput = runServerCommand(
1:bdd8f6d:                 new String[] { "sysinfo" } );
1:63adae8: 
1:63adae8:         if ( sysinfoOutput.indexOf( "Security Exception:" ) > -1 )
1:63adae8:         { fail( "Security exceptions in sysinfo output:\n\n:" + sysinfoOutput ); }
1:63adae8:     }
1:63adae8: 
1:63adae8:     private void    enableTracing()
1:63adae8:         throws Exception
1:63adae8:     {
1:bdd8f6d:         String          traceOnOutput = runServerCommand(
1:bdd8f6d:                 new String[] { "trace",  "on" } );
1:63adae8: 
1:63adae8:         println( "Output for trace on command:\n\n" + traceOnOutput );
1:63adae8: 
1:63adae8:         if ( traceOnOutput.indexOf( "Trace turned on for all sessions." ) < 0 )
1:63adae8:         { fail( "Security exceptions in output of trace enabling command:\n\n:" + traceOnOutput ); }
1:63adae8:     }
1:63adae8:     
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     //
1:e0f1ffe:     // Object OVERLOADS
1:e0f1ffe:     //
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe: 
1:e0f1ffe:     public String toString()
1:e0f1ffe:     {
1:9d44c9e:         StringBuilder    buffer = new StringBuilder();
1:e0f1ffe: 
1:e0f1ffe:         buffer.append( "SecureServerTest( " );
1:c9c3c8e:         buffer.append( "Opened = " ); buffer.append( _unsecureSet);
1:c9c3c8e:         buffer.append( ", Authenticated= " ); buffer.append( _authenticationRequired );
1:f69e1a2:         buffer.append( ", CustomDerbyProperties= " ); buffer.append( _customDerbyProperties );
1:8726476:         buffer.append( ", WildCardHost= " ); buffer.append( _wildCardHost );
1:e0f1ffe:         buffer.append( " )" );
1:e0f1ffe: 
1:e0f1ffe:         return buffer.toString();
1:e0f1ffe:     }
1:e0f1ffe:     
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe:     //
1:e0f1ffe:     // MINIONS
1:e0f1ffe:     //
1:e0f1ffe:     ///////////////////////////////////////////////////////////////////////////////////
1:e0f1ffe: 
1:e0f1ffe:     /**
1:e0f1ffe:      * <p>
1:63adae8:      * Run a NetworkServerControl command.
1:e0f1ffe:      * </p>
1:e0f1ffe:      */
1:bdd8f6d:     private String    runServerCommand( String[] commandSpecifics )
1:63adae8:         throws Exception
1:63adae8:     {
1:63adae8:         String          portNumber = Integer.toString( getTestConfiguration().getPort() );
1:63adae8: 
1:9d44c9e:         ArrayList<String> cmdList = new ArrayList<String>();
1:bdd8f6d:         cmdList.add("-Demma.verbosity.level=silent");
1:bdd8f6d:         cmdList.add("org.apache.derby.drda.NetworkServerControl");
1:bdd8f6d:         cmdList.add("-p");
1:bdd8f6d:         cmdList.add(portNumber);
1:bdd8f6d:         cmdList.addAll(Arrays.asList(commandSpecifics));
1:63adae8: 
1:bdd8f6d:         String[] cmd = (String[]) cmdList.toArray(commandSpecifics);
1:63adae8: 
1:bdd8f6d:         Process serverProcess = execJavaCmd(cmd);
1:63adae8:         
1:a63ab5e:         SpawnedProcess spawned = new SpawnedProcess(serverProcess,
1:bdd8f6d:                 cmdList.toString());
1:a63ab5e:         
1:a63ab5e:         // Ensure it completes without failures.
1:04846d1:         assertEquals(0, spawned.complete());
1:a63ab5e:         
1:a63ab5e:         return spawned.getFullServerOutput();
1:63adae8:     }
1:63adae8: 
1:e0f1ffe:     private String  getServerOutput()
1:63adae8:         throws Exception
1:63adae8:     {
1:a63ab5e:         return nsTestSetup.getServerProcess().getNextServerOutput();
1:63adae8:     }
1:e0f1ffe: 
1:30644c8:     private static  String  serverBootedOK()
1:63adae8:     {
1:30644c8:         return "Security manager installed using the Basic server security policy.";
1:63adae8:     }
1:e0f1ffe: 
1:e0f1ffe:     private boolean serverCameUp()
1:e0f1ffe:         throws Exception
1:e0f1ffe:     {
1:0c8f7b8:         return NetworkServerTestSetup.pingForServerUp(
1:e0f042a:             NetworkServerTestSetup.getNetworkServerControl(),
1:a63ab5e:             nsTestSetup.getServerProcess().getProcess(), true);
1:e0f1ffe:     }
1:e0f1ffe: 
1:7f53212:     final String[] expected6619 =
1:7f53212:          new String[]{
1:7f53212:              "WARNING: cannot set the context class loader due to a " +
1:7f53212:                  "security exception:",
1:7f53212:              "This may lead to class loader leak"};
1:493b80e: 
1:7f53212: 
1:493b80e:     private void assertWarningDerby6619(String logLocation, boolean expected)
1:493b80e:             throws IOException {
1:493b80e: 
1:7f53212:         final String logFileName =
1:493b80e:                 getSystemProperty(logLocation) + File.separator + "derby.log";
1:493b80e:         if (DerbyNetAutoStartTest.checkLog(logFileName, expected6619)) {
1:493b80e:             if (!expected) {
1:493b80e:                 fail("Expected no warning on derby.log cf DERBY-6619");
1:493b80e:             }
1:493b80e:         } else {
1:493b80e:             if (expected) {
1:493b80e:                 fail("Expected warning on derby.log cf DERBY-6619");
1:493b80e:             }
1:7f53212:         }
1:7f53212:     }
1:e0f1ffe: }
1:e0f1ffe: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:493b80e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.drda.NetworkServerControl;
1: import org.apache.derbyTesting.junit.ClassLoaderTestSetup;
/////////////////////////////////////////////////////////////////////////
1:     public SecureServerTest(String fixture) {
1:         super(fixture);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         suite.addTest( makeDerby6619Test() );
/////////////////////////////////////////////////////////////////////////
1:     // Policy which lacks the permission to set the context class loader.
1:     final static String POLICY6619 =
1:             "org/apache/derbyTesting/functionTests/" +
1:             "tests/derbynet/SecureServerTest.policy";
1: 
1:     private static Test makeDerby6619Test() {
1:         Test t = new SecureServerTest("test6619");
1:         t = TestConfiguration.clientServerDecorator(t);
1:         t = new SecurityManagerSetup(t, POLICY6619);
1:         t = new ClassLoaderTestSetup(t);
1:         return t;
1:     }
1: 
1:     public void test6619() throws Exception {
1:         NetworkServerControl nsc =
1:                 NetworkServerTestSetup.getNetworkServerControl();
1:         NetworkServerTestSetup.waitForServerStart(nsc);
1:          // non standard class loader, so expect to see the warning on derby.log
1:         assertWarningDerby6619("derby.system.home", true);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertWarningDerby6619("user.dir", false); // standard class loader
/////////////////////////////////////////////////////////////////////////
1: 
1:     private void assertWarningDerby6619(String logLocation, boolean expected)
1:             throws IOException {
1: 
1:                 getSystemProperty(logLocation) + File.separator + "derby.log";
1:         if (DerbyNetAutoStartTest.checkLog(logFileName, expected6619)) {
1:             if (!expected) {
1:                 fail("Expected no warning on derby.log cf DERBY-6619");
1:             }
1:         } else {
1:             if (expected) {
1:                 fail("Expected warning on derby.log cf DERBY-6619");
1:             }
commit:f743fbc
/////////////////////////////////////////////////////////////////////////
0:                 getSystemProperty("user.dir") + File.separator + "derby.log";
commit:7f53212
/////////////////////////////////////////////////////////////////////////
0: import java.io.BufferedReader;
0: import java.io.FileInputStream;
1: import java.io.IOException;
0: import java.io.InputStreamReader;
/////////////////////////////////////////////////////////////////////////
0:         if (!_unsecureSet) {
0:             assertWarningDerby6619();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:     final String[] expected6619 =
1:          new String[]{
1:              "WARNING: cannot set the context class loader due to a " +
1:                  "security exception:",
1:              "This may lead to class loader leak"};
1: 
0:     private void assertWarningDerby6619() throws IOException {
1:         final String logFileName =
0:                 getSystemProperty("derby.system.home").replace("/system","") +
0:                 File.separator + "/derby.log";
0:         if (!DerbyNetAutoStartTest.checkLog(logFileName, expected6619)) {
0:             fail("Expected warning on derby.log cf DERBY-6619");
1:         }
1:     }
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite      suite = new BaseTestSuite("SecureServerTest");
commit:6d76f32
/////////////////////////////////////////////////////////////////////////
1:         String      serverOutput = getServerOutput();
commit:dcfc481
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (!runsWithEmma()) {
1:             // With Emma we run without the security manager, so we can't
1:             // assert on seeing it.
1:             assertTrue( myName + "\nExpected: " +
1:                         _outcome.expectedServerOutput() +
1:                         "\nBut saw: " + serverOutput , outputOK );
1:         }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9d44c9e
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<String> list = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
1:         return list.toArray(new String[list.size()]);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<String> list = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
1:         return list.toArray(new String[list.size()]);
/////////////////////////////////////////////////////////////////////////
1:         StringBuilder    buffer = new StringBuilder();
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<String> cmdList = new ArrayList<String>();
commit:bdd8f6d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:         String traceOffOutput = runServerCommand(
1:                 new String[] { "trace", "off" });
/////////////////////////////////////////////////////////////////////////
1:         String  traceDirectoryOutput = runServerCommand(
1:                 new String[] { "tracedirectory", "trace" });
1:         String pingOutput = runServerCommand( new String[] { "ping" } );
/////////////////////////////////////////////////////////////////////////
1:         String          sysinfoOutput = runServerCommand(
1:                 new String[] { "sysinfo" } );
/////////////////////////////////////////////////////////////////////////
1:         String          traceOnOutput = runServerCommand(
1:                 new String[] { "trace",  "on" } );
/////////////////////////////////////////////////////////////////////////
1:     private String    runServerCommand( String[] commandSpecifics )
0:         ArrayList cmdList = new ArrayList();
1:         cmdList.add("-Demma.verbosity.level=silent");
1:         cmdList.add("org.apache.derby.drda.NetworkServerControl");
1:         cmdList.add("-p");
1:         cmdList.add(portNumber);
1:         cmdList.addAll(Arrays.asList(commandSpecifics));
1:         String[] cmd = (String[]) cmdList.toArray(commandSpecifics);
1:         Process serverProcess = execJavaCmd(cmd);
1:                 cmdList.toString());
commit:e0f042a
/////////////////////////////////////////////////////////////////////////
1:     /** Reference to the enclosing NetworkServerTestSetup. */
1:     private NetworkServerTestSetup nsTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerTestSetup networkServerTestSetup =
/////////////////////////////////////////////////////////////////////////
1:              );
1: 
1:         secureServerTest.nsTestSetup = networkServerTestSetup;
1: 
1:         Test testSetup =
1:             SecurityManagerSetup.noSecurityManager(networkServerTestSetup);
/////////////////////////////////////////////////////////////////////////
0:         return NetworkServerTestSetup.pingForServerStart(
1:             NetworkServerTestSetup.getNetworkServerControl(),
0:             nsTestSetup.getServerProcess());
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:1e0c703
/////////////////////////////////////////////////////////////////////////
1:         if (!(runsWithEmma() || runsWithJaCoCo())) {
commit:04846d1
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(0, spawned.complete());
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:f23a20f
/////////////////////////////////////////////////////////////////////////
0:         buffer.append( getJavaExecutableName() + " -classpath " );
commit:ea9b68b
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
/////////////////////////////////////////////////////////////////////////
1:         setTraceDirectory();
1:         disableTracing();
1:         
1:         
1:     }
1: 
1:     private void disableTracing() throws Exception {
1: 
0:         String traceOffOutput = runServerCommand( "trace off" );
1: 
1:         println( "Output for trace off command:\n\n" + traceOffOutput );
1: 
1:         if ( traceOffOutput.indexOf( "Trace turned off for all sessions." ) < 0 )
1:         { fail( "Failed to turn trace off:\n\n:" + traceOffOutput ); }
1:     }
1: 
1:     private void setTraceDirectory() throws Exception {
1: 
0:         String  traceDirectoryOutput = runServerCommand( "tracedirectory trace" );
1:         println( "Output for tracedirectory trace command:\n\n" + traceDirectoryOutput );
1: 
1:         if ( traceDirectoryOutput.indexOf( "Trace directory changed to trace." ) < 0 )
1:         { fail( "Unexpected output in setting trace directory:" + traceDirectoryOutput ); }
1: 
0:         String pingOutput = runServerCommand( "ping" );
1: 
1:         if (pingOutput.indexOf("Connection obtained for host:") < 0)
1:         { fail ("Failed ping after changing trace directory: " + pingOutput);}
1:         assertTrue("directory trace does not exist",
1:                 PrivilegedFileOpsForTests.exists(new File("trace")));
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a63ab5e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.SpawnedProcess;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:              secureServerTest._outcome.serverShouldComeUp()
/////////////////////////////////////////////////////////////////////////
1:         SpawnedProcess spawned = new SpawnedProcess(serverProcess,
0:                 commandSpecifics);
1:         
1:         // Ensure it completes without failures.
0:         assertEquals(0, spawned.complete(false));
1:         
1:         return spawned.getFullServerOutput();
1:         return nsTestSetup.getServerProcess().getNextServerOutput();
/////////////////////////////////////////////////////////////////////////
1:             nsTestSetup.getServerProcess().getProcess(), true);
commit:204c040
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-2109: add support for user credentials
1:         test = TestConfiguration.changeUserDecorator( test,
1:                                                       SST_USER_NAME,
1:                                                       SST_PASSWORD );
/////////////////////////////////////////////////////////////////////////
1:         final TestConfiguration config = getTestConfiguration();
1:         String  url
1:             = ( "jdbc:derby://localhost:" + config.getPort()
1:                 + "/" + "wombat;create=true"
1:                 + ";user=" + config.getUserName()
1:                 + ";password=" + config.getUserPassword() );
commit:b5f6067
/////////////////////////////////////////////////////////////////////////
0:         buffer.append( " -Demma.verbosity.level=silent");
commit:433c058
/////////////////////////////////////////////////////////////////////////
commit:23c0fed
/////////////////////////////////////////////////////////////////////////
0:         Test  testSetup = SecurityManagerSetup.noSecurityManager(
1:                 new NetworkServerTestSetup
/////////////////////////////////////////////////////////////////////////
0:              ));
/////////////////////////////////////////////////////////////////////////
commit:1c44e73
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.Derby;
/////////////////////////////////////////////////////////////////////////
0:         TestSuite       suite = new TestSuite("SecureServerTest");
1:         
1:         // Need derbynet.jar in the classpath!
1:         if (!Derby.hasServer())
1:             return suite;
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:0c8f7b8
/////////////////////////////////////////////////////////////////////////
1:         return NetworkServerTestSetup.pingForServerUp(
0:             nsTestSetup.getServerProcess(), true);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:63adae8
/////////////////////////////////////////////////////////////////////////
0: import java.security.AccessController;
0: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1: 
1:         //
1:         // make sure that we can run sysinfo and turn on tracing (DERBY-3086)
1:         //
1:         runsysinfo();
1:         enableTracing();
/////////////////////////////////////////////////////////////////////////
1:     private void    runsysinfo()
1:         throws Exception
1:     {
0:         String          sysinfoOutput = runServerCommand( "sysinfo" );
1: 
1:         if ( sysinfoOutput.indexOf( "Security Exception:" ) > -1 )
1:         { fail( "Security exceptions in sysinfo output:\n\n:" + sysinfoOutput ); }
1:     }
1: 
1:     private void    enableTracing()
1:         throws Exception
1:     {
0:         String          traceOnOutput = runServerCommand( "trace on" );
1: 
1:         println( "Output for trace on command:\n\n" + traceOnOutput );
1: 
1:         if ( traceOnOutput.indexOf( "Trace turned on for all sessions." ) < 0 )
1:         { fail( "Security exceptions in output of trace enabling command:\n\n:" + traceOnOutput ); }
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Run a NetworkServerControl command.
1:      * </p>
1:      */
0:     private String    runServerCommand( String commandSpecifics )
1:         throws Exception
1:     {
1:         String          portNumber = Integer.toString( getTestConfiguration().getPort() );
0:         StringBuffer    buffer = new StringBuffer();
0:         String          classpath = getSystemProperty( "java.class.path" );
1: 
0:         buffer.append( "java -classpath " );
0:         buffer.append( classpath );
0:         buffer.append( " org.apache.derby.drda.NetworkServerControl -p " + portNumber + " " + commandSpecifics );
1: 
0:         final   String  command = buffer.toString();
1: 
0:         println( "Server command is " + command );
1: 
0:         Process     serverProcess = (Process) AccessController.doPrivileged
1:             (
0:              new PrivilegedAction()
1:              {
0:                  public Object run()
1:                  {
0:                      Process    result = null;
0:                      try {
0:                         result = Runtime.getRuntime().exec( command );
0:                      } catch (Exception ex) {
0:                          ex.printStackTrace();
1:                      }
1:                      
0:                      return result;
1:                  }
1:              }
1:             );
1: 
0:         InputStream is = serverProcess.getInputStream();
1:         
0:         return getProcessOutput( is, 10000 );
1:     }
1: 
0:         return getProcessOutput( _inputStreamHolder[ 0 ], 1000 );
1:     }
0:     private String  getProcessOutput( InputStream is, int bufferLength )
1:         throws Exception
1:     {
0:         byte[]          inputBuffer = new byte[ bufferLength ];
commit:05524f7
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String  ALTW = "0.00.000.0";
/////////////////////////////////////////////////////////////////////////
1:         suite.addTest( decorateTest( false,  true, null, ALTW, RUNNING_SECURITY_BOOTED ) );
commit:8726476
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String  HOSTW = "0.0.0.0";
1:     private static  final   String  IPV6W = "::";
/////////////////////////////////////////////////////////////////////////
1:     private String _wildCardHost;
/////////////////////////////////////////////////////////////////////////
1:          String     wildCardHost,
/////////////////////////////////////////////////////////////////////////
1:          _wildCardHost = wildCardHost;
/////////////////////////////////////////////////////////////////////////
1:         // W = Wildcard host
1:         suite.addTest( decorateTest( false,  false, null, null, RUNNING_SECURITY_BOOTED ) );
1:         suite.addTest( decorateTest( false,  false, BASIC, null, RUNNING_SECURITY_BOOTED ) );
1:         suite.addTest( decorateTest( false,  true, null, null, RUNNING_SECURITY_BOOTED ) );
1:         suite.addTest( decorateTest( false,  true, null, HOSTW, RUNNING_SECURITY_BOOTED ) );
1: 
1:         // this wildcard port is rejected by the server right now
1:         //suite.addTest( decorateTest( false,  true, null, IPV6W, RUNNING_SECURITY_BOOTED ) );
1:         
0:         suite.addTest( decorateTest( true,  false, null, null, RUNNING_SECURITY_NOT_BOOTED ) );
0:         suite.addTest( decorateTest( true,  true, null, null, RUNNING_SECURITY_NOT_BOOTED ) );
/////////////////////////////////////////////////////////////////////////
1:          String wildCardHost,
/////////////////////////////////////////////////////////////////////////
1:              wildCardHost,
1:         String[]        startupArgs = getStartupArgs( unsecureSet, wildCardHost );
/////////////////////////////////////////////////////////////////////////
1:     private static  String[]    getStartupArgs( boolean setUnsecureOption, String wildCardHost )
/////////////////////////////////////////////////////////////////////////
1:         if ( wildCardHost != null )
1:             list.add( wildCardHost );
/////////////////////////////////////////////////////////////////////////
1:         if ( _authenticationRequired && ( _wildCardHost != null ) ) { connectToServer(); }
/////////////////////////////////////////////////////////////////////////
1:         buffer.append( ", WildCardHost= " ); buffer.append( _wildCardHost );
commit:f69e1a2
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.DriverManager;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
/////////////////////////////////////////////////////////////////////////
1: public class SecureServerTest extends BaseJDBCTestCase
1: 
1:     // basic properties file which tests that properties are picked up from derby.properties
1:     private static  final   String  BASIC = "functionTests/tests/derbynet/SecureServerTest.derby.properties";
1: 
1:     private static  final   String  SST_USER_NAME="MARY";
1:     private static  final   String  SST_PASSWORD = "marypwd";
0:     private static  final   String  DERBY_HOSTNAME_WILDCARD = "0.0.0.0";
1: 
/////////////////////////////////////////////////////////////////////////
1:     private String   _customDerbyProperties;
0:     private boolean _useWildCardHost;
/////////////////////////////////////////////////////////////////////////
1:          String     customDerbyProperties,
0:          boolean    useWildCardHost,
/////////////////////////////////////////////////////////////////////////
1:          _customDerbyProperties = customDerbyProperties;
0:          _useWildCardHost = useWildCardHost;
/////////////////////////////////////////////////////////////////////////
1:         // C = Custom properties
0:         // W = Use wildcard host
1:         //      .addTest( decorateTest( O,        A,       C,    W,    Outcome ) );
0:         suite.addTest( decorateTest( false,  false, null, false, RUNNING_SECURITY_BOOTED ) );
0:         suite.addTest( decorateTest( false,  false, BASIC, false, RUNNING_SECURITY_BOOTED ) );
0:         suite.addTest( decorateTest( false,  true, null, false, RUNNING_SECURITY_BOOTED ) );
0:         suite.addTest( decorateTest( false,  true, null, true, RUNNING_SECURITY_BOOTED ) );
0:         suite.addTest( decorateTest( true,  false, null, false, RUNNING_SECURITY_NOT_BOOTED ) );
0:         suite.addTest( decorateTest( true,  true, null, false, RUNNING_SECURITY_NOT_BOOTED ) );
/////////////////////////////////////////////////////////////////////////
1:          String customDerbyProperties,
0:          boolean    useWildCardHost,
/////////////////////////////////////////////////////////////////////////
1:              customDerbyProperties,
0:              useWildCardHost,
1:         String[]        startupProperties = getStartupProperties( authenticationRequired, customDerbyProperties );
0:         String[]        startupArgs = getStartupArgs( unsecureSet, useWildCardHost );
/////////////////////////////////////////////////////////////////////////
1:         if ( customDerbyProperties != null )
/////////////////////////////////////////////////////////////////////////
1:      * Return an array of startup args suitable for booting a server.
0:     private static  String[]    getStartupArgs( boolean setUnsecureOption, boolean useWildCardHost )
/////////////////////////////////////////////////////////////////////////
0:         if ( useWildCardHost )
1:         {
1:             list.add( NetworkServerTestSetup.HOST_OPTION );
0:             list.add( DERBY_HOSTNAME_WILDCARD );
1:         }
1:         
/////////////////////////////////////////////////////////////////////////
1:     private static  String[]  getStartupProperties( boolean authenticationRequired, String customDerbyProperties )
1:             list.add( "derby.authentication.provider=BUILTIN" );
1:             list.add( "derby.user." + SST_USER_NAME + "=" + SST_PASSWORD );
1:         if ( customDerbyProperties != null )
/////////////////////////////////////////////////////////////////////////
1: 
1:         //
1:         // make sure that the default policy lets us connect to the server if the hostname was
1:         // wildcarded (DERBY-2811)
1:         //
0:         if ( _authenticationRequired && _useWildCardHost ) { connectToServer(); }
1:     }
1: 
1:     private void    connectToServer()
1:         throws Exception
1:     {
0:         String  url =
0:             "jdbc:derby://localhost:" + getTestConfiguration().getPort() + "/" + "wombat;create=true" +
0:             ";user=" + SST_USER_NAME + ";password=" + SST_PASSWORD;
1: 
1:         println( "XXX in connectToServer(). url = " + url );
1: 
1:         // just try to get a connection
1:         Class.forName( "org.apache.derby.jdbc.ClientDriver" );
1:         
1:         Connection  conn = DriverManager.getConnection(  url );
1: 
1:         assertNotNull( "Connection should not be null...", conn );
1: 
1:         conn.close();
/////////////////////////////////////////////////////////////////////////
1:         buffer.append( ", CustomDerbyProperties= " ); buffer.append( _customDerbyProperties );
0:         buffer.append( ", UsingWildCardHost= " ); buffer.append( _useWildCardHost );
commit:84f4b0a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest( decorateTest( false,  false, false, RUNNING_SECURITY_BOOTED ) );
/////////////////////////////////////////////////////////////////////////
commit:d9e0247
/////////////////////////////////////////////////////////////////////////
0:         return
0:         "Network Server startup failed. User authentication " +
0:         "must be enabled before the Network Server installs a security manager. " +
0:         "You must either enable user authentication or disable the installation " +
0:         "of a security manager. For information on enabling user authentication, " +
0:         "see the section of the Derby Developer's Guide entitled \"Working with user authentication\". " +
0:         "Disabling the installation of a security manager is strongly discouraged " +
0:         "in a client/server environment. However, if you must do this, " +
0:         "you can disable the installation of a security manager by specifying " +
0:         "the \"-noSecurityManager\" command line option when you " +
0:          "bring up the Network Server.";
commit:6264d1e
/////////////////////////////////////////////////////////////////////////
1:         Test        test = TestConfiguration.defaultServerDecorator( testSetup );
0:         test = SecurityManagerSetup.noSecurityManager( test );
commit:c9c3c8e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
/////////////////////////////////////////////////////////////////////////
0:     private boolean _useCustomDerbyProperties;
/////////////////////////////////////////////////////////////////////////
0:          boolean useCustomDerbyProperties,
/////////////////////////////////////////////////////////////////////////
0:          _useCustomDerbyProperties = useCustomDerbyProperties;
/////////////////////////////////////////////////////////////////////////
0:         // C = using Custom properties
0:         //      .addTest( decorateTest( O,        A,       C,    Outcome ) );
0:         suite.addTest( decorateTest( false,  false, false, FAILED_NO_AUTHENTICATION ) );
0:         suite.addTest( decorateTest( false,  false, true, RUNNING_SECURITY_BOOTED ) );
0:         suite.addTest( decorateTest( false,  true, false, RUNNING_SECURITY_BOOTED ) );
0:         suite.addTest( decorateTest( true,  false, false, RUNNING_SECURITY_NOT_BOOTED ) );
0:         suite.addTest( decorateTest( true,  true, false, RUNNING_SECURITY_NOT_BOOTED ) );
/////////////////////////////////////////////////////////////////////////
0:          boolean useCustomDerbyProperties,
1:          
/////////////////////////////////////////////////////////////////////////
0:              useCustomDerbyProperties,
0:         String[]        startupProperties = getStartupProperties( authenticationRequired, useCustomDerbyProperties );
/////////////////////////////////////////////////////////////////////////
1:         // if using the custom derby.properties, copy the custom properties to a visible place
0:         if ( useCustomDerbyProperties )
1:         {
1:             testSetup = new SupportFilesSetup
1:                 (
1:                  testSetup,
1:                  null,
1:                  new String[] { "functionTests/tests/derbynet/SecureServerTest.derby.properties" },
1:                  null,
1:                  new String[] { "derby.properties" }
1:                  );
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
0:     private static  String[]  getStartupProperties( boolean authenticationRequired, boolean useCustomDerbyProperties )
/////////////////////////////////////////////////////////////////////////
0:         if ( useCustomDerbyProperties )
1:         {
1:             list.add( "derby.system.home=extinout" );
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         buffer.append( "Opened = " ); buffer.append( _unsecureSet);
1:         buffer.append( ", Authenticated= " ); buffer.append( _authenticationRequired );
0:         buffer.append( ", CustomDerbyProperties= " ); buffer.append( _useCustomDerbyProperties );
commit:30644c8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final Outcome RUNNING_SECURITY_BOOTED = new Outcome( true,  serverBootedOK() );
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             list.add( "-noSecurityManager" );
/////////////////////////////////////////////////////////////////////////
0:         return "Network Server startup failed. " +
0:             "User authentication should be enabled " +
0:             "before the Network Server installs a security manager. " +
0:             "Please either set the 'derby.connection.requireAuthentication' " +
0:             "system property to true or run the network server with the '-noSecurityManager' option.";
1:     }
1: 
1:     private static  String  serverBootedOK()
1:     {
1:         return "Security manager installed using the Basic server security policy.";
commit:e0f1ffe
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
0: import java.io.InputStream;
0: import java.io.PrintWriter;
0: import java.io.StringWriter;
0: import java.net.URL;
1: import java.util.ArrayList;
0: import java.util.Properties;
1: 
0: import junit.extensions.TestSetup;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.ServerSetup;
0: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
0: import org.apache.derby.iapi.reference.Property;
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
0: import org.apache.derby.drda.NetworkServerControl;
0: import org.apache.derby.impl.drda.NetworkServerControlImpl;
1: 
1: /**
1:  * This Junit test class tests whether the server comes up under a security
1:  * manager as expected.
1:  */
1: 
0: public class SecureServerTest extends BaseTestCase
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // INNER CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Possible outcomes for the experiment of bringing up the server.
1:      * </p>
1:      */
1:     public  static  final   class   Outcome
1:     {
1:         private boolean _serverShouldComeUp;
1:         private String      _expectedServerOutput;
1: 
1:         public Outcome
1:             (
1:              boolean serverShouldComeUp,
1:              String expectedServerOutput
1:              )
1:         {
1:             _serverShouldComeUp =  serverShouldComeUp;
1:             _expectedServerOutput = expectedServerOutput;
1:         }
1: 
1:         public  boolean serverShouldComeUp() { return _serverShouldComeUp; }
1:         public  String    expectedServerOutput() { return _expectedServerOutput; }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     private static final Outcome FAILED_NO_AUTHENTICATION = new Outcome( false, authenticationFailure() );
1:     private static final Outcome RUNNING_SECURITY_NOT_BOOTED = new Outcome( true, "" );
0:     private static final Outcome RUNNING_SECURITY_BOOTED = new Outcome( true, getTextMessage( "DRDA_SecurityInstalled.I" ) );
1: 
1:         
1:     // startup state
1:     private boolean _unsecureSet;
1:     private boolean _authenticationRequired;
1: 
1:     // expected outcomes
1:     private Outcome _outcome;
1: 
0:     // helper state for intercepting server error messages
0:     private InputStream[]  _inputStreamHolder;
1: 
0:     private static  LocalizedResource   _messageResolver;
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public SecureServerTest
1:         (
1:          boolean unsecureSet,
1:          boolean authenticationRequired,
1: 
1:          Outcome    outcome
1:         )
1:     {
1:          super( "testServerStartup" );
1: 
1:          _unsecureSet =  unsecureSet;
1:          _authenticationRequired =  authenticationRequired;
1: 
1:          _outcome = outcome;
1: 
0:          _inputStreamHolder = new InputStream[ 1 ];
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit MACHINERY
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Tests to run.
1:      */
1:     public static Test suite()
1:     {
1:         //NetworkServerTestSetup.setWaitTime( 10000L );
1:         
0:         TestSuite       suite = new TestSuite();
1: 
1:         // Server booting requires that we run from the jar files
1:         if ( !TestConfiguration.loadingFromJars() ) { return suite; }
1: 
1:         // O = Overriden
1:         // A = Authenticated
1:         //
0:         //      .addTest( decorateTest( S,      O,       A,     Outcome ) );
1:         //
1: 
0:         suite.addTest( decorateTest( false,  false, FAILED_NO_AUTHENTICATION ) );
0:         suite.addTest( decorateTest( false,  true, RUNNING_SECURITY_BOOTED ) );
0:         suite.addTest( decorateTest( true,  false, RUNNING_SECURITY_NOT_BOOTED ) );
0:         suite.addTest( decorateTest( true,  true, RUNNING_SECURITY_NOT_BOOTED ) );
1:         
1:         return suite;
1:     }
1:     
1:     /**
0:      * Release resources.
1:      */
0:     protected void tearDown() throws Exception
1:     {
0:         _inputStreamHolder = null;
1:     }
1: 
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TEST DECORATION
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * <p>
1:      * Compose the required decorators to bring up the server in the correct
1:      * configuration.
1:      * </p>
1:      */
1:     private static  Test    decorateTest
1:         (
1:          boolean unsecureSet,
1:          boolean authenticationRequired,
1: 
1:          Outcome outcome
1:         )
1:     {
1:         SecureServerTest            secureServerTest = new SecureServerTest
1:             (
1:              unsecureSet,
1:              authenticationRequired,
1: 
1:              outcome
0:             );
1: 
0:         String[]        startupProperties = getStartupProperties( authenticationRequired );
0:         String[]        startupArgs = getStartupArgs( unsecureSet );
1: 
0:         TestSetup   testSetup = new NetworkServerTestSetup
1:             (
1:              secureServerTest,
1:              startupProperties,
1:              startupArgs,
0:              true,
0:              secureServerTest._outcome.serverShouldComeUp(),
0:              secureServerTest._inputStreamHolder
0:              );
1: 
0:         testSetup = new ServerSetup( testSetup, TestConfiguration.DEFAULT_HOSTNAME, TestConfiguration.DEFAULT_PORT );
1: 
0:         Test        test = SecurityManagerSetup.noSecurityManager( testSetup );
1: 
1:         return test;
1:     }
1: 
1:     /**
1:      * <p>
0:      * Return n array of startup args suitable for booting a server.
1:      * </p>
1:      */
0:     private static  String[]    getStartupArgs( boolean setUnsecureOption )
1:     {
0:         ArrayList       list = new ArrayList();
1: 
1:         if ( setUnsecureOption )
1:         {
0:             list.add
0:                 ( '-' + NetworkServerControlImpl.DASHARGS[ NetworkServerControlImpl.DASHARG_UNSECURE ] );
1:         }
1:         
0:         String[]    result = new String[ list.size() ];
1: 
0:         list.toArray( result );
1: 
0:         return result;
1:     }
1:     
1:     /**
1:      * <p>
1:      * Return a set of startup properties suitable for SystemPropertyTestSetup.
1:      * </p>
1:      */
0:     private static  String[]  getStartupProperties( boolean authenticationRequired )
1:     {
0:         ArrayList       list = new ArrayList();
1: 
1:         if ( authenticationRequired )
1:         {
1:             list.add( "derby.connection.requireAuthentication=true" );
1:         }
1: 
0:         String[]    result = new String[ list.size() ];
1: 
0:         list.toArray( result );
1: 
0:         return result;
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Verify if the server came up and if so, was a security manager installed.
1:      */
1:     public void testServerStartup()
1:         throws Exception
1:     {	
1:         String      myName = toString();
0:         String      serverOutput = getServerOutput();
1:         boolean     serverCameUp = serverCameUp();
1:         boolean     outputOK = ( serverOutput.indexOf( _outcome.expectedServerOutput() ) >= 0 );
1: 
1:         assertEquals( myName + ": serverCameUp = " + serverCameUp, _outcome.serverShouldComeUp(), serverCameUp );
1:         
0:         assertTrue( myName + "\nExpected: " + _outcome.expectedServerOutput() + "\nBut saw: " + serverOutput , outputOK );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Object OVERLOADS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public String toString()
1:     {
0:         StringBuffer    buffer = new StringBuffer();
1: 
1:         buffer.append( "SecureServerTest( " );
0:         buffer.append( "Opened = " ); buffer.append( _unsecureSet); buffer.append( ", " );
0:         buffer.append( "Authenticated= " ); buffer.append( _authenticationRequired );
1:         buffer.append( " )" );
1: 
1:         return buffer.toString();
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private String  getServerOutput()
1:         throws Exception
1:     {
0:         byte[]          inputBuffer = new byte[ 1000 ];
1: 
0:         InputStream is = _inputStreamHolder[ 0 ];
1: 
0:         int             bytesRead = is.read( inputBuffer );
1: 
0:         return new String( inputBuffer, 0, bytesRead );
1:     }
1: 
0:     private static  LocalizedResource   getMessageResolver()
1:     {
0:         if ( _messageResolver == null )
1:         {
0:             _messageResolver = new LocalizedResource( null, null, "org.apache.derby.loc.drda.messages" );
1:         }
1: 
0:         return _messageResolver;
1:     }
1: 
0:     private static  String  getTextMessage( String key )
1:     {
0:         return getTextMessage( key, new String[]{} );
1:     }
0:     private static  String  getTextMessage( String key, Object[] args )
1:     {
0:         return getMessageResolver().getTextMessage( key, args );
1:     }
1:     
0:     private static  String  authenticationFailure()
1:     {
0:         return getTextMessage
1:             (
0:              "DRDA_NoAuthentication.S",
0:              new String[]
1:                 {
0:                     Property.REQUIRE_AUTHENTICATION_PARAMETER,
0:                     NetworkServerControlImpl.DASHARGS[  NetworkServerControlImpl.DASHARG_UNSECURE ]
1:                 }
0:              );
1:     }
1: 
1:     private boolean serverCameUp()
1:         throws Exception
1:     {
0:         return NetworkServerTestSetup.pingForServerStart( NetworkServerTestSetup.getNetworkServerControl() );
1:     }
1: 
1: }
1: 
============================================================================