1:dad03d7: /*  Derby - Class org.apache.derbyBuild.ReleaseNotesTransformer
1:dad03d7: 
1:dad03d7: Licensed to the Apache Software Foundation (ASF) under one or more
1:dad03d7: contributor license agreements.  See the NOTICE file distributed with
1:dad03d7: this work for additional information regarding copyright ownership.
1:dad03d7: The ASF licenses this file to You under the Apache License, Version 2.0
1:dad03d7: (the "License"); you may not use this file except in compliance with
1:dad03d7: the License.  You may obtain a copy of the License at
1:dad03d7: 
1:dad03d7: http://www.apache.org/licenses/LICENSE-2.0
1:dad03d7: 
1:dad03d7: Unless required by applicable law or agreed to in writing, software
1:dad03d7: distributed under the License is distributed on an "AS IS" BASIS,
1:dad03d7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dad03d7: See the License for the specific language governing permissions and
1:dad03d7: limitations under the License.
1:dad03d7: 
1:dad03d7:  */
1:dad03d7: package org.apache.derbyBuild;
1:dad03d7: 
1:dad03d7: import java.io.*;
1:dad03d7: import java.util.*;
1:dad03d7: import java.text.MessageFormat;
1:dad03d7: import javax.xml.parsers.*;
1:dad03d7: import javax.xml.transform.*;
1:dad03d7: import javax.xml.transform.dom.*;
1:dad03d7: import javax.xml.transform.stream.*;
1:dad03d7: import org.w3c.dom.*;
1:dad03d7: 
1:dad03d7: import org.apache.tools.ant.BuildException;
1:dad03d7: import org.apache.tools.ant.Project;
1:dad03d7: import org.apache.tools.ant.Task;
1:dad03d7: 
1:dad03d7: /**
1:dad03d7:  * <p>
1:dad03d7:  * This is an ant task which transforms the Derby release notes into a form
1:dad03d7:  * which can be digested by the Forrest tool and published on the Derby
1:dad03d7:  * download site. This involves the following transformations:
1:dad03d7:  * </p>
1:dad03d7:  *
1:dad03d7:  * <ul>
1:dad03d7:  * <li><b>Remove blockquotes</b> - Forrest silently swallows blockquoted text.</li>
1:dad03d7:  * <li><b>Remove TOC</b> - Forrest adds its own table of contents and transforms the original TOC into a block of dead links.</li>
1:dad03d7:  * <li><b>Remove mini TOC</b> - Forrest also transforms the mini TOC in the Issues section into a block of dead links.</li>
1:dad03d7:  * </ul>
1:f22d75d:  *
1:f22d75d:  * <p>
1:f22d75d:  * In addition, this task adds a pointer to the download page to src/documentation/conf/cli.xconf. This causes
1:f22d75d:  * the site-building scripts to pull the download page into the build.
1:f22d75d:  * </p>
1:f22d75d:  *
1:dad03d7:  */
1:dad03d7: public class ReleaseNotesTransformer extends Task
1:dad03d7: {
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7:     //
1:dad03d7:     //  CONSTANTS
1:dad03d7:     //
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7: 
1:dad03d7:     private static final String PREAMBLE =
1:dad03d7:         "<!--\n" +
1:dad03d7:         "  Licensed to the Apache Software Foundation (ASF) under one or more\n" +
1:dad03d7:         "  contributor license agreements.  See the NOTICE file distributed with\n" +
1:dad03d7:         "  this work for additional information regarding copyright ownership.\n" +
1:dad03d7:         "  The ASF licenses this file to you under the Apache License, Version 2.0\n" +
1:dad03d7:         "  (the \"License\"); you may not use this file except in compliance with\n" +
1:dad03d7:         "  the License.  You may obtain a copy of the License at\n" +
2:dad03d7:         "\n" +
1:dad03d7:         "      http://www.apache.org/licenses/LICENSE-2.0\n" +
1:dad03d7:         "\n" +
1:dad03d7:         "  Unless required by applicable law or agreed to in writing, software\n" +
1:dad03d7:         "  distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
1:dad03d7:         "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
1:dad03d7:         "  See the License for the specific language governing permissions and\n" +
1:dad03d7:         "  limitations under the License.\n" +
1:dad03d7:         "-->\n" +
1:dad03d7:         "<html>\n" +
1:dad03d7:         "<title>Apache Derby {0} Release</title>\n" +
1:dad03d7:         "<body>\n" +
1:dad03d7:         "\n" +
1:dad03d7:         "    <h1>Distributions</h1>\n" +
1:dad03d7:         "    <p>Use the links below to download a distribution of Apache Derby. You should <b>always</b> <a href=\"#Verifying Releases\">verify the integrity</a>\n" +
1:dad03d7:         "       of distribution files downloaded from a mirror.</p>\n" +
1:dad03d7:         "\n" +
1:dad03d7:         "<p>You are currently using <strong>[preferred]</strong>. If you encounter a\n" +
1:dad03d7:         "problem with this mirror, then please select another.  If all\n" +
1:dad03d7:         "mirrors are failing, there are backup mirrors at the end of the list.\n" +
1:dad03d7:         "See <a href=\"http://www.apache.org/mirrors/\">status</a> of mirrors.\n" +
1:dad03d7:         "</p>\n" +
1:dad03d7:         "\n" +
1:dad03d7:         "<form action=\"[location]\" method=\"get\" id=\"SelectMirror\">\n" +
1:dad03d7:         "Other mirrors: <select name=\"Preferred\">\n" +
1:9a1012a:         "[if-any http] [for http]\n" +
1:dad03d7:         "<option value=\"[http]\">[http]</option>\n" +
1:9a1012a:         "[end] [end]\n" +
1:9a1012a:         "[if-any ftp] [for ftp]\n" +
1:dad03d7:         "<option value=\"[ftp]\">[ftp]</option>\n" +
1:9a1012a:         "[end] [end]\n" +
1:9a1012a:         "[if-any backup] [for backup]\n" +
1:dad03d7:         "<option value=\"[backup]\">[backup] (backup)</option>\n" +
1:9a1012a:         "[end] [end]\n" +
1:dad03d7:         "</select>\n" +
1:dad03d7:         "<input type=\"submit\" value=\"Change\" />     \n" +
1:dad03d7:         "</form>\n" +
1:dad03d7:         "\n" +
1:dad03d7:         "\n" +
1:dad03d7:         "    <p>There are four different distributions:</p>\n" +
2:dad03d7:         "    <ul>\n" +
1:dad03d7:         "      <li>bin distribution - contains the documentation, javadoc, and jar files for Derby.</li>\n" +
1:dad03d7:         "      <li>lib distribution - contains only the jar files for Derby.</li>\n" +
1:dad03d7:         "      <li>lib-debug distribution - contains jar files for Derby with source line numbers.</li>\n" +
1:dad03d7:         "      <li>src distribution - contains the Derby source tree at the point which the binaries were built.</li>\n" +
2:dad03d7:         "    </ul>\n" +
1:5cac755:         "    <p> <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.zip\">db-derby-{0}-bin.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.md5\">MD5</a>]<br/>\n" +
1:dad03d7:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz\">db-derby-{0}-bin.tar.gz</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.md5\">MD5</a>]</p>\n" +
1:dad03d7:         "    \n" +
1:5cac755:         "    <p><a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.zip\">db-derby-{0}-lib.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.md5\">MD5</a>]<br/>\n" +
1:5cac755:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz\">db-derby-{0}-lib.tar.gz</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.md5\">MD5</a>]</p>\n" +
1:dad03d7:         "    \n" +
1:2be230f:         "    <p><a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip\">db-derby-{0}-lib-debug.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.md5\">MD5</a>]<br/>\n" +
1:2be230f:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz\">db-derby-{0}-lib-debug.tar.gz</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.md5\">MD5</a>]</p>\n" +
1:dad03d7:         "\n" +
1:5cac755:         "    <p><a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.zip\">db-derby-{0}-src.zip</a>  [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.md5\">MD5</a>]<br/>\n" +
1:3d59ed1:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz\">db-derby-{0}-src.tar.gz</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.md5\">MD5</a>] (Note that, due to long filenames, you will need gnu tar to unravel this tarball.)</p>\n";
1:dad03d7:     
1:dad03d7: 
1:dad03d7: 
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7:     //
1:dad03d7:     //  STATE
1:dad03d7:     //
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7: 
1:dad03d7:     private DocumentBuilder _docBldr;
1:dad03d7:     private Document _inputDoc;
1:dad03d7:     private File _inputFile;
1:dad03d7:     private File _outputFile;
1:f22d75d:     private File _cliXconfFile;
1:dad03d7: 
1:dad03d7:     private String _inputFileName;
1:dad03d7:     private String _outputFileName;
1:f22d75d:     private String _cliXconfFileName;
1:dad03d7:     private String _releaseID;
1:dad03d7: 
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7:     //
1:dad03d7:     //  CONSTRUCTOR
1:dad03d7:     //
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7: 
1:dad03d7:     public ReleaseNotesTransformer() throws Exception
1:dad03d7:     {
1:dad03d7:         _docBldr = DocumentBuilderFactory.newInstance().newDocumentBuilder();
1:dad03d7:     }
1:dad03d7:     
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7:     //
1:dad03d7:     //  ANT Task BEHAVIOR
1:dad03d7:     //
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7:     
1:dad03d7:     /**
1:dad03d7:      * Ant accessor to set the name of the input file, the original release notes.
1:dad03d7:      */
1:dad03d7:     public void setInputFileName(String inputFileName) throws Exception
1:dad03d7:     {
1:dad03d7:         _inputFileName = inputFileName;
1:dad03d7:         _inputFile = new File(_inputFileName);
1:dad03d7: 
1:dad03d7:         println( "Reading from " + inputFileName + "..." );
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     /**
1:dad03d7:      * Ant accessor to set the name of the generated output file
1:dad03d7:      */
1:dad03d7:     public void setOutputFileName(String outputFileName) throws Exception
1:dad03d7:     {
1:dad03d7:         _outputFileName = outputFileName;
1:dad03d7:         _outputFile = new File(_outputFileName);
1:dad03d7: 
1:dad03d7:         println( "Writing to " + outputFileName + "..." );
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     /**
1:f22d75d:      * Ant accessor to set the name of the cli.xconf file which pulls the download page
1:f22d75d:      * into the built site.
1:f22d75d:      */
1:f22d75d:     public void setCliXconfFileName(String cliXconfFileName) throws Exception
1:f22d75d:     {
1:f22d75d:         _cliXconfFileName = cliXconfFileName;
1:f22d75d:         _cliXconfFile = new File(_cliXconfFileName);
1:f22d75d: 
1:f22d75d:         println( "Writing import instructions to to " + cliXconfFileName + "..." );
1:f22d75d:     }
1:f22d75d: 
1:f22d75d:     /**
1:dad03d7:      * Ant accessor to set the release id.
1:dad03d7:      */
1:dad03d7:     public void setReleaseId(String releaseID) throws Exception
1:dad03d7:     {
1:dad03d7:         _releaseID = releaseID;
1:dad03d7: 
1:dad03d7:         println( "Setting release id to " + _releaseID + "..." );
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     /**
1:dad03d7:      * This is Ant's entry point into this task.
1:dad03d7:      */
1:dad03d7:     public void execute() throws BuildException
1:dad03d7:     {
1:dad03d7:         try {
1:dad03d7:             transform();
1:dad03d7:             printOutput();
1:dad03d7:             postProcess();
1:f22d75d: 
1:f22d75d:             wireIntoBuild();
1:dad03d7:         }
1:dad03d7:         catch (Throwable t) {
1:dad03d7:             t.printStackTrace();
1:dad03d7: 
1:dad03d7:             throw new BuildException("Error running ReleaseNotesTransformer: " + t.getMessage(), t);
1:dad03d7:         }
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7:     //
1:dad03d7:     //  CORE BEHAVIOR
1:dad03d7:     //
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7: 
1:dad03d7:     /**
1:dad03d7:      *<p>
1:dad03d7:      * This is the guts of the processing.
1:dad03d7:      * </p>
1:dad03d7:      */
1:dad03d7:     private void transform() throws Exception
1:dad03d7:     {
1:dad03d7:         // this writes normalized text to the output file
1:dad03d7:         normalizeText( _inputFile, _outputFile );
1:dad03d7: 
1:dad03d7:         // correct text so that it is parseable and remove brackets which Forrest can't see
1:dad03d7:         InputStream normalizedText = new FileInputStream( _outputFile );
1:dad03d7:         _inputDoc = _docBldr.parse( normalizedText );
1:dad03d7:         normalizedText.close();
1:dad03d7:         
1:dad03d7:         removeBlockquotes();
1:dad03d7:         removeTopTOC();
1:dad03d7:         removeIssuesTOC();
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     /**
1:f22d75d:      * <p>
1:dad03d7:      * Remove the blockquotes which hide text from Forrest.
1:dad03d7:      * </p>
1:dad03d7:      */
1:dad03d7:     private void removeBlockquotes() throws Exception
1:dad03d7:     {
1:dad03d7:         Element root = _inputDoc.getDocumentElement();
1:dad03d7:         HashSet<Element> replacedNodes = new HashSet<Element>();
1:dad03d7:         String tag = "blockquote";
1:dad03d7: 
1:dad03d7:         while ( true )
1:dad03d7:         {
1:dad03d7:             Element suspect = getFirstDescendant( root, tag );
1:dad03d7:             if ( suspect == null ) { break; }
1:dad03d7: 
1:dad03d7:             if ( replacedNodes.contains( suspect ) )
1:dad03d7:             {
1:dad03d7:                 throw new Exception( "Stuck in a loop trying to strip '" + tag + "'" );
1:dad03d7:             }
1:dad03d7:             replacedNodes.add( suspect );
1:dad03d7: 
1:dad03d7:             Element parent = (Element) suspect.getParentNode();
1:dad03d7:             NodeList children = suspect.getChildNodes();
1:dad03d7: 
1:dad03d7:             if ( children != null )
1:dad03d7:             {
1:dad03d7:                 int childCount = children.getLength();
1:dad03d7: 
1:dad03d7:                 for ( int i = 0; i < childCount; i++ )
1:dad03d7:                 {
1:dad03d7:                     Node oldChild = children.item( i );
1:dad03d7: 
1:dad03d7:                     if ( oldChild != null )
1:dad03d7:                     {
1:dad03d7:                         Node newChild = oldChild.cloneNode( true );
1:dad03d7: 
1:dad03d7:                         parent.insertBefore( newChild, suspect );
1:dad03d7:                     }
1:dad03d7:                 }
1:dad03d7:             }
1:dad03d7:             parent.removeChild( suspect );
1:dad03d7:         }   // end loop through suspects
1:dad03d7:     }
1:dad03d7:     
1:dad03d7:     /**
1:dad03d7:      * <p>
1:dad03d7:      * Remove the top level table of contents. This is the first list in the document.
1:dad03d7:      * </p>
1:dad03d7:      */
1:dad03d7:     private void removeTopTOC() throws Exception
1:dad03d7:     {
1:dad03d7:         removeFirstList( _inputDoc.getDocumentElement() );
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     /**
1:dad03d7:      * <p>
1:dad03d7:      * Remove the table of contents of the Issues section. This is the first list in that section.
1:dad03d7:      * </p>
1:dad03d7:      */
1:dad03d7:     private void removeIssuesTOC() throws Exception
1:dad03d7:     {
1:dad03d7:         Element issuesHeader = findHeader( 2, "Issues" );
1:dad03d7: 
1:dad03d7:         if ( issuesHeader != null )
1:dad03d7:         {
1:dad03d7:             // now look for the first list that follows
1:dad03d7: 
1:dad03d7:             NodeList allLists = _inputDoc.getDocumentElement().getElementsByTagName( "ul" );
1:dad03d7: 
1:dad03d7:             if ( allLists == null ) { return; }
1:dad03d7: 
1:dad03d7:             int count = allLists.getLength();
1:dad03d7: 
1:dad03d7:             for ( int i = 0; i < count; i++ )
1:dad03d7:             {
1:dad03d7:                 Node nextList = allLists.item( i );
1:dad03d7:                 
1:dad03d7:                 if ( issuesHeader.compareDocumentPosition( nextList ) == Node.DOCUMENT_POSITION_FOLLOWING )
1:dad03d7:                 {
1:dad03d7:                     nextList.getParentNode().removeChild( nextList );
1:dad03d7:                     break;
1:dad03d7:                 }
1:dad03d7:             }
1:dad03d7: 
1:dad03d7:         }
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     /**
1:dad03d7:      * <p>
1:dad03d7:      * Remove the first list under an element.
1:dad03d7:      * </p>
1:dad03d7:      */
1:dad03d7:     private void removeFirstList( Element root ) throws Exception
1:dad03d7:     {
1:dad03d7:         Element listElement = getFirstDescendant( root, "ul" );
1:dad03d7: 
1:dad03d7:         if ( listElement != null )
1:dad03d7:         {
1:dad03d7:             listElement.getParentNode().removeChild( listElement );
1:dad03d7:         }
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     /**
1:dad03d7:      * <p>
1:dad03d7:      * Find the header element with this given name.
1:dad03d7:      * </p>
1:dad03d7:      */
1:dad03d7:     private Element findHeader( int headerLevel, String headerTitle ) throws Exception
1:dad03d7:     {
1:dad03d7:         Element root = _inputDoc.getDocumentElement();
1:dad03d7:         String headerTag = "h" +  headerLevel;
1:dad03d7:         NodeList headers = root.getElementsByTagName( headerTag );
1:dad03d7: 
1:dad03d7:         if ( headers == null ) { return null; }
1:dad03d7: 
1:dad03d7:         int count = headers.getLength();
1:dad03d7: 
1:dad03d7:         for ( int i = 0; i < count; i++ )
1:dad03d7:         {
1:dad03d7:             Node nextHeader = headers.item( i );
1:dad03d7:             String title = nextHeader.getTextContent().trim();
1:dad03d7: 
1:dad03d7:             if ( headerTitle.equals( title ) ) { return (Element) nextHeader; }
1:dad03d7:         }
1:dad03d7: 
1:dad03d7:         return null;
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7:     //
1:dad03d7:     //  MINIONS
1:dad03d7:     //
1:dad03d7:     /////////////////////////////////////////////////////////////////////////
1:dad03d7: 
1:dad03d7:     private Element getFirstDescendant( Element ancestor, String tagName )
1:dad03d7:     {
1:dad03d7:         NodeList nl = ancestor.getElementsByTagName( tagName );
1:dad03d7: 
1:dad03d7:         if ( nl == null ) { return null; }
1:dad03d7:         if ( nl.getLength() == 0 ) { return null; }
1:dad03d7: 
1:dad03d7:         return (Element) nl.item( 0 );
1:dad03d7:     }
1:dad03d7:     
1:dad03d7:     /**
1:dad03d7:      * Adjust input text to remove junk which confuses the xml parser and/or Forrest.
1:dad03d7:      * Temporarily writes the adjusted text to the output file.
1:dad03d7:      */
1:dad03d7:     private void normalizeText( File inputFile, File outputFile ) throws Exception
1:dad03d7:     {
1:dad03d7:         String rawString = readFileIntoString( inputFile );
1:dad03d7: 
1:dad03d7:         // The Transformer which wrote the original release notes managed to turn <br/> into <br>
1:dad03d7:         // and <hr/> into <hr>. Fix this.
1:dad03d7:         rawString = fullReplaceToken( rawString, "<br>", "<br/>" );
1:dad03d7:         rawString = fullReplaceToken( rawString, "<hr>", "<hr/>" );
1:dad03d7: 
1:dad03d7:         // Forrest doesn't like square brackets and swallows the bracketed content
1:4421f9b:         rawString = rawString.replace( '[', '(' );
1:4421f9b:         rawString = rawString.replace( ']', ')' );
1:dad03d7: 
1:dad03d7:         FileWriter fileWriter = new FileWriter( outputFile );
1:dad03d7:         fileWriter.append( rawString );
1:dad03d7:         fileWriter.flush();
1:dad03d7:         fileWriter.close();
1:dad03d7:     }
1:dad03d7:     private String fullReplaceToken( String rawString, String token, String replacement )
1:dad03d7:     {
1:dad03d7:         rawString = replaceToken( rawString, token.toLowerCase(), replacement );
1:dad03d7:         rawString = replaceToken( rawString, token.toUpperCase(), replacement );
1:dad03d7:         
1:dad03d7:         return rawString;
1:dad03d7:     }
1:dad03d7:     private String replaceToken( String rawString, String token, String replacement )
1:dad03d7:     {
1:dad03d7:         StringWriter output = new StringWriter();
1:dad03d7:         int rawLength = rawString.length();
1:dad03d7:         int tokenLength = token.length();
1:dad03d7:         int start = 0;
1:dad03d7: 
1:dad03d7:         while ( true )
1:dad03d7:         {
1:dad03d7:             int idx = rawString.indexOf( token, start );
1:dad03d7:             if ( idx < 0 ) { break; }
1:dad03d7: 
1:dad03d7:             output.append( rawString.substring( start, idx ) );
1:dad03d7:             output.append( replacement );
1:dad03d7:             start = idx + tokenLength;
1:dad03d7:         }
1:dad03d7: 
1:dad03d7:         if ( start < rawLength )
1:dad03d7:         {
1:dad03d7:             output.append( rawString.substring( start, rawLength ) );
1:dad03d7:         }
1:dad03d7: 
1:dad03d7:         return output.toString();
1:dad03d7:     }
1:dad03d7:     
1:dad03d7:     /**
1:dad03d7:      * Print the generated output document to the output file.
1:dad03d7:      */
1:dad03d7:     private void printOutput() throws Exception
1:dad03d7:     {
1:dad03d7:         Source source = new DOMSource(_inputDoc);
1:dad03d7: 
1:dad03d7:         Result result = new StreamResult(_outputFile);
1:dad03d7:         Transformer transformer = TransformerFactory.newInstance().newTransformer();
1:dad03d7: 
1:dad03d7:         transformer.transform(source, result);
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     /**
1:dad03d7:      * <p>
1:dad03d7:      * Post-process the output:
1:dad03d7:      * </p>
1:dad03d7:      *
1:dad03d7:      * <ul>
1:dad03d7:      * <li>Add preamble to the head of the file.</li>
1:dad03d7:      * </ul>
1:dad03d7:      */
1:dad03d7:     private void postProcess()
1:dad03d7:         throws Exception
1:dad03d7:     {
1:dad03d7:         String shortReleaseID = _releaseID.substring( 0, _releaseID.lastIndexOf( "." ) );
1:dad03d7:         String preamble = MessageFormat.format( PREAMBLE, _releaseID, shortReleaseID );
1:dad03d7:         String contents = readFileIntoString( _outputFile );
1:dad03d7:         String firstHeader = "<h1>";
1:dad03d7:         int cutIdx = contents.indexOf( firstHeader );
1:dad03d7:         String result = preamble + contents.substring( cutIdx );
1:dad03d7: 
1:dad03d7:         writeStringIntoFile( result, _outputFile );
1:dad03d7:     }
1:dad03d7:     
1:dad03d7:     /**
1:dad03d7:      * <p>
1:f22d75d:      * Wire the download page into the build instructions.
1:f22d75d:      * </p>
1:f22d75d:      */
1:f22d75d:     private void wireIntoBuild()
1:f22d75d:         throws Exception
1:f22d75d:     {
1:f22d75d:         String contents = readFileIntoString( _cliXconfFile );
1:f22d75d:         int insertPoint = contents.indexOf( "   </uris>" );
1:f22d75d:         String insertion = "     <uri type=\"append\" src=\"releases/release-" + _releaseID + ".html\"/>\n";
1:f22d75d:         String result = contents.substring( 0, insertPoint ) + insertion + contents.substring( insertPoint );
1:f22d75d: 
1:f22d75d:         writeStringIntoFile( result, _cliXconfFile );
1:f22d75d:     }
1:f22d75d:     
1:f22d75d:     /**
1:dad03d7:      * Print a line of text to the console.
1:dad03d7:      */
1:dad03d7:     private void println(String text)
1:dad03d7:     {
1:dad03d7:         log(text, Project.MSG_WARN);
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     /**
1:dad03d7:      * <p>
1:dad03d7:      * Read a file and return the entire contents as a single String.
1:dad03d7:      * </p>
1:dad03d7:      */
1:dad03d7:     private String readFileIntoString( File inputFile ) throws Exception
1:dad03d7:     {
1:dad03d7:         FileReader fileReader = new FileReader( inputFile );
1:dad03d7:         StringWriter stringWriter = new StringWriter();
1:dad03d7: 
1:dad03d7:         while( true )
1:dad03d7:         {
1:dad03d7:             int nextChar = fileReader.read();
1:dad03d7:             if ( nextChar < 0 ) { break; }
1:dad03d7: 
1:dad03d7:             stringWriter.append( (char) nextChar );
1:dad03d7:         }
1:dad03d7: 
1:dad03d7:         String rawString = stringWriter.toString();
1:dad03d7: 
1:dad03d7:         return rawString;
1:dad03d7:     }
1:dad03d7: 
1:dad03d7:     /**
1:dad03d7:      * <p>
1:dad03d7:      * Write a string into a file.
1:dad03d7:      * </p>
1:dad03d7:      */
1:dad03d7:     private void writeStringIntoFile( String rawString, File outputFile )
1:dad03d7:         throws Exception
1:dad03d7:     {
1:dad03d7:         PrintWriter writer = new PrintWriter( outputFile, "UTF-8" );
1:dad03d7: 
1:dad03d7:         writer.println( rawString );
1:dad03d7:         writer.flush();
1:dad03d7:         writer.close();
1:dad03d7:     }
1:dad03d7: 
1:dad03d7: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:9a1012a
/////////////////////////////////////////////////////////////////////////
1:         "[if-any http] [for http]\n" +
1:         "[end] [end]\n" +
1:         "[if-any ftp] [for ftp]\n" +
1:         "[end] [end]\n" +
1:         "[if-any backup] [for backup]\n" +
1:         "[end] [end]\n" +
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2be230f
/////////////////////////////////////////////////////////////////////////
1:         "    <p><a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip\">db-derby-{0}-lib-debug.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.md5\">MD5</a>]<br/>\n" +
1:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz\">db-derby-{0}-lib-debug.tar.gz</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.md5\">MD5</a>]</p>\n" +
commit:5cac755
/////////////////////////////////////////////////////////////////////////
1:         "    <p> <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.zip\">db-derby-{0}-bin.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.md5\">MD5</a>]<br/>\n" +
1:         "    <p><a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.zip\">db-derby-{0}-lib.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.md5\">MD5</a>]<br/>\n" +
1:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz\">db-derby-{0}-lib.tar.gz</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.md5\">MD5</a>]</p>\n" +
1:         "    <p><a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.zip\">db-derby-{0}-src.zip</a>  [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.md5\">MD5</a>]<br/>\n" +
commit:3d59ed1
/////////////////////////////////////////////////////////////////////////
1:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz\">db-derby-{0}-src.tar.gz</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.md5\">MD5</a>] (Note that, due to long filenames, you will need gnu tar to unravel this tarball.)</p>\n";
commit:64e3660
/////////////////////////////////////////////////////////////////////////
0:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/derby_ui_doc_plugin_1.1.3.zip\">derby_ui_doc_plugin_1.1.3.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/derby_ui_doc_plugin_1.1.3.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/derby_ui_doc_plugin_1.1.3.zip.md5\">MD5</a>]</p>\n" +
commit:4421f9b
/////////////////////////////////////////////////////////////////////////
1:         rawString = rawString.replace( '[', '(' );
1:         rawString = rawString.replace( ']', ')' );
commit:f22d75d
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * <p>
1:  * In addition, this task adds a pointer to the download page to src/documentation/conf/cli.xconf. This causes
1:  * the site-building scripts to pull the download page into the build.
1:  * </p>
1:  *
/////////////////////////////////////////////////////////////////////////
1:     private File _cliXconfFile;
1:     private String _cliXconfFileName;
/////////////////////////////////////////////////////////////////////////
1:      * Ant accessor to set the name of the cli.xconf file which pulls the download page
1:      * into the built site.
1:      */
1:     public void setCliXconfFileName(String cliXconfFileName) throws Exception
1:     {
1:         _cliXconfFileName = cliXconfFileName;
1:         _cliXconfFile = new File(_cliXconfFileName);
1: 
1:         println( "Writing import instructions to to " + cliXconfFileName + "..." );
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1: 
1:             wireIntoBuild();
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * Wire the download page into the build instructions.
1:      * </p>
1:      */
1:     private void wireIntoBuild()
1:         throws Exception
1:     {
1:         String contents = readFileIntoString( _cliXconfFile );
1:         int insertPoint = contents.indexOf( "   </uris>" );
1:         String insertion = "     <uri type=\"append\" src=\"releases/release-" + _releaseID + ".html\"/>\n";
1:         String result = contents.substring( 0, insertPoint ) + insertion + contents.substring( insertPoint );
1: 
1:         writeStringIntoFile( result, _cliXconfFile );
1:     }
1:     
1:     /**
commit:dad03d7
/////////////////////////////////////////////////////////////////////////
1: /*  Derby - Class org.apache.derbyBuild.ReleaseNotesTransformer
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1:  */
1: package org.apache.derbyBuild;
1: 
1: import java.io.*;
1: import java.util.*;
1: import java.text.MessageFormat;
1: import javax.xml.parsers.*;
1: import javax.xml.transform.*;
1: import javax.xml.transform.dom.*;
1: import javax.xml.transform.stream.*;
1: import org.w3c.dom.*;
1: 
1: import org.apache.tools.ant.BuildException;
1: import org.apache.tools.ant.Project;
1: import org.apache.tools.ant.Task;
1: 
1: /**
1:  * <p>
1:  * This is an ant task which transforms the Derby release notes into a form
1:  * which can be digested by the Forrest tool and published on the Derby
1:  * download site. This involves the following transformations:
1:  * </p>
1:  *
1:  * <ul>
1:  * <li><b>Remove blockquotes</b> - Forrest silently swallows blockquoted text.</li>
1:  * <li><b>Remove TOC</b> - Forrest adds its own table of contents and transforms the original TOC into a block of dead links.</li>
1:  * <li><b>Remove mini TOC</b> - Forrest also transforms the mini TOC in the Issues section into a block of dead links.</li>
1:  * </ul>
1:  */
1: public class ReleaseNotesTransformer extends Task
1: {
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTANTS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     private static final String PREAMBLE =
1:         "<!--\n" +
1:         "  Licensed to the Apache Software Foundation (ASF) under one or more\n" +
1:         "  contributor license agreements.  See the NOTICE file distributed with\n" +
1:         "  this work for additional information regarding copyright ownership.\n" +
1:         "  The ASF licenses this file to you under the Apache License, Version 2.0\n" +
1:         "  (the \"License\"); you may not use this file except in compliance with\n" +
1:         "  the License.  You may obtain a copy of the License at\n" +
1:         "\n" +
1:         "      http://www.apache.org/licenses/LICENSE-2.0\n" +
1:         "\n" +
1:         "  Unless required by applicable law or agreed to in writing, software\n" +
1:         "  distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
1:         "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
1:         "  See the License for the specific language governing permissions and\n" +
1:         "  limitations under the License.\n" +
1:         "-->\n" +
1:         "<html>\n" +
1:         "<title>Apache Derby {0} Release</title>\n" +
1:         "<body>\n" +
1:         "\n" +
1:         "    <h1>Distributions</h1>\n" +
1:         "    <p>Use the links below to download a distribution of Apache Derby. You should <b>always</b> <a href=\"#Verifying Releases\">verify the integrity</a>\n" +
1:         "       of distribution files downloaded from a mirror.</p>\n" +
1:         "\n" +
1:         "<p>You are currently using <strong>[preferred]</strong>. If you encounter a\n" +
1:         "problem with this mirror, then please select another.  If all\n" +
1:         "mirrors are failing, there are backup mirrors at the end of the list.\n" +
1:         "See <a href=\"http://www.apache.org/mirrors/\">status</a> of mirrors.\n" +
1:         "</p>\n" +
1:         "\n" +
1:         "<form action=\"[location]\" method=\"get\" id=\"SelectMirror\">\n" +
1:         "Other mirrors: <select name=\"Preferred\">\n" +
0:         "<!--[if-any http] [for http]-->\n" +
1:         "<option value=\"[http]\">[http]</option>\n" +
0:         "<!--[end] [end]-->\n" +
0:         "<!--[if-any ftp] [for ftp]-->\n" +
1:         "<option value=\"[ftp]\">[ftp]</option>\n" +
0:         "<!--[end] [end]-->\n" +
0:         "<!--[if-any backup] [for backup]-->\n" +
1:         "<option value=\"[backup]\">[backup] (backup)</option>\n" +
0:         "<!--[end] [end]-->\n" +
1:         "</select>\n" +
1:         "<input type=\"submit\" value=\"Change\" />     \n" +
1:         "</form>\n" +
1:         "\n" +
1:         "\n" +
1:         "    <p>There are four different distributions:</p>\n" +
1:         "    <ul>\n" +
1:         "      <li>bin distribution - contains the documentation, javadoc, and jar files for Derby.</li>\n" +
1:         "      <li>lib distribution - contains only the jar files for Derby.</li>\n" +
1:         "      <li>lib-debug distribution - contains jar files for Derby with source line numbers.</li>\n" +
1:         "      <li>src distribution - contains the Derby source tree at the point which the binaries were built.</li>\n" +
1:         "    </ul>\n" +
0:         "    <p> <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.zip\">db-derby-{0}-bin.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.md5\">MD   5</a>]<br/>\n" +
1:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz\">db-derby-{0}-bin.tar.gz</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.md5\">MD5</a>]</p>\n" +
1:         "    \n" +
0:         "    <p><a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.zip\">db-derby-{0}-lib.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.md5\">MD5<  /a>]<br/>\n" +
0:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz\">db-derby-{0}-lib.tar.gz</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.md5\"> MD5</a>]</p>\n" +
1:         "    \n" +
0:         "    <p><a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip\">db-derby-{0}-lib-debug.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-  lib-debug.zip.md5\">MD5</a>]<br/>\n" +
0:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz\">db-derby-{0}-lib-debug.tar.gz</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-10.6 .1.0-lib-debug.tar.gz.md5\">MD5</a>]</p>\n" +
1:         "\n" +
0:         "    <p><a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.zip\">db-derby-{0}-src.zip</a>  [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.md5\">MD5  </a>]<br/>\n" +
0:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz\">db-derby-{0}-src.tar.gz</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.md5\">MD5</a>] (Note that, due to long filenames, you will need gnu tar to unravel this tarball.)</p>\n" +
1:         "\n" +
0:         "    <p>There are two separate Eclipse plugins for Derby:</p>\n" +
1:         "    <ul>\n" +
0:         "      <li>derby_core_plugin - provides the Derby jar files to other plugins in Eclipse.</li>\n" +
0:         "      <li>derby_ui_doc_plugin - provides an Apache Derby Nature in Eclipse for easy database application development.</li>\n" +
1:         "    </ul>\n" +
0:         "    <p> <a href=\"[preferred]/db/derby/db-derby-{0}/derby_core_plugin_{1}.zip\">derby_core_plugin_{1}.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/derby_core_plugin_{1}.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/derby_core_plugin_{1}.zip.md5\">MD5</a>]<br/>\n" +
0:         "    <a href=\"[preferred]/db/derby/db-derby-{0}/derby_ui_doc_plugin_1.1.2.zip\">derby_ui_doc_plugin_1.1.2.zip</a> [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/derby_ui_doc_plugin_1.1.2.zip.asc\">PGP</a>] [<a href=\"http://www.apache.org/dist/db/derby/db-derby-{0}/derby_ui_doc_plugin_1.1.2.zip.md5\">MD5</a>]</p>\n" +
0:         "    <p>Please note: both plugins must be installed for full functionality. For information on installing and using\n" +
0:         "       the Derby plugins for Eclipse, please see the <a href=\"http://db.apache.org/derby/integrate/plugin_howto.html\">Using the 10 Core and 1.1 UI Derby plug-ins</a> p  age.</p>\n";
1:     
1: 
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  STATE
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     private DocumentBuilder _docBldr;
1:     private Document _inputDoc;
1:     private File _inputFile;
1:     private File _outputFile;
1: 
1:     private String _inputFileName;
1:     private String _outputFileName;
1:     private String _releaseID;
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTRUCTOR
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     public ReleaseNotesTransformer() throws Exception
1:     {
1:         _docBldr = DocumentBuilderFactory.newInstance().newDocumentBuilder();
1:     }
1:     
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  ANT Task BEHAVIOR
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Ant accessor to set the name of the input file, the original release notes.
1:      */
1:     public void setInputFileName(String inputFileName) throws Exception
1:     {
1:         _inputFileName = inputFileName;
1:         _inputFile = new File(_inputFileName);
1: 
1:         println( "Reading from " + inputFileName + "..." );
1:     }
1: 
1:     /**
1:      * Ant accessor to set the name of the generated output file
1:      */
1:     public void setOutputFileName(String outputFileName) throws Exception
1:     {
1:         _outputFileName = outputFileName;
1:         _outputFile = new File(_outputFileName);
1: 
1:         println( "Writing to " + outputFileName + "..." );
1:     }
1: 
1:     /**
1:      * Ant accessor to set the release id.
1:      */
1:     public void setReleaseId(String releaseID) throws Exception
1:     {
1:         _releaseID = releaseID;
1: 
1:         println( "Setting release id to " + _releaseID + "..." );
1:     }
1: 
1:     /**
1:      * This is Ant's entry point into this task.
1:      */
1:     public void execute() throws BuildException
1:     {
1:         try {
1:             transform();
1:             printOutput();
1:             postProcess();
1:         }
1:         catch (Throwable t) {
1:             t.printStackTrace();
1: 
1:             throw new BuildException("Error running ReleaseNotesTransformer: " + t.getMessage(), t);
1:         }
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CORE BEHAVIOR
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      *<p>
1:      * This is the guts of the processing.
1:      * </p>
1:      */
1:     private void transform() throws Exception
1:     {
1:         // this writes normalized text to the output file
1:         normalizeText( _inputFile, _outputFile );
1: 
1:         // correct text so that it is parseable and remove brackets which Forrest can't see
1:         InputStream normalizedText = new FileInputStream( _outputFile );
1:         _inputDoc = _docBldr.parse( normalizedText );
1:         normalizedText.close();
1:         
1:         removeBlockquotes();
1:         removeTopTOC();
1:         removeIssuesTOC();
1:     }
1: 
1:     /**
1:      * <p>
1:      * Remove the blockquotes which hide text from Forrest.
1:      * </p>
1:      */
1:     private void removeBlockquotes() throws Exception
1:     {
1:         Element root = _inputDoc.getDocumentElement();
1:         HashSet<Element> replacedNodes = new HashSet<Element>();
1:         String tag = "blockquote";
1: 
1:         while ( true )
1:         {
1:             Element suspect = getFirstDescendant( root, tag );
1:             if ( suspect == null ) { break; }
1: 
1:             if ( replacedNodes.contains( suspect ) )
1:             {
1:                 throw new Exception( "Stuck in a loop trying to strip '" + tag + "'" );
1:             }
1:             replacedNodes.add( suspect );
1: 
1:             Element parent = (Element) suspect.getParentNode();
1:             NodeList children = suspect.getChildNodes();
1: 
1:             if ( children != null )
1:             {
1:                 int childCount = children.getLength();
1: 
1:                 for ( int i = 0; i < childCount; i++ )
1:                 {
1:                     Node oldChild = children.item( i );
1: 
1:                     if ( oldChild != null )
1:                     {
1:                         Node newChild = oldChild.cloneNode( true );
1: 
1:                         parent.insertBefore( newChild, suspect );
1:                     }
1:                 }
1:             }
1:             parent.removeChild( suspect );
1:         }   // end loop through suspects
1:     }
1:     
1:     /**
1:      * <p>
1:      * Remove the top level table of contents. This is the first list in the document.
1:      * </p>
1:      */
1:     private void removeTopTOC() throws Exception
1:     {
1:         removeFirstList( _inputDoc.getDocumentElement() );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Remove the table of contents of the Issues section. This is the first list in that section.
1:      * </p>
1:      */
1:     private void removeIssuesTOC() throws Exception
1:     {
1:         Element issuesHeader = findHeader( 2, "Issues" );
1: 
1:         if ( issuesHeader != null )
1:         {
1:             // now look for the first list that follows
1: 
1:             NodeList allLists = _inputDoc.getDocumentElement().getElementsByTagName( "ul" );
1: 
1:             if ( allLists == null ) { return; }
1: 
1:             int count = allLists.getLength();
1: 
1:             for ( int i = 0; i < count; i++ )
1:             {
1:                 Node nextList = allLists.item( i );
1:                 
1:                 if ( issuesHeader.compareDocumentPosition( nextList ) == Node.DOCUMENT_POSITION_FOLLOWING )
1:                 {
1:                     nextList.getParentNode().removeChild( nextList );
1:                     break;
1:                 }
1:             }
1: 
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Remove the first list under an element.
1:      * </p>
1:      */
1:     private void removeFirstList( Element root ) throws Exception
1:     {
1:         Element listElement = getFirstDescendant( root, "ul" );
1: 
1:         if ( listElement != null )
1:         {
1:             listElement.getParentNode().removeChild( listElement );
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Find the header element with this given name.
1:      * </p>
1:      */
1:     private Element findHeader( int headerLevel, String headerTitle ) throws Exception
1:     {
1:         Element root = _inputDoc.getDocumentElement();
1:         String headerTag = "h" +  headerLevel;
1:         NodeList headers = root.getElementsByTagName( headerTag );
1: 
1:         if ( headers == null ) { return null; }
1: 
1:         int count = headers.getLength();
1: 
1:         for ( int i = 0; i < count; i++ )
1:         {
1:             Node nextHeader = headers.item( i );
1:             String title = nextHeader.getTextContent().trim();
1: 
1:             if ( headerTitle.equals( title ) ) { return (Element) nextHeader; }
1:         }
1: 
1:         return null;
1:     }
1: 
1:     
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  MINIONS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     private Element getFirstDescendant( Element ancestor, String tagName )
1:     {
1:         NodeList nl = ancestor.getElementsByTagName( tagName );
1: 
1:         if ( nl == null ) { return null; }
1:         if ( nl.getLength() == 0 ) { return null; }
1: 
1:         return (Element) nl.item( 0 );
1:     }
1:     
1:     /**
1:      * Adjust input text to remove junk which confuses the xml parser and/or Forrest.
1:      * Temporarily writes the adjusted text to the output file.
1:      */
1:     private void normalizeText( File inputFile, File outputFile ) throws Exception
1:     {
1:         String rawString = readFileIntoString( inputFile );
1: 
1:         // The Transformer which wrote the original release notes managed to turn <br/> into <br>
1:         // and <hr/> into <hr>. Fix this.
1:         rawString = fullReplaceToken( rawString, "<br>", "<br/>" );
1:         rawString = fullReplaceToken( rawString, "<hr>", "<hr/>" );
1: 
1:         // Forrest doesn't like square brackets and swallows the bracketed content
0:         rawString.replace( '[', '(' );
0:         rawString.replace( ']', ')' );
1: 
1:         FileWriter fileWriter = new FileWriter( outputFile );
1:         fileWriter.append( rawString );
1:         fileWriter.flush();
1:         fileWriter.close();
1:     }
1:     private String fullReplaceToken( String rawString, String token, String replacement )
1:     {
1:         rawString = replaceToken( rawString, token.toLowerCase(), replacement );
1:         rawString = replaceToken( rawString, token.toUpperCase(), replacement );
1:         
1:         return rawString;
1:     }
1:     private String replaceToken( String rawString, String token, String replacement )
1:     {
1:         StringWriter output = new StringWriter();
1:         int rawLength = rawString.length();
1:         int tokenLength = token.length();
1:         int start = 0;
1: 
1:         while ( true )
1:         {
1:             int idx = rawString.indexOf( token, start );
1:             if ( idx < 0 ) { break; }
1: 
1:             output.append( rawString.substring( start, idx ) );
1:             output.append( replacement );
1:             start = idx + tokenLength;
1:         }
1: 
1:         if ( start < rawLength )
1:         {
1:             output.append( rawString.substring( start, rawLength ) );
1:         }
1: 
1:         return output.toString();
1:     }
1:     
1:     /**
1:      * Print the generated output document to the output file.
1:      */
1:     private void printOutput() throws Exception
1:     {
1:         Source source = new DOMSource(_inputDoc);
1: 
1:         Result result = new StreamResult(_outputFile);
1:         Transformer transformer = TransformerFactory.newInstance().newTransformer();
1: 
1:         transformer.transform(source, result);
1:     }
1: 
1:     /**
1:      * <p>
1:      * Post-process the output:
1:      * </p>
1:      *
1:      * <ul>
1:      * <li>Add preamble to the head of the file.</li>
1:      * </ul>
1:      */
1:     private void postProcess()
1:         throws Exception
1:     {
1:         String shortReleaseID = _releaseID.substring( 0, _releaseID.lastIndexOf( "." ) );
1:         String preamble = MessageFormat.format( PREAMBLE, _releaseID, shortReleaseID );
1:         String contents = readFileIntoString( _outputFile );
1:         String firstHeader = "<h1>";
1:         int cutIdx = contents.indexOf( firstHeader );
1:         String result = preamble + contents.substring( cutIdx );
1: 
1:         writeStringIntoFile( result, _outputFile );
1:     }
1:     
1:     /**
1:      * Print a line of text to the console.
1:      */
1:     private void println(String text)
1:     {
1:         log(text, Project.MSG_WARN);
1:     }
1: 
1:     /**
1:      * <p>
1:      * Read a file and return the entire contents as a single String.
1:      * </p>
1:      */
1:     private String readFileIntoString( File inputFile ) throws Exception
1:     {
1:         FileReader fileReader = new FileReader( inputFile );
1:         StringWriter stringWriter = new StringWriter();
1: 
1:         while( true )
1:         {
1:             int nextChar = fileReader.read();
1:             if ( nextChar < 0 ) { break; }
1: 
1:             stringWriter.append( (char) nextChar );
1:         }
1: 
1:         String rawString = stringWriter.toString();
1: 
1:         return rawString;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Write a string into a file.
1:      * </p>
1:      */
1:     private void writeStringIntoFile( String rawString, File outputFile )
1:         throws Exception
1:     {
1:         PrintWriter writer = new PrintWriter( outputFile, "UTF-8" );
1: 
1:         writer.println( rawString );
1:         writer.flush();
1:         writer.close();
1:     }
1: 
1: }
============================================================================