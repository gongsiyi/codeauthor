1:e23728d: /**
1:e23728d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e23728d:  * contributor license agreements.  See the NOTICE file distributed with
1:e23728d:  * this work for additional information regarding copyright ownership.
1:e23728d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e23728d:  * (the "License"); you may not use this file except in compliance with
1:e23728d:  * the License.  You may obtain a copy of the License at
1:e23728d:  *
1:e23728d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e23728d:  *
1:e23728d:  * Unless required by applicable law or agreed to in writing, software
1:e23728d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e23728d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e23728d:  * See the License for the specific language governing permissions and
1:e23728d:  * limitations under the License.
1:e23728d:  */
1:e23728d: 
1:e23728d: package org.apache.mahout.cf.taste.impl.similarity;
1:e23728d: 
1:e23728d: import com.google.common.base.Preconditions;
1:e23728d: import org.apache.mahout.cf.taste.common.Refreshable;
1:e23728d: import org.apache.mahout.cf.taste.common.TasteException;
1:e23728d: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:e23728d: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:e23728d: import org.apache.mahout.cf.taste.impl.common.RefreshHelper;
1:e23728d: import org.apache.mahout.cf.taste.model.DataModel;
1:e23728d: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1:e23728d: 
1:e23728d: import java.util.Collection;
1:e23728d: 
1:e23728d: public abstract class AbstractItemSimilarity implements ItemSimilarity {
1:e23728d: 
1:208aa07:   private final DataModel dataModel;
1:e23728d:   private final RefreshHelper refreshHelper;
1:e23728d: 
1:208aa07:   protected AbstractItemSimilarity(DataModel dataModel) {
1:e23728d:     Preconditions.checkArgument(dataModel != null, "dataModel is null");
1:e23728d:     this.dataModel = dataModel;
1:e23728d:     this.refreshHelper = new RefreshHelper(null);
1:e23728d:     refreshHelper.addDependency(this.dataModel);
1:e23728d:   }
1:e23728d: 
1:208aa07:   protected DataModel getDataModel() {
1:208aa07:     return dataModel;
1:208aa07:   }
1:208aa07: 
1:e23728d:   @Override
1:e23728d:   public long[] allSimilarItemIDs(long itemID) throws TasteException {
1:e23728d:     FastIDSet allSimilarItemIDs = new FastIDSet();
1:e23728d:     LongPrimitiveIterator allItemIDs = dataModel.getItemIDs();
1:e23728d:     while (allItemIDs.hasNext()) {
1:e23728d:       long possiblySimilarItemID = allItemIDs.nextLong();
1:e23728d:       if (!Double.isNaN(itemSimilarity(itemID, possiblySimilarItemID))) {
1:e23728d:         allSimilarItemIDs.add(possiblySimilarItemID);
1:e23728d:       }
1:e23728d:     }
1:e23728d:     return allSimilarItemIDs.toArray();
1:e23728d:   }
1:e23728d: 
1:e23728d:   @Override
1:e23728d:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:3218e95:     refreshHelper.refresh(alreadyRefreshed);
1:e23728d:   }
1:e23728d: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:3218e95
/////////////////////////////////////////////////////////////////////////
1:     refreshHelper.refresh(alreadyRefreshed);
commit:208aa07
/////////////////////////////////////////////////////////////////////////
1:   private final DataModel dataModel;
1:   protected AbstractItemSimilarity(DataModel dataModel) {
1:   protected DataModel getDataModel() {
1:     return dataModel;
1:   }
1: 
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e23728d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.similarity;
1: 
1: import com.google.common.base.Preconditions;
1: import org.apache.mahout.cf.taste.common.Refreshable;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.impl.common.RefreshHelper;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1: 
1: import java.util.Collection;
1: 
1: public abstract class AbstractItemSimilarity implements ItemSimilarity {
1: 
0:   protected final DataModel dataModel;
1:   private final RefreshHelper refreshHelper;
1: 
0:   public AbstractItemSimilarity(DataModel dataModel) {
1:     Preconditions.checkArgument(dataModel != null, "dataModel is null");
1:     this.dataModel = dataModel;
1:     this.refreshHelper = new RefreshHelper(null);
1:     refreshHelper.addDependency(this.dataModel);
1:   }
1: 
1:   @Override
1:   public long[] allSimilarItemIDs(long itemID) throws TasteException {
1:     FastIDSet allSimilarItemIDs = new FastIDSet();
1:     LongPrimitiveIterator allItemIDs = dataModel.getItemIDs();
1:     while (allItemIDs.hasNext()) {
1:       long possiblySimilarItemID = allItemIDs.nextLong();
1:       if (!Double.isNaN(itemSimilarity(itemID, possiblySimilarItemID))) {
1:         allSimilarItemIDs.add(possiblySimilarItemID);
1:       }
1:     }
1:     return allSimilarItemIDs.toArray();
1:   }
1: 
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
0:      refreshHelper.refresh(alreadyRefreshed);
1:   }
1: }
============================================================================