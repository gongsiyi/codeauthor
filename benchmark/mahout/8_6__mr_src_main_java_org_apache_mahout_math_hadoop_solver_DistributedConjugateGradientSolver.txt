1:4fbfbc6: /*
1:4fbfbc6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4fbfbc6:  * contributor license agreements.  See the NOTICE file distributed with
1:4fbfbc6:  * this work for additional information regarding copyright ownership.
1:4fbfbc6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4fbfbc6:  * (the "License"); you may not use this file except in compliance with
1:4fbfbc6:  * the License.  You may obtain a copy of the License at
1:4fbfbc6:  *
1:4fbfbc6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4fbfbc6:  *
1:4fbfbc6:  * Unless required by applicable law or agreed to in writing, software
1:4fbfbc6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4fbfbc6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4fbfbc6:  * See the License for the specific language governing permissions and
1:4fbfbc6:  * limitations under the License.
1:4fbfbc6:  */
1:4fbfbc6: 
1:5fc5b65: package org.apache.mahout.math.hadoop.solver;
4:5fc5b65: 
1:5fc5b65: import java.io.IOException;
1:6db7f62: import java.util.List;
1:5fc5b65: import java.util.Map;
1:5fc5b65: 
1:5fc5b65: import org.apache.hadoop.conf.Configuration;
1:5fc5b65: import org.apache.hadoop.fs.FileSystem;
1:5fc5b65: import org.apache.hadoop.fs.Path;
1:5fc5b65: import org.apache.hadoop.io.IntWritable;
1:5fc5b65: import org.apache.hadoop.io.SequenceFile;
1:5fc5b65: import org.apache.hadoop.util.Tool;
1:5fc5b65: import org.apache.hadoop.util.ToolRunner;
1:5fc5b65: import org.apache.mahout.common.AbstractJob;
1:5fc5b65: import org.apache.mahout.math.Vector;
1:5fc5b65: import org.apache.mahout.math.VectorWritable;
1:5fc5b65: import org.apache.mahout.math.hadoop.DistributedRowMatrix;
1:5fc5b65: import org.apache.mahout.math.solver.ConjugateGradientSolver;
1:5fc5b65: import org.apache.mahout.math.solver.Preconditioner;
1:5fc5b65: 
1:5fc5b65: /**
1:5fc5b65:  * Distributed implementation of the conjugate gradient solver. More or less, this is just the standard solver
1:5fc5b65:  * but wrapped with some methods that make it easy to run it on a DistributedRowMatrix.
1:5fc5b65:  */
1:4fbfbc6: public class DistributedConjugateGradientSolver extends ConjugateGradientSolver implements Tool {
1:5fc5b65: 
1:5fc5b65:   private Configuration conf; 
1:6db7f62:   private Map<String, List<String>> parsedArgs;
1:5fc5b65: 
1:5fc5b65:   /**
3:5fc5b65:    * 
1:5fc5b65:    * Runs the distributed conjugate gradient solver programmatically to solve the system (A + lambda*I)x = b.
1:5fc5b65:    * 
1:5fc5b65:    * @param inputPath      Path to the matrix A
1:5fc5b65:    * @param tempPath       Path to scratch output path, deleted after the solver completes
1:5fc5b65:    * @param numRows        Number of rows in A
1:5fc5b65:    * @param numCols        Number of columns in A
1:5fc5b65:    * @param b              Vector b
1:5fc5b65:    * @param preconditioner Optional preconditioner for the system
1:5fc5b65:    * @param maxIterations  Maximum number of iterations to run, defaults to numCols
1:229aeff:    * @param maxError       Maximum error tolerated in the result. If the norm of the residual falls below this,
1:229aeff:    *                       then the algorithm stops and returns.
1:5fc5b65:    * @return               The vector that solves the system.
1:5fc5b65:    */
1:5fc5b65:   public Vector runJob(Path inputPath, 
1:5fc5b65:                        Path tempPath, 
1:5fc5b65:                        int numRows, 
1:5fc5b65:                        int numCols, 
1:5fc5b65:                        Vector b, 
1:5fc5b65:                        Preconditioner preconditioner, 
1:5fc5b65:                        int maxIterations, 
1:5fc5b65:                        double maxError) {
1:5fc5b65:     DistributedRowMatrix matrix = new DistributedRowMatrix(inputPath, tempPath, numRows, numCols);
1:5fc5b65:     matrix.setConf(conf);
1:5fc5b65:         
1:5fc5b65:     return solve(matrix, b, preconditioner, maxIterations, maxError);
1:5fc5b65:   }
1:5fc5b65:   
1:5fc5b65:   @Override
1:4fbfbc6:   public Configuration getConf() {
1:5fc5b65:     return conf;
1:5fc5b65:   }
1:5fc5b65: 
1:5fc5b65:   @Override
1:4fbfbc6:   public void setConf(Configuration conf) {
1:5fc5b65:     this.conf = conf;    
1:5fc5b65:   }
1:5fc5b65: 
1:5fc5b65:   @Override
1:4fbfbc6:   public int run(String[] strings) throws Exception {
1:6db7f62:     Path inputPath = new Path(AbstractJob.getOption(parsedArgs, "--input"));
1:6db7f62:     Path outputPath = new Path(AbstractJob.getOption(parsedArgs, "--output"));
1:6db7f62:     Path tempPath = new Path(AbstractJob.getOption(parsedArgs, "--tempDir"));
1:6db7f62:     Path vectorPath = new Path(AbstractJob.getOption(parsedArgs, "--vector"));
1:6db7f62:     int numRows = Integer.parseInt(AbstractJob.getOption(parsedArgs, "--numRows"));
1:6db7f62:     int numCols = Integer.parseInt(AbstractJob.getOption(parsedArgs, "--numCols"));
1:229aeff:     int maxIterations = parsedArgs.containsKey("--maxIter")
1:229aeff:         ? Integer.parseInt(AbstractJob.getOption(parsedArgs, "--maxIter"))
1:99fd9ba:         : numCols + 2;
1:5fc5b65:     double maxError = parsedArgs.containsKey("--maxError") 
1:6db7f62:         ? Double.parseDouble(AbstractJob.getOption(parsedArgs, "--maxError"))
1:5fc5b65:         : ConjugateGradientSolver.DEFAULT_MAX_ERROR;
1:5fc5b65: 
1:5fc5b65:     Vector b = loadInputVector(vectorPath);
1:5fc5b65:     Vector x = runJob(inputPath, tempPath, numRows, numCols, b, null, maxIterations, maxError);
1:5fc5b65:     saveOutputVector(outputPath, x);
1:5fc5b65:     tempPath.getFileSystem(conf).delete(tempPath, true);
1:5fc5b65:     
1:5fc5b65:     return 0;
1:5fc5b65:   }
1:5fc5b65:   
1:5fc5b65:   public DistributedConjugateGradientSolverJob job() {
1:5fc5b65:     return new DistributedConjugateGradientSolverJob();
1:5fc5b65:   }
1:5fc5b65:   
1:5fc5b65:   private Vector loadInputVector(Path path) throws IOException {
1:5fc5b65:     FileSystem fs = path.getFileSystem(conf);
1:87c15be:     try (SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, conf)) {
1:4ca6b86:       VectorWritable value = new VectorWritable();
1:564c3e1:       if (!reader.next(new IntWritable(), value)) {
1:87c15be:         throw new IOException("Input vector file is empty.");
1:5fc5b65:       }
1:5fc5b65:       return value.get();
1:5fc5b65:     }
1:5fc5b65:   }
1:5fc5b65:   
1:5fc5b65:   private void saveOutputVector(Path path, Vector v) throws IOException {
1:5fc5b65:     FileSystem fs = path.getFileSystem(conf);
1:87c15be:     try (SequenceFile.Writer writer =
1:87c15be:              new SequenceFile.Writer(fs, conf, path, IntWritable.class, VectorWritable.class)) {
1:5fc5b65:       writer.append(new IntWritable(0), new VectorWritable(v));
1:5fc5b65:     }
1:5fc5b65:   }
1:5fc5b65:   
1:5fc5b65:   public class DistributedConjugateGradientSolverJob extends AbstractJob {
1:5fc5b65:     @Override
1:5fc5b65:     public void setConf(Configuration conf) {
1:5fc5b65:       DistributedConjugateGradientSolver.this.setConf(conf);
1:5fc5b65:     }
1:5fc5b65:     
1:5fc5b65:     @Override
1:5fc5b65:     public Configuration getConf() {
1:5fc5b65:       return DistributedConjugateGradientSolver.this.getConf();
1:5fc5b65:     }
1:5fc5b65:     
1:5fc5b65:     @Override
1:4fbfbc6:     public int run(String[] args) throws Exception {
1:5fc5b65:       addInputOption();
1:5fc5b65:       addOutputOption();
1:5fc5b65:       addOption("numRows", "nr", "Number of rows in the input matrix", true);
1:5fc5b65:       addOption("numCols", "nc", "Number of columns in the input matrix", true);
1:5fc5b65:       addOption("vector", "b", "Vector to solve against", true);
1:5fc5b65:       addOption("lambda", "l", "Scalar in A + lambda * I [default = 0]", "0.0");
1:5fc5b65:       addOption("symmetric", "sym", "Is the input matrix square and symmetric?", "true");
1:5fc5b65:       addOption("maxIter", "x", "Maximum number of iterations to run");
1:5fc5b65:       addOption("maxError", "err", "Maximum residual error to allow before stopping");
1:5fc5b65: 
1:5fc5b65:       DistributedConjugateGradientSolver.this.parsedArgs = parseArguments(args);
1:5fc5b65:       if (DistributedConjugateGradientSolver.this.parsedArgs == null) {
1:5fc5b65:         return -1;
1:5fc5b65:       } else {
1:4ce12cc:         Configuration conf = getConf();
1:4ca6b86:         if (conf == null) {
1:4ce12cc:           conf = new Configuration();
1:4ca6b86:         }
1:4ce12cc:         DistributedConjugateGradientSolver.this.setConf(conf);
1:5fc5b65:         return DistributedConjugateGradientSolver.this.run(args);
1:5fc5b65:       }
1:5fc5b65:     }    
1:5fc5b65:   }
1:5fc5b65: 
1:5fc5b65:   public static void main(String[] args) throws Exception {
1:5fc5b65:     ToolRunner.run(new DistributedConjugateGradientSolver().job(), args);
1:5fc5b65:   }
1:5fc5b65: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     try (SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, conf)) {
1:         throw new IOException("Input vector file is empty.");
1:     try (SequenceFile.Writer writer =
1:              new SequenceFile.Writer(fs, conf, path, IntWritable.class, VectorWritable.class)) {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:99fd9ba
/////////////////////////////////////////////////////////////////////////
1:         : numCols + 2;
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:       VectorWritable value = new VectorWritable();
/////////////////////////////////////////////////////////////////////////
1:         if (conf == null) {
1:         }
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:    * @param maxError       Maximum error tolerated in the result. If the norm of the residual falls below this,
1:    *                       then the algorithm stops and returns.
/////////////////////////////////////////////////////////////////////////
1:     int maxIterations = parsedArgs.containsKey("--maxIter")
1:         ? Integer.parseInt(AbstractJob.getOption(parsedArgs, "--maxIter"))
0:         : numCols;
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:       if (!reader.next(new IntWritable(), value)) {
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: public class DistributedConjugateGradientSolver extends ConjugateGradientSolver implements Tool {
/////////////////////////////////////////////////////////////////////////
1:   public Configuration getConf() {
1:   public void setConf(Configuration conf) {
1:   public int run(String[] strings) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public int run(String[] args) throws Exception {
author:Isabel Drost
-------------------------------------------------------------------------------
commit:4ce12cc
/////////////////////////////////////////////////////////////////////////
1:         Configuration conf = getConf();
0:         if (conf == null)
1:           conf = new Configuration();
1:         DistributedConjugateGradientSolver.this.setConf(conf);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:6db7f62
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:   private Map<String, List<String>> parsedArgs;
/////////////////////////////////////////////////////////////////////////
1:     Path inputPath = new Path(AbstractJob.getOption(parsedArgs, "--input"));
1:     Path outputPath = new Path(AbstractJob.getOption(parsedArgs, "--output"));
1:     Path tempPath = new Path(AbstractJob.getOption(parsedArgs, "--tempDir"));
1:     Path vectorPath = new Path(AbstractJob.getOption(parsedArgs, "--vector"));
1:     int numRows = Integer.parseInt(AbstractJob.getOption(parsedArgs, "--numRows"));
1:     int numCols = Integer.parseInt(AbstractJob.getOption(parsedArgs, "--numCols"));
0:     int maxIterations = parsedArgs.containsKey("--maxIter") ? Integer.parseInt(AbstractJob.getOption(parsedArgs, "--maxIter")) : numCols;
1:         ? Double.parseDouble(AbstractJob.getOption(parsedArgs, "--maxError"))
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:5fc5b65
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.solver;
1: 
1: import java.io.IOException;
1: import java.util.Map;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.util.Tool;
1: import org.apache.hadoop.util.ToolRunner;
1: import org.apache.mahout.common.AbstractJob;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.hadoop.DistributedRowMatrix;
1: import org.apache.mahout.math.solver.ConjugateGradientSolver;
1: import org.apache.mahout.math.solver.Preconditioner;
1: 
1: /**
1:  * 
1:  * Distributed implementation of the conjugate gradient solver. More or less, this is just the standard solver
1:  * but wrapped with some methods that make it easy to run it on a DistributedRowMatrix.
1:  *  
1:  */
1: 
0: public class DistributedConjugateGradientSolver extends ConjugateGradientSolver implements Tool
0: {
1:   private Configuration conf; 
0:   private Map<String, String> parsedArgs;
1: 
1:   /**
1:    * 
1:    * Runs the distributed conjugate gradient solver programmatically to solve the system (A + lambda*I)x = b.
1:    * 
1:    * @param inputPath      Path to the matrix A
1:    * @param tempPath       Path to scratch output path, deleted after the solver completes
1:    * @param numRows        Number of rows in A
1:    * @param numCols        Number of columns in A
1:    * @param b              Vector b
1:    * @param preconditioner Optional preconditioner for the system
1:    * @param maxIterations  Maximum number of iterations to run, defaults to numCols
0:    * @param maxError       Maximum error tolerated in the result. If the norm of the residual falls below this, then the 
0:    *                       algorithm stops and returns. 
1: 
1:    * @return               The vector that solves the system.
1:    */
1:   public Vector runJob(Path inputPath, 
1:                        Path tempPath, 
1:                        int numRows, 
1:                        int numCols, 
1:                        Vector b, 
1:                        Preconditioner preconditioner, 
1:                        int maxIterations, 
1:                        double maxError) {
1:     DistributedRowMatrix matrix = new DistributedRowMatrix(inputPath, tempPath, numRows, numCols);
1:     matrix.setConf(conf);
1:         
1:     return solve(matrix, b, preconditioner, maxIterations, maxError);
1:   }
1:   
1:   @Override
0:   public Configuration getConf()
0:   {
1:     return conf;
1:   }
1: 
1:   @Override
0:   public void setConf(Configuration conf)
0:   {
1:     this.conf = conf;    
1:   }
1: 
1:   @Override
0:   public int run(String[] strings) throws Exception
0:   {
0:     Path inputPath = new Path(parsedArgs.get("--input"));
0:     Path outputPath = new Path(parsedArgs.get("--output"));
0:     Path tempPath = new Path(parsedArgs.get("--tempDir"));
0:     Path vectorPath = new Path(parsedArgs.get("--vector"));
0:     int numRows = Integer.parseInt(parsedArgs.get("--numRows"));
0:     int numCols = Integer.parseInt(parsedArgs.get("--numCols"));
0:     int maxIterations = parsedArgs.containsKey("--maxIter") ? Integer.parseInt(parsedArgs.get("--maxIter")) : numCols;
1:     double maxError = parsedArgs.containsKey("--maxError") 
0:         ? Double.parseDouble(parsedArgs.get("--maxError")) 
1:         : ConjugateGradientSolver.DEFAULT_MAX_ERROR;
1: 
1:     Vector b = loadInputVector(vectorPath);
1:     Vector x = runJob(inputPath, tempPath, numRows, numCols, b, null, maxIterations, maxError);
1:     saveOutputVector(outputPath, x);
1:     tempPath.getFileSystem(conf).delete(tempPath, true);
1:     
1:     return 0;
1:   }
1:   
1:   public DistributedConjugateGradientSolverJob job() {
1:     return new DistributedConjugateGradientSolverJob();
1:   }
1:   
1:   private Vector loadInputVector(Path path) throws IOException {
1:     FileSystem fs = path.getFileSystem(conf);
0:     SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, conf);
0:     IntWritable key = new IntWritable();
0:     VectorWritable value = new VectorWritable();
1:     
0:     try {
0:       if (!reader.next(key, value)) {
0:         throw new IOException("Input vector file is empty.");      
1:       }
1:       return value.get();
0:     } finally {
0:       reader.close();
1:     }
1:   }
1:   
1:   private void saveOutputVector(Path path, Vector v) throws IOException {
1:     FileSystem fs = path.getFileSystem(conf);
0:     SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, path, IntWritable.class, VectorWritable.class);
1:     
0:     try {
1:       writer.append(new IntWritable(0), new VectorWritable(v));
0:     } finally {
0:       writer.close();
1:     }
1:   }
1:   
1:   public class DistributedConjugateGradientSolverJob extends AbstractJob {
1:     @Override
1:     public void setConf(Configuration conf) {
1:       DistributedConjugateGradientSolver.this.setConf(conf);
1:     }
1:     
1:     @Override
1:     public Configuration getConf() {
1:       return DistributedConjugateGradientSolver.this.getConf();
1:     }
1:     
1:     @Override
0:     public int run(String[] args) throws Exception
0:     {
1:       addInputOption();
1:       addOutputOption();
1:       addOption("numRows", "nr", "Number of rows in the input matrix", true);
1:       addOption("numCols", "nc", "Number of columns in the input matrix", true);
1:       addOption("vector", "b", "Vector to solve against", true);
1:       addOption("lambda", "l", "Scalar in A + lambda * I [default = 0]", "0.0");
1:       addOption("symmetric", "sym", "Is the input matrix square and symmetric?", "true");
1:       addOption("maxIter", "x", "Maximum number of iterations to run");
1:       addOption("maxError", "err", "Maximum residual error to allow before stopping");
1: 
1:       DistributedConjugateGradientSolver.this.parsedArgs = parseArguments(args);
1:       if (DistributedConjugateGradientSolver.this.parsedArgs == null) {
1:         return -1;
1:       } else {
0:         DistributedConjugateGradientSolver.this.setConf(new Configuration());
1:         return DistributedConjugateGradientSolver.this.run(args);
1:       }
1:     }    
1:   }
1: 
1:   public static void main(String[] args) throws Exception {
1:     ToolRunner.run(new DistributedConjugateGradientSolver().job(), args);
1:   }
1: }
============================================================================