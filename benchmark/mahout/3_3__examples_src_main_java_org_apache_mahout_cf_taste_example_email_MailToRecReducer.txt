1:4fbfbc6: /*
1:4fbfbc6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4fbfbc6:  * contributor license agreements.  See the NOTICE file distributed with
1:4fbfbc6:  * this work for additional information regarding copyright ownership.
1:4fbfbc6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4fbfbc6:  * (the "License"); you may not use this file except in compliance with
1:4fbfbc6:  * the License.  You may obtain a copy of the License at
1:4fbfbc6:  *
1:4fbfbc6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4fbfbc6:  *
1:4fbfbc6:  * Unless required by applicable law or agreed to in writing, software
1:4fbfbc6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4fbfbc6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4fbfbc6:  * See the License for the specific language governing permissions and
1:4fbfbc6:  * limitations under the License.
1:4fbfbc6:  */
1:05cf634: 
1:4fbfbc6: package org.apache.mahout.cf.taste.example.email;
1:05cf634: 
1:05cf634: import org.apache.hadoop.io.LongWritable;
1:05cf634: import org.apache.hadoop.io.NullWritable;
1:05cf634: import org.apache.hadoop.io.Text;
1:05cf634: import org.apache.hadoop.mapreduce.Reducer;
1:05cf634: 
1:05cf634: import java.io.IOException;
1:05cf634: 
1:3c22856: public class MailToRecReducer extends Reducer<Text, LongWritable, Text, NullWritable> {
1:05cf634:   //if true, then output weight
1:05cf634:   private boolean useCounts = true;
2:05cf634:   /**
1:05cf634:    * We can either ignore how many times the user interacted (boolean) or output the number of times they interacted.
1:05cf634:    */
1:05cf634:   public static final String USE_COUNTS_PREFERENCE = "useBooleanPreferences";
1:05cf634: 
1:05cf634:   @Override
1:05cf634:   protected void setup(Context context) throws IOException, InterruptedException {
1:05cf634:     useCounts = context.getConfiguration().getBoolean(USE_COUNTS_PREFERENCE, true);
1:05cf634:   }
1:05cf634: 
1:05cf634:   @Override
1:3c22856:   protected void reduce(Text key, Iterable<LongWritable> values, Context context)
1:6d16230:     throws IOException, InterruptedException {
1:4fbfbc6:     if (useCounts) {
1:05cf634:       long sum = 0;
1:05cf634:       for (LongWritable value : values) {
1:05cf634:         sum++;
1:05cf634:       }
1:4fbfbc6:       context.write(new Text(key.toString() + ',' + sum), null);
1:4fbfbc6:     } else {
1:4fbfbc6:       context.write(new Text(key.toString()), null);
1:05cf634:     }
1:05cf634:   }
1:05cf634: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     throws IOException, InterruptedException {
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1: public class MailToRecReducer extends Reducer<Text, LongWritable, Text, NullWritable> {
/////////////////////////////////////////////////////////////////////////
1:   protected void reduce(Text key, Iterable<LongWritable> values, Context context)
0:       throws IOException, InterruptedException {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.cf.taste.example.email;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (useCounts) {
1:       context.write(new Text(key.toString() + ',' + sum), null);
1:     } else {
1:       context.write(new Text(key.toString()), null);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:05cf634
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.cf.taste.example.email;
1: 
1: 
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.NullWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Reducer;
1: 
1: import java.io.IOException;
1: 
1: /**
0:  *
0:  *
0:  **/
0: public class MailToRecReducer extends Reducer<Text, LongWritable, Text, NullWritable>{
1:   //if true, then output weight
1:   private boolean useCounts = true;
1:   /**
1:    * We can either ignore how many times the user interacted (boolean) or output the number of times they interacted.
1:    */
1:   public static final String USE_COUNTS_PREFERENCE = "useBooleanPreferences";
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     useCounts = context.getConfiguration().getBoolean(USE_COUNTS_PREFERENCE, true);
1:   }
1: 
1:   @Override
0:   protected void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException {
0:     if (useCounts == false){
0:       context.write(new Text(key.toString()), null);
0:     } else {
1:       long sum = 0;
1:       for (LongWritable value : values) {
1:         sum++;
1:       }
0:       context.write(new Text(key.toString() + "," + sum), null);
1:     }
1:   }
1: }
============================================================================