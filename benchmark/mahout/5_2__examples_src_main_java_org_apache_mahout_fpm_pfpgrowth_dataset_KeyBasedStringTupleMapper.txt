1:7002241: /**
1:7002241:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7002241:  * contributor license agreements.  See the NOTICE file distributed with
1:7002241:  * this work for additional information regarding copyright ownership.
1:7002241:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7002241:  * (the "License"); you may not use this file except in compliance with
1:7002241:  * the License.  You may obtain a copy of the License at
1:7002241:  *
1:7002241:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7002241:  *
1:7002241:  * Unless required by applicable law or agreed to in writing, software
1:7002241:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7002241:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7002241:  * See the License for the specific language governing permissions and
1:7002241:  * limitations under the License.
1:7002241:  */
1:7002241: 
1:7002241: package org.apache.mahout.fpm.pfpgrowth.dataset;
1:7002241: 
1:7002241: import java.io.IOException;
1:4ef9d31: import java.util.ArrayList;
1:7002241: import java.util.Collection;
1:7002241: import java.util.List;
1:7002241: import java.util.regex.Pattern;
1:7002241: 
1:7002241: import org.apache.hadoop.io.LongWritable;
1:7002241: import org.apache.hadoop.io.Text;
1:7002241: import org.apache.hadoop.mapreduce.Mapper;
1:7002241: import org.apache.mahout.common.Parameters;
1:7002241: import org.apache.mahout.common.StringTuple;
1:7002241: import org.slf4j.Logger;
1:7002241: import org.slf4j.LoggerFactory;
1:7002241: 
1:7002241: /**
1:7002241:  * Splits the line using a {@link Pattern} and outputs key as given by the groupingFields
1:7002241:  * 
1:7002241:  */
1:7002241: public class KeyBasedStringTupleMapper extends Mapper<LongWritable,Text,Text,StringTuple> {
1:7002241:   
1:7002241:   private static final Logger log = LoggerFactory.getLogger(KeyBasedStringTupleMapper.class);
1:7002241:   
1:7002241:   private Pattern splitter;
1:7002241:   
1:7002241:   private int[] selectedFields;
1:7002241:   
1:7002241:   private int[] groupingFields;
1:7002241:   
1:7002241:   @Override
1:7002241:   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
1:7002241:     String[] fields = splitter.split(value.toString());
1:7002241:     if (fields.length != 4) {
1:7002241:       log.info("{} {}", fields.length, value.toString());
1:7002241:       context.getCounter("Map", "ERROR").increment(1);
1:7002241:       return;
1:7002241:     }
1:4ef9d31:     Collection<String> oKey = new ArrayList<>();
1:7002241:     for (int groupingField : groupingFields) {
1:7002241:       oKey.add(fields[groupingField]);
1:7002241:       context.setStatus(fields[groupingField]);
1:7002241:     }
1:7002241:     
1:4ef9d31:     List<String> oValue = new ArrayList<>();
1:7002241:     for (int selectedField : selectedFields) {
1:7002241:       oValue.add(fields[selectedField]);
1:7002241:     }
1:7002241:     
1:7002241:     context.write(new Text(oKey.toString()), new StringTuple(oValue));
1:7002241:     
1:7002241:   }
1:7002241:   
1:7002241:   @Override
1:7002241:   protected void setup(Context context) throws IOException, InterruptedException {
1:7002241:     super.setup(context);
1:7002241:     Parameters params = new Parameters(context.getConfiguration().get("job.parameters", ""));
1:7002241:     splitter = Pattern.compile(params.get("splitPattern", "[ \t]*\t[ \t]*"));
1:7002241:     
1:7002241:     int selectedFieldCount = Integer.valueOf(params.get("selectedFieldCount", "0"));
1:7002241:     selectedFields = new int[selectedFieldCount];
1:7002241:     for (int i = 0; i < selectedFieldCount; i++) {
1:7002241:       selectedFields[i] = Integer.valueOf(params.get("field" + i, "0"));
1:7002241:     }
1:7002241:     
1:7002241:     int groupingFieldCount = Integer.valueOf(params.get("groupingFieldCount", "0"));
1:7002241:     groupingFields = new int[groupingFieldCount];
1:7002241:     for (int i = 0; i < groupingFieldCount; i++) {
1:7002241:       groupingFields[i] = Integer.valueOf(params.get("gfield" + i, "0"));
1:7002241:     }
1:7002241:     
1:7002241:   }
1:7002241: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     Collection<String> oKey = new ArrayList<>();
1:     List<String> oValue = new ArrayList<>();
author:smarthi
-------------------------------------------------------------------------------
commit:7002241
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.fpm.pfpgrowth.dataset;
1: 
1: import java.io.IOException;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.regex.Pattern;
1: 
0: import com.google.common.collect.Lists;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.common.Parameters;
1: import org.apache.mahout.common.StringTuple;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Splits the line using a {@link Pattern} and outputs key as given by the groupingFields
1:  * 
1:  */
1: public class KeyBasedStringTupleMapper extends Mapper<LongWritable,Text,Text,StringTuple> {
1:   
1:   private static final Logger log = LoggerFactory.getLogger(KeyBasedStringTupleMapper.class);
1:   
1:   private Pattern splitter;
1:   
1:   private int[] selectedFields;
1:   
1:   private int[] groupingFields;
1:   
1:   @Override
1:   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
1:     String[] fields = splitter.split(value.toString());
1:     if (fields.length != 4) {
1:       log.info("{} {}", fields.length, value.toString());
1:       context.getCounter("Map", "ERROR").increment(1);
1:       return;
1:     }
0:     Collection<String> oKey = Lists.newArrayList();
1:     for (int groupingField : groupingFields) {
1:       oKey.add(fields[groupingField]);
1:       context.setStatus(fields[groupingField]);
1:     }
1:     
0:     List<String> oValue = Lists.newArrayList();
1:     for (int selectedField : selectedFields) {
1:       oValue.add(fields[selectedField]);
1:     }
1:     
1:     context.write(new Text(oKey.toString()), new StringTuple(oValue));
1:     
1:   }
1:   
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     super.setup(context);
1:     Parameters params = new Parameters(context.getConfiguration().get("job.parameters", ""));
1:     splitter = Pattern.compile(params.get("splitPattern", "[ \t]*\t[ \t]*"));
1:     
1:     int selectedFieldCount = Integer.valueOf(params.get("selectedFieldCount", "0"));
1:     selectedFields = new int[selectedFieldCount];
1:     for (int i = 0; i < selectedFieldCount; i++) {
1:       selectedFields[i] = Integer.valueOf(params.get("field" + i, "0"));
1:     }
1:     
1:     int groupingFieldCount = Integer.valueOf(params.get("groupingFieldCount", "0"));
1:     groupingFields = new int[groupingFieldCount];
1:     for (int i = 0; i < groupingFieldCount; i++) {
1:       groupingFields[i] = Integer.valueOf(params.get("gfield" + i, "0"));
1:     }
1:     
1:   }
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     Collection<String> oKey = Lists.newArrayList();
0:     List<String> oValue = Lists.newArrayList();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:c0f3d94
/////////////////////////////////////////////////////////////////////////
0:     Parameters params = new Parameters(context.getConfiguration().get("job.parameters", ""));
commit:024261a
commit:5a677d4
/////////////////////////////////////////////////////////////////////////
0:   @Override
/////////////////////////////////////////////////////////////////////////
0:   @Override
author:Robin Anil
-------------------------------------------------------------------------------
commit:297bef5
/////////////////////////////////////////////////////////////////////////
0:       log.info("{} {}", fields.length, value.toString());
commit:42ae840
/////////////////////////////////////////////////////////////////////////
0:  * Splits the line using a {@link Pattern} and outputs key as given by the groupingFields
0: public class KeyBasedStringTupleMapper extends Mapper<LongWritable,Text,Text,StringTuple> {
0:   private static final Logger log = LoggerFactory.getLogger(KeyBasedStringTupleMapper.class);
/////////////////////////////////////////////////////////////////////////
0:   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
0:       KeyBasedStringTupleMapper.log.info("{} {}", fields.length, value.toString());
0:     for (int groupingField : groupingFields) {
0:       oKey.add(fields[groupingField]);
0:       context.setStatus(fields[groupingField]);
0:     for (int selectedField : selectedFields) {
0:       oValue.add(fields[selectedField]);
/////////////////////////////////////////////////////////////////////////
0:   protected void setup(Context context) throws IOException, InterruptedException {
0:     Parameters params = Parameters.fromString(context.getConfiguration().get("job.parameters", ""));
0:     int selectedFieldCount = Integer.valueOf(params.get("selectedFieldCount", "0"));
0:     int groupingFieldCount = Integer.valueOf(params.get("groupingFieldCount", "0"));
commit:6980b95
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.fpm.pfpgrowth.dataset;
commit:1be812e
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Splits the line using a {@link Pattern} and outputs key as given by the
0:  * groupingFields
0:  * 
0:  */
0: public class KeyBasedStringTupleMapper extends
0:     Mapper<LongWritable,Text,Text,StringTuple> {
0:   
0:   private static final Logger log = LoggerFactory
0:       .getLogger(KeyBasedStringTupleMapper.class);
0:   
0:   private Pattern splitter;
0:   
0:   private int[] selectedFields;
0:   
0:   private int[] groupingFields;
0:   
0:   protected void map(LongWritable key,
0:                      Text value,
0:                      Context context) throws IOException,
0:                                      InterruptedException {
/////////////////////////////////////////////////////////////////////////
0:     for (int i = 0, groupingFieldCount = groupingFields.length;
0:         i < groupingFieldCount; i++) {
0:     
0:     for (int i = 0, selectedFieldCount = selectedFields.length;
0:         i < selectedFieldCount; i++) {
0:     
0:     
0:   
0:   protected void setup(Context context) throws IOException,
0:                                        InterruptedException {
0:     Parameters params = Parameters.fromString(
0:         context.getConfiguration().get("job.parameters", ""));
0:     
0:     int selectedFieldCount = Integer.valueOf(
0:         params.get("selectedFieldCount", "0"));
0:     
0:     int groupingFieldCount = Integer.valueOf(
0:         params.get("groupingFieldCount", "0"));
0:     
commit:b35b030
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.mahout.fpm.pfpgrowth.example.dataset;
0: 
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.regex.Pattern;
0: 
0: import org.apache.hadoop.io.LongWritable;
0: import org.apache.hadoop.io.Text;
0: import org.apache.hadoop.mapreduce.Mapper;
0: import org.apache.mahout.common.Parameters;
0: import org.apache.mahout.common.StringTuple;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: public class KeyBasedStringTupleMapper extends Mapper<LongWritable, Text, Text, StringTuple> {
0: 
0:   private static final Logger log = LoggerFactory.getLogger(KeyBasedStringTupleMapper.class);
0: 
0:   private Pattern splitter = null;
0: 
0:   private int[] selectedFields = null;
0: 
0:   private int[] groupingFields = null;
0: 
0:   protected void map(LongWritable key, Text value, Context context) throws IOException,
0:       InterruptedException {
0:     String[] fields = splitter.split(value.toString());
0:     if (fields.length != 4) {
0:       log.info("{} {}", fields.length, value.toString());
0:       context.getCounter("Map", "ERROR").increment(1);
0:       return;
0:     }
0:     List<String> oKey = new ArrayList<String>();
0:     for (int i = 0, groupingFieldCount = groupingFields.length; i < groupingFieldCount; i++) {
0:       oKey.add(fields[groupingFields[i]]);
0:       context.setStatus(fields[groupingFields[i]]);
0:     }
0: 
0:     List<String> oValue = new ArrayList<String>();
0:     for (int i = 0, selectedFieldCount = selectedFields.length; i < selectedFieldCount; i++) {
0:       oValue.add(fields[selectedFields[i]]);
0:     }
0: 
0:     context.write(new Text(oKey.toString()), new StringTuple(oValue));
0: 
0:   }
0: 
0:   protected void setup(Context context) throws IOException, InterruptedException {
0:     super.setup(context);
0:     Parameters params = Parameters.fromString(context.getConfiguration().get("job.parameters", ""));
0:     splitter = Pattern.compile(params.get("splitPattern", "[ \t]*\t[ \t]*"));
0: 
0:     int selectedFieldCount = Integer.valueOf(params.get("selectedFieldCount", "0"));
0:     selectedFields = new int[selectedFieldCount];
0:     for (int i = 0; i < selectedFieldCount; i++) {
0:       selectedFields[i] = Integer.valueOf(params.get("field" + i, "0"));
0:     }
0: 
0:     int groupingFieldCount = Integer.valueOf(params.get("groupingFieldCount", "0"));
0:     groupingFields = new int[groupingFieldCount];
0:     for (int i = 0; i < groupingFieldCount; i++) {
0:       groupingFields[i] = Integer.valueOf(params.get("gfield" + i, "0"));
0:     }
0: 
0:   }
0: }
============================================================================