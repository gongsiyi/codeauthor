1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:812d0ba: package org.apache.mahout.benchmark;
1:812d0ba: 
1:812d0ba: import java.io.IOException;
1:812d0ba: import java.util.Random;
1:812d0ba: 
1:812d0ba: import org.apache.mahout.common.RandomUtils;
1:812d0ba: import org.apache.mahout.common.TimingStatistics;
1:812d0ba: import org.apache.mahout.common.distance.DistanceMeasure;
1:812d0ba: import org.apache.mahout.math.SparseMatrix;
1:812d0ba: import org.apache.mahout.math.Vector;
1:812d0ba: 
1:812d0ba: public class ClosestCentroidBenchmark {
1:812d0ba:   private final VectorBenchmarks mark;
1:812d0ba: 
1:812d0ba:   public ClosestCentroidBenchmark(VectorBenchmarks mark) {
1:812d0ba:     this.mark = mark;
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   public void benchmark(DistanceMeasure measure) throws IOException {
1:812d0ba:     SparseMatrix clusterDistances = new SparseMatrix(mark.numClusters, mark.numClusters);
1:812d0ba:     for (int i = 0; i < mark.numClusters; i++) {
1:812d0ba:       for (int j = 0; j < mark.numClusters; j++) {
1:812d0ba:         double distance = Double.POSITIVE_INFINITY;
1:812d0ba:         if (i != j) {
1:812d0ba:           distance = measure.distance(mark.clusters[i], mark.clusters[j]);
1:812d0ba:         }
1:812d0ba:         clusterDistances.setQuick(i, j, distance);
1:812d0ba:       }
1:812d0ba:     }
1:812d0ba: 
1:812d0ba:     long distanceCalculations = 0;
1:812d0ba:     TimingStatistics stats = new TimingStatistics();
1:812d0ba:     for (int l = 0; l < mark.loop; l++) {
1:812d0ba:       TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
1:812d0ba:       for (int i = 0; i < mark.numVectors; i++) {
1:812d0ba:         Vector vector = mark.vectors[1][mark.vIndex(i)];
1:812d0ba:         double minDistance = Double.MAX_VALUE;
1:812d0ba:         for (int k = 0; k < mark.numClusters; k++) {
1:812d0ba:           double distance = measure.distance(vector, mark.clusters[k]);
1:812d0ba:           distanceCalculations++;
1:812d0ba:           if (distance < minDistance) {
1:812d0ba:             minDistance = distance;
1:812d0ba:           }
1:812d0ba:         }
1:812d0ba:       }
1:812d0ba:       if (call.end(mark.maxTimeUsec)) {
1:812d0ba:         break;
1:812d0ba:       }
1:812d0ba:     }
1:812d0ba:     mark.printStats(stats, measure.getClass().getName(), "Closest C w/o Elkan's trick", "distanceCalculations = "
1:812d0ba:         + distanceCalculations);
1:812d0ba: 
1:812d0ba:     distanceCalculations = 0;
1:812d0ba:     stats = new TimingStatistics();
1:812d0ba:     Random rand = RandomUtils.getRandom();
1:812d0ba:     for (int l = 0; l < mark.loop; l++) {
1:812d0ba:       TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
1:812d0ba:       for (int i = 0; i < mark.numVectors; i++) {
1:812d0ba:         Vector vector = mark.vectors[1][mark.vIndex(i)];
1:812d0ba:         int closestCentroid = rand.nextInt(mark.numClusters);
1:812d0ba:         double dist = measure.distance(vector, mark.clusters[closestCentroid]);
1:812d0ba:         distanceCalculations++;
1:812d0ba:         for (int k = 0; k < mark.numClusters; k++) {
1:812d0ba:           if (closestCentroid != k) {
1:812d0ba:             double centroidDist = clusterDistances.getQuick(k, closestCentroid);
1:812d0ba:             if (centroidDist < 2 * dist) {
1:812d0ba:               dist = measure.distance(vector, mark.clusters[k]);
1:812d0ba:               closestCentroid = k;
1:812d0ba:               distanceCalculations++;
1:812d0ba:             }
1:812d0ba:           }
1:812d0ba:         }
1:812d0ba:       }
1:812d0ba:       if (call.end(mark.maxTimeUsec)) {
1:812d0ba:         break;
1:812d0ba:       }
1:812d0ba:     }
1:812d0ba:     mark.printStats(stats, measure.getClass().getName(), "Closest C w/ Elkan's trick", "distanceCalculations = "
1:812d0ba:         + distanceCalculations);
1:812d0ba:   }
1:812d0ba: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
author:Robin Anil
-------------------------------------------------------------------------------
commit:812d0ba
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.benchmark;
1: 
1: import java.io.IOException;
1: import java.util.Random;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.common.TimingStatistics;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.SparseMatrix;
1: import org.apache.mahout.math.Vector;
1: 
1: public class ClosestCentroidBenchmark {
0:   public static final String SERIALIZE = "Serialize";
0:   public static final String DESERIALIZE = "Deserialize";
1:   private final VectorBenchmarks mark;
1: 
1:   public ClosestCentroidBenchmark(VectorBenchmarks mark) {
1:     this.mark = mark;
1:   }
1: 
1:   public void benchmark(DistanceMeasure measure) throws IOException {
1:     SparseMatrix clusterDistances = new SparseMatrix(mark.numClusters, mark.numClusters);
1:     for (int i = 0; i < mark.numClusters; i++) {
1:       for (int j = 0; j < mark.numClusters; j++) {
1:         double distance = Double.POSITIVE_INFINITY;
1:         if (i != j) {
1:           distance = measure.distance(mark.clusters[i], mark.clusters[j]);
1:         }
1:         clusterDistances.setQuick(i, j, distance);
1:       }
1:     }
1: 
1:     long distanceCalculations = 0;
1:     TimingStatistics stats = new TimingStatistics();
1:     for (int l = 0; l < mark.loop; l++) {
1:       TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
1:       for (int i = 0; i < mark.numVectors; i++) {
1:         Vector vector = mark.vectors[1][mark.vIndex(i)];
1:         double minDistance = Double.MAX_VALUE;
1:         for (int k = 0; k < mark.numClusters; k++) {
1:           double distance = measure.distance(vector, mark.clusters[k]);
1:           distanceCalculations++;
1:           if (distance < minDistance) {
1:             minDistance = distance;
1:           }
1:         }
1:       }
1:       if (call.end(mark.maxTimeUsec)) {
1:         break;
1:       }
1:     }
1:     mark.printStats(stats, measure.getClass().getName(), "Closest C w/o Elkan's trick", "distanceCalculations = "
1:         + distanceCalculations);
1: 
1:     distanceCalculations = 0;
1:     stats = new TimingStatistics();
1:     Random rand = RandomUtils.getRandom();
1:     for (int l = 0; l < mark.loop; l++) {
1:       TimingStatistics.Call call = stats.newCall(mark.leadTimeUsec);
1:       for (int i = 0; i < mark.numVectors; i++) {
1:         Vector vector = mark.vectors[1][mark.vIndex(i)];
1:         int closestCentroid = rand.nextInt(mark.numClusters);
1:         double dist = measure.distance(vector, mark.clusters[closestCentroid]);
1:         distanceCalculations++;
1:         for (int k = 0; k < mark.numClusters; k++) {
1:           if (closestCentroid != k) {
1:             double centroidDist = clusterDistances.getQuick(k, closestCentroid);
1:             if (centroidDist < 2 * dist) {
1:               dist = measure.distance(vector, mark.clusters[k]);
1:               closestCentroid = k;
1:               distanceCalculations++;
1:             }
1:           }
1:         }
1:       }
1:       if (call.end(mark.maxTimeUsec)) {
1:         break;
1:       }
1:     }
1:     mark.printStats(stats, measure.getClass().getName(), "Closest C w/ Elkan's trick", "distanceCalculations = "
1:         + distanceCalculations);
1:   }
1: }
============================================================================