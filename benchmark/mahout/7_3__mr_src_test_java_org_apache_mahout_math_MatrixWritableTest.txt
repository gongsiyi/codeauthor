1:94f64e6: /**
1:94f64e6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:94f64e6:  * contributor license agreements.  See the NOTICE file distributed with
1:94f64e6:  * this work for additional information regarding copyright ownership.
1:94f64e6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:94f64e6:  * (the "License"); you may not use this file except in compliance with
1:94f64e6:  * the License.  You may obtain a copy of the License at
1:94f64e6:  *
1:94f64e6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:94f64e6:  *
1:94f64e6:  * Unless required by applicable law or agreed to in writing, software
1:94f64e6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:94f64e6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:94f64e6:  * See the License for the specific language governing permissions and
1:94f64e6:  * limitations under the License.
1:94f64e6:  */
3:94f64e6: 
1:94f64e6: package org.apache.mahout.math;
1:94f64e6: 
1:94f64e6: import java.io.ByteArrayInputStream;
1:94f64e6: import java.io.ByteArrayOutputStream;
1:94f64e6: import java.io.DataInputStream;
1:94f64e6: import java.io.DataOutputStream;
1:94f64e6: import java.io.IOException;
1:94f64e6: import java.util.Map;
1:94f64e6: 
1:87d4b2e: import com.google.common.collect.Maps;
1:87d4b2e: import com.google.common.io.Closeables;
1:87d4b2e: import org.apache.hadoop.io.Writable;
1:87d4b2e: import org.junit.Test;
1:87d4b2e: 
1:94f64e6: public final class MatrixWritableTest extends MahoutTestCase {
1:94f64e6: 
1:0fe6a49:   @Test
1:0fe6a49:   public void testSparseMatrixWritable() throws Exception {
1:0fe6a49:     Matrix m = new SparseMatrix(5, 5);
1:0fe6a49:     m.set(1, 2, 3.0);
1:0fe6a49:     m.set(3, 4, 5.0);
1:0fe6a49:     Map<String, Integer> bindings = Maps.newHashMap();
1:0fe6a49:     bindings.put("A", 0);
1:0fe6a49:     bindings.put("B", 1);
1:0fe6a49:     bindings.put("C", 2);
1:0fe6a49:     bindings.put("D", 3);
1:0fe6a49:     bindings.put("default", 4);
1:ca18680:     m.setRowLabelBindings(bindings);
1:0fe6a49:     m.setColumnLabelBindings(bindings);
1:0fe6a49:     doTestMatrixWritableEquals(m);
1:0fe6a49:   }
1:94f64e6: 
1:0fe6a49:   @Test
1:0fe6a49:   public void testSparseRowMatrixWritable() throws Exception {
1:0fe6a49:     Matrix m = new SparseRowMatrix(5, 5);
1:0fe6a49:     m.set(1, 2, 3.0);
1:0fe6a49:     m.set(3, 4, 5.0);
1:0fe6a49:     Map<String, Integer> bindings = Maps.newHashMap();
1:0fe6a49:     bindings.put("A", 0);
1:0fe6a49:     bindings.put("B", 1);
1:0fe6a49:     bindings.put("C", 2);
1:0fe6a49:     bindings.put("D", 3);
1:0fe6a49:     bindings.put("default", 4);
1:0fe6a49:     m.setRowLabelBindings(bindings);
1:0fe6a49:     m.setColumnLabelBindings(bindings);
1:0fe6a49:     doTestMatrixWritableEquals(m);
1:0fe6a49:   }
1:0fe6a49: 
1:0fe6a49:   @Test
1:0fe6a49:   public void testDenseMatrixWritable() throws Exception {
1:0fe6a49:     Matrix m = new DenseMatrix(5,5);
1:0fe6a49:     m.set(1, 2, 3.0);
1:0fe6a49:     m.set(3, 4, 5.0);
1:0fe6a49:     Map<String, Integer> bindings = Maps.newHashMap();
1:0fe6a49:     bindings.put("A", 0);
1:0fe6a49:     bindings.put("B", 1);
1:0fe6a49:     bindings.put("C", 2);
1:0fe6a49:     bindings.put("D", 3);
1:0fe6a49:     bindings.put("default", 4);
1:0fe6a49:     m.setRowLabelBindings(bindings);
1:0fe6a49:     m.setColumnLabelBindings(bindings);
1:0fe6a49:     doTestMatrixWritableEquals(m);
1:0fe6a49:   }
1:0fe6a49: 
1:0fe6a49:   private static void doTestMatrixWritableEquals(Matrix m) throws IOException {
1:0fe6a49:     Writable matrixWritable = new MatrixWritable(m);
1:0fe6a49:     MatrixWritable matrixWritable2 = new MatrixWritable();
1:0fe6a49:     writeAndRead(matrixWritable, matrixWritable2);
1:0fe6a49:     Matrix m2 = matrixWritable2.get();
1:0fe6a49:     compareMatrices(m, m2); 
1:ca18680:     doCheckBindings(m2.getRowLabelBindings());
1:ca18680:     doCheckBindings(m2.getColumnLabelBindings());    
1:0fe6a49:   }
1:94f64e6: 
1:0fe6a49:   private static void compareMatrices(Matrix m, Matrix m2) {
1:0fe6a49:     assertEquals(m.numRows(), m2.numRows());
1:0fe6a49:     assertEquals(m.numCols(), m2.numCols());
1:0fe6a49:     for (int r = 0; r < m.numRows(); r++) {
1:0fe6a49:       for (int c = 0; c < m.numCols(); c++) {
1:0fe6a49:         assertEquals(m.get(r, c), m2.get(r, c), EPSILON);
1:0fe6a49:       }
1:0fe6a49:     }
1:0fe6a49:     Map<String,Integer> bindings = m.getRowLabelBindings();
1:0fe6a49:     Map<String, Integer> bindings2 = m2.getRowLabelBindings();
1:0fe6a49:     assertEquals(bindings == null, bindings2 == null);
1:0fe6a49:     if (bindings != null) {
1:0fe6a49:       assertEquals(bindings.size(), m.numRows());
1:0fe6a49:       assertEquals(bindings.size(), bindings2.size());
1:0fe6a49:       for (Map.Entry<String,Integer> entry : bindings.entrySet()) {
1:0fe6a49:         assertEquals(entry.getValue(), bindings2.get(entry.getKey()));
1:0fe6a49:       }
1:0fe6a49:     }
1:0fe6a49:     bindings = m.getColumnLabelBindings();
1:0fe6a49:     bindings2 = m2.getColumnLabelBindings();
1:0fe6a49:     assertEquals(bindings == null, bindings2 == null);
1:0fe6a49:     if (bindings != null) {
1:0fe6a49:       assertEquals(bindings.size(), bindings2.size());
1:0fe6a49:       for (Map.Entry<String,Integer> entry : bindings.entrySet()) {
1:0fe6a49:         assertEquals(entry.getValue(), bindings2.get(entry.getKey()));
1:0fe6a49:       }
1:0fe6a49:     }
1:0fe6a49:   }
1:94f64e6: 
1:ca18680:   private static void doCheckBindings(Map<String,Integer> labels) {
1:ca18680:     assertTrue("Missing label", labels.keySet().contains("A"));
1:ca18680:     assertTrue("Missing label", labels.keySet().contains("B"));
1:ca18680:     assertTrue("Missing label", labels.keySet().contains("C"));
1:ca18680:     assertTrue("Missing label", labels.keySet().contains("D"));
1:ca18680:     assertTrue("Missing label", labels.keySet().contains("default"));
1:ca18680:   }
1:ca18680: 
1:0fe6a49:   private static void writeAndRead(Writable toWrite, Writable toRead) throws IOException {
1:0fe6a49:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:0fe6a49:     DataOutputStream dos = new DataOutputStream(baos);
1:0fe6a49:     try {
1:0fe6a49:       toWrite.write(dos);
1:0fe6a49:     } finally {
1:0fe6a49:       Closeables.close(dos, false);
1:0fe6a49:     }
1:94f64e6: 
1:0fe6a49:     ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
1:0fe6a49:     DataInputStream dis = new DataInputStream(bais);
1:0fe6a49:     try {
1:0fe6a49:       toRead.readFields(dis);
1:0fe6a49:     } finally {
1:0fe6a49:       Closeables.close(dis, true);
1:0fe6a49:     }
1:0fe6a49:   }
1:94f64e6: 
1:94f64e6: 
14:94f64e6: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:0fe6a49
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testSparseMatrixWritable() throws Exception {
1:     Matrix m = new SparseMatrix(5, 5);
1:     m.set(1, 2, 3.0);
1:     m.set(3, 4, 5.0);
1:     Map<String, Integer> bindings = Maps.newHashMap();
1:     bindings.put("A", 0);
1:     bindings.put("B", 1);
1:     bindings.put("C", 2);
1:     bindings.put("D", 3);
1:     bindings.put("default", 4);
1:     m.setColumnLabelBindings(bindings);
1:     doTestMatrixWritableEquals(m);
1:   }
1:   @Test
1:   public void testSparseRowMatrixWritable() throws Exception {
1:     Matrix m = new SparseRowMatrix(5, 5);
1:     m.set(1, 2, 3.0);
1:     m.set(3, 4, 5.0);
1:     Map<String, Integer> bindings = Maps.newHashMap();
1:     bindings.put("A", 0);
1:     bindings.put("B", 1);
1:     bindings.put("C", 2);
1:     bindings.put("D", 3);
1:     bindings.put("default", 4);
1:     m.setRowLabelBindings(bindings);
1:     m.setColumnLabelBindings(bindings);
1:     doTestMatrixWritableEquals(m);
1:   }
1: 
1:   @Test
1:   public void testDenseMatrixWritable() throws Exception {
1:     Matrix m = new DenseMatrix(5,5);
1:     m.set(1, 2, 3.0);
1:     m.set(3, 4, 5.0);
1:     Map<String, Integer> bindings = Maps.newHashMap();
1:     bindings.put("A", 0);
1:     bindings.put("B", 1);
1:     bindings.put("C", 2);
1:     bindings.put("D", 3);
1:     bindings.put("default", 4);
1:     m.setRowLabelBindings(bindings);
1:     m.setColumnLabelBindings(bindings);
1:     doTestMatrixWritableEquals(m);
1:   }
1: 
1:   private static void doTestMatrixWritableEquals(Matrix m) throws IOException {
1:     Writable matrixWritable = new MatrixWritable(m);
1:     MatrixWritable matrixWritable2 = new MatrixWritable();
1:     writeAndRead(matrixWritable, matrixWritable2);
1:     Matrix m2 = matrixWritable2.get();
1:     compareMatrices(m, m2); 
1:   }
1:   private static void compareMatrices(Matrix m, Matrix m2) {
1:     assertEquals(m.numRows(), m2.numRows());
1:     assertEquals(m.numCols(), m2.numCols());
1:     for (int r = 0; r < m.numRows(); r++) {
1:       for (int c = 0; c < m.numCols(); c++) {
1:         assertEquals(m.get(r, c), m2.get(r, c), EPSILON);
1:       }
1:     }
1:     Map<String,Integer> bindings = m.getRowLabelBindings();
1:     Map<String, Integer> bindings2 = m2.getRowLabelBindings();
1:     assertEquals(bindings == null, bindings2 == null);
1:     if (bindings != null) {
1:       assertEquals(bindings.size(), m.numRows());
1:       assertEquals(bindings.size(), bindings2.size());
1:       for (Map.Entry<String,Integer> entry : bindings.entrySet()) {
1:         assertEquals(entry.getValue(), bindings2.get(entry.getKey()));
1:       }
1:     }
1:     bindings = m.getColumnLabelBindings();
1:     bindings2 = m2.getColumnLabelBindings();
1:     assertEquals(bindings == null, bindings2 == null);
1:     if (bindings != null) {
1:       assertEquals(bindings.size(), bindings2.size());
1:       for (Map.Entry<String,Integer> entry : bindings.entrySet()) {
1:         assertEquals(entry.getValue(), bindings2.get(entry.getKey()));
1:       }
1:     }
1:   }
/////////////////////////////////////////////////////////////////////////
1:   private static void writeAndRead(Writable toWrite, Writable toRead) throws IOException {
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     DataOutputStream dos = new DataOutputStream(baos);
1:     try {
1:       toWrite.write(dos);
1:     } finally {
1:       Closeables.close(dos, false);
1:     }
1:     ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
1:     DataInputStream dis = new DataInputStream(bais);
1:     try {
1:       toRead.readFields(dis);
1:     } finally {
1:       Closeables.close(dis, true);
1:     }
1:   }
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Maps;
1: import com.google.common.io.Closeables;
1: import org.apache.hadoop.io.Writable;
1: import org.junit.Test;
1: 
/////////////////////////////////////////////////////////////////////////
0: 			Closeables.close(dos, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0: 			Closeables.close(dos, true);
/////////////////////////////////////////////////////////////////////////
0: 			Closeables.close(dis, true);
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
0: 		for (int r = 0; r < m.numRows(); r++) {
0: 			for (int c = 0; c < m.numCols(); c++) {
/////////////////////////////////////////////////////////////////////////
0: 			for (Map.Entry<String,Integer> entry : bindings.entrySet()) {
/////////////////////////////////////////////////////////////////////////
0: 			for (Map.Entry<String,Integer> entry : bindings.entrySet()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:ca18680
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Maps;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		Map<String, Integer> bindings = Maps.newHashMap();
0:     m.setColumnLabelBindings(bindings);
/////////////////////////////////////////////////////////////////////////
0: 		Map<String, Integer> bindings = Maps.newHashMap();
1:     m.setRowLabelBindings(bindings);
/////////////////////////////////////////////////////////////////////////
0: 		compareMatrices(m, m2); 
1:     doCheckBindings(m2.getRowLabelBindings());
1:     doCheckBindings(m2.getColumnLabelBindings());    
/////////////////////////////////////////////////////////////////////////
1:   private static void doCheckBindings(Map<String,Integer> labels) {
1:     assertTrue("Missing label", labels.keySet().contains("A"));
1:     assertTrue("Missing label", labels.keySet().contains("B"));
1:     assertTrue("Missing label", labels.keySet().contains("C"));
1:     assertTrue("Missing label", labels.keySet().contains("D"));
1:     assertTrue("Missing label", labels.keySet().contains("default"));
1:   }
1: 
commit:94f64e6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
0: import com.google.common.io.Closeables;
0: import org.apache.hadoop.io.Writable;
0: import org.junit.Test;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
0: import java.util.HashMap;
1: import java.util.Map;
1: 
1: public final class MatrixWritableTest extends MahoutTestCase {
1: 
0: 	@Test
0: 	public void testSparseMatrixWritable() throws Exception {
0: 		Matrix m = new SparseMatrix(5, 5);
0: 		m.set(1, 2, 3.0);
0: 		m.set(3, 4, 5.0);
0: 		Map<String, Integer> bindings = new HashMap<String, Integer>();
0: 		bindings.put("A", 0);
0: 		bindings.put("B", 1);
0: 		bindings.put("C", 2);
0: 		bindings.put("D", 3);
0: 		bindings.put("default", 4);
0: 		m.setRowLabelBindings(bindings);
0: 		doTestMatrixWritableEquals(m);
1: 	}
1: 
0: 	@Test
0: 	public void testDenseMatrixWritable() throws Exception {
0: 		Matrix m = new DenseMatrix(5,5);
0: 		m.set(1, 2, 3.0);
0: 		m.set(3, 4, 5.0);
0: 		Map<String, Integer> bindings = new HashMap<String, Integer>();
0: 		bindings.put("A", 0);
0: 		bindings.put("B", 1);
0: 		bindings.put("C", 2);
0: 		bindings.put("D", 3);
0: 		bindings.put("default", 4);
0: 		m.setColumnLabelBindings(bindings);
0: 		doTestMatrixWritableEquals(m);
1: 	}
1: 
0: 	private static void doTestMatrixWritableEquals(Matrix m) throws IOException {
0: 		Writable matrixWritable = new MatrixWritable(m);
0: 		MatrixWritable matrixWritable2 = new MatrixWritable();
0: 		writeAndRead(matrixWritable, matrixWritable2);
0: 		Matrix m2 = matrixWritable2.get();
0: 		compareMatrices(m, m2);  // not sure this works?
1: 	}
1: 
0: 	private static void compareMatrices(Matrix m, Matrix m2) {
0: 		assertEquals(m.numRows(), m2.numRows());
0: 		assertEquals(m.numCols(), m2.numCols());
0: 		for(int r = 0; r < m.numRows(); r++) {
0: 			for(int c = 0; c < m.numCols(); c++) {
0: 				assertEquals(m.get(r, c), m2.get(r, c), EPSILON);
1: 			}
1: 		}
0: 		Map<String,Integer> bindings = m.getRowLabelBindings();
0: 		Map<String, Integer> bindings2 = m2.getRowLabelBindings();
0: 		assertEquals(bindings == null, bindings2 == null);
0: 		if (bindings != null) {
0: 			assertEquals(bindings.size(), m.numRows());
0: 			assertEquals(bindings.size(), bindings2.size());
0: 			for(Map.Entry<String,Integer> entry : bindings.entrySet()) {
0: 				assertEquals(entry.getValue(), bindings2.get(entry.getKey()));
1: 			}
1: 		}
0: 		bindings = m.getColumnLabelBindings();
0: 		bindings2 = m2.getColumnLabelBindings();
0: 		assertEquals(bindings == null, bindings2 == null);
0: 		if (bindings != null) {
0: 			assertEquals(bindings.size(), bindings2.size());
0: 			for(Map.Entry<String,Integer> entry : bindings.entrySet()) {
0: 				assertEquals(entry.getValue(), bindings2.get(entry.getKey()));
1: 			}
1: 		}
1: 	}
1: 
0: 	private static void writeAndRead(Writable toWrite, Writable toRead) throws IOException {
0: 		ByteArrayOutputStream baos = new ByteArrayOutputStream();
0: 		DataOutputStream dos = new DataOutputStream(baos);
0: 		try {
0: 			toWrite.write(dos);
0: 		} finally {
0: 			Closeables.closeQuietly(dos);
1: 		}
1: 
0: 		ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
0: 		DataInputStream dis = new DataInputStream(bais);
0: 		try {
0: 			toRead.readFields(dis);
0: 		} finally {
0: 			Closeables.closeQuietly(dis);
1: 		}
1: 	}
1: 
1: 
1: }
============================================================================