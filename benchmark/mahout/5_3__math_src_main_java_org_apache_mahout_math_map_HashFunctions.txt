1:7926fcb: /*
1:35fa73f: Copyright 1999 CERN - European Organization for Nuclear Research.
1:35fa73f: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1:35fa73f: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1:35fa73f: that both that copyright notice and this permission notice appear in supporting documentation. 
1:35fa73f: CERN makes no representations about the suitability of this software for any purpose. 
1:35fa73f: It is provided "as is" without expressed or implied warranty.
1:fcbc54a: */
1:35fa73f: package org.apache.mahout.math.map;
2:7926fcb: 
1:a851ddc: 
10:35fa73f: /**
1:35fa73f:  * Provides various hash functions.
1:7926fcb:  */
1:cfe7f01: public final class HashFunctions {
1:7926fcb: 
1:cfe7f01:   /**
1:cfe7f01:    * Utility class pattern: all static members, no inheritance.
1:cfe7f01:    */
1:7926fcb:   private HashFunctions() {
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Returns a hashcode for the specified value.
1:7926fcb:    *
1:7926fcb:    * @return a hash code value for the specified value.
1:7926fcb:    */
1:7926fcb:   public static int hash(char value) {
1:4ca6b86:     return value;
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Returns a hashcode for the specified value.
1:7926fcb:    *
1:7926fcb:    * @return a hash code value for the specified value.
1:7926fcb:    */
1:7926fcb:   public static int hash(double value) {
1:7926fcb:     long bits = Double.doubleToLongBits(value);
1:7926fcb:     return (int) (bits ^ (bits >>> 32));
1:7926fcb: 
1:7926fcb:     //return (int) Double.doubleToLongBits(value*663608941.737);
1:7926fcb:     // this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Returns a hashcode for the specified value.
1:7926fcb:    *
1:7926fcb:    * @return a hash code value for the specified value.
1:7926fcb:    */
1:7926fcb:   public static int hash(float value) {
1:7926fcb:     return Float.floatToIntBits(value * 663608941.737f);
1:7926fcb:     // this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Returns a hashcode for the specified value.
1:a851ddc:    * The hashcode computation is similar to the last step
1:a851ddc:    * of MurMurHash3.
1:7926fcb:    *
1:7926fcb:    * @return a hash code value for the specified value.
1:7926fcb:    */
1:7926fcb:   public static int hash(int value) {
1:a851ddc:     int h = value;
1:a851ddc:     h ^= h >>> 16;
1:a851ddc:     h *= 0x85ebca6b;
1:a851ddc:     h ^= h >>> 13;
1:a851ddc:     h *= 0xc2b2ae35;
1:a851ddc:     h ^= h >>> 16;
1:a851ddc:     return h;
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Returns a hashcode for the specified value.
1:7926fcb:    *
1:7926fcb:    * @return a hash code value for the specified value.
1:7926fcb:    */
1:7926fcb:   public static int hash(long value) {
1:7926fcb:     return (int) (value ^ (value >> 32));
1:7926fcb:     /*
1:7926fcb:     value &= 0x7FFFFFFFFFFFFFFFL; // make it >=0 (0x7FFFFFFFFFFFFFFFL==Long.MAX_VALUE)
2:7926fcb:     int hashCode = 0;
1:7926fcb:     do hashCode = 31*hashCode + (int) (value%10);
2:7926fcb:     while ((value /= 10) > 0);
1:7926fcb: 
2:7926fcb:     return 28629151*hashCode; // spread even further; h*31^5
1:7926fcb:     */
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Returns a hashcode for the specified object.
1:7926fcb:    *
1:7926fcb:    * @return a hash code value for the specified object.
1:7926fcb:    */
1:7926fcb:   public static int hash(Object object) {
1:7926fcb:     return object == null ? 0 : object.hashCode();
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Returns a hashcode for the specified value.
1:7926fcb:    *
1:7926fcb:    * @return a hash code value for the specified value.
1:7926fcb:    */
1:7926fcb:   public static int hash(short value) {
1:4ca6b86:     return value;
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Returns a hashcode for the specified value.
1:7926fcb:    *
1:7926fcb:    * @return a hash code value for the specified value.
1:7926fcb:    */
1:7926fcb:   public static int hash(boolean value) {
1:7926fcb:     return value ? 1231 : 1237;
1:7926fcb:   }
10:35fa73f: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:a851ddc
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:    * The hashcode computation is similar to the last step
1:    * of MurMurHash3.
1:     int h = value;
1:     h ^= h >>> 16;
1:     h *= 0x85ebca6b;
1:     h ^= h >>> 13;
1:     h *= 0xc2b2ae35;
1:     h ^= h >>> 16;
1:     return h;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:     return value;
/////////////////////////////////////////////////////////////////////////
1:     return value;
commit:cfe7f01
/////////////////////////////////////////////////////////////////////////
1: public final class HashFunctions {
1:   /**
1:    * Utility class pattern: all static members, no inheritance.
1:    */
commit:7926fcb
/////////////////////////////////////////////////////////////////////////
1: 
0: /** @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
0: public class HashFunctions {
0:   /** Makes this class non instantiable, but still let's others inherit from it. */
1:   private HashFunctions() {
1:   }
1:   /**
1:    * Returns a hashcode for the specified value.
1:    *
1:    * @return a hash code value for the specified value.
1:    */
1:   public static int hash(char value) {
0:     return (int) value;
1:   }
1: 
1:   /**
1:    * Returns a hashcode for the specified value.
1:    *
1:    * @return a hash code value for the specified value.
1:    */
1:   public static int hash(double value) {
1:     long bits = Double.doubleToLongBits(value);
1:     return (int) (bits ^ (bits >>> 32));
1: 
1:     //return (int) Double.doubleToLongBits(value*663608941.737);
1:     // this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)
1:   }
1: 
1:   /**
1:    * Returns a hashcode for the specified value.
1:    *
1:    * @return a hash code value for the specified value.
1:    */
1:   public static int hash(float value) {
1:     return Float.floatToIntBits(value * 663608941.737f);
1:     // this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)
1:   }
1: 
1:   /**
1:    * Returns a hashcode for the specified value.
1:    *
1:    * @return a hash code value for the specified value.
1:    */
1:   public static int hash(int value) {
0:     return value;
1: 
0:     //return value * 0x278DDE6D; // see org.apache.mahout.jet.random.engine.DRand
1: 
1:     /*
0:     value &= 0x7FFFFFFF; // make it >=0
1:     int hashCode = 0;
0:     do hashCode = 31*hashCode + value%10;
1:     while ((value /= 10) > 0);
1: 
1:     return 28629151*hashCode; // spread even further; h*31^5
1:     */
1:   }
1: 
1:   /**
1:    * Returns a hashcode for the specified value.
1:    *
1:    * @return a hash code value for the specified value.
1:    */
1:   public static int hash(long value) {
1:     return (int) (value ^ (value >> 32));
1:     /*
1:     value &= 0x7FFFFFFFFFFFFFFFL; // make it >=0 (0x7FFFFFFFFFFFFFFFL==Long.MAX_VALUE)
1:     int hashCode = 0;
1:     do hashCode = 31*hashCode + (int) (value%10);
1:     while ((value /= 10) > 0);
1: 
1:     return 28629151*hashCode; // spread even further; h*31^5
1:     */
1:   }
1: 
1:   /**
1:    * Returns a hashcode for the specified object.
1:    *
1:    * @return a hash code value for the specified object.
1:    */
1:   public static int hash(Object object) {
1:     return object == null ? 0 : object.hashCode();
1:   }
1: 
1:   /**
1:    * Returns a hashcode for the specified value.
1:    *
1:    * @return a hash code value for the specified value.
1:    */
1:   public static int hash(short value) {
0:     return (int) value;
1:   }
1: 
1:   /**
1:    * Returns a hashcode for the specified value.
1:    *
1:    * @return a hash code value for the specified value.
1:    */
1:   public static int hash(boolean value) {
1:     return value ? 1231 : 1237;
1:   }
commit:fcbc54a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   return (int)value;
/////////////////////////////////////////////////////////////////////////
0:   long bits = Double.doubleToLongBits(value);
0:   return (int)(bits ^ (bits >>> 32));
0:   
0:   //return (int) Double.doubleToLongBits(value*663608941.737);
0:   // this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)
/////////////////////////////////////////////////////////////////////////
0:   return Float.floatToIntBits(value*663608941.737f);
0:   // this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)
/////////////////////////////////////////////////////////////////////////
0:   return value;
0:   
0:   //return value * 0x278DDE6D; // see org.apache.mahout.jet.random.engine.DRand
0:   
0:   /*
0:   value &= 0x7FFFFFFF; // make it >=0
0:   int hashCode = 0;
0:   do hashCode = 31*hashCode + value%10;
0:   while ((value /= 10) > 0);
0:   return 28629151*hashCode; // spread even further; h*31^5
1:   */
/////////////////////////////////////////////////////////////////////////
0:   return (int)(value ^ (value >> 32));
0:   /* 
0:   value &= 0x7FFFFFFFFFFFFFFFL; // make it >=0 (0x7FFFFFFFFFFFFFFFL==Long.MAX_VALUE)
0:   int hashCode = 0;
0:   do hashCode = 31*hashCode + (int) (value%10);
0:   while ((value /= 10) > 0);
0:   return 28629151*hashCode; // spread even further; h*31^5
0:   */
/////////////////////////////////////////////////////////////////////////
0:   return object==null ? 0 : object.hashCode();
/////////////////////////////////////////////////////////////////////////
0:   return (int)value;
/////////////////////////////////////////////////////////////////////////
0:   return value ? 1231 : 1237;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:35fa73f
/////////////////////////////////////////////////////////////////////////
0: /*
1: Copyright 1999 CERN - European Organization for Nuclear Research.
1: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1: that both that copyright notice and this permission notice appear in supporting documentation. 
1: CERN makes no representations about the suitability of this software for any purpose. 
1: It is provided "as is" without expressed or implied warranty.
0: */
1: package org.apache.mahout.math.map;
0: 
1: /**
1:  * Provides various hash functions.
0:  *
0:  */
0: public final class HashFunctions {
0: 
1:   /**
0:    * Utility class pattern: all static members, no inheritance.
0:    */
0:   private HashFunctions() {
1:   }
0: 
1:   /**
0:    * Returns a hashcode for the specified value.
0:    *
0:    * @return a hash code value for the specified value.
0:    */
0:   public static int hash(char value) {
0:     return (int) value;
1:   }
0: 
1:   /**
0:    * Returns a hashcode for the specified value.
0:    *
0:    * @return a hash code value for the specified value.
0:    */
0:   public static int hash(double value) {
0:     long bits = Double.doubleToLongBits(value);
0:     return (int) (bits ^ (bits >>> 32));
0: 
0:     //return (int) Double.doubleToLongBits(value*663608941.737);
0:     // this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)
1:   }
0: 
1:   /**
0:    * Returns a hashcode for the specified value.
0:    *
0:    * @return a hash code value for the specified value.
0:    */
0:   public static int hash(float value) {
0:     return Float.floatToIntBits(value * 663608941.737f);
0:     // this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)
1:   }
0: 
1:   /**
0:    * Returns a hashcode for the specified value.
0:    *
0:    * @return a hash code value for the specified value.
0:    */
0:   public static int hash(int value) {
0:     return value;
0: 
0:     //return value * 0x278DDE6D; // see org.apache.mahout.math.jet.random.engine.DRand
0: 
0:     /*
0:     value &= 0x7FFFFFFF; // make it >=0
0:     int hashCode = 0;
0:     do hashCode = 31*hashCode + value%10;
0:     while ((value /= 10) > 0);
0: 
0:     return 28629151*hashCode; // spread even further; h*31^5
0:     */
1:   }
0: 
1:   /**
0:    * Returns a hashcode for the specified value.
0:    *
0:    * @return a hash code value for the specified value.
0:    */
0:   public static int hash(long value) {
0:     return (int) (value ^ (value >> 32));
0:     /*
0:     value &= 0x7FFFFFFFFFFFFFFFL; // make it >=0 (0x7FFFFFFFFFFFFFFFL==Long.MAX_VALUE)
0:     int hashCode = 0;
0:     do hashCode = 31*hashCode + (int) (value%10);
0:     while ((value /= 10) > 0);
0: 
0:     return 28629151*hashCode; // spread even further; h*31^5
0:     */
1:   }
0: 
1:   /**
0:    * Returns a hashcode for the specified object.
0:    *
0:    * @return a hash code value for the specified object.
0:    */
0:   public static int hash(Object object) {
0:     return object == null ? 0 : object.hashCode();
1:   }
0: 
1:   /**
0:    * Returns a hashcode for the specified value.
0:    *
0:    * @return a hash code value for the specified value.
0:    */
0:   public static int hash(short value) {
0:     return (int) value;
1:   }
0: 
1:   /**
0:    * Returns a hashcode for the specified value.
0:    *
0:    * @return a hash code value for the specified value.
0:    */
0:   public static int hash(boolean value) {
0:     return value ? 1231 : 1237;
1:   }
1: }
author:Benson Margulies
-------------------------------------------------------------------------------
commit:ebf9a4d
/////////////////////////////////////////////////////////////////////////
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:a435efb
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math.map;
/////////////////////////////////////////////////////////////////////////
0:     //return value * 0x278DDE6D; // see org.apache.mahout.math.jet.random.engine.DRand
commit:f49424e
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.matrix.map;
commit:7550a10
/////////////////////////////////////////////////////////////////////////
0: /*
0: Copyright 1999 CERN - European Organization for Nuclear Research.
0: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
0: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
0: that both that copyright notice and this permission notice appear in supporting documentation. 
0: CERN makes no representations about the suitability of this software for any purpose. 
0: It is provided "as is" without expressed or implied warranty.
0: */
0: package org.apache.mahout.colt.map;
0: 
0: /**
0:  * Provides various hash functions.
0:  *
0:  * @author wolfgang.hoschek@cern.ch
0:  * @version 1.0, 09/24/99
0:  */
0: /** 
0:  * @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported.
0:  */
0: @Deprecated
0: public class HashFunctions extends Object {
0: /**
0:  * Makes this class non instantiable, but still let's others inherit from it.
0:  */
0: protected HashFunctions() {}
0: /**
0:  * Returns a hashcode for the specified value.
0:  *
0:  * @return  a hash code value for the specified value. 
0:  */
0: public static int hash(char value) {
0: 	return (int)value;
0: }
0: /**
0:  * Returns a hashcode for the specified value.
0:  *
0:  * @return  a hash code value for the specified value. 
0:  */
0: public static int hash(double value) {
0: 	long bits = Double.doubleToLongBits(value);
0: 	return (int)(bits ^ (bits >>> 32));
0: 	
0: 	//return (int) Double.doubleToLongBits(value*663608941.737);
0: 	// this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)
0: }
0: /**
0:  * Returns a hashcode for the specified value.
0:  *
0:  * @return  a hash code value for the specified value. 
0:  */
0: public static int hash(float value) {
0: 	return Float.floatToIntBits(value*663608941.737f);
0: 	// this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)
0: }
0: /**
0:  * Returns a hashcode for the specified value.
0:  *
0:  * @return  a hash code value for the specified value. 
0:  */
0: public static int hash(int value) {
0: 	return value;
0: 	
0: 	//return value * 0x278DDE6D; // see org.apache.mahout.jet.random.engine.DRand
0: 	
0: 	/*
0: 	value &= 0x7FFFFFFF; // make it >=0
0: 	int hashCode = 0;
0: 	do hashCode = 31*hashCode + value%10;
0: 	while ((value /= 10) > 0);
0: 
0: 	return 28629151*hashCode; // spread even further; h*31^5
0: 	*/
0: }
0: /**
0:  * Returns a hashcode for the specified value. 
0:  *
0:  * @return  a hash code value for the specified value. 
0:  */
0: public static int hash(long value) {
0: 	return (int)(value ^ (value >> 32));
0: 	/* 
0: 	value &= 0x7FFFFFFFFFFFFFFFL; // make it >=0 (0x7FFFFFFFFFFFFFFFL==Long.MAX_VALUE)
0: 	int hashCode = 0;
0: 	do hashCode = 31*hashCode + (int) (value%10);
0: 	while ((value /= 10) > 0);
0: 
0: 	return 28629151*hashCode; // spread even further; h*31^5
0: 	*/
0: }
0: /**
0:  * Returns a hashcode for the specified object.
0:  *
0:  * @return  a hash code value for the specified object. 
0:  */
0: public static int hash(Object object) {
0: 	return object==null ? 0 : object.hashCode();
0: }
0: /**
0:  * Returns a hashcode for the specified value.
0:  *
0:  * @return  a hash code value for the specified value. 
0:  */
0: public static int hash(short value) {
0: 	return (int)value;
0: }
0: /**
0:  * Returns a hashcode for the specified value.
0:  *
0:  * @return  a hash code value for the specified value. 
0:  */
0: public static int hash(boolean value) {
0: 	return value ? 1231 : 1237;
0: }
0: }
============================================================================