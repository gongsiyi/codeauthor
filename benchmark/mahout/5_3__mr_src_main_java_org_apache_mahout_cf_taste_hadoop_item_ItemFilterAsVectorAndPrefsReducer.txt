1:5352ea2: /*
1:5352ea2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5352ea2:  * contributor license agreements.  See the NOTICE file distributed with
1:5352ea2:  * this work for additional information regarding copyright ownership.
1:5352ea2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5352ea2:  * (the "License"); you may not use this file except in compliance with
1:5352ea2:  * the License.  You may obtain a copy of the License at
1:5352ea2:  *
1:5352ea2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5352ea2:  *
1:5352ea2:  * Unless required by applicable law or agreed to in writing, software
1:5352ea2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5352ea2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5352ea2:  * See the License for the specific language governing permissions and
1:5352ea2:  * limitations under the License.
1:5352ea2:  */
1:5352ea2: 
1:5352ea2: package org.apache.mahout.cf.taste.hadoop.item;
1:5352ea2: 
1:85f9ece: import java.io.IOException;
1:85f9ece: import java.util.ArrayList;
1:85f9ece: import java.util.List;
1:85f9ece: 
1:5352ea2: import org.apache.hadoop.mapreduce.Reducer;
1:5352ea2: import org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils;
1:5352ea2: import org.apache.mahout.math.RandomAccessSparseVector;
1:5352ea2: import org.apache.mahout.math.VarIntWritable;
1:5352ea2: import org.apache.mahout.math.VarLongWritable;
1:5352ea2: import org.apache.mahout.math.Vector;
1:5352ea2: 
1:5352ea2: /**
1:5352ea2:  * we use a neat little trick to explicitly filter items for some users: we inject a NaN summand into the preference
1:5352ea2:  * estimation for those items, which makes {@link org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer}
1:5352ea2:  * automatically exclude them 
1:5352ea2:  */
1:5352ea2: public class ItemFilterAsVectorAndPrefsReducer
1:5352ea2:     extends Reducer<VarLongWritable,VarLongWritable,VarIntWritable,VectorAndPrefsWritable> {
1:9152a13: 
1:9152a13:   private final VarIntWritable itemIDIndexWritable = new VarIntWritable();
1:9152a13:   private final VectorAndPrefsWritable vectorAndPrefs = new VectorAndPrefsWritable();
1:9152a13: 
1:5352ea2:   @Override
1:5352ea2:   protected void reduce(VarLongWritable itemID, Iterable<VarLongWritable> values, Context ctx)
1:5352ea2:     throws IOException, InterruptedException {
1:5352ea2:     
1:5352ea2:     int itemIDIndex = TasteHadoopUtils.idToIndex(itemID.get());
1:5352ea2:     Vector vector = new RandomAccessSparseVector(Integer.MAX_VALUE, 1);
1:5352ea2:     /* artificial NaN summand to exclude this item from the recommendations for all users specified in userIDs */
1:5352ea2:     vector.set(itemIDIndex, Double.NaN);
1:5352ea2: 
1:85f9ece:     List<Long> userIDs = new ArrayList<>();
1:85f9ece:     List<Float> prefValues = new ArrayList<>();
1:5352ea2:     for (VarLongWritable userID : values) {
1:5352ea2:       userIDs.add(userID.get());
1:049e7dc:       prefValues.add(1.0f);
1:5352ea2:     }
1:5352ea2: 
1:9152a13:     itemIDIndexWritable.set(itemIDIndex);
1:9152a13:     vectorAndPrefs.set(vector, userIDs, prefValues);
1:9152a13:     ctx.write(itemIDIndexWritable, vectorAndPrefs);
1:5352ea2:   }
1:5352ea2: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     List<Long> userIDs = new ArrayList<>();
1:     List<Float> prefValues = new ArrayList<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:9152a13
/////////////////////////////////////////////////////////////////////////
1: 
1:   private final VarIntWritable itemIDIndexWritable = new VarIntWritable();
1:   private final VectorAndPrefsWritable vectorAndPrefs = new VectorAndPrefsWritable();
1: 
/////////////////////////////////////////////////////////////////////////
1:     itemIDIndexWritable.set(itemIDIndex);
1:     vectorAndPrefs.set(vector, userIDs, prefValues);
1:     ctx.write(itemIDIndexWritable, vectorAndPrefs);
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     List<Long> userIDs = Lists.newArrayList();
0:     List<Float> prefValues = Lists.newArrayList();
commit:5352ea2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.hadoop.item;
1: 
1: import org.apache.hadoop.mapreduce.Reducer;
1: import org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.VarIntWritable;
1: import org.apache.mahout.math.VarLongWritable;
1: import org.apache.mahout.math.Vector;
1: 
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.List;
1: 
1: /**
1:  * we use a neat little trick to explicitly filter items for some users: we inject a NaN summand into the preference
1:  * estimation for those items, which makes {@link org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer}
1:  * automatically exclude them 
1:  */
1: public class ItemFilterAsVectorAndPrefsReducer
1:     extends Reducer<VarLongWritable,VarLongWritable,VarIntWritable,VectorAndPrefsWritable> {
1:   @Override
1:   protected void reduce(VarLongWritable itemID, Iterable<VarLongWritable> values, Context ctx)
1:       throws IOException, InterruptedException {
1:     int itemIDIndex = TasteHadoopUtils.idToIndex(itemID.get());
1:     Vector vector = new RandomAccessSparseVector(Integer.MAX_VALUE, 1);
1:     /* artificial NaN summand to exclude this item from the recommendations for all users specified in userIDs */
1:     vector.set(itemIDIndex, Double.NaN);
1: 
0:     List<Long> userIDs = new ArrayList<Long>();
0:     List<Float> prefValues = new ArrayList<Float>();
1:     for (VarLongWritable userID : values) {
1:       userIDs.add(userID.get());
0:       prefValues.add(1f);
1:     }
1: 
0:     ctx.write(new VarIntWritable(itemIDIndex), new VectorAndPrefsWritable(vector, userIDs, prefValues));
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
0:     throws IOException, InterruptedException {
0:     
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1:       prefValues.add(1.0f);
============================================================================