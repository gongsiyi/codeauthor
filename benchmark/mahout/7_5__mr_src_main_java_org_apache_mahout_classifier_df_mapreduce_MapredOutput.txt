1:a8f9f88: /**
1:a8f9f88:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a8f9f88:  * contributor license agreements.  See the NOTICE file distributed with
1:a8f9f88:  * this work for additional information regarding copyright ownership.
1:a8f9f88:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a8f9f88:  * (the "License"); you may not use this file except in compliance with
1:a8f9f88:  * the License.  You may obtain a copy of the License at
1:a8f9f88:  *
1:a8f9f88:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a8f9f88:  *
1:a8f9f88:  * Unless required by applicable law or agreed to in writing, software
1:a8f9f88:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8f9f88:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8f9f88:  * See the License for the specific language governing permissions and
1:a8f9f88:  * limitations under the License.
1:a8f9f88:  */
17:a8f9f88: 
1:52ce412: package org.apache.mahout.classifier.df.mapreduce;
1:a8f9f88: 
1:d6aba1a: import org.apache.hadoop.io.Writable;
1:d6aba1a: import org.apache.mahout.classifier.df.DFUtils;
1:d6aba1a: import org.apache.mahout.classifier.df.node.Node;
1:d6aba1a: 
1:a8f9f88: import java.io.DataInput;
1:a8f9f88: import java.io.DataOutput;
1:a8f9f88: import java.io.IOException;
1:a8f9f88: import java.util.Arrays;
1:a8f9f88: 
1:a8f9f88: /**
1:a8f9f88:  * Used by various implementation to return the results of a build.<br>
1:a8f9f88:  * Contains a grown tree and and its oob predictions.
1:a8f9f88:  */
1:1ffa3a4: @Deprecated
1:b5bbe2e: public class MapredOutput implements Writable, Cloneable {
1:d6aba1a: 
1:8547de7:   private Node tree;
1:d6aba1a: 
1:8547de7:   private int[] predictions;
1:a8f9f88: 
1:d6aba1a:   public MapredOutput() {
1:d6aba1a:   }
1:a8f9f88: 
1:a8f9f88:   public MapredOutput(Node tree, int[] predictions) {
1:a8f9f88:     this.tree = tree;
1:a8f9f88:     this.predictions = predictions;
1:a8f9f88:   }
1:a8f9f88: 
1:a8f9f88:   public MapredOutput(Node tree) {
1:a8f9f88:     this(tree, null);
1:a8f9f88:   }
1:a8f9f88: 
1:d6aba1a:   public Node getTree() {
1:a8f9f88:     return tree;
1:a8f9f88:   }
1:d6aba1a: 
1:e9cc323:   int[] getPredictions() {
1:a8f9f88:     return predictions;
1:a8f9f88:   }
1:e9cc323: 
1:d6aba1a:   @Override
1:a8f9f88:   public void readFields(DataInput in) throws IOException {
1:a8f9f88:     boolean readTree = in.readBoolean();
1:a8f9f88:     if (readTree) {
1:a8f9f88:       tree = Node.read(in);
1:a8f9f88:     }
1:d6aba1a: 
1:a8f9f88:     boolean readPredictions = in.readBoolean();
1:a8f9f88:     if (readPredictions) {
1:a8f9f88:       predictions = DFUtils.readIntArray(in);
1:a8f9f88:     }
1:a8f9f88:   }
1:d6aba1a: 
1:e9cc323:   @Override
1:a8f9f88:   public void write(DataOutput out) throws IOException {
1:a8f9f88:     out.writeBoolean(tree != null);
1:a8f9f88:     if (tree != null) {
1:a8f9f88:       tree.write(out);
1:a8f9f88:     }
1:d6aba1a: 
1:a8f9f88:     out.writeBoolean(predictions != null);
1:a8f9f88:     if (predictions != null) {
1:a8f9f88:       DFUtils.writeArray(out, predictions);
1:a8f9f88:     }
1:a8f9f88:   }
1:d6aba1a: 
2:a8f9f88:   @Override
1:a8f9f88:   public MapredOutput clone() {
1:a8f9f88:     return new MapredOutput(tree, predictions);
1:a8f9f88:   }
1:d6aba1a: 
1:a8f9f88:   @Override
1:a8f9f88:   public boolean equals(Object obj) {
1:ad11134:     if (this == obj) {
1:a8f9f88:       return true;
1:a8f9f88:     }
1:4194a28:     if (!(obj instanceof MapredOutput)) {
2:a8f9f88:       return false;
1:a8f9f88:     }
1:d6aba1a: 
1:a8f9f88:     MapredOutput mo = (MapredOutput) obj;
1:a8f9f88: 
1:d6aba1a:     return ((tree == null && mo.getTree() == null) || (tree != null && tree.equals(mo.getTree())))
1:d6aba1a:         && Arrays.equals(predictions, mo.getPredictions());
1:a8f9f88:   }
1:d6aba1a: 
1:a8f9f88:   @Override
1:8547de7:   public int hashCode() {
1:8547de7:     int hashCode = tree == null ? 1 : tree.hashCode();
1:8547de7:     for (int prediction : predictions) {
1:8547de7:       hashCode = 31 * hashCode + prediction;
1:a8f9f88:     }
1:8547de7:     return hashCode;
2:8547de7:   }
1:d6aba1a: 
1:a8f9f88:   @Override
1:a8f9f88:   public String toString() {
1:8547de7:     return "{" + tree + " | " + Arrays.toString(predictions) + '}';
1:a8f9f88:   }
1:d6aba1a: 
1:a8f9f88: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:d6aba1a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.classifier.df.DFUtils;
1: import org.apache.mahout.classifier.df.node.Node;
1: 
1: 
1: 
1:   public MapredOutput() {
1:   }
/////////////////////////////////////////////////////////////////////////
1:   public Node getTree() {
1: 
1:   @Override
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     return ((tree == null && mo.getTree() == null) || (tree != null && tree.equals(mo.getTree())))
1:         && Arrays.equals(predictions, mo.getPredictions());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
0:     public Node getTree() {
1:   int[] getPredictions() {
1: 
1:     @Override
commit:a8f9f88
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.mapreduce;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.Arrays;
1: 
0: import org.apache.hadoop.io.Writable;
0: import org.apache.mahout.df.DFUtils;
0: import org.apache.mahout.df.node.Node;
1: 
1: /**
1:  * Used by various implementation to return the results of a build.<br>
1:  * Contains a grown tree and and its oob predictions.
1:  */
0: public class MapredOutput implements Writable {
1: 
0:   protected Node tree;
1: 
0:   protected int[] predictions;
1: 
0:   public Node getTree() {
1:     return tree;
1:   }
1: 
0:   public int[] getPredictions() {
1:     return predictions;
1:   }
1: 
0:   public MapredOutput() {
1:   }
1: 
1:   public MapredOutput(Node tree, int[] predictions) {
1:     this.tree = tree;
1:     this.predictions = predictions;
1:   }
1: 
1:   public MapredOutput(Node tree) {
1:     this(tree, null);
1:   }
1: 
0:   public MapredOutput(int[] predictions) {
0:     this(null, predictions);
1:   }
1: 
0:   public static MapredOutput read(DataInput in) throws IOException {
0:     MapredOutput rfOutput = new MapredOutput();
0:     rfOutput.readFields(in);
0:     return rfOutput;
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     boolean readTree = in.readBoolean();
1:     if (readTree) {
1:       tree = Node.read(in);
1:     }
1: 
1:     boolean readPredictions = in.readBoolean();
1:     if (readPredictions) {
1:       predictions = DFUtils.readIntArray(in);
1:     }
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeBoolean(tree != null);
1:     if (tree != null) {
1:       tree.write(out);
1:     }
1: 
1:     out.writeBoolean(predictions != null);
1:     if (predictions != null) {
1:       DFUtils.writeArray(out, predictions);
1:     }
1:   }
1: 
1:   @Override
1:   public MapredOutput clone() {
1:     return new MapredOutput(tree, predictions);
1:   }
1: 
1:   @Override
1:   public boolean equals(Object obj) {
0:     if (this == obj)
1:       return true;
0:     if (obj == null || !(obj instanceof MapredOutput))
1:       return false;
1: 
1:     MapredOutput mo = (MapredOutput) obj;
1: 
0:     if (tree != null && tree.equals(mo.tree) == false)
1:       return false;
1: 
0:     return Arrays.equals(predictions, mo.predictions);
1:   }
1: 
1:   @Override
1:   public String toString() {
0:     return "{" + tree + " | " + Arrays.toString(predictions) + "}";
1:   }
1: 
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.mapreduce;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.classifier.df.DFUtils;
0: import org.apache.mahout.classifier.df.node.Node;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:     if (!(obj instanceof MapredOutput)) {
commit:39fe224
/////////////////////////////////////////////////////////////////////////
0:     if (obj == null || !(obj instanceof MapredOutput)) {
0:     return ((tree == null && mo.getTree() == null)|| (tree != null && tree.equals(mo.getTree())))
commit:f824f90
commit:4ef4dc7
commit:74ab309
commit:fc74924
/////////////////////////////////////////////////////////////////////////
0:     if (tree != null && tree.equals(mo.getTree()) == false)
0:     return Arrays.equals(predictions, mo.getPredictions());
commit:b5bbe2e
/////////////////////////////////////////////////////////////////////////
1: public class MapredOutput implements Writable, Cloneable {
commit:8547de7
/////////////////////////////////////////////////////////////////////////
1:   private Node tree;
1:   private int[] predictions;
/////////////////////////////////////////////////////////////////////////
1:   public int hashCode() {
1:     int hashCode = tree == null ? 1 : tree.hashCode();
1:     for (int prediction : predictions) {
1:       hashCode = 31 * hashCode + prediction;
1:     }
1:     return hashCode;
1:   }
0: 
0:   @Override
1:     return "{" + tree + " | " + Arrays.toString(predictions) + '}';
author:Robin Anil
-------------------------------------------------------------------------------
commit:ad11134
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
0:   
0:   
0:   public MapredOutput() { }
0:   
0:   
0:   
0:   
0:   
0:     
0:   
0:     
0:   
0:   
1:     if (this == obj) {
0:     }
0:     if ((obj == null) || !(obj instanceof MapredOutput)) {
0:     }
0:     
0:     
0:     if ((tree != null) && (tree.equals(mo.getTree()) == false)) {
0:     }
0:     
0:   
/////////////////////////////////////////////////////////////////////////
0:   
0:   
============================================================================