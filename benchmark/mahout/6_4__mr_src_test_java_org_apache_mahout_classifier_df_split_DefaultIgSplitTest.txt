1:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c37a84:  * contributor license agreements.  See the NOTICE file distributed with
1:8c37a84:  * this work for additional information regarding copyright ownership.
1:8c37a84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c37a84:  * (the "License"); you may not use this file except in compliance with
1:8c37a84:  * the License.  You may obtain a copy of the License at
1:8c37a84:  *
1:8c37a84:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:8c37a84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c37a84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c37a84:  * See the License for the specific language governing permissions and
1:8c37a84:  * limitations under the License.
1:8c37a84:  */
5:8c37a84: 
1:52ce412: package org.apache.mahout.classifier.df.split;
1:df73dbc: 
1:8c37a84: import java.util.Random;
1:8c37a84: 
1:434cdff: import org.apache.mahout.common.MahoutTestCase;
1:8547de7: import org.apache.mahout.common.RandomUtils;
1:52ce412: import org.apache.mahout.classifier.df.data.Data;
1:52ce412: import org.apache.mahout.classifier.df.data.DataLoader;
1:52ce412: import org.apache.mahout.classifier.df.data.Dataset;
1:52ce412: import org.apache.mahout.classifier.df.data.Utils;
1:ff79ff4: import org.junit.Test;
1:1ffa3a4: @Deprecated
1:ff79ff4: public final class DefaultIgSplitTest extends MahoutTestCase {
1:8c37a84: 
1:515bac4:   private static final int NUM_ATTRIBUTES = 10;
1:8c37a84: 
1:ff79ff4:   @Test
1:8c37a84:   public void testEntropy() throws Exception {
1:8547de7:     Random rng = RandomUtils.getRandom();
1:515bac4:     String descriptor = Utils.randomDescriptor(rng, NUM_ATTRIBUTES);
1:8c37a84:     int label = Utils.findLabel(descriptor);
1:8c37a84: 
1:8c37a84:     // all the vectors have the same label (0)
1:e107bfa:     double[][] temp = Utils.randomDoublesWithSameLabel(rng, descriptor, false, 100, 0);
1:8547de7:     String[] sData = Utils.double2String(temp);
1:e107bfa:     Dataset dataset = DataLoader.generateDataset(descriptor, false, sData);
1:8547de7:     Data data = DataLoader.loadData(dataset, sData);
1:8547de7:     DefaultIgSplit iG = new DefaultIgSplit();
1:8c37a84: 
1:8c37a84:     double expected = 0.0 - 1.0 * Math.log(1.0) / Math.log(2.0);
1:ff79ff4:     assertEquals(expected, iG.entropy(data), EPSILON);
1:8c37a84: 
1:8c37a84:     // 50/100 of the vectors have the label (1)
1:8c37a84:     // 50/100 of the vectors have the label (0)
1:8c37a84:     for (int index = 0; index < 50; index++) {
1:8c37a84:       temp[index][label] = 1.0;
1:df73dbc:     }
1:8547de7:     sData = Utils.double2String(temp);
1:e107bfa:     dataset = DataLoader.generateDataset(descriptor, false, sData);
2:8c37a84:     data = DataLoader.loadData(dataset, sData);
2:8c37a84:     iG = new DefaultIgSplit();
1:8c37a84:     
1:8c37a84:     expected = 2.0 * -0.5 * Math.log(0.5) / Math.log(2.0);
1:ff79ff4:     assertEquals(expected, iG.entropy(data), EPSILON);
1:8c37a84: 
1:8c37a84:     // 15/100 of the vectors have the label (2)
1:8c37a84:     // 35/100 of the vectors have the label (1)
1:8c37a84:     // 50/100 of the vectors have the label (0)
1:8c37a84:     for (int index = 0; index < 15; index++) {
1:8c37a84:       temp[index][label] = 2.0;
2:8c37a84:     }
1:8547de7:     sData = Utils.double2String(temp);
1:e107bfa:     dataset = DataLoader.generateDataset(descriptor, false, sData);
1:8c37a84:     data = DataLoader.loadData(dataset, sData);
1:8c37a84:     iG = new DefaultIgSplit();
1:8c37a84:     
1:8c37a84:     expected = -0.15 * Math.log(0.15) / Math.log(2.0) - 0.35 * Math.log(0.35)
1:8c37a84:         / Math.log(2.0) - 0.5 * Math.log(0.5) / Math.log(2.0);
1:ff79ff4:     assertEquals(expected, iG.entropy(data), EPSILON);
1:8c37a84:   }
1:8c37a84: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.split;
1: import org.apache.mahout.classifier.df.data.Data;
1: import org.apache.mahout.classifier.df.data.DataLoader;
1: import org.apache.mahout.classifier.df.data.Dataset;
1: import org.apache.mahout.classifier.df.data.Utils;
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:e107bfa
/////////////////////////////////////////////////////////////////////////
1:     double[][] temp = Utils.randomDoublesWithSameLabel(rng, descriptor, false, 100, 0);
1:     Dataset dataset = DataLoader.generateDataset(descriptor, false, sData);
/////////////////////////////////////////////////////////////////////////
1:     dataset = DataLoader.generateDataset(descriptor, false, sData);
/////////////////////////////////////////////////////////////////////////
1:     dataset = DataLoader.generateDataset(descriptor, false, sData);
commit:df73dbc
/////////////////////////////////////////////////////////////////////////
0:   @Override
0:   protected void setUp() throws Exception {
0:     super.setUp();
0:     RandomUtils.useTestSeed();
1:   }
1:    
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.split;
1: 
0: import static org.apache.mahout.df.data.Utils.double2String;
0: import static org.apache.mahout.df.data.Utils.randomDescriptor;
0: import static org.apache.mahout.df.data.Utils.randomDoublesWithSameLabel;
1: 
1: import java.util.Random;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.apache.mahout.df.data.Data;
0: import org.apache.mahout.df.data.DataLoader;
0: import org.apache.mahout.df.data.Dataset;
0: import org.apache.mahout.df.data.Utils;
0: import org.apache.mahout.df.split.DefaultIgSplit;
1: 
0: public class DefaultIgSplitTest extends TestCase {
1: 
0:   protected final int nbAttributes = 10;
1: 
1:   public void testEntropy() throws Exception {
0:     Random rng = new Random();
0:     String descriptor = randomDescriptor(rng, nbAttributes);
1:     int label = Utils.findLabel(descriptor);
0:     double[][] temp;
0:     String[] sData;
0:     Data data;
0:     Dataset dataset;
0:     DefaultIgSplit iG;
1:     
1:     // all the vectors have the same label (0)
0:     temp = randomDoublesWithSameLabel(rng, descriptor, 100, 0);
0:     sData = double2String(temp);
0:     dataset = DataLoader.generateDataset(descriptor, sData);
1:     data = DataLoader.loadData(dataset, sData);
1:     iG = new DefaultIgSplit();
1:     
1:     double expected = 0.0 - 1.0 * Math.log(1.0) / Math.log(2.0);
0:     assertEquals(expected, iG.entropy(data));
1: 
1:     // 50/100 of the vectors have the label (1)
1:     // 50/100 of the vectors have the label (0)
1:     for (int index = 0; index < 50; index++) {
1:       temp[index][label] = 1.0;
1:     }
0:     sData = double2String(temp);
0:     dataset = DataLoader.generateDataset(descriptor, sData);
1:     data = DataLoader.loadData(dataset, sData);
1:     iG = new DefaultIgSplit();
1:     
1:     expected = 2.0 * -0.5 * Math.log(0.5) / Math.log(2.0);
0:     assertEquals(expected, iG.entropy(data));
1: 
1:     // 15/100 of the vectors have the label (2)
1:     // 35/100 of the vectors have the label (1)
1:     // 50/100 of the vectors have the label (0)
1:     for (int index = 0; index < 15; index++) {
1:       temp[index][label] = 2.0;
1:     }
0:     sData = double2String(temp);
0:     dataset = DataLoader.generateDataset(descriptor, sData);
1:     data = DataLoader.loadData(dataset, sData);
1:     iG = new DefaultIgSplit();
1:     
1:     expected = -0.15 * Math.log(0.15) / Math.log(2.0) - 0.35 * Math.log(0.35)
1:         / Math.log(2.0) - 0.5 * Math.log(0.5) / Math.log(2.0);
0:     assertEquals(expected, iG.entropy(data));
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public final class DefaultIgSplitTest extends MahoutTestCase {
0: 
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(expected, iG.entropy(data), EPSILON);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(expected, iG.entropy(data), EPSILON);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(expected, iG.entropy(data), EPSILON);
commit:515bac4
/////////////////////////////////////////////////////////////////////////
1:   private static final int NUM_ATTRIBUTES = 10;
1:     String descriptor = Utils.randomDescriptor(rng, NUM_ATTRIBUTES);
commit:d911fce
/////////////////////////////////////////////////////////////////////////
0:   private static final int nbAttributes = 10;
commit:434cdff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
0: public class DefaultIgSplitTest extends MahoutTestCase {
commit:8547de7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
0:   protected static final int nbAttributes = 10;
1:     Random rng = RandomUtils.getRandom();
0:     String descriptor = Utils.randomDescriptor(rng, nbAttributes);
0: 
0:     double[][] temp = Utils.randomDoublesWithSameLabel(rng, descriptor, 100, 0);
1:     String[] sData = Utils.double2String(temp);
0:     Dataset dataset = DataLoader.generateDataset(descriptor, sData);
1:     Data data = DataLoader.loadData(dataset, sData);
1:     DefaultIgSplit iG = new DefaultIgSplit();
0: 
/////////////////////////////////////////////////////////////////////////
1:     sData = Utils.double2String(temp);
/////////////////////////////////////////////////////////////////////////
1:     sData = Utils.double2String(temp);
============================================================================