1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
3:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:802464d: import java.util.List;
1:802464d: import java.util.Map;
1:802464d: import java.util.Random;
1:802464d: 
1:a07bfc3: import com.google.common.collect.HashMultiset;
1:a07bfc3: import com.google.common.collect.ImmutableMap;
1:a07bfc3: import com.google.common.collect.Lists;
1:a07bfc3: import com.google.common.collect.Multiset;
1:a07bfc3: import org.apache.mahout.common.RandomUtils;
1:8b6a26a: import org.apache.mahout.math.MahoutTestCase;
1:a07bfc3: import org.junit.Before;
1:a07bfc3: import org.junit.Test;
1:a07bfc3: 
1:8b6a26a: public class MultinomialTest extends MahoutTestCase {
1:8b6a26a:     @Override
1:a07bfc3:     @Before
1:a07bfc3:     public void setUp() {
1:a07bfc3:         RandomUtils.useTestSeed();
1:a07bfc3:     }
1:a07bfc3: 
1:a07bfc3:     @Test(expected = IllegalArgumentException.class)
1:a07bfc3:     public void testNoValues() {
1:a07bfc3:         Multiset<String> emptySet = HashMultiset.create();
1:02ff22f:         new Multinomial<>(emptySet);
1:a07bfc3:     }
1:a07bfc3: 
1:a07bfc3:     @Test
1:a07bfc3:     public void testSingleton() {
1:a07bfc3:         Multiset<String> oneThing = HashMultiset.create();
1:a07bfc3:         oneThing.add("one");
1:02ff22f:         Multinomial<String> s = new Multinomial<>(oneThing);
1:a07bfc3:         assertEquals("one", s.sample(0));
1:a07bfc3:         assertEquals("one", s.sample(0.1));
1:a07bfc3:         assertEquals("one", s.sample(1));
1:a07bfc3:     }
1:a07bfc3: 
1:a07bfc3:     @Test
1:a07bfc3:     public void testEvenSplit() {
1:a07bfc3:         Multiset<String> stuff = HashMultiset.create();
1:a07bfc3:         for (int i = 0; i < 5; i++) {
1:8b6a26a:             stuff.add(String.valueOf(i));
1:a07bfc3:         }
1:02ff22f:         Multinomial<String> s = new Multinomial<>(stuff);
1:8b6a26a:         double EPSILON = 1.0e-15;
1:a07bfc3: 
1:a07bfc3:         Multiset<String> cnt = HashMultiset.create();
1:a07bfc3:         for (int i = 0; i < 5; i++) {
1:a07bfc3:             cnt.add(s.sample(i * 0.2));
1:a07bfc3:             cnt.add(s.sample(i * 0.2 + EPSILON));
1:a07bfc3:             cnt.add(s.sample((i + 1) * 0.2 - EPSILON));
1:a07bfc3:         }
1:a07bfc3: 
1:a07bfc3:         assertEquals(5, cnt.elementSet().size());
1:a07bfc3:         for (String v : cnt.elementSet()) {
1:a07bfc3:             assertEquals(3, cnt.count(v), 1.01);
1:a07bfc3:         }
1:a07bfc3:         assertTrue(cnt.contains(s.sample(1)));
1:a07bfc3:         assertEquals(s.sample(1 - EPSILON), s.sample(1));
1:a07bfc3:     }
1:a07bfc3: 
1:a07bfc3:     @Test
1:a07bfc3:     public void testPrime() {
1:a07bfc3:         List<String> data = Lists.newArrayList();
1:a07bfc3:         for (int i = 0; i < 17; i++) {
1:a07bfc3:             String s = "0";
1:a07bfc3:             if ((i & 1) != 0) {
1:a07bfc3:                 s = "1";
1:a07bfc3:             }
1:a07bfc3:             if ((i & 2) != 0) {
1:a07bfc3:                 s = "2";
1:a07bfc3:             }
1:a07bfc3:             if ((i & 4) != 0) {
1:a07bfc3:                 s = "3";
1:a07bfc3:             }
1:a07bfc3:             if ((i & 8) != 0) {
1:a07bfc3:                 s = "4";
1:a07bfc3:             }
1:a07bfc3:             data.add(s);
1:a07bfc3:         }
1:a07bfc3: 
1:a07bfc3:         Multiset<String> stuff = HashMultiset.create();
1:a07bfc3: 
1:a07bfc3:         for (String x : data) {
1:a07bfc3:             stuff.add(x);
1:a07bfc3:         }
1:a07bfc3: 
1:02ff22f:         Multinomial<String> s0 = new Multinomial<>(stuff);
1:02ff22f:         Multinomial<String> s1 = new Multinomial<>(stuff);
1:02ff22f:         Multinomial<String> s2 = new Multinomial<>(stuff);
1:8b6a26a:         double EPSILON = 1.0e-15;
1:a07bfc3: 
1:a07bfc3:         Multiset<String> cnt = HashMultiset.create();
1:a07bfc3:         for (int i = 0; i < 50; i++) {
1:8b6a26a:             double p0 = i * 0.02;
1:8b6a26a:             double p1 = (i + 1) * 0.02;
1:a07bfc3:             cnt.add(s0.sample(p0));
1:a07bfc3:             cnt.add(s0.sample(p0 + EPSILON));
1:a07bfc3:             cnt.add(s0.sample(p1 - EPSILON));
1:a07bfc3: 
1:a07bfc3:             assertEquals(s0.sample(p0), s1.sample(p0));
1:a07bfc3:             assertEquals(s0.sample(p0 + EPSILON), s1.sample(p0 + EPSILON));
1:a07bfc3:             assertEquals(s0.sample(p1 - EPSILON), s1.sample(p1 - EPSILON));
1:a07bfc3: 
1:a07bfc3:             assertEquals(s0.sample(p0), s2.sample(p0));
1:a07bfc3:             assertEquals(s0.sample(p0 + EPSILON), s2.sample(p0 + EPSILON));
1:a07bfc3:             assertEquals(s0.sample(p1 - EPSILON), s2.sample(p1 - EPSILON));
1:a07bfc3:         }
1:a07bfc3: 
1:a07bfc3:         assertEquals(s0.sample(0), s1.sample(0));
1:a07bfc3:         assertEquals(s0.sample(0 + EPSILON), s1.sample(0 + EPSILON));
1:a07bfc3:         assertEquals(s0.sample(1 - EPSILON), s1.sample(1 - EPSILON));
1:a07bfc3:         assertEquals(s0.sample(1), s1.sample(1));
1:a07bfc3: 
1:a07bfc3:         assertEquals(s0.sample(0), s2.sample(0));
1:a07bfc3:         assertEquals(s0.sample(0 + EPSILON), s2.sample(0 + EPSILON));
1:a07bfc3:         assertEquals(s0.sample(1 - EPSILON), s2.sample(1 - EPSILON));
1:a07bfc3:         assertEquals(s0.sample(1), s2.sample(1));
1:a07bfc3: 
1:a07bfc3:         assertEquals(5, cnt.elementSet().size());
1:a07bfc3:         // regression test, really.  These values depend on the original seed and exact algorithm.
1:a07bfc3:         // the actual values should be within about 2 of these, however, almost regardless of seed
1:a07bfc3:         Map<String, Integer> ref = ImmutableMap.of("3", 35, "2", 18, "1", 9, "0", 16, "4", 72);
1:a07bfc3:         for (String v : cnt.elementSet()) {
1:91f15ec:             assertTrue(Math.abs(ref.get(v) - cnt.count(v)) <= 2);
1:a07bfc3:         }
1:a07bfc3: 
1:a07bfc3:         assertTrue(cnt.contains(s0.sample(1)));
1:a07bfc3:         assertEquals(s0.sample(1 - EPSILON), s0.sample(1));
1:a07bfc3:     }
1:a07bfc3: 
1:a07bfc3:     @Test
1:a07bfc3:     public void testInsert() {
1:8b6a26a:         Random rand = RandomUtils.getRandom();
1:02ff22f:         Multinomial<Integer> table = new Multinomial<>();
1:a07bfc3: 
1:a07bfc3:         double[] p = new double[10];
2:a07bfc3:         for (int i = 0; i < 10; i++) {
1:a07bfc3:             p[i] = rand.nextDouble();
1:a07bfc3:             table.add(i, p[i]);
1:a07bfc3:         }
1:a07bfc3: 
1:a07bfc3:         checkSelfConsistent(table);
1:a07bfc3: 
1:a07bfc3:         for (int i = 0; i < 10; i++) {
1:8b6a26a:             assertEquals(p[i], table.getWeight(i), 0);
1:a07bfc3:         }
1:a07bfc3:     }
1:a07bfc3: 
1:a07bfc3:     @Test
1:802464d:   public void testSetZeroWhileIterating() {
1:02ff22f:     Multinomial<Integer> table = new Multinomial<>();
1:802464d:     for (int i = 0; i < 10000; ++i) {
1:802464d:       table.add(i, i);
1:802464d:     }
1:802464d:     // Setting a sample's weight to 0 removes from the items map.
1:802464d:     // If that map is used when iterating (it used to be), it will
1:802464d:     // trigger a ConcurrentModificationException.
1:802464d:     for (Integer sample : table) {
1:802464d:       table.set(sample, 0);
1:802464d:     }
1:802464d:   }
1:802464d: 
1:802464d:   @Test(expected=NullPointerException.class)
1:802464d:   public void testNoNullValuesAllowed() {
1:02ff22f:     Multinomial<Integer> table = new Multinomial<>();
1:802464d:     // No null values should be allowed.
1:802464d:     table.add(null, 1);
1:802464d:   }
1:802464d: 
1:802464d:   @Test
1:a07bfc3:     public void testDeleteAndUpdate() {
1:8b6a26a:         Random rand = RandomUtils.getRandom();
1:02ff22f:         Multinomial<Integer> table = new Multinomial<>();
1:8b6a26a:         assertEquals(0, table.getWeight(), 1.0e-9);
1:a07bfc3: 
1:a07bfc3:         double total = 0;
1:a07bfc3:         double[] p = new double[10];
1:a07bfc3:         for (int i = 0; i < 10; i++) {
1:a07bfc3:             p[i] = rand.nextDouble();
1:a07bfc3:             table.add(i, p[i]);
1:a07bfc3:             total += p[i];
1:8b6a26a:             assertEquals(total, table.getWeight(), 1.0e-9);
1:a07bfc3:         }
1:a07bfc3: 
1:8b6a26a:         assertEquals(total, table.getWeight(), 1.0e-9);
1:a07bfc3: 
1:a07bfc3:         checkSelfConsistent(table);
1:a07bfc3: 
1:a07bfc3:         double delta = p[7] + p[8];
1:a07bfc3:         table.delete(7);
1:a07bfc3:         p[7] = 0;
1:a07bfc3: 
1:a07bfc3:         table.set(8, 0);
1:a07bfc3:         p[8] = 0;
1:a07bfc3:         total -= delta;
1:a07bfc3: 
1:a07bfc3:         checkSelfConsistent(table);
1:a07bfc3: 
1:8b6a26a:         assertEquals(total, table.getWeight(), 1.0e-9);
1:a07bfc3:         for (int i = 0; i < 10; i++) {
1:a07bfc3:             assertEquals(p[i], table.getWeight(i), 0);
1:8b6a26a:             assertEquals(p[i] / total, table.getProbability(i), 1.0e-10);
1:a07bfc3:         }
1:a07bfc3: 
1:a07bfc3:         table.set(9, 5.1);
1:a07bfc3:         total -= p[9];
1:a07bfc3:         p[9] = 5.1;
1:a07bfc3:         total += 5.1;
1:a07bfc3: 
1:8b6a26a:         assertEquals(total , table.getWeight(), 1.0e-9);
1:a07bfc3:         for (int i = 0; i < 10; i++) {
1:8b6a26a:             assertEquals(p[i], table.getWeight(i), 0);
1:8b6a26a:             assertEquals(p[i] / total, table.getProbability(i), 1.0e-10);
1:a07bfc3:         }
1:a07bfc3: 
1:a07bfc3:         checkSelfConsistent(table);
1:a07bfc3: 
1:a07bfc3:         for (int i = 0; i < 10; i++) {
1:a07bfc3:             assertEquals(p[i], table.getWeight(i), 0);
1:a07bfc3:         }
1:a07bfc3:     }
1:a07bfc3: 
1:8b6a26a:     private static void checkSelfConsistent(Multinomial<Integer> table) {
1:8b6a26a:         List<Double> weights = table.getWeights();
1:a07bfc3: 
1:a07bfc3:         double totalWeight = table.getWeight();
1:a07bfc3: 
1:a07bfc3:         double p = 0;
1:b04eba0:         int[] k = new int[weights.size()];
1:a07bfc3:         for (double weight : weights) {
1:a07bfc3:             if (weight > 0) {
1:a07bfc3:                 if (p > 0) {
1:8b6a26a:                     k[table.sample(p - 1.0e-9)]++;
1:a07bfc3:                 }
1:8b6a26a:                 k[table.sample(p + 1.0e-9)]++;
1:a07bfc3:             }
1:a07bfc3:             p += weight / totalWeight;
1:a07bfc3:         }
1:8b6a26a:         k[table.sample(p - 1.0e-9)]++;
1:8b6a26a:         assertEquals(1, p, 1.0e-9);
1:a07bfc3: 
1:b04eba0:         for (int i = 0; i < weights.size(); i++) {
1:a07bfc3:             if (table.getWeight(i) > 0) {
1:8b6a26a:                 assertEquals(2, k[i]);
1:b04eba0:             } else {
1:b04eba0:                 assertEquals(0, k[i]);
1:a07bfc3:             }
1:a07bfc3:         }
1:a07bfc3:     }
1:a07bfc3: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:         new Multinomial<>(emptySet);
1:         Multinomial<String> s = new Multinomial<>(oneThing);
/////////////////////////////////////////////////////////////////////////
1:         Multinomial<String> s = new Multinomial<>(stuff);
/////////////////////////////////////////////////////////////////////////
1:         Multinomial<String> s0 = new Multinomial<>(stuff);
1:         Multinomial<String> s1 = new Multinomial<>(stuff);
1:         Multinomial<String> s2 = new Multinomial<>(stuff);
/////////////////////////////////////////////////////////////////////////
1:         Multinomial<Integer> table = new Multinomial<>();
/////////////////////////////////////////////////////////////////////////
1:     Multinomial<Integer> table = new Multinomial<>();
/////////////////////////////////////////////////////////////////////////
1:     Multinomial<Integer> table = new Multinomial<>();
/////////////////////////////////////////////////////////////////////////
1:         Multinomial<Integer> table = new Multinomial<>();
author:Sean Owen
-------------------------------------------------------------------------------
commit:91f15ec
/////////////////////////////////////////////////////////////////////////
1:             assertTrue(Math.abs(ref.get(v) - cnt.count(v)) <= 2);
author:smarthi
-------------------------------------------------------------------------------
commit:b04eba0
/////////////////////////////////////////////////////////////////////////
1:         int[] k = new int[weights.size()];
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < weights.size(); i++) {
1:             } else {
1:                 assertEquals(0, k[i]);
author:dfilimon
-------------------------------------------------------------------------------
commit:802464d
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Random;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public void testSetZeroWhileIterating() {
0:     Multinomial<Integer> table = new Multinomial<Integer>();
1:     for (int i = 0; i < 10000; ++i) {
1:       table.add(i, i);
1:     }
1:     // Setting a sample's weight to 0 removes from the items map.
1:     // If that map is used when iterating (it used to be), it will
1:     // trigger a ConcurrentModificationException.
1:     for (Integer sample : table) {
1:       table.set(sample, 0);
1:     }
1:   }
1: 
1:   @Test(expected=NullPointerException.class)
1:   public void testNoNullValuesAllowed() {
0:     Multinomial<Integer> table = new Multinomial<Integer>();
1:     // No null values should be allowed.
1:     table.add(null, 1);
1:   }
1: 
1:   @Test
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.MahoutTestCase;
/////////////////////////////////////////////////////////////////////////
1: public class MultinomialTest extends MahoutTestCase {
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             stuff.add(String.valueOf(i));
1:         double EPSILON = 1.0e-15;
/////////////////////////////////////////////////////////////////////////
1:         double EPSILON = 1.0e-15;
1:             double p0 = i * 0.02;
1:             double p1 = (i + 1) * 0.02;
/////////////////////////////////////////////////////////////////////////
1:         Random rand = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
1:             assertEquals(p[i], table.getWeight(i), 0);
1:         Random rand = RandomUtils.getRandom();
1:         assertEquals(0, table.getWeight(), 1.0e-9);
/////////////////////////////////////////////////////////////////////////
1:             assertEquals(total, table.getWeight(), 1.0e-9);
1:         assertEquals(total, table.getWeight(), 1.0e-9);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(total, table.getWeight(), 1.0e-9);
1:             assertEquals(p[i] / total, table.getProbability(i), 1.0e-10);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(total , table.getWeight(), 1.0e-9);
1:             assertEquals(p[i] / total, table.getProbability(i), 1.0e-10);
1:             assertEquals(p[i], table.getWeight(i), 0);
1:     private static void checkSelfConsistent(Multinomial<Integer> table) {
1:         List<Double> weights = table.getWeights();
/////////////////////////////////////////////////////////////////////////
1:                     k[table.sample(p - 1.0e-9)]++;
1:                 k[table.sample(p + 1.0e-9)]++;
1:         k[table.sample(p - 1.0e-9)]++;
1:         assertEquals(1, p, 1.0e-9);
1:                 assertEquals(2, k[i]);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import com.google.common.collect.HashMultiset;
1: import com.google.common.collect.ImmutableMap;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Multiset;
0: import junit.framework.Assert;
1: import org.apache.mahout.common.RandomUtils;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Random;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
0: public class MultinomialTest {
1:     @Before
1:     public void setUp() {
1:         RandomUtils.useTestSeed();
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testNoValues() {
1:         Multiset<String> emptySet = HashMultiset.create();
0:         new Multinomial<String>(emptySet);
1:     }
1: 
1:     @Test
1:     public void testSingleton() {
1:         Multiset<String> oneThing = HashMultiset.create();
1:         oneThing.add("one");
0:         Multinomial<String> s = new Multinomial<String>(oneThing);
1:         assertEquals("one", s.sample(0));
1:         assertEquals("one", s.sample(0.1));
1:         assertEquals("one", s.sample(1));
1:     }
1: 
1:     @Test
1:     public void testEvenSplit() {
1:         Multiset<String> stuff = HashMultiset.create();
1:         for (int i = 0; i < 5; i++) {
0:             stuff.add(i + "");
1:         }
0:         Multinomial<String> s = new Multinomial<String>(stuff);
0:         final double EPSILON = 1e-15;
1: 
1:         Multiset<String> cnt = HashMultiset.create();
1:         for (int i = 0; i < 5; i++) {
1:             cnt.add(s.sample(i * 0.2));
1:             cnt.add(s.sample(i * 0.2 + EPSILON));
1:             cnt.add(s.sample((i + 1) * 0.2 - EPSILON));
1:         }
1: 
1:         assertEquals(5, cnt.elementSet().size());
1:         for (String v : cnt.elementSet()) {
1:             assertEquals(3, cnt.count(v), 1.01);
1:         }
1:         assertTrue(cnt.contains(s.sample(1)));
1:         assertEquals(s.sample(1 - EPSILON), s.sample(1));
1:     }
1: 
1:     @Test
1:     public void testPrime() {
1:         List<String> data = Lists.newArrayList();
1:         for (int i = 0; i < 17; i++) {
1:             String s = "0";
1:             if ((i & 1) != 0) {
1:                 s = "1";
1:             }
1:             if ((i & 2) != 0) {
1:                 s = "2";
1:             }
1:             if ((i & 4) != 0) {
1:                 s = "3";
1:             }
1:             if ((i & 8) != 0) {
1:                 s = "4";
1:             }
1:             data.add(s);
1:         }
1: 
1:         Multiset<String> stuff = HashMultiset.create();
1: 
1:         for (String x : data) {
1:             stuff.add(x);
1:         }
1: 
0:         Multinomial<String> s0 = new Multinomial<String>(stuff);
0:         Multinomial<String> s1 = new Multinomial<String>(stuff);
0:         Multinomial<String> s2 = new Multinomial<String>(stuff);
0:         final double EPSILON = 1e-15;
1: 
1:         Multiset<String> cnt = HashMultiset.create();
1:         for (int i = 0; i < 50; i++) {
0:             final double p0 = i * 0.02;
0:             final double p1 = (i + 1) * 0.02;
1:             cnt.add(s0.sample(p0));
1:             cnt.add(s0.sample(p0 + EPSILON));
1:             cnt.add(s0.sample(p1 - EPSILON));
1: 
1:             assertEquals(s0.sample(p0), s1.sample(p0));
1:             assertEquals(s0.sample(p0 + EPSILON), s1.sample(p0 + EPSILON));
1:             assertEquals(s0.sample(p1 - EPSILON), s1.sample(p1 - EPSILON));
1: 
1:             assertEquals(s0.sample(p0), s2.sample(p0));
1:             assertEquals(s0.sample(p0 + EPSILON), s2.sample(p0 + EPSILON));
1:             assertEquals(s0.sample(p1 - EPSILON), s2.sample(p1 - EPSILON));
1:         }
1: 
1:         assertEquals(s0.sample(0), s1.sample(0));
1:         assertEquals(s0.sample(0 + EPSILON), s1.sample(0 + EPSILON));
1:         assertEquals(s0.sample(1 - EPSILON), s1.sample(1 - EPSILON));
1:         assertEquals(s0.sample(1), s1.sample(1));
1: 
1:         assertEquals(s0.sample(0), s2.sample(0));
1:         assertEquals(s0.sample(0 + EPSILON), s2.sample(0 + EPSILON));
1:         assertEquals(s0.sample(1 - EPSILON), s2.sample(1 - EPSILON));
1:         assertEquals(s0.sample(1), s2.sample(1));
1: 
1:         assertEquals(5, cnt.elementSet().size());
1:         // regression test, really.  These values depend on the original seed and exact algorithm.
1:         // the actual values should be within about 2 of these, however, almost regardless of seed
1:         Map<String, Integer> ref = ImmutableMap.of("3", 35, "2", 18, "1", 9, "0", 16, "4", 72);
1:         for (String v : cnt.elementSet()) {
0:             assertEquals(ref.get(v).intValue(), cnt.count(v));
1:         }
1: 
1:         assertTrue(cnt.contains(s0.sample(1)));
1:         assertEquals(s0.sample(1 - EPSILON), s0.sample(1));
1:     }
1: 
1:     @Test
1:     public void testInsert() {
0:         Random rand = new Random();
0:         Multinomial<Integer> table = new Multinomial<Integer>();
1: 
1:         double[] p = new double[10];
1:         for (int i = 0; i < 10; i++) {
1:             p[i] = rand.nextDouble();
1:             table.add(i, p[i]);
1:         }
1: 
1:         checkSelfConsistent(table);
1: 
1:         for (int i = 0; i < 10; i++) {
0:             Assert.assertEquals(p[i], table.getWeight(i), 0);
1:         }
1:     }
1: 
1:     @Test
1:     public void testDeleteAndUpdate() {
0:         Random rand = new Random();
0:         Multinomial<Integer> table = new Multinomial<Integer>();
0:         assertEquals(0, table.getWeight(), 1e-9);
1: 
1:         double total = 0;
1:         double[] p = new double[10];
1:         for (int i = 0; i < 10; i++) {
1:             p[i] = rand.nextDouble();
1:             table.add(i, p[i]);
1:             total += p[i];
0:             assertEquals(total, table.getWeight(), 1e-9);
1:         }
1: 
0:         assertEquals(total, table.getWeight(), 1e-9);
1: 
1:         checkSelfConsistent(table);
1: 
1:         double delta = p[7] + p[8];
1:         table.delete(7);
1:         p[7] = 0;
1: 
1:         table.set(8, 0);
1:         p[8] = 0;
1:         total -= delta;
1: 
1:         checkSelfConsistent(table);
1: 
0:         assertEquals(total, table.getWeight(), 1e-9);
1:         for (int i = 0; i < 10; i++) {
1:             assertEquals(p[i], table.getWeight(i), 0);
0:             assertEquals(p[i] / total, table.getProbability(i), 1e-10);
1:         }
1: 
1:         table.set(9, 5.1);
1:         total -= p[9];
1:         p[9] = 5.1;
1:         total += 5.1;
1: 
0:         assertEquals(total , table.getWeight(), 1e-9);
1:         for (int i = 0; i < 10; i++) {
1:             assertEquals(p[i], table.getWeight(i), 0);
0:             assertEquals(p[i] / total, table.getProbability(i), 1e-10);
1:         }
1: 
1:         checkSelfConsistent(table);
1: 
1:         for (int i = 0; i < 10; i++) {
0:             Assert.assertEquals(p[i], table.getWeight(i), 0);
1:         }
1:     }
1: 
0:     private void checkSelfConsistent(Multinomial<Integer> table) {
0:         final List<Double> weights = table.getWeights();
1: 
1:         double totalWeight = table.getWeight();
1: 
1:         double p = 0;
0:         int[] k = new int[10];
1:         for (double weight : weights) {
1:             if (weight > 0) {
1:                 if (p > 0) {
0:                     k[table.sample(p - 1e-9)]++;
1:                 }
0:                 k[table.sample(p + 1e-9)]++;
1:             }
1:             p += weight / totalWeight;
1:         }
0:         k[table.sample(p - 1e-9)]++;
0:         Assert.assertEquals(1, p, 1e-9);
1: 
1:         for (int i = 0; i < 10; i++) {
1:             if (table.getWeight(i) > 0) {
0:                 Assert.assertEquals(k[i], 2);
1:             }
1:         }
1:     }
1: }
============================================================================