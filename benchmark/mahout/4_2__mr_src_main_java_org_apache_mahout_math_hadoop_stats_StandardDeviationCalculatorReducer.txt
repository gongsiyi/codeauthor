1:d8e91f9: package org.apache.mahout.math.hadoop.stats;
1:d8e91f9: /**
1:d8e91f9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d8e91f9:  * contributor license agreements.  See the NOTICE file distributed with
1:d8e91f9:  * this work for additional information regarding copyright ownership.
1:d8e91f9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d8e91f9:  * (the "License"); you may not use this file except in compliance with
1:d8e91f9:  * the License.  You may obtain a copy of the License at
1:d8e91f9:  *
1:d8e91f9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d8e91f9:  *
1:d8e91f9:  * Unless required by applicable law or agreed to in writing, software
1:d8e91f9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d8e91f9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d8e91f9:  * See the License for the specific language governing permissions and
1:d8e91f9:  * limitations under the License.
1:d8e91f9:  */
1:d8e91f9: 
1:d8e91f9: import org.apache.hadoop.io.DoubleWritable;
1:d8e91f9: import org.apache.hadoop.io.IntWritable;
1:d8e91f9: import org.apache.hadoop.mapreduce.Reducer;
1:d8e91f9: 
1:d8e91f9: import java.io.IOException;
1:d8e91f9: 
1:d8e91f9: public class StandardDeviationCalculatorReducer extends
1:d8e91f9:         Reducer<IntWritable, DoubleWritable, IntWritable, DoubleWritable> {
1:d8e91f9: 
1:d8e91f9:   @Override
1:d8e91f9:   protected void reduce(IntWritable key, Iterable<DoubleWritable> values,
1:d8e91f9:                         Context context) throws IOException, InterruptedException {
1:564c3e1:     double sum = 0.0;
1:d8e91f9:     for (DoubleWritable value : values) {
1:d8e91f9:       sum += value.get();
1:d8e91f9:     }
1:d8e91f9:     context.write(key, new DoubleWritable(sum));
1:d8e91f9:   }
1:d8e91f9: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:     double sum = 0.0;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:d8e91f9
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.stats;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import org.apache.hadoop.io.DoubleWritable;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.mapreduce.Reducer;
1: 
1: import java.io.IOException;
1: 
1: public class StandardDeviationCalculatorReducer extends
1:         Reducer<IntWritable, DoubleWritable, IntWritable, DoubleWritable> {
1: 
1:   @Override
1:   protected void reduce(IntWritable key, Iterable<DoubleWritable> values,
1:                         Context context) throws IOException, InterruptedException {
0:     long sum = 0;
1:     for (DoubleWritable value : values) {
1:       sum += value.get();
1:     }
1:     context.write(key, new DoubleWritable(sum));
1:   }
1: }
============================================================================