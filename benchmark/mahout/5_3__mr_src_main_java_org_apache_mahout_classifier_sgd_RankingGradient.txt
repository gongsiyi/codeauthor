1:21d08d2: /*
1:21d08d2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:21d08d2:  * contributor license agreements.  See the NOTICE file distributed with
1:21d08d2:  * this work for additional information regarding copyright ownership.
1:21d08d2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:21d08d2:  * (the "License"); you may not use this file except in compliance with
1:21d08d2:  * the License.  You may obtain a copy of the License at
1:21d08d2:  *
1:21d08d2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:21d08d2:  *
1:21d08d2:  * Unless required by applicable law or agreed to in writing, software
1:21d08d2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:21d08d2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:21d08d2:  * See the License for the specific language governing permissions and
1:21d08d2:  * limitations under the License.
1:21d08d2:  */
1:21d08d2: 
1:21d08d2: package org.apache.mahout.classifier.sgd;
1:21d08d2: 
1:21d08d2: import org.apache.mahout.classifier.AbstractVectorClassifier;
1:21d08d2: import org.apache.mahout.math.Vector;
1:21d08d2: import org.apache.mahout.math.function.Functions;
1:21d08d2: 
1:319fd82: import java.util.ArrayDeque;
1:85f9ece: import java.util.ArrayList;
1:21d08d2: import java.util.Deque;
1:21d08d2: import java.util.List;
1:21d08d2: 
1:21d08d2: /**
1:21d08d2:  * Uses the difference between this instance and recent history to get a
1:21d08d2:  * gradient that optimizes ranking performance.  Essentially this is the
1:21d08d2:  * same as directly optimizing AUC.  It isn't expected that this would
1:21d08d2:  * be used alone, but rather that a MixedGradient would use it and a
1:21d08d2:  * DefaultGradient together to combine both ranking and log-likelihood
1:21d08d2:  * goals.
1:21d08d2:  */
1:21d08d2: public class RankingGradient implements Gradient {
1:d61a0ee: 
1:d61a0ee:   private static final Gradient BASIC = new DefaultGradient();
1:21d08d2: 
1:21d08d2:   private int window = 10;
1:21d08d2: 
1:85f9ece:   private final List<Deque<Vector>> history = new ArrayList<>();
1:21d08d2: 
1:21d08d2:   public RankingGradient(int window) {
1:21d08d2:     this.window = window;
1:21d08d2:   }
1:21d08d2: 
1:21d08d2:   @Override
1:21d08d2:   public final Vector apply(String groupKey, int actual, Vector instance, AbstractVectorClassifier classifier) {
1:21d08d2:     addToHistory(actual, instance);
1:21d08d2: 
1:21d08d2:     // now compute average gradient versus saved vectors from the other side
1:21d08d2:     Deque<Vector> otherSide = history.get(1 - actual);
1:21d08d2:     int n = otherSide.size();
1:21d08d2: 
1:21d08d2:     Vector r = null;
1:21d08d2:     for (Vector other : otherSide) {
1:d61a0ee:       Vector g = BASIC.apply(groupKey, actual, instance.minus(other), classifier);
1:21d08d2: 
1:21d08d2:       if (r == null) {
1:21d08d2:         r = g;
1:21d08d2:       } else {
1:21d08d2:         r.assign(g, Functions.plusMult(1.0 / n));
1:21d08d2:       }
1:21d08d2:     }
1:21d08d2:     return r;
1:21d08d2:   }
1:21d08d2: 
1:21d08d2:   public void addToHistory(int actual, Vector instance) {
1:319fd82:     while (history.size() <= actual) {
1:319fd82:       history.add(new ArrayDeque<Vector>(window));
1:319fd82:     }
1:21d08d2:     // save this instance
1:21d08d2:     Deque<Vector> ourSide = history.get(actual);
1:21d08d2:     ourSide.add(instance);
1:319fd82:     while (ourSide.size() >= window) {
1:21d08d2:       ourSide.pollFirst();
1:21d08d2:     }
1:21d08d2:   }
1:21d08d2: 
1:21d08d2:   public Gradient getBaseGradient() {
1:d61a0ee:     return BASIC;
1:21d08d2:   }
1:21d08d2: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:   private final List<Deque<Vector>> history = new ArrayList<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
1: 
1:   private static final Gradient BASIC = new DefaultGradient();
/////////////////////////////////////////////////////////////////////////
1:       Vector g = BASIC.apply(groupKey, actual, instance.minus(other), classifier);
/////////////////////////////////////////////////////////////////////////
1:     return BASIC;
commit:939ac30
/////////////////////////////////////////////////////////////////////////
commit:69ba194
/////////////////////////////////////////////////////////////////////////
0:   private final List<Deque<Vector>> history = Lists.newArrayList();
author:Ted Dunning
-------------------------------------------------------------------------------
commit:319fd82
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Collections2;
1: import java.util.ArrayDeque;
/////////////////////////////////////////////////////////////////////////
1:     while (history.size() <= actual) {
1:       history.add(new ArrayDeque<Vector>(window));
1:     }
1:     while (ourSide.size() >= window) {
commit:21d08d2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
0: import com.google.common.collect.Lists;
1: import org.apache.mahout.classifier.AbstractVectorClassifier;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.Functions;
1: 
1: import java.util.Deque;
1: import java.util.List;
1: 
1: /**
1:  * Uses the difference between this instance and recent history to get a
1:  * gradient that optimizes ranking performance.  Essentially this is the
1:  * same as directly optimizing AUC.  It isn't expected that this would
1:  * be used alone, but rather that a MixedGradient would use it and a
1:  * DefaultGradient together to combine both ranking and log-likelihood
1:  * goals.
1:  */
1: public class RankingGradient implements Gradient {
0:   private static final Gradient basic = new DefaultGradient();
1: 
1:   private int window = 10;
1: 
0:   private List<Deque<Vector>> history = Lists.newArrayList();
1: 
1:   public RankingGradient(int window) {
1:     this.window = window;
1:   }
1: 
1:   @Override
1:   public final Vector apply(String groupKey, int actual, Vector instance, AbstractVectorClassifier classifier) {
1:     addToHistory(actual, instance);
1: 
1:     // now compute average gradient versus saved vectors from the other side
1:     Deque<Vector> otherSide = history.get(1 - actual);
1:     int n = otherSide.size();
1: 
1:     Vector r = null;
1:     for (Vector other : otherSide) {
0:       Vector g = basic.apply(groupKey, actual, instance.minus(other), classifier);
1: 
1:       if (r == null) {
1:         r = g;
1:       } else {
1:         r.assign(g, Functions.plusMult(1.0 / n));
1:       }
1:     }
1:     return r;
1:   }
1: 
1:   public void addToHistory(int actual, Vector instance) {
1:     // save this instance
1:     Deque<Vector> ourSide = history.get(actual);
1:     ourSide.add(instance);
0:     if (ourSide.size() >= window) {
1:       ourSide.pollFirst();
1:     }
1:   }
1: 
1:   public Gradient getBaseGradient() {
0:     return basic;
1:   }
1: }
============================================================================