1:ace4c35: /*
1:ace4c35:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ace4c35:  * contributor license agreements.  See the NOTICE file distributed with
1:ace4c35:  * this work for additional information regarding copyright ownership.
1:ace4c35:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ace4c35:  * (the "License"); you may not use this file except in compliance with
1:ace4c35:  * the License.  You may obtain a copy of the License at
1:ace4c35:  *
1:ace4c35:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ace4c35:  *
1:ace4c35:  * Unless required by applicable law or agreed to in writing, software
1:ace4c35:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ace4c35:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ace4c35:  * See the License for the specific language governing permissions and
1:ace4c35:  * limitations under the License.
1:ace4c35:  *
1:ace4c35:  * Copyright 1999 CERN - European Organization for Nuclear Research.
1:ace4c35:  * Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
1:ace4c35:  * is hereby granted without fee, provided that the above copyright notice appear in all copies and
1:ace4c35:  * that both that copyright notice and this permission notice appear in supporting documentation.
1:ace4c35:  * CERN makes no representations about the suitability of this software for any purpose.
1:ace4c35:  * It is provided "as is" without expressed or implied warranty.
1:ace4c35:  */
1:ace4c35: package org.apache.mahout.math;
1:ace4c35: 
1:ace4c35: import org.apache.mahout.math.function.Functions;
1:ace4c35: 
1:ace4c35: import java.util.Locale;
1:ace4c35: 
1:ace4c35: 
1:ace4c35: /**
1:ace4c35:  For an <tt>m x n</tt> matrix <tt>A</tt> with <tt>m >= n</tt>, the QR decomposition is an <tt>m x n</tt>
1:ace4c35:  orthogonal matrix <tt>Q</tt> and an <tt>n x n</tt> upper triangular matrix <tt>R</tt> so that
1:ace4c35:  <tt>A = Q*R</tt>.
1:ace4c35:  <P>
1:ace4c35:  The QR decompostion always exists, even if the matrix does not have
1:ace4c35:  full rank, so the constructor will never fail.  The primary use of the
1:ace4c35:  QR decomposition is in the least squares solution of nonsquare systems
1:ace4c35:  of simultaneous linear equations.  This will fail if <tt>isFullRank()</tt>
1:ace4c35:  returns <tt>false</tt>.
1:ace4c35:  */
1:ace4c35: 
1:ace4c35: /** partially deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
1:86d269b: public class OldQRDecomposition implements QR {
1:ace4c35: 
1:ace4c35:   /** Array for internal storage of decomposition. */
1:ace4c35:   private final Matrix qr;
1:ace4c35: 
1:ace4c35:   /** Row and column dimensions. */
1:ace4c35:   private final int originalRows;
1:ace4c35:   private final int originalColumns;
1:ace4c35: 
1:ace4c35:   /** Array for internal storage of diagonal of R. */
1:ace4c35:   private final Vector rDiag;
1:ace4c35: 
1:ace4c35:   /**
1:ace4c35:    * Constructs and returns a new QR decomposition object;  computed by Householder reflections; The decomposed matrices
1:ace4c35:    * can be retrieved via instance methods of the returned decomposition object.
1:ace4c35:    *
1:ace4c35:    * @param a A rectangular matrix.
1:b5c2879:    * @throws IllegalArgumentException if {@code A.rows() < A.columns()}
1:ace4c35:    */
1:ace4c35: 
1:ace4c35:   public OldQRDecomposition(Matrix a) {
1:ace4c35: 
1:ace4c35:     // Initialize.
1:ace4c35:     qr = a.clone();
1:ace4c35:     originalRows = a.numRows();
1:ace4c35:     originalColumns = a.numCols();
1:ace4c35:     rDiag = new DenseVector(originalColumns);
1:ace4c35: 
1:ace4c35:     // precompute and cache some views to avoid regenerating them time and again
1:ace4c35:     Vector[] QRcolumnsPart = new Vector[originalColumns];
1:ace4c35:     for (int k = 0; k < originalColumns; k++) {
1:ace4c35:       QRcolumnsPart[k] = qr.viewColumn(k).viewPart(k, originalRows - k);
1:ace4c35:     }
1:ace4c35: 
1:ace4c35:     // Main loop.
1:ace4c35:     for (int k = 0; k < originalColumns; k++) {
1:ace4c35:       //DoubleMatrix1D QRcolk = QR.viewColumn(k).viewPart(k,m-k);
1:ace4c35:       // Compute 2-norm of k-th column without under/overflow.
1:ace4c35:       double nrm = 0;
1:ace4c35:       //if (k<m) nrm = QRcolumnsPart[k].aggregate(hypot,F.identity);
1:ace4c35: 
1:ace4c35:       for (int i = k; i < originalRows; i++) { // fixes bug reported by hong.44@osu.edu
1:ace4c35:         nrm = Algebra.hypot(nrm, qr.getQuick(i, k));
1:ace4c35:       }
1:ace4c35: 
1:ace4c35: 
1:ace4c35:       if (nrm != 0.0) {
1:ace4c35:         // Form k-th Householder vector.
1:ace4c35:         if (qr.getQuick(k, k) < 0) {
1:ace4c35:           nrm = -nrm;
1:ace4c35:         }
1:ace4c35:         QRcolumnsPart[k].assign(Functions.div(nrm));
1:ace4c35:         /*
1:ace4c35:         for (int i = k; i < m; i++) {
1:ace4c35:            QR[i][k] /= nrm;
1:ace4c35:         }
1:ace4c35:         */
1:ace4c35: 
1:ace4c35:         qr.setQuick(k, k, qr.getQuick(k, k) + 1);
1:ace4c35: 
1:ace4c35:         // Apply transformation to remaining columns.
1:ace4c35:         for (int j = k + 1; j < originalColumns; j++) {
1:ace4c35:           Vector QRcolj = qr.viewColumn(j).viewPart(k, originalRows - k);
1:ace4c35:           double s = QRcolumnsPart[k].dot(QRcolj);
1:ace4c35:           /*
1:ace4c35:           // fixes bug reported by John Chambers
1:ace4c35:           DoubleMatrix1D QRcolj = QR.viewColumn(j).viewPart(k,m-k);
1:ace4c35:           double s = QRcolumnsPart[k].zDotProduct(QRcolumns[j]);
1:ace4c35:           double s = 0.0;
1:ace4c35:           for (int i = k; i < m; i++) {
1:ace4c35:             s += QR[i][k]*QR[i][j];
1:ace4c35:           }
1:ace4c35:           */
1:ace4c35:           s = -s / qr.getQuick(k, k);
1:ace4c35:           //QRcolumnsPart[j].assign(QRcolumns[k], F.plusMult(s));
1:ace4c35: 
1:ace4c35:           for (int i = k; i < originalRows; i++) {
1:ace4c35:             qr.setQuick(i, j, qr.getQuick(i, j) + s * qr.getQuick(i, k));
1:ace4c35:           }
1:ace4c35: 
1:ace4c35:         }
1:ace4c35:       }
1:ace4c35:       rDiag.setQuick(k, -nrm);
1:ace4c35:     }
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   /**
1:ace4c35:    * Generates and returns the (economy-sized) orthogonal factor <tt>Q</tt>.
1:ace4c35:    *
1:ace4c35:    * @return <tt>Q</tt>
1:ace4c35:    */
1:10c535c:   @Override
1:ace4c35:   public Matrix getQ() {
1:ace4c35:     int columns = Math.min(originalColumns, originalRows);
1:ace4c35:     Matrix q = qr.like(originalRows, columns);
1:ace4c35:     for (int k = columns - 1; k >= 0; k--) {
1:ace4c35:       Vector QRcolk = qr.viewColumn(k).viewPart(k, originalRows - k);
1:ace4c35:       q.set(k, k, 1);
1:ace4c35:       for (int j = k; j < columns; j++) {
1:ace4c35:         if (qr.get(k, k) != 0) {
1:ace4c35:           Vector Qcolj = q.viewColumn(j).viewPart(k, originalRows - k);
1:ace4c35:           double s = -QRcolk.dot(Qcolj) / qr.get(k, k);
1:ace4c35:           Qcolj.assign(QRcolk, Functions.plusMult(s));
1:ace4c35:         }
1:ace4c35:       }
1:ace4c35:     }
1:ace4c35:     return q;
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   /**
1:ace4c35:    * Returns the upper triangular factor, <tt>R</tt>.
1:ace4c35:    *
1:ace4c35:    * @return <tt>R</tt>
1:ace4c35:    */
1:10c535c:   @Override
1:ace4c35:   public Matrix getR() {
1:ace4c35:     int rows = Math.min(originalRows, originalColumns);
1:ace4c35:     Matrix r = qr.like(rows, originalColumns);
1:ace4c35:     for (int i = 0; i < rows; i++) {
1:ace4c35:       for (int j = 0; j < originalColumns; j++) {
1:ace4c35:         if (i < j) {
1:ace4c35:           r.setQuick(i, j, qr.getQuick(i, j));
1:ace4c35:         } else if (i == j) {
1:ace4c35:           r.setQuick(i, j, rDiag.getQuick(i));
1:ace4c35:         } else {
1:ace4c35:           r.setQuick(i, j, 0);
1:ace4c35:         }
1:ace4c35:       }
1:ace4c35:     }
1:ace4c35:     return r;
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   /**
1:ace4c35:    * Returns whether the matrix <tt>A</tt> has full rank.
1:ace4c35:    *
1:ace4c35:    * @return true if <tt>R</tt>, and hence <tt>A</tt>, has full rank.
1:ace4c35:    */
1:10c535c:   @Override
1:ace4c35:   public boolean hasFullRank() {
1:ace4c35:     for (int j = 0; j < originalColumns; j++) {
1:ace4c35:       if (rDiag.getQuick(j) == 0) {
1:ace4c35:         return false;
1:ace4c35:       }
1:ace4c35:     }
1:ace4c35:     return true;
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   /**
1:ace4c35:    * Least squares solution of <tt>A*X = B</tt>; <tt>returns X</tt>.
1:ace4c35:    *
1:ace4c35:    * @param B A matrix with as many rows as <tt>A</tt> and any number of columns.
1:ace4c35:    * @return <tt>X</tt> that minimizes the two norm of <tt>Q*R*X - B</tt>.
1:ace4c35:    * @throws IllegalArgumentException if <tt>B.rows() != A.rows()</tt>.
1:ace4c35:    */
1:10c535c:   @Override
1:ace4c35:   public Matrix solve(Matrix B) {
1:ace4c35:     if (B.numRows() != originalRows) {
1:ace4c35:       throw new IllegalArgumentException("Matrix row dimensions must agree.");
1:ace4c35:     }
1:ace4c35: 
1:ace4c35:     int columns = B.numCols();
1:ace4c35:     Matrix x = B.like(originalColumns, columns);
1:ace4c35: 
1:ace4c35:     // this can all be done a bit more efficiently if we don't actually
1:ace4c35:     // form explicit versions of Q^T and R but this code isn't soo bad
1:ace4c35:     // and it is much easier to understand
1:ace4c35:     Matrix qt = getQ().transpose();
1:ace4c35:     Matrix y = qt.times(B);
1:ace4c35: 
1:ace4c35:     Matrix r = getR();
1:ace4c35:     for (int k = Math.min(originalColumns, originalRows) - 1; k >= 0; k--) {
1:ace4c35:       // X[k,] = Y[k,] / R[k,k], note that X[k,] starts with 0 so += is same as =
1:ace4c35:       x.viewRow(k).assign(y.viewRow(k), Functions.plusMult(1 / r.get(k, k)));
1:ace4c35: 
1:ace4c35:       // Y[0:(k-1),] -= R[0:(k-1),k] * X[k,]
1:ace4c35:       Vector rColumn = r.viewColumn(k).viewPart(0, k);
1:ace4c35:       for (int c = 0; c < columns; c++) {
1:ace4c35:         y.viewColumn(c).viewPart(0, k).assign(rColumn, Functions.plusMult(-x.get(k, c)));
1:ace4c35:       }
1:ace4c35:     }
1:ace4c35:     return x;
1:ace4c35:   }
1:ace4c35: 
1:ace4c35:   /**
1:ace4c35:    * Returns a rough string rendition of a QR.
1:ace4c35:    */
1:ace4c35:   @Override
1:ace4c35:   public String toString() {
1:ace4c35:     return String.format(Locale.ENGLISH, "QR(%d,%d,fullRank=%s)", originalColumns, originalRows, hasFullRank());
1:ace4c35:   }
1:ace4c35: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:b5c2879
/////////////////////////////////////////////////////////////////////////
1:    * @throws IllegalArgumentException if {@code A.rows() < A.columns()}
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
author:Ted Dunning
-------------------------------------------------------------------------------
commit:86d269b
/////////////////////////////////////////////////////////////////////////
1: public class OldQRDecomposition implements QR {
commit:ace4c35
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  *
1:  * Copyright 1999 CERN - European Organization for Nuclear Research.
1:  * Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
1:  * is hereby granted without fee, provided that the above copyright notice appear in all copies and
1:  * that both that copyright notice and this permission notice appear in supporting documentation.
1:  * CERN makes no representations about the suitability of this software for any purpose.
1:  * It is provided "as is" without expressed or implied warranty.
1:  */
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.math.function.Functions;
1: 
1: import java.util.Locale;
1: 
1: 
1: /**
1:  For an <tt>m x n</tt> matrix <tt>A</tt> with <tt>m >= n</tt>, the QR decomposition is an <tt>m x n</tt>
1:  orthogonal matrix <tt>Q</tt> and an <tt>n x n</tt> upper triangular matrix <tt>R</tt> so that
1:  <tt>A = Q*R</tt>.
1:  <P>
1:  The QR decompostion always exists, even if the matrix does not have
1:  full rank, so the constructor will never fail.  The primary use of the
1:  QR decomposition is in the least squares solution of nonsquare systems
1:  of simultaneous linear equations.  This will fail if <tt>isFullRank()</tt>
1:  returns <tt>false</tt>.
1:  */
1: 
1: /** partially deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
0: public class OldQRDecomposition {
1: 
1:   /** Array for internal storage of decomposition. */
1:   private final Matrix qr;
1: 
1:   /** Row and column dimensions. */
1:   private final int originalRows;
1:   private final int originalColumns;
1: 
1:   /** Array for internal storage of diagonal of R. */
1:   private final Vector rDiag;
1: 
1:   /**
1:    * Constructs and returns a new QR decomposition object;  computed by Householder reflections; The decomposed matrices
1:    * can be retrieved via instance methods of the returned decomposition object.
1:    *
1:    * @param a A rectangular matrix.
0:    * @throws IllegalArgumentException if <tt>A.rows() < A.columns()</tt>.
1:    */
1: 
1:   public OldQRDecomposition(Matrix a) {
1: 
1:     // Initialize.
1:     qr = a.clone();
1:     originalRows = a.numRows();
1:     originalColumns = a.numCols();
1:     rDiag = new DenseVector(originalColumns);
1: 
1:     // precompute and cache some views to avoid regenerating them time and again
1:     Vector[] QRcolumnsPart = new Vector[originalColumns];
1:     for (int k = 0; k < originalColumns; k++) {
1:       QRcolumnsPart[k] = qr.viewColumn(k).viewPart(k, originalRows - k);
1:     }
1: 
1:     // Main loop.
1:     for (int k = 0; k < originalColumns; k++) {
1:       //DoubleMatrix1D QRcolk = QR.viewColumn(k).viewPart(k,m-k);
1:       // Compute 2-norm of k-th column without under/overflow.
1:       double nrm = 0;
1:       //if (k<m) nrm = QRcolumnsPart[k].aggregate(hypot,F.identity);
1: 
1:       for (int i = k; i < originalRows; i++) { // fixes bug reported by hong.44@osu.edu
1:         nrm = Algebra.hypot(nrm, qr.getQuick(i, k));
1:       }
1: 
1: 
1:       if (nrm != 0.0) {
1:         // Form k-th Householder vector.
1:         if (qr.getQuick(k, k) < 0) {
1:           nrm = -nrm;
1:         }
1:         QRcolumnsPart[k].assign(Functions.div(nrm));
1:         /*
1:         for (int i = k; i < m; i++) {
1:            QR[i][k] /= nrm;
1:         }
1:         */
1: 
1:         qr.setQuick(k, k, qr.getQuick(k, k) + 1);
1: 
1:         // Apply transformation to remaining columns.
1:         for (int j = k + 1; j < originalColumns; j++) {
1:           Vector QRcolj = qr.viewColumn(j).viewPart(k, originalRows - k);
1:           double s = QRcolumnsPart[k].dot(QRcolj);
1:           /*
1:           // fixes bug reported by John Chambers
1:           DoubleMatrix1D QRcolj = QR.viewColumn(j).viewPart(k,m-k);
1:           double s = QRcolumnsPart[k].zDotProduct(QRcolumns[j]);
1:           double s = 0.0;
1:           for (int i = k; i < m; i++) {
1:             s += QR[i][k]*QR[i][j];
1:           }
1:           */
1:           s = -s / qr.getQuick(k, k);
1:           //QRcolumnsPart[j].assign(QRcolumns[k], F.plusMult(s));
1: 
1:           for (int i = k; i < originalRows; i++) {
1:             qr.setQuick(i, j, qr.getQuick(i, j) + s * qr.getQuick(i, k));
1:           }
1: 
1:         }
1:       }
1:       rDiag.setQuick(k, -nrm);
1:     }
1:   }
1: 
1:   /**
1:    * Generates and returns the (economy-sized) orthogonal factor <tt>Q</tt>.
1:    *
1:    * @return <tt>Q</tt>
1:    */
1:   public Matrix getQ() {
1:     int columns = Math.min(originalColumns, originalRows);
1:     Matrix q = qr.like(originalRows, columns);
1:     for (int k = columns - 1; k >= 0; k--) {
1:       Vector QRcolk = qr.viewColumn(k).viewPart(k, originalRows - k);
1:       q.set(k, k, 1);
1:       for (int j = k; j < columns; j++) {
1:         if (qr.get(k, k) != 0) {
1:           Vector Qcolj = q.viewColumn(j).viewPart(k, originalRows - k);
1:           double s = -QRcolk.dot(Qcolj) / qr.get(k, k);
1:           Qcolj.assign(QRcolk, Functions.plusMult(s));
1:         }
1:       }
1:     }
1:     return q;
1:   }
1: 
1:   /**
1:    * Returns the upper triangular factor, <tt>R</tt>.
1:    *
1:    * @return <tt>R</tt>
1:    */
1:   public Matrix getR() {
1:     int rows = Math.min(originalRows, originalColumns);
1:     Matrix r = qr.like(rows, originalColumns);
1:     for (int i = 0; i < rows; i++) {
1:       for (int j = 0; j < originalColumns; j++) {
1:         if (i < j) {
1:           r.setQuick(i, j, qr.getQuick(i, j));
1:         } else if (i == j) {
1:           r.setQuick(i, j, rDiag.getQuick(i));
1:         } else {
1:           r.setQuick(i, j, 0);
1:         }
1:       }
1:     }
1:     return r;
1:   }
1: 
1:   /**
1:    * Returns whether the matrix <tt>A</tt> has full rank.
1:    *
1:    * @return true if <tt>R</tt>, and hence <tt>A</tt>, has full rank.
1:    */
1:   public boolean hasFullRank() {
1:     for (int j = 0; j < originalColumns; j++) {
1:       if (rDiag.getQuick(j) == 0) {
1:         return false;
1:       }
1:     }
1:     return true;
1:   }
1: 
1:   /**
1:    * Least squares solution of <tt>A*X = B</tt>; <tt>returns X</tt>.
1:    *
1:    * @param B A matrix with as many rows as <tt>A</tt> and any number of columns.
1:    * @return <tt>X</tt> that minimizes the two norm of <tt>Q*R*X - B</tt>.
1:    * @throws IllegalArgumentException if <tt>B.rows() != A.rows()</tt>.
1:    */
1:   public Matrix solve(Matrix B) {
1:     if (B.numRows() != originalRows) {
1:       throw new IllegalArgumentException("Matrix row dimensions must agree.");
1:     }
1: 
1:     int columns = B.numCols();
1:     Matrix x = B.like(originalColumns, columns);
1: 
1:     // this can all be done a bit more efficiently if we don't actually
1:     // form explicit versions of Q^T and R but this code isn't soo bad
1:     // and it is much easier to understand
1:     Matrix qt = getQ().transpose();
1:     Matrix y = qt.times(B);
1: 
1:     Matrix r = getR();
1:     for (int k = Math.min(originalColumns, originalRows) - 1; k >= 0; k--) {
1:       // X[k,] = Y[k,] / R[k,k], note that X[k,] starts with 0 so += is same as =
1:       x.viewRow(k).assign(y.viewRow(k), Functions.plusMult(1 / r.get(k, k)));
1: 
1:       // Y[0:(k-1),] -= R[0:(k-1),k] * X[k,]
1:       Vector rColumn = r.viewColumn(k).viewPart(0, k);
1:       for (int c = 0; c < columns; c++) {
1:         y.viewColumn(c).viewPart(0, k).assign(rColumn, Functions.plusMult(-x.get(k, c)));
1:       }
1:     }
1:     return x;
1:   }
1: 
1:   /**
1:    * Returns a rough string rendition of a QR.
1:    */
1:   @Override
1:   public String toString() {
1:     return String.format(Locale.ENGLISH, "QR(%d,%d,fullRank=%s)", originalColumns, originalRows, hasFullRank());
1:   }
1: }
============================================================================