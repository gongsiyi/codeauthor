1:4fbfbc6: /*
1:2e4d306:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2e4d306:  * contributor license agreements.  See the NOTICE file distributed with
1:2e4d306:  * this work for additional information regarding copyright ownership.
1:2e4d306:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2e4d306:  * (the "License"); you may not use this file except in compliance with
1:2e4d306:  * the License.  You may obtain a copy of the License at
3:2e4d306:  *
1:2e4d306:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e4d306:  *
1:2e4d306:  * Unless required by applicable law or agreed to in writing, software
1:2e4d306:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e4d306:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e4d306:  * See the License for the specific language governing permissions and
1:2e4d306:  * limitations under the License.
1:2e4d306:  */
2:2e4d306: 
1:4fbfbc6: package org.apache.mahout.utils.regex;
1:2e4d306: 
1:4fbfbc6: import java.util.Collection;
1:4fbfbc6: import java.util.regex.Matcher;
1:4fbfbc6: import java.util.regex.Pattern;
1:4fbfbc6: 
1:4fbfbc6: public final class RegexUtils {
1:4fbfbc6: 
1:2e4d306:   public static final RegexTransformer IDENTITY_TRANSFORMER = new IdentityTransformer();
1:2e4d306:   public static final RegexFormatter IDENTITY_FORMATTER = new IdentityFormatter();
1:2e4d306: 
1:4fbfbc6:   private RegexUtils() {
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public static String extract(CharSequence line, Pattern pattern, Collection<Integer> groupsToKeep,
1:2e4d306:                                String separator, RegexTransformer transformer) {
1:2e4d306:     StringBuilder bldr = new StringBuilder();
1:2e4d306:     extract(line, bldr, pattern, groupsToKeep, separator, transformer);
1:2e4d306:     return bldr.toString();
3:2e4d306:   }
1:2e4d306: 
1:4fbfbc6:   public static void extract(CharSequence line, StringBuilder outputBuffer,
1:4fbfbc6:                              Pattern pattern, Collection<Integer> groupsToKeep, String separator,
1:2e4d306:                              RegexTransformer transformer) {
1:2e4d306:     if (transformer == null) {
1:2e4d306:       transformer = IDENTITY_TRANSFORMER;
1:2e4d306:     }
1:2e4d306:     Matcher matcher = pattern.matcher(line);
1:2e4d306:     String match;
1:4fbfbc6:     if (groupsToKeep.isEmpty()) {
1:4fbfbc6:       while (matcher.find()) {
1:4fbfbc6:         match = matcher.group();
1:4fbfbc6:         if (match != null) {
1:4fbfbc6:           outputBuffer.append(transformer.transformMatch(match)).append(separator);
1:4fbfbc6:         }
1:4fbfbc6:       }
1:4fbfbc6:     } else {
1:4fbfbc6:       while (matcher.find()) {
1:2e4d306:         for (Integer groupNum : groupsToKeep) {
1:2e4d306:           match = matcher.group(groupNum);
2:2e4d306:           if (match != null) {
2:2e4d306:             outputBuffer.append(transformer.transformMatch(match)).append(separator);
1:2e4d306:           }
1:2e4d306:         }
1:2e4d306:       }
1:2e4d306:     }
1:2e4d306:     //trim off the last separator, which is always there
1:2e4d306:     if (outputBuffer.length() > 0) {
1:2e4d306:       outputBuffer.setLength(outputBuffer.length() - separator.length());
1:2e4d306:     }
1:2e4d306:   }
1:2e4d306: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.regex;
1: import java.util.Collection;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: public final class RegexUtils {
1: 
1:   private RegexUtils() {
1:   }
1: 
1:   public static String extract(CharSequence line, Pattern pattern, Collection<Integer> groupsToKeep,
1:   public static void extract(CharSequence line, StringBuilder outputBuffer,
1:                              Pattern pattern, Collection<Integer> groupsToKeep, String separator,
1:     if (groupsToKeep.isEmpty()) {
1:       while (matcher.find()) {
1:         match = matcher.group();
1:         if (match != null) {
1:           outputBuffer.append(transformer.transformMatch(match)).append(separator);
1:         }
1:       }
1:     } else {
1:       while (matcher.find()) {
/////////////////////////////////////////////////////////////////////////
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:2e4d306
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.regex;
1: 
0: import java.util.List;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
0: /**
1:  *
1:  *
0:  **/
0: public class RegexUtils {
1:   public static final RegexTransformer IDENTITY_TRANSFORMER = new IdentityTransformer();
1:   public static final RegexFormatter IDENTITY_FORMATTER = new IdentityFormatter();
1: 
0:   public static String extract(String line, Pattern pattern, List<Integer> groupsToKeep,
1:                                String separator, RegexTransformer transformer) {
1:     StringBuilder bldr = new StringBuilder();
1:     extract(line, bldr, pattern, groupsToKeep, separator, transformer);
1:     return bldr.toString();
1:   }
1: 
0:   public static void extract(String line, StringBuilder outputBuffer,
0:                              Pattern pattern, List<Integer> groupsToKeep, String separator,
1:                              RegexTransformer transformer) {
1:     if (transformer == null) {
1:       transformer = IDENTITY_TRANSFORMER;
1:     }
1:     Matcher matcher = pattern.matcher(line);
1:     String match;
0:     if (groupsToKeep.isEmpty() == false) {
0:       while (matcher.find() == true) {
1:         for (Integer groupNum : groupsToKeep) {
1:           match = matcher.group(groupNum);
1:           if (match != null) {
1:             outputBuffer.append(transformer.transformMatch(match)).append(separator);
1:           }
1:         }
1:       }
0:     } else {
0:       while (matcher.find() == true) {
0:         match = matcher.group();
1:         if (match != null) {
1:           outputBuffer.append(transformer.transformMatch(match)).append(separator);
1:         }
1:       }
1:     }
1:     //trim off the last separator, which is always there
1:     if (outputBuffer.length() > 0) {
1:       outputBuffer.setLength(outputBuffer.length() - separator.length());
1:     }
1:   }
1: }
============================================================================