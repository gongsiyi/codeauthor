2:7892be3: /**
1:7892be3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7892be3:  * contributor license agreements.  See the NOTICE file distributed with
1:7892be3:  * this work for additional information regarding copyright ownership.
1:7892be3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7892be3:  * (the "License"); you may not use this file except in compliance with
1:7892be3:  * the License.  You may obtain a copy of the License at
2:7892be3:  *
1:7892be3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7892be3:  *
1:7892be3:  * Unless required by applicable law or agreed to in writing, software
1:7892be3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7892be3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7892be3:  * See the License for the specific language governing permissions and
1:7892be3:  * limitations under the License.
2:7892be3:  */
1:7892be3: 
1:7892be3: package org.apache.mahout.cf.taste.impl.recommender.svd;
1:7892be3: 
1:7892be3: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:7892be3: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:7892be3: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
1:7892be3: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:7892be3: import org.apache.mahout.cf.taste.impl.common.RunningAverage;
1:7892be3: import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
1:7892be3: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1:7892be3: import org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;
1:7892be3: import org.apache.mahout.cf.taste.model.DataModel;
1:7892be3: import org.apache.mahout.cf.taste.model.Preference;
1:7892be3: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:7892be3: import org.apache.mahout.math.DenseVector;
1:74f9303: import org.apache.mahout.math.Matrix;
1:74f9303: import org.apache.mahout.math.MatrixSlice;
1:74f9303: import org.apache.mahout.math.SparseRowMatrix;
1:7892be3: import org.apache.mahout.math.Vector;
1:7892be3: import org.junit.Before;
1:7892be3: import org.junit.Test;
1:74f9303: import org.slf4j.Logger;
1:74f9303: import org.slf4j.LoggerFactory;
1:7892be3: 
1:c88c240: import com.carrotsearch.randomizedtesting.annotations.ThreadLeakLingering;
1:c88c240: 
1:7892be3: import java.util.Arrays;
1:74f9303: import java.util.Iterator;
1:7892be3: 
1:7892be3: public class ALSWRFactorizerTest extends TasteTestCase {
1:7892be3: 
1:b16c260:   private ALSWRFactorizer factorizer;
1:b16c260:   private DataModel dataModel;
1:7892be3: 
1:74f9303:   private static final Logger log = LoggerFactory.getLogger(ALSWRFactorizerTest.class);
1:74f9303: 
1:74f9303:       /**
1:74f9303:        *  rating-matrix
1:74f9303:        *
1:74f9303:        *          burger  hotdog  berries  icecream
1:74f9303:        *  dog       5       5        2        -
1:74f9303:        *  rabbit    2       -        3        5
1:74f9303:        *  cow       -       5        -        3
1:74f9303:        *  donkey    3       -        -        5
1:74f9303:        */
1:74f9303: 
1:7892be3:   @Override
1:7892be3:   @Before
1:7892be3:   public void setUp() throws Exception {
1:7892be3:     super.setUp();
1:02ff22f:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
1:7892be3: 
1:208aa07:     userData.put(1L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1L, 1L, 5.0f),
1:208aa07:                                                                   new GenericPreference(1L, 2L, 5.0f),
1:208aa07:                                                                   new GenericPreference(1L, 3L, 2.0f))));
1:7892be3: 
1:208aa07:     userData.put(2L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2L, 1L, 2.0f),
1:208aa07:                                                                   new GenericPreference(2L, 3L, 3.0f),
1:208aa07:                                                                   new GenericPreference(2L, 4L, 5.0f))));
1:7892be3: 
1:208aa07:     userData.put(3L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(3L, 2L, 5.0f),
1:208aa07:                                                                   new GenericPreference(3L, 4L, 3.0f))));
1:7892be3: 
1:208aa07:     userData.put(4L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(4L, 1L, 3.0f),
1:208aa07:                                                                   new GenericPreference(4L, 4L, 5.0f))));
1:7892be3: 
1:7892be3:     dataModel = new GenericDataModel(userData);
1:7892be3:     factorizer = new ALSWRFactorizer(dataModel, 3, 0.065, 10);
1:7892be3:   }
1:7892be3: 
1:7892be3:   @Test
1:7892be3:   public void setFeatureColumn() throws Exception {
1:37d9cca:     ALSWRFactorizer.Features features = new ALSWRFactorizer.Features(factorizer);
1:7892be3:     Vector vector = new DenseVector(new double[] { 0.5, 2.0, 1.5 });
1:7892be3:     int index = 1;
1:7892be3: 
1:37d9cca:     features.setFeatureColumnInM(index, vector);
1:37d9cca:     double[][] matrix = features.getM();
1:7892be3: 
1:7892be3:     assertEquals(vector.get(0), matrix[index][0], EPSILON);
1:7892be3:     assertEquals(vector.get(1), matrix[index][1], EPSILON);
1:7892be3:     assertEquals(vector.get(2), matrix[index][2], EPSILON);
1:7892be3:   }
1:7892be3: 
1:7892be3:   @Test
1:7892be3:   public void ratingVector() throws Exception {
1:7892be3:     PreferenceArray prefs = dataModel.getPreferencesFromUser(1);
1:7892be3: 
1:229aeff:     Vector ratingVector = ALSWRFactorizer.ratingVector(prefs);
1:7892be3: 
1:7892be3:     assertEquals(prefs.length(), ratingVector.getNumNondefaultElements());
1:7892be3:     assertEquals(prefs.get(0).getValue(), ratingVector.get(0), EPSILON);
1:7892be3:     assertEquals(prefs.get(1).getValue(), ratingVector.get(1), EPSILON);
1:7892be3:     assertEquals(prefs.get(2).getValue(), ratingVector.get(2), EPSILON);
1:7892be3:   }
1:7892be3: 
1:7892be3:   @Test
1:7892be3:   public void averageRating() throws Exception {
1:37d9cca:     ALSWRFactorizer.Features features = new ALSWRFactorizer.Features(factorizer);
1:b16c260:     assertEquals(2.5, features.averateRating(3L), EPSILON);
1:7892be3:   }
1:7892be3: 
1:7892be3:   @Test
1:7892be3:   public void initializeM() throws Exception {
1:37d9cca:     ALSWRFactorizer.Features features = new ALSWRFactorizer.Features(factorizer);
1:37d9cca:     double[][] M = features.getM();
1:7892be3: 
1:7892be3:     assertEquals(3.333333333, M[0][0], EPSILON);
1:7892be3:     assertEquals(5, M[1][0], EPSILON);
1:7892be3:     assertEquals(2.5, M[2][0], EPSILON);
1:7892be3:     assertEquals(4.333333333, M[3][0], EPSILON);
1:7892be3: 
1:7892be3:     for (int itemIndex = 0; itemIndex < dataModel.getNumItems(); itemIndex++) {
1:7892be3:       for (int feature = 1; feature < 3; feature++ ) {
1:7892be3:         assertTrue(M[itemIndex][feature] >= 0);
1:7892be3:         assertTrue(M[itemIndex][feature] <= 0.1);
1:7892be3:       }
1:7892be3:     }
1:7892be3:   }
1:7892be3: 
1:c88c240:   @ThreadLeakLingering(linger = 10)
1:7892be3:   @Test
1:7892be3:   public void toyExample() throws Exception {
1:7892be3: 
1:7892be3:     SVDRecommender svdRecommender = new SVDRecommender(dataModel, factorizer);
1:7892be3: 
1:7892be3:    /* a hold out test would be better, but this is just a toy example so we only check that the
1:7892be3:     * factorization is close to the original matrix */
1:7892be3:     RunningAverage avg = new FullRunningAverage();
1:7892be3:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:7892be3:     while (userIDs.hasNext()) {
1:7892be3:       long userID = userIDs.nextLong();
1:7892be3:       for (Preference pref : dataModel.getPreferencesFromUser(userID)) {
1:7892be3:         double rating = pref.getValue();
1:7892be3:         double estimate = svdRecommender.estimatePreference(userID, pref.getItemID());
1:7892be3:         double err = rating - estimate;
1:7892be3:         avg.addDatum(err * err);
1:7892be3:       }
1:7892be3:     }
1:7892be3: 
1:7892be3:     double rmse = Math.sqrt(avg.getAverage());
1:208aa07:     assertTrue(rmse < 0.2);
1:7892be3:   }
1:74f9303: 
1:74f9303:   @Test
1:74f9303:   public void toyExampleImplicit() throws Exception {
1:74f9303: 
1:74f9303:     Matrix observations = new SparseRowMatrix(4, 4, new Vector[] {
1:74f9303:         new DenseVector(new double[] { 5.0, 5.0, 2.0, 0 }),
1:74f9303:         new DenseVector(new double[] { 2.0, 0,   3.0, 5.0 }),
1:74f9303:         new DenseVector(new double[] { 0,   5.0, 0,   3.0 }),
1:74f9303:         new DenseVector(new double[] { 3.0, 0,   0,   5.0 }) });
1:74f9303: 
1:74f9303:     Matrix preferences = new SparseRowMatrix(4, 4, new Vector[] {
1:74f9303:         new DenseVector(new double[] { 1.0, 1.0, 1.0, 0 }),
1:74f9303:         new DenseVector(new double[] { 1.0, 0,   1.0, 1.0 }),
1:74f9303:         new DenseVector(new double[] { 0,   1.0, 0,   1.0 }),
1:74f9303:         new DenseVector(new double[] { 1.0, 0,   0,   1.0 }) });
1:74f9303: 
1:74f9303:     double alpha = 20;
1:74f9303: 
1:74f9303:     ALSWRFactorizer factorizer = new ALSWRFactorizer(dataModel, 3, 0.065, 5, true, alpha);
1:74f9303: 
1:74f9303:     SVDRecommender svdRecommender = new SVDRecommender(dataModel, factorizer);
1:74f9303: 
1:74f9303:     RunningAverage avg = new FullRunningAverage();
1:74f9303:     Iterator<MatrixSlice> sliceIterator = preferences.iterateAll();
1:74f9303:     while (sliceIterator.hasNext()) {
1:74f9303:       MatrixSlice slice = sliceIterator.next();
1:dc62944:       for (Vector.Element e : slice.vector().all()) {
1:74f9303: 
1:74f9303:         long userID = slice.index() + 1;
1:74f9303:         long itemID = e.index() + 1;
1:74f9303: 
1:74f9303:         if (!Double.isNaN(e.get())) {
1:74f9303:           double pref = e.get();
1:74f9303:           double estimate = svdRecommender.estimatePreference(userID, itemID);
1:74f9303: 
1:74f9303:           double confidence = 1 + alpha * observations.getQuick(slice.index(), e.index());
1:74f9303:           double err = confidence * (pref - estimate) * (pref - estimate);
1:74f9303:           avg.addDatum(err);
1:74f9303:           log.info("Comparing preference of user [{}] towards item [{}], was [{}] with confidence [{}] "
1:8396a27:               + "estimate is [{}]", slice.index(), e.index(), pref, confidence, estimate);
1:74f9303:         }
1:74f9303:       }
1:74f9303:     }
1:74f9303:     double rmse = Math.sqrt(avg.getAverage());
1:74f9303:     log.info("RMSE: {}", rmse);
1:74f9303: 
1:74f9303:     assertTrue(rmse < 0.4);
1:74f9303:   }
1:7892be3: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:c88c240
/////////////////////////////////////////////////////////////////////////
1: import com.carrotsearch.randomizedtesting.annotations.ThreadLeakLingering;
1: 
/////////////////////////////////////////////////////////////////////////
1:   @ThreadLeakLingering(linger = 10)
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1:       for (Vector.Element e : slice.vector().all()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1:               + "estimate is [{}]", slice.index(), e.index(), pref, confidence, estimate);
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:     Vector ratingVector = ALSWRFactorizer.ratingVector(prefs);
commit:208aa07
/////////////////////////////////////////////////////////////////////////
1:     userData.put(1L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1L, 1L, 5.0f),
1:                                                                   new GenericPreference(1L, 2L, 5.0f),
1:                                                                   new GenericPreference(1L, 3L, 2.0f))));
1:     userData.put(2L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2L, 1L, 2.0f),
1:                                                                   new GenericPreference(2L, 3L, 3.0f),
1:                                                                   new GenericPreference(2L, 4L, 5.0f))));
1:     userData.put(3L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(3L, 2L, 5.0f),
1:                                                                   new GenericPreference(3L, 4L, 3.0f))));
1:     userData.put(4L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(4L, 1L, 3.0f),
1:                                                                   new GenericPreference(4L, 4L, 5.0f))));
/////////////////////////////////////////////////////////////////////////
1:     assertTrue(rmse < 0.2);
commit:b16c260
/////////////////////////////////////////////////////////////////////////
1:   private ALSWRFactorizer factorizer;
1:   private DataModel dataModel;
/////////////////////////////////////////////////////////////////////////
0:     userData.put(1L, new GenericUserPreferenceArray(Arrays.asList(new Preference[] {
0:         new GenericPreference(1L, 1L, 5.0f),
0:         new GenericPreference(1L, 2L, 5.0f),
0:         new GenericPreference(1L, 3L, 2.0f) })));
0:     userData.put(2L, new GenericUserPreferenceArray(Arrays.asList(new Preference[] {
0:         new GenericPreference(2L, 1L, 2.0f),
0:         new GenericPreference(2L, 3L, 3.0f),
0:         new GenericPreference(2L, 4L, 5.0f) })));
0:     userData.put(3L, new GenericUserPreferenceArray(Arrays.asList(new Preference[] {
0:         new GenericPreference(3L, 2L, 5.0f),
0:         new GenericPreference(3L, 4L, 3.0f) })));
0:     userData.put(4L, new GenericUserPreferenceArray(Arrays.asList(new Preference[] {
0:         new GenericPreference(4L, 1L, 3.0f),
0:         new GenericPreference(4L, 4L, 5.0f) })));
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(2.5, features.averateRating(3L), EPSILON);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f9303
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.MatrixSlice;
1: import org.apache.mahout.math.SparseRowMatrix;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import java.util.Iterator;
1:   private static final Logger log = LoggerFactory.getLogger(ALSWRFactorizerTest.class);
1: 
1:       /**
1:        *  rating-matrix
1:        *
1:        *          burger  hotdog  berries  icecream
1:        *  dog       5       5        2        -
1:        *  rabbit    2       -        3        5
1:        *  cow       -       5        -        3
1:        *  donkey    3       -        -        5
1:        */
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test
1:   public void toyExampleImplicit() throws Exception {
1: 
1:     Matrix observations = new SparseRowMatrix(4, 4, new Vector[] {
1:         new DenseVector(new double[] { 5.0, 5.0, 2.0, 0 }),
1:         new DenseVector(new double[] { 2.0, 0,   3.0, 5.0 }),
1:         new DenseVector(new double[] { 0,   5.0, 0,   3.0 }),
1:         new DenseVector(new double[] { 3.0, 0,   0,   5.0 }) });
1: 
1:     Matrix preferences = new SparseRowMatrix(4, 4, new Vector[] {
1:         new DenseVector(new double[] { 1.0, 1.0, 1.0, 0 }),
1:         new DenseVector(new double[] { 1.0, 0,   1.0, 1.0 }),
1:         new DenseVector(new double[] { 0,   1.0, 0,   1.0 }),
1:         new DenseVector(new double[] { 1.0, 0,   0,   1.0 }) });
1: 
1:     double alpha = 20;
1: 
1:     ALSWRFactorizer factorizer = new ALSWRFactorizer(dataModel, 3, 0.065, 5, true, alpha);
1: 
1:     SVDRecommender svdRecommender = new SVDRecommender(dataModel, factorizer);
1: 
1:     RunningAverage avg = new FullRunningAverage();
1:     Iterator<MatrixSlice> sliceIterator = preferences.iterateAll();
1:     while (sliceIterator.hasNext()) {
1:       MatrixSlice slice = sliceIterator.next();
0:       for (Vector.Element e : slice.vector()) {
1: 
1:         long userID = slice.index() + 1;
1:         long itemID = e.index() + 1;
1: 
1:         if (!Double.isNaN(e.get())) {
1:           double pref = e.get();
1:           double estimate = svdRecommender.estimatePreference(userID, itemID);
1: 
1:           double confidence = 1 + alpha * observations.getQuick(slice.index(), e.index());
1:           double err = confidence * (pref - estimate) * (pref - estimate);
1:           avg.addDatum(err);
1:           log.info("Comparing preference of user [{}] towards item [{}], was [{}] with confidence [{}] "
0:               + "estimate is [{}]", new Object[] { slice.index(), e.index(), pref, confidence, estimate });
1:         }
1:       }
1:     }
1:     double rmse = Math.sqrt(avg.getAverage());
1:     log.info("RMSE: {}", rmse);
1: 
1:     assertTrue(rmse < 0.4);
1:   }
commit:37d9cca
/////////////////////////////////////////////////////////////////////////
1:     ALSWRFactorizer.Features features = new ALSWRFactorizer.Features(factorizer);
1:     features.setFeatureColumnInM(index, vector);
1:     double[][] matrix = features.getM();
/////////////////////////////////////////////////////////////////////////
1:     ALSWRFactorizer.Features features = new ALSWRFactorizer.Features(factorizer);
0:     assertEquals(2.5, features.averateRating(3l), EPSILON);
1:     ALSWRFactorizer.Features features = new ALSWRFactorizer.Features(factorizer);
1:     double[][] M = features.getM();
commit:7892be3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender.svd;
1: 
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.impl.common.RunningAverage;
1: import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
1: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1: import org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.Preference;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.util.Arrays;
1: 
1: public class ALSWRFactorizerTest extends TasteTestCase {
1: 
0:   ALSWRFactorizer factorizer;
0:   DataModel dataModel;
1: 
1:   /**
0:    *  rating-matrix
1:    *
0:    *          burger  hotdog  berries  icecream
0:    *  dog       5       5        2        -
0:    *  rabbit    2       -        3        5
0:    *  cow       -       5        -        3
0:    *  donkey    3       -        -        5
1:    */
1:   @Override
1:   @Before
1:   public void setUp() throws Exception {
1:     super.setUp();
0:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<PreferenceArray>();
1: 
0:     userData.put(1l, new GenericUserPreferenceArray(Arrays.asList(new Preference[] {
0:         new GenericPreference(1l, 1l, 5f),
0:         new GenericPreference(1l, 2l, 5f),
0:         new GenericPreference(1l, 3l, 2f) })));
1: 
0:     userData.put(2l, new GenericUserPreferenceArray(Arrays.asList(new Preference[] {
0:         new GenericPreference(2l, 1l, 2f),
0:         new GenericPreference(2l, 3l, 3f),
0:         new GenericPreference(2l, 4l, 5f) })));
1: 
0:     userData.put(3l, new GenericUserPreferenceArray(Arrays.asList(new Preference[] {
0:         new GenericPreference(3l, 2l, 5f),
0:         new GenericPreference(3l, 4l, 3f) })));
1: 
0:     userData.put(4l, new GenericUserPreferenceArray(Arrays.asList(new Preference[] {
0:         new GenericPreference(4l, 1l, 3f),
0:         new GenericPreference(4l, 4l, 5f) })));
1: 
1:     dataModel = new GenericDataModel(userData);
1:     factorizer = new ALSWRFactorizer(dataModel, 3, 0.065, 10);
1:   }
1: 
1:   @Test
1:   public void setFeatureColumn() throws Exception {
0:     double[][] matrix = new double[3][3];
1:     Vector vector = new DenseVector(new double[] { 0.5, 2.0, 1.5 });
1:     int index = 1;
1: 
0:     factorizer.setFeatureColumn(matrix, index, vector);
1: 
1:     assertEquals(vector.get(0), matrix[index][0], EPSILON);
1:     assertEquals(vector.get(1), matrix[index][1], EPSILON);
1:     assertEquals(vector.get(2), matrix[index][2], EPSILON);
1:   }
1: 
1:   @Test
1:   public void ratingVector() throws Exception {
1:     PreferenceArray prefs = dataModel.getPreferencesFromUser(1);
1: 
0:     Vector ratingVector = factorizer.ratingVector(prefs);
1: 
1:     assertEquals(prefs.length(), ratingVector.getNumNondefaultElements());
1:     assertEquals(prefs.get(0).getValue(), ratingVector.get(0), EPSILON);
1:     assertEquals(prefs.get(1).getValue(), ratingVector.get(1), EPSILON);
1:     assertEquals(prefs.get(2).getValue(), ratingVector.get(2), EPSILON);
1:   }
1: 
1:   @Test
1:   public void averageRating() throws Exception {
0:     assertEquals(2.5, factorizer.averateRating(3l), EPSILON);
1:   }
1: 
1:   @Test
1:   public void initializeM() throws Exception {
0:     double[][] M = factorizer.initializeM();
1: 
1:     assertEquals(3.333333333, M[0][0], EPSILON);
1:     assertEquals(5, M[1][0], EPSILON);
1:     assertEquals(2.5, M[2][0], EPSILON);
1:     assertEquals(4.333333333, M[3][0], EPSILON);
1: 
1:     for (int itemIndex = 0; itemIndex < dataModel.getNumItems(); itemIndex++) {
1:       for (int feature = 1; feature < 3; feature++ ) {
1:         assertTrue(M[itemIndex][feature] >= 0);
1:         assertTrue(M[itemIndex][feature] <= 0.1);
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void toyExample() throws Exception {
1: 
1:     SVDRecommender svdRecommender = new SVDRecommender(dataModel, factorizer);
1: 
1:    /* a hold out test would be better, but this is just a toy example so we only check that the
1:     * factorization is close to the original matrix */
1:     RunningAverage avg = new FullRunningAverage();
1:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:     while (userIDs.hasNext()) {
1:       long userID = userIDs.nextLong();
1:       for (Preference pref : dataModel.getPreferencesFromUser(userID)) {
1:         double rating = pref.getValue();
1:         double estimate = svdRecommender.estimatePreference(userID, pref.getItemID());
1:         double err = rating - estimate;
1:         avg.addDatum(err * err);
1:       }
1:     }
1: 
1:     double rmse = Math.sqrt(avg.getAverage());
0:     assertTrue(rmse < 0.2d);
1:   }
1: }
============================================================================