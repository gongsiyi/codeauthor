2:efa490c: /**
1:efa490c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:efa490c:  * contributor license agreements.  See the NOTICE file distributed with
1:efa490c:  * this work for additional information regarding copyright ownership.
1:efa490c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:efa490c:  * (the "License"); you may not use this file except in compliance with
1:efa490c:  * the License.  You may obtain a copy of the License at
3:efa490c:  *
1:efa490c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:efa490c:  *
1:efa490c:  * Unless required by applicable law or agreed to in writing, software
1:efa490c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:efa490c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:efa490c:  * See the License for the specific language governing permissions and
1:efa490c:  * limitations under the License.
1:efa490c:  */
4:efa490c: 
1:1499411: package org.apache.mahout.math.hadoop.similarity;
1:efa490c: 
1:9dba3cc: import com.google.common.collect.Iterables;
1:efa490c: import com.google.common.collect.Lists;
1:efa490c: import org.apache.hadoop.conf.Configuration;
1:efa490c: import org.apache.hadoop.fs.FileSystem;
1:efa490c: import org.apache.hadoop.fs.Path;
1:efa490c: import org.apache.hadoop.io.DoubleWritable;
1:efa490c: import org.apache.hadoop.io.IntWritable;
1:e55ec3c: import org.apache.hadoop.io.Text;
1:efa490c: import org.apache.hadoop.io.WritableComparable;
1:efa490c: import org.apache.hadoop.mapreduce.Mapper;
1:efa490c: import org.apache.hadoop.util.ToolRunner;
1:efa490c: import org.apache.mahout.clustering.ClusteringTestUtils;
1:e55ec3c: import org.apache.mahout.common.DummyOutputCollector;
1:efa490c: import org.apache.mahout.common.MahoutTestCase;
1:e55ec3c: import org.apache.mahout.common.Pair;
1:efa490c: import org.apache.mahout.common.StringTuple;
1:efa490c: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1:efa490c: import org.apache.mahout.common.distance.EuclideanDistanceMeasure;
1:e55ec3c: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
1:e55ec3c: import org.apache.mahout.math.DenseVector;
1:efa490c: import org.apache.mahout.math.NamedVector;
1:efa490c: import org.apache.mahout.math.RandomAccessSparseVector;
1:efa490c: import org.apache.mahout.math.Vector;
1:efa490c: import org.apache.mahout.math.VectorWritable;
1:efa490c: import org.easymock.EasyMock;
1:efa490c: import org.junit.Before;
1:efa490c: import org.junit.Test;
1:efa490c: 
1:1499411: import java.util.Collection;
1:efa490c: import java.util.List;
1:e55ec3c: import java.util.Map;
1:efa490c: 
1:efa490c: public class TestVectorDistanceSimilarityJob extends MahoutTestCase {
1:9dba3cc: 
1:efa490c:   private FileSystem fs;
1:efa490c: 
1:9dba3cc:   private static final double[][] REFERENCE = { { 1, 1 }, { 2, 1 }, { 1, 2 }, { 2, 2 }, { 3, 3 }, { 4, 4 }, { 5, 4 },
1:9dba3cc:       { 4, 5 }, { 5, 5 } };
1:9dba3cc: 
1:9dba3cc:   private static final double[][] SEEDS = { { 1, 1 }, { 10, 10 } };
1:9dba3cc: 
1:efa490c:   @Override
1:efa490c:   @Before
1:efa490c:   public void setUp() throws Exception {
1:efa490c:     super.setUp();
1:e3ec9d8:     fs = FileSystem.get(getConfiguration());
1:efa490c:   }
1:efa490c: 
1:e55ec3c:   @Test
1:efa490c:   public void testVectorDistanceMapper() throws Exception {
1:efa490c:     Mapper<WritableComparable<?>, VectorWritable, StringTuple, DoubleWritable>.Context context =
1:efa490c:             EasyMock.createMock(Mapper.Context.class);
1:1499411:     StringTuple tuple = new StringTuple();
1:efa490c:     tuple.add("foo");
1:efa490c:     tuple.add("123");
1:efa490c:     context.write(tuple, new DoubleWritable(Math.sqrt(2.0)));
2:efa490c:     tuple = new StringTuple();
1:efa490c:     tuple.add("foo2");
1:efa490c:     tuple.add("123");
1:efa490c:     context.write(tuple, new DoubleWritable(1));
1:efa490c: 
1:efa490c:     EasyMock.replay(context);
1:efa490c: 
1:efa490c:     Vector vector = new RandomAccessSparseVector(2);
1:efa490c:     vector.set(0, 2);
1:efa490c:     vector.set(1, 2);
1:e55ec3c: 
1:efa490c:     VectorDistanceMapper mapper = new VectorDistanceMapper();
1:efa490c:     setField(mapper, "measure", new EuclideanDistanceMeasure());
1:210b265:     Collection<NamedVector> seedVectors = Lists.newArrayList();
1:efa490c:     Vector seed1 = new RandomAccessSparseVector(2);
1:efa490c:     seed1.set(0, 1);
1:efa490c:     seed1.set(1, 1);
1:efa490c:     Vector seed2 = new RandomAccessSparseVector(2);
1:efa490c:     seed2.set(0, 2);
1:efa490c:     seed2.set(1, 1);
1:efa490c: 
1:efa490c:     seedVectors.add(new NamedVector(seed1, "foo"));
1:efa490c:     seedVectors.add(new NamedVector(seed2, "foo2"));
1:efa490c:     setField(mapper, "seedVectors", seedVectors);
1:efa490c: 
1:efa490c:     mapper.map(new IntWritable(123), new VectorWritable(vector), context);
1:efa490c: 
1:efa490c:     EasyMock.verify(context);
1:efa490c:   }
1:efa490c: 
1:efa490c:   @Test
1:e55ec3c:   public void testVectorDistanceInvertedMapper() throws Exception {
1:e55ec3c:      Mapper<WritableComparable<?>, VectorWritable, Text, VectorWritable>.Context context =
1:e55ec3c:             EasyMock.createMock(Mapper.Context.class);
1:e55ec3c:     Vector expectVec = new DenseVector(new double[]{Math.sqrt(2.0), 1.0});
1:e55ec3c:     context.write(new Text("other"), new VectorWritable(expectVec));
1:e55ec3c:     EasyMock.replay(context);
1:e55ec3c:     Vector vector = new NamedVector(new RandomAccessSparseVector(2), "other");
1:e55ec3c:     vector.set(0, 2);
1:e55ec3c:     vector.set(1, 2);
1:e55ec3c: 
1:e55ec3c:     VectorDistanceInvertedMapper mapper = new VectorDistanceInvertedMapper();
1:e55ec3c:     setField(mapper, "measure", new EuclideanDistanceMeasure());
1:210b265:     Collection<NamedVector> seedVectors = Lists.newArrayList();
1:e55ec3c:     Vector seed1 = new RandomAccessSparseVector(2);
1:e55ec3c:     seed1.set(0, 1);
1:e55ec3c:     seed1.set(1, 1);
1:e55ec3c:     Vector seed2 = new RandomAccessSparseVector(2);
1:e55ec3c:     seed2.set(0, 2);
1:e55ec3c:     seed2.set(1, 1);
1:e55ec3c: 
1:e55ec3c:     seedVectors.add(new NamedVector(seed1, "foo"));
1:e55ec3c:     seedVectors.add(new NamedVector(seed2, "foo2"));
1:e55ec3c:     setField(mapper, "seedVectors", seedVectors);
1:e55ec3c: 
1:e55ec3c:     mapper.map(new IntWritable(123), new VectorWritable(vector), context);
1:e55ec3c: 
1:e55ec3c:     EasyMock.verify(context);
1:e55ec3c: 
1:e55ec3c:   }
1:efa490c: 
1:efa490c:   @Test
1:efa490c:   public void testRun() throws Exception {
1:efa490c:     Path input = getTestTempDirPath("input");
1:efa490c:     Path output = getTestTempDirPath("output");
1:efa490c:     Path seedsPath = getTestTempDirPath("seeds");
1:9dba3cc: 
1:efa490c:     List<VectorWritable> points = getPointsWritable(REFERENCE);
1:efa490c:     List<VectorWritable> seeds = getPointsWritable(SEEDS);
1:9dba3cc: 
1:921e201:     Configuration conf = getConfiguration();
1:efa490c:     ClusteringTestUtils.writePointsToFile(points, true, new Path(input, "file1"), fs, conf);
1:efa490c:     ClusteringTestUtils.writePointsToFile(seeds, true, new Path(seedsPath, "part-seeds"), fs, conf);
1:9dba3cc: 
1:9dba3cc:     String[] args = { optKey(DefaultOptionCreator.INPUT_OPTION), input.toString(),
1:9dba3cc:         optKey(VectorDistanceSimilarityJob.SEEDS), seedsPath.toString(), optKey(DefaultOptionCreator.OUTPUT_OPTION),
1:9dba3cc:         output.toString(), optKey(DefaultOptionCreator.DISTANCE_MEASURE_OPTION),
1:9dba3cc:         EuclideanDistanceMeasure.class.getName() };
1:9dba3cc: 
1:e3ec9d8:     ToolRunner.run(getConfiguration(), new VectorDistanceSimilarityJob(), args);
1:9dba3cc: 
1:9dba3cc:     int expectedOutputSize = SEEDS.length * REFERENCE.length;
1:9dba3cc:     int outputSize = Iterables.size(new SequenceFileIterable<StringTuple, DoubleWritable>(new Path(output,
1:9dba3cc:         "part-m-00000"), conf));
1:9dba3cc:     assertEquals(expectedOutputSize, outputSize);
1:9dba3cc:   }
1:9dba3cc: 
1:9dba3cc:   @Test
1:9dba3cc:   public void testMaxDistance() throws Exception {
1:9dba3cc: 
1:9dba3cc:     Path input = getTestTempDirPath("input");
1:9dba3cc:     Path output = getTestTempDirPath("output");
1:9dba3cc:     Path seedsPath = getTestTempDirPath("seeds");
1:9dba3cc: 
1:9dba3cc:     List<VectorWritable> points = getPointsWritable(REFERENCE);
1:9dba3cc:     List<VectorWritable> seeds = getPointsWritable(SEEDS);
1:9dba3cc: 
1:e3ec9d8:     Configuration conf = getConfiguration();
1:9dba3cc:     ClusteringTestUtils.writePointsToFile(points, true, new Path(input, "file1"), fs, conf);
1:9dba3cc:     ClusteringTestUtils.writePointsToFile(seeds, true, new Path(seedsPath, "part-seeds"), fs, conf);
1:9dba3cc: 
1:9dba3cc:     double maxDistance = 10;
1:9dba3cc: 
1:9dba3cc:     String[] args = { optKey(DefaultOptionCreator.INPUT_OPTION), input.toString(),
1:9dba3cc:         optKey(VectorDistanceSimilarityJob.SEEDS), seedsPath.toString(), optKey(DefaultOptionCreator.OUTPUT_OPTION),
1:9dba3cc:         output.toString(), optKey(DefaultOptionCreator.DISTANCE_MEASURE_OPTION),
1:9dba3cc:         EuclideanDistanceMeasure.class.getName(),
1:9dba3cc:         optKey(VectorDistanceSimilarityJob.MAX_DISTANCE), String.valueOf(maxDistance) };
1:9dba3cc: 
1:e3ec9d8:     ToolRunner.run(getConfiguration(), new VectorDistanceSimilarityJob(), args);
1:9dba3cc: 
1:9dba3cc:     int outputSize = 0;
1:9dba3cc: 
1:9dba3cc:     for (Pair<StringTuple, DoubleWritable> record : new SequenceFileIterable<StringTuple, DoubleWritable>(
1:9dba3cc:         new Path(output, "part-m-00000"), conf)) {
1:9dba3cc:       outputSize++;
1:9dba3cc:       assertTrue(record.getSecond().get() <= maxDistance);
1:e55ec3c:     }
1:9dba3cc: 
1:9dba3cc:     assertEquals(14, outputSize);
1:e55ec3c:   }
1:e55ec3c: 
1:e55ec3c:   @Test
1:e55ec3c:   public void testRunInverted() throws Exception {
1:e55ec3c:     Path input = getTestTempDirPath("input");
1:e55ec3c:     Path output = getTestTempDirPath("output");
1:e55ec3c:     Path seedsPath = getTestTempDirPath("seeds");
1:e55ec3c:     List<VectorWritable> points = getPointsWritable(REFERENCE);
1:e55ec3c:     List<VectorWritable> seeds = getPointsWritable(SEEDS);
1:e3ec9d8:     Configuration conf = getConfiguration();
1:e55ec3c:     ClusteringTestUtils.writePointsToFile(points, true, new Path(input, "file1"), fs, conf);
1:e55ec3c:     ClusteringTestUtils.writePointsToFile(seeds, true, new Path(seedsPath, "part-seeds"), fs, conf);
1:e55ec3c:     String[] args = {optKey(DefaultOptionCreator.INPUT_OPTION), input.toString(),
1:9dba3cc:         optKey(VectorDistanceSimilarityJob.SEEDS), seedsPath.toString(), optKey(DefaultOptionCreator.OUTPUT_OPTION),
1:9dba3cc:         output.toString(), optKey(DefaultOptionCreator.DISTANCE_MEASURE_OPTION),
1:9dba3cc:         EuclideanDistanceMeasure.class.getName(),
1:9dba3cc:         optKey(VectorDistanceSimilarityJob.OUT_TYPE_KEY), "v"
2:e55ec3c:     };
1:e3ec9d8:     ToolRunner.run(getConfiguration(), new VectorDistanceSimilarityJob(), args);
1:9dba3cc: 
1:02ff22f:     DummyOutputCollector<Text, VectorWritable> collector = new DummyOutputCollector<>();
1:e55ec3c: 
1:9dba3cc:     for (Pair<Text, VectorWritable> record :  new SequenceFileIterable<Text, VectorWritable>(
1:9dba3cc:         new Path(output, "part-m-00000"), conf)) {
2:e55ec3c:       collector.collect(record.getFirst(), record.getSecond());
1:e55ec3c:     }
1:e55ec3c:     assertEquals(REFERENCE.length, collector.getData().size());
1:e55ec3c:     for (Map.Entry<Text, List<VectorWritable>> entry : collector.getData().entrySet()) {
1:e55ec3c:       assertEquals(SEEDS.length, entry.getValue().iterator().next().get().size());
1:e55ec3c:     }
1:efa490c:   }
1:efa490c: 
1:10c535c:   private static List<VectorWritable> getPointsWritable(double[][] raw) {
1:efa490c:     List<VectorWritable> points = Lists.newArrayList();
1:efa490c:     for (double[] fr : raw) {
1:efa490c:       Vector vec = new RandomAccessSparseVector(fr.length);
1:efa490c:       vec.assign(fr);
1:efa490c:       points.add(new VectorWritable(vec));
1:efa490c:     }
1:efa490c:     return points;
1:efa490c:   }
1:efa490c: 
1:efa490c: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     DummyOutputCollector<Text, VectorWritable> collector = new DummyOutputCollector<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:sslavic
-------------------------------------------------------------------------------
commit:921e201
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
author:Isabel Drost
-------------------------------------------------------------------------------
commit:e3ec9d8
/////////////////////////////////////////////////////////////////////////
1:     fs = FileSystem.get(getConfiguration());
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
/////////////////////////////////////////////////////////////////////////
1:     ToolRunner.run(getConfiguration(), new VectorDistanceSimilarityJob(), args);
/////////////////////////////////////////////////////////////////////////
1:     ToolRunner.run(getConfiguration(), new VectorDistanceSimilarityJob(), args);
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
/////////////////////////////////////////////////////////////////////////
1:     ToolRunner.run(getConfiguration(), new VectorDistanceSimilarityJob(), args);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
1:     Collection<NamedVector> seedVectors = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:     Collection<NamedVector> seedVectors = Lists.newArrayList();
commit:9dba3cc
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Iterables;
/////////////////////////////////////////////////////////////////////////
1: 
1:   private static final double[][] REFERENCE = { { 1, 1 }, { 2, 1 }, { 1, 2 }, { 2, 2 }, { 3, 3 }, { 4, 4 }, { 5, 4 },
1:       { 4, 5 }, { 5, 5 } };
1: 
1:   private static final double[][] SEEDS = { { 1, 1 }, { 10, 10 } };
1: 
0:     fs = FileSystem.get(new Configuration());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:     String[] args = { optKey(DefaultOptionCreator.INPUT_OPTION), input.toString(),
1:         optKey(VectorDistanceSimilarityJob.SEEDS), seedsPath.toString(), optKey(DefaultOptionCreator.OUTPUT_OPTION),
1:         output.toString(), optKey(DefaultOptionCreator.DISTANCE_MEASURE_OPTION),
1:         EuclideanDistanceMeasure.class.getName() };
1: 
1: 
1:     int expectedOutputSize = SEEDS.length * REFERENCE.length;
1:     int outputSize = Iterables.size(new SequenceFileIterable<StringTuple, DoubleWritable>(new Path(output,
1:         "part-m-00000"), conf));
1:     assertEquals(expectedOutputSize, outputSize);
1:   }
1: 
1:   @Test
1:   public void testMaxDistance() throws Exception {
1: 
1:     Path input = getTestTempDirPath("input");
1:     Path output = getTestTempDirPath("output");
1:     Path seedsPath = getTestTempDirPath("seeds");
1: 
1:     List<VectorWritable> points = getPointsWritable(REFERENCE);
1:     List<VectorWritable> seeds = getPointsWritable(SEEDS);
1: 
0:     Configuration conf = new Configuration();
1:     ClusteringTestUtils.writePointsToFile(points, true, new Path(input, "file1"), fs, conf);
1:     ClusteringTestUtils.writePointsToFile(seeds, true, new Path(seedsPath, "part-seeds"), fs, conf);
1: 
1:     double maxDistance = 10;
1: 
1:     String[] args = { optKey(DefaultOptionCreator.INPUT_OPTION), input.toString(),
1:         optKey(VectorDistanceSimilarityJob.SEEDS), seedsPath.toString(), optKey(DefaultOptionCreator.OUTPUT_OPTION),
1:         output.toString(), optKey(DefaultOptionCreator.DISTANCE_MEASURE_OPTION),
1:         EuclideanDistanceMeasure.class.getName(),
1:         optKey(VectorDistanceSimilarityJob.MAX_DISTANCE), String.valueOf(maxDistance) };
1: 
0:     ToolRunner.run(new Configuration(), new VectorDistanceSimilarityJob(), args);
1: 
1:     int outputSize = 0;
1: 
1:     for (Pair<StringTuple, DoubleWritable> record : new SequenceFileIterable<StringTuple, DoubleWritable>(
1:         new Path(output, "part-m-00000"), conf)) {
1:       outputSize++;
1:       assertTrue(record.getSecond().get() <= maxDistance);
1: 
1:     assertEquals(14, outputSize);
/////////////////////////////////////////////////////////////////////////
1:         optKey(VectorDistanceSimilarityJob.SEEDS), seedsPath.toString(), optKey(DefaultOptionCreator.OUTPUT_OPTION),
1:         output.toString(), optKey(DefaultOptionCreator.DISTANCE_MEASURE_OPTION),
1:         EuclideanDistanceMeasure.class.getName(),
1:         optKey(VectorDistanceSimilarityJob.OUT_TYPE_KEY), "v"
0:     DummyOutputCollector<Text, VectorWritable> collector = new DummyOutputCollector<Text, VectorWritable>();
1: 
1:     for (Pair<Text, VectorWritable> record :  new SequenceFileIterable<Text, VectorWritable>(
1:         new Path(output, "part-m-00000"), conf)) {
/////////////////////////////////////////////////////////////////////////
0:   private List<VectorWritable> getPointsWritable(double[][] raw) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1:   private static List<VectorWritable> getPointsWritable(double[][] raw) {
commit:1499411
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.similarity;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1:     StringTuple tuple = new StringTuple();
/////////////////////////////////////////////////////////////////////////
0:     Collection<NamedVector> seedVectors = new ArrayList<NamedVector>();
/////////////////////////////////////////////////////////////////////////
0:     Collection<NamedVector> seedVectors = new ArrayList<NamedVector>();
/////////////////////////////////////////////////////////////////////////
0:   private static final double[][] REFERENCE = {
0:   private static final double[][] SEEDS = {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:e55ec3c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Text;
0: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.common.DummyOutputCollector;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
1: import org.apache.mahout.math.DenseVector;
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testVectorDistanceInvertedMapper() throws Exception {
1:      Mapper<WritableComparable<?>, VectorWritable, Text, VectorWritable>.Context context =
1:             EasyMock.createMock(Mapper.Context.class);
1:     Vector expectVec = new DenseVector(new double[]{Math.sqrt(2.0), 1.0});
1:     context.write(new Text("other"), new VectorWritable(expectVec));
1:     EasyMock.replay(context);
1:     Vector vector = new NamedVector(new RandomAccessSparseVector(2), "other");
1:     vector.set(0, 2);
1:     vector.set(1, 2);
1: 
1:     VectorDistanceInvertedMapper mapper = new VectorDistanceInvertedMapper();
1:     setField(mapper, "measure", new EuclideanDistanceMeasure());
0:     List<NamedVector> seedVectors = new ArrayList<NamedVector>();
1:     Vector seed1 = new RandomAccessSparseVector(2);
1:     seed1.set(0, 1);
1:     seed1.set(1, 1);
1:     Vector seed2 = new RandomAccessSparseVector(2);
1:     seed2.set(0, 2);
1:     seed2.set(1, 1);
1: 
1:     seedVectors.add(new NamedVector(seed1, "foo"));
1:     seedVectors.add(new NamedVector(seed2, "foo2"));
1:     setField(mapper, "seedVectors", seedVectors);
1: 
1:     mapper.map(new IntWritable(123), new VectorWritable(vector), context);
1: 
1:     EasyMock.verify(context);
1: 
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     };
0:     int expect = SEEDS.length * REFERENCE.length;
0:     DummyOutputCollector<StringTuple, DoubleWritable> collector =
0:             new DummyOutputCollector<StringTuple, DoubleWritable>();
0:     //
0:     for (Pair<StringTuple, DoubleWritable> record :
0:             new SequenceFileIterable<StringTuple, DoubleWritable>(
0:                     new Path(output, "part-m-00000"), conf)) {
1:       collector.collect(record.getFirst(), record.getSecond());
1:     }
0:     assertEquals(expect, collector.getData().size());
1:   }
1: 
1:   @Test
1:   public void testRunInverted() throws Exception {
1:     Path input = getTestTempDirPath("input");
1:     Path output = getTestTempDirPath("output");
1:     Path seedsPath = getTestTempDirPath("seeds");
1:     List<VectorWritable> points = getPointsWritable(REFERENCE);
1:     List<VectorWritable> seeds = getPointsWritable(SEEDS);
0:     Configuration conf = new Configuration();
1:     ClusteringTestUtils.writePointsToFile(points, true, new Path(input, "file1"), fs, conf);
1:     ClusteringTestUtils.writePointsToFile(seeds, true, new Path(seedsPath, "part-seeds"), fs, conf);
1:     String[] args = {optKey(DefaultOptionCreator.INPUT_OPTION), input.toString(),
0:             optKey(VectorDistanceSimilarityJob.SEEDS), seedsPath.toString(), optKey(DefaultOptionCreator.OUTPUT_OPTION),
0:             output.toString(), optKey(DefaultOptionCreator.DISTANCE_MEASURE_OPTION), EuclideanDistanceMeasure.class.getName(),
0:             optKey(VectorDistanceSimilarityJob.OUT_TYPE_KEY), "v"
1:     };
0:     ToolRunner.run(new Configuration(), new VectorDistanceSimilarityJob(), args);
1: 
0:     DummyOutputCollector<Text, VectorWritable> collector =
0:             new DummyOutputCollector<Text, VectorWritable>();
0:     //
0:     for (Pair<Text, VectorWritable> record :
0:             new SequenceFileIterable<Text, VectorWritable>(
0:                     new Path(output, "part-m-00000"), conf)) {
1:       collector.collect(record.getFirst(), record.getSecond());
1:     }
1:     assertEquals(REFERENCE.length, collector.getData().size());
1:     for (Map.Entry<Text, List<VectorWritable>> entry : collector.getData().entrySet()) {
1:       assertEquals(SEEDS.length, entry.getValue().iterator().next().get().size());
1:     }
commit:efa490c
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math.hadoop.similarity;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import com.google.common.collect.Lists;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.DoubleWritable;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.WritableComparable;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.hadoop.util.ToolRunner;
1: import org.apache.mahout.clustering.ClusteringTestUtils;
0: import org.apache.mahout.clustering.kmeans.KMeansDriver;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.common.StringTuple;
1: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1: import org.apache.mahout.common.distance.EuclideanDistanceMeasure;
1: import org.apache.mahout.math.NamedVector;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.easymock.EasyMock;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import java.util.ArrayList;
1: import java.util.List;
1: 
1: /**
1:  *
1:  *
0:  **/
1: public class TestVectorDistanceSimilarityJob extends MahoutTestCase {
1:   private FileSystem fs;
1: 
1:   @Override
1:   @Before
1:   public void setUp() throws Exception {
1:     super.setUp();
0:     Configuration conf = new Configuration();
0:     fs = FileSystem.get(conf);
1:   }
1: 
1:   @Test
1:   public void testVectorDistanceMapper() throws Exception {
1:     Mapper<WritableComparable<?>, VectorWritable, StringTuple, DoubleWritable>.Context context =
1:             EasyMock.createMock(Mapper.Context.class);
0:     StringTuple tuple;
1:     tuple = new StringTuple();
1:     tuple.add("foo");
1:     tuple.add("123");
1:     context.write(tuple, new DoubleWritable(Math.sqrt(2.0)));
1:     tuple = new StringTuple();
1:     tuple.add("foo2");
1:     tuple.add("123");
1:     context.write(tuple, new DoubleWritable(1));
1: 
1:     EasyMock.replay(context);
1: 
1:     Vector vector = new RandomAccessSparseVector(2);
1:     vector.set(0, 2);
1:     vector.set(1, 2);
1: 
1:     VectorDistanceMapper mapper = new VectorDistanceMapper();
1:     setField(mapper, "measure", new EuclideanDistanceMeasure());
0:     List<NamedVector> seedVectors = new ArrayList<NamedVector>();
1:     Vector seed1 = new RandomAccessSparseVector(2);
1:     seed1.set(0, 1);
1:     seed1.set(1, 1);
1:     Vector seed2 = new RandomAccessSparseVector(2);
1:     seed2.set(0, 2);
1:     seed2.set(1, 1);
1: 
1:     seedVectors.add(new NamedVector(seed1, "foo"));
1:     seedVectors.add(new NamedVector(seed2, "foo2"));
1:     setField(mapper, "seedVectors", seedVectors);
1: 
1:     mapper.map(new IntWritable(123), new VectorWritable(vector), context);
1: 
1:     EasyMock.verify(context);
1: 
1:   }
1: 
0:   public static final double[][] REFERENCE = {
0:           {1, 1}, {2, 1}, {1, 2}, {2, 2}, {3, 3}, {4, 4}, {5, 4}, {4, 5}, {5, 5}
0:   };
1: 
0:   public static final double[][] SEEDS = {
0:           {1, 1}, {10, 10}
0:   };
1: 
1:   @Test
1:   public void testRun() throws Exception {
1:     Path input = getTestTempDirPath("input");
1:     Path output = getTestTempDirPath("output");
1:     Path seedsPath = getTestTempDirPath("seeds");
1:     List<VectorWritable> points = getPointsWritable(REFERENCE);
1:     List<VectorWritable> seeds = getPointsWritable(SEEDS);
0:     Configuration conf = new Configuration();
1:     ClusteringTestUtils.writePointsToFile(points, true, new Path(input, "file1"), fs, conf);
1:     ClusteringTestUtils.writePointsToFile(seeds, true, new Path(seedsPath, "part-seeds"), fs, conf);
0:     String[] args = {optKey(DefaultOptionCreator.INPUT_OPTION), input.toString(),
0:             optKey(VectorDistanceSimilarityJob.SEEDS), seedsPath.toString(), optKey(DefaultOptionCreator.OUTPUT_OPTION),
0:             output.toString(), optKey(DefaultOptionCreator.DISTANCE_MEASURE_OPTION), EuclideanDistanceMeasure.class.getName()
0:             };
0:     ToolRunner.run(new Configuration(), new VectorDistanceSimilarityJob(), args);
1:   }
1: 
0:   public static List<VectorWritable> getPointsWritable(double[][] raw) {
1:     List<VectorWritable> points = Lists.newArrayList();
1:     for (double[] fr : raw) {
1:       Vector vec = new RandomAccessSparseVector(fr.length);
1:       vec.assign(fr);
1:       points.add(new VectorWritable(vec));
1:     }
1:     return points;
1:   }
1: 
1: }
============================================================================