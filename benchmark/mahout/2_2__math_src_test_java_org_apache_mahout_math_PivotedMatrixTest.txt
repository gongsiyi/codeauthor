1:1499411: /**
1:1499411:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1499411:  * contributor license agreements.  See the NOTICE file distributed with
1:1499411:  * this work for additional information regarding copyright ownership.
1:1499411:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1499411:  * (the "License"); you may not use this file except in compliance with
1:1499411:  * the License.  You may obtain a copy of the License at
1:1499411:  *
1:1499411:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1499411:  *
1:1499411:  * Unless required by applicable law or agreed to in writing, software
1:1499411:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1499411:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1499411:  * See the License for the specific language governing permissions and
1:1499411:  * limitations under the License.
1:1499411:  */
1:1499411: 
1:21779d8: package org.apache.mahout.math;
2:21779d8: 
1:21779d8: import org.junit.Test;
1:21779d8: 
1:21779d8: public class PivotedMatrixTest extends MatrixTest {
1:21779d8:   @Override
1:21779d8:   public Matrix matrixFactory(double[][] values) {
1:21779d8: 
1:21779d8:     Matrix base = new DenseMatrix(values);
1:21779d8: 
1:21779d8:     // for general tests, we just make a scrambled matrix and fill it
1:21779d8:     // with the standard data.  Then we can test the details of the
1:21779d8:     // row and/or column swapping separately.
1:21779d8:     PivotedMatrix pm = new PivotedMatrix(base.like());
1:21779d8: 
1:21779d8:     pm.swap(0, 1);
1:21779d8:     pm.swapRows(1, 2);
1:21779d8:     pm.assign(base);
1:21779d8:     return pm;
1:21779d8:   }
1:21779d8: 
1:21779d8:   @Test
1:21779d8:   public void testSwap() {
1:21779d8:     Matrix m = new DenseMatrix(10, 10);
1:21779d8:     for (int i = 0; i < 10; i++) {
1:21779d8:       for (int j = 0; j < 10; j++) {
1:21779d8:         m.set(i, j, 10 * i + j);
1:21779d8:       }
1:21779d8:     }
1:21779d8: 
1:21779d8:     PivotedMatrix pm = new PivotedMatrix(m);
1:21779d8: 
1:21779d8:     pm.swap(3, 5);
1:21779d8: 
1:1499411:     assertEquals(0, pm.viewDiagonal().minus(
1:1499411:         new DenseVector(new double[]{0, 11, 22, 55, 44, 33, 66, 77, 88, 99})).norm(1), 1.0e-10);
1:21779d8: 
1:21779d8:     pm.swap(2, 7);
1:1499411:     assertEquals(0, pm.viewDiagonal().minus(
1:1499411:         new DenseVector(new double[]{0, 11, 77, 55, 44, 33, 66, 22, 88, 99})).norm(1), 1.0e-10);
1:21779d8: 
1:21779d8:     pm.swap(5, 8);
1:1499411:     assertEquals(0, pm.viewColumn(4).minus(
1:1499411:         new DenseVector(new double[]{4.0,14.0,74.0,54.0,44.0,84.0,64.0,24.0,34.0,94.0})).norm(1), 1.0e-10);
1:1499411:     assertEquals(0, pm.viewDiagonal().minus(
1:1499411:         new DenseVector(new double[]{0, 11, 77, 55, 44, 88, 66, 22, 33, 99})).norm(1), 1.0e-10);
1:21779d8:   }
1:21779d8: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1499411
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, pm.viewDiagonal().minus(
1:         new DenseVector(new double[]{0, 11, 22, 55, 44, 33, 66, 77, 88, 99})).norm(1), 1.0e-10);
1:     assertEquals(0, pm.viewDiagonal().minus(
1:         new DenseVector(new double[]{0, 11, 77, 55, 44, 33, 66, 22, 88, 99})).norm(1), 1.0e-10);
1:     assertEquals(0, pm.viewColumn(4).minus(
1:         new DenseVector(new double[]{4.0,14.0,74.0,54.0,44.0,84.0,64.0,24.0,34.0,94.0})).norm(1), 1.0e-10);
1:     assertEquals(0, pm.viewDiagonal().minus(
1:         new DenseVector(new double[]{0, 11, 77, 55, 44, 88, 66, 22, 33, 99})).norm(1), 1.0e-10);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:21779d8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1: 
0: import org.apache.mahout.common.RandomUtils;
1: import org.junit.Test;
1: 
0: import java.util.Random;
1: 
1: public class PivotedMatrixTest extends MatrixTest {
1:   @Override
1:   public Matrix matrixFactory(double[][] values) {
0:     Random gen = RandomUtils.getRandom();
1: 
1:     Matrix base = new DenseMatrix(values);
1: 
1:     // for general tests, we just make a scrambled matrix and fill it
1:     // with the standard data.  Then we can test the details of the
1:     // row and/or column swapping separately.
1:     PivotedMatrix pm = new PivotedMatrix(base.like());
1: 
1:     pm.swap(0, 1);
1:     pm.swapRows(1, 2);
1:     pm.assign(base);
1:     return pm;
1:   }
1: 
1:   @Test
1:   public void testSwap() {
1:     Matrix m = new DenseMatrix(10, 10);
1:     for (int i = 0; i < 10; i++) {
1:       for (int j = 0; j < 10; j++) {
1:         m.set(i, j, 10 * i + j);
1:       }
1:     }
1: 
1:     PivotedMatrix pm = new PivotedMatrix(m);
1: 
1:     pm.swap(3, 5);
1: 
0:     assertEquals(0, pm.viewDiagonal().minus(new DenseVector(new double[]{0, 11, 22, 55, 44, 33, 66, 77, 88, 99})).norm(1), 1e-10);
1: 
1:     pm.swap(2, 7);
0:     assertEquals(0, pm.viewDiagonal().minus(new DenseVector(new double[]{0, 11, 77, 55, 44, 33, 66, 22, 88, 99})).norm(1), 1e-10);
1: 
1:     pm.swap(5, 8);
0:     assertEquals(0, pm.viewColumn(4).minus(new DenseVector(new double[]{4.0,14.0,74.0,54.0,44.0,84.0,64.0,24.0,34.0,94.0})).norm(1), 1e-10);
0:     assertEquals(0, pm.viewDiagonal().minus(new DenseVector(new double[]{0, 11, 77, 55, 44, 88, 66, 22, 33, 99})).norm(1), 1e-10);
1:   }
1: }
============================================================================