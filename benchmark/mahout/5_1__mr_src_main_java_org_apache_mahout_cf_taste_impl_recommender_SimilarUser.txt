3:d6235d0: /**
1:d6235d0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d6235d0:  * contributor license agreements.  See the NOTICE file distributed with
1:d6235d0:  * this work for additional information regarding copyright ownership.
1:d6235d0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d6235d0:  * (the "License"); you may not use this file except in compliance with
1:d6235d0:  * the License.  You may obtain a copy of the License at
1:d6235d0:  *
1:d6235d0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d6235d0:  *
1:d6235d0:  * Unless required by applicable law or agreed to in writing, software
1:d6235d0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d6235d0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d6235d0:  * See the License for the specific language governing permissions and
1:d6235d0:  * limitations under the License.
3:d6235d0:  */
1:d6235d0: 
1:d6235d0: package org.apache.mahout.cf.taste.impl.recommender;
1:d6235d0: 
1:da03b23: import org.apache.mahout.common.RandomUtils;
1:d6235d0: 
1:d86c967: /** Simply encapsulates a user and a similarity value. */
1:d6235d0: public final class SimilarUser implements Comparable<SimilarUser> {
1:d6235d0:   
1:a66f1a8:   private final long userID;
1:d6235d0:   private final double similarity;
1:d6235d0:   
1:a66f1a8:   public SimilarUser(long userID, double similarity) {
1:d86c967:     this.userID = userID;
1:d6235d0:     this.similarity = similarity;
1:d6235d0:   }
1:d6235d0:   
1:a66f1a8:   long getUserID() {
1:d86c967:     return userID;
1:d6235d0:   }
1:d6235d0:   
1:d6235d0:   double getSimilarity() {
1:d6235d0:     return similarity;
1:d6235d0:   }
1:d6235d0:   
1:58d7a84:   @Override
1:d6235d0:   public int hashCode() {
1:a66f1a8:     return (int) userID ^ RandomUtils.hashDouble(similarity);
1:d6235d0:   }
1:d6235d0:   
1:d6235d0:   @Override
1:d6235d0:   public boolean equals(Object o) {
1:d6235d0:     if (!(o instanceof SimilarUser)) {
1:d6235d0:       return false;
1:d6235d0:     }
1:d6235d0:     SimilarUser other = (SimilarUser) o;
1:39fe224:     return userID == other.getUserID() && similarity == other.getSimilarity();
1:d6235d0:   }
1:d6235d0:   
1:d6235d0:   @Override
1:d6235d0:   public String toString() {
1:d86c967:     return "SimilarUser[user:" + userID + ", similarity:" + similarity + ']';
1:d6235d0:   }
1:d6235d0:   
1:b25ad9d:   /** Defines an ordering from most similar to least similar. */
1:d6235d0:   @Override
1:d6235d0:   public int compareTo(SimilarUser other) {
1:fc74924:     double otherSimilarity = other.getSimilarity();
1:4b2c5d3:     if (similarity > otherSimilarity) {
1:4b2c5d3:       return -1;
1:4b2c5d3:     }
1:4b2c5d3:     if (similarity < otherSimilarity) {
1:4b2c5d3:       return 1;
1:4b2c5d3:     }
1:4b2c5d3:     long otherUserID = other.getUserID();
1:4b2c5d3:     if (userID < otherUserID) {
1:4b2c5d3:       return -1;
1:4b2c5d3:     }
1:4b2c5d3:     if (userID > otherUserID) {
1:4b2c5d3:       return 1;
1:4b2c5d3:     }
1:4b2c5d3:     return 0;
1:d6235d0:   }
1:d6235d0:   
1:d6235d0: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4b2c5d3
/////////////////////////////////////////////////////////////////////////
1:     if (similarity > otherSimilarity) {
1:       return -1;
1:     }
1:     if (similarity < otherSimilarity) {
1:       return 1;
1:     }
1:     long otherUserID = other.getUserID();
1:     if (userID < otherUserID) {
1:       return -1;
1:     }
1:     if (userID > otherUserID) {
1:       return 1;
1:     }
1:     return 0;
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:     return userID == other.getUserID() && similarity == other.getSimilarity();
commit:fc74924
/////////////////////////////////////////////////////////////////////////
0:     return userID == other.getUserID() && similarity == other.getSimilarity();
/////////////////////////////////////////////////////////////////////////
1:     double otherSimilarity = other.getSimilarity();
commit:da03b23
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
commit:a66f1a8
/////////////////////////////////////////////////////////////////////////
1:   private final long userID;
1:   public SimilarUser(long userID, double similarity) {
1:   long getUserID() {
/////////////////////////////////////////////////////////////////////////
1:     return (int) userID ^ RandomUtils.hashDouble(similarity);
/////////////////////////////////////////////////////////////////////////
0:     return userID == other.userID && similarity == other.similarity;
commit:d86c967
/////////////////////////////////////////////////////////////////////////
1: /** Simply encapsulates a user and a similarity value. */
0:   private final Comparable<?> userID;
0:   public SimilarUser(Comparable<?> userID, double similarity) {
1:     this.userID = userID;
0:   Comparable<?> getUserID() {
1:     return userID;
/////////////////////////////////////////////////////////////////////////
0:     return userID.hashCode() ^ RandomUtils.hashDouble(similarity);
/////////////////////////////////////////////////////////////////////////
0:     return userID.equals(other.userID) && similarity == other.similarity;
1:     return "SimilarUser[user:" + userID + ", similarity:" + similarity + ']';
commit:b25ad9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.cf.taste.model.User;
0: /** Simply encapsulates a {@link User} and a similarity value. */
/////////////////////////////////////////////////////////////////////////
1:   /** Defines an ordering from most similar to least similar. */
commit:58d7a84
/////////////////////////////////////////////////////////////////////////
1:   @Override
commit:d6235d0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender;
1: 
0: import org.apache.mahout.cf.taste.model.User;
0: import org.apache.mahout.cf.taste.impl.common.RandomUtils;
1: 
1: /**
0:  * Simply encapuslates a {@link User} and a similarity value.
1:  */
1: public final class SimilarUser implements Comparable<SimilarUser> {
1: 
0:   private final User user;
1:   private final double similarity;
1: 
0:   public SimilarUser(User user, double similarity) {
0:     this.user = user;
1:     this.similarity = similarity;
1:   }
1: 
0:   User getUser() {
0:     return user;
1:   }
1: 
1:   double getSimilarity() {
1:     return similarity;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
0:     return user.hashCode() ^ RandomUtils.hashDouble(similarity);
1:   }
1: 
1:   @Override
1:   public boolean equals(Object o) {
1:     if (!(o instanceof SimilarUser)) {
1:       return false;
1:     }
1:     SimilarUser other = (SimilarUser) o;
0:     return user.equals(other.user) && similarity == other.similarity;
1:   }
1: 
1:   @Override
1:   public String toString() {
0:     return "SimilarUser[user:" + user + ", similarity:" + similarity + ']';
1:   }
1: 
1:   /**
0:    * Defines an ordering from most similar to least similar.
1:    */
1:   public int compareTo(SimilarUser other) {
0:     double otherSimilarity = other.similarity;
0:     return similarity > otherSimilarity ? -1 : similarity < otherSimilarity ? 1 : 0;
1:   }
1: 
1: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:1b4e01f
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
0:   
0:   
0:   
0:     return (userID == other.getUserID()) && (similarity == other.getSimilarity());
0:   
0:   
0:   
author:Otis Gospodnetic
-------------------------------------------------------------------------------
commit:112a5db
/////////////////////////////////////////////////////////////////////////
0:  * Simply encapsulates a {@link User} and a similarity value.
============================================================================