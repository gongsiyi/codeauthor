1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
10:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math;
1:a07bfc3: 
1:a07bfc3: /**
1:a07bfc3:  * Decorates a vector with a floating point weight and an index.
1:a07bfc3:  */
1:5c13640: public class WeightedVector extends DelegatingVector {
1:1e3f7ae:   private static final int INVALID_INDEX = -1;
1:1e3f7ae:   private double weight;
1:1e3f7ae:   private int index;
1:a07bfc3: 
1:1e3f7ae:   protected WeightedVector(double weight, int index) {
1:a8d3dbd:     super();
1:1e3f7ae:     this.weight = weight;
1:1e3f7ae:     this.index = index;
3:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   public WeightedVector(Vector v, double weight, int index) {
1:1e3f7ae:     super(v);
1:1e3f7ae:     this.weight = weight;
1:1e3f7ae:     this.index = index;
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   public WeightedVector(Vector v, Vector projection, int index) {
1:1e3f7ae:     super(v);
1:1e3f7ae:     this.index = index;
1:1e3f7ae:     this.weight = v.dot(projection);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   public static WeightedVector project(Vector v, Vector projection) {
1:1e3f7ae:     return project(v, projection, INVALID_INDEX);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   public static WeightedVector project(Vector v, Vector projection, int index) {
1:1e3f7ae:     return new WeightedVector(v, projection, index);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   public double getWeight() {
1:1e3f7ae:     return weight;
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   public int getIndex() {
1:1e3f7ae:     return index;
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   public void setWeight(double newWeight) {
1:1e3f7ae:     this.weight = newWeight;
1:1e3f7ae:   }
1:a07bfc3: 
1:1e3f7ae:   public void setIndex(int index) {
1:1e3f7ae:     this.index = index;
1:1e3f7ae:   }
1:a07bfc3: 
2:1e3f7ae:   @Override
1:1e3f7ae:   public Vector like() {
1:1e3f7ae:     return new WeightedVector(getVector().like(), weight, index);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Override
1:1e3f7ae:   public String toString() {
1:1e3f7ae:     return String.format("index=%d, weight=%.2f, v=%s", index, weight, getVector());
1:1e3f7ae:   }
1:a8d3dbd: 
1:a8d3dbd:   @Override
1:a8d3dbd:   public WeightedVector clone() {
1:a8d3dbd:     WeightedVector v = (WeightedVector)super.clone();
1:a8d3dbd:     v.weight = weight;
1:a8d3dbd:     v.index = index;
1:a8d3dbd:     return v;
1:a8d3dbd:   }
1:1e3f7ae: }
============================================================================
author:dfilimon
-------------------------------------------------------------------------------
commit:a8d3dbd
/////////////////////////////////////////////////////////////////////////
1:     super();
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public WeightedVector clone() {
1:     WeightedVector v = (WeightedVector)super.clone();
1:     v.weight = weight;
1:     v.index = index;
1:     return v;
1:   }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8396a27
/////////////////////////////////////////////////////////////////////////
commit:5c13640
/////////////////////////////////////////////////////////////////////////
1: public class WeightedVector extends DelegatingVector {
/////////////////////////////////////////////////////////////////////////
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
0:         if (r == 0 || Math.abs(weight - other.getWeight()) < 1.0e-8) {
0:             if (diff < 1.0e-12) {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:1e3f7ae
/////////////////////////////////////////////////////////////////////////
1:   private static final int INVALID_INDEX = -1;
1:   private double weight;
1:   private int index;
1:   protected WeightedVector(double weight, int index) {
0:     super();
1:     this.weight = weight;
1:     this.index = index;
1:   }
1: 
1:   public WeightedVector(Vector v, double weight, int index) {
1:     super(v);
1:     this.weight = weight;
1:     this.index = index;
1:   }
1: 
1:   public WeightedVector(Vector v, Vector projection, int index) {
1:     super(v);
1:     this.index = index;
1:     this.weight = v.dot(projection);
1:   }
1: 
1:   public static WeightedVector project(Vector v, Vector projection) {
1:     return project(v, projection, INVALID_INDEX);
1:   }
1: 
1:   public static WeightedVector project(Vector v, Vector projection, int index) {
1:     return new WeightedVector(v, projection, index);
1:   }
1: 
1:   public double getWeight() {
1:     return weight;
1:   }
1: 
1: 
1:   @Override
0:   public int compareTo(WeightedVector other) {
0:     if (this == other) {
0:       return 0;
0:     int r = Double.compare(weight, other.getWeight());
0:     if (r == 0 || Math.abs(weight - other.getWeight()) < 1e-8) {
0:       double diff = this.minus(other).norm(1);
0:       if (diff < 1e-12) {
0:         return 0;
0:       } else {
0:         for (Vector.Element element : this) {
0:           r = Double.compare(element.get(), other.get(element.index()));
0:           if (r != 0) {
1:           }
0:         return 0;
1:       }
0:     } else {
0:       return r;
1:   }
1:   public int getIndex() {
1:     return index;
1:   }
1:   public void setWeight(double newWeight) {
1:     this.weight = newWeight;
1:   }
1:   public void setIndex(int index) {
1:     this.index = index;
1:   }
1:   @Override
1:   public Vector like() {
1:     return new WeightedVector(getVector().like(), weight, index);
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     return String.format("index=%d, weight=%.2f, v=%s", index, weight, getVector());
1:   }
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: /**
1:  * Decorates a vector with a floating point weight and an index.
1:  */
0: public class WeightedVector extends DelegatingVector implements Comparable<WeightedVector> {
0:     private static final int INVALID_INDEX = -1;
0:     private double weight;
0:     private int index;
1: 
0:     protected WeightedVector(int size, double weight, int index) {
0:         super(size);
0:         this.weight = weight;
0:         this.index = index;
0:     }
1: 
0:     public WeightedVector(Vector v, double weight, int index) {
0:         super(v);
0:         this.weight = weight;
0:         this.index = index;
0:     }
1: 
0:     public WeightedVector(Vector v, Vector projection, int index) {
0:         super(v);
0:         this.index = index;
0:         this.weight = v.dot(projection);
0:     }
1: 
0:     public static WeightedVector project(Vector v, Vector projection) {
0:         return project(v, projection, INVALID_INDEX);
0:     }
1: 
0:     public static WeightedVector project(Vector v, Vector projection, int index) {
0:         return new WeightedVector(v, projection, index);
0:     }
1: 
0:     public double getWeight() {
0:         return weight;
0:     }
1: 
1: 
0:     @Override
0:     public int compareTo(WeightedVector other) {
0:         if (this == other) {
0:             return 0;
0:         }
0:         int r = Double.compare(weight, other.getWeight());
0:         if (r == 0 || Math.abs(weight - other.getWeight()) < 1e-8) {
0:             double diff = this.minus(other).norm(1);
0:             if (diff < 1e-12) {
0:                 return 0;
0:             } else {
0:                 for (Vector.Element element : this) {
0:                     r = Double.compare(element.get(), other.get(element.index()));
0:                     if (r != 0) {
0:                         return r;
0:                     }
0:                 }
0:                 return 0;
0:             }
0:         } else {
0:             return r;
0:         }
0:     }
1: 
0:     public int getIndex() {
0:         return index;
0:     }
1: 
0:     public void setWeight(double newWeight) {
0:         this.weight = newWeight;
0:     }
1: 
0:     public void setIndex(int index) {
0:         this.index = index;
0:     }
1: 
0:     @Override
0:     public String toString() {
0:         return String.format("index=%d, weight=%.2f, v=%s", index, weight, getVector());
0:     }
0: }
============================================================================