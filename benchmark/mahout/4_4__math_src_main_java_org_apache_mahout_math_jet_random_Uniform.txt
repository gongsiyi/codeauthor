1:7550a10: /*
1:7550a10: Copyright ï¿? 1999 CERN - European Organization for Nuclear Research.
1:7550a10: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1:7550a10: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1:7550a10: that both that copyright notice and this permission notice appear in supporting documentation. 
1:7550a10: CERN makes no representations about the suitability of this software for any purpose. 
1:7550a10: It is provided "as is" without expressed or implied warranty.
7:7926fcb: */
1:a435efb: package org.apache.mahout.math.jet.random;
5:7926fcb: 
1:22726e8: import org.apache.mahout.common.RandomUtils;
1:7926fcb: 
1:22726e8: import java.util.Random;
1:7926fcb: 
1:7550a10: public class Uniform extends AbstractContinousDistribution {
1:7926fcb: 
1:7627de6:   private double min;
1:7627de6:   private double max;
1:7926fcb: 
8:7926fcb:   /**
1:7926fcb:    * Constructs a uniform distribution with the given minimum and maximum, using a {@link
1:a435efb:    * org.apache.mahout.math.jet.random.engine.MersenneTwister} seeded with the given seed.
1:7926fcb:    */
1:7926fcb:   public Uniform(double min, double max, int seed) {
1:22726e8:     this(min, max, RandomUtils.getRandom(seed));
3:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /** Constructs a uniform distribution with the given minimum and maximum. */
1:22726e8:   public Uniform(double min, double max, Random randomGenerator) {
1:7926fcb:     setRandomGenerator(randomGenerator);
1:7926fcb:     setState(min, max);
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /** Constructs a uniform distribution with <tt>min=0.0</tt> and <tt>max=1.0</tt>. */
1:22726e8:   public Uniform(Random randomGenerator) {
1:7926fcb:     this(0, 1, randomGenerator);
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /** Returns the cumulative distribution function (assuming a continous uniform distribution). */
1:6430188:   @Override
1:7926fcb:   public double cdf(double x) {
1:7926fcb:     if (x <= min) {
1:7926fcb:       return 0.0;
1:7926fcb:     }
1:7926fcb:     if (x >= max) {
1:7926fcb:       return 1.0;
1:7926fcb:     }
1:7926fcb:     return (x - min) / (max - min);
1:7926fcb:   }
1:7926fcb: 
2:7926fcb:   /** Returns a uniformly distributed random <tt>boolean</tt>. */
1:7926fcb:   public boolean nextBoolean() {
1:4194a28:     return randomDouble() > 0.5;
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Returns a uniformly distributed random number in the open interval <tt>(min,max)</tt> (excluding <tt>min</tt> and
2:7926fcb:    * <tt>max</tt>).
1:7926fcb:    */
2:7926fcb:   @Override
1:7926fcb:   public double nextDouble() {
1:4194a28:     return min + (max - min) * randomDouble();
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
3:7926fcb:    * Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and
3:7926fcb:    * <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:7926fcb:    */
1:7926fcb:   public double nextDoubleFromTo(double from, double to) {
1:4194a28:     return from + (to - from) * randomDouble();
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and
1:7926fcb:    * <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:7926fcb:    */
1:7926fcb:   public float nextFloatFromTo(float from, float to) {
1:7926fcb:     return (float) nextDoubleFromTo(from, to);
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:a51dd9e:    * Returns a uniformly distributed random number in the closed interval
1:a51dd9e:    *  <tt>[from,to]</tt> (including <tt>from</tt>
3:7926fcb:    * and <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:7926fcb:    */
1:7926fcb:   public int nextIntFromTo(int from, int to) {
1:4ca6b86:     return (int) (from + (long) ((1L + to - from) * randomDouble()));
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
4:7926fcb:    * Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt>
1:7926fcb:    * and <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:7926fcb:    */
1:7926fcb:   public long nextLongFromTo(long from, long to) {
1:7926fcb:     /* Doing the thing turns out to be more tricky than expected.
1:7926fcb:        avoids overflows and underflows.
1:7926fcb:        treats cases like from=-1, to=1 and the like right.
1:7926fcb:        the following code would NOT solve the problem: return (long) (Doubles.randomFromTo(from,to));
1:7926fcb: 
1:7926fcb:        rounding avoids the unsymmetric behaviour of casts from double to long: (long) -0.7 = 0, (long) 0.7 = 0.
1:7926fcb:        checking for overflows and underflows is also necessary.
1:7926fcb:     */
1:7926fcb: 
1:7926fcb:     // first the most likely and also the fastest case.
1:7926fcb:     if (from >= 0 && to < Long.MAX_VALUE) {
1:39fe224:       return from + (long) nextDoubleFromTo(0.0, to - from + 1);
1:7926fcb:     }
1:7926fcb: 
1:7926fcb:     // would we get a numeric overflow?
1:7926fcb:     // if not, we can still handle the case rather efficient.
1:39fe224:     double diff = (double) to - (double) from + 1.0;
1:7926fcb:     if (diff <= Long.MAX_VALUE) {
1:39fe224:       return from + (long) nextDoubleFromTo(0.0, diff);
1:7926fcb:     }
1:7926fcb: 
1:7926fcb:     // now the pathologic boundary cases.
1:7926fcb:     // they are handled rather slow.
1:7926fcb:     long random;
1:7926fcb:     if (from == Long.MIN_VALUE) {
1:7926fcb:       if (to == Long.MAX_VALUE) {
1:7926fcb:         //return Math.round(nextDoubleFromTo(from,to));
1:7926fcb:         int i1 = nextIntFromTo(Integer.MIN_VALUE, Integer.MAX_VALUE);
1:7926fcb:         int i2 = nextIntFromTo(Integer.MIN_VALUE, Integer.MAX_VALUE);
1:7926fcb:         return ((i1 & 0xFFFFFFFFL) << 32) | (i2 & 0xFFFFFFFFL);
1:7926fcb:       }
1:4194a28:       random = Math.round(nextDoubleFromTo(Long.MIN_VALUE, to + 1));
1:7926fcb:       if (random > to) {
1:4194a28:         random = Long.MIN_VALUE;
1:7926fcb:       }
1:7926fcb:     } else {
1:7926fcb:       random = Math.round(nextDoubleFromTo(from - 1, to));
1:7926fcb:       if (random < from) {
1:7926fcb:         random = to;
1:7926fcb:       }
1:7926fcb:     }
1:7926fcb:     return random;
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /** Returns the probability distribution function (assuming a continous uniform distribution). */
1:6430188:   @Override
1:7926fcb:   public double pdf(double x) {
1:7926fcb:     if (x <= min || x >= max) {
1:7926fcb:       return 0.0;
1:7926fcb:     }
1:7926fcb:     return 1.0 / (max - min);
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /** Sets the internal state. */
1:7926fcb:   public void setState(double min, double max) {
1:7926fcb:     if (max < min) {
1:7926fcb:       setState(max, min);
1:7926fcb:       return;
1:7926fcb:     }
1:7926fcb:     this.min = min;
1:7926fcb:     this.max = max;
1:7926fcb:   }
1:7926fcb: 
1:7926fcb: 
1:7926fcb:   /** Returns a String representation of the receiver. */
1:1499411:   @Override
1:7926fcb:   public String toString() {
1:e50fbd5:     return this.getClass().getName() + '(' + min + ',' + max + ')';
1:7926fcb:   }
1:7926fcb: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:     return (int) (from + (long) ((1L + to - from) * randomDouble()));
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:     return randomDouble() > 0.5;
/////////////////////////////////////////////////////////////////////////
1:     return min + (max - min) * randomDouble();
/////////////////////////////////////////////////////////////////////////
1:     return from + (to - from) * randomDouble();
/////////////////////////////////////////////////////////////////////////
0:     return (int) ((long) from + (long) ((1L + (long) to - (long) from) * randomDouble()));
/////////////////////////////////////////////////////////////////////////
1:       random = Math.round(nextDoubleFromTo(Long.MIN_VALUE, to + 1));
1:         random = Long.MIN_VALUE;
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:   @Override
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:       return from + (long) nextDoubleFromTo(0.0, to - from + 1);
1:     double diff = (double) to - (double) from + 1.0;
1:       return from + (long) nextDoubleFromTo(0.0, diff);
commit:85ec3a3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:6430188
/////////////////////////////////////////////////////////////////////////
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
commit:7627de6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.jet.random.engine.MersenneTwister;
/////////////////////////////////////////////////////////////////////////
1:   private double min;
1:   private double max;
/////////////////////////////////////////////////////////////////////////
0:     this(min, max, new MersenneTwister(seed));
commit:e50fbd5
/////////////////////////////////////////////////////////////////////////
0:   protected static final Uniform shared = new Uniform(makeDefaultGenerator());
/////////////////////////////////////////////////////////////////////////
1:     return this.getClass().getName() + '(' + min + ',' + max + ')';
commit:7926fcb
/////////////////////////////////////////////////////////////////////////
1: 
0: /** @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
1: 
1: 
0:   // The uniform random number generated shared by all <b>static</b> methods.
1: 
1:   /**
1:    * Constructs a uniform distribution with the given minimum and maximum, using a {@link
0:    * org.apache.mahout.jet.random.engine.MersenneTwister} seeded with the given seed.
1:    */
1:   public Uniform(double min, double max, int seed) {
0:     this(min, max, new org.apache.mahout.jet.random.engine.MersenneTwister(seed));
1:   /** Constructs a uniform distribution with the given minimum and maximum. */
0:   public Uniform(double min, double max, RandomEngine randomGenerator) {
1:     setRandomGenerator(randomGenerator);
1:     setState(min, max);
1:   /** Constructs a uniform distribution with <tt>min=0.0</tt> and <tt>max=1.0</tt>. */
0:   public Uniform(RandomEngine randomGenerator) {
1:     this(0, 1, randomGenerator);
1:   }
1: 
1:   /** Returns the cumulative distribution function (assuming a continous uniform distribution). */
1:   public double cdf(double x) {
1:     if (x <= min) {
1:       return 0.0;
1:     if (x >= max) {
1:       return 1.0;
1:     }
1:     return (x - min) / (max - min);
1: 
1:   /** Returns a uniformly distributed random <tt>boolean</tt>. */
1:   public boolean nextBoolean() {
0:     return randomGenerator.raw() > 0.5;
1: 
1:   /**
1:    * Returns a uniformly distributed random number in the open interval <tt>(min,max)</tt> (excluding <tt>min</tt> and
1:    * <tt>max</tt>).
1:    */
1:   @Override
1:   public double nextDouble() {
0:     return min + (max - min) * randomGenerator.raw();
1: 
1:   /**
1:    * Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and
1:    * <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:    */
1:   public double nextDoubleFromTo(double from, double to) {
0:     return from + (to - from) * randomGenerator.raw();
1: 
1:   /**
1:    * Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and
1:    * <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:    */
1:   public float nextFloatFromTo(float from, float to) {
1:     return (float) nextDoubleFromTo(from, to);
1: 
1:   /**
0:    * Returns a uniformly distributed random number in the closed interval <tt>[min,max]</tt> (including <tt>min</tt> and
1:    * <tt>max</tt>).
1:    */
1:   @Override
0:   public int nextInt() {
0:     return nextIntFromTo((int) Math.round(min), (int) Math.round(max));
1: 
1:   /**
1:    * Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt>
1:    * and <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:    */
1:   public int nextIntFromTo(int from, int to) {
0:     return (int) ((long) from + (long) ((1L + (long) to - (long) from) * randomGenerator.raw()));
1: 
1:   /**
1:    * Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt>
1:    * and <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:    */
1:   public long nextLongFromTo(long from, long to) {
1:     /* Doing the thing turns out to be more tricky than expected.
1:        avoids overflows and underflows.
1:        treats cases like from=-1, to=1 and the like right.
1:        the following code would NOT solve the problem: return (long) (Doubles.randomFromTo(from,to));
1: 
1:        rounding avoids the unsymmetric behaviour of casts from double to long: (long) -0.7 = 0, (long) 0.7 = 0.
1:        checking for overflows and underflows is also necessary.
1:     */
1: 
1:     // first the most likely and also the fastest case.
1:     if (from >= 0 && to < Long.MAX_VALUE) {
0:       return from + (long) (nextDoubleFromTo(0.0, to - from + 1));
1:     }
1: 
1:     // would we get a numeric overflow?
1:     // if not, we can still handle the case rather efficient.
0:     double diff = ((double) to) - (double) from + 1.0;
1:     if (diff <= Long.MAX_VALUE) {
0:       return from + (long) (nextDoubleFromTo(0.0, diff));
1:     }
1: 
1:     // now the pathologic boundary cases.
1:     // they are handled rather slow.
1:     long random;
1:     if (from == Long.MIN_VALUE) {
1:       if (to == Long.MAX_VALUE) {
1:         //return Math.round(nextDoubleFromTo(from,to));
1:         int i1 = nextIntFromTo(Integer.MIN_VALUE, Integer.MAX_VALUE);
1:         int i2 = nextIntFromTo(Integer.MIN_VALUE, Integer.MAX_VALUE);
1:         return ((i1 & 0xFFFFFFFFL) << 32) | (i2 & 0xFFFFFFFFL);
1:       }
0:       random = Math.round(nextDoubleFromTo(from, to + 1));
1:       if (random > to) {
0:         random = from;
1:       }
1:     } else {
1:       random = Math.round(nextDoubleFromTo(from - 1, to));
1:       if (random < from) {
1:         random = to;
1:       }
1:     }
1:     return random;
1: 
1:   /** Returns the probability distribution function (assuming a continous uniform distribution). */
1:   public double pdf(double x) {
1:     if (x <= min || x >= max) {
1:       return 0.0;
1:     }
1:     return 1.0 / (max - min);
1: 
1:   /** Sets the internal state. */
1:   public void setState(double min, double max) {
1:     if (max < min) {
1:       setState(max, min);
1:       return;
1:     }
1:     this.min = min;
1:     this.max = max;
1:   }
1: 
1:   /** Returns a uniformly distributed random <tt>boolean</tt>. */
0:   public static boolean staticNextBoolean() {
0:     synchronized (shared) {
0:       return shared.nextBoolean();
1:     }
1:   }
1: 
1:   /**
0:    * Returns a uniformly distributed random number in the open interval <tt>(0,1)</tt> (excluding <tt>0</tt> and
0:    * <tt>1</tt>).
1:    */
0:   public static double staticNextDouble() {
0:     synchronized (shared) {
0:       return shared.nextDouble();
1:     }
1:   }
1: 
1:   /**
1:    * Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and
1:    * <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:    */
0:   public static double staticNextDoubleFromTo(double from, double to) {
0:     synchronized (shared) {
0:       return shared.nextDoubleFromTo(from, to);
1:     }
1:   }
1: 
1:   /**
1:    * Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and
1:    * <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:    */
0:   public static float staticNextFloatFromTo(float from, float to) {
0:     synchronized (shared) {
0:       return shared.nextFloatFromTo(from, to);
1:     }
1:   }
1: 
1:   /**
1:    * Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt>
1:    * and <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:    */
0:   public static int staticNextIntFromTo(int from, int to) {
0:     synchronized (shared) {
0:       return shared.nextIntFromTo(from, to);
1:     }
1:   }
1: 
1:   /**
1:    * Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt>
1:    * and <tt>to</tt>). Pre conditions: <tt>from &lt;= to</tt>.
1:    */
0:   public static long staticNextLongFromTo(long from, long to) {
0:     synchronized (shared) {
0:       return shared.nextLongFromTo(from, to);
1:     }
1:   }
1: 
1:   /**
0:    * Sets the uniform random number generation engine shared by all <b>static</b> methods.
0:    *
0:    * @param randomGenerator the new uniform random number generation engine to be shared.
1:    */
0:   public static void staticSetRandomEngine(RandomEngine randomGenerator) {
0:     synchronized (shared) {
0:       shared.setRandomGenerator(randomGenerator);
1:     }
1:   }
1: 
1:   /** Returns a String representation of the receiver. */
1:   public String toString() {
0:     return this.getClass().getName() + "(" + min + "," + max + ")";
1:   }
commit:7a9ecf4
/////////////////////////////////////////////////////////////////////////
0:   protected double min;
0:   protected double max;
0:   
0:    // The uniform random number generated shared by all <b>static</b> methods. 
0:   protected static Uniform shared = new Uniform(makeDefaultGenerator());
0:   this(min,max, new org.apache.mahout.jet.random.engine.MersenneTwister(seed));
0:   setRandomGenerator(randomGenerator);
0:   setState(min,max);
0:   this(0,1,randomGenerator);
0:   if (x <= min) return 0.0;
0:   if (x >= max) return 1.0;
0:   return (x-min) / (max-min);
0:   return randomGenerator.raw() > 0.5;
0:   return min+(max-min)*randomGenerator.raw();
0:   return from+(to-from)*randomGenerator.raw();
0:   return (float) nextDoubleFromTo(from,to);
0: public int nextInt() {  
0:   return nextIntFromTo((int)Math.round(min), (int)Math.round(max));
0: public int nextIntFromTo(int from, int to) {  
0:   return (int) ((long)from  +  (long)((1L + (long)to - (long)from)*randomGenerator.raw()));
0:   /* Doing the thing turns out to be more tricky than expected.
0:      avoids overflows and underflows.
0:      treats cases like from=-1, to=1 and the like right.
0:      the following code would NOT solve the problem: return (long) (Doubles.randomFromTo(from,to));
0:   
0:      rounding avoids the unsymmetric behaviour of casts from double to long: (long) -0.7 = 0, (long) 0.7 = 0.
0:      checking for overflows and underflows is also necessary.
0:   */
0:   
0:   // first the most likely and also the fastest case.
0:   if (from>=0 && to<Long.MAX_VALUE) {
0:     return from + (long) (nextDoubleFromTo(0.0,to-from+1));
0:   }
0:   // would we get a numeric overflow?
0:   // if not, we can still handle the case rather efficient.
0:   double diff = ((double)to) - (double)from + 1.0;
0:   if (diff <= Long.MAX_VALUE) {
0:     return from + (long) (nextDoubleFromTo(0.0,diff));
0:   }
0:   // now the pathologic boundary cases.
0:   // they are handled rather slow.
0:   long random;
0:   if (from==Long.MIN_VALUE) {
0:     if (to==Long.MAX_VALUE) {
0:       //return Math.round(nextDoubleFromTo(from,to));
0:       int i1 = nextIntFromTo(Integer.MIN_VALUE,Integer.MAX_VALUE);
0:       int i2 = nextIntFromTo(Integer.MIN_VALUE,Integer.MAX_VALUE);
0:       return ((i1 & 0xFFFFFFFFL) << 32) | (i2 & 0xFFFFFFFFL);
0:     }
0:     random = Math.round(nextDoubleFromTo(from,to+1));
0:     if (random > to) random = from;
0:   }
0:   else {
0:     random = Math.round(nextDoubleFromTo(from-1,to));
0:     if (random < from) random = to;
0:   }
0:   return random;
0:   if (x <= min || x >= max) return 0.0;
0:   return 1.0 / (max-min);
0:   if (max<min) { setState(max,min); return; }
0:   this.min=min;
0:   this.max=max;
0:   synchronized (shared) {
0:     return shared.nextBoolean();
0:   }
0:   synchronized (shared) {
0:     return shared.nextDouble();
0:   }
0:   synchronized (shared) {
0:     return shared.nextDoubleFromTo(from,to);
0:   }
0:   synchronized (shared) {
0:     return shared.nextFloatFromTo(from,to);
0:   }
0: public static int staticNextIntFromTo(int from, int to) {  
0:   synchronized (shared) {
0:     return shared.nextIntFromTo(from,to);
0:   }
0:   synchronized (shared) {
0:     return shared.nextLongFromTo(from,to);
0:   }
0:   synchronized (shared) {
0:     shared.setRandomGenerator(randomGenerator);
0:   }
0:   return this.getClass().getName()+"("+min+","+max+")";
author:Ted Dunning
-------------------------------------------------------------------------------
commit:22726e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
0: 
1: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
0:   protected static final Uniform shared = new Uniform(RandomUtils.getRandom());
1:     this(min, max, RandomUtils.getRandom(seed));
1:   public Uniform(double min, double max, Random randomGenerator) {
1:   public Uniform(Random randomGenerator) {
/////////////////////////////////////////////////////////////////////////
0:     return randomGenerator.nextDouble() > 0.5;
/////////////////////////////////////////////////////////////////////////
0:     return min + (max - min) * randomGenerator.nextDouble();
/////////////////////////////////////////////////////////////////////////
0:     return from + (to - from) * randomGenerator.nextDouble();
/////////////////////////////////////////////////////////////////////////
0:     return (int) ((long) from + (long) ((1L + (long) to - (long) from) * randomGenerator.nextDouble()));
/////////////////////////////////////////////////////////////////////////
author:Robin Anil
-------------------------------------------------------------------------------
commit:a51dd9e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    * Returns a uniformly distributed random number in the closed interval
1:    *  <tt>[from,to]</tt> (including <tt>from</tt>
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:a435efb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.jet.random;
0: import org.apache.mahout.math.jet.random.engine.MersenneTwister;
0: import org.apache.mahout.math.jet.random.engine.RandomEngine;
/////////////////////////////////////////////////////////////////////////
1:    * org.apache.mahout.math.jet.random.engine.MersenneTwister} seeded with the given seed.
commit:7550a10
/////////////////////////////////////////////////////////////////////////
1: /*
1: Copyright ï¿? 1999 CERN - European Organization for Nuclear Research.
1: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1: that both that copyright notice and this permission notice appear in supporting documentation. 
1: CERN makes no representations about the suitability of this software for any purpose. 
1: It is provided "as is" without expressed or implied warranty.
0: */
0: package org.apache.mahout.jet.random;
0: 
0: import org.apache.mahout.jet.random.engine.RandomEngine;
0: /**
0:  * Uniform distribution; <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node292.html#SECTION0002920000000000000000"> Math definition</A>
0:  * and <A HREF="http://www.statsoft.com/textbook/glosu.html#Uniform Distribution"> animated definition</A>.
0:  * <p>
0:  * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
0:  * <dt>
0:  * Static methods operate on a default uniform random number generator; they are synchronized.
0:  * <p>
0:  * @author wolfgang.hoschek@cern.ch
0:  * @version 1.0, 09/24/99
0:  */
0: /** 
0:  * @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported.
0:  */
0: @Deprecated
1: public class Uniform extends AbstractContinousDistribution {
0: 	protected double min;
0: 	protected double max;
0: 	
0:  	// The uniform random number generated shared by all <b>static</b> methods. 
0: 	protected static Uniform shared = new Uniform(makeDefaultGenerator());
0: /**
0:  * Constructs a uniform distribution with the given minimum and maximum, using a {@link org.apache.mahout.jet.random.engine.MersenneTwister} seeded with the given seed.
0:  */
0: public Uniform(double min, double max, int seed) {
0: 	this(min,max, new org.apache.mahout.jet.random.engine.MersenneTwister(seed));
0: }
0: /**
0:  * Constructs a uniform distribution with the given minimum and maximum.
0:  */
0: public Uniform(double min, double max, RandomEngine randomGenerator) {
0: 	setRandomGenerator(randomGenerator);
0: 	setState(min,max);
0: }
0: /**
0:  * Constructs a uniform distribution with <tt>min=0.0</tt> and <tt>max=1.0</tt>.
0:  */
0: public Uniform(RandomEngine randomGenerator) {
0: 	this(0,1,randomGenerator);
0: }
0: /**
0:  * Returns the cumulative distribution function (assuming a continous uniform distribution).
0:  */
0: public double cdf(double x) {
0: 	if (x <= min) return 0.0;
0: 	if (x >= max) return 1.0;
0: 	return (x-min) / (max-min);
0: }
0: /**
0:  * Returns a uniformly distributed random <tt>boolean</tt>.
0:  */
0: public boolean nextBoolean() {
0: 	return randomGenerator.raw() > 0.5;
0: }
0: /**
0:  * Returns a uniformly distributed random number in the open interval <tt>(min,max)</tt> (excluding <tt>min</tt> and <tt>max</tt>).
0:  */
0: public double nextDouble() {
0: 	return min+(max-min)*randomGenerator.raw();
0: }
0: /**
0:  * Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and <tt>to</tt>).
0:  * Pre conditions: <tt>from &lt;= to</tt>.
0:  */
0: public double nextDoubleFromTo(double from, double to) {
0: 	return from+(to-from)*randomGenerator.raw();
0: }
0: /**
0:  * Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and <tt>to</tt>).
0:  * Pre conditions: <tt>from &lt;= to</tt>.
0:  */
0: public float nextFloatFromTo(float from, float to) {
0: 	return (float) nextDoubleFromTo(from,to);
0: }
0: /**
0:  * Returns a uniformly distributed random number in the closed interval <tt>[min,max]</tt> (including <tt>min</tt> and <tt>max</tt>).
0:  */
0: public int nextInt() {	
0: 	return nextIntFromTo((int)Math.round(min), (int)Math.round(max));
0: }
0: /**
0:  * Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt> and <tt>to</tt>).
0:  * Pre conditions: <tt>from &lt;= to</tt>.
0:  */
0: public int nextIntFromTo(int from, int to) {	
0: 	return (int) ((long)from  +  (long)((1L + (long)to - (long)from)*randomGenerator.raw()));
0: }
0: /**
0:  * Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt> and <tt>to</tt>).
0:  * Pre conditions: <tt>from &lt;= to</tt>.
0:  */
0: public long nextLongFromTo(long from, long to) {
0: 	/* Doing the thing turns out to be more tricky than expected.
0: 	   avoids overflows and underflows.
0: 	   treats cases like from=-1, to=1 and the like right.
0: 	   the following code would NOT solve the problem: return (long) (Doubles.randomFromTo(from,to));
0: 	
0: 	   rounding avoids the unsymmetric behaviour of casts from double to long: (long) -0.7 = 0, (long) 0.7 = 0.
0: 	   checking for overflows and underflows is also necessary.
0: 	*/
0: 	
0: 	// first the most likely and also the fastest case.
0: 	if (from>=0 && to<Long.MAX_VALUE) {
0: 		return from + (long) (nextDoubleFromTo(0.0,to-from+1));
0: 	}
0: 
0: 	// would we get a numeric overflow?
0: 	// if not, we can still handle the case rather efficient.
0: 	double diff = ((double)to) - (double)from + 1.0;
0: 	if (diff <= Long.MAX_VALUE) {
0: 		return from + (long) (nextDoubleFromTo(0.0,diff));
0: 	}
0: 
0: 	// now the pathologic boundary cases.
0: 	// they are handled rather slow.
0: 	long random;
0: 	if (from==Long.MIN_VALUE) {
0: 		if (to==Long.MAX_VALUE) {
0: 			//return Math.round(nextDoubleFromTo(from,to));
0: 			int i1 = nextIntFromTo(Integer.MIN_VALUE,Integer.MAX_VALUE);
0: 			int i2 = nextIntFromTo(Integer.MIN_VALUE,Integer.MAX_VALUE);
0: 			return ((i1 & 0xFFFFFFFFL) << 32) | (i2 & 0xFFFFFFFFL);
0: 		}
0: 		random = Math.round(nextDoubleFromTo(from,to+1));
0: 		if (random > to) random = from;
0: 	}
0: 	else {
0: 		random = Math.round(nextDoubleFromTo(from-1,to));
0: 		if (random < from) random = to;
0: 	}
0: 	return random;
0: }
0: /**
0:  * Returns the probability distribution function (assuming a continous uniform distribution).
0:  */
0: public double pdf(double x) {
0: 	if (x <= min || x >= max) return 0.0;
0: 	return 1.0 / (max-min);
0: }
0: /**
0:  * Sets the internal state.
0:  */
0: public void setState(double min, double max) {
0: 	if (max<min) { setState(max,min); return; }
0: 	this.min=min;
0: 	this.max=max;
0: }
0: /**
0:  * Returns a uniformly distributed random <tt>boolean</tt>.
0:  */
0: public static boolean staticNextBoolean() {
0: 	synchronized (shared) {
0: 		return shared.nextBoolean();
0: 	}
0: }
0: /**
0:  * Returns a uniformly distributed random number in the open interval <tt>(0,1)</tt> (excluding <tt>0</tt> and <tt>1</tt>).
0:  */
0: public static double staticNextDouble() {
0: 	synchronized (shared) {
0: 		return shared.nextDouble();
0: 	}
0: }
0: /**
0:  * Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and <tt>to</tt>).
0:  * Pre conditions: <tt>from &lt;= to</tt>.
0:  */
0: public static double staticNextDoubleFromTo(double from, double to) {
0: 	synchronized (shared) {
0: 		return shared.nextDoubleFromTo(from,to);
0: 	}
0: }
0: /**
0:  * Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and <tt>to</tt>).
0:  * Pre conditions: <tt>from &lt;= to</tt>.
0:  */
0: public static float staticNextFloatFromTo(float from, float to) {
0: 	synchronized (shared) {
0: 		return shared.nextFloatFromTo(from,to);
0: 	}
0: }
0: /**
0:  * Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt> and <tt>to</tt>).
0:  * Pre conditions: <tt>from &lt;= to</tt>.
0:  */
0: public static int staticNextIntFromTo(int from, int to) {	
0: 	synchronized (shared) {
0: 		return shared.nextIntFromTo(from,to);
0: 	}
0: }
0: /**
0:  * Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt> and <tt>to</tt>).
0:  * Pre conditions: <tt>from &lt;= to</tt>.
0:  */
0: public static long staticNextLongFromTo(long from, long to) {
0: 	synchronized (shared) {
0: 		return shared.nextLongFromTo(from,to);
0: 	}
0: }
0: /**
0:  * Sets the uniform random number generation engine shared by all <b>static</b> methods.
0:  * @param randomGenerator the new uniform random number generation engine to be shared.
0:  */
0: public static void staticSetRandomEngine(RandomEngine randomGenerator) {
0: 	synchronized (shared) {
0: 		shared.setRandomGenerator(randomGenerator);
0: 	}
0: }
0: /**
0:  * Returns a String representation of the receiver.
0:  */
0: public String toString() {
0: 	return this.getClass().getName()+"("+min+","+max+")";
0: }
0: }
============================================================================