1:a704e17: /*
1:a704e17:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a704e17:  * contributor license agreements.  See the NOTICE file distributed with
1:a704e17:  * this work for additional information regarding copyright ownership.
1:a704e17:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a704e17:  * (the "License"); you may not use this file except in compliance with
1:a704e17:  * the License.  You may obtain a copy of the License at
1:a704e17:  *
1:a704e17:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a704e17:  *
1:a704e17:  * Unless required by applicable law or agreed to in writing, software
1:a704e17:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a704e17:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a704e17:  * See the License for the specific language governing permissions and
1:a704e17:  * limitations under the License.
2:a704e17:  */
21:a704e17: 
1:a704e17: package org.apache.mahout.classifier.sgd;
1:c0c8d9f: 
1:87d4b2e: import java.io.ByteArrayInputStream;
1:87d4b2e: import java.io.ByteArrayOutputStream;
1:87d4b2e: import java.io.DataInputStream;
1:87d4b2e: import java.io.DataOutputStream;
1:87d4b2e: import java.io.IOException;
1:87d4b2e: import java.util.Random;
1:87d4b2e: 
1:c88c240: import com.carrotsearch.randomizedtesting.annotations.ThreadLeakLingering;
1:96117d3: import com.google.common.io.Closeables;
1:02f8694: import org.apache.hadoop.io.Writable;
1:a704e17: import org.apache.mahout.classifier.OnlineLearner;
1:ff79ff4: import org.apache.mahout.common.MahoutTestCase;
1:a704e17: import org.apache.mahout.common.RandomUtils;
1:a704e17: import org.apache.mahout.math.DenseVector;
1:a704e17: import org.apache.mahout.math.Vector;
1:85ec3a3: import org.apache.mahout.math.function.DoubleFunction;
1:87d4b2e: import org.apache.mahout.math.function.Functions;
1:e6b4e35: import org.apache.mahout.math.stats.GlobalOnlineAuc;
1:a704e17: import org.apache.mahout.math.stats.OnlineAuc;
1:a704e17: import org.junit.Test;
1:02f8694: 
1:ff79ff4: public final class ModelSerializerTest extends MahoutTestCase {
1:02f8694: 
1:02f8694:   private static <T extends Writable> T roundTrip(T m, Class<T> clazz) throws IOException {
1:02f8694:     ByteArrayOutputStream buf = new ByteArrayOutputStream(1000);
1:02f8694:     DataOutputStream dos = new DataOutputStream(buf);
1:d608a88:     try {
1:d608a88:       PolymorphicWritable.write(dos, m);
1:d608a88:     } finally {
1:87d4b2e:       Closeables.close(dos, false);
1:d608a88:     }
1:02f8694:     return PolymorphicWritable.read(new DataInputStream(new ByteArrayInputStream(buf.toByteArray())), clazz);
1:02f8694:   }
1:02f8694: 
1:02f8694:   @Test
1:02f8694:   public void onlineAucRoundtrip() throws IOException {
1:c0c8d9f:     RandomUtils.useTestSeed();
1:e6b4e35:     OnlineAuc auc1 = new GlobalOnlineAuc();
1:1619a3f:     Random gen = RandomUtils.getRandom();
1:a704e17:     for (int i = 0; i < 10000; i++) {
1:a704e17:       auc1.addSample(0, gen.nextGaussian());
1:a704e17:       auc1.addSample(1, gen.nextGaussian() + 1);
1:c0c8d9f:     }
1:b500070:     assertEquals(0.76, auc1.auc(), 0.01);
1:c0c8d9f: 
1:35032b8:     OnlineAuc auc3 = roundTrip(auc1, OnlineAuc.class);
1:02f8694: 
1:02f8694:     assertEquals(auc1.auc(), auc3.auc(), 0);
1:02f8694: 
1:a704e17:     for (int i = 0; i < 1000; i++) {
1:a704e17:       auc1.addSample(0, gen.nextGaussian());
1:a704e17:       auc1.addSample(1, gen.nextGaussian() + 1);
1:b500070: 
1:02f8694:       auc3.addSample(0, gen.nextGaussian());
1:02f8694:       auc3.addSample(1, gen.nextGaussian() + 1);
1:b500070:     }
1:b500070: 
1:02f8694:     assertEquals(auc1.auc(), auc3.auc(), 0.01);
8:a704e17:   }
1:b500070: 
6:a704e17:   @Test
1:02f8694:   public void onlineLogisticRegressionRoundTrip() throws IOException {
1:a704e17:     OnlineLogisticRegression olr = new OnlineLogisticRegression(2, 5, new L1());
1:a704e17:     train(olr, 100);
1:02f8694:     OnlineLogisticRegression olr3 = roundTrip(olr, OnlineLogisticRegression.class);
1:02f8694:     assertEquals(0, olr.getBeta().minus(olr3.getBeta()).aggregate(Functions.MAX, Functions.IDENTITY), 1.0e-6);
1:b500070: 
1:a704e17:     train(olr, 100);
1:02f8694:     train(olr3, 100);
1:b500070: 
1:02f8694:     assertEquals(0, olr.getBeta().minus(olr3.getBeta()).aggregate(Functions.MAX, Functions.IDENTITY), 1.0e-6);
1:c88c240:     olr.close();
1:c88c240:     olr3.close();
1:a704e17:   }
1:a704e17: 
1:a704e17:   @Test
1:02f8694:   public void crossFoldLearnerRoundTrip() throws IOException {
1:a704e17:     CrossFoldLearner learner = new CrossFoldLearner(5, 2, 5, new L1());
1:a704e17:     train(learner, 100);
1:35032b8:     CrossFoldLearner olr3 = roundTrip(learner, CrossFoldLearner.class);
1:a704e17:     double auc1 = learner.auc();
1:a704e17:     assertTrue(auc1 > 0.85);
1:35032b8:     assertEquals(auc1, learner.auc(), 1.0e-6);
1:02f8694:     assertEquals(auc1, olr3.auc(), 1.0e-6);
1:a704e17: 
1:35032b8:     train(learner, 100);
1:a704e17:     train(learner, 100);
1:02f8694:     train(olr3, 100);
1:a704e17: 
1:35032b8:     assertEquals(learner.auc(), learner.auc(), 0.02);
1:02f8694:     assertEquals(learner.auc(), olr3.auc(), 0.02);
1:a704e17:     double auc2 = learner.auc();
2:a704e17:     assertTrue(auc2 > auc1);
1:c88c240:     learner.close();
1:c88c240:     olr3.close();
1:a704e17:   }
1:a704e17: 
1:c88c240:   @ThreadLeakLingering(linger = 1000)
1:d0dc388:   @Test
1:02f8694:   public void adaptiveLogisticRegressionRoundTrip() throws IOException {
1:a704e17:     AdaptiveLogisticRegression learner = new AdaptiveLogisticRegression(2, 5, new L1());
1:a704e17:     learner.setInterval(200);
1:7ab7df7:     train(learner, 400);
1:02f8694:     AdaptiveLogisticRegression olr3 = roundTrip(learner, AdaptiveLogisticRegression.class);
1:a704e17:     double auc1 = learner.auc();
1:a704e17:     assertTrue(auc1 > 0.85);
1:35032b8:     assertEquals(auc1, learner.auc(), 1.0e-6);
1:02f8694:     assertEquals(auc1, olr3.auc(), 1.0e-6);
1:a704e17: 
2:a704e17:     train(learner, 1000);
1:35032b8:     train(learner, 1000);
1:02f8694:     train(olr3, 1000);
1:a704e17: 
1:35032b8:     assertEquals(learner.auc(), learner.auc(), 0.005);
1:02f8694:     assertEquals(learner.auc(), olr3.auc(), 0.005);
1:a704e17:     double auc2 = learner.auc();
1:7ab7df7:     assertTrue(String.format("%.3f > %.3f", auc2, auc1), auc2 > auc1);
1:c88c240:     learner.close();
1:c88c240:     olr3.close();
1:a704e17:   }
1:a704e17: 
1:c0c8d9f:   private static void train(OnlineLearner olr, int n) {
1:a704e17:     Vector beta = new DenseVector(new double[]{1, -1, 0, 0.5, -0.5});
1:1619a3f:     Random gen = RandomUtils.getRandom();
1:a704e17:     for (int i = 0; i < n; i++) {
1:a704e17:       Vector x = randomVector(gen, 5);
1:a704e17: 
1:a704e17:       int target = gen.nextDouble() < beta.dot(x) ? 1 : 0;
1:a704e17:       olr.train(target, x);
1:a704e17:     }
1:a704e17:   }
1:a704e17: 
1:c0c8d9f:   private static Vector randomVector(final Random gen, int n) {
1:a704e17:     Vector x = new DenseVector(n);
1:85ec3a3:     x.assign(new DoubleFunction() {
1:a704e17:       @Override
1:a704e17:       public double apply(double v) {
1:a704e17:         return gen.nextGaussian();
1:a704e17:       }
1:a704e17:     });
1:a704e17:     return x;
1:a704e17:   }
1:a704e17: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:c88c240
/////////////////////////////////////////////////////////////////////////
1: import com.carrotsearch.randomizedtesting.annotations.ThreadLeakLingering;
/////////////////////////////////////////////////////////////////////////
1:     olr.close();
1:     olr3.close();
/////////////////////////////////////////////////////////////////////////
1:     learner.close();
1:     olr3.close();
1:   @ThreadLeakLingering(linger = 1000)
/////////////////////////////////////////////////////////////////////////
1:     learner.close();
1:     olr3.close();
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.util.Random;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(dos, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(dos, true);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:96117d3
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:       Closeables.closeQuietly(dos);
commit:35032b8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     OnlineAuc auc3 = roundTrip(auc1, OnlineAuc.class);
/////////////////////////////////////////////////////////////////////////
1:     CrossFoldLearner olr3 = roundTrip(learner, CrossFoldLearner.class);
1:     assertEquals(auc1, learner.auc(), 1.0e-6);
1:     train(learner, 100);
1:     assertEquals(learner.auc(), learner.auc(), 0.02);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(auc1, learner.auc(), 1.0e-6);
1:     train(learner, 1000);
1:     assertEquals(learner.auc(), learner.auc(), 0.005);
commit:85ec3a3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.DoubleFunction;
/////////////////////////////////////////////////////////////////////////
1:     x.assign(new DoubleFunction() {
commit:58fd277
/////////////////////////////////////////////////////////////////////////
0:     private OnlineAuc foo;
0:     private double pig;
0:     private int dog;
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
0:     assertEquals((-18.420680743952367 - 2.3025850929940455) / 2, m.apply(0), 1.0e-6);
0:     assertEquals((-18.420680743952367 - 2.3025850929940455) / 2, m.apply(0), 1.0e-6);
commit:1619a3f
/////////////////////////////////////////////////////////////////////////
1:     Random gen = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
1:     Random gen = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
0:     Random gen = RandomUtils.getRandom();
commit:3f1450a
/////////////////////////////////////////////////////////////////////////
0:     Random gen = RandomUtils.getRandom(2L);
/////////////////////////////////////////////////////////////////////////
0:     Random gen = RandomUtils.getRandom(1L);
/////////////////////////////////////////////////////////////////////////
0:     Random gen = RandomUtils.getRandom(1L);
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public final class ModelSerializerTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
0:     Random gen = new Random(1);
commit:c0c8d9f
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1: 
0:   @Before
0:   public void setUp() {
1:     RandomUtils.useTestSeed();
1:   }
1: 
0:     assertEquals((-18.420680743952367 + -2.3025850929940455) / 2, m.apply(0), 1.0e-6);
0:     assertEquals((-18.420680743952367 + -2.3025850929940455) / 2, m.apply(0), 1.0e-6);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(Math.sqrt(Math.exp(-18.420680743952367) * Math.exp(-2.3025850929940455)), m.apply(0), 1.0e-6);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(0, olr.getBeta().minus(olr2.getBeta()).aggregate(Functions.MAX, Functions.IDENTITY), 1.0e-6);
0:     assertEquals(0, olr.getBeta().minus(olr2.getBeta()).aggregate(Functions.MAX, Functions.IDENTITY), 1.0e-6);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(auc1, olr2.auc(), 1.0e-6);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(auc1, olr2.auc(), 1.0e-6);
/////////////////////////////////////////////////////////////////////////
0:       AdaptiveLogisticRegression.TrainingExample t =
0:           new AdaptiveLogisticRegression.TrainingExample(i, i % 3, randomVector(gen, 5));
/////////////////////////////////////////////////////////////////////////
0:       assertEquals(0, example.getInstance().minus(example2.getInstance()).maxValue(), 1.0e-6);
1:   private static void train(OnlineLearner olr, int n) {
/////////////////////////////////////////////////////////////////////////
1:   private static Vector randomVector(final Random gen, int n) {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d608a88
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       PolymorphicWritable.write(dos, m);
1:     } finally {
0:       dos.close();
1:     }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:02f8694
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Writable;
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0:   public void testSoftLimitDeserialization() throws IOException {
0:     Mapping m2 = roundTrip(m, Mapping.class);
0:     assertTrue(m2 instanceof Mapping.SoftLimit);
0:     assertEquals((-18.420680743952367 - 2.3025850929940455) / 2, m2.apply(0), 1.0e-6);
1: 
0:     m = ModelSerializer.loadJsonFrom(new StringReader(data), Mapping.class);
1:   private static <T extends Writable> T roundTrip(T m, Class<T> clazz) throws IOException {
1:     ByteArrayOutputStream buf = new ByteArrayOutputStream(1000);
1:     DataOutputStream dos = new DataOutputStream(buf);
0:     PolymorphicWritable.write(dos, m);
0:     dos.close();
1: 
1:     return PolymorphicWritable.read(new DataInputStream(new ByteArrayInputStream(buf.toByteArray())), clazz);
0:   public void testMappingDeserialization() throws IOException {
0:     String data = "{\"class\":\"org.apache.mahout.ep.Mapping$LogLimit\",\"value\":{\"wrapped\":{\"class\":\"org.apache.mahout.ep.Mapping$SoftLimit\",\"value\":{\"min\":-18.420680743952367,\"max\":-2.3025850929940455,\"scale\":1.0}}}}";
0:     Mapping m = ModelSerializer.loadJsonFrom(new StringReader(data), Mapping.class);
0:     assertTrue(m instanceof Mapping.LogLimit);
0:     assertEquals(Math.sqrt(Math.exp(-18.420680743952367) * Math.exp(-2.3025850929940455)), m.apply(0), 1.0e-6);
1: 
0:     Mapping m2 = roundTrip(m, Mapping.class);
0:     assertTrue(m2 instanceof Mapping.LogLimit);
0:     assertEquals(Math.sqrt(Math.exp(-18.420680743952367) * Math.exp(-2.3025850929940455)), m2.apply(0), 1.0e-6);
1:   }
1: 
1:   @Test
1:   public void onlineAucRoundtrip() throws IOException {
/////////////////////////////////////////////////////////////////////////
0:     String s = ModelSerializer.gson().toJson(auc1);
0:     OnlineAuc auc2 = ModelSerializer.gson().fromJson(s, GlobalOnlineAuc.class);
0:     OnlineAuc auc3 = roundTrip(auc2, OnlineAuc.class);
1:     assertEquals(auc1.auc(), auc3.auc(), 0);
/////////////////////////////////////////////////////////////////////////
1: 
1:       auc3.addSample(0, gen.nextGaussian());
1:       auc3.addSample(1, gen.nextGaussian() + 1);
1:     assertEquals(auc1.auc(), auc3.auc(), 0.01);
0:     s = ModelSerializer.gson().toJson(x);
0:     Foo y = ModelSerializer.gson().fromJson(s, Foo.class);
/////////////////////////////////////////////////////////////////////////
1:   public void onlineLogisticRegressionRoundTrip() throws IOException {
1:     OnlineLogisticRegression olr3 = roundTrip(olr, OnlineLogisticRegression.class);
1:     assertEquals(0, olr.getBeta().minus(olr3.getBeta()).aggregate(Functions.MAX, Functions.IDENTITY), 1.0e-6);
1:     train(olr3, 100);
1:     assertEquals(0, olr.getBeta().minus(olr3.getBeta()).aggregate(Functions.MAX, Functions.IDENTITY), 1.0e-6);
1:   public void crossFoldLearnerRoundTrip() throws IOException {
0:     CrossFoldLearner olr3 = roundTrip(olr2, CrossFoldLearner.class);
1:     assertEquals(auc1, olr3.auc(), 1.0e-6);
1:     train(olr3, 100);
1:     assertEquals(learner.auc(), olr3.auc(), 0.02);
1:   public void adaptiveLogisticRegressionRoundTrip() throws IOException {
0:     String s = ModelSerializer.gson().toJson(learner);
0:     AdaptiveLogisticRegression olr2 = ModelSerializer.gson().fromJson(new StringReader(s), AdaptiveLogisticRegression.class);
1:     AdaptiveLogisticRegression olr3 = roundTrip(learner, AdaptiveLogisticRegression.class);
1:     assertEquals(auc1, olr3.auc(), 1.0e-6);
1:     train(olr3, 1000);
1:     assertEquals(learner.auc(), olr3.auc(), 0.005);
commit:d0dc388
/////////////////////////////////////////////////////////////////////////
1:   @Test
commit:b801629
/////////////////////////////////////////////////////////////////////////
0: //  @Test
commit:b500070
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0.76, auc1.auc(), 0.01);
/////////////////////////////////////////////////////////////////////////
1: 
0:     Foo x = new Foo();
0:     x.foo = auc1;
0:     x.pig = 3.13;
0:     x.dog = 42;
1: 
0:     s = gson.toJson(x);
1: 
0:     Foo y = gson.fromJson(s, Foo.class);
1: 
0:     assertEquals(auc1.auc(), y.foo.auc(), 0.01);
1:   }
1: 
0:   public static class Foo {
0:     OnlineAuc foo;
0:     double pig;
0:     int dog;
commit:e6b4e35
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.stats.GlobalOnlineAuc;
/////////////////////////////////////////////////////////////////////////
1:     OnlineAuc auc1 = new GlobalOnlineAuc();
/////////////////////////////////////////////////////////////////////////
0:     OnlineAuc auc2 = gson.fromJson(s, GlobalOnlineAuc.class);
/////////////////////////////////////////////////////////////////////////
0:           new AdaptiveLogisticRegression.TrainingExample(i, null, i % 3, randomVector(gen, 5));
commit:7ab7df7
/////////////////////////////////////////////////////////////////////////
1:     train(learner, 400);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(learner.auc(), olr2.auc(), 0.005);
1:     assertTrue(String.format("%.3f > %.3f", auc2, auc1), auc2 > auc1);
commit:a704e17
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
0: import com.google.common.collect.Lists;
0: import com.google.gson.Gson;
0: import com.google.gson.reflect.TypeToken;
1: import org.apache.mahout.classifier.OnlineLearner;
1: import org.apache.mahout.common.RandomUtils;
0: import org.apache.mahout.ep.Mapping;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.math.function.Functions;
0: import org.apache.mahout.math.function.UnaryFunction;
1: import org.apache.mahout.math.stats.OnlineAuc;
1: import org.junit.Test;
1: 
0: import java.io.StringReader;
0: import java.lang.reflect.Type;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Random;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
0: /**
0:  * Created by IntelliJ IDEA. User: tdunning Date: Aug 31, 2010 Time: 6:45:22 PM To change this
0:  * template use File | Settings | File Templates.
1:  */
0: public class ModelSerializerTest {
1:   @Test
0:   public void testSoftLimitDeserialization() {
0:     Mapping m = ModelSerializer.gson().fromJson(new StringReader("{\"min\":-18.420680743952367,\"max\":-2.3025850929940455,\"scale\":1.0}"), Mapping.SoftLimit.class);
0:     assertTrue(m instanceof Mapping.SoftLimit);
0:     assertEquals((-18.420680743952367 + -2.3025850929940455) / 2, m.apply(0), 1e-6);
1: 
0:     String data = "{\"class\":\"org.apache.mahout.ep.Mapping$SoftLimit\",\"value\":{\"min\":-18.420680743952367,\"max\":-2.3025850929940455,\"scale\":1.0}}";
0:     m = ModelSerializer.gson().fromJson(new StringReader(data), Mapping.class);
0:     assertTrue(m instanceof Mapping.SoftLimit);
0:     assertEquals((-18.420680743952367 + -2.3025850929940455) / 2, m.apply(0), 1e-6);
1:   }
1: 
1:   @Test
0:   public void testMappingDeserialization() {
0:     String data = "{\"class\":\"org.apache.mahout.ep.Mapping$LogLimit\",\"value\":{\"wrapped\":{\"class\":\"org.apache.mahout.ep.Mapping$SoftLimit\",\"value\":{\"min\":-18.420680743952367,\"max\":-2.3025850929940455,\"scale\":1.0}}}}";
0:     Mapping m = ModelSerializer.gson().fromJson(new StringReader(data), Mapping.class);
0:     assertTrue(m instanceof Mapping.LogLimit);
0:     assertEquals(Math.sqrt(Math.exp(-18.420680743952367) * Math.exp(-2.3025850929940455)), m.apply(0), 1e-6);
1:   }
1: 
1:   @Test
0:   public void onlineAucRoundtrip() {
0:     RandomUtils.useTestSeed();
0:     OnlineAuc auc1 = new OnlineAuc();
0:     Random gen = new Random(2);
1:     for (int i = 0; i < 10000; i++) {
1:       auc1.addSample(0, gen.nextGaussian());
1:       auc1.addSample(1, gen.nextGaussian() + 1);
1:     }
0:     assertEquals(0.76, auc1.auc(), 0.04);
1: 
0:     Gson gson = ModelSerializer.gson();
0:     String s = gson.toJson(auc1);
1: 
0:     OnlineAuc auc2 = gson.fromJson(s, OnlineAuc.class);
1: 
0:     assertEquals(auc1.auc(), auc2.auc(), 0);
1: 
1:     for (int i = 0; i < 1000; i++) {
1:       auc1.addSample(0, gen.nextGaussian());
1:       auc1.addSample(1, gen.nextGaussian() + 1);
1: 
0:       auc2.addSample(0, gen.nextGaussian());
0:       auc2.addSample(1, gen.nextGaussian() + 1);
1:     }
1: 
0:     assertEquals(auc1.auc(), auc2.auc(), 0.01);
1:   }
1: 
1:   @Test
0:   public void onlineLogisticRegressionRoundTrip() {
1:     OnlineLogisticRegression olr = new OnlineLogisticRegression(2, 5, new L1());
1:     train(olr, 100);
0:     Gson gson = ModelSerializer.gson();
0:     String s = gson.toJson(olr);
0:     OnlineLogisticRegression olr2 = gson.fromJson(new StringReader(s), OnlineLogisticRegression.class);
0:     assertEquals(0, olr.getBeta().minus(olr2.getBeta()).aggregate(Functions.MAX, Functions.IDENTITY), 1e-6);
1: 
1:     train(olr, 100);
0:     train(olr2, 100);
1: 
0:     assertEquals(0, olr.getBeta().minus(olr2.getBeta()).aggregate(Functions.MAX, Functions.IDENTITY), 1e-6);
1:   }
1: 
1:   @Test
0:   public void crossFoldLearnerRoundTrip() {
1:     CrossFoldLearner learner = new CrossFoldLearner(5, 2, 5, new L1());
1:     train(learner, 100);
0:     Gson gson = ModelSerializer.gson();
0:     String s = gson.toJson(learner);
0:     CrossFoldLearner olr2 = gson.fromJson(new StringReader(s), CrossFoldLearner.class);
1:     double auc1 = learner.auc();
1:     assertTrue(auc1 > 0.85);
0:     assertEquals(auc1, olr2.auc(), 1e-6);
1: 
1:     train(learner, 100);
0:     train(olr2, 100);
1: 
0:     assertEquals(learner.auc(), olr2.auc(), 0.02);
1:     double auc2 = learner.auc();
1:     assertTrue(auc2 > auc1);
1:   }
1: 
1:   @Test
0:   public void adaptiveLogisticRegressionRoundTrip() {
1:     AdaptiveLogisticRegression learner = new AdaptiveLogisticRegression(2, 5, new L1());
1:     learner.setInterval(200);
1:     train(learner, 1000);
0:     Gson gson = ModelSerializer.gson();
0:     String s = gson.toJson(learner);
0:     AdaptiveLogisticRegression olr2 = gson.fromJson(new StringReader(s), AdaptiveLogisticRegression.class);
1:     double auc1 = learner.auc();
1:     assertTrue(auc1 > 0.85);
0:     assertEquals(auc1, olr2.auc(), 1e-6);
1: 
1:     train(learner, 1000);
0:     train(olr2, 1000);
1: 
0:     assertEquals(learner.auc(), olr2.auc(), 0.02);
1:     double auc2 = learner.auc();
1:     assertTrue(auc2 > auc1);
1:   }
1: 
1:   @Test
0:   public void trainingExampleList() {
0:     Random gen = new Random(1);
0:     List<AdaptiveLogisticRegression.TrainingExample> x1 = Lists.newArrayList();
0:     for (int i = 0; i < 10; i++) {
0:       AdaptiveLogisticRegression.TrainingExample t = new AdaptiveLogisticRegression.TrainingExample(i, i % 3, randomVector(gen, 5));
0:       x1.add(t);
1:     }
1: 
0:     Gson gson = ModelSerializer.gson();
0:     Type listType = new TypeToken<List<AdaptiveLogisticRegression.TrainingExample>>() {
0:     }.getType();
0:     String s = gson.toJson(x1, listType);
1: 
0:     List<AdaptiveLogisticRegression.TrainingExample> x2 = gson.fromJson(new StringReader(s), listType);
1: 
0:     assertEquals(x1.size(), x2.size());
0:     Iterator<AdaptiveLogisticRegression.TrainingExample> it = x2.iterator();
0:     for (AdaptiveLogisticRegression.TrainingExample example : x1) {
0:       AdaptiveLogisticRegression.TrainingExample example2 = it.next();
0:       assertEquals(example.getKey(), example2.getKey());
0:       assertEquals(0, example.getInstance().minus(example2.getInstance()).maxValue(), 1e-6);
0:       assertEquals(example.getActual(), example2.getActual());
1:     }
1:   }
1: 
0:   private void train(OnlineLearner olr, int n) {
1:     Vector beta = new DenseVector(new double[]{1, -1, 0, 0.5, -0.5});
0:     final Random gen = new Random(1);
1:     for (int i = 0; i < n; i++) {
1:       Vector x = randomVector(gen, 5);
1: 
1:       int target = gen.nextDouble() < beta.dot(x) ? 1 : 0;
1:       olr.train(target, x);
1:     }
1:   }
1: 
0:   private Vector randomVector(final Random gen, int n) {
1:     Vector x = new DenseVector(n);
0:     x.assign(new UnaryFunction() {
1:       @Override
1:       public double apply(double v) {
1:         return gen.nextGaussian();
1:       }
1:     });
1:     return x;
1:   }
1: }
============================================================================