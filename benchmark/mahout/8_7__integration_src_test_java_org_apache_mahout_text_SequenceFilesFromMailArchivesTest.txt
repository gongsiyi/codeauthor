2:c36923f: /**
1:c36923f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c36923f:  * contributor license agreements.  See the NOTICE file distributed with
1:c36923f:  * this work for additional information regarding copyright ownership.
1:c36923f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c36923f:  * (the "License"); you may not use this file except in compliance with
1:c36923f:  * the License.  You may obtain a copy of the License at
1:c36923f:  *
1:c36923f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c36923f:  *
1:c36923f:  * Unless required by applicable law or agreed to in writing, software
1:c36923f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c36923f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c36923f:  * See the License for the specific language governing permissions and
1:c36923f:  * limitations under the License.
2:c36923f:  */
1:c36923f: package org.apache.mahout.text;
14:c36923f: 
1:c36923f: import java.io.File;
1:c36923f: import java.io.FileOutputStream;
1:c36923f: import java.util.zip.GZIPOutputStream;
1:b381afd: 
1:3a284f5: import org.apache.commons.lang3.SystemUtils;
1:c36923f: import org.apache.hadoop.conf.Configuration;
1:d711ac1: import org.apache.hadoop.fs.FileStatus;
1:d711ac1: import org.apache.hadoop.fs.FileSystem;
1:c36923f: import org.apache.hadoop.fs.Path;
1:c36923f: import org.apache.hadoop.io.Text;
1:b381afd: import org.apache.mahout.common.MahoutTestCase;
1:a13b4b7: import org.apache.mahout.common.Pair;
1:a13b4b7: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterator;
1:a13b4b7: import org.junit.Assert;
1:c36923f: import org.junit.Before;
1:c36923f: import org.junit.Test;
1:c36923f: 
1:c36923f: /**
1:c36923f:  * Test case for the SequenceFilesFromMailArchives command-line application.
1:c36923f:  */
1:281156e: public final class SequenceFilesFromMailArchivesTest extends MahoutTestCase {
1:d711ac1: 
1:d711ac1:   private File inputDir;
1:c36923f: 
1:c36923f:   /**
1:c36923f:    * Create the input and output directories needed for testing
1:c36923f:    * the SequenceFilesFromMailArchives application.
1:c36923f:    */
1:208aa07:   @Override
1:c36923f:   @Before
1:281156e:   public void setUp() throws Exception {
1:281156e:     super.setUp();
1:281156e:     inputDir = getTestTempDir("mail-archives-in");
1:d711ac1: 
1:c36923f:     // write test mail messages to a gzipped file in a nested directory
1:c36923f:     File subDir = new File(inputDir, "subdir");
1:c36923f:     subDir.mkdir();
1:c36923f:     File gzFile = new File(subDir, "mail-messages.gz");
1:85f9ece:     try (GZIPOutputStream gzOut = new GZIPOutputStream(new FileOutputStream(gzFile))) {
1:c36923f:       gzOut.write(testMailMessages.getBytes("UTF-8"));
1:c36923f:       gzOut.finish();
1:d711ac1:     }
1:d711ac1:     
1:d711ac1:     File subDir2 = new File(subDir, "subsubdir");
1:d711ac1:     subDir2.mkdir();
1:d711ac1:     File gzFile2 = new File(subDir2, "mail-messages-2.gz");
1:85f9ece:     try (GZIPOutputStream gzOut = new GZIPOutputStream(new FileOutputStream(gzFile2))) {
1:d711ac1:       gzOut.write(testMailMessages.getBytes("UTF-8"));
1:d711ac1:       gzOut.finish();
1:85f9ece:     }
13:c36923f:   }
1:c36923f: 
1:c36923f:   @Test
1:d711ac1:   public void testSequential() throws Exception {
1:d711ac1: 
1:d711ac1:     File outputDir = this.getTestTempDir("mail-archives-out");
1:d711ac1: 
1:a13b4b7:     String[] args = {
1:d711ac1:       "--input", inputDir.getAbsolutePath(),
1:c36923f:       "--output", outputDir.getAbsolutePath(),
1:c36923f:       "--charset", "UTF-8",
1:29a7f38:       "--keyPrefix", "TEST",
1:d711ac1:       "--method", "sequential",
1:d711ac1:       "--body", "--subject", "--separator", ""
1:c36923f:     };
1:d711ac1: 
1:c36923f:     // run the application's main method
1:c36923f:     SequenceFilesFromMailArchives.main(args);
1:d711ac1: 
1:d711ac1:     // app should create a single SequenceFile named "chunk-0" in the output dir
1:c36923f:     File expectedChunkFile = new File(outputDir, "chunk-0");
1:c36923f:     String expectedChunkPath = expectedChunkFile.getAbsolutePath();
1:d711ac1:     Assert.assertTrue("Expected chunk file " + expectedChunkPath + " not found!", expectedChunkFile.isFile());
1:c36923f: 
1:921e201:     Configuration conf = getConfiguration();
1:85f9ece:     SequenceFileIterator<Text, Text> iterator = new SequenceFileIterator<>(new Path(expectedChunkPath), true, conf);
1:a13b4b7:     Assert.assertTrue("First key/value pair not found!", iterator.hasNext());
1:d711ac1:     Pair<Text, Text> record = iterator.next();
1:c36923f: 
1:281156e:     File parentFile = new File(new File(new File("TEST"), "subdir"), "mail-messages.gz");
1:d711ac1:     Assert.assertEquals(new File(parentFile, testVars[0][0]).toString(), record.getFirst().toString());
1:d711ac1:     Assert.assertEquals(testVars[0][1] + testVars[0][2], record.getSecond().toString());
1:d711ac1: 
1:d711ac1:     Assert.assertTrue("Second key/value pair not found!", iterator.hasNext());
1:d711ac1: 
1:d711ac1:     record = iterator.next();
2:d711ac1:     Assert.assertEquals(new File(parentFile, testVars[1][0]).toString(), record.getFirst().toString());
1:d711ac1:     Assert.assertEquals(testVars[1][1] + testVars[1][2], record.getSecond().toString());
1:d711ac1: 
1:d711ac1:     record = iterator.next();
1:d711ac1:     File parentFileSubSubDir = new File(new File(new File(new File("TEST"), "subdir"), "subsubdir"), "mail-messages-2.gz");
2:d711ac1:     Assert.assertEquals(new File(parentFileSubSubDir, testVars[0][0]).toString(), record.getFirst().toString());
1:d711ac1:     Assert.assertEquals(testVars[0][1] + testVars[0][2], record.getSecond().toString());
1:c36923f: 
1:a13b4b7:     Assert.assertTrue("Second key/value pair not found!", iterator.hasNext());
1:a13b4b7:     record = iterator.next();
2:d711ac1:     Assert.assertEquals(new File(parentFileSubSubDir, testVars[1][0]).toString(), record.getFirst().toString());
1:d711ac1:     Assert.assertEquals(testVars[1][1] + testVars[1][2], record.getSecond().toString());
1:c36923f: 
1:a13b4b7:     Assert.assertFalse("Only two key/value pairs expected!", iterator.hasNext());
1:c36923f:   }
1:c36923f: 
1:d711ac1:   @Test
1:d711ac1:   public void testMapReduce() throws Exception {
1:d711ac1: 
1:e8cd230:     Path tmpDir = getTestTempDirPath();
1:d711ac1:     Path mrOutputDir = new Path(tmpDir, "mail-archives-out-mr");
1:921e201:     Configuration configuration = getConfiguration();
1:d711ac1:     FileSystem fs = FileSystem.get(configuration);
1:d711ac1: 
1:d711ac1:     File expectedInputFile = new File(inputDir.toString());
1:d711ac1: 
1:d711ac1:     String[] args = {
1:e8cd230:       "-Dhadoop.tmp.dir=" + configuration.get("hadoop.tmp.dir"),
1:d711ac1:       "--input", expectedInputFile.getAbsolutePath(),
1:d711ac1:       "--output", mrOutputDir.toString(),
1:d711ac1:       "--charset", "UTF-8",
1:d711ac1:       "--keyPrefix", "TEST",
1:d711ac1:       "--method", "mapreduce",
1:d711ac1:       "--body", "--subject", "--separator", ""
1:d711ac1:     };
1:d711ac1: 
1:d711ac1:     // run the application's main method
1:d711ac1:     SequenceFilesFromMailArchives.main(args);
1:d711ac1: 
1:d711ac1:     // app should create a single SequenceFile named "chunk-0" in the output dir
1:d711ac1:     FileStatus[] fileStatuses = fs.listStatus(mrOutputDir.suffix("/part-m-00000"));
1:d711ac1:     assertEquals(1, fileStatuses.length); // only one
1:d711ac1:     assertEquals("part-m-00000", fileStatuses[0].getPath().getName());
1:d711ac1:     SequenceFileIterator<Text, Text> iterator =
1:85f9ece:       new SequenceFileIterator<>(mrOutputDir.suffix("/part-m-00000"), true, configuration);
1:d711ac1: 
1:d711ac1:     Assert.assertTrue("First key/value pair not found!", iterator.hasNext());
1:d711ac1:     Pair<Text, Text> record = iterator.next();
1:d711ac1: 
1:d711ac1:     File parentFileSubSubDir = new File(new File(new File(new File("TEST"), "subdir"), "subsubdir"), "mail-messages-2.gz");
1:d711ac1: 
1:3a284f5:     String expected = record.getFirst().toString();
1:3a284f5:     if (SystemUtils.IS_OS_WINDOWS) {
1:3a284f5:       expected = expected.replace("/", "\\");
1:3a284f5:     }
1:3a284f5:     Assert.assertEquals(new File(parentFileSubSubDir, testVars[0][0]).toString(), expected);
1:d711ac1:     Assert.assertEquals(testVars[0][1] + testVars[0][2], record.getSecond().toString());
1:d711ac1:     Assert.assertTrue("Second key/value pair not found!", iterator.hasNext());
1:d711ac1: 
1:d711ac1:     record = iterator.next();
1:3a284f5:     expected = record.getFirst().toString();
1:3a284f5:     if (SystemUtils.IS_OS_WINDOWS) {
1:3a284f5:       expected = expected.replace("/", "\\");
1:3a284f5:     }
1:3a284f5:     Assert.assertEquals(new File(parentFileSubSubDir, testVars[1][0]).toString(), expected);
1:d711ac1:     Assert.assertEquals(testVars[1][1] + testVars[1][2], record.getSecond().toString());
1:d711ac1: 
1:d711ac1:     // test other file
1:d711ac1:     File parentFile = new File(new File(new File("TEST"), "subdir"), "mail-messages.gz");
1:d711ac1:     record = iterator.next();
1:3a284f5:     expected = record.getFirst().toString();
1:3a284f5:     if (SystemUtils.IS_OS_WINDOWS) {
1:3a284f5:       expected = expected.replace("/", "\\");
1:3a284f5:     }
1:3a284f5:     Assert.assertEquals(new File(parentFile, testVars[0][0]).toString(), expected);
1:d711ac1:     Assert.assertEquals(testVars[0][1] + testVars[0][2], record.getSecond().toString());
1:d711ac1:     Assert.assertTrue("Second key/value pair not found!", iterator.hasNext());
1:d711ac1: 
1:d711ac1:     record = iterator.next();
1:3a284f5:     expected = record.getFirst().toString();
1:3a284f5:     if (SystemUtils.IS_OS_WINDOWS) {
1:3a284f5:       expected = expected.replace("/", "\\");
1:3a284f5:     }
1:3a284f5:     Assert.assertEquals(new File(parentFile, testVars[1][0]).toString(), expected);
1:d711ac1:     Assert.assertEquals(testVars[1][1] + testVars[1][2], record.getSecond().toString());
1:d711ac1:     Assert.assertFalse("Only four key/value pairs expected!", iterator.hasNext());
1:d711ac1:   }
1:d711ac1: 
1:d711ac1:   // Messages extracted and made anonymous from the ASF mail archives
1:a13b4b7:   private static final String[][] testVars = {
1:c36923f:     new String[] {
1:c36923f:       "user@example.com",
1:d711ac1:       "Ant task for JDK1.1 collections build option",
1:c36923f:       "\nThis is just a test message\n--\nTesty McTester\n"
1:c36923f:     },
1:c36923f:     new String[] {
1:c36923f:       "somebody@example.com",
1:c36923f:       "Problem with build files in several directories",
1:c36923f:       "\nHi all,\nThis is another test message.\nRegards,\nAnother Test\n"
1:c36923f:     }
1:c36923f:   };
1:d711ac1: 
1:c36923f:   private static final String testMailMessages =
1:44459bd:     "From user@example.com  Mon Jul 24 19:13:53 2000\n"
1:d711ac1:       + "Return-Path: <user@example.com>\n"
1:d711ac1:       + "Mailing-List: contact ant-user-help@jakarta.apache.org; run by ezmlm\n"
1:d711ac1:       + "Delivered-To: mailing list ant-user@jakarta.apache.org\n"
1:d711ac1:       + "Received: (qmail 49267 invoked from network); 24 Jul 2000 19:13:53 -0000\n"
1:d711ac1:       + "Message-ID: <" + testVars[0][0] + ">\n"
1:d711ac1:       + "From: \"Testy McTester\" <user@example.com>\n"
1:d711ac1:       + "To: <ant-user@jakarta.apache.org>\n"
1:d711ac1:       + "Subject: " + testVars[0][1] + '\n'
1:d711ac1:       + "Date: Mon, 24 Jul 2000 12:24:56 -0700\n"
1:d711ac1:       + "MIME-Version: 1.0\n"
1:d711ac1:       + "Content-Type: text/plain;\n"
1:d711ac1:       + "  charset=\"Windows-1252\"\n"
1:d711ac1:       + "Content-Transfer-Encoding: 7bit\n"
1:d711ac1:       + "X-Spam-Rating: locus.apache.org 1.6.2 0/1000/N\n"
1:d711ac1:       + testVars[0][2] + '\n'
1:d711ac1:       + "From somebody@example.com  Wed Jul 26 11:32:16 2000\n"
1:d711ac1:       + "Return-Path: <somebody@example.com>\n"
1:d711ac1:       + "Mailing-List: contact ant-user-help@jakarta.apache.org; run by ezmlm\n"
1:d711ac1:       + "Delivered-To: mailing list ant-user@jakarta.apache.org\n"
1:d711ac1:       + "Received: (qmail 73966 invoked from network); 26 Jul 2000 11:32:16 -0000\n"
1:d711ac1:       + "User-Agent: Microsoft-Outlook-Express-Macintosh-Edition/5.02.2022\n"
1:d711ac1:       + "Date: Wed, 26 Jul 2000 13:32:08 +0200\n"
1:d711ac1:       + "Subject: " + testVars[1][1] + '\n'
1:d711ac1:       + "From: Another Test <somebody@example.com>\n"
1:d711ac1:       + "To: <ant-user@jakarta.apache.org>\n"
1:d711ac1:       + "Message-Id: <" + testVars[1][0] + ">\n"
1:d711ac1:       + "Mime-Version: 1.0\n"
1:d711ac1:       + "Content-Type: text/plain; charset=\"US-ASCII\"\n"
1:d711ac1:       + "Content-Transfer-Encoding: 7bit\n"
1:d711ac1:       + "X-Spam-Rating: locus.apache.org 1.6.2 0/1000/N\n"
1:d711ac1:       + testVars[1][2];
1:c36923f: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     try (GZIPOutputStream gzOut = new GZIPOutputStream(new FileOutputStream(gzFile))) {
1:     try (GZIPOutputStream gzOut = new GZIPOutputStream(new FileOutputStream(gzFile2))) {
1:     }
/////////////////////////////////////////////////////////////////////////
1:     SequenceFileIterator<Text, Text> iterator = new SequenceFileIterator<>(new Path(expectedChunkPath), true, conf);
/////////////////////////////////////////////////////////////////////////
1:       new SequenceFileIterator<>(mrOutputDir.suffix("/part-m-00000"), true, configuration);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:3a284f5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.SystemUtils;
/////////////////////////////////////////////////////////////////////////
1:     String expected = record.getFirst().toString();
1:     if (SystemUtils.IS_OS_WINDOWS) {
1:       expected = expected.replace("/", "\\");
1:     }
1:     Assert.assertEquals(new File(parentFileSubSubDir, testVars[0][0]).toString(), expected);
1:     expected = record.getFirst().toString();
1:     if (SystemUtils.IS_OS_WINDOWS) {
1:       expected = expected.replace("/", "\\");
1:     }
1:     Assert.assertEquals(new File(parentFileSubSubDir, testVars[1][0]).toString(), expected);
1:     expected = record.getFirst().toString();
1:     if (SystemUtils.IS_OS_WINDOWS) {
1:       expected = expected.replace("/", "\\");
1:     }
1:     Assert.assertEquals(new File(parentFile, testVars[0][0]).toString(), expected);
1:     expected = record.getFirst().toString();
1:     if (SystemUtils.IS_OS_WINDOWS) {
1:       expected = expected.replace("/", "\\");
1:     }
1:     Assert.assertEquals(new File(parentFile, testVars[1][0]).toString(), expected);
commit:346c98c
/////////////////////////////////////////////////////////////////////////
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:       Closeables.closeQuietly(gzOut);
author:sslavic
-------------------------------------------------------------------------------
commit:e8cd230
/////////////////////////////////////////////////////////////////////////
1:     Path tmpDir = getTestTempDirPath();
/////////////////////////////////////////////////////////////////////////
1:       "-Dhadoop.tmp.dir=" + configuration.get("hadoop.tmp.dir"),
commit:921e201
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
/////////////////////////////////////////////////////////////////////////
1:     Configuration configuration = getConfiguration();
commit:b381afd
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.mahout.common.MahoutTestCase;
author:smarthi
-------------------------------------------------------------------------------
commit:74078b6
/////////////////////////////////////////////////////////////////////////
commit:d711ac1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.fs.FileStatus;
1: import org.apache.hadoop.fs.FileSystem;
/////////////////////////////////////////////////////////////////////////
1: 
1:   private File inputDir;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1:     
1:     File subDir2 = new File(subDir, "subsubdir");
1:     subDir2.mkdir();
1:     File gzFile2 = new File(subDir2, "mail-messages-2.gz");
0:     try {
0:       gzOut = new GZIPOutputStream(new FileOutputStream(gzFile2));
1:       gzOut.write(testMailMessages.getBytes("UTF-8"));
1:       gzOut.finish();
0:     } finally {
0:       Closeables.close(gzOut, false);
1:   public void testSequential() throws Exception {
1: 
1:     File outputDir = this.getTestTempDir("mail-archives-out");
1: 
1:       "--input", inputDir.getAbsolutePath(),
1:       "--method", "sequential",
1:       "--body", "--subject", "--separator", ""
1: 
1: 
1:     // app should create a single SequenceFile named "chunk-0" in the output dir
1:     Assert.assertTrue("Expected chunk file " + expectedChunkPath + " not found!", expectedChunkFile.isFile());
0:     SequenceFileIterator<Text, Text> iterator = new SequenceFileIterator<Text, Text>(new Path(expectedChunkPath), true, conf);
1:     Pair<Text, Text> record = iterator.next();
1:     Assert.assertEquals(testVars[0][1] + testVars[0][2], record.getSecond().toString());
1: 
1:     Assert.assertTrue("Second key/value pair not found!", iterator.hasNext());
1: 
1:     record = iterator.next();
1:     Assert.assertEquals(new File(parentFile, testVars[1][0]).toString(), record.getFirst().toString());
1:     Assert.assertEquals(testVars[1][1] + testVars[1][2], record.getSecond().toString());
1: 
1:     record = iterator.next();
1:     File parentFileSubSubDir = new File(new File(new File(new File("TEST"), "subdir"), "subsubdir"), "mail-messages-2.gz");
1:     Assert.assertEquals(new File(parentFileSubSubDir, testVars[0][0]).toString(), record.getFirst().toString());
1:     Assert.assertEquals(testVars[0][1] + testVars[0][2], record.getSecond().toString());
1:     Assert.assertEquals(new File(parentFileSubSubDir, testVars[1][0]).toString(), record.getFirst().toString());
1:     Assert.assertEquals(testVars[1][1] + testVars[1][2], record.getSecond().toString());
1:   @Test
1:   public void testMapReduce() throws Exception {
1: 
0:     Path tmpDir = this.getTestTempDirPath();
1:     Path mrOutputDir = new Path(tmpDir, "mail-archives-out-mr");
0:     Configuration configuration = new Configuration();
1:     FileSystem fs = FileSystem.get(configuration);
1: 
1:     File expectedInputFile = new File(inputDir.toString());
1: 
1:     String[] args = {
1:       "--input", expectedInputFile.getAbsolutePath(),
1:       "--output", mrOutputDir.toString(),
1:       "--charset", "UTF-8",
1:       "--keyPrefix", "TEST",
1:       "--method", "mapreduce",
1:       "--body", "--subject", "--separator", ""
1:     };
1: 
1:     // run the application's main method
1:     SequenceFilesFromMailArchives.main(args);
1: 
1:     // app should create a single SequenceFile named "chunk-0" in the output dir
1:     FileStatus[] fileStatuses = fs.listStatus(mrOutputDir.suffix("/part-m-00000"));
1:     assertEquals(1, fileStatuses.length); // only one
1:     assertEquals("part-m-00000", fileStatuses[0].getPath().getName());
1:     SequenceFileIterator<Text, Text> iterator =
0:       new SequenceFileIterator<Text, Text>(mrOutputDir.suffix("/part-m-00000"), true, configuration);
1: 
1:     Assert.assertTrue("First key/value pair not found!", iterator.hasNext());
1:     Pair<Text, Text> record = iterator.next();
1: 
1:     File parentFileSubSubDir = new File(new File(new File(new File("TEST"), "subdir"), "subsubdir"), "mail-messages-2.gz");
1: 
1:     Assert.assertEquals(new File(parentFileSubSubDir, testVars[0][0]).toString(), record.getFirst().toString());
1:     Assert.assertEquals(testVars[0][1] + testVars[0][2], record.getSecond().toString());
1:     Assert.assertTrue("Second key/value pair not found!", iterator.hasNext());
1: 
1:     record = iterator.next();
1:     Assert.assertEquals(new File(parentFileSubSubDir, testVars[1][0]).toString(), record.getFirst().toString());
1:     Assert.assertEquals(testVars[1][1] + testVars[1][2], record.getSecond().toString());
1: 
1:     // test other file
1:     File parentFile = new File(new File(new File("TEST"), "subdir"), "mail-messages.gz");
1:     record = iterator.next();
1:     Assert.assertEquals(new File(parentFile, testVars[0][0]).toString(), record.getFirst().toString());
1:     Assert.assertEquals(testVars[0][1] + testVars[0][2], record.getSecond().toString());
1:     Assert.assertTrue("Second key/value pair not found!", iterator.hasNext());
1: 
1:     record = iterator.next();
1:     Assert.assertEquals(new File(parentFile, testVars[1][0]).toString(), record.getFirst().toString());
1:     Assert.assertEquals(testVars[1][1] + testVars[1][2], record.getSecond().toString());
1:     Assert.assertFalse("Only four key/value pairs expected!", iterator.hasNext());
1:   }
1: 
1:   // Messages extracted and made anonymous from the ASF mail archives
1:       "Ant task for JDK1.1 collections build option",
/////////////////////////////////////////////////////////////////////////
1: 
1:       + "Return-Path: <user@example.com>\n"
1:       + "Mailing-List: contact ant-user-help@jakarta.apache.org; run by ezmlm\n"
1:       + "Delivered-To: mailing list ant-user@jakarta.apache.org\n"
1:       + "Received: (qmail 49267 invoked from network); 24 Jul 2000 19:13:53 -0000\n"
1:       + "Message-ID: <" + testVars[0][0] + ">\n"
1:       + "From: \"Testy McTester\" <user@example.com>\n"
1:       + "To: <ant-user@jakarta.apache.org>\n"
1:       + "Subject: " + testVars[0][1] + '\n'
1:       + "Date: Mon, 24 Jul 2000 12:24:56 -0700\n"
1:       + "MIME-Version: 1.0\n"
1:       + "Content-Type: text/plain;\n"
1:       + "  charset=\"Windows-1252\"\n"
1:       + "Content-Transfer-Encoding: 7bit\n"
1:       + "X-Spam-Rating: locus.apache.org 1.6.2 0/1000/N\n"
1:       + testVars[0][2] + '\n'
1:       + "From somebody@example.com  Wed Jul 26 11:32:16 2000\n"
1:       + "Return-Path: <somebody@example.com>\n"
1:       + "Mailing-List: contact ant-user-help@jakarta.apache.org; run by ezmlm\n"
1:       + "Delivered-To: mailing list ant-user@jakarta.apache.org\n"
1:       + "Received: (qmail 73966 invoked from network); 26 Jul 2000 11:32:16 -0000\n"
1:       + "User-Agent: Microsoft-Outlook-Express-Macintosh-Edition/5.02.2022\n"
1:       + "Date: Wed, 26 Jul 2000 13:32:08 +0200\n"
1:       + "Subject: " + testVars[1][1] + '\n'
1:       + "From: Another Test <somebody@example.com>\n"
1:       + "To: <ant-user@jakarta.apache.org>\n"
1:       + "Message-Id: <" + testVars[1][0] + ">\n"
1:       + "Mime-Version: 1.0\n"
1:       + "Content-Type: text/plain; charset=\"US-ASCII\"\n"
1:       + "Content-Transfer-Encoding: 7bit\n"
1:       + "X-Spam-Rating: locus.apache.org 1.6.2 0/1000/N\n"
1:       + testVars[1][2];
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(gzOut, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(gzOut, true);
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
1:       "--keyPrefix", "TEST",
0:        "--body", "--subject", "--separator", ""
commit:c36923f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.text;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
0: import java.io.IOException;
1: import java.util.zip.GZIPOutputStream;
1: 
1: import org.apache.hadoop.conf.Configuration;
0: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
0: import org.apache.hadoop.io.SequenceFile;
0: import org.apache.hadoop.io.SequenceFile.Reader;
1: import org.apache.hadoop.io.Text;
1: 
0: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Test case for the SequenceFilesFromMailArchives command-line application.
1:  */
0: public class SequenceFilesFromMailArchivesTest {
1:   
0:   // TODO: Negative tests
1: 
0:   private File inputDir = null;
0:   private File outputDir = null;
1: 
1:   /**
1:    * Create the input and output directories needed for testing
1:    * the SequenceFilesFromMailArchives application.
1:    */
1:   @Before
0:   public void setupBeforeTesting() throws IOException {
0:     // tread-lightly, create folder names using the timestamp
0:     long now = System.currentTimeMillis();
0:     inputDir = createTempDir("mail-archives-"+now+"-in");
0:     outputDir = createTempDir("mail-archives-"+now+"-out");
1:     
1:     // write test mail messages to a gzipped file in a nested directory
1:     File subDir = new File(inputDir, "subdir");
1:     subDir.mkdir();
1:     File gzFile = new File(subDir, "mail-messages.gz");
0:     GZIPOutputStream gzOut = null;
0:     try {
0:       gzOut = new GZIPOutputStream(new FileOutputStream(gzFile));
1:       gzOut.write(testMailMessages.getBytes("UTF-8"));
1:       gzOut.finish();
0:     } finally {
0:       if (gzOut != null) {
0:         try {
0:           gzOut.close();
0:         } catch (Exception ignore) {}
1:       }
1:     }    
1:   }
1: 
1:   /**
0:    * Test the main method of the SequenceFilesFromMailArchives
0:    * command-line application.
1:    */
1:   @Test
0:   public void testMain() throws Exception {
0:     String[] args = new String[] {
0:       "--input", inputDir.getAbsolutePath(),  
1:       "--output", outputDir.getAbsolutePath(),
1:       "--charset", "UTF-8",
0:       "--keyPrefix", "TEST"
1:     };
1:     
1:     // run the application's main method
1:     SequenceFilesFromMailArchives.main(args);
1:     
0:     // app should create a single SequenceFile named "chunk-0"
0:     // in the output dir
1:     File expectedChunkFile = new File(outputDir, "chunk-0");
1:     String expectedChunkPath = expectedChunkFile.getAbsolutePath();
0:     assertTrue("Expected chunk file "+expectedChunkPath+" not found!", 
0:         expectedChunkFile.isFile());
1: 
0:     Text key = new Text();
0:     Text value = new Text();
0:     Configuration conf = new Configuration();
0:     FileSystem fs = FileSystem.get(conf);
0:     SequenceFile.Reader seqFileReader = null;
0:     try {
0:       seqFileReader = new SequenceFile.Reader(fs, new Path(expectedChunkPath), conf);
0:       assertTrue("First key/value pair not found!", seqFileReader.next(key, value));
1:       
0:       assertEquals("TEST/subdir/mail-messages.gz/"+testVars[0][0], key.toString());
0:       assertEquals(testVars[0][1]+testVars[0][2], value.toString());
1:   
0:       assertTrue("Second key/value pair not found!", seqFileReader.next(key, value));
0:       assertEquals("TEST/subdir/mail-messages.gz/"+testVars[1][0], key.toString());
0:       assertEquals(testVars[1][1]+testVars[1][2], value.toString());
1:   
0:       assertFalse("Only two key/value pairs expected!", seqFileReader.next(key, value));
0:     } finally {
0:       if (seqFileReader != null) {
0:         try {
0:           seqFileReader.close();
0:         } catch (Exception ignore) {}
1:       }
1:     }
1:   }
1: 
0:   @After
0:   public void cleanupAfterTesting() {
0:     if (inputDir != null)
0:       rmdir(inputDir);
1:     
0:     if (outputDir != null)
0:       rmdir(outputDir);
1:   }
1: 
0:   // creates a temp directory for storing test input / output
0:   // fails if the directory cannot be created
0:   private File createTempDir(String dirName) {
0:     File tempDir = new File(System.getProperty("java.io.tmpdir"), dirName);
0:     if (!tempDir.isDirectory()) {
0:       tempDir.mkdirs();
0:       if (!tempDir.isDirectory()) {
0:         fail("Failed to create temp directory "+tempDir.getAbsolutePath());
1:       }
1:     }
0:     return tempDir;
1:   }
1: 
0:   // recursively delete the temp directories created by this test
0:   private void rmdir(File dir) {
0:     if (dir.isDirectory()) {
0:       File[] files = dir.listFiles();
0:       for (int f=0; f<files.length; f++) {
0:         if (files[f].isDirectory()) {
0:           rmdir(files[f]);
0:         } else {
0:           files[f].delete();
1:         }
1:       }
1:     }
0:     dir.delete();
1:   }
1:   
0:   // Messages extracted and anonymized from the ASF mail archives
0:   private static final String[][] testVars = new String[][] {
1:     new String[] {
1:       "user@example.com",
0:       "Ant task for JDK1.1 collections build option", 
1:       "\nThis is just a test message\n--\nTesty McTester\n"
1:     },
1:     new String[] {
1:       "somebody@example.com",
1:       "Problem with build files in several directories",
1:       "\nHi all,\nThis is another test message.\nRegards,\nAnother Test\n"
1:     }
1:   };
1:   
1:   private static final String testMailMessages =
0:     "From user@example.com  Mon Jul 24 19:13:53 2000\n"+
0:     "Return-Path: <user@example.com>\n"+
0:     "Mailing-List: contact ant-user-help@jakarta.apache.org; run by ezmlm\n"+
0:     "Delivered-To: mailing list ant-user@jakarta.apache.org\n"+
0:     "Received: (qmail 49267 invoked from network); 24 Jul 2000 19:13:53 -0000\n"+
0:     "Message-ID: <"+testVars[0][0]+">\n"+
0:     "From: \"Testy McTester\" <user@example.com>\n"+
0:     "To: <ant-user@jakarta.apache.org>\n"+
0:     "Subject: "+testVars[0][1]+"\n"+
0:     "Date: Mon, 24 Jul 2000 12:24:56 -0700\n"+
0:     "MIME-Version: 1.0\n"+
0:     "Content-Type: text/plain;\n"+
0:     "  charset=\"Windows-1252\"\n"+
0:     "Content-Transfer-Encoding: 7bit\n"+
0:     "X-Spam-Rating: locus.apache.org 1.6.2 0/1000/N\n"+
0:     testVars[0][2]+
0:     "\n"+
0:     "From somebody@example.com  Wed Jul 26 11:32:16 2000\n"+
0:     "Return-Path: <somebody@example.com>\n"+
0:     "Mailing-List: contact ant-user-help@jakarta.apache.org; run by ezmlm\n"+
0:     "Delivered-To: mailing list ant-user@jakarta.apache.org\n"+
0:     "Received: (qmail 73966 invoked from network); 26 Jul 2000 11:32:16 -0000\n"+
0:     "User-Agent: Microsoft-Outlook-Express-Macintosh-Edition/5.02.2022\n"+
0:     "Date: Wed, 26 Jul 2000 13:32:08 +0200\n"+
0:     "Subject: "+testVars[1][1]+"\n"+
0:     "From: Another Test <somebody@example.com>\n"+
0:     "To: <ant-user@jakarta.apache.org>\n"+
0:     "Message-Id: <"+testVars[1][0]+">\n"+
0:     "Mime-Version: 1.0\n"+
0:     "Content-Type: text/plain; charset=\"US-ASCII\"\n"+
0:     "Content-Transfer-Encoding: 7bit\n"+
0:     "X-Spam-Rating: locus.apache.org 1.6.2 0/1000/N\n"+
0:     testVars[1][2];
1: }
author:tcp
-------------------------------------------------------------------------------
commit:44459bd
/////////////////////////////////////////////////////////////////////////
1:     "From user@example.com  Mon Jul 24 19:13:53 2000\n"
0:     + "Return-Path: <user@example.com>\n"
0:     + "Mailing-List: contact ant-user-help@jakarta.apache.org; run by ezmlm\n"
0:     + "Delivered-To: mailing list ant-user@jakarta.apache.org\n"
0:     + "Received: (qmail 49267 invoked from network); 24 Jul 2000 19:13:53 -0000\n"
0:     + "Message-ID: <"+testVars[0][0]+">\n"
0:     + "From: \"Testy McTester\" <user@example.com>\n"
0:     + "To: <ant-user@jakarta.apache.org>\n"
0:     + "Subject: "+testVars[0][1]+ '\n' 
0:     + "Date: Mon, 24 Jul 2000 12:24:56 -0700\n"
0:     + "MIME-Version: 1.0\n"
0:     + "Content-Type: text/plain;\n"
0:     + "  charset=\"Windows-1252\"\n"
0:     + "Content-Transfer-Encoding: 7bit\n"
0:     + "X-Spam-Rating: locus.apache.org 1.6.2 0/1000/N\n"
0:     + testVars[0][2]+'\n' 
0:     + "From somebody@example.com  Wed Jul 26 11:32:16 2000\n"
0:     + "Return-Path: <somebody@example.com>\n"
0:     + "Mailing-List: contact ant-user-help@jakarta.apache.org; run by ezmlm\n"
0:     + "Delivered-To: mailing list ant-user@jakarta.apache.org\n"
0:     + "Received: (qmail 73966 invoked from network); 26 Jul 2000 11:32:16 -0000\n"
0:     + "User-Agent: Microsoft-Outlook-Express-Macintosh-Edition/5.02.2022\n"
0:     + "Date: Wed, 26 Jul 2000 13:32:08 +0200\n"
0:     + "Subject: "+testVars[1][1]+ '\n'
0:     + "From: Another Test <somebody@example.com>\n"
0:     + "To: <ant-user@jakarta.apache.org>\n"
0:     + "Message-Id: <"+testVars[1][0]+">\n"
0:     + "Mime-Version: 1.0\n"
0:     + "Content-Type: text/plain; charset=\"US-ASCII\"\n"
0:     + "Content-Transfer-Encoding: 7bit\n"
0:     + "X-Spam-Rating: locus.apache.org 1.6.2 0/1000/N\n"
0:     + testVars[1][2];
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1499411
/////////////////////////////////////////////////////////////////////////
0:     "Subject: "+testVars[0][1]+ '\n' +
0:     testVars[0][2]+'\n' +
/////////////////////////////////////////////////////////////////////////
0:     "Subject: "+testVars[1][1]+ '\n' +
commit:50fd693
commit:208aa07
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   @Override
commit:281156e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.utils.MahoutTestCase;
/////////////////////////////////////////////////////////////////////////
1: public final class SequenceFilesFromMailArchivesTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:   public void setUp() throws Exception {
1:     super.setUp();
1:     inputDir = getTestTempDir("mail-archives-in");
0:     outputDir = getTestTempDir("mail-archives-out");
/////////////////////////////////////////////////////////////////////////
1:     File parentFile = new File(new File(new File("TEST"), "subdir"), "mail-messages.gz");
0:     Assert.assertEquals(new File(parentFile, testVars[0][0]).toString(), record.getFirst().toString());
0:     Assert.assertEquals(new File(parentFile, testVars[1][0]).toString(), record.getFirst().toString());
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.IOUtils;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterator;
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
0:       IOUtils.quietClose(gzOut);
/////////////////////////////////////////////////////////////////////////
1:     String[] args = {
/////////////////////////////////////////////////////////////////////////
0:     Assert.assertTrue("Expected chunk file "+expectedChunkPath+" not found!", expectedChunkFile.isFile());
0: 
0:     SequenceFileIterator<Text,Text> iterator =
0:         new SequenceFileIterator<Text,Text>(new Path(expectedChunkPath), true, conf);
0: 
1:     Assert.assertTrue("First key/value pair not found!", iterator.hasNext());
0:     Pair<Text,Text> record = iterator.next();
0: 
0:     Assert.assertEquals("TEST/subdir/mail-messages.gz/" + testVars[0][0], record.getFirst().toString());
0:     Assert.assertEquals(testVars[0][1]+testVars[0][2], record.getSecond().toString());
0: 
1:     Assert.assertTrue("Second key/value pair not found!", iterator.hasNext());
1:     record = iterator.next();
0:     Assert.assertEquals("TEST/subdir/mail-messages.gz/"+testVars[1][0], record.getFirst().toString());
0:     Assert.assertEquals(testVars[1][1]+testVars[1][2], record.getSecond().toString());
0: 
1:     Assert.assertFalse("Only two key/value pairs expected!", iterator.hasNext());
0:     if (inputDir != null) {
0:     }
0:     if (outputDir != null) {
0:     }
0:   private static File createTempDir(String dirName) {
0:         Assert.fail("Failed to create temp directory "+tempDir.getAbsolutePath());
0:   private static void rmdir(File dir) {
0:       for (File file : files) {
0:         if (file.isDirectory()) {
0:           rmdir(file);
0:           file.delete();
/////////////////////////////////////////////////////////////////////////
1:   private static final String[][] testVars = {
============================================================================