1:48d069f: /**
1:48d069f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:48d069f:  * contributor license agreements.  See the NOTICE file distributed with
1:48d069f:  * this work for additional information regarding copyright ownership.
1:48d069f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:48d069f:  * (the "License"); you may not use this file except in compliance with
1:48d069f:  * the License.  You may obtain a copy of the License at
1:48d069f:  *
1:48d069f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:48d069f:  *
1:48d069f:  * Unless required by applicable law or agreed to in writing, software
1:48d069f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:48d069f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:48d069f:  * See the License for the specific language governing permissions and
1:48d069f:  * limitations under the License.
1:48d069f:  */
1:48d069f: 
1:b60c909: package org.apache.mahout.clustering.spectral;
1:48d069f: 
1:48d069f: import java.util.List;
1:48d069f: 
1:48d069f: import org.apache.hadoop.conf.Configuration;
1:48d069f: import org.apache.hadoop.io.IntWritable;
1:48d069f: import org.apache.hadoop.mapreduce.Mapper;
1:b60c909: import org.apache.mahout.clustering.spectral.VectorMatrixMultiplicationJob.VectorMatrixMultiplicationMapper;
1:48d069f: import org.apache.mahout.common.DummyRecordWriter;
1:48d069f: import org.apache.mahout.common.MahoutTestCase;
1:48d069f: import org.apache.mahout.math.DenseVector;
1:48d069f: import org.apache.mahout.math.RandomAccessSparseVector;
1:48d069f: import org.apache.mahout.math.Vector;
1:48d069f: import org.apache.mahout.math.VectorWritable;
1:48d069f: import org.junit.Test;
1:48d069f: 
1:48d069f: /**
1:48d069f:  * <p>This test ensures that a Vector can be successfully multiplied
1:48d069f:  * with a matrix.</p>
1:48d069f:  */
1:48d069f: public class TestVectorMatrixMultiplicationJob extends MahoutTestCase {
1:48d069f:   
1:049e7dc:   private static final double [][] MATRIX = { {1, 1}, {2, 3} };
1:049e7dc:   private static final double [] VECTOR = {9, 16};
1:48d069f:   
1:48d069f:   @Test
1:48d069f:   public void testVectorMatrixMultiplicationMapper() throws Exception {
1:48d069f:     VectorMatrixMultiplicationMapper mapper = new VectorMatrixMultiplicationMapper();
1:921e201:     Configuration conf = getConfiguration();
1:48d069f:     
1:48d069f:     // set up all the parameters for the job
1:049e7dc:     Vector toSave = new DenseVector(VECTOR);
1:48d069f:     DummyRecordWriter<IntWritable, VectorWritable> writer = new 
1:02ff22f:       DummyRecordWriter<>();
1:48d069f:     Mapper<IntWritable, VectorWritable, IntWritable, VectorWritable>.Context
1:48d069f:       context = DummyRecordWriter.build(mapper, conf, writer);
1:48d069f:     mapper.setup(toSave);
1:48d069f:     
1:48d069f:     // run the job
1:049e7dc:     for (int i = 0; i < MATRIX.length; i++) {
1:049e7dc:       Vector v = new RandomAccessSparseVector(MATRIX[i].length);
1:049e7dc:       v.assign(MATRIX[i]);
1:48d069f:       mapper.map(new IntWritable(i), new VectorWritable(v), context);
1:48d069f:     }
1:48d069f:     
1:48d069f:     // check the results
1:049e7dc:     assertEquals("Number of map results", MATRIX.length, writer.getData().size());
1:049e7dc:     for (int i = 0; i < MATRIX.length; i++) {
1:48d069f:       List<VectorWritable> list = writer.getValue(new IntWritable(i));
1:48d069f:       assertEquals("Only one vector per key", 1, list.size());
1:48d069f:       Vector v = list.get(0).get();
1:049e7dc:       for (int j = 0; j < MATRIX[i].length; j++) {
1:049e7dc:         double total = Math.sqrt(VECTOR[i]) * Math.sqrt(VECTOR[j]) * MATRIX[i][j];
1:48d069f:         assertEquals("Product matrix elements", total, v.get(j),EPSILON);
1:48d069f:       }
1:48d069f:     }
1:48d069f:   }
1:48d069f: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:       DummyRecordWriter<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:sslavic
-------------------------------------------------------------------------------
commit:921e201
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.spectral;
1: import org.apache.mahout.clustering.spectral.VectorMatrixMultiplicationJob.VectorMatrixMultiplicationMapper;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1:   private static final double [][] MATRIX = { {1, 1}, {2, 3} };
1:   private static final double [] VECTOR = {9, 16};
/////////////////////////////////////////////////////////////////////////
1:     Vector toSave = new DenseVector(VECTOR);
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < MATRIX.length; i++) {
1:       Vector v = new RandomAccessSparseVector(MATRIX[i].length);
1:       v.assign(MATRIX[i]);
1:     assertEquals("Number of map results", MATRIX.length, writer.getData().size());
1:     for (int i = 0; i < MATRIX.length; i++) {
1:       for (int j = 0; j < MATRIX[i].length; j++) {
1:         double total = Math.sqrt(VECTOR[i]) * Math.sqrt(VECTOR[j]) * MATRIX[i][j];
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:48d069f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.clustering.spectral.common;
1: 
1: import java.util.List;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.mapreduce.Mapper;
0: import org.apache.mahout.clustering.spectral.common.VectorMatrixMultiplicationJob.VectorMatrixMultiplicationMapper;
1: import org.apache.mahout.common.DummyRecordWriter;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.junit.Test;
1: 
1: /**
1:  * <p>This test ensures that a Vector can be successfully multiplied
1:  * with a matrix.</p>
1:  */
1: public class TestVectorMatrixMultiplicationJob extends MahoutTestCase {
1:   
0:   private double [][] matrix = { {1, 1}, {2, 3} };
0:   private double [] vector = {9, 16};
1:   
1:   @Test
1:   public void testVectorMatrixMultiplicationMapper() throws Exception {
1:     VectorMatrixMultiplicationMapper mapper = new VectorMatrixMultiplicationMapper();
0:     Configuration conf = new Configuration();
1:     
1:     // set up all the parameters for the job
0:     Vector toSave = new DenseVector(vector);
1:     DummyRecordWriter<IntWritable, VectorWritable> writer = new 
0:       DummyRecordWriter<IntWritable, VectorWritable>();
1:     Mapper<IntWritable, VectorWritable, IntWritable, VectorWritable>.Context
1:       context = DummyRecordWriter.build(mapper, conf, writer);
1:     mapper.setup(toSave);
1:     
1:     // run the job
0:     for (int i = 0; i < matrix.length; i++) {
0:       Vector v = new RandomAccessSparseVector(matrix[i].length);
0:       v.assign(matrix[i]);
1:       mapper.map(new IntWritable(i), new VectorWritable(v), context);
1:     }
1:     
1:     // check the results
0:     assertEquals("Number of map results", matrix.length, writer.getData().size());
0:     for (int i = 0; i < matrix.length; i++) {
1:       List<VectorWritable> list = writer.getValue(new IntWritable(i));
1:       assertEquals("Only one vector per key", 1, list.size());
1:       Vector v = list.get(0).get();
0:       for (int j = 0; j < matrix[i].length; j++) {
0:         double total = Math.sqrt(vector[i]) * Math.sqrt(vector[j]) * matrix[i][j];
1:         assertEquals("Product matrix elements", total, v.get(j),EPSILON);
1:       }
1:     }
1:   }
1: }
============================================================================