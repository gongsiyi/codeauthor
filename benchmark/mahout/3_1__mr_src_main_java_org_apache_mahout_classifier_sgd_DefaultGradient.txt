1:21d08d2: /*
1:21d08d2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:21d08d2:  * contributor license agreements.  See the NOTICE file distributed with
1:21d08d2:  * this work for additional information regarding copyright ownership.
1:21d08d2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:21d08d2:  * (the "License"); you may not use this file except in compliance with
1:21d08d2:  * the License.  You may obtain a copy of the License at
1:21d08d2:  *
1:21d08d2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:21d08d2:  *
1:21d08d2:  * Unless required by applicable law or agreed to in writing, software
1:21d08d2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:21d08d2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:21d08d2:  * See the License for the specific language governing permissions and
1:21d08d2:  * limitations under the License.
1:21d08d2:  */
1:21d08d2: 
1:21d08d2: package org.apache.mahout.classifier.sgd;
1:21d08d2: 
1:21d08d2: import org.apache.mahout.classifier.AbstractVectorClassifier;
1:21d08d2: import org.apache.mahout.math.Vector;
1:21d08d2: import org.apache.mahout.math.function.Functions;
1:21d08d2: 
1:21d08d2: /**
1:21d08d2:  * Implements the basic logistic training law.
1:21d08d2:  */
1:21d08d2: public class DefaultGradient implements Gradient {
1:21d08d2:   /**
1:21d08d2:    * Provides a default gradient computation useful for logistic regression.  
1:21d08d2:    *
1:21d08d2:    * @param groupKey     A grouping key to allow per-something AUC loss to be used for training.
1:21d08d2:    * @param actual       The target variable value.
1:21d08d2:    * @param instance     The current feature vector to use for gradient computation
1:21d08d2:    * @param classifier   The classifier that can compute scores
1:21d08d2:    * @return  The gradient to be applied to beta
1:21d08d2:    */
1:21d08d2:   @Override
1:21d08d2:   public final Vector apply(String groupKey, int actual, Vector instance, AbstractVectorClassifier classifier) {
1:21d08d2:     // what does the current model say?
1:21d08d2:     Vector v = classifier.classify(instance);
1:21d08d2: 
1:21d08d2:     Vector r = v.like();
1:21d08d2:     if (actual != 0) {
1:21d08d2:       r.setQuick(actual - 1, 1);
1:21d08d2:     }
1:21d08d2:     r.assign(v, Functions.MINUS);
1:21d08d2:     return r;
1:21d08d2:   }
1:21d08d2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Ted Dunning
-------------------------------------------------------------------------------
commit:21d08d2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
1: import org.apache.mahout.classifier.AbstractVectorClassifier;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.Functions;
1: 
1: /**
1:  * Implements the basic logistic training law.
1:  */
1: public class DefaultGradient implements Gradient {
1:   /**
1:    * Provides a default gradient computation useful for logistic regression.  
1:    *
1:    * @param groupKey     A grouping key to allow per-something AUC loss to be used for training.
1:    * @param actual       The target variable value.
1:    * @param instance     The current feature vector to use for gradient computation
1:    * @param classifier   The classifier that can compute scores
1:    * @return  The gradient to be applied to beta
1:    */
1:   @Override
1:   public final Vector apply(String groupKey, int actual, Vector instance, AbstractVectorClassifier classifier) {
1:     // what does the current model say?
1:     Vector v = classifier.classify(instance);
1: 
1:     Vector r = v.like();
1:     if (actual != 0) {
1:       r.setQuick(actual - 1, 1);
1:     }
1:     r.assign(v, Functions.MINUS);
1:     return r;
1:   }
1: }
============================================================================