1:1499411: /*
1:1499411:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1499411:  * contributor license agreements.  See the NOTICE file distributed with
1:1499411:  * this work for additional information regarding copyright ownership.
1:1499411:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1499411:  * (the "License"); you may not use this file except in compliance with
1:1499411:  * the License.  You may obtain a copy of the License at
1:1499411:  *
1:1499411:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1499411:  *
1:1499411:  * Unless required by applicable law or agreed to in writing, software
1:1499411:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1499411:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1499411:  * See the License for the specific language governing permissions and
1:1499411:  * limitations under the License.
1:1499411:  */
1:1499411: 
1:522ee0b: package org.apache.mahout.math.decomposer.lanczos;
2:522ee0b: 
1:74f849b: import com.google.common.collect.Maps;
1:522ee0b: import org.apache.mahout.math.DenseMatrix;
1:522ee0b: import org.apache.mahout.math.Matrix;
1:522ee0b: import org.apache.mahout.math.Vector;
1:522ee0b: import org.apache.mahout.math.VectorIterable;
1:522ee0b: 
1:522ee0b: import java.util.Map;
1:522ee0b: 
1:16aeaba: @Deprecated
1:522ee0b: public class LanczosState {
1:4fbfbc6: 
1:e4dfc93:   protected  Matrix diagonalMatrix;
1:e4dfc93:   protected final VectorIterable corpus;
1:522ee0b:   protected double scaleFactor;
1:522ee0b:   protected int iterationNumber;
1:e4dfc93:   protected final int desiredRank;
1:522ee0b:   protected Map<Integer, Vector> basis;
1:e4dfc93:   protected final Map<Integer, Double> singularValues;
1:522ee0b:   protected Map<Integer, Vector> singularVectors;
1:522ee0b: 
1:4fbfbc6:   public LanczosState(VectorIterable corpus, int desiredRank, Vector initialVector) {
1:522ee0b:     this.corpus = corpus;
1:522ee0b:     this.desiredRank = desiredRank;
1:4fbfbc6:     intitializeBasisAndSingularVectors();
1:522ee0b:     setBasisVector(0, initialVector);
1:522ee0b:     scaleFactor = 0;
1:522ee0b:     diagonalMatrix = new DenseMatrix(desiredRank, desiredRank);
1:74f849b:     singularValues = Maps.newHashMap();
1:522ee0b:     iterationNumber = 1;
1:522ee0b:   }
1:522ee0b: 
1:8bcaa77:   private void intitializeBasisAndSingularVectors() {
1:74f849b:     basis = Maps.newHashMap();
1:74f849b:     singularVectors = Maps.newHashMap();
1:522ee0b:   }
1:522ee0b: 
1:522ee0b:   public Matrix getDiagonalMatrix() {
1:522ee0b:     return diagonalMatrix;
1:522ee0b:   }
1:522ee0b: 
1:522ee0b:   public int getIterationNumber() {
1:522ee0b:     return iterationNumber;
1:522ee0b:   }
1:522ee0b: 
1:522ee0b:   public double getScaleFactor() {
1:522ee0b:     return scaleFactor;
1:522ee0b:   }
1:522ee0b: 
1:522ee0b:   public VectorIterable getCorpus() {
1:522ee0b:     return corpus;
1:522ee0b:   }
1:522ee0b: 
1:522ee0b:   public Vector getRightSingularVector(int i) {
1:522ee0b:     return singularVectors.get(i);
1:522ee0b:   }
1:522ee0b: 
1:522ee0b:   public Double getSingularValue(int i) {
1:522ee0b:     return singularValues.get(i);
1:522ee0b:   }
1:522ee0b: 
1:522ee0b:   public Vector getBasisVector(int i) {
1:522ee0b:     return basis.get(i);
1:522ee0b:   }
1:522ee0b: 
1:e64dd36:   public int getBasisSize() {
1:78545ff:     return basis.size();
1:78545ff:   }
1:78545ff: 
1:522ee0b:   public void setBasisVector(int i, Vector basisVector) {
1:522ee0b:     basis.put(i, basisVector);
1:522ee0b:   }
1:522ee0b: 
1:522ee0b:   public void setScaleFactor(double scale) {
1:522ee0b:     scaleFactor = scale;
1:522ee0b:   }
1:522ee0b: 
1:522ee0b:   public void setIterationNumber(int i) {
1:522ee0b:     iterationNumber = i;
1:522ee0b:   }
1:522ee0b: 
1:522ee0b:   public void setRightSingularVector(int i, Vector vector) {
1:522ee0b:     singularVectors.put(i, vector);
1:522ee0b:   }
1:522ee0b: 
1:522ee0b:   public void setSingularValue(int i, double value) {
1:522ee0b:     singularValues.put(i, value);
1:522ee0b:   }
1:522ee0b: }
============================================================================
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:16aeaba
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:Ted Dunning
-------------------------------------------------------------------------------
commit:8bcaa77
/////////////////////////////////////////////////////////////////////////
1:   private void intitializeBasisAndSingularVectors() {
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:   public int getBasisSize() {
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:78545ff
/////////////////////////////////////////////////////////////////////////
0:   public int getBasisSize(){
1:     return basis.size();
1:   }
1: 
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: 
1:   public LanczosState(VectorIterable corpus, int desiredRank, Vector initialVector) {
1:     intitializeBasisAndSingularVectors();
/////////////////////////////////////////////////////////////////////////
0:   protected void intitializeBasisAndSingularVectors() {
commit:1499411
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:e4dfc93
/////////////////////////////////////////////////////////////////////////
1:   protected  Matrix diagonalMatrix;
1:   protected final VectorIterable corpus;
1:   protected final int desiredRank;
1:   protected final Map<Integer, Double> singularValues;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Maps;
/////////////////////////////////////////////////////////////////////////
1:     singularValues = Maps.newHashMap();
1:     basis = Maps.newHashMap();
1:     singularVectors = Maps.newHashMap();
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:522ee0b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.decomposer.lanczos;
1: 
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorIterable;
1: 
0: import java.util.HashMap;
1: import java.util.Map;
1: 
1: public class LanczosState {
0:   protected Matrix diagonalMatrix;
0:   protected VectorIterable corpus;
1:   protected double scaleFactor;
1:   protected int iterationNumber;
0:   protected int desiredRank;
1:   protected Map<Integer, Vector> basis;
1: 
0:   protected Map<Integer, Double> singularValues;
1:   protected Map<Integer, Vector> singularVectors;
1: 
0:   public LanczosState(VectorIterable corpus, int numCols, int desiredRank, Vector initialVector) {
1:     this.corpus = corpus;
1:     this.desiredRank = desiredRank;
0:     intitializeBasisAndSingularVectors(numCols, desiredRank);
1:     setBasisVector(0, initialVector);
1:     scaleFactor = 0;
1:     diagonalMatrix = new DenseMatrix(desiredRank, desiredRank);
0:     singularValues = new HashMap<Integer, Double>();
1:     iterationNumber = 1;
1:   }
1: 
0:   protected void intitializeBasisAndSingularVectors(int numCols, int rank) {
0:     basis = new HashMap<Integer, Vector>();
0:     singularVectors = new HashMap<Integer, Vector>();
1:   }
1: 
1:   public Matrix getDiagonalMatrix() {
1:     return diagonalMatrix;
1:   }
1: 
1:   public int getIterationNumber() {
1:     return iterationNumber;
1:   }
1: 
1:   public double getScaleFactor() {
1:     return scaleFactor;
1:   }
1: 
1:   public VectorIterable getCorpus() {
1:     return corpus;
1:   }
1: 
1:   public Vector getRightSingularVector(int i) {
1:     return singularVectors.get(i);
1:   }
1: 
1:   public Double getSingularValue(int i) {
1:     return singularValues.get(i);
1:   }
1: 
1:   public Vector getBasisVector(int i) {
1:     return basis.get(i);
1:   }
1: 
1:   public void setBasisVector(int i, Vector basisVector) {
1:     basis.put(i, basisVector);
1:   }
1: 
1:   public void setScaleFactor(double scale) {
1:     scaleFactor = scale;
1:   }
1: 
1:   public void setIterationNumber(int i) {
1:     iterationNumber = i;
1:   }
1: 
1:   public void setRightSingularVector(int i, Vector vector) {
1:     singularVectors.put(i, vector);
1:   }
1: 
1:   public void setSingularValue(int i, double value) {
1:     singularValues.put(i, value);
1:   }
1: }
============================================================================