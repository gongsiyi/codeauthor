1:933e22a: /**
1:933e22a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:933e22a:  * contributor license agreements.  See the NOTICE file distributed with
1:933e22a:  * this work for additional information regarding copyright ownership.
1:933e22a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:933e22a:  * (the "License"); you may not use this file except in compliance with
1:933e22a:  * the License.  You may obtain a copy of the License at
1:1ac30a4:  *
1:933e22a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1ac30a4:  *
1:933e22a:  * Unless required by applicable law or agreed to in writing, software
1:933e22a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:933e22a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:933e22a:  * See the License for the specific language governing permissions and
1:933e22a:  * limitations under the License.
1:a28cf1d:  */
1:8d102ea: package org.apache.mahout.clustering.iterator;
5:1ac30a4: 
1:a28cf1d: import java.io.DataInput;
1:a28cf1d: import java.io.DataOutput;
1:a28cf1d: import java.io.IOException;
1:85f9ece: import java.util.ArrayList;
1:76e80dc: import java.util.Collection;
1:76e80dc: import java.util.List;
1:76e80dc: 
1:8d102ea: import org.apache.mahout.clustering.Cluster;
1:8d102ea: import org.apache.mahout.clustering.classify.ClusterClassifier;
1:76e80dc: import org.apache.mahout.clustering.fuzzykmeans.FuzzyKMeansClusterer;
1:76e80dc: import org.apache.mahout.clustering.fuzzykmeans.SoftCluster;
1:933e22a: import org.apache.mahout.math.Vector;
1:76e80dc: 
1:933e22a: /**
1:933e22a:  * This is a probability-weighted clustering policy, suitable for fuzzy k-means
1:933e22a:  * clustering
1:1ac30a4:  * 
1:a28cf1d:  */
1:3eba6f2: public class FuzzyKMeansClusteringPolicy extends AbstractClusteringPolicy {
1:229aeff: 
1:76e80dc:   private double m = 2;
1:76e80dc:   private double convergenceDelta = 0.05;
1:229aeff: 
1:229aeff:   public FuzzyKMeansClusteringPolicy() {
1:229aeff:   }
1:229aeff: 
1:1ac30a4:   public FuzzyKMeansClusteringPolicy(double m, double convergenceDelta) {
1:1ac30a4:     this.m = m;
1:229aeff:     this.convergenceDelta = convergenceDelta;
1:1ac30a4:   }
1:229aeff: 
1:76e80dc:   @Override
1:933e22a:   public Vector select(Vector probabilities) {
1:933e22a:     return probabilities;
1:76e80dc:   }
1:3eba6f2:   
1:457db94:   @Override
1:3eba6f2:   public Vector classify(Vector data, ClusterClassifier prior) {
1:85f9ece:     Collection<SoftCluster> clusters = new ArrayList<>();
1:85f9ece:     List<Double> distances = new ArrayList<>();
1:3eba6f2:     for (Cluster model : prior.getModels()) {
1:457db94:       SoftCluster sc = (SoftCluster) model;
1:457db94:       clusters.add(sc);
1:457db94:       distances.add(sc.getMeasure().distance(data, sc.getCenter()));
1:457db94:     }
1:457db94:     FuzzyKMeansClusterer fuzzyKMeansClusterer = new FuzzyKMeansClusterer();
1:457db94:     fuzzyKMeansClusterer.setM(m);
1:457db94:     return fuzzyKMeansClusterer.computePi(clusters, distances);
1:457db94:   }
1:229aeff: 
1:a28cf1d:   @Override
1:a28cf1d:   public void write(DataOutput out) throws IOException {
1:a28cf1d:     out.writeDouble(m);
1:1ac30a4:     out.writeDouble(convergenceDelta);
1:1ac30a4:   }
1:229aeff: 
1:a28cf1d:   @Override
1:a28cf1d:   public void readFields(DataInput in) throws IOException {
1:a28cf1d:     this.m = in.readDouble();
1:1ac30a4:     this.convergenceDelta = in.readDouble();
1:76e80dc:   }
1:3eba6f2: 
1:3eba6f2:   @Override
1:3eba6f2:   public void close(ClusterClassifier posterior) {
1:3eba6f2:     for (Cluster cluster : posterior.getModels()) {
1:3eba6f2:       ((org.apache.mahout.clustering.kmeans.Kluster) cluster).calculateConvergence(convergenceDelta);
1:3eba6f2:       cluster.computeParameters();
1:3eba6f2:     }
1:3eba6f2:     
1:3eba6f2:   }
1:457db94:   
2:a28cf1d: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Collection<SoftCluster> clusters = new ArrayList<>();
1:     List<Double> distances = new ArrayList<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:   public FuzzyKMeansClusteringPolicy() {
1:   }
1: 
1:     this.convergenceDelta = convergenceDelta;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:3eba6f2
/////////////////////////////////////////////////////////////////////////
1: public class FuzzyKMeansClusteringPolicy extends AbstractClusteringPolicy {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public Vector classify(Vector data, ClusterClassifier prior) {
1:     for (Cluster model : prior.getModels()) {
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public void close(ClusterClassifier posterior) {
1:     for (Cluster cluster : posterior.getModels()) {
1:       ((org.apache.mahout.clustering.kmeans.Kluster) cluster).calculateConvergence(convergenceDelta);
1:       cluster.computeParameters();
1:     }
1:     
1:   }
commit:8d102ea
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.iterator;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.Cluster;
1: import org.apache.mahout.clustering.classify.ClusterClassifier;
commit:457db94
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public Vector classify(Vector data, List<Cluster> models) {
0:     Collection<SoftCluster> clusters = Lists.newArrayList();
0:     List<Double> distances = Lists.newArrayList();
0:     for (Cluster model : models) {
1:       SoftCluster sc = (SoftCluster) model;
1:       clusters.add(sc);
1:       distances.add(sc.getMeasure().distance(data, sc.getCenter()));
1:     }
1:     FuzzyKMeansClusterer fuzzyKMeansClusterer = new FuzzyKMeansClusterer();
1:     fuzzyKMeansClusterer.setM(m);
1:     return fuzzyKMeansClusterer.computePi(clusters, distances);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
commit:76e80dc
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.List;
1: import org.apache.mahout.clustering.fuzzykmeans.FuzzyKMeansClusterer;
1: import org.apache.mahout.clustering.fuzzykmeans.SoftCluster;
0: import com.google.common.collect.Lists;
1: 
/////////////////////////////////////////////////////////////////////////
1:   private double m = 2;
1:   private double convergenceDelta = 0.05;
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public Vector classify(Vector data, List<Cluster> models) {
0:     Collection<SoftCluster> clusters = Lists.newArrayList();
0:     List<Double> distances = Lists.newArrayList();
0:     for (Cluster model : models) {
0:       SoftCluster sc = (SoftCluster) model;
0:       clusters.add(sc);
0:       distances.add(sc.getMeasure().distance(data, sc.getCenter()));
1:     }
0:     FuzzyKMeansClusterer fuzzyKMeansClusterer = new FuzzyKMeansClusterer();
0:     fuzzyKMeansClusterer.setM(m);
0:     return fuzzyKMeansClusterer.computePi(clusters, distances);
1:   }
1:   
commit:1ac30a4
/////////////////////////////////////////////////////////////////////////
1:   
0:   public FuzzyKMeansClusteringPolicy() {
0:     super();
1:   }
1:   
1:   
0:   private double convergenceDelta;
1:   
1:   public FuzzyKMeansClusteringPolicy(double m, double convergenceDelta) {
1:     this.m = m;
1:   }
1:   
/////////////////////////////////////////////////////////////////////////
0:   
0:   /*
0:    * (non-Javadoc)
1:    * 
0:    * @see
0:    * org.apache.mahout.clustering.ClusteringPolicy#select(org.apache.mahout.
0:    * math.Vector)
0:   
0:   /*
0:    * (non-Javadoc)
1:    * 
1:     out.writeDouble(convergenceDelta);
0:   
0:   /*
0:    * (non-Javadoc)
1:    * 
1:     this.convergenceDelta = in.readDouble();
commit:a28cf1d
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
0: 
/////////////////////////////////////////////////////////////////////////
0:   private double m;
/////////////////////////////////////////////////////////////////////////
0: 
0:   /* (non-Javadoc)
0:    * @see org.apache.hadoop.io.Writable#write(java.io.DataOutput)
1:    */
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeDouble(m);
1:   }
0: 
0:   /* (non-Javadoc)
0:    * @see org.apache.hadoop.io.Writable#readFields(java.io.DataInput)
1:    */
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     this.m = in.readDouble();
1:   }
commit:933e22a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
0: package org.apache.mahout.clustering;
0: 
1: import org.apache.mahout.math.Vector;
0: 
1: /**
1:  * This is a probability-weighted clustering policy, suitable for fuzzy k-means
1:  * clustering
0:  * 
0:  */
0: public class FuzzyKMeansClusteringPolicy implements ClusteringPolicy {
0:     
0:   /*
0:    * (non-Javadoc)
0:    * 
0:    * @see
0:    * org.apache.mahout.clustering.ClusteringPolicy#update(org.apache.mahout.
0:    * clustering.ClusterClassifier)
0:    */
0:   @Override
0:   public void update(ClusterClassifier posterior) {
0:     // nothing to do here
0:   }
0: 
0:   /* (non-Javadoc)
0:    * @see org.apache.mahout.clustering.ClusteringPolicy#select(org.apache.mahout.math.Vector)
0:    */
0:   @Override
1:   public Vector select(Vector probabilities) {
1:     return probabilities;
0:   }
0:   
0: }
============================================================================