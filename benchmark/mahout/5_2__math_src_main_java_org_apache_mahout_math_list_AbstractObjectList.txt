1:35fa73f: /**
1:35fa73f:  * Licensed to the Apache Software Foundation (ASF) under one
1:35fa73f:  * or more contributor license agreements. See the NOTICE file
1:35fa73f:  * distributed with this work for additional information
1:35fa73f:  * regarding copyright ownership. The ASF licenses this file
1:35fa73f:  * to you under the Apache License, Version 2.0 (the
1:35fa73f:  * "License"); you may not use this file except in compliance
1:35fa73f:  * with the License. You may obtain a copy of the License at
1:35fa73f:  *
1:35fa73f:  * http://www.apache.org/licenses/LICENSE-2.0
1:35fa73f:  *
1:35fa73f:  * Unless required by applicable law or agreed to in writing,
1:35fa73f:  * software distributed under the License is distributed on an
1:35fa73f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:35fa73f:  * KIND, either express or implied. See the License for the
1:35fa73f:  * specific language governing permissions and limitations
1:35fa73f:  * under the License.
1:35fa73f:  */
1:35fa73f: /*
1:35fa73f: Copyright 1999 CERN - European Organization for Nuclear Research.
1:35fa73f: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1:35fa73f: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1:35fa73f: that both that copyright notice and this permission notice appear in supporting documentation. 
1:35fa73f: CERN makes no representations about the suitability of this software for any purpose. 
1:35fa73f: It is provided "as is" without expressed or implied warranty.
1:35fa73f: */
1:35fa73f: package org.apache.mahout.math.list;
1:35fa73f: 
1:35fa73f: import java.util.Collection;
1:35fa73f: 
1:35fa73f: /**
1:6d16230:  Abstract base class for resizable lists holding objects or primitive data types such as <code>int</code>,
1:6d16230:  <code>float</code>, etc.First see the <a href="package-summary.html">package summary</a> and
1:6d16230:  javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
1:35fa73f:  <p>
1:35fa73f:  <b>Note that this implementation is not synchronized.</b>
1:35fa73f: 
1:35fa73f:  @author wolfgang.hoschek@cern.ch
1:35fa73f:  @version 1.0, 09/24/99
1:35fa73f:  @see      java.util.ArrayList
1:35fa73f:  @see      java.util.Vector
1:35fa73f:  @see      java.util.Arrays
1:35fa73f:  */
1:35fa73f: public abstract class AbstractObjectList<T> extends AbstractList {
1:35fa73f: 
1:35fa73f:   /**
1:35fa73f:    * Appends all of the elements of the specified Collection to the receiver.
1:35fa73f:    *
1:35fa73f:    * @throws ClassCastException if an element in the collection is not of the same parameter type of the receiver.
1:35fa73f:    */
1:35fa73f:   public void addAllOf(Collection<T> collection) {
1:35fa73f:     this.beforeInsertAllOf(size(), collection);
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /**
1:35fa73f:    * Inserts all elements of the specified collection before the specified position into the receiver. Shifts the
1:35fa73f:    * element currently at that position (if any) and any subsequent elements to the right (increases their indices).
1:35fa73f:    *
1:35fa73f:    * @param index      index before which to insert first element from the specified collection.
1:35fa73f:    * @param collection the collection to be inserted
1:35fa73f:    * @throws ClassCastException        if an element in the collection is not of the same parameter type of the
1:35fa73f:    *                                   receiver.
1:35fa73f:    * @throws IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt; size()</tt>.
1:35fa73f:    */
1:35fa73f:   public void beforeInsertAllOf(int index, Collection<T> collection) {
1:35fa73f:     this.beforeInsertDummies(index, collection.size());
1:35fa73f:     this.replaceFromWith(index, collection);
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /**
1:35fa73f:    * Replaces the part of the receiver starting at <code>from</code> (inclusive) with all the elements of the specified
1:35fa73f:    * collection. Does not alter the size of the receiver. Replaces exactly <tt>Math.max(0,Math.min(size()-from,
1:35fa73f:    * other.size()))</tt> elements.
1:35fa73f:    *
1:35fa73f:    * @param from  the index at which to copy the first element from the specified collection.
1:35fa73f:    * @param other Collection to replace part of the receiver
1:35fa73f:    * @throws IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt;= size()</tt>.
1:35fa73f:    */
1:35fa73f:   public abstract void replaceFromWith(int from, Collection<T> other);
1:35fa73f: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:  Abstract base class for resizable lists holding objects or primitive data types such as <code>int</code>,
1:  <code>float</code>, etc.First see the <a href="package-summary.html">package summary</a> and
1:  javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
author:Ted Dunning
-------------------------------------------------------------------------------
commit:35fa73f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements. See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership. The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License. You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied. See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: /*
1: Copyright 1999 CERN - European Organization for Nuclear Research.
1: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1: that both that copyright notice and this permission notice appear in supporting documentation. 
1: CERN makes no representations about the suitability of this software for any purpose. 
1: It is provided "as is" without expressed or implied warranty.
1: */
1: package org.apache.mahout.math.list;
1: 
1: import java.util.Collection;
1: 
1: /**
0:  Abstract base class for resizable lists holding objects or primitive data types such as <code>int</code>, <code>float</code>, etc.
0:  First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
1:  <p>
1:  <b>Note that this implementation is not synchronized.</b>
1: 
1:  @author wolfgang.hoschek@cern.ch
1:  @version 1.0, 09/24/99
1:  @see      java.util.ArrayList
1:  @see      java.util.Vector
1:  @see      java.util.Arrays
1:  */
1: public abstract class AbstractObjectList<T> extends AbstractList {
1: 
1:   /**
1:    * Appends all of the elements of the specified Collection to the receiver.
1:    *
1:    * @throws ClassCastException if an element in the collection is not of the same parameter type of the receiver.
1:    */
1:   public void addAllOf(Collection<T> collection) {
1:     this.beforeInsertAllOf(size(), collection);
1:   }
1: 
1:   /**
1:    * Inserts all elements of the specified collection before the specified position into the receiver. Shifts the
1:    * element currently at that position (if any) and any subsequent elements to the right (increases their indices).
1:    *
1:    * @param index      index before which to insert first element from the specified collection.
1:    * @param collection the collection to be inserted
1:    * @throws ClassCastException        if an element in the collection is not of the same parameter type of the
1:    *                                   receiver.
1:    * @throws IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt; size()</tt>.
1:    */
1:   public void beforeInsertAllOf(int index, Collection<T> collection) {
1:     this.beforeInsertDummies(index, collection.size());
1:     this.replaceFromWith(index, collection);
1:   }
1: 
1:   /**
1:    * Replaces the part of the receiver starting at <code>from</code> (inclusive) with all the elements of the specified
1:    * collection. Does not alter the size of the receiver. Replaces exactly <tt>Math.max(0,Math.min(size()-from,
1:    * other.size()))</tt> elements.
1:    *
1:    * @param from  the index at which to copy the first element from the specified collection.
1:    * @param other Collection to replace part of the receiver
1:    * @throws IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt;= size()</tt>.
1:    */
1:   public abstract void replaceFromWith(int from, Collection<T> other);
1: }
author:Benson Margulies
-------------------------------------------------------------------------------
commit:ebf9a4d
/////////////////////////////////////////////////////////////////////////
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:5a677d4
/////////////////////////////////////////////////////////////////////////
0:  @see      java.util.ArrayList
commit:ea65197
/////////////////////////////////////////////////////////////////////////
author:Robin Anil
-------------------------------------------------------------------------------
commit:a51dd9e
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements. See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership. The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License. You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: /*
0: Copyright 1999 CERN - European Organization for Nuclear Research.
0: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
0: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
0: that both that copyright notice and this permission notice appear in supporting documentation. 
0: CERN makes no representations about the suitability of this software for any purpose. 
0: It is provided "as is" without expressed or implied warranty.
0: */
0: package org.apache.mahout.math.list;
0: 
0: import java.util.Collection;
0: 
0: /**
0:  Abstract base class for resizable lists holding objects or primitive data types such as <code>int</code>, <code>float</code>, etc.
0:  First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
0:  <p>
0:  <b>Note that this implementation is not synchronized.</b>
0: 
0:  @author wolfgang.hoschek@cern.ch
0:  @version 1.0, 09/24/99
0:  @see     ArrayList
0:  @see      java.util.Vector
0:  @see      java.util.Arrays
0:  */
0: public abstract class AbstractObjectList<T> extends AbstractList {
0: 
0:   /**
0:    * Appends all of the elements of the specified Collection to the receiver.
0:    *
0:    * @throws ClassCastException if an element in the collection is not of the same parameter type of the receiver.
0:    */
0:   public void addAllOf(Collection<T> collection) {
0:     this.beforeInsertAllOf(size(), collection);
0:   }
0: 
0:   /**
0:    * Inserts all elements of the specified collection before the specified position into the receiver. Shifts the
0:    * element currently at that position (if any) and any subsequent elements to the right (increases their indices).
0:    *
0:    * @param index      index before which to insert first element from the specified collection.
0:    * @param collection the collection to be inserted
0:    * @throws ClassCastException        if an element in the collection is not of the same parameter type of the
0:    *                                   receiver.
0:    * @throws IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt; size()</tt>.
0:    */
0:   public void beforeInsertAllOf(int index, Collection<T> collection) {
0:     this.beforeInsertDummies(index, collection.size());
0:     this.replaceFromWith(index, collection);
0:   }
0: 
0: 
0:   /**
0:    * Removes from the receiver all elements whose index is between <code>from</code>, inclusive and <code>to</code>,
0:    * inclusive.  Shifts any succeeding elements to the left (reduces their index). This call shortens the list by
0:    * <tt>(to - from + 1)</tt> elements.
0:    *
0:    * @param fromIndex index of first element to be removed.
0:    * @param toIndex   index of last element to be removed.
0:    * @throws IndexOutOfBoundsException if <tt>(from&lt;0 || from&gt;to || to&gt;=size()) && to!=from-1</tt>.
0:    */
0:   public abstract void removeFromTo(int fromIndex, int toIndex);
0: 
0:   /**
0:    * Replaces the part of the receiver starting at <code>from</code> (inclusive) with all the elements of the specified
0:    * collection. Does not alter the size of the receiver. Replaces exactly <tt>Math.max(0,Math.min(size()-from,
0:    * other.size()))</tt> elements.
0:    *
0:    * @param from  the index at which to copy the first element from the specified collection.
0:    * @param other Collection to replace part of the receiver
0:    * @throws IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt;= size()</tt>.
0:    */
0:   public abstract void replaceFromWith(int from, Collection<T> other);
0: }
============================================================================