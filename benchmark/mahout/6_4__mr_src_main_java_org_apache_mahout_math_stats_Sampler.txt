1:4fbfbc6: /*
1:4fbfbc6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4fbfbc6:  * contributor license agreements.  See the NOTICE file distributed with
1:4fbfbc6:  * this work for additional information regarding copyright ownership.
1:4fbfbc6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4fbfbc6:  * (the "License"); you may not use this file except in compliance with
1:4fbfbc6:  * the License.  You may obtain a copy of the License at
1:4fbfbc6:  *
1:4fbfbc6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4fbfbc6:  *
1:4fbfbc6:  * Unless required by applicable law or agreed to in writing, software
1:4fbfbc6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4fbfbc6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4fbfbc6:  * See the License for the specific language governing permissions and
1:4fbfbc6:  * limitations under the License.
1:4fbfbc6:  */
1:4fbfbc6: 
1:131eb4a: package org.apache.mahout.math.stats;
2:131eb4a: 
1:229aeff: import com.google.common.base.Preconditions;
1:131eb4a: import org.apache.mahout.math.Vector;
1:131eb4a: 
1:131eb4a: import java.util.Arrays;
1:131eb4a: import java.util.Random;
1:131eb4a: 
1:131eb4a: /**
1:131eb4a:  * Discrete distribution sampler:
2:131eb4a:  *
1:131eb4a:  * Samples from a given discrete distribution: you provide a source of randomness and a Vector
1:131eb4a:  * (cardinality N) which describes a distribution over [0,N), and calls to sample() sample
1:131eb4a:  * from 0 to N using this distribution
1:131eb4a:  */
1:131eb4a: public class Sampler {
1:131eb4a: 
1:4fbfbc6:   private final Random random;
1:4fbfbc6:   private final double[] sampler;
1:131eb4a: 
1:131eb4a:   public Sampler(Random random) {
1:131eb4a:     this.random = random;
1:131eb4a:     sampler = null;
3:131eb4a:   }
1:131eb4a: 
1:131eb4a:   public Sampler(Random random, double[] sampler) {
1:131eb4a:     this.random = random;
1:131eb4a:     this.sampler = sampler;
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   public Sampler(Random random, Vector distribution) {
1:131eb4a:     this.random = random;
1:131eb4a:     this.sampler = samplerFor(distribution);
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   public int sample(Vector distribution) {
1:131eb4a:     return sample(samplerFor(distribution));
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   public int sample() {
1:229aeff:     Preconditions.checkNotNull(sampler,
1:229aeff:       "Sampler must have been constructed with a distribution, or else sample(Vector) should be used to sample");
1:131eb4a:     return sample(sampler);
1:131eb4a:   }
1:131eb4a: 
1:4fbfbc6:   private static double[] samplerFor(Vector vectorDistribution) {
1:131eb4a:     int size = vectorDistribution.size();
1:131eb4a:     double[] partition = new double[size];
1:131eb4a:     double norm = vectorDistribution.norm(1);
1:131eb4a:     double sum = 0;
1:e64dd36:     for (int i = 0; i < size; i++) {
1:4fbfbc6:       sum += vectorDistribution.get(i) / norm;
1:131eb4a:       partition[i] = sum;
1:131eb4a:     }
1:131eb4a:     return partition;
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   private int sample(double[] sampler) {
1:131eb4a:     int index = Arrays.binarySearch(sampler, random.nextDouble());
1:4841efb:     return index < 0 ? -(index + 1) : index;
1:131eb4a:   }
1:131eb4a: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1:     return index < 0 ? -(index + 1) : index;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkNotNull(sampler,
1:       "Sampler must have been constructed with a distribution, or else sample(Vector) should be used to sample");
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1:   private final Random random;
1:   private final double[] sampler;
/////////////////////////////////////////////////////////////////////////
0:   private static double[] samplerFor(double[] distribution) {
1:   private static double[] samplerFor(Vector vectorDistribution) {
1:       sum += vectorDistribution.get(i) / norm;
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
0:     if (sampler == null) {
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < size; i++) {
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:131eb4a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.stats;
1: 
0: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: 
1: import java.util.Arrays;
1: import java.util.Random;
1: 
1: /**
1:  * Discrete distribution sampler:
1:  *
1:  * Samples from a given discrete distribution: you provide a source of randomness and a Vector
1:  * (cardinality N) which describes a distribution over [0,N), and calls to sample() sample
1:  * from 0 to N using this distribution
1:  *
1:  */
1: public class Sampler {
1: 
0:   private Random random;
0:   private double[] sampler;
1: 
1:   public Sampler(Random random) {
1:     this.random = random;
1:     sampler = null;
1:   }
1: 
1:   public Sampler(Random random, double[] sampler) {
1:     this.random = random;
1:     this.sampler = sampler;
1:   }
1: 
1:   public Sampler(Random random, Vector distribution) {
1:     this.random = random;
1:     this.sampler = samplerFor(distribution);
1:   }
1: 
1:   public int sample(Vector distribution) {
1:     return sample(samplerFor(distribution));
1:   }
1: 
1:   public int sample() {
0:     if(sampler == null) {
0:       throw new NullPointerException("Sampler must have been constructed with a distribution, or"
0:         + " else sample(Vector) should be used to sample");
1:     }
1:     return sample(sampler);
1:   }
1: 
0:   private double[] samplerFor(double[] distribution) {
0:     return samplerFor(new DenseVector(distribution));
1:   }
1: 
0:   private double[] samplerFor(Vector vectorDistribution) {
1:     int size = vectorDistribution.size();
1:     double[] partition = new double[size];
1:     double norm = vectorDistribution.norm(1);
1:     double sum = 0;
0:     for(int i = 0; i < size; i++) {
0:       sum += (vectorDistribution.get(i) / norm);
1:       partition[i] = sum;
1:     }
1:     return partition;
1:   }
1: 
1:   private int sample(double[] sampler) {
1:     int index = Arrays.binarySearch(sampler, random.nextDouble());
0:     return index < 0 ? -(index+1) : index;
1:   }
1: }
============================================================================