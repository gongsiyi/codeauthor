1:ee4a261: /**
1:ee4a261:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ee4a261:  * contributor license agreements.  See the NOTICE file distributed with
1:ee4a261:  * this work for additional information regarding copyright ownership.
1:ee4a261:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ee4a261:  * (the "License"); you may not use this file except in compliance with
1:ee4a261:  * the License.  You may obtain a copy of the License at
2:ee4a261:  *
1:ee4a261:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ee4a261:  *
1:ee4a261:  * Unless required by applicable law or agreed to in writing, software
1:ee4a261:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ee4a261:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee4a261:  * See the License for the specific language governing permissions and
1:ee4a261:  * limitations under the License.
1:ee4a261:  */
3:3bad4df: 
1:758cc1b: package org.apache.mahout.utils.vectors.arff;
1:758cc1b: 
1:ee4a261: import java.text.DateFormat;
1:233d93d: import java.util.Map;
1:3bad4df: 
1:ee4a261: /**
1:ee4a261:  * An interface for representing an ARFFModel.  Implementations can decide on the best approach
1:ee4a261:  * for storing the model, as some approaches will be fine for smaller files, while larger
1:ee4a261:  * ones may require a better implementation.
1:758cc1b:  */
1:ee4a261: public interface ARFFModel {
1:297bef5:   String ARFF_SPARSE = "{"; //indicates the vector is sparse
1:c9a7947:   String ARFF_SPARSE_END = "}";
1:758cc1b:   String ARFF_COMMENT = "%";
1:758cc1b:   String ATTRIBUTE = "@attribute";
1:758cc1b:   String DATA = "@data";
1:758cc1b:   String RELATION = "@relation";
1:233d93d:   
1:233d93d:   
1:ee4a261:   String getRelation();
1:233d93d:   
1:ee4a261:   void setRelation(String relation);
1:233d93d:   
1:ee4a261:   /**
1:ee4a261:    * The vector attributes (labels in Mahout speak)
1:ee4a261:    * @return the map
1:ee4a261:    */
1:ee4a261:   Map<String, Integer> getLabelBindings();
1:233d93d:   
1:20faad6:   Integer getNominalValue(String label, String nominal);
1:233d93d:   
1:20faad6:   void addNominal(String label, String nominal, int idx);
1:233d93d:   
1:ee4a261:   DateFormat getDateFormat(Integer idx);
1:233d93d:   
1:ee4a261:   void addDateFormat(Integer idx, DateFormat format);
1:233d93d:   
1:ee4a261:   Integer getLabelIndex(String label);
1:233d93d:   
1:ee4a261:   void addLabel(String label, Integer idx);
1:233d93d:   
1:ee4a261:   ARFFType getARFFType(Integer idx);
1:233d93d:   
1:ee4a261:   void addType(Integer idx, ARFFType type);
1:233d93d:   
1:ee4a261:   /**
1:ee4a261:    * The count of the number of words seen
1:ee4a261:    * @return the count
1:ee4a261:    */
1:ee4a261:   long getWordCount();
1:233d93d:   
1:3bad4df:   double getValue(String data, int idx);
1:233d93d:   
1:20faad6:   Map<String, Map<String, Integer>> getNominalMap();
1:233d93d:   
1:3bad4df:   int getLabelSize();
1:233d93d:   
1:3bad4df:   Map<String, Long> getWords();
1:ee4a261: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:c9a7947
/////////////////////////////////////////////////////////////////////////
1:   String ARFF_SPARSE_END = "}";
commit:50fd693
commit:ad2817b
commit:758cc1b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.vectors.arff;
1: 
/////////////////////////////////////////////////////////////////////////
1:  */
0:   DateFormat DEFAULT_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
0:   String ARFF_SPARSE = "{";//indicates the vector is sparse
1:   String ARFF_COMMENT = "%";
1:   String ATTRIBUTE = "@attribute";
1:   String DATA = "@data";
1:   String RELATION = "@relation";
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:a7f82c9
author:Robin Anil
-------------------------------------------------------------------------------
commit:297bef5
/////////////////////////////////////////////////////////////////////////
1:   String ARFF_SPARSE = "{"; //indicates the vector is sparse
commit:233d93d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:   
1:   
1:   
1:   
1:   
1:   
1:   
1:   
1:   
1:   
1:   
1:   
1:   
1:   
1:   
1:   
1:   
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:20faad6
/////////////////////////////////////////////////////////////////////////
1:   Integer getNominalValue(String label, String nominal);
1:   void addNominal(String label, String nominal, int idx);
/////////////////////////////////////////////////////////////////////////
1:   Map<String, Map<String, Integer>> getNominalMap();
commit:3bad4df
/////////////////////////////////////////////////////////////////////////
1: 
1:   double getValue(String data, int idx);
1: 
0:   Map<String, Integer> getNominalMap();
1: 
1:   int getLabelSize();
1: 
1:   Map<String, Long> getWords();
commit:ee4a261
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.arff;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
0: import java.util.Map;
1: import java.text.DateFormat;
0: import java.text.SimpleDateFormat;
0: 
0: 
1: /**
1:  * An interface for representing an ARFFModel.  Implementations can decide on the best approach
1:  * for storing the model, as some approaches will be fine for smaller files, while larger
1:  * ones may require a better implementation.
1:  *
0:  **/
1: public interface ARFFModel {
0:   public static final DateFormat DEFAULT_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
0:   public static final String ARFF_SPARSE = "{";//indicates the vector is sparse
0:   public static final String ARFF_COMMENT = "%";
0:   public static final String ATTRIBUTE = "@attribute";
0:   public static final String DATA = "@data";
0:   public static final String RELATION = "@relation";
0: 
0: 
1:   String getRelation();
0: 
1:   void setRelation(String relation);
0: 
1:   /**
1:    * The vector attributes (labels in Mahout speak)
1:    * @return the map
1:    */
1:   Map<String, Integer> getLabelBindings();
0: 
0:   Integer getNominalValue(String nominal);
0: 
0:   void addNominal(String nominal, int idx);
0: 
1:   DateFormat getDateFormat(Integer idx);
0: 
1:   void addDateFormat(Integer idx, DateFormat format);
0: 
1:   Integer getLabelIndex(String label);
0: 
1:   void addLabel(String label, Integer idx);
0: 
1:   ARFFType getARFFType(Integer idx);
0: 
1:   void addType(Integer idx, ARFFType type);
0: 
1:   /**
1:    * The count of the number of words seen
1:    * @return the count
1:    */
1:   long getWordCount();
1: }
============================================================================