1:a66f1a8: /**
1:a66f1a8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a66f1a8:  * contributor license agreements.  See the NOTICE file distributed with
1:a66f1a8:  * this work for additional information regarding copyright ownership.
1:a66f1a8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a66f1a8:  * (the "License"); you may not use this file except in compliance with
1:a66f1a8:  * the License.  You may obtain a copy of the License at
1:a66f1a8:  *
1:a66f1a8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a66f1a8:  *
1:a66f1a8:  * Unless required by applicable law or agreed to in writing, software
1:a66f1a8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a66f1a8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a66f1a8:  * See the License for the specific language governing permissions and
1:a66f1a8:  * limitations under the License.
1:a66f1a8:  */
1:a66f1a8: 
1:da03b23: package org.apache.mahout.common;
1:a66f1a8: 
1:a66f1a8: import java.io.Serializable;
1:a66f1a8: 
1:f3a9cc1: import com.google.common.primitives.Longs;
1:f3a9cc1: 
1:a66f1a8: /** A simple (ordered) pair of longs. */
1:a66f1a8: public final class LongPair implements Comparable<LongPair>, Serializable {
1:a66f1a8:   
1:a66f1a8:   private final long first;
1:a66f1a8:   private final long second;
1:a66f1a8:   
1:a66f1a8:   public LongPair(long first, long second) {
1:a66f1a8:     this.first = first;
1:a66f1a8:     this.second = second;
2:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8:   public long getFirst() {
1:a66f1a8:     return first;
1:4841efb:   }
1:a66f1a8:   
1:a66f1a8:   public long getSecond() {
1:a66f1a8:     return second;
1:a66f1a8:   }
1:a66f1a8:   
1:da03b23:   public LongPair swap() {
1:da03b23:     return new LongPair(second, first);
1:da03b23:   }
1:da03b23:   
1:a66f1a8:   @Override
1:a66f1a8:   public boolean equals(Object obj) {
1:a66f1a8:     if (!(obj instanceof LongPair)) {
1:a66f1a8:       return false;
1:a66f1a8:     }
1:a66f1a8:     LongPair otherPair = (LongPair) obj;
1:fc74924:     return first == otherPair.getFirst() && second == otherPair.getSecond();
1:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8:   @Override
1:a66f1a8:   public int hashCode() {
1:f3a9cc1:     int firstHash = Longs.hashCode(first);
1:a66f1a8:     // Flip top and bottom 16 bits; this makes the hash function probably different
1:a66f1a8:     // for (a,b) versus (b,a)
1:f3a9cc1:     return (firstHash >>> 16 | firstHash << 16) ^ Longs.hashCode(second);
1:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8:   @Override
1:a66f1a8:   public String toString() {
1:a66f1a8:     return '(' + String.valueOf(first) + ',' + second + ')';
1:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8:   @Override
1:a66f1a8:   public int compareTo(LongPair o) {
1:fc74924:     if (first < o.getFirst()) {
1:a66f1a8:       return -1;
1:fc74924:     } else if (first > o.getFirst()) {
1:a66f1a8:       return 1;
1:a66f1a8:     } else {
1:fc74924:       return second < o.getSecond() ? -1 : second > o.getSecond() ? 1 : 0;
1:a66f1a8:     }
1:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:f3a9cc1
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.primitives.Longs;
1: 
/////////////////////////////////////////////////////////////////////////
1:     int firstHash = Longs.hashCode(first);
1:     return (firstHash >>> 16 | firstHash << 16) ^ Longs.hashCode(second);
commit:fc74924
/////////////////////////////////////////////////////////////////////////
1:     return first == otherPair.getFirst() && second == otherPair.getSecond();
/////////////////////////////////////////////////////////////////////////
1:     if (first < o.getFirst()) {
1:     } else if (first > o.getFirst()) {
1:       return second < o.getSecond() ? -1 : second > o.getSecond() ? 1 : 0;
commit:da03b23
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.common;
/////////////////////////////////////////////////////////////////////////
1:   public LongPair swap() {
1:     return new LongPair(second, first);
1:   }
1: 
commit:a66f1a8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.cf.taste.impl.common;
1: 
1: import java.io.Serializable;
1: 
1: /** A simple (ordered) pair of longs. */
1: public final class LongPair implements Comparable<LongPair>, Serializable {
1: 
1:   private final long first;
1:   private final long second;
1: 
1:   public LongPair(long first, long second) {
1:     this.first = first;
1:     this.second = second;
1:   }
1: 
1:   public long getFirst() {
1:     return first;
1:   }
1: 
1:   public long getSecond() {
1:     return second;
1:   }
1: 
1:   @Override
1:   public boolean equals(Object obj) {
1:     if (!(obj instanceof LongPair)) {
1:       return false;
1:     }
1:     LongPair otherPair = (LongPair) obj;
0:     return first == otherPair.first && second == otherPair.second;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
0:     int firstHash = RandomUtils.hashLong(first);
1:     // Flip top and bottom 16 bits; this makes the hash function probably different
1:     // for (a,b) versus (b,a)
0:     return (firstHash >>> 16 | firstHash << 16) ^ RandomUtils.hashLong(second);
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     return '(' + String.valueOf(first) + ',' + second + ')';
1:   }
1: 
1:   @Override
1:   public int compareTo(LongPair o) {
0:     if (first < o.first) {
1:       return -1;
0:     } else if (first > o.first) {
1:       return 1;
1:     } else {
0:       return second < o.second ? -1 : second > o.second ? 1 : 0;
1:     }
1:   }
1: 
1: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:b82d989
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
0:   
0:   
0:   
/////////////////////////////////////////////////////////////////////////
0:   
/////////////////////////////////////////////////////////////////////////
0:   
0:   
/////////////////////////////////////////////////////////////////////////
0:   
============================================================================