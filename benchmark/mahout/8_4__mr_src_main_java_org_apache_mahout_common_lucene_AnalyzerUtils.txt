1:6a4942c: package org.apache.mahout.common.lucene;
1:6a4942c: /*
1:6a4942c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6a4942c:  * contributor license agreements.  See the NOTICE file distributed with
1:6a4942c:  * this work for additional information regarding copyright ownership.
1:6a4942c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6a4942c:  * (the "License"); you may not use this file except in compliance with
1:6a4942c:  * the License.  You may obtain a copy of the License at
3:6a4942c:  *
1:6a4942c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6a4942c:  *
1:6a4942c:  * Unless required by applicable law or agreed to in writing, software
1:6a4942c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6a4942c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6a4942c:  * See the License for the specific language governing permissions and
1:6a4942c:  * limitations under the License.
1:6a4942c:  */
2:6a4942c: 
1:6a4942c: import org.apache.lucene.analysis.Analyzer;
1:6a4942c: import org.apache.lucene.util.Version;
1:6a4942c: import org.apache.mahout.common.ClassUtils;
1:6a4942c: 
1:10c535c: public final class AnalyzerUtils {
1:6a4942c: 
1:c79dde5:   private AnalyzerUtils() {}
1:6a4942c: 
2:6a4942c:   /**
1:4841efb:    * Create an Analyzer using the latest {@link org.apache.lucene.util.Version}.  Note, if you need to pass in
1:4841efb:    * parameters to your constructor, you will need to wrap it in an implementation that does not take any arguments
1:fc6c6f3:    * @param analyzerClassName - Lucene Analyzer Name
1:fc6c6f3:    * @return {@link Analyzer}
1:fc6c6f3:    * @throws ClassNotFoundException - {@link ClassNotFoundException}
1:6a4942c:    */
1:6a4942c:   public static Analyzer createAnalyzer(String analyzerClassName) throws ClassNotFoundException {
1:4d0cd66:     return createAnalyzer(analyzerClassName, Version.LUCENE_5_5_2);
1:6a4942c:   }
1:6a4942c: 
1:6a4942c:   public static Analyzer createAnalyzer(String analyzerClassName, Version version) throws ClassNotFoundException {
1:6a4942c:     Class<? extends Analyzer> analyzerClass = Class.forName(analyzerClassName).asSubclass(Analyzer.class);
1:6a4942c:     return createAnalyzer(analyzerClass, version);
1:6a4942c:   }
1:6a4942c: 
1:6a4942c:   /**
1:4841efb:    * Create an Analyzer using the latest {@link org.apache.lucene.util.Version}.  Note, if you need to pass in
1:4841efb:    * parameters to your constructor, you will need to wrap it in an implementation that does not take any arguments
1:6a4942c:    * @param analyzerClass The Analyzer Class to instantiate
1:fc6c6f3:    * @return {@link Analyzer}
1:6a4942c:    */
1:4841efb:   public static Analyzer createAnalyzer(Class<? extends Analyzer> analyzerClass) {
1:4d0cd66:     return createAnalyzer(analyzerClass, Version.LUCENE_5_5_2);
1:6a4942c:   }
1:6a4942c: 
1:4841efb:   public static Analyzer createAnalyzer(Class<? extends Analyzer> analyzerClass, Version version) {
1:c79dde5:     try {
1:c79dde5:       return ClassUtils.instantiateAs(analyzerClass, Analyzer.class,
1:c79dde5:           new Class<?>[] { Version.class }, new Object[] { version });
1:c79dde5:     } catch (IllegalStateException e) {
1:c79dde5:       return ClassUtils.instantiateAs(analyzerClass, Analyzer.class);
1:6a4942c:     }
1:6a4942c:   }
1:6a4942c: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:4d0cd66
/////////////////////////////////////////////////////////////////////////
1:     return createAnalyzer(analyzerClassName, Version.LUCENE_5_5_2);
/////////////////////////////////////////////////////////////////////////
1:     return createAnalyzer(analyzerClass, Version.LUCENE_5_5_2);
commit:c88c240
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClassName, Version.LUCENE_45);
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClass, Version.LUCENE_45);
commit:c36dc71
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClassName, Version.LUCENE_42);
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClass, Version.LUCENE_42);
author:Andrew Musselman
-------------------------------------------------------------------------------
commit:864ba1a
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClassName, Version.LUCENE_46);
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClass, Version.LUCENE_46);
commit:a551b15
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClassName, Version.LUCENE_46);
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClass, Version.LUCENE_46);
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:670a7d2
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClassName, Version.LUCENE_4_10_3);
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClass, Version.LUCENE_4_10_3);
commit:4cff542
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClassName, Version.LUCENE_4_10_4);
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClass, Version.LUCENE_4_10_4);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
commit:2e5449f
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClassName, Version.LUCENE_46);
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClass, Version.LUCENE_46);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:e48eb4c
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClassName, Version.LUCENE_43);
/////////////////////////////////////////////////////////////////////////
0:     return createAnalyzer(analyzerClass, Version.LUCENE_43);
commit:fc6c6f3
/////////////////////////////////////////////////////////////////////////
1:    * @param analyzerClassName - Lucene Analyzer Name
1:    * @return {@link Analyzer}
1:    * @throws ClassNotFoundException - {@link ClassNotFoundException}
/////////////////////////////////////////////////////////////////////////
1:    * @return {@link Analyzer}
0:     Analyzer analyzer;
commit:6a4942c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.common.lucene;
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import org.apache.lucene.analysis.Analyzer;
0: import org.apache.lucene.analysis.standard.StandardAnalyzer;
1: import org.apache.lucene.util.Version;
1: import org.apache.mahout.common.ClassUtils;
1: 
1: /**
1:  *
1:  *
0:  **/
0: public class AnalyzerUtils {
1: 
1:   /**
0:    * Create an Analyzer using the latest {@link org.apache.lucene.util.Version}.  Note, if you need to pass in parameters
0:    * to your constructor, you will need to wrap it in an implementation that does not take any arguments
0:    * @param analyzerClassName
0:    * @return
0:    * @throws ClassNotFoundException
1:    */
1:   public static Analyzer createAnalyzer(String analyzerClassName) throws ClassNotFoundException {
0:     return createAnalyzer(analyzerClassName, Version.LUCENE_41);
1:   }
1: 
1:   public static Analyzer createAnalyzer(String analyzerClassName, Version version) throws ClassNotFoundException {
0:     Analyzer analyzer = null;
1:     Class<? extends Analyzer> analyzerClass = Class.forName(analyzerClassName).asSubclass(Analyzer.class);
0:     //TODO: GSI: Not sure I like this, many analyzers in Lucene take in the version
1: 
1:     return createAnalyzer(analyzerClass, version);
1:   }
1: 
1:   /**
0:    * Create an Analyzer using the latest {@link org.apache.lucene.util.Version}.  Note, if you need to pass in parameters
0:    * to your constructor, you will need to wrap it in an implementation that does not take any arguments
1:    * @param analyzerClass The Analyzer Class to instantiate
0:    * @return
1:    */
0:   public static Analyzer createAnalyzer(Class<? extends Analyzer> analyzerClass){
0:     return createAnalyzer(analyzerClass, Version.LUCENE_41);
1:   }
1: 
0:   public static Analyzer createAnalyzer(Class<? extends Analyzer> analyzerClass, Version version){
0:     Analyzer analyzer = null;
0:     if (analyzerClass == StandardAnalyzer.class) {
0:       Class<?>[] params = new Class<?>[1];
0:       params[0] = Version.class;
0:       Object[] args = new Object[1];
0:       args[0] = version;
0:       analyzer = ClassUtils.instantiateAs(analyzerClass,
0:               Analyzer.class, params, args);
1: 
0:     } else {
0:       analyzer = ClassUtils.instantiateAs(analyzerClass, Analyzer.class);
1:     }
0:     return analyzer;
1:   }
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:c79dde5
/////////////////////////////////////////////////////////////////////////
1:   private AnalyzerUtils() {}
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       return ClassUtils.instantiateAs(analyzerClass, Analyzer.class,
1:           new Class<?>[] { Version.class }, new Object[] { version });
1:     } catch (IllegalStateException e) {
1:       return ClassUtils.instantiateAs(analyzerClass, Analyzer.class);
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1:    * Create an Analyzer using the latest {@link org.apache.lucene.util.Version}.  Note, if you need to pass in
1:    * parameters to your constructor, you will need to wrap it in an implementation that does not take any arguments
/////////////////////////////////////////////////////////////////////////
1:    * Create an Analyzer using the latest {@link org.apache.lucene.util.Version}.  Note, if you need to pass in
1:    * parameters to your constructor, you will need to wrap it in an implementation that does not take any arguments
1:   public static Analyzer createAnalyzer(Class<? extends Analyzer> analyzerClass) {
1:   public static Analyzer createAnalyzer(Class<? extends Analyzer> analyzerClass, Version version) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1: public final class AnalyzerUtils {
0: 
0:   private AnalyzerUtils() {
0:   }
============================================================================