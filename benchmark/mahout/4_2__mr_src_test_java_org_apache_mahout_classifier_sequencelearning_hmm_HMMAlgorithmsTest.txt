1:27d33a2: /**
1:27d33a2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:27d33a2:  * contributor license agreements.  See the NOTICE file distributed with
1:27d33a2:  * this work for additional information regarding copyright ownership.
1:27d33a2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:27d33a2:  * (the "License"); you may not use this file except in compliance with
1:27d33a2:  * the License.  You may obtain a copy of the License at
1:27d33a2:  *
1:27d33a2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:27d33a2:  *
1:27d33a2:  * Unless required by applicable law or agreed to in writing, software
1:27d33a2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27d33a2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27d33a2:  * See the License for the specific language governing permissions and
1:27d33a2:  * limitations under the License.
1:27d33a2:  */
2:27d33a2: 
1:27d33a2: package org.apache.mahout.classifier.sequencelearning.hmm;
1:27d33a2: 
1:27d33a2: import org.apache.mahout.math.Matrix;
1:27d33a2: import org.junit.Test;
1:27d33a2: 
1:27d33a2: public class HMMAlgorithmsTest extends HMMTestBase {
1:27d33a2: 
1:27d33a2:   /**
1:27d33a2:    * Test the forward algorithm by comparing the alpha values with the values
1:27d33a2:    * obtained from HMM R model. We test the test observation sequence "O1" "O0"
1:27d33a2:    * "O2" "O2" "O0" "O0" "O1" by comparing the generated alpha values to the
1:27d33a2:    * R-generated "reference".
1:27d33a2:    */
1:27d33a2:   @Test
1:27d33a2:   public void testForwardAlgorithm() {
1:27d33a2:     // intialize the expected alpha values
1:d53cf4a:     double[][] alphaExpectedA = {
1:27d33a2:         {0.02, 0.0392, 0.002438, 0.00035456, 0.0011554672, 7.158497e-04,
1:27d33a2:             4.614927e-05},
1:27d33a2:         {0.01, 0.0054, 0.001824, 0.00069486, 0.0007586904, 2.514137e-04,
1:27d33a2:             1.721505e-05},
1:27d33a2:         {0.32, 0.0262, 0.002542, 0.00038026, 0.0001360234, 3.002345e-05,
1:27d33a2:             9.659608e-05},
1:27d33a2:         {0.03, 0.0000, 0.013428, 0.00951084, 0.0000000000, 0.000000e+00,
1:27d33a2:             2.428986e-05},};
1:27d33a2:     // fetch the alpha matrix using the forward algorithm
1:d53cf4a:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(getModel(), getSequence(), false);
1:27d33a2:     // first do some basic checking
1:d53cf4a:     assertNotNull(alpha);
1:d53cf4a:     assertEquals(4, alpha.numCols());
1:d53cf4a:     assertEquals(7, alpha.numRows());
1:27d33a2:     // now compare the resulting matrices
1:d53cf4a:     for (int i = 0; i < 4; ++i) {
1:d53cf4a:       for (int j = 0; j < 7; ++j) {
1:d53cf4a:         assertEquals(alphaExpectedA[i][j], alpha.get(j, i), EPSILON);
1:d53cf4a:       }
1:d53cf4a:     }
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testLogScaledForwardAlgorithm() {
1:27d33a2:     // intialize the expected alpha values
1:d53cf4a:     double[][] alphaExpectedA = {
1:27d33a2:         {0.02, 0.0392, 0.002438, 0.00035456, 0.0011554672, 7.158497e-04,
1:27d33a2:             4.614927e-05},
1:27d33a2:         {0.01, 0.0054, 0.001824, 0.00069486, 0.0007586904, 2.514137e-04,
1:27d33a2:             1.721505e-05},
1:27d33a2:         {0.32, 0.0262, 0.002542, 0.00038026, 0.0001360234, 3.002345e-05,
1:27d33a2:             9.659608e-05},
1:27d33a2:         {0.03, 0.0000, 0.013428, 0.00951084, 0.0000000000, 0.000000e+00,
1:27d33a2:             2.428986e-05},};
1:27d33a2:     // fetch the alpha matrix using the forward algorithm
1:d53cf4a:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(getModel(), getSequence(), true);
1:27d33a2:     // first do some basic checking
1:d53cf4a:     assertNotNull(alpha);
1:d53cf4a:     assertEquals(4, alpha.numCols());
1:d53cf4a:     assertEquals(7, alpha.numRows());
1:27d33a2:     // now compare the resulting matrices
1:d53cf4a:     for (int i = 0; i < 4; ++i) {
1:d53cf4a:       for (int j = 0; j < 7; ++j) {
1:d53cf4a:         assertEquals(Math.log(alphaExpectedA[i][j]), alpha.get(j, i), EPSILON);
1:d53cf4a:       }
1:d53cf4a:     }
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   /**
1:27d33a2:    * Test the backward algorithm by comparing the beta values with the values
1:27d33a2:    * obtained from HMM R model. We test the following observation sequence "O1"
1:27d33a2:    * "O0" "O2" "O2" "O0" "O0" "O1" by comparing the generated beta values to the
1:27d33a2:    * R-generated "reference".
1:27d33a2:    */
1:27d33a2:   @Test
1:27d33a2:   public void testBackwardAlgorithm() {
1:27d33a2:     // intialize the expected beta values
1:d53cf4a:     double[][] betaExpectedA = {
1:27d33a2:         {0.0015730559, 0.003543656, 0.00738264, 0.040692, 0.0848, 0.17, 1},
1:27d33a2:         {0.0017191865, 0.002386795, 0.00923652, 0.052232, 0.1018, 0.17, 1},
1:27d33a2:         {0.0003825772, 0.001238558, 0.00259464, 0.012096, 0.0664, 0.66, 1},
1:27d33a2:         {0.0004390858, 0.007076994, 0.01063512, 0.013556, 0.0304, 0.17, 1}};
1:27d33a2:     // fetch the beta matrix using the backward algorithm
1:d53cf4a:     Matrix beta = HmmAlgorithms.backwardAlgorithm(getModel(), getSequence(), false);
1:27d33a2:     // first do some basic checking
1:d53cf4a:     assertNotNull(beta);
1:d53cf4a:     assertEquals(4, beta.numCols());
1:d53cf4a:     assertEquals(7, beta.numRows());
1:27d33a2:     // now compare the resulting matrices
1:d53cf4a:     for (int i = 0; i < 4; ++i) {
1:d53cf4a:       for (int j = 0; j < 7; ++j) {
1:d53cf4a:         assertEquals(betaExpectedA[i][j], beta.get(j, i), EPSILON);
1:d53cf4a:       }
1:d53cf4a:     }
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testLogScaledBackwardAlgorithm() {
1:27d33a2:     // intialize the expected beta values
1:d53cf4a:     double[][] betaExpectedA = {
1:27d33a2:         {0.0015730559, 0.003543656, 0.00738264, 0.040692, 0.0848, 0.17, 1},
1:27d33a2:         {0.0017191865, 0.002386795, 0.00923652, 0.052232, 0.1018, 0.17, 1},
1:27d33a2:         {0.0003825772, 0.001238558, 0.00259464, 0.012096, 0.0664, 0.66, 1},
1:27d33a2:         {0.0004390858, 0.007076994, 0.01063512, 0.013556, 0.0304, 0.17, 1}};
1:27d33a2:     // fetch the beta matrix using the backward algorithm
1:d53cf4a:     Matrix beta = HmmAlgorithms.backwardAlgorithm(getModel(), getSequence(), true);
1:27d33a2:     // first do some basic checking
1:d53cf4a:     assertNotNull(beta);
1:d53cf4a:     assertEquals(4, beta.numCols());
1:d53cf4a:     assertEquals(7, beta.numRows());
1:27d33a2:     // now compare the resulting matrices
1:d53cf4a:     for (int i = 0; i < 4; ++i) {
1:d53cf4a:       for (int j = 0; j < 7; ++j) {
1:d53cf4a:         assertEquals(Math.log(betaExpectedA[i][j]), beta.get(j, i), EPSILON);
1:d53cf4a:       }
1:d53cf4a:     }
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testViterbiAlgorithm() {
1:27d33a2:     // initialize the expected hidden sequence
1:27d33a2:     int[] expected = {2, 0, 3, 3, 0, 0, 2};
1:27d33a2:     // fetch the viterbi generated sequence
1:d53cf4a:     int[] computed = HmmAlgorithms.viterbiAlgorithm(getModel(), getSequence(), false);
1:27d33a2:     // first make sure we return the correct size
1:d53cf4a:     assertNotNull(computed);
1:d53cf4a:     assertEquals(computed.length, getSequence().length);
1:27d33a2:     // now check the contents
1:d53cf4a:     for (int i = 0; i < getSequence().length; ++i) {
1:d53cf4a:       assertEquals(expected[i], computed[i]);
1:d53cf4a:     }
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testLogScaledViterbiAlgorithm() {
1:27d33a2:     // initialize the expected hidden sequence
1:27d33a2:     int[] expected = {2, 0, 3, 3, 0, 0, 2};
1:27d33a2:     // fetch the viterbi generated sequence
1:d53cf4a:     int[] computed = HmmAlgorithms.viterbiAlgorithm(getModel(), getSequence(), true);
1:27d33a2:     // first make sure we return the correct size
1:d53cf4a:     assertNotNull(computed);
1:d53cf4a:     assertEquals(computed.length, getSequence().length);
1:27d33a2:     // now check the contents
1:d53cf4a:     for (int i = 0; i < getSequence().length; ++i) {
1:d53cf4a:       assertEquals(expected[i], computed[i]);
1:d53cf4a:     }
1:27d33a2: 
1:27d33a2:   }
1:27d33a2: 
1:27d33a2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d53cf4a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     double[][] alphaExpectedA = {
/////////////////////////////////////////////////////////////////////////
1:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(getModel(), getSequence(), false);
1:     assertNotNull(alpha);
1:     assertEquals(4, alpha.numCols());
1:     assertEquals(7, alpha.numRows());
1:     for (int i = 0; i < 4; ++i) {
1:       for (int j = 0; j < 7; ++j) {
1:         assertEquals(alphaExpectedA[i][j], alpha.get(j, i), EPSILON);
1:       }
1:     }
1:     double[][] alphaExpectedA = {
/////////////////////////////////////////////////////////////////////////
1:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(getModel(), getSequence(), true);
1:     assertNotNull(alpha);
1:     assertEquals(4, alpha.numCols());
1:     assertEquals(7, alpha.numRows());
1:     for (int i = 0; i < 4; ++i) {
1:       for (int j = 0; j < 7; ++j) {
1:         assertEquals(Math.log(alphaExpectedA[i][j]), alpha.get(j, i), EPSILON);
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:     double[][] betaExpectedA = {
1:     Matrix beta = HmmAlgorithms.backwardAlgorithm(getModel(), getSequence(), false);
1:     assertNotNull(beta);
1:     assertEquals(4, beta.numCols());
1:     assertEquals(7, beta.numRows());
1:     for (int i = 0; i < 4; ++i) {
1:       for (int j = 0; j < 7; ++j) {
1:         assertEquals(betaExpectedA[i][j], beta.get(j, i), EPSILON);
1:       }
1:     }
1:     double[][] betaExpectedA = {
1:     Matrix beta = HmmAlgorithms.backwardAlgorithm(getModel(), getSequence(), true);
1:     assertNotNull(beta);
1:     assertEquals(4, beta.numCols());
1:     assertEquals(7, beta.numRows());
1:     for (int i = 0; i < 4; ++i) {
1:       for (int j = 0; j < 7; ++j) {
1:         assertEquals(Math.log(betaExpectedA[i][j]), beta.get(j, i), EPSILON);
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:     int[] computed = HmmAlgorithms.viterbiAlgorithm(getModel(), getSequence(), false);
1:     assertNotNull(computed);
1:     assertEquals(computed.length, getSequence().length);
1:     for (int i = 0; i < getSequence().length; ++i) {
1:       assertEquals(expected[i], computed[i]);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     int[] computed = HmmAlgorithms.viterbiAlgorithm(getModel(), getSequence(), true);
1:     assertNotNull(computed);
1:     assertEquals(computed.length, getSequence().length);
1:     for (int i = 0; i < getSequence().length; ++i) {
1:       assertEquals(expected[i], computed[i]);
1:     }
author:Isabel Drost
-------------------------------------------------------------------------------
commit:27d33a2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sequencelearning.hmm;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.mahout.math.Matrix;
1: import org.junit.Test;
1: 
1: public class HMMAlgorithmsTest extends HMMTestBase {
1: 
1:   /**
1:    * Test the forward algorithm by comparing the alpha values with the values
1:    * obtained from HMM R model. We test the test observation sequence "O1" "O0"
1:    * "O2" "O2" "O0" "O0" "O1" by comparing the generated alpha values to the
1:    * R-generated "reference".
1:    */
1:   @Test
1:   public void testForwardAlgorithm() {
1:     // intialize the expected alpha values
0:     double alphaExpectedA[][] = {
1:         {0.02, 0.0392, 0.002438, 0.00035456, 0.0011554672, 7.158497e-04,
1:             4.614927e-05},
1:         {0.01, 0.0054, 0.001824, 0.00069486, 0.0007586904, 2.514137e-04,
1:             1.721505e-05},
1:         {0.32, 0.0262, 0.002542, 0.00038026, 0.0001360234, 3.002345e-05,
1:             9.659608e-05},
1:         {0.03, 0.0000, 0.013428, 0.00951084, 0.0000000000, 0.000000e+00,
1:             2.428986e-05},};
1:     // fetch the alpha matrix using the forward algorithm
0:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(model, sequence, false);
1:     // first do some basic checking
0:     Assert.assertNotNull(alpha);
0:     Assert.assertEquals(alpha.numCols(), 4);
0:     Assert.assertEquals(alpha.numRows(), 7);
1:     // now compare the resulting matrices
0:     for (int i = 0; i < 4; ++i)
0:       for (int j = 0; j < 7; ++j)
0:         Assert.assertEquals(alphaExpectedA[i][j], alpha.get(j, i), 0.00001);
1:   }
1: 
1:   @Test
1:   public void testLogScaledForwardAlgorithm() {
1:     // intialize the expected alpha values
0:     double alphaExpectedA[][] = {
1:         {0.02, 0.0392, 0.002438, 0.00035456, 0.0011554672, 7.158497e-04,
1:             4.614927e-05},
1:         {0.01, 0.0054, 0.001824, 0.00069486, 0.0007586904, 2.514137e-04,
1:             1.721505e-05},
1:         {0.32, 0.0262, 0.002542, 0.00038026, 0.0001360234, 3.002345e-05,
1:             9.659608e-05},
1:         {0.03, 0.0000, 0.013428, 0.00951084, 0.0000000000, 0.000000e+00,
1:             2.428986e-05},};
1:     // fetch the alpha matrix using the forward algorithm
0:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(model, sequence, true);
1:     // first do some basic checking
0:     Assert.assertNotNull(alpha);
0:     Assert.assertEquals(alpha.numCols(), 4);
0:     Assert.assertEquals(alpha.numRows(), 7);
1:     // now compare the resulting matrices
0:     for (int i = 0; i < 4; ++i)
0:       for (int j = 0; j < 7; ++j)
0:         Assert.assertEquals(Math.log(alphaExpectedA[i][j]), alpha.get(j, i),
0:             0.00001);
1:   }
1: 
1:   /**
1:    * Test the backward algorithm by comparing the beta values with the values
1:    * obtained from HMM R model. We test the following observation sequence "O1"
1:    * "O0" "O2" "O2" "O0" "O0" "O1" by comparing the generated beta values to the
1:    * R-generated "reference".
1:    */
1:   @Test
1:   public void testBackwardAlgorithm() {
1:     // intialize the expected beta values
0:     double betaExpectedA[][] = {
1:         {0.0015730559, 0.003543656, 0.00738264, 0.040692, 0.0848, 0.17, 1},
1:         {0.0017191865, 0.002386795, 0.00923652, 0.052232, 0.1018, 0.17, 1},
1:         {0.0003825772, 0.001238558, 0.00259464, 0.012096, 0.0664, 0.66, 1},
1:         {0.0004390858, 0.007076994, 0.01063512, 0.013556, 0.0304, 0.17, 1}};
1:     // fetch the beta matrix using the backward algorithm
0:     Matrix beta = HmmAlgorithms.backwardAlgorithm(model, sequence, false);
1:     // first do some basic checking
0:     Assert.assertNotNull(beta);
0:     Assert.assertEquals(beta.numCols(), 4);
0:     Assert.assertEquals(beta.numRows(), 7);
1:     // now compare the resulting matrices
0:     for (int i = 0; i < 4; ++i)
0:       for (int j = 0; j < 7; ++j)
0:         Assert.assertEquals(betaExpectedA[i][j], beta.get(j, i), 0.00001);
1:   }
1: 
1:   @Test
1:   public void testLogScaledBackwardAlgorithm() {
1:     // intialize the expected beta values
0:     double betaExpectedA[][] = {
1:         {0.0015730559, 0.003543656, 0.00738264, 0.040692, 0.0848, 0.17, 1},
1:         {0.0017191865, 0.002386795, 0.00923652, 0.052232, 0.1018, 0.17, 1},
1:         {0.0003825772, 0.001238558, 0.00259464, 0.012096, 0.0664, 0.66, 1},
1:         {0.0004390858, 0.007076994, 0.01063512, 0.013556, 0.0304, 0.17, 1}};
1:     // fetch the beta matrix using the backward algorithm
0:     Matrix beta = HmmAlgorithms.backwardAlgorithm(model, sequence, true);
1:     // first do some basic checking
0:     Assert.assertNotNull(beta);
0:     Assert.assertEquals(beta.numCols(), 4);
0:     Assert.assertEquals(beta.numRows(), 7);
1:     // now compare the resulting matrices
0:     for (int i = 0; i < 4; ++i)
0:       for (int j = 0; j < 7; ++j)
0:         Assert.assertEquals(Math.log(betaExpectedA[i][j]), beta.get(j, i),
0:             0.00001);
1:   }
1: 
1:   @Test
1:   public void testViterbiAlgorithm() {
1:     // initialize the expected hidden sequence
1:     int[] expected = {2, 0, 3, 3, 0, 0, 2};
1:     // fetch the viterbi generated sequence
0:     int[] computed = HmmAlgorithms.viterbiAlgorithm(model, sequence, false);
1:     // first make sure we return the correct size
0:     Assert.assertNotNull(computed);
0:     Assert.assertEquals(computed.length, sequence.length);
1:     // now check the contents
0:     for (int i = 0; i < sequence.length; ++i)
0:       Assert.assertEquals(expected[i], computed[i]);
1:   }
1: 
1:   @Test
1:   public void testLogScaledViterbiAlgorithm() {
1:     // initialize the expected hidden sequence
1:     int[] expected = {2, 0, 3, 3, 0, 0, 2};
1:     // fetch the viterbi generated sequence
0:     int[] computed = HmmAlgorithms.viterbiAlgorithm(model, sequence, true);
1:     // first make sure we return the correct size
0:     Assert.assertNotNull(computed);
0:     Assert.assertEquals(computed.length, sequence.length);
1:     // now check the contents
0:     for (int i = 0; i < sequence.length; ++i)
0:       Assert.assertEquals(expected[i], computed[i]);
1: 
1:   }
1: 
1: }
============================================================================