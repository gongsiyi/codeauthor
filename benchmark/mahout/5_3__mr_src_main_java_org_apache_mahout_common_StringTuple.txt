1:d501820: /**
1:d501820:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d501820:  * contributor license agreements.  See the NOTICE file distributed with
1:d501820:  * this work for additional information regarding copyright ownership.
1:d501820:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d501820:  * (the "License"); you may not use this file except in compliance with
1:d501820:  * the License.  You may obtain a copy of the License at
3:d501820:  *
1:d501820:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d501820:  *
1:d501820:  * Unless required by applicable law or agreed to in writing, software
1:d501820:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d501820:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d501820:  * See the License for the specific language governing permissions and
1:d501820:  * limitations under the License.
1:d501820:  */
18:d501820: 
1:d501820: package org.apache.mahout.common;
1:d501820: 
1:d501820: import java.io.DataInput;
1:d501820: import java.io.DataOutput;
1:d501820: import java.io.IOException;
1:d501820: import java.util.Collections;
1:d501820: import java.util.List;
1:d501820: 
1:74f849b: import com.google.common.collect.Lists;
1:251f0e9: import org.apache.hadoop.io.Text;
1:d501820: import org.apache.hadoop.io.WritableComparable;
1:d501820: 
1:d501820: /**
1:d501820:  * An Ordered List of Strings which can be used in a Hadoop Map/Reduce Job
1:d501820:  */
1:d0ef512: public final class StringTuple implements WritableComparable<StringTuple> {
1:b82d989:   
1:74f849b:   private List<String> tuple = Lists.newArrayList();
1:b82d989:   
1:b82d989:   public StringTuple() { }
1:b82d989:   
1:d501820:   public StringTuple(String firstEntry) {
1:d501820:     add(firstEntry);
2:d501820:   }
1:d0ef512:   
1:d0ef512:   public StringTuple(Iterable<String> entries) {
1:d0ef512:     for (String entry : entries) {
1:d501820:       add(entry);
1:d0ef512:     }
1:d501820:   }
1:b82d989:   
1:d501820:   public StringTuple(String[] entries) {
1:d0ef512:     for (String entry : entries) {
1:d501820:       add(entry);
1:d0ef512:     }
1:d501820:   }
1:b82d989:   
1:d501820:   /**
1:d501820:    * add an entry to the end of the list
1:d501820:    * 
1:d501820:    * @param entry
1:d501820:    * @return true if the items get added
1:d501820:    */
1:d501820:   public boolean add(String entry) {
1:d501820:     return tuple.add(entry);
1:d501820:   }
1:b82d989:   
1:d501820:   /**
1:d501820:    * Fetches the string at the given location
1:d501820:    * 
1:d501820:    * @param index
1:d501820:    * @return String value at the given location in the tuple list
1:d501820:    */
1:d501820:   public String stringAt(int index) {
1:d501820:     return tuple.get(index);
1:d501820:   }
1:b82d989:   
1:d501820:   /**
1:d501820:    * Replaces the string at the given index with the given newString
1:d501820:    * 
1:d501820:    * @param index
1:d501820:    * @param newString
1:d501820:    * @return The previous value at that location
1:d501820:    */
1:d501820:   public String replaceAt(int index, String newString) {
1:d501820:     return tuple.set(index, newString);
1:d501820:   }
1:b82d989:   
1:d501820:   /**
1:d501820:    * Fetch the list of entries from the tuple
1:d501820:    * 
1:d501820:    * @return a List containing the strings in the order of insertion
1:d501820:    */
1:d501820:   public List<String> getEntries() {
1:d501820:     return Collections.unmodifiableList(this.tuple);
1:d501820:   }
1:b82d989:   
1:d501820:   /**
1:d501820:    * Returns the length of the tuple
1:d501820:    * 
1:d501820:    * @return length
1:d501820:    */
1:d501820:   public int length() {
1:d501820:     return this.tuple.size();
1:d501820:   }
1:b82d989:   
1:d501820:   @Override
1:d501820:   public String toString() {
1:d501820:     return tuple.toString();
1:d0ef512:   }
1:b82d989:   
1:d501820:   @Override
1:d501820:   public int hashCode() {
1:d501820:     return tuple.hashCode();
1:d501820:   }
1:b82d989:   
1:d501820:   @Override
1:d501820:   public boolean equals(Object obj) {
1:b82d989:     if (this == obj) {
1:d501820:       return true;
1:b82d989:     }
1:b82d989:     if (obj == null) {
1:d501820:       return false;
1:b82d989:     }
1:b82d989:     if (getClass() != obj.getClass()) {
1:d501820:       return false;
1:b82d989:     }
1:d501820:     StringTuple other = (StringTuple) obj;
1:d501820:     if (tuple == null) {
1:b82d989:       if (other.tuple != null) {
1:d501820:         return false;
1:b82d989:       }
1:b82d989:     } else if (!tuple.equals(other.tuple)) {
1:d501820:       return false;
1:b82d989:     }
1:d501820:     return true;
1:d501820:   }
1:b82d989:   
1:d501820:   @Override
1:d501820:   public void readFields(DataInput in) throws IOException {
1:d501820:     int len = in.readInt();
1:74f849b:     tuple = Lists.newArrayListWithCapacity(len);
1:251f0e9:     Text value = new Text();
1:d501820:     for (int i = 0; i < len; i++) {
1:251f0e9:       value.readFields(in);
1:251f0e9:       tuple.add(value.toString());
1:d501820:     }
1:d501820:   }
1:b82d989:   
1:d501820:   @Override
1:d501820:   public void write(DataOutput out) throws IOException {
1:d501820:     out.writeInt(tuple.size());
1:251f0e9:     Text value = new Text();
1:d501820:     for (String entry : tuple) {
1:251f0e9:       value.set(entry);
1:251f0e9:       value.write(out);
1:d501820:     }
1:d501820:   }
1:b82d989:   
1:d501820:   @Override
1:d501820:   public int compareTo(StringTuple otherTuple) {
1:d0ef512:     int thisLength = length();
1:d0ef512:     int otherLength = otherTuple.length();
1:d0ef512:     int min = Math.min(thisLength, otherLength);
1:d501820:     for (int i = 0; i < min; i++) {
1:d501820:       int ret = this.tuple.get(i).compareTo(otherTuple.stringAt(i));
1:d0ef512:       if (ret != 0) {
1:d0ef512:         return ret;
1:d0ef512:       }
1:d501820:     }
1:d0ef512:     if (thisLength < otherLength) {
1:d0ef512:       return -1;
1:d0ef512:     } else if (thisLength > otherLength) {
1:d0ef512:       return 1;
1:d0ef512:     } else {
1:d0ef512:       return 0;
1:d0ef512:     }
1:d501820:   }
1:b82d989:   
1:d501820: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:   private List<String> tuple = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:     tuple = Lists.newArrayListWithCapacity(len);
author:Robin Anil
-------------------------------------------------------------------------------
commit:b82d989
/////////////////////////////////////////////////////////////////////////
1:   
1:   
1:   public StringTuple() { }
1:   
/////////////////////////////////////////////////////////////////////////
1:   
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
1:   
1:   
1:     if (this == obj) {
1:     }
1:     if (obj == null) {
1:     }
1:     if (getClass() != obj.getClass()) {
1:     }
1:       if (other.tuple != null) {
1:       }
1:     } else if (!tuple.equals(other.tuple)) {
1:     }
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
commit:251f0e9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Text;
/////////////////////////////////////////////////////////////////////////
1:     Text value = new Text();
1:       value.readFields(in);
1:       tuple.add(value.toString());
1:     Text value = new Text();
1:       value.set(entry);
1:       value.write(out);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d0ef512
/////////////////////////////////////////////////////////////////////////
1: public final class StringTuple implements WritableComparable<StringTuple> {
/////////////////////////////////////////////////////////////////////////
1:   public StringTuple(Iterable<String> entries) {
1:     for (String entry : entries) {
1:     }
1: 
1:     for (String entry : entries) {
1:     }
/////////////////////////////////////////////////////////////////////////
1:   }
/////////////////////////////////////////////////////////////////////////
1:     int thisLength = length();
1:     int otherLength = otherTuple.length();
1:     int min = Math.min(thisLength, otherLength);
1:       if (ret != 0) {
1:         return ret;
1:       }
1:     if (thisLength < otherLength) {
1:       return -1;
1:     } else if (thisLength > otherLength) {
1:       return 1;
1:     } else {
1:       return 0;
1:     }
commit:d501820
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.List;
1: 
0: import org.apache.hadoop.hbase.util.Bytes;
0: import org.apache.hadoop.io.Writable;
1: import org.apache.hadoop.io.WritableComparable;
1: 
1: /**
1:  * An Ordered List of Strings which can be used in a Hadoop Map/Reduce Job
1:  * 
1:  * 
1:  */
0: public class StringTuple implements Writable, WritableComparable<StringTuple> {
1: 
0:   private List<String> tuple = new ArrayList<String>();
1: 
0:   public StringTuple() {
1:   }
1: 
1:   public StringTuple(String firstEntry) {
1:     add(firstEntry);
1:   }
1:   
0:   public StringTuple(Collection<String> entries) {
0:     for(String entry: entries)
1:       add(entry);
1:   }
1:   
1:   public StringTuple(String[] entries) {
0:     for(String entry: entries)
1:       add(entry);
1:   }
1: 
1:   /**
1:    * add an entry to the end of the list
1:    * 
1:    * @param entry
1:    * @return true if the items get added
1:    */
1:   public boolean add(String entry) {
1:     return tuple.add(entry);
1:   }
1: 
1:   /**
1:    * Fetches the string at the given location
1:    * 
1:    * @param index
1:    * @return String value at the given location in the tuple list
1:    */
1:   public String stringAt(int index) {
1:     return tuple.get(index);
1:   }
1: 
1:   /**
1:    * Replaces the string at the given index with the given newString
1:    * 
1:    * @param index
1:    * @param newString
1:    * @return The previous value at that location
1:    */
1:   public String replaceAt(int index, String newString) {
1:     return tuple.set(index, newString);
1:   }
1: 
1:   /**
1:    * Fetch the list of entries from the tuple
1:    * 
1:    * @return a List containing the strings in the order of insertion
1:    */
1:   public List<String> getEntries() {
1:     return Collections.unmodifiableList(this.tuple);
1:   }
1: 
1:   /**
1:    * Returns the length of the tuple
1:    * 
1:    * @return length
1:    */
1:   public int length() {
1:     return this.tuple.size();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     return tuple.toString();
0:   };
1: 
1:   @Override
1:   public int hashCode() {
1:     return tuple.hashCode();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object obj) {
0:     if (this == obj)
1:       return true;
0:     if (obj == null)
1:       return false;
0:     if (getClass() != obj.getClass())
1:       return false;
1:     StringTuple other = (StringTuple) obj;
1:     if (tuple == null) {
0:       if (other.tuple != null)
1:         return false;
0:     } else if (!tuple.equals(other.tuple))
1:       return false;
1:     return true;
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     int len = in.readInt();
0:     tuple = new ArrayList<String>(len);
1:     for (int i = 0; i < len; i++) {
0:       int fieldLen = in.readInt();
0:       byte[] entry = new byte[fieldLen];
0:       in.readFully(entry);
0:       tuple.add(Bytes.toString(entry));
1:     }
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeInt(tuple.size());
1:     for (String entry : tuple) {
0:       byte[] data = Bytes.toBytes(entry);
0:       out.writeInt(data.length);
0:       out.write(data);
1:     }
1:   }
1: 
1:   @Override
1:   public int compareTo(StringTuple otherTuple) {
0:     int min = Math.min(this.length(), otherTuple.length());
1:     for (int i = 0; i < min; i++) {
1:       int ret = this.tuple.get(i).compareTo(otherTuple.stringAt(i));
0:       if (ret == 0)
0:         continue;
0:       return ret;
1:     }
0:     return this.length() - otherTuple.length();
1:   }
1: 
1: }
============================================================================