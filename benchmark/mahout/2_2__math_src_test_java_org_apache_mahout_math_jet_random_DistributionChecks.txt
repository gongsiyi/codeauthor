1:0bff670: /*
1:0bff670:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0bff670:  * contributor license agreements.  See the NOTICE file distributed with
1:0bff670:  * this work for additional information regarding copyright ownership.
1:0bff670:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0bff670:  * (the "License"); you may not use this file except in compliance with
1:0bff670:  * the License.  You may obtain a copy of the License at
1:0bff670:  *
1:0bff670:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0bff670:  *
1:0bff670:  * Unless required by applicable law or agreed to in writing, software
1:0bff670:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0bff670:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0bff670:  * See the License for the specific language governing permissions and
1:0bff670:  * limitations under the License.
1:0bff670:  */
2:0bff670: 
1:0bff670: package org.apache.mahout.math.jet.random;
1:0bff670: 
1:127d450: import org.apache.commons.math3.analysis.UnivariateFunction;
1:127d450: import org.apache.commons.math3.analysis.integration.RombergIntegrator;
1:127d450: import org.apache.commons.math3.analysis.integration.UnivariateIntegrator;
1:0bff670: import org.junit.Assert;
1:0bff670: 
1:0bff670: import java.util.Arrays;
1:0bff670: 
1:0bff670: /**
1:0bff670:  * Provides a consistency check for continuous distributions that relates the pdf, cdf and
1:0bff670:  * samples.  The pdf is checked against the cdf by quadrature.  The sampling is checked
1:0bff670:  * against the cdf using a G^2 (similar to chi^2) test.
1:0bff670:  */
1:ff79ff4: public final class DistributionChecks {
1:ff79ff4: 
1:ff79ff4:   private DistributionChecks() {
1:ff79ff4:   }
1:ff79ff4: 
1:ff79ff4:   public static void checkDistribution(final AbstractContinousDistribution dist,
1:ff79ff4:                                        double[] x,
1:ff79ff4:                                        double offset,
1:ff79ff4:                                        double scale,
1:127d450:                                        int n) {
1:0bff670:     double[] xs = Arrays.copyOf(x, x.length);
1:0bff670:     for (int i = 0; i < xs.length; i++) {
1:0bff670:       xs[i] = xs[i]*scale+ offset;
1:0bff670:     }
1:0bff670:     Arrays.sort(xs);
1:0bff670: 
1:0bff670:     // collect samples
1:0bff670:     double[] y = new double[n];
1:0bff670:     for (int i = 0; i < n; i++) {
1:0bff670:       y[i] = dist.nextDouble();
1:0bff670:     }
1:0bff670:     Arrays.sort(y);
1:0bff670: 
1:0bff670:     // compute probabilities for bins
1:0bff670:     double[] p = new double[xs.length + 1];
1:0bff670:     double lastP = 0;
1:0bff670:     for (int i = 0; i < xs.length; i++) {
1:0bff670:       double thisP = dist.cdf(xs[i]);
1:0bff670:       p[i] = thisP - lastP;
1:0bff670:       lastP = thisP;
1:0bff670:     }
1:0bff670:     p[p.length - 1] = 1 - lastP;
1:0bff670: 
1:0bff670:     // count samples in each bin
1:0bff670:     int[] k = new int[xs.length + 1];
1:0bff670:     int lastJ = 0;
1:0bff670:     for (int i = 0; i < k.length - 1; i++) {
1:0bff670:       int j = 0;
1:0bff670:       while (j < n && y[j] < xs[i]) {
1:0bff670:         j++;
1:0bff670:       }
1:0bff670:       k[i] = j - lastJ;
1:0bff670:       lastJ = j;
1:0bff670:     }
1:0bff670:     k[k.length - 1] = n - lastJ;
1:0bff670: 
1:0bff670:     // now verify probabilities by comparing to integral of pdf
1:127d450:     UnivariateIntegrator integrator = new RombergIntegrator();
1:0bff670:     for (int i = 0; i < xs.length - 1; i++) {
1:127d450:       double delta = integrator.integrate(1000000, new UnivariateFunction() {
1:b16c260:         @Override
1:6430188:         public double value(double v) {
1:0bff670:           return dist.pdf(v);
1:0bff670:         }
1:0bff670:       }, xs[i], xs[i + 1]);
1:ff79ff4:       Assert.assertEquals(delta, p[i + 1], 1.0e-6);
1:0bff670:     }
1:0bff670: 
1:0bff670:     // finally compute G^2 of observed versus predicted.  See http://en.wikipedia.org/wiki/G-test
1:0bff670:     double sum = 0;
1:0bff670:     for (int i = 0; i < k.length; i++) {
1:0bff670:       if (k[i] != 0) {
1:0bff670:         sum += k[i] * Math.log(k[i] / p[i] / n);
1:0bff670:       }
1:0bff670:     }
1:0bff670:     sum *= 2;
1:0bff670: 
1:0bff670:     // sum is chi^2 distributed with degrees of freedom equal to number of partitions - 1
1:0bff670:     int dof = k.length - 1;
1:0bff670:     // fisher's approximation is that sqrt(2*x) is approximately unit normal with mean sqrt(2*dof-1)
1:0bff670:     double z = Math.sqrt(2 * sum) - Math.sqrt(2 * dof - 1);
1:0bff670:     Assert.assertTrue(String.format("offset=%.3f scale=%.3f Z = %.1f", offset, scale, z), Math.abs(z) < 3);
1:0bff670:   }
1:0bff670: 
1:ff79ff4:   static void checkCdf(double offset,
1:ff79ff4:                        double scale,
1:ff79ff4:                        AbstractContinousDistribution dist,
1:ff79ff4:                        double[] breaks,
1:ff79ff4:                        double[] quantiles) {
1:0bff670:     int i = 0;
1:0bff670:     for (double x : breaks) {
1:ff79ff4:       Assert.assertEquals(String.format("m=%.3f sd=%.3f x=%.3f", offset, scale, x),
1:ff79ff4:           quantiles[i], dist.cdf(x * scale + offset), 1.0e-6);
1:0bff670:       i++;
1:0bff670:     }
1:0bff670:   }
1:0bff670: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:127d450
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.math3.analysis.UnivariateFunction;
1: import org.apache.commons.math3.analysis.integration.RombergIntegrator;
1: import org.apache.commons.math3.analysis.integration.UnivariateIntegrator;
/////////////////////////////////////////////////////////////////////////
1:                                        int n) {
/////////////////////////////////////////////////////////////////////////
1:     UnivariateIntegrator integrator = new RombergIntegrator();
1:       double delta = integrator.integrate(1000000, new UnivariateFunction() {
commit:b16c260
/////////////////////////////////////////////////////////////////////////
1:         @Override
commit:6430188
/////////////////////////////////////////////////////////////////////////
1:         public double value(double v) {
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: public final class DistributionChecks {
1: 
1:   private DistributionChecks() {
1:   }
1: 
1:   public static void checkDistribution(final AbstractContinousDistribution dist,
1:                                        double[] x,
1:                                        double offset,
1:                                        double scale,
0:                                        int n) throws ConvergenceException, FunctionEvaluationException {
/////////////////////////////////////////////////////////////////////////
1:       Assert.assertEquals(delta, p[i + 1], 1.0e-6);
/////////////////////////////////////////////////////////////////////////
1:   static void checkCdf(double offset,
1:                        double scale,
1:                        AbstractContinousDistribution dist,
1:                        double[] breaks,
1:                        double[] quantiles) {
1:       Assert.assertEquals(String.format("m=%.3f sd=%.3f x=%.3f", offset, scale, x),
1:           quantiles[i], dist.cdf(x * scale + offset), 1.0e-6);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:018a14c
/////////////////////////////////////////////////////////////////////////
0: public class DistributionChecks {
commit:0bff670
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.jet.random;
1: 
0: import org.apache.commons.math.ConvergenceException;
0: import org.apache.commons.math.FunctionEvaluationException;
0: import org.apache.commons.math.analysis.UnivariateRealFunction;
0: import org.apache.commons.math.analysis.integration.RombergIntegrator;
0: import org.apache.commons.math.analysis.integration.UnivariateRealIntegrator;
1: import org.junit.Assert;
1: 
1: import java.util.Arrays;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
1: /**
1:  * Provides a consistency check for continuous distributions that relates the pdf, cdf and
1:  * samples.  The pdf is checked against the cdf by quadrature.  The sampling is checked
1:  * against the cdf using a G^2 (similar to chi^2) test.
1:  */
0: public class DistributionTest {
0:   public void checkDistribution(final AbstractContinousDistribution dist, double[] x, double offset, double scale, int n) throws ConvergenceException, FunctionEvaluationException {
1:     double[] xs = Arrays.copyOf(x, x.length);
1:     for (int i = 0; i < xs.length; i++) {
1:       xs[i] = xs[i]*scale+ offset;
1:     }
1:     Arrays.sort(xs);
1: 
1:     // collect samples
1:     double[] y = new double[n];
1:     for (int i = 0; i < n; i++) {
1:       y[i] = dist.nextDouble();
1:     }
1:     Arrays.sort(y);
1: 
1:     // compute probabilities for bins
1:     double[] p = new double[xs.length + 1];
1:     double lastP = 0;
1:     for (int i = 0; i < xs.length; i++) {
1:       double thisP = dist.cdf(xs[i]);
1:       p[i] = thisP - lastP;
1:       lastP = thisP;
1:     }
1:     p[p.length - 1] = 1 - lastP;
1: 
1:     // count samples in each bin
1:     int[] k = new int[xs.length + 1];
1:     int lastJ = 0;
1:     for (int i = 0; i < k.length - 1; i++) {
1:       int j = 0;
1:       while (j < n && y[j] < xs[i]) {
1:         j++;
1:       }
1:       k[i] = j - lastJ;
1:       lastJ = j;
1:     }
1:     k[k.length - 1] = n - lastJ;
1: 
1:     // now verify probabilities by comparing to integral of pdf
0:     UnivariateRealIntegrator integrator = new RombergIntegrator();
1:     for (int i = 0; i < xs.length - 1; i++) {
0:       double delta = integrator.integrate(new UnivariateRealFunction() {
0:         public double value(double v) throws FunctionEvaluationException {
1:           return dist.pdf(v);
1:         }
1:       }, xs[i], xs[i + 1]);
0:       assertEquals(delta, p[i + 1], 1e-6);
1:     }
1: 
1:     // finally compute G^2 of observed versus predicted.  See http://en.wikipedia.org/wiki/G-test
1:     double sum = 0;
1:     for (int i = 0; i < k.length; i++) {
1:       if (k[i] != 0) {
1:         sum += k[i] * Math.log(k[i] / p[i] / n);
1:       }
1:     }
1:     sum *= 2;
1: 
1:     // sum is chi^2 distributed with degrees of freedom equal to number of partitions - 1
1:     int dof = k.length - 1;
1:     // fisher's approximation is that sqrt(2*x) is approximately unit normal with mean sqrt(2*dof-1)
1:     double z = Math.sqrt(2 * sum) - Math.sqrt(2 * dof - 1);
1:     Assert.assertTrue(String.format("offset=%.3f scale=%.3f Z = %.1f", offset, scale, z), Math.abs(z) < 3);
1:   }
1: 
0:   protected void checkCdf(double offset, double scale, AbstractContinousDistribution dist, double[] breaks, double[] quantiles) {
1:     int i = 0;
1:     for (double x : breaks) {
0:       assertEquals(String.format("m=%.3f sd=%.3f x=%.3f", offset, scale, x), quantiles[i], dist.cdf(x * scale + offset), 1e-6);
1:       i++;
1:     }
1:   }
1: }
============================================================================