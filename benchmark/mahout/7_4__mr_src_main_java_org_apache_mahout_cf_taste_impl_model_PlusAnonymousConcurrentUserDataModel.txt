1:dd2b198: /*
1:dd2b198:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dd2b198:  * contributor license agreements.  See the NOTICE file distributed with
1:dd2b198:  * this work for additional information regarding copyright ownership.
1:dd2b198:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dd2b198:  * (the "License"); you may not use this file except in compliance with
1:dd2b198:  * the License.  You may obtain a copy of the License at
1:dd2b198:  *
1:dd2b198:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dd2b198:  *
1:dd2b198:  * Unless required by applicable law or agreed to in writing, software
1:dd2b198:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dd2b198:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dd2b198:  * See the License for the specific language governing permissions and
1:dd2b198:  * limitations under the License.
1:dd2b198:  */
1:dd2b198: 
1:dd2b198: package org.apache.mahout.cf.taste.impl.model;
1:dd2b198: 
1:dd2b198: import com.google.common.base.Preconditions;
1:dd2b198: import java.util.List;
1:dd2b198: import java.util.Map;
1:dd2b198: import java.util.Queue;
1:dd2b198: import java.util.concurrent.ConcurrentHashMap;
1:dd2b198: import java.util.concurrent.ConcurrentLinkedQueue;
1:210b265: 
1:210b265: import com.google.common.collect.Lists;
1:dd2b198: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1:dd2b198: import org.apache.mahout.cf.taste.common.TasteException;
1:dd2b198: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:dd2b198: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:dd2b198: import org.apache.mahout.cf.taste.model.DataModel;
1:dd2b198: import org.apache.mahout.cf.taste.model.Preference;
1:dd2b198: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:4841efb: import org.slf4j.Logger;
1:4841efb: import org.slf4j.LoggerFactory;
1:dd2b198: 
1:dd2b198: /**
1:dd2b198:  * <p>
1:dd2b198:  * This is a special thread-safe version of {@link PlusAnonymousUserDataModel}
1:dd2b198:  * which allow multiple concurrent anonymous requests.
1:dd2b198:  * </p>
1:dd2b198:  *
1:dd2b198:  * <p>
1:dd2b198:  * To use it, you have to estimate the number of concurrent anonymous users of your application.
1:dd2b198:  * The pool of users with the given size will be created. For each anonymous recommendations request,
1:ca3300f:  * a user has to be taken from the pool and returned back immediately afterwards.
1:dd2b198:  * </p>
1:dd2b198:  *
1:dd2b198:  * <p>
1:dd2b198:  * If no more users are available in the pool, anonymous recommendations cannot be produced.
1:dd2b198:  * </p>
1:dd2b198:  *
1:dd2b198:  * </p>
1:dd2b198:  *
1:dd2b198:  * Setup:
1:dd2b198:  * <pre>
1:dd2b198:  * int concurrentUsers = 100;
1:dd2b198:  * DataModel realModel = ..
1:dd2b198:  * PlusAnonymousConcurrentUserDataModel plusModel =
1:dd2b198:  *   new PlusAnonymousConcurrentUserDataModel(realModel, concurrentUsers);
1:dd2b198:  * Recommender recommender = ...;
1:dd2b198:  * </pre>
1:dd2b198:  *
1:dd2b198:  * Real-time recommendation:
1:dd2b198:  * <pre>
1:dd2b198:  * PlusAnonymousConcurrentUserDataModel plusModel =
1:dd2b198:  *   (PlusAnonymousConcurrentUserDataModel) recommender.getDataModel();
1:dd2b198:  *
1:dd2b198:  * // Take the next available anonymous user from the pool
1:dd2b198:  * Long anonymousUserID = plusModel.takeAvailableUser();
1:dd2b198:  *
1:dd2b198:  * PreferenceArray tempPrefs = ..
1:dd2b198:  * tempPrefs.setUserID(0, anonymousUserID);
1:dd2b198:  * tempPrefs.setItemID(0, itemID);
1:c4b3169:  * plusModel.setTempPrefs(tempPrefs, anonymousUserID);
1:dd2b198:  *
1:dd2b198:  * // Produce recommendations
1:dd2b198:  * recommender.recommend(anonymousUserID, howMany);
1:dd2b198:  *
1:dd2b198:  * // It is very IMPORTANT to release user back to the pool
1:dd2b198:  * plusModel.releaseUser(anonymousUserID);
1:dd2b198:  * </pre>
1:dd2b198:  *
1:dd2b198:  * </p>
1:dd2b198:  */
1:dd2b198: public final class PlusAnonymousConcurrentUserDataModel extends PlusAnonymousUserDataModel {
1:dd2b198: 
1:dd2b198:   /** Preferences for all anonymous users */
1:dd2b198:   private final Map<Long,PreferenceArray> tempPrefs;
1:dd2b198:   /** Item IDs set for all anonymous users */
1:dd2b198:   private final Map<Long,FastIDSet> prefItemIDs;
1:dd2b198:   /** Pool of the users (FIFO) */
1:dd2b198:   private Queue<Long> usersPool;
1:dd2b198: 
1:4841efb:   private static final Logger log = LoggerFactory.getLogger(PlusAnonymousUserDataModel.class);
1:4841efb: 
1:dd2b198:   /**
1:dd2b198:    * @param delegate Real model where anonymous users will be added to
1:dd2b198:    * @param maxConcurrentUsers Maximum allowed number of concurrent anonymous users
1:dd2b198:    */
1:dd2b198:   public PlusAnonymousConcurrentUserDataModel(DataModel delegate, int maxConcurrentUsers) {
1:dd2b198:     super(delegate);
1:dd2b198: 
1:87c15be:     tempPrefs = new ConcurrentHashMap<>();
1:87c15be:     prefItemIDs = new ConcurrentHashMap<>();
1:dd2b198: 
1:dd2b198:     initializeUsersPools(maxConcurrentUsers);
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   /**
1:dd2b198:    * Initialize the pool of concurrent anonymous users.
1:dd2b198:    *
1:dd2b198:    * @param usersPoolSize Maximum allowed number of concurrent anonymous user. Depends on the consumer system.
1:dd2b198:    */
1:dd2b198:   private void initializeUsersPools(int usersPoolSize) {
1:87c15be:     usersPool = new ConcurrentLinkedQueue<>();
1:dd2b198:     for (int i = 0; i < usersPoolSize; i++) {
1:dd2b198:       usersPool.add(TEMP_USER_ID + i);
1:dd2b198:     }
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   /**
1:dd2b198:    * Take the next available concurrent anonymous users from the pool.
1:dd2b198:    *
1:dd2b198:    * @return User ID or null if no more users are available
1:dd2b198:    */
1:dd2b198:   public Long takeAvailableUser() {
1:dd2b198:     Long takenUserID = usersPool.poll();
1:dd2b198:     if (takenUserID != null) {
1:dd2b198:       // Initialize the preferences array to indicate that the user is taken.
1:dd2b198:       tempPrefs.put(takenUserID, new GenericUserPreferenceArray(0));
1:dd2b198:       return takenUserID;
1:dd2b198:     }
1:dd2b198:     return null;
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   /**
1:dd2b198:    * Release previously taken anonymous user and return it to the pool.
1:dd2b198:    *
1:dd2b198:    * @param userID ID of a previously taken anonymous user
1:dd2b198:    * @return true if the user was previously taken, false otherwise
1:dd2b198:    */
1:dd2b198:   public boolean releaseUser(Long userID) {
1:dd2b198:     if (tempPrefs.containsKey(userID)) {
1:dd2b198:       this.clearTempPrefs(userID);
1:dd2b198:       // Return previously taken user to the pool
1:dd2b198:       usersPool.offer(userID);
1:dd2b198:       return true;
1:dd2b198:     }
1:dd2b198:     return false;
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   /**
1:dd2b198:    * Checks whether a given user is a valid previously acquired anonymous user.
1:dd2b198:    */
1:dd2b198:   private boolean isAnonymousUser(long userID) {
1:dd2b198:     return tempPrefs.containsKey(userID);
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   /**
1:dd2b198:    * Sets temporary preferences for a given anonymous user.
1:dd2b198:    */
1:dd2b198:   public void setTempPrefs(PreferenceArray prefs, long anonymousUserID) {
1:dd2b198:     Preconditions.checkArgument(prefs != null && prefs.length() > 0, "prefs is null or empty");
1:dd2b198: 
1:dd2b198:     this.tempPrefs.put(anonymousUserID, prefs);
1:dd2b198:     FastIDSet userPrefItemIDs = new FastIDSet();
1:dd2b198: 
1:dd2b198:     for (int i = 0; i < prefs.length(); i++) {
1:dd2b198:       userPrefItemIDs.add(prefs.getItemID(i));
1:dd2b198:     }
1:dd2b198: 
1:dd2b198:     this.prefItemIDs.put(anonymousUserID, userPrefItemIDs);
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   /**
1:dd2b198:    * Clears temporary preferences for a given anonymous user.
1:dd2b198:    */
1:dd2b198:   public void clearTempPrefs(long anonymousUserID) {
1:dd2b198:     this.tempPrefs.remove(anonymousUserID);
1:dd2b198:     this.prefItemIDs.remove(anonymousUserID);
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   @Override
1:dd2b198:   public LongPrimitiveIterator getUserIDs() throws TasteException {
1:dd2b198:     // Anonymous users have short lifetime and should not be included into the neighbohoods of the real users.
1:dd2b198:     // Thus exclude them from the universe.
1:dd2b198:     return getDelegate().getUserIDs();
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   @Override
1:dd2b198:   public PreferenceArray getPreferencesFromUser(long userID) throws TasteException {
1:dd2b198:     if (isAnonymousUser(userID)) {
1:dd2b198:       return tempPrefs.get(userID);
1:dd2b198:     }
1:dd2b198:     return getDelegate().getPreferencesFromUser(userID);
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   @Override
1:dd2b198:   public FastIDSet getItemIDsFromUser(long userID) throws TasteException {
1:dd2b198:     if (isAnonymousUser(userID)) {
1:dd2b198:       return prefItemIDs.get(userID);
1:dd2b198:     }
1:dd2b198:     return getDelegate().getItemIDsFromUser(userID);
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   @Override
1:dd2b198:   public PreferenceArray getPreferencesForItem(long itemID) throws TasteException {
1:dd2b198:     if (tempPrefs.isEmpty()) {
1:dd2b198:       return getDelegate().getPreferencesForItem(itemID);
1:dd2b198:     }
1:dd2b198: 
1:dd2b198:     PreferenceArray delegatePrefs = null;
1:dd2b198: 
1:dd2b198:     try {
1:dd2b198:       delegatePrefs = getDelegate().getPreferencesForItem(itemID);
1:dd2b198:     } catch (NoSuchItemException nsie) {
1:dd2b198:       // OK. Probably an item that only the anonymous user has
1:4841efb:       if (log.isDebugEnabled()) {
1:4841efb:         log.debug("Item {} unknown", itemID);
1:4841efb:       }
1:dd2b198:     }
1:dd2b198: 
1:210b265:     List<Preference> anonymousPreferences = Lists.newArrayList();
1:dd2b198: 
1:dd2b198:     for (Map.Entry<Long, PreferenceArray> prefsMap : tempPrefs.entrySet()) {
1:dd2b198:       PreferenceArray singleUserTempPrefs = prefsMap.getValue();
1:dd2b198:       for (int i = 0; i < singleUserTempPrefs.length(); i++) {
1:dd2b198:         if (singleUserTempPrefs.getItemID(i) == itemID) {
1:dd2b198:           anonymousPreferences.add(singleUserTempPrefs.get(i));
1:dd2b198:         }
1:dd2b198:       }
1:dd2b198:     }
1:dd2b198: 
1:dd2b198:     int delegateLength = delegatePrefs == null ? 0 : delegatePrefs.length();
1:dd2b198:     int anonymousPrefsLength = anonymousPreferences.size();
1:dd2b198:     int prefsCounter = 0;
1:dd2b198: 
1:dd2b198:     // Merge the delegate and anonymous preferences into a single array
1:dd2b198:     PreferenceArray newPreferenceArray = new GenericItemPreferenceArray(delegateLength + anonymousPrefsLength);
1:dd2b198: 
1:dd2b198:     for (int i = 0; i < delegateLength; i++) {
1:dd2b198:       newPreferenceArray.set(prefsCounter++, delegatePrefs.get(i));
1:dd2b198:     }
1:dd2b198: 
1:dd2b198:     for (Preference anonymousPreference : anonymousPreferences) {
1:dd2b198:       newPreferenceArray.set(prefsCounter++, anonymousPreference);
1:dd2b198:     }
1:dd2b198: 
1:dd2b198:     if (newPreferenceArray.length() == 0) {
1:dd2b198:       // No, didn't find it among the anonymous user prefs
1:dd2b198:       throw new NoSuchItemException(itemID);
1:dd2b198:     }
1:dd2b198: 
1:dd2b198:     return newPreferenceArray;
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   @Override
1:dd2b198:   public Float getPreferenceValue(long userID, long itemID) throws TasteException {
1:dd2b198:     if (isAnonymousUser(userID)) {
1:dd2b198:       PreferenceArray singleUserTempPrefs = tempPrefs.get(userID);
1:dd2b198:       for (int i = 0; i < singleUserTempPrefs.length(); i++) {
1:dd2b198:         if (singleUserTempPrefs.getItemID(i) == itemID) {
1:dd2b198:           return singleUserTempPrefs.getValue(i);
1:dd2b198:         }
1:dd2b198:       }
1:dd2b198:       return null;
1:dd2b198:     }
1:dd2b198:     return getDelegate().getPreferenceValue(userID, itemID);
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   @Override
1:dd2b198:   public Long getPreferenceTime(long userID, long itemID) throws TasteException {
1:dd2b198:     if (isAnonymousUser(userID)) {
1:dd2b198:       // Timestamps are not saved for anonymous preferences
1:dd2b198:       return null;
1:dd2b198:     }
1:dd2b198:     return getDelegate().getPreferenceTime(userID, itemID);
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   @Override
1:dd2b198:   public int getNumUsers() throws TasteException {
1:dd2b198:     // Anonymous users have short lifetime and should not be included into the neighbohoods of the real users.
1:dd2b198:     // Thus exclude them from the universe.
1:dd2b198:     return getDelegate().getNumUsers();
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   @Override
1:dd2b198:   public int getNumUsersWithPreferenceFor(long itemID) throws TasteException {
1:dd2b198:     if (tempPrefs.isEmpty()) {
1:dd2b198:       return getDelegate().getNumUsersWithPreferenceFor(itemID);
1:dd2b198:     }
1:dd2b198: 
1:dd2b198:     int countAnonymousUsersWithPreferenceFor = 0;
1:dd2b198: 
1:dd2b198:     for (Map.Entry<Long, PreferenceArray> singleUserTempPrefs : tempPrefs.entrySet()) {
1:dd2b198:       for (int i = 0; i < singleUserTempPrefs.getValue().length(); i++) {
1:dd2b198:         if (singleUserTempPrefs.getValue().getItemID(i) == itemID) {
1:dd2b198:           countAnonymousUsersWithPreferenceFor++;
1:dd2b198:           break;
1:dd2b198:         }
1:dd2b198:       }
1:dd2b198:     }
1:dd2b198:     return getDelegate().getNumUsersWithPreferenceFor(itemID) + countAnonymousUsersWithPreferenceFor;
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   @Override
1:dd2b198:   public int getNumUsersWithPreferenceFor(long itemID1, long itemID2) throws TasteException {
1:dd2b198:     if (tempPrefs.isEmpty()) {
1:dd2b198:       return getDelegate().getNumUsersWithPreferenceFor(itemID1, itemID2);
1:dd2b198:     }
1:dd2b198: 
1:dd2b198:     int countAnonymousUsersWithPreferenceFor = 0;
1:dd2b198: 
1:dd2b198:     for (Map.Entry<Long, PreferenceArray> singleUserTempPrefs : tempPrefs.entrySet()) {
1:dd2b198:       boolean found1 = false;
1:dd2b198:       boolean found2 = false;
1:dd2b198:       for (int i = 0; i < singleUserTempPrefs.getValue().length() && !(found1 && found2); i++) {
1:dd2b198:         long itemID = singleUserTempPrefs.getValue().getItemID(i);
1:dd2b198:         if (itemID == itemID1) {
1:dd2b198:           found1 = true;
1:dd2b198:         }
1:dd2b198:         if (itemID == itemID2) {
1:dd2b198:           found2 = true;
1:dd2b198:         }
1:dd2b198:       }
1:dd2b198: 
1:dd2b198:       if (found1 && found2) {
1:dd2b198:         countAnonymousUsersWithPreferenceFor++;
1:dd2b198:       }
1:dd2b198:     }
1:dd2b198: 
1:dd2b198:     return getDelegate().getNumUsersWithPreferenceFor(itemID1, itemID2) + countAnonymousUsersWithPreferenceFor;
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   @Override
1:dd2b198:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:dd2b198:     if (isAnonymousUser(userID)) {
1:dd2b198:       throw new UnsupportedOperationException();
1:dd2b198:     }
1:dd2b198:     getDelegate().setPreference(userID, itemID, value);
1:dd2b198:   }
1:dd2b198: 
1:dd2b198:   @Override
1:dd2b198:   public void removePreference(long userID, long itemID) throws TasteException {
1:dd2b198:     if (isAnonymousUser(userID)) {
1:dd2b198:       throw new UnsupportedOperationException();
1:dd2b198:     }
1:dd2b198:     getDelegate().removePreference(userID, itemID);
1:dd2b198:   }
1:dd2b198: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     tempPrefs = new ConcurrentHashMap<>();
1:     prefItemIDs = new ConcurrentHashMap<>();
/////////////////////////////////////////////////////////////////////////
1:     usersPool = new ConcurrentLinkedQueue<>();
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:sslavic
-------------------------------------------------------------------------------
commit:ca3300f
/////////////////////////////////////////////////////////////////////////
1:  * a user has to be taken from the pool and returned back immediately afterwards.
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:   private static final Logger log = LoggerFactory.getLogger(PlusAnonymousUserDataModel.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:       if (log.isDebugEnabled()) {
1:         log.debug("Item {} unknown", itemID);
1:       }
commit:210b265
/////////////////////////////////////////////////////////////////////////
1: 
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:     List<Preference> anonymousPreferences = Lists.newArrayList();
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:c4b3169
/////////////////////////////////////////////////////////////////////////
1:  * plusModel.setTempPrefs(tempPrefs, anonymousUserID);
commit:dd2b198
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.model;
1: 
1: import com.google.common.base.Preconditions;
0: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Queue;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.Preference;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: 
1: /**
1:  * <p>
1:  * This is a special thread-safe version of {@link PlusAnonymousUserDataModel}
1:  * which allow multiple concurrent anonymous requests.
1:  * </p>
1:  *
1:  * <p>
1:  * To use it, you have to estimate the number of concurrent anonymous users of your application.
1:  * The pool of users with the given size will be created. For each anonymous recommendations request,
0:  * a user has to be taken from the pool and returned back immediately afterwars.
1:  * </p>
1:  *
1:  * <p>
1:  * If no more users are available in the pool, anonymous recommendations cannot be produced.
1:  * </p>
1:  *
1:  * </p>
1:  *
1:  * Setup:
1:  * <pre>
1:  * int concurrentUsers = 100;
1:  * DataModel realModel = ..
1:  * PlusAnonymousConcurrentUserDataModel plusModel =
1:  *   new PlusAnonymousConcurrentUserDataModel(realModel, concurrentUsers);
1:  * Recommender recommender = ...;
1:  * </pre>
1:  *
1:  * Real-time recommendation:
1:  * <pre>
1:  * PlusAnonymousConcurrentUserDataModel plusModel =
1:  *   (PlusAnonymousConcurrentUserDataModel) recommender.getDataModel();
1:  *
1:  * // Take the next available anonymous user from the pool
1:  * Long anonymousUserID = plusModel.takeAvailableUser();
1:  *
1:  * PreferenceArray tempPrefs = ..
1:  * tempPrefs.setUserID(0, anonymousUserID);
1:  * tempPrefs.setItemID(0, itemID);
0:  * plusModel.setTempPrefs(tempPrefs);
1:  *
1:  * // Produce recommendations
1:  * recommender.recommend(anonymousUserID, howMany);
1:  *
1:  * // It is very IMPORTANT to release user back to the pool
1:  * plusModel.releaseUser(anonymousUserID);
1:  * </pre>
1:  *
1:  * </p>
1:  */
1: public final class PlusAnonymousConcurrentUserDataModel extends PlusAnonymousUserDataModel {
1: 
1:   /** Preferences for all anonymous users */
1:   private final Map<Long,PreferenceArray> tempPrefs;
1:   /** Item IDs set for all anonymous users */
1:   private final Map<Long,FastIDSet> prefItemIDs;
1:   /** Pool of the users (FIFO) */
1:   private Queue<Long> usersPool;
1: 
1:   /**
1:    * @param delegate Real model where anonymous users will be added to
1:    * @param maxConcurrentUsers Maximum allowed number of concurrent anonymous users
1:    */
1:   public PlusAnonymousConcurrentUserDataModel(DataModel delegate, int maxConcurrentUsers) {
1:     super(delegate);
1: 
0:     tempPrefs = new ConcurrentHashMap<Long, PreferenceArray>();
0:     prefItemIDs = new ConcurrentHashMap<Long, FastIDSet>();
1: 
1:     initializeUsersPools(maxConcurrentUsers);
1:   }
1: 
1:   /**
1:    * Initialize the pool of concurrent anonymous users.
1:    *
1:    * @param usersPoolSize Maximum allowed number of concurrent anonymous user. Depends on the consumer system.
1:    */
1:   private void initializeUsersPools(int usersPoolSize) {
0:     usersPool = new ConcurrentLinkedQueue<Long>();
1:     for (int i = 0; i < usersPoolSize; i++) {
1:       usersPool.add(TEMP_USER_ID + i);
1:     }
1:   }
1: 
1:   /**
1:    * Take the next available concurrent anonymous users from the pool.
1:    *
1:    * @return User ID or null if no more users are available
1:    */
1:   public Long takeAvailableUser() {
1:     Long takenUserID = usersPool.poll();
1:     if (takenUserID != null) {
1:       // Initialize the preferences array to indicate that the user is taken.
1:       tempPrefs.put(takenUserID, new GenericUserPreferenceArray(0));
1:       return takenUserID;
1:     }
1:     return null;
1:   }
1: 
1:   /**
1:    * Release previously taken anonymous user and return it to the pool.
1:    *
1:    * @param userID ID of a previously taken anonymous user
1:    * @return true if the user was previously taken, false otherwise
1:    */
1:   public boolean releaseUser(Long userID) {
1:     if (tempPrefs.containsKey(userID)) {
1:       this.clearTempPrefs(userID);
1:       // Return previously taken user to the pool
1:       usersPool.offer(userID);
1:       return true;
1:     }
1:     return false;
1:   }
1: 
1:   /**
1:    * Checks whether a given user is a valid previously acquired anonymous user.
1:    */
1:   private boolean isAnonymousUser(long userID) {
1:     return tempPrefs.containsKey(userID);
1:   }
1: 
1:   /**
1:    * Sets temporary preferences for a given anonymous user.
1:    */
1:   public void setTempPrefs(PreferenceArray prefs, long anonymousUserID) {
1:     Preconditions.checkArgument(prefs != null && prefs.length() > 0, "prefs is null or empty");
1: 
1:     this.tempPrefs.put(anonymousUserID, prefs);
1:     FastIDSet userPrefItemIDs = new FastIDSet();
1: 
1:     for (int i = 0; i < prefs.length(); i++) {
1:       userPrefItemIDs.add(prefs.getItemID(i));
1:     }
1: 
1:     this.prefItemIDs.put(anonymousUserID, userPrefItemIDs);
1:   }
1: 
1:   /**
1:    * Clears temporary preferences for a given anonymous user.
1:    */
1:   public void clearTempPrefs(long anonymousUserID) {
1:     this.tempPrefs.remove(anonymousUserID);
1:     this.prefItemIDs.remove(anonymousUserID);
1:   }
1: 
1:   @Override
1:   public LongPrimitiveIterator getUserIDs() throws TasteException {
1:     // Anonymous users have short lifetime and should not be included into the neighbohoods of the real users.
1:     // Thus exclude them from the universe.
1:     return getDelegate().getUserIDs();
1:   }
1: 
1:   @Override
1:   public PreferenceArray getPreferencesFromUser(long userID) throws TasteException {
1:     if (isAnonymousUser(userID)) {
1:       return tempPrefs.get(userID);
1:     }
1:     return getDelegate().getPreferencesFromUser(userID);
1:   }
1: 
1:   @Override
1:   public FastIDSet getItemIDsFromUser(long userID) throws TasteException {
1:     if (isAnonymousUser(userID)) {
1:       return prefItemIDs.get(userID);
1:     }
1:     return getDelegate().getItemIDsFromUser(userID);
1:   }
1: 
1:   @Override
1:   public PreferenceArray getPreferencesForItem(long itemID) throws TasteException {
1:     if (tempPrefs.isEmpty()) {
1:       return getDelegate().getPreferencesForItem(itemID);
1:     }
1: 
1:     PreferenceArray delegatePrefs = null;
1: 
1:     try {
1:       delegatePrefs = getDelegate().getPreferencesForItem(itemID);
1:     } catch (NoSuchItemException nsie) {
1:       // OK. Probably an item that only the anonymous user has
1:     }
1: 
0:     List<Preference> anonymousPreferences = new ArrayList<Preference>();
1: 
1:     for (Map.Entry<Long, PreferenceArray> prefsMap : tempPrefs.entrySet()) {
1:       PreferenceArray singleUserTempPrefs = prefsMap.getValue();
1:       for (int i = 0; i < singleUserTempPrefs.length(); i++) {
1:         if (singleUserTempPrefs.getItemID(i) == itemID) {
1:           anonymousPreferences.add(singleUserTempPrefs.get(i));
1:         }
1:       }
1:     }
1: 
1:     int delegateLength = delegatePrefs == null ? 0 : delegatePrefs.length();
1:     int anonymousPrefsLength = anonymousPreferences.size();
1:     int prefsCounter = 0;
1: 
1:     // Merge the delegate and anonymous preferences into a single array
1:     PreferenceArray newPreferenceArray = new GenericItemPreferenceArray(delegateLength + anonymousPrefsLength);
1: 
1:     for (int i = 0; i < delegateLength; i++) {
1:       newPreferenceArray.set(prefsCounter++, delegatePrefs.get(i));
1:     }
1: 
1:     for (Preference anonymousPreference : anonymousPreferences) {
1:       newPreferenceArray.set(prefsCounter++, anonymousPreference);
1:     }
1: 
1:     if (newPreferenceArray.length() == 0) {
1:       // No, didn't find it among the anonymous user prefs
1:       throw new NoSuchItemException(itemID);
1:     }
1: 
1:     return newPreferenceArray;
1:   }
1: 
1:   @Override
1:   public Float getPreferenceValue(long userID, long itemID) throws TasteException {
1:     if (isAnonymousUser(userID)) {
1:       PreferenceArray singleUserTempPrefs = tempPrefs.get(userID);
1:       for (int i = 0; i < singleUserTempPrefs.length(); i++) {
1:         if (singleUserTempPrefs.getItemID(i) == itemID) {
1:           return singleUserTempPrefs.getValue(i);
1:         }
1:       }
1:       return null;
1:     }
1:     return getDelegate().getPreferenceValue(userID, itemID);
1:   }
1: 
1:   @Override
1:   public Long getPreferenceTime(long userID, long itemID) throws TasteException {
1:     if (isAnonymousUser(userID)) {
1:       // Timestamps are not saved for anonymous preferences
1:       return null;
1:     }
1:     return getDelegate().getPreferenceTime(userID, itemID);
1:   }
1: 
1:   @Override
1:   public int getNumUsers() throws TasteException {
1:     // Anonymous users have short lifetime and should not be included into the neighbohoods of the real users.
1:     // Thus exclude them from the universe.
1:     return getDelegate().getNumUsers();
1:   }
1: 
1:   @Override
1:   public int getNumUsersWithPreferenceFor(long itemID) throws TasteException {
1:     if (tempPrefs.isEmpty()) {
1:       return getDelegate().getNumUsersWithPreferenceFor(itemID);
1:     }
1: 
1:     int countAnonymousUsersWithPreferenceFor = 0;
1: 
1:     for (Map.Entry<Long, PreferenceArray> singleUserTempPrefs : tempPrefs.entrySet()) {
1:       for (int i = 0; i < singleUserTempPrefs.getValue().length(); i++) {
1:         if (singleUserTempPrefs.getValue().getItemID(i) == itemID) {
1:           countAnonymousUsersWithPreferenceFor++;
1:           break;
1:         }
1:       }
1:     }
1:     return getDelegate().getNumUsersWithPreferenceFor(itemID) + countAnonymousUsersWithPreferenceFor;
1:   }
1: 
1:   @Override
1:   public int getNumUsersWithPreferenceFor(long itemID1, long itemID2) throws TasteException {
1:     if (tempPrefs.isEmpty()) {
1:       return getDelegate().getNumUsersWithPreferenceFor(itemID1, itemID2);
1:     }
1: 
1:     int countAnonymousUsersWithPreferenceFor = 0;
1: 
1:     for (Map.Entry<Long, PreferenceArray> singleUserTempPrefs : tempPrefs.entrySet()) {
1:       boolean found1 = false;
1:       boolean found2 = false;
1:       for (int i = 0; i < singleUserTempPrefs.getValue().length() && !(found1 && found2); i++) {
1:         long itemID = singleUserTempPrefs.getValue().getItemID(i);
1:         if (itemID == itemID1) {
1:           found1 = true;
1:         }
1:         if (itemID == itemID2) {
1:           found2 = true;
1:         }
1:       }
1: 
1:       if (found1 && found2) {
1:         countAnonymousUsersWithPreferenceFor++;
1:       }
1:     }
1: 
1:     return getDelegate().getNumUsersWithPreferenceFor(itemID1, itemID2) + countAnonymousUsersWithPreferenceFor;
1:   }
1: 
1:   @Override
1:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:     if (isAnonymousUser(userID)) {
1:       throw new UnsupportedOperationException();
1:     }
1:     getDelegate().setPreference(userID, itemID, value);
1:   }
1: 
1:   @Override
1:   public void removePreference(long userID, long itemID) throws TasteException {
1:     if (isAnonymousUser(userID)) {
1:       throw new UnsupportedOperationException();
1:     }
1:     getDelegate().removePreference(userID, itemID);
1:   }
1: }
============================================================================