1:3f1450a: /**
1:3f1450a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f1450a:  * contributor license agreements.  See the NOTICE file distributed with
1:3f1450a:  * this work for additional information regarding copyright ownership.
1:3f1450a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f1450a:  * (the "License"); you may not use this file except in compliance with
1:3f1450a:  * the License.  You may obtain a copy of the License at
1:3f1450a:  *
1:3f1450a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3f1450a:  *
1:3f1450a:  * Unless required by applicable law or agreed to in writing, software
1:3f1450a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f1450a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f1450a:  * See the License for the specific language governing permissions and
1:3f1450a:  * limitations under the License.
1:3f1450a:  */
1:3f1450a: 
1:292bb9d: package org.apache.mahout.ep;
2:115fec6: 
1:96117d3: import java.io.Closeable;
1:02f8694: import java.io.DataInput;
1:02f8694: import java.io.DataOutput;
1:02f8694: import java.io.IOException;
1:85f9ece: import java.util.ArrayList;
1:115fec6: import java.util.Collection;
1:115fec6: import java.util.Collections;
1:115fec6: import java.util.List;
1:115fec6: import java.util.concurrent.Callable;
1:115fec6: import java.util.concurrent.ExecutionException;
1:115fec6: import java.util.concurrent.ExecutorService;
1:115fec6: import java.util.concurrent.Executors;
1:115fec6: import java.util.concurrent.Future;
1:c88c240: import java.util.concurrent.TimeUnit;
1:115fec6: 
1:85f9ece: import com.google.common.collect.Lists;
1:85f9ece: import org.apache.hadoop.io.Writable;
1:85f9ece: import org.apache.mahout.classifier.sgd.PolymorphicWritable;
1:85f9ece: 
1:4b25f31: /**
1:4b25f31:  * Allows evolutionary optimization where the state function can't be easily
1:4b25f31:  * packaged for the optimizer to execute.  A good example of this is with
1:4b25f31:  * on-line learning where optimizing the learning parameters is desirable.
1:4b25f31:  * We would like to pass training examples to the learning algorithms, but
1:4b25f31:  * we definitely want to do the training in multiple threads and then after
1:4b25f31:  * several training steps, we want to do a selection and mutation step.
1:4b25f31:  *
1:4b25f31:  * In such a case, it is highly desirable to leave most of the control flow
1:4b25f31:  * in the hands of our caller.  As such, this class provides three functions,
1:4b25f31:  * <ul>
1:4b25f31:  * <li> Storage of the evolutionary state.  The state variables have payloads
1:4b25f31:  * which can be anything that implements Payload.
1:4b25f31:  * <li> Threaded execution of a single operation on each of the members of the
1:4b25f31:  * population being evolved.  In the on-line learning example, this is used for
1:4b25f31:  * training all of the classifiers in the population.
1:4b25f31:  * <li> Propagating mutations of the most successful members of the population.
1:4b25f31:  * This propagation involves copying the state and the payload and then updating
1:4b25f31:  * the payload after mutation of the evolutionary state.
1:4b25f31:  * </ul>
1:4b25f31:  *
1:4b25f31:  * The State class that we use for storing the state of each member of the
1:4b25f31:  * population also provides parameter mapping.  Check out Mapping and State
1:4b25f31:  * for more info.
1:4b25f31:  *
1:4b25f31:  * @see Mapping
1:4b25f31:  * @see Payload
1:4b25f31:  * @see State
1:4b25f31:  *
1:4b25f31:  * @param <T> The payload class.
1:4b25f31:  */
1:96117d3: public class EvolutionaryProcess<T extends Payload<U>, U> implements Writable, Closeable {
1:8b194c8:   // used to execute operations on the population in thread parallel.
1:35032b8:   private ExecutorService pool;
1:913d44d: 
1:913d44d:   // threadCount is serialized so that we can reconstruct the thread pool
1:913d44d:   private int threadCount;
1:4b25f31: 
1:4b25f31:   // list of members of the population
1:02f8694:   private List<State<T, U>> population;
1:4b25f31: 
1:4b25f31:   // how big should the population be.  If this is changed, it will take effect
1:4b25f31:   // the next time the population is mutated.
1:913d44d: 
1:115fec6:   private int populationSize;
1:913d44d: 
1:913d44d:   public EvolutionaryProcess() {
1:85f9ece:     population = new ArrayList<>();
1:913d44d:   }
1:02f8694: 
1:4b25f31:   /**
1:4b25f31:    * Creates an evolutionary optimization framework with specified threadiness,
1:4b25f31:    * population size and initial state.
1:4b25f31:    * @param threadCount               How many threads to use in parallelDo
1:4b25f31:    * @param populationSize            How large a population to use
1:4b25f31:    * @param seed                      An initial population member
1:4b25f31:    */
1:02f8694:   public EvolutionaryProcess(int threadCount, int populationSize, State<T, U> seed) {
1:115fec6:     this.populationSize = populationSize;
1:913d44d:     setThreadCount(threadCount);
1:913d44d:     initializePopulation(populationSize, seed);
1:913d44d:   }
1:913d44d: 
1:02f8694:   private void initializePopulation(int populationSize, State<T, U> seed) {
1:4b25f31:     population = Lists.newArrayList(seed);
1:115fec6:     for (int i = 0; i < populationSize; i++) {
1:115fec6:       population.add(seed.mutate());
2:115fec6:     }
1:115fec6:   }
1:115fec6: 
1:02f8694:   public void add(State<T, U> value) {
1:913d44d:     population.add(value);
1:913d44d:   }
1:913d44d: 
1:4b25f31:   /**
1:4b25f31:    * Nuke all but a few of the current population and then repopulate with
1:4b25f31:    * variants of the survivors.
1:4b25f31:    * @param survivors          How many survivors we want to keep.
1:4b25f31:    */
1:115fec6:   public void mutatePopulation(int survivors) {
1:4b25f31:     // largest value first, oldest first in case of ties
1:115fec6:     Collections.sort(population);
1:4b25f31: 
1:4b25f31:     // we copy here to avoid concurrent modification
1:85f9ece:     List<State<T, U>> parents = new ArrayList<>(population.subList(0, survivors));
1:115fec6:     population.subList(survivors, population.size()).clear();
1:115fec6: 
1:4b25f31:     // fill out the population with offspring from the survivors
1:115fec6:     int i = 0;
1:115fec6:     while (population.size() < populationSize) {
1:115fec6:       population.add(parents.get(i % survivors).mutate());
1:115fec6:       i++;
1:115fec6:     }
1:115fec6:   }
1:115fec6: 
1:4b25f31:   /**
1:4b25f31:    * Execute an operation on all of the members of the population with many threads.  The
1:4b25f31:    * return value is taken as the current fitness of the corresponding member.
1:4b25f31:    * @param fn    What to do on each member.  Gets payload and the mapped parameters as args.
1:4b25f31:    * @return      The member of the population with the best fitness.
1:4b25f31:    * @throws InterruptedException      Shouldn't happen.
1:4b25f31:    * @throws ExecutionException        If fn throws an exception, that exception will be collected
1:4b25f31:    * and rethrown nested in an ExecutionException.
1:4b25f31:    */
1:02f8694:   public State<T, U> parallelDo(final Function<Payload<U>> fn) throws InterruptedException, ExecutionException {
1:85f9ece:     Collection<Callable<State<T, U>>> tasks = new ArrayList<>();
1:02f8694:     for (final State<T, U> state : population) {
1:02f8694:       tasks.add(new Callable<State<T, U>>() {
1:02f8694:         @Override
1:02f8694:         public State<T, U> call() {
1:115fec6:           double v = fn.apply(state.getPayload(), state.getMappedParams());
1:115fec6:           state.setValue(v);
1:115fec6:           return state;
1:115fec6:         }
1:115fec6:       });
1:115fec6:     }
1:4b25f31: 
1:02f8694:     List<Future<State<T, U>>> r = pool.invokeAll(tasks);
1:115fec6: 
1:4b25f31:     // zip through the results and find the best one
1:115fec6:     double max = Double.NEGATIVE_INFINITY;
1:02f8694:     State<T, U> best = null;
1:02f8694:     for (Future<State<T, U>> future : r) {
1:02f8694:       State<T, U> s = future.get();
1:115fec6:       double value = s.getValue();
1:115fec6:       if (!Double.isNaN(value) && value >= max) {
1:115fec6:         max = value;
1:115fec6:         best = s;
1:115fec6:       }
1:115fec6:     }
1:115fec6:     if (best == null) {
1:115fec6:       best = r.get(0).get();
1:115fec6:     }
1:115fec6: 
1:115fec6:     return best;
1:115fec6:   }
1:115fec6: 
1:913d44d:   public void setThreadCount(int threadCount) {
1:913d44d:     this.threadCount = threadCount;
1:913d44d:     pool = Executors.newFixedThreadPool(threadCount);
1:913d44d:   }
1:913d44d: 
1:913d44d:   public int getThreadCount() {
1:913d44d:     return threadCount;
1:913d44d:   }
1:913d44d: 
1:913d44d:   public int getPopulationSize() {
1:913d44d:     return populationSize;
1:913d44d:   }
1:913d44d: 
1:02f8694:   public List<State<T, U>> getPopulation() {
1:913d44d:     return population;
1:913d44d:   }
1:913d44d: 
1:96117d3:   @Override
1:3f1450a:   public void close() {
1:42b989b:     List<Runnable> remainingTasks = pool.shutdownNow();
1:c88c240:     try {
1:c88c240:       pool.awaitTermination(10, TimeUnit.SECONDS);
1:c88c240:     } catch (InterruptedException e) {
1:c88c240:       throw new IllegalStateException("Had to forcefully shut down " + remainingTasks.size() + " tasks");
1:c88c240:     }
1:049e7dc:     if (!remainingTasks.isEmpty()) {
1:96117d3:       throw new IllegalStateException("Had to forcefully shut down " + remainingTasks.size() + " tasks");
1:42b989b:     }
1:42b989b:   }
1:42b989b: 
1:4b25f31:   public interface Function<T> {
1:4b25f31:     double apply(T payload, double[] params);
1:42b989b:   }
1:4b25f31: 
1:115fec6:   @Override
1:02f8694:   public void write(DataOutput out) throws IOException {
1:02f8694:     out.writeInt(threadCount);
1:02f8694:     out.writeInt(population.size());
1:02f8694:     for (State<T, U> state : population) {
1:02f8694:       PolymorphicWritable.write(out, state);
1:02f8694:     }
1:02f8694:   }
1:02f8694: 
1:02f8694:   @Override
1:02f8694:   public void readFields(DataInput input) throws IOException {
1:02f8694:     setThreadCount(input.readInt());
1:02f8694:     int n = input.readInt();
1:85f9ece:     population = new ArrayList<>();
1:02f8694:     for (int i = 0; i < n; i++) {
1:335a993:       State<T, U> state = (State<T, U>) PolymorphicWritable.read(input, State.class);
1:02f8694:       population.add(state);
1:02f8694:     }
1:02f8694:   }
1:42b989b: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.classifier.sgd.PolymorphicWritable;
1: 
/////////////////////////////////////////////////////////////////////////
1:     population = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:     List<State<T, U>> parents = new ArrayList<>(population.subList(0, survivors));
/////////////////////////////////////////////////////////////////////////
1:     Collection<Callable<State<T, U>>> tasks = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:     population = new ArrayList<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:c88c240
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       pool.awaitTermination(10, TimeUnit.SECONDS);
1:     } catch (InterruptedException e) {
1:       throw new IllegalStateException("Had to forcefully shut down " + remainingTasks.size() + " tasks");
1:     }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:335a993
/////////////////////////////////////////////////////////////////////////
1:       State<T, U> state = (State<T, U>) PolymorphicWritable.read(input, State.class);
commit:96117d3
/////////////////////////////////////////////////////////////////////////
1: import java.io.Closeable;
/////////////////////////////////////////////////////////////////////////
1: public class EvolutionaryProcess<T extends Payload<U>, U> implements Writable, Closeable {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:       throw new IllegalStateException("Had to forcefully shut down " + remainingTasks.size() + " tasks");
/////////////////////////////////////////////////////////////////////////
commit:35032b8
/////////////////////////////////////////////////////////////////////////
1:   private ExecutorService pool;
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1:     if (!remainingTasks.isEmpty()) {
commit:3f1450a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1:   public void close() {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:8b194c8
/////////////////////////////////////////////////////////////////////////
1:   // used to execute operations on the population in thread parallel.
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
0:   // used to execute OPERATIONS on the population in thread parallel.
author:Ted Dunning
-------------------------------------------------------------------------------
commit:02f8694
/////////////////////////////////////////////////////////////////////////
0: import org.apache.hadoop.io.Writable;
0: import org.apache.mahout.classifier.sgd.PolymorphicWritable;
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0: public class EvolutionaryProcess<T extends Payload<U>, U> implements Writable {
/////////////////////////////////////////////////////////////////////////
1:   private List<State<T, U>> population;
/////////////////////////////////////////////////////////////////////////
1:   public EvolutionaryProcess(int threadCount, int populationSize, State<T, U> seed) {
1:   private void initializePopulation(int populationSize, State<T, U> seed) {
1:   public void add(State<T, U> value) {
/////////////////////////////////////////////////////////////////////////
0:     List<State<T, U>> parents = Lists.newArrayList(population.subList(0, survivors));
/////////////////////////////////////////////////////////////////////////
1:   public State<T, U> parallelDo(final Function<Payload<U>> fn) throws InterruptedException, ExecutionException {
0:     Collection<Callable<State<T, U>>> tasks = Lists.newArrayList();
1:     for (final State<T, U> state : population) {
1:       tasks.add(new Callable<State<T, U>>() {
1:         public State<T, U> call() {
/////////////////////////////////////////////////////////////////////////
1:     List<Future<State<T, U>>> r = pool.invokeAll(tasks);
1:     State<T, U> best = null;
1:     for (Future<State<T, U>> future : r) {
1:       State<T, U> s = future.get();
/////////////////////////////////////////////////////////////////////////
1:   public List<State<T, U>> getPopulation() {
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeInt(threadCount);
1:     out.writeInt(population.size());
1:     for (State<T, U> state : population) {
1:       PolymorphicWritable.write(out, state);
1:     }
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput input) throws IOException {
1:     setThreadCount(input.readInt());
1:     int n = input.readInt();
0:     population = Lists.newArrayList();
1:     for (int i = 0; i < n; i++) {
0:       State<T, U> state = PolymorphicWritable.read(input, State.class);
1:       population.add(state);
1:     }
1:   }
commit:6ab620d
/////////////////////////////////////////////////////////////////////////
0:   public State<T> parallelDo(final Function<T> fn) throws InterruptedException, ExecutionException {
commit:42b989b
/////////////////////////////////////////////////////////////////////////
0:   public void close() throws EarlyTerminationException {
1:     List<Runnable> remainingTasks = pool.shutdownNow();
0:     if (remainingTasks.size() > 0) {
0:       throw new EarlyTerminationException("Had to forcefully shut down " + remainingTasks.size() + " tasks");
1:     }
1:   }
1: 
0:   public static class EarlyTerminationException extends RuntimeException {
0:     public EarlyTerminationException(String message) {
0:       super(message);
1:     }
1:   }
commit:913d44d
/////////////////////////////////////////////////////////////////////////
0:   private transient ExecutorService pool;
1: 
1:   // threadCount is serialized so that we can reconstruct the thread pool
1:   private int threadCount;
1: 
1:   public EvolutionaryProcess() {
0:     population = Lists.newArrayList();
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     setThreadCount(threadCount);
1:     initializePopulation(populationSize, seed);
1:   }
1: 
0:   private void initializePopulation(int populationSize, State<T> seed) {
0:   public void add(State<T> value) {
1:     population.add(value);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public void setThreadCount(int threadCount) {
1:     this.threadCount = threadCount;
1:     pool = Executors.newFixedThreadPool(threadCount);
1:   }
1: 
1:   public int getThreadCount() {
1:     return threadCount;
1:   }
1: 
1:   public int getPopulationSize() {
1:     return populationSize;
1:   }
1: 
0:   public List<State<T>> getPopulation() {
1:     return population;
1:   }
1: 
commit:4b25f31
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Allows evolutionary optimization where the state function can't be easily
1:  * packaged for the optimizer to execute.  A good example of this is with
1:  * on-line learning where optimizing the learning parameters is desirable.
1:  * We would like to pass training examples to the learning algorithms, but
1:  * we definitely want to do the training in multiple threads and then after
1:  * several training steps, we want to do a selection and mutation step.
1:  *
1:  * In such a case, it is highly desirable to leave most of the control flow
1:  * in the hands of our caller.  As such, this class provides three functions,
1:  * <ul>
1:  * <li> Storage of the evolutionary state.  The state variables have payloads
1:  * which can be anything that implements Payload.
1:  * <li> Threaded execution of a single operation on each of the members of the
1:  * population being evolved.  In the on-line learning example, this is used for
1:  * training all of the classifiers in the population.
1:  * <li> Propagating mutations of the most successful members of the population.
1:  * This propagation involves copying the state and the payload and then updating
1:  * the payload after mutation of the evolutionary state.
1:  * </ul>
1:  *
1:  * The State class that we use for storing the state of each member of the
1:  * population also provides parameter mapping.  Check out Mapping and State
1:  * for more info.
1:  *
1:  * @see Mapping
1:  * @see Payload
1:  * @see State
1:  *
1:  * @param <T> The payload class.
1:  */
0: public class EvolutionaryProcess<T extends Payload<T>> {
0:   // used to execute operations on the population in thread parallel.
1: 
1:   // list of members of the population
1: 
1:   // how big should the population be.  If this is changed, it will take effect
1:   // the next time the population is mutated.
1:   /**
1:    * Creates an evolutionary optimization framework with specified threadiness,
1:    * population size and initial state.
1:    * @param threadCount               How many threads to use in parallelDo
1:    * @param populationSize            How large a population to use
1:    * @param seed                      An initial population member
1:    */
1:     population = Lists.newArrayList(seed);
1:   /**
1:    * Nuke all but a few of the current population and then repopulate with
1:    * variants of the survivors.
1:    * @param survivors          How many survivors we want to keep.
1:    */
1:     // largest value first, oldest first in case of ties
1: 
1:     // we copy here to avoid concurrent modification
1:     // fill out the population with offspring from the survivors
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Execute an operation on all of the members of the population with many threads.  The
1:    * return value is taken as the current fitness of the corresponding member.
1:    * @param fn    What to do on each member.  Gets payload and the mapped parameters as args.
1:    * @return      The member of the population with the best fitness.
1:    * @throws InterruptedException      Shouldn't happen.
1:    * @throws ExecutionException        If fn throws an exception, that exception will be collected
1:    * and rethrown nested in an ExecutionException.
1:    */
0:   public State<T> parallelDo(final Function fn) throws InterruptedException, ExecutionException {
0:         public State<T> call() {
1: 
1:     // zip through the results and find the best one
/////////////////////////////////////////////////////////////////////////
1:   public interface Function<T> {
1:     double apply(T payload, double[] params);
1: 
commit:115fec6
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: 
0: public class EvolutionaryProcess<T extends Copyable<T>> {
0:   private ExecutorService pool;
0:   private List<State<T>> population;
1:   private int populationSize;
1: 
0:   public EvolutionaryProcess(int threadCount, int populationSize, State<T> seed) {
1:     this.populationSize = populationSize;
0:     pool = Executors.newFixedThreadPool(threadCount);
0:     population = Lists.newArrayList();
1:     for (int i = 0; i < populationSize; i++) {
1:       population.add(seed.mutate());
1:     }
1:   }
1: 
1:   public void mutatePopulation(int survivors) {
1:     Collections.sort(population);
0:     List<State<T>> parents = Lists.newArrayList(population.subList(0, survivors));
1:     population.subList(survivors, population.size()).clear();
1: 
1:     int i = 0;
1:     while (population.size() < populationSize) {
1:       population.add(parents.get(i % survivors).mutate());
1:       i++;
1:     }
1:   }
1: 
0:   public State<T> parallelDo(final Function<T> fn) throws InterruptedException, ExecutionException {
0:     Collection<Callable<State<T>>> tasks = Lists.newArrayList();
0:     for (final State<T> state : population) {
0:       tasks.add(new Callable<State<T>>() {
1:         @Override
0:         public State<T> call() throws Exception {
1:           double v = fn.apply(state.getPayload(), state.getMappedParams());
1:           state.setValue(v);
1:           return state;
1:         }
1:       });
1:     }
0:     List<Future<State<T>>> r = pool.invokeAll(tasks);
1: 
1:     double max = Double.NEGATIVE_INFINITY;
0:     State<T> best = null;
0:     for (Future<State<T>> future : r) {
0:       State<T> s = future.get();
1:       double value = s.getValue();
1:       if (!Double.isNaN(value) && value >= max) {
1:         max = value;
1:         best = s;
1:       }
1:     }
1:     if (best == null) {
1:       best = r.get(0).get();
1:     }
1: 
1:     return best;
1:   }
1: 
0:   public abstract static class Function<U> {
0:     abstract double apply(U payload, double[] params);
1:   }
commit:292bb9d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.ep;
0: 
0: /**
0:  * Created by IntelliJ IDEA. User: tdunning Date: Aug 17, 2010 Time: 12:04:41 PM To change this
0:  * template use File | Settings | File Templates.
0:  */
0: public class EvolutionaryProcess {
0: }
============================================================================