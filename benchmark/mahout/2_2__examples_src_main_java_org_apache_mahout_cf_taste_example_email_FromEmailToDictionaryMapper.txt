1:4194a28: /**
1:4194a28:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4194a28:  * contributor license agreements.  See the NOTICE file distributed with
1:4194a28:  * this work for additional information regarding copyright ownership.
1:4194a28:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4194a28:  * (the "License"); you may not use this file except in compliance with
1:4194a28:  * the License.  You may obtain a copy of the License at
1:4194a28:  *
1:4194a28:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4194a28:  *
1:4194a28:  * Unless required by applicable law or agreed to in writing, software
1:4194a28:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4194a28:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4194a28:  * See the License for the specific language governing permissions and
1:4194a28:  * limitations under the License.
1:4194a28:  */
1:29a7f38: 
1:4194a28: package org.apache.mahout.cf.taste.example.email;
1:29a7f38: 
1:29a7f38: import org.apache.hadoop.io.Text;
1:29a7f38: import org.apache.hadoop.mapreduce.Mapper;
1:29a7f38: import org.apache.mahout.math.VarIntWritable;
1:29a7f38: 
1:29a7f38: import java.io.IOException;
1:29a7f38: 
1:29a7f38: /**
1:29a7f38:  *  Assumes the input is in the format created by {@link org.apache.mahout.text.SequenceFilesFromMailArchives}
1:4194a28:  */
1:4194a28: public final class FromEmailToDictionaryMapper extends Mapper<Text, Text, Text, VarIntWritable> {
1:29a7f38: 
1:4194a28:   private String separator;
1:29a7f38: 
1:29a7f38:   @Override
1:29a7f38:   protected void setup(Context context) throws IOException, InterruptedException {
1:4194a28:     super.setup(context);
1:29a7f38:     separator = context.getConfiguration().get(EmailUtility.SEPARATOR);
1:29a7f38:   }
1:29a7f38: 
1:29a7f38:   @Override
1:29a7f38:   protected void map(Text key, Text value, Context context) throws IOException, InterruptedException {
1:29a7f38:     //From is in the value
1:29a7f38:     String valStr = value.toString();
1:29a7f38:     int idx = valStr.indexOf(separator);
1:4fbfbc6:     if (idx == -1) {
1:4fbfbc6:       context.getCounter(EmailUtility.Counters.NO_FROM_ADDRESS).increment(1);
1:4fbfbc6:     } else {
1:29a7f38:       String full = valStr.substring(0, idx);
1:29a7f38:       //do some cleanup to normalize some things, like: Key: karthik ananth <karthik.jcecs@gmail.com>: Value: 178
1:4fbfbc6:       //Key: karthik ananth [mailto:karthik.jcecs@gmail.com]=20: Value: 179
1:29a7f38:       //TODO: is there more to clean up here?
1:29a7f38:       full = EmailUtility.cleanUpEmailAddress(full);
1:29a7f38: 
1:4fbfbc6:       if (EmailUtility.WHITESPACE.matcher(full).matches()) {
2:5389d76:         context.getCounter(EmailUtility.Counters.NO_FROM_ADDRESS).increment(1);
1:4fbfbc6:       } else {
1:4fbfbc6:         context.write(new Text(full), new VarIntWritable(1));
1:5389d76:       }
1:29a7f38:     }
1:29a7f38: 
1:29a7f38:   }
1:29a7f38: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1:     if (idx == -1) {
1:       context.getCounter(EmailUtility.Counters.NO_FROM_ADDRESS).increment(1);
1:     } else {
1:       //Key: karthik ananth [mailto:karthik.jcecs@gmail.com]=20: Value: 179
1:       if (EmailUtility.WHITESPACE.matcher(full).matches()) {
1:       } else {
1:         context.write(new Text(full), new VarIntWritable(1));
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.cf.taste.example.email;
1:  */
1: public final class FromEmailToDictionaryMapper extends Mapper<Text, Text, Text, VarIntWritable> {
1:   private String separator;
1:     super.setup(context);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:5389d76
/////////////////////////////////////////////////////////////////////////
0:       if (EmailUtility.WHITESPACE.matcher(full).matches() == false) {
0:         context.write(new Text(full), new VarIntWritable(1));
0:       } else {
1:         context.getCounter(EmailUtility.Counters.NO_FROM_ADDRESS).increment(1);
1:       }
0:     } else {
1:       context.getCounter(EmailUtility.Counters.NO_FROM_ADDRESS).increment(1);
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.cf.taste.example.email;
1: 
1: 
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.math.VarIntWritable;
0: import org.apache.mahout.math.VarLongWritable;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  *  Assumes the input is in the format created by {@link org.apache.mahout.text.SequenceFilesFromMailArchives}
0:  *
0:  **/
0: public class FromEmailToDictionaryMapper extends
0:         Mapper<Text, Text, Text, VarIntWritable> {
0:   private String separator = "\n";
1: 
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     separator = context.getConfiguration().get(EmailUtility.SEPARATOR);
1:   }
1: 
1:   @Override
1:   protected void map(Text key, Text value, Context context) throws IOException, InterruptedException {
1:     //From is in the value
1:     String valStr = value.toString();
1:     int idx = valStr.indexOf(separator);
0:     if (idx != -1){
1:       String full = valStr.substring(0, idx);
1:       //do some cleanup to normalize some things, like: Key: karthik ananth <karthik.jcecs@gmail.com>: Value: 178
0:             //Key: karthik ananth [mailto:karthik.jcecs@gmail.com]=20: Value: 179
1:       //TODO: is there more to clean up here?
1:       full = EmailUtility.cleanUpEmailAddress(full);
1: 
0:       context.write(new Text(full), new VarIntWritable(1));
1:     }
1: 
1:   }
1: }
============================================================================