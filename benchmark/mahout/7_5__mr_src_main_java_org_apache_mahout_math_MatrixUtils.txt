1:131eb4a: /**
1:131eb4a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:131eb4a:  * contributor license agreements.  See the NOTICE file distributed with
1:131eb4a:  * this work for additional information regarding copyright ownership.
1:131eb4a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:131eb4a:  * (the "License"); you may not use this file except in compliance with
1:131eb4a:  * the License.  You may obtain a copy of the License at
1:131eb4a:  *
1:131eb4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:131eb4a:  *
1:131eb4a:  * Unless required by applicable law or agreed to in writing, software
1:131eb4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:131eb4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:131eb4a:  * See the License for the specific language governing permissions and
1:131eb4a:  * limitations under the License.
1:131eb4a:  */
1:131eb4a: package org.apache.mahout.math;
1:131eb4a: 
1:131eb4a: import com.google.common.collect.Lists;
1:131eb4a: import org.apache.hadoop.conf.Configuration;
1:131eb4a: import org.apache.hadoop.fs.FileSystem;
1:131eb4a: import org.apache.hadoop.fs.Path;
1:131eb4a: import org.apache.hadoop.io.IntWritable;
1:131eb4a: import org.apache.hadoop.io.SequenceFile;
1:131eb4a: import org.apache.hadoop.io.Writable;
1:131eb4a: import org.apache.mahout.common.Pair;
1:131eb4a: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
1:131eb4a: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1:131eb4a: 
1:131eb4a: import java.io.IOException;
1:131eb4a: import java.util.List;
1:131eb4a: 
1:4fbfbc6: public final class MatrixUtils {
1:4fbfbc6: 
1:4fbfbc6:   private MatrixUtils() {
1:4fbfbc6:   }
1:131eb4a: 
1:131eb4a:   public static void write(Path outputDir, Configuration conf, VectorIterable matrix)
1:6d16230:     throws IOException {
1:131eb4a:     FileSystem fs = outputDir.getFileSystem(conf);
1:131eb4a:     fs.delete(outputDir, true);
1:131eb4a:     SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, outputDir,
1:131eb4a:         IntWritable.class, VectorWritable.class);
1:131eb4a:     IntWritable topic = new IntWritable();
1:131eb4a:     VectorWritable vector = new VectorWritable();
1:e64dd36:     for (MatrixSlice slice : matrix) {
1:131eb4a:       topic.set(slice.index());
1:131eb4a:       vector.set(slice.vector());
1:131eb4a:       writer.append(topic, vector);
1:131eb4a:     }
1:131eb4a:     writer.close();
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   public static Matrix read(Configuration conf, Path... modelPaths) throws IOException {
1:131eb4a:     int numRows = -1;
1:131eb4a:     int numCols = -1;
1:131eb4a:     boolean sparse = false;
1:131eb4a:     List<Pair<Integer, Vector>> rows = Lists.newArrayList();
1:e64dd36:     for (Path modelPath : modelPaths) {
1:6d16230:       for (Pair<IntWritable, VectorWritable> row
1:6d16230:           : new SequenceFileIterable<IntWritable, VectorWritable>(modelPath, true, conf)) {
1:131eb4a:         rows.add(Pair.of(row.getFirst().get(), row.getSecond().get()));
1:131eb4a:         numRows = Math.max(numRows, row.getFirst().get());
1:131eb4a:         sparse = !row.getSecond().get().isDense();
1:e64dd36:         if (numCols < 0) {
1:131eb4a:           numCols = row.getSecond().get().size();
1:131eb4a:         }
1:131eb4a:       }
1:131eb4a:     }
1:e64dd36:     if (rows.isEmpty()) {
1:564c3e1:       throw new IOException(Arrays.toString(modelPaths) + " have no vectors in it");
1:131eb4a:     }
1:131eb4a:     numRows++;
1:131eb4a:     Vector[] arrayOfRows = new Vector[numRows];
1:e64dd36:     for (Pair<Integer, Vector> pair : rows) {
1:131eb4a:       arrayOfRows[pair.getFirst()] = pair.getSecond();
1:131eb4a:     }
1:131eb4a:     Matrix matrix;
1:e64dd36:     if (sparse) {
1:131eb4a:       matrix = new SparseRowMatrix(numRows, numCols, arrayOfRows);
1:131eb4a:     } else {
1:131eb4a:       matrix = new DenseMatrix(numRows, numCols);
1:e64dd36:       for (int i = 0; i < numRows; i++) {
1:131eb4a:         matrix.assignRow(i, arrayOfRows[i]);
1:131eb4a:       }
1:131eb4a:     }
1:131eb4a:     return matrix;
1:131eb4a:   }
1:131eb4a: 
1:4fbfbc6:   public static OpenObjectIntHashMap<String> readDictionary(Configuration conf, Path... dictPath) {
1:87c15be:     OpenObjectIntHashMap<String> dictionary = new OpenObjectIntHashMap<>();
1:e64dd36:     for (Path dictionaryFile : dictPath) {
1:131eb4a:       for (Pair<Writable, IntWritable> record
1:131eb4a:               : new SequenceFileIterable<Writable, IntWritable>(dictionaryFile, true, conf)) {
1:131eb4a:         dictionary.put(record.getFirst().toString(), record.getSecond().get());
1:131eb4a:       }
1:131eb4a:     }
1:131eb4a:     return dictionary;
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   public static String[] invertDictionary(OpenObjectIntHashMap<String> termIdMap) {
1:131eb4a:     int maxTermId = -1;
1:e64dd36:     for (String term : termIdMap.keys()) {
1:131eb4a:       maxTermId = Math.max(maxTermId, termIdMap.get(term));
1:131eb4a:     }
1:131eb4a:     maxTermId++;
1:131eb4a:     String[] dictionary = new String[maxTermId];
1:e64dd36:     for (String term : termIdMap.keys()) {
1:131eb4a:       dictionary[termIdMap.get(term)] = term;
1:131eb4a:     }
1:131eb4a:     return dictionary;
1:131eb4a:   }
1:131eb4a: 
1:131eb4a: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     OpenObjectIntHashMap<String> dictionary = new OpenObjectIntHashMap<>();
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     throws IOException {
/////////////////////////////////////////////////////////////////////////
1:       for (Pair<IntWritable, VectorWritable> row
1:           : new SequenceFileIterable<IntWritable, VectorWritable>(modelPath, true, conf)) {
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     for (MatrixSlice slice : matrix) {
/////////////////////////////////////////////////////////////////////////
1:     for (Path modelPath : modelPaths) {
0:       for (Pair<IntWritable, VectorWritable> row :
1:         if (numCols < 0) {
1:     if (rows.isEmpty()) {
1:     for (Pair<Integer, Vector> pair : rows) {
1:     if (sparse) {
1:       for (int i = 0; i < numRows; i++) {
/////////////////////////////////////////////////////////////////////////
1:     for (Path dictionaryFile : dictPath) {
/////////////////////////////////////////////////////////////////////////
1:     for (String term : termIdMap.keys()) {
1:     for (String term : termIdMap.keys()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:       throw new IOException(Arrays.toString(modelPaths) + " have no vectors in it");
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: public final class MatrixUtils {
1: 
1:   private MatrixUtils() {
1:   }
/////////////////////////////////////////////////////////////////////////
1:   public static OpenObjectIntHashMap<String> readDictionary(Configuration conf, Path... dictPath) {
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:131eb4a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.math;
1: 
1: import com.google.common.collect.Lists;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
1: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1: 
1: import java.io.IOException;
1: import java.util.List;
1: 
0: public class MatrixUtils {
1: 
1:   public static void write(Path outputDir, Configuration conf, VectorIterable matrix)
0:       throws IOException {
1:     FileSystem fs = outputDir.getFileSystem(conf);
1:     fs.delete(outputDir, true);
1:     SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, outputDir,
1:         IntWritable.class, VectorWritable.class);
1:     IntWritable topic = new IntWritable();
1:     VectorWritable vector = new VectorWritable();
0:     for(MatrixSlice slice : matrix) {
1:       topic.set(slice.index());
1:       vector.set(slice.vector());
1:       writer.append(topic, vector);
1:     }
1:     writer.close();
1:   }
1: 
1:   public static Matrix read(Configuration conf, Path... modelPaths) throws IOException {
1:     int numRows = -1;
1:     int numCols = -1;
1:     boolean sparse = false;
1:     List<Pair<Integer, Vector>> rows = Lists.newArrayList();
0:     for(Path modelPath : modelPaths) {
0:       for(Pair<IntWritable, VectorWritable> row :
0:           new SequenceFileIterable<IntWritable, VectorWritable>(modelPath, true, conf)) {
1:         rows.add(Pair.of(row.getFirst().get(), row.getSecond().get()));
1:         numRows = Math.max(numRows, row.getFirst().get());
1:         sparse = !row.getSecond().get().isDense();
0:         if(numCols < 0) {
1:           numCols = row.getSecond().get().size();
1:         }
1:       }
1:     }
0:     if(rows.isEmpty()) {
0:       throw new IOException(modelPaths + " have no vectors in it");
1:     }
1:     numRows++;
1:     Vector[] arrayOfRows = new Vector[numRows];
0:     for(Pair<Integer, Vector> pair : rows) {
1:       arrayOfRows[pair.getFirst()] = pair.getSecond();
1:     }
1:     Matrix matrix;
0:     if(sparse) {
1:       matrix = new SparseRowMatrix(numRows, numCols, arrayOfRows);
1:     } else {
1:       matrix = new DenseMatrix(numRows, numCols);
0:       for(int i = 0; i < numRows; i++) {
1:         matrix.assignRow(i, arrayOfRows[i]);
1:       }
1:     }
1:     return matrix;
1:   }
1: 
0:   public static OpenObjectIntHashMap<String> readDictionary(Configuration conf, Path... dictPath)
0:     throws IOException {
0:     OpenObjectIntHashMap<String> dictionary = new OpenObjectIntHashMap<String>();
0:     for(Path dictionaryFile : dictPath) {
1:       for (Pair<Writable, IntWritable> record
1:               : new SequenceFileIterable<Writable, IntWritable>(dictionaryFile, true, conf)) {
1:         dictionary.put(record.getFirst().toString(), record.getSecond().get());
1:       }
1:     }
1:     return dictionary;
1:   }
1: 
1:   public static String[] invertDictionary(OpenObjectIntHashMap<String> termIdMap) {
1:     int maxTermId = -1;
0:     for(String term : termIdMap.keys()) {
1:       maxTermId = Math.max(maxTermId, termIdMap.get(term));
1:     }
1:     maxTermId++;
1:     String[] dictionary = new String[maxTermId];
0:     for(String term : termIdMap.keys()) {
1:       dictionary[termIdMap.get(term)] = term;
1:     }
1:     return dictionary;
1:   }
1: 
1: }
============================================================================