1:f3a9cc1: /**
1:f3a9cc1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f3a9cc1:  * contributor license agreements.  See the NOTICE file distributed with
1:f3a9cc1:  * this work for additional information regarding copyright ownership.
1:f3a9cc1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f3a9cc1:  * (the "License"); you may not use this file except in compliance with
1:f3a9cc1:  * the License.  You may obtain a copy of the License at
1:f3a9cc1:  *
1:f3a9cc1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f3a9cc1:  *
1:f3a9cc1:  * Unless required by applicable law or agreed to in writing, software
1:f3a9cc1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f3a9cc1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f3a9cc1:  * See the License for the specific language governing permissions and
1:f3a9cc1:  * limitations under the License.
1:f3a9cc1:  */
1:39fe224: 
1:c439f53: package org.apache.mahout.cf.taste.example.kddcup.track1.svd;
1:c439f53: 
1:87d4b2e: import java.io.BufferedOutputStream;
1:87d4b2e: import java.io.File;
1:87d4b2e: import java.io.FileOutputStream;
1:87d4b2e: import java.io.OutputStream;
1:87d4b2e: 
1:d608a88: import com.google.common.io.Closeables;
1:c439f53: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1:c439f53: import org.apache.mahout.cf.taste.common.NoSuchUserException;
1:c439f53: import org.apache.mahout.cf.taste.example.kddcup.DataFileIterable;
1:c439f53: import org.apache.mahout.cf.taste.example.kddcup.KDDCupDataModel;
1:c439f53: import org.apache.mahout.cf.taste.example.kddcup.track1.EstimateConverter;
1:c439f53: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
1:c439f53: import org.apache.mahout.cf.taste.impl.common.RunningAverage;
1:c439f53: import org.apache.mahout.cf.taste.impl.recommender.svd.Factorization;
1:c439f53: import org.apache.mahout.cf.taste.impl.recommender.svd.Factorizer;
1:c439f53: import org.apache.mahout.cf.taste.model.Preference;
1:c439f53: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:c439f53: import org.apache.mahout.common.Pair;
1:c439f53: import org.slf4j.Logger;
1:c439f53: import org.slf4j.LoggerFactory;
1:c439f53: 
1:c439f53: /**
1:c439f53:  * run an SVD factorization of the KDD track1 data.
1:c439f53:  *
1:c439f53:  * needs at least 6-7GB of memory, tested with -Xms6700M -Xmx6700M
1:c439f53:  *
1:c439f53:  */
1:10c535c: public final class Track1SVDRunner {
1:c439f53: 
1:c439f53:   private static final Logger log = LoggerFactory.getLogger(Track1SVDRunner.class);
1:c439f53: 
1:39fe224:   private Track1SVDRunner() {
1:39fe224:   }
1:c439f53: 
1:c439f53:   public static void main(String[] args) throws Exception {
1:c439f53: 
1:c439f53:     if (args.length != 2) {
1:c439f53:       System.err.println("Necessary arguments: <kddDataFileDirectory> <resultFile>");
1:1499411:       return;
1:c439f53:     }
1:c439f53: 
1:c439f53:     File dataFileDirectory = new File(args[0]);
1:c439f53:     if (!dataFileDirectory.exists() || !dataFileDirectory.isDirectory()) {
1:c439f53:       throw new IllegalArgumentException("Bad data file directory: " + dataFileDirectory);
1:c439f53:     }
1:c439f53: 
1:c439f53:     File resultFile = new File(args[1]);
1:c439f53: 
1:c439f53:     /* the knobs to turn */
1:c439f53:     int numFeatures = 20;
1:c439f53:     int numIterations = 5;
1:c439f53:     double learningRate = 0.0001;
1:c439f53:     double preventOverfitting = 0.002;
1:c439f53:     double randomNoise = 0.0001;
1:c439f53: 
1:c439f53: 
1:c439f53:     KDDCupFactorizablePreferences factorizablePreferences =
1:c439f53:         new KDDCupFactorizablePreferences(KDDCupDataModel.getTrainingFile(dataFileDirectory));
1:c439f53: 
1:c439f53:     Factorizer sgdFactorizer = new ParallelArraysSGDFactorizer(factorizablePreferences, numFeatures, numIterations,
1:c439f53:         learningRate, preventOverfitting, randomNoise);
1:c439f53: 
1:c439f53:     Factorization factorization = sgdFactorizer.factorize();
1:c439f53: 
1:c439f53:     log.info("Estimating validation preferences...");
1:c439f53:     int prefsProcessed = 0;
1:c439f53:     RunningAverage average = new FullRunningAverage();
1:6d16230:     for (Pair<PreferenceArray,long[]> validationPair
1:6d16230:         : new DataFileIterable(KDDCupDataModel.getValidationFile(dataFileDirectory))) {
1:c439f53:       for (Preference validationPref : validationPair.getFirst()) {
1:c439f53:         double estimate = estimatePreference(factorization, validationPref.getUserID(), validationPref.getItemID(),
1:c439f53:             factorizablePreferences.getMinPreference(), factorizablePreferences.getMaxPreference());
1:c439f53:         double error = validationPref.getValue() - estimate;
1:c439f53:         average.addDatum(error * error);
1:c439f53:         prefsProcessed++;
1:c439f53:         if (prefsProcessed % 100000 == 0) {
1:c439f53:           log.info("Computed {} estimations", prefsProcessed);
1:c439f53:         }
1:c439f53:       }
1:c439f53:     }
1:c439f53:     log.info("Computed {} estimations, done.", prefsProcessed);
1:c439f53: 
1:c439f53:     double rmse = Math.sqrt(average.getAverage());
1:c439f53:     log.info("RMSE {}", rmse);
1:c439f53: 
1:c439f53:     log.info("Estimating test preferences...");
1:c439f53:     OutputStream out = null;
1:c439f53:     try {
1:c439f53:       out = new BufferedOutputStream(new FileOutputStream(resultFile));
1:c439f53: 
1:6d16230:       for (Pair<PreferenceArray,long[]> testPair
1:6d16230:           : new DataFileIterable(KDDCupDataModel.getTestFile(dataFileDirectory))) {
1:c439f53:         for (Preference testPref : testPair.getFirst()) {
1:c439f53:           double estimate = estimatePreference(factorization, testPref.getUserID(), testPref.getItemID(),
1:c439f53:               factorizablePreferences.getMinPreference(), factorizablePreferences.getMaxPreference());
1:c439f53:           byte result = EstimateConverter.convert(estimate, testPref.getUserID(), testPref.getItemID());
1:c439f53:           out.write(result);
1:c439f53:         }
1:c439f53:       }
1:c439f53:     } finally {
1:87d4b2e:       Closeables.close(out, false);
1:c439f53:     }
1:c439f53:     log.info("wrote estimates to {}, done.", resultFile.getAbsolutePath());
1:c439f53:   }
1:c439f53: 
1:c439f53:   static double estimatePreference(Factorization factorization, long userID, long itemID, float minPreference,
1:c439f53:       float maxPreference) throws NoSuchUserException, NoSuchItemException {
1:c439f53:     double[] userFeatures = factorization.getUserFeatures(userID);
1:c439f53:     double[] itemFeatures = factorization.getItemFeatures(itemID);
1:c439f53:     double estimate = 0;
1:c439f53:     for (int feature = 0; feature < userFeatures.length; feature++) {
1:c439f53:       estimate += userFeatures[feature] * itemFeatures[feature];
1:c439f53:     }
1:c439f53:     if (estimate < minPreference) {
1:c439f53:       estimate = minPreference;
1:c439f53:     } else if (estimate > maxPreference) {
1:c439f53:       estimate = maxPreference;
1:c439f53:     }
1:c439f53:     return estimate;
1:c439f53:   }
1:c439f53: 
1:c439f53: }
============================================================================
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedOutputStream;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.OutputStream;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(out, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(out, true);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     for (Pair<PreferenceArray,long[]> validationPair
1:         : new DataFileIterable(KDDCupDataModel.getValidationFile(dataFileDirectory))) {
/////////////////////////////////////////////////////////////////////////
1:       for (Pair<PreferenceArray,long[]> testPair
1:           : new DataFileIterable(KDDCupDataModel.getTestFile(dataFileDirectory))) {
commit:d608a88
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:       Closeables.closeQuietly(out);
commit:c439f53
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.cf.taste.example.kddcup.track1.svd;
1: 
1: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1: import org.apache.mahout.cf.taste.common.NoSuchUserException;
1: import org.apache.mahout.cf.taste.example.kddcup.DataFileIterable;
1: import org.apache.mahout.cf.taste.example.kddcup.KDDCupDataModel;
1: import org.apache.mahout.cf.taste.example.kddcup.track1.EstimateConverter;
1: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
1: import org.apache.mahout.cf.taste.impl.common.RunningAverage;
1: import org.apache.mahout.cf.taste.impl.recommender.svd.Factorization;
1: import org.apache.mahout.cf.taste.impl.recommender.svd.Factorizer;
1: import org.apache.mahout.cf.taste.model.Preference;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.common.Pair;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import java.io.BufferedOutputStream;
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.OutputStream;
1: 
1: /**
1:  * run an SVD factorization of the KDD track1 data.
1:  *
1:  * needs at least 6-7GB of memory, tested with -Xms6700M -Xmx6700M
1:  *
1:  */
0: public class Track1SVDRunner {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(Track1SVDRunner.class);
1: 
1:   public static void main(String[] args) throws Exception {
1: 
1:     if (args.length != 2) {
1:       System.err.println("Necessary arguments: <kddDataFileDirectory> <resultFile>");
0:       System.exit(-1);
1:     }
1: 
1:     File dataFileDirectory = new File(args[0]);
1:     if (!dataFileDirectory.exists() || !dataFileDirectory.isDirectory()) {
1:       throw new IllegalArgumentException("Bad data file directory: " + dataFileDirectory);
1:     }
1: 
1:     File resultFile = new File(args[1]);
1: 
1:     /* the knobs to turn */
1:     int numFeatures = 20;
1:     int numIterations = 5;
1:     double learningRate = 0.0001;
1:     double preventOverfitting = 0.002;
1:     double randomNoise = 0.0001;
1: 
1: 
1:     KDDCupFactorizablePreferences factorizablePreferences =
1:         new KDDCupFactorizablePreferences(KDDCupDataModel.getTrainingFile(dataFileDirectory));
1: 
1:     Factorizer sgdFactorizer = new ParallelArraysSGDFactorizer(factorizablePreferences, numFeatures, numIterations,
1:         learningRate, preventOverfitting, randomNoise);
1: 
1:     Factorization factorization = sgdFactorizer.factorize();
1: 
1:     log.info("Estimating validation preferences...");
1:     int prefsProcessed = 0;
1:     RunningAverage average = new FullRunningAverage();
0:     DataFileIterable validations = new DataFileIterable(KDDCupDataModel.getValidationFile(dataFileDirectory));
0:     for (Pair<PreferenceArray,long[]> validationPair : validations) {
1:       for (Preference validationPref : validationPair.getFirst()) {
1:         double estimate = estimatePreference(factorization, validationPref.getUserID(), validationPref.getItemID(),
1:             factorizablePreferences.getMinPreference(), factorizablePreferences.getMaxPreference());
1:         double error = validationPref.getValue() - estimate;
1:         average.addDatum(error * error);
1:         prefsProcessed++;
1:         if (prefsProcessed % 100000 == 0) {
1:           log.info("Computed {} estimations", prefsProcessed);
1:         }
1:       }
1:     }
1:     log.info("Computed {} estimations, done.", prefsProcessed);
1: 
1:     double rmse = Math.sqrt(average.getAverage());
1:     log.info("RMSE {}", rmse);
1: 
1:     log.info("Estimating test preferences...");
1:     OutputStream out = null;
1:     try {
1:       out = new BufferedOutputStream(new FileOutputStream(resultFile));
1: 
0:       DataFileIterable tests = new DataFileIterable(KDDCupDataModel.getTestFile(dataFileDirectory));
0:       for (Pair<PreferenceArray,long[]> testPair : tests) {
1:         for (Preference testPref : testPair.getFirst()) {
1:           double estimate = estimatePreference(factorization, testPref.getUserID(), testPref.getItemID(),
1:               factorizablePreferences.getMinPreference(), factorizablePreferences.getMaxPreference());
1:           byte result = EstimateConverter.convert(estimate, testPref.getUserID(), testPref.getItemID());
1:           out.write(result);
1:         }
1:       }
1:     } finally {
0:       out.flush();
0:       out.close();
1:     }
1:     log.info("wrote estimates to {}, done.", resultFile.getAbsolutePath());
1:   }
1: 
1:   static double estimatePreference(Factorization factorization, long userID, long itemID, float minPreference,
1:       float maxPreference) throws NoSuchUserException, NoSuchItemException {
1:     double[] userFeatures = factorization.getUserFeatures(userID);
1:     double[] itemFeatures = factorization.getItemFeatures(itemID);
1:     double estimate = 0;
1:     for (int feature = 0; feature < userFeatures.length; feature++) {
1:       estimate += userFeatures[feature] * itemFeatures[feature];
1:     }
1:     if (estimate < minPreference) {
1:       estimate = minPreference;
1:     } else if (estimate > maxPreference) {
1:       estimate = maxPreference;
1:     }
1:     return estimate;
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1: public final class Track1SVDRunner {
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:       return;
commit:3d44c1e
/////////////////////////////////////////////////////////////////////////
0:     for (Pair<PreferenceArray,long[]> validationPair :
0:          new DataFileIterable(KDDCupDataModel.getValidationFile(dataFileDirectory))) {
/////////////////////////////////////////////////////////////////////////
0:       for (Pair<PreferenceArray,long[]> testPair :
0:            new DataFileIterable(KDDCupDataModel.getTestFile(dataFileDirectory))) {
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:   private Track1SVDRunner() {
1:   }
1: 
commit:f3a9cc1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
============================================================================