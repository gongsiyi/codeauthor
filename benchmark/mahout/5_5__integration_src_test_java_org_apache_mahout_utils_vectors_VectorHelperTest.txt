1:051cbcf: /*
1:051cbcf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:051cbcf:  * contributor license agreements.  See the NOTICE file distributed with
1:051cbcf:  * this work for additional information regarding copyright ownership.
1:051cbcf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:051cbcf:  * (the "License"); you may not use this file except in compliance with
1:051cbcf:  * the License.  You may obtain a copy of the License at
1:051cbcf:  *
1:051cbcf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:051cbcf:  *
1:051cbcf:  * Unless required by applicable law or agreed to in writing, software
1:051cbcf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:051cbcf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:051cbcf:  * See the License for the specific language governing permissions and
1:051cbcf:  * limitations under the License.
1:051cbcf:  */
2:131eb4a: 
1:131eb4a: package org.apache.mahout.utils.vectors;
1:b381afd: 
1:85f9ece: import java.util.Random;
1:131eb4a: 
1:95c68de: import org.apache.hadoop.conf.Configuration;
1:95c68de: import org.apache.hadoop.fs.FileSystem;
1:95c68de: import org.apache.hadoop.fs.Path;
1:95c68de: import org.apache.hadoop.io.IntWritable;
1:95c68de: import org.apache.hadoop.io.SequenceFile;
1:95c68de: import org.apache.hadoop.io.Text;
1:b381afd: import org.apache.mahout.common.MahoutTestCase;
1:95c68de: import org.apache.mahout.common.RandomUtils;
1:131eb4a: import org.apache.mahout.math.SequentialAccessSparseVector;
1:131eb4a: import org.apache.mahout.math.Vector;
1:95c68de: import org.junit.Before;
1:051cbcf: import org.junit.Test;
1:95c68de: 
1:051cbcf: public final class VectorHelperTest extends MahoutTestCase {
1:131eb4a: 
1:95c68de:   private static final int NUM_DOCS = 100;
1:95c68de: 
1:95c68de:   private Path inputPathOne;
1:95c68de:   private Path inputPathTwo;
1:95c68de: 
1:95c68de:   private Configuration conf;
1:95c68de: 
1:95c68de:   @Override
1:95c68de:   @Before
1:95c68de:   public void setUp() throws Exception {
1:95c68de:     super.setUp();
1:95c68de:     conf = getConfiguration();
1:95c68de: 
1:95c68de:     inputPathOne = getTestTempFilePath("documents/docs-one.file");
1:95c68de:     FileSystem fs = FileSystem.get(inputPathOne.toUri(), conf);
1:85f9ece:     try (SequenceFile.Writer writer =
1:85f9ece:              new SequenceFile.Writer(fs, conf, inputPathOne, Text.class, IntWritable.class)) {
1:95c68de:       Random rd = RandomUtils.getRandom();
1:95c68de:       for (int i = 0; i < NUM_DOCS; i++) {
1:95c68de:         // Make all indices higher than dictionary size
1:95c68de:         writer.append(new Text("Document::ID::" + i), new IntWritable(NUM_DOCS + rd.nextInt(NUM_DOCS)));
1:95c68de:       }
1:95c68de:     }
1:95c68de: 
1:95c68de:     inputPathTwo = getTestTempFilePath("documents/docs-two.file");
1:95c68de:     fs = FileSystem.get(inputPathTwo.toUri(), conf);
1:85f9ece:     try (SequenceFile.Writer writer =
1:85f9ece:              new SequenceFile.Writer(fs, conf, inputPathTwo, Text.class, IntWritable.class)) {
1:95c68de:       Random rd = RandomUtils.getRandom();
1:95c68de:       for (int i = 0; i < NUM_DOCS; i++) {
1:95c68de:         // Keep indices within number of documents
1:95c68de:         writer.append(new Text("Document::ID::" + i), new IntWritable(rd.nextInt(NUM_DOCS)));
1:95c68de:       }
1:95c68de:     }
1:95c68de:   }
1:95c68de: 
1:aeb8c72:   @Test
1:131eb4a:   public void testJsonFormatting() throws Exception {
1:131eb4a:     Vector v = new SequentialAccessSparseVector(10);
1:131eb4a:     v.set(2, 3.1);
1:131eb4a:     v.set(4, 1.0);
1:131eb4a:     v.set(6, 8.1);
1:131eb4a:     v.set(7, -100);
1:131eb4a:     v.set(9, 12.2);
1:131eb4a:     String UNUSED = "UNUSED";
1:131eb4a:     String[] dictionary = {
1:131eb4a:         UNUSED, UNUSED, "two", UNUSED, "four", UNUSED, "six", "seven", UNUSED, "nine"
1:131eb4a:     };
1:131eb4a: 
1:131eb4a:     assertEquals("sorted json form incorrect: ", "{nine:12.2,six:8.1,two:3.1}",
1:131eb4a:         VectorHelper.vectorToJson(v, dictionary, 3, true));
1:131eb4a:     assertEquals("unsorted form incorrect: ", "{two:3.1,four:1.0}",
1:131eb4a:         VectorHelper.vectorToJson(v, dictionary, 2, false));
1:f862e2b:     assertEquals("sorted json form incorrect: ", "{nine:12.2,six:8.1,two:3.1,four:1.0}",
1:f862e2b:         VectorHelper.vectorToJson(v, dictionary, 4, true));
1:f862e2b:     assertEquals("sorted json form incorrect: ", "{nine:12.2,six:8.1,two:3.1,four:1.0,seven:-100.0}",
1:f862e2b:         VectorHelper.vectorToJson(v, dictionary, 5, true));
1:f862e2b:     assertEquals("sorted json form incorrect: ", "{nine:12.2,six:8.1}",
1:f862e2b:         VectorHelper.vectorToJson(v, dictionary, 2, true));
1:f862e2b:     assertEquals("unsorted form incorrect: ", "{two:3.1,four:1.0}",
1:f862e2b:         VectorHelper.vectorToJson(v, dictionary, 2, false));
1:131eb4a:   }
1:cfc3155: 
1:cfc3155:   @Test
1:cfc3155:   public void testTopEntries() throws Exception {
1:cfc3155:     Vector v = new SequentialAccessSparseVector(10);
1:cfc3155:     v.set(2, 3.1);
1:cfc3155:     v.set(4, 1.0);
1:cfc3155:     v.set(6, 8.1);
1:cfc3155:     v.set(7, -100);
1:cfc3155:     v.set(9, 12.2);
1:cfc3155:     v.set(1, 0.0);
1:cfc3155:     v.set(3, 0.0);
1:cfc3155:     v.set(8, 2.7);
1:8c539d2:     // check if sizeOFNonZeroElementsInVector = maxEntries
1:cfc3155:     assertEquals(6, VectorHelper.topEntries(v, 6).size());
1:8c539d2:     // check if sizeOfNonZeroElementsInVector < maxEntries
1:cfc3155:     assertTrue(VectorHelper.topEntries(v, 9).size() < 9);
1:8c539d2:     // check if sizeOfNonZeroElementsInVector > maxEntries
1:85f9ece:     assertTrue(VectorHelper.topEntries(v, 5).size() < v.getNumNonZeroElements());
1:cfc3155:   }
1:aeb8c72: 
1:051cbcf:   @Test
1:aeb8c72:   public void testTopEntriesWhenAllZeros() throws Exception {
1:aeb8c72:     Vector v = new SequentialAccessSparseVector(10);
1:aeb8c72:     v.set(2, 0.0);
1:aeb8c72:     v.set(4, 0.0);
1:aeb8c72:     v.set(6, 0.0);
1:aeb8c72:     v.set(7, 0);
1:aeb8c72:     v.set(9, 0.0);
1:aeb8c72:     v.set(1, 0.0);
1:aeb8c72:     v.set(3, 0.0);
1:aeb8c72:     v.set(8, 0.0);
1:aeb8c72:     assertEquals(0, VectorHelper.topEntries(v, 6).size());
1:aeb8c72:   }
1:95c68de: 
1:95c68de:   @Test
1:95c68de:   public void testLoadTermDictionary() throws Exception {
1:95c68de:     // With indices higher than dictionary size
1:95c68de:     VectorHelper.loadTermDictionary(conf, inputPathOne.toString());
1:95c68de:     // With dictionary size higher than indices
1:95c68de:     VectorHelper.loadTermDictionary(conf, inputPathTwo.toString());
1:95c68de:   }
1:131eb4a: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     try (SequenceFile.Writer writer =
1:              new SequenceFile.Writer(fs, conf, inputPathOne, Text.class, IntWritable.class)) {
1:     try (SequenceFile.Writer writer =
1:              new SequenceFile.Writer(fs, conf, inputPathTwo, Text.class, IntWritable.class)) {
/////////////////////////////////////////////////////////////////////////
1:     assertTrue(VectorHelper.topEntries(v, 5).size() < v.getNumNonZeroElements());
author:smarthi
-------------------------------------------------------------------------------
commit:95c68de
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Text;
1: import org.apache.mahout.common.RandomUtils;
1: import org.junit.Before;
0: import java.util.Random;
1: 
1:   private static final int NUM_DOCS = 100;
1: 
1:   private Path inputPathOne;
1:   private Path inputPathTwo;
1: 
1:   private Configuration conf;
1: 
1:   @Override
1:   @Before
1:   public void setUp() throws Exception {
1:     super.setUp();
1:     conf = getConfiguration();
1: 
1:     inputPathOne = getTestTempFilePath("documents/docs-one.file");
1:     FileSystem fs = FileSystem.get(inputPathOne.toUri(), conf);
0:     SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, inputPathOne, Text.class, IntWritable.class);
0:     try {
1:       Random rd = RandomUtils.getRandom();
1:       for (int i = 0; i < NUM_DOCS; i++) {
1:         // Make all indices higher than dictionary size
1:         writer.append(new Text("Document::ID::" + i), new IntWritable(NUM_DOCS + rd.nextInt(NUM_DOCS)));
1:       }
0:     } finally {
0:       Closeables.close(writer, false);
1:     }
1: 
1:     inputPathTwo = getTestTempFilePath("documents/docs-two.file");
1:     fs = FileSystem.get(inputPathTwo.toUri(), conf);
0:     writer = new SequenceFile.Writer(fs, conf, inputPathTwo, Text.class, IntWritable.class);
0:     try {
1:       Random rd = RandomUtils.getRandom();
1:       for (int i = 0; i < NUM_DOCS; i++) {
1:         // Keep indices within number of documents
1:         writer.append(new Text("Document::ID::" + i), new IntWritable(rd.nextInt(NUM_DOCS)));
1:       }
0:     } finally {
0:       Closeables.close(writer, false);
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test
1:   public void testLoadTermDictionary() throws Exception {
1:     // With indices higher than dictionary size
1:     VectorHelper.loadTermDictionary(conf, inputPathOne.toString());
1:     // With dictionary size higher than indices
1:     VectorHelper.loadTermDictionary(conf, inputPathTwo.toString());
1:   }
commit:8c539d2
/////////////////////////////////////////////////////////////////////////
1:     // check if sizeOFNonZeroElementsInVector = maxEntries
1:     // check if sizeOfNonZeroElementsInVector < maxEntries
1:     // check if sizeOfNonZeroElementsInVector > maxEntries
/////////////////////////////////////////////////////////////////////////
commit:aeb8c72
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testTopEntriesWhenAllZeros() throws Exception {
1:     Vector v = new SequentialAccessSparseVector(10);
1:     v.set(2, 0.0);
1:     v.set(4, 0.0);
1:     v.set(6, 0.0);
1:     v.set(7, 0);
1:     v.set(9, 0.0);
1:     v.set(1, 0.0);
1:     v.set(3, 0.0);
1:     v.set(8, 0.0);
1:     assertEquals(0, VectorHelper.topEntries(v, 6).size());
1:   }
1: 
commit:cfc3155
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Iterables;
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testTopEntries() throws Exception {
1:     Vector v = new SequentialAccessSparseVector(10);
1:     v.set(2, 3.1);
1:     v.set(4, 1.0);
1:     v.set(6, 8.1);
1:     v.set(7, -100);
1:     v.set(9, 12.2);
1:     v.set(1, 0.0);
1:     v.set(3, 0.0);
1:     v.set(8, 2.7);
1:     assertEquals(6, VectorHelper.topEntries(v, 6).size());
0:     // when sizeOfNonZeroElementsInVector < maxEntries
1:     assertTrue(VectorHelper.topEntries(v, 9).size() < 9);
0:     // when sizeOfNonZeroElementsInVector > maxEntries
0:     assertTrue(VectorHelper.topEntries(v, 5).size() < Iterables.size(v.nonZeroes()));
1:   }
1: 
author:sslavic
-------------------------------------------------------------------------------
commit:b381afd
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.mahout.common.MahoutTestCase;
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:f862e2b
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("sorted json form incorrect: ", "{nine:12.2,six:8.1,two:3.1,four:1.0}",
1:         VectorHelper.vectorToJson(v, dictionary, 4, true));
1:     assertEquals("sorted json form incorrect: ", "{nine:12.2,six:8.1,two:3.1,four:1.0,seven:-100.0}",
1:         VectorHelper.vectorToJson(v, dictionary, 5, true));
1:     assertEquals("sorted json form incorrect: ", "{nine:12.2,six:8.1}",
1:         VectorHelper.vectorToJson(v, dictionary, 2, true));
1:     assertEquals("unsorted form incorrect: ", "{two:3.1,four:1.0}",
1:         VectorHelper.vectorToJson(v, dictionary, 2, false));
commit:131eb4a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.vectors;
1: 
0: import junit.framework.TestCase;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: 
0: public class VectorHelperTest extends TestCase {
1: 
1:   public void testJsonFormatting() throws Exception {
1:     Vector v = new SequentialAccessSparseVector(10);
1:     v.set(2, 3.1);
1:     v.set(4, 1.0);
1:     v.set(6, 8.1);
1:     v.set(7, -100);
1:     v.set(9, 12.2);
1:     String UNUSED = "UNUSED";
1:     String[] dictionary = {
1:         UNUSED, UNUSED, "two", UNUSED, "four", UNUSED, "six", "seven", UNUSED, "nine"
1:     };
1: 
1:     assertEquals("sorted json form incorrect: ", "{nine:12.2,six:8.1,two:3.1}",
1:         VectorHelper.vectorToJson(v, dictionary, 3, true));
1:     assertEquals("unsorted form incorrect: ", "{two:3.1,four:1.0}",
1:         VectorHelper.vectorToJson(v, dictionary, 2, false));
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
0: import org.apache.mahout.utils.MahoutTestCase;
1: import org.junit.Test;
1: public final class VectorHelperTest extends MahoutTestCase {
1:   @Test
============================================================================