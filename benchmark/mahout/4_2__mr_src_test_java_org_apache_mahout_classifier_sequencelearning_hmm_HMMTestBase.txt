1:f3a9cc1: /**
1:f3a9cc1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f3a9cc1:  * contributor license agreements.  See the NOTICE file distributed with
1:f3a9cc1:  * this work for additional information regarding copyright ownership.
1:f3a9cc1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f3a9cc1:  * (the "License"); you may not use this file except in compliance with
1:f3a9cc1:  * the License.  You may obtain a copy of the License at
1:f3a9cc1:  *
1:f3a9cc1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f3a9cc1:  *
1:f3a9cc1:  * Unless required by applicable law or agreed to in writing, software
1:f3a9cc1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f3a9cc1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f3a9cc1:  * See the License for the specific language governing permissions and
1:f3a9cc1:  * limitations under the License.
1:f3a9cc1:  */
1:f3a9cc1: 
1:27d33a2: package org.apache.mahout.classifier.sequencelearning.hmm;
1:27d33a2: 
1:27d33a2: import org.apache.mahout.common.MahoutTestCase;
1:27d33a2: import org.apache.mahout.math.DenseMatrix;
1:27d33a2: import org.apache.mahout.math.DenseVector;
1:27d33a2: 
1:27d33a2: public class HMMTestBase extends MahoutTestCase {
1:27d33a2: 
1:d53cf4a:   private HmmModel model;
1:d53cf4a:   private final int[] sequence = {1, 0, 2, 2, 0, 0, 1};
1:27d33a2: 
1:27d33a2:   /**
1:27d33a2:    * We initialize a new HMM model using the following parameters # hidden
1:27d33a2:    * states: 4 ("H0","H1","H2","H3") # output states: 3 ("O0","O1","O2") #
1:27d33a2:    * transition matrix to: H0 H1 H2 H3 from: H0 0.5 0.1 0.1 0.3 H1 0.4 0.4 0.1
1:27d33a2:    * 0.1 H2 0.1 0.0 0.8 0.1 H3 0.1 0.1 0.1 0.7 # output matrix to: O0 O1 O2
1:27d33a2:    * from: H0 0.8 0.1 0.1 H1 0.6 0.1 0.3 H2 0.1 0.8 0.1 H3 0.0 0.1 0.9 # initial
1:27d33a2:    * probabilities H0 0.2
1:27d33a2:    * <p/>
1:27d33a2:    * H1 0.1 H2 0.4 H3 0.3
1:27d33a2:    * <p/>
1:27d33a2:    * We also intialize an observation sequence: "O1" "O0" "O2" "O2" "O0" "O0"
1:27d33a2:    * "O1"
1:27d33a2:    */
1:27d33a2: 
1:27d33a2:   @Override
1:27d33a2:   public void setUp() throws Exception {
1:27d33a2:     super.setUp();
1:27d33a2:     // intialize the hidden/output state names
1:d53cf4a:     String[] hiddenNames = {"H0", "H1", "H2", "H3"};
1:d53cf4a:     String[] outputNames = {"O0", "O1", "O2"};
1:27d33a2:     // initialize the transition matrix
1:d53cf4a:     double[][] transitionP = {{0.5, 0.1, 0.1, 0.3}, {0.4, 0.4, 0.1, 0.1},
1:27d33a2:         {0.1, 0.0, 0.8, 0.1}, {0.1, 0.1, 0.1, 0.7}};
1:27d33a2:     // initialize the emission matrix
1:d53cf4a:     double[][] emissionP = {{0.8, 0.1, 0.1}, {0.6, 0.1, 0.3},
1:27d33a2:         {0.1, 0.8, 0.1}, {0.0, 0.1, 0.9}};
1:27d33a2:     // initialize the initial probability vector
1:d53cf4a:     double[] initialP = {0.2, 0.1, 0.4, 0.3};
1:27d33a2:     // now generate the model
1:27d33a2:     model = new HmmModel(new DenseMatrix(transitionP), new DenseMatrix(
1:27d33a2:         emissionP), new DenseVector(initialP));
1:27d33a2:     model.registerHiddenStateNames(hiddenNames);
1:27d33a2:     model.registerOutputStateNames(outputNames);
1:27d33a2:     // make sure the model is valid :)
1:27d33a2:     HmmUtils.validate(model);
1:27d33a2:   }
1:27d33a2: 
1:d53cf4a:   protected HmmModel getModel() {
1:d53cf4a:     return model;
1:d53cf4a:   }
1:d53cf4a: 
1:d53cf4a:   protected int[] getSequence() {
1:d53cf4a:     return sequence;
1:d53cf4a:   }
1:27d33a2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:f3a9cc1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:d53cf4a
/////////////////////////////////////////////////////////////////////////
1:   private HmmModel model;
1:   private final int[] sequence = {1, 0, 2, 2, 0, 0, 1};
/////////////////////////////////////////////////////////////////////////
1:     String[] hiddenNames = {"H0", "H1", "H2", "H3"};
1:     String[] outputNames = {"O0", "O1", "O2"};
1:     double[][] transitionP = {{0.5, 0.1, 0.1, 0.3}, {0.4, 0.4, 0.1, 0.1},
1:     double[][] emissionP = {{0.8, 0.1, 0.1}, {0.6, 0.1, 0.3},
1:     double[] initialP = {0.2, 0.1, 0.4, 0.3};
/////////////////////////////////////////////////////////////////////////
1:   protected HmmModel getModel() {
1:     return model;
1:   }
1: 
1:   protected int[] getSequence() {
1:     return sequence;
1:   }
author:Isabel Drost
-------------------------------------------------------------------------------
commit:27d33a2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.sequencelearning.hmm;
1: 
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: 
1: public class HMMTestBase extends MahoutTestCase {
1: 
0:   protected HmmModel model;
0:   protected int[] sequence = {1, 0, 2, 2, 0, 0, 1};
1: 
1:   /**
1:    * We initialize a new HMM model using the following parameters # hidden
1:    * states: 4 ("H0","H1","H2","H3") # output states: 3 ("O0","O1","O2") #
1:    * transition matrix to: H0 H1 H2 H3 from: H0 0.5 0.1 0.1 0.3 H1 0.4 0.4 0.1
1:    * 0.1 H2 0.1 0.0 0.8 0.1 H3 0.1 0.1 0.1 0.7 # output matrix to: O0 O1 O2
1:    * from: H0 0.8 0.1 0.1 H1 0.6 0.1 0.3 H2 0.1 0.8 0.1 H3 0.0 0.1 0.9 # initial
1:    * probabilities H0 0.2
1:    * <p/>
1:    * H1 0.1 H2 0.4 H3 0.3
1:    * <p/>
1:    * We also intialize an observation sequence: "O1" "O0" "O2" "O2" "O0" "O0"
1:    * "O1"
1:    */
1: 
1:   @Override
1:   public void setUp() throws Exception {
1:     super.setUp();
1:     // intialize the hidden/output state names
0:     String hiddenNames[] = {"H0", "H1", "H2", "H3"};
0:     String outputNames[] = {"O0", "O1", "O2"};
1:     // initialize the transition matrix
0:     double transitionP[][] = {{0.5, 0.1, 0.1, 0.3}, {0.4, 0.4, 0.1, 0.1},
1:         {0.1, 0.0, 0.8, 0.1}, {0.1, 0.1, 0.1, 0.7}};
1:     // initialize the emission matrix
0:     double emissionP[][] = {{0.8, 0.1, 0.1}, {0.6, 0.1, 0.3},
1:         {0.1, 0.8, 0.1}, {0.0, 0.1, 0.9}};
1:     // initialize the initial probability vector
0:     double initialP[] = {0.2, 0.1, 0.4, 0.3};
1:     // now generate the model
1:     model = new HmmModel(new DenseMatrix(transitionP), new DenseMatrix(
1:         emissionP), new DenseVector(initialP));
1:     model.registerHiddenStateNames(hiddenNames);
1:     model.registerOutputStateNames(outputNames);
1:     // make sure the model is valid :)
1:     HmmUtils.validate(model);
1:   }
1: 
1: }
============================================================================