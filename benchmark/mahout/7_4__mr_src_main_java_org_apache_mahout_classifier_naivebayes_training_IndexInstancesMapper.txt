1:e3fb0c4: /**
1:d8d721a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d8d721a:  * contributor license agreements.  See the NOTICE file distributed with
1:d8d721a:  * this work for additional information regarding copyright ownership.
1:d8d721a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d8d721a:  * (the "License"); you may not use this file except in compliance with
1:d8d721a:  * the License.  You may obtain a copy of the License at
1:d8d721a:  *
1:d8d721a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d8d721a:  *
1:d8d721a:  * Unless required by applicable law or agreed to in writing, software
1:d8d721a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d8d721a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d8d721a:  * See the License for the specific language governing permissions and
1:d8d721a:  * limitations under the License.
1:e3fb0c4:  */
5:e3fb0c4: 
1:e3fb0c4: package org.apache.mahout.classifier.naivebayes.training;
1:e3fb0c4: 
1:e3fb0c4: import java.io.IOException;
1:229aeff: import java.util.regex.Pattern;
1:e3fb0c4: 
1:e3fb0c4: import org.apache.hadoop.io.IntWritable;
1:d8d721a: import org.apache.hadoop.io.Text;
1:e3fb0c4: import org.apache.hadoop.mapreduce.Mapper;
1:d8d721a: import org.apache.mahout.classifier.naivebayes.BayesUtils;
1:e3fb0c4: import org.apache.mahout.math.VectorWritable;
1:d8d721a: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1:e3fb0c4: 
1:d8d721a: public class IndexInstancesMapper extends Mapper<Text, VectorWritable, IntWritable, VectorWritable> {
1:d8d721a: 
1:229aeff:   private static final Pattern SLASH = Pattern.compile("/");
1:229aeff: 
1:e73fdb8:   enum Counter { SKIPPED_INSTANCES }
1:d8d721a: 
1:d8d721a:   private OpenObjectIntHashMap<String> labelIndex;
1:d8d721a: 
2:e3fb0c4:   @Override
1:d8d721a:   protected void setup(Context ctx) throws IOException, InterruptedException {
1:d8d721a:     super.setup(ctx);
1:d8d721a:     labelIndex = BayesUtils.readIndexFromCache(ctx.getConfiguration());
1:d8d721a:   }
1:d8d721a: 
1:d8d721a:   @Override
1:d8d721a:   protected void map(Text labelText, VectorWritable instance, Context ctx) throws IOException, InterruptedException {
1:229aeff:     String label = SLASH.split(labelText.toString())[1];
1:d8d721a:     if (labelIndex.containsKey(label)) {
1:d8d721a:       ctx.write(new IntWritable(labelIndex.get(label)), instance);
1:d8d721a:     } else {
1:d8d721a:       ctx.getCounter(Counter.SKIPPED_INSTANCES).increment(1);
1:d8d721a:     }
3:e3fb0c4:   }
1:e3fb0c4: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:e73fdb8
/////////////////////////////////////////////////////////////////////////
1:   enum Counter { SKIPPED_INSTANCES }
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Pattern;
/////////////////////////////////////////////////////////////////////////
1:   private static final Pattern SLASH = Pattern.compile("/");
1: 
/////////////////////////////////////////////////////////////////////////
1:     String label = SLASH.split(labelText.toString())[1];
author:Robin Anil
-------------------------------------------------------------------------------
commit:a344c6b
/////////////////////////////////////////////////////////////////////////
0:     String label = labelText.toString().split("/")[1]; 
commit:d8d721a
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Text;
1: import org.apache.mahout.classifier.naivebayes.BayesUtils;
1: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1: public class IndexInstancesMapper extends Mapper<Text, VectorWritable, IntWritable, VectorWritable> {
1: 
0:   public enum Counter { SKIPPED_INSTANCES }
1: 
1:   private OpenObjectIntHashMap<String> labelIndex;
1: 
1:   protected void setup(Context ctx) throws IOException, InterruptedException {
1:     super.setup(ctx);
1:     labelIndex = BayesUtils.readIndexFromCache(ctx.getConfiguration());
1:   }
1: 
1:   @Override
1:   protected void map(Text labelText, VectorWritable instance, Context ctx) throws IOException, InterruptedException {
0:     String label = labelText.toString();
1:     if (labelIndex.containsKey(label)) {
1:       ctx.write(new IntWritable(labelIndex.get(label)), instance);
1:     } else {
1:       ctx.getCounter(Counter.SKIPPED_INSTANCES).increment(1);
1:     }
commit:1526c5b
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
0:  * agreements. See the NOTICE file distributed with this work for additional information regarding
0:  * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance with the License. You may obtain a
0:  * copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License
0:  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
0:  * or implied. See the License for the specific language governing permissions and limitations under
0:  * the License.
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.MultiLabelVectorWritable;
0: public class IndexInstancesMapper
0:     extends Mapper<IntWritable, MultiLabelVectorWritable, IntWritable, VectorWritable> {
0:   protected void map(IntWritable key, MultiLabelVectorWritable instance, Context ctx)
0:       throws IOException, InterruptedException {
0:     VectorWritable vw = new VectorWritable(instance.getVector());
0:     ctx.write(new IntWritable(instance.getLabels()[0]), vw);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.classifier.naivebayes.BayesUtils;
/////////////////////////////////////////////////////////////////////////
0:     labelIndex = BayesUtils.readIndexFromCache(ctx.getConfiguration());
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e3fb0c4
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.naivebayes.training;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.hadoop.io.IntWritable;
0: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.math.VectorWritable;
0: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1: 
0: public class IndexInstancesMapper extends Mapper<Text, VectorWritable, IntWritable, VectorWritable> {
1: 
0:   public enum Counter { SKIPPED_INSTANCES }
1: 
0:   private OpenObjectIntHashMap<String> labelIndex;
1: 
1:   @Override
0:   protected void setup(Context ctx) throws IOException, InterruptedException {
0:     labelIndex = TrainUtils.readIndexFromCache(ctx.getConfiguration());
1:   }
1: 
1:   @Override
0:   protected void map(Text labelText, VectorWritable instance, Context ctx) throws IOException, InterruptedException {
0:     String label = labelText.toString();
0:     if (labelIndex.containsKey(label)) {
0:       ctx.write(new IntWritable(labelIndex.get(label)), instance);
0:     } else {
0:       ctx.getCounter(Counter.SKIPPED_INSTANCES).increment(1);
1:     }
1:   }
1: }
============================================================================