1:e6b4e35: /**
1:e6b4e35:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e6b4e35:  * contributor license agreements.  See the NOTICE file distributed with
1:e6b4e35:  * this work for additional information regarding copyright ownership.
1:e6b4e35:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e6b4e35:  * (the "License"); you may not use this file except in compliance with
1:e6b4e35:  * the License.  You may obtain a copy of the License at
1:e6b4e35:  *
1:e6b4e35:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e6b4e35:  *
1:e6b4e35:  * Unless required by applicable law or agreed to in writing, software
1:e6b4e35:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6b4e35:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6b4e35:  * See the License for the specific language governing permissions and
1:e6b4e35:  * limitations under the License.
1:e6b4e35:  */
2:e6b4e35: 
1:e6b4e35: package org.apache.mahout.math.stats;
1:e6b4e35: 
1:049e7dc: import org.apache.mahout.common.RandomUtils;
1:e6b4e35: import org.apache.mahout.math.DenseMatrix;
1:e6b4e35: import org.apache.mahout.math.DenseVector;
1:e6b4e35: import org.apache.mahout.math.Matrix;
1:02f8694: import org.apache.mahout.math.MatrixWritable;
1:e6b4e35: import org.apache.mahout.math.Vector;
1:02f8694: import org.apache.mahout.math.VectorWritable;
1:e6b4e35: 
1:02f8694: import java.io.DataInput;
1:02f8694: import java.io.DataOutput;
1:02f8694: import java.io.IOException;
1:e6b4e35: import java.util.Random;
1:e6b4e35: 
1:e6b4e35: /**
1:e6b4e35:  * Computes a running estimate of AUC (see http://en.wikipedia.org/wiki/Receiver_operating_characteristic).
1:e6b4e35:  * <p/>
1:e6b4e35:  * Since AUC is normally a global property of labeled scores, it is almost always computed in a
1:e6b4e35:  * batch fashion.  The probabilistic definition (the probability that a random element of one set
1:e6b4e35:  * has a higher score than a random element of another set) gives us a way to estimate this
1:e6b4e35:  * on-line.
1:02f8694:  *
1:e6b4e35:  * @see GroupedOnlineAuc
1:e6b4e35:  */
1:e6b4e35: public class GlobalOnlineAuc implements OnlineAuc {
1:e6b4e35:   enum ReplacementPolicy {
1:e6b4e35:     FIFO, FAIR, RANDOM
1:e6b4e35:   }
1:e6b4e35: 
1:e6b4e35:   // increasing this to 100 causes very small improvements in accuracy.  Decreasing it to 2
1:e6b4e35:   // causes substantial degradation for the FAIR and RANDOM policies, but almost no change
1:e6b4e35:   // for the FIFO policy
1:e6b4e35:   public static final int HISTORY = 10;
1:e6b4e35: 
1:e6b4e35:   // defines the exponential averaging window for results
1:e6b4e35:   private int windowSize = Integer.MAX_VALUE;
1:e6b4e35: 
1:e6b4e35:   // FIFO has distinctly the best properties as a policy.  See OnlineAucTest for details
1:e6b4e35:   private ReplacementPolicy policy = ReplacementPolicy.FIFO;
1:35032b8:   private final Random random = RandomUtils.getRandom();
1:02f8694:   private Matrix scores;
1:02f8694:   private Vector averages;
1:02f8694:   private Vector samples;
1:e6b4e35: 
1:e6b4e35:   public GlobalOnlineAuc() {
1:e6b4e35:     int numCategories = 2;
1:e6b4e35:     scores = new DenseMatrix(numCategories, HISTORY);
1:e6b4e35:     scores.assign(Double.NaN);
1:e6b4e35:     averages = new DenseVector(numCategories);
1:e6b4e35:     averages.assign(0.5);
1:e6b4e35:     samples = new DenseVector(numCategories);
1:e6b4e35:   }
1:e6b4e35: 
1:e6b4e35:   @Override
1:e6b4e35:   public double addSample(int category, String groupKey, double score) {
1:e6b4e35:     return addSample(category, score);
1:e6b4e35:   }
1:02f8694: 
1:e6b4e35:   @Override
1:e6b4e35:   public double addSample(int category, double score) {
1:e6b4e35:     int n = (int) samples.get(category);
1:e6b4e35:     if (n < HISTORY) {
1:e6b4e35:       scores.set(category, n, score);
1:e6b4e35:     } else {
1:e6b4e35:       switch (policy) {
1:e6b4e35:         case FIFO:
1:e6b4e35:           scores.set(category, n % HISTORY, score);
1:e6b4e35:           break;
1:e6b4e35:         case FAIR:
1:e6b4e35:           int j1 = random.nextInt(n + 1);
1:e6b4e35:           if (j1 < HISTORY) {
1:e6b4e35:             scores.set(category, j1, score);
1:e6b4e35:           }
1:e6b4e35:           break;
1:e6b4e35:         case RANDOM:
1:e6b4e35:           int j2 = random.nextInt(HISTORY);
1:e6b4e35:           scores.set(category, j2, score);
1:e6b4e35:           break;
1:61ae2e7:         default:
1:61ae2e7:           throw new IllegalStateException("Unknown policy: " + policy);
1:e6b4e35:       }
1:e6b4e35:     }
1:e6b4e35: 
1:e6b4e35:     samples.set(category, n + 1);
1:e6b4e35: 
1:e6b4e35:     if (samples.minValue() >= 1) {
1:e6b4e35:       // compare to previous scores for other category
1:e6b4e35:       Vector row = scores.viewRow(1 - category);
1:e6b4e35:       double m = 0.0;
1:e6b4e35:       double count = 0.0;
1:dc62944:       for (Vector.Element element : row.all()) {
1:e6b4e35:         double v = element.get();
1:e6b4e35:         if (Double.isNaN(v)) {
1:e6b4e35:           continue;
1:e6b4e35:         }
1:e6b4e35:         count++;
1:e6b4e35:         if (score > v) {
1:e6b4e35:           m++;
1:61ae2e7:           // } else if (score < v) {
1:e6b4e35:           // m += 0
1:e6b4e35:         } else if (score == v) {
1:e6b4e35:           m += 0.5;
1:e6b4e35:         }
1:e6b4e35:       }
1:61ae2e7:       averages.set(category, averages.get(category)
1:61ae2e7:         + (m / count - averages.get(category)) / Math.min(windowSize, samples.get(category)));
1:e6b4e35:     }
1:e6b4e35:     return auc();
1:e6b4e35:   }
1:e6b4e35: 
1:e6b4e35:   @Override
1:e6b4e35:   public double auc() {
1:e6b4e35:     // return an unweighted average of all averages.
1:e6b4e35:     return (1 - averages.get(0) + averages.get(1)) / 2;
1:e6b4e35:   }
1:e6b4e35: 
1:e6b4e35:   public double value() {
1:e6b4e35:     return auc();
1:e6b4e35:   }
1:e6b4e35: 
1:e6b4e35:   @Override
1:e6b4e35:   public void setPolicy(ReplacementPolicy policy) {
1:e6b4e35:     this.policy = policy;
1:e6b4e35:   }
1:e6b4e35: 
1:e6b4e35:   @Override
1:e6b4e35:   public void setWindowSize(int windowSize) {
1:e6b4e35:     this.windowSize = windowSize;
1:e6b4e35:   }
1:02f8694: 
1:02f8694:   @Override
1:02f8694:   public void write(DataOutput out) throws IOException {
1:02f8694:     out.writeInt(windowSize);
1:02f8694:     out.writeInt(policy.ordinal());
1:02f8694:     MatrixWritable.writeMatrix(out, scores);
1:02f8694:     VectorWritable.writeVector(out, averages);
1:02f8694:     VectorWritable.writeVector(out, samples);
1:02f8694:   }
1:02f8694: 
1:02f8694:   @Override
1:02f8694:   public void readFields(DataInput in) throws IOException {
1:02f8694:     windowSize = in.readInt();
1:02f8694:     policy = ReplacementPolicy.values()[in.readInt()];
1:02f8694: 
1:02f8694:     scores = MatrixWritable.readMatrix(in);
1:02f8694:     averages = VectorWritable.readVector(in);
1:02f8694:     samples = VectorWritable.readVector(in);
1:02f8694:   }
1:02f8694: 
1:e6b4e35: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1:       for (Vector.Element element : row.all()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:35032b8
/////////////////////////////////////////////////////////////////////////
1:   private final Random random = RandomUtils.getRandom();
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
0:   private final transient Random random = RandomUtils.getRandom();
commit:61ae2e7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         default:
1:           throw new IllegalStateException("Unknown policy: " + policy);
/////////////////////////////////////////////////////////////////////////
1:         // } else if (score < v) {
1:       averages.set(category, averages.get(category)
1:           + (m / count - averages.get(category)) / Math.min(windowSize, samples.get(category)));
author:Ted Dunning
-------------------------------------------------------------------------------
commit:02f8694
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.MatrixWritable;
1: import org.apache.mahout.math.VectorWritable;
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:   private Matrix scores;
1:   private Vector averages;
1:   private Vector samples;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:           // } else if (score < v) {
0:         + (m / count - averages.get(category)) / Math.min(windowSize, samples.get(category)));
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeInt(windowSize);
1:     out.writeInt(policy.ordinal());
1:     MatrixWritable.writeMatrix(out, scores);
1:     VectorWritable.writeVector(out, averages);
1:     VectorWritable.writeVector(out, samples);
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     windowSize = in.readInt();
1:     policy = ReplacementPolicy.values()[in.readInt()];
1: 
1:     scores = MatrixWritable.readMatrix(in);
1:     averages = VectorWritable.readVector(in);
1:     samples = VectorWritable.readVector(in);
1:   }
1: 
commit:e6b4e35
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.stats;
1: 
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: 
1: import java.util.Random;
1: 
1: /**
1:  * Computes a running estimate of AUC (see http://en.wikipedia.org/wiki/Receiver_operating_characteristic).
1:  * <p/>
1:  * Since AUC is normally a global property of labeled scores, it is almost always computed in a
1:  * batch fashion.  The probabilistic definition (the probability that a random element of one set
1:  * has a higher score than a random element of another set) gives us a way to estimate this
1:  * on-line.
1:  * @see GroupedOnlineAuc
1:  */
1: public class GlobalOnlineAuc implements OnlineAuc {
1:   enum ReplacementPolicy {
1:     FIFO, FAIR, RANDOM
1:   }
1: 
1:   // increasing this to 100 causes very small improvements in accuracy.  Decreasing it to 2
1:   // causes substantial degradation for the FAIR and RANDOM policies, but almost no change
1:   // for the FIFO policy
1:   public static final int HISTORY = 10;
1: 
1:   // defines the exponential averaging window for results
1:   private int windowSize = Integer.MAX_VALUE;
1: 
1:   // FIFO has distinctly the best properties as a policy.  See OnlineAucTest for details
1:   private ReplacementPolicy policy = ReplacementPolicy.FIFO;
0:   private transient Random random = org.apache.mahout.common.RandomUtils.getRandom();
0:   private final Matrix scores;
0:   private final Vector averages;
0:   private final Vector samples;
1: 
1:   public GlobalOnlineAuc() {
1:     int numCategories = 2;
1:     scores = new DenseMatrix(numCategories, HISTORY);
1:     scores.assign(Double.NaN);
1:     averages = new DenseVector(numCategories);
1:     averages.assign(0.5);
1:     samples = new DenseVector(numCategories);
1:   }
1: 
1:   @Override
0:   @SuppressWarnings({"UnusedDeclaration"})
1:   public double addSample(int category, String groupKey, double score) {
1:     return addSample(category, score);
1:   }
1:   
1:   @Override
1:   public double addSample(int category, double score) {
1:     int n = (int) samples.get(category);
1:     if (n < HISTORY) {
1:       scores.set(category, n, score);
1:     } else {
1:       switch (policy) {
1:         case FIFO:
1:           scores.set(category, n % HISTORY, score);
1:           break;
1:         case FAIR:
1:           int j1 = random.nextInt(n + 1);
1:           if (j1 < HISTORY) {
1:             scores.set(category, j1, score);
1:           }
1:           break;
1:         case RANDOM:
1:           int j2 = random.nextInt(HISTORY);
1:           scores.set(category, j2, score);
1:           break;
1:       }
1:     }
1: 
1:     samples.set(category, n + 1);
1: 
1:     if (samples.minValue() >= 1) {
1:       // compare to previous scores for other category
1:       Vector row = scores.viewRow(1 - category);
1:       double m = 0.0;
1:       double count = 0.0;
0:       for (Vector.Element element : row) {
1:         double v = element.get();
1:         if (Double.isNaN(v)) {
1:           continue;
1:         }
1:         count++;
1:         if (score > v) {
1:           m++;
0:         } else if (score < v) {
1:           // m += 0
1:         } else if (score == v) {
1:           m += 0.5;
1:         }
1:       }
0:       averages.set(category, averages.get(category) + (m / count - averages.get(category)) / Math.min(windowSize, samples.get(category)));
1:     }
1:     return auc();
1:   }
1: 
1:   @Override
1:   public double auc() {
1:     // return an unweighted average of all averages.
1:     return (1 - averages.get(0) + averages.get(1)) / 2;
1:   }
1: 
1:   public double value() {
1:     return auc();
1:   }
1: 
1:   @Override
1:   public void setPolicy(ReplacementPolicy policy) {
1:     this.policy = policy;
1:   }
1: 
1:   @Override
1:   public void setWindowSize(int windowSize) {
1:     this.windowSize = windowSize;
1:   }
1: }
============================================================================