1:d0dbdfb: /**
1:d0dbdfb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d0dbdfb:  * contributor license agreements.  See the NOTICE file distributed with
1:d0dbdfb:  * this work for additional information regarding copyright ownership.
1:d0dbdfb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d0dbdfb:  * (the "License"); you may not use this file except in compliance with
1:d0dbdfb:  * the License.  You may obtain a copy of the License at
1:d0dbdfb:  *
1:d0dbdfb:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d0dbdfb:  *
1:d0dbdfb:  * Unless required by applicable law or agreed to in writing, software
1:d0dbdfb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d0dbdfb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d0dbdfb:  * See the License for the specific language governing permissions and
1:d0dbdfb:  * limitations under the License.
1:d0dbdfb:  */
2:d0dbdfb: 
1:d0dbdfb: package org.apache.mahout.classifier.sequencelearning.hmm;
1:d0dbdfb: 
1:87d4b2e: import java.io.DataOutputStream;
1:87d4b2e: import java.io.FileInputStream;
1:87d4b2e: import java.io.FileOutputStream;
1:87d4b2e: import java.io.IOException;
1:85f9ece: import java.util.ArrayList;
1:87d4b2e: import java.util.Date;
1:87d4b2e: import java.util.List;
1:87d4b2e: import java.util.Scanner;
1:87d4b2e: 
1:d0dbdfb: import org.apache.commons.cli2.CommandLine;
1:d0dbdfb: import org.apache.commons.cli2.Group;
1:d0dbdfb: import org.apache.commons.cli2.Option;
1:d0dbdfb: import org.apache.commons.cli2.OptionException;
1:d0dbdfb: import org.apache.commons.cli2.builder.ArgumentBuilder;
1:d0dbdfb: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1:d0dbdfb: import org.apache.commons.cli2.builder.GroupBuilder;
1:d0dbdfb: import org.apache.commons.cli2.commandline.Parser;
1:d0dbdfb: import org.apache.mahout.common.CommandLineUtil;
1:763c94c: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1:d0dbdfb: 
1:d0dbdfb: /**
1:d0dbdfb:  * A class for EM training of HMM from console
1:d0dbdfb:  */
1:d0dbdfb: public final class BaumWelchTrainer {
1:d0dbdfb: 
1:d0dbdfb:   private BaumWelchTrainer() {
1:d0dbdfb:   }
1:d0dbdfb: 
1:d0dbdfb:   public static void main(String[] args) throws IOException {
1:d0dbdfb:     DefaultOptionBuilder optionBuilder = new DefaultOptionBuilder();
1:d0dbdfb:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:d0dbdfb: 
1:763c94c:     Option inputOption = DefaultOptionCreator.inputOption().create();
1:d0dbdfb: 
1:763c94c:     Option outputOption = DefaultOptionCreator.outputOption().create();
1:d0dbdfb: 
1:d0dbdfb:     Option stateNumberOption = optionBuilder.withLongName("nrOfHiddenStates").
1:d0dbdfb:       withDescription("Number of hidden states").
1:d0dbdfb:       withShortName("nh").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
1:d0dbdfb:       withName("number").create()).withRequired(true).create();
1:d0dbdfb: 
1:d0dbdfb:     Option observedStateNumberOption = optionBuilder.withLongName("nrOfObservedStates").
1:d0dbdfb:       withDescription("Number of observed states").
1:d0dbdfb:       withShortName("no").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
1:d0dbdfb:       withName("number").create()).withRequired(true).create();
1:d0dbdfb: 
1:d0dbdfb:     Option epsilonOption = optionBuilder.withLongName("epsilon").
1:d0dbdfb:       withDescription("Convergence threshold").
1:d0dbdfb:       withShortName("e").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
1:d0dbdfb:       withName("number").create()).withRequired(true).create();
1:d0dbdfb: 
1:d0dbdfb:     Option iterationsOption = optionBuilder.withLongName("max-iterations").
1:d0dbdfb:       withDescription("Maximum iterations number").
1:d0dbdfb:       withShortName("m").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
1:d0dbdfb:       withName("number").create()).withRequired(true).create();
1:d0dbdfb: 
1:d0dbdfb:     Group optionGroup = new GroupBuilder().withOption(inputOption).
1:d0dbdfb:       withOption(outputOption).withOption(stateNumberOption).withOption(observedStateNumberOption).
1:d0dbdfb:       withOption(epsilonOption).withOption(iterationsOption).
1:d0dbdfb:       withName("Options").create();
1:d0dbdfb: 
3:d0dbdfb:     try {
1:d0dbdfb:       Parser parser = new Parser();
1:d0dbdfb:       parser.setGroup(optionGroup);
1:d0dbdfb:       CommandLine commandLine = parser.parse(args);
1:d0dbdfb: 
1:d0dbdfb:       String input = (String) commandLine.getValue(inputOption);
1:d0dbdfb:       String output = (String) commandLine.getValue(outputOption);
1:d0dbdfb: 
1:d0dbdfb:       int nrOfHiddenStates = Integer.parseInt((String) commandLine.getValue(stateNumberOption));
1:d0dbdfb:       int nrOfObservedStates = Integer.parseInt((String) commandLine.getValue(observedStateNumberOption));
1:d0dbdfb: 
1:d0dbdfb:       double epsilon = Double.parseDouble((String) commandLine.getValue(epsilonOption));
1:d0dbdfb:       int maxIterations = Integer.parseInt((String) commandLine.getValue(iterationsOption));
1:d0dbdfb: 
1:d0dbdfb:       //constructing random-generated HMM
1:d0dbdfb:       HmmModel model = new HmmModel(nrOfHiddenStates, nrOfObservedStates, new Date().getTime());
1:85f9ece:       List<Integer> observations = new ArrayList<>();
1:d0dbdfb: 
1:d0dbdfb:       //reading observations
1:87c15be:       try (Scanner scanner = new Scanner(new FileInputStream(input), "UTF-8")) {
1:d0dbdfb:         while (scanner.hasNextInt()) {
1:d0dbdfb:           observations.add(scanner.nextInt());
1:d0dbdfb:         }
1:d0dbdfb:       }
1:d0dbdfb: 
1:d0dbdfb:       int[] observationsArray = new int[observations.size()];
1:d0dbdfb:       for (int i = 0; i < observations.size(); ++i) {
1:d0dbdfb:         observationsArray[i] = observations.get(i);
1:d0dbdfb:       }
1:d0dbdfb: 
1:d0dbdfb:       //training
1:d0dbdfb:       HmmModel trainedModel = HmmTrainer.trainBaumWelch(model,
1:d0dbdfb:         observationsArray, epsilon, maxIterations, true);
1:d0dbdfb: 
1:d0dbdfb:       //serializing trained model
1:85f9ece:       try (DataOutputStream stream = new DataOutputStream(new FileOutputStream(output))){
1:d0dbdfb:         LossyHmmSerializer.serialize(trainedModel, stream);
1:d0dbdfb:       }
1:d0dbdfb: 
1:d0dbdfb:       //printing tranied model
1:d0dbdfb:       System.out.println("Initial probabilities: ");
1:1499411:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i) {
1:d0dbdfb:         System.out.print(i + " ");
1:1499411:       }
1:d0dbdfb:       System.out.println();
1:1499411:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i) {
1:d0dbdfb:         System.out.print(trainedModel.getInitialProbabilities().get(i) + " ");
1:1499411:       }
1:d0dbdfb:       System.out.println();
1:d0dbdfb: 
1:d0dbdfb:       System.out.println("Transition matrix:");
1:d0dbdfb:       System.out.print("  ");
1:1499411:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i) {
1:d0dbdfb:         System.out.print(i + " ");
1:1499411:       }
1:d0dbdfb:       System.out.println();
1:d0dbdfb:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i) {
1:d0dbdfb:         System.out.print(i + " ");
1:d0dbdfb:         for (int j = 0; j < trainedModel.getNrOfHiddenStates(); ++j) {
1:d0dbdfb:           System.out.print(trainedModel.getTransitionMatrix().get(i, j) + " ");
1:d0dbdfb:         }
1:d0dbdfb:         System.out.println();
1:d0dbdfb:       }
1:d0dbdfb:       System.out.println("Emission matrix: ");
1:d0dbdfb:       System.out.print("  ");
1:1499411:       for (int i = 0; i < trainedModel.getNrOfOutputStates(); ++i) {
1:d0dbdfb:         System.out.print(i + " ");
1:1499411:       }
1:d0dbdfb:       System.out.println();
1:d0dbdfb:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i) {
1:d0dbdfb:         System.out.print(i + " ");
1:d0dbdfb:         for (int j = 0; j < trainedModel.getNrOfOutputStates(); ++j) {
1:d0dbdfb:           System.out.print(trainedModel.getEmissionMatrix().get(i, j) + " ");
1:d0dbdfb:         }
1:d0dbdfb:         System.out.println();
1:d0dbdfb:       }
1:d0dbdfb:     } catch (OptionException e) {
1:d0dbdfb:       CommandLineUtil.printHelp(optionGroup);
1:d0dbdfb:     }
1:d0dbdfb:   }
1:d0dbdfb: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:       List<Integer> observations = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:       try (DataOutputStream stream = new DataOutputStream(new FileOutputStream(output))){
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:       try (Scanner scanner = new Scanner(new FileInputStream(input), "UTF-8")) {
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataOutputStream;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.util.Date;
1: import java.util.List;
1: import java.util.Scanner;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Closeables.close(stream, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:         Closeables.close(stream, true);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:       List<Integer> observations = Lists.newArrayList();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0:       Scanner scanner = new Scanner(new FileInputStream(input), "UTF-8");
commit:763c94c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.commandline.DefaultOptionCreator;
/////////////////////////////////////////////////////////////////////////
1:     Option inputOption = DefaultOptionCreator.inputOption().create();
1:     Option outputOption = DefaultOptionCreator.outputOption().create();
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i) {
1:       }
1:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i) {
1:       }
1:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i) {
1:       }
/////////////////////////////////////////////////////////////////////////
1:       for (int i = 0; i < trainedModel.getNrOfOutputStates(); ++i) {
1:       }
commit:d0dbdfb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sequencelearning.hmm;
1: 
0: import com.google.common.io.Closeables;
1: import org.apache.commons.cli2.CommandLine;
1: import org.apache.commons.cli2.Group;
1: import org.apache.commons.cli2.Option;
1: import org.apache.commons.cli2.OptionException;
1: import org.apache.commons.cli2.builder.ArgumentBuilder;
1: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1: import org.apache.commons.cli2.builder.GroupBuilder;
1: import org.apache.commons.cli2.commandline.Parser;
1: import org.apache.mahout.common.CommandLineUtil;
1: 
0: import java.io.DataOutputStream;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Date;
0: import java.util.List;
0: import java.util.Scanner;
1: 
1: /**
1:  * A class for EM training of HMM from console
1:  */
1: public final class BaumWelchTrainer {
1: 
1:   private BaumWelchTrainer() {
1:   }
1: 
1:   public static void main(String[] args) throws IOException {
1:     DefaultOptionBuilder optionBuilder = new DefaultOptionBuilder();
1:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1: 
0:     Option inputOption = optionBuilder.withLongName("input").
0:       withDescription("Text file with space-separated integers to train on").
0:       withShortName("i").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
0:       withName("path").create()).withRequired(true).create();
1: 
0:     Option outputOption = optionBuilder.withLongName("output").
0:       withDescription("Path trained HMM model should be serialized to").
0:       withShortName("o").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
0:       withName("path").create()).withRequired(true).create();
1: 
1:     Option stateNumberOption = optionBuilder.withLongName("nrOfHiddenStates").
1:       withDescription("Number of hidden states").
1:       withShortName("nh").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
1:       withName("number").create()).withRequired(true).create();
1: 
1:     Option observedStateNumberOption = optionBuilder.withLongName("nrOfObservedStates").
1:       withDescription("Number of observed states").
1:       withShortName("no").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
1:       withName("number").create()).withRequired(true).create();
1: 
1:     Option epsilonOption = optionBuilder.withLongName("epsilon").
1:       withDescription("Convergence threshold").
1:       withShortName("e").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
1:       withName("number").create()).withRequired(true).create();
1: 
1:     Option iterationsOption = optionBuilder.withLongName("max-iterations").
1:       withDescription("Maximum iterations number").
1:       withShortName("m").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
1:       withName("number").create()).withRequired(true).create();
1: 
1:     Group optionGroup = new GroupBuilder().withOption(inputOption).
1:       withOption(outputOption).withOption(stateNumberOption).withOption(observedStateNumberOption).
1:       withOption(epsilonOption).withOption(iterationsOption).
1:       withName("Options").create();
1: 
1:     try {
1:       Parser parser = new Parser();
1:       parser.setGroup(optionGroup);
1:       CommandLine commandLine = parser.parse(args);
1: 
1:       String input = (String) commandLine.getValue(inputOption);
1:       String output = (String) commandLine.getValue(outputOption);
1: 
1:       int nrOfHiddenStates = Integer.parseInt((String) commandLine.getValue(stateNumberOption));
1:       int nrOfObservedStates = Integer.parseInt((String) commandLine.getValue(observedStateNumberOption));
1: 
1:       double epsilon = Double.parseDouble((String) commandLine.getValue(epsilonOption));
1:       int maxIterations = Integer.parseInt((String) commandLine.getValue(iterationsOption));
1: 
1:       //constructing random-generated HMM
1:       HmmModel model = new HmmModel(nrOfHiddenStates, nrOfObservedStates, new Date().getTime());
0:       List<Integer> observations = new ArrayList<Integer>();
1: 
1:       //reading observations
0:       Scanner scanner = new Scanner(new FileInputStream(input));
1:       try {
1:         while (scanner.hasNextInt()) {
1:           observations.add(scanner.nextInt());
1:         }
0:       } finally {
0:         scanner.close();
1:       }
1: 
1:       int[] observationsArray = new int[observations.size()];
1:       for (int i = 0; i < observations.size(); ++i) {
1:         observationsArray[i] = observations.get(i);
1:       }
1: 
1:       //training
1:       HmmModel trainedModel = HmmTrainer.trainBaumWelch(model,
1:         observationsArray, epsilon, maxIterations, true);
1: 
1:       //serializing trained model
0:       DataOutputStream stream  = new DataOutputStream(new FileOutputStream(output));
1:       try {
1:         LossyHmmSerializer.serialize(trainedModel, stream);
0:       } finally {
0:         Closeables.closeQuietly(stream);
1:       }
1: 
1:       //printing tranied model
1:       System.out.println("Initial probabilities: ");
0:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i)
1:         System.out.print(i + " ");
1:       System.out.println();
0:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i)
1:         System.out.print(trainedModel.getInitialProbabilities().get(i) + " ");
1:       System.out.println();
1: 
1:       System.out.println("Transition matrix:");
1:       System.out.print("  ");
0:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i)
1:         System.out.print(i + " ");
1:       System.out.println();
1:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i) {
1:         System.out.print(i + " ");
1:         for (int j = 0; j < trainedModel.getNrOfHiddenStates(); ++j) {
1:           System.out.print(trainedModel.getTransitionMatrix().get(i, j) + " ");
1:         }
1:         System.out.println();
1:       }
1:       System.out.println("Emission matrix: ");
1:       System.out.print("  ");
0:       for (int i = 0; i < trainedModel.getNrOfOutputStates(); ++i)
1:         System.out.print(i + " ");
1:       System.out.println();
1:       for (int i = 0; i < trainedModel.getNrOfHiddenStates(); ++i) {
1:         System.out.print(i + " ");
1:         for (int j = 0; j < trainedModel.getNrOfOutputStates(); ++j) {
1:           System.out.print(trainedModel.getEmissionMatrix().get(i, j) + " ");
1:         }
1:         System.out.println();
1:       }
1:     } catch (OptionException e) {
1:       CommandLineUtil.printHelp(optionGroup);
1:     }
1:   }
1: }
============================================================================