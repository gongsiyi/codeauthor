3:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
3:f870a63:  */
3:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings.ops;
1:f870a63: 
1:f870a63: import org.apache.mahout.math.Matrix;
1:f870a63: import org.apache.mahout.math.Vector;
1:f870a63: import org.apache.mahout.math.DiagonalMatrix;
1:f870a63: import org.apache.mahout.h2obindings.drm.H2OBCast;
1:f870a63: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:f870a63: 
1:f870a63: import water.MRTask;
1:f870a63: import water.fvec.Frame;
1:f870a63: import water.fvec.Vec;
1:f870a63: import water.fvec.Chunk;
1:f870a63: import water.fvec.NewChunk;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * Multiple DRM with in-core Matrix
1:2d1b0bf:  */
1:f870a63: public class TimesRightMatrix {
1:2d1b0bf:   /**
1:2d1b0bf:    * Multiply a DRM with an in-core Matrix to create a new DRM.
1:2d1b0bf:    *
1:2d1b0bf:    * @param drmA DRM representing matrix A.
1:2d1b0bf:    * @param B in-core Mahout Matrix.
1:2d1b0bf:    * @return new DRM containing drmA times B.
1:2d1b0bf:    */
1:03a5bb6:   public static H2ODrm exec(H2ODrm drmA, Matrix B) {
1:f870a63:     Frame A = drmA.frame;
1:f870a63:     Vec keys = drmA.keys;
1:f870a63:     Frame AinCoreB = null;
1:f870a63: 
1:f870a63:     if (B instanceof DiagonalMatrix) {
1:03a5bb6:       AinCoreB = execDiagonal(A, B.viewDiagonal());
1:f870a63:     } else {
1:03a5bb6:       AinCoreB = execCommon(A, B);
1:f870a63:     }
1:f870a63: 
1:f870a63:     return new H2ODrm(AinCoreB, keys);
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   /**
1:2d1b0bf:    * Multiply Frame A with in-core diagonal Matrix (whose diagonal Vector is d)
1:2d1b0bf:    *
1:2d1b0bf:    * A.numCols() == d.size()
1:2d1b0bf:    */
1:03a5bb6:   private static Frame execDiagonal(final Frame A, Vector d) {
1:02ff22f:     final H2OBCast<Vector> bd = new H2OBCast<>(d);
1:f870a63: 
1:f870a63:     return new MRTask() {
1:f870a63:       public void map(Chunk chks[], NewChunk ncs[]) {
1:f870a63:         Vector D = bd.value();
1:2d1b0bf:         int chunkSize = chks[0].len();
1:f870a63: 
1:f870a63:         for (int c = 0; c < ncs.length; c++) {
1:2d1b0bf:           for (int r = 0; r < chunkSize; r++) {
1:f5f54a1:             double v = (chks[c].atd(r) * D.getQuick(c));
1:f870a63:             ncs[c].addNum(v);
1:f870a63:           }
1:f870a63:         }
1:f870a63:       }
1:f870a63:     }.doAll(d.size(), A).outputFrame(null, null);
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   /**
1:2d1b0bf:    * Multiply Frame A with in-core Matrix b
1:2d1b0bf:    *
1:2d1b0bf:    * A.numCols() == b.rowSize()
1:2d1b0bf:    */
1:03a5bb6:   private static Frame execCommon(final Frame A, Matrix b) {
1:02ff22f:     final H2OBCast<Matrix> bb = new H2OBCast<>(b);
1:f870a63: 
1:f870a63:     return new MRTask() {
1:f870a63:       public void map(Chunk chks[], NewChunk ncs[]) {
1:f870a63:         Matrix B = bb.value();
1:2d1b0bf:         int chunkSize = chks[0].len();
1:f870a63: 
1:f870a63:         for (int c = 0; c < ncs.length; c++) {
1:2d1b0bf:           for (int r = 0; r < chunkSize; r++) {
1:f870a63:             double v = 0;
1:f870a63:             for (int i = 0; i < chks.length; i++) {
1:f5f54a1:               v += (chks[i].atd(r) * B.getQuick(i, c));
1:f870a63:             }
1:f870a63:             ncs[c].addNum(v);
1:f870a63:           }
1:f870a63:         }
1:f870a63:       }
1:f870a63:     }.doAll(b.columnSize(), A).outputFrame(null, null);
1:f870a63:   }
1:f870a63: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     final H2OBCast<Vector> bd = new H2OBCast<>(d);
/////////////////////////////////////////////////////////////////////////
1:     final H2OBCast<Matrix> bb = new H2OBCast<>(b);
author:Stevo Slavic
-------------------------------------------------------------------------------
commit:f5f54a1
/////////////////////////////////////////////////////////////////////////
1:             double v = (chks[c].atd(r) * D.getQuick(c));
/////////////////////////////////////////////////////////////////////////
1:               v += (chks[i].atd(r) * B.getQuick(i, c));
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Multiple DRM with in-core Matrix
1:  */
1:   /**
1:    * Multiply a DRM with an in-core Matrix to create a new DRM.
1:    *
1:    * @param drmA DRM representing matrix A.
1:    * @param B in-core Mahout Matrix.
1:    * @return new DRM containing drmA times B.
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Multiply Frame A with in-core diagonal Matrix (whose diagonal Vector is d)
1:    *
1:    * A.numCols() == d.size()
1:    */
1:         int chunkSize = chks[0].len();
1:           for (int r = 0; r < chunkSize; r++) {
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Multiply Frame A with in-core Matrix b
1:    *
1:    * A.numCols() == b.rowSize()
1:    */
1:         int chunkSize = chks[0].len();
1:           for (int r = 0; r < chunkSize; r++) {
commit:03a5bb6
/////////////////////////////////////////////////////////////////////////
1:   public static H2ODrm exec(H2ODrm drmA, Matrix B) {
1:       AinCoreB = execDiagonal(A, B.viewDiagonal());
1:       AinCoreB = execCommon(A, B);
/////////////////////////////////////////////////////////////////////////
1:   private static Frame execDiagonal(final Frame A, Vector d) {
/////////////////////////////////////////////////////////////////////////
1:   private static Frame execCommon(final Frame A, Matrix b) {
commit:c964986
/////////////////////////////////////////////////////////////////////////
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.ops;
1: 
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.DiagonalMatrix;
0: import org.apache.mahout.h2obindings.H2OHelper;
1: import org.apache.mahout.h2obindings.drm.H2OBCast;
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
1: import water.MRTask;
1: import water.fvec.Frame;
1: import water.fvec.Vec;
1: import water.fvec.Chunk;
1: import water.fvec.NewChunk;
1: 
1: public class TimesRightMatrix {
0:   /* Multiple with in-core Matrix */
0:   public static H2ODrm TimesRightMatrix(H2ODrm drmA, Matrix B) {
1:     Frame A = drmA.frame;
1:     Vec keys = drmA.keys;
1:     Frame AinCoreB = null;
1: 
1:     if (B instanceof DiagonalMatrix) {
0:       AinCoreB = AinCoreB_diagonal(A, B.viewDiagonal());
1:     } else {
0:       AinCoreB = AinCoreB_common(A, B);
1:     }
1: 
1:     return new H2ODrm(AinCoreB, keys);
1:   }
1: 
1:   /*
0:     Multiply Frame A with in-core diagonal Matrix (whose diagonal Vector is d)
1: 
0:     A.numCols() == d.size()
1:   */
0:   private static Frame AinCoreB_diagonal(final Frame A, Vector d) {
0:     final H2OBCast<Vector> bd = new H2OBCast<Vector>(d);
1: 
1:     return new MRTask() {
1:       public void map(Chunk chks[], NewChunk ncs[]) {
1:         Vector D = bd.value();
0:         int chunk_size = chks[0].len();
1: 
1:         for (int c = 0; c < ncs.length; c++) {
0:           for (int r = 0; r < chunk_size; r++) {
0:             double v = (chks[c].at0(r) * D.getQuick(c));
1:             ncs[c].addNum(v);
1:           }
1:         }
1:       }
1:     }.doAll(d.size(), A).outputFrame(null, null);
1:   }
1: 
1:   /*
0:     Multiply Frame A with in-core Matrix b
1: 
0:     A.numCols() == b.rowSize()
1:   */
0:   private static Frame AinCoreB_common(final Frame A, Matrix b) {
0:     final H2OBCast<Matrix> bb = new H2OBCast<Matrix>(b);
1: 
1:     return new MRTask() {
1:       public void map(Chunk chks[], NewChunk ncs[]) {
1:         Matrix B = bb.value();
0:         int chunk_size = chks[0].len();
1: 
1:         for (int c = 0; c < ncs.length; c++) {
0:           for (int r = 0; r < chunk_size; r++) {
1:             double v = 0;
1:             for (int i = 0; i < chks.length; i++) {
0:               v += (chks[i].at0(r) * B.getQuick(i, c));
1:             }
1:             ncs[c].addNum(v);
1:           }
1:         }
1:       }
1:     }.doAll(b.columnSize(), A).outputFrame(null, null);
1:   }
1: }
============================================================================