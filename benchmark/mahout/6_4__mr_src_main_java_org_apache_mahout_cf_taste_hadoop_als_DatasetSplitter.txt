1:bd5d2f3: /**
1:bd5d2f3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd5d2f3:  * contributor license agreements.  See the NOTICE file distributed with
1:bd5d2f3:  * this work for additional information regarding copyright ownership.
1:bd5d2f3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd5d2f3:  * (the "License"); you may not use this file except in compliance with
1:bd5d2f3:  * the License.  You may obtain a copy of the License at
1:bd5d2f3:  *
1:bd5d2f3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bd5d2f3:  *
1:bd5d2f3:  * Unless required by applicable law or agreed to in writing, software
1:bd5d2f3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd5d2f3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd5d2f3:  * See the License for the specific language governing permissions and
1:bd5d2f3:  * limitations under the License.
1:bd5d2f3:  */
1:bd5d2f3: 
1:81d64c0: package org.apache.mahout.cf.taste.hadoop.als;
1:bd5d2f3: 
1:bd5d2f3: import org.apache.hadoop.fs.Path;
1:bd5d2f3: import org.apache.hadoop.io.LongWritable;
1:bd5d2f3: import org.apache.hadoop.io.NullWritable;
1:bd5d2f3: import org.apache.hadoop.io.Text;
1:bd5d2f3: import org.apache.hadoop.mapreduce.Job;
1:bd5d2f3: import org.apache.hadoop.mapreduce.Mapper;
1:bd5d2f3: import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
1:bd5d2f3: import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
1:bd5d2f3: import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
1:bd5d2f3: import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
1:bd5d2f3: import org.apache.hadoop.util.ToolRunner;
1:bd5d2f3: import org.apache.mahout.common.AbstractJob;
1:bd5d2f3: import org.apache.mahout.common.RandomUtils;
1:bd5d2f3: 
1:bd5d2f3: import java.io.IOException;
1:6965355: import java.util.List;
1:6965355: import java.util.Map;
1:bd5d2f3: import java.util.Random;
1:bd5d2f3: 
1:bd5d2f3: /**
1:bd5d2f3:  * <p>Split a recommendation dataset into a training and a test set</p>
1:bd5d2f3:  *
1:bd5d2f3:   * <p>Command line arguments specific to this class are:</p>
1:bd5d2f3:  *
1:bd5d2f3:  * <ol>
1:bd5d2f3:  * <li>--input (path): Directory containing one or more text files with the dataset</li>
1:bd5d2f3:  * <li>--output (path): path where output should go</li>
1:bd5d2f3:  * <li>--trainingPercentage (double): percentage of the data to use as training set (optional, default 0.9)</li>
1:bd5d2f3:  * <li>--probePercentage (double): percentage of the data to use as probe set (optional, default 0.1)</li>
1:bd5d2f3:  * </ol>
1:bd5d2f3:  */
1:bd5d2f3: public class DatasetSplitter extends AbstractJob {
1:bd5d2f3: 
1:bd5d2f3:   private static final String TRAINING_PERCENTAGE = DatasetSplitter.class.getName() + ".trainingPercentage";
1:bd5d2f3:   private static final String PROBE_PERCENTAGE = DatasetSplitter.class.getName() + ".probePercentage";
1:bd5d2f3:   private static final String PART_TO_USE = DatasetSplitter.class.getName() + ".partToUse";
1:bd5d2f3: 
1:bd5d2f3:   private static final Text INTO_TRAINING_SET = new Text("T");
1:bd5d2f3:   private static final Text INTO_PROBE_SET = new Text("P");
1:bd5d2f3: 
1:bd5d2f3:   private static final double DEFAULT_TRAINING_PERCENTAGE = 0.9;
1:bd5d2f3:   private static final double DEFAULT_PROBE_PERCENTAGE = 0.1;
1:bd5d2f3: 
1:bd5d2f3:   public static void main(String[] args) throws Exception {
1:bd5d2f3:     ToolRunner.run(new DatasetSplitter(), args);
1:bd5d2f3:   }
1:bd5d2f3: 
1:bd5d2f3:   @Override
1:bd5d2f3:   public int run(String[] args) throws Exception {
1:bd5d2f3: 
1:bd5d2f3:     addInputOption();
1:bd5d2f3:     addOutputOption();
1:44459bd:     addOption("trainingPercentage", "t", "percentage of the data to use as training set (default: " 
1:44459bd:         + DEFAULT_TRAINING_PERCENTAGE + ')', String.valueOf(DEFAULT_TRAINING_PERCENTAGE));
1:44459bd:     addOption("probePercentage", "p", "percentage of the data to use as probe set (default: " 
1:44459bd:         + DEFAULT_PROBE_PERCENTAGE + ')', String.valueOf(DEFAULT_PROBE_PERCENTAGE));
1:bd5d2f3: 
1:6965355:     Map<String,List<String>> parsedArgs = parseArguments(args);
1:6965355:     if (parsedArgs == null) {
1:6965355:       return -1;
1:6965355:     }
1:6965355: 
1:6db7f62:     double trainingPercentage = Double.parseDouble(getOption("trainingPercentage"));
1:6db7f62:     double probePercentage = Double.parseDouble(getOption("probePercentage"));
1:6db7f62:     String tempDir = getOption("tempDir");
1:bd5d2f3: 
1:bd5d2f3:     Path markedPrefs = new Path(tempDir, "markedPreferences");
1:bd5d2f3:     Path trainingSetPath = new Path(getOutputPath(), "trainingSet");
1:bd5d2f3:     Path probeSetPath = new Path(getOutputPath(), "probeSet");
1:bd5d2f3: 
1:bd5d2f3:     Job markPreferences = prepareJob(getInputPath(), markedPrefs, TextInputFormat.class, MarkPreferencesMapper.class,
1:81d64c0:         Text.class, Text.class, SequenceFileOutputFormat.class);
1:bd5d2f3:     markPreferences.getConfiguration().set(TRAINING_PERCENTAGE, String.valueOf(trainingPercentage));
1:bd5d2f3:     markPreferences.getConfiguration().set(PROBE_PERCENTAGE, String.valueOf(probePercentage));
1:7c2b664:     boolean succeeded = markPreferences.waitForCompletion(true);
1:229aeff:     if (!succeeded) {
1:7c2b664:       return -1;
1:229aeff:     }
1:bd5d2f3: 
1:bd5d2f3:     Job createTrainingSet = prepareJob(markedPrefs, trainingSetPath, SequenceFileInputFormat.class,
1:81d64c0:         WritePrefsMapper.class, NullWritable.class, Text.class, TextOutputFormat.class);
1:bd5d2f3:     createTrainingSet.getConfiguration().set(PART_TO_USE, INTO_TRAINING_SET.toString());
1:7c2b664:     succeeded = createTrainingSet.waitForCompletion(true);
1:229aeff:     if (!succeeded) {
1:7c2b664:       return -1;
1:229aeff:     }
1:bd5d2f3: 
1:bd5d2f3:     Job createProbeSet = prepareJob(markedPrefs, probeSetPath, SequenceFileInputFormat.class,
1:81d64c0:         WritePrefsMapper.class, NullWritable.class, Text.class, TextOutputFormat.class);
1:bd5d2f3:     createProbeSet.getConfiguration().set(PART_TO_USE, INTO_PROBE_SET.toString());
1:7c2b664:     succeeded = createProbeSet.waitForCompletion(true);
1:229aeff:     if (!succeeded) {
1:7c2b664:       return -1;
1:229aeff:     }
1:bd5d2f3: 
1:bd5d2f3:     return 0;
1:bd5d2f3:   }
1:bd5d2f3: 
1:bd5d2f3:   static class MarkPreferencesMapper extends Mapper<LongWritable,Text,Text,Text> {
1:bd5d2f3: 
1:bd5d2f3:     private Random random;
1:bd5d2f3:     private double trainingBound;
1:bd5d2f3:     private double probeBound;
1:bd5d2f3: 
1:bd5d2f3:     @Override
1:bd5d2f3:     protected void setup(Context ctx) throws IOException, InterruptedException {
1:bd5d2f3:       random = RandomUtils.getRandom();
1:bd5d2f3:       trainingBound = Double.parseDouble(ctx.getConfiguration().get(TRAINING_PERCENTAGE));
1:bd5d2f3:       probeBound = trainingBound + Double.parseDouble(ctx.getConfiguration().get(PROBE_PERCENTAGE));
1:bd5d2f3:     }
1:bd5d2f3: 
1:bd5d2f3:     @Override
1:bd5d2f3:     protected void map(LongWritable key, Text text, Context ctx) throws IOException, InterruptedException {
1:bd5d2f3:       double randomValue = random.nextDouble();
1:bd5d2f3:       if (randomValue <= trainingBound) {
1:bd5d2f3:         ctx.write(INTO_TRAINING_SET, text);
1:bd5d2f3:       } else if (randomValue <= probeBound) {
1:bd5d2f3:         ctx.write(INTO_PROBE_SET, text);
1:bd5d2f3:       }
1:bd5d2f3:     }
1:bd5d2f3:   }
1:bd5d2f3: 
1:bd5d2f3:   static class WritePrefsMapper extends Mapper<Text,Text,NullWritable,Text> {
1:bd5d2f3: 
1:bd5d2f3:     private String partToUse;
1:bd5d2f3: 
1:bd5d2f3:     @Override
1:bd5d2f3:     protected void setup(Context ctx) throws IOException, InterruptedException {
1:bd5d2f3:       partToUse = ctx.getConfiguration().get(PART_TO_USE);
1:bd5d2f3:     }
1:bd5d2f3: 
1:bd5d2f3:     @Override
1:bd5d2f3:     protected void map(Text key, Text text, Context ctx) throws IOException, InterruptedException {
1:bd5d2f3:       if (partToUse.equals(key.toString())) {
1:bd5d2f3:         ctx.write(NullWritable.get(), text);
1:bd5d2f3:       }
1:bd5d2f3:     }
1:bd5d2f3:   }
1:bd5d2f3: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6965355
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     Map<String,List<String>> parsedArgs = parseArguments(args);
1:     if (parsedArgs == null) {
1:       return -1;
1:     }
1: 
commit:81d64c0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.cf.taste.hadoop.als;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Text.class, Text.class, SequenceFileOutputFormat.class);
1:         WritePrefsMapper.class, NullWritable.class, Text.class, TextOutputFormat.class);
1:         WritePrefsMapper.class, NullWritable.class, Text.class, TextOutputFormat.class);
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.cf.taste.hadoop.als.eval;
commit:bd5d2f3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.utils.eval;
1: 
1: import org.apache.hadoop.fs.Path;
0: import org.apache.hadoop.io.BooleanWritable;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.NullWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Job;
1: import org.apache.hadoop.mapreduce.Mapper;
0: import org.apache.hadoop.mapreduce.Reducer;
1: import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
1: import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
1: import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
1: import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
1: import org.apache.hadoop.util.ToolRunner;
1: import org.apache.mahout.common.AbstractJob;
1: import org.apache.mahout.common.RandomUtils;
1: 
1: import java.io.IOException;
0: import java.util.Map;
1: import java.util.Random;
1: 
1: /**
1:  * <p>Split a recommendation dataset into a training and a test set</p>
1:  *
1:   * <p>Command line arguments specific to this class are:</p>
1:  *
1:  * <ol>
1:  * <li>--input (path): Directory containing one or more text files with the dataset</li>
1:  * <li>--output (path): path where output should go</li>
1:  * <li>--trainingPercentage (double): percentage of the data to use as training set (optional, default 0.9)</li>
1:  * <li>--probePercentage (double): percentage of the data to use as probe set (optional, default 0.1)</li>
1:  * </ol>
1:  */
1: public class DatasetSplitter extends AbstractJob {
1: 
1:   private static final String TRAINING_PERCENTAGE = DatasetSplitter.class.getName() + ".trainingPercentage";
1:   private static final String PROBE_PERCENTAGE = DatasetSplitter.class.getName() + ".probePercentage";
1:   private static final String PART_TO_USE = DatasetSplitter.class.getName() + ".partToUse";
1: 
1:   private static final Text INTO_TRAINING_SET = new Text("T");
1:   private static final Text INTO_PROBE_SET = new Text("P");
1: 
1:   private static final double DEFAULT_TRAINING_PERCENTAGE = 0.9;
1:   private static final double DEFAULT_PROBE_PERCENTAGE = 0.1;
1: 
1:   public static void main(String[] args) throws Exception {
1:     ToolRunner.run(new DatasetSplitter(), args);
1:   }
1: 
1:   @Override
1:   public int run(String[] args) throws Exception {
1: 
1:     addInputOption();
1:     addOutputOption();
0:     addOption("trainingPercentage", "t", "percentage of the data to use as training set (default: " +
0:         DEFAULT_TRAINING_PERCENTAGE + ")", String.valueOf(DEFAULT_TRAINING_PERCENTAGE));
0:     addOption("probePercentage", "p", "percentage of the data to use as probe set (default: " +
0:         DEFAULT_PROBE_PERCENTAGE +")", String.valueOf(DEFAULT_PROBE_PERCENTAGE));
1: 
0:     Map<String, String> parsedArgs = parseArguments(args);
0:     double trainingPercentage = Double.parseDouble(parsedArgs.get("--trainingPercentage"));
0:     double probePercentage = Double.parseDouble(parsedArgs.get("--probePercentage"));
0:     String tempDir = parsedArgs.get("--tempDir");
1: 
1:     Path markedPrefs = new Path(tempDir, "markedPreferences");
1:     Path trainingSetPath = new Path(getOutputPath(), "trainingSet");
1:     Path probeSetPath = new Path(getOutputPath(), "probeSet");
1: 
1:     Job markPreferences = prepareJob(getInputPath(), markedPrefs, TextInputFormat.class, MarkPreferencesMapper.class,
0:         Text.class, Text.class, Reducer.class, Text.class, Text.class,
0:         SequenceFileOutputFormat.class);
1:     markPreferences.getConfiguration().set(TRAINING_PERCENTAGE, String.valueOf(trainingPercentage));
1:     markPreferences.getConfiguration().set(PROBE_PERCENTAGE, String.valueOf(probePercentage));
0:     markPreferences.waitForCompletion(true);
1: 
1:     Job createTrainingSet = prepareJob(markedPrefs, trainingSetPath, SequenceFileInputFormat.class,
0:         WritePrefsMapper.class, NullWritable.class, Text.class, Reducer.class, NullWritable.class, Text.class,
0:         TextOutputFormat.class);
1:     createTrainingSet.getConfiguration().set(PART_TO_USE, INTO_TRAINING_SET.toString());
0:     createTrainingSet.waitForCompletion(true);
1: 
1:     Job createProbeSet = prepareJob(markedPrefs, probeSetPath, SequenceFileInputFormat.class,
0:         WritePrefsMapper.class, NullWritable.class, Text.class, Reducer.class, NullWritable.class, Text.class,
0:         TextOutputFormat.class);
1:     createProbeSet.getConfiguration().set(PART_TO_USE, INTO_PROBE_SET.toString());
0:     createProbeSet.waitForCompletion(true);
1: 
1:     return 0;
1:   }
1: 
1:   static class MarkPreferencesMapper extends Mapper<LongWritable,Text,Text,Text> {
1: 
1:     private Random random;
1:     private double trainingBound;
1:     private double probeBound;
1: 
1:     @Override
1:     protected void setup(Context ctx) throws IOException, InterruptedException {
1:       random = RandomUtils.getRandom();
1:       trainingBound = Double.parseDouble(ctx.getConfiguration().get(TRAINING_PERCENTAGE));
1:       probeBound = trainingBound + Double.parseDouble(ctx.getConfiguration().get(PROBE_PERCENTAGE));
1:     }
1: 
1:     @Override
1:     protected void map(LongWritable key, Text text, Context ctx) throws IOException, InterruptedException {
1:       double randomValue = random.nextDouble();
1:       if (randomValue <= trainingBound) {
1:         ctx.write(INTO_TRAINING_SET, text);
1:       } else if (randomValue <= probeBound) {
1:         ctx.write(INTO_PROBE_SET, text);
1:       }
1:     }
1:   }
1: 
1:   static class WritePrefsMapper extends Mapper<Text,Text,NullWritable,Text> {
1: 
1:     private String partToUse;
1: 
1:     @Override
1:     protected void setup(Context ctx) throws IOException, InterruptedException {
1:       partToUse = ctx.getConfiguration().get(PART_TO_USE);
1:     }
1: 
1:     @Override
1:     protected void map(Text key, Text text, Context ctx) throws IOException, InterruptedException {
1:       if (partToUse.equals(key.toString())) {
1:         ctx.write(NullWritable.get(), text);
1:       }
1:     }
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (!succeeded) {
1:     }
1:     if (!succeeded) {
1:     }
1:     if (!succeeded) {
1:     }
commit:7c2b664
/////////////////////////////////////////////////////////////////////////
1:     boolean succeeded = markPreferences.waitForCompletion(true);
0:     if (!succeeded) 
1:       return -1;
1:     succeeded = createTrainingSet.waitForCompletion(true);
0:     if (!succeeded) 
1:       return -1;
1:     succeeded = createProbeSet.waitForCompletion(true);
0:     if (!succeeded) 
1:       return -1;
/////////////////////////////////////////////////////////////////////////
0: }
commit:50fd693
commit:39fe224
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         DEFAULT_TRAINING_PERCENTAGE + ')', String.valueOf(DEFAULT_TRAINING_PERCENTAGE));
0:         DEFAULT_PROBE_PERCENTAGE + ')', String.valueOf(DEFAULT_PROBE_PERCENTAGE));
author:tcp
-------------------------------------------------------------------------------
commit:44459bd
/////////////////////////////////////////////////////////////////////////
1:     addOption("trainingPercentage", "t", "percentage of the data to use as training set (default: " 
1:         + DEFAULT_TRAINING_PERCENTAGE + ')', String.valueOf(DEFAULT_TRAINING_PERCENTAGE));
1:     addOption("probePercentage", "p", "percentage of the data to use as probe set (default: " 
1:         + DEFAULT_PROBE_PERCENTAGE + ')', String.valueOf(DEFAULT_PROBE_PERCENTAGE));
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:6db7f62
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:     Map<String, List<String>> parsedArgs = parseArguments(args);
1:     double trainingPercentage = Double.parseDouble(getOption("trainingPercentage"));
1:     double probePercentage = Double.parseDouble(getOption("probePercentage"));
1:     String tempDir = getOption("tempDir");
============================================================================