1:e56c7ff: /**
1:e56c7ff:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e56c7ff:  * contributor license agreements.  See the NOTICE file distributed with
1:e56c7ff:  * this work for additional information regarding copyright ownership.
1:e56c7ff:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e56c7ff:  * (the "License"); you may not use this file except in compliance with
1:e56c7ff:  * the License.  You may obtain a copy of the License at
1:e56c7ff:  *
1:e56c7ff:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e56c7ff:  *
1:e56c7ff:  * Unless required by applicable law or agreed to in writing, software
1:e56c7ff:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e56c7ff:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e56c7ff:  * See the License for the specific language governing permissions and
1:e56c7ff:  * limitations under the License.
1:e56c7ff:  */
1:e56c7ff: package org.apache.mahout.utils.clustering;
3:e56c7ff: 
1:e56c7ff: import java.io.IOException;
1:e56c7ff: import java.io.Writer;
1:eeca175: import java.util.ArrayList;
1:e56c7ff: import java.util.Collections;
1:e56c7ff: import java.util.Comparator;
1:eeca175: import java.util.HashMap;
1:e56c7ff: import java.util.List;
1:e56c7ff: import java.util.Map;
1:e56c7ff: import java.util.regex.Pattern;
1:e56c7ff: 
1:e56c7ff: import org.apache.mahout.clustering.AbstractCluster;
1:e56c7ff: import org.apache.mahout.clustering.Cluster;
1:8253491: import org.apache.mahout.clustering.classify.WeightedPropertyVectorWritable;
1:e56c7ff: import org.apache.mahout.clustering.iterator.ClusterWritable;
1:e56c7ff: import org.apache.mahout.common.distance.DistanceMeasure;
1:e56c7ff: import org.apache.mahout.math.NamedVector;
1:e56c7ff: import org.apache.mahout.math.Vector;
1:e56c7ff: import org.codehaus.jackson.map.ObjectMapper;
1:e56c7ff: import org.slf4j.Logger;
1:e56c7ff: import org.slf4j.LoggerFactory;
1:e56c7ff: 
1:e56c7ff: /**
1:e56c7ff:  * Dump cluster info to JSON formatted lines. Heavily inspired by
1:e56c7ff:  * ClusterDumperWriter.java and CSVClusterWriter.java
1:e56c7ff:  *
1:e56c7ff:  */
1:e56c7ff: public class JsonClusterWriter extends AbstractClusterWriter {
1:e56c7ff:   private final String[] dictionary;
1:e56c7ff:   private final int numTopFeatures;
1:e56c7ff:   private final ObjectMapper jxn;
1:e56c7ff: 
1:eeca175:   private static final Logger log = LoggerFactory.getLogger(JsonClusterWriter.class);
1:e56c7ff:   private static final Pattern VEC_PATTERN = Pattern.compile("\\{|\\:|\\,|\\}");
1:e56c7ff: 
1:e56c7ff:   public JsonClusterWriter(Writer writer,
1:8253491:       Map<Integer, List<WeightedPropertyVectorWritable>> clusterIdToPoints,
1:e56c7ff:       DistanceMeasure measure, int numTopFeatures, String[] dictionary) {
1:e56c7ff:     super(writer, clusterIdToPoints, measure);
1:e56c7ff:     this.numTopFeatures = numTopFeatures;
1:e56c7ff:     this.dictionary = dictionary;
1:e56c7ff:     jxn = new ObjectMapper();
1:e56c7ff:   }
1:e56c7ff: 
1:e56c7ff:   /**
1:e56c7ff:    * Generate HashMap with cluster info and write as a single JSON formatted
1:e56c7ff:    * line
1:e56c7ff:    */
1:e56c7ff:   @Override
1:e56c7ff:   public void write(ClusterWritable clusterWritable) throws IOException {
1:eeca175:     Map<String, Object> res = new HashMap<>();
1:e56c7ff: 
1:e56c7ff:     // get top terms
1:eeca175:     if (dictionary != null) {
1:eeca175:       List<Object> topTerms = getTopFeaturesList(clusterWritable.getValue()
1:eeca175:           .getCenter(), dictionary, numTopFeatures);
1:eeca175:       res.put("top_terms", topTerms);
1:eeca175:     } else {
1:eeca175:       res.put("top_terms", new ArrayList<>());
1:eeca175:     }
1:e56c7ff: 
1:e56c7ff:     // get human-readable cluster representation
1:e56c7ff:     Cluster cluster = clusterWritable.getValue();
1:e56c7ff:     res.put("cluster_id", cluster.getId());
1:eeca175: 
1:eeca175:     if (dictionary != null) {
1:eeca175:       Map<String,Object> fmtStr = cluster.asJson(dictionary);
1:eeca175:       res.put("cluster", fmtStr);
1:b988c49: 
1:eeca175:       // get points
1:eeca175:       List<Object> points = getPoints(cluster, dictionary);
1:eeca175:       res.put("points", points);
1:eeca175:     } else {
1:eeca175:       res.put("cluster", new HashMap<>());
1:eeca175:       res.put("points", new ArrayList<>());
1:eeca175:     }
1:e56c7ff: 
1:e56c7ff:     // write JSON
1:e56c7ff:     Writer writer = getWriter();
1:e56c7ff:     writer.write(jxn.writeValueAsString(res) + "\n");
1:e56c7ff:   }
1:e56c7ff: 
1:e56c7ff:   /**
1:e56c7ff:    * Create a List of HashMaps containing top terms information
1:e56c7ff:    *
1:e56c7ff:    * @return List<Object>
1:e56c7ff:    */
1:e56c7ff:   public List<Object> getTopFeaturesList(Vector vector, String[] dictionary,
1:e56c7ff:       int numTerms) {
1:e56c7ff: 
1:eeca175:     List<TermIndexWeight> vectorTerms = new ArrayList<>();
1:e56c7ff: 
1:e56c7ff:     for (Vector.Element elt : vector.nonZeroes()) {
1:e56c7ff:       vectorTerms.add(new TermIndexWeight(elt.index(), elt.get()));
1:e56c7ff:     }
1:e56c7ff: 
1:e56c7ff:     // Sort results in reverse order (i.e. weight in descending order)
1:e56c7ff:     Collections.sort(vectorTerms, new Comparator<TermIndexWeight>() {
1:e56c7ff:       @Override
1:e56c7ff:       public int compare(TermIndexWeight one, TermIndexWeight two) {
1:e56c7ff:         return Double.compare(two.weight, one.weight);
1:e56c7ff:       }
1:e56c7ff:     });
1:e56c7ff: 
1:eeca175:     List<Object> topTerms = new ArrayList<>();
1:e56c7ff: 
1:e56c7ff:     for (int i = 0; i < vectorTerms.size() && i < numTerms; i++) {
1:e56c7ff:       int index = vectorTerms.get(i).index;
1:e56c7ff:       String dictTerm = dictionary[index];
1:e56c7ff:       if (dictTerm == null) {
1:e56c7ff:         log.error("Dictionary entry missing for {}", index);
1:e56c7ff:         continue;
1:e56c7ff:       }
1:eeca175:       Map<String, Object> term_entry = new HashMap<>();
1:e0751ea:       term_entry.put(dictTerm, vectorTerms.get(i).weight);
1:e56c7ff:       topTerms.add(term_entry);
1:e56c7ff:     }
1:e56c7ff: 
1:e56c7ff:     return topTerms;
1:e56c7ff:   }
1:e56c7ff: 
1:e56c7ff:   /**
1:e56c7ff:    * Create a List of HashMaps containing Vector point information
1:e56c7ff:    *
1:e56c7ff:    * @return List<Object>
1:e56c7ff:    */
1:e56c7ff:   public List<Object> getPoints(Cluster cluster, String[] dictionary) {
1:eeca175:     List<Object> vectorObjs = new ArrayList<>();
1:8253491:     List<WeightedPropertyVectorWritable> points = getClusterIdToPoints().get(
1:e56c7ff:         cluster.getId());
1:e56c7ff: 
1:e56c7ff:     if (points != null) {
1:8253491:       for (WeightedPropertyVectorWritable point : points) {
1:eeca175:         Map<String, Object> entry = new HashMap<>();
1:e56c7ff:         Vector theVec = point.getVector();
1:e56c7ff:         if (theVec instanceof NamedVector) {
1:e56c7ff:           entry.put("vector_name", ((NamedVector) theVec).getName());
1:e56c7ff:         } else {
1:e56c7ff:           String vecStr = theVec.asFormatString();
1:e56c7ff:           // do some basic manipulations for display
1:e56c7ff:           vecStr = VEC_PATTERN.matcher(vecStr).replaceAll("_");
1:e56c7ff:           entry.put("vector_name", vecStr);
1:e56c7ff:         }
1:e56c7ff:         entry.put("weight", String.valueOf(point.getWeight()));
1:e0751ea:         try {
1:e0751ea:           entry.put("point",
1:e0751ea:                   AbstractCluster.formatVectorAsJson(point.getVector(), dictionary));
1:e0751ea:         } catch (IOException e) {
1:e0751ea:           log.error("IOException:  ", e);
1:e0751ea:         }
1:e56c7ff:         vectorObjs.add(entry);
1:e56c7ff:       }
1:e56c7ff:     }
1:e56c7ff:     return vectorObjs;
1:e56c7ff:   }
1:e56c7ff: 
1:e56c7ff:   /**
1:e56c7ff:    * Convenience class for sorting terms
1:e56c7ff:    *
1:e56c7ff:    */
1:e56c7ff:   private static class TermIndexWeight {
1:e56c7ff:     private final int index;
1:e56c7ff:     private final double weight;
1:e56c7ff: 
1:e56c7ff:     TermIndexWeight(int index, double weight) {
1:e56c7ff:       this.index = index;
1:e56c7ff:       this.weight = weight;
1:e56c7ff:     }
1:e56c7ff:   }
1:e56c7ff: 
1:e56c7ff: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
/////////////////////////////////////////////////////////////////////////
1: 
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4de8c58
/////////////////////////////////////////////////////////////////////////
commit:eeca175
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private static final Logger log = LoggerFactory.getLogger(JsonClusterWriter.class);
/////////////////////////////////////////////////////////////////////////
1:     Map<String, Object> res = new HashMap<>();
1:     if (dictionary != null) {
1:       List<Object> topTerms = getTopFeaturesList(clusterWritable.getValue()
1:           .getCenter(), dictionary, numTopFeatures);
1:       res.put("top_terms", topTerms);
1:     } else {
1:       res.put("top_terms", new ArrayList<>());
1:     }
1:     if (dictionary != null) {
1:       Map<String,Object> fmtStr = cluster.asJson(dictionary);
1:       res.put("cluster", fmtStr);
1: 
1:       // get points
1:       List<Object> points = getPoints(cluster, dictionary);
1:       res.put("points", points);
1:     } else {
1:       res.put("cluster", new HashMap<>());
1:       res.put("points", new ArrayList<>());
1:     }
/////////////////////////////////////////////////////////////////////////
1:     List<TermIndexWeight> vectorTerms = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:     List<Object> topTerms = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:       Map<String, Object> term_entry = new HashMap<>();
/////////////////////////////////////////////////////////////////////////
1:     List<Object> vectorObjs = new ArrayList<>();
1:         Map<String, Object> entry = new HashMap<>();
author:Andrew Musselman
-------------------------------------------------------------------------------
commit:e0751ea
/////////////////////////////////////////////////////////////////////////
0:     Map<String,Object> fmtStr = cluster.asJson(dictionary);
/////////////////////////////////////////////////////////////////////////
1:       term_entry.put(dictTerm, vectorTerms.get(i).weight);
/////////////////////////////////////////////////////////////////////////
1:         try {
1:           entry.put("point",
1:                   AbstractCluster.formatVectorAsJson(point.getVector(), dictionary));
1:         } catch (IOException e) {
1:           log.error("IOException:  ", e);
1:         }
author:smarthi
-------------------------------------------------------------------------------
commit:8253491
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.classify.WeightedPropertyVectorWritable;
/////////////////////////////////////////////////////////////////////////
1:       Map<Integer, List<WeightedPropertyVectorWritable>> clusterIdToPoints,
/////////////////////////////////////////////////////////////////////////
1:     List<WeightedPropertyVectorWritable> points = getClusterIdToPoints().get(
1:       for (WeightedPropertyVectorWritable point : points) {
commit:5c9a671
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Maps;
/////////////////////////////////////////////////////////////////////////
0:     Map<String, Object> res = Maps.newHashMap();
/////////////////////////////////////////////////////////////////////////
0:       Map<String, Object> term_entry = Maps.newHashMap();
/////////////////////////////////////////////////////////////////////////
0:         Map<String, Object> entry = Maps.newHashMap();
author:sslavic
-------------------------------------------------------------------------------
commit:e56c7ff
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.utils.clustering;
1: 
1: import java.io.IOException;
1: import java.io.Writer;
1: import java.util.Collections;
1: import java.util.Comparator;
0: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.mahout.clustering.AbstractCluster;
1: import org.apache.mahout.clustering.Cluster;
0: import org.apache.mahout.clustering.classify.WeightedVectorWritable;
1: import org.apache.mahout.clustering.iterator.ClusterWritable;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.NamedVector;
1: import org.apache.mahout.math.Vector;
1: import org.codehaus.jackson.map.ObjectMapper;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import com.google.common.collect.Lists;
1: 
1: /**
1:  * Dump cluster info to JSON formatted lines. Heavily inspired by
1:  * ClusterDumperWriter.java and CSVClusterWriter.java
1:  *
1:  */
1: public class JsonClusterWriter extends AbstractClusterWriter {
1:   private final String[] dictionary;
1:   private final int numTopFeatures;
1:   private final ObjectMapper jxn;
1: 
0:   private static final Logger log = LoggerFactory
0:       .getLogger(JsonClusterWriter.class);
1:   private static final Pattern VEC_PATTERN = Pattern.compile("\\{|\\:|\\,|\\}");
1: 
1:   public JsonClusterWriter(Writer writer,
0:       Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints,
1:       DistanceMeasure measure, int numTopFeatures, String[] dictionary) {
1:     super(writer, clusterIdToPoints, measure);
1:     this.numTopFeatures = numTopFeatures;
1:     this.dictionary = dictionary;
1:     jxn = new ObjectMapper();
1:   }
1: 
1:   /**
1:    * Generate HashMap with cluster info and write as a single JSON formatted
1:    * line
1:    */
1:   @Override
1:   public void write(ClusterWritable clusterWritable) throws IOException {
0:     HashMap<String, Object> res = new HashMap<String, Object>();
1: 
1:     // get top terms
0:     List<Object> topTerms = getTopFeaturesList(clusterWritable.getValue()
0:         .getCenter(), dictionary, numTopFeatures);
0:     res.put("top_terms", topTerms);
1: 
1:     // get human-readable cluster representation
1:     Cluster cluster = clusterWritable.getValue();
0:     String fmtStr = cluster.asFormatString(dictionary);
1:     res.put("cluster_id", cluster.getId());
0:     res.put("cluster", fmtStr);
1: 
0:     // get points
0:     List<Object> points = getPoints(cluster, dictionary);
0:     res.put("points", points);
1: 
1:     // write JSON
1:     Writer writer = getWriter();
1:     writer.write(jxn.writeValueAsString(res) + "\n");
1:   }
1: 
1:   /**
1:    * Create a List of HashMaps containing top terms information
1:    *
1:    * @return List<Object>
1:    */
1:   public List<Object> getTopFeaturesList(Vector vector, String[] dictionary,
1:       int numTerms) {
1: 
0:     List<TermIndexWeight> vectorTerms = Lists.newArrayList();
1: 
1:     for (Vector.Element elt : vector.nonZeroes()) {
1:       vectorTerms.add(new TermIndexWeight(elt.index(), elt.get()));
1:     }
1: 
1:     // Sort results in reverse order (i.e. weight in descending order)
1:     Collections.sort(vectorTerms, new Comparator<TermIndexWeight>() {
1:       @Override
1:       public int compare(TermIndexWeight one, TermIndexWeight two) {
1:         return Double.compare(two.weight, one.weight);
1:       }
1:     });
1: 
0:     List<Object> topTerms = Lists.newLinkedList();
1: 
1:     for (int i = 0; i < vectorTerms.size() && i < numTerms; i++) {
1:       int index = vectorTerms.get(i).index;
1:       String dictTerm = dictionary[index];
1:       if (dictTerm == null) {
1:         log.error("Dictionary entry missing for {}", index);
1:         continue;
1:       }
0:       HashMap<String, Object> term_entry = new HashMap<String, Object>();
0:       term_entry.put("term", dictTerm);
0:       term_entry.put("weight", vectorTerms.get(i).weight);
1:       topTerms.add(term_entry);
1:     }
1: 
1:     return topTerms;
1:   }
1: 
1:   /**
1:    * Create a List of HashMaps containing Vector point information
1:    *
1:    * @return List<Object>
1:    */
1:   public List<Object> getPoints(Cluster cluster, String[] dictionary) {
0:     List<Object> vectorObjs = Lists.newLinkedList();
0:     List<WeightedVectorWritable> points = getClusterIdToPoints().get(
1:         cluster.getId());
1: 
1:     if (points != null) {
0:       for (WeightedVectorWritable point : points) {
0:         HashMap<String, Object> entry = new HashMap<String, Object>();
1:         Vector theVec = point.getVector();
1:         if (theVec instanceof NamedVector) {
1:           entry.put("vector_name", ((NamedVector) theVec).getName());
1:         } else {
1:           String vecStr = theVec.asFormatString();
1:           // do some basic manipulations for display
1:           vecStr = VEC_PATTERN.matcher(vecStr).replaceAll("_");
1:           entry.put("vector_name", vecStr);
1:         }
1:         entry.put("weight", String.valueOf(point.getWeight()));
0:         entry.put("point",
0:             AbstractCluster.formatVector(point.getVector(), dictionary));
1:         vectorObjs.add(entry);
1:       }
1:     }
1:     return vectorObjs;
1:   }
1: 
1:   /**
1:    * Convenience class for sorting terms
1:    *
1:    */
1:   private static class TermIndexWeight {
1:     private final int index;
1:     private final double weight;
1: 
1:     TermIndexWeight(int index, double weight) {
1:       this.index = index;
1:       this.weight = weight;
1:     }
1:   }
1: 
1: }
============================================================================