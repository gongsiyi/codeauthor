1:049e7dc: /**
1:049e7dc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:049e7dc:  * contributor license agreements.  See the NOTICE file distributed with
1:049e7dc:  * this work for additional information regarding copyright ownership.
1:049e7dc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:049e7dc:  * (the "License"); you may not use this file except in compliance with
1:049e7dc:  * the License.  You may obtain a copy of the License at
1:049e7dc:  *
1:049e7dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:049e7dc:  *
1:049e7dc:  * Unless required by applicable law or agreed to in writing, software
1:049e7dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:049e7dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:049e7dc:  * See the License for the specific language governing permissions and
1:049e7dc:  * limitations under the License.
4:0342478:  */
1:0342478: 
1:8d102ea: package org.apache.mahout.clustering.iterator;
3:f5bb6b7: 
1:0342478: import java.io.DataInput;
1:0342478: import java.io.DataOutput;
1:0342478: import java.io.IOException;
1:0342478: 
1:f5bb6b7: import org.apache.hadoop.conf.Configuration;
1:8d102ea: import org.apache.mahout.clustering.AbstractCluster;
1:8d102ea: import org.apache.mahout.clustering.Model;
1:e0ec7c1: import org.apache.mahout.common.ClassUtils;
1:0342478: import org.apache.mahout.common.distance.DistanceMeasure;
1:0342478: import org.apache.mahout.math.Vector;
1:0342478: import org.apache.mahout.math.VectorWritable;
1:0342478: 
1:fed7d61: public class DistanceMeasureCluster extends AbstractCluster {
1:0342478: 
1:939ac30:   private DistanceMeasure measure;
1:0342478: 
1:fed7d61:   public DistanceMeasureCluster(Vector point, int id, DistanceMeasure measure) {
1:fed7d61:     super(point, id);
1:fed7d61:     this.measure = measure;
1:0342478:   }
1:0342478: 
1:0342478:   public DistanceMeasureCluster() {
1:0342478:   }
1:0873421: 
1:fed7d61:   @Override
1:f5bb6b7:   public void configure(Configuration job) {
1:e0ec7c1:     if (measure != null) {
1:e0ec7c1:       measure.configure(job);
1:0342478:     }
4:f5bb6b7:   }
1:0342478: 
1:0342478:   @Override
1:0342478:   public void readFields(DataInput in) throws IOException {
1:0342478:     String dm = in.readUTF();
1:e0ec7c1:     this.measure = ClassUtils.instantiateAs(dm, DistanceMeasure.class);
1:0342478:     super.readFields(in);
1:0342478:   }
1:0342478: 
1:0342478:   @Override
1:0342478:   public void write(DataOutput out) throws IOException {
1:0342478:     out.writeUTF(measure.getClass().getName());
1:0342478:     super.write(out);
1:0342478:   }
1:0342478: 
1:0342478:   @Override
1:0342478:   public double pdf(VectorWritable vw) {
1:0873421:     return 1 / (1 + measure.distance(vw.get(), getCenter()));
1:0342478:   }
1:0342478: 
1:0342478:   @Override
1:0342478:   public Model<VectorWritable> sampleFromPosterior() {
1:fed7d61:     return new DistanceMeasureCluster(getCenter(), getId(), measure);
1:0342478:   }
1:0342478: 
1:0342478:   public DistanceMeasure getMeasure() {
1:0342478:     return measure;
1:0342478:   }
1:0342478: 
1:0342478:   /**
1:0873421:    * @param measure
1:0873421:    *          the measure to set
1:0342478:    */
1:0342478:   public void setMeasure(DistanceMeasure measure) {
1:0342478:     this.measure = measure;
1:0342478:   }
1:0342478: 
3:f5bb6b7:   @Override
1:fed7d61:   public String getIdentifier() {
1:fed7d61:     return "DMC:" + getId();
1:fed7d61:   }
1:fed7d61: 
1:0342478: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:8d102ea
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.iterator;
1: import org.apache.mahout.clustering.AbstractCluster;
1: import org.apache.mahout.clustering.Model;
commit:0873421
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     return 1 / (1 + measure.distance(vw.get(), getCenter()));
/////////////////////////////////////////////////////////////////////////
1:    * @param measure
1:    *          the measure to set
commit:fed7d61
/////////////////////////////////////////////////////////////////////////
1: public class DistanceMeasureCluster extends AbstractCluster {
1:   public DistanceMeasureCluster(Vector point, int id, DistanceMeasure measure) {
1:     super(point, id);
1:     this.measure = measure;
/////////////////////////////////////////////////////////////////////////
0:     return Math.exp(-measure.distance(vw.get(), getCenter()));
/////////////////////////////////////////////////////////////////////////
1:     return new DistanceMeasureCluster(getCenter(), getId(), measure);
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public String getIdentifier() {
1:     return "DMC:" + getId();
1:   }
1: 
commit:0342478
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.clustering;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
0: import org.apache.mahout.clustering.dirichlet.models.Model;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: 
0: public abstract class DistanceMeasureCluster extends AbstractCluster {
1: 
0:   protected DistanceMeasure measure;
1: 
0:   public DistanceMeasureCluster(Vector point, int id, DistanceMeasure measure2) {
0:     super(point,id);
0:     this.measure = measure2;
1:   }
1: 
1:   public DistanceMeasureCluster() {
0:     super();
1:   }
1: 
0:   /* (non-Javadoc)
0:    * @see org.apache.mahout.clustering.AbstractCluster#readFields(java.io.DataInput)
1:    */
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     String dm = in.readUTF();
0:     try {
0:       ClassLoader ccl = Thread.currentThread().getContextClassLoader();
0:       this.measure = (DistanceMeasure) ((Class<?>) ccl.loadClass(dm)).newInstance();
0:     } catch (InstantiationException e) {
0:       throw new IllegalStateException(e);
0:     } catch (IllegalAccessException e) {
0:       throw new IllegalStateException(e);
0:     } catch (ClassNotFoundException e) {
0:       throw new IllegalStateException(e);
1:     }
1:     super.readFields(in);
1:   }
1: 
0:   /* (non-Javadoc)
0:    * @see org.apache.mahout.clustering.AbstractCluster#write(java.io.DataOutput)
1:    */
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeUTF(measure.getClass().getName());
1:     super.write(out);
1:   }
1: 
0:   /* (non-Javadoc)
0:    * @see org.apache.mahout.clustering.AbstractCluster#pdf(org.apache.mahout.math.VectorWritable)
1:    */
1:   @Override
1:   public double pdf(VectorWritable vw) {
0:     return 1 / measure.distance(getCenter(), vw.get());
1:   }
1: 
0:   /* (non-Javadoc)
0:    * @see org.apache.mahout.clustering.dirichlet.models.Model#sampleFromPosterior()
1:    */
1:   @Override
1:   public Model<VectorWritable> sampleFromPosterior() {
0:     // TODO: fix this
0:     return this;
1:   }
1: 
1:   public DistanceMeasure getMeasure() {
1:     return measure;
1:   }
1: 
1:   /**
0:    * @param measure the measure to set
1:    */
1:   public void setMeasure(DistanceMeasure measure) {
1:     this.measure = measure;
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.ClassUtils;
/////////////////////////////////////////////////////////////////////////
1:     if (measure != null) {
1:       measure.configure(job);
1:     this.measure = ClassUtils.instantiateAs(dm, DistanceMeasure.class);
commit:208aa07
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f5bb6b7
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collection;
0: import java.util.Collections;
1: import org.apache.hadoop.conf.Configuration;
0: import org.apache.mahout.common.parameters.Parameter;
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Override
1:   public void configure(Configuration job) {
0:     if (getMeasure() != null) {
0:       getMeasure().configure(job);
1:     }
1:   }
1:   
1:   @Override
0:   public Collection<Parameter<?>> getParameters() {
0:     return Collections.emptyList();
1:   }
1:   
1:   @Override
0:   public void createParameters(String prefix, Configuration jobConf) {
0:     // nothing to do
1:   }
commit:939ac30
/////////////////////////////////////////////////////////////////////////
1:   private DistanceMeasure measure;
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
0: 
commit:8a99d75
/////////////////////////////////////////////////////////////////////////
0:       this.measure = ccl.loadClass(dm).asSubclass(DistanceMeasure.class).newInstance();
/////////////////////////////////////////////////////////////////////////
============================================================================