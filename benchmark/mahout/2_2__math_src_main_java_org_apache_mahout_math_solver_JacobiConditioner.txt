1:e0ec7c1: /**
1:e0ec7c1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e0ec7c1:  * contributor license agreements.  See the NOTICE file distributed with
1:e0ec7c1:  * this work for additional information regarding copyright ownership.
1:e0ec7c1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e0ec7c1:  * (the "License"); you may not use this file except in compliance with
1:e0ec7c1:  * the License.  You may obtain a copy of the License at
1:e0ec7c1:  *
1:e0ec7c1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e0ec7c1:  *
1:e0ec7c1:  * Unless required by applicable law or agreed to in writing, software
1:e0ec7c1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e0ec7c1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e0ec7c1:  * See the License for the specific language governing permissions and
1:e0ec7c1:  * limitations under the License.
1:e0ec7c1:  */
1:e0ec7c1: 
1:5fc5b65: package org.apache.mahout.math.solver;
1:5fc5b65: 
1:5fc5b65: import org.apache.mahout.math.DenseVector;
1:5fc5b65: import org.apache.mahout.math.Matrix;
1:5fc5b65: import org.apache.mahout.math.Vector;
1:5fc5b65: 
1:5fc5b65: /**
1:5fc5b65:  * Implements the Jacobi preconditioner for a matrix A. This is defined as inv(diag(A)).
1:5fc5b65:  */
1:e0ec7c1: public final class JacobiConditioner implements Preconditioner {
1:e0ec7c1: 
1:e0ec7c1:   private final DenseVector inverseDiagonal;
1:5fc5b65: 
1:5fc5b65:   public JacobiConditioner(Matrix a) {
1:5fc5b65:     if (a.numCols() != a.numRows()) {
1:5fc5b65:       throw new IllegalArgumentException("Matrix must be square.");
1:5fc5b65:     }
1:5fc5b65:     
1:5fc5b65:     inverseDiagonal = new DenseVector(a.numCols());
1:5fc5b65:     for (int i = 0; i < a.numCols(); ++i) {
1:5fc5b65:       inverseDiagonal.setQuick(i, 1.0 / a.getQuick(i, i));
1:5fc5b65:     }
1:5fc5b65:   }
1:5fc5b65:   
1:5fc5b65:   @Override
1:e0ec7c1:   public Vector precondition(Vector v) {
1:5fc5b65:     return v.times(inverseDiagonal);
1:5fc5b65:   }
1:5fc5b65: 
1:5fc5b65: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: public final class JacobiConditioner implements Preconditioner {
1: 
1:   private final DenseVector inverseDiagonal;
/////////////////////////////////////////////////////////////////////////
1:   public Vector precondition(Vector v) {
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:5fc5b65
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.solver;
1: 
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: 
1: /**
0:  * 
1:  * Implements the Jacobi preconditioner for a matrix A. This is defined as inv(diag(A)).
0:  *
1:  */
0: public class JacobiConditioner implements Preconditioner
0: {
0:   private DenseVector inverseDiagonal;
1: 
1:   public JacobiConditioner(Matrix a) {
1:     if (a.numCols() != a.numRows()) {
1:       throw new IllegalArgumentException("Matrix must be square.");
1:     }
1:     
1:     inverseDiagonal = new DenseVector(a.numCols());
1:     for (int i = 0; i < a.numCols(); ++i) {
1:       inverseDiagonal.setQuick(i, 1.0 / a.getQuick(i, i));
1:     }
1:   }
1:   
1:   @Override
0:   public Vector precondition(Vector v)
0:   {
1:     return v.times(inverseDiagonal);
1:   }
1: 
1: }
============================================================================