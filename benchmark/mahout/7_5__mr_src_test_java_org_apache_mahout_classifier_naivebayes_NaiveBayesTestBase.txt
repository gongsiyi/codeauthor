1:f3a9cc1: /**
1:f3a9cc1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f3a9cc1:  * contributor license agreements.  See the NOTICE file distributed with
1:f3a9cc1:  * this work for additional information regarding copyright ownership.
1:f3a9cc1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f3a9cc1:  * (the "License"); you may not use this file except in compliance with
1:f3a9cc1:  * the License.  You may obtain a copy of the License at
1:f3a9cc1:  *
1:f3a9cc1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f3a9cc1:  *
1:f3a9cc1:  * Unless required by applicable law or agreed to in writing, software
1:f3a9cc1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f3a9cc1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f3a9cc1:  * See the License for the specific language governing permissions and
1:f3a9cc1:  * limitations under the License.
1:f3a9cc1:  */
1:f3a9cc1: 
1:515a414: package org.apache.mahout.classifier.naivebayes;
4:515a414: 
1:515a414: import org.apache.mahout.common.MahoutTestCase;
1:515a414: import org.apache.mahout.math.DenseMatrix;
1:515a414: import org.apache.mahout.math.DenseVector;
1:515a414: import org.apache.mahout.math.Matrix;
1:515a414: import org.apache.mahout.math.Vector;
1:515a414: import org.apache.mahout.math.Vector.Element;
1:515a414: 
1:1499411: public abstract class NaiveBayesTestBase extends MahoutTestCase {
1:515a414:   
1:9a5bab5:   private NaiveBayesModel standardModel;
1:9a5bab5:   private NaiveBayesModel complementaryModel;
1:515a414:   
1:515a414:   @Override
1:515a414:   public void setUp() throws Exception {
1:515a414:     super.setUp();
1:9a5bab5:     standardModel = createStandardNaiveBayesModel();
1:9a5bab5:     standardModel.validate();
1:9a5bab5:     complementaryModel = createComplementaryNaiveBayesModel();
1:9a5bab5:     complementaryModel.validate();
1:515a414:   }
1:515a414:   
1:9a5bab5:   protected NaiveBayesModel getStandardModel() {
1:9a5bab5:     return standardModel;
1:9a5bab5:   }
1:9a5bab5:   protected NaiveBayesModel getComplementaryModel() {
1:9a5bab5:     return complementaryModel;
1:515a414:   }
1:515a414:   
1:1499411:   protected static double complementaryNaiveBayesThetaWeight(int label,
1:1499411:                                                              Matrix weightMatrix,
1:1499411:                                                              Vector labelSum,
1:1499411:                                                              Vector featureSum) {
1:515a414:     double weight = 0.0;
1:208aa07:     double alpha = 1.0;
2:515a414:     for (int i = 0; i < featureSum.size(); i++) {
2:515a414:       double score = weightMatrix.get(i, label);
1:515a414:       double lSum = labelSum.get(label);
1:515a414:       double fSum = featureSum.get(i);
1:515a414:       double totalSum = featureSum.zSum();
1:515a414:       double numerator = fSum - score + alpha;
1:515a414:       double denominator = totalSum - lSum + featureSum.size();
1:fa29726:       weight += Math.abs(Math.log(numerator / denominator));
1:515a414:     }
1:515a414:     return weight;
1:515a414:   }
1:515a414:   
1:1499411:   protected static double naiveBayesThetaWeight(int label,
1:1499411:                                                 Matrix weightMatrix,
1:1499411:                                                 Vector labelSum,
1:1499411:                                                 Vector featureSum) {
1:515a414:     double weight = 0.0;
1:208aa07:     double alpha = 1.0;
1:e3fb0c4:     for (int feature = 0; feature < featureSum.size(); feature++) {
1:e3fb0c4:       double score = weightMatrix.get(feature, label);
1:515a414:       double lSum = labelSum.get(label);
1:515a414:       double numerator = score + alpha;
1:515a414:       double denominator = lSum + featureSum.size();
1:fa29726:       weight += Math.abs(Math.log(numerator / denominator));
1:515a414:     }
1:515a414:     return weight;
1:515a414:   }
1:515a414: 
1:9a5bab5:   protected static NaiveBayesModel createStandardNaiveBayesModel() {
1:e3fb0c4:     double[][] matrix = {
1:e3fb0c4:         { 0.7, 0.1, 0.1, 0.3 },
1:e3fb0c4:         { 0.4, 0.4, 0.1, 0.1 },
1:e3fb0c4:         { 0.1, 0.0, 0.8, 0.1 },
1:e3fb0c4:         { 0.1, 0.1, 0.1, 0.7 } };
1:e3fb0c4: 
1:e3fb0c4:     double[] labelSumArray = { 1.2, 1.0, 1.0, 1.0 };
1:e3fb0c4:     double[] featureSumArray = { 1.3, 0.6, 1.1, 1.2 };
1:515a414:     
1:515a414:     DenseMatrix weightMatrix = new DenseMatrix(matrix);
1:515a414:     DenseVector labelSum = new DenseVector(labelSumArray);
1:9a5bab5:     DenseVector featureSum = new DenseVector(featureSumArray);    
1:e3fb0c4:     
1:515a414:     // now generate the model
1:9a5bab5:     return new NaiveBayesModel(weightMatrix, featureSum, labelSum, null, 1.0f, false);
1:515a414:   }
1:e3fb0c4:   
1:1499411:   protected static NaiveBayesModel createComplementaryNaiveBayesModel() {
1:e3fb0c4:     double[][] matrix = {
1:e3fb0c4:         { 0.7, 0.1, 0.1, 0.3 },
1:e3fb0c4:         { 0.4, 0.4, 0.1, 0.1 },
1:e3fb0c4:         { 0.1, 0.0, 0.8, 0.1 },
1:e3fb0c4:         { 0.1, 0.1, 0.1, 0.7 } };
1:515a414: 
1:e3fb0c4:     double[] labelSumArray = { 1.2, 1.0, 1.0, 1.0 };
1:e3fb0c4:     double[] featureSumArray = { 1.3, 0.6, 1.1, 1.2 };
1:515a414:     
1:515a414:     DenseMatrix weightMatrix = new DenseMatrix(matrix);
1:515a414:     DenseVector labelSum = new DenseVector(labelSumArray);
2:515a414:     DenseVector featureSum = new DenseVector(featureSumArray);
1:515a414:     
2:e3fb0c4:     double[] thetaNormalizerSum = {
1:e3fb0c4:         complementaryNaiveBayesThetaWeight(0, weightMatrix, labelSum, featureSum),
1:e3fb0c4:         complementaryNaiveBayesThetaWeight(1, weightMatrix, labelSum, featureSum),
1:e3fb0c4:         complementaryNaiveBayesThetaWeight(2, weightMatrix, labelSum, featureSum),
1:e3fb0c4:         complementaryNaiveBayesThetaWeight(3, weightMatrix, labelSum, featureSum) };
1:e3fb0c4: 
1:515a414:     // now generate the model
1:9a5bab5:     return new NaiveBayesModel(weightMatrix, featureSum, labelSum, new DenseVector(thetaNormalizerSum), 1.0f, true);
1:515a414:   }
1:515a414:   
1:1499411:   protected static int maxIndex(Vector instance) {
1:515a414:     int maxIndex = -1;
1:e3fb0c4:     double maxScore = Integer.MIN_VALUE;
1:dc62944:     for (Element label : instance.all()) {
1:e3fb0c4:       if (label.get() >= maxScore) {
1:e3fb0c4:         maxIndex = label.index();
1:e3fb0c4:         maxScore = label.get();
1:515a414:       }
1:515a414:     }
1:515a414:     return maxIndex;
1:515a414:   }
1:515a414: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:9a5bab5
/////////////////////////////////////////////////////////////////////////
1:   private NaiveBayesModel standardModel;
1:   private NaiveBayesModel complementaryModel;
1:     standardModel = createStandardNaiveBayesModel();
1:     standardModel.validate();
1:     complementaryModel = createComplementaryNaiveBayesModel();
1:     complementaryModel.validate();
1:   protected NaiveBayesModel getStandardModel() {
1:     return standardModel;
1:   }
1:   protected NaiveBayesModel getComplementaryModel() {
1:     return complementaryModel;
/////////////////////////////////////////////////////////////////////////
1:   protected static NaiveBayesModel createStandardNaiveBayesModel() {
/////////////////////////////////////////////////////////////////////////
1:     DenseVector featureSum = new DenseVector(featureSumArray);    
1:     return new NaiveBayesModel(weightMatrix, featureSum, labelSum, null, 1.0f, false);
/////////////////////////////////////////////////////////////////////////
1:     return new NaiveBayesModel(weightMatrix, featureSum, labelSum, new DenseVector(thetaNormalizerSum), 1.0f, true);
commit:e3fb0c4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     model.validate();
0:   public double complementaryNaiveBayesThetaWeight(int label, Matrix weightMatrix, Vector labelSum, Vector featureSum) {
/////////////////////////////////////////////////////////////////////////
0:   public double naiveBayesThetaWeight(int label, Matrix weightMatrix, Vector labelSum, Vector featureSum) {
1:     for (int feature = 0; feature < featureSum.size(); feature++) {
1:       double score = weightMatrix.get(feature, label);
/////////////////////////////////////////////////////////////////////////
1:     double[][] matrix = {
1:         { 0.7, 0.1, 0.1, 0.3 },
1:         { 0.4, 0.4, 0.1, 0.1 },
1:         { 0.1, 0.0, 0.8, 0.1 },
1:         { 0.1, 0.1, 0.1, 0.7 } };
1: 
1:     double[] labelSumArray = { 1.2, 1.0, 1.0, 1.0 };
1:     double[] featureSumArray = { 1.3, 0.6, 1.1, 1.2 };
1:     double[] thetaNormalizerSum = {
0:         naiveBayesThetaWeight(0, weightMatrix, labelSum, featureSum),
0:         naiveBayesThetaWeight(1, weightMatrix, labelSum, featureSum),
0:         naiveBayesThetaWeight(2, weightMatrix, labelSum, featureSum),
0:         naiveBayesThetaWeight(3, weightMatrix, labelSum, featureSum) };
1: 
0:     return new NaiveBayesModel(weightMatrix, featureSum, labelSum, new DenseVector(thetaNormalizerSum), 1.0f);
1:     double[][] matrix = {
1:         { 0.7, 0.1, 0.1, 0.3 },
1:         { 0.4, 0.4, 0.1, 0.1 },
1:         { 0.1, 0.0, 0.8, 0.1 },
1:         { 0.1, 0.1, 0.1, 0.7 } };
1: 
1:     double[] labelSumArray = { 1.2, 1.0, 1.0, 1.0 };
1:     double[] featureSumArray = { 1.3, 0.6, 1.1, 1.2 };
1:     double[] thetaNormalizerSum = {
1:         complementaryNaiveBayesThetaWeight(0, weightMatrix, labelSum, featureSum),
1:         complementaryNaiveBayesThetaWeight(1, weightMatrix, labelSum, featureSum),
1:         complementaryNaiveBayesThetaWeight(2, weightMatrix, labelSum, featureSum),
1:         complementaryNaiveBayesThetaWeight(3, weightMatrix, labelSum, featureSum) };
1: 
0:     return new NaiveBayesModel(weightMatrix, featureSum, labelSum, new DenseVector(thetaNormalizerSum), 1.0f);
1:     double maxScore = Integer.MIN_VALUE;
0:     for (Element label : instance) {
1:       if (label.get() >= maxScore) {
1:         maxIndex = label.index();
1:         maxScore = label.get();
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:fa29726
/////////////////////////////////////////////////////////////////////////
1:       weight += Math.abs(Math.log(numerator / denominator));
/////////////////////////////////////////////////////////////////////////
1:       weight += Math.abs(Math.log(numerator / denominator));
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1:     for (Element label : instance.all()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1499411
/////////////////////////////////////////////////////////////////////////
1: public abstract class NaiveBayesTestBase extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:   protected static double complementaryNaiveBayesThetaWeight(int label,
1:                                                              Matrix weightMatrix,
1:                                                              Vector labelSum,
1:                                                              Vector featureSum) {
/////////////////////////////////////////////////////////////////////////
1:   protected static double naiveBayesThetaWeight(int label,
1:                                                 Matrix weightMatrix,
1:                                                 Vector labelSum,
1:                                                 Vector featureSum) {
/////////////////////////////////////////////////////////////////////////
0:   protected static NaiveBayesModel createNaiveBayesModel() {
/////////////////////////////////////////////////////////////////////////
1:   protected static NaiveBayesModel createComplementaryNaiveBayesModel() {
/////////////////////////////////////////////////////////////////////////
1:   protected static int maxIndex(Vector instance) {
commit:f3a9cc1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:208aa07
/////////////////////////////////////////////////////////////////////////
1:     double alpha = 1.0;
/////////////////////////////////////////////////////////////////////////
1:     double alpha = 1.0;
commit:58fd277
/////////////////////////////////////////////////////////////////////////
0:     return new NaiveBayesModel(weightMatrix, featureSum,
/////////////////////////////////////////////////////////////////////////
0:     return new NaiveBayesModel(weightMatrix, featureSum,
author:Robin Anil
-------------------------------------------------------------------------------
commit:515a414
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.naivebayes;
1: 
0: import java.util.Iterator;
1: 
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.Vector.Element;
1: 
0: public class NaiveBayesTestBase extends MahoutTestCase {
1:   
0:   private NaiveBayesModel model;
1:   
1:   @Override
1:   public void setUp() throws Exception {
1:     super.setUp();
0:     model = createNaiveBayesModel();
1:     
0:     // make sure the model is valid :)
0:     NaiveBayesModel.validate(model);
1:   }
1:   
0:   protected NaiveBayesModel getModel() {
0:     return model;
1:   }
1:   
0:   public double complementaryNaiveBayesThetaWeight(int label,
0:                                                    Matrix weightMatrix,
0:                                                    Vector labelSum,
0:                                                    Vector featureSum) {
1:     double weight = 0.0;
0:     double alpha = 1.0d;
1:     for (int i = 0; i < featureSum.size(); i++) {
1:       double score = weightMatrix.get(i, label);
1:       double lSum = labelSum.get(label);
1:       double fSum = featureSum.get(i);
1:       double totalSum = featureSum.zSum();
1:       double numerator = fSum - score + alpha;
1:       double denominator = totalSum - lSum + featureSum.size();
0:       weight += Math.log(numerator / denominator);
1:     }
1:     return weight;
1:   }
1:   
0:   public double naiveBayesThetaWeight(int label,
0:                                       Matrix weightMatrix,
0:                                       Vector labelSum,
0:                                       Vector featureSum) {
1:     double weight = 0.0;
0:     double alpha = 1.0d;
1:     for (int i = 0; i < featureSum.size(); i++) {
1:       double score = weightMatrix.get(i, label);
1:       double lSum = labelSum.get(label);
1:       double numerator = score + alpha;
1:       double denominator = lSum + featureSum.size();
0:       weight += Math.log(numerator / denominator);
1:     }
1:     return weight;
1:   }
1: 
0:   public NaiveBayesModel createNaiveBayesModel() {
0:     double[][] matrix = { {0.7, 0.1, 0.1, 0.3}, {0.4, 0.4, 0.1, 0.1},
0:                          {0.1, 0.0, 0.8, 0.1}, {0.1, 0.1, 0.1, 0.7}};
0:     double[] labelSumArray = {1.2, 1.0, 1.0, 1.0};
0:     double[] featureSumArray = {1.3, 0.6, 1.1, 1.2};
1:     
1:     DenseMatrix weightMatrix = new DenseMatrix(matrix);
1:     DenseVector labelSum = new DenseVector(labelSumArray);
1:     DenseVector featureSum = new DenseVector(featureSumArray);
1:     
0:     double[] thetaNormalizerSum = {naiveBayesThetaWeight(0, weightMatrix, labelSum, featureSum), 
0:                                    naiveBayesThetaWeight(1, weightMatrix, labelSum, featureSum),
0:                                    naiveBayesThetaWeight(2, weightMatrix, labelSum, featureSum),
0:                                    naiveBayesThetaWeight(3, weightMatrix, labelSum, featureSum)};
1:     // now generate the model
0:     NaiveBayesModel model = new NaiveBayesModel(weightMatrix, featureSum,
0:         labelSum, new DenseVector(thetaNormalizerSum), 1.0f);
0:     return model;
1:   }
1:   
0:   public NaiveBayesModel createComplementaryNaiveBayesModel() {
0:     double[][] matrix = { {0.7, 0.1, 0.1, 0.3}, {0.4, 0.4, 0.1, 0.1},
0:                          {0.1, 0.0, 0.8, 0.1}, {0.1, 0.1, 0.1, 0.7}};
0:     double[] labelSumArray = {1.2, 1.0, 1.0, 1.0};
0:     double[] featureSumArray = {1.3, 0.6, 1.1, 1.2};
1:     
1:     DenseMatrix weightMatrix = new DenseMatrix(matrix);
1:     DenseVector labelSum = new DenseVector(labelSumArray);
1:     DenseVector featureSum = new DenseVector(featureSumArray);
1:     
0:     double[] thetaNormalizerSum = {complementaryNaiveBayesThetaWeight(0, weightMatrix, labelSum, featureSum), 
0:                                    complementaryNaiveBayesThetaWeight(1, weightMatrix, labelSum, featureSum),
0:                                    complementaryNaiveBayesThetaWeight(2, weightMatrix, labelSum, featureSum),
0:                                    complementaryNaiveBayesThetaWeight(3, weightMatrix, labelSum, featureSum)};
1:     // now generate the model
0:     NaiveBayesModel model = new NaiveBayesModel(weightMatrix, featureSum,
0:         labelSum, new DenseVector(thetaNormalizerSum), 1.0f);
0:     return model;
1:   }
1:   
0:   public int maxIndex(Vector instance) {
0:     Iterator<Element> it = instance.iterator();
1:     int maxIndex = -1;
0:     double val = Integer.MIN_VALUE;
0:     while (it.hasNext()) {
0:       Element e = it.next();
0:       if (val <= e.get()) {
0:         maxIndex = e.index();
0:         val = e.get();
1:       }
1:     }
1:     return maxIndex;
1:   }
1: }
============================================================================