1:8642b98: /**
1:8642b98:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8642b98:  * contributor license agreements.  See the NOTICE file distributed with
1:8642b98:  * this work for additional information regarding copyright ownership.
1:8642b98:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8642b98:  * (the "License"); you may not use this file except in compliance with
1:8642b98:  * the License.  You may obtain a copy of the License at
1:8642b98:  *
1:8642b98:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8642b98:  *
1:8642b98:  * Unless required by applicable law or agreed to in writing, software
1:8642b98:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8642b98:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8642b98:  * See the License for the specific language governing permissions and
1:8642b98:  * limitations under the License.
1:8642b98:  */
20:8642b98: 
1:8642b98: package org.apache.mahout.classifier.df.tools;
1:229aeff: 
1:8642b98: import java.lang.reflect.Field;
1:8642b98: import java.text.DecimalFormat;
1:8642b98: import java.util.HashMap;
1:8642b98: import java.util.Map;
1:229aeff: 
1:67a531e: import org.apache.commons.lang3.ArrayUtils;
1:8642b98: import org.apache.mahout.classifier.df.data.Data;
1:8642b98: import org.apache.mahout.classifier.df.data.Dataset;
1:8642b98: import org.apache.mahout.classifier.df.data.Instance;
1:8642b98: import org.apache.mahout.classifier.df.node.CategoricalNode;
1:8642b98: import org.apache.mahout.classifier.df.node.Leaf;
1:8642b98: import org.apache.mahout.classifier.df.node.Node;
1:8642b98: import org.apache.mahout.classifier.df.node.NumericalNode;
1:8642b98: 
1:8642b98: /**
1:8642b98:  * This tool is to visualize the Decision tree
1:8642b98:  */
1:1ffa3a4: @Deprecated
1:8642b98: public final class TreeVisualizer {
1:2282122:   
1:2282122:   private TreeVisualizer() {}
1:2282122:   
1:8642b98:   private static String doubleToString(double value) {
1:8642b98:     DecimalFormat df = new DecimalFormat("0.##");
1:8642b98:     return df.format(value);
9:8642b98:   }
1:2282122:   
1:2282122:   private static String toStringNode(Node node, Dataset dataset,
1:2282122:       String[] attrNames, Map<String,Field> fields, int layer) {
1:2282122:     
1:564c3e1:     StringBuilder buff = new StringBuilder();
1:2282122:     
1:229aeff:     try {
1:229aeff:       if (node instanceof CategoricalNode) {
1:229aeff:         CategoricalNode cnode = (CategoricalNode) node;
1:229aeff:         int attr = (Integer) fields.get("CategoricalNode.attr").get(cnode);
1:6b7f601:         double[] values = (double[]) fields.get("CategoricalNode.values").get(cnode);
1:6b7f601:         Node[] childs = (Node[]) fields.get("CategoricalNode.childs").get(cnode);
1:6b7f601:         String[][] attrValues = (String[][]) fields.get("Dataset.values").get(dataset);
1:2282122:         for (int i = 0; i < attrValues[attr].length; i++) {
1:2282122:           int index = ArrayUtils.indexOf(values, i);
1:2282122:           if (index < 0) {
1:2282122:             continue;
1:8642b98:           }
1:229aeff:           buff.append('\n');
1:229aeff:           for (int j = 0; j < layer; j++) {
1:229aeff:             buff.append("|   ");
1:229aeff:           }
1:229aeff:           buff.append(attrNames == null ? attr : attrNames[attr]).append(" = ")
1:2282122:               .append(attrValues[attr][i]);
1:6b7f601:           buff.append(toStringNode(childs[index], dataset, attrNames, fields, layer + 1));
1:229aeff:         }
1:229aeff:       } else if (node instanceof NumericalNode) {
1:229aeff:         NumericalNode nnode = (NumericalNode) node;
1:229aeff:         int attr = (Integer) fields.get("NumericalNode.attr").get(nnode);
1:229aeff:         double split = (Double) fields.get("NumericalNode.split").get(nnode);
1:229aeff:         Node loChild = (Node) fields.get("NumericalNode.loChild").get(nnode);
1:229aeff:         Node hiChild = (Node) fields.get("NumericalNode.hiChild").get(nnode);
1:564c3e1:         buff.append('\n');
3:8642b98:         for (int j = 0; j < layer; j++) {
3:8642b98:           buff.append("|   ");
1:229aeff:         }
1:2282122:         buff.append(attrNames == null ? attr : attrNames[attr]).append(" < ")
1:2282122:             .append(doubleToString(split));
1:229aeff:         buff.append(toStringNode(loChild, dataset, attrNames, fields, layer + 1));
1:229aeff:         buff.append('\n');
1:229aeff:         for (int j = 0; j < layer; j++) {
1:229aeff:           buff.append("|   ");
1:229aeff:         }
1:2282122:         buff.append(attrNames == null ? attr : attrNames[attr]).append(" >= ")
1:2282122:             .append(doubleToString(split));
1:229aeff:         buff.append(toStringNode(hiChild, dataset, attrNames, fields, layer + 1));
1:229aeff:       } else if (node instanceof Leaf) {
1:229aeff:         Leaf leaf = (Leaf) node;
1:229aeff:         double label = (Double) fields.get("Leaf.label").get(leaf);
1:229aeff:         if (dataset.isNumerical(dataset.getLabelId())) {
1:229aeff:           buff.append(" : ").append(doubleToString(label));
1:210b265:         } else {
1:2282122:           buff.append(" : ").append(dataset.getLabelString(label));
1:210b265:         }
1:8642b98:       }
1:229aeff:     } catch (IllegalAccessException iae) {
1:229aeff:       throw new IllegalStateException(iae);
1:8642b98:     }
1:210b265:     
1:8642b98:     return buff.toString();
1:8642b98:   }
1:2282122:   
1:2282122:   private static Map<String,Field> getReflectMap() {
1:02ff22f:     Map<String,Field> fields = new HashMap<>();
1:2282122:     
1:229aeff:     try {
1:229aeff:       Field m = CategoricalNode.class.getDeclaredField("attr");
1:229aeff:       m.setAccessible(true);
1:229aeff:       fields.put("CategoricalNode.attr", m);
1:229aeff:       m = CategoricalNode.class.getDeclaredField("values");
1:229aeff:       m.setAccessible(true);
1:229aeff:       fields.put("CategoricalNode.values", m);
1:229aeff:       m = CategoricalNode.class.getDeclaredField("childs");
1:229aeff:       m.setAccessible(true);
1:229aeff:       fields.put("CategoricalNode.childs", m);
1:229aeff:       m = NumericalNode.class.getDeclaredField("attr");
1:229aeff:       m.setAccessible(true);
1:229aeff:       fields.put("NumericalNode.attr", m);
1:229aeff:       m = NumericalNode.class.getDeclaredField("split");
1:229aeff:       m.setAccessible(true);
1:229aeff:       fields.put("NumericalNode.split", m);
1:229aeff:       m = NumericalNode.class.getDeclaredField("loChild");
1:229aeff:       m.setAccessible(true);
1:229aeff:       fields.put("NumericalNode.loChild", m);
1:229aeff:       m = NumericalNode.class.getDeclaredField("hiChild");
1:229aeff:       m.setAccessible(true);
1:229aeff:       fields.put("NumericalNode.hiChild", m);
1:229aeff:       m = Leaf.class.getDeclaredField("label");
1:229aeff:       m.setAccessible(true);
1:229aeff:       fields.put("Leaf.label", m);
1:229aeff:       m = Dataset.class.getDeclaredField("values");
1:229aeff:       m.setAccessible(true);
1:229aeff:       fields.put("Dataset.values", m);
1:229aeff:     } catch (NoSuchFieldException nsfe) {
1:229aeff:       throw new IllegalStateException(nsfe);
1:229aeff:     }
1:2282122:     
1:8642b98:     return fields;
1:8642b98:   }
1:2282122:   
1:8642b98:   /**
1:8642b98:    * Decision tree to String
1:2282122:    * 
2:8642b98:    * @param tree
2:8642b98:    *          Node of tree
2:8642b98:    * @param attrNames
2:8642b98:    *          attribute names
1:8642b98:    */
1:229aeff:   public static String toString(Node tree, Dataset dataset, String[] attrNames) {
1:8642b98:     return toStringNode(tree, dataset, attrNames, getReflectMap(), 0);
1:8642b98:   }
1:2282122:   
1:8642b98:   /**
1:8642b98:    * Print Decision tree
1:2282122:    * 
1:2282122:    * @param tree
1:2282122:    *          Node of tree
1:2282122:    * @param attrNames
1:2282122:    *          attribute names
1:8642b98:    */
1:229aeff:   public static void print(Node tree, Dataset dataset, String[] attrNames) {
1:8642b98:     System.out.println(toString(tree, dataset, attrNames));
1:229aeff:   }
1:2282122:   
1:2282122:   private static String toStringPredict(Node node, Instance instance,
1:2282122:       Dataset dataset, String[] attrNames, Map<String,Field> fields) {
1:564c3e1:     StringBuilder buff = new StringBuilder();
1:2282122:     
1:229aeff:     try {
1:229aeff:       if (node instanceof CategoricalNode) {
1:229aeff:         CategoricalNode cnode = (CategoricalNode) node;
1:229aeff:         int attr = (Integer) fields.get("CategoricalNode.attr").get(cnode);
1:2282122:         double[] values = (double[]) fields.get("CategoricalNode.values").get(
1:2282122:             cnode);
1:2282122:         Node[] childs = (Node[]) fields.get("CategoricalNode.childs")
1:2282122:             .get(cnode);
1:2282122:         String[][] attrValues = (String[][]) fields.get("Dataset.values").get(
1:2282122:             dataset);
1:2282122:         
1:229aeff:         int index = ArrayUtils.indexOf(values, instance.get(attr));
1:229aeff:         if (index >= 0) {
1:2282122:           buff.append(attrNames == null ? attr : attrNames[attr]).append(" = ")
1:229aeff:               .append(attrValues[attr][(int) instance.get(attr)]);
1:229aeff:           buff.append(" -> ");
1:2282122:           buff.append(toStringPredict(childs[index], instance, dataset,
1:2282122:               attrNames, fields));
1:2282122:         }
1:229aeff:       } else if (node instanceof NumericalNode) {
1:229aeff:         NumericalNode nnode = (NumericalNode) node;
1:229aeff:         int attr = (Integer) fields.get("NumericalNode.attr").get(nnode);
1:229aeff:         double split = (Double) fields.get("NumericalNode.split").get(nnode);
1:229aeff:         Node loChild = (Node) fields.get("NumericalNode.loChild").get(nnode);
1:229aeff:         Node hiChild = (Node) fields.get("NumericalNode.hiChild").get(nnode);
1:229aeff:         
1:229aeff:         if (instance.get(attr) < split) {
1:2282122:           buff.append('(').append(attrNames == null ? attr : attrNames[attr])
1:2282122:               .append(" = ").append(doubleToString(instance.get(attr)))
1:2282122:               .append(") < ").append(doubleToString(split));
1:229aeff:           buff.append(" -> ");
1:2282122:           buff.append(toStringPredict(loChild, instance, dataset, attrNames,
1:2282122:               fields));
1:229aeff:         } else {
1:2282122:           buff.append('(').append(attrNames == null ? attr : attrNames[attr])
1:2282122:               .append(" = ").append(doubleToString(instance.get(attr)))
1:2282122:               .append(") >= ").append(doubleToString(split));
1:229aeff:           buff.append(" -> ");
1:2282122:           buff.append(toStringPredict(hiChild, instance, dataset, attrNames,
1:2282122:               fields));
1:229aeff:         }
1:229aeff:       } else if (node instanceof Leaf) {
1:229aeff:         Leaf leaf = (Leaf) node;
1:229aeff:         double label = (Double) fields.get("Leaf.label").get(leaf);
1:229aeff:         if (dataset.isNumerical(dataset.getLabelId())) {
1:229aeff:           buff.append(doubleToString(label));
2:229aeff:         } else {
1:2282122:           buff.append(dataset.getLabelString(label));
1:229aeff:         }
1:8642b98:       }
1:229aeff:     } catch (IllegalAccessException iae) {
1:229aeff:       throw new IllegalStateException(iae);
1:8642b98:     }
1:2282122:     
1:8642b98:     return buff.toString();
1:8642b98:   }
1:2282122:   
1:8642b98:   /**
1:8642b98:    * Predict trace to String
1:2282122:    * 
1:8642b98:    * @param tree
1:8642b98:    *          Node of tree
1:8642b98:    * @param attrNames
1:8642b98:    *          attribute names
1:8642b98:    */
1:229aeff:   public static String[] predictTrace(Node tree, Data data, String[] attrNames) {
1:2282122:     Map<String,Field> reflectMap = getReflectMap();
1:8642b98:     String[] prediction = new String[data.size()];
1:8642b98:     for (int i = 0; i < data.size(); i++) {
1:2282122:       prediction[i] = toStringPredict(tree, data.get(i), data.getDataset(),
1:2282122:           attrNames, reflectMap);
1:8642b98:     }
1:8642b98:     return prediction;
1:8642b98:   }
1:2282122:   
1:8642b98:   /**
1:8642b98:    * Print predict trace
1:2282122:    * 
1:8642b98:    * @param tree
1:8642b98:    *          Node of tree
1:8642b98:    * @param attrNames
1:8642b98:    *          attribute names
1:8642b98:    */
1:229aeff:   public static void predictTracePrint(Node tree, Data data, String[] attrNames) {
1:2282122:     Map<String,Field> reflectMap = getReflectMap();
1:8642b98:     for (int i = 0; i < data.size(); i++) {
1:2282122:       System.out.println(toStringPredict(tree, data.get(i), data.getDataset(),
1:2282122:           attrNames, reflectMap));
1:8642b98:     }
1:8642b98:   }
1:8642b98: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     Map<String,Field> fields = new HashMap<>();
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.ArrayUtils;
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6b7f601
/////////////////////////////////////////////////////////////////////////
1:         double[] values = (double[]) fields.get("CategoricalNode.values").get(cnode);
1:         Node[] childs = (Node[]) fields.get("CategoricalNode.childs").get(cnode);
1:         String[][] attrValues = (String[][]) fields.get("Dataset.values").get(dataset);
/////////////////////////////////////////////////////////////////////////
1:           buff.append(toStringNode(childs[index], dataset, attrNames, fields, layer + 1));
commit:210b265
/////////////////////////////////////////////////////////////////////////
0:             if (attrNames == null) {
0:               buff.append(attr);
1:             } else {
0:               buff.append(attrNames[attr]);
1:             }
0:             buff.append(" = ");
0:             buff.append(attrValues[attr][(int) values[i]]);
1: 
commit:c5edfe9
/////////////////////////////////////////////////////////////////////////
0:           if (values[i] < attrValues[attr].length) {
0:             buff.append((attrNames == null ? attr : attrNames[attr]) + " = " + attrValues[attr][(int) values[i]]);
0:             buff.append(toStringNode(childs[i], dataset, attrNames, fields, layer + 1));
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:2282122
/////////////////////////////////////////////////////////////////////////
1:   
1:   private TreeVisualizer() {}
1:   
1:   
1:   private static String toStringNode(Node node, Dataset dataset,
1:       String[] attrNames, Map<String,Field> fields, int layer) {
1:     
1:     
1:         double[] values = (double[]) fields.get("CategoricalNode.values").get(
1:             cnode);
1:         Node[] childs = (Node[]) fields.get("CategoricalNode.childs")
1:             .get(cnode);
1:         String[][] attrValues = (String[][]) fields.get("Dataset.values").get(
1:             dataset);
1:         for (int i = 0; i < attrValues[attr].length; i++) {
1:           int index = ArrayUtils.indexOf(values, i);
1:           if (index < 0) {
1:             continue;
1:           }
1:           buff.append(attrNames == null ? attr : attrNames[attr]).append(" = ")
1:               .append(attrValues[attr][i]);
0:           buff.append(toStringNode(childs[index], dataset, attrNames, fields,
0:               layer + 1));
/////////////////////////////////////////////////////////////////////////
1:         buff.append(attrNames == null ? attr : attrNames[attr]).append(" < ")
1:             .append(doubleToString(split));
1:         buff.append(attrNames == null ? attr : attrNames[attr]).append(" >= ")
1:             .append(doubleToString(split));
/////////////////////////////////////////////////////////////////////////
1:           buff.append(" : ").append(dataset.getLabelString(label));
1:     
1:   
1:   private static Map<String,Field> getReflectMap() {
0:     Map<String,Field> fields = new HashMap<String,Field>();
1:     
/////////////////////////////////////////////////////////////////////////
1:    * 
/////////////////////////////////////////////////////////////////////////
1:   
1:    * 
1:    * @param tree
1:    *          Node of tree
1:    * @param attrNames
1:    *          attribute names
1:   
1:   private static String toStringPredict(Node node, Instance instance,
1:       Dataset dataset, String[] attrNames, Map<String,Field> fields) {
1:     
0:         double[] values = (double[]) fields.get("CategoricalNode.values").get(
0:             cnode);
0:         Node[] childs = (Node[]) fields.get("CategoricalNode.childs")
0:             .get(cnode);
0:         String[][] attrValues = (String[][]) fields.get("Dataset.values").get(
0:             dataset);
1:         
1:           buff.append(toStringPredict(childs[index], instance, dataset,
1:               attrNames, fields));
/////////////////////////////////////////////////////////////////////////
1:         
1:           buff.append('(').append(attrNames == null ? attr : attrNames[attr])
1:               .append(" = ").append(doubleToString(instance.get(attr)))
1:               .append(") < ").append(doubleToString(split));
1:           buff.append(toStringPredict(loChild, instance, dataset, attrNames,
1:               fields));
1:           buff.append('(').append(attrNames == null ? attr : attrNames[attr])
1:               .append(" = ").append(doubleToString(instance.get(attr)))
1:               .append(") >= ").append(doubleToString(split));
1:           buff.append(toStringPredict(hiChild, instance, dataset, attrNames,
1:               fields));
/////////////////////////////////////////////////////////////////////////
1:           buff.append(dataset.getLabelString(label));
1:     
1:   
1:    * 
1:     Map<String,Field> reflectMap = getReflectMap();
1:       prediction[i] = toStringPredict(tree, data.get(i), data.getDataset(),
1:           attrNames, reflectMap);
1:   
1:    * 
1:     Map<String,Field> reflectMap = getReflectMap();
1:       System.out.println(toStringPredict(tree, data.get(i), data.getDataset(),
1:           attrNames, reflectMap));
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0:   private static String toStringNode(Node node,
0:                                      Dataset dataset,
0:                                      String[] attrNames,
0:                                      Map<String, Field> fields,
0:                                      int layer) {
1: 
1:     try {
1: 
1:       if (node instanceof CategoricalNode) {
1:         CategoricalNode cnode = (CategoricalNode) node;
1:         int attr = (Integer) fields.get("CategoricalNode.attr").get(cnode);
0:         double[] values = (double[]) fields.get("CategoricalNode.values").get(cnode);
0:         Node[] childs = (Node[]) fields.get("CategoricalNode.childs").get(cnode);
0:         String[][] attrValues = (String[][]) fields.get("Dataset.values").get(dataset);
0:         for (int i = 0; i < childs.length; i++) {
1:           buff.append('\n');
1:           for (int j = 0; j < layer; j++) {
1:             buff.append("|   ");
1:           }
0:           buff.append(attrNames == null ? attr : attrNames[attr]).append(" = ").append(attrValues[attr][i]);
0:           int index = ArrayUtils.indexOf(values, i);
1:           if (index >= 0) {
0:             buff.append(toStringNode(childs[index], dataset, attrNames, fields, layer + 1));
1:           }
1:         }
1:       } else if (node instanceof NumericalNode) {
1:         NumericalNode nnode = (NumericalNode) node;
1:         int attr = (Integer) fields.get("NumericalNode.attr").get(nnode);
1:         double split = (Double) fields.get("NumericalNode.split").get(nnode);
1:         Node loChild = (Node) fields.get("NumericalNode.loChild").get(nnode);
1:         Node hiChild = (Node) fields.get("NumericalNode.hiChild").get(nnode);
0:         buff.append(attrNames == null ? attr : attrNames[attr]).append(" < ").append(doubleToString(split));
1:         buff.append(toStringNode(loChild, dataset, attrNames, fields, layer + 1));
1:         buff.append('\n');
1:         for (int j = 0; j < layer; j++) {
1:           buff.append("|   ");
1:         }
0:         buff.append(attrNames == null ? attr : attrNames[attr]).append(" >= ").append(doubleToString(split));
1:         buff.append(toStringNode(hiChild, dataset, attrNames, fields, layer + 1));
1:       } else if (node instanceof Leaf) {
1:         Leaf leaf = (Leaf) node;
1:         double label = (Double) fields.get("Leaf.label").get(leaf);
1:         if (dataset.isNumerical(dataset.getLabelId())) {
1:           buff.append(" : ").append(doubleToString(label));
1:         } else {
0:           buff.append(" : ").append(dataset.getLabelString((int) label));
1: 
1:     } catch (IllegalAccessException iae) {
1:       throw new IllegalStateException(iae);
0:   private static Map<String, Field> getReflectMap() {
1:     try {
1:       Field m = CategoricalNode.class.getDeclaredField("attr");
1:       m.setAccessible(true);
1:       fields.put("CategoricalNode.attr", m);
1:       m = CategoricalNode.class.getDeclaredField("values");
1:       m.setAccessible(true);
1:       fields.put("CategoricalNode.values", m);
1:       m = CategoricalNode.class.getDeclaredField("childs");
1:       m.setAccessible(true);
1:       fields.put("CategoricalNode.childs", m);
1:       m = NumericalNode.class.getDeclaredField("attr");
1:       m.setAccessible(true);
1:       fields.put("NumericalNode.attr", m);
1:       m = NumericalNode.class.getDeclaredField("split");
1:       m.setAccessible(true);
1:       fields.put("NumericalNode.split", m);
1:       m = NumericalNode.class.getDeclaredField("loChild");
1:       m.setAccessible(true);
1:       fields.put("NumericalNode.loChild", m);
1:       m = NumericalNode.class.getDeclaredField("hiChild");
1:       m.setAccessible(true);
1:       fields.put("NumericalNode.hiChild", m);
1:       m = Leaf.class.getDeclaredField("label");
1:       m.setAccessible(true);
1:       fields.put("Leaf.label", m);
1:       m = Dataset.class.getDeclaredField("values");
1:       m.setAccessible(true);
1:       fields.put("Dataset.values", m);
1:     } catch (NoSuchFieldException nsfe) {
1:       throw new IllegalStateException(nsfe);
1:     }
/////////////////////////////////////////////////////////////////////////
1:   public static String toString(Node tree, Dataset dataset, String[] attrNames) {
0:    * @param tree  Node of tree
0:    * @param attrNames attribute names
1:   public static void print(Node tree, Dataset dataset, String[] attrNames) {
0:   private static String toStringPredict(Node node,
0:                                         Instance instance,
0:                                         Dataset dataset,
0:                                         String[] attrNames,
0:                                         Map<String, Field> fields) {
1:     try {
1:       if (node instanceof CategoricalNode) {
1:         CategoricalNode cnode = (CategoricalNode) node;
1:         int attr = (Integer) fields.get("CategoricalNode.attr").get(cnode);
0:         double[] values = (double[]) fields.get("CategoricalNode.values").get(cnode);
0:         Node[] childs = (Node[]) fields.get("CategoricalNode.childs").get(cnode);
0:         String[][] attrValues = (String[][]) fields.get("Dataset.values").get(dataset);
1:         int index = ArrayUtils.indexOf(values, instance.get(attr));
0:         if (index >= 0) {
1:           buff.append(attrNames == null ? attr : attrNames[attr]).append(" = ")
1:               .append(attrValues[attr][(int) instance.get(attr)]);
1:           buff.append(" -> ");
0:           buff.append(toStringPredict(childs[index], instance, dataset, attrNames, fields));
1:         }
1:       } else if (node instanceof NumericalNode) {
1:         NumericalNode nnode = (NumericalNode) node;
1:         int attr = (Integer) fields.get("NumericalNode.attr").get(nnode);
1:         double split = (Double) fields.get("NumericalNode.split").get(nnode);
1:         Node loChild = (Node) fields.get("NumericalNode.loChild").get(nnode);
1:         Node hiChild = (Node) fields.get("NumericalNode.hiChild").get(nnode);
1:         if (instance.get(attr) < split) {
0:           buff.append('(').append(attrNames == null ? attr : attrNames[attr]).append(" = ")
0:               .append(doubleToString(instance.get(attr))).append(") < ").append(doubleToString(split));
1:           buff.append(" -> ");
0:           buff.append(toStringPredict(loChild, instance, dataset, attrNames, fields));
1:         } else {
0:           buff.append('(').append(attrNames == null ? attr : attrNames[attr]).append(" = ")
0:               .append(doubleToString(instance.get(attr))).append(") >= ").append(doubleToString(split));
1:           buff.append(" -> ");
0:           buff.append(toStringPredict(hiChild, instance, dataset, attrNames, fields));
1:         }
1:       } else if (node instanceof Leaf) {
1:         Leaf leaf = (Leaf) node;
1:         double label = (Double) fields.get("Leaf.label").get(leaf);
1:         if (dataset.isNumerical(dataset.getLabelId())) {
1:           buff.append(doubleToString(label));
1:         } else {
0:           buff.append(dataset.getLabelString((int) label));
1:         }
1:     } catch (IllegalAccessException iae) {
1:       throw new IllegalStateException(iae);
/////////////////////////////////////////////////////////////////////////
1:   public static String[] predictTrace(Node tree, Data data, String[] attrNames) {
/////////////////////////////////////////////////////////////////////////
1:   public static void predictTracePrint(Node tree, Data data, String[] attrNames) {
0:       System.out.println(toStringPredict(tree, data.get(i), data.getDataset(), attrNames, reflectMap));
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:     StringBuilder buff = new StringBuilder();
/////////////////////////////////////////////////////////////////////////
1:         buff.append('\n');
/////////////////////////////////////////////////////////////////////////
0:       buff.append('\n');
0:       buff.append('\n');
/////////////////////////////////////////////////////////////////////////
0:         buff.append(" : ").append(doubleToString(label));
0:         buff.append(" : ").append(dataset.getLabelString((int) label));
/////////////////////////////////////////////////////////////////////////
1:     StringBuilder buff = new StringBuilder();
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:8642b98
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.df.tools;
1: 
1: import java.lang.reflect.Field;
1: import java.text.DecimalFormat;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.apache.commons.lang.ArrayUtils;
1: import org.apache.mahout.classifier.df.data.Data;
1: import org.apache.mahout.classifier.df.data.Dataset;
1: import org.apache.mahout.classifier.df.data.Instance;
1: import org.apache.mahout.classifier.df.node.CategoricalNode;
1: import org.apache.mahout.classifier.df.node.Leaf;
1: import org.apache.mahout.classifier.df.node.Node;
1: import org.apache.mahout.classifier.df.node.NumericalNode;
1: 
1: /**
1:  * This tool is to visualize the Decision tree
1:  */
1: public final class TreeVisualizer {
1: 
0:   private TreeVisualizer() {
1:   }
1: 
1:   private static String doubleToString(double value) {
1:     DecimalFormat df = new DecimalFormat("0.##");
1:     return df.format(value);
1:   }
1: 
0:   private static String toStringNode(Node node, Dataset dataset, String[] attrNames,
0:     Map<String, Field> fields, int layer) throws IllegalAccessException {
0:     StringBuffer buff = new StringBuffer();
1: 
0:     if (node instanceof CategoricalNode) {
0:       CategoricalNode cnode = (CategoricalNode) node;
0:       int attr = (Integer) fields.get("CategoricalNode.attr").get(cnode);
0:       double[] values = (double[]) fields.get("CategoricalNode.values").get(cnode);
0:       Node[] childs = (Node[]) fields.get("CategoricalNode.childs").get(cnode);
0:       String[][] attrValues = (String[][]) fields.get("Dataset.values").get(dataset);
0:       for (int i = 0; i < childs.length; i++) {
0:         buff.append("\n");
1:         for (int j = 0; j < layer; j++) {
1:           buff.append("|   ");
1:         }
0:         buff.append((attrNames == null ? attr : attrNames[attr]) + " = " + attrValues[attr][i]);
0:         int index = ArrayUtils.indexOf(values, i);
0:         if (index >= 0) {
0:           buff.append(toStringNode(childs[index], dataset, attrNames, fields, layer + 1));
1:         }
1:       }
0:     } else if (node instanceof NumericalNode) {
0:       NumericalNode nnode = (NumericalNode) node;
0:       int attr = (Integer) fields.get("NumericalNode.attr").get(nnode);
0:       double split = (Double) fields.get("NumericalNode.split").get(nnode);
0:       Node loChild = (Node) fields.get("NumericalNode.loChild").get(nnode);
0:       Node hiChild = (Node) fields.get("NumericalNode.hiChild").get(nnode);
0:       buff.append("\n");
1:       for (int j = 0; j < layer; j++) {
1:         buff.append("|   ");
1:       }
0:       buff.append((attrNames == null ? attr : attrNames[attr]) + " < " + doubleToString(split));
0:       buff.append(toStringNode(loChild, dataset, attrNames, fields, layer + 1));
0:       buff.append("\n");
1:       for (int j = 0; j < layer; j++) {
1:         buff.append("|   ");
1:       }
0:       buff.append((attrNames == null ? attr : attrNames[attr]) + " >= " + doubleToString(split));
0:       buff.append(toStringNode(hiChild, dataset, attrNames, fields, layer + 1));
0:     } else if (node instanceof Leaf) {
0:       Leaf leaf = (Leaf) node;
0:       double label = (Double) fields.get("Leaf.label").get(leaf);
0:       if (dataset.isNumerical(dataset.getLabelId())) {
0:         buff.append(" : " + doubleToString(label));
0:       } else {
0:         buff.append(" : " + dataset.getLabelString((int) label));
1:       }
1:     }
1: 
1:     return buff.toString();
1:   }
1: 
0:   private static Map<String, Field> getReflectMap() throws Exception {
0:     Map<String, Field> fields = new HashMap<String, Field>();
1: 
0:     Field m = CategoricalNode.class.getDeclaredField("attr");
0:     m.setAccessible(true);
0:     fields.put("CategoricalNode.attr", m);
0:     m = CategoricalNode.class.getDeclaredField("values");
0:     m.setAccessible(true);
0:     fields.put("CategoricalNode.values", m);
0:     m = CategoricalNode.class.getDeclaredField("childs");
0:     m.setAccessible(true);
0:     fields.put("CategoricalNode.childs", m);
0:     m = NumericalNode.class.getDeclaredField("attr");
0:     m.setAccessible(true);
0:     fields.put("NumericalNode.attr", m);
0:     m = NumericalNode.class.getDeclaredField("split");
0:     m.setAccessible(true);
0:     fields.put("NumericalNode.split", m);
0:     m = NumericalNode.class.getDeclaredField("loChild");
0:     m.setAccessible(true);
0:     fields.put("NumericalNode.loChild", m);
0:     m = NumericalNode.class.getDeclaredField("hiChild");
0:     m.setAccessible(true);
0:     fields.put("NumericalNode.hiChild", m);
0:     m = Leaf.class.getDeclaredField("label");
0:     m.setAccessible(true);
0:     fields.put("Leaf.label", m);
0:     m = Dataset.class.getDeclaredField("values");
0:     m.setAccessible(true);
0:     fields.put("Dataset.values", m);
1:     
1:     return fields;
1:   }
1:   
1:   /**
1:    * Decision tree to String
1:    * @param tree
1:    *          Node of tree
0:    * @param dataset
1:    * @param attrNames
1:    *          attribute names
1:    */
0:   public static String toString(Node tree, Dataset dataset, String[] attrNames)
0:     throws Exception {
1:     return toStringNode(tree, dataset, attrNames, getReflectMap(), 0);
1:   }
1: 
1:   /**
1:    * Print Decision tree
1:    * @param tree
1:    *          Node of tree
0:    * @param dataset
1:    * @param attrNames
1:    *          attribute names
1:    */
0:   public static void print(Node tree, Dataset dataset, String[] attrNames) throws Exception {
1:     System.out.println(toString(tree, dataset, attrNames));
1:   }
1: 
0:   private static String toStringPredict(Node node, Instance instance, Dataset dataset,
0:     String[] attrNames, Map<String, Field> fields) throws IllegalAccessException {
0:     StringBuffer buff = new StringBuffer();
1: 
0:     if (node instanceof CategoricalNode) {
0:       CategoricalNode cnode = (CategoricalNode) node;
0:       int attr = (Integer) fields.get("CategoricalNode.attr").get(cnode);
0:       double[] values = (double[]) fields.get("CategoricalNode.values").get(cnode);
0:       Node[] childs = (Node[]) fields.get("CategoricalNode.childs").get(cnode);
0:       String[][] attrValues = (String[][]) fields.get("Dataset.values").get(dataset);
1: 
0:       int index = ArrayUtils.indexOf(values, instance.get(attr));
0:       if (index >= 0) {
0:         buff.append((attrNames == null ? attr : attrNames[attr]) + " = "
0:           + attrValues[attr][(int) instance.get(attr)]);
0:         buff.append(" -> ");
0:         buff.append(toStringPredict(childs[index], instance, dataset, attrNames, fields));
1:       }
0:     } else if (node instanceof NumericalNode) {
0:       NumericalNode nnode = (NumericalNode) node;
0:       int attr = (Integer) fields.get("NumericalNode.attr").get(nnode);
0:       double split = (Double) fields.get("NumericalNode.split").get(nnode);
0:       Node loChild = (Node) fields.get("NumericalNode.loChild").get(nnode);
0:       Node hiChild = (Node) fields.get("NumericalNode.hiChild").get(nnode);
1: 
0:       if (instance.get(attr) < split) {
0:         buff.append("(" + (attrNames == null ? attr : attrNames[attr]) + " = "
0:           + doubleToString(instance.get(attr)) + ") < " + doubleToString(split));
0:         buff.append(" -> ");
0:         buff.append(toStringPredict(loChild, instance, dataset, attrNames, fields));
0:       } else {
0:         buff.append("(" + (attrNames == null ? attr : attrNames[attr]) + " = "
0:           + doubleToString(instance.get(attr)) + ") >= " + doubleToString(split));
0:         buff.append(" -> ");
0:         buff.append(toStringPredict(hiChild, instance, dataset, attrNames, fields));
1:       }
0:     } else if (node instanceof Leaf) {
0:       Leaf leaf = (Leaf) node;
0:       double label = (Double) fields.get("Leaf.label").get(leaf);
0:       if (dataset.isNumerical(dataset.getLabelId())) {
0:         buff.append(doubleToString(label));
0:       } else {
0:         buff.append(dataset.getLabelString((int) label));
1:       }
1:     }
1: 
1:     return buff.toString();
1:   }
1: 
1:   /**
1:    * Predict trace to String
1:    * @param tree
1:    *          Node of tree
0:    * @param data
1:    * @param attrNames
1:    *          attribute names
1:    */
0:   public static String[] predictTrace(Node tree, Data data, String[] attrNames)
0:     throws Exception {
0:     Map<String, Field> reflectMap = getReflectMap();
1:     String[] prediction = new String[data.size()];
1:     for (int i = 0; i < data.size(); i++) {
0:       prediction[i] = toStringPredict(tree, data.get(i), data.getDataset(), attrNames, reflectMap);
1:     }
1:     return prediction;
1:   }
1: 
1:   /**
1:    * Print predict trace
1:    * @param tree
1:    *          Node of tree
0:    * @param data
1:    * @param attrNames
1:    *          attribute names
1:    */
0:   public static void predictTracePrint(Node tree, Data data, String[] attrNames)
0:     throws Exception {
0:     Map<String, Field> reflectMap = getReflectMap();
1:     for (int i = 0; i < data.size(); i++) {
0:       System.out.println(toStringPredict(tree, data.get(i), data.getDataset(), attrNames,
0:         reflectMap));
1:     }
1:   }
1: }
============================================================================