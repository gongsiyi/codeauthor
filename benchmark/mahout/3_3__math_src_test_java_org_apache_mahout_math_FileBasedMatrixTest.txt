1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
5:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math;
1:a07bfc3: 
1:8b6a26a: import org.apache.mahout.common.RandomUtils;
1:a07bfc3: import org.apache.mahout.math.function.Functions;
1:a07bfc3: import org.apache.mahout.math.random.MultiNormal;
1:8b6a26a: import org.junit.Assume;
1:a07bfc3: import org.junit.Test;
1:a07bfc3: 
1:a07bfc3: import java.io.File;
1:a07bfc3: import java.io.IOException;
1:a07bfc3: import java.util.Random;
1:a07bfc3: 
1:8b6a26a: public class FileBasedMatrixTest extends MahoutTestCase {
1:0b8db82:   // 10 million rows x 40 columns x 8 bytes = 3.2GB of data
1:0b8db82:   // we need >2GB to stress the file based matrix implementation
1:0b8db82:   private static final int ROWS = 10 * 1000 * 1000;
1:0b8db82:   private static final int COLUMNS = 40;
1:a07bfc3: 
1:0b8db82:   @Test
1:0b8db82:   public void testBigMatrix() throws IOException {
1:0b8db82:     // only run this test if -DrunSlowTests is used.  Also requires 4GB or more of heap.
1:8b6a26a:     Assume.assumeNotNull(System.getProperty("runSlowTests"));
1:a07bfc3: 
1:0b8db82:     Matrix m0 = new SparseRowMatrix(ROWS, COLUMNS);
1:8b6a26a:     Random gen = RandomUtils.getRandom();
1:0b8db82:     for (int i = 0; i < 1000; i++) {
1:0b8db82:       m0.set(gen.nextInt(ROWS), gen.nextInt(COLUMNS), matrixValue(i));
5:a07bfc3:     }
1:f689fad:     File f = File.createTempFile("foo", ".m", getTestTempDir());
1:0b8db82:     f.deleteOnExit();
1:0b8db82:     System.out.printf("Starting to write to %s\n", f.getAbsolutePath());
1:0b8db82:     FileBasedMatrix.writeMatrix(f, m0);
1:0b8db82:     System.out.printf("done\n");
1:8b6a26a:     System.out.printf("File is %.1f MB\n", f.length() / 1.0e6);
1:a07bfc3: 
1:0b8db82:     FileBasedMatrix m1 = new FileBasedMatrix(ROWS, COLUMNS);
1:0b8db82:     System.out.printf("Starting read\n");
1:0b8db82:     m1.setData(f, false);
1:8b6a26a:     gen = RandomUtils.getRandom();
1:0b8db82:     for (int i = 0; i < 1000; i++) {
1:0b8db82:       assertEquals(matrixValue(i), m1.get(gen.nextInt(ROWS), gen.nextInt(COLUMNS)), 0.0);
1:0b8db82:     }
1:0b8db82:     System.out.printf("done\n");
1:a07bfc3:   }
1:a07bfc3: 
1:8b6a26a:   private static int matrixValue(int i) {
1:0b8db82:     return (i * 88513) % 10000;
1:0b8db82:   }
1:a07bfc3: 
1:0b8db82:   @Test
1:0b8db82:   public void testSetData() throws IOException {
1:f689fad:     File f = File.createTempFile("matrix", ".m", getTestTempDir());
1:0b8db82:     f.deleteOnExit();
1:a07bfc3: 
1:0b8db82:     Matrix m0 = new DenseMatrix(100000, 30);
1:0b8db82:     MultiNormal gen = new MultiNormal(30);
1:0b8db82:     for (MatrixSlice row : m0) {
1:0b8db82:       row.vector().assign(gen.sample());
1:a07bfc3:     }
1:0b8db82:     FileBasedMatrix.writeMatrix(f, m0);
1:0b8db82: 
1:0b8db82:     FileBasedMatrix m = new FileBasedMatrix(100000, 30);
1:0b8db82:     m.setData(f, true);
1:0b8db82: 
1:8b6a26a:     assertEquals(0, m0.minus(m).aggregate(Functions.MAX, Functions.ABS), 1.0e-8);
1:0b8db82: 
1:0b8db82:     int i = 0;
1:0b8db82:     for (MatrixSlice row : m) {
1:8b6a26a:       assertEquals(0, row.vector().minus(m0.viewRow(i++)).norm(1), 1.0e-8);
1:0b8db82:     }
1:0b8db82:   }
1:a07bfc3: }
============================================================================
author:akm
-------------------------------------------------------------------------------
commit:f689fad
/////////////////////////////////////////////////////////////////////////
1:     File f = File.createTempFile("foo", ".m", getTestTempDir());
/////////////////////////////////////////////////////////////////////////
1:     File f = File.createTempFile("matrix", ".m", getTestTempDir());
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
1: import org.junit.Assume;
1: public class FileBasedMatrixTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:     Assume.assumeNotNull(System.getProperty("runSlowTests"));
1:     Random gen = RandomUtils.getRandom();
0:     File f = File.createTempFile("foo", ".m");
1:     System.out.printf("File is %.1f MB\n", f.length() / 1.0e6);
1:     gen = RandomUtils.getRandom();
1:   private static int matrixValue(int i) {
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, m0.minus(m).aggregate(Functions.MAX, Functions.ABS), 1.0e-8);
1:       assertEquals(0, row.vector().minus(m0.viewRow(i++)).norm(1), 1.0e-8);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:0b8db82
/////////////////////////////////////////////////////////////////////////
1:   // 10 million rows x 40 columns x 8 bytes = 3.2GB of data
1:   // we need >2GB to stress the file based matrix implementation
1:   private static final int ROWS = 10 * 1000 * 1000;
1:   private static final int COLUMNS = 40;
1:   @Test
1:   public void testBigMatrix() throws IOException {
1:     // only run this test if -DrunSlowTests is used.  Also requires 4GB or more of heap.
0:     assumeNotNull(System.getProperty("runSlowTests"));
1:     Matrix m0 = new SparseRowMatrix(ROWS, COLUMNS);
0:     Random gen = new Random(1);
1:     for (int i = 0; i < 1000; i++) {
1:       m0.set(gen.nextInt(ROWS), gen.nextInt(COLUMNS), matrixValue(i));
0:     final File f = File.createTempFile("foo", ".m");
1:     f.deleteOnExit();
1:     System.out.printf("Starting to write to %s\n", f.getAbsolutePath());
1:     FileBasedMatrix.writeMatrix(f, m0);
1:     System.out.printf("done\n");
0:     System.out.printf("File is %.1f MB\n", f.length() / 1e6);
1:     FileBasedMatrix m1 = new FileBasedMatrix(ROWS, COLUMNS);
1:     System.out.printf("Starting read\n");
1:     m1.setData(f, false);
0:     gen = new Random(1);
1:     for (int i = 0; i < 1000; i++) {
1:       assertEquals(matrixValue(i), m1.get(gen.nextInt(ROWS), gen.nextInt(COLUMNS)), 0.0);
1:     System.out.printf("done\n");
1:   }
0:   private int matrixValue(int i) {
1:     return (i * 88513) % 10000;
1:   }
1:   @Test
1:   public void testSetData() throws IOException {
0:     File f = File.createTempFile("matrix", ".m");
1:     f.deleteOnExit();
1:     Matrix m0 = new DenseMatrix(100000, 30);
1:     MultiNormal gen = new MultiNormal(30);
1:     for (MatrixSlice row : m0) {
1:       row.vector().assign(gen.sample());
1:     FileBasedMatrix.writeMatrix(f, m0);
1: 
1:     FileBasedMatrix m = new FileBasedMatrix(100000, 30);
1:     m.setData(f, true);
1: 
0:     assertEquals(0, m0.minus(m).aggregate(Functions.MAX, Functions.ABS), 1e-8);
1: 
1:     int i = 0;
1:     for (MatrixSlice row : m) {
0:       assertEquals(0, row.vector().minus(m0.viewRow(i++)).norm(1), 1e-8);
1:     }
1:   }
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.math.function.Functions;
1: import org.apache.mahout.math.random.MultiNormal;
1: import org.junit.Test;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Random;
1: 
0: import static junit.framework.Assert.assertEquals;
0: import static org.junit.Assume.assumeNotNull;
1: 
0: public class FileBasedMatrixTest {
0:     // 10 million rows x 40 columns x 8 bytes = 3.2GB of data
0:     // we need >2GB to stress the file based matrix implementation
0:     private static final int ROWS = 10 * 1000 * 1000;
0:     private static final int COLUMNS = 40;
1: 
0:     @Test
0:     public void testBigMatrix() throws IOException {
0:         // only run this test if -DrunSlowTests is used.  Also requires 4GB or more of heap.
0:         assumeNotNull(System.getProperty("runSlowTests"));
1: 
0:         Matrix m0 = new SparseRowMatrix(ROWS, COLUMNS);
0:         Random gen = new Random(1);
0:         for (int i = 0; i < 1000; i++) {
0:             m0.set(gen.nextInt(ROWS), gen.nextInt(COLUMNS), matrixValue(i));
1:         }
0:         final File f = File.createTempFile("foo", ".m");
0:         f.deleteOnExit();
0:         System.out.printf("Starting to write to %s\n", f.getAbsolutePath());
0:         FileBasedMatrix.writeMatrix(f, m0);
0:         System.out.printf("done\n");
0:         System.out.printf("File is %.1f MB\n", f.length() / 1e6);
1: 
0:         FileBasedMatrix m1 = new FileBasedMatrix(ROWS, COLUMNS);
0:         System.out.printf("Starting read\n");
0:         m1.setData(f, false);
0:         gen = new Random(1);
0:         for (int i = 0; i < 1000; i++) {
0:             assertEquals(matrixValue(i), m1.get(gen.nextInt(ROWS), gen.nextInt(COLUMNS)), 0.0);
1:         }
0:         System.out.printf("done\n");
1:     }
1: 
0:     private int matrixValue(int i) {
0:         return (i * 88513) % 10000;
1:     }
1: 
0:     @Test
0:     public void testSetData() throws IOException {
0:         File f = File.createTempFile("matrix", ".m");
0:         f.deleteOnExit();
1: 
0:         Matrix m0 = new DenseMatrix(100000, 30);
0:         MultiNormal gen = new MultiNormal(30);
0:         for (MatrixSlice row : m0) {
0:             row.vector().assign(gen.sample());
1:         }
0:         FileBasedMatrix.writeMatrix(f, m0);
1: 
0:         FileBasedMatrix m = new FileBasedMatrix(100000, 30);
0:         m.setData(f, true);
1: 
0:         assertEquals(0, m0.minus(m).aggregate(Functions.MAX, Functions.ABS), 1e-8);
1: 
0:         int i = 0;
0:         for (MatrixSlice row : m) {
0:             assertEquals(0, row.vector().minus(m0.viewRow(i++)).norm(1), 1e-8);
1:         }
1:     }
1: }
============================================================================