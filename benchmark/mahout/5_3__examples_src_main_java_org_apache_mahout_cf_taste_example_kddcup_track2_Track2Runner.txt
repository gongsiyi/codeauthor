1:7a9e99e: /**
1:7a9e99e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9e99e:  * contributor license agreements.  See the NOTICE file distributed with
1:7a9e99e:  * this work for additional information regarding copyright ownership.
1:7a9e99e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7a9e99e:  * (the "License"); you may not use this file except in compliance with
1:7a9e99e:  * the License.  You may obtain a copy of the License at
1:7a9e99e:  *
1:7a9e99e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7a9e99e:  *
1:7a9e99e:  * Unless required by applicable law or agreed to in writing, software
1:7a9e99e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7a9e99e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9e99e:  * See the License for the specific language governing permissions and
1:7a9e99e:  * limitations under the License.
1:7a9e99e:  */
9:7a9e99e: 
1:7a9e99e: package org.apache.mahout.cf.taste.example.kddcup.track2;
1:7a9e99e: 
1:7a9e99e: import org.apache.mahout.cf.taste.example.kddcup.DataFileIterable;
1:7a9e99e: import org.apache.mahout.cf.taste.example.kddcup.KDDCupDataModel;
1:7a9e99e: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:7a9e99e: import org.apache.mahout.common.Pair;
1:7a9e99e: import org.slf4j.Logger;
1:7a9e99e: import org.slf4j.LoggerFactory;
1:7a9e99e: 
1:4ef9d31: import java.io.BufferedOutputStream;
1:4ef9d31: import java.io.File;
1:4ef9d31: import java.io.FileOutputStream;
1:4ef9d31: import java.io.OutputStream;
1:4ef9d31: import java.util.ArrayList;
1:4ef9d31: import java.util.Collection;
1:4ef9d31: import java.util.List;
1:4ef9d31: import java.util.concurrent.ExecutorService;
1:4ef9d31: import java.util.concurrent.Executors;
1:4ef9d31: import java.util.concurrent.Future;
1:4ef9d31: 
1:7a9e99e: /**
1:d25dd20:  * <p>Runs "track 2" of the KDD Cup competition using whatever recommender is inside {@link Track2Recommender}
1:7a9e99e:  * and attempts to output the result in the correct contest format.</p>
1:7a9e99e:  *
1:39fe224:  * <p>Run as: {@code Track2Runner [track 2 data file directory] [output file]}</p>
1:7a9e99e:  */
1:7a9e99e: public final class Track2Runner {
1:7a9e99e: 
1:7a9e99e:   private static final Logger log = LoggerFactory.getLogger(Track2Runner.class);
1:7a9e99e: 
1:7a9e99e:   private Track2Runner() {
8:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   public static void main(String[] args) throws Exception {
1:7a9e99e: 
1:7a9e99e:     File dataFileDirectory = new File(args[0]);
1:7a9e99e:     if (!dataFileDirectory.exists() || !dataFileDirectory.isDirectory()) {
1:7a9e99e:       throw new IllegalArgumentException("Bad data file directory: " + dataFileDirectory);
1:7a9e99e:     }
1:7a9e99e: 
1:d25dd20:     long start = System.currentTimeMillis();
1:d25dd20: 
1:7a9e99e:     KDDCupDataModel model = new KDDCupDataModel(KDDCupDataModel.getTrainingFile(dataFileDirectory));
1:d25dd20:     Track2Recommender recommender = new Track2Recommender(model, dataFileDirectory);
1:7a9e99e: 
1:d25dd20:     long end = System.currentTimeMillis();
1:d25dd20:     log.info("Loaded model in {}s", (end - start) / 1000);
1:d25dd20:     start = end;
1:7a9e99e: 
1:4ef9d31:     Collection<Track2Callable> callables = new ArrayList<>();
1:7a9e99e:     for (Pair<PreferenceArray,long[]> tests : new DataFileIterable(KDDCupDataModel.getTestFile(dataFileDirectory))) {
1:7a9e99e:       PreferenceArray userTest = tests.getFirst();
1:d25dd20:       callables.add(new Track2Callable(recommender, userTest));
1:7a9e99e:     }
1:7a9e99e: 
1:d25dd20:     int cores = Runtime.getRuntime().availableProcessors();
1:d25dd20:     log.info("Running on {} cores", cores);
1:d25dd20:     ExecutorService executor = Executors.newFixedThreadPool(cores);
1:d25dd20:     List<Future<UserResult>> futures = executor.invokeAll(callables);
1:d25dd20:     executor.shutdown();
1:d25dd20: 
1:d25dd20:     end = System.currentTimeMillis();
1:d25dd20:     log.info("Ran recommendations in {}s", (end - start) / 1000);
1:d25dd20:     start = end;
1:d25dd20: 
1:4ef9d31:     try (OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(args[1])))){
1:d608a88:       long lastUserID = Long.MIN_VALUE;
1:d608a88:       for (Future<UserResult> future : futures) {
1:d608a88:         UserResult result = future.get();
1:d608a88:         long userID = result.getUserID();
1:d608a88:         if (userID <= lastUserID) {
1:d608a88:           throw new IllegalStateException();
1:d608a88:         }
1:d608a88:         lastUserID = userID;
1:d608a88:         out.write(result.getResultBytes());
1:d25dd20:       }
1:d25dd20:     }
1:7a9e99e: 
1:d25dd20:     end = System.currentTimeMillis();
1:d25dd20:     log.info("Wrote output in {}s", (end - start) / 1000);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedOutputStream;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.OutputStream;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: 
/////////////////////////////////////////////////////////////////////////
1:     Collection<Track2Callable> callables = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:     try (OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(args[1])))){
/////////////////////////////////////////////////////////////////////////
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(out, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(out, true);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     Collection<Track2Callable> callables = Lists.newArrayList();
commit:d608a88
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:     try {
1:       long lastUserID = Long.MIN_VALUE;
1:       for (Future<UserResult> future : futures) {
1:         UserResult result = future.get();
1:         long userID = result.getUserID();
1:         if (userID <= lastUserID) {
1:           throw new IllegalStateException();
1:         }
1:         lastUserID = userID;
1:         out.write(result.getResultBytes());
0:     } finally {
0:       Closeables.closeQuietly(out);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:  * <p>Run as: {@code Track2Runner [track 2 data file directory] [output file]}</p>
commit:d25dd20
/////////////////////////////////////////////////////////////////////////
0: import java.io.BufferedOutputStream;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.Future;
1:  * <p>Runs "track 2" of the KDD Cup competition using whatever recommender is inside {@link Track2Recommender}
/////////////////////////////////////////////////////////////////////////
1:     long start = System.currentTimeMillis();
1: 
1:     Track2Recommender recommender = new Track2Recommender(model, dataFileDirectory);
1:     long end = System.currentTimeMillis();
1:     log.info("Loaded model in {}s", (end - start) / 1000);
1:     start = end;
0:     Collection<Track2Callable> callables = new ArrayList<Track2Callable>();
1:       callables.add(new Track2Callable(recommender, userTest));
1:     int cores = Runtime.getRuntime().availableProcessors();
1:     log.info("Running on {} cores", cores);
1:     ExecutorService executor = Executors.newFixedThreadPool(cores);
1:     List<Future<UserResult>> futures = executor.invokeAll(callables);
1:     executor.shutdown();
1: 
1:     end = System.currentTimeMillis();
1:     log.info("Ran recommendations in {}s", (end - start) / 1000);
1:     start = end;
1: 
0:     OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(args[1])));
0:     long lastUserID = Long.MIN_VALUE;
0:     for (Future<UserResult> future : futures) {
0:       UserResult result = future.get();
0:       long userID = result.getUserID();
0:       if (userID <= lastUserID) {
0:         throw new IllegalStateException();
1:       }
0:       lastUserID = userID;
0:       out.write(result.getResultBytes());
1:     }
0:     out.flush();
1:     end = System.currentTimeMillis();
1:     log.info("Wrote output in {}s", (end - start) / 1000);
commit:7a9e99e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup.track2;
1: 
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.OutputStream;
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.List;
0: import java.util.TreeMap;
1: 
0: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1: import org.apache.mahout.cf.taste.example.kddcup.DataFileIterable;
1: import org.apache.mahout.cf.taste.example.kddcup.KDDCupDataModel;
0: import org.apache.mahout.cf.taste.example.kddcup.KDDCupRecommender;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.common.Pair;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * <p>Runs "track 2" of the KDD Cup competition using whatever recommender is inside {@link KDDCupRecommender}
1:  * and attempts to output the result in the correct contest format.</p>
1:  *
0:  * <p>Run as: <code>Track2Runner [track 2 data file directory] [output file]</code></p>
1:  */
1: public final class Track2Runner {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(Track2Runner.class);
1: 
1:   private Track2Runner() {
1:   }
1: 
1:   public static void main(String[] args) throws Exception {
1: 
1:     File dataFileDirectory = new File(args[0]);
1:     if (!dataFileDirectory.exists() || !dataFileDirectory.isDirectory()) {
1:       throw new IllegalArgumentException("Bad data file directory: " + dataFileDirectory);
1:     }
1: 
1:     KDDCupDataModel model = new KDDCupDataModel(KDDCupDataModel.getTrainingFile(dataFileDirectory));
0:     KDDCupRecommender recommender = new KDDCupRecommender(model);
1: 
0:     File outFile = new File(args[1]);
0:     OutputStream out = new FileOutputStream(outFile);
1: 
1:     for (Pair<PreferenceArray,long[]> tests : new DataFileIterable(KDDCupDataModel.getTestFile(dataFileDirectory))) {
1: 
1:       PreferenceArray userTest = tests.getFirst();
0:       if (userTest.length() != 6) {
0:         throw new IllegalArgumentException("Expecting 6 items for user but got " + userTest);
1:       }
0:       long userID = userTest.get(0).getUserID();
1: 
0:       TreeMap<Double,Long> estimateToItemID = new TreeMap<Double,Long>(Collections.reverseOrder());
1: 
0:       for (int i = 0; i < userTest.length(); i++) {
0:         long itemID = userTest.getItemID(i);
0:         double estimate;
0:         try {
0:           estimate = recommender.estimatePreference(userID, itemID);
0:         } catch (NoSuchItemException nsie) {
0:           // OK in the sample data provided before the contest, should never happen otherwise
0:           log.warn("Unknown item {}; OK unless this is the real contest data", itemID);
0:           continue;
1:         }
1: 
0:         log.debug("Estimate for user {}, item {}: {}", new Object[] {userID, itemID, estimate});
0:         if (!Double.isNaN(estimate)) {
0:           estimateToItemID.put(estimate, itemID);
1:         }
1:       }
1: 
0:       Collection<Long> itemIDs = estimateToItemID.values();
0:       log.debug("Scores are {}", itemIDs);
0:       List<Long> topThree = new ArrayList<Long>(itemIDs);
0:       if (topThree.size() > 3) {
0:         topThree = topThree.subList(0, 3);
1:       }
0:       log.debug("Top three are {}", topThree);
1: 
0:       for (int i = 0; i < userTest.length(); i++) {
0:         long itemID = userTest.getItemID(i);
0:         if (topThree.contains(itemID)) {
0:           out.write('1');
0:         } else {
0:           out.write('0');
1:         }
1:       }
1: 
1:     }
1: 
0:     out.close();
1: 
1:   }
1: 
1: }
============================================================================