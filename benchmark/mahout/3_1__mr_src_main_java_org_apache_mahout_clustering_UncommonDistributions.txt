1:b60c909: /**
1:b60c909:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b60c909:  * contributor license agreements.  See the NOTICE file distributed with
1:b60c909:  * this work for additional information regarding copyright ownership.
1:b60c909:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b60c909:  * (the "License"); you may not use this file except in compliance with
1:b60c909:  * the License.  You may obtain a copy of the License at
1:b60c909:  *
1:b60c909:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b60c909:  *
1:b60c909:  * Unless required by applicable law or agreed to in writing, software
1:b60c909:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b60c909:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b60c909:  * See the License for the specific language governing permissions and
1:b60c909:  * limitations under the License.
1:b60c909:  */
1:b60c909: 
1:b60c909: package org.apache.mahout.clustering;
1:b60c909: 
1:b60c909: import org.apache.commons.math3.distribution.NormalDistribution;
1:b60c909: import org.apache.commons.math3.distribution.RealDistribution;
1:b60c909: import org.apache.mahout.common.RandomUtils;
1:b60c909: import org.apache.mahout.common.RandomWrapper;
1:b60c909: 
1:b60c909: public final class UncommonDistributions {
1:b60c909: 
1:b60c909:   private static final RandomWrapper RANDOM = RandomUtils.getRandom();
1:b60c909:   
1:b60c909:   private UncommonDistributions() {}
1:b60c909:   
1:b60c909:   // =============== start of BSD licensed code. See LICENSE.txt
1:b60c909:   /**
1:b60c909:    * Returns a double sampled according to this distribution. Uniformly fast for all k > 0. (Reference:
1:b60c909:    * Non-Uniform Random Variate Generation, Devroye http://cgm.cs.mcgill.ca/~luc/rnbookindex.html) Uses
1:b60c909:    * Cheng's rejection algorithm (GB) for k>=1, rejection from Weibull distribution for 0 < k < 1.
1:b60c909:    */
1:b60c909:   public static double rGamma(double k, double lambda) {
1:b60c909:     boolean accept = false;
1:b60c909:     if (k >= 1.0) {
1:b60c909:       // Cheng's algorithm
1:b60c909:       double b = k - Math.log(4.0);
1:b60c909:       double c = k + Math.sqrt(2.0 * k - 1.0);
1:b60c909:       double lam = Math.sqrt(2.0 * k - 1.0);
1:b60c909:       double cheng = 1.0 + Math.log(4.5);
1:b60c909:       double x;
1:b60c909:       do {
1:b60c909:         double u = RANDOM.nextDouble();
1:b60c909:         double v = RANDOM.nextDouble();
1:b60c909:         double y = 1.0 / lam * Math.log(v / (1.0 - v));
1:b60c909:         x = k * Math.exp(y);
1:b60c909:         double z = u * v * v;
1:b60c909:         double r = b + c * y - x;
1:b60c909:         if (r >= 4.5 * z - cheng || r >= Math.log(z)) {
1:b60c909:           accept = true;
1:b60c909:         }
1:b60c909:       } while (!accept);
1:b60c909:       return x / lambda;
1:b60c909:     } else {
1:b60c909:       // Weibull algorithm
1:b60c909:       double c = 1.0 / k;
1:b60c909:       double d = (1.0 - k) * Math.pow(k, k / (1.0 - k));
1:b60c909:       double x;
1:b60c909:       do {
1:b60c909:         double u = RANDOM.nextDouble();
1:b60c909:         double v = RANDOM.nextDouble();
1:b60c909:         double z = -Math.log(u);
1:b60c909:         double e = -Math.log(v);
1:b60c909:         x = Math.pow(z, c);
1:b60c909:         if (z + e >= d + x) {
1:b60c909:           accept = true;
1:b60c909:         }
1:b60c909:       } while (!accept);
1:b60c909:       return x / lambda;
1:b60c909:     }
1:b60c909:   }
1:b60c909:   
1:b60c909:   // ============= end of BSD licensed code
1:b60c909:   
1:b60c909:   /**
1:b60c909:    * Returns a random sample from a beta distribution with the given shapes
1:b60c909:    * 
1:b60c909:    * @param shape1
1:b60c909:    *          a double representing shape1
1:b60c909:    * @param shape2
1:b60c909:    *          a double representing shape2
1:b60c909:    * @return a Vector of samples
1:b60c909:    */
1:b60c909:   public static double rBeta(double shape1, double shape2) {
1:b60c909:     double gam1 = rGamma(shape1, 1.0);
1:b60c909:     double gam2 = rGamma(shape2, 1.0);
1:b60c909:     return gam1 / (gam1 + gam2);
1:b60c909:     
1:b60c909:   }
1:b60c909:   
1:b60c909:   /**
1:b60c909:    * Return a random value from a normal distribution with the given mean and standard deviation
1:b60c909:    * 
1:b60c909:    * @param mean
1:b60c909:    *          a double mean value
1:b60c909:    * @param sd
1:b60c909:    *          a double standard deviation
1:b60c909:    * @return a double sample
1:b60c909:    */
1:b60c909:   public static double rNorm(double mean, double sd) {
1:b60c909:     RealDistribution dist = new NormalDistribution(RANDOM.getRandomGenerator(),
1:b60c909:                                                    mean,
1:b60c909:                                                    sd,
1:b60c909:                                                    NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
1:b60c909:     return dist.sample();
1:b60c909:   }
1:b60c909:   
1:b60c909:   /**
1:b60c909:    * Returns an integer sampled according to this distribution. Takes time proportional to np + 1. (Reference:
1:b60c909:    * Non-Uniform Random Variate Generation, Devroye http://cgm.cs.mcgill.ca/~luc/rnbookindex.html) Second
1:b60c909:    * time-waiting algorithm.
1:b60c909:    */
1:b60c909:   public static int rBinomial(int n, double p) {
1:b60c909:     if (p >= 1.0) {
1:b60c909:       return n; // needed to avoid infinite loops and negative results
1:b60c909:     }
1:b60c909:     double q = -Math.log1p(-p);
1:b60c909:     double sum = 0.0;
1:b60c909:     int x = 0;
1:b60c909:     while (sum <= q) {
1:b60c909:       double u = RANDOM.nextDouble();
1:b60c909:       double e = -Math.log(u);
1:b60c909:       sum += e / (n - x);
1:b60c909:       x++;
1:b60c909:     }
1:b60c909:     if (x == 0) {
1:b60c909:       return 0;
1:b60c909:     }
1:b60c909:     return x - 1;
1:b60c909:   }
1:b60c909: 
1:b60c909: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.clustering;
1: 
1: import org.apache.commons.math3.distribution.NormalDistribution;
1: import org.apache.commons.math3.distribution.RealDistribution;
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.common.RandomWrapper;
1: 
1: public final class UncommonDistributions {
1: 
1:   private static final RandomWrapper RANDOM = RandomUtils.getRandom();
1:   
1:   private UncommonDistributions() {}
1:   
1:   // =============== start of BSD licensed code. See LICENSE.txt
1:   /**
1:    * Returns a double sampled according to this distribution. Uniformly fast for all k > 0. (Reference:
1:    * Non-Uniform Random Variate Generation, Devroye http://cgm.cs.mcgill.ca/~luc/rnbookindex.html) Uses
1:    * Cheng's rejection algorithm (GB) for k>=1, rejection from Weibull distribution for 0 < k < 1.
1:    */
1:   public static double rGamma(double k, double lambda) {
1:     boolean accept = false;
1:     if (k >= 1.0) {
1:       // Cheng's algorithm
1:       double b = k - Math.log(4.0);
1:       double c = k + Math.sqrt(2.0 * k - 1.0);
1:       double lam = Math.sqrt(2.0 * k - 1.0);
1:       double cheng = 1.0 + Math.log(4.5);
1:       double x;
1:       do {
1:         double u = RANDOM.nextDouble();
1:         double v = RANDOM.nextDouble();
1:         double y = 1.0 / lam * Math.log(v / (1.0 - v));
1:         x = k * Math.exp(y);
1:         double z = u * v * v;
1:         double r = b + c * y - x;
1:         if (r >= 4.5 * z - cheng || r >= Math.log(z)) {
1:           accept = true;
1:         }
1:       } while (!accept);
1:       return x / lambda;
1:     } else {
1:       // Weibull algorithm
1:       double c = 1.0 / k;
1:       double d = (1.0 - k) * Math.pow(k, k / (1.0 - k));
1:       double x;
1:       do {
1:         double u = RANDOM.nextDouble();
1:         double v = RANDOM.nextDouble();
1:         double z = -Math.log(u);
1:         double e = -Math.log(v);
1:         x = Math.pow(z, c);
1:         if (z + e >= d + x) {
1:           accept = true;
1:         }
1:       } while (!accept);
1:       return x / lambda;
1:     }
1:   }
1:   
1:   // ============= end of BSD licensed code
1:   
1:   /**
1:    * Returns a random sample from a beta distribution with the given shapes
1:    * 
1:    * @param shape1
1:    *          a double representing shape1
1:    * @param shape2
1:    *          a double representing shape2
1:    * @return a Vector of samples
1:    */
1:   public static double rBeta(double shape1, double shape2) {
1:     double gam1 = rGamma(shape1, 1.0);
1:     double gam2 = rGamma(shape2, 1.0);
1:     return gam1 / (gam1 + gam2);
1:     
1:   }
1:   
1:   /**
1:    * Return a random value from a normal distribution with the given mean and standard deviation
1:    * 
1:    * @param mean
1:    *          a double mean value
1:    * @param sd
1:    *          a double standard deviation
1:    * @return a double sample
1:    */
1:   public static double rNorm(double mean, double sd) {
1:     RealDistribution dist = new NormalDistribution(RANDOM.getRandomGenerator(),
1:                                                    mean,
1:                                                    sd,
1:                                                    NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
1:     return dist.sample();
1:   }
1:   
1:   /**
1:    * Returns an integer sampled according to this distribution. Takes time proportional to np + 1. (Reference:
1:    * Non-Uniform Random Variate Generation, Devroye http://cgm.cs.mcgill.ca/~luc/rnbookindex.html) Second
1:    * time-waiting algorithm.
1:    */
1:   public static int rBinomial(int n, double p) {
1:     if (p >= 1.0) {
1:       return n; // needed to avoid infinite loops and negative results
1:     }
1:     double q = -Math.log1p(-p);
1:     double sum = 0.0;
1:     int x = 0;
1:     while (sum <= q) {
1:       double u = RANDOM.nextDouble();
1:       double e = -Math.log(u);
1:       sum += e / (n - x);
1:       x++;
1:     }
1:     if (x == 0) {
1:       return 0;
1:     }
1:     return x - 1;
1:   }
1: 
1: }
============================================================================