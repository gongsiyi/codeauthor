1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
12:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math;
1:be94533: 
1:a07bfc3: import org.apache.mahout.math.function.DoubleDoubleFunction;
1:a07bfc3: import org.apache.mahout.math.function.DoubleFunction;
1:a07bfc3: 
1:a07bfc3: /**
1:a07bfc3:  * A delegating vector provides an easy way to decorate vectors with weights or id's and such while
1:a07bfc3:  * keeping all of the Vector functionality.
1:aebdfaf:  *
1:aebdfaf:  * This vector implements LengthCachingVector because almost all delegates cache the length and
1:aebdfaf:  * the cost of false positives is very low.
1:a07bfc3:  */
1:aebdfaf: public class DelegatingVector implements Vector, LengthCachingVector {
1:0e847ae:   protected Vector delegate;
1:0e847ae: 
1:0e847ae:   public DelegatingVector(Vector v) {
1:0e847ae:     delegate = v;
1:1e3f7ae:   }
1:0e847ae: 
1:1e3f7ae:   protected DelegatingVector() {
1:6d16230:   }
1:1e3f7ae: 
1:0e847ae:   public Vector getVector() {
1:0e847ae:     return delegate;
1:0e847ae:   }
1:0e847ae: 
1:0e847ae:   @Override
1:0e847ae:   public double aggregate(DoubleDoubleFunction aggregator, DoubleFunction map) {
1:0e847ae:     return delegate.aggregate(aggregator, map);
1:be94533:   }
1:be94533: 
1:be94533:   @Override
1:0e847ae:   public double aggregate(Vector other, DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner) {
1:0e847ae:     return delegate.aggregate(other, aggregator, combiner);
1:0e847ae:   }
1:0e847ae: 
1:0e847ae:   @Override
1:0e847ae:   public Vector viewPart(int offset, int length) {
1:0e847ae:     return delegate.viewPart(offset, length);
1:0e847ae:   }
1:0e847ae: 
1:a8d3dbd:   @SuppressWarnings("CloneDoesntDeclareCloneNotSupportedException")
1:0e847ae:   @Override
1:0e847ae:   public Vector clone() {
1:acda70b:     DelegatingVector r;
1:0e847ae:     try {
1:acda70b:       r = (DelegatingVector) super.clone();
1:0e847ae:     } catch (CloneNotSupportedException e) {
1:0e847ae:       throw new RuntimeException("Clone not supported for DelegatingVector, shouldn't be possible");
1:0e847ae:     }
1:acda70b:     // delegate points to original without this
1:0e847ae:     r.delegate = delegate.clone();
1:0e847ae:     return r;
1:0e847ae:   }
1:0e847ae: 
1:0e847ae:   @Override
1:dc62944:   public Iterable<Element> all() {
1:dc62944:     return delegate.all();
1:dc62944:   }
1:dc62944: 
1:dc62944:   @Override
1:dc62944:   public Iterable<Element> nonZeroes() {
1:dc62944:     return delegate.nonZeroes();
1:dc62944:   }
1:dc62944: 
1:dc62944:   @Override
1:0e847ae:   public Vector divide(double x) {
1:0e847ae:     return delegate.divide(x);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public double dot(Vector x) {
1:0e847ae:     return delegate.dot(x);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public double get(int index) {
1:0e847ae:     return delegate.get(index);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public Element getElement(int index) {
1:0e847ae:     return delegate.getElement(index);
1:0e847ae:   }
1:a07bfc3: 
1:a8d3dbd:   /**
1:a8d3dbd:    * Merge a set of (index, value) pairs into the vector.
1:a8d3dbd:    *
1:a8d3dbd:    * @param updates an ordered mapping of indices to values to be merged in.
1:a8d3dbd:    */
1:a8d3dbd:   @Override
1:a8d3dbd:   public void mergeUpdates(OrderedIntDoubleMapping updates) {
1:a8d3dbd:     delegate.mergeUpdates(updates);
1:a8d3dbd:   }
1:a8d3dbd: 
1:0e847ae:   @Override
1:0e847ae:   public Vector minus(Vector that) {
1:0e847ae:     return delegate.minus(that);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public Vector normalize() {
1:0e847ae:     return delegate.normalize();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public Vector normalize(double power) {
1:0e847ae:     return delegate.normalize(power);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public Vector logNormalize() {
1:0e847ae:     return delegate.logNormalize();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public Vector logNormalize(double power) {
1:0e847ae:     return delegate.logNormalize(power);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public double norm(double power) {
1:0e847ae:     return delegate.norm(power);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public double getLengthSquared() {
1:0e847ae:     return delegate.getLengthSquared();
1:0e847ae:   }
1:a07bfc3: 
1:aebdfaf:   @Override
1:1e3f7ae:   public void invalidateCachedLength() {
1:aebdfaf:     if (delegate instanceof LengthCachingVector) {
1:1e3f7ae:       ((LengthCachingVector) delegate).invalidateCachedLength();
1:aebdfaf:     }
1:aebdfaf:   }
1:aebdfaf: 
1:0e847ae:   @Override
1:0e847ae:   public double getDistanceSquared(Vector v) {
1:0e847ae:     return delegate.getDistanceSquared(v);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:a8d3dbd:   public double getLookupCost() {
1:a8d3dbd:     return delegate.getLookupCost();
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Override
1:a8d3dbd:   public double getIteratorAdvanceCost() {
1:a8d3dbd:     return delegate.getIteratorAdvanceCost();
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Override
1:a8d3dbd:   public boolean isAddConstantTime() {
1:a8d3dbd:     return delegate.isAddConstantTime();
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Override
1:0e847ae:   public double maxValue() {
1:0e847ae:     return delegate.maxValue();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public int maxValueIndex() {
1:0e847ae:     return delegate.maxValueIndex();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public double minValue() {
1:0e847ae:     return delegate.minValue();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public int minValueIndex() {
1:0e847ae:     return delegate.minValueIndex();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public Vector plus(double x) {
1:0e847ae:     return delegate.plus(x);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public Vector plus(Vector x) {
1:0e847ae:     return delegate.plus(x);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public void set(int index, double value) {
1:0e847ae:     delegate.set(index, value);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public Vector times(double x) {
1:0e847ae:     return delegate.times(x);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public Vector times(Vector x) {
1:0e847ae:     return delegate.times(x);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public double zSum() {
1:0e847ae:     return delegate.zSum();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public Vector assign(double value) {
1:3d4e6e2:     delegate.assign(value);
1:3d4e6e2:     return this;
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:3d4e6e2:   public Vector assign(double[] values) {
1:3d4e6e2:     delegate.assign(values);
1:3d4e6e2:     return this;
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:3d4e6e2:   public Vector assign(Vector other) {
1:3d4e6e2:     delegate.assign(other);
1:3d4e6e2:     return this;
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:3d4e6e2:   public Vector assign(DoubleDoubleFunction f, double y) {
1:3d4e6e2:     delegate.assign(f, y);
1:3d4e6e2:     return this;
3:3d4e6e2:   }
1:a07bfc3: 
3:3d4e6e2:   @Override
1:3d4e6e2:   public Vector assign(DoubleFunction function) {
1:3d4e6e2:     delegate.assign(function);
1:3d4e6e2:     return this;
1:3d4e6e2:   }
1:a07bfc3: 
1:3d4e6e2:   @Override
1:3d4e6e2:   public Vector assign(Vector other, DoubleDoubleFunction function) {
1:3d4e6e2:     delegate.assign(other, function);
1:3d4e6e2:     return this;
1:3d4e6e2:   }
1:a07bfc3: 
1:3d4e6e2:   @Override
1:0e847ae:   public Matrix cross(Vector other) {
1:0e847ae:     return delegate.cross(other);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public int size() {
1:0e847ae:     return delegate.size();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public String asFormatString() {
1:0e847ae:     return delegate.asFormatString();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public int hashCode() {
1:0e847ae:     return delegate.hashCode();
1:0e847ae:   }
1:a07bfc3: 
1:a8d3dbd:   @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
1:0e847ae:   @Override
1:0e847ae:   public boolean equals(Object o) {
1:0e847ae:     return delegate.equals(o);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public String toString() {
1:0e847ae:     return delegate.toString();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public boolean isDense() {
1:0e847ae:     return delegate.isDense();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public boolean isSequentialAccess() {
1:0e847ae:     return delegate.isSequentialAccess();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public double getQuick(int index) {
1:0e847ae:     return delegate.getQuick(index);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0e847ae:   public Vector like() {
1:1e3f7ae:     return new DelegatingVector(delegate.like());
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0b564c7:   public Vector like(int cardinality) {
1:0b564c7:     return new DelegatingVector(delegate.like(cardinality));
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0e847ae:   public void setQuick(int index, double value) {
1:0e847ae:     delegate.setQuick(index, value);
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:0a0fddf:   public void incrementQuick(int index, double increment) {
1:0a0fddf:     delegate.incrementQuick(index, increment);
1:0a0fddf:   }
1:0a0fddf: 
1:0a0fddf:   @Override
1:0e847ae:   public int getNumNondefaultElements() {
1:0e847ae:     return delegate.getNumNondefaultElements();
1:0e847ae:   }
1:a07bfc3: 
1:0e847ae:   @Override
1:be94533:   public int getNumNonZeroElements() {
1:be94533:     return delegate.getNumNonZeroElements();
1:0e847ae:   }
1:3d4e6e2: }
============================================================================
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:0b564c7
/////////////////////////////////////////////////////////////////////////
1:   public Vector like(int cardinality) {
1:     return new DelegatingVector(delegate.like(cardinality));
1:   }
1: 
1:   @Override
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public Iterable<Element> all() {
1:     return delegate.all();
1:   }
1: 
1:   @Override
1:   public Iterable<Element> nonZeroes() {
1:     return delegate.nonZeroes();
1:   }
1: 
1:   @Override
/////////////////////////////////////////////////////////////////////////
author:dfilimon
-------------------------------------------------------------------------------
commit:a8d3dbd
/////////////////////////////////////////////////////////////////////////
1:   @SuppressWarnings("CloneDoesntDeclareCloneNotSupportedException")
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Merge a set of (index, value) pairs into the vector.
1:    *
1:    * @param updates an ordered mapping of indices to values to be merged in.
1:    */
1:   @Override
1:   public void mergeUpdates(OrderedIntDoubleMapping updates) {
1:     delegate.mergeUpdates(updates);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public double getLookupCost() {
1:     return delegate.getLookupCost();
1:   }
1: 
1:   @Override
1:   public double getIteratorAdvanceCost() {
1:     return delegate.getIteratorAdvanceCost();
1:   }
1: 
1:   @Override
1:   public boolean isAddConstantTime() {
1:     return delegate.isAddConstantTime();
1:   }
1: 
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
author:Robin Anil
-------------------------------------------------------------------------------
commit:0a0fddf
/////////////////////////////////////////////////////////////////////////
1:   public void incrementQuick(int index, double increment) {
1:     delegate.incrementQuick(index, increment);
1:   }
1: 
1:   @Override
commit:be94533
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public int getNumNonZeroElements() {
1:     return delegate.getNumNonZeroElements();
1:   }
1: 
1:   @Override
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1: }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:acda70b
/////////////////////////////////////////////////////////////////////////
1:     DelegatingVector r;
1:       r = (DelegatingVector) super.clone();
1:     // delegate points to original without this
commit:1e3f7ae
/////////////////////////////////////////////////////////////////////////
1:   protected DelegatingVector() {
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public void invalidateCachedLength() {
1:       ((LengthCachingVector) delegate).invalidateCachedLength();
/////////////////////////////////////////////////////////////////////////
1:     return new DelegatingVector(delegate.like());
commit:aebdfaf
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * This vector implements LengthCachingVector because almost all delegates cache the length and
1:  * the cost of false positives is very low.
1: public class DelegatingVector implements Vector, LengthCachingVector {
/////////////////////////////////////////////////////////////////////////
0:   // not normally called because the delegate vector is who would need this and
0:   // they will call their own version of this method.  In fact, if the delegate is
0:   // also a delegating vector the same logic will apply recursively down to the first
0:   // non-delegating vector.  This makes this very hard to test except in trivial ways.
1:   @Override
0:   public void setLengthSquared(double d2) {
1:     if (delegate instanceof LengthCachingVector) {
0:       ((LengthCachingVector) delegate).setLengthSquared(d2);
1:     }
1:   }
1: 
commit:0e847ae
/////////////////////////////////////////////////////////////////////////
1:   protected Vector delegate;
0:   public DelegatingVector(int size) {
0:     delegate = new DenseVector(size);
1:   }
1: 
1:   public DelegatingVector(Vector v) {
1:     delegate = v;
1:   }
1: 
1:   public Vector getVector() {
1:     return delegate;
1:   }
1: 
1:   @Override
1:   public double aggregate(DoubleDoubleFunction aggregator, DoubleFunction map) {
1:     return delegate.aggregate(aggregator, map);
1:   }
1: 
1:   @Override
1:   public double aggregate(Vector other, DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner) {
1:     return delegate.aggregate(other, aggregator, combiner);
1:   }
1: 
1:   @Override
1:   public Vector viewPart(int offset, int length) {
1:     return delegate.viewPart(offset, length);
1:   }
1: 
1:   @Override
1:   public Vector clone() {
0:     WeightedVector r;
1:     try {
0:       r = (WeightedVector) super.clone();
1:     } catch (CloneNotSupportedException e) {
1:       throw new RuntimeException("Clone not supported for DelegatingVector, shouldn't be possible");
1:     r.delegate = delegate.clone();
1:     return r;
1:   }
1:   @Override
1:   public Vector divide(double x) {
1:     return delegate.divide(x);
1:   }
1:   @Override
1:   public double dot(Vector x) {
1:     return delegate.dot(x);
1:   }
1:   @Override
1:   public double get(int index) {
1:     return delegate.get(index);
1:   }
1:   @Override
1:   public Element getElement(int index) {
1:     return delegate.getElement(index);
1:   }
1:   @Override
1:   public Vector minus(Vector that) {
1:     return delegate.minus(that);
1:   }
1:   @Override
1:   public Vector normalize() {
1:     return delegate.normalize();
1:   }
1:   @Override
1:   public Vector normalize(double power) {
1:     return delegate.normalize(power);
1:   }
1:   @Override
1:   public Vector logNormalize() {
1:     return delegate.logNormalize();
1:   }
1:   @Override
1:   public Vector logNormalize(double power) {
1:     return delegate.logNormalize(power);
1:   }
1:   @Override
1:   public double norm(double power) {
1:     return delegate.norm(power);
1:   }
1:   @Override
1:   public double getLengthSquared() {
1:     return delegate.getLengthSquared();
1:   }
1:   @Override
1:   public double getDistanceSquared(Vector v) {
1:     return delegate.getDistanceSquared(v);
1:   }
1:   @Override
1:   public double maxValue() {
1:     return delegate.maxValue();
1:   }
1:   @Override
1:   public int maxValueIndex() {
1:     return delegate.maxValueIndex();
1:   }
1:   @Override
1:   public double minValue() {
1:     return delegate.minValue();
1:   }
1:   @Override
1:   public int minValueIndex() {
1:     return delegate.minValueIndex();
1:   }
1:   @Override
1:   public Vector plus(double x) {
1:     return delegate.plus(x);
1:   }
1:   @Override
1:   public Vector plus(Vector x) {
1:     return delegate.plus(x);
1:   }
1:   @Override
1:   public void set(int index, double value) {
1:     delegate.set(index, value);
1:   }
1:   @Override
1:   public Vector times(double x) {
1:     return delegate.times(x);
1:   }
1:   @Override
1:   public Vector times(Vector x) {
1:     return delegate.times(x);
1:   }
1:   @Override
1:   public double zSum() {
1:     return delegate.zSum();
1:   }
1:   @Override
1:   public Vector assign(double value) {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public Matrix cross(Vector other) {
1:     return delegate.cross(other);
1:   }
1:   @Override
1:   public int size() {
1:     return delegate.size();
1:   }
1:   @Override
1:   public String asFormatString() {
1:     return delegate.asFormatString();
1:   }
1:   @Override
1:   public int hashCode() {
1:     return delegate.hashCode();
1:   }
1:   @Override
1:   public boolean equals(Object o) {
1:     return delegate.equals(o);
1:   }
1:   @Override
1:   public String toString() {
1:     return delegate.toString();
1:   }
1:   @Override
1:   public boolean isDense() {
1:     return delegate.isDense();
1:   }
1:   @Override
1:   public boolean isSequentialAccess() {
1:     return delegate.isSequentialAccess();
1:   }
1:   @Override
1:   public double getQuick(int index) {
1:     return delegate.getQuick(index);
1:   }
1:   @Override
1:   public Vector like() {
0:     return delegate.like();
1:   }
1:   @Override
1:   public void setQuick(int index, double value) {
1:     delegate.setQuick(index, value);
1:   }
1:   @Override
1:   public int getNumNondefaultElements() {
1:     return delegate.getNumNondefaultElements();
1:   }
1:   @Override
0:   public Iterator<Element> iterateNonZero() {
0:     return delegate.iterateNonZero();
1:   }
1:   @Override
0:   public Iterator<Element> iterator() {
0:     return delegate.iterator();
1:   }
commit:3d4e6e2
/////////////////////////////////////////////////////////////////////////
1:     delegate.assign(value);
1:     return this;
1:   }
1:   @Override
1:   public Vector assign(double[] values) {
1:     delegate.assign(values);
1:     return this;
1:   }
1:   @Override
1:   public Vector assign(Vector other) {
1:     delegate.assign(other);
1:     return this;
1:   }
1:   @Override
1:   public Vector assign(DoubleDoubleFunction f, double y) {
1:     delegate.assign(f, y);
1:     return this;
1:   }
1:   @Override
1:   public Vector assign(DoubleFunction function) {
1:     delegate.assign(function);
1:     return this;
1:   }
1:   @Override
1:   public Vector assign(Vector other, DoubleDoubleFunction function) {
1:     delegate.assign(other, function);
1:     return this;
1:   }
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.math.function.DoubleDoubleFunction;
1: import org.apache.mahout.math.function.DoubleFunction;
1: 
0: import java.util.Iterator;
1: 
1: /**
1:  * A delegating vector provides an easy way to decorate vectors with weights or id's and such while
1:  * keeping all of the Vector functionality.
1:  */
0: public class DelegatingVector implements Vector {
0:     protected Vector delegate;
1: 
0:     public DelegatingVector(int size) {
0:         delegate = new DenseVector(size);
0:     }
1: 
0:     public DelegatingVector(Vector v) {
0:         delegate = v;
0:     }
1: 
0:     public Vector getVector() {
0:         return delegate;
0:     }
1: 
0:     @Override
0:     public double aggregate(DoubleDoubleFunction aggregator, DoubleFunction map) {
0:         return delegate.aggregate(aggregator, map);
0:     }
1: 
0:     @Override
0:     public double aggregate(Vector other, DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner) {
0:         return delegate.aggregate(other, aggregator, combiner);
0:     }
1: 
0:     @Override
0:     public Vector viewPart(int offset, int length) {
0:         return delegate.viewPart(offset, length);
0:     }
1: 
0:     @Override
0:     public Vector clone() {
0:         WeightedVector r;
0:         try {
0:             r = (WeightedVector) super.clone();
0:         } catch (CloneNotSupportedException e) {
0:             throw new RuntimeException("Clone not supported for DelegatingVector, shouldn't be possible");
0:         }
0:         r.delegate = delegate.clone();
0:         return r;
0:     }
1: 
0:     @Override
0:     public Vector divide(double x) {
0:         return delegate.divide(x);
0:     }
1: 
0:     @Override
0:     public double dot(Vector x) {
0:         return delegate.dot(x);
0:     }
1: 
0:     @Override
0:     public double get(int index) {
0:         return delegate.get(index);
0:     }
1: 
0:     @Override
0:     public Element getElement(int index) {
0:         return delegate.getElement(index);
0:     }
1: 
0:     @Override
0:     public Vector minus(Vector that) {
0:         return delegate.minus(that);
0:     }
1: 
0:     @Override
0:     public Vector normalize() {
0:         return delegate.normalize();
0:     }
1: 
0:     @Override
0:     public Vector normalize(double power) {
0:         return delegate.normalize(power);
0:     }
1: 
0:     @Override
0:     public Vector logNormalize() {
0:         return delegate.logNormalize();
0:     }
1: 
0:     @Override
0:     public Vector logNormalize(double power) {
0:         return delegate.logNormalize(power);
0:     }
1: 
0:     @Override
0:     public double norm(double power) {
0:         return delegate.norm(power);
0:     }
1: 
0:     @Override
0:     public double getLengthSquared() {
0:         return delegate.getLengthSquared();
0:     }
1: 
0:     @Override
0:     public double getDistanceSquared(Vector v) {
0:         return delegate.getDistanceSquared(v);
0:     }
1: 
0:     @Override
0:     public double maxValue() {
0:         return delegate.maxValue();
0:     }
1: 
0:     @Override
0:     public int maxValueIndex() {
0:         return delegate.maxValueIndex();
0:     }
1: 
0:     @Override
0:     public double minValue() {
0:         return delegate.minValue();
0:     }
1: 
0:     @Override
0:     public int minValueIndex() {
0:         return delegate.minValueIndex();
0:     }
1: 
0:     @Override
0:     public Vector plus(double x) {
0:         return delegate.plus(x);
0:     }
1: 
0:     @Override
0:     public Vector plus(Vector x) {
0:         return delegate.plus(x);
0:     }
1: 
0:     @Override
0:     public void set(int index, double value) {
0:         delegate.set(index, value);
0:     }
1: 
0:     @Override
0:     public Vector times(double x) {
0:         return delegate.times(x);
0:     }
1: 
0:     @Override
0:     public Vector times(Vector x) {
0:         return delegate.times(x);
0:     }
1: 
0:     @Override
0:     public double zSum() {
0:         return delegate.zSum();
0:     }
1: 
0:     @Override
0:     public Vector assign(double value) {
0:         return delegate.assign(value);
0:     }
1: 
0:     @Override
0:     public Vector assign(double[] values) {
0:         return delegate.assign(values);
0:     }
1: 
0:     @Override
0:     public Vector assign(Vector other) {
0:         return delegate.assign(other);
0:     }
1: 
0:     @Override
0:     public Vector assign(DoubleDoubleFunction f, double y) {
0:         return delegate.assign(f, y);
0:     }
1: 
0:     @Override
0:     public Vector assign(DoubleFunction function) {
0:         return delegate.assign(function);
0:     }
1: 
0:     @Override
0:     public Vector assign(Vector other, DoubleDoubleFunction function) {
0:         return delegate.assign(other, function);
0:     }
1: 
0:     @Override
0:     public Matrix cross(Vector other) {
0:         return delegate.cross(other);
0:     }
1: 
0:     @Override
0:     public int size() {
0:         return delegate.size();
0:     }
1: 
0:     @Override
0:     public String asFormatString() {
0:         return delegate.asFormatString();
0:     }
1: 
0:     @Override
0:     public int hashCode() {
0:         return delegate.hashCode();
0:     }
1: 
0:     @Override
0:     public boolean equals(Object o) {
0:         return delegate.equals(o);
0:     }
1: 
0:     @Override
0:     public String toString() {
0:         return delegate.toString();
0:     }
1: 
0:     @Override
0:     public boolean isDense() {
0:         return delegate.isDense();
0:     }
1: 
0:     @Override
0:     public boolean isSequentialAccess() {
0:         return delegate.isSequentialAccess();
0:     }
1: 
0:     @Override
0:     public double getQuick(int index) {
0:         return delegate.getQuick(index);
0:     }
1: 
0:     @Override
0:     public Vector like() {
0:         return delegate.like();
0:     }
1: 
0:     @Override
0:     public void setQuick(int index, double value) {
0:         delegate.setQuick(index, value);
0:     }
1: 
0:     @Override
0:     public int getNumNondefaultElements() {
0:         return delegate.getNumNondefaultElements();
0:     }
1: 
0:     @Override
0:     public Iterator<Element> iterateNonZero() {
0:         return delegate.iterateNonZero();
0:     }
1: 
0:     @Override
0:     public Iterator<Element> iterator() {
0:         return delegate.iterator();
0:     }
0: }
============================================================================