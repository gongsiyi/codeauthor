1:175701c: /**
1:175701c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:175701c:  * contributor license agreements.  See the NOTICE file distributed with
1:175701c:  * this work for additional information regarding copyright ownership.
1:175701c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:175701c:  * (the "License"); you may not use this file except in compliance with
1:175701c:  * the License.  You may obtain a copy of the License at
5:175701c:  *
1:175701c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:175701c:  *
1:175701c:  * Unless required by applicable law or agreed to in writing, software
1:175701c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:175701c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:175701c:  * See the License for the specific language governing permissions and
1:175701c:  * limitations under the License.
2:175701c:  */
7:175701c: 
1:175701c: package org.apache.mahout.math.hadoop.stochasticsvd;
1:175701c: 
1:b717cfc: import com.google.common.base.Function;
1:b717cfc: import com.google.common.collect.Iterators;
1:87c15be: import com.google.common.io.Closeables;
1:87c15be: import java.io.Closeable;
1:87c15be: import java.io.IOException;
1:87c15be: import java.util.ArrayDeque;
1:87c15be: import java.util.ArrayList;
1:87c15be: import java.util.Comparator;
1:87c15be: import java.util.Deque;
1:87c15be: import java.util.Iterator;
1:87c15be: import java.util.List;
1:87c15be: import java.util.regex.Matcher;
1:87c15be: import java.util.regex.Pattern;
1:175701c: import org.apache.hadoop.conf.Configuration;
1:175701c: import org.apache.hadoop.fs.FileStatus;
1:175701c: import org.apache.hadoop.fs.FileSystem;
1:175701c: import org.apache.hadoop.fs.Path;
1:175701c: import org.apache.hadoop.io.IntWritable;
1:175701c: import org.apache.hadoop.io.SequenceFile;
1:175701c: import org.apache.hadoop.io.Writable;
1:b717cfc: import org.apache.mahout.common.IOUtils;
1:b717cfc: import org.apache.mahout.common.Pair;
1:87c15be: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1:87c15be: import org.apache.mahout.common.iterator.sequencefile.PathType;
1:87c15be: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator;
1:87c15be: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;
1:87c15be: import org.apache.mahout.math.DenseMatrix;
1:87c15be: import org.apache.mahout.math.DenseSymmetricMatrix;
1:87c15be: import org.apache.mahout.math.DenseVector;
1:87c15be: import org.apache.mahout.math.Matrix;
1:87c15be: import org.apache.mahout.math.UpperTriangular;
1:b717cfc: import org.apache.mahout.math.Vector;
1:87c15be: import org.apache.mahout.math.VectorWritable;
1:175701c: import org.apache.mahout.math.function.Functions;
1:175701c: 
1:175701c: /**
1:175701c:  * set of small file manipulation helpers.
1:175701c:  */
1:229aeff: public final class SSVDHelper {
1:175701c: 
1:229aeff:   private static final Pattern OUTPUT_FILE_PATTERN = Pattern.compile("(\\w+)-(m|r)-(\\d+)(\\.\\w+)?");
1:175701c: 
1:229aeff:   private SSVDHelper() {
1:229aeff:   }
1:175701c: 
1:175701c:   /**
1:175701c:    * load single vector from an hdfs file (possibly presented as glob).
1:175701c:    */
1:175701c:   static Vector loadVector(Path glob, Configuration conf) throws IOException {
1:175701c: 
2:175701c:     SequenceFileDirValueIterator<VectorWritable> iter =
1:87c15be:       new SequenceFileDirValueIterator<>(glob,
2:175701c:                                                        PathType.GLOB,
3:175701c:                                                        null,
1:175701c:                                                        null,
3:175701c:                                                        true,
2:175701c:                                                        conf);
1:175701c: 
3:175701c:     try {
1:229aeff:       if (!iter.hasNext()) {
1:175701c:         throw new IOException("Empty input while reading vector");
1:229aeff:       }
1:175701c:       VectorWritable vw = iter.next();
1:175701c: 
1:229aeff:       if (iter.hasNext()) {
1:175701c:         throw new IOException("Unexpected data after the end of vector file");
1:175701c:       }
1:175701c: 
1:175701c:       return vw.get();
1:175701c: 
3:175701c:     } finally {
1:31cb292:       Closeables.close(iter, true);
1:175701c:     }
1:175701c:   }
1:175701c: 
1:175701c:   /**
1:175701c:    * save single vector into hdfs file.
1:175701c:    *
1:229aeff:    * @param v vector to save
1:175701c:    */
1:175701c:   public static void saveVector(Vector v,
1:175701c:                                 Path vectorFilePath,
1:175701c:                                 Configuration conf) throws IOException {
1:175701c:     VectorWritable vw = new VectorWritable(v);
1:175701c:     FileSystem fs = FileSystem.get(conf);
1:87c15be:     try (SequenceFile.Writer w = new SequenceFile.Writer(fs,
1:87c15be:         conf,
1:87c15be:         vectorFilePath,
1:87c15be:         IntWritable.class,
1:87c15be:         VectorWritable.class)) {
1:175701c:       w.append(new IntWritable(), vw);
1:87c15be:     }
2:175701c:       /*
1:175701c:        * this is a writer, no quiet close please. we must bail out on incomplete
1:175701c:        * close.
1:175701c:        */
1:87c15be: 
1:175701c:   }
1:175701c: 
1:175701c:   /**
1:175701c:    * sniff label type in the input files
1:175701c:    */
1:175701c:   static Class<? extends Writable> sniffInputLabelType(Path[] inputPath,
3:175701c:                                                        Configuration conf)
4:175701c:     throws IOException {
1:175701c:     FileSystem fs = FileSystem.get(conf);
1:175701c:     for (Path p : inputPath) {
1:175701c:       FileStatus[] fstats = fs.globStatus(p);
1:175701c:       if (fstats == null || fstats.length == 0) {
1:175701c:         continue;
1:175701c:       }
1:175701c: 
1:175701c:       FileStatus firstSeqFile;
1:b988c49:       if (fstats[0].isDir()) {
1:229aeff:         firstSeqFile = fs.listStatus(fstats[0].getPath(), PathFilters.logsCRCFilter())[0];
1:175701c:       } else {
1:175701c:         firstSeqFile = fstats[0];
1:175701c:       }
1:175701c: 
1:175701c:       SequenceFile.Reader r = null;
1:175701c:       try {
1:175701c:         r = new SequenceFile.Reader(fs, firstSeqFile.getPath(), conf);
1:175701c:         return r.getKeyClass().asSubclass(Writable.class);
1:175701c:       } finally {
1:31cb292:         Closeables.close(r, true);
1:175701c:       }
1:175701c:     }
1:175701c:     throw new IOException("Unable to open input files to determine input label type.");
1:175701c:   }
1:175701c: 
1:175701c:   static final Comparator<FileStatus> PARTITION_COMPARATOR =
1:175701c:     new Comparator<FileStatus>() {
1:175701c:       private final Matcher matcher = OUTPUT_FILE_PATTERN.matcher("");
1:175701c: 
1:175701c:       @Override
1:175701c:       public int compare(FileStatus o1, FileStatus o2) {
1:175701c:         matcher.reset(o1.getPath().getName());
1:175701c:         if (!matcher.matches()) {
1:175701c:           throw new IllegalArgumentException("Unexpected file name, unable to deduce partition #:"
1:b717cfc:                                                + o1.getPath());
1:175701c:         }
1:175701c:         int p1 = Integer.parseInt(matcher.group(3));
1:175701c:         matcher.reset(o2.getPath().getName());
1:175701c:         if (!matcher.matches()) {
1:175701c:           throw new IllegalArgumentException("Unexpected file name, unable to deduce partition #:"
1:b717cfc:                                                + o2.getPath());
1:175701c:         }
1:175701c: 
1:175701c:         int p2 = Integer.parseInt(matcher.group(3));
1:175701c:         return p1 - p2;
1:175701c:       }
1:175701c: 
1:175701c:     };
1:175701c: 
1:b717cfc:   public static Iterator<Pair<Writable, Vector>> drmIterator(FileSystem fs, Path glob, Configuration conf,
1:b717cfc:                                                              Deque<Closeable> closeables)
1:b717cfc:     throws IOException {
1:b717cfc:     SequenceFileDirIterator<Writable, VectorWritable> ret =
1:87c15be:       new SequenceFileDirIterator<>(glob,
1:b717cfc:                                                             PathType.GLOB,
1:b717cfc:                                                             PathFilters.logsCRCFilter(),
1:b717cfc:                                                             PARTITION_COMPARATOR,
1:b717cfc:                                                             true,
1:b717cfc:                                                             conf);
1:b717cfc:     closeables.addFirst(ret);
1:b717cfc:     return Iterators.transform(ret, new Function<Pair<Writable, VectorWritable>, Pair<Writable, Vector>>() {
1:b717cfc:       @Override
1:b717cfc:       public Pair<Writable, Vector> apply(Pair<Writable, VectorWritable> p) {
1:b717cfc:         return new Pair(p.getFirst(), p.getSecond().get());
1:b717cfc:       }
1:b717cfc:     });
1:b717cfc:   }
1:b717cfc: 
1:175701c:   /**
1:175701c:    * helper capabiltiy to load distributed row matrices into dense matrix (to
1:175701c:    * support tests mainly).
1:175701c:    *
1:b717cfc:    * @param fs   filesystem
1:b717cfc:    * @param glob FS glob
1:b717cfc:    * @param conf configuration
1:175701c:    * @return Dense matrix array
1:175701c:    */
1:b717cfc:   public static DenseMatrix drmLoadAsDense(FileSystem fs, Path glob, Configuration conf) throws IOException {
1:175701c: 
1:87c15be:     Deque<Closeable> closeables = new ArrayDeque<>();
1:b717cfc:     try {
1:87c15be:       List<double[]> denseData = new ArrayList<>();
1:b717cfc:       for (Iterator<Pair<Writable, Vector>> iter = drmIterator(fs, glob, conf, closeables);
1:b717cfc:            iter.hasNext(); ) {
1:b717cfc:         Pair<Writable, Vector> p = iter.next();
1:b717cfc:         Vector v = p.getSecond();
1:b717cfc:         double[] dd = new double[v.size()];
1:b717cfc:         if (v.isDense()) {
1:b717cfc:           for (int i = 0; i < v.size(); i++) {
1:b717cfc:             dd[i] = v.getQuick(i);
1:b717cfc:           }
1:b717cfc:         } else {
1:b717cfc:           for (Vector.Element el : v.nonZeroes()) {
1:b717cfc:             dd[el.index()] = el.get();
1:b717cfc:           }
1:175701c:         }
1:b717cfc:         denseData.add(dd);
1:175701c:       }
1:b717cfc:       if (denseData.size() == 0) {
1:b717cfc:         return null;
1:b717cfc:       } else {
1:b717cfc:         return new DenseMatrix(denseData.toArray(new double[denseData.size()][]));
1:b717cfc:       }
1:b717cfc:     } finally {
1:b717cfc:       IOUtils.close(closeables);
1:175701c:     }
1:175701c:   }
1:175701c: 
1:175701c:   /**
1:229aeff:    * Load multiple upper triangular matrices and sum them up.
1:175701c:    *
1:175701c:    * @return the sum of upper triangular inputs.
1:175701c:    */
1:bc8eafd:   public static DenseSymmetricMatrix loadAndSumUpperTriangularMatricesAsSymmetric(Path glob, Configuration conf) throws IOException {
1:175701c:     Vector v = loadAndSumUpVectors(glob, conf);
1:bc8eafd:     return v == null ? null : new DenseSymmetricMatrix(v);
1:175701c:   }
1:175701c: 
1:175701c:   /**
1:229aeff:    * @return sum of all vectors in different files specified by glob
1:175701c:    */
1:175701c:   public static Vector loadAndSumUpVectors(Path glob, Configuration conf)
1:175701c:     throws IOException {
1:175701c: 
1:175701c:     SequenceFileDirValueIterator<VectorWritable> iter =
1:87c15be:       new SequenceFileDirValueIterator<>(glob,
1:175701c:                                                        PathType.GLOB,
1:175701c:                                                        null,
1:175701c:                                                        PARTITION_COMPARATOR,
1:175701c:                                                        true,
1:175701c:                                                        conf);
1:175701c: 
1:175701c:     try {
1:175701c:       Vector v = null;
1:175701c:       while (iter.hasNext()) {
1:229aeff:         if (v == null) {
1:175701c:           v = new DenseVector(iter.next().get());
1:229aeff:         } else {
1:175701c:           v.assign(iter.next().get(), Functions.PLUS);
1:175701c:         }
1:175701c:       }
1:175701c:       return v;
1:175701c: 
1:175701c:     } finally {
1:31cb292:       Closeables.close(iter, true);
1:175701c:     }
1:175701c: 
1:175701c:   }
1:175701c: 
1:175701c:   /**
1:175701c:    * Load only one upper triangular matrix and issue error if mroe than one is
1:175701c:    * found.
1:175701c:    */
1:229aeff:   public static UpperTriangular loadUpperTriangularMatrix(Path glob, Configuration conf) throws IOException {
1:175701c: 
1:175701c:     /*
1:175701c:      * there still may be more than one file in glob and only one of them must
1:175701c:      * contain the matrix.
1:175701c:      */
1:175701c: 
1:87c15be:     try (SequenceFileDirValueIterator<VectorWritable> iter = new SequenceFileDirValueIterator<>(glob,
1:87c15be:         PathType.GLOB,
1:87c15be:         null,
1:87c15be:         null,
1:87c15be:         true,
1:87c15be:         conf)) {
1:229aeff:       if (!iter.hasNext()) {
1:175701c:         throw new IOException("No triangular matrices found");
1:229aeff:       }
1:175701c:       Vector v = iter.next().get();
1:175701c:       UpperTriangular result = new UpperTriangular(v);
1:229aeff:       if (iter.hasNext()) {
1:175701c:         throw new IOException("Unexpected overrun in upper triangular matrix files");
1:229aeff:       }
1:175701c:       return result;
1:175701c: 
1:175701c:     }
1:175701c:   }
1:175701c: 
1:175701c:   /**
1:175701c:    * extracts row-wise raw data from a Mahout matrix for 3rd party solvers.
1:229aeff:    * Unfortunately values member is 100% encapsulated in {@link org.apache.mahout.math.DenseMatrix} at
1:175701c:    * this point, so we have to resort to abstract element-wise copying.
1:175701c:    */
1:175701c:   public static double[][] extractRawData(Matrix m) {
1:175701c:     int rows = m.numRows();
1:175701c:     int cols = m.numCols();
1:175701c:     double[][] result = new double[rows][];
1:175701c:     for (int i = 0; i < rows; i++) {
1:175701c:       result[i] = new double[cols];
1:175701c:       for (int j = 0; j < cols; j++) {
1:175701c:         result[i][j] = m.getQuick(i, j);
1:175701c:       }
1:175701c:     }
1:175701c:     return result;
1:175701c:   }
1:175701c: 
1:175701c: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
/////////////////////////////////////////////////////////////////////////
1:       if (fstats[0].isDir()) {
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
1: import java.io.Closeable;
1: import java.io.IOException;
1: import java.util.ArrayDeque;
1: import java.util.ArrayList;
1: import java.util.Comparator;
1: import java.util.Deque;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1: import org.apache.mahout.common.iterator.sequencefile.PathType;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseSymmetricMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.UpperTriangular;
1: import org.apache.mahout.math.VectorWritable;
/////////////////////////////////////////////////////////////////////////
1:       new SequenceFileDirValueIterator<>(glob,
/////////////////////////////////////////////////////////////////////////
1:     try (SequenceFile.Writer w = new SequenceFile.Writer(fs,
1:         conf,
1:         vectorFilePath,
1:         IntWritable.class,
1:         VectorWritable.class)) {
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:       if (fstats[0].isDirectory()) {
/////////////////////////////////////////////////////////////////////////
1:       new SequenceFileDirIterator<>(glob,
/////////////////////////////////////////////////////////////////////////
1:     Deque<Closeable> closeables = new ArrayDeque<>();
1:       List<double[]> denseData = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:       new SequenceFileDirValueIterator<>(glob,
/////////////////////////////////////////////////////////////////////////
1:     try (SequenceFileDirValueIterator<VectorWritable> iter = new SequenceFileDirValueIterator<>(glob,
1:         PathType.GLOB,
1:         null,
1:         null,
1:         true,
1:         conf)) {
/////////////////////////////////////////////////////////////////////////
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:b717cfc
/////////////////////////////////////////////////////////////////////////
0: import java.io.Closeable;
0: import java.util.*;
1: import com.google.common.base.Function;
1: import com.google.common.collect.Iterators;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.IOUtils;
1: import org.apache.mahout.common.Pair;
0: import org.apache.mahout.common.iterator.sequencefile.*;
1: import org.apache.mahout.math.Vector;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                                                + o1.getPath());
1:                                                + o2.getPath());
/////////////////////////////////////////////////////////////////////////
1:   public static Iterator<Pair<Writable, Vector>> drmIterator(FileSystem fs, Path glob, Configuration conf,
1:                                                              Deque<Closeable> closeables)
1:     throws IOException {
1:     SequenceFileDirIterator<Writable, VectorWritable> ret =
0:       new SequenceFileDirIterator<Writable, VectorWritable>(glob,
1:                                                             PathType.GLOB,
1:                                                             PathFilters.logsCRCFilter(),
1:                                                             PARTITION_COMPARATOR,
1:                                                             true,
1:                                                             conf);
1:     closeables.addFirst(ret);
1:     return Iterators.transform(ret, new Function<Pair<Writable, VectorWritable>, Pair<Writable, Vector>>() {
1:       @Override
1:       public Pair<Writable, Vector> apply(Pair<Writable, VectorWritable> p) {
1:         return new Pair(p.getFirst(), p.getSecond().get());
1:       }
1:     });
1:   }
1: 
1:    * @param fs   filesystem
1:    * @param glob FS glob
1:    * @param conf configuration
1:   public static DenseMatrix drmLoadAsDense(FileSystem fs, Path glob, Configuration conf) throws IOException {
0:     Deque<Closeable> closeables = new ArrayDeque<Closeable>();
1:     try {
0:       List<double[]> denseData = new ArrayList<double[]>();
1:       for (Iterator<Pair<Writable, Vector>> iter = drmIterator(fs, glob, conf, closeables);
1:            iter.hasNext(); ) {
1:         Pair<Writable, Vector> p = iter.next();
1:         Vector v = p.getSecond();
1:         double[] dd = new double[v.size()];
1:         if (v.isDense()) {
1:           for (int i = 0; i < v.size(); i++) {
1:             dd[i] = v.getQuick(i);
1:           }
1:         } else {
1:           for (Vector.Element el : v.nonZeroes()) {
1:             dd[el.index()] = el.get();
1:           }
1:         denseData.add(dd);
1:       if (denseData.size() == 0) {
1:         return null;
1:       } else {
1:         return new DenseMatrix(denseData.toArray(new double[denseData.size()][]));
1:       }
1:     } finally {
1:       IOUtils.close(closeables);
commit:bc8eafd
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.*;
/////////////////////////////////////////////////////////////////////////
1:   public static DenseSymmetricMatrix loadAndSumUpperTriangularMatricesAsSymmetric(Path glob, Configuration conf) throws IOException {
1:     return v == null ? null : new DenseSymmetricMatrix(v);
commit:f43adfe
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.UpperTriangular;
commit:175701c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.stochasticsvd;
1: 
0: import java.io.IOException;
0: import java.util.Arrays;
0: import java.util.Comparator;
0: import java.util.List;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileStatus;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Writable;
0: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
0: import org.apache.mahout.common.iterator.sequencefile.PathType;
0: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;
0: import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterable;
0: import org.apache.mahout.math.DenseMatrix;
0: import org.apache.mahout.math.DenseVector;
0: import org.apache.mahout.math.Matrix;
0: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.function.Functions;
1: 
0: import com.google.common.collect.Lists;
0: import com.google.common.io.Closeables;
1: 
1: /**
1:  * set of small file manipulation helpers.
1:  *
1:  */
1: 
0: public class SSVDHelper {
1: 
1:   /**
1:    * load single vector from an hdfs file (possibly presented as glob).
1:    */
1:   static Vector loadVector(Path glob, Configuration conf) throws IOException {
1: 
1:     SequenceFileDirValueIterator<VectorWritable> iter =
0:       new SequenceFileDirValueIterator<VectorWritable>(glob,
1:                                                        PathType.GLOB,
1:                                                        null,
1:                                                        null,
1:                                                        true,
1:                                                        conf);
1: 
1:     try {
0:       if (!iter.hasNext())
1:         throw new IOException("Empty input while reading vector");
1:       VectorWritable vw = iter.next();
1: 
0:       if (iter.hasNext())
1:         throw new IOException("Unexpected data after the end of vector file");
1: 
1:       return vw.get();
1: 
1:     } finally {
0:       Closeables.closeQuietly(iter);
1:     }
1:   }
1: 
1:   /**
1:    * save single vector into hdfs file.
1:    *
0:    * @param v
0:    *          vector to save
0:    * @param vectorFilePath
0:    * @param conf
0:    * @throws IOException
1:    */
1:   public static void saveVector(Vector v,
1:                                 Path vectorFilePath,
1:                                 Configuration conf) throws IOException {
1:     VectorWritable vw = new VectorWritable(v);
1:     FileSystem fs = FileSystem.get(conf);
0:     SequenceFile.Writer w =
0:       new SequenceFile.Writer(fs,
0:                               conf,
0:                               vectorFilePath,
0:                               IntWritable.class,
0:                               VectorWritable.class);
1:     try {
1:       w.append(new IntWritable(), vw);
1:     } finally {
1:       /*
1:        * this is a writer, no quiet close please. we must bail out on incomplete
1:        * close.
1:        */
0:       w.close();
1:     }
1:   }
1: 
1:   /**
1:    * sniff label type in the input files
1:    */
1:   static Class<? extends Writable> sniffInputLabelType(Path[] inputPath,
1:                                                        Configuration conf)
1:     throws IOException {
1:     FileSystem fs = FileSystem.get(conf);
1:     for (Path p : inputPath) {
1:       FileStatus[] fstats = fs.globStatus(p);
1:       if (fstats == null || fstats.length == 0) {
1:         continue;
1:       }
1: 
1:       FileStatus firstSeqFile;
0:       if (!fstats[0].isDir()) {
1:         firstSeqFile = fstats[0];
1:       } else {
0:         firstSeqFile =
0:           fs.listStatus(fstats[0].getPath(), PathFilters.logsCRCFilter())[0];
1:       }
1: 
1:       SequenceFile.Reader r = null;
1:       try {
1:         r = new SequenceFile.Reader(fs, firstSeqFile.getPath(), conf);
1:         return r.getKeyClass().asSubclass(Writable.class);
1:       } finally {
0:         Closeables.closeQuietly(r);
1:       }
1:     }
1:     throw new IOException("Unable to open input files to determine input label type.");
1:   }
1: 
0:   private static final Pattern OUTPUT_FILE_PATTERN =
0:     Pattern.compile("(\\w+)-(m|r)-(\\d+)(\\.\\w+)?");
1: 
1:   static final Comparator<FileStatus> PARTITION_COMPARATOR =
1:     new Comparator<FileStatus>() {
1:       private final Matcher matcher = OUTPUT_FILE_PATTERN.matcher("");
1: 
1:       @Override
1:       public int compare(FileStatus o1, FileStatus o2) {
1:         matcher.reset(o1.getPath().getName());
1:         if (!matcher.matches()) {
1:           throw new IllegalArgumentException("Unexpected file name, unable to deduce partition #:"
0:               + o1.getPath());
1:         }
1:         int p1 = Integer.parseInt(matcher.group(3));
1:         matcher.reset(o2.getPath().getName());
1:         if (!matcher.matches()) {
1:           throw new IllegalArgumentException("Unexpected file name, unable to deduce partition #:"
0:               + o2.getPath());
1:         }
1: 
1:         int p2 = Integer.parseInt(matcher.group(3));
1:         return p1 - p2;
1:       }
1: 
1:     };
1: 
1:   /**
1:    * helper capabiltiy to load distributed row matrices into dense matrix (to
1:    * support tests mainly).
1:    *
0:    * @param fs
0:    *          filesystem
0:    * @param glob
0:    *          FS glob
0:    * @param conf
0:    *          configuration
1:    * @return Dense matrix array
0:    * @throws IOException
0:    *           when I/O occurs.
1:    */
0:   public static double[][] loadDistributedRowMatrix(FileSystem fs,
0:                                                     Path glob,
1:                                                     Configuration conf)
1:     throws IOException {
1: 
0:     FileStatus[] files = fs.globStatus(glob);
0:     if (files == null) {
0:       return null;
1:     }
1: 
0:     List<double[]> denseData = Lists.newArrayList();
1: 
1:     /*
0:      * assume it is partitioned output, so we need to read them up in order of
0:      * partitions.
1:      */
0:     Arrays.sort(files, PARTITION_COMPARATOR);
1: 
0:     for (FileStatus fstat : files) {
0:       for (VectorWritable value : new SequenceFileValueIterable<VectorWritable>(fstat.getPath(),
1:                                                                                 true,
0:                                                                                 conf)) {
0:         Vector v = value.get();
0:         int size = v.size();
0:         double[] row = new double[size];
0:         for (int i = 0; i < size; i++) {
0:           row[i] = v.get(i);
1:         }
0:         // ignore row label.
0:         denseData.add(row);
1:       }
1:     }
1: 
0:     return denseData.toArray(new double[denseData.size()][]);
1:   }
1: 
1:   /**
0:    * Load multiplel upper triangular matrices and sum them up.
1:    *
0:    * @param fs
0:    * @param glob
0:    * @param conf
1:    * @return the sum of upper triangular inputs.
0:    * @throws IOException
1:    */
0:   public static UpperTriangular
0:       loadAndSumUpperTriangularMatrices(Path glob, Configuration conf)
1:         throws IOException {
1:     Vector v = loadAndSumUpVectors(glob, conf);
0:     return v == null ? null : new UpperTriangular(v);
1:   }
1: 
1:   /**
0:    * returns sum of all vectors in different files specified by glob
1:    *
0:    * @param glob
0:    * @param conf
0:    * @return
0:    * @throws IOException
1:    */
1:   public static Vector loadAndSumUpVectors(Path glob, Configuration conf)
1:     throws IOException {
1: 
1:     SequenceFileDirValueIterator<VectorWritable> iter =
0:       new SequenceFileDirValueIterator<VectorWritable>(glob,
1:                                                        PathType.GLOB,
1:                                                        null,
1:                                                        PARTITION_COMPARATOR,
1:                                                        true,
1:                                                        conf);
1: 
1:     try {
1:       Vector v = null;
1:       while (iter.hasNext()) {
0:         if (v == null)
1:           v = new DenseVector(iter.next().get());
0:         else
1:           v.assign(iter.next().get(), Functions.PLUS);
1:       }
1:       return v;
1: 
1:     } finally {
0:       Closeables.closeQuietly(iter);
1:     }
1: 
1:   }
1: 
1:   /**
1:    * Load only one upper triangular matrix and issue error if mroe than one is
1:    * found.
1:    *
0:    * @param fs
0:    * @param glob
0:    * @param conf
0:    * @return
0:    * @throws IOException
1:    */
0:   public static UpperTriangular loadUpperTriangularMatrix(FileSystem fs,
0:                                                           Path glob,
1:                                                           Configuration conf)
1:     throws IOException {
1: 
1:     /*
1:      * there still may be more than one file in glob and only one of them must
1:      * contain the matrix.
1:      */
1: 
1:     SequenceFileDirValueIterator<VectorWritable> iter =
0:       new SequenceFileDirValueIterator<VectorWritable>(glob,
1:                                                        PathType.GLOB,
1:                                                        null,
1:                                                        null,
1:                                                        true,
1:                                                        conf);
1:     try {
0:       if (!iter.hasNext())
1:         throw new IOException("No triangular matrices found");
1:       Vector v = iter.next().get();
1:       UpperTriangular result = new UpperTriangular(v);
0:       if (iter.hasNext())
1:         throw new IOException("Unexpected overrun in upper triangular matrix files");
1:       return result;
1: 
1:     } finally {
0:       iter.close();
1:     }
1:   }
1: 
1:   /**
1:    * extracts row-wise raw data from a Mahout matrix for 3rd party solvers.
0:    * Unfortunately values member is 100% encapsulated in {@link DenseMatrix} at
1:    * this point, so we have to resort to abstract element-wise copying.
1:    *
0:    * @param m
0:    * @return
1:    */
1:   public static double[][] extractRawData(Matrix m) {
1:     int rows = m.numRows();
1:     int cols = m.numCols();
1:     double[][] result = new double[rows][];
1:     for (int i = 0; i < rows; i++) {
1:       result[i] = new double[cols];
1:       for (int j = 0; j < cols; j++) {
1:         result[i][j] = m.getQuick(i, j);
1:       }
1:     }
1:     return result;
1:   }
1: 
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(iter, true);
/////////////////////////////////////////////////////////////////////////
1:         Closeables.close(r, true);
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(iter, true);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public final class SSVDHelper {
1:   private static final Pattern OUTPUT_FILE_PATTERN = Pattern.compile("(\\w+)-(m|r)-(\\d+)(\\.\\w+)?");
0: 
1:   private SSVDHelper() {
1:   }
/////////////////////////////////////////////////////////////////////////
1:       if (!iter.hasNext()) {
1:       }
1:       if (iter.hasNext()) {
1:       }
/////////////////////////////////////////////////////////////////////////
1:    * @param v vector to save
/////////////////////////////////////////////////////////////////////////
0:       if (fstats[0].isDir()) {
1:         firstSeqFile = fs.listStatus(fstats[0].getPath(), PathFilters.logsCRCFilter())[0];
0:         firstSeqFile = fstats[0];
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   public static double[][] loadDistributedRowMatrix(FileSystem fs, Path glob, Configuration conf) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:    * Load multiple upper triangular matrices and sum them up.
0:   public static UpperTriangular loadAndSumUpperTriangularMatrices(Path glob, Configuration conf) throws IOException {
1:    * @return sum of all vectors in different files specified by glob
/////////////////////////////////////////////////////////////////////////
1:         if (v == null) {
1:         } else {
1:         }
/////////////////////////////////////////////////////////////////////////
1:   public static UpperTriangular loadUpperTriangularMatrix(Path glob, Configuration conf) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:       if (!iter.hasNext()) {
0:       }
1:       if (iter.hasNext()) {
0:       }
/////////////////////////////////////////////////////////////////////////
1:    * Unfortunately values member is 100% encapsulated in {@link org.apache.mahout.math.DenseMatrix} at
============================================================================