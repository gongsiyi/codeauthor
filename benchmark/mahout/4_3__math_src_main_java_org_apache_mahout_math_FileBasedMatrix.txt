1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
9:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
9:a07bfc3:  */
4:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math;
1:a07bfc3: 
1:a07bfc3: import com.google.common.base.Preconditions;
1:a07bfc3: import com.google.common.collect.Lists;
1:a07bfc3: 
1:a07bfc3: import java.io.File;
1:a07bfc3: import java.io.FileInputStream;
1:a07bfc3: import java.io.FileOutputStream;
1:a07bfc3: import java.io.IOException;
1:a07bfc3: import java.nio.ByteBuffer;
1:a07bfc3: import java.nio.DoubleBuffer;
1:a07bfc3: import java.nio.MappedByteBuffer;
1:a07bfc3: import java.nio.channels.FileChannel;
1:a07bfc3: import java.util.List;
1:a07bfc3: 
9:a07bfc3: /**
1:a07bfc3:  * Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that
1:a07bfc3:  * data onto the Java heap.  Instead, the file is mapped into non-heap memory as a DoubleBuffer and we access
1:a07bfc3:  * that instead.
1:a07bfc3:  */
1:8b6a26a: public final class FileBasedMatrix extends AbstractMatrix {
1:8b6a26a:   private final int rowsPerBlock;
1:8b6a26a:   private final List<DoubleBuffer> content = Lists.newArrayList();
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Constructs an empty matrix of the given size.
1:6d16230:    *
1:6d16230:    * @param rows    The number of rows in the result.
1:6d16230:    * @param columns The number of columns in the result.
1:6d16230:    */
1:6d16230:   public FileBasedMatrix(int rows, int columns) {
1:6d16230:     super(rows, columns);
1:6d16230:     long maxRows = ((1L << 31) - 1) / (columns * 8);
1:6d16230:     if (rows > maxRows) {
1:6d16230:       rowsPerBlock = (int) maxRows;
1:6d16230:     } else {
1:6d16230:       rowsPerBlock = rows;
14:a07bfc3:     }
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   private void addData(DoubleBuffer content) {
1:6d16230:     this.content.add(content);
1:6d16230:   }
1:6d16230: 
1:6d16230:   public void setData(File f, boolean loadNow) throws IOException {
1:4ca6b86:     Preconditions.checkArgument(f.length() == rows * columns * 8L, "File " + f + " is wrong length");
1:6d16230: 
1:6d16230:     for (int i = 0; i < (rows + rowsPerBlock - 1) / rowsPerBlock; i++) {
1:4ca6b86:       long start = i * rowsPerBlock * columns * 8L;
1:6d16230:       long size = rowsPerBlock * columns * 8L;
1:6d16230:       MappedByteBuffer buf = new FileInputStream(f).getChannel().map(FileChannel.MapMode.READ_ONLY, start,
1:6d16230:                                                                      Math.min(f.length() - start, size));
1:6d16230:       if (loadNow) {
1:6d16230:         buf.load();
1:6d16230:       }
1:6d16230:       addData(buf.asDoubleBuffer());
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: 
1:6d16230:   public static void writeMatrix(File f, Matrix m) throws IOException {
1:6d16230:     Preconditions.checkArgument(f.canWrite(), "Can't write to output file");
1:6d16230:     FileOutputStream fos = new FileOutputStream(f);
1:4ca6b86:     try {
1:4ca6b86:       ByteBuffer buf = ByteBuffer.allocate(m.columnSize() * 8);
1:4ca6b86:       for (MatrixSlice row : m) {
1:4ca6b86:         buf.clear();
1:4ca6b86:         for (Vector.Element element : row.vector().all()) {
1:4ca6b86:           buf.putDouble(element.get());
1:4ca6b86:         }
1:4ca6b86:         buf.flip();
1:4ca6b86:         fos.write(buf.array());
1:6d16230:       }
1:4ca6b86:     } finally {
1:4ca6b86:       fos.close();
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Assign the other vector values to the column of the receiver
1:6d16230:    *
1:6d16230:    * @param column the int row to assign
1:6d16230:    * @param other  a Vector
1:6d16230:    * @return the modified receiver
1:6d16230:    * @throws org.apache.mahout.math.CardinalityException
1:6d16230:    *          if the cardinalities differ
1:6d16230:    */
1:6d16230:   @Override
1:6d16230:   public Matrix assignColumn(int column, Vector other) {
1:6d16230:     throw new UnsupportedOperationException("Default operation");
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Assign the other vector values to the row of the receiver
1:6d16230:    *
1:6d16230:    * @param row   the int row to assign
1:6d16230:    * @param other a Vector
1:6d16230:    * @return the modified receiver
1:6d16230:    * @throws org.apache.mahout.math.CardinalityException
1:6d16230:    *          if the cardinalities differ
1:6d16230:    */
1:6d16230:   @Override
1:6d16230:   public Matrix assignRow(int row, Vector other) {
1:6d16230:     throw new UnsupportedOperationException("Default operation");
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Return the value at the given indexes, without checking bounds
1:6d16230:    *
1:6d16230:    * @param row    an int row index
1:6d16230:    * @param column an int column index
1:6d16230:    * @return the double at the index
1:6d16230:    */
1:6d16230:   @Override
1:6d16230:   public double getQuick(int row, int column) {
1:6d16230:     int block = row / rowsPerBlock;
1:6d16230:     return content.get(block).get((row % rowsPerBlock) * columns + column);
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Return an empty matrix of the same underlying class as the receiver
1:6d16230:    *
1:6d16230:    * @return a Matrix
1:6d16230:    */
1:6d16230:   @Override
1:6d16230:   public Matrix like() {
1:6d16230:     throw new UnsupportedOperationException("Default operation");
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Returns an empty matrix of the same underlying class as the receiver and of the specified size.
1:6d16230:    *
1:6d16230:    * @param rows    the int number of rows
1:6d16230:    * @param columns the int number of columns
1:6d16230:    */
1:6d16230:   @Override
1:6d16230:   public Matrix like(int rows, int columns) {
1:6d16230:     return new DenseMatrix(rows, columns);
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Set the value at the given index, without checking bounds
1:6d16230:    *
1:6d16230:    * @param row    an int row index into the receiver
1:6d16230:    * @param column an int column index into the receiver
1:6d16230:    * @param value  a double value to set
1:6d16230:    */
1:6d16230:   @Override
1:6d16230:   public void setQuick(int row, int column, double value) {
1:6d16230:     throw new UnsupportedOperationException("Default operation");
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Return a view into part of a matrix.  Changes to the view will change the
1:6d16230:    * original matrix.
1:6d16230:    *
1:6d16230:    * @param offset an int[2] offset into the receiver
1:6d16230:    * @param size   the int[2] size of the desired result
1:6d16230:    * @return a matrix that shares storage with part of the original matrix.
1:6d16230:    * @throws org.apache.mahout.math.CardinalityException
1:6d16230:    *          if the length is greater than the cardinality of the receiver
1:6d16230:    * @throws org.apache.mahout.math.IndexException
1:6d16230:    *          if the offset is negative or the offset+length is outside of the receiver
1:6d16230:    */
1:6d16230:   @Override
1:6d16230:   public Matrix viewPart(int[] offset, int[] size) {
1:6d16230:     throw new UnsupportedOperationException("Default operation");
1:6d16230:   }
1:a07bfc3: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(f.length() == rows * columns * 8L, "File " + f + " is wrong length");
1:       long start = i * rowsPerBlock * columns * 8L;
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       ByteBuffer buf = ByteBuffer.allocate(m.columnSize() * 8);
1:       for (MatrixSlice row : m) {
1:         buf.clear();
1:         for (Vector.Element element : row.vector().all()) {
1:           buf.putDouble(element.get());
1:         }
1:         buf.flip();
1:         fos.write(buf.array());
1:     } finally {
1:       fos.close();
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: public final class FileBasedMatrix extends AbstractMatrix {
1:     private final int rowsPerBlock;
1:     private final List<DoubleBuffer> content = Lists.newArrayList();
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
0:       for (Vector.Element element : row.vector().all()) {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
0:   private final int rowsPerBlock;
0:   private final List<DoubleBuffer> content = Lists.newArrayList();
1:   /**
1:    * Constructs an empty matrix of the given size.
1:    *
1:    * @param rows    The number of rows in the result.
1:    * @param columns The number of columns in the result.
1:    */
1:   public FileBasedMatrix(int rows, int columns) {
1:     super(rows, columns);
1:     long maxRows = ((1L << 31) - 1) / (columns * 8);
1:     if (rows > maxRows) {
1:       rowsPerBlock = (int) maxRows;
1:     } else {
1:       rowsPerBlock = rows;
1:   }
1:   private void addData(DoubleBuffer content) {
1:     this.content.add(content);
1:   }
1: 
1:   public void setData(File f, boolean loadNow) throws IOException {
0:     Preconditions.checkArgument(f.length() == (long) rows * columns * 8L, "File " + f + " is wrong length");
1: 
1:     for (int i = 0; i < (rows + rowsPerBlock - 1) / rowsPerBlock; i++) {
0:       long start = (long) i * rowsPerBlock * columns * 8L;
1:       long size = rowsPerBlock * columns * 8L;
1:       MappedByteBuffer buf = new FileInputStream(f).getChannel().map(FileChannel.MapMode.READ_ONLY, start,
1:                                                                      Math.min(f.length() - start, size));
1:       if (loadNow) {
1:         buf.load();
1:       }
1:       addData(buf.asDoubleBuffer());
1:   }
1:   public static void writeMatrix(File f, Matrix m) throws IOException {
1:     Preconditions.checkArgument(f.canWrite(), "Can't write to output file");
1:     FileOutputStream fos = new FileOutputStream(f);
0:     ByteBuffer buf = ByteBuffer.allocate(m.columnSize() * 8);
0:     for (MatrixSlice row : m) {
0:       buf.clear();
0:       for (Vector.Element element : row.vector()) {
0:         buf.putDouble(element.get());
1:       }
0:       buf.flip();
0:       fos.write(buf.array());
0:     fos.close();
1:   }
1:   /**
1:    * Assign the other vector values to the column of the receiver
1:    *
1:    * @param column the int row to assign
1:    * @param other  a Vector
1:    * @return the modified receiver
1:    * @throws org.apache.mahout.math.CardinalityException
1:    *          if the cardinalities differ
1:    */
1:   @Override
1:   public Matrix assignColumn(int column, Vector other) {
1:     throw new UnsupportedOperationException("Default operation");
1:   }
1:   /**
1:    * Assign the other vector values to the row of the receiver
1:    *
1:    * @param row   the int row to assign
1:    * @param other a Vector
1:    * @return the modified receiver
1:    * @throws org.apache.mahout.math.CardinalityException
1:    *          if the cardinalities differ
1:    */
1:   @Override
1:   public Matrix assignRow(int row, Vector other) {
1:     throw new UnsupportedOperationException("Default operation");
1:   }
1:   /**
1:    * Return the value at the given indexes, without checking bounds
1:    *
1:    * @param row    an int row index
1:    * @param column an int column index
1:    * @return the double at the index
1:    */
1:   @Override
1:   public double getQuick(int row, int column) {
1:     int block = row / rowsPerBlock;
1:     return content.get(block).get((row % rowsPerBlock) * columns + column);
1:   }
1:   /**
1:    * Return an empty matrix of the same underlying class as the receiver
1:    *
1:    * @return a Matrix
1:    */
1:   @Override
1:   public Matrix like() {
1:     throw new UnsupportedOperationException("Default operation");
1:   }
1:   /**
1:    * Returns an empty matrix of the same underlying class as the receiver and of the specified size.
1:    *
1:    * @param rows    the int number of rows
1:    * @param columns the int number of columns
1:    */
1:   @Override
1:   public Matrix like(int rows, int columns) {
1:     return new DenseMatrix(rows, columns);
1:   }
1:   /**
1:    * Set the value at the given index, without checking bounds
1:    *
1:    * @param row    an int row index into the receiver
1:    * @param column an int column index into the receiver
1:    * @param value  a double value to set
1:    */
1:   @Override
1:   public void setQuick(int row, int column, double value) {
1:     throw new UnsupportedOperationException("Default operation");
1:   }
1:   /**
1:    * Return a view into part of a matrix.  Changes to the view will change the
1:    * original matrix.
1:    *
1:    * @param offset an int[2] offset into the receiver
1:    * @param size   the int[2] size of the desired result
1:    * @return a matrix that shares storage with part of the original matrix.
1:    * @throws org.apache.mahout.math.CardinalityException
1:    *          if the length is greater than the cardinality of the receiver
1:    * @throws org.apache.mahout.math.IndexException
1:    *          if the offset is negative or the offset+length is outside of the receiver
1:    */
1:   @Override
1:   public Matrix viewPart(int[] offset, int[] size) {
1:     throw new UnsupportedOperationException("Default operation");
1:   }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import com.google.common.base.Preconditions;
1: import com.google.common.collect.Lists;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.nio.DoubleBuffer;
1: import java.nio.MappedByteBuffer;
1: import java.nio.channels.FileChannel;
1: import java.util.List;
1: 
1: /**
1:  * Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that
1:  * data onto the Java heap.  Instead, the file is mapped into non-heap memory as a DoubleBuffer and we access
1:  * that instead.
1:  */
0: public class FileBasedMatrix extends AbstractMatrix {
0:     private int rowsPerBlock;
0:     private List<DoubleBuffer> content = Lists.newArrayList();
1: 
1:     /**
0:      * Constructs an empty matrix of the given size.
1:      *
0:      * @param rows    The number of rows in the result.
0:      * @param columns The number of columns in the result.
1:      */
0:     public FileBasedMatrix(int rows, int columns) {
0:         super(rows, columns);
0:         long maxRows = ((1L << 31) - 1) / (columns * 8);
0:         if (rows > maxRows) {
0:             rowsPerBlock = (int) maxRows;
0:         } else {
0:             rowsPerBlock = rows;
1:         }
1:     }
1: 
0:     private void addData(DoubleBuffer content) {
0:         this.content.add(content);
1:     }
1: 
0:     public void setData(File f, boolean loadNow) throws IOException {
0:         Preconditions.checkArgument(f.length() == (long) rows * columns * 8L, "File " + f + " is wrong length");
1: 
0:         for (int i = 0; i < (rows + rowsPerBlock - 1) / rowsPerBlock; i++) {
0:             long start = (long) i * rowsPerBlock * columns * 8L;
0:             long size = rowsPerBlock * columns * 8L;
0:             MappedByteBuffer buf = new FileInputStream(f).getChannel().map(FileChannel.MapMode.READ_ONLY, start, Math.min(f.length() - start, size));
0:             if (loadNow) {
0:                 buf.load();
1:             }
0:             addData(buf.asDoubleBuffer());
1:         }
1:     }
1: 
0:     public static void writeMatrix(File f, Matrix m) throws IOException {
0:         Preconditions.checkArgument(f.canWrite(), "Can't write to output file");
0:         FileOutputStream fos = new FileOutputStream(f);
1: 
0:         ByteBuffer buf = ByteBuffer.allocate(m.columnSize() * 8);
0:         for (MatrixSlice row : m) {
0:             buf.clear();
0:             for (Vector.Element element : row.vector()) {
0:                 buf.putDouble(element.get());
1:             }
0:             buf.flip();
0:             fos.write(buf.array());
1:         }
0:         fos.close();
1:     }
1: 
1:     /**
0:      * Assign the other vector values to the column of the receiver
1:      *
0:      * @param column the int row to assign
0:      * @param other  a Vector
0:      * @return the modified receiver
0:      * @throws org.apache.mahout.math.CardinalityException
0:      *          if the cardinalities differ
1:      */
0:     @Override
0:     public Matrix assignColumn(int column, Vector other) {
0:         throw new UnsupportedOperationException("Default operation");
1:     }
1: 
1:     /**
0:      * Assign the other vector values to the row of the receiver
1:      *
0:      * @param row   the int row to assign
0:      * @param other a Vector
0:      * @return the modified receiver
0:      * @throws org.apache.mahout.math.CardinalityException
0:      *          if the cardinalities differ
1:      */
0:     @Override
0:     public Matrix assignRow(int row, Vector other) {
0:         throw new UnsupportedOperationException("Default operation");
1:     }
1: 
1:     /**
0:      * Return the value at the given indexes, without checking bounds
1:      *
0:      * @param row    an int row index
0:      * @param column an int column index
0:      * @return the double at the index
1:      */
0:     @Override
0:     public double getQuick(int row, int column) {
0:         int block = row / rowsPerBlock;
0:         return content.get(block).get((row % rowsPerBlock) * columns + column);
1:     }
1: 
1:     /**
0:      * Return an empty matrix of the same underlying class as the receiver
1:      *
0:      * @return a Matrix
1:      */
0:     @Override
0:     public Matrix like() {
0:         throw new UnsupportedOperationException("Default operation");
1:     }
1: 
1:     /**
0:      * Returns an empty matrix of the same underlying class as the receiver and of the specified size.
1:      *
0:      * @param rows    the int number of rows
0:      * @param columns the int number of columns
1:      */
0:     @Override
0:     public Matrix like(int rows, int columns) {
0:         return new DenseMatrix(rows, columns);
1:     }
1: 
1:     /**
0:      * Set the value at the given index, without checking bounds
1:      *
0:      * @param row    an int row index into the receiver
0:      * @param column an int column index into the receiver
0:      * @param value  a double value to set
1:      */
0:     @Override
0:     public void setQuick(int row, int column, double value) {
0:         throw new UnsupportedOperationException("Default operation");
1:     }
1: 
1:     /**
0:      * Return a view into part of a matrix.  Changes to the view will change the
0:      * original matrix.
1:      *
0:      * @param offset an int[2] offset into the receiver
0:      * @param size   the int[2] size of the desired result
0:      * @return a matrix that shares storage with part of the original matrix.
0:      * @throws org.apache.mahout.math.CardinalityException
0:      *          if the length is greater than the cardinality of the receiver
0:      * @throws org.apache.mahout.math.IndexException
0:      *          if the offset is negative or the offset+length is outside of the receiver
1:      */
0:     @Override
0:     public Matrix viewPart(int[] offset, int[] size) {
0:         throw new UnsupportedOperationException("Default operation");
1:     }
1: }
============================================================================