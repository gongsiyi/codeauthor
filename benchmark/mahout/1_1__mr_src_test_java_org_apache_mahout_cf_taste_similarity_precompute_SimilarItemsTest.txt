1:7856689: /**
1:7856689:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7856689:  * contributor license agreements.  See the NOTICE file distributed with
1:7856689:  * this work for additional information regarding copyright ownership.
1:7856689:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7856689:  * (the "License"); you may not use this file except in compliance with
1:7856689:  * the License.  You may obtain a copy of the License at
1:7856689:  *
1:7856689:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7856689:  *
1:7856689:  * Unless required by applicable law or agreed to in writing, software
1:7856689:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7856689:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7856689:  * See the License for the specific language governing permissions and
1:7856689:  * limitations under the License.
1:7856689:  */
1:7856689: 
1:7856689: package org.apache.mahout.cf.taste.similarity.precompute;
1:7856689: 
1:7856689: import java.util.ArrayList;
1:7856689: import java.util.List;
1:7856689: 
1:7856689: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:7856689: import org.apache.mahout.cf.taste.impl.recommender.GenericRecommendedItem;
1:7856689: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:7856689: import org.hamcrest.Matchers;
1:7856689: import org.junit.Test;
1:7856689: 
1:7856689: public class SimilarItemsTest extends TasteTestCase {
1:7856689: 
1:7856689:   @Test
1:7856689:   public void testIterator() {
1:7856689: 	List<RecommendedItem> recommendedItems = new ArrayList<>();
1:7856689: 	for (long itemId = 2; itemId < 10; itemId++) {
1:7856689: 	  recommendedItems.add(new GenericRecommendedItem(itemId, itemId));
1:7856689: 	}
1:7856689: 
1:7856689: 	SimilarItems similarItems = new SimilarItems(1, recommendedItems);
1:7856689: 
1:7856689: 	assertThat(similarItems.getSimilarItems(), Matchers.<SimilarItem> iterableWithSize(recommendedItems.size()));
1:7856689: 
1:7856689: 	int byHandIndex = 0;
1:7856689: 	for (SimilarItem simItem : similarItems.getSimilarItems()) {
1:7856689: 	  RecommendedItem recItem = recommendedItems.get(byHandIndex++);
1:7856689: 	  assertEquals(simItem.getItemID(), recItem.getItemID());
1:7856689: 	  assertEquals(simItem.getSimilarity(), recItem.getValue(), EPSILON);
1:7856689: 	}
1:7856689: 
1:7856689:   }
1:7856689: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:7856689
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.similarity.precompute;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: import org.apache.mahout.cf.taste.impl.recommender.GenericRecommendedItem;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1: import org.hamcrest.Matchers;
1: import org.junit.Test;
1: 
1: public class SimilarItemsTest extends TasteTestCase {
1: 
1:   @Test
1:   public void testIterator() {
1: 	List<RecommendedItem> recommendedItems = new ArrayList<>();
1: 	for (long itemId = 2; itemId < 10; itemId++) {
1: 	  recommendedItems.add(new GenericRecommendedItem(itemId, itemId));
1: 	}
1: 
1: 	SimilarItems similarItems = new SimilarItems(1, recommendedItems);
1: 
1: 	assertThat(similarItems.getSimilarItems(), Matchers.<SimilarItem> iterableWithSize(recommendedItems.size()));
1: 
1: 	int byHandIndex = 0;
1: 	for (SimilarItem simItem : similarItems.getSimilarItems()) {
1: 	  RecommendedItem recItem = recommendedItems.get(byHandIndex++);
1: 	  assertEquals(simItem.getItemID(), recItem.getItemID());
1: 	  assertEquals(simItem.getSimilarity(), recItem.getValue(), EPSILON);
1: 	}
1: 
1:   }
1: }
============================================================================