2:515a414: /**
1:515a414:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:515a414:  * contributor license agreements.  See the NOTICE file distributed with
1:515a414:  * this work for additional information regarding copyright ownership.
1:515a414:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:515a414:  * (the "License"); you may not use this file except in compliance with
1:515a414:  * the License.  You may obtain a copy of the License at
2:515a414:  *
1:515a414:  *     http://www.apache.org/licenses/LICENSE-2.0
1:515a414:  *
1:515a414:  * Unless required by applicable law or agreed to in writing, software
1:515a414:  * distributed under the License is distributed on an "AS IS" BASIS,
1:515a414:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:515a414:  * See the License for the specific language governing permissions and
1:515a414:  * limitations under the License.
2:515a414:  */
3:515a414: 
1:515a414: package org.apache.mahout.classifier.naivebayes;
1:515a414: 
1:515a414: import org.apache.mahout.classifier.AbstractVectorClassifier;
1:515a414: import org.apache.mahout.math.Vector;
1:515a414: import org.apache.mahout.math.Vector.Element;
1:515a414: 
1:418f643: /**
1:418f643:  * Class implementing the Naive Bayes Classifier Algorithm. Note that this class
1:10c535c:  * supports {@link #classifyFull}, but not {@code classify} or
1:10c535c:  * {@code classifyScalar}. The reason that these two methods are not
1:418f643:  * supported is because the scores computed by a NaiveBayesClassifier do not
1:418f643:  * represent probabilities.
1:418f643:  */
1:96024a7: public abstract class AbstractNaiveBayesClassifier extends AbstractVectorClassifier {
1:96024a7: 
1:939ac30:   private final NaiveBayesModel model;
1:515a414:   
1:939ac30:   protected AbstractNaiveBayesClassifier(NaiveBayesModel model) {
1:515a414:     this.model = model;
2:515a414:   }
1:939ac30: 
1:939ac30:   protected NaiveBayesModel getModel() {
1:939ac30:     return model;
1:939ac30:   }
1:515a414:   
1:e3fb0c4:   protected abstract double getScoreForLabelFeature(int label, int feature);
1:e3fb0c4: 
1:e3fb0c4:   protected double getScoreForLabelInstance(int label, Vector instance) {
1:515a414:     double result = 0.0;
1:dc62944:     for (Element e : instance.nonZeroes()) {
1:d8d721a:       result += e.get() * getScoreForLabelFeature(label, e.index());
1:515a414:     }
1:d94eb39:     return result;
1:515a414:   }
1:515a414:   
1:515a414:   @Override
1:515a414:   public int numCategories() {
1:e3fb0c4:     return model.numLabels();
1:515a414:   }
1:515a414: 
1:515a414:   @Override
1:d8d721a:   public Vector classifyFull(Vector instance) {
1:034f21a:     return classifyFull(model.createScoringVector(), instance);
1:515a414:   }
1:d8d721a:   
1:d8d721a:   @Override
1:d8d721a:   public Vector classifyFull(Vector r, Vector instance) {
1:034f21a:     for (int label = 0; label < model.numLabels(); label++) {
1:034f21a:       r.setQuick(label, getScoreForLabelInstance(label, instance));
1:034f21a:     }
1:d8d721a:     return r;
1:d8d721a:   }
1:515a414: 
1:418f643:   /** Unsupported method. This implementation simply throws an {@link UnsupportedOperationException}. */
1:515a414:   @Override
1:515a414:   public double classifyScalar(Vector instance) {
1:515a414:     throw new UnsupportedOperationException("Not supported in Naive Bayes");
1:515a414:   }
1:515a414:   
1:418f643:   /** Unsupported method. This implementation simply throws an {@link UnsupportedOperationException}. */
1:d8d721a:   @Override
1:d8d721a:   public Vector classify(Vector instance) {
1:d8d721a:     throw new UnsupportedOperationException("probabilites not supported in Naive Bayes");
1:d8d721a:   }
1:515a414: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     for (Element e : instance.nonZeroes()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1:  * supports {@link #classifyFull}, but not {@code classify} or
1:  * {@code classifyScalar}. The reason that these two methods are not
commit:939ac30
/////////////////////////////////////////////////////////////////////////
1:   private final NaiveBayesModel model;
1:   protected AbstractNaiveBayesClassifier(NaiveBayesModel model) {
1: 
1:   protected NaiveBayesModel getModel() {
1:     return model;
1:   }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:418f643
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Class implementing the Naive Bayes Classifier Algorithm. Note that this class
0:  * supports {@link #classifyFull}, but not <code>classify</code> or
0:  * <code>classifyScalar</code>. The reason that these two methods are not
1:  * supported is because the scores computed by a NaiveBayesClassifier do not
1:  * represent probabilities.
1:  */
/////////////////////////////////////////////////////////////////////////
1:   /** Unsupported method. This implementation simply throws an {@link UnsupportedOperationException}. */
1:   /** Unsupported method. This implementation simply throws an {@link UnsupportedOperationException}. */
commit:034f21a
/////////////////////////////////////////////////////////////////////////
1:     return classifyFull(model.createScoringVector(), instance);
1:     for (int label = 0; label < model.numLabels(); label++) {
1:       r.setQuick(label, getScoreForLabelInstance(label, instance));
1:     }
commit:e3fb0c4
/////////////////////////////////////////////////////////////////////////
0: /** Class implementing the Naive Bayes Classifier Algorithm */
0: abstract class AbstractNaiveBayesClassifier extends AbstractVectorClassifier {
/////////////////////////////////////////////////////////////////////////
1:   protected abstract double getScoreForLabelFeature(int label, int feature);
1: 
1:   protected double getScoreForLabelInstance(int label, Vector instance) {
0:     Iterator<Element> elements = instance.iterateNonZero();
0:     while (elements.hasNext()) {
0:       result += getScoreForLabelFeature(label, elements.next().index());
0:     return result / model.thetaNormalizer(label);
1:     return model.numLabels();
0:     Vector score = model.createScoringVector();
0:     for (int label = 0; label < model.numLabels(); label++) {
0:       score.set(label, getScoreForLabelInstance(label, instance));
commit:96024a7
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractNaiveBayesClassifier extends AbstractVectorClassifier {
1: 
/////////////////////////////////////////////////////////////////////////
0:       result +=  getScoreForLabelFeature(label, it.next().index());
author:Robin Anil
-------------------------------------------------------------------------------
commit:d94eb39
/////////////////////////////////////////////////////////////////////////
1:     return result;
commit:1bdf3ab
/////////////////////////////////////////////////////////////////////////
0:     return -result;
commit:a344c6b
/////////////////////////////////////////////////////////////////////////
commit:d8d721a
/////////////////////////////////////////////////////////////////////////
0:       Element e = elements.next();
1:       result += e.get() * getScoreForLabelFeature(label, e.index());
/////////////////////////////////////////////////////////////////////////
1:   public Vector classifyFull(Vector instance) {
0:     System.out.println(1);
0:     System.out.println(score.size());
1:   
1:   @Override
1:   public Vector classifyFull(Vector r, Vector instance) {
0:     r = classifyFull(instance);
1:     return r;
1:   }
1:   @Override
1:   public Vector classify(Vector instance) {
1:     throw new UnsupportedOperationException("probabilites not supported in Naive Bayes");
1:   }
commit:515a414
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.naivebayes;
1: 
0: import java.util.Iterator;
1: 
1: import org.apache.mahout.classifier.AbstractVectorClassifier;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.Vector.Element;
1: 
1: /**
0:  * Class implementing the Naive Bayes Classifier Algorithm
1:  * 
1:  */
0: public abstract class AbstractNaiveBayesClassifier extends AbstractVectorClassifier { 
0:   protected NaiveBayesModel model;
1:   
0:   public AbstractNaiveBayesClassifier(NaiveBayesModel model) {
1:     this.model = model;
1:   }
1:   
0:   public abstract double getScoreForLabelFeature(int label, int feature);
1:   
0:   public double getScoreForLabelInstance(int label, Vector instance) {
1:     double result = 0.0;
0:     Iterator<Element> it = instance.iterateNonZero();
0:     while (it.hasNext()) {
0:       Element e = it.next();
0:       result +=  getScoreForLabelFeature(label, e.index());
1:     }
0:     return result;
1:   }
1:   
1:   @Override
1:   public int numCategories() {
0:     return model.getNumLabels();
1:   }
1: 
1:   @Override
0:   public Vector classify(Vector instance) {
0:     Vector score = model.getLabelSum().like();
0:     for (int i = 0; i < score.size(); i++) {
0:       score.set(i, getScoreForLabelInstance(i, instance));
1:     }
0:     return score;
1:   }
1: 
1:   @Override
1:   public double classifyScalar(Vector instance) {
1:     throw new UnsupportedOperationException("Not supported in Naive Bayes");
1:   }
1:   
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0: public abstract class AbstractNaiveBayesClassifier extends AbstractVectorClassifier {
============================================================================