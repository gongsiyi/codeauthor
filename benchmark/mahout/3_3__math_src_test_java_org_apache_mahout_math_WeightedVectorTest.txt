1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
2:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math;
1:a07bfc3: 
1:be028c7: import org.apache.mahout.math.function.Functions;
1:a07bfc3: import org.junit.Test;
1:a07bfc3: 
1:a07bfc3: 
1:3d4e6e2: public class WeightedVectorTest extends AbstractVectorTest {
1:0b8db82:   @Test
1:0b8db82:   public void testLength() {
1:0b8db82:     Vector v = new DenseVector(new double[]{0.9921337470551008, 1.0031004325833064, 0.9963963182745947});
1:0b8db82:     Centroid c = new Centroid(3, new DenseVector(v), 2);
1:8b6a26a:     assertEquals(c.getVector().getLengthSquared(), c.getLengthSquared(), 1.0e-17);
1:0b8db82:     // previously, this wouldn't clear the cached squared length value correctly which would cause bad distances
1:0b8db82:     c.set(0, -1);
1:0b8db82:     System.out.printf("c = %.9f\nv = %.9f\n", c.getLengthSquared(), c.getVector().getLengthSquared());
1:8b6a26a:     assertEquals(c.getVector().getLengthSquared(), c.getLengthSquared(), 1.0e-17);
1:0b8db82:   }
1:3d4e6e2: 
1:3d4e6e2:   @Override
1:3d4e6e2:   public Vector vectorToTest(int size) {
1:3d4e6e2:     return new WeightedVector(new DenseVector(size), 4.52, 345);
1:3d4e6e2:   }
1:be028c7: 
1:be028c7:   @Test
1:be028c7:   public void testOrdering() {
1:be028c7:     WeightedVector v1 = new WeightedVector(new DenseVector(new double[]{1, 2, 3}), 5.41, 31);
1:be028c7:     WeightedVector v2 = new WeightedVector(new DenseVector(new double[]{1, 2, 3}), 5.00, 31);
1:be028c7:     WeightedVector v3 = new WeightedVector(new DenseVector(new double[]{1, 3, 3}), 5.00, 31);
1:4ca6b86:     WeightedVector v4 = v1.clone();
1:5c13640:     WeightedVectorComparator comparator = new WeightedVectorComparator();
1:be028c7: 
1:5c13640:     assertTrue(comparator.compare(v1, v2) > 0);
1:5c13640:     assertTrue(comparator.compare(v3, v1) < 0);
1:5c13640:     assertTrue(comparator.compare(v3, v2) > 0);
1:5c13640:     assertEquals(0, comparator.compare(v4, v1));
1:5c13640:     assertEquals(0, comparator.compare(v1, v1));
1:be028c7:   }
1:be028c7: 
1:be028c7:   @Test
1:be028c7:   public void testProjection() {
1:be028c7:     Vector v1 = new DenseVector(10).assign(Functions.random());
1:be028c7:     WeightedVector v2 = new WeightedVector(v1, v1, 31);
1:8b6a26a:     assertEquals(v1.dot(v1), v2.getWeight(), 1.0e-13);
1:be028c7:     assertEquals(31, v2.getIndex());
1:be028c7: 
1:be028c7:     Matrix y = new DenseMatrix(10, 4).assign(Functions.random());
1:be028c7:     Matrix q = new QRDecomposition(y.viewPart(0, 10, 0, 3)).getQ();
1:be028c7: 
1:be028c7:     Vector nullSpace = y.viewColumn(3).minus(q.times(q.transpose().times(y.viewColumn(3))));
1:be028c7: 
1:be028c7:     WeightedVector v3 = new WeightedVector(q.viewColumn(0).plus(q.viewColumn(1)), nullSpace, 1);
1:8b6a26a:     assertEquals(0, v3.getWeight(), 1.0e-13);
1:be028c7: 
1:8b6a26a:     Vector qx = q.viewColumn(0).plus(q.viewColumn(1)).normalize();
1:be028c7:     WeightedVector v4 = new WeightedVector(qx, q.viewColumn(0), 2);
1:8b6a26a:     assertEquals(Math.sqrt(0.5), v4.getWeight(), 1.0e-13);
1:be028c7: 
1:be028c7:     WeightedVector v5 = WeightedVector.project(q.viewColumn(0), qx);
1:8b6a26a:     assertEquals(Math.sqrt(0.5), v5.getWeight(), 1.0e-13);
1:be028c7:   }
1:1e3f7ae: 
1:1e3f7ae:   @Override
1:1e3f7ae:   public void testSize() {
1:be8e8a0:     assertEquals("size", 3, getTestVector().getNumNonZeroElements());
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Override
1:1e3f7ae:   Vector generateTestVector(int cardinality) {
1:1e3f7ae:     return new WeightedVector(new DenseVector(cardinality), 3.14, 53);
1:1e3f7ae:   }
2:a07bfc3: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:     WeightedVector v4 = v1.clone();
commit:5c13640
/////////////////////////////////////////////////////////////////////////
1:     WeightedVectorComparator comparator = new WeightedVectorComparator();
1:     assertTrue(comparator.compare(v1, v2) > 0);
1:     assertTrue(comparator.compare(v3, v1) < 0);
1:     assertTrue(comparator.compare(v3, v2) > 0);
1:     assertEquals(0, comparator.compare(v4, v1));
1:     assertEquals(0, comparator.compare(v1, v1));
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(c.getVector().getLengthSquared(), c.getLengthSquared(), 1.0e-17);
1:     assertEquals(c.getVector().getLengthSquared(), c.getLengthSquared(), 1.0e-17);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(0, v4.compareTo(v1));
0:     assertEquals(0, v1.compareTo(v1));
1:     assertEquals(v1.dot(v1), v2.getWeight(), 1.0e-13);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, v3.getWeight(), 1.0e-13);
1:     Vector qx = q.viewColumn(0).plus(q.viewColumn(1)).normalize();
1:     assertEquals(Math.sqrt(0.5), v4.getWeight(), 1.0e-13);
1:     assertEquals(Math.sqrt(0.5), v5.getWeight(), 1.0e-13);
author:Robin Anil
-------------------------------------------------------------------------------
commit:be8e8a0
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("size", 3, getTestVector().getNumNonZeroElements());
commit:be94533
/////////////////////////////////////////////////////////////////////////
0:     assertEquals("size", 3, getTestVector().getNumNondefaultElements());
author:Ted Dunning
-------------------------------------------------------------------------------
commit:1e3f7ae
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public void testSize() {
0:     assertEquals("size", 7, getTestVector().getNumNondefaultElements());
1:   }
1: 
1:   @Override
1:   Vector generateTestVector(int cardinality) {
1:     return new WeightedVector(new DenseVector(cardinality), 3.14, 53);
1:   }
commit:be028c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test
1:   public void testOrdering() {
1:     WeightedVector v1 = new WeightedVector(new DenseVector(new double[]{1, 2, 3}), 5.41, 31);
1:     WeightedVector v2 = new WeightedVector(new DenseVector(new double[]{1, 2, 3}), 5.00, 31);
1:     WeightedVector v3 = new WeightedVector(new DenseVector(new double[]{1, 3, 3}), 5.00, 31);
0:     WeightedVector v4 = (WeightedVector) v1.clone();
1: 
0:     assertTrue(v1.compareTo(v2) > 0);
0:     assertTrue(v3.compareTo(v1) < 0);
0:     assertTrue(v3.compareTo(v2) > 0);
0:     assertTrue(v4.compareTo(v1) == 0);
0:     assertTrue(v1.compareTo(v1) == 0);
1:   }
1: 
1:   @Test
1:   public void testProjection() {
1:     Vector v1 = new DenseVector(10).assign(Functions.random());
1:     WeightedVector v2 = new WeightedVector(v1, v1, 31);
0:     assertEquals(v1.dot(v1), v2.getWeight(), 1e-13);
1:     assertEquals(31, v2.getIndex());
1: 
1:     Matrix y = new DenseMatrix(10, 4).assign(Functions.random());
1:     Matrix q = new QRDecomposition(y.viewPart(0, 10, 0, 3)).getQ();
1: 
1:     Vector nullSpace = y.viewColumn(3).minus(q.times(q.transpose().times(y.viewColumn(3))));
1: 
1:     WeightedVector v3 = new WeightedVector(q.viewColumn(0).plus(q.viewColumn(1)), nullSpace, 1);
0:     assertEquals(0, v3.getWeight(), 1e-13);
1: 
0:     final Vector qx = q.viewColumn(0).plus(q.viewColumn(1)).normalize();
1:     WeightedVector v4 = new WeightedVector(qx, q.viewColumn(0), 2);
0:     assertEquals(Math.sqrt(0.5), v4.getWeight(), 1e-13);
1: 
1:     WeightedVector v5 = WeightedVector.project(q.viewColumn(0), qx);
0:     assertEquals(Math.sqrt(0.5), v5.getWeight(), 1e-13);
1:   }
commit:3d4e6e2
/////////////////////////////////////////////////////////////////////////
1: public class WeightedVectorTest extends AbstractVectorTest {
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public Vector vectorToTest(int size) {
1:     return new WeightedVector(new DenseVector(size), 4.52, 345);
1:   }
commit:0b8db82
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testLength() {
1:     Vector v = new DenseVector(new double[]{0.9921337470551008, 1.0031004325833064, 0.9963963182745947});
1:     Centroid c = new Centroid(3, new DenseVector(v), 2);
0:     assertEquals(c.getVector().getLengthSquared(), c.getLengthSquared(), 1e-17);
1:     // previously, this wouldn't clear the cached squared length value correctly which would cause bad distances
1:     c.set(0, -1);
1:     System.out.printf("c = %.9f\nv = %.9f\n", c.getLengthSquared(), c.getVector().getLengthSquared());
0:     assertEquals(c.getVector().getLengthSquared(), c.getLengthSquared(), 1e-17);
1:   }
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.junit.Test;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
1: 
0: public class WeightedVectorTest {
0:     @Test
0:     public void testLength() {
0:         Vector v = new DenseVector(new double[]{0.9921337470551008, 1.0031004325833064, 0.9963963182745947});
0:         Centroid c = new Centroid(3, new DenseVector(v), 2);
0:         assertEquals(c.getVector().getLengthSquared(), c.getLengthSquared(), 1e-17);
0:         // previously, this wouldn't clear the cached squared length value correctly which would cause bad distances
0:         c.set(0, -1);
0:         System.out.printf("c = %.9f\nv = %.9f\n", c.getLengthSquared(), c.getVector().getLengthSquared());
0:         assertEquals(c.getVector().getLengthSquared(), c.getLengthSquared(), 1e-17);
1:     }
1: }
============================================================================