1:8649ac2: /*
1:8649ac2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8649ac2:  * contributor license agreements.  See the NOTICE file distributed with
1:8649ac2:  * this work for additional information regarding copyright ownership.
1:8649ac2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8649ac2:  * (the "License"); you may not use this file except in compliance with
1:8649ac2:  * the License.  You may obtain a copy of the License at
1:8649ac2:  *
1:8649ac2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8649ac2:  *
1:8649ac2:  * Unless required by applicable law or agreed to in writing, software
1:8649ac2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8649ac2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8649ac2:  * See the License for the specific language governing permissions and
1:8649ac2:  * limitations under the License.
1:8649ac2:  */
1:8649ac2: 
1:8649ac2: package org.apache.mahout.math.neighborhood;
1:8649ac2: 
1:8649ac2: import java.util.Iterator;
1:8649ac2: import java.util.List;
1:8649ac2: import java.util.PriorityQueue;
1:8649ac2: import java.util.concurrent.Callable;
1:8649ac2: import java.util.concurrent.ExecutorService;
1:8649ac2: import java.util.concurrent.Executors;
1:8649ac2: 
1:8649ac2: import com.google.common.base.Preconditions;
1:8649ac2: import com.google.common.collect.Lists;
1:8649ac2: import com.google.common.collect.Ordering;
1:8649ac2: import org.apache.mahout.common.distance.DistanceMeasure;
1:8649ac2: import org.apache.mahout.math.Vector;
1:8649ac2: import org.apache.mahout.math.WeightedVector;
1:8649ac2: import org.apache.mahout.math.random.WeightedThing;
1:8649ac2: 
1:8649ac2: /**
1:8649ac2:  * Search for nearest neighbors using a complete search (i.e. looping through
1:8649ac2:  * the references and comparing each vector to the query).
1:8649ac2:  */
1:8649ac2: public class BruteSearch extends UpdatableSearcher {
1:8649ac2:   /**
1:8649ac2:    * The list of reference vectors.
1:8649ac2:    */
1:335a993:   private final List<Vector> referenceVectors;
1:8649ac2: 
1:8649ac2:   public BruteSearch(DistanceMeasure distanceMeasure) {
1:8649ac2:     super(distanceMeasure);
1:8649ac2:     referenceVectors = Lists.newArrayList();
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Override
1:8649ac2:   public void add(Vector vector) {
1:8649ac2:     referenceVectors.add(vector);
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Override
1:8649ac2:   public int size() {
1:8649ac2:     return referenceVectors.size();
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Scans the list of reference vectors one at a time for @limit neighbors of
1:8649ac2:    * the query vector.
1:8649ac2:    * The weights of the WeightedVectors are not taken into account.
1:8649ac2:    *
1:8649ac2:    * @param query     The query vector.
1:8649ac2:    * @param limit The number of results to returned; must be at least 1.
1:8649ac2:    * @return A list of the closest @limit neighbors for the given query.
1:8649ac2:    */
1:335a993:   @Override
1:8649ac2:   public List<WeightedThing<Vector>> search(Vector query, int limit) {
1:cd167f9:     Preconditions.checkArgument(limit > 0, "limit must be greater then 0!");
1:8649ac2:     limit = Math.min(limit, referenceVectors.size());
1:8649ac2:     // A priority queue of the best @limit elements, ordered from worst to best so that the worst
1:8649ac2:     // element is always on top and can easily be removed.
1:58cc1ae:     PriorityQueue<WeightedThing<Integer>> bestNeighbors =
1:87c15be:         new PriorityQueue<>(limit, Ordering.natural().reverse());
1:8649ac2:     // The resulting list of weighted WeightedVectors (the weight is the distance from the query).
1:8649ac2:     List<WeightedThing<Vector>> results =
1:8649ac2:         Lists.newArrayListWithCapacity(limit);
1:8649ac2:     int rowNumber = 0;
1:8649ac2:     for (Vector row : referenceVectors) {
1:8649ac2:       double distance = distanceMeasure.distance(query, row);
1:8649ac2:       // Only add a new neighbor if the result is better than the worst element
1:8649ac2:       // in the queue or the queue isn't full.
1:8649ac2:       if (bestNeighbors.size() < limit || bestNeighbors.peek().getWeight() > distance) {
1:87c15be:         bestNeighbors.add(new WeightedThing<>(rowNumber, distance));
1:8649ac2:         if (bestNeighbors.size() > limit) {
1:8649ac2:           bestNeighbors.poll();
1:8649ac2:         } else {
1:8649ac2:           // Increase the size of the results list by 1 so we can add elements in the reverse
1:8649ac2:           // order from the queue.
1:8649ac2:           results.add(null);
1:8649ac2:         }
1:8649ac2:       }
1:8649ac2:       ++rowNumber;
1:8649ac2:     }
1:8649ac2:     for (int i = limit - 1; i >= 0; --i) {
1:8649ac2:       WeightedThing<Integer> neighbor = bestNeighbors.poll();
1:87c15be:       results.set(i, new WeightedThing<>(
1:8649ac2:           referenceVectors.get(neighbor.getValue()), neighbor.getWeight()));
1:8649ac2:     }
1:8649ac2:     return results;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Returns the closest vector to the query.
1:8649ac2:    * When only one the nearest vector is needed, use this method, NOT search(query, limit) because
1:8649ac2:    * it's faster (less overhead).
1:8649ac2:    *
1:8649ac2:    * @param query the vector to search for
1:8649ac2:    * @param differentThanQuery if true, returns the closest vector different than the query (this
1:8649ac2:    *                           only matters if the query is among the searched vectors), otherwise,
1:8649ac2:    *                           returns the closest vector to the query (even the same vector).
1:8649ac2:    * @return the weighted vector closest to the query
1:8649ac2:    */
1:8649ac2:   @Override
1:8649ac2:   public WeightedThing<Vector> searchFirst(Vector query, boolean differentThanQuery) {
1:8649ac2:     double bestDistance = Double.POSITIVE_INFINITY;
1:8649ac2:     Vector bestVector = null;
1:8649ac2:     for (Vector row : referenceVectors) {
1:8649ac2:       double distance = distanceMeasure.distance(query, row);
1:8649ac2:       if (distance < bestDistance && (!differentThanQuery || !row.equals(query))) {
1:8649ac2:         bestDistance = distance;
1:8649ac2:         bestVector = row;
1:8649ac2:       }
1:8649ac2:     }
1:87c15be:     return new WeightedThing<>(bestVector, bestDistance);
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Searches with a list full of queries in a threaded fashion.
1:8649ac2:    *
1:8649ac2:    * @param queries The queries to search for.
1:8649ac2:    * @param limit The number of results to return.
1:8649ac2:    * @param numThreads   Number of threads to use in searching.
1:8649ac2:    * @return A list of result lists.
1:8649ac2:    */
1:8649ac2:   public List<List<WeightedThing<Vector>>> search(Iterable<WeightedVector> queries,
1:8649ac2:                                                   final int limit, int numThreads) throws InterruptedException {
1:8649ac2:     ExecutorService executor = Executors.newFixedThreadPool(numThreads);
1:8649ac2:     List<Callable<Object>> tasks = Lists.newArrayList();
1:8649ac2: 
1:8649ac2:     final List<List<WeightedThing<Vector>>> results = Lists.newArrayList();
1:8649ac2:     int i = 0;
1:8649ac2:     for (final Vector query : queries) {
1:8649ac2:       results.add(null);
1:8649ac2:       final int index = i++;
1:8649ac2:       tasks.add(new Callable<Object>() {
1:8649ac2:         @Override
1:8649ac2:         public Object call() throws Exception {
1:8649ac2:           results.set(index, BruteSearch.this.search(query, limit));
1:8649ac2:           return null;
1:8649ac2:         }
1:8649ac2:       });
1:8649ac2:     }
1:8649ac2: 
1:8649ac2:     executor.invokeAll(tasks);
1:8649ac2:     executor.shutdown();
1:8649ac2: 
1:8649ac2:     return results;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Override
1:8649ac2:   public Iterator<Vector> iterator() {
1:8649ac2:     return referenceVectors.iterator();
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Override
1:8649ac2:   public boolean remove(Vector query, double epsilon) {
1:8649ac2:     int rowNumber = 0;
1:8649ac2:     for (Vector row : referenceVectors) {
1:8649ac2:       double distance = distanceMeasure.distance(query, row);
1:8649ac2:       if (distance < epsilon) {
1:8649ac2:         referenceVectors.remove(rowNumber);
1:8649ac2:         return true;
1:8649ac2:       }
1:8649ac2:       rowNumber++;
1:8649ac2:     }
1:8649ac2:     return false;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Override
1:8649ac2:   public void clear() {
1:8649ac2:     referenceVectors.clear();
1:8649ac2:   }
1:8649ac2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:         new PriorityQueue<>(limit, Ordering.natural().reverse());
/////////////////////////////////////////////////////////////////////////
1:         bestNeighbors.add(new WeightedThing<>(rowNumber, distance));
/////////////////////////////////////////////////////////////////////////
1:       results.set(i, new WeightedThing<>(
/////////////////////////////////////////////////////////////////////////
1:     return new WeightedThing<>(bestVector, bestDistance);
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(limit > 0, "limit must be greater then 0!");
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:335a993
/////////////////////////////////////////////////////////////////////////
1:   private final List<Vector> referenceVectors;
/////////////////////////////////////////////////////////////////////////
1:   @Override
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1:     PriorityQueue<WeightedThing<Integer>> bestNeighbors =
0:         new PriorityQueue<WeightedThing<Integer>>(limit, Ordering.natural().reverse());
author:dfilimon
-------------------------------------------------------------------------------
commit:8649ac2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.neighborhood;
1: 
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.PriorityQueue;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: 
1: import com.google.common.base.Preconditions;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Ordering;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.WeightedVector;
1: import org.apache.mahout.math.random.WeightedThing;
1: 
1: /**
1:  * Search for nearest neighbors using a complete search (i.e. looping through
1:  * the references and comparing each vector to the query).
1:  */
1: public class BruteSearch extends UpdatableSearcher {
1:   /**
1:    * The list of reference vectors.
1:    */
0:   private List<Vector> referenceVectors;
1: 
1:   public BruteSearch(DistanceMeasure distanceMeasure) {
1:     super(distanceMeasure);
1:     referenceVectors = Lists.newArrayList();
1:   }
1: 
1:   @Override
1:   public void add(Vector vector) {
1:     referenceVectors.add(vector);
1:   }
1: 
1:   @Override
1:   public int size() {
1:     return referenceVectors.size();
1:   }
1: 
1:   /**
1:    * Scans the list of reference vectors one at a time for @limit neighbors of
1:    * the query vector.
1:    * The weights of the WeightedVectors are not taken into account.
1:    *
1:    * @param query     The query vector.
1:    * @param limit The number of results to returned; must be at least 1.
1:    * @return A list of the closest @limit neighbors for the given query.
1:    */
1:   public List<WeightedThing<Vector>> search(Vector query, int limit) {
0:     Preconditions.checkArgument(limit > 0);
1:     limit = Math.min(limit, referenceVectors.size());
1:     // A priority queue of the best @limit elements, ordered from worst to best so that the worst
1:     // element is always on top and can easily be removed.
0:     PriorityQueue<WeightedThing<Integer>> bestNeighbors = new PriorityQueue<WeightedThing<Integer>>(limit, Ordering.natural().reverse());
1:     // The resulting list of weighted WeightedVectors (the weight is the distance from the query).
1:     List<WeightedThing<Vector>> results =
1:         Lists.newArrayListWithCapacity(limit);
1:     int rowNumber = 0;
1:     for (Vector row : referenceVectors) {
1:       double distance = distanceMeasure.distance(query, row);
1:       // Only add a new neighbor if the result is better than the worst element
1:       // in the queue or the queue isn't full.
1:       if (bestNeighbors.size() < limit || bestNeighbors.peek().getWeight() > distance) {
0:         bestNeighbors.add(new WeightedThing<Integer>(rowNumber, distance));
1:         if (bestNeighbors.size() > limit) {
1:           bestNeighbors.poll();
1:         } else {
1:           // Increase the size of the results list by 1 so we can add elements in the reverse
1:           // order from the queue.
1:           results.add(null);
1:         }
1:       }
1:       ++rowNumber;
1:     }
1:     for (int i = limit - 1; i >= 0; --i) {
1:       WeightedThing<Integer> neighbor = bestNeighbors.poll();
0:       results.set(i, new WeightedThing<Vector>(
1:           referenceVectors.get(neighbor.getValue()), neighbor.getWeight()));
1:     }
1:     return results;
1:   }
1: 
1:   /**
1:    * Returns the closest vector to the query.
1:    * When only one the nearest vector is needed, use this method, NOT search(query, limit) because
1:    * it's faster (less overhead).
1:    *
1:    * @param query the vector to search for
1:    * @param differentThanQuery if true, returns the closest vector different than the query (this
1:    *                           only matters if the query is among the searched vectors), otherwise,
1:    *                           returns the closest vector to the query (even the same vector).
1:    * @return the weighted vector closest to the query
1:    */
1:   @Override
1:   public WeightedThing<Vector> searchFirst(Vector query, boolean differentThanQuery) {
1:     double bestDistance = Double.POSITIVE_INFINITY;
1:     Vector bestVector = null;
1:     for (Vector row : referenceVectors) {
1:       double distance = distanceMeasure.distance(query, row);
1:       if (distance < bestDistance && (!differentThanQuery || !row.equals(query))) {
1:         bestDistance = distance;
1:         bestVector = row;
1:       }
1:     }
0:     return new WeightedThing<Vector>(bestVector, bestDistance);
1:   }
1: 
1:   /**
1:    * Searches with a list full of queries in a threaded fashion.
1:    *
1:    * @param queries The queries to search for.
1:    * @param limit The number of results to return.
1:    * @param numThreads   Number of threads to use in searching.
1:    * @return A list of result lists.
1:    */
1:   public List<List<WeightedThing<Vector>>> search(Iterable<WeightedVector> queries,
1:                                                   final int limit, int numThreads) throws InterruptedException {
1:     ExecutorService executor = Executors.newFixedThreadPool(numThreads);
1:     List<Callable<Object>> tasks = Lists.newArrayList();
1: 
1:     final List<List<WeightedThing<Vector>>> results = Lists.newArrayList();
1:     int i = 0;
1:     for (final Vector query : queries) {
1:       results.add(null);
1:       final int index = i++;
1:       tasks.add(new Callable<Object>() {
1:         @Override
1:         public Object call() throws Exception {
1:           results.set(index, BruteSearch.this.search(query, limit));
1:           return null;
1:         }
1:       });
1:     }
1: 
1:     executor.invokeAll(tasks);
1:     executor.shutdown();
1: 
1:     return results;
1:   }
1: 
1:   @Override
1:   public Iterator<Vector> iterator() {
1:     return referenceVectors.iterator();
1:   }
1: 
1:   @Override
1:   public boolean remove(Vector query, double epsilon) {
1:     int rowNumber = 0;
1:     for (Vector row : referenceVectors) {
1:       double distance = distanceMeasure.distance(query, row);
1:       if (distance < epsilon) {
1:         referenceVectors.remove(rowNumber);
1:         return true;
1:       }
1:       rowNumber++;
1:     }
1:     return false;
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     referenceVectors.clear();
1:   }
1: }
============================================================================