1:efb7b63: /**
1:efb7b63:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:efb7b63:  * contributor license agreements.  See the NOTICE file distributed with
1:efb7b63:  * this work for additional information regarding copyright ownership.
1:efb7b63:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:efb7b63:  * (the "License"); you may not use this file except in compliance with
1:efb7b63:  * the License.  You may obtain a copy of the License at
3:efb7b63:  *
1:efb7b63:  *     http://www.apache.org/licenses/LICENSE-2.0
1:efb7b63:  *
1:efb7b63:  * Unless required by applicable law or agreed to in writing, software
1:efb7b63:  * distributed under the License is distributed on an "AS IS" BASIS,
1:efb7b63:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:efb7b63:  * See the License for the specific language governing permissions and
1:efb7b63:  * limitations under the License.
1:efb7b63:  */
2:efb7b63: 
1:9f6eb59: package org.apache.mahout.cf.taste.impl.recommender;
1:efb7b63: 
1:210b265: import com.google.common.collect.Lists;
1:efb7b63: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:efb7b63: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator;
1:efb7b63: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:efb7b63: import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity;
1:efb7b63: import org.apache.mahout.cf.taste.impl.similarity.GenericUserSimilarity;
1:efb7b63: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:efb7b63: import org.apache.mahout.common.RandomUtils;
1:efb7b63: import org.junit.Test;
1:efb7b63: 
1:efb7b63: import java.util.List;
1:efb7b63: import java.util.Random;
1:efb7b63: 
1:efb7b63: /**
1:9f6eb59:  * Tests for {@link TopItems}.
1:9f6eb59:  */
1:9f6eb59: public final class TopItemsTest extends TasteTestCase {
1:efb7b63: 
1:efb7b63:   @Test
1:efb7b63:   public void testTopItems() throws Exception {
1:efb7b63:     long[] ids = new long[100];
1:efb7b63:     for (int i = 0; i < 100; i++) {
1:efb7b63:       ids[i] = i;
1:efb7b63:     }
1:efb7b63:     LongPrimitiveIterator possibleItemIds = new LongPrimitiveArrayIterator(ids);
1:efb7b63:     TopItems.Estimator<Long> estimator = new TopItems.Estimator<Long>() {
1:efb7b63:       @Override
1:9f6eb59:       public double estimate(Long thing) {
1:efb7b63:         return thing;
1:efb7b63:       }
1:efb7b63:     };
1:efb7b63:     List<RecommendedItem> topItems = TopItems.getTopItems(10, possibleItemIds, null, estimator);
1:efb7b63:     int gold = 99;
1:efb7b63:     for (RecommendedItem topItem : topItems) {
1:efb7b63:       assertEquals(gold, topItem.getItemID());
1:efb7b63:       assertEquals(gold--, topItem.getValue(), 0.01);
1:efb7b63:     }
1:efb7b63:   }
1:efb7b63: 
1:efb7b63:   @Test
1:efb7b63:   public void testTopItemsRandom() throws Exception {
1:efb7b63:     long[] ids = new long[100];
1:efb7b63:     for (int i = 0; i < 100; i++) {
1:efb7b63:       ids[i] = i;
1:efb7b63:     }
1:efb7b63:     LongPrimitiveIterator possibleItemIds = new LongPrimitiveArrayIterator(ids);
1:efb7b63:     final Random random = RandomUtils.getRandom();
1:efb7b63:     TopItems.Estimator<Long> estimator = new TopItems.Estimator<Long>() {
1:efb7b63:       @Override
1:9f6eb59:       public double estimate(Long thing) {
1:efb7b63:         return random.nextDouble();
1:efb7b63:       }
1:efb7b63:     };
1:efb7b63:     List<RecommendedItem> topItems = TopItems.getTopItems(10, possibleItemIds, null, estimator);
1:efb7b63:     assertEquals(10, topItems.size());
1:9f6eb59:     double last = 2.0;
1:efb7b63:     for (RecommendedItem topItem : topItems) {
1:efb7b63:       assertTrue(topItem.getValue() <= last);
1:efb7b63:       last = topItem.getItemID();
1:efb7b63:     }
1:efb7b63:   }
1:efb7b63: 
1:efb7b63:   @Test
1:efb7b63:   public void testTopUsers() throws Exception {
1:efb7b63:     long[] ids = new long[100];
1:efb7b63:     for (int i = 0; i < 100; i++) {
1:efb7b63:       ids[i] = i;
1:efb7b63:     }
1:efb7b63:     LongPrimitiveIterator possibleItemIds = new LongPrimitiveArrayIterator(ids);
1:efb7b63:     TopItems.Estimator<Long> estimator = new TopItems.Estimator<Long>() {
1:efb7b63:       @Override
1:9f6eb59:       public double estimate(Long thing) {
1:efb7b63:         return thing;
1:efb7b63:       }
1:efb7b63:     };
1:efb7b63:     long[] topItems = TopItems.getTopUsers(10, possibleItemIds, null, estimator);
1:efb7b63:     int gold = 99;
1:9f6eb59:     for (long topItem : topItems) {
1:9f6eb59:       assertEquals(gold--, topItem);
1:efb7b63:     }
1:efb7b63:   }
1:efb7b63: 
1:efb7b63:   @Test
1:efb7b63:   public void testTopItemItem() throws Exception {
1:210b265:     List<GenericItemSimilarity.ItemItemSimilarity> sims = Lists.newArrayList();
1:efb7b63:     for (int i = 0; i < 99; i++) {
1:efb7b63:       sims.add(new GenericItemSimilarity.ItemItemSimilarity(i, i + 1, i / 99.0));
1:efb7b63:     }
1:efb7b63: 
1:efb7b63:     List<GenericItemSimilarity.ItemItemSimilarity> res = TopItems.getTopItemItemSimilarities(10, sims.iterator());
1:efb7b63:     int gold = 99;
1:9f6eb59:     for (GenericItemSimilarity.ItemItemSimilarity re : res) {
1:44459bd:       assertEquals(gold--, re.getItemID2()); //the second id should be equal to 99 to start
1:efb7b63:     }
1:efb7b63:   }
1:efb7b63: 
1:efb7b63:   @Test
1:efb7b63:   public void testTopItemItemAlt() throws Exception {
1:210b265:     List<GenericItemSimilarity.ItemItemSimilarity> sims = Lists.newArrayList();
1:efb7b63:     for (int i = 0; i < 99; i++) {
1:efb7b63:       sims.add(new GenericItemSimilarity.ItemItemSimilarity(i, i + 1, 1 - (i / 99.0)));
1:efb7b63:     }
1:efb7b63: 
1:efb7b63:     List<GenericItemSimilarity.ItemItemSimilarity> res = TopItems.getTopItemItemSimilarities(10, sims.iterator());
1:efb7b63:     int gold = 0;
1:9f6eb59:     for (GenericItemSimilarity.ItemItemSimilarity re : res) {
1:44459bd:       assertEquals(gold++, re.getItemID1()); //the second id should be equal to 99 to start
1:efb7b63:     }
1:efb7b63:   }
1:efb7b63: 
1:efb7b63:   @Test
1:efb7b63:   public void testTopUserUser() throws Exception {
1:210b265:     List<GenericUserSimilarity.UserUserSimilarity> sims = Lists.newArrayList();
1:efb7b63:     for (int i = 0; i < 99; i++) {
1:efb7b63:       sims.add(new GenericUserSimilarity.UserUserSimilarity(i, i + 1, i / 99.0));
1:efb7b63:     }
1:efb7b63: 
1:efb7b63:     List<GenericUserSimilarity.UserUserSimilarity> res = TopItems.getTopUserUserSimilarities(10, sims.iterator());
1:efb7b63:     int gold = 99;
1:9f6eb59:     for (GenericUserSimilarity.UserUserSimilarity re : res) {
1:44459bd:       assertEquals(gold--, re.getUserID2()); //the second id should be equal to 99 to start
1:efb7b63:     }
1:efb7b63:   }
1:9f6eb59: 
1:efb7b63:   @Test
1:efb7b63:   public void testTopUserUserAlt() throws Exception {
1:210b265:     List<GenericUserSimilarity.UserUserSimilarity> sims = Lists.newArrayList();
1:efb7b63:     for (int i = 0; i < 99; i++) {
1:efb7b63:       sims.add(new GenericUserSimilarity.UserUserSimilarity(i, i + 1, 1 - (i / 99.0)));
1:efb7b63:     }
1:efb7b63: 
1:efb7b63:     List<GenericUserSimilarity.UserUserSimilarity> res = TopItems.getTopUserUserSimilarities(10, sims.iterator());
1:efb7b63:     int gold = 0;
1:9f6eb59:     for (GenericUserSimilarity.UserUserSimilarity re : res) {
1:44459bd:       assertEquals(gold++, re.getUserID1()); //the first id should be equal to 0 to start
1:efb7b63:     }
1:efb7b63:   }
1:efb7b63: 
1:efb7b63: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:     List<GenericItemSimilarity.ItemItemSimilarity> sims = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:     List<GenericItemSimilarity.ItemItemSimilarity> sims = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:     List<GenericUserSimilarity.UserUserSimilarity> sims = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:     List<GenericUserSimilarity.UserUserSimilarity> sims = Lists.newArrayList();
author:tcp
-------------------------------------------------------------------------------
commit:44459bd
/////////////////////////////////////////////////////////////////////////
1:       assertEquals(gold--, re.getItemID2()); //the second id should be equal to 99 to start
/////////////////////////////////////////////////////////////////////////
1:       assertEquals(gold++, re.getItemID1()); //the second id should be equal to 99 to start
/////////////////////////////////////////////////////////////////////////
1:       assertEquals(gold--, re.getUserID2()); //the second id should be equal to 99 to start
/////////////////////////////////////////////////////////////////////////
1:       assertEquals(gold++, re.getUserID1()); //the first id should be equal to 0 to start
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:9f6eb59
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.cf.taste.impl.recommender;
/////////////////////////////////////////////////////////////////////////
1:  * Tests for {@link TopItems}.
1:  */
1: public final class TopItemsTest extends TasteTestCase {
/////////////////////////////////////////////////////////////////////////
1:       public double estimate(Long thing) {
/////////////////////////////////////////////////////////////////////////
1:       public double estimate(Long thing) {
1:     double last = 2.0;
/////////////////////////////////////////////////////////////////////////
1:       public double estimate(Long thing) {
1:     for (long topItem : topItems) {
1:       assertEquals(gold--, topItem);
/////////////////////////////////////////////////////////////////////////
1:     for (GenericItemSimilarity.ItemItemSimilarity re : res) {
0:       assertEquals(gold--, re.getItemID2());//the second id should be equal to 99 to start
/////////////////////////////////////////////////////////////////////////
1:     for (GenericItemSimilarity.ItemItemSimilarity re : res) {
0:       assertEquals(gold++, re.getItemID1());//the second id should be equal to 99 to start
/////////////////////////////////////////////////////////////////////////
1:     for (GenericUserSimilarity.UserUserSimilarity re : res) {
0:       assertEquals(gold--, re.getUserID2());//the second id should be equal to 99 to start
/////////////////////////////////////////////////////////////////////////
1:     for (GenericUserSimilarity.UserUserSimilarity re : res) {
0:       assertEquals(gold++, re.getUserID1());//the first id should be equal to 0 to start
1: 
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:efb7b63
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.cf.taste.impl.recommender;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
0: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity;
1: import org.apache.mahout.cf.taste.impl.similarity.GenericUserSimilarity;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1: import org.apache.mahout.common.RandomUtils;
1: import org.junit.Test;
1: 
0: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Random;
1: 
1: /**
1:  *
1:  *
0:  **/
0: public class TopItemsTest extends TasteTestCase {
1: 
1:   @Test
1:   public void testTopItems() throws Exception {
1:     long[] ids = new long[100];
1:     for (int i = 0; i < 100; i++) {
1:       ids[i] = i;
1:     }
1:     LongPrimitiveIterator possibleItemIds = new LongPrimitiveArrayIterator(ids);
1:     TopItems.Estimator<Long> estimator = new TopItems.Estimator<Long>() {
1:       @Override
0:       public double estimate(Long thing) throws TasteException {
1:         return thing;
1:       }
1:     };
1:     List<RecommendedItem> topItems = TopItems.getTopItems(10, possibleItemIds, null, estimator);
1:     int gold = 99;
1:     for (RecommendedItem topItem : topItems) {
1:       assertEquals(gold, topItem.getItemID());
1:       assertEquals(gold--, topItem.getValue(), 0.01);
1:     }
1:   }
1: 
1:   @Test
1:   public void testTopItemsRandom() throws Exception {
1:     long[] ids = new long[100];
1:     for (int i = 0; i < 100; i++) {
1:       ids[i] = i;
1:     }
1:     LongPrimitiveIterator possibleItemIds = new LongPrimitiveArrayIterator(ids);
1:     final Random random = RandomUtils.getRandom();
1:     TopItems.Estimator<Long> estimator = new TopItems.Estimator<Long>() {
1:       @Override
0:       public double estimate(Long thing) throws TasteException {
1:         return random.nextDouble();
1:       }
1:     };
1:     List<RecommendedItem> topItems = TopItems.getTopItems(10, possibleItemIds, null, estimator);
0:     double last = 2;
1:     assertEquals(10, topItems.size());
1:     for (RecommendedItem topItem : topItems) {
1:       assertTrue(topItem.getValue() <= last);
1:       last = topItem.getItemID();
1:     }
1:   }
1: 
1:   @Test
1:   public void testTopUsers() throws Exception {
1:     long[] ids = new long[100];
1:     for (int i = 0; i < 100; i++) {
1:       ids[i] = i;
1:     }
1:     LongPrimitiveIterator possibleItemIds = new LongPrimitiveArrayIterator(ids);
1:     TopItems.Estimator<Long> estimator = new TopItems.Estimator<Long>() {
1:       @Override
0:       public double estimate(Long thing) throws TasteException {
1:         return thing;
1:       }
1:     };
1:     long[] topItems = TopItems.getTopUsers(10, possibleItemIds, null, estimator);
1:     int gold = 99;
0:     for (int i = 0; i < topItems.length; i++) {
0:       assertEquals(gold--, topItems[i]);
1:     }
1:   }
1: 
1:   @Test
1:   public void testTopItemItem() throws Exception {
0:     List<GenericItemSimilarity.ItemItemSimilarity> sims = new ArrayList<GenericItemSimilarity.ItemItemSimilarity>();
1:     for (int i = 0; i < 99; i++) {
1:       sims.add(new GenericItemSimilarity.ItemItemSimilarity(i, i + 1, i / 99.0));
1:     }
1: 
1:     List<GenericItemSimilarity.ItemItemSimilarity> res = TopItems.getTopItemItemSimilarities(10, sims.iterator());
1:     int gold = 99;
0:     for (int i = 0; i < res.size(); i++) {
0:       assertEquals(gold--, res.get(i).getItemID2());//the second id should be equal to 99 to start
1:     }
1:   }
1: 
1:   @Test
1:   public void testTopItemItemAlt() throws Exception {
0:     List<GenericItemSimilarity.ItemItemSimilarity> sims = new ArrayList<GenericItemSimilarity.ItemItemSimilarity>();
1:     for (int i = 0; i < 99; i++) {
1:       sims.add(new GenericItemSimilarity.ItemItemSimilarity(i, i + 1, 1 - (i / 99.0)));
1:     }
1: 
1:     List<GenericItemSimilarity.ItemItemSimilarity> res = TopItems.getTopItemItemSimilarities(10, sims.iterator());
1:     int gold = 0;
0:     for (int i = 0; i < res.size(); i++) {
0:       assertEquals(gold++, res.get(i).getItemID1());//the second id should be equal to 99 to start
1:     }
1:   }
1: 
1: 
1:   @Test
1:   public void testTopUserUser() throws Exception {
0:     List<GenericUserSimilarity.UserUserSimilarity> sims = new ArrayList<GenericUserSimilarity.UserUserSimilarity>();
1:     for (int i = 0; i < 99; i++) {
1:       sims.add(new GenericUserSimilarity.UserUserSimilarity(i, i + 1, i / 99.0));
1:     }
1: 
1:     List<GenericUserSimilarity.UserUserSimilarity> res = TopItems.getTopUserUserSimilarities(10, sims.iterator());
1:     int gold = 99;
0:     for (int i = 0; i < res.size(); i++) {
0:       assertEquals(gold--, res.get(i).getUserID2());//the second id should be equal to 99 to start
1:     }
1:   }
1: 
1:   @Test
1:   public void testTopUserUserAlt() throws Exception {
0:     List<GenericUserSimilarity.UserUserSimilarity> sims = new ArrayList<GenericUserSimilarity.UserUserSimilarity>();
1:     for (int i = 0; i < 99; i++) {
1:       sims.add(new GenericUserSimilarity.UserUserSimilarity(i, i + 1, 1 - (i / 99.0)));
1:     }
1: 
1:     List<GenericUserSimilarity.UserUserSimilarity> res = TopItems.getTopUserUserSimilarities(10, sims.iterator());
1:     int gold = 0;
0:     for (int i = 0; i < res.size(); i++) {
0:       assertEquals(gold++, res.get(i).getUserID1());//the first id should be equal to 0 to start
1:     }
1:   }
1: }
============================================================================