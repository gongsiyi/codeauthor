1:c898d27: /*
1:c898d27:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c898d27:  * contributor license agreements.  See the NOTICE file distributed with
1:c898d27:  * this work for additional information regarding copyright ownership.
1:c898d27:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c898d27:  * (the "License"); you may not use this file except in compliance with
1:c898d27:  * the License.  You may obtain a copy of the License at
1:c898d27:  *
1:c898d27:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c898d27:  *
1:c898d27:  * Unless required by applicable law or agreed to in writing, software
1:c898d27:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c898d27:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c898d27:  * See the License for the specific language governing permissions and
1:c898d27:  * limitations under the License.
1:c898d27:  */
1:c898d27: 
1:c898d27: package org.apache.mahout.math.ssvd;
1:c898d27: 
1:c898d27: import org.apache.mahout.math.CholeskyDecomposition;
1:c898d27: import org.apache.mahout.math.DenseVector;
1:c898d27: import org.apache.mahout.math.Matrix;
1:c898d27: import org.apache.mahout.math.RandomTrinaryMatrix;
1:c898d27: import org.apache.mahout.math.SingularValueDecomposition;
1:c898d27: import org.apache.mahout.math.Vector;
1:c898d27: 
1:c898d27: /**
1:c898d27:  * Implements an in-memory version of stochastic projection based SVD.  See SequentialOutOfCoreSvd
1:c898d27:  * for algorithm notes.
1:c898d27:  */
1:c898d27: public class SequentialBigSvd {
1:564c3e1:   private final Matrix y;
1:564c3e1:   private final CholeskyDecomposition cd1;
1:564c3e1:   private final CholeskyDecomposition cd2;
1:564c3e1:   private final SingularValueDecomposition svd;
1:564c3e1:   private final Matrix b;
1:c898d27: 
1:c898d27: 
1:c898d27:   public SequentialBigSvd(Matrix A, int p) {
1:c898d27:     // Y = A * \Omega
1:f5cce9b:     y = A.times(new RandomTrinaryMatrix(A.columnSize(), p));
1:c898d27: 
1:c898d27:     // R'R = Y' Y
1:c898d27:     cd1 = new CholeskyDecomposition(y.transpose().times(y));
1:c898d27: 
1:c898d27:     // B = Q" A = (Y R^{-1} )' A
1:c898d27:     b = cd1.solveRight(y).transpose().times(A);
1:c898d27: 
1:c898d27:     // L L' = B B'
1:c898d27:     cd2 = new CholeskyDecomposition(b.times(b.transpose()));
1:c898d27: 
1:c898d27:     // U_0 D V_0' = L
1:c898d27:     svd = new SingularValueDecomposition(cd2.getL());
1:c898d27:   }
1:c898d27: 
1:c898d27:   public Vector getSingularValues() {
1:c898d27:     return new DenseVector(svd.getSingularValues());
1:c898d27:   }
1:c898d27: 
1:c898d27:   public Matrix getU() {
1:c898d27:     // U = (Y inv(R)) U_0
1:c898d27:     return cd1.solveRight(y).times(svd.getU());
1:c898d27:   }
1:c898d27: 
1:c898d27:   public Matrix getV() {
1:c898d27:     // V = (B' inv(L')) V_0
1:c898d27:     return cd2.solveRight(b.transpose()).times(svd.getV());
1:c898d27:   }
1:c898d27: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:   private final Matrix y;
1:   private final CholeskyDecomposition cd1;
1:   private final CholeskyDecomposition cd2;
1:   private final SingularValueDecomposition svd;
1:   private final Matrix b;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:f5cce9b
/////////////////////////////////////////////////////////////////////////
1:     y = A.times(new RandomTrinaryMatrix(A.columnSize(), p));
commit:c898d27
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.ssvd;
1: 
1: import org.apache.mahout.math.CholeskyDecomposition;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.RandomTrinaryMatrix;
1: import org.apache.mahout.math.SingularValueDecomposition;
1: import org.apache.mahout.math.Vector;
1: 
1: /**
1:  * Implements an in-memory version of stochastic projection based SVD.  See SequentialOutOfCoreSvd
1:  * for algorithm notes.
1:  */
1: public class SequentialBigSvd {
0:   private Matrix y;
0:   private CholeskyDecomposition cd1;
0:   private CholeskyDecomposition cd2;
0:   private SingularValueDecomposition svd;
0:   private Matrix b;
1: 
1: 
1:   public SequentialBigSvd(Matrix A, int p) {
1:     // Y = A * \Omega
0:     y = A.times(new RandomTrinaryMatrix(A.rowSize(), p));
1: 
1:     // R'R = Y' Y
1:     cd1 = new CholeskyDecomposition(y.transpose().times(y));
1: 
1:     // B = Q" A = (Y R^{-1} )' A
1:     b = cd1.solveRight(y).transpose().times(A);
1: 
1:     // L L' = B B'
1:     cd2 = new CholeskyDecomposition(b.times(b.transpose()));
1: 
1:     // U_0 D V_0' = L
1:     svd = new SingularValueDecomposition(cd2.getL());
1:   }
1: 
1:   public Vector getSingularValues() {
1:     return new DenseVector(svd.getSingularValues());
1:   }
1: 
1:   public Matrix getU() {
1:     // U = (Y inv(R)) U_0
1:     return cd1.solveRight(y).times(svd.getU());
1:   }
1: 
1:   public Matrix getV() {
1:     // V = (B' inv(L')) V_0
1:     return cd2.solveRight(b.transpose()).times(svd.getV());
1:   }
1: }
============================================================================