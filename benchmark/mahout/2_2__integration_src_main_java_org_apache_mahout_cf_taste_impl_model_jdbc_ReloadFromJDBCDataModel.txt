1:bade960: /**
1:bade960:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bade960:  * contributor license agreements.  See the NOTICE file distributed with
1:bade960:  * this work for additional information regarding copyright ownership.
1:bade960:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bade960:  * (the "License"); you may not use this file except in compliance with
1:bade960:  * the License.  You may obtain a copy of the License at
1:bade960:  *
1:bade960:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bade960:  *
1:bade960:  * Unless required by applicable law or agreed to in writing, software
1:bade960:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bade960:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bade960:  * See the License for the specific language governing permissions and
1:bade960:  * limitations under the License.
1:bade960:  */
1:bade960: 
1:bade960: package org.apache.mahout.cf.taste.impl.model.jdbc;
1:bade960: 
1:bade960: import com.google.common.base.Preconditions;
1:bade960: import org.apache.mahout.cf.taste.common.Refreshable;
1:bade960: import org.apache.mahout.cf.taste.common.TasteException;
1:bade960: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:bade960: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:9bd4f80: import org.apache.mahout.cf.taste.impl.common.RefreshHelper;
1:bade960: import org.apache.mahout.cf.taste.impl.model.GenericBooleanPrefDataModel;
1:bade960: import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
1:bade960: import org.apache.mahout.cf.taste.model.DataModel;
1:bade960: import org.apache.mahout.cf.taste.model.JDBCDataModel;
1:bade960: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:bade960: import org.slf4j.Logger;
1:bade960: import org.slf4j.LoggerFactory;
1:bade960: 
1:bade960: import java.util.Collection;
1:9bd4f80: import java.util.concurrent.Callable;
1:bade960: 
1:bade960: /**
1:bade960:  * A {@link DataModel} which loads, and can re-load, data from a JDBC-backed {@link JDBCDataModel} into memory, as a
1:bade960:  * {@link GenericDataModel} or {@link GenericBooleanPrefDataModel}. It is intended to provide the speed
1:bade960:  * advantage of in-memory representation but be able to update periodically to pull in new data from a database source.
1:bade960:  */
1:bade960: public final class ReloadFromJDBCDataModel implements DataModel {
1:bade960: 
1:bade960:   private static final Logger log = LoggerFactory.getLogger(ReloadFromJDBCDataModel.class);
1:bade960: 
1:bade960:   private DataModel delegateInMemory;
1:bade960:   private final JDBCDataModel delegate;
1:9bd4f80:   private final RefreshHelper refreshHelper;
1:bade960: 
1:bade960:   public ReloadFromJDBCDataModel(JDBCDataModel delegate) throws TasteException {
1:96024a7:     this.delegate = Preconditions.checkNotNull(delegate);
1:9bd4f80:     refreshHelper = new RefreshHelper(new Callable<Void>() {
1:9bd4f80:       @Override
1:9bd4f80:       public Void call() {
1:9bd4f80:         reload();
1:9bd4f80:         return null;  //To change body of implemented methods use File | Settings | File Templates.
1:9bd4f80:       }
1:9bd4f80:     });
1:9bd4f80:     refreshHelper.addDependency(delegate);
1:9bd4f80:     reload();
1:bade960:     if (delegateInMemory == null) {
1:bade960:       throw new TasteException("Failed to load data into memory");
1:bade960:     }
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:9bd4f80:     refreshHelper.refresh(alreadyRefreshed);
1:9bd4f80:   }
1:9bd4f80: 
1:9bd4f80:   private void reload() {
1:bade960:     try {
1:bade960:       // Load new in-memory representation,
1:bade960:       log.info("Loading new JDBC delegate data...");
1:d61a0ee:       DataModel newDelegateInMemory =
1:d61a0ee:           delegate.hasPreferenceValues()
1:d61a0ee:           ? new GenericDataModel(delegate.exportWithPrefs())
1:d61a0ee:           : new GenericBooleanPrefDataModel(delegate.exportWithIDsOnly());
1:bade960:       // and then swap to it.
1:bade960:       log.info("New data loaded.");
1:bade960:       delegateInMemory = newDelegateInMemory;
1:bade960:     } catch (TasteException te) {
1:bade960:       log.warn("Error while reloading JDBC delegate data", te);
1:bade960:       // But continue with whatever is loaded
1:bade960:     }
1:bade960:   }
1:bade960: 
1:bade960:   public JDBCDataModel getDelegate() {
1:bade960:     return delegate;
1:bade960:   }
1:bade960: 
1:bade960:   public DataModel getDelegateInMemory() {
1:bade960:     return delegateInMemory;
1:bade960:   }
1:bade960: 
1:bade960:   // Delegated methods:
1:bade960: 
1:bade960:   @Override
1:bade960:   public LongPrimitiveIterator getUserIDs() throws TasteException {
1:bade960:     return delegateInMemory.getUserIDs();
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public PreferenceArray getPreferencesFromUser(long id) throws TasteException {
1:bade960:     return delegateInMemory.getPreferencesFromUser(id);
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public FastIDSet getItemIDsFromUser(long id) throws TasteException {
1:bade960:     return delegateInMemory.getItemIDsFromUser(id);
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public Float getPreferenceValue(long userID, long itemID) throws TasteException {
1:bade960:     return delegateInMemory.getPreferenceValue(userID, itemID);
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public Long getPreferenceTime(long userID, long itemID) throws TasteException {
1:bade960:     return delegateInMemory.getPreferenceTime(userID, itemID);
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public LongPrimitiveIterator getItemIDs() throws TasteException {
1:bade960:     return delegateInMemory.getItemIDs();
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public PreferenceArray getPreferencesForItem(long itemID) throws TasteException {
1:bade960:     return delegateInMemory.getPreferencesForItem(itemID);
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public int getNumItems() throws TasteException {
1:bade960:     return delegateInMemory.getNumItems();
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public int getNumUsers() throws TasteException {
1:bade960:     return delegateInMemory.getNumUsers();
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:68f00b0:   public int getNumUsersWithPreferenceFor(long itemID) throws TasteException {
1:68f00b0:     return delegateInMemory.getNumUsersWithPreferenceFor(itemID);
1:68f00b0:   }
1:68f00b0: 
1:68f00b0:   @Override
1:68f00b0:   public int getNumUsersWithPreferenceFor(long itemID1, long itemID2) throws TasteException {
1:68f00b0:     return delegateInMemory.getNumUsersWithPreferenceFor(itemID1, itemID2);
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:bade960:     delegateInMemory.setPreference(userID, itemID, value);
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public void removePreference(long userID, long itemID) throws TasteException {
1:bade960:     delegateInMemory.removePreference(userID, itemID);
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public boolean hasPreferenceValues() {
1:bade960:     return delegateInMemory.hasPreferenceValues();
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public float getMaxPreference() {
1:bade960:     return delegateInMemory.getMaxPreference();
1:bade960:   }
1:bade960: 
1:bade960:   @Override
1:bade960:   public float getMinPreference() {
1:bade960:     return delegateInMemory.getMinPreference();
1:bade960:   }
1:bade960: 
1:bade960: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:68f00b0
/////////////////////////////////////////////////////////////////////////
1:   public int getNumUsersWithPreferenceFor(long itemID) throws TasteException {
1:     return delegateInMemory.getNumUsersWithPreferenceFor(itemID);
1:   }
1: 
1:   @Override
1:   public int getNumUsersWithPreferenceFor(long itemID1, long itemID2) throws TasteException {
1:     return delegateInMemory.getNumUsersWithPreferenceFor(itemID1, itemID2);
commit:50fd693
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
1:       DataModel newDelegateInMemory =
1:           delegate.hasPreferenceValues()
1:           ? new GenericDataModel(delegate.exportWithPrefs())
1:           : new GenericBooleanPrefDataModel(delegate.exportWithIDsOnly());
commit:9bd4f80
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.common.RefreshHelper;
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Callable;
/////////////////////////////////////////////////////////////////////////
1:   private final RefreshHelper refreshHelper;
1:     refreshHelper = new RefreshHelper(new Callable<Void>() {
1:       @Override
1:       public Void call() {
1:         reload();
1:         return null;  //To change body of implemented methods use File | Settings | File Templates.
1:       }
1:     });
1:     refreshHelper.addDependency(delegate);
1:     reload();
/////////////////////////////////////////////////////////////////////////
1:     refreshHelper.refresh(alreadyRefreshed);
1:   }
1: 
1:   private void reload() {
commit:bade960
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.model.jdbc;
1: 
1: import com.google.common.base.Preconditions;
1: import org.apache.mahout.cf.taste.common.Refreshable;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.impl.model.GenericBooleanPrefDataModel;
1: import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.JDBCDataModel;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.util.Collection;
1: 
1: /**
1:  * A {@link DataModel} which loads, and can re-load, data from a JDBC-backed {@link JDBCDataModel} into memory, as a
1:  * {@link GenericDataModel} or {@link GenericBooleanPrefDataModel}. It is intended to provide the speed
1:  * advantage of in-memory representation but be able to update periodically to pull in new data from a database source.
1:  */
1: public final class ReloadFromJDBCDataModel implements DataModel {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(ReloadFromJDBCDataModel.class);
1: 
1:   private DataModel delegateInMemory;
1:   private final JDBCDataModel delegate;
1: 
1:   public ReloadFromJDBCDataModel(JDBCDataModel delegate) throws TasteException {
0:     Preconditions.checkNotNull(delegate);
0:     this.delegate = delegate;
0:     refresh(null);
1:     if (delegateInMemory == null) {
1:       throw new TasteException("Failed to load data into memory");
1:     }
1:   }
1: 
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
0:     delegate.refresh(alreadyRefreshed);
1:     try {
1:       // Load new in-memory representation,
1:       log.info("Loading new JDBC delegate data...");
0:       DataModel newDelegateInMemory = delegate.hasPreferenceValues() ?
0:           new GenericDataModel(delegate.exportWithPrefs()) :
0:           new GenericBooleanPrefDataModel(delegate.exportWithIDsOnly());
1:       // and then swap to it.
1:       log.info("New data loaded.");
1:       delegateInMemory = newDelegateInMemory;
1:     } catch (TasteException te) {
1:       log.warn("Error while reloading JDBC delegate data", te);
1:       // But continue with whatever is loaded
1:     }
1:   }
1: 
1:   public JDBCDataModel getDelegate() {
1:     return delegate;
1:   }
1: 
1:   public DataModel getDelegateInMemory() {
1:     return delegateInMemory;
1:   }
1: 
1:   // Delegated methods:
1: 
1:   @Override
1:   public LongPrimitiveIterator getUserIDs() throws TasteException {
1:     return delegateInMemory.getUserIDs();
1:   }
1: 
1:   @Override
1:   public PreferenceArray getPreferencesFromUser(long id) throws TasteException {
1:     return delegateInMemory.getPreferencesFromUser(id);
1:   }
1: 
1:   @Override
1:   public FastIDSet getItemIDsFromUser(long id) throws TasteException {
1:     return delegateInMemory.getItemIDsFromUser(id);
1:   }
1: 
1:   @Override
1:   public Float getPreferenceValue(long userID, long itemID) throws TasteException {
1:     return delegateInMemory.getPreferenceValue(userID, itemID);
1:   }
1: 
1:   @Override
1:   public Long getPreferenceTime(long userID, long itemID) throws TasteException {
1:     return delegateInMemory.getPreferenceTime(userID, itemID);
1:   }
1: 
1:   @Override
1:   public LongPrimitiveIterator getItemIDs() throws TasteException {
1:     return delegateInMemory.getItemIDs();
1:   }
1: 
1:   @Override
1:   public PreferenceArray getPreferencesForItem(long itemID) throws TasteException {
1:     return delegateInMemory.getPreferencesForItem(itemID);
1:   }
1: 
1:   @Override
1:   public int getNumItems() throws TasteException {
1:     return delegateInMemory.getNumItems();
1:   }
1: 
1:   @Override
1:   public int getNumUsers() throws TasteException {
1:     return delegateInMemory.getNumUsers();
1:   }
1: 
1:   @Override
0:   public int getNumUsersWithPreferenceFor(long... itemIDs) throws TasteException {
0:     return delegateInMemory.getNumUsersWithPreferenceFor(itemIDs);
1:   }
1: 
1:   @Override
1:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:     delegateInMemory.setPreference(userID, itemID, value);
1:   }
1: 
1:   @Override
1:   public void removePreference(long userID, long itemID) throws TasteException {
1:     delegateInMemory.removePreference(userID, itemID);
1:   }
1: 
1:   @Override
1:   public boolean hasPreferenceValues() {
1:     return delegateInMemory.hasPreferenceValues();
1:   }
1: 
1:   @Override
1:   public float getMaxPreference() {
1:     return delegateInMemory.getMaxPreference();
1:   }
1: 
1:   @Override
1:   public float getMinPreference() {
1:     return delegateInMemory.getMinPreference();
1:   }
1: 
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:96024a7
/////////////////////////////////////////////////////////////////////////
1:     this.delegate = Preconditions.checkNotNull(delegate);
commit:c181b9f
/////////////////////////////////////////////////////////////////////////
0:     Preconditions.checkNotNull(delegate, "Delegate cannot be null");
============================================================================