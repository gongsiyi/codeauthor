1:a515335: /*
1:a515335:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a515335:  * contributor license agreements.  See the NOTICE file distributed with
1:a515335:  * this work for additional information regarding copyright ownership.
1:a515335:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a515335:  * (the "License"); you may not use this file except in compliance with
1:a515335:  * the License.  You may obtain a copy of the License at
1:a515335:  *
1:a515335:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a515335:  *
1:a515335:  * Unless required by applicable law or agreed to in writing, software
1:a515335:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a515335:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a515335:  * See the License for the specific language governing permissions and
1:a515335:  * limitations under the License.
1:a515335:  */
12:a515335: 
1:a515335: package org.apache.mahout.classifier.sgd;
1:a515335: 
1:a515335: import java.io.BufferedReader;
1:a515335: import java.io.File;
1:a515335: import java.io.IOException;
1:229aeff: import java.io.OutputStreamWriter;
1:a515335: import java.io.PrintWriter;
1:a515335: import java.util.Locale;
1:a515335: 
1:a515335: import org.apache.commons.cli2.CommandLine;
1:a515335: import org.apache.commons.cli2.Group;
1:a515335: import org.apache.commons.cli2.Option;
1:a515335: import org.apache.commons.cli2.builder.ArgumentBuilder;
1:a515335: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1:a515335: import org.apache.commons.cli2.builder.GroupBuilder;
1:a515335: import org.apache.commons.cli2.commandline.Parser;
1:a515335: import org.apache.commons.cli2.util.HelpFormatter;
1:4ef9d31: import org.apache.commons.io.Charsets;
1:a515335: import org.apache.mahout.classifier.ConfusionMatrix;
1:a515335: import org.apache.mahout.classifier.evaluation.Auc;
1:a515335: import org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper;
1:a515335: import org.apache.mahout.ep.State;
1:a515335: import org.apache.mahout.math.Matrix;
1:a515335: import org.apache.mahout.math.SequentialAccessSparseVector;
1:a515335: import org.apache.mahout.math.Vector;
1:a515335: import org.apache.mahout.math.stats.OnlineSummarizer;
1:a515335: 
1:a515335: /*
1:a515335:  * Auc and averageLikelihood are always shown if possible, if the number of target value is more than 2, 
1:a515335:  * then Auc and entropy matirx are not shown regardless the value of showAuc and showEntropy
1:a515335:  * the user passes, because the current implementation does not support them on two value targets.
1:a515335:  * */
1:a515335: public final class ValidateAdaptiveLogistic {
1:a515335: 
1:a515335:   private static String inputFile;
1:a515335:   private static String modelFile;
1:ac6bab2:   private static String defaultCategory;
1:a515335:   private static boolean showAuc;
1:a515335:   private static boolean showScores;
1:a515335:   private static boolean showConfusion;
1:a515335: 
1:a515335:   private ValidateAdaptiveLogistic() {
1:a515335:   }
1:a515335: 
1:a515335:   public static void main(String[] args) throws IOException {
1:229aeff:     mainToOutput(args, new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
1:a515335:   }
1:a515335: 
1:a515335:   static void mainToOutput(String[] args, PrintWriter output) throws IOException {
1:a515335:     if (parseArgs(args)) {
1:a515335:       if (!showAuc && !showConfusion && !showScores) {
1:a515335:         showAuc = true;
1:a515335:         showConfusion = true;
1:a515335:       }
1:a515335: 
1:a515335:       Auc collector = null;
1:a515335:       AdaptiveLogisticModelParameters lmp = AdaptiveLogisticModelParameters
1:a515335:           .loadFromFile(new File(modelFile));
1:a515335:       CsvRecordFactory csv = lmp.getCsvRecordFactory();
1:a515335:       AdaptiveLogisticRegression lr = lmp.createAdaptiveLogisticRegression();      
1:3c22856: 
1:3c22856:       if (lmp.getTargetCategories().size() <= 2) {
1:a515335:         collector = new Auc();
1:a515335:       }
1:3c22856: 
1:a515335:       OnlineSummarizer slh = new OnlineSummarizer();
1:ac6bab2:       ConfusionMatrix cm = new ConfusionMatrix(lmp.getTargetCategories(), defaultCategory);
1:a515335: 
1:a515335:       State<Wrapper, CrossFoldLearner> best = lr.getBest();
1:a515335:       if (best == null) {
1:229aeff:         output.println("AdaptiveLogisticRegression has not be trained probably.");
1:a515335:         return;
1:a515335:       }
1:a515335:       CrossFoldLearner learner = best.getPayload().getLearner();
1:a515335: 
1:a515335:       BufferedReader in = TrainLogistic.open(inputFile);
1:a515335:       String line = in.readLine();
1:a515335:       csv.firstLine(line);
1:a515335:       line = in.readLine();
1:a515335:       if (showScores) {
1:229aeff:         output.println("\"target\", \"model-output\", \"log-likelihood\", \"average-likelihood\"");
1:a515335:       }
1:a515335:       while (line != null) {
1:a515335:         Vector v = new SequentialAccessSparseVector(lmp.getNumFeatures());
1:a515335:         //TODO: How to avoid extra target values not shown in the training process.
1:a515335:         int target = csv.processLine(line, v);
1:a515335:         double likelihood = learner.logLikelihood(target, v);
1:a515335:         double score = learner.classifyFull(v).maxValue();
1:3c22856: 
1:a515335:         slh.add(likelihood);
1:a515335:         cm.addInstance(csv.getTargetString(line), csv.getTargetLabel(target));        
1:3c22856: 
1:a515335:         if (showScores) {
1:bdb1c48:           output.printf(Locale.ENGLISH, "%8d, %.12f, %.13f, %.13f%n", target,
1:a515335:               score, learner.logLikelihood(target, v), slh.getMean());
1:a515335:         }
1:a515335:         if (collector != null) {
1:a515335:           collector.add(target, score);
1:a515335:         }
1:a515335:         line = in.readLine();
1:a515335:       }
1:3c22856: 
1:a515335:       output.printf(Locale.ENGLISH,"\nLog-likelihood:");
1:bdb1c48:       output.printf(Locale.ENGLISH, "Min=%.2f, Max=%.2f, Mean=%.2f, Median=%.2f%n",
1:a515335:           slh.getMin(), slh.getMax(), slh.getMean(), slh.getMedian());
1:3c22856: 
1:a515335:       if (collector != null) {        
1:bdb1c48:         output.printf(Locale.ENGLISH, "%nAUC = %.2f%n", collector.auc());
1:a515335:       }
1:a515335: 
1:a515335:       if (showConfusion) {
1:bdb1c48:         output.printf(Locale.ENGLISH, "%n%s%n%n", cm.toString());
1:3c22856: 
1:e64dd36:         if (collector != null) {
1:a515335:           Matrix m = collector.entropy();
1:a515335:           output.printf(Locale.ENGLISH,
1:bdb1c48:               "Entropy Matrix: [[%.1f, %.1f], [%.1f, %.1f]]%n", m.get(0, 0),
1:a515335:               m.get(1, 0), m.get(0, 1), m.get(1, 1));
1:a515335:         }        
1:a515335:       }
1:3c22856: 
1:a515335:     }
1:a515335:   }
1:a515335: 
1:a515335:   private static boolean parseArgs(String[] args) {
1:a515335:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
1:a515335: 
1:a515335:     Option help = builder.withLongName("help")
1:a515335:         .withDescription("print this list").create();
1:a515335: 
1:a515335:     Option quiet = builder.withLongName("quiet")
1:a515335:         .withDescription("be extra quiet").create();
1:a515335: 
1:a515335:     Option auc = builder.withLongName("auc").withDescription("print AUC")
1:a515335:         .create();
1:a515335:     Option confusion = builder.withLongName("confusion")
1:a515335:         .withDescription("print confusion matrix").create();
1:a515335: 
1:a515335:     Option scores = builder.withLongName("scores")
1:a515335:         .withDescription("print scores").create();
1:3c22856: 
1:a515335:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:a515335:     Option inputFileOption = builder
1:a515335:         .withLongName("input")
1:a515335:         .withRequired(true)
2:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("input").withMaximum(1)
2:a515335:                 .create())
1:a515335:         .withDescription("where to get validate data").create();
1:ac6bab2: 
1:a515335:     Option modelFileOption = builder
1:a515335:         .withLongName("model")
1:a515335:         .withRequired(true)
1:ac6bab2:         .withArgument(
1:a515335:             argumentBuilder.withName("model").withMaximum(1)
1:ac6bab2:                 .create())
1:a515335:         .withDescription("where to get the trained model").create();
1:3c22856: 
1:ac6bab2:     Option defaultCagetoryOption = builder
1:3c22856:       .withLongName("defaultCategory")
1:3c22856:       .withRequired(false)
1:3c22856:       .withArgument(
1:3c22856:           argumentBuilder.withName("defaultCategory").withMaximum(1).withDefault("unknown")
1:3c22856:           .create())
1:3c22856:       .withDescription("the default category value to use").create();
1:a515335: 
1:a515335:     Group normalArgs = new GroupBuilder().withOption(help)
1:a515335:         .withOption(quiet).withOption(auc).withOption(scores)
1:a515335:         .withOption(confusion).withOption(inputFileOption)
1:ac6bab2:         .withOption(modelFileOption).withOption(defaultCagetoryOption).create();
1:a515335: 
1:a515335:     Parser parser = new Parser();
1:a515335:     parser.setHelpOption(help);
1:a515335:     parser.setHelpTrigger("--help");
1:a515335:     parser.setGroup(normalArgs);
1:a515335:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
1:a515335:     CommandLine cmdLine = parser.parseAndHelp(args);
1:a515335: 
1:a515335:     if (cmdLine == null) {
1:a515335:       return false;
1:a515335:     }
1:a515335: 
1:a515335:     inputFile = getStringArgument(cmdLine, inputFileOption);
1:a515335:     modelFile = getStringArgument(cmdLine, modelFileOption);
1:ac6bab2:     defaultCategory = getStringArgument(cmdLine, defaultCagetoryOption);
1:a515335:     showAuc = getBooleanArgument(cmdLine, auc);
1:a515335:     showScores = getBooleanArgument(cmdLine, scores);
1:a515335:     showConfusion = getBooleanArgument(cmdLine, confusion);
1:a515335: 
1:a515335:     return true;
1:a515335:   }
1:a515335: 
1:a515335:   private static boolean getBooleanArgument(CommandLine cmdLine, Option option) {
1:a515335:     return cmdLine.hasOption(option);
1:a515335:   }
1:a515335: 
1:a515335:   private static String getStringArgument(CommandLine cmdLine, Option inputFile) {
1:a515335:     return (String) cmdLine.getValue(inputFile);
1:a515335:   }
1:a515335: 
1:a515335: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1:           output.printf(Locale.ENGLISH, "%8d, %.12f, %.13f, %.13f%n", target,
/////////////////////////////////////////////////////////////////////////
1:       output.printf(Locale.ENGLISH, "Min=%.2f, Max=%.2f, Mean=%.2f, Median=%.2f%n",
1:         output.printf(Locale.ENGLISH, "%nAUC = %.2f%n", collector.auc());
1:         output.printf(Locale.ENGLISH, "%n%s%n%n", cm.toString());
1:               "Entropy Matrix: [[%.1f, %.1f], [%.1f, %.1f]]%n", m.get(0, 0),
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1: 
1:       if (lmp.getTargetCategories().size() <= 2) {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:       .withLongName("defaultCategory")
1:       .withRequired(false)
1:       .withArgument(
1:           argumentBuilder.withName("defaultCategory").withMaximum(1).withDefault("unknown")
1:           .create())
1:       .withDescription("the default category value to use").create();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: import java.io.OutputStreamWriter;
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
1:     mainToOutput(args, new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
/////////////////////////////////////////////////////////////////////////
1:         output.println("AdaptiveLogisticRegression has not be trained probably.");
/////////////////////////////////////////////////////////////////////////
1:         output.println("\"target\", \"model-output\", \"log-likelihood\", \"average-likelihood\"");
commit:ac6bab2
/////////////////////////////////////////////////////////////////////////
1:   private static String defaultCategory;
/////////////////////////////////////////////////////////////////////////
1:       ConfusionMatrix cm = new ConfusionMatrix(lmp.getTargetCategories(), defaultCategory);
/////////////////////////////////////////////////////////////////////////
1:     
1:     Option defaultCagetoryOption = builder
0:     	.withLongName("defaultCategory")
0:     	.withRequired(false)
1:     	.withArgument(
0:     			argumentBuilder.withName("defaultCategory").withMaximum(1).withDefault("unknown")
1:     			.create())
0:     	.withDescription("the default category value to use").create();
1:         .withOption(modelFileOption).withOption(defaultCagetoryOption).create();
/////////////////////////////////////////////////////////////////////////
1:     defaultCategory = getStringArgument(cmdLine, defaultCagetoryOption);
commit:23722bc
/////////////////////////////////////////////////////////////////////////
0:     mainToOutput(args, new PrintWriter(System.out, true));
commit:a515335
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.util.Locale;
1: 
1: import org.apache.commons.cli2.CommandLine;
1: import org.apache.commons.cli2.Group;
1: import org.apache.commons.cli2.Option;
1: import org.apache.commons.cli2.builder.ArgumentBuilder;
1: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1: import org.apache.commons.cli2.builder.GroupBuilder;
1: import org.apache.commons.cli2.commandline.Parser;
1: import org.apache.commons.cli2.util.HelpFormatter;
1: import org.apache.mahout.classifier.ConfusionMatrix;
1: import org.apache.mahout.classifier.evaluation.Auc;
1: import org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper;
1: import org.apache.mahout.ep.State;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.stats.OnlineSummarizer;
1: 
1: /*
1:  * Auc and averageLikelihood are always shown if possible, if the number of target value is more than 2, 
1:  * then Auc and entropy matirx are not shown regardless the value of showAuc and showEntropy
1:  * the user passes, because the current implementation does not support them on two value targets.
1:  * */
1: public final class ValidateAdaptiveLogistic {
1: 
1:   private static String inputFile;
1:   private static String modelFile;
1:   private static boolean showAuc;
1:   private static boolean showScores;
1:   private static boolean showConfusion;
1: 
1:   private ValidateAdaptiveLogistic() {
1:   }
1: 
1:   public static void main(String[] args) throws IOException {
0:     mainToOutput(args, new PrintWriter(System.out));
1:   }
1: 
1:   static void mainToOutput(String[] args, PrintWriter output) throws IOException {
1:     if (parseArgs(args)) {
1:       if (!showAuc && !showConfusion && !showScores) {
1:         showAuc = true;
1:         showConfusion = true;
1:       }
1: 
1:       Auc collector = null;
1:       AdaptiveLogisticModelParameters lmp = AdaptiveLogisticModelParameters
1:           .loadFromFile(new File(modelFile));
1:       CsvRecordFactory csv = lmp.getCsvRecordFactory();
1:       AdaptiveLogisticRegression lr = lmp.createAdaptiveLogisticRegression();      
1:       
0:       if (lmp.getTargetCategories().size() <=2 ) {
1:         collector = new Auc();
1:       }
1:       
1:       OnlineSummarizer slh = new OnlineSummarizer();
0:       ConfusionMatrix cm = new ConfusionMatrix(lmp.getTargetCategories(), "unknown");
1: 
1: 
1:       State<Wrapper, CrossFoldLearner> best = lr.getBest();
1:       if (best == null) {
0:         output.printf("%s\n",
0:             "AdaptiveLogisticRegression has not be trained probably.");
1:         return;
1:       }
1:       CrossFoldLearner learner = best.getPayload().getLearner();
1: 
1:       BufferedReader in = TrainLogistic.open(inputFile);
1:       String line = in.readLine();
1:       csv.firstLine(line);
1:       line = in.readLine();
1:       if (showScores) {
0:         output.printf(Locale.ENGLISH, "\"%s\", \"%s\", \"%s\", \"%s\"\n",
0:             "target", "model-output", "log-likelihood", "average-likelihood");
1:       }
1:       while (line != null) {
1:         Vector v = new SequentialAccessSparseVector(lmp.getNumFeatures());
1:         //TODO: How to avoid extra target values not shown in the training process.
1:         int target = csv.processLine(line, v);
1:         double likelihood = learner.logLikelihood(target, v);
1:         double score = learner.classifyFull(v).maxValue();
1:         
1:         slh.add(likelihood);
1:         cm.addInstance(csv.getTargetString(line), csv.getTargetLabel(target));        
1:         
1:         if (showScores) {
0:           output.printf(Locale.ENGLISH, "%8d, %.12f, %.13f, %.13f\n", target,
1:               score, learner.logLikelihood(target, v), slh.getMean());
1:         }
1:         if (collector != null) {
1:           collector.add(target, score);
1:         }
1:         line = in.readLine();
1:       }
1:       
1:       output.printf(Locale.ENGLISH,"\nLog-likelihood:");
0:       output.printf(Locale.ENGLISH, "Min=%.2f, Max=%.2f, Mean=%.2f, Median=%.2f\n", 
1:           slh.getMin(), slh.getMax(), slh.getMean(), slh.getMedian());
1: 
1:       if (collector != null) {        
0:         output.printf(Locale.ENGLISH, "\nAUC = %.2f\n", collector.auc());        
1:       }
1:       
1:       if (showConfusion) {
0:         output.printf(Locale.ENGLISH, "\n%s\n\n", cm.toString());
1:         
0:         if (collector != null){
1:           Matrix m = collector.entropy();
1:           output.printf(Locale.ENGLISH,
0:               "Entropy Matrix: [[%.1f, %.1f], [%.1f, %.1f]]\n", m.get(0, 0),
1:               m.get(1, 0), m.get(0, 1), m.get(1, 1));
1:         }        
1:       }
1:       
1:     }
1:   }
1: 
1:   private static boolean parseArgs(String[] args) {
1:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
1: 
1:     Option help = builder.withLongName("help")
1:         .withDescription("print this list").create();
1: 
1:     Option quiet = builder.withLongName("quiet")
1:         .withDescription("be extra quiet").create();
1: 
1:     Option auc = builder.withLongName("auc").withDescription("print AUC")
1:         .create();
1:     Option confusion = builder.withLongName("confusion")
1:         .withDescription("print confusion matrix").create();
1: 
1:     Option scores = builder.withLongName("scores")
1:         .withDescription("print scores").create();
1:   
1:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:     Option inputFileOption = builder
1:         .withLongName("input")
1:         .withRequired(true)
1:         .withArgument(
1:             argumentBuilder.withName("input").withMaximum(1)
1:                 .create())
1:         .withDescription("where to get validate data").create();
1: 
1:     Option modelFileOption = builder
1:         .withLongName("model")
1:         .withRequired(true)
1:         .withArgument(
1:             argumentBuilder.withName("model").withMaximum(1)
1:                 .create())
1:         .withDescription("where to get the trained model").create();
1: 
1:     Group normalArgs = new GroupBuilder().withOption(help)
1:         .withOption(quiet).withOption(auc).withOption(scores)
1:         .withOption(confusion).withOption(inputFileOption)
0:         .withOption(modelFileOption).create();
1: 
1:     Parser parser = new Parser();
1:     parser.setHelpOption(help);
1:     parser.setHelpTrigger("--help");
1:     parser.setGroup(normalArgs);
1:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
1:     CommandLine cmdLine = parser.parseAndHelp(args);
1: 
1:     if (cmdLine == null) {
1:       return false;
1:     }
1: 
1:     inputFile = getStringArgument(cmdLine, inputFileOption);
1:     modelFile = getStringArgument(cmdLine, modelFileOption);
1:     showAuc = getBooleanArgument(cmdLine, auc);
1:     showScores = getBooleanArgument(cmdLine, scores);
1:     showConfusion = getBooleanArgument(cmdLine, confusion);
1: 
1:     return true;
1:   }
1: 
1:   private static boolean getBooleanArgument(CommandLine cmdLine, Option option) {
1:     return cmdLine.hasOption(option);
1:   }
1: 
1:   private static String getStringArgument(CommandLine cmdLine, Option inputFile) {
1:     return (String) cmdLine.getValue(inputFile);
1:   }
1: 
1: }
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:         if (collector != null) {
============================================================================