1:8642b98: /**
1:8642b98:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8642b98:  * contributor license agreements.  See the NOTICE file distributed with
1:8642b98:  * this work for additional information regarding copyright ownership.
1:8642b98:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8642b98:  * (the "License"); you may not use this file except in compliance with
1:8642b98:  * the License.  You may obtain a copy of the License at
1:8642b98:  *
1:8642b98:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8642b98:  *
1:8642b98:  * Unless required by applicable law or agreed to in writing, software
1:8642b98:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8642b98:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8642b98:  * See the License for the specific language governing permissions and
1:8642b98:  * limitations under the License.
1:8642b98:  */
5:8642b98: 
1:8642b98: package org.apache.mahout.classifier.df.tools;
1:8642b98: 
1:8642b98: import org.apache.mahout.classifier.df.DecisionForest;
1:8642b98: import org.apache.mahout.classifier.df.builder.DecisionTreeBuilder;
1:8642b98: import org.apache.mahout.classifier.df.data.Data;
1:8642b98: import org.apache.mahout.classifier.df.data.DataLoader;
1:8642b98: import org.apache.mahout.classifier.df.data.Dataset;
1:2282122: import org.apache.mahout.classifier.df.data.Instance;
1:8642b98: import org.apache.mahout.classifier.df.node.CategoricalNode;
1:8642b98: import org.apache.mahout.classifier.df.node.Leaf;
1:8642b98: import org.apache.mahout.classifier.df.node.Node;
1:8642b98: import org.apache.mahout.classifier.df.node.NumericalNode;
1:8642b98: import org.apache.mahout.common.MahoutTestCase;
1:8642b98: import org.apache.mahout.common.RandomUtils;
1:8642b98: import org.junit.Assert;
1:8642b98: import org.junit.Before;
1:8642b98: import org.junit.Test;
1:2282122: 
1:d8e0568: import java.text.DecimalFormat;
1:d8e0568: import java.util.List;
1:d8e0568: import java.util.Random;
1:d8e0568: import java.util.ArrayList;
1:1ffa3a4: @Deprecated
1:8642b98: public final class VisualizerTest extends MahoutTestCase {
1:8642b98:   
1:d8e0568:   private static final char DECIMAL_SEPARATOR =
1:d8e0568:       ((DecimalFormat) DecimalFormat.getInstance()).getDecimalFormatSymbols().getDecimalSeparator();
1:d8e0568:   
1:8642b98:   private static final String[] TRAIN_DATA = {"sunny,85,85,FALSE,no",
1:2282122:       "sunny,80,90,TRUE,no", "overcast,83,86,FALSE,yes",
1:2282122:       "rainy,70,96,FALSE,yes", "rainy,68,80,FALSE,yes", "rainy,65,70,TRUE,no",
1:2282122:       "overcast,64,65,TRUE,yes", "sunny,72,95,FALSE,no",
1:2282122:       "sunny,69,70,FALSE,yes", "rainy,75,80,FALSE,yes", "sunny,75,70,TRUE,yes",
1:2282122:       "overcast,72,90,TRUE,yes", "overcast,81,75,FALSE,yes",
1:2282122:       "rainy,71,91,TRUE,no"};
1:8642b98:   
1:8642b98:   private static final String[] TEST_DATA = {"rainy,70,96,TRUE,-",
1:2282122:       "overcast,64,65,TRUE,-", "sunny,75,90,TRUE,-",};
1:8642b98:   
1:d8e0568:   private static final String[] ATTRIBUTE_NAMES = {"outlook", "temperature",
1:2282122:       "humidity", "windy", "play"};
1:2282122:   
1:d8e0568:   private Random randomNumberGenerator;
1:2282122:   
1:d8e0568:   private Data trainingData;
1:8642b98:   
1:8642b98:   private Data testData;
1:8642b98:   
1:8642b98:   @Override
1:8642b98:   @Before
1:8642b98:   public void setUp() throws Exception {
1:8642b98:     super.setUp();
1:8642b98:     
1:d8e0568:     randomNumberGenerator = RandomUtils.getRandom(1);
1:8642b98:     
1:2282122:     Dataset dataset = DataLoader
1:2282122:         .generateDataset("C N N C L", false, TRAIN_DATA);
1:8642b98:     
1:d8e0568:     trainingData = DataLoader.loadData(dataset, TRAIN_DATA);
1:8642b98:     
1:8642b98:     testData = DataLoader.loadData(dataset, TEST_DATA);
1:8642b98:   }
1:8642b98:   
1:8642b98:   @Test
1:8642b98:   public void testTreeVisualize() throws Exception {
1:8642b98:     // build tree
1:8642b98:     DecisionTreeBuilder builder = new DecisionTreeBuilder();
1:d8e0568:     builder.setM(trainingData.getDataset().nbAttributes() - 1);
1:d8e0568:     Node tree = builder.build(randomNumberGenerator, trainingData);
1:91f15ec: 
1:d8e0568:     String visualization = TreeVisualizer.toString(tree, trainingData.getDataset(), ATTRIBUTE_NAMES);
1:91f15ec: 
1:91f15ec:     assertTrue(
1:d8e0568:         (String.format("\n" +
1:91f15ec:             "outlook = rainy\n" +
1:91f15ec:             "|   windy = FALSE : yes\n" +
1:91f15ec:             "|   windy = TRUE : no\n" +
1:91f15ec:             "outlook = sunny\n" +
1:d8e0568:             "|   humidity < 77%s5 : yes\n" +
1:d8e0568:             "|   humidity >= 77%s5 : no\n" +
1:d8e0568:                        "outlook = overcast : yes", DECIMAL_SEPARATOR, DECIMAL_SEPARATOR)).equals(visualization) ||
1:d8e0568:         (String.format("\n" +
1:91f15ec:             "outlook = rainy\n" +
1:91f15ec:             "|   windy = TRUE : no\n" +
1:91f15ec:             "|   windy = FALSE : yes\n" +
1:91f15ec:             "outlook = overcast : yes\n" +
1:91f15ec:             "outlook = sunny\n" +
1:d8e0568:             "|   humidity < 77%s5 : yes\n" +
1:d8e0568:             "|   humidity >= 77%s5 : no", DECIMAL_SEPARATOR, DECIMAL_SEPARATOR)).equals(visualization));
1:8642b98:   }
1:8642b98:   
1:8642b98:   @Test
1:8642b98:   public void testPredictTrace() throws Exception {
1:8642b98:     // build tree
1:8642b98:     DecisionTreeBuilder builder = new DecisionTreeBuilder();
1:d8e0568:     builder.setM(trainingData.getDataset().nbAttributes() - 1);
1:d8e0568:     Node tree = builder.build(randomNumberGenerator, trainingData);
1:8642b98:     
1:2282122:     String[] prediction = TreeVisualizer.predictTrace(tree, testData,
1:d8e0568: 			ATTRIBUTE_NAMES);
1:2282122:     Assert.assertArrayEquals(new String[] {
1:8396a27:         "outlook = rainy -> windy = TRUE -> no", "outlook = overcast -> yes",
1:d8e0568:         String.format("outlook = sunny -> (humidity = 90) >= 77%s5 -> no", DECIMAL_SEPARATOR)}, prediction);
1:8642b98:   }
1:8642b98:   
1:8642b98:   @Test
1:8642b98:   public void testForestVisualize() throws Exception {
1:8642b98:     // Tree
1:8642b98:     NumericalNode root = new NumericalNode(2, 90, new Leaf(0),
1:2282122:         new CategoricalNode(0, new double[] {0, 1, 2}, new Node[] {
1:2282122:             new NumericalNode(1, 71, new Leaf(0), new Leaf(1)), new Leaf(1),
1:2282122:             new Leaf(0)}));
1:d8e0568:     List<Node> trees = new ArrayList<>();
1:8642b98:     trees.add(root);
1:91f15ec: 
1:8642b98:     // Forest
1:8642b98:     DecisionForest forest = new DecisionForest(trees);
1:d8e0568:     String visualization = ForestVisualizer.toString(forest, trainingData.getDataset(), null);
1:91f15ec:     assertTrue(
1:91f15ec:         ("Tree[1]:\n2 < 90 : yes\n2 >= 90\n" +
1:91f15ec:             "|   0 = rainy\n" +
1:91f15ec:             "|   |   1 < 71 : yes\n" +
1:91f15ec:             "|   |   1 >= 71 : no\n" +
1:91f15ec:             "|   0 = sunny : no\n" +
1:91f15ec:             "|   0 = overcast : yes\n").equals(visualization) ||
1:91f15ec:         ("Tree[1]:\n" +
1:91f15ec:             "2 < 90 : no\n" +
1:91f15ec:             "2 >= 90\n" +
1:91f15ec:             "|   0 = rainy\n" +
1:91f15ec:             "|   |   1 < 71 : no\n" +
1:91f15ec:             "|   |   1 >= 71 : yes\n" +
1:91f15ec:             "|   0 = overcast : yes\n" +
1:91f15ec:             "|   0 = sunny : no\n").equals(visualization));
1:2282122: 
1:d8e0568:     visualization = ForestVisualizer.toString(forest, trainingData.getDataset(), ATTRIBUTE_NAMES);
1:91f15ec:     assertTrue(
1:91f15ec:         ("Tree[1]:\n" +
1:91f15ec:             "humidity < 90 : yes\n" +
1:91f15ec:             "humidity >= 90\n" +
1:91f15ec:             "|   outlook = rainy\n" +
1:91f15ec:             "|   |   temperature < 71 : yes\n" +
1:91f15ec:             "|   |   temperature >= 71 : no\n" +
1:91f15ec:             "|   outlook = sunny : no\n" +
1:91f15ec:             "|   outlook = overcast : yes\n").equals(visualization) ||
1:91f15ec:         ("Tree[1]:\n" +
1:91f15ec:             "humidity < 90 : no\n" +
1:91f15ec:             "humidity >= 90\n" +
1:91f15ec:             "|   outlook = rainy\n" +
1:91f15ec:             "|   |   temperature < 71 : no\n" +
1:91f15ec:             "|   |   temperature >= 71 : yes\n" +
1:91f15ec:             "|   outlook = overcast : yes\n" +
1:91f15ec:             "|   outlook = sunny : no\n").equals(visualization));
1:2282122:   }
1:2282122:   
1:2282122:   @Test
1:2282122:   public void testLeafless() throws Exception {
1:d8e0568:     List<Instance> instances = new ArrayList<>();
1:d8e0568:     for (int i = 0; i < trainingData.size(); i++) {
1:d8e0568:       if (trainingData.get(i).get(0) != 0.0d) {
1:d8e0568:         instances.add(trainingData.get(i));
1:2282122:       }
1:2282122:     }
1:d8e0568:     Data lessData = new Data(trainingData.getDataset(), instances);
1:8642b98:     
1:2282122:     // build tree
1:2282122:     DecisionTreeBuilder builder = new DecisionTreeBuilder();
1:d8e0568:     builder.setM(trainingData.getDataset().nbAttributes() - 1);
1:2282122:     builder.setMinSplitNum(0);
1:2282122:     builder.setComplemented(false);
1:d8e0568:     Node tree = builder.build(randomNumberGenerator, lessData);
1:2282122: 
1:d8e0568:     String visualization = TreeVisualizer.toString(tree, trainingData.getDataset(), ATTRIBUTE_NAMES);
1:91f15ec:     assertTrue(
1:d8e0568:         (String.format("\noutlook = sunny\n" +
1:d8e0568:             "|   humidity < 77%s5 : yes\n" +
1:d8e0568:             "|   humidity >= 77%s5 : no\n" +
1:d8e0568:             "outlook = overcast : yes", DECIMAL_SEPARATOR, DECIMAL_SEPARATOR)).equals(visualization) ||
1:d8e0568:         (String.format("\noutlook = overcast : yes\n" +
1:91f15ec:             "outlook = sunny\n" +
1:d8e0568:             "|   humidity < 77%s5 : yes\n" +
1:d8e0568:             "|   humidity >= 77%s5 : no", DECIMAL_SEPARATOR, DECIMAL_SEPARATOR)).equals(visualization));
1:2282122:   }
1:2282122:   
1:2282122:   @Test
1:2282122:   public void testEmpty() throws Exception {
1:d8e0568:     Data emptyData = new Data(trainingData.getDataset());
1:2282122:     
1:2282122:     // build tree
1:2282122:     DecisionTreeBuilder builder = new DecisionTreeBuilder();
1:d8e0568:     Node tree = builder.build(randomNumberGenerator, emptyData);
1:2282122: 
1:d8e0568:     assertEquals(" : unknown", TreeVisualizer.toString(tree, trainingData.getDataset(), ATTRIBUTE_NAMES));
1:8642b98:   }
1:8642b98: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:d8e0568
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.text.DecimalFormat;
1: import java.util.List;
1: import java.util.Random;
1: import java.util.ArrayList;
1:   private static final char DECIMAL_SEPARATOR =
1:       ((DecimalFormat) DecimalFormat.getInstance()).getDecimalFormatSymbols().getDecimalSeparator();
1:   
/////////////////////////////////////////////////////////////////////////
1:   private static final String[] ATTRIBUTE_NAMES = {"outlook", "temperature",
1:   private Random randomNumberGenerator;
1:   private Data trainingData;
/////////////////////////////////////////////////////////////////////////
1:     randomNumberGenerator = RandomUtils.getRandom(1);
1:     trainingData = DataLoader.loadData(dataset, TRAIN_DATA);
/////////////////////////////////////////////////////////////////////////
1:     builder.setM(trainingData.getDataset().nbAttributes() - 1);
1:     Node tree = builder.build(randomNumberGenerator, trainingData);
1:     String visualization = TreeVisualizer.toString(tree, trainingData.getDataset(), ATTRIBUTE_NAMES);
1:         (String.format("\n" +
1:             "|   humidity < 77%s5 : yes\n" +
1:             "|   humidity >= 77%s5 : no\n" +
1:                        "outlook = overcast : yes", DECIMAL_SEPARATOR, DECIMAL_SEPARATOR)).equals(visualization) ||
1:         (String.format("\n" +
1:             "|   humidity < 77%s5 : yes\n" +
1:             "|   humidity >= 77%s5 : no", DECIMAL_SEPARATOR, DECIMAL_SEPARATOR)).equals(visualization));
1:     builder.setM(trainingData.getDataset().nbAttributes() - 1);
1:     Node tree = builder.build(randomNumberGenerator, trainingData);
1: 			ATTRIBUTE_NAMES);
1:         String.format("outlook = sunny -> (humidity = 90) >= 77%s5 -> no", DECIMAL_SEPARATOR)}, prediction);
/////////////////////////////////////////////////////////////////////////
1:     List<Node> trees = new ArrayList<>();
1:     String visualization = ForestVisualizer.toString(forest, trainingData.getDataset(), null);
/////////////////////////////////////////////////////////////////////////
1:     visualization = ForestVisualizer.toString(forest, trainingData.getDataset(), ATTRIBUTE_NAMES);
/////////////////////////////////////////////////////////////////////////
1:     List<Instance> instances = new ArrayList<>();
1:     for (int i = 0; i < trainingData.size(); i++) {
1:       if (trainingData.get(i).get(0) != 0.0d) {
1:         instances.add(trainingData.get(i));
1:     Data lessData = new Data(trainingData.getDataset(), instances);
1:     builder.setM(trainingData.getDataset().nbAttributes() - 1);
1:     Node tree = builder.build(randomNumberGenerator, lessData);
1:     String visualization = TreeVisualizer.toString(tree, trainingData.getDataset(), ATTRIBUTE_NAMES);
1:         (String.format("\noutlook = sunny\n" +
1:             "|   humidity < 77%s5 : yes\n" +
1:             "|   humidity >= 77%s5 : no\n" +
1:             "outlook = overcast : yes", DECIMAL_SEPARATOR, DECIMAL_SEPARATOR)).equals(visualization) ||
1:         (String.format("\noutlook = overcast : yes\n" +
1:             "|   humidity < 77%s5 : yes\n" +
1:             "|   humidity >= 77%s5 : no", DECIMAL_SEPARATOR, DECIMAL_SEPARATOR)).equals(visualization));
1:     Data emptyData = new Data(trainingData.getDataset());
1:     Node tree = builder.build(randomNumberGenerator, emptyData);
1:     assertEquals(" : unknown", TreeVisualizer.toString(tree, trainingData.getDataset(), ATTRIBUTE_NAMES));
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sean Owen
-------------------------------------------------------------------------------
commit:91f15ec
/////////////////////////////////////////////////////////////////////////
1: 
0:     String visualization = TreeVisualizer.toString(tree, data.getDataset(), ATTR_NAMES);
1: 
1:     assertTrue(
0:         ("\n" +
1:             "outlook = rainy\n" +
1:             "|   windy = FALSE : yes\n" +
1:             "|   windy = TRUE : no\n" +
1:             "outlook = sunny\n" +
0:             "|   humidity < 77.5 : yes\n" +
0:             "|   humidity >= 77.5 : no\n" +
0:             "outlook = overcast : yes").equals(visualization) ||
0:         ("\n" +
1:             "outlook = rainy\n" +
1:             "|   windy = TRUE : no\n" +
1:             "|   windy = FALSE : yes\n" +
1:             "outlook = overcast : yes\n" +
1:             "outlook = sunny\n" +
0:             "|   humidity < 77.5 : yes\n" +
0:             "|   humidity >= 77.5 : no").equals(visualization));
/////////////////////////////////////////////////////////////////////////
1: 
0:     String visualization = ForestVisualizer.toString(forest, data.getDataset(), null);
1:     assertTrue(
1:         ("Tree[1]:\n2 < 90 : yes\n2 >= 90\n" +
1:             "|   0 = rainy\n" +
1:             "|   |   1 < 71 : yes\n" +
1:             "|   |   1 >= 71 : no\n" +
1:             "|   0 = sunny : no\n" +
1:             "|   0 = overcast : yes\n").equals(visualization) ||
1:         ("Tree[1]:\n" +
1:             "2 < 90 : no\n" +
1:             "2 >= 90\n" +
1:             "|   0 = rainy\n" +
1:             "|   |   1 < 71 : no\n" +
1:             "|   |   1 >= 71 : yes\n" +
1:             "|   0 = overcast : yes\n" +
1:             "|   0 = sunny : no\n").equals(visualization));
0:     visualization = ForestVisualizer.toString(forest, data.getDataset(), ATTR_NAMES);
1:     assertTrue(
1:         ("Tree[1]:\n" +
1:             "humidity < 90 : yes\n" +
1:             "humidity >= 90\n" +
1:             "|   outlook = rainy\n" +
1:             "|   |   temperature < 71 : yes\n" +
1:             "|   |   temperature >= 71 : no\n" +
1:             "|   outlook = sunny : no\n" +
1:             "|   outlook = overcast : yes\n").equals(visualization) ||
1:         ("Tree[1]:\n" +
1:             "humidity < 90 : no\n" +
1:             "humidity >= 90\n" +
1:             "|   outlook = rainy\n" +
1:             "|   |   temperature < 71 : no\n" +
1:             "|   |   temperature >= 71 : yes\n" +
1:             "|   outlook = overcast : yes\n" +
1:             "|   outlook = sunny : no\n").equals(visualization));
/////////////////////////////////////////////////////////////////////////
0:     String visualization = TreeVisualizer.toString(tree, data.getDataset(), ATTR_NAMES);
1:     assertTrue(
0:         ("\noutlook = sunny\n" +
0:             "|   humidity < 77.5 : yes\n" +
0:             "|   humidity >= 77.5 : no\n" +
0:             "outlook = overcast : yes").equals(visualization) ||
0:         ("\noutlook = overcast : yes\n" +
1:             "outlook = sunny\n" +
0:             "|   humidity < 77.5 : yes\n" +
0:             "|   humidity >= 77.5 : no").equals(visualization));
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d4e5827
/////////////////////////////////////////////////////////////////////////
0:             + "outlook = sunny\n|   humidity < 77.5 : yes\n|   humidity >= 77.5 : no\n"
/////////////////////////////////////////////////////////////////////////
0:         "outlook = sunny -> (humidity = 90) >= 77.5 -> no"}, prediction);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals("\noutlook = sunny\n|   humidity < 77.5 : yes\n|   humidity >= 77.5 : no\noutlook = overcast : yes", TreeVisualizer.toString(tree, data.getDataset(), ATTR_NAMES));
commit:8396a27
/////////////////////////////////////////////////////////////////////////
0:     Assert.assertArrayEquals(new String[]{
1:         "outlook = rainy -> windy = TRUE -> no", "outlook = overcast -> yes",
0:         "outlook = sunny -> (humidity = 90) >= 85 -> no"}, prediction);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:2282122
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.classifier.df.data.Instance;
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
1: 
1:       "sunny,80,90,TRUE,no", "overcast,83,86,FALSE,yes",
1:       "rainy,70,96,FALSE,yes", "rainy,68,80,FALSE,yes", "rainy,65,70,TRUE,no",
1:       "overcast,64,65,TRUE,yes", "sunny,72,95,FALSE,no",
1:       "sunny,69,70,FALSE,yes", "rainy,75,80,FALSE,yes", "sunny,75,70,TRUE,yes",
1:       "overcast,72,90,TRUE,yes", "overcast,81,75,FALSE,yes",
1:       "rainy,71,91,TRUE,no"};
1:       "overcast,64,65,TRUE,-", "sunny,75,90,TRUE,-",};
1:       "humidity", "windy", "play"};
1:   
1:   
/////////////////////////////////////////////////////////////////////////
0:     rng = RandomUtils.getRandom(1);
1:     Dataset dataset = DataLoader
1:         .generateDataset("C N N C L", false, TRAIN_DATA);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals("\noutlook = rainy\n|   windy = FALSE : yes\n|   windy = TRUE : no\n"
0:             + "outlook = sunny\n|   humidity < 85 : yes\n|   humidity >= 85 : no\n"
0:             + "outlook = overcast : yes", TreeVisualizer.toString(tree, data.getDataset(), ATTR_NAMES));
/////////////////////////////////////////////////////////////////////////
1:     String[] prediction = TreeVisualizer.predictTrace(tree, testData,
0:         ATTR_NAMES);
1:     Assert.assertArrayEquals(new String[] {
/////////////////////////////////////////////////////////////////////////
1:         new CategoricalNode(0, new double[] {0, 1, 2}, new Node[] {
1:             new NumericalNode(1, 71, new Leaf(0), new Leaf(1)), new Leaf(1),
1:             new Leaf(0)}));
0:     assertEquals("Tree[1]:\n2 < 90 : yes\n2 >= 90\n"
0:             + "|   0 = rainy\n|   |   1 < 71 : yes\n|   |   1 >= 71 : no\n"
0:             + "|   0 = sunny : no\n" + "|   0 = overcast : yes\n", ForestVisualizer.toString(forest, data.getDataset(), null));
1: 
0:     assertEquals("Tree[1]:\nhumidity < 90 : yes\nhumidity >= 90\n"
0:             + "|   outlook = rainy\n|   |   temperature < 71 : yes\n|   |   temperature >= 71 : no\n"
0:             + "|   outlook = sunny : no\n" + "|   outlook = overcast : yes\n", ForestVisualizer.toString(forest, data.getDataset(), ATTR_NAMES));
1:   }
1:   
1:   @Test
1:   public void testLeafless() throws Exception {
0:     List<Instance> instances = Lists.newArrayList();
0:     for (int i = 0; i < data.size(); i++) {
0:       if (data.get(i).get(0) != 0.0d) {
0:         instances.add(data.get(i));
1:       }
1:     }
0:     Data lessData = new Data(data.getDataset(), instances);
1:     // build tree
1:     DecisionTreeBuilder builder = new DecisionTreeBuilder();
0:     builder.setM(data.getDataset().nbAttributes() - 1);
1:     builder.setMinSplitNum(0);
1:     builder.setComplemented(false);
0:     Node tree = builder.build(rng, lessData);
1: 
0:     assertEquals("\noutlook = sunny\n|   humidity < 85 : yes\n|   humidity >= 85 : no\noutlook = overcast : yes", TreeVisualizer.toString(tree, data.getDataset(), ATTR_NAMES));
1:   }
1:   
1:   @Test
1:   public void testEmpty() throws Exception {
0:     Data emptyData = new Data(data.getDataset());
1:     
1:     // build tree
1:     DecisionTreeBuilder builder = new DecisionTreeBuilder();
0:     Node tree = builder.build(rng, emptyData);
1: 
0:     assertEquals(" : unknown", TreeVisualizer.toString(tree, data.getDataset(), ATTR_NAMES));
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     List<Node> trees = Lists.newArrayList();
commit:c5edfe9
/////////////////////////////////////////////////////////////////////////
0:         + "outlook = overcast : yes\n"
0:         + "outlook = sunny\n|   humidity < 85 : yes\n|   humidity >= 85 : no");
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:8642b98
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.df.tools;
1: 
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.Random;
1: 
1: import org.apache.mahout.classifier.df.DecisionForest;
1: import org.apache.mahout.classifier.df.builder.DecisionTreeBuilder;
1: import org.apache.mahout.classifier.df.data.Data;
1: import org.apache.mahout.classifier.df.data.DataLoader;
1: import org.apache.mahout.classifier.df.data.Dataset;
1: import org.apache.mahout.classifier.df.node.CategoricalNode;
1: import org.apache.mahout.classifier.df.node.Leaf;
1: import org.apache.mahout.classifier.df.node.Node;
1: import org.apache.mahout.classifier.df.node.NumericalNode;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.common.RandomUtils;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public final class VisualizerTest extends MahoutTestCase {
1:   
1:   private static final String[] TRAIN_DATA = {"sunny,85,85,FALSE,no",
0:     "sunny,80,90,TRUE,no", "overcast,83,86,FALSE,yes",
0:     "rainy,70,96,FALSE,yes", "rainy,68,80,FALSE,yes", "rainy,65,70,TRUE,no",
0:     "overcast,64,65,TRUE,yes", "sunny,72,95,FALSE,no",
0:     "sunny,69,70,FALSE,yes", "rainy,75,80,FALSE,yes", "sunny,75,70,TRUE,yes",
0:     "overcast,72,90,TRUE,yes", "overcast,81,75,FALSE,yes",
0:     "rainy,71,91,TRUE,no"};
1:   
1:   private static final String[] TEST_DATA = {"rainy,70,96,TRUE,-",
0:     "overcast,64,65,TRUE,-", "sunny,75,90,TRUE,-",};
1:   
0:   private static final String[] ATTR_NAMES = {"outlook", "temperature",
0:     "humidity", "windy", "play"};
1:   
0:   private Random rng;
0:   private Data data;
1:   private Data testData;
1:   
1:   @Override
1:   @Before
1:   public void setUp() throws Exception {
1:     super.setUp();
1:     
0:     rng = RandomUtils.getRandom();
1:     
0:     // Dataset
0:     Dataset dataset = DataLoader.generateDataset("C N N C L", false, TRAIN_DATA);
1:     
0:     // Training data
0:     data = DataLoader.loadData(dataset, TRAIN_DATA);
1:     
0:     // Test data
1:     testData = DataLoader.loadData(dataset, TEST_DATA);
1:   }
1:   
1:   @Test
1:   public void testTreeVisualize() throws Exception {
1:     // build tree
1:     DecisionTreeBuilder builder = new DecisionTreeBuilder();
0:     builder.setM(data.getDataset().nbAttributes() - 1);
0:     Node tree = builder.build(rng, data);
1:     
0:     assertEquals(TreeVisualizer.toString(tree, data.getDataset(), ATTR_NAMES),
0:       "\noutlook = rainy\n|   windy = FALSE : yes\n|   windy = TRUE : no\n"
0:         + "outlook = sunny\n|   humidity < 85 : yes\n|   humidity >= 85 : no\n"
0:         + "outlook = overcast : yes");
1:   }
1:   
1:   @Test
1:   public void testPredictTrace() throws Exception {
1:     // build tree
1:     DecisionTreeBuilder builder = new DecisionTreeBuilder();
0:     builder.setM(data.getDataset().nbAttributes() - 1);
0:     Node tree = builder.build(rng, data);
1:     
0:     String[] prediction = TreeVisualizer.predictTrace(tree, testData, ATTR_NAMES);
0:     Assert.assertArrayEquals(prediction, new String[] {
0:       "outlook = rainy -> windy = TRUE -> no", "outlook = overcast -> yes",
0:       "outlook = sunny -> (humidity = 90) >= 85 -> no"});
1:   }
1:   
1:   @Test
1:   public void testForestVisualize() throws Exception {
1:     // Tree
1:     NumericalNode root = new NumericalNode(2, 90, new Leaf(0),
0:       new CategoricalNode(0, new double[] {0, 1, 2}, new Node[] {
0:         new NumericalNode(1, 71, new Leaf(0), new Leaf(1)), new Leaf(1),
0:         new Leaf(0)}));
0:     List<Node> trees = new ArrayList<Node>();
1:     trees.add(root);
1:     
1:     // Forest
1:     DecisionForest forest = new DecisionForest(trees);
0:     assertEquals(ForestVisualizer.toString(forest, data.getDataset(), null),
0:       "Tree[1]:\n2 < 90 : yes\n2 >= 90\n"
0:         + "|   0 = rainy\n|   |   1 < 71 : yes\n|   |   1 >= 71 : no\n"
0:         + "|   0 = sunny : no\n" + "|   0 = overcast : yes\n");
1:     
0:     assertEquals(ForestVisualizer.toString(forest, data.getDataset(), ATTR_NAMES),
0:       "Tree[1]:\nhumidity < 90 : yes\nhumidity >= 90\n"
0:         + "|   outlook = rainy\n|   |   temperature < 71 : yes\n|   |   temperature >= 71 : no\n"
0:         + "|   outlook = sunny : no\n" + "|   outlook = overcast : yes\n");
1:   }
1: }
============================================================================