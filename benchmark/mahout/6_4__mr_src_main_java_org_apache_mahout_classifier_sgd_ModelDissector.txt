1:1e923ed: /*
1:1e923ed:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1e923ed:  * contributor license agreements.  See the NOTICE file distributed with
1:1e923ed:  * this work for additional information regarding copyright ownership.
1:1e923ed:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1e923ed:  * (the "License"); you may not use this file except in compliance with
1:1e923ed:  * the License.  You may obtain a copy of the License at
1:1e923ed:  *
1:1e923ed:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1e923ed:  *
1:1e923ed:  * Unless required by applicable law or agreed to in writing, software
1:1e923ed:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1e923ed:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1e923ed:  * See the License for the specific language governing permissions and
1:1e923ed:  * limitations under the License.
1:1e923ed:  */
4:1e923ed: 
1:1e923ed: package org.apache.mahout.classifier.sgd;
1:1e923ed: 
1:04a4b3d: import com.google.common.collect.Ordering;
1:04a4b3d: import org.apache.mahout.classifier.AbstractVectorClassifier;
1:3a1adb7: import org.apache.mahout.common.RandomUtils;
1:1e923ed: import org.apache.mahout.math.Vector;
1:1e923ed: 
1:85f9ece: import java.util.ArrayList;
1:04a4b3d: import java.util.Collections;
1:85f9ece: import java.util.HashMap;
1:04a4b3d: import java.util.List;
1:1e923ed: import java.util.Map;
1:04a4b3d: import java.util.PriorityQueue;
1:d53cf4a: import java.util.Queue;
1:1e923ed: import java.util.Set;
1:1e923ed: 
1:1e923ed: /**
1:1e923ed:  * Uses sample data to reverse engineer a feature-hashed model.
1:1e923ed:  *
1:1e923ed:  * The result gives approximate weights for features and interactions
1:1e923ed:  * in the original space.
1:41acc3f:  *
1:41acc3f:  * The idea is that the hashed encoders have the option of having a trace dictionary.  This
1:41acc3f:  * tells us where each feature is hashed to, or each feature/value combination in the case
1:41acc3f:  * of word-like values.  Using this dictionary, we can put values into a synthetic feature
1:41acc3f:  * vector in just the locations specified by a single feature or interaction.  Then we can
1:41acc3f:  * push this through a linear part of a model to see the contribution of that input. For
1:41acc3f:  * any generalized linear model like logistic regression, there is a linear part of the
1:41acc3f:  * model that allows this.
1:41acc3f:  *
1:41acc3f:  * What the ModelDissector does is to accept a trace dictionary and a model in an update
1:41acc3f:  * method.  It figures out the weights for the elements in the trace dictionary and stashes
1:41acc3f:  * them.  Then in a summary method, the biggest weights are returned.  This update/flush
1:41acc3f:  * style is used so that the trace dictionary doesn't have to grow to enormous levels,
1:41acc3f:  * but instead can be cleared between updates.
1:1e923ed:  */
1:1e923ed: public class ModelDissector {
1:d53cf4a:   private final Map<String,Vector> weightMap;
1:1e923ed: 
1:61ae2e7:   public ModelDissector() {
1:85f9ece:     weightMap = new HashMap<>();
4:1e923ed:   }
1:1e923ed: 
1:319fd82:   /**
1:319fd82:    * Probes a model to determine the effect of a particular variable.  This is done
1:319fd82:    * with the ade of a trace dictionary which has recorded the locations in the feature
1:319fd82:    * vector that are modified by various variable values.  We can set these locations to
1:319fd82:    * 1 and then look at the resulting score.  This tells us the weight the model places
1:319fd82:    * on that variable.
1:319fd82:    * @param features               A feature vector to use (destructively)
1:3a1adb7:    * @param traceDictionary        A trace dictionary containing variables and what locations
1:3a1adb7:    *                               in the feature vector are affected by them
1:319fd82:    * @param learner                The model that we are probing to find weights on features
1:319fd82:    */
1:319fd82: 
1:04a4b3d:   public void update(Vector features, Map<String, Set<Integer>> traceDictionary, AbstractVectorClassifier learner) {
1:319fd82:     // zero out feature vector
1:04a4b3d:     features.assign(0);
1:d53cf4a:     for (Map.Entry<String, Set<Integer>> entry : traceDictionary.entrySet()) {
1:319fd82:       // get a feature and locations where it is stored in the feature vector
1:d53cf4a:       String key = entry.getKey();
1:d53cf4a:       Set<Integer> value = entry.getValue();
1:319fd82: 
1:319fd82:       // if we haven't looked at this feature yet
1:d53cf4a:       if (!weightMap.containsKey(key)) {
1:319fd82:         // put probe values in the feature vector
1:d53cf4a:         for (Integer where : value) {
1:04a4b3d:           features.set(where, 1);
1:04a4b3d:         }
1:04a4b3d: 
1:319fd82:         // see what the model says
1:04a4b3d:         Vector v = learner.classifyNoLink(features);
1:d53cf4a:         weightMap.put(key, v);
1:04a4b3d: 
1:319fd82:         // and zero out those locations again
1:d53cf4a:         for (Integer where : value) {
1:04a4b3d:           features.set(where, 0);
1:04a4b3d:         }
1:04a4b3d:       }
1:1e923ed:     }
1:1e923ed:   }
1:1e923ed: 
1:319fd82:   /**
1:319fd82:    * Returns the n most important features with their
1:319fd82:    * weights, most important category and the top few
1:319fd82:    * categories that they affect.
1:319fd82:    * @param n      How many results to return.
1:319fd82:    * @return       A list of the top variables.
1:319fd82:    */
1:04a4b3d:   public List<Weight> summary(int n) {
1:85f9ece:     Queue<Weight> pq = new PriorityQueue<>();
1:d53cf4a:     for (Map.Entry<String, Vector> entry : weightMap.entrySet()) {
1:d53cf4a:       pq.add(new Weight(entry.getKey(), entry.getValue()));
1:04a4b3d:       while (pq.size() > n) {
1:04a4b3d:         pq.poll();
1:04a4b3d:       }
1:1e923ed:     }
1:85f9ece:     List<Weight> r = new ArrayList<>(pq);
1:04a4b3d:     Collections.sort(r, Ordering.natural().reverse());
1:939ac30:     return r;
1:319fd82:   }
1:319fd82: 
1:d61a0ee:   private static final class Category implements Comparable<Category> {
1:939ac30:     private final int index;
1:939ac30:     private final double weight;
1:1e923ed: 
1:939ac30:     private Category(int index, double weight) {
1:319fd82:       this.index = index;
1:319fd82:       this.weight = weight;
1:319fd82:     }
1:319fd82: 
1:319fd82:     @Override
1:319fd82:     public int compareTo(Category o) {
1:319fd82:       int r = Double.compare(Math.abs(weight), Math.abs(o.weight));
1:3a1adb7:       if (r == 0) {
1:3a1adb7:         if (o.index < index) {
1:3a1adb7:           return -1;
1:4194a28:         }
1:4194a28:         if (o.index > index) {
1:3a1adb7:           return 1;
1:3a1adb7:         }
1:3a1adb7:         return 0;
1:939ac30:       }
1:3a1adb7:       return r;
1:319fd82:     }
1:3a1adb7: 
1:3a1adb7:     @Override
1:3a1adb7:     public boolean equals(Object o) {
1:3a1adb7:       if (!(o instanceof Category)) {
1:3a1adb7:         return false;
1:3a1adb7:       }
1:3a1adb7:       Category other = (Category) o;
1:3a1adb7:       return index == other.index && weight == other.weight;
1:3a1adb7:     }
1:3a1adb7: 
1:3a1adb7:     @Override
1:3a1adb7:     public int hashCode() {
1:3a1adb7:       return RandomUtils.hashDouble(weight) ^ index;
1:3a1adb7:     }
1:3a1adb7: 
1:319fd82:   }
1:319fd82: 
1:04a4b3d:   public static class Weight implements Comparable<Weight> {
1:d53cf4a:     private final String feature;
1:d53cf4a:     private final double value;
1:d53cf4a:     private final int maxIndex;
1:939ac30:     private final List<Category> categories;
1:04a4b3d: 
1:04a4b3d:     public Weight(String feature, Vector weights) {
1:319fd82:       this(feature, weights, 3);
1:319fd82:     }
1:319fd82: 
1:319fd82:     public Weight(String feature, Vector weights, int n) {
1:04a4b3d:       this.feature = feature;
1:af1c02c:       // pick out the weight with the largest abs value, but don't forget the sign
1:85f9ece:       Queue<Category> biggest = new PriorityQueue<>(n + 1, Ordering.natural());
1:dc62944:       for (Vector.Element element : weights.all()) {
1:319fd82:         biggest.add(new Category(element.index(), element.get()));
1:319fd82:         while (biggest.size() > n) {
1:319fd82:           biggest.poll();
1:319fd82:         }
1:af1c02c:       }
1:85f9ece:       categories = new ArrayList<>(biggest);
1:319fd82:       Collections.sort(categories, Ordering.natural().reverse());
1:319fd82:       value = categories.get(0).weight;
1:319fd82:       maxIndex = categories.get(0).index;
1:af1c02c:     }
1:04a4b3d: 
1:af1c02c:     @Override
1:04a4b3d:     public int compareTo(Weight other) {
1:af1c02c:       int r = Double.compare(Math.abs(this.value), Math.abs(other.value));
1:939ac30:       if (r == 0) {
1:04a4b3d:         return feature.compareTo(other.feature);
1:3a1adb7:       }
1:3a1adb7:       return r;
1:04a4b3d:     }
1:3a1adb7: 
1:3a1adb7:     @Override
1:3a1adb7:     public boolean equals(Object o) {
1:3a1adb7:       if (!(o instanceof Weight)) {
1:3a1adb7:         return false;
1:3a1adb7:       }
1:3a1adb7:       Weight other = (Weight) o;
1:3a1adb7:       return feature.equals(other.feature)
1:3a1adb7:           && value == other.value
1:3a1adb7:           && maxIndex == other.maxIndex
1:3a1adb7:           && categories.equals(other.categories);
1:3a1adb7:     }
1:3a1adb7: 
1:3a1adb7:     @Override
1:3a1adb7:     public int hashCode() {
1:3a1adb7:       return feature.hashCode() ^ RandomUtils.hashDouble(value) ^ maxIndex ^ categories.hashCode();
1:04a4b3d:     }
1:04a4b3d: 
1:04a4b3d:     public String getFeature() {
1:04a4b3d:       return feature;
1:04a4b3d:     }
1:04a4b3d: 
1:04a4b3d:     public double getWeight() {
1:04a4b3d:       return value;
1:04a4b3d:     }
1:04a4b3d: 
1:319fd82:     public double getWeight(int n) {
1:319fd82:       return categories.get(n).weight;
1:319fd82:     }
1:319fd82: 
1:319fd82:     public double getCategory(int n) {
1:319fd82:       return categories.get(n).index;
1:319fd82:     }
1:319fd82: 
1:04a4b3d:     public int getMaxImpact() {
1:04a4b3d:       return maxIndex;
1:04a4b3d:     }
1:1e923ed:   }
1:1e923ed: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1:     weightMap = new HashMap<>();
/////////////////////////////////////////////////////////////////////////
1:     Queue<Weight> pq = new PriorityQueue<>();
1:     List<Weight> r = new ArrayList<>(pq);
/////////////////////////////////////////////////////////////////////////
1:       Queue<Category> biggest = new PriorityQueue<>(n + 1, Ordering.natural());
1:       categories = new ArrayList<>(biggest);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1:       for (Vector.Element element : weights.all()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:         }
1:         if (o.index > index) {
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
1:   private static final class Category implements Comparable<Category> {
commit:3a1adb7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1:    * @param traceDictionary        A trace dictionary containing variables and what locations
1:    *                               in the feature vector are affected by them
/////////////////////////////////////////////////////////////////////////
1:       if (r == 0) {
1:         if (o.index < index) {
1:           return -1;
0:         } else if (o.index > index) {
1:           return 1;
1:         }
1:         return 0;
1:       return r;
1: 
1:     @Override
1:     public boolean equals(Object o) {
1:       if (!(o instanceof Category)) {
1:         return false;
1:       }
1:       Category other = (Category) o;
1:       return index == other.index && weight == other.weight;
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:       return RandomUtils.hashDouble(weight) ^ index;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:       return r;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o) {
1:       if (!(o instanceof Weight)) {
1:         return false;
1:       }
1:       Weight other = (Weight) o;
1:       return feature.equals(other.feature)
1:           && value == other.value
1:           && maxIndex == other.maxIndex
1:           && categories.equals(other.categories);
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:       return feature.hashCode() ^ RandomUtils.hashDouble(value) ^ maxIndex ^ categories.hashCode();
commit:939ac30
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final int index;
1:     private final double weight;
1:     private Category(int index, double weight) {
/////////////////////////////////////////////////////////////////////////
1:       if (r == 0) {
0:         if (index < o.index) {
0:           return -1;
0:         } else if (index > o.index) {
0:           return 1;
1:         }
0:         return 0;
1:         return r;
/////////////////////////////////////////////////////////////////////////
1:     private final List<Category> categories;
/////////////////////////////////////////////////////////////////////////
0:       Queue<Category> biggest = new PriorityQueue<Category>(n + 1, Ordering.natural().reverse());
commit:61ae2e7
/////////////////////////////////////////////////////////////////////////
1:   public ModelDissector() {
commit:d53cf4a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Queue;
/////////////////////////////////////////////////////////////////////////
1:   private final Map<String,Vector> weightMap;
/////////////////////////////////////////////////////////////////////////
1:     for (Map.Entry<String, Set<Integer>> entry : traceDictionary.entrySet()) {
1:       String key = entry.getKey();
1:       Set<Integer> value = entry.getValue();
1:       if (!weightMap.containsKey(key)) {
1:         for (Integer where : value) {
1:         weightMap.put(key, v);
1:         for (Integer where : value) {
/////////////////////////////////////////////////////////////////////////
0:     Queue<Weight> pq = new PriorityQueue<Weight>();
1:     for (Map.Entry<String, Vector> entry : weightMap.entrySet()) {
1:       pq.add(new Weight(entry.getKey(), entry.getValue()));
/////////////////////////////////////////////////////////////////////////
1:     private final String feature;
1:     private final double value;
1:     private final int maxIndex;
/////////////////////////////////////////////////////////////////////////
0:       if (r == 0) {
0:       } else {
0:         return r;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:495f736
/////////////////////////////////////////////////////////////////////////
0:       if (r != 0) {
0:       } else {
0:         return o.index - index;
/////////////////////////////////////////////////////////////////////////
0:       Queue<Category> biggest = new PriorityQueue<Category>(n + 1, Ordering.natural());
commit:319fd82
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Probes a model to determine the effect of a particular variable.  This is done
1:    * with the ade of a trace dictionary which has recorded the locations in the feature
1:    * vector that are modified by various variable values.  We can set these locations to
1:    * 1 and then look at the resulting score.  This tells us the weight the model places
1:    * on that variable.
1:    * @param features               A feature vector to use (destructively)
0:    * @param traceDictionary        A trace dictionary containing variables and what locations in the feature vector are affected by them
1:    * @param learner                The model that we are probing to find weights on features
1:    */
1: 
1:     // zero out feature vector
1:       // get a feature and locations where it is stored in the feature vector
1: 
1:       // if we haven't looked at this feature yet
1:         // put probe values in the feature vector
1:         // see what the model says
1:         // and zero out those locations again
1:   /**
1:    * Returns the n most important features with their
1:    * weights, most important category and the top few
1:    * categories that they affect.
1:    * @param n      How many results to return.
1:    * @return       A list of the top variables.
1:    */
/////////////////////////////////////////////////////////////////////////
0:   private static class Category implements Comparable<Category> {
0:     int index;
0:     double weight;
1: 
0:     public Category(int index, double weight) {
1:       this.index = index;
1:       this.weight = weight;
1:     }
1: 
1:     @Override
1:     public int compareTo(Category o) {
1:       int r = Double.compare(Math.abs(weight), Math.abs(o.weight));
0:       if (r != 0) {
0:         return r;
0:       } else {
0:         return index - o.index;
1:       }
1:     }
1:   }
1: 
0:     private List<Category> categories;
1:       this(feature, weights, 3);
1:     }
1: 
1:     public Weight(String feature, Vector weights, int n) {
0:       PriorityQueue<Category> biggest = new PriorityQueue<Category>(n + 1, Ordering.natural().reverse());
0:       for (Vector.Element element : weights) {
1:         biggest.add(new Category(element.index(), element.get()));
1:         while (biggest.size() > n) {
1:           biggest.poll();
1:       }
0:       categories = Lists.newArrayList(biggest);
1:       Collections.sort(categories, Ordering.natural().reverse());
1:       value = categories.get(0).weight;
1:       maxIndex = categories.get(0).index;
/////////////////////////////////////////////////////////////////////////
1:     public double getWeight(int n) {
1:       return categories.get(n).weight;
1:     }
1: 
1:     public double getCategory(int n) {
1:       return categories.get(n).index;
1:     }
1: 
commit:41acc3f
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * The idea is that the hashed encoders have the option of having a trace dictionary.  This
1:  * tells us where each feature is hashed to, or each feature/value combination in the case
1:  * of word-like values.  Using this dictionary, we can put values into a synthetic feature
1:  * vector in just the locations specified by a single feature or interaction.  Then we can
1:  * push this through a linear part of a model to see the contribution of that input. For
1:  * any generalized linear model like logistic regression, there is a linear part of the
1:  * model that allows this.
1:  *
1:  * What the ModelDissector does is to accept a trace dictionary and a model in an update
1:  * method.  It figures out the weights for the elements in the trace dictionary and stashes
1:  * them.  Then in a summary method, the biggest weights are returned.  This update/flush
1:  * style is used so that the trace dictionary doesn't have to grow to enormous levels,
1:  * but instead can be cleared between updates.
commit:af1c02c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.function.BinaryFunction;
0: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1:       // pick out the weight with the largest abs value, but don't forget the sign
0:       value = weights.aggregate(new BinaryFunction() {
1:         @Override
0:         public double apply(double arg1, double arg2) {
0:           int r = Double.compare(Math.abs(arg1), Math.abs(arg2));
0:           if (r < 0) {
0:             return arg2;
0:           } else if (r > 0) {
0:             return arg1;
0:           } else {
0:             return Math.max(arg1, arg2);
1:           }
1:         }
0:       }, Functions.IDENTITY);
1:       int r = Double.compare(Math.abs(this.value), Math.abs(other.value));
commit:e763bdf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:04a4b3d
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
1: import com.google.common.collect.Ordering;
1: import org.apache.mahout.classifier.AbstractVectorClassifier;
0: import org.apache.mahout.math.DenseVector;
0: import org.apache.mahout.math.SparseMatrix;
0: import org.apache.mahout.math.function.Functions;
0: import org.apache.mahout.math.function.UnaryFunction;
0: import org.apache.mahout.math.matrix.GaussSeidel;
0: import java.util.ArrayList;
1: import java.util.Collections;
0: import java.util.Iterator;
1: import java.util.List;
1: import java.util.PriorityQueue;
/////////////////////////////////////////////////////////////////////////
0:   private Map<String,Vector> weightMap;
0:     weightMap = Maps.newHashMap();
1:   public void update(Vector features, Map<String, Set<Integer>> traceDictionary, AbstractVectorClassifier learner) {
1:     features.assign(0);
0:     final int numCategories = learner.numCategories();
0:     for (String feature : traceDictionary.keySet()) {
0:       weightMap = weightMap;
0:       if (!weightMap.containsKey(feature)) {
0:         for (Integer where : traceDictionary.get(feature)) {
1:           features.set(where, 1);
1:         }
1: 
1:         Vector v = learner.classifyNoLink(features);
0:         weightMap.put(feature, v);
1: 
0:         for (Integer where : traceDictionary.get(feature)) {
1:           features.set(where, 0);
1:         }
1:       }
1:   public List<Weight> summary(int n) {
0:     PriorityQueue<Weight> pq = new PriorityQueue<Weight>();
0:     for (String s : weightMap.keySet()) {
0:       pq.add(new Weight(s, weightMap.get(s)));
1:       while (pq.size() > n) {
1:         pq.poll();
1:       }
0:     List<Weight> r = Lists.newArrayList(pq);
1:     Collections.sort(r, Ordering.natural().reverse());
0:     return r;
1:   public static class Weight implements Comparable<Weight> {
0:     private String feature;
0:     private double value;
0:     private int maxIndex;
0:     private Vector weights;
1: 
1:     public Weight(String feature, Vector weights) {
0:       this.weights = weights;
1:       this.feature = feature;
0:       value = weights.norm(1);
0:       maxIndex = weights.maxValueIndex();
1: 
0:     @Override
1:     public int compareTo(Weight other) {
0:       int r = Double.compare(this.value, other.value);
0:       if (r != 0) {
0:         return r;
0:       } else {
1:         return feature.compareTo(other.feature);
1:       }
1:     }
1: 
1:     public String getFeature() {
1:       return feature;
1:     }
1: 
1:     public double getWeight() {
1:       return value;
1:     }
1: 
1:     public int getMaxImpact() {
1:       return maxIndex;
1:     }
commit:1e923ed
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
0: import com.google.common.collect.Maps;
0: import org.apache.mahout.math.Matrix;
0: import org.apache.mahout.math.QRDecomposition;
0: import org.apache.mahout.math.RandomAccessSparseVector;
0: import org.apache.mahout.math.SparseRowMatrix;
1: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.vectors.Dictionary;
1: 
1: import java.util.Map;
1: import java.util.Set;
1: 
1: /**
1:  * Uses sample data to reverse engineer a feature-hashed model.
1:  *
1:  * The result gives approximate weights for features and interactions
1:  * in the original space.
1:  */
1: public class ModelDissector {
0:   int records = 0;
0:   private Dictionary dict;
0:   private Matrix a;
0:   private Matrix b;
1: 
0:   public ModelDissector(int n) {
0:     a = new SparseRowMatrix(new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE}, true);
0:     b = new SparseRowMatrix(new int[]{Integer.MAX_VALUE, n});
1: 
0:     dict.intern("Intercept Value");
1:   }
1: 
0:   public void addExample(Set<String> features, Vector score) {
0:     for (Vector.Element element : score) {
0:       b.set(records, element.index(), element.get());
1:     }
1: 
0:     for (String feature : features) {
0:       int j = dict.intern(feature);
0:       a.set(records, j, 1);
1:     }
0:     records++;
1:   }
1: 
0:   public void addExample(Set<String> features, double score) {
0:     b.set(records, 0, score);
1: 
0:     a.set(records, 0, 1);
0:     for (String feature : features) {
0:       int j = dict.intern(feature);
0:       a.set(records, j, 1);
1:     }
0:     records++;
1:   }
1: 
0:   public Matrix solve() {
0:     Matrix az = a.viewPart(new int[]{0, 0}, new int[]{records, dict.size()});
0:     Matrix bz = b.viewPart(new int[]{0, 0}, new int[]{records, b.columnSize()});
0:     QRDecomposition qr = new QRDecomposition(az.transpose().times(az));
0:     Matrix x = qr.solve(bz);
0:     Map<String, Integer> labels = Maps.newHashMap();
0:     int i = 0;
0:     for (String s : dict.values()) {
0:       labels.put(s, i++);
1:     }
0:     x.setRowLabelBindings(labels);
0:     return x;
1:   }
1: }
============================================================================