1:8396a27: /*
1:8396a27:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8396a27:  * contributor license agreements.  See the NOTICE file distributed with
1:8396a27:  * this work for additional information regarding copyright ownership.
1:8396a27:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8396a27:  * (the "License"); you may not use this file except in compliance with
1:8396a27:  * the License.  You may obtain a copy of the License at
1:8396a27:  *
1:8396a27:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8396a27:  *
1:8396a27:  * Unless required by applicable law or agreed to in writing, software
1:8396a27:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8396a27:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8396a27:  * See the License for the specific language governing permissions and
1:8396a27:  * limitations under the License.
1:8396a27:  */
1:8396a27: 
1:ca9b6d0: package org.apache.mahout.math.set;
1:ca9b6d0: 
1:ca9b6d0: /**
1:ca9b6d0:  * Computes hashes of primitive values.  Providing these as statics allows the templated code
1:ca9b6d0:  * to compute hashes of sets.
1:ca9b6d0:  */
1:10c535c: public final class HashUtils {
1:8396a27: 
1:8396a27:   private HashUtils() {
1:8396a27:   }
1:8396a27: 
1:ca9b6d0:   public static int hash(byte x) {
1:ca9b6d0:     return x;
1:ca9b6d0:   }
1:ca9b6d0: 
1:ca9b6d0:   public static int hash(short x) {
1:ca9b6d0:     return x;
1:ca9b6d0:   }
1:ca9b6d0: 
1:ca9b6d0:   public static int hash(char x) {
1:ca9b6d0:     return x;
1:ca9b6d0:   }
1:ca9b6d0: 
1:ca9b6d0:   public static int hash(int x) {
1:ca9b6d0:     return x;
1:ca9b6d0:   }
1:ca9b6d0: 
1:ca9b6d0:   public static int hash(float x) {
1:ca9b6d0:     return Float.floatToIntBits(x) >>> 3 + Float.floatToIntBits((float) (Math.PI * x));
1:ca9b6d0:   }
1:ca9b6d0: 
1:ca9b6d0:   public static int hash(double x) {
1:ca9b6d0:     return hash(17 * Double.doubleToLongBits(x));
1:ca9b6d0:   }
1:ca9b6d0: 
1:ca9b6d0:   public static int hash(long x) {
1:ca9b6d0:     return (int) ((x * 11) >>> 32 ^ x);
1:ca9b6d0:   }
1:ca9b6d0: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1: public final class HashUtils {
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   private HashUtils() {
1:   }
1: 
author:Ted Dunning
-------------------------------------------------------------------------------
commit:ca9b6d0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.set;
1: 
1: /**
1:  * Computes hashes of primitive values.  Providing these as statics allows the templated code
1:  * to compute hashes of sets.
1:  */
0: public class HashUtils {
1:   public static int hash(byte x) {
1:     return x;
1:   }
1: 
1:   public static int hash(short x) {
1:     return x;
1:   }
1: 
1:   public static int hash(char x) {
1:     return x;
1:   }
1: 
1:   public static int hash(int x) {
1:     return x;
1:   }
1: 
1:   public static int hash(float x) {
1:     return Float.floatToIntBits(x) >>> 3 + Float.floatToIntBits((float) (Math.PI * x));
1:   }
1: 
1:   public static int hash(double x) {
1:     return hash(17 * Double.doubleToLongBits(x));
1:   }
1: 
1:   public static int hash(long x) {
1:     return (int) ((x * 11) >>> 32 ^ x);
1:   }
1: }
============================================================================