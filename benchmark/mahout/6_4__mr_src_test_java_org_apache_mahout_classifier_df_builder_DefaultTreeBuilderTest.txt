1:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c37a84:  * contributor license agreements.  See the NOTICE file distributed with
1:8c37a84:  * this work for additional information regarding copyright ownership.
1:8c37a84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c37a84:  * (the "License"); you may not use this file except in compliance with
1:8c37a84:  * the License.  You may obtain a copy of the License at
1:66f844a:  *
1:8c37a84:  *     http://www.apache.org/licenses/LICENSE-2.0
2:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:8c37a84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c37a84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c37a84:  * See the License for the specific language governing permissions and
1:8c37a84:  * limitations under the License.
1:8c37a84:  */
4:8c37a84: 
1:52ce412: package org.apache.mahout.classifier.df.builder;
1:66f844a: 
1:8c37a84: import java.util.Random;
1:66f844a: import java.util.Arrays;
1:8c37a84: 
1:67a531e: import org.apache.commons.lang3.ArrayUtils;
1:434cdff: import org.apache.mahout.common.MahoutTestCase;
1:8547de7: import org.apache.mahout.common.RandomUtils;
1:ff79ff4: import org.junit.Test;
1:1ffa3a4: @Deprecated
1:ff79ff4: public final class DefaultTreeBuilderTest extends MahoutTestCase {
1:8c37a84: 
1:66f844a:   /**
1:66f844a:    * make sure that DefaultTreeBuilder.randomAttributes() returns the correct number of attributes, that have not been
1:66f844a:    * selected yet
1:66f844a:    */
1:ff79ff4:   @Test
1:8c37a84:   public void testRandomAttributes() throws Exception {
1:8547de7:     Random rng = RandomUtils.getRandom();
1:66f844a:     int nbAttributes = rng.nextInt(100) + 1;
1:66f844a:     boolean[] selected = new boolean[nbAttributes];
1:8c37a84: 
1:66f844a:     for (int nloop = 0; nloop < 100; nloop++) {
1:66f844a:       Arrays.fill(selected, false);
1:8c37a84: 
1:66f844a:       // randomly select some attributes
1:66f844a:       int nbSelected = rng.nextInt(nbAttributes - 1);
1:66f844a:       for (int index = 0; index < nbSelected; index++) {
1:66f844a:         int attr;
1:66f844a:         do {
1:66f844a:           attr = rng.nextInt(nbAttributes);
1:66f844a:         } while (selected[attr]);
1:8c37a84: 
1:66f844a:         selected[attr] = true;
1:66f844a:       }
1:8c37a84: 
1:66f844a:       int m = rng.nextInt(nbAttributes);
1:8c37a84: 
1:66f844a:       int[] attrs = DefaultTreeBuilder.randomAttributes(rng, selected, m);
1:8c37a84: 
1:3a1adb7:       assertNotNull(attrs);
1:66f844a:       assertEquals(Math.min(m, nbAttributes - nbSelected), attrs.length);
1:66f844a: 
1:66f844a:       for (int attr : attrs) {
1:66f844a:         // the attribute should not be already selected
1:66f844a:         assertFalse("an attribute has already been selected", selected[attr]);
1:8c37a84: 
1:8c37a84:         // each attribute should be in the range [0, nbAttributes[
1:8c37a84:         assertTrue(attr >= 0);
1:8c37a84:         assertTrue(attr < nbAttributes);
1:8c37a84: 
1:8c37a84:         // each attribute should appear only once
1:66f844a:         assertEquals(ArrayUtils.indexOf(attrs, attr), ArrayUtils.lastIndexOf(attrs, attr));
1:66f844a:       }
2:8c37a84:     }
1:8c37a84:   }
1:8c37a84: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.ArrayUtils;
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.builder;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:3a1adb7
/////////////////////////////////////////////////////////////////////////
1:       assertNotNull(attrs);
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public final class DefaultTreeBuilderTest extends MahoutTestCase {
1:   @Test
commit:434cdff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
0: public class DefaultTreeBuilderTest extends MahoutTestCase {
commit:acafdc0
/////////////////////////////////////////////////////////////////////////
0:       if (data.getDataset().nbAttributes() == 0)
0:       int m = rng.nextInt(data.getDataset().nbAttributes()) + 1;
0:       int[] attrs = DefaultTreeBuilder.randomAttributes(data.getDataset(), rng, m);
commit:8547de7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1:     Random rng = RandomUtils.getRandom();
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:66f844a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:   @Override
0:   protected void setUp() throws Exception {
0:     RandomUtils.useTestSeed();
1:   }
1: 
1:   /**
1:    * make sure that DefaultTreeBuilder.randomAttributes() returns the correct number of attributes, that have not been
1:    * selected yet
1:    *
0:    * @throws Exception
1:    */
1:     int nbAttributes = rng.nextInt(100) + 1;
1:     boolean[] selected = new boolean[nbAttributes];
1:     for (int nloop = 0; nloop < 100; nloop++) {
1:       Arrays.fill(selected, false);
1:       // randomly select some attributes
1:       int nbSelected = rng.nextInt(nbAttributes - 1);
1:       for (int index = 0; index < nbSelected; index++) {
1:         int attr;
1:         do {
1:           attr = rng.nextInt(nbAttributes);
1:         } while (selected[attr]);
1:         selected[attr] = true;
1:       }
1:       int m = rng.nextInt(nbAttributes);
1:       int[] attrs = DefaultTreeBuilder.randomAttributes(rng, selected, m);
1:       assertEquals(Math.min(m, nbAttributes - nbSelected), attrs.length);
1: 
1:       for (int attr : attrs) {
1:         // the attribute should not be already selected
1:         assertFalse("an attribute has already been selected", selected[attr]);
1:         assertEquals(ArrayUtils.indexOf(attrs, attr), ArrayUtils.lastIndexOf(attrs, attr));
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.builder;
1: 
1: import java.util.Random;
1: 
0: import org.apache.commons.lang.ArrayUtils;
0: import org.apache.mahout.df.builder.DefaultTreeBuilder;
0: import org.apache.mahout.df.data.Data;
0: import org.apache.mahout.df.data.Utils;
1: 
0: import junit.framework.TestCase;
1: 
0: public class DefaultTreeBuilderTest extends TestCase {
1: 
1:   public void testRandomAttributes() throws Exception {
0:     Random rng = new Random();
0:     int maxNbAttributes = 100;
0:     int n = 100;
1: 
0:     for (int nloop = 0; nloop < n; nloop++) {
0:       int nbAttributes = rng.nextInt(maxNbAttributes) + 1;
1: 
0:       // generate a small data, only to get the dataset
0:       Data data = Utils.randomData(rng, nbAttributes, 1);
0:       if (data.dataset.nbAttributes() == 0)
0:         continue;
1: 
0:       int m = rng.nextInt(data.dataset.nbAttributes()) + 1;
1: 
0:       int[] attrs = DefaultTreeBuilder.randomAttributes(data.dataset, rng, m);
1: 
0:       assertEquals(m, attrs.length);
1: 
0:       for (int index = 0; index < m; index++) {
0:         int attr = attrs[index];
1: 
1:         // each attribute should be in the range [0, nbAttributes[
1:         assertTrue(attr >= 0);
1:         assertTrue(attr < nbAttributes);
1: 
1:         // each attribute should appear only once
0:         assertEquals(index, ArrayUtils.lastIndexOf(attrs, attr));
1:       }
1:     }
1:   }
1: }
============================================================================