1:3032e7b: /**
1:3032e7b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3032e7b:  * contributor license agreements.  See the NOTICE file distributed with
1:3032e7b:  * this work for additional information regarding copyright ownership.
1:3032e7b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3032e7b:  * (the "License"); you may not use this file except in compliance with
1:3032e7b:  * the License.  You may obtain a copy of the License at
1:3032e7b:  *
1:3032e7b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3032e7b:  *
1:3032e7b:  * Unless required by applicable law or agreed to in writing, software
1:3032e7b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3032e7b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3032e7b:  * See the License for the specific language governing permissions and
1:3032e7b:  * limitations under the License.
1:3032e7b:  */
1:3032e7b: 
1:3032e7b: package org.apache.mahout.math;
1:3032e7b: 
1:0b564c7: import org.apache.mahout.math.flavor.BackEnum;
1:0b564c7: import org.apache.mahout.math.flavor.MatrixFlavor;
1:0b564c7: import org.apache.mahout.math.flavor.TraversingStructureEnum;
1:3032e7b: import org.apache.mahout.math.function.IntIntFunction;
1:3032e7b: 
1:3032e7b: /**
1:3032e7b:  * Matrix View backed by an {@link IntIntFunction}
1:3032e7b:  */
1:3032e7b: class FunctionalMatrixView extends AbstractMatrix {
1:3032e7b: 
1:3032e7b:   /**
1:3032e7b:    * view generator function
1:3032e7b:    */
1:3032e7b:   private IntIntFunction gf;
1:3032e7b:   private boolean denseLike;
1:0b564c7:   private MatrixFlavor flavor;
1:3032e7b: 
1:3032e7b:   public FunctionalMatrixView(int rows, int columns, IntIntFunction gf) {
1:3032e7b:     this(rows, columns, gf, false);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   /**
1:3032e7b:    * @param gf        generator function
1:3032e7b:    * @param denseLike whether like() should create Dense or Sparse matrix.
1:3032e7b:    */
1:3032e7b:   public FunctionalMatrixView(int rows, int columns, IntIntFunction gf, boolean denseLike) {
1:3032e7b:     super(rows, columns);
1:3032e7b:     this.gf = gf;
1:3032e7b:     this.denseLike = denseLike;
1:0b564c7:     flavor = new MatrixFlavor.FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.BLOCKIFIED, denseLike);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   @Override
1:3032e7b:   public Matrix assignColumn(int column, Vector other) {
1:3032e7b:     throw new UnsupportedOperationException("Assignment to a matrix not supported");
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   @Override
1:3032e7b:   public Matrix assignRow(int row, Vector other) {
1:3032e7b:     throw new UnsupportedOperationException("Assignment to a matrix view not supported");
1:3032e7b:   }
1:3032e7b: 
1:907781b:   @Override
1:3032e7b:   public double getQuick(int row, int column) {
1:3032e7b:     return gf.apply(row, column);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   @Override
1:3032e7b:   public Matrix like() {
1:3032e7b:     return like(rows, columns);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   @Override
1:3032e7b:   public Matrix like(int rows, int columns) {
1:3032e7b:     if (denseLike)
1:3032e7b:       return new DenseMatrix(rows, columns);
1:3032e7b:     else
1:3032e7b:       return new SparseMatrix(rows, columns);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   @Override
1:3032e7b:   public void setQuick(int row, int column, double value) {
1:3032e7b:     throw new UnsupportedOperationException("Assignment to a matrix view not supported");
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   @Override
1:907781b:   public Vector viewRow(int row) {
1:907781b:     return new MatrixVectorView(this, row, 0, 0, 1, denseLike);
1:907781b:   }
1:3032e7b: 
1:907781b:   @Override
1:907781b:   public Vector viewColumn(int column) {
1:907781b:     return new MatrixVectorView(this, 0, column, 1, 0, denseLike);
1:907781b:   }
1:8be44ab: 
1:0b564c7:   @Override
1:0b564c7:   public MatrixFlavor getFlavor() {
1:0b564c7:     return flavor;
1:0b564c7:   }
1:3032e7b: }
============================================================================
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:0b564c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.flavor.BackEnum;
1: import org.apache.mahout.math.flavor.MatrixFlavor;
1: import org.apache.mahout.math.flavor.TraversingStructureEnum;
/////////////////////////////////////////////////////////////////////////
1:   private MatrixFlavor flavor;
/////////////////////////////////////////////////////////////////////////
1:     flavor = new MatrixFlavor.FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.BLOCKIFIED, denseLike);
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public MatrixFlavor getFlavor() {
1:     return flavor;
1:   }
commit:907781b
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public Vector viewRow(int row) {
1:     return new MatrixVectorView(this, row, 0, 0, 1, denseLike);
1:   }
1:   @Override
1:   public Vector viewColumn(int column) {
1:     return new MatrixVectorView(this, 0, column, 1, 0, denseLike);
1:   }
commit:3032e7b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.math.function.IntIntFunction;
1: 
1: /**
1:  * Matrix View backed by an {@link IntIntFunction}
1:  */
1: class FunctionalMatrixView extends AbstractMatrix {
1: 
1:   /**
1:    * view generator function
1:    */
1:   private IntIntFunction gf;
1:   private boolean denseLike;
1: 
1:   public FunctionalMatrixView(int rows, int columns, IntIntFunction gf) {
1:     this(rows, columns, gf, false);
1:   }
1: 
1:   /**
1:    * @param gf        generator function
1:    * @param denseLike whether like() should create Dense or Sparse matrix.
1:    */
1:   public FunctionalMatrixView(int rows, int columns, IntIntFunction gf, boolean denseLike) {
1:     super(rows, columns);
1:     this.gf = gf;
1:     this.denseLike = denseLike;
1:   }
1: 
1:   @Override
1:   public Matrix assignColumn(int column, Vector other) {
1:     throw new UnsupportedOperationException("Assignment to a matrix not supported");
1:   }
1: 
1:   @Override
1:   public Matrix assignRow(int row, Vector other) {
1:     throw new UnsupportedOperationException("Assignment to a matrix view not supported");
1:   }
1: 
1:   @Override
1:   public double getQuick(int row, int column) {
1:     return gf.apply(row, column);
1:   }
1: 
1:   @Override
1:   public Matrix like() {
1:     return like(rows, columns);
1:   }
1: 
1:   @Override
1:   public Matrix like(int rows, int columns) {
1:     if (denseLike)
1:       return new DenseMatrix(rows, columns);
1:     else
1:       return new SparseMatrix(rows, columns);
1:   }
1: 
1:   @Override
1:   public void setQuick(int row, int column, double value) {
1:     throw new UnsupportedOperationException("Assignment to a matrix view not supported");
1:   }
1: 
1: 
1: }
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:6a3f93e
/////////////////////////////////////////////////////////////////////////
commit:8be44ab
/////////////////////////////////////////////////////////////////////////
1: 
0:   @Override
0:   public String toString(){
0:     return "org.apache.mahout.math.FunctionalMatrixView";
0:   }
============================================================================