1:151de0d: /**
1:151de0d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:151de0d:  * contributor license agreements.  See the NOTICE file distributed with
1:151de0d:  * this work for additional information regarding copyright ownership.
1:151de0d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:151de0d:  * (the "License"); you may not use this file except in compliance with
1:151de0d:  * the License.  You may obtain a copy of the License at
3:151de0d:  *
1:151de0d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:151de0d:  *
1:151de0d:  * Unless required by applicable law or agreed to in writing, software
1:151de0d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:151de0d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:151de0d:  * See the License for the specific language governing permissions and
1:151de0d:  * limitations under the License.
1:151de0d:  */
1:151de0d: package org.apache.mahout.math.hadoop.stochasticsvd;
2:151de0d: 
1:151de0d: import java.io.DataInput;
1:151de0d: import java.io.DataOutput;
1:151de0d: import java.io.IOException;
1:151de0d: import java.util.Arrays;
1:151de0d: 
1:151de0d: import org.apache.hadoop.io.Writable;
1:151de0d: 
1:151de0d: /**
1:5a2250c:  * Ad-hoc substitution for {@link org.apache.mahout.math.MatrixWritable}.
1:5a2250c:  * Perhaps more useful for situations with mostly dense data (such as Q-blocks)
1:5a2250c:  * but reduces GC by reusing the same block memory between loads and writes.
1:5a2250c:  * <p>
1:151de0d:  * 
1:5a2250c:  * in case of Q blocks, it doesn't even matter if they this data is dense cause
1:151de0d:  * we need to unpack it into dense for fast access in computations anyway and
1:151de0d:  * even if it is not so dense the block compressor in sequence files will take
1:5a2250c:  * care of it for the serialized size.
1:5a2250c:  * <p>
1:151de0d:  */
1:151de0d: public class DenseBlockWritable implements Writable {
1:b16c260:   private double[][] block;
1:151de0d: 
1:151de0d:   public void setBlock(double[][] block) {
1:151de0d:     this.block = block;
2:151de0d:   }
1:151de0d: 
1:151de0d:   public double[][] getBlock() {
1:151de0d:     return block;
1:151de0d:   }
1:151de0d: 
1:151de0d:   @Override
1:151de0d:   public void readFields(DataInput in) throws IOException {
1:151de0d:     int m = in.readInt();
1:151de0d:     int n = in.readInt();
1:b16c260:     if (block == null) {
1:151de0d:       block = new double[m][0];
1:b16c260:     } else if (block.length != m) {
1:151de0d:       block = Arrays.copyOf(block, m);
1:b16c260:     }
1:b16c260:     for (int i = 0; i < m; i++) {
1:b16c260:       if (block[i] == null || block[i].length != n) {
1:151de0d:         block[i] = new double[n];
1:b16c260:       }
1:b16c260:       for (int j = 0; j < n; j++) {
1:151de0d:         block[i][j] = in.readDouble();
1:b16c260:       }
1:151de0d: 
1:151de0d:     }
1:151de0d:   }
1:151de0d: 
1:151de0d:   @Override
1:151de0d:   public void write(DataOutput out) throws IOException {
1:151de0d:     int m = block.length;
1:151de0d:     int n = block.length == 0 ? 0 : block[0].length;
1:151de0d: 
1:151de0d:     out.writeInt(m);
1:151de0d:     out.writeInt(n);
1:229aeff:     for (double[] aBlock : block) {
1:b16c260:       for (int j = 0; j < n; j++) {
1:229aeff:         out.writeDouble(aBlock[j]);
1:b16c260:       }
1:b16c260:     }
1:151de0d:   }
1:151de0d: 
1:151de0d: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:     for (double[] aBlock : block) {
1:         out.writeDouble(aBlock[j]);
commit:3218e95
/////////////////////////////////////////////////////////////////////////
0:  * <p></p>Ad-hoc substitution for {@link org.apache.mahout.math.MatrixWritable}. Perhaps more useful for
0:  * reusing the same block memory between loads and writes.</p>
0:  * <p></p>in case of Q blocks, it doesn't even matter if they this data is dense cause
0:  * care of it for the serialized size.</p>
commit:b16c260
/////////////////////////////////////////////////////////////////////////
1:   private double[][] block;
/////////////////////////////////////////////////////////////////////////
1:     if (block == null) {
1:     } else if (block.length != m) {
1:     }
1:       if (block[i] == null || block[i].length != n) {
1:       }
1:       for (int j = 0; j < n; j++) {
1:       }
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < m; i++) {
1:       for (int j = 0; j < n; j++) {
1:       }
1:     }
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:5a2250c
/////////////////////////////////////////////////////////////////////////
1:  * Ad-hoc substitution for {@link org.apache.mahout.math.MatrixWritable}.
1:  * Perhaps more useful for situations with mostly dense data (such as Q-blocks)
1:  * but reduces GC by reusing the same block memory between loads and writes.
1:  * <p>
1:  * in case of Q blocks, it doesn't even matter if they this data is dense cause
1:  * care of it for the serialized size.
1:  * <p>
commit:151de0d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.math.hadoop.stochasticsvd;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.Arrays;
1: 
1: import org.apache.hadoop.io.Writable;
0: import org.apache.mahout.math.MatrixWritable;
1: 
1: /**
0:  * Ad-hoc substitution for {@link MatrixWritable}. Perhaps more useful for
0:  * situations with mostly dense data (such as Q-blocks) but reduces GC by
0:  * reusing the same block memory between loads and writes.
0:  * <p>
1:  * 
0:  * in case of Q blocks, it doesn't even matter if they this data is dense cause
1:  * we need to unpack it into dense for fast access in computations anyway and
1:  * even if it is not so dense the block compressor in sequence files will take
0:  * care of it for the serialized size.
0:  * <P>
1:  * 
1:  * 
1:  */
1: public class DenseBlockWritable implements Writable {
0:   double[][] block;
1: 
0:   public DenseBlockWritable() {
0:     super();
1:   }
1: 
1:   public void setBlock(double[][] block) {
1:     this.block = block;
1:   }
1: 
1:   public double[][] getBlock() {
1:     return block;
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     int m = in.readInt();
1:     int n = in.readInt();
0:     if (block == null)
1:       block = new double[m][0];
0:     else if (block.length != m)
1:       block = Arrays.copyOf(block, m);
0:     for (int i = 0; i < m; i++) {
0:       if (block[i] == null || block[i].length != n)
1:         block[i] = new double[n];
0:       for (int j = 0; j < n; j++)
1:         block[i][j] = in.readDouble();
1: 
1:     }
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     int m = block.length;
1:     int n = block.length == 0 ? 0 : block[0].length;
1: 
1:     out.writeInt(m);
1:     out.writeInt(n);
0:     for (int i = 0; i < m; i++)
0:       for (int j = 0; j < n; j++)
0:         out.writeDouble(block[i][j]);
1:   }
1: 
1: }
============================================================================