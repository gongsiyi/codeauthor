1:335a993: /*
1:335a993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:335a993:  * contributor license agreements.  See the NOTICE file distributed with
1:335a993:  * this work for additional information regarding copyright ownership.
1:335a993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:335a993:  * (the "License"); you may not use this file except in compliance with
1:335a993:  * the License.  You may obtain a copy of the License at
1:335a993:  *
1:335a993:  *     http://www.apache.org/licenses/LICENSE-2.0
1:335a993:  *
1:335a993:  * Unless required by applicable law or agreed to in writing, software
1:335a993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:335a993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:335a993:  * See the License for the specific language governing permissions and
1:335a993:  * limitations under the License.
1:335a993:  */
1:335a993: 
1:1d6dc49: package org.apache.mahout.clustering.streaming.mapreduce;
3:1d6dc49: 
1:1d6dc49: import java.io.IOException;
1:1d6dc49: 
1:1d6dc49: import com.google.common.base.Function;
1:1d6dc49: import com.google.common.base.Preconditions;
1:1d6dc49: import com.google.common.collect.Iterables;
1:1d6dc49: import org.apache.hadoop.conf.Configuration;
1:1d6dc49: import org.apache.hadoop.fs.FileSystem;
1:1d6dc49: import org.apache.hadoop.fs.Path;
1:1d6dc49: import org.apache.hadoop.io.IntWritable;
1:1d6dc49: import org.apache.hadoop.io.SequenceFile;
1:1d6dc49: import org.apache.mahout.common.ClassUtils;
1:1d6dc49: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1:1d6dc49: import org.apache.mahout.common.distance.DistanceMeasure;
1:1d6dc49: import org.apache.mahout.math.Centroid;
1:1d6dc49: import org.apache.mahout.math.RandomAccessSparseVector;
1:1d6dc49: import org.apache.mahout.math.Vector;
1:1d6dc49: import org.apache.mahout.math.VectorWritable;
1:1d6dc49: import org.apache.mahout.math.neighborhood.BruteSearch;
1:1d6dc49: import org.apache.mahout.math.neighborhood.FastProjectionSearch;
1:ec9035c: import org.apache.mahout.math.neighborhood.LocalitySensitiveHashSearch;
1:1d6dc49: import org.apache.mahout.math.neighborhood.ProjectionSearch;
1:1d6dc49: import org.apache.mahout.math.neighborhood.UpdatableSearcher;
1:4ca6b86: 
1:335a993: public final class StreamingKMeansUtilsMR {
1:335a993: 
1:335a993:   private StreamingKMeansUtilsMR() {
1:335a993:   }
1:1d6dc49: 
1:1d6dc49:   /**
1:1d6dc49:    * Instantiates a searcher from a given configuration.
1:1d6dc49:    * @param conf the configuration
1:1d6dc49:    * @return the instantiated searcher
1:1d6dc49:    * @throws RuntimeException if the distance measure class cannot be instantiated
1:1d6dc49:    * @throws IllegalStateException if an unknown searcher class was requested
1:1d6dc49:    */
1:1d6dc49:   public static UpdatableSearcher searcherFromConfiguration(Configuration conf) {
1:1d6dc49:     DistanceMeasure distanceMeasure;
1:1d6dc49:     String distanceMeasureClass = conf.get(DefaultOptionCreator.DISTANCE_MEASURE_OPTION);
3:1d6dc49:     try {
1:335a993:       distanceMeasure = (DistanceMeasure) Class.forName(distanceMeasureClass).getConstructor().newInstance();
1:1d6dc49:     } catch (Exception e) {
1:1d6dc49:       throw new RuntimeException("Failed to instantiate distanceMeasure", e);
1:4ca6b86:     }
1:1d6dc49: 
1:1d6dc49:     int numProjections =  conf.getInt(StreamingKMeansDriver.NUM_PROJECTIONS_OPTION, 20);
1:1d6dc49:     int searchSize =  conf.getInt(StreamingKMeansDriver.SEARCH_SIZE_OPTION, 10);
1:1d6dc49: 
1:1d6dc49:     String searcherClass = conf.get(StreamingKMeansDriver.SEARCHER_CLASS_OPTION);
1:1d6dc49: 
1:1d6dc49:     if (searcherClass.equals(BruteSearch.class.getName())) {
1:1d6dc49:       return ClassUtils.instantiateAs(searcherClass, UpdatableSearcher.class,
1:1d6dc49:           new Class[]{DistanceMeasure.class}, new Object[]{distanceMeasure});
1:58cc1ae:     } else if (searcherClass.equals(FastProjectionSearch.class.getName())
1:58cc1ae:         || searcherClass.equals(ProjectionSearch.class.getName())) {
1:1d6dc49:       return ClassUtils.instantiateAs(searcherClass, UpdatableSearcher.class,
1:1d6dc49:           new Class[]{DistanceMeasure.class, int.class, int.class},
1:1d6dc49:           new Object[]{distanceMeasure, numProjections, searchSize});
1:ec9035c:     } else if (searcherClass.equals(LocalitySensitiveHashSearch.class.getName())) {
1:ec9035c:       return ClassUtils.instantiateAs(searcherClass, LocalitySensitiveHashSearch.class,
1:ec9035c:           new Class[]{DistanceMeasure.class, int.class},
1:ec9035c:           new Object[]{distanceMeasure, searchSize});
1:1d6dc49:     } else {
1:1d6dc49:       throw new IllegalStateException("Unknown class instantiation requested");
2:1d6dc49:     }
1:1d6dc49:   }
1:1d6dc49: 
1:1d6dc49:   /**
1:1d6dc49:    * Returns an Iterable of centroids from an Iterable of VectorWritables by creating a new Centroid containing
1:1d6dc49:    * a RandomAccessSparseVector as a delegate for each VectorWritable.
1:1d6dc49:    * @param inputIterable VectorWritable Iterable to get Centroids from
1:1d6dc49:    * @return the new Centroids
1:1d6dc49:    */
1:1d6dc49:   public static Iterable<Centroid> getCentroidsFromVectorWritable(Iterable<VectorWritable> inputIterable) {
1:1d6dc49:     return Iterables.transform(inputIterable, new Function<VectorWritable, Centroid>() {
1:335a993:       private int numVectors = 0;
1:1d6dc49:       @Override
1:1d6dc49:       public Centroid apply(VectorWritable input) {
1:1d6dc49:         Preconditions.checkNotNull(input);
1:1d6dc49:         return new Centroid(numVectors++, new RandomAccessSparseVector(input.get()), 1);
1:1d6dc49:       }
1:1d6dc49:     });
1:1d6dc49:   }
1:1d6dc49: 
1:1d6dc49:   /**
1:1d6dc49:    * Returns an Iterable of Centroid from an Iterable of Vector by either casting each Vector to Centroid (if the
1:1d6dc49:    * instance extends Centroid) or create a new Centroid based on that Vector.
1:1d6dc49:    * The implicit expectation is that the input will not have interleaving types of vectors. Otherwise, the numbering
1:1d6dc49:    * of new Centroids will become invalid.
1:1d6dc49:    * @param input Iterable of Vectors to cast
1:1d6dc49:    * @return the new Centroids
1:1d6dc49:    */
1:335a993:   public static Iterable<Centroid> castVectorsToCentroids(Iterable<Vector> input) {
1:1d6dc49:     return Iterables.transform(input, new Function<Vector, Centroid>() {
1:1d6dc49:       private int numVectors = 0;
1:1d6dc49:       @Override
1:1d6dc49:       public Centroid apply(Vector input) {
1:1d6dc49:         Preconditions.checkNotNull(input);
1:1d6dc49:         if (input instanceof Centroid) {
1:1d6dc49:           return (Centroid) input;
1:1d6dc49:         } else {
1:1d6dc49:           return new Centroid(numVectors++, input, 1);
1:1d6dc49:         }
1:1d6dc49:       }
1:1d6dc49:     });
1:1d6dc49:   }
1:1d6dc49: 
1:1d6dc49:   /**
1:1d6dc49:    * Writes centroids to a sequence file.
1:1d6dc49:    * @param centroids the centroids to write.
1:1d6dc49:    * @param path the path of the output file.
1:1d6dc49:    * @param conf the configuration for the HDFS to write the file to.
1:1d6dc49:    * @throws java.io.IOException
1:1d6dc49:    */
1:1d6dc49:   public static void writeCentroidsToSequenceFile(Iterable<Centroid> centroids, Path path, Configuration conf)
1:1d6dc49:     throws IOException {
1:85f9ece:     try (SequenceFile.Writer writer = SequenceFile.createWriter(FileSystem.get(conf), conf,
1:85f9ece:         path, IntWritable.class, CentroidWritable.class)) {
1:1d6dc49:       int i = 0;
1:1d6dc49:       for (Centroid centroid : centroids) {
1:1d6dc49:         writer.append(new IntWritable(i++), new CentroidWritable(centroid));
1:1d6dc49:       }
1:1d6dc49:     }
1:1d6dc49:   }
1:1d6dc49: 
1:1d6dc49:   public static void writeVectorsToSequenceFile(Iterable<? extends Vector> datapoints, Path path, Configuration conf)
1:1d6dc49:     throws IOException {
1:85f9ece:     try (SequenceFile.Writer writer = SequenceFile.createWriter(FileSystem.get(conf), conf,
1:85f9ece:         path, IntWritable.class, VectorWritable.class)){
1:1d6dc49:       int i = 0;
1:1d6dc49:       for (Vector vector : datapoints) {
1:1d6dc49:         writer.append(new IntWritable(i++), new VectorWritable(vector));
1:1d6dc49:       }
1:1d6dc49:     }
1:1d6dc49:   }
1:1d6dc49: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     try (SequenceFile.Writer writer = SequenceFile.createWriter(FileSystem.get(conf), conf,
1:         path, IntWritable.class, CentroidWritable.class)) {
1:     try (SequenceFile.Writer writer = SequenceFile.createWriter(FileSystem.get(conf), conf,
1:         path, IntWritable.class, VectorWritable.class)){
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:335a993
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: public final class StreamingKMeansUtilsMR {
1: 
1:   private StreamingKMeansUtilsMR() {
1:   }
/////////////////////////////////////////////////////////////////////////
1:       distanceMeasure = (DistanceMeasure) Class.forName(distanceMeasureClass).getConstructor().newInstance();
/////////////////////////////////////////////////////////////////////////
1:       private int numVectors = 0;
/////////////////////////////////////////////////////////////////////////
1:   public static Iterable<Centroid> castVectorsToCentroids(Iterable<Vector> input) {
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
0: public final class StreamingKMeansUtilsMR {
1: 
0:   private StreamingKMeansUtilsMR() {
1:   }
/////////////////////////////////////////////////////////////////////////
0:       distanceMeasure = (DistanceMeasure)Class.forName(distanceMeasureClass).getConstructor().newInstance();
/////////////////////////////////////////////////////////////////////////
0:   public static Iterable<Centroid> castVectorsToCentroids(Iterable<Vector> input) {
author:dfilimon
-------------------------------------------------------------------------------
commit:6b6b8a0
/////////////////////////////////////////////////////////////////////////
0: public class StreamingKMeansUtilsMR {
/////////////////////////////////////////////////////////////////////////
0:       distanceMeasure = (DistanceMeasure)Class.forName(distanceMeasureClass).newInstance();
/////////////////////////////////////////////////////////////////////////
0:   public static Iterable<Centroid> castVectorsToCentroids(final Iterable<Vector> input) {
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, true);
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, true);
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
commit:ec9035c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.neighborhood.LocalitySensitiveHashSearch;
/////////////////////////////////////////////////////////////////////////
1:     } else if (searcherClass.equals(LocalitySensitiveHashSearch.class.getName())) {
1:       return ClassUtils.instantiateAs(searcherClass, LocalitySensitiveHashSearch.class,
1:           new Class[]{DistanceMeasure.class, int.class},
1:           new Object[]{distanceMeasure, searchSize});
commit:1d6dc49
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.streaming.mapreduce;
1: 
1: import java.io.IOException;
1: 
1: import com.google.common.base.Function;
1: import com.google.common.base.Preconditions;
1: import com.google.common.collect.Iterables;
0: import com.google.common.io.Closeables;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.mahout.common.ClassUtils;
1: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.Centroid;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.neighborhood.BruteSearch;
1: import org.apache.mahout.math.neighborhood.FastProjectionSearch;
1: import org.apache.mahout.math.neighborhood.ProjectionSearch;
1: import org.apache.mahout.math.neighborhood.UpdatableSearcher;
1: 
0: public class StreamingKMeansUtilsMR {
1: 
1:   /**
1:    * Instantiates a searcher from a given configuration.
1:    * @param conf the configuration
1:    * @return the instantiated searcher
1:    * @throws RuntimeException if the distance measure class cannot be instantiated
1:    * @throws IllegalStateException if an unknown searcher class was requested
1:    */
1:   public static UpdatableSearcher searcherFromConfiguration(Configuration conf) {
1:     DistanceMeasure distanceMeasure;
1:     String distanceMeasureClass = conf.get(DefaultOptionCreator.DISTANCE_MEASURE_OPTION);
1:     try {
0:       distanceMeasure = (DistanceMeasure)Class.forName(distanceMeasureClass).newInstance();
1:     } catch (Exception e) {
1:       throw new RuntimeException("Failed to instantiate distanceMeasure", e);
1:     }
1: 
1:     int numProjections =  conf.getInt(StreamingKMeansDriver.NUM_PROJECTIONS_OPTION, 20);
1:     int searchSize =  conf.getInt(StreamingKMeansDriver.SEARCH_SIZE_OPTION, 10);
1: 
1:     String searcherClass = conf.get(StreamingKMeansDriver.SEARCHER_CLASS_OPTION);
1: 
1:     if (searcherClass.equals(BruteSearch.class.getName())) {
1:       return ClassUtils.instantiateAs(searcherClass, UpdatableSearcher.class,
1:           new Class[]{DistanceMeasure.class}, new Object[]{distanceMeasure});
0:     } else if (searcherClass.equals(FastProjectionSearch.class.getName()) ||
0:         searcherClass.equals(ProjectionSearch.class.getName())) {
1:       return ClassUtils.instantiateAs(searcherClass, UpdatableSearcher.class,
1:           new Class[]{DistanceMeasure.class, int.class, int.class},
1:           new Object[]{distanceMeasure, numProjections, searchSize});
1:     } else {
1:       throw new IllegalStateException("Unknown class instantiation requested");
1:     }
1:   }
1: 
1:   /**
1:    * Returns an Iterable of centroids from an Iterable of VectorWritables by creating a new Centroid containing
1:    * a RandomAccessSparseVector as a delegate for each VectorWritable.
1:    * @param inputIterable VectorWritable Iterable to get Centroids from
1:    * @return the new Centroids
1:    */
1:   public static Iterable<Centroid> getCentroidsFromVectorWritable(Iterable<VectorWritable> inputIterable) {
1:     return Iterables.transform(inputIterable, new Function<VectorWritable, Centroid>() {
0:       int numVectors = 0;
1: 
1:       @Override
1:       public Centroid apply(VectorWritable input) {
1:         Preconditions.checkNotNull(input);
1:         return new Centroid(numVectors++, new RandomAccessSparseVector(input.get()), 1);
1:       }
1:     });
1:   }
1: 
1:   /**
1:    * Returns an Iterable of Centroid from an Iterable of Vector by either casting each Vector to Centroid (if the
1:    * instance extends Centroid) or create a new Centroid based on that Vector.
1:    * The implicit expectation is that the input will not have interleaving types of vectors. Otherwise, the numbering
1:    * of new Centroids will become invalid.
1:    * @param input Iterable of Vectors to cast
1:    * @return the new Centroids
1:    */
0:   public static Iterable<Centroid> castVectorsToCentroids(final Iterable<Vector> input) {
1:     return Iterables.transform(input, new Function<Vector, Centroid>() {
1:       private int numVectors = 0;
1:       @Override
1:       public Centroid apply(Vector input) {
1:         Preconditions.checkNotNull(input);
1:         if (input instanceof Centroid) {
1:           return (Centroid) input;
1:         } else {
1:           return new Centroid(numVectors++, input, 1);
1:         }
1:       }
1:     });
1:   }
1: 
1:   /**
1:    * Writes centroids to a sequence file.
1:    * @param centroids the centroids to write.
1:    * @param path the path of the output file.
1:    * @param conf the configuration for the HDFS to write the file to.
1:    * @throws java.io.IOException
1:    */
1:   public static void writeCentroidsToSequenceFile(Iterable<Centroid> centroids, Path path, Configuration conf)
1:       throws IOException {
0:     SequenceFile.Writer writer = null;
1:     try {
0:       writer = SequenceFile.createWriter(FileSystem.get(conf), conf,
0:           path, IntWritable.class, CentroidWritable.class);
1:       int i = 0;
1:       for (Centroid centroid : centroids) {
1:         writer.append(new IntWritable(i++), new CentroidWritable(centroid));
1:       }
0:     } finally {
0:       Closeables.close(writer, true);
1:     }
1:   }
1: 
1:   public static void writeVectorsToSequenceFile(Iterable<? extends Vector> datapoints, Path path, Configuration conf)
1:       throws IOException {
0:     SequenceFile.Writer writer = null;
1:     try {
0:       writer = SequenceFile.createWriter(FileSystem.get(conf), conf,
0:           path, IntWritable.class, VectorWritable.class);
1:       int i = 0;
1:       for (Vector vector : datapoints) {
1:         writer.append(new IntWritable(i++), new VectorWritable(vector));
1:       }
0:     } finally {
0:       Closeables.close(writer, true);
1:     }
1:   }
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1:     } else if (searcherClass.equals(FastProjectionSearch.class.getName())
1:         || searcherClass.equals(ProjectionSearch.class.getName())) {
/////////////////////////////////////////////////////////////////////////
0:     throws IOException {
/////////////////////////////////////////////////////////////////////////
0:     throws IOException {
============================================================================