1:a13b4b7: /**
1:a13b4b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a13b4b7:  * contributor license agreements.  See the NOTICE file distributed with
1:a13b4b7:  * this work for additional information regarding copyright ownership.
1:a13b4b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a13b4b7:  * (the "License"); you may not use this file except in compliance with
1:a13b4b7:  * the License.  You may obtain a copy of the License at
1:a13b4b7:  *
1:a13b4b7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a13b4b7:  *
1:a13b4b7:  * Unless required by applicable law or agreed to in writing, software
1:a13b4b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a13b4b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a13b4b7:  * See the License for the specific language governing permissions and
1:a13b4b7:  * limitations under the License.
1:a13b4b7:  */
1:a13b4b7: 
1:a13b4b7: package org.apache.mahout.common.iterator.sequencefile;
1:a13b4b7: 
1:a13b4b7: import java.io.IOException;
1:a13b4b7: import java.util.Iterator;
1:a13b4b7: 
1:a13b4b7: import org.apache.hadoop.conf.Configuration;
1:a13b4b7: import org.apache.hadoop.fs.Path;
1:a13b4b7: import org.apache.hadoop.io.Writable;
1:a13b4b7: import org.apache.mahout.common.Pair;
1:a13b4b7: 
1:a13b4b7: /**
1:a13b4b7:  * <p>{@link Iterable} counterpart to {@link SequenceFileIterator}.</p>
1:a13b4b7:  */
1:a13b4b7: public final class SequenceFileIterable<K extends Writable,V extends Writable> implements Iterable<Pair<K,V>> {
1:a13b4b7: 
1:a13b4b7:   private final Path path;
1:a13b4b7:   private final boolean reuseKeyValueInstances;
1:a13b4b7:   private final Configuration conf;
1:a13b4b7: 
1:a13b4b7:   /**
1:a13b4b7:    * Like {@link #SequenceFileIterable(Path, boolean, Configuration)} but key and value instances are not reused
1:a13b4b7:    * by default.
1:a13b4b7:    *
1:a13b4b7:    * @param path file to iterate over
1:a13b4b7:    */
1:a13b4b7:   public SequenceFileIterable(Path path, Configuration conf) {
1:a13b4b7:     this(path, false, conf);
1:a13b4b7:   }
1:a13b4b7: 
1:a13b4b7:   /**
1:a13b4b7:    * @param path file to iterate over
1:a13b4b7:    * @param reuseKeyValueInstances if true, reuses instances of the key and value object instead of creating a new
1:a13b4b7:    *  one for each read from the file
1:a13b4b7:    */
1:a13b4b7:   public SequenceFileIterable(Path path, boolean reuseKeyValueInstances, Configuration conf) {
1:a13b4b7:     this.path = path;
1:a13b4b7:     this.reuseKeyValueInstances = reuseKeyValueInstances;
1:a13b4b7:     this.conf = conf;
1:a13b4b7:   }
1:a13b4b7: 
1:a13b4b7:   @Override
1:a13b4b7:   public Iterator<Pair<K, V>> iterator() {
1:a13b4b7:     try {
1:87c15be:       return new SequenceFileIterator<>(path, reuseKeyValueInstances, conf);
1:a13b4b7:     } catch (IOException ioe) {
1:9101588:       throw new IllegalStateException(path.toString(), ioe);
1:a13b4b7:     }
1:a13b4b7:   }
1:a13b4b7: 
1:a13b4b7: }
1:a13b4b7: 
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:       return new SequenceFileIterator<>(path, reuseKeyValueInstances, conf);
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:9101588
/////////////////////////////////////////////////////////////////////////
1:       throw new IllegalStateException(path.toString(), ioe);
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.iterator.sequencefile;
1: 
1: import java.io.IOException;
1: import java.util.Iterator;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.common.Pair;
1: 
1: /**
1:  * <p>{@link Iterable} counterpart to {@link SequenceFileIterator}.</p>
1:  */
1: public final class SequenceFileIterable<K extends Writable,V extends Writable> implements Iterable<Pair<K,V>> {
1: 
1:   private final Path path;
1:   private final boolean reuseKeyValueInstances;
1:   private final Configuration conf;
1: 
1:   /**
1:    * Like {@link #SequenceFileIterable(Path, boolean, Configuration)} but key and value instances are not reused
1:    * by default.
1:    *
1:    * @param path file to iterate over
1:    */
1:   public SequenceFileIterable(Path path, Configuration conf) {
1:     this(path, false, conf);
1:   }
1: 
1:   /**
1:    * @param path file to iterate over
1:    * @param reuseKeyValueInstances if true, reuses instances of the key and value object instead of creating a new
1:    *  one for each read from the file
1:    */
1:   public SequenceFileIterable(Path path, boolean reuseKeyValueInstances, Configuration conf) {
1:     this.path = path;
1:     this.reuseKeyValueInstances = reuseKeyValueInstances;
1:     this.conf = conf;
1:   }
1: 
1:   @Override
1:   public Iterator<Pair<K, V>> iterator() {
1:     try {
0:       return new SequenceFileIterator<K, V>(path, reuseKeyValueInstances, conf);
1:     } catch (IOException ioe) {
0:       throw new IllegalStateException(ioe);
1:     }
1:   }
1: 
1: }
1: 
============================================================================