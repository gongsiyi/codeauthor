1:27d33a2: /**
1:27d33a2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:27d33a2:  * contributor license agreements.  See the NOTICE file distributed with
1:27d33a2:  * this work for additional information regarding copyright ownership.
1:27d33a2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:27d33a2:  * (the "License"); you may not use this file except in compliance with
1:27d33a2:  * the License.  You may obtain a copy of the License at
1:27d33a2:  *
1:27d33a2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:27d33a2:  *
1:27d33a2:  * Unless required by applicable law or agreed to in writing, software
1:27d33a2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27d33a2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27d33a2:  * See the License for the specific language governing permissions and
1:27d33a2:  * limitations under the License.
1:27d33a2:  */
2:27d33a2: 
1:27d33a2: package org.apache.mahout.classifier.sequencelearning.hmm;
1:27d33a2: 
1:27d33a2: import org.apache.mahout.math.Matrix;
1:27d33a2: import org.junit.Test;
1:27d33a2: 
1:27d33a2: public class HMMEvaluatorTest extends HMMTestBase {
1:27d33a2: 
1:27d33a2:   /**
1:27d33a2:    * Test to make sure the computed model likelihood ist valid. Included tests
1:27d33a2:    * are: a) forwad == backward likelihood b) model likelihood for test seqeunce
1:27d33a2:    * is the expected one from R reference
1:27d33a2:    */
1:27d33a2:   @Test
1:27d33a2:   public void testModelLikelihood() {
1:27d33a2:     // compute alpha and beta values
1:d53cf4a:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(getModel(), getSequence(), false);
1:d53cf4a:     Matrix beta = HmmAlgorithms.backwardAlgorithm(getModel(), getSequence(), false);
1:27d33a2:     // now test whether forward == backward likelihood
1:27d33a2:     double forwardLikelihood = HmmEvaluator.modelLikelihood(alpha, false);
1:d53cf4a:     double backwardLikelihood = HmmEvaluator.modelLikelihood(getModel(), getSequence(),
1:27d33a2:         beta, false);
1:d53cf4a:     assertEquals(forwardLikelihood, backwardLikelihood, EPSILON);
1:27d33a2:     // also make sure that the likelihood matches the expected one
1:d53cf4a:     assertEquals(1.8425e-4, forwardLikelihood, EPSILON);
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   /**
1:27d33a2:    * Test to make sure the computed model likelihood ist valid. Included tests
1:27d33a2:    * are: a) forwad == backward likelihood b) model likelihood for test seqeunce
1:27d33a2:    * is the expected one from R reference
1:27d33a2:    */
1:27d33a2:   @Test
1:27d33a2:   public void testScaledModelLikelihood() {
1:27d33a2:     // compute alpha and beta values
1:d53cf4a:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(getModel(), getSequence(), true);
1:d53cf4a:     Matrix beta = HmmAlgorithms.backwardAlgorithm(getModel(), getSequence(), true);
1:27d33a2:     // now test whether forward == backward likelihood
1:27d33a2:     double forwardLikelihood = HmmEvaluator.modelLikelihood(alpha, true);
1:d53cf4a:     double backwardLikelihood = HmmEvaluator.modelLikelihood(getModel(), getSequence(),
1:27d33a2:         beta, true);
1:d53cf4a:     assertEquals(forwardLikelihood, backwardLikelihood, EPSILON);
1:27d33a2:     // also make sure that the likelihood matches the expected one
1:d53cf4a:     assertEquals(1.8425e-4, forwardLikelihood, EPSILON);
1:27d33a2:   }
1:27d33a2: 
1:27d33a2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d53cf4a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(getModel(), getSequence(), false);
1:     Matrix beta = HmmAlgorithms.backwardAlgorithm(getModel(), getSequence(), false);
1:     double backwardLikelihood = HmmEvaluator.modelLikelihood(getModel(), getSequence(),
1:     assertEquals(forwardLikelihood, backwardLikelihood, EPSILON);
1:     assertEquals(1.8425e-4, forwardLikelihood, EPSILON);
/////////////////////////////////////////////////////////////////////////
1:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(getModel(), getSequence(), true);
1:     Matrix beta = HmmAlgorithms.backwardAlgorithm(getModel(), getSequence(), true);
1:     double backwardLikelihood = HmmEvaluator.modelLikelihood(getModel(), getSequence(),
1:     assertEquals(forwardLikelihood, backwardLikelihood, EPSILON);
1:     assertEquals(1.8425e-4, forwardLikelihood, EPSILON);
author:Isabel Drost
-------------------------------------------------------------------------------
commit:27d33a2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sequencelearning.hmm;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.mahout.math.Matrix;
1: import org.junit.Test;
1: 
1: public class HMMEvaluatorTest extends HMMTestBase {
1: 
1:   /**
1:    * Test to make sure the computed model likelihood ist valid. Included tests
1:    * are: a) forwad == backward likelihood b) model likelihood for test seqeunce
1:    * is the expected one from R reference
1:    */
1:   @Test
1:   public void testModelLikelihood() {
1:     // compute alpha and beta values
0:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(model, sequence, false);
0:     Matrix beta = HmmAlgorithms.backwardAlgorithm(model, sequence, false);
1:     // now test whether forward == backward likelihood
1:     double forwardLikelihood = HmmEvaluator.modelLikelihood(alpha, false);
0:     double backwardLikelihood = HmmEvaluator.modelLikelihood(model, sequence,
1:         beta, false);
0:     Assert.assertEquals(forwardLikelihood, backwardLikelihood, 1e-6);
1:     // also make sure that the likelihood matches the expected one
0:     Assert.assertEquals(forwardLikelihood, 1.8425e-4, 1e-6);
1:   }
1: 
1:   /**
1:    * Test to make sure the computed model likelihood ist valid. Included tests
1:    * are: a) forwad == backward likelihood b) model likelihood for test seqeunce
1:    * is the expected one from R reference
1:    */
1:   @Test
1:   public void testScaledModelLikelihood() {
1:     // compute alpha and beta values
0:     Matrix alpha = HmmAlgorithms.forwardAlgorithm(model, sequence, true);
0:     Matrix beta = HmmAlgorithms.backwardAlgorithm(model, sequence, true);
1:     // now test whether forward == backward likelihood
1:     double forwardLikelihood = HmmEvaluator.modelLikelihood(alpha, true);
0:     double backwardLikelihood = HmmEvaluator.modelLikelihood(model, sequence,
1:         beta, true);
0:     Assert.assertEquals(forwardLikelihood, backwardLikelihood, 1e-6);
1:     // also make sure that the likelihood matches the expected one
0:     Assert.assertEquals(forwardLikelihood, 1.8425e-4, 1e-6);
1:   }
1: 
1: }
============================================================================