1:845cbcd: /*
1:845cbcd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:845cbcd:  * contributor license agreements.  See the NOTICE file distributed with
1:845cbcd:  * this work for additional information regarding copyright ownership.
1:845cbcd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:845cbcd:  * (the "License"); you may not use this file except in compliance with
1:845cbcd:  * the License.  You may obtain a copy of the License at
1:845cbcd:  *
1:845cbcd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:845cbcd:  *
1:845cbcd:  * Unless required by applicable law or agreed to in writing, software
1:845cbcd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:845cbcd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:845cbcd:  * See the License for the specific language governing permissions and
1:845cbcd:  * limitations under the License.
1:845cbcd:  */
3:845cbcd: 
1:845cbcd: package org.apache.mahout.math.hadoop.similarity.cooccurrence;
1:845cbcd: 
1:845cbcd: import java.io.DataInput;
1:845cbcd: import java.io.IOException;
1:845cbcd: import java.util.Iterator;
1:845cbcd: 
1:845cbcd: import com.google.common.base.Preconditions;
1:845cbcd: import com.google.common.io.Closeables;
1:845cbcd: import org.apache.hadoop.conf.Configuration;
1:845cbcd: import org.apache.hadoop.fs.FSDataInputStream;
1:845cbcd: import org.apache.hadoop.fs.FSDataOutputStream;
1:845cbcd: import org.apache.hadoop.fs.FileSystem;
1:845cbcd: import org.apache.hadoop.fs.Path;
1:845cbcd: import org.apache.mahout.common.iterator.FixedSizeSamplingIterator;
1:7d90a58: import org.apache.mahout.math.RandomAccessSparseVector;
1:845cbcd: import org.apache.mahout.math.Varint;
1:845cbcd: import org.apache.mahout.math.Vector;
1:dc62944: import org.apache.mahout.math.Vector.Element;
1:845cbcd: import org.apache.mahout.math.VectorWritable;
1:e90d901: import org.apache.mahout.math.function.Functions;
1:845cbcd: import org.apache.mahout.math.map.OpenIntIntHashMap;
1:845cbcd: 
1:229aeff: public final class Vectors {
1:845cbcd: 
1:d95bdda:   private Vectors() {}
1:845cbcd: 
1:845cbcd:   public static Vector maybeSample(Vector original, int sampleSize) {
1:845cbcd:     if (original.getNumNondefaultElements() <= sampleSize) {
1:845cbcd:       return original;
2:845cbcd:     }
1:7d90a58:     Vector sample = new RandomAccessSparseVector(original.size(), sampleSize);
1:dc62944:     Iterator<Element> sampledElements =
1:87c15be:         new FixedSizeSamplingIterator<>(sampleSize, original.nonZeroes().iterator());
1:845cbcd:     while (sampledElements.hasNext()) {
1:dc62944:       Element elem = sampledElements.next();
1:845cbcd:       sample.setQuick(elem.index(), elem.get());
1:845cbcd:     }
1:845cbcd:     return sample;
1:845cbcd:   }
1:d95bdda: 
1:845cbcd:   public static Vector topKElements(int k, Vector original) {
1:845cbcd:     if (original.getNumNondefaultElements() <= k) {
1:845cbcd:       return original;
1:845cbcd:     }
1:d95bdda: 
1:d95bdda:     TopElementsQueue topKQueue = new TopElementsQueue(k);
1:dc62944:     for (Element nonZeroElement : original.nonZeroes()) {
1:d95bdda:       MutableElement top = topKQueue.top();
1:d95bdda:       double candidateValue = nonZeroElement.get();
1:d95bdda:       if (candidateValue > top.get()) {
1:d95bdda:         top.setIndex(nonZeroElement.index());
1:d95bdda:         top.set(candidateValue);
1:d95bdda:         topKQueue.updateTop();
1:d95bdda:       }
1:845cbcd:     }
1:d95bdda: 
1:7d90a58:     Vector topKSimilarities = new RandomAccessSparseVector(original.size(), k);
1:d95bdda:     for (Vector.Element topKSimilarity : topKQueue.getTopElements()) {
1:845cbcd:       topKSimilarities.setQuick(topKSimilarity.index(), topKSimilarity.get());
1:845cbcd:     }
1:845cbcd:     return topKSimilarities;
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   public static Vector merge(Iterable<VectorWritable> partialVectors) {
1:845cbcd:     Iterator<VectorWritable> vectors = partialVectors.iterator();
1:845cbcd:     Vector accumulator = vectors.next().get();
1:845cbcd:     while (vectors.hasNext()) {
1:845cbcd:       VectorWritable v = vectors.next();
1:845cbcd:       if (v != null) {
1:dc62944:         for (Element nonZeroElement : v.get().nonZeroes()) {
1:845cbcd:           accumulator.setQuick(nonZeroElement.index(), nonZeroElement.get());
1:845cbcd:         }
1:845cbcd:       }
1:845cbcd:     }
1:845cbcd:     return accumulator;
1:845cbcd:   }
1:845cbcd: 
1:e90d901:   public static Vector sum(Iterator<VectorWritable> vectors) {
1:e90d901:     Vector sum = vectors.next().get();
1:e90d901:     while (vectors.hasNext()) {
1:e90d901:       sum.assign(vectors.next().get(), Functions.PLUS);
1:e90d901:     }
1:e90d901:     return sum;
1:e90d901:   }
1:e90d901: 
1:845cbcd:   static class TemporaryElement implements Vector.Element {
1:845cbcd: 
1:1499411:     private final int index;
1:845cbcd:     private double value;
1:845cbcd: 
1:845cbcd:     TemporaryElement(int index, double value) {
1:845cbcd:       this.index = index;
1:845cbcd:       this.value = value;
1:845cbcd:     }
1:845cbcd: 
1:845cbcd:     TemporaryElement(Vector.Element toClone) {
1:845cbcd:       this(toClone.index(), toClone.get());
1:845cbcd:     }
1:845cbcd: 
2:845cbcd:     @Override
1:845cbcd:     public double get() {
1:845cbcd:       return value;
1:845cbcd:     }
1:845cbcd: 
1:845cbcd:     @Override
1:845cbcd:     public int index() {
1:845cbcd:       return index;
1:845cbcd:     }
1:845cbcd: 
1:845cbcd:     @Override
1:845cbcd:     public void set(double value) {
1:845cbcd:       this.value = value;
1:845cbcd:     }
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   public static Vector.Element[] toArray(VectorWritable vectorWritable) {
1:845cbcd:     Vector.Element[] elements = new Vector.Element[vectorWritable.get().getNumNondefaultElements()];
1:845cbcd:     int k = 0;
1:dc62944:     for (Element nonZeroElement : vectorWritable.get().nonZeroes()) {
1:845cbcd:       elements[k++] = new TemporaryElement(nonZeroElement.index(), nonZeroElement.get());
1:845cbcd:     }
1:845cbcd:     return elements;
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   public static void write(Vector vector, Path path, Configuration conf) throws IOException {
1:845cbcd:     write(vector, path, conf, false);
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   public static void write(Vector vector, Path path, Configuration conf, boolean laxPrecision) throws IOException {
1:845cbcd:     FileSystem fs = FileSystem.get(path.toUri(), conf);
1:845cbcd:     FSDataOutputStream out = fs.create(path);
1:845cbcd:     try {
1:845cbcd:       VectorWritable vectorWritable = new VectorWritable(vector);
1:845cbcd:       vectorWritable.setWritesLaxPrecision(laxPrecision);
1:845cbcd:       vectorWritable.write(out);
1:845cbcd:     } finally {
1:87d4b2e:       Closeables.close(out, false);
1:845cbcd:     }
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   public static OpenIntIntHashMap readAsIntMap(Path path, Configuration conf) throws IOException {
1:845cbcd:     FileSystem fs = FileSystem.get(path.toUri(), conf);
1:845cbcd:     FSDataInputStream in = fs.open(path);
1:845cbcd:     try {
1:845cbcd:       return readAsIntMap(in);
1:845cbcd:     } finally {
1:31cb292:       Closeables.close(in, true);
1:845cbcd:     }
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   /* ugly optimization for loading sparse vectors containing ints only */
1:5d66758:   private static OpenIntIntHashMap readAsIntMap(DataInput in) throws IOException {
1:845cbcd:     int flags = in.readByte();
1:229aeff:     Preconditions.checkArgument(flags >> VectorWritable.NUM_FLAGS == 0,
1:229aeff:                                 "Unknown flags set: %d", Integer.toString(flags, 2));
1:845cbcd:     boolean dense = (flags & VectorWritable.FLAG_DENSE) != 0;
1:845cbcd:     boolean sequential = (flags & VectorWritable.FLAG_SEQUENTIAL) != 0;
1:845cbcd:     boolean laxPrecision = (flags & VectorWritable.FLAG_LAX_PRECISION) != 0;
1:845cbcd:     Preconditions.checkState(!dense && !sequential, "Only for reading sparse vectors!");
1:845cbcd: 
1:845cbcd:     Varint.readUnsignedVarInt(in);
1:845cbcd: 
1:845cbcd:     OpenIntIntHashMap values = new OpenIntIntHashMap();
1:845cbcd:     int numNonDefaultElements = Varint.readUnsignedVarInt(in);
1:845cbcd:     for (int i = 0; i < numNonDefaultElements; i++) {
1:845cbcd:       int index = Varint.readUnsignedVarInt(in);
1:845cbcd:       double value = laxPrecision ? in.readFloat() : in.readDouble();
1:845cbcd:       values.put(index, (int) value);
1:845cbcd:     }
1:845cbcd:     return values;
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   public static Vector read(Path path, Configuration conf) throws IOException {
1:845cbcd:     FileSystem fs = FileSystem.get(path.toUri(), conf);
1:845cbcd:     FSDataInputStream in = fs.open(path);
1:845cbcd:     try {
1:845cbcd:       return VectorWritable.readVector(in);
1:845cbcd:     } finally {
1:31cb292:       Closeables.close(in, true);
1:845cbcd:     }
1:845cbcd:   }
1:845cbcd: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:         new FixedSizeSamplingIterator<>(sampleSize, original.nonZeroes().iterator());
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e90d901
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1:   public static Vector sum(Iterator<VectorWritable> vectors) {
1:     Vector sum = vectors.next().get();
1:     while (vectors.hasNext()) {
1:       sum.assign(vectors.next().get(), Functions.PLUS);
1:     }
1:     return sum;
1:   }
1: 
commit:d95bdda
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private Vectors() {}
/////////////////////////////////////////////////////////////////////////
1: 
1:     TopElementsQueue topKQueue = new TopElementsQueue(k);
1: 
1:       MutableElement top = topKQueue.top();
1:       double candidateValue = nonZeroElement.get();
1:       if (candidateValue > top.get()) {
1:         top.setIndex(nonZeroElement.index());
1:         top.set(candidateValue);
1:         topKQueue.updateTop();
1:       }
1: 
1:     for (Vector.Element topKSimilarity : topKQueue.getTopElements()) {
/////////////////////////////////////////////////////////////////////////
commit:5d66758
/////////////////////////////////////////////////////////////////////////
1:   private static OpenIntIntHashMap readAsIntMap(DataInput in) throws IOException {
commit:7d90a58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.RandomAccessSparseVector;
/////////////////////////////////////////////////////////////////////////
1:     Vector sample = new RandomAccessSparseVector(original.size(), sampleSize);
/////////////////////////////////////////////////////////////////////////
1:     Vector topKSimilarities = new RandomAccessSparseVector(original.size(), k);
commit:845cbcd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.similarity.cooccurrence;
1: 
1: import com.google.common.base.Preconditions;
1: import com.google.common.io.Closeables;
0: import com.google.common.primitives.Doubles;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FSDataInputStream;
1: import org.apache.hadoop.fs.FSDataOutputStream;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
0: import org.apache.mahout.cf.taste.common.TopK;
1: import org.apache.mahout.common.iterator.FixedSizeSamplingIterator;
1: import org.apache.mahout.math.Varint;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
0: import org.apache.mahout.math.map.OpenDoubleIntHashMap;
0: import org.apache.mahout.math.map.OpenIntDoubleHashMap;
1: import org.apache.mahout.math.map.OpenIntIntHashMap;
1: 
1: import java.io.DataInput;
1: import java.io.IOException;
0: import java.util.Comparator;
1: import java.util.Iterator;
1: 
0: public class Vectors {
1: 
0:   private Vectors() {}
1: 
1:   public static Vector maybeSample(Vector original, int sampleSize) {
1:     if (original.getNumNondefaultElements() <= sampleSize) {
1:       return original;
1:     }
0:     Vector sample = original.like();
0:     Iterator<Vector.Element> sampledElements =
0:         new FixedSizeSamplingIterator<Vector.Element>(sampleSize, original.iterateNonZero());
1:     while (sampledElements.hasNext()) {
0:       Vector.Element elem = sampledElements.next();
1:       sample.setQuick(elem.index(), elem.get());
1:     }
1:     return sample;
1:   }
1: 
1:   public static Vector topKElements(int k, Vector original) {
1:     if (original.getNumNondefaultElements() <= k) {
1:       return original;
1:     }
0:     TopK<Vector.Element> topKQueue = new TopK<Vector.Element>(k, BY_VALUE);
0:     Iterator<Vector.Element> nonZeroElements = original.iterateNonZero();
0:     while (nonZeroElements.hasNext()) {
0:       Vector.Element nonZeroElement = nonZeroElements.next();
0:       topKQueue.offer(new Vectors.TemporaryElement(nonZeroElement));
1:     }
0:     Vector topKSimilarities = original.like();
0:     for (Vector.Element topKSimilarity : topKQueue.retrieve()) {
1:       topKSimilarities.setQuick(topKSimilarity.index(), topKSimilarity.get());
1:     }
1:     return topKSimilarities;
1:   }
1: 
1:   public static Vector merge(Iterable<VectorWritable> partialVectors) {
1:     Iterator<VectorWritable> vectors = partialVectors.iterator();
1:     Vector accumulator = vectors.next().get();
1:     while (vectors.hasNext()) {
1:       VectorWritable v = vectors.next();
1:       if (v != null) {
0:         Iterator<Vector.Element> nonZeroElements = v.get().iterateNonZero();
0:         while (nonZeroElements.hasNext()) {
0:           Vector.Element nonZeroElement = nonZeroElements.next();
1:           accumulator.setQuick(nonZeroElement.index(), nonZeroElement.get());
1:         }
1:       }
1:     }
1:     return accumulator;
1:   }
1: 
0:   static final Comparator<Vector.Element> BY_VALUE = new Comparator<Vector.Element>() {
1:     @Override
0:     public int compare(Vector.Element elem1, Vector.Element elem2) {
0:       return Doubles.compare(elem1.get(), elem2.get());
1:     }
0:   };
1: 
1:   static class TemporaryElement implements Vector.Element {
1: 
0:     private int index;
1:     private double value;
1: 
1:     TemporaryElement(int index, double value) {
1:       this.index = index;
1:       this.value = value;
1:     }
1: 
1:     TemporaryElement(Vector.Element toClone) {
1:       this(toClone.index(), toClone.get());
1:     }
1: 
1:     @Override
1:     public double get() {
1:       return value;
1:     }
1: 
1:     @Override
1:     public int index() {
1:       return index;
1:     }
1: 
1:     @Override
1:     public void set(double value) {
1:       this.value = value;
1:     }
1:   }
1: 
1:   public static Vector.Element[] toArray(VectorWritable vectorWritable) {
1:     Vector.Element[] elements = new Vector.Element[vectorWritable.get().getNumNondefaultElements()];
1:     int k = 0;
0:     Iterator<Vector.Element> nonZeroElements = vectorWritable.get().iterateNonZero();
0:     while (nonZeroElements.hasNext()) {
0:       Vector.Element nonZeroElement = nonZeroElements.next();
1:       elements[k++] = new TemporaryElement(nonZeroElement.index(), nonZeroElement.get());
1:     }
1:     return elements;
1:   }
1: 
1:   public static void write(Vector vector, Path path, Configuration conf) throws IOException {
1:     write(vector, path, conf, false);
1:   }
1: 
1:   public static void write(Vector vector, Path path, Configuration conf, boolean laxPrecision) throws IOException {
1:     FileSystem fs = FileSystem.get(path.toUri(), conf);
1:     FSDataOutputStream out = fs.create(path);
1:     try {
1:       VectorWritable vectorWritable = new VectorWritable(vector);
1:       vectorWritable.setWritesLaxPrecision(laxPrecision);
1:       vectorWritable.write(out);
1:     } finally {
0:       Closeables.closeQuietly(out);
1:     }
1:   }
1: 
1:   public static OpenIntIntHashMap readAsIntMap(Path path, Configuration conf) throws IOException {
1:     FileSystem fs = FileSystem.get(path.toUri(), conf);
1:     FSDataInputStream in = fs.open(path);
1:     try {
1:       return readAsIntMap(in);
1:     } finally {
0:       Closeables.closeQuietly(in);
1:     }
1:   }
1: 
1:   /* ugly optimization for loading sparse vectors containing ints only */
0:   public static OpenIntIntHashMap readAsIntMap(DataInput in) throws IOException {
1:     int flags = in.readByte();
0:     Preconditions.checkArgument(flags >> VectorWritable.NUM_FLAGS == 0, "Unknown flags set: %d", Integer.toString(flags, 2));
1:     boolean dense = (flags & VectorWritable.FLAG_DENSE) != 0;
1:     boolean sequential = (flags & VectorWritable.FLAG_SEQUENTIAL) != 0;
1:     boolean laxPrecision = (flags & VectorWritable.FLAG_LAX_PRECISION) != 0;
1:     Preconditions.checkState(!dense && !sequential, "Only for reading sparse vectors!");
1: 
1:     Varint.readUnsignedVarInt(in);
1: 
1:     OpenIntIntHashMap values = new OpenIntIntHashMap();
1:     int numNonDefaultElements = Varint.readUnsignedVarInt(in);
1:     for (int i = 0; i < numNonDefaultElements; i++) {
1:       int index = Varint.readUnsignedVarInt(in);
1:       double value = laxPrecision ? in.readFloat() : in.readDouble();
1:       values.put(index, (int) value);
1:     }
1:     return values;
1:   }
1: 
1:   public static Vector read(Path path, Configuration conf) throws IOException {
1:     FileSystem fs = FileSystem.get(path.toUri(), conf);
1:     FSDataInputStream in = fs.open(path);
1:     try {
1:       return VectorWritable.readVector(in);
1:     } finally {
0:       Closeables.closeQuietly(in);
1:     }
1:   }
1: }
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataInput;
0: import java.io.IOException;
0: import java.util.Iterator;
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(out, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(out, true);
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(in, true);
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(in, true);
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.Vector.Element;
/////////////////////////////////////////////////////////////////////////
1:     Iterator<Element> sampledElements =
0:         new FixedSizeSamplingIterator<Vector.Element>(sampleSize, original.nonZeroes().iterator());
1:       Element elem = sampledElements.next();
/////////////////////////////////////////////////////////////////////////
1:     for (Element nonZeroElement : original.nonZeroes()) {
/////////////////////////////////////////////////////////////////////////
1:         for (Element nonZeroElement : v.get().nonZeroes()) {
/////////////////////////////////////////////////////////////////////////
1:     for (Element nonZeroElement : vectorWritable.get().nonZeroes()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: public final class Vectors {
0:   private Vectors() {
0:   }
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(flags >> VectorWritable.NUM_FLAGS == 0,
1:                                 "Unknown flags set: %d", Integer.toString(flags, 2));
commit:1499411
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final int index;
============================================================================