1:7002241: /**
1:7002241:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7002241:  * contributor license agreements.  See the NOTICE file distributed with
1:7002241:  * this work for additional information regarding copyright ownership.
1:7002241:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7002241:  * (the "License"); you may not use this file except in compliance with
1:7002241:  * the License.  You may obtain a copy of the License at
1:7002241:  *
1:7002241:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7002241:  *
1:7002241:  * Unless required by applicable law or agreed to in writing, software
1:7002241:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7002241:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7002241:  * See the License for the specific language governing permissions and
1:7002241:  * limitations under the License.
1:7002241:  */
1:7002241: 
1:7002241: package org.apache.mahout.fpm.pfpgrowth;
1:7002241: 
1:7002241: import java.io.IOException;
1:7002241: 
1:7002241: import org.apache.commons.cli2.CommandLine;
1:7002241: import org.apache.commons.cli2.Group;
1:7002241: import org.apache.commons.cli2.Option;
1:7002241: import org.apache.commons.cli2.OptionException;
1:7002241: import org.apache.commons.cli2.builder.ArgumentBuilder;
1:7002241: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1:7002241: import org.apache.commons.cli2.builder.GroupBuilder;
1:7002241: import org.apache.commons.cli2.commandline.Parser;
1:7002241: import org.apache.mahout.common.CommandLineUtil;
1:7002241: import org.apache.mahout.common.Parameters;
1:7002241: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1:7002241: import org.apache.mahout.fpm.pfpgrowth.dataset.KeyBasedStringTupleGrouper;
1:7002241: 
1:7002241: public final class DeliciousTagsExample {
1:7002241:   private DeliciousTagsExample() { }
1:7002241:   
1:7002241:   public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException {
1:7002241:     DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
1:7002241:     ArgumentBuilder abuilder = new ArgumentBuilder();
1:7002241:     GroupBuilder gbuilder = new GroupBuilder();
1:7002241:     Option inputDirOpt = DefaultOptionCreator.inputOption().create();
1:7002241:     
1:7002241:     Option outputOpt = DefaultOptionCreator.outputOption().create();
1:7002241:     
1:7002241:     Option helpOpt = DefaultOptionCreator.helpOption();
1:7002241:     Option recordSplitterOpt = obuilder.withLongName("splitterPattern").withArgument(
1:7002241:       abuilder.withName("splitterPattern").withMinimum(1).withMaximum(1).create()).withDescription(
1:7002241:       "Regular Expression pattern used to split given line into fields."
1:7002241:           + " Default value splits comma or tab separated fields."
1:7002241:           + " Default Value: \"[ ,\\t]*\\t[ ,\\t]*\" ").withShortName("regex").create();
1:7002241:     Option encodingOpt = obuilder.withLongName("encoding").withArgument(
1:7002241:       abuilder.withName("encoding").withMinimum(1).withMaximum(1).create()).withDescription(
1:7002241:       "(Optional) The file encoding.  Default value: UTF-8").withShortName("e").create();
1:7002241:     Group group = gbuilder.withName("Options").withOption(inputDirOpt).withOption(outputOpt).withOption(
1:7002241:       helpOpt).withOption(recordSplitterOpt).withOption(encodingOpt).create();
1:7002241:     
1:7002241:     try {
1:7002241:       Parser parser = new Parser();
1:7002241:       parser.setGroup(group);
1:7002241:       CommandLine cmdLine = parser.parse(args);
1:7002241:       
1:7002241:       if (cmdLine.hasOption(helpOpt)) {
1:7002241:         CommandLineUtil.printHelp(group);
1:7002241:         return;
1:7002241:       }
1:7002241:       Parameters params = new Parameters();
1:7002241:       if (cmdLine.hasOption(recordSplitterOpt)) {
1:7002241:         params.set("splitPattern", (String) cmdLine.getValue(recordSplitterOpt));
1:7002241:       }
1:7002241:       
1:7002241:       String encoding = "UTF-8";
1:7002241:       if (cmdLine.hasOption(encodingOpt)) {
1:7002241:         encoding = (String) cmdLine.getValue(encodingOpt);
1:7002241:       }
1:7002241:       params.set("encoding", encoding);
1:7002241:       String inputDir = (String) cmdLine.getValue(inputDirOpt);
1:7002241:       String outputDir = (String) cmdLine.getValue(outputOpt);
1:7002241:       params.set("input", inputDir);
1:7002241:       params.set("output", outputDir);
1:7002241:       params.set("groupingFieldCount", "2");
1:7002241:       params.set("gfield0", "1");
1:7002241:       params.set("gfield1", "2");
1:7002241:       params.set("selectedFieldCount", "1");
1:7002241:       params.set("field0", "3");
1:7002241:       params.set("maxTransactionLength", "100");
1:7002241:       KeyBasedStringTupleGrouper.startJob(params);
1:7002241:       
1:7002241:     } catch (OptionException ex) {
1:7002241:       CommandLineUtil.printHelp(group);
1:7002241:     }
1:7002241:     
1:7002241:   }
1:7002241: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:7002241
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.fpm.pfpgrowth;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.commons.cli2.CommandLine;
1: import org.apache.commons.cli2.Group;
1: import org.apache.commons.cli2.Option;
1: import org.apache.commons.cli2.OptionException;
1: import org.apache.commons.cli2.builder.ArgumentBuilder;
1: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1: import org.apache.commons.cli2.builder.GroupBuilder;
1: import org.apache.commons.cli2.commandline.Parser;
1: import org.apache.mahout.common.CommandLineUtil;
1: import org.apache.mahout.common.Parameters;
1: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1: import org.apache.mahout.fpm.pfpgrowth.dataset.KeyBasedStringTupleGrouper;
1: 
1: public final class DeliciousTagsExample {
1:   private DeliciousTagsExample() { }
1:   
1:   public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException {
1:     DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
1:     ArgumentBuilder abuilder = new ArgumentBuilder();
1:     GroupBuilder gbuilder = new GroupBuilder();
1:     Option inputDirOpt = DefaultOptionCreator.inputOption().create();
1:     
1:     Option outputOpt = DefaultOptionCreator.outputOption().create();
1:     
1:     Option helpOpt = DefaultOptionCreator.helpOption();
1:     Option recordSplitterOpt = obuilder.withLongName("splitterPattern").withArgument(
1:       abuilder.withName("splitterPattern").withMinimum(1).withMaximum(1).create()).withDescription(
1:       "Regular Expression pattern used to split given line into fields."
1:           + " Default value splits comma or tab separated fields."
1:           + " Default Value: \"[ ,\\t]*\\t[ ,\\t]*\" ").withShortName("regex").create();
1:     Option encodingOpt = obuilder.withLongName("encoding").withArgument(
1:       abuilder.withName("encoding").withMinimum(1).withMaximum(1).create()).withDescription(
1:       "(Optional) The file encoding.  Default value: UTF-8").withShortName("e").create();
1:     Group group = gbuilder.withName("Options").withOption(inputDirOpt).withOption(outputOpt).withOption(
1:       helpOpt).withOption(recordSplitterOpt).withOption(encodingOpt).create();
1:     
1:     try {
1:       Parser parser = new Parser();
1:       parser.setGroup(group);
1:       CommandLine cmdLine = parser.parse(args);
1:       
1:       if (cmdLine.hasOption(helpOpt)) {
1:         CommandLineUtil.printHelp(group);
1:         return;
1:       }
1:       Parameters params = new Parameters();
1:       if (cmdLine.hasOption(recordSplitterOpt)) {
1:         params.set("splitPattern", (String) cmdLine.getValue(recordSplitterOpt));
1:       }
1:       
1:       String encoding = "UTF-8";
1:       if (cmdLine.hasOption(encodingOpt)) {
1:         encoding = (String) cmdLine.getValue(encodingOpt);
1:       }
1:       params.set("encoding", encoding);
1:       String inputDir = (String) cmdLine.getValue(inputDirOpt);
1:       String outputDir = (String) cmdLine.getValue(outputOpt);
1:       params.set("input", inputDir);
1:       params.set("output", outputDir);
1:       params.set("groupingFieldCount", "2");
1:       params.set("gfield0", "1");
1:       params.set("gfield1", "2");
1:       params.set("selectedFieldCount", "1");
1:       params.set("field0", "3");
1:       params.set("maxTransactionLength", "100");
1:       KeyBasedStringTupleGrouper.startJob(params);
1:       
1:     } catch (OptionException ex) {
1:       CommandLineUtil.printHelp(group);
1:     }
1:     
1:   }
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
author:Robin Anil
-------------------------------------------------------------------------------
commit:42ae840
/////////////////////////////////////////////////////////////////////////
0:   private DeliciousTagsExample() { }
0:   
0:     
0:     
0:       abuilder.withName("splitterPattern").withMinimum(1).withMaximum(1).create()).withDescription(
0:       "Regular Expression pattern used to split given line into fields."
0:           + " Default value splits comma or tab separated fields."
0:           + " Default Value: \"[ ,\\t]*\\t[ ,\\t]*\" ").withShortName("regex").create();
0:       abuilder.withName("encoding").withMinimum(1).withMaximum(1).create()).withDescription(
0:       "(Optional) The file encoding.  Default value: UTF-8").withShortName("e").create();
0:       helpOpt).withOption(recordSplitterOpt).withOption(encodingOpt).create();
0:     
0:       
/////////////////////////////////////////////////////////////////////////
0:       
/////////////////////////////////////////////////////////////////////////
0:       
0:     
commit:6980b95
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.fpm.pfpgrowth;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.fpm.pfpgrowth.dataset.KeyBasedStringTupleGrouper;
commit:b35b030
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.mahout.fpm.pfpgrowth.example;
0: 
0: import java.io.IOException;
0: 
0: import org.apache.commons.cli2.CommandLine;
0: import org.apache.commons.cli2.Group;
0: import org.apache.commons.cli2.Option;
0: import org.apache.commons.cli2.OptionException;
0: import org.apache.commons.cli2.builder.ArgumentBuilder;
0: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
0: import org.apache.commons.cli2.builder.GroupBuilder;
0: import org.apache.commons.cli2.commandline.Parser;
0: import org.apache.mahout.common.CommandLineUtil;
0: import org.apache.mahout.common.Parameters;
0: import org.apache.mahout.common.commandline.DefaultOptionCreator;
0: import org.apache.mahout.fpm.pfpgrowth.example.dataset.KeyBasedStringTupleGrouper;
0: 
0: public final class DeliciousTagsExample {
0:   private DeliciousTagsExample() {
0:   }
0: 
0:   public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException {
0:     DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
0:     ArgumentBuilder abuilder = new ArgumentBuilder();
0:     GroupBuilder gbuilder = new GroupBuilder();
0:     Option inputDirOpt = DefaultOptionCreator.inputOption().create();
0: 
0:     Option outputOpt = DefaultOptionCreator.outputOption().create();
0: 
0:     Option helpOpt = DefaultOptionCreator.helpOption();
0:     Option recordSplitterOpt = obuilder.withLongName("splitterPattern").withArgument(
0:         abuilder.withName("splitterPattern").withMinimum(1).withMaximum(1).create()).withDescription(
0:         "Regular Expression pattern used to split given line into fields."
0:             + " Default value splits comma or tab separated fields."
0:             + " Default Value: \"[ ,\\t]*\\t[ ,\\t]*\" ").withShortName("regex").create();
0:     Option encodingOpt = obuilder.withLongName("encoding").withArgument(
0:         abuilder.withName("encoding").withMinimum(1).withMaximum(1).create()).withDescription(
0:         "(Optional) The file encoding.  Default value: UTF-8").withShortName("e").create();
0:     Group group = gbuilder.withName("Options").withOption(inputDirOpt).withOption(outputOpt).withOption(
0:         helpOpt).withOption(recordSplitterOpt).withOption(encodingOpt).create();
0: 
0:     try {
0:       Parser parser = new Parser();
0:       parser.setGroup(group);
0:       CommandLine cmdLine = parser.parse(args);
0: 
0:       if (cmdLine.hasOption(helpOpt)) {
0:         CommandLineUtil.printHelp(group);
0:         return;
0:       }
0:       Parameters params = new Parameters();
0:       if (cmdLine.hasOption(recordSplitterOpt)) {
0:         params.set("splitPattern", (String) cmdLine.getValue(recordSplitterOpt));
0:       }
0: 
0:       String encoding = "UTF-8";
0:       if (cmdLine.hasOption(encodingOpt)) {
0:         encoding = (String) cmdLine.getValue(encodingOpt);
0:       }
0:       params.set("encoding", encoding);
0:       String inputDir = (String) cmdLine.getValue(inputDirOpt);
0:       String outputDir = (String) cmdLine.getValue(outputOpt);
0:       params.set("input", inputDir);
0:       params.set("output", outputDir);
0:       params.set("groupingFieldCount", "2");
0:       params.set("gfield0", "1");
0:       params.set("gfield1", "2");
0:       params.set("selectedFieldCount", "1");
0:       params.set("field0", "3");
0:       params.set("maxTransactionLength", "100");
0:       KeyBasedStringTupleGrouper dataGrouper = new KeyBasedStringTupleGrouper();
0:       dataGrouper.startJob(params);
0: 
0:     } catch (OptionException ex) {
0:       CommandLineUtil.printHelp(group);
0:       return;
0:     }
0: 
0:   }
0: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:2e77bf8
/////////////////////////////////////////////////////////////////////////
0:       KeyBasedStringTupleGrouper.startJob(params);
============================================================================