1:84f17ae: /**
1:84f17ae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:84f17ae:  * contributor license agreements.  See the NOTICE file distributed with
1:84f17ae:  * this work for additional information regarding copyright ownership.
1:84f17ae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:84f17ae:  * (the "License"); you may not use this file except in compliance with
1:84f17ae:  * the License.  You may obtain a copy of the License at
1:84f17ae:  *
1:84f17ae:  *     http://www.apache.org/licenses/LICENSE-2.0
1:84f17ae:  *
1:84f17ae:  * Unless required by applicable law or agreed to in writing, software
1:84f17ae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:84f17ae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:84f17ae:  * See the License for the specific language governing permissions and
1:84f17ae:  * limitations under the License.
1:84f17ae:  */
1:84f17ae: 
1:84f17ae: package org.apache.mahout.cf.taste.impl.recommender.svd;
1:84f17ae: 
1:84f17ae: import java.io.IOException;
1:84f17ae: 
1:84f17ae: /**
1:84f17ae:  * Provides storage for {@link Factorization}s
1:84f17ae:  */
1:84f17ae: public interface PersistenceStrategy {
1:84f17ae: 
1:84f17ae:   /**
1:84f17ae:    * Load a factorization from a persistent store.
1:84f17ae:    *
1:84f17ae:    * @return a Factorization or null if the persistent store is empty.
1:84f17ae:    *
1:84f17ae:    * @throws IOException
1:84f17ae:    */
1:84f17ae:   Factorization load() throws IOException;
1:84f17ae: 
1:84f17ae:   /**
1:84f17ae:    * Write a factorization to a persistent store unless it already
1:84f17ae:    * contains an identical factorization.
1:84f17ae:    *
1:84f17ae:    * @param factorization
1:84f17ae:    *
1:84f17ae:    * @throws IOException
1:84f17ae:    */
1:84f17ae:   void maybePersist(Factorization factorization) throws IOException;
1:84f17ae: 
1:84f17ae: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:84f17ae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender.svd;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * Provides storage for {@link Factorization}s
1:  */
1: public interface PersistenceStrategy {
1: 
1:   /**
1:    * Load a factorization from a persistent store.
1:    *
1:    * @return a Factorization or null if the persistent store is empty.
1:    *
1:    * @throws IOException
1:    */
1:   Factorization load() throws IOException;
1: 
1:   /**
1:    * Write a factorization to a persistent store unless it already
1:    * contains an identical factorization.
1:    *
1:    * @param factorization
1:    *
1:    * @throws IOException
1:    */
1:   void maybePersist(Factorization factorization) throws IOException;
1: 
1: }
============================================================================