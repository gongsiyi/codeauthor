1:e3fb0c4: /**
1:e3fb0c4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e3fb0c4:  * contributor license agreements.  See the NOTICE file distributed with
1:e3fb0c4:  * this work for additional information regarding copyright ownership.
1:e3fb0c4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e3fb0c4:  * (the "License"); you may not use this file except in compliance with
1:e3fb0c4:  * the License.  You may obtain a copy of the License at
1:e3fb0c4:  *
1:e3fb0c4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e3fb0c4:  *
1:e3fb0c4:  * Unless required by applicable law or agreed to in writing, software
1:e3fb0c4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e3fb0c4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e3fb0c4:  * See the License for the specific language governing permissions and
1:e3fb0c4:  * limitations under the License.
1:e3fb0c4:  */
2:e3fb0c4: 
1:e3fb0c4: package org.apache.mahout.classifier.naivebayes.training;
1:e3fb0c4: 
1:e3fb0c4: import java.io.IOException;
1:e3fb0c4: import java.util.Map;
1:e3fb0c4: 
1:e3fb0c4: import org.apache.hadoop.conf.Configuration;
1:e3fb0c4: import org.apache.hadoop.io.IntWritable;
1:e3fb0c4: import org.apache.hadoop.io.Text;
1:e3fb0c4: import org.apache.hadoop.mapreduce.Mapper;
1:29a7f38: import org.apache.mahout.classifier.naivebayes.BayesUtils;
1:e3fb0c4: import org.apache.mahout.math.Vector;
1:e3fb0c4: import org.apache.mahout.math.VectorWritable;
1:e3fb0c4: 
1:e3fb0c4: public class ThetaMapper extends Mapper<IntWritable, VectorWritable, Text, VectorWritable> {
1:e3fb0c4: 
1:e3fb0c4:   public static final String ALPHA_I = ThetaMapper.class.getName() + ".alphaI";
1:e3fb0c4:   static final String TRAIN_COMPLEMENTARY = ThetaMapper.class.getName() + ".trainComplementary";
1:e3fb0c4: 
1:9a5bab5:   private ComplementaryThetaTrainer trainer;
1:e3fb0c4: 
1:e3fb0c4:   @Override
1:e3fb0c4:   protected void setup(Context ctx) throws IOException, InterruptedException {
1:d8d721a:     super.setup(ctx);
1:e3fb0c4:     Configuration conf = ctx.getConfiguration();
1:e3fb0c4: 
1:e3fb0c4:     float alphaI = conf.getFloat(ALPHA_I, 1.0f);
1:9a5bab5:     Map<String, Vector> scores = BayesUtils.readScoresFromCache(conf);    
1:9a5bab5:     
1:9a5bab5:     trainer = new ComplementaryThetaTrainer(scores.get(TrainNaiveBayesJob.WEIGHTS_PER_FEATURE),
1:9a5bab5:                                             scores.get(TrainNaiveBayesJob.WEIGHTS_PER_LABEL), alphaI);
2:e3fb0c4:   }
1:e3fb0c4: 
1:e3fb0c4:   @Override
1:e3fb0c4:   protected void map(IntWritable key, VectorWritable value, Context ctx) throws IOException, InterruptedException {
1:e3fb0c4:     trainer.train(key.get(), value.get());
1:e3fb0c4:   }
1:e3fb0c4: 
1:e3fb0c4:   @Override
1:e3fb0c4:   protected void cleanup(Context ctx) throws IOException, InterruptedException {
1:e3fb0c4:     ctx.write(new Text(TrainNaiveBayesJob.LABEL_THETA_NORMALIZER),
1:e3fb0c4:         new VectorWritable(trainer.retrievePerLabelThetaNormalizer()));
1:d8d721a:     super.cleanup(ctx);
1:e3fb0c4:   }
1:e3fb0c4: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:9a5bab5
/////////////////////////////////////////////////////////////////////////
1:   private ComplementaryThetaTrainer trainer;
/////////////////////////////////////////////////////////////////////////
1:     Map<String, Vector> scores = BayesUtils.readScoresFromCache(conf);    
1:     
1:     trainer = new ComplementaryThetaTrainer(scores.get(TrainNaiveBayesJob.WEIGHTS_PER_FEATURE),
1:                                             scores.get(TrainNaiveBayesJob.WEIGHTS_PER_LABEL), alphaI);
commit:e3fb0c4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.naivebayes.training;
1: 
1: import java.io.IOException;
1: import java.util.Map;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: 
1: public class ThetaMapper extends Mapper<IntWritable, VectorWritable, Text, VectorWritable> {
1: 
1:   public static final String ALPHA_I = ThetaMapper.class.getName() + ".alphaI";
1:   static final String TRAIN_COMPLEMENTARY = ThetaMapper.class.getName() + ".trainComplementary";
1: 
0:   private AbstractThetaTrainer trainer;
1: 
1:   @Override
1:   protected void setup(Context ctx) throws IOException, InterruptedException {
1:     Configuration conf = ctx.getConfiguration();
1: 
1:     float alphaI = conf.getFloat(ALPHA_I, 1.0f);
0:     boolean trainComplemenary = conf.getBoolean(TRAIN_COMPLEMENTARY, false);
0:     Map<String,Vector> scores = TrainUtils.readScoresFromCache(conf);
1: 
0:     if (!trainComplemenary) {
0:       trainer = new StandardThetaTrainer(scores.get(TrainNaiveBayesJob.WEIGHTS_PER_FEATURE),
0:           scores.get(TrainNaiveBayesJob.WEIGHTS_PER_LABEL), alphaI);
0:     } else {
0:       trainer = new ComplementaryThetaTrainer(scores.get(TrainNaiveBayesJob.WEIGHTS_PER_FEATURE),
0:           scores.get(TrainNaiveBayesJob.WEIGHTS_PER_LABEL), alphaI);
1:     }
1:   }
1: 
1:   @Override
1:   protected void map(IntWritable key, VectorWritable value, Context ctx) throws IOException, InterruptedException {
1:     trainer.train(key.get(), value.get());
1:   }
1: 
1:   @Override
1:   protected void cleanup(Context ctx) throws IOException, InterruptedException {
1:     ctx.write(new Text(TrainNaiveBayesJob.LABEL_THETA_NORMALIZER),
1:         new VectorWritable(trainer.retrievePerLabelThetaNormalizer()));
1:   }
1: }
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Robin Anil
-------------------------------------------------------------------------------
commit:a344c6b
/////////////////////////////////////////////////////////////////////////
0:     Map<String, Vector> scores = BayesUtils.readScoresFromCache(conf);
commit:d8d721a
/////////////////////////////////////////////////////////////////////////
1:     super.setup(ctx);
/////////////////////////////////////////////////////////////////////////
1:     super.cleanup(ctx);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
0:     if (conf.getBoolean(TRAIN_COMPLEMENTARY, false)) {
0:                                               scores.get(TrainNaiveBayesJob.WEIGHTS_PER_LABEL), alphaI);
0:     } else {
0:       trainer = new StandardThetaTrainer(scores.get(TrainNaiveBayesJob.WEIGHTS_PER_FEATURE),
0:                                          scores.get(TrainNaiveBayesJob.WEIGHTS_PER_LABEL), alphaI);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.classifier.naivebayes.BayesUtils;
/////////////////////////////////////////////////////////////////////////
0:     Map<String,Vector> scores = BayesUtils.readScoresFromCache(conf);
============================================================================