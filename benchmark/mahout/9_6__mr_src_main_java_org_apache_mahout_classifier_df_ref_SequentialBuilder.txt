1:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c37a84:  * contributor license agreements.  See the NOTICE file distributed with
1:8c37a84:  * this work for additional information regarding copyright ownership.
1:8c37a84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c37a84:  * (the "License"); you may not use this file except in compliance with
1:8c37a84:  * the License.  You may obtain a copy of the License at
1:8c37a84:  *
1:8c37a84:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:8c37a84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c37a84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c37a84:  * See the License for the specific language governing permissions and
1:8c37a84:  * limitations under the License.
1:8c37a84:  */
2:8c37a84: 
1:52ce412: package org.apache.mahout.classifier.df.ref;
1:8c37a84: 
1:52ce412: import org.apache.mahout.classifier.df.Bagging;
1:52ce412: import org.apache.mahout.classifier.df.DecisionForest;
1:52ce412: import org.apache.mahout.classifier.df.builder.TreeBuilder;
1:52ce412: import org.apache.mahout.classifier.df.data.Data;
1:52ce412: import org.apache.mahout.classifier.df.node.Node;
1:8c37a84: import org.slf4j.Logger;
1:8c37a84: import org.slf4j.LoggerFactory;
1:8c37a84: 
1:85f9ece: import java.util.ArrayList;
1:d6aba1a: import java.util.List;
1:d6aba1a: import java.util.Random;
1:d6aba1a: 
1:8c37a84: /**
1:8c37a84:  * Builds a Random Decision Forest using a given TreeBuilder to grow the trees
1:8c37a84:  */
1:1ffa3a4: @Deprecated
1:8c37a84: public class SequentialBuilder {
1:8c37a84:   
1:8c37a84:   private static final Logger log = LoggerFactory.getLogger(SequentialBuilder.class);
1:8c37a84:   
1:8547de7:   private final Random rng;
1:8c37a84:   
1:8547de7:   private final Bagging bagging;
1:8c37a84:   
1:8c37a84:   /**
1:8c37a84:    * Constructor
1:8c37a84:    * 
1:ad11134:    * @param rng
1:ad11134:    *          random-numbers generator
1:ad11134:    * @param treeBuilder
1:ad11134:    *          tree builder
1:ad11134:    * @param data
1:ad11134:    *          training data
1:8c37a84:    */
1:8c37a84:   public SequentialBuilder(Random rng, TreeBuilder treeBuilder, Data data) {
1:8c37a84:     this.rng = rng;
1:8c37a84:     bagging = new Bagging(treeBuilder, data);
1:8c37a84:   }
1:8c37a84:   
1:ac83cf3:   public DecisionForest build(int nbTrees) {
1:85f9ece:     List<Node> trees = new ArrayList<>();
1:8c37a84:     
1:8c37a84:     for (int treeId = 0; treeId < nbTrees; treeId++) {
1:4fbfbc6:       trees.add(bagging.build(rng));
1:8c37a84:       logProgress(((float) treeId + 1) / nbTrees);
1:8c37a84:     }
1:8c37a84:     
1:8c37a84:     return new DecisionForest(trees);
1:8c37a84:   }
1:8c37a84:   
1:8547de7:   private static void logProgress(float progress) {
1:8c37a84:     int percent = (int) (progress * 100);
1:ad11134:     if (percent % 10 == 0) {
1:70fa802:       log.info("Building {}%", percent);
1:8c37a84:     }
1:8c37a84:     
1:8c37a84:   }
1:8c37a84:   
1:ad11134: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     List<Node> trees = new ArrayList<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:d6aba1a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.Random;
1: 
commit:ac83cf3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public DecisionForest build(int nbTrees) {
0:       trees.add(bagging.build(treeId, rng));
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.ref;
1: 
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.Random;
1: 
0: import org.apache.mahout.df.Bagging;
0: import org.apache.mahout.df.DecisionForest;
0: import org.apache.mahout.df.builder.TreeBuilder;
0: import org.apache.mahout.df.callback.PredictionCallback;
0: import org.apache.mahout.df.data.Data;
0: import org.apache.mahout.df.node.Node;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Builds a Random Decision Forest using a given TreeBuilder to grow the trees
1:  */
1: public class SequentialBuilder {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(SequentialBuilder.class);
1: 
0:   protected final Random rng;
1:   
0:   protected final Bagging bagging;
1: 
1:   /**
1:    * Constructor
1:    * 
0:    * @param rng random-numbers generator
0:    * @param treeBuilder tree builder
0:    * @param data training data
1:    */
1:   public SequentialBuilder(Random rng, TreeBuilder treeBuilder, Data data) {
1:     this.rng = rng;
1:     bagging = new Bagging(treeBuilder, data);
1:   }
1: 
0:   public DecisionForest build(int nbTrees, PredictionCallback callback) throws Exception {
0:     List<Node> trees = new ArrayList<Node>();
1:     
1:     for (int treeId = 0; treeId < nbTrees; treeId++) {
0:       trees.add(bagging.build(treeId, rng, callback));
1:       logProgress(((float) treeId + 1) / nbTrees);
1:     }
1: 
1:     return new DecisionForest(trees);
1:   }
1:   
0:   protected void logProgress(float progress) {
1:     int percent = (int) (progress * 100);
0:     if (percent % 10 == 0)
0:       log.info(String.format("Building %2d%%", percent));
1: 
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1:       trees.add(bagging.build(rng));
commit:70fa802
/////////////////////////////////////////////////////////////////////////
1:       log.info("Building {}%", percent);
commit:210fac3
commit:8547de7
/////////////////////////////////////////////////////////////////////////
1:   private final Random rng;
1:   private final Bagging bagging;
/////////////////////////////////////////////////////////////////////////
0:   public DecisionForest build(int nbTrees, PredictionCallback callback) {
/////////////////////////////////////////////////////////////////////////
1:   private static void logProgress(float progress) {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.ref;
1: import org.apache.mahout.classifier.df.Bagging;
1: import org.apache.mahout.classifier.df.DecisionForest;
1: import org.apache.mahout.classifier.df.builder.TreeBuilder;
1: import org.apache.mahout.classifier.df.data.Data;
1: import org.apache.mahout.classifier.df.node.Node;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     List<Node> trees = Lists.newArrayList();
author:Robin Anil
-------------------------------------------------------------------------------
commit:297bef5
/////////////////////////////////////////////////////////////////////////
0:       log.info(String.format("Building %2d%%", percent));
commit:ad11134
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
1:    * @param rng
1:    *          random-numbers generator
1:    * @param treeBuilder
1:    *          tree builder
1:    * @param data
1:    *          training data
0:   
0:       SequentialBuilder.logProgress(((float) treeId + 1) / nbTrees);
0:     
1:     if (percent % 10 == 0) {
0:       SequentialBuilder.log.info(String.format("Building %2d%%", percent));
1:     }
0:     
0:   
============================================================================