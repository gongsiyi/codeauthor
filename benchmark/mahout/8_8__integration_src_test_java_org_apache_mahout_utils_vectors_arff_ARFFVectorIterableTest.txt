2:ee4a261: /**
1:ee4a261:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ee4a261:  * contributor license agreements.  See the NOTICE file distributed with
1:ee4a261:  * this work for additional information regarding copyright ownership.
1:ee4a261:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ee4a261:  * (the "License"); you may not use this file except in compliance with
1:ee4a261:  * the License.  You may obtain a copy of the License at
3:ee4a261:  *
1:ee4a261:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ee4a261:  *
1:ee4a261:  * Unless required by applicable law or agreed to in writing, software
1:ee4a261:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ee4a261:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee4a261:  * See the License for the specific language governing permissions and
1:ee4a261:  * limitations under the License.
1:ee4a261:  */
1:baa3a8c: 
1:758cc1b: package org.apache.mahout.utils.vectors.arff;
1:b381afd: 
1:d0bed6d: import java.io.IOException;
1:233d93d: import java.text.DateFormat;
1:6fc9667: import java.text.SimpleDateFormat;
1:6fc9667: import java.util.Date;
1:233d93d: import java.util.Iterator;
1:6fc9667: import java.util.Locale;
1:233d93d: import java.util.Map;
1:baa3a8c: 
1:d0bed6d: import com.google.common.io.Resources;
1:85f9ece: import org.apache.commons.io.Charsets;
1:b381afd: import org.apache.mahout.common.MahoutTestCase;
1:a435efb: import org.apache.mahout.math.DenseVector;
1:b3f6857: import org.apache.mahout.math.RandomAccessSparseVector;
1:a435efb: import org.apache.mahout.math.Vector;
1:ff79ff4: import org.junit.Test;
1:baa3a8c: 
1:ff79ff4: public final class ARFFVectorIterableTest extends MahoutTestCase {
6:baa3a8c: 
1:ff79ff4:   @Test
1:ee4a261:   public void testValues() throws Exception {
1:d0bed6d:     ARFFVectorIterable iterable = readModelFromResource("sample.arff");
1:d0bed6d: 
1:ff79ff4:     assertEquals("Mahout", iterable.getModel().getRelation());
1:d0bed6d:     Map<String, Integer> bindings = iterable.getModel().getLabelBindings();
1:ff79ff4:     assertNotNull(bindings);
1:ff79ff4:     assertEquals(5, bindings.size());
1:ee4a261:     Iterator<Vector> iter = iterable.iterator();
1:ff79ff4:     assertTrue(iter.hasNext());
1:ee4a261:     Vector next = iter.next();
1:ff79ff4:     assertNotNull(next);
1:ff79ff4:     assertTrue("Wrong instanceof", next instanceof DenseVector);
1:ff79ff4:     assertEquals(1.0, next.get(0), EPSILON);
1:ff79ff4:     assertEquals(2.0, next.get(1), EPSILON);
1:ff79ff4:     assertTrue(iter.hasNext());
1:ee4a261:     next = iter.next();
1:ff79ff4:     assertNotNull(next);
1:ff79ff4:     assertTrue("Wrong instanceof", next instanceof DenseVector);
1:ff79ff4:     assertEquals(2.0, next.get(0), EPSILON);
1:ff79ff4:     assertEquals(3.0, next.get(1), EPSILON);
1:d0bed6d: 
1:ff79ff4:     assertTrue(iter.hasNext());
1:ee4a261:     next = iter.next();
1:ff79ff4:     assertNotNull(next);
1:ff79ff4:     assertTrue("Wrong instanceof", next instanceof RandomAccessSparseVector);
1:ff79ff4:     assertEquals(5.0, next.get(0), EPSILON);
1:ff79ff4:     assertEquals(23.0, next.get(1), EPSILON);
1:d0bed6d: 
1:ff79ff4:     assertFalse(iter.hasNext());
2:ee4a261:   }
1:7b10d65: 
1:7b10d65:   @Test
1:ee4a261:   public void testDense() throws Exception {
1:d0bed6d:     Iterable<Vector> iterable = readModelFromResource("sample-dense.arff");
1:c9a7947:     Vector firstVector = iterable.iterator().next();
1:c9a7947:     assertEquals(1.0, firstVector.get(0), 0);
1:c9a7947:     assertEquals(65.0, firstVector.get(1), 0);
1:c9a7947:     assertEquals(1.0, firstVector.get(3), 0);
1:c9a7947:     assertEquals(1.0, firstVector.get(4), 0);
1:d0bed6d: 
2:ee4a261:     int count = 0;
2:ee4a261:     for (Vector vector : iterable) {
1:ff79ff4:       assertTrue("Vector is not dense", vector instanceof DenseVector);
2:ee4a261:       count++;
1:ee4a261:     }
1:c9a7947:     assertEquals(5, count);
1:ee4a261:   }
1:c9a7947: 
1:ff79ff4:   @Test
1:ee4a261:   public void testSparse() throws Exception {
1:d0bed6d:     Iterable<Vector> iterable = readModelFromResource("sample-sparse.arff");
1:d0bed6d: 
1:c9a7947:     Vector firstVector = iterable.iterator().next();
1:c9a7947:     assertEquals(23.1, firstVector.get(1), 0);
1:c9a7947:     assertEquals(3.23, firstVector.get(2), 0);
1:c9a7947:     assertEquals(1.2, firstVector.get(3), 0);
1:d0bed6d: 
1:ee4a261:     int count = 0;
1:ee4a261:     for (Vector vector : iterable) {
1:ff79ff4:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
1:ee4a261:       count++;
1:ee4a261:     }
1:c9a7947:     assertEquals(9, count);
1:ee4a261:   }
1:c9a7947: 
1:ff79ff4:   @Test
1:ee4a261:   public void testNonNumeric() throws Exception {
2:20faad6:     MapBackedARFFModel model = new MapBackedARFFModel();
1:d0bed6d:     ARFFVectorIterable iterable = getVectors("non-numeric-1.arff", model);
1:20faad6:     int count = 0;
1:20faad6:     for (Vector vector : iterable) {
1:ff79ff4:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
1:20faad6:       count++;
1:ee4a261:     }
1:d0bed6d: 
1:d0bed6d:     iterable = getVectors("non-numeric-1.arff", model);
1:baa3a8c:     Iterator<Vector> iter = iterable.iterator();
1:baa3a8c:     Vector firstVector = iter.next();
1:d0bed6d: 
1:baa3a8c:     assertEquals(1.0, firstVector.get(2), 0);
1:d0bed6d: 
3:ff79ff4:     assertEquals(10, count);
1:d0bed6d:     Map<String, Map<String, Integer>> nominalMap = iterable.getModel().getNominalMap();
1:ff79ff4:     assertNotNull(nominalMap);
1:ff79ff4:     assertEquals(1, nominalMap.size());
1:d0bed6d:     Map<String, Integer> noms = nominalMap.get("bar");
1:ff79ff4:     assertNotNull("nominals for bar are null", noms);
1:304fb0f:     assertEquals(5, noms.size());
1:d0bed6d:     Map<Integer, ARFFType> integerARFFTypeMap = model.getTypeMap();
1:ff79ff4:     assertNotNull("Type map null", integerARFFTypeMap);
1:ff79ff4:     assertEquals(5, integerARFFTypeMap.size());
1:d0bed6d:     Map<String, Long> words = model.getWords();
1:ff79ff4:     assertNotNull("words null", words);
1:ff79ff4:     assertEquals(10, words.size());
1:d0bed6d:     Map<Integer, DateFormat> integerDateFormatMap = model.getDateMap();
1:ff79ff4:     assertNotNull("date format null", integerDateFormatMap);
1:ff79ff4:     assertEquals(1, integerDateFormatMap.size());
1:6fc9667:   }
1:0fe5282: 
1:6fc9667:   @Test
1:6fc9667:   public void testDate() throws Exception {
1:d0bed6d:     ARFFVectorIterable iterable = readModelFromResource("date.arff");
1:6fc9667:     Iterator<Vector> iter = iterable.iterator();
1:6fc9667:     Vector firstVector = iter.next();
1:d0bed6d: 
1:baa3a8c:     DateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.ENGLISH);
1:baa3a8c:     Date date = format.parse("2001-07-04T12:08:56");
1:6fc9667:     long result = date.getTime();
1:baa3a8c:     assertEquals(result, firstVector.get(1), 0);
1:d0bed6d: 
1:baa3a8c:     format = new SimpleDateFormat("yyyy.MM.dd G 'at' HH:mm:ss z", Locale.ENGLISH);
1:baa3a8c:     date = format.parse("2001.07.04 AD at 12:08:56 PDT");
1:baa3a8c:     result = date.getTime();
1:baa3a8c:     assertEquals(result, firstVector.get(2), 0);
1:d0bed6d: 
1:baa3a8c:     format = new SimpleDateFormat("EEE, MMM d, ''yy", Locale.ENGLISH);
1:baa3a8c:     date = format.parse("Wed, Jul 4, '01,4 0:08 PM, PDT");
1:baa3a8c:     result = date.getTime();
1:baa3a8c:     assertEquals(result, firstVector.get(3), 0);
1:d0bed6d: 
1:baa3a8c:     format = new SimpleDateFormat("K:mm a, z", Locale.ENGLISH);
1:baa3a8c:     date = format.parse("0:08 PM, PDT");
1:baa3a8c:     result = date.getTime();
1:baa3a8c:     assertEquals(result, firstVector.get(4), 0);
1:d0bed6d: 
1:baa3a8c:     format = new SimpleDateFormat("yyyyy.MMMMM.dd GGG hh:mm aaa", Locale.ENGLISH);
1:baa3a8c:     date = format.parse("02001.July.04 AD 12:08 PM");
1:baa3a8c:     result = date.getTime();
1:baa3a8c:     assertEquals(result, firstVector.get(5), 0);
1:d0bed6d: 
1:baa3a8c:     format = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z", Locale.ENGLISH);
1:baa3a8c:     date = format.parse("Wed, 4 Jul 2001 12:08:56 -0700");
1:baa3a8c:     result = date.getTime();
1:baa3a8c:     assertEquals(result, firstVector.get(6), 0);
1:d0bed6d: 
1:ee4a261:   }
1:c9a7947: 
1:ff79ff4:   @Test
1:20faad6:   public void testMultipleNoms() throws Exception {
1:6fc9667:     MapBackedARFFModel model = new MapBackedARFFModel();
1:d0bed6d:     ARFFVectorIterable iterable = getVectors("non-numeric-1.arff", model);
1:20faad6:     int count = 0;
1:20faad6:     for (Vector vector : iterable) {
1:ff79ff4:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
1:20faad6:       count++;
1:20faad6:     }
1:ff79ff4:     assertEquals(10, count);
1:baa3a8c:     Map<String,Map<String,Integer>> nominalMap = iterable.getModel().getNominalMap();
1:ff79ff4:     assertNotNull(nominalMap);
1:ff79ff4:     assertEquals(1, nominalMap.size());
1:baa3a8c:     Map<String,Integer> noms = nominalMap.get("bar");
1:ff79ff4:     assertNotNull("nominals for bar are null", noms);
1:304fb0f:     assertEquals(5, noms.size());
1:baa3a8c:     Map<Integer,ARFFType> integerARFFTypeMap = model.getTypeMap();
1:ff79ff4:     assertNotNull("Type map null", integerARFFTypeMap);
1:ff79ff4:     assertEquals(5, integerARFFTypeMap.size());
1:baa3a8c:     Map<String,Long> words = model.getWords();
1:ff79ff4:     assertNotNull("words null", words);
1:ff79ff4:     assertEquals(10, words.size());
1:d0bed6d: 
1:baa3a8c:     Map<Integer,DateFormat> integerDateFormatMap = model.getDateMap();
1:ff79ff4:     assertNotNull("date format null", integerDateFormatMap);
1:ff79ff4:     assertEquals(1, integerDateFormatMap.size());
1:d0bed6d: 
1:d0bed6d: 
1:d0bed6d:     iterable = getVectors("non-numeric-2.arff", model);
1:20faad6:     count = 0;
1:20faad6:     for (Vector vector : iterable) {
1:ff79ff4:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
1:20faad6:       count++;
1:20faad6:     }
1:20faad6:     nominalMap = model.getNominalMap();
1:ff79ff4:     assertNotNull(nominalMap);
1:ff79ff4:     assertEquals(2, nominalMap.size());
1:20faad6:     noms = nominalMap.get("test");
1:ff79ff4:     assertNotNull("nominals for bar are null", noms);
3:ff79ff4:     assertEquals(2, noms.size());
1:20faad6:   }
1:0fe5282: 
1:0fe5282:   @Test
1:0fe5282:   public void testNumerics() throws Exception {
1:0fe5282:     String arff = "@RELATION numerics\n"
1:0fe5282:       + "@ATTRIBUTE theNumeric NUMERIC\n"
1:0fe5282:       + "@ATTRIBUTE theInteger INTEGER\n"
1:7b10d65:       + "@ATTRIBUTE theReal REAL\n"
1:7b10d65:       + "@DATA\n"
1:0fe5282:       + "1.0,2,3.0";
1:0fe5282:     ARFFModel model = new MapBackedARFFModel();
1:7b10d65:     ARFFVectorIterable iterable = new ARFFVectorIterable(arff, model);
1:0fe5282:     model = iterable.getModel();
1:0fe5282:     assertNotNull(model);
1:0fe5282:     assertEquals(3, model.getLabelSize());
1:0fe5282:     assertEquals(ARFFType.NUMERIC, model.getARFFType(0));
1:0fe5282:     assertEquals(ARFFType.INTEGER, model.getARFFType(1));
1:0fe5282:     assertEquals(ARFFType.REAL, model.getARFFType(2));
1:0fe5282:     Iterator<Vector> it = iterable.iterator();
1:0fe5282:     Vector vector = it.next();
1:0fe5282:     assertEquals(1.0, vector.get(0), EPSILON);
1:0fe5282:     assertEquals(2.0, vector.get(1), EPSILON);
1:0fe5282:     assertEquals(3.0, vector.get(2), EPSILON);
1:0fe5282:   }
1:7b10d65: 
1:ff79ff4:   @Test
1:7b10d65:   public void testQuotes() throws Exception {
1:7b10d65:     // ARFF allows quotes on identifiers
1:7b10d65:     ARFFModel model = new MapBackedARFFModel();
1:d0bed6d:     ARFFVectorIterable iterable = getVectors("quoted-id.arff", model);
1:7b10d65:     model = iterable.getModel();
1:7b10d65:     assertNotNull(model);
1:7b10d65:     assertEquals("quotes", model.getRelation());
1:7b10d65: 
1:7b10d65:     // check attribute labels
1:7b10d65:     assertEquals(4, model.getLabelSize());
1:7b10d65:     assertEquals(ARFFType.NUMERIC, model.getARFFType(0));
1:7b10d65:     assertEquals(ARFFType.INTEGER, model.getARFFType(1));
1:7b10d65:     assertEquals(ARFFType.REAL, model.getARFFType(2));
1:7b10d65:     assertEquals(ARFFType.NOMINAL, model.getARFFType(3));
1:7b10d65: 
1:7b10d65:     Map<String, Integer> labelBindings = model.getLabelBindings();
1:7b10d65:     assertTrue(labelBindings.keySet().contains("thenumeric"));
1:7b10d65:     assertTrue(labelBindings.keySet().contains("theinteger"));
1:7b10d65:     assertTrue(labelBindings.keySet().contains("thereal"));
1:7b10d65:     assertTrue(labelBindings.keySet().contains("thenominal"));
1:d0bed6d: 
1:7b10d65:     // check nominal values
1:7b10d65:     Map<String, Integer> nominalMap = model.getNominalMap().get("thenominal");
1:7b10d65:     assertNotNull(nominalMap);
1:7b10d65:     assertEquals(3, nominalMap.size());
1:7b10d65:     assertTrue(nominalMap.keySet().contains("double-quote"));
1:7b10d65:     assertTrue(nominalMap.keySet().contains("single-quote"));
1:7b10d65:     assertTrue(nominalMap.keySet().contains("no-quote"));
1:7b10d65: 
1:7b10d65:     // check data values
1:7b10d65:     Iterator<Vector> it = iterable.iterator();
1:7b10d65:     Vector vector = it.next();
1:7b10d65:     assertEquals(nominalMap.get("no-quote"), vector.get(3), EPSILON);
1:7b10d65:     assertEquals(nominalMap.get("single-quote"), it.next().get(3), EPSILON);
1:7b10d65:     assertEquals(nominalMap.get("double-quote"), it.next().get(3), EPSILON);
1:7b10d65:   }
1:7b10d65: 
1:d0bed6d:   static ARFFVectorIterable getVectors(String resourceName, ARFFModel model) throws IOException {
1:d0bed6d:     String sample = Resources.toString(Resources.getResource(resourceName), Charsets.UTF_8);
1:d0bed6d:     return new ARFFVectorIterable(sample, model);
1:d0bed6d:   }
1:d0bed6d: 
1:d0bed6d:   private static ARFFVectorIterable readModelFromResource(String resourceName) throws IOException {
1:d0bed6d:     ARFFModel model = new MapBackedARFFModel();
1:d0bed6d:     return getVectors(resourceName, model);
1:d0bed6d:   }
1:d0bed6d: 
1:ee4a261: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
author:smarthi
-------------------------------------------------------------------------------
commit:304fb0f
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(5, noms.size());
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(5, noms.size());
author:sslavic
-------------------------------------------------------------------------------
commit:b381afd
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.mahout.common.MahoutTestCase;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d0bed6d
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
1: import com.google.common.io.Resources;
/////////////////////////////////////////////////////////////////////////
1:     ARFFVectorIterable iterable = readModelFromResource("sample.arff");
1: 
1:     Map<String, Integer> bindings = iterable.getModel().getLabelBindings();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     Iterable<Vector> iterable = readModelFromResource("sample-dense.arff");
1: 
/////////////////////////////////////////////////////////////////////////
1:     Iterable<Vector> iterable = readModelFromResource("sample-sparse.arff");
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     ARFFVectorIterable iterable = getVectors("non-numeric-1.arff", model);
1: 
1:     iterable = getVectors("non-numeric-1.arff", model);
1: 
1: 
1:     Map<String, Map<String, Integer>> nominalMap = iterable.getModel().getNominalMap();
1:     Map<String, Integer> noms = nominalMap.get("bar");
1:     Map<Integer, ARFFType> integerARFFTypeMap = model.getTypeMap();
1:     Map<String, Long> words = model.getWords();
1:     Map<Integer, DateFormat> integerDateFormatMap = model.getDateMap();
1:     ARFFVectorIterable iterable = readModelFromResource("date.arff");
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1:     ARFFVectorIterable iterable = getVectors("non-numeric-1.arff", model);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:     iterable = getVectors("non-numeric-2.arff", model);
/////////////////////////////////////////////////////////////////////////
1:     ARFFVectorIterable iterable = getVectors("quoted-id.arff", model);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:   static ARFFVectorIterable getVectors(String resourceName, ARFFModel model) throws IOException {
1:     String sample = Resources.toString(Resources.getResource(resourceName), Charsets.UTF_8);
1:     return new ARFFVectorIterable(sample, model);
1:   }
1: 
1:   private static ARFFVectorIterable readModelFromResource(String resourceName) throws IOException {
1:     ARFFModel model = new MapBackedARFFModel();
1:     return getVectors(resourceName, model);
1:   }
1: 
commit:7b10d65
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testQuotes() throws Exception {
1:     
1:     // ARFF allows quotes on identifiers
0:     String arff = "@RELATION 'quotes'\n"
0:         + "@ATTRIBUTE 'theNumeric' NUMERIC\n"
0:         + "@ATTRIBUTE \"theInteger\" INTEGER\n"
1:         + "@ATTRIBUTE theReal REAL\n"
0:         + "@ATTRIBUTE theNominal {\"double-quote\", 'single-quote', no-quote}\n"
1:         + "@DATA\n"
0:         + "1.0,2,3.0,\"no-quote\"\n"
0:         + "4.0,5,6.0,single-quote\n"
0:         + "7.0,8,9.0,'double-quote'\n"
0:       ;
1:     ARFFModel model = new MapBackedARFFModel();
1:     ARFFVectorIterable iterable = new ARFFVectorIterable(arff, model);
1:     model = iterable.getModel();
1:     assertNotNull(model);
1:     assertEquals("quotes", model.getRelation());
1: 
1:     // check attribute labels
1:     assertEquals(4, model.getLabelSize());
1:     assertEquals(ARFFType.NUMERIC, model.getARFFType(0));
1:     assertEquals(ARFFType.INTEGER, model.getARFFType(1));
1:     assertEquals(ARFFType.REAL, model.getARFFType(2));
1:     assertEquals(ARFFType.NOMINAL, model.getARFFType(3));
1: 
1:     Map<String, Integer> labelBindings = model.getLabelBindings();
1:     assertTrue(labelBindings.keySet().contains("thenumeric"));
1:     assertTrue(labelBindings.keySet().contains("theinteger"));
1:     assertTrue(labelBindings.keySet().contains("thereal"));
1:     assertTrue(labelBindings.keySet().contains("thenominal"));
1:     
1:     // check nominal values
1:     Map<String, Integer> nominalMap = model.getNominalMap().get("thenominal");
1:     assertNotNull(nominalMap);
1:     assertEquals(3, nominalMap.size());
1:     assertTrue(nominalMap.keySet().contains("double-quote"));
1:     assertTrue(nominalMap.keySet().contains("single-quote"));
1:     assertTrue(nominalMap.keySet().contains("no-quote"));
1: 
1:     // check data values
1:     Iterator<Vector> it = iterable.iterator();
1:     Vector vector = it.next();
1:     assertEquals(nominalMap.get("no-quote"), vector.get(3), EPSILON);
1:     assertEquals(nominalMap.get("single-quote"), it.next().get(3), EPSILON);
1:     assertEquals(nominalMap.get("double-quote"), it.next().get(3), EPSILON);
1:   }
1: 
author:Ted Dunning
-------------------------------------------------------------------------------
commit:0fe5282
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test
1:   public void testNumerics() throws Exception {
1:     String arff = "@RELATION numerics\n"
1:       + "@ATTRIBUTE theNumeric NUMERIC\n"
1:       + "@ATTRIBUTE theInteger INTEGER\n"
0:       + "@ATTRIBUTE theReal REAL\n"
0:       + "@DATA\n"
1:       + "1.0,2,3.0";
1:     ARFFModel model = new MapBackedARFFModel();
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(arff, model);
1:     model = iterable.getModel();
1:     assertNotNull(model);
1:     assertEquals(3, model.getLabelSize());
1:     assertEquals(ARFFType.NUMERIC, model.getARFFType(0));
1:     assertEquals(ARFFType.INTEGER, model.getARFFType(1));
1:     assertEquals(ARFFType.REAL, model.getARFFType(2));
1:     Iterator<Vector> it = iterable.iterator();
1:     Vector vector = it.next();
1:     assertEquals(1.0, vector.get(0), EPSILON);
1:     assertEquals(2.0, vector.get(1), EPSILON);
1:     assertEquals(3.0, vector.get(2), EPSILON);
1:   }
1: 
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:c9a7947
/////////////////////////////////////////////////////////////////////////
1:     Vector firstVector = iterable.iterator().next();
1:     assertEquals(1.0, firstVector.get(0), 0);
1:     assertEquals(65.0, firstVector.get(1), 0);
1:     assertEquals(1.0, firstVector.get(3), 0);
1:     assertEquals(1.0, firstVector.get(4), 0);
1:     
1:     assertEquals(5, count);
1:     
1:     Vector firstVector = iterable.iterator().next();
1:     assertEquals(23.1, firstVector.get(1), 0);
1:     assertEquals(3.23, firstVector.get(2), 0);
1:     assertEquals(1.2, firstVector.get(3), 0);
1:     
1:     assertEquals(9, count);
/////////////////////////////////////////////////////////////////////////
0:                                                   + "   % \n" + "   @RELATION golf\n" + '\n'
0:                                                   + "   @ATTRIBUTE outlook {sunny,overcast, rain}\n"
0:                                                   + "   @ATTRIBUTE temperature   NUMERIC\n"
0:                                                   + "   @ATTRIBUTE humidity  NUMERIC\n"
0:                                                   + "   @ATTRIBUTE windy {false, true}\n" 
0:                                                   + "   @ATTRIBUTE class {dont_play, play}\n" + "  \n" + '\n'  
0:                                                   + '\n' + "   @DATA\n" 
0:                                                   + "   sunny,    65, ?, false, dont_play, {2} \n"
0:                                                   + "   sunny,    80, 90,  true, dont_play\n" 
0:                                                   + "   overcast, 83, 78, false, play ,{3} \n"
0:                                                   + "   rain,     70, 96, false, play\n" 
0:                                                   + "   rain,     68, 80, false, play\n"
0:                                                   + "   rain,     65, 70, true, play\n";
/////////////////////////////////////////////////////////////////////////
0:                                                    + '\n' + "   @DATA\n" + "   {1 23.1,2 3.23,3 1.2,4 ?} {5}\n"
0:                                                    + "   {0 2.9}\n" + "   {0 2.7,2 3.2,3 1.3,4 0.2} {10} \n"
commit:baa3a8c
/////////////////////////////////////////////////////////////////////////
0:     builder.append("%comments").append('\n').append("@RELATION Mahout").append('\n').append(
0:       "@ATTRIBUTE foo numeric").append('\n').append("@ATTRIBUTE bar numeric").append('\n').append(
0:       "@ATTRIBUTE timestamp DATE \"yyyy-MM-dd HH:mm:ss\"").append('\n').append("@ATTRIBUTE junk string")
0:         .append('\n').append("@ATTRIBUTE theNominal {c,b,a}").append('\n').append("@DATA").append('\n')
0:         .append("1,2, \"2009-01-01 5:55:55\", foo, c").append('\n').append("2,3").append('\n').append(
0:           "{0 5,1 23}").append('\n');
0:     Map<String,Integer> bindings = iterable.getModel().getLabelBindings();
/////////////////////////////////////////////////////////////////////////
1:     
0:     iterable = new ARFFVectorIterable(NON_NUMERIC_ARFF, model);
1:     Iterator<Vector> iter = iterable.iterator();
1:     Vector firstVector = iter.next();
1:     
1:     assertEquals(1.0, firstVector.get(2), 0);
1:     
1:     Map<String,Map<String,Integer>> nominalMap = iterable.getModel().getNominalMap();
1:     Map<String,Integer> noms = nominalMap.get("bar");
1:     Map<Integer,ARFFType> integerARFFTypeMap = model.getTypeMap();
1:     Map<String,Long> words = model.getWords();
0:     // System.out.println("Words: " + words);
1:     Map<Integer,DateFormat> integerDateFormatMap = model.getDateMap();
/////////////////////////////////////////////////////////////////////////
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(DATE_ARFF, model);
1:     
1:     DateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.ENGLISH);
1:     Date date = format.parse("2001-07-04T12:08:56");
1:     assertEquals(result, firstVector.get(1), 0);
1:     
1:     format = new SimpleDateFormat("yyyy.MM.dd G 'at' HH:mm:ss z", Locale.ENGLISH);
1:     date = format.parse("2001.07.04 AD at 12:08:56 PDT");
1:     result = date.getTime();
1:     assertEquals(result, firstVector.get(2), 0);
1:     
1:     format = new SimpleDateFormat("EEE, MMM d, ''yy", Locale.ENGLISH);
1:     date = format.parse("Wed, Jul 4, '01,4 0:08 PM, PDT");
1:     result = date.getTime();
1:     assertEquals(result, firstVector.get(3), 0);
1:     
1:     format = new SimpleDateFormat("K:mm a, z", Locale.ENGLISH);
1:     date = format.parse("0:08 PM, PDT");
1:     result = date.getTime();
1:     assertEquals(result, firstVector.get(4), 0);
1:     
1:     format = new SimpleDateFormat("yyyyy.MMMMM.dd GGG hh:mm aaa", Locale.ENGLISH);
1:     date = format.parse("02001.July.04 AD 12:08 PM");
1:     result = date.getTime();
1:     assertEquals(result, firstVector.get(5), 0);
1:     
1:     format = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z", Locale.ENGLISH);
1:     date = format.parse("Wed, 4 Jul 2001 12:08:56 -0700");
1:     result = date.getTime();
1:     assertEquals(result, firstVector.get(6), 0);
/////////////////////////////////////////////////////////////////////////
0:     Map<String,Map<String,Integer>> nominalMap = iterable.getModel().getNominalMap();
0:     Map<String,Integer> noms = nominalMap.get("bar");
0:     Map<Integer,ARFFType> integerARFFTypeMap = model.getTypeMap();
0:     Map<String,Long> words = model.getWords();
0:     // System.out.println("Words: " + words);
0:     Map<Integer,DateFormat> integerDateFormatMap = model.getDateMap();
0:     model = new MapBackedARFFModel(model.getWords(), model.getWordCount(), model.getNominalMap());
/////////////////////////////////////////////////////////////////////////
0:   private static final String SAMPLE_DENSE_ARFF = "   % Comments\n" + "   % \n" + "   % Comments go here"
0:                                                   + "   % \n" + "   @RELATION Mahout\n" + '\n'
0:                                                   + "   @ATTRIBUTE foo  NUMERIC\n"
0:                                                   + "   @ATTRIBUTE bar   NUMERIC\n"
0:                                                   + "   @ATTRIBUTE hockey  NUMERIC\n"
0:                                                   + "   @ATTRIBUTE football   NUMERIC\n" + "  \n" + '\n'
0:                                                   + '\n' + "   @DATA\n" + "   23.1,3.23,1.2,0.2\n"
0:                                                   + "   2.9,3.0,1.2,0.2\n" + "   2.7,3.2,1.3,0.2\n"
0:                                                   + "   2.6,3.1,1.23,0.2\n" + "   23.0,3.6,1.2,0.2\n"
0:                                                   + "   23.2,3.9,1.7,0.2\n" + "   2.6,3.2,1.2,0.3\n"
0:                                                   + "   23.0,3.2,1.23,0.2\n" + "   2.2,2.9,1.2,0.2\n"
0:                                                   + "   2.9,3.1,1.23,0.1\n";
0:   private static final String SAMPLE_SPARSE_ARFF = "   % Comments\n" + "   % \n" + "   % Comments go here"
0:                                                    + "   % \n" + "   @RELATION Mahout\n" + '\n'
0:                                                    + "   @ATTRIBUTE foo  NUMERIC\n"
0:                                                    + "   @ATTRIBUTE bar   NUMERIC\n"
0:                                                    + "   @ATTRIBUTE hockey  NUMERIC\n"
0:                                                    + "   @ATTRIBUTE football   NUMERIC\n"
0:                                                    + "   @ATTRIBUTE tennis   NUMERIC\n" + "  \n" + '\n'
0:                                                    + '\n' + "   @DATA\n" + "   {1 23.1,2 3.23,3 1.2,4 0.2}\n"
0:                                                    + "   {0 2.9}\n" + "   {0 2.7,2 3.2,3 1.3,4 0.2}\n"
0:                                                    + "   {1 2.6,2 3.1,3 1.23,4 0.2}\n"
0:                                                    + "   {1 23.0,2 3.6,3 1.2,4 0.2}\n"
0:                                                    + "   {0 23.2,1 3.9,3 1.7,4 0.2}\n"
0:                                                    + "   {0 2.6,1 3.2,2 1.2,4 0.3}\n"
0:                                                    + "   {1 23.0,2 3.2,3 1.23}\n"
0:                                                    + "   {1 2.2,2 2.94,3 0.2}\n" + "   {1 2.9,2 3.1}\n";
0:   private static final String NON_NUMERIC_ARFF = "   % Comments\n" + "   % \n" + "   % Comments go here"
0:                                                  + "   % \n" + "   @RELATION Mahout\n" + '\n'
0:                                                  + "   @ATTRIBUTE junk  NUMERIC\n"
0:                                                  + "   @ATTRIBUTE foo  NUMERIC\n"
0:                                                  + "   @ATTRIBUTE bar   {c,d}\n"
0:                                                  + "   @ATTRIBUTE hockey  string\n"
0:                                                  + "   @ATTRIBUTE football   date \"yyyy-MM-dd\"\n" + "  \n"
0:                                                  + '\n' + '\n' + "   @DATA\n"
0:                                                  + "   {2 c,3 gretzky,4 1973-10-23}\n"
0:                                                  + "   {1 2.9,2 d,3 orr,4 1973-11-23}\n"
0:                                                  + "   {2 c,3 bossy,4 1981-10-23}\n"
0:                                                  + "   {1 2.6,2 c,3 lefleur,4 1989-10-23}\n"
0:                                                  + "   {3 esposito,4 1973-04-23}\n"
0:                                                  + "   {1 23.2,2 d,3 chelios,4 1999-2-23}\n"
0:                                                  + "   {3 richard,4 1973-10-12}\n"
0:                                                  + "   {3 howe,4 1983-06-23}\n"
0:                                                  + "   {0 2.2,2 d,3 messier,4 2008-11-23}\n"
0:                                                  + "   {2 c,3 roy,4 1973-10-13}\n";
0:   private static final String NON_NUMERIC_ARFF2 = "   % Comments\n" + "   % \n" + "   % Comments go here"
0:                                                   + "   % \n" + "   @RELATION Mahout\n" + '\n'
0:                                                   + "   @ATTRIBUTE junk  NUMERIC\n"
0:                                                   + "   @ATTRIBUTE foo  NUMERIC\n"
0:                                                   + "   @ATTRIBUTE test   {f,z}\n"
0:                                                   + "   @ATTRIBUTE hockey  string\n"
0:                                                   + "   @ATTRIBUTE football   date \"yyyy-MM-dd\"\n" + "  \n"
0:                                                   + '\n' + '\n' + "   @DATA\n"
0:                                                   + "   {2 f,3 gretzky,4 1973-10-23}\n"
0:                                                   + "   {1 2.9,2 z,3 orr,4 1973-11-23}\n"
0:                                                   + "   {2 f,3 bossy,4 1981-10-23}\n"
0:                                                   + "   {1 2.6,2 f,3 lefleur,4 1989-10-23}\n"
0:                                                   + "   {3 esposito,4 1973-04-23}\n"
0:                                                   + "   {1 23.2,2 z,3 chelios,4 1999-2-23}\n"
0:                                                   + "   {3 richard,4 1973-10-12}\n"
0:                                                   + "   {3 howe,4 1983-06-23}\n"
0:                                                   + "   {0 2.2,2 f,3 messier,4 2008-11-23}\n"
0:                                                   + "   {2 f,3 roy,4 1973-10-13}\n";
0:   private static final String DATE_ARFF = "   % Comments\n"
0:                                           + "   % \n"
0:                                           + "   % Comments go here"
0:                                           + "   % \n"
0:                                           + "   @RELATION MahoutDateTest\n"
0:                                           + '\n'
0:                                           + "   @ATTRIBUTE junk  NUMERIC\n"
0:                                           + "   @ATTRIBUTE date1   \n"
0:                                           + "   @ATTRIBUTE date2   date \"yyyy.MM.dd G 'at' HH:mm:ss z\" \n"
0:                                           + "   @ATTRIBUTE date3   date \"EEE, MMM d, ''yy\" \n"
0:                                           + "   @ATTRIBUTE date4   date \"K:mm a, z\" \n"
0:                                           + "   @ATTRIBUTE date5   date \"yyyyy.MMMMM.dd GGG hh:mm aaa\" \n"
0:                                           + "   @ATTRIBUTE date6   date \"EEE, d MMM yyyy HH:mm:ss Z\" \n"
0:                                           + "  \n"
0:                                           + '\n'
0:                                           + '\n'
0:                                           + "   @DATA\n"
0:                                           + "   {0 1,1 \"2001-07-04T12:08:56\",2 \"2001.07.04 AD at 12:08:56 PDT\",3 \"Wed, Jul 4, '01,4 0:08 PM, PDT\",4 \"0:08 PM, PDT\", 5 \"02001.July.04 AD 12:08 PM\" ,6 \"Wed, 4 Jul 2001 12:08:56 -0700\"  }\n"
0:                                           + "   {0 2,1 \"2001-08-04T12:09:56\",2 \"2011.07.04 AD at 12:08:56 PDT\",3 \"Mon, Jul 4, '11,4 0:08 PM, PDT\",4 \"0:08 PM, PDT\", 5 \"02001.July.14 AD 12:08 PM\" ,6 \"Mon, 4 Jul 2011 12:08:56 -0700\"  }\n";
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(1.0, firstVector.get(2),0);
commit:6fc9667
/////////////////////////////////////////////////////////////////////////
1: import java.text.SimpleDateFormat;
1: import java.util.Date;
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1:   }
0: 
1:   @Test
1:   public void testDate() throws Exception {
1:     MapBackedARFFModel model = new MapBackedARFFModel();
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(NON_NUMERIC_ARFF, model);
1:     Iterator<Vector> iter = iterable.iterator();
1:     Vector firstVector = iter.next();
0:     assertEquals(firstVector.get(2),1.0,0); 
0:     DateFormat format = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
0:     Date date = format.parse("1973-10-23");
1:     long result = date.getTime();
0:     assertEquals(result, firstVector.get(4),0);
commit:50fd693
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.utils.MahoutTestCase;
1: import org.junit.Test;
1: public final class ARFFVectorIterableTest extends MahoutTestCase {
0: 
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("Mahout", iterable.getModel().getRelation());
1:     assertNotNull(bindings);
1:     assertEquals(5, bindings.size());
1:     assertTrue(iter.hasNext());
1:     assertNotNull(next);
1:     assertTrue("Wrong instanceof", next instanceof DenseVector);
1:     assertEquals(1.0, next.get(0), EPSILON);
1:     assertEquals(2.0, next.get(1), EPSILON);
1:     assertTrue(iter.hasNext());
1:     assertNotNull(next);
1:     assertTrue("Wrong instanceof", next instanceof DenseVector);
1:     assertEquals(2.0, next.get(0), EPSILON);
1:     assertEquals(3.0, next.get(1), EPSILON);
1:     assertTrue(iter.hasNext());
1:     assertNotNull(next);
1:     assertTrue("Wrong instanceof", next instanceof RandomAccessSparseVector);
1:     assertEquals(5.0, next.get(0), EPSILON);
1:     assertEquals(23.0, next.get(1), EPSILON);
1:     assertFalse(iter.hasNext());
0: 
1:   @Test
1:       assertTrue("Vector is not dense", vector instanceof DenseVector);
1:     assertEquals(10, count);
0: 
1:   @Test
1:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
1:     assertEquals(10, count);
0: 
1:   @Test
1:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
1:     assertEquals(10, count);
1:     assertNotNull(nominalMap);
1:     assertEquals(1, nominalMap.size());
1:     assertNotNull("nominals for bar are null", noms);
1:     assertEquals(2, noms.size());
1:     assertNotNull("Type map null", integerARFFTypeMap);
1:     assertEquals(5, integerARFFTypeMap.size());
1:     assertNotNull("words null", words);
1:     assertEquals(10, words.size());
1:     assertNotNull("date format null", integerDateFormatMap);
1:     assertEquals(1, integerDateFormatMap.size());
0: 
1:   @Test
1:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
1:     assertEquals(10, count);
1:     assertNotNull(nominalMap);
1:     assertEquals(1, nominalMap.size());
1:     assertNotNull("nominals for bar are null", noms);
1:     assertEquals(2, noms.size());
1:     assertNotNull("Type map null", integerARFFTypeMap);
1:     assertEquals(5, integerARFFTypeMap.size());
1:     assertNotNull("words null", words);
1:     assertEquals(10, words.size());
1:     assertNotNull("date format null", integerDateFormatMap);
1:     assertEquals(1, integerDateFormatMap.size());
1:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
1:     assertNotNull(nominalMap);
1:     assertEquals(2, nominalMap.size());
1:     assertNotNull("nominals for bar are null", noms);
1:     assertEquals(2, noms.size());
commit:024261a
commit:210fac3
commit:ea65197
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     builder.append("%comments").append('\n').append("@RELATION Mahout").append('\n')
0:             .append("@ATTRIBUTE foo numeric").append('\n')
0:             .append("@ATTRIBUTE bar numeric").append('\n')
0:             .append("@ATTRIBUTE timestamp DATE \"yyyy-MM-dd HH:mm:ss\"").append('\n')
0:             .append("@ATTRIBUTE junk string").append('\n')
0:             .append("@ATTRIBUTE theNominal {c,b,a}").append('\n')
0:             .append("@DATA").append('\n')
0:             .append("1,2, \"2009-01-01 5:55:55\", foo, c").append('\n')
0:             .append("2,3").append('\n')
0:             .append("{0 5,1 23}").append('\n');
commit:434cdff
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.MahoutTestCase;
/////////////////////////////////////////////////////////////////////////
0: public class ARFFVectorIterableTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
0:     //System.out.println("Words: " + words);
/////////////////////////////////////////////////////////////////////////
0:     //System.out.println("Words: " + words);
commit:b3f6857
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.RandomAccessSparseVector;
/////////////////////////////////////////////////////////////////////////
0:     assertTrue("Wrong instanceof", next instanceof RandomAccessSparseVector);
/////////////////////////////////////////////////////////////////////////
0:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
/////////////////////////////////////////////////////////////////////////
0:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
/////////////////////////////////////////////////////////////////////////
0:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
/////////////////////////////////////////////////////////////////////////
0:       assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
commit:758cc1b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.vectors.arff;
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     assertEquals("Mahout", iterable.getModel().getRelation());
0:     assertEquals(5, bindings.size());
0:     assertEquals(1.0, next.get(0));
0:     assertEquals(2.0, next.get(1));
0:     assertEquals(2.0, next.get(0));
0:     assertEquals(3.0, next.get(1));
0:     assertEquals(5.0, next.get(0));
0:     assertEquals(23.0, next.get(1));
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(10, count);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(10, count);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(10, count);
0:     assertEquals(1, nominalMap.size());
0:     assertEquals(2, noms.size());
0:     assertEquals(5, integerARFFTypeMap.size());
0:     assertEquals(10, words.size());
0:     assertEquals(1, integerDateFormatMap.size());
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(10, count);
0:     assertEquals(1, nominalMap.size());
0:     assertEquals(2, noms.size());
0:     assertEquals(5, integerARFFTypeMap.size());
0:     assertEquals(10, words.size());
0:     assertEquals(1, integerDateFormatMap.size());
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(2, nominalMap.size());
0:     assertEquals(2, noms.size());
0:   private static final String SAMPLE_DENSE_ARFF = "   % Comments\n" +
0:           '\n' +
0:           '\n' +
0:           '\n' +
/////////////////////////////////////////////////////////////////////////
0:   private static final String SAMPLE_SPARSE_ARFF = "   % Comments\n" +
0:           '\n' +
0:           '\n' +
0:           '\n' +
/////////////////////////////////////////////////////////////////////////
0:   private static final String NON_NUMERIC_ARFF = "   % Comments\n" +
0:           '\n' +
0:           '\n' +
0:           '\n' +
/////////////////////////////////////////////////////////////////////////
0:   private static final String NON_NUMERIC_ARFF2 = "   % Comments\n" +
0:           '\n' +
0:           '\n' +
0:           '\n' +
author:Robin Anil
-------------------------------------------------------------------------------
commit:233d93d
/////////////////////////////////////////////////////////////////////////
1: import java.text.DateFormat;
1: import java.util.Iterator;
1: import java.util.Map;
0: 
0: import junit.framework.Assert;
0: 
0:   
0:     .append("@ATTRIBUTE foo numeric").append('\n')
0:     .append("@ATTRIBUTE bar numeric").append('\n')
0:     .append("@ATTRIBUTE timestamp DATE \"yyyy-MM-dd HH:mm:ss\"").append('\n')
0:     .append("@ATTRIBUTE junk string").append('\n')
0:     .append("@ATTRIBUTE theNominal {c,b,a}").append('\n')
0:     .append("@DATA").append('\n')
0:     .append("1,2, \"2009-01-01 5:55:55\", foo, c").append('\n')
0:     .append("2,3").append('\n')
0:     .append("{0 5,1 23}").append('\n');
0:     Assert.assertEquals("Mahout", iterable.getModel().getRelation());
0:     Assert.assertNotNull(bindings);
0:     Assert.assertEquals(5, bindings.size());
0:     Assert.assertTrue(iter.hasNext());
0:     Assert.assertNotNull(next);
0:     Assert.assertTrue("Wrong instanceof", next instanceof DenseVector);
0:     Assert.assertEquals(1.0, next.get(0));
0:     Assert.assertEquals(2.0, next.get(1));
0:     Assert.assertTrue(iter.hasNext());
0:     Assert.assertNotNull(next);
0:     Assert.assertTrue("Wrong instanceof", next instanceof DenseVector);
0:     Assert.assertEquals(2.0, next.get(0));
0:     Assert.assertEquals(3.0, next.get(1));
0:     
0:     Assert.assertTrue(iter.hasNext());
0:     Assert.assertNotNull(next);
0:     Assert.assertTrue("Wrong instanceof", next instanceof RandomAccessSparseVector);
0:     Assert.assertEquals(5.0, next.get(0));
0:     Assert.assertEquals(23.0, next.get(1));
0:     
0:     Assert.assertFalse(iter.hasNext());
0:   
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(ARFFVectorIterableTest.SAMPLE_DENSE_ARFF, model);
0:       Assert.assertTrue("Vector is not dense", vector instanceof DenseVector);
0:     Assert.assertEquals(10, count);
0:   
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(ARFFVectorIterableTest.SAMPLE_SPARSE_ARFF, model);
0:       Assert.assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
0:     Assert.assertEquals(10, count);
0:   
0:     
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(ARFFVectorIterableTest.NON_NUMERIC_ARFF, model);
0:       Assert.assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
0:     Assert.assertEquals(10, count);
0:     Assert.assertNotNull(nominalMap);
0:     Assert.assertEquals(1, nominalMap.size());
0:     Assert.assertNotNull("nominals for bar are null", noms);
0:     Assert.assertEquals(2, noms.size());
0:     Assert.assertNotNull("Type map null", integerARFFTypeMap);
0:     Assert.assertEquals(5, integerARFFTypeMap.size());
0:     Assert.assertNotNull("words null", words);
0:     Assert.assertEquals(10, words.size());
0:     Assert.assertNotNull("date format null", integerDateFormatMap);
0:     Assert.assertEquals(1, integerDateFormatMap.size());
0:     
0:   
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(ARFFVectorIterableTest.NON_NUMERIC_ARFF, model);
0:       Assert.assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
0:     Assert.assertEquals(10, count);
0:     Assert.assertNotNull(nominalMap);
0:     Assert.assertEquals(1, nominalMap.size());
0:     Assert.assertNotNull("nominals for bar are null", noms);
0:     Assert.assertEquals(2, noms.size());
0:     Assert.assertNotNull("Type map null", integerARFFTypeMap);
0:     Assert.assertEquals(5, integerARFFTypeMap.size());
0:     Assert.assertNotNull("words null", words);
0:     Assert.assertEquals(10, words.size());
0:     Assert.assertNotNull("date format null", integerDateFormatMap);
0:     Assert.assertEquals(1, integerDateFormatMap.size());
0:       model.getNominalMap());
0:     iterable = new ARFFVectorIterable(ARFFVectorIterableTest.NON_NUMERIC_ARFF2, model);
0:       Assert.assertTrue("Vector is not dense", vector instanceof RandomAccessSparseVector);
0:     Assert.assertNotNull(nominalMap);
0:     Assert.assertEquals(2, nominalMap.size());
0:     Assert.assertNotNull("nominals for bar are null", noms);
0:     Assert.assertEquals(2, noms.size());
0:   
0:   
0:   "   % \n" +
0:   "   % Comments go here" +
0:   "   % \n" +
0:   "   @RELATION Mahout\n" +
0:   '\n' +
0:   "   @ATTRIBUTE foo  NUMERIC\n" +
0:   "   @ATTRIBUTE bar   NUMERIC\n" +
0:   "   @ATTRIBUTE hockey  NUMERIC\n" +
0:   "   @ATTRIBUTE football   NUMERIC\n" +
0:   "  \n" +
0:   '\n' +
0:   '\n' +
0:   "   @DATA\n" +
0:   "   23.1,3.23,1.2,0.2\n" +
0:   "   2.9,3.0,1.2,0.2\n" +
0:   "   2.7,3.2,1.3,0.2\n" +
0:   "   2.6,3.1,1.23,0.2\n" +
0:   "   23.0,3.6,1.2,0.2\n" +
0:   "   23.2,3.9,1.7,0.2\n" +
0:   "   2.6,3.2,1.2,0.3\n" +
0:   "   23.0,3.2,1.23,0.2\n" +
0:   "   2.2,2.9,1.2,0.2\n" +
0:   "   2.9,3.1,1.23,0.1\n";
0:   
0:   
0:   "   % \n" +
0:   "   % Comments go here" +
0:   "   % \n" +
0:   "   @RELATION Mahout\n" +
0:   '\n' +
0:   "   @ATTRIBUTE foo  NUMERIC\n" +
0:   "   @ATTRIBUTE bar   NUMERIC\n" +
0:   "   @ATTRIBUTE hockey  NUMERIC\n" +
0:   "   @ATTRIBUTE football   NUMERIC\n" +
0:   "   @ATTRIBUTE tennis   NUMERIC\n" +
0:   "  \n" +
0:   '\n' +
0:   '\n' +
0:   "   @DATA\n" +
0:   "   {1 23.1,2 3.23,3 1.2,4 0.2}\n" +
0:   "   {0 2.9}\n" +
0:   "   {0 2.7,2 3.2,3 1.3,4 0.2}\n" +
0:   "   {1 2.6,2 3.1,3 1.23,4 0.2}\n" +
0:   "   {1 23.0,2 3.6,3 1.2,4 0.2}\n" +
0:   "   {0 23.2,1 3.9,3 1.7,4 0.2}\n" +
0:   "   {0 2.6,1 3.2,2 1.2,4 0.3}\n" +
0:   "   {1 23.0,2 3.2,3 1.23}\n" +
0:   "   {1 2.2,2 2.94 0.2}\n" +
0:   "   {1 2.9,2 3.1}\n";
0:   
0:   "   % \n" +
0:   "   % Comments go here" +
0:   "   % \n" +
0:   "   @RELATION Mahout\n" +
0:   '\n' +
0:   "   @ATTRIBUTE junk  NUMERIC\n" +
0:   "   @ATTRIBUTE foo  NUMERIC\n" +
0:   "   @ATTRIBUTE bar   {c,d}\n" +
0:   "   @ATTRIBUTE hockey  string\n" +
0:   "   @ATTRIBUTE football   date \"yyyy-MM-dd\"\n" +
0:   "  \n" +
0:   '\n' +
0:   '\n' +
0:   "   @DATA\n" +
0:   "   {2 c,3 gretzky,4 1973-10-23}\n" +
0:   "   {1 2.9,2 d,3 orr,4 1973-11-23}\n" +
0:   "   {2 c,3 bossy,4 1981-10-23}\n" +
0:   "   {1 2.6,2 c,3 lefleur,4 1989-10-23}\n" +
0:   "   {3 esposito,4 1973-04-23}\n" +
0:   "   {1 23.2,2 d,3 chelios,4 1999-2-23}\n" +
0:   "   {3 richard,4 1973-10-12}\n" +
0:   "   {3 howe,4 1983-06-23}\n" +
0:   "   {0 2.2,2 d,3 messier,4 2008-11-23}\n" +
0:   "   {2 c,3 roy,4 1973-10-13}\n";
0:   
0:   "   % \n" +
0:   "   % Comments go here" +
0:   "   % \n" +
0:   "   @RELATION Mahout\n" +
0:   '\n' +
0:   "   @ATTRIBUTE junk  NUMERIC\n" +
0:   "   @ATTRIBUTE foo  NUMERIC\n" +
0:   "   @ATTRIBUTE test   {f,z}\n" +
0:   "   @ATTRIBUTE hockey  string\n" +
0:   "   @ATTRIBUTE football   date \"yyyy-MM-dd\"\n" +
0:   "  \n" +
0:   '\n' +
0:   '\n' +
0:   "   @DATA\n" +
0:   "   {2 f,3 gretzky,4 1973-10-23}\n" +
0:   "   {1 2.9,2 z,3 orr,4 1973-11-23}\n" +
0:   "   {2 f,3 bossy,4 1981-10-23}\n" +
0:   "   {1 2.6,2 f,3 lefleur,4 1989-10-23}\n" +
0:   "   {3 esposito,4 1973-04-23}\n" +
0:   "   {1 23.2,2 z,3 chelios,4 1999-2-23}\n" +
0:   "   {3 richard,4 1973-10-12}\n" +
0:   "   {3 howe,4 1983-06-23}\n" +
0:   "   {0 2.2,2 f,3 messier,4 2008-11-23}\n" +
0:   "   {2 f,3 roy,4 1973-10-13}\n";
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:a435efb
/////////////////////////////////////////////////////////////////////////
0: 
1: import org.apache.mahout.math.DenseVector;
0: import org.apache.mahout.math.SparseVector;
1: import org.apache.mahout.math.Vector;
commit:20faad6
/////////////////////////////////////////////////////////////////////////
0: import java.text.DateFormat;
/////////////////////////////////////////////////////////////////////////
0:     assertTrue("bindings Size: " + bindings.size() + " is not: " + 5, bindings.size() == 5);
/////////////////////////////////////////////////////////////////////////
1:     MapBackedARFFModel model = new MapBackedARFFModel();
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(NON_NUMERIC_ARFF, model);
1:     int count = 0;
1:     for (Vector vector : iterable) {
0:       assertTrue("Vector is not dense", vector instanceof SparseVector);
1:       count++;
0:     assertTrue(count + " does not equal: " + 10, count == 10);
0:     Map<String, Map<String, Integer>> nominalMap = iterable.getModel().getNominalMap();
0:     assertNotNull(nominalMap);
0:     assertTrue("nominalMap Size: " + nominalMap.size() + " is not: " + 1, nominalMap.size() == 1);
0:     Map<String, Integer> noms = nominalMap.get("bar");
0:     assertNotNull("nominals for bar are null", noms);
0:     assertTrue("noms Size: " + noms.size() + " is not: " + 2, noms.size() == 2);
0:     Map<Integer, ARFFType> integerARFFTypeMap = model.getTypeMap();
0:     assertNotNull("Type map null", integerARFFTypeMap);
0:     assertTrue("integerARFFTypeMap Size: " + integerARFFTypeMap.size() + " is not: " + 5, integerARFFTypeMap.size() == 5);
0:     Map<String, Long> words = model.getWords();
0:     assertNotNull("words null", words);
0:     assertTrue("words Size: " + words.size() + " is not: " + 10, words.size() == 10);
0:     System.out.println("Words: " + words);
0:     Map<Integer, DateFormat> integerDateFormatMap = model.getDateMap();
0:     assertNotNull("date format null", integerDateFormatMap);
0:     assertTrue("integerDateFormatMap Size: " + integerDateFormatMap.size() + " is not: " + 1, integerDateFormatMap.size() == 1);
1:   public void testMultipleNoms() throws Exception {
1:     MapBackedARFFModel model = new MapBackedARFFModel();
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(NON_NUMERIC_ARFF, model);
1:     int count = 0;
1:     for (Vector vector : iterable) {
0:       assertTrue("Vector is not dense", vector instanceof SparseVector);
1:       count++;
1:     }
0:     assertTrue(count + " does not equal: " + 10, count == 10);
0:     Map<String, Map<String, Integer>> nominalMap = iterable.getModel().getNominalMap();
0:     assertNotNull(nominalMap);
0:     assertTrue("nominalMap Size: " + nominalMap.size() + " is not: " + 1, nominalMap.size() == 1);
0:     Map<String, Integer> noms = nominalMap.get("bar");
0:     assertNotNull("nominals for bar are null", noms);
0:     assertTrue("noms Size: " + noms.size() + " is not: " + 2, noms.size() == 2);
0:     Map<Integer, ARFFType> integerARFFTypeMap = model.getTypeMap();
0:     assertNotNull("Type map null", integerARFFTypeMap);
0:     assertTrue("integerARFFTypeMap Size: " + integerARFFTypeMap.size() + " is not: " + 5, integerARFFTypeMap.size() == 5);
0:     Map<String, Long> words = model.getWords();
0:     assertNotNull("words null", words);
0:     assertTrue("words Size: " + words.size() + " is not: " + 10, words.size() == 10);
0:     System.out.println("Words: " + words);
0:     Map<Integer, DateFormat> integerDateFormatMap = model.getDateMap();
0:     assertNotNull("date format null", integerDateFormatMap);
0:     assertTrue("integerDateFormatMap Size: " + integerDateFormatMap.size() + " is not: " + 1, integerDateFormatMap.size() == 1);
0:     model = new MapBackedARFFModel(model.getWords(), model.getWordCount(),
0:             model.getNominalMap());
0:     iterable = new ARFFVectorIterable(NON_NUMERIC_ARFF2, model);
1:     count = 0;
1:     for (Vector vector : iterable) {
0:       assertTrue("Vector is not dense", vector instanceof SparseVector);
1:       count++;
1:     }
1:     nominalMap = model.getNominalMap();
0:     assertNotNull(nominalMap);
0:     assertTrue("nominalMap Size: " + nominalMap.size() + " is not: " + 2, nominalMap.size() == 2);
1:     noms = nominalMap.get("test");
0:     assertNotNull("nominals for bar are null", noms);
0:     assertTrue("noms Size: " + noms.size() + " is not: " + 2, noms.size() == 2);
1:   }
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:   public static final String NON_NUMERIC_ARFF2 = "   % Comments\n" +
0:           "   % \n" +
0:           "   % Comments go here" +
0:           "   % \n" +
0:           "   @RELATION Mahout\n" +
0:           "\n" +
0:           "   @ATTRIBUTE junk  NUMERIC\n" +
0:           "   @ATTRIBUTE foo  NUMERIC\n" +
0:           "   @ATTRIBUTE test   {f,z}\n" +
0:           "   @ATTRIBUTE hockey  string\n" +
0:           "   @ATTRIBUTE football   date \"yyyy-MM-dd\"\n" +
0:           "  \n" +
0:           "\n" +
0:           "\n" +
0:           "   @DATA\n" +
0:           "   {2 f,3 gretzky,4 1973-10-23}\n" +
0:           "   {1 2.9,2 z,3 orr,4 1973-11-23}\n" +
0:           "   {2 f,3 bossy,4 1981-10-23}\n" +
0:           "   {1 2.6,2 f,3 lefleur,4 1989-10-23}\n" +
0:           "   {3 esposito,4 1973-04-23}\n" +
0:           "   {1 23.2,2 z,3 chelios,4 1999-2-23}\n" +
0:           "   {3 richard,4 1973-10-12}\n" +
0:           "   {3 howe,4 1983-06-23}\n" +
0:           "   {0 2.2,2 f,3 messier,4 2008-11-23}\n" +
0:           "   {2 f,3 roy,4 1973-10-13}\n";
commit:3bad4df
/////////////////////////////////////////////////////////////////////////
0:     ARFFModel model = new MapBackedARFFModel();
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(builder.toString(), model);
/////////////////////////////////////////////////////////////////////////
0:     ARFFModel model = new MapBackedARFFModel();
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(SAMPLE_DENSE_ARFF, model);
/////////////////////////////////////////////////////////////////////////
0:     ARFFModel model = new MapBackedARFFModel();
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(SAMPLE_SPARSE_ARFF, model);
/////////////////////////////////////////////////////////////////////////
0:       MapBackedARFFModel model = new MapBackedARFFModel();
0:       ARFFVectorIterable iterable = new ARFFVectorIterable(NON_NUMERIC_ARFF, model);
/////////////////////////////////////////////////////////////////////////
0:       Map<Integer, ARFFType> integerARFFTypeMap = model.getTypeMap();
0:       Map<String, Long> words = model.getWords();
0:       Map<Integer, DateFormat> integerDateFormatMap = model.getDateMap();
commit:ee4a261
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.arff;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
0: import junit.framework.TestCase;
0: import org.apache.mahout.matrix.DenseVector;
0: import org.apache.mahout.matrix.SparseVector;
0: import org.apache.mahout.matrix.Vector;
0: import org.apache.mahout.utils.strings.StringUtil;
0: 
0: import java.util.Iterator;
0: import java.util.Map;
0: import java.text.DateFormat;
0: 
0: 
1: /**
1:  *
1:  *
0:  **/
0: public class ARFFVectorIterableTest extends TestCase {
0: 
1:   public void testValues() throws Exception {
0:     StringBuilder builder = new StringBuilder();
0:     builder.append("%comments").append(StringUtil.LINE_SEP).append("@RELATION Mahout").append(StringUtil.LINE_SEP)
0:             .append("@ATTRIBUTE foo numeric").append(StringUtil.LINE_SEP)
0:             .append("@ATTRIBUTE bar numeric").append(StringUtil.LINE_SEP)
0:             .append("@ATTRIBUTE timestamp DATE \"yyyy-MM-dd HH:mm:ss\"").append(StringUtil.LINE_SEP)
0:             .append("@ATTRIBUTE junk string").append(StringUtil.LINE_SEP)
0:             .append("@ATTRIBUTE theNominal {c,b,a}").append(StringUtil.LINE_SEP)
0:             .append("@DATA").append(StringUtil.LINE_SEP)
0:             .append("1,2, \"2009-01-01 5:55:55\", foo, c").append(StringUtil.LINE_SEP)
0:             .append("2,3").append(StringUtil.LINE_SEP)
0:             .append("{0 5,1 23}").append(StringUtil.LINE_SEP);
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(builder.toString());
0:     assertTrue(iterable.getModel().getRelation() + " is not equal to " + "Mahout", iterable.getModel().getRelation().equals("Mahout") == true);
0:     Map<String, Integer> bindings = iterable.getModel().getLabelBindings();
0:     assertNotNull(bindings);
1:     Iterator<Vector> iter = iterable.iterator();
0:     assertTrue(iter.hasNext());
1:     Vector next = iter.next();
0:     assertNotNull(next);
0:     assertTrue("Wrong instanceof", next instanceof DenseVector);
0:     assertEquals("", next.get(0), 1.0);
0:     assertEquals("", next.get(1), 2.0);
0:     assertTrue(iter.hasNext());
1:     next = iter.next();
0:     assertNotNull(next);
0:     assertTrue("Wrong instanceof", next instanceof DenseVector);
0:     assertEquals("", next.get(0), 2.0);
0:     assertEquals("", next.get(1), 3.0);
0: 
0:     assertTrue(iter.hasNext());
1:     next = iter.next();
0:     assertNotNull(next);
0:     assertTrue("Wrong instanceof", next instanceof SparseVector);
0:     assertEquals("", next.get(0), 5.0);
0:     assertEquals("", next.get(1), 23.0);
0: 
0:     assertFalse(iter.hasNext());
1:   }
0: 
1:   public void testDense() throws Exception {
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(SAMPLE_DENSE_ARFF);
1:     int count = 0;
1:     for (Vector vector : iterable) {
0:       assertTrue("Vector is not dense", vector instanceof DenseVector);
1:       count++;
1:     }
0:     assertTrue(count + " does not equal: " + 10, count == 10);
1:   }
0: 
1:   public void testSparse() throws Exception {
0:     ARFFVectorIterable iterable = new ARFFVectorIterable(SAMPLE_SPARSE_ARFF);
1:     int count = 0;
1:     for (Vector vector : iterable) {
0:       assertTrue("Vector is not dense", vector instanceof SparseVector);
1:       count++;
1:     }
0:     assertTrue(count + " does not equal: " + 10, count == 10);
1:   }
0: 
1:   public void testNonNumeric() throws Exception {
0:     try {
0:       ARFFVectorIterable iterable = new ARFFVectorIterable(NON_NUMERIC_ARFF);
1:       int count = 0;
1:       for (Vector vector : iterable) {
0:         assertTrue("Vector is not dense", vector instanceof SparseVector);
1:         count++;
1:       }
0:       assertTrue(count + " does not equal: " + 10, count == 10);
0:       Map<String, Integer> nominalMap = iterable.getModel().getNominalMap();
0:       assertNotNull(nominalMap);
0:       assertTrue("nominalMap Size: " + nominalMap.size() + " is not: " + 2, nominalMap.size() == 2);
0:       Map<Integer, ARFFType> integerARFFTypeMap = iterable.getModel().getTypeMap();
0:       assertNotNull("Type map null", integerARFFTypeMap);
0:       assertTrue("integerARFFTypeMap Size: " + integerARFFTypeMap.size() + " is not: " + 5, integerARFFTypeMap.size() == 5);
0:       Map<String, Long> words = iterable.getModel().getWords();
0:       assertNotNull("words null", words);
0:       assertTrue("words Size: " + words.size() + " is not: " + 10, words.size() == 10);
0:       System.out.println("Words: " + words);
0:       Map<Integer, DateFormat> integerDateFormatMap = iterable.getModel().getDateMap();
0:       assertNotNull("date format null", integerDateFormatMap);
0:       assertTrue("integerDateFormatMap Size: " + integerDateFormatMap.size() + " is not: " + 1, integerDateFormatMap.size() == 1);
0:     } catch (UnsupportedOperationException e) {
0: 
1:     }
0: 
1:   }
0: 
0: 
0:   public static final String SAMPLE_DENSE_ARFF = "   % Comments\n" +
0:           "   % \n" +
0:           "   % Comments go here" +
0:           "   % \n" +
0:           "   @RELATION Mahout\n" +
0:           "\n" +
0:           "   @ATTRIBUTE foo  NUMERIC\n" +
0:           "   @ATTRIBUTE bar   NUMERIC\n" +
0:           "   @ATTRIBUTE hockey  NUMERIC\n" +
0:           "   @ATTRIBUTE football   NUMERIC\n" +
0:           "  \n" +
0:           "\n" +
0:           "\n" +
0:           "   @DATA\n" +
0:           "   23.1,3.23,1.2,0.2\n" +
0:           "   2.9,3.0,1.2,0.2\n" +
0:           "   2.7,3.2,1.3,0.2\n" +
0:           "   2.6,3.1,1.23,0.2\n" +
0:           "   23.0,3.6,1.2,0.2\n" +
0:           "   23.2,3.9,1.7,0.2\n" +
0:           "   2.6,3.2,1.2,0.3\n" +
0:           "   23.0,3.2,1.23,0.2\n" +
0:           "   2.2,2.9,1.2,0.2\n" +
0:           "   2.9,3.1,1.23,0.1\n";
0: 
0: 
0:   public static final String SAMPLE_SPARSE_ARFF = "   % Comments\n" +
0:           "   % \n" +
0:           "   % Comments go here" +
0:           "   % \n" +
0:           "   @RELATION Mahout\n" +
0:           "\n" +
0:           "   @ATTRIBUTE foo  NUMERIC\n" +
0:           "   @ATTRIBUTE bar   NUMERIC\n" +
0:           "   @ATTRIBUTE hockey  NUMERIC\n" +
0:           "   @ATTRIBUTE football   NUMERIC\n" +
0:           "   @ATTRIBUTE tennis   NUMERIC\n" +
0:           "  \n" +
0:           "\n" +
0:           "\n" +
0:           "   @DATA\n" +
0:           "   {1 23.1,2 3.23,3 1.2,4 0.2}\n" +
0:           "   {0 2.9}\n" +
0:           "   {0 2.7,2 3.2,3 1.3,4 0.2}\n" +
0:           "   {1 2.6,2 3.1,3 1.23,4 0.2}\n" +
0:           "   {1 23.0,2 3.6,3 1.2,4 0.2}\n" +
0:           "   {0 23.2,1 3.9,3 1.7,4 0.2}\n" +
0:           "   {0 2.6,1 3.2,2 1.2,4 0.3}\n" +
0:           "   {1 23.0,2 3.2,3 1.23}\n" +
0:           "   {1 2.2,2 2.94 0.2}\n" +
0:           "   {1 2.9,2 3.1}\n";
0: 
0:   public static final String NON_NUMERIC_ARFF = "   % Comments\n" +
0:           "   % \n" +
0:           "   % Comments go here" +
0:           "   % \n" +
0:           "   @RELATION Mahout\n" +
0:           "\n" +
0:           "   @ATTRIBUTE junk  NUMERIC\n" +
0:           "   @ATTRIBUTE foo  NUMERIC\n" +
0:           "   @ATTRIBUTE bar   {c,d}\n" +
0:           "   @ATTRIBUTE hockey  string\n" +
0:           "   @ATTRIBUTE football   date \"yyyy-MM-dd\"\n" +
0:           "  \n" +
0:           "\n" +
0:           "\n" +
0:           "   @DATA\n" +
0:           "   {2 c,3 gretzky,4 1973-10-23}\n" +
0:           "   {1 2.9,2 d,3 orr,4 1973-11-23}\n" +
0:           "   {2 c,3 bossy,4 1981-10-23}\n" +
0:           "   {1 2.6,2 c,3 lefleur,4 1989-10-23}\n" +
0:           "   {3 esposito,4 1973-04-23}\n" +
0:           "   {1 23.2,2 d,3 chelios,4 1999-2-23}\n" +
0:           "   {3 richard,4 1973-10-12}\n" +
0:           "   {3 howe,4 1983-06-23}\n" +
0:           "   {0 2.2,2 d,3 messier,4 2008-11-23}\n" +
0:           "   {2 c,3 roy,4 1973-10-13}\n";
1: }
============================================================================