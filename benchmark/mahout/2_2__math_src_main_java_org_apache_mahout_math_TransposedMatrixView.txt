1:0b564c7: /*
1:0b564c7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0b564c7:  * contributor license agreements.  See the NOTICE file distributed with
1:0b564c7:  * this work for additional information regarding copyright ownership.
1:0b564c7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0b564c7:  * (the "License"); you may not use this file except in compliance with
1:0b564c7:  * the License.  You may obtain a copy of the License at
1:0b564c7:  *
1:0b564c7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0b564c7:  *
1:0b564c7:  * Unless required by applicable law or agreed to in writing, software
1:0b564c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0b564c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0b564c7:  * See the License for the specific language governing permissions and
1:0b564c7:  * limitations under the License.
1:0b564c7:  */
1:0b564c7: 
1:0b564c7: package org.apache.mahout.math;
1:0b564c7: 
1:0b564c7: import org.apache.mahout.math.flavor.BackEnum;
1:0b564c7: import org.apache.mahout.math.flavor.MatrixFlavor;
1:0b564c7: import org.apache.mahout.math.flavor.TraversingStructureEnum;
1:0b564c7: import org.apache.mahout.math.function.DoubleDoubleFunction;
1:0b564c7: import org.apache.mahout.math.function.DoubleFunction;
1:0b564c7: 
1:0b564c7: /**
1:0b564c7:  * Matrix View backed by an {@link org.apache.mahout.math.function.IntIntFunction}
1:0b564c7:  */
1:292b718: public class TransposedMatrixView extends AbstractMatrix {
1:0b564c7: 
1:0b564c7:   private Matrix m;
1:0b564c7: 
1:0b564c7:   public TransposedMatrixView(Matrix m) {
1:0b564c7:     super(m.numCols(), m.numRows());
1:0b564c7:     this.m = m;
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public Matrix assignColumn(int column, Vector other) {
1:0b564c7:     m.assignRow(column,other);
1:0b564c7:     return this;
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public Matrix assignRow(int row, Vector other) {
1:0b564c7:     m.assignColumn(row,other);
1:0b564c7:     return this;
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public double getQuick(int row, int column) {
1:0b564c7:     return m.getQuick(column,row);
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public Matrix like() {
1:0b564c7:     return m.like(rows, columns);
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public Matrix like(int rows, int columns) {
1:0b564c7:     return m.like(rows,columns);
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public void setQuick(int row, int column, double value) {
1:0b564c7:     m.setQuick(column, row, value);
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public Vector viewRow(int row) {
1:0b564c7:     return m.viewColumn(row);
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public Vector viewColumn(int column) {
1:0b564c7:     return m.viewRow(column);
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public Matrix assign(double value) {
1:0b564c7:     return m.assign(value);
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public Matrix assign(Matrix other, DoubleDoubleFunction function) {
1:0b564c7:     if (other instanceof TransposedMatrixView) {
1:0b564c7:       m.assign(((TransposedMatrixView) other).m, function);
1:0b564c7:     } else {
1:0b564c7:       m.assign(new TransposedMatrixView(other), function);
1:0b564c7:     }
1:0b564c7:     return this;
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public Matrix assign(Matrix other) {
1:0b564c7:     if (other instanceof TransposedMatrixView) {
1:0b564c7:       return m.assign(((TransposedMatrixView) other).m);
1:0b564c7:     } else {
1:0b564c7:       return m.assign(new TransposedMatrixView(other));
1:0b564c7:     }
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public Matrix assign(DoubleFunction function) {
1:0b564c7:     return m.assign(function);
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   @Override
1:0b564c7:   public MatrixFlavor getFlavor() {
1:0b564c7:     return flavor;
1:0b564c7:   }
1:0b564c7: 
1:0b564c7:   private MatrixFlavor flavor = new MatrixFlavor() {
1:0b564c7:     @Override
1:0b564c7:     public BackEnum getBacking() {
1:0b564c7:       return m.getFlavor().getBacking();
1:0b564c7:     }
1:0b564c7: 
1:0b564c7:     @Override
1:0b564c7:     public TraversingStructureEnum getStructure() {
1:0b564c7:       TraversingStructureEnum flavor = m.getFlavor().getStructure();
1:0b564c7:       switch (flavor) {
1:0b564c7:         case COLWISE:
1:0b564c7:           return TraversingStructureEnum.ROWWISE;
1:0b564c7:         case SPARSECOLWISE:
1:0b564c7:           return TraversingStructureEnum.SPARSEROWWISE;
1:0b564c7:         case ROWWISE:
1:0b564c7:           return TraversingStructureEnum.COLWISE;
1:0b564c7:         case SPARSEROWWISE:
1:0b564c7:           return TraversingStructureEnum.SPARSECOLWISE;
1:0b564c7:         default:
1:0b564c7:           return flavor;
1:0b564c7:       }
1:0b564c7:     }
1:0b564c7: 
1:0b564c7:     @Override
1:0b564c7:     public boolean isDense() {
1:0b564c7:       return m.getFlavor().isDense();
1:0b564c7:     }
1:0b564c7:   };
1:0b564c7: 
1:0b564c7:   Matrix getDelegate() {
1:0b564c7:     return m;
1:0b564c7:   }
1:0b564c7: 
1:0b564c7: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:292b718
/////////////////////////////////////////////////////////////////////////
1: public class TransposedMatrixView extends AbstractMatrix {
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:0b564c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.math.flavor.BackEnum;
1: import org.apache.mahout.math.flavor.MatrixFlavor;
1: import org.apache.mahout.math.flavor.TraversingStructureEnum;
1: import org.apache.mahout.math.function.DoubleDoubleFunction;
1: import org.apache.mahout.math.function.DoubleFunction;
1: 
1: /**
1:  * Matrix View backed by an {@link org.apache.mahout.math.function.IntIntFunction}
1:  */
0: class TransposedMatrixView extends AbstractMatrix {
1: 
1:   private Matrix m;
1: 
1:   public TransposedMatrixView(Matrix m) {
1:     super(m.numCols(), m.numRows());
1:     this.m = m;
1:   }
1: 
1:   @Override
1:   public Matrix assignColumn(int column, Vector other) {
1:     m.assignRow(column,other);
1:     return this;
1:   }
1: 
1:   @Override
1:   public Matrix assignRow(int row, Vector other) {
1:     m.assignColumn(row,other);
1:     return this;
1:   }
1: 
1:   @Override
1:   public double getQuick(int row, int column) {
1:     return m.getQuick(column,row);
1:   }
1: 
1:   @Override
1:   public Matrix like() {
1:     return m.like(rows, columns);
1:   }
1: 
1:   @Override
1:   public Matrix like(int rows, int columns) {
1:     return m.like(rows,columns);
1:   }
1: 
1:   @Override
1:   public void setQuick(int row, int column, double value) {
1:     m.setQuick(column, row, value);
1:   }
1: 
1:   @Override
1:   public Vector viewRow(int row) {
1:     return m.viewColumn(row);
1:   }
1: 
1:   @Override
1:   public Vector viewColumn(int column) {
1:     return m.viewRow(column);
1:   }
1: 
1:   @Override
1:   public Matrix assign(double value) {
1:     return m.assign(value);
1:   }
1: 
1:   @Override
1:   public Matrix assign(Matrix other, DoubleDoubleFunction function) {
1:     if (other instanceof TransposedMatrixView) {
1:       m.assign(((TransposedMatrixView) other).m, function);
1:     } else {
1:       m.assign(new TransposedMatrixView(other), function);
1:     }
1:     return this;
1:   }
1: 
1:   @Override
1:   public Matrix assign(Matrix other) {
1:     if (other instanceof TransposedMatrixView) {
1:       return m.assign(((TransposedMatrixView) other).m);
1:     } else {
1:       return m.assign(new TransposedMatrixView(other));
1:     }
1:   }
1: 
1:   @Override
1:   public Matrix assign(DoubleFunction function) {
1:     return m.assign(function);
1:   }
1: 
1:   @Override
1:   public MatrixFlavor getFlavor() {
1:     return flavor;
1:   }
1: 
1:   private MatrixFlavor flavor = new MatrixFlavor() {
1:     @Override
1:     public BackEnum getBacking() {
1:       return m.getFlavor().getBacking();
1:     }
1: 
1:     @Override
1:     public TraversingStructureEnum getStructure() {
1:       TraversingStructureEnum flavor = m.getFlavor().getStructure();
1:       switch (flavor) {
1:         case COLWISE:
1:           return TraversingStructureEnum.ROWWISE;
1:         case SPARSECOLWISE:
1:           return TraversingStructureEnum.SPARSEROWWISE;
1:         case ROWWISE:
1:           return TraversingStructureEnum.COLWISE;
1:         case SPARSEROWWISE:
1:           return TraversingStructureEnum.SPARSECOLWISE;
1:         default:
1:           return flavor;
1:       }
1:     }
1: 
1:     @Override
1:     public boolean isDense() {
1:       return m.getFlavor().isDense();
1:     }
1:   };
1: 
1:   Matrix getDelegate() {
1:     return m;
1:   }
1: 
1: }
============================================================================