1:3c71363: /**
1:3c71363:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3c71363:  * contributor license agreements.  See the NOTICE file distributed with
1:3c71363:  * this work for additional information regarding copyright ownership.
1:3c71363:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3c71363:  * (the "License"); you may not use this file except in compliance with
1:3c71363:  * the License.  You may obtain a copy of the License at
1:3c71363:  *
1:3c71363:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3c71363:  *
1:3c71363:  * Unless required by applicable law or agreed to in writing, software
1:3c71363:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c71363:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c71363:  * See the License for the specific language governing permissions and
1:3c71363:  * limitations under the License.
1:3c71363:  */
1:3c71363: 
1:3c71363: package org.apache.mahout.common.distance;
1:3c71363: 
1:85f9ece: import java.util.ArrayList;
1:3c71363: import java.util.Collection;
1:3c71363: import java.util.List;
1:3c71363: 
1:3c71363: import org.apache.hadoop.conf.Configuration;
1:3c71363: import org.apache.mahout.common.parameters.DoubleParameter;
1:3c71363: import org.apache.mahout.common.parameters.Parameter;
1:3c71363: import org.apache.mahout.math.Vector;
1:a8d3dbd: import org.apache.mahout.math.function.Functions;
1:3c71363: 
1:3c71363: /** 
1:3c71363:  * Implement Minkowski distance, a real-valued generalization of the 
1:3c71363:  * integral L(n) distances: Manhattan = L1, Euclidean = L2. 
1:3c71363:  * For high numbers of dimensions, very high exponents give more useful distances. 
1:3c71363:  * 
1:3c71363:  * Note: Math.pow is clever about integer-valued doubles.
1:3c71363:  **/
1:3c71363: public class MinkowskiDistanceMeasure implements DistanceMeasure {
1:3c71363: 
1:3c71363:   private static final double EXPONENT = 3.0;
1:3c71363: 
1:3c71363:   private List<Parameter<?>> parameters;
1:3c71363:   private double exponent = EXPONENT;
1:3c71363:   
1:3c71363:   public MinkowskiDistanceMeasure() {
2:3c71363:   }
1:3c71363:   
1:3c71363:   public MinkowskiDistanceMeasure(double exponent) {
1:3c71363:     this.exponent = exponent;
1:3c71363:   }
1:3c71363: 
1:3c71363:   @Override
1:3c71363:   public void createParameters(String prefix, Configuration conf) {
1:85f9ece:     parameters = new ArrayList<>();
1:3c71363:     Parameter<?> param =
1:3c71363:         new DoubleParameter(prefix, "exponent", conf, EXPONENT, "Exponent for Fractional Lagrange distance");
1:3c71363:     parameters.add(param);
1:3c71363:   }
1:3c71363: 
1:3c71363:   @Override
1:3c71363:   public Collection<Parameter<?>> getParameters() {
1:3c71363:     return parameters;
1:3c71363:   }
1:3c71363: 
1:3c71363:   @Override
1:3c71363:   public void configure(Configuration jobConf) {
1:3c71363:     if (parameters == null) {
1:3c71363:       ParameteredGeneralizations.configureParameters(this, jobConf);
1:3c71363:     }
1:3c71363:   }
1:3c71363: 
1:3c71363:   public double getExponent() {
1:3c71363:     return exponent;
1:3c71363:   }
1:3c71363: 
1:3c71363:   public void setExponent(double exponent) {
1:3c71363:     this.exponent = exponent;
1:3c71363:   }
1:3c71363: 
1:3c71363:   /**
1:3c71363:    *  Math.pow is clever about integer-valued doubles
1:3c71363:    */
1:3c71363:   @Override
1:3c71363:   public double distance(Vector v1, Vector v2) {
1:a8d3dbd:     return Math.pow(v1.aggregate(v2, Functions.PLUS, Functions.minusAbsPow(exponent)), 1.0 / exponent);
1:3c71363:   }
1:3c71363: 
1:3c71363:   // TODO: how?
1:3c71363:   @Override
1:3c71363:   public double distance(double centroidLengthSquare, Vector centroid, Vector v) {
1:3c71363:     return distance(centroid, v); // TODO - can this use centroidLengthSquare somehow?
1:3c71363:   }
1:3c71363: 
1:3c71363: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     parameters = new ArrayList<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:dfilimon
-------------------------------------------------------------------------------
commit:a8d3dbd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1:     return Math.pow(v1.aggregate(v2, Functions.PLUS, Functions.minusAbsPow(exponent)), 1.0 / exponent);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     parameters = Lists.newArrayList();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:3c71363
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.distance;
1: 
0: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.mahout.common.parameters.DoubleParameter;
1: import org.apache.mahout.common.parameters.Parameter;
1: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.math.Vector.Element;
1: 
1: /** 
1:  * Implement Minkowski distance, a real-valued generalization of the 
1:  * integral L(n) distances: Manhattan = L1, Euclidean = L2. 
1:  * For high numbers of dimensions, very high exponents give more useful distances. 
1:  * 
1:  * Note: Math.pow is clever about integer-valued doubles.
1:  **/
1: public class MinkowskiDistanceMeasure implements DistanceMeasure {
1: 
1:   private static final double EXPONENT = 3.0;
1: 
1:   private List<Parameter<?>> parameters;
1:   private double exponent = EXPONENT;
1:   
1:   public MinkowskiDistanceMeasure() {
1:   }
1:   
1:   public MinkowskiDistanceMeasure(double exponent) {
1:     this.exponent = exponent;
1:   }
1: 
1:   @Override
1:   public void createParameters(String prefix, Configuration conf) {
0:     parameters = new ArrayList<Parameter<?>>();
1:     Parameter<?> param =
1:         new DoubleParameter(prefix, "exponent", conf, EXPONENT, "Exponent for Fractional Lagrange distance");
1:     parameters.add(param);
1:   }
1: 
1:   @Override
1:   public Collection<Parameter<?>> getParameters() {
1:     return parameters;
1:   }
1: 
1:   @Override
1:   public void configure(Configuration jobConf) {
1:     if (parameters == null) {
1:       ParameteredGeneralizations.configureParameters(this, jobConf);
1:     }
1:   }
1: 
1:   public double getExponent() {
1:     return exponent;
1:   }
1: 
1:   public void setExponent(double exponent) {
1:     this.exponent = exponent;
1:   }
1: 
1:   /**
1:    *  Math.pow is clever about integer-valued doubles
1:    */
1:   @Override
1:   public double distance(Vector v1, Vector v2) {
0:     Vector distVector = v1.minus(v2);
0:     double sum = 0.0;
0:     Iterator<Element> it = distVector.iterateNonZero();
0:     while (it.hasNext()) {
0:       Element e = it.next();
0:       sum += Math.pow(Math.abs(e.get()), exponent);
1:     }
0:     return Math.pow(sum, 1.0 / exponent);
1:   }
1: 
1:   // TODO: how?
1:   @Override
1:   public double distance(double centroidLengthSquare, Vector centroid, Vector v) {
1:     return distance(centroid, v); // TODO - can this use centroidLengthSquare somehow?
1:   }
1: 
1: }
============================================================================