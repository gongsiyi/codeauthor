2:151de0d: /**
1:151de0d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:151de0d:  * contributor license agreements.  See the NOTICE file distributed with
1:151de0d:  * this work for additional information regarding copyright ownership.
1:151de0d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:151de0d:  * (the "License"); you may not use this file except in compliance with
1:151de0d:  * the License.  You may obtain a copy of the License at
3:151de0d:  *
1:151de0d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:151de0d:  *
1:151de0d:  * Unless required by applicable law or agreed to in writing, software
1:151de0d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:151de0d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:151de0d:  * See the License for the specific language governing permissions and
1:151de0d:  * limitations under the License.
1:151de0d:  */
5:151de0d: 
1:151de0d: package org.apache.mahout.math.hadoop.stochasticsvd;
1:151de0d: 
1:151de0d: import java.util.Random;
1:151de0d: 
1:151de0d: import org.apache.mahout.common.MahoutTestCase;
1:b16c260: import org.apache.mahout.common.RandomUtils;
1:151de0d: import org.apache.mahout.math.DenseMatrix;
1:151de0d: import org.apache.mahout.math.Matrix;
1:151de0d: import org.apache.mahout.math.Vector;
1:151de0d: import org.apache.mahout.math.function.DoubleFunction;
1:ffc7fab: import org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;
1:151de0d: import org.junit.Test;
1:151de0d: 
1:175701c: /**
1:175701c:  * Shared ssvd test code
1:151de0d:  */
1:175701c: public class SSVDCommonTest extends MahoutTestCase {
1:151de0d: 
1:b16c260:   private static final double SCALE = 1000;
1:b16c260:   private static final double SVD_EPSILON = 1.0e-10;
1:151de0d: 
1:151de0d:   @Test
1:151de0d:   public void testGivensQR() throws Exception {
1:151de0d:     // DenseMatrix m = new DenseMatrix(dims<<2,dims);
1:b16c260:     Matrix m = new DenseMatrix(3, 3);
1:151de0d:     m.assign(new DoubleFunction() {
1:b16c260:       private final Random rnd = RandomUtils.getRandom();
1:175701c: 
1:151de0d:       @Override
1:151de0d:       public double apply(double arg0) {
1:b16c260:         return rnd.nextDouble() * SCALE;
1:151de0d:       }
1:151de0d:     });
1:151de0d: 
1:151de0d:     m.setQuick(0, 0, 1);
1:151de0d:     m.setQuick(0, 1, 2);
1:151de0d:     m.setQuick(0, 2, 3);
1:151de0d:     m.setQuick(1, 0, 4);
1:151de0d:     m.setQuick(1, 1, 5);
1:151de0d:     m.setQuick(1, 2, 6);
1:151de0d:     m.setQuick(2, 0, 7);
1:151de0d:     m.setQuick(2, 1, 8);
1:151de0d:     m.setQuick(2, 2, 9);
1:151de0d: 
1:175701c:     GivensThinSolver qrSolver =
1:175701c:       new GivensThinSolver(m.rowSize(), m.columnSize());
1:151de0d:     qrSolver.solve(m);
1:151de0d: 
1:151de0d:     Matrix qtm = new DenseMatrix(qrSolver.getThinQtTilde());
1:151de0d: 
1:b16c260:     assertOrthonormality(qtm.transpose(), false, SVD_EPSILON);
1:151de0d: 
1:175701c:     Matrix aClone =
1:175701c:       new DenseMatrix(qrSolver.getThinQtTilde()).transpose()
1:175701c:                                                 .times(qrSolver.getRTilde());
1:151de0d: 
1:151de0d:     System.out.println("aclone : " + aClone);
1:151de0d: 
1:151de0d:   }
1:151de0d: 
1:175701c:   public static void assertOrthonormality(Matrix mtx,
1:175701c:                                           boolean insufficientRank,
1:175701c:                                           double epsilon) {
1:151de0d:     int n = mtx.columnSize();
1:151de0d:     int rank = 0;
1:151de0d:     for (int i = 0; i < n; i++) {
1:528ffcd:       Vector ei = mtx.viewColumn(i);
1:151de0d: 
1:b16c260:       double norm = ei.norm(2);
1:151de0d: 
1:b16c260:       if (Math.abs(1 - norm) < epsilon) {
1:151de0d:         rank++;
1:b16c260:       } else {
1:4194a28:         assertTrue(Math.abs(norm) < epsilon);
1:151de0d:       }
1:151de0d: 
1:151de0d:       for (int j = 0; j <= i; j++) {
1:528ffcd:         Vector e_j = mtx.viewColumn(j);
1:b16c260:         double dot = ei.dot(e_j);
1:4194a28:         assertTrue(Math.abs((i == j && rank > j ? 1 : 0) - dot) < epsilon);
1:151de0d:       }
1:151de0d:     }
1:175701c:     assertTrue((!insufficientRank && rank == n)
1:175701c:         || (insufficientRank && rank < n));
1:151de0d: 
1:151de0d:   }
1:151de0d: 
1:151de0d: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:175701c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Shared ssvd test code
1: public class SSVDCommonTest extends MahoutTestCase {
1: 
/////////////////////////////////////////////////////////////////////////
1:     GivensThinSolver qrSolver =
1:       new GivensThinSolver(m.rowSize(), m.columnSize());
1:     Matrix aClone =
1:       new DenseMatrix(qrSolver.getThinQtTilde()).transpose()
1:                                                 .times(qrSolver.getRTilde());
1:   public static void assertOrthonormality(Matrix mtx,
1:                                           boolean insufficientRank,
1:                                           double epsilon) {
/////////////////////////////////////////////////////////////////////////
1:     assertTrue((!insufficientRank && rank == n)
1:         || (insufficientRank && rank < n));
commit:ffc7fab
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;
commit:151de0d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.stochasticsvd;
1: 
1: import java.util.Random;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.DoubleFunction;
1: import org.junit.Test;
1: 
1: /** 
0:  * Tests parts of of Stochastic SVD solver code in local mode
0:  * using "prototype" code (class that simulates processes 
0:  * actually happenning in the MR jobs).
1:  * 
1:  * 
1:  */
0: public class SSVDPrototypeTest extends MahoutTestCase {
1: 
0:   private static double s_scale = 1000;
0:   private static double s_epsilon = 1e-10;
1: 
0:   public void testSSVDPrototype() throws Exception {
0:     SSVDPrototype.main(null);
1:   }
1: 
1:   @Test
1:   public void testGivensQR() throws Exception {
1:     // DenseMatrix m = new DenseMatrix(dims<<2,dims);
0:     DenseMatrix m = new DenseMatrix(3, 3);
1:     m.assign(new DoubleFunction() {
1: 
0:       Random m_rnd = new Random();
1: 
1:       @Override
1:       public double apply(double arg0) {
0:         return m_rnd.nextDouble() * s_scale;
1:       }
1:     });
1: 
1:     m.setQuick(0, 0, 1);
1:     m.setQuick(0, 1, 2);
1:     m.setQuick(0, 2, 3);
1:     m.setQuick(1, 0, 4);
1:     m.setQuick(1, 1, 5);
1:     m.setQuick(1, 2, 6);
1:     m.setQuick(2, 0, 7);
1:     m.setQuick(2, 1, 8);
1:     m.setQuick(2, 2, 9);
1: 
0:     GivensThinSolver qrSolver = new GivensThinSolver(m.rowSize(),
0:         m.columnSize());
1:     qrSolver.solve(m);
1: 
1:     Matrix qtm = new DenseMatrix(qrSolver.getThinQtTilde());
1: 
0:     assertOrthonormality(qtm.transpose(), false, s_epsilon);
1: 
0:     Matrix aClone = new DenseMatrix(qrSolver.getThinQtTilde()).transpose()
0:         .times(qrSolver.getRTilde());
1: 
1:     System.out.println("aclone : " + aClone);
1: 
1:   }
1: 
0:   public static void assertOrthonormality(Matrix mtx, boolean insufficientRank,
0:       double epsilon) {
1:     int n = mtx.columnSize();
1:     int rank = 0;
1:     for (int i = 0; i < n; i++) {
0:       Vector e_i = mtx.getColumn(i);
1: 
0:       double norm = e_i.norm(2);
1: 
0:       if (Math.abs(1 - norm) < epsilon)
1:         rank++;
0:       else
0:         Assert.assertTrue(Math.abs(norm) < epsilon);
1: 
1:       for (int j = 0; j <= i; j++) {
0:         Vector e_j = mtx.getColumn(j);
0:         double dot = e_i.dot(e_j);
0:         Assert
0:             .assertTrue(Math.abs((i == j && rank > j ? 1 : 0) - dot) < epsilon);
1:       }
1:     }
0:     Assert.assertTrue((!insufficientRank && rank == n)
0:         || (insufficientRank && rank < n));
1: 
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(Math.abs(norm) < epsilon);
1:         assertTrue(Math.abs((i == j && rank > j ? 1 : 0) - dot) < epsilon);
0:     assertTrue((!insufficientRank && rank == n) || (insufficientRank && rank < n));
commit:1499411
/////////////////////////////////////////////////////////////////////////
0:   @Test
commit:b16c260
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1:   private static final double SCALE = 1000;
1:   private static final double SVD_EPSILON = 1.0e-10;
/////////////////////////////////////////////////////////////////////////
1:     Matrix m = new DenseMatrix(3, 3);
1:       private final Random rnd = RandomUtils.getRandom();
1:         return rnd.nextDouble() * SCALE;
/////////////////////////////////////////////////////////////////////////
0:     GivensThinSolver qrSolver = new GivensThinSolver(m.rowSize(), m.columnSize());
1:     assertOrthonormality(qtm.transpose(), false, SVD_EPSILON);
/////////////////////////////////////////////////////////////////////////
0:   public static void assertOrthonormality(Matrix mtx, boolean insufficientRank, double epsilon) {
0:       Vector ei = mtx.getColumn(i);
1:       double norm = ei.norm(2);
1:       if (Math.abs(1 - norm) < epsilon) {
1:       } else {
0:       }
1:         double dot = ei.dot(e_j);
0:     Assert.assertTrue((!insufficientRank && rank == n) || (insufficientRank && rank < n));
author:Ted Dunning
-------------------------------------------------------------------------------
commit:528ffcd
/////////////////////////////////////////////////////////////////////////
1:       Vector ei = mtx.viewColumn(i);
/////////////////////////////////////////////////////////////////////////
1:         Vector e_j = mtx.viewColumn(j);
============================================================================