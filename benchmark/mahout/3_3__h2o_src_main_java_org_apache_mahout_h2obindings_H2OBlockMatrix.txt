2:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
1:f870a63:  */
1:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings;
1:f870a63: 
1:f870a63: import org.apache.mahout.math.Matrix;
1:f870a63: import org.apache.mahout.math.Vector;
1:f870a63: import org.apache.mahout.math.AbstractMatrix;
1:f870a63: import org.apache.mahout.math.DenseMatrix;
1:f870a63: import org.apache.mahout.math.SparseMatrix;
1:bbf4e5a: import org.apache.mahout.math.flavor.MatrixFlavor;
1:f870a63: 
1:f870a63: import water.fvec.Chunk;
1:f870a63: 
1:2d1b0bf: /**
1:f870a63:  * A Matrix implementation to represent a vertical Block of DRM.
1:f870a63:  *
1:f870a63:  * Creation of the matrix is an O(1) operation with negligible
1:f870a63:  * overhead, and will remain so as long as the matrix is only
1:f870a63:  * read from (no modifications).
1:f870a63:  *
1:f870a63:  * On the first modification, create a copy on write Matrix and
1:f870a63:  * all further operations happen on this cow matrix.
1:f870a63:  *
1:f870a63:  * The benefit is, mapBlock() closures which never modify the
1:f870a63:  * input matrix save on the copy overhead.
1:f870a63:  */
1:f870a63: public class H2OBlockMatrix extends AbstractMatrix {
1:2d1b0bf:   /** Backing chunks which store the original matrix data */
1:2d1b0bf:   private Chunk chks[];
1:2d1b0bf:   /** Copy on write matrix created on demand when original matrix is modified */
1:2d1b0bf:   private Matrix cow;
1:f870a63: 
1:2d1b0bf:   /** Class constructor. */
1:f870a63:   public H2OBlockMatrix(Chunk chks[]) {
1:f870a63:     super(chks[0].len(), chks.length);
1:2d1b0bf:     this.chks = chks;
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   /**
1:2d1b0bf:    * Internal method to create the copy on write matrix.
1:2d1b0bf:    *
1:2d1b0bf:    * Once created, all further operations are performed on the CoW matrix
1:2d1b0bf:    */
1:f870a63:   private void cow() {
1:f870a63:     if (cow != null) {
1:f870a63:       return;
1:f870a63:     }
1:f870a63: 
1:2d1b0bf:     if (chks[0].isSparse()) {
1:2d1b0bf:       cow = new SparseMatrix(chks[0].len(), chks.length);
1:f870a63:     } else {
1:2d1b0bf:       cow = new DenseMatrix(chks[0].len(), chks.length);
1:f870a63:     }
1:f870a63: 
1:2d1b0bf:     for (int c = 0; c < chks.length; c++) {
1:2d1b0bf:       for (int r = 0; r < chks[0].len(); r++) {
1:f5f54a1:         cow.setQuick(r, c, chks[c].atd(r));
1:f870a63:       }
1:f870a63:     }
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   @Override
1:f870a63:   public void setQuick(int row, int col, double val) {
1:f870a63:     cow();
1:f870a63:     cow.setQuick(row, col, val);
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   @Override
1:f870a63:   public Matrix like(int nrow, int ncol) {
1:2d1b0bf:     if (chks[0].isSparse()) {
1:f870a63:       return new SparseMatrix(nrow, ncol);
1:f870a63:     } else {
1:f870a63:       return new DenseMatrix(nrow, ncol);
1:f870a63:     }
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   @Override
1:f870a63:   public Matrix like() {
1:2d1b0bf:     if (chks[0].isSparse()) {
1:f870a63:       return new SparseMatrix(rowSize(), columnSize());
1:f870a63:     } else {
1:f870a63:       return new DenseMatrix(rowSize(), columnSize());
1:f870a63:     }
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   @Override
1:f870a63:   public double getQuick(int row, int col) {
1:f870a63:     if (cow != null) {
1:f870a63:       return cow.getQuick(row, col);
1:f870a63:     } else {
1:f5f54a1:       return chks[col].atd(row);
1:f870a63:     }
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   @Override
1:f870a63:   public Matrix assignRow(int row, Vector v) {
1:f870a63:     cow();
1:f870a63:     cow.assignRow(row, v);
1:f870a63:     return cow;
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   @Override
1:f870a63:   public Matrix assignColumn(int col, Vector v) {
1:f870a63:     cow();
1:f870a63:     cow.assignColumn(col, v);
1:f870a63:     return cow;
1:f870a63:   }
1:bbf4e5a: 
1:bbf4e5a:   @Override
1:bbf4e5a:   public MatrixFlavor getFlavor() {
1:bbf4e5a:     if (cow != null) {
1:bbf4e5a:       return cow.getFlavor();
1:bbf4e5a:     } else if (chks[0].isSparse()) {
1:bbf4e5a:       return MatrixFlavor.SPARSELIKE;
1:bbf4e5a:     } else {
1:bbf4e5a:       return MatrixFlavor.DENSELIKE;
1:bbf4e5a:     }
1:bbf4e5a:   }
1:f870a63: }
============================================================================
author:Anand Avati
-------------------------------------------------------------------------------
commit:bbf4e5a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.flavor.MatrixFlavor;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public MatrixFlavor getFlavor() {
1:     if (cow != null) {
1:       return cow.getFlavor();
1:     } else if (chks[0].isSparse()) {
1:       return MatrixFlavor.SPARSELIKE;
1:     } else {
1:       return MatrixFlavor.DENSELIKE;
1:     }
1:   }
author:Stevo Slavic
-------------------------------------------------------------------------------
commit:f5f54a1
/////////////////////////////////////////////////////////////////////////
1:         cow.setQuick(r, c, chks[c].atd(r));
/////////////////////////////////////////////////////////////////////////
1:       return chks[col].atd(row);
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
1:   /** Backing chunks which store the original matrix data */
1:   private Chunk chks[];
1:   /** Copy on write matrix created on demand when original matrix is modified */
1:   private Matrix cow;
1:   /** Class constructor. */
1:     this.chks = chks;
1:   /**
1:    * Internal method to create the copy on write matrix.
1:    *
1:    * Once created, all further operations are performed on the CoW matrix
1:    */
1:     if (chks[0].isSparse()) {
1:       cow = new SparseMatrix(chks[0].len(), chks.length);
1:       cow = new DenseMatrix(chks[0].len(), chks.length);
1:     for (int c = 0; c < chks.length; c++) {
1:       for (int r = 0; r < chks[0].len(); r++) {
0:         cow.setQuick(r, c, chks[c].at0(r));
1:   @Override
1:   @Override
1:     if (chks[0].isSparse()) {
1:   @Override
1:     if (chks[0].isSparse()) {
1:   @Override
0:       return chks[col].at0(row);
1:   @Override
1:   @Override
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings;
1: 
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.AbstractMatrix;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.SparseMatrix;
1: 
1: import water.fvec.Chunk;
1: 
1: /*
1:  * A Matrix implementation to represent a vertical Block of DRM.
1:  *
1:  * Creation of the matrix is an O(1) operation with negligible
1:  * overhead, and will remain so as long as the matrix is only
1:  * read from (no modifications).
1:  *
1:  * On the first modification, create a copy on write Matrix and
1:  * all further operations happen on this cow matrix.
1:  *
1:  * The benefit is, mapBlock() closures which never modify the
1:  * input matrix save on the copy overhead.
1:  */
1: public class H2OBlockMatrix extends AbstractMatrix {
0:   Chunk _chks[];
0:   Matrix cow; /* Copy on Write */
1: 
1:   public H2OBlockMatrix(Chunk chks[]) {
1:     super(chks[0].len(), chks.length);
0:     _chks = chks;
1:   }
1: 
1:   private void cow() {
1:     if (cow != null) {
1:       return;
1:     }
1: 
0:     if (_chks[0].isSparse()) {
0:       cow = new SparseMatrix(_chks[0].len(), _chks.length);
1:     } else {
0:       cow = new DenseMatrix(_chks[0].len(), _chks.length);
1:     }
1: 
0:     for (int c = 0; c < _chks.length; c++) {
0:       for (int r = 0; r < _chks[0].len(); r++) {
0:         cow.setQuick(r, c, _chks[c].at0(r));
1:       }
1:     }
1:   }
1: 
1:   public void setQuick(int row, int col, double val) {
1:     cow();
1:     cow.setQuick(row, col, val);
1:   }
1: 
1:   public Matrix like(int nrow, int ncol) {
0:     if (_chks[0].isSparse()) {
1:       return new SparseMatrix(nrow, ncol);
1:     } else {
1:       return new DenseMatrix(nrow, ncol);
1:     }
1:   }
1: 
1:   public Matrix like() {
0:     if (_chks[0].isSparse()) {
1:       return new SparseMatrix(rowSize(), columnSize());
1:     } else {
1:       return new DenseMatrix(rowSize(), columnSize());
1:     }
1:   }
1: 
1:   public double getQuick(int row, int col) {
1:     if (cow != null) {
1:       return cow.getQuick(row, col);
1:     } else {
0:       return _chks[col].at0(row);
1:     }
1:   }
1: 
1:   public Matrix assignRow(int row, Vector v) {
1:     cow();
1:     cow.assignRow(row, v);
1:     return cow;
1:   }
1: 
1:   public Matrix assignColumn(int col, Vector v) {
1:     cow();
1:     cow.assignColumn(col, v);
1:     return cow;
1:   }
1: }
============================================================================