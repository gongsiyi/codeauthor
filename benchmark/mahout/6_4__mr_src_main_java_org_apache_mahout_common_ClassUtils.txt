1:845cbcd: /**
1:845cbcd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:845cbcd:  * contributor license agreements.  See the NOTICE file distributed with
1:845cbcd:  * this work for additional information regarding copyright ownership.
1:845cbcd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:845cbcd:  * (the "License"); you may not use this file except in compliance with
1:845cbcd:  * the License.  You may obtain a copy of the License at
1:845cbcd:  *
1:845cbcd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:845cbcd:  *
1:845cbcd:  * Unless required by applicable law or agreed to in writing, software
1:845cbcd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:845cbcd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:845cbcd:  * See the License for the specific language governing permissions and
1:845cbcd:  * limitations under the License.
1:845cbcd:  */
1:845cbcd: 
1:845cbcd: package org.apache.mahout.common;
1:845cbcd: 
1:e0ec7c1: import java.lang.reflect.InvocationTargetException;
1:e0ec7c1: 
1:e0ec7c1: public final class ClassUtils {
1:845cbcd: 
1:845cbcd:   private ClassUtils() {}
1:845cbcd: 
1:845cbcd:   public static <T> T instantiateAs(String classname, Class<T> asSubclassOfClass) {
1:845cbcd:     try {
1:faa82ce:       return instantiateAs(Class.forName(classname).asSubclass(asSubclassOfClass), asSubclassOfClass);
1:faa82ce:     } catch (ClassNotFoundException e) {
1:faa82ce:       throw new IllegalStateException(e);
1:faa82ce:     }
1:faa82ce:   }
1:faa82ce: 
1:051cbcf:   public static <T> T instantiateAs(String classname, Class<T> asSubclassOfClass, Class<?>[] params, Object[] args) {
1:faa82ce:     try {
1:faa82ce:       return instantiateAs(Class.forName(classname).asSubclass(asSubclassOfClass), asSubclassOfClass, params, args);
1:faa82ce:     } catch (ClassNotFoundException e) {
1:faa82ce:       throw new IllegalStateException(e);
1:faa82ce:     }
1:faa82ce:   }
1:faa82ce: 
1:051cbcf:   public static <T> T instantiateAs(Class<? extends T> clazz,
1:051cbcf:                                     Class<T> asSubclassOfClass,
1:051cbcf:                                     Class<?>[] params,
1:051cbcf:                                     Object[] args) {
1:faa82ce:     try {
1:faa82ce:       return clazz.asSubclass(asSubclassOfClass).getConstructor(params).newInstance(args);
1:87c15be:     } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ie) {
1:845cbcd:       throw new IllegalStateException(ie);
1:845cbcd:     }
1:845cbcd:   }
1:faa82ce: 
1:845cbcd: 
1:845cbcd:   public static <T> T instantiateAs(Class<? extends T> clazz, Class<T> asSubclassOfClass) {
1:845cbcd:     try {
1:e0ec7c1:       return clazz.asSubclass(asSubclassOfClass).getConstructor().newInstance();
1:87c15be:     } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ie) {
1:845cbcd:       throw new IllegalStateException(ie);
1:845cbcd:     }
1:845cbcd:   }
1:845cbcd: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ie) {
/////////////////////////////////////////////////////////////////////////
1:     } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ie) {
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
1:   public static <T> T instantiateAs(String classname, Class<T> asSubclassOfClass, Class<?>[] params, Object[] args) {
/////////////////////////////////////////////////////////////////////////
1:   public static <T> T instantiateAs(Class<? extends T> clazz,
1:                                     Class<T> asSubclassOfClass,
1:                                     Class<?>[] params,
1:                                     Object[] args) {
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
1: 
1: public final class ClassUtils {
0:       return Class.forName(classname).asSubclass(asSubclassOfClass).getConstructor().newInstance();
0:     } catch (NoSuchMethodException nsme) {
0:       throw new IllegalStateException(nsme);
0:     } catch (InvocationTargetException ite) {
0:       throw new IllegalStateException(ite);
1:       return clazz.asSubclass(asSubclassOfClass).getConstructor().newInstance();
0:     } catch (NoSuchMethodException nsme) {
0:       throw new IllegalStateException(nsme);
0:     } catch (InvocationTargetException ite) {
0:       throw new IllegalStateException(ite);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:faa82ce
/////////////////////////////////////////////////////////////////////////
1:       return instantiateAs(Class.forName(classname).asSubclass(asSubclassOfClass), asSubclassOfClass);
1:     } catch (ClassNotFoundException e) {
1:       throw new IllegalStateException(e);
1:     }
1:   }
1: 
0:   public static <T> T instantiateAs(String classname, Class<T> asSubclassOfClass, Class[] params, Object[] args) {
1:     try {
1:       return instantiateAs(Class.forName(classname).asSubclass(asSubclassOfClass), asSubclassOfClass, params, args);
1:     } catch (ClassNotFoundException e) {
1:       throw new IllegalStateException(e);
1:     }
1:   }
1: 
0:   public static <T> T instantiateAs(Class<? extends T> clazz, Class<T> asSubclassOfClass, Class[] params, Object[] args) {
1:     try {
1:       return clazz.asSubclass(asSubclassOfClass).getConstructor(params).newInstance(args);
/////////////////////////////////////////////////////////////////////////
1: 
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:845cbcd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common;
1: 
0: public class ClassUtils {
1: 
1:   private ClassUtils() {}
1: 
1:   public static <T> T instantiateAs(String classname, Class<T> asSubclassOfClass) {
1:     try {
0:       return Class.forName(classname).asSubclass(asSubclassOfClass).newInstance();
0:     } catch (ClassNotFoundException cnfe) {
0:       throw new IllegalStateException(cnfe);
0:     } catch (InstantiationException ie) {
1:       throw new IllegalStateException(ie);
0:     } catch (IllegalAccessException iae) {
0:       throw new IllegalStateException(iae);
1:     }
1:   }
1: 
1:   public static <T> T instantiateAs(Class<? extends T> clazz, Class<T> asSubclassOfClass) {
1:     try {
0:       return clazz.asSubclass(asSubclassOfClass).newInstance();
0:     } catch (InstantiationException ie) {
1:       throw new IllegalStateException(ie);
0:     } catch (IllegalAccessException iae) {
0:       throw new IllegalStateException(iae);
1:     }
1:   }
1: }
============================================================================