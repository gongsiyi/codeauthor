1:8642b98: /**
1:8642b98:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8642b98:  * contributor license agreements.  See the NOTICE file distributed with
1:8642b98:  * this work for additional information regarding copyright ownership.
1:8642b98:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8642b98:  * (the "License"); you may not use this file except in compliance with
1:8642b98:  * the License.  You may obtain a copy of the License at
1:8642b98:  *
1:8642b98:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8642b98:  *
1:8642b98:  * Unless required by applicable law or agreed to in writing, software
1:8642b98:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8642b98:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8642b98:  * See the License for the specific language governing permissions and
1:8642b98:  * limitations under the License.
1:8642b98:  */
2:8642b98: 
1:8642b98: package org.apache.mahout.classifier.df.tools;
1:8642b98: 
1:229aeff: import java.io.IOException;
1:229aeff: import java.lang.reflect.InvocationTargetException;
1:8642b98: import java.lang.reflect.Method;
1:229aeff: import java.util.Collection;
1:8642b98: import java.util.List;
1:8642b98: 
1:8642b98: import org.apache.commons.cli2.CommandLine;
1:8642b98: import org.apache.commons.cli2.Group;
1:8642b98: import org.apache.commons.cli2.Option;
1:8642b98: import org.apache.commons.cli2.builder.ArgumentBuilder;
1:8642b98: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1:8642b98: import org.apache.commons.cli2.builder.GroupBuilder;
1:8642b98: import org.apache.commons.cli2.commandline.Parser;
1:8642b98: import org.apache.hadoop.conf.Configuration;
1:8642b98: import org.apache.hadoop.fs.Path;
1:8642b98: import org.apache.mahout.classifier.df.DecisionForest;
1:8642b98: import org.apache.mahout.classifier.df.data.Dataset;
1:8642b98: import org.apache.mahout.classifier.df.node.Node;
1:8642b98: import org.apache.mahout.common.CommandLineUtil;
1:8642b98: import org.slf4j.Logger;
1:8642b98: import org.slf4j.LoggerFactory;
1:8642b98: 
1:8642b98: /**
1:8642b98:  * This tool is to visualize the Decision Forest
1:8642b98:  */
1:1ffa3a4: @Deprecated
1:8642b98: public final class ForestVisualizer {
1:8642b98: 
1:8642b98:   private static final Logger log = LoggerFactory.getLogger(ForestVisualizer.class);
1:8642b98: 
1:8642b98:   private ForestVisualizer() {
1:8642b98:   }
1:8642b98: 
1:229aeff:   public static String toString(DecisionForest forest, Dataset dataset, String[] attrNames) {
1:229aeff: 
1:229aeff:     List<Node> trees;
1:229aeff:     try {
1:229aeff:       Method getTrees = forest.getClass().getDeclaredMethod("getTrees");
1:229aeff:       getTrees.setAccessible(true);
1:229aeff:       trees = (List<Node>) getTrees.invoke(forest);
1:229aeff:     } catch (IllegalAccessException e) {
1:229aeff:       throw new IllegalStateException(e);
1:229aeff:     } catch (InvocationTargetException e) {
1:229aeff:       throw new IllegalStateException(e);
1:229aeff:     } catch (NoSuchMethodException e) {
1:229aeff:       throw new IllegalStateException(e);
1:229aeff:     }
1:229aeff: 
1:8642b98:     int cnt = 1;
1:564c3e1:     StringBuilder buff = new StringBuilder();
1:8642b98:     for (Node tree : trees) {
1:229aeff:       buff.append("Tree[").append(cnt).append("]:");
1:8642b98:       buff.append(TreeVisualizer.toString(tree, dataset, attrNames));
1:8642b98:       buff.append('\n');
1:8642b98:       cnt++;
1:8642b98:     }
1:8642b98:     return buff.toString();
1:8642b98:   }
1:8642b98: 
1:8642b98:   /**
1:8642b98:    * Decision Forest to String
1:8642b98:    * @param forestPath
1:8642b98:    *          path to the Decision Forest
1:8642b98:    * @param datasetPath
1:8642b98:    *          dataset path
1:8642b98:    * @param attrNames
1:8642b98:    *          attribute names
1:8642b98:    */
1:229aeff:   public static String toString(String forestPath, String datasetPath, String[] attrNames) throws IOException {
1:8642b98:     Configuration conf = new Configuration();
1:8642b98:     DecisionForest forest = DecisionForest.load(conf, new Path(forestPath));
1:8642b98:     Dataset dataset = Dataset.load(conf, new Path(datasetPath));
1:8642b98:     return toString(forest, dataset, attrNames);
1:8642b98:   }
1:8642b98: 
1:8642b98:   /**
1:8642b98:    * Print Decision Forest
1:8642b98:    * @param forestPath
1:8642b98:    *          path to the Decision Forest
1:8642b98:    * @param datasetPath
1:8642b98:    *          dataset path
1:8642b98:    * @param attrNames
1:8642b98:    *          attribute names
1:8642b98:    */
1:229aeff:   public static void print(String forestPath, String datasetPath, String[] attrNames) throws IOException {
1:8642b98:     System.out.println(toString(forestPath, datasetPath, attrNames));
1:8642b98:   }
1:8642b98:   
1:8642b98:   public static void main(String[] args) {
1:8642b98:     DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
1:8642b98:     ArgumentBuilder abuilder = new ArgumentBuilder();
1:8642b98:     GroupBuilder gbuilder = new GroupBuilder();
1:8642b98: 
1:8642b98:     Option datasetOpt = obuilder.withLongName("dataset").withShortName("ds").withRequired(true)
1:8642b98:       .withArgument(abuilder.withName("dataset").withMinimum(1).withMaximum(1).create())
1:8642b98:       .withDescription("Dataset path").create();
1:8642b98: 
1:8642b98:     Option modelOpt = obuilder.withLongName("model").withShortName("m").withRequired(true)
1:8642b98:       .withArgument(abuilder.withName("path").withMinimum(1).withMaximum(1).create())
1:8642b98:       .withDescription("Path to the Decision Forest").create();
1:8642b98: 
1:8642b98:     Option attrNamesOpt = obuilder.withLongName("names").withShortName("n").withRequired(false)
1:8642b98:       .withArgument(abuilder.withName("names").withMinimum(1).create())
1:8642b98:       .withDescription("Optional, Attribute names").create();
1:8642b98: 
1:8642b98:     Option helpOpt = obuilder.withLongName("help").withShortName("h")
1:8642b98:       .withDescription("Print out help").create();
1:8642b98:   
1:8642b98:     Group group = gbuilder.withName("Options").withOption(datasetOpt).withOption(modelOpt)
1:8642b98:       .withOption(attrNamesOpt).withOption(helpOpt).create();
1:8642b98:   
1:8642b98:     try {
1:8642b98:       Parser parser = new Parser();
1:8642b98:       parser.setGroup(group);
1:8642b98:       CommandLine cmdLine = parser.parse(args);
1:8642b98:       
1:8642b98:       if (cmdLine.hasOption("help")) {
1:8642b98:         CommandLineUtil.printHelp(group);
2:8642b98:         return;
1:8642b98:       }
1:8642b98:   
1:8642b98:       String datasetName = cmdLine.getValue(datasetOpt).toString();
1:8642b98:       String modelName = cmdLine.getValue(modelOpt).toString();
1:8642b98:       String[] attrNames = null;
1:8642b98:       if (cmdLine.hasOption(attrNamesOpt)) {
1:229aeff:         Collection<String> names = (Collection<String>) cmdLine.getValues(attrNamesOpt);
1:8642b98:         if (!names.isEmpty()) {
1:8642b98:           attrNames = new String[names.size()];
1:8642b98:           names.toArray(attrNames);
1:8642b98:         }
1:8642b98:       }
1:8642b98:       
1:8642b98:       print(modelName, datasetName, attrNames);
1:8642b98:     } catch (Exception e) {
1:8642b98:       log.error("Exception", e);
1:8642b98:       CommandLineUtil.printHelp(group);
1:8642b98:     }
1:8642b98:   }
1:8642b98: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.lang.reflect.InvocationTargetException;
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1:   public static String toString(DecisionForest forest, Dataset dataset, String[] attrNames) {
1: 
1:     List<Node> trees;
1:     try {
1:       Method getTrees = forest.getClass().getDeclaredMethod("getTrees");
1:       getTrees.setAccessible(true);
1:       trees = (List<Node>) getTrees.invoke(forest);
1:     } catch (IllegalAccessException e) {
1:       throw new IllegalStateException(e);
1:     } catch (InvocationTargetException e) {
1:       throw new IllegalStateException(e);
1:     } catch (NoSuchMethodException e) {
1:       throw new IllegalStateException(e);
1:     }
1: 
1:       buff.append("Tree[").append(cnt).append("]:");
/////////////////////////////////////////////////////////////////////////
1:   public static String toString(String forestPath, String datasetPath, String[] attrNames) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public static void print(String forestPath, String datasetPath, String[] attrNames) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         Collection<String> names = (Collection<String>) cmdLine.getValues(attrNamesOpt);
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:     StringBuilder buff = new StringBuilder();
/////////////////////////////////////////////////////////////////////////
0:         List<String> names = (List<String>) cmdLine.getValues(attrNamesOpt);
/////////////////////////////////////////////////////////////////////////
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:8642b98
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.df.tools;
1: 
1: import java.lang.reflect.Method;
1: import java.util.List;
1: 
1: import org.apache.commons.cli2.CommandLine;
1: import org.apache.commons.cli2.Group;
1: import org.apache.commons.cli2.Option;
1: import org.apache.commons.cli2.builder.ArgumentBuilder;
1: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1: import org.apache.commons.cli2.builder.GroupBuilder;
1: import org.apache.commons.cli2.commandline.Parser;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.mahout.classifier.df.DecisionForest;
1: import org.apache.mahout.classifier.df.data.Dataset;
1: import org.apache.mahout.classifier.df.node.Node;
1: import org.apache.mahout.common.CommandLineUtil;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * This tool is to visualize the Decision Forest
1:  */
1: public final class ForestVisualizer {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(ForestVisualizer.class);
1: 
1:   private ForestVisualizer() {
1:   }
1: 
0:   public static String toString(DecisionForest forest, Dataset dataset, String[] attrNames)
0:     throws Exception {
0:     Method getTrees = forest.getClass().getDeclaredMethod("getTrees");
0:     getTrees.setAccessible(true);
0:     @SuppressWarnings("unchecked")
0:     List<Node> trees = (List<Node>) getTrees.invoke(forest);
1:     
1:     int cnt = 1;
0:     StringBuffer buff = new StringBuffer();
1:     for (Node tree : trees) {
0:       buff.append("Tree[" + cnt + "]:");
1:       buff.append(TreeVisualizer.toString(tree, dataset, attrNames));
1:       buff.append('\n');
1:       cnt++;
1:     }
1:     return buff.toString();
1:   }
1: 
1:   /**
1:    * Decision Forest to String
1:    * @param forestPath
1:    *          path to the Decision Forest
1:    * @param datasetPath
1:    *          dataset path
1:    * @param attrNames
1:    *          attribute names
1:    */
0:   public static String toString(String forestPath, String datasetPath, String[] attrNames)
0:     throws Exception {
1:     Configuration conf = new Configuration();
1:     DecisionForest forest = DecisionForest.load(conf, new Path(forestPath));
1:     Dataset dataset = Dataset.load(conf, new Path(datasetPath));
1:     return toString(forest, dataset, attrNames);
1:   }
1: 
1:   /**
1:    * Print Decision Forest
1:    * @param forestPath
1:    *          path to the Decision Forest
1:    * @param datasetPath
1:    *          dataset path
1:    * @param attrNames
1:    *          attribute names
1:    */
0:   public static void print(String forestPath, String datasetPath, String[] attrNames)
0:     throws Exception {
1:     System.out.println(toString(forestPath, datasetPath, attrNames));
1:   }
1:   
1:   public static void main(String[] args) {
1:     DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
1:     ArgumentBuilder abuilder = new ArgumentBuilder();
1:     GroupBuilder gbuilder = new GroupBuilder();
1: 
1:     Option datasetOpt = obuilder.withLongName("dataset").withShortName("ds").withRequired(true)
1:       .withArgument(abuilder.withName("dataset").withMinimum(1).withMaximum(1).create())
1:       .withDescription("Dataset path").create();
1: 
1:     Option modelOpt = obuilder.withLongName("model").withShortName("m").withRequired(true)
1:       .withArgument(abuilder.withName("path").withMinimum(1).withMaximum(1).create())
1:       .withDescription("Path to the Decision Forest").create();
1: 
1:     Option attrNamesOpt = obuilder.withLongName("names").withShortName("n").withRequired(false)
1:       .withArgument(abuilder.withName("names").withMinimum(1).create())
1:       .withDescription("Optional, Attribute names").create();
1: 
1:     Option helpOpt = obuilder.withLongName("help").withShortName("h")
1:       .withDescription("Print out help").create();
1:   
1:     Group group = gbuilder.withName("Options").withOption(datasetOpt).withOption(modelOpt)
1:       .withOption(attrNamesOpt).withOption(helpOpt).create();
1:   
1:     try {
1:       Parser parser = new Parser();
1:       parser.setGroup(group);
1:       CommandLine cmdLine = parser.parse(args);
1:       
1:       if (cmdLine.hasOption("help")) {
1:         CommandLineUtil.printHelp(group);
1:         return;
1:       }
1:   
1:       String datasetName = cmdLine.getValue(datasetOpt).toString();
1:       String modelName = cmdLine.getValue(modelOpt).toString();
1:       String[] attrNames = null;
1:       if (cmdLine.hasOption(attrNamesOpt)) {
0:         List<?> names = cmdLine.getValues(attrNamesOpt);
1:         if (!names.isEmpty()) {
1:           attrNames = new String[names.size()];
1:           names.toArray(attrNames);
1:         }
1:       }
1:       
1:       print(modelName, datasetName, attrNames);
1:     } catch (Exception e) {
1:       log.error("Exception", e);
1:       CommandLineUtil.printHelp(group);
1:       return;
1:     }
1:   }
1: }
============================================================================