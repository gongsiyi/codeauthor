1:e55ec3c: /**
1:e55ec3c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e55ec3c:  * contributor license agreements.  See the NOTICE file distributed with
1:e55ec3c:  * this work for additional information regarding copyright ownership.
1:e55ec3c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e55ec3c:  * (the "License"); you may not use this file except in compliance with
1:e55ec3c:  * the License.  You may obtain a copy of the License at
1:e55ec3c:  *
1:e55ec3c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e55ec3c:  *
1:e55ec3c:  * Unless required by applicable law or agreed to in writing, software
1:e55ec3c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e55ec3c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e55ec3c:  * See the License for the specific language governing permissions and
1:e55ec3c:  * limitations under the License.
1:e55ec3c:  */
1:e55ec3c: 
1:b59e468: package org.apache.mahout.math.hadoop.similarity;
1:e55ec3c: 
1:e55ec3c: import org.apache.hadoop.conf.Configuration;
1:e55ec3c: import org.apache.hadoop.io.Text;
1:e55ec3c: import org.apache.hadoop.io.WritableComparable;
1:e55ec3c: import org.apache.hadoop.mapreduce.Mapper;
1:e0ec7c1: import org.apache.mahout.common.ClassUtils;
1:e55ec3c: import org.apache.mahout.common.distance.DistanceMeasure;
1:e55ec3c: import org.apache.mahout.math.DenseVector;
1:e55ec3c: import org.apache.mahout.math.NamedVector;
1:e55ec3c: import org.apache.mahout.math.Vector;
1:e55ec3c: import org.apache.mahout.math.VectorWritable;
1:e55ec3c: 
1:e55ec3c: import java.io.IOException;
1:e55ec3c: import java.util.List;
1:e55ec3c: 
1:e55ec3c: /**
1:b59e468:  * Similar to {@link VectorDistanceMapper}, except it outputs
1:e55ec3c:  * &lt;input, Vector&gt;, where the vector is a dense vector contain one entry for every seed vector
1:e55ec3c:  */
1:b59e468: public final class VectorDistanceInvertedMapper
1:b59e468:     extends Mapper<WritableComparable<?>, VectorWritable, Text, VectorWritable> {
1:b59e468: 
1:b59e468:   private DistanceMeasure measure;
1:b59e468:   private List<NamedVector> seedVectors;
1:e55ec3c: 
1:e55ec3c:   @Override
1:b59e468:   protected void map(WritableComparable<?> key, VectorWritable value, Context context)
1:b59e468:     throws IOException, InterruptedException {
1:e55ec3c:     String keyName;
1:e55ec3c:     Vector valVec = value.get();
1:e55ec3c:     if (valVec instanceof NamedVector) {
1:e55ec3c:       keyName = ((NamedVector) valVec).getName();
1:e55ec3c:     } else {
1:e55ec3c:       keyName = key.toString();
2:e55ec3c:     }
1:e55ec3c:     Vector outVec = new DenseVector(new double[seedVectors.size()]);
1:e55ec3c:     int i = 0;
1:e55ec3c:     for (NamedVector seedVector : seedVectors) {
1:e55ec3c:       outVec.setQuick(i++, measure.distance(seedVector, valVec));
1:e55ec3c:     }
1:e55ec3c:     context.write(new Text(keyName), new VectorWritable(outVec));
1:e55ec3c:   }
1:e55ec3c: 
1:e55ec3c:   @Override
1:e55ec3c:   protected void setup(Context context) throws IOException, InterruptedException {
1:e55ec3c:     super.setup(context);
1:e55ec3c:     Configuration conf = context.getConfiguration();
1:e0ec7c1:     measure =
1:e0ec7c1:         ClassUtils.instantiateAs(conf.get(VectorDistanceSimilarityJob.DISTANCE_MEASURE_KEY), DistanceMeasure.class);
1:e0ec7c1:     measure.configure(conf);
1:e0ec7c1:     seedVectors = SeedVectorUtil.loadSeedVectors(conf);
1:e55ec3c:   }
1:e55ec3c: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.ClassUtils;
/////////////////////////////////////////////////////////////////////////
1:     measure =
1:         ClassUtils.instantiateAs(conf.get(VectorDistanceSimilarityJob.DISTANCE_MEASURE_KEY), DistanceMeasure.class);
1:     measure.configure(conf);
1:     seedVectors = SeedVectorUtil.loadSeedVectors(conf);
commit:b59e468
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.similarity;
/////////////////////////////////////////////////////////////////////////
1:  * Similar to {@link VectorDistanceMapper}, except it outputs
1: public final class VectorDistanceInvertedMapper
1:     extends Mapper<WritableComparable<?>, VectorWritable, Text, VectorWritable> {
1: 
1:   private DistanceMeasure measure;
1:   private List<NamedVector> seedVectors;
1:   protected void map(WritableComparable<?> key, VectorWritable value, Context context)
1:     throws IOException, InterruptedException {
/////////////////////////////////////////////////////////////////////////
0:       seedVectors = SeedVectorUtil.loadSeedVectors(conf);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:e55ec3c
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math.hadoop.similarity;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.io.WritableComparable;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.NamedVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import java.io.IOException;
0: import java.util.ArrayList;
1: import java.util.List;
1: 
1: /**
0:  * Similar to {@link org.apache.mahout.math.hadoop.similarity.VectorDistanceMapper}, except it outputs
1:  * &lt;input, Vector&gt;, where the vector is a dense vector contain one entry for every seed vector
1:  */
0: public class VectorDistanceInvertedMapper extends Mapper<WritableComparable<?>, VectorWritable, Text, VectorWritable> {
0:   private transient static Logger log = LoggerFactory.getLogger(VectorDistanceInvertedMapper.class);
0:   protected DistanceMeasure measure;
0:   protected List<NamedVector> seedVectors;
1: 
1:   @Override
0:   protected void map(WritableComparable<?> key, VectorWritable value, Context context) throws IOException, InterruptedException {
1:     String keyName;
1:     Vector valVec = value.get();
1:     if (valVec instanceof NamedVector) {
1:       keyName = ((NamedVector) valVec).getName();
1:     } else {
1:       keyName = key.toString();
1:     }
1:     Vector outVec = new DenseVector(new double[seedVectors.size()]);
1:     int i = 0;
1:     for (NamedVector seedVector : seedVectors) {
1:       outVec.setQuick(i++, measure.distance(seedVector, valVec));
1:     }
1:     context.write(new Text(keyName), new VectorWritable(outVec));
1:   }
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     super.setup(context);
1:     Configuration conf = context.getConfiguration();
0:     ClassLoader ccl = Thread.currentThread().getContextClassLoader();
0:     try {
0:       measure = ccl.loadClass(conf.get(VectorDistanceSimilarityJob.DISTANCE_MEASURE_KEY))
0:               .asSubclass(DistanceMeasure.class).newInstance();
0:       measure.configure(conf);
0:       seedVectors = new ArrayList<NamedVector>(1000);
0:       SeedVectorUtil.loadSeedVectors(conf, seedVectors);
0:     } catch (InstantiationException e) {
0:       throw new IllegalStateException(e);
0:     } catch (IllegalAccessException e) {
0:       throw new IllegalStateException(e);
0:     } catch (ClassNotFoundException e) {
0:       throw new IllegalStateException(e);
1:     }
1:   }
1: }
============================================================================