1:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
2:f870a63:  */
4:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings.drm;
1:f870a63: 
1:f870a63: import org.apache.hadoop.io.Writable;
1:4ef9d31: import org.apache.mahout.math.Matrix;
1:4ef9d31: import org.apache.mahout.math.MatrixWritable;
1:4ef9d31: import org.apache.mahout.math.Vector;
1:4ef9d31: import org.apache.mahout.math.VectorWritable;
1:4ef9d31: import org.apache.mahout.math.drm.BCast;
1:f870a63: 
1:f870a63: import java.io.ByteArrayInputStream;
1:4ef9d31: import java.io.ByteArrayOutputStream;
1:4ef9d31: import java.io.IOException;
1:f870a63: import java.io.ObjectInputStream;
1:4ef9d31: import java.io.ObjectOutputStream;
1:4ef9d31: import java.io.Serializable;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * Broadcast class wrapper around Matrix and Vector.
1:2d1b0bf:  *
1:2d1b0bf:  * Use MatrixWritable and VectorWritable internally.
1:2d1b0bf:  * Even though the class is generically typed, we do runtime
1:2d1b0bf:  * enforcement to assert the type is either Matrix or Vector.
1:2d1b0bf:  *
1:2d1b0bf:  * H2OBCast object is created around a Matrix or Vector. Matrix or Vector
1:2d1b0bf:  * objects cannot be freely referred in closures. Instead create and refer the
1:2d1b0bf:  * corresponding H2OBCast object. The original Matrix or Vector can be
1:2d1b0bf:  * obtained by calling the ->value() method on the H2OBCast object within a
1:2d1b0bf:  * closure.
1:2d1b0bf:  */
1:f870a63: public class H2OBCast<T> implements BCast<T>, Serializable {
1:2d1b0bf:   private transient T obj;
1:2d1b0bf:   private byte buf[];
1:2d1b0bf:   private boolean isMatrix;
1:f870a63: 
1:2d1b0bf:   /**
1:2d1b0bf:    * Class constructor.
1:2d1b0bf:    */
1:f870a63:   public H2OBCast(T o) {
1:f870a63:     obj = o;
1:f870a63:     if (o instanceof Matrix) {
1:f870a63:       buf = serialize(new MatrixWritable((Matrix)o));
1:2d1b0bf:       isMatrix = true;
1:f870a63:     } else if (o instanceof Vector) {
1:f870a63:       buf = serialize(new VectorWritable((Vector)o));
1:2d1b0bf:       isMatrix = false;
1:f870a63:     } else {
1:f870a63:       throw new IllegalArgumentException("Only Matrix or Vector supported for now");
1:f870a63:     }
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   /**
1:2d1b0bf:    * Get the serialized object.
1:2d1b0bf:    */
1:f870a63:   public T value() {
1:f870a63:     if (obj == null) {
1:f870a63:       obj = deserialize(buf);
1:f870a63:     }
1:f870a63:     return obj;
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   /**
1:2d1b0bf:    * Internal method to serialize the object.
1:2d1b0bf:    *
1:2d1b0bf:    * @param w Either MatrixWritable or VectorWritable corresponding to
1:2d1b0bf:    *          either Matrix or Vector as the class is typed.
1:2d1b0bf:    * @return serialized sequence of bytes.
1:2d1b0bf:    */
1:f870a63:   private byte[] serialize(Writable w) {
1:f870a63:     ByteArrayOutputStream bos = new ByteArrayOutputStream();
2:f870a63:     try {
1:f870a63:       ObjectOutputStream oos = new ObjectOutputStream(bos);
1:f870a63:       w.write(oos);
1:f870a63:       oos.close();
1:4ef9d31:     } catch (IOException e) {
1:f870a63:       return null;
1:f870a63:     }
1:f870a63:     return bos.toByteArray();
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   /**
1:2d1b0bf:    * Internal method to deserialize a sequence of bytes.
1:2d1b0bf:    *
1:2d1b0bf:    * @param buf Sequence of bytes previously serialized by serialize() method.
1:2d1b0bf:    * @return The original Matrix or Vector object.
1:2d1b0bf:    */
1:f870a63:   private T deserialize(byte buf[]) {
1:f870a63:     T ret = null;
1:4ef9d31:     try (ByteArrayInputStream bis = new ByteArrayInputStream(buf)){
1:f870a63:       ObjectInputStream ois = new ObjectInputStream(bis);
1:2d1b0bf:       if (isMatrix) {
1:f870a63:         MatrixWritable w = new MatrixWritable();
1:f870a63:         w.readFields(ois);
1:f870a63:         ret = (T) w.get();
1:f870a63:       } else {
1:f870a63:         VectorWritable w = new VectorWritable();
1:f870a63:         w.readFields(ois);
1:f870a63:         ret = (T) w.get();
1:f870a63:       }
1:4ef9d31:     } catch (IOException e) {
1:4ef9d31:       e.printStackTrace();
1:f870a63:     }
1:f870a63:     return ret;
1:f870a63:   }
1:0b564c7: 
1:0b564c7:   /**
1:0b564c7:    * Stop broadcasting when called on driver side. Release any network resources.
1:0b564c7:    *
1:0b564c7:    */
1:0b564c7:   @Override
1:0b564c7:   public void close() throws IOException {
1:0b564c7: 
1:0b564c7:     // TODO: review this. It looks like it is not really a broadcast mechanism but rather just a
1:0b564c7:     // serialization wrapper. In which case it doesn't hold any network resources.
1:0b564c7: 
1:0b564c7:   }
1:f870a63: }
============================================================================
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:0b564c7
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Stop broadcasting when called on driver side. Release any network resources.
1:    *
1:    */
1:   @Override
1:   public void close() throws IOException {
1: 
1:     // TODO: review this. It looks like it is not really a broadcast mechanism but rather just a
1:     // serialization wrapper. In which case it doesn't hold any network resources.
1: 
1:   }
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.MatrixWritable;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.drm.BCast;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.ObjectOutputStream;
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     } catch (IOException e) {
/////////////////////////////////////////////////////////////////////////
1:     try (ByteArrayInputStream bis = new ByteArrayInputStream(buf)){
/////////////////////////////////////////////////////////////////////////
1:     } catch (IOException e) {
1:       e.printStackTrace();
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Broadcast class wrapper around Matrix and Vector.
1:  *
1:  * Use MatrixWritable and VectorWritable internally.
1:  * Even though the class is generically typed, we do runtime
1:  * enforcement to assert the type is either Matrix or Vector.
1:  *
1:  * H2OBCast object is created around a Matrix or Vector. Matrix or Vector
1:  * objects cannot be freely referred in closures. Instead create and refer the
1:  * corresponding H2OBCast object. The original Matrix or Vector can be
1:  * obtained by calling the ->value() method on the H2OBCast object within a
1:  * closure.
1:  */
1:   private transient T obj;
1:   private byte buf[];
1:   private boolean isMatrix;
1:   /**
1:    * Class constructor.
1:    */
1:       isMatrix = true;
1:       isMatrix = false;
1:   /**
1:    * Get the serialized object.
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Internal method to serialize the object.
1:    *
1:    * @param w Either MatrixWritable or VectorWritable corresponding to
1:    *          either Matrix or Vector as the class is typed.
1:    * @return serialized sequence of bytes.
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Internal method to deserialize a sequence of bytes.
1:    *
1:    * @param buf Sequence of bytes previously serialized by serialize() method.
1:    * @return The original Matrix or Vector object.
1:    */
1:       if (isMatrix) {
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.drm;
1: 
0: import org.apache.mahout.math.drm.BCast;
0: import org.apache.mahout.math.Matrix;
0: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.math.MatrixWritable;
0: import org.apache.mahout.math.VectorWritable;
1: 
1: import org.apache.hadoop.io.Writable;
1: 
0: import java.io.Serializable;
0: import java.io.ByteArrayOutputStream;
1: import java.io.ByteArrayInputStream;
0: import java.io.ObjectOutputStream;
1: import java.io.ObjectInputStream;
1: 
0: /* Handle Matrix and Vector separately so that we can live with
0:    just importing MatrixWritable and VectorWritable.
1: */
1: 
1: public class H2OBCast<T> implements BCast<T>, Serializable {
0:   transient T obj;
0:   byte buf[];
0:   boolean is_matrix;
1: 
1:   public H2OBCast(T o) {
1:     obj = o;
1: 
1:     if (o instanceof Matrix) {
1:       buf = serialize(new MatrixWritable((Matrix)o));
0:       is_matrix = true;
1:     } else if (o instanceof Vector) {
1:       buf = serialize(new VectorWritable((Vector)o));
1:     } else {
1:       throw new IllegalArgumentException("Only Matrix or Vector supported for now");
1:     }
1:   }
1: 
1:   public T value() {
1:     if (obj == null) {
1:       obj = deserialize(buf);
1:     }
1:     return obj;
1:   }
1: 
1:   private byte[] serialize(Writable w) {
1:     ByteArrayOutputStream bos = new ByteArrayOutputStream();
1:     try {
1:       ObjectOutputStream oos = new ObjectOutputStream(bos);
1:       w.write(oos);
1:       oos.close();
0:     } catch (java.io.IOException e) {
1:       return null;
1:     }
1:     return bos.toByteArray();
1:   }
1: 
1:   private T deserialize(byte buf[]) {
1:     T ret = null;
0:     ByteArrayInputStream bis = new ByteArrayInputStream(buf);
1:     try {
1:       ObjectInputStream ois = new ObjectInputStream(bis);
0:       if (is_matrix) {
1:         MatrixWritable w = new MatrixWritable();
1:         w.readFields(ois);
1:         ret = (T) w.get();
1:       } else {
1:         VectorWritable w = new VectorWritable();
1:         w.readFields(ois);
1:         ret = (T) w.get();
1:       }
0:     } catch (java.io.IOException e) {
0:       System.out.println("Caught exception: " + e);
1:     }
1:     return ret;
1:   }
1: }
============================================================================