1:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
2:f870a63:  */
2:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings.ops;
1:f870a63: 
1:f870a63: import org.apache.mahout.h2obindings.H2OHelper;
1:f870a63: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:f870a63: 
1:f870a63: import water.MRTask;
1:f870a63: import water.fvec.Frame;
1:f870a63: import water.fvec.Vec;
1:f870a63: import water.fvec.Chunk;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * Calculate A'B
1:2d1b0bf:  */
1:f870a63: public class AtB {
1:2d1b0bf:   /**
1:2d1b0bf:    * Perform A'B operation on two DRMs to create a new DRM.
1:2d1b0bf:    *
1:2d1b0bf:    * @param drmA DRM representing matrix A.
1:2d1b0bf:    * @param drmB DRM representing matrix B.
1:2d1b0bf:    * @return new DRM containing A'B.
1:2d1b0bf:    */
1:03a5bb6:   public static H2ODrm exec(H2ODrm drmA, H2ODrm drmB) {
1:f870a63:     final Frame A = drmA.frame;
1:f870a63:     final Frame B = drmB.frame;
1:f870a63: 
1:2d1b0bf:     // First create an empty frame of the required dimensions
1:c964986:     Frame AtB = H2OHelper.emptyFrame(A.numCols(), B.numCols(), -1, -1);
1:f870a63: 
1:2d1b0bf:     // Execute MRTask on the new Frame, and fill each cell (initially 0) by
1:2d1b0bf:     // computing appropriate values from A and B.
1:2d1b0bf:     //
1:2d1b0bf:     // chks.length == B.numCols()
1:f870a63:     new MRTask() {
1:f870a63:       public void map(Chunk chks[]) {
1:2d1b0bf:         int chunkSize = chks[0].len();
1:f870a63:         long start = chks[0].start();
1:f870a63:         long A_rows = A.numRows();
1:f870a63:         Vec A_vecs[] = A.vecs();
1:f870a63:         Vec B_vecs[] = B.vecs();
1:f870a63: 
1:f870a63:         for (int c = 0; c < chks.length; c++) {
1:2d1b0bf:           for (int r = 0; r < chunkSize; r++) {
1:f870a63:             double v = 0;
1:f870a63:             for (long i = 0; i < A_rows; i++) {
1:f870a63:               v += (A_vecs[(int)(start + r)].at(i) * B_vecs[c].at(i));
1:f870a63:             }
1:f5f54a1:             chks[c].set(r, v);
1:f870a63:           }
1:f870a63:         }
1:f870a63:       }
1:f870a63:     }.doAll(AtB);
1:f870a63: 
1:2d1b0bf:     // AtB is NOT similarly partitioned as A, drop labels
1:f870a63:     return new H2ODrm(AtB);
1:f870a63:   }
1:f870a63: }
============================================================================
author:Stevo Slavic
-------------------------------------------------------------------------------
commit:f5f54a1
/////////////////////////////////////////////////////////////////////////
1:             chks[c].set(r, v);
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Calculate A'B
1:  */
1:   /**
1:    * Perform A'B operation on two DRMs to create a new DRM.
1:    *
1:    * @param drmA DRM representing matrix A.
1:    * @param drmB DRM representing matrix B.
1:    * @return new DRM containing A'B.
1:    */
1:     // First create an empty frame of the required dimensions
1:     // Execute MRTask on the new Frame, and fill each cell (initially 0) by
1:     // computing appropriate values from A and B.
1:     //
1:     // chks.length == B.numCols()
1:         int chunkSize = chks[0].len();
1:           for (int r = 0; r < chunkSize; r++) {
/////////////////////////////////////////////////////////////////////////
1:     // AtB is NOT similarly partitioned as A, drop labels
commit:03a5bb6
/////////////////////////////////////////////////////////////////////////
1:   public static H2ODrm exec(H2ODrm drmA, H2ODrm drmB) {
commit:c964986
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Frame AtB = H2OHelper.emptyFrame(A.numCols(), B.numCols(), -1, -1);
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.ops;
1: 
1: import org.apache.mahout.h2obindings.H2OHelper;
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
1: import water.MRTask;
1: import water.fvec.Frame;
1: import water.fvec.Vec;
1: import water.fvec.Chunk;
0: import water.fvec.NewChunk;
1: 
1: public class AtB {
0:   /* Calculate A'B */
0:   public static H2ODrm AtB(H2ODrm drmA, H2ODrm drmB) {
1:     final Frame A = drmA.frame;
1:     final Frame B = drmB.frame;
1: 
0:     /* First create an empty frame of the required dimensions */
0:     Frame AtB = H2OHelper.empty_frame(A.numCols(), B.numCols(), -1, -1);
1: 
0:     /* Execute MRTask on the new Frame, and fill each cell (initially 0) by
0:        computing appropriate values from A and B.
1: 
0:        chks.length == B.numCols()
1:     */
1:     new MRTask() {
1:       public void map(Chunk chks[]) {
0:         int chunk_size = chks[0].len();
1:         long start = chks[0].start();
1:         long A_rows = A.numRows();
1:         Vec A_vecs[] = A.vecs();
1:         Vec B_vecs[] = B.vecs();
1: 
1:         for (int c = 0; c < chks.length; c++) {
0:           for (int r = 0; r < chunk_size; r++) {
1:             double v = 0;
1:             for (long i = 0; i < A_rows; i++) {
1:               v += (A_vecs[(int)(start + r)].at(i) * B_vecs[c].at(i));
1:             }
0:             chks[c].set0(r, v);
1:           }
1:         }
1:       }
1:     }.doAll(AtB);
1: 
0:     /* AtB is NOT similarly partitioned as A, drop labels */
1:     return new H2ODrm(AtB);
1:   }
1: }
============================================================================