1:a8d3dbd: 
1:a8d3dbd: /*
1:a8d3dbd:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
1:a8d3dbd:  * agreements. See the NOTICE file distributed with this work for additional information regarding
1:a8d3dbd:  * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
1:a8d3dbd:  * "License"); you may not use this file except in compliance with the License. You may obtain a
1:a8d3dbd:  * copy of the License at
1:a8d3dbd:  *
1:a8d3dbd:  * http://www.apache.org/licenses/LICENSE-2.0
1:a8d3dbd:  *
1:a8d3dbd:  * Unless required by applicable law or agreed to in writing, software distributed under the License
1:a8d3dbd:  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
1:a8d3dbd:  * or implied. See the License for the specific language governing permissions and limitations under
1:a8d3dbd:  * the License.
1:a8d3dbd:  */
1:a8d3dbd: 
1:a8d3dbd: package org.apache.mahout.math;
1:a8d3dbd: 
1:a8d3dbd: import org.apache.mahout.math.function.Functions;
1:a8d3dbd: import org.easymock.EasyMock;
1:a8d3dbd: import org.junit.Before;
1:a8d3dbd: import org.junit.Test;
1:a8d3dbd: import org.junit.runner.RunWith;
1:a8d3dbd: import org.junit.runners.JUnit4;
1:a8d3dbd: 
1:a8d3dbd: import static org.easymock.EasyMock.expect;
1:a8d3dbd: import static org.easymock.EasyMock.replay;
1:a8d3dbd: import static org.junit.Assert.assertEquals;
1:a8d3dbd: 
1:a8d3dbd: @RunWith(JUnit4.class)
1:a8d3dbd: public final class VectorBinaryAggregateCostTest {
1:a8d3dbd:   RandomAccessSparseVector realRasv = new RandomAccessSparseVector(1000000);
1:a8d3dbd:   SequentialAccessSparseVector realSasv = new SequentialAccessSparseVector(1000000);
1:a8d3dbd:   DenseVector realDense = new DenseVector(1000000);
1:a8d3dbd: 
1:a8d3dbd:   Vector rasv = EasyMock.createMock(Vector.class);
1:a8d3dbd:   Vector sasv = EasyMock.createMock(Vector.class);
1:a8d3dbd:   Vector dense = EasyMock.createMock(Vector.class);
1:a8d3dbd: 
1:4ca6b86:   private static void createStubs(Vector v, Vector realV) {
1:a8d3dbd:     expect(v.getLookupCost())
1:a8d3dbd:         .andStubReturn(realV instanceof SequentialAccessSparseVector
1:a8d3dbd:             ? Math.round(Math.log(1000)) : realV.getLookupCost());
1:a8d3dbd:     expect(v.getIteratorAdvanceCost())
1:a8d3dbd:         .andStubReturn(realV.getIteratorAdvanceCost());
1:a8d3dbd:     expect(v.isAddConstantTime())
1:a8d3dbd:         .andStubReturn(realV.isAddConstantTime());
1:a8d3dbd:     expect(v.isSequentialAccess())
1:a8d3dbd:         .andStubReturn(realV.isSequentialAccess());
1:a8d3dbd:     expect(v.isDense())
1:a8d3dbd:         .andStubReturn(realV.isDense());
1:a8d3dbd:     expect(v.getNumNondefaultElements())
1:a8d3dbd:         .andStubReturn(realV.isDense() ? realV.size() : 1000);
1:a8d3dbd:     expect(v.size())
1:a8d3dbd:         .andStubReturn(realV.size());
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Before
1:a8d3dbd:   public void setUpStubs() {
1:a8d3dbd:     createStubs(dense, realDense);
1:a8d3dbd:     createStubs(sasv, realSasv);
1:a8d3dbd:     createStubs(rasv, realRasv);
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Test
1:a8d3dbd:   public void denseInteractions() {
1:a8d3dbd:     replayAll();
1:a8d3dbd: 
1:a8d3dbd:     // Dot product
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.PLUS, Functions.MULT).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Chebyshev distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.MAX_ABS, Functions.MINUS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Euclidean distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Manhattan distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.PLUS, Functions.MINUS_ABS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Minkowski distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Tanimoto distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Test
1:a8d3dbd:   public void sasvInteractions() {
1:a8d3dbd:     replayAll();
1:a8d3dbd: 
1:a8d3dbd:     // Dot product
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateIntersection.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.PLUS, Functions.MULT).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Chebyshev distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Euclidean distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Manhattan distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Minkowski distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Tanimoto distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateIntersection.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Test
1:a8d3dbd:   public void rasvInteractions() {
1:a8d3dbd:     replayAll();
1:a8d3dbd: 
1:a8d3dbd:     // Dot product
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.PLUS, Functions.MULT).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Chebyshev distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Euclidean distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Manhattan distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Minkowski distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Tanimoto distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Test
1:a8d3dbd:   public void sasvDenseInteractions() {
1:a8d3dbd:     replayAll();
1:a8d3dbd: 
1:a8d3dbd:     // Dot product
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.PLUS, Functions.MULT).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Chebyshev distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.MAX_ABS, Functions.MINUS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Euclidean distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Manhattan distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.PLUS, Functions.MINUS_ABS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Minkowski distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Tanimoto distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Test
1:a8d3dbd:   public void denseSasvInteractions() {
1:a8d3dbd:     replayAll();
1:a8d3dbd: 
1:a8d3dbd:     // Dot product
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.PLUS, Functions.MULT).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Chebyshev distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Euclidean distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Manhattan distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Minkowski distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Tanimoto distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Test
1:a8d3dbd:   public void denseRasvInteractions() {
1:a8d3dbd:     replayAll();
1:a8d3dbd: 
1:a8d3dbd:     // Dot product
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.PLUS, Functions.MULT).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Chebyshev distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Euclidean distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Manhattan distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Minkowski distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Tanimoto distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Test
1:a8d3dbd:   public void rasvDenseInteractions() {
1:a8d3dbd:     replayAll();
1:a8d3dbd: 
1:a8d3dbd:     // Dot product
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.PLUS, Functions.MULT).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Chebyshev distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.MAX_ABS, Functions.MINUS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Euclidean distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Manhattan distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.PLUS, Functions.MINUS_ABS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Minkowski distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Tanimoto distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Test
1:a8d3dbd:   public void sasvRasvInteractions() {
1:a8d3dbd:     replayAll();
1:a8d3dbd: 
1:a8d3dbd:     // Dot product
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.PLUS, Functions.MULT).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Chebyshev distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Euclidean distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Manhattan distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Minkowski distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Tanimoto distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Test
1:a8d3dbd:   public void rasvSasvInteractions() {
1:a8d3dbd:     replayAll();
1:a8d3dbd: 
1:a8d3dbd:     // Dot product
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.PLUS, Functions.MULT).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Chebyshev distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Euclidean distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Manhattan distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Minkowski distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1:a8d3dbd: 
1:a8d3dbd:     // Tanimoto distance
1:a8d3dbd:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:a8d3dbd:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd: 
1:a8d3dbd:   private void replayAll() {
1:a8d3dbd:     replay(dense, sasv, rasv);
1:a8d3dbd:   }
1:a8d3dbd: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:   private static void createStubs(Vector v, Vector realV) {
author:dfilimon
-------------------------------------------------------------------------------
commit:a8d3dbd
/////////////////////////////////////////////////////////////////////////
1: 
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
1:  * agreements. See the NOTICE file distributed with this work for additional information regarding
1:  * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance with the License. You may obtain a
1:  * copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software distributed under the License
1:  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
1:  * or implied. See the License for the specific language governing permissions and limitations under
1:  * the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.math.function.Functions;
1: import org.easymock.EasyMock;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.JUnit4;
1: 
1: import static org.easymock.EasyMock.expect;
1: import static org.easymock.EasyMock.replay;
1: import static org.junit.Assert.assertEquals;
1: 
1: @RunWith(JUnit4.class)
1: public final class VectorBinaryAggregateCostTest {
1:   RandomAccessSparseVector realRasv = new RandomAccessSparseVector(1000000);
1:   SequentialAccessSparseVector realSasv = new SequentialAccessSparseVector(1000000);
1:   DenseVector realDense = new DenseVector(1000000);
1: 
1:   Vector rasv = EasyMock.createMock(Vector.class);
1:   Vector sasv = EasyMock.createMock(Vector.class);
1:   Vector dense = EasyMock.createMock(Vector.class);
1: 
0:   private void createStubs(Vector v, Vector realV) {
1:     expect(v.getLookupCost())
1:         .andStubReturn(realV instanceof SequentialAccessSparseVector
1:             ? Math.round(Math.log(1000)) : realV.getLookupCost());
1:     expect(v.getIteratorAdvanceCost())
1:         .andStubReturn(realV.getIteratorAdvanceCost());
1:     expect(v.isAddConstantTime())
1:         .andStubReturn(realV.isAddConstantTime());
1:     expect(v.isSequentialAccess())
1:         .andStubReturn(realV.isSequentialAccess());
1:     expect(v.isDense())
1:         .andStubReturn(realV.isDense());
1:     expect(v.getNumNondefaultElements())
1:         .andStubReturn(realV.isDense() ? realV.size() : 1000);
1:     expect(v.size())
1:         .andStubReturn(realV.size());
1:   }
1: 
1:   @Before
1:   public void setUpStubs() {
1:     createStubs(dense, realDense);
1:     createStubs(sasv, realSasv);
1:     createStubs(rasv, realRasv);
1:   }
1: 
1:   @Test
1:   public void denseInteractions() {
1:     replayAll();
1: 
1:     // Dot product
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.PLUS, Functions.MULT).getClass());
1: 
1:     // Chebyshev distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.MAX_ABS, Functions.MINUS).getClass());
1: 
1:     // Euclidean distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1: 
1:     // Manhattan distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.PLUS, Functions.MINUS_ABS).getClass());
1: 
1:     // Minkowski distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1: 
1:     // Tanimoto distance
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:         VectorBinaryAggregate.getBestOperation(dense, dense, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:   }
1: 
1:   @Test
1:   public void sasvInteractions() {
1:     replayAll();
1: 
1:     // Dot product
1:     assertEquals(VectorBinaryAggregate.AggregateIterateIntersection.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.PLUS, Functions.MULT).getClass());
1: 
1:     // Chebyshev distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1: 
1:     // Euclidean distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1: 
1:     // Manhattan distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1: 
1:     // Minkowski distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1: 
1:     // Tanimoto distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateIntersection.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, sasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:   }
1: 
1:   @Test
1:   public void rasvInteractions() {
1:     replayAll();
1: 
1:     // Dot product
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.PLUS, Functions.MULT).getClass());
1: 
1:     // Chebyshev distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1: 
1:     // Euclidean distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1: 
1:     // Manhattan distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1: 
1:     // Minkowski distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1: 
1:     // Tanimoto distance
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, rasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:   }
1: 
1:   @Test
1:   public void sasvDenseInteractions() {
1:     replayAll();
1: 
1:     // Dot product
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.PLUS, Functions.MULT).getClass());
1: 
1:     // Chebyshev distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.MAX_ABS, Functions.MINUS).getClass());
1: 
1:     // Euclidean distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1: 
1:     // Manhattan distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.PLUS, Functions.MINUS_ABS).getClass());
1: 
1:     // Minkowski distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1: 
1:     // Tanimoto distance
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, dense, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:   }
1: 
1:   @Test
1:   public void denseSasvInteractions() {
1:     replayAll();
1: 
1:     // Dot product
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.PLUS, Functions.MULT).getClass());
1: 
1:     // Chebyshev distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1: 
1:     // Euclidean distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1: 
1:     // Manhattan distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1: 
1:     // Minkowski distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionSequential.class,
1:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1: 
1:     // Tanimoto distance
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:         VectorBinaryAggregate.getBestOperation(dense, sasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:   }
1: 
1:   @Test
1:   public void denseRasvInteractions() {
1:     replayAll();
1: 
1:     // Dot product
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.PLUS, Functions.MULT).getClass());
1: 
1:     // Chebyshev distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1: 
1:     // Euclidean distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1: 
1:     // Manhattan distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1: 
1:     // Minkowski distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1: 
1:     // Tanimoto distance
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:         VectorBinaryAggregate.getBestOperation(dense, rasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:   }
1: 
1:   @Test
1:   public void rasvDenseInteractions() {
1:     replayAll();
1: 
1:     // Dot product
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.PLUS, Functions.MULT).getClass());
1: 
1:     // Chebyshev distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.MAX_ABS, Functions.MINUS).getClass());
1: 
1:     // Euclidean distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1: 
1:     // Manhattan distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.PLUS, Functions.MINUS_ABS).getClass());
1: 
1:     // Minkowski distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1: 
1:     // Tanimoto distance
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, dense, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:   }
1: 
1:   @Test
1:   public void sasvRasvInteractions() {
1:     replayAll();
1: 
1:     // Dot product
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.PLUS, Functions.MULT).getClass());
1: 
1:     // Chebyshev distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1: 
1:     // Euclidean distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1: 
1:     // Manhattan distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1: 
1:     // Minkowski distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1: 
1:     // Tanimoto distance
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThisLookupThat.class,
1:         VectorBinaryAggregate.getBestOperation(sasv, rasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:   }
1: 
1:   @Test
1:   public void rasvSasvInteractions() {
1:     replayAll();
1: 
1:     // Dot product
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.PLUS, Functions.MULT).getClass());
1: 
1:     // Chebyshev distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.MAX_ABS, Functions.MINUS).getClass());
1: 
1:     // Euclidean distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.PLUS, Functions.MINUS_SQUARED).getClass());
1: 
1:     // Manhattan distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.PLUS, Functions.MINUS_ABS).getClass());
1: 
1:     // Minkowski distance
1:     assertEquals(VectorBinaryAggregate.AggregateIterateUnionRandom.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.PLUS, Functions.minusAbsPow(1.2)).getClass());
1: 
1:     // Tanimoto distance
1:     assertEquals(VectorBinaryAggregate.AggregateNonzerosIterateThatLookupThis.class,
1:         VectorBinaryAggregate.getBestOperation(rasv, sasv, Functions.PLUS, Functions.MULT_SQUARE_LEFT).getClass());
1:   }
1: 
1: 
1:   private void replayAll() {
1:     replay(dense, sasv, rasv);
1:   }
1: }
============================================================================