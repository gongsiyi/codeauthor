1:a13b4b7: /**
1:a13b4b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a13b4b7:  * contributor license agreements.  See the NOTICE file distributed with
1:a13b4b7:  * this work for additional information regarding copyright ownership.
1:a13b4b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a13b4b7:  * (the "License"); you may not use this file except in compliance with
1:a13b4b7:  * the License.  You may obtain a copy of the License at
1:a13b4b7:  *
1:a13b4b7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a13b4b7:  *
1:a13b4b7:  * Unless required by applicable law or agreed to in writing, software
1:a13b4b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a13b4b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a13b4b7:  * See the License for the specific language governing permissions and
1:a13b4b7:  * limitations under the License.
1:a13b4b7:  */
1:a13b4b7: 
1:a13b4b7: package org.apache.mahout.common.iterator.sequencefile;
1:a13b4b7: 
1:a13b4b7: import org.apache.hadoop.fs.Path;
1:a13b4b7: import org.apache.hadoop.fs.PathFilter;
1:a13b4b7: 
1:a13b4b7: /**
1:a13b4b7:  * Supplies some useful and repeatedly-used instances of {@link PathFilter}.
1:a13b4b7:  */
1:a13b4b7: public final class PathFilters {
1:a13b4b7: 
1:a13b4b7:   private static final PathFilter PART_FILE_INSTANCE = new PathFilter() {
1:a13b4b7:     @Override
1:a13b4b7:     public boolean accept(Path path) {
1:a13b4b7:       String name = path.getName();
1:a13b4b7:       return name.startsWith("part-") && !name.endsWith(".crc");
1:a13b4b7:     }
1:a13b4b7:   };
1:6a3f566:   
1:6a3f566:   /**
1:6a3f566:    * Pathfilter to read the final clustering file.
1:6a3f566:    */
1:6a3f566:   private static final PathFilter CLUSTER_FINAL = new PathFilter() {
1:6a3f566:     @Override
1:6a3f566:     public boolean accept(Path path) {
1:6a3f566:       String name = path.getName();
1:6a3f566:       return name.startsWith("clusters-") && name.endsWith("-final");
1:6a3f566:     }
1:6a3f566:   };
1:a13b4b7: 
1:a13b4b7:   private static final PathFilter LOGS_CRC_INSTANCE = new PathFilter() {
1:a13b4b7:     @Override
1:a13b4b7:     public boolean accept(Path path) {
1:a13b4b7:       String name = path.getName();
1:a13b4b7:       return !(name.endsWith(".crc") || name.startsWith(".") || name.startsWith("_"));
1:a13b4b7:     }
1:a13b4b7:   };
1:a13b4b7: 
1:a13b4b7:   private PathFilters() {
1:a13b4b7:   }
1:a13b4b7: 
1:a13b4b7:   /**
1:a13b4b7:    * @return {@link PathFilter} that accepts paths whose file name starts with "part-". Excludes
1:a13b4b7:    * ".crc" files.
1:a13b4b7:    */
1:a13b4b7:   public static PathFilter partFilter() {
1:a13b4b7:     return PART_FILE_INSTANCE;
1:a13b4b7:   }
1:6a3f566:   
1:6a3f566:   /**
1:6a3f566:    * @return {@link PathFilter} that accepts paths whose file name starts with "part-" and ends with "-final".
1:6a3f566:    */
1:6a3f566:   public static PathFilter finalPartFilter() {
1:6a3f566:     return CLUSTER_FINAL;
1:6a3f566:   }
1:a13b4b7: 
1:a13b4b7:   /**
1:a13b4b7:    * @return {@link PathFilter} that rejects paths whose file name starts with "_" (e.g. Cloudera
1:a13b4b7:    * _SUCCESS files or Hadoop _logs), or "." (e.g. local hidden files), or ends with ".crc"
1:a13b4b7:    */
1:a13b4b7:   public static PathFilter logsCRCFilter() {
1:a13b4b7:     return LOGS_CRC_INSTANCE;
1:a13b4b7:   }
1:a13b4b7: 
1:a13b4b7: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:6a3f566
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * Pathfilter to read the final clustering file.
1:    */
1:   private static final PathFilter CLUSTER_FINAL = new PathFilter() {
1:     @Override
1:     public boolean accept(Path path) {
1:       String name = path.getName();
1:       return name.startsWith("clusters-") && name.endsWith("-final");
1:     }
1:   };
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * @return {@link PathFilter} that accepts paths whose file name starts with "part-" and ends with "-final".
1:    */
1:   public static PathFilter finalPartFilter() {
1:     return CLUSTER_FINAL;
1:   }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.iterator.sequencefile;
1: 
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.fs.PathFilter;
1: 
1: /**
1:  * Supplies some useful and repeatedly-used instances of {@link PathFilter}.
1:  */
1: public final class PathFilters {
1: 
1:   private static final PathFilter PART_FILE_INSTANCE = new PathFilter() {
1:     @Override
1:     public boolean accept(Path path) {
1:       String name = path.getName();
1:       return name.startsWith("part-") && !name.endsWith(".crc");
1:     }
1:   };
1: 
1:   private static final PathFilter LOGS_CRC_INSTANCE = new PathFilter() {
1:     @Override
1:     public boolean accept(Path path) {
1:       String name = path.getName();
1:       return !(name.endsWith(".crc") || name.startsWith(".") || name.startsWith("_"));
1:     }
1:   };
1: 
1:   private PathFilters() {
1:   }
1: 
1:   /**
1:    * @return {@link PathFilter} that accepts paths whose file name starts with "part-". Excludes
1:    * ".crc" files.
1:    */
1:   public static PathFilter partFilter() {
1:     return PART_FILE_INSTANCE;
1:   }
1: 
1:   /**
1:    * @return {@link PathFilter} that rejects paths whose file name starts with "_" (e.g. Cloudera
1:    * _SUCCESS files or Hadoop _logs), or "." (e.g. local hidden files), or ends with ".crc"
1:    */
1:   public static PathFilter logsCRCFilter() {
1:     return LOGS_CRC_INSTANCE;
1:   }
1: 
1: }
============================================================================