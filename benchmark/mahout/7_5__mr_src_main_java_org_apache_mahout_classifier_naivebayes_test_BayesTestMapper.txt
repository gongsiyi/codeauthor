1:29a7f38: /**
1:29a7f38:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:29a7f38:  * contributor license agreements.  See the NOTICE file distributed with
1:29a7f38:  * this work for additional information regarding copyright ownership.
1:29a7f38:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:29a7f38:  * (the "License"); you may not use this file except in compliance with
1:29a7f38:  * the License.  You may obtain a copy of the License at
1:29a7f38:  *
1:29a7f38:  *     http://www.apache.org/licenses/LICENSE-2.0
1:29a7f38:  *
1:29a7f38:  * Unless required by applicable law or agreed to in writing, software
1:29a7f38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:29a7f38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:29a7f38:  * See the License for the specific language governing permissions and
1:29a7f38:  * limitations under the License.
1:29a7f38:  */
2:29a7f38: 
1:4194a28: package org.apache.mahout.classifier.naivebayes.test;
1:29a7f38: 
1:9a5bab5: import com.google.common.base.Preconditions;
1:29a7f38: import org.apache.hadoop.conf.Configuration;
1:29a7f38: import org.apache.hadoop.fs.Path;
1:29a7f38: import org.apache.hadoop.io.Text;
1:29a7f38: import org.apache.hadoop.mapreduce.Mapper;
1:29a7f38: import org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier;
1:29a7f38: import org.apache.mahout.classifier.naivebayes.ComplementaryNaiveBayesClassifier;
1:29a7f38: import org.apache.mahout.classifier.naivebayes.NaiveBayesModel;
1:29a7f38: import org.apache.mahout.classifier.naivebayes.StandardNaiveBayesClassifier;
1:29a7f38: import org.apache.mahout.common.HadoopUtil;
1:29a7f38: import org.apache.mahout.math.Vector;
1:29a7f38: import org.apache.mahout.math.VectorWritable;
1:29a7f38: 
1:29a7f38: import java.io.IOException;
1:229aeff: import java.util.regex.Pattern;
1:29a7f38: 
1:29a7f38: /**
1:29a7f38:  * Run the input through the model and see if it matches.
1:29a7f38:  * <p/>
1:29a7f38:  * The output value is the generated label, the Pair is the expected label and true if they match:
1:29a7f38:  */
1:29a7f38: public class BayesTestMapper extends Mapper<Text, VectorWritable, Text, VectorWritable> {
1:4194a28: 
1:229aeff:   private static final Pattern SLASH = Pattern.compile("/");
1:229aeff: 
1:4194a28:   private AbstractNaiveBayesClassifier classifier;
1:29a7f38: 
1:29a7f38:   @Override
1:29a7f38:   protected void setup(Context context) throws IOException, InterruptedException {
1:d8d721a:     super.setup(context);
1:29a7f38:     Configuration conf = context.getConfiguration();
1:6d9179e:     Path modelPath = HadoopUtil.getSingleCachedFile(conf);
1:29a7f38:     NaiveBayesModel model = NaiveBayesModel.materialize(modelPath, conf);
1:9a5bab5:     boolean isComplementary = Boolean.parseBoolean(conf.get(TestNaiveBayesDriver.COMPLEMENTARY));
1:9a5bab5:     
1:9a5bab5:     // ensure that if we are testing in complementary mode, the model has been
1:9a5bab5:     // trained complementary. a complementarty model will work for standard classification
1:9a5bab5:     // a standard model will not work for complementary classification
1:9a5bab5:     if (isComplementary) {
1:87c15be:       Preconditions.checkArgument((model.isComplemtary()),
1:9a5bab5:           "Complementary mode in model is different than test mode");
1:9a5bab5:     }
1:9a5bab5:     
1:9a5bab5:     if (isComplementary) {
1:29a7f38:       classifier = new ComplementaryNaiveBayesClassifier(model);
1:29a7f38:     } else {
1:29a7f38:       classifier = new StandardNaiveBayesClassifier(model);
1:29a7f38:     }
1:29a7f38:   }
1:29a7f38: 
1:29a7f38:   @Override
1:29a7f38:   protected void map(Text key, VectorWritable value, Context context) throws IOException, InterruptedException {
1:d8d721a:     Vector result = classifier.classifyFull(value.get());
1:29a7f38:     //the key is the expected value
1:229aeff:     context.write(new Text(SLASH.split(key.toString())[1]), new VectorWritable(result));
1:29a7f38:   }
1:29a7f38: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:       Preconditions.checkArgument((model.isComplemtary()),
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:9a5bab5
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
/////////////////////////////////////////////////////////////////////////
1:     boolean isComplementary = Boolean.parseBoolean(conf.get(TestNaiveBayesDriver.COMPLEMENTARY));
1:     
1:     // ensure that if we are testing in complementary mode, the model has been
1:     // trained complementary. a complementarty model will work for standard classification
1:     // a standard model will not work for complementary classification
1:     if (isComplementary) {
0:       Preconditions.checkArgument((model.isComplemtary() == isComplementary),
1:           "Complementary mode in model is different than test mode");
1:     }
1:     
1:     if (isComplementary) {
commit:6d9179e
/////////////////////////////////////////////////////////////////////////
1:     Path modelPath = HadoopUtil.getSingleCachedFile(conf);
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Pattern;
/////////////////////////////////////////////////////////////////////////
1:   private static final Pattern SLASH = Pattern.compile("/");
1: 
/////////////////////////////////////////////////////////////////////////
1:     context.write(new Text(SLASH.split(key.toString())[1]), new VectorWritable(result));
commit:4194a28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.naivebayes.test;
/////////////////////////////////////////////////////////////////////////
1: 
1:   private AbstractNaiveBayesClassifier classifier;
author:Robin Anil
-------------------------------------------------------------------------------
commit:a344c6b
/////////////////////////////////////////////////////////////////////////
0:     context.write(new Text(key.toString().split("/")[1]), new VectorWritable(result));
commit:d8d721a
/////////////////////////////////////////////////////////////////////////
1:     super.setup(context);
0:     System.out.println("Setup");
/////////////////////////////////////////////////////////////////////////
1:     Vector result = classifier.classifyFull(value.get());
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.classifier.naivebayes.test;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier;
1: import org.apache.mahout.classifier.naivebayes.ComplementaryNaiveBayesClassifier;
1: import org.apache.mahout.classifier.naivebayes.NaiveBayesModel;
1: import org.apache.mahout.classifier.naivebayes.StandardNaiveBayesClassifier;
1: import org.apache.mahout.common.HadoopUtil;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * Run the input through the model and see if it matches.
1:  * <p/>
1:  * The output value is the generated label, the Pair is the expected label and true if they match:
1:  */
1: public class BayesTestMapper extends Mapper<Text, VectorWritable, Text, VectorWritable> {
0:   AbstractNaiveBayesClassifier classifier;
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     Configuration conf = context.getConfiguration();
0:     Path modelPath = HadoopUtil.cachedFile(conf);
1:     NaiveBayesModel model = NaiveBayesModel.materialize(modelPath, conf);
0:     boolean compl = Boolean.parseBoolean(conf.get(TestNaiveBayesDriver.COMPLEMENTARY));
0:     if (compl) {
1:       classifier = new ComplementaryNaiveBayesClassifier(model);
1:     } else {
1:       classifier = new StandardNaiveBayesClassifier(model);
1:     }
1:   }
1: 
1:   @Override
1:   protected void map(Text key, VectorWritable value, Context context) throws IOException, InterruptedException {
0:     Vector result = classifier.classify(value.get());
1:     //the key is the expected value
0:     context.write(key, new VectorWritable(result));
1: 
1:   }
1: }
============================================================================