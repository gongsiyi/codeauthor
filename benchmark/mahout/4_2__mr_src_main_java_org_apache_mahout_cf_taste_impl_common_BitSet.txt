2:42820b6: /**
1:42820b6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:42820b6:  * contributor license agreements.  See the NOTICE file distributed with
1:42820b6:  * this work for additional information regarding copyright ownership.
1:42820b6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:42820b6:  * (the "License"); you may not use this file except in compliance with
1:42820b6:  * the License.  You may obtain a copy of the License at
1:42820b6:  *
1:42820b6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:42820b6:  *
1:42820b6:  * Unless required by applicable law or agreed to in writing, software
1:42820b6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:42820b6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:42820b6:  * See the License for the specific language governing permissions and
1:42820b6:  * limitations under the License.
2:42820b6:  */
1:42820b6: 
1:42820b6: package org.apache.mahout.cf.taste.impl.common;
1:42820b6: 
1:a034755: import java.io.Serializable;
1:5a5acf0: import java.util.Arrays;
1:a034755: 
1:b25ad9d: /** A simplified and streamlined version of {@link java.util.BitSet}. */
1:43a5c74: final class BitSet implements Serializable, Cloneable {
1:42820b6:   
1:42820b6:   private final long[] bits;
1:42820b6:   
1:42820b6:   BitSet(int numBits) {
1:42820b6:     int numLongs = numBits >>> 6;
1:821c7d9:     if ((numBits & 0x3F) != 0) {
1:42820b6:       numLongs++;
2:42820b6:     }
1:42820b6:     bits = new long[numLongs];
1:42820b6:   }
1:42820b6:   
1:b19c3b9:   private BitSet(long[] bits) {
1:b19c3b9:     this.bits = bits;
1:b19c3b9:   }
1:b19c3b9:   
1:42820b6:   boolean get(int index) {
1:42820b6:     // skipping range check for speed
1:1b4e01f:     return (bits[index >>> 6] & 1L << (index & 0x3F)) != 0L;
1:42820b6:   }
1:42820b6:   
1:42820b6:   void set(int index) {
1:42820b6:     // skipping range check for speed
1:1b4e01f:     bits[index >>> 6] |= 1L << (index & 0x3F);
1:42820b6:   }
1:42820b6:   
1:42820b6:   void clear(int index) {
1:42820b6:     // skipping range check for speed
1:821c7d9:     bits[index >>> 6] &= ~(1L << (index & 0x3F));
1:42820b6:   }
1:42820b6:   
1:42820b6:   void clear() {
1:43a5c74:     int length = bits.length;
1:43a5c74:     for (int i = 0; i < length; i++) {
1:42820b6:       bits[i] = 0L;
1:43a5c74:     }
1:42820b6:   }
1:42820b6:   
1:f08dae3:   @Override
1:43a5c74:   public BitSet clone() {
1:5a5acf0:     return new BitSet(bits.clone());
1:5a5acf0:   }
1:5a5acf0: 
1:5a5acf0:   @Override
1:5a5acf0:   public int hashCode() {
1:5a5acf0:     return Arrays.hashCode(bits);
1:5a5acf0:   }
1:5a5acf0: 
1:5a5acf0:   @Override
1:5a5acf0:   public boolean equals(Object o) {
1:5a5acf0:     if (!(o instanceof BitSet)) {
1:5a5acf0:       return false;
1:5a5acf0:     }
1:5a5acf0:     BitSet other = (BitSet) o;
1:5a5acf0:     return Arrays.equals(bits, other.bits);
1:43a5c74:   }
1:43a5c74:   
1:43a5c74:   @Override
1:f08dae3:   public String toString() {
1:f08dae3:     StringBuilder result = new StringBuilder(64 * bits.length);
1:f08dae3:     for (long l : bits) {
1:f08dae3:       for (int j = 0; j < 64; j++) {
1:1b4e01f:         result.append((l & 1L << j) == 0 ? '0' : '1');
1:f08dae3:       }
1:f08dae3:       result.append(' ');
1:f08dae3:     }
1:f08dae3:     return result.toString();
1:f08dae3:   }
1:f08dae3:   
1:42820b6: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:5a5acf0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:     return new BitSet(bits.clone());
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return Arrays.hashCode(bits);
1:   }
1: 
1:   @Override
1:   public boolean equals(Object o) {
1:     if (!(o instanceof BitSet)) {
1:       return false;
1:     }
1:     BitSet other = (BitSet) o;
1:     return Arrays.equals(bits, other.bits);
commit:b19c3b9
/////////////////////////////////////////////////////////////////////////
1:   private BitSet(long[] bits) {
1:     this.bits = bits;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     return new BitSet(bits);
commit:b25ad9d
/////////////////////////////////////////////////////////////////////////
1: /** A simplified and streamlined version of {@link java.util.BitSet}. */
commit:f08dae3
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public String toString() {
1:     StringBuilder result = new StringBuilder(64 * bits.length);
1:     for (long l : bits) {
1:       for (int j = 0; j < 64; j++) {
0:         result.append((l & (1L << j)) == 0 ? '0' : '1');
1:       }
1:       result.append(' ');
1:     }
1:     return result.toString();
1:   }
1: 
commit:43a5c74
/////////////////////////////////////////////////////////////////////////
1: final class BitSet implements Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
1:     int length = bits.length;
1:     for (int i = 0; i < length; i++) {
1:   @Override
1:   public BitSet clone() {
0:     try {
0:       return (BitSet) super.clone();
0:     } catch (CloneNotSupportedException cnse) {
0:       throw new AssertionError();
1:     }
1:   }
1: 
commit:821c7d9
/////////////////////////////////////////////////////////////////////////
1:     if ((numBits & 0x3F) != 0) {
/////////////////////////////////////////////////////////////////////////
0:     return (bits[index >>> 6] & (1L << (index & 0x3F))) != 0L;
0:     bits[index >>> 6] |= (1L << (index & 0x3F));
1:     bits[index >>> 6] &= ~(1L << (index & 0x3F));
commit:a034755
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: 
0: final class BitSet implements Serializable {
/////////////////////////////////////////////////////////////////////////
0:     return (bits[offset] & (1L << (index & 0x3F))) != 0L;
0:     bits[offset] |= (1L << (index & 0x3F));
0:     bits[offset] &= ~(1L << (index & 0x3F));
commit:42820b6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.common;
1: 
1: /**
0:  * A simplified and streamlined version of {@link java.util.BitSet}.
1:  */
0: final class BitSet {
1: 
1:   private final long[] bits;
1: 
1:   BitSet(int numBits) {
1:     int numLongs = numBits >>> 6;
0:     if (numBits % 64 != 0) {
1:       numLongs++;
1:     }
1:     bits = new long[numLongs];
1:   }
1: 
1:   boolean get(int index) {
1:     // skipping range check for speed
0:     int offset = index >>> 6;
0:     return (bits[offset] & (1L << (index - (offset << 6)))) != 0L;
1:   }
1: 
1:   void set(int index) {
1:     // skipping range check for speed
0:     int offset = index >>> 6;
0:     bits[offset] |= (1L << (index - (offset << 6)));
1:   }
1: 
1:   void clear(int index) {
1:     // skipping range check for speed
0:     int offset = index >>> 6;
0:     bits[offset] &= ~(1L << (index - (offset << 6)));
1:   }
1: 
1:   void clear() {
0:     for (int i = 0; i < bits.length; i++) {
1:       bits[i] = 0L;
1:     }
1:   }
1: 
1: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:1b4e01f
/////////////////////////////////////////////////////////////////////////
0:   
0:   
/////////////////////////////////////////////////////////////////////////
0:   
0:   
1:     return (bits[index >>> 6] & 1L << (index & 0x3F)) != 0L;
0:   
1:     bits[index >>> 6] |= 1L << (index & 0x3F);
0:   
0:   
0:   
0:   
1:         result.append((l & 1L << j) == 0 ? '0' : '1');
0:   
============================================================================