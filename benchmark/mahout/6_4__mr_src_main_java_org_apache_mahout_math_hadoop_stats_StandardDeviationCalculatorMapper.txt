1:d8e91f9: package org.apache.mahout.math.hadoop.stats;
1:d8e91f9: /**
1:d8e91f9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d8e91f9:  * contributor license agreements.  See the NOTICE file distributed with
1:d8e91f9:  * this work for additional information regarding copyright ownership.
1:d8e91f9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d8e91f9:  * (the "License"); you may not use this file except in compliance with
1:d8e91f9:  * the License.  You may obtain a copy of the License at
1:d8e91f9:  *
1:d8e91f9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d8e91f9:  *
1:d8e91f9:  * Unless required by applicable law or agreed to in writing, software
1:d8e91f9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d8e91f9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d8e91f9:  * See the License for the specific language governing permissions and
1:d8e91f9:  * limitations under the License.
1:d8e91f9:  */
1:d8e91f9: 
1:d8e91f9: import org.apache.hadoop.io.DoubleWritable;
1:d8e91f9: import org.apache.hadoop.io.IntWritable;
1:d8e91f9: import org.apache.hadoop.io.LongWritable;
1:d8e91f9: import org.apache.hadoop.io.Writable;
1:d8e91f9: import org.apache.hadoop.mapreduce.Mapper;
1:d8e91f9: 
1:d8e91f9: import java.io.IOException;
1:d8e91f9: 
1:d8e91f9: public class StandardDeviationCalculatorMapper extends
1:d8e91f9:         Mapper<IntWritable, Writable, IntWritable, DoubleWritable> {
1:d8e91f9: 
1:d8e91f9:   public static final IntWritable SUM_OF_SQUARES = new IntWritable(1);
1:d8e91f9:   public static final IntWritable SUM = new IntWritable(2);
1:d8e91f9:   public static final IntWritable TOTAL_COUNT = new IntWritable(-1);
1:d8e91f9: 
1:d8e91f9:   @Override
1:d8e91f9:   protected void map(IntWritable key, Writable value, Context context)
1:6d16230:     throws IOException, InterruptedException {
1:d8e91f9:     if (key.get() == -1) {
1:d8e91f9:       return;
1:d8e91f9:     }
1:d8e91f9:     //Kind of ugly, but such is life
1:d8e91f9:     double df = Double.NaN;
1:e64dd36:     if (value instanceof LongWritable) {
1:d8e91f9:       df = ((LongWritable)value).get();
1:d8e91f9:     } else if (value instanceof DoubleWritable) {
1:d8e91f9:       df = ((DoubleWritable)value).get();
1:d8e91f9:     }
1:564c3e1:     if (!Double.isNaN(df)) {
1:d8e91f9:       // For calculating the sum of squares
1:d8e91f9:       context.write(SUM_OF_SQUARES, new DoubleWritable(df * df));
1:d8e91f9:       context.write(SUM, new DoubleWritable(df));
1:d8e91f9:       // For calculating the total number of entries
1:d8e91f9:       context.write(TOTAL_COUNT, new DoubleWritable(1));
1:d8e91f9:     }
1:d8e91f9:   }
1:d8e91f9: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     throws IOException, InterruptedException {
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     if (value instanceof LongWritable) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:     if (!Double.isNaN(df)) {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:d8e91f9
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.stats;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import org.apache.hadoop.io.DoubleWritable;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.hadoop.mapreduce.Mapper;
1: 
1: import java.io.IOException;
1: 
1: public class StandardDeviationCalculatorMapper extends
1:         Mapper<IntWritable, Writable, IntWritable, DoubleWritable> {
1: 
1:   public static final IntWritable SUM_OF_SQUARES = new IntWritable(1);
1:   public static final IntWritable SUM = new IntWritable(2);
1:   public static final IntWritable TOTAL_COUNT = new IntWritable(-1);
1: 
1:   @Override
1:   protected void map(IntWritable key, Writable value, Context context)
0:           throws IOException, InterruptedException {
1:     if (key.get() == -1) {
1:       return;
1:     }
1:     //Kind of ugly, but such is life
1:     double df = Double.NaN;
0:     if (value instanceof LongWritable){
1:       df = ((LongWritable)value).get();
1:     } else if (value instanceof DoubleWritable) {
1:       df = ((DoubleWritable)value).get();
1:     }
0:     if (Double.isNaN(df) == false) {
1:       // For calculating the sum of squares
1:       context.write(SUM_OF_SQUARES, new DoubleWritable(df * df));
1:       context.write(SUM, new DoubleWritable(df));
1:       // For calculating the total number of entries
1:       context.write(TOTAL_COUNT, new DoubleWritable(1));
1:     }
1:   }
1: }
============================================================================