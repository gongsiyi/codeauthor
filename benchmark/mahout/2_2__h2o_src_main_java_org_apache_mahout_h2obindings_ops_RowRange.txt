1:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
3:f870a63:  */
1:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings.ops;
1:f870a63: 
1:f870a63: import scala.collection.immutable.Range;
1:f870a63: 
1:f870a63: import water.MRTask;
1:f870a63: import water.fvec.Frame;
1:f870a63: import water.fvec.Vec;
1:f870a63: import water.fvec.Chunk;
1:f870a63: import water.fvec.NewChunk;
1:f870a63: import water.parser.ValueString;
1:f870a63: 
1:f870a63: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * Filter operation
1:2d1b0bf:  */
1:f870a63: public class RowRange {
1:2d1b0bf:   /**
1:2d1b0bf:    * Filter rows from intput DRM, to include only row indiced included in R.
1:2d1b0bf:    *
1:2d1b0bf:    * @param drmA Input DRM.
1:2d1b0bf:    * @param R Range object specifying the start and end row numbers to filter.
1:2d1b0bf:    * @return new DRM with just the filtered rows.
1:2d1b0bf:    */
1:03a5bb6:   public static H2ODrm exec(H2ODrm drmA, final Range R) {
1:f870a63:     Frame A = drmA.frame;
1:f870a63:     Vec keys = drmA.keys;
1:f870a63: 
1:2d1b0bf:     // Run a filtering MRTask on A. If row number falls within R.start() and
1:2d1b0bf:     // R.end(), then the row makes it into the output
1:f870a63:     Frame Arr = new MRTask() {
1:f870a63:         public void map(Chunk chks[], NewChunk ncs[]) {
1:2d1b0bf:           int chunkSize = chks[0].len();
1:2d1b0bf:           long chunkStart = chks[0].start();
1:f870a63: 
1:2d1b0bf:           // First check if the entire chunk even overlaps with R
1:2d1b0bf:           if (chunkStart > R.end() || (chunkStart + chunkSize) < R.start()) {
1:f870a63:             return;
1:f870a63:           }
1:f870a63: 
1:2d1b0bf:           // This chunk overlaps, filter out just the overlapping rows
1:2d1b0bf:           for (int r = 0; r < chunkSize; r++) {
1:2d1b0bf:             if (!R.contains(chunkStart + r)) {
1:f870a63:               continue;
1:f870a63:             }
1:f870a63: 
1:f870a63:             for (int c = 0; c < chks.length; c++) {
1:f5f54a1:               ncs[c].addNum(chks[c].atd(r));
1:f870a63:             }
1:f870a63:           }
1:f870a63:         }
1:f870a63:       }.doAll(A.numCols(), A).outputFrame(null, null);
1:f870a63: 
1:f870a63:     Vec Vrr = (keys == null) ? null : new MRTask() {
1:2d1b0bf:         // This is a String keyed DRM. Do the same thing as above,
1:2d1b0bf:         // but this time just one column of Strings.
1:f870a63:         public void map(Chunk chk, NewChunk nc) {
1:2d1b0bf:           int chunkSize = chk.len();
1:2d1b0bf:           long chunkStart = chk.start();
1:f870a63:           ValueString vstr = new ValueString();
1:f870a63: 
1:2d1b0bf:           if (chunkStart > R.end() || (chunkStart + chunkSize) < R.start()) {
1:f870a63:             return;
1:f870a63:           }
1:f870a63: 
1:2d1b0bf:           for (int r = 0; r < chunkSize; r++) {
1:2d1b0bf:             if (!R.contains(chunkStart + r)) {
1:f870a63:               continue;
1:f870a63:             }
1:f870a63: 
1:f5f54a1:             nc.addStr(chk.atStr(vstr, r));
1:f870a63:           }
1:f870a63:         }
1:f870a63:       }.doAll(1, keys).outputFrame(null, null).anyVec();
1:f870a63: 
1:f870a63:     return new H2ODrm(Arr, Vrr);
1:f870a63:   }
1:f870a63: }
============================================================================
author:Stevo Slavic
-------------------------------------------------------------------------------
commit:f5f54a1
/////////////////////////////////////////////////////////////////////////
1:               ncs[c].addNum(chks[c].atd(r));
/////////////////////////////////////////////////////////////////////////
1:             nc.addStr(chk.atStr(vstr, r));
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Filter operation
1:  */
1:   /**
1:    * Filter rows from intput DRM, to include only row indiced included in R.
1:    *
1:    * @param drmA Input DRM.
1:    * @param R Range object specifying the start and end row numbers to filter.
1:    * @return new DRM with just the filtered rows.
1:    */
1:     // Run a filtering MRTask on A. If row number falls within R.start() and
1:     // R.end(), then the row makes it into the output
1:           int chunkSize = chks[0].len();
1:           long chunkStart = chks[0].start();
1:           // First check if the entire chunk even overlaps with R
1:           if (chunkStart > R.end() || (chunkStart + chunkSize) < R.start()) {
1:           // This chunk overlaps, filter out just the overlapping rows
1:           for (int r = 0; r < chunkSize; r++) {
1:             if (!R.contains(chunkStart + r)) {
/////////////////////////////////////////////////////////////////////////
1:         // This is a String keyed DRM. Do the same thing as above,
1:         // but this time just one column of Strings.
1:           int chunkSize = chk.len();
1:           long chunkStart = chk.start();
1:           if (chunkStart > R.end() || (chunkStart + chunkSize) < R.start()) {
1:           for (int r = 0; r < chunkSize; r++) {
1:             if (!R.contains(chunkStart + r)) {
commit:03a5bb6
/////////////////////////////////////////////////////////////////////////
1:   public static H2ODrm exec(H2ODrm drmA, final Range R) {
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.ops;
1: 
1: import scala.collection.immutable.Range;
1: 
1: import water.MRTask;
1: import water.fvec.Frame;
1: import water.fvec.Vec;
1: import water.fvec.Chunk;
1: import water.fvec.NewChunk;
1: import water.parser.ValueString;
1: 
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
1: public class RowRange {
0:   /* Filter operation */
0:   public static H2ODrm RowRange(H2ODrm drmA, final Range R) {
1:     Frame A = drmA.frame;
1:     Vec keys = drmA.keys;
1: 
0:     /* Run a filtering MRTask on A. If row number falls within R.start() and
0:        R.end(), then the row makes it into the output
1:     */
1:     Frame Arr = new MRTask() {
1:         public void map(Chunk chks[], NewChunk ncs[]) {
0:           int chunk_size = chks[0].len();
0:           long chunk_start = chks[0].start();
1: 
0:           /* First check if the entire chunk even overlaps with R */
0:           if (chunk_start > R.end() || (chunk_start + chunk_size) < R.start()) {
1:             return;
1:           }
1: 
0:           /* This chunk overlaps, filter out just the overlapping rows */
0:           for (int r = 0; r < chunk_size; r++) {
0:             if (!R.contains(chunk_start + r)) {
1:               continue;
1:             }
1: 
1:             for (int c = 0; c < chks.length; c++) {
0:               ncs[c].addNum(chks[c].at0(r));
1:             }
1:           }
1:         }
1:       }.doAll(A.numCols(), A).outputFrame(null, null);
1: 
1:     Vec Vrr = (keys == null) ? null : new MRTask() {
0:         /* This is a String keyed DRM. Do the same thing as above,
0:            but this time just one column of Strings.
1:         */
1:         public void map(Chunk chk, NewChunk nc) {
0:           int chunk_size = chk.len();
0:           long chunk_start = chk.start();
1:           ValueString vstr = new ValueString();
1: 
0:           if (chunk_start > R.end() || (chunk_start + chunk_size) < R.start()) {
1:             return;
1:           }
1: 
0:           for (int r = 0; r < chunk_size; r++) {
0:             if (!R.contains(chunk_start + r)) {
1:               continue;
1:             }
1: 
0:             nc.addStr(chk.atStr0(vstr, r));
1:           }
1:         }
1:       }.doAll(1, keys).outputFrame(null, null).anyVec();
1: 
1:     return new H2ODrm(Arr, Vrr);
1:   }
1: }
============================================================================