1:81f7dfa: /**
1:81f7dfa:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:81f7dfa:  * contributor license agreements.  See the NOTICE file distributed with
1:81f7dfa:  * this work for additional information regarding copyright ownership.
1:81f7dfa:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:81f7dfa:  * (the "License"); you may not use this file except in compliance with
1:81f7dfa:  * the License.  You may obtain a copy of the License at
1:81f7dfa:  *
1:81f7dfa:  *     http://www.apache.org/licenses/LICENSE-2.0
1:81f7dfa:  *
1:81f7dfa:  * Unless required by applicable law or agreed to in writing, software
1:81f7dfa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:81f7dfa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:81f7dfa:  * See the License for the specific language governing permissions and
1:81f7dfa:  * limitations under the License.
1:81f7dfa:  */
1:81f7dfa: 
1:81f7dfa: package org.apache.mahout.cf.taste.impl.recommender.svd;
1:81f7dfa: 
1:81f7dfa: import java.util.Arrays;
1:81f7dfa: import java.util.List;
1:81f7dfa: 
1:c88c240: import com.carrotsearch.randomizedtesting.annotations.ThreadLeakLingering;
1:81f7dfa: import com.google.common.collect.Lists;
1:81f7dfa: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:81f7dfa: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:81f7dfa: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
1:81f7dfa: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:81f7dfa: import org.apache.mahout.cf.taste.impl.common.RunningAverage;
1:81f7dfa: import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
1:81f7dfa: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1:81f7dfa: import org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;
1:81f7dfa: import org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.PreferenceShuffler;
1:81f7dfa: import org.apache.mahout.cf.taste.model.DataModel;
1:81f7dfa: import org.apache.mahout.cf.taste.model.Preference;
1:81f7dfa: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:81f7dfa: import org.apache.mahout.common.RandomUtils;
1:81f7dfa: import org.apache.mahout.common.RandomWrapper;
1:81f7dfa: import org.apache.mahout.math.DenseMatrix;
1:81f7dfa: import org.apache.mahout.math.DenseVector;
1:81f7dfa: import org.apache.mahout.math.Matrix;
1:81f7dfa: import org.apache.mahout.math.Vector;
1:81f7dfa: import org.apache.mahout.math.function.DoubleFunction;
1:81f7dfa: import org.apache.mahout.math.function.VectorFunction;
1:81f7dfa: import org.junit.Test;
1:81f7dfa: import org.slf4j.Logger;
1:81f7dfa: import org.slf4j.LoggerFactory;
1:81f7dfa: 
1:81f7dfa: public class ParallelSGDFactorizerTest extends TasteTestCase {
1:81f7dfa: 
1:81f7dfa:   protected DataModel dataModel;
1:81f7dfa: 
1:81f7dfa:   protected int rank;
1:81f7dfa:   protected double lambda;
1:81f7dfa:   protected int numIterations;
1:81f7dfa: 
1:81f7dfa:   private RandomWrapper random = (RandomWrapper) RandomUtils.getRandom();
1:81f7dfa: 
1:81f7dfa:   protected Factorizer factorizer;
1:81f7dfa:   protected SVDRecommender svdRecommender;
1:81f7dfa: 
1:81f7dfa:   private static final Logger logger = LoggerFactory.getLogger(ParallelSGDFactorizerTest.class);
1:81f7dfa: 
1:81f7dfa:   private Matrix randomMatrix(int numRows, int numColumns, double range) {
1:81f7dfa:     double[][] data = new double[numRows][numColumns];
1:81f7dfa:     for (int i = 0; i < numRows; i++) {
1:81f7dfa:       for (int j = 0; j < numColumns; j++) {
1:81f7dfa:         double sqrtUniform = random.nextDouble();
1:81f7dfa:         data[i][j] = sqrtUniform * range;
1:81f7dfa:       }
1:81f7dfa:     }
1:81f7dfa:     return new DenseMatrix(data);
1:81f7dfa:   }
1:81f7dfa: 
1:81f7dfa:   private void normalize(Matrix source, final double range) {
1:81f7dfa:     final double max = source.aggregateColumns(new VectorFunction() {
1:81f7dfa:       @Override
1:81f7dfa:       public double apply(Vector column) {
1:81f7dfa:         return column.maxValue();
1:81f7dfa:       }
1:81f7dfa:     }).maxValue();
1:81f7dfa: 
1:81f7dfa:     final double min = source.aggregateColumns(new VectorFunction() {
1:81f7dfa:       @Override
1:81f7dfa:       public double apply(Vector column) {
1:81f7dfa:         return column.minValue();
1:81f7dfa:       }
1:81f7dfa:     }).minValue();
1:81f7dfa: 
1:81f7dfa:     source.assign(new DoubleFunction() {
1:81f7dfa:       @Override
1:81f7dfa:       public double apply(double value) {
1:81f7dfa:         return (value - min) * range / (max - min);
1:81f7dfa:       }
1:81f7dfa:     });
1:81f7dfa:   }
1:81f7dfa: 
1:81f7dfa:   public void setUpSyntheticData() throws Exception {
1:81f7dfa: 
1:81f7dfa:     int numUsers = 2000;
1:81f7dfa:     int numItems = 1000;
1:81f7dfa:     double sparsity = 0.5;
1:81f7dfa: 
1:81f7dfa:     this.rank = 20;
1:81f7dfa:     this.lambda = 0.000000001;
1:81f7dfa:     this.numIterations = 100;
1:81f7dfa: 
1:81f7dfa:     Matrix users = randomMatrix(numUsers, rank, 1);
1:81f7dfa:     Matrix items = randomMatrix(rank, numItems, 1);
1:81f7dfa:     Matrix ratings = users.times(items);
1:81f7dfa:     normalize(ratings, 5);
1:81f7dfa: 
1:02ff22f:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
1:81f7dfa:     for (int userIndex = 0; userIndex < numUsers; userIndex++) {
1:81f7dfa:       List<Preference> row= Lists.newArrayList();
1:81f7dfa:       for (int itemIndex = 0; itemIndex < numItems; itemIndex++) {
1:81f7dfa:         if (random.nextDouble() <= sparsity) {
1:81f7dfa:           row.add(new GenericPreference(userIndex, itemIndex, (float) ratings.get(userIndex, itemIndex)));
1:81f7dfa:         }
1:81f7dfa:       }
1:81f7dfa: 
1:81f7dfa:       userData.put(userIndex, new GenericUserPreferenceArray(row));
1:81f7dfa:     }
1:81f7dfa: 
1:81f7dfa:     dataModel = new GenericDataModel(userData);
1:81f7dfa:   }
1:81f7dfa: 
1:81f7dfa:   public void setUpToyData() throws Exception {
1:81f7dfa:     this.rank = 3;
1:81f7dfa:     this.lambda = 0.01;
1:81f7dfa:     this.numIterations = 1000;
1:81f7dfa: 
1:02ff22f:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
1:81f7dfa: 
1:81f7dfa:     userData.put(1L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1L, 1L, 5.0f),
1:81f7dfa:         new GenericPreference(1L, 2L, 5.0f),
1:81f7dfa:         new GenericPreference(1L, 3L, 2.0f))));
1:81f7dfa: 
1:81f7dfa:     userData.put(2L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2L, 1L, 2.0f),
1:81f7dfa:         new GenericPreference(2L, 3L, 3.0f),
1:81f7dfa:         new GenericPreference(2L, 4L, 5.0f))));
1:81f7dfa: 
1:81f7dfa:     userData.put(3L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(3L, 2L, 5.0f),
1:81f7dfa:         new GenericPreference(3L, 4L, 3.0f))));
1:81f7dfa: 
1:81f7dfa:     userData.put(4L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(4L, 1L, 3.0f),
1:81f7dfa:         new GenericPreference(4L, 4L, 5.0f))));
1:81f7dfa:     dataModel = new GenericDataModel(userData);
1:81f7dfa:   }
1:81f7dfa: 
1:81f7dfa:   @Test
1:81f7dfa:   public void testPreferenceShufflerWithSyntheticData() throws Exception {
1:81f7dfa:     setUpSyntheticData();
1:81f7dfa: 
1:81f7dfa:     ParallelSGDFactorizer.PreferenceShuffler shuffler = new PreferenceShuffler(dataModel);
1:81f7dfa:     shuffler.shuffle();
1:81f7dfa:     shuffler.stage();
1:81f7dfa: 
1:02ff22f:     FastByIDMap<FastByIDMap<Boolean>> checked = new FastByIDMap<>();
1:81f7dfa: 
1:81f7dfa:     for (int i = 0; i < shuffler.size(); i++) {
1:81f7dfa:       Preference pref=shuffler.get(i);
1:81f7dfa: 
1:81f7dfa:       float value = dataModel.getPreferenceValue(pref.getUserID(), pref.getItemID());
1:81f7dfa:       assertEquals(pref.getValue(), value, 0.0);
1:81f7dfa:       if (!checked.containsKey(pref.getUserID())) {
1:81f7dfa:         checked.put(pref.getUserID(), new FastByIDMap<Boolean>());
1:81f7dfa:       }
1:81f7dfa: 
1:81f7dfa:       assertNull(checked.get(pref.getUserID()).get(pref.getItemID()));
1:81f7dfa: 
1:81f7dfa:       checked.get(pref.getUserID()).put(pref.getItemID(), true);
1:81f7dfa:     }
1:81f7dfa: 
1:81f7dfa:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:81f7dfa:     int index=0;
1:81f7dfa:     while (userIDs.hasNext()) {
1:81f7dfa:       long userID = userIDs.nextLong();
1:81f7dfa:       PreferenceArray preferencesFromUser = dataModel.getPreferencesFromUser(userID);
1:81f7dfa:       for (Preference preference : preferencesFromUser) {
1:81f7dfa:         assertTrue(checked.get(preference.getUserID()).get(preference.getItemID()));
1:81f7dfa:         index++;
1:81f7dfa:       }
1:81f7dfa:     }
1:81f7dfa:     assertEquals(index, shuffler.size());
1:81f7dfa:   }
1:81f7dfa: 
1:c88c240:   @ThreadLeakLingering(linger = 1000)
1:81f7dfa:   @Test
1:81f7dfa:   public void testFactorizerWithToyData() throws Exception {
1:81f7dfa: 
1:81f7dfa:     setUpToyData();
1:81f7dfa: 
1:81f7dfa:     long start = System.currentTimeMillis();
1:81f7dfa: 
1:81f7dfa:     factorizer = new ParallelSGDFactorizer(dataModel, rank, lambda, numIterations, 0.01, 1, 0, 0);
1:81f7dfa: 
1:81f7dfa:     Factorization factorization = factorizer.factorize();
1:81f7dfa: 
1:81f7dfa:     long duration = System.currentTimeMillis() - start;
1:81f7dfa: 
1:81f7dfa:     /* a hold out test would be better, but this is just a toy example so we only check that the
1:81f7dfa:      * factorization is close to the original matrix */
1:81f7dfa:     RunningAverage avg = new FullRunningAverage();
1:81f7dfa:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:81f7dfa:     LongPrimitiveIterator itemIDs;
1:81f7dfa: 
1:81f7dfa:     while (userIDs.hasNext()) {
1:81f7dfa:       long userID = userIDs.nextLong();
1:81f7dfa:       for (Preference pref : dataModel.getPreferencesFromUser(userID)) {
1:81f7dfa:         double rating = pref.getValue();
1:81f7dfa:         Vector userVector = new DenseVector(factorization.getUserFeatures(userID));
1:81f7dfa:         Vector itemVector = new DenseVector(factorization.getItemFeatures(pref.getItemID()));
1:81f7dfa:         double estimate = userVector.dot(itemVector);
1:81f7dfa:         double err = rating - estimate;
1:81f7dfa: 
1:81f7dfa:         avg.addDatum(err * err);
1:81f7dfa:       }
1:81f7dfa:     }
1:81f7dfa: 
1:81f7dfa:     double sum = 0.0;
1:81f7dfa: 
1:81f7dfa:     userIDs = dataModel.getUserIDs();
1:81f7dfa:     while (userIDs.hasNext()) {
1:81f7dfa:       long userID = userIDs.nextLong();
1:81f7dfa:       Vector userVector = new DenseVector(factorization.getUserFeatures(userID));
1:81f7dfa:       double regularization = userVector.dot(userVector);
1:81f7dfa:       sum += regularization;
1:81f7dfa:     }
1:81f7dfa: 
1:81f7dfa:     itemIDs = dataModel.getItemIDs();
1:81f7dfa:     while (itemIDs.hasNext()) {
1:81f7dfa:       long itemID = itemIDs.nextLong();
1:81f7dfa:       Vector itemVector = new DenseVector(factorization.getUserFeatures(itemID));
1:81f7dfa:       double regularization = itemVector.dot(itemVector);
1:81f7dfa:       sum += regularization;
1:81f7dfa:     }
1:81f7dfa: 
1:81f7dfa:     double rmse = Math.sqrt(avg.getAverage());
1:81f7dfa:     double loss = avg.getAverage() / 2 + lambda / 2 * sum;
1:81f7dfa:     logger.info("RMSE: " + rmse + ";\tLoss: " + loss + ";\tTime Used: " + duration);
1:81f7dfa:     assertTrue(rmse < 0.2);
1:81f7dfa:   }
1:81f7dfa: 
1:c88c240:   @ThreadLeakLingering(linger = 1000)
1:81f7dfa:   @Test
1:81f7dfa:   public void testRecommenderWithToyData() throws Exception {
1:81f7dfa: 
1:81f7dfa:     setUpToyData();
1:81f7dfa: 
1:81f7dfa:     factorizer = new ParallelSGDFactorizer(dataModel, rank, lambda, numIterations, 0.01, 1, 0,0);
1:81f7dfa:     svdRecommender = new SVDRecommender(dataModel, factorizer);
1:81f7dfa: 
1:81f7dfa:     /* a hold out test would be better, but this is just a toy example so we only check that the
1:81f7dfa:      * factorization is close to the original matrix */
1:81f7dfa:     RunningAverage avg = new FullRunningAverage();
1:81f7dfa:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:81f7dfa:     while (userIDs.hasNext()) {
1:81f7dfa:       long userID = userIDs.nextLong();
1:81f7dfa:       for (Preference pref : dataModel.getPreferencesFromUser(userID)) {
1:81f7dfa:         double rating = pref.getValue();
1:81f7dfa:         double estimate = svdRecommender.estimatePreference(userID, pref.getItemID());
1:81f7dfa:         double err = rating - estimate;
1:81f7dfa:         avg.addDatum(err * err);
1:81f7dfa:       }
1:81f7dfa:     }
1:81f7dfa: 
1:81f7dfa:     double rmse = Math.sqrt(avg.getAverage());
1:81f7dfa:     logger.info("rmse: " + rmse);
1:81f7dfa:     assertTrue(rmse < 0.2);
1:81f7dfa:   }
1:81f7dfa: 
1:81f7dfa:   @Test
1:81f7dfa:   public void testFactorizerWithWithSyntheticData() throws Exception {
1:81f7dfa: 
1:81f7dfa:     setUpSyntheticData();
1:81f7dfa: 
1:81f7dfa:     long start = System.currentTimeMillis();
1:81f7dfa: 
1:81f7dfa:     factorizer = new ParallelSGDFactorizer(dataModel, rank, lambda, numIterations, 0.01, 1, 0, 0);
1:81f7dfa: 
1:81f7dfa:     Factorization factorization = factorizer.factorize();
1:81f7dfa: 
1:81f7dfa:     long duration = System.currentTimeMillis() - start;
1:81f7dfa: 
1:81f7dfa:     /* a hold out test would be better, but this is just a toy example so we only check that the
1:81f7dfa:      * factorization is close to the original matrix */
1:81f7dfa:     RunningAverage avg = new FullRunningAverage();
1:81f7dfa:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:81f7dfa:     LongPrimitiveIterator itemIDs;
1:81f7dfa: 
1:81f7dfa:     while (userIDs.hasNext()) {
1:81f7dfa:       long userID = userIDs.nextLong();
1:81f7dfa:       for (Preference pref : dataModel.getPreferencesFromUser(userID)) {
1:81f7dfa:         double rating = pref.getValue();
1:81f7dfa:         Vector userVector = new DenseVector(factorization.getUserFeatures(userID));
1:81f7dfa:         Vector itemVector = new DenseVector(factorization.getItemFeatures(pref.getItemID()));
1:81f7dfa:         double estimate = userVector.dot(itemVector);
1:81f7dfa:         double err = rating - estimate;
1:81f7dfa: 
1:81f7dfa:         avg.addDatum(err * err);
1:81f7dfa:       }
1:81f7dfa:     }
1:81f7dfa: 
1:81f7dfa:     double sum = 0.0;
1:81f7dfa: 
1:81f7dfa:     userIDs = dataModel.getUserIDs();
1:81f7dfa:     while (userIDs.hasNext()) {
1:81f7dfa:       long userID = userIDs.nextLong();
1:81f7dfa:       Vector userVector = new DenseVector(factorization.getUserFeatures(userID));
1:81f7dfa:       double regularization=userVector.dot(userVector);
1:81f7dfa:       sum += regularization;
1:81f7dfa:     }
1:81f7dfa: 
1:81f7dfa:     itemIDs = dataModel.getItemIDs();
1:81f7dfa:     while (itemIDs.hasNext()) {
1:81f7dfa:       long itemID = itemIDs.nextLong();
1:81f7dfa:       Vector itemVector = new DenseVector(factorization.getUserFeatures(itemID));
1:81f7dfa:       double regularization = itemVector.dot(itemVector);
1:81f7dfa:       sum += regularization;
1:81f7dfa:     }
1:81f7dfa: 
1:81f7dfa:     double rmse = Math.sqrt(avg.getAverage());
1:81f7dfa:     double loss = avg.getAverage() / 2 + lambda / 2 * sum;
1:81f7dfa:     logger.info("RMSE: " + rmse + ";\tLoss: " + loss + ";\tTime Used: " + duration + "ms");
1:81f7dfa:     assertTrue(rmse < 0.2);
1:81f7dfa:   }
1:81f7dfa: 
1:81f7dfa:   @Test
1:81f7dfa:   public void testRecommenderWithSyntheticData() throws Exception {
1:81f7dfa: 
1:81f7dfa:     setUpSyntheticData();
1:81f7dfa: 
1:81f7dfa:     factorizer= new ParallelSGDFactorizer(dataModel, rank, lambda, numIterations, 0.01, 1, 0, 0);
1:81f7dfa:     svdRecommender = new SVDRecommender(dataModel, factorizer);
1:81f7dfa: 
1:81f7dfa:     /* a hold out test would be better, but this is just a toy example so we only check that the
1:81f7dfa:      * factorization is close to the original matrix */
1:81f7dfa:     RunningAverage avg = new FullRunningAverage();
1:81f7dfa:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:81f7dfa:     while (userIDs.hasNext()) {
1:81f7dfa:       long userID = userIDs.nextLong();
1:81f7dfa:       for (Preference pref : dataModel.getPreferencesFromUser(userID)) {
1:81f7dfa:         double rating = pref.getValue();
1:81f7dfa:         double estimate = svdRecommender.estimatePreference(userID, pref.getItemID());
1:81f7dfa:         double err = rating - estimate;
1:81f7dfa:         avg.addDatum(err * err);
1:81f7dfa:       }
1:81f7dfa:     }
1:81f7dfa: 
1:81f7dfa:     double rmse = Math.sqrt(avg.getAverage());
1:81f7dfa:     logger.info("rmse: " + rmse);
1:81f7dfa:     assertTrue(rmse < 0.2);
1:81f7dfa:   }
1:81f7dfa: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<FastByIDMap<Boolean>> checked = new FastByIDMap<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:c88c240
/////////////////////////////////////////////////////////////////////////
1: import com.carrotsearch.randomizedtesting.annotations.ThreadLeakLingering;
/////////////////////////////////////////////////////////////////////////
1:   @ThreadLeakLingering(linger = 1000)
/////////////////////////////////////////////////////////////////////////
1:   @ThreadLeakLingering(linger = 1000)
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:81f7dfa
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender.svd;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import com.google.common.collect.Lists;
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.impl.common.RunningAverage;
1: import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
1: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1: import org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;
1: import org.apache.mahout.cf.taste.impl.recommender.svd.ParallelSGDFactorizer.PreferenceShuffler;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.Preference;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.common.RandomWrapper;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.DoubleFunction;
1: import org.apache.mahout.math.function.VectorFunction;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ParallelSGDFactorizerTest extends TasteTestCase {
1: 
1:   protected DataModel dataModel;
1: 
1:   protected int rank;
1:   protected double lambda;
1:   protected int numIterations;
1: 
1:   private RandomWrapper random = (RandomWrapper) RandomUtils.getRandom();
1: 
1:   protected Factorizer factorizer;
1:   protected SVDRecommender svdRecommender;
1: 
1:   private static final Logger logger = LoggerFactory.getLogger(ParallelSGDFactorizerTest.class);
1: 
1:   private Matrix randomMatrix(int numRows, int numColumns, double range) {
1:     double[][] data = new double[numRows][numColumns];
1:     for (int i = 0; i < numRows; i++) {
1:       for (int j = 0; j < numColumns; j++) {
1:         double sqrtUniform = random.nextDouble();
1:         data[i][j] = sqrtUniform * range;
1:       }
1:     }
1:     return new DenseMatrix(data);
1:   }
1: 
1:   private void normalize(Matrix source, final double range) {
1:     final double max = source.aggregateColumns(new VectorFunction() {
1:       @Override
1:       public double apply(Vector column) {
1:         return column.maxValue();
1:       }
1:     }).maxValue();
1: 
1:     final double min = source.aggregateColumns(new VectorFunction() {
1:       @Override
1:       public double apply(Vector column) {
1:         return column.minValue();
1:       }
1:     }).minValue();
1: 
1:     source.assign(new DoubleFunction() {
1:       @Override
1:       public double apply(double value) {
1:         return (value - min) * range / (max - min);
1:       }
1:     });
1:   }
1: 
1:   public void setUpSyntheticData() throws Exception {
1: 
1:     int numUsers = 2000;
1:     int numItems = 1000;
1:     double sparsity = 0.5;
1: 
1:     this.rank = 20;
1:     this.lambda = 0.000000001;
1:     this.numIterations = 100;
1: 
1:     Matrix users = randomMatrix(numUsers, rank, 1);
1:     Matrix items = randomMatrix(rank, numItems, 1);
1:     Matrix ratings = users.times(items);
1:     normalize(ratings, 5);
1: 
0:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<PreferenceArray>();
1:     for (int userIndex = 0; userIndex < numUsers; userIndex++) {
1:       List<Preference> row= Lists.newArrayList();
1:       for (int itemIndex = 0; itemIndex < numItems; itemIndex++) {
1:         if (random.nextDouble() <= sparsity) {
1:           row.add(new GenericPreference(userIndex, itemIndex, (float) ratings.get(userIndex, itemIndex)));
1:         }
1:       }
1: 
1:       userData.put(userIndex, new GenericUserPreferenceArray(row));
1:     }
1: 
1:     dataModel = new GenericDataModel(userData);
1:   }
1: 
1:   public void setUpToyData() throws Exception {
1:     this.rank = 3;
1:     this.lambda = 0.01;
1:     this.numIterations = 1000;
1: 
0:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<PreferenceArray>();
1: 
1:     userData.put(1L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1L, 1L, 5.0f),
1:         new GenericPreference(1L, 2L, 5.0f),
1:         new GenericPreference(1L, 3L, 2.0f))));
1: 
1:     userData.put(2L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2L, 1L, 2.0f),
1:         new GenericPreference(2L, 3L, 3.0f),
1:         new GenericPreference(2L, 4L, 5.0f))));
1: 
1:     userData.put(3L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(3L, 2L, 5.0f),
1:         new GenericPreference(3L, 4L, 3.0f))));
1: 
1:     userData.put(4L, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(4L, 1L, 3.0f),
1:         new GenericPreference(4L, 4L, 5.0f))));
1:     dataModel = new GenericDataModel(userData);
1:   }
1: 
1:   @Test
1:   public void testPreferenceShufflerWithSyntheticData() throws Exception {
1:     setUpSyntheticData();
1: 
1:     ParallelSGDFactorizer.PreferenceShuffler shuffler = new PreferenceShuffler(dataModel);
1:     shuffler.shuffle();
1:     shuffler.stage();
1: 
0:     FastByIDMap<FastByIDMap<Boolean>> checked = new FastByIDMap<FastByIDMap<Boolean>>();
1: 
1:     for (int i = 0; i < shuffler.size(); i++) {
1:       Preference pref=shuffler.get(i);
1: 
1:       float value = dataModel.getPreferenceValue(pref.getUserID(), pref.getItemID());
1:       assertEquals(pref.getValue(), value, 0.0);
1:       if (!checked.containsKey(pref.getUserID())) {
1:         checked.put(pref.getUserID(), new FastByIDMap<Boolean>());
1:       }
1: 
1:       assertNull(checked.get(pref.getUserID()).get(pref.getItemID()));
1: 
1:       checked.get(pref.getUserID()).put(pref.getItemID(), true);
1:     }
1: 
1:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:     int index=0;
1:     while (userIDs.hasNext()) {
1:       long userID = userIDs.nextLong();
1:       PreferenceArray preferencesFromUser = dataModel.getPreferencesFromUser(userID);
1:       for (Preference preference : preferencesFromUser) {
1:         assertTrue(checked.get(preference.getUserID()).get(preference.getItemID()));
1:         index++;
1:       }
1:     }
1:     assertEquals(index, shuffler.size());
1:   }
1: 
1:   @Test
1:   public void testFactorizerWithToyData() throws Exception {
1: 
1:     setUpToyData();
1: 
1:     long start = System.currentTimeMillis();
1: 
1:     factorizer = new ParallelSGDFactorizer(dataModel, rank, lambda, numIterations, 0.01, 1, 0, 0);
1: 
1:     Factorization factorization = factorizer.factorize();
1: 
1:     long duration = System.currentTimeMillis() - start;
1: 
1:     /* a hold out test would be better, but this is just a toy example so we only check that the
1:      * factorization is close to the original matrix */
1:     RunningAverage avg = new FullRunningAverage();
1:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:     LongPrimitiveIterator itemIDs;
1: 
1:     while (userIDs.hasNext()) {
1:       long userID = userIDs.nextLong();
1:       for (Preference pref : dataModel.getPreferencesFromUser(userID)) {
1:         double rating = pref.getValue();
1:         Vector userVector = new DenseVector(factorization.getUserFeatures(userID));
1:         Vector itemVector = new DenseVector(factorization.getItemFeatures(pref.getItemID()));
1:         double estimate = userVector.dot(itemVector);
1:         double err = rating - estimate;
1: 
1:         avg.addDatum(err * err);
1:       }
1:     }
1: 
1:     double sum = 0.0;
1: 
1:     userIDs = dataModel.getUserIDs();
1:     while (userIDs.hasNext()) {
1:       long userID = userIDs.nextLong();
1:       Vector userVector = new DenseVector(factorization.getUserFeatures(userID));
1:       double regularization = userVector.dot(userVector);
1:       sum += regularization;
1:     }
1: 
1:     itemIDs = dataModel.getItemIDs();
1:     while (itemIDs.hasNext()) {
1:       long itemID = itemIDs.nextLong();
1:       Vector itemVector = new DenseVector(factorization.getUserFeatures(itemID));
1:       double regularization = itemVector.dot(itemVector);
1:       sum += regularization;
1:     }
1: 
1:     double rmse = Math.sqrt(avg.getAverage());
1:     double loss = avg.getAverage() / 2 + lambda / 2 * sum;
1:     logger.info("RMSE: " + rmse + ";\tLoss: " + loss + ";\tTime Used: " + duration);
1:     assertTrue(rmse < 0.2);
1:   }
1: 
1:   @Test
1:   public void testRecommenderWithToyData() throws Exception {
1: 
1:     setUpToyData();
1: 
1:     factorizer = new ParallelSGDFactorizer(dataModel, rank, lambda, numIterations, 0.01, 1, 0,0);
1:     svdRecommender = new SVDRecommender(dataModel, factorizer);
1: 
1:     /* a hold out test would be better, but this is just a toy example so we only check that the
1:      * factorization is close to the original matrix */
1:     RunningAverage avg = new FullRunningAverage();
1:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:     while (userIDs.hasNext()) {
1:       long userID = userIDs.nextLong();
1:       for (Preference pref : dataModel.getPreferencesFromUser(userID)) {
1:         double rating = pref.getValue();
1:         double estimate = svdRecommender.estimatePreference(userID, pref.getItemID());
1:         double err = rating - estimate;
1:         avg.addDatum(err * err);
1:       }
1:     }
1: 
1:     double rmse = Math.sqrt(avg.getAverage());
1:     logger.info("rmse: " + rmse);
1:     assertTrue(rmse < 0.2);
1:   }
1: 
1:   @Test
1:   public void testFactorizerWithWithSyntheticData() throws Exception {
1: 
1:     setUpSyntheticData();
1: 
1:     long start = System.currentTimeMillis();
1: 
1:     factorizer = new ParallelSGDFactorizer(dataModel, rank, lambda, numIterations, 0.01, 1, 0, 0);
1: 
1:     Factorization factorization = factorizer.factorize();
1: 
1:     long duration = System.currentTimeMillis() - start;
1: 
1:     /* a hold out test would be better, but this is just a toy example so we only check that the
1:      * factorization is close to the original matrix */
1:     RunningAverage avg = new FullRunningAverage();
1:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:     LongPrimitiveIterator itemIDs;
1: 
1:     while (userIDs.hasNext()) {
1:       long userID = userIDs.nextLong();
1:       for (Preference pref : dataModel.getPreferencesFromUser(userID)) {
1:         double rating = pref.getValue();
1:         Vector userVector = new DenseVector(factorization.getUserFeatures(userID));
1:         Vector itemVector = new DenseVector(factorization.getItemFeatures(pref.getItemID()));
1:         double estimate = userVector.dot(itemVector);
1:         double err = rating - estimate;
1: 
1:         avg.addDatum(err * err);
1:       }
1:     }
1: 
1:     double sum = 0.0;
1: 
1:     userIDs = dataModel.getUserIDs();
1:     while (userIDs.hasNext()) {
1:       long userID = userIDs.nextLong();
1:       Vector userVector = new DenseVector(factorization.getUserFeatures(userID));
1:       double regularization=userVector.dot(userVector);
1:       sum += regularization;
1:     }
1: 
1:     itemIDs = dataModel.getItemIDs();
1:     while (itemIDs.hasNext()) {
1:       long itemID = itemIDs.nextLong();
1:       Vector itemVector = new DenseVector(factorization.getUserFeatures(itemID));
1:       double regularization = itemVector.dot(itemVector);
1:       sum += regularization;
1:     }
1: 
1:     double rmse = Math.sqrt(avg.getAverage());
1:     double loss = avg.getAverage() / 2 + lambda / 2 * sum;
1:     logger.info("RMSE: " + rmse + ";\tLoss: " + loss + ";\tTime Used: " + duration + "ms");
1:     assertTrue(rmse < 0.2);
1:   }
1: 
1:   @Test
1:   public void testRecommenderWithSyntheticData() throws Exception {
1: 
1:     setUpSyntheticData();
1: 
1:     factorizer= new ParallelSGDFactorizer(dataModel, rank, lambda, numIterations, 0.01, 1, 0, 0);
1:     svdRecommender = new SVDRecommender(dataModel, factorizer);
1: 
1:     /* a hold out test would be better, but this is just a toy example so we only check that the
1:      * factorization is close to the original matrix */
1:     RunningAverage avg = new FullRunningAverage();
1:     LongPrimitiveIterator userIDs = dataModel.getUserIDs();
1:     while (userIDs.hasNext()) {
1:       long userID = userIDs.nextLong();
1:       for (Preference pref : dataModel.getPreferencesFromUser(userID)) {
1:         double rating = pref.getValue();
1:         double estimate = svdRecommender.estimatePreference(userID, pref.getItemID());
1:         double err = rating - estimate;
1:         avg.addDatum(err * err);
1:       }
1:     }
1: 
1:     double rmse = Math.sqrt(avg.getAverage());
1:     logger.info("rmse: " + rmse);
1:     assertTrue(rmse < 0.2);
1:   }
1: }
============================================================================