1:37f28bd: /*
1:37f28bd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:37f28bd:  * contributor license agreements.  See the NOTICE file distributed with
1:37f28bd:  * this work for additional information regarding copyright ownership.
1:37f28bd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:37f28bd:  * (the "License"); you may not use this file except in compliance with
1:37f28bd:  * the License.  You may obtain a copy of the License at
1:37f28bd:  *
1:37f28bd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:37f28bd:  *
1:37f28bd:  * Unless required by applicable law or agreed to in writing, software
1:37f28bd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:37f28bd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:37f28bd:  * See the License for the specific language governing permissions and
1:37f28bd:  * limitations under the License.
1:37f28bd:  */
1:37f28bd: 
1:37f28bd: package org.apache.mahout.clustering.streaming.tools;
1:37f28bd: 
1:37f28bd: import com.google.common.collect.Iterables;
1:37f28bd: import com.google.common.io.Closeables;
1:37f28bd: import org.apache.hadoop.conf.Configuration;
1:37f28bd: import org.apache.hadoop.fs.FileStatus;
1:37f28bd: import org.apache.hadoop.fs.FileSystem;
1:37f28bd: import org.apache.hadoop.fs.LocalFileSystem;
1:37f28bd: import org.apache.hadoop.fs.Path;
1:37f28bd: import org.apache.hadoop.io.IntWritable;
1:37f28bd: import org.apache.hadoop.io.SequenceFile;
1:37f28bd: import org.apache.mahout.common.HadoopUtil;
1:37f28bd: import org.apache.mahout.common.MahoutTestCase;
1:37f28bd: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1:37f28bd: import org.apache.mahout.common.iterator.sequencefile.PathType;
1:37f28bd: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
1:37f28bd: import org.junit.Test;
1:37f28bd: 
1:37f28bd: public class ResplitSequenceFilesTest extends MahoutTestCase {
1:37f28bd: 
1:37f28bd:   @Test
1:37f28bd:   public void testSplitting() throws Exception {
1:37f28bd: 
1:37f28bd:     Path inputFile = new Path(getTestTempDirPath("input"), "test.seq");
1:37f28bd:     Path output = getTestTempDirPath("output");
1:37f28bd:     Configuration conf = new Configuration();
1:37f28bd:     LocalFileSystem fs = FileSystem.getLocal(conf);
1:37f28bd: 
1:37f28bd:     SequenceFile.Writer writer = null;
1:37f28bd:     try {
1:37f28bd:       writer = SequenceFile.createWriter(fs, conf, inputFile, IntWritable.class, IntWritable.class);
1:37f28bd:       writer.append(new IntWritable(1), new IntWritable(1));
1:37f28bd:       writer.append(new IntWritable(2), new IntWritable(2));
1:37f28bd:       writer.append(new IntWritable(3), new IntWritable(3));
1:37f28bd:       writer.append(new IntWritable(4), new IntWritable(4));
1:37f28bd:       writer.append(new IntWritable(5), new IntWritable(5));
1:37f28bd:       writer.append(new IntWritable(6), new IntWritable(6));
1:37f28bd:       writer.append(new IntWritable(7), new IntWritable(7));
1:37f28bd:       writer.append(new IntWritable(8), new IntWritable(8));
1:37f28bd:     } finally {
1:37f28bd:       Closeables.close(writer, false);
1:37f28bd:     }
1:37f28bd: 
1:37f28bd:     String splitPattern = "split";
1:37f28bd:     int numSplits = 4;
1:37f28bd: 
1:37f28bd:     ResplitSequenceFiles.main(new String[] { "--input", inputFile.toString(),
1:37f28bd:         "--output", output.toString() + "/" + splitPattern, "--numSplits", String.valueOf(numSplits) });
1:37f28bd: 
1:37f28bd:     FileStatus[] statuses = HadoopUtil.getFileStatus(output, PathType.LIST, PathFilters.logsCRCFilter(), null, conf);
1:37f28bd: 
1:37f28bd:     for (FileStatus status : statuses) {
1:37f28bd:       String name = status.getPath().getName();
1:37f28bd:       assertTrue(name.startsWith(splitPattern));
1:37f28bd:       assertEquals(2, numEntries(status, conf));
1:37f28bd:     }
1:37f28bd:     assertEquals(numSplits, statuses.length);
1:37f28bd:   }
1:37f28bd: 
1:37f28bd:   private int numEntries(FileStatus status, Configuration conf) {
1:37f28bd:     return Iterables.size(new SequenceFileIterable(status.getPath(), conf));
1:37f28bd:   }
1:37f28bd: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:37f28bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.clustering.streaming.tools;
1: 
1: import com.google.common.collect.Iterables;
1: import com.google.common.io.Closeables;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileStatus;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.LocalFileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.mahout.common.HadoopUtil;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1: import org.apache.mahout.common.iterator.sequencefile.PathType;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
1: import org.junit.Test;
1: 
1: public class ResplitSequenceFilesTest extends MahoutTestCase {
1: 
1:   @Test
1:   public void testSplitting() throws Exception {
1: 
1:     Path inputFile = new Path(getTestTempDirPath("input"), "test.seq");
1:     Path output = getTestTempDirPath("output");
1:     Configuration conf = new Configuration();
1:     LocalFileSystem fs = FileSystem.getLocal(conf);
1: 
1:     SequenceFile.Writer writer = null;
1:     try {
1:       writer = SequenceFile.createWriter(fs, conf, inputFile, IntWritable.class, IntWritable.class);
1:       writer.append(new IntWritable(1), new IntWritable(1));
1:       writer.append(new IntWritable(2), new IntWritable(2));
1:       writer.append(new IntWritable(3), new IntWritable(3));
1:       writer.append(new IntWritable(4), new IntWritable(4));
1:       writer.append(new IntWritable(5), new IntWritable(5));
1:       writer.append(new IntWritable(6), new IntWritable(6));
1:       writer.append(new IntWritable(7), new IntWritable(7));
1:       writer.append(new IntWritable(8), new IntWritable(8));
1:     } finally {
1:       Closeables.close(writer, false);
1:     }
1: 
1:     String splitPattern = "split";
1:     int numSplits = 4;
1: 
1:     ResplitSequenceFiles.main(new String[] { "--input", inputFile.toString(),
1:         "--output", output.toString() + "/" + splitPattern, "--numSplits", String.valueOf(numSplits) });
1: 
1:     FileStatus[] statuses = HadoopUtil.getFileStatus(output, PathType.LIST, PathFilters.logsCRCFilter(), null, conf);
1: 
1:     for (FileStatus status : statuses) {
1:       String name = status.getPath().getName();
1:       assertTrue(name.startsWith(splitPattern));
1:       assertEquals(2, numEntries(status, conf));
1:     }
1:     assertEquals(numSplits, statuses.length);
1:   }
1: 
1:   private int numEntries(FileStatus status, Configuration conf) {
1:     return Iterables.size(new SequenceFileIterable(status.getPath(), conf));
1:   }
1: }
============================================================================