1:a8f9f88: /**
1:a8f9f88:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a8f9f88:  * contributor license agreements.  See the NOTICE file distributed with
1:a8f9f88:  * this work for additional information regarding copyright ownership.
1:a8f9f88:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a8f9f88:  * (the "License"); you may not use this file except in compliance with
1:a8f9f88:  * the License.  You may obtain a copy of the License at
3:a8f9f88:  *
1:a8f9f88:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a8f9f88:  *
1:a8f9f88:  * Unless required by applicable law or agreed to in writing, software
1:a8f9f88:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8f9f88:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8f9f88:  * See the License for the specific language governing permissions and
1:a8f9f88:  * limitations under the License.
1:a8f9f88:  */
6:a8f9f88: 
1:52ce412: package org.apache.mahout.classifier.df.mapreduce.inmem;
1:df73dbc: 
1:a8f9f88: import java.io.ByteArrayInputStream;
1:a8f9f88: import java.io.ByteArrayOutputStream;
1:a8f9f88: import java.io.DataInput;
1:a8f9f88: import java.io.DataInputStream;
1:a8f9f88: import java.io.DataOutput;
1:a8f9f88: import java.io.DataOutputStream;
1:a8f9f88: import java.io.IOException;
1:a8f9f88: import java.util.Random;
1:a8f9f88: 
1:434cdff: import org.apache.mahout.common.MahoutTestCase;
1:8547de7: import org.apache.mahout.common.RandomUtils;
1:52ce412: import org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat.InMemInputSplit;
1:ff79ff4: import org.junit.Before;
1:ff79ff4: import org.junit.Test;
1:1ffa3a4: @Deprecated
1:ff79ff4: public final class InMemInputSplitTest extends MahoutTestCase {
1:a8f9f88: 
1:d911fce:   private Random rng;
1:d911fce:   private ByteArrayOutputStream byteOutStream;
1:d911fce:   private DataOutput out;
1:a8f9f88:   
1:a8f9f88:   @Override
1:ff79ff4:   @Before
1:ff79ff4:   public void setUp() throws Exception {
1:434cdff:     super.setUp();
1:8547de7:     rng = RandomUtils.getRandom();
1:a8f9f88:     byteOutStream = new ByteArrayOutputStream();
1:a8f9f88:     out = new DataOutputStream(byteOutStream);
1:a8f9f88:   }
1:a8f9f88: 
1:a8f9f88:   /**
1:ff79ff4:    * Make sure that all the fields are processed correctly
1:a8f9f88:    */
1:ff79ff4:   @Test
1:ff79ff4:   public void testWritable() throws Exception {
1:a8f9f88:     InMemInputSplit split = new InMemInputSplit(rng.nextInt(), rng.nextInt(1000), rng.nextLong());
1:a8f9f88:     
1:a8f9f88:     split.write(out);
1:a8f9f88:     assertEquals(split, readSplit());
1:a8f9f88:   }
1:a8f9f88: 
1:a8f9f88:   /**
1:a8f9f88:    * test the case seed == null
1:a8f9f88:    */
1:ff79ff4:   @Test
1:ff79ff4:   public void testNullSeed() throws Exception {
1:a8f9f88:     InMemInputSplit split = new InMemInputSplit(rng.nextInt(), rng.nextInt(1000), null);
1:a8f9f88:     
1:a8f9f88:     split.write(out);
1:a8f9f88:     assertEquals(split, readSplit());
1:a8f9f88:   }
1:a8f9f88:   
1:ff79ff4:   private InMemInputSplit readSplit() throws IOException {
1:a8f9f88:     ByteArrayInputStream byteInStream = new ByteArrayInputStream(byteOutStream.toByteArray());
1:a8f9f88:     DataInput in = new DataInputStream(byteInStream);
1:a8f9f88:     return InMemInputSplit.read(in);
1:a8f9f88:   }
1:a8f9f88: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.mapreduce.inmem;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat.InMemInputSplit;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.junit.Test;
1: public final class InMemInputSplitTest extends MahoutTestCase {
1:   @Before
1:   public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:    * Make sure that all the fields are processed correctly
1:   @Test
1:   public void testWritable() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testNullSeed() throws Exception {
1:   private InMemInputSplit readSplit() throws IOException {
commit:d911fce
/////////////////////////////////////////////////////////////////////////
1:   private Random rng;
1:   private ByteArrayOutputStream byteOutStream;
1:   private DataOutput out;
commit:434cdff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
0: public class InMemInputSplitTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:     super.setUp();
commit:8547de7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1:     rng = RandomUtils.getRandom();
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:df73dbc
/////////////////////////////////////////////////////////////////////////
0:     RandomUtils.useTestSeed();
1: 
commit:a8f9f88
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.mapreduce.inmem;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInput;
1: import java.io.DataInputStream;
1: import java.io.DataOutput;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.util.Random;
1: 
0: import org.apache.mahout.df.mapreduce.inmem.InMemInputFormat.InMemInputSplit;
1: 
0: import junit.framework.TestCase;
1: 
0: public class InMemInputSplitTest extends TestCase {
1: 
0:   protected Random rng;
1: 
0:   protected ByteArrayOutputStream byteOutStream;
0:   protected DataOutput out;
1:   
1:   @Override
0:   protected void setUp() throws Exception {
0:     rng = new Random();
1: 
1:     byteOutStream = new ByteArrayOutputStream();
1:     out = new DataOutputStream(byteOutStream);
1:   }
1: 
1:   /**
0:    * Make sure that all the fields are processed correctly 
0:    * @throws IOException 
1:    *
1:    */
0:   public void testWritable() throws IOException {
1:     InMemInputSplit split = new InMemInputSplit(rng.nextInt(), rng.nextInt(1000), rng.nextLong());
1:     
1:     split.write(out);
1:     assertEquals(split, readSplit());
1:   }
1: 
1:   /**
1:    * test the case seed == null
0:    * @throws IOException 
1:    *
1:    */
0:   public void testNullSeed() throws IOException {
1:     InMemInputSplit split = new InMemInputSplit(rng.nextInt(), rng.nextInt(1000), null);
1:     
1:     split.write(out);
1:     assertEquals(split, readSplit());
1:   }
1:   
0:   protected InMemInputSplit readSplit() throws IOException {
1:     ByteArrayInputStream byteInStream = new ByteArrayInputStream(byteOutStream.toByteArray());
1:     DataInput in = new DataInputStream(byteInStream);
1:     return InMemInputSplit.read(in);
1:   }
1: }
============================================================================