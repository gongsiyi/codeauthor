1:4fbfbc6: /*
1:4fbfbc6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4fbfbc6:  * contributor license agreements.  See the NOTICE file distributed with
1:4fbfbc6:  * this work for additional information regarding copyright ownership.
1:4fbfbc6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4fbfbc6:  * (the "License"); you may not use this file except in compliance with
1:4fbfbc6:  * the License.  You may obtain a copy of the License at
1:2e4d306:  *
1:4fbfbc6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e4d306:  *
1:4fbfbc6:  * Unless required by applicable law or agreed to in writing, software
1:4fbfbc6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4fbfbc6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4fbfbc6:  * See the License for the specific language governing permissions and
1:4fbfbc6:  * limitations under the License.
1:4fbfbc6:  */
1:2e4d306: 
1:2e4d306: package org.apache.mahout.utils.regex;
1:2e4d306: 
1:85f9ece: import java.io.IOException;
1:85f9ece: import java.io.StringReader;
1:85f9ece: 
1:2e4d306: import org.apache.lucene.analysis.Analyzer;
1:2e4d306: import org.apache.lucene.analysis.TokenStream;
1:2e4d306: import org.apache.lucene.analysis.standard.StandardAnalyzer;
1:2e4d306: import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
1:2e4d306: import org.apache.mahout.common.lucene.TokenStreamIterator;
1:58cc1ae: import org.slf4j.Logger;
1:58cc1ae: import org.slf4j.LoggerFactory;
1:2e4d306: 
1:2e4d306: public class AnalyzerTransformer implements RegexTransformer {
1:2e4d306: 
1:4fbfbc6:   private Analyzer analyzer;
1:4fbfbc6:   private String fieldName = "text";
1:2e4d306: 
1:58cc1ae:   private static final Logger log = LoggerFactory.getLogger(AnalyzerTransformer.class);
1:58cc1ae: 
1:2e4d306:   public AnalyzerTransformer() {
1:4d0cd66:     this(new StandardAnalyzer(), "text");
2:2e4d306:   }
1:2e4d306: 
1:2e4d306:   public AnalyzerTransformer(Analyzer analyzer) {
1:2e4d306:     this(analyzer, "text");
1:2e4d306:   }
1:2e4d306: 
1:2e4d306:   public AnalyzerTransformer(Analyzer analyzer, String fieldName) {
1:2e4d306:     this.analyzer = analyzer;
1:2e4d306:     this.fieldName = fieldName;
1:2e4d306:   }
1:2e4d306: 
1:2e4d306:   @Override
1:2e4d306:   public String transformMatch(String match) {
1:2e4d306:     StringBuilder result = new StringBuilder();
1:85f9ece:     try (TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(match))) {
1:2e4d306:       ts.addAttribute(CharTermAttribute.class);
1:6a4942c:       ts.reset();
1:2e4d306:       TokenStreamIterator iter = new TokenStreamIterator(ts);
1:2e4d306:       while (iter.hasNext()) {
1:4fbfbc6:         result.append(iter.next()).append(' ');
1:2e4d306:       }
1:6a4942c:       ts.end();
1:31cb292:     } catch (IOException e) {
1:4fbfbc6:       throw new IllegalStateException(e);
1:31cb292:     }
1:2e4d306:     return result.toString();
1:2e4d306:   }
1:2e4d306: 
1:2e4d306:   public Analyzer getAnalyzer() {
1:2e4d306:     return analyzer;
1:2e4d306:   }
1:2e4d306: 
1:2e4d306:   public void setAnalyzer(Analyzer analyzer) {
1:2e4d306:     this.analyzer = analyzer;
1:2e4d306:   }
1:2e4d306: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:4d0cd66
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     this(new StandardAnalyzer(), "text");
commit:c88c240
/////////////////////////////////////////////////////////////////////////
0:     this(new StandardAnalyzer(Version.LUCENE_45), "text");
commit:c36dc71
/////////////////////////////////////////////////////////////////////////
0:     this(new StandardAnalyzer(Version.LUCENE_42), "text");
author:Andrew Musselman
-------------------------------------------------------------------------------
commit:864ba1a
/////////////////////////////////////////////////////////////////////////
0:     this(new StandardAnalyzer(Version.LUCENE_46), "text");
commit:a551b15
/////////////////////////////////////////////////////////////////////////
0: import org.apache.lucene.util.Version;
/////////////////////////////////////////////////////////////////////////
0:     this(new StandardAnalyzer(Version.LUCENE_46), "text");
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:670a7d2
/////////////////////////////////////////////////////////////////////////
0:     this(new StandardAnalyzer());
commit:4cff542
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     this(new StandardAnalyzer());
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.StringReader;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     try (TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(match))) {
/////////////////////////////////////////////////////////////////////////
author:frankscholten
-------------------------------------------------------------------------------
commit:2e5449f
/////////////////////////////////////////////////////////////////////////
0:     this(new StandardAnalyzer(Version.LUCENE_46), "text");
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:   private static final Logger log = LoggerFactory.getLogger(AnalyzerTransformer.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:         log.error(e.getMessage(), e);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       try {
0:         Closeables.close(ts, true);
1:       } catch (IOException e) {
0:         //nothing
1:       }
commit:e48eb4c
/////////////////////////////////////////////////////////////////////////
0:     this(new StandardAnalyzer(Version.LUCENE_43), "text");
commit:6a4942c
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:     this(new StandardAnalyzer(Version.LUCENE_41), "text");
/////////////////////////////////////////////////////////////////////////
0:     TokenStream ts = null;
0:       ts = analyzer.tokenStream(fieldName, new StringReader(match));
1:       ts.reset();
1:       ts.end();
0:     } finally {
0:       Closeables.closeQuietly(ts);
commit:2e4d306
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.regex;
1: 
1: 
1: import org.apache.lucene.analysis.Analyzer;
1: import org.apache.lucene.analysis.TokenStream;
1: import org.apache.lucene.analysis.standard.StandardAnalyzer;
1: import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
0: import org.apache.lucene.util.Version;
1: import org.apache.mahout.common.lucene.TokenStreamIterator;
1: 
0: import java.io.IOException;
0: import java.io.StringReader;
1: 
0: /**
1:  *
1:  *
0:  **/
1: public class AnalyzerTransformer implements RegexTransformer {
0:   protected Analyzer analyzer;
0:   protected String fieldName = "text";
1: 
1:   public AnalyzerTransformer() {
0:     this(new StandardAnalyzer(Version.LUCENE_34), "text");
1:   }
1: 
1:   public AnalyzerTransformer(Analyzer analyzer) {
1:     this(analyzer, "text");
1:   }
1: 
1:   public AnalyzerTransformer(Analyzer analyzer, String fieldName) {
1:     this.analyzer = analyzer;
1:     this.fieldName = fieldName;
1:   }
1: 
1:   @Override
1:   public String transformMatch(String match) {
1:     StringBuilder result = new StringBuilder();
0:     try {
0:       TokenStream ts = analyzer.reusableTokenStream(fieldName, new StringReader(match));
1:       ts.addAttribute(CharTermAttribute.class);
1:       TokenStreamIterator iter = new TokenStreamIterator(ts);
1:       while (iter.hasNext()) {
0:         result.append(iter.next()).append(" ");
1:       }
0:     } catch (IOException e) {
0:       throw new RuntimeException(e);
1:     }
1:     return result.toString();
1:   }
1: 
1:   public Analyzer getAnalyzer() {
1:     return analyzer;
1:   }
1: 
1:   public void setAnalyzer(Analyzer analyzer) {
1:     this.analyzer = analyzer;
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.mahout.utils.regex;
/////////////////////////////////////////////////////////////////////////
0: 
1:   private Analyzer analyzer;
1:   private String fieldName = "text";
/////////////////////////////////////////////////////////////////////////
1:         result.append(iter.next()).append(' ');
1:       throw new IllegalStateException(e);
============================================================================