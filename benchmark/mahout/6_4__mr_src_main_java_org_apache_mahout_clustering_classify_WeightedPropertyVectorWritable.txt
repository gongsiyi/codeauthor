2:f580dbf: /**
1:f580dbf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f580dbf:  * contributor license agreements.  See the NOTICE file distributed with
1:f580dbf:  * this work for additional information regarding copyright ownership.
1:f580dbf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f580dbf:  * (the "License"); you may not use this file except in compliance with
1:f580dbf:  * the License.  You may obtain a copy of the License at
3:f580dbf:  *
1:f580dbf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f580dbf:  *
1:f580dbf:  * Unless required by applicable law or agreed to in writing, software
1:f580dbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f580dbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f580dbf:  * See the License for the specific language governing permissions and
1:f580dbf:  * limitations under the License.
1:f580dbf:  */
1:f580dbf: 
1:8d102ea: package org.apache.mahout.clustering.classify;
1:f580dbf: 
1:f580dbf: import org.apache.hadoop.io.Text;
1:8d102ea: import org.apache.mahout.clustering.AbstractCluster;
1:f580dbf: import org.apache.mahout.math.Vector;
1:f580dbf: 
1:f580dbf: import java.io.DataInput;
1:f580dbf: import java.io.DataOutput;
1:f580dbf: import java.io.IOException;
1:f580dbf: import java.util.HashMap;
1:f580dbf: import java.util.Map;
1:f580dbf: 
1:f580dbf: public class WeightedPropertyVectorWritable extends WeightedVectorWritable {
1:f580dbf: 
1:b59e468:   private Map<Text, Text> properties;
1:f580dbf: 
1:f580dbf:   public WeightedPropertyVectorWritable() {
1:f580dbf:   }
1:f580dbf: 
1:f580dbf:   public WeightedPropertyVectorWritable(Map<Text, Text> properties) {
1:f580dbf:     this.properties = properties;
1:f580dbf:   }
1:f580dbf: 
1:f580dbf:   public WeightedPropertyVectorWritable(double weight, Vector vector, Map<Text, Text> properties) {
1:f580dbf:     super(weight, vector);
1:f580dbf:     this.properties = properties;
1:f580dbf:   }
1:f580dbf: 
1:f580dbf:   public Map<Text, Text> getProperties() {
1:f580dbf:     return properties;
1:f580dbf:   }
1:f580dbf: 
1:f580dbf:   public void setProperties(Map<Text, Text> properties) {
1:f580dbf:     this.properties = properties;
1:f580dbf:   }
1:f580dbf: 
1:1499411:   @Override
1:f580dbf:   public void readFields(DataInput in) throws IOException {
1:f580dbf:     super.readFields(in);
1:f580dbf:     int size = in.readInt();
1:f580dbf:     if (size > 0) {
1:87c15be:       properties = new HashMap<>();
1:f580dbf:       for (int i = 0; i < size; i++) {
1:f580dbf:         Text key = new Text(in.readUTF());
1:f580dbf:         Text val = new Text(in.readUTF());
1:f580dbf:         properties.put(key, val);
1:f580dbf:       }
1:f580dbf:     }
1:f580dbf:   }
1:f580dbf: 
1:f580dbf:   @Override
1:f580dbf:   public void write(DataOutput out) throws IOException {
1:f580dbf:     super.write(out);
1:f580dbf:     out.writeInt(properties != null ? properties.size() : 0);
1:f580dbf:     if (properties != null) {
1:f580dbf:       for (Map.Entry<Text, Text> entry : properties.entrySet()) {
1:f580dbf:         out.writeUTF(entry.getKey().toString());
1:f580dbf:         out.writeUTF(entry.getValue().toString());
1:f580dbf:       }
1:f580dbf:     }
1:f580dbf:   }
1:f580dbf: 
1:f580dbf:   @Override
1:f580dbf:   public String toString() {
1:f580dbf:     Vector vector = getVector();
1:229aeff:     StringBuilder bldr = new StringBuilder("wt: ").append(getWeight()).append(' ');
1:b59e468:     if (properties != null && !properties.isEmpty()) {
1:f580dbf:       for (Map.Entry<Text, Text> entry : properties.entrySet()) {
1:f580dbf:         bldr.append(entry.getKey().toString()).append(": ").append(entry.getValue().toString()).append(' ');
1:f580dbf:       }
1:f580dbf:     }
1:b59e468:     bldr.append(" vec: ").append(vector == null ? "null" : AbstractCluster.formatVector(vector, null));
1:f580dbf:     return bldr.toString();
1:f580dbf:   }
1:f580dbf: 
1:f580dbf: 
1:f580dbf: }
1:f580dbf: 
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:       properties = new HashMap<>();
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:     StringBuilder bldr = new StringBuilder("wt: ").append(getWeight()).append(' ');
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:   @Override
commit:b59e468
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.clustering;
/////////////////////////////////////////////////////////////////////////
1:   private Map<Text, Text> properties;
/////////////////////////////////////////////////////////////////////////
0:     StringBuilder bldr = new StringBuilder("wt: ").append(getWeight());
1:     if (properties != null && !properties.isEmpty()) {
1:     bldr.append(" vec: ").append(vector == null ? "null" : AbstractCluster.formatVector(vector, null));
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:8d102ea
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.classify;
1: import org.apache.mahout.clustering.AbstractCluster;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:03a9492
/////////////////////////////////////////////////////////////////////////
0:     StringBuilder bldr = new StringBuilder("wt: ").append(getWeight()).append(" ");
commit:f580dbf
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.clustering;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import org.apache.hadoop.io.Text;
1: import org.apache.mahout.math.Vector;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: /**
1:  *
1:  *
0:  **/
1: public class WeightedPropertyVectorWritable extends WeightedVectorWritable {
1: 
0:   protected Map<Text, Text> properties;
1: 
1:   public WeightedPropertyVectorWritable() {
1:   }
1: 
1:   public WeightedPropertyVectorWritable(Map<Text, Text> properties) {
1:     this.properties = properties;
1:   }
1: 
1:   public WeightedPropertyVectorWritable(double weight, Vector vector, Map<Text, Text> properties) {
1:     super(weight, vector);
1:     this.properties = properties;
1:   }
1: 
1:   public Map<Text, Text> getProperties() {
1:     return properties;
1:   }
1: 
1:   public void setProperties(Map<Text, Text> properties) {
1:     this.properties = properties;
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     super.readFields(in);
1:     int size = in.readInt();
1:     if (size > 0) {
0:       properties = new HashMap<Text, Text>();
1:       for (int i = 0; i < size; i++) {
1:         Text key = new Text(in.readUTF());
1:         Text val = new Text(in.readUTF());
1:         properties.put(key, val);
1:       }
1:     }
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     super.write(out);
1:     out.writeInt(properties != null ? properties.size() : 0);
1:     if (properties != null) {
1:       for (Map.Entry<Text, Text> entry : properties.entrySet()) {
1:         out.writeUTF(entry.getKey().toString());
1:         out.writeUTF(entry.getValue().toString());
1:       }
1:     }
1:   }
1: 
1:   public String toString() {
1:     Vector vector = getVector();
0:     StringBuilder bldr = new StringBuilder("wt: ").append(weight);
0:     if (properties != null && properties.isEmpty() == false) {
1:       for (Map.Entry<Text, Text> entry : properties.entrySet()) {
1:         bldr.append(entry.getKey().toString()).append(": ").append(entry.getValue().toString()).append(' ');
1:       }
1:     }
0:     bldr.append(" vec: ").append((vector == null ? "null" : AbstractCluster.formatVector(vector, null)));
1:     return bldr.toString();
1:   }
1: 
1: 
1: }
1: 
============================================================================