1:288156f: /**
1:288156f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:288156f:  * contributor license agreements.  See the NOTICE file distributed with
1:288156f:  * this work for additional information regarding copyright ownership.
1:288156f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:288156f:  * (the "License"); you may not use this file except in compliance with
1:288156f:  * the License.  You may obtain a copy of the License at
1:288156f:  *
1:288156f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:288156f:  *
1:288156f:  * Unless required by applicable law or agreed to in writing, software
1:288156f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:288156f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:288156f:  * See the License for the specific language governing permissions and
1:288156f:  * limitations under the License.
1:288156f:  */
1:b82d989: 
1:288156f: package org.apache.mahout.common;
1:b82d989: 
1:288156f: import java.io.DataInput;
1:288156f: import java.io.DataOutput;
1:288156f: import java.io.IOException;
1:288156f: import java.util.Collections;
1:288156f: import java.util.List;
16:288156f: 
1:74f849b: import com.google.common.collect.Lists;
1:288156f: import org.apache.hadoop.io.WritableComparable;
1:288156f: 
1:288156f: /**
1:288156f:  * An Ordered List of Integers which can be used in a Hadoop Map/Reduce Job
1:288156f:  * 
1:288156f:  * 
1:288156f:  */
1:5ce5992: public final class IntegerTuple implements WritableComparable<IntegerTuple> {
1:288156f:   
1:74f849b:   private List<Integer> tuple = Lists.newArrayList();
1:288156f:   
1:b82d989:   public IntegerTuple() { }
1:b82d989:   
1:288156f:   public IntegerTuple(Integer firstEntry) {
1:288156f:     add(firstEntry);
2:288156f:   }
1:288156f:   
1:5ce5992:   public IntegerTuple(Iterable<Integer> entries) {
1:b82d989:     for (Integer entry : entries) {
1:288156f:       add(entry);
1:b82d989:     }
1:288156f:   }
1:288156f:   
1:288156f:   public IntegerTuple(Integer[] entries) {
1:b82d989:     for (Integer entry : entries) {
1:288156f:       add(entry);
1:b82d989:     }
1:288156f:   }
1:b82d989:   
1:288156f:   /**
1:288156f:    * add an entry to the end of the list
1:288156f:    * 
1:288156f:    * @param entry
1:288156f:    * @return true if the items get added
1:288156f:    */
1:288156f:   public boolean add(Integer entry) {
1:288156f:     return tuple.add(entry);
1:288156f:   }
1:b82d989:   
1:288156f:   /**
1:288156f:    * Fetches the string at the given location
1:288156f:    * 
1:288156f:    * @param index
1:288156f:    * @return String value at the given location in the tuple list
1:288156f:    */
1:288156f:   public Integer integerAt(int index) {
1:288156f:     return tuple.get(index);
1:288156f:   }
1:b82d989:   
1:288156f:   /**
1:288156f:    * Replaces the string at the given index with the given newString
1:288156f:    * 
1:288156f:    * @param index
1:b5bbe2e:    * @param newInteger
1:288156f:    * @return The previous value at that location
1:288156f:    */
1:288156f:   public Integer replaceAt(int index, Integer newInteger) {
1:288156f:     return tuple.set(index, newInteger);
1:288156f:   }
1:b82d989:   
1:288156f:   /**
1:288156f:    * Fetch the list of entries from the tuple
1:288156f:    * 
1:288156f:    * @return a List containing the strings in the order of insertion
1:288156f:    */
1:288156f:   public List<Integer> getEntries() {
1:288156f:     return Collections.unmodifiableList(this.tuple);
1:288156f:   }
1:b82d989:   
1:288156f:   /**
1:288156f:    * Returns the length of the tuple
1:288156f:    * 
1:288156f:    * @return length
1:288156f:    */
1:288156f:   public int length() {
1:288156f:     return this.tuple.size();
1:288156f:   }
1:b82d989:   
1:288156f:   @Override
1:288156f:   public String toString() {
1:288156f:     return tuple.toString();
1:b5bbe2e:   }
1:b82d989:   
1:288156f:   @Override
1:288156f:   public int hashCode() {
1:288156f:     return tuple.hashCode();
1:288156f:   }
1:b82d989:   
1:288156f:   @Override
1:288156f:   public boolean equals(Object obj) {
1:b82d989:     if (this == obj) {
1:288156f:       return true;
1:b82d989:     }
1:b82d989:     if (obj == null) {
1:288156f:       return false;
1:b82d989:     }
1:b82d989:     if (getClass() != obj.getClass()) {
1:288156f:       return false;
1:b82d989:     }
1:288156f:     IntegerTuple other = (IntegerTuple) obj;
1:288156f:     if (tuple == null) {
1:b82d989:       if (other.tuple != null) {
1:288156f:         return false;
1:b82d989:       }
1:b82d989:     } else if (!tuple.equals(other.tuple)) {
1:288156f:       return false;
1:b82d989:     }
1:288156f:     return true;
1:288156f:   }
1:b82d989:   
1:288156f:   @Override
1:288156f:   public void readFields(DataInput in) throws IOException {
1:288156f:     int len = in.readInt();
1:74f849b:     tuple = Lists.newArrayListWithCapacity(len);
1:288156f:     for (int i = 0; i < len; i++) {
1:288156f:       int data = in.readInt();
1:288156f:       tuple.add(data);
1:288156f:     }
1:288156f:   }
1:b82d989:   
1:288156f:   @Override
1:288156f:   public void write(DataOutput out) throws IOException {
1:288156f:     out.writeInt(tuple.size());
1:b82d989:     for (Integer entry : tuple) {
1:b82d989:       out.writeInt(entry);
1:288156f:     }
1:288156f:   }
1:b82d989:   
1:288156f:   @Override
1:288156f:   public int compareTo(IntegerTuple otherTuple) {
1:b5bbe2e:     int thisLength = length();
1:b5bbe2e:     int otherLength = otherTuple.length();
1:b5bbe2e:     int min = Math.min(thisLength, otherLength);
1:288156f:     for (int i = 0; i < min; i++) {
1:288156f:       int ret = this.tuple.get(i).compareTo(otherTuple.integerAt(i));
1:b82d989:       if (ret == 0) {
1:288156f:         continue;
1:b82d989:       }
1:288156f:       return ret;
1:288156f:     }
1:b5bbe2e:     if (thisLength < otherLength) {
1:b5bbe2e:       return -1;
1:b5bbe2e:     } else if (thisLength > otherLength) {
1:b5bbe2e:       return 1;
1:b5bbe2e:     } else {
1:b5bbe2e:       return 0;
1:b5bbe2e:     }
1:288156f:   }
1:b82d989:   
1:288156f: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:   private List<Integer> tuple = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:     tuple = Lists.newArrayListWithCapacity(len);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:5ce5992
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public final class IntegerTuple implements WritableComparable<IntegerTuple> {
/////////////////////////////////////////////////////////////////////////
1:   public IntegerTuple(Iterable<Integer> entries) {
commit:b5bbe2e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class IntegerTuple implements WritableComparable<IntegerTuple> {
/////////////////////////////////////////////////////////////////////////
1:    * @param newInteger
/////////////////////////////////////////////////////////////////////////
1:   }
/////////////////////////////////////////////////////////////////////////
1:     int thisLength = length();
1:     int otherLength = otherTuple.length();
1:     int min = Math.min(thisLength, otherLength);
1:     if (thisLength < otherLength) {
1:       return -1;
1:     } else if (thisLength > otherLength) {
1:       return 1;
1:     } else {
1:       return 0;
1:     }
author:Robin Anil
-------------------------------------------------------------------------------
commit:b82d989
/////////////////////////////////////////////////////////////////////////
1:   
1:   
1:   public IntegerTuple() { }
1:   
1:     for (Integer entry : entries) {
1:     }
1:     for (Integer entry : entries) {
1:     }
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
1:   
1:   
1:     if (this == obj) {
1:     }
1:     if (obj == null) {
1:     }
1:     if (getClass() != obj.getClass()) {
1:     }
1:       if (other.tuple != null) {
1:       }
1:     } else if (!tuple.equals(other.tuple)) {
1:     }
1:   
/////////////////////////////////////////////////////////////////////////
1:   
1:     for (Integer entry : tuple) {
1:       out.writeInt(entry);
1:   
/////////////////////////////////////////////////////////////////////////
1:       if (ret == 0) {
1:       }
/////////////////////////////////////////////////////////////////////////
1:   
commit:288156f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.List;
1: 
0: import org.apache.hadoop.io.Writable;
1: import org.apache.hadoop.io.WritableComparable;
1: 
1: /**
1:  * An Ordered List of Integers which can be used in a Hadoop Map/Reduce Job
1:  * 
1:  * 
1:  */
0: public class IntegerTuple implements Writable, WritableComparable<IntegerTuple> {
1: 
0:   private List<Integer> tuple = new ArrayList<Integer>();
1: 
0:   public IntegerTuple() {
1:   }
1: 
1:   public IntegerTuple(Integer firstEntry) {
1:     add(firstEntry);
1:   }
1:   
0:   public IntegerTuple(Collection<Integer> entries) {
0:     for(Integer entry: entries)
1:       add(entry);
1:   }
1:   
1:   public IntegerTuple(Integer[] entries) {
0:     for(Integer entry: entries)
1:       add(entry);
1:   }
1: 
1:   /**
1:    * add an entry to the end of the list
1:    * 
1:    * @param entry
1:    * @return true if the items get added
1:    */
1:   public boolean add(Integer entry) {
1:     return tuple.add(entry);
1:   }
1: 
1:   /**
1:    * Fetches the string at the given location
1:    * 
1:    * @param index
1:    * @return String value at the given location in the tuple list
1:    */
1:   public Integer integerAt(int index) {
1:     return tuple.get(index);
1:   }
1: 
1:   /**
1:    * Replaces the string at the given index with the given newString
1:    * 
1:    * @param index
0:    * @param newString
1:    * @return The previous value at that location
1:    */
1:   public Integer replaceAt(int index, Integer newInteger) {
1:     return tuple.set(index, newInteger);
1:   }
1: 
1:   /**
1:    * Fetch the list of entries from the tuple
1:    * 
1:    * @return a List containing the strings in the order of insertion
1:    */
1:   public List<Integer> getEntries() {
1:     return Collections.unmodifiableList(this.tuple);
1:   }
1: 
1:   /**
1:    * Returns the length of the tuple
1:    * 
1:    * @return length
1:    */
1:   public int length() {
1:     return this.tuple.size();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     return tuple.toString();
0:   };
1: 
1:   @Override
1:   public int hashCode() {
1:     return tuple.hashCode();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object obj) {
0:     if (this == obj)
1:       return true;
0:     if (obj == null)
1:       return false;
0:     if (getClass() != obj.getClass())
1:       return false;
1:     IntegerTuple other = (IntegerTuple) obj;
1:     if (tuple == null) {
0:       if (other.tuple != null)
1:         return false;
0:     } else if (!tuple.equals(other.tuple))
1:       return false;
1:     return true;
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     int len = in.readInt();
0:     tuple = new ArrayList<Integer>(len);
1:     for (int i = 0; i < len; i++) {
1:       int data = in.readInt();
1:       tuple.add(data);
1:     }
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeInt(tuple.size());
0:     for (Integer entry : tuple) {     
0:       out.writeInt(entry);     
1:     }
1:   }
1: 
1:   @Override
1:   public int compareTo(IntegerTuple otherTuple) {
0:     int min = Math.min(this.length(), otherTuple.length());
1:     for (int i = 0; i < min; i++) {
1:       int ret = this.tuple.get(i).compareTo(otherTuple.integerAt(i));
0:       if (ret == 0)
1:         continue;
1:       return ret;
1:     }
0:     return this.length() - otherTuple.length();
1:   }
1: 
1: }
============================================================================