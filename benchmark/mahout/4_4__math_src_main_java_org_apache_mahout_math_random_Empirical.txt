1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
2:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
2:a07bfc3:  */
3:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:a07bfc3: import com.google.common.base.Preconditions;
1:a07bfc3: import org.apache.mahout.common.RandomUtils;
1:a07bfc3: 
1:a07bfc3: import java.util.Random;
1:a07bfc3: 
2:a07bfc3: /**
1:a07bfc3:  * Samples from an empirical cumulative distribution.
1:a07bfc3:  */
1:8b6a26a: public final class Empirical extends AbstractSamplerFunction {
1:6d16230:   private final Random gen;
1:6d16230:   private final boolean exceedMinimum;
1:6d16230:   private final boolean exceedMaximum;
1:a07bfc3: 
1:6d16230:   private final double[] x;
1:6d16230:   private final double[] y;
1:6d16230:   private final int n;
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Sets up a sampler for a specified empirical cumulative distribution function.  The distribution
1:6d16230:    * can have optional exponential tails on either or both ends, but otherwise does a linear
1:6d16230:    * interpolation between known points.
1:6d16230:    *
1:a07bfc3:    * @param exceedMinimum  Should we generate samples less than the smallest quantile (i.e. generate a left tail)?
1:6d16230:    * @param exceedMaximum  Should we generate samples greater than the largest observed quantile (i.e. generate a right
1:6d16230:    *                       tail)?
1:a07bfc3:    * @param samples        The number of samples observed to get the quantiles.
1:a07bfc3:    * @param ecdf           Alternating values that represent which percentile (in the [0..1] range)
1:a07bfc3:    *                       and values.  For instance, if you have the min, median and max of 1, 3, 10
1:a07bfc3:    *                       you should pass 0.0, 1, 0.5, 3, 1.0, 10.  Note that the list must include
1:a07bfc3:    *                       the 0-th (1.0-th) quantile if the left (right) tail is not allowed.
1:6d16230:    */
1:6d16230:   public Empirical(boolean exceedMinimum, boolean exceedMaximum, int samples, double... ecdf) {
1:cd167f9:     Preconditions.checkArgument(ecdf.length % 2 == 0, "ecdf must have an even count of values");
1:cd167f9:     Preconditions.checkArgument(samples >= 3, "Sample size must be >= 3");
1:a07bfc3: 
1:6d16230:     // if we can't exceed the observed bounds, then we have to be given the bounds.
1:6d16230:     Preconditions.checkArgument(exceedMinimum || ecdf[0] == 0);
1:6d16230:     Preconditions.checkArgument(exceedMaximum || ecdf[ecdf.length - 2] == 1);
1:a07bfc3: 
1:6d16230:     gen = RandomUtils.getRandom();
1:a07bfc3: 
1:6d16230:     n = ecdf.length / 2;
1:6d16230:     x = new double[n];
1:6d16230:     y = new double[n];
1:a07bfc3: 
1:6d16230:     double lastX = ecdf[1];
1:6d16230:     double lastY = ecdf[0];
1:6d16230:     for (int i = 0; i < ecdf.length; i += 2) {
1:6d16230:       // values have to be monotonic increasing
1:6d16230:       Preconditions.checkArgument(i == 0 || ecdf[i + 1] > lastY);
1:6d16230:       y[i / 2] = ecdf[i + 1];
1:6d16230:       lastY = y[i / 2];
1:a07bfc3: 
1:6d16230:       // quantiles have to be in [0,1] and be monotonic increasing
1:6d16230:       Preconditions.checkArgument(ecdf[i] >= 0 && ecdf[i] <= 1);
1:6d16230:       Preconditions.checkArgument(i == 0 || ecdf[i] > lastX);
1:a07bfc3: 
1:6d16230:       x[i / 2] = ecdf[i];
1:6d16230:       lastX = x[i / 2];
7:a07bfc3:     }
1:a07bfc3: 
1:6d16230:     // squeeze a bit to allow for unobserved tails
1:6d16230:     double x0 = exceedMinimum ? 0.5 / samples : 0;
1:6d16230:     double x1 = 1 - (exceedMaximum ? 0.5 / samples : 0);
1:6d16230:     for (int i = 0; i < n; i++) {
1:6d16230:       x[i] = x[i] * (x1 - x0) + x0;
1:a07bfc3:     }
1:a07bfc3: 
1:6d16230:     this.exceedMinimum = exceedMinimum;
1:6d16230:     this.exceedMaximum = exceedMaximum;
1:6d16230:   }
1:6d16230: 
1:6d16230:   @Override
1:6d16230:   public Double sample() {
1:6d16230:     return sample(gen.nextDouble());
1:6d16230:   }
1:6d16230: 
1:6d16230:   public double sample(double u) {
1:6d16230:     if (exceedMinimum && u < x[0]) {
1:6d16230:       // generate from left tail
1:6d16230:       if (u == 0) {
1:6d16230:         u = 1.0e-16;
1:6d16230:       }
1:6d16230:       return y[0] + Math.log(u / x[0]) * x[0] * (y[1] - y[0]) / (x[1] - x[0]);
1:6d16230:     } else if (exceedMaximum && u > x[n - 1]) {
1:6d16230:       if (u == 1) {
1:6d16230:         u = 1 - 1.0e-16;
1:6d16230:       }
1:6d16230:       // generate from right tail
1:6d16230:       double dy = y[n - 1] - y[n - 2];
1:6d16230:       double dx = x[n - 1] - x[n - 2];
1:6d16230:       return y[n - 1] - Math.log((1 - u) / (1 - x[n - 1])) * (1 - x[n - 1]) * dy / dx;
1:6d16230:     } else {
1:6d16230:       // linear interpolation
1:6d16230:       for (int i = 1; i < n; i++) {
1:6d16230:         if (x[i] > u) {
1:6d16230:           double dy = y[i] - y[i - 1];
1:6d16230:           double dx = x[i] - x[i - 1];
1:6d16230:           return y[i - 1] + (u - x[i - 1]) * dy / dx;
1:6d16230:         }
1:a07bfc3:       }
1:6d16230:       throw new RuntimeException(String.format("Can't happen (%.3f is not in [%.3f,%.3f]", u, x[0], x[n - 1]));
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(ecdf.length % 2 == 0, "ecdf must have an even count of values");
1:     Preconditions.checkArgument(samples >= 3, "Sample size must be >= 3");
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:   private final Random gen;
1:   private final boolean exceedMinimum;
1:   private final boolean exceedMaximum;
1:   private final double[] x;
1:   private final double[] y;
1:   private final int n;
1:   /**
1:    * Sets up a sampler for a specified empirical cumulative distribution function.  The distribution
1:    * can have optional exponential tails on either or both ends, but otherwise does a linear
1:    * interpolation between known points.
1:    *
1:    * @param exceedMaximum  Should we generate samples greater than the largest observed quantile (i.e. generate a right
1:    *                       tail)?
1:    */
1:   public Empirical(boolean exceedMinimum, boolean exceedMaximum, int samples, double... ecdf) {
0:     Preconditions.checkArgument(ecdf.length % 2 == 0);
0:     Preconditions.checkArgument(samples >= 3);
1:     // if we can't exceed the observed bounds, then we have to be given the bounds.
1:     Preconditions.checkArgument(exceedMinimum || ecdf[0] == 0);
1:     Preconditions.checkArgument(exceedMaximum || ecdf[ecdf.length - 2] == 1);
1:     gen = RandomUtils.getRandom();
1:     n = ecdf.length / 2;
1:     x = new double[n];
1:     y = new double[n];
1:     double lastX = ecdf[1];
1:     double lastY = ecdf[0];
1:     for (int i = 0; i < ecdf.length; i += 2) {
1:       // values have to be monotonic increasing
1:       Preconditions.checkArgument(i == 0 || ecdf[i + 1] > lastY);
1:       y[i / 2] = ecdf[i + 1];
1:       lastY = y[i / 2];
1:       // quantiles have to be in [0,1] and be monotonic increasing
1:       Preconditions.checkArgument(ecdf[i] >= 0 && ecdf[i] <= 1);
1:       Preconditions.checkArgument(i == 0 || ecdf[i] > lastX);
1:       x[i / 2] = ecdf[i];
1:       lastX = x[i / 2];
1:     // squeeze a bit to allow for unobserved tails
1:     double x0 = exceedMinimum ? 0.5 / samples : 0;
1:     double x1 = 1 - (exceedMaximum ? 0.5 / samples : 0);
1:     for (int i = 0; i < n; i++) {
1:       x[i] = x[i] * (x1 - x0) + x0;
1:     this.exceedMinimum = exceedMinimum;
1:     this.exceedMaximum = exceedMaximum;
1:   }
1: 
1:   @Override
1:   public Double sample() {
1:     return sample(gen.nextDouble());
1:   }
1: 
1:   public double sample(double u) {
1:     if (exceedMinimum && u < x[0]) {
1:       // generate from left tail
1:       if (u == 0) {
1:         u = 1.0e-16;
1:       }
1:       return y[0] + Math.log(u / x[0]) * x[0] * (y[1] - y[0]) / (x[1] - x[0]);
1:     } else if (exceedMaximum && u > x[n - 1]) {
1:       if (u == 1) {
1:         u = 1 - 1.0e-16;
1:       }
1:       // generate from right tail
1:       double dy = y[n - 1] - y[n - 2];
1:       double dx = x[n - 1] - x[n - 2];
1:       return y[n - 1] - Math.log((1 - u) / (1 - x[n - 1])) * (1 - x[n - 1]) * dy / dx;
1:     } else {
1:       // linear interpolation
1:       for (int i = 1; i < n; i++) {
1:         if (x[i] > u) {
1:           double dy = y[i] - y[i - 1];
1:           double dx = x[i] - x[i - 1];
1:           return y[i - 1] + (u - x[i - 1]) * dy / dx;
1:       }
1:       throw new RuntimeException(String.format("Can't happen (%.3f is not in [%.3f,%.3f]", u, x[0], x[n - 1]));
1:   }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: public final class Empirical extends AbstractSamplerFunction {
/////////////////////////////////////////////////////////////////////////
0:                 u = 1.0e-16;
0:                 u = 1 - 1.0e-16;
0:             double dy = y[n - 1] - y[n - 2];
0:             double dx = x[n - 1] - x[n - 2];
0:                     double dy = y[i] - y[i - 1];
0:                     double dx = x[i] - x[i - 1];
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import com.google.common.base.Preconditions;
1: import org.apache.mahout.common.RandomUtils;
1: 
1: import java.util.Random;
1: 
1: /**
1:  * Samples from an empirical cumulative distribution.
1:  */
0: public class Empirical extends AbstractSamplerFunction {
0:     private final Random gen;
0:     private final boolean exceedMinimum;
0:     private final boolean exceedMaximum;
1: 
0:     private final double[] x;
0:     private final double[] y;
0:     private final int n;
1: 
1:     /**
0:      * Sets up a sampler for a specified empirical cumulative distribution function.  The distribution
0:      * can have optional exponential tails on either or both ends, but otherwise does a linear
0:      * interpolation between known points.
1:      *
1:    * @param exceedMinimum  Should we generate samples less than the smallest quantile (i.e. generate a left tail)?
0:    * @param exceedMaximum  Should we generate samples greater than the largest observed quantile (i.e. generate a right tail)?
1:    * @param samples        The number of samples observed to get the quantiles.
1:    * @param ecdf           Alternating values that represent which percentile (in the [0..1] range)
1:    *                       and values.  For instance, if you have the min, median and max of 1, 3, 10
1:    *                       you should pass 0.0, 1, 0.5, 3, 1.0, 10.  Note that the list must include
1:    *                       the 0-th (1.0-th) quantile if the left (right) tail is not allowed.
1:      */
0:     public Empirical(boolean exceedMinimum, boolean exceedMaximum, int samples, double... ecdf) {
0:         Preconditions.checkArgument(ecdf.length % 2 == 0);
0:         Preconditions.checkArgument(samples >= 3);
1: 
0:         // if we can't exceed the observed bounds, then we have to be given the bounds.
0:         Preconditions.checkArgument(exceedMinimum || ecdf[0] == 0);
0:         Preconditions.checkArgument(exceedMaximum || ecdf[ecdf.length - 2] == 1);
1: 
0:         gen = RandomUtils.getRandom();
1: 
0:         n = ecdf.length / 2;
0:         x = new double[n];
0:         y = new double[n];
1: 
0:         double lastX = ecdf[1];
0:         double lastY = ecdf[0];
0:         for (int i = 0; i < ecdf.length; i += 2) {
0:             // values have to be monotonic increasing
0:             Preconditions.checkArgument(i == 0 || ecdf[i + 1] > lastY);
0:             y[i / 2] = ecdf[i + 1];
0:             lastY = y[i / 2];
1: 
0:             // quantiles have to be in [0,1] and be monotonic increasing
0:             Preconditions.checkArgument(ecdf[i] >= 0 && ecdf[i] <= 1);
0:             Preconditions.checkArgument(i == 0 || ecdf[i] > lastX);
1: 
0:             x[i / 2] = ecdf[i];
0:             lastX = x[i / 2];
1:         }
1: 
0:         // squeeze a bit to allow for unobserved tails
0:         double x0 = exceedMinimum ? 0.5 / samples : 0;
0:         double x1 = 1 - (exceedMaximum ? 0.5 / samples : 0);
0:         for (int i = 0; i < n; i++) {
0:             x[i] = x[i] * (x1 - x0) + x0;
1:         }
1: 
0:         this.exceedMinimum = exceedMinimum;
0:         this.exceedMaximum = exceedMaximum;
1:     }
1: 
0:     @Override
0:     public Double sample() {
0:         return sample(gen.nextDouble());
1:     }
1: 
0:     public double sample(double u) {
0:         if (exceedMinimum && u < x[0]) {
0:             // generate from left tail
0:             if (u == 0) {
0:                 u = 1e-16;
1:             }
0:             return y[0] + Math.log(u / x[0]) * x[0] * (y[1] - y[0]) / (x[1] - x[0]);
0:         } else if (exceedMaximum && u > x[n - 1]) {
0:             if (u == 1) {
0:                 u = 1 - 1e-16;
1:             }
0:             // generate from right tail
0:             final double dy = y[n - 1] - y[n - 2];
0:             final double dx = x[n - 1] - x[n - 2];
0:             return y[n - 1] - Math.log((1 - u) / (1 - x[n - 1])) * (1 - x[n - 1]) * dy / dx;
0:         } else {
0:             // linear interpolation
0:             for (int i = 1; i < n; i++) {
0:                 if (x[i] > u) {
0:                     final double dy = y[i] - y[i - 1];
0:                     final double dx = x[i] - x[i - 1];
0:                     return y[i - 1] + (u - x[i - 1]) * dy / dx;
1:                 }
1:             }
0:             throw new RuntimeException(String.format("Can't happen (%.3f is not in [%.3f,%.3f]", u, x[0], x[n - 1]));
1:         }
1:     }
1: }
============================================================================