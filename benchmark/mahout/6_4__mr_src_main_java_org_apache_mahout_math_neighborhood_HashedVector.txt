1:ec9035c: /*
1:ec9035c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ec9035c:  * contributor license agreements.  See the NOTICE file distributed with
1:ec9035c:  * this work for additional information regarding copyright ownership.
1:ec9035c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ec9035c:  * (the "License"); you may not use this file except in compliance with
1:ec9035c:  * the License.  You may obtain a copy of the License at
1:ec9035c:  *
1:ec9035c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ec9035c:  *
1:ec9035c:  * Unless required by applicable law or agreed to in writing, software
1:ec9035c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ec9035c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ec9035c:  * See the License for the specific language governing permissions and
1:ec9035c:  * limitations under the License.
1:ec9035c:  */
2:ec9035c: 
1:ec9035c: package org.apache.mahout.math.neighborhood;
1:ec9035c: 
1:ec9035c: import org.apache.mahout.math.Matrix;
1:ec9035c: import org.apache.mahout.math.Vector;
1:ec9035c: import org.apache.mahout.math.WeightedVector;
1:ec9035c: 
1:ec9035c: /**
1:ec9035c:  * Decorates a weighted vector with a locality sensitive hash.
1:ec9035c:  *
1:ec9035c:  * The LSH function implemented is the random hyperplane based hash function.
1:ec9035c:  * See "Similarity Estimation Techniques from Rounding Algorithms" by Moses S. Charikar, section 3.
1:ec9035c:  * http://www.cs.princeton.edu/courses/archive/spring04/cos598B/bib/CharikarEstim.pdf
1:ec9035c:  */
1:ec9035c: public class HashedVector extends WeightedVector {
1:58cc1ae:   protected static final int INVALID_INDEX = -1;
1:ec9035c: 
1:ec9035c:   /**
1:ec9035c:    * Value of the locality sensitive hash. It is 64 bit.
1:ec9035c:    */
1:335a993:   private final long hash;
1:ec9035c: 
1:ec9035c:   public HashedVector(Vector vector, long hash, int index) {
1:ec9035c:     super(vector, 1, index);
1:ec9035c:     this.hash = hash;
1:ec9035c:   }
1:ec9035c: 
1:ec9035c:   public HashedVector(Vector vector, Matrix projection, int index, long mask) {
1:ec9035c:     super(vector, 1, index);
1:ec9035c:     this.hash = mask & computeHash64(vector, projection);
1:ec9035c:   }
1:ec9035c: 
1:ec9035c:   public HashedVector(WeightedVector weightedVector, Matrix projection, long mask) {
1:ec9035c:     super(weightedVector.getVector(), weightedVector.getWeight(), weightedVector.getIndex());
1:ec9035c:     this.hash = mask & computeHash64(weightedVector, projection);
1:ec9035c:   }
1:ec9035c: 
1:ec9035c:   public static long computeHash64(Vector vector, Matrix projection) {
1:ec9035c:     long hash = 0;
1:dc62944:     for (Element element : projection.times(vector).nonZeroes()) {
1:ec9035c:       if (element.get() > 0) {
1:335a993:         hash += 1L << element.index();
1:ec9035c:       }
1:ec9035c:     }
1:ec9035c:     return hash;
1:ec9035c:   }
1:ec9035c: 
1:ec9035c:   public static HashedVector hash(WeightedVector v, Matrix projection) {
1:ec9035c:     return hash(v, projection, 0);
1:ec9035c:   }
1:ec9035c: 
1:ec9035c:   public static HashedVector hash(WeightedVector v, Matrix projection, long mask) {
1:ec9035c:     return new HashedVector(v, projection, mask);
1:ec9035c:   }
1:ec9035c: 
1:ec9035c:   public int hammingDistance(long otherHash) {
1:ec9035c:     return Long.bitCount(hash ^ otherHash);
1:ec9035c:   }
1:ec9035c: 
1:ec9035c:   public long getHash() {
1:ec9035c:     return hash;
1:ec9035c:   }
1:ec9035c: 
1:ec9035c:   @Override
1:ec9035c:   public String toString() {
1:ec9035c:     return String.format("index=%d, hash=%08x, v=%s", getIndex(), hash, getVector());
1:ec9035c:   }
1:ec9035c: 
1:ec9035c:   @Override
1:ec9035c:   public boolean equals(Object o) {
1:ec9035c:     if (this == o) {
1:ec9035c:       return true;
1:ec9035c:     }
1:ec9035c:     if (!(o instanceof HashedVector)) {
1:ec9035c:       return o instanceof Vector && this.minus((Vector) o).norm(1) == 0;
1:ec9035c:     }
1:335a993:     HashedVector v = (HashedVector) o;
1:335a993:     return v.hash == this.hash && this.minus(v).norm(1) == 0;
1:ec9035c:   }
1:ec9035c: 
1:ec9035c:   @Override
1:ec9035c:   public int hashCode() {
1:ec9035c:     int result = super.hashCode();
1:ec9035c:     result = 31 * result + (int) (hash ^ (hash >>> 32));
1:ec9035c:     return result;
1:ec9035c:   }
1:ec9035c: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:335a993
/////////////////////////////////////////////////////////////////////////
1:   private final long hash;
/////////////////////////////////////////////////////////////////////////
1:         hash += 1L << element.index();
/////////////////////////////////////////////////////////////////////////
1:     HashedVector v = (HashedVector) o;
1:     return v.hash == this.hash && this.minus(v).norm(1) == 0;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1:   protected static final int INVALID_INDEX = -1;
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     for (Element element : projection.times(vector).nonZeroes()) {
author:dfilimon
-------------------------------------------------------------------------------
commit:ec9035c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.neighborhood;
1: 
0: import java.util.Iterator;
1: 
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.WeightedVector;
1: 
1: /**
1:  * Decorates a weighted vector with a locality sensitive hash.
1:  *
1:  * The LSH function implemented is the random hyperplane based hash function.
1:  * See "Similarity Estimation Techniques from Rounding Algorithms" by Moses S. Charikar, section 3.
1:  * http://www.cs.princeton.edu/courses/archive/spring04/cos598B/bib/CharikarEstim.pdf
1:  */
1: public class HashedVector extends WeightedVector {
0:   protected static int INVALID_INDEX = -1;
1: 
1:   /**
1:    * Value of the locality sensitive hash. It is 64 bit.
1:    */
0:   private long hash;
1: 
1:   public HashedVector(Vector vector, long hash, int index) {
1:     super(vector, 1, index);
1:     this.hash = hash;
1:   }
1: 
1:   public HashedVector(Vector vector, Matrix projection, int index, long mask) {
1:     super(vector, 1, index);
1:     this.hash = mask & computeHash64(vector, projection);
1:   }
1: 
1:   public HashedVector(WeightedVector weightedVector, Matrix projection, long mask) {
1:     super(weightedVector.getVector(), weightedVector.getWeight(), weightedVector.getIndex());
1:     this.hash = mask & computeHash64(weightedVector, projection);
1:   }
1: 
1:   public static long computeHash64(Vector vector, Matrix projection) {
1:     long hash = 0;
0:     Iterator<Element> iterator = projection.times(vector).iterateNonZero();
0:     Element element;
0:     while (iterator.hasNext()) {
0:       element = iterator.next();
1:       if (element.get() > 0) {
0:         hash += 1 << element.index();
1:       }
1:     }
1:     return hash;
1:   }
1: 
1:   public static HashedVector hash(WeightedVector v, Matrix projection) {
1:     return hash(v, projection, 0);
1:   }
1: 
1:   public static HashedVector hash(WeightedVector v, Matrix projection, long mask) {
1:     return new HashedVector(v, projection, mask);
1:   }
1: 
1:   public int hammingDistance(long otherHash) {
1:     return Long.bitCount(hash ^ otherHash);
1:   }
1: 
1:   public long getHash() {
1:     return hash;
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     return String.format("index=%d, hash=%08x, v=%s", getIndex(), hash, getVector());
1:   }
1: 
1:   @Override
1:   public boolean equals(Object o) {
1:     if (this == o) {
1:       return true;
1:     }
1:     if (!(o instanceof HashedVector)) {
1:       return o instanceof Vector && this.minus((Vector) o).norm(1) == 0;
0:     } else {
0:       HashedVector v = (HashedVector) o;
0:       return v.hash == this.hash && this.minus(v).norm(1) == 0;
1:     }
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     int result = super.hashCode();
1:     result = 31 * result + (int) (hash ^ (hash >>> 32));
1:     return result;
1:   }
1: }
============================================================================