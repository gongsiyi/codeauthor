1:4fbfbc6: /*
1:faa82ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:faa82ce:  * contributor license agreements.  See the NOTICE file distributed with
1:faa82ce:  * this work for additional information regarding copyright ownership.
1:faa82ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:faa82ce:  * (the "License"); you may not use this file except in compliance with
1:faa82ce:  * the License.  You may obtain a copy of the License at
2:faa82ce:  *
1:faa82ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:faa82ce:  *
1:faa82ce:  * Unless required by applicable law or agreed to in writing, software
1:faa82ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:faa82ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:faa82ce:  * See the License for the specific language governing permissions and
1:faa82ce:  * limitations under the License.
1:faa82ce:  */
1:faa82ce: 
1:faa82ce: package org.apache.mahout.vectorizer;
1:faa82ce: 
1:faa82ce: import org.apache.hadoop.conf.Configuration;
1:faa82ce: 
2:faa82ce: /**
1:faa82ce:  * The config for a Vectorizer.  Not all implementations need use all variables.
1:4fbfbc6:  */
1:4fbfbc6: public final class VectorizerConfig {
1:faa82ce: 
1:4fbfbc6:   private Configuration conf;
1:4fbfbc6:   private String analyzerClassName;
1:4fbfbc6:   private String encoderName;
1:4fbfbc6:   private boolean sequentialAccess;
1:4fbfbc6:   private boolean namedVectors;
1:4fbfbc6:   private int cardinality;
1:4fbfbc6:   private String encoderClass;
1:d8e91f9:   private String tfDirName;
1:4fbfbc6:   private int minSupport;
1:4fbfbc6:   private int maxNGramSize;
1:4fbfbc6:   private float minLLRValue;
1:4fbfbc6:   private float normPower;
1:4fbfbc6:   private boolean logNormalize;
1:4fbfbc6:   private int numReducers;
1:4fbfbc6:   private int chunkSizeInMegabytes;
1:faa82ce: 
1:4fbfbc6:   public VectorizerConfig(Configuration conf,
1:4fbfbc6:                           String analyzerClassName,
1:4fbfbc6:                           String encoderClass,
1:4fbfbc6:                           String encoderName,
1:4fbfbc6:                           boolean sequentialAccess,
1:4fbfbc6:                           boolean namedVectors,
1:4fbfbc6:                           int cardinality) {
1:faa82ce:     this.conf = conf;
1:faa82ce:     this.analyzerClassName = analyzerClassName;
1:faa82ce:     this.encoderClass = encoderClass;
1:faa82ce:     this.encoderName = encoderName;
1:faa82ce:     this.sequentialAccess = sequentialAccess;
1:faa82ce:     this.namedVectors = namedVectors;
1:faa82ce:     this.cardinality = cardinality;
1:faa82ce:   }
1:d8e91f9: 
1:4fbfbc6:   public Configuration getConf() {
1:4fbfbc6:     return conf;
1:faa82ce:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setConf(Configuration conf) {
1:4fbfbc6:     this.conf = conf;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public String getAnalyzerClassName() {
1:4fbfbc6:     return analyzerClassName;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setAnalyzerClassName(String analyzerClassName) {
1:4fbfbc6:     this.analyzerClassName = analyzerClassName;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public String getEncoderName() {
1:4fbfbc6:     return encoderName;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setEncoderName(String encoderName) {
1:4fbfbc6:     this.encoderName = encoderName;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public boolean isSequentialAccess() {
1:4fbfbc6:     return sequentialAccess;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setSequentialAccess(boolean sequentialAccess) {
1:4fbfbc6:     this.sequentialAccess = sequentialAccess;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6: 
1:d8e91f9:   public String getTfDirName() {
1:d8e91f9:     return tfDirName;
1:d8e91f9:   }
1:d8e91f9: 
1:d8e91f9:   public void setTfDirName(String tfDirName) {
1:d8e91f9:     this.tfDirName = tfDirName;
1:d8e91f9:   }
1:d8e91f9: 
1:4fbfbc6:   public boolean isNamedVectors() {
1:4fbfbc6:     return namedVectors;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setNamedVectors(boolean namedVectors) {
1:4fbfbc6:     this.namedVectors = namedVectors;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public int getCardinality() {
1:4fbfbc6:     return cardinality;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setCardinality(int cardinality) {
1:4fbfbc6:     this.cardinality = cardinality;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public String getEncoderClass() {
1:4fbfbc6:     return encoderClass;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setEncoderClass(String encoderClass) {
1:4fbfbc6:     this.encoderClass = encoderClass;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public int getMinSupport() {
1:4fbfbc6:     return minSupport;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setMinSupport(int minSupport) {
1:4fbfbc6:     this.minSupport = minSupport;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public int getMaxNGramSize() {
1:4fbfbc6:     return maxNGramSize;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setMaxNGramSize(int maxNGramSize) {
1:4fbfbc6:     this.maxNGramSize = maxNGramSize;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public float getMinLLRValue() {
1:4fbfbc6:     return minLLRValue;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setMinLLRValue(float minLLRValue) {
1:4fbfbc6:     this.minLLRValue = minLLRValue;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public float getNormPower() {
1:4fbfbc6:     return normPower;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setNormPower(float normPower) {
1:4fbfbc6:     this.normPower = normPower;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public boolean isLogNormalize() {
1:4fbfbc6:     return logNormalize;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setLogNormalize(boolean logNormalize) {
1:4fbfbc6:     this.logNormalize = logNormalize;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public int getNumReducers() {
1:4fbfbc6:     return numReducers;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setNumReducers(int numReducers) {
1:4fbfbc6:     this.numReducers = numReducers;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public int getChunkSizeInMegabytes() {
1:4fbfbc6:     return chunkSizeInMegabytes;
1:4fbfbc6:   }
1:4fbfbc6: 
1:4fbfbc6:   public void setChunkSizeInMegabytes(int chunkSizeInMegabytes) {
1:4fbfbc6:     this.chunkSizeInMegabytes = chunkSizeInMegabytes;
1:4fbfbc6:   }
1:4fbfbc6: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:d8e91f9
/////////////////////////////////////////////////////////////////////////
1:   private String tfDirName;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public String getTfDirName() {
1:     return tfDirName;
1:   }
1: 
1:   public void setTfDirName(String tfDirName) {
1:     this.tfDirName = tfDirName;
1:   }
1: 
commit:faa82ce
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.vectorizer;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import org.apache.hadoop.conf.Configuration;
1: 
1: /**
1:  * The config for a Vectorizer.  Not all implementations need use all variables.
1:  *
0:  **/
0: public class VectorizerConfig {
0:   public Configuration conf;
0:   public String analyzerClassName;
0:   public String encoderName;
0:   public boolean sequentialAccess, namedVectors;
0:   public int cardinality;
0:   public String encoderClass;
0:   public int minSupport;
0:   public int maxNGramSize;
0:   public float minLLRValue;
0:   public float normPower;
0:   public boolean logNormalize;
0:   public int numReducers;
0:   public int chunkSizeInMegabytes;
1: 
1: 
0:   public VectorizerConfig(Configuration conf, String analyzerClassName, String encoderClass, String encoderName, boolean sequentialAccess, boolean namedVectors, int cardinality) {
1:     this.conf = conf;
1:     this.analyzerClassName = analyzerClassName;
1:     this.encoderClass = encoderClass;
1:     this.encoderName = encoderName;
1:     this.sequentialAccess = sequentialAccess;
1:     this.namedVectors = namedVectors;
1:     this.cardinality = cardinality;
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.vectorizer;
1:  */
1: public final class VectorizerConfig {
1:   private Configuration conf;
1:   private String analyzerClassName;
1:   private String encoderName;
1:   private boolean sequentialAccess;
1:   private boolean namedVectors;
1:   private int cardinality;
1:   private String encoderClass;
1:   private int minSupport;
1:   private int maxNGramSize;
1:   private float minLLRValue;
1:   private float normPower;
1:   private boolean logNormalize;
1:   private int numReducers;
1:   private int chunkSizeInMegabytes;
1:   public VectorizerConfig(Configuration conf,
1:                           String analyzerClassName,
1:                           String encoderClass,
1:                           String encoderName,
1:                           boolean sequentialAccess,
1:                           boolean namedVectors,
1:                           int cardinality) {
/////////////////////////////////////////////////////////////////////////
1: 
1:   public Configuration getConf() {
1:     return conf;
1:   }
1: 
1:   public void setConf(Configuration conf) {
1:     this.conf = conf;
1:   }
1: 
1:   public String getAnalyzerClassName() {
1:     return analyzerClassName;
1:   }
1: 
1:   public void setAnalyzerClassName(String analyzerClassName) {
1:     this.analyzerClassName = analyzerClassName;
1:   }
1: 
1:   public String getEncoderName() {
1:     return encoderName;
1:   }
1: 
1:   public void setEncoderName(String encoderName) {
1:     this.encoderName = encoderName;
1:   }
1: 
1:   public boolean isSequentialAccess() {
1:     return sequentialAccess;
1:   }
1: 
1:   public void setSequentialAccess(boolean sequentialAccess) {
1:     this.sequentialAccess = sequentialAccess;
1:   }
1: 
1:   public boolean isNamedVectors() {
1:     return namedVectors;
1:   }
1: 
1:   public void setNamedVectors(boolean namedVectors) {
1:     this.namedVectors = namedVectors;
1:   }
1: 
1:   public int getCardinality() {
1:     return cardinality;
1:   }
1: 
1:   public void setCardinality(int cardinality) {
1:     this.cardinality = cardinality;
1:   }
1: 
1:   public String getEncoderClass() {
1:     return encoderClass;
1:   }
1: 
1:   public void setEncoderClass(String encoderClass) {
1:     this.encoderClass = encoderClass;
1:   }
1: 
1:   public int getMinSupport() {
1:     return minSupport;
1:   }
1: 
1:   public void setMinSupport(int minSupport) {
1:     this.minSupport = minSupport;
1:   }
1: 
1:   public int getMaxNGramSize() {
1:     return maxNGramSize;
1:   }
1: 
1:   public void setMaxNGramSize(int maxNGramSize) {
1:     this.maxNGramSize = maxNGramSize;
1:   }
1: 
1:   public float getMinLLRValue() {
1:     return minLLRValue;
1:   }
1: 
1:   public void setMinLLRValue(float minLLRValue) {
1:     this.minLLRValue = minLLRValue;
1:   }
1: 
1:   public float getNormPower() {
1:     return normPower;
1:   }
1: 
1:   public void setNormPower(float normPower) {
1:     this.normPower = normPower;
1:   }
1: 
1:   public boolean isLogNormalize() {
1:     return logNormalize;
1:   }
1: 
1:   public void setLogNormalize(boolean logNormalize) {
1:     this.logNormalize = logNormalize;
1:   }
1: 
1:   public int getNumReducers() {
1:     return numReducers;
1:   }
1: 
1:   public void setNumReducers(int numReducers) {
1:     this.numReducers = numReducers;
1:   }
1: 
1:   public int getChunkSizeInMegabytes() {
1:     return chunkSizeInMegabytes;
1:   }
1: 
1:   public void setChunkSizeInMegabytes(int chunkSizeInMegabytes) {
1:     this.chunkSizeInMegabytes = chunkSizeInMegabytes;
1:   }
============================================================================