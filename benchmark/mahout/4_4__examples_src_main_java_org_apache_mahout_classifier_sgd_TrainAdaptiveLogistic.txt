1:a515335: /*
1:a515335:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a515335:  * contributor license agreements.  See the NOTICE file distributed with
1:a515335:  * this work for additional information regarding copyright ownership.
1:a515335:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a515335:  * (the "License"); you may not use this file except in compliance with
1:a515335:  * the License.  You may obtain a copy of the License at
1:a515335:  *
1:a515335:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a515335:  *
1:a515335:  * Unless required by applicable law or agreed to in writing, software
1:a515335:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a515335:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a515335:  * See the License for the specific language governing permissions and
1:a515335:  * limitations under the License.
1:a515335:  */
5:a515335: 
1:a515335: package org.apache.mahout.classifier.sgd;
1:a515335: 
1:4ef9d31: import com.google.common.io.Resources;
1:4ef9d31: import org.apache.commons.cli2.CommandLine;
1:4ef9d31: import org.apache.commons.cli2.Group;
1:4ef9d31: import org.apache.commons.cli2.Option;
1:4ef9d31: import org.apache.commons.cli2.builder.ArgumentBuilder;
1:4ef9d31: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1:4ef9d31: import org.apache.commons.cli2.builder.GroupBuilder;
1:4ef9d31: import org.apache.commons.cli2.commandline.Parser;
1:4ef9d31: import org.apache.commons.cli2.util.HelpFormatter;
1:4ef9d31: import org.apache.commons.io.Charsets;
1:4ef9d31: import org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper;
1:4ef9d31: import org.apache.mahout.ep.State;
1:4ef9d31: import org.apache.mahout.math.RandomAccessSparseVector;
1:4ef9d31: import org.apache.mahout.math.Vector;
1:4ef9d31: 
1:a515335: import java.io.BufferedReader;
1:a515335: import java.io.File;
1:a515335: import java.io.FileInputStream;
1:a515335: import java.io.FileOutputStream;
1:a515335: import java.io.IOException;
1:a515335: import java.io.InputStream;
1:a515335: import java.io.InputStreamReader;
1:a515335: import java.io.OutputStream;
1:229aeff: import java.io.OutputStreamWriter;
1:a515335: import java.io.PrintWriter;
1:4ef9d31: import java.util.ArrayList;
1:a515335: import java.util.List;
1:a515335: import java.util.Locale;
1:a515335: 
1:a515335: public final class TrainAdaptiveLogistic {
1:a515335: 
1:a515335:   private static String inputFile;
1:a515335:   private static String outputFile;
1:a515335:   private static AdaptiveLogisticModelParameters lmp;
1:a515335:   private static int passes;
1:a515335:   private static boolean showperf;
1:a515335:   private static int skipperfnum = 99;
1:a515335:   private static AdaptiveLogisticRegression model;
1:a515335: 
1:a515335:   private TrainAdaptiveLogistic() {
1:a515335:   }
1:a515335: 
1:d2dd884:   public static void main(String[] args) throws Exception {
1:229aeff:     mainToOutput(args, new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
1:a515335:   }
1:a515335: 
1:d2dd884:   static void mainToOutput(String[] args, PrintWriter output) throws Exception {
1:a515335:     if (parseArgs(args)) {
1:a515335: 
1:a515335:       CsvRecordFactory csv = lmp.getCsvRecordFactory();
1:a515335:       model = lmp.createAdaptiveLogisticRegression();
1:b59e468:       State<Wrapper, CrossFoldLearner> best;
1:a515335:       CrossFoldLearner learner = null;
1:a515335: 
1:a515335:       int k = 0;
1:a515335:       for (int pass = 0; pass < passes; pass++) {
1:a515335:         BufferedReader in = open(inputFile);
1:a515335: 
1:a515335:         // read variable names
1:a515335:         csv.firstLine(in.readLine());
1:a515335: 
1:a515335:         String line = in.readLine();
1:a515335:         while (line != null) {
1:a515335:           // for each new line, get target and predictors
1:a515335:           Vector input = new RandomAccessSparseVector(lmp.getNumFeatures());
1:4fbfbc6:           int targetValue = csv.processLine(line, input);
1:4fbfbc6: 
1:a515335:           // update model
1:a515335:           model.train(targetValue, input);
1:a515335:           k++;
1:a515335: 
1:a515335:           if (showperf && (k % (skipperfnum + 1) == 0)) {
1:a515335: 
1:a515335:             best = model.getBest();
1:a515335:             if (best != null) {
1:a515335:               learner = best.getPayload().getLearner();
1:a515335:             }
1:a515335:             if (learner != null) {
1:a515335:               double averageCorrect = learner.percentCorrect();
1:a515335:               double averageLL = learner.logLikelihood();
1:bdb1c48:               output.printf("%d\t%.3f\t%.2f%n",
1:a515335:                             k, averageLL, averageCorrect * 100);
1:a515335:             } else {
2:a515335:               output.printf(Locale.ENGLISH,
1:bdb1c48:                             "%10d %2d %s%n", k, targetValue,
1:a515335:                             "AdaptiveLogisticRegression has not found a good model ......");
1:a515335:             }
1:a515335:           }
1:a515335:           line = in.readLine();
1:a515335:         }
1:a515335:         in.close();
1:a515335:       }
1:a515335: 
1:a515335:       best = model.getBest();
1:a515335:       if (best != null) {
1:a515335:         learner = best.getPayload().getLearner();
1:a515335:       }
1:a515335:       if (learner == null) {
1:229aeff:         output.println("AdaptiveLogisticRegression has failed to train a model.");
1:a515335:         return;
1:a515335:       }
1:a515335: 
1:4ef9d31:       try (OutputStream modelOutput = new FileOutputStream(outputFile)) {
1:a515335:         lmp.saveTo(modelOutput);
1:a515335:       }
1:a515335: 
1:a515335:       OnlineLogisticRegression lr = learner.getModels().get(0);
1:229aeff:       output.println(lmp.getNumFeatures());
1:229aeff:       output.println(lmp.getTargetVariable() + " ~ ");
1:a515335:       String sep = "";
1:a515335:       for (String v : csv.getTraceDictionary().keySet()) {
1:a515335:         double weight = predictorWeight(lr, 0, csv, v);
1:a515335:         if (weight != 0) {
1:a515335:           output.printf(Locale.ENGLISH, "%s%.3f*%s", sep, weight, v);
1:a515335:           sep = " + ";
1:a515335:         }
1:a515335:       }
1:bdb1c48:       output.printf("%n");
1:a515335: 
1:a515335:       for (int row = 0; row < lr.getBeta().numRows(); row++) {
1:a515335:         for (String key : csv.getTraceDictionary().keySet()) {
1:a515335:           double weight = predictorWeight(lr, row, csv, key);
1:a515335:           if (weight != 0) {
1:bdb1c48:             output.printf(Locale.ENGLISH, "%20s %.5f%n", key, weight);
1:a515335:           }
1:a515335:         }
1:a515335:         for (int column = 0; column < lr.getBeta().numCols(); column++) {
1:a515335:           output.printf(Locale.ENGLISH, "%15.9f ", lr.getBeta().get(row, column));
1:a515335:         }
1:a515335:         output.println();
1:a515335:       }
1:a515335:     }
1:a515335: 
1:a515335:   }
1:a515335: 
1:a515335:   private static double predictorWeight(OnlineLogisticRegression lr, int row, RecordFactory csv, String predictor) {
1:a515335:     double weight = 0;
1:a515335:     for (Integer column : csv.getTraceDictionary().get(predictor)) {
1:a515335:       weight += lr.getBeta().get(row, column);
1:a515335:     }
1:a515335:     return weight;
1:a515335:   }
1:a515335: 
1:a515335:   private static boolean parseArgs(String[] args) {
1:a515335:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
1:a515335: 
1:a515335:     Option help = builder.withLongName("help")
1:a515335:         .withDescription("print this list").create();
1:a515335: 
1:a515335:     Option quiet = builder.withLongName("quiet")
1:a515335:         .withDescription("be extra quiet").create();
1:a515335:     
1:a515335:    
1:a515335:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:a515335:     Option showperf = builder
1:a515335:       .withLongName("showperf")
1:a515335:       .withDescription("output performance measures during training")
2:a515335:       .create();
1:a515335: 
1:a515335:     Option inputFile = builder
1:a515335:         .withLongName("input")
2:a515335:         .withRequired(true)
2:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("input").withMaximum(1)
2:a515335:                 .create())
1:a515335:         .withDescription("where to get training data").create();
1:a515335: 
1:a515335:     Option outputFile = builder
1:a515335:         .withLongName("output")
1:a515335:         .withRequired(true)
1:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("output").withMaximum(1)
1:a515335:                 .create())
1:a515335:         .withDescription("where to write the model content").create();
1:a515335: 
1:a515335:     Option threads = builder.withLongName("threads")
1:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("threads").withDefault("4").create())
1:a515335:         .withDescription("the number of threads AdaptiveLogisticRegression uses")
1:a515335:         .create();
1:a515335: 
1:a515335: 
1:a515335:     Option predictors = builder.withLongName("predictors")
1:a515335:         .withRequired(true)
1:a515335:         .withArgument(argumentBuilder.withName("predictors").create())
1:a515335:         .withDescription("a list of predictor variables").create();
1:a515335: 
1:a515335:     Option types = builder
1:a515335:         .withLongName("types")
1:a515335:         .withRequired(true)
1:a515335:         .withArgument(argumentBuilder.withName("types").create())
1:a515335:         .withDescription(
1:a515335:             "a list of predictor variable types (numeric, word, or text)")
1:a515335:         .create();
1:a515335: 
1:a515335:     Option target = builder
1:a515335:         .withLongName("target")
1:a515335:         .withDescription("the name of the target variable")    
1:a515335:         .withRequired(true)    
1:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("target").withMaximum(1)
1:a515335:                 .create())
1:a515335:          .create();
1:a515335:     
1:a515335:     Option targetCategories = builder
1:6d16230:       .withLongName("categories")
1:6d16230:       .withDescription("the number of target categories to be considered")
1:6d16230:       .withRequired(true)
1:6d16230:       .withArgument(argumentBuilder.withName("categories").withMaximum(1).create())
1:6d16230:       .create();
1:a515335:     
1:a515335: 
1:a515335:     Option features = builder
1:a515335:         .withLongName("features")
1:a515335:         .withDescription("the number of internal hashed features to use")
1:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("numFeatures")
1:a515335:                 .withDefault("1000").withMaximum(1).create())        
1:a515335:         .create();
1:a515335: 
1:a515335:     Option passes = builder
1:a515335:         .withLongName("passes")
1:a515335:         .withDescription("the number of times to pass over the input data")
1:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("passes").withDefault("2")
1:a515335:                 .withMaximum(1).create())        
1:a515335:         .create();
1:a515335: 
1:a515335:     Option interval = builder.withLongName("interval")
1:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("interval").withDefault("500").create())
1:a515335:         .withDescription("the interval property of AdaptiveLogisticRegression")
1:a515335:         .create();
1:a515335: 
1:a515335:     Option window = builder.withLongName("window")
1:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("window").withDefault("800").create())
1:a515335:         .withDescription("the average propery of AdaptiveLogisticRegression")
1:a515335:         .create();
1:a515335: 
1:a515335:     Option skipperfnum = builder.withLongName("skipperfnum")
1:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("skipperfnum").withDefault("99").create())
1:a515335:         .withDescription("show performance measures every (skipperfnum + 1) rows")
1:a515335:         .create();
1:a515335: 
1:a515335:     Option prior = builder.withLongName("prior")
1:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("prior").withDefault("L1").create())
1:a515335:         .withDescription("the prior algorithm to use: L1, L2, ebp, tp, up")
1:a515335:         .create();
1:a515335: 
1:a515335:     Option priorOption = builder.withLongName("prioroption")
1:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("prioroption").create())
1:a515335:         .withDescription("constructor parameter for ElasticBandPrior and TPrior")
1:a515335:         .create();
1:a515335: 
1:a515335:     Option auc = builder.withLongName("auc")
1:a515335:         .withArgument(
1:a515335:             argumentBuilder.withName("auc").withDefault("global").create())
1:a515335:         .withDescription("the auc to use: global or grouped")
1:a515335:         .create();
1:a515335: 
1:a515335:     
1:a515335: 
1:a515335:     Group normalArgs = new GroupBuilder().withOption(help)
1:a515335:         .withOption(quiet).withOption(inputFile).withOption(outputFile)
1:a515335:         .withOption(target).withOption(targetCategories)
1:a515335:         .withOption(predictors).withOption(types).withOption(passes)
1:a515335:         .withOption(interval).withOption(window).withOption(threads)
1:a515335:         .withOption(prior).withOption(features).withOption(showperf)
1:a515335:         .withOption(skipperfnum).withOption(priorOption).withOption(auc)
1:a515335:         .create();
1:a515335: 
1:a515335:     Parser parser = new Parser();
1:a515335:     parser.setHelpOption(help);
1:a515335:     parser.setHelpTrigger("--help");
1:a515335:     parser.setGroup(normalArgs);
1:a515335:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
1:a515335:     CommandLine cmdLine = parser.parseAndHelp(args);
1:a515335: 
1:a515335:     if (cmdLine == null) {
1:a515335:       return false;
1:a515335:     }
1:a515335: 
1:a515335:     TrainAdaptiveLogistic.inputFile = getStringArgument(cmdLine, inputFile);
1:a515335:     TrainAdaptiveLogistic.outputFile = getStringArgument(cmdLine,
1:a515335:                                                          outputFile);
1:a515335: 
1:4ef9d31:     List<String> typeList = new ArrayList<>();
1:a515335:     for (Object x : cmdLine.getValues(types)) {
1:a515335:       typeList.add(x.toString());
1:a515335:     }
1:a515335: 
1:4ef9d31:     List<String> predictorList = new ArrayList<>();
1:a515335:     for (Object x : cmdLine.getValues(predictors)) {
1:a515335:       predictorList.add(x.toString());
1:a515335:     }
1:a515335: 
1:a515335:     lmp = new AdaptiveLogisticModelParameters();
1:a515335:     lmp.setTargetVariable(getStringArgument(cmdLine, target));
1:a515335:     lmp.setMaxTargetCategories(getIntegerArgument(cmdLine, targetCategories));
1:a515335:     lmp.setNumFeatures(getIntegerArgument(cmdLine, features));
1:a515335:     lmp.setInterval(getIntegerArgument(cmdLine, interval));
1:a515335:     lmp.setAverageWindow(getIntegerArgument(cmdLine, window));
1:a515335:     lmp.setThreads(getIntegerArgument(cmdLine, threads));
1:a515335:     lmp.setAuc(getStringArgument(cmdLine, auc));
1:a515335:     lmp.setPrior(getStringArgument(cmdLine, prior));
1:a515335:     if (cmdLine.getValue(priorOption) != null) {
1:a515335:       lmp.setPriorOption(getDoubleArgument(cmdLine, priorOption));
1:a515335:     }
1:a515335:     lmp.setTypeMap(predictorList, typeList);
1:a515335:     TrainAdaptiveLogistic.showperf = getBooleanArgument(cmdLine, showperf);
1:a515335:     TrainAdaptiveLogistic.skipperfnum = getIntegerArgument(cmdLine, skipperfnum);
1:a515335:     TrainAdaptiveLogistic.passes = getIntegerArgument(cmdLine, passes);
1:a515335: 
1:a515335:     lmp.checkParameters();
1:a515335: 
1:a515335:     return true;
1:a515335:   }
1:a515335: 
1:a515335:   private static String getStringArgument(CommandLine cmdLine,
1:a515335:                                           Option inputFile) {
1:a515335:     return (String) cmdLine.getValue(inputFile);
1:a515335:   }
1:a515335: 
1:a515335:   private static boolean getBooleanArgument(CommandLine cmdLine, Option option) {
1:a515335:     return cmdLine.hasOption(option);
1:a515335:   }
1:a515335: 
1:a515335:   private static int getIntegerArgument(CommandLine cmdLine, Option features) {
1:a515335:     return Integer.parseInt((String) cmdLine.getValue(features));
1:a515335:   }
1:a515335: 
1:a515335:   private static double getDoubleArgument(CommandLine cmdLine, Option op) {
1:a515335:     return Double.parseDouble((String) cmdLine.getValue(op));
1:a515335:   }
1:a515335: 
1:a515335:   public static AdaptiveLogisticRegression getModel() {
1:a515335:     return model;
1:a515335:   }
1:a515335: 
1:a515335:   public static LogisticModelParameters getParameters() {
1:a515335:     return lmp;
1:a515335:   }
1:a515335: 
1:6d16230:   static BufferedReader open(String inputFile) throws IOException {
1:a515335:     InputStream in;
2:a515335:     try {
1:a515335:       in = Resources.getResource(inputFile).openStream();
1:a515335:     } catch (IllegalArgumentException e) {
1:a515335:       in = new FileInputStream(new File(inputFile));
1:a515335:     }
1:a515335:     return new BufferedReader(new InputStreamReader(in, Charsets.UTF_8));
1:a515335:   }
1:a515335:    
1:a515335: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Resources;
1: import org.apache.commons.cli2.CommandLine;
1: import org.apache.commons.cli2.Group;
1: import org.apache.commons.cli2.Option;
1: import org.apache.commons.cli2.builder.ArgumentBuilder;
1: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1: import org.apache.commons.cli2.builder.GroupBuilder;
1: import org.apache.commons.cli2.commandline.Parser;
1: import org.apache.commons.cli2.util.HelpFormatter;
1: import org.apache.commons.io.Charsets;
1: import org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper;
1: import org.apache.mahout.ep.State;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: 
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:       try (OutputStream modelOutput = new FileOutputStream(outputFile)) {
/////////////////////////////////////////////////////////////////////////
1:     List<String> typeList = new ArrayList<>();
1:     List<String> predictorList = new ArrayList<>();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:               output.printf("%d\t%.3f\t%.2f%n",
1:                             "%10d %2d %s%n", k, targetValue,
/////////////////////////////////////////////////////////////////////////
1:       output.printf("%n");
1:             output.printf(Locale.ENGLISH, "%20s %.5f%n", key, weight);
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:       .withLongName("categories")
1:       .withDescription("the number of target categories to be considered")
1:       .withRequired(true)
1:       .withArgument(argumentBuilder.withName("categories").withMaximum(1).create())
1:       .create();
/////////////////////////////////////////////////////////////////////////
1:   static BufferedReader open(String inputFile) throws IOException {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: import java.io.OutputStreamWriter;
/////////////////////////////////////////////////////////////////////////
1:     mainToOutput(args, new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
/////////////////////////////////////////////////////////////////////////
1:         output.println("AdaptiveLogisticRegression has failed to train a model.");
/////////////////////////////////////////////////////////////////////////
1:       output.println(lmp.getNumFeatures());
1:       output.println(lmp.getTargetVariable() + " ~ ");
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1:           int targetValue = csv.processLine(line, input);
1: 
commit:b59e468
/////////////////////////////////////////////////////////////////////////
1:       State<Wrapper, CrossFoldLearner> best;
commit:23722bc
/////////////////////////////////////////////////////////////////////////
0:     mainToOutput(args, new PrintWriter(System.out, true));
commit:a515335
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.io.OutputStream;
1: import java.io.PrintWriter;
1: import java.util.List;
1: import java.util.Locale;
1: 
0: import org.apache.commons.cli2.CommandLine;
0: import org.apache.commons.cli2.Group;
0: import org.apache.commons.cli2.Option;
0: import org.apache.commons.cli2.builder.ArgumentBuilder;
0: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
0: import org.apache.commons.cli2.builder.GroupBuilder;
0: import org.apache.commons.cli2.commandline.Parser;
0: import org.apache.commons.cli2.util.HelpFormatter;
0: import org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper;
0: import org.apache.mahout.ep.State;
0: import org.apache.mahout.math.RandomAccessSparseVector;
0: import org.apache.mahout.math.Vector;
1: 
0: import com.google.common.base.Charsets;
0: import com.google.common.collect.Lists;
0: import com.google.common.io.Resources;
1: 
1: public final class TrainAdaptiveLogistic {
1: 
1:   private static String inputFile;
1:   private static String outputFile;
1:   private static AdaptiveLogisticModelParameters lmp;
1:   private static int passes;
1:   private static boolean showperf;
1:   private static int skipperfnum = 99;
1:   private static AdaptiveLogisticRegression model;
1: 
1:   private TrainAdaptiveLogistic() {
1:   }
1: 
0:   public static void main(String[] args) throws IOException {
0:     mainToOutput(args, new PrintWriter(System.out));
1:   }
1: 
0:   static void mainToOutput(String[] args, PrintWriter output) throws IOException {
1:     if (parseArgs(args)) {
1: 
1:       CsvRecordFactory csv = lmp.getCsvRecordFactory();
1:       model = lmp.createAdaptiveLogisticRegression();
0:       State<Wrapper, CrossFoldLearner> best = null;
1:       CrossFoldLearner learner = null;
1: 
1:       int k = 0;
1:       for (int pass = 0; pass < passes; pass++) {
1:         BufferedReader in = open(inputFile);
1: 
1:         // read variable names
1:         csv.firstLine(in.readLine());
1: 
1:         String line = in.readLine();
1: 
1:         while (line != null) {
1:           // for each new line, get target and predictors
1:           Vector input = new RandomAccessSparseVector(lmp.getNumFeatures());
0:           int targetValue = csv.processLine(line, input);
1:           // update model
1:           model.train(targetValue, input);
1:           k++;
1: 
1:           if (showperf && (k % (skipperfnum + 1) == 0)) {
1: 
1:             best = model.getBest();
1:             if (best != null) {
1:               learner = best.getPayload().getLearner();
1:             }
1:             if (learner != null) {
1:               double averageCorrect = learner.percentCorrect();
1:               double averageLL = learner.logLikelihood();
0:               output.printf("%d\t%.3f\t%.2f\n",
1:                             k, averageLL, averageCorrect * 100);
1:             } else {
1:               output.printf(Locale.ENGLISH,
0:                             "%10d %2d %s\n", k, targetValue,
1:                             "AdaptiveLogisticRegression has not found a good model ......");
1:             }
1:           }
1:           line = in.readLine();
1:         }
1:         in.close();
1:       }
1: 
1:       best = model.getBest();
1:       if (best != null) {
1:         learner = best.getPayload().getLearner();
1:       }
1:       if (learner == null) {
1:         output.printf(Locale.ENGLISH,
0:                       "%s\n", "AdaptiveLogisticRegression has not successfully trained any model.");
1:         return;
1:       }
1: 
1: 
0:       OutputStream modelOutput = new FileOutputStream(outputFile);
1:       try {
1:         lmp.saveTo(modelOutput);
0:       } finally {
0:         modelOutput.close();
1:       }
1: 
1:       OnlineLogisticRegression lr = learner.getModels().get(0);
0:       output.printf(Locale.ENGLISH, "%d\n", lmp.getNumFeatures());
0:       output.printf(Locale.ENGLISH, "%s ~ ", lmp.getTargetVariable());
1:       String sep = "";
1:       for (String v : csv.getTraceDictionary().keySet()) {
1:         double weight = predictorWeight(lr, 0, csv, v);
1:         if (weight != 0) {
1:           output.printf(Locale.ENGLISH, "%s%.3f*%s", sep, weight, v);
1:           sep = " + ";
1:         }
1:       }
0:       output.printf("\n");
1: 
1:       for (int row = 0; row < lr.getBeta().numRows(); row++) {
1:         for (String key : csv.getTraceDictionary().keySet()) {
1:           double weight = predictorWeight(lr, row, csv, key);
1:           if (weight != 0) {
0:             output.printf(Locale.ENGLISH, "%20s %.5f\n", key, weight);
1:           }
1:         }
1:         for (int column = 0; column < lr.getBeta().numCols(); column++) {
1:           output.printf(Locale.ENGLISH, "%15.9f ", lr.getBeta().get(row, column));
1:         }
1:         output.println();
1:       }
1:     }
1: 
1:   }
1: 
1:   private static double predictorWeight(OnlineLogisticRegression lr, int row, RecordFactory csv, String predictor) {
1:     double weight = 0;
1:     for (Integer column : csv.getTraceDictionary().get(predictor)) {
1:       weight += lr.getBeta().get(row, column);
1:     }
1:     return weight;
1:   }
1: 
1:   private static boolean parseArgs(String[] args) {
1:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
1: 
1:     Option help = builder.withLongName("help")
1:         .withDescription("print this list").create();
1: 
1:     Option quiet = builder.withLongName("quiet")
1:         .withDescription("be extra quiet").create();
1:     
1:    
1:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:     Option showperf = builder
1:       .withLongName("showperf")
1:       .withDescription("output performance measures during training")
1:       .create();
1: 
1:     Option inputFile = builder
1:         .withLongName("input")
1:         .withRequired(true)
1:         .withArgument(
1:             argumentBuilder.withName("input").withMaximum(1)
1:                 .create())
1:         .withDescription("where to get training data").create();
1: 
1:     Option outputFile = builder
1:         .withLongName("output")
1:         .withRequired(true)
1:         .withArgument(
1:             argumentBuilder.withName("output").withMaximum(1)
1:                 .create())
1:         .withDescription("where to write the model content").create();
1: 
1:     Option threads = builder.withLongName("threads")
1:         .withArgument(
1:             argumentBuilder.withName("threads").withDefault("4").create())
1:         .withDescription("the number of threads AdaptiveLogisticRegression uses")
1:         .create();
1: 
1: 
1:     Option predictors = builder.withLongName("predictors")
1:         .withRequired(true)
1:         .withArgument(argumentBuilder.withName("predictors").create())
1:         .withDescription("a list of predictor variables").create();
1: 
1:     Option types = builder
1:         .withLongName("types")
1:         .withRequired(true)
1:         .withArgument(argumentBuilder.withName("types").create())
1:         .withDescription(
1:             "a list of predictor variable types (numeric, word, or text)")
1:         .create();
1: 
1:     Option target = builder
1:         .withLongName("target")
1:         .withDescription("the name of the target variable")    
1:         .withRequired(true)    
1:         .withArgument(
1:             argumentBuilder.withName("target").withMaximum(1)
1:                 .create())
1:          .create();
1:     
1:     Option targetCategories = builder
0:     .withLongName("categories")
0:     .withDescription("the number of target categories to be considered")
1:     .withRequired(true)
1:     .withArgument(
0:         argumentBuilder.withName("categories").withMaximum(1)
1:             .create())        
1:     .create();
1:     
1: 
1:     Option features = builder
1:         .withLongName("features")
1:         .withDescription("the number of internal hashed features to use")
1:         .withArgument(
1:             argumentBuilder.withName("numFeatures")
1:                 .withDefault("1000").withMaximum(1).create())        
1:         .create();
1: 
1:     Option passes = builder
1:         .withLongName("passes")
1:         .withDescription("the number of times to pass over the input data")
1:         .withArgument(
1:             argumentBuilder.withName("passes").withDefault("2")
1:                 .withMaximum(1).create())        
1:         .create();
1: 
1:     Option interval = builder.withLongName("interval")
1:         .withArgument(
1:             argumentBuilder.withName("interval").withDefault("500").create())
1:         .withDescription("the interval property of AdaptiveLogisticRegression")
1:         .create();
1: 
1:     Option window = builder.withLongName("window")
1:         .withArgument(
1:             argumentBuilder.withName("window").withDefault("800").create())
1:         .withDescription("the average propery of AdaptiveLogisticRegression")
1:         .create();
1: 
1:     Option skipperfnum = builder.withLongName("skipperfnum")
1:         .withArgument(
1:             argumentBuilder.withName("skipperfnum").withDefault("99").create())
1:         .withDescription("show performance measures every (skipperfnum + 1) rows")
1:         .create();
1: 
1:     Option prior = builder.withLongName("prior")
1:         .withArgument(
1:             argumentBuilder.withName("prior").withDefault("L1").create())
1:         .withDescription("the prior algorithm to use: L1, L2, ebp, tp, up")
1:         .create();
1: 
1:     Option priorOption = builder.withLongName("prioroption")
1:         .withArgument(
1:             argumentBuilder.withName("prioroption").create())
1:         .withDescription("constructor parameter for ElasticBandPrior and TPrior")
1:         .create();
1: 
1:     Option auc = builder.withLongName("auc")
1:         .withArgument(
1:             argumentBuilder.withName("auc").withDefault("global").create())
1:         .withDescription("the auc to use: global or grouped")
1:         .create();
1: 
1:     
1: 
1:     Group normalArgs = new GroupBuilder().withOption(help)
1:         .withOption(quiet).withOption(inputFile).withOption(outputFile)
1:         .withOption(target).withOption(targetCategories)
1:         .withOption(predictors).withOption(types).withOption(passes)
1:         .withOption(interval).withOption(window).withOption(threads)
1:         .withOption(prior).withOption(features).withOption(showperf)
1:         .withOption(skipperfnum).withOption(priorOption).withOption(auc)
1:         .create();
1: 
1:     Parser parser = new Parser();
1:     parser.setHelpOption(help);
1:     parser.setHelpTrigger("--help");
1:     parser.setGroup(normalArgs);
1:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
1:     CommandLine cmdLine = parser.parseAndHelp(args);
1: 
1:     if (cmdLine == null) {
1:       return false;
1:     }
1: 
1:     TrainAdaptiveLogistic.inputFile = getStringArgument(cmdLine, inputFile);
1:     TrainAdaptiveLogistic.outputFile = getStringArgument(cmdLine,
1:                                                          outputFile);
1: 
0:     List<String> typeList = Lists.newArrayList();
1:     for (Object x : cmdLine.getValues(types)) {
1:       typeList.add(x.toString());
1:     }
1: 
0:     List<String> predictorList = Lists.newArrayList();
1:     for (Object x : cmdLine.getValues(predictors)) {
1:       predictorList.add(x.toString());
1:     }
1: 
1:     lmp = new AdaptiveLogisticModelParameters();
1:     lmp.setTargetVariable(getStringArgument(cmdLine, target));
1:     lmp.setMaxTargetCategories(getIntegerArgument(cmdLine, targetCategories));
1:     lmp.setNumFeatures(getIntegerArgument(cmdLine, features));
1:     lmp.setInterval(getIntegerArgument(cmdLine, interval));
1:     lmp.setAverageWindow(getIntegerArgument(cmdLine, window));
1:     lmp.setThreads(getIntegerArgument(cmdLine, threads));
1:     lmp.setAuc(getStringArgument(cmdLine, auc));
1:     lmp.setPrior(getStringArgument(cmdLine, prior));
1:     if (cmdLine.getValue(priorOption) != null) {
1:       lmp.setPriorOption(getDoubleArgument(cmdLine, priorOption));
1:     }
1:     lmp.setTypeMap(predictorList, typeList);
1:     TrainAdaptiveLogistic.showperf = getBooleanArgument(cmdLine, showperf);
1:     TrainAdaptiveLogistic.skipperfnum = getIntegerArgument(cmdLine, skipperfnum);
1:     TrainAdaptiveLogistic.passes = getIntegerArgument(cmdLine, passes);
1: 
1:     lmp.checkParameters();
1: 
1:     return true;
1:   }
1: 
1:   private static String getStringArgument(CommandLine cmdLine,
1:                                           Option inputFile) {
1:     return (String) cmdLine.getValue(inputFile);
1:   }
1: 
1:   private static boolean getBooleanArgument(CommandLine cmdLine, Option option) {
1:     return cmdLine.hasOption(option);
1:   }
1: 
1:   private static int getIntegerArgument(CommandLine cmdLine, Option features) {
1:     return Integer.parseInt((String) cmdLine.getValue(features));
1:   }
1: 
1:   private static double getDoubleArgument(CommandLine cmdLine, Option op) {
1:     return Double.parseDouble((String) cmdLine.getValue(op));
1:   }
1: 
1:   public static AdaptiveLogisticRegression getModel() {
1:     return model;
1:   }
1: 
1:   public static LogisticModelParameters getParameters() {
1:     return lmp;
1:   }
1: 
0:    static BufferedReader open(String inputFile) throws IOException {
1:     InputStream in;
1:     try {
1:       in = Resources.getResource(inputFile).openStream();
1:     } catch (IllegalArgumentException e) {
1:       in = new FileInputStream(new File(inputFile));
1:     }
1:     return new BufferedReader(new InputStreamReader(in, Charsets.UTF_8));
1:   }
1:    
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:d2dd884
/////////////////////////////////////////////////////////////////////////
1:   public static void main(String[] args) throws Exception {
1:   static void mainToOutput(String[] args, PrintWriter output) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         int lineCount = 2;
0:           int targetValue = 0;
0:           try {
0:             targetValue = csv.processLine(line, input);
0:           } catch (Exception e) {
0:             System.out.println("Exception at line " + lineCount);
0:             throw e;
0:           }
/////////////////////////////////////////////////////////////////////////
0:           lineCount++;
/////////////////////////////////////////////////////////////////////////
0:                       "%s\n", "AdaptiveLogisticRegression has failed to train a model.");
============================================================================