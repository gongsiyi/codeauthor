1:fbf804b: /*
1:fbf804b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fbf804b:  * contributor license agreements.  See the NOTICE file distributed with
1:fbf804b:  * this work for additional information regarding copyright ownership.
1:fbf804b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fbf804b:  * (the "License"); you may not use this file except in compliance with
1:fbf804b:  * the License.  You may obtain a copy of the License at
1:fbf804b:  *
1:fbf804b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fbf804b:  *
1:fbf804b:  * Unless required by applicable law or agreed to in writing, software
1:fbf804b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fbf804b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fbf804b:  * See the License for the specific language governing permissions and
1:fbf804b:  * limitations under the License.
1:fbf804b:  */
1:fbf804b: 
1:5a7067b: package org.apache.mahout.vectorizer.encoders;
1:fbf804b: 
1:87c15be: import java.util.Arrays;
1:fbf804b: 
1:69ba194: import com.google.common.base.Preconditions;
1:87c15be: import org.apache.mahout.math.map.OpenIntIntHashMap;
1:fbf804b: 
1:fbf804b: public class CachingContinuousValueEncoder extends ContinuousValueEncoder {
1:d53cf4a:   private final int dataSize;
1:fbf804b:   private OpenIntIntHashMap[] caches;
1:fbf804b: 
1:fbf804b:   public CachingContinuousValueEncoder(String name, int dataSize) {
1:fbf804b:     super(name);
1:fbf804b:     this.dataSize = dataSize;
1:fbf804b:     initCaches();
2:fbf804b:   }
1:fbf804b: 
1:fbf804b:   private void initCaches() {
1:fbf804b:     this.caches = new OpenIntIntHashMap[getProbes()];
1:4f668db:     for (int probe = 0; probe < getProbes(); probe++) {
1:4f668db:       caches[probe] = new OpenIntIntHashMap();
1:fbf804b:     }
1:fbf804b:   }
1:fbf804b: 
1:4f668db:   OpenIntIntHashMap[] getCaches() {
1:fbf804b:     return caches;
1:fbf804b:   }
1:fbf804b: 
1:4f668db:   @Override
1:fbf804b:   public void setProbes(int probes) {
1:fbf804b:     super.setProbes(probes);
1:fbf804b:     initCaches();
1:fbf804b:   }
1:fbf804b: 
1:fbf804b:   @Override
1:4f668db:   protected int hashForProbe(byte[] originalForm, int dataSize, String name, int probe) {
1:939ac30:     Preconditions.checkArgument(dataSize == this.dataSize,
1:939ac30:         "dataSize argument [" + dataSize + "] does not match expected dataSize [" + this.dataSize + ']');
1:87c15be:     int originalHashcode = Arrays.hashCode(originalForm);
1:4f668db:     if (caches[probe].containsKey(originalHashcode)) {
1:4f668db:       return caches[probe].get(originalHashcode);
1:fbf804b:     }
1:4f668db:     int hash = super.hashForProbe(originalForm, dataSize, name, probe);
1:4f668db:     caches[probe].put(originalHashcode, hash);
1:fbf804b:     return hash;
1:fbf804b:   }
1:fbf804b: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import org.apache.mahout.math.map.OpenIntIntHashMap;
/////////////////////////////////////////////////////////////////////////
1:     int originalHashcode = Arrays.hashCode(originalForm);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4f668db
/////////////////////////////////////////////////////////////////////////
1:     for (int probe = 0; probe < getProbes(); probe++) {
1:       caches[probe] = new OpenIntIntHashMap();
1:   OpenIntIntHashMap[] getCaches() {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   protected int hashForProbe(byte[] originalForm, int dataSize, String name, int probe) {
0:     int originalHashcode = originalForm.hashCode();
1:     if (caches[probe].containsKey(originalHashcode)) {
1:       return caches[probe].get(originalHashcode);
1:     int hash = super.hashForProbe(originalForm, dataSize, name, probe);
1:     caches[probe].put(originalHashcode, hash);
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
0:     int hash = hashForProbe(originalForm.getBytes(Charsets.UTF_8), dataSize, name, probe);
commit:939ac30
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(dataSize == this.dataSize,
1:         "dataSize argument [" + dataSize + "] does not match expected dataSize [" + this.dataSize + ']');
0:     int hash = hashForProbe(originalForm.getBytes(), dataSize, name, probe);
commit:69ba194
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
/////////////////////////////////////////////////////////////////////////
0:     Preconditions.checkArgument(dataSize == this.dataSize, "dataSize argument [" + dataSize + "] does not match expected dataSize [" + this.dataSize + "]");
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
0:           + dataSize + "] does not match expected dataSize [" + this.dataSize + ']');
commit:d53cf4a
/////////////////////////////////////////////////////////////////////////
1:   private final int dataSize;
/////////////////////////////////////////////////////////////////////////
0:       throw new IllegalArgumentException("dataSize argument ["
0:           + dataSize + "] does not match expected dataSize [" + this.dataSize + "]");
author:Robin Anil
-------------------------------------------------------------------------------
commit:5a7067b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.vectorizer.encoders;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:fbf804b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.vectors;
1: 
0: import org.apache.mahout.math.map.OpenIntIntHashMap;
1: 
1: 
1: public class CachingContinuousValueEncoder extends ContinuousValueEncoder {
0:   private int dataSize;
1:   private OpenIntIntHashMap[] caches;
1: 
1:   public CachingContinuousValueEncoder(String name, int dataSize) {
1:     super(name);
1:     this.dataSize = dataSize;
1:     initCaches();
1:   }
1: 
1:   private void initCaches() {
1:     this.caches = new OpenIntIntHashMap[getProbes()];
0:     for (int ii = 0; ii < getProbes(); ii++) {
0:       caches[ii] = new OpenIntIntHashMap();
1:     }
1:   }
1: 
0:   protected OpenIntIntHashMap[] getCaches() {
1:     return caches;
1:   }
1: 
1:   @Override
1:   public void setProbes(int probes) {
1:     super.setProbes(probes);
1:     initCaches();
1:   }
1: 
0:   protected int hashForProbe(String originalForm, int dataSize, String name, int probe) {
0:     if (dataSize != this.dataSize) {
0:       throw new IllegalArgumentException("dataSize argument [" + dataSize + "] does not match expected dataSize [" + this.dataSize + "]");
1:     }
0:     if (caches[probe].containsKey(originalForm.hashCode())) {
0:       return caches[probe].get(originalForm.hashCode());
1:     }
0:     int hash = super.hashForProbe(originalForm.getBytes(), dataSize, name, probe);
0:     caches[probe].put(originalForm.hashCode(), hash);
1:     return hash;
1:   }
1: }
============================================================================