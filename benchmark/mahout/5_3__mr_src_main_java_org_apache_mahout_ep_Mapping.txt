1:5ce5992: /**
1:5ce5992:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5ce5992:  * contributor license agreements.  See the NOTICE file distributed with
1:5ce5992:  * this work for additional information regarding copyright ownership.
1:5ce5992:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5ce5992:  * (the "License"); you may not use this file except in compliance with
1:5ce5992:  * the License.  You may obtain a copy of the License at
1:5ce5992:  *
1:5ce5992:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5ce5992:  *
1:5ce5992:  * Unless required by applicable law or agreed to in writing, software
1:5ce5992:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5ce5992:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5ce5992:  * See the License for the specific language governing permissions and
1:5ce5992:  * limitations under the License.
1:5ce5992:  */
1:5ce5992: 
1:292bb9d: package org.apache.mahout.ep;
1:913d44d: 
1:f95d551: import java.io.DataInput;
1:f95d551: import java.io.DataOutput;
1:f95d551: import java.io.IOException;
1:f95d551: 
1:69ba194: import com.google.common.base.Preconditions;
1:02f8694: import org.apache.hadoop.io.Writable;
1:02f8694: import org.apache.mahout.classifier.sgd.PolymorphicWritable;
1:85ec3a3: import org.apache.mahout.math.function.DoubleFunction;
1:69ba194: 
1:292bb9d: /**
1:292bb9d:  * Provides coordinate tranformations so that evolution can proceed on the entire space of
1:4b25f31:  * reals but have the output limited and squished in convenient (and safe) ways.
1:292bb9d:  */
1:f95d551: public abstract class Mapping extends DoubleFunction implements Writable {
1:5ce5992: 
1:3f1450a:   private Mapping() {
1:3f1450a:   }
1:3f1450a: 
1:5ce5992:   public static final class SoftLimit extends Mapping {
1:913d44d:     private double min;
1:913d44d:     private double max;
1:913d44d:     private double scale;
1:913d44d: 
1:02f8694:     public SoftLimit() {
1:913d44d:     }
1:913d44d: 
1:913d44d:     private SoftLimit(double min, double max, double scale) {
1:913d44d:       this.min = min;
1:913d44d:       this.max = max;
1:913d44d:       this.scale = scale;
1:913d44d:     }
1:913d44d: 
1:5ce5992:     @Override
1:913d44d:     public double apply(double v) {
1:913d44d:       return min + (max - min) * 1 / (1 + Math.exp(-v * scale));
1:913d44d:     }
1:02f8694: 
1:02f8694:     @Override
1:02f8694:     public void write(DataOutput out) throws IOException {
1:02f8694:       out.writeDouble(min);
1:02f8694:       out.writeDouble(max);
1:02f8694:       out.writeDouble(scale);
1:02f8694:     }
1:02f8694: 
1:02f8694:     @Override
1:02f8694:     public void readFields(DataInput in) throws IOException {
1:02f8694:       min = in.readDouble();
1:02f8694:       max = in.readDouble();
1:02f8694:       scale = in.readDouble();
1:02f8694:     }
1:02f8694:   }
1:02f8694: 
1:5ce5992:   public static final class LogLimit extends Mapping {
1:913d44d:     private Mapping wrapped;
1:913d44d: 
1:02f8694:     public LogLimit() {
1:02f8694:     }
1:913d44d: 
1:913d44d:     private LogLimit(double low, double high) {
1:913d44d:       wrapped = softLimit(Math.log(low), Math.log(high));
1:913d44d:     }
1:913d44d: 
1:02f8694:     @Override
1:913d44d:     public double apply(double v) {
1:913d44d:       return Math.exp(wrapped.apply(v));
1:913d44d:     }
1:02f8694: 
1:02f8694:     @Override
1:02f8694:     public void write(DataOutput dataOutput) throws IOException {
1:02f8694:       PolymorphicWritable.write(dataOutput, wrapped);
1:02f8694:     }
1:02f8694: 
1:02f8694:     @Override
1:02f8694:     public void readFields(DataInput in) throws IOException {
1:02f8694:       wrapped = PolymorphicWritable.read(in, Mapping.class);
1:02f8694:     }
1:913d44d:   }
1:913d44d: 
1:5ce5992:   public static final class Exponential extends Mapping {
1:913d44d:     private double scale;
1:913d44d: 
1:02f8694:     public Exponential() {
1:913d44d:     }
1:913d44d: 
1:913d44d:     private Exponential(double scale) {
1:913d44d:       this.scale = scale;
1:913d44d:     }
1:913d44d: 
1:913d44d:     @Override
1:913d44d:     public double apply(double v) {
1:913d44d:       return Math.exp(v * scale);
1:913d44d:     }
1:913d44d: 
1:02f8694:     @Override
1:02f8694:     public void write(DataOutput out) throws IOException {
1:02f8694:       out.writeDouble(scale);
1:913d44d:     }
1:913d44d: 
1:913d44d:     @Override
1:02f8694:     public void readFields(DataInput in) throws IOException {
1:02f8694:       scale = in.readDouble();
1:913d44d:     }
1:913d44d:   }
1:913d44d: 
1:5ce5992:   public static final class Identity extends Mapping {
1:913d44d:     @Override
1:913d44d:     public double apply(double v) {
1:913d44d:       return v;
1:02f8694:     }
1:02f8694: 
1:02f8694:     @Override
1:85ec3a3:     public void write(DataOutput dataOutput) {
1:02f8694:       // stateless
1:02f8694:     }
1:02f8694: 
1:02f8694:     @Override
1:85ec3a3:     public void readFields(DataInput dataInput) {
1:02f8694:       // stateless
1:913d44d:     }
1:913d44d:   }
1:913d44d: 
1:292bb9d:   /**
1:292bb9d:    * Maps input to the open interval (min, max) with 0 going to the mean of min and
1:292bb9d:    * max.  When scale is large, a larger proportion of values are mapped to points
1:292bb9d:    * near the boundaries.  When scale is small, a larger proportion of values are mapped to
1:292bb9d:    * points well within the boundaries.
1:292bb9d:    * @param min The largest lower bound on values to be returned.
1:292bb9d:    * @param max The least upper bound on values to be returned.
1:292bb9d:    * @param scale  Defines how sharp the boundaries are.
1:292bb9d:    * @return A mapping that satisfies the desired constraint.
1:292bb9d:    */
1:049e7dc:   public static Mapping softLimit(double min, double max, double scale) {
1:913d44d:     return new SoftLimit(min, max, scale);
1:913d44d:   }
4:292bb9d: 
1:292bb9d:   /**
1:292bb9d:    * Maps input to the open interval (min, max) with 0 going to the mean of min and
1:292bb9d:    * max.  When scale is large, a larger proportion of values are mapped to points
1:292bb9d:    * near the boundaries.
1:292bb9d:    * @see #softLimit(double, double, double)
1:292bb9d:    * @param min The largest lower bound on values to be returned.
1:292bb9d:    * @param max The least upper bound on values to be returned.
1:292bb9d:    * @return A mapping that satisfies the desired constraint.
1:292bb9d:    */
1:292bb9d:   public static Mapping softLimit(double min, double max) {
1:292bb9d:     return softLimit(min, max, 1);
8:292bb9d:   }
1:292bb9d: 
1:292bb9d:   /**
1:292bb9d:    * Maps input to positive values in the open interval (min, max) with
1:292bb9d:    * 0 going to the geometric mean.  Near the geometric mean, values are
1:292bb9d:    * distributed roughly geometrically.
1:292bb9d:    * @param low   The largest lower bound for output results.  Must be >0.
1:292bb9d:    * @param high  The least upper bound for output results.  Must be >0.
1:292bb9d:    * @return A mapped value.
1:292bb9d:    */
1:5ce5992:   public static Mapping logLimit(double low, double high) {
1:69ba194:     Preconditions.checkArgument(low > 0, "Lower bound for log limit must be > 0 but was %f", low);
1:69ba194:     Preconditions.checkArgument(high > 0, "Upper bound for log limit must be > 0 but was %f", high);
1:913d44d:     return new LogLimit(low, high);
1:4b25f31:   }
1:292bb9d: 
1:292bb9d:   /**
1:292bb9d:    * Maps results to positive values.
1:292bb9d:    * @return A positive value.
1:292bb9d:    */
1:292bb9d:   public static Mapping exponential() {
1:292bb9d:     return exponential(1);
1:4b25f31:   }
1:292bb9d: 
1:292bb9d:   /**
1:292bb9d:    * Maps results to positive values.
1:292bb9d:    * @param scale  If large, then large values are more likely.
1:292bb9d:    * @return A positive value.
1:292bb9d:    */
1:5ce5992:   public static Mapping exponential(double scale) {
1:913d44d:     return new Exponential(scale);
1:292bb9d:   }
1:292bb9d: 
1:292bb9d:   /**
1:292bb9d:    * Maps results to themselves.
1:292bb9d:    * @return The original value.
1:292bb9d:    */
1:292bb9d:   public static Mapping identity() {
1:913d44d:     return new Identity();
1:292bb9d:   }
1:292bb9d: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:dfilimon
-------------------------------------------------------------------------------
commit:f95d551
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: public abstract class Mapping extends DoubleFunction implements Writable {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:85ec3a3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.DoubleFunction;
/////////////////////////////////////////////////////////////////////////
0: public abstract class Mapping implements DoubleFunction, Writable {
/////////////////////////////////////////////////////////////////////////
1:     public void write(DataOutput dataOutput) {
1:     public void readFields(DataInput dataInput) {
commit:69ba194
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
1: 
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(low > 0, "Lower bound for log limit must be > 0 but was %f", low);
1:     Preconditions.checkArgument(high > 0, "Upper bound for log limit must be > 0 but was %f", high);
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1:   public static Mapping softLimit(double min, double max, double scale) {
commit:3f1450a
/////////////////////////////////////////////////////////////////////////
1:   private Mapping() {
1:   }
1: 
commit:5ce5992
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public static final class SoftLimit extends Mapping {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:   public static final class LogLimit extends Mapping {
/////////////////////////////////////////////////////////////////////////
1:   public static final class Exponential extends Mapping {
/////////////////////////////////////////////////////////////////////////
1:   public static final class Identity extends Mapping {
/////////////////////////////////////////////////////////////////////////
0:   public static Mapping softLimit(double min, double max, final double scale) {
/////////////////////////////////////////////////////////////////////////
1:   public static Mapping logLimit(double low, double high) {
/////////////////////////////////////////////////////////////////////////
1:   public static Mapping exponential(double scale) {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:02f8694
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Preconditions;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.classifier.sgd.PolymorphicWritable;
0: import java.io.DataInput;
0: import java.io.DataOutput;
0: import java.io.IOException;
0: public abstract class Mapping implements UnaryFunction, Writable {
/////////////////////////////////////////////////////////////////////////
1:     public SoftLimit() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void write(DataOutput out) throws IOException {
1:       out.writeDouble(min);
1:       out.writeDouble(max);
1:       out.writeDouble(scale);
1:     }
1: 
1:     @Override
1:     public void readFields(DataInput in) throws IOException {
1:       min = in.readDouble();
1:       max = in.readDouble();
1:       scale = in.readDouble();
1:     }
1:     public LogLimit() {
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void write(DataOutput dataOutput) throws IOException {
1:       PolymorphicWritable.write(dataOutput, wrapped);
1:     }
1: 
1:     @Override
1:     public void readFields(DataInput in) throws IOException {
1:       wrapped = PolymorphicWritable.read(in, Mapping.class);
1:     }
1:     public Exponential() {
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void write(DataOutput out) throws IOException {
1:       out.writeDouble(scale);
1:     }
1: 
1:     @Override
1:     public void readFields(DataInput in) throws IOException {
1:       scale = in.readDouble();
1:     }
0:     public Identity() {
1: 
1:     @Override
0:     public void write(DataOutput dataOutput) throws IOException {
1:       // stateless
1:     }
1: 
1:     @Override
0:     public void readFields(DataInput dataInput) throws IOException {
1:       // stateless
1:     }
commit:913d44d
/////////////////////////////////////////////////////////////////////////
0:   public static class SoftLimit extends Mapping {
1:     private double min;
1:     private double max;
1:     private double scale;
1: 
0:     @SuppressWarnings({"UnusedDeclaration"})
0:     private SoftLimit() {
1:     }
1: 
1:     private SoftLimit(double min, double max, double scale) {
1:       this.min = min;
1:       this.max = max;
1:       this.scale = scale;
1:     }
1: 
1:     public double apply(double v) {
1:       return min + (max - min) * 1 / (1 + Math.exp(-v * scale));
1:     }
1: 
1:   }
1: 
0:   public static class LogLimit extends Mapping {
1:     private Mapping wrapped;
1: 
0:     @SuppressWarnings({"UnusedDeclaration"})
0:     private LogLimit() {
1:     }
1: 
1:     private LogLimit(double low, double high) {
1:       wrapped = softLimit(Math.log(low), Math.log(high));
1:     }
1: 
1:     @Override
1:     public double apply(double v) {
1:       return Math.exp(wrapped.apply(v));
1:     }
1:   }
1: 
0:   public static class Exponential extends Mapping {
1:     private double scale;
1: 
0:     @SuppressWarnings({"UnusedDeclaration"})
0:     private Exponential() {
1:     }
1: 
1:     private Exponential(double scale) {
1:       this.scale = scale;
1:     }
1: 
1:     @Override
1:     public double apply(double v) {
1:       return Math.exp(v * scale);
1:     }
1:   }
1: 
0:   public static class Identity extends Mapping {
0:     private Identity() {
1:     }
1: 
1:     @Override
1:     public double apply(double v) {
1:       return v;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     return new SoftLimit(min, max, scale);
/////////////////////////////////////////////////////////////////////////
1:     return new LogLimit(low, high);
/////////////////////////////////////////////////////////////////////////
1:     return new Exponential(scale);
/////////////////////////////////////////////////////////////////////////
1:     return new Identity();
commit:4b25f31
/////////////////////////////////////////////////////////////////////////
1:  * reals but have the output limited and squished in convenient (and safe) ways.
/////////////////////////////////////////////////////////////////////////
0:     if (low <= 0) {
0:       throw new IllegalArgumentException("Lower bound for log limit must be > 0 but was " + low);
1:     }
0:     if (high <= 0) {
0:       throw new IllegalArgumentException("Upper bound for log limit must be > 0 but was " + high);
1:     }
commit:292bb9d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.ep;
1: 
0: import org.apache.mahout.math.function.UnaryFunction;
1: 
1: /**
1:  * Provides coordinate tranformations so that evolution can proceed on the entire space of
0:  * reals but have the output limited and squished in convenient ways.
1:  */
0: public abstract class Mapping implements UnaryFunction {
1:   /**
1:    * Maps input to the open interval (min, max) with 0 going to the mean of min and
1:    * max.  When scale is large, a larger proportion of values are mapped to points
1:    * near the boundaries.  When scale is small, a larger proportion of values are mapped to
1:    * points well within the boundaries.
1:    * @param min The largest lower bound on values to be returned.
1:    * @param max The least upper bound on values to be returned.
1:    * @param scale  Defines how sharp the boundaries are.
1:    * @return A mapping that satisfies the desired constraint.
1:    */
0:   public static Mapping softLimit(final double min, final double max, final double scale) {
0:     return new Mapping() {
0:       @Override
0:       public double apply(double v) {
0:         return min + (max - min) * 1 / (1 + Math.exp(-v * scale));
1:       }
0:     };
1:   }
1: 
1:   /**
1:    * Maps input to the open interval (min, max) with 0 going to the mean of min and
1:    * max.  When scale is large, a larger proportion of values are mapped to points
1:    * near the boundaries.
1:    * @see #softLimit(double, double, double)
1:    * @param min The largest lower bound on values to be returned.
1:    * @param max The least upper bound on values to be returned.
1:    * @return A mapping that satisfies the desired constraint.
1:    */
1:   public static Mapping softLimit(double min, double max) {
1:     return softLimit(min, max, 1);
1:   }
1: 
1:   /**
1:    * Maps input to positive values in the open interval (min, max) with
1:    * 0 going to the geometric mean.  Near the geometric mean, values are
1:    * distributed roughly geometrically.
1:    * @param low   The largest lower bound for output results.  Must be >0.
1:    * @param high  The least upper bound for output results.  Must be >0.
1:    * @return A mapped value.
1:    */
0:   public static Mapping logLimit(final double low, final double high) {
0:     return new Mapping() {
0:       Mapping wrapped = softLimit(Math.log(low), Math.log(high));
1: 
0:       @Override
0:       public double apply(double v) {
0:         return Math.exp(wrapped.apply(v));
1:       }
0:     };
1:   }
1: 
1:   /**
1:    * Maps results to positive values.
1:    * @return A positive value.
1:    */
1:   public static Mapping exponential() {
1:     return exponential(1);
1:   }
1: 
1:   /**
1:    * Maps results to positive values.
1:    * @param scale  If large, then large values are more likely.
1:    * @return A positive value.
1:    */
0:   public static Mapping exponential(final double scale) {
0:     return new Mapping() {
0:       @Override
0:       public double apply(double v) {
0:         return Math.exp(v * scale);
1:       }
0:     };
1:   }
1: 
1:   /**
1:    * Maps results to themselves.
1:    * @return The original value.
1:    */
1:   public static Mapping identity() {
0:     return new Mapping() {
0:       @Override
0:       public double apply(double v) {
0:         return v;
1:       }
0:     };
1:   }
1: }
============================================================================