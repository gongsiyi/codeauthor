1:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
2:f870a63:  */
2:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings.ops;
1:f870a63: 
1:f870a63: import water.MRTask;
1:f870a63: import water.fvec.Frame;
1:f870a63: import water.fvec.Vec;
1:f870a63: import water.fvec.Chunk;
1:f870a63: 
1:f870a63: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * R-like cbind like operator, on two DRMs
1:2d1b0bf:  */
1:f870a63: public class Cbind {
1:2d1b0bf:   /**
1:2d1b0bf:    * Combine the columns of two DRMs A and B to create a new DRM.
1:2d1b0bf:    *
1:2d1b0bf:    * @param drmA DRM representing matrix A.
1:2d1b0bf:    * @param drmB DRM representing matrix B.
1:2d1b0bf:    * @return new DRM containing columns of A and B adjacent.
1:2d1b0bf:    */
1:03a5bb6:   public static H2ODrm exec(H2ODrm drmA, H2ODrm drmB) {
1:f870a63:     Frame fra = drmA.frame;
1:f870a63:     Vec keysa = drmA.keys;
1:f870a63:     Frame frb = drmB.frame;
1:f870a63:     Vec keysb = drmB.keys;
1:f870a63: 
1:2d1b0bf:     // If A and B are similarly partitioned, ..
1:f870a63:     if (fra.anyVec().group() == frb.anyVec().group()) {
1:2d1b0bf:       // .. then, do a light weight zip()
1:f870a63:       return zip(fra, keysa, frb, keysb);
1:f870a63:     } else {
1:2d1b0bf:       // .. else, do a heavy weight join() which involves moving data over the wire
1:f870a63:       return join(fra, keysa, frb, keysb);
1:f870a63:     }
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   /** Light weight zip(), no data movement */
1:f870a63:   private static H2ODrm zip(final Frame fra, final Vec keysa, final Frame frb, final Vec keysb) {
1:2d1b0bf:     // Create a new Vec[] to hold the concatenated list of A and B's column vectors
1:f870a63:     Vec vecs[] = new Vec[fra.vecs().length + frb.vecs().length];
1:f870a63:     int d = 0;
1:2d1b0bf:     // fill A's column vectors
1:f870a63:     for (Vec vfra : fra.vecs()) {
1:f870a63:       vecs[d++] = vfra;
1:f870a63:     }
1:2d1b0bf:     // and B's
1:f870a63:     for (Vec vfrb : frb.vecs()) {
1:f870a63:       vecs[d++] = vfrb;
1:f870a63:     }
1:2d1b0bf:     // and create a new Frame with the combined list of column Vecs
1:f870a63:     Frame fr = new Frame(vecs);
1:f870a63:     /* Finally, inherit A's string labels into the result */
1:f870a63:     return new H2ODrm(fr, keysa);
1:f870a63:   }
1:f870a63: 
1:2d1b0bf:   /** Heavy weight join(), involves moving data */
1:f870a63:   private static H2ODrm join(final Frame fra, final Vec keysa, final Frame frb, final Vec keysb) {
1:2d1b0bf:     // The plan is to re-organize B to be "similarly partitioned as A", and then zip()
1:f870a63:     Vec bvecs[] = new Vec[frb.vecs().length];
1:f870a63: 
1:f870a63:     for (int i = 0; i < bvecs.length; i++) {
1:2d1b0bf:       // First create column Vecs which are similarly partitioned as A
1:f870a63:       bvecs[i] = fra.anyVec().makeZero();
1:f870a63:     }
1:f870a63: 
1:2d1b0bf:     // Next run an MRTask on the new vectors, and fill each cell (initially 0)
1:2d1b0bf:     // by pulling in appropriate values from B (frb)
1:f870a63:     new MRTask() {
1:f870a63:       public void map(Chunk chks[]) {
1:2d1b0bf:         int chunkSize = chks[0].len();
1:f870a63:         long start = chks[0].start();
1:f870a63:         Vec vecs[] = frb.vecs();
1:f870a63: 
1:2d1b0bf:         for (int r = 0; r < chunkSize; r++) {
1:f870a63:           for (int c = 0; c < chks.length; c++) {
1:f870a63:             // assert va.atStr(start+r) == vb.atStr(start+r)
1:f5f54a1:             chks[c].set(r, vecs[c].at(start + r));
1:f870a63:           }
1:f870a63:         }
1:f870a63:       }
1:f870a63:     }.doAll(bvecs);
1:f870a63: 
1:2d1b0bf:     // now that bvecs[] is compatible, just zip'em'up
1:f870a63:     return zip(fra, keysa, new Frame(bvecs), null);
1:f870a63:   }
1:f870a63: }
============================================================================
author:Stevo Slavic
-------------------------------------------------------------------------------
commit:f5f54a1
/////////////////////////////////////////////////////////////////////////
1:             chks[c].set(r, vecs[c].at(start + r));
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * R-like cbind like operator, on two DRMs
1:  */
1:   /**
1:    * Combine the columns of two DRMs A and B to create a new DRM.
1:    *
1:    * @param drmA DRM representing matrix A.
1:    * @param drmB DRM representing matrix B.
1:    * @return new DRM containing columns of A and B adjacent.
1:    */
1:     // If A and B are similarly partitioned, ..
1:       // .. then, do a light weight zip()
1:       // .. else, do a heavy weight join() which involves moving data over the wire
1:   /** Light weight zip(), no data movement */
1:     // Create a new Vec[] to hold the concatenated list of A and B's column vectors
1:     // fill A's column vectors
1:     // and B's
1:     // and create a new Frame with the combined list of column Vecs
1:   /** Heavy weight join(), involves moving data */
1:     // The plan is to re-organize B to be "similarly partitioned as A", and then zip()
1:       // First create column Vecs which are similarly partitioned as A
1:     // Next run an MRTask on the new vectors, and fill each cell (initially 0)
1:     // by pulling in appropriate values from B (frb)
1:         int chunkSize = chks[0].len();
1:         for (int r = 0; r < chunkSize; r++) {
/////////////////////////////////////////////////////////////////////////
1:     // now that bvecs[] is compatible, just zip'em'up
commit:03a5bb6
/////////////////////////////////////////////////////////////////////////
1:   public static H2ODrm exec(H2ODrm drmA, H2ODrm drmB) {
commit:c964986
/////////////////////////////////////////////////////////////////////////
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.ops;
1: 
1: import water.MRTask;
1: import water.fvec.Frame;
1: import water.fvec.Vec;
1: import water.fvec.Chunk;
0: import water.fvec.NewChunk;
1: 
0: import org.apache.mahout.h2obindings.H2OHelper;
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
1: public class Cbind {
0:   /* R's cbind like operator, on DrmA and DrmB */
0:   public static H2ODrm Cbind(H2ODrm drmA, H2ODrm drmB) {
1:     Frame fra = drmA.frame;
1:     Vec keysa = drmA.keys;
1:     Frame frb = drmB.frame;
1:     Vec keysb = drmB.keys;
1: 
0:     /* If A and B are similarly partitioned, .. */
1:     if (fra.anyVec().group() == frb.anyVec().group()) {
0:       /* .. then, do a light weight zip() */
1:       return zip(fra, keysa, frb, keysb);
1:     } else {
0:       /* .. else, do a heavy weight join() which involves moving data over the wire */
1:       return join(fra, keysa, frb, keysb);
1:     }
1:   }
1: 
0:   /* Light weight zip(), no data movement */
1:   private static H2ODrm zip(final Frame fra, final Vec keysa, final Frame frb, final Vec keysb) {
0:     /* Create a new Vec[] to hold the concatenated list of A and B's column vectors */
1:     Vec vecs[] = new Vec[fra.vecs().length + frb.vecs().length];
1:     int d = 0;
0:     /* fill A's column vectors */
1:     for (Vec vfra : fra.vecs()) {
1:       vecs[d++] = vfra;
1:     }
0:     /* and B's */
1:     for (Vec vfrb : frb.vecs()) {
1:       vecs[d++] = vfrb;
1:     }
0:     /* and create a new Frame with the combined list of column Vecs */
1:     Frame fr = new Frame(vecs);
1:     /* Finally, inherit A's string labels into the result */
1:     return new H2ODrm(fr, keysa);
1:   }
1: 
0:   /* heavy weight join(), involves moving data */
1:   private static H2ODrm join(final Frame fra, final Vec keysa, final Frame frb, final Vec keysb) {
1: 
0:     /* The plan is to re-organize B to be "similarly partitioned as A", and then zip() */
1:     Vec bvecs[] = new Vec[frb.vecs().length];
1: 
1:     for (int i = 0; i < bvecs.length; i++) {
0:       /* First create column Vecs which are similarly partitioned as A */
1:       bvecs[i] = fra.anyVec().makeZero();
1:     }
1: 
0:     /* Next run an MRTask on the new vectors, and fill each cell (initially 0)
0:        by pulling in appropriate values from B (frb)
1:     */
1:     new MRTask() {
1:       public void map(Chunk chks[]) {
0:         int chunk_size = chks[0].len();
1:         long start = chks[0].start();
1:         Vec vecs[] = frb.vecs();
1: 
0:         for (int r = 0; r < chunk_size; r++) {
1:           for (int c = 0; c < chks.length; c++) {
1:             // assert va.atStr(start+r) == vb.atStr(start+r)
0:             chks[c].set0(r, vecs[c].at(start + r));
1:           }
1:         }
1:       }
1:     }.doAll(bvecs);
1: 
0:     /* now that bvecs[] is compatible, just zip'em'up */
1:     return zip(fra, keysa, new Frame(bvecs), null);
1:   }
1: }
============================================================================