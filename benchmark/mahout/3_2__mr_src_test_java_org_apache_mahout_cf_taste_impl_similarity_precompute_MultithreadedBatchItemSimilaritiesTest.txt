1:84a4bce: /**
1:84a4bce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:84a4bce:  * contributor license agreements.  See the NOTICE file distributed with
1:84a4bce:  * this work for additional information regarding copyright ownership.
1:84a4bce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:84a4bce:  * (the "License"); you may not use this file except in compliance with
1:84a4bce:  * the License.  You may obtain a copy of the License at
1:cd366d1:  * <p/>
1:cd366d1:  * http://www.apache.org/licenses/LICENSE-2.0
1:cd366d1:  * <p/>
1:84a4bce:  * Unless required by applicable law or agreed to in writing, software
1:84a4bce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:84a4bce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:84a4bce:  * See the License for the specific language governing permissions and
1:84a4bce:  * limitations under the License.
1:84a4bce:  */
1:84a4bce: 
1:84a4bce: package org.apache.mahout.cf.taste.impl.similarity.precompute;
1:84a4bce: 
1:9b6b236: import java.io.IOException;
1:84a4bce: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:84a4bce: import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
1:84a4bce: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1:84a4bce: import org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;
1:84a4bce: import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
1:84a4bce: import org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity;
1:84a4bce: import org.apache.mahout.cf.taste.model.DataModel;
1:84a4bce: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:84a4bce: import org.apache.mahout.cf.taste.recommender.ItemBasedRecommender;
1:84a4bce: import org.apache.mahout.cf.taste.similarity.precompute.BatchItemSimilarities;
1:84a4bce: import org.apache.mahout.cf.taste.similarity.precompute.SimilarItemsWriter;
1:84a4bce: import org.junit.Test;
1:84a4bce: 
1:84a4bce: import java.util.Arrays;
1:84a4bce: 
1:cd366d1: import static org.junit.Assert.assertEquals;
1:84a4bce: import static org.junit.Assert.fail;
1:84a4bce: import static org.mockito.Mockito.mock;
1:84a4bce: 
1:84a4bce: public class MultithreadedBatchItemSimilaritiesTest {
1:84a4bce: 
2:84a4bce:   @Test
1:84a4bce:   public void lessItemsThanBatchSize() throws Exception {
1:84a4bce: 
1:cd366d1:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
1:84a4bce:     userData.put(1, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1, 1, 1),
1:84a4bce:         new GenericPreference(1, 2, 1), new GenericPreference(1, 3, 1))));
1:84a4bce:     userData.put(2, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2, 1, 1),
1:84a4bce:         new GenericPreference(2, 2, 1), new GenericPreference(2, 4, 1))));
1:84a4bce: 
1:84a4bce:     DataModel dataModel = new GenericDataModel(userData);
1:84a4bce:     ItemBasedRecommender recommender =
1:84a4bce:         new GenericItemBasedRecommender(dataModel, new TanimotoCoefficientSimilarity(dataModel));
1:84a4bce: 
1:84a4bce:     BatchItemSimilarities batchSimilarities = new MultithreadedBatchItemSimilarities(recommender, 10);
1:84a4bce: 
1:84a4bce:     batchSimilarities.computeItemSimilarities(1, 1, mock(SimilarItemsWriter.class));
1:84a4bce:   }
1:84a4bce: 
1:9b6b236:   @Test(expected = IOException.class)
1:84a4bce:   public void higherDegreeOfParallelismThanBatches() throws Exception {
1:84a4bce: 
1:cd366d1:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
1:84a4bce:     userData.put(1, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1, 1, 1),
1:84a4bce:         new GenericPreference(1, 2, 1), new GenericPreference(1, 3, 1))));
1:84a4bce:     userData.put(2, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2, 1, 1),
1:84a4bce:         new GenericPreference(2, 2, 1), new GenericPreference(2, 4, 1))));
1:84a4bce: 
1:84a4bce:     DataModel dataModel = new GenericDataModel(userData);
1:84a4bce:     ItemBasedRecommender recommender =
1:84a4bce:         new GenericItemBasedRecommender(dataModel, new TanimotoCoefficientSimilarity(dataModel));
1:84a4bce: 
1:84a4bce:     BatchItemSimilarities batchSimilarities = new MultithreadedBatchItemSimilarities(recommender, 10);
1:84a4bce: 
1:cd366d1:     // Batch size is 100, so we only get 1 batch from 3 items, but we use a degreeOfParallelism of 2
1:cd366d1:     batchSimilarities.computeItemSimilarities(2, 1, mock(SimilarItemsWriter.class));
1:cd366d1:     fail();
1:84a4bce:   }
1:cd366d1: 
1:cd366d1:   @Test
1:cd366d1:   public void testCorrectNumberOfOutputSimilarities() throws Exception {
1:cd366d1:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
1:cd366d1:     userData.put(1, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1, 1, 1),
1:cd366d1:         new GenericPreference(1, 2, 1), new GenericPreference(1, 3, 1))));
1:cd366d1:     userData.put(2, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2, 1, 1),
1:cd366d1:         new GenericPreference(2, 2, 1), new GenericPreference(2, 4, 1))));
1:cd366d1: 
1:cd366d1:     DataModel dataModel = new GenericDataModel(userData);
1:cd366d1:     ItemBasedRecommender recommender =
1:cd366d1:         new GenericItemBasedRecommender(dataModel, new TanimotoCoefficientSimilarity(dataModel));
1:cd366d1: 
1:cd366d1:     BatchItemSimilarities batchSimilarities = new MultithreadedBatchItemSimilarities(recommender, 10, 2);
1:cd366d1: 
1:cd366d1:     int numOutputSimilarities = batchSimilarities.computeItemSimilarities(2, 1, mock(SimilarItemsWriter.class));
1:cd366d1:     assertEquals(numOutputSimilarities, 10);
1:cd366d1:   }
1:cd366d1: 
1:84a4bce: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:9b6b236
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:   @Test(expected = IOException.class)
commit:cd366d1
/////////////////////////////////////////////////////////////////////////
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:     // Batch size is 100, so we only get 1 batch from 3 items, but we use a degreeOfParallelism of 2
1:     batchSimilarities.computeItemSimilarities(2, 1, mock(SimilarItemsWriter.class));
1:     fail();
1: 
1:   @Test
1:   public void testCorrectNumberOfOutputSimilarities() throws Exception {
1:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
1:     userData.put(1, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1, 1, 1),
1:         new GenericPreference(1, 2, 1), new GenericPreference(1, 3, 1))));
1:     userData.put(2, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2, 1, 1),
1:         new GenericPreference(2, 2, 1), new GenericPreference(2, 4, 1))));
1: 
1:     DataModel dataModel = new GenericDataModel(userData);
1:     ItemBasedRecommender recommender =
1:         new GenericItemBasedRecommender(dataModel, new TanimotoCoefficientSimilarity(dataModel));
1: 
1:     BatchItemSimilarities batchSimilarities = new MultithreadedBatchItemSimilarities(recommender, 10, 2);
1: 
1:     int numOutputSimilarities = batchSimilarities.computeItemSimilarities(2, 1, mock(SimilarItemsWriter.class));
1:     assertEquals(numOutputSimilarities, 10);
1:   }
1: 
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:ssc
-------------------------------------------------------------------------------
commit:84a4bce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.similarity.precompute;
1: 
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
1: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1: import org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;
1: import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
1: import org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.cf.taste.recommender.ItemBasedRecommender;
1: import org.apache.mahout.cf.taste.similarity.precompute.BatchItemSimilarities;
1: import org.apache.mahout.cf.taste.similarity.precompute.SimilarItemsWriter;
1: import org.junit.Test;
1: 
0: import java.io.IOException;
1: import java.util.Arrays;
1: 
1: import static org.junit.Assert.fail;
1: import static org.mockito.Mockito.mock;
1: 
1: public class MultithreadedBatchItemSimilaritiesTest {
1: 
1:   @Test
1:   public void lessItemsThanBatchSize() throws Exception {
1: 
0:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<PreferenceArray>();
1:     userData.put(1, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1, 1, 1),
1:         new GenericPreference(1, 2, 1), new GenericPreference(1, 3, 1))));
1:     userData.put(2, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2, 1, 1),
1:         new GenericPreference(2, 2, 1), new GenericPreference(2, 4, 1))));
1: 
1:     DataModel dataModel = new GenericDataModel(userData);
1:     ItemBasedRecommender recommender =
1:         new GenericItemBasedRecommender(dataModel, new TanimotoCoefficientSimilarity(dataModel));
1: 
1:     BatchItemSimilarities batchSimilarities = new MultithreadedBatchItemSimilarities(recommender, 10);
1: 
1:     batchSimilarities.computeItemSimilarities(1, 1, mock(SimilarItemsWriter.class));
1:   }
1: 
1:   @Test
1:   public void higherDegreeOfParallelismThanBatches() throws Exception {
1: 
0:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<PreferenceArray>();
1:     userData.put(1, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(1, 1, 1),
1:         new GenericPreference(1, 2, 1), new GenericPreference(1, 3, 1))));
1:     userData.put(2, new GenericUserPreferenceArray(Arrays.asList(new GenericPreference(2, 1, 1),
1:         new GenericPreference(2, 2, 1), new GenericPreference(2, 4, 1))));
1: 
1:     DataModel dataModel = new GenericDataModel(userData);
1:     ItemBasedRecommender recommender =
1:         new GenericItemBasedRecommender(dataModel, new TanimotoCoefficientSimilarity(dataModel));
1: 
1:     BatchItemSimilarities batchSimilarities = new MultithreadedBatchItemSimilarities(recommender, 10);
1: 
0:     try {
0:       // Batch size is 100, so we only get 1 batch from 3 items, but we use a degreeOfParallelism of 2
0:       batchSimilarities.computeItemSimilarities(2, 1, mock(SimilarItemsWriter.class));
0:       fail();
0:     } catch (IOException e) {}
1:   }
1: }
============================================================================