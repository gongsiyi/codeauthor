1:e23728d: /**
1:e23728d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e23728d:  * contributor license agreements.  See the NOTICE file distributed with
1:e23728d:  * this work for additional information regarding copyright ownership.
1:e23728d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e23728d:  * (the "License"); you may not use this file except in compliance with
1:e23728d:  * the License.  You may obtain a copy of the License at
1:e23728d:  *
1:e23728d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e23728d:  *
1:e23728d:  * Unless required by applicable law or agreed to in writing, software
1:e23728d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e23728d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e23728d:  * See the License for the specific language governing permissions and
1:e23728d:  * limitations under the License.
1:e23728d:  */
2:e23728d: 
1:e23728d: package org.apache.mahout.cf.taste.impl.similarity.jdbc;
1:e23728d: 
1:e23728d: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:e23728d: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1:055f4ab: import org.easymock.EasyMock;
1:e23728d: import org.junit.Test;
1:e23728d: 
1:e23728d: import javax.sql.DataSource;
1:e23728d: import java.sql.Connection;
1:e23728d: import java.sql.PreparedStatement;
1:e23728d: import java.sql.ResultSet;
1:e23728d: 
1:e23728d: public class MySQLJDBCInMemoryItemSimilarityTest extends TasteTestCase {
1:e23728d: 
1:e23728d:   @Test
1:e23728d:   public void testMemoryLoad() throws Exception {
1:e23728d: 
1:e23728d:     DataSource dataSource = EasyMock.createMock(DataSource.class);
1:e23728d:     Connection connection = EasyMock.createMock(Connection.class);
1:e23728d:     PreparedStatement statement = EasyMock.createMock(PreparedStatement.class);
1:e23728d:     ResultSet resultSet = EasyMock.createMock(ResultSet.class);
1:e23728d: 
1:e23728d:     EasyMock.expect(dataSource.getConnection()).andReturn(connection);
1:e23728d:     EasyMock.expect(connection.prepareStatement(MySQLJDBCInMemoryItemSimilarity.DEFAULT_GET_ALL_ITEMSIMILARITIES_SQL,
1:e23728d:         ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)).andReturn(statement);
1:e23728d:     statement.setFetchDirection(ResultSet.FETCH_FORWARD);
1:e23728d:     EasyMock.expect(statement.executeQuery()).andReturn(resultSet);
1:e23728d: 
1:e23728d:     EasyMock.expect(resultSet.next()).andReturn(true);
1:e23728d: 
1:e23728d:     EasyMock.expect(resultSet.getLong(1)).andReturn(1L);
1:e23728d:     EasyMock.expect(resultSet.getLong(2)).andReturn(2L);
1:208aa07:     EasyMock.expect(resultSet.getDouble(3)).andReturn(0.5);
1:e23728d:     EasyMock.expect(resultSet.next()).andReturn(true);
1:e23728d: 
1:e23728d:     EasyMock.expect(resultSet.getLong(1)).andReturn(1L);
1:e23728d:     EasyMock.expect(resultSet.getLong(2)).andReturn(3L);
1:208aa07:     EasyMock.expect(resultSet.getDouble(3)).andReturn(0.4);
1:e23728d:     EasyMock.expect(resultSet.next()).andReturn(true);
1:e23728d: 
1:e23728d:     EasyMock.expect(resultSet.getLong(1)).andReturn(3L);
1:e23728d:     EasyMock.expect(resultSet.getLong(2)).andReturn(4L);
1:208aa07:     EasyMock.expect(resultSet.getDouble(3)).andReturn(0.1);
1:e23728d: 
1:ad17b0d:     EasyMock.expect(resultSet.next()).andReturn(false);
1:e23728d: 
1:e23728d:     resultSet.close();
1:e23728d:     statement.close();
1:e23728d:     connection.close();
1:e23728d: 
1:e23728d:     EasyMock.replay(dataSource, connection, statement, resultSet);
1:e23728d: 
1:e23728d:     ItemSimilarity similarity = new MySQLJDBCInMemoryItemSimilarity(dataSource);
1:e23728d: 
1:208aa07:     assertEquals(0.5, similarity.itemSimilarity(1L, 2L), EPSILON);
1:208aa07:     assertEquals(0.4, similarity.itemSimilarity(1L, 3L), EPSILON);
1:208aa07:     assertEquals(0.1, similarity.itemSimilarity(3L, 4L), EPSILON);
1:e23728d:     assertTrue(Double.isNaN(similarity.itemSimilarity(1L, 4L)));
1:e23728d: 
1:e23728d:     EasyMock.verify(dataSource, connection, statement, resultSet);
1:e23728d:   }
1:e23728d: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:055f4ab
/////////////////////////////////////////////////////////////////////////
1: import org.easymock.EasyMock;
commit:50fd693
commit:ad17b0d
/////////////////////////////////////////////////////////////////////////
1:     EasyMock.expect(resultSet.next()).andReturn(false);
commit:208aa07
/////////////////////////////////////////////////////////////////////////
1:     EasyMock.expect(resultSet.getDouble(3)).andReturn(0.5);
1:     EasyMock.expect(resultSet.getDouble(3)).andReturn(0.4);
1:     EasyMock.expect(resultSet.getDouble(3)).andReturn(0.1);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0.5, similarity.itemSimilarity(1L, 2L), EPSILON);
1:     assertEquals(0.4, similarity.itemSimilarity(1L, 3L), EPSILON);
1:     assertEquals(0.1, similarity.itemSimilarity(3L, 4L), EPSILON);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e23728d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.similarity.jdbc;
1: 
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
0: import org.easymock.classextension.EasyMock;
1: import org.junit.Test;
1: 
1: import javax.sql.DataSource;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: 
1: public class MySQLJDBCInMemoryItemSimilarityTest extends TasteTestCase {
1: 
1:   @Test
1:   public void testMemoryLoad() throws Exception {
1: 
1:     DataSource dataSource = EasyMock.createMock(DataSource.class);
1:     Connection connection = EasyMock.createMock(Connection.class);
1:     PreparedStatement statement = EasyMock.createMock(PreparedStatement.class);
1:     ResultSet resultSet = EasyMock.createMock(ResultSet.class);
1: 
1:     EasyMock.expect(dataSource.getConnection()).andReturn(connection);
1:     EasyMock.expect(connection.prepareStatement(MySQLJDBCInMemoryItemSimilarity.DEFAULT_GET_ALL_ITEMSIMILARITIES_SQL,
1:         ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)).andReturn(statement);
1:     statement.setFetchDirection(ResultSet.FETCH_FORWARD);
0:     statement.setFetchSize(Integer.MIN_VALUE);
1:     EasyMock.expect(statement.executeQuery()).andReturn(resultSet);
1: 
1:     EasyMock.expect(resultSet.next()).andReturn(true);
1: 
0:     EasyMock.expect(resultSet.isAfterLast()).andReturn(false);
1:     EasyMock.expect(resultSet.getLong(1)).andReturn(1L);
1:     EasyMock.expect(resultSet.getLong(2)).andReturn(2L);
0:     EasyMock.expect(resultSet.getDouble(3)).andReturn(0.5d);
1:     EasyMock.expect(resultSet.next()).andReturn(true);
1: 
0:     EasyMock.expect(resultSet.isAfterLast()).andReturn(false);
1:     EasyMock.expect(resultSet.getLong(1)).andReturn(1L);
1:     EasyMock.expect(resultSet.getLong(2)).andReturn(3L);
0:     EasyMock.expect(resultSet.getDouble(3)).andReturn(0.4d);
1:     EasyMock.expect(resultSet.next()).andReturn(true);
1: 
0:     EasyMock.expect(resultSet.isAfterLast()).andReturn(false);
1:     EasyMock.expect(resultSet.getLong(1)).andReturn(3L);
1:     EasyMock.expect(resultSet.getLong(2)).andReturn(4L);
0:     EasyMock.expect(resultSet.getDouble(3)).andReturn(0.1d);
1: 
0:     EasyMock.expect(resultSet.isAfterLast()).andReturn(true);
1: 
1:     resultSet.close();
1:     statement.close();
1:     connection.close();
1: 
0:     EasyMock.expect(resultSet.next()).andReturn(false);
1: 
1:     EasyMock.replay(dataSource, connection, statement, resultSet);
1: 
1:     ItemSimilarity similarity = new MySQLJDBCInMemoryItemSimilarity(dataSource);
1: 
0:     assertEquals(similarity.itemSimilarity(1L, 2L), 0.5d, EPSILON);
0:     assertEquals(similarity.itemSimilarity(1L, 3L), 0.4d, EPSILON);
0:     assertEquals(similarity.itemSimilarity(3L, 4L), 0.1d, EPSILON);
1:     assertTrue(Double.isNaN(similarity.itemSimilarity(1L, 4L)));
1: 
1:     EasyMock.verify(dataSource, connection, statement, resultSet);
1:   }
1: }
============================================================================