1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
2:a07bfc3:  */
9:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:802464d: import java.util.Iterator;
1:802464d: import java.util.List;
1:802464d: import java.util.Map;
1:802464d: import java.util.Random;
1:802464d: 
1:a07bfc3: import com.google.common.base.Preconditions;
1:802464d: import com.google.common.collect.AbstractIterator;
1:802464d: import com.google.common.collect.Iterables;
1:a07bfc3: import com.google.common.collect.Lists;
1:a07bfc3: import com.google.common.collect.Maps;
1:a07bfc3: import com.google.common.collect.Multiset;
1:a07bfc3: import org.apache.mahout.common.RandomUtils;
1:a07bfc3: import org.apache.mahout.math.list.DoubleArrayList;
1:a07bfc3: 
2:a07bfc3: /**
1:a07bfc3:  * Multinomial sampler that allows updates to element probabilities.  The basic idea is that sampling is
1:a07bfc3:  * done by using a simple balanced tree.  Probabilities are kept in the tree so that we can navigate to
1:a07bfc3:  * any leaf in log N time.  Updates are simple because we can just propagate them upwards.
1:a07bfc3:  * <p/>
1:a07bfc3:  * In order to facilitate access by value, we maintain an additional map from value to tree node.
1:a07bfc3:  */
1:8b6a26a: public final class Multinomial<T> implements Sampler<T>, Iterable<T> {
1:6d16230:   // these lists use heap ordering.  Thus, the root is at location 1, first level children at 2 and 3, second level
1:6d16230:   // at 4, 5 and 6, 7.
1:6d16230:   private final DoubleArrayList weight = new DoubleArrayList();
1:6d16230:   private final List<T> values = Lists.newArrayList();
1:6d16230:   private final Map<T, Integer> items = Maps.newHashMap();
1:6d16230:   private Random rand = RandomUtils.getRandom();
1:a07bfc3: 
1:6d16230:   public Multinomial() {
1:6d16230:     weight.add(0);
1:6d16230:     values.add(null);
1:6d16230:   }
1:6d16230: 
1:6d16230:   public Multinomial(Multiset<T> counts) {
1:6d16230:     this();
1:6d16230:     Preconditions.checkArgument(!counts.isEmpty(), "Need some data to build sampler");
1:6d16230:     rand = RandomUtils.getRandom();
1:6d16230:     for (T t : counts.elementSet()) {
1:6d16230:       add(t, counts.count(t));
1:6d16230:     }
16:a07bfc3:   }
1:a07bfc3: 
1:6d16230:   public Multinomial(Iterable<WeightedThing<T>> things) {
1:6d16230:     this();
1:6d16230:     for (WeightedThing<T> thing : things) {
1:6d16230:       add(thing.getValue(), thing.getWeight());
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: 
1:6d16230:   public void add(T value, double w) {
1:802464d:     Preconditions.checkNotNull(value);
1:6d16230:     Preconditions.checkArgument(!items.containsKey(value));
1:6d16230: 
1:6d16230:     int n = this.weight.size();
1:6d16230:     if (n == 1) {
1:6d16230:       weight.add(w);
1:6d16230:       values.add(value);
1:6d16230:       items.put(value, 1);
1:6d16230:     } else {
1:6d16230:       // parent comes down
1:6d16230:       weight.add(weight.get(n / 2));
1:6d16230:       values.add(values.get(n / 2));
1:6d16230:       items.put(values.get(n / 2), n);
1:6d16230:       n++;
1:6d16230: 
1:6d16230:       // new item goes in
1:6d16230:       items.put(value, n);
1:6d16230:       this.weight.add(w);
1:6d16230:       values.add(value);
1:6d16230: 
1:6d16230:       // parents get incremented all the way to the root
1:6d16230:       while (n > 1) {
1:6d16230:         n /= 2;
1:6d16230:         this.weight.set(n, this.weight.get(n) + w);
1:6d16230:       }
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: 
1:6d16230:   public double getWeight(T value) {
1:6d16230:     if (items.containsKey(value)) {
1:6d16230:       return weight.get(items.get(value));
1:6d16230:     } else {
1:6d16230:       return 0;
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: 
1:6d16230:   public double getProbability(T value) {
1:6d16230:     if (items.containsKey(value)) {
1:6d16230:       return weight.get(items.get(value)) / weight.get(1);
1:6d16230:     } else {
1:6d16230:       return 0;
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: 
1:6d16230:   public double getWeight() {
1:6d16230:     if (weight.size() > 1) {
1:6d16230:       return weight.get(1);
1:6d16230:     } else {
1:6d16230:       return 0;
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: 
1:6d16230:   public void delete(T value) {
1:6d16230:     set(value, 0);
1:6d16230:   }
1:6d16230: 
1:6d16230:   public void set(T value, double newP) {
1:6d16230:     Preconditions.checkArgument(items.containsKey(value));
1:6d16230:     int n = items.get(value);
1:6d16230:     if (newP <= 0) {
1:6d16230:       // this makes the iterator not see such an element even though we leave a phantom in the tree
1:6d16230:       // Leaving the phantom behind simplifies tree maintenance and testing, but isn't really necessary.
1:6d16230:       items.remove(value);
1:a07bfc3:     }
1:6d16230:     double oldP = weight.get(n);
1:6d16230:     while (n > 0) {
1:6d16230:       weight.set(n, weight.get(n) - oldP + newP);
1:6d16230:       n /= 2;
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: 
1:6d16230:   @Override
1:6d16230:   public T sample() {
1:6d16230:     Preconditions.checkArgument(!weight.isEmpty());
1:6d16230:     return sample(rand.nextDouble());
1:6d16230:   }
1:6d16230: 
1:6d16230:   public T sample(double u) {
1:6d16230:     u *= weight.get(1);
1:6d16230: 
1:6d16230:     int n = 1;
1:6d16230:     while (2 * n < weight.size()) {
1:6d16230:       // children are at 2n and 2n+1
1:6d16230:       double left = weight.get(2 * n);
1:6d16230:       if (u <= left) {
1:6d16230:         n = 2 * n;
1:6d16230:       } else {
1:6d16230:         u -= left;
1:6d16230:         n = 2 * n + 1;
1:6d16230:       }
1:a07bfc3:     }
1:6d16230:     return values.get(n);
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Exposed for testing only.  Returns a list of the leaf weights.  These are in an
1:6d16230:    * order such that probing just before and after the cumulative sum of these weights
1:b04eba0:    * will touch every element of the tree twice and thus will make it possible to test
1:b04eba0:    * every possible left/right decision in navigating the tree.
1:6d16230:    */
1:6d16230:   List<Double> getWeights() {
1:6d16230:     List<Double> r = Lists.newArrayList();
1:6d16230:     int i = Integer.highestOneBit(weight.size());
1:6d16230:     while (i < weight.size()) {
1:6d16230:       r.add(weight.get(i));
1:6d16230:       i++;
1:a07bfc3:     }
1:6d16230:     i /= 2;
1:6d16230:     while (i < Integer.highestOneBit(weight.size())) {
1:6d16230:       r.add(weight.get(i));
1:6d16230:       i++;
1:a07bfc3:     }
1:6d16230:     return r;
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   @Override
1:6d16230:   public Iterator<T> iterator() {
1:802464d:     return new AbstractIterator<T>() {
1:802464d:       Iterator<T> valuesIterator = Iterables.skip(values, 1).iterator();
1:802464d:       @Override
1:802464d:       protected T computeNext() {
1:802464d:         while (valuesIterator.hasNext()) {
1:802464d:           T next = valuesIterator.next();
1:802464d:           if (items.containsKey(next)) {
1:802464d:             return next;
1:802464d:           }
1:802464d:         }
1:802464d:         return endOfData();
1:802464d:       }
1:802464d:     };
1:6d16230:   }
1:a07bfc3: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:b04eba0
/////////////////////////////////////////////////////////////////////////
1:    * will touch every element of the tree twice and thus will make it possible to test
1:    * every possible left/right decision in navigating the tree.
author:dfilimon
-------------------------------------------------------------------------------
commit:802464d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Random;
1: 
1: import com.google.common.collect.AbstractIterator;
1: import com.google.common.collect.Iterables;
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkNotNull(value);
/////////////////////////////////////////////////////////////////////////
1:     return new AbstractIterator<T>() {
1:       Iterator<T> valuesIterator = Iterables.skip(values, 1).iterator();
1:       @Override
1:       protected T computeNext() {
1:         while (valuesIterator.hasNext()) {
1:           T next = valuesIterator.next();
1:           if (items.containsKey(next)) {
1:             return next;
1:           }
1:         }
1:         return endOfData();
1:       }
1:     };
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:   // these lists use heap ordering.  Thus, the root is at location 1, first level children at 2 and 3, second level
1:   // at 4, 5 and 6, 7.
1:   private final DoubleArrayList weight = new DoubleArrayList();
1:   private final List<T> values = Lists.newArrayList();
1:   private final Map<T, Integer> items = Maps.newHashMap();
1:   private Random rand = RandomUtils.getRandom();
1:   public Multinomial() {
1:     weight.add(0);
1:     values.add(null);
1:   }
1: 
1:   public Multinomial(Multiset<T> counts) {
1:     this();
1:     Preconditions.checkArgument(!counts.isEmpty(), "Need some data to build sampler");
1:     rand = RandomUtils.getRandom();
1:     for (T t : counts.elementSet()) {
1:       add(t, counts.count(t));
1:   }
1:   public Multinomial(Iterable<WeightedThing<T>> things) {
1:     this();
1:     for (WeightedThing<T> thing : things) {
1:       add(thing.getValue(), thing.getWeight());
1:   }
1:   public void add(T value, double w) {
1:     Preconditions.checkArgument(!items.containsKey(value));
1: 
1:     int n = this.weight.size();
1:     if (n == 1) {
1:       weight.add(w);
1:       values.add(value);
1:       items.put(value, 1);
1:     } else {
1:       // parent comes down
1:       weight.add(weight.get(n / 2));
1:       values.add(values.get(n / 2));
1:       items.put(values.get(n / 2), n);
1:       n++;
1: 
1:       // new item goes in
1:       items.put(value, n);
1:       this.weight.add(w);
1:       values.add(value);
1: 
1:       // parents get incremented all the way to the root
1:       while (n > 1) {
1:         n /= 2;
1:         this.weight.set(n, this.weight.get(n) + w);
1:       }
1:   }
1:   public double getWeight(T value) {
1:     if (items.containsKey(value)) {
1:       return weight.get(items.get(value));
1:     } else {
1:       return 0;
1:   }
1:   public double getProbability(T value) {
1:     if (items.containsKey(value)) {
1:       return weight.get(items.get(value)) / weight.get(1);
1:     } else {
1:       return 0;
1:   }
1:   public double getWeight() {
1:     if (weight.size() > 1) {
1:       return weight.get(1);
1:     } else {
1:       return 0;
1:   }
1:   public void delete(T value) {
1:     set(value, 0);
1:   }
1: 
1:   public void set(T value, double newP) {
1:     Preconditions.checkArgument(items.containsKey(value));
1:     int n = items.get(value);
1:     if (newP <= 0) {
1:       // this makes the iterator not see such an element even though we leave a phantom in the tree
1:       // Leaving the phantom behind simplifies tree maintenance and testing, but isn't really necessary.
1:       items.remove(value);
1:     double oldP = weight.get(n);
1:     while (n > 0) {
1:       weight.set(n, weight.get(n) - oldP + newP);
1:       n /= 2;
1:   }
1:   @Override
1:   public T sample() {
1:     Preconditions.checkArgument(!weight.isEmpty());
1:     return sample(rand.nextDouble());
1:   }
1: 
1:   public T sample(double u) {
1:     u *= weight.get(1);
1: 
1:     int n = 1;
1:     while (2 * n < weight.size()) {
1:       // children are at 2n and 2n+1
1:       double left = weight.get(2 * n);
1:       if (u <= left) {
1:         n = 2 * n;
1:       } else {
1:         u -= left;
1:         n = 2 * n + 1;
1:       }
1:     return values.get(n);
1:   }
1:   /**
1:    * Exposed for testing only.  Returns a list of the leaf weights.  These are in an
1:    * order such that probing just before and after the cumulative sum of these weights
0:    * will touch every element of the tree twice and thus will make every possible left/right
0:    * decision in navigating the tree.
1:    */
1:   List<Double> getWeights() {
1:     List<Double> r = Lists.newArrayList();
1:     int i = Integer.highestOneBit(weight.size());
1:     while (i < weight.size()) {
1:       r.add(weight.get(i));
1:       i++;
1:     i /= 2;
1:     while (i < Integer.highestOneBit(weight.size())) {
1:       r.add(weight.get(i));
1:       i++;
1:     return r;
1:   }
1:   @Override
1:   public Iterator<T> iterator() {
0:     return items.keySet().iterator();
1:   }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: public final class Multinomial<T> implements Sampler<T>, Iterable<T> {
0:     private final DoubleArrayList weight = new DoubleArrayList();
0:     private final List<T> values = Lists.newArrayList();
0:     private final Map<T, Integer> items = Maps.newHashMap();
/////////////////////////////////////////////////////////////////////////
0:         Preconditions.checkArgument(!counts.isEmpty(), "Need some data to build sampler");
/////////////////////////////////////////////////////////////////////////
0:         Preconditions.checkArgument(!weight.isEmpty());
/////////////////////////////////////////////////////////////////////////
0:         i /= 2;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import com.google.common.base.Preconditions;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Maps;
1: import com.google.common.collect.Multiset;
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.list.DoubleArrayList;
1: 
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Random;
1: 
1: /**
1:  * Multinomial sampler that allows updates to element probabilities.  The basic idea is that sampling is
1:  * done by using a simple balanced tree.  Probabilities are kept in the tree so that we can navigate to
1:  * any leaf in log N time.  Updates are simple because we can just propagate them upwards.
1:  * <p/>
1:  * In order to facilitate access by value, we maintain an additional map from value to tree node.
1:  */
0: public class Multinomial<T> implements Sampler<T>, Iterable<T> {
0:     // these lists use heap ordering.  Thus, the root is at location 1, first level children at 2 and 3, second level
0:     // at 4, 5 and 6, 7.
0:     private DoubleArrayList weight = new DoubleArrayList();
0:     private List<T> values = Lists.newArrayList();
0:     private Map<T, Integer> items = Maps.newHashMap();
0:     private Random rand = RandomUtils.getRandom();
1: 
0:     public Multinomial() {
0:         weight.add(0);
0:         values.add(null);
1:     }
1: 
0:     public Multinomial(Multiset<T> counts) {
0:         this();
0:         Preconditions.checkArgument(counts.size() > 0, "Need some data to build sampler");
0:         rand = RandomUtils.getRandom();
0:         for (T t : counts.elementSet()) {
0:             add(t, counts.count(t));
1:         }
1:     }
1: 
0:     public Multinomial(Iterable<WeightedThing<T>> things) {
0:         this();
0:         for (WeightedThing<T> thing : things) {
0:             add(thing.getValue(), thing.getWeight());
1:         }
1:     }
1: 
0:     public void add(T value, double w) {
0:         Preconditions.checkArgument(!items.containsKey(value));
1: 
0:         int n = this.weight.size();
0:         if (n == 1) {
0:             weight.add(w);
0:             values.add(value);
0:             items.put(value, 1);
0:         } else {
0:             // parent comes down
0:             weight.add(weight.get(n / 2));
0:             values.add(values.get(n / 2));
0:             items.put(values.get(n / 2), n);
0:             n++;
1: 
0:             // new item goes in
0:             items.put(value, n);
0:             this.weight.add(w);
0:             values.add(value);
1: 
0:             // parents get incremented all the way to the root
0:             while (n > 1) {
0:                 n /= 2;
0:                 this.weight.set(n, this.weight.get(n) + w);
1:             }
1:         }
1:     }
1: 
0:     public double getWeight(T value) {
0:         if (items.containsKey(value)) {
0:             return weight.get(items.get(value));
0:         } else {
0:             return 0;
1:         }
1:     }
1: 
0:     public double getProbability(T value) {
0:         if (items.containsKey(value)) {
0:             return weight.get(items.get(value)) / weight.get(1);
0:         } else {
0:             return 0;
1:         }
1:     }
1: 
0:     public double getWeight() {
0:         if (weight.size() > 1) {
0:             return weight.get(1);
0:         } else {
0:             return 0;
1:         }
1:     }
1: 
0:     public void delete(T value) {
0:         set(value, 0);
1:     }
1: 
0:     public void set(T value, double newP) {
0:         Preconditions.checkArgument(items.containsKey(value));
0:         int n = items.get(value);
0:         if (newP <= 0) {
0:             // this makes the iterator not see such an element even though we leave a phantom in the tree
0:             // Leaving the phantom behind simplifies tree maintenance and testing, but isn't really necessary.
0:             items.remove(value);
1:         }
0:         double oldP = weight.get(n);
0:         while (n > 0) {
0:             weight.set(n, weight.get(n) - oldP + newP);
0:             n /= 2;
1:         }
1:     }
1: 
0:     @Override
0:     public T sample() {
0:         Preconditions.checkArgument(weight.size() > 0);
0:         return sample(rand.nextDouble());
1:     }
1: 
0:     public T sample(double u) {
0:         u *= weight.get(1);
1: 
0:         int n = 1;
0:         while (2 * n < weight.size()) {
0:             // children are at 2n and 2n+1
0:             double left = weight.get(2 * n);
0:             if (u <= left) {
0:                 n = 2 * n;
0:             } else {
0:                 u -= left;
0:                 n = 2 * n + 1;
1:             }
1:         }
0:         return values.get(n);
1:     }
1: 
1:     /**
0:      * Exposed for testing only.  Returns a list of the leaf weights.  These are in an
0:      * order such that probing just before and after the cumulative sum of these weights
0:      * will touch every element of the tree twice and thus will make every possible left/right
0:      * decision in navigating the tree.
1:      */
0:     List<Double> getWeights() {
0:         List<Double> r = Lists.newArrayList();
0:         int i = Integer.highestOneBit(weight.size());
0:         while (i < weight.size()) {
0:             r.add(weight.get(i));
0:             i++;
1:         }
0:         i = i / 2;
0:         while (i < Integer.highestOneBit(weight.size())) {
0:             r.add(weight.get(i));
0:             i++;
1:         }
0:         return r;
1:     }
1: 
0:     @Override
0:     public Iterator<T> iterator() {
0:         return items.keySet().iterator();
1:     }
1: }
============================================================================