1:c4597cb: /**
1:c4597cb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c4597cb:  * contributor license agreements.  See the NOTICE file distributed with
1:c4597cb:  * this work for additional information regarding copyright ownership.
1:c4597cb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c4597cb:  * (the "License"); you may not use this file except in compliance with
1:c4597cb:  * the License.  You may obtain a copy of the License at
1:c4597cb:  *
1:c4597cb:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c4597cb:  *
1:c4597cb:  * Unless required by applicable law or agreed to in writing, software
1:c4597cb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c4597cb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c4597cb:  * See the License for the specific language governing permissions and
1:c4597cb:  * limitations under the License.
1:c4597cb:  */
1:c4597cb: 
1:c4597cb: package org.apache.mahout.cf.taste.impl.common;
1:c4597cb: 
1:c4597cb: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:c4597cb: import org.junit.Test;
1:c4597cb: 
1:c4597cb: /**
1:c4597cb:  * <p>Tests {@link WeightedRunningAverage} and {@link WeightedRunningAverageAndStdDev}.</p>
1:c4597cb:  */
1:c4597cb: public final class WeightedRunningAverageTest extends TasteTestCase {
1:c4597cb: 
1:c4597cb:   @Test
1:c4597cb:   public void testWeighted() {
1:c4597cb: 
1:c4597cb:     WeightedRunningAverage runningAverage = new WeightedRunningAverage();
1:c4597cb: 
1:c4597cb:     assertEquals(0, runningAverage.getCount());
1:c4597cb:     assertTrue(Double.isNaN(runningAverage.getAverage()));
1:c4597cb:     runningAverage.addDatum(1.0, 2.0);
2:c4597cb:     assertEquals(1.0, runningAverage.getAverage(), EPSILON);
1:05f9475:     runningAverage.addDatum(1.0);
1:05f9475:     assertEquals(1.0, runningAverage.getAverage(), EPSILON);
1:c4597cb:     runningAverage.addDatum(8.0, 0.5);
1:c4597cb:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:c4597cb:     runningAverage.addDatum(-4.0);
1:c4597cb:     assertEquals(2.0/3.0, runningAverage.getAverage(), EPSILON);
1:c4597cb: 
1:c4597cb:     runningAverage.removeDatum(-4.0);
1:c4597cb:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:c4597cb:     runningAverage.removeDatum(2.0, 2.0);
1:c4597cb:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:c4597cb: 
1:c4597cb:     runningAverage.changeDatum(0.0);
1:c4597cb:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:c4597cb:     runningAverage.changeDatum(4.0, 0.5);
1:c4597cb:     assertEquals(5.0/1.5, runningAverage.getAverage(), EPSILON);
1:c4597cb:   }
1:c4597cb: 
1:c4597cb:   @Test
1:c4597cb:   public void testWeightedAndStdDev() {
1:c4597cb: 
1:c4597cb:     WeightedRunningAverageAndStdDev runningAverage = new WeightedRunningAverageAndStdDev();
1:c4597cb: 
1:c4597cb:     assertEquals(0, runningAverage.getCount());
1:c4597cb:     assertTrue(Double.isNaN(runningAverage.getAverage()));
1:c4597cb:     assertTrue(Double.isNaN(runningAverage.getStandardDeviation()));
1:c4597cb: 
2:c4597cb:     runningAverage.addDatum(1.0);
1:c4597cb:     assertEquals(1.0, runningAverage.getAverage(), EPSILON);
1:c4597cb:     assertTrue(Double.isNaN(runningAverage.getStandardDeviation()));
1:c4597cb:     runningAverage.addDatum(1.0, 2.0);
1:c4597cb:     assertEquals(1.0, runningAverage.getAverage(), EPSILON);
1:c4597cb:     assertEquals(0.0, runningAverage.getStandardDeviation(), EPSILON);
1:c4597cb:     runningAverage.addDatum(8.0, 0.5);
1:c4597cb:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:c4597cb:     assertEquals(Math.sqrt(10.5), runningAverage.getStandardDeviation(), EPSILON);
1:c4597cb:     runningAverage.addDatum(-4.0);
1:c4597cb:     assertEquals(2.0/3.0, runningAverage.getAverage(), EPSILON);
1:c4597cb:     assertEquals(Math.sqrt(15.75), runningAverage.getStandardDeviation(), EPSILON);
1:c4597cb: 
1:c4597cb:     runningAverage.removeDatum(-4.0);
1:c4597cb:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:c4597cb:     assertEquals(Math.sqrt(10.5), runningAverage.getStandardDeviation(), EPSILON);
1:c4597cb:     runningAverage.removeDatum(2.0, 2.0);
1:c4597cb:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:c4597cb:     assertEquals(Math.sqrt(31.5), runningAverage.getStandardDeviation(), EPSILON);
1:c4597cb:   }
1:c4597cb: 
1:c4597cb: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:05f9475
/////////////////////////////////////////////////////////////////////////
1:     runningAverage.addDatum(1.0);
1:     assertEquals(1.0, runningAverage.getAverage(), EPSILON);
commit:c4597cb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.common;
1: 
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: import org.junit.Test;
1: 
1: /**
1:  * <p>Tests {@link WeightedRunningAverage} and {@link WeightedRunningAverageAndStdDev}.</p>
1:  */
1: public final class WeightedRunningAverageTest extends TasteTestCase {
1: 
1:   @Test
1:   public void testWeighted() {
1: 
1:     WeightedRunningAverage runningAverage = new WeightedRunningAverage();
1: 
1:     assertEquals(0, runningAverage.getCount());
1:     assertTrue(Double.isNaN(runningAverage.getAverage()));
1:     runningAverage.addDatum(1.0);
1:     assertEquals(1.0, runningAverage.getAverage(), EPSILON);
1:     runningAverage.addDatum(1.0, 2.0);
1:     assertEquals(1.0, runningAverage.getAverage(), EPSILON);
1:     runningAverage.addDatum(8.0, 0.5);
1:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:     runningAverage.addDatum(-4.0);
1:     assertEquals(2.0/3.0, runningAverage.getAverage(), EPSILON);
1: 
1:     runningAverage.removeDatum(-4.0);
1:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:     runningAverage.removeDatum(2.0, 2.0);
1:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1: 
1:     runningAverage.changeDatum(0.0);
1:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:     runningAverage.changeDatum(4.0, 0.5);
1:     assertEquals(5.0/1.5, runningAverage.getAverage(), EPSILON);
1:   }
1: 
1:   @Test
1:   public void testWeightedAndStdDev() {
1: 
1:     WeightedRunningAverageAndStdDev runningAverage = new WeightedRunningAverageAndStdDev();
1: 
1:     assertEquals(0, runningAverage.getCount());
1:     assertTrue(Double.isNaN(runningAverage.getAverage()));
1:     assertTrue(Double.isNaN(runningAverage.getStandardDeviation()));
1: 
1:     runningAverage.addDatum(1.0);
1:     assertEquals(1.0, runningAverage.getAverage(), EPSILON);
1:     assertTrue(Double.isNaN(runningAverage.getStandardDeviation()));
1:     runningAverage.addDatum(1.0, 2.0);
1:     assertEquals(1.0, runningAverage.getAverage(), EPSILON);
1:     assertEquals(0.0, runningAverage.getStandardDeviation(), EPSILON);
1:     runningAverage.addDatum(8.0, 0.5);
1:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:     assertEquals(Math.sqrt(10.5), runningAverage.getStandardDeviation(), EPSILON);
1:     runningAverage.addDatum(-4.0);
1:     assertEquals(2.0/3.0, runningAverage.getAverage(), EPSILON);
1:     assertEquals(Math.sqrt(15.75), runningAverage.getStandardDeviation(), EPSILON);
1: 
1:     runningAverage.removeDatum(-4.0);
1:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:     assertEquals(Math.sqrt(10.5), runningAverage.getStandardDeviation(), EPSILON);
1:     runningAverage.removeDatum(2.0, 2.0);
1:     assertEquals(2.0, runningAverage.getAverage(), EPSILON);
1:     assertEquals(Math.sqrt(31.5), runningAverage.getStandardDeviation(), EPSILON);
1:   }
1: 
1: }
============================================================================