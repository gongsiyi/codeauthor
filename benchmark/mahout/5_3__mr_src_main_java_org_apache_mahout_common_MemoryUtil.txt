2:131eb4a: /**
1:131eb4a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:131eb4a:  * contributor license agreements.  See the NOTICE file distributed with
1:131eb4a:  * this work for additional information regarding copyright ownership.
1:131eb4a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:131eb4a:  * (the "License"); you may not use this file except in compliance with
1:131eb4a:  * the License.  You may obtain a copy of the License at
2:131eb4a:  *
1:131eb4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:131eb4a:  *
1:131eb4a:  * Unless required by applicable law or agreed to in writing, software
1:131eb4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:131eb4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:131eb4a:  * See the License for the specific language governing permissions and
1:131eb4a:  * limitations under the License.
2:131eb4a:  */
1:131eb4a: package org.apache.mahout.common;
1:131eb4a: 
1:131eb4a: import java.util.concurrent.Executors;
1:131eb4a: import java.util.concurrent.ScheduledExecutorService;
1:131eb4a: import java.util.concurrent.ThreadFactory;
1:131eb4a: import java.util.concurrent.TimeUnit;
1:131eb4a: 
1:131eb4a: import org.slf4j.Logger;
1:131eb4a: import org.slf4j.LoggerFactory;
1:131eb4a: 
1:131eb4a: /**
1:131eb4a:  * Memory utilities.
1:131eb4a:  */
1:4fbfbc6: public final class MemoryUtil {
1:4fbfbc6: 
1:131eb4a:   private static final Logger log = LoggerFactory.getLogger(MemoryUtil.class);
1:131eb4a: 
1:4fbfbc6:   private MemoryUtil() {
1:4fbfbc6:   }
1:4fbfbc6: 
1:131eb4a:   /**
1:131eb4a:    * Logs current heap memory statistics.
1:131eb4a:    *
1:131eb4a:    * @see Runtime
1:131eb4a:    */
1:131eb4a:   public static void logMemoryStatistics() {
1:131eb4a:     Runtime runtime = Runtime.getRuntime();
1:131eb4a:     long freeBytes = runtime.freeMemory();
1:131eb4a:     long maxBytes = runtime.maxMemory();
1:131eb4a:     long totalBytes = runtime.totalMemory();
1:131eb4a:     long usedBytes = totalBytes - freeBytes;
1:8396a27:     log.info("Memory (bytes): {} used, {} heap, {} max", usedBytes, totalBytes,
1:8396a27:              maxBytes);
2:131eb4a:   }
1:131eb4a: 
1:bdb1c48:   private static volatile ScheduledExecutorService scheduler;
1:131eb4a: 
1:131eb4a:   /**
1:131eb4a:    * Constructs and starts a memory logger thread.
1:131eb4a:    *
1:131eb4a:    * @param rateInMillis how often memory info should be logged.
1:131eb4a:    */
1:131eb4a:   public static void startMemoryLogger(long rateInMillis) {
1:131eb4a:     stopMemoryLogger();
1:131eb4a:     scheduler = Executors.newScheduledThreadPool(1, new ThreadFactory() {
1:131eb4a:       private final ThreadFactory delegate = Executors.defaultThreadFactory();
1:131eb4a: 
1:131eb4a:       @Override
1:131eb4a:       public Thread newThread(Runnable r) {
1:131eb4a:         Thread t = delegate.newThread(r);
1:131eb4a:         t.setDaemon(true);
1:131eb4a:         return t;
1:131eb4a:       }
1:131eb4a:     });
1:131eb4a:     Runnable memoryLoogerRunnable = new Runnable() {
1:4fbfbc6:       @Override
1:131eb4a:       public void run() {
1:131eb4a:         logMemoryStatistics();
1:131eb4a:       }
1:131eb4a:     };
1:131eb4a:     scheduler.scheduleAtFixedRate(memoryLoogerRunnable, rateInMillis, rateInMillis,
1:131eb4a:         TimeUnit.MILLISECONDS);
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   /**
1:131eb4a:    * Constructs and starts a memory logger thread with a logging rate of 1000 milliseconds.
1:131eb4a:    */
1:131eb4a:   public static void startMemoryLogger() {
1:131eb4a:     startMemoryLogger(1000);
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   /**
1:131eb4a:    * Stops the memory logger, if any, started via {@link #startMemoryLogger(long)} or
1:131eb4a:    * {@link #startMemoryLogger()}.
1:131eb4a:    */
1:131eb4a:   public static void stopMemoryLogger() {
1:4fbfbc6:     if (scheduler != null) {
1:4fbfbc6:       scheduler.shutdownNow();
1:4fbfbc6:       scheduler = null;
1:131eb4a:     }
1:131eb4a:   }
1:131eb4a: 
1:131eb4a: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1:   private static volatile ScheduledExecutorService scheduler;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1:     log.info("Memory (bytes): {} used, {} heap, {} max", usedBytes, totalBytes,
1:              maxBytes);
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: public final class MemoryUtil {
1: 
1:   private MemoryUtil() {
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:       @Override
/////////////////////////////////////////////////////////////////////////
1:     if (scheduler != null) {
1:       scheduler.shutdownNow();
1:       scheduler = null;
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:131eb4a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.common;
1: 
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.ScheduledExecutorService;
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Memory utilities.
1:  */
0: public class MemoryUtil {
1:   private static final Logger log = LoggerFactory.getLogger(MemoryUtil.class);
1: 
1:   /**
1:    * Logs current heap memory statistics.
1:    *
1:    * @see Runtime
1:    */
1:   public static void logMemoryStatistics() {
1:     Runtime runtime = Runtime.getRuntime();
1:     long freeBytes = runtime.freeMemory();
1:     long maxBytes = runtime.maxMemory();
1:     long totalBytes = runtime.totalMemory();
1:     long usedBytes = totalBytes - freeBytes;
0:     log.info("Memory (bytes): {} used, {} heap, {} max", new Object[] { usedBytes, totalBytes,
0:             maxBytes });
1:   }
1: 
0:   private static ScheduledExecutorService scheduler;
1: 
1:   /**
1:    * Constructs and starts a memory logger thread.
1:    *
1:    * @param rateInMillis how often memory info should be logged.
1:    */
1:   public static void startMemoryLogger(long rateInMillis) {
1:     stopMemoryLogger();
1:     scheduler = Executors.newScheduledThreadPool(1, new ThreadFactory() {
1:       private final ThreadFactory delegate = Executors.defaultThreadFactory();
1: 
1:       @Override
1:       public Thread newThread(Runnable r) {
1:         Thread t = delegate.newThread(r);
1:         t.setDaemon(true);
1:         return t;
1:       }
1:     });
1:     Runnable memoryLoogerRunnable = new Runnable() {
1:       public void run() {
1:         logMemoryStatistics();
1:       }
1:     };
1:     scheduler.scheduleAtFixedRate(memoryLoogerRunnable, rateInMillis, rateInMillis,
1:         TimeUnit.MILLISECONDS);
1:   }
1: 
1:   /**
1:    * Constructs and starts a memory logger thread with a logging rate of 1000 milliseconds.
1:    */
1:   public static void startMemoryLogger() {
1:     startMemoryLogger(1000);
1:   }
1: 
1:   /**
1:    * Stops the memory logger, if any, started via {@link #startMemoryLogger(long)} or
1:    * {@link #startMemoryLogger()}.
1:    */
1:   public static void stopMemoryLogger() {
0:     if (scheduler == null) {
0:       return;
1:     }
0:     scheduler.shutdownNow();
0:     scheduler = null;
1:   }
1: 
1:   /**
0:    * Tests {@link MemoryLoggerThread}.
1:    *
0:    * @param args
0:    * @throws InterruptedException
1:    */
0:   public static void main(String[] args) throws InterruptedException {
0:     startMemoryLogger();
0:     Thread.sleep(10000);
1:   }
1: }
============================================================================