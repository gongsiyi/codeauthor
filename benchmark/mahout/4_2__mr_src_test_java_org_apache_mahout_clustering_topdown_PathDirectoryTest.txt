1:9d44881: /**
1:9d44881:  * Licensed to the Apache Software Foundation (ASF) under one
1:9d44881:  * or more contributor license agreements. See the NOTICE file
1:9d44881:  * distributed with this work for additional information
1:9d44881:  * regarding copyright ownership. The ASF licenses this file
1:9d44881:  * to you under the Apache License, Version 2.0 (the
1:9d44881:  * "License"); you may not use this file except in compliance
1:9d44881:  * with the License. You may obtain a copy of the License at
1:9d44881:  *
1:9d44881:  * http://www.apache.org/licenses/LICENSE-2.0
1:9d44881:  *
1:9d44881:  * Unless required by applicable law or agreed to in writing,
1:9d44881:  * software distributed under the License is distributed on an
1:9d44881:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9d44881:  * KIND, either express or implied. See the License for the
1:9d44881:  * specific language governing permissions and limitations
1:9d44881:  * under the License.
1:9d44881:  */
2:9d44881: 
1:9d44881: package org.apache.mahout.clustering.topdown;
1:9d44881: 
1:9d44881: import org.apache.hadoop.fs.Path;
1:564c3e1: import org.apache.mahout.common.MahoutTestCase;
1:9d44881: import org.junit.Test;
1:9d44881: 
1:564c3e1: import java.io.File;
1:564c3e1: 
1:564c3e1: public final class PathDirectoryTest extends MahoutTestCase {
1:9d44881:   
1:564c3e1:   private final Path output = new Path("output");
1:9d44881:   
1:9d44881:   @Test
1:9d44881:   public void shouldReturnTopLevelClusterPath() {
1:564c3e1:     Path expectedPath = new Path(output, PathDirectory.TOP_LEVEL_CLUSTER_DIRECTORY);
1:564c3e1:     assertEquals(expectedPath, PathDirectory.getTopLevelClusterPath(output));
1:9d44881:   }
1:9d44881:   
1:9d44881:   @Test
1:9d44881:   public void shouldReturnClusterPostProcessorOutputDirectory() {
1:564c3e1:     Path expectedPath = new Path(output, PathDirectory.POST_PROCESS_DIRECTORY);
1:564c3e1:     assertEquals(expectedPath, PathDirectory.getClusterPostProcessorOutputDirectory(output));
1:9d44881:   }
1:9d44881:   
1:9d44881:   @Test
1:9d44881:   public void shouldReturnClusterOutputClusteredPoints() {
1:564c3e1:     Path expectedPath = new Path(output, PathDirectory.CLUSTERED_POINTS_DIRECTORY + File.separator + '*');
1:564c3e1:     assertEquals(expectedPath, PathDirectory.getClusterOutputClusteredPoints(output));
1:9d44881:   }
1:9d44881:   
1:9d44881:   @Test
1:9d44881:   public void shouldReturnBottomLevelClusterPath() {
1:564c3e1:     Path expectedPath = new Path(output + File.separator
1:564c3e1:                                  + PathDirectory.BOTTOM_LEVEL_CLUSTER_DIRECTORY + File.separator
1:564c3e1:                                  + '1');
1:564c3e1:     assertEquals(expectedPath, PathDirectory.getBottomLevelClusterPath(output, "1"));
1:9d44881:   }
1:9d44881:   
1:9d44881:   @Test
1:9d44881:   public void shouldReturnClusterPathForClusterId() {
1:564c3e1:     Path expectedPath = new Path(PathDirectory.getClusterPostProcessorOutputDirectory(output), new Path("1"));
1:564c3e1:     assertEquals(expectedPath, PathDirectory.getClusterPathForClusterId(
1:564c3e1:         PathDirectory.getClusterPostProcessorOutputDirectory(output), "1"));
1:9d44881:   }
1:9d44881:   
1:9d44881: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
1: import java.io.File;
1: 
1: public final class PathDirectoryTest extends MahoutTestCase {
1:   private final Path output = new Path("output");
1:     Path expectedPath = new Path(output, PathDirectory.TOP_LEVEL_CLUSTER_DIRECTORY);
1:     assertEquals(expectedPath, PathDirectory.getTopLevelClusterPath(output));
1:     Path expectedPath = new Path(output, PathDirectory.POST_PROCESS_DIRECTORY);
1:     assertEquals(expectedPath, PathDirectory.getClusterPostProcessorOutputDirectory(output));
1:     Path expectedPath = new Path(output, PathDirectory.CLUSTERED_POINTS_DIRECTORY + File.separator + '*');
1:     assertEquals(expectedPath, PathDirectory.getClusterOutputClusteredPoints(output));
1:     Path expectedPath = new Path(output + File.separator
1:                                  + PathDirectory.BOTTOM_LEVEL_CLUSTER_DIRECTORY + File.separator
1:                                  + '1');
1:     assertEquals(expectedPath, PathDirectory.getBottomLevelClusterPath(output, "1"));
1:     Path expectedPath = new Path(PathDirectory.getClusterPostProcessorOutputDirectory(output), new Path("1"));
1:     assertEquals(expectedPath, PathDirectory.getClusterPathForClusterId(
1:         PathDirectory.getClusterPostProcessorOutputDirectory(output), "1"));
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:9d44881
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements. See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership. The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License. You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied. See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.mahout.clustering.topdown;
1: 
0: import static java.io.File.separator;
0: import static org.apache.mahout.clustering.topdown.PathDirectory.getClusterPostProcessorOutputDirectory;
0: import static org.apache.mahout.clustering.topdown.TopDownClusteringPathConstants.clusteredPointsDirectory;
0: import static org.apache.mahout.clustering.topdown.TopDownClusteringPathConstants.postProcessDirectory;
0: import static org.apache.mahout.clustering.topdown.TopDownClusteringPathConstants.topLevelClusterDirectory;
0: import junit.framework.Assert;
1: 
1: import org.apache.hadoop.fs.Path;
1: import org.junit.Test;
1: 
0: public class PathDirectoryTest {
1:   
0:   private Path output = new Path("output");
1:   
1:   @Test
1:   public void shouldReturnTopLevelClusterPath() {
0:     Path expectedPath = new Path(output, topLevelClusterDirectory);
0:     Assert.assertEquals(expectedPath, PathDirectory.getTopLevelClusterPath(output));
1:   }
1:   
1:   @Test
1:   public void shouldReturnClusterPostProcessorOutputDirectory() {
0:     Path expectedPath = new Path(output, postProcessDirectory);
0:     Assert.assertEquals(expectedPath, getClusterPostProcessorOutputDirectory(output));
1:   }
1:   
1:   @Test
1:   public void shouldReturnClusterOutputClusteredPoints() {
0:     Path expectedPath = new Path(output, clusteredPointsDirectory + separator + "*");
0:     Assert.assertEquals(expectedPath, PathDirectory.getClusterOutputClusteredPoints(output));
1:   }
1:   
1:   @Test
1:   public void shouldReturnBottomLevelClusterPath() {
0:     Path expectedPath = new Path(output + separator
0:                                  + TopDownClusteringPathConstants.bottomLevelClusterDirectory + separator
0:                                  + "1");
0:     Assert.assertEquals(expectedPath, PathDirectory.getBottomLevelClusterPath(output, "1"));
1:   }
1:   
1:   @Test
1:   public void shouldReturnClusterPathForClusterId() {
0:     Path expectedPath = new Path(getClusterPostProcessorOutputDirectory(output), new Path("1"));
0:     Assert.assertEquals(expectedPath,
0:       PathDirectory.getClusterPathForClusterId(getClusterPostProcessorOutputDirectory(output), "1"));
1:   }
1:   
1: }
============================================================================