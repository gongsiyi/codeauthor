1:4fbab15: /*
1:4fbab15:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4fbab15:  * contributor license agreements.  See the NOTICE file distributed with
1:4fbab15:  * this work for additional information regarding copyright ownership.
1:4fbab15:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4fbab15:  * (the "License"); you may not use this file except in compliance with
1:4fbab15:  * the License.  You may obtain a copy of the License at
1:4fbab15:  *
1:4fbab15:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4fbab15:  *
1:4fbab15:  * Unless required by applicable law or agreed to in writing, software
1:4fbab15:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4fbab15:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4fbab15:  * See the License for the specific language governing permissions and
1:4fbab15:  * limitations under the License.
1:4fbab15:  */
1:4fbab15: 
1:4fbab15: package org.apache.mahout.cf.taste.impl.eval;
1:4fbab15: 
1:4fbab15: import org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev;
1:4fbab15: import org.slf4j.Logger;
1:4fbab15: import org.slf4j.LoggerFactory;
1:4fbab15: 
1:4fbab15: import java.util.concurrent.Callable;
1:4fbab15: import java.util.concurrent.atomic.AtomicInteger;
1:4fbab15: 
1:4fbab15: final class StatsCallable implements Callable<Void> {
1:4fbab15:   
1:4fbab15:   private static final Logger log = LoggerFactory.getLogger(StatsCallable.class);
1:4fbab15:   
1:4fbab15:   private final Callable<Void> delegate;
1:4fbab15:   private final boolean logStats;
1:4fbab15:   private final RunningAverageAndStdDev timing;
1:4fbab15:   private final AtomicInteger noEstimateCounter;
1:4fbab15:   
1:4fbab15:   StatsCallable(Callable<Void> delegate,
1:4fbab15:                 boolean logStats,
1:4fbab15:                 RunningAverageAndStdDev timing,
1:4fbab15:                 AtomicInteger noEstimateCounter) {
1:4fbab15:     this.delegate = delegate;
1:4fbab15:     this.logStats = logStats;
1:4fbab15:     this.timing = timing;
1:4fbab15:     this.noEstimateCounter = noEstimateCounter;
1:4fbab15:   }
1:4fbab15:   
1:4fbab15:   @Override
1:4fbab15:   public Void call() throws Exception {
1:4fbab15:     long start = System.currentTimeMillis();
1:4fbab15:     delegate.call();
1:4fbab15:     long end = System.currentTimeMillis();
1:4fbab15:     timing.addDatum(end - start);
1:4fbab15:     if (logStats) {
1:4fbab15:       Runtime runtime = Runtime.getRuntime();
1:4fbab15:       int average = (int) timing.getAverage();
1:4fbab15:       log.info("Average time per recommendation: {}ms", average);
1:4fbab15:       long totalMemory = runtime.totalMemory();
1:4fbab15:       long memory = totalMemory - runtime.freeMemory();
1:4fbab15:       log.info("Approximate memory used: {}MB / {}MB", memory / 1000000L, totalMemory / 1000000L);
1:4fbab15:       log.info("Unable to recommend in {} cases", noEstimateCounter.get());
1:4fbab15:     }
1:4fbab15:     return null;
1:4fbab15:   }
1:4fbab15: 
1:4fbab15: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbab15
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.eval;
1: 
1: import org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: final class StatsCallable implements Callable<Void> {
1:   
1:   private static final Logger log = LoggerFactory.getLogger(StatsCallable.class);
1:   
1:   private final Callable<Void> delegate;
1:   private final boolean logStats;
1:   private final RunningAverageAndStdDev timing;
1:   private final AtomicInteger noEstimateCounter;
1:   
1:   StatsCallable(Callable<Void> delegate,
1:                 boolean logStats,
1:                 RunningAverageAndStdDev timing,
1:                 AtomicInteger noEstimateCounter) {
1:     this.delegate = delegate;
1:     this.logStats = logStats;
1:     this.timing = timing;
1:     this.noEstimateCounter = noEstimateCounter;
1:   }
1:   
1:   @Override
1:   public Void call() throws Exception {
1:     long start = System.currentTimeMillis();
1:     delegate.call();
1:     long end = System.currentTimeMillis();
1:     timing.addDatum(end - start);
1:     if (logStats) {
1:       Runtime runtime = Runtime.getRuntime();
1:       int average = (int) timing.getAverage();
1:       log.info("Average time per recommendation: {}ms", average);
1:       long totalMemory = runtime.totalMemory();
1:       long memory = totalMemory - runtime.freeMemory();
1:       log.info("Approximate memory used: {}MB / {}MB", memory / 1000000L, totalMemory / 1000000L);
1:       log.info("Unable to recommend in {} cases", noEstimateCounter.get());
1:     }
1:     return null;
1:   }
1: 
1: }
============================================================================