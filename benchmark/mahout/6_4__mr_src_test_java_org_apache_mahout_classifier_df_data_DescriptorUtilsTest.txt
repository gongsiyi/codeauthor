1:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c37a84:  * contributor license agreements.  See the NOTICE file distributed with
1:8c37a84:  * this work for additional information regarding copyright ownership.
1:8c37a84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c37a84:  * (the "License"); you may not use this file except in compliance with
1:8c37a84:  * the License.  You may obtain a copy of the License at
1:8c37a84:  *
1:8c37a84:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:8c37a84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c37a84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c37a84:  * See the License for the specific language governing permissions and
1:8c37a84:  * limitations under the License.
1:8c37a84:  */
5:8c37a84: 
1:52ce412: package org.apache.mahout.classifier.df.data;
1:df73dbc: 
1:8c37a84: import java.util.Random;
1:8c37a84: 
1:434cdff: import org.apache.mahout.common.MahoutTestCase;
1:8547de7: import org.apache.mahout.common.RandomUtils;
1:52ce412: import org.apache.mahout.classifier.df.data.Dataset.Attribute;
1:ff79ff4: import org.junit.Test;
1:1ffa3a4: @Deprecated
1:ff79ff4: public final class DescriptorUtilsTest extends MahoutTestCase {
1:8c37a84: 
1:8c37a84:   /**
1:8c37a84:    * Test method for
1:52ce412:    * {@link org.apache.mahout.classifier.df.data.DescriptorUtils#parseDescriptor(java.lang.CharSequence)}.
1:8c37a84:    */
1:ff79ff4:   @Test
1:8c37a84:   public void testParseDescriptor() throws Exception {
1:8c37a84:     int n = 10;
1:8c37a84:     int maxnbAttributes = 100;
1:8c37a84: 
1:8547de7:     Random rng = RandomUtils.getRandom();
1:8c37a84:     
1:8c37a84:     for (int nloop = 0; nloop < n; nloop++) {
1:8c37a84:       int nbAttributes = rng.nextInt(maxnbAttributes) + 1;
1:8c37a84: 
1:8547de7:       char[] tokens = Utils.randomTokens(rng, nbAttributes);
1:8547de7:       Attribute[] attrs = DescriptorUtils.parseDescriptor(Utils.generateDescriptor(tokens));
1:8c37a84: 
1:8c37a84:       // verify that the attributes matches the token list
1:8c37a84:       assertEquals("attributes size", nbAttributes, attrs.length);
1:8c37a84: 
1:8c37a84:       for (int attr = 0; attr < nbAttributes; attr++) {
1:8c37a84:         switch (tokens[attr]) {
1:8c37a84:           case 'I':
1:8c37a84:             assertTrue(attrs[attr].isIgnored());
1:8c37a84:             break;
1:8c37a84:           case 'N':
1:8c37a84:             assertTrue(attrs[attr].isNumerical());
1:8c37a84:             break;
1:8c37a84:           case 'C':
1:8c37a84:             assertTrue(attrs[attr].isCategorical());
1:8c37a84:             break;
1:8c37a84:           case 'L':
1:8c37a84:             assertTrue(attrs[attr].isLabel());
1:8c37a84:             break;
1:df73dbc:         }
2:8c37a84:       }
1:8c37a84:     }
1:8c37a84:   }
1:8c37a84: 
1:ff79ff4:   @Test
1:8c37a84:   public void testGenerateDescription() throws Exception {
1:8c37a84:     validate("", "");
1:8c37a84:     validate("I L C C N N N C", "I L C C N N N C");
1:8c37a84:     validate("I L C C N N N C", "I L 2 C 3 N C");
1:8c37a84:     validate("I L C C N N N C", " I L  2 C 3 N C ");
1:8c37a84:     
1:8c37a84:     try {
1:8c37a84:       validate("", "I L 2 2 C 2 N C");
1:8c37a84:       fail("2 consecutive multiplicators");
1:8c37a84:     } catch (DescriptorException e) {
1:8c37a84:     }
1:8c37a84:     
1:8c37a84:     try {
1:8c37a84:       validate("", "I L 2 C -2 N C");
1:8c37a84:       fail("negative multiplicator");
1:8c37a84:     } catch (DescriptorException e) {
1:8c37a84:     }
1:8c37a84:   }
1:8c37a84:   
1:3d44c1e:   private static void validate(String descriptor, CharSequence description) throws DescriptorException {
1:8c37a84:     assertEquals(descriptor, DescriptorUtils.generateDescriptor(description));
1:8c37a84:   }
1:d911fce: 
1:8c37a84: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.data;
1: import org.apache.mahout.classifier.df.data.Dataset.Attribute;
1:    * {@link org.apache.mahout.classifier.df.data.DescriptorUtils#parseDescriptor(java.lang.CharSequence)}.
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:3d44c1e
/////////////////////////////////////////////////////////////////////////
0:    * {@link org.apache.mahout.df.data.DescriptorUtils#parseDescriptor(java.lang.CharSequence)}.
/////////////////////////////////////////////////////////////////////////
1:   private static void validate(String descriptor, CharSequence description) throws DescriptorException {
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public final class DescriptorUtilsTest extends MahoutTestCase {
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
commit:d911fce
/////////////////////////////////////////////////////////////////////////
0:   private static void validate(String descriptor, String description) throws DescriptorException {
1: 
commit:434cdff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
0: public class DescriptorUtilsTest extends MahoutTestCase {
commit:8547de7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1:     Random rng = RandomUtils.getRandom();
1:       char[] tokens = Utils.randomTokens(rng, nbAttributes);
1:       Attribute[] attrs = DescriptorUtils.parseDescriptor(Utils.generateDescriptor(tokens));
/////////////////////////////////////////////////////////////////////////
0:   protected static void validate(String descriptor, String description) throws DescriptorException {
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:df73dbc
/////////////////////////////////////////////////////////////////////////
0:   @Override
0:   protected void setUp() throws Exception {
0:     super.setUp();
0:     RandomUtils.useTestSeed();
1:   }
1:        
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.data;
1: 
0: import static org.apache.mahout.df.data.DescriptorUtils.parseDescriptor;
0: import static org.apache.mahout.df.data.Utils.generateDescriptor;
0: import static org.apache.mahout.df.data.Utils.randomTokens;
1: 
1: import java.util.Random;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.apache.mahout.df.data.DescriptorUtils;
0: import org.apache.mahout.df.data.Dataset.Attribute;
0: import org.apache.mahout.df.data.DescriptorUtils.DescriptorException;
1: 
0: public class DescriptorUtilsTest extends TestCase {
1: 
1:   /**
1:    * Test method for
0:    * {@link org.apache.mahout.df.data.DescriptorUtils#parseDescriptor(java.lang.String)}.
1:    */
1:   public void testParseDescriptor() throws Exception {
1:     int n = 10;
1:     int maxnbAttributes = 100;
1: 
0:     Random rng = new Random();
1:     
1:     for (int nloop = 0; nloop < n; nloop++) {
1:       int nbAttributes = rng.nextInt(maxnbAttributes) + 1;
1: 
0:       char[] tokens = randomTokens(rng, nbAttributes);
0:       Attribute[] attrs = parseDescriptor(generateDescriptor(tokens));
1: 
1:       // verify that the attributes matches the token list
1:       assertEquals("attributes size", nbAttributes, attrs.length);
1: 
1:       for (int attr = 0; attr < nbAttributes; attr++) {
1:         switch (tokens[attr]) {
1:           case 'I':
1:             assertTrue(attrs[attr].isIgnored());
1:             break;
1:           case 'N':
1:             assertTrue(attrs[attr].isNumerical());
1:             break;
1:           case 'C':
1:             assertTrue(attrs[attr].isCategorical());
1:             break;
1:           case 'L':
1:             assertTrue(attrs[attr].isLabel());
1:             break;
1:         }
1:       }
1:     }
1:   }
1: 
1:   public void testGenerateDescription() throws Exception {
1:     validate("", "");
1:     validate("I L C C N N N C", "I L C C N N N C");
1:     validate("I L C C N N N C", "I L 2 C 3 N C");
1:     validate("I L C C N N N C", " I L  2 C 3 N C ");
1:     
1:     try {
1:       validate("", "I L 2 2 C 2 N C");
1:       fail("2 consecutive multiplicators");
1:     } catch (DescriptorException e) {
1:     }
1:     
1:     try {
1:       validate("", "I L 2 C -2 N C");
1:       fail("negative multiplicator");
1:     } catch (DescriptorException e) {
1:     }
1:   }
1:   
0:   protected void validate(String descriptor, String description) throws DescriptorException {
1:     assertEquals(descriptor, DescriptorUtils.generateDescriptor(description));
1:   }
1: }
============================================================================