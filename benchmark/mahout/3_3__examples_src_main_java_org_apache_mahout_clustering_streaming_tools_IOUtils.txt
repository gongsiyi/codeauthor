1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:fab9d37: package org.apache.mahout.clustering.streaming.tools;
1:fab9d37: 
1:fab9d37: import com.google.common.base.Function;
1:fab9d37: import com.google.common.base.Preconditions;
1:fab9d37: import com.google.common.collect.Iterables;
1:fab9d37: import org.apache.mahout.clustering.iterator.ClusterWritable;
1:fab9d37: import org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable;
1:fab9d37: import org.apache.mahout.math.Centroid;
1:fab9d37: import org.apache.mahout.math.Vector;
1:fab9d37: import org.apache.mahout.math.VectorWritable;
1:fab9d37: 
1:fab9d37: public class IOUtils {
1:58cc1ae: 
1:58cc1ae:   private IOUtils() {}
1:58cc1ae: 
1:fab9d37:   /**
1:fab9d37:    * Converts CentroidWritable values in a sequence file into Centroids lazily.
1:fab9d37:    * @param dirIterable the source iterable (comes from a SequenceFileDirIterable).
1:fab9d37:    * @return an Iterable<Centroid> with the converted vectors.
1:fab9d37:    */
1:fab9d37:   public static Iterable<Centroid> getCentroidsFromCentroidWritableIterable(
1:fab9d37:       Iterable<CentroidWritable>  dirIterable) {
1:fab9d37:     return Iterables.transform(dirIterable, new Function<CentroidWritable, Centroid>() {
1:fab9d37:       @Override
1:fab9d37:       public Centroid apply(CentroidWritable input) {
1:fab9d37:         Preconditions.checkNotNull(input);
1:fab9d37:         return input.getCentroid().clone();
1:fab9d37:       }
1:fab9d37:     });
1:fab9d37:   }
1:fab9d37: 
1:fab9d37:   /**
1:fab9d37:    * Converts CentroidWritable values in a sequence file into Centroids lazily.
1:fab9d37:    * @param dirIterable the source iterable (comes from a SequenceFileDirIterable).
1:fab9d37:    * @return an Iterable<Centroid> with the converted vectors.
1:fab9d37:    */
1:fab9d37:   public static Iterable<Centroid> getCentroidsFromClusterWritableIterable(Iterable<ClusterWritable>  dirIterable) {
1:fab9d37:     return Iterables.transform(dirIterable, new Function<ClusterWritable, Centroid>() {
1:fab9d37:       int numClusters = 0;
1:fab9d37:       @Override
1:fab9d37:       public Centroid apply(ClusterWritable input) {
1:fab9d37:         Preconditions.checkNotNull(input);
1:fab9d37:         return new Centroid(numClusters++, input.getValue().getCenter().clone(),
1:fab9d37:             input.getValue().getTotalObservations());
1:fab9d37:       }
1:fab9d37:     });
1:fab9d37:   }
1:fab9d37: 
1:fab9d37:   /**
1:fab9d37:    * Converts VectorWritable values in a sequence file into Vectors lazily.
1:fab9d37:    * @param dirIterable the source iterable (comes from a SequenceFileDirIterable).
1:fab9d37:    * @return an Iterable<Vector> with the converted vectors.
1:fab9d37:    */
1:fab9d37:   public static Iterable<Vector> getVectorsFromVectorWritableIterable(Iterable<VectorWritable> dirIterable) {
1:fab9d37:     return Iterables.transform(dirIterable, new Function<VectorWritable, Vector>() {
1:fab9d37:       @Override
1:fab9d37:       public Vector apply(VectorWritable input) {
1:fab9d37:         Preconditions.checkNotNull(input);
1:fab9d37:         return input.get().clone();
1:fab9d37:       }
1:fab9d37:     });
1:fab9d37:   }
1:fab9d37: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1: 
1:   private IOUtils() {}
1: 
author:dfilimon
-------------------------------------------------------------------------------
commit:fab9d37
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.streaming.tools;
1: 
1: import com.google.common.base.Function;
1: import com.google.common.base.Preconditions;
1: import com.google.common.collect.Iterables;
1: import org.apache.mahout.clustering.iterator.ClusterWritable;
1: import org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable;
1: import org.apache.mahout.math.Centroid;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: 
1: public class IOUtils {
1:   /**
1:    * Converts CentroidWritable values in a sequence file into Centroids lazily.
1:    * @param dirIterable the source iterable (comes from a SequenceFileDirIterable).
1:    * @return an Iterable<Centroid> with the converted vectors.
1:    */
1:   public static Iterable<Centroid> getCentroidsFromCentroidWritableIterable(
1:       Iterable<CentroidWritable>  dirIterable) {
1:     return Iterables.transform(dirIterable, new Function<CentroidWritable, Centroid>() {
1:       @Override
1:       public Centroid apply(CentroidWritable input) {
1:         Preconditions.checkNotNull(input);
1:         return input.getCentroid().clone();
1:       }
1:     });
1:   }
1: 
1:   /**
1:    * Converts CentroidWritable values in a sequence file into Centroids lazily.
1:    * @param dirIterable the source iterable (comes from a SequenceFileDirIterable).
1:    * @return an Iterable<Centroid> with the converted vectors.
1:    */
1:   public static Iterable<Centroid> getCentroidsFromClusterWritableIterable(Iterable<ClusterWritable>  dirIterable) {
1:     return Iterables.transform(dirIterable, new Function<ClusterWritable, Centroid>() {
1:       int numClusters = 0;
1:       @Override
1:       public Centroid apply(ClusterWritable input) {
1:         Preconditions.checkNotNull(input);
1:         return new Centroid(numClusters++, input.getValue().getCenter().clone(),
1:             input.getValue().getTotalObservations());
1:       }
1:     });
1:   }
1: 
1:   /**
1:    * Converts VectorWritable values in a sequence file into Vectors lazily.
1:    * @param dirIterable the source iterable (comes from a SequenceFileDirIterable).
1:    * @return an Iterable<Vector> with the converted vectors.
1:    */
1:   public static Iterable<Vector> getVectorsFromVectorWritableIterable(Iterable<VectorWritable> dirIterable) {
1:     return Iterables.transform(dirIterable, new Function<VectorWritable, Vector>() {
1:       @Override
1:       public Vector apply(VectorWritable input) {
1:         Preconditions.checkNotNull(input);
1:         return input.get().clone();
1:       }
1:     });
1:   }
1: }
============================================================================