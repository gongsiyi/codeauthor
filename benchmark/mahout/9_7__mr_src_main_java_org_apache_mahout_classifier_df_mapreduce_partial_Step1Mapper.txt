1:287b72b: /**
1:287b72b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:287b72b:  * contributor license agreements.  See the NOTICE file distributed with
1:287b72b:  * this work for additional information regarding copyright ownership.
1:287b72b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:287b72b:  * (the "License"); you may not use this file except in compliance with
1:287b72b:  * the License.  You may obtain a copy of the License at
1:287b72b:  *
1:287b72b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:287b72b:  *
1:287b72b:  * Unless required by applicable law or agreed to in writing, software
1:287b72b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:287b72b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:287b72b:  * See the License for the specific language governing permissions and
1:287b72b:  * limitations under the License.
1:287b72b:  */
4:287b72b: 
1:52ce412: package org.apache.mahout.classifier.df.mapreduce.partial;
1:287b72b: 
1:d6aba1a: import com.google.common.base.Preconditions;
1:287b72b: import org.apache.hadoop.conf.Configuration;
1:287b72b: import org.apache.hadoop.io.LongWritable;
1:287b72b: import org.apache.hadoop.io.Text;
1:52ce412: import org.apache.mahout.classifier.df.Bagging;
1:52ce412: import org.apache.mahout.classifier.df.data.Data;
1:52ce412: import org.apache.mahout.classifier.df.data.DataConverter;
1:52ce412: import org.apache.mahout.classifier.df.data.Instance;
1:52ce412: import org.apache.mahout.classifier.df.mapreduce.Builder;
1:52ce412: import org.apache.mahout.classifier.df.mapreduce.MapredMapper;
1:52ce412: import org.apache.mahout.classifier.df.mapreduce.MapredOutput;
1:52ce412: import org.apache.mahout.classifier.df.node.Node;
1:d6aba1a: import org.apache.mahout.common.RandomUtils;
1:287b72b: import org.slf4j.Logger;
1:287b72b: import org.slf4j.LoggerFactory;
1:287b72b: 
1:d6aba1a: import java.io.IOException;
1:85f9ece: import java.util.ArrayList;
1:d6aba1a: import java.util.List;
1:d6aba1a: import java.util.Random;
1:287b72b: 
1:287b72b: /**
1:ad11134:  * First step of the Partial Data Builder. Builds the trees using the data available in the InputSplit.
1:ad11134:  * Predict the oob classes for each tree in its growing partition (input split).
1:287b72b:  */
1:1ffa3a4: @Deprecated
1:ad11134: public class Step1Mapper extends MapredMapper<LongWritable,Text,TreeID,MapredOutput> {
1:287b72b:   
1:287b72b:   private static final Logger log = LoggerFactory.getLogger(Step1Mapper.class);
1:287b72b:   
1:287b72b:   /** used to convert input values to data instances */
1:8547de7:   private DataConverter converter;
1:287b72b:   
1:8547de7:   private Random rng;
1:287b72b:   
1:287b72b:   /** number of trees to be built by this mapper */
1:8547de7:   private int nbTrees;
1:287b72b:   
1:287b72b:   /** id of the first tree */
1:fc74924:   private int firstTreeId;
1:287b72b:   
1:287b72b:   /** mapper's partition */
1:8547de7:   private int partition;
1:287b72b:   
1:287b72b:   /** will contain all instances if this mapper's split */
1:85f9ece:   private final List<Instance> instances = new ArrayList<>();
1:819cc97:   
1:fc74924:   public int getFirstTreeId() {
1:fc74924:     return firstTreeId;
2:287b72b:   }
1:287b72b:   
1:287b72b:   @Override
1:ad11134:   protected void setup(Context context) throws IOException, InterruptedException {
1:287b72b:     super.setup(context);
1:287b72b:     Configuration conf = context.getConfiguration();
1:287b72b:     
1:ad11134:     configure(Builder.getRandomSeed(conf), conf.getInt("mapred.task.partition", -1),
1:ad11134:       Builder.getNumMaps(conf), Builder.getNbTrees(conf));
1:287b72b:   }
1:287b72b:   
1:287b72b:   /**
1:287b72b:    * Useful when testing
1:287b72b:    * 
1:ad11134:    * @param partition
1:ad11134:    *          current mapper inputSplit partition
1:ad11134:    * @param numMapTasks
1:ad11134:    *          number of running map tasks
1:ad11134:    * @param numTrees
1:ad11134:    *          total number of trees in the forest
1:287b72b:    */
1:ad11134:   protected void configure(Long seed, int partition, int numMapTasks, int numTrees) {
1:287b72b:     converter = new DataConverter(getDataset());
1:287b72b:     
1:287b72b:     // prepare random-numders generator
1:ea65197:     log.debug("seed : {}", seed);
1:ad11134:     if (seed == null) {
1:8547de7:       rng = RandomUtils.getRandom();
1:ad11134:     } else {
1:8547de7:       rng = RandomUtils.getRandom(seed);
1:287b72b:     }
1:287b72b:     
1:287b72b:     // mapper's partition
1:cd167f9:     Preconditions.checkArgument(partition >= 0, "Wrong partition ID: " + partition + ". Partition must be >= 0!");
1:287b72b:     this.partition = partition;
1:287b72b:     
1:287b72b:     // compute number of trees to build
1:287b72b:     nbTrees = nbTrees(numMapTasks, numTrees, partition);
1:287b72b:     
1:287b72b:     // compute first tree id
1:287b72b:     firstTreeId = 0;
1:287b72b:     for (int p = 0; p < partition; p++) {
1:287b72b:       firstTreeId += nbTrees(numMapTasks, numTrees, p);
1:287b72b:     }
1:287b72b:     
1:ea65197:     log.debug("partition : {}", partition);
1:ea65197:     log.debug("nbTrees : {}", nbTrees);
1:ea65197:     log.debug("firstTreeId : {}", firstTreeId);
1:287b72b:   }
1:287b72b:   
1:287b72b:   /**
1:4e1b7a6:    * Compute the number of trees for a given partition. The first partitions may be longer
1:4e1b7a6:    * than the rest because of the remainder.
1:287b72b:    * 
1:ad11134:    * @param numMaps
1:ad11134:    *          total number of maps (partitions)
1:ad11134:    * @param numTrees
1:ad11134:    *          total number of trees to build
1:ad11134:    * @param partition
1:ad11134:    *          partition to compute the number of trees for
1:287b72b:    */
1:287b72b:   public static int nbTrees(int numMaps, int numTrees, int partition) {
1:4e1b7a6:     int treesPerMapper = numTrees / numMaps;
1:4e1b7a6:     int remainder = numTrees - numMaps * treesPerMapper;
1:4e1b7a6:     return treesPerMapper + (partition < remainder ? 1 : 0);
1:287b72b:   }
1:287b72b:   
1:287b72b:   @Override
1:287b72b:   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
1:083eb98:     instances.add(converter.convert(value.toString()));
1:287b72b:   }
1:287b72b:   
1:287b72b:   @Override
1:287b72b:   protected void cleanup(Context context) throws IOException, InterruptedException {
1:287b72b:     // prepare the data
1:ea65197:     log.debug("partition: {} numInstances: {}", partition, instances.size());
1:287b72b:     
1:287b72b:     Data data = new Data(getDataset(), instances);
1:287b72b:     Bagging bagging = new Bagging(getTreeBuilder(), data);
1:287b72b:     
1:287b72b:     TreeID key = new TreeID();
1:287b72b:     
1:ea65197:     log.debug("Building {} trees", nbTrees);
1:287b72b:     for (int treeId = 0; treeId < nbTrees; treeId++) {
1:ea65197:       log.debug("Building tree number : {}", treeId);
1:287b72b:       
1:4fbfbc6:       Node tree = bagging.build(rng);
1:287b72b:       
1:287b72b:       key.set(partition, firstTreeId + treeId);
1:287b72b:       
1:210b265:       if (isOutput()) {
1:ac83cf3:         MapredOutput emOut = new MapredOutput(tree);
1:287b72b:         context.write(key, emOut);
1:287b72b:       }
1:4e1b7a6: 
1:4e1b7a6:       context.progress();
1:287b72b:     }
1:287b72b:   }
1:287b72b:   
1:287b72b: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
commit:4e1b7a6
/////////////////////////////////////////////////////////////////////////
1:    * Compute the number of trees for a given partition. The first partitions may be longer
1:    * than the rest because of the remainder.
/////////////////////////////////////////////////////////////////////////
1:     int treesPerMapper = numTrees / numMaps;
1:     int remainder = numTrees - numMaps * treesPerMapper;
1:     return treesPerMapper + (partition < remainder ? 1 : 0);
/////////////////////////////////////////////////////////////////////////
1: 
1:       context.progress();
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(partition >= 0, "Wrong partition ID: " + partition + ". Partition must be >= 0!");
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:   private final List<Instance> instances = new ArrayList<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
1:       if (isOutput()) {
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:   private final List<Instance> instances = Lists.newArrayList();
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:d6aba1a
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
1: import java.io.IOException;
1: import java.util.List;
1: import java.util.Random;
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
commit:083eb98
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     instances.add(converter.convert(value.toString()));
commit:ac83cf3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:       Node tree = bagging.build(treeId, rng);
1:         MapredOutput emOut = new MapredOutput(tree);
commit:819cc97
/////////////////////////////////////////////////////////////////////////
0:   /** current instance's id */
0:   private int id;
1:   
/////////////////////////////////////////////////////////////////////////
0:     instances.add(converter.convert(id++, value.toString()));
commit:287b72b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.mapreduce.partial;
1: 
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.Random;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.Text;
0: import org.apache.mahout.df.Bagging;
0: import org.apache.mahout.df.callback.SingleTreePredictions;
0: import org.apache.mahout.df.data.Data;
0: import org.apache.mahout.df.data.DataConverter;
0: import org.apache.mahout.df.data.Instance;
0: import org.apache.mahout.df.mapreduce.Builder;
0: import org.apache.mahout.df.mapreduce.MapredMapper;
0: import org.apache.mahout.df.mapreduce.MapredOutput;
0: import org.apache.mahout.df.node.Node;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * First step of the Partial Data Builder. Builds the trees using the data
0:  * available in the InputSplit. Predict the oob classes for each tree in its
0:  * growing partition (input split).
1:  */
0: public class Step1Mapper extends
0:     MapredMapper<LongWritable, Text, TreeID, MapredOutput> {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(Step1Mapper.class);
1: 
1:   /** used to convert input values to data instances */
0:   protected DataConverter converter;
1: 
0:   protected Random rng;
1: 
1:   /** number of trees to be built by this mapper */
0:   protected int nbTrees;
1: 
1:   /** id of the first tree */
0:   protected int firstTreeId;
1: 
1:   /** mapper's partition */
0:   protected int partition;
1: 
1:   /** will contain all instances if this mapper's split */
0:   protected final List<Instance> instances = new ArrayList<Instance>();
1: 
1:   @Override
0:   protected void setup(Context context) throws IOException,
0:       InterruptedException {
1:     super.setup(context);
1:     Configuration conf = context.getConfiguration();
1: 
0:     configure(Builder.getRandomSeed(conf), conf.getInt("mapred.task.partition",
0:         -1), Builder.getNumMaps(conf), Builder.getNbTrees(conf));
1:   }
1: 
1:   /**
1:    * Useful when testing
1:    * 
0:    * @param seed
0:    * @param partition current mapper inputSplit partition
0:    * @param numMapTasks number of running map tasks
0:    * @param numTrees total number of trees in the forest
1:    */
0:   protected void configure(Long seed, int partition, int numMapTasks,
0:       int numTrees) {
1:     converter = new DataConverter(getDataset());
1: 
1:     // prepare random-numders generator
0:     log.debug("seed : " + seed);
0:     if (seed == null)
0:       rng = new Random();
0:     else
0:       rng = new Random(seed);
1: 
1:     // mapper's partition
0:     if (partition < 0) {
0:       throw new RuntimeException("Wrong partition ID");
1:     }
1:     this.partition = partition;
1: 
1:     // compute number of trees to build
1:     nbTrees = nbTrees(numMapTasks, numTrees, partition);
1: 
1:     // compute first tree id
1:     firstTreeId = 0;
1:     for (int p = 0; p < partition; p++) {
1:       firstTreeId += nbTrees(numMapTasks, numTrees, p);
1:     }
1: 
0:     log.debug("partition : " + partition);
0:     log.debug("nbTrees : " + nbTrees);
0:     log.debug("firstTreeId : " + firstTreeId);
1:   }
1: 
1:   /**
0:    * Compute the number of trees for a given partition. The first partition (0)
0:    * may be longer than the rest of partition because of the remainder.
1:    * 
0:    * @param numMaps total number of maps (partitions)
0:    * @param numTrees total number of trees to build
0:    * @param partition partition to compute the number of trees for
0:    * @return
1:    */
1:   public static int nbTrees(int numMaps, int numTrees, int partition) {
0:     int nbTrees = (int) Math.floor(numTrees / numMaps);
0:     if (partition == 0) {
0:       nbTrees += (int) numTrees - nbTrees * numMaps;
1:     }
1: 
0:     return nbTrees;
1:   }
1: 
1:   
1:   @Override
1:   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
0:     instances.add(converter.convert((int) key.get(), value.toString()));
1:   }
1: 
1:   
1:   @Override
1:   protected void cleanup(Context context) throws IOException, InterruptedException {
1:     // prepare the data
0:     log.debug("partition: " + partition + "numInstances: " + instances.size());
1: 
1:     Data data = new Data(getDataset(), instances);
1:     Bagging bagging = new Bagging(getTreeBuilder(), data);
1: 
0:     SingleTreePredictions callback = null;
0:     int[] predictions = null;
1:     TreeID key = new TreeID();
1: 
0:     log.debug("Building " + nbTrees + " trees");
1:     for (int treeId = 0; treeId < nbTrees; treeId++) {
0:       log.debug("Building tree N° : " + treeId);
0:       if (isOobEstimate() && !isNoOutput()) {
0:         callback = new SingleTreePredictions(data.size());
0:         predictions = callback.predictions;
1:       }
1: 
0:       Node tree = bagging.build(treeId, rng, callback);
1: 
1:       key.set(partition, firstTreeId + treeId);
1: 
0:       if (!isNoOutput()) {
0:         MapredOutput emOut = new MapredOutput(tree, predictions);
1:         context.write(key, emOut);
1:       }
1:     }
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1:       Node tree = bagging.build(rng);
commit:69ba194
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Preconditions;
0: 
/////////////////////////////////////////////////////////////////////////
0:     Preconditions.checkArgument(partition >= 0, "Wrong partition ID");
commit:515bac4
/////////////////////////////////////////////////////////////////////////
commit:210fac3
commit:ea65197
/////////////////////////////////////////////////////////////////////////
1:     log.debug("seed : {}", seed);
/////////////////////////////////////////////////////////////////////////
1:     log.debug("partition : {}", partition);
1:     log.debug("nbTrees : {}", nbTrees);
1:     log.debug("firstTreeId : {}", firstTreeId);
/////////////////////////////////////////////////////////////////////////
1:     log.debug("partition: {} numInstances: {}", partition, instances.size());
1:     log.debug("Building {} trees", nbTrees);
1:       log.debug("Building tree number : {}", treeId);
commit:fc74924
/////////////////////////////////////////////////////////////////////////
1:   private int firstTreeId;
0:   
1:   public int getFirstTreeId() {
1:     return firstTreeId;
0:   }
commit:acafdc0
/////////////////////////////////////////////////////////////////////////
0:       throw new IllegalArgumentException("Wrong partition ID");
/////////////////////////////////////////////////////////////////////////
0:         predictions = callback.getPredictions();
commit:8547de7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1:   private DataConverter converter;
1:   private Random rng;
1:   private int nbTrees;
1:   private int partition;
0:   private final List<Instance> instances = new ArrayList<Instance>();
/////////////////////////////////////////////////////////////////////////
1:       rng = RandomUtils.getRandom();
1:       rng = RandomUtils.getRandom(seed);
/////////////////////////////////////////////////////////////////////////
0:     int nbTrees = numTrees / numMaps;
0:       nbTrees += numTrees - nbTrees * numMaps;
/////////////////////////////////////////////////////////////////////////
0:     SingleTreePredictions callback = null;
0:     int[] predictions = null;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.mapreduce.partial;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.classifier.df.Bagging;
1: import org.apache.mahout.classifier.df.data.Data;
1: import org.apache.mahout.classifier.df.data.DataConverter;
1: import org.apache.mahout.classifier.df.data.Instance;
1: import org.apache.mahout.classifier.df.mapreduce.Builder;
1: import org.apache.mahout.classifier.df.mapreduce.MapredMapper;
1: import org.apache.mahout.classifier.df.mapreduce.MapredOutput;
1: import org.apache.mahout.classifier.df.node.Node;
author:Robin Anil
-------------------------------------------------------------------------------
commit:297bef5
/////////////////////////////////////////////////////////////////////////
0:     log.debug("seed : {}", seed);
/////////////////////////////////////////////////////////////////////////
0:     log.debug("partition : {}", partition);
0:     log.debug("nbTrees : {}", nbTrees);
0:     log.debug("firstTreeId : {}", firstTreeId);
/////////////////////////////////////////////////////////////////////////
0:     log.debug("partition: {} numInstances: {}", partition, instances.size());
0:     log.debug("Building {} trees", nbTrees);
0:       log.debug("Building tree number : {}", treeId);
commit:ad11134
/////////////////////////////////////////////////////////////////////////
1:  * First step of the Partial Data Builder. Builds the trees using the data available in the InputSplit.
1:  * Predict the oob classes for each tree in its growing partition (input split).
1: public class Step1Mapper extends MapredMapper<LongWritable,Text,TreeID,MapredOutput> {
0:   
0:   
0:   
0:   
0:   
0:   
0:   
0:   
1:   protected void setup(Context context) throws IOException, InterruptedException {
0:     
1:     configure(Builder.getRandomSeed(conf), conf.getInt("mapred.task.partition", -1),
1:       Builder.getNumMaps(conf), Builder.getNbTrees(conf));
0:   
1:    * @param partition
1:    *          current mapper inputSplit partition
1:    * @param numMapTasks
1:    *          number of running map tasks
1:    * @param numTrees
1:    *          total number of trees in the forest
1:   protected void configure(Long seed, int partition, int numMapTasks, int numTrees) {
0:     
0:     Step1Mapper.log.debug("seed : {}", seed);
1:     if (seed == null) {
1:     } else {
0:     }
0:     
0:     
0:     nbTrees = Step1Mapper.nbTrees(numMapTasks, numTrees, partition);
0:     
0:       firstTreeId += Step1Mapper.nbTrees(numMapTasks, numTrees, p);
0:     
0:     Step1Mapper.log.debug("partition : {}", partition);
0:     Step1Mapper.log.debug("nbTrees : {}", nbTrees);
0:     Step1Mapper.log.debug("firstTreeId : {}", firstTreeId);
0:   
0:    * Compute the number of trees for a given partition. The first partition (0) may be longer than the rest of
0:    * partition because of the remainder.
1:    * @param numMaps
1:    *          total number of maps (partitions)
1:    * @param numTrees
1:    *          total number of trees to build
1:    * @param partition
1:    *          partition to compute the number of trees for
/////////////////////////////////////////////////////////////////////////
0:     
0:     Step1Mapper.log.debug("partition: {} numInstances: {}", partition, instances.size());
0:     
0:     
0:     
0:     Step1Mapper.log.debug("Building {} trees", nbTrees);
0:       Step1Mapper.log.debug("Building tree number : {}", treeId);
0:       
0:       
0:       
0:   
============================================================================