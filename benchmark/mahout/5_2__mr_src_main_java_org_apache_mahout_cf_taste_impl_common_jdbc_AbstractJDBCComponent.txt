1:1c1e278: /**
1:1c1e278:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1c1e278:  * contributor license agreements.  See the NOTICE file distributed with
1:1c1e278:  * this work for additional information regarding copyright ownership.
1:1c1e278:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1c1e278:  * (the "License"); you may not use this file except in compliance with
1:1c1e278:  * the License.  You may obtain a copy of the License at
1:1c1e278:  *
1:1c1e278:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1c1e278:  *
1:1c1e278:  * Unless required by applicable law or agreed to in writing, software
1:1c1e278:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1c1e278:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1c1e278:  * See the License for the specific language governing permissions and
1:1c1e278:  * limitations under the License.
1:1c1e278:  */
3:1c1e278: 
1:1c1e278: package org.apache.mahout.cf.taste.impl.common.jdbc;
1:1c1e278: 
1:1c1e278: import javax.naming.Context;
1:1c1e278: import javax.naming.InitialContext;
1:1c1e278: import javax.naming.NamingException;
1:d86c967: import javax.sql.DataSource;
1:1c1e278: 
1:d86c967: import org.apache.mahout.cf.taste.common.TasteException;
1:1c1e278: import org.slf4j.Logger;
1:1c1e278: import org.slf4j.LoggerFactory;
1:1c1e278: 
1:69ba194: import com.google.common.base.Preconditions;
1:69ba194: 
1:1c1e278: /**
1:1c1e278:  * A helper class with common elements for several JDBC-related components.
1:1c1e278:  */
1:1c1e278: public abstract class AbstractJDBCComponent {
1:1c1e278:   
1:1c1e278:   private static final Logger log = LoggerFactory.getLogger(AbstractJDBCComponent.class);
1:1c1e278:   
1:1c1e278:   private static final int DEFAULT_FETCH_SIZE = 1000; // A max, "big" number of rows to buffer at once
1:f3e63ce:   protected static final String DEFAULT_DATASOURCE_NAME = "jdbc/taste";
1:1c1e278:   
1:1c1e278:   protected static void checkNotNullAndLog(String argName, Object value) {
1:e0ec7c1:     Preconditions.checkArgument(value != null && !value.toString().isEmpty(),
1:69ba194:       argName + " is null or empty");
1:1c1e278:     log.debug("{}: {}", argName, value);
4:1c1e278:   }
1:1c1e278:   
1:1c1e278:   protected static void checkNotNullAndLog(String argName, Object[] values) {
1:d61a0ee:     Preconditions.checkArgument(values != null && values.length != 0, argName + " is null or zero-length");
1:1c1e278:     for (Object value : values) {
1:1c1e278:       checkNotNullAndLog(argName, value);
1:1c1e278:     }
1:1c1e278:   }
1:1c1e278:   
1:1c1e278:   /**
1:1b4e01f:    * <p>
1:1b4e01f:    * Looks up a {@link DataSource} by name from JNDI. "java:comp/env/" is prepended to the argument before
1:1b4e01f:    * looking up the name in JNDI.
1:1b4e01f:    * </p>
1:1c1e278:    * 
1:1b4e01f:    * @param dataSourceName
1:1b4e01f:    *          JNDI name where a {@link DataSource} is bound (e.g. "jdbc/taste")
1:1c1e278:    * @return {@link DataSource} under that JNDI name
1:1b4e01f:    * @throws TasteException
1:1b4e01f:    *           if a JNDI error occurs
1:1c1e278:    */
1:2b8d5e4:   public static DataSource lookupDataSource(String dataSourceName) throws TasteException {
1:1c1e278:     Context context = null;
1:1c1e278:     try {
1:1c1e278:       context = new InitialContext();
1:1c1e278:       return (DataSource) context.lookup("java:comp/env/" + dataSourceName);
1:1c1e278:     } catch (NamingException ne) {
1:1c1e278:       throw new TasteException(ne);
1:1c1e278:     } finally {
1:1c1e278:       if (context != null) {
1:1c1e278:         try {
1:1c1e278:           context.close();
1:1c1e278:         } catch (NamingException ne) {
1:1c1e278:           log.warn("Error while closing Context; continuing...", ne);
1:1c1e278:         }
1:1c1e278:       }
1:1c1e278:     }
1:1c1e278:   }
1:1c1e278:   
1:1c1e278:   protected int getFetchSize() {
1:1c1e278:     return DEFAULT_FETCH_SIZE;
1:1c1e278:   }
1:1c1e278:   
1:1c1e278: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(value != null && !value.toString().isEmpty(),
commit:96117d3
/////////////////////////////////////////////////////////////////////////
commit:3218e95
/////////////////////////////////////////////////////////////////////////
commit:ad17b0d
/////////////////////////////////////////////////////////////////////////
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(values != null && values.length != 0, argName + " is null or zero-length");
commit:69ba194
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
1: 
/////////////////////////////////////////////////////////////////////////
0:     Preconditions.checkArgument(value != null && value.toString().length() != 0,
1:       argName + " is null or empty");
0:     Preconditions.checkArgument(values != null && values.length != 0,
0:       argName + " is null or zero-length" );
commit:2b8d5e4
/////////////////////////////////////////////////////////////////////////
1:   public static DataSource lookupDataSource(String dataSourceName) throws TasteException {
commit:f824f90
commit:f3e63ce
/////////////////////////////////////////////////////////////////////////
1:   protected static final String DEFAULT_DATASOURCE_NAME = "jdbc/taste";
/////////////////////////////////////////////////////////////////////////
0:   protected static DataSource lookupDataSource(String dataSourceName) throws TasteException {
commit:d86c967
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import javax.sql.DataSource;
commit:1c1e278
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.common.jdbc;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: import org.apache.mahout.cf.taste.common.TasteException;
1: 
0: import javax.sql.DataSource;
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.NamingException;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
1: 
1: /**
1:  * A helper class with common elements for several JDBC-related components.
1:  */
1: public abstract class AbstractJDBCComponent {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(AbstractJDBCComponent.class);
1: 
0:   public static final String DEFAULT_DATASOURCE_NAME = "jdbc/taste";
1:   private static final int DEFAULT_FETCH_SIZE = 1000; // A max, "big" number of rows to buffer at once
1: 
1:   protected static void checkNotNullAndLog(String argName, Object value) {
0:     if (value == null || value.toString().length() == 0) {
0:       throw new IllegalArgumentException(argName + " is null or empty");
1:     }
1:     log.debug("{}: {}", argName, value);
1:   }
1: 
1:   protected static void checkNotNullAndLog(String argName, Object[] values) {
0:     if (values == null || values.length == 0) {
0:       throw new IllegalArgumentException(argName + " is null or zero-length");
1:     }
1:     for (Object value : values) {
1:       checkNotNullAndLog(argName, value);
1:     }
1:   }
1: 
1: 
1:   /**
0:    * <p>Looks up a {@link DataSource} by name from JNDI. "java:comp/env/" is prepended to the argument before looking up
0:    * the name in JNDI.</p>
1:    *
0:    * @param dataSourceName JNDI name where a {@link DataSource} is bound (e.g. "jdbc/taste")
1:    * @return {@link DataSource} under that JNDI name
0:    * @throws TasteException if a JNDI error occurs
1:    */
0:   public static DataSource lookupDataSource(String dataSourceName) throws TasteException {
1:     Context context = null;
1:     try {
1:       context = new InitialContext();
1:       return (DataSource) context.lookup("java:comp/env/" + dataSourceName);
1:     } catch (NamingException ne) {
1:       throw new TasteException(ne);
1:     } finally {
1:       if (context != null) {
1:         try {
1:           context.close();
1:         } catch (NamingException ne) {
1:           log.warn("Error while closing Context; continuing...", ne);
1:         }
1:       }
1:     }
1:   }
1: 
1:   protected int getFetchSize() {
1:     return DEFAULT_FETCH_SIZE;
1:   }
1: 
0:   protected void advanceResultSet(ResultSet resultSet, int n) throws SQLException {
0:     resultSet.relative(n);
1:   }
1: 
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d608a88
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
author:Robin Anil
-------------------------------------------------------------------------------
commit:297bef5
/////////////////////////////////////////////////////////////////////////
0:     log.debug("{}: {}", argName, value);
/////////////////////////////////////////////////////////////////////////
0:       checkNotNullAndLog(argName, value);
/////////////////////////////////////////////////////////////////////////
0:           log.warn("Error while closing Context; continuing...", ne);
0:     return DEFAULT_FETCH_SIZE;
commit:1b4e01f
/////////////////////////////////////////////////////////////////////////
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: 
0: import org.apache.mahout.cf.taste.common.TasteException;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:   
0:   
0:   
0:     if ((value == null) || (value.toString().length() == 0)) {
0:     AbstractJDBCComponent.log.debug("{}: {}", argName, value);
0:   
0:     if ((values == null) || (values.length == 0)) {
0:       AbstractJDBCComponent.checkNotNullAndLog(argName, value);
0:   
1:    * <p>
1:    * Looks up a {@link DataSource} by name from JNDI. "java:comp/env/" is prepended to the argument before
1:    * looking up the name in JNDI.
1:    * </p>
0:    * 
1:    * @param dataSourceName
1:    *          JNDI name where a {@link DataSource} is bound (e.g. "jdbc/taste")
1:    * @throws TasteException
1:    *           if a JNDI error occurs
/////////////////////////////////////////////////////////////////////////
0:           AbstractJDBCComponent.log.warn("Error while closing Context; continuing...", ne);
0:   
0:     return AbstractJDBCComponent.DEFAULT_FETCH_SIZE;
0:   
0:   
============================================================================