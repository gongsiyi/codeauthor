1:151de0d: /**
1:151de0d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:151de0d:  * contributor license agreements.  See the NOTICE file distributed with
1:151de0d:  * this work for additional information regarding copyright ownership.
1:151de0d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:151de0d:  * (the "License"); you may not use this file except in compliance with
1:151de0d:  * the License.  You may obtain a copy of the License at
1:0e23821:  *
1:151de0d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0e23821:  *
1:151de0d:  * Unless required by applicable law or agreed to in writing, software
1:151de0d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:151de0d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:151de0d:  * See the License for the specific language governing permissions and
1:151de0d:  * limitations under the License.
1:151de0d:  */
7:151de0d: 
1:151de0d: package org.apache.mahout.math.hadoop.stochasticsvd;
1:151de0d: 
1:151de0d: import java.util.Arrays;
1:175701c: import java.util.List;
1:175701c: import java.util.concurrent.ArrayBlockingQueue;
1:175701c: import java.util.concurrent.Callable;
1:175701c: import java.util.concurrent.ExecutionException;
1:175701c: import java.util.concurrent.ExecutorService;
1:175701c: import java.util.concurrent.Future;
1:175701c: import java.util.concurrent.ThreadPoolExecutor;
1:175701c: import java.util.concurrent.TimeUnit;
1:151de0d: 
1:210b265: import com.google.common.collect.Lists;
1:175701c: import org.apache.mahout.math.DenseVector;
1:151de0d: import org.apache.mahout.math.Vector;
1:151de0d: import org.apache.mahout.math.Vector.Element;
1:151de0d: 
1:151de0d: /**
1:151de0d:  * simplistic implementation for Omega matrix in Stochastic SVD method
1:151de0d:  */
1:151de0d: public class Omega {
1:0e23821: 
1:39fe224:   private static final double UNIFORM_DIVISOR = Math.pow(2.0, 64);
1:151de0d: 
1:b16c260:   private final long seed;
1:b16c260:   private final int kp;
1:151de0d: 
1:175701c:   public Omega(long seed, int kp) {
1:151de0d:     this.seed = seed;
1:175701c:     this.kp = kp;
4:151de0d:   }
1:b479bd2: 
1:0e23821:   /**
1:0e23821:    * Get omega element at (x,y) uniformly distributed within [-1...1)
1:175701c:    *
1:ffc7fab:    * @param row
1:ffc7fab:    *          omega row
1:ffc7fab:    * @param column
1:ffc7fab:    *          omega column
1:0e23821:    */
1:0e23821:   public double getQuick(int row, int column) {
1:39fe224:     long hash = murmur64((long) row << Integer.SIZE | column, 8, seed);
1:3d44c1e:     return hash / UNIFORM_DIVISOR;
1:0e23821:   }
1:0e23821: 
1:0e23821:   /**
1:151de0d:    * compute YRow=ARow*Omega.
1:ffc7fab:    * 
1:151de0d:    * @param aRow
1:151de0d:    *          row of matrix A (size n)
1:151de0d:    * @param yRow
1:151de0d:    *          row of matrix Y (result) must be pre-allocated to size of (k+p)
1:151de0d:    */
1:ffc7fab:   @Deprecated
1:151de0d:   public void computeYRow(Vector aRow, double[] yRow) {
1:ffc7fab:     // assert yRow.length == kp;
1:39fe224:     Arrays.fill(yRow, 0.0);
1:39fe224:     if (aRow.isDense()) {
1:151de0d:       int n = aRow.size();
1:b16c260:       for (int j = 0; j < n; j++) {
1:151de0d:         accumDots(j, aRow.getQuick(j), yRow);
1:151de0d:       }
1:39fe224:     } else {
1:dc62944:       for (Element el : aRow.nonZeroes()) {
1:39fe224:         accumDots(el.index(), el.get(), yRow);
1:39fe224:       }
1:b16c260:     }
1:ffc7fab:   }
1:151de0d: 
1:151de0d:   /**
1:ffc7fab:    * A version to compute yRow as a sparse vector in case of extremely sparse
1:ffc7fab:    * matrices
1:39fe224:    * 
1:ffc7fab:    * @param aRow
1:ffc7fab:    * @param yRowOut
1:ffc7fab:    */
1:ffc7fab:   public void computeYRow(Vector aRow, Vector yRowOut) {
1:ffc7fab:     yRowOut.assign(0.0);
1:ffc7fab:     if (aRow.isDense()) {
1:ffc7fab:       int n = aRow.size();
1:ffc7fab:       for (int j = 0; j < n; j++) {
1:ffc7fab:         accumDots(j, aRow.getQuick(j), yRowOut);
1:ffc7fab:       }
1:ffc7fab:     } else {
1:dc62944:       for (Element el : aRow.nonZeroes()) {
1:ffc7fab:         accumDots(el.index(), el.get(), yRowOut);
1:ffc7fab:       }
1:ffc7fab:     }
1:ffc7fab:   }
1:ffc7fab: 
1:175701c:   /*
1:175701c:    * computes t(Omega) %*% v in multithreaded fashion
1:175701c:    */
1:175701c:   public Vector mutlithreadedTRightMultiply(final Vector v) {
1:175701c: 
1:175701c:     int nThreads = Runtime.getRuntime().availableProcessors();
1:175701c:     ExecutorService es =
1:175701c:       new ThreadPoolExecutor(nThreads,
1:175701c:                              nThreads,
1:175701c:                              1,
1:175701c:                              TimeUnit.SECONDS,
1:175701c:                              new ArrayBlockingQueue<Runnable>(kp));
1:175701c: 
1:175701c:     try {
1:175701c: 
1:210b265:       List<Future<Double>> dotFutures = Lists.newArrayListWithCapacity(kp);
1:175701c: 
1:b16c260:       for (int i = 0; i < kp; i++) {
1:175701c:         final int index = i;
1:175701c: 
1:175701c:         Future<Double> dotFuture = es.submit(new Callable<Double>() {
1:175701c:           @Override
1:175701c:           public Double call() throws Exception {
1:175701c:             double result = 0.0;
1:175701c:             if (v.isDense()) {
1:4841efb:               for (int k = 0; k < v.size(); k++) {
1:175701c:                 // it's ok, this is reentrant
1:175701c:                 result += getQuick(k, index) * v.getQuick(k);
1:229aeff:               }
1:175701c: 
1:175701c:             } else {
1:dc62944:               for (Element el : v.nonZeroes()) {
1:175701c:                 int k = el.index();
1:175701c:                 result += getQuick(k, index) * el.get();
1:b16c260:               }
1:175701c:             }
1:175701c:             return result;
1:175701c:           }
1:175701c:         });
1:175701c:         dotFutures.add(dotFuture);
1:175701c:       }
1:175701c: 
1:175701c:       try {
1:175701c:         Vector res = new DenseVector(kp);
1:175701c:         for (int i = 0; i < kp; i++) {
1:175701c:           res.setQuick(i, dotFutures.get(i).get());
1:175701c:         }
1:175701c:         return res;
1:175701c:       } catch (InterruptedException exc) {
1:229aeff:         throw new IllegalStateException("Interrupted", exc);
1:175701c:       } catch (ExecutionException exc) {
1:229aeff:         if (exc.getCause() instanceof RuntimeException) {
1:175701c:           throw (RuntimeException) exc.getCause();
1:229aeff:         } else {
1:229aeff:           throw new IllegalStateException(exc.getCause());
1:229aeff:         }
1:175701c:       }
1:175701c: 
1:175701c:     } finally {
1:175701c:       es.shutdown();
1:175701c:     }
1:175701c:   }
1:175701c: 
1:ffc7fab:   protected void accumDots(int aIndex, double aElement, double[] yRow) {
1:175701c:     for (int i = 0; i < kp; i++) {
1:ffc7fab:       yRow[i] += getQuick(aIndex, i) * aElement;
1:175701c:     }
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   protected void accumDots(int aIndex, double aElement, Vector yRow) {
2:ffc7fab:     for (int i = 0; i < kp; i++) {
1:ffc7fab:       yRow.setQuick(i, yRow.getQuick(i) + getQuick(aIndex, i) * aElement);
1:ffc7fab:     }
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   /**
1:ffc7fab:    * Shortened version for data < 8 bytes packed into {@code len} lowest bytes
1:ffc7fab:    * of {@code val}.
1:ffc7fab:    * 
1:0e23821:    * @param val
1:0e23821:    *          the value
1:0e23821:    * @param len
1:ffc7fab:    *          the length of data packed into this many low bytes of {@code val}
1:0e23821:    * @param seed
1:0e23821:    *          the seed to use
1:0e23821:    * @return murmur hash
1:0e23821:    */
1:0e23821:   public static long murmur64(long val, int len, long seed) {
1:151de0d: 
1:ffc7fab:     // assert len > 0 && len <= 8;
1:0e23821:     long m = 0xc6a4a7935bd1e995L;
1:39fe224:     long h = seed ^ len * m;
1:0e23821: 
1:0e23821:     long k = val;
1:151de0d: 
1:151de0d:     k *= m;
1:39fe224:     int r = 47;
1:0e23821:     k ^= k >>> r;
1:0e23821:     k *= m;
1:0e23821: 
1:0e23821:     h ^= k;
1:0e23821:     h *= m;
1:0e23821: 
1:0e23821:     h ^= h >>> r;
1:0e23821:     h *= m;
1:0e23821:     h ^= h >>> r;
1:0e23821:     return h;
1:151de0d:   }
1:0e23821: 
1:151de0d:   public static long murmur64(byte[] val, int offset, int len, long seed) {
1:151de0d: 
1:151de0d:     long m = 0xc6a4a7935bd1e995L;
1:0e23821:     int r = 47;
1:0e23821:     long h = seed ^ (len * m);
1:151de0d: 
1:151de0d:     int lt = len >>> 3;
1:151de0d:     for (int i = 0; i < lt; i++, offset += 8) {
2:151de0d:       long k = 0;
1:151de0d:       for (int j = 0; j < 8; j++) {
1:151de0d:         k <<= 8;
1:151de0d:         k |= val[offset + j] & 0xff;
1:151de0d:       }
1:151de0d: 
1:0e23821:       k *= m;
1:151de0d:       k ^= k >>> r;
1:151de0d:       k *= m;
1:151de0d: 
1:151de0d:       h ^= k;
1:151de0d:       h *= m;
1:151de0d:     }
1:151de0d: 
1:151de0d:     if (offset < len) {
1:b16c260:       long k = 0;
1:39fe224:       while (offset < len) {
1:151de0d:         k <<= 8;
1:151de0d:         k |= val[offset] & 0xff;
1:39fe224:         offset++;
1:151de0d:       }
1:151de0d:       h ^= k;
1:151de0d:       h *= m;
1:151de0d:     }
1:151de0d: 
1:151de0d:     h ^= h >>> r;
1:151de0d:     h *= m;
1:151de0d:     h ^= h >>> r;
1:151de0d:     return h;
1:151de0d: 
1:151de0d:   }
1:151de0d: 
1:151de0d: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       for (Element el : aRow.nonZeroes()) {
/////////////////////////////////////////////////////////////////////////
1:       for (Element el : aRow.nonZeroes()) {
/////////////////////////////////////////////////////////////////////////
1:               for (Element el : v.nonZeroes()) {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1:               for (int k = 0; k < v.size(); k++) {
commit:210b265
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:       List<Future<Double>> dotFutures = Lists.newArrayListWithCapacity(kp);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0:               {
1:               }
/////////////////////////////////////////////////////////////////////////
1:         throw new IllegalStateException("Interrupted", exc);
1:         if (exc.getCause() instanceof RuntimeException) {
1:         } else {
1:           throw new IllegalStateException(exc.getCause());
1:         }
commit:3d44c1e
/////////////////////////////////////////////////////////////////////////
1:     return hash / UNIFORM_DIVISOR;
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:   private static final double UNIFORM_DIVISOR = Math.pow(2.0, 64);
/////////////////////////////////////////////////////////////////////////
0:    * @param row omega row
0:    * @param column omega column
1:     long hash = murmur64((long) row << Integer.SIZE | column, 8, seed);
0:     //assert result >= -1.0 && result < 1.0;
/////////////////////////////////////////////////////////////////////////
0:     //assert yRow.length == kp;
1:     Arrays.fill(yRow, 0.0);
1:     if (aRow.isDense()) {
1:     } else {
0:       for (Element el : aRow) {
1:         accumDots(el.index(), el.get(), yRow);
1:       }
0:    * Shortened version for data < 8 bytes packed into {@code len} lowest
0:    * bytes of {@code val}.
1:    *
0:    *          {@code val}
0:     //assert len > 0 && len <= 8;
1:     long h = seed ^ len * m;
1:     int r = 47;
/////////////////////////////////////////////////////////////////////////
1:       while (offset < len) {
1:         offset++;
commit:3218e95
/////////////////////////////////////////////////////////////////////////
0:     if ((aRow instanceof SequentialAccessSparseVector) || (aRow instanceof RandomAccessSparseVector)) {
commit:b16c260
/////////////////////////////////////////////////////////////////////////
1:   private final long seed;
0:   // TODO find way to make the test pass while using RandomUtils.getRandom()
0:   private final Random rnd = new Random();
1:   private final int kp;
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < kp; i++) {
1:     }
/////////////////////////////////////////////////////////////////////////
1:       for (int j = 0; j < n; j++) {
1:       }
/////////////////////////////////////////////////////////////////////////
1:       long k = 0;
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:175701c
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ArrayBlockingQueue;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.ThreadPoolExecutor;
1: import java.util.concurrent.TimeUnit;
1: import org.apache.mahout.math.DenseVector;
/////////////////////////////////////////////////////////////////////////
1:   public Omega(long seed, int kp) {
1:     this.kp = kp;
1:    *
/////////////////////////////////////////////////////////////////////////
1:   /*
1:    * computes t(Omega) %*% v in multithreaded fashion
1:    */
1:   public Vector mutlithreadedTRightMultiply(final Vector v) {
1: 
1:     int nThreads = Runtime.getRuntime().availableProcessors();
1:     ExecutorService es =
1:       new ThreadPoolExecutor(nThreads,
1:                              nThreads,
1:                              1,
1:                              TimeUnit.SECONDS,
1:                              new ArrayBlockingQueue<Runnable>(kp));
1: 
1:     try {
1: 
0:       List<Future<Double>> dotFutures = new ArrayList<Future<Double>>(kp);
1: 
1:       for (int i = 0; i < kp; i++) {
1:         final int index = i;
1: 
1:         Future<Double> dotFuture = es.submit(new Callable<Double>() {
1:           @Override
1:           public Double call() throws Exception {
1:             double result = 0.0;
1:             if (v.isDense()) {
0:               for (int k = 0; k < v.size(); k++)
1:                 // it's ok, this is reentrant
1:                 result += getQuick(k, index) * v.getQuick(k);
1: 
1:             } else {
0:               for (Iterator<Vector.Element> iter = v.iterateNonZero(); iter.hasNext();) {
0:                 Vector.Element el = iter.next();
1:                 int k = el.index();
1:                 result += getQuick(k, index) * el.get();
1:               }
1:             }
1:             return result;
1:           }
1:         });
1:         dotFutures.add(dotFuture);
1:       }
1: 
1:       try {
1:         Vector res = new DenseVector(kp);
1:         for (int i = 0; i < kp; i++) {
1:           res.setQuick(i, dotFutures.get(i).get());
1:         }
1:         return res;
1:       } catch (InterruptedException exc) {
0:         throw new RuntimeException("Interrupted", exc);
1:       } catch (ExecutionException exc) {
0:         if (exc.getCause() instanceof RuntimeException)
1:           throw (RuntimeException) exc.getCause();
0:         else
0:           throw new RuntimeException(exc.getCause());
1:       }
1: 
1:     } finally {
1:       es.shutdown();
1:     }
1:   }
1: 
commit:ffc7fab
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:    * @param row
1:    *          omega row
1:    * @param column
1:    *          omega column
/////////////////////////////////////////////////////////////////////////
1:   @Deprecated
1:     // assert yRow.length == kp;
/////////////////////////////////////////////////////////////////////////
0:       for (Iterator<Element> iter = aRow.iterateNonZero(); iter.hasNext();) {
0:         Element el = iter.next();
1:    * A version to compute yRow as a sparse vector in case of extremely sparse
1:    * matrices
1:    * 
1:    * @param aRow
1:    * @param yRowOut
1:    */
1:   public void computeYRow(Vector aRow, Vector yRowOut) {
1:     yRowOut.assign(0.0);
1:     if (aRow.isDense()) {
1:       int n = aRow.size();
1:       for (int j = 0; j < n; j++) {
1:         accumDots(j, aRow.getQuick(j), yRowOut);
1:       }
1:     } else {
0:       for (Iterator<Element> iter = aRow.iterateNonZero(); iter.hasNext();) {
0:         Element el = iter.next();
1:         accumDots(el.index(), el.get(), yRowOut);
1:       }
1:     }
1:   }
1: 
1:   protected void accumDots(int aIndex, double aElement, double[] yRow) {
1:     for (int i = 0; i < kp; i++) {
1:       yRow[i] += getQuick(aIndex, i) * aElement;
1:     }
1:   }
1: 
1:   protected void accumDots(int aIndex, double aElement, Vector yRow) {
1:     for (int i = 0; i < kp; i++) {
1:       yRow.setQuick(i, yRow.getQuick(i) + getQuick(aIndex, i) * aElement);
1:     }
1:   }
1: 
1:   /**
1:    * Shortened version for data < 8 bytes packed into {@code len} lowest bytes
1:    * of {@code val}.
1:    * 
1:    *          the length of data packed into this many low bytes of {@code val}
1:     // assert len > 0 && len <= 8;
commit:0e23821
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   private static final double UNIFORM_DIVISOR = Math.pow(2d, 64);
1: 
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Get omega element at (x,y) uniformly distributed within [-1...1)
1:    * 
0:    * @param row
0:    *          omega row
0:    * @param column
0:    *          omega column
0:    * @return
1:    */
1:   public double getQuick(int row, int column) {
0:     long hash = murmur64(row << Integer.SIZE | column, 8, seed);
0:     double result = hash / UNIFORM_DIVISOR;
0:     assert result >= -1d && result < 1d;
0:     return result;
1:   }
1: 
0:       yRow[i] += getQuick(aIndex, i) * aElement;
/////////////////////////////////////////////////////////////////////////
0:       int j = 0;
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * Shortened version for data < 8 bytes packed into <code>len</code> lowest
0:    * bytes of <code>val</code>.
0:    * <P>
1:    * 
1:    * @param val
1:    *          the value
1:    * @param len
0:    *          the length of data packed into this many low bytes of
0:    *          <code>val</code>
1:    * @param seed
1:    *          the seed to use
1:    * @return murmur hash
1:    */
1:   public static long murmur64(long val, int len, long seed) {
0:     assert len > 0 && len <= 8;
1:     long m = 0xc6a4a7935bd1e995L;
1:     int r = 47;
1:     long h = seed ^ (len * m);
1: 
1:     long k = val;
1: 
1:     k *= m;
1:     k ^= k >>> r;
1:     k *= m;
1: 
1:     h ^= k;
1:     h *= m;
1: 
1:     h ^= h >>> r;
1:     h *= m;
1:     h ^= h >>> r;
1:     return h;
commit:3e276bb
/////////////////////////////////////////////////////////////////////////
0:         accumDots(el.index(), el.get(), yRow);
commit:b479bd2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     if (!aRow.isDense()) {
1: 
commit:b0ac9f5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.RandomAccessSparseVector;
/////////////////////////////////////////////////////////////////////////
0:     if ((aRow instanceof SequentialAccessSparseVector)||
0:         (aRow instanceof RandomAccessSparseVector)){
commit:151de0d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.stochasticsvd;
1: 
1: import java.util.Arrays;
0: import java.util.Random;
1: 
0: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.Vector.Element;
1: 
1: /**
1:  * simplistic implementation for Omega matrix in Stochastic SVD method
0:  * 
1:  */
1: public class Omega {
1: 
0:   private long seed;
0:   private Random rnd = new Random();
0:   private int kp;
1: 
0:   public Omega(long seed, int k, int p) {
0:     super();
1:     this.seed = seed;
0:     kp = k + p;
1: 
1:   }
1: 
0:   public void accumDots(int aIndex, double aElement, double[] yRow) {
0:     rnd.setSeed(getOmegaRowSeed(aIndex, seed, rnd));
0:     for (int i = 0; i < kp; i++)
0:       yRow[i] += rnd.nextGaussian() * aElement;
1:   }
1: 
1:   /**
1:    * compute YRow=ARow*Omega.
0:    * 
1:    * @param aRow
1:    *          row of matrix A (size n)
1:    * @param yRow
1:    *          row of matrix Y (result) must be pre-allocated to size of (k+p)
1:    */
1:   public void computeYRow(Vector aRow, double[] yRow) {
0:     assert yRow.length == kp;
1: 
0:     Arrays.fill(yRow, 0);
0:     if (aRow instanceof SequentialAccessSparseVector) {
0:       int j = 0;
0:       for (Element el : aRow) {
0:         accumDots(j, el.get(), yRow);
0:         j++;
1:       }
1:       
0:     } else {
1:       int n = aRow.size();
0:       for (int j = 0; j < n; j++)
1:         accumDots(j, aRow.getQuick(j), yRow);
1:     }
1: 
1:   }
1: 
0:   public long getOmegaRowSeed(int omegaRow, long omegaSeed, Random rnd) {
0:     rnd.setSeed(omegaSeed);
0:     long rowSeed = rnd.nextLong();
0:     rnd.setSeed(rowSeed ^ omegaRow);
0:     return rowSeed ^ rnd.nextLong();
1: 
1:   }
1: 
1:   public static long murmur64(byte[] val, int offset, int len, long seed) {
1: 
1:     long m = 0xc6a4a7935bd1e995L;
0:     int r = 47;
0:     long h = seed ^ (len * m);
1: 
1:     int lt = len >>> 3;
1:     for (int i = 0; i < lt; i++, offset += 8) {
1:       long k = 0;
1:       for (int j = 0; j < 8; j++) {
1:         k <<= 8;
1:         k |= val[offset + j] & 0xff;
1:       }
1: 
1:       k *= m;
1:       k ^= k >>> r;
1:       k *= m;
1: 
1:       h ^= k;
1:       h *= m;
1:     }
1:     long k = 0;
1: 
1:     if (offset < len) {
0:       for (; offset < len; offset++) {
1:         k <<= 8;
1:         k |= val[offset] & 0xff;
1:       }
1:       h ^= k;
1:       h *= m;
1:     }
1: 
1:     h ^= h >>> r;
1:     h *= m;
1:     h ^= h >>> r;
1:     return h;
1: 
1:   }
1: 
1: }
============================================================================