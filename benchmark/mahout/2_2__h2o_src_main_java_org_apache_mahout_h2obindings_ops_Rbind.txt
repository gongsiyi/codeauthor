1:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
2:f870a63:  */
1:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings.ops;
1:f870a63: 
1:f870a63: import water.MRTask;
1:f870a63: import water.fvec.Frame;
1:f870a63: import water.fvec.Vec;
1:f870a63: import water.fvec.Chunk;
1:f870a63: import water.fvec.NewChunk;
1:f870a63: import water.parser.ValueString;
1:f870a63: 
1:f870a63: import org.apache.mahout.h2obindings.H2OHelper;
1:f870a63: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * R-like rbind like operator, on two DRMs
1:2d1b0bf:  */
1:f870a63: public class Rbind {
1:2d1b0bf:   /**
1:2d1b0bf:    * Combine the rows of two DRMs A and B to create a new DRM.
1:2d1b0bf:    *
1:2d1b0bf:    * @param drmA DRM representing matrix A.
1:2d1b0bf:    * @param drmB DRM representing matrix B.
1:2d1b0bf:    * @return new DRM containing rows of B below A.
1:2d1b0bf:    */
1:03a5bb6:   public static H2ODrm exec(H2ODrm drmA, H2ODrm drmB) {
1:f870a63:     final Frame fra = drmA.frame;
1:f870a63:     final Vec keysa = drmA.keys;
1:f870a63:     final Frame frb = drmB.frame;
1:f870a63:     final Vec keysb = drmB.keys;
1:f870a63: 
1:2d1b0bf:     // Create new frame and copy A's data at the top, and B's data below.
1:2d1b0bf:     // Create the frame in the same VectorGroup as A, so A's data does not
1:2d1b0bf:     // cross the wire during copy. B's data could potentially cross the wire.
1:c964986:     Frame frbind = H2OHelper.emptyFrame(fra.numRows() + frb.numRows(), fra.numCols(),
1:c964986:             -1, -1, fra.anyVec().group());
1:f870a63:     Vec keys = null;
1:f870a63: 
1:f870a63:     MRTask task = new MRTask() {
1:f870a63:         public void map(Chunk chks[], NewChunk nc) {
1:f870a63:           Vec A_vecs[] = fra.vecs();
1:f870a63:           Vec B_vecs[] = frb.vecs();
1:f870a63:           long A_rows = fra.numRows();
1:f870a63:           long B_rows = frb.numRows();
1:f870a63:           long start = chks[0].start();
1:2d1b0bf:           int chunkSize = chks[0].len();
1:f870a63:           ValueString vstr = new ValueString();
1:f870a63: 
1:2d1b0bf:           for (int r = 0; r < chunkSize; r++) {
1:f870a63:             for (int c = 0; c < chks.length; c++) {
1:f870a63:               if (r + start < A_rows) {
1:f5f54a1:                 chks[c].set(r, A_vecs[c].at(r + start));
1:f870a63:                 if (keysa != null) {
1:f870a63:                   nc.addStr(keysa.atStr(vstr, r + start));
1:f870a63:                 }
1:f870a63:               } else {
1:f5f54a1:                 chks[c].set(r, B_vecs[c].at(r + start - A_rows));
1:f870a63:                 if (keysb != null) {
1:f870a63:                   nc.addStr(keysb.atStr(vstr, r + start - A_rows));
1:f870a63:                 }
1:f870a63:               }
1:f870a63:             }
1:f870a63:           }
1:f870a63:         }
1:f870a63:       };
1:f870a63: 
1:f870a63:     if (keysa == null) {
1:f870a63:       keys = task.doAll(1, frbind).outputFrame(null, null).anyVec();
1:f870a63:     } else {
1:f870a63:       task.doAll(frbind);
1:f870a63:     }
1:f870a63: 
1:f870a63:     return new H2ODrm(frbind, keys);
1:f870a63:   }
1:f870a63: }
============================================================================
author:Stevo Slavic
-------------------------------------------------------------------------------
commit:f5f54a1
/////////////////////////////////////////////////////////////////////////
1:                 chks[c].set(r, A_vecs[c].at(r + start));
1:                 chks[c].set(r, B_vecs[c].at(r + start - A_rows));
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * R-like rbind like operator, on two DRMs
1:  */
1:   /**
1:    * Combine the rows of two DRMs A and B to create a new DRM.
1:    *
1:    * @param drmA DRM representing matrix A.
1:    * @param drmB DRM representing matrix B.
1:    * @return new DRM containing rows of B below A.
1:    */
1:     // Create new frame and copy A's data at the top, and B's data below.
1:     // Create the frame in the same VectorGroup as A, so A's data does not
1:     // cross the wire during copy. B's data could potentially cross the wire.
/////////////////////////////////////////////////////////////////////////
1:           int chunkSize = chks[0].len();
1:           for (int r = 0; r < chunkSize; r++) {
commit:03a5bb6
/////////////////////////////////////////////////////////////////////////
1:   public static H2ODrm exec(H2ODrm drmA, H2ODrm drmB) {
commit:c964986
/////////////////////////////////////////////////////////////////////////
1:     Frame frbind = H2OHelper.emptyFrame(fra.numRows() + frb.numRows(), fra.numCols(),
1:             -1, -1, fra.anyVec().group());
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.ops;
1: 
1: import water.MRTask;
1: import water.fvec.Frame;
1: import water.fvec.Vec;
1: import water.fvec.Chunk;
1: import water.fvec.NewChunk;
1: import water.parser.ValueString;
1: 
1: import org.apache.mahout.h2obindings.H2OHelper;
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
1: public class Rbind {
0:   /* R's rbind like operator, on DrmA and DrmB */
0:   public static H2ODrm Rbind(H2ODrm drmA, H2ODrm drmB) {
1:     final Frame fra = drmA.frame;
1:     final Vec keysa = drmA.keys;
1:     final Frame frb = drmB.frame;
1:     final Vec keysb = drmB.keys;
1: 
0:     /* Create new frame and copy A's data at the top, and B's data below.
0:        Create the frame in the same VectorGroup as A, so A's data does not
0:        cross the wire during copy. B's data could potentially cross the wire.
1:     */
0:     Frame frbind = H2OHelper.empty_frame(fra.numRows() + frb.numRows(), fra.numCols(),
0:                                          -1, -1, fra.anyVec().group());
1:     Vec keys = null;
1: 
1:     MRTask task = new MRTask() {
1:         public void map(Chunk chks[], NewChunk nc) {
1:           Vec A_vecs[] = fra.vecs();
1:           Vec B_vecs[] = frb.vecs();
1:           long A_rows = fra.numRows();
1:           long B_rows = frb.numRows();
1:           long start = chks[0].start();
0:           int chunk_size = chks[0].len();
1:           ValueString vstr = new ValueString();
1: 
0:           for (int r = 0; r < chunk_size; r++) {
1:             for (int c = 0; c < chks.length; c++) {
1:               if (r + start < A_rows) {
0:                 chks[c].set0(r, A_vecs[c].at(r + start));
1:                 if (keysa != null) {
1:                   nc.addStr(keysa.atStr(vstr, r + start));
1:                 }
1:               } else {
0:                 chks[c].set0(r, B_vecs[c].at(r + start - A_rows));
1:                 if (keysb != null) {
1:                   nc.addStr(keysb.atStr(vstr, r + start - A_rows));
1:                 }
1:               }
1:             }
1:           }
1:         }
1:       };
1: 
1:     if (keysa == null) {
1:       keys = task.doAll(1, frbind).outputFrame(null, null).anyVec();
1:     } else {
1:       task.doAll(frbind);
1:     }
1: 
1:     return new H2ODrm(frbind, keys);
1:   }
1: }
============================================================================