1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
4:a07bfc3:  */
9:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:a07bfc3: import com.google.common.base.CharMatcher;
1:a07bfc3: import com.google.common.base.Charsets;
1:a07bfc3: import com.google.common.base.Splitter;
1:a07bfc3: import com.google.common.collect.Iterables;
1:a07bfc3: import com.google.common.collect.Lists;
1:a07bfc3: import com.google.common.io.LineProcessor;
1:a07bfc3: import com.google.common.io.Resources;
1:a07bfc3: import org.apache.mahout.common.RandomUtils;
1:a07bfc3: 
1:a07bfc3: import java.io.IOException;
1:a07bfc3: import java.util.List;
1:a07bfc3: import java.util.Random;
1:a07bfc3: 
4:a07bfc3: /**
1:a07bfc3:  * Samples a "document" from an IndianBuffet process.
1:a07bfc3:  *
1:a07bfc3:  * See http://mlg.eng.cam.ac.uk/zoubin/talks/turin09.pdf for details
1:a07bfc3:  */
1:8b6a26a: public final class IndianBuffet<T> implements Sampler<List<T>> {
1:6d16230:   private final List<Integer> count = Lists.newArrayList();
1:6d16230:   private int documents = 0;
1:6d16230:   private final double alpha;
1:6d16230:   private WordFunction<T> converter = null;
1:6d16230:   private final Random gen;
1:a07bfc3: 
1:6d16230:   public IndianBuffet(double alpha, WordFunction<T> converter) {
1:6d16230:     this.alpha = alpha;
1:6d16230:     this.converter = converter;
1:6d16230:     gen = RandomUtils.getRandom();
1:6d16230:   }
1:6d16230: 
1:6d16230:   public static IndianBuffet<Integer> createIntegerDocumentSampler(double alpha) {
1:02ff22f:     return new IndianBuffet<>(alpha, new IdentityConverter());
1:6d16230:   }
1:6d16230: 
1:6d16230:   public static IndianBuffet<String> createTextDocumentSampler(double alpha) {
1:02ff22f:     return new IndianBuffet<>(alpha, new WordConverter());
1:6d16230:   }
1:6d16230: 
1:8b6a26a:   @Override
1:6d16230:   public List<T> sample() {
1:6d16230:     List<T> r = Lists.newArrayList();
1:6d16230:     if (documents == 0) {
1:6d16230:       double n = new PoissonSampler(alpha).sample();
1:6d16230:       for (int i = 0; i < n; i++) {
1:6d16230:         r.add(converter.convert(i));
1:6d16230:         count.add(1);
1:6d16230:       }
1:6d16230:       documents++;
1:6d16230:     } else {
1:6d16230:       documents++;
1:6d16230:       int i = 0;
1:6d16230:       for (double cnt : count) {
1:6d16230:         if (gen.nextDouble() < cnt / documents) {
1:6d16230:           r.add(converter.convert(i));
1:6d16230:           count.set(i, count.get(i) + 1);
1:6d16230:         }
1:6d16230:         i++;
1:6d16230:       }
1:8b6a26a:       int newItems = new PoissonSampler(alpha / documents).sample().intValue();
1:6d16230:       for (int j = 0; j < newItems; j++) {
1:6d16230:         r.add(converter.convert(i + j));
1:6d16230:         count.add(1);
1:6d16230:       }
19:a07bfc3:     }
1:6d16230:     return r;
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   private interface WordFunction<T> {
1:6d16230:     T convert(int i);
1:6d16230:   }
1:6d16230: 
1:6d16230:   /**
1:6d16230:    * Just converts to an integer.
1:6d16230:    */
1:6d16230:   public static class IdentityConverter implements WordFunction<Integer> {
1:8b6a26a:     @Override
1:6d16230:     public Integer convert(int i) {
1:6d16230:       return i;
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Converts to a string.
1:6d16230:    */
1:6d16230:   public static class StringConverter implements WordFunction<String> {
1:8b6a26a:     @Override
1:6d16230:     public String convert(int i) {
1:8b6a26a:       return String.valueOf(i);
1:6d16230:     }
1:6d16230:   }
1:6d16230: 
1:6d16230:   /**
1:6d16230:    * Converts to one of a list of common English words for reasonably small integers and converts
1:6d16230:    * to a token like w_92463 for big integers.
1:6d16230:    */
1:8b6a26a:   public static final class WordConverter implements WordFunction<String> {
1:6d16230:     private final Splitter onSpace = Splitter.on(CharMatcher.WHITESPACE).omitEmptyStrings().trimResults();
1:8b6a26a:     private final List<String> words;
1:6d16230: 
1:6d16230:     public WordConverter() {
1:6d16230:       try {
1:6d16230:         words = Resources.readLines(Resources.getResource("words.txt"), Charsets.UTF_8,
1:6d16230:                                     new LineProcessor<List<String>>() {
1:4ca6b86:             private final List<String> theWords = Lists.newArrayList();
1:6d16230: 
1:8b6a26a:             @Override
1:8b6a26a:             public boolean processLine(String line) {
1:4ca6b86:               Iterables.addAll(theWords, onSpace.split(line));
1:6d16230:               return true;
1:6d16230:             }
1:6d16230: 
1:8b6a26a:             @Override
1:6d16230:             public List<String> getResult() {
1:4ca6b86:               return theWords;
1:6d16230:             }
1:6d16230:           });
1:6d16230:       } catch (IOException e) {
1:6d16230:         throw new ImpossibleException(e);
1:6d16230:       }
1:a07bfc3:     }
1:a07bfc3: 
1:8b6a26a:     @Override
1:6d16230:     public String convert(int i) {
1:6d16230:       if (i < words.size()) {
1:6d16230:         return words.get(i);
1:6d16230:       } else {
1:6d16230:         return "w_" + i;
1:6d16230:       }
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: 
1:6d16230:   public static class ImpossibleException extends RuntimeException {
1:6d16230:     public ImpossibleException(Throwable e) {
1:6d16230:       super(e);
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     return new IndianBuffet<>(alpha, new IdentityConverter());
1:     return new IndianBuffet<>(alpha, new WordConverter());
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:             private final List<String> theWords = Lists.newArrayList();
1:               Iterables.addAll(theWords, onSpace.split(line));
1:               return theWords;
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: public final class IndianBuffet<T> implements Sampler<List<T>> {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             int newItems = new PoissonSampler(alpha / documents).sample().intValue();
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:             return String.valueOf(i);
/////////////////////////////////////////////////////////////////////////
1:     public static final class WordConverter implements WordFunction<String> {
1:         private final List<String> words;
1:                     @Override
1:                     public boolean processLine(String line) {
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:   private final List<Integer> count = Lists.newArrayList();
1:   private int documents = 0;
1:   private final double alpha;
1:   private WordFunction<T> converter = null;
1:   private final Random gen;
1:   public IndianBuffet(double alpha, WordFunction<T> converter) {
1:     this.alpha = alpha;
1:     this.converter = converter;
1:     gen = RandomUtils.getRandom();
1:   }
1: 
1:   public static IndianBuffet<Integer> createIntegerDocumentSampler(double alpha) {
0:     return new IndianBuffet<Integer>(alpha, new IdentityConverter());
1:   }
1: 
1:   public static IndianBuffet<String> createTextDocumentSampler(double alpha) {
0:     return new IndianBuffet<String>(alpha, new WordConverter());
1:   }
1: 
0:   @Override
1:   public List<T> sample() {
1:     List<T> r = Lists.newArrayList();
1:     if (documents == 0) {
1:       double n = new PoissonSampler(alpha).sample();
1:       for (int i = 0; i < n; i++) {
1:         r.add(converter.convert(i));
1:         count.add(1);
1:       }
1:       documents++;
1:     } else {
1:       documents++;
1:       int i = 0;
1:       for (double cnt : count) {
1:         if (gen.nextDouble() < cnt / documents) {
1:           r.add(converter.convert(i));
1:           count.set(i, count.get(i) + 1);
1:         }
1:         i++;
1:       }
0:       int newItems = new PoissonSampler(alpha / documents).sample().intValue();
1:       for (int j = 0; j < newItems; j++) {
1:         r.add(converter.convert(i + j));
1:         count.add(1);
1:       }
1:     return r;
1:   }
1:   private interface WordFunction<T> {
1:     T convert(int i);
1:   }
1: 
1:   /**
1:    * Just converts to an integer.
1:    */
1:   public static class IdentityConverter implements WordFunction<Integer> {
0:     @Override
1:     public Integer convert(int i) {
1:       return i;
1:   }
1:   /**
1:    * Converts to a string.
1:    */
1:   public static class StringConverter implements WordFunction<String> {
0:     @Override
1:     public String convert(int i) {
0:       return String.valueOf(i);
1:     }
1:   }
1: 
1:   /**
1:    * Converts to one of a list of common English words for reasonably small integers and converts
1:    * to a token like w_92463 for big integers.
1:    */
0:   public static final class WordConverter implements WordFunction<String> {
1:     private final Splitter onSpace = Splitter.on(CharMatcher.WHITESPACE).omitEmptyStrings().trimResults();
0:     private final List<String> words;
1: 
1:     public WordConverter() {
1:       try {
1:         words = Resources.readLines(Resources.getResource("words.txt"), Charsets.UTF_8,
1:                                     new LineProcessor<List<String>>() {
0:             final List<String> words = Lists.newArrayList();
1: 
0:             @Override
0:             public boolean processLine(String line) {
0:               Iterables.addAll(words, onSpace.split(line));
1:               return true;
1:             }
1: 
0:             @Override
1:             public List<String> getResult() {
0:               return words;
1:             }
1:           });
1:       } catch (IOException e) {
1:         throw new ImpossibleException(e);
1:       }
1:     public String convert(int i) {
1:       if (i < words.size()) {
1:         return words.get(i);
1:       } else {
1:         return "w_" + i;
1:       }
1:   }
1:   public static class ImpossibleException extends RuntimeException {
1:     public ImpossibleException(Throwable e) {
1:       super(e);
1:   }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import com.google.common.base.CharMatcher;
1: import com.google.common.base.Charsets;
1: import com.google.common.base.Splitter;
1: import com.google.common.collect.Iterables;
1: import com.google.common.collect.Lists;
1: import com.google.common.io.LineProcessor;
1: import com.google.common.io.Resources;
1: import org.apache.mahout.common.RandomUtils;
1: 
1: import java.io.IOException;
1: import java.util.List;
1: import java.util.Random;
1: 
1: /**
1:  * Samples a "document" from an IndianBuffet process.
1:  *
1:  * See http://mlg.eng.cam.ac.uk/zoubin/talks/turin09.pdf for details
1:  */
0: public class IndianBuffet<T> implements Sampler<List<T>> {
0:     private final List<Integer> count = Lists.newArrayList();
0:     private int documents = 0;
0:     private final double alpha;
0:     private WordFunction<T> converter = null;
0:     private final Random gen;
1: 
0:     public IndianBuffet(double alpha, WordFunction<T> converter) {
0:         this.alpha = alpha;
0:         this.converter = converter;
0:         gen = RandomUtils.getRandom();
1:     }
1: 
0:     public static IndianBuffet<Integer> createIntegerDocumentSampler(double alpha) {
0:         return new IndianBuffet<Integer>(alpha, new IdentityConverter());
1:     }
1: 
0:     public static IndianBuffet<String> createTextDocumentSampler(double alpha) {
0:         return new IndianBuffet<String>(alpha, new WordConverter());
1:     }
1: 
0:     public List<T> sample() {
0:         List<T> r = Lists.newArrayList();
0:         if (documents == 0) {
0:             double n = new PoissonSampler(alpha).sample();
0:             for (int i = 0; i < n; i++) {
0:                 r.add(converter.convert(i));
0:                 count.add(1);
1:             }
0:             documents++;
0:         } else {
0:             documents++;
0:             int i = 0;
0:             for (double cnt : count) {
0:                 if (gen.nextDouble() < cnt / documents) {
0:                     r.add(converter.convert(i));
0:                     count.set(i, count.get(i) + 1);
1:                 }
0:                 i++;
1:             }
0:             final int newItems = new PoissonSampler(alpha / documents).sample().intValue();
0:             for (int j = 0; j < newItems; j++) {
0:                 r.add(converter.convert(i + j));
0:                 count.add(1);
1:             }
1:         }
0:         return r;
1:     }
1: 
0:     private interface WordFunction<T> {
0:         T convert(int i);
1:     }
1: 
1:     /**
0:      * Just converts to an integer.
1:      */
0:     public static class IdentityConverter implements WordFunction<Integer> {
0:         public Integer convert(int i) {
0:             return i;
1:         }
1:     }
1: 
1:     /**
0:      * Converts to a string.
1:      */
0:     public static class StringConverter implements WordFunction<String> {
0:         public String convert(int i) {
0:             return "" + i;
1:         }
1:     }
1: 
1:     /**
0:      * Converts to one of a list of common English words for reasonably small integers and converts
0:      * to a token like w_92463 for big integers.
1:      */
0:     public static class WordConverter implements WordFunction<String> {
0:         private final Splitter onSpace = Splitter.on(CharMatcher.WHITESPACE).omitEmptyStrings().trimResults();
0:         private List<String> words;
1: 
0:         public WordConverter() {
0:             try {
0:                 words = Resources.readLines(Resources.getResource("words.txt"), Charsets.UTF_8, new LineProcessor<List<String>>() {
0:                     final List<String> words = Lists.newArrayList();
1: 
0:                     public boolean processLine(String line) throws IOException {
0:                         Iterables.addAll(words, onSpace.split(line));
0:                         return true;
1:                     }
1: 
0:                     public List<String> getResult() {
0:                         return words;
1:                     }
0:                 });
0:             } catch (IOException e) {
0:                 throw new ImpossibleException(e);
1:             }
1:         }
1: 
0:         public String convert(int i) {
0:             if (i < words.size()) {
0:                 return words.get(i);
0:             } else {
0:                 return "w_" + i;
1:             }
1:         }
1:     }
1: 
0:     public static class ImpossibleException extends RuntimeException {
0:         public ImpossibleException(Throwable e) {
0:             super(e);
1:         }
1:     }
1: }
============================================================================