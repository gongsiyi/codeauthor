1:7aa6232: /*
1:7aa6232:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7aa6232:  * contributor license agreements.  See the NOTICE file distributed with
1:7aa6232:  * this work for additional information regarding copyright ownership.
1:7aa6232:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7aa6232:  * (the "License"); you may not use this file except in compliance with
1:7aa6232:  * the License.  You may obtain a copy of the License at
4:7aa6232:  *
1:7aa6232:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7aa6232:  *
1:7aa6232:  * Unless required by applicable law or agreed to in writing, software
1:7aa6232:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7aa6232:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7aa6232:  * See the License for the specific language governing permissions and
1:7aa6232:  * limitations under the License.
2:7aa6232:  */
8:7aa6232: 
1:7aa6232: package org.apache.mahout.classifier.sgd;
1:7aa6232: 
1:69ba194: import com.google.common.base.Preconditions;
1:d608a88: import com.google.common.io.Closeables;
1:35032b8: import java.io.DataInput;
1:35032b8: import java.io.DataInputStream;
1:4ef9d31: import java.io.DataOutput;
1:35032b8: import java.io.DataOutputStream;
1:c1a4188: import java.io.File;
1:ad8b61d: import java.io.FileInputStream;
1:c1a4188: import java.io.IOException;
1:35032b8: import java.io.InputStream;
1:35032b8: import java.io.OutputStream;
1:4ef9d31: import java.util.ArrayList;
1:4ef9d31: import java.util.HashMap;
1:7aa6232: import java.util.Iterator;
1:7aa6232: import java.util.List;
1:7aa6232: import java.util.Map;
1:4ef9d31: import org.apache.hadoop.io.Writable;
1:7aa6232: 
2:7aa6232: /**
1:7aa6232:  * Encapsulates everything we need to know about a model and how it reads and vectorizes its input.
1:7aa6232:  * This encapsulation allows us to coherently save and restore a model from a file.  This also
1:7aa6232:  * allows us to keep command line arguments that affect learning in a coherent way.
1:7aa6232:  */
1:35032b8: public class LogisticModelParameters implements Writable {
1:7aa6232:   private String targetVariable;
1:7aa6232:   private Map<String, String> typeMap;
1:7aa6232:   private int numFeatures;
1:7aa6232:   private boolean useBias;
1:7aa6232:   private int maxTargetCategories;
1:c1a4188:   private List<String> targetCategories;
1:7aa6232:   private double lambda;
1:7aa6232:   private double learningRate;
1:35032b8:   private CsvRecordFactory csv;
1:c1a4188:   private OnlineLogisticRegression lr;
1:7aa6232: 
1:7aa6232:   /**
1:7aa6232:    * Returns a CsvRecordFactory compatible with this logistic model.  The reason that this is tied
1:7aa6232:    * in here is so that we have access to the list of target categories when it comes time to save
1:7aa6232:    * the model.  If the input isn't CSV, then calling setTargetCategories before calling saveTo will
1:7aa6232:    * suffice.
1:7aa6232:    *
1:58b5f28:    * @return The CsvRecordFactory.
1:7aa6232:    */
1:7aa6232:   public CsvRecordFactory getCsvRecordFactory() {
1:7aa6232:     if (csv == null) {
1:7aa6232:       csv = new CsvRecordFactory(getTargetVariable(), getTypeMap())
1:7aa6232:               .maxTargetValue(getMaxTargetCategories())
1:7aa6232:               .includeBiasTerm(useBias());
1:7aa6232:       if (targetCategories != null) {
1:7aa6232:         csv.defineTargetCategories(targetCategories);
13:7aa6232:       }
1:7aa6232:     }
1:7aa6232:     return csv;
1:7aa6232:   }
1:35032b8: 
1:7aa6232:   /**
1:7aa6232:    * Creates a logistic regression trainer using the parameters collected here.
1:7aa6232:    *
1:58b5f28:    * @return The newly allocated OnlineLogisticRegression object
1:7aa6232:    */
1:7aa6232:   public OnlineLogisticRegression createRegression() {
1:7aa6232:     if (lr == null) {
1:7aa6232:       lr = new OnlineLogisticRegression(getMaxTargetCategories(), getNumFeatures(), new L1())
1:7aa6232:               .lambda(getLambda())
1:7aa6232:               .learningRate(getLearningRate())
1:c1a4188:               .alpha(1 - 1.0e-3);
1:7aa6232:     }
1:7aa6232:     return lr;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   /**
1:35032b8:    * Saves a model to an output stream.
1:7aa6232:    */
1:35032b8:   public void saveTo(OutputStream out) throws IOException {
1:ee8e393:     Closeables.close(lr, false);
1:ee8e393:     targetCategories = getCsvRecordFactory().getTargetCategories();
1:35032b8:     write(new DataOutputStream(out));
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   /**
1:35032b8:    * Reads a model from a stream.
1:7aa6232:    */
1:35032b8:   public static LogisticModelParameters loadFrom(InputStream in) throws IOException {
1:35032b8:     LogisticModelParameters result = new LogisticModelParameters();
1:35032b8:     result.readFields(new DataInputStream(in));
1:35032b8:     return result;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   /**
1:35032b8:    * Reads a model from a file.
1:7aa6232:    * @throws IOException If there is an error opening or closing the file.
1:7aa6232:    */
1:7aa6232:   public static LogisticModelParameters loadFrom(File in) throws IOException {
1:4ef9d31:     try (InputStream input = new FileInputStream(in)) {
1:69ba194:       return loadFrom(input);
1:69ba194:     }
1:7aa6232:   }
1:7aa6232: 
1:7aa6232: 
1:35032b8:   @Override
1:35032b8:   public void write(DataOutput out) throws IOException {
1:35032b8:     out.writeUTF(targetVariable);
1:35032b8:     out.writeInt(typeMap.size());
1:35032b8:     for (Map.Entry<String,String> entry : typeMap.entrySet()) {
1:35032b8:       out.writeUTF(entry.getKey());
1:35032b8:       out.writeUTF(entry.getValue());
1:35032b8:     }
1:35032b8:     out.writeInt(numFeatures);
1:35032b8:     out.writeBoolean(useBias);
1:35032b8:     out.writeInt(maxTargetCategories);
1:ee8e393: 
1:ee8e393:     if (targetCategories == null) {
1:ee8e393:       out.writeInt(0);
1:ee8e393:     } else {
1:ee8e393:       out.writeInt(targetCategories.size());
1:ee8e393:       for (String category : targetCategories) {
1:ee8e393:         out.writeUTF(category);
1:ee8e393:       }
1:35032b8:     }
1:35032b8:     out.writeDouble(lambda);
1:35032b8:     out.writeDouble(learningRate);
1:35032b8:     // skip csv
1:35032b8:     lr.write(out);
1:35032b8:   }
1:35032b8: 
1:35032b8:   @Override
1:35032b8:   public void readFields(DataInput in) throws IOException {
1:35032b8:     targetVariable = in.readUTF();
1:35032b8:     int typeMapSize = in.readInt();
1:4ef9d31:     typeMap = new HashMap<>(typeMapSize);
1:35032b8:     for (int i = 0; i < typeMapSize; i++) {
1:35032b8:       String key = in.readUTF();
1:35032b8:       String value = in.readUTF();
1:35032b8:       typeMap.put(key, value);
1:35032b8:     }
1:35032b8:     numFeatures = in.readInt();
1:35032b8:     useBias = in.readBoolean();
1:35032b8:     maxTargetCategories = in.readInt();
1:35032b8:     int targetCategoriesSize = in.readInt();
1:4ef9d31:     targetCategories = new ArrayList<>(targetCategoriesSize);
1:35032b8:     for (int i = 0; i < targetCategoriesSize; i++) {
1:35032b8:       targetCategories.add(in.readUTF());
1:35032b8:     }
1:35032b8:     lambda = in.readDouble();
1:35032b8:     learningRate = in.readDouble();
1:35032b8:     csv = null;
1:35032b8:     lr = new OnlineLogisticRegression();
1:35032b8:     lr.readFields(in);
1:35032b8:   }
1:35032b8: 
1:7aa6232:   /**
1:7aa6232:    * Sets the types of the predictors.  This will later be used when reading CSV data.  If you don't
1:7aa6232:    * use the CSV data and convert to vectors on your own, you don't need to call this.
1:7aa6232:    *
1:7aa6232:    * @param predictorList The list of variable names.
1:7aa6232:    * @param typeList      The list of types in the format preferred by CsvRecordFactory.
1:7aa6232:    */
1:69ba194:   public void setTypeMap(Iterable<String> predictorList, List<String> typeList) {
1:69ba194:     Preconditions.checkArgument(!typeList.isEmpty(), "Must have at least one type specifier");
1:4ef9d31:     typeMap = new HashMap<>();
1:c1a4188:     Iterator<String> iTypes = typeList.iterator();
1:7aa6232:     String lastType = null;
1:7aa6232:     for (Object x : predictorList) {
1:7aa6232:       // type list can be short .. we just repeat last spec
1:7aa6232:       if (iTypes.hasNext()) {
1:c1a4188:         lastType = iTypes.next();
1:7aa6232:       }
1:7aa6232:       typeMap.put(x.toString(), lastType);
1:7aa6232:     }
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   /**
1:7aa6232:    * Sets the target variable.  If you don't use the CSV record factory, then this is irrelevant.
1:7aa6232:    *
1:58b5f28:    * @param targetVariable The name of the target variable.
1:7aa6232:    */
1:7aa6232:   public void setTargetVariable(String targetVariable) {
1:7aa6232:     this.targetVariable = targetVariable;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   /**
1:7aa6232:    * Sets the number of target categories to be considered.
1:7aa6232:    *
1:58b5f28:    * @param maxTargetCategories The number of target categories.
1:7aa6232:    */
1:7aa6232:   public void setMaxTargetCategories(int maxTargetCategories) {
1:7aa6232:     this.maxTargetCategories = maxTargetCategories;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public void setNumFeatures(int numFeatures) {
1:7aa6232:     this.numFeatures = numFeatures;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public void setTargetCategories(List<String> targetCategories) {
1:7aa6232:     this.targetCategories = targetCategories;
1:7aa6232:     maxTargetCategories = targetCategories.size();
1:7aa6232:   }
1:7aa6232: 
1:a515335:   public List<String> getTargetCategories() {
1:a515335:     return this.targetCategories;
1:a515335:   }
1:a515335: 
1:7aa6232:   public void setUseBias(boolean useBias) {
1:7aa6232:     this.useBias = useBias;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public boolean useBias() {
1:7aa6232:     return useBias;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public String getTargetVariable() {
1:7aa6232:     return targetVariable;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public Map<String, String> getTypeMap() {
1:7aa6232:     return typeMap;
1:7aa6232:   }
1:7aa6232: 
1:a515335:   public void setTypeMap(Map<String, String> map) {
1:a515335:     this.typeMap = map;
1:a515335:   }
1:a515335: 
1:7aa6232:   public int getNumFeatures() {
1:7aa6232:     return numFeatures;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public int getMaxTargetCategories() {
1:7aa6232:     return maxTargetCategories;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public double getLambda() {
1:7aa6232:     return lambda;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public void setLambda(double lambda) {
1:7aa6232:     this.lambda = lambda;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public double getLearningRate() {
1:7aa6232:     return learningRate;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public void setLearningRate(double learningRate) {
1:7aa6232:     this.learningRate = learningRate;
1:7aa6232:   }
1:7aa6232: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataOutput;
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import org.apache.hadoop.io.Writable;
/////////////////////////////////////////////////////////////////////////
1:     try (InputStream input = new FileInputStream(in)) {
/////////////////////////////////////////////////////////////////////////
1:     typeMap = new HashMap<>(typeMapSize);
/////////////////////////////////////////////////////////////////////////
1:     targetCategories = new ArrayList<>(targetCategoriesSize);
/////////////////////////////////////////////////////////////////////////
1:     typeMap = new HashMap<>();
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(input, true);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:ee8e393
/////////////////////////////////////////////////////////////////////////
1:     Closeables.close(lr, false);
1:     targetCategories = getCsvRecordFactory().getTargetCategories();
/////////////////////////////////////////////////////////////////////////
1: 
1:     if (targetCategories == null) {
1:       out.writeInt(0);
1:     } else {
1:       out.writeInt(targetCategories.size());
1:       for (String category : targetCategories) {
1:         out.writeUTF(category);
1:       }
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     typeMap = Maps.newHashMapWithExpectedSize(typeMapSize);
/////////////////////////////////////////////////////////////////////////
0:     targetCategories = Lists.newArrayListWithCapacity(targetCategoriesSize);
commit:d608a88
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:       Closeables.closeQuietly(input);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:a515335
/////////////////////////////////////////////////////////////////////////
1:   public List<String> getTargetCategories() {
1:     return this.targetCategories;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public void setTypeMap(Map<String, String> map) {
1:     this.typeMap = map;
1:   }
1: 
commit:35032b8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.hadoop.io.Writable;
1: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.InputStream;
1: import java.io.OutputStream;
0: import java.util.ArrayList;
0: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1: public class LogisticModelParameters implements Writable {
/////////////////////////////////////////////////////////////////////////
1:   private CsvRecordFactory csv;
/////////////////////////////////////////////////////////////////////////
1:    * Saves a model to an output stream.
1:   public void saveTo(OutputStream out) throws IOException {
1:     write(new DataOutputStream(out));
1:    * Reads a model from a stream.
1:   public static LogisticModelParameters loadFrom(InputStream in) throws IOException {
1:     LogisticModelParameters result = new LogisticModelParameters();
1:     result.readFields(new DataInputStream(in));
1:     return result;
1:    * Reads a model from a file.
0:     InputStream input = new FileInputStream(in);
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeUTF(targetVariable);
1:     out.writeInt(typeMap.size());
1:     for (Map.Entry<String,String> entry : typeMap.entrySet()) {
1:       out.writeUTF(entry.getKey());
1:       out.writeUTF(entry.getValue());
1:     }
1:     out.writeInt(numFeatures);
1:     out.writeBoolean(useBias);
1:     out.writeInt(maxTargetCategories);
0:     out.writeInt(targetCategories.size());
0:     for (String category : targetCategories) {
0:       out.writeUTF(category);
1:     }
1:     out.writeDouble(lambda);
1:     out.writeDouble(learningRate);
1:     // skip csv
1:     lr.write(out);
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     targetVariable = in.readUTF();
1:     int typeMapSize = in.readInt();
0:     typeMap = new HashMap<String,String>(typeMapSize);
1:     for (int i = 0; i < typeMapSize; i++) {
1:       String key = in.readUTF();
1:       String value = in.readUTF();
1:       typeMap.put(key, value);
1:     }
1:     numFeatures = in.readInt();
1:     useBias = in.readBoolean();
1:     maxTargetCategories = in.readInt();
1:     int targetCategoriesSize = in.readInt();
0:     targetCategories = new ArrayList<String>(targetCategoriesSize);
1:     for (int i = 0; i < targetCategoriesSize; i++) {
1:       targetCategories.add(in.readUTF());
1:     }
1:     lambda = in.readDouble();
1:     learningRate = in.readDouble();
1:     csv = null;
1:     lr = new OnlineLogisticRegression();
1:     lr.readFields(in);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
commit:ad8b61d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileInputStream;
0: import java.nio.charset.Charset;
/////////////////////////////////////////////////////////////////////////
0:     Reader input = new InputStreamReader(new FileInputStream(in), Charset.forName("UTF-8"));
commit:da45733
/////////////////////////////////////////////////////////////////////////
0:     Gson gson = ModelSerializer.gson();
commit:69ba194
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
/////////////////////////////////////////////////////////////////////////
0:     try {
1:       return loadFrom(input);
0:     } finally {
0:       input.close();
1:     }
/////////////////////////////////////////////////////////////////////////
1:   public void setTypeMap(Iterable<String> predictorList, List<String> typeList) {
1:     Preconditions.checkArgument(!typeList.isEmpty(), "Must have at least one type specifier");
commit:c1a4188
/////////////////////////////////////////////////////////////////////////
0: import com.google.gson.Gson;
0: import com.google.gson.GsonBuilder;
0: import com.google.gson.InstanceCreator;
0: import com.google.gson.JsonArray;
0: import com.google.gson.JsonDeserializationContext;
0: import com.google.gson.JsonDeserializer;
0: import com.google.gson.JsonElement;
0: import com.google.gson.JsonObject;
0: import com.google.gson.JsonPrimitive;
0: import com.google.gson.JsonSerializationContext;
0: import com.google.gson.JsonSerializer;
1: import java.io.File;
0: import java.io.FileReader;
1: import java.io.IOException;
0: import java.io.InputStreamReader;
0: import java.io.Reader;
0: import java.io.Writer;
/////////////////////////////////////////////////////////////////////////
1:   private List<String> targetCategories;
0:   private transient CsvRecordFactory csv;
1:   private OnlineLogisticRegression lr;
/////////////////////////////////////////////////////////////////////////
1:               .alpha(1 - 1.0e-3);
0:   public static void saveModel(Writer out,
0:                                OnlineLogisticRegression model,
0:                                List<String> targetCategories) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:     InputStreamReader input = new FileReader(in);
/////////////////////////////////////////////////////////////////////////
0:   public void setTypeMap(List<String> predictorList, List<String> typeList) {
0:     if (typeList.isEmpty()) {
1:     Iterator<String> iTypes = typeList.iterator();
1:         lastType = iTypes.next();
/////////////////////////////////////////////////////////////////////////
0:   public static class MatrixTypeAdapter
0:     implements JsonDeserializer<Matrix>, JsonSerializer<Matrix>, InstanceCreator<Matrix> {
/////////////////////////////////////////////////////////////////////////
0:     public Matrix deserialize(JsonElement x, Type type, JsonDeserializationContext jsonDeserializationContext) {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:1eb9172
/////////////////////////////////////////////////////////////////////////
0:     return ModelSerializer.gson().fromJson(in, LogisticModelParameters.class);
commit:58b5f28
/////////////////////////////////////////////////////////////////////////
1:    * @return The CsvRecordFactory.
/////////////////////////////////////////////////////////////////////////
1:    * @return The newly allocated OnlineLogisticRegression object
/////////////////////////////////////////////////////////////////////////
0:    * @throws IOException If we can't write the model.
/////////////////////////////////////////////////////////////////////////
1:    * @param targetVariable The name of the target variable.
/////////////////////////////////////////////////////////////////////////
1:    * @param maxTargetCategories The number of target categories.
commit:7aa6232
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
0: import com.google.common.collect.Maps;
0: import com.google.gson.*;
0: import org.apache.mahout.math.DenseMatrix;
0: import org.apache.mahout.math.Matrix;
1: 
0: import java.io.*;
0: import java.lang.reflect.Type;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: 
1: /**
1:  * Encapsulates everything we need to know about a model and how it reads and vectorizes its input.
1:  * This encapsulation allows us to coherently save and restore a model from a file.  This also
1:  * allows us to keep command line arguments that affect learning in a coherent way.
1:  */
0: public class LogisticModelParameters {
1:   private String targetVariable;
1:   private Map<String, String> typeMap;
1:   private int numFeatures;
1:   private boolean useBias;
1:   private int maxTargetCategories;
0:   private List<String> targetCategories = null;
1:   private double lambda;
1:   private double learningRate;
0:   private transient CsvRecordFactory csv = null;
0:   private OnlineLogisticRegression lr = null;
1: 
0:   public LogisticModelParameters() {
1:   }
1: 
1:   /**
1:    * Returns a CsvRecordFactory compatible with this logistic model.  The reason that this is tied
1:    * in here is so that we have access to the list of target categories when it comes time to save
1:    * the model.  If the input isn't CSV, then calling setTargetCategories before calling saveTo will
1:    * suffice.
1:    *
0:    * @return
1:    */
1:   public CsvRecordFactory getCsvRecordFactory() {
1:     if (csv == null) {
1:       csv = new CsvRecordFactory(getTargetVariable(), getTypeMap())
1:               .maxTargetValue(getMaxTargetCategories())
1:               .includeBiasTerm(useBias());
1:       if (targetCategories != null) {
1:         csv.defineTargetCategories(targetCategories);
1:       }
1:     }
1:     return csv;
1:   }
1: 
1:   /**
1:    * Creates a logistic regression trainer using the parameters collected here.
1:    *
0:    * @return
1:    */
1:   public OnlineLogisticRegression createRegression() {
1:     if (lr == null) {
1:       lr = new OnlineLogisticRegression(getMaxTargetCategories(), getNumFeatures(), new L1())
1:               .lambda(getLambda())
1:               .learningRate(getLearningRate())
0:               .alpha(1 - 1e-3);
1:     }
1:     return lr;
1:   }
1: 
0:   public static void saveModel(Writer out, OnlineLogisticRegression model, List<String> targetCategories) throws IOException {
0:     LogisticModelParameters x = new LogisticModelParameters();
0:     x.setTargetCategories(targetCategories);
0:     x.setLambda(model.getLambda());
0:     x.setLearningRate(model.currentLearningRate());
0:     x.setNumFeatures(model.numFeatures());
0:     x.setUseBias(true);
0:     x.setTargetCategories(targetCategories);
0:     x.saveTo(out);
1:   }
1: 
1:   /**
0:    * Saves a model in JSON format.  This includes the current state of the logistic regression
0:    * trainer and the dictionary for the target categories.
1:    *
0:    * @param out Where to write the model.
0:    * @throws IOException
1:    */
0:   public void saveTo(Writer out) throws IOException {
0:     if (lr != null) {
0:       lr.close();
1:     }
0:     targetCategories = csv.getTargetCategories();
0:     GsonBuilder gb = new GsonBuilder();
0:     gb.registerTypeAdapter(Matrix.class, new MatrixTypeAdapter());
0:     Gson gson = gb.setPrettyPrinting().create();
1: 
0:     String savedForm = gson.toJson(this);
0:     out.write(savedForm);
1:   }
1: 
1:   /**
0:    * Reads a model in JSON format.
1:    *
0:    * @param in Where to read the model from.
0:    * @return The LogisticModelParameters object that we read.
1:    */
0:   public static LogisticModelParameters loadFrom(Reader in) {
0:     GsonBuilder gb = new GsonBuilder();
0:     gb.registerTypeAdapter(Matrix.class, new MatrixTypeAdapter());
0:     return gb.create().fromJson(in, LogisticModelParameters.class);
1:   }
1: 
1:   /**
0:    * Reads a model in JSON format from a File.
1:    *
0:    * @param in Where to read the model from.
0:    * @return The LogisticModelParameters object that we read.
1:    * @throws IOException If there is an error opening or closing the file.
1:    */
1:   public static LogisticModelParameters loadFrom(File in) throws IOException {
0:     FileReader input = new FileReader(in);
0:     LogisticModelParameters r = loadFrom(input);
0:     input.close();
0:     return r;
1:   }
1: 
1:   /**
1:    * Sets the types of the predictors.  This will later be used when reading CSV data.  If you don't
1:    * use the CSV data and convert to vectors on your own, you don't need to call this.
1:    *
1:    * @param predictorList The list of variable names.
1:    * @param typeList      The list of types in the format preferred by CsvRecordFactory.
1:    */
0:   public void setTypeMap(List predictorList, List typeList) {
0:     typeMap = Maps.newHashMap();
0:     if (typeList.size() == 0) {
0:       throw new IllegalArgumentException("Must have at least one type specifier");
1:     }
0:     Iterator iTypes = typeList.iterator();
1:     String lastType = null;
1:     for (Object x : predictorList) {
1:       // type list can be short .. we just repeat last spec
1:       if (iTypes.hasNext()) {
0:         lastType = iTypes.next().toString();
1:       }
1:       typeMap.put(x.toString(), lastType);
1:     }
1:   }
1: 
1:   /**
1:    * Sets the target variable.  If you don't use the CSV record factory, then this is irrelevant.
1:    *
0:    * @param targetVariable
1:    */
1:   public void setTargetVariable(String targetVariable) {
1:     this.targetVariable = targetVariable;
1:   }
1: 
1:   /**
1:    * Sets the number of target categories to be considered.
1:    *
0:    * @param maxTargetCategories
1:    */
1:   public void setMaxTargetCategories(int maxTargetCategories) {
1:     this.maxTargetCategories = maxTargetCategories;
1:   }
1: 
1:   public void setNumFeatures(int numFeatures) {
1:     this.numFeatures = numFeatures;
1:   }
1: 
1:   public void setTargetCategories(List<String> targetCategories) {
1:     this.targetCategories = targetCategories;
1:     maxTargetCategories = targetCategories.size();
1:   }
1: 
1:   public void setUseBias(boolean useBias) {
1:     this.useBias = useBias;
1:   }
1: 
1:   public boolean useBias() {
1:     return useBias;
1:   }
1: 
1:   public String getTargetVariable() {
1:     return targetVariable;
1:   }
1: 
1:   public Map<String, String> getTypeMap() {
1:     return typeMap;
1:   }
1: 
1:   public int getNumFeatures() {
1:     return numFeatures;
1:   }
1: 
1:   public int getMaxTargetCategories() {
1:     return maxTargetCategories;
1:   }
1: 
1:   public double getLambda() {
1:     return lambda;
1:   }
1: 
1:   public void setLambda(double lambda) {
1:     this.lambda = lambda;
1:   }
1: 
1:   public double getLearningRate() {
1:     return learningRate;
1:   }
1: 
1:   public void setLearningRate(double learningRate) {
1:     this.learningRate = learningRate;
1:   }
1: 
1:   /**
0:    * Tells GSON how to (de)serialize a Mahout matrix.  We assume on deserialization that
0:    * the matrix is dense.
1:    */
0:   public static class MatrixTypeAdapter implements JsonDeserializer<Matrix>, JsonSerializer<Matrix>, InstanceCreator<Matrix> {
0:     @Override
0:     public JsonElement serialize(Matrix m, Type type, JsonSerializationContext jsonSerializationContext) {
0:       JsonObject r = new JsonObject();
0:       r.add("rows", new JsonPrimitive(m.numRows()));
0:       r.add("cols", new JsonPrimitive(m.numCols()));
0:       JsonArray v = new JsonArray();
0:       for (int row = 0; row < m.numRows(); row++) {
0:         JsonArray rowData = new JsonArray();
0:         for (int col = 0; col < m.numCols(); col++) {
0:           rowData.add(new JsonPrimitive(m.get(row, col)));
1:         }
0:         v.add(rowData);
1:       }
0:       r.add("data", v);
0:       return r;
1:     }
1: 
0:     @Override
0:     public Matrix deserialize(JsonElement x, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
0:       JsonObject data = x.getAsJsonObject();
0:       Matrix r = new DenseMatrix(data.get("rows").getAsInt(), data.get("cols").getAsInt());
0:       int i = 0;
0:       for (JsonElement row : data.get("data").getAsJsonArray()) {
0:         int j = 0;
0:         for (JsonElement element : row.getAsJsonArray()) {
0:           r.set(i, j, element.getAsDouble());
0:           j++;
1:         }
0:         i++;
1:       }
0:       return r;
1:     }
1: 
0:     @Override
0:     public Matrix createInstance(Type type) {
0:       return new DenseMatrix();
1:     }
1:   }
1: }
commit:f4c8f73
commit:91456bb
============================================================================