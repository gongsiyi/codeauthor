1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:812d0ba: package org.apache.mahout.benchmark;
1:812d0ba: 
1:812d0ba: import static org.apache.mahout.benchmark.VectorBenchmarks.DENSE_FN_RAND;
1:812d0ba: import static org.apache.mahout.benchmark.VectorBenchmarks.DENSE_FN_SEQ;
1:812d0ba: import static org.apache.mahout.benchmark.VectorBenchmarks.DENSE_VECTOR;
1:812d0ba: import static org.apache.mahout.benchmark.VectorBenchmarks.RAND_FN_DENSE;
1:812d0ba: import static org.apache.mahout.benchmark.VectorBenchmarks.RAND_FN_SEQ;
1:812d0ba: import static org.apache.mahout.benchmark.VectorBenchmarks.RAND_SPARSE_VECTOR;
1:812d0ba: import static org.apache.mahout.benchmark.VectorBenchmarks.SEQ_FN_DENSE;
1:812d0ba: import static org.apache.mahout.benchmark.VectorBenchmarks.SEQ_FN_RAND;
1:812d0ba: import static org.apache.mahout.benchmark.VectorBenchmarks.SEQ_SPARSE_VECTOR;
1:812d0ba: 
1:812d0ba: import org.apache.mahout.benchmark.BenchmarkRunner.BenchmarkFn;
1:812d0ba: import org.apache.mahout.math.Vector;
1:812d0ba: 
1:812d0ba: public class PlusBenchmark {
1:812d0ba: 
1:812d0ba:   private static final String PLUS = "Plus";
1:812d0ba:   private final VectorBenchmarks mark;
1:812d0ba: 
1:812d0ba:   public PlusBenchmark(VectorBenchmarks mark) {
1:812d0ba:     this.mark = mark;
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   public void benchmark() {
1:812d0ba:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:812d0ba:       @Override
1:812d0ba:       public Boolean apply(Integer i) {
1:812d0ba:         Vector v = mark.vectors[0][mark.vIndex(i)].plus(mark.vectors[0][mark.vIndex(randIndex())]);
1:812d0ba:         return depends(v);
1:812d0ba:       }
1:812d0ba:     }), PLUS, DENSE_VECTOR);
1:812d0ba: 
1:812d0ba:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:812d0ba:       @Override
1:812d0ba:       public Boolean apply(Integer i) {
1:812d0ba:         Vector v = mark.vectors[1][mark.vIndex(i)].plus(mark.vectors[1][mark.vIndex(randIndex())]);
1:812d0ba:         return depends(v);
1:812d0ba:       }
1:812d0ba:     }), PLUS, RAND_SPARSE_VECTOR);
1:812d0ba: 
1:812d0ba:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:812d0ba:       @Override
1:812d0ba:       public Boolean apply(Integer i) {
1:812d0ba:         Vector v = mark.vectors[2][mark.vIndex(i)].plus(mark.vectors[2][mark.vIndex(randIndex())]);
1:812d0ba:         return depends(v);
1:812d0ba:       }
1:812d0ba:     }), PLUS, SEQ_SPARSE_VECTOR);
1:812d0ba: 
1:812d0ba:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:812d0ba:       @Override
1:812d0ba:       public Boolean apply(Integer i) {
1:812d0ba:         Vector v = mark.vectors[0][mark.vIndex(i)].plus(mark.vectors[1][mark.vIndex(randIndex())]);
1:812d0ba:         return depends(v);
1:812d0ba:       }
1:812d0ba:     }), PLUS, DENSE_FN_RAND);
1:812d0ba: 
1:812d0ba:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:812d0ba:       @Override
1:812d0ba:       public Boolean apply(Integer i) {
1:812d0ba:         Vector v = mark.vectors[0][mark.vIndex(i)].plus(mark.vectors[2][mark.vIndex(randIndex())]);
1:812d0ba:         return depends(v);
1:812d0ba:       }
1:812d0ba:     }), PLUS, DENSE_FN_SEQ);
1:812d0ba: 
1:812d0ba:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:812d0ba:       @Override
1:812d0ba:       public Boolean apply(Integer i) {
1:812d0ba:         Vector v = mark.vectors[1][mark.vIndex(i)].plus(mark.vectors[0][mark.vIndex(randIndex())]);
1:812d0ba:         return depends(v);
1:812d0ba:       }
1:812d0ba:     }), PLUS, RAND_FN_DENSE);
1:812d0ba: 
1:812d0ba:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:812d0ba:       @Override
1:812d0ba:       public Boolean apply(Integer i) {
1:812d0ba:         Vector v = mark.vectors[1][mark.vIndex(i)].plus(mark.vectors[2][mark.vIndex(randIndex())]);
1:812d0ba:         return depends(v);
1:812d0ba:       }
1:812d0ba:     }), PLUS, RAND_FN_SEQ);
1:812d0ba: 
1:812d0ba:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:812d0ba:       @Override
1:812d0ba:       public Boolean apply(Integer i) {
1:812d0ba:         Vector v = mark.vectors[2][mark.vIndex(i)].plus(mark.vectors[0][mark.vIndex(randIndex())]);
1:812d0ba:         return depends(v);
1:812d0ba:       }
1:812d0ba:     }), PLUS, SEQ_FN_DENSE);
1:812d0ba: 
1:812d0ba:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:812d0ba:       @Override
1:812d0ba:       public Boolean apply(Integer i) {
1:812d0ba:         Vector v = mark.vectors[2][mark.vIndex(i)].plus(mark.vectors[1][mark.vIndex(randIndex())]);
1:812d0ba:         return depends(v);
1:812d0ba:       }
1:812d0ba:     }), PLUS, SEQ_FN_RAND);
1:812d0ba:   }
1:812d0ba: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
author:Robin Anil
-------------------------------------------------------------------------------
commit:812d0ba
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.benchmark;
1: 
1: import static org.apache.mahout.benchmark.VectorBenchmarks.DENSE_FN_RAND;
1: import static org.apache.mahout.benchmark.VectorBenchmarks.DENSE_FN_SEQ;
1: import static org.apache.mahout.benchmark.VectorBenchmarks.DENSE_VECTOR;
1: import static org.apache.mahout.benchmark.VectorBenchmarks.RAND_FN_DENSE;
1: import static org.apache.mahout.benchmark.VectorBenchmarks.RAND_FN_SEQ;
1: import static org.apache.mahout.benchmark.VectorBenchmarks.RAND_SPARSE_VECTOR;
1: import static org.apache.mahout.benchmark.VectorBenchmarks.SEQ_FN_DENSE;
1: import static org.apache.mahout.benchmark.VectorBenchmarks.SEQ_FN_RAND;
1: import static org.apache.mahout.benchmark.VectorBenchmarks.SEQ_SPARSE_VECTOR;
1: 
1: import org.apache.mahout.benchmark.BenchmarkRunner.BenchmarkFn;
1: import org.apache.mahout.math.Vector;
1: 
1: public class PlusBenchmark {
1: 
1:   private static final String PLUS = "Plus";
1:   private final VectorBenchmarks mark;
1: 
1:   public PlusBenchmark(VectorBenchmarks mark) {
1:     this.mark = mark;
1:   }
1: 
1:   public void benchmark() {
1:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:       @Override
1:       public Boolean apply(Integer i) {
1:         Vector v = mark.vectors[0][mark.vIndex(i)].plus(mark.vectors[0][mark.vIndex(randIndex())]);
1:         return depends(v);
1:       }
1:     }), PLUS, DENSE_VECTOR);
1: 
1:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:       @Override
1:       public Boolean apply(Integer i) {
1:         Vector v = mark.vectors[1][mark.vIndex(i)].plus(mark.vectors[1][mark.vIndex(randIndex())]);
1:         return depends(v);
1:       }
1:     }), PLUS, RAND_SPARSE_VECTOR);
1: 
1:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:       @Override
1:       public Boolean apply(Integer i) {
1:         Vector v = mark.vectors[2][mark.vIndex(i)].plus(mark.vectors[2][mark.vIndex(randIndex())]);
1:         return depends(v);
1:       }
1:     }), PLUS, SEQ_SPARSE_VECTOR);
1: 
1:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:       @Override
1:       public Boolean apply(Integer i) {
1:         Vector v = mark.vectors[0][mark.vIndex(i)].plus(mark.vectors[1][mark.vIndex(randIndex())]);
1:         return depends(v);
1:       }
1:     }), PLUS, DENSE_FN_RAND);
1: 
1:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:       @Override
1:       public Boolean apply(Integer i) {
1:         Vector v = mark.vectors[0][mark.vIndex(i)].plus(mark.vectors[2][mark.vIndex(randIndex())]);
1:         return depends(v);
1:       }
1:     }), PLUS, DENSE_FN_SEQ);
1: 
1:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:       @Override
1:       public Boolean apply(Integer i) {
1:         Vector v = mark.vectors[1][mark.vIndex(i)].plus(mark.vectors[0][mark.vIndex(randIndex())]);
1:         return depends(v);
1:       }
1:     }), PLUS, RAND_FN_DENSE);
1: 
1:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:       @Override
1:       public Boolean apply(Integer i) {
1:         Vector v = mark.vectors[1][mark.vIndex(i)].plus(mark.vectors[2][mark.vIndex(randIndex())]);
1:         return depends(v);
1:       }
1:     }), PLUS, RAND_FN_SEQ);
1: 
1:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:       @Override
1:       public Boolean apply(Integer i) {
1:         Vector v = mark.vectors[2][mark.vIndex(i)].plus(mark.vectors[0][mark.vIndex(randIndex())]);
1:         return depends(v);
1:       }
1:     }), PLUS, SEQ_FN_DENSE);
1: 
1:     mark.printStats(mark.getRunner().benchmark(new BenchmarkFn() {
1:       @Override
1:       public Boolean apply(Integer i) {
1:         Vector v = mark.vectors[2][mark.vIndex(i)].plus(mark.vectors[1][mark.vIndex(randIndex())]);
1:         return depends(v);
1:       }
1:     }), PLUS, SEQ_FN_RAND);
1:   }
1: }
============================================================================