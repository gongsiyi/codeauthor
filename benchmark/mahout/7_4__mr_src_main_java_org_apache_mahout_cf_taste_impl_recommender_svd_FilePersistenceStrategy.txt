1:84f17ae: /**
1:84f17ae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:84f17ae:  * contributor license agreements.  See the NOTICE file distributed with
1:84f17ae:  * this work for additional information regarding copyright ownership.
1:84f17ae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:84f17ae:  * (the "License"); you may not use this file except in compliance with
1:84f17ae:  * the License.  You may obtain a copy of the License at
1:84f17ae:  *
1:84f17ae:  *     http://www.apache.org/licenses/LICENSE-2.0
1:84f17ae:  *
1:84f17ae:  * Unless required by applicable law or agreed to in writing, software
1:84f17ae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:84f17ae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:84f17ae:  * See the License for the specific language governing permissions and
1:84f17ae:  * limitations under the License.
1:84f17ae:  */
2:84f17ae: 
1:84f17ae: package org.apache.mahout.cf.taste.impl.recommender.svd;
1:84f17ae: 
1:84f17ae: import java.io.BufferedInputStream;
1:84f17ae: import java.io.BufferedOutputStream;
1:84f17ae: import java.io.DataInput;
1:84f17ae: import java.io.DataInputStream;
1:84f17ae: import java.io.DataOutput;
1:84f17ae: import java.io.DataOutputStream;
1:84f17ae: import java.io.File;
1:84f17ae: import java.io.FileInputStream;
1:84f17ae: import java.io.FileOutputStream;
1:84f17ae: import java.io.IOException;
1:84f17ae: import java.util.Map;
1:84f17ae: 
1:87d4b2e: import com.google.common.base.Preconditions;
1:87d4b2e: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1:87d4b2e: import org.apache.mahout.cf.taste.common.NoSuchUserException;
1:87d4b2e: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:87d4b2e: import org.slf4j.Logger;
1:87d4b2e: import org.slf4j.LoggerFactory;
1:87d4b2e: 
1:84f17ae: /** Provides a file-based persistent store. */
1:84f17ae: public class FilePersistenceStrategy implements PersistenceStrategy {
1:84f17ae: 
1:84f17ae:   private final File file;
1:84f17ae: 
1:84f17ae:   private static final Logger log = LoggerFactory.getLogger(FilePersistenceStrategy.class);
1:84f17ae: 
1:84f17ae:   /**
1:84f17ae:    * @param file the file to use for storage. If the file does not exist it will be created when required.
1:84f17ae:    */
1:84f17ae:   public FilePersistenceStrategy(File file) {
1:84f17ae:     this.file = Preconditions.checkNotNull(file);
1:84f17ae:   }
1:84f17ae: 
1:84f17ae:   @Override
1:84f17ae:   public Factorization load() throws IOException {
1:84f17ae:     if (!file.exists()) {
1:84f17ae:       log.info("{} does not yet exist, no factorization found", file.getAbsolutePath());
1:84f17ae:       return null;
1:84f17ae:     }
1:85f9ece:     try (DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(file)))){
1:84f17ae:       log.info("Reading factorization from {}...", file.getAbsolutePath());
1:84f17ae:       return readBinary(in);
1:84f17ae:     }
1:84f17ae:   }
1:84f17ae: 
1:84f17ae:   @Override
1:84f17ae:   public void maybePersist(Factorization factorization) throws IOException {
1:85f9ece:     try (DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)))){
1:84f17ae:       log.info("Writing factorization to {}...", file.getAbsolutePath());
1:84f17ae:       writeBinary(factorization, out);
1:84f17ae:     }
1:84f17ae:   }
1:84f17ae: 
1:1499411:   protected static void writeBinary(Factorization factorization, DataOutput out) throws IOException {
1:84f17ae:     out.writeInt(factorization.numFeatures());
1:84f17ae:     out.writeInt(factorization.numUsers());
1:84f17ae:     out.writeInt(factorization.numItems());
1:84f17ae: 
1:84f17ae:     for (Map.Entry<Long,Integer> mappingEntry : factorization.getUserIDMappings()) {
1:84f17ae:       long userID = mappingEntry.getKey();
1:84f17ae:       out.writeInt(mappingEntry.getValue());
1:84f17ae:       out.writeLong(userID);
3:84f17ae:       try {
1:84f17ae:         double[] userFeatures = factorization.getUserFeatures(userID);
1:84f17ae:         for (int feature = 0; feature < factorization.numFeatures(); feature++) {
1:84f17ae:           out.writeDouble(userFeatures[feature]);
1:84f17ae:         }
1:84f17ae:       } catch (NoSuchUserException e) {
1:84f17ae:         throw new IOException("Unable to persist factorization", e);
1:84f17ae:       }
1:84f17ae:     }
1:84f17ae: 
1:84f17ae:     for (Map.Entry<Long,Integer> entry : factorization.getItemIDMappings()) {
1:84f17ae:       long itemID = entry.getKey();
1:84f17ae:       out.writeInt(entry.getValue());
1:84f17ae:       out.writeLong(itemID);
1:84f17ae:       try {
1:84f17ae:         double[] itemFeatures = factorization.getItemFeatures(itemID);
1:84f17ae:         for (int feature = 0; feature < factorization.numFeatures(); feature++) {
1:84f17ae:           out.writeDouble(itemFeatures[feature]);
1:84f17ae:         }
1:84f17ae:       } catch (NoSuchItemException e) {
1:84f17ae:         throw new IOException("Unable to persist factorization", e);
1:84f17ae:       }
1:84f17ae:     }
1:84f17ae:   }
1:84f17ae: 
1:1499411:   public static Factorization readBinary(DataInput in) throws IOException {
1:84f17ae:     int numFeatures = in.readInt();
1:84f17ae:     int numUsers = in.readInt();
1:84f17ae:     int numItems = in.readInt();
1:84f17ae: 
1:85f9ece:     FastByIDMap<Integer> userIDMapping = new FastByIDMap<>(numUsers);
1:84f17ae:     double[][] userFeatures = new double[numUsers][numFeatures];
1:84f17ae: 
1:84f17ae:     for (int n = 0; n < numUsers; n++) {
1:84f17ae:       int userIndex = in.readInt();
1:84f17ae:       long userID = in.readLong();
1:84f17ae:       userIDMapping.put(userID, userIndex);
1:84f17ae:       for (int feature = 0; feature < numFeatures; feature++) {
1:84f17ae:         userFeatures[userIndex][feature] = in.readDouble();
1:84f17ae:       }
1:84f17ae:     }
1:84f17ae: 
1:85f9ece:     FastByIDMap<Integer> itemIDMapping = new FastByIDMap<>(numItems);
1:84f17ae:     double[][] itemFeatures = new double[numItems][numFeatures];
1:84f17ae: 
1:84f17ae:     for (int n = 0; n < numItems; n++) {
1:84f17ae:       int itemIndex = in.readInt();
1:84f17ae:       long itemID = in.readLong();
1:84f17ae:       itemIDMapping.put(itemID, itemIndex);
1:84f17ae:       for (int feature = 0; feature < numFeatures; feature++) {
1:84f17ae:         itemFeatures[itemIndex][feature] = in.readDouble();
1:84f17ae:       }
1:84f17ae:     }
1:84f17ae: 
1:84f17ae:     return new Factorization(userIDMapping, itemIDMapping, userFeatures, itemFeatures);
1:84f17ae:   }
1:84f17ae: 
1:84f17ae: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     try (DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(file)))){
1:     try (DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)))){
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<Integer> userIDMapping = new FastByIDMap<>(numUsers);
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<Integer> itemIDMapping = new FastByIDMap<>(numItems);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
0: import com.google.common.io.Closeables;
1: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1: import org.apache.mahout.cf.taste.common.NoSuchUserException;
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(out, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(in, true);
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(out, true);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:   protected static void writeBinary(Factorization factorization, DataOutput out) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public static Factorization readBinary(DataInput in) throws IOException {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:84f17ae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender.svd;
1: 
0: import com.google.common.base.Preconditions;
0: import com.google.common.io.Closeables;
0: import org.apache.mahout.cf.taste.common.NoSuchItemException;
0: import org.apache.mahout.cf.taste.common.NoSuchUserException;
0: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import java.io.BufferedInputStream;
1: import java.io.BufferedOutputStream;
1: import java.io.DataInput;
1: import java.io.DataInputStream;
1: import java.io.DataOutput;
1: import java.io.DataOutputStream;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.util.Map;
1: 
1: /** Provides a file-based persistent store. */
1: public class FilePersistenceStrategy implements PersistenceStrategy {
1: 
1:   private final File file;
1: 
1:   private static final Logger log = LoggerFactory.getLogger(FilePersistenceStrategy.class);
1: 
1:   /**
1:    * @param file the file to use for storage. If the file does not exist it will be created when required.
1:    */
1:   public FilePersistenceStrategy(File file) {
1:     this.file = Preconditions.checkNotNull(file);
1:   }
1: 
1:   @Override
1:   public Factorization load() throws IOException {
1:     if (!file.exists()) {
1:       log.info("{} does not yet exist, no factorization found", file.getAbsolutePath());
1:       return null;
1:     }
0:     DataInputStream in = null;
1:     try {
1:       log.info("Reading factorization from {}...", file.getAbsolutePath());
0:       in = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
1:       return readBinary(in);
0:     } finally {
0:       Closeables.closeQuietly(in);
1:     }
1:   }
1: 
1:   @Override
1:   public void maybePersist(Factorization factorization) throws IOException {
0:     DataOutputStream out = null;
1:     try {
1:       log.info("Writing factorization to {}...", file.getAbsolutePath());
0:       out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
1:       writeBinary(factorization, out);
0:     } finally {
0:       Closeables.closeQuietly(out);
1:     }
1:   }
1: 
0:   protected void writeBinary(Factorization factorization, DataOutput out) throws IOException {
1:     out.writeInt(factorization.numFeatures());
1:     out.writeInt(factorization.numUsers());
1:     out.writeInt(factorization.numItems());
1: 
1:     for (Map.Entry<Long,Integer> mappingEntry : factorization.getUserIDMappings()) {
1:       long userID = mappingEntry.getKey();
1:       out.writeInt(mappingEntry.getValue());
1:       out.writeLong(userID);
1:       try {
1:         double[] userFeatures = factorization.getUserFeatures(userID);
1:         for (int feature = 0; feature < factorization.numFeatures(); feature++) {
1:           out.writeDouble(userFeatures[feature]);
1:         }
1:       } catch (NoSuchUserException e) {
1:         throw new IOException("Unable to persist factorization", e);
1:       }
1:     }
1: 
1:     for (Map.Entry<Long,Integer> entry : factorization.getItemIDMappings()) {
1:       long itemID = entry.getKey();
1:       out.writeInt(entry.getValue());
1:       out.writeLong(itemID);
1:       try {
1:         double[] itemFeatures = factorization.getItemFeatures(itemID);
1:         for (int feature = 0; feature < factorization.numFeatures(); feature++) {
1:           out.writeDouble(itemFeatures[feature]);
1:         }
1:       } catch (NoSuchItemException e) {
1:         throw new IOException("Unable to persist factorization", e);
1:       }
1:     }
1:   }
1: 
0:   public Factorization readBinary(DataInput in) throws IOException {
1:     int numFeatures = in.readInt();
1:     int numUsers = in.readInt();
1:     int numItems = in.readInt();
1: 
0:     FastByIDMap<Integer> userIDMapping = new FastByIDMap<Integer>(numUsers);
1:     double[][] userFeatures = new double[numUsers][numFeatures];
1: 
1:     for (int n = 0; n < numUsers; n++) {
1:       int userIndex = in.readInt();
1:       long userID = in.readLong();
1:       userIDMapping.put(userID, userIndex);
1:       for (int feature = 0; feature < numFeatures; feature++) {
1:         userFeatures[userIndex][feature] = in.readDouble();
1:       }
1:     }
1: 
0:     FastByIDMap<Integer> itemIDMapping = new FastByIDMap<Integer>(numItems);
1:     double[][] itemFeatures = new double[numItems][numFeatures];
1: 
1:     for (int n = 0; n < numItems; n++) {
1:       int itemIndex = in.readInt();
1:       long itemID = in.readLong();
1:       itemIDMapping.put(itemID, itemIndex);
1:       for (int feature = 0; feature < numFeatures; feature++) {
1:         itemFeatures[itemIndex][feature] = in.readDouble();
1:       }
1:     }
1: 
1:     return new Factorization(userIDMapping, itemIDMapping, userFeatures, itemFeatures);
1:   }
1: 
1: }
============================================================================