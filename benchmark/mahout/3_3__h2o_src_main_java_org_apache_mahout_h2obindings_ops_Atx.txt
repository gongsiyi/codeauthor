1:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
3:f870a63:  */
2:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings.ops;
1:f870a63: 
1:f870a63: import org.apache.mahout.math.Vector;
1:f870a63: import org.apache.mahout.math.DenseVector;
1:f870a63: import org.apache.mahout.math.Matrix;
1:f870a63: import org.apache.mahout.math.DenseMatrix;
1:f870a63: import org.apache.mahout.h2obindings.H2OHelper;
1:f870a63: import org.apache.mahout.h2obindings.drm.H2OBCast;
1:f870a63: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:f870a63: 
1:f870a63: import water.MRTask;
1:f870a63: import water.fvec.Frame;
1:f870a63: import water.fvec.Chunk;
1:f870a63: import water.util.ArrayUtils;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * Calculate A'x (where x is an in-core Vector)
1:2d1b0bf:  */
1:f870a63: public class Atx {
1:2d1b0bf:   /**
1:2d1b0bf:    * Perform A'x operation with a DRM and an in-core Vector to create a new DRM.
1:2d1b0bf:    *
1:2d1b0bf:    * @param drmA DRM representing matrix A.
1:2d1b0bf:    * @param x in-core Mahout Vector.
1:2d1b0bf:    * @return new DRM containing A'x.
1:2d1b0bf:    */
1:03a5bb6:   public static H2ODrm exec(H2ODrm drmA, Vector x) {
1:f870a63:     Frame A = drmA.frame;
1:99c32f2:     final H2OBCast<Vector> bx = new H2OBCast<>(x);
1:f870a63: 
1:2d1b0bf:     // A'x is computed into atx[] with an MRTask on A (with
1:2d1b0bf:     // x available as a Broadcast
1:2d1b0bf:     //
1:2d1b0bf:     // x.size() == A.numRows()
1:2d1b0bf:     // atx.length == chks.length == A.numCols()
1:f870a63:     class MRTaskAtx extends MRTask<MRTaskAtx> {
1:f870a63:       double atx[];
1:f870a63:       public void map(Chunk chks[]) {
1:2d1b0bf:         int chunkSize = chks[0].len();
1:f870a63:         Vector x = bx.value();
1:f870a63:         long start = chks[0].start();
1:f870a63: 
1:f870a63:         atx = new double[chks.length];
1:2d1b0bf:         for (int r = 0; r < chunkSize; r++) {
1:f870a63:           double d = x.getQuick((int)start + r);
1:f870a63:           for (int c = 0; c < chks.length; c++) {
1:f5f54a1:             atx[c] += (chks[c].atd(r) * d);
1:f870a63:           }
1:f870a63:         }
1:f870a63:       }
1:f870a63:       public void reduce(MRTaskAtx other) {
1:f870a63:         ArrayUtils.add(atx, other.atx);
1:f870a63:       }
1:f870a63:     }
1:f870a63: 
1:2d1b0bf:     // Take the result in .atx[], and convert into a Frame
1:2d1b0bf:     // using existing helper functions (creating a Matrix
1:2d1b0bf:     // along the way for the Helper)
1:f870a63:     Vector v = new DenseVector(new MRTaskAtx().doAll(A).atx);
1:f870a63:     Matrix m = new DenseMatrix(A.numCols(), 1);
1:f870a63:     m.assignColumn(0, v);
1:c964986:     return H2OHelper.drmFromMatrix(m, -1, -1);
1:f870a63:   }
1:f870a63: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:99c32f2
/////////////////////////////////////////////////////////////////////////
1:     final H2OBCast<Vector> bx = new H2OBCast<>(x);
author:Stevo Slavic
-------------------------------------------------------------------------------
commit:f5f54a1
/////////////////////////////////////////////////////////////////////////
1:             atx[c] += (chks[c].atd(r) * d);
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Calculate A'x (where x is an in-core Vector)
1:  */
1:   /**
1:    * Perform A'x operation with a DRM and an in-core Vector to create a new DRM.
1:    *
1:    * @param drmA DRM representing matrix A.
1:    * @param x in-core Mahout Vector.
1:    * @return new DRM containing A'x.
1:    */
1:     // A'x is computed into atx[] with an MRTask on A (with
1:     // x available as a Broadcast
1:     //
1:     // x.size() == A.numRows()
1:     // atx.length == chks.length == A.numCols()
1:         int chunkSize = chks[0].len();
1:         for (int r = 0; r < chunkSize; r++) {
/////////////////////////////////////////////////////////////////////////
1:     // Take the result in .atx[], and convert into a Frame
1:     // using existing helper functions (creating a Matrix
1:     // along the way for the Helper)
commit:03a5bb6
/////////////////////////////////////////////////////////////////////////
1:   public static H2ODrm exec(H2ODrm drmA, Vector x) {
commit:c964986
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     return H2OHelper.drmFromMatrix(m, -1, -1);
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.ops;
1: 
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.h2obindings.H2OHelper;
1: import org.apache.mahout.h2obindings.drm.H2OBCast;
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
1: import water.MRTask;
1: import water.fvec.Frame;
0: import water.fvec.Vec;
1: import water.fvec.Chunk;
0: import water.fvec.NewChunk;
1: import water.util.ArrayUtils;
1: 
1: public class Atx {
0:   /* Calculate A'x (where x is an in-core Vector) */
0:   public static H2ODrm Atx(H2ODrm drmA, Vector x) {
1:     Frame A = drmA.frame;
0:     final H2OBCast<Vector> bx = new H2OBCast<Vector>(x);
1: 
0:     /* A'x is computed into atx[] with an MRTask on A (with
0:        x available as a Broadcast
1: 
0:        x.size() == A.numRows()
0:        atx.length == chks.length == A.numCols()
1:     */
1:     class MRTaskAtx extends MRTask<MRTaskAtx> {
1:       double atx[];
1:       public void map(Chunk chks[]) {
0:         int chunk_size = chks[0].len();
1:         Vector x = bx.value();
1:         long start = chks[0].start();
1: 
1:         atx = new double[chks.length];
0:         for (int r = 0; r < chunk_size; r++) {
1:           double d = x.getQuick((int)start + r);
1:           for (int c = 0; c < chks.length; c++) {
0:             atx[c] += (chks[c].at0(r) * d);
1:           }
1:         }
1:       }
1:       public void reduce(MRTaskAtx other) {
1:         ArrayUtils.add(atx, other.atx);
1:       }
1:     }
1: 
0:     /* Take the result in .atx[], and convert into a Frame
0:        using existing helper functions (creating a Matrix
0:        along the way for the Helper)
1:     */
1:     Vector v = new DenseVector(new MRTaskAtx().doAll(A).atx);
1:     Matrix m = new DenseMatrix(A.numCols(), 1);
1:     m.assignColumn(0, v);
0:     return H2OHelper.drm_from_matrix(m, -1, -1);
1:   }
1: }
============================================================================