1:35fa73f: /**
1:35fa73f:  * Licensed to the Apache Software Foundation (ASF) under one
1:35fa73f:  * or more contributor license agreements. See the NOTICE file
1:35fa73f:  * distributed with this work for additional information
1:35fa73f:  * regarding copyright ownership. The ASF licenses this file
1:35fa73f:  * to you under the Apache License, Version 2.0 (the
1:35fa73f:  * "License"); you may not use this file except in compliance
1:35fa73f:  * with the License. You may obtain a copy of the License at
1:35fa73f:  *
1:35fa73f:  * http://www.apache.org/licenses/LICENSE-2.0
1:35fa73f:  *
1:35fa73f:  * Unless required by applicable law or agreed to in writing,
1:35fa73f:  * software distributed under the License is distributed on an
1:35fa73f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:35fa73f:  * KIND, either express or implied. See the License for the
1:35fa73f:  * specific language governing permissions and limitations
1:35fa73f:  * under the License.
1:35fa73f:  */
1:35fa73f: /*
1:35fa73f: Copyright 1999 CERN - European Organization for Nuclear Research.
1:35fa73f: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1:35fa73f: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1:35fa73f: that both that copyright notice and this permission notice appear in supporting documentation. 
1:35fa73f: CERN makes no representations about the suitability of this software for any purpose. 
1:35fa73f: It is provided "as is" without expressed or implied warranty.
1:35fa73f: */
1:35fa73f: package org.apache.mahout.collections;
1:35fa73f: 
1:35fa73f: /**
1:35fa73f:  * Arithmetic functions.
1:35fa73f:  */
1:8b6a26a: public final class Arithmetic extends Constants {
1:6d16230:   // for method STIRLING_CORRECTION(...)
1:6d16230:   private static final double[] STIRLING_CORRECTION = {
1:229aeff:     0.0,
1:229aeff:     8.106146679532726e-02, 4.134069595540929e-02,
1:229aeff:     2.767792568499834e-02, 2.079067210376509e-02,
1:229aeff:     1.664469118982119e-02, 1.387612882307075e-02,
1:229aeff:     1.189670994589177e-02, 1.041126526197209e-02,
1:229aeff:     9.255462182712733e-03, 8.330563433362871e-03,
1:229aeff:     7.573675487951841e-03, 6.942840107209530e-03,
1:229aeff:     6.408994188004207e-03, 5.951370112758848e-03,
1:229aeff:     5.554733551962801e-03, 5.207655919609640e-03,
1:229aeff:     4.901395948434738e-03, 4.629153749334029e-03,
1:229aeff:     4.385560249232324e-03, 4.166319691996922e-03,
1:229aeff:     3.967954218640860e-03, 3.787618068444430e-03,
1:229aeff:     3.622960224683090e-03, 3.472021382978770e-03,
1:229aeff:     3.333155636728090e-03, 3.204970228055040e-03,
1:229aeff:     3.086278682608780e-03, 2.976063983550410e-03,
1:229aeff:     2.873449362352470e-03, 2.777674929752690e-03,
1:35fa73f:   };
1:35fa73f: 
1:35fa73f:   // for method logFactorial(...)
1:35fa73f:   // log(k!) for k = 0, ..., 29
1:6d16230:   private static final double[] LOG_FACTORIALS = {
1:229aeff:     0.00000000000000000, 0.00000000000000000, 0.69314718055994531,
1:229aeff:     1.79175946922805500, 3.17805383034794562, 4.78749174278204599,
1:229aeff:     6.57925121201010100, 8.52516136106541430, 10.60460290274525023,
1:229aeff:     12.80182748008146961, 15.10441257307551530, 17.50230784587388584,
1:229aeff:     19.98721449566188615, 22.55216385312342289, 25.19122118273868150,
1:229aeff:     27.89927138384089157, 30.67186010608067280, 33.50507345013688888,
1:229aeff:     36.39544520803305358, 39.33988418719949404, 42.33561646075348503,
1:229aeff:     45.38013889847690803, 48.47118135183522388, 51.60667556776437357,
1:229aeff:     54.78472939811231919, 58.00360522298051994, 61.26170176100200198,
1:229aeff:     64.55753862700633106, 67.88974313718153498, 71.25703896716800901
1:35fa73f:   };
1:35fa73f: 
1:35fa73f:   // k! for k = 0, ..., 20
1:6d16230:   private static final long[] LONG_FACTORIALS = {
1:229aeff:     1L,
1:229aeff:     1L,
1:229aeff:     2L,
1:229aeff:     6L,
1:229aeff:     24L,
1:229aeff:     120L,
1:229aeff:     720L,
1:229aeff:     5040L,
1:229aeff:     40320L,
1:229aeff:     362880L,
1:229aeff:     3628800L,
1:229aeff:     39916800L,
1:229aeff:     479001600L,
1:229aeff:     6227020800L,
1:229aeff:     87178291200L,
1:229aeff:     1307674368000L,
1:229aeff:     20922789888000L,
1:229aeff:     355687428096000L,
1:229aeff:     6402373705728000L,
1:229aeff:     121645100408832000L,
1:229aeff:     2432902008176640000L
1:35fa73f:   };
1:35fa73f: 
1:35fa73f:   // k! for k = 21, ..., 170
1:6d16230:   private static final double[] DOUBLE_FACTORIALS = {
1:229aeff:     5.109094217170944E19,
1:229aeff:     1.1240007277776077E21,
1:229aeff:     2.585201673888498E22,
1:229aeff:     6.204484017332394E23,
1:229aeff:     1.5511210043330984E25,
1:229aeff:     4.032914611266057E26,
1:229aeff:     1.0888869450418352E28,
1:229aeff:     3.048883446117138E29,
1:229aeff:     8.841761993739701E30,
1:229aeff:     2.652528598121911E32,
1:229aeff:     8.222838654177924E33,
1:229aeff:     2.6313083693369355E35,
1:229aeff:     8.68331761881189E36,
1:229aeff:     2.952327990396041E38,
1:229aeff:     1.0333147966386144E40,
1:229aeff:     3.719933267899013E41,
1:229aeff:     1.3763753091226346E43,
1:229aeff:     5.23022617466601E44,
1:229aeff:     2.0397882081197447E46,
1:229aeff:     8.15915283247898E47,
1:229aeff:     3.34525266131638E49,
1:229aeff:     1.4050061177528801E51,
1:229aeff:     6.041526306337384E52,
1:229aeff:     2.6582715747884495E54,
1:229aeff:     1.196222208654802E56,
1:229aeff:     5.502622159812089E57,
1:229aeff:     2.5862324151116827E59,
1:229aeff:     1.2413915592536068E61,
1:229aeff:     6.082818640342679E62,
1:229aeff:     3.0414093201713376E64,
1:229aeff:     1.5511187532873816E66,
1:229aeff:     8.06581751709439E67,
1:229aeff:     4.274883284060024E69,
1:229aeff:     2.308436973392413E71,
1:229aeff:     1.2696403353658264E73,
1:229aeff:     7.109985878048632E74,
1:229aeff:     4.052691950487723E76,
1:229aeff:     2.350561331282879E78,
1:229aeff:     1.386831185456898E80,
1:229aeff:     8.32098711274139E81,
1:229aeff:     5.075802138772246E83,
1:229aeff:     3.146997326038794E85,
1:229aeff:     1.9826083154044396E87,
1:229aeff:     1.2688693218588414E89,
1:229aeff:     8.247650592082472E90,
1:229aeff:     5.443449390774432E92,
1:229aeff:     3.6471110918188705E94,
1:229aeff:     2.48003554243683E96,
1:229aeff:     1.7112245242814127E98,
1:229aeff:     1.1978571669969892E100,
1:229aeff:     8.504785885678624E101,
1:229aeff:     6.123445837688612E103,
1:229aeff:     4.470115461512686E105,
1:229aeff:     3.307885441519387E107,
1:229aeff:     2.4809140811395404E109,
1:229aeff:     1.8854947016660506E111,
1:229aeff:     1.451830920282859E113,
1:229aeff:     1.1324281178206295E115,
1:229aeff:     8.94618213078298E116,
1:229aeff:     7.15694570462638E118,
1:229aeff:     5.797126020747369E120,
1:229aeff:     4.7536433370128435E122,
1:229aeff:     3.94552396972066E124,
1:229aeff:     3.314240134565354E126,
1:229aeff:     2.8171041143805494E128,
1:229aeff:     2.4227095383672744E130,
1:229aeff:     2.107757298379527E132,
1:229aeff:     1.854826422573984E134,
1:229aeff:     1.6507955160908465E136,
1:229aeff:     1.4857159644817605E138,
1:229aeff:     1.3520015276784033E140,
1:229aeff:     1.2438414054641305E142,
1:229aeff:     1.156772507081641E144,
1:229aeff:     1.0873661566567426E146,
1:229aeff:     1.0329978488239061E148,
1:229aeff:     9.916779348709491E149,
1:229aeff:     9.619275968248216E151,
1:229aeff:     9.426890448883248E153,
1:229aeff:     9.332621544394415E155,
1:229aeff:     9.332621544394418E157,
1:229aeff:     9.42594775983836E159,
1:229aeff:     9.614466715035125E161,
1:229aeff:     9.902900716486178E163,
1:229aeff:     1.0299016745145631E166,
1:229aeff:     1.0813967582402912E168,
1:229aeff:     1.1462805637347086E170,
1:229aeff:     1.2265202031961373E172,
1:229aeff:     1.324641819451829E174,
1:229aeff:     1.4438595832024942E176,
1:229aeff:     1.5882455415227423E178,
1:229aeff:     1.7629525510902457E180,
1:229aeff:     1.974506857221075E182,
1:229aeff:     2.2311927486598138E184,
1:229aeff:     2.543559733472186E186,
1:229aeff:     2.925093693493014E188,
1:229aeff:     3.393108684451899E190,
1:229aeff:     3.96993716080872E192,
1:229aeff:     4.6845258497542896E194,
1:229aeff:     5.574585761207606E196,
1:229aeff:     6.689502913449135E198,
1:229aeff:     8.094298525273444E200,
1:229aeff:     9.875044200833601E202,
1:229aeff:     1.2146304367025332E205,
1:229aeff:     1.506141741511141E207,
1:229aeff:     1.882677176888926E209,
1:229aeff:     2.3721732428800483E211,
1:229aeff:     3.0126600184576624E213,
1:229aeff:     3.856204823625808E215,
1:229aeff:     4.974504222477287E217,
1:229aeff:     6.466855489220473E219,
1:229aeff:     8.471580690878813E221,
1:229aeff:     1.1182486511960037E224,
1:229aeff:     1.4872707060906847E226,
1:229aeff:     1.99294274616152E228,
1:229aeff:     2.690472707318049E230,
1:229aeff:     3.6590428819525483E232,
1:229aeff:     5.0128887482749884E234,
1:229aeff:     6.917786472619482E236,
1:229aeff:     9.615723196941089E238,
1:229aeff:     1.3462012475717523E241,
1:229aeff:     1.8981437590761713E243,
1:229aeff:     2.6953641378881633E245,
1:229aeff:     3.8543707171800694E247,
1:229aeff:     5.550293832739308E249,
1:229aeff:     8.047926057471989E251,
1:229aeff:     1.1749972043909107E254,
1:229aeff:     1.72724589045464E256,
1:229aeff:     2.5563239178728637E258,
1:229aeff:     3.8089226376305687E260,
1:229aeff:     5.7133839564458575E262,
1:229aeff:     8.627209774233244E264,
1:229aeff:     1.3113358856834527E267,
1:229aeff:     2.0063439050956838E269,
1:229aeff:     3.0897696138473515E271,
1:229aeff:     4.789142901463393E273,
1:229aeff:     7.471062926282892E275,
1:229aeff:     1.1729568794264134E278,
1:229aeff:     1.8532718694937346E280,
1:229aeff:     2.946702272495036E282,
1:229aeff:     4.714723635992061E284,
1:229aeff:     7.590705053947223E286,
1:229aeff:     1.2296942187394494E289,
1:229aeff:     2.0044015765453032E291,
1:229aeff:     3.287218585534299E293,
1:229aeff:     5.423910666131583E295,
1:229aeff:     9.003691705778434E297,
1:229aeff:     1.5036165148649983E300,
1:229aeff:     2.5260757449731988E302,
1:229aeff:     4.2690680090047056E304,
1:229aeff:     7.257415615308004E306
1:35fa73f:   };
1:35fa73f: 
1:35fa73f:   /** Makes this class non instantiable, but still let's others inherit from it. */
1:8396a27:   Arithmetic() {
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /**
1:b5c2879:    * Efficiently returns the binomial coefficient, often also referred to as 
1:b5c2879:    * "n over k" or "n choose k". The binomial coefficient is defined as 
1:b5c2879:    * <tt>(n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k )</tt>.
1:b5c2879:    * <ul> <li><tt>k&lt;0</tt>: <tt>0</tt>.</li>
1:b5c2879:    * <li><tt>k==0</tt>: <tt>1</tt>.</li>
1:b5c2879:    * <li><tt>k==1</tt>: <tt>n</tt>.</li>
1:b5c2879:    * <li>else: <tt>(n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k)</tt>.</li>
1:b5c2879:    * </ul>
1:35fa73f:    *
1:b5c2879:      * @param n
1:b5c2879:      * @param k
1:35fa73f:    * @return the binomial coefficient.
1:35fa73f:    */
1:35fa73f:   public static double binomial(double n, long k) {
1:35fa73f:     if (k < 0) {
1:35fa73f:       return 0;
1:35fa73f:     }
1:35fa73f:     if (k == 0) {
1:35fa73f:       return 1;
1:35fa73f:     }
1:35fa73f:     if (k == 1) {
1:35fa73f:       return n;
1:35fa73f:     }
1:35fa73f: 
1:35fa73f:     // binomial(n,k) = (n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k )
1:35fa73f:     double a = n - k + 1;
1:35fa73f:     double b = 1;
1:35fa73f:     double binomial = 1;
1:35fa73f:     for (long i = k; i-- > 0;) {
1:35fa73f:       binomial *= (a++) / (b++);
1:35fa73f:     }
1:35fa73f:     return binomial;
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /**
2:35fa73f:    * Efficiently returns the binomial coefficient, often also referred to as "n over k" or "n choose k". The binomial
1:b5c2879:    * coefficient is defined as <ul> <li><tt>k&lt;0</tt>: <tt>0</tt>. <li><tt>k==0 || k==n</tt>: <tt>1</tt>. <li><tt>k==1 || k==n-1</tt>:
1:35fa73f:    * <tt>n</tt>. <li>else: <tt>(n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k )</tt>. </ul>
1:35fa73f:    *
1:35fa73f:    * @return the binomial coefficient.
1:35fa73f:    */
1:35fa73f:   public static double binomial(long n, long k) {
1:35fa73f:     if (k < 0) {
1:35fa73f:       return 0;
1:35fa73f:     }
1:35fa73f:     if (k == 0 || k == n) {
1:35fa73f:       return 1;
1:35fa73f:     }
1:35fa73f:     if (k == 1 || k == n - 1) {
1:35fa73f:       return n;
1:35fa73f:     }
1:35fa73f: 
1:35fa73f:     // try quick version and see whether we get numeric overflows.
1:35fa73f:     // factorial(..) is O(1); requires no loop; only a table lookup.
1:35fa73f:     if (n > k) {
1:6d16230:       int max = LONG_FACTORIALS.length + DOUBLE_FACTORIALS.length;
1:35fa73f:       if (n < max) { // if (n! < inf && k! < inf)
1:35fa73f:         double n_fac = factorial((int) n);
1:35fa73f:         double k_fac = factorial((int) k);
1:35fa73f:         double n_minus_k_fac = factorial((int) (n - k));
1:35fa73f:         double nk = n_minus_k_fac * k_fac;
1:35fa73f:         if (nk != Double.POSITIVE_INFINITY) { // no numeric overflow?
1:35fa73f:           // now this is completely safe and accurate
1:35fa73f:           return n_fac / nk;
1:35fa73f:         }
1:35fa73f:       }
1:35fa73f:       if (k > n / 2) {
1:35fa73f:         k = n - k;
1:35fa73f:       } // quicker
1:35fa73f:     }
1:35fa73f: 
1:35fa73f:     // binomial(n,k) = (n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k )
1:35fa73f:     long a = n - k + 1;
1:35fa73f:     long b = 1;
1:35fa73f:     double binomial = 1;
1:35fa73f:     for (long i = k; i-- > 0;) {
1:8b6a26a:       binomial *= (double) a++ / (b++);
1:35fa73f:     }
1:35fa73f:     return binomial;
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /**
1:b5c2879:    * Returns the smallest <code>long &gt;= value</code>.
1:b5c2879:    * <dl><dt>Examples: {@code 1.0 -> 1, 1.2 -> 2, 1.9 -> 2}. This
1:b5c2879:    * method is safer than using (long) Math.ceil(value), because of possible rounding error.</dt></dl>
1:35fa73f:    */
1:35fa73f:   public static long ceil(double value) {
1:35fa73f:     return Math.round(Math.ceil(value));
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /**
1:35fa73f:    * Evaluates the series of Chebyshev polynomials Ti at argument x/2. The series is given by
1:35fa73f:    * <pre>
1:35fa73f:    *        N-1
1:35fa73f:    *         - '
1:b5c2879:    *  y  =   &gt;   coef[i] T (x/2)
1:35fa73f:    *         -            i
1:35fa73f:    *        i=0
1:35fa73f:    * </pre>
1:35fa73f:    * Coefficients are stored in reverse order, i.e. the zero order term is last in the array.  Note N is the number of
1:b5c2879:    * coefficients, not the order. <p> If coefficients are for the interval a to b, x must have been transformed to x -&lt;
1:35fa73f:    * 2(2x - b - a)/(b-a) before entering the routine.  This maps x from (a, b) to (-1, 1), over which the Chebyshev
1:35fa73f:    * polynomials are defined. <p> If the coefficients are for the inverted interval, in which (a, b) is mapped to (1/b,
1:b5c2879:    * 1/a), the transformation required is {@code x -> 2(2ab/x - b - a)/(b-a)}.  If b is infinity, this becomes {@code x -> 4a/x - 1}.
1:35fa73f:    * <p> SPEED: <p> Taking advantage of the recurrence properties of the Chebyshev polynomials, the routine requires one
1:35fa73f:    * more addition per loop than evaluating a nested polynomial of the same degree.
1:35fa73f:    *
1:35fa73f:    * @param x    argument to the polynomial.
1:35fa73f:    * @param coef the coefficients of the polynomial.
1:35fa73f:    * @param N    the number of coefficients.
1:35fa73f:    */
1:229aeff:   public static double chbevl(double x, double[] coef, int N) {
1:35fa73f: 
1:35fa73f:     int p = 0;
1:35fa73f: 
1:35fa73f:     double b0 = coef[p++];
1:35fa73f:     double b1 = 0.0;
1:35fa73f:     int i = N - 1;
1:35fa73f: 
1:35fa73f:     double b2;
1:35fa73f:     do {
1:35fa73f:       b2 = b1;
1:35fa73f:       b1 = b0;
1:35fa73f:       b0 = x * b1 - b2 + coef[p++];
1:35fa73f:     } while (--i > 0);
1:35fa73f: 
1:8b6a26a:     return 0.5 * (b0 - b2);
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /**
1:35fa73f:    * Instantly returns the factorial <tt>k!</tt>.
1:35fa73f:    *
1:35fa73f:    * @param k must hold <tt>k &gt;= 0</tt>.
1:35fa73f:    */
1:35fa73f:   private static double factorial(int k) {
1:35fa73f:     if (k < 0) {
1:35fa73f:       throw new IllegalArgumentException();
1:35fa73f:     }
1:35fa73f: 
1:6d16230:     int length1 = LONG_FACTORIALS.length;
1:35fa73f:     if (k < length1) {
1:6d16230:       return LONG_FACTORIALS[k];
1:35fa73f:     }
1:35fa73f: 
1:6d16230:     int length2 = DOUBLE_FACTORIALS.length;
1:35fa73f:     if (k < length1 + length2) {
1:6d16230:       return DOUBLE_FACTORIALS[k - length1];
1:35fa73f:     } else {
1:35fa73f:       return Double.POSITIVE_INFINITY;
1:35fa73f:     }
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /**
1:6d16230:    * Returns the largest <code>long &lt;= value</code>.
1:b5c2879:    * <dl><dt>Examples: {@code 1.0 -> 1, 1.2 -> 1, 1.9 -> 1 <dt> 2.0 -> 2, 2.2 -> 2, 2.9 -> 2}</dt></dl>
1:6d16230:    * This method is safer than using (long) Math.floor(value), because of possible rounding error.
1:35fa73f:    */
1:35fa73f:   public static long floor(double value) {
1:35fa73f:     return Math.round(Math.floor(value));
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /** Returns <tt>log<sub>base</sub>value</tt>. */
1:35fa73f:   public static double log(double base, double value) {
1:35fa73f:     return Math.log(value) / Math.log(base);
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /** Returns <tt>log<sub>10</sub>value</tt>. */
1:35fa73f:   public static double log10(double value) {
1:35fa73f:     // 1.0 / Math.log(10) == 0.43429448190325176
1:35fa73f:     return Math.log(value) * 0.43429448190325176;
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /** Returns <tt>log<sub>2</sub>value</tt>. */
1:35fa73f:   public static double log2(double value) {
1:35fa73f:     // 1.0 / Math.log(2) == 1.4426950408889634
1:35fa73f:     return Math.log(value) * 1.4426950408889634;
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /**
1:b5c2879:    * Returns <tt>log(k!)</tt>. Tries to avoid overflows. For <tt>k&lt;30</tt> simply looks up a table in O(1). For
1:b5c2879:    * <tt>k&gt;=30</tt> uses stirlings approximation.
1:35fa73f:    *
1:35fa73f:    * @param k must hold <tt>k &gt;= 0</tt>.
1:35fa73f:    */
1:35fa73f:   public static double logFactorial(int k) {
1:35fa73f:     if (k >= 30) {
1:35fa73f: 
1:4ca6b86:       double r = 1.0 / k;
1:35fa73f:       double rr = r * r;
1:35fa73f:       double C7 = -5.95238095238095238e-04;
1:35fa73f:       double C5 = 7.93650793650793651e-04;
1:35fa73f:       double C3 = -2.77777777777777778e-03;
1:35fa73f:       double C1 = 8.33333333333333333e-02;
1:35fa73f:       double C0 = 9.18938533204672742e-01;
1:35fa73f:       return (k + 0.5) * Math.log(k) - k + C0 + r * (C1 + rr * (C3 + rr * (C5 + rr * C7)));
1:35fa73f:     } else {
1:6d16230:       return LOG_FACTORIALS[k];
1:35fa73f:     }
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /**
1:35fa73f:    * Instantly returns the factorial <tt>k!</tt>.
1:35fa73f:    *
1:b5c2879:    * @param k must hold {@code k >= 0 && k < 21}
1:35fa73f:    */
1:229aeff:   public static long longFactorial(int k) {
1:35fa73f:     if (k < 0) {
1:35fa73f:       throw new IllegalArgumentException("Negative k");
1:35fa73f:     }
1:35fa73f: 
1:6d16230:     if (k < LONG_FACTORIALS.length) {
1:6d16230:       return LONG_FACTORIALS[k];
1:35fa73f:     }
1:35fa73f:     throw new IllegalArgumentException("Overflow");
1:35fa73f:   }
1:35fa73f: 
1:35fa73f:   /**
1:35fa73f:    * Returns the StirlingCorrection. <p> Correction term of the Stirling approximation for <tt>log(k!)</tt> (series in
1:b5c2879:    * 1/k, or table values for small k) with int parameter k. </p> <tt> log k! = (k + 1/2)log(k + 1) - (k + 1) +
1:b5c2879:    * (1/2)log(2Pi) + STIRLING_CORRECTION(k + 1) log k! = (k + 1/2)log(k)     -  k      + (1/2)log(2Pi) +
1:6d16230:    * STIRLING_CORRECTION(k) </tt>
1:35fa73f:    */
1:35fa73f:   public static double stirlingCorrection(int k) {
1:35fa73f: 
1:35fa73f:     if (k > 30) {
1:4ca6b86:       double r = 1.0 / k;
1:35fa73f:       double rr = r * r;
1:35fa73f:       double C7 = -5.95238095238095238e-04;     //  -1/1680
1:35fa73f:       double C5 = 7.93650793650793651e-04;     //  +1/1260
1:35fa73f:       double C3 = -2.77777777777777778e-03;     //  -1/360
1:35fa73f:       double C1 = 8.33333333333333333e-02;     //  +1/12
1:35fa73f:       return r * (C1 + rr * (C3 + rr * (C5 + rr * C7)));
1:35fa73f:     } else {
1:6d16230:       return STIRLING_CORRECTION[k];
1:35fa73f:     }
1:35fa73f:   }
1:35fa73f: 
1:35fa73f: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:b5c2879
/////////////////////////////////////////////////////////////////////////
1:    * Efficiently returns the binomial coefficient, often also referred to as 
1:    * "n over k" or "n choose k". The binomial coefficient is defined as 
1:    * <tt>(n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k )</tt>.
1:    * <ul> <li><tt>k&lt;0</tt>: <tt>0</tt>.</li>
1:    * <li><tt>k==0</tt>: <tt>1</tt>.</li>
1:    * <li><tt>k==1</tt>: <tt>n</tt>.</li>
1:    * <li>else: <tt>(n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k)</tt>.</li>
1:    * </ul>
1:      * @param n
1:      * @param k
/////////////////////////////////////////////////////////////////////////
1:    * coefficient is defined as <ul> <li><tt>k&lt;0</tt>: <tt>0</tt>. <li><tt>k==0 || k==n</tt>: <tt>1</tt>. <li><tt>k==1 || k==n-1</tt>:
/////////////////////////////////////////////////////////////////////////
1:    * Returns the smallest <code>long &gt;= value</code>.
1:    * <dl><dt>Examples: {@code 1.0 -> 1, 1.2 -> 2, 1.9 -> 2}. This
1:    * method is safer than using (long) Math.ceil(value), because of possible rounding error.</dt></dl>
/////////////////////////////////////////////////////////////////////////
1:    *  y  =   &gt;   coef[i] T (x/2)
1:    * coefficients, not the order. <p> If coefficients are for the interval a to b, x must have been transformed to x -&lt;
1:    * 1/a), the transformation required is {@code x -> 2(2ab/x - b - a)/(b-a)}.  If b is infinity, this becomes {@code x -> 4a/x - 1}.
/////////////////////////////////////////////////////////////////////////
1:    * <dl><dt>Examples: {@code 1.0 -> 1, 1.2 -> 1, 1.9 -> 1 <dt> 2.0 -> 2, 2.2 -> 2, 2.9 -> 2}</dt></dl>
/////////////////////////////////////////////////////////////////////////
1:    * Returns <tt>log(k!)</tt>. Tries to avoid overflows. For <tt>k&lt;30</tt> simply looks up a table in O(1). For
1:    * <tt>k&gt;=30</tt> uses stirlings approximation.
/////////////////////////////////////////////////////////////////////////
1:    * @param k must hold {@code k >= 0 && k < 21}
/////////////////////////////////////////////////////////////////////////
1:    * 1/k, or table values for small k) with int parameter k. </p> <tt> log k! = (k + 1/2)log(k + 1) - (k + 1) +
1:    * (1/2)log(2Pi) + STIRLING_CORRECTION(k + 1) log k! = (k + 1/2)log(k)     -  k      + (1/2)log(2Pi) +
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:       double r = 1.0 / k;
/////////////////////////////////////////////////////////////////////////
1:       double r = 1.0 / k;
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1:   Arithmetic() {
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: public final class Arithmetic extends Constants {
/////////////////////////////////////////////////////////////////////////
1:       binomial *= (double) a++ / (b++);
/////////////////////////////////////////////////////////////////////////
1:     return 0.5 * (b0 - b2);
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:     0.0,
1:     8.106146679532726e-02, 4.134069595540929e-02,
1:     2.767792568499834e-02, 2.079067210376509e-02,
1:     1.664469118982119e-02, 1.387612882307075e-02,
1:     1.189670994589177e-02, 1.041126526197209e-02,
1:     9.255462182712733e-03, 8.330563433362871e-03,
1:     7.573675487951841e-03, 6.942840107209530e-03,
1:     6.408994188004207e-03, 5.951370112758848e-03,
1:     5.554733551962801e-03, 5.207655919609640e-03,
1:     4.901395948434738e-03, 4.629153749334029e-03,
1:     4.385560249232324e-03, 4.166319691996922e-03,
1:     3.967954218640860e-03, 3.787618068444430e-03,
1:     3.622960224683090e-03, 3.472021382978770e-03,
1:     3.333155636728090e-03, 3.204970228055040e-03,
1:     3.086278682608780e-03, 2.976063983550410e-03,
1:     2.873449362352470e-03, 2.777674929752690e-03,
1:     0.00000000000000000, 0.00000000000000000, 0.69314718055994531,
1:     1.79175946922805500, 3.17805383034794562, 4.78749174278204599,
1:     6.57925121201010100, 8.52516136106541430, 10.60460290274525023,
1:     12.80182748008146961, 15.10441257307551530, 17.50230784587388584,
1:     19.98721449566188615, 22.55216385312342289, 25.19122118273868150,
1:     27.89927138384089157, 30.67186010608067280, 33.50507345013688888,
1:     36.39544520803305358, 39.33988418719949404, 42.33561646075348503,
1:     45.38013889847690803, 48.47118135183522388, 51.60667556776437357,
1:     54.78472939811231919, 58.00360522298051994, 61.26170176100200198,
1:     64.55753862700633106, 67.88974313718153498, 71.25703896716800901
1:     1L,
1:     1L,
1:     2L,
1:     6L,
1:     24L,
1:     120L,
1:     720L,
1:     5040L,
1:     40320L,
1:     362880L,
1:     3628800L,
1:     39916800L,
1:     479001600L,
1:     6227020800L,
1:     87178291200L,
1:     1307674368000L,
1:     20922789888000L,
1:     355687428096000L,
1:     6402373705728000L,
1:     121645100408832000L,
1:     2432902008176640000L
1:     5.109094217170944E19,
1:     1.1240007277776077E21,
1:     2.585201673888498E22,
1:     6.204484017332394E23,
1:     1.5511210043330984E25,
1:     4.032914611266057E26,
1:     1.0888869450418352E28,
1:     3.048883446117138E29,
1:     8.841761993739701E30,
1:     2.652528598121911E32,
1:     8.222838654177924E33,
1:     2.6313083693369355E35,
1:     8.68331761881189E36,
1:     2.952327990396041E38,
1:     1.0333147966386144E40,
1:     3.719933267899013E41,
1:     1.3763753091226346E43,
1:     5.23022617466601E44,
1:     2.0397882081197447E46,
1:     8.15915283247898E47,
1:     3.34525266131638E49,
1:     1.4050061177528801E51,
1:     6.041526306337384E52,
1:     2.6582715747884495E54,
1:     1.196222208654802E56,
1:     5.502622159812089E57,
1:     2.5862324151116827E59,
1:     1.2413915592536068E61,
1:     6.082818640342679E62,
1:     3.0414093201713376E64,
1:     1.5511187532873816E66,
1:     8.06581751709439E67,
1:     4.274883284060024E69,
1:     2.308436973392413E71,
1:     1.2696403353658264E73,
1:     7.109985878048632E74,
1:     4.052691950487723E76,
1:     2.350561331282879E78,
1:     1.386831185456898E80,
1:     8.32098711274139E81,
1:     5.075802138772246E83,
1:     3.146997326038794E85,
1:     1.9826083154044396E87,
1:     1.2688693218588414E89,
1:     8.247650592082472E90,
1:     5.443449390774432E92,
1:     3.6471110918188705E94,
1:     2.48003554243683E96,
1:     1.7112245242814127E98,
1:     1.1978571669969892E100,
1:     8.504785885678624E101,
1:     6.123445837688612E103,
1:     4.470115461512686E105,
1:     3.307885441519387E107,
1:     2.4809140811395404E109,
1:     1.8854947016660506E111,
1:     1.451830920282859E113,
1:     1.1324281178206295E115,
1:     8.94618213078298E116,
1:     7.15694570462638E118,
1:     5.797126020747369E120,
1:     4.7536433370128435E122,
1:     3.94552396972066E124,
1:     3.314240134565354E126,
1:     2.8171041143805494E128,
1:     2.4227095383672744E130,
1:     2.107757298379527E132,
1:     1.854826422573984E134,
1:     1.6507955160908465E136,
1:     1.4857159644817605E138,
1:     1.3520015276784033E140,
1:     1.2438414054641305E142,
1:     1.156772507081641E144,
1:     1.0873661566567426E146,
1:     1.0329978488239061E148,
1:     9.916779348709491E149,
1:     9.619275968248216E151,
1:     9.426890448883248E153,
1:     9.332621544394415E155,
1:     9.332621544394418E157,
1:     9.42594775983836E159,
1:     9.614466715035125E161,
1:     9.902900716486178E163,
1:     1.0299016745145631E166,
1:     1.0813967582402912E168,
1:     1.1462805637347086E170,
1:     1.2265202031961373E172,
1:     1.324641819451829E174,
1:     1.4438595832024942E176,
1:     1.5882455415227423E178,
1:     1.7629525510902457E180,
1:     1.974506857221075E182,
1:     2.2311927486598138E184,
1:     2.543559733472186E186,
1:     2.925093693493014E188,
1:     3.393108684451899E190,
1:     3.96993716080872E192,
1:     4.6845258497542896E194,
1:     5.574585761207606E196,
1:     6.689502913449135E198,
1:     8.094298525273444E200,
1:     9.875044200833601E202,
1:     1.2146304367025332E205,
1:     1.506141741511141E207,
1:     1.882677176888926E209,
1:     2.3721732428800483E211,
1:     3.0126600184576624E213,
1:     3.856204823625808E215,
1:     4.974504222477287E217,
1:     6.466855489220473E219,
1:     8.471580690878813E221,
1:     1.1182486511960037E224,
1:     1.4872707060906847E226,
1:     1.99294274616152E228,
1:     2.690472707318049E230,
1:     3.6590428819525483E232,
1:     5.0128887482749884E234,
1:     6.917786472619482E236,
1:     9.615723196941089E238,
1:     1.3462012475717523E241,
1:     1.8981437590761713E243,
1:     2.6953641378881633E245,
1:     3.8543707171800694E247,
1:     5.550293832739308E249,
1:     8.047926057471989E251,
1:     1.1749972043909107E254,
1:     1.72724589045464E256,
1:     2.5563239178728637E258,
1:     3.8089226376305687E260,
1:     5.7133839564458575E262,
1:     8.627209774233244E264,
1:     1.3113358856834527E267,
1:     2.0063439050956838E269,
1:     3.0897696138473515E271,
1:     4.789142901463393E273,
1:     7.471062926282892E275,
1:     1.1729568794264134E278,
1:     1.8532718694937346E280,
1:     2.946702272495036E282,
1:     4.714723635992061E284,
1:     7.590705053947223E286,
1:     1.2296942187394494E289,
1:     2.0044015765453032E291,
1:     3.287218585534299E293,
1:     5.423910666131583E295,
1:     9.003691705778434E297,
1:     1.5036165148649983E300,
1:     2.5260757449731988E302,
1:     4.2690680090047056E304,
1:     7.257415615308004E306
/////////////////////////////////////////////////////////////////////////
0:    * Returns the smallest <code>long &gt;= value</code>. <dt>Examples: {@code 1.0 -> 1, 1.2 -> 2, 1.9 -> 2}. This
/////////////////////////////////////////////////////////////////////////
1:   public static double chbevl(double x, double[] coef, int N) {
/////////////////////////////////////////////////////////////////////////
0:    * Returns the largest <code>long &lt;= value</code>. <dt>Examples: {@code 1.0 -> 1, 1.2 -> 1, 1.9 -> 1 <dt> 2.0 -> 2,}
/////////////////////////////////////////////////////////////////////////
1:   public static long longFactorial(int k) {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:   // for method STIRLING_CORRECTION(...)
1:   private static final double[] STIRLING_CORRECTION = {
/////////////////////////////////////////////////////////////////////////
1:   private static final double[] LOG_FACTORIALS = {
/////////////////////////////////////////////////////////////////////////
1:   private static final long[] LONG_FACTORIALS = {
/////////////////////////////////////////////////////////////////////////
1:   private static final double[] DOUBLE_FACTORIALS = {
/////////////////////////////////////////////////////////////////////////
1:       int max = LONG_FACTORIALS.length + DOUBLE_FACTORIALS.length;
/////////////////////////////////////////////////////////////////////////
1:     int length1 = LONG_FACTORIALS.length;
1:       return LONG_FACTORIALS[k];
1:     int length2 = DOUBLE_FACTORIALS.length;
1:       return DOUBLE_FACTORIALS[k - length1];
1:    * Returns the largest <code>long &lt;= value</code>.
0:    * <dt>Examples: {@code 1.0 -> 1, 1.2 -> 1, 1.9 -> 1 <dt> 2.0 -> 2,} 2.2 -> 2, 2.9 -> 2 </code><dt>
1:    * This method is safer than using (long) Math.floor(value), because of possible rounding error.
/////////////////////////////////////////////////////////////////////////
1:       return LOG_FACTORIALS[k];
/////////////////////////////////////////////////////////////////////////
1:     if (k < LONG_FACTORIALS.length) {
1:       return LONG_FACTORIALS[k];
/////////////////////////////////////////////////////////////////////////
0:    * (1/2)log(2Pi) + STIRLING_CORRECTION(k + 1) <p> log k! = (k + 1/2)log(k)     -  k      + (1/2)log(2Pi) +
1:    * STIRLING_CORRECTION(k) </tt>
/////////////////////////////////////////////////////////////////////////
1:       return STIRLING_CORRECTION[k];
author:Ted Dunning
-------------------------------------------------------------------------------
commit:35fa73f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements. See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership. The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License. You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied. See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: /*
1: Copyright 1999 CERN - European Organization for Nuclear Research.
1: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1: that both that copyright notice and this permission notice appear in supporting documentation. 
1: CERN makes no representations about the suitability of this software for any purpose. 
1: It is provided "as is" without expressed or implied warranty.
1: */
1: package org.apache.mahout.collections;
1: 
1: /**
1:  * Arithmetic functions.
1:  */
0: public class Arithmetic extends Constants {
0:   // for method stirlingCorrection(...)
0:   private static final double[] stirlingCorrection = {
0:       0.0,
0:       8.106146679532726e-02, 4.134069595540929e-02,
0:       2.767792568499834e-02, 2.079067210376509e-02,
0:       1.664469118982119e-02, 1.387612882307075e-02,
0:       1.189670994589177e-02, 1.041126526197209e-02,
0:       9.255462182712733e-03, 8.330563433362871e-03,
0:       7.573675487951841e-03, 6.942840107209530e-03,
0:       6.408994188004207e-03, 5.951370112758848e-03,
0:       5.554733551962801e-03, 5.207655919609640e-03,
0:       4.901395948434738e-03, 4.629153749334029e-03,
0:       4.385560249232324e-03, 4.166319691996922e-03,
0:       3.967954218640860e-03, 3.787618068444430e-03,
0:       3.622960224683090e-03, 3.472021382978770e-03,
0:       3.333155636728090e-03, 3.204970228055040e-03,
0:       3.086278682608780e-03, 2.976063983550410e-03,
0:       2.873449362352470e-03, 2.777674929752690e-03,
1:   };
1: 
1:   // for method logFactorial(...)
1:   // log(k!) for k = 0, ..., 29
0:   private static final double[] logFactorials = {
0:       0.00000000000000000, 0.00000000000000000, 0.69314718055994531,
0:       1.79175946922805500, 3.17805383034794562, 4.78749174278204599,
0:       6.57925121201010100, 8.52516136106541430, 10.60460290274525023,
0:       12.80182748008146961, 15.10441257307551530, 17.50230784587388584,
0:       19.98721449566188615, 22.55216385312342289, 25.19122118273868150,
0:       27.89927138384089157, 30.67186010608067280, 33.50507345013688888,
0:       36.39544520803305358, 39.33988418719949404, 42.33561646075348503,
0:       45.38013889847690803, 48.47118135183522388, 51.60667556776437357,
0:       54.78472939811231919, 58.00360522298051994, 61.26170176100200198,
0:       64.55753862700633106, 67.88974313718153498, 71.25703896716800901
1:   };
1: 
1:   // k! for k = 0, ..., 20
0:   private static final long[] longFactorials = {
0:       1L,
0:       1L,
0:       2L,
0:       6L,
0:       24L,
0:       120L,
0:       720L,
0:       5040L,
0:       40320L,
0:       362880L,
0:       3628800L,
0:       39916800L,
0:       479001600L,
0:       6227020800L,
0:       87178291200L,
0:       1307674368000L,
0:       20922789888000L,
0:       355687428096000L,
0:       6402373705728000L,
0:       121645100408832000L,
0:       2432902008176640000L
1:   };
1: 
1:   // k! for k = 21, ..., 170
0:   private static final double[] doubleFactorials = {
0:       5.109094217170944E19,
0:       1.1240007277776077E21,
0:       2.585201673888498E22,
0:       6.204484017332394E23,
0:       1.5511210043330984E25,
0:       4.032914611266057E26,
0:       1.0888869450418352E28,
0:       3.048883446117138E29,
0:       8.841761993739701E30,
0:       2.652528598121911E32,
0:       8.222838654177924E33,
0:       2.6313083693369355E35,
0:       8.68331761881189E36,
0:       2.952327990396041E38,
0:       1.0333147966386144E40,
0:       3.719933267899013E41,
0:       1.3763753091226346E43,
0:       5.23022617466601E44,
0:       2.0397882081197447E46,
0:       8.15915283247898E47,
0:       3.34525266131638E49,
0:       1.4050061177528801E51,
0:       6.041526306337384E52,
0:       2.6582715747884495E54,
0:       1.196222208654802E56,
0:       5.502622159812089E57,
0:       2.5862324151116827E59,
0:       1.2413915592536068E61,
0:       6.082818640342679E62,
0:       3.0414093201713376E64,
0:       1.5511187532873816E66,
0:       8.06581751709439E67,
0:       4.274883284060024E69,
0:       2.308436973392413E71,
0:       1.2696403353658264E73,
0:       7.109985878048632E74,
0:       4.052691950487723E76,
0:       2.350561331282879E78,
0:       1.386831185456898E80,
0:       8.32098711274139E81,
0:       5.075802138772246E83,
0:       3.146997326038794E85,
0:       1.9826083154044396E87,
0:       1.2688693218588414E89,
0:       8.247650592082472E90,
0:       5.443449390774432E92,
0:       3.6471110918188705E94,
0:       2.48003554243683E96,
0:       1.7112245242814127E98,
0:       1.1978571669969892E100,
0:       8.504785885678624E101,
0:       6.123445837688612E103,
0:       4.470115461512686E105,
0:       3.307885441519387E107,
0:       2.4809140811395404E109,
0:       1.8854947016660506E111,
0:       1.451830920282859E113,
0:       1.1324281178206295E115,
0:       8.94618213078298E116,
0:       7.15694570462638E118,
0:       5.797126020747369E120,
0:       4.7536433370128435E122,
0:       3.94552396972066E124,
0:       3.314240134565354E126,
0:       2.8171041143805494E128,
0:       2.4227095383672744E130,
0:       2.107757298379527E132,
0:       1.854826422573984E134,
0:       1.6507955160908465E136,
0:       1.4857159644817605E138,
0:       1.3520015276784033E140,
0:       1.2438414054641305E142,
0:       1.156772507081641E144,
0:       1.0873661566567426E146,
0:       1.0329978488239061E148,
0:       9.916779348709491E149,
0:       9.619275968248216E151,
0:       9.426890448883248E153,
0:       9.332621544394415E155,
0:       9.332621544394418E157,
0:       9.42594775983836E159,
0:       9.614466715035125E161,
0:       9.902900716486178E163,
0:       1.0299016745145631E166,
0:       1.0813967582402912E168,
0:       1.1462805637347086E170,
0:       1.2265202031961373E172,
0:       1.324641819451829E174,
0:       1.4438595832024942E176,
0:       1.5882455415227423E178,
0:       1.7629525510902457E180,
0:       1.974506857221075E182,
0:       2.2311927486598138E184,
0:       2.543559733472186E186,
0:       2.925093693493014E188,
0:       3.393108684451899E190,
0:       3.96993716080872E192,
0:       4.6845258497542896E194,
0:       5.574585761207606E196,
0:       6.689502913449135E198,
0:       8.094298525273444E200,
0:       9.875044200833601E202,
0:       1.2146304367025332E205,
0:       1.506141741511141E207,
0:       1.882677176888926E209,
0:       2.3721732428800483E211,
0:       3.0126600184576624E213,
0:       3.856204823625808E215,
0:       4.974504222477287E217,
0:       6.466855489220473E219,
0:       8.471580690878813E221,
0:       1.1182486511960037E224,
0:       1.4872707060906847E226,
0:       1.99294274616152E228,
0:       2.690472707318049E230,
0:       3.6590428819525483E232,
0:       5.0128887482749884E234,
0:       6.917786472619482E236,
0:       9.615723196941089E238,
0:       1.3462012475717523E241,
0:       1.8981437590761713E243,
0:       2.6953641378881633E245,
0:       3.8543707171800694E247,
0:       5.550293832739308E249,
0:       8.047926057471989E251,
0:       1.1749972043909107E254,
0:       1.72724589045464E256,
0:       2.5563239178728637E258,
0:       3.8089226376305687E260,
0:       5.7133839564458575E262,
0:       8.627209774233244E264,
0:       1.3113358856834527E267,
0:       2.0063439050956838E269,
0:       3.0897696138473515E271,
0:       4.789142901463393E273,
0:       7.471062926282892E275,
0:       1.1729568794264134E278,
0:       1.8532718694937346E280,
0:       2.946702272495036E282,
0:       4.714723635992061E284,
0:       7.590705053947223E286,
0:       1.2296942187394494E289,
0:       2.0044015765453032E291,
0:       3.287218585534299E293,
0:       5.423910666131583E295,
0:       9.003691705778434E297,
0:       1.5036165148649983E300,
0:       2.5260757449731988E302,
0:       4.2690680090047056E304,
0:       7.257415615308004E306
1:   };
1: 
1:   /** Makes this class non instantiable, but still let's others inherit from it. */
0:   protected Arithmetic() {
1:   }
1: 
1:   /**
1:    * Efficiently returns the binomial coefficient, often also referred to as "n over k" or "n choose k". The binomial
0:    * coefficient is defined as <tt>(n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k )</tt>. <ul> <li>k<0<tt>: <tt>0</tt>.
0:    * <li>k==0<tt>: <tt>1</tt>. <li>k==1<tt>: <tt>n</tt>. <li>else: <tt>(n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k
0:    * )</tt>. </ul>
1:    *
1:    * @return the binomial coefficient.
1:    */
1:   public static double binomial(double n, long k) {
1:     if (k < 0) {
1:       return 0;
1:     }
1:     if (k == 0) {
1:       return 1;
1:     }
1:     if (k == 1) {
1:       return n;
1:     }
1: 
1:     // binomial(n,k) = (n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k )
1:     double a = n - k + 1;
1:     double b = 1;
1:     double binomial = 1;
1:     for (long i = k; i-- > 0;) {
1:       binomial *= (a++) / (b++);
1:     }
1:     return binomial;
1:   }
1: 
1:   /**
1:    * Efficiently returns the binomial coefficient, often also referred to as "n over k" or "n choose k". The binomial
0:    * coefficient is defined as <ul> <li>k<0<tt>: <tt>0</tt>. <li>k==0 || k==n<tt>: <tt>1</tt>. <li>k==1 || k==n-1<tt>:
1:    * <tt>n</tt>. <li>else: <tt>(n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k )</tt>. </ul>
1:    *
1:    * @return the binomial coefficient.
1:    */
1:   public static double binomial(long n, long k) {
1:     if (k < 0) {
1:       return 0;
1:     }
1:     if (k == 0 || k == n) {
1:       return 1;
1:     }
1:     if (k == 1 || k == n - 1) {
1:       return n;
1:     }
1: 
1:     // try quick version and see whether we get numeric overflows.
1:     // factorial(..) is O(1); requires no loop; only a table lookup.
1:     if (n > k) {
0:       int max = longFactorials.length + doubleFactorials.length;
1:       if (n < max) { // if (n! < inf && k! < inf)
1:         double n_fac = factorial((int) n);
1:         double k_fac = factorial((int) k);
1:         double n_minus_k_fac = factorial((int) (n - k));
1:         double nk = n_minus_k_fac * k_fac;
1:         if (nk != Double.POSITIVE_INFINITY) { // no numeric overflow?
1:           // now this is completely safe and accurate
1:           return n_fac / nk;
1:         }
1:       }
1:       if (k > n / 2) {
1:         k = n - k;
1:       } // quicker
1:     }
1: 
1:     // binomial(n,k) = (n * n-1 * ... * n-k+1 ) / ( 1 * 2 * ... * k )
1:     long a = n - k + 1;
1:     long b = 1;
1:     double binomial = 1;
1:     for (long i = k; i-- > 0;) {
0:       binomial *= ((double) (a++)) / (b++);
1:     }
1:     return binomial;
1:   }
1: 
1:   /**
0:    * Returns the smallest <code>long &gt;= value</code>. <dt>Examples: <code>1.0 -> 1, 1.2 -> 2, 1.9 -> 2</code>. This
0:    * method is safer than using (long) Math.ceil(value), because of possible rounding error.
1:    */
1:   public static long ceil(double value) {
1:     return Math.round(Math.ceil(value));
1:   }
1: 
1:   /**
1:    * Evaluates the series of Chebyshev polynomials Ti at argument x/2. The series is given by
1:    * <pre>
1:    *        N-1
1:    *         - '
0:    *  y  =   >   coef[i] T (x/2)
1:    *         -            i
1:    *        i=0
1:    * </pre>
1:    * Coefficients are stored in reverse order, i.e. the zero order term is last in the array.  Note N is the number of
0:    * coefficients, not the order. <p> If coefficients are for the interval a to b, x must have been transformed to x ->
1:    * 2(2x - b - a)/(b-a) before entering the routine.  This maps x from (a, b) to (-1, 1), over which the Chebyshev
1:    * polynomials are defined. <p> If the coefficients are for the inverted interval, in which (a, b) is mapped to (1/b,
0:    * 1/a), the transformation required is x -> 2(2ab/x - b - a)/(b-a).  If b is infinity, this becomes x -> 4a/x - 1.
1:    * <p> SPEED: <p> Taking advantage of the recurrence properties of the Chebyshev polynomials, the routine requires one
1:    * more addition per loop than evaluating a nested polynomial of the same degree.
1:    *
1:    * @param x    argument to the polynomial.
1:    * @param coef the coefficients of the polynomial.
1:    * @param N    the number of coefficients.
1:    */
0:   public static double chbevl(double x, double[] coef, int N) throws ArithmeticException {
1: 
1:     int p = 0;
1: 
1:     double b0 = coef[p++];
1:     double b1 = 0.0;
1:     int i = N - 1;
1: 
1:     double b2;
1:     do {
1:       b2 = b1;
1:       b1 = b0;
1:       b0 = x * b1 - b2 + coef[p++];
1:     } while (--i > 0);
1: 
0:     return (0.5 * (b0 - b2));
1:   }
1: 
1:   /**
1:    * Instantly returns the factorial <tt>k!</tt>.
1:    *
1:    * @param k must hold <tt>k &gt;= 0</tt>.
1:    */
1:   private static double factorial(int k) {
1:     if (k < 0) {
1:       throw new IllegalArgumentException();
1:     }
1: 
0:     int length1 = longFactorials.length;
1:     if (k < length1) {
0:       return longFactorials[k];
1:     }
1: 
0:     int length2 = doubleFactorials.length;
1:     if (k < length1 + length2) {
0:       return doubleFactorials[k - length1];
1:     } else {
1:       return Double.POSITIVE_INFINITY;
1:     }
1:   }
1: 
1:   /**
0:    * Returns the largest <code>long &lt;= value</code>. <dt>Examples: <code> 1.0 -> 1, 1.2 -> 1, 1.9 -> 1 <dt> 2.0 -> 2,
0:    * 2.2 -> 2, 2.9 -> 2 </code><dt> This method is safer than using (long) Math.floor(value), because of possible
0:    * rounding error.
1:    */
1:   public static long floor(double value) {
1:     return Math.round(Math.floor(value));
1:   }
1: 
1:   /** Returns <tt>log<sub>base</sub>value</tt>. */
1:   public static double log(double base, double value) {
1:     return Math.log(value) / Math.log(base);
1:   }
1: 
1:   /** Returns <tt>log<sub>10</sub>value</tt>. */
1:   public static double log10(double value) {
1:     // 1.0 / Math.log(10) == 0.43429448190325176
1:     return Math.log(value) * 0.43429448190325176;
1:   }
1: 
1:   /** Returns <tt>log<sub>2</sub>value</tt>. */
1:   public static double log2(double value) {
1:     // 1.0 / Math.log(2) == 1.4426950408889634
1:     return Math.log(value) * 1.4426950408889634;
1:   }
1: 
1:   /**
0:    * Returns <tt>log(k!)</tt>. Tries to avoid overflows. For <tt>k<30</tt> simply looks up a table in O(1). For
0:    * <tt>k>=30</tt> uses stirlings approximation.
1:    *
1:    * @param k must hold <tt>k &gt;= 0</tt>.
1:    */
1:   public static double logFactorial(int k) {
1:     if (k >= 30) {
1: 
0:       double r = 1.0 / (double) k;
1:       double rr = r * r;
1:       double C7 = -5.95238095238095238e-04;
1:       double C5 = 7.93650793650793651e-04;
1:       double C3 = -2.77777777777777778e-03;
1:       double C1 = 8.33333333333333333e-02;
1:       double C0 = 9.18938533204672742e-01;
1:       return (k + 0.5) * Math.log(k) - k + C0 + r * (C1 + rr * (C3 + rr * (C5 + rr * C7)));
1:     } else {
0:       return logFactorials[k];
1:     }
1:   }
1: 
1:   /**
1:    * Instantly returns the factorial <tt>k!</tt>.
1:    *
0:    * @param k must hold <tt>k &gt;= 0 && k &lt; 21</tt>.
1:    */
0:   public static long longFactorial(int k) throws IllegalArgumentException {
1:     if (k < 0) {
1:       throw new IllegalArgumentException("Negative k");
1:     }
1: 
0:     if (k < longFactorials.length) {
0:       return longFactorials[k];
1:     }
1:     throw new IllegalArgumentException("Overflow");
1:   }
1: 
1:   /**
1:    * Returns the StirlingCorrection. <p> Correction term of the Stirling approximation for <tt>log(k!)</tt> (series in
0:    * 1/k, or table values for small k) with int parameter k. <p> <tt> log k! = (k + 1/2)log(k + 1) - (k + 1) +
0:    * (1/2)log(2Pi) + stirlingCorrection(k + 1) <p> log k! = (k + 1/2)log(k)     -  k      + (1/2)log(2Pi) +
0:    * stirlingCorrection(k) </tt>
1:    */
1:   public static double stirlingCorrection(int k) {
1: 
1:     if (k > 30) {
0:       double r = 1.0 / (double) k;
1:       double rr = r * r;
1:       double C7 = -5.95238095238095238e-04;     //  -1/1680
1:       double C5 = 7.93650793650793651e-04;     //  +1/1260
1:       double C3 = -2.77777777777777778e-03;     //  -1/360
1:       double C1 = 8.33333333333333333e-02;     //  +1/12
1:       return r * (C1 + rr * (C3 + rr * (C5 + rr * C7)));
1:     } else {
0:       return stirlingCorrection[k];
1:     }
1:   }
1: 
1: }
============================================================================