1:95f836b: /*
1:95f836b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:95f836b:  * contributor license agreements.  See the NOTICE file distributed with
1:95f836b:  * this work for additional information regarding copyright ownership.
1:95f836b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:95f836b:  * (the "License"); you may not use this file except in compliance with
1:95f836b:  * the License.  You may obtain a copy of the License at
1:95f836b:  *
1:95f836b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:95f836b:  *
1:95f836b:  * Unless required by applicable law or agreed to in writing, software
1:95f836b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:95f836b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:95f836b:  * See the License for the specific language governing permissions and
1:95f836b:  * limitations under the License.
1:95f836b:  */
2:95f836b: 
1:95f836b: package org.apache.mahout.math;
1:95f836b: 
1:95f836b: import java.nio.ByteBuffer;
1:95f836b: import java.util.concurrent.atomic.AtomicInteger;
1:95f836b: 
1:95f836b: /**
1:95f836b:  * Random matrix.  Each value is taken from {-1,0,1} with roughly equal probability.  Note
1:95f836b:  * that by default, the value is determined by a relatively simple hash of the coordinates.
1:95f836b:  * Such a hash is not usable where real randomness is required, but suffices nicely for
1:95f836b:  * random projection methods.
1:95f836b:  *
1:95f836b:  * If the simple hash method is not satisfactory, an optional high quality mode is available
1:95f836b:  * which uses a murmur hash of the coordinates.
1:95f836b:  */
1:95f836b: public class RandomTrinaryMatrix extends AbstractMatrix {
1:6d16230:   private static final AtomicInteger ID = new AtomicInteger();
1:95f836b:   private static final int PRIME1 = 104047;
1:95f836b:   private static final int PRIME2 = 101377;
1:95f836b:   private static final int PRIME3 = 64661;
1:95f836b:   private static final long SCALE = 1L << 32;
1:95f836b: 
1:1499411:   private final int seed;
1:1499411: 
1:95f836b:   // set this to true to use a high quality hash
1:95f836b:   private boolean highQuality = false;
1:95f836b: 
1:95f836b:   public RandomTrinaryMatrix(int seed, int rows, int columns, boolean highQuality) {
1:95f836b:     super(rows, columns);
1:95f836b: 
1:95f836b:     this.highQuality = highQuality;
1:95f836b:     this.seed = seed;
1:95f836b:   }
1:95f836b: 
1:95f836b:   public RandomTrinaryMatrix(int rows, int columns) {
1:6d16230:     this(ID.incrementAndGet(), rows, columns, false);
1:95f836b:   }
1:95f836b: 
1:95f836b:   @Override
1:95f836b:   public Matrix assignColumn(int column, Vector other) {
1:95f836b:     throw new UnsupportedOperationException("Can't assign to read-only matrix");
1:95f836b:   }
1:95f836b: 
1:95f836b:   @Override
1:95f836b:   public Matrix assignRow(int row, Vector other) {
1:95f836b:     throw new UnsupportedOperationException("Can't assign to read-only matrix");
1:95f836b:   }
1:95f836b: 
1:95f836b:   /**
1:95f836b:    * Return the value at the given indexes, without checking bounds
1:95f836b:    *
1:95f836b:    * @param row    an int row index
1:95f836b:    * @param column an int column index
1:95f836b:    * @return the double at the index
1:95f836b:    */
1:95f836b:   @Override
1:95f836b:   public double getQuick(int row, int column) {
1:95f836b:     if (highQuality) {
1:95f836b:       ByteBuffer buf = ByteBuffer.allocate(8);
1:95f836b:       buf.putInt(row);
1:95f836b:       buf.putInt(column);
1:95f836b:       buf.flip();
1:1499411:       return (MurmurHash.hash64A(buf, seed) & (SCALE - 1)) / (double) SCALE;
1:95f836b:     } else {
1:6d16230:       // this isn't a fantastic random number generator, but it is just fine for random projections
1:6d16230:       return ((((row * PRIME1) + column * PRIME2 + row * column * PRIME3) & 8) * 0.25) - 1;
1:95f836b:     }
1:95f836b:   }
1:95f836b: 
1:95f836b: 
1:95f836b:   /**
1:95f836b:    * Return an empty matrix of the same underlying class as the receiver
1:95f836b:    *
1:95f836b:    * @return a Matrix
1:95f836b:    */
1:95f836b:   @Override
1:95f836b:   public Matrix like() {
1:95f836b:     return new DenseMatrix(rowSize(), columnSize());
1:95f836b:   }
1:95f836b: 
1:95f836b:   /**
1:95f836b:    * Returns an empty matrix of the same underlying class as the receiver and of the specified
1:95f836b:    * size.
1:95f836b:    *
1:95f836b:    * @param rows    the int number of rows
1:95f836b:    * @param columns the int number of columns
1:95f836b:    */
1:95f836b:   @Override
1:95f836b:   public Matrix like(int rows, int columns) {
1:95f836b:     return new DenseMatrix(rows, columns);
1:95f836b:   }
1:95f836b: 
1:95f836b:   /**
1:95f836b:    * Set the value at the given index, without checking bounds
1:95f836b:    *
1:95f836b:    * @param row    an int row index into the receiver
1:95f836b:    * @param column an int column index into the receiver
1:95f836b:    * @param value  a double value to set
1:95f836b:    */
1:95f836b:   @Override
1:95f836b:   public void setQuick(int row, int column, double value) {
1:95f836b:     throw new UnsupportedOperationException("Can't assign to read-only matrix");
1:95f836b:   }
1:95f836b: 
1:95f836b:   /**
1:95f836b:    * Return the number of values in the recipient
1:95f836b:    *
1:95f836b:    * @return an int[2] containing [row, column] count
1:95f836b:    */
1:95f836b:   @Override
1:95f836b:   public int[] getNumNondefaultElements() {
1:95f836b:     throw new UnsupportedOperationException("Can't assign to read-only matrix");
1:95f836b:   }
1:95f836b: 
1:95f836b:   /**
1:95f836b:    * Return a new matrix containing the subset of the recipient
1:95f836b:    *
1:95f836b:    * @param offset an int[2] offset into the receiver
1:95f836b:    * @param size   the int[2] size of the desired result
1:95f836b:    * @return a new Matrix that is a view of the original
1:95f836b:    * @throws org.apache.mahout.math.CardinalityException
1:95f836b:    *          if the length is greater than the cardinality of the receiver
1:95f836b:    * @throws org.apache.mahout.math.IndexException
1:95f836b:    *          if the offset is negative or the offset+length is outside of the receiver
1:95f836b:    */
1:95f836b:   @Override
1:95f836b:   public Matrix viewPart(int[] offset, int[] size) {
1:95f836b:     return new MatrixView(this, offset, size);
1:95f836b:   }
1:95f836b: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:   private static final AtomicInteger ID = new AtomicInteger();
/////////////////////////////////////////////////////////////////////////
1:     this(ID.incrementAndGet(), rows, columns, false);
/////////////////////////////////////////////////////////////////////////
1:       // this isn't a fantastic random number generator, but it is just fine for random projections
1:       return ((((row * PRIME1) + column * PRIME2 + row * column * PRIME3) & 8) * 0.25) - 1;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1499411
/////////////////////////////////////////////////////////////////////////
0:   private static final AtomicInteger id = new AtomicInteger();
1:   private final int seed;
1: 
/////////////////////////////////////////////////////////////////////////
1:       return (MurmurHash.hash64A(buf, seed) & (SCALE - 1)) / (double) SCALE;
0:     return ((((row * PRIME1) + column * PRIME2 + row * column * PRIME3) & 8) * 0.25) - 1;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:95f836b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: /**
1:  * Random matrix.  Each value is taken from {-1,0,1} with roughly equal probability.  Note
1:  * that by default, the value is determined by a relatively simple hash of the coordinates.
1:  * Such a hash is not usable where real randomness is required, but suffices nicely for
1:  * random projection methods.
1:  *
1:  * If the simple hash method is not satisfactory, an optional high quality mode is available
1:  * which uses a murmur hash of the coordinates.
1:  */
1: public class RandomTrinaryMatrix extends AbstractMatrix {
0:   private static AtomicInteger id = new AtomicInteger();
1:   private static final int PRIME1 = 104047;
1:   private static final int PRIME2 = 101377;
1:   private static final int PRIME3 = 64661;
1: 
0:   private int seed;
1:   private static final long SCALE = 1L << 32;
1: 
1:   // set this to true to use a high quality hash
1:   private boolean highQuality = false;
1: 
1:   public RandomTrinaryMatrix(int seed, int rows, int columns, boolean highQuality) {
1:     super(rows, columns);
1: 
1:     this.highQuality = highQuality;
1:     this.seed = seed;
1:   }
1: 
1:   public RandomTrinaryMatrix(int rows, int columns) {
0:     this(id.incrementAndGet(), rows, columns, false);
1:   }
1: 
1:   @Override
1:   public Matrix assignColumn(int column, Vector other) {
1:     throw new UnsupportedOperationException("Can't assign to read-only matrix");
1:   }
1: 
1:   @Override
1:   public Matrix assignRow(int row, Vector other) {
1:     throw new UnsupportedOperationException("Can't assign to read-only matrix");
1:   }
1: 
1:   /**
1:    * Return the value at the given indexes, without checking bounds
1:    *
1:    * @param row    an int row index
1:    * @param column an int column index
1:    * @return the double at the index
1:    */
1:   @Override
1:   public double getQuick(int row, int column) {
1:     if (highQuality) {
1:       ByteBuffer buf = ByteBuffer.allocate(8);
1:       buf.putInt(row);
1:       buf.putInt(column);
1:       buf.flip();
0:       return (MurmurHash.hash64A(buf, seed) & (SCALE - 1)) / ((double) SCALE);
1:     } else {
0:     // this isn't a fantastic random number generator, but it is just fine for random projections
0:     return ((((row * PRIME1) + (column * PRIME2 + row * column * PRIME3)) & 8) * 0.25) - 1;
1:     }
1:   }
1: 
1: 
1:   /**
1:    * Return an empty matrix of the same underlying class as the receiver
1:    *
1:    * @return a Matrix
1:    */
1:   @Override
1:   public Matrix like() {
1:     return new DenseMatrix(rowSize(), columnSize());
1:   }
1: 
1:   /**
1:    * Returns an empty matrix of the same underlying class as the receiver and of the specified
1:    * size.
1:    *
1:    * @param rows    the int number of rows
1:    * @param columns the int number of columns
1:    */
1:   @Override
1:   public Matrix like(int rows, int columns) {
1:     return new DenseMatrix(rows, columns);
1:   }
1: 
1:   /**
1:    * Set the value at the given index, without checking bounds
1:    *
1:    * @param row    an int row index into the receiver
1:    * @param column an int column index into the receiver
1:    * @param value  a double value to set
1:    */
1:   @Override
1:   public void setQuick(int row, int column, double value) {
1:     throw new UnsupportedOperationException("Can't assign to read-only matrix");
1:   }
1: 
1:   /**
1:    * Return the number of values in the recipient
1:    *
1:    * @return an int[2] containing [row, column] count
1:    */
1:   @Override
1:   public int[] getNumNondefaultElements() {
1:     throw new UnsupportedOperationException("Can't assign to read-only matrix");
1:   }
1: 
1:   /**
1:    * Return a new matrix containing the subset of the recipient
1:    *
1:    * @param offset an int[2] offset into the receiver
1:    * @param size   the int[2] size of the desired result
1:    * @return a new Matrix that is a view of the original
1:    * @throws org.apache.mahout.math.CardinalityException
1:    *          if the length is greater than the cardinality of the receiver
1:    * @throws org.apache.mahout.math.IndexException
1:    *          if the offset is negative or the offset+length is outside of the receiver
1:    */
1:   @Override
1:   public Matrix viewPart(int[] offset, int[] size) {
1:     return new MatrixView(this, offset, size);
1:   }
1: }
============================================================================