1:3c71363: /**
1:3c71363:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3c71363:  * contributor license agreements.  See the NOTICE file distributed with
1:3c71363:  * this work for additional information regarding copyright ownership.
1:3c71363:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3c71363:  * (the "License"); you may not use this file except in compliance with
1:3c71363:  * the License.  You may obtain a copy of the License at
1:3c71363:  *
1:3c71363:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3c71363:  *
1:3c71363:  * Unless required by applicable law or agreed to in writing, software
1:3c71363:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c71363:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c71363:  * See the License for the specific language governing permissions and
1:3c71363:  * limitations under the License.
1:3c71363:  */
1:3c71363: 
1:3c71363: package org.apache.mahout.common.distance;
1:3c71363: 
1:3c71363: import java.util.Collection;
1:3c71363: import java.util.Collections;
1:3c71363: 
1:3c71363: import org.apache.hadoop.conf.Configuration;
1:3c71363: import org.apache.mahout.common.parameters.Parameter;
1:3c71363: import org.apache.mahout.math.CardinalityException;
1:3c71363: import org.apache.mahout.math.Vector;
1:a8d3dbd: import org.apache.mahout.math.function.Functions;
1:3c71363: 
1:3c71363: /**
1:3c71363:  * This class implements a "Chebyshev distance" metric by finding the maximum difference
1:3c71363:  * between each coordinate. Also 'chessboard distance' due to the moves a king can make.
1:3c71363:  */
1:3c71363: public class ChebyshevDistanceMeasure implements DistanceMeasure {
1:3c71363:   
1:3c71363:   @Override
1:3c71363:   public void configure(Configuration job) {
1:3c71363:     // nothing to do
3:3c71363:   }
1:3c71363:   
1:3c71363:   @Override
1:3c71363:   public Collection<Parameter<?>> getParameters() {
1:3c71363:     return Collections.emptyList();
1:3c71363:   }
1:3c71363:   
1:3c71363:   @Override
1:3c71363:   public void createParameters(String prefix, Configuration jobConf) {
1:3c71363:     // nothing to do
1:3c71363:   }
1:3c71363:   
1:3c71363:   @Override
1:3c71363:   public double distance(Vector v1, Vector v2) {
1:3c71363:     if (v1.size() != v2.size()) {
1:3c71363:       throw new CardinalityException(v1.size(), v2.size());
1:3c71363:     }
1:a8d3dbd:     return v1.aggregate(v2, Functions.MAX_ABS, Functions.MINUS);
1:3c71363:   }
1:3c71363:   
1:3c71363:   @Override
1:3c71363:   public double distance(double centroidLengthSquare, Vector centroid, Vector v) {
1:3c71363:     return distance(centroid, v); // TODO
1:3c71363:   }
1:3c71363:   
1:3c71363: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:dfilimon
-------------------------------------------------------------------------------
commit:a8d3dbd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1:     return v1.aggregate(v2, Functions.MAX_ABS, Functions.MINUS);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:3c71363
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.distance;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
0: import java.util.Iterator;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.mahout.common.parameters.Parameter;
1: import org.apache.mahout.math.CardinalityException;
1: import org.apache.mahout.math.Vector;
1: 
1: /**
1:  * This class implements a "Chebyshev distance" metric by finding the maximum difference
1:  * between each coordinate. Also 'chessboard distance' due to the moves a king can make.
1:  */
1: public class ChebyshevDistanceMeasure implements DistanceMeasure {
1:   
1:   @Override
1:   public void configure(Configuration job) {
1:     // nothing to do
1:   }
1:   
1:   @Override
1:   public Collection<Parameter<?>> getParameters() {
1:     return Collections.emptyList();
1:   }
1:   
1:   @Override
1:   public void createParameters(String prefix, Configuration jobConf) {
1:     // nothing to do
1:   }
1:   
1:   @Override
1:   public double distance(Vector v1, Vector v2) {
1:     if (v1.size() != v2.size()) {
1:       throw new CardinalityException(v1.size(), v2.size());
1:     }
0:     double result = 0.0;
0:     Vector vector = v1.minus(v2);
0:     Iterator<Vector.Element> iter = vector.iterateNonZero(); 
0:     while (iter.hasNext()) {
0:       Vector.Element e = iter.next();
0:       double d = Math.abs(e.get());
0:       if (d > result) {
0:         result = d;
1:       }
1:     }
0:     return result;
1:   }
1:   
1:   @Override
1:   public double distance(double centroidLengthSquare, Vector centroid, Vector v) {
1:     return distance(centroid, v); // TODO
1:   }
1:   
1: }
============================================================================