1:4fbfbc6: /*
1:faa82ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:faa82ce:  * contributor license agreements.  See the NOTICE file distributed with
1:faa82ce:  * this work for additional information regarding copyright ownership.
1:faa82ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:faa82ce:  * (the "License"); you may not use this file except in compliance with
1:faa82ce:  * the License.  You may obtain a copy of the License at
2:faa82ce:  *
1:faa82ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:faa82ce:  *
1:faa82ce:  * Unless required by applicable law or agreed to in writing, software
1:faa82ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:faa82ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:faa82ce:  * See the License for the specific language governing permissions and
1:faa82ce:  * limitations under the License.
1:faa82ce:  */
1:faa82ce: package org.apache.mahout.vectorizer;
1:faa82ce: 
1:faa82ce: import org.apache.hadoop.conf.Configuration;
1:faa82ce: import org.apache.hadoop.io.Text;
1:faa82ce: import org.apache.hadoop.mapreduce.Mapper;
1:faa82ce: import org.apache.lucene.analysis.Analyzer;
1:faa82ce: import org.apache.lucene.analysis.standard.StandardAnalyzer;
1:faa82ce: import org.apache.mahout.common.ClassUtils;
1:6a4942c: import org.apache.mahout.common.lucene.AnalyzerUtils;
1:faa82ce: import org.apache.mahout.math.NamedVector;
1:faa82ce: import org.apache.mahout.math.RandomAccessSparseVector;
1:faa82ce: import org.apache.mahout.math.SequentialAccessSparseVector;
1:faa82ce: import org.apache.mahout.math.Vector;
1:faa82ce: import org.apache.mahout.math.VectorWritable;
1:faa82ce: import org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;
1:faa82ce: import org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder;
1:faa82ce: 
1:faa82ce: import java.io.IOException;
1:faa82ce: 
2:faa82ce: /**
1:faa82ce:  * The Mapper that does the work of encoding text
1:4fbfbc6:  */
1:faa82ce: public class EncodingMapper extends Mapper<Text, Text, Text, VectorWritable> {
1:faa82ce: 
1:faa82ce:   public static final String USE_NAMED_VECTORS = "namedVectors";
1:faa82ce:   public static final String USE_SEQUENTIAL = "sequential";
1:faa82ce:   public static final String ANALYZER_NAME = "analyzer";
1:faa82ce:   public static final String ENCODER_FIELD_NAME = "encoderFieldName";
1:faa82ce:   public static final String ENCODER_CLASS = "encoderClass";
1:faa82ce:   public static final String CARDINALITY = "cardinality";
1:fc6c6f3:   private boolean sequentialVectors;
1:4fbfbc6:   private boolean namedVectors;
1:4fbfbc6:   private FeatureVectorEncoder encoder;
1:4fbfbc6:   private int cardinality;
1:faa82ce: 
1:faa82ce:   @Override
1:faa82ce:   protected void setup(Context context) throws IOException, InterruptedException {
1:faa82ce:     Configuration conf = context.getConfiguration();
1:fc6c6f3:     sequentialVectors = conf.getBoolean(USE_SEQUENTIAL, false);
1:faa82ce:     namedVectors = conf.getBoolean(USE_NAMED_VECTORS, false);
1:faa82ce:     String analyzerName = conf.get(ANALYZER_NAME, StandardAnalyzer.class.getName());
1:fc6c6f3:     Analyzer analyzer;
1:6a4942c:     try {
1:6a4942c:       analyzer = AnalyzerUtils.createAnalyzer(analyzerName);
1:6a4942c:     } catch (ClassNotFoundException e) {
1:6a4942c:       //TODO: hmmm, don't like this approach
1:6a4942c:       throw new IOException("Unable to create Analyzer for name: " + analyzerName, e);
1:6a4942c:     }
1:6a4942c: 
1:faa82ce:     String encoderName = conf.get(ENCODER_FIELD_NAME, "text");
1:faa82ce:     cardinality = conf.getInt(CARDINALITY, 5000);
1:faa82ce:     String encClass = conf.get(ENCODER_CLASS);
1:4fbfbc6:     encoder = ClassUtils.instantiateAs(encClass,
1:6a4942c:             FeatureVectorEncoder.class,
1:6a4942c:             new Class[]{String.class},
1:6a4942c:             new Object[]{encoderName});
1:e64dd36:     if (encoder instanceof LuceneTextValueEncoder) {
1:faa82ce:       ((LuceneTextValueEncoder) encoder).setAnalyzer(analyzer);
1:faa82ce:     }
1:faa82ce:   }
1:faa82ce: 
1:faa82ce:   @Override
1:faa82ce:   protected void map(Text key, Text value, Context context) throws IOException, InterruptedException {
1:4fbfbc6:     Vector vector;
1:fc6c6f3:     if (sequentialVectors) {
1:faa82ce:       vector = new SequentialAccessSparseVector(cardinality);
1:faa82ce:     } else {
1:faa82ce:       vector = new RandomAccessSparseVector(cardinality);
1:faa82ce:     }
1:e64dd36:     if (namedVectors) {
1:faa82ce:       vector = new NamedVector(vector, key.toString());
1:faa82ce:     }
1:faa82ce:     encoder.addToVector(value.toString(), vector);
1:faa82ce:     context.write(new Text(key.toString()), new VectorWritable(vector));
1:faa82ce:   }
1:faa82ce: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:fc6c6f3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private boolean sequentialVectors;
/////////////////////////////////////////////////////////////////////////
1:     sequentialVectors = conf.getBoolean(USE_SEQUENTIAL, false);
1:     Analyzer analyzer;
/////////////////////////////////////////////////////////////////////////
1:     if (sequentialVectors) {
commit:6a4942c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.lucene.util.Version;
1: import org.apache.mahout.common.lucene.AnalyzerUtils;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     Analyzer analyzer = null;
1:     try {
1:       analyzer = AnalyzerUtils.createAnalyzer(analyzerName);
1:     } catch (ClassNotFoundException e) {
1:       //TODO: hmmm, don't like this approach
1:       throw new IOException("Unable to create Analyzer for name: " + analyzerName, e);
1:     }
1: 
1:             FeatureVectorEncoder.class,
1:             new Class[]{String.class},
1:             new Object[]{encoderName});
commit:faa82ce
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.vectorizer;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.lucene.analysis.Analyzer;
1: import org.apache.lucene.analysis.standard.StandardAnalyzer;
1: import org.apache.mahout.common.ClassUtils;
1: import org.apache.mahout.math.NamedVector;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;
1: import org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder;
1: 
1: import java.io.IOException;
1: 
1: /**
1: * The Mapper that does the work of encoding text
1: *
0: **/
1: public class EncodingMapper extends Mapper<Text, Text, Text, VectorWritable> {
1:   public static final String USE_NAMED_VECTORS = "namedVectors";
1:   public static final String USE_SEQUENTIAL = "sequential";
1:   public static final String ANALYZER_NAME = "analyzer";
1:   public static final String ENCODER_FIELD_NAME = "encoderFieldName";
1:   public static final String ENCODER_CLASS = "encoderClass";
1:   public static final String CARDINALITY = "cardinality";
0:   boolean sequentialVecs, namedVectors;
0:   FeatureVectorEncoder encoder;
0:   int cardinality;
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     Configuration conf = context.getConfiguration();
0:     sequentialVecs = conf.getBoolean(USE_SEQUENTIAL, false);
1:     namedVectors = conf.getBoolean(USE_NAMED_VECTORS, false);
1:     String analyzerName = conf.get(ANALYZER_NAME, StandardAnalyzer.class.getName());
0:     Analyzer analyzer = ClassUtils.instantiateAs(analyzerName, Analyzer.class);
1:     String encoderName = conf.get(ENCODER_FIELD_NAME, "text");
1:     cardinality = conf.getInt(CARDINALITY, 5000);
1:     String encClass = conf.get(ENCODER_CLASS);
0:     encoder = ClassUtils.instantiateAs(encClass, FeatureVectorEncoder.class, new Class[]{String.class}, new Object[]{encoderName});
0:     if (encoder instanceof LuceneTextValueEncoder){
1:       ((LuceneTextValueEncoder) encoder).setAnalyzer(analyzer);
1:     }
1:   }
1: 
1:   @Override
1:   protected void map(Text key, Text value, Context context) throws IOException, InterruptedException {
0:     Vector vector = null;
0:     if (sequentialVecs) {
1:       vector = new SequentialAccessSparseVector(cardinality);
1:     } else {
1:       vector = new RandomAccessSparseVector(cardinality);
1:     }
0:     if (namedVectors){
1:       vector = new NamedVector(vector, key.toString());
1:     }
1:     encoder.addToVector(value.toString(), vector);
1:     context.write(new Text(key.toString()), new VectorWritable(vector));
1:   }
1: }
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     if (encoder instanceof LuceneTextValueEncoder) {
/////////////////////////////////////////////////////////////////////////
1:     if (namedVectors) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.vectorizer;
/////////////////////////////////////////////////////////////////////////
0:  * The Mapper that does the work of encoding text
1:  */
0: 
0: 
0:   private boolean sequentialVecs;
1:   private boolean namedVectors;
1:   private FeatureVectorEncoder encoder;
1:   private int cardinality;
/////////////////////////////////////////////////////////////////////////
1:     encoder = ClassUtils.instantiateAs(encClass,
0:                                        FeatureVectorEncoder.class,
0:                                        new Class[]{String.class},
0:                                        new Object[]{encoderName});
/////////////////////////////////////////////////////////////////////////
1:     Vector vector;
============================================================================