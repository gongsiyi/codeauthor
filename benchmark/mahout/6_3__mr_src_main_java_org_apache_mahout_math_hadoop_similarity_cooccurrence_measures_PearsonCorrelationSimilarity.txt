1:845cbcd: /**
1:845cbcd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:845cbcd:  * contributor license agreements.  See the NOTICE file distributed with
1:845cbcd:  * this work for additional information regarding copyright ownership.
1:845cbcd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:845cbcd:  * (the "License"); you may not use this file except in compliance with
1:845cbcd:  * the License.  You may obtain a copy of the License at
1:845cbcd:  *
1:845cbcd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:845cbcd:  *
1:845cbcd:  * Unless required by applicable law or agreed to in writing, software
1:845cbcd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:845cbcd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:845cbcd:  * See the License for the specific language governing permissions and
1:845cbcd:  * limitations under the License.
1:845cbcd:  */
3:845cbcd: 
1:845cbcd: package org.apache.mahout.math.hadoop.similarity.cooccurrence.measures;
1:845cbcd: 
1:be94533: import org.apache.mahout.math.Vector;
1:be94533: 
1:845cbcd: public class PearsonCorrelationSimilarity extends CosineSimilarity {
1:845cbcd: 
1:845cbcd:   @Override
1:845cbcd:   public Vector normalize(Vector vector) {
1:845cbcd:     if (vector.getNumNondefaultElements() == 0) {
1:845cbcd:       return vector;
1:845cbcd:     }
1:be94533: 
1:845cbcd:     // center non-zero elements
1:be94533:     double average = vector.norm(1) / vector.getNumNonZeroElements();
1:dc62944:     for (Vector.Element e : vector.nonZeroes()) {
1:be94533:       e.set(e.get() - average);
1:845cbcd:     }
1:845cbcd:     return super.normalize(vector);
1:845cbcd:   }
1:845cbcd: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     for (Vector.Element e : vector.nonZeroes()) {
author:Robin Anil
-------------------------------------------------------------------------------
commit:be94533
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.Vector;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     double average = vector.norm(1) / vector.getNumNonZeroElements();
0:     Iterator<Vector.Element> it = vector.iterateNonZero();
0:     while (it.hasNext()) {
0:       Vector.Element e = it.next();
1:       e.set(e.get() - average);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1499411
/////////////////////////////////////////////////////////////////////////
0:     double average = vector.norm(1) / vector.getNumNondefaultElements();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:845cbcd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.similarity.cooccurrence.measures;
1: 
0: import org.apache.mahout.math.Vector;
1: 
0: import java.util.Iterator;
1: 
1: public class PearsonCorrelationSimilarity extends CosineSimilarity {
1: 
1:   @Override
1:   public Vector normalize(Vector vector) {
1:     if (vector.getNumNondefaultElements() == 0) {
1:       return vector;
1:     }
1:     // center non-zero elements
0:     final double average = vector.norm(1) / vector.getNumNondefaultElements();
0:     Iterator<Vector.Element> nonZeroElements = vector.iterateNonZero();
0:     while (nonZeroElements.hasNext()) {
0:       Vector.Element nonZeroElement = nonZeroElements.next();
0:       vector.setQuick(nonZeroElement.index(), nonZeroElement.get() - average);
1:     }
1:     return super.normalize(vector);
1:   }
1: }
============================================================================