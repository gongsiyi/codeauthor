1:c898d27: /*
1:c898d27:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c898d27:  * contributor license agreements.  See the NOTICE file distributed with
1:c898d27:  * this work for additional information regarding copyright ownership.
1:c898d27:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c898d27:  * (the "License"); you may not use this file except in compliance with
1:c898d27:  * the License.  You may obtain a copy of the License at
1:c898d27:  *
1:c898d27:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c898d27:  *
1:c898d27:  * Unless required by applicable law or agreed to in writing, software
1:c898d27:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c898d27:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c898d27:  * See the License for the specific language governing permissions and
1:c898d27:  * limitations under the License.
1:c898d27:  */
1:c898d27: 
1:c898d27: package org.apache.mahout.math.ssvd;
1:c898d27: 
1:c898d27: import org.apache.mahout.math.DenseVector;
1:c898d27: import org.apache.mahout.math.DiagonalMatrix;
1:c898d27: import org.apache.mahout.math.MahoutTestCase;
1:c898d27: import org.apache.mahout.math.Matrix;
1:c898d27: import org.apache.mahout.math.RandomTrinaryMatrix;
1:c898d27: import org.apache.mahout.math.SingularValueDecomposition;
1:c898d27: import org.apache.mahout.math.Vector;
1:c898d27: import org.apache.mahout.math.function.Functions;
1:c898d27: import org.junit.Test;
1:c898d27: 
1:051cbcf: public final class SequentialBigSvdTest extends MahoutTestCase {
1:051cbcf: 
1:c898d27:   @Test
1:c898d27:   public void testSingularValues() {
1:c898d27:     Matrix A = lowRankMatrix();
1:c898d27: 
1:c898d27:     SequentialBigSvd s = new SequentialBigSvd(A, 8);
1:c898d27:     SingularValueDecomposition svd = new SingularValueDecomposition(A);
1:c898d27: 
1:c898d27:     Vector reference = new DenseVector(svd.getSingularValues()).viewPart(0, 8);
1:c898d27:     assertEquals(reference, s.getSingularValues());
1:c898d27: 
1:c898d27:     assertEquals(A, s.getU().times(new DiagonalMatrix(s.getSingularValues())).times(s.getV().transpose()));
1:c898d27:   }
1:c898d27: 
1:c898d27:   @Test
1:c898d27:   public void testLeftVectors() {
1:c898d27:     Matrix A = lowRankMatrix();
1:c898d27: 
1:f5cce9b:     SequentialBigSvd s = new SequentialBigSvd(A, 8);
1:c898d27:     SingularValueDecomposition svd = new SingularValueDecomposition(A);
1:c898d27: 
1:f5cce9b:     // can only check first few singular vectors because once the singular values
1:f5cce9b:     // go to zero, the singular vectors are not uniquely determined
1:f5cce9b:     Matrix u1 = svd.getU().viewPart(0, 20, 0, 4).assign(Functions.ABS);
1:f5cce9b:     Matrix u2 = s.getU().viewPart(0, 20, 0, 4).assign(Functions.ABS);
1:051cbcf:     assertEquals(0, u1.minus(u2).aggregate(Functions.PLUS, Functions.ABS), 1.0e-9);
1:c898d27:   }
1:c898d27: 
1:051cbcf:   private static void assertEquals(Matrix u1, Matrix u2) {
1:051cbcf:     assertEquals(0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1.0e-10);
1:c898d27:   }
1:c898d27: 
1:051cbcf:   private static void assertEquals(Vector u1, Vector u2) {
1:051cbcf:     assertEquals(0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1.0e-10);
1:c898d27:   }
1:c898d27: 
1:c898d27:   @Test
1:c898d27:   public void testRightVectors() {
1:c898d27:     Matrix A = lowRankMatrix();
1:c898d27: 
2:c898d27:     SequentialBigSvd s = new SequentialBigSvd(A, 6);
1:c898d27:     SingularValueDecomposition svd = new SingularValueDecomposition(A);
1:c898d27: 
1:c898d27:     Matrix v1 = svd.getV().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:c898d27:     Matrix v2 = s.getV().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:c898d27:     assertEquals(v1, v2);
1:c898d27:   }
1:c898d27: 
1:051cbcf:   private static Matrix lowRankMatrix() {
1:c898d27:     Matrix u = new RandomTrinaryMatrix(1, 20, 4, false);
1:f5cce9b:     Matrix d = new DiagonalMatrix(new double[]{5, 3, 1, 0.5});
1:f5cce9b:     Matrix v = new RandomTrinaryMatrix(2, 23, 4, false);
1:c898d27: 
1:c898d27:     return u.times(d).times(v.transpose());
1:c898d27:   }
1:c898d27: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public final class SequentialBigSvdTest extends MahoutTestCase {
1: 
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, u1.minus(u2).aggregate(Functions.PLUS, Functions.ABS), 1.0e-9);
1:   private static void assertEquals(Matrix u1, Matrix u2) {
1:     assertEquals(0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1.0e-10);
1:   private static void assertEquals(Vector u1, Vector u2) {
1:     assertEquals(0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1.0e-10);
/////////////////////////////////////////////////////////////////////////
1:   private static Matrix lowRankMatrix() {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:f5cce9b
/////////////////////////////////////////////////////////////////////////
1:     SequentialBigSvd s = new SequentialBigSvd(A, 8);
1:     // can only check first few singular vectors because once the singular values
1:     // go to zero, the singular vectors are not uniquely determined
1:     Matrix u1 = svd.getU().viewPart(0, 20, 0, 4).assign(Functions.ABS);
1:     Matrix u2 = s.getU().viewPart(0, 20, 0, 4).assign(Functions.ABS);
0:     assertEquals(0, u1.minus(u2).aggregate(Functions.PLUS, Functions.ABS), 1e-9);
/////////////////////////////////////////////////////////////////////////
1:     Matrix d = new DiagonalMatrix(new double[]{5, 3, 1, 0.5});
1:     Matrix v = new RandomTrinaryMatrix(2, 23, 4, false);
commit:c898d27
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.ssvd;
1: 
0: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.DiagonalMatrix;
1: import org.apache.mahout.math.MahoutTestCase;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.RandomTrinaryMatrix;
1: import org.apache.mahout.math.SingularValueDecomposition;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.Functions;
1: import org.junit.Test;
1: 
0: public class SequentialBigSvdTest extends MahoutTestCase {
1:   @Test
1:   public void testSingularValues() {
1:     Matrix A = lowRankMatrix();
1: 
1:     SequentialBigSvd s = new SequentialBigSvd(A, 8);
1:     SingularValueDecomposition svd = new SingularValueDecomposition(A);
1: 
1:     Vector reference = new DenseVector(svd.getSingularValues()).viewPart(0, 8);
1:     assertEquals(reference, s.getSingularValues());
1: 
1:     assertEquals(A, s.getU().times(new DiagonalMatrix(s.getSingularValues())).times(s.getV().transpose()));
1:   }
1: 
1:   @Test
1:   public void testLeftVectors() {
1:     Matrix A = lowRankMatrix();
1: 
1:     SequentialBigSvd s = new SequentialBigSvd(A, 6);
1:     SingularValueDecomposition svd = new SingularValueDecomposition(A);
1: 
0:     // can only check first few singular vectors
0:     Matrix u1 = svd.getU().viewPart(0, 20, 0, 3).assign(Functions.ABS);
0:     Matrix u2 = s.getU().viewPart(0, 20, 0, 3).assign(Functions.ABS);
0:     assertEquals(u1, u2);
1:   }
1: 
0:   private void assertEquals(Matrix u1, Matrix u2) {
0:     assertEquals(0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1e-10);
1:   }
1: 
0:   private void assertEquals(Vector u1, Vector u2) {
0:     assertEquals(0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1e-10);
1:   }
1: 
1:   @Test
1:   public void testRightVectors() {
1:     Matrix A = lowRankMatrix();
1: 
1:     SequentialBigSvd s = new SequentialBigSvd(A, 6);
1:     SingularValueDecomposition svd = new SingularValueDecomposition(A);
1: 
1:     Matrix v1 = svd.getV().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:     Matrix v2 = s.getV().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:     assertEquals(v1, v2);
1:   }
1: 
0:   private Matrix lowRankMatrix() {
1:     Matrix u = new RandomTrinaryMatrix(1, 20, 4, false);
0:     Matrix d = new DenseMatrix(4, 4);
0:     d.set(0, 0, 5);
0:     d.set(1, 1, 3);
0:     d.set(2, 2, 1);
0:     d.set(3, 3, 0);
0:     Matrix v = new RandomTrinaryMatrix(2, 20, 4, false);
1: 
1:     return u.times(d).times(v.transpose());
1:   }
1: }
============================================================================