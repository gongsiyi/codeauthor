1:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
2:f870a63:  */
2:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings.ops;
1:f870a63: 
1:f870a63: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:f870a63: 
1:f870a63: import water.MRTask;
1:f870a63: import water.fvec.Frame;
1:f870a63: import water.fvec.Vec;
1:f870a63: import water.fvec.Chunk;
1:f870a63: import water.fvec.NewChunk;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * Element-wise DRM-DRM operations
1:2d1b0bf:  */
1:f870a63: public class AewB {
1:2d1b0bf:   /**
1:2d1b0bf:    * Perform element-wise operation on two DRMs to create a new DRM.
1:2d1b0bf:    *
1:2d1b0bf:    * @param drmA DRM representing matrix A.
1:2d1b0bf:    * @param drmB DRM representing matrix B.
1:2d1b0bf:    * @param op Element-wise operator encoded as a String.
1:2d1b0bf:    * @return new DRM containing A (element-wise) B.
1:2d1b0bf:    */
1:03a5bb6:   public static H2ODrm exec(H2ODrm drmA, H2ODrm drmB, final String op) {
1:f870a63:     final Frame A = drmA.frame;
1:f870a63:     final Frame B = drmB.frame;
1:f870a63:     Vec keys = drmA.keys;
1:f870a63:     int AewB_cols = A.numCols();
1:f870a63: 
1:2d1b0bf:     // AewB is written into ncs[] with an MRTask on A, and therefore will
1:2d1b0bf:     // be similarly partitioned as A.
1:2d1b0bf:     //
1:2d1b0bf:     // B may or may not be similarly partitioned as A, but must have the
1:2d1b0bf:     // same dimensions of A.
1:f870a63:     Frame AewB = new MRTask() {
1:f870a63:         private double opfn(String op, double a, double b) {
1:f870a63:           if (a == 0.0 && b == 0.0) {
1:f870a63:             return 0.0;
1:f870a63:           }
1:f870a63:           if (op.equals("+")) {
1:f870a63:             return a + b;
1:f870a63:           } else if (op.equals("-")) {
1:f870a63:             return a - b;
1:f870a63:           } else if (op.equals("*")) {
1:f870a63:             return a * b;
1:f870a63:           } else if (op.equals("/")) {
1:f870a63:             return a / b;
1:f870a63:           }
1:f870a63:           return 0.0;
1:f870a63:         }
1:2d1b0bf:         @Override
1:f870a63:         public void map(Chunk chks[], NewChunk ncs[]) {
1:2d1b0bf:           int chunkSize = chks[0].len();
1:f870a63:           Vec B_vecs[] = B.vecs();
1:f870a63:           long start = chks[0].start();
1:f870a63: 
1:f870a63:           for (int c = 0; c < chks.length; c++) {
1:2d1b0bf:             for (int r = 0; r < chunkSize; r++) {
1:f5f54a1:               ncs[c].addNum(opfn(op, chks[c].atd(r), B_vecs[c].at(start + r)));
1:f870a63:             }
1:f870a63:           }
1:f870a63:         }
1:f870a63:       }.doAll(AewB_cols, A).outputFrame(null, null);
1:f870a63: 
1:2d1b0bf:     // Carry forward labels of A blindly into ABt
1:f870a63:     return new H2ODrm(AewB, keys);
1:f870a63:   }
1:f870a63: }
============================================================================
author:Stevo Slavic
-------------------------------------------------------------------------------
commit:f5f54a1
/////////////////////////////////////////////////////////////////////////
1:               ncs[c].addNum(opfn(op, chks[c].atd(r), B_vecs[c].at(start + r)));
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Element-wise DRM-DRM operations
1:  */
1:   /**
1:    * Perform element-wise operation on two DRMs to create a new DRM.
1:    *
1:    * @param drmA DRM representing matrix A.
1:    * @param drmB DRM representing matrix B.
1:    * @param op Element-wise operator encoded as a String.
1:    * @return new DRM containing A (element-wise) B.
1:    */
1:     // AewB is written into ncs[] with an MRTask on A, and therefore will
1:     // be similarly partitioned as A.
1:     //
1:     // B may or may not be similarly partitioned as A, but must have the
1:     // same dimensions of A.
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:           int chunkSize = chks[0].len();
1:             for (int r = 0; r < chunkSize; r++) {
1:     // Carry forward labels of A blindly into ABt
commit:03a5bb6
/////////////////////////////////////////////////////////////////////////
1:   public static H2ODrm exec(H2ODrm drmA, H2ODrm drmB, final String op) {
commit:c964986
/////////////////////////////////////////////////////////////////////////
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.ops;
1: 
0: import org.apache.mahout.h2obindings.H2OHelper;
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
1: import water.MRTask;
1: import water.fvec.Frame;
1: import water.fvec.Vec;
1: import water.fvec.Chunk;
1: import water.fvec.NewChunk;
1: 
1: public class AewB {
0:   /* Element-wise DRM-DRM operations */
0:   public static H2ODrm AewB(H2ODrm drmA, H2ODrm drmB, final String op) {
1:     final Frame A = drmA.frame;
1:     final Frame B = drmB.frame;
1:     Vec keys = drmA.keys;
1:     int AewB_cols = A.numCols();
1: 
0:     /* AewB is written into ncs[] with an MRTask on A, and therefore will
0:        be similarly partitioned as A.
1: 
0:        B may or may not be similarly partitioned as A, but must have the
0:        same dimensions of A.
1:     */
1:     Frame AewB = new MRTask() {
1:         private double opfn(String op, double a, double b) {
1:           if (a == 0.0 && b == 0.0) {
1:             return 0.0;
1:           }
1:           if (op.equals("+")) {
1:             return a + b;
1:           } else if (op.equals("-")) {
1:             return a - b;
1:           } else if (op.equals("*")) {
1:             return a * b;
1:           } else if (op.equals("/")) {
1:             return a / b;
1:           }
1:           return 0.0;
1:         }
1:         public void map(Chunk chks[], NewChunk ncs[]) {
0:           int chunk_size = chks[0].len();
1:           Vec B_vecs[] = B.vecs();
1:           long start = chks[0].start();
1: 
1:           for (int c = 0; c < chks.length; c++) {
0:             for (int r = 0; r < chunk_size; r++) {
0:               ncs[c].addNum(opfn(op, chks[c].at0(r), B_vecs[c].at(start + r)));
1:             }
1:           }
1:         }
1:       }.doAll(AewB_cols, A).outputFrame(null, null);
1: 
0:     /* Carry forward labels of A blindly into ABt */
1:     return new H2ODrm(AewB, keys);
1:   }
1: }
============================================================================