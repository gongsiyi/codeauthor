1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
2:a07bfc3:  */
1:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math;
1:a07bfc3: 
1:a8d3dbd: import org.apache.mahout.math.function.Functions;
1:a07bfc3: 
2:a07bfc3: /**
1:8b194c8:  * A centroid is a weighted vector.  We have it delegate to the vector itself for lots of operations
1:a07bfc3:  * to make it easy to use vector search classes and such.
1:a07bfc3:  */
1:a07bfc3: public class Centroid extends WeightedVector {
1:acda70b:   public Centroid(WeightedVector original) {
1:a8d3dbd:     super(original.getVector().like().assign(original), original.getWeight(), original.getIndex());
1:acda70b:   }
1:a07bfc3: 
1:acda70b:   public Centroid(int key, Vector initialValue) {
1:acda70b:     super(initialValue, 1, key);
1:acda70b:   }
1:a07bfc3: 
1:acda70b:   public Centroid(int key, Vector initialValue, double weight) {
1:acda70b:     super(initialValue, weight, key);
1:acda70b:   }
1:a07bfc3: 
1:acda70b:   public static Centroid create(int key, Vector initialValue) {
1:acda70b:     if (initialValue instanceof WeightedVector) {
1:acda70b:       return new Centroid(key, new DenseVector(initialValue), ((WeightedVector) initialValue).getWeight());
1:acda70b:     } else {
1:acda70b:       return new Centroid(key, new DenseVector(initialValue), 1);
1:acda70b:     }
1:1e3f7ae:   }
1:a07bfc3: 
1:acda70b:   public void update(Vector v) {
1:acda70b:     if (v instanceof Centroid) {
1:acda70b:       Centroid c = (Centroid) v;
1:acda70b:       update(c.delegate, c.getWeight());
1:acda70b:     } else {
1:acda70b:       update(v, 1);
1:acda70b:     }
12:a07bfc3:   }
1:a07bfc3: 
1:a8d3dbd:   public void update(Vector other, final double wy) {
1:a8d3dbd:     final double wx = getWeight();
1:a8d3dbd:     delegate.assign(other, Functions.reweigh(wx, wy));
1:a8d3dbd:     setWeight(wx + wy);
1:a07bfc3:   }
1:a07bfc3: 
1:acda70b:   @Override
1:a8d3dbd:   public Centroid like() {
1:1e3f7ae:     return new Centroid(getIndex(), getVector().like(), getWeight());
1:acda70b:   }
1:1e3f7ae: 
1:1e3f7ae:   /**
1:acda70b:    * Gets the index of this centroid.  Use getIndex instead to maintain standard names.
1:acda70b:    */
1:acda70b:   @Deprecated
1:acda70b:   public int getKey() {
1:acda70b:     return getIndex();
1:acda70b:   }
1:a07bfc3: 
1:a8d3dbd:   public void addWeight(double newWeight) {
1:a8d3dbd:     setWeight(getWeight() + newWeight);
1:acda70b:   }
1:a07bfc3: 
1:acda70b:   @Override
1:acda70b:   public String toString() {
1:acda70b:     return String.format("key = %d, weight = %.2f, vector = %s", getIndex(), getWeight(), delegate);
1:acda70b:   }
1:a07bfc3: 
1:a8d3dbd:   @SuppressWarnings("CloneDoesntCallSuperClone")
1:a8d3dbd:   @Override
1:a8d3dbd:   public Centroid clone() {
1:a8d3dbd:     return new Centroid(this);
1:a8d3dbd:   }
1:acda70b: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:8b194c8
/////////////////////////////////////////////////////////////////////////
1:  * A centroid is a weighted vector.  We have it delegate to the vector itself for lots of operations
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
0:  * A centroid is a weighted vector.  We have it delegate to the vector itself for lots of OPERATIONS
author:dfilimon
-------------------------------------------------------------------------------
commit:a8d3dbd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1:     super(original.getVector().like().assign(original), original.getWeight(), original.getIndex());
/////////////////////////////////////////////////////////////////////////
1:   public void update(Vector other, final double wy) {
1:     final double wx = getWeight();
1:     delegate.assign(other, Functions.reweigh(wx, wy));
1:     setWeight(wx + wy);
1:   public Centroid like() {
/////////////////////////////////////////////////////////////////////////
1:   public void addWeight(double newWeight) {
1:     setWeight(getWeight() + newWeight);
/////////////////////////////////////////////////////////////////////////
1:   @SuppressWarnings("CloneDoesntCallSuperClone")
1:   @Override
1:   public Centroid clone() {
1:     return new Centroid(this);
1:   }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:acda70b
/////////////////////////////////////////////////////////////////////////
1:   public Centroid(WeightedVector original) {
0:     super(original.getWeight(), original.getIndex());
0:     delegate = original.getVector().like();
0:     delegate.assign(original);
1:   }
1:   public Centroid(int key, Vector initialValue) {
1:     super(initialValue, 1, key);
1:   }
1:   public Centroid(int key, Vector initialValue, double weight) {
1:     super(initialValue, weight, key);
1:   }
1:   public static Centroid create(int key, Vector initialValue) {
1:     if (initialValue instanceof WeightedVector) {
1:       return new Centroid(key, new DenseVector(initialValue), ((WeightedVector) initialValue).getWeight());
1:     } else {
1:       return new Centroid(key, new DenseVector(initialValue), 1);
1:   }
1:   public void update(Vector v) {
1:     if (v instanceof Centroid) {
1:       Centroid c = (Centroid) v;
1:       update(c.delegate, c.getWeight());
1:     } else {
1:       update(v, 1);
1:   }
0:   public void update(Vector v, final double w) {
0:     final double weight = getWeight();
0:     final double totalWeight = weight + w;
0:     delegate.assign(v, new DoubleDoubleFunction() {
1:       @Override
0:       public double apply(double v, double v1) {
0:         return (weight * v + w * v1) / totalWeight;
1:       }
0:     });
0:     setWeight(totalWeight);
1:   }
/////////////////////////////////////////////////////////////////////////
1:    * Gets the index of this centroid.  Use getIndex instead to maintain standard names.
1:    */
1:   @Deprecated
1:   public int getKey() {
1:     return getIndex();
1:   }
0:   public void addWeight() {
0:     setWeight(getWeight() + 1);
1:   }
1:   @Override
1:   public String toString() {
1:     return String.format("key = %d, weight = %.2f, vector = %s", getIndex(), getWeight(), delegate);
1:   }
commit:1e3f7ae
/////////////////////////////////////////////////////////////////////////
0:         super(original.getWeight(), original.getIndex());
0:         delegate = original.getVector().like();
/////////////////////////////////////////////////////////////////////////
0:   @Override
0:   public Vector like() {
1:     return new Centroid(getIndex(), getVector().like(), getWeight());
1:   }
1: 
1:   /**
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
0: import org.apache.mahout.math.function.DoubleDoubleFunction;
1: 
1: /**
0:  * A centroid is a weighted vector.  We have it delegate to the vector itself for lots of operations
1:  * to make it easy to use vector search classes and such.
1:  */
1: public class Centroid extends WeightedVector {
0:     public Centroid(WeightedVector original) {
0:         super(original.size(), original.getWeight(), original.getIndex());
0:         delegate = original.like();
0:         delegate.assign(original);
1:     }
1: 
0:     public Centroid(int key, Vector initialValue) {
0:         super(initialValue, 1, key);
1:     }
1: 
0:     public Centroid(int key, Vector initialValue, double weight) {
0:         super(initialValue, weight, key);
1:     }
1: 
0:     public static Centroid create(int key, Vector initialValue) {
0:         if (initialValue instanceof WeightedVector) {
0:             return new Centroid(key, new DenseVector(initialValue), ((WeightedVector) initialValue).getWeight());
0:         } else {
0:             return new Centroid(key, new DenseVector(initialValue), 1);
1:         }
1:     }
1: 
0:     public void update(Vector v) {
0:         if (v instanceof Centroid) {
0:             Centroid c = (Centroid) v;
0:             update(c.delegate, c.getWeight());
0:         } else {
0:             update(v, 1);
1:         }
1:     }
1: 
0:     public void update(Vector v, final double w) {
0:         final double weight = getWeight();
0:         final double totalWeight = weight + w;
0:         delegate.assign(v, new DoubleDoubleFunction() {
0:             @Override
0:             public double apply(double v, double v1) {
0:                 return (weight * v + w * v1) / totalWeight;
1:             }
0:         });
0:         setWeight(totalWeight);
1:     }
1: 
1:     /**
0:      * Gets the index of this centroid.  Use getIndex instead to maintain standard names.
1:      */
0:     @Deprecated
0:     public int getKey() {
0:         return getIndex();
1:     }
1: 
0:     public void addWeight() {
0:         setWeight(getWeight() + 1);
1:     }
1: 
0:     public String toString() {
0:         return String.format("key = %d, weight = %.2f, vector = %s", getIndex(), getWeight(), delegate);
1:     }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
0:     @Override
============================================================================