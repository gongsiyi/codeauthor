1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
1:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:a07bfc3: import java.util.Random;
1:a07bfc3: 
1:8b6a26a: import org.apache.mahout.common.RandomUtils;
1:8b6a26a: 
1:a07bfc3: /**
1:a07bfc3:  * Models data with missing values.  Note that all variables with the same fraction of missing
1:a07bfc3:  * values will have the same sequence of missing values.  Similarly, if two variables have
1:a07bfc3:  * missing probabilities of p1 > p2, then all of the p2 missing values will also be missing for
1:a07bfc3:  * p1.
1:a07bfc3:  */
1:8b6a26a: public final class Missing<T> implements Sampler<T> {
1:a07bfc3:   private final Random gen;
1:a07bfc3:   private final double p;
1:a07bfc3:   private final Sampler<T> delegate;
1:a07bfc3:   private final T missingMarker;
1:a07bfc3: 
1:a07bfc3:   public Missing(int seed, double p, Sampler<T> delegate, T missingMarker) {
1:a07bfc3:     this.p = p;
1:a07bfc3:     this.delegate = delegate;
1:a07bfc3:     this.missingMarker = missingMarker;
1:8b6a26a:     gen = RandomUtils.getRandom(seed);
1:a07bfc3:   }
1:a07bfc3: 
1:a07bfc3:   public Missing(double p, Sampler<T> delegate, T missingMarker) {
1:a07bfc3:     this(1, p, delegate, missingMarker);
1:a07bfc3:   }
1:a07bfc3: 
1:a07bfc3:   public Missing(double p, Sampler<T> delegate) {
1:a07bfc3:     this(1, p, delegate, null);
1:a07bfc3:   }
1:a07bfc3: 
1:a07bfc3:   @Override
1:a07bfc3:   public T sample() {
1:a07bfc3:     if (gen.nextDouble() >= p) {
1:a07bfc3:       return delegate.sample();
1:a07bfc3:     } else {
1:a07bfc3:       return missingMarker;
1:a07bfc3:     }
1:a07bfc3:   }
1:a07bfc3: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
1: 
1: public final class Missing<T> implements Sampler<T> {
/////////////////////////////////////////////////////////////////////////
1:     gen = RandomUtils.getRandom(seed);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import java.util.Random;
1: 
1: /**
1:  * Models data with missing values.  Note that all variables with the same fraction of missing
1:  * values will have the same sequence of missing values.  Similarly, if two variables have
1:  * missing probabilities of p1 > p2, then all of the p2 missing values will also be missing for
1:  * p1.
1:  */
0: public class Missing<T> implements Sampler<T> {
1:   private final Random gen;
1:   private final double p;
1:   private final Sampler<T> delegate;
1:   private final T missingMarker;
1: 
1:   public Missing(int seed, double p, Sampler<T> delegate, T missingMarker) {
1:     this.p = p;
1:     this.delegate = delegate;
1:     this.missingMarker = missingMarker;
0:     gen = new Random(seed);
1:   }
1: 
1:   public Missing(double p, Sampler<T> delegate, T missingMarker) {
1:     this(1, p, delegate, missingMarker);
1:   }
1: 
1:   public Missing(double p, Sampler<T> delegate) {
1:     this(1, p, delegate, null);
1:   }
1: 
1:   @Override
1:   public T sample() {
1:     if (gen.nextDouble() >= p) {
1:       return delegate.sample();
1:     } else {
1:       return missingMarker;
1:     }
1:   }
1: }
============================================================================