1:f55276b: /**
1:f55276b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f55276b:  * contributor license agreements.  See the NOTICE file distributed with
1:f55276b:  * this work for additional information regarding copyright ownership.
1:f55276b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f55276b:  * (the "License"); you may not use this file except in compliance with
1:f55276b:  * the License.  You may obtain a copy of the License at
1:075ea19:  *
1:f55276b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:075ea19:  *
1:f55276b:  * Unless required by applicable law or agreed to in writing, software
1:f55276b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f55276b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f55276b:  * See the License for the specific language governing permissions and
1:f55276b:  * limitations under the License.
1:f55276b:  */
2:075ea19: 
1:075ea19: package org.apache.mahout.utils.vectors.io;
1:075ea19: 
1:075ea19: import java.io.IOException;
1:075ea19: 
1:d608a88: import com.google.common.io.Closeables;
1:075ea19: import org.apache.hadoop.io.LongWritable;
1:075ea19: import org.apache.hadoop.io.SequenceFile;
1:a435efb: import org.apache.mahout.math.Vector;
1:233d93d: import org.apache.mahout.math.VectorWritable;
1:075ea19: 
1:075ea19: 
1:075ea19: /**
1:a2bb411:  * Writes out Vectors to a SequenceFile.
1:a2bb411:  *
1:63e11c0:  * Closes the writer when done
1:758cc1b:  */
1:075ea19: public class SequenceFileVectorWriter implements VectorWriter {
1:758cc1b:   private final SequenceFile.Writer writer;
1:b16c260:   private long recNum = 0;
1:075ea19:   public SequenceFileVectorWriter(SequenceFile.Writer writer) {
1:075ea19:     this.writer = writer;
1:075ea19:   }
1:075ea19:   
1:075ea19:   @Override
1:90fe0a2:   public long write(Iterable<Vector> iterable, long maxDocs) throws IOException {
1:747dfa4: 
1:075ea19:     for (Vector point : iterable) {
1:63e11c0:       if (recNum >= maxDocs) {
1:075ea19:         break;
1:63e11c0:       }
1:cb030aa:       if (point != null) {
1:135a840:         writer.append(new LongWritable(recNum++), new VectorWritable(point));
1:075ea19:       }
1:075ea19:       
1:075ea19:     }
1:63e11c0:     return recNum;
1:075ea19:   }
1:747dfa4: 
1:747dfa4:   @Override
1:747dfa4:   public void write(Vector vector) throws IOException {
1:747dfa4:     writer.append(new LongWritable(recNum++), new VectorWritable(vector));
1:747dfa4: 
1:747dfa4:   }
1:747dfa4: 
1:075ea19:   @Override
1:90fe0a2:   public long write(Iterable<Vector> iterable) throws IOException {
1:075ea19:     return write(iterable, Long.MAX_VALUE);
1:075ea19:   }
1:075ea19:   
1:075ea19:   @Override
1:075ea19:   public void close() throws IOException {
1:87d4b2e:     Closeables.close(writer, false);
1:63e11c0:   }
1:075ea19:   
1:63e11c0:   public SequenceFile.Writer getWriter() {
1:63e11c0:     return writer;
1:075ea19:   }
1:075ea19: }
============================================================================
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
1:     Closeables.close(writer, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:     Closeables.close(writer, true);
commit:747dfa4
/////////////////////////////////////////////////////////////////////////
0: public class SequenceFileVectorWriter extends VectorWriter {
0:   long recNum = 0;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public void write(Vector vector) throws IOException {
1:     writer.append(new LongWritable(recNum++), new VectorWritable(vector));
1: 
1:   }
1: 
commit:a2bb411
/////////////////////////////////////////////////////////////////////////
1:  * Writes out Vectors to a SequenceFile.
1:  *
commit:a435efb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.Vector;
commit:90fe0a2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public long write(Iterable<Vector> iterable, long maxDocs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public long write(Iterable<Vector> iterable) throws IOException {
commit:63e11c0
/////////////////////////////////////////////////////////////////////////
1:  * Closes the writer when done
/////////////////////////////////////////////////////////////////////////
1:       if (recNum >= maxDocs) {
1:     return recNum;
/////////////////////////////////////////////////////////////////////////
0:     if (writer != null) {
0:       writer.close();
1:     }
1:   }
1:   public SequenceFile.Writer getWriter() {
1:     return writer;
commit:075ea19
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.vectors.io;
1: 
0: import org.apache.mahout.utils.vectors.VectorIterable;
0: import org.apache.mahout.matrix.Vector;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.LongWritable;
1: 
1: import java.io.IOException;
1: 
1: 
1: /**
1:  *
1:  *
0:  **/
1: public class SequenceFileVectorWriter implements VectorWriter {
0:   protected SequenceFile.Writer writer;
1: 
1:   public SequenceFileVectorWriter(SequenceFile.Writer writer) {
1:     this.writer = writer;
1:   }
1: 
1:   @Override
0:   public long write(VectorIterable iterable, long maxDocs) throws IOException {
0:     long i = 0;
0:     long recNum = 0;
1:     for (Vector point : iterable) {
0:       if (i >= maxDocs) {
1:         break;
1:       }
0:       //point.write(dataOut);
0:       writer.append(new LongWritable(recNum++), point);
1: 
0:       i++;
1:     }
0:     return i;
1:   }
1: 
1:   @Override
0:   public long write(VectorIterable iterable) throws IOException {
1:     return write(iterable, Long.MAX_VALUE);
1:   }
1: 
1:   @Override
1:   public void close() throws IOException {
1: 
1:   }
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d608a88
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:     Closeables.closeQuietly(writer);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:50fd693
commit:b16c260
/////////////////////////////////////////////////////////////////////////
0: public class SequenceFileVectorWriter implements VectorWriter {
1:   private long recNum = 0;
commit:cb030aa
/////////////////////////////////////////////////////////////////////////
1:       if (point != null) {
0:         writer.append(new LongWritable(recNum++), point);
0:       }
commit:758cc1b
/////////////////////////////////////////////////////////////////////////
1:  */
1:   private final SequenceFile.Writer writer;
commit:f55276b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
author:Robin Anil
-------------------------------------------------------------------------------
commit:233d93d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.hadoop.io.LongWritable;
0: import org.apache.hadoop.io.SequenceFile;
0: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
0: 
0:   
0:   
/////////////////////////////////////////////////////////////////////////
0:       
0:   
0:   
0:   
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:135a840
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.VectorWritable;
/////////////////////////////////////////////////////////////////////////
1:         writer.append(new LongWritable(recNum++), new VectorWritable(point));
============================================================================