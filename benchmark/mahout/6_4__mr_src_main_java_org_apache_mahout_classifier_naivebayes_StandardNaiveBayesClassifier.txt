2:515a414: /**
1:515a414:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:515a414:  * contributor license agreements.  See the NOTICE file distributed with
1:515a414:  * this work for additional information regarding copyright ownership.
1:515a414:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:515a414:  * (the "License"); you may not use this file except in compliance with
1:515a414:  * the License.  You may obtain a copy of the License at
2:515a414:  *
1:515a414:  *     http://www.apache.org/licenses/LICENSE-2.0
1:515a414:  *
1:515a414:  * Unless required by applicable law or agreed to in writing, software
1:515a414:  * distributed under the License is distributed on an "AS IS" BASIS,
1:515a414:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:515a414:  * See the License for the specific language governing permissions and
1:515a414:  * limitations under the License.
2:515a414:  */
1:e3fb0c4: 
1:515a414: package org.apache.mahout.classifier.naivebayes;
1:d8d721a: 
5:515a414: 
1:94b08db: /** Implementation of the Naive Bayes Classifier Algorithm */
1:515a414: public class StandardNaiveBayesClassifier extends AbstractNaiveBayesClassifier { 
1:515a414:  
1:515a414:   public StandardNaiveBayesClassifier(NaiveBayesModel model) {
1:515a414:     super(model);
1:515a414:   }
1:d94eb39: 
1:515a414:   @Override
1:515a414:   public double getScoreForLabelFeature(int label, int feature) {
1:939ac30:     NaiveBayesModel model = getModel();
1:9a5bab5:     // Standard Naive Bayes does not use weight normalization
1:fa29726:     return computeWeight(model.weight(label, feature), model.labelWeight(label), model.alphaI(), model.numFeatures());
1:515a414:   }
1:e3fb0c4: 
1:fa29726:   public static double computeWeight(double featureLabelWeight, double labelWeight, double alphaI, double numFeatures) {
1:d94eb39:     double numerator = featureLabelWeight + alphaI;
1:d94eb39:     double denominator = labelWeight + alphaI * numFeatures;
1:d94eb39:     return Math.log(numerator / denominator);
1:d94eb39:   }
1:515a414: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:9a5bab5
/////////////////////////////////////////////////////////////////////////
1:     // Standard Naive Bayes does not use weight normalization
commit:94b08db
/////////////////////////////////////////////////////////////////////////
1: /** Implementation of the Naive Bayes Classifier Algorithm */
/////////////////////////////////////////////////////////////////////////
0:     // Standard Naive Bayes does not use weight normalization, uncomment following line for weight normalized NB
0:     // weight = weight / model.thetaNormalizer(label);
commit:e3fb0c4
/////////////////////////////////////////////////////////////////////////
0: /** Class implementing the Naive Bayes Classifier Algorithm */
/////////////////////////////////////////////////////////////////////////
1: 
0:     double numerator = model.weight(label, feature) + model.alphaI();
0:     double denominator = model.labelWeight(label) + model.alphaI() * model.numFeatures();
1: 
0:     return -Math.log(numerator / denominator);
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:fa29726
/////////////////////////////////////////////////////////////////////////
0:     // Standard Naive Bayes does not use weight normalization
0:     // uncomment following line for weight normalized NB
0:     // weight=weight/model.thetaNormalizer(label);
1:     return computeWeight(model.weight(label, feature), model.labelWeight(label), model.alphaI(), model.numFeatures());
1:   public static double computeWeight(double featureLabelWeight, double labelWeight, double alphaI, double numFeatures) {
author:Robin Anil
-------------------------------------------------------------------------------
commit:d94eb39
/////////////////////////////////////////////////////////////////////////
0:     return computeWeight(model.weight(label, feature), model.labelWeight(label), model.alphaI(),
0:         model.numFeatures());
1: 
0:   public static double computeWeight(double featureLabelWeight, double labelWeight, double alphaI,
0:       double numFeatures) {
1:     double numerator = featureLabelWeight + alphaI;
1:     double denominator = labelWeight + alphaI * numFeatures;
1:     return Math.log(numerator / denominator);
1:   }
commit:d8d721a
/////////////////////////////////////////////////////////////////////////
1:   
commit:1526c5b
/////////////////////////////////////////////////////////////////////////
commit:515a414
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.naivebayes;
1: 
1: 
1: /**
0:  * Class implementing the Naive Bayes Classifier Algorithm
1:  * 
1:  */
1: public class StandardNaiveBayesClassifier extends AbstractNaiveBayesClassifier { 
1:  
1:   public StandardNaiveBayesClassifier(NaiveBayesModel model) {
1:     super(model);
1:   }
1: 
1:   @Override
1:   public double getScoreForLabelFeature(int label, int feature) {
0:     double result = model.getWeightMatrix().get(label, feature);
0:     double vocabCount = model.getVocabCount();
0:     double sumLabelWeight = model.getLabelSum().get(label);
0:     double numerator = result + model.getAlphaI();
0:     double denominator = sumLabelWeight + vocabCount;
0:     double weight = - Math.log(numerator / denominator);
0:     result = weight / model.getPerlabelThetaNormalizer().get(label);
0:     return result;
1:   }
1:   
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
0:     double weight = -Math.log(numerator / denominator);
commit:939ac30
/////////////////////////////////////////////////////////////////////////
1:     NaiveBayesModel model = getModel();
============================================================================