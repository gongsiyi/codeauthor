1:6290deb: /**
1:6290deb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6290deb:  * contributor license agreements.  See the NOTICE file distributed with
1:6290deb:  * this work for additional information regarding copyright ownership.
1:6290deb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6290deb:  * (the "License"); you may not use this file except in compliance with
1:6290deb:  * the License.  You may obtain a copy of the License at
1:6290deb:  *
1:6290deb:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6290deb:  *
1:6290deb:  * Unless required by applicable law or agreed to in writing, software
1:6290deb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6290deb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6290deb:  * See the License for the specific language governing permissions and
1:6290deb:  * limitations under the License.
1:6290deb:  */
2:6290deb: 
1:6290deb: package org.apache.mahout.classifier.df.builder;
1:6290deb: 
1:6290deb: import java.lang.reflect.Method;
1:6290deb: import java.util.Random;
1:6290deb: import java.util.Arrays;
1:6290deb: 
1:67a531e: import org.apache.commons.lang3.ArrayUtils;
1:6290deb: import org.apache.mahout.common.MahoutTestCase;
1:6290deb: import org.apache.mahout.common.RandomUtils;
1:6290deb: import org.junit.Test;
1:1ffa3a4: @Deprecated
1:6290deb: public final class DecisionTreeBuilderTest extends MahoutTestCase {
1:6290deb: 
1:6290deb:   /**
1:6290deb:    * make sure that DecisionTreeBuilder.randomAttributes() returns the correct number of attributes, that have not been
1:6290deb:    * selected yet
1:6290deb:    */
1:6290deb:   @Test
1:6290deb:   public void testRandomAttributes() throws Exception {
1:6290deb:     Random rng = RandomUtils.getRandom();
1:6290deb:     int nbAttributes = rng.nextInt(100) + 1;
1:6290deb:     boolean[] selected = new boolean[nbAttributes];
1:6290deb: 
1:6290deb:     for (int nloop = 0; nloop < 100; nloop++) {
1:6290deb:       Arrays.fill(selected, false);
1:6290deb: 
1:6290deb:       // randomly select some attributes
1:6290deb:       int nbSelected = rng.nextInt(nbAttributes - 1);
1:6290deb:       for (int index = 0; index < nbSelected; index++) {
1:6290deb:         int attr;
1:6290deb:         do {
1:6290deb:           attr = rng.nextInt(nbAttributes);
1:6290deb:         } while (selected[attr]);
1:6290deb: 
1:6290deb:         selected[attr] = true;
1:6290deb:       }
1:6290deb: 
1:6290deb:       int m = rng.nextInt(nbAttributes);
1:6290deb: 
1:6290deb:       Method randomAttributes = DecisionTreeBuilder.class.getDeclaredMethod("randomAttributes",
1:6290deb:         Random.class, boolean[].class, int.class);
1:6290deb:       randomAttributes.setAccessible(true);
1:6290deb:       int[] attrs = (int[]) randomAttributes.invoke(null, rng, selected, m);
1:6290deb: 
1:6290deb:       assertNotNull(attrs);
1:6290deb:       assertEquals(Math.min(m, nbAttributes - nbSelected), attrs.length);
1:6290deb: 
1:6290deb:       for (int attr : attrs) {
1:6290deb:         // the attribute should not be already selected
1:6290deb:         assertFalse("an attribute has already been selected", selected[attr]);
1:6290deb: 
1:6290deb:         // each attribute should be in the range [0, nbAttributes[
1:6290deb:         assertTrue(attr >= 0);
1:6290deb:         assertTrue(attr < nbAttributes);
1:6290deb: 
1:6290deb:         // each attribute should appear only once
1:6290deb:         assertEquals(ArrayUtils.indexOf(attrs, attr), ArrayUtils.lastIndexOf(attrs, attr));
1:6290deb:       }
1:6290deb:     }
1:6290deb:   }
1:6290deb: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.ArrayUtils;
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:6290deb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.df.builder;
1: 
1: import java.lang.reflect.Method;
1: import java.util.Random;
1: import java.util.Arrays;
1: 
0: import org.apache.commons.lang.ArrayUtils;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.common.RandomUtils;
1: import org.junit.Test;
1: 
1: public final class DecisionTreeBuilderTest extends MahoutTestCase {
1: 
1:   /**
1:    * make sure that DecisionTreeBuilder.randomAttributes() returns the correct number of attributes, that have not been
1:    * selected yet
1:    */
1:   @Test
1:   public void testRandomAttributes() throws Exception {
1:     Random rng = RandomUtils.getRandom();
1:     int nbAttributes = rng.nextInt(100) + 1;
1:     boolean[] selected = new boolean[nbAttributes];
1: 
1:     for (int nloop = 0; nloop < 100; nloop++) {
1:       Arrays.fill(selected, false);
1: 
1:       // randomly select some attributes
1:       int nbSelected = rng.nextInt(nbAttributes - 1);
1:       for (int index = 0; index < nbSelected; index++) {
1:         int attr;
1:         do {
1:           attr = rng.nextInt(nbAttributes);
1:         } while (selected[attr]);
1: 
1:         selected[attr] = true;
1:       }
1: 
1:       int m = rng.nextInt(nbAttributes);
1: 
1:       Method randomAttributes = DecisionTreeBuilder.class.getDeclaredMethod("randomAttributes",
1:         Random.class, boolean[].class, int.class);
1:       randomAttributes.setAccessible(true);
1:       int[] attrs = (int[]) randomAttributes.invoke(null, rng, selected, m);
1: 
1:       assertNotNull(attrs);
1:       assertEquals(Math.min(m, nbAttributes - nbSelected), attrs.length);
1: 
1:       for (int attr : attrs) {
1:         // the attribute should not be already selected
1:         assertFalse("an attribute has already been selected", selected[attr]);
1: 
1:         // each attribute should be in the range [0, nbAttributes[
1:         assertTrue(attr >= 0);
1:         assertTrue(attr < nbAttributes);
1: 
1:         // each attribute should appear only once
1:         assertEquals(ArrayUtils.indexOf(attrs, attr), ArrayUtils.lastIndexOf(attrs, attr));
1:       }
1:     }
1:   }
1: }
============================================================================