1:151de0d: /**
1:151de0d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:151de0d:  * contributor license agreements.  See the NOTICE file distributed with
1:151de0d:  * this work for additional information regarding copyright ownership.
1:151de0d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:151de0d:  * (the "License"); you may not use this file except in compliance with
1:151de0d:  * the License.  You may obtain a copy of the License at
1:151de0d:  *
1:151de0d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:151de0d:  *
1:151de0d:  * Unless required by applicable law or agreed to in writing, software
1:151de0d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:151de0d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:151de0d:  * See the License for the specific language governing permissions and
1:151de0d:  * limitations under the License.
1:151de0d:  */
4:151de0d: 
1:f43adfe: package org.apache.mahout.math;
1:151de0d: 
1:0b564c7: import org.apache.mahout.math.flavor.BackEnum;
1:0b564c7: import org.apache.mahout.math.flavor.MatrixFlavor;
1:0b564c7: import org.apache.mahout.math.flavor.TraversingStructureEnum;
1:0b564c7: 
1:151de0d: /**
1:151de0d:  * 
1:f43adfe:  * Quick and dirty implementation of some {@link org.apache.mahout.math.Matrix} methods
1:151de0d:  * over packed upper triangular matrix.
1:151de0d:  *
1:151de0d:  */
1:151de0d: public class UpperTriangular extends AbstractMatrix {
1:151de0d: 
1:b16c260:   private static final double EPSILON = 1.0e-12; // assume anything less than
1:151de0d:                                                  // that to be 0 during
1:151de0d:                                                  // non-upper assignments
1:151de0d: 
1:151de0d:   private double[] values;
1:151de0d: 
1:151de0d:   /**
1:151de0d:    * represents n x n upper triangular matrix
1:151de0d:    * 
1:151de0d:    * @param n
1:151de0d:    */
1:151de0d: 
1:151de0d:   public UpperTriangular(int n) {
1:95f836b:     super(n, n);
2:151de0d:     values = new double[n * (n + 1) / 2];
1:151de0d:   }
1:151de0d: 
1:151de0d:   public UpperTriangular(double[] data, boolean shallow) {
1:ffc7fab:     this(elementsToMatrixSize(data != null ? data.length : 0));
1:b16c260:     if (data == null) {
1:151de0d:       throw new IllegalArgumentException("data");
1:151de0d:     }
1:151de0d:     values = shallow ? data : data.clone();
1:b16c260:   }
1:151de0d: 
1:151de0d:   public UpperTriangular(Vector data) {
1:ffc7fab:     this(elementsToMatrixSize(data.size()));
1:151de0d: 
1:f43adfe:     for (Vector.Element el:data.nonZeroes()) {
1:f43adfe:       values[el.index()] = el.get();
1:151de0d:     }
1:b16c260:   }
1:151de0d: 
1:f43adfe:   private static int elementsToMatrixSize(int dataSize) {
1:f43adfe:     return (int) Math.round((-1 + Math.sqrt(1 + 8 * dataSize)) / 2);
1:33414e6:   }
1:151de0d: 
1:151de0d:   // copy-constructor
1:151de0d:   public UpperTriangular(UpperTriangular mx) {
1:151de0d:     this(mx.values, false);
1:151de0d:   }
1:151de0d: 
3:151de0d:   @Override
1:151de0d:   public Matrix assignColumn(int column, Vector other) {
1:33414e6:     if (columnSize() != other.size()) {
1:33414e6:       throw new IndexException(columnSize(), other.size());
1:151de0d:     }
1:1499411:     if (other.viewPart(column + 1, other.size() - column - 1).norm(1) > 1.0e-14) {
1:33414e6:       throw new IllegalArgumentException("Cannot set lower portion of triangular matrix to non-zero");
1:b16c260:     }
1:dc62944:     for (Vector.Element element : other.viewPart(0, column).all()) {
1:33414e6:       setQuick(element.index(), column, element.get());
1:33414e6:     }
1:33414e6:     return this;
4:33414e6:   }
1:151de0d: 
1:151de0d:   @Override
1:151de0d:   public Matrix assignRow(int row, Vector other) {
1:33414e6:     if (columnSize() != other.size()) {
1:33414e6:       throw new IndexException(numCols(), other.size());
1:151de0d:     }
1:b16c260:     for (int i = 0; i < row; i++) {
1:33414e6:       if (Math.abs(other.getQuick(i)) > EPSILON) {
1:b16c260:         throw new IllegalArgumentException("non-triangular source");
1:b16c260:       }
1:b16c260:     }
1:ffc7fab:     for (int i = row; i < rows; i++) {
1:151de0d:       setQuick(row, i, other.get(i));
1:151de0d:     }
1:151de0d:     return this;
1:151de0d:   }
1:151de0d: 
1:33414e6:   public Matrix assignNonZeroElementsInRow(int row, double[] other) {
1:ffc7fab:     System.arraycopy(other, row, values, getL(row, row), rows - row);
1:151de0d:     return this;
1:151de0d:   }
1:151de0d: 
1:151de0d:   @Override
1:151de0d:   public double getQuick(int row, int column) {
1:b16c260:     if (row > column) {
1:151de0d:       return 0;
1:151de0d:     }
1:33414e6:     int i = getL(row, column);
1:33414e6:     return values[i];
1:b16c260:   }
1:151de0d: 
1:151de0d:   private int getL(int row, int col) {
1:5a2250c:     /*
1:5a2250c:      * each row starts with some zero elements that we don't store. this
1:5a2250c:      * accumulates an offset of (row+1)*row/2
1:5a2250c:      */
1:33414e6:     return col + row * numCols() - (row + 1) * row / 2;
1:151de0d:   }
1:151de0d: 
1:151de0d:   @Override
1:151de0d:   public Matrix like() {
1:33414e6:     return like(rowSize(), columnSize());
1:151de0d:   }
1:151de0d: 
1:151de0d:   @Override
1:151de0d:   public Matrix like(int rows, int columns) {
1:33414e6:     return new DenseMatrix(rows, columns);
1:151de0d:   }
1:151de0d: 
1:151de0d:   @Override
1:151de0d:   public void setQuick(int row, int column, double value) {
1:151de0d:     values[getL(row, column)] = value;
1:151de0d:   }
1:151de0d: 
1:151de0d:   @Override
1:151de0d:   public int[] getNumNondefaultElements() {
7:151de0d:     throw new UnsupportedOperationException();
1:151de0d:   }
1:151de0d: 
1:151de0d:   @Override
1:151de0d:   public Matrix viewPart(int[] offset, int[] size) {
1:33414e6:     return new MatrixView(this, offset, size);
1:151de0d:   }
1:151de0d: 
1:ffc7fab:   public double[] getData() {
1:151de0d:     return values;
1:151de0d:   }
1:151de0d: 
1:0b564c7:   @Override
1:0b564c7:   public MatrixFlavor getFlavor() {
1:0b564c7:     // We kind of consider ourselves a vector-backed but dense matrix for mmul, etc. purposes.
1:0b564c7:     return new MatrixFlavor.FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.VECTORBACKED, true);
1:0b564c7:   }
1:151de0d: }
============================================================================
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:0b564c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.flavor.BackEnum;
1: import org.apache.mahout.math.flavor.MatrixFlavor;
1: import org.apache.mahout.math.flavor.TraversingStructureEnum;
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public MatrixFlavor getFlavor() {
1:     // We kind of consider ourselves a vector-backed but dense matrix for mmul, etc. purposes.
1:     return new MatrixFlavor.FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.VECTORBACKED, true);
1:   }
commit:f43adfe
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1:  * Quick and dirty implementation of some {@link org.apache.mahout.math.Matrix} methods
/////////////////////////////////////////////////////////////////////////
1:     for (Vector.Element el:data.nonZeroes()) {
1:       values[el.index()] = el.get();
1:   private static int elementsToMatrixSize(int dataSize) {
1:     return (int) Math.round((-1 + Math.sqrt(1 + 8 * dataSize)) / 2);
commit:5a2250c
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * each row starts with some zero elements that we don't store. this
1:      * accumulates an offset of (row+1)*row/2
1:      */
commit:ffc7fab
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     this(elementsToMatrixSize(data != null ? data.length : 0));
/////////////////////////////////////////////////////////////////////////
1:     this(elementsToMatrixSize(data.size()));
0:     values = new double[rows * (rows + 1) / 2];
0:     rows = data.size();
0:     for (int i = 0; i < rows; i++) {
/////////////////////////////////////////////////////////////////////////
1:     for (int i = row; i < rows; i++) {
1:     System.arraycopy(other, row, values, getL(row, row), rows - row);
/////////////////////////////////////////////////////////////////////////
1:   public double[] getData() {
commit:151de0d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.math.hadoop.stochasticsvd;
1: 
0: import org.apache.mahout.math.AbstractMatrix;
0: import org.apache.mahout.math.Matrix;
0: import org.apache.mahout.math.Vector;
1: 
1: /**
1:  * 
0:  * Quick and dirty implementation of some {@link Matrix} methods 
1:  * over packed upper triangular matrix.
1:  *
1:  */
1: public class UpperTriangular extends AbstractMatrix {
1: 
0:   private static final double EPSILON = 1e-12; // assume anything less than
1:                                                  // that to be 0 during
1:                                                  // non-upper assignments
1: 
1:   private double[] values;
0:   private int n;
1: 
1:   /**
1:    * represents n x n upper triangular matrix
1:    * 
1:    * @param n
1:    */
1: 
1:   public UpperTriangular(int n) {
0:     super();
1: 
1:     values = new double[n * (n + 1) / 2];
0:     this.n = n;
0:     cardinality[0] = cardinality[1] = n;
1:   }
1: 
1:   public UpperTriangular(Vector data) {
0:     n = (int) Math.round((-1 + Math.sqrt(1 + 8 * data.size())) / 2);
0:     cardinality[0] = cardinality[1] = n;
1:     values = new double[n * (n + 1) / 2];
0:     int n = data.size();
0:     // if ( data instanceof DenseVector )
0:     // ((DenseVector)data).
0:     // system.arraycopy would've been much faster, but this way it's a drag
0:     // on B-t job.
0:     for (int i = 0; i < n; i++)
0:       values[i] = data.getQuick(i);
1:   }
1: 
1:   public UpperTriangular(double[] data, boolean shallow) {
0:     super();
0:     if (data == null)
1:       throw new IllegalArgumentException("data");
1:     values = shallow ? data : data.clone();
0:     n = (int) Math.round((-1 + Math.sqrt(1 + 8 * data.length)) / 2);
0:     cardinality[0] = cardinality[1] = n;
1:   }
1: 
1:   // copy-constructor
1:   public UpperTriangular(UpperTriangular mx) {
1:     this(mx.values, false);
1:   }
1: 
1:   @Override
1:   public Matrix assignColumn(int column, Vector other) {
1: 
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
1:   public Matrix assignRow(int row, Vector other) {
0:     for (int i = 0; i < row; i++)
0:       if (other.getQuick(i) > EPSILON)
0:         throw new RuntimeException("non-triangular source");
0:     for (int i = row; i < n; i++)
1:       setQuick(row, i, other.get(i));
1:     return this;
1:   }
1: 
0:   public Matrix assignRow(int row, double[] other) {
0:     System.arraycopy(other, row, values, getL(row, row), n - row);
1:     return this;
1:   }
1: 
1:   @Override
0:   public Vector getColumn(int column) {
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
0:   public Vector getRow(int row) {
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
1:   public double getQuick(int row, int column) {
0:     if (row > column)
1:       return 0;
0:     return values[getL(row, column)];
1:   }
1: 
1:   private int getL(int row, int col) {
0:     return (((n << 1) - row + 1) * row >> 1) + col - row;
1:   }
1: 
1:   @Override
1:   public Matrix like() {
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
1:   public Matrix like(int rows, int columns) {
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
1:   public void setQuick(int row, int column, double value) {
1:     values[getL(row, column)] = value;
1:   }
1: 
1:   @Override
1:   public int[] getNumNondefaultElements() {
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
1:   public Matrix viewPart(int[] offset, int[] size) {
1:     throw new UnsupportedOperationException();
1:   }
1: 
0:   double[] getData() {
1:     return values;
1:   }
1: 
1: }
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1:     for (Vector.Element element : other.viewPart(0, column).all()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:     if (other.viewPart(column + 1, other.size() - column - 1).norm(1) > 1.0e-14) {
commit:b16c260
/////////////////////////////////////////////////////////////////////////
1:   private static final double EPSILON = 1.0e-12; // assume anything less than
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     for (int i = 0; i < n; i++) {
1:     }
1:     if (data == null) {
1:     }
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < row; i++) {
0:       if (other.getQuick(i) > EPSILON) {
1:         throw new IllegalArgumentException("non-triangular source");
1:       }
1:     }
0:     for (int i = row; i < n; i++) {
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (row > column) {
1:     }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:33414e6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.DenseMatrix;
0: import org.apache.mahout.math.IndexException;
0: import org.apache.mahout.math.MatrixView;
/////////////////////////////////////////////////////////////////////////
0:     this(data != null ? data.length : 0, elementsToMatrixSize(data != null ? data.length : 0));
0:     if (data == null) {
0:       throw new IllegalArgumentException("data");
1:     }
0:     values = shallow ? data : data.clone();
0:   public UpperTriangular(Vector data) {
0:     this(data.size(), elementsToMatrixSize(data.size()));
0: 
0:     n = data.size();
/////////////////////////////////////////////////////////////////////////
0:   private UpperTriangular(int n, int rows) {
0:     this.n = n;
1:   }
0: 
0:   private static int elementsToMatrixSize(int size) {
0:     return (int) Math.round((-1 + Math.sqrt(1 + 8 * size)) / 2);
/////////////////////////////////////////////////////////////////////////
1:     if (columnSize() != other.size()) {
1:       throw new IndexException(columnSize(), other.size());
1:     }
0:     if (other.viewPart(column + 1, other.size() - column - 1).norm(1) > 1e-14) {
1:       throw new IllegalArgumentException("Cannot set lower portion of triangular matrix to non-zero");
1:     }
0:     for (Vector.Element element : other.viewPart(0, column)) {
1:       setQuick(element.index(), column, element.get());
1:     }
1:     return this;
1:     if (columnSize() != other.size()) {
1:       throw new IndexException(numCols(), other.size());
1:     }
1:       if (Math.abs(other.getQuick(i)) > EPSILON) {
/////////////////////////////////////////////////////////////////////////
1:   public Matrix assignNonZeroElementsInRow(int row, double[] other) {
/////////////////////////////////////////////////////////////////////////
1:     int i = getL(row, column);
1:     return values[i];
0:     // each row starts with some zero elements that we don't store.
0:     // this accumulates an offset of (row+1)*row/2
1:     return col + row * numCols() - (row + 1) * row / 2;
1:     return like(rowSize(), columnSize());
1:     return new DenseMatrix(rows, columns);
/////////////////////////////////////////////////////////////////////////
1:     return new MatrixView(this, offset, size);
commit:95f836b
/////////////////////////////////////////////////////////////////////////
1:     super(n, n);
0:     this((int) Math.round((-1 + Math.sqrt(1 + 8 * data.size())) / 2), data);
0:   }
0: 
0:   public UpperTriangular(double[] data, boolean shallow) {
0:     this((int) Math.round((-1 + Math.sqrt(1 + 8 * data.length)) / 2), data, shallow);
0:   }
0: 
0:   private UpperTriangular(int rows, Vector data) {
0:     super(rows, rows);
/////////////////////////////////////////////////////////////////////////
0:   private UpperTriangular(int rows, double[] data, boolean shallow) {
0:     super(rows, rows);
/////////////////////////////////////////////////////////////////////////
commit:528ffcd
/////////////////////////////////////////////////////////////////////////
============================================================================