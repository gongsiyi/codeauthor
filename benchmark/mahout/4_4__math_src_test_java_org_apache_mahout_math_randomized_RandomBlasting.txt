1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:f5b2ef2: package org.apache.mahout.math.randomized;
1:f5b2ef2: 
1:f5b2ef2: import java.lang.reflect.Field;
1:f5b2ef2: import java.util.Arrays;
1:f5b2ef2: import java.util.HashMap;
1:f5b2ef2: import java.util.HashSet;
1:f5b2ef2: import java.util.List;
1:4ca6b86: import java.util.Map;
1:f5b2ef2: import java.util.Set;
1:f5b2ef2: 
1:58cc1ae: import com.google.common.collect.Lists;
1:58cc1ae: import com.google.common.collect.Sets;
1:f5b2ef2: import org.apache.mahout.math.map.OpenIntIntHashMap;
1:f5b2ef2: import org.apache.mahout.math.map.OpenIntObjectHashMap;
1:f5b2ef2: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1:f5b2ef2: import org.apache.mahout.math.set.AbstractIntSet;
1:f5b2ef2: import org.apache.mahout.math.set.OpenHashSet;
1:f5b2ef2: import org.apache.mahout.math.set.OpenIntHashSet;
1:f5b2ef2: import org.junit.Test;
1:f5b2ef2: 
1:f5b2ef2: import com.carrotsearch.randomizedtesting.RandomizedTest;
1:f5b2ef2: import com.carrotsearch.randomizedtesting.annotations.Repeat;
1:f5b2ef2: import com.carrotsearch.randomizedtesting.annotations.Seed;
1:f5b2ef2: 
1:f5b2ef2: /**
1:f5b2ef2:  * Some randomized tests against Java Util Collections.
1:f5b2ef2:  */
1:f5b2ef2: public class RandomBlasting extends RandomizedTest {
1:f5b2ef2:   private static enum Operation {
1:f5b2ef2:     ADD, REMOVE, CLEAR, INDEXOF, ISEMPTY, SIZE
1:f5b2ef2:   }
1:f5b2ef2: 
1:f5b2ef2:   @Test
1:f5b2ef2:   @Repeat(iterations = 20)
1:58cc1ae:   public void testAgainstReferenceOpenObjectIntHashMap() {
1:02ff22f:     OpenObjectIntHashMap<Integer> base = new OpenObjectIntHashMap<>();
1:02ff22f:     Map<Integer, Integer> reference = new HashMap<>();
1:f5b2ef2: 
1:58cc1ae:     List<Operation> ops = Lists.newArrayList();
1:f5b2ef2:     addOp(ops, Operation.ADD, 60);
1:f5b2ef2:     addOp(ops, Operation.REMOVE, 30);
1:f5b2ef2:     addOp(ops, Operation.INDEXOF, 30);
1:f5b2ef2:     addOp(ops, Operation.CLEAR, 5);
1:f5b2ef2:     addOp(ops, Operation.ISEMPTY, 2);
1:f5b2ef2:     addOp(ops, Operation.SIZE, 2);
1:f5b2ef2: 
1:f5b2ef2:     int max = randomIntBetween(1000, 20000);
1:f5b2ef2:     for (int reps = 0; reps < max; reps++) {
1:f5b2ef2:       // Ensure some collisions among keys.
1:f5b2ef2:       int k = randomIntBetween(0, max / 4);
1:f5b2ef2:       int v = randomInt();
1:f5b2ef2:       switch (randomFrom(ops)) {
1:f5b2ef2:         case ADD:
1:f5b2ef2:           assertEquals(reference.put(k, v) == null, base.put(k, v));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case REMOVE:
1:f5b2ef2:           assertEquals(reference.remove(k) != null, base.removeKey(k));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case INDEXOF:
1:f5b2ef2:           assertEquals(reference.containsKey(k), base.containsKey(k));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case CLEAR:
1:f5b2ef2:           reference.clear();
1:f5b2ef2:           base.clear();
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case ISEMPTY:
1:f5b2ef2:           assertEquals(reference.isEmpty(), base.isEmpty());
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case SIZE:
1:f5b2ef2:           assertEquals(reference.size(), base.size());
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         default:
1:f5b2ef2:           throw new RuntimeException();
1:f5b2ef2:       }
1:f5b2ef2:     }
1:f5b2ef2:   }
1:f5b2ef2: 
1:f5b2ef2:   @Test
1:f5b2ef2:   @Repeat(iterations = 20)
1:58cc1ae:   public void testAgainstReferenceOpenIntObjectHashMap() {
1:02ff22f:     OpenIntObjectHashMap<Integer> base = new OpenIntObjectHashMap<>();
1:02ff22f:     Map<Integer, Integer> reference = new HashMap<>();
1:f5b2ef2: 
1:58cc1ae:     List<Operation> ops = Lists.newArrayList();
1:f5b2ef2:     addOp(ops, Operation.ADD, 60);
1:f5b2ef2:     addOp(ops, Operation.REMOVE, 30);
1:f5b2ef2:     addOp(ops, Operation.INDEXOF, 30);
1:f5b2ef2:     addOp(ops, Operation.CLEAR, 5);
1:f5b2ef2:     addOp(ops, Operation.ISEMPTY, 2);
1:f5b2ef2:     addOp(ops, Operation.SIZE, 2);
1:f5b2ef2: 
1:f5b2ef2:     int max = randomIntBetween(1000, 20000);
1:f5b2ef2:     for (int reps = 0; reps < max; reps++) {
1:f5b2ef2:       // Ensure some collisions among keys.
1:f5b2ef2:       int k = randomIntBetween(0, max / 4);
1:f5b2ef2:       int v = randomInt();
1:f5b2ef2:       switch (randomFrom(ops)) {
1:f5b2ef2:         case ADD:
1:f5b2ef2:           assertEquals(reference.put(k, v) == null, base.put(k, v));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case REMOVE:
1:f5b2ef2:           assertEquals(reference.remove(k) != null, base.removeKey(k));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case INDEXOF:
1:f5b2ef2:           assertEquals(reference.containsKey(k), base.containsKey(k));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case CLEAR:
1:f5b2ef2:           reference.clear();
1:f5b2ef2:           base.clear();
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case ISEMPTY:
1:f5b2ef2:           assertEquals(reference.isEmpty(), base.isEmpty());
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case SIZE:
1:f5b2ef2:           assertEquals(reference.size(), base.size());
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         default:
1:f5b2ef2:           throw new RuntimeException();
1:f5b2ef2:       }
1:f5b2ef2:     }
1:f5b2ef2:   }
1:f5b2ef2: 
1:f5b2ef2:   @Test
1:f5b2ef2:   @Repeat(iterations = 20)
1:58cc1ae:   public void testAgainstReferenceOpenIntIntHashMap() {
1:f5b2ef2:     OpenIntIntHashMap base = new OpenIntIntHashMap();
1:02ff22f:     HashMap<Integer, Integer> reference = new HashMap<>();
1:f5b2ef2: 
1:58cc1ae:     List<Operation> ops = Lists.newArrayList();
1:f5b2ef2:     addOp(ops, Operation.ADD, 60);
1:f5b2ef2:     addOp(ops, Operation.REMOVE, 30);
1:f5b2ef2:     addOp(ops, Operation.INDEXOF, 30);
1:f5b2ef2:     addOp(ops, Operation.CLEAR, 5);
1:f5b2ef2:     addOp(ops, Operation.ISEMPTY, 2);
1:f5b2ef2:     addOp(ops, Operation.SIZE, 2);
1:f5b2ef2: 
1:f5b2ef2:     int max = randomIntBetween(1000, 20000);
1:f5b2ef2:     for (int reps = 0; reps < max; reps++) {
1:f5b2ef2:       // Ensure some collisions among keys.
1:f5b2ef2:       int k = randomIntBetween(0, max / 4);
1:f5b2ef2:       int v = randomInt();
1:f5b2ef2:       switch (randomFrom(ops)) {
1:f5b2ef2:         case ADD:
1:f5b2ef2:           Integer prevValue = reference.put(k, v);
1:f5b2ef2: 
1:f5b2ef2:           if (prevValue == null) {
1:f5b2ef2:             assertEquals(true, base.put(k, v));
1:f5b2ef2:           } else {
1:f5b2ef2:             assertEquals(prevValue.intValue(), base.get(k));
1:f5b2ef2:             assertEquals(false, base.put(k, v));
1:f5b2ef2:           }
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case REMOVE:
1:f5b2ef2:           assertEquals(reference.containsKey(k), base.containsKey(k));
1:f5b2ef2: 
1:f5b2ef2:           Integer removed = reference.remove(k);
1:f5b2ef2:           if (removed == null) {
1:f5b2ef2:             assertEquals(false, base.removeKey(k));
1:f5b2ef2:           } else {
1:f5b2ef2:             assertEquals(removed.intValue(), base.get(k));
1:f5b2ef2:             assertEquals(true, base.removeKey(k));
1:f5b2ef2:           }
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case INDEXOF:
1:f5b2ef2:           assertEquals(reference.containsKey(k), base.containsKey(k));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case CLEAR:
1:f5b2ef2:           reference.clear();
1:f5b2ef2:           base.clear();
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case ISEMPTY:
1:f5b2ef2:           assertEquals(reference.isEmpty(), base.isEmpty());
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case SIZE:
1:f5b2ef2:           assertEquals(reference.size(), base.size());
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         default:
1:f5b2ef2:           throw new RuntimeException();
1:f5b2ef2:       }
1:f5b2ef2:     }
1:f5b2ef2:   }
1:f5b2ef2: 
1:f5b2ef2:   @Test
1:f5b2ef2:   @Repeat(iterations = 20)
1:58cc1ae:   public void testAgainstReferenceOpenIntHashSet() {
1:f5b2ef2:     AbstractIntSet base = new OpenIntHashSet();
1:58cc1ae:     HashSet<Integer> reference = Sets.newHashSet();
1:f5b2ef2: 
1:58cc1ae:     List<Operation> ops = Lists.newArrayList();
1:f5b2ef2:     addOp(ops, Operation.ADD, 60);
1:f5b2ef2:     addOp(ops, Operation.REMOVE, 30);
1:f5b2ef2:     addOp(ops, Operation.INDEXOF, 30);
1:f5b2ef2:     addOp(ops, Operation.CLEAR, 5);
1:f5b2ef2:     addOp(ops, Operation.ISEMPTY, 2);
1:f5b2ef2:     addOp(ops, Operation.SIZE, 2);
1:f5b2ef2: 
1:f5b2ef2:     int max = randomIntBetween(1000, 20000);
1:f5b2ef2:     for (int reps = 0; reps < max; reps++) {
1:f5b2ef2:       // Ensure some collisions among keys.
1:f5b2ef2:       int k = randomIntBetween(0, max / 4);
1:f5b2ef2:       switch (randomFrom(ops)) {
1:f5b2ef2:         case ADD:
1:f5b2ef2:           assertEquals(reference.add(k), base.add(k));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case REMOVE:
1:f5b2ef2:           assertEquals(reference.remove(k), base.remove(k));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case INDEXOF:
1:f5b2ef2:           assertEquals(reference.contains(k), base.contains(k));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case CLEAR:
1:f5b2ef2:           reference.clear();
1:f5b2ef2:           base.clear();
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case ISEMPTY:
1:f5b2ef2:           assertEquals(reference.isEmpty(), base.isEmpty());
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case SIZE:
1:f5b2ef2:           assertEquals(reference.size(), base.size());
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         default:
1:f5b2ef2:           throw new RuntimeException();
1:f5b2ef2:       }
1:f5b2ef2:     }
1:f5b2ef2:   }
1:f5b2ef2: 
1:f5b2ef2:   @Seed("deadbeef")
1:f5b2ef2:   @Test
1:f5b2ef2:   @Repeat(iterations = 20)
1:58cc1ae:   public void testAgainstReferenceOpenHashSet() {
1:02ff22f:     Set<Integer> base = new OpenHashSet<>();
1:58cc1ae:     Set<Integer> reference = Sets.newHashSet();
1:f5b2ef2: 
1:58cc1ae:     List<Operation> ops = Lists.newArrayList();
1:f5b2ef2:     addOp(ops, Operation.ADD, 60);
1:f5b2ef2:     addOp(ops, Operation.REMOVE, 30);
1:f5b2ef2:     addOp(ops, Operation.INDEXOF, 30);
1:f5b2ef2:     addOp(ops, Operation.CLEAR, 5);
1:f5b2ef2:     addOp(ops, Operation.ISEMPTY, 2);
1:f5b2ef2:     addOp(ops, Operation.SIZE, 2);
1:f5b2ef2: 
1:f5b2ef2:     int max = randomIntBetween(1000, 20000);
1:f5b2ef2:     for (int reps = 0; reps < max; reps++) {
1:f5b2ef2:       // Ensure some collisions among keys.
1:f5b2ef2:       int k = randomIntBetween(0, max / 4);
1:f5b2ef2:       switch (randomFrom(ops)) {
1:f5b2ef2:         case ADD:
1:f5b2ef2:           assertEquals(reference.contains(k), base.contains(k));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case REMOVE:
1:f5b2ef2:           assertEquals(reference.remove(k), base.remove(k));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case INDEXOF:
1:f5b2ef2:           assertEquals(reference.contains(k), base.contains(k));
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case CLEAR:
1:f5b2ef2:           reference.clear();
1:f5b2ef2:           base.clear();
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case ISEMPTY:
1:f5b2ef2:           assertEquals(reference.isEmpty(), base.isEmpty());
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         case SIZE:
1:f5b2ef2:           assertEquals(reference.size(), base.size());
1:f5b2ef2:           break;
1:f5b2ef2: 
1:f5b2ef2:         default:
1:f5b2ef2:           throw new RuntimeException();
1:f5b2ef2:       }
1:f5b2ef2:     }
1:f5b2ef2:   }
1:f5b2ef2: 
1:f5b2ef2:   /**
1:f5b2ef2:    * @see "https://issues.apache.org/jira/browse/MAHOUT-1225"
1:f5b2ef2:    */
1:f5b2ef2:   @Test
1:f5b2ef2:   public void testMahout1225() {
1:f5b2ef2:     AbstractIntSet s = new OpenIntHashSet();
1:f5b2ef2:     s.clear();
1:f5b2ef2:     s.add(23);
1:f5b2ef2:     s.add(46);
1:f5b2ef2:     s.clear();
1:f5b2ef2:     s.add(70);
1:f5b2ef2:     s.add(93);
1:f5b2ef2:     s.contains(100);
1:f5b2ef2:   }
1:f5b2ef2: 
1:f5b2ef2:   /** */
1:f5b2ef2:   @Test
1:f5b2ef2:   public void testClearTable() throws Exception {
1:02ff22f:     OpenObjectIntHashMap<Integer> m = new OpenObjectIntHashMap<>();
1:f5b2ef2:     m.clear(); // rehash from the default capacity to the next prime after 1 (3).
1:f5b2ef2:     m.put(1, 2);
1:f5b2ef2:     m.clear(); // Should clear internal references.
1:f5b2ef2: 
1:f5b2ef2:     Field tableField = m.getClass().getDeclaredField("table");
1:f5b2ef2:     tableField.setAccessible(true);
1:f5b2ef2:     Object[] table = (Object[]) tableField.get(m);
1:f5b2ef2: 
1:58cc1ae:     assertEquals(Sets.newHashSet(Arrays.asList(new Object[] {null})), Sets.newHashSet(Arrays.asList(table)));
1:f5b2ef2:   }
1:f5b2ef2: 
1:f5b2ef2:   /** Add multiple repetitions of op to the list. */
1:f5b2ef2:   private static void addOp(List<Operation> ops, Operation op, int reps) {
1:f5b2ef2:     for (int i = 0; i < reps; i++) {
1:f5b2ef2:       ops.add(op);
1:f5b2ef2:     }
1:f5b2ef2:   }
1:f5b2ef2: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     OpenObjectIntHashMap<Integer> base = new OpenObjectIntHashMap<>();
1:     Map<Integer, Integer> reference = new HashMap<>();
/////////////////////////////////////////////////////////////////////////
1:     OpenIntObjectHashMap<Integer> base = new OpenIntObjectHashMap<>();
1:     Map<Integer, Integer> reference = new HashMap<>();
/////////////////////////////////////////////////////////////////////////
1:     HashMap<Integer, Integer> reference = new HashMap<>();
/////////////////////////////////////////////////////////////////////////
1:     Set<Integer> base = new OpenHashSet<>();
/////////////////////////////////////////////////////////////////////////
1:     OpenObjectIntHashMap<Integer> m = new OpenObjectIntHashMap<>();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     Map<Integer, Integer> reference = new HashMap<Integer, Integer>();
/////////////////////////////////////////////////////////////////////////
0:     Map<Integer, Integer> reference = new HashMap<Integer, Integer>();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
1:   public void testAgainstReferenceOpenObjectIntHashMap() {
1:     List<Operation> ops = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:   public void testAgainstReferenceOpenIntObjectHashMap() {
1:     List<Operation> ops = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:   public void testAgainstReferenceOpenIntIntHashMap() {
1:     List<Operation> ops = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:   public void testAgainstReferenceOpenIntHashSet() {
1:     HashSet<Integer> reference = Sets.newHashSet();
1:     List<Operation> ops = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:   public void testAgainstReferenceOpenHashSet() {
1:     Set<Integer> reference = Sets.newHashSet();
1:     List<Operation> ops = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(Sets.newHashSet(Arrays.asList(new Object[] {null})), Sets.newHashSet(Arrays.asList(table)));
author:Robin Anil
-------------------------------------------------------------------------------
commit:f5b2ef2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.randomized;
1: 
1: import java.lang.reflect.Field;
0: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.mahout.math.map.OpenIntIntHashMap;
1: import org.apache.mahout.math.map.OpenIntObjectHashMap;
1: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1: import org.apache.mahout.math.set.AbstractIntSet;
1: import org.apache.mahout.math.set.OpenHashSet;
1: import org.apache.mahout.math.set.OpenIntHashSet;
1: import org.junit.Test;
1: 
1: import com.carrotsearch.randomizedtesting.RandomizedTest;
1: import com.carrotsearch.randomizedtesting.annotations.Repeat;
1: import com.carrotsearch.randomizedtesting.annotations.Seed;
1: 
1: /**
1:  * Some randomized tests against Java Util Collections.
1:  */
1: public class RandomBlasting extends RandomizedTest {
1:   private static enum Operation {
1:     ADD, REMOVE, CLEAR, INDEXOF, ISEMPTY, SIZE
1:   }
1: 
1:   @Test
1:   @Repeat(iterations = 20)
0:   public void testAgainstReference_OpenObjectIntHashMap() {
0:     OpenObjectIntHashMap<Integer> base = new OpenObjectIntHashMap<Integer>();
0:     HashMap<Integer, Integer> reference = new HashMap<Integer, Integer>();
1: 
0:     List<Operation> ops = new ArrayList<Operation>();
1:     addOp(ops, Operation.ADD, 60);
1:     addOp(ops, Operation.REMOVE, 30);
1:     addOp(ops, Operation.INDEXOF, 30);
1:     addOp(ops, Operation.CLEAR, 5);
1:     addOp(ops, Operation.ISEMPTY, 2);
1:     addOp(ops, Operation.SIZE, 2);
1: 
1:     int max = randomIntBetween(1000, 20000);
1:     for (int reps = 0; reps < max; reps++) {
1:       // Ensure some collisions among keys.
1:       int k = randomIntBetween(0, max / 4);
1:       int v = randomInt();
1:       switch (randomFrom(ops)) {
1:         case ADD:
1:           assertEquals(reference.put(k, v) == null, base.put(k, v));
1:           break;
1: 
1:         case REMOVE:
1:           assertEquals(reference.remove(k) != null, base.removeKey(k));
1:           break;
1: 
1:         case INDEXOF:
1:           assertEquals(reference.containsKey(k), base.containsKey(k));
1:           break;
1: 
1:         case CLEAR:
1:           reference.clear();
1:           base.clear();
1:           break;
1: 
1:         case ISEMPTY:
1:           assertEquals(reference.isEmpty(), base.isEmpty());
1:           break;
1: 
1:         case SIZE:
1:           assertEquals(reference.size(), base.size());
1:           break;
1: 
1:         default:
1:           throw new RuntimeException();
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   @Repeat(iterations = 20)
0:   public void testAgainstReference_OpenIntObjectHashMap() {
0:     OpenIntObjectHashMap<Integer> base = new OpenIntObjectHashMap<Integer>();
0:     HashMap<Integer, Integer> reference = new HashMap<Integer, Integer>();
1: 
0:     List<Operation> ops = new ArrayList<Operation>();
1:     addOp(ops, Operation.ADD, 60);
1:     addOp(ops, Operation.REMOVE, 30);
1:     addOp(ops, Operation.INDEXOF, 30);
1:     addOp(ops, Operation.CLEAR, 5);
1:     addOp(ops, Operation.ISEMPTY, 2);
1:     addOp(ops, Operation.SIZE, 2);
1: 
1:     int max = randomIntBetween(1000, 20000);
1:     for (int reps = 0; reps < max; reps++) {
1:       // Ensure some collisions among keys.
1:       int k = randomIntBetween(0, max / 4);
1:       int v = randomInt();
1:       switch (randomFrom(ops)) {
1:         case ADD:
1:           assertEquals(reference.put(k, v) == null, base.put(k, v));
1:           break;
1: 
1:         case REMOVE:
1:           assertEquals(reference.remove(k) != null, base.removeKey(k));
1:           break;
1: 
1:         case INDEXOF:
1:           assertEquals(reference.containsKey(k), base.containsKey(k));
1:           break;
1: 
1:         case CLEAR:
1:           reference.clear();
1:           base.clear();
1:           break;
1: 
1:         case ISEMPTY:
1:           assertEquals(reference.isEmpty(), base.isEmpty());
1:           break;
1: 
1:         case SIZE:
1:           assertEquals(reference.size(), base.size());
1:           break;
1: 
1:         default:
1:           throw new RuntimeException();
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   @Repeat(iterations = 20)
0:   public void testAgainstReference_OpenIntIntHashMap() {
1:     OpenIntIntHashMap base = new OpenIntIntHashMap();
0:     HashMap<Integer, Integer> reference = new HashMap<Integer, Integer>();
1: 
0:     List<Operation> ops = new ArrayList<Operation>();
1:     addOp(ops, Operation.ADD, 60);
1:     addOp(ops, Operation.REMOVE, 30);
1:     addOp(ops, Operation.INDEXOF, 30);
1:     addOp(ops, Operation.CLEAR, 5);
1:     addOp(ops, Operation.ISEMPTY, 2);
1:     addOp(ops, Operation.SIZE, 2);
1: 
1:     int max = randomIntBetween(1000, 20000);
1:     for (int reps = 0; reps < max; reps++) {
1:       // Ensure some collisions among keys.
1:       int k = randomIntBetween(0, max / 4);
1:       int v = randomInt();
1:       switch (randomFrom(ops)) {
1:         case ADD:
1:           Integer prevValue = reference.put(k, v);
1: 
1:           if (prevValue == null) {
1:             assertEquals(true, base.put(k, v));
1:           } else {
1:             assertEquals(prevValue.intValue(), base.get(k));
1:             assertEquals(false, base.put(k, v));
1:           }
1:           break;
1: 
1:         case REMOVE:
1:           assertEquals(reference.containsKey(k), base.containsKey(k));
1: 
1:           Integer removed = reference.remove(k);
1:           if (removed == null) {
1:             assertEquals(false, base.removeKey(k));
1:           } else {
1:             assertEquals(removed.intValue(), base.get(k));
1:             assertEquals(true, base.removeKey(k));
1:           }
1:           break;
1: 
1:         case INDEXOF:
1:           assertEquals(reference.containsKey(k), base.containsKey(k));
1:           break;
1: 
1:         case CLEAR:
1:           reference.clear();
1:           base.clear();
1:           break;
1: 
1:         case ISEMPTY:
1:           assertEquals(reference.isEmpty(), base.isEmpty());
1:           break;
1: 
1:         case SIZE:
1:           assertEquals(reference.size(), base.size());
1:           break;
1: 
1:         default:
1:           throw new RuntimeException();
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   @Repeat(iterations = 20)
0:   public void testAgainstReference_OpenIntHashSet() {
1:     AbstractIntSet base = new OpenIntHashSet();
0:     HashSet<Integer> reference = new HashSet<Integer>();
1: 
0:     List<Operation> ops = new ArrayList<Operation>();
1:     addOp(ops, Operation.ADD, 60);
1:     addOp(ops, Operation.REMOVE, 30);
1:     addOp(ops, Operation.INDEXOF, 30);
1:     addOp(ops, Operation.CLEAR, 5);
1:     addOp(ops, Operation.ISEMPTY, 2);
1:     addOp(ops, Operation.SIZE, 2);
1: 
1:     int max = randomIntBetween(1000, 20000);
1:     for (int reps = 0; reps < max; reps++) {
1:       // Ensure some collisions among keys.
1:       int k = randomIntBetween(0, max / 4);
1:       switch (randomFrom(ops)) {
1:         case ADD:
1:           assertEquals(reference.add(k), base.add(k));
1:           break;
1: 
1:         case REMOVE:
1:           assertEquals(reference.remove(k), base.remove(k));
1:           break;
1: 
1:         case INDEXOF:
1:           assertEquals(reference.contains(k), base.contains(k));
1:           break;
1: 
1:         case CLEAR:
1:           reference.clear();
1:           base.clear();
1:           break;
1: 
1:         case ISEMPTY:
1:           assertEquals(reference.isEmpty(), base.isEmpty());
1:           break;
1: 
1:         case SIZE:
1:           assertEquals(reference.size(), base.size());
1:           break;
1: 
1:         default:
1:           throw new RuntimeException();
1:       }
1:     }
1:   }
1: 
1:   @Seed("deadbeef")
1:   @Test
1:   @Repeat(iterations = 20)
0:   public void testAgainstReference_OpenHashSet() {
0:     Set<Integer> base = new OpenHashSet<Integer>();
0:     Set<Integer> reference = new HashSet<Integer>();
1: 
0:     List<Operation> ops = new ArrayList<Operation>();
1:     addOp(ops, Operation.ADD, 60);
1:     addOp(ops, Operation.REMOVE, 30);
1:     addOp(ops, Operation.INDEXOF, 30);
1:     addOp(ops, Operation.CLEAR, 5);
1:     addOp(ops, Operation.ISEMPTY, 2);
1:     addOp(ops, Operation.SIZE, 2);
1: 
1:     int max = randomIntBetween(1000, 20000);
1:     for (int reps = 0; reps < max; reps++) {
1:       // Ensure some collisions among keys.
1:       int k = randomIntBetween(0, max / 4);
1:       switch (randomFrom(ops)) {
1:         case ADD:
1:           assertEquals(reference.contains(k), base.contains(k));
1:           break;
1: 
1:         case REMOVE:
1:           assertEquals(reference.remove(k), base.remove(k));
1:           break;
1: 
1:         case INDEXOF:
1:           assertEquals(reference.contains(k), base.contains(k));
1:           break;
1: 
1:         case CLEAR:
1:           reference.clear();
1:           base.clear();
1:           break;
1: 
1:         case ISEMPTY:
1:           assertEquals(reference.isEmpty(), base.isEmpty());
1:           break;
1: 
1:         case SIZE:
1:           assertEquals(reference.size(), base.size());
1:           break;
1: 
1:         default:
1:           throw new RuntimeException();
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * @see "https://issues.apache.org/jira/browse/MAHOUT-1225"
1:    */
1:   @Test
1:   public void testMahout1225() {
1:     AbstractIntSet s = new OpenIntHashSet();
1:     s.clear();
1:     s.add(23);
1:     s.add(46);
1:     s.clear();
1:     s.add(70);
1:     s.add(93);
1:     s.contains(100);
1:   }
1: 
1:   /** */
1:   @Test
1:   public void testClearTable() throws Exception {
0:     OpenObjectIntHashMap<Integer> m = new OpenObjectIntHashMap<Integer>();
1:     m.clear(); // rehash from the default capacity to the next prime after 1 (3).
1:     m.put(1, 2);
1:     m.clear(); // Should clear internal references.
1: 
1:     Field tableField = m.getClass().getDeclaredField("table");
1:     tableField.setAccessible(true);
1:     Object[] table = (Object[]) tableField.get(m);
1: 
0:     assertEquals(new HashSet<Object>(Arrays.asList(new Object[] {null})), new HashSet<Object>(
0:         Arrays.asList(table)));
1:   }
1: 
1:   /** Add multiple repetitions of op to the list. */
1:   private static void addOp(List<Operation> ops, Operation op, int reps) {
1:     for (int i = 0; i < reps; i++) {
1:       ops.add(op);
1:     }
1:   }
1: }
============================================================================