1:17988ce: /**
1:17988ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:17988ce:  * contributor license agreements.  See the NOTICE file distributed with
1:17988ce:  * this work for additional information regarding copyright ownership.
1:17988ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:17988ce:  * (the "License"); you may not use this file except in compliance with
1:17988ce:  * the License.  You may obtain a copy of the License at
1:17988ce:  *
1:17988ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:17988ce:  *
1:17988ce:  * Unless required by applicable law or agreed to in writing, software
1:17988ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:17988ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:17988ce:  * See the License for the specific language governing permissions and
1:17988ce:  * limitations under the License.
1:17988ce:  */
3:17988ce: 
1:17988ce: package org.apache.mahout.cf.taste.example.kddcup;
1:17988ce: 
1:4ef9d31: import org.apache.commons.io.Charsets;
1:4ef9d31: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:4ef9d31: import org.apache.mahout.common.Pair;
1:4ef9d31: 
1:17988ce: import java.io.BufferedWriter;
1:17988ce: import java.io.File;
1:17988ce: import java.io.FileOutputStream;
1:17988ce: import java.io.OutputStream;
1:17988ce: import java.io.OutputStreamWriter;
1:17988ce: import java.io.Writer;
1:17988ce: import java.util.zip.GZIPOutputStream;
1:17988ce: 
1:17988ce: /**
1:17988ce:  * <p>This class converts a KDD Cup input file into a compressed CSV format. The output format is
1:39fe224:  * {@code userID,itemID,score,timestamp}. It can optionally restrict its output to exclude
1:17988ce:  * score and/or timestamp.</p>
1:17988ce:  *
1:39fe224:  * <p>Run as: {@code ToCSV (input file) (output file) [num columns to output]}</p>
1:17988ce:  */
1:17988ce: public final class ToCSV {
1:17988ce: 
1:17988ce:   private ToCSV() {
2:17988ce:   }
1:17988ce: 
1:17988ce:   public static void main(String[] args) throws Exception {
1:17988ce: 
1:17988ce:     File inputFile = new File(args[0]);
1:17988ce:     File outputFile = new File(args[1]);
1:17988ce:     int columnsToOutput = 4;
1:17988ce:     if (args.length >= 3) {
1:17988ce:       columnsToOutput = Integer.parseInt(args[2]);
1:17988ce:     }
1:17988ce: 
1:17988ce:     OutputStream outStream = new GZIPOutputStream(new FileOutputStream(outputFile));
1:17988ce: 
1:4ef9d31:     try (Writer outWriter = new BufferedWriter(new OutputStreamWriter(outStream, Charsets.UTF_8))){
1:d608a88:       for (Pair<PreferenceArray,long[]> user : new DataFileIterable(inputFile)) {
1:d608a88:         PreferenceArray prefs = user.getFirst();
1:d608a88:         long[] timestamps = user.getSecond();
1:d608a88:         for (int i = 0; i < prefs.length(); i++) {
1:d608a88:           outWriter.write(String.valueOf(prefs.getUserID(i)));
3:17988ce:           outWriter.write(',');
1:d608a88:           outWriter.write(String.valueOf(prefs.getItemID(i)));
1:d608a88:           if (columnsToOutput > 2) {
1:d608a88:             outWriter.write(',');
1:d608a88:             outWriter.write(String.valueOf(prefs.getValue(i)));
1:d608a88:           }
1:d608a88:           if (columnsToOutput > 3) {
1:d608a88:             outWriter.write(',');
1:d608a88:             outWriter.write(String.valueOf(timestamps[i]));
1:d608a88:           }
1:d608a88:           outWriter.write('\n');
1:17988ce:         }
1:17988ce:       }
1:17988ce:     }
1:17988ce:   }
1:17988ce: 
1:17988ce: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.common.Pair;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     try (Writer outWriter = new BufferedWriter(new OutputStreamWriter(outStream, Charsets.UTF_8))){
/////////////////////////////////////////////////////////////////////////
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(outWriter, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(outWriter, true);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d608a88
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:     try {
1:       for (Pair<PreferenceArray,long[]> user : new DataFileIterable(inputFile)) {
1:         PreferenceArray prefs = user.getFirst();
1:         long[] timestamps = user.getSecond();
1:         for (int i = 0; i < prefs.length(); i++) {
1:           outWriter.write(String.valueOf(prefs.getUserID(i)));
1:           outWriter.write(String.valueOf(prefs.getItemID(i)));
1:           if (columnsToOutput > 2) {
1:             outWriter.write(',');
1:             outWriter.write(String.valueOf(prefs.getValue(i)));
1:           }
1:           if (columnsToOutput > 3) {
1:             outWriter.write(',');
1:             outWriter.write(String.valueOf(timestamps[i]));
1:           }
1:           outWriter.write('\n');
0:     } finally {
0:       Closeables.closeQuietly(outWriter);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:  * {@code userID,itemID,score,timestamp}. It can optionally restrict its output to exclude
1:  * <p>Run as: {@code ToCSV (input file) (output file) [num columns to output]}</p>
commit:80366ee
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
0:     Writer outWriter = new BufferedWriter(new OutputStreamWriter(outStream, Charsets.UTF_8));
commit:17988ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup;
1: 
1: import java.io.BufferedWriter;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.OutputStream;
1: import java.io.OutputStreamWriter;
1: import java.io.Writer;
0: import java.nio.charset.Charset;
1: import java.util.zip.GZIPOutputStream;
1: 
1: 
0: import org.apache.mahout.cf.taste.model.PreferenceArray;
0: import org.apache.mahout.common.Pair;
1: 
1: /**
1:  * <p>This class converts a KDD Cup input file into a compressed CSV format. The output format is
0:  * <code>userID,itemID,score,timestamp</code>. It can optionally restrict its output to exclude
1:  * score and/or timestamp.</p>
1:  *
0:  * <p>Run as: <code>ToCSV (input file) (output file) [num columns to output]</p>
1:  */
1: public final class ToCSV {
1: 
1:   private ToCSV() {
1:   }
1: 
1:   public static void main(String[] args) throws Exception {
1: 
1:     File inputFile = new File(args[0]);
1:     File outputFile = new File(args[1]);
1:     int columnsToOutput = 4;
1:     if (args.length >= 3) {
1:       columnsToOutput = Integer.parseInt(args[2]);
1:     }
1: 
1:     OutputStream outStream = new GZIPOutputStream(new FileOutputStream(outputFile));
0:     Writer outWriter = new BufferedWriter(new OutputStreamWriter(outStream, Charset.forName("UTF-8")));
1: 
0:     for (Pair<PreferenceArray,long[]> user : new DataFileIterable(inputFile)) {
0:       PreferenceArray prefs = user.getFirst();
0:       long[] timestamps = user.getSecond();
0:       for (int i = 0; i < prefs.length(); i++) {
0:         outWriter.write(String.valueOf(prefs.getUserID(i)));
1:         outWriter.write(',');
0:         outWriter.write(String.valueOf(prefs.getItemID(i)));
0:         if (columnsToOutput > 2) {
1:           outWriter.write(',');
0:           outWriter.write(String.valueOf(prefs.getValue(i)));
1:         }
0:         if (columnsToOutput > 3) {
1:           outWriter.write(',');
0:           outWriter.write(String.valueOf(timestamps[i]));
1:         }
0:         outWriter.write('\n');
1:       }
1:     }
0:     outWriter.flush();
0:     outWriter.close();
1:   }
1: 
1: }
============================================================================