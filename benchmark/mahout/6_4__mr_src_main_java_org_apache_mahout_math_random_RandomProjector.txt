1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:8649ac2: package org.apache.mahout.math.random;
1:8649ac2: 
1:8649ac2: import java.util.List;
1:8649ac2: 
1:8649ac2: import com.google.common.collect.Lists;
1:8649ac2: import org.apache.commons.lang.math.RandomUtils;
1:8649ac2: import org.apache.mahout.math.DenseMatrix;
1:8649ac2: import org.apache.mahout.math.DenseVector;
1:8649ac2: import org.apache.mahout.math.Matrix;
1:8649ac2: import org.apache.mahout.math.MatrixSlice;
1:8649ac2: import org.apache.mahout.math.Vector;
1:8649ac2: import org.apache.mahout.math.function.DoubleFunction;
1:8649ac2: 
1:4ca6b86: public final class RandomProjector {
1:4ca6b86:   private RandomProjector() {
1:4ca6b86:   }
1:4ca6b86: 
1:8649ac2:   /**
1:8649ac2:    * Generates a basis matrix of size projectedVectorSize x vectorSize. Multiplying a a vector by
1:8649ac2:    * this matrix results in the projected vector.
1:8649ac2:    *
1:8649ac2:    * The rows of the matrix are sampled from a multi normal distribution.
1:8649ac2:    *
1:8649ac2:    * @param projectedVectorSize final projected size of a vector (number of projection vectors)
1:8649ac2:    * @param vectorSize initial vector size
1:8649ac2:    * @return a projection matrix
1:8649ac2:    */
1:8649ac2:   public static Matrix generateBasisNormal(int projectedVectorSize, int vectorSize) {
1:8649ac2:     Matrix basisMatrix = new DenseMatrix(projectedVectorSize, vectorSize);
1:8649ac2:     basisMatrix.assign(new Normal());
1:8649ac2:     for (MatrixSlice row : basisMatrix) {
1:8649ac2:       row.vector().assign(row.normalize());
1:8649ac2:     }
1:8649ac2:     return basisMatrix;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Generates a basis matrix of size projectedVectorSize x vectorSize. Multiplying a a vector by
1:8649ac2:    * this matrix results in the projected vector.
1:8649ac2:    *
1:8649ac2:    * The rows of a matrix are sample from a distribution where:
1:8649ac2:    * - +1 has probability 1/2,
1:8649ac2:    * - -1 has probability 1/2
1:8649ac2:    *
1:8649ac2:    * See Achlioptas, D. (2003). Database-friendly random projections: Johnson-Lindenstrauss with binary coins.
1:8649ac2:    * Journal of Computer and System Sciences, 66(4), 671â€?687. doi:10.1016/S0022-0000(03)00025-4
1:8649ac2:    *
1:8649ac2:    * @param projectedVectorSize final projected size of a vector (number of projection vectors)
1:8649ac2:    * @param vectorSize initial vector size
1:8649ac2:    * @return a projection matrix
1:8649ac2:    */
1:8649ac2:   public static Matrix generateBasisPlusMinusOne(int projectedVectorSize, int vectorSize) {
1:8649ac2:     Matrix basisMatrix = new DenseMatrix(projectedVectorSize, vectorSize);
1:8649ac2:     for (int i = 0; i < projectedVectorSize; ++i) {
1:8649ac2:       for (int j = 0; j < vectorSize; ++j) {
1:4ca6b86:         basisMatrix.set(i, j, RandomUtils.nextInt(2) == 0 ? 1 : -1);
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2:     for (MatrixSlice row : basisMatrix) {
1:8649ac2:       row.vector().assign(row.normalize());
1:8649ac2:     }
1:8649ac2:     return basisMatrix;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Generates a basis matrix of size projectedVectorSize x vectorSize. Multiplying a a vector by
1:8649ac2:    * this matrix results in the projected vector.
1:8649ac2:    *
1:8649ac2:    * The rows of a matrix are sample from a distribution where:
1:8649ac2:    * - 0 has probability 2/3,
1:8649ac2:    * - +1 has probability 1/6,
1:8649ac2:    * - -1 has probability 1/6
1:8649ac2:    *
1:8649ac2:    * See Achlioptas, D. (2003). Database-friendly random projections: Johnson-Lindenstrauss with binary coins.
1:8649ac2:    * Journal of Computer and System Sciences, 66(4), 671â€?687. doi:10.1016/S0022-0000(03)00025-4
1:8649ac2:    *
1:8649ac2:    * @param projectedVectorSize final projected size of a vector (number of projection vectors)
1:8649ac2:    * @param vectorSize initial vector size
1:8649ac2:    * @return a projection matrix
1:8649ac2:    */
1:8649ac2:   public static Matrix generateBasisZeroPlusMinusOne(int projectedVectorSize, int vectorSize) {
1:8649ac2:     Matrix basisMatrix = new DenseMatrix(projectedVectorSize, vectorSize);
1:87c15be:     Multinomial<Double> choice = new Multinomial<>();
1:58cc1ae:     choice.add(0.0, 2 / 3.0);
1:4ca6b86:     choice.add(Math.sqrt(3.0), 1 / 6.0);
1:8649ac2:     choice.add(-Math.sqrt(3.0), 1 / 6.0);
1:8649ac2:     for (int i = 0; i < projectedVectorSize; ++i) {
1:8649ac2:       for (int j = 0; j < vectorSize; ++j) {
1:8649ac2:         basisMatrix.set(i, j, choice.sample());
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2:     for (MatrixSlice row : basisMatrix) {
1:8649ac2:       row.vector().assign(row.normalize());
1:8649ac2:     }
1:8649ac2:     return basisMatrix;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Generates a list of projectedVectorSize vectors, each of size vectorSize. This looks like a
1:8649ac2:    * matrix of size (projectedVectorSize, vectorSize).
1:8649ac2:    * @param projectedVectorSize final projected size of a vector (number of projection vectors)
1:8649ac2:    * @param vectorSize initial vector size
1:8649ac2:    * @return a list of projection vectors
1:8649ac2:    */
1:8649ac2:   public static List<Vector> generateVectorBasis(int projectedVectorSize, int vectorSize) {
1:4ca6b86:     DoubleFunction random = new Normal();
1:8649ac2:     List<Vector> basisVectors = Lists.newArrayList();
1:8649ac2:     for (int i = 0; i < projectedVectorSize; ++i) {
1:8649ac2:       Vector basisVector = new DenseVector(vectorSize);
1:8649ac2:       basisVector.assign(random);
1:8649ac2:       basisVector.normalize();
1:8649ac2:       basisVectors.add(basisVector);
1:8649ac2:     }
1:8649ac2:     return basisVectors;
1:8649ac2:   }
1:8649ac2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     Multinomial<Double> choice = new Multinomial<>();
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1: public final class RandomProjector {
1:   private RandomProjector() {
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:         basisMatrix.set(i, j, RandomUtils.nextInt(2) == 0 ? 1 : -1);
/////////////////////////////////////////////////////////////////////////
1:     choice.add(Math.sqrt(3.0), 1 / 6.0);
/////////////////////////////////////////////////////////////////////////
1:     DoubleFunction random = new Normal();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1:     choice.add(0.0, 2 / 3.0);
author:dfilimon
-------------------------------------------------------------------------------
commit:8649ac2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.random;
1: 
1: import java.util.List;
1: 
1: import com.google.common.collect.Lists;
1: import org.apache.commons.lang.math.RandomUtils;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.MatrixSlice;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.DoubleFunction;
1: 
0: public class RandomProjector {
1:   /**
1:    * Generates a basis matrix of size projectedVectorSize x vectorSize. Multiplying a a vector by
1:    * this matrix results in the projected vector.
1:    *
1:    * The rows of the matrix are sampled from a multi normal distribution.
1:    *
1:    * @param projectedVectorSize final projected size of a vector (number of projection vectors)
1:    * @param vectorSize initial vector size
1:    * @return a projection matrix
1:    */
1:   public static Matrix generateBasisNormal(int projectedVectorSize, int vectorSize) {
1:     Matrix basisMatrix = new DenseMatrix(projectedVectorSize, vectorSize);
1:     basisMatrix.assign(new Normal());
1:     for (MatrixSlice row : basisMatrix) {
1:       row.vector().assign(row.normalize());
1:     }
1:     return basisMatrix;
1:   }
1: 
1:   /**
1:    * Generates a basis matrix of size projectedVectorSize x vectorSize. Multiplying a a vector by
1:    * this matrix results in the projected vector.
1:    *
1:    * The rows of a matrix are sample from a distribution where:
1:    * - +1 has probability 1/2,
1:    * - -1 has probability 1/2
1:    *
1:    * See Achlioptas, D. (2003). Database-friendly random projections: Johnson-Lindenstrauss with binary coins.
1:    * Journal of Computer and System Sciences, 66(4), 671â€?687. doi:10.1016/S0022-0000(03)00025-4
1:    *
1:    * @param projectedVectorSize final projected size of a vector (number of projection vectors)
1:    * @param vectorSize initial vector size
1:    * @return a projection matrix
1:    */
1:   public static Matrix generateBasisPlusMinusOne(int projectedVectorSize, int vectorSize) {
1:     Matrix basisMatrix = new DenseMatrix(projectedVectorSize, vectorSize);
1:     for (int i = 0; i < projectedVectorSize; ++i) {
1:       for (int j = 0; j < vectorSize; ++j) {
0:         basisMatrix.set(i, j, RandomUtils.nextInt(2) == 0 ? +1 : -1);
1:       }
1:     }
1:     for (MatrixSlice row : basisMatrix) {
1:       row.vector().assign(row.normalize());
1:     }
1:     return basisMatrix;
1:   }
1: 
1:   /**
1:    * Generates a basis matrix of size projectedVectorSize x vectorSize. Multiplying a a vector by
1:    * this matrix results in the projected vector.
1:    *
1:    * The rows of a matrix are sample from a distribution where:
1:    * - 0 has probability 2/3,
1:    * - +1 has probability 1/6,
1:    * - -1 has probability 1/6
1:    *
1:    * See Achlioptas, D. (2003). Database-friendly random projections: Johnson-Lindenstrauss with binary coins.
1:    * Journal of Computer and System Sciences, 66(4), 671â€?687. doi:10.1016/S0022-0000(03)00025-4
1:    *
1:    * @param projectedVectorSize final projected size of a vector (number of projection vectors)
1:    * @param vectorSize initial vector size
1:    * @return a projection matrix
1:    */
1:   public static Matrix generateBasisZeroPlusMinusOne(int projectedVectorSize, int vectorSize) {
1:     Matrix basisMatrix = new DenseMatrix(projectedVectorSize, vectorSize);
0:     Multinomial<Double> choice = new Multinomial<Double>();
0:     choice.add(0.0, 2/3.0);
0:     choice.add(+Math.sqrt(3.0), 1 / 6.0);
1:     choice.add(-Math.sqrt(3.0), 1 / 6.0);
1:     for (int i = 0; i < projectedVectorSize; ++i) {
1:       for (int j = 0; j < vectorSize; ++j) {
1:         basisMatrix.set(i, j, choice.sample());
1:       }
1:     }
1:     for (MatrixSlice row : basisMatrix) {
1:       row.vector().assign(row.normalize());
1:     }
1:     return basisMatrix;
1:   }
1: 
1:   /**
1:    * Generates a list of projectedVectorSize vectors, each of size vectorSize. This looks like a
1:    * matrix of size (projectedVectorSize, vectorSize).
1:    * @param projectedVectorSize final projected size of a vector (number of projection vectors)
1:    * @param vectorSize initial vector size
1:    * @return a list of projection vectors
1:    */
1:   public static List<Vector> generateVectorBasis(int projectedVectorSize, int vectorSize) {
0:     final DoubleFunction random = new Normal();
1:     List<Vector> basisVectors = Lists.newArrayList();
1:     for (int i = 0; i < projectedVectorSize; ++i) {
1:       Vector basisVector = new DenseVector(vectorSize);
1:       basisVector.assign(random);
1:       basisVector.normalize();
1:       basisVectors.add(basisVector);
1:     }
1:     return basisVectors;
1:   }
1: }
============================================================================