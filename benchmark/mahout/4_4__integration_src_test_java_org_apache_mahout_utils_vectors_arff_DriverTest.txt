1:d0bed6d: /*
1:d0bed6d:  * Copyright 2013 The Apache Software Foundation.
1:d0bed6d:  *
1:d0bed6d:  * Licensed under the Apache License, Version 2.0 (the "License");
1:d0bed6d:  * you may not use this file except in compliance with the License.
1:d0bed6d:  * You may obtain a copy of the License at
1:d0bed6d:  *
1:d0bed6d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d0bed6d:  *
1:d0bed6d:  * Unless required by applicable law or agreed to in writing, software
1:d0bed6d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d0bed6d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d0bed6d:  * See the License for the specific language governing permissions and
1:d0bed6d:  * limitations under the License.
1:d0bed6d:  */
1:d0bed6d: package org.apache.mahout.utils.vectors.arff;
4:d0bed6d: 
1:d0bed6d: import java.io.IOException;
1:d0bed6d: import java.io.StringWriter;
1:b381afd: 
1:d0bed6d: import com.google.common.io.Resources;
1:85f9ece: import org.apache.commons.io.Charsets;
1:b381afd: import org.apache.mahout.common.MahoutTestCase;
1:d0bed6d: import org.junit.Test;
1:d0bed6d: 
1:d0bed6d: /**
1:d0bed6d:  * Test case for {@link Driver}
1:d0bed6d:  */
1:d0bed6d: public class DriverTest extends MahoutTestCase {
1:d0bed6d: 
1:d0bed6d:   @Test
1:d0bed6d:   public void dictionary() throws IOException {
1:d0bed6d: 
1:d0bed6d:     ARFFModel model = new MapBackedARFFModel();
1:d0bed6d:     ARFFVectorIterableTest.getVectors("sample-dense.arff", model);
1:d0bed6d:     StringWriter writer = new StringWriter();
1:d0bed6d:     Driver.writeLabelBindings(writer, model, ",");
1:91f15ec:     String expected1 = Resources.toString(Resources.getResource("expected-arff-dictionary.csv"), Charsets.UTF_8);
1:91f15ec:     String expected2 = Resources.toString(Resources.getResource("expected-arff-dictionary-2.csv"), Charsets.UTF_8);
1:91f15ec:     assertTrue(expected1.equals(writer.toString()) || expected2.equals(writer.toString()));
1:d0bed6d:   }
1:d0bed6d: 
1:d0bed6d: 
1:d0bed6d:   @Test
1:d0bed6d:   public void dictionaryJSON() throws IOException {
1:d0bed6d:     ARFFModel model = new MapBackedARFFModel();
1:d0bed6d:     ARFFVectorIterableTest.getVectors("sample-dense.arff", model);
1:d0bed6d:     StringWriter writer = new StringWriter();
1:d0bed6d:     Driver.writeLabelBindingsJSON(writer, model);
1:91f15ec:     String expected1 = Resources.toString(Resources.getResource("expected-arff-schema.json"), Charsets.UTF_8);
1:91f15ec:     String expected2 = Resources.toString(Resources.getResource("expected-arff-schema-2.json"), Charsets.UTF_8);
1:91f15ec:     assertTrue(expected1.equals(writer.toString()) || expected2.equals(writer.toString()));
1:d0bed6d:   }
1:d0bed6d: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
author:Sean Owen
-------------------------------------------------------------------------------
commit:91f15ec
/////////////////////////////////////////////////////////////////////////
1:     String expected1 = Resources.toString(Resources.getResource("expected-arff-dictionary.csv"), Charsets.UTF_8);
1:     String expected2 = Resources.toString(Resources.getResource("expected-arff-dictionary-2.csv"), Charsets.UTF_8);
1:     assertTrue(expected1.equals(writer.toString()) || expected2.equals(writer.toString()));
/////////////////////////////////////////////////////////////////////////
1:     String expected1 = Resources.toString(Resources.getResource("expected-arff-schema.json"), Charsets.UTF_8);
1:     String expected2 = Resources.toString(Resources.getResource("expected-arff-schema-2.json"), Charsets.UTF_8);
1:     assertTrue(expected1.equals(writer.toString()) || expected2.equals(writer.toString()));
author:sslavic
-------------------------------------------------------------------------------
commit:b381afd
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.mahout.common.MahoutTestCase;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d0bed6d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright 2013 The Apache Software Foundation.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.utils.vectors.arff;
1: 
1: import java.io.IOException;
1: import java.io.StringWriter;
1: 
0: import com.google.common.base.Charsets;
1: import com.google.common.io.Resources;
0: import org.apache.mahout.utils.MahoutTestCase;
1: import org.junit.Test;
1: 
1: /**
1:  * Test case for {@link Driver}
1:  */
1: public class DriverTest extends MahoutTestCase {
1: 
1:   @Test
1:   public void dictionary() throws IOException {
1: 
1:     ARFFModel model = new MapBackedARFFModel();
1:     ARFFVectorIterableTest.getVectors("sample-dense.arff", model);
1:     StringWriter writer = new StringWriter();
1:     Driver.writeLabelBindings(writer, model, ",");
1: 
0:     String expected = Resources.toString(Resources.getResource("expected-arff-dictionary.csv"), Charsets.UTF_8);
1: 
0:     assertEquals(expected, writer.toString());
1:   }
1: 
1: 
1:   @Test
1:   public void dictionaryJSON() throws IOException {
1:     ARFFModel model = new MapBackedARFFModel();
1:     ARFFVectorIterableTest.getVectors("sample-dense.arff", model);
1:     StringWriter writer = new StringWriter();
1:     Driver.writeLabelBindingsJSON(writer, model);
0:     assertEquals(Resources.toString(Resources.getResource("expected-arff-schema.json"), Charsets.UTF_8), writer.toString());
1:   }
1: }
============================================================================