1:4fbfbc6: /*
1:3a50c88:  *  This code is public domain.
1:3a50c88:  *
1:6d16230:  *  The MurmurHash3 algorithm was created by Austin Appleby and put into the public domain.
1:6d16230:  *  See http://code.google.com/p/smhasher/
1:3a50c88:  *
1:3a50c88:  *  This java port was authored by
1:6d16230:  *  Yonik Seeley and was placed into the public domain per
1:6d16230:  *  https://github.com/yonik/java_util/blob/master/src/util/hash/MurmurHash3.java.
1:3a50c88:  */
1:3a50c88: 
1:4fbfbc6: package org.apache.mahout.math;
1:e0ec7c1: 
2:3a50c88: /**
1:3a50c88:  *  <p>
1:44459bd:  *  This produces exactly the same hash values as the final C+
1:44459bd:  + *  version of MurmurHash3 and is thus suitable for producing the same hash values across
1:3a50c88:  *  platforms.
1:3a50c88:  *  <p>
1:3a50c88:  *  The 32 bit x86 version of this hash should be the fastest variant for relatively short keys like ids.
1:3a50c88:  *  <p>
1:3a50c88:  *  Note - The x86 and x64 versions do _not_ produce the same results, as the
1:3a50c88:  *  algorithms are optimized for their respective platforms.
1:3a50c88:  *  <p>
1:3a50c88:  *  See also http://github.com/yonik/java_util for future updates to this file.
1:3a50c88:  */
1:10c535c: public final class MurmurHash3 {
1:3a50c88: 
1:6d16230:   private MurmurHash3() {}
1:3a50c88: 
1:3a50c88:   /** Returns the MurmurHash3_x86_32 hash. */
1:6d16230:   public static int murmurhash3x8632(byte[] data, int offset, int len, int seed) {
1:3a50c88: 
1:e0ec7c1:     int c1 = 0xcc9e2d51;
1:e0ec7c1:     int c2 = 0x1b873593;
1:3a50c88: 
1:3a50c88:     int h1 = seed;
1:3a50c88:     int roundedEnd = offset + (len & 0xfffffffc);  // round down to 4 byte block
1:3a50c88: 
1:6d16230:     for (int i = offset; i < roundedEnd; i += 4) {
1:3a50c88:       // little endian load order
1:6d16230:       int k1 = (data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16) | (data[i + 3] << 24);
1:3a50c88:       k1 *= c1;
1:3a50c88:       k1 = (k1 << 15) | (k1 >>> 17);  // ROTL32(k1,15);
1:3a50c88:       k1 *= c2;
1:3a50c88: 
1:3a50c88:       h1 ^= k1;
1:3a50c88:       h1 = (h1 << 13) | (h1 >>> 19);  // ROTL32(h1,13);
1:6d16230:       h1 = h1 * 5 + 0xe6546b64;
1:e0ec7c1:     }
1:3a50c88: 
1:3a50c88:     // tail
1:3a50c88:     int k1 = 0;
1:3a50c88: 
1:3a50c88:     switch(len & 0x03) {
1:3a50c88:       case 3:
1:3a50c88:         k1 = (data[roundedEnd + 2] & 0xff) << 16;
1:3a50c88:         // fallthrough
1:3a50c88:       case 2:
1:3a50c88:         k1 |= (data[roundedEnd + 1] & 0xff) << 8;
1:3a50c88:         // fallthrough
1:3a50c88:       case 1:
1:4fbfbc6:         k1 |= data[roundedEnd] & 0xff;
1:3a50c88:         k1 *= c1;
1:3a50c88:         k1 = (k1 << 15) | (k1 >>> 17);  // ROTL32(k1,15);
1:3a50c88:         k1 *= c2;
1:3a50c88:         h1 ^= k1;
1:6d16230:       default:
3:3a50c88:     }
1:3a50c88: 
1:3a50c88:     // finalization
1:3a50c88:     h1 ^= len;
1:3a50c88: 
1:3a50c88:     // fmix(h1);
1:3a50c88:     h1 ^= h1 >>> 16;
1:3a50c88:     h1 *= 0x85ebca6b;
1:3a50c88:     h1 ^= h1 >>> 13;
1:3a50c88:     h1 *= 0xc2b2ae35;
1:3a50c88:     h1 ^= h1 >>> 16;
1:3a50c88: 
1:3a50c88:     return h1;
1:6d16230:   }
1:3a50c88: 
1:3a50c88: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:  *  The MurmurHash3 algorithm was created by Austin Appleby and put into the public domain.
1:  *  See http://code.google.com/p/smhasher/
1:  *  Yonik Seeley and was placed into the public domain per
1:  *  https://github.com/yonik/java_util/blob/master/src/util/hash/MurmurHash3.java.
/////////////////////////////////////////////////////////////////////////
1:   private MurmurHash3() {}
1:   public static int murmurhash3x8632(byte[] data, int offset, int len, int seed) {
/////////////////////////////////////////////////////////////////////////
1:     for (int i = offset; i < roundedEnd; i += 4) {
1:       int k1 = (data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16) | (data[i + 3] << 24);
1:       h1 = h1 * 5 + 0xe6546b64;
/////////////////////////////////////////////////////////////////////////
1:       default:
/////////////////////////////////////////////////////////////////////////
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1: public final class MurmurHash3 {
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
/////////////////////////////////////////////////////////////////////////
1:         k1 |= data[roundedEnd] & 0xff;
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
0:   private MurmurHash3() {
1:   }
1: 
1:     int c1 = 0xcc9e2d51;
1:     int c2 = 0x1b873593;
author:tcp
-------------------------------------------------------------------------------
commit:44459bd
/////////////////////////////////////////////////////////////////////////
1:  *  This produces exactly the same hash values as the final C+
1:  + *  version of MurmurHash3 and is thus suitable for producing the same hash values across
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:3a50c88
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math;
1: /**
1:  *  This code is public domain.
1:  *
0:  *  The MurmurHash3 algorithm was created by Austin Appleby and put into the public domain.  See http://code.google.com/p/smhasher/
1:  *
1:  *  This java port was authored by
0:  *  Yonik Seeley and was placed into the public domain per https://github.com/yonik/java_util/blob/master/src/util/hash/MurmurHash3.java.
1:  */
1: 
0: //
1: 
1: /**
1:  *  <p>
0:  *  This produces exactly the same hash values as the final C++
0:  *  version of MurmurHash3 and is thus suitable for producing the same hash values across
1:  *  platforms.
1:  *  <p>
1:  *  The 32 bit x86 version of this hash should be the fastest variant for relatively short keys like ids.
1:  *  <p>
1:  *  Note - The x86 and x64 versions do _not_ produce the same results, as the
1:  *  algorithms are optimized for their respective platforms.
1:  *  <p>
1:  *  See also http://github.com/yonik/java_util for future updates to this file.
1:  */
0: public class MurmurHash3 {
1: 
1:   /** Returns the MurmurHash3_x86_32 hash. */
0:   public static int murmurhash3_x86_32(byte[] data, int offset, int len, int seed) {
1: 
0:     final int c1 = 0xcc9e2d51;
0:     final int c2 = 0x1b873593;
1: 
1:     int h1 = seed;
1:     int roundedEnd = offset + (len & 0xfffffffc);  // round down to 4 byte block
1: 
0:     for (int i=offset; i<roundedEnd; i+=4) {
1:       // little endian load order
0:       int k1 = (data[i] & 0xff) | ((data[i+1] & 0xff) << 8) | ((data[i+2] & 0xff) << 16) | (data[i+3] << 24);
1:       k1 *= c1;
1:       k1 = (k1 << 15) | (k1 >>> 17);  // ROTL32(k1,15);
1:       k1 *= c2;
1: 
1:       h1 ^= k1;
1:       h1 = (h1 << 13) | (h1 >>> 19);  // ROTL32(h1,13);
0:       h1 = h1*5+0xe6546b64;
1:     }
1: 
1:     // tail
1:     int k1 = 0;
1: 
1:     switch(len & 0x03) {
1:       case 3:
1:         k1 = (data[roundedEnd + 2] & 0xff) << 16;
1:         // fallthrough
1:       case 2:
1:         k1 |= (data[roundedEnd + 1] & 0xff) << 8;
1:         // fallthrough
1:       case 1:
0:         k1 |= (data[roundedEnd] & 0xff);
1:         k1 *= c1;
1:         k1 = (k1 << 15) | (k1 >>> 17);  // ROTL32(k1,15);
1:         k1 *= c2;
1:         h1 ^= k1;
1:     }
1: 
1:     // finalization
1:     h1 ^= len;
1: 
1:     // fmix(h1);
1:     h1 ^= h1 >>> 16;
1:     h1 *= 0x85ebca6b;
1:     h1 ^= h1 >>> 13;
1:     h1 *= 0xc2b2ae35;
1:     h1 ^= h1 >>> 16;
1: 
1:     return h1;
1:   }
1: 
1: }
============================================================================