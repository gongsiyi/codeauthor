1:5a58194: /**
1:5a58194:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a58194:  * contributor license agreements.  See the NOTICE file distributed with
1:5a58194:  * this work for additional information regarding copyright ownership.
1:5a58194:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a58194:  * (the "License"); you may not use this file except in compliance with
1:5a58194:  * the License.  You may obtain a copy of the License at
1:5a58194:  *
1:5a58194:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a58194:  *
1:5a58194:  * Unless required by applicable law or agreed to in writing, software
1:5a58194:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a58194:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a58194:  * See the License for the specific language governing permissions and
1:5a58194:  * limitations under the License.
1:5a58194:  */
3:5a58194: 
1:5a58194: package org.apache.mahout.common.iterator;
1:5a58194: 
1:5a58194: import java.util.Iterator;
1:5a58194: 
1:434cdff: import org.apache.mahout.common.MahoutTestCase;
1:ff79ff4: import org.junit.Test;
1:5a58194: 
1:ff79ff4: public final class TestSamplingIterator extends MahoutTestCase {
1:5a58194: 
1:ff79ff4:   @Test
1:5a58194:   public void testEmptyCase() {
1:02ff22f:     assertFalse(new SamplingIterator<>(new CountingIterator(0), 0.9999).hasNext());
1:02ff22f:     assertFalse(new SamplingIterator<>(new CountingIterator(0), 1).hasNext());
2:5a58194:   }
1:5a58194: 
1:ff79ff4:   @Test
1:5a58194:   public void testSmallInput() {
1:02ff22f:     Iterator<Integer> t = new SamplingIterator<>(new CountingIterator(1), 0.9999);
1:5a58194:     assertTrue(t.hasNext());
1:5a58194:     assertEquals(0, t.next().intValue());
2:5a58194:     assertFalse(t.hasNext());
1:5a58194:   }
1:5a58194: 
1:04c3374:   @Test(expected = IllegalArgumentException.class)
1:04c3374:   public void testBadRate1() {
1:02ff22f:     new SamplingIterator<>(new CountingIterator(1), 0.0);
1:04c3374:   }
1:04c3374: 
1:04c3374:   @Test(expected = IllegalArgumentException.class)
1:04c3374:   public void testBadRate2() {
1:02ff22f:     new SamplingIterator<>(new CountingIterator(1), 1.1);
1:5a58194:   }
1:5a58194: 
1:ff79ff4:   @Test
1:5a58194:   public void testExactSizeMatch() {
1:02ff22f:     Iterator<Integer> t = new SamplingIterator<>(new CountingIterator(10), 1);
1:5a58194:     for (int i = 0; i < 10; i++) {
1:5a58194:       assertTrue(t.hasNext());
1:5a58194:       assertEquals(i, t.next().intValue());
1:5a58194:     }
1:5a58194:     assertFalse(t.hasNext());
1:5a58194:   }
1:5a58194: 
1:ff79ff4:   @Test
1:5a58194:   public void testSample() {
1:04c3374:     for (int i = 0; i < 1000; i++) {
1:02ff22f:       Iterator<Integer> t = new SamplingIterator<>(new CountingIterator(1000), 0.1);
1:5a58194:       int k = 0;
1:5a58194:       while (t.hasNext()) {
1:5a58194:         int v = t.next();
1:5a58194:         k++;
1:5a58194:         assertTrue(v >= 0);
1:5a58194:         assertTrue(v < 1000);
1:5a58194:       }
1:5a58194:       double sd = Math.sqrt(0.9 * 0.1 * 1000);
1:04c3374:       assertTrue(k >= 100 - 4 * sd);
1:04c3374:       assertTrue(k <= 100 + 4 * sd);
1:5a58194:     }
1:5a58194:   }
1:5a58194: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     assertFalse(new SamplingIterator<>(new CountingIterator(0), 0.9999).hasNext());
1:     assertFalse(new SamplingIterator<>(new CountingIterator(0), 1).hasNext());
1:     Iterator<Integer> t = new SamplingIterator<>(new CountingIterator(1), 0.9999);
/////////////////////////////////////////////////////////////////////////
1:     new SamplingIterator<>(new CountingIterator(1), 0.0);
1:     new SamplingIterator<>(new CountingIterator(1), 1.1);
1:     Iterator<Integer> t = new SamplingIterator<>(new CountingIterator(10), 1);
/////////////////////////////////////////////////////////////////////////
1:       Iterator<Integer> t = new SamplingIterator<>(new CountingIterator(1000), 0.1);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:04c3374
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   @Test(expected = IllegalArgumentException.class)
1:   public void testBadRate1() {
0:     new SamplingIterator<Integer>(new CountingIterator(1), 0.0);
1:   }
1: 
1:   @Test(expected = IllegalArgumentException.class)
1:   public void testBadRate2() {
0:     new SamplingIterator<Integer>(new CountingIterator(1), 1.1);
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < 1000; i++) {
/////////////////////////////////////////////////////////////////////////
1:       assertTrue(k >= 100 - 4 * sd);
1:       assertTrue(k <= 100 + 4 * sd);
commit:80366ee
/////////////////////////////////////////////////////////////////////////
0:     assertFalse(new SamplingIterator<Integer>(new CountingIterator(0), 0.9999).hasNext());
0:     assertFalse(new SamplingIterator<Integer>(new CountingIterator(0), 1).hasNext());
0:     assertFalse(new SamplingIterator<Integer>(new CountingIterator(0), 2).hasNext());
0:     Iterator<Integer> t = new SamplingIterator<Integer>(new CountingIterator(1), 0.9999);
/////////////////////////////////////////////////////////////////////////
0:     Iterator<Integer> t = new SamplingIterator<Integer>(new CountingIterator(2), 0);
0:     Iterator<Integer> t = new SamplingIterator<Integer>(new CountingIterator(10), 1);
/////////////////////////////////////////////////////////////////////////
0:       Iterator<Integer> t = new SamplingIterator<Integer>(new CountingIterator(1000), 0.1);
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public final class TestSamplingIterator extends MahoutTestCase {
1:   @Test
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   @Test
/////////////////////////////////////////////////////////////////////////
0:   @Test
commit:434cdff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
0: public class TestSamplingIterator extends MahoutTestCase {
commit:2308ccc
/////////////////////////////////////////////////////////////////////////
0: public class TestSamplingIterator extends TestCase {
/////////////////////////////////////////////////////////////////////////
0:       assertTrue(k <= 100 + 3 * sd);
commit:c40fd07
/////////////////////////////////////////////////////////////////////////
0:     super.setUp();
commit:5a58194
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.iterator;
1: 
0: import junit.framework.TestCase;
1: 
1: import java.util.Iterator;
1: 
0: import org.apache.mahout.common.RandomUtils;
1: 
0: public abstract class TestSamplingIterator extends TestCase {
1: 
0:   @Override
0:   protected void setUp() throws Exception {
0:     RandomUtils.useTestSeed();
1:   }
1: 
1:   public void testEmptyCase() {
0:     assertFalse(new SamplingIterator<Integer>(Integers.iterator(0), 0.9999).hasNext());
0:     assertFalse(new SamplingIterator<Integer>(Integers.iterator(0), 1).hasNext());
0:     assertFalse(new SamplingIterator<Integer>(Integers.iterator(0), 2).hasNext());
1:   }
1: 
1:   public void testSmallInput() {
0:     Iterator<Integer> t = new SamplingIterator<Integer>(Integers.iterator(1), 0.9999);
1:     assertTrue(t.hasNext());
1:     assertEquals(0, t.next().intValue());
1:     assertFalse(t.hasNext());
1:   }
1: 
0:   public void testAbsurdSampleRate() {
0:     Iterator<Integer> t = new SamplingIterator<Integer>(Integers.iterator(2), 0);
1:     assertFalse(t.hasNext());
1:   }
1: 
1:   public void testExactSizeMatch() {
0:     Iterator<Integer> t = new SamplingIterator<Integer>(Integers.iterator(10), 1);
1:     for (int i = 0; i < 10; i++) {
1:       assertTrue(t.hasNext());
1:       assertEquals(i, t.next().intValue());
1:     }
1:     assertFalse(t.hasNext());
1:   }
1: 
1:   public void testSample() {
0:     for (int i = 0; i < 100; i++) {
0:       Iterator<Integer> t = new SamplingIterator<Integer>(Integers.iterator(1000), 0.1);
1:       int k = 0;
1:       while (t.hasNext()) {
1:         int v = t.next();
1:         k++;
1:         assertTrue(v >= 0);
1:         assertTrue(v < 1000);
1:       }
1:       double sd = Math.sqrt(0.9 * 0.1 * 1000);
0:       assertTrue(k >= 100 - 3 * sd);
0:       assertTrue(k >= 100 + 3 * sd);
1:     }
1:   }
1: }
============================================================================