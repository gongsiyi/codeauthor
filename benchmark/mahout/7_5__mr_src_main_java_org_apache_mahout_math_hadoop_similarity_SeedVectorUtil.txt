2:e55ec3c: /**
1:e55ec3c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e55ec3c:  * contributor license agreements.  See the NOTICE file distributed with
1:e55ec3c:  * this work for additional information regarding copyright ownership.
1:e55ec3c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e55ec3c:  * (the "License"); you may not use this file except in compliance with
1:e55ec3c:  * the License.  You may obtain a copy of the License at
3:e55ec3c:  *
1:e55ec3c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e55ec3c:  *
1:e55ec3c:  * Unless required by applicable law or agreed to in writing, software
1:e55ec3c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e55ec3c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e55ec3c:  * See the License for the specific language governing permissions and
1:e55ec3c:  * limitations under the License.
1:e55ec3c:  */
5:e55ec3c: 
1:b59e468: package org.apache.mahout.math.hadoop.similarity;
1:e55ec3c: 
1:e55ec3c: import com.google.common.collect.Lists;
1:e55ec3c: import org.apache.hadoop.conf.Configuration;
1:e55ec3c: import org.apache.hadoop.fs.Path;
1:e55ec3c: import org.apache.hadoop.io.Writable;
1:e55ec3c: import org.apache.mahout.clustering.canopy.Canopy;
1:1ac30a4: import org.apache.mahout.clustering.kmeans.Kluster;
1:e55ec3c: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1:b59e468: import org.apache.mahout.common.iterator.sequencefile.PathType;
1:b59e468: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable;
1:e55ec3c: import org.apache.mahout.math.NamedVector;
1:e55ec3c: import org.apache.mahout.math.Vector;
1:e55ec3c: import org.apache.mahout.math.VectorWritable;
1:e55ec3c: import org.slf4j.Logger;
1:e55ec3c: import org.slf4j.LoggerFactory;
1:e55ec3c: 
1:b59e468: import java.util.Collections;
1:e55ec3c: import java.util.List;
1:e55ec3c: 
1:b59e468: final class SeedVectorUtil {
1:b59e468: 
1:b59e468:   private static final Logger log = LoggerFactory.getLogger(SeedVectorUtil.class);
1:e55ec3c: 
1:e55ec3c:   private SeedVectorUtil() {
8:e55ec3c:   }
1:e55ec3c: 
1:b59e468:   public static List<NamedVector> loadSeedVectors(Configuration conf) {
1:e55ec3c: 
1:e55ec3c:     String seedPathStr = conf.get(VectorDistanceSimilarityJob.SEEDS_PATH_KEY);
1:e0ec7c1:     if (seedPathStr == null || seedPathStr.isEmpty()) {
1:b59e468:       return Collections.emptyList();
1:b59e468:     }
1:e55ec3c: 
1:b59e468:     List<NamedVector> seedVectors = Lists.newArrayList();
1:b59e468:     long item = 0;
1:6d16230:     for (Writable value
1:87c15be:         : new SequenceFileDirValueIterable<>(new Path(seedPathStr),
1:b59e468:                                                     PathType.LIST,
1:b59e468:                                                     PathFilters.partFilter(),
1:b59e468:                                                     conf)) {
1:b59e468:       Class<? extends Writable> valueClass = value.getClass();
1:1ac30a4:       if (valueClass.equals(Kluster.class)) {
1:b59e468:         // get the cluster info
1:1ac30a4:         Kluster cluster = (Kluster) value;
1:b59e468:         Vector vector = cluster.getCenter();
1:b59e468:         if (vector instanceof NamedVector) {
1:b59e468:           seedVectors.add((NamedVector) vector);
1:b59e468:         } else {
1:b59e468:           seedVectors.add(new NamedVector(vector, cluster.getIdentifier()));
1:e55ec3c:         }
1:b59e468:       } else if (valueClass.equals(Canopy.class)) {
1:b59e468:         // get the cluster info
1:b59e468:         Canopy canopy = (Canopy) value;
1:b59e468:         Vector vector = canopy.getCenter();
1:b59e468:         if (vector instanceof NamedVector) {
1:b59e468:           seedVectors.add((NamedVector) vector);
1:b59e468:         } else {
1:b59e468:           seedVectors.add(new NamedVector(vector, canopy.getIdentifier()));
1:b59e468:         }
1:b59e468:       } else if (valueClass.equals(Vector.class)) {
1:b59e468:         Vector vector = (Vector) value;
1:b59e468:         if (vector instanceof NamedVector) {
1:b59e468:           seedVectors.add((NamedVector) vector);
1:b59e468:         } else {
1:b59e468:           seedVectors.add(new NamedVector(vector, seedPathStr + '.' + item++));
1:b59e468:         }
1:b59e468:       } else if (valueClass.equals(VectorWritable.class) || valueClass.isInstance(VectorWritable.class)) {
1:b59e468:         VectorWritable vw = (VectorWritable) value;
1:b59e468:         Vector vector = vw.get();
1:b59e468:         if (vector instanceof NamedVector) {
1:b59e468:           seedVectors.add((NamedVector) vector);
1:b59e468:         } else {
1:b59e468:           seedVectors.add(new NamedVector(vector, seedPathStr + '.' + item++));
1:b59e468:         }
6:e55ec3c:       } else {
1:b59e468:         throw new IllegalStateException("Bad value class: " + valueClass);
1:e55ec3c:       }
1:e55ec3c:     }
1:b59e468:     if (seedVectors.isEmpty()) {
1:b59e468:       throw new IllegalStateException("No seeds found. Check your path: " + seedPathStr);
1:b59e468:     }
1:b59e468:     log.info("Seed Vectors size: {}", seedVectors.size());
1:b59e468:     return seedVectors;
1:e55ec3c:   }
1:e55ec3c: 
1:e55ec3c: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:         : new SequenceFileDirValueIterable<>(new Path(seedPathStr),
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     for (Writable value
0:         : new SequenceFileDirValueIterable<Writable>(new Path(seedPathStr),
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:1ac30a4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.kmeans.Kluster;
/////////////////////////////////////////////////////////////////////////
1:       if (valueClass.equals(Kluster.class)) {
1:         Kluster cluster = (Kluster) value;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1:     if (seedPathStr == null || seedPathStr.isEmpty()) {
commit:b59e468
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.similarity;
1: import org.apache.mahout.common.iterator.sequencefile.PathType;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable;
1: import java.util.Collections;
1: final class SeedVectorUtil {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(SeedVectorUtil.class);
1:   public static List<NamedVector> loadSeedVectors(Configuration conf) {
0:     if (seedPathStr == null || seedPathStr.length() <= 0) {
1:       return Collections.emptyList();
1:     }
1:     List<NamedVector> seedVectors = Lists.newArrayList();
1:     long item = 0;
0:     for (Writable value :
0:          new SequenceFileDirValueIterable<Writable>(new Path(seedPathStr),
1:                                                     PathType.LIST,
1:                                                     PathFilters.partFilter(),
1:                                                     conf)) {
1:       Class<? extends Writable> valueClass = value.getClass();
0:       if (valueClass.equals(Cluster.class)) {
1:         // get the cluster info
0:         Cluster cluster = (Cluster) value;
1:         Vector vector = cluster.getCenter();
1:         if (vector instanceof NamedVector) {
1:           seedVectors.add((NamedVector) vector);
1:         } else {
1:           seedVectors.add(new NamedVector(vector, cluster.getIdentifier()));
1:       } else if (valueClass.equals(Canopy.class)) {
1:         // get the cluster info
1:         Canopy canopy = (Canopy) value;
1:         Vector vector = canopy.getCenter();
1:         if (vector instanceof NamedVector) {
1:           seedVectors.add((NamedVector) vector);
1:         } else {
1:           seedVectors.add(new NamedVector(vector, canopy.getIdentifier()));
1:         }
1:       } else if (valueClass.equals(Vector.class)) {
1:         Vector vector = (Vector) value;
1:         if (vector instanceof NamedVector) {
1:           seedVectors.add((NamedVector) vector);
1:         } else {
1:           seedVectors.add(new NamedVector(vector, seedPathStr + '.' + item++));
1:         }
1:       } else if (valueClass.equals(VectorWritable.class) || valueClass.isInstance(VectorWritable.class)) {
1:         VectorWritable vw = (VectorWritable) value;
1:         Vector vector = vw.get();
1:         if (vector instanceof NamedVector) {
1:           seedVectors.add((NamedVector) vector);
1:         } else {
1:           seedVectors.add(new NamedVector(vector, seedPathStr + '.' + item++));
1:         }
1:         throw new IllegalStateException("Bad value class: " + valueClass);
1:     if (seedVectors.isEmpty()) {
1:       throw new IllegalStateException("No seeds found. Check your path: " + seedPathStr);
1:     }
1:     log.info("Seed Vectors size: {}", seedVectors.size());
1:     return seedVectors;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:e55ec3c
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math.hadoop.similarity;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import com.google.common.collect.Lists;
1: import org.apache.hadoop.conf.Configuration;
0: import org.apache.hadoop.fs.FileStatus;
0: import org.apache.hadoop.fs.FileSystem;
0: import org.apache.hadoop.fs.FileUtil;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.clustering.canopy.Canopy;
0: import org.apache.mahout.clustering.kmeans.Cluster;
1: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
0: import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterable;
1: import org.apache.mahout.math.NamedVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import java.io.IOException;
0: import java.util.Collection;
1: import java.util.List;
1: 
1: /**
1:  *
1:  *
0:  **/
0: class SeedVectorUtil {
0:   private transient static Logger log = LoggerFactory.getLogger(SeedVectorUtil.class);
1: 
1:   private SeedVectorUtil() {
1: 
1:   }
1: 
0:   public static void loadSeedVectors(Configuration conf, List<NamedVector> seedVectors) throws IOException {
1: 
1:     String seedPathStr = conf.get(VectorDistanceSimilarityJob.SEEDS_PATH_KEY);
0:     if (seedPathStr != null && seedPathStr.length() > 0) {
1: 
0:       Path thePath = new Path(seedPathStr, "*");
0:       Collection<Path> result = Lists.newArrayList();
1: 
0:       // get all filtered file names in result list
0:       FileSystem fs = thePath.getFileSystem(conf);
0:       FileStatus[] matches = fs.listStatus(FileUtil.stat2Paths(fs.globStatus(thePath, PathFilters.partFilter())),
0:               PathFilters.partFilter());
1: 
0:       for (FileStatus match : matches) {
0:         result.add(fs.makeQualified(match.getPath()));
1:       }
1: 
0:       long item = 0;
0:       for (Path seedPath : result) {
0:         for (Writable value : new SequenceFileValueIterable<Writable>(seedPath, conf)) {
0:           Class<? extends Writable> valueClass = value.getClass();
0:           if (valueClass.equals(Cluster.class)) {
0:             // get the cluster info
0:             Cluster cluster = (Cluster) value;
0:             Vector vector = cluster.getCenter();
0:             if (vector instanceof NamedVector) {
0:               seedVectors.add((NamedVector) vector);
1:             } else {
0:               seedVectors.add(new NamedVector(vector, cluster.getIdentifier()));
1:             }
0:           } else if (valueClass.equals(Canopy.class)) {
0:             // get the cluster info
0:             Canopy canopy = (Canopy) value;
0:             Vector vector = canopy.getCenter();
0:             if (vector instanceof NamedVector) {
0:               seedVectors.add((NamedVector) vector);
1:             } else {
0:               seedVectors.add(new NamedVector(vector, canopy.getIdentifier()));
1:             }
0:           } else if (valueClass.equals(Vector.class)) {
0:             Vector vector = (Vector) value;
0:             if (vector instanceof NamedVector) {
0:               seedVectors.add((NamedVector) vector);
1:             } else {
0:               seedVectors.add(new NamedVector(vector, seedPath + "." + item++));
1:             }
0:           } else if (valueClass.equals(VectorWritable.class) || valueClass.isInstance(VectorWritable.class)) {
0:             VectorWritable vw = (VectorWritable) value;
0:             Vector vector = vw.get();
0:             if (vector instanceof NamedVector) {
0:               seedVectors.add((NamedVector) vector);
1:             } else {
0:               seedVectors.add(new NamedVector(vector, seedPath + "." + item++));
1:             }
1:           } else {
0:             throw new IllegalStateException("Bad value class: " + valueClass);
1:           }
1:         }
1:       }
0:       if (seedVectors.isEmpty()) {
0:         throw new IllegalStateException("No seeds found. Check your path: " + seedPathStr);
1:       } else {
0:         log.info("Seed Vectors size: " + seedVectors.size());
1:       }
1:     }
1:   }
1: 
1: }
============================================================================