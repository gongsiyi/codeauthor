1:c439f53: /**
1:c439f53:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c439f53:  * contributor license agreements.  See the NOTICE file distributed with
1:c439f53:  * this work for additional information regarding copyright ownership.
1:c439f53:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c439f53:  * (the "License"); you may not use this file except in compliance with
1:c439f53:  * the License.  You may obtain a copy of the License at
1:c439f53:  *
1:c439f53:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c439f53:  *
1:c439f53:  * Unless required by applicable law or agreed to in writing, software
1:c439f53:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c439f53:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c439f53:  * See the License for the specific language governing permissions and
1:c439f53:  * limitations under the License.
1:c439f53:  */
1:c439f53: 
1:c439f53: package org.apache.mahout.cf.taste.example.kddcup.track1;
1:c439f53: 
1:c439f53: import org.slf4j.Logger;
1:c439f53: import org.slf4j.LoggerFactory;
1:c439f53: 
1:10c535c: public final class EstimateConverter {
1:c439f53: 
1:c439f53:   private static final Logger log = LoggerFactory.getLogger(EstimateConverter.class);
1:c439f53: 
1:c439f53:   private EstimateConverter() {}
1:c439f53: 
1:c439f53:   public static byte convert(double estimate, long userID, long itemID) {
1:c439f53:     if (Double.isNaN(estimate)) {
1:c439f53:       log.warn("Unable to compute estimate for user {}, item {}", userID, itemID);
1:c439f53:       return 0x7F;
1:c439f53:     } else {
1:c439f53:       int scaledEstimate = (int) (estimate * 2.55);
1:c439f53:       if (scaledEstimate > 255) {
1:c439f53:         scaledEstimate = 255;
1:c439f53:       } else if (scaledEstimate < 0) {
1:c439f53:         scaledEstimate = 0;
1:c439f53:       }
1:c439f53:       return (byte) scaledEstimate;
1:c439f53:     }
1:c439f53:   }
1:c439f53: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1: public final class EstimateConverter {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:c439f53
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup.track1;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class EstimateConverter {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(EstimateConverter.class);
1: 
1:   private EstimateConverter() {}
1: 
1:   public static byte convert(double estimate, long userID, long itemID) {
1:     if (Double.isNaN(estimate)) {
1:       log.warn("Unable to compute estimate for user {}, item {}", userID, itemID);
1:       return 0x7F;
1:     } else {
1:       int scaledEstimate = (int) (estimate * 2.55);
1:       if (scaledEstimate > 255) {
1:         scaledEstimate = 255;
1:       } else if (scaledEstimate < 0) {
1:         scaledEstimate = 0;
1:       }
1:       return (byte) scaledEstimate;
1:     }
1:   }
1: }
============================================================================