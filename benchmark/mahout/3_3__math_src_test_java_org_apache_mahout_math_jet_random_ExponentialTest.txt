1:1bc1c14: /*
1:1bc1c14:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1bc1c14:  * contributor license agreements.  See the NOTICE file distributed with
1:1bc1c14:  * this work for additional information regarding copyright ownership.
1:1bc1c14:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1bc1c14:  * (the "License"); you may not use this file except in compliance with
1:1bc1c14:  * the License.  You may obtain a copy of the License at
1:1bc1c14:  *
1:1bc1c14:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1bc1c14:  *
1:1bc1c14:  * Unless required by applicable law or agreed to in writing, software
1:1bc1c14:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1bc1c14:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1bc1c14:  * See the License for the specific language governing permissions and
1:1bc1c14:  * limitations under the License.
2:1bc1c14:  */
2:1bc1c14: 
1:1bc1c14: package org.apache.mahout.math.jet.random;
1:1bc1c14: 
1:22726e8: import org.apache.mahout.common.RandomUtils;
1:ff79ff4: import org.apache.mahout.math.MahoutTestCase;
1:1bc1c14: import org.junit.Test;
1:1bc1c14: 
1:1bc1c14: import java.util.Arrays;
1:1bc1c14: 
1:ff79ff4: public final class ExponentialTest extends MahoutTestCase {
1:85ec3a3: 
1:b840d2f:   @Test
1:8396a27:   public void consistency() {
1:b840d2f:     Exponential dist = new Exponential(1, RandomUtils.getRandom());
1:b840d2f:     // deciles computed using R
1:b840d2f:     double[] breaks = {0.1053605, 0.2231436, 0.3566749, 0.5108256, 0.6931472, 0.9162907, 1.2039728, 1.6094379, 2.3025851};
1:b840d2f:     for (double lambda : new double[]{0.01, 0.1, 1, 2, 5, 100}) {
1:b840d2f:       dist.setState(lambda);
1:b840d2f:       DistributionChecks.checkDistribution(dist, breaks, 0, 1 / lambda, 10000);
1:b840d2f:     }
1:b840d2f:   }
1:1bc1c14:   @Test
1:1bc1c14:   public void testCdf() {
1:22726e8:     Exponential dist = new Exponential(5.0, RandomUtils.getRandom());
1:1bc1c14:     for (int i = 0; i < 1000; i++) {
1:1bc1c14:       double x = i / 50.0;
1:ff79ff4:       assertEquals(1 - Math.exp(-x * 5.0), dist.cdf(x), 1.0e-9);
1:1bc1c14:     }
1:1bc1c14:   }
1:1bc1c14: 
1:1bc1c14:   @Test
1:1bc1c14:   public void testPdf() {
1:1bc1c14:     checkPdf(new Exponential(13.0, null), 13.0);
1:1bc1c14:   }
1:1bc1c14: 
1:ff79ff4:   private static void checkPdf(Exponential dist, double lambda) {
1:1bc1c14:     assertEquals(0, dist.pdf(-1), 0);
1:1bc1c14:     double sum = 0;
1:1bc1c14:     double dx = 0.001 / lambda;
1:e64dd36:     for (double x = 0; x < 20/lambda; x+=dx) {
1:1bc1c14:       sum += x * dist.pdf(x) * dx;
1:ff79ff4:       assertEquals(Math.exp(-x * lambda) * lambda, dist.pdf(x), 1.0e-9);
1:1bc1c14:     }
1:ff79ff4:     assertEquals(1 / lambda, sum, 1.0e-6 / lambda);
1:1bc1c14:   }
1:1bc1c14: 
1:1bc1c14:   @Test
1:1bc1c14:   public void testSetState() {
1:1bc1c14:     Exponential dist = new Exponential(13.0, null);
1:1bc1c14:     for (double lambda = 0.1; lambda < 1000; lambda *= 1.3) {
1:1bc1c14:       dist.setState(lambda);
1:1bc1c14:       checkPdf(dist, lambda);
1:1bc1c14:     }
1:1bc1c14:   }
1:1bc1c14: 
1:1bc1c14:   @Test
1:ff79ff4:   public void testNextDouble() throws Exception {
1:ff79ff4:     double[] x = {
1:ff79ff4:         -0.01, 0.1053605, 0.2231436, 0.3566749, 0.5108256, 0.6931472, 0.9162907, 1.2039728, 1.6094379, 2.3025851
1:ff79ff4:     };
1:22726e8:     Exponential dist = new Exponential(1, RandomUtils.getRandom());
1:0bff670:     for (double lambda : new double[]{13.0, 0.02, 1.6}) {
1:0bff670:       dist.setState(lambda);
1:1bc1c14:       checkEmpiricalDistribution(dist, 10000, lambda);
1:ff79ff4:       DistributionChecks.checkDistribution(dist, x, 0, 1 / lambda, 10000);
1:1bc1c14:     }
1:1bc1c14:   }
1:1bc1c14: 
1:ff79ff4:   private static void checkEmpiricalDistribution(Exponential dist, int n, double lambda) {
1:1bc1c14:     double[] x = new double[n];
1:1bc1c14:     for (int i = 0; i < n; i++) {
1:1bc1c14:       x[i] = dist.nextDouble();
1:1bc1c14:     }
1:1bc1c14:     Arrays.sort(x);
1:1bc1c14:     for (int i = 0; i < n; i++) {
1:1bc1c14:       double cumulative = (double) i / (n - 1);
1:1bc1c14:       assertEquals(String.format("lambda = %.3f", lambda), cumulative, dist.cdf(x[i]), 0.02);
1:1bc1c14:     }
1:1bc1c14:   }
1:1bc1c14: 
1:1bc1c14:   @Test
1:1bc1c14:   public void testToString() {
1:1bc1c14:     assertEquals("org.apache.mahout.math.jet.random.Exponential(3.1000)", new Exponential(3.1, null).toString());
1:1bc1c14:     assertEquals("org.apache.mahout.math.jet.random.Exponential(3.1000)", new Exponential(3.1, null).toString());
1:1bc1c14:   }
1:1bc1c14: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1:   public void consistency() {
commit:85ec3a3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
commit:58fd277
/////////////////////////////////////////////////////////////////////////
0:   public void consistency() throws Exception {
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.MahoutTestCase;
1: public final class ExponentialTest extends MahoutTestCase {
1:       assertEquals(1 - Math.exp(-x * 5.0), dist.cdf(x), 1.0e-9);
/////////////////////////////////////////////////////////////////////////
1:   private static void checkPdf(Exponential dist, double lambda) {
1:       assertEquals(Math.exp(-x * lambda) * lambda, dist.pdf(x), 1.0e-9);
1:     assertEquals(1 / lambda, sum, 1.0e-6 / lambda);
/////////////////////////////////////////////////////////////////////////
1:   public void testNextDouble() throws Exception {
1:     double[] x = {
1:         -0.01, 0.1053605, 0.2231436, 0.3566749, 0.5108256, 0.6931472, 0.9162907, 1.2039728, 1.6094379, 2.3025851
1:     };
1:       DistributionChecks.checkDistribution(dist, x, 0, 1 / lambda, 10000);
1:   private static void checkEmpiricalDistribution(Exponential dist, int n, double lambda) {
/////////////////////////////////////////////////////////////////////////
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     for (double x = 0; x < 20/lambda; x+=dx) {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:b840d2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.math.ConvergenceException;
0: import org.apache.commons.math.FunctionEvaluationException;
/////////////////////////////////////////////////////////////////////////
1:   @Test
0:   public void consistency() throws ConvergenceException, FunctionEvaluationException {
1:     Exponential dist = new Exponential(1, RandomUtils.getRandom());
1:     // deciles computed using R
1:     double[] breaks = {0.1053605, 0.2231436, 0.3566749, 0.5108256, 0.6931472, 0.9162907, 1.2039728, 1.6094379, 2.3025851};
1:     for (double lambda : new double[]{0.01, 0.1, 1, 2, 5, 100}) {
1:       dist.setState(lambda);
1:       DistributionChecks.checkDistribution(dist, breaks, 0, 1 / lambda, 10000);
1:     }
1:   }
commit:1ead75a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class ExponentialTest extends DistributionChecks {
commit:22726e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1:     Exponential dist = new Exponential(5.0, RandomUtils.getRandom());
/////////////////////////////////////////////////////////////////////////
1:     Exponential dist = new Exponential(1, RandomUtils.getRandom());
commit:0bff670
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.math.ConvergenceException;
0: import org.apache.commons.math.FunctionEvaluationException;
/////////////////////////////////////////////////////////////////////////
0: public class ExponentialTest extends DistributionTest {
/////////////////////////////////////////////////////////////////////////
0:   public void testNextDouble() throws ConvergenceException, FunctionEvaluationException {
0:     double[] x = {-0.01, 0.1053605, 0.2231436, 0.3566749, 0.5108256, 0.6931472, 0.9162907, 1.2039728, 1.6094379, 2.3025851};
0:     Exponential dist = new Exponential(1, new MersenneTwister(1));
1:     for (double lambda : new double[]{13.0, 0.02, 1.6}) {
1:       dist.setState(lambda);
0:       checkDistribution(dist, x, 0, 1 / lambda, 10000);
commit:1bc1c14
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.jet.random;
1: 
0: import org.apache.mahout.math.jet.random.engine.MersenneTwister;
1: import org.junit.Test;
1: 
1: import java.util.Arrays;
0: import java.util.Locale;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: /**
0:  * Created by IntelliJ IDEA. User: tdunning Date: Aug 31, 2010 Time: 7:14:19 PM To change this
0:  * template use File | Settings | File Templates.
1:  */
0: public class ExponentialTest {
1:   @Test
1:   public void testCdf() {
0:     Exponential dist = new Exponential(5.0, new MersenneTwister(1));
1:     for (int i = 0; i < 1000; i++) {
1:       double x = i / 50.0;
0:       assertEquals(1 - Math.exp(-x * 5.0), dist.cdf(x), 1e-9);
1:     }
1:   }
1: 
1:   @Test
1:   public void testPdf() {
1:     checkPdf(new Exponential(13.0, null), 13.0);
1:   }
1: 
0:   private void checkPdf(Exponential dist, double lambda) {
1:     assertEquals(0, dist.pdf(-1), 0);
1:     double sum = 0;
1:     double dx = 0.001 / lambda;
0:     for (double x = 0; x < 20/lambda;x+=dx) {
1:       sum += x * dist.pdf(x) * dx;
0:       assertEquals(Math.exp(-x * lambda) * lambda, dist.pdf(x), 1e-9);
1:     }
0:     assertEquals(1 / lambda, sum, 1e-6 / lambda);
1:   }
1: 
1:   @Test
1:   public void testSetState() {
1:     Exponential dist = new Exponential(13.0, null);
1:     for (double lambda = 0.1; lambda < 1000; lambda *= 1.3) {
1:       dist.setState(lambda);
1:       checkPdf(dist, lambda);
1:     }
1:   }
1: 
1:   @Test
0:   public void testNextDouble() {
0:     for (double lambda : new double[] {13.0, 0.02, 1.6}) {
0:       Exponential dist = new Exponential(lambda, new MersenneTwister(1));
1:       checkEmpiricalDistribution(dist, 10000, lambda);
1:     }
1:   }
1: 
0:   private void checkEmpiricalDistribution(Exponential dist, int n, double lambda) {
1:     double[] x = new double[n];
1:     for (int i = 0; i < n; i++) {
1:       x[i] = dist.nextDouble();
1:     }
1:     Arrays.sort(x);
1:     for (int i = 0; i < n; i++) {
1:       double cumulative = (double) i / (n - 1);
1:       assertEquals(String.format("lambda = %.3f", lambda), cumulative, dist.cdf(x[i]), 0.02);
1:     }
1:   }
1: 
1:   @Test
1:   public void testToString() {
1:     assertEquals("org.apache.mahout.math.jet.random.Exponential(3.1000)", new Exponential(3.1, null).toString());
0:     Locale.setDefault(Locale.GERMAN);
1:     assertEquals("org.apache.mahout.math.jet.random.Exponential(3.1000)", new Exponential(3.1, null).toString());
1:   }
1: }
============================================================================