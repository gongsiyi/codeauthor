1:845cbcd: /*
1:845cbcd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:845cbcd:  * contributor license agreements.  See the NOTICE file distributed with
1:845cbcd:  * this work for additional information regarding copyright ownership.
1:845cbcd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:845cbcd:  * (the "License"); you may not use this file except in compliance with
1:845cbcd:  * the License.  You may obtain a copy of the License at
1:845cbcd:  *
1:845cbcd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:845cbcd:  *
1:845cbcd:  * Unless required by applicable law or agreed to in writing, software
1:845cbcd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:845cbcd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:845cbcd:  * See the License for the specific language governing permissions and
1:845cbcd:  * limitations under the License.
1:845cbcd:  */
1:845cbcd: 
1:845cbcd: package org.apache.mahout.math.hadoop.similarity.cooccurrence.measures;
1:845cbcd: 
1:845cbcd: import org.apache.mahout.common.ClassUtils;
1:845cbcd: import org.apache.mahout.common.MahoutTestCase;
1:be94533: import org.apache.mahout.math.DenseVector;
1:845cbcd: import org.apache.mahout.math.RandomAccessSparseVector;
1:be94533: import org.apache.mahout.math.SequentialAccessSparseVector;
1:845cbcd: import org.apache.mahout.math.Vector;
1:845cbcd: import org.junit.Test;
1:845cbcd: 
1:845cbcd: public class VectorSimilarityMeasuresTest extends MahoutTestCase {
1:845cbcd: 
1:1499411:   static double distributedSimilarity(double[] one,
1:1499411:                                       double[] two,
1:1499411:                                       Class<? extends VectorSimilarityMeasure> similarityMeasureClass) {
1:be94533:     double rand = computeSimilarity(one, two, similarityMeasureClass, new RandomAccessSparseVector(one.length));
1:be94533:     double seq = computeSimilarity(one, two, similarityMeasureClass, new SequentialAccessSparseVector(one.length));
1:be94533:     double dense = computeSimilarity(one, two, similarityMeasureClass, new DenseVector(one.length));
1:4ca6b86:     assertEquals(seq, rand, 1.0e-10);
1:4ca6b86:     assertEquals(seq, dense, 1.0e-10);
1:4ca6b86:     assertEquals(dense, rand, 1.0e-10);
1:be94533:     return seq;
1:be94533:   }
1:be94533: 
1:be94533:   private static double computeSimilarity(double[] one, double[] two,
1:be94533:       Class<? extends VectorSimilarityMeasure> similarityMeasureClass,
1:be94533:       Vector like) {
1:845cbcd:     VectorSimilarityMeasure similarityMeasure = ClassUtils.instantiateAs(similarityMeasureClass,
1:845cbcd:         VectorSimilarityMeasure.class);
1:be94533:     Vector oneNormalized = similarityMeasure.normalize(asVector(one, like));
1:be94533:     Vector twoNormalized = similarityMeasure.normalize(asVector(two, like));
1:845cbcd: 
1:845cbcd:     double normOne = similarityMeasure.norm(oneNormalized);
1:845cbcd:     double normTwo = similarityMeasure.norm(twoNormalized);
1:845cbcd: 
1:845cbcd:     double dot = 0;
1:845cbcd:     for (int n = 0; n < one.length; n++) {
1:845cbcd:       if (oneNormalized.get(n) != 0 && twoNormalized.get(n) != 0) {
1:845cbcd:         dot += similarityMeasure.aggregate(oneNormalized.get(n), twoNormalized.get(n));
2:845cbcd:       }
1:845cbcd:     }
1:be94533: 
1:845cbcd:     return similarityMeasure.similarity(dot, normOne, normTwo, one.length);
1:845cbcd:   }
1:845cbcd: 
1:be94533:   static Vector asVector(double[] values, Vector like) {
1:be94533:     Vector vector = like.like();
1:845cbcd:     for (int dim = 0; dim < values.length; dim++) {
1:be94533:       vector.set(dim, values[dim]);
1:845cbcd:     }
1:845cbcd:     return vector;
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Test
1:845cbcd:   public void testCooccurrenceCountSimilarity() {
1:845cbcd:     double similarity = distributedSimilarity(
1:845cbcd:         new double[] { 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0 },
1:845cbcd:         new double[] { 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 }, CooccurrenceCountSimilarity.class);
1:845cbcd: 
1:1499411:     assertEquals(5.0, similarity, 0);
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Test
1:845cbcd:   public void testTanimotoCoefficientSimilarity() {
1:845cbcd:     double similarity = distributedSimilarity(
1:845cbcd:         new double[] { 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0 },
1:845cbcd:         new double[] { 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 }, TanimotoCoefficientSimilarity.class);
1:845cbcd: 
1:845cbcd:     assertEquals(0.454545455, similarity, EPSILON);
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Test
1:845cbcd:   public void testCityblockSimilarity() {
1:845cbcd:     double similarity = distributedSimilarity(
1:845cbcd:         new double[] { 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0 },
1:845cbcd:         new double[] { 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 }, CityBlockSimilarity.class);
1:845cbcd: 
1:845cbcd:     assertEquals(0.142857143, similarity, EPSILON);
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Test
1:845cbcd:   public void testLoglikelihoodSimilarity() {
1:845cbcd:     double similarity = distributedSimilarity(
1:845cbcd:         new double[] { 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0 },
1:845cbcd:         new double[] { 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 }, LoglikelihoodSimilarity.class);
1:845cbcd: 
1:845cbcd:     assertEquals(0.03320155369284261, similarity, EPSILON);
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Test
1:845cbcd:   public void testCosineSimilarity() {
1:845cbcd:     double similarity = distributedSimilarity(
1:845cbcd:         new double[] { 0, 2, 0, 0, 8, 3, 0, 6, 0, 1, 2, 2, 0 },
1:845cbcd:         new double[] { 3, 0, 0, 0, 7, 0, 2, 2, 1, 3, 2, 1, 1 }, CosineSimilarity.class);
1:845cbcd: 
1:845cbcd:     assertEquals(0.769846046, similarity, EPSILON);
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Test
1:845cbcd:   public void testPearsonCorrelationSimilarity() {
1:845cbcd:     double similarity = distributedSimilarity(
1:845cbcd:         new double[] { 0, 2, 0, 0, 8, 3, 0, 6, 0, 1, 1, 2, 1 },
1:845cbcd:         new double[] { 3, 0, 0, 0, 7, 0, 2, 2, 1, 3, 2, 4, 3 }, PearsonCorrelationSimilarity.class);
1:845cbcd: 
1:845cbcd:     assertEquals(0.5303300858899108, similarity, EPSILON);
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Test
1:845cbcd:   public void testEuclideanDistanceSimilarity() {
1:845cbcd:     double similarity = distributedSimilarity(
1:845cbcd:         new double[] { 0, 2, 0, 0, 8, 3, 0, 6, 0, 1, 1, 2, 1 },
1:845cbcd:         new double[] { 3, 0, 0, 0, 7, 0, 2, 2, 1, 3, 2, 4, 4 }, EuclideanDistanceSimilarity.class);
1:845cbcd: 
1:dbf9bd3:     assertEquals(0.11268865367232477, similarity, EPSILON);
1:845cbcd:   }
1:845cbcd: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(seq, rand, 1.0e-10);
1:     assertEquals(seq, dense, 1.0e-10);
1:     assertEquals(dense, rand, 1.0e-10);
commit:dbf9bd3
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0.11268865367232477, similarity, EPSILON);
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:   static double distributedSimilarity(double[] one,
1:                                       double[] two,
1:                                       Class<? extends VectorSimilarityMeasure> similarityMeasureClass) {
/////////////////////////////////////////////////////////////////////////
0:   static Vector asSparseVector(double[] values) {
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(5.0, similarity, 0);
author:Robin Anil
-------------------------------------------------------------------------------
commit:be94533
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
/////////////////////////////////////////////////////////////////////////
1:     double rand = computeSimilarity(one, two, similarityMeasureClass, new RandomAccessSparseVector(one.length));
1:     double seq = computeSimilarity(one, two, similarityMeasureClass, new SequentialAccessSparseVector(one.length));
1:     double dense = computeSimilarity(one, two, similarityMeasureClass, new DenseVector(one.length));
0:     assertEquals(seq, rand, 1e-10);
0:     assertEquals(seq, dense, 1e-10);
0:     assertEquals(dense, rand, 1e-10);
1:     return seq;
1:   }
1: 
1:   private static double computeSimilarity(double[] one, double[] two,
1:       Class<? extends VectorSimilarityMeasure> similarityMeasureClass,
1:       Vector like) {
1:     Vector oneNormalized = similarityMeasure.normalize(asVector(one, like));
1:     Vector twoNormalized = similarityMeasure.normalize(asVector(two, like));
/////////////////////////////////////////////////////////////////////////
1: 
1:   static Vector asVector(double[] values, Vector like) {
1:     Vector vector = like.like();
1:       vector.set(dim, values[dim]);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:845cbcd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.similarity.cooccurrence.measures;
1: 
1: import org.apache.mahout.common.ClassUtils;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.junit.Test;
1: 
1: public class VectorSimilarityMeasuresTest extends MahoutTestCase {
1: 
0:   double distributedSimilarity(double[] one, double[] two, Class<? extends VectorSimilarityMeasure> similarityMeasureClass) {
1:     VectorSimilarityMeasure similarityMeasure = ClassUtils.instantiateAs(similarityMeasureClass,
1:         VectorSimilarityMeasure.class);
0:     Vector oneNormalized = similarityMeasure.normalize(asSparseVector(one));
0:     Vector twoNormalized = similarityMeasure.normalize(asSparseVector(two));
1: 
1:     double normOne = similarityMeasure.norm(oneNormalized);
1:     double normTwo = similarityMeasure.norm(twoNormalized);
1: 
1:     double dot = 0;
1:     for (int n = 0; n < one.length; n++) {
1:       if (oneNormalized.get(n) != 0 && twoNormalized.get(n) != 0) {
1:         dot += similarityMeasure.aggregate(oneNormalized.get(n), twoNormalized.get(n));
1:       }
1:     }
1:     return similarityMeasure.similarity(dot, normOne, normTwo, one.length);
1:   }
1: 
0:   Vector asSparseVector(double[] values) {
0:     Vector vector = new RandomAccessSparseVector(Integer.MAX_VALUE);
1:     for (int dim = 0; dim < values.length; dim++) {
0:       if (values[dim] != 0) {
0:         vector.setQuick(dim, values[dim]);
1:       }
1:     }
1:     return vector;
1:   }
1: 
1:   @Test
1:   public void testCooccurrenceCountSimilarity() {
1:     double similarity = distributedSimilarity(
1:         new double[] { 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0 },
1:         new double[] { 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 }, CooccurrenceCountSimilarity.class);
1: 
0:     assertEquals(5d, similarity, 0);
1:   }
1: 
1:   @Test
1:   public void testTanimotoCoefficientSimilarity() {
1:     double similarity = distributedSimilarity(
1:         new double[] { 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0 },
1:         new double[] { 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 }, TanimotoCoefficientSimilarity.class);
1: 
1:     assertEquals(0.454545455, similarity, EPSILON);
1:   }
1: 
1:   @Test
1:   public void testCityblockSimilarity() {
1:     double similarity = distributedSimilarity(
1:         new double[] { 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0 },
1:         new double[] { 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 }, CityBlockSimilarity.class);
1: 
1:     assertEquals(0.142857143, similarity, EPSILON);
1:   }
1: 
1:   @Test
1:   public void testLoglikelihoodSimilarity() {
1:     double similarity = distributedSimilarity(
1:         new double[] { 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0 },
1:         new double[] { 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 }, LoglikelihoodSimilarity.class);
1: 
1:     assertEquals(0.03320155369284261, similarity, EPSILON);
1:   }
1: 
1:   @Test
1:   public void testCosineSimilarity() {
1:     double similarity = distributedSimilarity(
1:         new double[] { 0, 2, 0, 0, 8, 3, 0, 6, 0, 1, 2, 2, 0 },
1:         new double[] { 3, 0, 0, 0, 7, 0, 2, 2, 1, 3, 2, 1, 1 }, CosineSimilarity.class);
1: 
1:     assertEquals(0.769846046, similarity, EPSILON);
1:   }
1: 
1:   @Test
1:   public void testPearsonCorrelationSimilarity() {
1:     double similarity = distributedSimilarity(
1:         new double[] { 0, 2, 0, 0, 8, 3, 0, 6, 0, 1, 1, 2, 1 },
1:         new double[] { 3, 0, 0, 0, 7, 0, 2, 2, 1, 3, 2, 4, 3 }, PearsonCorrelationSimilarity.class);
1: 
1:     assertEquals(0.5303300858899108, similarity, EPSILON);
1:   }
1: 
1:   @Test
1:   public void testEuclideanDistanceSimilarity() {
1:     double similarity = distributedSimilarity(
1:         new double[] { 0, 2, 0, 0, 8, 3, 0, 6, 0, 1, 1, 2, 1 },
1:         new double[] { 3, 0, 0, 0, 7, 0, 2, 2, 1, 3, 2, 4, 4 }, EuclideanDistanceSimilarity.class);
1: 
0:     assertEquals(0.887311346, similarity, EPSILON);
1:   }
1: }
============================================================================