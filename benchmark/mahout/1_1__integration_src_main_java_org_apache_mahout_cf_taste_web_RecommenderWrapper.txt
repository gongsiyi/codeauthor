1:e4cbc9a: /**
1:e4cbc9a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e4cbc9a:  * contributor license agreements.  See the NOTICE file distributed with
1:e4cbc9a:  * this work for additional information regarding copyright ownership.
1:e4cbc9a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e4cbc9a:  * (the "License"); you may not use this file except in compliance with
1:e4cbc9a:  * the License.  You may obtain a copy of the License at
1:e4cbc9a:  *
1:e4cbc9a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e4cbc9a:  *
1:e4cbc9a:  * Unless required by applicable law or agreed to in writing, software
1:e4cbc9a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e4cbc9a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e4cbc9a:  * See the License for the specific language governing permissions and
1:e4cbc9a:  * limitations under the License.
1:e4cbc9a:  */
1:e4cbc9a: 
1:e4cbc9a: package org.apache.mahout.cf.taste.web;
1:e4cbc9a: 
1:f3a9cc1: import com.google.common.io.Files;
1:f3a9cc1: import com.google.common.io.InputSupplier;
1:f3a9cc1: import com.google.common.io.Resources;
1:e4cbc9a: import org.apache.mahout.cf.taste.common.Refreshable;
1:e4cbc9a: import org.apache.mahout.cf.taste.common.TasteException;
1:e4cbc9a: import org.apache.mahout.cf.taste.model.DataModel;
1:e4cbc9a: import org.apache.mahout.cf.taste.recommender.IDRescorer;
1:e4cbc9a: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:e4cbc9a: import org.apache.mahout.cf.taste.recommender.Recommender;
1:05078f9: import org.slf4j.Logger;
1:05078f9: import org.slf4j.LoggerFactory;
1:e4cbc9a: 
1:e4cbc9a: import java.io.File;
1:e4cbc9a: import java.io.IOException;
1:e4cbc9a: import java.io.InputStream;
1:f3a9cc1: import java.net.URL;
1:e4cbc9a: import java.util.Collection;
1:e4cbc9a: import java.util.List;
1:e4cbc9a: 
1:e4cbc9a: /**
1:e4cbc9a:  * Users of the packaging and deployment mechanism in this module need
1:e4cbc9a:  * to produce a {@link Recommender} implementation with a no-arg constructor,
1:e4cbc9a:  * which will internally build the desired {@link Recommender} and delegate
1:e4cbc9a:  * to it. This wrapper simplifies that process. Simply extend this class and
1:e4cbc9a:  * implement {@link #buildRecommender()}.
1:e4cbc9a:  */
1:e4cbc9a: public abstract class RecommenderWrapper implements Recommender {
1:e4cbc9a: 
1:05078f9:   private static final Logger log = LoggerFactory.getLogger(RecommenderWrapper.class);
1:05078f9: 
1:e4cbc9a:   private final Recommender delegate;
1:e4cbc9a: 
1:e4cbc9a:   protected RecommenderWrapper() throws TasteException, IOException {
1:e4cbc9a:     this.delegate = buildRecommender();
4:e4cbc9a:   }
1:e4cbc9a: 
1:e4cbc9a:   /**
1:e4cbc9a:    * @return the {@link Recommender} which should be used to produce recommendations
1:e4cbc9a:    *  by this wrapper implementation
1:e4cbc9a:    */
1:e4cbc9a:   protected abstract Recommender buildRecommender() throws IOException, TasteException;
1:e4cbc9a: 
1:e4cbc9a:   @Override
1:d61a0ee:   public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
1:e4cbc9a:     return delegate.recommend(userID, howMany);
1:e4cbc9a:   }
1:e4cbc9a: 
1:e4cbc9a:   @Override
1:d61a0ee:   public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
1:e4cbc9a:     return delegate.recommend(userID, howMany, rescorer);
1:e4cbc9a:   }
1:e4cbc9a: 
1:e4cbc9a:   @Override
1:e4cbc9a:   public float estimatePreference(long userID, long itemID) throws TasteException {
1:e4cbc9a:     return delegate.estimatePreference(userID, itemID);
1:e4cbc9a:   }
1:e4cbc9a: 
1:e4cbc9a:   @Override
1:d61a0ee:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:e4cbc9a:     delegate.setPreference(userID, itemID, value);
1:e4cbc9a:   }
1:e4cbc9a: 
1:e4cbc9a:   @Override
1:e4cbc9a:   public void removePreference(long userID, long itemID) throws TasteException {
1:e4cbc9a:     delegate.removePreference(userID, itemID);
1:e4cbc9a:   }
1:e4cbc9a: 
1:e4cbc9a:   @Override
1:e4cbc9a:   public DataModel getDataModel() {
1:e4cbc9a:     return delegate.getDataModel();
1:e4cbc9a:   }
1:e4cbc9a: 
1:e4cbc9a:   @Override
1:e4cbc9a:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:e4cbc9a:     delegate.refresh(alreadyRefreshed);
1:e4cbc9a:   }
1:e4cbc9a: 
1:4ce88a0:   /**
1:4ce88a0:    * Reads the given resource into a temporary file. This is intended to be used
1:4ce88a0:    * to read data files which are stored as a resource available on the classpath,
1:4ce88a0:    * such as in a JAR file. However for convenience the resource name will also
1:4ce88a0:    * be interpreted as a relative path to a local file, if no such resource is
1:4ce88a0:    * found. This facilitates testing.
1:4ce88a0:    *
1:4ce88a0:    * @param resourceName name of resource in classpath, or relative path to file
1:4ce88a0:    * @return temporary {@link File} with resource data
1:4ce88a0:    * @throws IOException if an error occurs while reading or writing data
1:4ce88a0:    */
1:4ce88a0:   public static File readResourceToTempFile(String resourceName) throws IOException {
1:05078f9:     String absoluteResource = resourceName.startsWith("/") ? resourceName : '/' + resourceName;
1:05078f9:     log.info("Loading resource {}", absoluteResource);
1:f3a9cc1:     InputSupplier<? extends InputStream> inSupplier;
1:f3a9cc1:     try {
1:f3a9cc1:       URL resourceURL = Resources.getResource(RecommenderWrapper.class, absoluteResource);
1:f3a9cc1:       inSupplier = Resources.newInputStreamSupplier(resourceURL);
1:f3a9cc1:     } catch (IllegalArgumentException iae) {
1:05078f9:       File resourceFile = new File(resourceName);
1:05078f9:       log.info("Falling back to load file {}", resourceFile.getAbsolutePath());
1:f3a9cc1:       inSupplier = Files.newInputStreamSupplier(resourceFile);
1:4ce88a0:     }
1:f3a9cc1:     File tempFile = File.createTempFile("taste", null);
1:f3a9cc1:     tempFile.deleteOnExit();
1:f3a9cc1:     Files.copy(inSupplier, tempFile);
1:f3a9cc1:     return tempFile;
1:e4cbc9a:   }
1:e4cbc9a: 
1:e4cbc9a: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:50fd693
commit:f3a9cc1
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Files;
1: import com.google.common.io.InputSupplier;
1: import com.google.common.io.Resources;
1: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
1:     InputSupplier<? extends InputStream> inSupplier;
1:     try {
1:       URL resourceURL = Resources.getResource(RecommenderWrapper.class, absoluteResource);
1:       inSupplier = Resources.newInputStreamSupplier(resourceURL);
1:     } catch (IllegalArgumentException iae) {
1:       inSupplier = Files.newInputStreamSupplier(resourceFile);
1:     File tempFile = File.createTempFile("taste", null);
1:     tempFile.deleteOnExit();
1:     Files.copy(inSupplier, tempFile);
1:     return tempFile;
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
1:   public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
1:   public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
/////////////////////////////////////////////////////////////////////////
1:   public void setPreference(long userID, long itemID, float value) throws TasteException {
commit:05078f9
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:   private static final Logger log = LoggerFactory.getLogger(RecommenderWrapper.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     String absoluteResource = resourceName.startsWith("/") ? resourceName : '/' + resourceName;
1:     log.info("Loading resource {}", absoluteResource);
0:     InputStream is = RecommenderWrapper.class.getResourceAsStream(absoluteResource);
1:       File resourceFile = new File(resourceName);
1:       log.info("Falling back to load file {}", resourceFile.getAbsolutePath());
0:       is = new FileInputStream(resourceFile);
commit:4ce88a0
/////////////////////////////////////////////////////////////////////////
0: import java.io.FileInputStream;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Reads the given resource into a temporary file. This is intended to be used
1:    * to read data files which are stored as a resource available on the classpath,
1:    * such as in a JAR file. However for convenience the resource name will also
1:    * be interpreted as a relative path to a local file, if no such resource is
1:    * found. This facilitates testing.
1:    *
1:    * @param resourceName name of resource in classpath, or relative path to file
1:    * @return temporary {@link File} with resource data
1:    * @throws IOException if an error occurs while reading or writing data
1:    */
1:   public static File readResourceToTempFile(String resourceName) throws IOException {
0:     if (is == null) {
0:       is = new FileInputStream(resourceName);
1:     }
commit:e4cbc9a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.web;
1: 
1: import org.apache.mahout.cf.taste.common.Refreshable;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.recommender.IDRescorer;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1: import org.apache.mahout.cf.taste.recommender.Recommender;
0: import org.apache.mahout.common.IOUtils;
1: 
1: import java.io.File;
0: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
0: import java.io.OutputStream;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: /**
1:  * Users of the packaging and deployment mechanism in this module need
1:  * to produce a {@link Recommender} implementation with a no-arg constructor,
1:  * which will internally build the desired {@link Recommender} and delegate
1:  * to it. This wrapper simplifies that process. Simply extend this class and
1:  * implement {@link #buildRecommender()}.
1:  */
1: public abstract class RecommenderWrapper implements Recommender {
1: 
1:   private final Recommender delegate;
1: 
1:   protected RecommenderWrapper() throws TasteException, IOException {
1:     this.delegate = buildRecommender();
1:   }
1: 
1:   /**
1:    * @return the {@link Recommender} which should be used to produce recommendations
1:    *  by this wrapper implementation
1:    */
1:   protected abstract Recommender buildRecommender() throws IOException, TasteException;
1: 
1:   @Override
0:   public List<RecommendedItem> recommend(long userID, int howMany)
0:       throws TasteException {
1:     return delegate.recommend(userID, howMany);
1:   }
1: 
1:   @Override
0:   public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer)
0:       throws TasteException {
1:     return delegate.recommend(userID, howMany, rescorer);
1:   }
1: 
1:   @Override
1:   public float estimatePreference(long userID, long itemID) throws TasteException {
1:     return delegate.estimatePreference(userID, itemID);
1:   }
1: 
1:   @Override
0:   public void setPreference(long userID, long itemID, float value)
0:       throws TasteException {
1:     delegate.setPreference(userID, itemID, value);
1:   }
1: 
1:   @Override
1:   public void removePreference(long userID, long itemID) throws TasteException {
1:     delegate.removePreference(userID, itemID);
1:   }
1: 
1:   @Override
1:   public DataModel getDataModel() {
1:     return delegate.getDataModel();
1:   }
1: 
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:     delegate.refresh(alreadyRefreshed);
1:   }
1: 
0:   protected static final File readResourceToTempFile(String resourceName) throws IOException {
0:     InputStream is = RecommenderWrapper.class.getResourceAsStream(resourceName);
0:     try {
0:       File tempFile = File.createTempFile("taste", null);
0:       tempFile.deleteOnExit();
0:       OutputStream os = new FileOutputStream(tempFile);
0:       try {
0:         int bytesRead;
0:         byte[] buffer = new byte[32768];
0:         while ((bytesRead = is.read(buffer)) > 0) {
0:           os.write(buffer, 0, bytesRead);
1:         }
0:         os.flush();
0:         return tempFile;
0:       } finally {
0:         IOUtils.quietClose(os);
1:       }
0:     } finally {
0:       IOUtils.quietClose(is);
1:     }
1:   }
1: 
1: }
============================================================================