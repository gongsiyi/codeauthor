1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:812d0ba: package org.apache.mahout.benchmark;
1:812d0ba: 
1:812d0ba: import java.util.Random;
1:812d0ba: import java.util.concurrent.TimeUnit;
1:812d0ba: 
1:812d0ba: import org.apache.mahout.common.RandomUtils;
1:812d0ba: import org.apache.mahout.common.TimingStatistics;
1:812d0ba: import org.apache.mahout.math.Vector;
1:812d0ba: 
1:812d0ba: import com.google.common.base.Function;
1:812d0ba: 
1:812d0ba: public final class BenchmarkRunner {
1:812d0ba:   private static final int BUCKET_SIZE = 10000;
1:812d0ba:   private static final Random R = RandomUtils.getRandom();
1:812d0ba:   private final long maxTimeUsec;
1:812d0ba:   private final long leadTimeUsec;
1:812d0ba: 
1:812d0ba:   public BenchmarkRunner(long leadTimeMs, long maxTimeMs) {
1:812d0ba:     maxTimeUsec = TimeUnit.MILLISECONDS.toNanos(maxTimeMs);
1:812d0ba:     leadTimeUsec = TimeUnit.MILLISECONDS.toNanos(leadTimeMs);
1:812d0ba:   }
1:812d0ba: 
1:4ca6b86:   public abstract static class BenchmarkFn implements Function<Integer, Boolean> {
1:812d0ba:     protected int randIndex() {
1:812d0ba:       return BenchmarkRunner.randIndex();
1:812d0ba:     }
1:812d0ba: 
1:812d0ba:     protected boolean randBool() {
1:812d0ba:       return BenchmarkRunner.randBool();
1:812d0ba:     }
1:812d0ba: 
1:812d0ba:     /**
1:812d0ba:      * Adds a random data dependency so that JVM does not remove dead code.
1:812d0ba:      */
1:812d0ba:     protected boolean depends(Vector v) {
1:812d0ba:       return randIndex() < v.getNumNondefaultElements();
1:812d0ba:     }
1:812d0ba:   }
1:812d0ba: 
1:4ca6b86:   public abstract static class BenchmarkFnD implements Function<Integer, Double> {
1:812d0ba:     protected int randIndex() {
1:812d0ba:       return BenchmarkRunner.randIndex();
1:812d0ba:     }
1:812d0ba: 
1:812d0ba:     protected boolean randBool() {
1:812d0ba:       return BenchmarkRunner.randBool();
1:812d0ba:     }
1:812d0ba: 
1:812d0ba:     /**
1:812d0ba:      * Adds a random data dependency so that JVM does not remove dead code.
1:812d0ba:      */
1:812d0ba:     protected boolean depends(Vector v) {
1:812d0ba:       return randIndex() < v.getNumNondefaultElements();
1:812d0ba:     }
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   private static int randIndex() {
1:812d0ba:     return R.nextInt(BUCKET_SIZE);
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   private static boolean randBool() {
1:812d0ba:     return R.nextBoolean();
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   public TimingStatistics benchmark(BenchmarkFn function) {
1:812d0ba:     TimingStatistics stats = new TimingStatistics();
1:812d0ba:     boolean result = false;
1:812d0ba:     while (true) {
1:812d0ba:       int i = R.nextInt(BUCKET_SIZE);
1:812d0ba:       TimingStatistics.Call call = stats.newCall(leadTimeUsec);
1:812d0ba:       result = result ^ function.apply(i);
1:812d0ba:       if (call.end(maxTimeUsec)) {
1:812d0ba:         break;
1:812d0ba:       }
1:812d0ba:     }
1:812d0ba:     return stats;
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   public TimingStatistics benchmarkD(BenchmarkFnD function) {
1:812d0ba:     TimingStatistics stats = new TimingStatistics();
1:812d0ba:     double result = 0;
1:812d0ba:     while (true) {
1:812d0ba:       int i = R.nextInt(BUCKET_SIZE);
1:812d0ba:       TimingStatistics.Call call = stats.newCall(leadTimeUsec);
1:812d0ba:       result += function.apply(i);
1:812d0ba:       if (call.end(maxTimeUsec)) {
1:812d0ba:         break;
1:812d0ba:       }
1:812d0ba:     }
1:812d0ba:     // print result to prevent hotspot from eliminating deadcode
1:812d0ba:     System.err.println("Result = " + result);
1:812d0ba:     return stats;
1:812d0ba:   }
1:812d0ba: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:   public abstract static class BenchmarkFn implements Function<Integer, Boolean> {
/////////////////////////////////////////////////////////////////////////
1:   public abstract static class BenchmarkFnD implements Function<Integer, Double> {
author:Robin Anil
-------------------------------------------------------------------------------
commit:812d0ba
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.benchmark;
1: 
1: import java.util.Random;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.common.TimingStatistics;
1: import org.apache.mahout.math.Vector;
1: 
1: import com.google.common.base.Function;
1: 
1: public final class BenchmarkRunner {
1:   private static final int BUCKET_SIZE = 10000;
1:   private static final Random R = RandomUtils.getRandom();
1:   private final long maxTimeUsec;
1:   private final long leadTimeUsec;
1: 
1:   public BenchmarkRunner(long leadTimeMs, long maxTimeMs) {
1:     maxTimeUsec = TimeUnit.MILLISECONDS.toNanos(maxTimeMs);
1:     leadTimeUsec = TimeUnit.MILLISECONDS.toNanos(leadTimeMs);
1:   }
1: 
0:   public static abstract class BenchmarkFn implements Function<Integer, Boolean> {
1:     protected int randIndex() {
1:       return BenchmarkRunner.randIndex();
1:     }
1: 
1:     protected boolean randBool() {
1:       return BenchmarkRunner.randBool();
1:     }
1: 
1:     /**
1:      * Adds a random data dependency so that JVM does not remove dead code.
1:      */
1:     protected boolean depends(Vector v) {
1:       return randIndex() < v.getNumNondefaultElements();
1:     }
1:   }
1: 
0:   public static abstract class BenchmarkFnD implements Function<Integer, Double> {
1:     protected int randIndex() {
1:       return BenchmarkRunner.randIndex();
1:     }
1: 
1:     protected boolean randBool() {
1:       return BenchmarkRunner.randBool();
1:     }
1: 
1:     /**
1:      * Adds a random data dependency so that JVM does not remove dead code.
1:      */
1:     protected boolean depends(Vector v) {
1:       return randIndex() < v.getNumNondefaultElements();
1:     }
1:   }
1: 
1:   private static int randIndex() {
1:     return R.nextInt(BUCKET_SIZE);
1:   }
1: 
1:   private static boolean randBool() {
1:     return R.nextBoolean();
1:   }
1: 
1:   public TimingStatistics benchmark(BenchmarkFn function) {
1:     TimingStatistics stats = new TimingStatistics();
1:     boolean result = false;
1:     while (true) {
1:       int i = R.nextInt(BUCKET_SIZE);
1:       TimingStatistics.Call call = stats.newCall(leadTimeUsec);
1:       result = result ^ function.apply(i);
1:       if (call.end(maxTimeUsec)) {
1:         break;
1:       }
1:     }
1:     return stats;
1:   }
1: 
1:   public TimingStatistics benchmarkD(BenchmarkFnD function) {
1:     TimingStatistics stats = new TimingStatistics();
1:     double result = 0;
1:     while (true) {
1:       int i = R.nextInt(BUCKET_SIZE);
1:       TimingStatistics.Call call = stats.newCall(leadTimeUsec);
1:       result += function.apply(i);
1:       if (call.end(maxTimeUsec)) {
1:         break;
1:       }
1:     }
1:     // print result to prevent hotspot from eliminating deadcode
1:     System.err.println("Result = " + result);
1:     return stats;
1:   }
1: }
============================================================================