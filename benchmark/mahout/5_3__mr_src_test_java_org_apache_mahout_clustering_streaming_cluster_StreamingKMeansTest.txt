1:fd24254: /*
1:fd24254:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fd24254:  * contributor license agreements.  See the NOTICE file distributed with
1:fd24254:  * this work for additional information regarding copyright ownership.
1:fd24254:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fd24254:  * (the "License"); you may not use this file except in compliance with
1:fd24254:  * the License.  You may obtain a copy of the License at
1:fd24254:  *
1:fd24254:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fd24254:  *
1:fd24254:  * Unless required by applicable law or agreed to in writing, software
1:fd24254:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fd24254:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd24254:  * See the License for the specific language governing permissions and
1:fd24254:  * limitations under the License.
1:fd24254:  */
1:fd24254: 
1:fd24254: package org.apache.mahout.clustering.streaming.cluster;
1:fd24254: 
1:fd24254: 
1:fd24254: import java.util.Arrays;
1:fd24254: import java.util.List;
1:fd24254: 
1:fd24254: import org.apache.mahout.clustering.ClusteringUtils;
1:fd24254: import org.apache.mahout.common.Pair;
1:9abf755: import org.apache.mahout.common.RandomUtils;
1:fd24254: import org.apache.mahout.common.distance.EuclideanDistanceMeasure;
1:fd24254: import org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure;
1:fd24254: import org.apache.mahout.math.Centroid;
1:fd24254: import org.apache.mahout.math.Vector;
1:fd24254: import org.apache.mahout.math.neighborhood.BruteSearch;
1:fd24254: import org.apache.mahout.math.neighborhood.FastProjectionSearch;
1:fd24254: import org.apache.mahout.math.neighborhood.ProjectionSearch;
1:fd24254: import org.apache.mahout.math.neighborhood.Searcher;
1:fd24254: import org.apache.mahout.math.neighborhood.UpdatableSearcher;
1:fd24254: import org.apache.mahout.math.random.WeightedThing;
1:9abf755: import org.junit.Before;
1:fd24254: import org.junit.Test;
1:fd24254: import org.junit.runner.RunWith;
1:fd24254: import org.junit.runners.Parameterized;
1:fd24254: 
1:fd24254: import static org.junit.Assert.assertEquals;
1:fd24254: import static org.junit.Assert.assertTrue;
1:fd24254: import static org.junit.runners.Parameterized.Parameters;
1:fd24254: 
1:fd24254: 
1:4ca6b86: @RunWith(Parameterized.class)
1:fd24254: public class StreamingKMeansTest {
1:fd24254:   private static final int NUM_DATA_POINTS = 1 << 16;
1:fd24254:   private static final int NUM_DIMENSIONS = 6;
1:fd24254:   private static final int NUM_PROJECTIONS = 2;
1:fd24254:   private static final int SEARCH_SIZE = 10;
1:fd24254: 
1:9abf755:   private static Pair<List<Centroid>, List<Centroid>> syntheticData ;
1:9abf755: 
1:9abf755:   @Before
1:9abf755:   public void setUp() {
1:9abf755:     RandomUtils.useTestSeed();
1:9abf755:     syntheticData =
1:fd24254:       DataUtils.sampleMultiNormalHypercube(NUM_DIMENSIONS, NUM_DATA_POINTS);
1:9abf755:   }
1:fd24254: 
1:fd24254:   private UpdatableSearcher searcher;
1:fd24254:   private boolean allAtOnce;
1:fd24254: 
1:fd24254:   public StreamingKMeansTest(UpdatableSearcher searcher, boolean allAtOnce) {
1:fd24254:     this.searcher = searcher;
1:fd24254:     this.allAtOnce = allAtOnce;
1:fd24254:   }
1:fd24254: 
1:fd24254:   @Parameters
1:fd24254:   public static List<Object[]> generateData() {
1:fd24254:     return Arrays.asList(new Object[][] {
1:fd24254:         {new ProjectionSearch(new SquaredEuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE), true},
1:fd24254:         {new FastProjectionSearch(new SquaredEuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE),
1:fd24254:             true},
1:fd24254:         {new ProjectionSearch(new SquaredEuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE), false},
1:fd24254:         {new FastProjectionSearch(new SquaredEuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE),
1:fd24254:             false},
1:fd24254:     });
1:fd24254:   }
1:fd24254: 
1:fd24254:   @Test
1:fd24254:   public void testAverageDistanceCutoff() {
1:fd24254:     double avgDistanceCutoff = 0;
1:fd24254:     double avgNumClusters = 0;
1:fd24254:     int numTests = 1;
1:fd24254:     System.out.printf("Distance cutoff for %s\n", searcher.getClass().getName());
1:fd24254:     for (int i = 0; i < numTests; ++i) {
1:fd24254:       searcher.clear();
1:fd24254:       int numStreamingClusters = (int)Math.log(syntheticData.getFirst().size()) * (1 <<
1:fd24254:           NUM_DIMENSIONS);
1:4ca6b86:       double distanceCutoff = 1.0e-6;
1:fd24254:       double estimatedCutoff = ClusteringUtils.estimateDistanceCutoff(syntheticData.getFirst(),
1:fd24254:           searcher.getDistanceMeasure(), 100);
1:fd24254:       System.out.printf("[%d] Generated synthetic data [magic] %f [estimate] %f\n", i, distanceCutoff, estimatedCutoff);
1:fd24254:       StreamingKMeans clusterer =
1:fd24254:           new StreamingKMeans(searcher, numStreamingClusters, estimatedCutoff);
1:fd24254:       clusterer.cluster(syntheticData.getFirst());
1:fd24254:       avgDistanceCutoff += clusterer.getDistanceCutoff();
1:fd24254:       avgNumClusters += clusterer.getNumClusters();
1:fd24254:       System.out.printf("[%d] %f\n", i, clusterer.getDistanceCutoff());
1:fd24254:     }
1:fd24254:     avgDistanceCutoff /= numTests;
1:fd24254:     avgNumClusters /= numTests;
1:fd24254:     System.out.printf("Final: distanceCutoff: %f estNumClusters: %f\n", avgDistanceCutoff, avgNumClusters);
1:fd24254:   }
1:fd24254: 
1:fd24254:   @Test
1:fd24254:   public void testClustering() {
1:fd24254:     searcher.clear();
1:fd24254:     int numStreamingClusters = (int)Math.log(syntheticData.getFirst().size()) * (1 << NUM_DIMENSIONS);
1:fd24254:     System.out.printf("k log n = %d\n", numStreamingClusters);
1:fd24254:     double estimatedCutoff = ClusteringUtils.estimateDistanceCutoff(syntheticData.getFirst(),
1:fd24254:         searcher.getDistanceMeasure(), 100);
1:fd24254:     StreamingKMeans clusterer =
1:fd24254:         new StreamingKMeans(searcher, numStreamingClusters, estimatedCutoff);
1:fd24254: 
1:fd24254:     long startTime = System.currentTimeMillis();
1:fd24254:     if (allAtOnce) {
1:fd24254:       clusterer.cluster(syntheticData.getFirst());
1:fd24254:     } else {
1:fd24254:       for (Centroid datapoint : syntheticData.getFirst()) {
1:fd24254:         clusterer.cluster(datapoint);
1:fd24254:       }
1:fd24254:     }
1:fd24254:     long endTime = System.currentTimeMillis();
1:fd24254: 
1:fd24254:     System.out.printf("%s %s\n", searcher.getClass().getName(), searcher.getDistanceMeasure()
1:fd24254:         .getClass().getName());
1:fd24254:     System.out.printf("Total number of clusters %d\n", clusterer.getNumClusters());
1:fd24254: 
1:fd24254:     System.out.printf("Weights: %f %f\n", ClusteringUtils.totalWeight(syntheticData.getFirst()),
1:fd24254:         ClusteringUtils.totalWeight(clusterer));
1:fd24254:     assertEquals("Total weight not preserved", ClusteringUtils.totalWeight(syntheticData.getFirst()),
1:4ca6b86:         ClusteringUtils.totalWeight(clusterer), 1.0e-9);
1:fd24254: 
1:fd24254:     // and verify that each corner of the cube has a centroid very nearby
1:fd24254:     double maxWeight = 0;
1:fd24254:     for (Vector mean : syntheticData.getSecond()) {
1:fd24254:       WeightedThing<Vector> v = searcher.search(mean, 1).get(0);
1:fd24254:       maxWeight = Math.max(v.getWeight(), maxWeight);
1:fd24254:     }
1:fd24254:     assertTrue("Maximum weight too large " + maxWeight, maxWeight < 0.05);
1:fd24254:     double clusterTime = (endTime - startTime) / 1000.0;
1:fd24254:     System.out.printf("%s\n%.2f for clustering\n%.1f us per row\n\n",
1:fd24254:         searcher.getClass().getName(), clusterTime,
1:4ca6b86:         clusterTime / syntheticData.getFirst().size() * 1.0e6);
1:fd24254: 
1:fd24254:     // verify that the total weight of the centroids near each corner is correct
1:fd24254:     double[] cornerWeights = new double[1 << NUM_DIMENSIONS];
1:fd24254:     Searcher trueFinder = new BruteSearch(new EuclideanDistanceMeasure());
1:fd24254:     for (Vector trueCluster : syntheticData.getSecond()) {
1:fd24254:       trueFinder.add(trueCluster);
1:fd24254:     }
1:fd24254:     for (Centroid centroid : clusterer) {
1:fd24254:       WeightedThing<Vector> closest = trueFinder.search(centroid, 1).get(0);
1:fd24254:       cornerWeights[((Centroid)closest.getValue()).getIndex()] += centroid.getWeight();
1:fd24254:     }
1:fd24254:     int expectedNumPoints = NUM_DATA_POINTS / (1 << NUM_DIMENSIONS);
1:fd24254:     for (double v : cornerWeights) {
1:fd24254:       System.out.printf("%f ", v);
1:fd24254:     }
1:fd24254:     System.out.println();
1:fd24254:     for (double v : cornerWeights) {
1:fd24254:       assertEquals(expectedNumPoints, v, 0);
1:fd24254:     }
1:fd24254:   }
1:fd24254: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:sslavic
-------------------------------------------------------------------------------
commit:9abf755
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1:   private static Pair<List<Centroid>, List<Centroid>> syntheticData ;
1: 
1:   @Before
1:   public void setUp() {
1:     RandomUtils.useTestSeed();
1:     syntheticData =
1:   }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1: @RunWith(Parameterized.class)
/////////////////////////////////////////////////////////////////////////
1:       double distanceCutoff = 1.0e-6;
/////////////////////////////////////////////////////////////////////////
1:         ClusteringUtils.totalWeight(clusterer), 1.0e-9);
/////////////////////////////////////////////////////////////////////////
1:         clusterTime / syntheticData.getFirst().size() * 1.0e6);
author:dfilimon
-------------------------------------------------------------------------------
commit:cb80ec6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ec9035c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.neighborhood.LocalitySensitiveHashSearch;
/////////////////////////////////////////////////////////////////////////
0:         {new LocalitySensitiveHashSearch(new SquaredEuclideanDistanceMeasure(), SEARCH_SIZE), true},
0:         {new LocalitySensitiveHashSearch(new SquaredEuclideanDistanceMeasure(), SEARCH_SIZE), false},
commit:fd24254
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.clustering.streaming.cluster;
1: 
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.apache.mahout.clustering.ClusteringUtils;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.distance.EuclideanDistanceMeasure;
1: import org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure;
1: import org.apache.mahout.math.Centroid;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.neighborhood.BruteSearch;
1: import org.apache.mahout.math.neighborhood.FastProjectionSearch;
1: import org.apache.mahout.math.neighborhood.ProjectionSearch;
1: import org.apache.mahout.math.neighborhood.Searcher;
1: import org.apache.mahout.math.neighborhood.UpdatableSearcher;
1: import org.apache.mahout.math.random.WeightedThing;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.runners.Parameterized.Parameters;
1: 
1: 
0: @RunWith(value = Parameterized.class)
1: public class StreamingKMeansTest {
1:   private static final int NUM_DATA_POINTS = 1 << 16;
1:   private static final int NUM_DIMENSIONS = 6;
1:   private static final int NUM_PROJECTIONS = 2;
1:   private static final int SEARCH_SIZE = 10;
1: 
0:   private static final Pair<List<Centroid>, List<Centroid>> syntheticData =
1:       DataUtils.sampleMultiNormalHypercube(NUM_DIMENSIONS, NUM_DATA_POINTS);
1: 
1:   private UpdatableSearcher searcher;
1:   private boolean allAtOnce;
1: 
1:   public StreamingKMeansTest(UpdatableSearcher searcher, boolean allAtOnce) {
1:     this.searcher = searcher;
1:     this.allAtOnce = allAtOnce;
1:   }
1: 
1:   @Parameters
1:   public static List<Object[]> generateData() {
1:     return Arrays.asList(new Object[][] {
1:         {new ProjectionSearch(new SquaredEuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE), true},
1:         {new FastProjectionSearch(new SquaredEuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE),
1:             true},
1:         {new ProjectionSearch(new SquaredEuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE), false},
1:         {new FastProjectionSearch(new SquaredEuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE),
1:             false},
1:     });
1:   }
1: 
1:   @Test
1:   public void testAverageDistanceCutoff() {
1:     double avgDistanceCutoff = 0;
1:     double avgNumClusters = 0;
1:     int numTests = 1;
1:     System.out.printf("Distance cutoff for %s\n", searcher.getClass().getName());
1:     for (int i = 0; i < numTests; ++i) {
1:       searcher.clear();
1:       int numStreamingClusters = (int)Math.log(syntheticData.getFirst().size()) * (1 <<
1:           NUM_DIMENSIONS);
0:       double distanceCutoff = 1e-6;
1:       double estimatedCutoff = ClusteringUtils.estimateDistanceCutoff(syntheticData.getFirst(),
1:           searcher.getDistanceMeasure(), 100);
1:       System.out.printf("[%d] Generated synthetic data [magic] %f [estimate] %f\n", i, distanceCutoff, estimatedCutoff);
1:       StreamingKMeans clusterer =
1:           new StreamingKMeans(searcher, numStreamingClusters, estimatedCutoff);
1:       clusterer.cluster(syntheticData.getFirst());
1:       avgDistanceCutoff += clusterer.getDistanceCutoff();
1:       avgNumClusters += clusterer.getNumClusters();
1:       System.out.printf("[%d] %f\n", i, clusterer.getDistanceCutoff());
1:     }
1:     avgDistanceCutoff /= numTests;
1:     avgNumClusters /= numTests;
1:     System.out.printf("Final: distanceCutoff: %f estNumClusters: %f\n", avgDistanceCutoff, avgNumClusters);
1:   }
1: 
1:   @Test
1:   public void testClustering() {
1:     searcher.clear();
1:     int numStreamingClusters = (int)Math.log(syntheticData.getFirst().size()) * (1 << NUM_DIMENSIONS);
1:     System.out.printf("k log n = %d\n", numStreamingClusters);
1:     double estimatedCutoff = ClusteringUtils.estimateDistanceCutoff(syntheticData.getFirst(),
1:         searcher.getDistanceMeasure(), 100);
1:     StreamingKMeans clusterer =
1:         new StreamingKMeans(searcher, numStreamingClusters, estimatedCutoff);
1: 
1:     long startTime = System.currentTimeMillis();
1:     if (allAtOnce) {
1:       clusterer.cluster(syntheticData.getFirst());
1:     } else {
1:       for (Centroid datapoint : syntheticData.getFirst()) {
1:         clusterer.cluster(datapoint);
1:       }
1:     }
1:     long endTime = System.currentTimeMillis();
1: 
1:     System.out.printf("%s %s\n", searcher.getClass().getName(), searcher.getDistanceMeasure()
1:         .getClass().getName());
1:     System.out.printf("Total number of clusters %d\n", clusterer.getNumClusters());
1: 
1:     System.out.printf("Weights: %f %f\n", ClusteringUtils.totalWeight(syntheticData.getFirst()),
1:         ClusteringUtils.totalWeight(clusterer));
1:     assertEquals("Total weight not preserved", ClusteringUtils.totalWeight(syntheticData.getFirst()),
0:         ClusteringUtils.totalWeight(clusterer), 1e-9);
1: 
1:     // and verify that each corner of the cube has a centroid very nearby
1:     double maxWeight = 0;
1:     for (Vector mean : syntheticData.getSecond()) {
1:       WeightedThing<Vector> v = searcher.search(mean, 1).get(0);
1:       maxWeight = Math.max(v.getWeight(), maxWeight);
1:     }
1:     assertTrue("Maximum weight too large " + maxWeight, maxWeight < 0.05);
1:     double clusterTime = (endTime - startTime) / 1000.0;
1:     System.out.printf("%s\n%.2f for clustering\n%.1f us per row\n\n",
1:         searcher.getClass().getName(), clusterTime,
0:         clusterTime / syntheticData.getFirst().size() * 1e6);
1: 
1:     // verify that the total weight of the centroids near each corner is correct
1:     double[] cornerWeights = new double[1 << NUM_DIMENSIONS];
1:     Searcher trueFinder = new BruteSearch(new EuclideanDistanceMeasure());
1:     for (Vector trueCluster : syntheticData.getSecond()) {
1:       trueFinder.add(trueCluster);
1:     }
1:     for (Centroid centroid : clusterer) {
1:       WeightedThing<Vector> closest = trueFinder.search(centroid, 1).get(0);
1:       cornerWeights[((Centroid)closest.getValue()).getIndex()] += centroid.getWeight();
1:     }
1:     int expectedNumPoints = NUM_DATA_POINTS / (1 << NUM_DIMENSIONS);
1:     for (double v : cornerWeights) {
1:       System.out.printf("%f ", v);
1:     }
1:     System.out.println();
1:     for (double v : cornerWeights) {
1:       assertEquals(expectedNumPoints, v, 0);
1:     }
1:   }
1: }
============================================================================