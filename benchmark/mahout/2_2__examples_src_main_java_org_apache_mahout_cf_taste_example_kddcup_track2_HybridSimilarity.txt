1:17988ce: /**
1:17988ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:17988ce:  * contributor license agreements.  See the NOTICE file distributed with
1:17988ce:  * this work for additional information regarding copyright ownership.
1:17988ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:17988ce:  * (the "License"); you may not use this file except in compliance with
1:17988ce:  * the License.  You may obtain a copy of the License at
1:17988ce:  *
1:17988ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:17988ce:  *
1:17988ce:  * Unless required by applicable law or agreed to in writing, software
1:17988ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:17988ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:17988ce:  * See the License for the specific language governing permissions and
1:17988ce:  * limitations under the License.
1:17988ce:  */
1:17988ce: 
1:17988ce: package org.apache.mahout.cf.taste.example.kddcup.track2;
1:17988ce: 
1:17988ce: import java.io.File;
1:17988ce: import java.io.IOException;
1:17988ce: import java.util.Collection;
1:17988ce: 
1:17988ce: import org.apache.mahout.cf.taste.common.Refreshable;
1:17988ce: import org.apache.mahout.cf.taste.common.TasteException;
1:e23728d: import org.apache.mahout.cf.taste.impl.similarity.AbstractItemSimilarity;
1:17988ce: import org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity;
1:17988ce: import org.apache.mahout.cf.taste.model.DataModel;
1:17988ce: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1:17988ce: 
1:e23728d: final class HybridSimilarity extends AbstractItemSimilarity {
1:17988ce: 
1:17988ce:   private final ItemSimilarity cfSimilarity;
1:17988ce:   private final ItemSimilarity contentSimilarity;
1:17988ce: 
1:17988ce:   HybridSimilarity(DataModel dataModel, File dataFileDirectory) throws IOException {
1:e23728d:     super(dataModel);
1:17988ce:     cfSimilarity = new LogLikelihoodSimilarity(dataModel);
1:17988ce:     contentSimilarity = new TrackItemSimilarity(dataFileDirectory);
1:17988ce:   }
1:17988ce: 
1:17988ce:   @Override
1:17988ce:   public double itemSimilarity(long itemID1, long itemID2) throws TasteException {
1:17988ce:     return contentSimilarity.itemSimilarity(itemID1, itemID2) * cfSimilarity.itemSimilarity(itemID1, itemID2);
1:17988ce:   }
1:17988ce: 
1:17988ce:   @Override
1:17988ce:   public double[] itemSimilarities(long itemID1, long[] itemID2s) throws TasteException {
1:17988ce:     double[] result = contentSimilarity.itemSimilarities(itemID1, itemID2s);
1:17988ce:     double[] multipliers = cfSimilarity.itemSimilarities(itemID1, itemID2s);
1:17988ce:     for (int i = 0; i < result.length; i++) {
1:17988ce:       result[i] *= multipliers[i];
1:17988ce:     }
1:17988ce:     return result;
1:17988ce:   }
1:17988ce: 
1:17988ce:   @Override
1:17988ce:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:17988ce:     cfSimilarity.refresh(alreadyRefreshed);
1:17988ce:   }
1:17988ce: 
1:17988ce: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e23728d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.similarity.AbstractItemSimilarity;
1: final class HybridSimilarity extends AbstractItemSimilarity {
1:     super(dataModel);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:17988ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup.track2;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Collection;
1: 
1: import org.apache.mahout.cf.taste.common.Refreshable;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1: 
0: final class HybridSimilarity implements ItemSimilarity {
1: 
1:   private final ItemSimilarity cfSimilarity;
1:   private final ItemSimilarity contentSimilarity;
1: 
1:   HybridSimilarity(DataModel dataModel, File dataFileDirectory) throws IOException {
1:     cfSimilarity = new LogLikelihoodSimilarity(dataModel);
1:     contentSimilarity = new TrackItemSimilarity(dataFileDirectory);
1:   }
1: 
1:   @Override
1:   public double itemSimilarity(long itemID1, long itemID2) throws TasteException {
1:     return contentSimilarity.itemSimilarity(itemID1, itemID2) * cfSimilarity.itemSimilarity(itemID1, itemID2);
1:   }
1: 
1:   @Override
1:   public double[] itemSimilarities(long itemID1, long[] itemID2s) throws TasteException {
1:     double[] result = contentSimilarity.itemSimilarities(itemID1, itemID2s);
1:     double[] multipliers = cfSimilarity.itemSimilarities(itemID1, itemID2s);
1:     for (int i = 0; i < result.length; i++) {
1:       result[i] *= multipliers[i];
1:     }
1:     return result;
1:   }
1: 
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:     cfSimilarity.refresh(alreadyRefreshed);
1:   }
1: 
1: }
============================================================================