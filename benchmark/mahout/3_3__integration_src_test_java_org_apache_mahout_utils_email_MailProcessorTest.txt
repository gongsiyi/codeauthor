1:29a7f38: /**
1:4194a28:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4194a28:  * contributor license agreements.  See the NOTICE file distributed with
1:4194a28:  * this work for additional information regarding copyright ownership.
1:4194a28:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4194a28:  * (the "License"); you may not use this file except in compliance with
1:4194a28:  * the License.  You may obtain a copy of the License at
1:29a7f38:  *
1:4194a28:  *     http://www.apache.org/licenses/LICENSE-2.0
1:29a7f38:  *
1:4194a28:  * Unless required by applicable law or agreed to in writing, software
1:4194a28:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4194a28:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4194a28:  * See the License for the specific language governing permissions and
1:4194a28:  * limitations under the License.
1:4194a28:  */
4:29a7f38: 
1:29a7f38: package org.apache.mahout.utils.email;
1:29a7f38: 
1:29a7f38: import java.io.File;
1:29a7f38: import java.io.StringWriter;
1:29a7f38: import java.net.URL;
1:29a7f38: import java.util.regex.Pattern;
1:29a7f38: 
1:85f9ece: import org.apache.commons.io.Charsets;
1:85f9ece: import org.apache.mahout.common.MahoutTestCase;
1:85f9ece: import org.junit.Test;
1:85f9ece: 
1:4194a28: public final class MailProcessorTest extends MahoutTestCase {
1:29a7f38: 
1:29a7f38:   @Test
1:29a7f38:   public void testLabel() throws Exception {
1:29a7f38:     StringWriter writer = new StringWriter();
1:29a7f38:     MailOptions options = new MailOptions();
1:4194a28:     options.setSeparator(":::");
1:4194a28:     options.setCharset(Charsets.UTF_8);
1:4194a28:         options.setPatternsToMatch(new Pattern[]{
1:4194a28:         MailProcessor.FROM_PREFIX, MailProcessor.SUBJECT_PREFIX, MailProcessor.TO_PREFIX});
1:4194a28:     options.setInput(new File(System.getProperty("user.dir")));
1:29a7f38:     MailProcessor proc = new MailProcessor(options, "", writer);
1:29a7f38:     URL url = MailProcessorTest.class.getClassLoader().getResource("test.mbox");
1:29a7f38:     File file = new File(url.toURI());
1:29a7f38:     long count = proc.parseMboxLineByLine(file);
1:29a7f38:     assertEquals(7, count);
1:29a7f38:   }
1:29a7f38: 
1:69f324d:   @Test
1:69f324d:   public void testStripQuoted() throws Exception {
1:69f324d:     StringWriter writer = new StringWriter();
1:69f324d:     MailOptions options = new MailOptions();
1:69f324d:     options.setSeparator(":::");
1:69f324d:     options.setCharset(Charsets.UTF_8);
1:69f324d:         options.setPatternsToMatch(new Pattern[]{
1:69f324d:         MailProcessor.SUBJECT_PREFIX});
1:69f324d:     options.setInput(new File(System.getProperty("user.dir")));
1:69f324d:     options.setIncludeBody(true);
1:69f324d:     MailProcessor proc = new MailProcessor(options, "", writer);
1:69f324d:     URL url = MailProcessorTest.class.getClassLoader().getResource("test.mbox");
1:69f324d:     File file = new File(url.toURI());
1:69f324d:     long count = proc.parseMboxLineByLine(file);
1:69f324d:     assertEquals(7, count);
1:69f324d:     assertTrue(writer.getBuffer().toString().contains("> Cocoon Cron Block Configurable Clustering"));
1:69f324d:     writer = new StringWriter();
1:69f324d:     proc = new MailProcessor(options, "", writer);
1:69f324d:     options.setStripQuotedText(true);
1:69f324d:     count = proc.parseMboxLineByLine(file);
1:69f324d:     assertEquals(7, count);
1:69f324d:     assertFalse(writer.getBuffer().toString().contains("> Cocoon Cron Block Configurable Clustering"));
1:69f324d: 
1:69f324d:   }
1:69f324d: 
1:29a7f38: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.junit.Test;
1: 
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:69f324d
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testStripQuoted() throws Exception {
1:     StringWriter writer = new StringWriter();
1:     MailOptions options = new MailOptions();
1:     options.setSeparator(":::");
1:     options.setCharset(Charsets.UTF_8);
1:         options.setPatternsToMatch(new Pattern[]{
1:         MailProcessor.SUBJECT_PREFIX});
1:     options.setInput(new File(System.getProperty("user.dir")));
1:     options.setIncludeBody(true);
1:     MailProcessor proc = new MailProcessor(options, "", writer);
1:     URL url = MailProcessorTest.class.getClassLoader().getResource("test.mbox");
1:     File file = new File(url.toURI());
1:     long count = proc.parseMboxLineByLine(file);
1:     assertEquals(7, count);
1:     assertTrue(writer.getBuffer().toString().contains("> Cocoon Cron Block Configurable Clustering"));
1:     writer = new StringWriter();
1:     proc = new MailProcessor(options, "", writer);
1:     options.setStripQuotedText(true);
1:     count = proc.parseMboxLineByLine(file);
1:     assertEquals(7, count);
1:     assertFalse(writer.getBuffer().toString().contains("> Cocoon Cron Block Configurable Clustering"));
1: 
1:   }
1: 
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.email;
1: 
1: 
0: import org.apache.mahout.common.MahoutTestCase;
0: import org.junit.Test;
1: 
1: import java.io.File;
1: import java.io.StringWriter;
1: import java.net.URL;
0: import java.nio.charset.Charset;
1: import java.util.regex.Pattern;
1: 
1: /**
1:  *
1:  *
0:  **/
0: public class MailProcessorTest extends MahoutTestCase {
1:   @Test
1:   public void testLabel() throws Exception {
1:     StringWriter writer = new StringWriter();
1:     MailOptions options = new MailOptions();
0:     options.separator = ":::";
0:     options.charset = Charset.forName("UTF-8");
0:     options.patternsToMatch = new Pattern[]{MailProcessor.FROM_PREFIX, MailProcessor.SUBJECT_PREFIX, MailProcessor.TO_PREFIX};
0:     options.input = new File(System.getProperty("user.dir"));
1:     MailProcessor proc = new MailProcessor(options, "", writer);
1:     URL url = MailProcessorTest.class.getClassLoader().getResource("test.mbox");
1:     File file = new File(url.toURI());
0:     //System.out.println(file);
1:     long count = proc.parseMboxLineByLine(file);
1:     assertEquals(7, count);
0:     System.out.println(writer.getBuffer());
0:     //TODO
1: 
1:   }
1: 
1: 
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
0: import com.google.common.base.Charsets;
1: public final class MailProcessorTest extends MahoutTestCase {
0: 
1:     options.setSeparator(":::");
1:     options.setCharset(Charsets.UTF_8);
1:         options.setPatternsToMatch(new Pattern[]{
1:         MailProcessor.FROM_PREFIX, MailProcessor.SUBJECT_PREFIX, MailProcessor.TO_PREFIX});
1:     options.setInput(new File(System.getProperty("user.dir")));
============================================================================