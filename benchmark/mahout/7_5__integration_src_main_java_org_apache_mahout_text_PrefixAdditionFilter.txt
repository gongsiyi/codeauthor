1:a13b4b7: /**
1:a13b4b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a13b4b7:  * contributor license agreements.  See the NOTICE file distributed with
1:a13b4b7:  * this work for additional information regarding copyright ownership.
1:a13b4b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a13b4b7:  * (the "License"); you may not use this file except in compliance with
1:a13b4b7:  * the License.  You may obtain a copy of the License at
1:a13b4b7:  *
1:a13b4b7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a13b4b7:  *
1:a13b4b7:  * Unless required by applicable law or agreed to in writing, software
1:a13b4b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a13b4b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a13b4b7:  * See the License for the specific language governing permissions and
1:a13b4b7:  * limitations under the License.
1:a13b4b7:  */
1:a13b4b7: 
1:466f319: package org.apache.mahout.text;
2:466f319: 
1:466f319: import org.apache.hadoop.conf.Configuration;
1:466f319: import org.apache.hadoop.fs.FileStatus;
1:f5e7732: import org.apache.hadoop.fs.FileSystem;
1:466f319: import org.apache.hadoop.fs.Path;
1:a13b4b7: import org.apache.mahout.common.iterator.FileLineIterable;
1:29a7f38: import org.apache.mahout.utils.io.ChunkedWriter;
1:466f319: 
1:466f319: import java.io.IOException;
1:466f319: import java.io.InputStream;
1:7c0da90: import java.nio.charset.Charset;
1:466f319: import java.util.Map;
1:466f319: 
1:466f319: /**
1:466f319:  * Default parser for parsing text into sequence files.
1:466f319:  */
1:466f319: public final class PrefixAdditionFilter extends SequenceFilesFromDirectoryFilter {
1:466f319: 
1:f5e7732:   public PrefixAdditionFilter(Configuration conf,
1:f5e7732:                               String keyPrefix,
1:f5e7732:                               Map<String, String> options, 
1:f5e7732:                               ChunkedWriter writer,
1:7c0da90:                               Charset charset,
1:f5e7732:                               FileSystem fs) {
1:7c0da90:     super(conf, keyPrefix, options, writer, charset, fs);
1:466f319:   }
1:466f319: 
1:466f319:   @Override
1:466f319:   protected void process(FileStatus fst, Path current) throws IOException {
1:e4dfc93:     FileSystem fs = getFs();
1:e4dfc93:     ChunkedWriter writer = getWriter();
1:b988c49:     if (fst.isDir()) {
1:4a8d35e:       String dirPath = getPrefix() + Path.SEPARATOR + current.getName() + Path.SEPARATOR + fst.getPath().getName();
1:7c0da90:       fs.listStatus(fst.getPath(),
1:7c0da90:                     new PrefixAdditionFilter(getConf(), dirPath, getOptions(), writer, getCharset(), fs));
1:466f319:     } else {
1:85f9ece:       try (InputStream in = fs.open(fst.getPath())){
1:fb171d4:         StringBuilder file = new StringBuilder();
1:e4dfc93:         for (String aFit : new FileLineIterable(in, getCharset(), false)) {
1:fb171d4:           file.append(aFit).append('\n');
1:fb171d4:         }
1:fb171d4:         String name = current.getName().equals(fst.getPath().getName())
1:fb171d4:             ? current.getName()
1:fb171d4:             : current.getName() + Path.SEPARATOR + fst.getPath().getName();
1:e4dfc93:         writer.write(getPrefix() + Path.SEPARATOR + name, file.toString());
1:466f319:       }
1:466f319:     }
1:466f319:   }
1:466f319: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       try (InputStream in = fs.open(fst.getPath())){
/////////////////////////////////////////////////////////////////////////
commit:87c15be
/////////////////////////////////////////////////////////////////////////
0:     if (fst.isDirectory()) {
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
/////////////////////////////////////////////////////////////////////////
1:     if (fst.isDir()) {
author:smarthi
-------------------------------------------------------------------------------
commit:54a6657
/////////////////////////////////////////////////////////////////////////
0:         Closeables.close(in, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.utils.io.ChunkedWriter;
commit:fb171d4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.hadoop.io.IOUtils;
/////////////////////////////////////////////////////////////////////////
0:       InputStream in = null;
0:       try {
0:         in = fs.open(fst.getPath());
1:         StringBuilder file = new StringBuilder();
0:         for (String aFit : new FileLineIterable(in, charset, false)) {
1:           file.append(aFit).append('\n');
1:         }
1:         String name = current.getName().equals(fst.getPath().getName())
1:             ? current.getName()
1:             : current.getName() + Path.SEPARATOR + fst.getPath().getName();
0:         writer.write(prefix + Path.SEPARATOR + name, file.toString());
0:       } finally {
0:         IOUtils.closeStream(in);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:7c0da90
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.Charset;
/////////////////////////////////////////////////////////////////////////
1:                               Charset charset,
1:     super(conf, keyPrefix, options, writer, charset, fs);
/////////////////////////////////////////////////////////////////////////
1:       fs.listStatus(fst.getPath(),
1:                     new PrefixAdditionFilter(getConf(), dirPath, getOptions(), writer, getCharset(), fs));
commit:4a8d35e
/////////////////////////////////////////////////////////////////////////
1:       String dirPath = getPrefix() + Path.SEPARATOR + current.getName() + Path.SEPARATOR + fst.getPath().getName();
0:       fs.listStatus(fst.getPath(), new PrefixAdditionFilter(getConf(), dirPath, getOptions(), writer, fs));
commit:e4dfc93
/////////////////////////////////////////////////////////////////////////
1:     FileSystem fs = getFs();
1:     ChunkedWriter writer = getWriter();
0:                     new PrefixAdditionFilter(getConf(), getPrefix() + Path.SEPARATOR + current.getName(),
0:                                              getOptions(), writer, fs));
1:         for (String aFit : new FileLineIterable(in, getCharset(), false)) {
1:         writer.write(getPrefix() + Path.SEPARATOR + name, file.toString());
commit:3d44c1e
/////////////////////////////////////////////////////////////////////////
commit:f5e7732
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.fs.FileSystem;
/////////////////////////////////////////////////////////////////////////
1:   public PrefixAdditionFilter(Configuration conf,
1:                               String keyPrefix,
1:                               Map<String, String> options, 
1:                               ChunkedWriter writer,
1:                               FileSystem fs) {
0:     super(conf, keyPrefix, options, writer, fs);
/////////////////////////////////////////////////////////////////////////
0:                         options, writer, fs));
commit:50fd693
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import org.apache.mahout.common.iterator.FileLineIterable;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:38616e0
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:         Closeables.closeQuietly(in);
author:Isabel Drost
-------------------------------------------------------------------------------
commit:466f319
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.text;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileStatus;
0: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
0: import org.apache.mahout.common.FileLineIterable;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
0: import java.nio.charset.Charset;
1: import java.util.Map;
1: 
1: /**
1:  * Default parser for parsing text into sequence files.
1:  */
1: public final class PrefixAdditionFilter extends SequenceFilesFromDirectoryFilter {
0:   private static final Logger log = LoggerFactory.getLogger(PrefixAdditionFilter.class);
1: 
0:   public PrefixAdditionFilter(Configuration conf, String keyPrefix, Map<String, String> options, ChunkedWriter writer)
0:     throws IOException {
0:     super(conf, keyPrefix, options, writer);
1:   }
1: 
1:   @Override
1:   protected void process(FileStatus fst, Path current) throws IOException {
0:     if (fst.isDir()) {
0:       fs.listStatus(fst.getPath(),
0:                     new PrefixAdditionFilter(conf, prefix + Path.SEPARATOR + current.getName(),
0:                         options, writer));
1:     } else {
0:       InputStream in = fs.open(fst.getPath());
1: 
0:       StringBuilder file = new StringBuilder();
0:       for (String aFit : new FileLineIterable(in, charset, false)) {
0:         file.append(aFit).append('\n');
1:       }
0:       String name = current.getName().equals(fst.getPath().getName())
0:           ? current.getName()
0:           : current.getName() + Path.SEPARATOR + fst.getPath().getName();
0:       writer.write(prefix + Path.SEPARATOR + name, file.toString());
1:     }
1:   }
1: }
============================================================================