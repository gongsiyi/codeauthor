1:5352ea2: /*
1:5352ea2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5352ea2:  * contributor license agreements.  See the NOTICE file distributed with
1:5352ea2:  * this work for additional information regarding copyright ownership.
1:5352ea2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5352ea2:  * (the "License"); you may not use this file except in compliance with
1:5352ea2:  * the License.  You may obtain a copy of the License at
1:5352ea2:  *
1:5352ea2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5352ea2:  *
1:5352ea2:  * Unless required by applicable law or agreed to in writing, software
1:5352ea2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5352ea2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5352ea2:  * See the License for the specific language governing permissions and
1:5352ea2:  * limitations under the License.
1:5352ea2:  */
1:5352ea2: 
1:5352ea2: package org.apache.mahout.cf.taste.hadoop.item;
1:5352ea2: 
1:5352ea2: import org.apache.hadoop.io.LongWritable;
1:5352ea2: import org.apache.hadoop.io.Text;
1:5352ea2: import org.apache.hadoop.mapreduce.Mapper;
1:5352ea2: import org.apache.mahout.math.VarLongWritable;
1:5352ea2: 
1:5352ea2: import java.io.IOException;
1:5352ea2: import java.util.regex.Pattern;
1:5352ea2: 
1:5352ea2: /**
1:5352ea2:  * map out all user/item pairs to filter, keyed by the itemID
1:5352ea2:  */
1:5352ea2: public class ItemFilterMapper extends Mapper<LongWritable,Text,VarLongWritable,VarLongWritable> {
1:5352ea2: 
1:5352ea2:   private static final Pattern SEPARATOR = Pattern.compile("[\t,]");
1:5352ea2: 
1:9152a13:   private final VarLongWritable itemIDWritable = new VarLongWritable();
1:9152a13:   private final VarLongWritable userIDWritable = new VarLongWritable();
1:9152a13: 
1:5352ea2:   @Override
1:5352ea2:   protected void map(LongWritable key, Text line, Context ctx) throws IOException, InterruptedException {
1:5352ea2:     String[] tokens = SEPARATOR.split(line.toString());
1:5352ea2:     long userID = Long.parseLong(tokens[0]);
1:5352ea2:     long itemID = Long.parseLong(tokens[1]);
1:9152a13:     itemIDWritable.set(itemID);
1:9152a13:     userIDWritable.set(userID);
1:9152a13:     ctx.write(itemIDWritable, userIDWritable);
1:5352ea2:   }
1:5352ea2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:9152a13
/////////////////////////////////////////////////////////////////////////
1:   private final VarLongWritable itemIDWritable = new VarLongWritable();
1:   private final VarLongWritable userIDWritable = new VarLongWritable();
1: 
1:     itemIDWritable.set(itemID);
1:     userIDWritable.set(userID);
1:     ctx.write(itemIDWritable, userIDWritable);
commit:5352ea2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.hadoop.item;
1: 
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.math.VarLongWritable;
1: 
1: import java.io.IOException;
1: import java.util.regex.Pattern;
1: 
1: /**
1:  * map out all user/item pairs to filter, keyed by the itemID
1:  */
1: public class ItemFilterMapper extends Mapper<LongWritable,Text,VarLongWritable,VarLongWritable> {
1: 
1:   private static final Pattern SEPARATOR = Pattern.compile("[\t,]");
1: 
1:   @Override
1:   protected void map(LongWritable key, Text line, Context ctx) throws IOException, InterruptedException {
1:     String[] tokens = SEPARATOR.split(line.toString());
1:     long userID = Long.parseLong(tokens[0]);
1:     long itemID = Long.parseLong(tokens[1]);
0:     ctx.write(new VarLongWritable(itemID), new VarLongWritable(userID));
1:   }
1: }
============================================================================